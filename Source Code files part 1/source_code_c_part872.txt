s_utf8_ascii	CPerlObj::Perl_is_utf8_ascii
#define is_utf8_ascii		Perl_is_utf8_ascii
#define Perl_is_utf8_space	CPerlObj::Perl_is_utf8_space
#define is_utf8_space		Perl_is_utf8_space
#define Perl_is_utf8_cntrl	CPerlObj::Perl_is_utf8_cntrl
#define is_utf8_cntrl		Perl_is_utf8_cntrl
#define Perl_is_utf8_digit	CPerlObj::Perl_is_utf8_digit
#define is_utf8_digit		Perl_is_utf8_digit
#define Perl_is_utf8_graph	CPerlObj::Perl_is_utf8_graph
#define is_utf8_graph		Perl_is_utf8_graph
#define Perl_is_utf8_upper	CPerlObj::Perl_is_utf8_upper
#define is_utf8_upper		Perl_is_utf8_upper
#define Perl_is_utf8_lower	CPerlObj::Perl_is_utf8_lower
#define is_utf8_lower		Perl_is_utf8_lower
#define Perl_is_utf8_print	CPerlObj::Perl_is_utf8_print
#define is_utf8_print		Perl_is_utf8_print
#define Perl_is_utf8_punct	CPerlObj::Perl_is_utf8_punct
#define is_utf8_punct		Perl_is_utf8_punct
#define Perl_is_utf8_xdigit	CPerlObj::Perl_is_utf8_xdigit
#define is_utf8_xdigit		Perl_is_utf8_xdigit
#define Perl_is_utf8_mark	CPerlObj::Perl_is_utf8_mark
#define is_utf8_mark		Perl_is_utf8_mark
#define Perl_jmaybe		CPerlObj::Perl_jmaybe
#define jmaybe			Perl_jmaybe
#define Perl_keyword		CPerlObj::Perl_keyword
#define keyword			Perl_keyword
#define Perl_leave_scope	CPerlObj::Perl_leave_scope
#define leave_scope		Perl_leave_scope
#define Perl_lex_end		CPerlObj::Perl_lex_end
#define lex_end			Perl_lex_end
#define Perl_lex_start		CPerlObj::Perl_lex_start
#define lex_start		Perl_lex_start
#define Perl_linklist		CPerlObj::Perl_linklist
#define linklist		Perl_linklist
#define Perl_list		CPerlObj::Perl_list
#define list			Perl_list
#define Perl_listkids		CPerlObj::Perl_listkids
#define listkids		Perl_listkids
#define Perl_load_module	CPerlObj::Perl_load_module
#define load_module		Perl_load_module
#define Perl_vload_module	CPerlObj::Perl_vload_module
#define vload_module		Perl_vload_module
#define Perl_localize		CPerlObj::Perl_localize
#define localize		Perl_localize
#define Perl_looks_like_number	CPerlObj::Perl_looks_like_number
#define looks_like_number	Perl_looks_like_number
#define Perl_magic_clearenv	CPerlObj::Perl_magic_clearenv
#define magic_clearenv		Perl_magic_clearenv
#define Perl_magic_clear_all_env	CPerlObj::Perl_magic_clear_all_env
#define magic_clear_all_env	Perl_magic_clear_all_env
#define Perl_magic_clearpack	CPerlObj::Perl_magic_clearpack
#define magic_clearpack		Perl_magic_clearpack
#define Perl_magic_clearsig	CPerlObj::Perl_magic_clearsig
#define magic_clearsig		Perl_magic_clearsig
#define Perl_magic_existspack	CPerlObj::Perl_magic_existspack
#define magic_existspack	Perl_magic_existspack
#define Perl_magic_freeregexp	CPerlObj::Perl_magic_freeregexp
#define magic_freeregexp	Perl_magic_freeregexp
#define Perl_magic_get		CPerlObj::Perl_magic_get
#define magic_get		Perl_magic_get
#define Perl_magic_getarylen	CPerlObj::Perl_magic_getarylen
#define magic_getarylen		Perl_magic_getarylen
#define Perl_magic_getdefelem	CPerlObj::Perl_magic_getdefelem
#define magic_getdefelem	Perl_magic_getdefelem
#define Perl_magic_getglob	CPerlObj::Perl_magic_getglob
#define magic_getglob		Perl_magic_getglob
#define Perl_magic_getnkeys	CPerlObj::Perl_magic_getnkeys
#define magic_getnkeys		Perl_magic_getnkeys
#define Perl_magic_getpack	CPerlObj::Perl_magic_getpack
#define magic_getpack		Perl_magic_getpack
#define Perl_magic_getpos	CPerlObj::Perl_magic_getpos
#define magic_getpos		Perl_magic_getpos
#define Perl_magic_getsig	CPerlObj::Perl_magic_getsig
#define magic_getsig		Perl_magic_getsig
#define Perl_magic_getsubstr	CPerlObj::Perl_magic_getsubstr
#define magic_getsubstr		Perl_magic_getsubstr
#define Perl_magic_gettaint	CPerlObj::Perl_magic_gettaint
#define magic_gettaint		Perl_magic_gettaint
#define Perl_magic_getuvar	CPerlObj::Perl_magic_getuvar
#define magic_getuvar		Perl_magic_getuvar
#define Perl_magic_getvec	CPerlObj::Perl_magic_getvec
#define magic_getvec		Perl_magic_getvec
#define Perl_magic_len		CPerlObj::Perl_magic_len
#define magic_len		Perl_magic_len
#if defined(USE_THREADS)
#define Perl_magic_mutexfree	CPerlObj::Perl_magic_mutexfree
#define magic_mutexfree		Perl_magic_mutexfree
#endif
#define Perl_magic_nextpack	CPerlObj::Perl_magic_nextpack
#define magic_nextpack		Perl_magic_nextpack
#define Perl_magic_regdata_cnt	CPerlObj::Perl_magic_regdata_cnt
#define magic_regdata_cnt	Perl_magic_regdata_cnt
#define Perl_magic_regdatum_get	CPerlObj::Perl_magic_regdatum_get
#define magic_regdatum_get	Perl_magic_regdatum_get
#define Perl_magic_regdatum_set	CPerlObj::Perl_magic_regdatum_set
#define magic_regdatum_set	Perl_magic_regdatum_set
#define Perl_magic_set		CPerlObj::Perl_magic_set
#define magic_set		Perl_magic_set
#define Perl_magic_setamagic	CPerlObj::Perl_magic_setamagic
#define magic_setamagic		Perl_magic_setamagic
#define Perl_magic_setarylen	CPerlObj::Perl_magic_setarylen
#define magic_setarylen		Perl_magic_setarylen
#define Perl_magic_setbm	CPerlObj::Perl_magic_setbm
#define magic_setbm		Perl_magic_setbm
#define Perl_magic_setdbline	CPerlObj::Perl_magic_setdbline
#define magic_setdbline		Perl_magic_setdbline
#if defined(USE_LOCALE_COLLATE)
#define Perl_magic_setcollxfrm	CPerlObj::Perl_magic_setcollxfrm
#define magic_setcollxfrm	Perl_magic_setcollxfrm
#endif
#define Perl_magic_setdefelem	CPerlObj::Perl_magic_setdefelem
#define magic_setdefelem	Perl_magic_setdefelem
#define Perl_magic_setenv	CPerlObj::Perl_magic_setenv
#define magic_setenv		Perl_magic_setenv
#define Perl_magic_setfm	CPerlObj::Perl_magic_setfm
#define magic_setfm		Perl_magic_setfm
#define Perl_magic_setisa	CPerlObj::Perl_magic_setisa
#define magic_setisa		Perl_magic_setisa
#define Perl_magic_setglob	CPerlObj::Perl_magic_setglob
#define magic_setglob		Perl_magic_setglob
#define Perl_magic_setmglob	CPerlObj::Perl_magic_setmglob
#define magic_setmglob		Perl_magic_setmglob
#define Perl_magic_setnkeys	CPerlObj::Perl_magic_setnkeys
#define magic_setnkeys		Perl_magic_setnkeys
#define Perl_magic_setpack	CPerlObj::Perl_magic_setpack
#define magic_setpack		Perl_magic_setpack
#define Perl_magic_setpos	CPerlObj::Perl_magic_setpos
#define magic_setpos		Perl_magic_setpos
#define Perl_magic_setsig	CPerlObj::Perl_magic_setsig
#define magic_setsig		Perl_magic_setsig
#define Perl_magic_setsubstr	CPerlObj::Perl_magic_setsubstr
#define magic_setsubstr		Perl_magic_setsubstr
#define Perl_magic_settaint	CPerlObj::Perl_magic_settaint
#define magic_settaint		Perl_magic_settaint
#define Perl_magic_setuvar	CPerlObj::Perl_magic_setuvar
#define magic_setuvar		Perl_magic_setuvar
#define Perl_magic_setvec	CPerlObj::Perl_magic_setvec
#define magic_setvec		Perl_magic_setvec
#define Perl_magic_set_all_env	CPerlObj::Perl_magic_set_all_env
#define magic_set_all_env	Perl_magic_set_all_env
#define Perl_magic_sizepack	CPerlObj::Perl_magic_sizepack
#define magic_sizepack		Perl_magic_sizepack
#define Perl_magic_wipepack	CPerlObj::Perl_magic_wipepack
#define magic_wipepack		Perl_magic_wipepack
#define Perl_magicname		CPerlObj::Perl_magicname
#define magicname		Perl_magicname
#define Perl_markstack_grow	CPerlObj::Perl_markstack_grow
#define markstack_grow		Perl_markstack_grow
#if defined(USE_LOCALE_COLLATE)
#define Perl_mem_collxfrm	CPerlObj::Perl_mem_collxfrm
#define mem_collxfrm		Perl_mem_collxfrm
#endif
#define Perl_mess		CPerlObj::Perl_mess
#define mess			Perl_mess
#define Perl_vmess		CPerlObj::Perl_vmess
#define vmess			Perl_vmess
#define Perl_qerror		CPerlObj::Perl_qerror
#define qerror			Perl_qerror
#define Perl_mg_clear		CPerlObj::Perl_mg_clear
#define mg_clear		Perl_mg_clear
#define Perl_mg_copy		CPerlObj::Perl_mg_copy
#define mg_copy			Perl_mg_copy
#define Perl_mg_find		CPerlObj::Perl_mg_find
#define mg_find			Perl_mg_find
#define Perl_mg_free		CPerlObj::Perl_mg_free
#define mg_free			Perl_mg_free
#define Perl_mg_get		CPerlObj::Perl_mg_get
#define mg_get			Perl_mg_get
#define Perl_mg_length		CPerlObj::Perl_mg_length
#define mg_length		Perl_mg_length
#define Perl_mg_magical		CPerlObj::Perl_mg_magical
#define mg_magical		Perl_mg_magical
#define Perl_mg_set		CPerlObj::Perl_mg_set
#define mg_set			Perl_mg_set
#define Perl_mg_size		CPerlObj::Perl_mg_size
#define mg_size			Perl_mg_size
#define Perl_mod		CPerlObj::Perl_mod
#define mod			Perl_mod
#define Perl_mode_from_discipline	CPerlObj::Perl_mode_from_discipline
#define mode_from_discipline	Perl_mode_from_discipline
#define Perl_moreswitches	CPerlObj::Perl_moreswitches
#define moreswitches		Perl_moreswitches
#define Perl_my			CPerlObj::Perl_my
#define my			Perl_my
#define Perl_my_atof		CPerlObj::Perl_my_atof
#define my_atof			Perl_my_atof
#if !defined(HAS_BCOPY) || !defined(HAS_SAFE_BCOPY)
#define Perl_my_bcopy		CPerlObj::Perl_my_bcopy
#define my_bcopy		Perl_my_bcopy
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
#define Perl_my_bzero		CPerlObj::Perl_my_bzero
#define my_bzero		Perl_my_bzero
#endif
#define Perl_my_exit		CPerlObj::Perl_my_exit
#define my_exit			Perl_my_exit
#define Perl_my_failure_exit	CPerlObj::Perl_my_failure_exit
#define my_failure_exit		Perl_my_failure_exit
#define Perl_my_fflush_all	CPerlObj::Perl_my_fflush_all
#define my_fflush_all		Perl_my_fflush_all
#define Perl_my_lstat		CPerlObj::Perl_my_lstat
#define my_lstat		Perl_my_lstat
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
#define Perl_my_memcmp		CPerlObj::Perl_my_memcmp
#define my_memcmp		Perl_my_memcmp
#endif
#if !defined(HAS_MEMSET)
#define Perl_my_memset		CPerlObj::Perl_my_memset
#define my_memset		Perl_my_memset
#endif
#if !defined(PERL_OBJECT)
#define Perl_my_pclose		CPerlObj::Perl_my_pclose
#define my_pclose		Perl_my_pclose
#define Perl_my_popen		CPerlObj::Perl_my_popen
#define my_popen		Perl_my_popen
#endif
#define Perl_my_setenv		CPerlObj::Perl_my_setenv
#define my_setenv		Perl_my_setenv
#define Perl_my_stat		CPerlObj::Perl_my_stat
#define my_stat			Perl_my_stat
#if defined(MYSWAP)
#define Perl_my_swap		CPerlObj::Perl_my_swap
#define my_swap			Perl_my_swap
#define Perl_my_htonl		CPerlObj::Perl_my_htonl
#define my_htonl		Perl_my_htonl
#define Perl_my_ntohl		CPerlObj::Perl_my_ntohl
#define my_ntohl		Perl_my_ntohl
#endif
#define Perl_my_unexec		CPerlObj::Perl_my_unexec
#define my_unexec		Perl_my_unexec
#define Perl_newANONLIST	CPerlObj::Perl_newANONLIST
#define newANONLIST		Perl_newANONLIST
#define Perl_newANONHASH	CPerlObj::Perl_newANONHASH
#define newANONHASH		Perl_newANONHASH
#define Perl_newANONSUB		CPerlObj::Perl_newANONSUB
#define newANONSUB		Perl_newANONSUB
#define Perl_newASSIGNOP	CPerlObj::Perl_newASSIGNOP
#define newASSIGNOP		Perl_newASSIGNOP
#define Perl_newCONDOP		CPerlObj::Perl_newCONDOP
#define newCONDOP		Perl_newCONDOP
#define Perl_newCONSTSUB	CPerlObj::Perl_newCONSTSUB
#define newCONSTSUB		Perl_newCONSTSUB
#define Perl_newFORM		CPerlObj::Perl_newFORM
#define newFORM			Perl_newFORM
#define Perl_newFOROP		CPerlObj::Perl_newFOROP
#define newFOROP		Perl_newFOROP
#define Perl_newLOGOP		CPerlObj::Perl_newLOGOP
#define newLOGOP		Perl_newLOGOP
#define Perl_newLOOPEX		CPerlObj::Perl_newLOOPEX
#define newLOOPEX		Perl_newLOOPEX
#define Perl_newLOOPOP		CPerlObj::Perl_newLOOPOP
#define newLOOPOP		Perl_newLOOPOP
#define Perl_newNULLLIST	CPerlObj::Perl_newNULLLIST
#define newNULLLIST		Perl_newNULLLIST
#define Perl_newOP		CPerlObj::Perl_newOP
#define newOP			Perl_newOP
#define Perl_newPROG		CPerlObj::Perl_newPROG
#define newPROG			Perl_newPROG
#define Perl_newRANGE		CPerlObj::Perl_newRANGE
#define newRANGE		Perl_newRANGE
#define Perl_newSLICEOP		CPerlObj::Perl_newSLICEOP
#define newSLICEOP		Perl_newSLICEOP
#define Perl_newSTATEOP		CPerlObj::Perl_newSTATEOP
#define newSTATEOP		Perl_newSTATEOP
#define Perl_newSUB		CPerlObj::Perl_newSUB
#define newSUB			Perl_newSUB
#define Perl_newXS		CPerlObj::Perl_newXS
#define newXS			Perl_newXS
#define Perl_newAV		CPerlObj::Perl_newAV
#define newAV			Perl_newAV
#define Perl_newAVREF		CPerlObj::Perl_newAVREF
#define newAVREF		Perl_newAVREF
#define Perl_newBINOP		CPerlObj::Perl_newBINOP
#define newBINOP		Perl_newBINOP
#define Perl_newCVREF		CPerlObj::Perl_newCVREF
#define newCVREF		Perl_newCVREF
#define Perl_newGVOP		CPerlObj::Perl_newGVOP
#define newGVOP			Perl_newGVOP
#define Perl_newGVgen		CPerlObj::Perl_newGVgen
#define newGVgen		Perl_newGVgen
#define Perl_newGVREF		CPerlObj::Perl_newGVREF
#define newGVREF		Perl_newGVREF
#define Perl_newHVREF		CPerlObj::Perl_newHVREF
#define newHVREF		Perl_newHVREF
#define Perl_newHV		CPerlObj::Perl_newHV
#define newHV			Perl_newHV
#define Perl_newHVhv		CPerlObj::Perl_newHVhv
#define newHVhv			Perl_newHVhv
#define Perl_newIO		CPerlObj::Perl_newIO
#define newIO			Perl_newIO
#define Perl_newLISTOP		CPerlObj::Perl_newLISTOP
#define newLISTOP		Perl_newLISTOP
#define Perl_newPADOP		CPerlObj::Perl_newPADOP
#define newPADOP		Perl_newPADOP
#define Perl_newPMOP		CPerlObj::Perl_newPMOP
#define newPMOP			Perl_newPMOP
#define Perl_newPVOP		CPerlObj::Perl_newPVOP
#define newPVOP			Perl_newPVOP
#define Perl_newRV		CPerlObj::Perl_newRV
#define newRV			Perl_newRV
#define Perl_newRV_noinc	CPerlObj::Perl_newRV_noinc
#define newRV_noinc		Perl_newRV_noinc
#define Perl_newSV		CPerlObj::Perl_newSV
#define newSV			Perl_newSV
#define Perl_newSVREF		CPerlObj::Perl_newSVREF
#define newSVREF		Perl_newSVREF
#define Perl_newSVOP		CPerlObj::Perl_newSVOP
#define newSVOP			Perl_newSVOP
#define Perl_newSViv		CPerlObj::Perl_newSViv
#define newSViv			Perl_newSViv
#define Perl_newSVuv		CPerlObj::Perl_newSVuv
#define newSVuv			Perl_newSVuv
#define Perl_newSVnv		CPerlObj::Perl_newSVnv
#define newSVnv			Perl_newSVnv
#define Perl_newSVpv		CPerlObj::Perl_newSVpv
#define newSVpv			Perl_newSVpv
#define Perl_newSVpvn		CPerlObj::Perl_newSVpvn
#define newSVpvn		Perl_newSVpvn
#define Perl_newSVpvf		CPerlObj::Perl_newSVpvf
#define newSVpvf		Perl_newSVpvf
#define Perl_vnewSVpvf		CPerlObj::Perl_vnewSVpvf
#define vnewSVpvf		Perl_vnewSVpvf
#define Perl_newSVrv		CPerlObj::Perl_newSVrv
#define newSVrv			Perl_newSVrv
#define Perl_newSVsv		CPerlObj::Perl_newSVsv
#define newSVsv			Perl_newSVsv
#define Perl_newUNOP		CPerlObj::Perl_newUNOP
#define newUNOP			Perl_newUNOP
#define Perl_newWHILEOP		CPerlObj::Perl_newWHILEOP
#define newWHILEOP		Perl_newWHILEOP
#define Perl_new_stackinfo	CPerlObj::Perl_new_stackinfo
#define new_stackinfo		Perl_new_stackinfo
#define Perl_nextargv		CPerlObj::Perl_nextargv
#define nextargv		Perl_nextargv
#define Perl_ninstr		CPerlObj::Perl_ninstr
#define ninstr			Perl_ninstr
#define Perl_oopsCV		CPerlObj::Perl_oopsCV
#define oopsCV			Perl_oopsCV
#define Perl_op_free		CPerlObj::Perl_op_free
#define op_free			Perl_op_free
#define Perl_package		CPerlObj::Perl_package
#define package			Perl_package
#define Perl_pad_alloc		CPerlObj::Perl_pad_alloc
#define pad_alloc		Perl_pad_alloc
#define Perl_pad_allocmy	CPerlObj::Perl_pad_allocmy
#define pad_allocmy		Perl_pad_allocmy
#define Perl_pad_findmy		CPerlObj::Perl_pad_findmy
#define pad_findmy		Perl_pad_findmy
#define Perl_oopsAV		CPerlObj::Perl_oopsAV
#define oopsAV			Perl_oopsAV
#define Perl_oopsHV		CPerlObj::Perl_oopsHV
#define oopsHV			Perl_oopsHV
#define Perl_pad_leavemy	CPerlObj::Perl_pad_leavemy
#define pad_leavemy		Perl_pad_leavemy
#define Perl_pad_sv		CPerlObj::Perl_pad_sv
#define pad_sv			Perl_pad_sv
#define Perl_pad_free		CPerlObj::Perl_pad_free
#define pad_free		Perl_pad_free
#define Perl_pad_reset		CPerlObj::Perl_pad_reset
#define pad_reset		Perl_pad_reset
#define Perl_pad_swipe		CPerlObj::Perl_pad_swipe
#define pad_swipe		Perl_pad_swipe
#define Perl_peep		CPerlObj::Perl_peep
#define peep			Perl_peep
#if defined(PERL_OBJECT)
#define Perl_construct		CPerlObj::Perl_construct
#define Perl_destruct		CPerlObj::Perl_destruct
#define Perl_free		CPerlObj::Perl_free
#define Perl_run		CPerlObj::Perl_run
#define Perl_parse		CPerlObj::Perl_parse
#endif
#if defined(USE_THREADS)
#define Perl_new_struct_thread	CPerlObj::Perl_new_struct_thread
#define new_struct_thread	Perl_new_struct_thread
#endif
#define Perl_call_atexit	CPerlObj::Perl_call_atexit
#define call_atexit		Perl_call_atexit
#define Perl_call_argv		CPerlObj::Perl_call_argv
#define call_argv		Perl_call_argv
#define Perl_call_method	CPerlObj::Perl_call_method
#define call_method		Perl_call_method
#define Perl_call_pv		CPerlObj::Perl_call_pv
#define call_pv			Perl_call_pv
#define Perl_call_sv		CPerlObj::Perl_call_sv
#define call_sv			Perl_call_sv
#define Perl_eval_pv		CPerlObj::Perl_eval_pv
#define eval_pv			Perl_eval_pv
#define Perl_eval_sv		CPerlObj::Perl_eval_sv
#define eval_sv			Perl_eval_sv
#define Perl_get_sv		CPerlObj::Perl_get_sv
#define get_sv			Perl_get_sv
#define Perl_get_av		CPerlObj::Perl_get_av
#define get_av			Perl_get_av
#define Perl_get_hv		CPerlObj::Perl_get_hv
#define get_hv			Perl_get_hv
#define Perl_get_cv		CPerlObj::Perl_get_cv
#define get_cv			Perl_get_cv
#define Perl_init_i18nl10n	CPerlObj::Perl_init_i18nl10n
#define init_i18nl10n		Perl_init_i18nl10n
#define Perl_init_i18nl14n	CPerlObj::Perl_init_i18nl14n
#define init_i18nl14n		Perl_init_i18nl14n
#define Perl_new_collate	CPerlObj::Perl_new_collate
#define new_collate		Perl_new_collate
#define Perl_new_ctype		CPerlObj::Perl_new_ctype
#define new_ctype		Perl_new_ctype
#define Perl_new_numeric	CPerlObj::Perl_new_numeric
#define new_numeric		Perl_new_numeric
#define Perl_set_numeric_local	CPerlObj::Perl_set_numeric_local
#define set_numeric_local	Perl_set_numeric_local
#define Perl_set_numeric_radix	CPerlObj::Perl_set_numeric_radix
#define set_numeric_radix	Perl_set_numeric_radix
#define Perl_set_numeric_standard	CPerlObj::Perl_set_numeric_standard
#define set_numeric_standard	Perl_set_numeric_standard
#define Perl_require_pv		CPerlObj::Perl_require_pv
#define require_pv		Perl_require_pv
#define Perl_pidgone		CPerlObj::Perl_pidgone
#define pidgone			Perl_pidgone
#define Perl_pmflag		CPerlObj::Perl_pmflag
#define pmflag			Perl_pmflag
#define Perl_pmruntime		CPerlObj::Perl_pmruntime
#define pmruntime		Perl_pmruntime
#define Perl_pmtrans		CPerlObj::Perl_pmtrans
#define pmtrans			Perl_pmtrans
#define Perl_pop_return		CPerlObj::Perl_pop_return
#define pop_return		Perl_pop_return
#define Perl_pop_scope		CPerlObj::Perl_pop_scope
#define pop_scope		Perl_pop_scope
#define Perl_prepend_elem	CPerlObj::Perl_prepend_elem
#define prepend_elem		Perl_prepend_elem
#define Perl_push_return	CPerlObj::Perl_push_return
#define push_return		Perl_push_return
#define Perl_push_scope		CPerlObj::Perl_push_scope
#define push_scope		Perl_push_scope
#define Perl_ref		CPerlObj::Perl_ref
#define ref			Perl_ref
#define Perl_refkids		CPerlObj::Perl_refkids
#define refkids			Perl_refkids
#define Perl_regdump		CPerlObj::Perl_regdump
#define regdump			Perl_regdump
#define Perl_pregexec		CPerlObj::Perl_pregexec
#define pregexec		Perl_pregexec
#define Perl_pregfree		CPerlObj::Perl_pregfree
#define pregfree		Perl_pregfree
#define Perl_pregcomp		CPerlObj::Perl_pregcomp
#define pregcomp		Perl_pregcomp
#define Perl_re_intuit_start	CPerlObj::Perl_re_intuit_start
#define re_intuit_start		Perl_re_intuit_start
#define Perl_re_intuit_string	CPerlObj::Perl_re_intuit_string
#define re_intuit_string	Perl_re_intuit_string
#define Perl_regexec_flags	CPerlObj::Perl_regexec_flags
#define regexec_flags		Perl_regexec_flags
#define Perl_regnext		CPerlObj::Perl_regnext
#define regnext			Perl_regnext
#define Perl_regprop		CPerlObj::Perl_regprop
#define regprop			Perl_regprop
#define Perl_repeatcpy		CPerlObj::Perl_repeatcpy
#define repeatcpy		Perl_repeatcpy
#define Perl_rninstr		CPerlObj::Perl_rninstr
#define rninstr			Perl_rninstr
#define Perl_rsignal		CPerlObj::Perl_rsignal
#define rsignal			Perl_rsignal
#define Perl_rsignal_restore	CPerlObj::Perl_rsignal_restore
#define rsignal_restore		Perl_rsignal_restore
#define Perl_rsignal_save	CPerlObj::Perl_rsignal_save
#define rsignal_save		Perl_rsignal_save
#define Perl_rsignal_state	CPerlObj::Perl_rsignal_state
#define rsignal_state		Perl_rsignal_state
#define Perl_rxres_free		CPerlObj::Perl_rxres_free
#define rxres_free		Perl_rxres_free
#define Perl_rxres_restore	CPerlObj::Perl_rxres_restore
#define rxres_restore		Perl_rxres_restore
#define Perl_rxres_save		CPerlObj::Perl_rxres_save
#define rxres_save		Perl_rxres_save
#if !defined(HAS_RENAME)
#define Perl_same_dirent	CPerlObj::Perl_same_dirent
#define same_dirent		Perl_same_dirent
#endif
#define Perl_savepv		CPerlObj::Perl_savepv
#define savepv			Perl_savepv
#define Perl_savepvn		CPerlObj::Perl_savepvn
#define savepvn			Perl_savepvn
#define Perl_savestack_grow	CPerlObj::Perl_savestack_grow
#define savestack_grow		Perl_savestack_grow
#define Perl_save_aelem		CPerlObj::Perl_save_aelem
#define save_aelem		Perl_save_aelem
#define Perl_save_alloc		CPerlObj::Perl_save_alloc
#define save_alloc		Perl_save_alloc
#define Perl_save_aptr		CPerlObj::Perl_save_aptr
#define save_aptr		Perl_save_aptr
#define Perl_save_ary		CPerlObj::Perl_save_ary
#define save_ary		Perl_save_ary
#define Perl_save_clearsv	CPerlObj::Perl_save_clearsv
#define save_clearsv		Perl_save_clearsv
#define Perl_save_delete	CPerlObj::Perl_save_delete
#define save_delete		Perl_save_delete
#define Perl_save_destructor	CPerlObj::Perl_save_destructor
#define save_destructor		Perl_save_destructor
#define Perl_save_destructor_x	CPerlObj::Perl_save_destructor_x
#define save_destructor_x	Perl_save_destructor_x
#define Perl_save_freesv	CPerlObj::Perl_save_freesv
#define save_freesv		Perl_save_freesv
#define Perl_save_freeop	CPerlObj::Perl_save_freeop
#define save_freeop		Perl_save_freeop
#define Perl_save_freepv	CPerlObj::Perl_save_freepv
#define save_freepv		Perl_save_freepv
#define Perl_save_generic_svref	CPerlObj::Perl_save_generic_svref
#define save_generic_svref	Perl_save_generic_svref
#define Perl_save_generic_pvref	CPerlObj::Perl_save_generic_pvref
#define save_generic_pvref	Perl_save_generic_pvref
#define Perl_save_gp		CPerlObj::Perl_save_gp
#define save_gp			Perl_save_gp
#define Perl_save_hash		CPerlObj::Perl_save_hash
#define save_hash		Perl_save_hash
#define Perl_save_helem		CPerlObj::Perl_save_helem
#define save_helem		Perl_save_helem
#define Perl_save_hints		CPerlObj::Perl_save_hints
#define save_hints		Perl_save_hints
#define Perl_save_hptr		CPerlObj::Perl_save_hptr
#define save_hptr		Perl_save_hptr
#define Perl_save_I16		CPerlObj::Perl_save_I16
#define save_I16		Perl_save_I16
#define Perl_save_I32		CPerlObj::Perl_save_I32
#define save_I32		Perl_save_I32
#define Perl_save_I8		CPerlObj::Perl_save_I8
#define save_I8			Perl_save_I8
#define Perl_save_int		CPerlObj::Perl_save_int
#define save_int		Perl_save_int
#define Perl_save_item		CPerlObj::Perl_save_item
#define save_item		Perl_save_item
#define Perl_save_iv		CPerlObj::Perl_save_iv
#define save_iv			Perl_save_iv
#define Perl_save_list		CPerlObj::Perl_save_list
#define save_list		Perl_save_list
#define Perl_save_long		CPerlObj::Perl_save_long
#define save_long		Perl_save_long
#define Perl_save_mortalizesv	CPerlObj::Perl_save_mortalizesv
#define save_mortalizesv	Perl_save_mortalizesv
#define Perl_save_nogv		CPerlObj::Perl_save_nogv
#define save_nogv		Perl_save_nogv
#define Perl_save_op		CPerlObj::Perl_save_op
#define save_op			Perl_save_op
#define Perl_save_scalar	CPerlObj::Perl_save_scalar
#define save_scalar		Perl_save_scalar
#define Perl_save_pptr		CPerlObj::Perl_save_pptr
#define save_pptr		Perl_save_pptr
#define Perl_save_vptr		CPerlObj::Perl_save_vptr
#define save_vptr		Perl_save_vptr
#define Perl_save_re_context	CPerlObj::Perl_save_re_context
#define save_re_context		Perl_save_re_context
#define Perl_save_padsv		CPerlObj::Perl_save_padsv
#define save_padsv		Perl_save_padsv
#define Perl_save_sptr		CPerlObj::Perl_save_sptr
#define save_sptr		Perl_save_sptr
#define Perl_save_svref		CPerlObj::Perl_save_svref
#define save_svref		Perl_save_svref
#define Perl_save_threadsv	CPerlObj::Perl_save_threadsv
#define save_threadsv		Perl_save_threadsv
#define Perl_sawparens		CPerlObj::Perl_sawparens
#define sawparens		Perl_sawparens
#define Perl_scalar		CPerlObj::Perl_scalar
#define scalar			Perl_scalar
#define Perl_scalarkids		CPerlObj::Perl_scalarkids
#define scalarkids		Perl_scalarkids
#define Perl_scalarseq		CPerlObj::Perl_scalarseq
#define scalarseq		Perl_scalarseq
#define Perl_scalarvoid		CPerlObj::Perl_scalarvoid
#define scalarvoid		Perl_scalarvoid
#define Perl_scan_bin		CPerlObj::Perl_scan_bin
#define scan_bin		Perl_scan_bin
#define Perl_scan_hex		CPerlObj::Perl_scan_hex
#define scan_hex		Perl_scan_hex
#define Perl_scan_num		CPerlObj::Perl_scan_num
#define scan_num		Perl_scan_num
#define Perl_scan_oct		CPerlObj::Perl_scan_oct
#define scan_oct		Perl_scan_oct
#define Perl_scope		CPerlObj::Perl_scope
#define scope			Perl_scope
#define Perl_screaminstr	CPerlObj::Perl_screaminstr
#define screaminstr		Perl_screaminstr
#if !defined(VMS)
#define Perl_setenv_getix	CPerlObj::Perl_setenv_getix
#define setenv_getix		Perl_setenv_getix
#endif
#define Perl_setdefout		CPerlObj::Perl_setdefout
#define setdefout		Perl_setdefout
#define Perl_sharepvn		CPerlObj::Perl_sharepvn
#define sharepvn		Perl_sharepvn
#define Perl_share_hek		CPerlObj::Perl_share_hek
#define share_hek		Perl_share_hek
#define Perl_sighandler		CPerlObj::Perl_sighandler
#define sighandler		Perl_sighandler
#define Perl_stack_grow		CPerlObj::Perl_stack_grow
#define stack_grow		Perl_stack_grow
#define Perl_start_subparse	CPerlObj::Perl_start_subparse
#define start_subparse		Perl_start_subparse
#define Perl_sub_crush_depth	CPerlObj::Perl_sub_crush_depth
#define sub_crush_depth		Perl_sub_crush_depth
#define Perl_sv_2bool		CPerlObj::Perl_sv_2bool
#define sv_2bool		Perl_sv_2bool
#define Perl_sv_2cv		CPerlObj::Perl_sv_2cv
#define sv_2cv			Perl_sv_2cv
#define Perl_sv_2io		CPerlObj::Perl_sv_2io
#define sv_2io			Perl_sv_2io
#define Perl_sv_2iv		CPerlObj::Perl_sv_2iv
#define sv_2iv			Perl_sv_2iv
#define Perl_sv_2mortal		CPerlObj::Perl_sv_2mortal
#define sv_2mortal		Perl_sv_2mortal
#define Perl_sv_2nv		CPerlObj::Perl_sv_2nv
#define sv_2nv			Perl_sv_2nv
#define Perl_sv_2pv		CPerlObj::Perl_sv_2pv
#define sv_2pv			Perl_sv_2pv
#define Perl_sv_2pvutf8		CPerlObj::Perl_sv_2pvutf8
#define sv_2pvutf8		Perl_sv_2pvutf8
#define Perl_sv_2pvbyte		CPerlObj::Perl_sv_2pvbyte
#define sv_2pvbyte		Perl_sv_2pvbyte
#define Perl_sv_2uv		CPerlObj::Perl_sv_2uv
#define sv_2uv			Perl_sv_2uv
#define Perl_sv_iv		CPerlObj::Perl_sv_iv
#define sv_iv			Perl_sv_iv
#define Perl_sv_uv		CPerlObj::Perl_sv_uv
#define sv_uv			Perl_sv_uv
#define Perl_sv_nv		CPerlObj::Perl_sv_nv
#define sv_nv			Perl_sv_nv
#define Perl_sv_pvn		CPerlObj::Perl_sv_pvn
#define sv_pvn			Perl_sv_pvn
#define Perl_sv_pvutf8n		CPerlObj::Perl_sv_pvutf8n
#define sv_pvutf8n		Perl_sv_pvutf8n
#define Perl_sv_pvbyten		CPerlObj::Perl_sv_pvbyten
#define sv_pvbyten		Perl_sv_pvbyten
#define Perl_sv_true		CPerlObj::Perl_sv_true
#define sv_true			Perl_sv_true
#define Perl_sv_add_arena	CPerlObj::Perl_sv_add_arena
#define sv_add_arena		Perl_sv_add_arena
#define Perl_sv_backoff		CPerlObj::Perl_sv_backoff
#define sv_backoff		Perl_sv_backoff
#define Perl_sv_bless		CPerlObj::Perl_sv_bless
#define sv_bless		Perl_sv_bless
#define Perl_sv_catpvf		CPerlObj::Perl_sv_catpvf
#define sv_catpvf		Perl_sv_catpvf
#define Perl_sv_vcatpvf		CPerlObj::Perl_sv_vcatpvf
#define sv_vcatpvf		Perl_sv_vcatpvf
#define Perl_sv_catpv		CPerlObj::Perl_sv_catpv
#define sv_catpv		Perl_sv_catpv
#define Perl_sv_catpvn		CPerlObj::Perl_sv_catpvn
#define sv_catpvn		Perl_sv_catpvn
#define Perl_sv_catsv		CPerlObj::Perl_sv_catsv
#define sv_catsv		Perl_sv_catsv
#define Perl_sv_chop		CPerlObj::Perl_sv_chop
#define sv_chop			Perl_sv_chop
#define Perl_sv_clean_all	CPerlObj::Perl_sv_clean_all
#define sv_clean_all		Perl_sv_clean_all
#define Perl_sv_clean_objs	CPerlObj::Perl_sv_clean_objs
#define sv_clean_objs		Perl_sv_clean_objs
#define Perl_sv_clear		CPerlObj::Perl_sv_clear
#define sv_clear		Perl_sv_clear
#define Perl_sv_cmp		CPerlObj::Perl_sv_cmp
#define sv_cmp			Perl_sv_cmp
#define Perl_sv_cmp_locale	CPerlObj::Perl_sv_cmp_locale
#define sv_cmp_locale		Perl_sv_cmp_locale
#if defined(USE_LOCALE_COLLATE)
#define Perl_sv_collxfrm	CPerlObj::Perl_sv_collxfrm
#define sv_collxfrm		Perl_sv_collxfrm
#endif
#define Perl_sv_compile_2op	CPerlObj::Perl_sv_compile_2op
#define sv_compile_2op		Perl_sv_compile_2op
#define Perl_sv_dec		CPerlObj::Perl_sv_dec
#define sv_dec			Perl_sv_dec
#define Perl_sv_dump		CPerlObj::Perl_sv_dump
#define sv_dump			Perl_sv_dump
#define Perl_sv_derived_from	CPerlObj::Perl_sv_derived_from
#define sv_derived_from		Perl_sv_derived_from
#define Perl_sv_eq		CPerlObj::Perl_sv_eq
#define sv_eq			Perl_sv_eq
#define Perl_sv_free		CPerlObj::Perl_sv_free
#define sv_free			Perl_sv_free
#define Perl_sv_free_arenas	CPerlObj::Perl_sv_free_arenas
#define sv_free_arenas		Perl_sv_free_arenas
#define Perl_sv_gets		CPerlObj::Perl_sv_gets
#define sv_gets			Perl_sv_gets
#define Perl_sv_grow		CPerlObj::Perl_sv_grow
#define sv_grow			Perl_sv_grow
#define Perl_sv_inc		CPerlObj::Perl_sv_inc
#define sv_inc			Perl_sv_inc
#define Perl_sv_insert		CPerlObj::Perl_sv_insert
#define sv_insert		Perl_sv_insert
#define Perl_sv_isa		CPerlObj::Perl_sv_isa
#define sv_isa			Perl_sv_isa
#define Perl_sv_isobject	CPerlObj::Perl_sv_isobject
#define sv_isobject		Perl_sv_isobject
#define Perl_sv_len		CPerlObj::Perl_sv_len
#define sv_len			Perl_sv_len
#define Perl_sv_len_utf8	CPerlObj::Perl_sv_len_utf8
#define sv_len_utf8		Perl_sv_len_utf8
#define Perl_sv_magic		CPerlObj::Perl_sv_magic
#define sv_magic		Perl_sv_magic
#define Perl_sv_mortalcopy	CPerlObj::Perl_sv_mortalcopy
#define sv_mortalcopy		Perl_sv_mortalcopy
#define Perl_sv_newmortal	CPerlObj::Perl_sv_newmortal
#define sv_newmortal		Perl_sv_newmortal
#define Perl_sv_newref		CPerlObj::Perl_sv_newref
#define sv_newref		Perl_sv_newref
#define Perl_sv_peek		CPerlObj::Perl_sv_peek
#define sv_peek			Perl_sv_peek
#define Perl_sv_pos_u2b		CPerlObj::Perl_sv_pos_u2b
#define sv_pos_u2b		Perl_sv_pos_u2b
#define Perl_sv_pos_b2u		CPerlObj::Perl_sv_pos_b2u
#define sv_pos_b2u		Perl_sv_pos_b2u
#define Perl_sv_pvn_force	CPerlObj::Perl_sv_pvn_force
#define sv_pvn_force		Perl_sv_pvn_force
#define Perl_sv_pvutf8n_force	CPerlObj::Perl_sv_pvutf8n_force
#define sv_pvutf8n_force	Perl_sv_pvutf8n_force
#define Perl_sv_pvbyten_force	CPerlObj::Perl_sv_pvbyten_force
#define sv_pvbyten_force	Perl_sv_pvbyten_force
#define Perl_sv_reftype		CPerlObj::Perl_sv_reftype
#define sv_reftype		Perl_sv_reftype
#define Perl_sv_replace		CPerlObj::Perl_sv_replace
#define sv_replace		Perl_sv_replace
#define Perl_sv_report_used	CPerlObj::Perl_sv_report_used
#define sv_report_used		Perl_sv_report_used
#define Perl_sv_reset		CPerlObj::Perl_sv_reset
#define sv_reset		Perl_sv_reset
#define Perl_sv_setpvf		CPerlObj::Perl_sv_setpvf
#define sv_setpvf		Perl_sv_setpvf
#define Perl_sv_vsetpvf		CPerlObj::Perl_sv_vsetpvf
#define sv_vsetpvf		Perl_sv_vsetpvf
#define Perl_sv_setiv		CPerlObj::Perl_sv_setiv
#define sv_setiv		Perl_sv_setiv
#define Perl_sv_setpviv		CPerlObj::Perl_sv_setpviv
#define sv_setpviv		Perl_sv_setpviv
#define Perl_sv_setuv		CPerlObj::Perl_sv_setuv
#define sv_setuv		Perl_sv_setuv
#define Perl_sv_setnv		CPerlObj::Perl_sv_setnv
#define sv_setnv		Perl_sv_setnv
#define Perl_sv_setref_iv	CPerlObj::Perl_sv_setref_iv
#define sv_setref_iv		Perl_sv_setref_iv
#define Perl_sv_setref_nv	CPerlObj::Perl_sv_setref_nv
#define sv_setref_nv		Perl_sv_setref_nv
#define Perl_sv_setref_pv	CPerlObj::Perl_sv_setref_pv
#define sv_setref_pv		Perl_sv_setref_pv
#define Perl_sv_setref_pvn	CPerlObj::Perl_sv_setref_pvn
#define sv_setref_pvn		Perl_sv_setref_pvn
#define Perl_sv_setpv		CPerlObj::Perl_sv_setpv
#define sv_setpv		Perl_sv_setpv
#define Perl_sv_setpvn		CPerlObj::Perl_sv_setpvn
#define sv_setpvn		Perl_sv_setpvn
#define Perl_sv_setsv		CPerlObj::Perl_sv_setsv
#define sv_setsv		Perl_sv_setsv
#define Perl_sv_taint		CPerlObj::Perl_sv_taint
#define sv_taint		Perl_sv_taint
#define Perl_sv_tainted		CPerlObj::Perl_sv_tainted
#define sv_tainted		Perl_sv_tainted
#define Perl_sv_unmagic		CPerlObj::Perl_sv_unmagic
#define sv_unmagic		Perl_sv_unmagic
#define Perl_sv_unref		CPerlObj::Perl_sv_unref
#define sv_unref		Perl_sv_unref
#define Perl_sv_untaint		CPerlObj::Perl_sv_untaint
#define sv_untaint		Perl_sv_untaint
#define Perl_sv_upgrade		CPerlObj::Perl_sv_upgrade
#define sv_upgrade		Perl_sv_upgrade
#define Perl_sv_usepvn		CPerlObj::Perl_sv_usepvn
#define sv_usepvn		Perl_sv_usepvn
#define Perl_sv_vcatpvfn	CPerlObj::Perl_sv_vcatpvfn
#define sv_vcatpvfn		Perl_sv_vcatpvfn
#define Perl_sv_vsetpvfn	CPerlObj::Perl_sv_vsetpvfn
#define sv_vsetpvfn		Perl_sv_vsetpvfn
#define Perl_str_to_version	CPerlObj::Perl_str_to_version
#define str_to_version		Perl_str_to_version
#define Perl_swash_init		CPerlObj::Perl_swash_init
#define swash_init		Perl_swash_init
#define Perl_swash_fetch	CPerlObj::Perl_swash_fetch
#define swash_fetch		Perl_swash_fetch
#define Perl_taint_env		CPerlObj::Perl_taint_env
#define taint_env		Perl_taint_env
#define Perl_taint_proper	CPerlObj::Perl_taint_proper
#define taint_proper		Perl_taint_proper
#define Perl_to_utf8_lower	CPerlObj::Perl_to_utf8_lower
#define to_utf8_lower		Perl_to_utf8_lower
#define Perl_to_utf8_upper	CPerlObj::Perl_to_utf8_upper
#define to_utf8_upper		Perl_to_utf8_upper
#define Perl_to_utf8_title	CPerlObj::Perl_to_utf8_title
#define to_utf8_title		Perl_to_utf8_title
#if defined(UNLINK_ALL_VERSIONS)
#define Perl_unlnk		CPerlObj::Perl_unlnk
#define unlnk			Perl_unlnk
#endif
#if defined(USE_THREADS)
#define Perl_unlock_condpair	CPerlObj::Perl_unlock_condpair
#define unlock_condpair		Perl_unlock_condpair
#endif
#define Perl_unsharepvn		CPerlObj::Perl_unsharepvn
#define unsharepvn		Perl_unsharepvn
#define Perl_unshare_hek	CPerlObj::Perl_unshare_hek
#define unshare_hek		Perl_unshare_hek
#define Perl_utilize		CPerlObj::Perl_utilize
#define utilize			Perl_utilize
#define Perl_utf16_to_utf8	CPerlObj::Perl_utf16_to_utf8
#define utf16_to_utf8		Perl_utf16_to_utf8
#define Perl_utf16_to_utf8_reversed	CPerlObj::Perl_utf16_to_utf8_reversed
#define utf16_to_utf8_reversed	Perl_utf16_to_utf8_reversed
#define Perl_utf8_length	CPerlObj::Perl_utf8_length
#define utf8_length		Perl_utf8_length
#define Perl_utf8_distance	CPerlObj::Perl_utf8_distance
#define utf8_distance		Perl_utf8_distance
#define Perl_utf8_hop		CPerlObj::Perl_utf8_hop
#define utf8_hop		Perl_utf8_hop
#define Perl_utf8_to_bytes	CPerlObj::Perl_utf8_to_bytes
#define utf8_to_bytes		Perl_utf8_to_bytes
#define Perl_bytes_from_utf8	CPerlObj::Perl_bytes_from_utf8
#define bytes_from_utf8		Perl_bytes_from_utf8
#define Perl_bytes_to_utf8	CPerlObj::Perl_bytes_to_utf8
#define bytes_to_utf8		Perl_bytes_to_utf8
#define Perl_utf8_to_uv_simple	CPerlObj::Perl_utf8_to_uv_simple
#define utf8_to_uv_simple	Perl_utf8_to_uv_simple
#define Perl_utf8_to_uv		CPerlObj::Perl_utf8_to_uv
#define utf8_to_uv		Perl_utf8_to_uv
#define Perl_uv_to_utf8		CPerlObj::Perl_uv_to_utf8
#define uv_to_utf8		Perl_uv_to_utf8
#define Perl_vivify_defelem	CPerlObj::Perl_vivify_defelem
#define vivify_defelem		Perl_vivify_defelem
#define Perl_vivify_ref		CPerlObj::Perl_vivify_ref
#define vivify_ref		Perl_vivify_ref
#define Perl_wait4pid		CPerlObj::Perl_wait4pid
#define wait4pid		Perl_wait4pid
#define Perl_report_evil_fh	CPerlObj::Perl_report_evil_fh
#define report_evil_fh		Perl_report_evil_fh
#define Perl_report_uninit	CPerlObj::Perl_report_uninit
#define report_uninit		Perl_report_uninit
#define Perl_warn		CPerlObj::Perl_warn
#define warn			Perl_warn
#define Perl_vwarn		CPerlObj::Perl_vwarn
#define vwarn			Perl_vwarn
#define Perl_warner		CPerlObj::Perl_warner
#define warner			Perl_warner
#define Perl_vwarner		CPerlObj::Perl_vwarner
#define vwarner			Perl_vwarner
#define Perl_watch		CPerlObj::Perl_watch
#define watch			Perl_watch
#define Perl_whichsig		CPerlObj::Perl_whichsig
#define whichsig		Perl_whichsig
#define Perl_yyerror		CPerlObj::Perl_yyerror
#define yyerror			Perl_yyerror
#ifdef USE_PURE_BISON
#define Perl_yylex_r		CPerlObj::Perl_yylex_r
#define yylex_r			Perl_yylex_r
#endif
#define Perl_yylex		CPerlObj::Perl_yylex
#define yylex			Perl_yylex
#define Perl_yyparse		CPerlObj::Perl_yyparse
#define yyparse			Perl_yyparse
#define Perl_yywarn		CPerlObj::Perl_yywarn
#define yywarn			Perl_yywarn
#if defined(MYMALLOC)
#define Perl_dump_mstats	CPerlObj::Perl_dump_mstats
#define dump_mstats		Perl_dump_mstats
#define Perl_get_mstats		CPerlObj::Perl_get_mstats
#define get_mstats		Perl_get_mstats
#endif
#define Perl_safesysmalloc	CPerlObj::Perl_safesysmalloc
#define safesysmalloc		Perl_safesysmalloc
#define Perl_safesyscalloc	CPerlObj::Perl_safesyscalloc
#define safesyscalloc		Perl_safesyscalloc
#define Perl_safesysrealloc	CPerlObj::Perl_safesysrealloc
#define safesysrealloc		Perl_safesysrealloc
#define Perl_safesysfree	CPerlObj::Perl_safesysfree
#define safesysfree		Perl_safesysfree
#if defined(LEAKTEST)
#define Perl_safexmalloc	CPerlObj::Perl_safexmalloc
#define safexmalloc		Perl_safexmalloc
#define Perl_safexcalloc	CPerlObj::Perl_safexcalloc
#define safexcalloc		Perl_safexcalloc
#define Perl_safexrealloc	CPerlObj::Perl_safexrealloc
#define safexrealloc		Perl_safexrealloc
#define Perl_safexfree		CPerlObj::Perl_safexfree
#define safexfree		Perl_safexfree
#endif
#if defined(PERL_GLOBAL_STRUCT)
#define Perl_GetVars		CPerlObj::Perl_GetVars
#define GetVars			Perl_GetVars
#endif
#define Perl_runops_standard	CPerlObj::Perl_runops_standard
#define runops_standard		Perl_runops_standard
#define Perl_runops_debug	CPerlObj::Perl_runops_debug
#define runops_debug		Perl_runops_debug
#if defined(USE_THREADS)
#define Perl_sv_lock		CPerlObj::Perl_sv_lock
#define sv_lock			Perl_sv_lock
#endif
#define Perl_sv_catpvf_mg	CPerlObj::Perl_sv_catpvf_mg
#define sv_catpvf_mg		Perl_sv_catpvf_mg
#define Perl_sv_vcatpvf_mg	CPerlObj::Perl_sv_vcatpvf_mg
#define sv_vcatpvf_mg		Perl_sv_vcatpvf_mg
#define Perl_sv_catpv_mg	CPerlObj::Perl_sv_catpv_mg
#define sv_catpv_mg		Perl_sv_catpv_mg
#define Perl_sv_catpvn_mg	CPerlObj::Perl_sv_catpvn_mg
#define sv_catpvn_mg		Perl_sv_catpvn_mg
#define Perl_sv_catsv_mg	CPerlObj::Perl_sv_catsv_mg
#define sv_catsv_mg		Perl_sv_catsv_mg
#define Perl_sv_setpvf_mg	CPerlObj::Perl_sv_setpvf_mg
#define sv_setpvf_mg		Perl_sv_setpvf_mg
#define Perl_sv_vsetpvf_mg	CPerlObj::Perl_sv_vsetpvf_mg
#define sv_vsetpvf_mg		Perl_sv_vsetpvf_mg
#define Perl_sv_setiv_mg	CPerlObj::Perl_sv_setiv_mg
#define sv_setiv_mg		Perl_sv_setiv_mg
#define Perl_sv_setpviv_mg	CPerlObj::Perl_sv_setpviv_mg
#define sv_setpviv_mg		Perl_sv_setpviv_mg
#define Perl_sv_setuv_mg	CPerlObj::Perl_sv_setuv_mg
#define sv_setuv_mg		Perl_sv_setuv_mg
#define Perl_sv_setnv_mg	CPerlObj::Perl_sv_setnv_mg
#define sv_setnv_mg		Perl_sv_setnv_mg
#define Perl_sv_setpv_mg	CPerlObj::Perl_sv_setpv_mg
#define sv_setpv_mg		Perl_sv_setpv_mg
#define Perl_sv_setpvn_mg	CPerlObj::Perl_sv_setpvn_mg
#define sv_setpvn_mg		Perl_sv_setpvn_mg
#define Perl_sv_setsv_mg	CPerlObj::Perl_sv_setsv_mg
#define sv_setsv_mg		Perl_sv_setsv_mg
#define Perl_sv_usepvn_mg	CPerlObj::Perl_sv_usepvn_mg
#define sv_usepvn_mg		Perl_sv_usepvn_mg
#define Perl_get_vtbl		CPerlObj::Perl_get_vtbl
#define get_vtbl		Perl_get_vtbl
#define Perl_pv_display		CPerlObj::Perl_pv_display
#define pv_display		Perl_pv_display
#define Perl_dump_indent	CPerlObj::Perl_dump_indent
#define dump_indent		Perl_dump_indent
#define Perl_dump_vindent	CPerlObj::Perl_dump_vindent
#define dump_vindent		Perl_dump_vindent
#define Perl_do_gv_dump		CPerlObj::Perl_do_gv_dump
#define do_gv_dump		Perl_do_gv_dump
#define Perl_do_gvgv_dump	CPerlObj::Perl_do_gvgv_dump
#define do_gvgv_dump		Perl_do_gvgv_dump
#define Perl_do_hv_dump		CPerlObj::Perl_do_hv_dump
#define do_hv_dump		Perl_do_hv_dump
#define Perl_do_magic_dump	CPerlObj::Perl_do_magic_dump
#define do_magic_dump		Perl_do_magic_dump
#define Perl_do_op_dump		CPerlObj::Perl_do_op_dump
#define do_op_dump		Perl_do_op_dump
#define Perl_do_pmop_dump	CPerlObj::Perl_do_pmop_dump
#define do_pmop_dump		Perl_do_pmop_dump
#define Perl_do_sv_dump		CPerlObj::Perl_do_sv_dump
#define do_sv_dump		Perl_do_sv_dump
#define Perl_magic_dump		CPerlObj::Perl_magic_dump
#define magic_dump		Perl_magic_dump
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
#define Perl_default_protect	CPerlObj::Perl_default_protect
#define default_protect		Perl_default_protect
#define Perl_vdefault_protect	CPerlObj::Perl_vdefault_protect
#define vdefault_protect	Perl_vdefault_protect
#endif
#define Perl_reginitcolors	CPerlObj::Perl_reginitcolors
#define reginitcolors		Perl_reginitcolors
#define Perl_sv_2pv_nolen	CPerlObj::Perl_sv_2pv_nolen
#define sv_2pv_nolen		Perl_sv_2pv_nolen
#define Perl_sv_2pvutf8_nolen	CPerlObj::Perl_sv_2pvutf8_nolen
#define sv_2pvutf8_nolen	Perl_sv_2pvutf8_nolen
#define Perl_sv_2pvbyte_nolen	CPerlObj::Perl_sv_2pvbyte_nolen
#define sv_2pvbyte_nolen	Perl_sv_2pvbyte_nolen
#define Perl_sv_pv		CPerlObj::Perl_sv_pv
#define sv_pv			Perl_sv_pv
#define Perl_sv_pvutf8		CPerlObj::Perl_sv_pvutf8
#define sv_pvutf8		Perl_sv_pvutf8
#define Perl_sv_pvbyte		CPerlObj::Perl_sv_pvbyte
#define sv_pvbyte		Perl_sv_pvbyte
#define Perl_sv_utf8_upgrade	CPerlObj::Perl_sv_utf8_upgrade
#define sv_utf8_upgrade		Perl_sv_utf8_upgrade
#define Perl_sv_utf8_downgrade	CPerlObj::Perl_sv_utf8_downgrade
#define sv_utf8_downgrade	Perl_sv_utf8_downgrade
#define Perl_sv_utf8_encode	CPerlObj::Perl_sv_utf8_encode
#define sv_utf8_encode		Perl_sv_utf8_encode
#define Perl_sv_utf8_decode	CPerlObj::Perl_sv_utf8_decode
#define sv_utf8_decode		Perl_sv_utf8_decode
#define Perl_sv_force_normal	CPerlObj::Perl_sv_force_normal
#define sv_force_normal		Perl_sv_force_normal
#define Perl_sv_add_backref	CPerlObj::Perl_sv_add_backref
#define sv_add_backref		Perl_sv_add_backref
#define Perl_sv_del_backref	CPerlObj::Perl_sv_del_backref
#define sv_del_backref		Perl_sv_del_backref
#define Perl_tmps_grow		CPerlObj::Perl_tmps_grow
#define tmps_grow		Perl_tmps_grow
#define Perl_sv_rvweaken	CPerlObj::Perl_sv_rvweaken
#define sv_rvweaken		Perl_sv_rvweaken
#define Perl_magic_killbackrefs	CPerlObj::Perl_magic_killbackrefs
#define magic_killbackrefs	Perl_magic_killbackrefs
#define Perl_newANONATTRSUB	CPerlObj::Perl_newANONATTRSUB
#define newANONATTRSUB		Perl_newANONATTRSUB
#define Perl_newATTRSUB		CPerlObj::Perl_newATTRSUB
#define newATTRSUB		Perl_newATTRSUB
#define Perl_newMYSUB		CPerlObj::Perl_newMYSUB
#define newMYSUB		Perl_newMYSUB
#define Perl_my_attrs		CPerlObj::Perl_my_attrs
#define my_attrs		Perl_my_attrs
#define Perl_boot_core_xsutils	CPerlObj::Perl_boot_core_xsutils
#define boot_core_xsutils	Perl_boot_core_xsutils
#if defined(USE_ITHREADS)
#define Perl_cx_dup		CPerlObj::Perl_cx_dup
#define cx_dup			Perl_cx_dup
#define Perl_si_dup		CPerlObj::Perl_si_dup
#define si_dup			Perl_si_dup
#define Perl_ss_dup		CPerlObj::Perl_ss_dup
#define ss_dup			Perl_ss_dup
#define Perl_any_dup		CPerlObj::Perl_any_dup
#define any_dup			Perl_any_dup
#define Perl_he_dup		CPerlObj::Perl_he_dup
#define he_dup			Perl_he_dup
#define Perl_re_dup		CPerlObj::Perl_re_dup
#define re_dup			Perl_re_dup
#define Perl_fp_dup		CPerlObj::Perl_fp_dup
#define fp_dup			Perl_fp_dup
#define Perl_dirp_dup		CPerlObj::Perl_dirp_dup
#define dirp_dup		Perl_dirp_dup
#define Perl_gp_dup		CPerlObj::Perl_gp_dup
#define gp_dup			Perl_gp_dup
#define Perl_mg_dup		CPerlObj::Perl_mg_dup
#define mg_dup			Perl_mg_dup
#define Perl_sv_dup		CPerlObj::Perl_sv_dup
#define sv_dup			Perl_sv_dup
#if defined(HAVE_INTERP_INTERN)
#define Perl_sys_intern_dup	CPerlObj::Perl_sys_intern_dup
#define sys_intern_dup		Perl_sys_intern_dup
#endif
#define Perl_ptr_table_new	CPerlObj::Perl_ptr_table_new
#define ptr_table_new		Perl_ptr_table_new
#define Perl_ptr_table_fetch	CPerlObj::Perl_ptr_table_fetch
#define ptr_table_fetch		Perl_ptr_table_fetch
#define Perl_ptr_table_store	CPerlObj::Perl_ptr_table_store
#define ptr_table_store		Perl_ptr_table_store
#define Perl_ptr_table_split	CPerlObj::Perl_ptr_table_split
#define ptr_table_split		Perl_ptr_table_split
#define Perl_ptr_table_clear	CPerlObj::Perl_ptr_table_clear
#define ptr_table_clear		Perl_ptr_table_clear
#define Perl_ptr_table_free	CPerlObj::Perl_ptr_table_free
#define ptr_table_free		Perl_ptr_table_free
#endif
#if defined(HAVE_INTERP_INTERN)
#define Perl_sys_intern_clear	CPerlObj::Perl_sys_intern_clear
#define sys_intern_clear	Perl_sys_intern_clear
#define Perl_sys_intern_init	CPerlObj::Perl_sys_intern_init
#define sys_intern_init		Perl_sys_intern_init
#endif
#if defined(PERL_OBJECT)
#else
#endif
#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
#define S_avhv_index_sv		CPerlObj::S_avhv_index_sv
#define avhv_index_sv		S_avhv_index_sv
#define S_avhv_index		CPerlObj::S_avhv_index
#define avhv_index		S_avhv_index
#endif
#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
#define S_do_trans_simple	CPerlObj::S_do_trans_simple
#define do_trans_simple		S_do_trans_simple
#define S_do_trans_count	CPerlObj::S_do_trans_count
#define do_trans_count		S_do_trans_count
#define S_do_trans_complex	CPerlObj::S_do_trans_complex
#define do_trans_complex	S_do_trans_complex
#define S_do_trans_simple_utf8	CPerlObj::S_do_trans_simple_utf8
#define do_trans_simple_utf8	S_do_trans_simple_utf8
#define S_do_trans_count_utf8	CPerlObj::S_do_trans_count_utf8
#define do_trans_count_utf8	S_do_trans_count_utf8
#define S_do_trans_complex_utf8	CPerlObj::S_do_trans_complex_utf8
#define do_trans_complex_utf8	S_do_trans_complex_utf8
#endif
#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
#define S_gv_init_sv		CPerlObj::S_gv_init_sv
#define gv_init_sv		S_gv_init_sv
#endif
#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
#define S_hsplit		CPerlObj::S_hsplit
#define hsplit			S_hsplit
#define S_hfreeentries		CPerlObj::S_hfreeentries
#define hfreeentries		S_hfreeentries
#define S_more_he		CPerlObj::S_more_he
#define more_he			S_more_he
#define S_new_he		CPerlObj::S_new_he
#define new_he			S_new_he
#define S_del_he		CPerlObj::S_del_he
#define del_he			S_del_he
#define S_save_hek		CPerlObj::S_save_hek
#define save_hek		S_save_hek
#define S_hv_magic_check	CPerlObj::S_hv_magic_check
#define hv_magic_check		S_hv_magic_check
#endif
#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
#define S_save_magic		CPerlObj::S_save_magic
#define save_magic		S_save_magic
#define S_magic_methpack	CPerlObj::S_magic_methpack
#define magic_methpack		S_magic_methpack
#define S_magic_methcall	CPerlObj::S_magic_methcall
#define magic_methcall		S_magic_methcall
#endif
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
#define S_list_assignment	CPerlObj::S_list_assignment
#define list_assignment		S_list_assignment
#define S_bad_type		CPerlObj::S_bad_type
#define bad_type		S_bad_type
#define S_cop_free		CPerlObj::S_cop_free
#define cop_free		S_cop_free
#define S_modkids		CPerlObj::S_modkids
#define modkids			S_modkids
#define S_no_bareword_allowed	CPerlObj::S_no_bareword_allowed
#define no_bareword_allowed	S_no_bareword_allowed
#define S_no_fh_allowed		CPerlObj::S_no_fh_allowed
#define no_fh_allowed		S_no_fh_allowed
#define S_scalarboolean		CPerlObj::S_scalarboolean
#define scalarboolean		S_scalarboolean
#define S_too_few_arguments	CPerlObj::S_too_few_arguments
#define too_few_arguments	S_too_few_arguments
#define S_too_many_arguments	CPerlObj::S_too_many_arguments
#define too_many_arguments	S_too_many_arguments
#define S_trlist_upgrade	CPerlObj::S_trlist_upgrade
#define trlist_upgrade		S_trlist_upgrade
#define S_op_clear		CPerlObj::S_op_clear
#define op_clear		S_op_clear
#define S_null			CPerlObj::S_null
#define null			S_null
#define S_pad_addlex		CPerlObj::S_pad_addlex
#define pad_addlex		S_pad_addlex
#define S_pad_findlex		CPerlObj::S_pad_findlex
#define pad_findlex		S_pad_findlex
#define S_newDEFSVOP		CPerlObj::S_newDEFSVOP
#define newDEFSVOP		S_newDEFSVOP
#define S_new_logop		CPerlObj::S_new_logop
#define new_logop		S_new_logop
#define S_simplify_sort		CPerlObj::S_simplify_sort
#define simplify_sort		S_simplify_sort
#define S_is_handle_constructor	CPerlObj::S_is_handle_constructor
#define is_handle_constructor	S_is_handle_constructor
#define S_gv_ename		CPerlObj::S_gv_ename
#define gv_ename		S_gv_ename
#define S_cv_dump		CPerlObj::S_cv_dump
#define cv_dump			S_cv_dump
#define S_cv_clone2		CPerlObj::S_cv_clone2
#define cv_clone2		S_cv_clone2
#define S_scalar_mod_type	CPerlObj::S_scalar_mod_type
#define scalar_mod_type		S_scalar_mod_type
#define S_my_kid		CPerlObj::S_my_kid
#define my_kid			S_my_kid
#define S_dup_attrlist		CPerlObj::S_dup_attrlist
#define dup_attrlist		S_dup_attrlist
#define S_apply_attrs		CPerlObj::S_apply_attrs
#define apply_attrs		S_apply_attrs
#  if defined(PL_OP_SLAB_ALLOC)
#define S_Slab_Alloc		CPerlObj::S_Slab_Alloc
#define Slab_Alloc		S_Slab_Alloc
#  endif
#endif
#if defined(PERL_IN_PERL_C) || defined(PERL_DECL_PROT)
#define S_find_beginning	CPerlObj::S_find_beginning
#define find_beginning		S_find_beginning
#define S_forbid_setid		CPerlObj::S_forbid_setid
#define forbid_setid		S_forbid_setid
#define S_incpush		CPerlObj::S_incpush
#define incpush			S_incpush
#define S_init_interp		CPerlObj::S_init_interp
#define init_interp		S_init_interp
#define S_init_ids		CPerlObj::S_init_ids
#define init_ids		S_init_ids
#define S_init_lexer		CPerlObj::S_init_lexer
#define init_lexer		S_init_lexer
#define S_init_main_stash	CPerlObj::S_init_main_stash
#define init_main_stash		S_init_main_stash
#define S_init_perllib		CPerlObj::S_init_perllib
#define init_perllib		S_init_perllib
#define S_init_postdump_symbols	CPerlObj::S_init_postdump_symbols
#define init_postdump_symbols	S_init_postdump_symbols
#define S_init_predump_symbols	CPerlObj::S_init_predump_symbols
#define init_predump_symbols	S_init_predump_symbols
#define S_my_exit_jump		CPerlObj::S_my_exit_jump
#define my_exit_jump		S_my_exit_jump
#define S_nuke_stacks		CPerlObj::S_nuke_stacks
#define nuke_stacks		S_nuke_stacks
#define S_open_script		CPerlObj::S_open_script
#define open_script		S_open_script
#define S_usage			CPerlObj::S_usage
#define usage			S_usage
#define S_validate_suid		CPerlObj::S_validate_suid
#define validate_suid		S_validate_suid
#  if defined(IAMSUID)
#define S_fd_on_nosuid_fs	CPerlObj::S_fd_on_nosuid_fs
#define fd_on_nosuid_fs		S_fd_on_nosuid_fs
#  endif
#define S_parse_body		CPerlObj::S_parse_body
#define parse_body		S_parse_body
#define S_run_body		CPerlObj::S_run_body
#define run_body		S_run_body
#define S_call_body		CPerlObj::S_call_body
#define call_body		S_call_body
#define S_call_list_body	CPerlObj::S_call_list_body
#define call_list_body		S_call_list_body
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
#define S_vparse_body		CPerlObj::S_vparse_body
#define vparse_body		S_vparse_body
#define S_vrun_body		CPerlObj::S_vrun_body
#define vrun_body		S_vrun_body
#define S_vcall_body		CPerlObj::S_vcall_body
#define vcall_body		S_vcall_body
#define S_vcall_list_body	CPerlObj::S_vcall_list_body
#define vcall_list_body		S_vcall_list_body
#endif
#  if defined(USE_THREADS)
#define S_init_main_thread	CPerlObj::S_init_main_thread
#define init_main_thread	S_init_main_thread
#  endif
#endif
#if defined(PERL_IN_PP_C) || defined(PERL_DECL_PROT)
#define S_doencodes		CPerlObj::S_doencodes
#define doencodes		S_doencodes
#define S_refto			CPerlObj::S_refto
#define refto			S_refto
#define S_seed			CPerlObj::S_seed
#define seed			S_seed
#define S_mul128		CPerlObj::S_mul128
#define mul128			S_mul128
#define S_is_an_int		CPerlObj::S_is_an_int
#define is_an_int		S_is_an_int
#define S_div128		CPerlObj::S_div128
#define div128			S_div128
#endif
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
#define S_docatch		CPerlObj::S_docatch
#define docatch			S_docatch
#define S_docatch_body		CPerlObj::S_docatch_body
#define docatch_body		S_docatch_body
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
#define S_vdocatch_body		CPerlObj::S_vdocatch_body
#define vdocatch_body		S_vdocatch_body
#endif
#define S_dofindlabel		CPerlObj::S_dofindlabel
#define dofindlabel		S_dofindlabel
#define S_doparseform		CPerlObj::S_doparseform
#define doparseform		S_doparseform
#define S_dopoptoeval		CPerlObj::S_dopoptoeval
#define dopoptoeval		S_dopoptoeval
#define S_dopoptolabel		CPerlObj::S_dopoptolabel
#define dopoptolabel		S_dopoptolabel
#define S_dopoptoloop		CPerlObj::S_dopoptoloop
#define dopoptoloop		S_dopoptoloop
#define S_dopoptosub		CPerlObj::S_dopoptosub
#define dopoptosub		S_dopoptosub
#define S_dopoptosub_at		CPerlObj::S_dopoptosub_at
#define dopoptosub_at		S_dopoptosub_at
#define S_save_lines		CPerlObj::S_save_lines
#define save_lines		S_save_lines
#define S_doeval		CPerlObj::S_doeval
#define doeval			S_doeval
#define S_doopen_pmc		CPerlObj::S_doopen_pmc
#define doopen_pmc		S_doopen_pmc
#define S_qsortsv		CPerlObj::S_qsortsv
#define qsortsv			S_qsortsv
#endif
#if defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
#define S_do_maybe_phash	CPerlObj::S_do_maybe_phash
#define do_maybe_phash		S_do_maybe_phash
#define S_do_oddball		CPerlObj::S_do_oddball
#define do_oddball		S_do_oddball
#define S_get_db_sub		CPerlObj::S_get_db_sub
#define get_db_sub		S_get_db_sub
#define S_method_common		CPerlObj::S_method_common
#define method_common		S_method_common
#endif
#if defined(PERL_IN_PP_SYS_C) || defined(PERL_DECL_PROT)
#define S_doform		CPerlObj::S_doform
#define doform			S_doform
#define S_emulate_eaccess	CPerlObj::S_emulate_eaccess
#define emulate_eaccess		S_emulate_eaccess
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#define S_dooneliner		CPerlObj::S_dooneliner
#define dooneliner		S_dooneliner
#  endif
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_DECL_PROT)
#define S_reg			CPerlObj::S_reg
#define reg			S_reg
#define S_reganode		CPerlObj::S_reganode
#define reganode		S_reganode
#define S_regatom		CPerlObj::S_regatom
#define regatom			S_regatom
#define S_regbranch		CPerlObj::S_regbranch
#define regbranch		S_regbranch
#define S_reguni		CPerlObj::S_reguni
#define reguni			S_reguni
#define S_regclass		CPerlObj::S_regclass
#define regclass		S_regclass
#define S_regclassutf8		CPerlObj::S_regclassutf8
#define regclassutf8		S_regclassutf8
#define S_regcurly		CPerlObj::S_regcurly
#define regcurly		S_regcurly
#define S_reg_node		CPerlObj::S_reg_node
#define reg_node		S_reg_node
#define S_regpiece		CPerlObj::S_regpiece
#define regpiece		S_regpiece
#define S_reginsert		CPerlObj::S_reginsert
#define reginsert		S_reginsert
#define S_regoptail		CPerlObj::S_regoptail
#define regoptail		S_regoptail
#define S_regtail		CPerlObj::S_regtail
#define regtail			S_regtail
#define S_regwhite		CPerlObj::S_regwhite
#define regwhite		S_regwhite
#define S_nextchar		CPerlObj::S_nextchar
#define nextchar		S_nextchar
#define S_dumpuntil		CPerlObj::S_dumpuntil
#define dumpuntil		S_dumpuntil
#define S_put_byte		CPerlObj::S_put_byte
#define put_byte		S_put_byte
#define S_scan_commit		CPerlObj::S_scan_commit
#define scan_commit		S_scan_commit
#define S_cl_anything		CPerlObj::S_cl_anything
#define cl_anything		S_cl_anything
#define S_cl_is_anything	CPerlObj::S_cl_is_anything
#define cl_is_anything		S_cl_is_anything
#define S_cl_init		CPerlObj::S_cl_init
#define cl_init			S_cl_init
#define S_cl_init_zero		CPerlObj::S_cl_init_zero
#define cl_init_zero		S_cl_init_zero
#define S_cl_and		CPerlObj::S_cl_and
#define cl_and			S_cl_and
#define S_cl_or			CPerlObj::S_cl_or
#define cl_or			S_cl_or
#define S_study_chunk		CPerlObj::S_study_chunk
#define study_chunk		S_study_chunk
#define S_add_data		CPerlObj::S_add_data
#define add_data		S_add_data
#define S_re_croak2		CPerlObj::S_re_croak2
#define re_croak2		S_re_croak2
#define S_regpposixcc		CPerlObj::S_regpposixcc
#define regpposixcc		S_regpposixcc
#define S_checkposixcc		CPerlObj::S_checkposixcc
#define checkposixcc		S_checkposixcc
#endif
#if defined(PERL_IN_REGEXEC_C) || defined(PERL_DECL_PROT)
#define S_regmatch		CPerlObj::S_regmatch
#define regmatch		S_regmatch
#define S_regrepeat		CPerlObj::S_regrepeat
#define regrepeat		S_regrepeat
#define S_regrepeat_hard	CPerlObj::S_regrepeat_hard
#define regrepeat_hard		S_regrepeat_hard
#define S_regtry		CPerlObj::S_regtry
#define regtry			S_regtry
#define S_reginclass		CPerlObj::S_reginclass
#define reginclass		S_reginclass
#define S_reginclassutf8	CPerlObj::S_reginclassutf8
#define reginclassutf8		S_reginclassutf8
#define S_regcppush		CPerlObj::S_regcppush
#define regcppush		S_regcppush
#define S_regcppop		CPerlObj::S_regcppop
#define regcppop		S_regcppop
#define S_regcp_set_to		CPerlObj::S_regcp_set_to
#define regcp_set_to		S_regcp_set_to
#define S_cache_re		CPerlObj::S_cache_re
#define cache_re		S_cache_re
#define S_reghop		CPerlObj::S_reghop
#define reghop			S_reghop
#define S_reghopmaybe		CPerlObj::S_reghopmaybe
#define reghopmaybe		S_reghopmaybe
#define S_find_byclass		CPerlObj::S_find_byclass
#define find_byclass		S_find_byclass
#endif
#if defined(PERL_IN_RUN_C) || defined(PERL_DECL_PROT)
#define S_debprof		CPerlObj::S_debprof
#define debprof			S_debprof
#endif
#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
#define S_save_scalar_at	CPerlObj::S_save_scalar_at
#define save_scalar_at		S_save_scalar_at
#endif
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
#define S_asIV			CPerlObj::S_asIV
#define asIV			S_asIV
#define S_asUV			CPerlObj::S_asUV
#define asUV			S_asUV
#define S_more_sv		CPerlObj::S_more_sv
#define more_sv			S_more_sv
#define S_more_xiv		CPerlObj::S_more_xiv
#define more_xiv		S_more_xiv
#define S_more_xnv		CPerlObj::S_more_xnv
#define more_xnv		S_more_xnv
#define S_more_xpv		CPerlObj::S_more_xpv
#define more_xpv		S_more_xpv
#define S_more_xpviv		CPerlObj::S_more_xpviv
#define more_xpviv		S_more_xpviv
#define S_more_xpvnv		CPerlObj::S_more_xpvnv
#define more_xpvnv		S_more_xpvnv
#define S_more_xpvcv		CPerlObj::S_more_xpvcv
#define more_xpvcv		S_more_xpvcv
#define S_more_xpvav		CPerlObj::S_more_xpvav
#define more_xpvav		S_more_xpvav
#define S_more_xpvhv		CPerlObj::S_more_xpvhv
#define more_xpvhv		S_more_xpvhv
#define S_more_xpvmg		CPerlObj::S_more_xpvmg
#define more_xpvmg		S_more_xpvmg
#define S_more_xpvlv		CPerlObj::S_more_xpvlv
#define more_xpvlv		S_more_xpvlv
#define S_more_xpvbm		CPerlObj::S_more_xpvbm
#define more_xpvbm		S_more_xpvbm
#define S_more_xrv		CPerlObj::S_more_xrv
#define more_xrv		S_more_xrv
#define S_new_xiv		CPerlObj::S_new_xiv
#define new_xiv			S_new_xiv
#define S_new_xnv		CPerlObj::S_new_xnv
#define new_xnv			S_new_xnv
#define S_new_xpv		CPerlObj::S_new_xpv
#define new_xpv			S_new_xpv
#define S_new_xpviv		CPerlObj::S_new_xpviv
#define new_xpviv		S_new_xpviv
#define S_new_xpvnv		CPerlObj::S_new_xpvnv
#define new_xpvnv		S_new_xpvnv
#define S_new_xpvcv		CPerlObj::S_new_xpvcv
#define new_xpvcv		S_new_xpvcv
#define S_new_xpvav		CPerlObj::S_new_xpvav
#define new_xpvav		S_new_xpvav
#define S_new_xpvhv		CPerlObj::S_new_xpvhv
#define new_xpvhv		S_new_xpvhv
#define S_new_xpvmg		CPerlObj::S_new_xpvmg
#define new_xpvmg		S_new_xpvmg
#define S_new_xpvlv		CPerlObj::S_new_xpvlv
#define new_xpvlv		S_new_xpvlv
#define S_new_xpvbm		CPerlObj::S_new_xpvbm
#define new_xpvbm		S_new_xpvbm
#define S_new_xrv		CPerlObj::S_new_xrv
#define new_xrv			S_new_xrv
#define S_del_xiv		CPerlObj::S_del_xiv
#define del_xiv			S_del_xiv
#define S_del_xnv		CPerlObj::S_del_xnv
#define del_xnv			S_del_xnv
#define S_del_xpv		CPerlObj::S_del_xpv
#define del_xpv			S_del_xpv
#define S_del_xpviv		CPerlObj::S_del_xpviv
#define del_xpviv		S_del_xpviv
#define S_del_xpvnv		CPerlObj::S_del_xpvnv
#define del_xpvnv		S_del_xpvnv
#define S_del_xpvcv		CPerlObj::S_del_xpvcv
#define del_xpvcv		S_del_xpvcv
#define S_del_xpvav		CPerlObj::S_del_xpvav
#define del_xpvav		S_del_xpvav
#define S_del_xpvhv		CPerlObj::S_del_xpvhv
#define del_xpvhv		S_del_xpvhv
#define S_del_xpvmg		CPerlObj::S_del_xpvmg
#define del_xpvmg		S_del_xpvmg
#define S_del_xpvlv		CPerlObj::S_del_xpvlv
#define del_xpvlv		S_del_xpvlv
#define S_del_xpvbm		CPerlObj::S_del_xpvbm
#define del_xpvbm		S_del_xpvbm
#define S_del_xrv		CPerlObj::S_del_xrv
#define del_xrv			S_del_xrv
#define S_sv_unglob		CPerlObj::S_sv_unglob
#define sv_unglob		S_sv_unglob
#define S_not_a_number		CPerlObj::S_not_a_number
#define not_a_number		S_not_a_number
#define S_visit			CPerlObj::S_visit
#define visit			S_visit
#  if defined(DEBUGGING)
#define S_del_sv		CPerlObj::S_del_sv
#define del_sv			S_del_sv
#  endif
#endif
#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
#define S_check_uni		CPerlObj::S_check_uni
#define check_uni		S_check_uni
#define S_force_next		CPerlObj::S_force_next
#define force_next		S_force_next
#define S_force_version		CPerlObj::S_force_version
#define force_version		S_force_version
#define S_force_word		CPerlObj::S_force_word
#define force_word		S_force_word
#define S_tokeq			CPerlObj::S_tokeq
#define tokeq			S_tokeq
#define S_scan_const		CPerlObj::S_scan_const
#define scan_const		S_scan_const
#define S_scan_formline		CPerlObj::S_scan_formline
#define scan_formline		S_scan_formline
#define S_scan_heredoc		CPerlObj::S_scan_heredoc
#define scan_heredoc		S_scan_heredoc
#define S_scan_ident		CPerlObj::S_scan_ident
#define scan_ident		S_scan_ident
#define S_scan_inputsymbol	CPerlObj::S_scan_inputsymbol
#define scan_inputsymbol	S_scan_inputsymbol
#define S_scan_pat		CPerlObj::S_scan_pat
#define scan_pat		S_scan_pat
#define S_scan_str		CPerlObj::S_scan_str
#define scan_str		S_scan_str
#define S_scan_subst		CPerlObj::S_scan_subst
#define scan_subst		S_scan_subst
#define S_scan_trans		CPerlObj::S_scan_trans
#define scan_trans		S_scan_trans
#define S_scan_word		CPerlObj::S_scan_word
#define scan_word		S_scan_word
#define S_skipspace		CPerlObj::S_skipspace
#define skipspace		S_skipspace
#define S_swallow_bom		CPerlObj::S_swallow_bom
#define swallow_bom		S_swallow_bom
#define S_checkcomma		CPerlObj::S_checkcomma
#define checkcomma		S_checkcomma
#define S_force_ident		CPerlObj::S_force_ident
#define force_ident		S_force_ident
#define S_incline		CPerlObj::S_incline
#define incline			S_incline
#define S_intuit_method		CPerlObj::S_intuit_method
#define intuit_method		S_intuit_method
#define S_intuit_more		CPerlObj::S_intuit_more
#define intuit_more		S_intuit_more
#define S_lop			CPerlObj::S_lop
#define lop			S_lop
#define S_missingterm		CPerlObj::S_missingterm
#define missingterm		S_missingterm
#define S_no_op			CPerlObj::S_no_op
#define no_op			S_no_op
#define S_set_csh		CPerlObj::S_set_csh
#define set_csh			S_set_csh
#define S_sublex_done		CPerlObj::S_sublex_done
#define sublex_done		S_sublex_done
#define S_sublex_push		CPerlObj::S_sublex_push
#define sublex_push		S_sublex_push
#define S_sublex_start		CPerlObj::S_sublex_start
#define sublex_start		S_sublex_start
#define S_filter_gets		CPerlObj::S_filter_gets
#define filter_gets		S_filter_gets
#define S_find_in_my_stash	CPerlObj::S_find_in_my_stash
#define find_in_my_stash	S_find_in_my_stash
#define S_new_constant		CPerlObj::S_new_constant
#define new_constant		S_new_constant
#define S_ao			CPerlObj::S_ao
#define ao			S_ao
#define S_depcom		CPerlObj::S_depcom
#define depcom			S_depcom
#define S_incl_perldb		CPerlObj::S_incl_perldb
#define incl_perldb		S_incl_perldb
#if 0
#define S_utf16_textfilter	CPerlObj::S_utf16_textfilter
#define utf16_textfilter	S_utf16_textfilter
#define S_utf16rev_textfilter	CPerlObj::S_utf16rev_textfilter
#define utf16rev_textfilter	S_utf16rev_textfilter
#endif
#  if defined(CRIPPLED_CC)
#define S_uni			CPerlObj::S_uni
#define uni			S_uni
#  endif
#  if defined(PERL_CR_FILTER)
#define S_cr_textfilter		CPerlObj::S_cr_textfilter
#define cr_textfilter		S_cr_textfilter
#  endif
#endif
#if defined(PERL_IN_UNIVERSAL_C) || defined(PERL_DECL_PROT)
#define S_isa_lookup		CPerlObj::S_isa_lookup
#define isa_lookup		S_isa_lookup
#endif
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
#define S_stdize_locale		CPerlObj::S_stdize_locale
#define stdize_locale		S_stdize_locale
#define S_mess_alloc		CPerlObj::S_mess_alloc
#define mess_alloc		S_mess_alloc
#  if defined(LEAKTEST)
#define S_xstat			CPerlObj::S_xstat
#define xstat			S_xstat
#  endif
#endif
#if defined(PERL_OBJECT)
#endif
#define Perl_ck_anoncode	CPerlObj::Perl_ck_anoncode
#define ck_anoncode		Perl_ck_anoncode
#define Perl_ck_bitop		CPerlObj::Perl_ck_bitop
#define ck_bitop		Perl_ck_bitop
#define Perl_ck_concat		CPerlObj::Perl_ck_concat
#define ck_concat		Perl_ck_concat
#define Perl_ck_defined		CPerlObj::Perl_ck_defined
#define ck_defined		Perl_ck_defined
#define Perl_ck_delete		CPerlObj::Perl_ck_delete
#define ck_delete		Perl_ck_delete
#define Perl_ck_eof		CPerlObj::Perl_ck_eof
#define ck_eof			Perl_ck_eof
#define Perl_ck_eval		CPerlObj::Perl_ck_eval
#define ck_eval			Perl_ck_eval
#define Perl_ck_exec		CPerlObj::Perl_ck_exec
#define ck_exec			Perl_ck_exec
#define Perl_ck_exists		CPerlObj::Perl_ck_exists
#define ck_exists		Perl_ck_exists
#define Perl_ck_exit		CPerlObj::Perl_ck_exit
#define ck_exit			Perl_ck_exit
#define Perl_ck_ftst		CPerlObj::Perl_ck_ftst
#define ck_ftst			Perl_ck_ftst
#define Perl_ck_fun		CPerlObj::Perl_ck_fun
#define ck_fun			Perl_ck_fun
#define Perl_ck_glob		CPerlObj::Perl_ck_glob
#define ck_glob			Perl_ck_glob
#define Perl_ck_grep		CPerlObj::Perl_ck_grep
#define ck_grep			Perl_ck_grep
#define Perl_ck_index		CPerlObj::Perl_ck_index
#define ck_index		Perl_ck_index
#define Perl_ck_join		CPerlObj::Perl_ck_join
#define ck_join			Perl_ck_join
#define Perl_ck_lengthconst	CPerlObj::Perl_ck_lengthconst
#define ck_lengthconst		Perl_ck_lengthconst
#define Perl_ck_lfun		CPerlObj::Perl_ck_lfun
#define ck_lfun			Perl_ck_lfun
#define Perl_ck_listiob		CPerlObj::Perl_ck_listiob
#define ck_listiob		Perl_ck_listiob
#define Perl_ck_match		CPerlObj::Perl_ck_match
#define ck_match		Perl_ck_match
#define Perl_ck_method		CPerlObj::Perl_ck_method
#define ck_method		Perl_ck_method
#define Perl_ck_null		CPerlObj::Perl_ck_null
#define ck_null			Perl_ck_null
#define Perl_ck_open		CPerlObj::Perl_ck_open
#define ck_open			Perl_ck_open
#define Perl_ck_repeat		CPerlObj::Perl_ck_repeat
#define ck_repeat		Perl_ck_repeat
#define Perl_ck_require		CPerlObj::Perl_ck_require
#define ck_require		Perl_ck_require
#define Perl_ck_return		CPerlObj::Perl_ck_return
#define ck_return		Perl_ck_return
#define Perl_ck_rfun		CPerlObj::Perl_ck_rfun
#define ck_rfun			Perl_ck_rfun
#define Perl_ck_rvconst		CPerlObj::Perl_ck_rvconst
#define ck_rvconst		Perl_ck_rvconst
#define Perl_ck_sassign		CPerlObj::Perl_ck_sassign
#define ck_sassign		Perl_ck_sassign
#define Perl_ck_select		CPerlObj::Perl_ck_select
#define ck_select		Perl_ck_select
#define Perl_ck_shift		CPerlObj::Perl_ck_shift
#define ck_shift		Perl_ck_shift
#define Perl_ck_sort		CPerlObj::Perl_ck_sort
#define ck_sort			Perl_ck_sort
#define Perl_ck_spair		CPerlObj::Perl_ck_spair
#define ck_spair		Perl_ck_spair
#define Perl_ck_split		CPerlObj::Perl_ck_split
#define ck_split		Perl_ck_split
#define Perl_ck_subr		CPerlObj::Perl_ck_subr
#define ck_subr			Perl_ck_subr
#define Perl_ck_substr		CPerlObj::Perl_ck_substr
#define ck_substr		Perl_ck_substr
#define Perl_ck_svconst		CPerlObj::Perl_ck_svconst
#define ck_svconst		Perl_ck_svconst
#define Perl_ck_trunc		CPerlObj::Perl_ck_trunc
#define ck_trunc		Perl_ck_trunc
#define Perl_pp_aassign		CPerlObj::Perl_pp_aassign
#define pp_aassign		Perl_pp_aassign
#define Perl_pp_abs		CPerlObj::Perl_pp_abs
#define pp_abs			Perl_pp_abs
#define Perl_pp_accept		CPerlObj::Perl_pp_accept
#define pp_accept		Perl_pp_accept
#define Perl_pp_add		CPerlObj::Perl_pp_add
#define pp_add			Perl_pp_add
#define Perl_pp_aelem		CPerlObj::Perl_pp_aelem
#define pp_aelem		Perl_pp_aelem
#define Perl_pp_aelemfast	CPerlObj::Perl_pp_aelemfast
#define pp_aelemfast		Perl_pp_aelemfast
#define Perl_pp_alarm		CPerlObj::Perl_pp_alarm
#define pp_alarm		Perl_pp_alarm
#define Perl_pp_and		CPerlObj::Perl_pp_and
#define pp_and			Perl_pp_and
#define Perl_pp_andassign	CPerlObj::Perl_pp_andassign
#define pp_andassign		Perl_pp_andassign
#define Perl_pp_anoncode	CPerlObj::Perl_pp_anoncode
#define pp_anoncode		Perl_pp_anoncode
#define Perl_pp_anonhash	CPerlObj::Perl_pp_anonhash
#define pp_anonhash		Perl_pp_anonhash
#define Perl_pp_anonlist	CPerlObj::Perl_pp_anonlist
#define pp_anonlist		Perl_pp_anonlist
#define Perl_pp_aslice		CPerlObj::Perl_pp_aslice
#define pp_aslice		Perl_pp_aslice
#define Perl_pp_atan2		CPerlObj::Perl_pp_atan2
#define pp_atan2		Perl_pp_atan2
#define Perl_pp_av2arylen	CPerlObj::Perl_pp_av2arylen
#define pp_av2arylen		Perl_pp_av2arylen
#define Perl_pp_backtick	CPerlObj::Perl_pp_backtick
#define pp_backtick		Perl_pp_backtick
#define Perl_pp_bind		CPerlObj::Perl_pp_bind
#define pp_bind			Perl_pp_bind
#define Perl_pp_binmode		CPerlObj::Perl_pp_binmode
#define pp_binmode		Perl_pp_binmode
#define Perl_pp_bit_and		CPerlObj::Perl_pp_bit_and
#define pp_bit_and		Perl_pp_bit_and
#define Perl_pp_bit_or		CPerlObj::Perl_pp_bit_or
#define pp_bit_or		Perl_pp_bit_or
#define Perl_pp_bit_xor		CPerlObj::Perl_pp_bit_xor
#define pp_bit_xor		Perl_pp_bit_xor
#define Perl_pp_bless		CPerlObj::Perl_pp_bless
#define pp_bless		Perl_pp_bless
#define Perl_pp_caller		CPerlObj::Perl_pp_caller
#define pp_caller		Perl_pp_caller
#define Perl_pp_chdir		CPerlObj::Perl_pp_chdir
#define pp_chdir		Perl_pp_chdir
#define Perl_pp_chmod		CPerlObj::Perl_pp_chmod
#define pp_chmod		Perl_pp_chmod
#define Perl_pp_chomp		CPerlObj::Perl_pp_chomp
#define pp_chomp		Perl_pp_chomp
#define Perl_pp_chop		CPerlObj::Perl_pp_chop
#define pp_chop			Perl_pp_chop
#define Perl_pp_chown		CPerlObj::Perl_pp_chown
#define pp_chown		Perl_pp_chown
#define Perl_pp_chr		CPerlObj::Perl_pp_chr
#define pp_chr			Perl_pp_chr
#define Perl_pp_chroot		CPerlObj::Perl_pp_chroot
#define pp_chroot		Perl_pp_chroot
#define Perl_pp_close		CPerlObj::Perl_pp_close
#define pp_close		Perl_pp_close
#define Perl_pp_closedir	CPerlObj::Perl_pp_closedir
#define pp_closedir		Perl_pp_closedir
#define Perl_pp_complement	CPerlObj::Perl_pp_complement
#define pp_complement		Perl_pp_complement
#define Perl_pp_concat		CPerlObj::Perl_pp_concat
#define pp_concat		Perl_pp_concat
#define Perl_pp_cond_expr	CPerlObj::Perl_pp_cond_expr
#define pp_cond_expr		Perl_pp_cond_expr
#define Perl_pp_connect		CPerlObj::Perl_pp_connect
#define pp_connect		Perl_pp_connect
#define Perl_pp_const		CPerlObj::Perl_pp_const
#define pp_const		Perl_pp_const
#define Perl_pp_cos		CPerlObj::Perl_pp_cos
#define pp_cos			Perl_pp_cos
#define Perl_pp_crypt		CPerlObj::Perl_pp_crypt
#define pp_crypt		Perl_pp_crypt
#define Perl_pp_dbmclose	CPerlObj::Perl_pp_dbmclose
#define pp_dbmclose		Perl_pp_dbmclose
#define Perl_pp_dbmopen		CPerlObj::Perl_pp_dbmopen
#define pp_dbmopen		Perl_pp_dbmopen
#define Perl_pp_dbstate		CPerlObj::Perl_pp_dbstate
#define pp_dbstate		Perl_pp_dbstate
#define Perl_pp_defined		CPerlObj::Perl_pp_defined
#define pp_defined		Perl_pp_defined
#define Perl_pp_delete		CPerlObj::Perl_pp_delete
#define pp_delete		Perl_pp_delete
#define Perl_pp_die		CPerlObj::Perl_pp_die
#define pp_die			Perl_pp_die
#define Perl_pp_divide		CPerlObj::Perl_pp_divide
#define pp_divide		Perl_pp_divide
#define Perl_pp_dofile		CPerlObj::Perl_pp_dofile
#define pp_dofile		Perl_pp_dofile
#define Perl_pp_dump		CPerlObj::Perl_pp_dump
#define pp_dump			Perl_pp_dump
#define Perl_pp_each		CPerlObj::Perl_pp_each
#define pp_each			Perl_pp_each
#define Perl_pp_egrent		CPerlObj::Perl_pp_egrent
#define pp_egrent		Perl_pp_egrent
#define Perl_pp_ehostent	CPerlObj::Perl_pp_ehostent
#define pp_ehostent		Perl_pp_ehostent
#define Perl_pp_enetent		CPerlObj::Perl_pp_enetent
#define pp_enetent		Perl_pp_enetent
#define Perl_pp_enter		CPerlObj::Perl_pp_enter
#define pp_enter		Perl_pp_enter
#define Perl_pp_entereval	CPerlObj::Perl_pp_entereval
#define pp_entereval		Perl_pp_entereval
#define Perl_pp_enteriter	CPerlObj::Perl_pp_enteriter
#define pp_enteriter		Perl_pp_enteriter
#define Perl_pp_enterloop	CPerlObj::Perl_pp_enterloop
#define pp_enterloop		Perl_pp_enterloop
#define Perl_pp_entersub	CPerlObj::Perl_pp_entersub
#define pp_entersub		Perl_pp_entersub
#define Perl_pp_entertry	CPerlObj::Perl_pp_entertry
#define pp_entertry		Perl_pp_entertry
#define Perl_pp_enterwrite	CPerlObj::Perl_pp_enterwrite
#define pp_enterwrite		Perl_pp_enterwrite
#define Perl_pp_eof		CPerlObj::Perl_pp_eof
#define pp_eof			Perl_pp_eof
#define Perl_pp_eprotoent	CPerlObj::Perl_pp_eprotoent
#define pp_eprotoent		Perl_pp_eprotoent
#define Perl_pp_epwent		CPerlObj::Perl_pp_epwent
#define pp_epwent		Perl_pp_epwent
#define Perl_pp_eq		CPerlObj::Perl_pp_eq
#define pp_eq			Perl_pp_eq
#define Perl_pp_eservent	CPerlObj::Perl_pp_eservent
#define pp_eservent		Perl_pp_eservent
#define Perl_pp_exec		CPerlObj::Perl_pp_exec
#define pp_exec			Perl_pp_exec
#define Perl_pp_exists		CPerlObj::Perl_pp_exists
#define pp_exists		Perl_pp_exists
#define Perl_pp_exit		CPerlObj::Perl_pp_exit
#define pp_exit			Perl_pp_exit
#define Perl_pp_exp		CPerlObj::Perl_pp_exp
#define pp_exp			Perl_pp_exp
#define Perl_pp_fcntl		CPerlObj::Perl_pp_fcntl
#define pp_fcntl		Perl_pp_fcntl
#define Perl_pp_fileno		CPerlObj::Perl_pp_fileno
#define pp_fileno		Perl_pp_fileno
#define Perl_pp_flip		CPerlObj::Perl_pp_flip
#define pp_flip			Perl_pp_flip
#define Perl_pp_flock		CPerlObj::Perl_pp_flock
#define pp_flock		Perl_pp_flock
#define Perl_pp_flop		CPerlObj::Perl_pp_flop
#define pp_flop			Perl_pp_flop
#define Perl_pp_fork		CPerlObj::Perl_pp_fork
#define pp_fork			Perl_pp_fork
#define Perl_pp_formline	CPerlObj::Perl_pp_formline
#define pp_formline		Perl_pp_formline
#define Perl_pp_ftatime		CPerlObj::Perl_pp_ftatime
#define pp_ftatime		Perl_pp_ftatime
#define Perl_pp_ftbinary	CPerlObj::Perl_pp_ftbinary
#define pp_ftbinary		Perl_pp_ftbinary
#define Perl_pp_ftblk		CPerlObj::Perl_pp_ftblk
#define pp_ftblk		Perl_pp_ftblk
#define Perl_pp_ftchr		CPerlObj::Perl_pp_ftchr
#define pp_ftchr		Perl_pp_ftchr
#define Perl_pp_ftctime		CPerlObj::Perl_pp_ftctime
#define pp_ftctime		Perl_pp_ftctime
#define Perl_pp_ftdir		CPerlObj::Perl_pp_ftdir
#define pp_ftdir		Perl_pp_ftdir
#define Perl_pp_fteexec		CPerlObj::Perl_pp_fteexec
#define pp_fteexec		Perl_pp_fteexec
#define Perl_pp_fteowned	CPerlObj::Perl_pp_fteowned
#define pp_fteowned		Perl_pp_fteowned
#define Perl_pp_fteread		CPerlObj::Perl_pp_fteread
#define pp_fteread		Perl_pp_fteread
#define Perl_pp_ftewrite	CPerlObj::Perl_pp_ftewrite
#define pp_ftewrite		Perl_pp_ftewrite
#define Perl_pp_ftfile		CPerlObj::Perl_pp_ftfile
#define pp_ftfile		Perl_pp_ftfile
#define Perl_pp_ftis		CPerlObj::Perl_pp_ftis
#define pp_ftis			Perl_pp_ftis
#define Perl_pp_ftlink		CPerlObj::Perl_pp_ftlink
#define pp_ftlink		Perl_pp_ftlink
#define Perl_pp_ftmtime		CPerlObj::Perl_pp_ftmtime
#define pp_ftmtime		Perl_pp_ftmtime
#define Perl_pp_ftpipe		CPerlObj::Perl_pp_ftpipe
#define pp_ftpipe		Perl_pp_ftpipe
#define Perl_pp_ftrexec		CPerlObj::Perl_pp_ftrexec
#define pp_ftrexec		Perl_pp_ftrexec
#define Perl_pp_ftrowned	CPerlObj::Perl_pp_ftrowned
#define pp_ftrowned		Perl_pp_ftrowned
#define Perl_pp_ftrread		CPerlObj::Perl_pp_ftrread
#define pp_ftrread		Perl_pp_ftrread
#define Perl_pp_ftrwrite	CPerlObj::Perl_pp_ftrwrite
#define pp_ftrwrite		Perl_pp_ftrwrite
#define Perl_pp_ftsgid		CPerlObj::Perl_pp_ftsgid
#define pp_ftsgid		Perl_pp_ftsgid
#define Perl_pp_ftsize		CPerlObj::Perl_pp_ftsize
#define pp_ftsize		Perl_pp_ftsize
#define Perl_pp_ftsock		CPerlObj::Perl_pp_ftsock
#define pp_ftsock		Perl_pp_ftsock
#define Perl_pp_ftsuid		CPerlObj::Perl_pp_ftsuid
#define pp_ftsuid		Perl_pp_ftsuid
#define Perl_pp_ftsvtx		CPerlObj::Perl_pp_ftsvtx
#define pp_ftsvtx		Perl_pp_ftsvtx
#define Perl_pp_fttext		CPerlObj::Perl_pp_fttext
#define pp_fttext		Perl_pp_fttext
#define Perl_pp_fttty		CPerlObj::Perl_pp_fttty
#define pp_fttty		Perl_pp_fttty
#define Perl_pp_ftzero		CPerlObj::Perl_pp_ftzero
#define pp_ftzero		Perl_pp_ftzero
#define Perl_pp_ge		CPerlObj::Perl_pp_ge
#define pp_ge			Perl_pp_ge
#define Perl_pp_gelem		CPerlObj::Perl_pp_gelem
#define pp_gelem		Perl_pp_gelem
#define Perl_pp_getc		CPerlObj::Perl_pp_getc
#define pp_getc			Perl_pp_getc
#define Perl_pp_getlogin	CPerlObj::Perl_pp_getlogin
#define pp_getlogin		Perl_pp_getlogin
#define Perl_pp_getpeername	CPerlObj::Perl_pp_getpeername
#define pp_getpeername		Perl_pp_getpeername
#define Perl_pp_getpgrp		CPerlObj::Perl_pp_getpgrp
#define pp_getpgrp		Perl_pp_getpgrp
#define Perl_pp_getppid		CPerlObj::Perl_pp_getppid
#define pp_getppid		Perl_pp_getppid
#define Perl_pp_getpriority	CPerlObj::Perl_pp_getpriority
#define pp_getpriority		Perl_pp_getpriority
#define Perl_pp_getsockname	CPerlObj::Perl_pp_getsockname
#define pp_getsockname		Perl_pp_getsockname
#define Perl_pp_ggrent		CPerlObj::Perl_pp_ggrent
#define pp_ggrent		Perl_pp_ggrent
#define Perl_pp_ggrgid		CPerlObj::Perl_pp_ggrgid
#define pp_ggrgid		Perl_pp_ggrgid
#define Perl_pp_ggrnam		CPerlObj::Perl_pp_ggrnam
#define pp_ggrnam		Perl_pp_ggrnam
#define Perl_pp_ghbyaddr	CPerlObj::Perl_pp_ghbyaddr
#define pp_ghbyaddr		Perl_pp_ghbyaddr
#define Perl_pp_ghbyname	CPerlObj::Perl_pp_ghbyname
#define pp_ghbyname		Perl_pp_ghbyname
#define Perl_pp_ghostent	CPerlObj::Perl_pp_ghostent
#define pp_ghostent		Perl_pp_ghostent
#define Perl_pp_glob		CPerlObj::Perl_pp_glob
#define pp_glob			Perl_pp_glob
#define Perl_pp_gmtime		CPerlObj::Perl_pp_gmtime
#define pp_gmtime		Perl_pp_gmtime
#define Perl_pp_gnbyaddr	CPerlObj::Perl_pp_gnbyaddr
#define pp_gnbyaddr		Perl_pp_gnbyaddr
#define Perl_pp_gnbyname	CPerlObj::Perl_pp_gnbyname
#define pp_gnbyname		Perl_pp_gnbyname
#define Perl_pp_gnetent		CPerlObj::Perl_pp_gnetent
#define pp_gnetent		Perl_pp_gnetent
#define Perl_pp_goto		CPerlObj::Perl_pp_goto
#define pp_goto			Perl_pp_goto
#define Perl_pp_gpbyname	CPerlObj::Perl_pp_gpbyname
#define pp_gpbyname		Perl_pp_gpbyname
#define Perl_pp_gpbynumber	CPerlObj::Perl_pp_gpbynumber
#define pp_gpbynumber		Perl_pp_gpbynumber
#define Perl_pp_gprotoent	CPerlObj::Perl_pp_gprotoent
#define pp_gprotoent		Perl_pp_gprotoent
#define Perl_pp_gpwent		CPerlObj::Perl_pp_gpwent
#define pp_gpwent		Perl_pp_gpwent
#define Perl_pp_gpwnam		CPerlObj::Perl_pp_gpwnam
#define pp_gpwnam		Perl_pp_gpwnam
#define Perl_pp_gpwuid		CPerlObj::Perl_pp_gpwuid
#define pp_gpwuid		Perl_pp_gpwuid
#define Perl_pp_grepstart	CPerlObj::Perl_pp_grepstart
#define pp_grepstart		Perl_pp_grepstart
#define Perl_pp_grepwhile	CPerlObj::Perl_pp_grepwhile
#define pp_grepwhile		Perl_pp_grepwhile
#define Perl_pp_gsbyname	CPerlObj::Perl_pp_gsbyname
#define pp_gsbyname		Perl_pp_gsbyname
#define Perl_pp_gsbyport	CPerlObj::Perl_pp_gsbyport
#define pp_gsbyport		Perl_pp_gsbyport
#define Perl_pp_gservent	CPerlObj::Perl_pp_gservent
#define pp_gservent		Perl_pp_gservent
#define Perl_pp_gsockopt	CPerlObj::Perl_pp_gsockopt
#define pp_gsockopt		Perl_pp_gsockopt
#define Perl_pp_gt		CPerlObj::Perl_pp_gt
#define pp_gt			Perl_pp_gt
#define Perl_pp_gv		CPerlObj::Perl_pp_gv
#define pp_gv			Perl_pp_gv
#define Perl_pp_gvsv		CPerlObj::Perl_pp_gvsv
#define pp_gvsv			Perl_pp_gvsv
#define Perl_pp_helem		CPerlObj::Perl_pp_helem
#define pp_helem		Perl_pp_helem
#define Perl_pp_hex		CPerlObj::Perl_pp_hex
#define pp_hex			Perl_pp_hex
#define Perl_pp_hslice		CPerlObj::Perl_pp_hslice
#define pp_hslice		Perl_pp_hslice
#define Perl_pp_i_add		CPerlObj::Perl_pp_i_add
#define pp_i_add		Perl_pp_i_add
#define Perl_pp_i_divide	CPerlObj::Perl_pp_i_divide
#define pp_i_divide		Perl_pp_i_divide
#define Perl_pp_i_eq		CPerlObj::Perl_pp_i_eq
#define pp_i_eq			Perl_pp_i_eq
#define Perl_pp_i_ge		CPerlObj::Perl_pp_i_ge
#define pp_i_ge			Perl_pp_i_ge
#define Perl_pp_i_gt		CPerlObj::Perl_pp_i_gt
#define pp_i_gt			Perl_pp_i_gt
#define Perl_pp_i_le		CPerlObj::Perl_pp_i_le
#define pp_i_le			Perl_pp_i_le
#define Perl_pp_i_lt		CPerlObj::Perl_pp_i_lt
#define pp_i_lt			Perl_pp_i_lt
#define Perl_pp_i_modulo	CPerlObj::Perl_pp_i_modulo
#define pp_i_modulo		Perl_pp_i_modulo
#define Perl_pp_i_multiply	CPerlObj::Perl_pp_i_multiply
#define pp_i_multiply		Perl_pp_i_multiply
#define Perl_pp_i_ncmp		CPerlObj::Perl_pp_i_ncmp
#define pp_i_ncmp		Perl_pp_i_ncmp
#define Perl_pp_i_ne		CPerlObj::Perl_pp_i_ne
#define pp_i_ne			Perl_pp_i_ne
#define Perl_pp_i_negate	CPerlObj::Perl_pp_i_negate
#define pp_i_negate		Perl_pp_i_negate
#define Perl_pp_i_subtract	CPerlObj::Perl_pp_i_subtract
#define pp_i_subtract		Perl_pp_i_subtract
#define Perl_pp_index		CPerlObj::Perl_pp_index
#define pp_index		Perl_pp_index
#define Perl_pp_int		CPerlObj::Perl_pp_int
#define pp_int			Perl_pp_int
#define Perl_pp_ioctl		CPerlObj::Perl_pp_ioctl
#define pp_ioctl		Perl_pp_ioctl
#define Perl_pp_iter		CPerlObj::Perl_pp_iter
#define pp_iter			Perl_pp_iter
#define Perl_pp_join		CPerlObj::Perl_pp_join
#define pp_join			Perl_pp_join
#define Perl_pp_keys		CPerlObj::Perl_pp_keys
#define pp_keys			Perl_pp_keys
#define Perl_pp_kill		CPerlObj::Perl_pp_kill
#define pp_kill			Perl_pp_kill
#define Perl_pp_last		CPerlObj::Perl_pp_last
#define pp_last			Perl_pp_last
#define Perl_pp_lc		CPerlObj::Perl_pp_lc
#define pp_lc			Perl_pp_lc
#define Perl_pp_lcfirst		CPerlObj::Perl_pp_lcfirst
#define pp_lcfirst		Perl_pp_lcfirst
#define Perl_pp_le		CPerlObj::Perl_pp_le
#define pp_le			Perl_pp_le
#define Perl_pp_leave		CPerlObj::Perl_pp_leave
#define pp_leave		Perl_pp_leave
#define Perl_pp_leaveeval	CPerlObj::Perl_pp_leaveeval
#define pp_leaveeval		Perl_pp_leaveeval
#define Perl_pp_leaveloop	CPerlObj::Perl_pp_leaveloop
#define pp_leaveloop		Perl_pp_leaveloop
#define Perl_pp_leavesub	CPerlObj::Perl_pp_leavesub
#define pp_leavesub		Perl_pp_leavesub
#define Perl_pp_leavesublv	CPerlObj::Perl_pp_leavesublv
#define pp_leavesublv		Perl_pp_leavesublv
#define Perl_pp_leavetry	CPerlObj::Perl_pp_leavetry
#define pp_leavetry		Perl_pp_leavetry
#define Perl_pp_leavewrite	CPerlObj::Perl_pp_leavewrite
#define pp_leavewrite		Perl_pp_leavewrite
#define Perl_pp_left_shift	CPerlObj::Perl_pp_left_shift
#define pp_left_shift		Perl_pp_left_shift
#define Perl_pp_length		CPerlObj::Perl_pp_length
#define pp_length		Perl_pp_length
#define Perl_pp_lineseq		CPerlObj::Perl_pp_lineseq
#define pp_lineseq		Perl_pp_lineseq
#define Perl_pp_link		CPerlObj::Perl_pp_link
#define pp_link			Perl_pp_link
#define Perl_pp_list		CPerlObj::Perl_pp_list
#define pp_list			Perl_pp_list
#define Perl_pp_listen		CPerlObj::Perl_pp_listen
#define pp_listen		Perl_pp_listen
#define Perl_pp_localtime	CPerlObj::Perl_pp_localtime
#define pp_localtime		Perl_pp_localtime
#define Perl_pp_lock		CPerlObj::Perl_pp_lock
#define pp_lock			Perl_pp_lock
#define Perl_pp_log		CPerlObj::Perl_pp_log
#define pp_log			Perl_pp_log
#define Perl_pp_lslice		CPerlObj::Perl_pp_lslice
#define pp_lslice		Perl_pp_lslice
#define Perl_pp_lstat		CPerlObj::Perl_pp_lstat
#define pp_lstat		Perl_pp_lstat
#define Perl_pp_lt		CPerlObj::Perl_pp_lt
#define pp_lt			Perl_pp_lt
#define Perl_pp_mapstart	CPerlObj::Perl_pp_mapstart
#define pp_mapstart		Perl_pp_mapstart
#define Perl_pp_mapwhile	CPerlObj::Perl_pp_mapwhile
#define pp_mapwhile		Perl_pp_mapwhile
#define Perl_pp_match		CPerlObj::Perl_pp_match
#define pp_match		Perl_pp_match
#define Perl_pp_method		CPerlObj::Perl_pp_method
#define pp_method		Perl_pp_method
#define Perl_pp_method_named	CPerlObj::Perl_pp_method_named
#define pp_method_named		Perl_pp_method_named
#define Perl_pp_mkdir		CPerlObj::Perl_pp_mkdir
#define pp_mkdir		Perl_pp_mkdir
#define Perl_pp_modulo		CPerlObj::Perl_pp_modulo
#define pp_modulo		Perl_pp_modulo
#define Perl_pp_msgctl		CPerlObj::Perl_pp_msgctl
#define pp_msgctl		Perl_pp_msgctl
#define Perl_pp_msgget		CPerlObj::Perl_pp_msgget
#define pp_msgget		Perl_pp_msgget
#define Perl_pp_msgrcv		CPerlObj::Perl_pp_msgrcv
#define pp_msgrcv		Perl_pp_msgrcv
#define Perl_pp_msgsnd		CPerlObj::Perl_pp_msgsnd
#define pp_msgsnd		Perl_pp_msgsnd
#define Perl_pp_multiply	CPerlObj::Perl_pp_multiply
#define pp_multiply		Perl_pp_multiply
#define Perl_pp_ncmp		CPerlObj::Perl_pp_ncmp
#define pp_ncmp			Perl_pp_ncmp
#define Perl_pp_ne		CPerlObj::Perl_pp_ne
#define pp_ne			Perl_pp_ne
#define Perl_pp_negate		CPerlObj::Perl_pp_negate
#define pp_negate		Perl_pp_negate
#define Perl_pp_next		CPerlObj::Perl_pp_next
#define pp_next			Perl_pp_next
#define Perl_pp_nextstate	CPerlObj::Perl_pp_nextstate
#define pp_nextstate		Perl_pp_nextstate
#define Perl_pp_not		CPerlObj::Perl_pp_not
#define pp_not			Perl_pp_not
#define Perl_pp_null		CPerlObj::Perl_pp_null
#define pp_null			Perl_pp_null
#define Perl_pp_oct		CPerlObj::Perl_pp_oct
#define pp_oct			Perl_pp_oct
#define Perl_pp_open		CPerlObj::Perl_pp_open
#define pp_open			Perl_pp_open
#define Perl_pp_open_dir	CPerlObj::Perl_pp_open_dir
#define pp_open_dir		Perl_pp_open_dir
#define Perl_pp_or		CPerlObj::Perl_pp_or
#define pp_or			Perl_pp_or
#define Perl_pp_orassign	CPerlObj::Perl_pp_orassign
#define pp_orassign		Perl_pp_orassign
#define Perl_pp_ord		CPerlObj::Perl_pp_ord
#define pp_ord			Perl_pp_ord
#define Perl_pp_pack		CPerlObj::Perl_pp_pack
#define pp_pack			Perl_pp_pack
#define Perl_pp_padany		CPerlObj::Perl_pp_padany
#define pp_padany		Perl_pp_padany
#define Perl_pp_padav		CPerlObj::Perl_pp_padav
#define pp_padav		Perl_pp_padav
#define Perl_pp_padhv		CPerlObj::Perl_pp_padhv
#define pp_padhv		Perl_pp_padhv
#define Perl_pp_padsv		CPerlObj::Perl_pp_padsv
#define pp_padsv		Perl_pp_padsv
#define Perl_pp_pipe_op		CPerlObj::Perl_pp_pipe_op
#define pp_pipe_op		Perl_pp_pipe_op
#define Perl_pp_pop		CPerlObj::Perl_pp_pop
#define pp_pop			Perl_pp_pop
#define Perl_pp_pos		CPerlObj::Perl_pp_pos
#define pp_pos			Perl_pp_pos
#define Perl_pp_postdec		CPerlObj::Perl_pp_postdec
#define pp_postdec		Perl_pp_postdec
#define Perl_pp_postinc		CPerlObj::Perl_pp_postinc
#define pp_postinc		Perl_pp_postinc
#define Perl_pp_pow		CPerlObj::Perl_pp_pow
#define pp_pow			Perl_pp_pow
#define Perl_pp_predec		CPerlObj::Perl_pp_predec
#define pp_predec		Perl_pp_predec
#define Perl_pp_preinc		CPerlObj::Perl_pp_preinc
#define pp_preinc		Perl_pp_preinc
#define Perl_pp_print		CPerlObj::Perl_pp_print
#define pp_print		Perl_pp_print
#define Perl_pp_prototype	CPerlObj::Perl_pp_prototype
#define pp_prototype		Perl_pp_prototype
#define Perl_pp_prtf		CPerlObj::Perl_pp_prtf
#define pp_prtf			Perl_pp_prtf
#define Perl_pp_push		CPerlObj::Perl_pp_push
#define pp_push			Perl_pp_push
#define Perl_pp_pushmark	CPerlObj::Perl_pp_pushmark
#define pp_pushmark		Perl_pp_pushmark
#define Perl_pp_pushre		CPerlObj::Perl_pp_pushre
#define pp_pushre		Perl_pp_pushre
#define Perl_pp_qr		CPerlObj::Perl_pp_qr
#define pp_qr			Perl_pp_qr
#define Perl_pp_quotemeta	CPerlObj::Perl_pp_quotemeta
#define pp_quotemeta		Perl_pp_quotemeta
#define Perl_pp_rand		CPerlObj::Perl_pp_rand
#define pp_rand			Perl_pp_rand
#define Perl_pp_range		CPerlObj::Perl_pp_range
#define pp_range		Perl_pp_range
#define Perl_pp_rcatline	CPerlObj::Perl_pp_rcatline
#define pp_rcatline		Perl_pp_rcatline
#define Perl_pp_read		CPerlObj::Perl_pp_read
#define pp_read			Perl_pp_read
#define Perl_pp_readdir		CPerlObj::Perl_pp_readdir
#define pp_readdir		Perl_pp_readdir
#define Perl_pp_readline	CPerlObj::Perl_pp_readline
#define pp_readline		Perl_pp_readline
#define Perl_pp_readlink	CPerlObj::Perl_pp_readlink
#define pp_readlink		Perl_pp_readlink
#define Perl_pp_recv		CPerlObj::Perl_pp_recv
#define pp_recv			Perl_pp_recv
#define Perl_pp_redo		CPerlObj::Perl_pp_redo
#define pp_redo			Perl_pp_redo
#define Perl_pp_ref		CPerlObj::Perl_pp_ref
#define pp_ref			Perl_pp_ref
#define Perl_pp_refgen		CPerlObj::Perl_pp_refgen
#define pp_refgen		Perl_pp_refgen
#define Perl_pp_regcmaybe	CPerlObj::Perl_pp_regcmaybe
#define pp_regcmaybe		Perl_pp_regcmaybe
#define Perl_pp_regcomp		CPerlObj::Perl_pp_regcomp
#define pp_regcomp		Perl_pp_regcomp
#define Perl_pp_regcreset	CPerlObj::Perl_pp_regcreset
#define pp_regcreset		Perl_pp_regcreset
#define Perl_pp_rename		CPerlObj::Perl_pp_rename
#define pp_rename		Perl_pp_rename
#define Perl_pp_repeat		CPerlObj::Perl_pp_repeat
#define pp_repeat		Perl_pp_repeat
#define Perl_pp_require		CPerlObj::Perl_pp_require
#define pp_require		Perl_pp_require
#define Perl_pp_reset		CPerlObj::Perl_pp_reset
#define pp_reset		Perl_pp_reset
#define Perl_pp_return		CPerlObj::Perl_pp_return
#define pp_return		Perl_pp_return
#define Perl_pp_reverse		CPerlObj::Perl_pp_reverse
#define pp_reverse		Perl_pp_reverse
#define Perl_pp_rewinddir	CPerlObj::Perl_pp_rewinddir
#define pp_rewinddir		Perl_pp_rewinddir
#define Perl_pp_right_shift	CPerlObj::Perl_pp_right_shift
#define pp_right_shift		Perl_pp_right_shift
#define Perl_pp_rindex		CPerlObj::Perl_pp_rindex
#define pp_rindex		Perl_pp_rindex
#define Perl_pp_rmdir		CPerlObj::Perl_pp_rmdir
#define pp_rmdir		Perl_pp_rmdir
#define Perl_pp_rv2av		CPerlObj::Perl_pp_rv2av
#define pp_rv2av		Perl_pp_rv2av
#define Perl_pp_rv2cv		CPerlObj::Perl_pp_rv2cv
#define pp_rv2cv		Perl_pp_rv2cv
#define Perl_pp_rv2gv		CPerlObj::Perl_pp_rv2gv
#define pp_rv2gv		Perl_pp_rv2gv
#define Perl_pp_rv2hv		CPerlObj::Perl_pp_rv2hv
#define pp_rv2hv		Perl_pp_rv2hv
#define Perl_pp_rv2sv		CPerlObj::Perl_pp_rv2sv
#define pp_rv2sv		Perl_pp_rv2sv
#define Perl_pp_sassign		CPerlObj::Perl_pp_sassign
#define pp_sassign		Perl_pp_sassign
#define Perl_pp_scalar		CPerlObj::Perl_pp_scalar
#define pp_scalar		Perl_pp_scalar
#define Perl_pp_schomp		CPerlObj::Perl_pp_schomp
#define pp_schomp		Perl_pp_schomp
#define Perl_pp_schop		CPerlObj::Perl_pp_schop
#define pp_schop		Perl_pp_schop
#define Perl_pp_scmp		CPerlObj::Perl_pp_scmp
#define pp_scmp			Perl_pp_scmp
#define Perl_pp_scope		CPerlObj::Perl_pp_scope
#define pp_scope		Perl_pp_scope
#define Perl_pp_seek		CPerlObj::Perl_pp_seek
#define pp_seek			Perl_pp_seek
#define Perl_pp_seekdir		CPerlObj::Perl_pp_seekdir
#define pp_seekdir		Perl_pp_seekdir
#define Perl_pp_select		CPerlObj::Perl_pp_select
#define pp_select		Perl_pp_select
#define Perl_pp_semctl		CPerlObj::Perl_pp_semctl
#define pp_semctl		Perl_pp_semctl
#define Perl_pp_semget		CPerlObj::Perl_pp_semget
#define pp_semget		Perl_pp_semget
#define Perl_pp_semop		CPerlObj::Perl_pp_semop
#define pp_semop		Perl_pp_semop
#define Perl_pp_send		CPerlObj::Perl_pp_send
#define pp_send			Perl_pp_send
#define Perl_pp_seq		CPerlObj::Perl_pp_seq
#define pp_seq			Perl_pp_seq
#define Perl_pp_setpgrp		CPerlObj::Perl_pp_setpgrp
#define pp_setpgrp		Perl_pp_setpgrp
#define Perl_pp_setpriority	CPerlObj::Perl_pp_setpriority
#define pp_setpriority		Perl_pp_setpriority
#define Perl_pp_setstate	CPerlObj::Perl_pp_setstate
#define pp_setstate		Perl_pp_setstate
#define Perl_pp_sge		CPerlObj::Perl_pp_sge
#define pp_sge			Perl_pp_sge
#define Perl_pp_sgrent		CPerlObj::Perl_pp_sgrent
#define pp_sgrent		Perl_pp_sgrent
#define Perl_pp_sgt		CPerlObj::Perl_pp_sgt
#define pp_sgt			Perl_pp_sgt
#define Perl_pp_shift		CPerlObj::Perl_pp_shift
#define pp_shift		Perl_pp_shift
#define Perl_pp_shmctl		CPerlObj::Perl_pp_shmctl
#define pp_shmctl		Perl_pp_shmctl
#define Perl_pp_shmget		CPerlObj::Perl_pp_shmget
#define pp_shmget		Perl_pp_shmget
#define Perl_pp_shmread		CPerlObj::Perl_pp_shmread
#define pp_shmread		Perl_pp_shmread
#define Perl_pp_shmwrite	CPerlObj::Perl_pp_shmwrite
#define pp_shmwrite		Perl_pp_shmwrite
#define Perl_pp_shostent	CPerlObj::Perl_pp_shostent
#define pp_shostent		Perl_pp_shostent
#define Perl_pp_shutdown	CPerlObj::Perl_pp_shutdown
#define pp_shutdown		Perl_pp_shutdown
#define Perl_pp_sin		CPerlObj::Perl_pp_sin
#define pp_sin			Perl_pp_sin
#define Perl_pp_sle		CPerlObj::Perl_pp_sle
#define pp_sle			Perl_pp_sle
#define Perl_pp_sleep		CPerlObj::Perl_pp_sleep
#define pp_sleep		Perl_pp_sleep
#define Perl_pp_slt		CPerlObj::Perl_pp_slt
#define pp_slt			Perl_pp_slt
#define Perl_pp_sne		CPerlObj::Perl_pp_sne
#define pp_sne			Perl_pp_sne
#define Perl_pp_snetent		CPerlObj::Perl_pp_snetent
#define pp_snetent		Perl_pp_snetent
#define Perl_pp_socket		CPerlObj::Perl_pp_socket
#define pp_socket		Perl_pp_socket
#define Perl_pp_sockpair	CPerlObj::Perl_pp_sockpair
#define pp_sockpair		Perl_pp_sockpair
#define Perl_pp_sort		CPerlObj::Perl_pp_sort
#define pp_sort			Perl_pp_sort
#define Perl_pp_splice		CPerlObj::Perl_pp_splice
#define pp_splice		Perl_pp_splice
#define Perl_pp_split		CPerlObj::Perl_pp_split
#define pp_split		Perl_pp_split
#define Perl_pp_sprintf		CPerlObj::Perl_pp_sprintf
#define pp_sprintf		Perl_pp_sprintf
#define Perl_pp_sprotoent	CPerlObj::Perl_pp_sprotoent
#define pp_sprotoent		Perl_pp_sprotoent
#define Perl_pp_spwent		CPerlObj::Perl_pp_spwent
#define pp_spwent		Perl_pp_spwent
#define Perl_pp_sqrt		CPerlObj::Perl_pp_sqrt
#define pp_sqrt			Perl_pp_sqrt
#define Perl_pp_srand		CPerlObj::Perl_pp_srand
#define pp_srand		Perl_pp_srand
#define Perl_pp_srefgen		CPerlObj::Perl_pp_srefgen
#define pp_srefgen		Perl_pp_srefgen
#define Perl_pp_sselect		CPerlObj::Perl_pp_sselect
#define pp_sselect		Perl_pp_sselect
#define Perl_pp_sservent	CPerlObj::Perl_pp_sservent
#define pp_sservent		Perl_pp_sservent
#define Perl_pp_ssockopt	CPerlObj::Perl_pp_ssockopt
#define pp_ssockopt		Perl_pp_ssockopt
#define Perl_pp_stat		CPerlObj::Perl_pp_stat
#define pp_stat			Perl_pp_stat
#define Perl_pp_stringify	CPerlObj::Perl_pp_stringify
#define pp_stringify		Perl_pp_stringify
#define Perl_pp_stub		CPerlObj::Perl_pp_stub
#define pp_stub			Perl_pp_stub
#define Perl_pp_study		CPerlObj::Perl_pp_study
#define pp_study		Perl_pp_study
#define Perl_pp_subst		CPerlObj::Perl_pp_subst
#define pp_subst		Perl_pp_subst
#define Perl_pp_substcont	CPerlObj::Perl_pp_substcont
#define pp_substcont		Perl_pp_substcont
#define Perl_pp_substr		CPerlObj::Perl_pp_substr
#define pp_substr		Perl_pp_substr
#define Perl_pp_subtract	CPerlObj::Perl_pp_subtract
#define pp_subtract		Perl_pp_subtract
#define Perl_pp_symlink		CPerlObj::Perl_pp_symlink
#define pp_symlink		Perl_pp_symlink
#define Perl_pp_syscall		CPerlObj::Perl_pp_syscall
#define pp_syscall		Perl_pp_syscall
#define Perl_pp_sysopen		CPerlObj::Perl_pp_sysopen
#define pp_sysopen		Perl_pp_sysopen
#define Perl_pp_sysread		CPerlObj::Perl_pp_sysread
#define pp_sysread		Perl_pp_sysread
#define Perl_pp_sysseek		CPerlObj::Perl_pp_sysseek
#define pp_sysseek		Perl_pp_sysseek
#define Perl_pp_system		CPerlObj::Perl_pp_system
#define pp_system		Perl_pp_system
#define Perl_pp_syswrite	CPerlObj::Perl_pp_syswrite
#define pp_syswrite		Perl_pp_syswrite
#define Perl_pp_tell		CPerlObj::Perl_pp_tell
#define pp_tell			Perl_pp_tell
#define Perl_pp_telldir		CPerlObj::Perl_pp_telldir
#define pp_telldir		Perl_pp_telldir
#define Perl_pp_threadsv	CPerlObj::Perl_pp_threadsv
#define pp_threadsv		Perl_pp_threadsv
#define Perl_pp_tie		CPerlObj::Perl_pp_tie
#define pp_tie			Perl_pp_tie
#define Perl_pp_tied		CPerlObj::Perl_pp_tied
#define pp_tied			Perl_pp_tied
#define Perl_pp_time		CPerlObj::Perl_pp_time
#define pp_time			Perl_pp_time
#define Perl_pp_tms		CPerlObj::Perl_pp_tms
#define pp_tms			Perl_pp_tms
#define Perl_pp_trans		CPerlObj::Perl_pp_trans
#define pp_trans		Perl_pp_trans
#define Perl_pp_truncate	CPerlObj::Perl_pp_truncate
#define pp_truncate		Perl_pp_truncate
#define Perl_pp_uc		CPerlObj::Perl_pp_uc
#define pp_uc			Perl_pp_uc
#define Perl_pp_ucfirst		CPerlObj::Perl_pp_ucfirst
#define pp_ucfirst		Perl_pp_ucfirst
#define Perl_pp_umask		CPerlObj::Perl_pp_umask
#define pp_umask		Perl_pp_umask
#define Perl_pp_undef		CPerlObj::Perl_pp_undef
#define pp_undef		Perl_pp_undef
#define Perl_pp_unlink		CPerlObj::Perl_pp_unlink
#define pp_unlink		Perl_pp_unlink
#define Perl_pp_unpack		CPerlObj::Perl_pp_unpack
#define pp_unpack		Perl_pp_unpack
#define Perl_pp_unshift		CPerlObj::Perl_pp_unshift
#define pp_unshift		Perl_pp_unshift
#define Perl_pp_unstack		CPerlObj::Perl_pp_unstack
#define pp_unstack		Perl_pp_unstack
#define Perl_pp_untie		CPerlObj::Perl_pp_untie
#define pp_untie		Perl_pp_untie
#define Perl_pp_utime		CPerlObj::Perl_pp_utime
#define pp_utime		Perl_pp_utime
#define Perl_pp_values		CPerlObj::Perl_pp_values
#define pp_values		Perl_pp_values
#define Perl_pp_vec		CPerlObj::Perl_pp_vec
#define pp_vec			Perl_pp_vec
#define Perl_pp_wait		CPerlObj::Perl_pp_wait
#define pp_wait			Perl_pp_wait
#define Perl_pp_waitpid		CPerlObj::Perl_pp_waitpid
#define pp_waitpid		Perl_pp_waitpid
#define Perl_pp_wantarray	CPerlObj::Perl_pp_wantarray
#define pp_wantarray		Perl_pp_wantarray
#define Perl_pp_warn		CPerlObj::Perl_pp_warn
#define pp_warn			Perl_pp_warn
#define Perl_pp_xor		CPerlObj::Perl_pp_xor
#define pp_xor			Perl_pp_xor

#endif	/* PERL_OBJECT */

/* Compatibility stubs.  Compile extensions with -DPERL_NOCOMPAT to
   disable them.
 */

#if !defined(PERL_CORE)
#  define sv_setptrobj(rv,ptr,name)	sv_setref_iv(rv,name,PTR2IV(ptr))
#  define sv_setptrref(rv,ptr)		sv_setref_iv(rv,Nullch,PTR2IV(ptr))
#endif

#if !defined(PERL_CORE) && !defined(PERL_NOCOMPAT) && !defined(PERL_BINCOMPAT_5005)

/* Compatibility for various misnamed functions.  All functions
   in the API that begin with "perl_" (not "Perl_") take an explicit
   interpreter context pointer.
   The following are not like that, but since they had a "perl_"
   prefix in previous versions, we provide compatibility macros.
 */
#  define perl_atexit(a,b)		call_atexit(a,b)
#  define perl_call_argv(a,b,c)		call_argv(a,b,c)
#  define perl_call_pv(a,b)		call_pv(a,b)
#  define perl_call_method(a,b)		call_method(a,b)
#  define perl_call_sv(a,b)		call_sv(a,b)
#  define perl_eval_sv(a,b)		eval_sv(a,b)
#  define perl_eval_pv(a,b)		eval_pv(a,b)
#  define perl_require_pv(a)		require_pv(a)
#  define perl_get_sv(a,b)		get_sv(a,b)
#  define perl_get_av(a,b)		get_av(a,b)
#  define perl_get_hv(a,b)		get_hv(a,b)
#  define perl_get_cv(a,b)		get_cv(a,b)
#  define perl_init_i18nl10n(a)		init_i18nl10n(a)
#  define perl_init_i18nl14n(a)		init_i18nl14n(a)
#  define perl_new_ctype(a)		new_ctype(a)
#  define perl_new_collate(a)		new_collate(a)
#  define perl_new_numeric(a)		new_numeric(a)

/* varargs functions can't be handled with CPP macros. :-(
   This provides a set of compatibility functions that don't take
   an extra argument but grab the context pointer using the macro
   dTHX.
 */
#if defined(PERL_IMPLICIT_CONTEXT) && !defined(PERL_OBJECT)
#  define croak				Perl_croak_nocontext
#  define deb				Perl_deb_nocontext
#  define die				Perl_die_nocontext
#  define form				Perl_form_nocontext
#  define load_module			Perl_load_module_nocontext
#  define mess				Perl_mess_nocontext
#  define newSVpvf			Perl_newSVpvf_nocontext
#  define sv_catpvf			Perl_sv_catpvf_nocontext
#  define sv_setpvf			Perl_sv_setpvf_nocontext
#  define warn				Perl_warn_nocontext
#  define warner			Perl_warner_nocontext
#  define sv_catpvf_mg			Perl_sv_catpvf_mg_nocontext
#  define sv_setpvf_mg			Perl_sv_setpvf_mg_nocontext
#endif

#endif /* !defined(PERL_CORE) && !defined(PERL_NOCOMPAT) */

#if !defined(PERL_IMPLICIT_CONTEXT)
/* undefined symbols, point them back at the usual ones */
#  define Perl_croak_nocontext		Perl_croak
#  define Perl_die_nocontext		Perl_die
#  define Perl_deb_nocontext		Perl_deb
#  define Perl_form_nocontext		Perl_form
#  define Perl_load_module_nocontext	Perl_load_module
#  define Perl_mess_nocontext		Perl_mess
#  define Perl_newSVpvf_nocontext	Perl_newSVpvf
#  define Perl_sv_catpvf_nocontext	Perl_sv_catpvf
#  define Perl_sv_setpvf_nocontext	Perl_sv_setpvf
#  define Perl_warn_nocontext		Perl_warn
#  define Perl_warner_nocontext		Perl_warner
#  define Perl_sv_catpvf_mg_nocontext	Perl_sv_catpvf_mg
#  define Perl_sv_setpvf_mg_nocontext	Perl_sv_setpvf_mg
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\dosish.h ===
#define ABORT() abort();

#ifndef SH_PATH
#define SH_PATH "/bin/sh"
#endif

#ifdef DJGPP
#  define BIT_BUCKET "nul"
#  define OP_BINARY O_BINARY
#  define PERL_SYS_INIT(c,v) Perl_DJGPP_init(c,v)
#  define init_os_extras Perl_init_os_extras
#  include <signal.h>
#  define HAS_UTIME
#  define HAS_KILL
   char *djgpp_pathexp (const char*);
#  if (DJGPP==2 && DJGPP_MINOR < 2)
#    define NO_LOCALECONV_MON_THOUSANDS_SEP
#  endif
#  ifdef USE_THREADS
#    define OLD_PTHREADS_API
#  endif
#  define PERL_FS_VER_FMT	"%d_%d_%d"
#else	/* DJGPP */
#  ifdef WIN32
#    define PERL_SYS_INIT(c,v)	Perl_win32_init(c,v)
#    define BIT_BUCKET "nul"
#  else
#    define PERL_SYS_INIT(c,v)
#    define BIT_BUCKET "\\dev\\nul" /* "wanna be like, umm, Newlined, or somethin?" */
#  endif
#endif	/* DJGPP */

#define PERL_SYS_TERM() OP_REFCNT_TERM; MALLOC_TERM
#define dXSUB_SYS

/*
 * 5.003_07 and earlier keyed on #ifdef MSDOS for determining if we were 
 * running on DOS, *and* if we had to cope with 16 bit memory addressing 
 * constraints, *and* we need to have memory allocated as unsigned long.
 *
 * with the advent of *real* compilers for DOS, they are not locked together.
 * MSDOS means "I am running on MSDOS". HAS_64K_LIMIT means "I have 
 * 16 bit memory addressing constraints".
 *
 * if you need the last, try #DEFINE MEM_SIZE unsigned long.
 */
#ifdef MSDOS
 #ifndef DJGPP
  #define HAS_64K_LIMIT
 #endif
#endif

/* USEMYBINMODE
 *	This symbol, if defined, indicates that the program should
 *	use the routine my_binmode(FILE *fp, char iotype, int mode) to insure
 *	that a file is in "binary" mode -- that is, that no translation
 *	of bytes occurs on read or write operations.
 */
#undef USEMYBINMODE

/* Stat_t:
 *	This symbol holds the type used to declare buffers for information
 *	returned by stat().  It's usually just struct stat.  It may be necessary
 *	to include <sys/stat.h> and <sys/types.h> to get any typedef'ed
 *	information.
 */
#define Stat_t struct stat

/* USE_STAT_RDEV:
 *	This symbol is defined if this system has a stat structure declaring
 *	st_rdev
 */
#define USE_STAT_RDEV 	/**/

/* ACME_MESS:
 *	This symbol, if defined, indicates that error messages should be 
 *	should be generated in a format that allows the use of the Acme
 *	GUI/editor's autofind feature.
 */
#undef ACME_MESS	/**/

/* ALTERNATE_SHEBANG:
 *	This symbol, if defined, contains a "magic" string which may be used
 *	as the first line of a Perl program designed to be executed directly
 *	by name, instead of the standard Unix #!.  If ALTERNATE_SHEBANG
 *	begins with a character other then #, then Perl will only treat
 *	it as a command line if if finds the string "perl" in the first
 *	word; otherwise it's treated as the first line of code in the script.
 *	(IOW, Perl won't hand off to another interpreter via an alternate
 *	shebang sequence that might be legal Perl code.)
 */
/* #define ALTERNATE_SHEBANG "#!" / **/

/*
 * fwrite1() should be a routine with the same calling sequence as fwrite(),
 * but which outputs all of the bytes requested as a single stream (unlike
 * fwrite() itself, which on some systems outputs several distinct records
 * if the number_of_items parameter is >1).
 */
#define fwrite1 fwrite

#define Fstat(fd,bufptr)   fstat((fd),(bufptr))
#ifdef DJGPP
#   define Fflush(fp)      djgpp_fflush(fp)
#else
#   define Fflush(fp)      fflush(fp)
#endif
#define Mkdir(path,mode)   mkdir((path),(mode))

#ifndef WIN32
#  define Stat(fname,bufptr) stat((fname),(bufptr))
#else
#  define HAS_IOCTL
#  define HAS_UTIME
#  define HAS_KILL
#  define HAS_WAIT
#  define HAS_CHOWN
#endif	/* WIN32 */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\form.h ===
/*    form.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#define FF_END		0
#define FF_LINEMARK	1
#define FF_LITERAL	2
#define FF_SKIP		3
#define FF_FETCH	4
#define FF_CHECKNL	5
#define FF_CHECKCHOP	6
#define FF_SPACE	7
#define FF_HALFSPACE	8
#define FF_ITEM		9
#define FF_CHOP		10
#define FF_LINEGLOB	11
#define FF_DECIMAL	12
#define FF_NEWLINE	13
#define FF_BLANK	14
#define FF_MORE		15
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\embedvar.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!! 
   This file is built by embed.pl from data in embed.pl, pp.sym, intrpvar.h,
   perlvars.h and thrdvar.h.  Any changes made here will be lost!
*/

/* (Doing namespace management portably in C is really gross.) */

/*
   The following combinations of MULTIPLICITY, USE_THREADS, PERL_OBJECT
   and PERL_IMPLICIT_CONTEXT are supported:
     1) none
     2) MULTIPLICITY	# supported for compatibility
     3) MULTIPLICITY && PERL_IMPLICIT_CONTEXT
     4) USE_THREADS && PERL_IMPLICIT_CONTEXT
     5) MULTIPLICITY && USE_THREADS && PERL_IMPLICIT_CONTEXT
     6) PERL_OBJECT && PERL_IMPLICIT_CONTEXT

   All other combinations of these flags are errors.

   #3, #4, #5, and #6 are supported directly, while #2 is a special
   case of #3 (supported by redefining vTHX appropriately).
*/

#if defined(MULTIPLICITY)
/* cases 2, 3 and 5 above */

#  if defined(PERL_IMPLICIT_CONTEXT)
#    define vTHX	aTHX
#  else
#    define vTHX	PERL_GET_INTERP
#  endif

#define PL_Sv			(vTHX->TSv)
#define PL_Xpv			(vTHX->TXpv)
#define PL_av_fetch_sv		(vTHX->Tav_fetch_sv)
#define PL_bodytarget		(vTHX->Tbodytarget)
#define PL_bostr		(vTHX->Tbostr)
#define PL_chopset		(vTHX->Tchopset)
#define PL_colors		(vTHX->Tcolors)
#define PL_colorset		(vTHX->Tcolorset)
#define PL_curcop		(vTHX->Tcurcop)
#define PL_curpad		(vTHX->Tcurpad)
#define PL_curpm		(vTHX->Tcurpm)
#define PL_curstack		(vTHX->Tcurstack)
#define PL_curstackinfo		(vTHX->Tcurstackinfo)
#define PL_curstash		(vTHX->Tcurstash)
#define PL_defoutgv		(vTHX->Tdefoutgv)
#define PL_defstash		(vTHX->Tdefstash)
#define PL_delaymagic		(vTHX->Tdelaymagic)
#define PL_dirty		(vTHX->Tdirty)
#define PL_dumpindent		(vTHX->Tdumpindent)
#define PL_efloatbuf		(vTHX->Tefloatbuf)
#define PL_efloatsize		(vTHX->Tefloatsize)
#define PL_errors		(vTHX->Terrors)
#define PL_extralen		(vTHX->Textralen)
#define PL_firstgv		(vTHX->Tfirstgv)
#define PL_formtarget		(vTHX->Tformtarget)
#define PL_hv_fetch_ent_mh	(vTHX->Thv_fetch_ent_mh)
#define PL_hv_fetch_sv		(vTHX->Thv_fetch_sv)
#define PL_in_eval		(vTHX->Tin_eval)
#define PL_last_in_gv		(vTHX->Tlast_in_gv)
#define PL_lastgotoprobe	(vTHX->Tlastgotoprobe)
#define PL_lastscream		(vTHX->Tlastscream)
#define PL_localizing		(vTHX->Tlocalizing)
#define PL_mainstack		(vTHX->Tmainstack)
#define PL_markstack		(vTHX->Tmarkstack)
#define PL_markstack_max	(vTHX->Tmarkstack_max)
#define PL_markstack_ptr	(vTHX->Tmarkstack_ptr)
#define PL_maxscream		(vTHX->Tmaxscream)
#define PL_modcount		(vTHX->Tmodcount)
#define PL_na			(vTHX->Tna)
#define PL_nrs			(vTHX->Tnrs)
#define PL_ofs			(vTHX->Tofs)
#define PL_ofslen		(vTHX->Tofslen)
#define PL_op			(vTHX->Top)
#define PL_opsave		(vTHX->Topsave)
#define PL_protect		(vTHX->Tprotect)
#define PL_reg_call_cc		(vTHX->Treg_call_cc)
#define PL_reg_curpm		(vTHX->Treg_curpm)
#define PL_reg_eval_set		(vTHX->Treg_eval_set)
#define PL_reg_flags		(vTHX->Treg_flags)
#define PL_reg_ganch		(vTHX->Treg_ganch)
#define PL_reg_leftiter		(vTHX->Treg_leftiter)
#define PL_reg_magic		(vTHX->Treg_magic)
#define PL_reg_maxiter		(vTHX->Treg_maxiter)
#define PL_reg_oldcurpm		(vTHX->Treg_oldcurpm)
#define PL_reg_oldpos		(vTHX->Treg_oldpos)
#define PL_reg_oldsaved		(vTHX->Treg_oldsaved)
#define PL_reg_oldsavedlen	(vTHX->Treg_oldsavedlen)
#define PL_reg_poscache		(vTHX->Treg_poscache)
#define PL_reg_poscache_size	(vTHX->Treg_poscache_size)
#define PL_reg_re		(vTHX->Treg_re)
#define PL_reg_start_tmp	(vTHX->Treg_start_tmp)
#define PL_reg_start_tmpl	(vTHX->Treg_start_tmpl)
#define PL_reg_starttry		(vTHX->Treg_starttry)
#define PL_reg_sv		(vTHX->Treg_sv)
#define PL_reg_whilem_seen	(vTHX->Treg_whilem_seen)
#define PL_regbol		(vTHX->Tregbol)
#define PL_regcc		(vTHX->Tregcc)
#define PL_regcode		(vTHX->Tregcode)
#define PL_regcomp_parse	(vTHX->Tregcomp_parse)
#define PL_regcomp_rx		(vTHX->Tregcomp_rx)
#define PL_regcompp		(vTHX->Tregcompp)
#define PL_regdata		(vTHX->Tregdata)
#define PL_regdummy		(vTHX->Tregdummy)
#define PL_regendp		(vTHX->Tregendp)
#define PL_regeol		(vTHX->Tregeol)
#define PL_regexecp		(vTHX->Tregexecp)
#define PL_regflags		(vTHX->Tregflags)
#define PL_regfree		(vTHX->Tregfree)
#define PL_regindent		(vTHX->Tregindent)
#define PL_reginput		(vTHX->Treginput)
#define PL_regint_start		(vTHX->Tregint_start)
#define PL_regint_string	(vTHX->Tregint_string)
#define PL_reginterp_cnt	(vTHX->Treginterp_cnt)
#define PL_reglastparen		(vTHX->Treglastparen)
#define PL_regnarrate		(vTHX->Tregnarrate)
#define PL_regnaughty		(vTHX->Tregnaughty)
#define PL_regnpar		(vTHX->Tregnpar)
#define PL_regprecomp		(vTHX->Tregprecomp)
#define PL_regprev		(vTHX->Tregprev)
#define PL_regprogram		(vTHX->Tregprogram)
#define PL_regsawback		(vTHX->Tregsawback)
#define PL_regseen		(vTHX->Tregseen)
#define PL_regsize		(vTHX->Tregsize)
#define PL_regstartp		(vTHX->Tregstartp)
#define PL_regtill		(vTHX->Tregtill)
#define PL_regxend		(vTHX->Tregxend)
#define PL_restartop		(vTHX->Trestartop)
#define PL_retstack		(vTHX->Tretstack)
#define PL_retstack_ix		(vTHX->Tretstack_ix)
#define PL_retstack_max		(vTHX->Tretstack_max)
#define PL_rs			(vTHX->Trs)
#define PL_savestack		(vTHX->Tsavestack)
#define PL_savestack_ix		(vTHX->Tsavestack_ix)
#define PL_savestack_max	(vTHX->Tsavestack_max)
#define PL_scopestack		(vTHX->Tscopestack)
#define PL_scopestack_ix	(vTHX->Tscopestack_ix)
#define PL_scopestack_max	(vTHX->Tscopestack_max)
#define PL_screamfirst		(vTHX->Tscreamfirst)
#define PL_screamnext		(vTHX->Tscreamnext)
#define PL_secondgv		(vTHX->Tsecondgv)
#define PL_seen_evals		(vTHX->Tseen_evals)
#define PL_seen_zerolen		(vTHX->Tseen_zerolen)
#define PL_sortcop		(vTHX->Tsortcop)
#define PL_sortcxix		(vTHX->Tsortcxix)
#define PL_sortstash		(vTHX->Tsortstash)
#define PL_stack_base		(vTHX->Tstack_base)
#define PL_stack_max		(vTHX->Tstack_max)
#define PL_stack_sp		(vTHX->Tstack_sp)
#define PL_start_env		(vTHX->Tstart_env)
#define PL_statbuf		(vTHX->Tstatbuf)
#define PL_statcache		(vTHX->Tstatcache)
#define PL_statgv		(vTHX->Tstatgv)
#define PL_statname		(vTHX->Tstatname)
#define PL_tainted		(vTHX->Ttainted)
#define PL_timesbuf		(vTHX->Ttimesbuf)
#define PL_tmps_floor		(vTHX->Ttmps_floor)
#define PL_tmps_ix		(vTHX->Ttmps_ix)
#define PL_tmps_max		(vTHX->Ttmps_max)
#define PL_tmps_stack		(vTHX->Ttmps_stack)
#define PL_top_env		(vTHX->Ttop_env)
#define PL_toptarget		(vTHX->Ttoptarget)
#define PL_watchaddr		(vTHX->Twatchaddr)
#define PL_watchok		(vTHX->Twatchok)

#  if defined(PERL_OBJECT)
#    include "error: PERL_OBJECT + MULTIPLICITY don't go together"
#  endif

#  if defined(USE_THREADS)
/* case 5 above */

#define PL_Argv			(PERL_GET_INTERP->IArgv)
#define PL_Cmd			(PERL_GET_INTERP->ICmd)
#define PL_DBcv			(PERL_GET_INTERP->IDBcv)
#define PL_DBgv			(PERL_GET_INTERP->IDBgv)
#define PL_DBline		(PERL_GET_INTERP->IDBline)
#define PL_DBsignal		(PERL_GET_INTERP->IDBsignal)
#define PL_DBsingle		(PERL_GET_INTERP->IDBsingle)
#define PL_DBsub		(PERL_GET_INTERP->IDBsub)
#define PL_DBtrace		(PERL_GET_INTERP->IDBtrace)
#define PL_Dir			(PERL_GET_INTERP->IDir)
#define PL_Env			(PERL_GET_INTERP->IEnv)
#define PL_LIO			(PERL_GET_INTERP->ILIO)
#define PL_Mem			(PERL_GET_INTERP->IMem)
#define PL_MemParse		(PERL_GET_INTERP->IMemParse)
#define PL_MemShared		(PERL_GET_INTERP->IMemShared)
#define PL_Proc			(PERL_GET_INTERP->IProc)
#define PL_Sock			(PERL_GET_INTERP->ISock)
#define PL_StdIO		(PERL_GET_INTERP->IStdIO)
#define PL_amagic_generation	(PERL_GET_INTERP->Iamagic_generation)
#define PL_an			(PERL_GET_INTERP->Ian)
#define PL_argvgv		(PERL_GET_INTERP->Iargvgv)
#define PL_argvout_stack	(PERL_GET_INTERP->Iargvout_stack)
#define PL_argvoutgv		(PERL_GET_INTERP->Iargvoutgv)
#define PL_basetime		(PERL_GET_INTERP->Ibasetime)
#define PL_beginav		(PERL_GET_INTERP->Ibeginav)
#define PL_beginav_save		(PERL_GET_INTERP->Ibeginav_save)
#define PL_bitcount		(PERL_GET_INTERP->Ibitcount)
#define PL_bufend		(PERL_GET_INTERP->Ibufend)
#define PL_bufptr		(PERL_GET_INTERP->Ibufptr)
#define PL_checkav		(PERL_GET_INTERP->Icheckav)
#define PL_collation_ix		(PERL_GET_INTERP->Icollation_ix)
#define PL_collation_name	(PERL_GET_INTERP->Icollation_name)
#define PL_collation_standard	(PERL_GET_INTERP->Icollation_standard)
#define PL_collxfrm_base	(PERL_GET_INTERP->Icollxfrm_base)
#define PL_collxfrm_mult	(PERL_GET_INTERP->Icollxfrm_mult)
#define PL_compcv		(PERL_GET_INTERP->Icompcv)
#define PL_compiling		(PERL_GET_INTERP->Icompiling)
#define PL_comppad		(PERL_GET_INTERP->Icomppad)
#define PL_comppad_name		(PERL_GET_INTERP->Icomppad_name)
#define PL_comppad_name_fill	(PERL_GET_INTERP->Icomppad_name_fill)
#define PL_comppad_name_floor	(PERL_GET_INTERP->Icomppad_name_floor)
#define PL_cop_seqmax		(PERL_GET_INTERP->Icop_seqmax)
#define PL_copline		(PERL_GET_INTERP->Icopline)
#define PL_cred_mutex		(PERL_GET_INTERP->Icred_mutex)
#define PL_cryptseen		(PERL_GET_INTERP->Icryptseen)
#define PL_cshlen		(PERL_GET_INTERP->Icshlen)
#define PL_cshname		(PERL_GET_INTERP->Icshname)
#define PL_curcopdb		(PERL_GET_INTERP->Icurcopdb)
#define PL_curstname		(PERL_GET_INTERP->Icurstname)
#define PL_curthr		(PERL_GET_INTERP->Icurthr)
#define PL_dbargs		(PERL_GET_INTERP->Idbargs)
#define PL_debstash		(PERL_GET_INTERP->Idebstash)
#define PL_debug		(PERL_GET_INTERP->Idebug)
#define PL_defgv		(PERL_GET_INTERP->Idefgv)
#define PL_diehook		(PERL_GET_INTERP->Idiehook)
#define PL_doextract		(PERL_GET_INTERP->Idoextract)
#define PL_doswitches		(PERL_GET_INTERP->Idoswitches)
#define PL_dowarn		(PERL_GET_INTERP->Idowarn)
#define PL_dummy1_bincompat	(PERL_GET_INTERP->Idummy1_bincompat)
#define PL_e_script		(PERL_GET_INTERP->Ie_script)
#define PL_egid			(PERL_GET_INTERP->Iegid)
#define PL_endav		(PERL_GET_INTERP->Iendav)
#define PL_envgv		(PERL_GET_INTERP->Ienvgv)
#define PL_errgv		(PERL_GET_INTERP->Ierrgv)
#define PL_error_count		(PERL_GET_INTERP->Ierror_count)
#define PL_euid			(PERL_GET_INTERP->Ieuid)
#define PL_eval_cond		(PERL_GET_INTERP->Ieval_cond)
#define PL_eval_mutex		(PERL_GET_INTERP->Ieval_mutex)
#define PL_eval_owner		(PERL_GET_INTERP->Ieval_owner)
#define PL_eval_root		(PERL_GET_INTERP->Ieval_root)
#define PL_eval_start		(PERL_GET_INTERP->Ieval_start)
#define PL_evalseq		(PERL_GET_INTERP->Ievalseq)
#define PL_exit_flags		(PERL_GET_INTERP->Iexit_flags)
#define PL_exitlist		(PERL_GET_INTERP->Iexitlist)
#define PL_exitlistlen		(PERL_GET_INTERP->Iexitlistlen)
#define PL_expect		(PERL_GET_INTERP->Iexpect)
#define PL_fdpid		(PERL_GET_INTERP->Ifdpid)
#define PL_fdpid_mutex		(PERL_GET_INTERP->Ifdpid_mutex)
#define PL_filemode		(PERL_GET_INTERP->Ifilemode)
#define PL_forkprocess		(PERL_GET_INTERP->Iforkprocess)
#define PL_formfeed		(PERL_GET_INTERP->Iformfeed)
#define PL_generation		(PERL_GET_INTERP->Igeneration)
#define PL_gensym		(PERL_GET_INTERP->Igensym)
#define PL_gid			(PERL_GET_INTERP->Igid)
#define PL_glob_index		(PERL_GET_INTERP->Iglob_index)
#define PL_globalstash		(PERL_GET_INTERP->Iglobalstash)
#define PL_he_arenaroot		(PERL_GET_INTERP->Ihe_arenaroot)
#define PL_he_root		(PERL_GET_INTERP->Ihe_root)
#define PL_hintgv		(PERL_GET_INTERP->Ihintgv)
#define PL_hints		(PERL_GET_INTERP->Ihints)
#define PL_in_clean_all		(PERL_GET_INTERP->Iin_clean_all)
#define PL_in_clean_objs	(PERL_GET_INTERP->Iin_clean_objs)
#define PL_in_my		(PERL_GET_INTERP->Iin_my)
#define PL_in_my_stash		(PERL_GET_INTERP->Iin_my_stash)
#define PL_incgv		(PERL_GET_INTERP->Iincgv)
#define PL_initav		(PERL_GET_INTERP->Iinitav)
#define PL_inplace		(PERL_GET_INTERP->Iinplace)
#define PL_last_lop		(PERL_GET_INTERP->Ilast_lop)
#define PL_last_lop_op		(PERL_GET_INTERP->Ilast_lop_op)
#define PL_last_swash_hv	(PERL_GET_INTERP->Ilast_swash_hv)
#define PL_last_swash_key	(PERL_GET_INTERP->Ilast_swash_key)
#define PL_last_swash_klen	(PERL_GET_INTERP->Ilast_swash_klen)
#define PL_last_swash_slen	(PERL_GET_INTERP->Ilast_swash_slen)
#define PL_last_swash_tmps	(PERL_GET_INTERP->Ilast_swash_tmps)
#define PL_last_uni		(PERL_GET_INTERP->Ilast_uni)
#define PL_lastfd		(PERL_GET_INTERP->Ilastfd)
#define PL_laststatval		(PERL_GET_INTERP->Ilaststatval)
#define PL_laststype		(PERL_GET_INTERP->Ilaststype)
#define PL_lex_brackets		(PERL_GET_INTERP->Ilex_brackets)
#define PL_lex_brackstack	(PERL_GET_INTERP->Ilex_brackstack)
#define PL_lex_casemods		(PERL_GET_INTERP->Ilex_casemods)
#define PL_lex_casestack	(PERL_GET_INTERP->Ilex_casestack)
#define PL_lex_defer		(PERL_GET_INTERP->Ilex_defer)
#define PL_lex_dojoin		(PERL_GET_INTERP->Ilex_dojoin)
#define PL_lex_expect		(PERL_GET_INTERP->Ilex_expect)
#define PL_lex_formbrack	(PERL_GET_INTERP->Ilex_formbrack)
#define PL_lex_inpat		(PERL_GET_INTERP->Ilex_inpat)
#define PL_lex_inwhat		(PERL_GET_INTERP->Ilex_inwhat)
#define PL_lex_op		(PERL_GET_INTERP->Ilex_op)
#define PL_lex_repl		(PERL_GET_INTERP->Ilex_repl)
#define PL_lex_starts		(PERL_GET_INTERP->Ilex_starts)
#define PL_lex_state		(PERL_GET_INTERP->Ilex_state)
#define PL_lex_stuff		(PERL_GET_INTERP->Ilex_stuff)
#define PL_lineary		(PERL_GET_INTERP->Ilineary)
#define PL_linestart		(PERL_GET_INTERP->Ilinestart)
#define PL_linestr		(PERL_GET_INTERP->Ilinestr)
#define PL_localpatches		(PERL_GET_INTERP->Ilocalpatches)
#define PL_main_cv		(PERL_GET_INTERP->Imain_cv)
#define PL_main_root		(PERL_GET_INTERP->Imain_root)
#define PL_main_start		(PERL_GET_INTERP->Imain_start)
#define PL_max_intro_pending	(PERL_GET_INTERP->Imax_intro_pending)
#define PL_maxo			(PERL_GET_INTERP->Imaxo)
#define PL_maxsysfd		(PERL_GET_INTERP->Imaxsysfd)
#define PL_mess_sv		(PERL_GET_INTERP->Imess_sv)
#define PL_min_intro_pending	(PERL_GET_INTERP->Imin_intro_pending)
#define PL_minus_F		(PERL_GET_INTERP->Iminus_F)
#define PL_minus_a		(PERL_GET_INTERP->Iminus_a)
#define PL_minus_c		(PERL_GET_INTERP->Iminus_c)
#define PL_minus_l		(PERL_GET_INTERP->Iminus_l)
#define PL_minus_n		(PERL_GET_INTERP->Iminus_n)
#define PL_minus_p		(PERL_GET_INTERP->Iminus_p)
#define PL_modglobal		(PERL_GET_INTERP->Imodglobal)
#define PL_multi_close		(PERL_GET_INTERP->Imulti_close)
#define PL_multi_end		(PERL_GET_INTERP->Imulti_end)
#define PL_multi_open		(PERL_GET_INTERP->Imulti_open)
#define PL_multi_start		(PERL_GET_INTERP->Imulti_start)
#define PL_multiline		(PERL_GET_INTERP->Imultiline)
#define PL_nexttoke		(PERL_GET_INTERP->Inexttoke)
#define PL_nexttype		(PERL_GET_INTERP->Inexttype)
#define PL_nextval		(PERL_GET_INTERP->Inextval)
#define PL_nice_chunk		(PERL_GET_INTERP->Inice_chunk)
#define PL_nice_chunk_size	(PERL_GET_INTERP->Inice_chunk_size)
#define PL_nomemok		(PERL_GET_INTERP->Inomemok)
#define PL_nthreads		(PERL_GET_INTERP->Inthreads)
#define PL_nthreads_cond	(PERL_GET_INTERP->Inthreads_cond)
#define PL_nullstash		(PERL_GET_INTERP->Inullstash)
#define PL_numeric_local	(PERL_GET_INTERP->Inumeric_local)
#define PL_numeric_name		(PERL_GET_INTERP->Inumeric_name)
#define PL_numeric_radix_sv	(PERL_GET_INTERP->Inumeric_radix_sv)
#define PL_numeric_standard	(PERL_GET_INTERP->Inumeric_standard)
#define PL_ofmt			(PERL_GET_INTERP->Iofmt)
#define PL_oldbufptr		(PERL_GET_INTERP->Ioldbufptr)
#define PL_oldname		(PERL_GET_INTERP->Ioldname)
#define PL_oldoldbufptr		(PERL_GET_INTERP->Ioldoldbufptr)
#define PL_op_mask		(PERL_GET_INTERP->Iop_mask)
#define PL_op_seqmax		(PERL_GET_INTERP->Iop_seqmax)
#define PL_origalen		(PERL_GET_INTERP->Iorigalen)
#define PL_origargc		(PERL_GET_INTERP->Iorigargc)
#define PL_origargv		(PERL_GET_INTERP->Iorigargv)
#define PL_origenviron		(PERL_GET_INTERP->Iorigenviron)
#define PL_origfilename		(PERL_GET_INTERP->Iorigfilename)
#define PL_ors			(PERL_GET_INTERP->Iors)
#define PL_orslen		(PERL_GET_INTERP->Iorslen)
#define PL_osname		(PERL_GET_INTERP->Iosname)
#define PL_pad_reset_pending	(PERL_GET_INTERP->Ipad_reset_pending)
#define PL_padix		(PERL_GET_INTERP->Ipadix)
#define PL_padix_floor		(PERL_GET_INTERP->Ipadix_floor)
#define PL_patchlevel		(PERL_GET_INTERP->Ipatchlevel)
#define PL_pending_ident	(PERL_GET_INTERP->Ipending_ident)
#define PL_perl_destruct_level	(PERL_GET_INTERP->Iperl_destruct_level)
#define PL_perldb		(PERL_GET_INTERP->Iperldb)
#define PL_pidstatus		(PERL_GET_INTERP->Ipidstatus)
#define PL_preambleav		(PERL_GET_INTERP->Ipreambleav)
#define PL_preambled		(PERL_GET_INTERP->Ipreambled)
#define PL_preprocess		(PERL_GET_INTERP->Ipreprocess)
#define PL_profiledata		(PERL_GET_INTERP->Iprofiledata)
#define PL_psig_name		(PERL_GET_INTERP->Ipsig_name)
#define PL_psig_ptr		(PERL_GET_INTERP->Ipsig_ptr)
#define PL_ptr_table		(PERL_GET_INTERP->Iptr_table)
#define PL_replgv		(PERL_GET_INTERP->Ireplgv)
#define PL_rsfp			(PERL_GET_INTERP->Irsfp)
#define PL_rsfp_filters		(PERL_GET_INTERP->Irsfp_filters)
#define PL_runops		(PERL_GET_INTERP->Irunops)
#define PL_sawampersand		(PERL_GET_INTERP->Isawampersand)
#define PL_sh_path		(PERL_GET_INTERP->Ish_path)
#define PL_sighandlerp		(PERL_GET_INTERP->Isighandlerp)
#define PL_splitstr		(PERL_GET_INTERP->Isplitstr)
#define PL_srand_called		(PERL_GET_INTERP->Isrand_called)
#define PL_statusvalue		(PERL_GET_INTERP->Istatusvalue)
#define PL_statusvalue_vms	(PERL_GET_INTERP->Istatusvalue_vms)
#define PL_stderrgv		(PERL_GET_INTERP->Istderrgv)
#define PL_stdingv		(PERL_GET_INTERP->Istdingv)
#define PL_strtab		(PERL_GET_INTERP->Istrtab)
#define PL_strtab_mutex		(PERL_GET_INTERP->Istrtab_mutex)
#define PL_sub_generation	(PERL_GET_INTERP->Isub_generation)
#define PL_sublex_info		(PERL_GET_INTERP->Isublex_info)
#define PL_subline		(PERL_GET_INTERP->Isubline)
#define PL_subname		(PERL_GET_INTERP->Isubname)
#define PL_sv_arenaroot		(PERL_GET_INTERP->Isv_arenaroot)
#define PL_sv_count		(PERL_GET_INTERP->Isv_count)
#define PL_sv_lock_mutex	(PERL_GET_INTERP->Isv_lock_mutex)
#define PL_sv_mutex		(PERL_GET_INTERP->Isv_mutex)
#define PL_sv_no		(PERL_GET_INTERP->Isv_no)
#define PL_sv_objcount		(PERL_GET_INTERP->Isv_objcount)
#define PL_sv_root		(PERL_GET_INTERP->Isv_root)
#define PL_sv_undef		(PERL_GET_INTERP->Isv_undef)
#define PL_sv_yes		(PERL_GET_INTERP->Isv_yes)
#define PL_svref_mutex		(PERL_GET_INTERP->Isvref_mutex)
#define PL_sys_intern		(PERL_GET_INTERP->Isys_intern)
#define PL_tainting		(PERL_GET_INTERP->Itainting)
#define PL_threadnum		(PERL_GET_INTERP->Ithreadnum)
#define PL_threads_mutex	(PERL_GET_INTERP->Ithreads_mutex)
#define PL_threadsv_names	(PERL_GET_INTERP->Ithreadsv_names)
#define PL_thrsv		(PERL_GET_INTERP->Ithrsv)
#define PL_tokenbuf		(PERL_GET_INTERP->Itokenbuf)
#define PL_uid			(PERL_GET_INTERP->Iuid)
#define PL_unsafe		(PERL_GET_INTERP->Iunsafe)
#define PL_utf8_alnum		(PERL_GET_INTERP->Iutf8_alnum)
#define PL_utf8_alnumc		(PERL_GET_INTERP->Iutf8_alnumc)
#define PL_utf8_alpha		(PERL_GET_INTERP->Iutf8_alpha)
#define PL_utf8_ascii		(PERL_GET_INTERP->Iutf8_ascii)
#define PL_utf8_cntrl		(PERL_GET_INTERP->Iutf8_cntrl)
#define PL_utf8_digit		(PERL_GET_INTERP->Iutf8_digit)
#define PL_utf8_graph		(PERL_GET_INTERP->Iutf8_graph)
#define PL_utf8_lower		(PERL_GET_INTERP->Iutf8_lower)
#define PL_utf8_mark		(PERL_GET_INTERP->Iutf8_mark)
#define PL_utf8_print		(PERL_GET_INTERP->Iutf8_print)
#define PL_utf8_punct		(PERL_GET_INTERP->Iutf8_punct)
#define PL_utf8_space		(PERL_GET_INTERP->Iutf8_space)
#define PL_utf8_tolower		(PERL_GET_INTERP->Iutf8_tolower)
#define PL_utf8_totitle		(PERL_GET_INTERP->Iutf8_totitle)
#define PL_utf8_toupper		(PERL_GET_INTERP->Iutf8_toupper)
#define PL_utf8_upper		(PERL_GET_INTERP->Iutf8_upper)
#define PL_utf8_xdigit		(PERL_GET_INTERP->Iutf8_xdigit)
#define PL_uudmap		(PERL_GET_INTERP->Iuudmap)
#define PL_warnhook		(PERL_GET_INTERP->Iwarnhook)
#define PL_widesyscalls		(PERL_GET_INTERP->Iwidesyscalls)
#define PL_xiv_arenaroot	(PERL_GET_INTERP->Ixiv_arenaroot)
#define PL_xiv_root		(PERL_GET_INTERP->Ixiv_root)
#define PL_xnv_arenaroot	(PERL_GET_INTERP->Ixnv_arenaroot)
#define PL_xnv_root		(PERL_GET_INTERP->Ixnv_root)
#define PL_xpv_arenaroot	(PERL_GET_INTERP->Ixpv_arenaroot)
#define PL_xpv_root		(PERL_GET_INTERP->Ixpv_root)
#define PL_xpvav_arenaroot	(PERL_GET_INTERP->Ixpvav_arenaroot)
#define PL_xpvav_root		(PERL_GET_INTERP->Ixpvav_root)
#define PL_xpvbm_arenaroot	(PERL_GET_INTERP->Ixpvbm_arenaroot)
#define PL_xpvbm_root		(PERL_GET_INTERP->Ixpvbm_root)
#define PL_xpvcv_arenaroot	(PERL_GET_INTERP->Ixpvcv_arenaroot)
#define PL_xpvcv_root		(PERL_GET_INTERP->Ixpvcv_root)
#define PL_xpvhv_arenaroot	(PERL_GET_INTERP->Ixpvhv_arenaroot)
#define PL_xpvhv_root		(PERL_GET_INTERP->Ixpvhv_root)
#define PL_xpviv_arenaroot	(PERL_GET_INTERP->Ixpviv_arenaroot)
#define PL_xpviv_root		(PERL_GET_INTERP->Ixpviv_root)
#define PL_xpvlv_arenaroot	(PERL_GET_INTERP->Ixpvlv_arenaroot)
#define PL_xpvlv_root		(PERL_GET_INTERP->Ixpvlv_root)
#define PL_xpvmg_arenaroot	(PERL_GET_INTERP->Ixpvmg_arenaroot)
#define PL_xpvmg_root		(PERL_GET_INTERP->Ixpvmg_root)
#define PL_xpvnv_arenaroot	(PERL_GET_INTERP->Ixpvnv_arenaroot)
#define PL_xpvnv_root		(PERL_GET_INTERP->Ixpvnv_root)
#define PL_xrv_arenaroot	(PERL_GET_INTERP->Ixrv_arenaroot)
#define PL_xrv_root		(PERL_GET_INTERP->Ixrv_root)
#define PL_yychar		(PERL_GET_INTERP->Iyychar)
#define PL_yydebug		(PERL_GET_INTERP->Iyydebug)
#define PL_yyerrflag		(PERL_GET_INTERP->Iyyerrflag)
#define PL_yylval		(PERL_GET_INTERP->Iyylval)
#define PL_yynerrs		(PERL_GET_INTERP->Iyynerrs)
#define PL_yyval		(PERL_GET_INTERP->Iyyval)

#  else		/* !USE_THREADS */
/* cases 2 and 3 above */

#define PL_Argv			(vTHX->IArgv)
#define PL_Cmd			(vTHX->ICmd)
#define PL_DBcv			(vTHX->IDBcv)
#define PL_DBgv			(vTHX->IDBgv)
#define PL_DBline		(vTHX->IDBline)
#define PL_DBsignal		(vTHX->IDBsignal)
#define PL_DBsingle		(vTHX->IDBsingle)
#define PL_DBsub		(vTHX->IDBsub)
#define PL_DBtrace		(vTHX->IDBtrace)
#define PL_Dir			(vTHX->IDir)
#define PL_Env			(vTHX->IEnv)
#define PL_LIO			(vTHX->ILIO)
#define PL_Mem			(vTHX->IMem)
#define PL_MemParse		(vTHX->IMemParse)
#define PL_MemShared		(vTHX->IMemShared)
#define PL_Proc			(vTHX->IProc)
#define PL_Sock			(vTHX->ISock)
#define PL_StdIO		(vTHX->IStdIO)
#define PL_amagic_generation	(vTHX->Iamagic_generation)
#define PL_an			(vTHX->Ian)
#define PL_argvgv		(vTHX->Iargvgv)
#define PL_argvout_stack	(vTHX->Iargvout_stack)
#define PL_argvoutgv		(vTHX->Iargvoutgv)
#define PL_basetime		(vTHX->Ibasetime)
#define PL_beginav		(vTHX->Ibeginav)
#define PL_beginav_save		(vTHX->Ibeginav_save)
#define PL_bitcount		(vTHX->Ibitcount)
#define PL_bufend		(vTHX->Ibufend)
#define PL_bufptr		(vTHX->Ibufptr)
#define PL_checkav		(vTHX->Icheckav)
#define PL_collation_ix		(vTHX->Icollation_ix)
#define PL_collation_name	(vTHX->Icollation_name)
#define PL_collation_standard	(vTHX->Icollation_standard)
#define PL_collxfrm_base	(vTHX->Icollxfrm_base)
#define PL_collxfrm_mult	(vTHX->Icollxfrm_mult)
#define PL_compcv		(vTHX->Icompcv)
#define PL_compiling		(vTHX->Icompiling)
#define PL_comppad		(vTHX->Icomppad)
#define PL_comppad_name		(vTHX->Icomppad_name)
#define PL_comppad_name_fill	(vTHX->Icomppad_name_fill)
#define PL_comppad_name_floor	(vTHX->Icomppad_name_floor)
#define PL_cop_seqmax		(vTHX->Icop_seqmax)
#define PL_copline		(vTHX->Icopline)
#define PL_cred_mutex		(vTHX->Icred_mutex)
#define PL_cryptseen		(vTHX->Icryptseen)
#define PL_cshlen		(vTHX->Icshlen)
#define PL_cshname		(vTHX->Icshname)
#define PL_curcopdb		(vTHX->Icurcopdb)
#define PL_curstname		(vTHX->Icurstname)
#define PL_curthr		(vTHX->Icurthr)
#define PL_dbargs		(vTHX->Idbargs)
#define PL_debstash		(vTHX->Idebstash)
#define PL_debug		(vTHX->Idebug)
#define PL_defgv		(vTHX->Idefgv)
#define PL_diehook		(vTHX->Idiehook)
#define PL_doextract		(vTHX->Idoextract)
#define PL_doswitches		(vTHX->Idoswitches)
#define PL_dowarn		(vTHX->Idowarn)
#define PL_dummy1_bincompat	(vTHX->Idummy1_bincompat)
#define PL_e_script		(vTHX->Ie_script)
#define PL_egid			(vTHX->Iegid)
#define PL_endav		(vTHX->Iendav)
#define PL_envgv		(vTHX->Ienvgv)
#define PL_errgv		(vTHX->Ierrgv)
#define PL_error_count		(vTHX->Ierror_count)
#define PL_euid			(vTHX->Ieuid)
#define PL_eval_cond		(vTHX->Ieval_cond)
#define PL_eval_mutex		(vTHX->Ieval_mutex)
#define PL_eval_owner		(vTHX->Ieval_owner)
#define PL_eval_root		(vTHX->Ieval_root)
#define PL_eval_start		(vTHX->Ieval_start)
#define PL_evalseq		(vTHX->Ievalseq)
#define PL_exit_flags		(vTHX->Iexit_flags)
#define PL_exitlist		(vTHX->Iexitlist)
#define PL_exitlistlen		(vTHX->Iexitlistlen)
#define PL_expect		(vTHX->Iexpect)
#define PL_fdpid		(vTHX->Ifdpid)
#define PL_fdpid_mutex		(vTHX->Ifdpid_mutex)
#define PL_filemode		(vTHX->Ifilemode)
#define PL_forkprocess		(vTHX->Iforkprocess)
#define PL_formfeed		(vTHX->Iformfeed)
#define PL_generation		(vTHX->Igeneration)
#define PL_gensym		(vTHX->Igensym)
#define PL_gid			(vTHX->Igid)
#define PL_glob_index		(vTHX->Iglob_index)
#define PL_globalstash		(vTHX->Iglobalstash)
#define PL_he_arenaroot		(vTHX->Ihe_arenaroot)
#define PL_he_root		(vTHX->Ihe_root)
#define PL_hintgv		(vTHX->Ihintgv)
#define PL_hints		(vTHX->Ihints)
#define PL_in_clean_all		(vTHX->Iin_clean_all)
#define PL_in_clean_objs	(vTHX->Iin_clean_objs)
#define PL_in_my		(vTHX->Iin_my)
#define PL_in_my_stash		(vTHX->Iin_my_stash)
#define PL_incgv		(vTHX->Iincgv)
#define PL_initav		(vTHX->Iinitav)
#define PL_inplace		(vTHX->Iinplace)
#define PL_last_lop		(vTHX->Ilast_lop)
#define PL_last_lop_op		(vTHX->Ilast_lop_op)
#define PL_last_swash_hv	(vTHX->Ilast_swash_hv)
#define PL_last_swash_key	(vTHX->Ilast_swash_key)
#define PL_last_swash_klen	(vTHX->Ilast_swash_klen)
#define PL_last_swash_slen	(vTHX->Ilast_swash_slen)
#define PL_last_swash_tmps	(vTHX->Ilast_swash_tmps)
#define PL_last_uni		(vTHX->Ilast_uni)
#define PL_lastfd		(vTHX->Ilastfd)
#define PL_laststatval		(vTHX->Ilaststatval)
#define PL_laststype		(vTHX->Ilaststype)
#define PL_lex_brackets		(vTHX->Ilex_brackets)
#define PL_lex_brackstack	(vTHX->Ilex_brackstack)
#define PL_lex_casemods		(vTHX->Ilex_casemods)
#define PL_lex_casestack	(vTHX->Ilex_casestack)
#define PL_lex_defer		(vTHX->Ilex_defer)
#define PL_lex_dojoin		(vTHX->Ilex_dojoin)
#define PL_lex_expect		(vTHX->Ilex_expect)
#define PL_lex_formbrack	(vTHX->Ilex_formbrack)
#define PL_lex_inpat		(vTHX->Ilex_inpat)
#define PL_lex_inwhat		(vTHX->Ilex_inwhat)
#define PL_lex_op		(vTHX->Ilex_op)
#define PL_lex_repl		(vTHX->Ilex_repl)
#define PL_lex_starts		(vTHX->Ilex_starts)
#define PL_lex_state		(vTHX->Ilex_state)
#define PL_lex_stuff		(vTHX->Ilex_stuff)
#define PL_lineary		(vTHX->Ilineary)
#define PL_linestart		(vTHX->Ilinestart)
#define PL_linestr		(vTHX->Ilinestr)
#define PL_localpatches		(vTHX->Ilocalpatches)
#define PL_main_cv		(vTHX->Imain_cv)
#define PL_main_root		(vTHX->Imain_root)
#define PL_main_start		(vTHX->Imain_start)
#define PL_max_intro_pending	(vTHX->Imax_intro_pending)
#define PL_maxo			(vTHX->Imaxo)
#define PL_maxsysfd		(vTHX->Imaxsysfd)
#define PL_mess_sv		(vTHX->Imess_sv)
#define PL_min_intro_pending	(vTHX->Imin_intro_pending)
#define PL_minus_F		(vTHX->Iminus_F)
#define PL_minus_a		(vTHX->Iminus_a)
#define PL_minus_c		(vTHX->Iminus_c)
#define PL_minus_l		(vTHX->Iminus_l)
#define PL_minus_n		(vTHX->Iminus_n)
#define PL_minus_p		(vTHX->Iminus_p)
#define PL_modglobal		(vTHX->Imodglobal)
#define PL_multi_close		(vTHX->Imulti_close)
#define PL_multi_end		(vTHX->Imulti_end)
#define PL_multi_open		(vTHX->Imulti_open)
#define PL_multi_start		(vTHX->Imulti_start)
#define PL_multiline		(vTHX->Imultiline)
#define PL_nexttoke		(vTHX->Inexttoke)
#define PL_nexttype		(vTHX->Inexttype)
#define PL_nextval		(vTHX->Inextval)
#define PL_nice_chunk		(vTHX->Inice_chunk)
#define PL_nice_chunk_size	(vTHX->Inice_chunk_size)
#define PL_nomemok		(vTHX->Inomemok)
#define PL_nthreads		(vTHX->Inthreads)
#define PL_nthreads_cond	(vTHX->Inthreads_cond)
#define PL_nullstash		(vTHX->Inullstash)
#define PL_numeric_local	(vTHX->Inumeric_local)
#define PL_numeric_name		(vTHX->Inumeric_name)
#define PL_numeric_radix_sv	(vTHX->Inumeric_radix_sv)
#define PL_numeric_standard	(vTHX->Inumeric_standard)
#define PL_ofmt			(vTHX->Iofmt)
#define PL_oldbufptr		(vTHX->Ioldbufptr)
#define PL_oldname		(vTHX->Ioldname)
#define PL_oldoldbufptr		(vTHX->Ioldoldbufptr)
#define PL_op_mask		(vTHX->Iop_mask)
#define PL_op_seqmax		(vTHX->Iop_seqmax)
#define PL_origalen		(vTHX->Iorigalen)
#define PL_origargc		(vTHX->Iorigargc)
#define PL_origargv		(vTHX->Iorigargv)
#define PL_origenviron		(vTHX->Iorigenviron)
#define PL_origfilename		(vTHX->Iorigfilename)
#define PL_ors			(vTHX->Iors)
#define PL_orslen		(vTHX->Iorslen)
#define PL_osname		(vTHX->Iosname)
#define PL_pad_reset_pending	(vTHX->Ipad_reset_pending)
#define PL_padix		(vTHX->Ipadix)
#define PL_padix_floor		(vTHX->Ipadix_floor)
#define PL_patchlevel		(vTHX->Ipatchlevel)
#define PL_pending_ident	(vTHX->Ipending_ident)
#define PL_perl_destruct_level	(vTHX->Iperl_destruct_level)
#define PL_perldb		(vTHX->Iperldb)
#define PL_pidstatus		(vTHX->Ipidstatus)
#define PL_preambleav		(vTHX->Ipreambleav)
#define PL_preambled		(vTHX->Ipreambled)
#define PL_preprocess		(vTHX->Ipreprocess)
#define PL_profiledata		(vTHX->Iprofiledata)
#define PL_psig_name		(vTHX->Ipsig_name)
#define PL_psig_ptr		(vTHX->Ipsig_ptr)
#define PL_ptr_table		(vTHX->Iptr_table)
#define PL_replgv		(vTHX->Ireplgv)
#define PL_rsfp			(vTHX->Irsfp)
#define PL_rsfp_filters		(vTHX->Irsfp_filters)
#define PL_runops		(vTHX->Irunops)
#define PL_sawampersand		(vTHX->Isawampersand)
#define PL_sh_path		(vTHX->Ish_path)
#define PL_sighandlerp		(vTHX->Isighandlerp)
#define PL_splitstr		(vTHX->Isplitstr)
#define PL_srand_called		(vTHX->Isrand_called)
#define PL_statusvalue		(vTHX->Istatusvalue)
#define PL_statusvalue_vms	(vTHX->Istatusvalue_vms)
#define PL_stderrgv		(vTHX->Istderrgv)
#define PL_stdingv		(vTHX->Istdingv)
#define PL_strtab		(vTHX->Istrtab)
#define PL_strtab_mutex		(vTHX->Istrtab_mutex)
#define PL_sub_generation	(vTHX->Isub_generation)
#define PL_sublex_info		(vTHX->Isublex_info)
#define PL_subline		(vTHX->Isubline)
#define PL_subname		(vTHX->Isubname)
#define PL_sv_arenaroot		(vTHX->Isv_arenaroot)
#define PL_sv_count		(vTHX->Isv_count)
#define PL_sv_lock_mutex	(vTHX->Isv_lock_mutex)
#define PL_sv_mutex		(vTHX->Isv_mutex)
#define PL_sv_no		(vTHX->Isv_no)
#define PL_sv_objcount		(vTHX->Isv_objcount)
#define PL_sv_root		(vTHX->Isv_root)
#define PL_sv_undef		(vTHX->Isv_undef)
#define PL_sv_yes		(vTHX->Isv_yes)
#define PL_svref_mutex		(vTHX->Isvref_mutex)
#define PL_sys_intern		(vTHX->Isys_intern)
#define PL_tainting		(vTHX->Itainting)
#define PL_threadnum		(vTHX->Ithreadnum)
#define PL_threads_mutex	(vTHX->Ithreads_mutex)
#define PL_threadsv_names	(vTHX->Ithreadsv_names)
#define PL_thrsv		(vTHX->Ithrsv)
#define PL_tokenbuf		(vTHX->Itokenbuf)
#define PL_uid			(vTHX->Iuid)
#define PL_unsafe		(vTHX->Iunsafe)
#define PL_utf8_alnum		(vTHX->Iutf8_alnum)
#define PL_utf8_alnumc		(vTHX->Iutf8_alnumc)
#define PL_utf8_alpha		(vTHX->Iutf8_alpha)
#define PL_utf8_ascii		(vTHX->Iutf8_ascii)
#define PL_utf8_cntrl		(vTHX->Iutf8_cntrl)
#define PL_utf8_digit		(vTHX->Iutf8_digit)
#define PL_utf8_graph		(vTHX->Iutf8_graph)
#define PL_utf8_lower		(vTHX->Iutf8_lower)
#define PL_utf8_mark		(vTHX->Iutf8_mark)
#define PL_utf8_print		(vTHX->Iutf8_print)
#define PL_utf8_punct		(vTHX->Iutf8_punct)
#define PL_utf8_space		(vTHX->Iutf8_space)
#define PL_utf8_tolower		(vTHX->Iutf8_tolower)
#define PL_utf8_totitle		(vTHX->Iutf8_totitle)
#define PL_utf8_toupper		(vTHX->Iutf8_toupper)
#define PL_utf8_upper		(vTHX->Iutf8_upper)
#define PL_utf8_xdigit		(vTHX->Iutf8_xdigit)
#define PL_uudmap		(vTHX->Iuudmap)
#define PL_warnhook		(vTHX->Iwarnhook)
#define PL_widesyscalls		(vTHX->Iwidesyscalls)
#define PL_xiv_arenaroot	(vTHX->Ixiv_arenaroot)
#define PL_xiv_root		(vTHX->Ixiv_root)
#define PL_xnv_arenaroot	(vTHX->Ixnv_arenaroot)
#define PL_xnv_root		(vTHX->Ixnv_root)
#define PL_xpv_arenaroot	(vTHX->Ixpv_arenaroot)
#define PL_xpv_root		(vTHX->Ixpv_root)
#define PL_xpvav_arenaroot	(vTHX->Ixpvav_arenaroot)
#define PL_xpvav_root		(vTHX->Ixpvav_root)
#define PL_xpvbm_arenaroot	(vTHX->Ixpvbm_arenaroot)
#define PL_xpvbm_root		(vTHX->Ixpvbm_root)
#define PL_xpvcv_arenaroot	(vTHX->Ixpvcv_arenaroot)
#define PL_xpvcv_root		(vTHX->Ixpvcv_root)
#define PL_xpvhv_arenaroot	(vTHX->Ixpvhv_arenaroot)
#define PL_xpvhv_root		(vTHX->Ixpvhv_root)
#define PL_xpviv_arenaroot	(vTHX->Ixpviv_arenaroot)
#define PL_xpviv_root		(vTHX->Ixpviv_root)
#define PL_xpvlv_arenaroot	(vTHX->Ixpvlv_arenaroot)
#define PL_xpvlv_root		(vTHX->Ixpvlv_root)
#define PL_xpvmg_arenaroot	(vTHX->Ixpvmg_arenaroot)
#define PL_xpvmg_root		(vTHX->Ixpvmg_root)
#define PL_xpvnv_arenaroot	(vTHX->Ixpvnv_arenaroot)
#define PL_xpvnv_root		(vTHX->Ixpvnv_root)
#define PL_xrv_arenaroot	(vTHX->Ixrv_arenaroot)
#define PL_xrv_root		(vTHX->Ixrv_root)
#define PL_yychar		(vTHX->Iyychar)
#define PL_yydebug		(vTHX->Iyydebug)
#define PL_yyerrflag		(vTHX->Iyyerrflag)
#define PL_yylval		(vTHX->Iyylval)
#define PL_yynerrs		(vTHX->Iyynerrs)
#define PL_yyval		(vTHX->Iyyval)

#  endif	/* USE_THREADS */

#else	/* !MULTIPLICITY */

#  if defined(PERL_OBJECT)
/* case 6 above */

#define PL_Sv			(aTHXo->interp.TSv)
#define PL_Xpv			(aTHXo->interp.TXpv)
#define PL_av_fetch_sv		(aTHXo->interp.Tav_fetch_sv)
#define PL_bodytarget		(aTHXo->interp.Tbodytarget)
#define PL_bostr		(aTHXo->interp.Tbostr)
#define PL_chopset		(aTHXo->interp.Tchopset)
#define PL_colors		(aTHXo->interp.Tcolors)
#define PL_colorset		(aTHXo->interp.Tcolorset)
#define PL_curcop		(aTHXo->interp.Tcurcop)
#define PL_curpad		(aTHXo->interp.Tcurpad)
#define PL_curpm		(aTHXo->interp.Tcurpm)
#define PL_curstack		(aTHXo->interp.Tcurstack)
#define PL_curstackinfo		(aTHXo->interp.Tcurstackinfo)
#define PL_curstash		(aTHXo->interp.Tcurstash)
#define PL_defoutgv		(aTHXo->interp.Tdefoutgv)
#define PL_defstash		(aTHXo->interp.Tdefstash)
#define PL_delaymagic		(aTHXo->interp.Tdelaymagic)
#define PL_dirty		(aTHXo->interp.Tdirty)
#define PL_dumpindent		(aTHXo->interp.Tdumpindent)
#define PL_efloatbuf		(aTHXo->interp.Tefloatbuf)
#define PL_efloatsize		(aTHXo->interp.Tefloatsize)
#define PL_errors		(aTHXo->interp.Terrors)
#define PL_extralen		(aTHXo->interp.Textralen)
#define PL_firstgv		(aTHXo->interp.Tfirstgv)
#define PL_formtarget		(aTHXo->interp.Tformtarget)
#define PL_hv_fetch_ent_mh	(aTHXo->interp.Thv_fetch_ent_mh)
#define PL_hv_fetch_sv		(aTHXo->interp.Thv_fetch_sv)
#define PL_in_eval		(aTHXo->interp.Tin_eval)
#define PL_last_in_gv		(aTHXo->interp.Tlast_in_gv)
#define PL_lastgotoprobe	(aTHXo->interp.Tlastgotoprobe)
#define PL_lastscream		(aTHXo->interp.Tlastscream)
#define PL_localizing		(aTHXo->interp.Tlocalizing)
#define PL_mainstack		(aTHXo->interp.Tmainstack)
#define PL_markstack		(aTHXo->interp.Tmarkstack)
#define PL_markstack_max	(aTHXo->interp.Tmarkstack_max)
#define PL_markstack_ptr	(aTHXo->interp.Tmarkstack_ptr)
#define PL_maxscream		(aTHXo->interp.Tmaxscream)
#define PL_modcount		(aTHXo->interp.Tmodcount)
#define PL_na			(aTHXo->interp.Tna)
#define PL_nrs			(aTHXo->interp.Tnrs)
#define PL_ofs			(aTHXo->interp.Tofs)
#define PL_ofslen		(aTHXo->interp.Tofslen)
#define PL_op			(aTHXo->interp.Top)
#define PL_opsave		(aTHXo->interp.Topsave)
#define PL_protect		(aTHXo->interp.Tprotect)
#define PL_reg_call_cc		(aTHXo->interp.Treg_call_cc)
#define PL_reg_curpm		(aTHXo->interp.Treg_curpm)
#define PL_reg_eval_set		(aTHXo->interp.Treg_eval_set)
#define PL_reg_flags		(aTHXo->interp.Treg_flags)
#define PL_reg_ganch		(aTHXo->interp.Treg_ganch)
#define PL_reg_leftiter		(aTHXo->interp.Treg_leftiter)
#define PL_reg_magic		(aTHXo->interp.Treg_magic)
#define PL_reg_maxiter		(aTHXo->interp.Treg_maxiter)
#define PL_reg_oldcurpm		(aTHXo->interp.Treg_oldcurpm)
#define PL_reg_oldpos		(aTHXo->interp.Treg_oldpos)
#define PL_reg_oldsaved		(aTHXo->interp.Treg_oldsaved)
#define PL_reg_oldsavedlen	(aTHXo->interp.Treg_oldsavedlen)
#define PL_reg_poscache		(aTHXo->interp.Treg_poscache)
#define PL_reg_poscache_size	(aTHXo->interp.Treg_poscache_size)
#define PL_reg_re		(aTHXo->interp.Treg_re)
#define PL_reg_start_tmp	(aTHXo->interp.Treg_start_tmp)
#define PL_reg_start_tmpl	(aTHXo->interp.Treg_start_tmpl)
#define PL_reg_starttry		(aTHXo->interp.Treg_starttry)
#define PL_reg_sv		(aTHXo->interp.Treg_sv)
#define PL_reg_whilem_seen	(aTHXo->interp.Treg_whilem_seen)
#define PL_regbol		(aTHXo->interp.Tregbol)
#define PL_regcc		(aTHXo->interp.Tregcc)
#define PL_regcode		(aTHXo->interp.Tregcode)
#define PL_regcomp_parse	(aTHXo->interp.Tregcomp_parse)
#define PL_regcomp_rx		(aTHXo->interp.Tregcomp_rx)
#define PL_regcompp		(aTHXo->interp.Tregcompp)
#define PL_regdata		(aTHXo->interp.Tregdata)
#define PL_regdummy		(aTHXo->interp.Tregdummy)
#define PL_regendp		(aTHXo->interp.Tregendp)
#define PL_regeol		(aTHXo->interp.Tregeol)
#define PL_regexecp		(aTHXo->interp.Tregexecp)
#define PL_regflags		(aTHXo->interp.Tregflags)
#define PL_regfree		(aTHXo->interp.Tregfree)
#define PL_regindent		(aTHXo->interp.Tregindent)
#define PL_reginput		(aTHXo->interp.Treginput)
#define PL_regint_start		(aTHXo->interp.Tregint_start)
#define PL_regint_string	(aTHXo->interp.Tregint_string)
#define PL_reginterp_cnt	(aTHXo->interp.Treginterp_cnt)
#define PL_reglastparen		(aTHXo->interp.Treglastparen)
#define PL_regnarrate		(aTHXo->interp.Tregnarrate)
#define PL_regnaughty		(aTHXo->interp.Tregnaughty)
#define PL_regnpar		(aTHXo->interp.Tregnpar)
#define PL_regprecomp		(aTHXo->interp.Tregprecomp)
#define PL_regprev		(aTHXo->interp.Tregprev)
#define PL_regprogram		(aTHXo->interp.Tregprogram)
#define PL_regsawback		(aTHXo->interp.Tregsawback)
#define PL_regseen		(aTHXo->interp.Tregseen)
#define PL_regsize		(aTHXo->interp.Tregsize)
#define PL_regstartp		(aTHXo->interp.Tregstartp)
#define PL_regtill		(aTHXo->interp.Tregtill)
#define PL_regxend		(aTHXo->interp.Tregxend)
#define PL_restartop		(aTHXo->interp.Trestartop)
#define PL_retstack		(aTHXo->interp.Tretstack)
#define PL_retstack_ix		(aTHXo->interp.Tretstack_ix)
#define PL_retstack_max		(aTHXo->interp.Tretstack_max)
#define PL_rs			(aTHXo->interp.Trs)
#define PL_savestack		(aTHXo->interp.Tsavestack)
#define PL_savestack_ix		(aTHXo->interp.Tsavestack_ix)
#define PL_savestack_max	(aTHXo->interp.Tsavestack_max)
#define PL_scopestack		(aTHXo->interp.Tscopestack)
#define PL_scopestack_ix	(aTHXo->interp.Tscopestack_ix)
#define PL_scopestack_max	(aTHXo->interp.Tscopestack_max)
#define PL_screamfirst		(aTHXo->interp.Tscreamfirst)
#define PL_screamnext		(aTHXo->interp.Tscreamnext)
#define PL_secondgv		(aTHXo->interp.Tsecondgv)
#define PL_seen_evals		(aTHXo->interp.Tseen_evals)
#define PL_seen_zerolen		(aTHXo->interp.Tseen_zerolen)
#define PL_sortcop		(aTHXo->interp.Tsortcop)
#define PL_sortcxix		(aTHXo->interp.Tsortcxix)
#define PL_sortstash		(aTHXo->interp.Tsortstash)
#define PL_stack_base		(aTHXo->interp.Tstack_base)
#define PL_stack_max		(aTHXo->interp.Tstack_max)
#define PL_stack_sp		(aTHXo->interp.Tstack_sp)
#define PL_start_env		(aTHXo->interp.Tstart_env)
#define PL_statbuf		(aTHXo->interp.Tstatbuf)
#define PL_statcache		(aTHXo->interp.Tstatcache)
#define PL_statgv		(aTHXo->interp.Tstatgv)
#define PL_statname		(aTHXo->interp.Tstatname)
#define PL_tainted		(aTHXo->interp.Ttainted)
#define PL_timesbuf		(aTHXo->interp.Ttimesbuf)
#define PL_tmps_floor		(aTHXo->interp.Ttmps_floor)
#define PL_tmps_ix		(aTHXo->interp.Ttmps_ix)
#define PL_tmps_max		(aTHXo->interp.Ttmps_max)
#define PL_tmps_stack		(aTHXo->interp.Ttmps_stack)
#define PL_top_env		(aTHXo->interp.Ttop_env)
#define PL_toptarget		(aTHXo->interp.Ttoptarget)
#define PL_watchaddr		(aTHXo->interp.Twatchaddr)
#define PL_watchok		(aTHXo->interp.Twatchok)
#define PL_Argv			(aTHXo->interp.IArgv)
#define PL_Cmd			(aTHXo->interp.ICmd)
#define PL_DBcv			(aTHXo->interp.IDBcv)
#define PL_DBgv			(aTHXo->interp.IDBgv)
#define PL_DBline		(aTHXo->interp.IDBline)
#define PL_DBsignal		(aTHXo->interp.IDBsignal)
#define PL_DBsingle		(aTHXo->interp.IDBsingle)
#define PL_DBsub		(aTHXo->interp.IDBsub)
#define PL_DBtrace		(aTHXo->interp.IDBtrace)
#define PL_Dir			(aTHXo->interp.IDir)
#define PL_Env			(aTHXo->interp.IEnv)
#define PL_LIO			(aTHXo->interp.ILIO)
#define PL_Mem			(aTHXo->interp.IMem)
#define PL_MemParse		(aTHXo->interp.IMemParse)
#define PL_MemShared		(aTHXo->interp.IMemShared)
#define PL_Proc			(aTHXo->interp.IProc)
#define PL_Sock			(aTHXo->interp.ISock)
#define PL_StdIO		(aTHXo->interp.IStdIO)
#define PL_amagic_generation	(aTHXo->interp.Iamagic_generation)
#define PL_an			(aTHXo->interp.Ian)
#define PL_argvgv		(aTHXo->interp.Iargvgv)
#define PL_argvout_stack	(aTHXo->interp.Iargvout_stack)
#define PL_argvoutgv		(aTHXo->interp.Iargvoutgv)
#define PL_basetime		(aTHXo->interp.Ibasetime)
#define PL_beginav		(aTHXo->interp.Ibeginav)
#define PL_beginav_save		(aTHXo->interp.Ibeginav_save)
#define PL_bitcount		(aTHXo->interp.Ibitcount)
#define PL_bufend		(aTHXo->interp.Ibufend)
#define PL_bufptr		(aTHXo->interp.Ibufptr)
#define PL_checkav		(aTHXo->interp.Icheckav)
#define PL_collation_ix		(aTHXo->interp.Icollation_ix)
#define PL_collation_name	(aTHXo->interp.Icollation_name)
#define PL_collation_standard	(aTHXo->interp.Icollation_standard)
#define PL_collxfrm_base	(aTHXo->interp.Icollxfrm_base)
#define PL_collxfrm_mult	(aTHXo->interp.Icollxfrm_mult)
#define PL_compcv		(aTHXo->interp.Icompcv)
#define PL_compiling		(aTHXo->interp.Icompiling)
#define PL_comppad		(aTHXo->interp.Icomppad)
#define PL_comppad_name		(aTHXo->interp.Icomppad_name)
#define PL_comppad_name_fill	(aTHXo->interp.Icomppad_name_fill)
#define PL_comppad_name_floor	(aTHXo->interp.Icomppad_name_floor)
#define PL_cop_seqmax		(aTHXo->interp.Icop_seqmax)
#define PL_copline		(aTHXo->interp.Icopline)
#define PL_cred_mutex		(aTHXo->interp.Icred_mutex)
#define PL_cryptseen		(aTHXo->interp.Icryptseen)
#define PL_cshlen		(aTHXo->interp.Icshlen)
#define PL_cshname		(aTHXo->interp.Icshname)
#define PL_curcopdb		(aTHXo->interp.Icurcopdb)
#define PL_curstname		(aTHXo->interp.Icurstname)
#define PL_curthr		(aTHXo->interp.Icurthr)
#define PL_dbargs		(aTHXo->interp.Idbargs)
#define PL_debstash		(aTHXo->interp.Idebstash)
#define PL_debug		(aTHXo->interp.Idebug)
#define PL_defgv		(aTHXo->interp.Idefgv)
#define PL_diehook		(aTHXo->interp.Idiehook)
#define PL_doextract		(aTHXo->interp.Idoextract)
#define PL_doswitches		(aTHXo->interp.Idoswitches)
#define PL_dowarn		(aTHXo->interp.Idowarn)
#define PL_dummy1_bincompat	(aTHXo->interp.Idummy1_bincompat)
#define PL_e_script		(aTHXo->interp.Ie_script)
#define PL_egid			(aTHXo->interp.Iegid)
#define PL_endav		(aTHXo->interp.Iendav)
#define PL_envgv		(aTHXo->interp.Ienvgv)
#define PL_errgv		(aTHXo->interp.Ierrgv)
#define PL_error_count		(aTHXo->interp.Ierror_count)
#define PL_euid			(aTHXo->interp.Ieuid)
#define PL_eval_cond		(aTHXo->interp.Ieval_cond)
#define PL_eval_mutex		(aTHXo->interp.Ieval_mutex)
#define PL_eval_owner		(aTHXo->interp.Ieval_owner)
#define PL_eval_root		(aTHXo->interp.Ieval_root)
#define PL_eval_start		(aTHXo->interp.Ieval_start)
#define PL_evalseq		(aTHXo->interp.Ievalseq)
#define PL_exit_flags		(aTHXo->interp.Iexit_flags)
#define PL_exitlist		(aTHXo->interp.Iexitlist)
#define PL_exitlistlen		(aTHXo->interp.Iexitlistlen)
#define PL_expect		(aTHXo->interp.Iexpect)
#define PL_fdpid		(aTHXo->interp.Ifdpid)
#define PL_fdpid_mutex		(aTHXo->interp.Ifdpid_mutex)
#define PL_filemode		(aTHXo->interp.Ifilemode)
#define PL_forkprocess		(aTHXo->interp.Iforkprocess)
#define PL_formfeed		(aTHXo->interp.Iformfeed)
#define PL_generation		(aTHXo->interp.Igeneration)
#define PL_gensym		(aTHXo->interp.Igensym)
#define PL_gid			(aTHXo->interp.Igid)
#define PL_glob_index		(aTHXo->interp.Iglob_index)
#define PL_globalstash		(aTHXo->interp.Iglobalstash)
#define PL_he_arenaroot		(aTHXo->interp.Ihe_arenaroot)
#define PL_he_root		(aTHXo->interp.Ihe_root)
#define PL_hintgv		(aTHXo->interp.Ihintgv)
#define PL_hints		(aTHXo->interp.Ihints)
#define PL_in_clean_all		(aTHXo->interp.Iin_clean_all)
#define PL_in_clean_objs	(aTHXo->interp.Iin_clean_objs)
#define PL_in_my		(aTHXo->interp.Iin_my)
#define PL_in_my_stash		(aTHXo->interp.Iin_my_stash)
#define PL_incgv		(aTHXo->interp.Iincgv)
#define PL_initav		(aTHXo->interp.Iinitav)
#define PL_inplace		(aTHXo->interp.Iinplace)
#define PL_last_lop		(aTHXo->interp.Ilast_lop)
#define PL_last_lop_op		(aTHXo->interp.Ilast_lop_op)
#define PL_last_swash_hv	(aTHXo->interp.Ilast_swash_hv)
#define PL_last_swash_key	(aTHXo->interp.Ilast_swash_key)
#define PL_last_swash_klen	(aTHXo->interp.Ilast_swash_klen)
#define PL_last_swash_slen	(aTHXo->interp.Ilast_swash_slen)
#define PL_last_swash_tmps	(aTHXo->interp.Ilast_swash_tmps)
#define PL_last_uni		(aTHXo->interp.Ilast_uni)
#define PL_lastfd		(aTHXo->interp.Ilastfd)
#define PL_laststatval		(aTHXo->interp.Ilaststatval)
#define PL_laststype		(aTHXo->interp.Ilaststype)
#define PL_lex_brackets		(aTHXo->interp.Ilex_brackets)
#define PL_lex_brackstack	(aTHXo->interp.Ilex_brackstack)
#define PL_lex_casemods		(aTHXo->interp.Ilex_casemods)
#define PL_lex_casestack	(aTHXo->interp.Ilex_casestack)
#define PL_lex_defer		(aTHXo->interp.Ilex_defer)
#define PL_lex_dojoin		(aTHXo->interp.Ilex_dojoin)
#define PL_lex_expect		(aTHXo->interp.Ilex_expect)
#define PL_lex_formbrack	(aTHXo->interp.Ilex_formbrack)
#define PL_lex_inpat		(aTHXo->interp.Ilex_inpat)
#define PL_lex_inwhat		(aTHXo->interp.Ilex_inwhat)
#define PL_lex_op		(aTHXo->interp.Ilex_op)
#define PL_lex_repl		(aTHXo->interp.Ilex_repl)
#define PL_lex_starts		(aTHXo->interp.Ilex_starts)
#define PL_lex_state		(aTHXo->interp.Ilex_state)
#define PL_lex_stuff		(aTHXo->interp.Ilex_stuff)
#define PL_lineary		(aTHXo->interp.Ilineary)
#define PL_linestart		(aTHXo->interp.Ilinestart)
#define PL_linestr		(aTHXo->interp.Ilinestr)
#define PL_localpatches		(aTHXo->interp.Ilocalpatches)
#define PL_main_cv		(aTHXo->interp.Imain_cv)
#define PL_main_root		(aTHXo->interp.Imain_root)
#define PL_main_start		(aTHXo->interp.Imain_start)
#define PL_max_intro_pending	(aTHXo->interp.Imax_intro_pending)
#define PL_maxo			(aTHXo->interp.Imaxo)
#define PL_maxsysfd		(aTHXo->interp.Imaxsysfd)
#define PL_mess_sv		(aTHXo->interp.Imess_sv)
#define PL_min_intro_pending	(aTHXo->interp.Imin_intro_pending)
#define PL_minus_F		(aTHXo->interp.Iminus_F)
#define PL_minus_a		(aTHXo->interp.Iminus_a)
#define PL_minus_c		(aTHXo->interp.Iminus_c)
#define PL_minus_l		(aTHXo->interp.Iminus_l)
#define PL_minus_n		(aTHXo->interp.Iminus_n)
#define PL_minus_p		(aTHXo->interp.Iminus_p)
#define PL_modglobal		(aTHXo->interp.Imodglobal)
#define PL_multi_close		(aTHXo->interp.Imulti_close)
#define PL_multi_end		(aTHXo->interp.Imulti_end)
#define PL_multi_open		(aTHXo->interp.Imulti_open)
#define PL_multi_start		(aTHXo->interp.Imulti_start)
#define PL_multiline		(aTHXo->interp.Imultiline)
#define PL_nexttoke		(aTHXo->interp.Inexttoke)
#define PL_nexttype		(aTHXo->interp.Inexttype)
#define PL_nextval		(aTHXo->interp.Inextval)
#define PL_nice_chunk		(aTHXo->interp.Inice_chunk)
#define PL_nice_chunk_size	(aTHXo->interp.Inice_chunk_size)
#define PL_nomemok		(aTHXo->interp.Inomemok)
#define PL_nthreads		(aTHXo->interp.Inthreads)
#define PL_nthreads_cond	(aTHXo->interp.Inthreads_cond)
#define PL_nullstash		(aTHXo->interp.Inullstash)
#define PL_numeric_local	(aTHXo->interp.Inumeric_local)
#define PL_numeric_name		(aTHXo->interp.Inumeric_name)
#define PL_numeric_radix_sv	(aTHXo->interp.Inumeric_radix_sv)
#define PL_numeric_standard	(aTHXo->interp.Inumeric_standard)
#define PL_ofmt			(aTHXo->interp.Iofmt)
#define PL_oldbufptr		(aTHXo->interp.Ioldbufptr)
#define PL_oldname		(aTHXo->interp.Ioldname)
#define PL_oldoldbufptr		(aTHXo->interp.Ioldoldbufptr)
#define PL_op_mask		(aTHXo->interp.Iop_mask)
#define PL_op_seqmax		(aTHXo->interp.Iop_seqmax)
#define PL_origalen		(aTHXo->interp.Iorigalen)
#define PL_origargc		(aTHXo->interp.Iorigargc)
#define PL_origargv		(aTHXo->interp.Iorigargv)
#define PL_origenviron		(aTHXo->interp.Iorigenviron)
#define PL_origfilename		(aTHXo->interp.Iorigfilename)
#define PL_ors			(aTHXo->interp.Iors)
#define PL_orslen		(aTHXo->interp.Iorslen)
#define PL_osname		(aTHXo->interp.Iosname)
#define PL_pad_reset_pending	(aTHXo->interp.Ipad_reset_pending)
#define PL_padix		(aTHXo->interp.Ipadix)
#define PL_padix_floor		(aTHXo->interp.Ipadix_floor)
#define PL_patchlevel		(aTHXo->interp.Ipatchlevel)
#define PL_pending_ident	(aTHXo->interp.Ipending_ident)
#define PL_perl_destruct_level	(aTHXo->interp.Iperl_destruct_level)
#define PL_perldb		(aTHXo->interp.Iperldb)
#define PL_pidstatus		(aTHXo->interp.Ipidstatus)
#define PL_preambleav		(aTHXo->interp.Ipreambleav)
#define PL_preambled		(aTHXo->interp.Ipreambled)
#define PL_preprocess		(aTHXo->interp.Ipreprocess)
#define PL_profiledata		(aTHXo->interp.Iprofiledata)
#define PL_psig_name		(aTHXo->interp.Ipsig_name)
#define PL_psig_ptr		(aTHXo->interp.Ipsig_ptr)
#define PL_ptr_table		(aTHXo->interp.Iptr_table)
#define PL_replgv		(aTHXo->interp.Ireplgv)
#define PL_rsfp			(aTHXo->interp.Irsfp)
#define PL_rsfp_filters		(aTHXo->interp.Irsfp_filters)
#define PL_runops		(aTHXo->interp.Irunops)
#define PL_sawampersand		(aTHXo->interp.Isawampersand)
#define PL_sh_path		(aTHXo->interp.Ish_path)
#define PL_sighandlerp		(aTHXo->interp.Isighandlerp)
#define PL_splitstr		(aTHXo->interp.Isplitstr)
#define PL_srand_called		(aTHXo->interp.Isrand_called)
#define PL_statusvalue		(aTHXo->interp.Istatusvalue)
#define PL_statusvalue_vms	(aTHXo->interp.Istatusvalue_vms)
#define PL_stderrgv		(aTHXo->interp.Istderrgv)
#define PL_stdingv		(aTHXo->interp.Istdingv)
#define PL_strtab		(aTHXo->interp.Istrtab)
#define PL_strtab_mutex		(aTHXo->interp.Istrtab_mutex)
#define PL_sub_generation	(aTHXo->interp.Isub_generation)
#define PL_sublex_info		(aTHXo->interp.Isublex_info)
#define PL_subline		(aTHXo->interp.Isubline)
#define PL_subname		(aTHXo->interp.Isubname)
#define PL_sv_arenaroot		(aTHXo->interp.Isv_arenaroot)
#define PL_sv_count		(aTHXo->interp.Isv_count)
#define PL_sv_lock_mutex	(aTHXo->interp.Isv_lock_mutex)
#define PL_sv_mutex		(aTHXo->interp.Isv_mutex)
#define PL_sv_no		(aTHXo->interp.Isv_no)
#define PL_sv_objcount		(aTHXo->interp.Isv_objcount)
#define PL_sv_root		(aTHXo->interp.Isv_root)
#define PL_sv_undef		(aTHXo->interp.Isv_undef)
#define PL_sv_yes		(aTHXo->interp.Isv_yes)
#define PL_svref_mutex		(aTHXo->interp.Isvref_mutex)
#define PL_sys_intern		(aTHXo->interp.Isys_intern)
#define PL_tainting		(aTHXo->interp.Itainting)
#define PL_threadnum		(aTHXo->interp.Ithreadnum)
#define PL_threads_mutex	(aTHXo->interp.Ithreads_mutex)
#define PL_threadsv_names	(aTHXo->interp.Ithreadsv_names)
#define PL_thrsv		(aTHXo->interp.Ithrsv)
#define PL_tokenbuf		(aTHXo->interp.Itokenbuf)
#define PL_uid			(aTHXo->interp.Iuid)
#define PL_unsafe		(aTHXo->interp.Iunsafe)
#define PL_utf8_alnum		(aTHXo->interp.Iutf8_alnum)
#define PL_utf8_alnumc		(aTHXo->interp.Iutf8_alnumc)
#define PL_utf8_alpha		(aTHXo->interp.Iutf8_alpha)
#define PL_utf8_ascii		(aTHXo->interp.Iutf8_ascii)
#define PL_utf8_cntrl		(aTHXo->interp.Iutf8_cntrl)
#define PL_utf8_digit		(aTHXo->interp.Iutf8_digit)
#define PL_utf8_graph		(aTHXo->interp.Iutf8_graph)
#define PL_utf8_lower		(aTHXo->interp.Iutf8_lower)
#define PL_utf8_mark		(aTHXo->interp.Iutf8_mark)
#define PL_utf8_print		(aTHXo->interp.Iutf8_print)
#define PL_utf8_punct		(aTHXo->interp.Iutf8_punct)
#define PL_utf8_space		(aTHXo->interp.Iutf8_space)
#define PL_utf8_tolower		(aTHXo->interp.Iutf8_tolower)
#define PL_utf8_totitle		(aTHXo->interp.Iutf8_totitle)
#define PL_utf8_toupper		(aTHXo->interp.Iutf8_toupper)
#define PL_utf8_upper		(aTHXo->interp.Iutf8_upper)
#define PL_utf8_xdigit		(aTHXo->interp.Iutf8_xdigit)
#define PL_uudmap		(aTHXo->interp.Iuudmap)
#define PL_warnhook		(aTHXo->interp.Iwarnhook)
#define PL_widesyscalls		(aTHXo->interp.Iwidesyscalls)
#define PL_xiv_arenaroot	(aTHXo->interp.Ixiv_arenaroot)
#define PL_xiv_root		(aTHXo->interp.Ixiv_root)
#define PL_xnv_arenaroot	(aTHXo->interp.Ixnv_arenaroot)
#define PL_xnv_root		(aTHXo->interp.Ixnv_root)
#define PL_xpv_arenaroot	(aTHXo->interp.Ixpv_arenaroot)
#define PL_xpv_root		(aTHXo->interp.Ixpv_root)
#define PL_xpvav_arenaroot	(aTHXo->interp.Ixpvav_arenaroot)
#define PL_xpvav_root		(aTHXo->interp.Ixpvav_root)
#define PL_xpvbm_arenaroot	(aTHXo->interp.Ixpvbm_arenaroot)
#define PL_xpvbm_root		(aTHXo->interp.Ixpvbm_root)
#define PL_xpvcv_arenaroot	(aTHXo->interp.Ixpvcv_arenaroot)
#define PL_xpvcv_root		(aTHXo->interp.Ixpvcv_root)
#define PL_xpvhv_arenaroot	(aTHXo->interp.Ixpvhv_arenaroot)
#define PL_xpvhv_root		(aTHXo->interp.Ixpvhv_root)
#define PL_xpviv_arenaroot	(aTHXo->interp.Ixpviv_arenaroot)
#define PL_xpviv_root		(aTHXo->interp.Ixpviv_root)
#define PL_xpvlv_arenaroot	(aTHXo->interp.Ixpvlv_arenaroot)
#define PL_xpvlv_root		(aTHXo->interp.Ixpvlv_root)
#define PL_xpvmg_arenaroot	(aTHXo->interp.Ixpvmg_arenaroot)
#define PL_xpvmg_root		(aTHXo->interp.Ixpvmg_root)
#define PL_xpvnv_arenaroot	(aTHXo->interp.Ixpvnv_arenaroot)
#define PL_xpvnv_root		(aTHXo->interp.Ixpvnv_root)
#define PL_xrv_arenaroot	(aTHXo->interp.Ixrv_arenaroot)
#define PL_xrv_root		(aTHXo->interp.Ixrv_root)
#define PL_yychar		(aTHXo->interp.Iyychar)
#define PL_yydebug		(aTHXo->interp.Iyydebug)
#define PL_yyerrflag		(aTHXo->interp.Iyyerrflag)
#define PL_yylval		(aTHXo->interp.Iyylval)
#define PL_yynerrs		(aTHXo->interp.Iyynerrs)
#define PL_yyval		(aTHXo->interp.Iyyval)

#  else	/* !PERL_OBJECT */

/* cases 1 and 4 above */

#define PL_IArgv		PL_Argv
#define PL_ICmd			PL_Cmd
#define PL_IDBcv		PL_DBcv
#define PL_IDBgv		PL_DBgv
#define PL_IDBline		PL_DBline
#define PL_IDBsignal		PL_DBsignal
#define PL_IDBsingle		PL_DBsingle
#define PL_IDBsub		PL_DBsub
#define PL_IDBtrace		PL_DBtrace
#define PL_IDir			PL_Dir
#define PL_IEnv			PL_Env
#define PL_ILIO			PL_LIO
#define PL_IMem			PL_Mem
#define PL_IMemParse		PL_MemParse
#define PL_IMemShared		PL_MemShared
#define PL_IProc		PL_Proc
#define PL_ISock		PL_Sock
#define PL_IStdIO		PL_StdIO
#define PL_Iamagic_generation	PL_amagic_generation
#define PL_Ian			PL_an
#define PL_Iargvgv		PL_argvgv
#define PL_Iargvout_stack	PL_argvout_stack
#define PL_Iargvoutgv		PL_argvoutgv
#define PL_Ibasetime		PL_basetime
#define PL_Ibeginav		PL_beginav
#define PL_Ibeginav_save	PL_beginav_save
#define PL_Ibitcount		PL_bitcount
#define PL_Ibufend		PL_bufend
#define PL_Ibufptr		PL_bufptr
#define PL_Icheckav		PL_checkav
#define PL_Icollation_ix	PL_collation_ix
#define PL_Icollation_name	PL_collation_name
#define PL_Icollation_standard	PL_collation_standard
#define PL_Icollxfrm_base	PL_collxfrm_base
#define PL_Icollxfrm_mult	PL_collxfrm_mult
#define PL_Icompcv		PL_compcv
#define PL_Icompiling		PL_compiling
#define PL_Icomppad		PL_comppad
#define PL_Icomppad_name	PL_comppad_name
#define PL_Icomppad_name_fill	PL_comppad_name_fill
#define PL_Icomppad_name_floor	PL_comppad_name_floor
#define PL_Icop_seqmax		PL_cop_seqmax
#define PL_Icopline		PL_copline
#define PL_Icred_mutex		PL_cred_mutex
#define PL_Icryptseen		PL_cryptseen
#define PL_Icshlen		PL_cshlen
#define PL_Icshname		PL_cshname
#define PL_Icurcopdb		PL_curcopdb
#define PL_Icurstname		PL_curstname
#define PL_Icurthr		PL_curthr
#define PL_Idbargs		PL_dbargs
#define PL_Idebstash		PL_debstash
#define PL_Idebug		PL_debug
#define PL_Idefgv		PL_defgv
#define PL_Idiehook		PL_diehook
#define PL_Idoextract		PL_doextract
#define PL_Idoswitches		PL_doswitches
#define PL_Idowarn		PL_dowarn
#define PL_Idummy1_bincompat	PL_dummy1_bincompat
#define PL_Ie_script		PL_e_script
#define PL_Iegid		PL_egid
#define PL_Iendav		PL_endav
#define PL_Ienvgv		PL_envgv
#define PL_Ierrgv		PL_errgv
#define PL_Ierror_count		PL_error_count
#define PL_Ieuid		PL_euid
#define PL_Ieval_cond		PL_eval_cond
#define PL_Ieval_mutex		PL_eval_mutex
#define PL_Ieval_owner		PL_eval_owner
#define PL_Ieval_root		PL_eval_root
#define PL_Ieval_start		PL_eval_start
#define PL_Ievalseq		PL_evalseq
#define PL_Iexit_flags		PL_exit_flags
#define PL_Iexitlist		PL_exitlist
#define PL_Iexitlistlen		PL_exitlistlen
#define PL_Iexpect		PL_expect
#define PL_Ifdpid		PL_fdpid
#define PL_Ifdpid_mutex		PL_fdpid_mutex
#define PL_Ifilemode		PL_filemode
#define PL_Iforkprocess		PL_forkprocess
#define PL_Iformfeed		PL_formfeed
#define PL_Igeneration		PL_generation
#define PL_Igensym		PL_gensym
#define PL_Igid			PL_gid
#define PL_Iglob_index		PL_glob_index
#define PL_Iglobalstash		PL_globalstash
#define PL_Ihe_arenaroot	PL_he_arenaroot
#define PL_Ihe_root		PL_he_root
#define PL_Ihintgv		PL_hintgv
#define PL_Ihints		PL_hints
#define PL_Iin_clean_all	PL_in_clean_all
#define PL_Iin_clean_objs	PL_in_clean_objs
#define PL_Iin_my		PL_in_my
#define PL_Iin_my_stash		PL_in_my_stash
#define PL_Iincgv		PL_incgv
#define PL_Iinitav		PL_initav
#define PL_Iinplace		PL_inplace
#define PL_Ilast_lop		PL_last_lop
#define PL_Ilast_lop_op		PL_last_lop_op
#define PL_Ilast_swash_hv	PL_last_swash_hv
#define PL_Ilast_swash_key	PL_last_swash_key
#define PL_Ilast_swash_klen	PL_last_swash_klen
#define PL_Ilast_swash_slen	PL_last_swash_slen
#define PL_Ilast_swash_tmps	PL_last_swash_tmps
#define PL_Ilast_uni		PL_last_uni
#define PL_Ilastfd		PL_lastfd
#define PL_Ilaststatval		PL_laststatval
#define PL_Ilaststype		PL_laststype
#define PL_Ilex_brackets	PL_lex_brackets
#define PL_Ilex_brackstack	PL_lex_brackstack
#define PL_Ilex_casemods	PL_lex_casemods
#define PL_Ilex_casestack	PL_lex_casestack
#define PL_Ilex_defer		PL_lex_defer
#define PL_Ilex_dojoin		PL_lex_dojoin
#define PL_Ilex_expect		PL_lex_expect
#define PL_Ilex_formbrack	PL_lex_formbrack
#define PL_Ilex_inpat		PL_lex_inpat
#define PL_Ilex_inwhat		PL_lex_inwhat
#define PL_Ilex_op		PL_lex_op
#define PL_Ilex_repl		PL_lex_repl
#define PL_Ilex_starts		PL_lex_starts
#define PL_Ilex_state		PL_lex_state
#define PL_Ilex_stuff		PL_lex_stuff
#define PL_Ilineary		PL_lineary
#define PL_Ilinestart		PL_linestart
#define PL_Ilinestr		PL_linestr
#define PL_Ilocalpatches	PL_localpatches
#define PL_Imain_cv		PL_main_cv
#define PL_Imain_root		PL_main_root
#define PL_Imain_start		PL_main_start
#define PL_Imax_intro_pending	PL_max_intro_pending
#define PL_Imaxo		PL_maxo
#define PL_Imaxsysfd		PL_maxsysfd
#define PL_Imess_sv		PL_mess_sv
#define PL_Imin_intro_pending	PL_min_intro_pending
#define PL_Iminus_F		PL_minus_F
#define PL_Iminus_a		PL_minus_a
#define PL_Iminus_c		PL_minus_c
#define PL_Iminus_l		PL_minus_l
#define PL_Iminus_n		PL_minus_n
#define PL_Iminus_p		PL_minus_p
#define PL_Imodglobal		PL_modglobal
#define PL_Imulti_close		PL_multi_close
#define PL_Imulti_end		PL_multi_end
#define PL_Imulti_open		PL_multi_open
#define PL_Imulti_start		PL_multi_start
#define PL_Imultiline		PL_multiline
#define PL_Inexttoke		PL_nexttoke
#define PL_Inexttype		PL_nexttype
#define PL_Inextval		PL_nextval
#define PL_Inice_chunk		PL_nice_chunk
#define PL_Inice_chunk_size	PL_nice_chunk_size
#define PL_Inomemok		PL_nomemok
#define PL_Inthreads		PL_nthreads
#define PL_Inthreads_cond	PL_nthreads_cond
#define PL_Inullstash		PL_nullstash
#define PL_Inumeric_local	PL_numeric_local
#define PL_Inumeric_name	PL_numeric_name
#define PL_Inumeric_radix_sv	PL_numeric_radix_sv
#define PL_Inumeric_standard	PL_numeric_standard
#define PL_Iofmt		PL_ofmt
#define PL_Ioldbufptr		PL_oldbufptr
#define PL_Ioldname		PL_oldname
#define PL_Ioldoldbufptr	PL_oldoldbufptr
#define PL_Iop_mask		PL_op_mask
#define PL_Iop_seqmax		PL_op_seqmax
#define PL_Iorigalen		PL_origalen
#define PL_Iorigargc		PL_origargc
#define PL_Iorigargv		PL_origargv
#define PL_Iorigenviron		PL_origenviron
#define PL_Iorigfilename	PL_origfilename
#define PL_Iors			PL_ors
#define PL_Iorslen		PL_orslen
#define PL_Iosname		PL_osname
#define PL_Ipad_reset_pending	PL_pad_reset_pending
#define PL_Ipadix		PL_padix
#define PL_Ipadix_floor		PL_padix_floor
#define PL_Ipatchlevel		PL_patchlevel
#define PL_Ipending_ident	PL_pending_ident
#define PL_Iperl_destruct_level	PL_perl_destruct_level
#define PL_Iperldb		PL_perldb
#define PL_Ipidstatus		PL_pidstatus
#define PL_Ipreambleav		PL_preambleav
#define PL_Ipreambled		PL_preambled
#define PL_Ipreprocess		PL_preprocess
#define PL_Iprofiledata		PL_profiledata
#define PL_Ipsig_name		PL_psig_name
#define PL_Ipsig_ptr		PL_psig_ptr
#define PL_Iptr_table		PL_ptr_table
#define PL_Ireplgv		PL_replgv
#define PL_Irsfp		PL_rsfp
#define PL_Irsfp_filters	PL_rsfp_filters
#define PL_Irunops		PL_runops
#define PL_Isawampersand	PL_sawampersand
#define PL_Ish_path		PL_sh_path
#define PL_Isighandlerp		PL_sighandlerp
#define PL_Isplitstr		PL_splitstr
#define PL_Isrand_called	PL_srand_called
#define PL_Istatusvalue		PL_statusvalue
#define PL_Istatusvalue_vms	PL_statusvalue_vms
#define PL_Istderrgv		PL_stderrgv
#define PL_Istdingv		PL_stdingv
#define PL_Istrtab		PL_strtab
#define PL_Istrtab_mutex	PL_strtab_mutex
#define PL_Isub_generation	PL_sub_generation
#define PL_Isublex_info		PL_sublex_info
#define PL_Isubline		PL_subline
#define PL_Isubname		PL_subname
#define PL_Isv_arenaroot	PL_sv_arenaroot
#define PL_Isv_count		PL_sv_count
#define PL_Isv_lock_mutex	PL_sv_lock_mutex
#define PL_Isv_mutex		PL_sv_mutex
#define PL_Isv_no		PL_sv_no
#define PL_Isv_objcount		PL_sv_objcount
#define PL_Isv_root		PL_sv_root
#define PL_Isv_undef		PL_sv_undef
#define PL_Isv_yes		PL_sv_yes
#define PL_Isvref_mutex		PL_svref_mutex
#define PL_Isys_intern		PL_sys_intern
#define PL_Itainting		PL_tainting
#define PL_Ithreadnum		PL_threadnum
#define PL_Ithreads_mutex	PL_threads_mutex
#define PL_Ithreadsv_names	PL_threadsv_names
#define PL_Ithrsv		PL_thrsv
#define PL_Itokenbuf		PL_tokenbuf
#define PL_Iuid			PL_uid
#define PL_Iunsafe		PL_unsafe
#define PL_Iutf8_alnum		PL_utf8_alnum
#define PL_Iutf8_alnumc		PL_utf8_alnumc
#define PL_Iutf8_alpha		PL_utf8_alpha
#define PL_Iutf8_ascii		PL_utf8_ascii
#define PL_Iutf8_cntrl		PL_utf8_cntrl
#define PL_Iutf8_digit		PL_utf8_digit
#define PL_Iutf8_graph		PL_utf8_graph
#define PL_Iutf8_lower		PL_utf8_lower
#define PL_Iutf8_mark		PL_utf8_mark
#define PL_Iutf8_print		PL_utf8_print
#define PL_Iutf8_punct		PL_utf8_punct
#define PL_Iutf8_space		PL_utf8_space
#define PL_Iutf8_tolower	PL_utf8_tolower
#define PL_Iutf8_totitle	PL_utf8_totitle
#define PL_Iutf8_toupper	PL_utf8_toupper
#define PL_Iutf8_upper		PL_utf8_upper
#define PL_Iutf8_xdigit		PL_utf8_xdigit
#define PL_Iuudmap		PL_uudmap
#define PL_Iwarnhook		PL_warnhook
#define PL_Iwidesyscalls	PL_widesyscalls
#define PL_Ixiv_arenaroot	PL_xiv_arenaroot
#define PL_Ixiv_root		PL_xiv_root
#define PL_Ixnv_arenaroot	PL_xnv_arenaroot
#define PL_Ixnv_root		PL_xnv_root
#define PL_Ixpv_arenaroot	PL_xpv_arenaroot
#define PL_Ixpv_root		PL_xpv_root
#define PL_Ixpvav_arenaroot	PL_xpvav_arenaroot
#define PL_Ixpvav_root		PL_xpvav_root
#define PL_Ixpvbm_arenaroot	PL_xpvbm_arenaroot
#define PL_Ixpvbm_root		PL_xpvbm_root
#define PL_Ixpvcv_arenaroot	PL_xpvcv_arenaroot
#define PL_Ixpvcv_root		PL_xpvcv_root
#define PL_Ixpvhv_arenaroot	PL_xpvhv_arenaroot
#define PL_Ixpvhv_root		PL_xpvhv_root
#define PL_Ixpviv_arenaroot	PL_xpviv_arenaroot
#define PL_Ixpviv_root		PL_xpviv_root
#define PL_Ixpvlv_arenaroot	PL_xpvlv_arenaroot
#define PL_Ixpvlv_root		PL_xpvlv_root
#define PL_Ixpvmg_arenaroot	PL_xpvmg_arenaroot
#define PL_Ixpvmg_root		PL_xpvmg_root
#define PL_Ixpvnv_arenaroot	PL_xpvnv_arenaroot
#define PL_Ixpvnv_root		PL_xpvnv_root
#define PL_Ixrv_arenaroot	PL_xrv_arenaroot
#define PL_Ixrv_root		PL_xrv_root
#define PL_Iyychar		PL_yychar
#define PL_Iyydebug		PL_yydebug
#define PL_Iyyerrflag		PL_yyerrflag
#define PL_Iyylval		PL_yylval
#define PL_Iyynerrs		PL_yynerrs
#define PL_Iyyval		PL_yyval

#    if defined(USE_THREADS)
/* case 4 above */

#define PL_Sv			(aTHX->TSv)
#define PL_Xpv			(aTHX->TXpv)
#define PL_av_fetch_sv		(aTHX->Tav_fetch_sv)
#define PL_bodytarget		(aTHX->Tbodytarget)
#define PL_bostr		(aTHX->Tbostr)
#define PL_chopset		(aTHX->Tchopset)
#define PL_colors		(aTHX->Tcolors)
#define PL_colorset		(aTHX->Tcolorset)
#define PL_curcop		(aTHX->Tcurcop)
#define PL_curpad		(aTHX->Tcurpad)
#define PL_curpm		(aTHX->Tcurpm)
#define PL_curstack		(aTHX->Tcurstack)
#define PL_curstackinfo		(aTHX->Tcurstackinfo)
#define PL_curstash		(aTHX->Tcurstash)
#define PL_defoutgv		(aTHX->Tdefoutgv)
#define PL_defstash		(aTHX->Tdefstash)
#define PL_delaymagic		(aTHX->Tdelaymagic)
#define PL_dirty		(aTHX->Tdirty)
#define PL_dumpindent		(aTHX->Tdumpindent)
#define PL_efloatbuf		(aTHX->Tefloatbuf)
#define PL_efloatsize		(aTHX->Tefloatsize)
#define PL_errors		(aTHX->Terrors)
#define PL_extralen		(aTHX->Textralen)
#define PL_firstgv		(aTHX->Tfirstgv)
#define PL_formtarget		(aTHX->Tformtarget)
#define PL_hv_fetch_ent_mh	(aTHX->Thv_fetch_ent_mh)
#define PL_hv_fetch_sv		(aTHX->Thv_fetch_sv)
#define PL_in_eval		(aTHX->Tin_eval)
#define PL_last_in_gv		(aTHX->Tlast_in_gv)
#define PL_lastgotoprobe	(aTHX->Tlastgotoprobe)
#define PL_lastscream		(aTHX->Tlastscream)
#define PL_localizing		(aTHX->Tlocalizing)
#define PL_mainstack		(aTHX->Tmainstack)
#define PL_markstack		(aTHX->Tmarkstack)
#define PL_markstack_max	(aTHX->Tmarkstack_max)
#define PL_markstack_ptr	(aTHX->Tmarkstack_ptr)
#define PL_maxscream		(aTHX->Tmaxscream)
#define PL_modcount		(aTHX->Tmodcount)
#define PL_na			(aTHX->Tna)
#define PL_nrs			(aTHX->Tnrs)
#define PL_ofs			(aTHX->Tofs)
#define PL_ofslen		(aTHX->Tofslen)
#define PL_op			(aTHX->Top)
#define PL_opsave		(aTHX->Topsave)
#define PL_protect		(aTHX->Tprotect)
#define PL_reg_call_cc		(aTHX->Treg_call_cc)
#define PL_reg_curpm		(aTHX->Treg_curpm)
#define PL_reg_eval_set		(aTHX->Treg_eval_set)
#define PL_reg_flags		(aTHX->Treg_flags)
#define PL_reg_ganch		(aTHX->Treg_ganch)
#define PL_reg_leftiter		(aTHX->Treg_leftiter)
#define PL_reg_magic		(aTHX->Treg_magic)
#define PL_reg_maxiter		(aTHX->Treg_maxiter)
#define PL_reg_oldcurpm		(aTHX->Treg_oldcurpm)
#define PL_reg_oldpos		(aTHX->Treg_oldpos)
#define PL_reg_oldsaved		(aTHX->Treg_oldsaved)
#define PL_reg_oldsavedlen	(aTHX->Treg_oldsavedlen)
#define PL_reg_poscache		(aTHX->Treg_poscache)
#define PL_reg_poscache_size	(aTHX->Treg_poscache_size)
#define PL_reg_re		(aTHX->Treg_re)
#define PL_reg_start_tmp	(aTHX->Treg_start_tmp)
#define PL_reg_start_tmpl	(aTHX->Treg_start_tmpl)
#define PL_reg_starttry		(aTHX->Treg_starttry)
#define PL_reg_sv		(aTHX->Treg_sv)
#define PL_reg_whilem_seen	(aTHX->Treg_whilem_seen)
#define PL_regbol		(aTHX->Tregbol)
#define PL_regcc		(aTHX->Tregcc)
#define PL_regcode		(aTHX->Tregcode)
#define PL_regcomp_parse	(aTHX->Tregcomp_parse)
#define PL_regcomp_rx		(aTHX->Tregcomp_rx)
#define PL_regcompp		(aTHX->Tregcompp)
#define PL_regdata		(aTHX->Tregdata)
#define PL_regdummy		(aTHX->Tregdummy)
#define PL_regendp		(aTHX->Tregendp)
#define PL_regeol		(aTHX->Tregeol)
#define PL_regexecp		(aTHX->Tregexecp)
#define PL_regflags		(aTHX->Tregflags)
#define PL_regfree		(aTHX->Tregfree)
#define PL_regindent		(aTHX->Tregindent)
#define PL_reginput		(aTHX->Treginput)
#define PL_regint_start		(aTHX->Tregint_start)
#define PL_regint_string	(aTHX->Tregint_string)
#define PL_reginterp_cnt	(aTHX->Treginterp_cnt)
#define PL_reglastparen		(aTHX->Treglastparen)
#define PL_regnarrate		(aTHX->Tregnarrate)
#define PL_regnaughty		(aTHX->Tregnaughty)
#define PL_regnpar		(aTHX->Tregnpar)
#define PL_regprecomp		(aTHX->Tregprecomp)
#define PL_regprev		(aTHX->Tregprev)
#define PL_regprogram		(aTHX->Tregprogram)
#define PL_regsawback		(aTHX->Tregsawback)
#define PL_regseen		(aTHX->Tregseen)
#define PL_regsize		(aTHX->Tregsize)
#define PL_regstartp		(aTHX->Tregstartp)
#define PL_regtill		(aTHX->Tregtill)
#define PL_regxend		(aTHX->Tregxend)
#define PL_restartop		(aTHX->Trestartop)
#define PL_retstack		(aTHX->Tretstack)
#define PL_retstack_ix		(aTHX->Tretstack_ix)
#define PL_retstack_max		(aTHX->Tretstack_max)
#define PL_rs			(aTHX->Trs)
#define PL_savestack		(aTHX->Tsavestack)
#define PL_savestack_ix		(aTHX->Tsavestack_ix)
#define PL_savestack_max	(aTHX->Tsavestack_max)
#define PL_scopestack		(aTHX->Tscopestack)
#define PL_scopestack_ix	(aTHX->Tscopestack_ix)
#define PL_scopestack_max	(aTHX->Tscopestack_max)
#define PL_screamfirst		(aTHX->Tscreamfirst)
#define PL_screamnext		(aTHX->Tscreamnext)
#define PL_secondgv		(aTHX->Tsecondgv)
#define PL_seen_evals		(aTHX->Tseen_evals)
#define PL_seen_zerolen		(aTHX->Tseen_zerolen)
#define PL_sortcop		(aTHX->Tsortcop)
#define PL_sortcxix		(aTHX->Tsortcxix)
#define PL_sortstash		(aTHX->Tsortstash)
#define PL_stack_base		(aTHX->Tstack_base)
#define PL_stack_max		(aTHX->Tstack_max)
#define PL_stack_sp		(aTHX->Tstack_sp)
#define PL_start_env		(aTHX->Tstart_env)
#define PL_statbuf		(aTHX->Tstatbuf)
#define PL_statcache		(aTHX->Tstatcache)
#define PL_statgv		(aTHX->Tstatgv)
#define PL_statname		(aTHX->Tstatname)
#define PL_tainted		(aTHX->Ttainted)
#define PL_timesbuf		(aTHX->Ttimesbuf)
#define PL_tmps_floor		(aTHX->Ttmps_floor)
#define PL_tmps_ix		(aTHX->Ttmps_ix)
#define PL_tmps_max		(aTHX->Ttmps_max)
#define PL_tmps_stack		(aTHX->Ttmps_stack)
#define PL_top_env		(aTHX->Ttop_env)
#define PL_toptarget		(aTHX->Ttoptarget)
#define PL_watchaddr		(aTHX->Twatchaddr)
#define PL_watchok		(aTHX->Twatchok)

#    else	/* !USE_THREADS */
/* case 1 above */

#define PL_TSv			PL_Sv
#define PL_TXpv			PL_Xpv
#define PL_Tav_fetch_sv		PL_av_fetch_sv
#define PL_Tbodytarget		PL_bodytarget
#define PL_Tbostr		PL_bostr
#define PL_Tchopset		PL_chopset
#define PL_Tcolors		PL_colors
#define PL_Tcolorset		PL_colorset
#define PL_Tcurcop		PL_curcop
#define PL_Tcurpad		PL_curpad
#define PL_Tcurpm		PL_curpm
#define PL_Tcurstack		PL_curstack
#define PL_Tcurstackinfo	PL_curstackinfo
#define PL_Tcurstash		PL_curstash
#define PL_Tdefoutgv		PL_defoutgv
#define PL_Tdefstash		PL_defstash
#define PL_Tdelaymagic		PL_delaymagic
#define PL_Tdirty		PL_dirty
#define PL_Tdumpindent		PL_dumpindent
#define PL_Tefloatbuf		PL_efloatbuf
#define PL_Tefloatsize		PL_efloatsize
#define PL_Terrors		PL_errors
#define PL_Textralen		PL_extralen
#define PL_Tfirstgv		PL_firstgv
#define PL_Tformtarget		PL_formtarget
#define PL_Thv_fetch_ent_mh	PL_hv_fetch_ent_mh
#define PL_Thv_fetch_sv		PL_hv_fetch_sv
#define PL_Tin_eval		PL_in_eval
#define PL_Tlast_in_gv		PL_last_in_gv
#define PL_Tlastgotoprobe	PL_lastgotoprobe
#define PL_Tlastscream		PL_lastscream
#define PL_Tlocalizing		PL_localizing
#define PL_Tmainstack		PL_mainstack
#define PL_Tmarkstack		PL_markstack
#define PL_Tmarkstack_max	PL_markstack_max
#define PL_Tmarkstack_ptr	PL_markstack_ptr
#define PL_Tmaxscream		PL_maxscream
#define PL_Tmodcount		PL_modcount
#define PL_Tna			PL_na
#define PL_Tnrs			PL_nrs
#define PL_Tofs			PL_ofs
#define PL_Tofslen		PL_ofslen
#define PL_Top			PL_op
#define PL_Topsave		PL_opsave
#define PL_Tprotect		PL_protect
#define PL_Treg_call_cc		PL_reg_call_cc
#define PL_Treg_curpm		PL_reg_curpm
#define PL_Treg_eval_set	PL_reg_eval_set
#define PL_Treg_flags		PL_reg_flags
#define PL_Treg_ganch		PL_reg_ganch
#define PL_Treg_leftiter	PL_reg_leftiter
#define PL_Treg_magic		PL_reg_magic
#define PL_Treg_maxiter		PL_reg_maxiter
#define PL_Treg_oldcurpm	PL_reg_oldcurpm
#define PL_Treg_oldpos		PL_reg_oldpos
#define PL_Treg_oldsaved	PL_reg_oldsaved
#define PL_Treg_oldsavedlen	PL_reg_oldsavedlen
#define PL_Treg_poscache	PL_reg_poscache
#define PL_Treg_poscache_size	PL_reg_poscache_size
#define PL_Treg_re		PL_reg_re
#define PL_Treg_start_tmp	PL_reg_start_tmp
#define PL_Treg_start_tmpl	PL_reg_start_tmpl
#define PL_Treg_starttry	PL_reg_starttry
#define PL_Treg_sv		PL_reg_sv
#define PL_Treg_whilem_seen	PL_reg_whilem_seen
#define PL_Tregbol		PL_regbol
#define PL_Tregcc		PL_regcc
#define PL_Tregcode		PL_regcode
#define PL_Tregcomp_parse	PL_regcomp_parse
#define PL_Tregcomp_rx		PL_regcomp_rx
#define PL_Tregcompp		PL_regcompp
#define PL_Tregdata		PL_regdata
#define PL_Tregdummy		PL_regdummy
#define PL_Tregendp		PL_regendp
#define PL_Tregeol		PL_regeol
#define PL_Tregexecp		PL_regexecp
#define PL_Tregflags		PL_regflags
#define PL_Tregfree		PL_regfree
#define PL_Tregindent		PL_regindent
#define PL_Treginput		PL_reginput
#define PL_Tregint_start	PL_regint_start
#define PL_Tregint_string	PL_regint_string
#define PL_Treginterp_cnt	PL_reginterp_cnt
#define PL_Treglastparen	PL_reglastparen
#define PL_Tregnarrate		PL_regnarrate
#define PL_Tregnaughty		PL_regnaughty
#define PL_Tregnpar		PL_regnpar
#define PL_Tregprecomp		PL_regprecomp
#define PL_Tregprev		PL_regprev
#define PL_Tregprogram		PL_regprogram
#define PL_Tregsawback		PL_regsawback
#define PL_Tregseen		PL_regseen
#define PL_Tregsize		PL_regsize
#define PL_Tregstartp		PL_regstartp
#define PL_Tregtill		PL_regtill
#define PL_Tregxend		PL_regxend
#define PL_Trestartop		PL_restartop
#define PL_Tretstack		PL_retstack
#define PL_Tretstack_ix		PL_retstack_ix
#define PL_Tretstack_max	PL_retstack_max
#define PL_Trs			PL_rs
#define PL_Tsavestack		PL_savestack
#define PL_Tsavestack_ix	PL_savestack_ix
#define PL_Tsavestack_max	PL_savestack_max
#define PL_Tscopestack		PL_scopestack
#define PL_Tscopestack_ix	PL_scopestack_ix
#define PL_Tscopestack_max	PL_scopestack_max
#define PL_Tscreamfirst		PL_screamfirst
#define PL_Tscreamnext		PL_screamnext
#define PL_Tsecondgv		PL_secondgv
#define PL_Tseen_evals		PL_seen_evals
#define PL_Tseen_zerolen	PL_seen_zerolen
#define PL_Tsortcop		PL_sortcop
#define PL_Tsortcxix		PL_sortcxix
#define PL_Tsortstash		PL_sortstash
#define PL_Tstack_base		PL_stack_base
#define PL_Tstack_max		PL_stack_max
#define PL_Tstack_sp		PL_stack_sp
#define PL_Tstart_env		PL_start_env
#define PL_Tstatbuf		PL_statbuf
#define PL_Tstatcache		PL_statcache
#define PL_Tstatgv		PL_statgv
#define PL_Tstatname		PL_statname
#define PL_Ttainted		PL_tainted
#define PL_Ttimesbuf		PL_timesbuf
#define PL_Ttmps_floor		PL_tmps_floor
#define PL_Ttmps_ix		PL_tmps_ix
#define PL_Ttmps_max		PL_tmps_max
#define PL_Ttmps_stack		PL_tmps_stack
#define PL_Ttop_env		PL_top_env
#define PL_Ttoptarget		PL_toptarget
#define PL_Twatchaddr		PL_watchaddr
#define PL_Twatchok		PL_watchok

#    endif	/* USE_THREADS */
#  endif	/* PERL_OBJECT */
#endif	/* MULTIPLICITY */

#if defined(PERL_GLOBAL_STRUCT)

#define PL_No			(PL_Vars.GNo)
#define PL_Yes			(PL_Vars.GYes)
#define PL_curinterp		(PL_Vars.Gcurinterp)
#define PL_do_undump		(PL_Vars.Gdo_undump)
#define PL_hexdigit		(PL_Vars.Ghexdigit)
#define PL_malloc_mutex		(PL_Vars.Gmalloc_mutex)
#define PL_op_mutex		(PL_Vars.Gop_mutex)
#define PL_patleave		(PL_Vars.Gpatleave)
#define PL_thr_key		(PL_Vars.Gthr_key)

#else /* !PERL_GLOBAL_STRUCT */

#define PL_GNo			PL_No
#define PL_GYes			PL_Yes
#define PL_Gcurinterp		PL_curinterp
#define PL_Gdo_undump		PL_do_undump
#define PL_Ghexdigit		PL_hexdigit
#define PL_Gmalloc_mutex	PL_malloc_mutex
#define PL_Gop_mutex		PL_op_mutex
#define PL_Gpatleave		PL_patleave
#define PL_Gthr_key		PL_thr_key

#endif /* PERL_GLOBAL_STRUCT */

#ifdef PERL_POLLUTE		/* disabled by default in 5.6.0 */

#define DBsingle		PL_DBsingle
#define DBsub			PL_DBsub
#define compiling		PL_compiling
#define curcop			PL_curcop
#define curstash		PL_curstash
#define debstash		PL_debstash
#define defgv			PL_defgv
#define diehook			PL_diehook
#define dirty			PL_dirty
#define dowarn			PL_dowarn
#define errgv			PL_errgv
#define na			PL_na
#define no_modify		PL_no_modify
#define perl_destruct_level	PL_perl_destruct_level
#define perldb			PL_perldb
#define ppaddr			PL_ppaddr
#define rsfp			PL_rsfp
#define rsfp_filters		PL_rsfp_filters
#define stack_base		PL_stack_base
#define stack_sp		PL_stack_sp
#define stdingv			PL_stdingv
#define sv_arenaroot		PL_sv_arenaroot
#define sv_no			PL_sv_no
#define sv_undef		PL_sv_undef
#define sv_yes			PL_sv_yes
#define tainted			PL_tainted
#define tainting		PL_tainting

#endif /* PERL_POLLUTE */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\fakethr.h ===
typedef int perl_mutex;
typedef int perl_key;

typedef struct perl_thread *perl_os_thread;
/* With fake threads, thr is global(ish) so we don't need dTHR */
#define dTHR extern int errno

struct perl_wait_queue {
    struct perl_thread *	thread;
    struct perl_wait_queue *	next;
};
typedef struct perl_wait_queue *perl_cond;

/* Ask thread.h to include our per-thread extras */
#define HAVE_THREAD_INTERN
struct thread_intern {
    perl_os_thread next_run, prev_run;  /* Linked list of runnable threads */
    perl_cond   wait_queue;             /* Wait queue that we are waiting on */
    IV          private;                /* Holds data across time slices */
    I32         savemark;               /* Holds MARK for thread join values */
};

#define init_thread_intern(t) 				\
    STMT_START {					\
	t->self = (t);					\
	(t)->i.next_run = (t)->i.prev_run = (t);	\
	(t)->i.wait_queue = 0;				\
	(t)->i.private = 0;				\
    } STMT_END

/*
 * Note that SCHEDULE() is only callable from pp code (which
 * must be expecting to be restarted). We'll have to do
 * something a bit different for XS code.
 */

#define SCHEDULE() return schedule(), PL_op

#define MUTEX_LOCK(m)
#define MUTEX_UNLOCK(m)
#define MUTEX_INIT(m)
#define MUTEX_DESTROY(m)
#define COND_INIT(c) perl_cond_init(c)
#define COND_SIGNAL(c) perl_cond_signal(c)
#define COND_BROADCAST(c) perl_cond_broadcast(c)
#define COND_WAIT(c, m)		\
    STMT_START {		\
	perl_cond_wait(c);	\
	SCHEDULE();		\
    } STMT_END
#define COND_DESTROY(c)

#define THREAD_CREATE(t, f)	f((t))
#define THREAD_POST_CREATE(t)	NOOP

#define YIELD	NOOP
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\extern.h ===
/*    EXTERN.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * EXT  designates a global var which is defined in perl.h
 * dEXT designates a global var which is defined in another
 *      file, so we can't count on finding it in perl.h
 *      (this practice should be avoided).
 */
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST
#if defined(VMS) && !defined(__GNUC__)
    /* Suppress portability warnings from DECC for VMS-specific extensions */
#  ifdef __DECC
#    pragma message disable (GLOBALEXT,NOSHAREEXT,READONLYEXT)
#  endif
#  define EXT globalref
#  define dEXT globaldef {"$GLOBAL_RW_VARS"} noshare
#  define EXTCONST globalref
#  define dEXTCONST globaldef {"$GLOBAL_RO_VARS"} readonly
#else
#  if defined(WIN32) && !defined(PERL_STATIC_SYMS) && !defined(PERL_OBJECT)
#    ifdef PERLDLL
#      define EXT extern __declspec(dllexport)
#      define dEXT 
#      define EXTCONST extern __declspec(dllexport) const
#      define dEXTCONST const
#    else
#      define EXT extern __declspec(dllimport)
#      define dEXT 
#      define EXTCONST extern __declspec(dllimport) const
#      define dEXTCONST const
#    endif
#  else
#    if defined(__CYGWIN__) && defined(USEIMPORTLIB)
#      define EXT extern __declspec(dllimport)
#      define dEXT 
#      define EXTCONST extern __declspec(dllimport) const
#      define dEXTCONST const
#    else
#      define EXT extern
#      define dEXT
#      define EXTCONST extern const
#      define dEXTCONST const
#    endif
#  endif
#endif

#undef INIT
#define INIT(x)

#undef DOINIT
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\gv.h ===
/*    gv.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

struct gp {
    SV *	gp_sv;		/* scalar value */
    U32		gp_refcnt;	/* how many globs point to this? */
    struct io *	gp_io;		/* filehandle value */
    CV *	gp_form;	/* format value */
    AV *	gp_av;		/* array value */
    HV *	gp_hv;		/* hash value */
    GV *	gp_egv;		/* effective gv, if *glob */
    CV *	gp_cv;		/* subroutine value */
    U32		gp_cvgen;	/* generational validity of cached gv_cv */
    U32		gp_flags;	/* XXX unused */
    line_t	gp_line;	/* line first declared at (for -w) */
    char *	gp_file;	/* file first declared in (for -w) */
};

#if defined(CRIPPLED_CC) && (defined(iAPX286) || defined(M_I286) || defined(I80286))
#define MICROPORT
#endif

#define GvXPVGV(gv)	((XPVGV*)SvANY(gv))

#define GvGP(gv)	(GvXPVGV(gv)->xgv_gp)
#define GvNAME(gv)	(GvXPVGV(gv)->xgv_name)
#define GvNAMELEN(gv)	(GvXPVGV(gv)->xgv_namelen)
#define GvSTASH(gv)	(GvXPVGV(gv)->xgv_stash)
#define GvFLAGS(gv)	(GvXPVGV(gv)->xgv_flags)

/*
=for apidoc Am|SV*|GvSV|GV* gv

Return the SV from the GV.

=cut
*/

#define GvSV(gv)	(GvGP(gv)->gp_sv)
#define GvREFCNT(gv)	(GvGP(gv)->gp_refcnt)
#define GvIO(gv)	((gv) && SvTYPE((SV*)gv) == SVt_PVGV ? GvIOp(gv) : 0)
#define GvIOp(gv)	(GvGP(gv)->gp_io)
#define GvIOn(gv)	(GvIO(gv) ? GvIOp(gv) : GvIOp(gv_IOadd(gv)))

#define GvFORM(gv)	(GvGP(gv)->gp_form)
#define GvAV(gv)	(GvGP(gv)->gp_av)

/* This macro is deprecated.  Do not use! */
#define GvREFCNT_inc(gv) ((GV*)SvREFCNT_inc(gv))	/* DO NOT USE */

#ifdef	MICROPORT	/* Microport 2.4 hack */
AV *GvAVn();
#else
#define GvAVn(gv)	(GvGP(gv)->gp_av ? \
			 GvGP(gv)->gp_av : \
			 GvGP(gv_AVadd(gv))->gp_av)
#endif
#define GvHV(gv)	((GvGP(gv))->gp_hv)

#ifdef	MICROPORT	/* Microport 2.4 hack */
HV *GvHVn();
#else
#define GvHVn(gv)	(GvGP(gv)->gp_hv ? \
			 GvGP(gv)->gp_hv : \
			 GvGP(gv_HVadd(gv))->gp_hv)
#endif			/* Microport 2.4 hack */

#define GvCV(gv)	(GvGP(gv)->gp_cv)
#define GvCVGEN(gv)	(GvGP(gv)->gp_cvgen)
#define GvCVu(gv)	(GvGP(gv)->gp_cvgen ? Nullcv : GvGP(gv)->gp_cv)

#define GvGPFLAGS(gv)	(GvGP(gv)->gp_flags)

#define GvLINE(gv)	(GvGP(gv)->gp_line)
#define GvFILE(gv)	(GvGP(gv)->gp_file)
#define GvFILEGV(gv)	(gv_fetchfile(GvFILE(gv)))

#define GvEGV(gv)	(GvGP(gv)->gp_egv)
#define GvENAME(gv)	GvNAME(GvEGV(gv) ? GvEGV(gv) : gv)
#define GvESTASH(gv)	GvSTASH(GvEGV(gv) ? GvEGV(gv) : gv)

#define GVf_INTRO	0x01
#define GVf_MULTI	0x02
#define GVf_ASSUMECV	0x04
#define GVf_IN_PAD	0x08
#define GVf_IMPORTED	0xF0
#define GVf_IMPORTED_SV	  0x10
#define GVf_IMPORTED_AV	  0x20
#define GVf_IMPORTED_HV	  0x40
#define GVf_IMPORTED_CV	  0x80

#define GvINTRO(gv)		(GvFLAGS(gv) & GVf_INTRO)
#define GvINTRO_on(gv)		(GvFLAGS(gv) |= GVf_INTRO)
#define GvINTRO_off(gv)		(GvFLAGS(gv) &= ~GVf_INTRO)

#define GvMULTI(gv)		(GvFLAGS(gv) & GVf_MULTI)
#define GvMULTI_on(gv)		(GvFLAGS(gv) |= GVf_MULTI)
#define GvMULTI_off(gv)		(GvFLAGS(gv) &= ~GVf_MULTI)

#define GvASSUMECV(gv)		(GvFLAGS(gv) & GVf_ASSUMECV)
#define GvASSUMECV_on(gv)	(GvFLAGS(gv) |= GVf_ASSUMECV)
#define GvASSUMECV_off(gv)	(GvFLAGS(gv) &= ~GVf_ASSUMECV)

#define GvIMPORTED(gv)		(GvFLAGS(gv) & GVf_IMPORTED)
#define GvIMPORTED_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED)
#define GvIMPORTED_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED)

#define GvIMPORTED_SV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_SV)
#define GvIMPORTED_SV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_SV)
#define GvIMPORTED_SV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_SV)

#define GvIMPORTED_AV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_AV)
#define GvIMPORTED_AV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_AV)
#define GvIMPORTED_AV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_AV)

#define GvIMPORTED_HV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_HV)
#define GvIMPORTED_HV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_HV)
#define GvIMPORTED_HV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_HV)

#define GvIMPORTED_CV(gv)	(GvFLAGS(gv) & GVf_IMPORTED_CV)
#define GvIMPORTED_CV_on(gv)	(GvFLAGS(gv) |= GVf_IMPORTED_CV)
#define GvIMPORTED_CV_off(gv)	(GvFLAGS(gv) &= ~GVf_IMPORTED_CV)

#define GvIN_PAD(gv)		(GvFLAGS(gv) & GVf_IN_PAD)
#define GvIN_PAD_on(gv)		(GvFLAGS(gv) |= GVf_IN_PAD)
#define GvIN_PAD_off(gv)	(GvFLAGS(gv) &= ~GVf_IN_PAD)

#define Nullgv Null(GV*)

#define DM_UID   0x003
#define DM_RUID   0x001
#define DM_EUID   0x002
#define DM_GID   0x030
#define DM_RGID   0x010
#define DM_EGID   0x020
#define DM_DELAY 0x100

/*
 * symbol creation flags, for use in gv_fetchpv() and get_*v()
 */
#define GV_ADD		0x01	/* add, if symbol not already there */
#define GV_ADDMULTI	0x02	/* add, pretending it has been added already */
#define GV_ADDWARN	0x04	/* add, but warn if symbol wasn't already there */
#define GV_ADDINEVAL	0x08	/* add, as though we're doing so within an eval */
#define GV_NOINIT	0x10	/* add, but don't init symbol, if type != PVGV */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\handy.h ===
/*    handy.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#if !defined(__STDC__)
#ifdef NULL
#undef NULL
#endif
#ifndef I286
#  define NULL 0
#else
#  define NULL 0L
#endif
#endif

#define Null(type) ((type)NULL)

/*
=for apidoc AmU||Nullch
Null character pointer.

=for apidoc AmU||Nullsv
Null SV pointer.

=cut
*/

#define Nullch Null(char*)
#define Nullfp Null(PerlIO*)
#define Nullsv Null(SV*)

#ifdef TRUE
#undef TRUE
#endif
#ifdef FALSE
#undef FALSE
#endif
#define TRUE (1)
#define FALSE (0)


/* XXX Configure ought to have a test for a boolean type, if I can
   just figure out all the headers such a test needs.
   Andy Dougherty	August 1996
*/
/* bool is built-in for g++-2.6.3 and later, which might be used
   for extensions.  <_G_config.h> defines _G_HAVE_BOOL, but we can't
   be sure _G_config.h will be included before this file.  _G_config.h
   also defines _G_HAVE_BOOL for both gcc and g++, but only g++
   actually has bool.  Hence, _G_HAVE_BOOL is pretty useless for us.
   g++ can be identified by __GNUG__.
   Andy Dougherty	February 2000
*/
#ifdef __GNUG__ 	/* GNU g++ has bool built-in */
#  ifndef HAS_BOOL
#    define HAS_BOOL 1
#  endif
#endif

/* The NeXT dynamic loader headers will not build with the bool macro
   So declare them now to clear confusion.
*/
#if defined(NeXT) || defined(__NeXT__)
# undef FALSE
# undef TRUE
  typedef enum bool { FALSE = 0, TRUE = 1 } bool;
# define ENUM_BOOL 1
# ifndef HAS_BOOL
#  define HAS_BOOL 1
# endif /* !HAS_BOOL */
#endif /* NeXT || __NeXT__ */

#ifndef HAS_BOOL
# if defined(UTS) || defined(VMS)
#  define bool int
# else
#  define bool char
# endif
# define HAS_BOOL 1
#endif

/* XXX A note on the perl source internal type system.  The
   original intent was that I32 be *exactly* 32 bits.

   Currently, we only guarantee that I32 is *at least* 32 bits.
   Specifically, if int is 64 bits, then so is I32.  (This is the case
   for the Cray.)  This has the advantage of meshing nicely with
   standard library calls (where we pass an I32 and the library is
   expecting an int), but the disadvantage that an I32 is not 32 bits.
   Andy Dougherty	August 1996

   There is no guarantee that there is *any* integral type with
   exactly 32 bits.  It is perfectly legal for a system to have
   sizeof(short) == sizeof(int) == sizeof(long) == 8.

   Similarly, there is no guarantee that I16 and U16 have exactly 16
   bits.

   For dealing with issues that may arise from various 32/64-bit
   systems, we will ask Configure to check out

   	SHORTSIZE == sizeof(short)
   	INTSIZE == sizeof(int)
   	LONGSIZE == sizeof(long)
	LONGLONGSIZE == sizeof(long long) (if HAS_LONG_LONG)
   	PTRSIZE == sizeof(void *)
	DOUBLESIZE == sizeof(double)
	LONG_DOUBLESIZE == sizeof(long double) (if HAS_LONG_DOUBLE).

*/

#ifdef I_INTTYPES /* e.g. Linux has int64_t without <inttypes.h> */
#   include <inttypes.h>
#endif

typedef I8TYPE I8;
typedef U8TYPE U8;
typedef I16TYPE I16;
typedef U16TYPE U16;
typedef I32TYPE I32;
typedef U32TYPE U32;
#ifdef PERL_CORE
#   ifdef HAS_QUAD
typedef I64TYPE I64;
typedef U64TYPE U64;
#   endif
#endif /* PERL_CORE */

#if defined(HAS_QUAD) && defined(USE_64_BIT_INT)
#   ifndef UINT64_C /* usually from <inttypes.h> */
#       if defined(HAS_LONG_LONG) && QUADKIND == QUAD_IS_LONG_LONG
#           define INT64_C(c)	CAT2(c,LL)
#           define UINT64_C(c)	CAT2(c,ULL)
#       else
#           if LONGSIZE == 8 && QUADKIND == QUAD_IS_LONG
#               define INT64_C(c)	CAT2(c,L)
#               define UINT64_C(c)	CAT2(c,UL)
#           else
#               define INT64_C(c)	((I64TYPE)(c))
#               define UINT64_C(c)	((U64TYPE)(c))
#           endif
#       endif
#   endif
#endif

/* Mention I8SIZE, U8SIZE, I16SIZE, U16SIZE, I32SIZE, U32SIZE,
   I64SIZE, and U64SIZE here so that metaconfig pulls them in. */

#if defined(UINT8_MAX) && defined(INT16_MAX) && defined(INT32_MAX)

/* I8_MAX and I8_MIN constants are not defined, as I8 is an ambiguous type.
   Please search CHAR_MAX in perl.h for further details. */
#define U8_MAX UINT8_MAX
#define U8_MIN UINT8_MIN

#define I16_MAX INT16_MAX
#define I16_MIN INT16_MIN
#define U16_MAX UINT16_MAX
#define U16_MIN UINT16_MIN

#define I32_MAX INT32_MAX
#define I32_MIN INT32_MIN
#define U32_MAX UINT32_MAX
#define U32_MIN UINT32_MIN

#else

/* I8_MAX and I8_MIN constants are not defined, as I8 is an ambiguous type.
   Please search CHAR_MAX in perl.h for further details. */
#define U8_MAX PERL_UCHAR_MAX
#define U8_MIN PERL_UCHAR_MIN

#define I16_MAX PERL_SHORT_MAX
#define I16_MIN PERL_SHORT_MIN
#define U16_MAX PERL_USHORT_MAX
#define U16_MIN PERL_USHORT_MIN

#if LONGSIZE > 4
# define I32_MAX PERL_INT_MAX
# define I32_MIN PERL_INT_MIN
# define U32_MAX PERL_UINT_MAX
# define U32_MIN PERL_UINT_MIN
#else
# define I32_MAX PERL_LONG_MAX
# define I32_MIN PERL_LONG_MIN
# define U32_MAX PERL_ULONG_MAX
# define U32_MIN PERL_ULONG_MIN
#endif

#endif

#define BIT_DIGITS(N)   (((N)*146)/485 + 1)  /* log2(10) =~ 146/485 */
#define TYPE_DIGITS(T)  BIT_DIGITS(sizeof(T) * 8)
#define TYPE_CHARS(T)   (TYPE_DIGITS(T) + 2) /* sign, NUL */

#define Ctl(ch) ((ch) & 037)

/*
=for apidoc Am|bool|strNE|char* s1|char* s2
Test two strings to see if they are different.  Returns true or
false.

=for apidoc Am|bool|strEQ|char* s1|char* s2
Test two strings to see if they are equal.  Returns true or false.

=for apidoc Am|bool|strLT|char* s1|char* s2
Test two strings to see if the first, C<s1>, is less than the second,
C<s2>.  Returns true or false.

=for apidoc Am|bool|strLE|char* s1|char* s2
Test two strings to see if the first, C<s1>, is less than or equal to the
second, C<s2>.  Returns true or false.

=for apidoc Am|bool|strGT|char* s1|char* s2
Test two strings to see if the first, C<s1>, is greater than the second,
C<s2>.  Returns true or false.

=for apidoc Am|bool|strGE|char* s1|char* s2
Test two strings to see if the first, C<s1>, is greater than or equal to
the second, C<s2>.  Returns true or false.

=for apidoc Am|bool|strnNE|char* s1|char* s2|STRLEN len
Test two strings to see if they are different.  The C<len> parameter
indicates the number of bytes to compare.  Returns true or false. (A
wrapper for C<strncmp>).

=for apidoc Am|bool|strnEQ|char* s1|char* s2|STRLEN len
Test two strings to see if they are equal.  The C<len> parameter indicates
the number of bytes to compare.  Returns true or false. (A wrapper for
C<strncmp>).

=cut
*/

#define strNE(s1,s2) (strcmp(s1,s2))
#define strEQ(s1,s2) (!strcmp(s1,s2))
#define strLT(s1,s2) (strcmp(s1,s2) < 0)
#define strLE(s1,s2) (strcmp(s1,s2) <= 0)
#define strGT(s1,s2) (strcmp(s1,s2) > 0)
#define strGE(s1,s2) (strcmp(s1,s2) >= 0)
#define strnNE(s1,s2,l) (strncmp(s1,s2,l))
#define strnEQ(s1,s2,l) (!strncmp(s1,s2,l))

#ifdef HAS_MEMCMP
#  define memNE(s1,s2,l) (memcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!memcmp(s1,s2,l))
#else
#  define memNE(s1,s2,l) (bcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!bcmp(s1,s2,l))
#endif

/*
 * Character classes.
 *
 * Unfortunately, the introduction of locales means that we
 * can't trust isupper(), etc. to tell the truth.  And when
 * it comes to /\w+/ with tainting enabled, we *must* be able
 * to trust our character classes.
 *
 * Therefore, the default tests in the text of Perl will be
 * independent of locale.  Any code that wants to depend on
 * the current locale will use the tests that begin with "lc".
 */

#ifdef HAS_SETLOCALE  /* XXX Is there a better test for this? */
#  ifndef CTYPE256
#    define CTYPE256
#  endif
#endif

/*
=for apidoc Am|bool|isALNUM|char ch
Returns a boolean indicating whether the C C<char> is an ASCII alphanumeric
character (including underscore) or digit.

=for apidoc Am|bool|isALPHA|char ch
Returns a boolean indicating whether the C C<char> is an ASCII alphabetic
character.

=for apidoc Am|bool|isSPACE|char ch
Returns a boolean indicating whether the C C<char> is whitespace.

=for apidoc Am|bool|isDIGIT|char ch
Returns a boolean indicating whether the C C<char> is an ASCII
digit.

=for apidoc Am|bool|isUPPER|char ch
Returns a boolean indicating whether the C C<char> is an uppercase
character.

=for apidoc Am|bool|isLOWER|char ch
Returns a boolean indicating whether the C C<char> is a lowercase
character.

=for apidoc Am|char|toUPPER|char ch
Converts the specified character to uppercase.

=for apidoc Am|char|toLOWER|char ch
Converts the specified character to lowercase.

=cut
*/

#define isALNUM(c)	(isALPHA(c) || isDIGIT(c) || (c) == '_')
#define isIDFIRST(c)	(isALPHA(c) || (c) == '_')
#define isALPHA(c)	(isUPPER(c) || isLOWER(c))
#define isSPACE(c) \
	((c) == ' ' || (c) == '\t' || (c) == '\n' || (c) =='\r' || (c) == '\f')
#define isPSXSPC(c)	(isSPACE(c) || (c) == '\v')
#define isBLANK(c)	((c) == ' ' || (c) == '\t')
#define isDIGIT(c)	((c) >= '0' && (c) <= '9')
#ifdef EBCDIC
    /* In EBCDIC we do not do locales: therefore() isupper() is fine. */
#   define isUPPER(c)	isupper(c)
#   define isLOWER(c)	islower(c)
#   define isALNUMC(c)	isalnum(c)
#   define isASCII(c)	isascii(c)
#   define isCNTRL(c)	iscntrl(c)
#   define isGRAPH(c)	isgraph(c)
#   define isPRINT(c)	isprint(c)
#   define isPUNCT(c)	ispunct(c)
#   define isXDIGIT(c)	isxdigit(c)
#   define toUPPER(c)	toupper(c)
#   define toLOWER(c)	tolower(c)
#else
#   define isUPPER(c)	((c) >= 'A' && (c) <= 'Z')
#   define isLOWER(c)	((c) >= 'a' && (c) <= 'z')
#   define isALNUMC(c)	(isALPHA(c) || isDIGIT(c))
#   define isASCII(c)	((c) <= 127)
#   define isCNTRL(c)	((c) < ' ')
#   define isGRAPH(c)	(isALNUM(c) || isPUNCT(c))
#   define isPRINT(c)	(((c) > 32 && (c) < 127) || isSPACE(c))
#   define isPUNCT(c)	(((c) >= 33 && (c) <= 47) || ((c) >= 58 && (c) <= 64)  || ((c) >= 91 && (c) <= 96) || ((c) >= 123 && (c) <= 126))
#   define isXDIGIT(c)  (isdigit(c) || ((c) >= 'a' && (c) <= 'f') || ((c) >= 'A' && (c) <= 'F'))
#   define toUPPER(c)	(isLOWER(c) ? (c) - ('a' - 'A') : (c))
#   define toLOWER(c)	(isUPPER(c) ? (c) + ('a' - 'A') : (c))
#endif

#ifdef USE_NEXT_CTYPE

#  define isALNUM_LC(c) \
	(NXIsAlNum((unsigned int)(c)) || (char)(c) == '_')
#  define isIDFIRST_LC(c) \
	(NXIsAlpha((unsigned int)(c)) || (char)(c) == '_')
#  define isALPHA_LC(c)		NXIsAlpha((unsigned int)(c))
#  define isSPACE_LC(c)		NXIsSpace((unsigned int)(c))
#  define isDIGIT_LC(c)		NXIsDigit((unsigned int)(c))
#  define isUPPER_LC(c)		NXIsUpper((unsigned int)(c))
#  define isLOWER_LC(c)		NXIsLower((unsigned int)(c))
#  define isALNUMC_LC(c)	NXIsAlNum((unsigned int)(c))
#  define isCNTRL_LC(c)		NXIsCntrl((unsigned int)(c))
#  define isGRAPH_LC(c)		NXIsGraph((unsigned int)(c))
#  define isPRINT_LC(c)		NXIsPrint((unsigned int)(c))
#  define isPUNCT_LC(c)		NXIsPunct((unsigned int)(c))
#  define toUPPER_LC(c)		NXToUpper((unsigned int)(c))
#  define toLOWER_LC(c)		NXToLower((unsigned int)(c))

#else /* !USE_NEXT_CTYPE */

#  if defined(CTYPE256) || (!defined(isascii) && !defined(HAS_ISASCII))

#    define isALNUM_LC(c)   (isalnum((unsigned char)(c)) || (char)(c) == '_')
#    define isIDFIRST_LC(c) (isalpha((unsigned char)(c)) || (char)(c) == '_')
#    define isALPHA_LC(c)	isalpha((unsigned char)(c))
#    define isSPACE_LC(c)	isspace((unsigned char)(c))
#    define isDIGIT_LC(c)	isdigit((unsigned char)(c))
#    define isUPPER_LC(c)	isupper((unsigned char)(c))
#    define isLOWER_LC(c)	islower((unsigned char)(c))
#    define isALNUMC_LC(c)	isalnum((unsigned char)(c))
#    define isCNTRL_LC(c)	iscntrl((unsigned char)(c))
#    define isGRAPH_LC(c)	isgraph((unsigned char)(c))
#    define isPRINT_LC(c)	isprint((unsigned char)(c))
#    define isPUNCT_LC(c)	ispunct((unsigned char)(c))
#    define toUPPER_LC(c)	toupper((unsigned char)(c))
#    define toLOWER_LC(c)	tolower((unsigned char)(c))

#  else

#    define isALNUM_LC(c) 	(isascii(c) && (isalnum(c) || (c) == '_'))
#    define isIDFIRST_LC(c)	(isascii(c) && (isalpha(c) || (c) == '_'))
#    define isALPHA_LC(c)	(isascii(c) && isalpha(c))
#    define isSPACE_LC(c)	(isascii(c) && isspace(c))
#    define isDIGIT_LC(c)	(isascii(c) && isdigit(c))
#    define isUPPER_LC(c)	(isascii(c) && isupper(c))
#    define isLOWER_LC(c)	(isascii(c) && islower(c))
#    define isALNUMC_LC(c)	(isascii(c) && isalnum(c))
#    define isCNTRL_LC(c)	(isascii(c) && iscntrl(c))
#    define isGRAPH_LC(c)	(isascii(c) && isgraph(c))
#    define isPRINT_LC(c)	(isascii(c) && isprint(c))
#    define isPUNCT_LC(c)	(isascii(c) && ispunct(c))
#    define toUPPER_LC(c)	toupper(c)
#    define toLOWER_LC(c)	tolower(c)

#  endif
#endif /* USE_NEXT_CTYPE */

#define isPSXSPC_LC(c)		(isSPACE_LC(c) || (c) == '\v')
#define isBLANK_LC(c)		isBLANK(c) /* could be wrong */

#define isALNUM_uni(c)		is_uni_alnum(c)
#define isIDFIRST_uni(c)	is_uni_idfirst(c)
#define isALPHA_uni(c)		is_uni_alpha(c)
#define isSPACE_uni(c)		is_uni_space(c)
#define isDIGIT_uni(c)		is_uni_digit(c)
#define isUPPER_uni(c)		is_uni_upper(c)
#define isLOWER_uni(c)		is_uni_lower(c)
#define isALNUMC_uni(c)		is_uni_alnumc(c)
#define isASCII_uni(c)		is_uni_ascii(c)
#define isCNTRL_uni(c)		is_uni_cntrl(c)
#define isGRAPH_uni(c)		is_uni_graph(c)
#define isPRINT_uni(c)		is_uni_print(c)
#define isPUNCT_uni(c)		is_uni_punct(c)
#define isXDIGIT_uni(c)		is_uni_xdigit(c)
#define toUPPER_uni(c)		to_uni_upper(c)
#define toTITLE_uni(c)		to_uni_title(c)
#define toLOWER_uni(c)		to_uni_lower(c)

#define isPSXSPC_uni(c)		(isSPACE_uni(c) ||(c) == '\f')
#define isBLANK_uni(c)		isBLANK(c) /* could be wrong */

#define isALNUM_LC_uni(c)	(c < 256 ? isALNUM_LC(c) : is_uni_alnum_lc(c))
#define isIDFIRST_LC_uni(c)	(c < 256 ? isIDFIRST_LC(c) : is_uni_idfirst_lc(c))
#define isALPHA_LC_uni(c)	(c < 256 ? isALPHA_LC(c) : is_uni_alpha_lc(c))
#define isSPACE_LC_uni(c)	(c < 256 ? isSPACE_LC(c) : is_uni_space_lc(c))
#define isDIGIT_LC_uni(c)	(c < 256 ? isDIGIT_LC(c) : is_uni_digit_lc(c))
#define isUPPER_LC_uni(c)	(c < 256 ? isUPPER_LC(c) : is_uni_upper_lc(c))
#define isLOWER_LC_uni(c)	(c < 256 ? isLOWER_LC(c) : is_uni_lower_lc(c))
#define isALNUMC_LC_uni(c)	(c < 256 ? isALNUMC_LC(c) : is_uni_alnumc_lc(c))
#define isCNTRL_LC_uni(c)	(c < 256 ? isCNTRL_LC(c) : is_uni_cntrl_lc(c))
#define isGRAPH_LC_uni(c)	(c < 256 ? isGRAPH_LC(c) : is_uni_graph_lc(c))
#define isPRINT_LC_uni(c)	(c < 256 ? isPRINT_LC(c) : is_uni_print_lc(c))
#define isPUNCT_LC_uni(c)	(c < 256 ? isPUNCT_LC(c) : is_uni_punct_lc(c))
#define toUPPER_LC_uni(c)	(c < 256 ? toUPPER_LC(c) : to_uni_upper_lc(c))
#define toTITLE_LC_uni(c)	(c < 256 ? toUPPER_LC(c) : to_uni_title_lc(c))
#define toLOWER_LC_uni(c)	(c < 256 ? toLOWER_LC(c) : to_uni_lower_lc(c))

#define isPSXSPC_LC_uni(c)	(isSPACE_LC_uni(c) ||(c) == '\f')
#define isBLANK_LC_uni(c)	isBLANK(c) /* could be wrong */

#define isALNUM_utf8(p)		is_utf8_alnum(p)
#define isIDFIRST_utf8(p)	is_utf8_idfirst(p)
#define isALPHA_utf8(p)		is_utf8_alpha(p)
#define isSPACE_utf8(p)		is_utf8_space(p)
#define isDIGIT_utf8(p)		is_utf8_digit(p)
#define isUPPER_utf8(p)		is_utf8_upper(p)
#define isLOWER_utf8(p)		is_utf8_lower(p)
#define isALNUMC_utf8(p)	is_utf8_alnumc(p)
#define isASCII_utf8(p)		is_utf8_ascii(p)
#define isCNTRL_utf8(p)		is_utf8_cntrl(p)
#define isGRAPH_utf8(p)		is_utf8_graph(p)
#define isPRINT_utf8(p)		is_utf8_print(p)
#define isPUNCT_utf8(p)		is_utf8_punct(p)
#define isXDIGIT_utf8(p)	is_utf8_xdigit(p)
#define toUPPER_utf8(p)		to_utf8_upper(p)
#define toTITLE_utf8(p)		to_utf8_title(p)
#define toLOWER_utf8(p)		to_utf8_lower(p)

#define isPSXSPC_utf8(c)	(isSPACE_utf8(c) ||(c) == '\f')
#define isBLANK_utf8(c)		isBLANK(c) /* could be wrong */

#define isALNUM_LC_utf8(p)	isALNUM_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isIDFIRST_LC_utf8(p)	isIDFIRST_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isALPHA_LC_utf8(p)	isALPHA_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isSPACE_LC_utf8(p)	isSPACE_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isDIGIT_LC_utf8(p)	isDIGIT_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isUPPER_LC_utf8(p)	isUPPER_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isLOWER_LC_utf8(p)	isLOWER_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isALNUMC_LC_utf8(p)	isALNUMC_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isCNTRL_LC_utf8(p)	isCNTRL_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isGRAPH_LC_utf8(p)	isGRAPH_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isPRINT_LC_utf8(p)	isPRINT_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define isPUNCT_LC_utf8(p)	isPUNCT_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define toUPPER_LC_utf8(p)	toUPPER_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define toTITLE_LC_utf8(p)	toTITLE_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))
#define toLOWER_LC_utf8(p)	toLOWER_LC_uni(utf8_to_uv(p, UTF8_MAXLEN, 0, 0))

#define isPSXSPC_LC_utf8(c)	(isSPACE_LC_utf8(c) ||(c) == '\f')
#define isBLANK_LC_utf8(c)	isBLANK(c) /* could be wrong */

#ifdef EBCDIC
#  define toCTRL(c)	Perl_ebcdic_control(c)
#else
  /* This conversion works both ways, strangely enough. */
#  define toCTRL(c)    (toUPPER(c) ^ 64)
#endif

/* Line numbers are unsigned, 16 bits. */
typedef U16 line_t;
#ifdef lint
#define NOLINE ((line_t)0)
#else
#define NOLINE ((line_t) 65535)
#endif


/*
   XXX LEAKTEST doesn't really work in perl5.  There are direct calls to
   safemalloc() in the source, so LEAKTEST won't pick them up.
   (The main "offenders" are extensions.)
   Further, if you try LEAKTEST, you'll also end up calling
   Safefree, which might call safexfree() on some things that weren't
   malloced with safexmalloc.  The correct "fix" to this, if anyone
   is interested, is to ensure that all calls go through the New and
   Renew macros.
	--Andy Dougherty		August 1996
*/

/*
=for apidoc Am|SV*|NEWSV|int id|STRLEN len
Creates a new SV.  A non-zero C<len> parameter indicates the number of
bytes of preallocated string space the SV should have.  An extra byte for a
tailing NUL is also reserved.  (SvPOK is not set for the SV even if string
space is allocated.)  The reference count for the new SV is set to 1.
C<id> is an integer id between 0 and 1299 (used to identify leaks).

=for apidoc Am|void|New|int id|void* ptr|int nitems|type
The XSUB-writer's interface to the C C<malloc> function.

=for apidoc Am|void|Newc|int id|void* ptr|int nitems|type|cast
The XSUB-writer's interface to the C C<malloc> function, with
cast.

=for apidoc Am|void|Newz|int id|void* ptr|int nitems|type
The XSUB-writer's interface to the C C<malloc> function.  The allocated
memory is zeroed with C<memzero>.

=for apidoc Am|void|Renew|void* ptr|int nitems|type
The XSUB-writer's interface to the C C<realloc> function.

=for apidoc Am|void|Renewc|void* ptr|int nitems|type|cast
The XSUB-writer's interface to the C C<realloc> function, with
cast.

=for apidoc Am|void|Safefree|void* ptr
The XSUB-writer's interface to the C C<free> function.

=for apidoc Am|void|Move|void* src|void* dest|int nitems|type
The XSUB-writer's interface to the C C<memmove> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and C<type> is
the type.  Can do overlapping moves.  See also C<Copy>.

=for apidoc Am|void|Copy|void* src|void* dest|int nitems|type
The XSUB-writer's interface to the C C<memcpy> function.  The C<src> is the
source, C<dest> is the destination, C<nitems> is the number of items, and C<type> is
the type.  May fail on overlapping copies.  See also C<Move>.

=for apidoc Am|void|Zero|void* dest|int nitems|type

The XSUB-writer's interface to the C C<memzero> function.  The C<dest> is the
destination, C<nitems> is the number of items, and C<type> is the type.

=for apidoc Am|void|StructCopy|type src|type dest|type
This is an architecture-independent macro to copy one structure to another.

=cut
*/

#ifndef lint

#define NEWSV(x,len)	newSV(len)

#ifndef LEAKTEST

#define New(x,v,n,t)	(v = (t*)safemalloc((MEM_SIZE)((n)*sizeof(t))))
#define Newc(x,v,n,t,c)	(v = (c*)safemalloc((MEM_SIZE)((n)*sizeof(t))))
#define Newz(x,v,n,t)	(v = (t*)safemalloc((MEM_SIZE)((n)*sizeof(t)))), \
			memzero((char*)(v), (n)*sizeof(t))
#define Renew(v,n,t) \
	  (v = (t*)saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))
#define Renewc(v,n,t,c) \
	  (v = (c*)saferealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))
#define Safefree(d)	safefree((Malloc_t)(d))

#else /* LEAKTEST */

#define New(x,v,n,t)	(v = (t*)safexmalloc((x),(MEM_SIZE)((n)*sizeof(t))))
#define Newc(x,v,n,t,c)	(v = (c*)safexmalloc((x),(MEM_SIZE)((n)*sizeof(t))))
#define Newz(x,v,n,t)	(v = (t*)safexmalloc((x),(MEM_SIZE)((n)*sizeof(t)))), \
			 memzero((char*)(v), (n)*sizeof(t))
#define Renew(v,n,t) \
	  (v = (t*)safexrealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))
#define Renewc(v,n,t,c) \
	  (v = (c*)safexrealloc((Malloc_t)(v),(MEM_SIZE)((n)*sizeof(t))))
#define Safefree(d)	safexfree((Malloc_t)(d))

#define MAXXCOUNT 1400
#define MAXY_SIZE 80
#define MAXYCOUNT 16			/* (MAXY_SIZE/4 + 1) */
extern long xcount[MAXXCOUNT];
extern long lastxcount[MAXXCOUNT];
extern long xycount[MAXXCOUNT][MAXYCOUNT];
extern long lastxycount[MAXXCOUNT][MAXYCOUNT];

#endif /* LEAKTEST */

#define Move(s,d,n,t)	(void)memmove((char*)(d),(char*)(s), (n) * sizeof(t))
#define Copy(s,d,n,t)	(void)memcpy((char*)(d),(char*)(s), (n) * sizeof(t))
#define Zero(d,n,t)	(void)memzero((char*)(d), (n) * sizeof(t))

#else /* lint */

#define New(x,v,n,s)	(v = Null(s *))
#define Newc(x,v,n,s,c)	(v = Null(s *))
#define Newz(x,v,n,s)	(v = Null(s *))
#define Renew(v,n,s)	(v = Null(s *))
#define Move(s,d,n,t)
#define Copy(s,d,n,t)
#define Zero(d,n,t)
#define Safefree(d)	(d) = (d)

#endif /* lint */

#ifdef USE_STRUCT_COPY
#define StructCopy(s,d,t) (*((t*)(d)) = *((t*)(s)))
#else
#define StructCopy(s,d,t) Copy(s,d,1,t)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\hv.h ===
/*    hv.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/* typedefs to eliminate some typing */
typedef struct he HE;
typedef struct hek HEK;

/* entry in hash value chain */
struct he {
    HE		*hent_next;	/* next entry in chain */
    HEK		*hent_hek;	/* hash key */
    SV		*hent_val;	/* scalar value that was hashed */
};

/* hash key -- defined separately for use as shared pointer */
struct hek {
    U32		hek_hash;	/* hash of key */
    I32		hek_len;	/* length of hash key */
    char	hek_key[1];	/* variable-length hash key */
};

/* hash structure: */
/* This structure must match the beginning of struct xpvmg in sv.h. */
struct xpvhv {
    char *	xhv_array;	/* pointer to malloced string */
    STRLEN	xhv_fill;	/* how full xhv_array currently is */
    STRLEN	xhv_max;	/* subscript of last element of xhv_array */
    IV		xhv_keys;	/* how many elements in the array */
    NV		xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* magic for scalar array */
    HV*		xmg_stash;	/* class package */

    I32		xhv_riter;	/* current root of iterator */
    HE		*xhv_eiter;	/* current entry of iterator */
    PMOP	*xhv_pmroot;	/* list of pm's for this package */
    char	*xhv_name;	/* name, if a symbol table */
};

/* hash a key */
#define PERL_HASH(hash,str,len) \
     STMT_START	{ \
	register const char *s_PeRlHaSh = str; \
	register I32 i_PeRlHaSh = len; \
	register U32 hash_PeRlHaSh = 0; \
	while (i_PeRlHaSh--) \
	    hash_PeRlHaSh = hash_PeRlHaSh * 33 + *s_PeRlHaSh++; \
	(hash) = hash_PeRlHaSh + (hash_PeRlHaSh>>5); \
    } STMT_END

/*
=for apidoc AmU||HEf_SVKEY
This flag, used in the length slot of hash entries and magic structures,
specifies the structure contains a C<SV*> pointer where a C<char*> pointer
is to be expected. (For information only--not to be used).

=for apidoc AmU||Nullhv
Null HV pointer.

=for apidoc Am|char*|HvNAME|HV* stash
Returns the package name of a stash.  See C<SvSTASH>, C<CvSTASH>.

=for apidoc Am|void*|HeKEY|HE* he
Returns the actual pointer stored in the key slot of the hash entry. The
pointer may be either C<char*> or C<SV*>, depending on the value of
C<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros are
usually preferable for finding the value of a key.

=for apidoc Am|STRLEN|HeKLEN|HE* he
If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry
holds an C<SV*> key.  Otherwise, holds the actual length of the key.  Can
be assigned to. The C<HePV()> macro is usually preferable for finding key
lengths.

=for apidoc Am|SV*|HeVAL|HE* he
Returns the value slot (type C<SV*>) stored in the hash entry.

=for apidoc Am|U32|HeHASH|HE* he
Returns the computed hash stored in the hash entry.

=for apidoc Am|char*|HePV|HE* he|STRLEN len
Returns the key slot of the hash entry as a C<char*> value, doing any
necessary dereferencing of possibly C<SV*> keys.  The length of the string
is placed in C<len> (this is a macro, so do I<not> use C<&len>).  If you do
not care about what the length of the key is, you may use the global
variable C<PL_na>, though this is rather less efficient than using a local
variable.  Remember though, that hash keys in perl are free to contain
embedded nulls, so using C<strlen()> or similar is not a good way to find
the length of hash keys. This is very similar to the C<SvPV()> macro
described elsewhere in this document.

=for apidoc Am|SV*|HeSVKEY|HE* he
Returns the key as an C<SV*>, or C<Nullsv> if the hash entry does not
contain an C<SV*> key.

=for apidoc Am|SV*|HeSVKEY_force|HE* he
Returns the key as an C<SV*>.  Will create and return a temporary mortal
C<SV*> if the hash entry contains only a C<char*> key.

=for apidoc Am|SV*|HeSVKEY_set|HE* he|SV* sv
Sets the key to a given C<SV*>, taking care to set the appropriate flags to
indicate the presence of an C<SV*> key, and returns the same
C<SV*>.

=cut
*/

/* these hash entry flags ride on hent_klen (for use only in magic/tied HVs) */
#define HEf_SVKEY	-2	/* hent_key is a SV* */


#define Nullhv Null(HV*)
#define HvARRAY(hv)	((HE**)((XPVHV*)  SvANY(hv))->xhv_array)
#define HvFILL(hv)	((XPVHV*)  SvANY(hv))->xhv_fill
#define HvMAX(hv)	((XPVHV*)  SvANY(hv))->xhv_max
#define HvKEYS(hv)	((XPVHV*)  SvANY(hv))->xhv_keys
#define HvRITER(hv)	((XPVHV*)  SvANY(hv))->xhv_riter
#define HvEITER(hv)	((XPVHV*)  SvANY(hv))->xhv_eiter
#define HvPMROOT(hv)	((XPVHV*)  SvANY(hv))->xhv_pmroot
#define HvNAME(hv)	((XPVHV*)  SvANY(hv))->xhv_name

#define HvSHAREKEYS(hv)		(SvFLAGS(hv) & SVphv_SHAREKEYS)
#define HvSHAREKEYS_on(hv)	(SvFLAGS(hv) |= SVphv_SHAREKEYS)
#define HvSHAREKEYS_off(hv)	(SvFLAGS(hv) &= ~SVphv_SHAREKEYS)

#define HvLAZYDEL(hv)		(SvFLAGS(hv) & SVphv_LAZYDEL)
#define HvLAZYDEL_on(hv)	(SvFLAGS(hv) |= SVphv_LAZYDEL)
#define HvLAZYDEL_off(hv)	(SvFLAGS(hv) &= ~SVphv_LAZYDEL)

/* Maybe amagical: */
/* #define HV_AMAGICmb(hv)      (SvFLAGS(hv) & (SVpgv_badAM | SVpgv_AM)) */

#define HV_AMAGIC(hv)        (SvFLAGS(hv) &   SVpgv_AM)
#define HV_AMAGIC_on(hv)     (SvFLAGS(hv) |=  SVpgv_AM)
#define HV_AMAGIC_off(hv)    (SvFLAGS(hv) &= ~SVpgv_AM)

/*
#define HV_AMAGICbad(hv)     (SvFLAGS(hv) & SVpgv_badAM)
#define HV_badAMAGIC_on(hv)  (SvFLAGS(hv) |= SVpgv_badAM)
#define HV_badAMAGIC_off(hv) (SvFLAGS(hv) &= ~SVpgv_badAM)
*/

#define Nullhe Null(HE*)
#define HeNEXT(he)		(he)->hent_next
#define HeKEY_hek(he)		(he)->hent_hek
#define HeKEY(he)		HEK_KEY(HeKEY_hek(he))
#define HeKEY_sv(he)		(*(SV**)HeKEY(he))
#define HeKLEN(he)		HEK_LEN(HeKEY_hek(he))
#define HeVAL(he)		(he)->hent_val
#define HeHASH(he)		HEK_HASH(HeKEY_hek(he))
#define HePV(he,lp)		((HeKLEN(he) == HEf_SVKEY) ?		\
				 SvPV(HeKEY_sv(he),lp) :		\
				 (((lp = HeKLEN(he)) >= 0) ?		\
				  HeKEY(he) : Nullch))

#define HeSVKEY(he)		((HeKEY(he) && 				\
				  HeKLEN(he) == HEf_SVKEY) ?		\
				 HeKEY_sv(he) : Nullsv)

#define HeSVKEY_force(he)	(HeKEY(he) ?				\
				 ((HeKLEN(he) == HEf_SVKEY) ?		\
				  HeKEY_sv(he) :			\
				  sv_2mortal(newSVpvn(HeKEY(he),	\
						     HeKLEN(he)))) :	\
				 &PL_sv_undef)
#define HeSVKEY_set(he,sv)	((HeKLEN(he) = HEf_SVKEY), (HeKEY_sv(he) = sv))

#define Nullhek Null(HEK*)
#define HEK_BASESIZE		STRUCT_OFFSET(HEK, hek_key[0])
#define HEK_HASH(hek)		(hek)->hek_hash
#define HEK_LEN(hek)		(hek)->hek_len
#define HEK_KEY(hek)		(hek)->hek_key

/* calculate HV array allocation */
#if defined(STRANGE_MALLOC) || defined(MYMALLOC)
#  define PERL_HV_ARRAY_ALLOC_BYTES(size) ((size) * sizeof(HE*))
#else
#  define MALLOC_OVERHEAD 16
#  define PERL_HV_ARRAY_ALLOC_BYTES(size) \
			(((size) < 64)					\
			 ? (size) * sizeof(HE*)				\
			 : (size) * sizeof(HE*) * 2 - MALLOC_OVERHEAD)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\mg.h ===
/*    mg.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifdef STRUCT_MGVTBL_DEFINITION
STRUCT_MGVTBL_DEFINITION;
#else
struct mgvtbl {
    int		(CPERLscope(*svt_get))	(pTHX_ SV *sv, MAGIC* mg);
    int		(CPERLscope(*svt_set))	(pTHX_ SV *sv, MAGIC* mg);
    U32		(CPERLscope(*svt_len))	(pTHX_ SV *sv, MAGIC* mg);
    int		(CPERLscope(*svt_clear))(pTHX_ SV *sv, MAGIC* mg);
    int		(CPERLscope(*svt_free))	(pTHX_ SV *sv, MAGIC* mg);
};
#endif

struct magic {
    MAGIC*	mg_moremagic;
    MGVTBL*	mg_virtual;	/* pointer to magic functions */
    U16		mg_private;
    char	mg_type;
    U8		mg_flags;
    SV*		mg_obj;
    char*	mg_ptr;
    I32		mg_len;
};

#define MGf_TAINTEDDIR 1
#define MGf_REFCOUNTED 2
#define MGf_GSKIP      4

#define MGf_MINMATCH   1

#define MgTAINTEDDIR(mg)	(mg->mg_flags & MGf_TAINTEDDIR)
#define MgTAINTEDDIR_on(mg)	(mg->mg_flags |= MGf_TAINTEDDIR)
#define MgTAINTEDDIR_off(mg)	(mg->mg_flags &= ~MGf_TAINTEDDIR)

#define MgPV(mg,lp)		((((int)(lp = (mg)->mg_len)) == HEf_SVKEY) ?   \
				 SvPV((SV*)((mg)->mg_ptr),lp) :		\
				 (mg)->mg_ptr)

#define SvTIED_mg(sv,how) \
    (SvRMAGICAL(sv) ? mg_find((sv),(how)) : Null(MAGIC*))
#define SvTIED_obj(sv,mg) \
    ((mg)->mg_obj ? (mg)->mg_obj : sv_2mortal(newRV(sv)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\keywords.h ===
#define KEY_NULL		0
#define KEY___FILE__		1
#define KEY___LINE__		2
#define KEY___PACKAGE__		3
#define KEY___DATA__		4
#define KEY___END__		5
#define KEY_AUTOLOAD		6
#define KEY_BEGIN		7
#define KEY_CORE		8
#define KEY_DESTROY		9
#define KEY_END			10
#define KEY_EQ			11
#define KEY_GE			12
#define KEY_GT			13
#define KEY_INIT		14
#define KEY_LE			15
#define KEY_LT			16
#define KEY_NE			17
#define KEY_CHECK		18
#define KEY_abs			19
#define KEY_accept		20
#define KEY_alarm		21
#define KEY_and			22
#define KEY_atan2		23
#define KEY_bind		24
#define KEY_binmode		25
#define KEY_bless		26
#define KEY_caller		27
#define KEY_chdir		28
#define KEY_chmod		29
#define KEY_chomp		30
#define KEY_chop		31
#define KEY_chown		32
#define KEY_chr			33
#define KEY_chroot		34
#define KEY_close		35
#define KEY_closedir		36
#define KEY_cmp			37
#define KEY_connect		38
#define KEY_continue		39
#define KEY_cos			40
#define KEY_crypt		41
#define KEY_dbmclose		42
#define KEY_dbmopen		43
#define KEY_defined		44
#define KEY_delete		45
#define KEY_die			46
#define KEY_do			47
#define KEY_dump		48
#define KEY_each		49
#define KEY_else		50
#define KEY_elsif		51
#define KEY_endgrent		52
#define KEY_endhostent		53
#define KEY_endnetent		54
#define KEY_endprotoent		55
#define KEY_endpwent		56
#define KEY_endservent		57
#define KEY_eof			58
#define KEY_eq			59
#define KEY_eval		60
#define KEY_exec		61
#define KEY_exists		62
#define KEY_exit		63
#define KEY_exp			64
#define KEY_fcntl		65
#define KEY_fileno		66
#define KEY_flock		67
#define KEY_for			68
#define KEY_foreach		69
#define KEY_fork		70
#define KEY_format		71
#define KEY_formline		72
#define KEY_ge			73
#define KEY_getc		74
#define KEY_getgrent		75
#define KEY_getgrgid		76
#define KEY_getgrnam		77
#define KEY_gethostbyaddr	78
#define KEY_gethostbyname	79
#define KEY_gethostent		80
#define KEY_getlogin		81
#define KEY_getnetbyaddr	82
#define KEY_getnetbyname	83
#define KEY_getnetent		84
#define KEY_getpeername		85
#define KEY_getpgrp		86
#define KEY_getppid		87
#define KEY_getpriority		88
#define KEY_getprotobyname	89
#define KEY_getprotobynumber	90
#define KEY_getprotoent		91
#define KEY_getpwent		92
#define KEY_getpwnam		93
#define KEY_getpwuid		94
#define KEY_getservbyname	95
#define KEY_getservbyport	96
#define KEY_getservent		97
#define KEY_getsockname		98
#define KEY_getsockopt		99
#define KEY_glob		100
#define KEY_gmtime		101
#define KEY_goto		102
#define KEY_grep		103
#define KEY_gt			104
#define KEY_hex			105
#define KEY_if			106
#define KEY_index		107
#define KEY_int			108
#define KEY_ioctl		109
#define KEY_join		110
#define KEY_keys		111
#define KEY_kill		112
#define KEY_last		113
#define KEY_lc			114
#define KEY_lcfirst		115
#define KEY_le			116
#define KEY_length		117
#define KEY_link		118
#define KEY_listen		119
#define KEY_local		120
#define KEY_localtime		121
#define KEY_lock		122
#define KEY_log			123
#define KEY_lstat		124
#define KEY_lt			125
#define KEY_m			126
#define KEY_map			127
#define KEY_mkdir		128
#define KEY_msgctl		129
#define KEY_msgget		130
#define KEY_msgrcv		131
#define KEY_msgsnd		132
#define KEY_my			133
#define KEY_ne			134
#define KEY_next		135
#define KEY_no			136
#define KEY_not			137
#define KEY_oct			138
#define KEY_open		139
#define KEY_opendir		140
#define KEY_or			141
#define KEY_ord			142
#define KEY_our			143
#define KEY_pack		144
#define KEY_package		145
#define KEY_pipe		146
#define KEY_pop			147
#define KEY_pos			148
#define KEY_print		149
#define KEY_printf		150
#define KEY_prototype		151
#define KEY_push		152
#define KEY_q			153
#define KEY_qq			154
#define KEY_qr			155
#define KEY_quotemeta		156
#define KEY_qw			157
#define KEY_qx			158
#define KEY_rand		159
#define KEY_read		160
#define KEY_readdir		161
#define KEY_readline		162
#define KEY_readlink		163
#define KEY_readpipe		164
#define KEY_recv		165
#define KEY_redo		166
#define KEY_ref			167
#define KEY_rename		168
#define KEY_require		169
#define KEY_reset		170
#define KEY_return		171
#define KEY_reverse		172
#define KEY_rewinddir		173
#define KEY_rindex		174
#define KEY_rmdir		175
#define KEY_s			176
#define KEY_scalar		177
#define KEY_seek		178
#define KEY_seekdir		179
#define KEY_select		180
#define KEY_semctl		181
#define KEY_semget		182
#define KEY_semop		183
#define KEY_send		184
#define KEY_setgrent		185
#define KEY_sethostent		186
#define KEY_setnetent		187
#define KEY_setpgrp		188
#define KEY_setpriority		189
#define KEY_setprotoent		190
#define KEY_setpwent		191
#define KEY_setservent		192
#define KEY_setsockopt		193
#define KEY_shift		194
#define KEY_shmctl		195
#define KEY_shmget		196
#define KEY_shmread		197
#define KEY_shmwrite		198
#define KEY_shutdown		199
#define KEY_sin			200
#define KEY_sleep		201
#define KEY_socket		202
#define KEY_socketpair		203
#define KEY_sort		204
#define KEY_splice		205
#define KEY_split		206
#define KEY_sprintf		207
#define KEY_sqrt		208
#define KEY_srand		209
#define KEY_stat		210
#define KEY_study		211
#define KEY_sub			212
#define KEY_substr		213
#define KEY_symlink		214
#define KEY_syscall		215
#define KEY_sysopen		216
#define KEY_sysread		217
#define KEY_sysseek		218
#define KEY_system		219
#define KEY_syswrite		220
#define KEY_tell		221
#define KEY_telldir		222
#define KEY_tie			223
#define KEY_tied		224
#define KEY_time		225
#define KEY_times		226
#define KEY_tr			227
#define KEY_truncate		228
#define KEY_uc			229
#define KEY_ucfirst		230
#define KEY_umask		231
#define KEY_undef		232
#define KEY_unless		233
#define KEY_unlink		234
#define KEY_unpack		235
#define KEY_unshift		236
#define KEY_untie		237
#define KEY_until		238
#define KEY_use			239
#define KEY_utime		240
#define KEY_values		241
#define KEY_vec			242
#define KEY_wait		243
#define KEY_waitpid		244
#define KEY_wantarray		245
#define KEY_warn		246
#define KEY_while		247
#define KEY_write		248
#define KEY_x			249
#define KEY_xor			250
#define KEY_y			251
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\intern.h ===
/*    INTERN.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * EXT  designates a global var which is defined in perl.h
 * dEXT designates a global var which is defined in another
 *      file, so we can't count on finding it in perl.h
 *      (this practice should be avoided).
 */
#undef EXT
#undef dEXT
#undef EXTCONST
#undef dEXTCONST
#if defined(VMS) && !defined(__GNUC__)
    /* Suppress portability warnings from DECC for VMS-specific extensions */
#  ifdef __DECC
#    pragma message disable (GLOBALEXT,NOSHAREEXT,READONLYEXT)
#  endif
#  define EXT globaldef {"$GLOBAL_RW_VARS"} noshare
#  define dEXT globaldef {"$GLOBAL_RW_VARS"} noshare
#  define EXTCONST globaldef {"$GLOBAL_RO_VARS"} readonly
#  define dEXTCONST globaldef {"$GLOBAL_RO_VARS"} readonly
#else
#if defined(WIN32) && defined(__MINGW32__)
#  define EXT		__declspec(dllexport)
#  define dEXT
#  define EXTCONST	__declspec(dllexport) const
#  define dEXTCONST	const
#else
#ifdef __cplusplus
#  define EXT
#  define dEXT
#  define EXTCONST extern const
#  define dEXTCONST const
#else
#  define EXT
#  define dEXT
#  define EXTCONST const
#  define dEXTCONST const
#endif
#endif
#endif

#undef INIT
#define INIT(x) = x

#define DOINIT
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\intrpvar.h ===
/***********************************************/
/* Global only to current interpreter instance */
/***********************************************/

/* Don't forget to re-run embed.pl to propagate changes! */

/* The 'I' prefix is only needed for vars that need appropriate #defines
 * generated when built with or without MULTIPLICITY.  It is also used
 * to generate the appropriate export list for win32.
 *
 * When building without MULTIPLICITY, these variables will be truly global. */

/* pseudo environmental stuff */
PERLVAR(Iorigargc,	int)
PERLVAR(Iorigargv,	char **)
PERLVAR(Ienvgv,		GV *)
PERLVAR(Iincgv,		GV *)
PERLVAR(Ihintgv,	GV *)
PERLVAR(Iorigfilename,	char *)
PERLVAR(Idiehook,	SV *)
PERLVAR(Iwarnhook,	SV *)

/* switches */
PERLVAR(Iminus_c,	bool)
PERLVAR(Ipatchlevel,	SV *)
PERLVAR(Ilocalpatches,	char **)
PERLVARI(Isplitstr,	char *,	" ")
PERLVAR(Ipreprocess,	bool)
PERLVAR(Iminus_n,	bool)
PERLVAR(Iminus_p,	bool)
PERLVAR(Iminus_l,	bool)
PERLVAR(Iminus_a,	bool)
PERLVAR(Iminus_F,	bool)
PERLVAR(Idoswitches,	bool)

/*
=for apidoc mn|bool|PL_dowarn

The C variable which corresponds to Perl's $^W warning variable.

=cut
*/

PERLVAR(Idowarn,	U8)
PERLVAR(Iwidesyscalls,	bool)		/* wide system calls */
PERLVAR(Idoextract,	bool)
PERLVAR(Isawampersand,	bool)		/* must save all match strings */
PERLVAR(Iunsafe,	bool)
PERLVAR(Iinplace,	char *)
PERLVAR(Ie_script,	SV *)
PERLVAR(Iperldb,	U32)

/* This value may be set when embedding for full cleanup  */
/* 0=none, 1=full, 2=full with checks */
PERLVARI(Iperl_destruct_level,	int,	0)

/* magical thingies */
PERLVAR(Ibasetime,	Time_t)		/* $^T */
PERLVAR(Iformfeed,	SV *)		/* $^L */


PERLVARI(Imaxsysfd,	I32,	MAXSYSFD)
					/* top fd to pass to subprocesses */
PERLVAR(Imultiline,	int)		/* $*--do strings hold >1 line? */
PERLVAR(Istatusvalue,	I32)		/* $? */
PERLVAR(Iexit_flags,	U8)		/* was exit() unexpected, etc. */
#ifdef VMS
PERLVAR(Istatusvalue_vms,U32)
#endif

/* shortcuts to various I/O objects */
PERLVAR(Istdingv,	GV *)
PERLVAR(Istderrgv,	GV *)
PERLVAR(Idefgv,		GV *)
PERLVAR(Iargvgv,	GV *)
PERLVAR(Iargvoutgv,	GV *)
PERLVAR(Iargvout_stack,	AV *)

/* shortcuts to regexp stuff */
/* this one needs to be moved to thrdvar.h and accessed via
 * find_threadsv() when USE_THREADS */
PERLVAR(Ireplgv,	GV *)

/* shortcuts to misc objects */
PERLVAR(Ierrgv,		GV *)

/* shortcuts to debugging objects */
PERLVAR(IDBgv,		GV *)
PERLVAR(IDBline,	GV *)

/*
=for apidoc mn|GV *|PL_DBsub
When Perl is run in debugging mode, with the B<-d> switch, this GV contains
the SV which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's $DB::sub variable.  See
C<PL_DBsingle>.

=for apidoc mn|SV *|PL_DBsingle
When Perl is run in debugging mode, with the B<-d> switch, this SV is a
boolean which indicates whether subs are being single-stepped. 
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's $DB::single variable.  See
C<PL_DBsub>.

=for apidoc mn|SV *|PL_DBtrace
Trace variable used when Perl is run in debugging mode, with the B<-d>
switch.  This is the C variable which corresponds to Perl's $DB::trace
variable.  See C<PL_DBsingle>.

=cut
*/

PERLVAR(IDBsub,		GV *)
PERLVAR(IDBsingle,	SV *)
PERLVAR(IDBtrace,	SV *)
PERLVAR(IDBsignal,	SV *)
PERLVAR(Ilineary,	AV *)		/* lines of script for debugger */
PERLVAR(Idbargs,	AV *)		/* args to call listed by caller function */

/* symbol tables */
PERLVAR(Idebstash,	HV *)		/* symbol table for perldb package */
PERLVAR(Iglobalstash,	HV *)		/* global keyword overrides imported here */
PERLVAR(Icurstname,	SV *)		/* name of current package */
PERLVAR(Ibeginav,	AV *)		/* names of BEGIN subroutines */
PERLVAR(Iendav,		AV *)		/* names of END subroutines */
PERLVAR(Icheckav,	AV *)		/* names of CHECK subroutines */
PERLVAR(Iinitav,	AV *)		/* names of INIT subroutines */
PERLVAR(Istrtab,	HV *)		/* shared string table */
PERLVARI(Isub_generation,U32,1)		/* incr to invalidate method cache */

/* memory management */
PERLVAR(Isv_count,	I32)		/* how many SV* are currently allocated */
PERLVAR(Isv_objcount,	I32)		/* how many objects are currently allocated */
PERLVAR(Isv_root,	SV*)		/* storage for SVs belonging to interp */
PERLVAR(Isv_arenaroot,	SV*)		/* list of areas for garbage collection */

/* funky return mechanisms */
PERLVAR(Iforkprocess,	int)		/* so do_open |- can return proc# */

/* subprocess state */
PERLVAR(Ifdpid,		AV *)		/* keep fd-to-pid mappings for my_popen */

/* internal state */
PERLVAR(Itainting,	bool)		/* doing taint checks */
PERLVARI(Iop_mask,	char *,	NULL)	/* masked operations for safe evals */

/* current interpreter roots */
PERLVAR(Imain_cv,	CV *)
PERLVAR(Imain_root,	OP *)
PERLVAR(Imain_start,	OP *)
PERLVAR(Ieval_root,	OP *)
PERLVAR(Ieval_start,	OP *)

/* runtime control stuff */
PERLVARI(Icurcopdb,	COP *,	NULL)
PERLVARI(Icopline,	line_t,	NOLINE)

/* statics moved here for shared library purposes */
PERLVAR(Ifilemode,	int)		/* so nextargv() can preserve mode */
PERLVAR(Ilastfd,	int)		/* what to preserve mode on */
PERLVAR(Ioldname,	char *)		/* what to preserve mode on */
PERLVAR(IArgv,		char **)	/* stuff to free from do_aexec, vfork safe */
PERLVAR(ICmd,		char *)		/* stuff to free from do_aexec, vfork safe */
PERLVAR(Igensym,	I32)		/* next symbol for getsym() to define */
PERLVAR(Ipreambled,	bool)
PERLVAR(Ipreambleav,	AV *)
PERLVARI(Ilaststatval,	int,	-1)
PERLVARI(Ilaststype,	I32,	OP_STAT)
PERLVAR(Imess_sv,	SV *)

/* XXX shouldn't these be per-thread? --GSAR */
PERLVAR(Iors,		char *)		/* output record separator $\ */
PERLVAR(Iorslen,	STRLEN)
PERLVAR(Iofmt,		char *)		/* output format for numbers $# */

/* interpreter atexit processing */
PERLVARI(Iexitlist,	PerlExitListEntry *, NULL)
					/* list of exit functions */
PERLVARI(Iexitlistlen,	I32, 0)		/* length of same */

/*
=for apidoc Amn|HV*|PL_modglobal

C<PL_modglobal> is a general purpose, interpreter global HV for use by 
extensions that need to keep information on a per-interpreter basis.
In a pinch, it can also be used as a symbol table for extensions 
to share data among each other.  It is a good idea to use keys 
prefixed by the package name of the extension that owns the data.

=cut
*/

PERLVAR(Imodglobal,	HV *)		/* per-interp module data */

/* these used to be in global before 5.004_68 */
PERLVARI(Iprofiledata,	U32 *,	NULL)	/* table of ops, counts */
PERLVARI(Irsfp,	PerlIO * VOL,	Nullfp) /* current source file pointer */
PERLVARI(Irsfp_filters,	AV *,	Nullav)	/* keeps active source filters */

PERLVAR(Icompiling,	COP)		/* compiling/done executing marker */

PERLVAR(Icompcv,	CV *)		/* currently compiling subroutine */
PERLVAR(Icomppad,	AV *)		/* storage for lexically scoped temporaries */
PERLVAR(Icomppad_name,	AV *)		/* variable names for "my" variables */
PERLVAR(Icomppad_name_fill,	I32)	/* last "introduced" variable offset */
PERLVAR(Icomppad_name_floor,	I32)	/* start of vars in innermost block */

#ifdef HAVE_INTERP_INTERN
PERLVAR(Isys_intern,	struct interp_intern)
					/* platform internals */
#endif

/* more statics moved here */
PERLVARI(Igeneration,	int,	100)	/* from op.c */
PERLVAR(IDBcv,		CV *)		/* from perl.c */

PERLVARI(Iin_clean_objs,bool,    FALSE)	/* from sv.c */
PERLVARI(Iin_clean_all,	bool,    FALSE)	/* from sv.c */

PERLVAR(Ilinestart,	char *)		/* beg. of most recently read line */
PERLVAR(Ipending_ident,	char)		/* pending identifier lookup */
PERLVAR(Isublex_info,	SUBLEXINFO)	/* from toke.c */

#ifdef USE_THREADS
PERLVAR(Ithrsv,		SV *)		/* struct perl_thread for main thread */
PERLVARI(Ithreadnum,	U32,	0)	/* incremented each thread creation */
PERLVAR(Istrtab_mutex,	perl_mutex)	/* Mutex for string table access */
#endif /* USE_THREADS */

PERLVAR(Iuid,		Uid_t)		/* current real user id */
PERLVAR(Ieuid,		Uid_t)		/* current effective user id */
PERLVAR(Igid,		Gid_t)		/* current real group id */
PERLVAR(Iegid,		Gid_t)		/* current effective group id */
PERLVAR(Inomemok,	bool)		/* let malloc context handle nomem */
PERLVAR(Ian,		U32)		/* malloc sequence number */
PERLVAR(Icop_seqmax,	U32)		/* statement sequence number */
PERLVAR(Iop_seqmax,	U16)		/* op sequence number */
PERLVAR(Ievalseq,	U32)		/* eval sequence number */
PERLVAR(Iorigenviron,	char **)
PERLVAR(Iorigalen,	U32)
PERLVAR(Ipidstatus,	HV *)		/* pid-to-status mappings for waitpid */
PERLVARI(Imaxo,	int,	MAXO)		/* maximum number of ops */
PERLVAR(Iosname,	char *)		/* operating system */
PERLVARI(Ish_path,	char *,	SH_PATH)/* full path of shell */
PERLVAR(Isighandlerp,	Sighandler_t)

PERLVAR(Ixiv_arenaroot,	XPV*)		/* list of allocated xiv areas */
PERLVAR(Ixiv_root,	IV *)		/* free xiv list */
PERLVAR(Ixnv_root,	NV *)		/* free xnv list */
PERLVAR(Ixrv_root,	XRV *)		/* free xrv list */
PERLVAR(Ixpv_root,	XPV *)		/* free xpv list */
PERLVAR(Ixpviv_root,	XPVIV *)	/* free xpviv list */
PERLVAR(Ixpvnv_root,	XPVNV *)	/* free xpvnv list */
PERLVAR(Ixpvcv_root,	XPVCV *)	/* free xpvcv list */
PERLVAR(Ixpvav_root,	XPVAV *)	/* free xpvav list */
PERLVAR(Ixpvhv_root,	XPVHV *)	/* free xpvhv list */
PERLVAR(Ixpvmg_root,	XPVMG *)	/* free xpvmg list */
PERLVAR(Ixpvlv_root,	XPVLV *)	/* free xpvlv list */
PERLVAR(Ixpvbm_root,	XPVBM *)	/* free xpvbm list */
PERLVAR(Ihe_root,	HE *)		/* free he list */
PERLVAR(Inice_chunk,	char *)		/* a nice chunk of memory to reuse */
PERLVAR(Inice_chunk_size,	U32)	/* how nice the chunk of memory is */

PERLVARI(Irunops,	runops_proc_t,	MEMBER_TO_FPTR(RUNOPS_DEFAULT))

PERLVARA(Itokenbuf,256,	char)

/*
=for apidoc Amn|SV|PL_sv_undef
This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.

=for apidoc Amn|SV|PL_sv_no
This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as
C<&PL_sv_no>.

=for apidoc Amn|SV|PL_sv_yes
This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as
C<&PL_sv_yes>.

=cut
*/

PERLVAR(Isv_undef,	SV)
PERLVAR(Isv_no,		SV)
PERLVAR(Isv_yes,	SV)

#ifdef CSH
PERLVARI(Icshname,	char *,	CSH)
PERLVAR(Icshlen,	I32)
#endif

PERLVAR(Ilex_state,	U32)		/* next token is determined */
PERLVAR(Ilex_defer,	U32)		/* state after determined token */
PERLVAR(Ilex_expect,	int)		/* expect after determined token */
PERLVAR(Ilex_brackets,	I32)		/* bracket count */
PERLVAR(Ilex_formbrack,	I32)		/* bracket count at outer format level */
PERLVAR(Ilex_casemods,	I32)		/* casemod count */
PERLVAR(Ilex_dojoin,	I32)		/* doing an array interpolation */
PERLVAR(Ilex_starts,	I32)		/* how many interps done on level */
PERLVAR(Ilex_stuff,	SV *)		/* runtime pattern from m// or s/// */
PERLVAR(Ilex_repl,	SV *)		/* runtime replacement from s/// */
PERLVAR(Ilex_op,	OP *)		/* extra info to pass back on op */
PERLVAR(Ilex_inpat,	OP *)		/* in pattern $) and $| are special */
PERLVAR(Ilex_inwhat,	I32)		/* what kind of quoting are we in */
PERLVAR(Ilex_brackstack,char *)		/* what kind of brackets to pop */
PERLVAR(Ilex_casestack,	char *)		/* what kind of case mods in effect */

/* What we know when we're in LEX_KNOWNEXT state. */
PERLVARA(Inextval,5,	YYSTYPE)	/* value of next token, if any */
PERLVARA(Inexttype,5,	I32)		/* type of next token */
PERLVAR(Inexttoke,	I32)

PERLVAR(Ilinestr,	SV *)
PERLVAR(Ibufptr,	char *)
PERLVAR(Ioldbufptr,	char *)
PERLVAR(Ioldoldbufptr,	char *)
PERLVAR(Ibufend,	char *)
PERLVARI(Iexpect,int,	XSTATE)		/* how to interpret ambiguous tokens */

PERLVAR(Imulti_start,	I32)		/* 1st line of multi-line string */
PERLVAR(Imulti_end,	I32)		/* last line of multi-line string */
PERLVAR(Imulti_open,	I32)		/* delimiter of said string */
PERLVAR(Imulti_close,	I32)		/* delimiter of said string */

PERLVAR(Ierror_count,	I32)		/* how many errors so far, max 10 */
PERLVAR(Isubline,	I32)		/* line this subroutine began on */
PERLVAR(Isubname,	SV *)		/* name of current subroutine */

PERLVAR(Imin_intro_pending,	I32)	/* start of vars to introduce */
PERLVAR(Imax_intro_pending,	I32)	/* end of vars to introduce */
PERLVAR(Ipadix,		I32)		/* max used index in current "register" pad */
PERLVAR(Ipadix_floor,	I32)		/* how low may inner block reset padix */
PERLVAR(Ipad_reset_pending,	I32)	/* reset pad on next attempted alloc */

PERLVAR(Ilast_uni,	char *)		/* position of last named-unary op */
PERLVAR(Ilast_lop,	char *)		/* position of last list operator */
PERLVAR(Ilast_lop_op,	OPCODE)		/* last list operator */
PERLVAR(Iin_my,		I32)		/* we're compiling a "my" (or "our") declaration */
PERLVAR(Iin_my_stash,	HV *)		/* declared class of this "my" declaration */
#ifdef FCRYPT
PERLVAR(Icryptseen,	bool)		/* has fast crypt() been initialized? */
#endif

PERLVAR(Ihints,		U32)		/* pragma-tic compile-time flags */

PERLVAR(Idebug,		VOL U32)	/* flags given to -D switch */

PERLVAR(Iamagic_generation,	long)

#ifdef USE_LOCALE_COLLATE
PERLVAR(Icollation_ix,	U32)		/* Collation generation index */
PERLVAR(Icollation_name,char *)		/* Name of current collation */
PERLVARI(Icollation_standard, bool,	TRUE)
					/* Assume simple collation */
PERLVAR(Icollxfrm_base,	Size_t)		/* Basic overhead in *xfrm() */
PERLVARI(Icollxfrm_mult,Size_t,	2)	/* Expansion factor in *xfrm() */
#endif /* USE_LOCALE_COLLATE */

#ifdef USE_LOCALE_NUMERIC

PERLVAR(Inumeric_name,	char *)		/* Name of current numeric locale */
PERLVARI(Inumeric_standard,	bool,	TRUE)
					/* Assume simple numerics */
PERLVARI(Inumeric_local,	bool,	TRUE)
					/* Assume local numerics */
PERLVAR(Idummy1_bincompat,		char)
					/* Used to be numeric_radix */

#endif /* !USE_LOCALE_NUMERIC */

/* utf8 character classes */
PERLVAR(Iutf8_alnum,	SV *)
PERLVAR(Iutf8_alnumc,	SV *)
PERLVAR(Iutf8_ascii,	SV *)
PERLVAR(Iutf8_alpha,	SV *)
PERLVAR(Iutf8_space,	SV *)
PERLVAR(Iutf8_cntrl,	SV *)
PERLVAR(Iutf8_graph,	SV *)
PERLVAR(Iutf8_digit,	SV *)
PERLVAR(Iutf8_upper,	SV *)
PERLVAR(Iutf8_lower,	SV *)
PERLVAR(Iutf8_print,	SV *)
PERLVAR(Iutf8_punct,	SV *)
PERLVAR(Iutf8_xdigit,	SV *)
PERLVAR(Iutf8_mark,	SV *)
PERLVAR(Iutf8_toupper,	SV *)
PERLVAR(Iutf8_totitle,	SV *)
PERLVAR(Iutf8_tolower,	SV *)
PERLVAR(Ilast_swash_hv,	HV *)
PERLVAR(Ilast_swash_klen,	U32)
PERLVARA(Ilast_swash_key,10,	U8)
PERLVAR(Ilast_swash_tmps,	U8 *)
PERLVAR(Ilast_swash_slen,	STRLEN)

/* perly.c globals */
PERLVAR(Iyydebug,	int)
PERLVAR(Iyynerrs,	int)
PERLVAR(Iyyerrflag,	int)
PERLVAR(Iyychar,	int)
PERLVAR(Iyyval,		YYSTYPE)
PERLVAR(Iyylval,	YYSTYPE)

PERLVAR(Iglob_index,	int)
PERLVAR(Isrand_called,	bool)
PERLVARA(Iuudmap,256,	char)
PERLVAR(Ibitcount,	char *)

#ifdef USE_THREADS
PERLVAR(Isv_mutex,	perl_mutex)	/* Mutex for allocating SVs in sv.c */
PERLVAR(Ieval_mutex,	perl_mutex)	/* Mutex for doeval */
PERLVAR(Ieval_cond,	perl_cond)	/* Condition variable for doeval */
PERLVAR(Ieval_owner,	struct perl_thread *)
					/* Owner thread for doeval */
PERLVAR(Inthreads,	int)		/* Number of threads currently */
PERLVAR(Ithreads_mutex,	perl_mutex)	/* Mutex for nthreads and thread list */
PERLVAR(Inthreads_cond,	perl_cond)	/* Condition variable for nthreads */
PERLVAR(Isvref_mutex,	perl_mutex)	/* Mutex for SvREFCNT_{inc,dec} */
PERLVARI(Ithreadsv_names,char *,	THREADSV_NAMES)
#ifdef FAKE_THREADS
PERLVAR(Icurthr,	struct perl_thread *)
					/* Currently executing (fake) thread */
#endif

PERLVAR(Icred_mutex,	perl_mutex)	/* altered credentials in effect */

#endif /* USE_THREADS */

PERLVAR(Ipsig_ptr, SV**)
PERLVAR(Ipsig_name, SV**)

#if defined(PERL_IMPLICIT_SYS)
PERLVAR(IMem,		struct IPerlMem*)
PERLVAR(IMemShared,	struct IPerlMem*)
PERLVAR(IMemParse,	struct IPerlMem*)
PERLVAR(IEnv,		struct IPerlEnv*)
PERLVAR(IStdIO,		struct IPerlStdIO*)
PERLVAR(ILIO,		struct IPerlLIO*)
PERLVAR(IDir,		struct IPerlDir*)
PERLVAR(ISock,		struct IPerlSock*)
PERLVAR(IProc,		struct IPerlProc*)
#endif

#if defined(USE_ITHREADS)
PERLVAR(Iptr_table,	PTR_TBL_t*)
#endif
PERLVARI(Ibeginav_save, AV*, Nullav)	/* save BEGIN{}s when compiling */

#ifdef USE_THREADS
PERLVAR(Ifdpid_mutex,	perl_mutex)	/* mutex for fdpid array */
PERLVAR(Isv_lock_mutex,	perl_mutex)	/* mutex for SvLOCK macro */
#endif

PERLVAR(Inullstash,	HV *)		/* illegal symbols end up here */

PERLVAR(Ixnv_arenaroot,	XPV*)		/* list of allocated xnv areas */
PERLVAR(Ixrv_arenaroot,	XPV*)		/* list of allocated xrv areas */
PERLVAR(Ixpv_arenaroot,	XPV*)		/* list of allocated xpv areas */
PERLVAR(Ixpviv_arenaroot,XPVIV*)	/* list of allocated xpviv areas */
PERLVAR(Ixpvnv_arenaroot,XPVNV*)	/* list of allocated xpvnv areas */
PERLVAR(Ixpvcv_arenaroot,XPVCV*)	/* list of allocated xpvcv areas */
PERLVAR(Ixpvav_arenaroot,XPVAV*)	/* list of allocated xpvav areas */
PERLVAR(Ixpvhv_arenaroot,XPVHV*)	/* list of allocated xpvhv areas */
PERLVAR(Ixpvmg_arenaroot,XPVMG*)	/* list of allocated xpvmg areas */
PERLVAR(Ixpvlv_arenaroot,XPVLV*)	/* list of allocated xpvlv areas */
PERLVAR(Ixpvbm_arenaroot,XPVBM*)	/* list of allocated xpvbm areas */
PERLVAR(Ihe_arenaroot,	XPV*)		/* list of allocated he areas */

#ifdef USE_LOCALE_NUMERIC

PERLVAR(Inumeric_radix_sv,	SV *)	/* The radix separator if not '.' */
#endif

/* New variables must be added to the very end for binary compatibility.
 * XSUB.h provides wrapper functions via perlapi.h that make this
 * irrelevant, but not all code may be expected to #include XSUB.h. */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\netdb.h ===
// netdb.h

// djl
// Provide UNIX compatibility


#ifndef  _INC_NETDB
#define  _INC_NETDB

#include <sys/socket.h>

#endif //_INC_NETDB
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\iperlsys.h ===
/*
 * iperlsys.h - Perl's interface to the system
 *
 * This file defines the system level functionality that perl needs.
 *
 * When using C, this definition is in the form of a set of macros
 * that can be #defined to the system-level function (or a wrapper
 * provided elsewhere).
 *
 * When using C++ with -DPERL_OBJECT, this definition is in the
 * form of a set of virtual base classes which must be subclassed to
 * provide a real implementation.  The Perl Object will use instances
 * of this implementation to use the system-level functionality.
 *
 * GSAR 21-JUN-98
 */

#ifndef __Inc__IPerl___
#define __Inc__IPerl___

/*
 *	PerlXXX_YYY explained - DickH and DougL @ ActiveState.com
 *
 * XXX := functional group
 * YYY := stdlib/OS function name
 *
 * Continuing with the theme of PerlIO, all OS functionality was
 * encapsulated into one of several interfaces.
 *
 * PerlIO - stdio
 * PerlLIO - low level I/O
 * PerlMem - malloc, realloc, free
 * PerlDir - directory related
 * PerlEnv - process environment handling
 * PerlProc - process control
 * PerlSock - socket functions
 *
 *
 * The features of this are:
 * 1. All OS dependant code is in the Perl Host and not the Perl Core.
 *    (At least this is the holy grail goal of this work)
 * 2. The Perl Host (see perl.h for description) can provide a new and
 *    improved interface to OS functionality if required.
 * 3. Developers can easily hook into the OS calls for instrumentation
 *    or diagnostic purposes.
 *
 * What was changed to do this:
 * 1. All calls to OS functions were replaced with PerlXXX_YYY
 *
 */


/*
    Interface for perl stdio functions
*/


/* Clean up (or at least document) the various possible #defines.
   This section attempts to match the 5.003_03 Configure variables
   onto the 5.003_02 header file values.
   I can't figure out where USE_STDIO was supposed to be set.
   --AD
*/
#ifndef USE_PERLIO
# define PERLIO_IS_STDIO
#endif

/* Below is the 5.003_02 stuff. */
#ifdef USE_STDIO
#  ifndef PERLIO_IS_STDIO
#      define PERLIO_IS_STDIO
#  endif
#else
extern void PerlIO_init (void);
#endif

#ifndef Sighandler_t
typedef Signal_t (*Sighandler_t) (int);
#endif

#if defined(PERL_IMPLICIT_SYS)

#ifndef PerlIO
typedef struct _PerlIO PerlIO;
#endif

/* IPerlStdIO		*/
struct IPerlStdIO;
struct IPerlStdIOInfo;
typedef PerlIO*		(*LPStdin)(struct IPerlStdIO*);
typedef PerlIO*		(*LPStdout)(struct IPerlStdIO*);
typedef PerlIO*		(*LPStderr)(struct IPerlStdIO*);
typedef PerlIO*		(*LPOpen)(struct IPerlStdIO*, const char*,
			    const char*);
typedef int		(*LPClose)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPEof)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPError)(struct IPerlStdIO*, PerlIO*);
typedef void		(*LPClearerr)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPGetc)(struct IPerlStdIO*, PerlIO*);
typedef char*		(*LPGetBase)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPGetBufsiz)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPGetCnt)(struct IPerlStdIO*, PerlIO*);
typedef char*		(*LPGetPtr)(struct IPerlStdIO*, PerlIO*);
typedef char*		(*LPGets)(struct IPerlStdIO*, PerlIO*, char*, int);
typedef int		(*LPPutc)(struct IPerlStdIO*, PerlIO*, int);
typedef int		(*LPPuts)(struct IPerlStdIO*, PerlIO*, const char*);
typedef int		(*LPFlush)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPUngetc)(struct IPerlStdIO*, PerlIO*,int);
typedef int		(*LPFileno)(struct IPerlStdIO*, PerlIO*);
typedef PerlIO*		(*LPFdopen)(struct IPerlStdIO*, int, const char*);
typedef PerlIO*		(*LPReopen)(struct IPerlStdIO*, const char*,
			    const char*, PerlIO*);
typedef SSize_t		(*LPRead)(struct IPerlStdIO*, PerlIO*, void*, Size_t);
typedef SSize_t		(*LPWrite)(struct IPerlStdIO*, PerlIO*, const void*,
			    Size_t);
typedef void		(*LPSetBuf)(struct IPerlStdIO*, PerlIO*, char*);
typedef int		(*LPSetVBuf)(struct IPerlStdIO*, PerlIO*, char*, int,
			    Size_t);
typedef void		(*LPSetCnt)(struct IPerlStdIO*, PerlIO*, int);
typedef void		(*LPSetPtrCnt)(struct IPerlStdIO*, PerlIO*, char*,
			    int);
typedef void		(*LPSetlinebuf)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPPrintf)(struct IPerlStdIO*, PerlIO*, const char*, 
			    ...);
typedef int		(*LPVprintf)(struct IPerlStdIO*, PerlIO*, const char*,
			    va_list);
typedef long		(*LPTell)(struct IPerlStdIO*, PerlIO*);
typedef int		(*LPSeek)(struct IPerlStdIO*, PerlIO*, Off_t, int);
typedef void		(*LPRewind)(struct IPerlStdIO*, PerlIO*);
typedef PerlIO*		(*LPTmpfile)(struct IPerlStdIO*);
typedef int		(*LPGetpos)(struct IPerlStdIO*, PerlIO*, Fpos_t*);
typedef int		(*LPSetpos)(struct IPerlStdIO*, PerlIO*,
			    const Fpos_t*);
typedef void		(*LPInit)(struct IPerlStdIO*);
typedef void		(*LPInitOSExtras)(struct IPerlStdIO*);
typedef PerlIO*		(*LPFdupopen)(struct IPerlStdIO*, PerlIO*);

struct IPerlStdIO
{
    LPStdin		pStdin;
    LPStdout		pStdout;
    LPStderr		pStderr;
    LPOpen		pOpen;
    LPClose		pClose;
    LPEof		pEof;
    LPError		pError;
    LPClearerr		pClearerr;
    LPGetc		pGetc;
    LPGetBase		pGetBase;
    LPGetBufsiz		pGetBufsiz;
    LPGetCnt		pGetCnt;
    LPGetPtr		pGetPtr;
    LPGets		pGets;
    LPPutc		pPutc;
    LPPuts		pPuts;
    LPFlush		pFlush;
    LPUngetc		pUngetc;
    LPFileno		pFileno;
    LPFdopen		pFdopen;
    LPReopen		pReopen;
    LPRead		pRead;
    LPWrite		pWrite;
    LPSetBuf		pSetBuf;
    LPSetVBuf		pSetVBuf;
    LPSetCnt		pSetCnt;
    LPSetPtrCnt		pSetPtrCnt;
    LPSetlinebuf	pSetlinebuf;
    LPPrintf		pPrintf;
    LPVprintf		pVprintf;
    LPTell		pTell;
    LPSeek		pSeek;
    LPRewind		pRewind;
    LPTmpfile		pTmpfile;
    LPGetpos		pGetpos;
    LPSetpos		pSetpos;
    LPInit		pInit;
    LPInitOSExtras	pInitOSExtras;
    LPFdupopen		pFdupopen;
};

struct IPerlStdIOInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlStdIO	perlStdIOList;
};

#ifdef USE_STDIO_PTR
#  define PerlIO_has_cntptr(f)		1       
#  ifdef STDIO_PTR_LVALUE
#    ifdef  STDIO_CNT_LVALUE
#      define PerlIO_canset_cnt(f)	1      
#      ifdef STDIO_PTR_LVAL_NOCHANGE_CNT
#        define PerlIO_fast_gets(f)	1        
#      endif
#    else /* STDIO_CNT_LVALUE */
#      define PerlIO_canset_cnt(f)	0      
#    endif
#  else /* STDIO_PTR_LVALUE */
#    ifdef STDIO_PTR_LVAL_SETS_CNT
#      define PerlIO_fast_gets(f)	1        
#    endif
#  endif
#else  /* USE_STDIO_PTR */
#  define PerlIO_has_cntptr(f)		0
#  define PerlIO_canset_cnt(f)		0
#endif /* USE_STDIO_PTR */

#ifndef PerlIO_fast_gets
#define PerlIO_fast_gets(f)		0        
#endif

#ifdef FILE_base
#define PerlIO_has_base(f)		1
#else
#define PerlIO_has_base(f)		0
#endif

#define PerlIO_stdin()							\
	(*PL_StdIO->pStdin)(PL_StdIO)
#define PerlIO_stdout()							\
	(*PL_StdIO->pStdout)(PL_StdIO)
#define PerlIO_stderr()							\
	(*PL_StdIO->pStderr)(PL_StdIO)
#define PerlIO_open(x,y)						\
	(*PL_StdIO->pOpen)(PL_StdIO, (x),(y))
#define PerlIO_close(f)							\
	(*PL_StdIO->pClose)(PL_StdIO, (f))
#define PerlIO_eof(f)							\
	(*PL_StdIO->pEof)(PL_StdIO, (f))
#define PerlIO_error(f)							\
	(*PL_StdIO->pError)(PL_StdIO, (f))
#define PerlIO_clearerr(f)						\
	(*PL_StdIO->pClearerr)(PL_StdIO, (f))
#define PerlIO_getc(f)							\
	(*PL_StdIO->pGetc)(PL_StdIO, (f))
#define PerlIO_get_base(f)						\
	(*PL_StdIO->pGetBase)(PL_StdIO, (f))
#define PerlIO_get_bufsiz(f)						\
	(*PL_StdIO->pGetBufsiz)(PL_StdIO, (f))
#define PerlIO_get_cnt(f)						\
	(*PL_StdIO->pGetCnt)(PL_StdIO, (f))
#define PerlIO_get_ptr(f)						\
	(*PL_StdIO->pGetPtr)(PL_StdIO, (f))
#define PerlIO_putc(f,c)						\
	(*PL_StdIO->pPutc)(PL_StdIO, (f),(c))
#define PerlIO_puts(f,s)						\
	(*PL_StdIO->pPuts)(PL_StdIO, (f),(s))
#define PerlIO_flush(f)							\
	(*PL_StdIO->pFlush)(PL_StdIO, (f))
#define PerlIO_gets(s, n, fp)						\
	(*PL_StdIO->pGets)(PL_StdIO, (fp), s, n)
#define PerlIO_ungetc(f,c)						\
	(*PL_StdIO->pUngetc)(PL_StdIO, (f),(c))
#define PerlIO_fileno(f)						\
	(*PL_StdIO->pFileno)(PL_StdIO, (f))
#define PerlIO_fdopen(f, s)						\
	(*PL_StdIO->pFdopen)(PL_StdIO, (f),(s))
#define PerlIO_reopen(p, m, f)						\
	(*PL_StdIO->pReopen)(PL_StdIO, (p), (m), (f))
#define PerlIO_read(f,buf,count)					\
	(SSize_t)(*PL_StdIO->pRead)(PL_StdIO, (f), (buf), (count))
#define PerlIO_write(f,buf,count)					\
	(*PL_StdIO->pWrite)(PL_StdIO, (f), (buf), (count))
#define PerlIO_setbuf(f,b)						\
	(*PL_StdIO->pSetBuf)(PL_StdIO, (f), (b))
#define PerlIO_setvbuf(f,b,t,s)						\
	(*PL_StdIO->pSetVBuf)(PL_StdIO, (f),(b),(t),(s))
#define PerlIO_set_cnt(f,c)						\
	(*PL_StdIO->pSetCnt)(PL_StdIO, (f), (c))
#define PerlIO_set_ptrcnt(f,p,c)					\
	(*PL_StdIO->pSetPtrCnt)(PL_StdIO, (f), (p), (c))
#define PerlIO_setlinebuf(f)						\
	(*PL_StdIO->pSetlinebuf)(PL_StdIO, (f))
#define PerlIO_printf		Perl_fprintf_nocontext
#define PerlIO_stdoutf		Perl_printf_nocontext
#define PerlIO_vprintf(f,fmt,a)						\
	(*PL_StdIO->pVprintf)(PL_StdIO, (f),(fmt),a)          
#define PerlIO_tell(f)							\
	(*PL_StdIO->pTell)(PL_StdIO, (f))
#define PerlIO_seek(f,o,w)						\
	(*PL_StdIO->pSeek)(PL_StdIO, (f),(o),(w))
#define PerlIO_getpos(f,p)						\
	(*PL_StdIO->pGetpos)(PL_StdIO, (f),(p))
#define PerlIO_setpos(f,p)						\
	(*PL_StdIO->pSetpos)(PL_StdIO, (f),(p))
#define PerlIO_rewind(f)						\
	(*PL_StdIO->pRewind)(PL_StdIO, (f))
#define PerlIO_tmpfile()						\
	(*PL_StdIO->pTmpfile)(PL_StdIO)
#define PerlIO_init()							\
	(*PL_StdIO->pInit)(PL_StdIO)
#undef 	init_os_extras
#define init_os_extras()						\
	(*PL_StdIO->pInitOSExtras)(PL_StdIO)
#define PerlIO_fdupopen(f)						\
	(*PL_StdIO->pFdupopen)(PL_StdIO, (f))

#else	/* PERL_IMPLICIT_SYS */

#include "perlsdio.h"
#include "perl.h"
#define PerlIO_fdupopen(f)		(f)

#endif	/* PERL_IMPLICIT_SYS */

#ifndef PERLIO_IS_STDIO
#ifdef USE_SFIO
#include "perlsfio.h"
#endif /* USE_SFIO */
#endif /* PERLIO_IS_STDIO */

#ifndef EOF
#define EOF (-1)
#endif

/* This is to catch case with no stdio */
#ifndef BUFSIZ
#define BUFSIZ 1024
#endif

#ifndef SEEK_SET
#define SEEK_SET 0
#endif

#ifndef SEEK_CUR
#define SEEK_CUR 1
#endif

#ifndef SEEK_END
#define SEEK_END 2
#endif

#ifndef PerlIO
struct _PerlIO;
#define PerlIO struct _PerlIO
#endif /* No PerlIO */

#ifndef Fpos_t
#define Fpos_t long
#endif

#ifndef NEXT30_NO_ATTRIBUTE
#ifndef HASATTRIBUTE       /* disable GNU-cc attribute checking? */
#ifdef  __attribute__      /* Avoid possible redefinition errors */
#undef  __attribute__
#endif
#define __attribute__(attr)
#endif
#endif

#ifndef PerlIO_stdoutf
extern int	PerlIO_stdoutf		(const char *,...)
					__attribute__((__format__ (__printf__, 1, 2)));
#endif
#ifndef PerlIO_puts
extern int	PerlIO_puts		(PerlIO *,const char *);
#endif
#ifndef PerlIO_open
extern PerlIO *	PerlIO_open		(const char *,const char *);
#endif
#ifndef PerlIO_close
extern int	PerlIO_close		(PerlIO *);
#endif
#ifndef PerlIO_eof
extern int	PerlIO_eof		(PerlIO *);
#endif
#ifndef PerlIO_error
extern int	PerlIO_error		(PerlIO *);
#endif
#ifndef PerlIO_clearerr
extern void	PerlIO_clearerr		(PerlIO *);
#endif
#ifndef PerlIO_getc
extern int	PerlIO_getc		(PerlIO *);
#endif
#ifndef PerlIO_putc
extern int	PerlIO_putc		(PerlIO *,int);
#endif
#ifndef PerlIO_flush
extern int	PerlIO_flush		(PerlIO *);
#endif
#ifndef PerlIO_ungetc
extern int	PerlIO_ungetc		(PerlIO *,int);
#endif
#ifndef PerlIO_fileno
extern int	PerlIO_fileno		(PerlIO *);
#endif
#ifndef PerlIO_fdopen
extern PerlIO *	PerlIO_fdopen		(int, const char *);
#endif
#ifndef PerlIO_importFILE
extern PerlIO *	PerlIO_importFILE	(FILE *,int);
#endif
#ifndef PerlIO_exportFILE
extern FILE *	PerlIO_exportFILE	(PerlIO *,int);
#endif
#ifndef PerlIO_findFILE
extern FILE *	PerlIO_findFILE		(PerlIO *);
#endif
#ifndef PerlIO_releaseFILE
extern void	PerlIO_releaseFILE	(PerlIO *,FILE *);
#endif
#ifndef PerlIO_read
extern SSize_t	PerlIO_read		(PerlIO *,void *,Size_t);
#endif
#ifndef PerlIO_write
extern SSize_t	PerlIO_write		(PerlIO *,const void *,Size_t);
#endif
#ifndef PerlIO_setlinebuf
extern void	PerlIO_setlinebuf	(PerlIO *);
#endif
#ifndef PerlIO_printf
extern int	PerlIO_printf		(PerlIO *, const char *,...)
					__attribute__((__format__ (__printf__, 2, 3)));
#endif
#ifndef PerlIO_sprintf
extern int	PerlIO_sprintf		(char *, int, const char *,...)
					__attribute__((__format__ (__printf__, 3, 4)));
#endif
#ifndef PerlIO_vprintf
extern int	PerlIO_vprintf		(PerlIO *, const char *, va_list);
#endif
#ifndef PerlIO_tell
extern Off_t	PerlIO_tell		(PerlIO *);
#endif
#ifndef PerlIO_seek
extern int	PerlIO_seek		(PerlIO *, Off_t, int);
#endif
#ifndef PerlIO_rewind
extern void	PerlIO_rewind		(PerlIO *);
#endif
#ifndef PerlIO_has_base
extern int	PerlIO_has_base		(PerlIO *);
#endif
#ifndef PerlIO_has_cntptr
extern int	PerlIO_has_cntptr	(PerlIO *);
#endif
#ifndef PerlIO_fast_gets
extern int	PerlIO_fast_gets	(PerlIO *);
#endif
#ifndef PerlIO_canset_cnt
extern int	PerlIO_canset_cnt	(PerlIO *);
#endif
#ifndef PerlIO_get_ptr
extern STDCHAR * PerlIO_get_ptr		(PerlIO *);
#endif
#ifndef PerlIO_get_cnt
extern int	PerlIO_get_cnt		(PerlIO *);
#endif
#ifndef PerlIO_set_cnt
extern void	PerlIO_set_cnt		(PerlIO *,int);
#endif
#ifndef PerlIO_set_ptrcnt
extern void	PerlIO_set_ptrcnt	(PerlIO *,STDCHAR *,int);
#endif
#ifndef PerlIO_get_base
extern STDCHAR * PerlIO_get_base	(PerlIO *);
#endif
#ifndef PerlIO_get_bufsiz
extern int	PerlIO_get_bufsiz	(PerlIO *);
#endif
#ifndef PerlIO_tmpfile
extern PerlIO *	PerlIO_tmpfile		(void);
#endif
#ifndef PerlIO_stdin
extern PerlIO *	PerlIO_stdin	(void);
#endif
#ifndef PerlIO_stdout
extern PerlIO *	PerlIO_stdout	(void);
#endif
#ifndef PerlIO_stderr
extern PerlIO *	PerlIO_stderr	(void);
#endif
#ifndef PerlIO_getpos
#ifdef USE_SFIO
extern int	PerlIO_getpos		(PerlIO *,Off_t *);
#else
extern int	PerlIO_getpos		(PerlIO *,Fpos_t *);
#endif
#endif
#ifndef PerlIO_setpos
#ifdef USE_SFIO
extern int	PerlIO_setpos		(PerlIO *,const Off_t *);
#else
extern int	PerlIO_setpos		(PerlIO *,const Fpos_t *);
#endif
#endif
#ifndef PerlIO_fdupopen
extern PerlIO *	PerlIO_fdupopen		(PerlIO *);
#endif


/*
 *   Interface for directory functions
 */

#if defined(PERL_IMPLICIT_SYS)

/* IPerlDir		*/
struct IPerlDir;
struct IPerlDirInfo;
typedef int		(*LPMakedir)(struct IPerlDir*, const char*, int);
typedef int		(*LPChdir)(struct IPerlDir*, const char*);
typedef int		(*LPRmdir)(struct IPerlDir*, const char*);
typedef int		(*LPDirClose)(struct IPerlDir*, DIR*);
typedef DIR*		(*LPDirOpen)(struct IPerlDir*, char*);
typedef struct direct*	(*LPDirRead)(struct IPerlDir*, DIR*);
typedef void		(*LPDirRewind)(struct IPerlDir*, DIR*);
typedef void		(*LPDirSeek)(struct IPerlDir*, DIR*, long);
typedef long		(*LPDirTell)(struct IPerlDir*, DIR*);
#ifdef WIN32
typedef char*		(*LPDirMapPathA)(struct IPerlDir*, const char*);
typedef WCHAR*		(*LPDirMapPathW)(struct IPerlDir*, const WCHAR*);
#endif

struct IPerlDir
{
    LPMakedir		pMakedir;
    LPChdir		pChdir;
    LPRmdir		pRmdir;
    LPDirClose		pClose;
    LPDirOpen		pOpen;
    LPDirRead		pRead;
    LPDirRewind		pRewind;
    LPDirSeek		pSeek;
    LPDirTell		pTell;
#ifdef WIN32
    LPDirMapPathA	pMapPathA;
    LPDirMapPathW	pMapPathW;
#endif
};

struct IPerlDirInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlDir	perlDirList;
};

#define PerlDir_mkdir(name, mode)				\
	(*PL_Dir->pMakedir)(PL_Dir, (name), (mode))
#define PerlDir_chdir(name)					\
	(*PL_Dir->pChdir)(PL_Dir, (name))
#define PerlDir_rmdir(name)					\
	(*PL_Dir->pRmdir)(PL_Dir, (name))
#define PerlDir_close(dir)					\
	(*PL_Dir->pClose)(PL_Dir, (dir))
#define PerlDir_open(name)					\
	(*PL_Dir->pOpen)(PL_Dir, (name))
#define PerlDir_read(dir)					\
	(*PL_Dir->pRead)(PL_Dir, (dir))
#define PerlDir_rewind(dir)					\
	(*PL_Dir->pRewind)(PL_Dir, (dir))
#define PerlDir_seek(dir, loc)					\
	(*PL_Dir->pSeek)(PL_Dir, (dir), (loc))
#define PerlDir_tell(dir)					\
	(*PL_Dir->pTell)(PL_Dir, (dir))
#ifdef WIN32
#define PerlDir_mapA(dir)					\
	(*PL_Dir->pMapPathA)(PL_Dir, (dir))
#define PerlDir_mapW(dir)					\
	(*PL_Dir->pMapPathW)(PL_Dir, (dir))
#endif

#else	/* PERL_IMPLICIT_SYS */

#define PerlDir_mkdir(name, mode)	Mkdir((name), (mode))
#ifdef VMS
#  define PerlDir_chdir(n)		Chdir(((n) && *(n)) ? (n) : "SYS$LOGIN")
#else 
#  define PerlDir_chdir(name)		chdir((name))
#endif
#define PerlDir_rmdir(name)		rmdir((name))
#define PerlDir_close(dir)		closedir((dir))
#define PerlDir_open(name)		opendir((name))
#define PerlDir_read(dir)		readdir((dir))
#define PerlDir_rewind(dir)		rewinddir((dir))
#define PerlDir_seek(dir, loc)		seekdir((dir), (loc))
#define PerlDir_tell(dir)		telldir((dir))
#ifdef WIN32
#define PerlDir_mapA(dir)		dir
#define PerlDir_mapW(dir)		dir
#endif

#endif	/* PERL_IMPLICIT_SYS */

/*
    Interface for perl environment functions
*/

#if defined(PERL_IMPLICIT_SYS)

/* IPerlEnv		*/
struct IPerlEnv;
struct IPerlEnvInfo;
typedef char*		(*LPEnvGetenv)(struct IPerlEnv*, const char*);
typedef int		(*LPEnvPutenv)(struct IPerlEnv*, const char*);
typedef char*		(*LPEnvGetenv_len)(struct IPerlEnv*,
				    const char *varname, unsigned long *len);
typedef int		(*LPEnvUname)(struct IPerlEnv*, struct utsname *name);
typedef void		(*LPEnvClearenv)(struct IPerlEnv*);
typedef void*		(*LPEnvGetChildenv)(struct IPerlEnv*);
typedef void		(*LPEnvFreeChildenv)(struct IPerlEnv*, void* env);
typedef char*		(*LPEnvGetChilddir)(struct IPerlEnv*);
typedef void		(*LPEnvFreeChilddir)(struct IPerlEnv*, char* dir);
#ifdef HAS_ENVGETENV
typedef char*		(*LPENVGetenv)(struct IPerlEnv*, const char *varname);
typedef char*		(*LPENVGetenv_len)(struct IPerlEnv*,
				    const char *varname, unsigned long *len);
#endif
#ifdef WIN32
typedef unsigned long	(*LPEnvOsID)(struct IPerlEnv*);
typedef char*		(*LPEnvLibPath)(struct IPerlEnv*, const char*);
typedef char*		(*LPEnvSiteLibPath)(struct IPerlEnv*, const char*);
typedef char*		(*LPEnvVendorLibPath)(struct IPerlEnv*, const char*);
typedef void		(*LPEnvGetChildIO)(struct IPerlEnv*, child_IO_table*);
#endif

struct IPerlEnv
{
    LPEnvGetenv		pGetenv;
    LPEnvPutenv		pPutenv;
    LPEnvGetenv_len	pGetenv_len;
    LPEnvUname		pEnvUname;
    LPEnvClearenv	pClearenv;
    LPEnvGetChildenv	pGetChildenv;
    LPEnvFreeChildenv	pFreeChildenv;
    LPEnvGetChilddir	pGetChilddir;
    LPEnvFreeChilddir	pFreeChilddir;
#ifdef HAS_ENVGETENV
    LPENVGetenv		pENVGetenv;
    LPENVGetenv_len	pENVGetenv_len;
#endif
#ifdef WIN32
    LPEnvOsID		pEnvOsID;
    LPEnvLibPath	pLibPath;
    LPEnvSiteLibPath	pSiteLibPath;
    LPEnvVendorLibPath	pVendorLibPath;
    LPEnvGetChildIO	pGetChildIO;
#endif
};

struct IPerlEnvInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlEnv	perlEnvList;
};

#define PerlEnv_putenv(str)					\
	(*PL_Env->pPutenv)(PL_Env,(str))
#define PerlEnv_getenv(str)					\
	(*PL_Env->pGetenv)(PL_Env,(str))
#define PerlEnv_getenv_len(str,l)				\
	(*PL_Env->pGetenv_len)(PL_Env,(str), (l))
#define PerlEnv_clearenv()					\
	(*PL_Env->pClearenv)(PL_Env)
#define PerlEnv_get_childenv()					\
	(*PL_Env->pGetChildenv)(PL_Env)
#define PerlEnv_free_childenv(e)				\
	(*PL_Env->pFreeChildenv)(PL_Env, (e))
#define PerlEnv_get_childdir()					\
	(*PL_Env->pGetChilddir)(PL_Env)
#define PerlEnv_free_childdir(d)				\
	(*PL_Env->pFreeChilddir)(PL_Env, (d))
#ifdef HAS_ENVGETENV
#  define PerlEnv_ENVgetenv(str)				\
	(*PL_Env->pENVGetenv)(PL_Env,(str))
#  define PerlEnv_ENVgetenv_len(str,l)				\
	(*PL_Env->pENVGetenv_len)(PL_Env,(str), (l))
#else
#  define PerlEnv_ENVgetenv(str)				\
	PerlEnv_getenv((str))
#  define PerlEnv_ENVgetenv_len(str,l)				\
	PerlEnv_getenv_len((str),(l))
#endif
#define PerlEnv_uname(name)					\
	(*PL_Env->pEnvUname)(PL_Env,(name))
#ifdef WIN32
#define PerlEnv_os_id()						\
	(*PL_Env->pEnvOsID)(PL_Env)
#define PerlEnv_lib_path(str)					\
	(*PL_Env->pLibPath)(PL_Env,(str))
#define PerlEnv_sitelib_path(str)				\
	(*PL_Env->pSiteLibPath)(PL_Env,(str))
#define PerlEnv_vendorlib_path(str)				\
	(*PL_Env->pVendorLibPath)(PL_Env,(str))
#define PerlEnv_get_child_IO(ptr)				\
	(*PL_Env->pGetChildIO)(PL_Env, ptr)
#endif

#else	/* PERL_IMPLICIT_SYS */

#define PerlEnv_putenv(str)		putenv((str))
#define PerlEnv_getenv(str)		getenv((str))
#define PerlEnv_getenv_len(str,l)	getenv_len((str), (l))
#ifdef HAS_ENVGETENV
#  define PerlEnv_ENVgetenv(str)	ENVgetenv((str))
#  define PerlEnv_ENVgetenv_len(str,l)	ENVgetenv_len((str), (l))
#else
#  define PerlEnv_ENVgetenv(str)	PerlEnv_getenv((str))
#  define PerlEnv_ENVgetenv_len(str,l)	PerlEnv_getenv_len((str), (l))
#endif
#define PerlEnv_uname(name)		uname((name))

#ifdef WIN32
#define PerlEnv_os_id()			win32_os_id()
#define PerlEnv_lib_path(str)		win32_get_privlib(str)
#define PerlEnv_sitelib_path(str)	win32_get_sitelib(str)
#define PerlEnv_vendorlib_path(str)	win32_get_vendorlib(str)
#define PerlEnv_get_child_IO(ptr)	win32_get_child_IO(ptr)
#define PerlEnv_clearenv()		win32_clearenv()
#define PerlEnv_get_childenv()		win32_get_childenv()
#define PerlEnv_free_childenv(e)	win32_free_childenv((e))
#define PerlEnv_get_childdir()		win32_get_childdir()
#define PerlEnv_free_childdir(d)	win32_free_childdir((d))
#else
#define PerlEnv_clearenv()		clearenv()
#define PerlEnv_get_childenv()		get_childenv()
#define PerlEnv_free_childenv(e)	free_childenv((e))
#define PerlEnv_get_childdir()		get_childdir()
#define PerlEnv_free_childdir(d)	free_childdir((d))
#endif

#endif	/* PERL_IMPLICIT_SYS */

/*
    Interface for perl low-level IO functions
*/

#if defined(PERL_IMPLICIT_SYS)

/* IPerlLIO		*/
struct IPerlLIO;
struct IPerlLIOInfo;
typedef int		(*LPLIOAccess)(struct IPerlLIO*, const char*, int);
typedef int		(*LPLIOChmod)(struct IPerlLIO*, const char*, int);
typedef int		(*LPLIOChown)(struct IPerlLIO*, const char*, uid_t,
			    gid_t);
typedef int		(*LPLIOChsize)(struct IPerlLIO*, int, long);
typedef int		(*LPLIOClose)(struct IPerlLIO*, int);
typedef int		(*LPLIODup)(struct IPerlLIO*, int);
typedef int		(*LPLIODup2)(struct IPerlLIO*, int, int);
typedef int		(*LPLIOFlock)(struct IPerlLIO*, int, int);
typedef int		(*LPLIOFileStat)(struct IPerlLIO*, int, struct stat*);
typedef int		(*LPLIOIOCtl)(struct IPerlLIO*, int, unsigned int,
			    char*);
typedef int		(*LPLIOIsatty)(struct IPerlLIO*, int);
typedef int		(*LPLIOLink)(struct IPerlLIO*, const char*,
				     const char *);
typedef long		(*LPLIOLseek)(struct IPerlLIO*, int, long, int);
typedef int		(*LPLIOLstat)(struct IPerlLIO*, const char*,
			    struct stat*);
typedef char*		(*LPLIOMktemp)(struct IPerlLIO*, char*);
typedef int		(*LPLIOOpen)(struct IPerlLIO*, const char*, int);	
typedef int		(*LPLIOOpen3)(struct IPerlLIO*, const char*, int, int);	
typedef int		(*LPLIORead)(struct IPerlLIO*, int, void*, unsigned int);
typedef int		(*LPLIORename)(struct IPerlLIO*, const char*,
			    const char*);
typedef int		(*LPLIOSetmode)(struct IPerlLIO*, int, int);
typedef int		(*LPLIONameStat)(struct IPerlLIO*, const char*,
			    struct stat*);
typedef char*		(*LPLIOTmpnam)(struct IPerlLIO*, char*);
typedef int		(*LPLIOUmask)(struct IPerlLIO*, int);
typedef int		(*LPLIOUnlink)(struct IPerlLIO*, const char*);
typedef int		(*LPLIOUtime)(struct IPerlLIO*, char*, struct utimbuf*);
typedef int		(*LPLIOWrite)(struct IPerlLIO*, int, const void*,
			    unsigned int);

struct IPerlLIO
{
    LPLIOAccess		pAccess;
    LPLIOChmod		pChmod;
    LPLIOChown		pChown;
    LPLIOChsize		pChsize;
    LPLIOClose		pClose;
    LPLIODup		pDup;
    LPLIODup2		pDup2;
    LPLIOFlock		pFlock;
    LPLIOFileStat	pFileStat;
    LPLIOIOCtl		pIOCtl;
    LPLIOIsatty		pIsatty;
    LPLIOLink		pLink;
    LPLIOLseek		pLseek;
    LPLIOLstat		pLstat;
    LPLIOMktemp		pMktemp;
    LPLIOOpen		pOpen;
    LPLIOOpen3		pOpen3;
    LPLIORead		pRead;
    LPLIORename		pRename;
    LPLIOSetmode	pSetmode;
    LPLIONameStat	pNameStat;
    LPLIOTmpnam		pTmpnam;
    LPLIOUmask		pUmask;
    LPLIOUnlink		pUnlink;
    LPLIOUtime		pUtime;
    LPLIOWrite		pWrite;
};

struct IPerlLIOInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlLIO	perlLIOList;
};

#define PerlLIO_access(file, mode)					\
	(*PL_LIO->pAccess)(PL_LIO, (file), (mode))
#define PerlLIO_chmod(file, mode)					\
	(*PL_LIO->pChmod)(PL_LIO, (file), (mode))
#define PerlLIO_chown(file, owner, group)				\
	(*PL_LIO->pChown)(PL_LIO, (file), (owner), (group))
#define PerlLIO_chsize(fd, size)					\
	(*PL_LIO->pChsize)(PL_LIO, (fd), (size))
#define PerlLIO_close(fd)						\
	(*PL_LIO->pClose)(PL_LIO, (fd))
#define PerlLIO_dup(fd)							\
	(*PL_LIO->pDup)(PL_LIO, (fd))
#define PerlLIO_dup2(fd1, fd2)						\
	(*PL_LIO->pDup2)(PL_LIO, (fd1), (fd2))
#define PerlLIO_flock(fd, op)						\
	(*PL_LIO->pFlock)(PL_LIO, (fd), (op))
#define PerlLIO_fstat(fd, buf)						\
	(*PL_LIO->pFileStat)(PL_LIO, (fd), (buf))
#define PerlLIO_ioctl(fd, u, buf)					\
	(*PL_LIO->pIOCtl)(PL_LIO, (fd), (u), (buf))
#define PerlLIO_isatty(fd)						\
	(*PL_LIO->pIsatty)(PL_LIO, (fd))
#define PerlLIO_link(oldname, newname)					\
	(*PL_LIO->pLink)(PL_LIO, (oldname), (newname))
#define PerlLIO_lseek(fd, offset, mode)					\
	(*PL_LIO->pLseek)(PL_LIO, (fd), (offset), (mode))
#define PerlLIO_lstat(name, buf)					\
	(*PL_LIO->pLstat)(PL_LIO, (name), (buf))
#define PerlLIO_mktemp(file)						\
	(*PL_LIO->pMktemp)(PL_LIO, (file))
#define PerlLIO_open(file, flag)					\
	(*PL_LIO->pOpen)(PL_LIO, (file), (flag))
#define PerlLIO_open3(file, flag, perm)					\
	(*PL_LIO->pOpen3)(PL_LIO, (file), (flag), (perm))
#define PerlLIO_read(fd, buf, count)					\
	(*PL_LIO->pRead)(PL_LIO, (fd), (buf), (count))
#define PerlLIO_rename(oname, newname)					\
	(*PL_LIO->pRename)(PL_LIO, (oname), (newname))
#define PerlLIO_setmode(fd, mode)					\
	(*PL_LIO->pSetmode)(PL_LIO, (fd), (mode))
#define PerlLIO_stat(name, buf)						\
	(*PL_LIO->pNameStat)(PL_LIO, (name), (buf))
#define PerlLIO_tmpnam(str)						\
	(*PL_LIO->pTmpnam)(PL_LIO, (str))
#define PerlLIO_umask(mode)						\
	(*PL_LIO->pUmask)(PL_LIO, (mode))
#define PerlLIO_unlink(file)						\
	(*PL_LIO->pUnlink)(PL_LIO, (file))
#define PerlLIO_utime(file, time)					\
	(*PL_LIO->pUtime)(PL_LIO, (file), (time))
#define PerlLIO_write(fd, buf, count)					\
	(*PL_LIO->pWrite)(PL_LIO, (fd), (buf), (count))

#else	/* PERL_IMPLICIT_SYS */

#define PerlLIO_access(file, mode)	access((file), (mode))
#define PerlLIO_chmod(file, mode)	chmod((file), (mode))
#define PerlLIO_chown(file, owner, grp)	chown((file), (owner), (grp))
#define PerlLIO_chsize(fd, size)	chsize((fd), (size))
#define PerlLIO_close(fd)		close((fd))
#define PerlLIO_dup(fd)			dup((fd))
#define PerlLIO_dup2(fd1, fd2)		dup2((fd1), (fd2))
#define PerlLIO_flock(fd, op)		FLOCK((fd), (op))
#define PerlLIO_fstat(fd, buf)		Fstat((fd), (buf))
#define PerlLIO_ioctl(fd, u, buf)	ioctl((fd), (u), (buf))
#define PerlLIO_isatty(fd)		isatty((fd))
#define PerlLIO_link(oldname, newname)	link((oldname), (newname))
#define PerlLIO_lseek(fd, offset, mode)	lseek((fd), (offset), (mode))
#define PerlLIO_stat(name, buf)		Stat((name), (buf))
#ifdef HAS_LSTAT
#  define PerlLIO_lstat(name, buf)	lstat((name), (buf))
#else
#  define PerlLIO_lstat(name, buf)	PerlLIO_stat((name), (buf))
#endif
#define PerlLIO_mktemp(file)		mktemp((file))
#define PerlLIO_mkstemp(file)		mkstemp((file))
#define PerlLIO_open(file, flag)	open((file), (flag))
#define PerlLIO_open3(file, flag, perm)	open((file), (flag), (perm))
#define PerlLIO_read(fd, buf, count)	read((fd), (buf), (count))
#define PerlLIO_rename(old, new)	rename((old), (new))
#define PerlLIO_setmode(fd, mode)	setmode((fd), (mode))
#define PerlLIO_tmpnam(str)		tmpnam((str))
#define PerlLIO_umask(mode)		umask((mode))
#define PerlLIO_unlink(file)		unlink((file))
#define PerlLIO_utime(file, time)	utime((file), (time))
#define PerlLIO_write(fd, buf, count)	write((fd), (buf), (count))

#endif	/* PERL_IMPLICIT_SYS */

/*
    Interface for perl memory allocation
*/

#if defined(PERL_IMPLICIT_SYS)

/* IPerlMem		*/
struct IPerlMem;
struct IPerlMemInfo;
typedef void*		(*LPMemMalloc)(struct IPerlMem*, size_t);
typedef void*		(*LPMemRealloc)(struct IPerlMem*, void*, size_t);
typedef void		(*LPMemFree)(struct IPerlMem*, void*);
typedef void*		(*LPMemCalloc)(struct IPerlMem*, size_t, size_t);
typedef void		(*LPMemGetLock)(struct IPerlMem*);
typedef void		(*LPMemFreeLock)(struct IPerlMem*);
typedef int		(*LPMemIsLocked)(struct IPerlMem*);

struct IPerlMem
{
    LPMemMalloc		pMalloc;
    LPMemRealloc	pRealloc;
    LPMemFree		pFree;
    LPMemCalloc		pCalloc;
    LPMemGetLock	pGetLock;
    LPMemFreeLock	pFreeLock;
    LPMemIsLocked	pIsLocked;
};

struct IPerlMemInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlMem	perlMemList;
};

/* Interpreter specific memory macros */
#define PerlMem_malloc(size)				    \
	(*PL_Mem->pMalloc)(PL_Mem, (size))
#define PerlMem_realloc(buf, size)			    \
	(*PL_Mem->pRealloc)(PL_Mem, (buf), (size))
#define PerlMem_free(buf)				    \
	(*PL_Mem->pFree)(PL_Mem, (buf))
#define PerlMem_calloc(num, size)			    \
	(*PL_Mem->pCalloc)(PL_Mem, (num), (size))
#define PerlMem_get_lock()				    \
	(*PL_Mem->pGetLock)(PL_Mem)
#define PerlMem_free_lock()				    \
	(*PL_Mem->pFreeLock)(PL_Mem)
#define PerlMem_is_locked()				    \
	(*PL_Mem->pIsLocked)(PL_Mem)

/* Shared memory macros */
#define PerlMemShared_malloc(size)			    \
	(*PL_MemShared->pMalloc)(PL_Mem, (size))
#define PerlMemShared_realloc(buf, size)		    \
	(*PL_MemShared->pRealloc)(PL_Mem, (buf), (size))
#define PerlMemShared_free(buf)				    \
	(*PL_MemShared->pFree)(PL_Mem, (buf))
#define PerlMemShared_calloc(num, size)			    \
	(*PL_MemShared->pCalloc)(PL_Mem, (num), (size))
#define PerlMemShared_get_lock()			    \
	(*PL_MemShared->pGetLock)(PL_Mem)
#define PerlMemShared_free_lock()			    \
	(*PL_MemShared->pFreeLock)(PL_Mem)
#define PerlMemShared_is_locked()			    \
	(*PL_MemShared->pIsLocked)(PL_Mem)


/* Parse tree memory macros */
#define PerlMemParse_malloc(size)			    \
	(*PL_MemParse->pMalloc)(PL_Mem, (size))
#define PerlMemParse_realloc(buf, size)			    \
	(*PL_MemParse->pRealloc)(PL_Mem, (buf), (size))
#define PerlMemParse_free(buf)				    \
	(*PL_MemParse->pFree)(PL_Mem, (buf))
#define PerlMemParse_calloc(num, size)			    \
	(*PL_MemParse->pCalloc)(PL_Mem, (num), (size))
#define PerlMemParse_get_lock()				    \
	(*PL_MemParse->pGetLock)(PL_Mem)
#define PerlMemParse_free_lock()			    \
	(*PL_MemParse->pFreeLock)(PL_Mem)
#define PerlMemParse_is_locked()			    \
	(*PL_MemParse->pIsLocked)(PL_Mem)


#else	/* PERL_IMPLICIT_SYS */

/* Interpreter specific memory macros */
#define PerlMem_malloc(size)		malloc((size))
#define PerlMem_realloc(buf, size)	realloc((buf), (size))
#define PerlMem_free(buf)		free((buf))
#define PerlMem_calloc(num, size)	calloc((num), (size))
#define PerlMem_get_lock()		
#define PerlMem_free_lock()
#define PerlMem_is_locked()		0

/* Shared memory macros */
#define PerlMemShared_malloc(size)		malloc((size))
#define PerlMemShared_realloc(buf, size)	realloc((buf), (size))
#define PerlMemShared_free(buf)			free((buf))
#define PerlMemShared_calloc(num, size)		calloc((num), (size))
#define PerlMemShared_get_lock()		
#define PerlMemShared_free_lock()
#define PerlMemShared_is_locked()		0

/* Parse tree memory macros */
#define PerlMemParse_malloc(size)	malloc((size))
#define PerlMemParse_realloc(buf, size)	realloc((buf), (size))
#define PerlMemParse_free(buf)		free((buf))
#define PerlMemParse_calloc(num, size)	calloc((num), (size))
#define PerlMemParse_get_lock()		
#define PerlMemParse_free_lock()
#define PerlMemParse_is_locked()	0

#endif	/* PERL_IMPLICIT_SYS */

/*
    Interface for perl process functions
*/


#if defined(PERL_IMPLICIT_SYS)

#ifndef jmp_buf
#include <setjmp.h>
#endif

/* IPerlProc		*/
struct IPerlProc;
struct IPerlProcInfo;
typedef void		(*LPProcAbort)(struct IPerlProc*);
typedef char*		(*LPProcCrypt)(struct IPerlProc*, const char*,
			    const char*);
typedef void		(*LPProcExit)(struct IPerlProc*, int);
typedef void		(*LPProc_Exit)(struct IPerlProc*, int);
typedef int		(*LPProcExecl)(struct IPerlProc*, const char*,
			    const char*, const char*, const char*,
			    const char*);
typedef int		(*LPProcExecv)(struct IPerlProc*, const char*,
			    const char*const*);
typedef int		(*LPProcExecvp)(struct IPerlProc*, const char*,
			    const char*const*);
typedef uid_t		(*LPProcGetuid)(struct IPerlProc*);
typedef uid_t		(*LPProcGeteuid)(struct IPerlProc*);
typedef gid_t		(*LPProcGetgid)(struct IPerlProc*);
typedef gid_t		(*LPProcGetegid)(struct IPerlProc*);
typedef char*		(*LPProcGetlogin)(struct IPerlProc*);
typedef int		(*LPProcKill)(struct IPerlProc*, int, int);
typedef int		(*LPProcKillpg)(struct IPerlProc*, int, int);
typedef int		(*LPProcPauseProc)(struct IPerlProc*);
typedef PerlIO*		(*LPProcPopen)(struct IPerlProc*, const char*,
			    const char*);
typedef int		(*LPProcPclose)(struct IPerlProc*, PerlIO*);
typedef int		(*LPProcPipe)(struct IPerlProc*, int*);
typedef int		(*LPProcSetuid)(struct IPerlProc*, uid_t);
typedef int		(*LPProcSetgid)(struct IPerlProc*, gid_t);
typedef int		(*LPProcSleep)(struct IPerlProc*, unsigned int);
typedef int		(*LPProcTimes)(struct IPerlProc*, struct tms*);
typedef int		(*LPProcWait)(struct IPerlProc*, int*);
typedef int		(*LPProcWaitpid)(struct IPerlProc*, int, int*, int);
typedef Sighandler_t	(*LPProcSignal)(struct IPerlProc*, int, Sighandler_t);
typedef int		(*LPProcFork)(struct IPerlProc*);
typedef int		(*LPProcGetpid)(struct IPerlProc*);
#ifdef WIN32
typedef void*		(*LPProcDynaLoader)(struct IPerlProc*, const char*);
typedef void		(*LPProcGetOSError)(struct IPerlProc*,
			    SV* sv, DWORD dwErr);
typedef int		(*LPProcSpawnvp)(struct IPerlProc*, int, const char*,
			    const char*const*);
#endif

struct IPerlProc
{
    LPProcAbort		pAbort;
    LPProcCrypt		pCrypt;
    LPProcExit		pExit;
    LPProc_Exit		p_Exit;
    LPProcExecl		pExecl;
    LPProcExecv		pExecv;
    LPProcExecvp	pExecvp;
    LPProcGetuid	pGetuid;
    LPProcGeteuid	pGeteuid;
    LPProcGetgid	pGetgid;
    LPProcGetegid	pGetegid;
    LPProcGetlogin	pGetlogin;
    LPProcKill		pKill;
    LPProcKillpg	pKillpg;
    LPProcPauseProc	pPauseProc;
    LPProcPopen		pPopen;
    LPProcPclose	pPclose;
    LPProcPipe		pPipe;
    LPProcSetuid	pSetuid;
    LPProcSetgid	pSetgid;
    LPProcSleep		pSleep;
    LPProcTimes		pTimes;
    LPProcWait		pWait;
    LPProcWaitpid	pWaitpid;
    LPProcSignal	pSignal;
    LPProcFork		pFork;
    LPProcGetpid	pGetpid;
#ifdef WIN32
    LPProcDynaLoader	pDynaLoader;
    LPProcGetOSError	pGetOSError;
    void *		__unused1;	/* XXX unused, retained for bincompat */
    void *		__unused2;
    LPProcSpawnvp	pSpawnvp;	/* XXX unused, retained for bincompat */
    void *		__unused3;	/* XXX unused, retained for bincompat */
#endif
};

struct IPerlProcInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlProc	perlProcList;
};

#define PerlProc_abort()						\
	(*PL_Proc->pAbort)(PL_Proc)
#define PerlProc_crypt(c,s)						\
	(*PL_Proc->pCrypt)(PL_Proc, (c), (s))
#define PerlProc_exit(s)						\
	(*PL_Proc->pExit)(PL_Proc, (s))
#define PerlProc__exit(s)						\
	(*PL_Proc->p_Exit)(PL_Proc, (s))
#define PerlProc_execl(c, w, x, y, z)					\
	(*PL_Proc->pExecl)(PL_Proc, (c), (w), (x), (y), (z))
#define PerlProc_execv(c, a)						\
	(*PL_Proc->pExecv)(PL_Proc, (c), (a))
#define PerlProc_execvp(c, a)						\
	(*PL_Proc->pExecvp)(PL_Proc, (c), (a))
#define PerlProc_getuid()						\
	(*PL_Proc->pGetuid)(PL_Proc)
#define PerlProc_geteuid()						\
	(*PL_Proc->pGeteuid)(PL_Proc)
#define PerlProc_getgid()						\
	(*PL_Proc->pGetgid)(PL_Proc)
#define PerlProc_getegid()						\
	(*PL_Proc->pGetegid)(PL_Proc)
#define PerlProc_getlogin()						\
	(*PL_Proc->pGetlogin)(PL_Proc)
#define PerlProc_kill(i, a)						\
	(*PL_Proc->pKill)(PL_Proc, (i), (a))
#define PerlProc_killpg(i, a)						\
	(*PL_Proc->pKillpg)(PL_Proc, (i), (a))
#define PerlProc_pause()						\
	(*PL_Proc->pPauseProc)(PL_Proc)
#define PerlProc_popen(c, m)						\
	(*PL_Proc->pPopen)(PL_Proc, (c), (m))
#define PerlProc_pclose(f)						\
	(*PL_Proc->pPclose)(PL_Proc, (f))
#define PerlProc_pipe(fd)						\
	(*PL_Proc->pPipe)(PL_Proc, (fd))
#define PerlProc_setuid(u)						\
	(*PL_Proc->pSetuid)(PL_Proc, (u))
#define PerlProc_setgid(g)						\
	(*PL_Proc->pSetgid)(PL_Proc, (g))
#define PerlProc_sleep(t)						\
	(*PL_Proc->pSleep)(PL_Proc, (t))
#define PerlProc_times(t)						\
	(*PL_Proc->pTimes)(PL_Proc, (t))
#define PerlProc_wait(t)						\
	(*PL_Proc->pWait)(PL_Proc, (t))
#define PerlProc_waitpid(p,s,f)						\
	(*PL_Proc->pWaitpid)(PL_Proc, (p), (s), (f))
#define PerlProc_signal(n, h)						\
	(*PL_Proc->pSignal)(PL_Proc, (n), (h))
#define PerlProc_fork()							\
	(*PL_Proc->pFork)(PL_Proc)
#define PerlProc_getpid()						\
	(*PL_Proc->pGetpid)(PL_Proc)
#define PerlProc_setjmp(b, n) Sigsetjmp((b), (n))
#define PerlProc_longjmp(b, n) Siglongjmp((b), (n))

#ifdef WIN32
#define PerlProc_DynaLoad(f)						\
	(*PL_Proc->pDynaLoader)(PL_Proc, (f))
#define PerlProc_GetOSError(s,e)					\
	(*PL_Proc->pGetOSError)(PL_Proc, (s), (e))
#define PerlProc_spawnvp(m, c, a)					\
	(*PL_Proc->pSpawnvp)(PL_Proc, (m), (c), (a))
#endif

#else	/* PERL_IMPLICIT_SYS */

#define PerlProc_abort()	abort()
#define PerlProc_crypt(c,s)	crypt((c), (s))
#define PerlProc_exit(s)	exit((s))
#define PerlProc__exit(s)	_exit((s))
#define PerlProc_execl(c,w,x,y,z)					\
	execl((c), (w), (x), (y), (z))
#define PerlProc_execv(c, a)	execv((c), (a))
#define PerlProc_execvp(c, a)	execvp((c), (a))
#define PerlProc_getuid()	getuid()
#define PerlProc_geteuid()	geteuid()
#define PerlProc_getgid()	getgid()
#define PerlProc_getegid()	getegid()
#define PerlProc_getlogin()	getlogin()
#define PerlProc_kill(i, a)	kill((i), (a))
#define PerlProc_killpg(i, a)	killpg((i), (a))
#define PerlProc_pause()	Pause()
#define PerlProc_popen(c, m)	my_popen((c), (m))
#define PerlProc_pclose(f)	my_pclose((f))
#define PerlProc_pipe(fd)	pipe((fd))
#define PerlProc_setuid(u)	setuid((u))
#define PerlProc_setgid(g)	setgid((g))
#define PerlProc_sleep(t)	sleep((t))
#define PerlProc_times(t)	times((t))
#define PerlProc_wait(t)	wait((t))
#define PerlProc_waitpid(p,s,f)	waitpid((p), (s), (f))
#define PerlProc_setjmp(b, n)	Sigsetjmp((b), (n))
#define PerlProc_longjmp(b, n)	Siglongjmp((b), (n))
#define PerlProc_signal(n, h)	signal((n), (h))
#define PerlProc_fork()		fork()
#define PerlProc_getpid()	getpid()

#ifdef WIN32
#define PerlProc_DynaLoad(f)						\
	win32_dynaload((f))
#define PerlProc_GetOSError(s,e)					\
	win32_str_os_error((s), (e))
#define PerlProc_spawnvp(m, c, a)					\
	win32_spawnvp((m), (c), (a))
#endif
#endif	/* PERL_IMPLICIT_SYS */

/*
    Interface for perl socket functions
*/

#if defined(PERL_IMPLICIT_SYS)

/* PerlSock		*/
struct IPerlSock;
struct IPerlSockInfo;
typedef u_long		(*LPHtonl)(struct IPerlSock*, u_long);
typedef u_short		(*LPHtons)(struct IPerlSock*, u_short);
typedef u_long		(*LPNtohl)(struct IPerlSock*, u_long);
typedef u_short		(*LPNtohs)(struct IPerlSock*, u_short);
typedef SOCKET		(*LPAccept)(struct IPerlSock*, SOCKET,
			    struct sockaddr*, int*);
typedef int		(*LPBind)(struct IPerlSock*, SOCKET,
			    const struct sockaddr*, int);
typedef int		(*LPConnect)(struct IPerlSock*, SOCKET,
			    const struct sockaddr*, int);
typedef void		(*LPEndhostent)(struct IPerlSock*);
typedef void		(*LPEndnetent)(struct IPerlSock*);
typedef void		(*LPEndprotoent)(struct IPerlSock*);
typedef void		(*LPEndservent)(struct IPerlSock*);
typedef int		(*LPGethostname)(struct IPerlSock*, char*, int);
typedef int		(*LPGetpeername)(struct IPerlSock*, SOCKET,
			    struct sockaddr*, int*);
typedef struct hostent*	(*LPGethostbyaddr)(struct IPerlSock*, const char*,
			    int, int);
typedef struct hostent*	(*LPGethostbyname)(struct IPerlSock*, const char*);
typedef struct hostent*	(*LPGethostent)(struct IPerlSock*);
typedef struct netent*	(*LPGetnetbyaddr)(struct IPerlSock*, long, int);
typedef struct netent*	(*LPGetnetbyname)(struct IPerlSock*, const char*);
typedef struct netent*	(*LPGetnetent)(struct IPerlSock*);
typedef struct protoent*(*LPGetprotobyname)(struct IPerlSock*, const char*);
typedef struct protoent*(*LPGetprotobynumber)(struct IPerlSock*, int);
typedef struct protoent*(*LPGetprotoent)(struct IPerlSock*);
typedef struct servent*	(*LPGetservbyname)(struct IPerlSock*, const char*,
			    const char*);
typedef struct servent*	(*LPGetservbyport)(struct IPerlSock*, int,
			    const char*);
typedef struct servent*	(*LPGetservent)(struct IPerlSock*);
typedef int		(*LPGetsockname)(struct IPerlSock*, SOCKET,
			    struct sockaddr*, int*);
typedef int		(*LPGetsockopt)(struct IPerlSock*, SOCKET, int, int,
			    char*, int*);
typedef unsigned long	(*LPInetAddr)(struct IPerlSock*, const char*);
typedef char*		(*LPInetNtoa)(struct IPerlSock*, struct in_addr);
typedef int		(*LPListen)(struct IPerlSock*, SOCKET, int);
typedef int		(*LPRecv)(struct IPerlSock*, SOCKET, char*, int, int);
typedef int		(*LPRecvfrom)(struct IPerlSock*, SOCKET, char*, int,
			    int, struct sockaddr*, int*);
typedef int		(*LPSelect)(struct IPerlSock*, int, char*, char*,
			    char*, const struct timeval*);
typedef int		(*LPSend)(struct IPerlSock*, SOCKET, const char*, int,
			    int); 
typedef int		(*LPSendto)(struct IPerlSock*, SOCKET, const char*,
			    int, int, const struct sockaddr*, int);
typedef void		(*LPSethostent)(struct IPerlSock*, int);
typedef void		(*LPSetnetent)(struct IPerlSock*, int);
typedef void		(*LPSetprotoent)(struct IPerlSock*, int);
typedef void		(*LPSetservent)(struct IPerlSock*, int);
typedef int		(*LPSetsockopt)(struct IPerlSock*, SOCKET, int, int,
			    const char*, int);
typedef int		(*LPShutdown)(struct IPerlSock*, SOCKET, int);
typedef SOCKET		(*LPSocket)(struct IPerlSock*, int, int, int);
typedef int		(*LPSocketpair)(struct IPerlSock*, int, int, int,
			    int*);
#ifdef WIN32
typedef int		(*LPClosesocket)(struct IPerlSock*, SOCKET s);
#endif

struct IPerlSock
{
    LPHtonl		pHtonl;
    LPHtons		pHtons;
    LPNtohl		pNtohl;
    LPNtohs		pNtohs;
    LPAccept		pAccept;
    LPBind		pBind;
    LPConnect		pConnect;
    LPEndhostent	pEndhostent;
    LPEndnetent		pEndnetent;
    LPEndprotoent	pEndprotoent;
    LPEndservent	pEndservent;
    LPGethostname	pGethostname;
    LPGetpeername	pGetpeername;
    LPGethostbyaddr	pGethostbyaddr;
    LPGethostbyname	pGethostbyname;
    LPGethostent	pGethostent;
    LPGetnetbyaddr	pGetnetbyaddr;
    LPGetnetbyname	pGetnetbyname;
    LPGetnetent		pGetnetent;
    LPGetprotobyname	pGetprotobyname;
    LPGetprotobynumber	pGetprotobynumber;
    LPGetprotoent	pGetprotoent;
    LPGetservbyname	pGetservbyname;
    LPGetservbyport	pGetservbyport;
    LPGetservent	pGetservent;
    LPGetsockname	pGetsockname;
    LPGetsockopt	pGetsockopt;
    LPInetAddr		pInetAddr;
    LPInetNtoa		pInetNtoa;
    LPListen		pListen;
    LPRecv		pRecv;
    LPRecvfrom		pRecvfrom;
    LPSelect		pSelect;
    LPSend		pSend;
    LPSendto		pSendto;
    LPSethostent	pSethostent;
    LPSetnetent		pSetnetent;
    LPSetprotoent	pSetprotoent;
    LPSetservent	pSetservent;
    LPSetsockopt	pSetsockopt;
    LPShutdown		pShutdown;
    LPSocket		pSocket;
    LPSocketpair	pSocketpair;
#ifdef WIN32
    LPClosesocket	pClosesocket;
#endif
};

struct IPerlSockInfo
{
    unsigned long	nCount;	    /* number of entries expected */
    struct IPerlSock	perlSockList;
};

#define PerlSock_htonl(x)						\
	(*PL_Sock->pHtonl)(PL_Sock, x)
#define PerlSock_htons(x)						\
	(*PL_Sock->pHtons)(PL_Sock, x)
#define PerlSock_ntohl(x)						\
	(*PL_Sock->pNtohl)(PL_Sock, x)
#define PerlSock_ntohs(x)						\
	(*PL_Sock->pNtohs)(PL_Sock, x)
#define PerlSock_accept(s, a, l)					\
	(*PL_Sock->pAccept)(PL_Sock, s, a, l)
#define PerlSock_bind(s, n, l)						\
	(*PL_Sock->pBind)(PL_Sock, s, n, l)
#define PerlSock_connect(s, n, l)					\
	(*PL_Sock->pConnect)(PL_Sock, s, n, l)
#define PerlSock_endhostent()						\
	(*PL_Sock->pEndhostent)(PL_Sock)
#define PerlSock_endnetent()						\
	(*PL_Sock->pEndnetent)(PL_Sock)
#define PerlSock_endprotoent()						\
	(*PL_Sock->pEndprotoent)(PL_Sock)
#define PerlSock_endservent()						\
	(*PL_Sock->pEndservent)(PL_Sock)
#define PerlSock_gethostbyaddr(a, l, t)					\
	(*PL_Sock->pGethostbyaddr)(PL_Sock, a, l, t)
#define PerlSock_gethostbyname(n)					\
	(*PL_Sock->pGethostbyname)(PL_Sock, n)
#define PerlSock_gethostent()						\
	(*PL_Sock->pGethostent)(PL_Sock)
#define PerlSock_gethostname(n, l)					\
	(*PL_Sock->pGethostname)(PL_Sock, n, l)
#define PerlSock_getnetbyaddr(n, t)					\
	(*PL_Sock->pGetnetbyaddr)(PL_Sock, n, t)
#define PerlSock_getnetbyname(c)					\
	(*PL_Sock->pGetnetbyname)(PL_Sock, c)
#define PerlSock_getnetent()						\
	(*PL_Sock->pGetnetent)(PL_Sock)
#define PerlSock_getpeername(s, n, l)					\
	(*PL_Sock->pGetpeername)(PL_Sock, s, n, l)
#define PerlSock_getprotobyname(n)					\
	(*PL_Sock->pGetprotobyname)(PL_Sock, n)
#define PerlSock_getprotobynumber(n)					\
	(*PL_Sock->pGetprotobynumber)(PL_Sock, n)
#define PerlSock_getprotoent()						\
	(*PL_Sock->pGetprotoent)(PL_Sock)
#define PerlSock_getservbyname(n, p)					\
	(*PL_Sock->pGetservbyname)(PL_Sock, n, p)
#define PerlSock_getservbyport(port, p)					\
	(*PL_Sock->pGetservbyport)(PL_Sock, port, p)
#define PerlSock_getservent()						\
	(*PL_Sock->pGetservent)(PL_Sock)
#define PerlSock_getsockname(s, n, l)					\
	(*PL_Sock->pGetsockname)(PL_Sock, s, n, l)
#define PerlSock_getsockopt(s,l,n,v,i)					\
	(*PL_Sock->pGetsockopt)(PL_Sock, s, l, n, v, i)
#define PerlSock_inet_addr(c)						\
	(*PL_Sock->pInetAddr)(PL_Sock, c)
#define PerlSock_inet_ntoa(i)						\
	(*PL_Sock->pInetNtoa)(PL_Sock, i)
#define PerlSock_listen(s, b)						\
	(*PL_Sock->pListen)(PL_Sock, s, b)
#define PerlSock_recv(s, b, l, f)					\
	(*PL_Sock->pRecv)(PL_Sock, s, b, l, f)
#define PerlSock_recvfrom(s,b,l,f,from,fromlen)				\
	(*PL_Sock->pRecvfrom)(PL_Sock, s, b, l, f, from, fromlen)
#define PerlSock_select(n, r, w, e, t)					\
	(*PL_Sock->pSelect)(PL_Sock, n, (char*)r, (char*)w, (char*)e, t)
#define PerlSock_send(s, b, l, f)					\
	(*PL_Sock->pSend)(PL_Sock, s, b, l, f)
#define PerlSock_sendto(s, b, l, f, t, tlen)				\
	(*PL_Sock->pSendto)(PL_Sock, s, b, l, f, t, tlen)
#define PerlSock_sethostent(f)						\
	(*PL_Sock->pSethostent)(PL_Sock, f)
#define PerlSock_setnetent(f)						\
	(*PL_Sock->pSetnetent)(PL_Sock, f)
#define PerlSock_setprotoent(f)						\
	(*PL_Sock->pSetprotoent)(PL_Sock, f)
#define PerlSock_setservent(f)						\
	(*PL_Sock->pSetservent)(PL_Sock, f)
#define PerlSock_setsockopt(s, l, n, v, len)				\
	(*PL_Sock->pSetsockopt)(PL_Sock, s, l, n, v, len)
#define PerlSock_shutdown(s, h)						\
	(*PL_Sock->pShutdown)(PL_Sock, s, h)
#define PerlSock_socket(a, t, p)					\
	(*PL_Sock->pSocket)(PL_Sock, a, t, p)
#define PerlSock_socketpair(a, t, p, f)					\
	(*PL_Sock->pSocketpair)(PL_Sock, a, t, p, f)

#ifdef WIN32
#define	PerlSock_closesocket(s)						\
	(*PL_Sock->pClosesocket)(PL_Sock, s)
#endif

#else	/* PERL_IMPLICIT_SYS */

#define PerlSock_htonl(x)		htonl(x)
#define PerlSock_htons(x)		htons(x)
#define PerlSock_ntohl(x)		ntohl(x)
#define PerlSock_ntohs(x)		ntohs(x)
#define PerlSock_accept(s, a, l)	accept(s, a, l)
#define PerlSock_bind(s, n, l)		bind(s, n, l)
#define PerlSock_connect(s, n, l)	connect(s, n, l)

#define PerlSock_gethostbyaddr(a, l, t)	gethostbyaddr(a, l, t)
#define PerlSock_gethostbyname(n)	gethostbyname(n)
#define PerlSock_gethostent		gethostent
#define PerlSock_endhostent		endhostent
#define PerlSock_gethostname(n, l)	gethostname(n, l)

#define PerlSock_getnetbyaddr(n, t)	getnetbyaddr(n, t)
#define PerlSock_getnetbyname(n)	getnetbyname(n)
#define PerlSock_getnetent		getnetent
#define PerlSock_endnetent		endnetent
#define PerlSock_getpeername(s, n, l)	getpeername(s, n, l)

#define PerlSock_getprotobyname(n)	getprotobyname(n)
#define PerlSock_getprotobynumber(n)	getprotobynumber(n)
#define PerlSock_getprotoent		getprotoent
#define PerlSock_endprotoent		endprotoent

#define PerlSock_getservbyname(n, p)	getservbyname(n, p)
#define PerlSock_getservbyport(port, p)	getservbyport(port, p)
#define PerlSock_getservent		getservent
#define PerlSock_endservent		endservent

#define PerlSock_getsockname(s, n, l)	getsockname(s, n, l)
#define PerlSock_getsockopt(s,l,n,v,i)	getsockopt(s, l, n, v, i)
#define PerlSock_inet_addr(c)		inet_addr(c)
#define PerlSock_inet_ntoa(i)		inet_ntoa(i)
#define PerlSock_listen(s, b)		listen(s, b)
#define PerlSock_recv(s, b, l, f)	recv(s, b, l, f)
#define PerlSock_recvfrom(s, b, l, f, from, fromlen)			\
	recvfrom(s, b, l, f, from, fromlen)
#define PerlSock_select(n, r, w, e, t)	select(n, r, w, e, t)
#define PerlSock_send(s, b, l, f)	send(s, b, l, f)
#define PerlSock_sendto(s, b, l, f, t, tlen)				\
	sendto(s, b, l, f, t, tlen)
#define PerlSock_sethostent(f)		sethostent(f)
#define PerlSock_setnetent(f)		setnetent(f)
#define PerlSock_setprotoent(f)		setprotoent(f)
#define PerlSock_setservent(f)		setservent(f)
#define PerlSock_setsockopt(s, l, n, v, len)				\
	setsockopt(s, l, n, v, len)
#define PerlSock_shutdown(s, h)		shutdown(s, h)
#define PerlSock_socket(a, t, p)	socket(a, t, p)
#define PerlSock_socketpair(a, t, p, f)	socketpair(a, t, p, f)

#ifdef WIN32
#define PerlSock_closesocket(s)		closesocket(s)
#endif

#endif	/* PERL_IMPLICIT_SYS */

#endif	/* __Inc__IPerl___ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\nostdio.h ===
/* This is an 1st attempt to stop other include files pulling 
   in real <stdio.h>.
   A more ambitious set of possible symbols can be found in
   sfio.h (inside an _cplusplus gard).
*/
#if !defined(_STDIO_H) && !defined(FILE) && !defined(_STDIO_INCLUDED) && !defined(__STDIO_LOADED)
#define _STDIO_H
#define _STDIO_INCLUDED
#define __STDIO_LOADED
struct _FILE;
#define FILE struct _FILE
#endif

#define _CANNOT "CANNOT"

#undef stdin
#undef stdout
#undef stderr
#undef getc
#undef putc
#undef clearerr
#undef fflush
#undef feof
#undef ferror
#undef fileno
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\objxsub.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!! 
   This file is built by embed.pl from data in embed.pl, pp.sym, intrpvar.h,
   perlvars.h and thrdvar.h.  Any changes made here will be lost!
*/

#ifndef __objXSUB_h__
#define __objXSUB_h__

/* method calls via pPerl (static functions without a "this" pointer need these) */

#if defined(PERL_CORE) && defined(PERL_OBJECT)

/* XXX soon to be eliminated, only a few things in PERLCORE need these now */

#if defined(PERL_IMPLICIT_SYS)
#endif
#if defined(USE_ITHREADS)
#  if defined(PERL_IMPLICIT_SYS)
#  endif
#endif
#if defined(MYMALLOC)
#endif
#if defined(PERL_OBJECT)
#ifndef __BORLANDC__
#endif
#endif
#if defined(PERL_OBJECT)
#else
#endif
#undef  Perl_amagic_call
#define Perl_amagic_call	pPerl->Perl_amagic_call
#undef  amagic_call
#define amagic_call		Perl_amagic_call
#undef  Perl_Gv_AMupdate
#define Perl_Gv_AMupdate	pPerl->Perl_Gv_AMupdate
#undef  Gv_AMupdate
#define Gv_AMupdate		Perl_Gv_AMupdate
#undef  Perl_apply_attrs_string
#define Perl_apply_attrs_string	pPerl->Perl_apply_attrs_string
#undef  apply_attrs_string
#define apply_attrs_string	Perl_apply_attrs_string
#undef  Perl_avhv_delete_ent
#define Perl_avhv_delete_ent	pPerl->Perl_avhv_delete_ent
#undef  avhv_delete_ent
#define avhv_delete_ent		Perl_avhv_delete_ent
#undef  Perl_avhv_exists_ent
#define Perl_avhv_exists_ent	pPerl->Perl_avhv_exists_ent
#undef  avhv_exists_ent
#define avhv_exists_ent		Perl_avhv_exists_ent
#undef  Perl_avhv_fetch_ent
#define Perl_avhv_fetch_ent	pPerl->Perl_avhv_fetch_ent
#undef  avhv_fetch_ent
#define avhv_fetch_ent		Perl_avhv_fetch_ent
#undef  Perl_avhv_store_ent
#define Perl_avhv_store_ent	pPerl->Perl_avhv_store_ent
#undef  avhv_store_ent
#define avhv_store_ent		Perl_avhv_store_ent
#undef  Perl_avhv_iternext
#define Perl_avhv_iternext	pPerl->Perl_avhv_iternext
#undef  avhv_iternext
#define avhv_iternext		Perl_avhv_iternext
#undef  Perl_avhv_iterval
#define Perl_avhv_iterval	pPerl->Perl_avhv_iterval
#undef  avhv_iterval
#define avhv_iterval		Perl_avhv_iterval
#undef  Perl_avhv_keys
#define Perl_avhv_keys		pPerl->Perl_avhv_keys
#undef  avhv_keys
#define avhv_keys		Perl_avhv_keys
#undef  Perl_av_clear
#define Perl_av_clear		pPerl->Perl_av_clear
#undef  av_clear
#define av_clear		Perl_av_clear
#undef  Perl_av_delete
#define Perl_av_delete		pPerl->Perl_av_delete
#undef  av_delete
#define av_delete		Perl_av_delete
#undef  Perl_av_exists
#define Perl_av_exists		pPerl->Perl_av_exists
#undef  av_exists
#define av_exists		Perl_av_exists
#undef  Perl_av_extend
#define Perl_av_extend		pPerl->Perl_av_extend
#undef  av_extend
#define av_extend		Perl_av_extend
#undef  Perl_av_fetch
#define Perl_av_fetch		pPerl->Perl_av_fetch
#undef  av_fetch
#define av_fetch		Perl_av_fetch
#undef  Perl_av_fill
#define Perl_av_fill		pPerl->Perl_av_fill
#undef  av_fill
#define av_fill			Perl_av_fill
#undef  Perl_av_len
#define Perl_av_len		pPerl->Perl_av_len
#undef  av_len
#define av_len			Perl_av_len
#undef  Perl_av_make
#define Perl_av_make		pPerl->Perl_av_make
#undef  av_make
#define av_make			Perl_av_make
#undef  Perl_av_pop
#define Perl_av_pop		pPerl->Perl_av_pop
#undef  av_pop
#define av_pop			Perl_av_pop
#undef  Perl_av_push
#define Perl_av_push		pPerl->Perl_av_push
#undef  av_push
#define av_push			Perl_av_push
#undef  Perl_av_reify
#define Perl_av_reify		pPerl->Perl_av_reify
#undef  av_reify
#define av_reify		Perl_av_reify
#undef  Perl_av_shift
#define Perl_av_shift		pPerl->Perl_av_shift
#undef  av_shift
#define av_shift		Perl_av_shift
#undef  Perl_av_store
#define Perl_av_store		pPerl->Perl_av_store
#undef  av_store
#define av_store		Perl_av_store
#undef  Perl_av_undef
#define Perl_av_undef		pPerl->Perl_av_undef
#undef  av_undef
#define av_undef		Perl_av_undef
#undef  Perl_av_unshift
#define Perl_av_unshift		pPerl->Perl_av_unshift
#undef  av_unshift
#define av_unshift		Perl_av_unshift
#undef  Perl_block_gimme
#define Perl_block_gimme	pPerl->Perl_block_gimme
#undef  block_gimme
#define block_gimme		Perl_block_gimme
#undef  Perl_call_list
#define Perl_call_list		pPerl->Perl_call_list
#undef  call_list
#define call_list		Perl_call_list
#undef  Perl_cast_ulong
#define Perl_cast_ulong		pPerl->Perl_cast_ulong
#undef  cast_ulong
#define cast_ulong		Perl_cast_ulong
#undef  Perl_cast_i32
#define Perl_cast_i32		pPerl->Perl_cast_i32
#undef  cast_i32
#define cast_i32		Perl_cast_i32
#undef  Perl_cast_iv
#define Perl_cast_iv		pPerl->Perl_cast_iv
#undef  cast_iv
#define cast_iv			Perl_cast_iv
#undef  Perl_cast_uv
#define Perl_cast_uv		pPerl->Perl_cast_uv
#undef  cast_uv
#define cast_uv			Perl_cast_uv
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
#undef  Perl_my_chsize
#define Perl_my_chsize		pPerl->Perl_my_chsize
#undef  my_chsize
#define my_chsize		Perl_my_chsize
#endif
#if defined(USE_THREADS)
#undef  Perl_condpair_magic
#define Perl_condpair_magic	pPerl->Perl_condpair_magic
#undef  condpair_magic
#define condpair_magic		Perl_condpair_magic
#endif
#undef  Perl_croak
#define Perl_croak		pPerl->Perl_croak
#undef  croak
#define croak			Perl_croak
#undef  Perl_vcroak
#define Perl_vcroak		pPerl->Perl_vcroak
#undef  vcroak
#define vcroak			Perl_vcroak
#if defined(PERL_IMPLICIT_CONTEXT)
#undef  Perl_croak_nocontext
#define Perl_croak_nocontext	pPerl->Perl_croak_nocontext
#undef  croak_nocontext
#define croak_nocontext		Perl_croak_nocontext
#undef  Perl_die_nocontext
#define Perl_die_nocontext	pPerl->Perl_die_nocontext
#undef  die_nocontext
#define die_nocontext		Perl_die_nocontext
#undef  Perl_deb_nocontext
#define Perl_deb_nocontext	pPerl->Perl_deb_nocontext
#undef  deb_nocontext
#define deb_nocontext		Perl_deb_nocontext
#undef  Perl_form_nocontext
#define Perl_form_nocontext	pPerl->Perl_form_nocontext
#undef  form_nocontext
#define form_nocontext		Perl_form_nocontext
#undef  Perl_load_module_nocontext
#define Perl_load_module_nocontext	pPerl->Perl_load_module_nocontext
#undef  load_module_nocontext
#define load_module_nocontext	Perl_load_module_nocontext
#undef  Perl_mess_nocontext
#define Perl_mess_nocontext	pPerl->Perl_mess_nocontext
#undef  mess_nocontext
#define mess_nocontext		Perl_mess_nocontext
#undef  Perl_warn_nocontext
#define Perl_warn_nocontext	pPerl->Perl_warn_nocontext
#undef  warn_nocontext
#define warn_nocontext		Perl_warn_nocontext
#undef  Perl_warner_nocontext
#define Perl_warner_nocontext	pPerl->Perl_warner_nocontext
#undef  warner_nocontext
#define warner_nocontext	Perl_warner_nocontext
#undef  Perl_newSVpvf_nocontext
#define Perl_newSVpvf_nocontext	pPerl->Perl_newSVpvf_nocontext
#undef  newSVpvf_nocontext
#define newSVpvf_nocontext	Perl_newSVpvf_nocontext
#undef  Perl_sv_catpvf_nocontext
#define Perl_sv_catpvf_nocontext	pPerl->Perl_sv_catpvf_nocontext
#undef  sv_catpvf_nocontext
#define sv_catpvf_nocontext	Perl_sv_catpvf_nocontext
#undef  Perl_sv_setpvf_nocontext
#define Perl_sv_setpvf_nocontext	pPerl->Perl_sv_setpvf_nocontext
#undef  sv_setpvf_nocontext
#define sv_setpvf_nocontext	Perl_sv_setpvf_nocontext
#undef  Perl_sv_catpvf_mg_nocontext
#define Perl_sv_catpvf_mg_nocontext	pPerl->Perl_sv_catpvf_mg_nocontext
#undef  sv_catpvf_mg_nocontext
#define sv_catpvf_mg_nocontext	Perl_sv_catpvf_mg_nocontext
#undef  Perl_sv_setpvf_mg_nocontext
#define Perl_sv_setpvf_mg_nocontext	pPerl->Perl_sv_setpvf_mg_nocontext
#undef  sv_setpvf_mg_nocontext
#define sv_setpvf_mg_nocontext	Perl_sv_setpvf_mg_nocontext
#undef  Perl_fprintf_nocontext
#define Perl_fprintf_nocontext	pPerl->Perl_fprintf_nocontext
#undef  fprintf_nocontext
#define fprintf_nocontext	Perl_fprintf_nocontext
#undef  Perl_printf_nocontext
#define Perl_printf_nocontext	pPerl->Perl_printf_nocontext
#undef  printf_nocontext
#define printf_nocontext	Perl_printf_nocontext
#endif
#undef  Perl_cv_const_sv
#define Perl_cv_const_sv	pPerl->Perl_cv_const_sv
#undef  cv_const_sv
#define cv_const_sv		Perl_cv_const_sv
#undef  Perl_cv_undef
#define Perl_cv_undef		pPerl->Perl_cv_undef
#undef  cv_undef
#define cv_undef		Perl_cv_undef
#undef  Perl_cx_dump
#define Perl_cx_dump		pPerl->Perl_cx_dump
#undef  cx_dump
#define cx_dump			Perl_cx_dump
#undef  Perl_filter_add
#define Perl_filter_add		pPerl->Perl_filter_add
#undef  filter_add
#define filter_add		Perl_filter_add
#undef  Perl_filter_del
#define Perl_filter_del		pPerl->Perl_filter_del
#undef  filter_del
#define filter_del		Perl_filter_del
#undef  Perl_filter_read
#define Perl_filter_read	pPerl->Perl_filter_read
#undef  filter_read
#define filter_read		Perl_filter_read
#undef  Perl_get_op_descs
#define Perl_get_op_descs	pPerl->Perl_get_op_descs
#undef  get_op_descs
#define get_op_descs		Perl_get_op_descs
#undef  Perl_get_op_names
#define Perl_get_op_names	pPerl->Perl_get_op_names
#undef  get_op_names
#define get_op_names		Perl_get_op_names
#undef  Perl_get_ppaddr
#define Perl_get_ppaddr		pPerl->Perl_get_ppaddr
#undef  get_ppaddr
#define get_ppaddr		Perl_get_ppaddr
#undef  Perl_deb
#define Perl_deb		pPerl->Perl_deb
#undef  deb
#define deb			Perl_deb
#undef  Perl_vdeb
#define Perl_vdeb		pPerl->Perl_vdeb
#undef  vdeb
#define vdeb			Perl_vdeb
#undef  Perl_debprofdump
#define Perl_debprofdump	pPerl->Perl_debprofdump
#undef  debprofdump
#define debprofdump		Perl_debprofdump
#undef  Perl_debop
#define Perl_debop		pPerl->Perl_debop
#undef  debop
#define debop			Perl_debop
#undef  Perl_debstack
#define Perl_debstack		pPerl->Perl_debstack
#undef  debstack
#define debstack		Perl_debstack
#undef  Perl_debstackptrs
#define Perl_debstackptrs	pPerl->Perl_debstackptrs
#undef  debstackptrs
#define debstackptrs		Perl_debstackptrs
#undef  Perl_delimcpy
#define Perl_delimcpy		pPerl->Perl_delimcpy
#undef  delimcpy
#define delimcpy		Perl_delimcpy
#undef  Perl_die
#define Perl_die		pPerl->Perl_die
#undef  die
#define die			Perl_die
#undef  Perl_dounwind
#define Perl_dounwind		pPerl->Perl_dounwind
#undef  dounwind
#define dounwind		Perl_dounwind
#undef  Perl_do_binmode
#define Perl_do_binmode		pPerl->Perl_do_binmode
#undef  do_binmode
#define do_binmode		Perl_do_binmode
#undef  Perl_do_close
#define Perl_do_close		pPerl->Perl_do_close
#undef  do_close
#define do_close		Perl_do_close
#undef  Perl_do_exec
#define Perl_do_exec		pPerl->Perl_do_exec
#undef  do_exec
#define do_exec			Perl_do_exec
#if defined(WIN32)
#undef  Perl_do_aspawn
#define Perl_do_aspawn		pPerl->Perl_do_aspawn
#undef  do_aspawn
#define do_aspawn		Perl_do_aspawn
#undef  Perl_do_spawn
#define Perl_do_spawn		pPerl->Perl_do_spawn
#undef  do_spawn
#define do_spawn		Perl_do_spawn
#undef  Perl_do_spawn_nowait
#define Perl_do_spawn_nowait	pPerl->Perl_do_spawn_nowait
#undef  do_spawn_nowait
#define do_spawn_nowait		Perl_do_spawn_nowait
#endif
#if !defined(WIN32)
#endif
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
#endif
#undef  Perl_do_join
#define Perl_do_join		pPerl->Perl_do_join
#undef  do_join
#define do_join			Perl_do_join
#undef  Perl_do_open
#define Perl_do_open		pPerl->Perl_do_open
#undef  do_open
#define do_open			Perl_do_open
#undef  Perl_do_open9
#define Perl_do_open9		pPerl->Perl_do_open9
#undef  do_open9
#define do_open9		Perl_do_open9
#undef  Perl_dowantarray
#define Perl_dowantarray	pPerl->Perl_dowantarray
#undef  dowantarray
#define dowantarray		Perl_dowantarray
#undef  Perl_dump_all
#define Perl_dump_all		pPerl->Perl_dump_all
#undef  dump_all
#define dump_all		Perl_dump_all
#undef  Perl_dump_eval
#define Perl_dump_eval		pPerl->Perl_dump_eval
#undef  dump_eval
#define dump_eval		Perl_dump_eval
#if defined(DUMP_FDS)
#undef  Perl_dump_fds
#define Perl_dump_fds		pPerl->Perl_dump_fds
#undef  dump_fds
#define dump_fds		Perl_dump_fds
#endif
#undef  Perl_dump_form
#define Perl_dump_form		pPerl->Perl_dump_form
#undef  dump_form
#define dump_form		Perl_dump_form
#undef  Perl_gv_dump
#define Perl_gv_dump		pPerl->Perl_gv_dump
#undef  gv_dump
#define gv_dump			Perl_gv_dump
#undef  Perl_op_dump
#define Perl_op_dump		pPerl->Perl_op_dump
#undef  op_dump
#define op_dump			Perl_op_dump
#undef  Perl_pmop_dump
#define Perl_pmop_dump		pPerl->Perl_pmop_dump
#undef  pmop_dump
#define pmop_dump		Perl_pmop_dump
#undef  Perl_dump_packsubs
#define Perl_dump_packsubs	pPerl->Perl_dump_packsubs
#undef  dump_packsubs
#define dump_packsubs		Perl_dump_packsubs
#undef  Perl_dump_sub
#define Perl_dump_sub		pPerl->Perl_dump_sub
#undef  dump_sub
#define dump_sub		Perl_dump_sub
#undef  Perl_fbm_compile
#define Perl_fbm_compile	pPerl->Perl_fbm_compile
#undef  fbm_compile
#define fbm_compile		Perl_fbm_compile
#undef  Perl_fbm_instr
#define Perl_fbm_instr		pPerl->Perl_fbm_instr
#undef  fbm_instr
#define fbm_instr		Perl_fbm_instr
#if defined(USE_THREADS)
#endif
#undef  Perl_form
#define Perl_form		pPerl->Perl_form
#undef  form
#define form			Perl_form
#undef  Perl_vform
#define Perl_vform		pPerl->Perl_vform
#undef  vform
#define vform			Perl_vform
#undef  Perl_free_tmps
#define Perl_free_tmps		pPerl->Perl_free_tmps
#undef  free_tmps
#define free_tmps		Perl_free_tmps
#if !defined(HAS_GETENV_LEN)
#endif
#undef  Perl_gp_free
#define Perl_gp_free		pPerl->Perl_gp_free
#undef  gp_free
#define gp_free			Perl_gp_free
#undef  Perl_gp_ref
#define Perl_gp_ref		pPerl->Perl_gp_ref
#undef  gp_ref
#define gp_ref			Perl_gp_ref
#undef  Perl_gv_AVadd
#define Perl_gv_AVadd		pPerl->Perl_gv_AVadd
#undef  gv_AVadd
#define gv_AVadd		Perl_gv_AVadd
#undef  Perl_gv_HVadd
#define Perl_gv_HVadd		pPerl->Perl_gv_HVadd
#undef  gv_HVadd
#define gv_HVadd		Perl_gv_HVadd
#undef  Perl_gv_IOadd
#define Perl_gv_IOadd		pPerl->Perl_gv_IOadd
#undef  gv_IOadd
#define gv_IOadd		Perl_gv_IOadd
#undef  Perl_gv_autoload4
#define Perl_gv_autoload4	pPerl->Perl_gv_autoload4
#undef  gv_autoload4
#define gv_autoload4		Perl_gv_autoload4
#undef  Perl_gv_check
#define Perl_gv_check		pPerl->Perl_gv_check
#undef  gv_check
#define gv_check		Perl_gv_check
#undef  Perl_gv_efullname
#define Perl_gv_efullname	pPerl->Perl_gv_efullname
#undef  gv_efullname
#define gv_efullname		Perl_gv_efullname
#undef  Perl_gv_efullname3
#define Perl_gv_efullname3	pPerl->Perl_gv_efullname3
#undef  gv_efullname3
#define gv_efullname3		Perl_gv_efullname3
#undef  Perl_gv_efullname4
#define Perl_gv_efullname4	pPerl->Perl_gv_efullname4
#undef  gv_efullname4
#define gv_efullname4		Perl_gv_efullname4
#undef  Perl_gv_fetchfile
#define Perl_gv_fetchfile	pPerl->Perl_gv_fetchfile
#undef  gv_fetchfile
#define gv_fetchfile		Perl_gv_fetchfile
#undef  Perl_gv_fetchmeth
#define Perl_gv_fetchmeth	pPerl->Perl_gv_fetchmeth
#undef  gv_fetchmeth
#define gv_fetchmeth		Perl_gv_fetchmeth
#undef  Perl_gv_fetchmethod
#define Perl_gv_fetchmethod	pPerl->Perl_gv_fetchmethod
#undef  gv_fetchmethod
#define gv_fetchmethod		Perl_gv_fetchmethod
#undef  Perl_gv_fetchmethod_autoload
#define Perl_gv_fetchmethod_autoload	pPerl->Perl_gv_fetchmethod_autoload
#undef  gv_fetchmethod_autoload
#define gv_fetchmethod_autoload	Perl_gv_fetchmethod_autoload
#undef  Perl_gv_fetchpv
#define Perl_gv_fetchpv		pPerl->Perl_gv_fetchpv
#undef  gv_fetchpv
#define gv_fetchpv		Perl_gv_fetchpv
#undef  Perl_gv_fullname
#define Perl_gv_fullname	pPerl->Perl_gv_fullname
#undef  gv_fullname
#define gv_fullname		Perl_gv_fullname
#undef  Perl_gv_fullname3
#define Perl_gv_fullname3	pPerl->Perl_gv_fullname3
#undef  gv_fullname3
#define gv_fullname3		Perl_gv_fullname3
#undef  Perl_gv_fullname4
#define Perl_gv_fullname4	pPerl->Perl_gv_fullname4
#undef  gv_fullname4
#define gv_fullname4		Perl_gv_fullname4
#undef  Perl_gv_init
#define Perl_gv_init		pPerl->Perl_gv_init
#undef  gv_init
#define gv_init			Perl_gv_init
#undef  Perl_gv_stashpv
#define Perl_gv_stashpv		pPerl->Perl_gv_stashpv
#undef  gv_stashpv
#define gv_stashpv		Perl_gv_stashpv
#undef  Perl_gv_stashpvn
#define Perl_gv_stashpvn	pPerl->Perl_gv_stashpvn
#undef  gv_stashpvn
#define gv_stashpvn		Perl_gv_stashpvn
#undef  Perl_gv_stashsv
#define Perl_gv_stashsv		pPerl->Perl_gv_stashsv
#undef  gv_stashsv
#define gv_stashsv		Perl_gv_stashsv
#undef  Perl_hv_clear
#define Perl_hv_clear		pPerl->Perl_hv_clear
#undef  hv_clear
#define hv_clear		Perl_hv_clear
#undef  Perl_hv_delayfree_ent
#define Perl_hv_delayfree_ent	pPerl->Perl_hv_delayfree_ent
#undef  hv_delayfree_ent
#define hv_delayfree_ent	Perl_hv_delayfree_ent
#undef  Perl_hv_delete
#define Perl_hv_delete		pPerl->Perl_hv_delete
#undef  hv_delete
#define hv_delete		Perl_hv_delete
#undef  Perl_hv_delete_ent
#define Perl_hv_delete_ent	pPerl->Perl_hv_delete_ent
#undef  hv_delete_ent
#define hv_delete_ent		Perl_hv_delete_ent
#undef  Perl_hv_exists
#define Perl_hv_exists		pPerl->Perl_hv_exists
#undef  hv_exists
#define hv_exists		Perl_hv_exists
#undef  Perl_hv_exists_ent
#define Perl_hv_exists_ent	pPerl->Perl_hv_exists_ent
#undef  hv_exists_ent
#define hv_exists_ent		Perl_hv_exists_ent
#undef  Perl_hv_fetch
#define Perl_hv_fetch		pPerl->Perl_hv_fetch
#undef  hv_fetch
#define hv_fetch		Perl_hv_fetch
#undef  Perl_hv_fetch_ent
#define Perl_hv_fetch_ent	pPerl->Perl_hv_fetch_ent
#undef  hv_fetch_ent
#define hv_fetch_ent		Perl_hv_fetch_ent
#undef  Perl_hv_free_ent
#define Perl_hv_free_ent	pPerl->Perl_hv_free_ent
#undef  hv_free_ent
#define hv_free_ent		Perl_hv_free_ent
#undef  Perl_hv_iterinit
#define Perl_hv_iterinit	pPerl->Perl_hv_iterinit
#undef  hv_iterinit
#define hv_iterinit		Perl_hv_iterinit
#undef  Perl_hv_iterkey
#define Perl_hv_iterkey		pPerl->Perl_hv_iterkey
#undef  hv_iterkey
#define hv_iterkey		Perl_hv_iterkey
#undef  Perl_hv_iterkeysv
#define Perl_hv_iterkeysv	pPerl->Perl_hv_iterkeysv
#undef  hv_iterkeysv
#define hv_iterkeysv		Perl_hv_iterkeysv
#undef  Perl_hv_iternext
#define Perl_hv_iternext	pPerl->Perl_hv_iternext
#undef  hv_iternext
#define hv_iternext		Perl_hv_iternext
#undef  Perl_hv_iternextsv
#define Perl_hv_iternextsv	pPerl->Perl_hv_iternextsv
#undef  hv_iternextsv
#define hv_iternextsv		Perl_hv_iternextsv
#undef  Perl_hv_iterval
#define Perl_hv_iterval		pPerl->Perl_hv_iterval
#undef  hv_iterval
#define hv_iterval		Perl_hv_iterval
#undef  Perl_hv_ksplit
#define Perl_hv_ksplit		pPerl->Perl_hv_ksplit
#undef  hv_ksplit
#define hv_ksplit		Perl_hv_ksplit
#undef  Perl_hv_magic
#define Perl_hv_magic		pPerl->Perl_hv_magic
#undef  hv_magic
#define hv_magic		Perl_hv_magic
#undef  Perl_hv_store
#define Perl_hv_store		pPerl->Perl_hv_store
#undef  hv_store
#define hv_store		Perl_hv_store
#undef  Perl_hv_store_ent
#define Perl_hv_store_ent	pPerl->Perl_hv_store_ent
#undef  hv_store_ent
#define hv_store_ent		Perl_hv_store_ent
#undef  Perl_hv_undef
#define Perl_hv_undef		pPerl->Perl_hv_undef
#undef  hv_undef
#define hv_undef		Perl_hv_undef
#undef  Perl_ibcmp
#define Perl_ibcmp		pPerl->Perl_ibcmp
#undef  ibcmp
#define ibcmp			Perl_ibcmp
#undef  Perl_ibcmp_locale
#define Perl_ibcmp_locale	pPerl->Perl_ibcmp_locale
#undef  ibcmp_locale
#define ibcmp_locale		Perl_ibcmp_locale
#undef  Perl_init_stacks
#define Perl_init_stacks	pPerl->Perl_init_stacks
#undef  init_stacks
#define init_stacks		Perl_init_stacks
#undef  Perl_instr
#define Perl_instr		pPerl->Perl_instr
#undef  instr
#define instr			Perl_instr
#undef  Perl_is_uni_alnum
#define Perl_is_uni_alnum	pPerl->Perl_is_uni_alnum
#undef  is_uni_alnum
#define is_uni_alnum		Perl_is_uni_alnum
#undef  Perl_is_uni_alnumc
#define Perl_is_uni_alnumc	pPerl->Perl_is_uni_alnumc
#undef  is_uni_alnumc
#define is_uni_alnumc		Perl_is_uni_alnumc
#undef  Perl_is_uni_idfirst
#define Perl_is_uni_idfirst	pPerl->Perl_is_uni_idfirst
#undef  is_uni_idfirst
#define is_uni_idfirst		Perl_is_uni_idfirst
#undef  Perl_is_uni_alpha
#define Perl_is_uni_alpha	pPerl->Perl_is_uni_alpha
#undef  is_uni_alpha
#define is_uni_alpha		Perl_is_uni_alpha
#undef  Perl_is_uni_ascii
#define Perl_is_uni_ascii	pPerl->Perl_is_uni_ascii
#undef  is_uni_ascii
#define is_uni_ascii		Perl_is_uni_ascii
#undef  Perl_is_uni_space
#define Perl_is_uni_space	pPerl->Perl_is_uni_space
#undef  is_uni_space
#define is_uni_space		Perl_is_uni_space
#undef  Perl_is_uni_cntrl
#define Perl_is_uni_cntrl	pPerl->Perl_is_uni_cntrl
#undef  is_uni_cntrl
#define is_uni_cntrl		Perl_is_uni_cntrl
#undef  Perl_is_uni_graph
#define Perl_is_uni_graph	pPerl->Perl_is_uni_graph
#undef  is_uni_graph
#define is_uni_graph		Perl_is_uni_graph
#undef  Perl_is_uni_digit
#define Perl_is_uni_digit	pPerl->Perl_is_uni_digit
#undef  is_uni_digit
#define is_uni_digit		Perl_is_uni_digit
#undef  Perl_is_uni_upper
#define Perl_is_uni_upper	pPerl->Perl_is_uni_upper
#undef  is_uni_upper
#define is_uni_upper		Perl_is_uni_upper
#undef  Perl_is_uni_lower
#define Perl_is_uni_lower	pPerl->Perl_is_uni_lower
#undef  is_uni_lower
#define is_uni_lower		Perl_is_uni_lower
#undef  Perl_is_uni_print
#define Perl_is_uni_print	pPerl->Perl_is_uni_print
#undef  is_uni_print
#define is_uni_print		Perl_is_uni_print
#undef  Perl_is_uni_punct
#define Perl_is_uni_punct	pPerl->Perl_is_uni_punct
#undef  is_uni_punct
#define is_uni_punct		Perl_is_uni_punct
#undef  Perl_is_uni_xdigit
#define Perl_is_uni_xdigit	pPerl->Perl_is_uni_xdigit
#undef  is_uni_xdigit
#define is_uni_xdigit		Perl_is_uni_xdigit
#undef  Perl_to_uni_upper
#define Perl_to_uni_upper	pPerl->Perl_to_uni_upper
#undef  to_uni_upper
#define to_uni_upper		Perl_to_uni_upper
#undef  Perl_to_uni_title
#define Perl_to_uni_title	pPerl->Perl_to_uni_title
#undef  to_uni_title
#define to_uni_title		Perl_to_uni_title
#undef  Perl_to_uni_lower
#define Perl_to_uni_lower	pPerl->Perl_to_uni_lower
#undef  to_uni_lower
#define to_uni_lower		Perl_to_uni_lower
#undef  Perl_is_uni_alnum_lc
#define Perl_is_uni_alnum_lc	pPerl->Perl_is_uni_alnum_lc
#undef  is_uni_alnum_lc
#define is_uni_alnum_lc		Perl_is_uni_alnum_lc
#undef  Perl_is_uni_alnumc_lc
#define Perl_is_uni_alnumc_lc	pPerl->Perl_is_uni_alnumc_lc
#undef  is_uni_alnumc_lc
#define is_uni_alnumc_lc	Perl_is_uni_alnumc_lc
#undef  Perl_is_uni_idfirst_lc
#define Perl_is_uni_idfirst_lc	pPerl->Perl_is_uni_idfirst_lc
#undef  is_uni_idfirst_lc
#define is_uni_idfirst_lc	Perl_is_uni_idfirst_lc
#undef  Perl_is_uni_alpha_lc
#define Perl_is_uni_alpha_lc	pPerl->Perl_is_uni_alpha_lc
#undef  is_uni_alpha_lc
#define is_uni_alpha_lc		Perl_is_uni_alpha_lc
#undef  Perl_is_uni_ascii_lc
#define Perl_is_uni_ascii_lc	pPerl->Perl_is_uni_ascii_lc
#undef  is_uni_ascii_lc
#define is_uni_ascii_lc		Perl_is_uni_ascii_lc
#undef  Perl_is_uni_space_lc
#define Perl_is_uni_space_lc	pPerl->Perl_is_uni_space_lc
#undef  is_uni_space_lc
#define is_uni_space_lc		Perl_is_uni_space_lc
#undef  Perl_is_uni_cntrl_lc
#define Perl_is_uni_cntrl_lc	pPerl->Perl_is_uni_cntrl_lc
#undef  is_uni_cntrl_lc
#define is_uni_cntrl_lc		Perl_is_uni_cntrl_lc
#undef  Perl_is_uni_graph_lc
#define Perl_is_uni_graph_lc	pPerl->Perl_is_uni_graph_lc
#undef  is_uni_graph_lc
#define is_uni_graph_lc		Perl_is_uni_graph_lc
#undef  Perl_is_uni_digit_lc
#define Perl_is_uni_digit_lc	pPerl->Perl_is_uni_digit_lc
#undef  is_uni_digit_lc
#define is_uni_digit_lc		Perl_is_uni_digit_lc
#undef  Perl_is_uni_upper_lc
#define Perl_is_uni_upper_lc	pPerl->Perl_is_uni_upper_lc
#undef  is_uni_upper_lc
#define is_uni_upper_lc		Perl_is_uni_upper_lc
#undef  Perl_is_uni_lower_lc
#define Perl_is_uni_lower_lc	pPerl->Perl_is_uni_lower_lc
#undef  is_uni_lower_lc
#define is_uni_lower_lc		Perl_is_uni_lower_lc
#undef  Perl_is_uni_print_lc
#define Perl_is_uni_print_lc	pPerl->Perl_is_uni_print_lc
#undef  is_uni_print_lc
#define is_uni_print_lc		Perl_is_uni_print_lc
#undef  Perl_is_uni_punct_lc
#define Perl_is_uni_punct_lc	pPerl->Perl_is_uni_punct_lc
#undef  is_uni_punct_lc
#define is_uni_punct_lc		Perl_is_uni_punct_lc
#undef  Perl_is_uni_xdigit_lc
#define Perl_is_uni_xdigit_lc	pPerl->Perl_is_uni_xdigit_lc
#undef  is_uni_xdigit_lc
#define is_uni_xdigit_lc	Perl_is_uni_xdigit_lc
#undef  Perl_to_uni_upper_lc
#define Perl_to_uni_upper_lc	pPerl->Perl_to_uni_upper_lc
#undef  to_uni_upper_lc
#define to_uni_upper_lc		Perl_to_uni_upper_lc
#undef  Perl_to_uni_title_lc
#define Perl_to_uni_title_lc	pPerl->Perl_to_uni_title_lc
#undef  to_uni_title_lc
#define to_uni_title_lc		Perl_to_uni_title_lc
#undef  Perl_to_uni_lower_lc
#define Perl_to_uni_lower_lc	pPerl->Perl_to_uni_lower_lc
#undef  to_uni_lower_lc
#define to_uni_lower_lc		Perl_to_uni_lower_lc
#undef  Perl_is_utf8_char
#define Perl_is_utf8_char	pPerl->Perl_is_utf8_char
#undef  is_utf8_char
#define is_utf8_char		Perl_is_utf8_char
#undef  Perl_is_utf8_string
#define Perl_is_utf8_string	pPerl->Perl_is_utf8_string
#undef  is_utf8_string
#define is_utf8_string		Perl_is_utf8_string
#undef  Perl_is_utf8_alnum
#define Perl_is_utf8_alnum	pPerl->Perl_is_utf8_alnum
#undef  is_utf8_alnum
#define is_utf8_alnum		Perl_is_utf8_alnum
#undef  Perl_is_utf8_alnumc
#define Perl_is_utf8_alnumc	pPerl->Perl_is_utf8_alnumc
#undef  is_utf8_alnumc
#define is_utf8_alnumc		Perl_is_utf8_alnumc
#undef  Perl_is_utf8_idfirst
#define Perl_is_utf8_idfirst	pPerl->Perl_is_utf8_idfirst
#undef  is_utf8_idfirst
#define is_utf8_idfirst		Perl_is_utf8_idfirst
#undef  Perl_is_utf8_alpha
#define Perl_is_utf8_alpha	pPerl->Perl_is_utf8_alpha
#undef  is_utf8_alpha
#define is_utf8_alpha		Perl_is_utf8_alpha
#undef  Perl_is_utf8_ascii
#define Perl_is_utf8_ascii	pPerl->Perl_is_utf8_ascii
#undef  is_utf8_ascii
#define is_utf8_ascii		Perl_is_utf8_ascii
#undef  Perl_is_utf8_space
#define Perl_is_utf8_space	pPerl->Perl_is_utf8_space
#undef  is_utf8_space
#define is_utf8_space		Perl_is_utf8_space
#undef  Perl_is_utf8_cntrl
#define Perl_is_utf8_cntrl	pPerl->Perl_is_utf8_cntrl
#undef  is_utf8_cntrl
#define is_utf8_cntrl		Perl_is_utf8_cntrl
#undef  Perl_is_utf8_digit
#define Perl_is_utf8_digit	pPerl->Perl_is_utf8_digit
#undef  is_utf8_digit
#define is_utf8_digit		Perl_is_utf8_digit
#undef  Perl_is_utf8_graph
#define Perl_is_utf8_graph	pPerl->Perl_is_utf8_graph
#undef  is_utf8_graph
#define is_utf8_graph		Perl_is_utf8_graph
#undef  Perl_is_utf8_upper
#define Perl_is_utf8_upper	pPerl->Perl_is_utf8_upper
#undef  is_utf8_upper
#define is_utf8_upper		Perl_is_utf8_upper
#undef  Perl_is_utf8_lower
#define Perl_is_utf8_lower	pPerl->Perl_is_utf8_lower
#undef  is_utf8_lower
#define is_utf8_lower		Perl_is_utf8_lower
#undef  Perl_is_utf8_print
#define Perl_is_utf8_print	pPerl->Perl_is_utf8_print
#undef  is_utf8_print
#define is_utf8_print		Perl_is_utf8_print
#undef  Perl_is_utf8_punct
#define Perl_is_utf8_punct	pPerl->Perl_is_utf8_punct
#undef  is_utf8_punct
#define is_utf8_punct		Perl_is_utf8_punct
#undef  Perl_is_utf8_xdigit
#define Perl_is_utf8_xdigit	pPerl->Perl_is_utf8_xdigit
#undef  is_utf8_xdigit
#define is_utf8_xdigit		Perl_is_utf8_xdigit
#undef  Perl_is_utf8_mark
#define Perl_is_utf8_mark	pPerl->Perl_is_utf8_mark
#undef  is_utf8_mark
#define is_utf8_mark		Perl_is_utf8_mark
#undef  Perl_leave_scope
#define Perl_leave_scope	pPerl->Perl_leave_scope
#undef  leave_scope
#define leave_scope		Perl_leave_scope
#undef  Perl_load_module
#define Perl_load_module	pPerl->Perl_load_module
#undef  load_module
#define load_module		Perl_load_module
#undef  Perl_vload_module
#define Perl_vload_module	pPerl->Perl_vload_module
#undef  vload_module
#define vload_module		Perl_vload_module
#undef  Perl_looks_like_number
#define Perl_looks_like_number	pPerl->Perl_looks_like_number
#undef  looks_like_number
#define looks_like_number	Perl_looks_like_number
#if defined(USE_THREADS)
#endif
#if defined(USE_LOCALE_COLLATE)
#endif
#undef  Perl_markstack_grow
#define Perl_markstack_grow	pPerl->Perl_markstack_grow
#undef  markstack_grow
#define markstack_grow		Perl_markstack_grow
#if defined(USE_LOCALE_COLLATE)
#endif
#undef  Perl_mess
#define Perl_mess		pPerl->Perl_mess
#undef  mess
#define mess			Perl_mess
#undef  Perl_vmess
#define Perl_vmess		pPerl->Perl_vmess
#undef  vmess
#define vmess			Perl_vmess
#undef  Perl_mg_clear
#define Perl_mg_clear		pPerl->Perl_mg_clear
#undef  mg_clear
#define mg_clear		Perl_mg_clear
#undef  Perl_mg_copy
#define Perl_mg_copy		pPerl->Perl_mg_copy
#undef  mg_copy
#define mg_copy			Perl_mg_copy
#undef  Perl_mg_find
#define Perl_mg_find		pPerl->Perl_mg_find
#undef  mg_find
#define mg_find			Perl_mg_find
#undef  Perl_mg_free
#define Perl_mg_free		pPerl->Perl_mg_free
#undef  mg_free
#define mg_free			Perl_mg_free
#undef  Perl_mg_get
#define Perl_mg_get		pPerl->Perl_mg_get
#undef  mg_get
#define mg_get			Perl_mg_get
#undef  Perl_mg_length
#define Perl_mg_length		pPerl->Perl_mg_length
#undef  mg_length
#define mg_length		Perl_mg_length
#undef  Perl_mg_magical
#define Perl_mg_magical		pPerl->Perl_mg_magical
#undef  mg_magical
#define mg_magical		Perl_mg_magical
#undef  Perl_mg_set
#define Perl_mg_set		pPerl->Perl_mg_set
#undef  mg_set
#define mg_set			Perl_mg_set
#undef  Perl_mg_size
#define Perl_mg_size		pPerl->Perl_mg_size
#undef  mg_size
#define mg_size			Perl_mg_size
#undef  Perl_moreswitches
#define Perl_moreswitches	pPerl->Perl_moreswitches
#undef  moreswitches
#define moreswitches		Perl_moreswitches
#undef  Perl_my_atof
#define Perl_my_atof		pPerl->Perl_my_atof
#undef  my_atof
#define my_atof			Perl_my_atof
#if !defined(HAS_BCOPY) || !defined(HAS_SAFE_BCOPY)
#undef  Perl_my_bcopy
#define Perl_my_bcopy		pPerl->Perl_my_bcopy
#undef  my_bcopy
#define my_bcopy		Perl_my_bcopy
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
#undef  Perl_my_bzero
#define Perl_my_bzero		pPerl->Perl_my_bzero
#undef  my_bzero
#define my_bzero		Perl_my_bzero
#endif
#undef  Perl_my_exit
#define Perl_my_exit		pPerl->Perl_my_exit
#undef  my_exit
#define my_exit			Perl_my_exit
#undef  Perl_my_failure_exit
#define Perl_my_failure_exit	pPerl->Perl_my_failure_exit
#undef  my_failure_exit
#define my_failure_exit		Perl_my_failure_exit
#undef  Perl_my_fflush_all
#define Perl_my_fflush_all	pPerl->Perl_my_fflush_all
#undef  my_fflush_all
#define my_fflush_all		Perl_my_fflush_all
#undef  Perl_my_lstat
#define Perl_my_lstat		pPerl->Perl_my_lstat
#undef  my_lstat
#define my_lstat		Perl_my_lstat
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
#undef  Perl_my_memcmp
#define Perl_my_memcmp		pPerl->Perl_my_memcmp
#undef  my_memcmp
#define my_memcmp		Perl_my_memcmp
#endif
#if !defined(HAS_MEMSET)
#undef  Perl_my_memset
#define Perl_my_memset		pPerl->Perl_my_memset
#undef  my_memset
#define my_memset		Perl_my_memset
#endif
#if !defined(PERL_OBJECT)
#undef  Perl_my_pclose
#define Perl_my_pclose		pPerl->Perl_my_pclose
#undef  my_pclose
#define my_pclose		Perl_my_pclose
#undef  Perl_my_popen
#define Perl_my_popen		pPerl->Perl_my_popen
#undef  my_popen
#define my_popen		Perl_my_popen
#endif
#undef  Perl_my_setenv
#define Perl_my_setenv		pPerl->Perl_my_setenv
#undef  my_setenv
#define my_setenv		Perl_my_setenv
#undef  Perl_my_stat
#define Perl_my_stat		pPerl->Perl_my_stat
#undef  my_stat
#define my_stat			Perl_my_stat
#if defined(MYSWAP)
#undef  Perl_my_swap
#define Perl_my_swap		pPerl->Perl_my_swap
#undef  my_swap
#define my_swap			Perl_my_swap
#undef  Perl_my_htonl
#define Perl_my_htonl		pPerl->Perl_my_htonl
#undef  my_htonl
#define my_htonl		Perl_my_htonl
#undef  Perl_my_ntohl
#define Perl_my_ntohl		pPerl->Perl_my_ntohl
#undef  my_ntohl
#define my_ntohl		Perl_my_ntohl
#endif
#undef  Perl_newANONLIST
#define Perl_newANONLIST	pPerl->Perl_newANONLIST
#undef  newANONLIST
#define newANONLIST		Perl_newANONLIST
#undef  Perl_newANONHASH
#define Perl_newANONHASH	pPerl->Perl_newANONHASH
#undef  newANONHASH
#define newANONHASH		Perl_newANONHASH
#undef  Perl_newANONSUB
#define Perl_newANONSUB		pPerl->Perl_newANONSUB
#undef  newANONSUB
#define newANONSUB		Perl_newANONSUB
#undef  Perl_newASSIGNOP
#define Perl_newASSIGNOP	pPerl->Perl_newASSIGNOP
#undef  newASSIGNOP
#define newASSIGNOP		Perl_newASSIGNOP
#undef  Perl_newCONDOP
#define Perl_newCONDOP		pPerl->Perl_newCONDOP
#undef  newCONDOP
#define newCONDOP		Perl_newCONDOP
#undef  Perl_newCONSTSUB
#define Perl_newCONSTSUB	pPerl->Perl_newCONSTSUB
#undef  newCONSTSUB
#define newCONSTSUB		Perl_newCONSTSUB
#undef  Perl_newFORM
#define Perl_newFORM		pPerl->Perl_newFORM
#undef  newFORM
#define newFORM			Perl_newFORM
#undef  Perl_newFOROP
#define Perl_newFOROP		pPerl->Perl_newFOROP
#undef  newFOROP
#define newFOROP		Perl_newFOROP
#undef  Perl_newLOGOP
#define Perl_newLOGOP		pPerl->Perl_newLOGOP
#undef  newLOGOP
#define newLOGOP		Perl_newLOGOP
#undef  Perl_newLOOPEX
#define Perl_newLOOPEX		pPerl->Perl_newLOOPEX
#undef  newLOOPEX
#define newLOOPEX		Perl_newLOOPEX
#undef  Perl_newLOOPOP
#define Perl_newLOOPOP		pPerl->Perl_newLOOPOP
#undef  newLOOPOP
#define newLOOPOP		Perl_newLOOPOP
#undef  Perl_newNULLLIST
#define Perl_newNULLLIST	pPerl->Perl_newNULLLIST
#undef  newNULLLIST
#define newNULLLIST		Perl_newNULLLIST
#undef  Perl_newOP
#define Perl_newOP		pPerl->Perl_newOP
#undef  newOP
#define newOP			Perl_newOP
#undef  Perl_newPROG
#define Perl_newPROG		pPerl->Perl_newPROG
#undef  newPROG
#define newPROG			Perl_newPROG
#undef  Perl_newRANGE
#define Perl_newRANGE		pPerl->Perl_newRANGE
#undef  newRANGE
#define newRANGE		Perl_newRANGE
#undef  Perl_newSLICEOP
#define Perl_newSLICEOP		pPerl->Perl_newSLICEOP
#undef  newSLICEOP
#define newSLICEOP		Perl_newSLICEOP
#undef  Perl_newSTATEOP
#define Perl_newSTATEOP		pPerl->Perl_newSTATEOP
#undef  newSTATEOP
#define newSTATEOP		Perl_newSTATEOP
#undef  Perl_newSUB
#define Perl_newSUB		pPerl->Perl_newSUB
#undef  newSUB
#define newSUB			Perl_newSUB
#undef  Perl_newXS
#define Perl_newXS		pPerl->Perl_newXS
#undef  newXS
#define newXS			Perl_newXS
#undef  Perl_newAV
#define Perl_newAV		pPerl->Perl_newAV
#undef  newAV
#define newAV			Perl_newAV
#undef  Perl_newAVREF
#define Perl_newAVREF		pPerl->Perl_newAVREF
#undef  newAVREF
#define newAVREF		Perl_newAVREF
#undef  Perl_newBINOP
#define Perl_newBINOP		pPerl->Perl_newBINOP
#undef  newBINOP
#define newBINOP		Perl_newBINOP
#undef  Perl_newCVREF
#define Perl_newCVREF		pPerl->Perl_newCVREF
#undef  newCVREF
#define newCVREF		Perl_newCVREF
#undef  Perl_newGVOP
#define Perl_newGVOP		pPerl->Perl_newGVOP
#undef  newGVOP
#define newGVOP			Perl_newGVOP
#undef  Perl_newGVgen
#define Perl_newGVgen		pPerl->Perl_newGVgen
#undef  newGVgen
#define newGVgen		Perl_newGVgen
#undef  Perl_newGVREF
#define Perl_newGVREF		pPerl->Perl_newGVREF
#undef  newGVREF
#define newGVREF		Perl_newGVREF
#undef  Perl_newHVREF
#define Perl_newHVREF		pPerl->Perl_newHVREF
#undef  newHVREF
#define newHVREF		Perl_newHVREF
#undef  Perl_newHV
#define Perl_newHV		pPerl->Perl_newHV
#undef  newHV
#define newHV			Perl_newHV
#undef  Perl_newHVhv
#define Perl_newHVhv		pPerl->Perl_newHVhv
#undef  newHVhv
#define newHVhv			Perl_newHVhv
#undef  Perl_newIO
#define Perl_newIO		pPerl->Perl_newIO
#undef  newIO
#define newIO			Perl_newIO
#undef  Perl_newLISTOP
#define Perl_newLISTOP		pPerl->Perl_newLISTOP
#undef  newLISTOP
#define newLISTOP		Perl_newLISTOP
#undef  Perl_newPADOP
#define Perl_newPADOP		pPerl->Perl_newPADOP
#undef  newPADOP
#define newPADOP		Perl_newPADOP
#undef  Perl_newPMOP
#define Perl_newPMOP		pPerl->Perl_newPMOP
#undef  newPMOP
#define newPMOP			Perl_newPMOP
#undef  Perl_newPVOP
#define Perl_newPVOP		pPerl->Perl_newPVOP
#undef  newPVOP
#define newPVOP			Perl_newPVOP
#undef  Perl_newRV
#define Perl_newRV		pPerl->Perl_newRV
#undef  newRV
#define newRV			Perl_newRV
#undef  Perl_newRV_noinc
#define Perl_newRV_noinc	pPerl->Perl_newRV_noinc
#undef  newRV_noinc
#define newRV_noinc		Perl_newRV_noinc
#undef  Perl_newSV
#define Perl_newSV		pPerl->Perl_newSV
#undef  newSV
#define newSV			Perl_newSV
#undef  Perl_newSVREF
#define Perl_newSVREF		pPerl->Perl_newSVREF
#undef  newSVREF
#define newSVREF		Perl_newSVREF
#undef  Perl_newSVOP
#define Perl_newSVOP		pPerl->Perl_newSVOP
#undef  newSVOP
#define newSVOP			Perl_newSVOP
#undef  Perl_newSViv
#define Perl_newSViv		pPerl->Perl_newSViv
#undef  newSViv
#define newSViv			Perl_newSViv
#undef  Perl_newSVuv
#define Perl_newSVuv		pPerl->Perl_newSVuv
#undef  newSVuv
#define newSVuv			Perl_newSVuv
#undef  Perl_newSVnv
#define Perl_newSVnv		pPerl->Perl_newSVnv
#undef  newSVnv
#define newSVnv			Perl_newSVnv
#undef  Perl_newSVpv
#define Perl_newSVpv		pPerl->Perl_newSVpv
#undef  newSVpv
#define newSVpv			Perl_newSVpv
#undef  Perl_newSVpvn
#define Perl_newSVpvn		pPerl->Perl_newSVpvn
#undef  newSVpvn
#define newSVpvn		Perl_newSVpvn
#undef  Perl_newSVpvf
#define Perl_newSVpvf		pPerl->Perl_newSVpvf
#undef  newSVpvf
#define newSVpvf		Perl_newSVpvf
#undef  Perl_vnewSVpvf
#define Perl_vnewSVpvf		pPerl->Perl_vnewSVpvf
#undef  vnewSVpvf
#define vnewSVpvf		Perl_vnewSVpvf
#undef  Perl_newSVrv
#define Perl_newSVrv		pPerl->Perl_newSVrv
#undef  newSVrv
#define newSVrv			Perl_newSVrv
#undef  Perl_newSVsv
#define Perl_newSVsv		pPerl->Perl_newSVsv
#undef  newSVsv
#define newSVsv			Perl_newSVsv
#undef  Perl_newUNOP
#define Perl_newUNOP		pPerl->Perl_newUNOP
#undef  newUNOP
#define newUNOP			Perl_newUNOP
#undef  Perl_newWHILEOP
#define Perl_newWHILEOP		pPerl->Perl_newWHILEOP
#undef  newWHILEOP
#define newWHILEOP		Perl_newWHILEOP
#undef  Perl_new_stackinfo
#define Perl_new_stackinfo	pPerl->Perl_new_stackinfo
#undef  new_stackinfo
#define new_stackinfo		Perl_new_stackinfo
#undef  Perl_ninstr
#define Perl_ninstr		pPerl->Perl_ninstr
#undef  ninstr
#define ninstr			Perl_ninstr
#undef  Perl_op_free
#define Perl_op_free		pPerl->Perl_op_free
#undef  op_free
#define op_free			Perl_op_free
#undef  Perl_pad_sv
#define Perl_pad_sv		pPerl->Perl_pad_sv
#undef  pad_sv
#define pad_sv			Perl_pad_sv
#if defined(PERL_OBJECT)
#undef  Perl_construct
#define Perl_construct		pPerl->Perl_construct
#undef  Perl_destruct
#define Perl_destruct		pPerl->Perl_destruct
#undef  Perl_free
#define Perl_free		pPerl->Perl_free
#undef  Perl_run
#define Perl_run		pPerl->Perl_run
#undef  Perl_parse
#define Perl_parse		pPerl->Perl_parse
#endif
#if defined(USE_THREADS)
#undef  Perl_new_struct_thread
#define Perl_new_struct_thread	pPerl->Perl_new_struct_thread
#undef  new_struct_thread
#define new_struct_thread	Perl_new_struct_thread
#endif
#undef  Perl_call_atexit
#define Perl_call_atexit	pPerl->Perl_call_atexit
#undef  call_atexit
#define call_atexit		Perl_call_atexit
#undef  Perl_call_argv
#define Perl_call_argv		pPerl->Perl_call_argv
#undef  call_argv
#define call_argv		Perl_call_argv
#undef  Perl_call_method
#define Perl_call_method	pPerl->Perl_call_method
#undef  call_method
#define call_method		Perl_call_method
#undef  Perl_call_pv
#define Perl_call_pv		pPerl->Perl_call_pv
#undef  call_pv
#define call_pv			Perl_call_pv
#undef  Perl_call_sv
#define Perl_call_sv		pPerl->Perl_call_sv
#undef  call_sv
#define call_sv			Perl_call_sv
#undef  Perl_eval_pv
#define Perl_eval_pv		pPerl->Perl_eval_pv
#undef  eval_pv
#define eval_pv			Perl_eval_pv
#undef  Perl_eval_sv
#define Perl_eval_sv		pPerl->Perl_eval_sv
#undef  eval_sv
#define eval_sv			Perl_eval_sv
#undef  Perl_get_sv
#define Perl_get_sv		pPerl->Perl_get_sv
#undef  get_sv
#define get_sv			Perl_get_sv
#undef  Perl_get_av
#define Perl_get_av		pPerl->Perl_get_av
#undef  get_av
#define get_av			Perl_get_av
#undef  Perl_get_hv
#define Perl_get_hv		pPerl->Perl_get_hv
#undef  get_hv
#define get_hv			Perl_get_hv
#undef  Perl_get_cv
#define Perl_get_cv		pPerl->Perl_get_cv
#undef  get_cv
#define get_cv			Perl_get_cv
#undef  Perl_init_i18nl10n
#define Perl_init_i18nl10n	pPerl->Perl_init_i18nl10n
#undef  init_i18nl10n
#define init_i18nl10n		Perl_init_i18nl10n
#undef  Perl_init_i18nl14n
#define Perl_init_i18nl14n	pPerl->Perl_init_i18nl14n
#undef  init_i18nl14n
#define init_i18nl14n		Perl_init_i18nl14n
#undef  Perl_new_collate
#define Perl_new_collate	pPerl->Perl_new_collate
#undef  new_collate
#define new_collate		Perl_new_collate
#undef  Perl_new_ctype
#define Perl_new_ctype		pPerl->Perl_new_ctype
#undef  new_ctype
#define new_ctype		Perl_new_ctype
#undef  Perl_new_numeric
#define Perl_new_numeric	pPerl->Perl_new_numeric
#undef  new_numeric
#define new_numeric		Perl_new_numeric
#undef  Perl_set_numeric_local
#define Perl_set_numeric_local	pPerl->Perl_set_numeric_local
#undef  set_numeric_local
#define set_numeric_local	Perl_set_numeric_local
#undef  Perl_set_numeric_radix
#define Perl_set_numeric_radix	pPerl->Perl_set_numeric_radix
#undef  set_numeric_radix
#define set_numeric_radix	Perl_set_numeric_radix
#undef  Perl_set_numeric_standard
#define Perl_set_numeric_standard	pPerl->Perl_set_numeric_standard
#undef  set_numeric_standard
#define set_numeric_standard	Perl_set_numeric_standard
#undef  Perl_require_pv
#define Perl_require_pv		pPerl->Perl_require_pv
#undef  require_pv
#define require_pv		Perl_require_pv
#undef  Perl_pmflag
#define Perl_pmflag		pPerl->Perl_pmflag
#undef  pmflag
#define pmflag			Perl_pmflag
#undef  Perl_pop_scope
#define Perl_pop_scope		pPerl->Perl_pop_scope
#undef  pop_scope
#define pop_scope		Perl_pop_scope
#undef  Perl_push_scope
#define Perl_push_scope		pPerl->Perl_push_scope
#undef  push_scope
#define push_scope		Perl_push_scope
#undef  Perl_regdump
#define Perl_regdump		pPerl->Perl_regdump
#undef  regdump
#define regdump			Perl_regdump
#undef  Perl_pregexec
#define Perl_pregexec		pPerl->Perl_pregexec
#undef  pregexec
#define pregexec		Perl_pregexec
#undef  Perl_pregfree
#define Perl_pregfree		pPerl->Perl_pregfree
#undef  pregfree
#define pregfree		Perl_pregfree
#undef  Perl_pregcomp
#define Perl_pregcomp		pPerl->Perl_pregcomp
#undef  pregcomp
#define pregcomp		Perl_pregcomp
#undef  Perl_re_intuit_start
#define Perl_re_intuit_start	pPerl->Perl_re_intuit_start
#undef  re_intuit_start
#define re_intuit_start		Perl_re_intuit_start
#undef  Perl_re_intuit_string
#define Perl_re_intuit_string	pPerl->Perl_re_intuit_string
#undef  re_intuit_string
#define re_intuit_string	Perl_re_intuit_string
#undef  Perl_regexec_flags
#define Perl_regexec_flags	pPerl->Perl_regexec_flags
#undef  regexec_flags
#define regexec_flags		Perl_regexec_flags
#undef  Perl_regnext
#define Perl_regnext		pPerl->Perl_regnext
#undef  regnext
#define regnext			Perl_regnext
#undef  Perl_repeatcpy
#define Perl_repeatcpy		pPerl->Perl_repeatcpy
#undef  repeatcpy
#define repeatcpy		Perl_repeatcpy
#undef  Perl_rninstr
#define Perl_rninstr		pPerl->Perl_rninstr
#undef  rninstr
#define rninstr			Perl_rninstr
#undef  Perl_rsignal
#define Perl_rsignal		pPerl->Perl_rsignal
#undef  rsignal
#define rsignal			Perl_rsignal
#if !defined(HAS_RENAME)
#endif
#undef  Perl_savepv
#define Perl_savepv		pPerl->Perl_savepv
#undef  savepv
#define savepv			Perl_savepv
#undef  Perl_savepvn
#define Perl_savepvn		pPerl->Perl_savepvn
#undef  savepvn
#define savepvn			Perl_savepvn
#undef  Perl_savestack_grow
#define Perl_savestack_grow	pPerl->Perl_savestack_grow
#undef  savestack_grow
#define savestack_grow		Perl_savestack_grow
#undef  Perl_save_aelem
#define Perl_save_aelem		pPerl->Perl_save_aelem
#undef  save_aelem
#define save_aelem		Perl_save_aelem
#undef  Perl_save_alloc
#define Perl_save_alloc		pPerl->Perl_save_alloc
#undef  save_alloc
#define save_alloc		Perl_save_alloc
#undef  Perl_save_aptr
#define Perl_save_aptr		pPerl->Perl_save_aptr
#undef  save_aptr
#define save_aptr		Perl_save_aptr
#undef  Perl_save_ary
#define Perl_save_ary		pPerl->Perl_save_ary
#undef  save_ary
#define save_ary		Perl_save_ary
#undef  Perl_save_clearsv
#define Perl_save_clearsv	pPerl->Perl_save_clearsv
#undef  save_clearsv
#define save_clearsv		Perl_save_clearsv
#undef  Perl_save_delete
#define Perl_save_delete	pPerl->Perl_save_delete
#undef  save_delete
#define save_delete		Perl_save_delete
#undef  Perl_save_destructor
#define Perl_save_destructor	pPerl->Perl_save_destructor
#undef  save_destructor
#define save_destructor		Perl_save_destructor
#undef  Perl_save_destructor_x
#define Perl_save_destructor_x	pPerl->Perl_save_destructor_x
#undef  save_destructor_x
#define save_destructor_x	Perl_save_destructor_x
#undef  Perl_save_freesv
#define Perl_save_freesv	pPerl->Perl_save_freesv
#undef  save_freesv
#define save_freesv		Perl_save_freesv
#undef  Perl_save_freepv
#define Perl_save_freepv	pPerl->Perl_save_freepv
#undef  save_freepv
#define save_freepv		Perl_save_freepv
#undef  Perl_save_generic_svref
#define Perl_save_generic_svref	pPerl->Perl_save_generic_svref
#undef  save_generic_svref
#define save_generic_svref	Perl_save_generic_svref
#undef  Perl_save_generic_pvref
#define Perl_save_generic_pvref	pPerl->Perl_save_generic_pvref
#undef  save_generic_pvref
#define save_generic_pvref	Perl_save_generic_pvref
#undef  Perl_save_gp
#define Perl_save_gp		pPerl->Perl_save_gp
#undef  save_gp
#define save_gp			Perl_save_gp
#undef  Perl_save_hash
#define Perl_save_hash		pPerl->Perl_save_hash
#undef  save_hash
#define save_hash		Perl_save_hash
#undef  Perl_save_helem
#define Perl_save_helem		pPerl->Perl_save_helem
#undef  save_helem
#define save_helem		Perl_save_helem
#undef  Perl_save_hints
#define Perl_save_hints		pPerl->Perl_save_hints
#undef  save_hints
#define save_hints		Perl_save_hints
#undef  Perl_save_hptr
#define Perl_save_hptr		pPerl->Perl_save_hptr
#undef  save_hptr
#define save_hptr		Perl_save_hptr
#undef  Perl_save_I16
#define Perl_save_I16		pPerl->Perl_save_I16
#undef  save_I16
#define save_I16		Perl_save_I16
#undef  Perl_save_I32
#define Perl_save_I32		pPerl->Perl_save_I32
#undef  save_I32
#define save_I32		Perl_save_I32
#undef  Perl_save_I8
#define Perl_save_I8		pPerl->Perl_save_I8
#undef  save_I8
#define save_I8			Perl_save_I8
#undef  Perl_save_int
#define Perl_save_int		pPerl->Perl_save_int
#undef  save_int
#define save_int		Perl_save_int
#undef  Perl_save_item
#define Perl_save_item		pPerl->Perl_save_item
#undef  save_item
#define save_item		Perl_save_item
#undef  Perl_save_iv
#define Perl_save_iv		pPerl->Perl_save_iv
#undef  save_iv
#define save_iv			Perl_save_iv
#undef  Perl_save_list
#define Perl_save_list		pPerl->Perl_save_list
#undef  save_list
#define save_list		Perl_save_list
#undef  Perl_save_long
#define Perl_save_long		pPerl->Perl_save_long
#undef  save_long
#define save_long		Perl_save_long
#undef  Perl_save_mortalizesv
#define Perl_save_mortalizesv	pPerl->Perl_save_mortalizesv
#undef  save_mortalizesv
#define save_mortalizesv	Perl_save_mortalizesv
#undef  Perl_save_nogv
#define Perl_save_nogv		pPerl->Perl_save_nogv
#undef  save_nogv
#define save_nogv		Perl_save_nogv
#undef  Perl_save_scalar
#define Perl_save_scalar	pPerl->Perl_save_scalar
#undef  save_scalar
#define save_scalar		Perl_save_scalar
#undef  Perl_save_pptr
#define Perl_save_pptr		pPerl->Perl_save_pptr
#undef  save_pptr
#define save_pptr		Perl_save_pptr
#undef  Perl_save_vptr
#define Perl_save_vptr		pPerl->Perl_save_vptr
#undef  save_vptr
#define save_vptr		Perl_save_vptr
#undef  Perl_save_re_context
#define Perl_save_re_context	pPerl->Perl_save_re_context
#undef  save_re_context
#define save_re_context		Perl_save_re_context
#undef  Perl_save_padsv
#define Perl_save_padsv		pPerl->Perl_save_padsv
#undef  save_padsv
#define save_padsv		Perl_save_padsv
#undef  Perl_save_sptr
#define Perl_save_sptr		pPerl->Perl_save_sptr
#undef  save_sptr
#define save_sptr		Perl_save_sptr
#undef  Perl_save_svref
#define Perl_save_svref		pPerl->Perl_save_svref
#undef  save_svref
#define save_svref		Perl_save_svref
#undef  Perl_save_threadsv
#define Perl_save_threadsv	pPerl->Perl_save_threadsv
#undef  save_threadsv
#define save_threadsv		Perl_save_threadsv
#undef  Perl_scan_bin
#define Perl_scan_bin		pPerl->Perl_scan_bin
#undef  scan_bin
#define scan_bin		Perl_scan_bin
#undef  Perl_scan_hex
#define Perl_scan_hex		pPerl->Perl_scan_hex
#undef  scan_hex
#define scan_hex		Perl_scan_hex
#undef  Perl_scan_num
#define Perl_scan_num		pPerl->Perl_scan_num
#undef  scan_num
#define scan_num		Perl_scan_num
#undef  Perl_scan_oct
#define Perl_scan_oct		pPerl->Perl_scan_oct
#undef  scan_oct
#define scan_oct		Perl_scan_oct
#undef  Perl_screaminstr
#define Perl_screaminstr	pPerl->Perl_screaminstr
#undef  screaminstr
#define screaminstr		Perl_screaminstr
#if !defined(VMS)
#endif
#undef  Perl_sharepvn
#define Perl_sharepvn		pPerl->Perl_sharepvn
#undef  sharepvn
#define sharepvn		Perl_sharepvn
#undef  Perl_stack_grow
#define Perl_stack_grow		pPerl->Perl_stack_grow
#undef  stack_grow
#define stack_grow		Perl_stack_grow
#undef  Perl_start_subparse
#define Perl_start_subparse	pPerl->Perl_start_subparse
#undef  start_subparse
#define start_subparse		Perl_start_subparse
#undef  Perl_sv_2bool
#define Perl_sv_2bool		pPerl->Perl_sv_2bool
#undef  sv_2bool
#define sv_2bool		Perl_sv_2bool
#undef  Perl_sv_2cv
#define Perl_sv_2cv		pPerl->Perl_sv_2cv
#undef  sv_2cv
#define sv_2cv			Perl_sv_2cv
#undef  Perl_sv_2io
#define Perl_sv_2io		pPerl->Perl_sv_2io
#undef  sv_2io
#define sv_2io			Perl_sv_2io
#undef  Perl_sv_2iv
#define Perl_sv_2iv		pPerl->Perl_sv_2iv
#undef  sv_2iv
#define sv_2iv			Perl_sv_2iv
#undef  Perl_sv_2mortal
#define Perl_sv_2mortal		pPerl->Perl_sv_2mortal
#undef  sv_2mortal
#define sv_2mortal		Perl_sv_2mortal
#undef  Perl_sv_2nv
#define Perl_sv_2nv		pPerl->Perl_sv_2nv
#undef  sv_2nv
#define sv_2nv			Perl_sv_2nv
#undef  Perl_sv_2pv
#define Perl_sv_2pv		pPerl->Perl_sv_2pv
#undef  sv_2pv
#define sv_2pv			Perl_sv_2pv
#undef  Perl_sv_2pvutf8
#define Perl_sv_2pvutf8		pPerl->Perl_sv_2pvutf8
#undef  sv_2pvutf8
#define sv_2pvutf8		Perl_sv_2pvutf8
#undef  Perl_sv_2pvbyte
#define Perl_sv_2pvbyte		pPerl->Perl_sv_2pvbyte
#undef  sv_2pvbyte
#define sv_2pvbyte		Perl_sv_2pvbyte
#undef  Perl_sv_2uv
#define Perl_sv_2uv		pPerl->Perl_sv_2uv
#undef  sv_2uv
#define sv_2uv			Perl_sv_2uv
#undef  Perl_sv_iv
#define Perl_sv_iv		pPerl->Perl_sv_iv
#undef  sv_iv
#define sv_iv			Perl_sv_iv
#undef  Perl_sv_uv
#define Perl_sv_uv		pPerl->Perl_sv_uv
#undef  sv_uv
#define sv_uv			Perl_sv_uv
#undef  Perl_sv_nv
#define Perl_sv_nv		pPerl->Perl_sv_nv
#undef  sv_nv
#define sv_nv			Perl_sv_nv
#undef  Perl_sv_pvn
#define Perl_sv_pvn		pPerl->Perl_sv_pvn
#undef  sv_pvn
#define sv_pvn			Perl_sv_pvn
#undef  Perl_sv_pvutf8n
#define Perl_sv_pvutf8n		pPerl->Perl_sv_pvutf8n
#undef  sv_pvutf8n
#define sv_pvutf8n		Perl_sv_pvutf8n
#undef  Perl_sv_pvbyten
#define Perl_sv_pvbyten		pPerl->Perl_sv_pvbyten
#undef  sv_pvbyten
#define sv_pvbyten		Perl_sv_pvbyten
#undef  Perl_sv_true
#define Perl_sv_true		pPerl->Perl_sv_true
#undef  sv_true
#define sv_true			Perl_sv_true
#undef  Perl_sv_backoff
#define Perl_sv_backoff		pPerl->Perl_sv_backoff
#undef  sv_backoff
#define sv_backoff		Perl_sv_backoff
#undef  Perl_sv_bless
#define Perl_sv_bless		pPerl->Perl_sv_bless
#undef  sv_bless
#define sv_bless		Perl_sv_bless
#undef  Perl_sv_catpvf
#define Perl_sv_catpvf		pPerl->Perl_sv_catpvf
#undef  sv_catpvf
#define sv_catpvf		Perl_sv_catpvf
#undef  Perl_sv_vcatpvf
#define Perl_sv_vcatpvf		pPerl->Perl_sv_vcatpvf
#undef  sv_vcatpvf
#define sv_vcatpvf		Perl_sv_vcatpvf
#undef  Perl_sv_catpv
#define Perl_sv_catpv		pPerl->Perl_sv_catpv
#undef  sv_catpv
#define sv_catpv		Perl_sv_catpv
#undef  Perl_sv_catpvn
#define Perl_sv_catpvn		pPerl->Perl_sv_catpvn
#undef  sv_catpvn
#define sv_catpvn		Perl_sv_catpvn
#undef  Perl_sv_catsv
#define Perl_sv_catsv		pPerl->Perl_sv_catsv
#undef  sv_catsv
#define sv_catsv		Perl_sv_catsv
#undef  Perl_sv_chop
#define Perl_sv_chop		pPerl->Perl_sv_chop
#undef  sv_chop
#define sv_chop			Perl_sv_chop
#undef  Perl_sv_clear
#define Perl_sv_clear		pPerl->Perl_sv_clear
#undef  sv_clear
#define sv_clear		Perl_sv_clear
#undef  Perl_sv_cmp
#define Perl_sv_cmp		pPerl->Perl_sv_cmp
#undef  sv_cmp
#define sv_cmp			Perl_sv_cmp
#undef  Perl_sv_cmp_locale
#define Perl_sv_cmp_locale	pPerl->Perl_sv_cmp_locale
#undef  sv_cmp_locale
#define sv_cmp_locale		Perl_sv_cmp_locale
#if defined(USE_LOCALE_COLLATE)
#undef  Perl_sv_collxfrm
#define Perl_sv_collxfrm	pPerl->Perl_sv_collxfrm
#undef  sv_collxfrm
#define sv_collxfrm		Perl_sv_collxfrm
#endif
#undef  Perl_sv_compile_2op
#define Perl_sv_compile_2op	pPerl->Perl_sv_compile_2op
#undef  sv_compile_2op
#define sv_compile_2op		Perl_sv_compile_2op
#undef  Perl_sv_dec
#define Perl_sv_dec		pPerl->Perl_sv_dec
#undef  sv_dec
#define sv_dec			Perl_sv_dec
#undef  Perl_sv_dump
#define Perl_sv_dump		pPerl->Perl_sv_dump
#undef  sv_dump
#define sv_dump			Perl_sv_dump
#undef  Perl_sv_derived_from
#define Perl_sv_derived_from	pPerl->Perl_sv_derived_from
#undef  sv_derived_from
#define sv_derived_from		Perl_sv_derived_from
#undef  Perl_sv_eq
#define Perl_sv_eq		pPerl->Perl_sv_eq
#undef  sv_eq
#define sv_eq			Perl_sv_eq
#undef  Perl_sv_free
#define Perl_sv_free		pPerl->Perl_sv_free
#undef  sv_free
#define sv_free			Perl_sv_free
#undef  Perl_sv_gets
#define Perl_sv_gets		pPerl->Perl_sv_gets
#undef  sv_gets
#define sv_gets			Perl_sv_gets
#undef  Perl_sv_grow
#define Perl_sv_grow		pPerl->Perl_sv_grow
#undef  sv_grow
#define sv_grow			Perl_sv_grow
#undef  Perl_sv_inc
#define Perl_sv_inc		pPerl->Perl_sv_inc
#undef  sv_inc
#define sv_inc			Perl_sv_inc
#undef  Perl_sv_insert
#define Perl_sv_insert		pPerl->Perl_sv_insert
#undef  sv_insert
#define sv_insert		Perl_sv_insert
#undef  Perl_sv_isa
#define Perl_sv_isa		pPerl->Perl_sv_isa
#undef  sv_isa
#define sv_isa			Perl_sv_isa
#undef  Perl_sv_isobject
#define Perl_sv_isobject	pPerl->Perl_sv_isobject
#undef  sv_isobject
#define sv_isobject		Perl_sv_isobject
#undef  Perl_sv_len
#define Perl_sv_len		pPerl->Perl_sv_len
#undef  sv_len
#define sv_len			Perl_sv_len
#undef  Perl_sv_len_utf8
#define Perl_sv_len_utf8	pPerl->Perl_sv_len_utf8
#undef  sv_len_utf8
#define sv_len_utf8		Perl_sv_len_utf8
#undef  Perl_sv_magic
#define Perl_sv_magic		pPerl->Perl_sv_magic
#undef  sv_magic
#define sv_magic		Perl_sv_magic
#undef  Perl_sv_mortalcopy
#define Perl_sv_mortalcopy	pPerl->Perl_sv_mortalcopy
#undef  sv_mortalcopy
#define sv_mortalcopy		Perl_sv_mortalcopy
#undef  Perl_sv_newmortal
#define Perl_sv_newmortal	pPerl->Perl_sv_newmortal
#undef  sv_newmortal
#define sv_newmortal		Perl_sv_newmortal
#undef  Perl_sv_newref
#define Perl_sv_newref		pPerl->Perl_sv_newref
#undef  sv_newref
#define sv_newref		Perl_sv_newref
#undef  Perl_sv_peek
#define Perl_sv_peek		pPerl->Perl_sv_peek
#undef  sv_peek
#define sv_peek			Perl_sv_peek
#undef  Perl_sv_pos_u2b
#define Perl_sv_pos_u2b		pPerl->Perl_sv_pos_u2b
#undef  sv_pos_u2b
#define sv_pos_u2b		Perl_sv_pos_u2b
#undef  Perl_sv_pos_b2u
#define Perl_sv_pos_b2u		pPerl->Perl_sv_pos_b2u
#undef  sv_pos_b2u
#define sv_pos_b2u		Perl_sv_pos_b2u
#undef  Perl_sv_pvn_force
#define Perl_sv_pvn_force	pPerl->Perl_sv_pvn_force
#undef  sv_pvn_force
#define sv_pvn_force		Perl_sv_pvn_force
#undef  Perl_sv_pvutf8n_force
#define Perl_sv_pvutf8n_force	pPerl->Perl_sv_pvutf8n_force
#undef  sv_pvutf8n_force
#define sv_pvutf8n_force	Perl_sv_pvutf8n_force
#undef  Perl_sv_pvbyten_force
#define Perl_sv_pvbyten_force	pPerl->Perl_sv_pvbyten_force
#undef  sv_pvbyten_force
#define sv_pvbyten_force	Perl_sv_pvbyten_force
#undef  Perl_sv_reftype
#define Perl_sv_reftype		pPerl->Perl_sv_reftype
#undef  sv_reftype
#define sv_reftype		Perl_sv_reftype
#undef  Perl_sv_replace
#define Perl_sv_replace		pPerl->Perl_sv_replace
#undef  sv_replace
#define sv_replace		Perl_sv_replace
#undef  Perl_sv_report_used
#define Perl_sv_report_used	pPerl->Perl_sv_report_used
#undef  sv_report_used
#define sv_report_used		Perl_sv_report_used
#undef  Perl_sv_reset
#define Perl_sv_reset		pPerl->Perl_sv_reset
#undef  sv_reset
#define sv_reset		Perl_sv_reset
#undef  Perl_sv_setpvf
#define Perl_sv_setpvf		pPerl->Perl_sv_setpvf
#undef  sv_setpvf
#define sv_setpvf		Perl_sv_setpvf
#undef  Perl_sv_vsetpvf
#define Perl_sv_vsetpvf		pPerl->Perl_sv_vsetpvf
#undef  sv_vsetpvf
#define sv_vsetpvf		Perl_sv_vsetpvf
#undef  Perl_sv_setiv
#define Perl_sv_setiv		pPerl->Perl_sv_setiv
#undef  sv_setiv
#define sv_setiv		Perl_sv_setiv
#undef  Perl_sv_setpviv
#define Perl_sv_setpviv		pPerl->Perl_sv_setpviv
#undef  sv_setpviv
#define sv_setpviv		Perl_sv_setpviv
#undef  Perl_sv_setuv
#define Perl_sv_setuv		pPerl->Perl_sv_setuv
#undef  sv_setuv
#define sv_setuv		Perl_sv_setuv
#undef  Perl_sv_setnv
#define Perl_sv_setnv		pPerl->Perl_sv_setnv
#undef  sv_setnv
#define sv_setnv		Perl_sv_setnv
#undef  Perl_sv_setref_iv
#define Perl_sv_setref_iv	pPerl->Perl_sv_setref_iv
#undef  sv_setref_iv
#define sv_setref_iv		Perl_sv_setref_iv
#undef  Perl_sv_setref_nv
#define Perl_sv_setref_nv	pPerl->Perl_sv_setref_nv
#undef  sv_setref_nv
#define sv_setref_nv		Perl_sv_setref_nv
#undef  Perl_sv_setref_pv
#define Perl_sv_setref_pv	pPerl->Perl_sv_setref_pv
#undef  sv_setref_pv
#define sv_setref_pv		Perl_sv_setref_pv
#undef  Perl_sv_setref_pvn
#define Perl_sv_setref_pvn	pPerl->Perl_sv_setref_pvn
#undef  sv_setref_pvn
#define sv_setref_pvn		Perl_sv_setref_pvn
#undef  Perl_sv_setpv
#define Perl_sv_setpv		pPerl->Perl_sv_setpv
#undef  sv_setpv
#define sv_setpv		Perl_sv_setpv
#undef  Perl_sv_setpvn
#define Perl_sv_setpvn		pPerl->Perl_sv_setpvn
#undef  sv_setpvn
#define sv_setpvn		Perl_sv_setpvn
#undef  Perl_sv_setsv
#define Perl_sv_setsv		pPerl->Perl_sv_setsv
#undef  sv_setsv
#define sv_setsv		Perl_sv_setsv
#undef  Perl_sv_taint
#define Perl_sv_taint		pPerl->Perl_sv_taint
#undef  sv_taint
#define sv_taint		Perl_sv_taint
#undef  Perl_sv_tainted
#define Perl_sv_tainted		pPerl->Perl_sv_tainted
#undef  sv_tainted
#define sv_tainted		Perl_sv_tainted
#undef  Perl_sv_unmagic
#define Perl_sv_unmagic		pPerl->Perl_sv_unmagic
#undef  sv_unmagic
#define sv_unmagic		Perl_sv_unmagic
#undef  Perl_sv_unref
#define Perl_sv_unref		pPerl->Perl_sv_unref
#undef  sv_unref
#define sv_unref		Perl_sv_unref
#undef  Perl_sv_untaint
#define Perl_sv_untaint		pPerl->Perl_sv_untaint
#undef  sv_untaint
#define sv_untaint		Perl_sv_untaint
#undef  Perl_sv_upgrade
#define Perl_sv_upgrade		pPerl->Perl_sv_upgrade
#undef  sv_upgrade
#define sv_upgrade		Perl_sv_upgrade
#undef  Perl_sv_usepvn
#define Perl_sv_usepvn		pPerl->Perl_sv_usepvn
#undef  sv_usepvn
#define sv_usepvn		Perl_sv_usepvn
#undef  Perl_sv_vcatpvfn
#define Perl_sv_vcatpvfn	pPerl->Perl_sv_vcatpvfn
#undef  sv_vcatpvfn
#define sv_vcatpvfn		Perl_sv_vcatpvfn
#undef  Perl_sv_vsetpvfn
#define Perl_sv_vsetpvfn	pPerl->Perl_sv_vsetpvfn
#undef  sv_vsetpvfn
#define sv_vsetpvfn		Perl_sv_vsetpvfn
#undef  Perl_str_to_version
#define Perl_str_to_version	pPerl->Perl_str_to_version
#undef  str_to_version
#define str_to_version		Perl_str_to_version
#undef  Perl_swash_init
#define Perl_swash_init		pPerl->Perl_swash_init
#undef  swash_init
#define swash_init		Perl_swash_init
#undef  Perl_swash_fetch
#define Perl_swash_fetch	pPerl->Perl_swash_fetch
#undef  swash_fetch
#define swash_fetch		Perl_swash_fetch
#undef  Perl_taint_env
#define Perl_taint_env		pPerl->Perl_taint_env
#undef  taint_env
#define taint_env		Perl_taint_env
#undef  Perl_taint_proper
#define Perl_taint_proper	pPerl->Perl_taint_proper
#undef  taint_proper
#define taint_proper		Perl_taint_proper
#undef  Perl_to_utf8_lower
#define Perl_to_utf8_lower	pPerl->Perl_to_utf8_lower
#undef  to_utf8_lower
#define to_utf8_lower		Perl_to_utf8_lower
#undef  Perl_to_utf8_upper
#define Perl_to_utf8_upper	pPerl->Perl_to_utf8_upper
#undef  to_utf8_upper
#define to_utf8_upper		Perl_to_utf8_upper
#undef  Perl_to_utf8_title
#define Perl_to_utf8_title	pPerl->Perl_to_utf8_title
#undef  to_utf8_title
#define to_utf8_title		Perl_to_utf8_title
#if defined(UNLINK_ALL_VERSIONS)
#undef  Perl_unlnk
#define Perl_unlnk		pPerl->Perl_unlnk
#undef  unlnk
#define unlnk			Perl_unlnk
#endif
#if defined(USE_THREADS)
#undef  Perl_unlock_condpair
#define Perl_unlock_condpair	pPerl->Perl_unlock_condpair
#undef  unlock_condpair
#define unlock_condpair		Perl_unlock_condpair
#endif
#undef  Perl_unsharepvn
#define Perl_unsharepvn		pPerl->Perl_unsharepvn
#undef  unsharepvn
#define unsharepvn		Perl_unsharepvn
#undef  Perl_utf16_to_utf8
#define Perl_utf16_to_utf8	pPerl->Perl_utf16_to_utf8
#undef  utf16_to_utf8
#define utf16_to_utf8		Perl_utf16_to_utf8
#undef  Perl_utf16_to_utf8_reversed
#define Perl_utf16_to_utf8_reversed	pPerl->Perl_utf16_to_utf8_reversed
#undef  utf16_to_utf8_reversed
#define utf16_to_utf8_reversed	Perl_utf16_to_utf8_reversed
#undef  Perl_utf8_length
#define Perl_utf8_length	pPerl->Perl_utf8_length
#undef  utf8_length
#define utf8_length		Perl_utf8_length
#undef  Perl_utf8_distance
#define Perl_utf8_distance	pPerl->Perl_utf8_distance
#undef  utf8_distance
#define utf8_distance		Perl_utf8_distance
#undef  Perl_utf8_hop
#define Perl_utf8_hop		pPerl->Perl_utf8_hop
#undef  utf8_hop
#define utf8_hop		Perl_utf8_hop
#undef  Perl_utf8_to_bytes
#define Perl_utf8_to_bytes	pPerl->Perl_utf8_to_bytes
#undef  utf8_to_bytes
#define utf8_to_bytes		Perl_utf8_to_bytes
#undef  Perl_bytes_from_utf8
#define Perl_bytes_from_utf8	pPerl->Perl_bytes_from_utf8
#undef  bytes_from_utf8
#define bytes_from_utf8		Perl_bytes_from_utf8
#undef  Perl_bytes_to_utf8
#define Perl_bytes_to_utf8	pPerl->Perl_bytes_to_utf8
#undef  bytes_to_utf8
#define bytes_to_utf8		Perl_bytes_to_utf8
#undef  Perl_utf8_to_uv_simple
#define Perl_utf8_to_uv_simple	pPerl->Perl_utf8_to_uv_simple
#undef  utf8_to_uv_simple
#define utf8_to_uv_simple	Perl_utf8_to_uv_simple
#undef  Perl_utf8_to_uv
#define Perl_utf8_to_uv		pPerl->Perl_utf8_to_uv
#undef  utf8_to_uv
#define utf8_to_uv		Perl_utf8_to_uv
#undef  Perl_uv_to_utf8
#define Perl_uv_to_utf8		pPerl->Perl_uv_to_utf8
#undef  uv_to_utf8
#define uv_to_utf8		Perl_uv_to_utf8
#undef  Perl_warn
#define Perl_warn		pPerl->Perl_warn
#undef  warn
#define warn			Perl_warn
#undef  Perl_vwarn
#define Perl_vwarn		pPerl->Perl_vwarn
#undef  vwarn
#define vwarn			Perl_vwarn
#undef  Perl_warner
#define Perl_warner		pPerl->Perl_warner
#undef  warner
#define warner			Perl_warner
#undef  Perl_vwarner
#define Perl_vwarner		pPerl->Perl_vwarner
#undef  vwarner
#define vwarner			Perl_vwarner
#undef  Perl_whichsig
#define Perl_whichsig		pPerl->Perl_whichsig
#undef  whichsig
#define whichsig		Perl_whichsig
#ifdef USE_PURE_BISON
#endif
#if defined(MYMALLOC)
#undef  Perl_dump_mstats
#define Perl_dump_mstats	pPerl->Perl_dump_mstats
#undef  dump_mstats
#define dump_mstats		Perl_dump_mstats
#undef  Perl_get_mstats
#define Perl_get_mstats		pPerl->Perl_get_mstats
#undef  get_mstats
#define get_mstats		Perl_get_mstats
#endif
#undef  Perl_safesysmalloc
#define Perl_safesysmalloc	pPerl->Perl_safesysmalloc
#undef  safesysmalloc
#define safesysmalloc		Perl_safesysmalloc
#undef  Perl_safesyscalloc
#define Perl_safesyscalloc	pPerl->Perl_safesyscalloc
#undef  safesyscalloc
#define safesyscalloc		Perl_safesyscalloc
#undef  Perl_safesysrealloc
#define Perl_safesysrealloc	pPerl->Perl_safesysrealloc
#undef  safesysrealloc
#define safesysrealloc		Perl_safesysrealloc
#undef  Perl_safesysfree
#define Perl_safesysfree	pPerl->Perl_safesysfree
#undef  safesysfree
#define safesysfree		Perl_safesysfree
#if defined(LEAKTEST)
#undef  Perl_safexmalloc
#define Perl_safexmalloc	pPerl->Perl_safexmalloc
#undef  safexmalloc
#define safexmalloc		Perl_safexmalloc
#undef  Perl_safexcalloc
#define Perl_safexcalloc	pPerl->Perl_safexcalloc
#undef  safexcalloc
#define safexcalloc		Perl_safexcalloc
#undef  Perl_safexrealloc
#define Perl_safexrealloc	pPerl->Perl_safexrealloc
#undef  safexrealloc
#define safexrealloc		Perl_safexrealloc
#undef  Perl_safexfree
#define Perl_safexfree		pPerl->Perl_safexfree
#undef  safexfree
#define safexfree		Perl_safexfree
#endif
#if defined(PERL_GLOBAL_STRUCT)
#undef  Perl_GetVars
#define Perl_GetVars		pPerl->Perl_GetVars
#undef  GetVars
#define GetVars			Perl_GetVars
#endif
#undef  Perl_runops_standard
#define Perl_runops_standard	pPerl->Perl_runops_standard
#undef  runops_standard
#define runops_standard		Perl_runops_standard
#undef  Perl_runops_debug
#define Perl_runops_debug	pPerl->Perl_runops_debug
#undef  runops_debug
#define runops_debug		Perl_runops_debug
#if defined(USE_THREADS)
#undef  Perl_sv_lock
#define Perl_sv_lock		pPerl->Perl_sv_lock
#undef  sv_lock
#define sv_lock			Perl_sv_lock
#endif
#undef  Perl_sv_catpvf_mg
#define Perl_sv_catpvf_mg	pPerl->Perl_sv_catpvf_mg
#undef  sv_catpvf_mg
#define sv_catpvf_mg		Perl_sv_catpvf_mg
#undef  Perl_sv_vcatpvf_mg
#define Perl_sv_vcatpvf_mg	pPerl->Perl_sv_vcatpvf_mg
#undef  sv_vcatpvf_mg
#define sv_vcatpvf_mg		Perl_sv_vcatpvf_mg
#undef  Perl_sv_catpv_mg
#define Perl_sv_catpv_mg	pPerl->Perl_sv_catpv_mg
#undef  sv_catpv_mg
#define sv_catpv_mg		Perl_sv_catpv_mg
#undef  Perl_sv_catpvn_mg
#define Perl_sv_catpvn_mg	pPerl->Perl_sv_catpvn_mg
#undef  sv_catpvn_mg
#define sv_catpvn_mg		Perl_sv_catpvn_mg
#undef  Perl_sv_catsv_mg
#define Perl_sv_catsv_mg	pPerl->Perl_sv_catsv_mg
#undef  sv_catsv_mg
#define sv_catsv_mg		Perl_sv_catsv_mg
#undef  Perl_sv_setpvf_mg
#define Perl_sv_setpvf_mg	pPerl->Perl_sv_setpvf_mg
#undef  sv_setpvf_mg
#define sv_setpvf_mg		Perl_sv_setpvf_mg
#undef  Perl_sv_vsetpvf_mg
#define Perl_sv_vsetpvf_mg	pPerl->Perl_sv_vsetpvf_mg
#undef  sv_vsetpvf_mg
#define sv_vsetpvf_mg		Perl_sv_vsetpvf_mg
#undef  Perl_sv_setiv_mg
#define Perl_sv_setiv_mg	pPerl->Perl_sv_setiv_mg
#undef  sv_setiv_mg
#define sv_setiv_mg		Perl_sv_setiv_mg
#undef  Perl_sv_setpviv_mg
#define Perl_sv_setpviv_mg	pPerl->Perl_sv_setpviv_mg
#undef  sv_setpviv_mg
#define sv_setpviv_mg		Perl_sv_setpviv_mg
#undef  Perl_sv_setuv_mg
#define Perl_sv_setuv_mg	pPerl->Perl_sv_setuv_mg
#undef  sv_setuv_mg
#define sv_setuv_mg		Perl_sv_setuv_mg
#undef  Perl_sv_setnv_mg
#define Perl_sv_setnv_mg	pPerl->Perl_sv_setnv_mg
#undef  sv_setnv_mg
#define sv_setnv_mg		Perl_sv_setnv_mg
#undef  Perl_sv_setpv_mg
#define Perl_sv_setpv_mg	pPerl->Perl_sv_setpv_mg
#undef  sv_setpv_mg
#define sv_setpv_mg		Perl_sv_setpv_mg
#undef  Perl_sv_setpvn_mg
#define Perl_sv_setpvn_mg	pPerl->Perl_sv_setpvn_mg
#undef  sv_setpvn_mg
#define sv_setpvn_mg		Perl_sv_setpvn_mg
#undef  Perl_sv_setsv_mg
#define Perl_sv_setsv_mg	pPerl->Perl_sv_setsv_mg
#undef  sv_setsv_mg
#define sv_setsv_mg		Perl_sv_setsv_mg
#undef  Perl_sv_usepvn_mg
#define Perl_sv_usepvn_mg	pPerl->Perl_sv_usepvn_mg
#undef  sv_usepvn_mg
#define sv_usepvn_mg		Perl_sv_usepvn_mg
#undef  Perl_get_vtbl
#define Perl_get_vtbl		pPerl->Perl_get_vtbl
#undef  get_vtbl
#define get_vtbl		Perl_get_vtbl
#undef  Perl_dump_indent
#define Perl_dump_indent	pPerl->Perl_dump_indent
#undef  dump_indent
#define dump_indent		Perl_dump_indent
#undef  Perl_dump_vindent
#define Perl_dump_vindent	pPerl->Perl_dump_vindent
#undef  dump_vindent
#define dump_vindent		Perl_dump_vindent
#undef  Perl_do_gv_dump
#define Perl_do_gv_dump		pPerl->Perl_do_gv_dump
#undef  do_gv_dump
#define do_gv_dump		Perl_do_gv_dump
#undef  Perl_do_gvgv_dump
#define Perl_do_gvgv_dump	pPerl->Perl_do_gvgv_dump
#undef  do_gvgv_dump
#define do_gvgv_dump		Perl_do_gvgv_dump
#undef  Perl_do_hv_dump
#define Perl_do_hv_dump		pPerl->Perl_do_hv_dump
#undef  do_hv_dump
#define do_hv_dump		Perl_do_hv_dump
#undef  Perl_do_magic_dump
#define Perl_do_magic_dump	pPerl->Perl_do_magic_dump
#undef  do_magic_dump
#define do_magic_dump		Perl_do_magic_dump
#undef  Perl_do_op_dump
#define Perl_do_op_dump		pPerl->Perl_do_op_dump
#undef  do_op_dump
#define do_op_dump		Perl_do_op_dump
#undef  Perl_do_pmop_dump
#define Perl_do_pmop_dump	pPerl->Perl_do_pmop_dump
#undef  do_pmop_dump
#define do_pmop_dump		Perl_do_pmop_dump
#undef  Perl_do_sv_dump
#define Perl_do_sv_dump		pPerl->Perl_do_sv_dump
#undef  do_sv_dump
#define do_sv_dump		Perl_do_sv_dump
#undef  Perl_magic_dump
#define Perl_magic_dump		pPerl->Perl_magic_dump
#undef  magic_dump
#define magic_dump		Perl_magic_dump
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
#undef  Perl_default_protect
#define Perl_default_protect	pPerl->Perl_default_protect
#undef  default_protect
#define default_protect		Perl_default_protect
#undef  Perl_vdefault_protect
#define Perl_vdefault_protect	pPerl->Perl_vdefault_protect
#undef  vdefault_protect
#define vdefault_protect	Perl_vdefault_protect
#endif
#undef  Perl_reginitcolors
#define Perl_reginitcolors	pPerl->Perl_reginitcolors
#undef  reginitcolors
#define reginitcolors		Perl_reginitcolors
#undef  Perl_sv_2pv_nolen
#define Perl_sv_2pv_nolen	pPerl->Perl_sv_2pv_nolen
#undef  sv_2pv_nolen
#define sv_2pv_nolen		Perl_sv_2pv_nolen
#undef  Perl_sv_2pvutf8_nolen
#define Perl_sv_2pvutf8_nolen	pPerl->Perl_sv_2pvutf8_nolen
#undef  sv_2pvutf8_nolen
#define sv_2pvutf8_nolen	Perl_sv_2pvutf8_nolen
#undef  Perl_sv_2pvbyte_nolen
#define Perl_sv_2pvbyte_nolen	pPerl->Perl_sv_2pvbyte_nolen
#undef  sv_2pvbyte_nolen
#define sv_2pvbyte_nolen	Perl_sv_2pvbyte_nolen
#undef  Perl_sv_pv
#define Perl_sv_pv		pPerl->Perl_sv_pv
#undef  sv_pv
#define sv_pv			Perl_sv_pv
#undef  Perl_sv_pvutf8
#define Perl_sv_pvutf8		pPerl->Perl_sv_pvutf8
#undef  sv_pvutf8
#define sv_pvutf8		Perl_sv_pvutf8
#undef  Perl_sv_pvbyte
#define Perl_sv_pvbyte		pPerl->Perl_sv_pvbyte
#undef  sv_pvbyte
#define sv_pvbyte		Perl_sv_pvbyte
#undef  Perl_sv_utf8_upgrade
#define Perl_sv_utf8_upgrade	pPerl->Perl_sv_utf8_upgrade
#undef  sv_utf8_upgrade
#define sv_utf8_upgrade		Perl_sv_utf8_upgrade
#undef  Perl_sv_utf8_downgrade
#define Perl_sv_utf8_downgrade	pPerl->Perl_sv_utf8_downgrade
#undef  sv_utf8_downgrade
#define sv_utf8_downgrade	Perl_sv_utf8_downgrade
#undef  Perl_sv_utf8_encode
#define Perl_sv_utf8_encode	pPerl->Perl_sv_utf8_encode
#undef  sv_utf8_encode
#define sv_utf8_encode		Perl_sv_utf8_encode
#undef  Perl_sv_utf8_decode
#define Perl_sv_utf8_decode	pPerl->Perl_sv_utf8_decode
#undef  sv_utf8_decode
#define sv_utf8_decode		Perl_sv_utf8_decode
#undef  Perl_sv_force_normal
#define Perl_sv_force_normal	pPerl->Perl_sv_force_normal
#undef  sv_force_normal
#define sv_force_normal		Perl_sv_force_normal
#undef  Perl_sv_add_backref
#define Perl_sv_add_backref	pPerl->Perl_sv_add_backref
#undef  sv_add_backref
#define sv_add_backref		Perl_sv_add_backref
#undef  Perl_sv_del_backref
#define Perl_sv_del_backref	pPerl->Perl_sv_del_backref
#undef  sv_del_backref
#define sv_del_backref		Perl_sv_del_backref
#undef  Perl_tmps_grow
#define Perl_tmps_grow		pPerl->Perl_tmps_grow
#undef  tmps_grow
#define tmps_grow		Perl_tmps_grow
#undef  Perl_sv_rvweaken
#define Perl_sv_rvweaken	pPerl->Perl_sv_rvweaken
#undef  sv_rvweaken
#define sv_rvweaken		Perl_sv_rvweaken
#undef  Perl_newANONATTRSUB
#define Perl_newANONATTRSUB	pPerl->Perl_newANONATTRSUB
#undef  newANONATTRSUB
#define newANONATTRSUB		Perl_newANONATTRSUB
#undef  Perl_newATTRSUB
#define Perl_newATTRSUB		pPerl->Perl_newATTRSUB
#undef  newATTRSUB
#define newATTRSUB		Perl_newATTRSUB
#undef  Perl_newMYSUB
#define Perl_newMYSUB		pPerl->Perl_newMYSUB
#undef  newMYSUB
#define newMYSUB		Perl_newMYSUB
#if defined(USE_ITHREADS)
#undef  Perl_cx_dup
#define Perl_cx_dup		pPerl->Perl_cx_dup
#undef  cx_dup
#define cx_dup			Perl_cx_dup
#undef  Perl_si_dup
#define Perl_si_dup		pPerl->Perl_si_dup
#undef  si_dup
#define si_dup			Perl_si_dup
#undef  Perl_ss_dup
#define Perl_ss_dup		pPerl->Perl_ss_dup
#undef  ss_dup
#define ss_dup			Perl_ss_dup
#undef  Perl_any_dup
#define Perl_any_dup		pPerl->Perl_any_dup
#undef  any_dup
#define any_dup			Perl_any_dup
#undef  Perl_he_dup
#define Perl_he_dup		pPerl->Perl_he_dup
#undef  he_dup
#define he_dup			Perl_he_dup
#undef  Perl_re_dup
#define Perl_re_dup		pPerl->Perl_re_dup
#undef  re_dup
#define re_dup			Perl_re_dup
#undef  Perl_fp_dup
#define Perl_fp_dup		pPerl->Perl_fp_dup
#undef  fp_dup
#define fp_dup			Perl_fp_dup
#undef  Perl_dirp_dup
#define Perl_dirp_dup		pPerl->Perl_dirp_dup
#undef  dirp_dup
#define dirp_dup		Perl_dirp_dup
#undef  Perl_gp_dup
#define Perl_gp_dup		pPerl->Perl_gp_dup
#undef  gp_dup
#define gp_dup			Perl_gp_dup
#undef  Perl_mg_dup
#define Perl_mg_dup		pPerl->Perl_mg_dup
#undef  mg_dup
#define mg_dup			Perl_mg_dup
#undef  Perl_sv_dup
#define Perl_sv_dup		pPerl->Perl_sv_dup
#undef  sv_dup
#define sv_dup			Perl_sv_dup
#if defined(HAVE_INTERP_INTERN)
#undef  Perl_sys_intern_dup
#define Perl_sys_intern_dup	pPerl->Perl_sys_intern_dup
#undef  sys_intern_dup
#define sys_intern_dup		Perl_sys_intern_dup
#endif
#undef  Perl_ptr_table_new
#define Perl_ptr_table_new	pPerl->Perl_ptr_table_new
#undef  ptr_table_new
#define ptr_table_new		Perl_ptr_table_new
#undef  Perl_ptr_table_fetch
#define Perl_ptr_table_fetch	pPerl->Perl_ptr_table_fetch
#undef  ptr_table_fetch
#define ptr_table_fetch		Perl_ptr_table_fetch
#undef  Perl_ptr_table_store
#define Perl_ptr_table_store	pPerl->Perl_ptr_table_store
#undef  ptr_table_store
#define ptr_table_store		Perl_ptr_table_store
#undef  Perl_ptr_table_split
#define Perl_ptr_table_split	pPerl->Perl_ptr_table_split
#undef  ptr_table_split
#define ptr_table_split		Perl_ptr_table_split
#undef  Perl_ptr_table_clear
#define Perl_ptr_table_clear	pPerl->Perl_ptr_table_clear
#undef  ptr_table_clear
#define ptr_table_clear		Perl_ptr_table_clear
#undef  Perl_ptr_table_free
#define Perl_ptr_table_free	pPerl->Perl_ptr_table_free
#undef  ptr_table_free
#define ptr_table_free		Perl_ptr_table_free
#endif
#if defined(HAVE_INTERP_INTERN)
#undef  Perl_sys_intern_clear
#define Perl_sys_intern_clear	pPerl->Perl_sys_intern_clear
#undef  sys_intern_clear
#define sys_intern_clear	Perl_sys_intern_clear
#undef  Perl_sys_intern_init
#define Perl_sys_intern_init	pPerl->Perl_sys_intern_init
#undef  sys_intern_init
#define sys_intern_init		Perl_sys_intern_init
#endif
#if defined(PERL_OBJECT)
#else
#endif
#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
#  if defined(PL_OP_SLAB_ALLOC)
#  endif
#endif
#if defined(PERL_IN_PERL_C) || defined(PERL_DECL_PROT)
#  if defined(IAMSUID)
#  endif
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
#endif
#  if defined(USE_THREADS)
#  endif
#endif
#if defined(PERL_IN_PP_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
#endif
#endif
#if defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_PP_SYS_C) || defined(PERL_DECL_PROT)
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#  endif
#endif
#if defined(PERL_IN_REGCOMP_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_REGEXEC_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_RUN_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
#  if defined(DEBUGGING)
#  endif
#endif
#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
#if 0
#endif
#  if defined(CRIPPLED_CC)
#  endif
#  if defined(PERL_CR_FILTER)
#  endif
#endif
#if defined(PERL_IN_UNIVERSAL_C) || defined(PERL_DECL_PROT)
#endif
#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
#  if defined(LEAKTEST)
#  endif
#endif
#if defined(PERL_OBJECT)
#endif

#endif  /* PERL_CORE && PERL_OBJECT */
#endif	/* __objXSUB_h__ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\opcode.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!! 
   This file is built by opcode.pl from its data.  Any changes made here
   will be lost!
*/

#define Perl_pp_i_preinc Perl_pp_preinc
#define Perl_pp_i_predec Perl_pp_predec
#define Perl_pp_i_postinc Perl_pp_postinc
#define Perl_pp_i_postdec Perl_pp_postdec


START_EXTERN_C

#ifndef DOINIT
EXT char *PL_op_name[];
#else
EXT char *PL_op_name[] = {
	"null",
	"stub",
	"scalar",
	"pushmark",
	"wantarray",
	"const",
	"gvsv",
	"gv",
	"gelem",
	"padsv",
	"padav",
	"padhv",
	"padany",
	"pushre",
	"rv2gv",
	"rv2sv",
	"av2arylen",
	"rv2cv",
	"anoncode",
	"prototype",
	"refgen",
	"srefgen",
	"ref",
	"bless",
	"backtick",
	"glob",
	"readline",
	"rcatline",
	"regcmaybe",
	"regcreset",
	"regcomp",
	"match",
	"qr",
	"subst",
	"substcont",
	"trans",
	"sassign",
	"aassign",
	"chop",
	"schop",
	"chomp",
	"schomp",
	"defined",
	"undef",
	"study",
	"pos",
	"preinc",
	"i_preinc",
	"predec",
	"i_predec",
	"postinc",
	"i_postinc",
	"postdec",
	"i_postdec",
	"pow",
	"multiply",
	"i_multiply",
	"divide",
	"i_divide",
	"modulo",
	"i_modulo",
	"repeat",
	"add",
	"i_add",
	"subtract",
	"i_subtract",
	"concat",
	"stringify",
	"left_shift",
	"right_shift",
	"lt",
	"i_lt",
	"gt",
	"i_gt",
	"le",
	"i_le",
	"ge",
	"i_ge",
	"eq",
	"i_eq",
	"ne",
	"i_ne",
	"ncmp",
	"i_ncmp",
	"slt",
	"sgt",
	"sle",
	"sge",
	"seq",
	"sne",
	"scmp",
	"bit_and",
	"bit_xor",
	"bit_or",
	"negate",
	"i_negate",
	"not",
	"complement",
	"atan2",
	"sin",
	"cos",
	"rand",
	"srand",
	"exp",
	"log",
	"sqrt",
	"int",
	"hex",
	"oct",
	"abs",
	"length",
	"substr",
	"vec",
	"index",
	"rindex",
	"sprintf",
	"formline",
	"ord",
	"chr",
	"crypt",
	"ucfirst",
	"lcfirst",
	"uc",
	"lc",
	"quotemeta",
	"rv2av",
	"aelemfast",
	"aelem",
	"aslice",
	"each",
	"values",
	"keys",
	"delete",
	"exists",
	"rv2hv",
	"helem",
	"hslice",
	"unpack",
	"pack",
	"split",
	"join",
	"list",
	"lslice",
	"anonlist",
	"anonhash",
	"splice",
	"push",
	"pop",
	"shift",
	"unshift",
	"sort",
	"reverse",
	"grepstart",
	"grepwhile",
	"mapstart",
	"mapwhile",
	"range",
	"flip",
	"flop",
	"and",
	"or",
	"xor",
	"cond_expr",
	"andassign",
	"orassign",
	"method",
	"entersub",
	"leavesub",
	"leavesublv",
	"caller",
	"warn",
	"die",
	"reset",
	"lineseq",
	"nextstate",
	"dbstate",
	"unstack",
	"enter",
	"leave",
	"scope",
	"enteriter",
	"iter",
	"enterloop",
	"leaveloop",
	"return",
	"last",
	"next",
	"redo",
	"dump",
	"goto",
	"exit",
	"open",
	"close",
	"pipe_op",
	"fileno",
	"umask",
	"binmode",
	"tie",
	"untie",
	"tied",
	"dbmopen",
	"dbmclose",
	"sselect",
	"select",
	"getc",
	"read",
	"enterwrite",
	"leavewrite",
	"prtf",
	"print",
	"sysopen",
	"sysseek",
	"sysread",
	"syswrite",
	"send",
	"recv",
	"eof",
	"tell",
	"seek",
	"truncate",
	"fcntl",
	"ioctl",
	"flock",
	"socket",
	"sockpair",
	"bind",
	"connect",
	"listen",
	"accept",
	"shutdown",
	"gsockopt",
	"ssockopt",
	"getsockname",
	"getpeername",
	"lstat",
	"stat",
	"ftrread",
	"ftrwrite",
	"ftrexec",
	"fteread",
	"ftewrite",
	"fteexec",
	"ftis",
	"fteowned",
	"ftrowned",
	"ftzero",
	"ftsize",
	"ftmtime",
	"ftatime",
	"ftctime",
	"ftsock",
	"ftchr",
	"ftblk",
	"ftfile",
	"ftdir",
	"ftpipe",
	"ftlink",
	"ftsuid",
	"ftsgid",
	"ftsvtx",
	"fttty",
	"fttext",
	"ftbinary",
	"chdir",
	"chown",
	"chroot",
	"unlink",
	"chmod",
	"utime",
	"rename",
	"link",
	"symlink",
	"readlink",
	"mkdir",
	"rmdir",
	"open_dir",
	"readdir",
	"telldir",
	"seekdir",
	"rewinddir",
	"closedir",
	"fork",
	"wait",
	"waitpid",
	"system",
	"exec",
	"kill",
	"getppid",
	"getpgrp",
	"setpgrp",
	"getpriority",
	"setpriority",
	"time",
	"tms",
	"localtime",
	"gmtime",
	"alarm",
	"sleep",
	"shmget",
	"shmctl",
	"shmread",
	"shmwrite",
	"msgget",
	"msgctl",
	"msgsnd",
	"msgrcv",
	"semget",
	"semctl",
	"semop",
	"require",
	"dofile",
	"entereval",
	"leaveeval",
	"entertry",
	"leavetry",
	"ghbyname",
	"ghbyaddr",
	"ghostent",
	"gnbyname",
	"gnbyaddr",
	"gnetent",
	"gpbyname",
	"gpbynumber",
	"gprotoent",
	"gsbyname",
	"gsbyport",
	"gservent",
	"shostent",
	"snetent",
	"sprotoent",
	"sservent",
	"ehostent",
	"enetent",
	"eprotoent",
	"eservent",
	"gpwnam",
	"gpwuid",
	"gpwent",
	"spwent",
	"epwent",
	"ggrnam",
	"ggrgid",
	"ggrent",
	"sgrent",
	"egrent",
	"getlogin",
	"syscall",
	"lock",
	"threadsv",
	"setstate",
	"method_named",
};
#endif

#ifndef DOINIT
EXT char *PL_op_desc[];
#else
EXT char *PL_op_desc[] = {
	"null operation",
	"stub",
	"scalar",
	"pushmark",
	"wantarray",
	"constant item",
	"scalar variable",
	"glob value",
	"glob elem",
	"private variable",
	"private array",
	"private hash",
	"private value",
	"push regexp",
	"ref-to-glob cast",
	"scalar dereference",
	"array length",
	"subroutine dereference",
	"anonymous subroutine",
	"subroutine prototype",
	"reference constructor",
	"single ref constructor",
	"reference-type operator",
	"bless",
	"quoted execution (``, qx)",
	"glob",
	"<HANDLE>",
	"append I/O operator",
	"regexp internal guard",
	"regexp internal reset",
	"regexp compilation",
	"pattern match (m//)",
	"pattern quote (qr//)",
	"substitution (s///)",
	"substitution iterator",
	"transliteration (tr///)",
	"scalar assignment",
	"list assignment",
	"chop",
	"scalar chop",
	"chomp",
	"scalar chomp",
	"defined operator",
	"undef operator",
	"study",
	"match position",
	"preincrement (++)",
	"integer preincrement (++)",
	"predecrement (--)",
	"integer predecrement (--)",
	"postincrement (++)",
	"integer postincrement (++)",
	"postdecrement (--)",
	"integer postdecrement (--)",
	"exponentiation (**)",
	"multiplication (*)",
	"integer multiplication (*)",
	"division (/)",
	"integer division (/)",
	"modulus (%)",
	"integer modulus (%)",
	"repeat (x)",
	"addition (+)",
	"integer addition (+)",
	"subtraction (-)",
	"integer subtraction (-)",
	"concatenation (.) or string",
	"string",
	"left bitshift (<<)",
	"right bitshift (>>)",
	"numeric lt (<)",
	"integer lt (<)",
	"numeric gt (>)",
	"integer gt (>)",
	"numeric le (<=)",
	"integer le (<=)",
	"numeric ge (>=)",
	"integer ge (>=)",
	"numeric eq (==)",
	"integer eq (==)",
	"numeric ne (!=)",
	"integer ne (!=)",
	"numeric comparison (<=>)",
	"integer comparison (<=>)",
	"string lt",
	"string gt",
	"string le",
	"string ge",
	"string eq",
	"string ne",
	"string comparison (cmp)",
	"bitwise and (&)",
	"bitwise xor (^)",
	"bitwise or (|)",
	"negation (-)",
	"integer negation (-)",
	"not",
	"1's complement (~)",
	"atan2",
	"sin",
	"cos",
	"rand",
	"srand",
	"exp",
	"log",
	"sqrt",
	"int",
	"hex",
	"oct",
	"abs",
	"length",
	"substr",
	"vec",
	"index",
	"rindex",
	"sprintf",
	"formline",
	"ord",
	"chr",
	"crypt",
	"ucfirst",
	"lcfirst",
	"uc",
	"lc",
	"quotemeta",
	"array dereference",
	"constant array element",
	"array element",
	"array slice",
	"each",
	"values",
	"keys",
	"delete",
	"exists",
	"hash dereference",
	"hash element",
	"hash slice",
	"unpack",
	"pack",
	"split",
	"join or string",
	"list",
	"list slice",
	"anonymous list ([])",
	"anonymous hash ({})",
	"splice",
	"push",
	"pop",
	"shift",
	"unshift",
	"sort",
	"reverse",
	"grep",
	"grep iterator",
	"map",
	"map iterator",
	"flipflop",
	"range (or flip)",
	"range (or flop)",
	"logical and (&&)",
	"logical or (||)",
	"logical xor",
	"conditional expression",
	"logical and assignment (&&=)",
	"logical or assignment (||=)",
	"method lookup",
	"subroutine entry",
	"subroutine exit",
	"lvalue subroutine return",
	"caller",
	"warn",
	"die",
	"symbol reset",
	"line sequence",
	"next statement",
	"debug next statement",
	"iteration finalizer",
	"block entry",
	"block exit",
	"block",
	"foreach loop entry",
	"foreach loop iterator",
	"loop entry",
	"loop exit",
	"return",
	"last",
	"next",
	"redo",
	"dump",
	"goto",
	"exit",
	"open",
	"close",
	"pipe",
	"fileno",
	"umask",
	"binmode",
	"tie",
	"untie",
	"tied",
	"dbmopen",
	"dbmclose",
	"select system call",
	"select",
	"getc",
	"read",
	"write",
	"write exit",
	"printf",
	"print",
	"sysopen",
	"sysseek",
	"sysread",
	"syswrite",
	"send",
	"recv",
	"eof",
	"tell",
	"seek",
	"truncate",
	"fcntl",
	"ioctl",
	"flock",
	"socket",
	"socketpair",
	"bind",
	"connect",
	"listen",
	"accept",
	"shutdown",
	"getsockopt",
	"setsockopt",
	"getsockname",
	"getpeername",
	"lstat",
	"stat",
	"-R",
	"-W",
	"-X",
	"-r",
	"-w",
	"-x",
	"-e",
	"-O",
	"-o",
	"-z",
	"-s",
	"-M",
	"-A",
	"-C",
	"-S",
	"-c",
	"-b",
	"-f",
	"-d",
	"-p",
	"-l",
	"-u",
	"-g",
	"-k",
	"-t",
	"-T",
	"-B",
	"chdir",
	"chown",
	"chroot",
	"unlink",
	"chmod",
	"utime",
	"rename",
	"link",
	"symlink",
	"readlink",
	"mkdir",
	"rmdir",
	"opendir",
	"readdir",
	"telldir",
	"seekdir",
	"rewinddir",
	"closedir",
	"fork",
	"wait",
	"waitpid",
	"system",
	"exec",
	"kill",
	"getppid",
	"getpgrp",
	"setpgrp",
	"getpriority",
	"setpriority",
	"time",
	"times",
	"localtime",
	"gmtime",
	"alarm",
	"sleep",
	"shmget",
	"shmctl",
	"shmread",
	"shmwrite",
	"msgget",
	"msgctl",
	"msgsnd",
	"msgrcv",
	"semget",
	"semctl",
	"semop",
	"require",
	"do \"file\"",
	"eval \"string\"",
	"eval \"string\" exit",
	"eval {block}",
	"eval {block} exit",
	"gethostbyname",
	"gethostbyaddr",
	"gethostent",
	"getnetbyname",
	"getnetbyaddr",
	"getnetent",
	"getprotobyname",
	"getprotobynumber",
	"getprotoent",
	"getservbyname",
	"getservbyport",
	"getservent",
	"sethostent",
	"setnetent",
	"setprotoent",
	"setservent",
	"endhostent",
	"endnetent",
	"endprotoent",
	"endservent",
	"getpwnam",
	"getpwuid",
	"getpwent",
	"setpwent",
	"endpwent",
	"getgrnam",
	"getgrgid",
	"getgrent",
	"setgrent",
	"endgrent",
	"getlogin",
	"syscall",
	"lock",
	"per-thread value",
	"set statement info",
	"method with known name",
};
#endif

END_EXTERN_C


START_EXTERN_C

#ifndef DOINIT
EXT OP * (CPERLscope(*PL_ppaddr)[])(pTHX);
#else
EXT OP * (CPERLscope(*PL_ppaddr)[])(pTHX) = {
	MEMBER_TO_FPTR(Perl_pp_null),
	MEMBER_TO_FPTR(Perl_pp_stub),
	MEMBER_TO_FPTR(Perl_pp_scalar),
	MEMBER_TO_FPTR(Perl_pp_pushmark),
	MEMBER_TO_FPTR(Perl_pp_wantarray),
	MEMBER_TO_FPTR(Perl_pp_const),
	MEMBER_TO_FPTR(Perl_pp_gvsv),
	MEMBER_TO_FPTR(Perl_pp_gv),
	MEMBER_TO_FPTR(Perl_pp_gelem),
	MEMBER_TO_FPTR(Perl_pp_padsv),
	MEMBER_TO_FPTR(Perl_pp_padav),
	MEMBER_TO_FPTR(Perl_pp_padhv),
	MEMBER_TO_FPTR(Perl_pp_padany),
	MEMBER_TO_FPTR(Perl_pp_pushre),
	MEMBER_TO_FPTR(Perl_pp_rv2gv),
	MEMBER_TO_FPTR(Perl_pp_rv2sv),
	MEMBER_TO_FPTR(Perl_pp_av2arylen),
	MEMBER_TO_FPTR(Perl_pp_rv2cv),
	MEMBER_TO_FPTR(Perl_pp_anoncode),
	MEMBER_TO_FPTR(Perl_pp_prototype),
	MEMBER_TO_FPTR(Perl_pp_refgen),
	MEMBER_TO_FPTR(Perl_pp_srefgen),
	MEMBER_TO_FPTR(Perl_pp_ref),
	MEMBER_TO_FPTR(Perl_pp_bless),
	MEMBER_TO_FPTR(Perl_pp_backtick),
	MEMBER_TO_FPTR(Perl_pp_glob),
	MEMBER_TO_FPTR(Perl_pp_readline),
	MEMBER_TO_FPTR(Perl_pp_rcatline),
	MEMBER_TO_FPTR(Perl_pp_regcmaybe),
	MEMBER_TO_FPTR(Perl_pp_regcreset),
	MEMBER_TO_FPTR(Perl_pp_regcomp),
	MEMBER_TO_FPTR(Perl_pp_match),
	MEMBER_TO_FPTR(Perl_pp_qr),
	MEMBER_TO_FPTR(Perl_pp_subst),
	MEMBER_TO_FPTR(Perl_pp_substcont),
	MEMBER_TO_FPTR(Perl_pp_trans),
	MEMBER_TO_FPTR(Perl_pp_sassign),
	MEMBER_TO_FPTR(Perl_pp_aassign),
	MEMBER_TO_FPTR(Perl_pp_chop),
	MEMBER_TO_FPTR(Perl_pp_schop),
	MEMBER_TO_FPTR(Perl_pp_chomp),
	MEMBER_TO_FPTR(Perl_pp_schomp),
	MEMBER_TO_FPTR(Perl_pp_defined),
	MEMBER_TO_FPTR(Perl_pp_undef),
	MEMBER_TO_FPTR(Perl_pp_study),
	MEMBER_TO_FPTR(Perl_pp_pos),
	MEMBER_TO_FPTR(Perl_pp_preinc),
	MEMBER_TO_FPTR(Perl_pp_i_preinc),
	MEMBER_TO_FPTR(Perl_pp_predec),
	MEMBER_TO_FPTR(Perl_pp_i_predec),
	MEMBER_TO_FPTR(Perl_pp_postinc),
	MEMBER_TO_FPTR(Perl_pp_i_postinc),
	MEMBER_TO_FPTR(Perl_pp_postdec),
	MEMBER_TO_FPTR(Perl_pp_i_postdec),
	MEMBER_TO_FPTR(Perl_pp_pow),
	MEMBER_TO_FPTR(Perl_pp_multiply),
	MEMBER_TO_FPTR(Perl_pp_i_multiply),
	MEMBER_TO_FPTR(Perl_pp_divide),
	MEMBER_TO_FPTR(Perl_pp_i_divide),
	MEMBER_TO_FPTR(Perl_pp_modulo),
	MEMBER_TO_FPTR(Perl_pp_i_modulo),
	MEMBER_TO_FPTR(Perl_pp_repeat),
	MEMBER_TO_FPTR(Perl_pp_add),
	MEMBER_TO_FPTR(Perl_pp_i_add),
	MEMBER_TO_FPTR(Perl_pp_subtract),
	MEMBER_TO_FPTR(Perl_pp_i_subtract),
	MEMBER_TO_FPTR(Perl_pp_concat),
	MEMBER_TO_FPTR(Perl_pp_stringify),
	MEMBER_TO_FPTR(Perl_pp_left_shift),
	MEMBER_TO_FPTR(Perl_pp_right_shift),
	MEMBER_TO_FPTR(Perl_pp_lt),
	MEMBER_TO_FPTR(Perl_pp_i_lt),
	MEMBER_TO_FPTR(Perl_pp_gt),
	MEMBER_TO_FPTR(Perl_pp_i_gt),
	MEMBER_TO_FPTR(Perl_pp_le),
	MEMBER_TO_FPTR(Perl_pp_i_le),
	MEMBER_TO_FPTR(Perl_pp_ge),
	MEMBER_TO_FPTR(Perl_pp_i_ge),
	MEMBER_TO_FPTR(Perl_pp_eq),
	MEMBER_TO_FPTR(Perl_pp_i_eq),
	MEMBER_TO_FPTR(Perl_pp_ne),
	MEMBER_TO_FPTR(Perl_pp_i_ne),
	MEMBER_TO_FPTR(Perl_pp_ncmp),
	MEMBER_TO_FPTR(Perl_pp_i_ncmp),
	MEMBER_TO_FPTR(Perl_pp_slt),
	MEMBER_TO_FPTR(Perl_pp_sgt),
	MEMBER_TO_FPTR(Perl_pp_sle),
	MEMBER_TO_FPTR(Perl_pp_sge),
	MEMBER_TO_FPTR(Perl_pp_seq),
	MEMBER_TO_FPTR(Perl_pp_sne),
	MEMBER_TO_FPTR(Perl_pp_scmp),
	MEMBER_TO_FPTR(Perl_pp_bit_and),
	MEMBER_TO_FPTR(Perl_pp_bit_xor),
	MEMBER_TO_FPTR(Perl_pp_bit_or),
	MEMBER_TO_FPTR(Perl_pp_negate),
	MEMBER_TO_FPTR(Perl_pp_i_negate),
	MEMBER_TO_FPTR(Perl_pp_not),
	MEMBER_TO_FPTR(Perl_pp_complement),
	MEMBER_TO_FPTR(Perl_pp_atan2),
	MEMBER_TO_FPTR(Perl_pp_sin),
	MEMBER_TO_FPTR(Perl_pp_cos),
	MEMBER_TO_FPTR(Perl_pp_rand),
	MEMBER_TO_FPTR(Perl_pp_srand),
	MEMBER_TO_FPTR(Perl_pp_exp),
	MEMBER_TO_FPTR(Perl_pp_log),
	MEMBER_TO_FPTR(Perl_pp_sqrt),
	MEMBER_TO_FPTR(Perl_pp_int),
	MEMBER_TO_FPTR(Perl_pp_hex),
	MEMBER_TO_FPTR(Perl_pp_oct),
	MEMBER_TO_FPTR(Perl_pp_abs),
	MEMBER_TO_FPTR(Perl_pp_length),
	MEMBER_TO_FPTR(Perl_pp_substr),
	MEMBER_TO_FPTR(Perl_pp_vec),
	MEMBER_TO_FPTR(Perl_pp_index),
	MEMBER_TO_FPTR(Perl_pp_rindex),
	MEMBER_TO_FPTR(Perl_pp_sprintf),
	MEMBER_TO_FPTR(Perl_pp_formline),
	MEMBER_TO_FPTR(Perl_pp_ord),
	MEMBER_TO_FPTR(Perl_pp_chr),
	MEMBER_TO_FPTR(Perl_pp_crypt),
	MEMBER_TO_FPTR(Perl_pp_ucfirst),
	MEMBER_TO_FPTR(Perl_pp_lcfirst),
	MEMBER_TO_FPTR(Perl_pp_uc),
	MEMBER_TO_FPTR(Perl_pp_lc),
	MEMBER_TO_FPTR(Perl_pp_quotemeta),
	MEMBER_TO_FPTR(Perl_pp_rv2av),
	MEMBER_TO_FPTR(Perl_pp_aelemfast),
	MEMBER_TO_FPTR(Perl_pp_aelem),
	MEMBER_TO_FPTR(Perl_pp_aslice),
	MEMBER_TO_FPTR(Perl_pp_each),
	MEMBER_TO_FPTR(Perl_pp_values),
	MEMBER_TO_FPTR(Perl_pp_keys),
	MEMBER_TO_FPTR(Perl_pp_delete),
	MEMBER_TO_FPTR(Perl_pp_exists),
	MEMBER_TO_FPTR(Perl_pp_rv2hv),
	MEMBER_TO_FPTR(Perl_pp_helem),
	MEMBER_TO_FPTR(Perl_pp_hslice),
	MEMBER_TO_FPTR(Perl_pp_unpack),
	MEMBER_TO_FPTR(Perl_pp_pack),
	MEMBER_TO_FPTR(Perl_pp_split),
	MEMBER_TO_FPTR(Perl_pp_join),
	MEMBER_TO_FPTR(Perl_pp_list),
	MEMBER_TO_FPTR(Perl_pp_lslice),
	MEMBER_TO_FPTR(Perl_pp_anonlist),
	MEMBER_TO_FPTR(Perl_pp_anonhash),
	MEMBER_TO_FPTR(Perl_pp_splice),
	MEMBER_TO_FPTR(Perl_pp_push),
	MEMBER_TO_FPTR(Perl_pp_pop),
	MEMBER_TO_FPTR(Perl_pp_shift),
	MEMBER_TO_FPTR(Perl_pp_unshift),
	MEMBER_TO_FPTR(Perl_pp_sort),
	MEMBER_TO_FPTR(Perl_pp_reverse),
	MEMBER_TO_FPTR(Perl_pp_grepstart),
	MEMBER_TO_FPTR(Perl_pp_grepwhile),
	MEMBER_TO_FPTR(Perl_pp_mapstart),
	MEMBER_TO_FPTR(Perl_pp_mapwhile),
	MEMBER_TO_FPTR(Perl_pp_range),
	MEMBER_TO_FPTR(Perl_pp_flip),
	MEMBER_TO_FPTR(Perl_pp_flop),
	MEMBER_TO_FPTR(Perl_pp_and),
	MEMBER_TO_FPTR(Perl_pp_or),
	MEMBER_TO_FPTR(Perl_pp_xor),
	MEMBER_TO_FPTR(Perl_pp_cond_expr),
	MEMBER_TO_FPTR(Perl_pp_andassign),
	MEMBER_TO_FPTR(Perl_pp_orassign),
	MEMBER_TO_FPTR(Perl_pp_method),
	MEMBER_TO_FPTR(Perl_pp_entersub),
	MEMBER_TO_FPTR(Perl_pp_leavesub),
	MEMBER_TO_FPTR(Perl_pp_leavesublv),
	MEMBER_TO_FPTR(Perl_pp_caller),
	MEMBER_TO_FPTR(Perl_pp_warn),
	MEMBER_TO_FPTR(Perl_pp_die),
	MEMBER_TO_FPTR(Perl_pp_reset),
	MEMBER_TO_FPTR(Perl_pp_lineseq),
	MEMBER_TO_FPTR(Perl_pp_nextstate),
	MEMBER_TO_FPTR(Perl_pp_dbstate),
	MEMBER_TO_FPTR(Perl_pp_unstack),
	MEMBER_TO_FPTR(Perl_pp_enter),
	MEMBER_TO_FPTR(Perl_pp_leave),
	MEMBER_TO_FPTR(Perl_pp_scope),
	MEMBER_TO_FPTR(Perl_pp_enteriter),
	MEMBER_TO_FPTR(Perl_pp_iter),
	MEMBER_TO_FPTR(Perl_pp_enterloop),
	MEMBER_TO_FPTR(Perl_pp_leaveloop),
	MEMBER_TO_FPTR(Perl_pp_return),
	MEMBER_TO_FPTR(Perl_pp_last),
	MEMBER_TO_FPTR(Perl_pp_next),
	MEMBER_TO_FPTR(Perl_pp_redo),
	MEMBER_TO_FPTR(Perl_pp_dump),
	MEMBER_TO_FPTR(Perl_pp_goto),
	MEMBER_TO_FPTR(Perl_pp_exit),
	MEMBER_TO_FPTR(Perl_pp_open),
	MEMBER_TO_FPTR(Perl_pp_close),
	MEMBER_TO_FPTR(Perl_pp_pipe_op),
	MEMBER_TO_FPTR(Perl_pp_fileno),
	MEMBER_TO_FPTR(Perl_pp_umask),
	MEMBER_TO_FPTR(Perl_pp_binmode),
	MEMBER_TO_FPTR(Perl_pp_tie),
	MEMBER_TO_FPTR(Perl_pp_untie),
	MEMBER_TO_FPTR(Perl_pp_tied),
	MEMBER_TO_FPTR(Perl_pp_dbmopen),
	MEMBER_TO_FPTR(Perl_pp_dbmclose),
	MEMBER_TO_FPTR(Perl_pp_sselect),
	MEMBER_TO_FPTR(Perl_pp_select),
	MEMBER_TO_FPTR(Perl_pp_getc),
	MEMBER_TO_FPTR(Perl_pp_read),
	MEMBER_TO_FPTR(Perl_pp_enterwrite),
	MEMBER_TO_FPTR(Perl_pp_leavewrite),
	MEMBER_TO_FPTR(Perl_pp_prtf),
	MEMBER_TO_FPTR(Perl_pp_print),
	MEMBER_TO_FPTR(Perl_pp_sysopen),
	MEMBER_TO_FPTR(Perl_pp_sysseek),
	MEMBER_TO_FPTR(Perl_pp_sysread),
	MEMBER_TO_FPTR(Perl_pp_syswrite),
	MEMBER_TO_FPTR(Perl_pp_send),
	MEMBER_TO_FPTR(Perl_pp_recv),
	MEMBER_TO_FPTR(Perl_pp_eof),
	MEMBER_TO_FPTR(Perl_pp_tell),
	MEMBER_TO_FPTR(Perl_pp_seek),
	MEMBER_TO_FPTR(Perl_pp_truncate),
	MEMBER_TO_FPTR(Perl_pp_fcntl),
	MEMBER_TO_FPTR(Perl_pp_ioctl),
	MEMBER_TO_FPTR(Perl_pp_flock),
	MEMBER_TO_FPTR(Perl_pp_socket),
	MEMBER_TO_FPTR(Perl_pp_sockpair),
	MEMBER_TO_FPTR(Perl_pp_bind),
	MEMBER_TO_FPTR(Perl_pp_connect),
	MEMBER_TO_FPTR(Perl_pp_listen),
	MEMBER_TO_FPTR(Perl_pp_accept),
	MEMBER_TO_FPTR(Perl_pp_shutdown),
	MEMBER_TO_FPTR(Perl_pp_gsockopt),
	MEMBER_TO_FPTR(Perl_pp_ssockopt),
	MEMBER_TO_FPTR(Perl_pp_getsockname),
	MEMBER_TO_FPTR(Perl_pp_getpeername),
	MEMBER_TO_FPTR(Perl_pp_lstat),
	MEMBER_TO_FPTR(Perl_pp_stat),
	MEMBER_TO_FPTR(Perl_pp_ftrread),
	MEMBER_TO_FPTR(Perl_pp_ftrwrite),
	MEMBER_TO_FPTR(Perl_pp_ftrexec),
	MEMBER_TO_FPTR(Perl_pp_fteread),
	MEMBER_TO_FPTR(Perl_pp_ftewrite),
	MEMBER_TO_FPTR(Perl_pp_fteexec),
	MEMBER_TO_FPTR(Perl_pp_ftis),
	MEMBER_TO_FPTR(Perl_pp_fteowned),
	MEMBER_TO_FPTR(Perl_pp_ftrowned),
	MEMBER_TO_FPTR(Perl_pp_ftzero),
	MEMBER_TO_FPTR(Perl_pp_ftsize),
	MEMBER_TO_FPTR(Perl_pp_ftmtime),
	MEMBER_TO_FPTR(Perl_pp_ftatime),
	MEMBER_TO_FPTR(Perl_pp_ftctime),
	MEMBER_TO_FPTR(Perl_pp_ftsock),
	MEMBER_TO_FPTR(Perl_pp_ftchr),
	MEMBER_TO_FPTR(Perl_pp_ftblk),
	MEMBER_TO_FPTR(Perl_pp_ftfile),
	MEMBER_TO_FPTR(Perl_pp_ftdir),
	MEMBER_TO_FPTR(Perl_pp_ftpipe),
	MEMBER_TO_FPTR(Perl_pp_ftlink),
	MEMBER_TO_FPTR(Perl_pp_ftsuid),
	MEMBER_TO_FPTR(Perl_pp_ftsgid),
	MEMBER_TO_FPTR(Perl_pp_ftsvtx),
	MEMBER_TO_FPTR(Perl_pp_fttty),
	MEMBER_TO_FPTR(Perl_pp_fttext),
	MEMBER_TO_FPTR(Perl_pp_ftbinary),
	MEMBER_TO_FPTR(Perl_pp_chdir),
	MEMBER_TO_FPTR(Perl_pp_chown),
	MEMBER_TO_FPTR(Perl_pp_chroot),
	MEMBER_TO_FPTR(Perl_pp_unlink),
	MEMBER_TO_FPTR(Perl_pp_chmod),
	MEMBER_TO_FPTR(Perl_pp_utime),
	MEMBER_TO_FPTR(Perl_pp_rename),
	MEMBER_TO_FPTR(Perl_pp_link),
	MEMBER_TO_FPTR(Perl_pp_symlink),
	MEMBER_TO_FPTR(Perl_pp_readlink),
	MEMBER_TO_FPTR(Perl_pp_mkdir),
	MEMBER_TO_FPTR(Perl_pp_rmdir),
	MEMBER_TO_FPTR(Perl_pp_open_dir),
	MEMBER_TO_FPTR(Perl_pp_readdir),
	MEMBER_TO_FPTR(Perl_pp_telldir),
	MEMBER_TO_FPTR(Perl_pp_seekdir),
	MEMBER_TO_FPTR(Perl_pp_rewinddir),
	MEMBER_TO_FPTR(Perl_pp_closedir),
	MEMBER_TO_FPTR(Perl_pp_fork),
	MEMBER_TO_FPTR(Perl_pp_wait),
	MEMBER_TO_FPTR(Perl_pp_waitpid),
	MEMBER_TO_FPTR(Perl_pp_system),
	MEMBER_TO_FPTR(Perl_pp_exec),
	MEMBER_TO_FPTR(Perl_pp_kill),
	MEMBER_TO_FPTR(Perl_pp_getppid),
	MEMBER_TO_FPTR(Perl_pp_getpgrp),
	MEMBER_TO_FPTR(Perl_pp_setpgrp),
	MEMBER_TO_FPTR(Perl_pp_getpriority),
	MEMBER_TO_FPTR(Perl_pp_setpriority),
	MEMBER_TO_FPTR(Perl_pp_time),
	MEMBER_TO_FPTR(Perl_pp_tms),
	MEMBER_TO_FPTR(Perl_pp_localtime),
	MEMBER_TO_FPTR(Perl_pp_gmtime),
	MEMBER_TO_FPTR(Perl_pp_alarm),
	MEMBER_TO_FPTR(Perl_pp_sleep),
	MEMBER_TO_FPTR(Perl_pp_shmget),
	MEMBER_TO_FPTR(Perl_pp_shmctl),
	MEMBER_TO_FPTR(Perl_pp_shmread),
	MEMBER_TO_FPTR(Perl_pp_shmwrite),
	MEMBER_TO_FPTR(Perl_pp_msgget),
	MEMBER_TO_FPTR(Perl_pp_msgctl),
	MEMBER_TO_FPTR(Perl_pp_msgsnd),
	MEMBER_TO_FPTR(Perl_pp_msgrcv),
	MEMBER_TO_FPTR(Perl_pp_semget),
	MEMBER_TO_FPTR(Perl_pp_semctl),
	MEMBER_TO_FPTR(Perl_pp_semop),
	MEMBER_TO_FPTR(Perl_pp_require),
	MEMBER_TO_FPTR(Perl_pp_dofile),
	MEMBER_TO_FPTR(Perl_pp_entereval),
	MEMBER_TO_FPTR(Perl_pp_leaveeval),
	MEMBER_TO_FPTR(Perl_pp_entertry),
	MEMBER_TO_FPTR(Perl_pp_leavetry),
	MEMBER_TO_FPTR(Perl_pp_ghbyname),
	MEMBER_TO_FPTR(Perl_pp_ghbyaddr),
	MEMBER_TO_FPTR(Perl_pp_ghostent),
	MEMBER_TO_FPTR(Perl_pp_gnbyname),
	MEMBER_TO_FPTR(Perl_pp_gnbyaddr),
	MEMBER_TO_FPTR(Perl_pp_gnetent),
	MEMBER_TO_FPTR(Perl_pp_gpbyname),
	MEMBER_TO_FPTR(Perl_pp_gpbynumber),
	MEMBER_TO_FPTR(Perl_pp_gprotoent),
	MEMBER_TO_FPTR(Perl_pp_gsbyname),
	MEMBER_TO_FPTR(Perl_pp_gsbyport),
	MEMBER_TO_FPTR(Perl_pp_gservent),
	MEMBER_TO_FPTR(Perl_pp_shostent),
	MEMBER_TO_FPTR(Perl_pp_snetent),
	MEMBER_TO_FPTR(Perl_pp_sprotoent),
	MEMBER_TO_FPTR(Perl_pp_sservent),
	MEMBER_TO_FPTR(Perl_pp_ehostent),
	MEMBER_TO_FPTR(Perl_pp_enetent),
	MEMBER_TO_FPTR(Perl_pp_eprotoent),
	MEMBER_TO_FPTR(Perl_pp_eservent),
	MEMBER_TO_FPTR(Perl_pp_gpwnam),
	MEMBER_TO_FPTR(Perl_pp_gpwuid),
	MEMBER_TO_FPTR(Perl_pp_gpwent),
	MEMBER_TO_FPTR(Perl_pp_spwent),
	MEMBER_TO_FPTR(Perl_pp_epwent),
	MEMBER_TO_FPTR(Perl_pp_ggrnam),
	MEMBER_TO_FPTR(Perl_pp_ggrgid),
	MEMBER_TO_FPTR(Perl_pp_ggrent),
	MEMBER_TO_FPTR(Perl_pp_sgrent),
	MEMBER_TO_FPTR(Perl_pp_egrent),
	MEMBER_TO_FPTR(Perl_pp_getlogin),
	MEMBER_TO_FPTR(Perl_pp_syscall),
	MEMBER_TO_FPTR(Perl_pp_lock),
	MEMBER_TO_FPTR(Perl_pp_threadsv),
	MEMBER_TO_FPTR(Perl_pp_setstate),
	MEMBER_TO_FPTR(Perl_pp_method_named),
};
#endif

#ifndef DOINIT
EXT OP * (CPERLscope(*PL_check)[]) (pTHX_ OP *op);
#else
EXT OP * (CPERLscope(*PL_check)[]) (pTHX_ OP *op) = {
	MEMBER_TO_FPTR(Perl_ck_null),	/* null */
	MEMBER_TO_FPTR(Perl_ck_null),	/* stub */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* scalar */
	MEMBER_TO_FPTR(Perl_ck_null),	/* pushmark */
	MEMBER_TO_FPTR(Perl_ck_null),	/* wantarray */
	MEMBER_TO_FPTR(Perl_ck_svconst),	/* const */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gvsv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gelem */
	MEMBER_TO_FPTR(Perl_ck_null),	/* padsv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* padav */
	MEMBER_TO_FPTR(Perl_ck_null),	/* padhv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* padany */
	MEMBER_TO_FPTR(Perl_ck_null),	/* pushre */
	MEMBER_TO_FPTR(Perl_ck_rvconst),	/* rv2gv */
	MEMBER_TO_FPTR(Perl_ck_rvconst),	/* rv2sv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* av2arylen */
	MEMBER_TO_FPTR(Perl_ck_rvconst),	/* rv2cv */
	MEMBER_TO_FPTR(Perl_ck_anoncode),	/* anoncode */
	MEMBER_TO_FPTR(Perl_ck_null),	/* prototype */
	MEMBER_TO_FPTR(Perl_ck_spair),	/* refgen */
	MEMBER_TO_FPTR(Perl_ck_null),	/* srefgen */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ref */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* bless */
	MEMBER_TO_FPTR(Perl_ck_open),	/* backtick */
	MEMBER_TO_FPTR(Perl_ck_glob),	/* glob */
	MEMBER_TO_FPTR(Perl_ck_null),	/* readline */
	MEMBER_TO_FPTR(Perl_ck_null),	/* rcatline */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* regcmaybe */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* regcreset */
	MEMBER_TO_FPTR(Perl_ck_null),	/* regcomp */
	MEMBER_TO_FPTR(Perl_ck_match),	/* match */
	MEMBER_TO_FPTR(Perl_ck_match),	/* qr */
	MEMBER_TO_FPTR(Perl_ck_null),	/* subst */
	MEMBER_TO_FPTR(Perl_ck_null),	/* substcont */
	MEMBER_TO_FPTR(Perl_ck_null),	/* trans */
	MEMBER_TO_FPTR(Perl_ck_sassign),	/* sassign */
	MEMBER_TO_FPTR(Perl_ck_null),	/* aassign */
	MEMBER_TO_FPTR(Perl_ck_spair),	/* chop */
	MEMBER_TO_FPTR(Perl_ck_null),	/* schop */
	MEMBER_TO_FPTR(Perl_ck_spair),	/* chomp */
	MEMBER_TO_FPTR(Perl_ck_null),	/* schomp */
	MEMBER_TO_FPTR(Perl_ck_defined),	/* defined */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* undef */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* study */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* pos */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* preinc */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* i_preinc */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* predec */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* i_predec */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* postinc */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* i_postinc */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* postdec */
	MEMBER_TO_FPTR(Perl_ck_lfun),	/* i_postdec */
	MEMBER_TO_FPTR(Perl_ck_null),	/* pow */
	MEMBER_TO_FPTR(Perl_ck_null),	/* multiply */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_multiply */
	MEMBER_TO_FPTR(Perl_ck_null),	/* divide */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_divide */
	MEMBER_TO_FPTR(Perl_ck_null),	/* modulo */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_modulo */
	MEMBER_TO_FPTR(Perl_ck_repeat),	/* repeat */
	MEMBER_TO_FPTR(Perl_ck_null),	/* add */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_add */
	MEMBER_TO_FPTR(Perl_ck_null),	/* subtract */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_subtract */
	MEMBER_TO_FPTR(Perl_ck_concat),	/* concat */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* stringify */
	MEMBER_TO_FPTR(Perl_ck_bitop),	/* left_shift */
	MEMBER_TO_FPTR(Perl_ck_bitop),	/* right_shift */
	MEMBER_TO_FPTR(Perl_ck_null),	/* lt */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_lt */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gt */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_gt */
	MEMBER_TO_FPTR(Perl_ck_null),	/* le */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_le */
	MEMBER_TO_FPTR(Perl_ck_null),	/* ge */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_ge */
	MEMBER_TO_FPTR(Perl_ck_null),	/* eq */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_eq */
	MEMBER_TO_FPTR(Perl_ck_null),	/* ne */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_ne */
	MEMBER_TO_FPTR(Perl_ck_null),	/* ncmp */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_ncmp */
	MEMBER_TO_FPTR(Perl_ck_null),	/* slt */
	MEMBER_TO_FPTR(Perl_ck_null),	/* sgt */
	MEMBER_TO_FPTR(Perl_ck_null),	/* sle */
	MEMBER_TO_FPTR(Perl_ck_null),	/* sge */
	MEMBER_TO_FPTR(Perl_ck_null),	/* seq */
	MEMBER_TO_FPTR(Perl_ck_null),	/* sne */
	MEMBER_TO_FPTR(Perl_ck_null),	/* scmp */
	MEMBER_TO_FPTR(Perl_ck_bitop),	/* bit_and */
	MEMBER_TO_FPTR(Perl_ck_bitop),	/* bit_xor */
	MEMBER_TO_FPTR(Perl_ck_bitop),	/* bit_or */
	MEMBER_TO_FPTR(Perl_ck_null),	/* negate */
	MEMBER_TO_FPTR(Perl_ck_null),	/* i_negate */
	MEMBER_TO_FPTR(Perl_ck_null),	/* not */
	MEMBER_TO_FPTR(Perl_ck_bitop),	/* complement */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* atan2 */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sin */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* cos */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* rand */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* srand */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* exp */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* log */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sqrt */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* int */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* hex */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* oct */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* abs */
	MEMBER_TO_FPTR(Perl_ck_lengthconst),	/* length */
	MEMBER_TO_FPTR(Perl_ck_substr),	/* substr */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* vec */
	MEMBER_TO_FPTR(Perl_ck_index),	/* index */
	MEMBER_TO_FPTR(Perl_ck_index),	/* rindex */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sprintf */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* formline */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ord */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* chr */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* crypt */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ucfirst */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* lcfirst */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* uc */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* lc */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* quotemeta */
	MEMBER_TO_FPTR(Perl_ck_rvconst),	/* rv2av */
	MEMBER_TO_FPTR(Perl_ck_null),	/* aelemfast */
	MEMBER_TO_FPTR(Perl_ck_null),	/* aelem */
	MEMBER_TO_FPTR(Perl_ck_null),	/* aslice */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* each */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* values */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* keys */
	MEMBER_TO_FPTR(Perl_ck_delete),	/* delete */
	MEMBER_TO_FPTR(Perl_ck_exists),	/* exists */
	MEMBER_TO_FPTR(Perl_ck_rvconst),	/* rv2hv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* helem */
	MEMBER_TO_FPTR(Perl_ck_null),	/* hslice */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* unpack */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* pack */
	MEMBER_TO_FPTR(Perl_ck_split),	/* split */
	MEMBER_TO_FPTR(Perl_ck_join),	/* join */
	MEMBER_TO_FPTR(Perl_ck_null),	/* list */
	MEMBER_TO_FPTR(Perl_ck_null),	/* lslice */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* anonlist */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* anonhash */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* splice */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* push */
	MEMBER_TO_FPTR(Perl_ck_shift),	/* pop */
	MEMBER_TO_FPTR(Perl_ck_shift),	/* shift */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* unshift */
	MEMBER_TO_FPTR(Perl_ck_sort),	/* sort */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* reverse */
	MEMBER_TO_FPTR(Perl_ck_grep),	/* grepstart */
	MEMBER_TO_FPTR(Perl_ck_null),	/* grepwhile */
	MEMBER_TO_FPTR(Perl_ck_grep),	/* mapstart */
	MEMBER_TO_FPTR(Perl_ck_null),	/* mapwhile */
	MEMBER_TO_FPTR(Perl_ck_null),	/* range */
	MEMBER_TO_FPTR(Perl_ck_null),	/* flip */
	MEMBER_TO_FPTR(Perl_ck_null),	/* flop */
	MEMBER_TO_FPTR(Perl_ck_null),	/* and */
	MEMBER_TO_FPTR(Perl_ck_null),	/* or */
	MEMBER_TO_FPTR(Perl_ck_null),	/* xor */
	MEMBER_TO_FPTR(Perl_ck_null),	/* cond_expr */
	MEMBER_TO_FPTR(Perl_ck_null),	/* andassign */
	MEMBER_TO_FPTR(Perl_ck_null),	/* orassign */
	MEMBER_TO_FPTR(Perl_ck_method),	/* method */
	MEMBER_TO_FPTR(Perl_ck_subr),	/* entersub */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leavesub */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leavesublv */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* caller */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* warn */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* die */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* reset */
	MEMBER_TO_FPTR(Perl_ck_null),	/* lineseq */
	MEMBER_TO_FPTR(Perl_ck_null),	/* nextstate */
	MEMBER_TO_FPTR(Perl_ck_null),	/* dbstate */
	MEMBER_TO_FPTR(Perl_ck_null),	/* unstack */
	MEMBER_TO_FPTR(Perl_ck_null),	/* enter */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leave */
	MEMBER_TO_FPTR(Perl_ck_null),	/* scope */
	MEMBER_TO_FPTR(Perl_ck_null),	/* enteriter */
	MEMBER_TO_FPTR(Perl_ck_null),	/* iter */
	MEMBER_TO_FPTR(Perl_ck_null),	/* enterloop */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leaveloop */
	MEMBER_TO_FPTR(Perl_ck_return),	/* return */
	MEMBER_TO_FPTR(Perl_ck_null),	/* last */
	MEMBER_TO_FPTR(Perl_ck_null),	/* next */
	MEMBER_TO_FPTR(Perl_ck_null),	/* redo */
	MEMBER_TO_FPTR(Perl_ck_null),	/* dump */
	MEMBER_TO_FPTR(Perl_ck_null),	/* goto */
	MEMBER_TO_FPTR(Perl_ck_exit),	/* exit */
	MEMBER_TO_FPTR(Perl_ck_open),	/* open */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* close */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* pipe_op */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* fileno */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* umask */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* binmode */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* tie */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* untie */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* tied */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* dbmopen */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* dbmclose */
	MEMBER_TO_FPTR(Perl_ck_select),	/* sselect */
	MEMBER_TO_FPTR(Perl_ck_select),	/* select */
	MEMBER_TO_FPTR(Perl_ck_eof),	/* getc */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* read */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* enterwrite */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leavewrite */
	MEMBER_TO_FPTR(Perl_ck_listiob),	/* prtf */
	MEMBER_TO_FPTR(Perl_ck_listiob),	/* print */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sysopen */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sysseek */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sysread */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* syswrite */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* send */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* recv */
	MEMBER_TO_FPTR(Perl_ck_eof),	/* eof */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* tell */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* seek */
	MEMBER_TO_FPTR(Perl_ck_trunc),	/* truncate */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* fcntl */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ioctl */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* flock */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* socket */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sockpair */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* bind */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* connect */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* listen */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* accept */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* shutdown */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gsockopt */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ssockopt */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* getsockname */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* getpeername */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* lstat */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* stat */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftrread */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftrwrite */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftrexec */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* fteread */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftewrite */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* fteexec */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftis */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* fteowned */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftrowned */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftzero */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftsize */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftmtime */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftatime */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftctime */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftsock */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftchr */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftblk */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftfile */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftdir */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftpipe */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftlink */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftsuid */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftsgid */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftsvtx */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* fttty */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* fttext */
	MEMBER_TO_FPTR(Perl_ck_ftst),	/* ftbinary */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* chdir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* chown */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* chroot */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* unlink */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* chmod */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* utime */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* rename */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* link */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* symlink */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* readlink */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* mkdir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* rmdir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* open_dir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* readdir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* telldir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* seekdir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* rewinddir */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* closedir */
	MEMBER_TO_FPTR(Perl_ck_null),	/* fork */
	MEMBER_TO_FPTR(Perl_ck_null),	/* wait */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* waitpid */
	MEMBER_TO_FPTR(Perl_ck_exec),	/* system */
	MEMBER_TO_FPTR(Perl_ck_exec),	/* exec */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* kill */
	MEMBER_TO_FPTR(Perl_ck_null),	/* getppid */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* getpgrp */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* setpgrp */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* getpriority */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* setpriority */
	MEMBER_TO_FPTR(Perl_ck_null),	/* time */
	MEMBER_TO_FPTR(Perl_ck_null),	/* tms */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* localtime */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gmtime */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* alarm */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sleep */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* shmget */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* shmctl */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* shmread */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* shmwrite */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* msgget */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* msgctl */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* msgsnd */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* msgrcv */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* semget */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* semctl */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* semop */
	MEMBER_TO_FPTR(Perl_ck_require),	/* require */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* dofile */
	MEMBER_TO_FPTR(Perl_ck_eval),	/* entereval */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leaveeval */
	MEMBER_TO_FPTR(Perl_ck_null),	/* entertry */
	MEMBER_TO_FPTR(Perl_ck_null),	/* leavetry */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ghbyname */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ghbyaddr */
	MEMBER_TO_FPTR(Perl_ck_null),	/* ghostent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gnbyname */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gnbyaddr */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gnetent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gpbyname */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gpbynumber */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gprotoent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gsbyname */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gsbyport */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gservent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* shostent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* snetent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sprotoent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* sservent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* ehostent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* enetent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* eprotoent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* eservent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gpwnam */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* gpwuid */
	MEMBER_TO_FPTR(Perl_ck_null),	/* gpwent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* spwent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* epwent */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ggrnam */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* ggrgid */
	MEMBER_TO_FPTR(Perl_ck_null),	/* ggrent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* sgrent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* egrent */
	MEMBER_TO_FPTR(Perl_ck_null),	/* getlogin */
	MEMBER_TO_FPTR(Perl_ck_fun),	/* syscall */
	MEMBER_TO_FPTR(Perl_ck_rfun),	/* lock */
	MEMBER_TO_FPTR(Perl_ck_null),	/* threadsv */
	MEMBER_TO_FPTR(Perl_ck_null),	/* setstate */
	MEMBER_TO_FPTR(Perl_ck_null),	/* method_named */
};
#endif

#ifndef DOINIT
EXT U32 PL_opargs[];
#else
EXT U32 PL_opargs[] = {
	0x00000000,	/* null */
	0x00000000,	/* stub */
	0x00003604,	/* scalar */
	0x00000004,	/* pushmark */
	0x00000014,	/* wantarray */
	0x00000c04,	/* const */
	0x00000c44,	/* gvsv */
	0x00000c44,	/* gv */
	0x00022440,	/* gelem */
	0x00000044,	/* padsv */
	0x00000040,	/* padav */
	0x00000040,	/* padhv */
	0x00000040,	/* padany */
	0x00000a40,	/* pushre */
	0x00000244,	/* rv2gv */
	0x00000244,	/* rv2sv */
	0x00000214,	/* av2arylen */
	0x00000240,	/* rv2cv */
	0x00000c00,	/* anoncode */
	0x00003604,	/* prototype */
	0x00004201,	/* refgen */
	0x00002206,	/* srefgen */
	0x0001368c,	/* ref */
	0x00122804,	/* bless */
	0x00001608,	/* backtick */
	0x00012808,	/* glob */
	0x00001608,	/* readline */
	0x00001608,	/* rcatline */
	0x00002204,	/* regcmaybe */
	0x00002204,	/* regcreset */
	0x00002604,	/* regcomp */
	0x00000a40,	/* match */
	0x00000a04,	/* qr */
	0x00002a54,	/* subst */
	0x00000654,	/* substcont */
	0x00003014,	/* trans */
	0x00000004,	/* sassign */
	0x00044408,	/* aassign */
	0x0000560d,	/* chop */
	0x0001368c,	/* schop */
	0x0000570d,	/* chomp */
	0x0001378c,	/* schomp */
	0x00013694,	/* defined */
	0x00013604,	/* undef */
	0x00013684,	/* study */
	0x0001368c,	/* pos */
	0x00002264,	/* preinc */
	0x00002254,	/* i_preinc */
	0x00002264,	/* predec */
	0x00002254,	/* i_predec */
	0x0000226c,	/* postinc */
	0x0000235c,	/* i_postinc */
	0x0000226c,	/* postdec */
	0x0000235c,	/* i_postdec */
	0x0002250e,	/* pow */
	0x0002252e,	/* multiply */
	0x0002251e,	/* i_multiply */
	0x0002252e,	/* divide */
	0x0002251e,	/* i_divide */
	0x0002253e,	/* modulo */
	0x0002251e,	/* i_modulo */
	0x00024409,	/* repeat */
	0x0002252e,	/* add */
	0x0002251e,	/* i_add */
	0x0002252e,	/* subtract */
	0x0002251e,	/* i_subtract */
	0x0002250e,	/* concat */
	0x0000290e,	/* stringify */
	0x0002250e,	/* left_shift */
	0x0002250e,	/* right_shift */
	0x00022436,	/* lt */
	0x00022416,	/* i_lt */
	0x00022436,	/* gt */
	0x00022416,	/* i_gt */
	0x00022436,	/* le */
	0x00022416,	/* i_le */
	0x00022436,	/* ge */
	0x00022416,	/* i_ge */
	0x00022436,	/* eq */
	0x00022416,	/* i_eq */
	0x00022436,	/* ne */
	0x00022416,	/* i_ne */
	0x0002243e,	/* ncmp */
	0x0002241e,	/* i_ncmp */
	0x00022416,	/* slt */
	0x00022416,	/* sgt */
	0x00022416,	/* sle */
	0x00022416,	/* sge */
	0x00022416,	/* seq */
	0x00022416,	/* sne */
	0x0002241e,	/* scmp */
	0x0002240e,	/* bit_and */
	0x0002240e,	/* bit_xor */
	0x0002240e,	/* bit_or */
	0x0000222e,	/* negate */
	0x0000231e,	/* i_negate */
	0x00002216,	/* not */
	0x0000220e,	/* complement */
	0x0002290e,	/* atan2 */
	0x0001378e,	/* sin */
	0x0001378e,	/* cos */
	0x0001370c,	/* rand */
	0x00013604,	/* srand */
	0x0001378e,	/* exp */
	0x0001378e,	/* log */
	0x0001378e,	/* sqrt */
	0x0001378e,	/* int */
	0x0001378e,	/* hex */
	0x0001378e,	/* oct */
	0x0001378e,	/* abs */
	0x0001379c,	/* length */
	0x1322280c,	/* substr */
	0x0022281c,	/* vec */
	0x0122291c,	/* index */
	0x0122291c,	/* rindex */
	0x0004280f,	/* sprintf */
	0x00042805,	/* formline */
	0x0001379e,	/* ord */
	0x0001378e,	/* chr */
	0x0002290e,	/* crypt */
	0x0001368e,	/* ucfirst */
	0x0001368e,	/* lcfirst */
	0x0001368e,	/* uc */
	0x0001368e,	/* lc */
	0x0001368e,	/* quotemeta */
	0x00000248,	/* rv2av */
	0x00026c04,	/* aelemfast */
	0x00026404,	/* aelem */
	0x00046801,	/* aslice */
	0x00009600,	/* each */
	0x00009608,	/* values */
	0x00009608,	/* keys */
	0x00003600,	/* delete */
	0x00003614,	/* exists */
	0x00000248,	/* rv2hv */
	0x00028404,	/* helem */
	0x00048801,	/* hslice */
	0x00022800,	/* unpack */
	0x0004280d,	/* pack */
	0x00222808,	/* split */
	0x0004280d,	/* join */
	0x00004801,	/* list */
	0x00448400,	/* lslice */
	0x00004805,	/* anonlist */
	0x00004805,	/* anonhash */
	0x05326801,	/* splice */
	0x0004691d,	/* push */
	0x00007604,	/* pop */
	0x00007604,	/* shift */
	0x0004691d,	/* unshift */
	0x0005a801,	/* sort */
	0x00004809,	/* reverse */
	0x0004a841,	/* grepstart */
	0x00000648,	/* grepwhile */
	0x0004a841,	/* mapstart */
	0x00000648,	/* mapwhile */
	0x00022600,	/* range */
	0x00022200,	/* flip */
	0x00000200,	/* flop */
	0x00000600,	/* and */
	0x00000600,	/* or */
	0x00022406,	/* xor */
	0x00000640,	/* cond_expr */
	0x00000604,	/* andassign */
	0x00000604,	/* orassign */
	0x00000240,	/* method */
	0x00004249,	/* entersub */
	0x00000200,	/* leavesub */
	0x00000200,	/* leavesublv */
	0x00013608,	/* caller */
	0x0000481d,	/* warn */
	0x0000485d,	/* die */
	0x00013614,	/* reset */
	0x00000800,	/* lineseq */
	0x00001404,	/* nextstate */
	0x00001404,	/* dbstate */
	0x00000004,	/* unstack */
	0x00000000,	/* enter */
	0x00000800,	/* leave */
	0x00000800,	/* scope */
	0x00001240,	/* enteriter */
	0x00000000,	/* iter */
	0x00001240,	/* enterloop */
	0x00000400,	/* leaveloop */
	0x00004841,	/* return */
	0x00001a44,	/* last */
	0x00001a44,	/* next */
	0x00001a44,	/* redo */
	0x00001a44,	/* dump */
	0x00001a44,	/* goto */
	0x00013644,	/* exit */
	0x0052c81c,	/* open */
	0x0001d614,	/* close */
	0x000cc814,	/* pipe_op */
	0x0000d61c,	/* fileno */
	0x0001361c,	/* umask */
	0x0012c804,	/* binmode */
	0x0042e855,	/* tie */
	0x0000f614,	/* untie */
	0x0000f604,	/* tied */
	0x00228814,	/* dbmopen */
	0x00009614,	/* dbmclose */
	0x02222808,	/* sselect */
	0x0001c80c,	/* select */
	0x0001d60c,	/* getc */
	0x122ec81d,	/* read */
	0x0001d654,	/* enterwrite */
	0x00000200,	/* leavewrite */
	0x0005c815,	/* prtf */
	0x0005c815,	/* print */
	0x1222c804,	/* sysopen */
	0x0022c804,	/* sysseek */
	0x122ec81d,	/* sysread */
	0x1322c81d,	/* syswrite */
	0x1222c81d,	/* send */
	0x022ec81d,	/* recv */
	0x0001d614,	/* eof */
	0x0001d60c,	/* tell */
	0x0022c804,	/* seek */
	0x00022814,	/* truncate */
	0x0022c80c,	/* fcntl */
	0x0022c80c,	/* ioctl */
	0x0002c91c,	/* flock */
	0x0222c814,	/* socket */
	0x222cc814,	/* sockpair */
	0x0002c814,	/* bind */
	0x0002c814,	/* connect */
	0x0002c814,	/* listen */
	0x000cc81c,	/* accept */
	0x0002c81c,	/* shutdown */
	0x0022c814,	/* gsockopt */
	0x0222c814,	/* ssockopt */
	0x0000d614,	/* getsockname */
	0x0000d614,	/* getpeername */
	0x0000d880,	/* lstat */
	0x0000d880,	/* stat */
	0x0000d894,	/* ftrread */
	0x0000d894,	/* ftrwrite */
	0x0000d894,	/* ftrexec */
	0x0000d894,	/* fteread */
	0x0000d894,	/* ftewrite */
	0x0000d894,	/* fteexec */
	0x0000d894,	/* ftis */
	0x0000d894,	/* fteowned */
	0x0000d894,	/* ftrowned */
	0x0000d894,	/* ftzero */
	0x0000d89c,	/* ftsize */
	0x0000d88c,	/* ftmtime */
	0x0000d88c,	/* ftatime */
	0x0000d88c,	/* ftctime */
	0x0000d894,	/* ftsock */
	0x0000d894,	/* ftchr */
	0x0000d894,	/* ftblk */
	0x0000d894,	/* ftfile */
	0x0000d894,	/* ftdir */
	0x0000d894,	/* ftpipe */
	0x0000d894,	/* ftlink */
	0x0000d894,	/* ftsuid */
	0x0000d894,	/* ftsgid */
	0x0000d894,	/* ftsvtx */
	0x0000d814,	/* fttty */
	0x0000d894,	/* fttext */
	0x0000d894,	/* ftbinary */
	0x0001371c,	/* chdir */
	0x0000491d,	/* chown */
	0x0001379c,	/* chroot */
	0x0000499d,	/* unlink */
	0x0000491d,	/* chmod */
	0x0000491d,	/* utime */
	0x0002291c,	/* rename */
	0x0002291c,	/* link */
	0x0002291c,	/* symlink */
	0x0001368c,	/* readlink */
	0x0012291c,	/* mkdir */
	0x0001379c,	/* rmdir */
	0x0002c814,	/* open_dir */
	0x0000d600,	/* readdir */
	0x0000d60c,	/* telldir */
	0x0002c804,	/* seekdir */
	0x0000d604,	/* rewinddir */
	0x0000d614,	/* closedir */
	0x0000001c,	/* fork */
	0x0000011c,	/* wait */
	0x0002291c,	/* waitpid */
	0x0005291d,	/* system */
	0x0005295d,	/* exec */
	0x0000495d,	/* kill */
	0x0000011c,	/* getppid */
	0x0001371c,	/* getpgrp */
	0x0013291c,	/* setpgrp */
	0x0002291c,	/* getpriority */
	0x0022291c,	/* setpriority */
	0x0000011c,	/* time */
	0x00000000,	/* tms */
	0x00013608,	/* localtime */
	0x00013608,	/* gmtime */
	0x0001369c,	/* alarm */
	0x0001371c,	/* sleep */
	0x0022281d,	/* shmget */
	0x0022281d,	/* shmctl */
	0x0222281d,	/* shmread */
	0x0222281d,	/* shmwrite */
	0x0002281d,	/* msgget */
	0x0022281d,	/* msgctl */
	0x0022281d,	/* msgsnd */
	0x2222281d,	/* msgrcv */
	0x0022281d,	/* semget */
	0x0222281d,	/* semctl */
	0x0002281d,	/* semop */
	0x000136c0,	/* require */
	0x00002240,	/* dofile */
	0x00003640,	/* entereval */
	0x00002200,	/* leaveeval */
	0x00000600,	/* entertry */
	0x00000800,	/* leavetry */
	0x00003600,	/* ghbyname */
	0x00022800,	/* ghbyaddr */
	0x00000000,	/* ghostent */
	0x00003600,	/* gnbyname */
	0x00022800,	/* gnbyaddr */
	0x00000000,	/* gnetent */
	0x00003600,	/* gpbyname */
	0x00002800,	/* gpbynumber */
	0x00000000,	/* gprotoent */
	0x00022800,	/* gsbyname */
	0x00022800,	/* gsbyport */
	0x00000000,	/* gservent */
	0x00003614,	/* shostent */
	0x00003614,	/* snetent */
	0x00003614,	/* sprotoent */
	0x00003614,	/* sservent */
	0x00000014,	/* ehostent */
	0x00000014,	/* enetent */
	0x00000014,	/* eprotoent */
	0x00000014,	/* eservent */
	0x00003600,	/* gpwnam */
	0x00003600,	/* gpwuid */
	0x00000000,	/* gpwent */
	0x00000014,	/* spwent */
	0x00000014,	/* epwent */
	0x00003600,	/* ggrnam */
	0x00003600,	/* ggrgid */
	0x00000000,	/* ggrent */
	0x00000014,	/* sgrent */
	0x00000014,	/* egrent */
	0x0000000c,	/* getlogin */
	0x0004281d,	/* syscall */
	0x00003604,	/* lock */
	0x00000044,	/* threadsv */
	0x00001404,	/* setstate */
	0x00000c40,	/* method_named */
};
#endif

END_EXTERN_C
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\patchlevel.h ===
#ifndef __PATCHLEVEL_H_INCLUDED__

#include "BuildInfo.h"

/* do not adjust the whitespace! Configure expects the numbers to be
 * exactly on the third column */

#define PERL_REVISION	5		/* age */
#define PERL_VERSION	6		/* epoch */
#define PERL_SUBVERSION	1		/* generation */

/* The following numbers describe the earliest compatible version of
   Perl ("compatibility" here being defined as sufficient binary/API
   compatibility to run XS code built with the older version).
   Normally this should not change across maintenance releases.

   Note that this only refers to an out-of-the-box build.  Many non-default
   options such as usemultiplicity tend to break binary compatibility
   more often.

   This is used by Configure et al to figure out 
   PERL_INC_VERSION_LIST, which lists version libraries
   to include in @INC.  See INSTALL for how this works.
*/
#define PERL_API_REVISION	5	/* Adjust manually as needed.  */
#define PERL_API_VERSION	5	/* Adjust manually as needed.  */
#define PERL_API_SUBVERSION	0	/* Adjust manually as needed.  */
/*
   XXX Note:  The selection of non-default Configure options, such
   as -Duselonglong may invalidate these settings.  Currently, Configure
   does not adequately test for this.   A.D.  Jan 13, 2000
*/

#define __PATCHLEVEL_H_INCLUDED__
#endif

/*
	local_patches -- list of locally applied less-than-subversion patches.
	If you're distributing such a patch, please give it a name and a
	one-line description, placed just before the last NULL in the array
	below.  If your patch fixes a bug in the perlbug database, please
	mention the bugid.  If your patch *IS* dependent on a prior patch,
	please place your applied patch line after its dependencies. This
	will help tracking of patch dependencies.

	Please edit the hunk of diff which adds your patch to this list,
	to remove context lines which would give patch problems.  For instance,
	if the original context diff is
	   *** patchlevel.h.orig	<date here>
	   --- patchlevel.h	<date here>
	   *** 38,43 ***
	   --- 38,44 ---
	     	,"FOO1235 - some patch"
	     	,"BAR3141 - another patch"
	     	,"BAZ2718 - and another patch"
	   + 	,"MINE001 - my new patch"
	     	,NULL
	     };
	
	please change it to 
	   *** patchlevel.h.orig	<date here>
	   --- patchlevel.h	<date here>
	   *** 41,43 ***
	   --- 41,44 ---
	   + 	,"MINE001 - my new patch"
	     };
	
	(Note changes to line numbers as well as removal of context lines.)
	This will prevent patch from choking if someone has previously
	applied different patches than you.
 */
#if !defined(PERL_PATCHLEVEL_H_IMPLICIT) && !defined(LOCAL_PATCH_COUNT)
static	char	*local_patches[] = {
	NULL
 	,ACTIVEPERL_LOCAL_PATCHES_ENTRY
	,NULL
};

/* Initial space prevents this variable from being inserted in config.sh  */
#  define	LOCAL_PATCH_COUNT	\
	(sizeof(local_patches)/sizeof(local_patches[0])-2)

/* the old terms of reference, add them only when explicitly included */
#define PATCHLEVEL		PERL_VERSION
#undef  SUBVERSION		/* OS/390 has a SUBVERSION in a system header */
#define SUBVERSION		PERL_SUBVERSION
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\op.h ===
/*    op.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

/*
 * The fields of BASEOP are:
 *	op_next		Pointer to next ppcode to execute after this one.
 *			(Top level pre-grafted op points to first op,
 *			but this is replaced when op is grafted in, when
 *			this op will point to the real next op, and the new
 *			parent takes over role of remembering starting op.)
 *	op_ppaddr	Pointer to current ppcode's function.
 *	op_type		The type of the operation.
 *	op_flags	Flags common to all operations.  See OPf_* below.
 *	op_private	Flags peculiar to a particular operation (BUT,
 *			by default, set to the number of children until
 *			the operation is privatized by a check routine,
 *			which may or may not check number of children).
 */

typedef U32 PADOFFSET;
#define NOT_IN_PAD ((PADOFFSET) -1)

#ifdef DEBUGGING_OPS
#define OPCODE opcode
#else
#define OPCODE U16
#endif

#ifdef BASEOP_DEFINITION
#define BASEOP BASEOP_DEFINITION
#else
#define BASEOP				\
    OP*		op_next;		\
    OP*		op_sibling;		\
    OP*		(CPERLscope(*op_ppaddr))(pTHX);		\
    PADOFFSET	op_targ;		\
    OPCODE	op_type;		\
    U16		op_seq;			\
    U8		op_flags;		\
    U8		op_private;
#endif

#define OP_GIMME(op,dfl) \
	(((op)->op_flags & OPf_WANT) == OPf_WANT_VOID   ? G_VOID   : \
	 ((op)->op_flags & OPf_WANT) == OPf_WANT_SCALAR ? G_SCALAR : \
	 ((op)->op_flags & OPf_WANT) == OPf_WANT_LIST   ? G_ARRAY   : \
	 dfl)

/*
=for apidoc Amn|U32|GIMME_V
The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns C<G_VOID>,
C<G_SCALAR> or C<G_ARRAY> for void, scalar or list context,
respectively.

=for apidoc Amn|U32|GIMME
A backward-compatible version of C<GIMME_V> which can only return
C<G_SCALAR> or C<G_ARRAY>; in a void context, it returns C<G_SCALAR>.
Deprecated.  Use C<GIMME_V> instead.

=cut
*/

#define GIMME_V		OP_GIMME(PL_op, block_gimme())

/* Public flags */

#define OPf_WANT	3	/* Mask for "want" bits: */
#define  OPf_WANT_VOID	 1	/*   Want nothing */
#define  OPf_WANT_SCALAR 2	/*   Want single value */
#define  OPf_WANT_LIST	 3	/*   Want list of any length */
#define OPf_KIDS	4	/* There is a firstborn child. */
#define OPf_PARENS	8	/* This operator was parenthesized. */
				/*  (Or block needs explicit scope entry.) */
#define OPf_REF		16	/* Certified reference. */
				/*  (Return container, not containee). */
#define OPf_MOD		32	/* Will modify (lvalue). */
#define OPf_STACKED	64	/* Some arg is arriving on the stack. */
#define OPf_SPECIAL	128	/* Do something weird for this op: */
				/*  On local LVAL, don't init local value. */
				/*  On OP_SORT, subroutine is inlined. */
				/*  On OP_NOT, inversion was implicit. */
				/*  On OP_LEAVE, don't restore curpm. */
				/*  On truncate, we truncate filehandle */
				/*  On control verbs, we saw no label */
				/*  On flipflop, we saw ... instead of .. */
				/*  On UNOPs, saw bare parens, e.g. eof(). */
				/*  On OP_ENTERSUB || OP_NULL, saw a "do". */
				/*  On OP_EXISTS, treat av as av, not avhv.  */
				/*  On OP_(ENTER|LEAVE)EVAL, don't clear $@ */
				/*  On OP_ENTERITER, loop var is per-thread */
				/*  On pushre, re is /\s+/ imp. by split " " */
				/*  On regcomp, "use re 'eval'" was in scope */

/* old names; don't use in new code, but don't break them, either */
#define OPf_LIST	OPf_WANT_LIST
#define OPf_KNOW	OPf_WANT

#define GIMME \
	  (PL_op->op_flags & OPf_WANT					\
	   ? ((PL_op->op_flags & OPf_WANT) == OPf_WANT_LIST		\
	      ? G_ARRAY							\
	      : G_SCALAR)						\
	   : dowantarray())

/* NOTE: OP_NEXTSTATE, OP_DBSTATE, and OP_SETSTATE (i.e. COPs) carry lower
 * bits of PL_hints in op_private */

/* Private for lvalues */
#define OPpLVAL_INTRO	128	/* Lvalue must be localized or lvalue sub */

/* Private for OP_LEAVE, OP_LEAVESUB, OP_LEAVESUBLV and OP_LEAVEWRITE */
#define OPpREFCOUNTED		64	/* op_targ carries a refcount */

/* Private for OP_AASSIGN */
#define OPpASSIGN_COMMON	64	/* Left & right have syms in common. */
#define OPpASSIGN_HASH		32	/* Assigning to possible pseudohash. */

/* Private for OP_SASSIGN */
#define OPpASSIGN_BACKWARDS	64	/* Left & right switched. */

/* Private for OP_MATCH and OP_SUBST{,CONST} */
#define OPpRUNTIME		64	/* Pattern coming in on the stack */

/* Private for OP_TRANS */
#define OPpTRANS_FROM_UTF	1
#define OPpTRANS_TO_UTF		2
#define OPpTRANS_IDENTICAL	4	/* right side is same as left */
#define OPpTRANS_SQUASH		8
#define OPpTRANS_DELETE		16
#define OPpTRANS_COMPLEMENT	32
#define OPpTRANS_GROWS		64

/* Private for OP_REPEAT */
#define OPpREPEAT_DOLIST	64	/* List replication. */

/* Private for OP_RV2?V, OP_?ELEM */
#define OPpDEREF		(32|64)	/* Want ref to something: */
#define OPpDEREF_AV		32	/*   Want ref to AV. */
#define OPpDEREF_HV		64	/*   Want ref to HV. */
#define OPpDEREF_SV		(32|64)	/*   Want ref to SV. */
  /* OP_ENTERSUB only */
#define OPpENTERSUB_DB		16	/* Debug subroutine. */
#define OPpENTERSUB_HASTARG	32	/* Called from OP tree. */
  /* OP_RV2CV only */
#define OPpENTERSUB_AMPER	8	/* Used & form to call. */
#define OPpENTERSUB_NOPAREN	128	/* bare sub call (without parens) */
#define OPpENTERSUB_INARGS	4	/* Lval used as arg to a sub. */
  /* OP_GV only */
#define OPpEARLY_CV		32	/* foo() called before sub foo was parsed */
  /* OP_?ELEM only */
#define OPpLVAL_DEFER		16	/* Defer creation of array/hash elem */
  /* OP_RV2?V, OP_GVSV only */
#define OPpOUR_INTRO		16	/* Variable was in an our() */
  /* OP_RV2[AH]V, OP_PAD[AH]V, OP_[AH]ELEM */
#define OPpMAYBE_LVSUB		8	/* We might be an lvalue to return */
  /* for OP_RV2?V, lower bits carry hints (currently only HINT_STRICT_REFS) */

/* Private for OPs with TARGLEX */
  /* (lower bits may carry MAXARG) */
#define OPpTARGET_MY		16	/* Target is PADMY. */

/* Private for OP_CONST */
#define	OPpCONST_STRICT		8	/* bearword subject to strict 'subs' */
#define OPpCONST_ENTERED	16	/* Has been entered as symbol. */
#define OPpCONST_ARYBASE	32	/* Was a $[ translated to constant. */
#define OPpCONST_BARE		64	/* Was a bare word (filehandle?). */
#define OPpCONST_WARNING	128	/* Was a $^W translated to constant. */

/* Private for OP_FLIP/FLOP */
#define OPpFLIP_LINENUM		64	/* Range arg potentially a line num. */

/* Private for OP_LIST */
#define OPpLIST_GUESSED		64	/* Guessed that pushmark was needed. */

/* Private for OP_DELETE */
#define OPpSLICE		64	/* Operating on a list of keys */

/* Private for OP_EXISTS */
#define OPpEXISTS_SUB		64	/* Checking for &sub, not {} or [].  */

/* Private for OP_SORT */
#define OPpSORT_NUMERIC		1	/* Optimized away { $a <=> $b } */
#define OPpSORT_INTEGER		2	/* Ditto while under "use integer" */
#define OPpSORT_REVERSE		4	/* Descending sort */
/* Private for OP_THREADSV */
#define OPpDONE_SVREF		64	/* Been through newSVREF once */

/* Private for OP_OPEN and OP_BACKTICK */
#define OPpOPEN_IN_RAW		16	/* binmode(F,":raw") on input fh */
#define OPpOPEN_IN_CRLF		32	/* binmode(F,":crlf") on input fh */
#define OPpOPEN_OUT_RAW		64	/* binmode(F,":raw") on output fh */
#define OPpOPEN_OUT_CRLF	128	/* binmode(F,":crlf") on output fh */

/* Private for OP_EXIT */
#define OPpEXIT_VMSISH		128	/* exit(0) vs. exit(1) vmsish mode*/

struct op {
    BASEOP
};

struct unop {
    BASEOP
    OP *	op_first;
};

struct binop {
    BASEOP
    OP *	op_first;
    OP *	op_last;
};

struct logop {
    BASEOP
    OP *	op_first;
    OP *	op_other;
};

struct listop {
    BASEOP
    OP *	op_first;
    OP *	op_last;
};

struct pmop {
    BASEOP
    OP *	op_first;
    OP *	op_last;
    OP *	op_pmreplroot;
    OP *	op_pmreplstart;
    PMOP *	op_pmnext;		/* list of all scanpats */
    REGEXP *	op_pmregexp;		/* compiled expression */
    U16		op_pmflags;
    U16		op_pmpermflags;
    U8		op_pmdynflags;
};

#define PMdf_USED	0x01		/* pm has been used once already */
#define PMdf_TAINTED	0x02		/* pm compiled from tainted pattern */
#define PMdf_UTF8	0x04		/* pm compiled from utf8 data */

#define PMf_RETAINT	0x0001		/* taint $1 etc. if target tainted */
#define PMf_ONCE	0x0002		/* use pattern only once per reset */
#define PMf_REVERSED	0x0004		/* Should be matched right->left */
#define PMf_MAYBE_CONST	0x0008		/* replacement contains variables */
#define PMf_SKIPWHITE	0x0010		/* skip leading whitespace for split */
#define PMf_WHITE	0x0020		/* pattern is \s+ */
#define PMf_CONST	0x0040		/* subst replacement is constant */
#define PMf_KEEP	0x0080		/* keep 1st runtime pattern forever */
#define PMf_GLOBAL	0x0100		/* pattern had a g modifier */
#define PMf_CONTINUE	0x0200		/* don't reset pos() if //g fails */
#define PMf_EVAL	0x0400		/* evaluating replacement as expr */
#define PMf_LOCALE	0x0800		/* use locale for character types */
#define PMf_MULTILINE	0x1000		/* assume multiple lines */
#define PMf_SINGLELINE	0x2000		/* assume single line */
#define PMf_FOLD	0x4000		/* case insensitivity */
#define PMf_EXTENDED	0x8000		/* chuck embedded whitespace */

/* mask of bits stored in regexp->reganch */
#define PMf_COMPILETIME	(PMf_MULTILINE|PMf_SINGLELINE|PMf_LOCALE|PMf_FOLD|PMf_EXTENDED)

struct svop {
    BASEOP
    SV *	op_sv;
};

struct padop {
    BASEOP
    PADOFFSET	op_padix;
};

struct pvop {
    BASEOP
    char *	op_pv;
};

struct loop {
    BASEOP
    OP *	op_first;
    OP *	op_last;
    OP *	op_redoop;
    OP *	op_nextop;
    OP *	op_lastop;
};

#define cUNOPx(o)	((UNOP*)o)
#define cBINOPx(o)	((BINOP*)o)
#define cLISTOPx(o)	((LISTOP*)o)
#define cLOGOPx(o)	((LOGOP*)o)
#define cPMOPx(o)	((PMOP*)o)
#define cSVOPx(o)	((SVOP*)o)
#define cPADOPx(o)	((PADOP*)o)
#define cPVOPx(o)	((PVOP*)o)
#define cCOPx(o)	((COP*)o)
#define cLOOPx(o)	((LOOP*)o)

#define cUNOP		cUNOPx(PL_op)
#define cBINOP		cBINOPx(PL_op)
#define cLISTOP		cLISTOPx(PL_op)
#define cLOGOP		cLOGOPx(PL_op)
#define cPMOP		cPMOPx(PL_op)
#define cSVOP		cSVOPx(PL_op)
#define cPADOP		cPADOPx(PL_op)
#define cPVOP		cPVOPx(PL_op)
#define cCOP		cCOPx(PL_op)
#define cLOOP		cLOOPx(PL_op)

#define cUNOPo		cUNOPx(o)
#define cBINOPo		cBINOPx(o)
#define cLISTOPo	cLISTOPx(o)
#define cLOGOPo		cLOGOPx(o)
#define cPMOPo		cPMOPx(o)
#define cSVOPo		cSVOPx(o)
#define cPADOPo		cPADOPx(o)
#define cPVOPo		cPVOPx(o)
#define cCOPo		cCOPx(o)
#define cLOOPo		cLOOPx(o)

#define kUNOP		cUNOPx(kid)
#define kBINOP		cBINOPx(kid)
#define kLISTOP		cLISTOPx(kid)
#define kLOGOP		cLOGOPx(kid)
#define kPMOP		cPMOPx(kid)
#define kSVOP		cSVOPx(kid)
#define kPADOP		cPADOPx(kid)
#define kPVOP		cPVOPx(kid)
#define kCOP		cCOPx(kid)
#define kLOOP		cLOOPx(kid)


#ifdef USE_ITHREADS
#  define	cGVOPx_gv(o)	((GV*)PL_curpad[cPADOPx(o)->op_padix])
#  define	IS_PADGV(v)	(v && SvTYPE(v) == SVt_PVGV && GvIN_PAD(v))
#  define	IS_PADCONST(v)	(v && SvREADONLY(v))
#  define	cSVOPx_sv(v)	(cSVOPx(v)->op_sv \
				 ? cSVOPx(v)->op_sv : PL_curpad[(v)->op_targ])
#  define	cSVOPx_svp(v)	(cSVOPx(v)->op_sv \
				 ? &cSVOPx(v)->op_sv : &PL_curpad[(v)->op_targ])
#else
#  define	cGVOPx_gv(o)	((GV*)cSVOPx(o)->op_sv)
#  define	IS_PADGV(v)	FALSE
#  define	IS_PADCONST(v)	FALSE
#  define	cSVOPx_sv(v)	(cSVOPx(v)->op_sv)
#  define	cSVOPx_svp(v)	(&cSVOPx(v)->op_sv)
#endif

#define	cGVOP_gv		cGVOPx_gv(PL_op)
#define	cGVOPo_gv		cGVOPx_gv(o)
#define	kGVOP_gv		cGVOPx_gv(kid)
#define cSVOP_sv		cSVOPx_sv(PL_op)
#define cSVOPo_sv		cSVOPx_sv(o)
#define kSVOP_sv		cSVOPx_sv(kid)

#define Nullop Null(OP*)

/* Lowest byte of PL_opargs */
#define OA_MARK 1
#define OA_FOLDCONST 2
#define OA_RETSCALAR 4
#define OA_TARGET 8
#define OA_RETINTEGER 16
#define OA_OTHERINT 32
#define OA_DANGEROUS 64
#define OA_DEFGV 128
#define OA_TARGLEX 256

/* The next 4 bits encode op class information */
#define OCSHIFT 9

#define OA_CLASS_MASK (15 << OCSHIFT)

#define OA_BASEOP (0 << OCSHIFT)
#define OA_UNOP (1 << OCSHIFT)
#define OA_BINOP (2 << OCSHIFT)
#define OA_LOGOP (3 << OCSHIFT)
#define OA_LISTOP (4 << OCSHIFT)
#define OA_PMOP (5 << OCSHIFT)
#define OA_SVOP (6 << OCSHIFT)
#define OA_PADOP (7 << OCSHIFT)
#define OA_PVOP_OR_SVOP (8 << OCSHIFT)
#define OA_LOOP (9 << OCSHIFT)
#define OA_COP (10 << OCSHIFT)
#define OA_BASEOP_OR_UNOP (11 << OCSHIFT)
#define OA_FILESTATOP (12 << OCSHIFT)
#define OA_LOOPEXOP (13 << OCSHIFT)

#define OASHIFT 13

/* Remaining nybbles of PL_opargs */
#define OA_SCALAR 1
#define OA_LIST 2
#define OA_AVREF 3
#define OA_HVREF 4
#define OA_CVREF 5
#define OA_FILEREF 6
#define OA_SCALARREF 7
#define OA_OPTIONAL 8

#ifdef USE_ITHREADS
#  define OP_REFCNT_INIT		MUTEX_INIT(&PL_op_mutex)
#  define OP_REFCNT_LOCK		MUTEX_LOCK(&PL_op_mutex)
#  define OP_REFCNT_UNLOCK		MUTEX_UNLOCK(&PL_op_mutex)
#  define OP_REFCNT_TERM		MUTEX_DESTROY(&PL_op_mutex)
#else
#  define OP_REFCNT_INIT		NOOP
#  define OP_REFCNT_LOCK		NOOP
#  define OP_REFCNT_UNLOCK		NOOP
#  define OP_REFCNT_TERM		NOOP
#endif

#define OpREFCNT_set(o,n)		((o)->op_targ = (n))
#define OpREFCNT_inc(o)			((o) ? (++(o)->op_targ, (o)) : Nullop)
#define OpREFCNT_dec(o)			(--(o)->op_targ)

/* flags used by Perl_load_module() */
#define PERL_LOADMOD_DENY		0x1
#define PERL_LOADMOD_NOIMPORT		0x2
#define PERL_LOADMOD_IMPORT_OPS		0x4
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\opnames.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!! 
   This file is built by opcode.pl from its data.  Any changes made here
   will be lost!
*/

typedef enum opcode {
	OP_NULL,	/* 0 */
	OP_STUB,	/* 1 */
	OP_SCALAR,	/* 2 */
	OP_PUSHMARK,	/* 3 */
	OP_WANTARRAY,	/* 4 */
	OP_CONST,	/* 5 */
	OP_GVSV,	/* 6 */
	OP_GV,		/* 7 */
	OP_GELEM,	/* 8 */
	OP_PADSV,	/* 9 */
	OP_PADAV,	/* 10 */
	OP_PADHV,	/* 11 */
	OP_PADANY,	/* 12 */
	OP_PUSHRE,	/* 13 */
	OP_RV2GV,	/* 14 */
	OP_RV2SV,	/* 15 */
	OP_AV2ARYLEN,	/* 16 */
	OP_RV2CV,	/* 17 */
	OP_ANONCODE,	/* 18 */
	OP_PROTOTYPE,	/* 19 */
	OP_REFGEN,	/* 20 */
	OP_SREFGEN,	/* 21 */
	OP_REF,		/* 22 */
	OP_BLESS,	/* 23 */
	OP_BACKTICK,	/* 24 */
	OP_GLOB,	/* 25 */
	OP_READLINE,	/* 26 */
	OP_RCATLINE,	/* 27 */
	OP_REGCMAYBE,	/* 28 */
	OP_REGCRESET,	/* 29 */
	OP_REGCOMP,	/* 30 */
	OP_MATCH,	/* 31 */
	OP_QR,		/* 32 */
	OP_SUBST,	/* 33 */
	OP_SUBSTCONT,	/* 34 */
	OP_TRANS,	/* 35 */
	OP_SASSIGN,	/* 36 */
	OP_AASSIGN,	/* 37 */
	OP_CHOP,	/* 38 */
	OP_SCHOP,	/* 39 */
	OP_CHOMP,	/* 40 */
	OP_SCHOMP,	/* 41 */
	OP_DEFINED,	/* 42 */
	OP_UNDEF,	/* 43 */
	OP_STUDY,	/* 44 */
	OP_POS,		/* 45 */
	OP_PREINC,	/* 46 */
	OP_I_PREINC,	/* 47 */
	OP_PREDEC,	/* 48 */
	OP_I_PREDEC,	/* 49 */
	OP_POSTINC,	/* 50 */
	OP_I_POSTINC,	/* 51 */
	OP_POSTDEC,	/* 52 */
	OP_I_POSTDEC,	/* 53 */
	OP_POW,		/* 54 */
	OP_MULTIPLY,	/* 55 */
	OP_I_MULTIPLY,	/* 56 */
	OP_DIVIDE,	/* 57 */
	OP_I_DIVIDE,	/* 58 */
	OP_MODULO,	/* 59 */
	OP_I_MODULO,	/* 60 */
	OP_REPEAT,	/* 61 */
	OP_ADD,		/* 62 */
	OP_I_ADD,	/* 63 */
	OP_SUBTRACT,	/* 64 */
	OP_I_SUBTRACT,	/* 65 */
	OP_CONCAT,	/* 66 */
	OP_STRINGIFY,	/* 67 */
	OP_LEFT_SHIFT,	/* 68 */
	OP_RIGHT_SHIFT,	/* 69 */
	OP_LT,		/* 70 */
	OP_I_LT,	/* 71 */
	OP_GT,		/* 72 */
	OP_I_GT,	/* 73 */
	OP_LE,		/* 74 */
	OP_I_LE,	/* 75 */
	OP_GE,		/* 76 */
	OP_I_GE,	/* 77 */
	OP_EQ,		/* 78 */
	OP_I_EQ,	/* 79 */
	OP_NE,		/* 80 */
	OP_I_NE,	/* 81 */
	OP_NCMP,	/* 82 */
	OP_I_NCMP,	/* 83 */
	OP_SLT,		/* 84 */
	OP_SGT,		/* 85 */
	OP_SLE,		/* 86 */
	OP_SGE,		/* 87 */
	OP_SEQ,		/* 88 */
	OP_SNE,		/* 89 */
	OP_SCMP,	/* 90 */
	OP_BIT_AND,	/* 91 */
	OP_BIT_XOR,	/* 92 */
	OP_BIT_OR,	/* 93 */
	OP_NEGATE,	/* 94 */
	OP_I_NEGATE,	/* 95 */
	OP_NOT,		/* 96 */
	OP_COMPLEMENT,	/* 97 */
	OP_ATAN2,	/* 98 */
	OP_SIN,		/* 99 */
	OP_COS,		/* 100 */
	OP_RAND,	/* 101 */
	OP_SRAND,	/* 102 */
	OP_EXP,		/* 103 */
	OP_LOG,		/* 104 */
	OP_SQRT,	/* 105 */
	OP_INT,		/* 106 */
	OP_HEX,		/* 107 */
	OP_OCT,		/* 108 */
	OP_ABS,		/* 109 */
	OP_LENGTH,	/* 110 */
	OP_SUBSTR,	/* 111 */
	OP_VEC,		/* 112 */
	OP_INDEX,	/* 113 */
	OP_RINDEX,	/* 114 */
	OP_SPRINTF,	/* 115 */
	OP_FORMLINE,	/* 116 */
	OP_ORD,		/* 117 */
	OP_CHR,		/* 118 */
	OP_CRYPT,	/* 119 */
	OP_UCFIRST,	/* 120 */
	OP_LCFIRST,	/* 121 */
	OP_UC,		/* 122 */
	OP_LC,		/* 123 */
	OP_QUOTEMETA,	/* 124 */
	OP_RV2AV,	/* 125 */
	OP_AELEMFAST,	/* 126 */
	OP_AELEM,	/* 127 */
	OP_ASLICE,	/* 128 */
	OP_EACH,	/* 129 */
	OP_VALUES,	/* 130 */
	OP_KEYS,	/* 131 */
	OP_DELETE,	/* 132 */
	OP_EXISTS,	/* 133 */
	OP_RV2HV,	/* 134 */
	OP_HELEM,	/* 135 */
	OP_HSLICE,	/* 136 */
	OP_UNPACK,	/* 137 */
	OP_PACK,	/* 138 */
	OP_SPLIT,	/* 139 */
	OP_JOIN,	/* 140 */
	OP_LIST,	/* 141 */
	OP_LSLICE,	/* 142 */
	OP_ANONLIST,	/* 143 */
	OP_ANONHASH,	/* 144 */
	OP_SPLICE,	/* 145 */
	OP_PUSH,	/* 146 */
	OP_POP,		/* 147 */
	OP_SHIFT,	/* 148 */
	OP_UNSHIFT,	/* 149 */
	OP_SORT,	/* 150 */
	OP_REVERSE,	/* 151 */
	OP_GREPSTART,	/* 152 */
	OP_GREPWHILE,	/* 153 */
	OP_MAPSTART,	/* 154 */
	OP_MAPWHILE,	/* 155 */
	OP_RANGE,	/* 156 */
	OP_FLIP,	/* 157 */
	OP_FLOP,	/* 158 */
	OP_AND,		/* 159 */
	OP_OR,		/* 160 */
	OP_XOR,		/* 161 */
	OP_COND_EXPR,	/* 162 */
	OP_ANDASSIGN,	/* 163 */
	OP_ORASSIGN,	/* 164 */
	OP_METHOD,	/* 165 */
	OP_ENTERSUB,	/* 166 */
	OP_LEAVESUB,	/* 167 */
	OP_LEAVESUBLV,	/* 168 */
	OP_CALLER,	/* 169 */
	OP_WARN,	/* 170 */
	OP_DIE,		/* 171 */
	OP_RESET,	/* 172 */
	OP_LINESEQ,	/* 173 */
	OP_NEXTSTATE,	/* 174 */
	OP_DBSTATE,	/* 175 */
	OP_UNSTACK,	/* 176 */
	OP_ENTER,	/* 177 */
	OP_LEAVE,	/* 178 */
	OP_SCOPE,	/* 179 */
	OP_ENTERITER,	/* 180 */
	OP_ITER,	/* 181 */
	OP_ENTERLOOP,	/* 182 */
	OP_LEAVELOOP,	/* 183 */
	OP_RETURN,	/* 184 */
	OP_LAST,	/* 185 */
	OP_NEXT,	/* 186 */
	OP_REDO,	/* 187 */
	OP_DUMP,	/* 188 */
	OP_GOTO,	/* 189 */
	OP_EXIT,	/* 190 */
	OP_OPEN,	/* 191 */
	OP_CLOSE,	/* 192 */
	OP_PIPE_OP,	/* 193 */
	OP_FILENO,	/* 194 */
	OP_UMASK,	/* 195 */
	OP_BINMODE,	/* 196 */
	OP_TIE,		/* 197 */
	OP_UNTIE,	/* 198 */
	OP_TIED,	/* 199 */
	OP_DBMOPEN,	/* 200 */
	OP_DBMCLOSE,	/* 201 */
	OP_SSELECT,	/* 202 */
	OP_SELECT,	/* 203 */
	OP_GETC,	/* 204 */
	OP_READ,	/* 205 */
	OP_ENTERWRITE,	/* 206 */
	OP_LEAVEWRITE,	/* 207 */
	OP_PRTF,	/* 208 */
	OP_PRINT,	/* 209 */
	OP_SYSOPEN,	/* 210 */
	OP_SYSSEEK,	/* 211 */
	OP_SYSREAD,	/* 212 */
	OP_SYSWRITE,	/* 213 */
	OP_SEND,	/* 214 */
	OP_RECV,	/* 215 */
	OP_EOF,		/* 216 */
	OP_TELL,	/* 217 */
	OP_SEEK,	/* 218 */
	OP_TRUNCATE,	/* 219 */
	OP_FCNTL,	/* 220 */
	OP_IOCTL,	/* 221 */
	OP_FLOCK,	/* 222 */
	OP_SOCKET,	/* 223 */
	OP_SOCKPAIR,	/* 224 */
	OP_BIND,	/* 225 */
	OP_CONNECT,	/* 226 */
	OP_LISTEN,	/* 227 */
	OP_ACCEPT,	/* 228 */
	OP_SHUTDOWN,	/* 229 */
	OP_GSOCKOPT,	/* 230 */
	OP_SSOCKOPT,	/* 231 */
	OP_GETSOCKNAME,	/* 232 */
	OP_GETPEERNAME,	/* 233 */
	OP_LSTAT,	/* 234 */
	OP_STAT,	/* 235 */
	OP_FTRREAD,	/* 236 */
	OP_FTRWRITE,	/* 237 */
	OP_FTREXEC,	/* 238 */
	OP_FTEREAD,	/* 239 */
	OP_FTEWRITE,	/* 240 */
	OP_FTEEXEC,	/* 241 */
	OP_FTIS,	/* 242 */
	OP_FTEOWNED,	/* 243 */
	OP_FTROWNED,	/* 244 */
	OP_FTZERO,	/* 245 */
	OP_FTSIZE,	/* 246 */
	OP_FTMTIME,	/* 247 */
	OP_FTATIME,	/* 248 */
	OP_FTCTIME,	/* 249 */
	OP_FTSOCK,	/* 250 */
	OP_FTCHR,	/* 251 */
	OP_FTBLK,	/* 252 */
	OP_FTFILE,	/* 253 */
	OP_FTDIR,	/* 254 */
	OP_FTPIPE,	/* 255 */
	OP_FTLINK,	/* 256 */
	OP_FTSUID,	/* 257 */
	OP_FTSGID,	/* 258 */
	OP_FTSVTX,	/* 259 */
	OP_FTTTY,	/* 260 */
	OP_FTTEXT,	/* 261 */
	OP_FTBINARY,	/* 262 */
	OP_CHDIR,	/* 263 */
	OP_CHOWN,	/* 264 */
	OP_CHROOT,	/* 265 */
	OP_UNLINK,	/* 266 */
	OP_CHMOD,	/* 267 */
	OP_UTIME,	/* 268 */
	OP_RENAME,	/* 269 */
	OP_LINK,	/* 270 */
	OP_SYMLINK,	/* 271 */
	OP_READLINK,	/* 272 */
	OP_MKDIR,	/* 273 */
	OP_RMDIR,	/* 274 */
	OP_OPEN_DIR,	/* 275 */
	OP_READDIR,	/* 276 */
	OP_TELLDIR,	/* 277 */
	OP_SEEKDIR,	/* 278 */
	OP_REWINDDIR,	/* 279 */
	OP_CLOSEDIR,	/* 280 */
	OP_FORK,	/* 281 */
	OP_WAIT,	/* 282 */
	OP_WAITPID,	/* 283 */
	OP_SYSTEM,	/* 284 */
	OP_EXEC,	/* 285 */
	OP_KILL,	/* 286 */
	OP_GETPPID,	/* 287 */
	OP_GETPGRP,	/* 288 */
	OP_SETPGRP,	/* 289 */
	OP_GETPRIORITY,	/* 290 */
	OP_SETPRIORITY,	/* 291 */
	OP_TIME,	/* 292 */
	OP_TMS,		/* 293 */
	OP_LOCALTIME,	/* 294 */
	OP_GMTIME,	/* 295 */
	OP_ALARM,	/* 296 */
	OP_SLEEP,	/* 297 */
	OP_SHMGET,	/* 298 */
	OP_SHMCTL,	/* 299 */
	OP_SHMREAD,	/* 300 */
	OP_SHMWRITE,	/* 301 */
	OP_MSGGET,	/* 302 */
	OP_MSGCTL,	/* 303 */
	OP_MSGSND,	/* 304 */
	OP_MSGRCV,	/* 305 */
	OP_SEMGET,	/* 306 */
	OP_SEMCTL,	/* 307 */
	OP_SEMOP,	/* 308 */
	OP_REQUIRE,	/* 309 */
	OP_DOFILE,	/* 310 */
	OP_ENTEREVAL,	/* 311 */
	OP_LEAVEEVAL,	/* 312 */
	OP_ENTERTRY,	/* 313 */
	OP_LEAVETRY,	/* 314 */
	OP_GHBYNAME,	/* 315 */
	OP_GHBYADDR,	/* 316 */
	OP_GHOSTENT,	/* 317 */
	OP_GNBYNAME,	/* 318 */
	OP_GNBYADDR,	/* 319 */
	OP_GNETENT,	/* 320 */
	OP_GPBYNAME,	/* 321 */
	OP_GPBYNUMBER,	/* 322 */
	OP_GPROTOENT,	/* 323 */
	OP_GSBYNAME,	/* 324 */
	OP_GSBYPORT,	/* 325 */
	OP_GSERVENT,	/* 326 */
	OP_SHOSTENT,	/* 327 */
	OP_SNETENT,	/* 328 */
	OP_SPROTOENT,	/* 329 */
	OP_SSERVENT,	/* 330 */
	OP_EHOSTENT,	/* 331 */
	OP_ENETENT,	/* 332 */
	OP_EPROTOENT,	/* 333 */
	OP_ESERVENT,	/* 334 */
	OP_GPWNAM,	/* 335 */
	OP_GPWUID,	/* 336 */
	OP_GPWENT,	/* 337 */
	OP_SPWENT,	/* 338 */
	OP_EPWENT,	/* 339 */
	OP_GGRNAM,	/* 340 */
	OP_GGRGID,	/* 341 */
	OP_GGRENT,	/* 342 */
	OP_SGRENT,	/* 343 */
	OP_EGRENT,	/* 344 */
	OP_GETLOGIN,	/* 345 */
	OP_SYSCALL,	/* 346 */
	OP_LOCK,	/* 347 */
	OP_THREADSV,	/* 348 */
	OP_SETSTATE,	/* 349 */
	OP_METHOD_NAMED,/* 350 */
	OP_max		
} opcode;

#define MAXO 351


#define OP_IS_SOCKET(op)	\
	((op) == OP_ACCEPT || \
	 (op) == OP_BIND || \
	 (op) == OP_CONNECT || \
	 (op) == OP_GETPEERNAME || \
	 (op) == OP_GETSOCKNAME || \
	 (op) == OP_GSOCKOPT || \
	 (op) == OP_LISTEN || \
	 (op) == OP_RECV || \
	 (op) == OP_SEND || \
	 (op) == OP_SHUTDOWN || \
	 (op) == OP_SOCKET || \
	 (op) == OP_SOCKPAIR || \
	 (op) == OP_SSOCKOPT)


#define OP_IS_FILETEST(op)	\
	((op) == OP_FTATIME || \
	 (op) == OP_FTBINARY || \
	 (op) == OP_FTBLK || \
	 (op) == OP_FTCHR || \
	 (op) == OP_FTCTIME || \
	 (op) == OP_FTDIR || \
	 (op) == OP_FTEEXEC || \
	 (op) == OP_FTEOWNED || \
	 (op) == OP_FTEREAD || \
	 (op) == OP_FTEWRITE || \
	 (op) == OP_FTFILE || \
	 (op) == OP_FTIS || \
	 (op) == OP_FTLINK || \
	 (op) == OP_FTMTIME || \
	 (op) == OP_FTPIPE || \
	 (op) == OP_FTREXEC || \
	 (op) == OP_FTROWNED || \
	 (op) == OP_FTRREAD || \
	 (op) == OP_FTRWRITE || \
	 (op) == OP_FTSGID || \
	 (op) == OP_FTSIZE || \
	 (op) == OP_FTSOCK || \
	 (op) == OP_FTSUID || \
	 (op) == OP_FTSVTX || \
	 (op) == OP_FTTEXT || \
	 (op) == OP_FTTTY || \
	 (op) == OP_FTZERO)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perl.h ===
/*    perl.h
 *
 *    Copyright (c) 1987-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */
#ifndef H_PERL
#define H_PERL 1

#ifdef PERL_FOR_X2P
/*
 * This file is being used for x2p stuff. 
 * Above symbol is defined via -D in 'x2p/Makefile.SH'
 * Decouple x2p stuff from some of perls more extreme eccentricities. 
 */
#undef MULTIPLICITY
#undef USE_STDIO
#define USE_STDIO
#endif /* PERL_FOR_X2P */

#define VOIDUSED 1
#include "config.h"

#if defined(USE_ITHREADS) && defined(USE_5005THREADS)
#  include "error: USE_ITHREADS and USE_5005THREADS are incompatible"
#endif

/* XXX This next guard can disappear if the sources are revised
   to use USE_5005THREADS throughout. -- A.D  1/6/2000
*/
#if defined(USE_ITHREADS) && defined(USE_THREADS)
#  include "error: USE_ITHREADS and USE_THREADS are incompatible"
#endif

/* See L<perlguts/"The Perl API"> for detailed notes on
 * PERL_IMPLICIT_CONTEXT and PERL_IMPLICIT_SYS */

#ifdef USE_ITHREADS
#  if !defined(MULTIPLICITY) && !defined(PERL_OBJECT)
#    define MULTIPLICITY
#  endif
#endif

#ifdef USE_THREADS
#  ifndef PERL_IMPLICIT_CONTEXT
#    define PERL_IMPLICIT_CONTEXT
#  endif
#endif

#if defined(MULTIPLICITY)
#  ifndef PERL_IMPLICIT_CONTEXT
#    define PERL_IMPLICIT_CONTEXT
#  endif
#endif

#ifdef PERL_CAPI
#  undef PERL_OBJECT
#  ifndef MULTIPLICITY
#    define MULTIPLICITY
#  endif
#  ifndef PERL_IMPLICIT_CONTEXT
#    define PERL_IMPLICIT_CONTEXT
#  endif
#  ifndef PERL_IMPLICIT_SYS
#    define PERL_IMPLICIT_SYS
#  endif
#endif

#ifdef PERL_OBJECT
#  ifndef PERL_IMPLICIT_CONTEXT
#    define PERL_IMPLICIT_CONTEXT
#  endif
#  ifndef PERL_IMPLICIT_SYS
#    define PERL_IMPLICIT_SYS
#  endif
#endif

#ifdef PERL_OBJECT

/* PERL_OBJECT explained  - DickH and DougL @ ActiveState.com

Defining PERL_OBJECT turns on creation of a C++ object that
contains all writable core perl global variables and functions.
Stated another way, all necessary global variables and functions
are members of a big C++ object. This object's class is CPerlObj.
This allows a Perl Host to have multiple, independent perl
interpreters in the same process space. This is very important on
Win32 systems as the overhead of process creation is quite high --
this could be even higher than the script compile and execute time
for small scripts.

The perl executable implementation on Win32 is composed of perl.exe
(the Perl Host) and perlX.dll. (the Perl Core). This allows the
same Perl Core to easily be embedded in other applications that use
the perl interpreter.

+-----------+
| Perl Host |
+-----------+
      ^
      |
      v
+-----------+   +-----------+
| Perl Core |<->| Extension |
+-----------+   +-----------+ ...

Defining PERL_OBJECT has the following effects:

PERL CORE
1. CPerlObj is defined (this is the PERL_OBJECT)
2. all static functions that needed to access either global
variables or functions needed are made member functions
3. all writable static variables are made member variables
4. all global variables and functions are defined as:
	#define var CPerlObj::PL_var
	#define func CPerlObj::Perl_func
	* these are in embed.h
This necessitated renaming some local variables and functions that
had the same name as a global variable or function. This was
probably a _good_ thing anyway.


EXTENSIONS
1. Access to global variables and perl functions is through a
pointer to the PERL_OBJECT. This pointer type is CPerlObj*. This is
made transparent to extension developers by the following macros:
	#define var pPerl->PL_var
	#define func pPerl->Perl_func
	* these are done in objXSUB.h
This requires that the extension be compiled as C++, which means
that the code must be ANSI C and not K&R C. For K&R extensions,
please see the C API notes located in Win32/GenCAPI.pl. This script
creates a perlCAPI.lib that provides a K & R compatible C interface
to the PERL_OBJECT.
2. Local variables and functions cannot have the same name as perl's
variables or functions since the macros will redefine these. Look for
this if you get some strange error message and it does not look like
the code that you had written. This often happens with variables that
are local to a function.

PERL HOST
1. The perl host is linked with perlX.lib to get perl_alloc. This
function will return a pointer to CPerlObj (the PERL_OBJECT). It
takes pointers to the various PerlXXX_YYY interfaces (see iperlsys.h
for more information on this).
2. The perl host calls the same functions as normally would be
called in setting up and running a perl script, except that the
functions are now member functions of the PERL_OBJECT.

*/


class CPerlObj;

#define STATIC
#define CPERLscope(x)		CPerlObj::x
#define CALL_FPTR(fptr)		(aTHXo->*fptr)

#define pTHXo			CPerlObj *pPerl
#define pTHXo_			pTHXo,
#define aTHXo			this
#define aTHXo_			this,
#define PERL_OBJECT_THIS	aTHXo
#define PERL_OBJECT_THIS_	aTHXo_
#define dTHXoa(a)		pTHXo = (CPerlObj*)a
#define dTHXo			pTHXo = PERL_GET_THX

#define pTHXx		void
#define pTHXx_
#define aTHXx
#define aTHXx_

#else /* !PERL_OBJECT */

#ifdef PERL_IMPLICIT_CONTEXT
#  ifdef USE_THREADS
struct perl_thread;
#    define pTHX	register struct perl_thread *thr
#    define aTHX	thr
#    define dTHR	dNOOP /* only backward compatibility */
#    define dTHXa(a)	pTHX = (struct perl_thread*)a
#  else
#    ifndef MULTIPLICITY
#      define MULTIPLICITY
#    endif
#    define pTHX	register PerlInterpreter *my_perl
#    define aTHX	my_perl
#    define dTHXa(a)	pTHX = (PerlInterpreter*)a
#  endif
#  define dTHX		pTHX = PERL_GET_THX
#  define pTHX_		pTHX,
#  define aTHX_		aTHX,
#  define pTHX_1	2	
#  define pTHX_2	3
#  define pTHX_3	4
#  define pTHX_4	5
#endif

#define STATIC static
#define CPERLscope(x) x
#define CPERLarg void
#define CPERLarg_
#define _CPERLarg
#define PERL_OBJECT_THIS
#define _PERL_OBJECT_THIS
#define PERL_OBJECT_THIS_
#define CALL_FPTR(fptr) (*fptr)

#endif /* PERL_OBJECT */

#define CALLRUNOPS  CALL_FPTR(PL_runops)
#define CALLREGCOMP CALL_FPTR(PL_regcompp)
#define CALLREGEXEC CALL_FPTR(PL_regexecp)
#define CALLREG_INTUIT_START CALL_FPTR(PL_regint_start)
#define CALLREG_INTUIT_STRING CALL_FPTR(PL_regint_string)
#define CALLREGFREE CALL_FPTR(PL_regfree)

#ifdef PERL_FLEXIBLE_EXCEPTIONS
#  define CALLPROTECT CALL_FPTR(PL_protect)
#endif

#define NOOP (void)0
#define dNOOP extern int Perl___notused

#ifndef pTHX
#  define pTHX		void
#  define pTHX_
#  define aTHX
#  define aTHX_
#  define dTHXa(a)	dNOOP
#  define dTHX		dNOOP
#  define pTHX_1	1	
#  define pTHX_2	2
#  define pTHX_3	3
#  define pTHX_4	4
#endif

#ifndef pTHXo
#  define pTHXo		pTHX
#  define pTHXo_	pTHX_
#  define aTHXo		aTHX
#  define aTHXo_	aTHX_
#  define dTHXo		dTHX
#  define dTHXoa(x)	dTHXa(x)
#endif

#ifndef pTHXx
#  define pTHXx		register PerlInterpreter *my_perl
#  define pTHXx_	pTHXx,
#  define aTHXx		my_perl
#  define aTHXx_	aTHXx,
#  define dTHXx		dTHX
#endif

/* Under PERL_IMPLICIT_SYS (used in Windows for fork emulation)
 * PerlIO_foo() expands to PL_StdIO->pFOO(PL_StdIO, ...).
 * dTHXs is therefore needed for all functions using PerlIO_foo(). */
#ifdef PERL_IMPLICIT_SYS
#  define dTHXs		dTHX
#else
#  define dTHXs		dNOOP
#endif

#undef START_EXTERN_C
#undef END_EXTERN_C
#undef EXTERN_C
#ifdef __cplusplus
#  define START_EXTERN_C extern "C" {
#  define END_EXTERN_C }
#  define EXTERN_C extern "C"
#else
#  define START_EXTERN_C 
#  define END_EXTERN_C 
#  define EXTERN_C extern
#endif

#ifdef OP_IN_REGISTER
#  ifdef __GNUC__
#    define stringify_immed(s) #s
#    define stringify(s) stringify_immed(s)
register struct op *Perl_op asm(stringify(OP_IN_REGISTER));
#  endif
#endif

/*
 * STMT_START { statements; } STMT_END;
 * can be used as a single statement, as in
 * if (x) STMT_START { ... } STMT_END; else ...
 *
 * Trying to select a version that gives no warnings...
 */
#if !(defined(STMT_START) && defined(STMT_END))
# if defined(__GNUC__) && !defined(__STRICT_ANSI__) && !defined(__cplusplus)
#   define STMT_START	(void)(	/* gcc supports ``({ STATEMENTS; })'' */
#   define STMT_END	)
# else
   /* Now which other defined()s do we need here ??? */
#  if (VOIDFLAGS) && (defined(sun) || defined(__sun__))
#   define STMT_START	if (1)
#   define STMT_END	else (void)0
#  else
#   define STMT_START	do
#   define STMT_END	while (0)
#  endif
# endif
#endif

#define WITH_THX(s) STMT_START { dTHX; s; } STMT_END
#define WITH_THR(s) WITH_THX(s)

/*
 * SOFT_CAST can be used for args to prototyped functions to retain some
 * type checking; it only casts if the compiler does not know prototypes.
 */
#if defined(CAN_PROTOTYPE) && defined(DEBUGGING_COMPILE)
#define SOFT_CAST(type)	
#else
#define SOFT_CAST(type)	(type)
#endif

#ifndef BYTEORDER  /* Should never happen -- byteorder is in config.h */
#   define BYTEORDER 0x1234
#endif

/* Overall memory policy? */
#ifndef CONSERVATIVE
#   define LIBERAL 1
#endif

#if 'A' == 65 && 'I' == 73 && 'J' == 74 && 'Z' == 90
#define ASCIIish
#else
#undef  ASCIIish
#endif

/*
 * The following contortions are brought to you on behalf of all the
 * standards, semi-standards, de facto standards, not-so-de-facto standards
 * of the world, as well as all the other botches anyone ever thought of.
 * The basic theory is that if we work hard enough here, the rest of the
 * code can be a lot prettier.  Well, so much for theory.  Sorry, Henry...
 */

/* define this once if either system, instead of cluttering up the src */
#if defined(MSDOS) || defined(atarist) || defined(WIN32)
#define DOSISH 1
#endif

#if defined(__STDC__) || defined(vax11c) || defined(_AIX) || defined(__stdc__) || defined(__cplusplus) || defined( EPOC)
# define STANDARD_C 1
#endif

#if defined(__cplusplus) || defined(WIN32) || defined(__sgi) || defined(OS2) || defined(__DGUX) || defined( EPOC) || defined(__QNX__)
# define DONT_DECLARE_STD 1
#endif

#if defined(HASVOLATILE) || defined(STANDARD_C)
#   ifdef __cplusplus
#	define VOL		// to temporarily suppress warnings
#   else
#	define VOL volatile
#   endif
#else
#   define VOL
#endif

#define TAINT		(PL_tainted = TRUE)
#define TAINT_NOT	(PL_tainted = FALSE)
#define TAINT_IF(c)	if (c) { PL_tainted = TRUE; }
#define TAINT_ENV()	if (PL_tainting) { taint_env(); }
#define TAINT_PROPER(s)	if (PL_tainting) { taint_proper(Nullch, s); }

/* XXX All process group stuff is handled in pp_sys.c.  Should these 
   defines move there?  If so, I could simplify this a lot. --AD  9/96.
*/
/* Process group stuff changed from traditional BSD to POSIX.
   perlfunc.pod documents the traditional BSD-style syntax, so we'll
   try to preserve that, if possible.
*/
#ifdef HAS_SETPGID
#  define BSD_SETPGRP(pid, pgrp)	setpgid((pid), (pgrp))
#else
#  if defined(HAS_SETPGRP) && defined(USE_BSD_SETPGRP)
#    define BSD_SETPGRP(pid, pgrp)	setpgrp((pid), (pgrp))
#  else
#    ifdef HAS_SETPGRP2  /* DG/UX */
#      define BSD_SETPGRP(pid, pgrp)	setpgrp2((pid), (pgrp))
#    endif
#  endif
#endif
#if defined(BSD_SETPGRP) && !defined(HAS_SETPGRP)
#  define HAS_SETPGRP  /* Well, effectively it does . . . */
#endif

/* getpgid isn't POSIX, but at least Solaris and Linux have it, and it makes
    our life easier :-) so we'll try it.
*/
#ifdef HAS_GETPGID
#  define BSD_GETPGRP(pid)		getpgid((pid))
#else
#  if defined(HAS_GETPGRP) && defined(USE_BSD_GETPGRP)
#    define BSD_GETPGRP(pid)		getpgrp((pid))
#  else
#    ifdef HAS_GETPGRP2  /* DG/UX */
#      define BSD_GETPGRP(pid)		getpgrp2((pid))
#    endif
#  endif
#endif
#if defined(BSD_GETPGRP) && !defined(HAS_GETPGRP)
#  define HAS_GETPGRP  /* Well, effectively it does . . . */
#endif

/* These are not exact synonyms, since setpgrp() and getpgrp() may 
   have different behaviors, but perl.h used to define USE_BSDPGRP
   (prior to 5.003_05) so some extension might depend on it.
*/
#if defined(USE_BSD_SETPGRP) || defined(USE_BSD_GETPGRP)
#  ifndef USE_BSDPGRP
#    define USE_BSDPGRP
#  endif
#endif

/* HP-UX 10.X CMA (Common Multithreaded Architecure) insists that
   pthread.h must be included before all other header files.
*/
#if (defined(USE_THREADS) || defined(USE_ITHREADS)) \
    && defined(PTHREAD_H_FIRST) && defined(I_PTHREAD)
#  include <pthread.h>
#endif

#ifndef _TYPES_		/* If types.h defines this it's easy. */
#   ifndef major		/* Does everyone's types.h define this? */
#	include <sys/types.h>
#   endif
#endif

#ifdef __cplusplus
#  ifndef I_STDARG
#    define I_STDARG 1
#  endif
#endif

#ifdef I_STDARG
#  include <stdarg.h>
#else
#  ifdef I_VARARGS
#    include <varargs.h>
#  endif
#endif

#ifdef USE_NEXT_CTYPE

#if NX_CURRENT_COMPILER_RELEASE >= 500
#  include <bsd/ctypes.h>
#else
#  if NX_CURRENT_COMPILER_RELEASE >= 400
#    include <objc/NXCType.h>
#  else /*  NX_CURRENT_COMPILER_RELEASE < 400 */
#    include <appkit/NXCType.h>
#  endif /*  NX_CURRENT_COMPILER_RELEASE >= 400 */
#endif /*  NX_CURRENT_COMPILER_RELEASE >= 500 */

#else /* !USE_NEXT_CTYPE */
#include <ctype.h>
#endif /* USE_NEXT_CTYPE */

#ifdef METHOD 	/* Defined by OSF/1 v3.0 by ctype.h */
#undef METHOD
#endif

#ifdef I_LOCALE
#   include <locale.h>
#endif

#if !defined(NO_LOCALE) && defined(HAS_SETLOCALE)
#   define USE_LOCALE
#   if !defined(NO_LOCALE_COLLATE) && defined(LC_COLLATE) \
       && defined(HAS_STRXFRM)
#	define USE_LOCALE_COLLATE
#   endif
#   if !defined(NO_LOCALE_CTYPE) && defined(LC_CTYPE)
#	define USE_LOCALE_CTYPE
#   endif
#   if !defined(NO_LOCALE_NUMERIC) && defined(LC_NUMERIC)
#	define USE_LOCALE_NUMERIC
#   endif
#endif /* !NO_LOCALE && HAS_SETLOCALE */

#include <setjmp.h>

#ifdef I_SYS_PARAM
#   ifdef PARAM_NEEDS_TYPES
#	include <sys/types.h>
#   endif
#   include <sys/param.h>
#endif

/* Use all the "standard" definitions? */
#if defined(STANDARD_C) && defined(I_STDLIB)
#   include <stdlib.h>
#endif

/* If this causes problems, set i_unistd=undef in the hint file.  */
#ifdef I_UNISTD
#   include <unistd.h>
#endif

#ifdef PERL_MICRO /* Last chance to export Perl_my_swap */
#  define MYSWAP
#endif

#if !defined(PERL_FOR_X2P) && !defined(WIN32)
#  include "embed.h"
#endif

#define MEM_SIZE Size_t

#if defined(STANDARD_C) && defined(I_STDDEF)
#   include <stddef.h>
#   define STRUCT_OFFSET(s,m)  offsetof(s,m)
#else
#   define STRUCT_OFFSET(s,m)  (Size_t)(&(((s *)0)->m))
#endif

#if defined(I_STRING) || defined(__cplusplus)
#   include <string.h>
#else
#   include <strings.h>
#endif

/* This comes after <stdlib.h> so we don't try to change the standard
 * library prototypes; we'll use our own in proto.h instead. */

#ifdef MYMALLOC
#  ifdef PERL_POLLUTE_MALLOC
#   ifndef PERL_EXTMALLOC_DEF
#    define Perl_malloc		malloc
#    define Perl_calloc		calloc
#    define Perl_realloc	realloc
#    define Perl_mfree		free
#   endif
#  else
#    define EMBEDMYMALLOC	/* for compatibility */
#  endif
Malloc_t Perl_malloc (MEM_SIZE nbytes);
Malloc_t Perl_calloc (MEM_SIZE elements, MEM_SIZE size);
Malloc_t Perl_realloc (Malloc_t where, MEM_SIZE nbytes);
/* 'mfree' rather than 'free', since there is already a 'perl_free'
 * that causes clashes with case-insensitive linkers */
Free_t   Perl_mfree (Malloc_t where);

typedef struct perl_mstats perl_mstats_t;

#  define safemalloc  Perl_malloc
#  define safecalloc  Perl_calloc
#  define saferealloc Perl_realloc
#  define safefree    Perl_mfree
#else  /* MYMALLOC */
#  define safemalloc  safesysmalloc
#  define safecalloc  safesyscalloc
#  define saferealloc safesysrealloc
#  define safefree    safesysfree
#endif /* MYMALLOC */

#if !defined(HAS_STRCHR) && defined(HAS_INDEX) && !defined(strchr)
#define strchr index
#define strrchr rindex
#endif

#ifdef I_MEMORY
#  include <memory.h>
#endif

#ifdef HAS_MEMCPY
#  if !defined(STANDARD_C) && !defined(I_STRING) && !defined(I_MEMORY)
#    ifndef memcpy
        extern char * memcpy (char*, char*, int);
#    endif
#  endif
#else
#   ifndef memcpy
#	ifdef HAS_BCOPY
#	    define memcpy(d,s,l) bcopy(s,d,l)
#	else
#	    define memcpy(d,s,l) my_bcopy(s,d,l)
#	endif
#   endif
#endif /* HAS_MEMCPY */

#ifdef HAS_MEMSET
#  if !defined(STANDARD_C) && !defined(I_STRING) && !defined(I_MEMORY)
#    ifndef memset
	extern char *memset (char*, int, int);
#    endif
#  endif
#else
#  define memset(d,c,l) my_memset(d,c,l)
#endif /* HAS_MEMSET */

#if !defined(HAS_MEMMOVE) && !defined(memmove)
#   if defined(HAS_BCOPY) && defined(HAS_SAFE_BCOPY)
#	define memmove(d,s,l) bcopy(s,d,l)
#   else
#	if defined(HAS_MEMCPY) && defined(HAS_SAFE_MEMCPY)
#	    define memmove(d,s,l) memcpy(d,s,l)
#	else
#	    define memmove(d,s,l) my_bcopy(s,d,l)
#	endif
#   endif
#endif

#if defined(mips) && defined(ultrix) && !defined(__STDC__)
#   undef HAS_MEMCMP
#endif

#if defined(HAS_MEMCMP) && defined(HAS_SANE_MEMCMP)
#  if !defined(STANDARD_C) && !defined(I_STRING) && !defined(I_MEMORY)
#    ifndef memcmp
	extern int memcmp (char*, char*, int);
#    endif
#  endif
#  ifdef BUGGY_MSC
  #  pragma function(memcmp)
#  endif
#else
#   ifndef memcmp
#	define memcmp 	my_memcmp
#   endif
#endif /* HAS_MEMCMP && HAS_SANE_MEMCMP */

#ifndef memzero
#   ifdef HAS_MEMSET
#	define memzero(d,l) memset(d,0,l)
#   else
#	ifdef HAS_BZERO
#	    define memzero(d,l) bzero(d,l)
#	else
#	    define memzero(d,l) my_bzero(d,l)
#	endif
#   endif
#endif

#ifndef memchr
#   ifndef HAS_MEMCHR
#       define memchr(s,c,n) ninstr((char*)(s), ((char*)(s)) + n, &(c), &(c) + 1)
#   endif
#endif

#ifndef HAS_BCMP
#   ifndef bcmp
#	define bcmp(s1,s2,l) memcmp(s1,s2,l)
#   endif
#endif /* !HAS_BCMP */

#ifdef I_NETINET_IN
#   include <netinet/in.h>
#endif

#ifdef I_ARPA_INET
#   include <arpa/inet.h>
#endif

#if defined(SF_APPEND) && defined(USE_SFIO) && defined(I_SFIO)
/* <sfio.h> defines SF_APPEND and <sys/stat.h> might define SF_APPEND
 * (the neo-BSD seem to do this).  */
#   undef SF_APPEND
#endif

#ifdef I_SYS_STAT
#   include <sys/stat.h>
#endif

/* The stat macros for Amdahl UTS, Unisoft System V/88 (and derivatives
   like UTekV) are broken, sometimes giving false positives.  Undefine
   them here and let the code below set them to proper values.

   The ghs macro stands for GreenHills Software C-1.8.5 which
   is the C compiler for sysV88 and the various derivatives.
   This header file bug is corrected in gcc-2.5.8 and later versions.
   --Kaveh Ghazi (ghazi@noc.rutgers.edu) 10/3/94.  */

#if defined(uts) || (defined(m88k) && defined(ghs))
#   undef S_ISDIR
#   undef S_ISCHR
#   undef S_ISBLK
#   undef S_ISREG
#   undef S_ISFIFO
#   undef S_ISLNK
#endif

#ifdef I_TIME
#   include <time.h>
#endif

#ifdef I_SYS_TIME
#   ifdef I_SYS_TIME_KERNEL
#	define KERNEL
#   endif
#   include <sys/time.h>
#   ifdef I_SYS_TIME_KERNEL
#	undef KERNEL
#   endif
#endif

#if defined(HAS_TIMES) && defined(I_SYS_TIMES)
#    include <sys/times.h>
#endif

#if defined(HAS_STRERROR) && (!defined(HAS_MKDIR) || !defined(HAS_RMDIR))
#   undef HAS_STRERROR
#endif

#include <errno.h>

#if defined(WIN32) && (defined(PERL_OBJECT) || defined(PERL_IMPLICIT_SYS) || defined(PERL_CAPI))
#  define WIN32SCK_IS_STDSCK		/* don't pull in custom wsock layer */
#endif

#if defined(HAS_SOCKET) && !defined(VMS) /* VMS handles sockets via vmsish.h */
# include <sys/socket.h>
# if defined(USE_SOCKS) && defined(I_SOCKS)
#   if !defined(INCLUDE_PROTOTYPES)
#       define INCLUDE_PROTOTYPES /* for <socks.h> */
#       define PERL_SOCKS_NEED_PROTOTYPES
#   endif
#   ifdef USE_THREADS
#       define PERL_USE_THREADS /* store our value */
#       undef USE_THREADS
#   endif
#   include <socks.h>
#   ifdef USE_THREADS
#       undef USE_THREADS /* socks.h does this on its own */
#   endif
#   ifdef PERL_USE_THREADS
#       define USE_THREADS /* restore our value */
#       undef PERL_USE_THREADS
#   endif
#   ifdef PERL_SOCKS_NEED_PROTOTYPES /* keep cpp space clean */
#       undef INCLUDE_PROTOTYPES
#       undef PERL_SOCKS_NEED_PROTOTYPES
#   endif
#   ifdef USE_64_BIT_ALL
#       define SOCKS_64BIT_BUG /* until proven otherwise */
#   endif
# endif 
# ifdef I_NETDB
#  include <netdb.h>
# endif
# ifndef ENOTSOCK
#  ifdef I_NET_ERRNO
#   include <net/errno.h>
#  endif
# endif
#endif

#ifdef SETERRNO
# undef SETERRNO  /* SOCKS might have defined this */
#endif

#ifdef VMS
#   define SETERRNO(errcode,vmserrcode) \
	STMT_START {			\
	    set_errno(errcode);		\
	    set_vaxc_errno(vmserrcode);	\
	} STMT_END
#else
#   define SETERRNO(errcode,vmserrcode) (errno = (errcode))
#endif

#ifdef USE_THREADS
#  define ERRSV (thr->errsv)
#  define DEFSV THREADSV(0)
#  define SAVE_DEFSV save_threadsv(0)
#else
#  define ERRSV GvSV(PL_errgv)
#  define DEFSV GvSV(PL_defgv)
#  define SAVE_DEFSV SAVESPTR(GvSV(PL_defgv))
#endif /* USE_THREADS */

#define ERRHV GvHV(PL_errgv)	/* XXX unused, here for compatibility */

#ifndef errno
	extern int errno;     /* ANSI allows errno to be an lvalue expr.
			       * For example in multithreaded environments
			       * something like this might happen:
			       * extern int *_errno(void);
			       * #define errno (*_errno()) */
#endif

#ifdef HAS_STRERROR
#       ifdef VMS
	char *strerror (int,...);
#       else
#ifndef DONT_DECLARE_STD
	char *strerror (int);
#endif
#       endif
#       ifndef Strerror
#           define Strerror strerror
#       endif
#else
#    ifdef HAS_SYS_ERRLIST
	extern int sys_nerr;
	extern char *sys_errlist[];
#       ifndef Strerror
#           define Strerror(e) \
		((e) < 0 || (e) >= sys_nerr ? "(unknown)" : sys_errlist[e])
#       endif
#   endif
#endif

#ifdef I_SYS_IOCTL
#   ifndef _IOCTL_
#	include <sys/ioctl.h>
#   endif
#endif

#if defined(mc300) || defined(mc500) || defined(mc700) || defined(mc6000)
#   ifdef HAS_SOCKETPAIR
#	undef HAS_SOCKETPAIR
#   endif
#   ifdef I_NDBM
#	undef I_NDBM
#   endif
#endif

#if INTSIZE == 2
#   define htoni htons
#   define ntohi ntohs
#else
#   define htoni htonl
#   define ntohi ntohl
#endif

/* Configure already sets Direntry_t */
#if defined(I_DIRENT)
#   include <dirent.h>
    /* NeXT needs dirent + sys/dir.h */
#   if  defined(I_SYS_DIR) && (defined(NeXT) || defined(__NeXT__))
#	include <sys/dir.h>
#   endif
#else
#   ifdef I_SYS_NDIR
#	include <sys/ndir.h>
#   else
#	ifdef I_SYS_DIR
#	    ifdef hp9000s500
#		include <ndir.h>	/* may be wrong in the future */
#	    else
#		include <sys/dir.h>
#	    endif
#	endif
#   endif
#endif

#ifdef FPUTS_BOTCH
/* work around botch in SunOS 4.0.1 and 4.0.2 */
#   ifndef fputs
#	define fputs(sv,fp) fprintf(fp,"%s",sv)
#   endif
#endif

/*
 * The following gobbledygook brought to you on behalf of __STDC__.
 * (I could just use #ifndef __STDC__, but this is more bulletproof
 * in the face of half-implementations.)
 */

#ifdef I_SYSMODE
#include <sys/mode.h>
#endif

#ifndef S_IFMT
#   ifdef _S_IFMT
#	define S_IFMT _S_IFMT
#   else
#	define S_IFMT 0170000
#   endif
#endif

#ifndef S_ISDIR
#   define S_ISDIR(m) ((m & S_IFMT) == S_IFDIR)
#endif

#ifndef S_ISCHR
#   define S_ISCHR(m) ((m & S_IFMT) == S_IFCHR)
#endif

#ifndef S_ISBLK
#   ifdef S_IFBLK
#	define S_ISBLK(m) ((m & S_IFMT) == S_IFBLK)
#   else
#	define S_ISBLK(m) (0)
#   endif
#endif

#ifndef S_ISREG
#   define S_ISREG(m) ((m & S_IFMT) == S_IFREG)
#endif

#ifndef S_ISFIFO
#   ifdef S_IFIFO
#	define S_ISFIFO(m) ((m & S_IFMT) == S_IFIFO)
#   else
#	define S_ISFIFO(m) (0)
#   endif
#endif

#ifndef S_ISLNK
#   ifdef _S_ISLNK
#	define S_ISLNK(m) _S_ISLNK(m)
#   else
#	ifdef _S_IFLNK
#	    define S_ISLNK(m) ((m & S_IFMT) == _S_IFLNK)
#	else
#	    ifdef S_IFLNK
#		define S_ISLNK(m) ((m & S_IFMT) == S_IFLNK)
#	    else
#		define S_ISLNK(m) (0)
#	    endif
#	endif
#   endif
#endif

#ifndef S_ISSOCK
#   ifdef _S_ISSOCK
#	define S_ISSOCK(m) _S_ISSOCK(m)
#   else
#	ifdef _S_IFSOCK
#	    define S_ISSOCK(m) ((m & S_IFMT) == _S_IFSOCK)
#	else
#	    ifdef S_IFSOCK
#		define S_ISSOCK(m) ((m & S_IFMT) == S_IFSOCK)
#	    else
#		define S_ISSOCK(m) (0)
#	    endif
#	endif
#   endif
#endif

#ifndef S_IRUSR
#   ifdef S_IREAD
#	define S_IRUSR S_IREAD
#	define S_IWUSR S_IWRITE
#	define S_IXUSR S_IEXEC
#   else
#	define S_IRUSR 0400
#	define S_IWUSR 0200
#	define S_IXUSR 0100
#   endif
#endif

#ifndef S_IRGRP
#   ifdef S_IRUSR
#       define S_IRGRP (S_IRUSR>>3)
#       define S_IWGRP (S_IWUSR>>3)
#       define S_IXGRP (S_IXUSR>>3)
#   else
#       define S_IRGRP 0040
#       define S_IWGRP 0020
#       define S_IXGRP 0010
#   endif
#endif

#ifndef S_IROTH
#   ifdef S_IRUSR
#       define S_IROTH (S_IRUSR>>6)
#       define S_IWOTH (S_IWUSR>>6)
#       define S_IXOTH (S_IXUSR>>6)
#   else
#       define S_IROTH 0040
#       define S_IWOTH 0020
#       define S_IXOTH 0010
#   endif
#endif

#ifndef S_ISUID
#   define S_ISUID 04000
#endif

#ifndef S_ISGID
#   define S_ISGID 02000
#endif

#ifndef S_IRWXU
#   define S_IRWXU (S_IRUSR|S_IWUSR|S_IXUSR)
#endif 

#ifndef S_IRWXG
#   define S_IRWXG (S_IRGRP|S_IWGRP|S_IXGRP)
#endif 

#ifndef S_IRWXO
#   define S_IRWXO (S_IROTH|S_IWOTH|S_IXOTH)
#endif 

#ifndef S_IREAD
#   define S_IREAD S_IRUSR
#endif

#ifndef S_IWRITE
#   define S_IWRITE S_IWUSR
#endif

#ifndef S_IEXEC
#   define S_IEXEC S_IXUSR
#endif

#ifdef ff_next
#   undef ff_next
#endif

#if defined(cray) || defined(gould) || defined(i860) || defined(pyr)
#   define SLOPPYDIVIDE
#endif

#ifdef UV
#undef UV
#endif

/*
    The IV type is supposed to be long enough to hold any integral
    value or a pointer.
    --Andy Dougherty	August 1996
*/

typedef IVTYPE IV;
typedef UVTYPE UV;

#if defined(USE_64_BIT_INT) && defined(HAS_QUAD)
#  if QUADKIND == QUAD_IS_INT64_T && defined(INT64_MAX)
#    define IV_MAX INT64_MAX
#    define IV_MIN INT64_MIN
#    define UV_MAX UINT64_MAX
#    ifndef UINT64_MIN
#      define UINT64_MIN 0
#    endif
#    define UV_MIN UINT64_MIN
#  else
#    define IV_MAX PERL_QUAD_MAX
#    define IV_MIN PERL_QUAD_MIN
#    define UV_MAX PERL_UQUAD_MAX
#    define UV_MIN PERL_UQUAD_MIN
#  endif
#  define IV_IS_QUAD
#  define UV_IS_QUAD
#else
#  if defined(INT32_MAX) && IVSIZE == 4
#    define IV_MAX INT32_MAX
#    define IV_MIN INT32_MIN
#    ifndef UINT32_MAX_BROKEN /* e.g. HP-UX with gcc messes this up */
#        define UV_MAX UINT32_MAX
#    else
#        define UV_MAX 4294967295U
#    endif
#    ifndef UINT32_MIN
#      define UINT32_MIN 0
#    endif
#    define UV_MIN UINT32_MIN
#  else
#    define IV_MAX PERL_LONG_MAX
#    define IV_MIN PERL_LONG_MIN
#    define UV_MAX PERL_ULONG_MAX
#    define UV_MIN PERL_ULONG_MIN
#  endif
#  if IVSIZE == 8
#    define IV_IS_QUAD
#    define UV_IS_QUAD
#    ifndef HAS_QUAD
#      define HAS_QUAD
#    endif
#  else
#    undef IV_IS_QUAD
#    undef UV_IS_QUAD
#    undef HAS_QUAD
#  endif
#endif

#define IV_DIG (BIT_DIGITS(IVSIZE * 8))
#define UV_DIG (BIT_DIGITS(UVSIZE * 8))

/*   
 *  The macros INT2PTR and NUM2PTR are (despite their names)
 *  bi-directional: they will convert int/float to or from pointers.
 *  However the conversion to int/float are named explicitly:
 *  PTR2IV, PTR2UV, PTR2NV.
 *
 *  For int conversions we do not need two casts if pointers are
 *  the same size as IV and UV.   Otherwise we need an explicit
 *  cast (PTRV) to avoid compiler warnings.
 */
#if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#  define PTRV			UV
#  define INT2PTR(any,d)	(any)(d)
#else
#  if PTRSIZE == LONGSIZE 
#    define PTRV		unsigned long
#  else
#    define PTRV		unsigned
#  endif
#  define INT2PTR(any,d)	(any)(PTRV)(d)
#endif
#define NUM2PTR(any,d)	(any)(PTRV)(d)
#define PTR2IV(p)	INT2PTR(IV,p)
#define PTR2UV(p)	INT2PTR(UV,p)
#define PTR2NV(p)	NUM2PTR(NV,p)
#if PTRSIZE == LONGSIZE 
#  define PTR2ul(p)	(unsigned long)(p)
#else
#  define PTR2ul(p)	INT2PTR(unsigned long,p)	
#endif
  
#ifdef USE_LONG_DOUBLE
#  if defined(HAS_LONG_DOUBLE) && LONG_DOUBLESIZE == DOUBLESIZE
#      define LONG_DOUBLE_EQUALS_DOUBLE
#  endif
#  if !(defined(HAS_LONG_DOUBLE) && (LONG_DOUBLESIZE > DOUBLESIZE))
#     undef USE_LONG_DOUBLE /* Ouch! */
#  endif
#endif

#ifdef OVR_DBL_DIG
/* Use an overridden DBL_DIG */
# ifdef DBL_DIG
#  undef DBL_DIG
# endif
# define DBL_DIG OVR_DBL_DIG
#else
/* The following is all to get DBL_DIG, in order to pick a nice
   default value for printing floating point numbers in Gconvert.
   (see config.h)
*/
#ifdef I_LIMITS
#include <limits.h>
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifndef HAS_DBL_DIG
#define DBL_DIG	15   /* A guess that works lots of places */
#endif
#endif
#ifdef I_FLOAT
#include <float.h>
#endif
#ifndef HAS_DBL_DIG
#define DBL_DIG	15   /* A guess that works lots of places */
#endif

#ifdef OVR_LDBL_DIG
/* Use an overridden LDBL_DIG */
# ifdef LDBL_DIG
#  undef LDBL_DIG
# endif
# define LDBL_DIG OVR_LDBL_DIG
#else
/* The following is all to get LDBL_DIG, in order to pick a nice
   default value for printing floating point numbers in Gconvert.
   (see config.h)
*/
# ifdef I_LIMITS
#   include <limits.h>
# endif
# ifdef I_FLOAT
#  include <float.h>
# endif
# ifndef HAS_LDBL_DIG
#  if LONG_DOUBLESIZE == 10
#   define LDBL_DIG 18 /* assume IEEE */
#  else
#   if LONG_DOUBLESIZE == 12
#    define LDBL_DIG 18 /* gcc? */
#   else
#    if LONG_DOUBLESIZE == 16
#     define LDBL_DIG 33 /* assume IEEE */
#    else
#     if LONG_DOUBLESIZE == DOUBLESIZE
#      define LDBL_DIG DBL_DIG /* bummer */
#     endif
#    endif
#   endif
#  endif
# endif
#endif

typedef NVTYPE NV;

#ifdef I_IEEEFP
#   include <ieeefp.h>
#endif

#ifdef USE_LONG_DOUBLE
#   ifdef I_SUNMATH
#       include <sunmath.h>
#   endif
#   define NV_DIG LDBL_DIG
#   ifdef LDBL_MANT_DIG
#       define NV_MANT_DIG LDBL_MANT_DIG
#   endif
#   ifdef LDBL_MAX
#       define NV_MAX LDBL_MAX
#       define NV_MIN LDBL_MIN
#   else
#       ifdef HUGE_VALL
#           define NV_MAX HUGE_VALL
#       else
#           ifdef HUGE_VAL
#               define NV_MAX ((NV)HUGE_VAL)
#           endif
#       endif
#   endif
#   ifdef HAS_SQRTL
#       define Perl_cos cosl
#       define Perl_sin sinl
#       define Perl_sqrt sqrtl
#       define Perl_exp expl
#       define Perl_log logl
#       define Perl_atan2 atan2l
#       define Perl_pow powl
#       define Perl_floor floorl
#       define Perl_fmod fmodl
#   endif
/* e.g. libsunmath doesn't have modfl and frexpl as of mid-March 2000 */
#   ifdef HAS_MODFL
#       define Perl_modf(x,y) modfl(x,y)
#   else
#       define Perl_modf(x,y) ((long double)modf((double)(x),(double*)(y)))
#   endif
#   ifdef HAS_FREXPL
#       define Perl_frexp(x,y) frexpl(x,y)
#   else
#       define Perl_frexp(x,y) ((long double)frexp((double)(x),y))
#   endif
#   ifdef HAS_ISNANL
#       define Perl_isnan(x) isnanl(x)
#   else
#       ifdef HAS_ISNAN
#           define Perl_isnan(x) isnan((double)(x))
#       else
#           define Perl_isnan(x) ((x)!=(x))
#       endif
#   endif
#else
#   define NV_DIG DBL_DIG
#   ifdef DBL_MANT_DIG
#       define NV_MANT_DIG DBL_MANT_DIG
#   endif
#   ifdef DBL_MAX
#       define NV_MAX DBL_MAX
#       define NV_MIN DBL_MIN
#   else
#       ifdef HUGE_VAL
#           define NV_MAX HUGE_VAL
#       endif
#   endif
#   define Perl_cos cos
#   define Perl_sin sin
#   define Perl_sqrt sqrt
#   define Perl_exp exp
#   define Perl_log log
#   define Perl_atan2 atan2
#   define Perl_pow pow
#   define Perl_floor floor
#   define Perl_fmod fmod
#   define Perl_modf(x,y) modf(x,y)
#   define Perl_frexp(x,y) frexp(x,y)
#   ifdef HAS_ISNAN
#       define Perl_isnan(x) isnan(x)
#   else
#       define Perl_isnan(x) ((x)!=(x))
#   endif
#endif

#if !defined(Perl_atof) && defined(USE_LONG_DOUBLE) && defined(HAS_LONG_DOUBLE)
#   if !defined(Perl_atof) && defined(HAS_STRTOLD) 
#       define Perl_atof(s) (NV)strtold(s, (char**)NULL)
#   endif
#   if !defined(Perl_atof) && defined(HAS_ATOLF)
#       define Perl_atof (NV)atolf
#   endif
#   if !defined(Perl_atof) && defined(PERL_SCNfldbl)
#       define Perl_atof PERL_SCNfldbl
#       define Perl_atof2(s,f) sscanf((s), "%"PERL_SCNfldbl, &(f))
#   endif
#endif
#if !defined(Perl_atof)
#   define Perl_atof atof /* we assume atof being available anywhere */
#endif
#if !defined(Perl_atof2)
#   define Perl_atof2(s,f) ((f) = (NV)Perl_atof(s))
#endif

/* Previously these definitions used hardcoded figures. 
 * It is hoped these formula are more portable, although
 * no data one way or another is presently known to me.
 * The "PERL_" names are used because these calculated constants
 * do not meet the ANSI requirements for LONG_MAX, etc., which
 * need to be constants acceptable to #if - kja
 *    define PERL_LONG_MAX        2147483647L
 *    define PERL_LONG_MIN        (-LONG_MAX - 1)
 *    define PERL ULONG_MAX       4294967295L
 */

#ifdef I_LIMITS  /* Needed for cast_xxx() functions below. */
#  include <limits.h>
#else
#ifdef I_VALUES
#  include <values.h>
#endif
#endif

/*
 * Try to figure out max and min values for the integral types.  THE CORRECT
 * SOLUTION TO THIS MESS: ADAPT enquire.c FROM GCC INTO CONFIGURE.  The
 * following hacks are used if neither limits.h or values.h provide them:
 * U<TYPE>_MAX: for types >= int: ~(unsigned TYPE)0
 *              for types <  int:  (unsigned TYPE)~(unsigned)0
 *	The argument to ~ must be unsigned so that later signed->unsigned
 *	conversion can't modify the value's bit pattern (e.g. -0 -> +0),
 *	and it must not be smaller than int because ~ does integral promotion.
 * <type>_MAX: (<type>) (U<type>_MAX >> 1)
 * <type>_MIN: -<type>_MAX - <is_twos_complement_architecture: (3 & -1) == 3>.
 *	The latter is a hack which happens to work on some machines but
 *	does *not* catch any random system, or things like integer types
 *	with NaN if that is possible.
 *
 * All of the types are explicitly cast to prevent accidental loss of
 * numeric range, and in the hope that they will be less likely to confuse
 * over-eager optimizers.
 *
 */

#define PERL_UCHAR_MIN ((unsigned char)0)

#ifdef UCHAR_MAX
#  define PERL_UCHAR_MAX ((unsigned char)UCHAR_MAX)
#else
#  ifdef MAXUCHAR
#    define PERL_UCHAR_MAX ((unsigned char)MAXUCHAR)
#  else
#    define PERL_UCHAR_MAX       ((unsigned char)~(unsigned)0)
#  endif
#endif
 
/*
 * CHAR_MIN and CHAR_MAX are not included here, as the (char) type may be
 * ambiguous. It may be equivalent to (signed char) or (unsigned char)
 * depending on local options. Until Configure detects this (or at least
 * detects whether the "signed" keyword is available) the CHAR ranges
 * will not be included. UCHAR functions normally.
 *                                                           - kja
 */

#define PERL_USHORT_MIN ((unsigned short)0)

#ifdef USHORT_MAX
#  define PERL_USHORT_MAX ((unsigned short)USHORT_MAX)
#else
#  ifdef MAXUSHORT
#    define PERL_USHORT_MAX ((unsigned short)MAXUSHORT)
#  else
#    ifdef USHRT_MAX
#      define PERL_USHORT_MAX ((unsigned short)USHRT_MAX)
#    else
#      define PERL_USHORT_MAX       ((unsigned short)~(unsigned)0)
#    endif
#  endif
#endif

#ifdef SHORT_MAX
#  define PERL_SHORT_MAX ((short)SHORT_MAX)
#else
#  ifdef MAXSHORT    /* Often used in <values.h> */
#    define PERL_SHORT_MAX ((short)MAXSHORT)
#  else
#    ifdef SHRT_MAX
#      define PERL_SHORT_MAX ((short)SHRT_MAX)
#    else
#      define PERL_SHORT_MAX      ((short) (PERL_USHORT_MAX >> 1))
#    endif
#  endif
#endif

#ifdef SHORT_MIN
#  define PERL_SHORT_MIN ((short)SHORT_MIN)
#else
#  ifdef MINSHORT
#    define PERL_SHORT_MIN ((short)MINSHORT)
#  else
#    ifdef SHRT_MIN
#      define PERL_SHORT_MIN ((short)SHRT_MIN)
#    else
#      define PERL_SHORT_MIN        (-PERL_SHORT_MAX - ((3 & -1) == 3))
#    endif
#  endif
#endif

#ifdef UINT_MAX
#  define PERL_UINT_MAX ((unsigned int)UINT_MAX)
#else
#  ifdef MAXUINT
#    define PERL_UINT_MAX ((unsigned int)MAXUINT)
#  else
#    define PERL_UINT_MAX       (~(unsigned int)0)
#  endif
#endif

#define PERL_UINT_MIN ((unsigned int)0)

#ifdef INT_MAX
#  define PERL_INT_MAX ((int)INT_MAX)
#else
#  ifdef MAXINT    /* Often used in <values.h> */
#    define PERL_INT_MAX ((int)MAXINT)
#  else
#    define PERL_INT_MAX        ((int)(PERL_UINT_MAX >> 1))
#  endif
#endif

#ifdef INT_MIN
#  define PERL_INT_MIN ((int)INT_MIN)
#else
#  ifdef MININT
#    define PERL_INT_MIN ((int)MININT)
#  else
#    define PERL_INT_MIN        (-PERL_INT_MAX - ((3 & -1) == 3))
#  endif
#endif

#ifdef ULONG_MAX
#  define PERL_ULONG_MAX ((unsigned long)ULONG_MAX)
#else
#  ifdef MAXULONG
#    define PERL_ULONG_MAX ((unsigned long)MAXULONG)
#  else
#    define PERL_ULONG_MAX       (~(unsigned long)0)
#  endif
#endif

#define PERL_ULONG_MIN ((unsigned long)0L)

#ifdef LONG_MAX
#  define PERL_LONG_MAX ((long)LONG_MAX)
#else
#  ifdef MAXLONG    /* Often used in <values.h> */
#    define PERL_LONG_MAX ((long)MAXLONG)
#  else
#    define PERL_LONG_MAX        ((long) (PERL_ULONG_MAX >> 1))
#  endif
#endif

#ifdef LONG_MIN
#  define PERL_LONG_MIN ((long)LONG_MIN)
#else
#  ifdef MINLONG
#    define PERL_LONG_MIN ((long)MINLONG)
#  else
#    define PERL_LONG_MIN        (-PERL_LONG_MAX - ((3 & -1) == 3))
#  endif
#endif

#ifdef UV_IS_QUAD

#    define PERL_UQUAD_MAX	(~(UV)0)
#    define PERL_UQUAD_MIN	((UV)0)
#    define PERL_QUAD_MAX 	((IV) (PERL_UQUAD_MAX >> 1))
#    define PERL_QUAD_MIN 	(-PERL_QUAD_MAX - ((3 & -1) == 3))

#endif

struct perl_mstats {
    UV *nfree;
    UV *ntotal;
    IV topbucket, topbucket_ev, topbucket_odd, totfree, total, total_chain;
    IV total_sbrk, sbrks, sbrk_good, sbrk_slack, start_slack, sbrked_remains;
    IV minbucket;
    /* Level 1 info */
    UV *bucket_mem_size;
    UV *bucket_available_size;
    UV nbuckets;
};

typedef MEM_SIZE STRLEN;

typedef struct op OP;
typedef struct cop COP;
typedef struct unop UNOP;
typedef struct binop BINOP;
typedef struct listop LISTOP;
typedef struct logop LOGOP;
typedef struct pmop PMOP;
typedef struct svop SVOP;
typedef struct padop PADOP;
typedef struct pvop PVOP;
typedef struct loop LOOP;

typedef struct interpreter PerlInterpreter;
#ifdef UTS
#   define STRUCT_SV perl_sv /* Amdahl's <ksync.h> has struct sv */
#else
#   define STRUCT_SV sv
#endif
typedef struct STRUCT_SV SV;
typedef struct av AV;
typedef struct hv HV;
typedef struct cv CV;
typedef struct regexp REGEXP;
typedef struct gp GP;
typedef struct gv GV;
typedef struct io IO;
typedef struct context PERL_CONTEXT;
typedef struct block BLOCK;

typedef struct magic MAGIC;
typedef struct xrv XRV;
typedef struct xpv XPV;
typedef struct xpviv XPVIV;
typedef struct xpvuv XPVUV;
typedef struct xpvnv XPVNV;
typedef struct xpvmg XPVMG;
typedef struct xpvlv XPVLV;
typedef struct xpvav XPVAV;
typedef struct xpvhv XPVHV;
typedef struct xpvgv XPVGV;
typedef struct xpvcv XPVCV;
typedef struct xpvbm XPVBM;
typedef struct xpvfm XPVFM;
typedef struct xpvio XPVIO;
typedef struct mgvtbl MGVTBL;
typedef union any ANY;
typedef struct ptr_tbl_ent PTR_TBL_ENT_t;
typedef struct ptr_tbl PTR_TBL_t;

#include "handy.h"

#if defined(USE_LARGE_FILES) && !defined(NO_64_BIT_RAWIO)
#   if LSEEKSIZE == 8 && !defined(USE_64_BIT_RAWIO)
#       define USE_64_BIT_RAWIO	/* implicit */
#   endif
#endif

/* Notice the use of HAS_FSEEKO: now we are obligated to always use
 * fseeko/ftello if possible.  Don't go #defining ftell to ftello yourself,
 * however, because operating systems like to do that themself. */
#ifndef FSEEKSIZE
#   ifdef HAS_FSEEKO
#       define FSEEKSIZE LSEEKSIZE
#   else
#       define FSEEKSIZE LONGSIZE
#   endif  
#endif

#if defined(USE_LARGE_FILES) && !defined(NO_64_BIT_STDIO)
#   if FSEEKSIZE == 8 && !defined(USE_64_BIT_STDIO)
#       define USE_64_BIT_STDIO /* implicit */
#   endif
#endif

#ifdef USE_64_BIT_RAWIO
#   ifdef HAS_OFF64_T
#       undef Off_t
#       define Off_t off64_t
#       undef LSEEKSIZE
#       define LSEEKSIZE 8
#   endif
/* Most 64-bit environments have defines like _LARGEFILE_SOURCE that
 * will trigger defines like the ones below.  Some 64-bit environments,
 * however, do not.  Therefore we have to explicitly mix and match. */
#   if defined(USE_OPEN64)
#       define open open64
#   endif
#   if defined(USE_LSEEK64)
#       define lseek lseek64
#   else
#       if defined(USE_LLSEEK)
#           define lseek llseek
#       endif
#   endif
#   if defined(USE_STAT64)
#       define stat stat64
#   endif
#   if defined(USE_FSTAT64)
#       define fstat fstat64
#   endif
#   if defined(USE_LSTAT64)
#       define lstat lstat64
#   endif
#   if defined(USE_FLOCK64)
#       define flock flock64
#   endif
#   if defined(USE_LOCKF64)
#       define lockf lockf64
#   endif
#   if defined(USE_FCNTL64)
#       define fcntl fcntl64
#   endif
#   if defined(USE_TRUNCATE64)
#       define truncate truncate64
#   endif
#   if defined(USE_FTRUNCATE64)
#       define ftruncate ftruncate64
#   endif
#endif

#ifdef USE_64_BIT_STDIO
#   ifdef HAS_FPOS64_T
#       undef Fpos_t
#       define Fpos_t fpos64_t
#   endif
/* Most 64-bit environments have defines like _LARGEFILE_SOURCE that
 * will trigger defines like the ones below.  Some 64-bit environments,
 * however, do not. */
#   if defined(USE_FOPEN64)
#       define fopen fopen64
#   endif
#   if defined(USE_FSEEK64)
#       define fseek fseek64 /* don't do fseeko here, see perlio.c */
#   endif
#   if defined(USE_FTELL64)
#       define ftell ftell64 /* don't do ftello here, see perlio.c */
#   endif
#   if defined(USE_FSETPOS64)
#       define fsetpos fsetpos64
#   endif
#   if defined(USE_FGETPOS64)
#       define fgetpos fgetpos64
#   endif
#   if defined(USE_TMPFILE64)
#       define tmpfile tmpfile64
#   endif
#   if defined(USE_FREOPEN64)
#       define freopen freopen64
#   endif
#endif

#if defined(OS2)
#  include "iperlsys.h"
#endif

#if defined(__OPEN_VM)
# include "vmesa/vmesaish.h"
#endif

#ifdef DOSISH
# if defined(OS2)
#   include "os2ish.h"
# else
#   include "dosish.h"
# endif
#else
# if defined(VMS)
#   include "vmsish.h"
# else
#   if defined(PLAN9)
#     include "./plan9/plan9ish.h"
#   else
#     if defined(MPE)
#       include "mpeix/mpeixish.h"
#     else
#       if defined(__VOS__)
#         include "vosish.h"
#       else
#         if defined(EPOC)
#           include "epocish.h"
#         else
#           if defined(MACOS_TRADITIONAL)
#             include "macos/macish.h"
#	      ifndef NO_ENVIRON_ARRAY
#               define NO_ENVIRON_ARRAY
#             endif
#           else
#             include "unixish.h"
#           endif
#         endif
#       endif
#     endif
#   endif
# endif
#endif

#ifndef NO_ENVIRON_ARRAY
#  define USE_ENVIRON_ARRAY
#endif

#ifdef JPL
    /* E.g. JPL needs to operate on a copy of the real environment.
     * JDK 1.2 and 1.3 seem to get upset if the original environment
     * is diddled with. */
#   define NEED_ENVIRON_DUP_FOR_MODIFY
#endif

#ifndef PERL_SYS_INIT3
#  define PERL_SYS_INIT3(argvp,argcp,envp) PERL_SYS_INIT(argvp,argcp)
#endif

#ifndef MAXPATHLEN
#  ifdef PATH_MAX
#    ifdef _POSIX_PATH_MAX
#       if PATH_MAX > _POSIX_PATH_MAX
/* MAXPATHLEN is supposed to include the final null character,
 * as opposed to PATH_MAX and _POSIX_PATH_MAX. */
#         define MAXPATHLEN (PATH_MAX+1)
#       else
#         define MAXPATHLEN (_POSIX_PATH_MAX+1)
#       endif
#    else
#      define MAXPATHLEN (PATH_MAX+1)
#    endif
#  else
#    ifdef _POSIX_PATH_MAX
#       define MAXPATHLEN (_POSIX_PATH_MAX+1)
#    else
#       define MAXPATHLEN 1024	/* Err on the large side. */
#    endif
#  endif
#endif

/* 
 * USE_THREADS needs to be after unixish.h as <pthread.h> includes
 * <sys/signal.h> which defines NSIG - which will stop inclusion of <signal.h>
 * this results in many functions being undeclared which bothers C++
 * May make sense to have threads after "*ish.h" anyway
 */

#if defined(USE_THREADS) || defined(USE_ITHREADS)
#  if defined(USE_THREADS)
   /* pending resolution of licensing issues, we avoid the erstwhile
    * atomic.h everywhere */
#  define EMULATE_ATOMIC_REFCOUNTS
#  endif
#  ifdef FAKE_THREADS
#    include "fakethr.h"
#  else
#    ifdef WIN32
#      include <win32thread.h>
#    else
#      ifdef OS2
#        include "os2thread.h"
#      else
#        ifdef I_MACH_CTHREADS
#          include <mach/cthreads.h>
#          if (defined(NeXT) || defined(__NeXT__)) && defined(PERL_POLLUTE_MALLOC)
#            define MUTEX_INIT_CALLS_MALLOC
#          endif
typedef cthread_t	perl_os_thread;
typedef mutex_t		perl_mutex;
typedef condition_t	perl_cond;
typedef void *		perl_key;
#        else /* Posix threads */
#          ifdef I_PTHREAD
#            include <pthread.h>
#          endif
typedef pthread_t	perl_os_thread;
typedef pthread_mutex_t	perl_mutex;
typedef pthread_cond_t	perl_cond;
typedef pthread_key_t	perl_key;
#        endif /* I_MACH_CTHREADS */
#      endif /* OS2 */
#    endif /* WIN32 */
#  endif /* FAKE_THREADS */
#endif /* USE_THREADS || USE_ITHREADS */

#ifdef WIN32
#  include "win32.h"
#endif

#ifdef VMS
#   define STATUS_NATIVE	PL_statusvalue_vms
#   define STATUS_NATIVE_EXPORT \
	(((I32)PL_statusvalue_vms == -1 ? 44 : PL_statusvalue_vms) | (VMSISH_HUSHED ? 0x10000000 : 0))
#   define STATUS_NATIVE_SET(n)						\
	STMT_START {							\
	    PL_statusvalue_vms = (n);					\
	    if ((I32)PL_statusvalue_vms == -1)				\
		PL_statusvalue = -1;					\
	    else if (PL_statusvalue_vms & STS$M_SUCCESS)		\
		PL_statusvalue = 0;					\
	    else if ((PL_statusvalue_vms & STS$M_SEVERITY) == 0)	\
		PL_statusvalue = 1 << 8;				\
	    else							\
		PL_statusvalue = (PL_statusvalue_vms & STS$M_SEVERITY) << 8;	\
	} STMT_END
#   define STATUS_POSIX	PL_statusvalue
#   ifdef VMSISH_STATUS
#	define STATUS_CURRENT	(VMSISH_STATUS ? STATUS_NATIVE : STATUS_POSIX)
#   else
#	define STATUS_CURRENT	STATUS_POSIX
#   endif
#   define STATUS_POSIX_SET(n)				\
	STMT_START {					\
	    PL_statusvalue = (n);				\
	    if (PL_statusvalue != -1) {			\
		PL_statusvalue &= 0xFFFF;			\
		PL_statusvalue_vms = PL_statusvalue ? 44 : 1;	\
	    }						\
	    else PL_statusvalue_vms = -1;			\
	} STMT_END
#   define STATUS_ALL_SUCCESS	(PL_statusvalue = 0, PL_statusvalue_vms = 1)
#   define STATUS_ALL_FAILURE	(PL_statusvalue = 1, PL_statusvalue_vms = 44)
#else
#   define STATUS_NATIVE	STATUS_POSIX
#   define STATUS_NATIVE_EXPORT	STATUS_POSIX
#   define STATUS_NATIVE_SET	STATUS_POSIX_SET
#   define STATUS_POSIX		PL_statusvalue
#   define STATUS_POSIX_SET(n)		\
	STMT_START {			\
	    PL_statusvalue = (n);		\
	    if (PL_statusvalue != -1)	\
		PL_statusvalue &= 0xFFFF;	\
	} STMT_END
#   define STATUS_CURRENT STATUS_POSIX
#   define STATUS_ALL_SUCCESS	(PL_statusvalue = 0)
#   define STATUS_ALL_FAILURE	(PL_statusvalue = 1)
#endif

/* flags in PL_exit_flags for nature of exit() */
#define PERL_EXIT_EXPECTED	0x01

#ifndef MEMBER_TO_FPTR
#  define MEMBER_TO_FPTR(name)		name
#endif

/* format to use for version numbers in file/directory names */
/* XXX move to Configure? */
#ifndef PERL_FS_VER_FMT
#  define PERL_FS_VER_FMT	"%d.%d.%d"
#endif

/* This defines a way to flush all output buffers.  This may be a
 * performance issue, so we allow people to disable it.
 */
#ifndef PERL_FLUSHALL_FOR_CHILD
# if defined(FFLUSH_NULL) || defined(USE_SFIO)
#  define PERL_FLUSHALL_FOR_CHILD	PerlIO_flush((PerlIO*)NULL)
# else
#  ifdef FFLUSH_ALL
#   define PERL_FLUSHALL_FOR_CHILD	my_fflush_all()
#  else
#   define PERL_FLUSHALL_FOR_CHILD	NOOP
#  endif
# endif
#endif

#ifndef PERL_WAIT_FOR_CHILDREN
#  define PERL_WAIT_FOR_CHILDREN	NOOP
#endif

/* the traditional thread-unsafe notion of "current interpreter". */
#ifndef PERL_SET_INTERP
#  define PERL_SET_INTERP(i)		(PL_curinterp = (PerlInterpreter*)(i))
#endif

#ifndef PERL_GET_INTERP
#  define PERL_GET_INTERP		(PL_curinterp)
#endif

#if defined(PERL_IMPLICIT_CONTEXT) && !defined(PERL_GET_THX)
#  ifdef USE_THREADS
#    define PERL_GET_THX		((struct perl_thread *)PERL_GET_CONTEXT)
#  else
#  ifdef MULTIPLICITY
#    define PERL_GET_THX		((PerlInterpreter *)PERL_GET_CONTEXT)
#  else
#  ifdef PERL_OBJECT
#    define PERL_GET_THX		((CPerlObj *)PERL_GET_CONTEXT)
#  endif
#  endif
#  endif
#  define PERL_SET_THX(t)		PERL_SET_CONTEXT(t)
#endif

#ifndef SVf
#  ifdef CHECK_FORMAT
#    define SVf "p"
#  else
#    define SVf "_"
#  endif 
#endif

#ifndef UVf
#  ifdef CHECK_FORMAT
#    define UVf UVuf
#  else
#    define UVf "Vu"
#  endif 
#endif

#ifndef VDf
#  ifdef CHECK_FORMAT
#    define VDf "p"
#  else
#    define VDf "vd"
#  endif 
#endif

/* Some unistd.h's give a prototype for pause() even though
   HAS_PAUSE ends up undefined.  This causes the #define
   below to be rejected by the compiler.  Sigh.
*/
#ifdef HAS_PAUSE
#define Pause	pause
#else
#define Pause() sleep((32767<<16)+32767)
#endif

#ifndef IOCPARM_LEN
#   ifdef IOCPARM_MASK
	/* on BSDish systes we're safe */
#	define IOCPARM_LEN(x)  (((x) >> 16) & IOCPARM_MASK)
#   else
	/* otherwise guess at what's safe */
#	define IOCPARM_LEN(x)	256
#   endif
#endif

#if defined(__CYGWIN__)
/* USEMYBINMODE
 *   This symbol, if defined, indicates that the program should
 *   use the routine my_binmode(FILE *fp, char iotype, int mode) to insure
 *   that a file is in "binary" mode -- that is, that no translation
 *   of bytes occurs on read or write operations.
 */
#  define USEMYBINMODE / **/
#  define my_binmode(fp, iotype, mode) \
            (PerlLIO_setmode(PerlIO_fileno(fp), mode) != -1 ? TRUE : FALSE)
#endif

#ifdef UNION_ANY_DEFINITION
UNION_ANY_DEFINITION;
#else
union any {
    void*	any_ptr;
    I32		any_i32;
    IV		any_iv;
    long	any_long;
    void	(*any_dptr) (void*);
    void	(*any_dxptr) (pTHXo_ void*);
};
#endif

#ifdef USE_THREADS
#define ARGSproto struct perl_thread *thr
#else
#define ARGSproto
#endif /* USE_THREADS */

typedef I32 (*filter_t) (pTHXo_ int, SV *, int);

#define FILTER_READ(idx, sv, len)  filter_read(idx, sv, len)
#define FILTER_DATA(idx)	   (AvARRAY(PL_rsfp_filters)[idx])
#define FILTER_ISREADER(idx)	   (idx >= AvFILLp(PL_rsfp_filters))

#if !defined(OS2)
#  include "iperlsys.h"
#endif
#include "regexp.h"
#include "sv.h"
#include "util.h"
#include "form.h"
#include "gv.h"
#include "cv.h"
#include "opnames.h"
#include "op.h"
#include "cop.h"
#include "av.h"
#include "hv.h"
#include "mg.h"
#include "scope.h"
#include "warnings.h"
#include "utf8.h"

/* Current curly descriptor */
typedef struct curcur CURCUR;
struct curcur {
    int		parenfloor;	/* how far back to strip paren data */
    int		cur;		/* how many instances of scan we've matched */
    int		min;		/* the minimal number of scans to match */
    int		max;		/* the maximal number of scans to match */
    int		minmod;		/* whether to work our way up or down */
    regnode *	scan;		/* the thing to match */
    regnode *	next;		/* what has to match after it */
    char *	lastloc;	/* where we started matching this scan */
    CURCUR *	oldcc;		/* current curly before we started this one */
};

typedef struct _sublex_info SUBLEXINFO;
struct _sublex_info {
    I32 super_state;	/* lexer state to save */
    I32 sub_inwhat;	/* "lex_inwhat" to use */
    OP *sub_op;		/* "lex_op" to use */
    char *super_bufptr;	/* PL_bufptr that was */
    char *super_bufend;	/* PL_bufend that was */
};

typedef struct magic_state MGS;	/* struct magic_state defined in mg.c */

struct scan_data_t;		/* Used in S_* functions in regcomp.c */
struct regnode_charclass_class;	/* Used in S_* functions in regcomp.c */

typedef I32 CHECKPOINT;

struct ptr_tbl_ent {
    struct ptr_tbl_ent*		next;
    void*			oldval;
    void*			newval;
};

struct ptr_tbl {
    struct ptr_tbl_ent**	tbl_ary;
    UV				tbl_max;
    UV				tbl_items;
};

#if defined(iAPX286) || defined(M_I286) || defined(I80286)
#   define I286
#endif

#if defined(htonl) && !defined(HAS_HTONL)
#define HAS_HTONL
#endif
#if defined(htons) && !defined(HAS_HTONS)
#define HAS_HTONS
#endif
#if defined(ntohl) && !defined(HAS_NTOHL)
#define HAS_NTOHL
#endif
#if defined(ntohs) && !defined(HAS_NTOHS)
#define HAS_NTOHS
#endif
#ifndef HAS_HTONL
#if (BYTEORDER & 0xffff) != 0x4321
#define HAS_HTONS
#define HAS_HTONL
#define HAS_NTOHS
#define HAS_NTOHL
#define MYSWAP
#define htons my_swap
#define htonl my_htonl
#define ntohs my_swap
#define ntohl my_ntohl
#endif
#else
#if (BYTEORDER & 0xffff) == 0x4321
#undef HAS_HTONS
#undef HAS_HTONL
#undef HAS_NTOHS
#undef HAS_NTOHL
#endif
#endif

/*
 * Little-endian byte order functions - 'v' for 'VAX', or 'reVerse'.
 * -DWS
 */
#if BYTEORDER != 0x1234
# define HAS_VTOHL
# define HAS_VTOHS
# define HAS_HTOVL
# define HAS_HTOVS
# if BYTEORDER == 0x4321 || BYTEORDER == 0x87654321
#  define vtohl(x)	((((x)&0xFF)<<24)	\
			+(((x)>>24)&0xFF)	\
			+(((x)&0x0000FF00)<<8)	\
			+(((x)&0x00FF0000)>>8)	)
#  define vtohs(x)	((((x)&0xFF)<<8) + (((x)>>8)&0xFF))
#  define htovl(x)	vtohl(x)
#  define htovs(x)	vtohs(x)
# endif
	/* otherwise default to functions in util.c */
#endif

#ifdef CASTNEGFLOAT
#define U_S(what) ((U16)(what))
#define U_I(what) ((unsigned int)(what))
#define U_L(what) ((U32)(what))
#else
#define U_S(what) ((U16)cast_ulong((NV)(what)))
#define U_I(what) ((unsigned int)cast_ulong((NV)(what)))
#define U_L(what) (cast_ulong((NV)(what)))
#endif

#ifdef CASTI32
#define I_32(what) ((I32)(what))
#define I_V(what) ((IV)(what))
#define U_V(what) ((UV)(what))
#else
#define I_32(what) (cast_i32((NV)(what)))
#define I_V(what) (cast_iv((NV)(what)))
#define U_V(what) (cast_uv((NV)(what)))
#endif

/* These do not care about the fractional part, only about the range. */
#define NV_WITHIN_IV(nv) (I_V(nv) >= IV_MIN && I_V(nv) <= IV_MAX)
#define NV_WITHIN_UV(nv) ((nv)>=0.0 && U_V(nv) >= UV_MIN && U_V(nv) <= UV_MAX)

/* Used with UV/IV arguments: */
					/* XXXX: need to speed it up */
#define CLUMP_2UV(iv)	((iv) < 0 ? 0 : (UV)(iv))
#define CLUMP_2IV(uv)	((uv) > (UV)IV_MAX ? IV_MAX : (IV)(uv))

#ifndef MAXSYSFD
#   define MAXSYSFD 2
#endif

#ifndef __cplusplus
Uid_t getuid (void);
Uid_t geteuid (void);
Gid_t getgid (void);
Gid_t getegid (void);
#endif

#ifndef Perl_debug_log
#  define Perl_debug_log	PerlIO_stderr()
#endif

#ifndef Perl_error_log
#  define Perl_error_log	(PL_stderrgv			\
				 && GvIOp(PL_stderrgv)          \
				 && IoOFP(GvIOp(PL_stderrgv))	\
				 ? IoOFP(GvIOp(PL_stderrgv))	\
				 : PerlIO_stderr())
#endif

#ifdef DEBUGGING
#undef  YYDEBUG
#define YYDEBUG 1
#define DEB(a)     			a
#define DEBUG(a)   if (PL_debug)		a
#define DEBUG_p(a) if (PL_debug & 1)	a
#define DEBUG_s(a) if (PL_debug & 2)	a
#define DEBUG_l(a) if (PL_debug & 4)	a
#define DEBUG_t(a) if (PL_debug & 8)	a
#define DEBUG_o(a) if (PL_debug & 16)	a
#define DEBUG_c(a) if (PL_debug & 32)	a
#define DEBUG_P(a) if (PL_debug & 64)	a
#  if defined(PERL_OBJECT)
#    define DEBUG_m(a) if (PL_debug & 128)	a
#  else
     /* Temporarily turn off memory debugging in case the a
      * does memory allocation, either directly or indirectly. */
#    define DEBUG_m(a)  \
    STMT_START {							\
        if (PERL_GET_INTERP) { dTHX; if (PL_debug & 128) {PL_debug&=~128; a; PL_debug|=128;} } \
    } STMT_END
#  endif
#define DEBUG_f(a) if (PL_debug & 256)	a
#define DEBUG_r(a) if (PL_debug & 512)	a
#define DEBUG_x(a) if (PL_debug & 1024)	a
#define DEBUG_u(a) if (PL_debug & 2048)	a
#define DEBUG_L(a) if (PL_debug & 4096)	a
#define DEBUG_H(a) if (PL_debug & 8192)	a
#define DEBUG_X(a) if (PL_debug & 16384)	a
#define DEBUG_D(a) if (PL_debug & 32768)	a
#  ifdef USE_THREADS
#    define DEBUG_S(a) if (PL_debug & (1<<16))	a
#  else
#    define DEBUG_S(a)
#  endif
#define DEBUG_T(a) if (PL_debug & (1<<17))	a
#else
#define DEB(a)
#define DEBUG(a)
#define DEBUG_p(a)
#define DEBUG_s(a)
#define DEBUG_l(a)
#define DEBUG_t(a)
#define DEBUG_o(a)
#define DEBUG_c(a)
#define DEBUG_P(a)
#define DEBUG_m(a)
#define DEBUG_f(a)
#define DEBUG_r(a)
#define DEBUG_x(a)
#define DEBUG_u(a)
#define DEBUG_S(a)
#define DEBUG_H(a)
#define DEBUG_X(a)
#define DEBUG_D(a)
#define DEBUG_S(a)
#define DEBUG_T(a)
#endif
#define YYMAXDEPTH 300

#ifndef assert  /* <assert.h> might have been included somehow */
#define assert(what)	DEB( {						\
	if (!(what)) {							\
	    Perl_croak(aTHX_ "Assertion failed: file \"%s\", line %d",	\
		__FILE__, __LINE__);					\
	    PerlProc_exit(1);						\
	}})
#endif

struct ufuncs {
    I32 (*uf_val)(IV, SV*);
    I32 (*uf_set)(IV, SV*);
    IV uf_index;
};

/* Fix these up for __STDC__ */
#ifndef DONT_DECLARE_STD
char *mktemp (char*);
#ifndef atof
double atof (const char*);
#endif
#endif

#ifndef STANDARD_C
/* All of these are in stdlib.h or time.h for ANSI C */
Time_t time();
struct tm *gmtime(), *localtime();
#if defined(OEMVS) || defined(__OPEN_VM)
char *(strchr)(), *(strrchr)();
char *(strcpy)(), *(strcat)();
#else
char *strchr(), *strrchr();
char *strcpy(), *strcat();
#endif
#endif /* ! STANDARD_C */


#ifdef I_MATH
#    include <math.h>
#else
START_EXTERN_C
	    double exp (double);
	    double log (double);
	    double log10 (double);
	    double sqrt (double);
	    double frexp (double,int*);
	    double ldexp (double,int);
	    double modf (double,double*);
	    double sin (double);
	    double cos (double);
	    double atan2 (double,double);
	    double pow (double,double);
END_EXTERN_C
#endif

#ifndef __cplusplus
#  if defined(NeXT) || defined(__NeXT__) /* or whatever catches all NeXTs */
char *crypt ();       /* Maybe more hosts will need the unprototyped version */
#  else
#    if !defined(WIN32)
char *crypt (const char*, const char*);
#    endif /* !WIN32 */
#  endif /* !NeXT && !__NeXT__ */
#  ifndef DONT_DECLARE_STD
#    ifndef getenv
char *getenv (const char*);
#    endif /* !getenv */
#    if !defined(HAS_LSEEK_PROTO) && !defined(EPOC) && !defined(__hpux)
#      ifdef _FILE_OFFSET_BITS
#        if _FILE_OFFSET_BITS == 64
Off_t lseek (int,Off_t,int);
#        endif
#      endif
#    endif
#  endif /* !DONT_DECLARE_STD */
char *getlogin (void);
#endif /* !__cplusplus */

#ifdef UNLINK_ALL_VERSIONS /* Currently only makes sense for VMS */
#define UNLINK unlnk
I32 unlnk (char*);
#else
#define UNLINK PerlLIO_unlink
#endif

#ifndef HAS_SETREUID
#  ifdef HAS_SETRESUID
#    define setreuid(r,e) setresuid(r,e,(Uid_t)-1)
#    define HAS_SETREUID
#  endif
#endif
#ifndef HAS_SETREGID
#  ifdef HAS_SETRESGID
#    define setregid(r,e) setresgid(r,e,(Gid_t)-1)
#    define HAS_SETREGID
#  endif
#endif

/* Sighandler_t defined in iperlsys.h */

#ifdef HAS_SIGACTION
typedef struct sigaction Sigsave_t;
#else
typedef Sighandler_t Sigsave_t;
#endif

#define SCAN_DEF 0
#define SCAN_TR 1
#define SCAN_REPL 2

#ifdef DEBUGGING
# ifndef register
#  define register
# endif
# define PAD_SV(po) pad_sv(po)
# define RUNOPS_DEFAULT Perl_runops_debug
#else
# define PAD_SV(po) PL_curpad[po]
# define RUNOPS_DEFAULT Perl_runops_standard
#endif

#ifdef MYMALLOC
#  ifdef MUTEX_INIT_CALLS_MALLOC
#    define MALLOC_INIT					\
	STMT_START {					\
		PL_malloc_mutex = NULL;			\
		MUTEX_INIT(&PL_malloc_mutex);		\
	} STMT_END
#    define MALLOC_TERM					\
	STMT_START {					\
		perl_mutex tmp = PL_malloc_mutex;	\
		PL_malloc_mutex = NULL;			\
		MUTEX_DESTROY(&tmp);			\
	} STMT_END
#  else
#    define MALLOC_INIT MUTEX_INIT(&PL_malloc_mutex)
#    define MALLOC_TERM MUTEX_DESTROY(&PL_malloc_mutex)
#  endif
#else
#  define MALLOC_INIT
#  define MALLOC_TERM
#endif


typedef int (CPERLscope(*runops_proc_t)) (pTHX);
typedef OP* (CPERLscope(*PPADDR_t)[]) (pTHX);

/* _ (for $_) must be first in the following list (DEFSV requires it) */
#define THREADSV_NAMES "_123456789&`'+/.,\\\";^-%=|~:\001\005!@"

/* NeXT has problems with crt0.o globals */
#if defined(__DYNAMIC__) && \
    (defined(NeXT) || defined(__NeXT__) || defined(__APPLE__))
#  if defined(NeXT) || defined(__NeXT)
#    include <mach-o/dyld.h>
#    define environ (*environ_pointer)
EXT char *** environ_pointer;
#  else
#    if defined(__APPLE__) && defined(PERL_CORE)
#      include <crt_externs.h>	/* for the env array */
#      define environ (*_NSGetEnviron())
#    endif
#  endif
#else
   /* VMS and some other platforms don't use the environ array */
#  ifdef USE_ENVIRON_ARRAY
#    if !defined(DONT_DECLARE_STD) || \
        (defined(__svr4__) && defined(__GNUC__) && defined(sun)) || \
        defined(__sgi) || \
        defined(__DGUX) 
extern char **	environ;	/* environment variables supplied via exec */
#    endif
#  endif
#endif

START_EXTERN_C

/* handy constants */
EXTCONST char PL_warn_uninit[]
  INIT("Use of uninitialized value%s%s");
EXTCONST char PL_warn_nosemi[]
  INIT("Semicolon seems to be missing");
EXTCONST char PL_warn_reserved[]
  INIT("Unquoted string \"%s\" may clash with future reserved word");
EXTCONST char PL_warn_nl[]
  INIT("Unsuccessful %s on filename containing newline");
EXTCONST char PL_no_wrongref[]
  INIT("Can't use %s ref as %s ref");
EXTCONST char PL_no_symref[]
  INIT("Can't use string (\"%.32s\") as %s ref while \"strict refs\" in use");
EXTCONST char PL_no_usym[]
  INIT("Can't use an undefined value as %s reference");
EXTCONST char PL_no_aelem[]
  INIT("Modification of non-creatable array value attempted, subscript %d");
EXTCONST char PL_no_helem[]
  INIT("Modification of non-creatable hash value attempted, subscript \"%s\"");
EXTCONST char PL_no_modify[]
  INIT("Modification of a read-only value attempted");
EXTCONST char PL_no_mem[]
  INIT("Out of memory!\n");
EXTCONST char PL_no_security[]
  INIT("Insecure dependency in %s%s");
EXTCONST char PL_no_sock_func[]
  INIT("Unsupported socket function \"%s\" called");
EXTCONST char PL_no_dir_func[]
  INIT("Unsupported directory function \"%s\" called");
EXTCONST char PL_no_func[]
  INIT("The %s function is unimplemented");
EXTCONST char PL_no_myglob[]
  INIT("\"my\" variable %s can't be in a package");

EXTCONST char PL_uuemap[65]
  INIT("`!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_");


#ifdef DOINIT
EXT char *PL_sig_name[] = { SIG_NAME };
EXT int   PL_sig_num[]  = { SIG_NUM };
#else
EXT char *PL_sig_name[];
EXT int   PL_sig_num[];
#endif

/* fast case folding tables */

#ifdef DOINIT
#ifdef EBCDIC
EXT unsigned char PL_fold[] = { /* fast EBCDIC case folding table */
    0,      1,      2,      3,      4,      5,      6,      7,
    8,      9,      10,     11,     12,     13,     14,     15,
    16,     17,     18,     19,     20,     21,     22,     23,
    24,     25,     26,     27,     28,     29,     30,     31,
    32,     33,     34,     35,     36,     37,     38,     39,
    40,     41,     42,     43,     44,     45,     46,     47,
    48,     49,     50,     51,     52,     53,     54,     55,
    56,     57,     58,     59,     60,     61,     62,     63,
    64,     65,     66,     67,     68,     69,     70,     71,
    72,     73,     74,     75,     76,     77,     78,     79,
    80,     81,     82,     83,     84,     85,     86,     87,
    88,     89,     90,     91,     92,     93,     94,     95,
    96,     97,     98,     99,     100,    101,    102,    103,
    104,    105,    106,    107,    108,    109,    110,    111,
    112,    113,    114,    115,    116,    117,    118,    119,
    120,    121,    122,    123,    124,    125,    126,    127,
    128,    'A',    'B',    'C',    'D',    'E',    'F',    'G',
    'H',    'I',    138,    139,    140,    141,    142,    143,
    144,    'J',    'K',    'L',    'M',    'N',    'O',    'P',
    'Q',    'R',    154,    155,    156,    157,    158,    159,
    160,    161,    'S',    'T',    'U',    'V',    'W',    'X',
    'Y',    'Z',    170,    171,    172,    173,    174,    175,
    176,    177,    178,    179,    180,    181,    182,    183,
    184,    185,    186,    187,    188,    189,    190,    191,
    192,    'a',    'b',    'c',    'd',    'e',    'f',    'g',
    'h',    'i',    202,    203,    204,    205,    206,    207,
    208,    'j',    'k',    'l',    'm',    'n',    'o',    'p',
    'q',    'r',    218,    219,    220,    221,    222,    223,
    224,    225,    's',    't',    'u',    'v',    'w',    'x',
    'y',    'z',    234,    235,    236,    237,    238,    239,
    240,    241,    242,    243,    244,    245,    246,    247,
    248,    249,    250,    251,    252,    253,    254,    255
};
#else   /* ascii rather than ebcdic */
EXTCONST  unsigned char PL_fold[] = {
	0,	1,	2,	3,	4,	5,	6,	7,
	8,	9,	10,	11,	12,	13,	14,	15,
	16,	17,	18,	19,	20,	21,	22,	23,
	24,	25,	26,	27,	28,	29,	30,	31,
	32,	33,	34,	35,	36,	37,	38,	39,
	40,	41,	42,	43,	44,	45,	46,	47,
	48,	49,	50,	51,	52,	53,	54,	55,
	56,	57,	58,	59,	60,	61,	62,	63,
	64,	'a',	'b',	'c',	'd',	'e',	'f',	'g',
	'h',	'i',	'j',	'k',	'l',	'm',	'n',	'o',
	'p',	'q',	'r',	's',	't',	'u',	'v',	'w',
	'x',	'y',	'z',	91,	92,	93,	94,	95,
	96,	'A',	'B',	'C',	'D',	'E',	'F',	'G',
	'H',	'I',	'J',	'K',	'L',	'M',	'N',	'O',
	'P',	'Q',	'R',	'S',	'T',	'U',	'V',	'W',
	'X',	'Y',	'Z',	123,	124,	125,	126,	127,
	128,	129,	130,	131,	132,	133,	134,	135,
	136,	137,	138,	139,	140,	141,	142,	143,
	144,	145,	146,	147,	148,	149,	150,	151,
	152,	153,	154,	155,	156,	157,	158,	159,
	160,	161,	162,	163,	164,	165,	166,	167,
	168,	169,	170,	171,	172,	173,	174,	175,
	176,	177,	178,	179,	180,	181,	182,	183,
	184,	185,	186,	187,	188,	189,	190,	191,
	192,	193,	194,	195,	196,	197,	198,	199,
	200,	201,	202,	203,	204,	205,	206,	207,
	208,	209,	210,	211,	212,	213,	214,	215,
	216,	217,	218,	219,	220,	221,	222,	223,	
	224,	225,	226,	227,	228,	229,	230,	231,
	232,	233,	234,	235,	236,	237,	238,	239,
	240,	241,	242,	243,	244,	245,	246,	247,
	248,	249,	250,	251,	252,	253,	254,	255
};
#endif  /* !EBCDIC */
#else
EXTCONST unsigned char PL_fold[];
#endif

#ifdef DOINIT
EXT unsigned char PL_fold_locale[] = {
	0,	1,	2,	3,	4,	5,	6,	7,
	8,	9,	10,	11,	12,	13,	14,	15,
	16,	17,	18,	19,	20,	21,	22,	23,
	24,	25,	26,	27,	28,	29,	30,	31,
	32,	33,	34,	35,	36,	37,	38,	39,
	40,	41,	42,	43,	44,	45,	46,	47,
	48,	49,	50,	51,	52,	53,	54,	55,
	56,	57,	58,	59,	60,	61,	62,	63,
	64,	'a',	'b',	'c',	'd',	'e',	'f',	'g',
	'h',	'i',	'j',	'k',	'l',	'm',	'n',	'o',
	'p',	'q',	'r',	's',	't',	'u',	'v',	'w',
	'x',	'y',	'z',	91,	92,	93,	94,	95,
	96,	'A',	'B',	'C',	'D',	'E',	'F',	'G',
	'H',	'I',	'J',	'K',	'L',	'M',	'N',	'O',
	'P',	'Q',	'R',	'S',	'T',	'U',	'V',	'W',
	'X',	'Y',	'Z',	123,	124,	125,	126,	127,
	128,	129,	130,	131,	132,	133,	134,	135,
	136,	137,	138,	139,	140,	141,	142,	143,
	144,	145,	146,	147,	148,	149,	150,	151,
	152,	153,	154,	155,	156,	157,	158,	159,
	160,	161,	162,	163,	164,	165,	166,	167,
	168,	169,	170,	171,	172,	173,	174,	175,
	176,	177,	178,	179,	180,	181,	182,	183,
	184,	185,	186,	187,	188,	189,	190,	191,
	192,	193,	194,	195,	196,	197,	198,	199,
	200,	201,	202,	203,	204,	205,	206,	207,
	208,	209,	210,	211,	212,	213,	214,	215,
	216,	217,	218,	219,	220,	221,	222,	223,	
	224,	225,	226,	227,	228,	229,	230,	231,
	232,	233,	234,	235,	236,	237,	238,	239,
	240,	241,	242,	243,	244,	245,	246,	247,
	248,	249,	250,	251,	252,	253,	254,	255
};
#else
EXT unsigned char PL_fold_locale[];
#endif

#ifdef DOINIT
#ifdef EBCDIC
EXT unsigned char PL_freq[] = {/* EBCDIC frequencies for mixed English/C */
    1,      2,      84,     151,    154,    155,    156,    157,
    165,    246,    250,    3,      158,    7,      18,     29,
    40,     51,     62,     73,     85,     96,     107,    118,
    129,    140,    147,    148,    149,    150,    152,    153,
    255,      6,      8,      9,     10,     11,     12,     13,
     14,     15,     24,     25,     26,     27,     28,    226,
     29,     30,     31,     32,     33,     43,     44,     45,
     46,     47,     48,     49,     50,     76,     77,     78,
     79,     80,     81,     82,     83,     84,     85,     86,
     87,     94,     95,    234,    181,    233,    187,    190,
    180,     96,     97,     98,     99,    100,    101,    102,
    104,    112,    182,    174,    236,    232,    229,    103,
    228,    226,    114,    115,    116,    117,    118,    119,
    120,    121,    122,    235,    176,    230,    194,    162,
    130,    131,    132,    133,    134,    135,    136,    137,
    138,    139,    201,    205,    163,    217,    220,    224,
    5,      248,    227,    244,    242,    255,    241,    231,
    240,    253,    16,     197,    19,     20,     21,     187,
    23,     169,    210,    245,    237,    249,    247,    239,
    168,    252,    34,     196,    36,     37,     38,     39,
    41,     42,     251,    254,    238,    223,    221,    213,
    225,    177,    52,     53,     54,     55,     56,     57,
    58,     59,     60,     61,     63,     64,     65,     66,
    67,     68,     69,     70,     71,     72,     74,     75,
    205,    208,    186,    202,    200,    218,    198,    179,
    178,    214,    88,     89,     90,     91,     92,     93,
    217,    166,    170,    207,    199,    209,    206,    204,
    160,    212,    105,    106,    108,    109,    110,    111,
    203,    113,    216,    215,    192,    175,    193,    243,
    172,    161,    123,    124,    125,    126,    127,    128,
    222,    219,    211,    195,    188,    193,    185,    184,
    191,    183,    141,    142,    143,    144,    145,    146
};
#else  /* ascii rather than ebcdic */
EXTCONST unsigned char PL_freq[] = {	/* letter frequencies for mixed English/C */
	1,	2,	84,	151,	154,	155,	156,	157,
	165,	246,	250,	3,	158,	7,	18,	29,
	40,	51,	62,	73,	85,	96,	107,	118,
	129,	140,	147,	148,	149,	150,	152,	153,
	255,	182,	224,	205,	174,	176,	180,	217,
	233,	232,	236,	187,	235,	228,	234,	226,
	222,	219,	211,	195,	188,	193,	185,	184,
	191,	183,	201,	229,	181,	220,	194,	162,
	163,	208,	186,	202,	200,	218,	198,	179,
	178,	214,	166,	170,	207,	199,	209,	206,
	204,	160,	212,	216,	215,	192,	175,	173,
	243,	172,	161,	190,	203,	189,	164,	230,
	167,	248,	227,	244,	242,	255,	241,	231,
	240,	253,	169,	210,	245,	237,	249,	247,
	239,	168,	252,	251,	254,	238,	223,	221,
	213,	225,	177,	197,	171,	196,	159,	4,
	5,	6,	8,	9,	10,	11,	12,	13,
	14,	15,	16,	17,	19,	20,	21,	22,
	23,	24,	25,	26,	27,	28,	30,	31,
	32,	33,	34,	35,	36,	37,	38,	39,
	41,	42,	43,	44,	45,	46,	47,	48,
	49,	50,	52,	53,	54,	55,	56,	57,
	58,	59,	60,	61,	63,	64,	65,	66,
	67,	68,	69,	70,	71,	72,	74,	75,
	76,	77,	78,	79,	80,	81,	82,	83,
	86,	87,	88,	89,	90,	91,	92,	93,
	94,	95,	97,	98,	99,	100,	101,	102,
	103,	104,	105,	106,	108,	109,	110,	111,
	112,	113,	114,	115,	116,	117,	119,	120,
	121,	122,	123,	124,	125,	126,	127,	128,
	130,	131,	132,	133,	134,	135,	136,	137,
	138,	139,	141,	142,	143,	144,	145,	146
};
#endif
#else
EXTCONST unsigned char PL_freq[];
#endif

#ifdef DEBUGGING
#ifdef DOINIT
EXTCONST char* PL_block_type[] = {
	"NULL",
	"SUB",
	"EVAL",
	"LOOP",
	"SUBST",
	"BLOCK",
};
#else
EXTCONST char* PL_block_type[];
#endif
#endif

END_EXTERN_C

/*****************************************************************************/
/* This lexer/parser stuff is currently global since yacc is hard to reenter */
/*****************************************************************************/
/* XXX This needs to be revisited, since BEGIN makes yacc re-enter... */

#include "perly.h"

#define LEX_NOTPARSING		11	/* borrowed from toke.c */

typedef enum {
    XOPERATOR,
    XTERM,
    XREF,
    XSTATE,
    XBLOCK,
    XATTRBLOCK,
    XATTRTERM,
    XTERMBLOCK
} expectation;

enum {		/* pass one of these to get_vtbl */
    want_vtbl_sv,
    want_vtbl_env,
    want_vtbl_envelem,
    want_vtbl_sig,
    want_vtbl_sigelem,
    want_vtbl_pack,
    want_vtbl_packelem,
    want_vtbl_dbline,
    want_vtbl_isa,
    want_vtbl_isaelem,
    want_vtbl_arylen,
    want_vtbl_glob,
    want_vtbl_mglob,
    want_vtbl_nkeys,
    want_vtbl_taint,
    want_vtbl_substr,
    want_vtbl_vec,
    want_vtbl_pos,
    want_vtbl_bm,
    want_vtbl_fm,
    want_vtbl_uvar,
    want_vtbl_defelem,
    want_vtbl_regexp,
    want_vtbl_collxfrm,
    want_vtbl_amagic,
    want_vtbl_amagicelem,
#ifdef USE_THREADS
    want_vtbl_mutex,
#endif
    want_vtbl_regdata,
    want_vtbl_regdatum,
    want_vtbl_backref
};

				/* Note: the lowest 8 bits are reserved for
				   stuffing into op->op_private */
#define HINT_PRIVATE_MASK	0x000000ff
#define HINT_INTEGER		0x00000001
#define HINT_STRICT_REFS	0x00000002
#define HINT_LOCALE		0x00000004
#define HINT_BYTE		0x00000008
/* #define HINT_notused10	0x00000010 */
				/* Note: 20,40,80 used for NATIVE_HINTS */

#define HINT_BLOCK_SCOPE	0x00000100
#define HINT_STRICT_SUBS	0x00000200
#define HINT_STRICT_VARS	0x00000400

#define HINT_NEW_INTEGER	0x00001000
#define HINT_NEW_FLOAT		0x00002000
#define HINT_NEW_BINARY		0x00004000
#define HINT_NEW_STRING		0x00008000
#define HINT_NEW_RE		0x00010000
#define HINT_LOCALIZE_HH	0x00020000 /* %^H needs to be copied */

#define HINT_RE_TAINT		0x00100000
#define HINT_RE_EVAL		0x00200000

#define HINT_FILETEST_ACCESS	0x00400000
#define HINT_UTF8		0x00800000

/* Various states of an input record separator SV (rs, nrs) */
#define RsSNARF(sv)   (! SvOK(sv))
#define RsSIMPLE(sv)  (SvOK(sv) && (! SvPOK(sv) || SvCUR(sv)))
#define RsPARA(sv)    (SvPOK(sv) && ! SvCUR(sv))
#define RsRECORD(sv)  (SvROK(sv) && (SvIV(SvRV(sv)) > 0))

/* Enable variables which are pointers to functions */
typedef regexp*(CPERLscope(*regcomp_t)) (pTHX_ char* exp, char* xend, PMOP* pm);
typedef I32 (CPERLscope(*regexec_t)) (pTHX_ regexp* prog, char* stringarg,
				      char* strend, char* strbeg, I32 minend,
				      SV* screamer, void* data, U32 flags);
typedef char* (CPERLscope(*re_intuit_start_t)) (pTHX_ regexp *prog, SV *sv,
						char *strpos, char *strend,
						U32 flags,
						struct re_scream_pos_data_s *d);
typedef SV*	(CPERLscope(*re_intuit_string_t)) (pTHX_ regexp *prog);
typedef void	(CPERLscope(*regfree_t)) (pTHX_ struct regexp* r);

typedef void (*DESTRUCTORFUNC_NOCONTEXT_t) (void*);
typedef void (*DESTRUCTORFUNC_t) (pTHXo_ void*);
typedef void (*SVFUNC_t) (pTHXo_ SV*);
typedef I32  (*SVCOMPARE_t) (pTHXo_ SV*, SV*);
typedef void (*XSINIT_t) (pTHXo);
typedef void (*ATEXIT_t) (pTHXo_ void*);
typedef void (*XSUBADDR_t) (pTHXo_ CV *);

/* Set up PERLVAR macros for populating structs */
#define PERLVAR(var,type) type var;
#define PERLVARA(var,n,type) type var[n];
#define PERLVARI(var,type,init) type var;
#define PERLVARIC(var,type,init) type var;

/* Interpreter exitlist entry */
typedef struct exitlistentry {
    void (*fn) (pTHXo_ void*);
    void *ptr;
} PerlExitListEntry;

#ifdef PERL_GLOBAL_STRUCT
struct perl_vars {
#  include "perlvars.h"
};

#  ifdef PERL_CORE
EXT struct perl_vars PL_Vars;
EXT struct perl_vars *PL_VarsPtr INIT(&PL_Vars);
#  else /* PERL_CORE */
#    if !defined(__GNUC__) || !defined(WIN32)
EXT
#    endif /* WIN32 */
struct perl_vars *PL_VarsPtr;
#    define PL_Vars (*((PL_VarsPtr) \
		       ? PL_VarsPtr : (PL_VarsPtr = Perl_GetVars(aTHX))))
#  endif /* PERL_CORE */
#endif /* PERL_GLOBAL_STRUCT */

#if defined(MULTIPLICITY) || defined(PERL_OBJECT)
/* If we have multiple interpreters define a struct 
   holding variables which must be per-interpreter
   If we don't have threads anything that would have 
   be per-thread is per-interpreter.
*/

struct interpreter {
#  ifndef USE_THREADS
#    include "thrdvar.h"
#  endif
#  include "intrpvar.h"
/*
 * The following is a buffer where new variables must
 * be defined to maintain binary compatibility with PERL_OBJECT
 */
PERLVARA(object_compatibility,30,	char)
};

#else
struct interpreter {
    char broiled;
};
#endif /* MULTIPLICITY || PERL_OBJECT */

#ifdef USE_THREADS
/* If we have threads define a struct with all the variables
 * that have to be per-thread
 */


struct perl_thread {
#include "thrdvar.h"
};

typedef struct perl_thread *Thread;

#else
typedef void *Thread;
#endif

/* Done with PERLVAR macros for now ... */
#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC

#include "thread.h"
#include "pp.h"

#ifndef PERL_CALLCONV
#  define PERL_CALLCONV
#endif 

#ifndef NEXT30_NO_ATTRIBUTE
#  ifndef HASATTRIBUTE       /* disable GNU-cc attribute checking? */
#    ifdef  __attribute__      /* Avoid possible redefinition errors */
#      undef  __attribute__
#    endif
#    define __attribute__(attr)
#  endif
#endif

#ifdef PERL_OBJECT
#  define PERL_DECL_PROT
#endif

#undef PERL_CKDEF
#undef PERL_PPDEF
#define PERL_CKDEF(s)	OP *s (pTHX_ OP *o);
#define PERL_PPDEF(s)	OP *s (pTHX);

#include "proto.h"

#ifdef PERL_OBJECT
#  undef PERL_DECL_PROT
#endif

#ifndef PERL_OBJECT
/* this has structure inits, so it cannot be included before here */
#  include "opcode.h"
#endif

/* The following must follow proto.h as #defines mess up syntax */

#if !defined(PERL_FOR_X2P)
#  include "embedvar.h"
#endif

/* Now include all the 'global' variables 
 * If we don't have threads or multiple interpreters
 * these include variables that would have been their struct-s 
 */
                         
#define PERLVAR(var,type) EXT type PL_##var;
#define PERLVARA(var,n,type) EXT type PL_##var[n];
#define PERLVARI(var,type,init) EXT type  PL_##var INIT(init);
#define PERLVARIC(var,type,init) EXTCONST type PL_##var INIT(init);

#if !defined(MULTIPLICITY) && !defined(PERL_OBJECT)
START_EXTERN_C
#  include "intrpvar.h"
#  ifndef USE_THREADS
#    include "thrdvar.h"
#  endif
END_EXTERN_C
#endif

#ifdef PERL_OBJECT
#  include "embed.h"

#  ifdef DOINIT
#    include "INTERN.h"
#  else
#    include "EXTERN.h"
#  endif

/* this has structure inits, so it cannot be included before here */
#  include "opcode.h"

#else
#  if defined(WIN32)
#    include "embed.h"
#  endif
#endif  /* PERL_OBJECT */

#ifndef PERL_GLOBAL_STRUCT
START_EXTERN_C

#  include "perlvars.h"

END_EXTERN_C
#endif

#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC

START_EXTERN_C

#ifdef DOINIT

EXT MGVTBL PL_vtbl_sv =	{MEMBER_TO_FPTR(Perl_magic_get),
				MEMBER_TO_FPTR(Perl_magic_set),
					MEMBER_TO_FPTR(Perl_magic_len),
						0,	0};
EXT MGVTBL PL_vtbl_env =	{0,	MEMBER_TO_FPTR(Perl_magic_set_all_env),
				0,	MEMBER_TO_FPTR(Perl_magic_clear_all_env),
							0};
EXT MGVTBL PL_vtbl_envelem =	{0,	MEMBER_TO_FPTR(Perl_magic_setenv),
					0,	MEMBER_TO_FPTR(Perl_magic_clearenv),
							0};
EXT MGVTBL PL_vtbl_sig =	{0,	0,		 0, 0, 0};
EXT MGVTBL PL_vtbl_sigelem =	{MEMBER_TO_FPTR(Perl_magic_getsig),
					MEMBER_TO_FPTR(Perl_magic_setsig),
					0,	MEMBER_TO_FPTR(Perl_magic_clearsig),
							0};
EXT MGVTBL PL_vtbl_pack =	{0,	0,	MEMBER_TO_FPTR(Perl_magic_sizepack),	MEMBER_TO_FPTR(Perl_magic_wipepack),
							0};
EXT MGVTBL PL_vtbl_packelem =	{MEMBER_TO_FPTR(Perl_magic_getpack),
				MEMBER_TO_FPTR(Perl_magic_setpack),
					0,	MEMBER_TO_FPTR(Perl_magic_clearpack),
							0};
EXT MGVTBL PL_vtbl_dbline =	{0,	MEMBER_TO_FPTR(Perl_magic_setdbline),
					0,	0,	0};
EXT MGVTBL PL_vtbl_isa =	{0,	MEMBER_TO_FPTR(Perl_magic_setisa),
					0,	MEMBER_TO_FPTR(Perl_magic_setisa),
							0};
EXT MGVTBL PL_vtbl_isaelem =	{0,	MEMBER_TO_FPTR(Perl_magic_setisa),
					0,	0,	0};
EXT MGVTBL PL_vtbl_arylen =	{MEMBER_TO_FPTR(Perl_magic_getarylen),
				MEMBER_TO_FPTR(Perl_magic_setarylen),
					0,	0,	0};
EXT MGVTBL PL_vtbl_glob =	{MEMBER_TO_FPTR(Perl_magic_getglob),
				MEMBER_TO_FPTR(Perl_magic_setglob),
					0,	0,	0};
EXT MGVTBL PL_vtbl_mglob =	{0,	MEMBER_TO_FPTR(Perl_magic_setmglob),
					0,	0,	0};
EXT MGVTBL PL_vtbl_nkeys =	{MEMBER_TO_FPTR(Perl_magic_getnkeys),
				MEMBER_TO_FPTR(Perl_magic_setnkeys),
					0,	0,	0};
EXT MGVTBL PL_vtbl_taint =	{MEMBER_TO_FPTR(Perl_magic_gettaint),MEMBER_TO_FPTR(Perl_magic_settaint),
					0,	0,	0};
EXT MGVTBL PL_vtbl_substr =	{MEMBER_TO_FPTR(Perl_magic_getsubstr), MEMBER_TO_FPTR(Perl_magic_setsubstr),
					0,	0,	0};
EXT MGVTBL PL_vtbl_vec =	{MEMBER_TO_FPTR(Perl_magic_getvec),
				MEMBER_TO_FPTR(Perl_magic_setvec),
					0,	0,	0};
EXT MGVTBL PL_vtbl_pos =	{MEMBER_TO_FPTR(Perl_magic_getpos),
				MEMBER_TO_FPTR(Perl_magic_setpos),
					0,	0,	0};
EXT MGVTBL PL_vtbl_bm =	{0,	MEMBER_TO_FPTR(Perl_magic_setbm),
					0,	0,	0};
EXT MGVTBL PL_vtbl_fm =	{0,	MEMBER_TO_FPTR(Perl_magic_setfm),
					0,	0,	0};
EXT MGVTBL PL_vtbl_uvar =	{MEMBER_TO_FPTR(Perl_magic_getuvar),
				MEMBER_TO_FPTR(Perl_magic_setuvar),
					0,	0,	0};
#ifdef USE_THREADS
EXT MGVTBL PL_vtbl_mutex =	{0,	0,	0,	0,	MEMBER_TO_FPTR(Perl_magic_mutexfree)};
#endif /* USE_THREADS */
EXT MGVTBL PL_vtbl_defelem = {MEMBER_TO_FPTR(Perl_magic_getdefelem),MEMBER_TO_FPTR(Perl_magic_setdefelem),
					0,	0,	0};

EXT MGVTBL PL_vtbl_regexp = {0,0,0,0, MEMBER_TO_FPTR(Perl_magic_freeregexp)};
EXT MGVTBL PL_vtbl_regdata = {0, 0, MEMBER_TO_FPTR(Perl_magic_regdata_cnt), 0, 0};
EXT MGVTBL PL_vtbl_regdatum = {MEMBER_TO_FPTR(Perl_magic_regdatum_get),
			       MEMBER_TO_FPTR(Perl_magic_regdatum_set), 0, 0, 0};

#ifdef USE_LOCALE_COLLATE
EXT MGVTBL PL_vtbl_collxfrm = {0,
				MEMBER_TO_FPTR(Perl_magic_setcollxfrm),
					0,	0,	0};
#endif

EXT MGVTBL PL_vtbl_amagic =       {0,     MEMBER_TO_FPTR(Perl_magic_setamagic),
                                        0,      0,      MEMBER_TO_FPTR(Perl_magic_setamagic)};
EXT MGVTBL PL_vtbl_amagicelem =   {0,     MEMBER_TO_FPTR(Perl_magic_setamagic),
                                        0,      0,      MEMBER_TO_FPTR(Perl_magic_setamagic)};

EXT MGVTBL PL_vtbl_backref = 	  {0,	0,
					0,	0,	MEMBER_TO_FPTR(Perl_magic_killbackrefs)};

#else /* !DOINIT */

EXT MGVTBL PL_vtbl_sv;
EXT MGVTBL PL_vtbl_env;
EXT MGVTBL PL_vtbl_envelem;
EXT MGVTBL PL_vtbl_sig;
EXT MGVTBL PL_vtbl_sigelem;
EXT MGVTBL PL_vtbl_pack;
EXT MGVTBL PL_vtbl_packelem;
EXT MGVTBL PL_vtbl_dbline;
EXT MGVTBL PL_vtbl_isa;
EXT MGVTBL PL_vtbl_isaelem;
EXT MGVTBL PL_vtbl_arylen;
EXT MGVTBL PL_vtbl_glob;
EXT MGVTBL PL_vtbl_mglob;
EXT MGVTBL PL_vtbl_nkeys;
EXT MGVTBL PL_vtbl_taint;
EXT MGVTBL PL_vtbl_substr;
EXT MGVTBL PL_vtbl_vec;
EXT MGVTBL PL_vtbl_pos;
EXT MGVTBL PL_vtbl_bm;
EXT MGVTBL PL_vtbl_fm;
EXT MGVTBL PL_vtbl_uvar;

#ifdef USE_THREADS
EXT MGVTBL PL_vtbl_mutex;
#endif /* USE_THREADS */

EXT MGVTBL PL_vtbl_defelem;
EXT MGVTBL PL_vtbl_regexp;
EXT MGVTBL PL_vtbl_regdata;
EXT MGVTBL PL_vtbl_regdatum;

#ifdef USE_LOCALE_COLLATE
EXT MGVTBL PL_vtbl_collxfrm;
#endif

EXT MGVTBL PL_vtbl_amagic;
EXT MGVTBL PL_vtbl_amagicelem;

EXT MGVTBL PL_vtbl_backref;

#endif /* !DOINIT */

enum {
  fallback_amg,        abs_amg,
  bool__amg,   nomethod_amg,
  string_amg,  numer_amg,
  add_amg,     add_ass_amg,
  subtr_amg,   subtr_ass_amg,
  mult_amg,    mult_ass_amg,
  div_amg,     div_ass_amg,
  modulo_amg,  modulo_ass_amg,
  pow_amg,     pow_ass_amg,
  lshift_amg,  lshift_ass_amg,
  rshift_amg,  rshift_ass_amg,
  band_amg,    band_ass_amg,
  bor_amg,     bor_ass_amg,
  bxor_amg,    bxor_ass_amg,
  lt_amg,      le_amg,
  gt_amg,      ge_amg,
  eq_amg,      ne_amg,
  ncmp_amg,    scmp_amg,
  slt_amg,     sle_amg,
  sgt_amg,     sge_amg,
  seq_amg,     sne_amg,
  not_amg,     compl_amg,
  inc_amg,     dec_amg,
  atan2_amg,   cos_amg,
  sin_amg,     exp_amg,
  log_amg,     sqrt_amg,
  repeat_amg,   repeat_ass_amg,
  concat_amg,  concat_ass_amg,
  copy_amg,    neg_amg,
  to_sv_amg,   to_av_amg,
  to_hv_amg,   to_gv_amg,
  to_cv_amg,   iter_amg,    
  max_amg_code
  /* Do not leave a trailing comma here.  C9X allows it, C89 doesn't. */
};

#define NofAMmeth max_amg_code

#ifdef DOINIT
EXTCONST char * PL_AMG_names[NofAMmeth] = {
  "fallback",	"abs",			/* "fallback" should be the first. */
  "bool",	"nomethod",
  "\"\"",	"0+",
  "+",		"+=",
  "-",		"-=",
  "*",		"*=",
  "/",		"/=",
  "%",		"%=",
  "**",		"**=",
  "<<",		"<<=",
  ">>",		">>=",
  "&",		"&=",
  "|",		"|=",
  "^",		"^=",
  "<",		"<=",
  ">",		">=",
  "==",		"!=",
  "<=>",	"cmp",
  "lt",		"le",
  "gt",		"ge",
  "eq",		"ne",
  "!",		"~",
  "++",		"--",
  "atan2",	"cos",
  "sin",	"exp",
  "log",	"sqrt",
  "x",		"x=",
  ".",		".=",
  "=",		"neg",
  "${}",	"@{}",
  "%{}",	"*{}",
  "&{}",	"<>",
};
#else
EXTCONST char * PL_AMG_names[NofAMmeth];
#endif /* def INITAMAGIC */

END_EXTERN_C

struct am_table {
  long was_ok_sub;
  long was_ok_am;
  U32 flags;
  CV* table[NofAMmeth];
  long fallback;
};
struct am_table_short {
  long was_ok_sub;
  long was_ok_am;
  U32 flags;
};
typedef struct am_table AMT;
typedef struct am_table_short AMTS;

#define AMGfallNEVER	1
#define AMGfallNO	2
#define AMGfallYES	3

#define AMTf_AMAGIC		1
#define AMT_AMAGIC(amt)		((amt)->flags & AMTf_AMAGIC)
#define AMT_AMAGIC_on(amt)	((amt)->flags |= AMTf_AMAGIC)
#define AMT_AMAGIC_off(amt)	((amt)->flags &= ~AMTf_AMAGIC)


/*
 * some compilers like to redefine cos et alia as faster
 * (and less accurate?) versions called F_cos et cetera (Quidquid
 * latine dictum sit, altum viditur.)  This trick collides with
 * the Perl overloading (amg).  The following #defines fool both.
 */

#ifdef _FASTMATH
#   ifdef atan2
#       define F_atan2_amg  atan2_amg
#   endif
#   ifdef cos
#       define F_cos_amg    cos_amg
#   endif
#   ifdef exp
#       define F_exp_amg    exp_amg
#   endif
#   ifdef log
#       define F_log_amg    log_amg
#   endif
#   ifdef pow
#       define F_pow_amg    pow_amg
#   endif
#   ifdef sin
#       define F_sin_amg    sin_amg
#   endif
#   ifdef sqrt
#       define F_sqrt_amg   sqrt_amg
#   endif
#endif /* _FASTMATH */

#define PERLDB_ALL		(PERLDBf_SUB	| PERLDBf_LINE	|	\
				 PERLDBf_NOOPT	| PERLDBf_INTER	|	\
				 PERLDBf_SUBLINE| PERLDBf_SINGLE|	\
				 PERLDBf_NAMEEVAL| PERLDBf_NAMEANON)
					/* No _NONAME, _GOTO */
#define PERLDBf_SUB		0x01	/* Debug sub enter/exit */
#define PERLDBf_LINE		0x02	/* Keep line # */
#define PERLDBf_NOOPT		0x04	/* Switch off optimizations */
#define PERLDBf_INTER		0x08	/* Preserve more data for
					   later inspections  */
#define PERLDBf_SUBLINE		0x10	/* Keep subr source lines */
#define PERLDBf_SINGLE		0x20	/* Start with single-step on */
#define PERLDBf_NONAME		0x40	/* For _SUB: no name of the subr */
#define PERLDBf_GOTO		0x80	/* Report goto: call DB::goto */
#define PERLDBf_NAMEEVAL	0x100	/* Informative names for evals */
#define PERLDBf_NAMEANON	0x200	/* Informative names for anon subs */

#define PERLDB_SUB	(PL_perldb && (PL_perldb & PERLDBf_SUB))
#define PERLDB_LINE	(PL_perldb && (PL_perldb & PERLDBf_LINE))
#define PERLDB_NOOPT	(PL_perldb && (PL_perldb & PERLDBf_NOOPT))
#define PERLDB_INTER	(PL_perldb && (PL_perldb & PERLDBf_INTER))
#define PERLDB_SUBLINE	(PL_perldb && (PL_perldb & PERLDBf_SUBLINE))
#define PERLDB_SINGLE	(PL_perldb && (PL_perldb & PERLDBf_SINGLE))
#define PERLDB_SUB_NN	(PL_perldb && (PL_perldb & (PERLDBf_NONAME)))
#define PERLDB_GOTO	(PL_perldb && (PL_perldb & PERLDBf_GOTO))
#define PERLDB_NAMEEVAL	(PL_perldb && (PL_perldb & PERLDBf_NAMEEVAL))
#define PERLDB_NAMEANON	(PL_perldb && (PL_perldb & PERLDBf_NAMEANON))


#ifdef USE_LOCALE_NUMERIC

#define SET_NUMERIC_STANDARD() \
	set_numeric_standard();

#define SET_NUMERIC_LOCAL() \
	set_numeric_local();

#define IN_LOCALE_RUNTIME	(PL_curcop->op_private & HINT_LOCALE)
#define IN_LOCALE_COMPILETIME	(PL_hints & HINT_LOCALE)

#define IN_LOCALE \
	(PL_curcop == &PL_compiling ? IN_LOCALE_COMPILETIME : IN_LOCALE_RUNTIME)

#define IS_NUMERIC_RADIX(s, send)	\
	(PL_numeric_radix_sv \
	 && IN_LOCALE \
	 && SvCUR(PL_numeric_radix_sv) <= (STRLEN)((send)-(s)) \
	 && memEQ(s, SvPVX(PL_numeric_radix_sv), SvCUR(PL_numeric_radix_sv)))

#define STORE_NUMERIC_LOCAL_SET_STANDARD() \
	bool was_local = PL_numeric_local && IN_LOCALE; \
	if (was_local) SET_NUMERIC_STANDARD();

#define STORE_NUMERIC_STANDARD_SET_LOCAL() \
	bool was_standard = PL_numeric_standard && IN_LOCALE; \
	if (was_standard) SET_NUMERIC_LOCAL();

#define RESTORE_NUMERIC_LOCAL() \
	if (was_local) SET_NUMERIC_LOCAL();

#define RESTORE_NUMERIC_STANDARD() \
	if (was_standard) SET_NUMERIC_STANDARD();

#define Atof				my_atof

#else /* !USE_LOCALE_NUMERIC */

#define SET_NUMERIC_STANDARD()  	/**/
#define SET_NUMERIC_LOCAL()     	/**/
#define IS_NUMERIC_RADIX(a, b)		(0)
#define STORE_NUMERIC_LOCAL_SET_STANDARD()	/**/
#define STORE_NUMERIC_STANDARD_SET_LOCAL()	/**/
#define RESTORE_NUMERIC_LOCAL()		/**/
#define RESTORE_NUMERIC_STANDARD()	/**/
#define Atof				Perl_atof

#endif /* !USE_LOCALE_NUMERIC */

#if !defined(Strtol) && defined(USE_64_BIT_INT) && defined(IV_IS_QUAD) && QUADKIND == QUAD_IS_LONG_LONG
#    ifdef __hpux
#        define strtoll __strtoll	/* secret handshake */
#    endif
#   if !defined(Strtol) && defined(HAS_STRTOLL)
#       define Strtol	strtoll
#   endif
/* is there atoq() anywhere? */
#endif
#if !defined(Strtol) && defined(HAS_STRTOL)
#   define Strtol	strtol
#endif
#ifndef Atol
/* It would be more fashionable to use Strtol() to define atol()
 * (as is done for Atoul(), see below) but for backward compatibility
 * we just assume atol(). */
#   if defined(USE_64_BIT_INT) && defined(IV_IS_QUAD) && QUADKIND == QUAD_IS_LONG_LONG && defined(HAS_ATOLL)
#       define Atol	atoll
#   else
#       define Atol	atol
#   endif
#endif

#if !defined(Strtoul) && defined(USE_64_BIT_INT) && defined(UV_IS_QUAD) && QUADKIND == QUAD_IS_LONG_LONG
#    ifdef __hpux
#        define strtoull __strtoull	/* secret handshake */
#    endif
#    if !defined(Strtoul) && defined(HAS_STRTOULL)
#       define Strtoul	strtoull
#    endif
#    if !defined(Strtoul) && defined(HAS_STRTOUQ)
#       define Strtoul	strtouq
#    endif
/* is there atouq() anywhere? */
#endif
#if !defined(Strtoul) && defined(HAS_STRTOUL)
#   define Strtoul	strtoul
#endif
#ifndef Atoul
#   define Atoul(s)	Strtoul(s, (char **)NULL, 10)
#endif

#if !defined(PERLIO_IS_STDIO) && defined(HASATTRIBUTE)
/* 
 * Now we have __attribute__ out of the way 
 * Remap printf 
 */
#undef printf
#define printf PerlIO_stdoutf
#endif

/* if these never got defined, they need defaults */
#ifndef PERL_SET_CONTEXT
#  define PERL_SET_CONTEXT(i)		PERL_SET_INTERP(i)
#endif

#ifndef PERL_GET_CONTEXT
#  define PERL_GET_CONTEXT		PERL_GET_INTERP
#endif

#ifndef PERL_GET_THX
#  define PERL_GET_THX			((void*)NULL)
#endif

#ifndef PERL_SET_THX
#  define PERL_SET_THX(t)		NOOP
#endif

#ifndef PERL_SCRIPT_MODE
#define PERL_SCRIPT_MODE "r"
#endif

/*
 * Some operating systems are stingy with stack allocation,
 * so perl may have to guard against stack overflow.
 */
#ifndef PERL_STACK_OVERFLOW_CHECK
#define PERL_STACK_OVERFLOW_CHECK()  NOOP
#endif

/*
 * Some nonpreemptive operating systems find it convenient to
 * check for asynchronous conditions after each op execution.
 * Keep this check simple, or it may slow down execution
 * massively.
 */
#ifndef PERL_ASYNC_CHECK
#define PERL_ASYNC_CHECK()  NOOP
#endif

/*
 * On some operating systems, a memory allocation may succeed,
 * but put the process too close to the system's comfort limit.
 * In this case, PERL_ALLOC_CHECK frees the pointer and sets
 * it to NULL.
 */
#ifndef PERL_ALLOC_CHECK
#define PERL_ALLOC_CHECK(p)  NOOP
#endif

/*
 * nice_chunk and nice_chunk size need to be set
 * and queried under the protection of sv_mutex
 */
#define offer_nice_chunk(chunk, chunk_size) do {	\
	LOCK_SV_MUTEX;					\
	if (!PL_nice_chunk) {				\
	    PL_nice_chunk = (char*)(chunk);		\
	    PL_nice_chunk_size = (chunk_size);		\
	}						\
	else {						\
	    Safefree(chunk);				\
	}						\
	UNLOCK_SV_MUTEX;				\
    } while (0)

#ifdef HAS_SEM
#   include <sys/ipc.h>
#   include <sys/sem.h>
#   ifndef HAS_UNION_SEMUN	/* Provide the union semun. */
    union semun {
	int		val;
	struct semid_ds	*buf;
	unsigned short	*array;
    };
#   endif
#   ifdef USE_SEMCTL_SEMUN
#	ifdef IRIX32_SEMUN_BROKEN_BY_GCC
            union gccbug_semun {
		int             val;
		struct semid_ds *buf;
		unsigned short  *array;
		char            __dummy[5];
	    };
#           define semun gccbug_semun
#	endif
#       define Semctl(id, num, cmd, semun) semctl(id, num, cmd, semun)
#   else
#       ifdef USE_SEMCTL_SEMID_DS
#           ifdef EXTRA_F_IN_SEMUN_BUF
#               define Semctl(id, num, cmd, semun) semctl(id, num, cmd, semun.buff)
#           else
#               define Semctl(id, num, cmd, semun) semctl(id, num, cmd, semun.buf)
#           endif
#       endif
#   endif
#endif

/*
 * Boilerplate macros for initializing and accessing interpreter-local
 * data from C.  All statics in extensions should be reworked to use
 * this, if you want to make the extension thread-safe.  See ext/re/re.xs
 * for an example of the use of these macros.
 *
 * Code that uses these macros is responsible for the following:
 * 1. #define MY_CXT_KEY to a unique string, e.g. "DynaLoader_guts"
 * 2. Declare a typedef named my_cxt_t that is a structure that contains
 *    all the data that needs to be interpreter-local.
 * 3. Use the START_MY_CXT macro after the declaration of my_cxt_t.
 * 4. Use the MY_CXT_INIT macro such that it is called exactly once
 *    (typically put in the BOOT: section).
 * 5. Use the members of the my_cxt_t structure everywhere as
 *    MY_CXT.member.
 * 6. Use the dMY_CXT macro (a declaration) in all the functions that
 *    access MY_CXT.
 */

#if defined(USE_ITHREADS)

/* This must appear in all extensions that define a my_cxt_t structure,
 * right after the definition (i.e. at file scope).  The non-threads
 * case below uses it to declare the data as static. */
#define START_MY_CXT

/* Fetches the SV that keeps the per-interpreter data. */
#define dMY_CXT_SV \
	SV *my_cxt_sv = *hv_fetch(PL_modglobal, MY_CXT_KEY,		\
				  sizeof(MY_CXT_KEY)-1, TRUE)

/* This declaration should be used within all functions that use the
 * interpreter-local data. */
#define dMY_CXT	\
	dMY_CXT_SV;							\
	my_cxt_t *my_cxtp = INT2PTR(my_cxt_t*,SvUV(my_cxt_sv))

/* Creates and zeroes the per-interpreter data.
 * (We allocate my_cxtp in a Perl SV so that it will be released when
 * the interpreter goes away.) */
#define MY_CXT_INIT \
	dMY_CXT_SV;							\
	/* newSV() allocates one more than needed */			\
	my_cxt_t *my_cxtp = (my_cxt_t*)SvPVX(newSV(sizeof(my_cxt_t)-1));\
	Zero(my_cxtp, 1, my_cxt_t);					\
	sv_setuv(my_cxt_sv, PTR2UV(my_cxtp))

/* This macro must be used to access members of the my_cxt_t structure.
 * e.g. MYCXT.some_data */
#define MY_CXT		(*my_cxtp)

/* Judicious use of these macros can reduce the number of times dMY_CXT
 * is used.  Use is similar to pTHX, aTHX etc. */
#define pMY_CXT		my_cxt_t *my_cxtp
#define pMY_CXT_	pMY_CXT,
#define _pMY_CXT	,pMY_CXT
#define aMY_CXT		my_cxtp
#define aMY_CXT_	aMY_CXT,
#define _aMY_CXT	,aMY_CXT

#else /* USE_ITHREADS */

#define START_MY_CXT	static my_cxt_t my_cxt;
#define dMY_CXT_SV	dNOOP
#define dMY_CXT		dNOOP
#define MY_CXT_INIT	NOOP
#define MY_CXT		my_cxt

#define pMY_CXT		void
#define pMY_CXT_
#define _pMY_CXT
#define aMY_CXT
#define aMY_CXT_
#define _aMY_CXT

#endif /* !defined(USE_ITHREADS) */

#ifdef I_FCNTL
#  include <fcntl.h>
#endif

#ifdef I_SYS_FILE
#  include <sys/file.h>
#endif

#ifndef O_RDONLY
/* Assume UNIX defaults */
#    define O_RDONLY	0000
#    define O_WRONLY	0001
#    define O_RDWR	0002
#    define O_CREAT	0100
#endif

#ifndef O_BINARY
#  define O_BINARY 0
#endif

#ifndef O_TEXT
#  define O_TEXT 0
#endif

#ifdef IAMSUID

#ifdef I_SYS_STATVFS
#   include <sys/statvfs.h>     /* for f?statvfs() */
#endif
#ifdef I_SYS_MOUNT
#   include <sys/mount.h>       /* for *BSD f?statfs() */
#endif
#ifdef I_MNTENT
#   include <mntent.h>          /* for getmntent() */
#endif
#ifdef I_SYS_STATFS
#   include <sys/statfs.h>      /* for some statfs() */
#endif
#ifdef I_SYS_VFS
#  ifdef __sgi
#    define sv IRIX_sv		/* kludge: IRIX has an sv of its own */
#  endif
#    include <sys/vfs.h>	/* for some statfs() */
#  ifdef __sgi
#    undef IRIX_sv
#  endif
#endif
#ifdef I_USTAT
#   include <ustat.h>           /* for ustat() */
#endif

#if !defined(PERL_MOUNT_NOSUID) && defined(MOUNT_NOSUID)
#    define PERL_MOUNT_NOSUID MOUNT_NOSUID
#endif
#if !defined(PERL_MOUNT_NOSUID) && defined(MNT_NOSUID)
#    define PERL_MOUNT_NOSUID MNT_NOSUID
#endif
#if !defined(PERL_MOUNT_NOSUID) && defined(MS_NOSUID)
#   define PERL_MOUNT_NOSUID MS_NOSUID
#endif
#if !defined(PERL_MOUNT_NOSUID) && defined(M_NOSUID)
#   define PERL_MOUNT_NOSUID M_NOSUID
#endif

#endif /* IAMSUID */

#ifdef I_LIBUTIL
#   include <libutil.h>		/* setproctitle() in some FreeBSDs */
#endif

#ifndef EXEC_ARGV_CAST
#define EXEC_ARGV_CAST(x) x
#endif

/* and finally... */
#define PERL_PATCHLEVEL_H_IMPLICIT
#include "patchlevel.h"
#undef PERL_PATCHLEVEL_H_IMPLICIT

/* Mention
   
   NV_PRESERVES_UV

   HAS_ICONV
   I_ICONV

   HAS_MKSTEMP
   HAS_MKSTEMPS
   HAS_MKDTEMP

   HAS_GETCWD

   HAS_MMAP
   HAS_MPROTECT
   HAS_MSYNC
   HAS_MADVISE
   HAS_MUNMAP
   I_SYSMMAN
   Mmap_t

   NVef
   NVff
   NVgf

   so that Configure picks them up. */

#endif /* Include guard */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlapi.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!! 
   This file is built by embed.pl from data in embed.pl, pp.sym, intrpvar.h,
   perlvars.h and thrdvar.h.  Any changes made here will be lost!
*/

/* declare accessor functions for Perl variables */
#ifndef __perlapi_h__
#define __perlapi_h__

#if defined(PERL_OBJECT) || defined (MULTIPLICITY)

#if defined(PERL_OBJECT)
#  undef  aTHXo
#  define aTHXo			pPerl
#  undef  aTHXo_
#  define aTHXo_		aTHXo,
#endif /* PERL_OBJECT */

START_EXTERN_C

#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC
#define PERLVAR(v,t)	EXTERN_C t* Perl_##v##_ptr(pTHXo);
#define PERLVARA(v,n,t)	typedef t PL_##v##_t[n];			\
			EXTERN_C PL_##v##_t* Perl_##v##_ptr(pTHXo);
#define PERLVARI(v,t,i)	PERLVAR(v,t)
#define PERLVARIC(v,t,i) PERLVAR(v, const t)

#include "thrdvar.h"
#include "intrpvar.h"
#include "perlvars.h"

#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC

END_EXTERN_C

#if defined(PERL_CORE)

/* accessor functions for Perl variables (provide binary compatibility) */

/* these need to be mentioned here, or most linkers won't put them in
   the perl executable */

#ifndef PERL_NO_FORCE_LINK

START_EXTERN_C

#ifndef DOINIT
EXT void *PL_force_link_funcs[];
#else
EXT void *PL_force_link_funcs[] = {
#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC
#define PERLVAR(v,t)	(void*)Perl_##v##_ptr,
#define PERLVARA(v,n,t)	PERLVAR(v,t)
#define PERLVARI(v,t,i)	PERLVAR(v,t)
#define PERLVARIC(v,t,i) PERLVAR(v,t)

#include "thrdvar.h"
#include "intrpvar.h"
#include "perlvars.h"

#undef PERLVAR
#undef PERLVARA
#undef PERLVARI
#undef PERLVARIC
};
#endif	/* DOINIT */

START_EXTERN_C

#endif	/* PERL_NO_FORCE_LINK */

#else	/* !PERL_CORE */

#undef  PL_Argv
#define PL_Argv			(*Perl_IArgv_ptr(aTHXo))
#undef  PL_Cmd
#define PL_Cmd			(*Perl_ICmd_ptr(aTHXo))
#undef  PL_DBcv
#define PL_DBcv			(*Perl_IDBcv_ptr(aTHXo))
#undef  PL_DBgv
#define PL_DBgv			(*Perl_IDBgv_ptr(aTHXo))
#undef  PL_DBline
#define PL_DBline		(*Perl_IDBline_ptr(aTHXo))
#undef  PL_DBsignal
#define PL_DBsignal		(*Perl_IDBsignal_ptr(aTHXo))
#undef  PL_DBsingle
#define PL_DBsingle		(*Perl_IDBsingle_ptr(aTHXo))
#undef  PL_DBsub
#define PL_DBsub		(*Perl_IDBsub_ptr(aTHXo))
#undef  PL_DBtrace
#define PL_DBtrace		(*Perl_IDBtrace_ptr(aTHXo))
#undef  PL_Dir
#define PL_Dir			(*Perl_IDir_ptr(aTHXo))
#undef  PL_Env
#define PL_Env			(*Perl_IEnv_ptr(aTHXo))
#undef  PL_LIO
#define PL_LIO			(*Perl_ILIO_ptr(aTHXo))
#undef  PL_Mem
#define PL_Mem			(*Perl_IMem_ptr(aTHXo))
#undef  PL_MemParse
#define PL_MemParse		(*Perl_IMemParse_ptr(aTHXo))
#undef  PL_MemShared
#define PL_MemShared		(*Perl_IMemShared_ptr(aTHXo))
#undef  PL_Proc
#define PL_Proc			(*Perl_IProc_ptr(aTHXo))
#undef  PL_Sock
#define PL_Sock			(*Perl_ISock_ptr(aTHXo))
#undef  PL_StdIO
#define PL_StdIO		(*Perl_IStdIO_ptr(aTHXo))
#undef  PL_amagic_generation
#define PL_amagic_generation	(*Perl_Iamagic_generation_ptr(aTHXo))
#undef  PL_an
#define PL_an			(*Perl_Ian_ptr(aTHXo))
#undef  PL_argvgv
#define PL_argvgv		(*Perl_Iargvgv_ptr(aTHXo))
#undef  PL_argvout_stack
#define PL_argvout_stack	(*Perl_Iargvout_stack_ptr(aTHXo))
#undef  PL_argvoutgv
#define PL_argvoutgv		(*Perl_Iargvoutgv_ptr(aTHXo))
#undef  PL_basetime
#define PL_basetime		(*Perl_Ibasetime_ptr(aTHXo))
#undef  PL_beginav
#define PL_beginav		(*Perl_Ibeginav_ptr(aTHXo))
#undef  PL_beginav_save
#define PL_beginav_save		(*Perl_Ibeginav_save_ptr(aTHXo))
#undef  PL_bitcount
#define PL_bitcount		(*Perl_Ibitcount_ptr(aTHXo))
#undef  PL_bufend
#define PL_bufend		(*Perl_Ibufend_ptr(aTHXo))
#undef  PL_bufptr
#define PL_bufptr		(*Perl_Ibufptr_ptr(aTHXo))
#undef  PL_checkav
#define PL_checkav		(*Perl_Icheckav_ptr(aTHXo))
#undef  PL_collation_ix
#define PL_collation_ix		(*Perl_Icollation_ix_ptr(aTHXo))
#undef  PL_collation_name
#define PL_collation_name	(*Perl_Icollation_name_ptr(aTHXo))
#undef  PL_collation_standard
#define PL_collation_standard	(*Perl_Icollation_standard_ptr(aTHXo))
#undef  PL_collxfrm_base
#define PL_collxfrm_base	(*Perl_Icollxfrm_base_ptr(aTHXo))
#undef  PL_collxfrm_mult
#define PL_collxfrm_mult	(*Perl_Icollxfrm_mult_ptr(aTHXo))
#undef  PL_compcv
#define PL_compcv		(*Perl_Icompcv_ptr(aTHXo))
#undef  PL_compiling
#define PL_compiling		(*Perl_Icompiling_ptr(aTHXo))
#undef  PL_comppad
#define PL_comppad		(*Perl_Icomppad_ptr(aTHXo))
#undef  PL_comppad_name
#define PL_comppad_name		(*Perl_Icomppad_name_ptr(aTHXo))
#undef  PL_comppad_name_fill
#define PL_comppad_name_fill	(*Perl_Icomppad_name_fill_ptr(aTHXo))
#undef  PL_comppad_name_floor
#define PL_comppad_name_floor	(*Perl_Icomppad_name_floor_ptr(aTHXo))
#undef  PL_cop_seqmax
#define PL_cop_seqmax		(*Perl_Icop_seqmax_ptr(aTHXo))
#undef  PL_copline
#define PL_copline		(*Perl_Icopline_ptr(aTHXo))
#undef  PL_cred_mutex
#define PL_cred_mutex		(*Perl_Icred_mutex_ptr(aTHXo))
#undef  PL_cryptseen
#define PL_cryptseen		(*Perl_Icryptseen_ptr(aTHXo))
#undef  PL_cshlen
#define PL_cshlen		(*Perl_Icshlen_ptr(aTHXo))
#undef  PL_cshname
#define PL_cshname		(*Perl_Icshname_ptr(aTHXo))
#undef  PL_curcopdb
#define PL_curcopdb		(*Perl_Icurcopdb_ptr(aTHXo))
#undef  PL_curstname
#define PL_curstname		(*Perl_Icurstname_ptr(aTHXo))
#undef  PL_curthr
#define PL_curthr		(*Perl_Icurthr_ptr(aTHXo))
#undef  PL_dbargs
#define PL_dbargs		(*Perl_Idbargs_ptr(aTHXo))
#undef  PL_debstash
#define PL_debstash		(*Perl_Idebstash_ptr(aTHXo))
#undef  PL_debug
#define PL_debug		(*Perl_Idebug_ptr(aTHXo))
#undef  PL_defgv
#define PL_defgv		(*Perl_Idefgv_ptr(aTHXo))
#undef  PL_diehook
#define PL_diehook		(*Perl_Idiehook_ptr(aTHXo))
#undef  PL_doextract
#define PL_doextract		(*Perl_Idoextract_ptr(aTHXo))
#undef  PL_doswitches
#define PL_doswitches		(*Perl_Idoswitches_ptr(aTHXo))
#undef  PL_dowarn
#define PL_dowarn		(*Perl_Idowarn_ptr(aTHXo))
#undef  PL_dummy1_bincompat
#define PL_dummy1_bincompat	(*Perl_Idummy1_bincompat_ptr(aTHXo))
#undef  PL_e_script
#define PL_e_script		(*Perl_Ie_script_ptr(aTHXo))
#undef  PL_egid
#define PL_egid			(*Perl_Iegid_ptr(aTHXo))
#undef  PL_endav
#define PL_endav		(*Perl_Iendav_ptr(aTHXo))
#undef  PL_envgv
#define PL_envgv		(*Perl_Ienvgv_ptr(aTHXo))
#undef  PL_errgv
#define PL_errgv		(*Perl_Ierrgv_ptr(aTHXo))
#undef  PL_error_count
#define PL_error_count		(*Perl_Ierror_count_ptr(aTHXo))
#undef  PL_euid
#define PL_euid			(*Perl_Ieuid_ptr(aTHXo))
#undef  PL_eval_cond
#define PL_eval_cond		(*Perl_Ieval_cond_ptr(aTHXo))
#undef  PL_eval_mutex
#define PL_eval_mutex		(*Perl_Ieval_mutex_ptr(aTHXo))
#undef  PL_eval_owner
#define PL_eval_owner		(*Perl_Ieval_owner_ptr(aTHXo))
#undef  PL_eval_root
#define PL_eval_root		(*Perl_Ieval_root_ptr(aTHXo))
#undef  PL_eval_start
#define PL_eval_start		(*Perl_Ieval_start_ptr(aTHXo))
#undef  PL_evalseq
#define PL_evalseq		(*Perl_Ievalseq_ptr(aTHXo))
#undef  PL_exit_flags
#define PL_exit_flags		(*Perl_Iexit_flags_ptr(aTHXo))
#undef  PL_exitlist
#define PL_exitlist		(*Perl_Iexitlist_ptr(aTHXo))
#undef  PL_exitlistlen
#define PL_exitlistlen		(*Perl_Iexitlistlen_ptr(aTHXo))
#undef  PL_expect
#define PL_expect		(*Perl_Iexpect_ptr(aTHXo))
#undef  PL_fdpid
#define PL_fdpid		(*Perl_Ifdpid_ptr(aTHXo))
#undef  PL_fdpid_mutex
#define PL_fdpid_mutex		(*Perl_Ifdpid_mutex_ptr(aTHXo))
#undef  PL_filemode
#define PL_filemode		(*Perl_Ifilemode_ptr(aTHXo))
#undef  PL_forkprocess
#define PL_forkprocess		(*Perl_Iforkprocess_ptr(aTHXo))
#undef  PL_formfeed
#define PL_formfeed		(*Perl_Iformfeed_ptr(aTHXo))
#undef  PL_generation
#define PL_generation		(*Perl_Igeneration_ptr(aTHXo))
#undef  PL_gensym
#define PL_gensym		(*Perl_Igensym_ptr(aTHXo))
#undef  PL_gid
#define PL_gid			(*Perl_Igid_ptr(aTHXo))
#undef  PL_glob_index
#define PL_glob_index		(*Perl_Iglob_index_ptr(aTHXo))
#undef  PL_globalstash
#define PL_globalstash		(*Perl_Iglobalstash_ptr(aTHXo))
#undef  PL_he_arenaroot
#define PL_he_arenaroot		(*Perl_Ihe_arenaroot_ptr(aTHXo))
#undef  PL_he_root
#define PL_he_root		(*Perl_Ihe_root_ptr(aTHXo))
#undef  PL_hintgv
#define PL_hintgv		(*Perl_Ihintgv_ptr(aTHXo))
#undef  PL_hints
#define PL_hints		(*Perl_Ihints_ptr(aTHXo))
#undef  PL_in_clean_all
#define PL_in_clean_all		(*Perl_Iin_clean_all_ptr(aTHXo))
#undef  PL_in_clean_objs
#define PL_in_clean_objs	(*Perl_Iin_clean_objs_ptr(aTHXo))
#undef  PL_in_my
#define PL_in_my		(*Perl_Iin_my_ptr(aTHXo))
#undef  PL_in_my_stash
#define PL_in_my_stash		(*Perl_Iin_my_stash_ptr(aTHXo))
#undef  PL_incgv
#define PL_incgv		(*Perl_Iincgv_ptr(aTHXo))
#undef  PL_initav
#define PL_initav		(*Perl_Iinitav_ptr(aTHXo))
#undef  PL_inplace
#define PL_inplace		(*Perl_Iinplace_ptr(aTHXo))
#undef  PL_last_lop
#define PL_last_lop		(*Perl_Ilast_lop_ptr(aTHXo))
#undef  PL_last_lop_op
#define PL_last_lop_op		(*Perl_Ilast_lop_op_ptr(aTHXo))
#undef  PL_last_swash_hv
#define PL_last_swash_hv	(*Perl_Ilast_swash_hv_ptr(aTHXo))
#undef  PL_last_swash_key
#define PL_last_swash_key	(*Perl_Ilast_swash_key_ptr(aTHXo))
#undef  PL_last_swash_klen
#define PL_last_swash_klen	(*Perl_Ilast_swash_klen_ptr(aTHXo))
#undef  PL_last_swash_slen
#define PL_last_swash_slen	(*Perl_Ilast_swash_slen_ptr(aTHXo))
#undef  PL_last_swash_tmps
#define PL_last_swash_tmps	(*Perl_Ilast_swash_tmps_ptr(aTHXo))
#undef  PL_last_uni
#define PL_last_uni		(*Perl_Ilast_uni_ptr(aTHXo))
#undef  PL_lastfd
#define PL_lastfd		(*Perl_Ilastfd_ptr(aTHXo))
#undef  PL_laststatval
#define PL_laststatval		(*Perl_Ilaststatval_ptr(aTHXo))
#undef  PL_laststype
#define PL_laststype		(*Perl_Ilaststype_ptr(aTHXo))
#undef  PL_lex_brackets
#define PL_lex_brackets		(*Perl_Ilex_brackets_ptr(aTHXo))
#undef  PL_lex_brackstack
#define PL_lex_brackstack	(*Perl_Ilex_brackstack_ptr(aTHXo))
#undef  PL_lex_casemods
#define PL_lex_casemods		(*Perl_Ilex_casemods_ptr(aTHXo))
#undef  PL_lex_casestack
#define PL_lex_casestack	(*Perl_Ilex_casestack_ptr(aTHXo))
#undef  PL_lex_defer
#define PL_lex_defer		(*Perl_Ilex_defer_ptr(aTHXo))
#undef  PL_lex_dojoin
#define PL_lex_dojoin		(*Perl_Ilex_dojoin_ptr(aTHXo))
#undef  PL_lex_expect
#define PL_lex_expect		(*Perl_Ilex_expect_ptr(aTHXo))
#undef  PL_lex_formbrack
#define PL_lex_formbrack	(*Perl_Ilex_formbrack_ptr(aTHXo))
#undef  PL_lex_inpat
#define PL_lex_inpat		(*Perl_Ilex_inpat_ptr(aTHXo))
#undef  PL_lex_inwhat
#define PL_lex_inwhat		(*Perl_Ilex_inwhat_ptr(aTHXo))
#undef  PL_lex_op
#define PL_lex_op		(*Perl_Ilex_op_ptr(aTHXo))
#undef  PL_lex_repl
#define PL_lex_repl		(*Perl_Ilex_repl_ptr(aTHXo))
#undef  PL_lex_starts
#define PL_lex_starts		(*Perl_Ilex_starts_ptr(aTHXo))
#undef  PL_lex_state
#define PL_lex_state		(*Perl_Ilex_state_ptr(aTHXo))
#undef  PL_lex_stuff
#define PL_lex_stuff		(*Perl_Ilex_stuff_ptr(aTHXo))
#undef  PL_lineary
#define PL_lineary		(*Perl_Ilineary_ptr(aTHXo))
#undef  PL_linestart
#define PL_linestart		(*Perl_Ilinestart_ptr(aTHXo))
#undef  PL_linestr
#define PL_linestr		(*Perl_Ilinestr_ptr(aTHXo))
#undef  PL_localpatches
#define PL_localpatches		(*Perl_Ilocalpatches_ptr(aTHXo))
#undef  PL_main_cv
#define PL_main_cv		(*Perl_Imain_cv_ptr(aTHXo))
#undef  PL_main_root
#define PL_main_root		(*Perl_Imain_root_ptr(aTHXo))
#undef  PL_main_start
#define PL_main_start		(*Perl_Imain_start_ptr(aTHXo))
#undef  PL_max_intro_pending
#define PL_max_intro_pending	(*Perl_Imax_intro_pending_ptr(aTHXo))
#undef  PL_maxo
#define PL_maxo			(*Perl_Imaxo_ptr(aTHXo))
#undef  PL_maxsysfd
#define PL_maxsysfd		(*Perl_Imaxsysfd_ptr(aTHXo))
#undef  PL_mess_sv
#define PL_mess_sv		(*Perl_Imess_sv_ptr(aTHXo))
#undef  PL_min_intro_pending
#define PL_min_intro_pending	(*Perl_Imin_intro_pending_ptr(aTHXo))
#undef  PL_minus_F
#define PL_minus_F		(*Perl_Iminus_F_ptr(aTHXo))
#undef  PL_minus_a
#define PL_minus_a		(*Perl_Iminus_a_ptr(aTHXo))
#undef  PL_minus_c
#define PL_minus_c		(*Perl_Iminus_c_ptr(aTHXo))
#undef  PL_minus_l
#define PL_minus_l		(*Perl_Iminus_l_ptr(aTHXo))
#undef  PL_minus_n
#define PL_minus_n		(*Perl_Iminus_n_ptr(aTHXo))
#undef  PL_minus_p
#define PL_minus_p		(*Perl_Iminus_p_ptr(aTHXo))
#undef  PL_modglobal
#define PL_modglobal		(*Perl_Imodglobal_ptr(aTHXo))
#undef  PL_multi_close
#define PL_multi_close		(*Perl_Imulti_close_ptr(aTHXo))
#undef  PL_multi_end
#define PL_multi_end		(*Perl_Imulti_end_ptr(aTHXo))
#undef  PL_multi_open
#define PL_multi_open		(*Perl_Imulti_open_ptr(aTHXo))
#undef  PL_multi_start
#define PL_multi_start		(*Perl_Imulti_start_ptr(aTHXo))
#undef  PL_multiline
#define PL_multiline		(*Perl_Imultiline_ptr(aTHXo))
#undef  PL_nexttoke
#define PL_nexttoke		(*Perl_Inexttoke_ptr(aTHXo))
#undef  PL_nexttype
#define PL_nexttype		(*Perl_Inexttype_ptr(aTHXo))
#undef  PL_nextval
#define PL_nextval		(*Perl_Inextval_ptr(aTHXo))
#undef  PL_nice_chunk
#define PL_nice_chunk		(*Perl_Inice_chunk_ptr(aTHXo))
#undef  PL_nice_chunk_size
#define PL_nice_chunk_size	(*Perl_Inice_chunk_size_ptr(aTHXo))
#undef  PL_nomemok
#define PL_nomemok		(*Perl_Inomemok_ptr(aTHXo))
#undef  PL_nthreads
#define PL_nthreads		(*Perl_Inthreads_ptr(aTHXo))
#undef  PL_nthreads_cond
#define PL_nthreads_cond	(*Perl_Inthreads_cond_ptr(aTHXo))
#undef  PL_nullstash
#define PL_nullstash		(*Perl_Inullstash_ptr(aTHXo))
#undef  PL_numeric_local
#define PL_numeric_local	(*Perl_Inumeric_local_ptr(aTHXo))
#undef  PL_numeric_name
#define PL_numeric_name		(*Perl_Inumeric_name_ptr(aTHXo))
#undef  PL_numeric_radix_sv
#define PL_numeric_radix_sv	(*Perl_Inumeric_radix_sv_ptr(aTHXo))
#undef  PL_numeric_standard
#define PL_numeric_standard	(*Perl_Inumeric_standard_ptr(aTHXo))
#undef  PL_ofmt
#define PL_ofmt			(*Perl_Iofmt_ptr(aTHXo))
#undef  PL_oldbufptr
#define PL_oldbufptr		(*Perl_Ioldbufptr_ptr(aTHXo))
#undef  PL_oldname
#define PL_oldname		(*Perl_Ioldname_ptr(aTHXo))
#undef  PL_oldoldbufptr
#define PL_oldoldbufptr		(*Perl_Ioldoldbufptr_ptr(aTHXo))
#undef  PL_op_mask
#define PL_op_mask		(*Perl_Iop_mask_ptr(aTHXo))
#undef  PL_op_seqmax
#define PL_op_seqmax		(*Perl_Iop_seqmax_ptr(aTHXo))
#undef  PL_origalen
#define PL_origalen		(*Perl_Iorigalen_ptr(aTHXo))
#undef  PL_origargc
#define PL_origargc		(*Perl_Iorigargc_ptr(aTHXo))
#undef  PL_origargv
#define PL_origargv		(*Perl_Iorigargv_ptr(aTHXo))
#undef  PL_origenviron
#define PL_origenviron		(*Perl_Iorigenviron_ptr(aTHXo))
#undef  PL_origfilename
#define PL_origfilename		(*Perl_Iorigfilename_ptr(aTHXo))
#undef  PL_ors
#define PL_ors			(*Perl_Iors_ptr(aTHXo))
#undef  PL_orslen
#define PL_orslen		(*Perl_Iorslen_ptr(aTHXo))
#undef  PL_osname
#define PL_osname		(*Perl_Iosname_ptr(aTHXo))
#undef  PL_pad_reset_pending
#define PL_pad_reset_pending	(*Perl_Ipad_reset_pending_ptr(aTHXo))
#undef  PL_padix
#define PL_padix		(*Perl_Ipadix_ptr(aTHXo))
#undef  PL_padix_floor
#define PL_padix_floor		(*Perl_Ipadix_floor_ptr(aTHXo))
#undef  PL_patchlevel
#define PL_patchlevel		(*Perl_Ipatchlevel_ptr(aTHXo))
#undef  PL_pending_ident
#define PL_pending_ident	(*Perl_Ipending_ident_ptr(aTHXo))
#undef  PL_perl_destruct_level
#define PL_perl_destruct_level	(*Perl_Iperl_destruct_level_ptr(aTHXo))
#undef  PL_perldb
#define PL_perldb		(*Perl_Iperldb_ptr(aTHXo))
#undef  PL_pidstatus
#define PL_pidstatus		(*Perl_Ipidstatus_ptr(aTHXo))
#undef  PL_preambleav
#define PL_preambleav		(*Perl_Ipreambleav_ptr(aTHXo))
#undef  PL_preambled
#define PL_preambled		(*Perl_Ipreambled_ptr(aTHXo))
#undef  PL_preprocess
#define PL_preprocess		(*Perl_Ipreprocess_ptr(aTHXo))
#undef  PL_profiledata
#define PL_profiledata		(*Perl_Iprofiledata_ptr(aTHXo))
#undef  PL_psig_name
#define PL_psig_name		(*Perl_Ipsig_name_ptr(aTHXo))
#undef  PL_psig_ptr
#define PL_psig_ptr		(*Perl_Ipsig_ptr_ptr(aTHXo))
#undef  PL_ptr_table
#define PL_ptr_table		(*Perl_Iptr_table_ptr(aTHXo))
#undef  PL_replgv
#define PL_replgv		(*Perl_Ireplgv_ptr(aTHXo))
#undef  PL_rsfp
#define PL_rsfp			(*Perl_Irsfp_ptr(aTHXo))
#undef  PL_rsfp_filters
#define PL_rsfp_filters		(*Perl_Irsfp_filters_ptr(aTHXo))
#undef  PL_runops
#define PL_runops		(*Perl_Irunops_ptr(aTHXo))
#undef  PL_sawampersand
#define PL_sawampersand		(*Perl_Isawampersand_ptr(aTHXo))
#undef  PL_sh_path
#define PL_sh_path		(*Perl_Ish_path_ptr(aTHXo))
#undef  PL_sighandlerp
#define PL_sighandlerp		(*Perl_Isighandlerp_ptr(aTHXo))
#undef  PL_splitstr
#define PL_splitstr		(*Perl_Isplitstr_ptr(aTHXo))
#undef  PL_srand_called
#define PL_srand_called		(*Perl_Isrand_called_ptr(aTHXo))
#undef  PL_statusvalue
#define PL_statusvalue		(*Perl_Istatusvalue_ptr(aTHXo))
#undef  PL_statusvalue_vms
#define PL_statusvalue_vms	(*Perl_Istatusvalue_vms_ptr(aTHXo))
#undef  PL_stderrgv
#define PL_stderrgv		(*Perl_Istderrgv_ptr(aTHXo))
#undef  PL_stdingv
#define PL_stdingv		(*Perl_Istdingv_ptr(aTHXo))
#undef  PL_strtab
#define PL_strtab		(*Perl_Istrtab_ptr(aTHXo))
#undef  PL_strtab_mutex
#define PL_strtab_mutex		(*Perl_Istrtab_mutex_ptr(aTHXo))
#undef  PL_sub_generation
#define PL_sub_generation	(*Perl_Isub_generation_ptr(aTHXo))
#undef  PL_sublex_info
#define PL_sublex_info		(*Perl_Isublex_info_ptr(aTHXo))
#undef  PL_subline
#define PL_subline		(*Perl_Isubline_ptr(aTHXo))
#undef  PL_subname
#define PL_subname		(*Perl_Isubname_ptr(aTHXo))
#undef  PL_sv_arenaroot
#define PL_sv_arenaroot		(*Perl_Isv_arenaroot_ptr(aTHXo))
#undef  PL_sv_count
#define PL_sv_count		(*Perl_Isv_count_ptr(aTHXo))
#undef  PL_sv_lock_mutex
#define PL_sv_lock_mutex	(*Perl_Isv_lock_mutex_ptr(aTHXo))
#undef  PL_sv_mutex
#define PL_sv_mutex		(*Perl_Isv_mutex_ptr(aTHXo))
#undef  PL_sv_no
#define PL_sv_no		(*Perl_Isv_no_ptr(aTHXo))
#undef  PL_sv_objcount
#define PL_sv_objcount		(*Perl_Isv_objcount_ptr(aTHXo))
#undef  PL_sv_root
#define PL_sv_root		(*Perl_Isv_root_ptr(aTHXo))
#undef  PL_sv_undef
#define PL_sv_undef		(*Perl_Isv_undef_ptr(aTHXo))
#undef  PL_sv_yes
#define PL_sv_yes		(*Perl_Isv_yes_ptr(aTHXo))
#undef  PL_svref_mutex
#define PL_svref_mutex		(*Perl_Isvref_mutex_ptr(aTHXo))
#undef  PL_sys_intern
#define PL_sys_intern		(*Perl_Isys_intern_ptr(aTHXo))
#undef  PL_tainting
#define PL_tainting		(*Perl_Itainting_ptr(aTHXo))
#undef  PL_threadnum
#define PL_threadnum		(*Perl_Ithreadnum_ptr(aTHXo))
#undef  PL_threads_mutex
#define PL_threads_mutex	(*Perl_Ithreads_mutex_ptr(aTHXo))
#undef  PL_threadsv_names
#define PL_threadsv_names	(*Perl_Ithreadsv_names_ptr(aTHXo))
#undef  PL_thrsv
#define PL_thrsv		(*Perl_Ithrsv_ptr(aTHXo))
#undef  PL_tokenbuf
#define PL_tokenbuf		(*Perl_Itokenbuf_ptr(aTHXo))
#undef  PL_uid
#define PL_uid			(*Perl_Iuid_ptr(aTHXo))
#undef  PL_unsafe
#define PL_unsafe		(*Perl_Iunsafe_ptr(aTHXo))
#undef  PL_utf8_alnum
#define PL_utf8_alnum		(*Perl_Iutf8_alnum_ptr(aTHXo))
#undef  PL_utf8_alnumc
#define PL_utf8_alnumc		(*Perl_Iutf8_alnumc_ptr(aTHXo))
#undef  PL_utf8_alpha
#define PL_utf8_alpha		(*Perl_Iutf8_alpha_ptr(aTHXo))
#undef  PL_utf8_ascii
#define PL_utf8_ascii		(*Perl_Iutf8_ascii_ptr(aTHXo))
#undef  PL_utf8_cntrl
#define PL_utf8_cntrl		(*Perl_Iutf8_cntrl_ptr(aTHXo))
#undef  PL_utf8_digit
#define PL_utf8_digit		(*Perl_Iutf8_digit_ptr(aTHXo))
#undef  PL_utf8_graph
#define PL_utf8_graph		(*Perl_Iutf8_graph_ptr(aTHXo))
#undef  PL_utf8_lower
#define PL_utf8_lower		(*Perl_Iutf8_lower_ptr(aTHXo))
#undef  PL_utf8_mark
#define PL_utf8_mark		(*Perl_Iutf8_mark_ptr(aTHXo))
#undef  PL_utf8_print
#define PL_utf8_print		(*Perl_Iutf8_print_ptr(aTHXo))
#undef  PL_utf8_punct
#define PL_utf8_punct		(*Perl_Iutf8_punct_ptr(aTHXo))
#undef  PL_utf8_space
#define PL_utf8_space		(*Perl_Iutf8_space_ptr(aTHXo))
#undef  PL_utf8_tolower
#define PL_utf8_tolower		(*Perl_Iutf8_tolower_ptr(aTHXo))
#undef  PL_utf8_totitle
#define PL_utf8_totitle		(*Perl_Iutf8_totitle_ptr(aTHXo))
#undef  PL_utf8_toupper
#define PL_utf8_toupper		(*Perl_Iutf8_toupper_ptr(aTHXo))
#undef  PL_utf8_upper
#define PL_utf8_upper		(*Perl_Iutf8_upper_ptr(aTHXo))
#undef  PL_utf8_xdigit
#define PL_utf8_xdigit		(*Perl_Iutf8_xdigit_ptr(aTHXo))
#undef  PL_uudmap
#define PL_uudmap		(*Perl_Iuudmap_ptr(aTHXo))
#undef  PL_warnhook
#define PL_warnhook		(*Perl_Iwarnhook_ptr(aTHXo))
#undef  PL_widesyscalls
#define PL_widesyscalls		(*Perl_Iwidesyscalls_ptr(aTHXo))
#undef  PL_xiv_arenaroot
#define PL_xiv_arenaroot	(*Perl_Ixiv_arenaroot_ptr(aTHXo))
#undef  PL_xiv_root
#define PL_xiv_root		(*Perl_Ixiv_root_ptr(aTHXo))
#undef  PL_xnv_arenaroot
#define PL_xnv_arenaroot	(*Perl_Ixnv_arenaroot_ptr(aTHXo))
#undef  PL_xnv_root
#define PL_xnv_root		(*Perl_Ixnv_root_ptr(aTHXo))
#undef  PL_xpv_arenaroot
#define PL_xpv_arenaroot	(*Perl_Ixpv_arenaroot_ptr(aTHXo))
#undef  PL_xpv_root
#define PL_xpv_root		(*Perl_Ixpv_root_ptr(aTHXo))
#undef  PL_xpvav_arenaroot
#define PL_xpvav_arenaroot	(*Perl_Ixpvav_arenaroot_ptr(aTHXo))
#undef  PL_xpvav_root
#define PL_xpvav_root		(*Perl_Ixpvav_root_ptr(aTHXo))
#undef  PL_xpvbm_arenaroot
#define PL_xpvbm_arenaroot	(*Perl_Ixpvbm_arenaroot_ptr(aTHXo))
#undef  PL_xpvbm_root
#define PL_xpvbm_root		(*Perl_Ixpvbm_root_ptr(aTHXo))
#undef  PL_xpvcv_arenaroot
#define PL_xpvcv_arenaroot	(*Perl_Ixpvcv_arenaroot_ptr(aTHXo))
#undef  PL_xpvcv_root
#define PL_xpvcv_root		(*Perl_Ixpvcv_root_ptr(aTHXo))
#undef  PL_xpvhv_arenaroot
#define PL_xpvhv_arenaroot	(*Perl_Ixpvhv_arenaroot_ptr(aTHXo))
#undef  PL_xpvhv_root
#define PL_xpvhv_root		(*Perl_Ixpvhv_root_ptr(aTHXo))
#undef  PL_xpviv_arenaroot
#define PL_xpviv_arenaroot	(*Perl_Ixpviv_arenaroot_ptr(aTHXo))
#undef  PL_xpviv_root
#define PL_xpviv_root		(*Perl_Ixpviv_root_ptr(aTHXo))
#undef  PL_xpvlv_arenaroot
#define PL_xpvlv_arenaroot	(*Perl_Ixpvlv_arenaroot_ptr(aTHXo))
#undef  PL_xpvlv_root
#define PL_xpvlv_root		(*Perl_Ixpvlv_root_ptr(aTHXo))
#undef  PL_xpvmg_arenaroot
#define PL_xpvmg_arenaroot	(*Perl_Ixpvmg_arenaroot_ptr(aTHXo))
#undef  PL_xpvmg_root
#define PL_xpvmg_root		(*Perl_Ixpvmg_root_ptr(aTHXo))
#undef  PL_xpvnv_arenaroot
#define PL_xpvnv_arenaroot	(*Perl_Ixpvnv_arenaroot_ptr(aTHXo))
#undef  PL_xpvnv_root
#define PL_xpvnv_root		(*Perl_Ixpvnv_root_ptr(aTHXo))
#undef  PL_xrv_arenaroot
#define PL_xrv_arenaroot	(*Perl_Ixrv_arenaroot_ptr(aTHXo))
#undef  PL_xrv_root
#define PL_xrv_root		(*Perl_Ixrv_root_ptr(aTHXo))
#undef  PL_yychar
#define PL_yychar		(*Perl_Iyychar_ptr(aTHXo))
#undef  PL_yydebug
#define PL_yydebug		(*Perl_Iyydebug_ptr(aTHXo))
#undef  PL_yyerrflag
#define PL_yyerrflag		(*Perl_Iyyerrflag_ptr(aTHXo))
#undef  PL_yylval
#define PL_yylval		(*Perl_Iyylval_ptr(aTHXo))
#undef  PL_yynerrs
#define PL_yynerrs		(*Perl_Iyynerrs_ptr(aTHXo))
#undef  PL_yyval
#define PL_yyval		(*Perl_Iyyval_ptr(aTHXo))
#undef  PL_Sv
#define PL_Sv			(*Perl_TSv_ptr(aTHXo))
#undef  PL_Xpv
#define PL_Xpv			(*Perl_TXpv_ptr(aTHXo))
#undef  PL_av_fetch_sv
#define PL_av_fetch_sv		(*Perl_Tav_fetch_sv_ptr(aTHXo))
#undef  PL_bodytarget
#define PL_bodytarget		(*Perl_Tbodytarget_ptr(aTHXo))
#undef  PL_bostr
#define PL_bostr		(*Perl_Tbostr_ptr(aTHXo))
#undef  PL_chopset
#define PL_chopset		(*Perl_Tchopset_ptr(aTHXo))
#undef  PL_colors
#define PL_colors		(*Perl_Tcolors_ptr(aTHXo))
#undef  PL_colorset
#define PL_colorset		(*Perl_Tcolorset_ptr(aTHXo))
#undef  PL_curcop
#define PL_curcop		(*Perl_Tcurcop_ptr(aTHXo))
#undef  PL_curpad
#define PL_curpad		(*Perl_Tcurpad_ptr(aTHXo))
#undef  PL_curpm
#define PL_curpm		(*Perl_Tcurpm_ptr(aTHXo))
#undef  PL_curstack
#define PL_curstack		(*Perl_Tcurstack_ptr(aTHXo))
#undef  PL_curstackinfo
#define PL_curstackinfo		(*Perl_Tcurstackinfo_ptr(aTHXo))
#undef  PL_curstash
#define PL_curstash		(*Perl_Tcurstash_ptr(aTHXo))
#undef  PL_defoutgv
#define PL_defoutgv		(*Perl_Tdefoutgv_ptr(aTHXo))
#undef  PL_defstash
#define PL_defstash		(*Perl_Tdefstash_ptr(aTHXo))
#undef  PL_delaymagic
#define PL_delaymagic		(*Perl_Tdelaymagic_ptr(aTHXo))
#undef  PL_dirty
#define PL_dirty		(*Perl_Tdirty_ptr(aTHXo))
#undef  PL_dumpindent
#define PL_dumpindent		(*Perl_Tdumpindent_ptr(aTHXo))
#undef  PL_efloatbuf
#define PL_efloatbuf		(*Perl_Tefloatbuf_ptr(aTHXo))
#undef  PL_efloatsize
#define PL_efloatsize		(*Perl_Tefloatsize_ptr(aTHXo))
#undef  PL_errors
#define PL_errors		(*Perl_Terrors_ptr(aTHXo))
#undef  PL_extralen
#define PL_extralen		(*Perl_Textralen_ptr(aTHXo))
#undef  PL_firstgv
#define PL_firstgv		(*Perl_Tfirstgv_ptr(aTHXo))
#undef  PL_formtarget
#define PL_formtarget		(*Perl_Tformtarget_ptr(aTHXo))
#undef  PL_hv_fetch_ent_mh
#define PL_hv_fetch_ent_mh	(*Perl_Thv_fetch_ent_mh_ptr(aTHXo))
#undef  PL_hv_fetch_sv
#define PL_hv_fetch_sv		(*Perl_Thv_fetch_sv_ptr(aTHXo))
#undef  PL_in_eval
#define PL_in_eval		(*Perl_Tin_eval_ptr(aTHXo))
#undef  PL_last_in_gv
#define PL_last_in_gv		(*Perl_Tlast_in_gv_ptr(aTHXo))
#undef  PL_lastgotoprobe
#define PL_lastgotoprobe	(*Perl_Tlastgotoprobe_ptr(aTHXo))
#undef  PL_lastscream
#define PL_lastscream		(*Perl_Tlastscream_ptr(aTHXo))
#undef  PL_localizing
#define PL_localizing		(*Perl_Tlocalizing_ptr(aTHXo))
#undef  PL_mainstack
#define PL_mainstack		(*Perl_Tmainstack_ptr(aTHXo))
#undef  PL_markstack
#define PL_markstack		(*Perl_Tmarkstack_ptr(aTHXo))
#undef  PL_markstack_max
#define PL_markstack_max	(*Perl_Tmarkstack_max_ptr(aTHXo))
#undef  PL_markstack_ptr
#define PL_markstack_ptr	(*Perl_Tmarkstack_ptr_ptr(aTHXo))
#undef  PL_maxscream
#define PL_maxscream		(*Perl_Tmaxscream_ptr(aTHXo))
#undef  PL_modcount
#define PL_modcount		(*Perl_Tmodcount_ptr(aTHXo))
#undef  PL_na
#define PL_na			(*Perl_Tna_ptr(aTHXo))
#undef  PL_nrs
#define PL_nrs			(*Perl_Tnrs_ptr(aTHXo))
#undef  PL_ofs
#define PL_ofs			(*Perl_Tofs_ptr(aTHXo))
#undef  PL_ofslen
#define PL_ofslen		(*Perl_Tofslen_ptr(aTHXo))
#undef  PL_op
#define PL_op			(*Perl_Top_ptr(aTHXo))
#undef  PL_opsave
#define PL_opsave		(*Perl_Topsave_ptr(aTHXo))
#undef  PL_protect
#define PL_protect		(*Perl_Tprotect_ptr(aTHXo))
#undef  PL_reg_call_cc
#define PL_reg_call_cc		(*Perl_Treg_call_cc_ptr(aTHXo))
#undef  PL_reg_curpm
#define PL_reg_curpm		(*Perl_Treg_curpm_ptr(aTHXo))
#undef  PL_reg_eval_set
#define PL_reg_eval_set		(*Perl_Treg_eval_set_ptr(aTHXo))
#undef  PL_reg_flags
#define PL_reg_flags		(*Perl_Treg_flags_ptr(aTHXo))
#undef  PL_reg_ganch
#define PL_reg_ganch		(*Perl_Treg_ganch_ptr(aTHXo))
#undef  PL_reg_leftiter
#define PL_reg_leftiter		(*Perl_Treg_leftiter_ptr(aTHXo))
#undef  PL_reg_magic
#define PL_reg_magic		(*Perl_Treg_magic_ptr(aTHXo))
#undef  PL_reg_maxiter
#define PL_reg_maxiter		(*Perl_Treg_maxiter_ptr(aTHXo))
#undef  PL_reg_oldcurpm
#define PL_reg_oldcurpm		(*Perl_Treg_oldcurpm_ptr(aTHXo))
#undef  PL_reg_oldpos
#define PL_reg_oldpos		(*Perl_Treg_oldpos_ptr(aTHXo))
#undef  PL_reg_oldsaved
#define PL_reg_oldsaved		(*Perl_Treg_oldsaved_ptr(aTHXo))
#undef  PL_reg_oldsavedlen
#define PL_reg_oldsavedlen	(*Perl_Treg_oldsavedlen_ptr(aTHXo))
#undef  PL_reg_poscache
#define PL_reg_poscache		(*Perl_Treg_poscache_ptr(aTHXo))
#undef  PL_reg_poscache_size
#define PL_reg_poscache_size	(*Perl_Treg_poscache_size_ptr(aTHXo))
#undef  PL_reg_re
#define PL_reg_re		(*Perl_Treg_re_ptr(aTHXo))
#undef  PL_reg_start_tmp
#define PL_reg_start_tmp	(*Perl_Treg_start_tmp_ptr(aTHXo))
#undef  PL_reg_start_tmpl
#define PL_reg_start_tmpl	(*Perl_Treg_start_tmpl_ptr(aTHXo))
#undef  PL_reg_starttry
#define PL_reg_starttry		(*Perl_Treg_starttry_ptr(aTHXo))
#undef  PL_reg_sv
#define PL_reg_sv		(*Perl_Treg_sv_ptr(aTHXo))
#undef  PL_reg_whilem_seen
#define PL_reg_whilem_seen	(*Perl_Treg_whilem_seen_ptr(aTHXo))
#undef  PL_regbol
#define PL_regbol		(*Perl_Tregbol_ptr(aTHXo))
#undef  PL_regcc
#define PL_regcc		(*Perl_Tregcc_ptr(aTHXo))
#undef  PL_regcode
#define PL_regcode		(*Perl_Tregcode_ptr(aTHXo))
#undef  PL_regcomp_parse
#define PL_regcomp_parse	(*Perl_Tregcomp_parse_ptr(aTHXo))
#undef  PL_regcomp_rx
#define PL_regcomp_rx		(*Perl_Tregcomp_rx_ptr(aTHXo))
#undef  PL_regcompp
#define PL_regcompp		(*Perl_Tregcompp_ptr(aTHXo))
#undef  PL_regdata
#define PL_regdata		(*Perl_Tregdata_ptr(aTHXo))
#undef  PL_regdummy
#define PL_regdummy		(*Perl_Tregdummy_ptr(aTHXo))
#undef  PL_regendp
#define PL_regendp		(*Perl_Tregendp_ptr(aTHXo))
#undef  PL_regeol
#define PL_regeol		(*Perl_Tregeol_ptr(aTHXo))
#undef  PL_regexecp
#define PL_regexecp		(*Perl_Tregexecp_ptr(aTHXo))
#undef  PL_regflags
#define PL_regflags		(*Perl_Tregflags_ptr(aTHXo))
#undef  PL_regfree
#define PL_regfree		(*Perl_Tregfree_ptr(aTHXo))
#undef  PL_regindent
#define PL_regindent		(*Perl_Tregindent_ptr(aTHXo))
#undef  PL_reginput
#define PL_reginput		(*Perl_Treginput_ptr(aTHXo))
#undef  PL_regint_start
#define PL_regint_start		(*Perl_Tregint_start_ptr(aTHXo))
#undef  PL_regint_string
#define PL_regint_string	(*Perl_Tregint_string_ptr(aTHXo))
#undef  PL_reginterp_cnt
#define PL_reginterp_cnt	(*Perl_Treginterp_cnt_ptr(aTHXo))
#undef  PL_reglastparen
#define PL_reglastparen		(*Perl_Treglastparen_ptr(aTHXo))
#undef  PL_regnarrate
#define PL_regnarrate		(*Perl_Tregnarrate_ptr(aTHXo))
#undef  PL_regnaughty
#define PL_regnaughty		(*Perl_Tregnaughty_ptr(aTHXo))
#undef  PL_regnpar
#define PL_regnpar		(*Perl_Tregnpar_ptr(aTHXo))
#undef  PL_regprecomp
#define PL_regprecomp		(*Perl_Tregprecomp_ptr(aTHXo))
#undef  PL_regprev
#define PL_regprev		(*Perl_Tregprev_ptr(aTHXo))
#undef  PL_regprogram
#define PL_regprogram		(*Perl_Tregprogram_ptr(aTHXo))
#undef  PL_regsawback
#define PL_regsawback		(*Perl_Tregsawback_ptr(aTHXo))
#undef  PL_regseen
#define PL_regseen		(*Perl_Tregseen_ptr(aTHXo))
#undef  PL_regsize
#define PL_regsize		(*Perl_Tregsize_ptr(aTHXo))
#undef  PL_regstartp
#define PL_regstartp		(*Perl_Tregstartp_ptr(aTHXo))
#undef  PL_regtill
#define PL_regtill		(*Perl_Tregtill_ptr(aTHXo))
#undef  PL_regxend
#define PL_regxend		(*Perl_Tregxend_ptr(aTHXo))
#undef  PL_restartop
#define PL_restartop		(*Perl_Trestartop_ptr(aTHXo))
#undef  PL_retstack
#define PL_retstack		(*Perl_Tretstack_ptr(aTHXo))
#undef  PL_retstack_ix
#define PL_retstack_ix		(*Perl_Tretstack_ix_ptr(aTHXo))
#undef  PL_retstack_max
#define PL_retstack_max		(*Perl_Tretstack_max_ptr(aTHXo))
#undef  PL_rs
#define PL_rs			(*Perl_Trs_ptr(aTHXo))
#undef  PL_savestack
#define PL_savestack		(*Perl_Tsavestack_ptr(aTHXo))
#undef  PL_savestack_ix
#define PL_savestack_ix		(*Perl_Tsavestack_ix_ptr(aTHXo))
#undef  PL_savestack_max
#define PL_savestack_max	(*Perl_Tsavestack_max_ptr(aTHXo))
#undef  PL_scopestack
#define PL_scopestack		(*Perl_Tscopestack_ptr(aTHXo))
#undef  PL_scopestack_ix
#define PL_scopestack_ix	(*Perl_Tscopestack_ix_ptr(aTHXo))
#undef  PL_scopestack_max
#define PL_scopestack_max	(*Perl_Tscopestack_max_ptr(aTHXo))
#undef  PL_screamfirst
#define PL_screamfirst		(*Perl_Tscreamfirst_ptr(aTHXo))
#undef  PL_screamnext
#define PL_screamnext		(*Perl_Tscreamnext_ptr(aTHXo))
#undef  PL_secondgv
#define PL_secondgv		(*Perl_Tsecondgv_ptr(aTHXo))
#undef  PL_seen_evals
#define PL_seen_evals		(*Perl_Tseen_evals_ptr(aTHXo))
#undef  PL_seen_zerolen
#define PL_seen_zerolen		(*Perl_Tseen_zerolen_ptr(aTHXo))
#undef  PL_sortcop
#define PL_sortcop		(*Perl_Tsortcop_ptr(aTHXo))
#undef  PL_sortcxix
#define PL_sortcxix		(*Perl_Tsortcxix_ptr(aTHXo))
#undef  PL_sortstash
#define PL_sortstash		(*Perl_Tsortstash_ptr(aTHXo))
#undef  PL_stack_base
#define PL_stack_base		(*Perl_Tstack_base_ptr(aTHXo))
#undef  PL_stack_max
#define PL_stack_max		(*Perl_Tstack_max_ptr(aTHXo))
#undef  PL_stack_sp
#define PL_stack_sp		(*Perl_Tstack_sp_ptr(aTHXo))
#undef  PL_start_env
#define PL_start_env		(*Perl_Tstart_env_ptr(aTHXo))
#undef  PL_statbuf
#define PL_statbuf		(*Perl_Tstatbuf_ptr(aTHXo))
#undef  PL_statcache
#define PL_statcache		(*Perl_Tstatcache_ptr(aTHXo))
#undef  PL_statgv
#define PL_statgv		(*Perl_Tstatgv_ptr(aTHXo))
#undef  PL_statname
#define PL_statname		(*Perl_Tstatname_ptr(aTHXo))
#undef  PL_tainted
#define PL_tainted		(*Perl_Ttainted_ptr(aTHXo))
#undef  PL_timesbuf
#define PL_timesbuf		(*Perl_Ttimesbuf_ptr(aTHXo))
#undef  PL_tmps_floor
#define PL_tmps_floor		(*Perl_Ttmps_floor_ptr(aTHXo))
#undef  PL_tmps_ix
#define PL_tmps_ix		(*Perl_Ttmps_ix_ptr(aTHXo))
#undef  PL_tmps_max
#define PL_tmps_max		(*Perl_Ttmps_max_ptr(aTHXo))
#undef  PL_tmps_stack
#define PL_tmps_stack		(*Perl_Ttmps_stack_ptr(aTHXo))
#undef  PL_top_env
#define PL_top_env		(*Perl_Ttop_env_ptr(aTHXo))
#undef  PL_toptarget
#define PL_toptarget		(*Perl_Ttoptarget_ptr(aTHXo))
#undef  PL_watchaddr
#define PL_watchaddr		(*Perl_Twatchaddr_ptr(aTHXo))
#undef  PL_watchok
#define PL_watchok		(*Perl_Twatchok_ptr(aTHXo))
#undef  PL_No
#define PL_No			(*Perl_GNo_ptr(NULL))
#undef  PL_Yes
#define PL_Yes			(*Perl_GYes_ptr(NULL))
#undef  PL_curinterp
#define PL_curinterp		(*Perl_Gcurinterp_ptr(NULL))
#undef  PL_do_undump
#define PL_do_undump		(*Perl_Gdo_undump_ptr(NULL))
#undef  PL_hexdigit
#define PL_hexdigit		(*Perl_Ghexdigit_ptr(NULL))
#undef  PL_malloc_mutex
#define PL_malloc_mutex		(*Perl_Gmalloc_mutex_ptr(NULL))
#undef  PL_op_mutex
#define PL_op_mutex		(*Perl_Gop_mutex_ptr(NULL))
#undef  PL_patleave
#define PL_patleave		(*Perl_Gpatleave_ptr(NULL))
#undef  PL_thr_key
#define PL_thr_key		(*Perl_Gthr_key_ptr(NULL))

#endif /* !PERL_CORE */
#endif /* PERL_OBJECT || MULTIPLICITY */

#endif /* __perlapi_h__ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlio.h ===
#include "iperlsys.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlvars.h ===
/****************/
/* Truly global */
/****************/

/* Don't forget to re-run embed.pl to propagate changes! */

/* This file describes the "global" variables used by perl
 * This used to be in perl.h directly but we want to abstract out into
 * distinct files which are per-thread, per-interpreter or really global,
 * and how they're initialized.
 *
 * The 'G' prefix is only needed for vars that need appropriate #defines
 * generated in embed*.h.  Such symbols are also used to generate
 * the appropriate export list for win32. */

/* global state */
PERLVAR(Gcurinterp,	PerlInterpreter *)
					/* currently running interpreter
					 * (initial parent interpreter under
					 * useithreads) */
#if defined(USE_THREADS) || defined(USE_ITHREADS)
PERLVAR(Gthr_key,	perl_key)	/* key to retrieve per-thread struct */
#endif

/* constants (these are not literals to facilitate pointer comparisons) */
PERLVARIC(GYes,		char *, "1")
PERLVARIC(GNo,		char *, "")
PERLVARIC(Ghexdigit,	char *, "0123456789abcdef0123456789ABCDEF")
PERLVARIC(Gpatleave,	char *, "\\.^$@dDwWsSbB+*?|()-nrtfeaxc0123456789[{]}")

/* XXX does anyone even use this? */
PERLVARI(Gdo_undump,	bool,	FALSE)	/* -u or dump seen? */

#if defined(MYMALLOC) && (defined(USE_THREADS) || defined(USE_ITHREADS))
PERLVAR(Gmalloc_mutex,	perl_mutex)	/* Mutex for malloc */
#endif

#if defined(USE_ITHREADS)
PERLVAR(Gop_mutex,	perl_mutex)	/* Mutex for op refcounting */
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perly.h ===
#ifdef PERL_CORE
#define WORD 257
#define METHOD 258
#define FUNCMETH 259
#define THING 260
#define PMFUNC 261
#define PRIVATEREF 262
#define FUNC0SUB 263
#define UNIOPSUB 264
#define LSTOPSUB 265
#define LABEL 266
#define FORMAT 267
#define SUB 268
#define ANONSUB 269
#define PACKAGE 270
#define USE 271
#define WHILE 272
#define UNTIL 273
#define IF 274
#define UNLESS 275
#define ELSE 276
#define ELSIF 277
#define CONTINUE 278
#define FOR 279
#define LOOPEX 280
#define DOTDOT 281
#define FUNC0 282
#define FUNC1 283
#define FUNC 284
#define UNIOP 285
#define LSTOP 286
#define RELOP 287
#define EQOP 288
#define MULOP 289
#define ADDOP 290
#define DOLSHARP 291
#define DO 292
#define HASHBRACK 293
#define NOAMP 294
#define LOCAL 295
#define MY 296
#define MYSUB 297
#define COLONATTR 298
#define PREC_LOW 299
#define OROP 300
#define ANDOP 301
#define NOTOP 302
#define ASSIGNOP 303
#define OROR 304
#define ANDAND 305
#define BITOROP 306
#define BITANDOP 307
#define SHIFTOP 308
#define MATCHOP 309
#define UMINUS 310
#define REFGEN 311
#define POWOP 312
#define PREINC 313
#define PREDEC 314
#define POSTINC 315
#define POSTDEC 316
#define ARROW 317
#endif /* PERL_CORE */

typedef union {
    I32	ival;
    char *pval;
    OP *opval;
    GV *gvval;
} YYSTYPE;
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlsdio.h ===
/*
 * Although we may not want stdio to be used including <stdio.h> here 
 * avoids issues where stdio.h has strange side effects
 */
#include <stdio.h>

#ifdef PERLIO_IS_STDIO
/*
 * Make this as close to original stdio as possible.
 */
#define PerlIO				FILE 
#define PerlIO_stderr()			stderr
#define PerlIO_stdout()			stdout
#define PerlIO_stdin()			stdin

#define PerlIO_printf			fprintf
#define PerlIO_stdoutf			printf
#define PerlIO_vprintf(f,fmt,a)		vfprintf(f,fmt,a)          
#define PerlIO_write(f,buf,count)	fwrite1(buf,1,count,f)
#define PerlIO_open			fopen
#define PerlIO_fdopen			fdopen
#define PerlIO_reopen		freopen
#define PerlIO_close(f)			fclose(f)
#define PerlIO_puts(f,s)		fputs(s,f)
#define PerlIO_putc(f,c)		fputc(c,f)
#if defined(VMS)
#  if defined(__DECC)
     /* Unusual definition of ungetc() here to accomodate fast_sv_gets()'
      * belief that it can mix getc/ungetc with reads from stdio buffer */
     int decc$ungetc(int __c, FILE *__stream);
#    define PerlIO_ungetc(f,c) ((c) == EOF ? EOF : \
            ((*(f) && !((*(f))->_flag & _IONBF) && \
            ((*(f))->_ptr > (*(f))->_base)) ? \
            ((*(f))->_cnt++, *(--(*(f))->_ptr) = (c)) : decc$ungetc(c,f)))
#  else
#    define PerlIO_ungetc(f,c)		ungetc(c,f)
#  endif
   /* Work around bug in DECCRTL/AXP (DECC v5.x) and some versions of old
    * VAXCRTL which causes read from a pipe after EOF has been returned
    * once to hang.
    */
#  define PerlIO_getc(f) \
		(feof(f) ? EOF : getc(f))
#  define PerlIO_read(f,buf,count) \
		(feof(f) ? 0 : (SSize_t)fread(buf,1,count,f))
#else
#  define PerlIO_ungetc(f,c)		ungetc(c,f)
#  define PerlIO_getc(f)		getc(f)
#  define PerlIO_read(f,buf,count)	(SSize_t)fread(buf,1,count,f)
#endif
#define PerlIO_eof(f)			feof(f)
#define PerlIO_getname(f,b)		fgetname(f,b)
#define PerlIO_error(f)			ferror(f)
#define PerlIO_fileno(f)		fileno(f)
#define PerlIO_clearerr(f)		clearerr(f)
#define PerlIO_flush(f)			Fflush(f)
#define PerlIO_tell(f)			ftell(f)
#if defined(USE_64_BIT_STDIO) && defined(HAS_FTELLO) && !defined(USE_FTELL64)
#define ftell ftello
#endif
#if defined(VMS) && !defined(__DECC)
   /* Old VAXC RTL doesn't reset EOF on seek; Perl folk seem to expect this */
#  define PerlIO_seek(f,o,w)	(((f) && (*f) && ((*f)->_flag &= ~_IOEOF)),fseek(f,o,w))
#else
#  define PerlIO_seek(f,o,w)		fseek(f,o,w)
#endif
#if defined(USE_64_BIT_STDIO) && defined(HAS_FSEEKO) && !defined(USE_FSEEK64)
#define fseek fseeko
#endif
#ifdef HAS_FGETPOS
#define PerlIO_getpos(f,p)		fgetpos(f,p)
#endif
#ifdef HAS_FSETPOS
#define PerlIO_setpos(f,p)		fsetpos(f,p)
#endif

#define PerlIO_rewind(f)		rewind(f)
#define PerlIO_tmpfile()		tmpfile()

#define PerlIO_importFILE(f,fl)		(f)            
#define PerlIO_exportFILE(f,fl)		(f)            
#define PerlIO_findFILE(f)		(f)            
#define PerlIO_releaseFILE(p,f)		((void) 0)            

#ifdef HAS_SETLINEBUF
#define PerlIO_setlinebuf(f)		setlinebuf(f);
#else
#define PerlIO_setlinebuf(f)		setvbuf(f, Nullch, _IOLBF, 0);
#endif

/* Now our interface to Configure's FILE_xxx macros */

#ifdef USE_STDIO_PTR
#define PerlIO_has_cntptr(f)		1       
#define PerlIO_get_ptr(f)		FILE_ptr(f)          
#define PerlIO_get_cnt(f)		FILE_cnt(f)          

#ifdef STDIO_CNT_LVALUE
#define PerlIO_canset_cnt(f)		1      
#define PerlIO_set_cnt(f,c)		(FILE_cnt(f) = (c))          
#ifdef STDIO_PTR_LVALUE
#ifdef STDIO_PTR_LVAL_NOCHANGE_CNT
#define PerlIO_fast_gets(f)		1        
#endif
#endif /* STDIO_PTR_LVALUE */
#else /* STDIO_CNT_LVALUE */
#define PerlIO_canset_cnt(f)		0      
#define PerlIO_set_cnt(f,c)		abort()
#endif

#ifdef STDIO_PTR_LVALUE
#ifdef STDIO_PTR_LVAL_NOCHANGE_CNT
#define PerlIO_set_ptrcnt(f,p,c)      STMT_START {FILE_ptr(f) = (p), PerlIO_set_cnt(f,c);} STMT_END
#else
#ifdef STDIO_PTR_LVAL_SETS_CNT
/* assert() may pre-process to ""; potential syntax error (FILE_ptr(), ) */
#define PerlIO_set_ptrcnt(f,p,c)      STMT_START {FILE_ptr(f) = (p); assert(FILE_cnt(f) == (c));} STMT_END
#define PerlIO_fast_gets(f)		1        
#else
#define PerlIO_set_ptrcnt(f,p,c)	abort()
#endif
#endif
#endif

#else  /* USE_STDIO_PTR */

#define PerlIO_has_cntptr(f)		0
#define PerlIO_canset_cnt(f)		0
#define PerlIO_get_cnt(f)		(abort(),0)
#define PerlIO_get_ptr(f)		(abort(),(void *)0)
#define PerlIO_set_cnt(f,c)		abort()
#define PerlIO_set_ptrcnt(f,p,c)	abort()

#endif /* USE_STDIO_PTR */

#ifndef PerlIO_fast_gets
#define PerlIO_fast_gets(f)		0        
#endif


#ifdef FILE_base
#define PerlIO_has_base(f)		1         
#define PerlIO_get_base(f)		FILE_base(f)         
#define PerlIO_get_bufsiz(f)		FILE_bufsiz(f)       
#else
#define PerlIO_has_base(f)		0
#define PerlIO_get_base(f)		(abort(),(void *)0)
#define PerlIO_get_bufsiz(f)		(abort(),0)
#endif
#else /* PERLIO_IS_STDIO */
#ifdef PERL_CORE
#ifndef PERLIO_NOT_STDIO
#define PERLIO_NOT_STDIO 1
#endif
#endif
#ifdef PERLIO_NOT_STDIO
#if PERLIO_NOT_STDIO
/*
 * Strong denial of stdio - make all stdio calls (we can think of) errors
 */
#include "nostdio.h"
#undef fprintf
#undef tmpfile
#undef fclose
#undef fopen
#undef vfprintf
#undef fgetc
#undef fputc
#undef fputs
#undef ungetc
#undef fread
#undef fwrite
#undef fgetpos
#undef fseek
#undef fsetpos
#undef ftell
#undef rewind
#undef fdopen
#undef popen
#undef pclose
#undef getw
#undef putw
#undef freopen
#undef setbuf
#undef setvbuf
#undef fscanf
#undef fgets
#undef getc_unlocked
#undef putc_unlocked
#define fprintf    _CANNOT _fprintf_
#define stdin      _CANNOT _stdin_
#define stdout     _CANNOT _stdout_
#define stderr     _CANNOT _stderr_
#define tmpfile()  _CANNOT _tmpfile_
#define fclose(f)  _CANNOT _fclose_
#define fflush(f)  _CANNOT _fflush_
#define fopen(p,m)  _CANNOT _fopen_
#define freopen(p,m,f)  _CANNOT _freopen_
#define setbuf(f,b)  _CANNOT _setbuf_
#define setvbuf(f,b,x,s)  _CANNOT _setvbuf_
#define fscanf  _CANNOT _fscanf_
#define vfprintf(f,fmt,a)  _CANNOT _vfprintf_
#define fgetc(f)  _CANNOT _fgetc_
#define fgets(s,n,f)  _CANNOT _fgets_
#define fputc(c,f)  _CANNOT _fputc_
#define fputs(s,f)  _CANNOT _fputs_
#define getc(f)  _CANNOT _getc_
#define putc(c,f)  _CANNOT _putc_
#define ungetc(c,f)  _CANNOT _ungetc_
#define fread(b,s,c,f)  _CANNOT _fread_
#define fwrite(b,s,c,f)  _CANNOT _fwrite_
#define fgetpos(f,p)  _CANNOT _fgetpos_
#define fseek(f,o,w)  _CANNOT _fseek_
#define fsetpos(f,p)  _CANNOT _fsetpos_
#define ftell(f)  _CANNOT _ftell_
#define rewind(f)  _CANNOT _rewind_
#define clearerr(f)  _CANNOT _clearerr_
#define feof(f)  _CANNOT _feof_
#define ferror(f)  _CANNOT _ferror_
#define __filbuf(f)  _CANNOT __filbuf_
#define __flsbuf(c,f)  _CANNOT __flsbuf_
#define _filbuf(f)  _CANNOT _filbuf_
#define _flsbuf(c,f)  _CANNOT _flsbuf_
#define fdopen(fd,p)  _CANNOT _fdopen_
#define fileno(f)  _CANNOT _fileno_
#if SFIO_VERSION < 20000101L
#define flockfile(f)  _CANNOT _flockfile_
#define ftrylockfile(f)  _CANNOT _ftrylockfile_
#define funlockfile(f)  _CANNOT _funlockfile_
#endif
#define getc_unlocked(f)  _CANNOT _getc_unlocked_
#define putc_unlocked(c,f)  _CANNOT _putc_unlocked_
#define popen(c,m)  _CANNOT _popen_
#define getw(f)  _CANNOT _getw_
#define putw(v,f)  _CANNOT _putw_
#define pclose(f)  _CANNOT _pclose_

#else /* if PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO defined as 0 
 * Declares that both PerlIO and stdio can be used
 */
#endif /* if PERLIO_NOT_STDIO */
#else  /* ifdef PERLIO_NOT_STDIO */
/*
 * PERLIO_NOT_STDIO not defined 
 * This is "source level" stdio compatibility mode.
 */
#include "nostdio.h"
#undef FILE
#define FILE			PerlIO 
#undef fprintf
#undef tmpfile
#undef fclose
#undef fopen
#undef vfprintf
#undef fgetc
#undef getc_unlocked
#undef fputc
#undef putc_unlocked
#undef fputs
#undef ungetc
#undef fread
#undef fwrite
#undef fgetpos
#undef fseek
#undef fsetpos
#undef ftell
#undef rewind
#undef fdopen
#undef popen
#undef pclose
#undef getw
#undef putw
#undef freopen
#undef setbuf
#undef setvbuf
#undef fscanf
#undef fgets
#define fprintf			PerlIO_printf
#define stdin			PerlIO_stdin()
#define stdout			PerlIO_stdout()
#define stderr			PerlIO_stderr()
#define tmpfile()		PerlIO_tmpfile()
#define fclose(f)		PerlIO_close(f)
#define fflush(f)		PerlIO_flush(f)
#define fopen(p,m)		PerlIO_open(p,m)
#define vfprintf(f,fmt,a)	PerlIO_vprintf(f,fmt,a)
#define fgetc(f)		PerlIO_getc(f)
#define fputc(c,f)		PerlIO_putc(f,c)
#define fputs(s,f)		PerlIO_puts(f,s)
#define getc(f)			PerlIO_getc(f)
#ifdef getc_unlocked
#undef getc_unlocked
#endif
#define getc_unlocked(f)	PerlIO_getc(f)
#define putc(c,f)		PerlIO_putc(f,c)
#ifdef putc_unlocked
#undef putc_unlocked
#endif
#define putc_unlocked(c,f)	PerlIO_putc(c,f)
#define ungetc(c,f)		PerlIO_ungetc(f,c)
#if 0
/* return values of read/write need work */
#define fread(b,s,c,f)		PerlIO_read(f,b,(s*c))
#define fwrite(b,s,c,f)		PerlIO_write(f,b,(s*c))
#else
#define fread(b,s,c,f)		_CANNOT fread
#define fwrite(b,s,c,f)		_CANNOT fwrite
#endif
#define fgetpos(f,p)		PerlIO_getpos(f,p)
#define fseek(f,o,w)		PerlIO_seek(f,o,w)
#define fsetpos(f,p)		PerlIO_setpos(f,p)
#define ftell(f)		PerlIO_tell(f)
#define rewind(f)		PerlIO_rewind(f)
#define clearerr(f)		PerlIO_clearerr(f)
#define feof(f)			PerlIO_eof(f)
#define ferror(f)		PerlIO_error(f)
#define fdopen(fd,p)		PerlIO_fdopen(fd,p)
#define fileno(f)		PerlIO_fileno(f)
#define popen(c,m)		my_popen(c,m)
#define pclose(f)		my_pclose(f)

#define __filbuf(f)		_CANNOT __filbuf_
#define _filbuf(f)		_CANNOT _filbuf_
#define __flsbuf(c,f)		_CANNOT __flsbuf_
#define _flsbuf(c,f)		_CANNOT _flsbuf_
#define getw(f)			_CANNOT _getw_
#define putw(v,f)		_CANNOT _putw_
#if SFIO_VERSION < 20000101L
#define flockfile(f)		_CANNOT _flockfile_
#define ftrylockfile(f)		_CANNOT _ftrylockfile_
#define funlockfile(f)		_CANNOT _funlockfile_
#endif
#define freopen(p,m,f)		_CANNOT _freopen_
#define setbuf(f,b)		_CANNOT _setbuf_
#define setvbuf(f,b,x,s)	_CANNOT _setvbuf_
#define fscanf			_CANNOT _fscanf_
#define fgets(s,n,f)		_CANNOT _fgets_

#endif /* ifdef PERLIO_NOT_STDIO */
#endif /* PERLIO_IS_STDIO */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlsfio.h ===
/* The next #ifdef should be redundant if Configure behaves ... */
#ifdef I_SFIO
#include <sfio.h>
#endif

/* sfio 2000 changed _stdopen to _stdfdopen */
#if SFIO_VERSION >= 20000101L
#define _stdopen _stdfdopen
#endif

extern Sfio_t*	_stdopen _ARG_((int, const char*));
extern int	_stdprintf _ARG_((const char*, ...));

#define PerlIO				Sfio_t
#define PerlIO_stderr()			sfstderr
#define PerlIO_stdout()			sfstdout
#define PerlIO_stdin()			sfstdin

#define PerlIO_printf			sfprintf
#define PerlIO_stdoutf			_stdprintf
#define PerlIO_vprintf(f,fmt,a)		sfvprintf(f,fmt,a)
#define PerlIO_read(f,buf,count)	sfread(f,buf,count)
#define PerlIO_write(f,buf,count)	sfwrite(f,buf,count)
#define PerlIO_open(path,mode)		sfopen(NULL,path,mode)
#define PerlIO_fdopen(fd,mode)		_stdopen(fd,mode)
#define PerlIO_reopen(path,mode,f)	sfopen(f,path,mode)
#define PerlIO_close(f)			sfclose(f)
#define PerlIO_puts(f,s)		sfputr(f,s,-1)
#define PerlIO_putc(f,c)		sfputc(f,c)
#define PerlIO_ungetc(f,c)		sfungetc(f,c)
#define PerlIO_sprintf			sfsprintf
#define PerlIO_getc(f)			sfgetc(f)
#define PerlIO_eof(f)			sfeof(f)
#define PerlIO_error(f)			sferror(f)
#define PerlIO_fileno(f)		sffileno(f)
#define PerlIO_clearerr(f)		sfclrerr(f)
#define PerlIO_flush(f)			sfsync(f)
#if 0
/* This breaks tests */
#define PerlIO_tell(f)			sfseek(f,0,1|SF_SHARE)
#else
#define PerlIO_tell(f)			sftell(f)
#endif
#define PerlIO_seek(f,o,w)		sfseek(f,o,w)
#define PerlIO_rewind(f)		(void) sfseek((f),0L,0)
#define PerlIO_tmpfile()		sftmp(0)

#define PerlIO_importFILE(f,fl)		Perl_croak(aTHX_ "Import from FILE * unimplemeted")
#define PerlIO_exportFILE(f,fl)		Perl_croak(aTHX_ "Export to FILE * unimplemeted")
#define PerlIO_findFILE(f)		NULL
#define PerlIO_releaseFILE(p,f)		Perl_croak(aTHX_ "Release of FILE * unimplemeted")

#define PerlIO_setlinebuf(f)		sfset(f,SF_LINE,1)

/* Now our interface to equivalent of Configure's FILE_xxx macros */

#define PerlIO_has_cntptr(f)		1
#define PerlIO_get_ptr(f)		((f)->next)
#define PerlIO_get_cnt(f)		((f)->endr - (f)->next)
#define PerlIO_canset_cnt(f)		1
#define PerlIO_fast_gets(f)		1
#define PerlIO_set_ptrcnt(f,p,c)	STMT_START {(f)->next = (unsigned char *)(p); assert(PerlIO_get_cnt(f) == (c));} STMT_END
#define PerlIO_set_cnt(f,c)		STMT_START {(f)->next = (f)->endr - (c);} STMT_END

#define PerlIO_has_base(f)		1
#define PerlIO_get_base(f)		((f)->data)
#define PerlIO_get_bufsiz(f)		((f)->endr - (f)->data)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlhost.h ===
/* perlhost.h
 *
 * (c) 1999 Microsoft Corporation. All rights reserved. 
 * Portions (c) 1999 ActiveState Tool Corp, http://www.ActiveState.com/
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 */

#ifndef ___PerlHost_H___
#define ___PerlHost_H___

#include <signal.h>
#include "iperlsys.h"
#include "vmem.h"
#include "vdir.h"

#if !defined(PERL_OBJECT)
START_EXTERN_C
#endif
extern char *		g_win32_get_privlib(const char *pl);
extern char *		g_win32_get_sitelib(const char *pl);
extern char *		g_win32_get_vendorlib(const char *pl);
extern char *		g_getlogin(void);
#if !defined(PERL_OBJECT)
END_EXTERN_C
#endif

class CPerlHost
{
public:
    CPerlHost(void);
    CPerlHost(struct IPerlMem** ppMem, struct IPerlMem** ppMemShared,
		 struct IPerlMem** ppMemParse, struct IPerlEnv** ppEnv,
		 struct IPerlStdIO** ppStdIO, struct IPerlLIO** ppLIO,
		 struct IPerlDir** ppDir, struct IPerlSock** ppSock,
		 struct IPerlProc** ppProc);
    CPerlHost(CPerlHost& host);
    ~CPerlHost(void);

    static CPerlHost* IPerlMem2Host(struct IPerlMem* piPerl);
    static CPerlHost* IPerlMemShared2Host(struct IPerlMem* piPerl);
    static CPerlHost* IPerlMemParse2Host(struct IPerlMem* piPerl);
    static CPerlHost* IPerlEnv2Host(struct IPerlEnv* piPerl);
    static CPerlHost* IPerlStdIO2Host(struct IPerlStdIO* piPerl);
    static CPerlHost* IPerlLIO2Host(struct IPerlLIO* piPerl);
    static CPerlHost* IPerlDir2Host(struct IPerlDir* piPerl);
    static CPerlHost* IPerlSock2Host(struct IPerlSock* piPerl);
    static CPerlHost* IPerlProc2Host(struct IPerlProc* piPerl);

    BOOL PerlCreate(void);
    int PerlParse(int argc, char** argv, char** env);
    int PerlRun(void);
    void PerlDestroy(void);

/* IPerlMem */
    inline void* Malloc(size_t size) { return m_pVMem->Malloc(size); };
    inline void* Realloc(void* ptr, size_t size) { return m_pVMem->Realloc(ptr, size); };
    inline void Free(void* ptr) { m_pVMem->Free(ptr); };
    inline void* Calloc(size_t num, size_t size)
    {
	size_t count = num*size;
	void* lpVoid = Malloc(count);
	if (lpVoid)
	    ZeroMemory(lpVoid, count);
	return lpVoid;
    };
    inline void GetLock(void) { m_pVMem->GetLock(); };
    inline void FreeLock(void) { m_pVMem->FreeLock(); };
    inline int IsLocked(void) { return m_pVMem->IsLocked(); };

/* IPerlMemShared */
    inline void* MallocShared(size_t size)
    {
	return m_pVMemShared->Malloc(size);
    };
    inline void* ReallocShared(void* ptr, size_t size) { return m_pVMemShared->Realloc(ptr, size); };
    inline void FreeShared(void* ptr) { m_pVMemShared->Free(ptr); };
    inline void* CallocShared(size_t num, size_t size)
    {
	size_t count = num*size;
	void* lpVoid = MallocShared(count);
	if (lpVoid)
	    ZeroMemory(lpVoid, count);
	return lpVoid;
    };
    inline void GetLockShared(void) { m_pVMem->GetLock(); };
    inline void FreeLockShared(void) { m_pVMem->FreeLock(); };
    inline int IsLockedShared(void) { return m_pVMem->IsLocked(); };

/* IPerlMemParse */
    inline void* MallocParse(size_t size) { return m_pVMemParse->Malloc(size); };
    inline void* ReallocParse(void* ptr, size_t size) { return m_pVMemParse->Realloc(ptr, size); };
    inline void FreeParse(void* ptr) { m_pVMemParse->Free(ptr); };
    inline void* CallocParse(size_t num, size_t size)
    {
	size_t count = num*size;
	void* lpVoid = MallocParse(count);
	if (lpVoid)
	    ZeroMemory(lpVoid, count);
	return lpVoid;
    };
    inline void GetLockParse(void) { m_pVMem->GetLock(); };
    inline void FreeLockParse(void) { m_pVMem->FreeLock(); };
    inline int IsLockedParse(void) { return m_pVMem->IsLocked(); };

/* IPerlEnv */
    char *Getenv(const char *varname);
    int Putenv(const char *envstring);
    inline char *Getenv(const char *varname, unsigned long *len)
    {
	*len = 0;
	char *e = Getenv(varname);
	if (e)
	    *len = strlen(e);
	return e;
    }
    void* CreateChildEnv(void) { return CreateLocalEnvironmentStrings(*m_pvDir); };
    void FreeChildEnv(void* pStr) { FreeLocalEnvironmentStrings((char*)pStr); };
    char* GetChildDir(void);
    void FreeChildDir(char* pStr);
    void Reset(void);
    void Clearenv(void);

    inline LPSTR GetIndex(DWORD &dwIndex)
    {
	if(dwIndex < m_dwEnvCount)
	{
	    ++dwIndex;
	    return m_lppEnvList[dwIndex-1];
	}
	return NULL;
    };

protected:
    LPSTR Find(LPCSTR lpStr);
    void Add(LPCSTR lpStr);

    LPSTR CreateLocalEnvironmentStrings(VDir &vDir);
    void FreeLocalEnvironmentStrings(LPSTR lpStr);
    LPSTR* Lookup(LPCSTR lpStr);
    DWORD CalculateEnvironmentSpace(void);

public:

/* IPerlDIR */
    virtual int Chdir(const char *dirname);

/* IPerllProc */
    void Abort(void);
    void Exit(int status);
    void _Exit(int status);
    int Execl(const char *cmdname, const char *arg0, const char *arg1, const char *arg2, const char *arg3);
    int Execv(const char *cmdname, const char *const *argv);
    int Execvp(const char *cmdname, const char *const *argv);

    inline VMem* GetMemShared(void) { m_pVMemShared->AddRef(); return m_pVMemShared; };
    inline VMem* GetMemParse(void) { m_pVMemParse->AddRef(); return m_pVMemParse; };
    inline VDir* GetDir(void) { return m_pvDir; };

public:

    struct IPerlMem	    m_hostperlMem;
    struct IPerlMem	    m_hostperlMemShared;
    struct IPerlMem	    m_hostperlMemParse;
    struct IPerlEnv	    m_hostperlEnv;
    struct IPerlStdIO	    m_hostperlStdIO;
    struct IPerlLIO	    m_hostperlLIO;
    struct IPerlDir	    m_hostperlDir;
    struct IPerlSock	    m_hostperlSock;
    struct IPerlProc	    m_hostperlProc;

    struct IPerlMem*	    m_pHostperlMem;
    struct IPerlMem*	    m_pHostperlMemShared;
    struct IPerlMem*	    m_pHostperlMemParse;
    struct IPerlEnv*	    m_pHostperlEnv;
    struct IPerlStdIO*	    m_pHostperlStdIO;
    struct IPerlLIO*	    m_pHostperlLIO;
    struct IPerlDir*	    m_pHostperlDir;
    struct IPerlSock*	    m_pHostperlSock;
    struct IPerlProc*	    m_pHostperlProc;

    inline char* MapPathA(const char *pInName) { return m_pvDir->MapPathA(pInName); };
    inline WCHAR* MapPathW(const WCHAR *pInName) { return m_pvDir->MapPathW(pInName); };
protected:

    VDir*   m_pvDir;
    VMem*   m_pVMem;
    VMem*   m_pVMemShared;
    VMem*   m_pVMemParse;

    DWORD   m_dwEnvCount;
    LPSTR*  m_lppEnvList;
};


#define STRUCT2PTR(x, y) (CPerlHost*)(((LPBYTE)x)-offsetof(CPerlHost, y))

inline CPerlHost* IPerlMem2Host(struct IPerlMem* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlMem);
}

inline CPerlHost* IPerlMemShared2Host(struct IPerlMem* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlMemShared);
}

inline CPerlHost* IPerlMemParse2Host(struct IPerlMem* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlMemParse);
}

inline CPerlHost* IPerlEnv2Host(struct IPerlEnv* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlEnv);
}

inline CPerlHost* IPerlStdIO2Host(struct IPerlStdIO* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlStdIO);
}

inline CPerlHost* IPerlLIO2Host(struct IPerlLIO* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlLIO);
}

inline CPerlHost* IPerlDir2Host(struct IPerlDir* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlDir);
}

inline CPerlHost* IPerlSock2Host(struct IPerlSock* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlSock);
}

inline CPerlHost* IPerlProc2Host(struct IPerlProc* piPerl)
{
    return STRUCT2PTR(piPerl, m_hostperlProc);
}



#undef IPERL2HOST
#define IPERL2HOST(x) IPerlMem2Host(x)

/* IPerlMem */
void*
PerlMemMalloc(struct IPerlMem* piPerl, size_t size)
{
    return IPERL2HOST(piPerl)->Malloc(size);
}
void*
PerlMemRealloc(struct IPerlMem* piPerl, void* ptr, size_t size)
{
    return IPERL2HOST(piPerl)->Realloc(ptr, size);
}
void
PerlMemFree(struct IPerlMem* piPerl, void* ptr)
{
    IPERL2HOST(piPerl)->Free(ptr);
}
void*
PerlMemCalloc(struct IPerlMem* piPerl, size_t num, size_t size)
{
    return IPERL2HOST(piPerl)->Calloc(num, size);
}

void
PerlMemGetLock(struct IPerlMem* piPerl)
{
    IPERL2HOST(piPerl)->GetLock();
}

void
PerlMemFreeLock(struct IPerlMem* piPerl)
{
    IPERL2HOST(piPerl)->FreeLock();
}

int
PerlMemIsLocked(struct IPerlMem* piPerl)
{
    return IPERL2HOST(piPerl)->IsLocked();
}

struct IPerlMem perlMem =
{
    PerlMemMalloc,
    PerlMemRealloc,
    PerlMemFree,
    PerlMemCalloc,
    PerlMemGetLock,
    PerlMemFreeLock,
    PerlMemIsLocked,
};

#undef IPERL2HOST
#define IPERL2HOST(x) IPerlMemShared2Host(x)

/* IPerlMemShared */
void*
PerlMemSharedMalloc(struct IPerlMem* piPerl, size_t size)
{
    return IPERL2HOST(piPerl)->MallocShared(size);
}
void*
PerlMemSharedRealloc(struct IPerlMem* piPerl, void* ptr, size_t size)
{
    return IPERL2HOST(piPerl)->ReallocShared(ptr, size);
}
void
PerlMemSharedFree(struct IPerlMem* piPerl, void* ptr)
{
    IPERL2HOST(piPerl)->FreeShared(ptr);
}
void*
PerlMemSharedCalloc(struct IPerlMem* piPerl, size_t num, size_t size)
{
    return IPERL2HOST(piPerl)->CallocShared(num, size);
}

void
PerlMemSharedGetLock(struct IPerlMem* piPerl)
{
    IPERL2HOST(piPerl)->GetLockShared();
}

void
PerlMemSharedFreeLock(struct IPerlMem* piPerl)
{
    IPERL2HOST(piPerl)->FreeLockShared();
}

int
PerlMemSharedIsLocked(struct IPerlMem* piPerl)
{
    return IPERL2HOST(piPerl)->IsLockedShared();
}

struct IPerlMem perlMemShared =
{
    PerlMemSharedMalloc,
    PerlMemSharedRealloc,
    PerlMemSharedFree,
    PerlMemSharedCalloc,
    PerlMemSharedGetLock,
    PerlMemSharedFreeLock,
    PerlMemSharedIsLocked,
};

#undef IPERL2HOST
#define IPERL2HOST(x) IPerlMemParse2Host(x)

/* IPerlMemParse */
void*
PerlMemParseMalloc(struct IPerlMem* piPerl, size_t size)
{
    return IPERL2HOST(piPerl)->MallocParse(size);
}
void*
PerlMemParseRealloc(struct IPerlMem* piPerl, void* ptr, size_t size)
{
    return IPERL2HOST(piPerl)->ReallocParse(ptr, size);
}
void
PerlMemParseFree(struct IPerlMem* piPerl, void* ptr)
{
    IPERL2HOST(piPerl)->FreeParse(ptr);
}
void*
PerlMemParseCalloc(struct IPerlMem* piPerl, size_t num, size_t size)
{
    return IPERL2HOST(piPerl)->CallocParse(num, size);
}

void
PerlMemParseGetLock(struct IPerlMem* piPerl)
{
    IPERL2HOST(piPerl)->GetLockParse();
}

void
PerlMemParseFreeLock(struct IPerlMem* piPerl)
{
    IPERL2HOST(piPerl)->FreeLockParse();
}

int
PerlMemParseIsLocked(struct IPerlMem* piPerl)
{
    return IPERL2HOST(piPerl)->IsLockedParse();
}

struct IPerlMem perlMemParse =
{
    PerlMemParseMalloc,
    PerlMemParseRealloc,
    PerlMemParseFree,
    PerlMemParseCalloc,
    PerlMemParseGetLock,
    PerlMemParseFreeLock,
    PerlMemParseIsLocked,
};


#undef IPERL2HOST
#define IPERL2HOST(x) IPerlEnv2Host(x)

/* IPerlEnv */
char*
PerlEnvGetenv(struct IPerlEnv* piPerl, const char *varname)
{
    return IPERL2HOST(piPerl)->Getenv(varname);
};

int
PerlEnvPutenv(struct IPerlEnv* piPerl, const char *envstring)
{
    return IPERL2HOST(piPerl)->Putenv(envstring);
};

char*
PerlEnvGetenv_len(struct IPerlEnv* piPerl, const char* varname, unsigned long* len)
{
    return IPERL2HOST(piPerl)->Getenv(varname, len);
}

int
PerlEnvUname(struct IPerlEnv* piPerl, struct utsname *name)
{
    return win32_uname(name);
}

void
PerlEnvClearenv(struct IPerlEnv* piPerl)
{
    IPERL2HOST(piPerl)->Clearenv();
}

void*
PerlEnvGetChildenv(struct IPerlEnv* piPerl)
{
    return IPERL2HOST(piPerl)->CreateChildEnv();
}

void
PerlEnvFreeChildenv(struct IPerlEnv* piPerl, void* childEnv)
{
    IPERL2HOST(piPerl)->FreeChildEnv(childEnv);
}

char*
PerlEnvGetChilddir(struct IPerlEnv* piPerl)
{
    return IPERL2HOST(piPerl)->GetChildDir();
}

void
PerlEnvFreeChilddir(struct IPerlEnv* piPerl, char* childDir)
{
    IPERL2HOST(piPerl)->FreeChildDir(childDir);
}

unsigned long
PerlEnvOsId(struct IPerlEnv* piPerl)
{
    return win32_os_id();
}

char*
PerlEnvLibPath(struct IPerlEnv* piPerl, const char *pl)
{
    return g_win32_get_privlib(pl);
}

char*
PerlEnvSiteLibPath(struct IPerlEnv* piPerl, const char *pl)
{
    return g_win32_get_sitelib(pl);
}

char*
PerlEnvVendorLibPath(struct IPerlEnv* piPerl, const char *pl)
{
    return g_win32_get_vendorlib(pl);
}

void
PerlEnvGetChildIO(struct IPerlEnv* piPerl, child_IO_table* ptr)
{
    win32_get_child_IO(ptr);
}

struct IPerlEnv perlEnv = 
{
    PerlEnvGetenv,
    PerlEnvPutenv,
    PerlEnvGetenv_len,
    PerlEnvUname,
    PerlEnvClearenv,
    PerlEnvGetChildenv,
    PerlEnvFreeChildenv,
    PerlEnvGetChilddir,
    PerlEnvFreeChilddir,
    PerlEnvOsId,
    PerlEnvLibPath,
    PerlEnvSiteLibPath,
    PerlEnvVendorLibPath,
    PerlEnvGetChildIO,
};

#undef IPERL2HOST
#define IPERL2HOST(x) IPerlStdIO2Host(x)

/* PerlStdIO */
PerlIO*
PerlStdIOStdin(struct IPerlStdIO* piPerl)
{
    return (PerlIO*)win32_stdin();
}

PerlIO*
PerlStdIOStdout(struct IPerlStdIO* piPerl)
{
    return (PerlIO*)win32_stdout();
}

PerlIO*
PerlStdIOStderr(struct IPerlStdIO* piPerl)
{
    return (PerlIO*)win32_stderr();
}

PerlIO*
PerlStdIOOpen(struct IPerlStdIO* piPerl, const char *path, const char *mode)
{
    return (PerlIO*)win32_fopen(path, mode);
}

int
PerlStdIOClose(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_fclose(((FILE*)pf));
}

int
PerlStdIOEof(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_feof((FILE*)pf);
}

int
PerlStdIOError(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_ferror((FILE*)pf);
}

void
PerlStdIOClearerr(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    win32_clearerr((FILE*)pf);
}

int
PerlStdIOGetc(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_getc((FILE*)pf);
}

char*
PerlStdIOGetBase(struct IPerlStdIO* piPerl, PerlIO* pf)
{
#ifdef FILE_base
    FILE *f = (FILE*)pf;
    return FILE_base(f);
#else
    return Nullch;
#endif
}

int
PerlStdIOGetBufsiz(struct IPerlStdIO* piPerl, PerlIO* pf)
{
#ifdef FILE_bufsiz
    FILE *f = (FILE*)pf;
    return FILE_bufsiz(f);
#else
    return (-1);
#endif
}

int
PerlStdIOGetCnt(struct IPerlStdIO* piPerl, PerlIO* pf)
{
#ifdef USE_STDIO_PTR
    FILE *f = (FILE*)pf;
    return FILE_cnt(f);
#else
    return (-1);
#endif
}

char*
PerlStdIOGetPtr(struct IPerlStdIO* piPerl, PerlIO* pf)
{
#ifdef USE_STDIO_PTR
    FILE *f = (FILE*)pf;
    return FILE_ptr(f);
#else
    return Nullch;
#endif
}

char*
PerlStdIOGets(struct IPerlStdIO* piPerl, PerlIO* pf, char* s, int n)
{
    return win32_fgets(s, n, (FILE*)pf);
}

int
PerlStdIOPutc(struct IPerlStdIO* piPerl, PerlIO* pf, int c)
{
    return win32_fputc(c, (FILE*)pf);
}

int
PerlStdIOPuts(struct IPerlStdIO* piPerl, PerlIO* pf, const char *s)
{
    return win32_fputs(s, (FILE*)pf);
}

int
PerlStdIOFlush(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_fflush((FILE*)pf);
}

int
PerlStdIOUngetc(struct IPerlStdIO* piPerl, PerlIO* pf,int c)
{
    return win32_ungetc(c, (FILE*)pf);
}

int
PerlStdIOFileno(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_fileno((FILE*)pf);
}

PerlIO*
PerlStdIOFdopen(struct IPerlStdIO* piPerl, int fd, const char *mode)
{
    return (PerlIO*)win32_fdopen(fd, mode);
}

PerlIO*
PerlStdIOReopen(struct IPerlStdIO* piPerl, const char*path, const char*mode, PerlIO* pf)
{
    return (PerlIO*)win32_freopen(path, mode, (FILE*)pf);
}

SSize_t
PerlStdIORead(struct IPerlStdIO* piPerl, PerlIO* pf, void *buffer, Size_t size)
{
    return win32_fread(buffer, 1, size, (FILE*)pf);
}

SSize_t
PerlStdIOWrite(struct IPerlStdIO* piPerl, PerlIO* pf, const void *buffer, Size_t size)
{
    return win32_fwrite(buffer, 1, size, (FILE*)pf);
}

void
PerlStdIOSetBuf(struct IPerlStdIO* piPerl, PerlIO* pf, char* buffer)
{
    win32_setbuf((FILE*)pf, buffer);
}

int
PerlStdIOSetVBuf(struct IPerlStdIO* piPerl, PerlIO* pf, char* buffer, int type, Size_t size)
{
    return win32_setvbuf((FILE*)pf, buffer, type, size);
}

void
PerlStdIOSetCnt(struct IPerlStdIO* piPerl, PerlIO* pf, int n)
{
#ifdef STDIO_CNT_LVALUE
    FILE *f = (FILE*)pf;
    FILE_cnt(f) = n;
#endif
}

void
PerlStdIOSetPtrCnt(struct IPerlStdIO* piPerl, PerlIO* pf, char * ptr, int n)
{
#ifdef STDIO_PTR_LVALUE
    FILE *f = (FILE*)pf;
    FILE_ptr(f) = ptr;
    FILE_cnt(f) = n;
#endif
}

void
PerlStdIOSetlinebuf(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    win32_setvbuf((FILE*)pf, NULL, _IOLBF, 0);
}

int
PerlStdIOPrintf(struct IPerlStdIO* piPerl, PerlIO* pf, const char *format,...)
{
    va_list(arglist);
    va_start(arglist, format);
    return win32_vfprintf((FILE*)pf, format, arglist);
}

int
PerlStdIOVprintf(struct IPerlStdIO* piPerl, PerlIO* pf, const char *format, va_list arglist)
{
    return win32_vfprintf((FILE*)pf, format, arglist);
}

long
PerlStdIOTell(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    return win32_ftell((FILE*)pf);
}

int
PerlStdIOSeek(struct IPerlStdIO* piPerl, PerlIO* pf, off_t offset, int origin)
{
    return win32_fseek((FILE*)pf, offset, origin);
}

void
PerlStdIORewind(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    win32_rewind((FILE*)pf);
}

PerlIO*
PerlStdIOTmpfile(struct IPerlStdIO* piPerl)
{
    return (PerlIO*)win32_tmpfile();
}

int
PerlStdIOGetpos(struct IPerlStdIO* piPerl, PerlIO* pf, Fpos_t *p)
{
    return win32_fgetpos((FILE*)pf, p);
}

int
PerlStdIOSetpos(struct IPerlStdIO* piPerl, PerlIO* pf, const Fpos_t *p)
{
    return win32_fsetpos((FILE*)pf, p);
}
void
PerlStdIOInit(struct IPerlStdIO* piPerl)
{
}

void
PerlStdIOInitOSExtras(struct IPerlStdIO* piPerl)
{
    Perl_init_os_extras();
}

int
PerlStdIOOpenOSfhandle(struct IPerlStdIO* piPerl, long osfhandle, int flags)
{
    return win32_open_osfhandle(osfhandle, flags);
}

int
PerlStdIOGetOSfhandle(struct IPerlStdIO* piPerl, int filenum)
{
    return win32_get_osfhandle(filenum);
}

PerlIO*
PerlStdIOFdupopen(struct IPerlStdIO* piPerl, PerlIO* pf)
{
    PerlIO* pfdup;
    fpos_t pos;
    char mode[3];
    int fileno = win32_dup(win32_fileno((FILE*)pf));

    /* open the file in the same mode */
#ifdef __BORLANDC__
    if(((FILE*)pf)->flags & _F_READ) {
	mode[0] = 'r';
	mode[1] = 0;
    }
    else if(((FILE*)pf)->flags & _F_WRIT) {
	mode[0] = 'a';
	mode[1] = 0;
    }
    else if(((FILE*)pf)->flags & _F_RDWR) {
	mode[0] = 'r';
	mode[1] = '+';
	mode[2] = 0;
    }
#else
    if(((FILE*)pf)->_flag & _IOREAD) {
	mode[0] = 'r';
	mode[1] = 0;
    }
    else if(((FILE*)pf)->_flag & _IOWRT) {
	mode[0] = 'a';
	mode[1] = 0;
    }
    else if(((FILE*)pf)->_flag & _IORW) {
	mode[0] = 'r';
	mode[1] = '+';
	mode[2] = 0;
    }
#endif

    /* it appears that the binmode is attached to the 
     * file descriptor so binmode files will be handled
     * correctly
     */
    pfdup = (PerlIO*)win32_fdopen(fileno, mode);

    /* move the file pointer to the same position */
    if (!fgetpos((FILE*)pf, &pos)) {
	fsetpos((FILE*)pfdup, &pos);
    }
    return pfdup;
}

struct IPerlStdIO perlStdIO = 
{
    PerlStdIOStdin,
    PerlStdIOStdout,
    PerlStdIOStderr,
    PerlStdIOOpen,
    PerlStdIOClose,
    PerlStdIOEof,
    PerlStdIOError,
    PerlStdIOClearerr,
    PerlStdIOGetc,
    PerlStdIOGetBase,
    PerlStdIOGetBufsiz,
    PerlStdIOGetCnt,
    PerlStdIOGetPtr,
    PerlStdIOGets,
    PerlStdIOPutc,
    PerlStdIOPuts,
    PerlStdIOFlush,
    PerlStdIOUngetc,
    PerlStdIOFileno,
    PerlStdIOFdopen,
    PerlStdIOReopen,
    PerlStdIORead,
    PerlStdIOWrite,
    PerlStdIOSetBuf,
    PerlStdIOSetVBuf,
    PerlStdIOSetCnt,
    PerlStdIOSetPtrCnt,
    PerlStdIOSetlinebuf,
    PerlStdIOPrintf,
    PerlStdIOVprintf,
    PerlStdIOTell,
    PerlStdIOSeek,
    PerlStdIORewind,
    PerlStdIOTmpfile,
    PerlStdIOGetpos,
    PerlStdIOSetpos,
    PerlStdIOInit,
    PerlStdIOInitOSExtras,
    PerlStdIOFdupopen,
};


#undef IPERL2HOST
#define IPERL2HOST(x) IPerlLIO2Host(x)

/* IPerlLIO */
int
PerlLIOAccess(struct IPerlLIO* piPerl, const char *path, int mode)
{
    return win32_access(path, mode);
}

int
PerlLIOChmod(struct IPerlLIO* piPerl, const char *filename, int pmode)
{
    return win32_chmod(filename, pmode);
}

int
PerlLIOChown(struct IPerlLIO* piPerl, const char *filename, uid_t owner, gid_t group)
{
    return chown(filename, owner, group);
}

int
PerlLIOChsize(struct IPerlLIO* piPerl, int handle, long size)
{
    return chsize(handle, size);
}

int
PerlLIOClose(struct IPerlLIO* piPerl, int handle)
{
    return win32_close(handle);
}

int
PerlLIODup(struct IPerlLIO* piPerl, int handle)
{
    return win32_dup(handle);
}

int
PerlLIODup2(struct IPerlLIO* piPerl, int handle1, int handle2)
{
    return win32_dup2(handle1, handle2);
}

int
PerlLIOFlock(struct IPerlLIO* piPerl, int fd, int oper)
{
    return win32_flock(fd, oper);
}

int
PerlLIOFileStat(struct IPerlLIO* piPerl, int handle, struct stat *buffer)
{
    return win32_fstat(handle, buffer);
}

int
PerlLIOIOCtl(struct IPerlLIO* piPerl, int i, unsigned int u, char *data)
{
    return win32_ioctlsocket((SOCKET)i, (long)u, (u_long*)data);
}

int
PerlLIOIsatty(struct IPerlLIO* piPerl, int fd)
{
    return isatty(fd);
}

int
PerlLIOLink(struct IPerlLIO* piPerl, const char*oldname, const char *newname)
{
    return win32_link(oldname, newname);
}

long
PerlLIOLseek(struct IPerlLIO* piPerl, int handle, long offset, int origin)
{
    return win32_lseek(handle, offset, origin);
}

int
PerlLIOLstat(struct IPerlLIO* piPerl, const char *path, struct stat *buffer)
{
    return win32_stat(path, buffer);
}

char*
PerlLIOMktemp(struct IPerlLIO* piPerl, char *Template)
{
    return mktemp(Template);
}

int
PerlLIOOpen(struct IPerlLIO* piPerl, const char *filename, int oflag)
{
    return win32_open(filename, oflag);
}

int
PerlLIOOpen3(struct IPerlLIO* piPerl, const char *filename, int oflag, int pmode)
{
    return win32_open(filename, oflag, pmode);
}

int
PerlLIORead(struct IPerlLIO* piPerl, int handle, void *buffer, unsigned int count)
{
    return win32_read(handle, buffer, count);
}

int
PerlLIORename(struct IPerlLIO* piPerl, const char *OldFileName, const char *newname)
{
    return win32_rename(OldFileName, newname);
}

int
PerlLIOSetmode(struct IPerlLIO* piPerl, int handle, int mode)
{
    return win32_setmode(handle, mode);
}

int
PerlLIONameStat(struct IPerlLIO* piPerl, const char *path, struct stat *buffer)
{
    return win32_stat(path, buffer);
}

char*
PerlLIOTmpnam(struct IPerlLIO* piPerl, char *string)
{
    return tmpnam(string);
}

int
PerlLIOUmask(struct IPerlLIO* piPerl, int pmode)
{
    return umask(pmode);
}

int
PerlLIOUnlink(struct IPerlLIO* piPerl, const char *filename)
{
    return win32_unlink(filename);
}

int
PerlLIOUtime(struct IPerlLIO* piPerl, char *filename, struct utimbuf *times)
{
    return win32_utime(filename, times);
}

int
PerlLIOWrite(struct IPerlLIO* piPerl, int handle, const void *buffer, unsigned int count)
{
    return win32_write(handle, buffer, count);
}

struct IPerlLIO perlLIO =
{
    PerlLIOAccess,
    PerlLIOChmod,
    PerlLIOChown,
    PerlLIOChsize,
    PerlLIOClose,
    PerlLIODup,
    PerlLIODup2,
    PerlLIOFlock,
    PerlLIOFileStat,
    PerlLIOIOCtl,
    PerlLIOIsatty,
    PerlLIOLink,
    PerlLIOLseek,
    PerlLIOLstat,
    PerlLIOMktemp,
    PerlLIOOpen,
    PerlLIOOpen3,
    PerlLIORead,
    PerlLIORename,
    PerlLIOSetmode,
    PerlLIONameStat,
    PerlLIOTmpnam,
    PerlLIOUmask,
    PerlLIOUnlink,
    PerlLIOUtime,
    PerlLIOWrite,
};


#undef IPERL2HOST
#define IPERL2HOST(x) IPerlDir2Host(x)

/* IPerlDIR */
int
PerlDirMakedir(struct IPerlDir* piPerl, const char *dirname, int mode)
{
    return win32_mkdir(dirname, mode);
}

int
PerlDirChdir(struct IPerlDir* piPerl, const char *dirname)
{
    return IPERL2HOST(piPerl)->Chdir(dirname);
}

int
PerlDirRmdir(struct IPerlDir* piPerl, const char *dirname)
{
    return win32_rmdir(dirname);
}

int
PerlDirClose(struct IPerlDir* piPerl, DIR *dirp)
{
    return win32_closedir(dirp);
}

DIR*
PerlDirOpen(struct IPerlDir* piPerl, char *filename)
{
    return win32_opendir(filename);
}

struct direct *
PerlDirRead(struct IPerlDir* piPerl, DIR *dirp)
{
    return win32_readdir(dirp);
}

void
PerlDirRewind(struct IPerlDir* piPerl, DIR *dirp)
{
    win32_rewinddir(dirp);
}

void
PerlDirSeek(struct IPerlDir* piPerl, DIR *dirp, long loc)
{
    win32_seekdir(dirp, loc);
}

long
PerlDirTell(struct IPerlDir* piPerl, DIR *dirp)
{
    return win32_telldir(dirp);
}

char*
PerlDirMapPathA(struct IPerlDir* piPerl, const char* path)
{
    return IPERL2HOST(piPerl)->MapPathA(path);
}

WCHAR*
PerlDirMapPathW(struct IPerlDir* piPerl, const WCHAR* path)
{
    return IPERL2HOST(piPerl)->MapPathW(path);
}

struct IPerlDir perlDir =
{
    PerlDirMakedir,
    PerlDirChdir,
    PerlDirRmdir,
    PerlDirClose,
    PerlDirOpen,
    PerlDirRead,
    PerlDirRewind,
    PerlDirSeek,
    PerlDirTell,
    PerlDirMapPathA,
    PerlDirMapPathW,
};


/* IPerlSock */
u_long
PerlSockHtonl(struct IPerlSock* piPerl, u_long hostlong)
{
    return win32_htonl(hostlong);
}

u_short
PerlSockHtons(struct IPerlSock* piPerl, u_short hostshort)
{
    return win32_htons(hostshort);
}

u_long
PerlSockNtohl(struct IPerlSock* piPerl, u_long netlong)
{
    return win32_ntohl(netlong);
}

u_short
PerlSockNtohs(struct IPerlSock* piPerl, u_short netshort)
{
    return win32_ntohs(netshort);
}

SOCKET PerlSockAccept(struct IPerlSock* piPerl, SOCKET s, struct sockaddr* addr, int* addrlen)
{
    return win32_accept(s, addr, addrlen);
}

int
PerlSockBind(struct IPerlSock* piPerl, SOCKET s, const struct sockaddr* name, int namelen)
{
    return win32_bind(s, name, namelen);
}

int
PerlSockConnect(struct IPerlSock* piPerl, SOCKET s, const struct sockaddr* name, int namelen)
{
    return win32_connect(s, name, namelen);
}

void
PerlSockEndhostent(struct IPerlSock* piPerl)
{
    win32_endhostent();
}

void
PerlSockEndnetent(struct IPerlSock* piPerl)
{
    win32_endnetent();
}

void
PerlSockEndprotoent(struct IPerlSock* piPerl)
{
    win32_endprotoent();
}

void
PerlSockEndservent(struct IPerlSock* piPerl)
{
    win32_endservent();
}

struct hostent*
PerlSockGethostbyaddr(struct IPerlSock* piPerl, const char* addr, int len, int type)
{
    return win32_gethostbyaddr(addr, len, type);
}

struct hostent*
PerlSockGethostbyname(struct IPerlSock* piPerl, const char* name)
{
    return win32_gethostbyname(name);
}

struct hostent*
PerlSockGethostent(struct IPerlSock* piPerl)
{
    dTHXo;
    Perl_croak(aTHX_ "gethostent not implemented!\n");
    return NULL;
}

int
PerlSockGethostname(struct IPerlSock* piPerl, char* name, int namelen)
{
    return win32_gethostname(name, namelen);
}

struct netent *
PerlSockGetnetbyaddr(struct IPerlSock* piPerl, long net, int type)
{
    return win32_getnetbyaddr(net, type);
}

struct netent *
PerlSockGetnetbyname(struct IPerlSock* piPerl, const char *name)
{
    return win32_getnetbyname((char*)name);
}

struct netent *
PerlSockGetnetent(struct IPerlSock* piPerl)
{
    return win32_getnetent();
}

int PerlSockGetpeername(struct IPerlSock* piPerl, SOCKET s, struct sockaddr* name, int* namelen)
{
    return win32_getpeername(s, name, namelen);
}

struct protoent*
PerlSockGetprotobyname(struct IPerlSock* piPerl, const char* name)
{
    return win32_getprotobyname(name);
}

struct protoent*
PerlSockGetprotobynumber(struct IPerlSock* piPerl, int number)
{
    return win32_getprotobynumber(number);
}

struct protoent*
PerlSockGetprotoent(struct IPerlSock* piPerl)
{
    return win32_getprotoent();
}

struct servent*
PerlSockGetservbyname(struct IPerlSock* piPerl, const char* name, const char* proto)
{
    return win32_getservbyname(name, proto);
}

struct servent*
PerlSockGetservbyport(struct IPerlSock* piPerl, int port, const char* proto)
{
    return win32_getservbyport(port, proto);
}

struct servent*
PerlSockGetservent(struct IPerlSock* piPerl)
{
    return win32_getservent();
}

int
PerlSockGetsockname(struct IPerlSock* piPerl, SOCKET s, struct sockaddr* name, int* namelen)
{
    return win32_getsockname(s, name, namelen);
}

int
PerlSockGetsockopt(struct IPerlSock* piPerl, SOCKET s, int level, int optname, char* optval, int* optlen)
{
    return win32_getsockopt(s, level, optname, optval, optlen);
}

unsigned long
PerlSockInetAddr(struct IPerlSock* piPerl, const char* cp)
{
    return win32_inet_addr(cp);
}

char*
PerlSockInetNtoa(struct IPerlSock* piPerl, struct in_addr in)
{
    return win32_inet_ntoa(in);
}

int
PerlSockListen(struct IPerlSock* piPerl, SOCKET s, int backlog)
{
    return win32_listen(s, backlog);
}

int
PerlSockRecv(struct IPerlSock* piPerl, SOCKET s, char* buffer, int len, int flags)
{
    return win32_recv(s, buffer, len, flags);
}

int
PerlSockRecvfrom(struct IPerlSock* piPerl, SOCKET s, char* buffer, int len, int flags, struct sockaddr* from, int* fromlen)
{
    return win32_recvfrom(s, buffer, len, flags, from, fromlen);
}

int
PerlSockSelect(struct IPerlSock* piPerl, int nfds, char* readfds, char* writefds, char* exceptfds, const struct timeval* timeout)
{
    return win32_select(nfds, (Perl_fd_set*)readfds, (Perl_fd_set*)writefds, (Perl_fd_set*)exceptfds, timeout);
}

int
PerlSockSend(struct IPerlSock* piPerl, SOCKET s, const char* buffer, int len, int flags)
{
    return win32_send(s, buffer, len, flags);
}

int
PerlSockSendto(struct IPerlSock* piPerl, SOCKET s, const char* buffer, int len, int flags, const struct sockaddr* to, int tolen)
{
    return win32_sendto(s, buffer, len, flags, to, tolen);
}

void
PerlSockSethostent(struct IPerlSock* piPerl, int stayopen)
{
    win32_sethostent(stayopen);
}

void
PerlSockSetnetent(struct IPerlSock* piPerl, int stayopen)
{
    win32_setnetent(stayopen);
}

void
PerlSockSetprotoent(struct IPerlSock* piPerl, int stayopen)
{
    win32_setprotoent(stayopen);
}

void
PerlSockSetservent(struct IPerlSock* piPerl, int stayopen)
{
    win32_setservent(stayopen);
}

int
PerlSockSetsockopt(struct IPerlSock* piPerl, SOCKET s, int level, int optname, const char* optval, int optlen)
{
    return win32_setsockopt(s, level, optname, optval, optlen);
}

int
PerlSockShutdown(struct IPerlSock* piPerl, SOCKET s, int how)
{
    return win32_shutdown(s, how);
}

SOCKET
PerlSockSocket(struct IPerlSock* piPerl, int af, int type, int protocol)
{
    return win32_socket(af, type, protocol);
}

int
PerlSockSocketpair(struct IPerlSock* piPerl, int domain, int type, int protocol, int* fds)
{
    dTHXo;
    Perl_croak(aTHX_ "socketpair not implemented!\n");
    return 0;
}

int
PerlSockClosesocket(struct IPerlSock* piPerl, SOCKET s)
{
    return win32_closesocket(s);
}

int
PerlSockIoctlsocket(struct IPerlSock* piPerl, SOCKET s, long cmd, u_long *argp)
{
    return win32_ioctlsocket(s, cmd, argp);
}

struct IPerlSock perlSock =
{
    PerlSockHtonl,
    PerlSockHtons,
    PerlSockNtohl,
    PerlSockNtohs,
    PerlSockAccept,
    PerlSockBind,
    PerlSockConnect,
    PerlSockEndhostent,
    PerlSockEndnetent,
    PerlSockEndprotoent,
    PerlSockEndservent,
    PerlSockGethostname,
    PerlSockGetpeername,
    PerlSockGethostbyaddr,
    PerlSockGethostbyname,
    PerlSockGethostent,
    PerlSockGetnetbyaddr,
    PerlSockGetnetbyname,
    PerlSockGetnetent,
    PerlSockGetprotobyname,
    PerlSockGetprotobynumber,
    PerlSockGetprotoent,
    PerlSockGetservbyname,
    PerlSockGetservbyport,
    PerlSockGetservent,
    PerlSockGetsockname,
    PerlSockGetsockopt,
    PerlSockInetAddr,
    PerlSockInetNtoa,
    PerlSockListen,
    PerlSockRecv,
    PerlSockRecvfrom,
    PerlSockSelect,
    PerlSockSend,
    PerlSockSendto,
    PerlSockSethostent,
    PerlSockSetnetent,
    PerlSockSetprotoent,
    PerlSockSetservent,
    PerlSockSetsockopt,
    PerlSockShutdown,
    PerlSockSocket,
    PerlSockSocketpair,
    PerlSockClosesocket,
};


/* IPerlProc */

#define EXECF_EXEC 1
#define EXECF_SPAWN 2

void
PerlProcAbort(struct IPerlProc* piPerl)
{
    win32_abort();
}

char *
PerlProcCrypt(struct IPerlProc* piPerl, const char* clear, const char* salt)
{
    return win32_crypt(clear, salt);
}

void
PerlProcExit(struct IPerlProc* piPerl, int status)
{
    exit(status);
}

void
PerlProc_Exit(struct IPerlProc* piPerl, int status)
{
    _exit(status);
}

int
PerlProcExecl(struct IPerlProc* piPerl, const char *cmdname, const char *arg0, const char *arg1, const char *arg2, const char *arg3)
{
    return execl(cmdname, arg0, arg1, arg2, arg3);
}

int
PerlProcExecv(struct IPerlProc* piPerl, const char *cmdname, const char *const *argv)
{
    return win32_execvp(cmdname, argv);
}

int
PerlProcExecvp(struct IPerlProc* piPerl, const char *cmdname, const char *const *argv)
{
    return win32_execvp(cmdname, argv);
}

uid_t
PerlProcGetuid(struct IPerlProc* piPerl)
{
    return getuid();
}

uid_t
PerlProcGeteuid(struct IPerlProc* piPerl)
{
    return geteuid();
}

gid_t
PerlProcGetgid(struct IPerlProc* piPerl)
{
    return getgid();
}

gid_t
PerlProcGetegid(struct IPerlProc* piPerl)
{
    return getegid();
}

char *
PerlProcGetlogin(struct IPerlProc* piPerl)
{
    return g_getlogin();
}

int
PerlProcKill(struct IPerlProc* piPerl, int pid, int sig)
{
    return win32_kill(pid, sig);
}

int
PerlProcKillpg(struct IPerlProc* piPerl, int pid, int sig)
{
    dTHXo;
    Perl_croak(aTHX_ "killpg not implemented!\n");
    return 0;
}

int
PerlProcPauseProc(struct IPerlProc* piPerl)
{
    return win32_sleep((32767L << 16) + 32767);
}

PerlIO*
PerlProcPopen(struct IPerlProc* piPerl, const char *command, const char *mode)
{
    dTHXo;
    PERL_FLUSHALL_FOR_CHILD;
    return (PerlIO*)win32_popen(command, mode);
}

int
PerlProcPclose(struct IPerlProc* piPerl, PerlIO *stream)
{
    return win32_pclose((FILE*)stream);
}

int
PerlProcPipe(struct IPerlProc* piPerl, int *phandles)
{
    return win32_pipe(phandles, 512, O_BINARY);
}

int
PerlProcSetuid(struct IPerlProc* piPerl, uid_t u)
{
    return setuid(u);
}

int
PerlProcSetgid(struct IPerlProc* piPerl, gid_t g)
{
    return setgid(g);
}

int
PerlProcSleep(struct IPerlProc* piPerl, unsigned int s)
{
    return win32_sleep(s);
}

int
PerlProcTimes(struct IPerlProc* piPerl, struct tms *timebuf)
{
    return win32_times(timebuf);
}

int
PerlProcWait(struct IPerlProc* piPerl, int *status)
{
    return win32_wait(status);
}

int
PerlProcWaitpid(struct IPerlProc* piPerl, int pid, int *status, int flags)
{
    return win32_waitpid(pid, status, flags);
}

Sighandler_t
PerlProcSignal(struct IPerlProc* piPerl, int sig, Sighandler_t subcode)
{
    return signal(sig, subcode);
}

#ifdef USE_ITHREADS
static THREAD_RET_TYPE
win32_start_child(LPVOID arg)
{
    PerlInterpreter *my_perl = (PerlInterpreter*)arg;
    GV *tmpgv;
    int status;
#ifdef PERL_OBJECT
    CPerlObj *pPerl = (CPerlObj*)my_perl;
#endif
#ifdef PERL_SYNC_FORK
    static long sync_fork_id = 0;
    long id = ++sync_fork_id;
#endif


    PERL_SET_THX(my_perl);

    /* set $$ to pseudo id */
#ifdef PERL_SYNC_FORK
    w32_pseudo_id = id;
#else
    w32_pseudo_id = GetCurrentThreadId();
    if (IsWin95()) {
	int pid = (int)w32_pseudo_id;
	if (pid < 0)
	    w32_pseudo_id = -pid;
    }
#endif
    if (tmpgv = gv_fetchpv("$", TRUE, SVt_PV))
	sv_setiv(GvSV(tmpgv), -(IV)w32_pseudo_id);
    hv_clear(PL_pidstatus);

    /* push a zero on the stack (we are the child) */
    {
	dSP;
	dTARGET;
	PUSHi(0);
	PUTBACK;
    }

    /* continue from next op */
    PL_op = PL_op->op_next;

    {
	dJMPENV;
	volatile int oldscope = PL_scopestack_ix;

restart:
	JMPENV_PUSH(status);
	switch (status) {
	case 0:
	    CALLRUNOPS(aTHX);
	    status = 0;
	    break;
	case 2:
	    while (PL_scopestack_ix > oldscope)
		LEAVE;
	    FREETMPS;
	    PL_curstash = PL_defstash;
	    if (PL_endav && !PL_minus_c)
		call_list(oldscope, PL_endav);
	    status = STATUS_NATIVE_EXPORT;
	    break;
	case 3:
	    if (PL_restartop) {
		POPSTACK_TO(PL_mainstack);
		PL_op = PL_restartop;
		PL_restartop = Nullop;
		goto restart;
	    }
	    PerlIO_printf(Perl_error_log, "panic: restartop\n");
	    FREETMPS;
	    status = 1;
	    break;
	}
	JMPENV_POP;

	/* XXX hack to avoid perl_destruct() freeing optree */
	PL_main_root = Nullop;
    }

    /* close the std handles to avoid fd leaks */
    {
	do_close(gv_fetchpv("STDIN", TRUE, SVt_PVIO), FALSE);
	do_close(gv_fetchpv("STDOUT", TRUE, SVt_PVIO), FALSE);
	do_close(gv_fetchpv("STDERR", TRUE, SVt_PVIO), FALSE);
    }

    /* destroy everything (waits for any pseudo-forked children) */
    perl_destruct(my_perl);
    perl_free(my_perl);

#ifdef PERL_SYNC_FORK
    return id;
#else
    return (DWORD)status;
#endif
}
#endif /* USE_ITHREADS */

int
PerlProcFork(struct IPerlProc* piPerl)
{
    dTHXo;
#ifdef USE_ITHREADS
    DWORD id;
    HANDLE handle;
    CPerlHost *h;

    if (w32_num_pseudo_children >= MAXIMUM_WAIT_OBJECTS) {
	errno = EAGAIN;
	return -1;
    }
    h = new CPerlHost(*(CPerlHost*)w32_internal_host);
    PerlInterpreter *new_perl = perl_clone_using((PerlInterpreter*)aTHXo, 1,
						 h->m_pHostperlMem,
						 h->m_pHostperlMemShared,
						 h->m_pHostperlMemParse,
						 h->m_pHostperlEnv,
						 h->m_pHostperlStdIO,
						 h->m_pHostperlLIO,
						 h->m_pHostperlDir,
						 h->m_pHostperlSock,
						 h->m_pHostperlProc
						 );
    new_perl->Isys_intern.internal_host = h;
#  ifdef PERL_SYNC_FORK
    id = win32_start_child((LPVOID)new_perl);
    PERL_SET_THX(aTHXo);
#  else
#    ifdef USE_RTL_THREAD_API
    handle = (HANDLE)_beginthreadex((void*)NULL, 0, win32_start_child,
				    (void*)new_perl, 0, (unsigned*)&id);
#    else
    handle = CreateThread(NULL, 0, win32_start_child,
			  (LPVOID)new_perl, 0, &id);
#    endif
    PERL_SET_THX(aTHXo);	/* XXX perl_clone*() set TLS */
    if (!handle) {
	errno = EAGAIN;
	return -1;
    }
    if (IsWin95()) {
	int pid = (int)id;
	if (pid < 0)
	    id = -pid;
    }
    w32_pseudo_child_handles[w32_num_pseudo_children] = handle;
    w32_pseudo_child_pids[w32_num_pseudo_children] = id;
    ++w32_num_pseudo_children;
#  endif
    return -(int)id;
#else
    Perl_croak(aTHX_ "fork() not implemented!\n");
    return -1;
#endif /* USE_ITHREADS */
}

int
PerlProcGetpid(struct IPerlProc* piPerl)
{
    return win32_getpid();
}

void*
PerlProcDynaLoader(struct IPerlProc* piPerl, const char* filename)
{
    return win32_dynaload(filename);
}

void
PerlProcGetOSError(struct IPerlProc* piPerl, SV* sv, DWORD dwErr)
{
    win32_str_os_error(sv, dwErr);
}

int
PerlProcSpawnvp(struct IPerlProc* piPerl, int mode, const char *cmdname, const char *const *argv)
{
    return win32_spawnvp(mode, cmdname, argv);
}

/* XXX these three are only here for binary compatibility */
BOOL
PerlProcDoCmd(struct IPerlProc* piPerl, char *cmd)
{
    dTHXo;
    return do_exec(cmd);
}

int
PerlProcSpawn(struct IPerlProc* piPerl, char* cmds)
{
    dTHXo;
    return do_spawn(cmds);
}

int
PerlProcASpawn(struct IPerlProc* piPerl, SV *really, SV **mark, SV **sp)
{
    dTHXo;
    return do_aspawn(really, mark, sp);
}
/* XXX above three are only here for binary compatibility */

struct IPerlProc perlProc =
{
    PerlProcAbort,
    PerlProcCrypt,
    PerlProcExit,
    PerlProc_Exit,
    PerlProcExecl,
    PerlProcExecv,
    PerlProcExecvp,
    PerlProcGetuid,
    PerlProcGeteuid,
    PerlProcGetgid,
    PerlProcGetegid,
    PerlProcGetlogin,
    PerlProcKill,
    PerlProcKillpg,
    PerlProcPauseProc,
    PerlProcPopen,
    PerlProcPclose,
    PerlProcPipe,
    PerlProcSetuid,
    PerlProcSetgid,
    PerlProcSleep,
    PerlProcTimes,
    PerlProcWait,
    PerlProcWaitpid,
    PerlProcSignal,
    PerlProcFork,
    PerlProcGetpid,
    PerlProcDynaLoader,
    PerlProcGetOSError,
    PerlProcDoCmd,
    PerlProcSpawn,
    PerlProcSpawnvp,
    PerlProcASpawn,
};


/*
 * CPerlHost
 */

CPerlHost::CPerlHost(void)
{
    m_pvDir = new VDir();
    m_pVMem = new VMem();
    m_pVMemShared = new VMem();
    m_pVMemParse =  new VMem();

    m_pvDir->Init(NULL, m_pVMem);

    m_dwEnvCount = 0;
    m_lppEnvList = NULL;

    CopyMemory(&m_hostperlMem, &perlMem, sizeof(perlMem));
    CopyMemory(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
    CopyMemory(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
    CopyMemory(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
    CopyMemory(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
    CopyMemory(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
    CopyMemory(&m_hostperlDir, &perlDir, sizeof(perlDir));
    CopyMemory(&m_hostperlSock, &perlSock, sizeof(perlSock));
    CopyMemory(&m_hostperlProc, &perlProc, sizeof(perlProc));

    m_pHostperlMem	    = &m_hostperlMem;
    m_pHostperlMemShared    = &m_hostperlMemShared;
    m_pHostperlMemParse	    = &m_hostperlMemParse;
    m_pHostperlEnv	    = &m_hostperlEnv;
    m_pHostperlStdIO	    = &m_hostperlStdIO;
    m_pHostperlLIO	    = &m_hostperlLIO;
    m_pHostperlDir	    = &m_hostperlDir;
    m_pHostperlSock	    = &m_hostperlSock;
    m_pHostperlProc	    = &m_hostperlProc;
}

#define SETUPEXCHANGE(xptr, iptr, table) \
    STMT_START {				\
	if (xptr) {				\
	    iptr = *xptr;			\
	    *xptr = &table;			\
	}					\
	else {					\
	    iptr = &table;			\
	}					\
    } STMT_END

CPerlHost::CPerlHost(struct IPerlMem** ppMem, struct IPerlMem** ppMemShared,
		 struct IPerlMem** ppMemParse, struct IPerlEnv** ppEnv,
		 struct IPerlStdIO** ppStdIO, struct IPerlLIO** ppLIO,
		 struct IPerlDir** ppDir, struct IPerlSock** ppSock,
		 struct IPerlProc** ppProc)
{
    m_pvDir = new VDir(0);
    m_pVMem = new VMem();
    m_pVMemShared = new VMem();
    m_pVMemParse =  new VMem();

    m_pvDir->Init(NULL, m_pVMem);

    m_dwEnvCount = 0;
    m_lppEnvList = NULL;

    CopyMemory(&m_hostperlMem, &perlMem, sizeof(perlMem));
    CopyMemory(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
    CopyMemory(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
    CopyMemory(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
    CopyMemory(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
    CopyMemory(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
    CopyMemory(&m_hostperlDir, &perlDir, sizeof(perlDir));
    CopyMemory(&m_hostperlSock, &perlSock, sizeof(perlSock));
    CopyMemory(&m_hostperlProc, &perlProc, sizeof(perlProc));

    SETUPEXCHANGE(ppMem,	m_pHostperlMem,		m_hostperlMem);
    SETUPEXCHANGE(ppMemShared,	m_pHostperlMemShared,	m_hostperlMemShared);
    SETUPEXCHANGE(ppMemParse,	m_pHostperlMemParse,	m_hostperlMemParse);
    SETUPEXCHANGE(ppEnv,	m_pHostperlEnv,		m_hostperlEnv);
    SETUPEXCHANGE(ppStdIO,	m_pHostperlStdIO,	m_hostperlStdIO);
    SETUPEXCHANGE(ppLIO,	m_pHostperlLIO,		m_hostperlLIO);
    SETUPEXCHANGE(ppDir,	m_pHostperlDir,		m_hostperlDir);
    SETUPEXCHANGE(ppSock,	m_pHostperlSock,	m_hostperlSock);
    SETUPEXCHANGE(ppProc,	m_pHostperlProc,	m_hostperlProc);
}
#undef SETUPEXCHANGE

CPerlHost::CPerlHost(CPerlHost& host)
{
    m_pVMem = new VMem();
    m_pVMemShared = host.GetMemShared();
    m_pVMemParse =  host.GetMemParse();

    /* duplicate directory info */
    m_pvDir = new VDir(0);
    m_pvDir->Init(host.GetDir(), m_pVMem);

    CopyMemory(&m_hostperlMem, &perlMem, sizeof(perlMem));
    CopyMemory(&m_hostperlMemShared, &perlMemShared, sizeof(perlMemShared));
    CopyMemory(&m_hostperlMemParse, &perlMemParse, sizeof(perlMemParse));
    CopyMemory(&m_hostperlEnv, &perlEnv, sizeof(perlEnv));
    CopyMemory(&m_hostperlStdIO, &perlStdIO, sizeof(perlStdIO));
    CopyMemory(&m_hostperlLIO, &perlLIO, sizeof(perlLIO));
    CopyMemory(&m_hostperlDir, &perlDir, sizeof(perlDir));
    CopyMemory(&m_hostperlSock, &perlSock, sizeof(perlSock));
    CopyMemory(&m_hostperlProc, &perlProc, sizeof(perlProc));
    m_pHostperlMem	    = &m_hostperlMem;
    m_pHostperlMemShared    = &m_hostperlMemShared;
    m_pHostperlMemParse	    = &m_hostperlMemParse;
    m_pHostperlEnv	    = &m_hostperlEnv;
    m_pHostperlStdIO	    = &m_hostperlStdIO;
    m_pHostperlLIO	    = &m_hostperlLIO;
    m_pHostperlDir	    = &m_hostperlDir;
    m_pHostperlSock	    = &m_hostperlSock;
    m_pHostperlProc	    = &m_hostperlProc;

    m_dwEnvCount = 0;
    m_lppEnvList = NULL;

    /* duplicate environment info */
    LPSTR lpPtr;
    DWORD dwIndex = 0;
    while(lpPtr = host.GetIndex(dwIndex))
	Add(lpPtr);
}

CPerlHost::~CPerlHost(void)
{
//  Reset();
    delete m_pvDir;
    m_pVMemParse->Release();
    m_pVMemShared->Release();
    m_pVMem->Release();
}

LPSTR
CPerlHost::Find(LPCSTR lpStr)
{
    LPSTR lpPtr;
    LPSTR* lppPtr = Lookup(lpStr);
    if(lppPtr != NULL) {
	for(lpPtr = *lppPtr; *lpPtr != '\0' && *lpPtr != '='; ++lpPtr)
	    ;

	if(*lpPtr == '=')
	    ++lpPtr;

	return lpPtr;
    }
    return NULL;
}

int
lookup(const void *arg1, const void *arg2)
{   // Compare strings
    char*ptr1, *ptr2;
    char c1,c2;

    ptr1 = *(char**)arg1;
    ptr2 = *(char**)arg2;
    for(;;) {
	c1 = *ptr1++;
	c2 = *ptr2++;
	if(c1 == '\0' || c1 == '=') {
	    if(c2 == '\0' || c2 == '=')
		break;

	    return -1; // string 1 < string 2
	}
	else if(c2 == '\0' || c2 == '=')
	    return 1; // string 1 > string 2
	else if(c1 != c2) {
	    c1 = toupper(c1);
	    c2 = toupper(c2);
	    if(c1 != c2) {
		if(c1 < c2)
		    return -1; // string 1 < string 2

		return 1; // string 1 > string 2
	    }
	}
    }
    return 0;
}

LPSTR*
CPerlHost::Lookup(LPCSTR lpStr)
{
    return (LPSTR*)bsearch(&lpStr, m_lppEnvList, m_dwEnvCount, sizeof(LPSTR), lookup);
}

int
compare(const void *arg1, const void *arg2)
{   // Compare strings
    char*ptr1, *ptr2;
    char c1,c2;

    ptr1 = *(char**)arg1;
    ptr2 = *(char**)arg2;
    for(;;) {
	c1 = *ptr1++;
	c2 = *ptr2++;
	if(c1 == '\0' || c1 == '=') {
	    if(c1 == c2)
		break;

	    return -1; // string 1 < string 2
	}
	else if(c2 == '\0' || c2 == '=')
	    return 1; // string 1 > string 2
	else if(c1 != c2) {
	    c1 = toupper(c1);
	    c2 = toupper(c2);
	    if(c1 != c2) {
		if(c1 < c2)
		    return -1; // string 1 < string 2
	    
		return 1; // string 1 > string 2
	    }
	}
    }
    return 0;
}

void
CPerlHost::Add(LPCSTR lpStr)
{
    dTHXo;
    char szBuffer[1024];
    LPSTR *lpPtr;
    int index, length = strlen(lpStr)+1;

    for(index = 0; lpStr[index] != '\0' && lpStr[index] != '='; ++index)
	szBuffer[index] = lpStr[index];

    szBuffer[index] = '\0';

    // replacing ?
    lpPtr = Lookup(szBuffer);
    if(lpPtr != NULL) {
	Renew(*lpPtr, length, char);
	strcpy(*lpPtr, lpStr);
    }
    else {
	++m_dwEnvCount;
	Renew(m_lppEnvList, m_dwEnvCount, LPSTR);
	New(1, m_lppEnvList[m_dwEnvCount-1], length, char);
	if(m_lppEnvList[m_dwEnvCount-1] != NULL) {
	    strcpy(m_lppEnvList[m_dwEnvCount-1], lpStr);
	    qsort(m_lppEnvList, m_dwEnvCount, sizeof(LPSTR), compare);
	}
	else
	    --m_dwEnvCount;
    }
}

DWORD
CPerlHost::CalculateEnvironmentSpace(void)
{
    DWORD index;
    DWORD dwSize = 0;
    for(index = 0; index < m_dwEnvCount; ++index)
	dwSize += strlen(m_lppEnvList[index]) + 1;

    return dwSize;
}

void
CPerlHost::FreeLocalEnvironmentStrings(LPSTR lpStr)
{
    dTHXo;
    Safefree(lpStr);
}

char*
CPerlHost::GetChildDir(void)
{
    dTHXo;
    int length;
    char* ptr;
    New(0, ptr, MAX_PATH+1, char);
    if(ptr) {
	m_pvDir->GetCurrentDirectoryA(MAX_PATH+1, ptr);
	length = strlen(ptr);
	if (length > 3) {
	    if ((ptr[length-1] == '\\') || (ptr[length-1] == '/'))
		ptr[length-1] = 0;
	}
    }
    return ptr;
}

void
CPerlHost::FreeChildDir(char* pStr)
{
    dTHXo;
    Safefree(pStr);
}

LPSTR
CPerlHost::CreateLocalEnvironmentStrings(VDir &vDir)
{
    dTHXo;
    LPSTR lpStr, lpPtr, lpEnvPtr, lpTmp, lpLocalEnv, lpAllocPtr;
    DWORD dwSize, dwEnvIndex;
    int nLength, compVal;

    // get the process environment strings
    lpAllocPtr = lpTmp = (LPSTR)GetEnvironmentStrings();

    // step over current directory stuff
    while(*lpTmp == '=')
	lpTmp += strlen(lpTmp) + 1;

    // save the start of the environment strings
    lpEnvPtr = lpTmp;
    for(dwSize = 1; *lpTmp != '\0'; lpTmp += strlen(lpTmp) + 1) {
	// calculate the size of the environment strings
	dwSize += strlen(lpTmp) + 1;
    }

    // add the size of current directories
    dwSize += vDir.CalculateEnvironmentSpace();

    // add the additional space used by changes made to the environment
    dwSize += CalculateEnvironmentSpace();

    New(1, lpStr, dwSize, char);
    lpPtr = lpStr;
    if(lpStr != NULL) {
	// build the local environment
	lpStr = vDir.BuildEnvironmentSpace(lpStr);

	dwEnvIndex = 0;
	lpLocalEnv = GetIndex(dwEnvIndex);
	while(*lpEnvPtr != '\0') {
	    if(!lpLocalEnv) {
		// all environment overrides have been added
		// so copy string into place
		strcpy(lpStr, lpEnvPtr);
		nLength = strlen(lpEnvPtr) + 1;
		lpStr += nLength;
		lpEnvPtr += nLength;
	    }
	    else {	
		// determine which string to copy next
		compVal = compare(&lpEnvPtr, &lpLocalEnv);
		if(compVal < 0) {
		    strcpy(lpStr, lpEnvPtr);
		    nLength = strlen(lpEnvPtr) + 1;
		    lpStr += nLength;
		    lpEnvPtr += nLength;
		}
		else {
		    char *ptr = strchr(lpLocalEnv, '=');
		    if(ptr && ptr[1]) {
			strcpy(lpStr, lpLocalEnv);
			lpStr += strlen(lpLocalEnv) + 1;
		    }
		    lpLocalEnv = GetIndex(dwEnvIndex);
		    if(compVal == 0) {
			// this string was replaced
			lpEnvPtr += strlen(lpEnvPtr) + 1;
		    }
		}
	    }
	}

	while(lpLocalEnv) {
	    // still have environment overrides to add
	    // so copy the strings into place if not an override
	    char *ptr = strchr(lpLocalEnv, '=');
	    if(ptr && ptr[1]) {
		strcpy(lpStr, lpLocalEnv);
		lpStr += strlen(lpLocalEnv) + 1;
	    }
	    lpLocalEnv = GetIndex(dwEnvIndex);
	}

	// add final NULL
	*lpStr = '\0';
    }

    // release the process environment strings
    FreeEnvironmentStrings(lpAllocPtr);

    return lpPtr;
}

void
CPerlHost::Reset(void)
{
    dTHXo;
    if(m_lppEnvList != NULL) {
	for(DWORD index = 0; index < m_dwEnvCount; ++index) {
	    Safefree(m_lppEnvList[index]);
	    m_lppEnvList[index] = NULL;
	}
    }
    m_dwEnvCount = 0;
}

void
CPerlHost::Clearenv(void)
{
    dTHXo;
    char ch;
    LPSTR lpPtr, lpStr, lpEnvPtr;
    if (m_lppEnvList != NULL) {
	/* set every entry to an empty string */
	for(DWORD index = 0; index < m_dwEnvCount; ++index) {
	    char* ptr = strchr(m_lppEnvList[index], '=');
	    if(ptr) {
		*++ptr = 0;
	    }
	}
    }

    /* get the process environment strings */
    lpStr = lpEnvPtr = (LPSTR)GetEnvironmentStrings();

    /* step over current directory stuff */
    while(*lpStr == '=')
	lpStr += strlen(lpStr) + 1;

    while(*lpStr) {
	lpPtr = strchr(lpStr, '=');
	if(lpPtr) {
	    ch = *++lpPtr;
	    *lpPtr = 0;
	    Add(lpStr);
	    if (!w32_pseudo_id)
		(void)win32_putenv(lpStr);
	    *lpPtr = ch;
	}
	lpStr += strlen(lpStr) + 1;
    }

    FreeEnvironmentStrings(lpEnvPtr);
}


char*
CPerlHost::Getenv(const char *varname)
{
    dTHXo;
    if (w32_pseudo_id) {
	char *pEnv = Find(varname);
	if (pEnv && *pEnv)
	    return pEnv;
    }
    return win32_getenv(varname);
}

int
CPerlHost::Putenv(const char *envstring)
{
    dTHXo;
    Add(envstring);
    if (!w32_pseudo_id)
	return win32_putenv(envstring);

    return 0;
}

int
CPerlHost::Chdir(const char *dirname)
{
    dTHXo;
    int ret;
    if (!dirname) {
	errno = ENOENT;
	return -1;
    }
    if (USING_WIDE()) {
	WCHAR wBuffer[MAX_PATH];
	A2WHELPER(dirname, wBuffer, sizeof(wBuffer));
	ret = m_pvDir->SetCurrentDirectoryW(wBuffer);
    }
    else
	ret = m_pvDir->SetCurrentDirectoryA((char*)dirname);
    if(ret < 0) {
	errno = ENOENT;
    }
    return ret;
}

#endif /* ___PerlHost_H___ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\perlez.h ===
//
//  PerlEz.h
//
//  (c) 1998-2000 ActiveState Tool Corp. All rights reserved. 
//


#ifdef __cplusplus
extern "C" {
#endif

DECLARE_HANDLE(PERLEZHANDLE);

enum
{
    plezNoError = 0,		// success
    plezMoreSpace,		// more space need to return result
    plezError,			// returned error string in buffer
    plezErrorMoreSpace,		// more space need to return error message
    plezErrorBadFormat,		// format string is invalid
    plezException,		// function call caused an exception
    plezInvalidHandle,		// hHandle was invalid
    plezCallbackAlreadySet,	// second call to PerlEzSetMagicFunction fails
    plezInvalidParams,		// invalid parameter was passed to a routine
    plezOutOfMemory,		// cannot allocate more memory
};


PERLEZHANDLE APIENTRY PerlEzCreate(LPCSTR lpFileName, LPCSTR lpOptions);
// Description:
//	Creates a Perl interpreter. The return value is required parameter
//	for all subsequent PerlEz calls.  Multiple interpreters can be created,
//	but only one will be executing at a time.
//	Call PerlEzDelete to release this handle.
//
// Parameters:
//	lpFileName a pointer to a ASCIIZ string that is the name of a file; can be NULL 
//	lpOptions a pointer to a ASCIIZ string that are the command line options that
//	    will be provided before the script; can be NULL.
//	    This parameter is used for setting @INC or debugging. 
//
// Returns:
//	A non zero handle to a Perl interpreter if successful; zero otherwise.


PERLEZHANDLE APIENTRY PerlEzCreateOpt(LPCSTR lpFileName, LPCSTR lpOptions, LPCSTR lpScriptOpts);
// Description:
//	Creates a Perl interpreter. The return value is required parameter
//	for all subsequent PerlEz calls.  Multiple interpreters can be created,
//	but only one will be executing at a time.
//	Call PerlEzDelete to release this handle.
//
// Parameters:
//	lpFileName a pointer to a ASCIIZ string that is the name of a file; can not be NULL 
//	lpOptions a pointer to a ASCIIZ string that are the command line options that
//	    will be provided before the script; can be NULL.
//	    This parameter is used for setting @INC or debugging. 
//	lpScriptOpts a pointer to a ASCIIZ string that are the command line options to be
//	    passed to the script.
//
// Returns:
//	A non zero handle to a Perl interpreter if successful; zero otherwise.


BOOL APIENTRY PerlEzDelete(PERLEZHANDLE hHandle);
// Description:
//	Deletes a previously created Perl interpreter.
//	Releases all resources allocated by PerlEzCreate.
//
// Parameters:
//	hHandle	a handle returned by the call to PerlEzCreate
//
// Returns:
//	True if no error false otherwise.


int APIENTRY PerlEzEvalString(PERLEZHANDLE hHandle, LPCSTR lpString, LPSTR lpBuffer, DWORD dwBufSize);
// Description:
//	Evaluates the string a returns the result in lpBuffer.
//	If there is an error $! is returned in lpBuffer.
//
// Parameters:
//	hHandle	a handle returned by the call to PerlEzCreate
//	lpString a pointer to the ASCIIZ string to evaluate
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace


int APIENTRY PerlEzCall1(PERLEZHANDLE hHandle, LPCSTR lpFunction, LPSTR lpBuffer, DWORD dwBufSize, LPCSTR lpFormat, LPVOID lpVoid);
// Description:
//	Calls the function lpFunction and returns the result in the buffer lpBuffer.
//
// Parameters:
//	hHandle	a handle returned by the call to PerlEzCreate
//	lpFunction a pointer name of the function to call
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//	lpFormat a pointer to the parameter specifier; can be NULL.
//	lpVoid a pointer to a parameter will be interpreted based on lpFormat
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace
//	plezErrorBadFormat


int APIENTRY PerlEzCall2(PERLEZHANDLE hHandle, LPCSTR lpFunction, LPSTR lpBuffer, DWORD dwBufSize,
					LPCSTR lpFormat, LPVOID lpVoid1, LPVOID lpVoid2);
// Description:
//	Calls the function lpFunction and returns the result in the buffer lpBuffer.
//
// Parameters:
//	hHandle	a handle returned by the call to PerlEzCreate
//	lpFunction a pointer name of the function to call
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//	lpFormat a pointer to the parameter specifier; can be NULL.
//	lpVoid1...2 pointers to parameters that will be interpreted based on lpFormat
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace
//	plezErrorBadFormat


int APIENTRY PerlEzCall4(PERLEZHANDLE hHandle, LPCSTR lpFunction, LPSTR lpBuffer, DWORD dwBufSize,
				LPCSTR lpFormat, LPVOID lpVoid1, LPVOID lpVoid2, LPVOID lpVoid3, LPVOID lpVoid4);
// Description:
//	Calls the function lpFunction and returns the result in the buffer lpBuffer.
//
// Parameters:
//	hHandle	a handle returned by the call to PerlEzCreate
//	lpFunction a pointer name of the function to call
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//	lpFormat a pointer to the parameter specifier; can be NULL.
//	lpVoid1...4 pointers to parameters that will be interpreted based on lpFormat
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace
//	plezErrorBadFormat


int APIENTRY PerlEzCall8(PERLEZHANDLE hHandle, LPCSTR lpFunction, LPSTR lpBuffer, DWORD dwBufSize,
				LPCSTR lpFormat, LPVOID lpVoid1, LPVOID lpVoid2, LPVOID lpVoid3, LPVOID lpVoid4,
				LPVOID lpVoid5, LPVOID lpVoid6, LPVOID lpVoid7, LPVOID lpVoid8);
// Description:
//	Calls the function lpFunction and returns the result in the buffer lpBuffer.
//
// Parameters:
//	hHandle	a handle returned by the call to PerlEzCreate
//	lpFunction a pointer name of the function to call
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//	lpFormat a pointer to the parameter specifier; can be NULL.
//	lpVoid1...8 pointers to parameters that will be interpreted based on lpFormat
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace
//	plezErrorBadFormat


int APIENTRY PerlEzCall(PERLEZHANDLE hHandle, LPCSTR lpFunction, LPSTR lpBuffer, DWORD dwBufSize, LPCSTR lpFormat, ...);
// Description:
//	Calls the function lpFunction and returns the result in the buffer lpBuffer.
//
// Parameters:
//	hHandle a handle returned by the call to PerlEzCreate
//	lpFunction a pointer name of the function to call
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//	lpFormat a pointer to the parameter specifier; can be NULL.
//	... parameters to be interpreted based on lpFormat
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace
//	plezErrorBadFormat


int APIENTRY PerlEzCallContext(PERLEZHANDLE hHandle, LPCSTR lpFunction, LPVOID lpContextInfo,
						LPSTR lpBuffer, DWORD dwBufSize, LPCSTR lpFormat, ...);
// Description:
//	Calls the function lpFunction and returns the result in the buffer lpBuffer.
//
// Parameters:
//	hHandle a handle returned by the call to PerlEzCreate
//	lpFunction a pointer name of the function to call
//	lpContextInfo context info for magic fetch and store functions
//	lpBuffer a pointer to the buffer where the result will be placed
//	dwBufSize the size in bytes of the space where lpBuffer points
//	lpFormat a pointer to the parameter specifier; can be NULL.
//	... parameters to be interpreted based on lpFormat
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace
//	plezErrorBadFormat


typedef LPCSTR (*LPFETCHVALUEFUNCTION)(LPVOID, LPCSTR);
typedef LPCSTR (*LPSTOREVALUEFUNCTION)(LPVOID, LPCSTR,LPCSTR);

int APIENTRY PerlEzSetMagicScalarFunctions(PERLEZHANDLE hHandle, LPFETCHVALUEFUNCTION lpfFetch, LPSTOREVALUEFUNCTION lpfStore);
// Description:
//	Sets the call back function pointers for magic scalar variables.
//
// Parameters:
//	hHandle a handle returned by the call to PerlEzCreate
//	lpfFetch a pointer to the call back function for fetching a string
//	    if lpfFetch is NULL, then the scalar is write only
//	lpfStore a pointer to the call back function for storinging a string
//	    if lpfStore is NULL, then the scalar is read only
//
//	if lpfFetch and lpfStore are both NULL, then it is an error
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezCallbackAlreadySet
//	plezInvalidParams


int APIENTRY PerlEzSetMagicScalarName(PERLEZHANDLE hHandle, LPCSTR pVariableName);
// Description:
//	Creates the variable if it does not exists and sets it to be tied to
//	    the call back function pointer for magic variables.
//
// Parameters:
//	hHandle a handle returned by the call to PerlEzCreate
//	pVariableName a pointer to the name of the variable
//
// Returns:
//	A zero if no error; otherwise error code.
//
// Possible Error returns
//	plezException
//	plezInvalidHandle
//	plezErrorMoreSpace

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\pp.h ===
/*    pp.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifdef USE_THREADS
#define ARGS thr
#define dARGS struct perl_thread *thr;
#else
#define ARGS
#define dARGS
#endif /* USE_THREADS */

#define PP(s) OP * Perl_##s(pTHX)

/*
=for apidoc AmU||SP
Stack pointer.  This is usually handled by C<xsubpp>.  See C<dSP> and
C<SPAGAIN>.

=for apidoc AmU||MARK
Stack marker variable for the XSUB.  See C<dMARK>.

=for apidoc Ams||PUSHMARK
Opening bracket for arguments on a callback.  See C<PUTBACK> and
L<perlcall>.

=for apidoc Ams||dSP
Declares a local copy of perl's stack pointer for the XSUB, available via
the C<SP> macro.  See C<SP>.

=for apidoc Ams||dMARK
Declare a stack marker variable, C<mark>, for the XSUB.  See C<MARK> and
C<dORIGMARK>.

=for apidoc Ams||dORIGMARK
Saves the original stack mark for the XSUB.  See C<ORIGMARK>.

=for apidoc AmU||ORIGMARK
The original stack mark for the XSUB.  See C<dORIGMARK>.

=for apidoc Ams||SPAGAIN
Refetch the stack pointer.  Used after a callback.  See L<perlcall>.

=cut
*/

#undef SP /* Solaris 2.7 i386 has this in /usr/include/sys/reg.h */
#define SP sp
#define MARK mark
#define TARG targ

#define PUSHMARK(p) if (++PL_markstack_ptr == PL_markstack_max)	\
			markstack_grow();			\
		    *PL_markstack_ptr = (p) - PL_stack_base

#define TOPMARK		(*PL_markstack_ptr)
#define POPMARK		(*PL_markstack_ptr--)

#define dSP		register SV **sp = PL_stack_sp
#define djSP		dSP
#define dMARK		register SV **mark = PL_stack_base + POPMARK
#define dORIGMARK	I32 origmark = mark - PL_stack_base
#define SETORIGMARK	origmark = mark - PL_stack_base
#define ORIGMARK	(PL_stack_base + origmark)

#define SPAGAIN		sp = PL_stack_sp
#define MSPAGAIN	sp = PL_stack_sp; mark = ORIGMARK

#define GETTARGETSTACKED targ = (PL_op->op_flags & OPf_STACKED ? POPs : PAD_SV(PL_op->op_targ))
#define dTARGETSTACKED SV * GETTARGETSTACKED

#define GETTARGET targ = PAD_SV(PL_op->op_targ)
#define dTARGET SV * GETTARGET

#define GETATARGET targ = (PL_op->op_flags & OPf_STACKED ? sp[-1] : PAD_SV(PL_op->op_targ))
#define dATARGET SV * GETATARGET

#define dTARG SV *targ

#define NORMAL PL_op->op_next
#define DIE return Perl_die

/*
=for apidoc Ams||PUTBACK
Closing bracket for XSUB arguments.  This is usually handled by C<xsubpp>.
See C<PUSHMARK> and L<perlcall> for other uses.

=for apidoc Amn|SV*|POPs
Pops an SV off the stack.

=for apidoc Amn|char*|POPp
Pops a string off the stack.

=for apidoc Amn|NV|POPn
Pops a double off the stack.

=for apidoc Amn|IV|POPi
Pops an integer off the stack.

=for apidoc Amn|long|POPl
Pops a long off the stack.

=cut
*/

#define PUTBACK		PL_stack_sp = sp
#define RETURN		return PUTBACK, NORMAL
#define RETURNOP(o)	return PUTBACK, o
#define RETURNX(x)	return x, PUTBACK, NORMAL

#define POPs		(*sp--)
#define POPp		(SvPVx(POPs, PL_na))		/* deprecated */
#define POPpx		(SvPVx(POPs, n_a))
#define POPn		(SvNVx(POPs))
#define POPi		((IV)SvIVx(POPs))
#define POPu		((UV)SvUVx(POPs))
#define POPl		((long)SvIVx(POPs))
#define POPul		((unsigned long)SvIVx(POPs))
#ifdef HAS_QUAD
#define POPq		((Quad_t)SvIVx(POPs))
#define POPuq		((Uquad_t)SvUVx(POPs))
#endif

#define TOPs		(*sp)
#define TOPm1s		(*(sp-1))
#define TOPp1s		(*(sp+1))
#define TOPp		(SvPV(TOPs, PL_na))		/* deprecated */
#define TOPpx		(SvPV(TOPs, n_a))
#define TOPn		(SvNV(TOPs))
#define TOPi		((IV)SvIV(TOPs))
#define TOPu		((UV)SvUV(TOPs))
#define TOPl		((long)SvIV(TOPs))
#define TOPul		((unsigned long)SvUV(TOPs))
#ifdef HAS_QUAD
#define TOPq		((Quad_t)SvIV(TOPs))
#define TOPuq		((Uquad_t)SvUV(TOPs))
#endif

/* Go to some pains in the rare event that we must extend the stack. */

/*
=for apidoc Am|void|EXTEND|SP|int nitems
Used to extend the argument stack for an XSUB's return values. Once
used, guarantees that there is room for at least C<nitems> to be pushed
onto the stack.

=for apidoc Am|void|PUSHs|SV* sv
Push an SV onto the stack.  The stack must have room for this element.
Does not handle 'set' magic.  See C<XPUSHs>.

=for apidoc Am|void|PUSHp|char* str|STRLEN len
Push a string onto the stack.  The stack must have room for this element.
The C<len> indicates the length of the string.  Handles 'set' magic.  See
C<XPUSHp>.

=for apidoc Am|void|PUSHn|NV nv
Push a double onto the stack.  The stack must have room for this element.
Handles 'set' magic.  See C<XPUSHn>.

=for apidoc Am|void|PUSHi|IV iv
Push an integer onto the stack.  The stack must have room for this element.
Handles 'set' magic.  See C<XPUSHi>.

=for apidoc Am|void|PUSHu|UV uv
Push an unsigned integer onto the stack.  The stack must have room for this
element.  See C<XPUSHu>.

=for apidoc Am|void|XPUSHs|SV* sv
Push an SV onto the stack, extending the stack if necessary.  Does not
handle 'set' magic.  See C<PUSHs>.

=for apidoc Am|void|XPUSHp|char* str|STRLEN len
Push a string onto the stack, extending the stack if necessary.  The C<len>
indicates the length of the string.  Handles 'set' magic.  See
C<PUSHp>.

=for apidoc Am|void|XPUSHn|NV nv
Push a double onto the stack, extending the stack if necessary.  Handles
'set' magic.  See C<PUSHn>.

=for apidoc Am|void|XPUSHi|IV iv
Push an integer onto the stack, extending the stack if necessary.  Handles
'set' magic. See C<PUSHi>.

=for apidoc Am|void|XPUSHu|UV uv
Push an unsigned integer onto the stack, extending the stack if necessary.
See C<PUSHu>.

=cut
*/

#define EXTEND(p,n)	STMT_START { if (PL_stack_max - p < (n)) {		\
			    sp = stack_grow(sp,p, (int) (n));		\
			} } STMT_END

/* Same thing, but update mark register too. */
#define MEXTEND(p,n)	STMT_START {if (PL_stack_max - p < (n)) {		\
			    int markoff = mark - PL_stack_base;		\
			    sp = stack_grow(sp,p,(int) (n));		\
			    mark = PL_stack_base + markoff;		\
			} } STMT_END

#define PUSHs(s)	(*++sp = (s))
#define PUSHTARG	STMT_START { SvSETMAGIC(TARG); PUSHs(TARG); } STMT_END
#define PUSHp(p,l)	STMT_START { sv_setpvn(TARG, (p), (l)); PUSHTARG; } STMT_END
#define PUSHn(n)	STMT_START { sv_setnv(TARG, (NV)(n)); PUSHTARG; } STMT_END
#define PUSHi(i)	STMT_START { sv_setiv(TARG, (IV)(i)); PUSHTARG; } STMT_END
#define PUSHu(u)	STMT_START { sv_setuv(TARG, (UV)(u)); PUSHTARG; } STMT_END

#define XPUSHs(s)	STMT_START { EXTEND(sp,1); (*++sp = (s)); } STMT_END
#define XPUSHTARG	STMT_START { SvSETMAGIC(TARG); XPUSHs(TARG); } STMT_END
#define XPUSHp(p,l)	STMT_START { sv_setpvn(TARG, (p), (l)); XPUSHTARG; } STMT_END
#define XPUSHn(n)	STMT_START { sv_setnv(TARG, (NV)(n)); XPUSHTARG; } STMT_END
#define XPUSHi(i)	STMT_START { sv_setiv(TARG, (IV)(i)); XPUSHTARG; } STMT_END
#define XPUSHu(u)	STMT_START { sv_setuv(TARG, (UV)(u)); XPUSHTARG; } STMT_END
#define XPUSHundef	STMT_START { SvOK_off(TARG); XPUSHs(TARG); } STMT_END

#define SETs(s)		(*sp = s)
#define SETTARG		STMT_START { SvSETMAGIC(TARG); SETs(TARG); } STMT_END
#define SETp(p,l)	STMT_START { sv_setpvn(TARG, (p), (l)); SETTARG; } STMT_END
#define SETn(n)		STMT_START { sv_setnv(TARG, (NV)(n)); SETTARG; } STMT_END
#define SETi(i)		STMT_START { sv_setiv(TARG, (IV)(i)); SETTARG; } STMT_END
#define SETu(u)		STMT_START { sv_setuv(TARG, (UV)(u)); SETTARG; } STMT_END

#define dTOPss		SV *sv = TOPs
#define dPOPss		SV *sv = POPs
#define dTOPnv		NV value = TOPn
#define dPOPnv		NV value = POPn
#define dTOPiv		IV value = TOPi
#define dPOPiv		IV value = POPi
#define dTOPuv		UV value = TOPu
#define dPOPuv		UV value = POPu
#ifdef HAS_QUAD
#define dTOPqv		Quad_t value = TOPu
#define dPOPqv		Quad_t value = POPu
#define dTOPuqv		Uquad_t value = TOPuq
#define dPOPuqv		Uquad_t value = POPuq
#endif

#define dPOPXssrl(X)	SV *right = POPs; SV *left = CAT2(X,s)
#define dPOPXnnrl(X)	NV right = POPn; NV left = CAT2(X,n)
#define dPOPXiirl(X)	IV right = POPi; IV left = CAT2(X,i)

#define USE_LEFT(sv) \
	(SvOK(sv) || SvGMAGICAL(sv) || !(PL_op->op_flags & OPf_STACKED))
#define dPOPXnnrl_ul(X)	\
    NV right = POPn;				\
    SV *leftsv = CAT2(X,s);				\
    NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0
#define dPOPXiirl_ul(X) \
    IV right = POPi;					\
    SV *leftsv = CAT2(X,s);				\
    IV left = USE_LEFT(leftsv) ? SvIV(leftsv) : 0

#define dPOPPOPssrl	dPOPXssrl(POP)
#define dPOPPOPnnrl	dPOPXnnrl(POP)
#define dPOPPOPnnrl_ul	dPOPXnnrl_ul(POP)
#define dPOPPOPiirl	dPOPXiirl(POP)
#define dPOPPOPiirl_ul	dPOPXiirl_ul(POP)

#define dPOPTOPssrl	dPOPXssrl(TOP)
#define dPOPTOPnnrl	dPOPXnnrl(TOP)
#define dPOPTOPnnrl_ul	dPOPXnnrl_ul(TOP)
#define dPOPTOPiirl	dPOPXiirl(TOP)
#define dPOPTOPiirl_ul	dPOPXiirl_ul(TOP)

#define RETPUSHYES	RETURNX(PUSHs(&PL_sv_yes))
#define RETPUSHNO	RETURNX(PUSHs(&PL_sv_no))
#define RETPUSHUNDEF	RETURNX(PUSHs(&PL_sv_undef))

#define RETSETYES	RETURNX(SETs(&PL_sv_yes))
#define RETSETNO	RETURNX(SETs(&PL_sv_no))
#define RETSETUNDEF	RETURNX(SETs(&PL_sv_undef))

#define ARGTARG		PL_op->op_targ

    /* See OPpTARGET_MY: */
#define MAXARG		(PL_op->op_private & 15)

#define SWITCHSTACK(f,t) \
    STMT_START {							\
	AvFILLp(f) = sp - PL_stack_base;				\
	PL_stack_base = AvARRAY(t);					\
	PL_stack_max = PL_stack_base + AvMAX(t);			\
	sp = PL_stack_sp = PL_stack_base + AvFILLp(t);			\
	PL_curstack = t;						\
    } STMT_END

#define EXTEND_MORTAL(n) \
    STMT_START {							\
	if (PL_tmps_ix + (n) >= PL_tmps_max)				\
	    tmps_grow(n);						\
    } STMT_END

#define AMGf_noright	1
#define AMGf_noleft	2
#define AMGf_assign	4
#define AMGf_unary	8

#define tryAMAGICbinW(meth,assign,set) STMT_START { \
          if (PL_amagic_generation) { \
	    SV* tmpsv; \
	    SV* right= *(sp); SV* left= *(sp-1);\
	    if ((SvAMAGIC(left)||SvAMAGIC(right))&&\
		(tmpsv=amagic_call(left, \
				   right, \
				   CAT2(meth,_amg), \
				   (assign)? AMGf_assign: 0))) {\
	       SPAGAIN;	\
	       (void)POPs; set(tmpsv); RETURN; } \
	  } \
	} STMT_END

#define tryAMAGICbin(meth,assign) tryAMAGICbinW(meth,assign,SETsv)
#define tryAMAGICbinSET(meth,assign) tryAMAGICbinW(meth,assign,SETs)

#define AMG_CALLun(sv,meth) amagic_call(sv,&PL_sv_undef,  \
					CAT2(meth,_amg),AMGf_noright | AMGf_unary)
#define AMG_CALLbinL(left,right,meth) \
            amagic_call(left,right,CAT2(meth,_amg),AMGf_noright)

#define tryAMAGICunW(meth,set,shift,ret) STMT_START { \
          if (PL_amagic_generation) { \
	    SV* tmpsv; \
	    SV* arg= sp[shift]; \
	  am_again: \
	    if ((SvAMAGIC(arg))&&\
		(tmpsv=AMG_CALLun(arg,meth))) {\
	       SPAGAIN; if (shift) sp += shift; \
	       set(tmpsv); ret; } \
	  } \
	} STMT_END

#define FORCE_SETs(sv) STMT_START { sv_setsv(TARG, (sv)); SETTARG; } STMT_END

#define tryAMAGICun(meth)	tryAMAGICunW(meth,SETsvUN,0,RETURN)
#define tryAMAGICunSET(meth)	tryAMAGICunW(meth,SETs,0,RETURN)
#define tryAMAGICunTARGET(meth, shift)					\
	{ dSP; sp--; 	/* get TARGET from below PL_stack_sp */		\
	    { dTARGETSTACKED; 						\
		{ dSP; tryAMAGICunW(meth,FORCE_SETs,shift,RETURN);}}}

#define setAGAIN(ref) sv = ref;							\
  if (!SvROK(ref))								\
      Perl_croak(aTHX_ "Overloaded dereference did not return a reference");	\
  if (ref != arg && SvRV(ref) != SvRV(arg)) {					\
      arg = ref;								\
      goto am_again;								\
  }

#define tryAMAGICunDEREF(meth) tryAMAGICunW(meth,setAGAIN,0,(void)0)

#define opASSIGN (PL_op->op_flags & OPf_STACKED)
#define SETsv(sv)	STMT_START {					\
		if (opASSIGN || (SvFLAGS(TARG) & SVs_PADMY))		\
		   { sv_setsv(TARG, (sv)); SETTARG; }			\
		else SETs(sv); } STMT_END

#define SETsvUN(sv)	STMT_START {					\
		if (SvFLAGS(TARG) & SVs_PADMY)		\
		   { sv_setsv(TARG, (sv)); SETTARG; }			\
		else SETs(sv); } STMT_END

/* newSVsv does not behave as advertised, so we copy missing
 * information by hand */

/* SV* ref causes confusion with the member variable
   changed SV* ref to SV* tmpRef */
#define RvDEEPCP(rv) STMT_START { SV* tmpRef=SvRV(rv);      \
  if (SvREFCNT(tmpRef)>1) {                 \
    SvREFCNT_dec(tmpRef);                   \
    SvRV(rv)=AMG_CALLun(rv,copy);        \
  } } STMT_END

/*
=for apidoc mU||LVRET
True if this op will be the return value of an lvalue subroutine

=cut */
#define LVRET ((PL_op->op_private & OPpMAYBE_LVSUB) && is_lvalue_sub())
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\pp_proto.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!! 
   This file is built by opcode.pl from its data.  Any changes made here
   will be lost!
*/

PERL_CKDEF(Perl_ck_anoncode)
PERL_CKDEF(Perl_ck_bitop)
PERL_CKDEF(Perl_ck_concat)
PERL_CKDEF(Perl_ck_defined)
PERL_CKDEF(Perl_ck_delete)
PERL_CKDEF(Perl_ck_eof)
PERL_CKDEF(Perl_ck_eval)
PERL_CKDEF(Perl_ck_exec)
PERL_CKDEF(Perl_ck_exists)
PERL_CKDEF(Perl_ck_exit)
PERL_CKDEF(Perl_ck_ftst)
PERL_CKDEF(Perl_ck_fun)
PERL_CKDEF(Perl_ck_glob)
PERL_CKDEF(Perl_ck_grep)
PERL_CKDEF(Perl_ck_index)
PERL_CKDEF(Perl_ck_join)
PERL_CKDEF(Perl_ck_lengthconst)
PERL_CKDEF(Perl_ck_lfun)
PERL_CKDEF(Perl_ck_listiob)
PERL_CKDEF(Perl_ck_match)
PERL_CKDEF(Perl_ck_method)
PERL_CKDEF(Perl_ck_null)
PERL_CKDEF(Perl_ck_open)
PERL_CKDEF(Perl_ck_repeat)
PERL_CKDEF(Perl_ck_require)
PERL_CKDEF(Perl_ck_return)
PERL_CKDEF(Perl_ck_rfun)
PERL_CKDEF(Perl_ck_rvconst)
PERL_CKDEF(Perl_ck_sassign)
PERL_CKDEF(Perl_ck_select)
PERL_CKDEF(Perl_ck_shift)
PERL_CKDEF(Perl_ck_sort)
PERL_CKDEF(Perl_ck_spair)
PERL_CKDEF(Perl_ck_split)
PERL_CKDEF(Perl_ck_subr)
PERL_CKDEF(Perl_ck_substr)
PERL_CKDEF(Perl_ck_svconst)
PERL_CKDEF(Perl_ck_trunc)


PERL_PPDEF(Perl_pp_null)
PERL_PPDEF(Perl_pp_stub)
PERL_PPDEF(Perl_pp_scalar)
PERL_PPDEF(Perl_pp_pushmark)
PERL_PPDEF(Perl_pp_wantarray)
PERL_PPDEF(Perl_pp_const)
PERL_PPDEF(Perl_pp_gvsv)
PERL_PPDEF(Perl_pp_gv)
PERL_PPDEF(Perl_pp_gelem)
PERL_PPDEF(Perl_pp_padsv)
PERL_PPDEF(Perl_pp_padav)
PERL_PPDEF(Perl_pp_padhv)
PERL_PPDEF(Perl_pp_padany)
PERL_PPDEF(Perl_pp_pushre)
PERL_PPDEF(Perl_pp_rv2gv)
PERL_PPDEF(Perl_pp_rv2sv)
PERL_PPDEF(Perl_pp_av2arylen)
PERL_PPDEF(Perl_pp_rv2cv)
PERL_PPDEF(Perl_pp_anoncode)
PERL_PPDEF(Perl_pp_prototype)
PERL_PPDEF(Perl_pp_refgen)
PERL_PPDEF(Perl_pp_srefgen)
PERL_PPDEF(Perl_pp_ref)
PERL_PPDEF(Perl_pp_bless)
PERL_PPDEF(Perl_pp_backtick)
PERL_PPDEF(Perl_pp_glob)
PERL_PPDEF(Perl_pp_readline)
PERL_PPDEF(Perl_pp_rcatline)
PERL_PPDEF(Perl_pp_regcmaybe)
PERL_PPDEF(Perl_pp_regcreset)
PERL_PPDEF(Perl_pp_regcomp)
PERL_PPDEF(Perl_pp_match)
PERL_PPDEF(Perl_pp_qr)
PERL_PPDEF(Perl_pp_subst)
PERL_PPDEF(Perl_pp_substcont)
PERL_PPDEF(Perl_pp_trans)
PERL_PPDEF(Perl_pp_sassign)
PERL_PPDEF(Perl_pp_aassign)
PERL_PPDEF(Perl_pp_chop)
PERL_PPDEF(Perl_pp_schop)
PERL_PPDEF(Perl_pp_chomp)
PERL_PPDEF(Perl_pp_schomp)
PERL_PPDEF(Perl_pp_defined)
PERL_PPDEF(Perl_pp_undef)
PERL_PPDEF(Perl_pp_study)
PERL_PPDEF(Perl_pp_pos)
PERL_PPDEF(Perl_pp_preinc)
PERL_PPDEF(Perl_pp_predec)
PERL_PPDEF(Perl_pp_postinc)
PERL_PPDEF(Perl_pp_postdec)
PERL_PPDEF(Perl_pp_pow)
PERL_PPDEF(Perl_pp_multiply)
PERL_PPDEF(Perl_pp_i_multiply)
PERL_PPDEF(Perl_pp_divide)
PERL_PPDEF(Perl_pp_i_divide)
PERL_PPDEF(Perl_pp_modulo)
PERL_PPDEF(Perl_pp_i_modulo)
PERL_PPDEF(Perl_pp_repeat)
PERL_PPDEF(Perl_pp_add)
PERL_PPDEF(Perl_pp_i_add)
PERL_PPDEF(Perl_pp_subtract)
PERL_PPDEF(Perl_pp_i_subtract)
PERL_PPDEF(Perl_pp_concat)
PERL_PPDEF(Perl_pp_stringify)
PERL_PPDEF(Perl_pp_left_shift)
PERL_PPDEF(Perl_pp_right_shift)
PERL_PPDEF(Perl_pp_lt)
PERL_PPDEF(Perl_pp_i_lt)
PERL_PPDEF(Perl_pp_gt)
PERL_PPDEF(Perl_pp_i_gt)
PERL_PPDEF(Perl_pp_le)
PERL_PPDEF(Perl_pp_i_le)
PERL_PPDEF(Perl_pp_ge)
PERL_PPDEF(Perl_pp_i_ge)
PERL_PPDEF(Perl_pp_eq)
PERL_PPDEF(Perl_pp_i_eq)
PERL_PPDEF(Perl_pp_ne)
PERL_PPDEF(Perl_pp_i_ne)
PERL_PPDEF(Perl_pp_ncmp)
PERL_PPDEF(Perl_pp_i_ncmp)
PERL_PPDEF(Perl_pp_slt)
PERL_PPDEF(Perl_pp_sgt)
PERL_PPDEF(Perl_pp_sle)
PERL_PPDEF(Perl_pp_sge)
PERL_PPDEF(Perl_pp_seq)
PERL_PPDEF(Perl_pp_sne)
PERL_PPDEF(Perl_pp_scmp)
PERL_PPDEF(Perl_pp_bit_and)
PERL_PPDEF(Perl_pp_bit_xor)
PERL_PPDEF(Perl_pp_bit_or)
PERL_PPDEF(Perl_pp_negate)
PERL_PPDEF(Perl_pp_i_negate)
PERL_PPDEF(Perl_pp_not)
PERL_PPDEF(Perl_pp_complement)
PERL_PPDEF(Perl_pp_atan2)
PERL_PPDEF(Perl_pp_sin)
PERL_PPDEF(Perl_pp_cos)
PERL_PPDEF(Perl_pp_rand)
PERL_PPDEF(Perl_pp_srand)
PERL_PPDEF(Perl_pp_exp)
PERL_PPDEF(Perl_pp_log)
PERL_PPDEF(Perl_pp_sqrt)
PERL_PPDEF(Perl_pp_int)
PERL_PPDEF(Perl_pp_hex)
PERL_PPDEF(Perl_pp_oct)
PERL_PPDEF(Perl_pp_abs)
PERL_PPDEF(Perl_pp_length)
PERL_PPDEF(Perl_pp_substr)
PERL_PPDEF(Perl_pp_vec)
PERL_PPDEF(Perl_pp_index)
PERL_PPDEF(Perl_pp_rindex)
PERL_PPDEF(Perl_pp_sprintf)
PERL_PPDEF(Perl_pp_formline)
PERL_PPDEF(Perl_pp_ord)
PERL_PPDEF(Perl_pp_chr)
PERL_PPDEF(Perl_pp_crypt)
PERL_PPDEF(Perl_pp_ucfirst)
PERL_PPDEF(Perl_pp_lcfirst)
PERL_PPDEF(Perl_pp_uc)
PERL_PPDEF(Perl_pp_lc)
PERL_PPDEF(Perl_pp_quotemeta)
PERL_PPDEF(Perl_pp_rv2av)
PERL_PPDEF(Perl_pp_aelemfast)
PERL_PPDEF(Perl_pp_aelem)
PERL_PPDEF(Perl_pp_aslice)
PERL_PPDEF(Perl_pp_each)
PERL_PPDEF(Perl_pp_values)
PERL_PPDEF(Perl_pp_keys)
PERL_PPDEF(Perl_pp_delete)
PERL_PPDEF(Perl_pp_exists)
PERL_PPDEF(Perl_pp_rv2hv)
PERL_PPDEF(Perl_pp_helem)
PERL_PPDEF(Perl_pp_hslice)
PERL_PPDEF(Perl_pp_unpack)
PERL_PPDEF(Perl_pp_pack)
PERL_PPDEF(Perl_pp_split)
PERL_PPDEF(Perl_pp_join)
PERL_PPDEF(Perl_pp_list)
PERL_PPDEF(Perl_pp_lslice)
PERL_PPDEF(Perl_pp_anonlist)
PERL_PPDEF(Perl_pp_anonhash)
PERL_PPDEF(Perl_pp_splice)
PERL_PPDEF(Perl_pp_push)
PERL_PPDEF(Perl_pp_pop)
PERL_PPDEF(Perl_pp_shift)
PERL_PPDEF(Perl_pp_unshift)
PERL_PPDEF(Perl_pp_sort)
PERL_PPDEF(Perl_pp_reverse)
PERL_PPDEF(Perl_pp_grepstart)
PERL_PPDEF(Perl_pp_grepwhile)
PERL_PPDEF(Perl_pp_mapstart)
PERL_PPDEF(Perl_pp_mapwhile)
PERL_PPDEF(Perl_pp_range)
PERL_PPDEF(Perl_pp_flip)
PERL_PPDEF(Perl_pp_flop)
PERL_PPDEF(Perl_pp_and)
PERL_PPDEF(Perl_pp_or)
PERL_PPDEF(Perl_pp_xor)
PERL_PPDEF(Perl_pp_cond_expr)
PERL_PPDEF(Perl_pp_andassign)
PERL_PPDEF(Perl_pp_orassign)
PERL_PPDEF(Perl_pp_method)
PERL_PPDEF(Perl_pp_entersub)
PERL_PPDEF(Perl_pp_leavesub)
PERL_PPDEF(Perl_pp_leavesublv)
PERL_PPDEF(Perl_pp_caller)
PERL_PPDEF(Perl_pp_warn)
PERL_PPDEF(Perl_pp_die)
PERL_PPDEF(Perl_pp_reset)
PERL_PPDEF(Perl_pp_lineseq)
PERL_PPDEF(Perl_pp_nextstate)
PERL_PPDEF(Perl_pp_dbstate)
PERL_PPDEF(Perl_pp_unstack)
PERL_PPDEF(Perl_pp_enter)
PERL_PPDEF(Perl_pp_leave)
PERL_PPDEF(Perl_pp_scope)
PERL_PPDEF(Perl_pp_enteriter)
PERL_PPDEF(Perl_pp_iter)
PERL_PPDEF(Perl_pp_enterloop)
PERL_PPDEF(Perl_pp_leaveloop)
PERL_PPDEF(Perl_pp_return)
PERL_PPDEF(Perl_pp_last)
PERL_PPDEF(Perl_pp_next)
PERL_PPDEF(Perl_pp_redo)
PERL_PPDEF(Perl_pp_dump)
PERL_PPDEF(Perl_pp_goto)
PERL_PPDEF(Perl_pp_exit)
PERL_PPDEF(Perl_pp_open)
PERL_PPDEF(Perl_pp_close)
PERL_PPDEF(Perl_pp_pipe_op)
PERL_PPDEF(Perl_pp_fileno)
PERL_PPDEF(Perl_pp_umask)
PERL_PPDEF(Perl_pp_binmode)
PERL_PPDEF(Perl_pp_tie)
PERL_PPDEF(Perl_pp_untie)
PERL_PPDEF(Perl_pp_tied)
PERL_PPDEF(Perl_pp_dbmopen)
PERL_PPDEF(Perl_pp_dbmclose)
PERL_PPDEF(Perl_pp_sselect)
PERL_PPDEF(Perl_pp_select)
PERL_PPDEF(Perl_pp_getc)
PERL_PPDEF(Perl_pp_read)
PERL_PPDEF(Perl_pp_enterwrite)
PERL_PPDEF(Perl_pp_leavewrite)
PERL_PPDEF(Perl_pp_prtf)
PERL_PPDEF(Perl_pp_print)
PERL_PPDEF(Perl_pp_sysopen)
PERL_PPDEF(Perl_pp_sysseek)
PERL_PPDEF(Perl_pp_sysread)
PERL_PPDEF(Perl_pp_syswrite)
PERL_PPDEF(Perl_pp_send)
PERL_PPDEF(Perl_pp_recv)
PERL_PPDEF(Perl_pp_eof)
PERL_PPDEF(Perl_pp_tell)
PERL_PPDEF(Perl_pp_seek)
PERL_PPDEF(Perl_pp_truncate)
PERL_PPDEF(Perl_pp_fcntl)
PERL_PPDEF(Perl_pp_ioctl)
PERL_PPDEF(Perl_pp_flock)
PERL_PPDEF(Perl_pp_socket)
PERL_PPDEF(Perl_pp_sockpair)
PERL_PPDEF(Perl_pp_bind)
PERL_PPDEF(Perl_pp_connect)
PERL_PPDEF(Perl_pp_listen)
PERL_PPDEF(Perl_pp_accept)
PERL_PPDEF(Perl_pp_shutdown)
PERL_PPDEF(Perl_pp_gsockopt)
PERL_PPDEF(Perl_pp_ssockopt)
PERL_PPDEF(Perl_pp_getsockname)
PERL_PPDEF(Perl_pp_getpeername)
PERL_PPDEF(Perl_pp_lstat)
PERL_PPDEF(Perl_pp_stat)
PERL_PPDEF(Perl_pp_ftrread)
PERL_PPDEF(Perl_pp_ftrwrite)
PERL_PPDEF(Perl_pp_ftrexec)
PERL_PPDEF(Perl_pp_fteread)
PERL_PPDEF(Perl_pp_ftewrite)
PERL_PPDEF(Perl_pp_fteexec)
PERL_PPDEF(Perl_pp_ftis)
PERL_PPDEF(Perl_pp_fteowned)
PERL_PPDEF(Perl_pp_ftrowned)
PERL_PPDEF(Perl_pp_ftzero)
PERL_PPDEF(Perl_pp_ftsize)
PERL_PPDEF(Perl_pp_ftmtime)
PERL_PPDEF(Perl_pp_ftatime)
PERL_PPDEF(Perl_pp_ftctime)
PERL_PPDEF(Perl_pp_ftsock)
PERL_PPDEF(Perl_pp_ftchr)
PERL_PPDEF(Perl_pp_ftblk)
PERL_PPDEF(Perl_pp_ftfile)
PERL_PPDEF(Perl_pp_ftdir)
PERL_PPDEF(Perl_pp_ftpipe)
PERL_PPDEF(Perl_pp_ftlink)
PERL_PPDEF(Perl_pp_ftsuid)
PERL_PPDEF(Perl_pp_ftsgid)
PERL_PPDEF(Perl_pp_ftsvtx)
PERL_PPDEF(Perl_pp_fttty)
PERL_PPDEF(Perl_pp_fttext)
PERL_PPDEF(Perl_pp_ftbinary)
PERL_PPDEF(Perl_pp_chdir)
PERL_PPDEF(Perl_pp_chown)
PERL_PPDEF(Perl_pp_chroot)
PERL_PPDEF(Perl_pp_unlink)
PERL_PPDEF(Perl_pp_chmod)
PERL_PPDEF(Perl_pp_utime)
PERL_PPDEF(Perl_pp_rename)
PERL_PPDEF(Perl_pp_link)
PERL_PPDEF(Perl_pp_symlink)
PERL_PPDEF(Perl_pp_readlink)
PERL_PPDEF(Perl_pp_mkdir)
PERL_PPDEF(Perl_pp_rmdir)
PERL_PPDEF(Perl_pp_open_dir)
PERL_PPDEF(Perl_pp_readdir)
PERL_PPDEF(Perl_pp_telldir)
PERL_PPDEF(Perl_pp_seekdir)
PERL_PPDEF(Perl_pp_rewinddir)
PERL_PPDEF(Perl_pp_closedir)
PERL_PPDEF(Perl_pp_fork)
PERL_PPDEF(Perl_pp_wait)
PERL_PPDEF(Perl_pp_waitpid)
PERL_PPDEF(Perl_pp_system)
PERL_PPDEF(Perl_pp_exec)
PERL_PPDEF(Perl_pp_kill)
PERL_PPDEF(Perl_pp_getppid)
PERL_PPDEF(Perl_pp_getpgrp)
PERL_PPDEF(Perl_pp_setpgrp)
PERL_PPDEF(Perl_pp_getpriority)
PERL_PPDEF(Perl_pp_setpriority)
PERL_PPDEF(Perl_pp_time)
PERL_PPDEF(Perl_pp_tms)
PERL_PPDEF(Perl_pp_localtime)
PERL_PPDEF(Perl_pp_gmtime)
PERL_PPDEF(Perl_pp_alarm)
PERL_PPDEF(Perl_pp_sleep)
PERL_PPDEF(Perl_pp_shmget)
PERL_PPDEF(Perl_pp_shmctl)
PERL_PPDEF(Perl_pp_shmread)
PERL_PPDEF(Perl_pp_shmwrite)
PERL_PPDEF(Perl_pp_msgget)
PERL_PPDEF(Perl_pp_msgctl)
PERL_PPDEF(Perl_pp_msgsnd)
PERL_PPDEF(Perl_pp_msgrcv)
PERL_PPDEF(Perl_pp_semget)
PERL_PPDEF(Perl_pp_semctl)
PERL_PPDEF(Perl_pp_semop)
PERL_PPDEF(Perl_pp_require)
PERL_PPDEF(Perl_pp_dofile)
PERL_PPDEF(Perl_pp_entereval)
PERL_PPDEF(Perl_pp_leaveeval)
PERL_PPDEF(Perl_pp_entertry)
PERL_PPDEF(Perl_pp_leavetry)
PERL_PPDEF(Perl_pp_ghbyname)
PERL_PPDEF(Perl_pp_ghbyaddr)
PERL_PPDEF(Perl_pp_ghostent)
PERL_PPDEF(Perl_pp_gnbyname)
PERL_PPDEF(Perl_pp_gnbyaddr)
PERL_PPDEF(Perl_pp_gnetent)
PERL_PPDEF(Perl_pp_gpbyname)
PERL_PPDEF(Perl_pp_gpbynumber)
PERL_PPDEF(Perl_pp_gprotoent)
PERL_PPDEF(Perl_pp_gsbyname)
PERL_PPDEF(Perl_pp_gsbyport)
PERL_PPDEF(Perl_pp_gservent)
PERL_PPDEF(Perl_pp_shostent)
PERL_PPDEF(Perl_pp_snetent)
PERL_PPDEF(Perl_pp_sprotoent)
PERL_PPDEF(Perl_pp_sservent)
PERL_PPDEF(Perl_pp_ehostent)
PERL_PPDEF(Perl_pp_enetent)
PERL_PPDEF(Perl_pp_eprotoent)
PERL_PPDEF(Perl_pp_eservent)
PERL_PPDEF(Perl_pp_gpwnam)
PERL_PPDEF(Perl_pp_gpwuid)
PERL_PPDEF(Perl_pp_gpwent)
PERL_PPDEF(Perl_pp_spwent)
PERL_PPDEF(Perl_pp_epwent)
PERL_PPDEF(Perl_pp_ggrnam)
PERL_PPDEF(Perl_pp_ggrgid)
PERL_PPDEF(Perl_pp_ggrent)
PERL_PPDEF(Perl_pp_sgrent)
PERL_PPDEF(Perl_pp_egrent)
PERL_PPDEF(Perl_pp_getlogin)
PERL_PPDEF(Perl_pp_syscall)
PERL_PPDEF(Perl_pp_lock)
PERL_PPDEF(Perl_pp_threadsv)
PERL_PPDEF(Perl_pp_setstate)
PERL_PPDEF(Perl_pp_method_named)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\proto.h ===
/*
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is autogenerated from data in embed.pl.  Edit that file
 * and run 'make regen_headers' to effect changes.
 */



START_EXTERN_C

#if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_alloc_using(struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p);
#endif
PERL_CALLCONV PerlInterpreter*	perl_alloc(void);
PERL_CALLCONV void	perl_construct(PerlInterpreter* interp);
PERL_CALLCONV void	perl_destruct(PerlInterpreter* interp);
PERL_CALLCONV void	perl_free(PerlInterpreter* interp);
PERL_CALLCONV int	perl_run(PerlInterpreter* interp);
PERL_CALLCONV int	perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env);
#if defined(USE_ITHREADS)
PERL_CALLCONV PerlInterpreter*	perl_clone(PerlInterpreter* interp, UV flags);
#  if defined(PERL_IMPLICIT_SYS)
PERL_CALLCONV PerlInterpreter*	perl_clone_using(PerlInterpreter *interp, UV flags, struct IPerlMem* m, struct IPerlMem* ms, struct IPerlMem* mp, struct IPerlEnv* e, struct IPerlStdIO* io, struct IPerlLIO* lio, struct IPerlDir* d, struct IPerlSock* s, struct IPerlProc* p);
#  endif
#endif

PERL_CALLCONV Malloc_t	Perl_malloc(MEM_SIZE nbytes);
PERL_CALLCONV Malloc_t	Perl_calloc(MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_realloc(Malloc_t where, MEM_SIZE nbytes);
PERL_CALLCONV Free_t	Perl_mfree(Malloc_t where);
#if defined(MYMALLOC)
PERL_CALLCONV MEM_SIZE	Perl_malloced_size(void *p);
#endif

PERL_CALLCONV void*	Perl_get_context(void);
PERL_CALLCONV void	Perl_set_context(void *thx);

END_EXTERN_C

/* functions with flag 'n' should come before here */
#if defined(PERL_OBJECT)
class CPerlObj {
public:
	struct interpreter interp;
	CPerlObj(IPerlMem*, IPerlMem*, IPerlMem*, IPerlEnv*, IPerlStdIO*,
	    IPerlLIO*, IPerlDir*, IPerlSock*, IPerlProc*);
	void* operator new(size_t nSize, IPerlMem *pvtbl);
#ifndef __BORLANDC__
	static void operator delete(void* pPerl, IPerlMem *pvtbl);
#endif
	int do_aspawn (void *vreally, void **vmark, void **vsp);
#endif
#if defined(PERL_OBJECT)
public:
#else
START_EXTERN_C
#endif
#  include "pp_proto.h"
PERL_CALLCONV SV*	Perl_amagic_call(pTHX_ SV* left, SV* right, int method, int dir);
PERL_CALLCONV bool	Perl_Gv_AMupdate(pTHX_ HV* stash);
PERL_CALLCONV OP*	Perl_append_elem(pTHX_ I32 optype, OP* head, OP* tail);
PERL_CALLCONV OP*	Perl_append_list(pTHX_ I32 optype, LISTOP* first, LISTOP* last);
PERL_CALLCONV I32	Perl_apply(pTHX_ I32 type, SV** mark, SV** sp);
PERL_CALLCONV void	Perl_apply_attrs_string(pTHX_ char *stashpv, CV *cv, char *attrstr, STRLEN len);
PERL_CALLCONV SV*	Perl_avhv_delete_ent(pTHX_ AV *ar, SV* keysv, I32 flags, U32 hash);
PERL_CALLCONV bool	Perl_avhv_exists_ent(pTHX_ AV *ar, SV* keysv, U32 hash);
PERL_CALLCONV SV**	Perl_avhv_fetch_ent(pTHX_ AV *ar, SV* keysv, I32 lval, U32 hash);
PERL_CALLCONV SV**	Perl_avhv_store_ent(pTHX_ AV *ar, SV* keysv, SV* val, U32 hash);
PERL_CALLCONV HE*	Perl_avhv_iternext(pTHX_ AV *ar);
PERL_CALLCONV SV*	Perl_avhv_iterval(pTHX_ AV *ar, HE* entry);
PERL_CALLCONV HV*	Perl_avhv_keys(pTHX_ AV *ar);
PERL_CALLCONV void	Perl_av_clear(pTHX_ AV* ar);
PERL_CALLCONV SV*	Perl_av_delete(pTHX_ AV* ar, I32 key, I32 flags);
PERL_CALLCONV bool	Perl_av_exists(pTHX_ AV* ar, I32 key);
PERL_CALLCONV void	Perl_av_extend(pTHX_ AV* ar, I32 key);
PERL_CALLCONV AV*	Perl_av_fake(pTHX_ I32 size, SV** svp);
PERL_CALLCONV SV**	Perl_av_fetch(pTHX_ AV* ar, I32 key, I32 lval);
PERL_CALLCONV void	Perl_av_fill(pTHX_ AV* ar, I32 fill);
PERL_CALLCONV I32	Perl_av_len(pTHX_ AV* ar);
PERL_CALLCONV AV*	Perl_av_make(pTHX_ I32 size, SV** svp);
PERL_CALLCONV SV*	Perl_av_pop(pTHX_ AV* ar);
PERL_CALLCONV void	Perl_av_push(pTHX_ AV* ar, SV* val);
PERL_CALLCONV void	Perl_av_reify(pTHX_ AV* ar);
PERL_CALLCONV SV*	Perl_av_shift(pTHX_ AV* ar);
PERL_CALLCONV SV**	Perl_av_store(pTHX_ AV* ar, I32 key, SV* val);
PERL_CALLCONV void	Perl_av_undef(pTHX_ AV* ar);
PERL_CALLCONV void	Perl_av_unshift(pTHX_ AV* ar, I32 num);
PERL_CALLCONV OP*	Perl_bind_match(pTHX_ I32 type, OP* left, OP* pat);
PERL_CALLCONV OP*	Perl_block_end(pTHX_ I32 floor, OP* seq);
PERL_CALLCONV I32	Perl_block_gimme(pTHX);
PERL_CALLCONV int	Perl_block_start(pTHX_ int full);
PERL_CALLCONV void	Perl_boot_core_UNIVERSAL(pTHX);
PERL_CALLCONV void	Perl_call_list(pTHX_ I32 oldscope, AV* av_list);
PERL_CALLCONV bool	Perl_cando(pTHX_ Mode_t mode, Uid_t effective, Stat_t* statbufp);
PERL_CALLCONV U32	Perl_cast_ulong(pTHX_ NV f);
PERL_CALLCONV I32	Perl_cast_i32(pTHX_ NV f);
PERL_CALLCONV IV	Perl_cast_iv(pTHX_ NV f);
PERL_CALLCONV UV	Perl_cast_uv(pTHX_ NV f);
#if !defined(HAS_TRUNCATE) && !defined(HAS_CHSIZE) && defined(F_FREESP)
PERL_CALLCONV I32	Perl_my_chsize(pTHX_ int fd, Off_t length);
#endif
#if defined(USE_THREADS)
PERL_CALLCONV MAGIC*	Perl_condpair_magic(pTHX_ SV *sv);
#endif
PERL_CALLCONV OP*	Perl_convert(pTHX_ I32 optype, I32 flags, OP* o);
PERL_CALLCONV void	Perl_croak(pTHX_ const char* pat, ...) __attribute__((noreturn))
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV void	Perl_vcroak(pTHX_ const char* pat, va_list* args) __attribute__((noreturn));
#if defined(PERL_IMPLICIT_CONTEXT)
PERL_CALLCONV void	Perl_croak_nocontext(const char* pat, ...) __attribute__((noreturn))
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV OP*	Perl_die_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_deb_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV char*	Perl_form_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_load_module_nocontext(U32 flags, SV* name, SV* ver, ...);
PERL_CALLCONV SV*	Perl_mess_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_warn_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_warner_nocontext(U32 err, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV SV*	Perl_newSVpvf_nocontext(const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
PERL_CALLCONV void	Perl_sv_catpvf_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV void	Perl_sv_setpvf_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV void	Perl_sv_catpvf_mg_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV void	Perl_sv_setpvf_mg_nocontext(SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV int	Perl_fprintf_nocontext(PerlIO* stream, const char* fmt, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,2,3)))
#endif
;
PERL_CALLCONV int	Perl_printf_nocontext(const char* fmt, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,1,2)))
#endif
;
#endif
PERL_CALLCONV void	Perl_cv_ckproto(pTHX_ CV* cv, GV* gv, char* p);
PERL_CALLCONV CV*	Perl_cv_clone(pTHX_ CV* proto);
PERL_CALLCONV SV*	Perl_cv_const_sv(pTHX_ CV* cv);
PERL_CALLCONV SV*	Perl_op_const_sv(pTHX_ OP* o, CV* cv);
PERL_CALLCONV void	Perl_cv_undef(pTHX_ CV* cv);
PERL_CALLCONV void	Perl_cx_dump(pTHX_ PERL_CONTEXT* cs);
PERL_CALLCONV SV*	Perl_filter_add(pTHX_ filter_t funcp, SV* datasv);
PERL_CALLCONV void	Perl_filter_del(pTHX_ filter_t funcp);
PERL_CALLCONV I32	Perl_filter_read(pTHX_ int idx, SV* buffer, int maxlen);
PERL_CALLCONV char**	Perl_get_op_descs(pTHX);
PERL_CALLCONV char**	Perl_get_op_names(pTHX);
PERL_CALLCONV char*	Perl_get_no_modify(pTHX);
PERL_CALLCONV U32*	Perl_get_opargs(pTHX);
PERL_CALLCONV PPADDR_t*	Perl_get_ppaddr(pTHX);
PERL_CALLCONV I32	Perl_cxinc(pTHX);
PERL_CALLCONV void	Perl_deb(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV void	Perl_vdeb(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_debprofdump(pTHX);
PERL_CALLCONV I32	Perl_debop(pTHX_ OP* o);
PERL_CALLCONV I32	Perl_debstack(pTHX);
PERL_CALLCONV I32	Perl_debstackptrs(pTHX);
PERL_CALLCONV char*	Perl_delimcpy(pTHX_ char* to, char* toend, char* from, char* fromend, int delim, I32* retlen);
PERL_CALLCONV void	Perl_deprecate(pTHX_ char* s);
PERL_CALLCONV OP*	Perl_die(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV OP*	Perl_vdie(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV OP*	Perl_die_where(pTHX_ char* message, STRLEN msglen);
PERL_CALLCONV void	Perl_dounwind(pTHX_ I32 cxix);
PERL_CALLCONV bool	Perl_do_aexec(pTHX_ SV* really, SV** mark, SV** sp);
PERL_CALLCONV bool	Perl_do_aexec5(pTHX_ SV* really, SV** mark, SV** sp, int fd, int flag);
PERL_CALLCONV int	Perl_do_binmode(pTHX_ PerlIO *fp, int iotype, int mode);
PERL_CALLCONV void	Perl_do_chop(pTHX_ SV* asv, SV* sv);
PERL_CALLCONV bool	Perl_do_close(pTHX_ GV* gv, bool not_implicit);
PERL_CALLCONV bool	Perl_do_eof(pTHX_ GV* gv);
PERL_CALLCONV bool	Perl_do_exec(pTHX_ char* cmd);
#if defined(WIN32)
PERL_CALLCONV int	Perl_do_aspawn(pTHX_ SV* really, SV** mark, SV** sp);
PERL_CALLCONV int	Perl_do_spawn(pTHX_ char* cmd);
PERL_CALLCONV int	Perl_do_spawn_nowait(pTHX_ char* cmd);
#endif
#if !defined(WIN32)
PERL_CALLCONV bool	Perl_do_exec3(pTHX_ char* cmd, int fd, int flag);
#endif
PERL_CALLCONV void	Perl_do_execfree(pTHX);
#if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
PERL_CALLCONV I32	Perl_do_ipcctl(pTHX_ I32 optype, SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_ipcget(pTHX_ I32 optype, SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_msgrcv(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_msgsnd(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_semop(pTHX_ SV** mark, SV** sp);
PERL_CALLCONV I32	Perl_do_shmio(pTHX_ I32 optype, SV** mark, SV** sp);
#endif
PERL_CALLCONV void	Perl_do_join(pTHX_ SV* sv, SV* del, SV** mark, SV** sp);
PERL_CALLCONV OP*	Perl_do_kv(pTHX);
PERL_CALLCONV bool	Perl_do_open(pTHX_ GV* gv, char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp);
PERL_CALLCONV bool	Perl_do_open9(pTHX_ GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num);
PERL_CALLCONV void	Perl_do_pipe(pTHX_ SV* sv, GV* rgv, GV* wgv);
PERL_CALLCONV bool	Perl_do_print(pTHX_ SV* sv, PerlIO* fp);
PERL_CALLCONV OP*	Perl_do_readline(pTHX);
PERL_CALLCONV I32	Perl_do_chomp(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_do_seek(pTHX_ GV* gv, Off_t pos, int whence);
PERL_CALLCONV void	Perl_do_sprintf(pTHX_ SV* sv, I32 len, SV** sarg);
PERL_CALLCONV Off_t	Perl_do_sysseek(pTHX_ GV* gv, Off_t pos, int whence);
PERL_CALLCONV Off_t	Perl_do_tell(pTHX_ GV* gv);
PERL_CALLCONV I32	Perl_do_trans(pTHX_ SV* sv);
PERL_CALLCONV UV	Perl_do_vecget(pTHX_ SV* sv, I32 offset, I32 size);
PERL_CALLCONV void	Perl_do_vecset(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_do_vop(pTHX_ I32 optype, SV* sv, SV* left, SV* right);
PERL_CALLCONV OP*	Perl_dofile(pTHX_ OP* term);
PERL_CALLCONV I32	Perl_dowantarray(pTHX);
PERL_CALLCONV void	Perl_dump_all(pTHX);
PERL_CALLCONV void	Perl_dump_eval(pTHX);
#if defined(DUMP_FDS)
PERL_CALLCONV void	Perl_dump_fds(pTHX_ char* s);
#endif
PERL_CALLCONV void	Perl_dump_form(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_gv_dump(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_op_dump(pTHX_ OP* arg);
PERL_CALLCONV void	Perl_pmop_dump(pTHX_ PMOP* pm);
PERL_CALLCONV void	Perl_dump_packsubs(pTHX_ HV* stash);
PERL_CALLCONV void	Perl_dump_sub(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_fbm_compile(pTHX_ SV* sv, U32 flags);
PERL_CALLCONV char*	Perl_fbm_instr(pTHX_ unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags);
PERL_CALLCONV char*	Perl_find_script(pTHX_ char *scriptname, bool dosearch, char **search_ext, I32 flags);
#if defined(USE_THREADS)
PERL_CALLCONV PADOFFSET	Perl_find_threadsv(pTHX_ const char *name);
#endif
PERL_CALLCONV OP*	Perl_force_list(pTHX_ OP* arg);
PERL_CALLCONV OP*	Perl_fold_constants(pTHX_ OP* arg);
PERL_CALLCONV char*	Perl_form(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV char*	Perl_vform(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_free_tmps(pTHX);
PERL_CALLCONV OP*	Perl_gen_constant_list(pTHX_ OP* o);
#if !defined(HAS_GETENV_LEN)
PERL_CALLCONV char*	Perl_getenv_len(pTHX_ const char* key, unsigned long *len);
#endif
PERL_CALLCONV void	Perl_gp_free(pTHX_ GV* gv);
PERL_CALLCONV GP*	Perl_gp_ref(pTHX_ GP* gp);
PERL_CALLCONV GV*	Perl_gv_AVadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_HVadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_IOadd(pTHX_ GV* gv);
PERL_CALLCONV GV*	Perl_gv_autoload4(pTHX_ HV* stash, const char* name, STRLEN len, I32 method);
PERL_CALLCONV void	Perl_gv_check(pTHX_ HV* stash);
PERL_CALLCONV void	Perl_gv_efullname(pTHX_ SV* sv, GV* gv);
PERL_CALLCONV void	Perl_gv_efullname3(pTHX_ SV* sv, GV* gv, const char* prefix);
PERL_CALLCONV void	Perl_gv_efullname4(pTHX_ SV* sv, GV* gv, const char* prefix, bool keepmain);
PERL_CALLCONV GV*	Perl_gv_fetchfile(pTHX_ const char* name);
PERL_CALLCONV GV*	Perl_gv_fetchmeth(pTHX_ HV* stash, const char* name, STRLEN len, I32 level);
PERL_CALLCONV GV*	Perl_gv_fetchmethod(pTHX_ HV* stash, const char* name);
PERL_CALLCONV GV*	Perl_gv_fetchmethod_autoload(pTHX_ HV* stash, const char* name, I32 autoload);
PERL_CALLCONV GV*	Perl_gv_fetchpv(pTHX_ const char* name, I32 add, I32 sv_type);
PERL_CALLCONV void	Perl_gv_fullname(pTHX_ SV* sv, GV* gv);
PERL_CALLCONV void	Perl_gv_fullname3(pTHX_ SV* sv, GV* gv, const char* prefix);
PERL_CALLCONV void	Perl_gv_fullname4(pTHX_ SV* sv, GV* gv, const char* prefix, bool keepmain);
PERL_CALLCONV void	Perl_gv_init(pTHX_ GV* gv, HV* stash, const char* name, STRLEN len, int multi);
PERL_CALLCONV HV*	Perl_gv_stashpv(pTHX_ const char* name, I32 create);
PERL_CALLCONV HV*	Perl_gv_stashpvn(pTHX_ const char* name, U32 namelen, I32 create);
PERL_CALLCONV HV*	Perl_gv_stashsv(pTHX_ SV* sv, I32 create);
PERL_CALLCONV void	Perl_hv_clear(pTHX_ HV* tb);
PERL_CALLCONV void	Perl_hv_delayfree_ent(pTHX_ HV* hv, HE* entry);
PERL_CALLCONV SV*	Perl_hv_delete(pTHX_ HV* tb, const char* key, U32 klen, I32 flags);
PERL_CALLCONV SV*	Perl_hv_delete_ent(pTHX_ HV* tb, SV* key, I32 flags, U32 hash);
PERL_CALLCONV bool	Perl_hv_exists(pTHX_ HV* tb, const char* key, U32 klen);
PERL_CALLCONV bool	Perl_hv_exists_ent(pTHX_ HV* tb, SV* key, U32 hash);
PERL_CALLCONV SV**	Perl_hv_fetch(pTHX_ HV* tb, const char* key, U32 klen, I32 lval);
PERL_CALLCONV HE*	Perl_hv_fetch_ent(pTHX_ HV* tb, SV* key, I32 lval, U32 hash);
PERL_CALLCONV void	Perl_hv_free_ent(pTHX_ HV* hv, HE* entry);
PERL_CALLCONV I32	Perl_hv_iterinit(pTHX_ HV* tb);
PERL_CALLCONV char*	Perl_hv_iterkey(pTHX_ HE* entry, I32* retlen);
PERL_CALLCONV SV*	Perl_hv_iterkeysv(pTHX_ HE* entry);
PERL_CALLCONV HE*	Perl_hv_iternext(pTHX_ HV* tb);
PERL_CALLCONV SV*	Perl_hv_iternextsv(pTHX_ HV* hv, char** key, I32* retlen);
PERL_CALLCONV SV*	Perl_hv_iterval(pTHX_ HV* tb, HE* entry);
PERL_CALLCONV void	Perl_hv_ksplit(pTHX_ HV* hv, IV newmax);
PERL_CALLCONV void	Perl_hv_magic(pTHX_ HV* hv, GV* gv, int how);
PERL_CALLCONV SV**	Perl_hv_store(pTHX_ HV* tb, const char* key, U32 klen, SV* val, U32 hash);
PERL_CALLCONV HE*	Perl_hv_store_ent(pTHX_ HV* tb, SV* key, SV* val, U32 hash);
PERL_CALLCONV void	Perl_hv_undef(pTHX_ HV* tb);
PERL_CALLCONV I32	Perl_ibcmp(pTHX_ const char* a, const char* b, I32 len);
PERL_CALLCONV I32	Perl_ibcmp_locale(pTHX_ const char* a, const char* b, I32 len);
PERL_CALLCONV bool	Perl_ingroup(pTHX_ Gid_t testgid, Uid_t effective);
PERL_CALLCONV void	Perl_init_debugger(pTHX);
PERL_CALLCONV void	Perl_init_stacks(pTHX);
PERL_CALLCONV U32	Perl_intro_my(pTHX);
PERL_CALLCONV char*	Perl_instr(pTHX_ const char* big, const char* little);
PERL_CALLCONV bool	Perl_io_close(pTHX_ IO* io, bool not_implicit);
PERL_CALLCONV OP*	Perl_invert(pTHX_ OP* cmd);
PERL_CALLCONV bool	Perl_is_gv_magical(pTHX_ char *name, STRLEN len, U32 flags);
PERL_CALLCONV I32	Perl_is_lvalue_sub(pTHX);
PERL_CALLCONV bool	Perl_is_uni_alnum(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnumc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_idfirst(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alpha(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_ascii(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_space(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_cntrl(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_graph(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_digit(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_upper(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_lower(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_print(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_punct(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_xdigit(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_upper(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_title(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_lower(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnum_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alnumc_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_idfirst_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_alpha_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_ascii_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_space_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_cntrl_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_graph_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_digit_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_upper_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_lower_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_print_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_punct_lc(pTHX_ U32 c);
PERL_CALLCONV bool	Perl_is_uni_xdigit_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_upper_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_title_lc(pTHX_ U32 c);
PERL_CALLCONV U32	Perl_to_uni_lower_lc(pTHX_ U32 c);
PERL_CALLCONV STRLEN	Perl_is_utf8_char(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_string(pTHX_ U8 *s, STRLEN len);
PERL_CALLCONV bool	Perl_is_utf8_alnum(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alnumc(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_idfirst(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_alpha(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_ascii(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_space(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_cntrl(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_digit(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_graph(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_upper(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_lower(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_print(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_punct(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_xdigit(pTHX_ U8 *p);
PERL_CALLCONV bool	Perl_is_utf8_mark(pTHX_ U8 *p);
PERL_CALLCONV OP*	Perl_jmaybe(pTHX_ OP* arg);
PERL_CALLCONV I32	Perl_keyword(pTHX_ char* d, I32 len);
PERL_CALLCONV void	Perl_leave_scope(pTHX_ I32 base);
PERL_CALLCONV void	Perl_lex_end(pTHX);
PERL_CALLCONV void	Perl_lex_start(pTHX_ SV* line);
PERL_CALLCONV OP*	Perl_linklist(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_list(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_listkids(pTHX_ OP* o);
PERL_CALLCONV void	Perl_load_module(pTHX_ U32 flags, SV* name, SV* ver, ...);
PERL_CALLCONV void	Perl_vload_module(pTHX_ U32 flags, SV* name, SV* ver, va_list* args);
PERL_CALLCONV OP*	Perl_localize(pTHX_ OP* arg, I32 lexical);
PERL_CALLCONV I32	Perl_looks_like_number(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_magic_clearenv(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clear_all_env(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clearpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_clearsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_existspack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_freeregexp(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_get(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getarylen(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getdefelem(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getnkeys(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getpos(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getsubstr(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_gettaint(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getuvar(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_getvec(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV U32	Perl_magic_len(pTHX_ SV* sv, MAGIC* mg);
#if defined(USE_THREADS)
PERL_CALLCONV int	Perl_magic_mutexfree(pTHX_ SV* sv, MAGIC* mg);
#endif
PERL_CALLCONV int	Perl_magic_nextpack(pTHX_ SV* sv, MAGIC* mg, SV* key);
PERL_CALLCONV U32	Perl_magic_regdata_cnt(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_regdatum_get(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_regdatum_set(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_set(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setamagic(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setarylen(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setbm(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setdbline(pTHX_ SV* sv, MAGIC* mg);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV int	Perl_magic_setcollxfrm(pTHX_ SV* sv, MAGIC* mg);
#endif
PERL_CALLCONV int	Perl_magic_setdefelem(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setenv(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setfm(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setisa(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setmglob(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setnkeys(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setpack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setpos(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setsig(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setsubstr(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_settaint(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setuvar(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_setvec(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_set_all_env(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV U32	Perl_magic_sizepack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV int	Perl_magic_wipepack(pTHX_ SV* sv, MAGIC* mg);
PERL_CALLCONV void	Perl_magicname(pTHX_ char* sym, char* name, I32 namlen);
PERL_CALLCONV void	Perl_markstack_grow(pTHX);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV char*	Perl_mem_collxfrm(pTHX_ const char* s, STRLEN len, STRLEN* xlen);
#endif
PERL_CALLCONV SV*	Perl_mess(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV SV*	Perl_vmess(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_qerror(pTHX_ SV* err);
PERL_CALLCONV int	Perl_mg_clear(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_copy(pTHX_ SV* sv, SV* nsv, const char* key, I32 klen);
PERL_CALLCONV MAGIC*	Perl_mg_find(pTHX_ SV* sv, int type);
PERL_CALLCONV int	Perl_mg_free(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_get(pTHX_ SV* sv);
PERL_CALLCONV U32	Perl_mg_length(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_mg_magical(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_mg_set(pTHX_ SV* sv);
PERL_CALLCONV I32	Perl_mg_size(pTHX_ SV* sv);
PERL_CALLCONV OP*	Perl_mod(pTHX_ OP* o, I32 type);
PERL_CALLCONV int	Perl_mode_from_discipline(pTHX_ SV* discp);
PERL_CALLCONV char*	Perl_moreswitches(pTHX_ char* s);
PERL_CALLCONV OP*	Perl_my(pTHX_ OP* o);
PERL_CALLCONV NV	Perl_my_atof(pTHX_ const char *s);
#if !defined(HAS_BCOPY) || !defined(HAS_SAFE_BCOPY)
PERL_CALLCONV char*	Perl_my_bcopy(const char* from, char* to, I32 len);
#endif
#if !defined(HAS_BZERO) && !defined(HAS_MEMSET)
PERL_CALLCONV char*	Perl_my_bzero(char* loc, I32 len);
#endif
PERL_CALLCONV void	Perl_my_exit(pTHX_ U32 status) __attribute__((noreturn));
PERL_CALLCONV void	Perl_my_failure_exit(pTHX) __attribute__((noreturn));
PERL_CALLCONV I32	Perl_my_fflush_all(pTHX);
PERL_CALLCONV I32	Perl_my_lstat(pTHX);
#if !defined(HAS_MEMCMP) || !defined(HAS_SANE_MEMCMP)
PERL_CALLCONV I32	Perl_my_memcmp(const char* s1, const char* s2, I32 len);
#endif
#if !defined(HAS_MEMSET)
PERL_CALLCONV void*	Perl_my_memset(char* loc, I32 ch, I32 len);
#endif
#if !defined(PERL_OBJECT)
PERL_CALLCONV I32	Perl_my_pclose(pTHX_ PerlIO* ptr);
PERL_CALLCONV PerlIO*	Perl_my_popen(pTHX_ char* cmd, char* mode);
#endif
PERL_CALLCONV void	Perl_my_setenv(pTHX_ char* nam, char* val);
PERL_CALLCONV I32	Perl_my_stat(pTHX);
#if defined(MYSWAP)
PERL_CALLCONV short	Perl_my_swap(pTHX_ short s);
PERL_CALLCONV long	Perl_my_htonl(pTHX_ long l);
PERL_CALLCONV long	Perl_my_ntohl(pTHX_ long l);
#endif
PERL_CALLCONV void	Perl_my_unexec(pTHX);
PERL_CALLCONV OP*	Perl_newANONLIST(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newANONHASH(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newANONSUB(pTHX_ I32 floor, OP* proto, OP* block);
PERL_CALLCONV OP*	Perl_newASSIGNOP(pTHX_ I32 flags, OP* left, I32 optype, OP* right);
PERL_CALLCONV OP*	Perl_newCONDOP(pTHX_ I32 flags, OP* expr, OP* trueop, OP* falseop);
PERL_CALLCONV void	Perl_newCONSTSUB(pTHX_ HV* stash, char* name, SV* sv);
PERL_CALLCONV void	Perl_newFORM(pTHX_ I32 floor, OP* o, OP* block);
PERL_CALLCONV OP*	Perl_newFOROP(pTHX_ I32 flags, char* label, line_t forline, OP* sclr, OP* expr, OP*block, OP*cont);
PERL_CALLCONV OP*	Perl_newLOGOP(pTHX_ I32 optype, I32 flags, OP* left, OP* right);
PERL_CALLCONV OP*	Perl_newLOOPEX(pTHX_ I32 type, OP* label);
PERL_CALLCONV OP*	Perl_newLOOPOP(pTHX_ I32 flags, I32 debuggable, OP* expr, OP* block);
PERL_CALLCONV OP*	Perl_newNULLLIST(pTHX);
PERL_CALLCONV OP*	Perl_newOP(pTHX_ I32 optype, I32 flags);
PERL_CALLCONV void	Perl_newPROG(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newRANGE(pTHX_ I32 flags, OP* left, OP* right);
PERL_CALLCONV OP*	Perl_newSLICEOP(pTHX_ I32 flags, OP* subscript, OP* listop);
PERL_CALLCONV OP*	Perl_newSTATEOP(pTHX_ I32 flags, char* label, OP* o);
PERL_CALLCONV CV*	Perl_newSUB(pTHX_ I32 floor, OP* o, OP* proto, OP* block);
PERL_CALLCONV CV*	Perl_newXS(pTHX_ char* name, XSUBADDR_t f, char* filename);
PERL_CALLCONV AV*	Perl_newAV(pTHX);
PERL_CALLCONV OP*	Perl_newAVREF(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newBINOP(pTHX_ I32 type, I32 flags, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_newCVREF(pTHX_ I32 flags, OP* o);
PERL_CALLCONV OP*	Perl_newGVOP(pTHX_ I32 type, I32 flags, GV* gv);
PERL_CALLCONV GV*	Perl_newGVgen(pTHX_ char* pack);
PERL_CALLCONV OP*	Perl_newGVREF(pTHX_ I32 type, OP* o);
PERL_CALLCONV OP*	Perl_newHVREF(pTHX_ OP* o);
PERL_CALLCONV HV*	Perl_newHV(pTHX);
PERL_CALLCONV HV*	Perl_newHVhv(pTHX_ HV* hv);
PERL_CALLCONV IO*	Perl_newIO(pTHX);
PERL_CALLCONV OP*	Perl_newLISTOP(pTHX_ I32 type, I32 flags, OP* first, OP* last);
PERL_CALLCONV OP*	Perl_newPADOP(pTHX_ I32 type, I32 flags, SV* sv);
PERL_CALLCONV OP*	Perl_newPMOP(pTHX_ I32 type, I32 flags);
PERL_CALLCONV OP*	Perl_newPVOP(pTHX_ I32 type, I32 flags, char* pv);
PERL_CALLCONV SV*	Perl_newRV(pTHX_ SV* pref);
PERL_CALLCONV SV*	Perl_newRV_noinc(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_newSV(pTHX_ STRLEN len);
PERL_CALLCONV OP*	Perl_newSVREF(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_newSVOP(pTHX_ I32 type, I32 flags, SV* sv);
PERL_CALLCONV SV*	Perl_newSViv(pTHX_ IV i);
PERL_CALLCONV SV*	Perl_newSVuv(pTHX_ UV u);
PERL_CALLCONV SV*	Perl_newSVnv(pTHX_ NV n);
PERL_CALLCONV SV*	Perl_newSVpv(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV SV*	Perl_newSVpvn(pTHX_ const char* s, STRLEN len);
PERL_CALLCONV SV*	Perl_newSVpvf(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV SV*	Perl_vnewSVpvf(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV SV*	Perl_newSVrv(pTHX_ SV* rv, const char* classname);
PERL_CALLCONV SV*	Perl_newSVsv(pTHX_ SV* old);
PERL_CALLCONV OP*	Perl_newUNOP(pTHX_ I32 type, I32 flags, OP* first);
PERL_CALLCONV OP*	Perl_newWHILEOP(pTHX_ I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont);

PERL_CALLCONV PERL_SI*	Perl_new_stackinfo(pTHX_ I32 stitems, I32 cxitems);
PERL_CALLCONV PerlIO*	Perl_nextargv(pTHX_ GV* gv);
PERL_CALLCONV char*	Perl_ninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend);
PERL_CALLCONV OP*	Perl_oopsCV(pTHX_ OP* o);
PERL_CALLCONV void	Perl_op_free(pTHX_ OP* arg);
PERL_CALLCONV void	Perl_package(pTHX_ OP* o);
PERL_CALLCONV PADOFFSET	Perl_pad_alloc(pTHX_ I32 optype, U32 tmptype);
PERL_CALLCONV PADOFFSET	Perl_pad_allocmy(pTHX_ char* name);
PERL_CALLCONV PADOFFSET	Perl_pad_findmy(pTHX_ char* name);
PERL_CALLCONV OP*	Perl_oopsAV(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_oopsHV(pTHX_ OP* o);
PERL_CALLCONV void	Perl_pad_leavemy(pTHX_ I32 fill);
PERL_CALLCONV SV*	Perl_pad_sv(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_pad_free(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_pad_reset(pTHX);
PERL_CALLCONV void	Perl_pad_swipe(pTHX_ PADOFFSET po);
PERL_CALLCONV void	Perl_peep(pTHX_ OP* o);
#if defined(PERL_OBJECT)
PERL_CALLCONV void	Perl_construct(pTHX);
PERL_CALLCONV void	Perl_destruct(pTHX);
PERL_CALLCONV void	Perl_free(pTHX);
PERL_CALLCONV int	Perl_run(pTHX);
PERL_CALLCONV int	Perl_parse(pTHX_ XSINIT_t xsinit, int argc, char** argv, char** env);
#endif
#if defined(USE_THREADS)
PERL_CALLCONV struct perl_thread*	Perl_new_struct_thread(pTHX_ struct perl_thread *t);
#endif
PERL_CALLCONV void	Perl_call_atexit(pTHX_ ATEXIT_t fn, void *ptr);
PERL_CALLCONV I32	Perl_call_argv(pTHX_ const char* sub_name, I32 flags, char** argv);
PERL_CALLCONV I32	Perl_call_method(pTHX_ const char* methname, I32 flags);
PERL_CALLCONV I32	Perl_call_pv(pTHX_ const char* sub_name, I32 flags);
PERL_CALLCONV I32	Perl_call_sv(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV SV*	Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error);
PERL_CALLCONV I32	Perl_eval_sv(pTHX_ SV* sv, I32 flags);
PERL_CALLCONV SV*	Perl_get_sv(pTHX_ const char* name, I32 create);
PERL_CALLCONV AV*	Perl_get_av(pTHX_ const char* name, I32 create);
PERL_CALLCONV HV*	Perl_get_hv(pTHX_ const char* name, I32 create);
PERL_CALLCONV CV*	Perl_get_cv(pTHX_ const char* name, I32 create);
PERL_CALLCONV int	Perl_init_i18nl10n(pTHX_ int printwarn);
PERL_CALLCONV int	Perl_init_i18nl14n(pTHX_ int printwarn);
PERL_CALLCONV void	Perl_new_collate(pTHX_ char* newcoll);
PERL_CALLCONV void	Perl_new_ctype(pTHX_ char* newctype);
PERL_CALLCONV void	Perl_new_numeric(pTHX_ char* newcoll);
PERL_CALLCONV void	Perl_set_numeric_local(pTHX);
PERL_CALLCONV void	Perl_set_numeric_radix(pTHX);
PERL_CALLCONV void	Perl_set_numeric_standard(pTHX);
PERL_CALLCONV void	Perl_require_pv(pTHX_ const char* pv);
PERL_CALLCONV void	Perl_pidgone(pTHX_ Pid_t pid, int status);
PERL_CALLCONV void	Perl_pmflag(pTHX_ U16* pmfl, int ch);
PERL_CALLCONV OP*	Perl_pmruntime(pTHX_ OP* pm, OP* expr, OP* repl);
PERL_CALLCONV OP*	Perl_pmtrans(pTHX_ OP* o, OP* expr, OP* repl);
PERL_CALLCONV OP*	Perl_pop_return(pTHX);
PERL_CALLCONV void	Perl_pop_scope(pTHX);
PERL_CALLCONV OP*	Perl_prepend_elem(pTHX_ I32 optype, OP* head, OP* tail);
PERL_CALLCONV void	Perl_push_return(pTHX_ OP* o);
PERL_CALLCONV void	Perl_push_scope(pTHX);
PERL_CALLCONV OP*	Perl_ref(pTHX_ OP* o, I32 type);
PERL_CALLCONV OP*	Perl_refkids(pTHX_ OP* o, I32 type);
PERL_CALLCONV void	Perl_regdump(pTHX_ regexp* r);
PERL_CALLCONV I32	Perl_pregexec(pTHX_ regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave);
PERL_CALLCONV void	Perl_pregfree(pTHX_ struct regexp* r);
PERL_CALLCONV regexp*	Perl_pregcomp(pTHX_ char* exp, char* xend, PMOP* pm);
PERL_CALLCONV char*	Perl_re_intuit_start(pTHX_ regexp* prog, SV* sv, char* strpos, char* strend, U32 flags, struct re_scream_pos_data_s *data);
PERL_CALLCONV SV*	Perl_re_intuit_string(pTHX_ regexp* prog);
PERL_CALLCONV I32	Perl_regexec_flags(pTHX_ regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, void* data, U32 flags);
PERL_CALLCONV regnode*	Perl_regnext(pTHX_ regnode* p);
PERL_CALLCONV void	Perl_regprop(pTHX_ SV* sv, regnode* o);
PERL_CALLCONV void	Perl_repeatcpy(pTHX_ char* to, const char* from, I32 len, I32 count);
PERL_CALLCONV char*	Perl_rninstr(pTHX_ const char* big, const char* bigend, const char* little, const char* lend);
PERL_CALLCONV Sighandler_t	Perl_rsignal(pTHX_ int i, Sighandler_t t);
PERL_CALLCONV int	Perl_rsignal_restore(pTHX_ int i, Sigsave_t* t);
PERL_CALLCONV int	Perl_rsignal_save(pTHX_ int i, Sighandler_t t1, Sigsave_t* t2);
PERL_CALLCONV Sighandler_t	Perl_rsignal_state(pTHX_ int i);
PERL_CALLCONV void	Perl_rxres_free(pTHX_ void** rsp);
PERL_CALLCONV void	Perl_rxres_restore(pTHX_ void** rsp, REGEXP* prx);
PERL_CALLCONV void	Perl_rxres_save(pTHX_ void** rsp, REGEXP* prx);
#if !defined(HAS_RENAME)
PERL_CALLCONV I32	Perl_same_dirent(pTHX_ char* a, char* b);
#endif
PERL_CALLCONV char*	Perl_savepv(pTHX_ const char* sv);
PERL_CALLCONV char*	Perl_savepvn(pTHX_ const char* sv, I32 len);
PERL_CALLCONV void	Perl_savestack_grow(pTHX);
PERL_CALLCONV void	Perl_save_aelem(pTHX_ AV* av, I32 idx, SV **sptr);
PERL_CALLCONV I32	Perl_save_alloc(pTHX_ I32 size, I32 pad);
PERL_CALLCONV void	Perl_save_aptr(pTHX_ AV** aptr);
PERL_CALLCONV AV*	Perl_save_ary(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_clearsv(pTHX_ SV** svp);
PERL_CALLCONV void	Perl_save_delete(pTHX_ HV* hv, char* key, I32 klen);
PERL_CALLCONV void	Perl_save_destructor(pTHX_ DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
PERL_CALLCONV void	Perl_save_destructor_x(pTHX_ DESTRUCTORFUNC_t f, void* p);
PERL_CALLCONV void	Perl_save_freesv(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_save_freeop(pTHX_ OP* o);
PERL_CALLCONV void	Perl_save_freepv(pTHX_ char* pv);
PERL_CALLCONV void	Perl_save_generic_svref(pTHX_ SV** sptr);
PERL_CALLCONV void	Perl_save_generic_pvref(pTHX_ char** str);
PERL_CALLCONV void	Perl_save_gp(pTHX_ GV* gv, I32 empty);
PERL_CALLCONV HV*	Perl_save_hash(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_helem(pTHX_ HV* hv, SV *key, SV **sptr);
PERL_CALLCONV void	Perl_save_hints(pTHX);
PERL_CALLCONV void	Perl_save_hptr(pTHX_ HV** hptr);
PERL_CALLCONV void	Perl_save_I16(pTHX_ I16* intp);
PERL_CALLCONV void	Perl_save_I32(pTHX_ I32* intp);
PERL_CALLCONV void	Perl_save_I8(pTHX_ I8* bytep);
PERL_CALLCONV void	Perl_save_int(pTHX_ int* intp);
PERL_CALLCONV void	Perl_save_item(pTHX_ SV* item);
PERL_CALLCONV void	Perl_save_iv(pTHX_ IV* iv);
PERL_CALLCONV void	Perl_save_list(pTHX_ SV** sarg, I32 maxsarg);
PERL_CALLCONV void	Perl_save_long(pTHX_ long* longp);
PERL_CALLCONV void	Perl_save_mortalizesv(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_save_nogv(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_op(pTHX);
PERL_CALLCONV SV*	Perl_save_scalar(pTHX_ GV* gv);
PERL_CALLCONV void	Perl_save_pptr(pTHX_ char** pptr);
PERL_CALLCONV void	Perl_save_vptr(pTHX_ void* pptr);
PERL_CALLCONV void	Perl_save_re_context(pTHX);
PERL_CALLCONV void	Perl_save_padsv(pTHX_ PADOFFSET off);
PERL_CALLCONV void	Perl_save_sptr(pTHX_ SV** sptr);
PERL_CALLCONV SV*	Perl_save_svref(pTHX_ SV** sptr);
PERL_CALLCONV SV**	Perl_save_threadsv(pTHX_ PADOFFSET i);
PERL_CALLCONV OP*	Perl_sawparens(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalar(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarkids(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarseq(pTHX_ OP* o);
PERL_CALLCONV OP*	Perl_scalarvoid(pTHX_ OP* o);
PERL_CALLCONV NV	Perl_scan_bin(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV NV	Perl_scan_hex(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV char*	Perl_scan_num(pTHX_ char* s, YYSTYPE *lvalp);
PERL_CALLCONV NV	Perl_scan_oct(pTHX_ char* start, STRLEN len, STRLEN* retlen);
PERL_CALLCONV OP*	Perl_scope(pTHX_ OP* o);
PERL_CALLCONV char*	Perl_screaminstr(pTHX_ SV* bigsv, SV* littlesv, I32 start_shift, I32 end_shift, I32 *state, I32 last);
#if !defined(VMS)
PERL_CALLCONV I32	Perl_setenv_getix(pTHX_ char* nam);
#endif
PERL_CALLCONV void	Perl_setdefout(pTHX_ GV* gv);
PERL_CALLCONV char*	Perl_sharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV HEK*	Perl_share_hek(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV Signal_t	Perl_sighandler(int sig);
PERL_CALLCONV SV**	Perl_stack_grow(pTHX_ SV** sp, SV**p, int n);
PERL_CALLCONV I32	Perl_start_subparse(pTHX_ I32 is_format, U32 flags);
PERL_CALLCONV void	Perl_sub_crush_depth(pTHX_ CV* cv);
PERL_CALLCONV bool	Perl_sv_2bool(pTHX_ SV* sv);
PERL_CALLCONV CV*	Perl_sv_2cv(pTHX_ SV* sv, HV** st, GV** gvp, I32 lref);
PERL_CALLCONV IO*	Perl_sv_2io(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_2iv(pTHX_ SV* sv);
PERL_CALLCONV SV*	Perl_sv_2mortal(pTHX_ SV* sv);
PERL_CALLCONV NV	Perl_sv_2nv(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pv(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_2pvutf8(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_2pvbyte(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV UV	Perl_sv_2uv(pTHX_ SV* sv);
PERL_CALLCONV IV	Perl_sv_iv(pTHX_ SV* sv);
PERL_CALLCONV UV	Perl_sv_uv(pTHX_ SV* sv);
PERL_CALLCONV NV	Perl_sv_nv(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_pvn(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV char*	Perl_sv_pvutf8n(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV char*	Perl_sv_pvbyten(pTHX_ SV *sv, STRLEN *len);
PERL_CALLCONV I32	Perl_sv_true(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_add_arena(pTHX_ char* ptr, U32 size, U32 flags);
PERL_CALLCONV int	Perl_sv_backoff(pTHX_ SV* sv);
PERL_CALLCONV SV*	Perl_sv_bless(pTHX_ SV* sv, HV* stash);
PERL_CALLCONV void	Perl_sv_catpvf(pTHX_ SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vcatpvf(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_catpv(pTHX_ SV* sv, const char* ptr);
PERL_CALLCONV void	Perl_sv_catpvn(pTHX_ SV* sv, const char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_catsv(pTHX_ SV* dsv, SV* ssv);
PERL_CALLCONV void	Perl_sv_chop(pTHX_ SV* sv, char* ptr);
PERL_CALLCONV I32	Perl_sv_clean_all(pTHX);
PERL_CALLCONV void	Perl_sv_clean_objs(pTHX);
PERL_CALLCONV void	Perl_sv_clear(pTHX_ SV* sv);
PERL_CALLCONV I32	Perl_sv_cmp(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV I32	Perl_sv_cmp_locale(pTHX_ SV* sv1, SV* sv2);
#if defined(USE_LOCALE_COLLATE)
PERL_CALLCONV char*	Perl_sv_collxfrm(pTHX_ SV* sv, STRLEN* nxp);
#endif
PERL_CALLCONV OP*	Perl_sv_compile_2op(pTHX_ SV* sv, OP** startp, char* code, AV** avp);
PERL_CALLCONV void	Perl_sv_dec(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_dump(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_derived_from(pTHX_ SV* sv, const char* name);
PERL_CALLCONV I32	Perl_sv_eq(pTHX_ SV* sv1, SV* sv2);
PERL_CALLCONV void	Perl_sv_free(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_free_arenas(pTHX);
PERL_CALLCONV char*	Perl_sv_gets(pTHX_ SV* sv, PerlIO* fp, I32 append);
PERL_CALLCONV char*	Perl_sv_grow(pTHX_ SV* sv, STRLEN newlen);
PERL_CALLCONV void	Perl_sv_inc(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_insert(pTHX_ SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen);
PERL_CALLCONV int	Perl_sv_isa(pTHX_ SV* sv, const char* name);
PERL_CALLCONV int	Perl_sv_isobject(pTHX_ SV* sv);
PERL_CALLCONV STRLEN	Perl_sv_len(pTHX_ SV* sv);
PERL_CALLCONV STRLEN	Perl_sv_len_utf8(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_magic(pTHX_ SV* sv, SV* obj, int how, const char* name, I32 namlen);
PERL_CALLCONV SV*	Perl_sv_mortalcopy(pTHX_ SV* oldsv);
PERL_CALLCONV SV*	Perl_sv_newmortal(pTHX);
PERL_CALLCONV SV*	Perl_sv_newref(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_peek(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_pos_u2b(pTHX_ SV* sv, I32* offsetp, I32* lenp);
PERL_CALLCONV void	Perl_sv_pos_b2u(pTHX_ SV* sv, I32* offsetp);
PERL_CALLCONV char*	Perl_sv_pvn_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_pvutf8n_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_pvbyten_force(pTHX_ SV* sv, STRLEN* lp);
PERL_CALLCONV char*	Perl_sv_reftype(pTHX_ SV* sv, int ob);
PERL_CALLCONV void	Perl_sv_replace(pTHX_ SV* sv, SV* nsv);
PERL_CALLCONV void	Perl_sv_report_used(pTHX);
PERL_CALLCONV void	Perl_sv_reset(pTHX_ char* s, HV* stash);
PERL_CALLCONV void	Perl_sv_setpvf(pTHX_ SV* sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vsetpvf(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_setiv(pTHX_ SV* sv, IV num);
PERL_CALLCONV void	Perl_sv_setpviv(pTHX_ SV* sv, IV num);
PERL_CALLCONV void	Perl_sv_setuv(pTHX_ SV* sv, UV num);
PERL_CALLCONV void	Perl_sv_setnv(pTHX_ SV* sv, NV num);
PERL_CALLCONV SV*	Perl_sv_setref_iv(pTHX_ SV* rv, const char* classname, IV iv);
PERL_CALLCONV SV*	Perl_sv_setref_nv(pTHX_ SV* rv, const char* classname, NV nv);
PERL_CALLCONV SV*	Perl_sv_setref_pv(pTHX_ SV* rv, const char* classname, void* pv);
PERL_CALLCONV SV*	Perl_sv_setref_pvn(pTHX_ SV* rv, const char* classname, char* pv, STRLEN n);
PERL_CALLCONV void	Perl_sv_setpv(pTHX_ SV* sv, const char* ptr);
PERL_CALLCONV void	Perl_sv_setpvn(pTHX_ SV* sv, const char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_setsv(pTHX_ SV* dsv, SV* ssv);
PERL_CALLCONV void	Perl_sv_taint(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_tainted(pTHX_ SV* sv);
PERL_CALLCONV int	Perl_sv_unmagic(pTHX_ SV* sv, int type);
PERL_CALLCONV void	Perl_sv_unref(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_sv_untaint(pTHX_ SV* sv);
PERL_CALLCONV bool	Perl_sv_upgrade(pTHX_ SV* sv, U32 mt);
PERL_CALLCONV void	Perl_sv_usepvn(pTHX_ SV* sv, char* ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_vcatpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted);
PERL_CALLCONV void	Perl_sv_vsetpvfn(pTHX_ SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted);
PERL_CALLCONV NV	Perl_str_to_version(pTHX_ SV *sv);
PERL_CALLCONV SV*	Perl_swash_init(pTHX_ char* pkg, char* name, SV* listsv, I32 minbits, I32 none);
PERL_CALLCONV UV	Perl_swash_fetch(pTHX_ SV *sv, U8 *ptr);
PERL_CALLCONV void	Perl_taint_env(pTHX);
PERL_CALLCONV void	Perl_taint_proper(pTHX_ const char* f, const char* s);
PERL_CALLCONV UV	Perl_to_utf8_lower(pTHX_ U8 *p);
PERL_CALLCONV UV	Perl_to_utf8_upper(pTHX_ U8 *p);
PERL_CALLCONV UV	Perl_to_utf8_title(pTHX_ U8 *p);
#if defined(UNLINK_ALL_VERSIONS)
PERL_CALLCONV I32	Perl_unlnk(pTHX_ char* f);
#endif
#if defined(USE_THREADS)
PERL_CALLCONV void	Perl_unlock_condpair(pTHX_ void* svv);
#endif
PERL_CALLCONV void	Perl_unsharepvn(pTHX_ const char* sv, I32 len, U32 hash);
PERL_CALLCONV void	Perl_unshare_hek(pTHX_ HEK* hek);
PERL_CALLCONV void	Perl_utilize(pTHX_ int aver, I32 floor, OP* version, OP* id, OP* arg);
PERL_CALLCONV U8*	Perl_utf16_to_utf8(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
PERL_CALLCONV U8*	Perl_utf16_to_utf8_reversed(pTHX_ U8* p, U8 *d, I32 bytelen, I32 *newlen);
PERL_CALLCONV STRLEN	Perl_utf8_length(pTHX_ U8* s, U8 *e);
PERL_CALLCONV IV	Perl_utf8_distance(pTHX_ U8 *a, U8 *b);
PERL_CALLCONV U8*	Perl_utf8_hop(pTHX_ U8 *s, I32 off);
PERL_CALLCONV U8*	Perl_utf8_to_bytes(pTHX_ U8 *s, STRLEN *len);
PERL_CALLCONV U8*	Perl_bytes_from_utf8(pTHX_ U8 *s, STRLEN *len, bool *is_utf8);
PERL_CALLCONV U8*	Perl_bytes_to_utf8(pTHX_ U8 *s, STRLEN *len);
PERL_CALLCONV UV	Perl_utf8_to_uv_simple(pTHX_ U8 *s, STRLEN* retlen);
PERL_CALLCONV UV	Perl_utf8_to_uv(pTHX_ U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
PERL_CALLCONV U8*	Perl_uv_to_utf8(pTHX_ U8 *d, UV uv);
PERL_CALLCONV void	Perl_vivify_defelem(pTHX_ SV* sv);
PERL_CALLCONV void	Perl_vivify_ref(pTHX_ SV* sv, U32 to_what);
PERL_CALLCONV I32	Perl_wait4pid(pTHX_ Pid_t pid, int* statusp, int flags);
PERL_CALLCONV void	Perl_report_evil_fh(pTHX_ GV *gv, IO *io, I32 op);
PERL_CALLCONV void	Perl_report_uninit(pTHX);
PERL_CALLCONV void	Perl_warn(pTHX_ const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_1,pTHX_2)))
#endif
;
PERL_CALLCONV void	Perl_vwarn(pTHX_ const char* pat, va_list* args);
PERL_CALLCONV void	Perl_warner(pTHX_ U32 err, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_vwarner(pTHX_ U32 err, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_watch(pTHX_ char** addr);
PERL_CALLCONV I32	Perl_whichsig(pTHX_ char* sig);
PERL_CALLCONV int	Perl_yyerror(pTHX_ char* s);
#ifdef USE_PURE_BISON
PERL_CALLCONV int	Perl_yylex_r(pTHX_ YYSTYPE *lvalp, int *lcharp);
#endif
PERL_CALLCONV int	Perl_yylex(pTHX);
PERL_CALLCONV int	Perl_yyparse(pTHX);
PERL_CALLCONV int	Perl_yywarn(pTHX_ char* s);
#if defined(MYMALLOC)
PERL_CALLCONV void	Perl_dump_mstats(pTHX_ char* s);
PERL_CALLCONV int	Perl_get_mstats(pTHX_ perl_mstats_t *buf, int buflen, int level);
#endif
PERL_CALLCONV Malloc_t	Perl_safesysmalloc(MEM_SIZE nbytes);
PERL_CALLCONV Malloc_t	Perl_safesyscalloc(MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safesysrealloc(Malloc_t where, MEM_SIZE nbytes);
PERL_CALLCONV Free_t	Perl_safesysfree(Malloc_t where);
#if defined(LEAKTEST)
PERL_CALLCONV Malloc_t	Perl_safexmalloc(I32 x, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safexcalloc(I32 x, MEM_SIZE elements, MEM_SIZE size);
PERL_CALLCONV Malloc_t	Perl_safexrealloc(Malloc_t where, MEM_SIZE size);
PERL_CALLCONV void	Perl_safexfree(Malloc_t where);
#endif
#if defined(PERL_GLOBAL_STRUCT)
PERL_CALLCONV struct perl_vars *	Perl_GetVars(pTHX);
#endif
PERL_CALLCONV int	Perl_runops_standard(pTHX);
PERL_CALLCONV int	Perl_runops_debug(pTHX);
#if defined(USE_THREADS)
PERL_CALLCONV SV*	Perl_sv_lock(pTHX_ SV *sv);
#endif
PERL_CALLCONV void	Perl_sv_catpvf_mg(pTHX_ SV *sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vcatpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_catpv_mg(pTHX_ SV *sv, const char *ptr);
PERL_CALLCONV void	Perl_sv_catpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_catsv_mg(pTHX_ SV *dstr, SV *sstr);
PERL_CALLCONV void	Perl_sv_setpvf_mg(pTHX_ SV *sv, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_2,pTHX_3)))
#endif
;
PERL_CALLCONV void	Perl_sv_vsetpvf_mg(pTHX_ SV* sv, const char* pat, va_list* args);
PERL_CALLCONV void	Perl_sv_setiv_mg(pTHX_ SV *sv, IV i);
PERL_CALLCONV void	Perl_sv_setpviv_mg(pTHX_ SV *sv, IV iv);
PERL_CALLCONV void	Perl_sv_setuv_mg(pTHX_ SV *sv, UV u);
PERL_CALLCONV void	Perl_sv_setnv_mg(pTHX_ SV *sv, NV num);
PERL_CALLCONV void	Perl_sv_setpv_mg(pTHX_ SV *sv, const char *ptr);
PERL_CALLCONV void	Perl_sv_setpvn_mg(pTHX_ SV *sv, const char *ptr, STRLEN len);
PERL_CALLCONV void	Perl_sv_setsv_mg(pTHX_ SV *dstr, SV *sstr);
PERL_CALLCONV void	Perl_sv_usepvn_mg(pTHX_ SV *sv, char *ptr, STRLEN len);
PERL_CALLCONV MGVTBL*	Perl_get_vtbl(pTHX_ int vtbl_id);
PERL_CALLCONV char*	Perl_pv_display(pTHX_ SV *sv, char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
PERL_CALLCONV void	Perl_dump_indent(pTHX_ I32 level, PerlIO *file, const char* pat, ...)
#ifdef CHECK_FORMAT
 __attribute__((format(printf,pTHX_3,pTHX_4)))
#endif
;
PERL_CALLCONV void	Perl_dump_vindent(pTHX_ I32 level, PerlIO *file, const char* pat, va_list *args);
PERL_CALLCONV void	Perl_do_gv_dump(pTHX_ I32 level, PerlIO *file, char *name, GV *sv);
PERL_CALLCONV void	Perl_do_gvgv_dump(pTHX_ I32 level, PerlIO *file, char *name, GV *sv);
PERL_CALLCONV void	Perl_do_hv_dump(pTHX_ I32 level, PerlIO *file, char *name, HV *sv);
PERL_CALLCONV void	Perl_do_magic_dump(pTHX_ I32 level, PerlIO *file, MAGIC *mg, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
PERL_CALLCONV void	Perl_do_op_dump(pTHX_ I32 level, PerlIO *file, OP *o);
PERL_CALLCONV void	Perl_do_pmop_dump(pTHX_ I32 level, PerlIO *file, PMOP *pm);
PERL_CALLCONV void	Perl_do_sv_dump(pTHX_ I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, bool dumpops, STRLEN pvlim);
PERL_CALLCONV void	Perl_magic_dump(pTHX_ MAGIC *mg);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
PERL_CALLCONV void*	Perl_default_protect(pTHX_ volatile JMPENV *je, int *excpt, protect_body_t body, ...);
PERL_CALLCONV void*	Perl_vdefault_protect(pTHX_ volatile JMPENV *je, int *excpt, protect_body_t body, va_list *args);
#endif
PERL_CALLCONV void	Perl_reginitcolors(pTHX);
PERL_CALLCONV char*	Perl_sv_2pv_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pvutf8_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_2pvbyte_nolen(pTHX_ SV* sv);
PERL_CALLCONV char*	Perl_sv_pv(pTHX_ SV *sv);
PERL_CALLCONV char*	Perl_sv_pvutf8(pTHX_ SV *sv);
PERL_CALLCONV char*	Perl_sv_pvbyte(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_utf8_upgrade(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_utf8_downgrade(pTHX_ SV *sv, bool fail_ok);
PERL_CALLCONV void	Perl_sv_utf8_encode(pTHX_ SV *sv);
PERL_CALLCONV bool	Perl_sv_utf8_decode(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_force_normal(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_sv_add_backref(pTHX_ SV *tsv, SV *sv);
PERL_CALLCONV void	Perl_sv_del_backref(pTHX_ SV *sv);
PERL_CALLCONV void	Perl_tmps_grow(pTHX_ I32 n);
PERL_CALLCONV SV*	Perl_sv_rvweaken(pTHX_ SV *sv);
PERL_CALLCONV int	Perl_magic_killbackrefs(pTHX_ SV *sv, MAGIC *mg);
PERL_CALLCONV OP*	Perl_newANONATTRSUB(pTHX_ I32 floor, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV CV*	Perl_newATTRSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV void	Perl_newMYSUB(pTHX_ I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
PERL_CALLCONV OP *	Perl_my_attrs(pTHX_ OP *o, OP *attrs);
PERL_CALLCONV void	Perl_boot_core_xsutils(pTHX);
#if defined(USE_ITHREADS)
PERL_CALLCONV PERL_CONTEXT*	Perl_cx_dup(pTHX_ PERL_CONTEXT* cx, I32 ix, I32 max);
PERL_CALLCONV PERL_SI*	Perl_si_dup(pTHX_ PERL_SI* si);
PERL_CALLCONV ANY*	Perl_ss_dup(pTHX_ PerlInterpreter* proto_perl);
PERL_CALLCONV void*	Perl_any_dup(pTHX_ void* v, PerlInterpreter* proto_perl);
PERL_CALLCONV HE*	Perl_he_dup(pTHX_ HE* e, bool shared);
PERL_CALLCONV REGEXP*	Perl_re_dup(pTHX_ REGEXP* r);
PERL_CALLCONV PerlIO*	Perl_fp_dup(pTHX_ PerlIO* fp, char type);
PERL_CALLCONV DIR*	Perl_dirp_dup(pTHX_ DIR* dp);
PERL_CALLCONV GP*	Perl_gp_dup(pTHX_ GP* gp);
PERL_CALLCONV MAGIC*	Perl_mg_dup(pTHX_ MAGIC* mg);
PERL_CALLCONV SV*	Perl_sv_dup(pTHX_ SV* sstr);
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_dup(pTHX_ struct interp_intern* src, struct interp_intern* dst);
#endif
PERL_CALLCONV PTR_TBL_t*	Perl_ptr_table_new(pTHX);
PERL_CALLCONV void*	Perl_ptr_table_fetch(pTHX_ PTR_TBL_t *tbl, void *sv);
PERL_CALLCONV void	Perl_ptr_table_store(pTHX_ PTR_TBL_t *tbl, void *oldsv, void *newsv);
PERL_CALLCONV void	Perl_ptr_table_split(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_clear(pTHX_ PTR_TBL_t *tbl);
PERL_CALLCONV void	Perl_ptr_table_free(pTHX_ PTR_TBL_t *tbl);
#endif
#if defined(HAVE_INTERP_INTERN)
PERL_CALLCONV void	Perl_sys_intern_clear(pTHX);
PERL_CALLCONV void	Perl_sys_intern_init(pTHX);
#endif

#if defined(PERL_OBJECT)
protected:
#else
END_EXTERN_C
#endif

#if defined(PERL_IN_AV_C) || defined(PERL_DECL_PROT)
STATIC I32	S_avhv_index_sv(pTHX_ SV* sv);
STATIC I32	S_avhv_index(pTHX_ AV* av, SV* sv, U32 hash);
#endif

#if defined(PERL_IN_DOOP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_do_trans_simple(pTHX_ SV *sv);
STATIC I32	S_do_trans_count(pTHX_ SV *sv);
STATIC I32	S_do_trans_complex(pTHX_ SV *sv);
STATIC I32	S_do_trans_simple_utf8(pTHX_ SV *sv);
STATIC I32	S_do_trans_count_utf8(pTHX_ SV *sv);
STATIC I32	S_do_trans_complex_utf8(pTHX_ SV *sv);
#endif

#if defined(PERL_IN_GV_C) || defined(PERL_DECL_PROT)
STATIC void	S_gv_init_sv(pTHX_ GV *gv, I32 sv_type);
#endif

#if defined(PERL_IN_HV_C) || defined(PERL_DECL_PROT)
STATIC void	S_hsplit(pTHX_ HV *hv);
STATIC void	S_hfreeentries(pTHX_ HV *hv);
STATIC void	S_more_he(pTHX);
STATIC HE*	S_new_he(pTHX);
STATIC void	S_del_he(pTHX_ HE *p);
STATIC HEK*	S_save_hek(pTHX_ const char *str, I32 len, U32 hash);
STATIC void	S_hv_magic_check(pTHX_ HV *hv, bool *needs_copy, bool *needs_store);
#endif

#if defined(PERL_IN_MG_C) || defined(PERL_DECL_PROT)
STATIC void	S_save_magic(pTHX_ I32 mgs_ix, SV *sv);
STATIC int	S_magic_methpack(pTHX_ SV *sv, MAGIC *mg, char *meth);
STATIC int	S_magic_methcall(pTHX_ SV *sv, MAGIC *mg, char *meth, I32 f, int n, SV *val);
#endif

#if defined(PERL_IN_OP_C) || defined(PERL_DECL_PROT)
STATIC I32	S_list_assignment(pTHX_ OP *o);
STATIC void	S_bad_type(pTHX_ I32 n, char *t, char *name, OP *kid);
STATIC void	S_cop_free(pTHX_ COP *cop);
STATIC OP*	S_modkids(pTHX_ OP *o, I32 type);
STATIC void	S_no_bareword_allowed(pTHX_ OP *o);
STATIC OP*	S_no_fh_allowed(pTHX_ OP *o);
STATIC OP*	S_scalarboolean(pTHX_ OP *o);
STATIC OP*	S_too_few_arguments(pTHX_ OP *o, char* name);
STATIC OP*	S_too_many_arguments(pTHX_ OP *o, char* name);
STATIC U8*	S_trlist_upgrade(pTHX_ U8** sp, U8** ep);
STATIC void	S_op_clear(pTHX_ OP* o);
STATIC void	S_null(pTHX_ OP* o);
STATIC PADOFFSET	S_pad_addlex(pTHX_ SV* name);
STATIC PADOFFSET	S_pad_findlex(pTHX_ char* name, PADOFFSET newoff, U32 seq, CV* startcv, I32 cx_ix, I32 saweval, U32 flags);
STATIC OP*	S_newDEFSVOP(pTHX);
STATIC OP*	S_new_logop(pTHX_ I32 type, I32 flags, OP **firstp, OP **otherp);
STATIC void	S_simplify_sort(pTHX_ OP *o);
STATIC bool	S_is_handle_constructor(pTHX_ OP *o, I32 argnum);
STATIC char*	S_gv_ename(pTHX_ GV *gv);
STATIC void	S_cv_dump(pTHX_ CV *cv);
STATIC CV*	S_cv_clone2(pTHX_ CV *proto, CV *outside);
STATIC bool	S_scalar_mod_type(pTHX_ OP *o, I32 type);
STATIC OP *	S_my_kid(pTHX_ OP *o, OP *attrs);
STATIC OP *	S_dup_attrlist(pTHX_ OP *o);
STATIC void	S_apply_attrs(pTHX_ HV *stash, SV *target, OP *attrs);
#  if defined(PL_OP_SLAB_ALLOC)
STATIC void*	S_Slab_Alloc(pTHX_ int m, size_t sz);
#  endif
#endif

#if defined(PERL_IN_PERL_C) || defined(PERL_DECL_PROT)
STATIC void	S_find_beginning(pTHX);
STATIC void	S_forbid_setid(pTHX_ char *);
STATIC void	S_incpush(pTHX_ char *, int, int);
STATIC void	S_init_interp(pTHX);
STATIC void	S_init_ids(pTHX);
STATIC void	S_init_lexer(pTHX);
STATIC void	S_init_main_stash(pTHX);
STATIC void	S_init_perllib(pTHX);
STATIC void	S_init_postdump_symbols(pTHX_ int, char **, char **);
STATIC void	S_init_predump_symbols(pTHX);
STATIC void	S_my_exit_jump(pTHX) __attribute__((noreturn));
STATIC void	S_nuke_stacks(pTHX);
STATIC void	S_open_script(pTHX_ char *, bool, SV *, int *fd);
STATIC void	S_usage(pTHX_ char *);
STATIC void	S_validate_suid(pTHX_ char *, char*, int);
#  if defined(IAMSUID)
STATIC int	S_fd_on_nosuid_fs(pTHX_ int fd);
#  endif
STATIC void*	S_parse_body(pTHX_ char **env, XSINIT_t xsinit);
STATIC void*	S_run_body(pTHX_ I32 oldscope);
STATIC void	S_call_body(pTHX_ OP *myop, int is_eval);
STATIC void*	S_call_list_body(pTHX_ CV *cv);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
STATIC void*	S_vparse_body(pTHX_ va_list args);
STATIC void*	S_vrun_body(pTHX_ va_list args);
STATIC void*	S_vcall_body(pTHX_ va_list args);
STATIC void*	S_vcall_list_body(pTHX_ va_list args);
#endif
#  if defined(USE_THREADS)
STATIC struct perl_thread *	S_init_main_thread(pTHX);
#  endif
#endif

#if defined(PERL_IN_PP_C) || defined(PERL_DECL_PROT)
STATIC void	S_doencodes(pTHX_ SV* sv, char* s, I32 len);
STATIC SV*	S_refto(pTHX_ SV* sv);
STATIC U32	S_seed(pTHX);
STATIC SV*	S_mul128(pTHX_ SV *sv, U8 m);
STATIC SV*	S_is_an_int(pTHX_ char *s, STRLEN l);
STATIC int	S_div128(pTHX_ SV *pnum, bool *done);
#endif

#if defined(PERL_IN_PP_CTL_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_docatch(pTHX_ OP *o);
STATIC void*	S_docatch_body(pTHX);
#if defined(PERL_FLEXIBLE_EXCEPTIONS)
STATIC void*	S_vdocatch_body(pTHX_ va_list args);
#endif
STATIC OP*	S_dofindlabel(pTHX_ OP *o, char *label, OP **opstack, OP **oplimit);
STATIC void	S_doparseform(pTHX_ SV *sv);
STATIC I32	S_dopoptoeval(pTHX_ I32 startingblock);
STATIC I32	S_dopoptolabel(pTHX_ char *label);
STATIC I32	S_dopoptoloop(pTHX_ I32 startingblock);
STATIC I32	S_dopoptosub(pTHX_ I32 startingblock);
STATIC I32	S_dopoptosub_at(pTHX_ PERL_CONTEXT* cxstk, I32 startingblock);
STATIC void	S_save_lines(pTHX_ AV *array, SV *sv);
STATIC OP*	S_doeval(pTHX_ int gimme, OP** startop);
STATIC PerlIO *	S_doopen_pmc(pTHX_ const char *name, const char *mode);
STATIC void	S_qsortsv(pTHX_ SV ** array, size_t num_elts, SVCOMPARE_t f);
#endif

#if defined(PERL_IN_PP_HOT_C) || defined(PERL_DECL_PROT)
STATIC int	S_do_maybe_phash(pTHX_ AV *ary, SV **lelem, SV **firstlelem, SV **relem, SV **lastrelem);
STATIC void	S_do_oddball(pTHX_ HV *hash, SV **relem, SV **firstrelem);
STATIC CV*	S_get_db_sub(pTHX_ SV **svp, CV *cv);
STATIC SV*	S_method_common(pTHX_ SV* meth, U32* hashp);
#endif

#if defined(PERL_IN_PP_SYS_C) || defined(PERL_DECL_PROT)
STATIC OP*	S_doform(pTHX_ CV *cv, GV *gv, OP *retop);
STATIC int	S_emulate_eaccess(pTHX_ const char* path, Mode_t mode);
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
STATIC int	S_dooneliner(pTHX_ char *cmd, char *filename);
#  endif
#endif

#if defined(PERL_IN_REGCOMP_C) || defined(PERL_DECL_PROT)
STATIC regnode*	S_reg(pTHX_ I32, I32 *);
STATIC regnode*	S_reganode(pTHX_ U8, U32);
STATIC regnode*	S_regatom(pTHX_ I32 *);
STATIC regnode*	S_regbranch(pTHX_ I32 *, I32);
STATIC void	S_reguni(pTHX_ UV, char *, STRLEN*);
STATIC regnode*	S_regclass(pTHX);
STATIC regnode*	S_regclassutf8(pTHX);
STATIC I32	S_regcurly(pTHX_ char *);
STATIC regnode*	S_reg_node(pTHX_ U8);
STATIC regnode*	S_regpiece(pTHX_ I32 *);
STATIC void	S_reginsert(pTHX_ U8, regnode *);
STATIC void	S_regoptail(pTHX_ regnode *, regnode *);
STATIC void	S_regtail(pTHX_ regnode *, regnode *);
STATIC char*	S_regwhite(pTHX_ char *, char *);
STATIC char*	S_nextchar(pTHX);
STATIC regnode*	S_dumpuntil(pTHX_ regnode *start, regnode *node, regnode *last, SV* sv, I32 l);
STATIC void	S_put_byte(pTHX_ SV* sv, int c);
STATIC void	S_scan_commit(pTHX_ struct scan_data_t *data);
STATIC void	S_cl_anything(pTHX_ struct regnode_charclass_class *cl);
STATIC int	S_cl_is_anything(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_init(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_init_zero(pTHX_ struct regnode_charclass_class *cl);
STATIC void	S_cl_and(pTHX_ struct regnode_charclass_class *cl, struct regnode_charclass_class *and_with);
STATIC void	S_cl_or(pTHX_ struct regnode_charclass_class *cl, struct regnode_charclass_class *or_with);
STATIC I32	S_study_chunk(pTHX_ regnode **scanp, I32 *deltap, regnode *last, struct scan_data_t *data, U32 flags);
STATIC I32	S_add_data(pTHX_ I32 n, char *s);
STATIC void	S_re_croak2(pTHX_ const char* pat1, const char* pat2, ...) __attribute__((noreturn));
STATIC I32	S_regpposixcc(pTHX_ I32 value);
STATIC void	S_checkposixcc(pTHX);
#endif

#if defined(PERL_IN_REGEXEC_C) || defined(PERL_DECL_PROT)
STATIC I32	S_regmatch(pTHX_ regnode *prog);
STATIC I32	S_regrepeat(pTHX_ regnode *p, I32 max);
STATIC I32	S_regrepeat_hard(pTHX_ regnode *p, I32 max, I32 *lp);
STATIC I32	S_regtry(pTHX_ regexp *prog, char *startpos);
STATIC bool	S_reginclass(pTHX_ regnode *p, I32 c);
STATIC bool	S_reginclassutf8(pTHX_ regnode *f, U8* p);
STATIC CHECKPOINT	S_regcppush(pTHX_ I32 parenfloor);
STATIC char*	S_regcppop(pTHX);
STATIC char*	S_regcp_set_to(pTHX_ I32 ss);
STATIC void	S_cache_re(pTHX_ regexp *prog);
STATIC U8*	S_reghop(pTHX_ U8 *pos, I32 off);
STATIC U8*	S_reghopmaybe(pTHX_ U8 *pos, I32 off);
STATIC char*	S_find_byclass(pTHX_ regexp * prog, regnode *c, char *s, char *strend, char *startpos, I32 norun);
#endif

#if defined(PERL_IN_RUN_C) || defined(PERL_DECL_PROT)
STATIC void	S_debprof(pTHX_ OP *o);
#endif

#if defined(PERL_IN_SCOPE_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_save_scalar_at(pTHX_ SV **sptr);
#endif

#if defined(PERL_IN_SV_C) || defined(PERL_DECL_PROT)
STATIC IV	S_asIV(pTHX_ SV* sv);
STATIC UV	S_asUV(pTHX_ SV* sv);
STATIC SV*	S_more_sv(pTHX);
STATIC void	S_more_xiv(pTHX);
STATIC void	S_more_xnv(pTHX);
STATIC void	S_more_xpv(pTHX);
STATIC void	S_more_xpviv(pTHX);
STATIC void	S_more_xpvnv(pTHX);
STATIC void	S_more_xpvcv(pTHX);
STATIC void	S_more_xpvav(pTHX);
STATIC void	S_more_xpvhv(pTHX);
STATIC void	S_more_xpvmg(pTHX);
STATIC void	S_more_xpvlv(pTHX);
STATIC void	S_more_xpvbm(pTHX);
STATIC void	S_more_xrv(pTHX);
STATIC XPVIV*	S_new_xiv(pTHX);
STATIC XPVNV*	S_new_xnv(pTHX);
STATIC XPV*	S_new_xpv(pTHX);
STATIC XPVIV*	S_new_xpviv(pTHX);
STATIC XPVNV*	S_new_xpvnv(pTHX);
STATIC XPVCV*	S_new_xpvcv(pTHX);
STATIC XPVAV*	S_new_xpvav(pTHX);
STATIC XPVHV*	S_new_xpvhv(pTHX);
STATIC XPVMG*	S_new_xpvmg(pTHX);
STATIC XPVLV*	S_new_xpvlv(pTHX);
STATIC XPVBM*	S_new_xpvbm(pTHX);
STATIC XRV*	S_new_xrv(pTHX);
STATIC void	S_del_xiv(pTHX_ XPVIV* p);
STATIC void	S_del_xnv(pTHX_ XPVNV* p);
STATIC void	S_del_xpv(pTHX_ XPV* p);
STATIC void	S_del_xpviv(pTHX_ XPVIV* p);
STATIC void	S_del_xpvnv(pTHX_ XPVNV* p);
STATIC void	S_del_xpvcv(pTHX_ XPVCV* p);
STATIC void	S_del_xpvav(pTHX_ XPVAV* p);
STATIC void	S_del_xpvhv(pTHX_ XPVHV* p);
STATIC void	S_del_xpvmg(pTHX_ XPVMG* p);
STATIC void	S_del_xpvlv(pTHX_ XPVLV* p);
STATIC void	S_del_xpvbm(pTHX_ XPVBM* p);
STATIC void	S_del_xrv(pTHX_ XRV* p);
STATIC void	S_sv_unglob(pTHX_ SV* sv);
STATIC void	S_not_a_number(pTHX_ SV *sv);
STATIC I32	S_visit(pTHX_ SVFUNC_t f);
#  if defined(DEBUGGING)
STATIC void	S_del_sv(pTHX_ SV *p);
#  endif
#endif

#if defined(PERL_IN_TOKE_C) || defined(PERL_DECL_PROT)
STATIC void	S_check_uni(pTHX);
STATIC void	S_force_next(pTHX_ I32 type);
STATIC char*	S_force_version(pTHX_ char *start);
STATIC char*	S_force_word(pTHX_ char *start, int token, int check_keyword, int allow_pack, int allow_tick);
STATIC SV*	S_tokeq(pTHX_ SV *sv);
STATIC char*	S_scan_const(pTHX_ char *start);
STATIC char*	S_scan_formline(pTHX_ char *s);
STATIC char*	S_scan_heredoc(pTHX_ char *s);
STATIC char*	S_scan_ident(pTHX_ char *s, char *send, char *dest, STRLEN destlen, I32 ck_uni);
STATIC char*	S_scan_inputsymbol(pTHX_ char *start);
STATIC char*	S_scan_pat(pTHX_ char *start, I32 type);
STATIC char*	S_scan_str(pTHX_ char *start, int keep_quoted, int keep_delims);
STATIC char*	S_scan_subst(pTHX_ char *start);
STATIC char*	S_scan_trans(pTHX_ char *start);
STATIC char*	S_scan_word(pTHX_ char *s, char *dest, STRLEN destlen, int allow_package, STRLEN *slp);
STATIC char*	S_skipspace(pTHX_ char *s);
STATIC char*	S_swallow_bom(pTHX_ U8 *s);
STATIC void	S_checkcomma(pTHX_ char *s, char *name, char *what);
STATIC void	S_force_ident(pTHX_ char *s, int kind);
STATIC void	S_incline(pTHX_ char *s);
STATIC int	S_intuit_method(pTHX_ char *s, GV *gv);
STATIC int	S_intuit_more(pTHX_ char *s);
STATIC I32	S_lop(pTHX_ I32 f, int x, char *s);
STATIC void	S_missingterm(pTHX_ char *s);
STATIC void	S_no_op(pTHX_ char *what, char *s);
STATIC void	S_set_csh(pTHX);
STATIC I32	S_sublex_done(pTHX);
STATIC I32	S_sublex_push(pTHX);
STATIC I32	S_sublex_start(pTHX);
STATIC char *	S_filter_gets(pTHX_ SV *sv, PerlIO *fp, STRLEN append);
STATIC HV *	S_find_in_my_stash(pTHX_ char *pkgname, I32 len);
STATIC SV*	S_new_constant(pTHX_ char *s, STRLEN len, const char *key, SV *sv, SV *pv, const char *type);
STATIC int	S_ao(pTHX_ int toketype);
STATIC void	S_depcom(pTHX);
STATIC char*	S_incl_perldb(pTHX);
#if 0
STATIC I32	S_utf16_textfilter(pTHX_ int idx, SV *sv, int maxlen);
STATIC I32	S_utf16rev_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#endif
#  if defined(CRIPPLED_CC)
STATIC int	S_uni(pTHX_ I32 f, char *s);
#  endif
#  if defined(PERL_CR_FILTER)
STATIC I32	S_cr_textfilter(pTHX_ int idx, SV *sv, int maxlen);
#  endif
#endif

#if defined(PERL_IN_UNIVERSAL_C) || defined(PERL_DECL_PROT)
STATIC SV*	S_isa_lookup(pTHX_ HV *stash, const char *name, int len, int level);
#endif

#if defined(PERL_IN_UTIL_C) || defined(PERL_DECL_PROT)
STATIC char*	S_stdize_locale(pTHX_ char* locs);
STATIC SV*	S_mess_alloc(pTHX);
#  if defined(LEAKTEST)
STATIC void	S_xstat(pTHX_ int);
#  endif
#endif

#if defined(PERL_OBJECT)
};
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\regexp.h ===
/*    regexp.h
 */

/*
 * Definitions etc. for regexp(3) routines.
 *
 * Caveat:  this is V8 regexp(3) [actually, a reimplementation thereof],
 * not the System V one.
 */


struct regnode {
    U8	flags;
    U8  type;
    U16 next_off;
};

typedef struct regnode regnode;

struct reg_substr_data;

struct reg_data;

typedef struct regexp {
	I32 *startp;
	I32 *endp;
	regnode *regstclass;
        struct reg_substr_data *substrs;
	char *precomp;		/* pre-compilation regular expression */
        struct reg_data *data;	/* Additional data. */
	char *subbeg;		/* saved or original string 
				   so \digit works forever. */
	I32 sublen;		/* Length of string pointed by subbeg */
	I32 refcnt;
	I32 minlen;		/* mininum possible length of $& */
	I32 prelen;		/* length of precomp */
	U32 nparens;		/* number of parentheses */
	U32 lastparen;		/* last paren matched */
	U32 reganch;		/* Internal use only +
				   Tainted information used by regexec? */
	regnode program[1];	/* Unwarranted chumminess with compiler. */
} regexp;

#define ROPT_ANCH		(ROPT_ANCH_BOL|ROPT_ANCH_MBOL|ROPT_ANCH_GPOS|ROPT_ANCH_SBOL)
#define ROPT_ANCH_SINGLE	(ROPT_ANCH_SBOL|ROPT_ANCH_GPOS)
#define ROPT_ANCH_BOL	 	0x00001
#define ROPT_ANCH_MBOL	 	0x00002
#define ROPT_ANCH_SBOL	 	0x00004
#define ROPT_ANCH_GPOS	 	0x00008
#define ROPT_SKIP		0x00010
#define ROPT_IMPLICIT		0x00020	/* Converted .* to ^.* */
#define ROPT_NOSCAN		0x00040	/* Check-string always at start. */
#define ROPT_GPOS_SEEN		0x00080
#define ROPT_CHECK_ALL		0x00100
#define ROPT_LOOKBEHIND_SEEN	0x00200
#define ROPT_EVAL_SEEN		0x00400

/* 0xf800 of reganch is used by PMf_COMPILETIME */

#define ROPT_UTF8		0x10000
#define ROPT_NAUGHTY		0x20000 /* how exponential is this pattern? */
#define ROPT_COPY_DONE		0x40000	/* subbeg is a copy of the string */
#define ROPT_TAINTED_SEEN	0x80000

#define RE_USE_INTUIT_NOML	0x0100000 /* Best to intuit before matching */
#define RE_USE_INTUIT_ML	0x0200000
#define REINT_AUTORITATIVE_NOML	0x0400000 /* Can trust a positive answer */
#define REINT_AUTORITATIVE_ML	0x0800000 
#define REINT_ONCE_NOML		0x1000000 /* Intuit can succed once only. */
#define REINT_ONCE_ML		0x2000000
#define RE_INTUIT_ONECHAR	0x4000000
#define RE_INTUIT_TAIL		0x8000000

#define RE_USE_INTUIT		(RE_USE_INTUIT_NOML|RE_USE_INTUIT_ML)
#define REINT_AUTORITATIVE	(REINT_AUTORITATIVE_NOML|REINT_AUTORITATIVE_ML)
#define REINT_ONCE		(REINT_ONCE_NOML|REINT_ONCE_ML)

#define RX_MATCH_TAINTED(prog)	((prog)->reganch & ROPT_TAINTED_SEEN)
#define RX_MATCH_TAINTED_on(prog) ((prog)->reganch |= ROPT_TAINTED_SEEN)
#define RX_MATCH_TAINTED_off(prog) ((prog)->reganch &= ~ROPT_TAINTED_SEEN)
#define RX_MATCH_TAINTED_set(prog, t) ((t) \
				       ? RX_MATCH_TAINTED_on(prog) \
				       : RX_MATCH_TAINTED_off(prog))

#define RX_MATCH_COPIED(prog)		((prog)->reganch & ROPT_COPY_DONE)
#define RX_MATCH_COPIED_on(prog)	((prog)->reganch |= ROPT_COPY_DONE)
#define RX_MATCH_COPIED_off(prog)	((prog)->reganch &= ~ROPT_COPY_DONE)
#define RX_MATCH_COPIED_set(prog,t)	((t) \
					 ? RX_MATCH_COPIED_on(prog) \
					 : RX_MATCH_COPIED_off(prog))

#define REXEC_COPY_STR	0x01		/* Need to copy the string. */
#define REXEC_CHECKED	0x02		/* check_substr already checked. */
#define REXEC_SCREAM	0x04		/* use scream table. */
#define REXEC_IGNOREPOS	0x08		/* \G matches at start. */
#define REXEC_NOT_FIRST	0x10		/* This is another iteration of //g. */
#define REXEC_ML	0x20		/* $* was set. */

#define ReREFCNT_inc(re) ((void)(re && re->refcnt++), re)
#define ReREFCNT_dec(re) CALLREGFREE(aTHX_ re)

#define FBMcf_TAIL_DOLLAR	1
#define FBMcf_TAIL_DOLLARM	2
#define FBMcf_TAIL_Z		4
#define FBMcf_TAIL_z		8
#define FBMcf_TAIL		(FBMcf_TAIL_DOLLAR|FBMcf_TAIL_DOLLARM|FBMcf_TAIL_Z|FBMcf_TAIL_z)

#define FBMrf_MULTILINE	1

struct re_scream_pos_data_s;
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\regnodes.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regcomp.pl from regcomp.sym.
   Any changes made here will be lost!
*/

#define	END	0	/*    0 End of program. */
#define	SUCCEED	1	/*  0x1 Return from a subroutine, basically. */
#define	BOL	2	/*  0x2 Match "" at beginning of line. */
#define	MBOL	3	/*  0x3 Same, assuming multiline. */
#define	SBOL	4	/*  0x4 Same, assuming singleline. */
#define	EOS	5	/*  0x5 Match "" at end of string. */
#define	EOL	6	/*  0x6 Match "" at end of line. */
#define	MEOL	7	/*  0x7 Same, assuming multiline. */
#define	SEOL	8	/*  0x8 Same, assuming singleline. */
#define	BOUND	9	/*  0x9 Match "" at any word boundary */
#define	BOUNDUTF8	10	/*  0xa Match "" at any word boundary */
#define	BOUNDL	11	/*  0xb Match "" at any word boundary */
#define	BOUNDLUTF8	12	/*  0xc Match "" at any word boundary */
#define	NBOUND	13	/*  0xd Match "" at any word non-boundary */
#define	NBOUNDUTF8	14	/*  0xe Match "" at any word non-boundary */
#define	NBOUNDL	15	/*  0xf Match "" at any word non-boundary */
#define	NBOUNDLUTF8	16	/* 0x10 Match "" at any word non-boundary */
#define	GPOS	17	/* 0x11 Matches where last m//g left off. */
#define	REG_ANY	18	/* 0x12 Match any one character (except newline). */
#define	ANYUTF8	19	/* 0x13 Match any one Unicode character (except newline). */
#define	SANY	20	/* 0x14 Match any one character. */
#define	SANYUTF8	21	/* 0x15 Match any one Unicode character. */
#define	ANYOF	22	/* 0x16 Match character in (or not in) this class. */
#define	ANYOFUTF8	23	/* 0x17 Match character in (or not in) this class. */
#define	ALNUM	24	/* 0x18 Match any alphanumeric character */
#define	ALNUMUTF8	25	/* 0x19 Match any alphanumeric character in utf8 */
#define	ALNUML	26	/* 0x1a Match any alphanumeric char in locale */
#define	ALNUMLUTF8	27	/* 0x1b Match any alphanumeric char in locale+utf8 */
#define	NALNUM	28	/* 0x1c Match any non-alphanumeric character */
#define	NALNUMUTF8	29	/* 0x1d Match any non-alphanumeric character in utf8 */
#define	NALNUML	30	/* 0x1e Match any non-alphanumeric char in locale */
#define	NALNUMLUTF8	31	/* 0x1f Match any non-alphanumeric char in locale+utf8 */
#define	SPACE	32	/* 0x20 Match any whitespace character */
#define	SPACEUTF8	33	/* 0x21 Match any whitespace character in utf8 */
#define	SPACEL	34	/* 0x22 Match any whitespace char in locale */
#define	SPACELUTF8	35	/* 0x23 Match any whitespace char in locale+utf8 */
#define	NSPACE	36	/* 0x24 Match any non-whitespace character */
#define	NSPACEUTF8	37	/* 0x25 Match any non-whitespace character in utf8 */
#define	NSPACEL	38	/* 0x26 Match any non-whitespace char in locale */
#define	NSPACELUTF8	39	/* 0x27 Match any non-whitespace char in locale+utf8 */
#define	DIGIT	40	/* 0x28 Match any numeric character */
#define	DIGITUTF8	41	/* 0x29 Match any numeric character in utf8 */
#define	DIGITL	42	/* 0x2a Match any numeric character in locale */
#define	DIGITLUTF8	43	/* 0x2b Match any numeric character in locale+utf8 */
#define	NDIGIT	44	/* 0x2c Match any non-numeric character */
#define	NDIGITUTF8	45	/* 0x2d Match any non-numeric character in utf8 */
#define	NDIGITL	46	/* 0x2e Match any non-numeric character in locale */
#define	NDIGITLUTF8	47	/* 0x2f Match any non-numeric character in locale+utf8 */
#define	CLUMP	48	/* 0x30 Match any combining character sequence */
#define	BRANCH	49	/* 0x31 Match this alternative, or the next... */
#define	BACK	50	/* 0x32 Match "", "next" ptr points backward. */
#define	EXACT	51	/* 0x33 Match this string (preceded by length). */
#define	EXACTF	52	/* 0x34 Match this string, folded (prec. by length). */
#define	EXACTFL	53	/* 0x35 Match this string, folded in locale (w/len). */
#define	NOTHING	54	/* 0x36 Match empty string. */
#define	TAIL	55	/* 0x37 Match empty string. Can jump here from outside. */
#define	STAR	56	/* 0x38 Match this (simple) thing 0 or more times. */
#define	PLUS	57	/* 0x39 Match this (simple) thing 1 or more times. */
#define	CURLY	58	/* 0x3a Match this simple thing {n,m} times. */
#define	CURLYN	59	/* 0x3b Match next-after-this simple thing  */
#define	CURLYM	60	/* 0x3c Match this medium-complex thing {n,m} times. */
#define	CURLYX	61	/* 0x3d Match this complex thing {n,m} times. */
#define	WHILEM	62	/* 0x3e Do curly processing and see if rest matches. */
#define	OPEN	63	/* 0x3f Mark this point in input as start of #n. */
#define	CLOSE	64	/* 0x40 Analogous to OPEN. */
#define	REF	65	/* 0x41 Match some already matched string */
#define	REFF	66	/* 0x42 Match already matched string, folded */
#define	REFFL	67	/* 0x43 Match already matched string, folded in loc. */
#define	IFMATCH	68	/* 0x44 Succeeds if the following matches. */
#define	UNLESSM	69	/* 0x45 Fails if the following matches. */
#define	SUSPEND	70	/* 0x46 "Independent" sub-RE. */
#define	IFTHEN	71	/* 0x47 Switch, should be preceeded by switcher . */
#define	GROUPP	72	/* 0x48 Whether the group matched. */
#define	LONGJMP	73	/* 0x49 Jump far away. */
#define	BRANCHJ	74	/* 0x4a BRANCH with long offset. */
#define	EVAL	75	/* 0x4b Execute some Perl code. */
#define	MINMOD	76	/* 0x4c Next operator is not greedy. */
#define	LOGICAL	77	/* 0x4d Next opcode should set the flag only. */
#define	RENUM	78	/* 0x4e Group with independently numbered parens. */
#define	OPTIMIZED	79	/* 0x4f Placeholder for dump. */

#ifndef DOINIT
EXTCONST U8 PL_regkind[];
#else
EXTCONST U8 PL_regkind[] = {
	END,		/* END */
	END,		/* SUCCEED */
	BOL,		/* BOL */
	BOL,		/* MBOL */
	BOL,		/* SBOL */
	EOL,		/* EOS */
	EOL,		/* EOL */
	EOL,		/* MEOL */
	EOL,		/* SEOL */
	BOUND,		/* BOUND */
	BOUND,		/* BOUNDUTF8 */
	BOUND,		/* BOUNDL */
	BOUND,		/* BOUNDLUTF8 */
	NBOUND,		/* NBOUND */
	NBOUND,		/* NBOUNDUTF8 */
	NBOUND,		/* NBOUNDL */
	NBOUND,		/* NBOUNDLUTF8 */
	GPOS,		/* GPOS */
	REG_ANY,		/* REG_ANY */
	REG_ANY,		/* ANYUTF8 */
	REG_ANY,		/* SANY */
	REG_ANY,		/* SANYUTF8 */
	ANYOF,		/* ANYOF */
	ANYOF,		/* ANYOFUTF8 */
	ALNUM,		/* ALNUM */
	ALNUM,		/* ALNUMUTF8 */
	ALNUM,		/* ALNUML */
	ALNUM,		/* ALNUMLUTF8 */
	NALNUM,		/* NALNUM */
	NALNUM,		/* NALNUMUTF8 */
	NALNUM,		/* NALNUML */
	NALNUM,		/* NALNUMLUTF8 */
	SPACE,		/* SPACE */
	SPACE,		/* SPACEUTF8 */
	SPACE,		/* SPACEL */
	SPACE,		/* SPACELUTF8 */
	NSPACE,		/* NSPACE */
	NSPACE,		/* NSPACEUTF8 */
	NSPACE,		/* NSPACEL */
	NSPACE,		/* NSPACELUTF8 */
	DIGIT,		/* DIGIT */
	DIGIT,		/* DIGITUTF8 */
	DIGIT,		/* DIGITL */
	DIGIT,		/* DIGITLUTF8 */
	NDIGIT,		/* NDIGIT */
	NDIGIT,		/* NDIGITUTF8 */
	NDIGIT,		/* NDIGITL */
	NDIGIT,		/* NDIGITLUTF8 */
	CLUMP,		/* CLUMP */
	BRANCH,		/* BRANCH */
	BACK,		/* BACK */
	EXACT,		/* EXACT */
	EXACT,		/* EXACTF */
	EXACT,		/* EXACTFL */
	NOTHING,		/* NOTHING */
	NOTHING,		/* TAIL */
	STAR,		/* STAR */
	PLUS,		/* PLUS */
	CURLY,		/* CURLY */
	CURLY,		/* CURLYN */
	CURLY,		/* CURLYM */
	CURLY,		/* CURLYX */
	WHILEM,		/* WHILEM */
	OPEN,		/* OPEN */
	CLOSE,		/* CLOSE */
	REF,		/* REF */
	REF,		/* REFF */
	REF,		/* REFFL */
	BRANCHJ,		/* IFMATCH */
	BRANCHJ,		/* UNLESSM */
	BRANCHJ,		/* SUSPEND */
	BRANCHJ,		/* IFTHEN */
	GROUPP,		/* GROUPP */
	LONGJMP,		/* LONGJMP */
	BRANCHJ,		/* BRANCHJ */
	EVAL,		/* EVAL */
	MINMOD,		/* MINMOD */
	LOGICAL,		/* LOGICAL */
	BRANCHJ,		/* RENUM */
	NOTHING,		/* OPTIMIZED */
};
#endif


#ifdef REG_COMP_C
static const U8 regarglen[] = {
	0,		/* END */
	0,		/* SUCCEED */
	0,		/* BOL */
	0,		/* MBOL */
	0,		/* SBOL */
	0,		/* EOS */
	0,		/* EOL */
	0,		/* MEOL */
	0,		/* SEOL */
	0,		/* BOUND */
	0,		/* BOUNDUTF8 */
	0,		/* BOUNDL */
	0,		/* BOUNDLUTF8 */
	0,		/* NBOUND */
	0,		/* NBOUNDUTF8 */
	0,		/* NBOUNDL */
	0,		/* NBOUNDLUTF8 */
	0,		/* GPOS */
	0,		/* REG_ANY */
	0,		/* ANYUTF8 */
	0,		/* SANY */
	0,		/* SANYUTF8 */
	0,		/* ANYOF */
	EXTRA_SIZE(struct regnode_1),		/* ANYOFUTF8 */
	0,		/* ALNUM */
	0,		/* ALNUMUTF8 */
	0,		/* ALNUML */
	0,		/* ALNUMLUTF8 */
	0,		/* NALNUM */
	0,		/* NALNUMUTF8 */
	0,		/* NALNUML */
	0,		/* NALNUMLUTF8 */
	0,		/* SPACE */
	0,		/* SPACEUTF8 */
	0,		/* SPACEL */
	0,		/* SPACELUTF8 */
	0,		/* NSPACE */
	0,		/* NSPACEUTF8 */
	0,		/* NSPACEL */
	0,		/* NSPACELUTF8 */
	0,		/* DIGIT */
	0,		/* DIGITUTF8 */
	0,		/* DIGITL */
	0,		/* DIGITLUTF8 */
	0,		/* NDIGIT */
	0,		/* NDIGITUTF8 */
	0,		/* NDIGITL */
	0,		/* NDIGITLUTF8 */
	0,		/* CLUMP */
	0,		/* BRANCH */
	0,		/* BACK */
	0,		/* EXACT */
	0,		/* EXACTF */
	0,		/* EXACTFL */
	0,		/* NOTHING */
	0,		/* TAIL */
	0,		/* STAR */
	0,		/* PLUS */
	EXTRA_SIZE(struct regnode_2),		/* CURLY */
	EXTRA_SIZE(struct regnode_2),		/* CURLYN */
	EXTRA_SIZE(struct regnode_2),		/* CURLYM */
	EXTRA_SIZE(struct regnode_2),		/* CURLYX */
	0,		/* WHILEM */
	EXTRA_SIZE(struct regnode_1),		/* OPEN */
	EXTRA_SIZE(struct regnode_1),		/* CLOSE */
	EXTRA_SIZE(struct regnode_1),		/* REF */
	EXTRA_SIZE(struct regnode_1),		/* REFF */
	EXTRA_SIZE(struct regnode_1),		/* REFFL */
	EXTRA_SIZE(struct regnode_1),		/* IFMATCH */
	EXTRA_SIZE(struct regnode_1),		/* UNLESSM */
	EXTRA_SIZE(struct regnode_1),		/* SUSPEND */
	EXTRA_SIZE(struct regnode_1),		/* IFTHEN */
	EXTRA_SIZE(struct regnode_1),		/* GROUPP */
	EXTRA_SIZE(struct regnode_1),		/* LONGJMP */
	EXTRA_SIZE(struct regnode_1),		/* BRANCHJ */
	EXTRA_SIZE(struct regnode_1),		/* EVAL */
	0,		/* MINMOD */
	0,		/* LOGICAL */
	EXTRA_SIZE(struct regnode_1),		/* RENUM */
	0,		/* OPTIMIZED */
};

static const char reg_off_by_arg[] = {
	0,		/* END */
	0,		/* SUCCEED */
	0,		/* BOL */
	0,		/* MBOL */
	0,		/* SBOL */
	0,		/* EOS */
	0,		/* EOL */
	0,		/* MEOL */
	0,		/* SEOL */
	0,		/* BOUND */
	0,		/* BOUNDUTF8 */
	0,		/* BOUNDL */
	0,		/* BOUNDLUTF8 */
	0,		/* NBOUND */
	0,		/* NBOUNDUTF8 */
	0,		/* NBOUNDL */
	0,		/* NBOUNDLUTF8 */
	0,		/* GPOS */
	0,		/* REG_ANY */
	0,		/* ANYUTF8 */
	0,		/* SANY */
	0,		/* SANYUTF8 */
	0,		/* ANYOF */
	0,		/* ANYOFUTF8 */
	0,		/* ALNUM */
	0,		/* ALNUMUTF8 */
	0,		/* ALNUML */
	0,		/* ALNUMLUTF8 */
	0,		/* NALNUM */
	0,		/* NALNUMUTF8 */
	0,		/* NALNUML */
	0,		/* NALNUMLUTF8 */
	0,		/* SPACE */
	0,		/* SPACEUTF8 */
	0,		/* SPACEL */
	0,		/* SPACELUTF8 */
	0,		/* NSPACE */
	0,		/* NSPACEUTF8 */
	0,		/* NSPACEL */
	0,		/* NSPACELUTF8 */
	0,		/* DIGIT */
	0,		/* DIGITUTF8 */
	0,		/* DIGITL */
	0,		/* DIGITLUTF8 */
	0,		/* NDIGIT */
	0,		/* NDIGITUTF8 */
	0,		/* NDIGITL */
	0,		/* NDIGITLUTF8 */
	0,		/* CLUMP */
	0,		/* BRANCH */
	0,		/* BACK */
	0,		/* EXACT */
	0,		/* EXACTF */
	0,		/* EXACTFL */
	0,		/* NOTHING */
	0,		/* TAIL */
	0,		/* STAR */
	0,		/* PLUS */
	0,		/* CURLY */
	0,		/* CURLYN */
	0,		/* CURLYM */
	0,		/* CURLYX */
	0,		/* WHILEM */
	0,		/* OPEN */
	0,		/* CLOSE */
	0,		/* REF */
	0,		/* REFF */
	0,		/* REFFL */
	2,		/* IFMATCH */
	2,		/* UNLESSM */
	1,		/* SUSPEND */
	1,		/* IFTHEN */
	0,		/* GROUPP */
	1,		/* LONGJMP */
	1,		/* BRANCHJ */
	0,		/* EVAL */
	0,		/* MINMOD */
	0,		/* LOGICAL */
	1,		/* RENUM */
	0,		/* OPTIMIZED */
};

#ifdef DEBUGGING
static const char * const reg_name[] = {
	"END",		/*    0 */
	"SUCCEED",		/*  0x1 */
	"BOL",		/*  0x2 */
	"MBOL",		/*  0x3 */
	"SBOL",		/*  0x4 */
	"EOS",		/*  0x5 */
	"EOL",		/*  0x6 */
	"MEOL",		/*  0x7 */
	"SEOL",		/*  0x8 */
	"BOUND",		/*  0x9 */
	"BOUNDUTF8",		/*  0xa */
	"BOUNDL",		/*  0xb */
	"BOUNDLUTF8",		/*  0xc */
	"NBOUND",		/*  0xd */
	"NBOUNDUTF8",		/*  0xe */
	"NBOUNDL",		/*  0xf */
	"NBOUNDLUTF8",		/* 0x10 */
	"GPOS",		/* 0x11 */
	"REG_ANY",		/* 0x12 */
	"ANYUTF8",		/* 0x13 */
	"SANY",		/* 0x14 */
	"SANYUTF8",		/* 0x15 */
	"ANYOF",		/* 0x16 */
	"ANYOFUTF8",		/* 0x17 */
	"ALNUM",		/* 0x18 */
	"ALNUMUTF8",		/* 0x19 */
	"ALNUML",		/* 0x1a */
	"ALNUMLUTF8",		/* 0x1b */
	"NALNUM",		/* 0x1c */
	"NALNUMUTF8",		/* 0x1d */
	"NALNUML",		/* 0x1e */
	"NALNUMLUTF8",		/* 0x1f */
	"SPACE",		/* 0x20 */
	"SPACEUTF8",		/* 0x21 */
	"SPACEL",		/* 0x22 */
	"SPACELUTF8",		/* 0x23 */
	"NSPACE",		/* 0x24 */
	"NSPACEUTF8",		/* 0x25 */
	"NSPACEL",		/* 0x26 */
	"NSPACELUTF8",		/* 0x27 */
	"DIGIT",		/* 0x28 */
	"DIGITUTF8",		/* 0x29 */
	"DIGITL",		/* 0x2a */
	"DIGITLUTF8",		/* 0x2b */
	"NDIGIT",		/* 0x2c */
	"NDIGITUTF8",		/* 0x2d */
	"NDIGITL",		/* 0x2e */
	"NDIGITLUTF8",		/* 0x2f */
	"CLUMP",		/* 0x30 */
	"BRANCH",		/* 0x31 */
	"BACK",		/* 0x32 */
	"EXACT",		/* 0x33 */
	"EXACTF",		/* 0x34 */
	"EXACTFL",		/* 0x35 */
	"NOTHING",		/* 0x36 */
	"TAIL",		/* 0x37 */
	"STAR",		/* 0x38 */
	"PLUS",		/* 0x39 */
	"CURLY",		/* 0x3a */
	"CURLYN",		/* 0x3b */
	"CURLYM",		/* 0x3c */
	"CURLYX",		/* 0x3d */
	"WHILEM",		/* 0x3e */
	"OPEN",		/* 0x3f */
	"CLOSE",		/* 0x40 */
	"REF",		/* 0x41 */
	"REFF",		/* 0x42 */
	"REFFL",		/* 0x43 */
	"IFMATCH",		/* 0x44 */
	"UNLESSM",		/* 0x45 */
	"SUSPEND",		/* 0x46 */
	"IFTHEN",		/* 0x47 */
	"GROUPP",		/* 0x48 */
	"LONGJMP",		/* 0x49 */
	"BRANCHJ",		/* 0x4a */
	"EVAL",		/* 0x4b */
	"MINMOD",		/* 0x4c */
	"LOGICAL",		/* 0x4d */
	"RENUM",		/* 0x4e */
	"OPTIMIZED",		/* 0x4f */
};

static const int reg_num = 80;

#endif /* DEBUGGING */
#endif /* REG_COMP_C */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\regcomp.h ===
/*    regcomp.h
 */

typedef OP OP_4tree;			/* Will be redefined later. */

/*
 * The "internal use only" fields in regexp.h are present to pass info from
 * compile to execute that permits the execute phase to run lots faster on
 * simple cases.  They are:
 *
 * regstart	sv that must begin a match; Nullch if none obvious
 * reganch	is the match anchored (at beginning-of-line only)?
 * regmust	string (pointer into program) that match must include, or NULL
 *  [regmust changed to SV* for bminstr()--law]
 * regmlen	length of regmust string
 *  [regmlen not used currently]
 *
 * Regstart and reganch permit very fast decisions on suitable starting points
 * for a match, cutting down the work a lot.  Regmust permits fast rejection
 * of lines that cannot possibly match.  The regmust tests are costly enough
 * that pregcomp() supplies a regmust only if the r.e. contains something
 * potentially expensive (at present, the only such thing detected is * or +
 * at the start of the r.e., which can involve a lot of backup).  Regmlen is
 * supplied because the test in pregexec() needs it and pregcomp() is computing
 * it anyway.
 * [regmust is now supplied always.  The tests that use regmust have a
 * heuristic that disables the test if it usually matches.]
 *
 * [In fact, we now use regmust in many cases to locate where the search
 * starts in the string, so if regback is >= 0, the regmust search is never
 * wasted effort.  The regback variable says how many characters back from
 * where regmust matched is the earliest possible start of the match.
 * For instance, /[a-z].foo/ has a regmust of 'foo' and a regback of 2.]
 */

/*
 * Structure for regexp "program".  This is essentially a linear encoding
 * of a nondeterministic finite-state machine (aka syntax charts or
 * "railroad normal form" in parsing technology).  Each node is an opcode
 * plus a "next" pointer, possibly plus an operand.  "Next" pointers of
 * all nodes except BRANCH implement concatenation; a "next" pointer with
 * a BRANCH on both ends of it is connecting two alternatives.  (Here we
 * have one of the subtle syntax dependencies:  an individual BRANCH (as
 * opposed to a collection of them) is never concatenated with anything
 * because of operator precedence.)  The operand of some types of node is
 * a literal string; for others, it is a node leading into a sub-FSM.  In
 * particular, the operand of a BRANCH node is the first node of the branch.
 * (NB this is *not* a tree structure:  the tail of the branch connects
 * to the thing following the set of BRANCHes.)  The opcodes are:
 */

/*
 * A node is one char of opcode followed by two chars of "next" pointer.
 * "Next" pointers are stored as two 8-bit pieces, high order first.  The
 * value is a positive offset from the opcode of the node containing it.
 * An operand, if any, simply follows the node.  (Note that much of the
 * code generation knows about this implicit relationship.)
 *
 * Using two bytes for the "next" pointer is vast overkill for most things,
 * but allows patterns to get big without disasters.
 *
 * [The "next" pointer is always aligned on an even
 * boundary, and reads the offset directly as a short.  Also, there is no
 * special test to reverse the sign of BACK pointers since the offset is
 * stored negative.]
 */

struct regnode_string {
    U8	str_len;
    U8  type;
    U16 next_off;
    char string[1];
};

struct regnode_1 {
    U8	flags;
    U8  type;
    U16 next_off;
    U32 arg1;
};

struct regnode_2 {
    U8	flags;
    U8  type;
    U16 next_off;
    U16 arg1;
    U16 arg2;
};

#define ANYOF_BITMAP_SIZE	32	/* 256 b/(8 b/B) */
#define ANYOF_CLASSBITMAP_SIZE	 4

struct regnode_charclass {
    U8	flags;
    U8  type;
    U16 next_off;
    char bitmap[ANYOF_BITMAP_SIZE];
};

struct regnode_charclass_class {
    U8	flags;
    U8  type;
    U16 next_off;
    char bitmap[ANYOF_BITMAP_SIZE];
    char classflags[ANYOF_CLASSBITMAP_SIZE];
};

/* XXX fix this description.
   Impose a limit of REG_INFTY on various pattern matching operations
   to limit stack growth and to avoid "infinite" recursions.
*/
/* The default size for REG_INFTY is I16_MAX, which is the same as
   SHORT_MAX (see perl.h).  Unfortunately I16 isn't necessarily 16 bits
   (see handy.h).  On the Cray C90, sizeof(short)==4 and hence I16_MAX is
   ((1<<31)-1), while on the Cray T90, sizeof(short)==8 and I16_MAX is
   ((1<<63)-1).  To limit stack growth to reasonable sizes, supply a
   smaller default.
	--Andy Dougherty  11 June 1998
*/
#if SHORTSIZE > 2
#  ifndef REG_INFTY
#    define REG_INFTY ((1<<15)-1)
#  endif
#endif

#ifndef REG_INFTY
#  define REG_INFTY I16_MAX
#endif

#define ARG_VALUE(arg) (arg)
#define ARG__SET(arg,val) ((arg) = (val))

#define ARG(p) ARG_VALUE(ARG_LOC(p))
#define ARG1(p) ARG_VALUE(ARG1_LOC(p))
#define ARG2(p) ARG_VALUE(ARG2_LOC(p))
#define ARG_SET(p, val) ARG__SET(ARG_LOC(p), (val))
#define ARG1_SET(p, val) ARG__SET(ARG1_LOC(p), (val))
#define ARG2_SET(p, val) ARG__SET(ARG2_LOC(p), (val))

#ifndef lint
#  define NEXT_OFF(p) ((p)->next_off)
#  define NODE_ALIGN(node)
#  define NODE_ALIGN_FILL(node) ((node)->flags = 0xde) /* deadbeef */
#else /* lint */
#  define NEXT_OFF(p) 0
#  define NODE_ALIGN(node)
#  define NODE_ALIGN_FILL(node)
#endif /* lint */

#define SIZE_ALIGN NODE_ALIGN

#define	OP(p)		((p)->type)
#define	OPERAND(p)	(((struct regnode_string *)p)->string)
#define MASK(p)		((char*)OPERAND(p))
#define	STR_LEN(p)	(((struct regnode_string *)p)->str_len)
#define	STRING(p)	(((struct regnode_string *)p)->string)
#define STR_SZ(l)	((l + sizeof(regnode) - 1) / sizeof(regnode))
#define NODE_SZ_STR(p)	(STR_SZ(STR_LEN(p))+1)

#define	NODE_ALIGN(node)
#define	ARG_LOC(p)	(((struct regnode_1 *)p)->arg1)
#define	ARG1_LOC(p)	(((struct regnode_2 *)p)->arg1)
#define	ARG2_LOC(p)	(((struct regnode_2 *)p)->arg2)
#define NODE_STEP_REGNODE	1	/* sizeof(regnode)/sizeof(regnode) */
#define EXTRA_STEP_2ARGS	EXTRA_SIZE(struct regnode_2)

#define NODE_STEP_B	4

#define	NEXTOPER(p)	((p) + NODE_STEP_REGNODE)
#define	PREVOPER(p)	((p) - NODE_STEP_REGNODE)

#define FILL_ADVANCE_NODE(ptr, op) STMT_START { \
    (ptr)->type = op;    (ptr)->next_off = 0;   (ptr)++; } STMT_END
#define FILL_ADVANCE_NODE_ARG(ptr, op, arg) STMT_START { \
    ARG_SET(ptr, arg);  FILL_ADVANCE_NODE(ptr, op); (ptr) += 1; } STMT_END

#define REG_MAGIC 0234

#define SIZE_ONLY (PL_regcode == &PL_regdummy)

/* Flags for node->flags of ANYOF */

#define ANYOF_CLASS	0x08
#define ANYOF_INVERT	0x04
#define ANYOF_FOLD	0x02
#define ANYOF_LOCALE	0x01

/* Used for regstclass only */
#define ANYOF_EOS	0x10		/* Can match an empty string too */

/* Character classes for node->classflags of ANYOF */
/* Should be synchronized with a table in regprop() */
/* 2n should pair with 2n+1 */

#define ANYOF_ALNUM	 0	/* \w, PL_utf8_alnum, utf8::IsWord, ALNUM */
#define ANYOF_NALNUM	 1
#define ANYOF_SPACE	 2	/* \s */
#define ANYOF_NSPACE	 3
#define ANYOF_DIGIT	 4
#define ANYOF_NDIGIT	 5
#define ANYOF_ALNUMC	 6	/* isalnum(3), utf8::IsAlnum, ALNUMC */
#define ANYOF_NALNUMC	 7
#define ANYOF_ALPHA	 8
#define ANYOF_NALPHA	 9
#define ANYOF_ASCII	10
#define ANYOF_NASCII	11
#define ANYOF_CNTRL	12
#define ANYOF_NCNTRL	13
#define ANYOF_GRAPH	14
#define ANYOF_NGRAPH	15
#define ANYOF_LOWER	16
#define ANYOF_NLOWER	17
#define ANYOF_PRINT	18
#define ANYOF_NPRINT	19
#define ANYOF_PUNCT	20
#define ANYOF_NPUNCT	21
#define ANYOF_UPPER	22
#define ANYOF_NUPPER	23
#define ANYOF_XDIGIT	24
#define ANYOF_NXDIGIT	25
#define ANYOF_PSXSPC	26	/* POSIX space: \s plus the vertical tab */
#define ANYOF_NPSXSPC	27
#define ANYOF_BLANK	28	/* GNU extension: space and tab */
#define ANYOF_NBLANK	29

#define ANYOF_MAX	32

/* Backward source code compatibility. */

#define ANYOF_ALNUML	 ANYOF_ALNUM
#define ANYOF_NALNUML	 ANYOF_NALNUM
#define ANYOF_SPACEL	 ANYOF_SPACE
#define ANYOF_NSPACEL	 ANYOF_NSPACE

/* Utility macros for the bitmap and classes of ANYOF */

#define ANYOF_SIZE		(sizeof(struct regnode_charclass))
#define ANYOF_CLASS_SIZE	(sizeof(struct regnode_charclass_class))

#define ANYOF_FLAGS(p)		((p)->flags)
#define ANYOF_FLAGS_ALL		0xff

#define ANYOF_BIT(c)		(1 << ((c) & 7))

#define ANYOF_CLASS_BYTE(p, c)	(((struct regnode_charclass_class*)(p))->classflags[((c) >> 3) & 3])
#define ANYOF_CLASS_SET(p, c)	(ANYOF_CLASS_BYTE(p, c) |=  ANYOF_BIT(c))
#define ANYOF_CLASS_CLEAR(p, c)	(ANYOF_CLASS_BYTE(p, c) &= ~ANYOF_BIT(c))
#define ANYOF_CLASS_TEST(p, c)	(ANYOF_CLASS_BYTE(p, c) &   ANYOF_BIT(c))

#define ANYOF_CLASS_ZERO(ret)	Zero(((struct regnode_charclass_class*)(ret))->classflags, ANYOF_CLASSBITMAP_SIZE, char)
#define ANYOF_BITMAP_ZERO(ret)	Zero(((struct regnode_charclass*)(ret))->bitmap, ANYOF_BITMAP_SIZE, char)

#define ANYOF_BITMAP(p)		(((struct regnode_charclass*)(p))->bitmap)
#define ANYOF_BITMAP_BYTE(p, c)	(ANYOF_BITMAP(p)[((c) >> 3) & 31])
#define ANYOF_BITMAP_SET(p, c)	(ANYOF_BITMAP_BYTE(p, c) |=  ANYOF_BIT(c))
#define ANYOF_BITMAP_CLEAR(p,c)	(ANYOF_BITMAP_BYTE(p, c) &= ~ANYOF_BIT(c))
#define ANYOF_BITMAP_TEST(p, c)	(ANYOF_BITMAP_BYTE(p, c) &   ANYOF_BIT(c))

#define ANYOF_SKIP		((ANYOF_SIZE - 1)/sizeof(regnode))
#define ANYOF_CLASS_SKIP	((ANYOF_CLASS_SIZE - 1)/sizeof(regnode))
#define ANYOF_CLASS_ADD_SKIP	(ANYOF_CLASS_SKIP - ANYOF_SKIP)

/*
 * Utility definitions.
 */
#ifndef lint
#ifndef CHARMASK
#define	UCHARAT(p)	((int)*(U8*)(p))
#else
#define	UCHARAT(p)	((int)*(p)&CHARMASK)
#endif
#else /* lint */
#define UCHARAT(p)	PL_regdummy
#endif /* lint */

#define EXTRA_SIZE(guy) ((sizeof(guy)-1)/sizeof(struct regnode))

#define REG_SEEN_ZERO_LEN	1
#define REG_SEEN_LOOKBEHIND	2
#define REG_SEEN_GPOS		4
#define REG_SEEN_EVAL		8

START_EXTERN_C

#include "regnodes.h"

/* The following have no fixed length. U8 so we can do strchr() on it. */
#ifndef DOINIT
EXTCONST U8 PL_varies[];
#else
EXTCONST U8 PL_varies[] = {
    BRANCH, BACK, STAR, PLUS, CURLY, CURLYX, REF, REFF, REFFL, 
    WHILEM, CURLYM, CURLYN, BRANCHJ, IFTHEN, SUSPEND, CLUMP, 0
};
#endif

/* The following always have a length of 1. U8 we can do strchr() on it. */
/* (Note that length 1 means "one character" under UTF8, not "one octet".) */
#ifndef DOINIT
EXTCONST U8 PL_simple[];
#else
EXTCONST U8 PL_simple[] = {
    REG_ANY, ANYUTF8, SANY, SANYUTF8, ANYOF, ANYOFUTF8,
    ALNUM, ALNUMUTF8, ALNUML, ALNUMLUTF8,
    NALNUM, NALNUMUTF8, NALNUML, NALNUMLUTF8,
    SPACE, SPACEUTF8, SPACEL, SPACELUTF8,
    NSPACE, NSPACEUTF8, NSPACEL, NSPACELUTF8,
    DIGIT, DIGITUTF8, NDIGIT, NDIGITUTF8, 0
};
#endif

END_EXTERN_C

typedef struct re_scream_pos_data_s
{
    char **scream_olds;		/* match pos */
    I32 *scream_pos;		/* Internal iterator of scream. */
} re_scream_pos_data;

struct reg_data {
    U32 count;
    U8 *what;
    void* data[1];
};

struct reg_substr_datum {
    I32 min_offset;
    I32 max_offset;
    SV *substr;
};

struct reg_substr_data {
    struct reg_substr_datum data[3];	/* Actual array */
};

#define anchored_substr substrs->data[0].substr
#define anchored_offset substrs->data[0].min_offset
#define float_substr substrs->data[1].substr
#define float_min_offset substrs->data[1].min_offset
#define float_max_offset substrs->data[1].max_offset
#define check_substr substrs->data[2].substr
#define check_offset_min substrs->data[2].min_offset
#define check_offset_max substrs->data[2].max_offset
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\scope.h ===
#define SAVEt_ITEM		0
#define SAVEt_SV		1
#define SAVEt_AV		2
#define SAVEt_HV		3
#define SAVEt_INT		4
#define SAVEt_LONG		5
#define SAVEt_I32		6
#define SAVEt_IV		7
#define SAVEt_SPTR		8
#define SAVEt_APTR		9
#define SAVEt_HPTR		10
#define SAVEt_PPTR		11
#define SAVEt_NSTAB		12
#define SAVEt_SVREF		13
#define SAVEt_GP		14
#define SAVEt_FREESV		15
#define SAVEt_FREEOP		16
#define SAVEt_FREEPV		17
#define SAVEt_CLEARSV		18
#define SAVEt_DELETE		19
#define SAVEt_DESTRUCTOR	20
#define SAVEt_REGCONTEXT	21
#define SAVEt_STACK_POS		22
#define SAVEt_I16		23
#define SAVEt_AELEM		24
#define SAVEt_HELEM		25
#define SAVEt_OP		26
#define SAVEt_HINTS		27
#define SAVEt_ALLOC		28
#define SAVEt_GENERIC_SVREF	29
#define SAVEt_DESTRUCTOR_X	30
#define SAVEt_VPTR		31
#define SAVEt_I8		32
#define SAVEt_COMPPAD		33
#define SAVEt_GENERIC_PVREF	34
#define SAVEt_PADSV		35
#define SAVEt_MORTALIZESV	36

#define SSCHECK(need) if (PL_savestack_ix + need > PL_savestack_max) savestack_grow()
#define SSPUSHINT(i) (PL_savestack[PL_savestack_ix++].any_i32 = (I32)(i))
#define SSPUSHLONG(i) (PL_savestack[PL_savestack_ix++].any_long = (long)(i))
#define SSPUSHIV(i) (PL_savestack[PL_savestack_ix++].any_iv = (IV)(i))
#define SSPUSHPTR(p) (PL_savestack[PL_savestack_ix++].any_ptr = (void*)(p))
#define SSPUSHDPTR(p) (PL_savestack[PL_savestack_ix++].any_dptr = (p))
#define SSPUSHDXPTR(p) (PL_savestack[PL_savestack_ix++].any_dxptr = (p))
#define SSPOPINT (PL_savestack[--PL_savestack_ix].any_i32)
#define SSPOPLONG (PL_savestack[--PL_savestack_ix].any_long)
#define SSPOPIV (PL_savestack[--PL_savestack_ix].any_iv)
#define SSPOPPTR (PL_savestack[--PL_savestack_ix].any_ptr)
#define SSPOPDPTR (PL_savestack[--PL_savestack_ix].any_dptr)
#define SSPOPDXPTR (PL_savestack[--PL_savestack_ix].any_dxptr)

/*
=for apidoc Ams||SAVETMPS
Opening bracket for temporaries on a callback.  See C<FREETMPS> and
L<perlcall>.

=for apidoc Ams||FREETMPS
Closing bracket for temporaries on a callback.  See C<SAVETMPS> and
L<perlcall>.

=for apidoc Ams||ENTER
Opening bracket on a callback.  See C<LEAVE> and L<perlcall>.

=for apidoc Ams||LEAVE
Closing bracket on a callback.  See C<ENTER> and L<perlcall>.

=cut
*/

#define SAVETMPS save_int((int*)&PL_tmps_floor), PL_tmps_floor = PL_tmps_ix
#define FREETMPS if (PL_tmps_ix > PL_tmps_floor) free_tmps()

#ifdef DEBUGGING
#define ENTER							\
    STMT_START {						\
	push_scope();						\
	DEBUG_l(WITH_THR(Perl_deb(aTHX_ "ENTER scope %ld at %s:%d\n",	\
		    PL_scopestack_ix, __FILE__, __LINE__)));	\
    } STMT_END
#define LEAVE							\
    STMT_START {						\
	DEBUG_l(WITH_THR(Perl_deb(aTHX_ "LEAVE scope %ld at %s:%d\n",	\
		    PL_scopestack_ix, __FILE__, __LINE__)));	\
	pop_scope();						\
    } STMT_END
#else
#define ENTER push_scope()
#define LEAVE pop_scope()
#endif
#define LEAVE_SCOPE(old) if (PL_savestack_ix > old) leave_scope(old)

/*
 * Not using SOFT_CAST on SAVESPTR, SAVEGENERICSV and SAVEFREESV
 * because these are used for several kinds of pointer values
 */
#define SAVEI8(i)	save_I8(SOFT_CAST(I8*)&(i))
#define SAVEI16(i)	save_I16(SOFT_CAST(I16*)&(i))
#define SAVEI32(i)	save_I32(SOFT_CAST(I32*)&(i))
#define SAVEINT(i)	save_int(SOFT_CAST(int*)&(i))
#define SAVEIV(i)	save_iv(SOFT_CAST(IV*)&(i))
#define SAVELONG(l)	save_long(SOFT_CAST(long*)&(l))
#define SAVESPTR(s)	save_sptr((SV**)&(s))
#define SAVEPPTR(s)	save_pptr(SOFT_CAST(char**)&(s))
#define SAVEVPTR(s)	save_vptr((void*)&(s))
#define SAVEPADSV(s)	save_padsv(s)
#define SAVEFREESV(s)	save_freesv((SV*)(s))
#define SAVEMORTALIZESV(s)	save_mortalizesv((SV*)(s))
#define SAVEFREEOP(o)	save_freeop(SOFT_CAST(OP*)(o))
#define SAVEFREEPV(p)	save_freepv(SOFT_CAST(char*)(p))
#define SAVECLEARSV(sv)	save_clearsv(SOFT_CAST(SV**)&(sv))
#define SAVEGENERICSV(s)	save_generic_svref((SV**)&(s))
#define SAVEGENERICPV(s)	save_generic_pvref((char**)&(s))
#define SAVEDELETE(h,k,l) \
	  save_delete(SOFT_CAST(HV*)(h), SOFT_CAST(char*)(k), (I32)(l))
#define SAVEDESTRUCTOR(f,p) \
	  save_destructor((DESTRUCTORFUNC_NOCONTEXT_t)(f), SOFT_CAST(void*)(p))

#define SAVEDESTRUCTOR_X(f,p) \
	  save_destructor_x((DESTRUCTORFUNC_t)(f), SOFT_CAST(void*)(p))

#define SAVESTACK_POS() \
    STMT_START {				\
	SSCHECK(2);				\
	SSPUSHINT(PL_stack_sp - PL_stack_base);	\
	SSPUSHINT(SAVEt_STACK_POS);		\
    } STMT_END

#define SAVEOP()	save_op()

#define SAVEHINTS() \
    STMT_START {				\
	if (PL_hints & HINT_LOCALIZE_HH)	\
	    save_hints();			\
	else {					\
	    SSCHECK(2);				\
	    SSPUSHINT(PL_hints);		\
	    SSPUSHINT(SAVEt_HINTS);		\
	}					\
    } STMT_END

#define SAVECOMPPAD() \
    STMT_START {						\
	if (PL_comppad && PL_curpad == AvARRAY(PL_comppad)) {	\
	    SSCHECK(2);						\
	    SSPUSHPTR((SV*)PL_comppad);				\
	    SSPUSHINT(SAVEt_COMPPAD);				\
	}							\
	else {							\
	    SAVEVPTR(PL_curpad);				\
	    SAVESPTR(PL_comppad);				\
	}							\
    } STMT_END

#ifdef USE_ITHREADS
#  define SAVECOPSTASH(c)	SAVEPPTR(CopSTASHPV(c))
#  define SAVECOPSTASH_FREE(c)	SAVEGENERICPV(CopSTASHPV(c))
#  define SAVECOPFILE(c)	SAVEPPTR(CopFILE(c))
#  define SAVECOPFILE_FREE(c)	SAVEGENERICPV(CopFILE(c))
#else
#  define SAVECOPSTASH(c)	SAVESPTR(CopSTASH(c))
#  define SAVECOPSTASH_FREE(c)	SAVECOPSTASH(c)	/* XXX not refcounted */
#  define SAVECOPFILE(c)	SAVESPTR(CopFILEGV(c))
#  define SAVECOPFILE_FREE(c)	SAVEGENERICSV(CopFILEGV(c))
#endif

#define SAVECOPLINE(c)		SAVEI16(CopLINE(c))

/* SSNEW() temporarily allocates a specified number of bytes of data on the
 * savestack.  It returns an integer index into the savestack, because a
 * pointer would get broken if the savestack is moved on reallocation.
 * SSNEWa() works like SSNEW(), but also aligns the data to the specified
 * number of bytes.  MEM_ALIGNBYTES is perhaps the most useful.  The
 * alignment will be preserved therough savestack reallocation *only* if
 * realloc returns data aligned to a size divisible by `align'!
 *
 * SSPTR() converts the index returned by SSNEW/SSNEWa() into a pointer.
 */

#define SSNEW(size)             Perl_save_alloc(aTHX_ (size), 0)
#define SSNEWt(n,t)             SSNEW((n)*sizeof(t))
#define SSNEWa(size,align)	Perl_save_alloc(aTHX_ (size), \
    (align - ((int)((caddr_t)&PL_savestack[PL_savestack_ix]) % align)) % align)
#define SSNEWat(n,t,align)	SSNEWa((n)*sizeof(t), align)

#define SSPTR(off,type)         ((type)  ((char*)PL_savestack + off))
#define SSPTRt(off,type)        ((type*) ((char*)PL_savestack + off))

/* A jmpenv packages the state required to perform a proper non-local jump.
 * Note that there is a start_env initialized when perl starts, and top_env
 * points to this initially, so top_env should always be non-null.
 *
 * Existence of a non-null top_env->je_prev implies it is valid to call
 * longjmp() at that runlevel (we make sure start_env.je_prev is always
 * null to ensure this).
 *
 * je_mustcatch, when set at any runlevel to TRUE, means eval ops must
 * establish a local jmpenv to handle exception traps.  Care must be taken
 * to restore the previous value of je_mustcatch before exiting the
 * stack frame iff JMPENV_PUSH was not called in that stack frame.
 * GSAR 97-03-27
 */

struct jmpenv {
    struct jmpenv *	je_prev;
    Sigjmp_buf		je_buf;		/* only for use if !je_throw */
    int			je_ret;		/* last exception thrown */
    bool		je_mustcatch;	/* need to call longjmp()? */
#ifdef PERL_FLEXIBLE_EXCEPTIONS
    void		(*je_throw)(int v); /* last for bincompat */
    bool		je_noset;	/* no need for setjmp() */
#endif
};

typedef struct jmpenv JMPENV;

#ifdef OP_IN_REGISTER
#define OP_REG_TO_MEM	PL_opsave = op
#define OP_MEM_TO_REG	op = PL_opsave
#else
#define OP_REG_TO_MEM	NOOP
#define OP_MEM_TO_REG	NOOP
#endif

/*
 * How to build the first jmpenv.
 *
 * top_env needs to be non-zero. It points to an area
 * in which longjmp() stuff is stored, as C callstack
 * info there at least is thread specific this has to
 * be per-thread. Otherwise a 'die' in a thread gives
 * that thread the C stack of last thread to do an eval {}!
 */

#define JMPENV_BOOTSTRAP \
    STMT_START {				\
	Zero(&PL_start_env, 1, JMPENV);		\
	PL_start_env.je_ret = -1;		\
	PL_start_env.je_mustcatch = TRUE;	\
	PL_top_env = &PL_start_env;		\
    } STMT_END

#ifdef PERL_FLEXIBLE_EXCEPTIONS

/*
 * These exception-handling macros are split up to
 * ease integration with C++ exceptions.
 *
 * To use C++ try+catch to catch Perl exceptions, an extension author
 * needs to first write an extern "C" function to throw an appropriate
 * exception object; typically it will be or contain an integer,
 * because Perl's internals use integers to track exception types:
 *    extern "C" { static void thrower(int i) { throw i; } }
 *
 * Then (as shown below) the author needs to use, not the simple
 * JMPENV_PUSH, but several of its constitutent macros, to arrange for
 * the Perl internals to call thrower() rather than longjmp() to
 * report exceptions:
 *
 *    dJMPENV;
 *    JMPENV_PUSH_INIT(thrower);
 *    try {
 *        ... stuff that may throw exceptions ...
 *    }
 *    catch (int why) {  // or whatever matches thrower()
 *        JMPENV_POST_CATCH;
 *        EXCEPT_SET(why);
 *        switch (why) {
 *          ... // handle various Perl exception codes
 *        }
 *    }
 *    JMPENV_POP;  // don't forget this!
 */

/*
 * Function that catches/throws, and its callback for the
 *  body of protected processing.
 */
typedef void *(CPERLscope(*protect_body_t)) (pTHX_ va_list);
typedef void *(CPERLscope(*protect_proc_t)) (pTHX_ volatile JMPENV *pcur_env,
					     int *, protect_body_t, ...);

#define dJMPENV	JMPENV cur_env;	\
		volatile JMPENV *pcur_env = ((cur_env.je_noset = 0),&cur_env)

#define JMPENV_PUSH_INIT_ENV(ce,THROWFUNC) \
    STMT_START {					\
	(ce).je_throw = (THROWFUNC);			\
	(ce).je_ret = -1;				\
	(ce).je_mustcatch = FALSE;			\
	(ce).je_prev = PL_top_env;			\
	PL_top_env = &(ce);				\
	OP_REG_TO_MEM;					\
    } STMT_END

#define JMPENV_PUSH_INIT(THROWFUNC) JMPENV_PUSH_INIT_ENV(*(JMPENV*)pcur_env,THROWFUNC)

#define JMPENV_POST_CATCH_ENV(ce) \
    STMT_START {					\
	OP_MEM_TO_REG;					\
	PL_top_env = &(ce);				\
    } STMT_END

#define JMPENV_POST_CATCH JMPENV_POST_CATCH_ENV(*(JMPENV*)pcur_env)

#define JMPENV_PUSH_ENV(ce,v) \
    STMT_START {						\
	if (!(ce).je_noset) {					\
	    DEBUG_l(Perl_deb(aTHX_ "Setting up jumplevel %p, was %p\n",	\
			     ce, PL_top_env));			\
	    JMPENV_PUSH_INIT_ENV(ce,NULL);			\
	    EXCEPT_SET_ENV(ce,PerlProc_setjmp((ce).je_buf, 1));\
	    (ce).je_noset = 1;					\
	}							\
	else							\
	    EXCEPT_SET_ENV(ce,0);				\
	JMPENV_POST_CATCH_ENV(ce);				\
	(v) = EXCEPT_GET_ENV(ce);				\
    } STMT_END

#define JMPENV_PUSH(v) JMPENV_PUSH_ENV(*(JMPENV*)pcur_env,v)

#define JMPENV_POP_ENV(ce) \
    STMT_START {						\
	if (PL_top_env == &(ce))				\
	    PL_top_env = (ce).je_prev;				\
    } STMT_END

#define JMPENV_POP  JMPENV_POP_ENV(*(JMPENV*)pcur_env)

#define JMPENV_JUMP(v) \
    STMT_START {						\
	OP_REG_TO_MEM;						\
	if (PL_top_env->je_prev) {				\
	    if (PL_top_env->je_throw)				\
		PL_top_env->je_throw(v);			\
	    else						\
		PerlProc_longjmp(PL_top_env->je_buf, (v));	\
	}							\
	if ((v) == 2)						\
	    PerlProc_exit(STATUS_NATIVE_EXPORT);		\
	PerlIO_printf(Perl_error_log, "panic: top_env\n");	\
	PerlProc_exit(1);					\
    } STMT_END

#define EXCEPT_GET_ENV(ce)	((ce).je_ret)
#define EXCEPT_GET		EXCEPT_GET_ENV(*(JMPENV*)pcur_env)
#define EXCEPT_SET_ENV(ce,v)	((ce).je_ret = (v))
#define EXCEPT_SET(v)		EXCEPT_SET_ENV(*(JMPENV*)pcur_env,v)

#else /* !PERL_FLEXIBLE_EXCEPTIONS */

#define dJMPENV		JMPENV cur_env

#define JMPENV_PUSH(v) \
    STMT_START {							\
	DEBUG_l(Perl_deb(aTHX_ "Setting up jumplevel %p, was %p\n",	\
			 &cur_env, PL_top_env));			\
	cur_env.je_prev = PL_top_env;					\
	OP_REG_TO_MEM;							\
	cur_env.je_ret = PerlProc_setjmp(cur_env.je_buf, 1);		\
	OP_MEM_TO_REG;							\
	PL_top_env = &cur_env;						\
	cur_env.je_mustcatch = FALSE;					\
	(v) = cur_env.je_ret;						\
    } STMT_END

#define JMPENV_POP \
    STMT_START { PL_top_env = cur_env.je_prev; } STMT_END

#define JMPENV_JUMP(v) \
    STMT_START {						\
	OP_REG_TO_MEM;						\
	if (PL_top_env->je_prev)				\
	    PerlProc_longjmp(PL_top_env->je_buf, (v));		\
	if ((v) == 2)						\
	    PerlProc_exit(STATUS_NATIVE_EXPORT);		\
	PerlIO_printf(PerlIO_stderr(), "panic: top_env\n");	\
	PerlProc_exit(1);					\
    } STMT_END

#endif /* PERL_FLEXIBLE_EXCEPTIONS */

#define CATCH_GET		(PL_top_env->je_mustcatch)
#define CATCH_SET(v)		(PL_top_env->je_mustcatch = (v))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\sv.h ===
/*    sv.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifdef sv_flags
#undef sv_flags		/* Convex has this in <signal.h> for sigvec() */
#endif

/*
=for apidoc AmU||svtype
An enum of flags for Perl types.  These are found in the file B<sv.h> 
in the C<svtype> enum.  Test these flags with the C<SvTYPE> macro.

=for apidoc AmU||SVt_PV
Pointer type flag for scalars.  See C<svtype>.

=for apidoc AmU||SVt_IV
Integer type flag for scalars.  See C<svtype>.

=for apidoc AmU||SVt_NV
Double type flag for scalars.  See C<svtype>.

=for apidoc AmU||SVt_PVMG
Type flag for blessed scalars.  See C<svtype>.

=for apidoc AmU||SVt_PVAV
Type flag for arrays.  See C<svtype>.

=for apidoc AmU||SVt_PVHV
Type flag for hashes.  See C<svtype>.

=for apidoc AmU||SVt_PVCV
Type flag for code refs.  See C<svtype>.

=cut
*/

typedef enum {
	SVt_NULL,	/* 0 */
	SVt_IV,		/* 1 */
	SVt_NV,		/* 2 */
	SVt_RV,		/* 3 */
	SVt_PV,		/* 4 */
	SVt_PVIV,	/* 5 */
	SVt_PVNV,	/* 6 */
	SVt_PVMG,	/* 7 */
	SVt_PVBM,	/* 8 */
	SVt_PVLV,	/* 9 */
	SVt_PVAV,	/* 10 */
	SVt_PVHV,	/* 11 */
	SVt_PVCV,	/* 12 */
	SVt_PVGV,	/* 13 */
	SVt_PVFM,	/* 14 */
	SVt_PVIO	/* 15 */
} svtype;

/* Using C's structural equivalence to help emulate C++ inheritance here... */

struct STRUCT_SV {
    void*	sv_any;		/* pointer to something */
    U32		sv_refcnt;	/* how many references to us */
    U32		sv_flags;	/* what we are */
};

struct gv {
    XPVGV*	sv_any;		/* pointer to something */
    U32		sv_refcnt;	/* how many references to us */
    U32		sv_flags;	/* what we are */
};

struct cv {
    XPVCV*	sv_any;		/* pointer to something */
    U32		sv_refcnt;	/* how many references to us */
    U32		sv_flags;	/* what we are */
};

struct av {
    XPVAV*	sv_any;		/* pointer to something */
    U32		sv_refcnt;	/* how many references to us */
    U32		sv_flags;	/* what we are */
};

struct hv {
    XPVHV*	sv_any;		/* pointer to something */
    U32		sv_refcnt;	/* how many references to us */
    U32		sv_flags;	/* what we are */
};

struct io {
    XPVIO*	sv_any;		/* pointer to something */
    U32		sv_refcnt;	/* how many references to us */
    U32		sv_flags;	/* what we are */
};

/*
=for apidoc Am|U32|SvREFCNT|SV* sv
Returns the value of the object's reference count.

=for apidoc Am|SV*|SvREFCNT_inc|SV* sv
Increments the reference count of the given SV.

=for apidoc Am|void|SvREFCNT_dec|SV* sv
Decrements the reference count of the given SV.

=for apidoc Am|svtype|SvTYPE|SV* sv
Returns the type of the SV.  See C<svtype>.

=for apidoc Am|void|SvUPGRADE|SV* sv|svtype type
Used to upgrade an SV to a more complex form.  Uses C<sv_upgrade> to
perform the upgrade if necessary.  See C<svtype>.

=cut
*/

#define SvANY(sv)	(sv)->sv_any
#define SvFLAGS(sv)	(sv)->sv_flags
#define SvREFCNT(sv)	(sv)->sv_refcnt

#ifdef USE_THREADS

#  if defined(VMS)
#    define ATOMIC_INC(count) __ATOMIC_INCREMENT_LONG(&count)
#    define ATOMIC_DEC_AND_TEST(res,count) res=(1==__ATOMIC_DECREMENT_LONG(&count))
 #  else
#    ifdef EMULATE_ATOMIC_REFCOUNTS
 #      define ATOMIC_INC(count) STMT_START {	\
	  MUTEX_LOCK(&PL_svref_mutex);		\
	  ++count;				\
	  MUTEX_UNLOCK(&PL_svref_mutex);		\
       } STMT_END
#      define ATOMIC_DEC_AND_TEST(res,count) STMT_START {	\
	  MUTEX_LOCK(&PL_svref_mutex);			\
	  res = (--count == 0);				\
	  MUTEX_UNLOCK(&PL_svref_mutex);			\
       } STMT_END
#    else
#      define ATOMIC_INC(count) atomic_inc(&count)
#      define ATOMIC_DEC_AND_TEST(res,count) (res = atomic_dec_and_test(&count))
#    endif /* EMULATE_ATOMIC_REFCOUNTS */
#  endif /* VMS */
#else
#  define ATOMIC_INC(count) (++count)
#  define ATOMIC_DEC_AND_TEST(res, count) (res = (--count == 0))
#endif /* USE_THREADS */

#ifdef __GNUC__
#  define SvREFCNT_inc(sv)		\
    ({					\
	SV *nsv = (SV*)(sv);		\
	if (nsv)			\
	     ATOMIC_INC(SvREFCNT(nsv));	\
	nsv;				\
    })
#else
#  if defined(CRIPPLED_CC) || defined(USE_THREADS)
#    if defined(VMS) && defined(__ALPHA)
#      define SvREFCNT_inc(sv) \
          (PL_Sv=(SV*)(sv), (PL_Sv && __ATOMIC_INCREMENT_LONG(&(SvREFCNT(PL_Sv)))), (SV *)PL_Sv)
#    else
#      define SvREFCNT_inc(sv) sv_newref((SV*)sv)
#    endif
#  else
#    define SvREFCNT_inc(sv)	\
	((PL_Sv=(SV*)(sv)), (PL_Sv && ATOMIC_INC(SvREFCNT(PL_Sv))), (SV*)PL_Sv)
#  endif
#endif

#define SvREFCNT_dec(sv)	sv_free((SV*)sv)

#define SVTYPEMASK	0xff
#define SvTYPE(sv)	((sv)->sv_flags & SVTYPEMASK)

#define SvUPGRADE(sv, mt) (SvTYPE(sv) >= mt || sv_upgrade(sv, mt))

#define SVs_PADBUSY	0x00000100	/* reserved for tmp or my already */
#define SVs_PADTMP	0x00000200	/* in use as tmp */
#define SVs_PADMY	0x00000400	/* in use a "my" variable */
#define SVs_TEMP	0x00000800	/* string is stealable? */
#define SVs_OBJECT	0x00001000	/* is "blessed" */
#define SVs_GMG		0x00002000	/* has magical get method */
#define SVs_SMG		0x00004000	/* has magical set method */
#define SVs_RMG		0x00008000	/* has random magical methods */

#define SVf_IOK		0x00010000	/* has valid public integer value */
#define SVf_NOK		0x00020000	/* has valid public numeric value */
#define SVf_POK		0x00040000	/* has valid public pointer value */
#define SVf_ROK		0x00080000	/* has a valid reference pointer */

#define SVf_FAKE	0x00100000	/* glob or lexical is just a copy */
#define SVf_OOK		0x00200000	/* has valid offset value */
#define SVf_BREAK	0x00400000	/* refcnt is artificially low */
#define SVf_READONLY	0x00800000	/* may not be modified */


#define SVp_IOK		0x01000000	/* has valid non-public integer value */
#define SVp_NOK		0x02000000	/* has valid non-public numeric value */
#define SVp_POK		0x04000000	/* has valid non-public pointer value */
#define SVp_SCREAM	0x08000000	/* has been studied? */

#define SVf_UTF8        0x20000000      /* SvPVX is UTF-8 encoded */

#define SVf_THINKFIRST	(SVf_READONLY|SVf_ROK|SVf_FAKE)

#define SVf_OK		(SVf_IOK|SVf_NOK|SVf_POK|SVf_ROK| \
			 SVp_IOK|SVp_NOK|SVp_POK)

#define SVf_AMAGIC	0x10000000      /* has magical overloaded methods */

#define PRIVSHIFT 8

/* Some private flags. */

/* SVpad_OUR may be set on SVt_PV{NV,MG,GV} types */
#define SVpad_OUR	0x80000000	/* pad name is "our" instead of "my" */

#define SVf_IVisUV	0x80000000	/* use XPVUV instead of XPVIV */

#define SVpfm_COMPILED	0x80000000	/* FORMLINE is compiled */

#define SVpbm_VALID	0x80000000
#define SVpbm_TAIL	0x40000000

#define SVrepl_EVAL	0x40000000	/* Replacement part of s///e */

#define SVphv_SHAREKEYS 0x20000000	/* keys live on shared string table */
#define SVphv_LAZYDEL	0x40000000	/* entry in xhv_eiter must be deleted */

#define SVprv_WEAKREF   0x80000000      /* Weak reference */

struct xrv {
    SV *	xrv_rv;		/* pointer to another SV */
};

struct xpv {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
};

struct xpviv {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
};

struct xpvuv {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    UV		xuv_uv;		/* unsigned value or pv offset */
};

struct xpvnv {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV    	xnv_nv;		/* numeric value, if any */
};

/* These structure must match the beginning of struct xpvhv in hv.h. */
struct xpvmg {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV    	xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* linked list of magicalness */
    HV*		xmg_stash;	/* class package */
};

struct xpvlv {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV    	xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* linked list of magicalness */
    HV*		xmg_stash;	/* class package */

    STRLEN	xlv_targoff;
    STRLEN	xlv_targlen;
    SV*		xlv_targ;
    char	xlv_type;
};

struct xpvgv {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV		xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* linked list of magicalness */
    HV*		xmg_stash;	/* class package */

    GP*		xgv_gp;
    char*	xgv_name;
    STRLEN	xgv_namelen;
    HV*		xgv_stash;
    U8		xgv_flags;
};

struct xpvbm {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV		xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* linked list of magicalness */
    HV*		xmg_stash;	/* class package */

    I32		xbm_useful;	/* is this constant pattern being useful? */
    U16		xbm_previous;	/* how many characters in string before rare? */
    U8		xbm_rare;	/* rarest character in string */
};

/* This structure much match XPVCV in cv.h */

typedef U16 cv_flags_t;

struct xpvfm {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV		xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* linked list of magicalness */
    HV*		xmg_stash;	/* class package */

    HV *	xcv_stash;
    OP *	xcv_start;
    OP *	xcv_root;
    void      (*xcv_xsub)(pTHXo_ CV*);
    ANY		xcv_xsubany;
    GV *	xcv_gv;
    char *	xcv_file;
    long	xcv_depth;	/* >= 2 indicates recursive call */
    AV *	xcv_padlist;
    CV *	xcv_outside;
#ifdef USE_THREADS
    perl_mutex *xcv_mutexp;	/* protects xcv_owner */
    struct perl_thread *xcv_owner;	/* current owner thread */
#endif /* USE_THREADS */
    cv_flags_t	xcv_flags;

    I32		xfm_lines;
};

struct xpvio {
    char *	xpv_pv;		/* pointer to malloced string */
    STRLEN	xpv_cur;	/* length of xpv_pv as a C string */
    STRLEN	xpv_len;	/* allocated size */
    IV		xiv_iv;		/* integer value or pv offset */
    NV		xnv_nv;		/* numeric value, if any */
    MAGIC*	xmg_magic;	/* linked list of magicalness */
    HV*		xmg_stash;	/* class package */

    PerlIO *	xio_ifp;	/* ifp and ofp are normally the same */
    PerlIO *	xio_ofp;	/* but sockets need separate streams */
    /* Cray addresses everything by word boundaries (64 bits) and
     * code and data pointers cannot be mixed (which is exactly what
     * Perl_filter_add() tries to do with the dirp), hence the following
     * union trick (as suggested by Gurusamy Sarathy).
     * For further information see Geir Johansen's problem report titled
       [ID 20000612.002] Perl problem on Cray system
     * The any pointer (known as IoANY()) will also be a good place
     * to hang any IO disciplines to.
     */
    union {
	DIR *	xiou_dirp;	/* for opendir, readdir, etc */
	void *	xiou_any;	/* for alignment */
    } xio_dirpu;
    long	xio_lines;	/* $. */
    long	xio_page;	/* $% */
    long	xio_page_len;	/* $= */
    long	xio_lines_left;	/* $- */
    char *	xio_top_name;	/* $^ */
    GV *	xio_top_gv;	/* $^ */
    char *	xio_fmt_name;	/* $~ */
    GV *	xio_fmt_gv;	/* $~ */
    char *	xio_bottom_name;/* $^B */
    GV *	xio_bottom_gv;	/* $^B */
    short	xio_subprocess;	/* -| or |- */
    char	xio_type;
    char	xio_flags;
};
#define xio_dirp	xio_dirpu.xiou_dirp
#define xio_any		xio_dirpu.xiou_any

#define IOf_ARGV	1	/* this fp iterates over ARGV */
#define IOf_START	2	/* check for null ARGV and substitute '-' */
#define IOf_FLUSH	4	/* this fp wants a flush after write op */
#define IOf_DIDTOP	8	/* just did top of form */
#define IOf_UNTAINT	16	/* consider this fp (and its data) "safe" */
#define IOf_NOLINE	32	/* slurped a pseudo-line from empty file */
#define IOf_FAKE_DIRP	64	/* xio_dirp is fake (source filters kludge) */

/* The following macros define implementation-independent predicates on SVs. */

/*
=for apidoc Am|bool|SvNIOK|SV* sv
Returns a boolean indicating whether the SV contains a number, integer or
double.

=for apidoc Am|bool|SvNIOKp|SV* sv
Returns a boolean indicating whether the SV contains a number, integer or
double.  Checks the B<private> setting.  Use C<SvNIOK>.

=for apidoc Am|void|SvNIOK_off|SV* sv
Unsets the NV/IV status of an SV.

=for apidoc Am|bool|SvOK|SV* sv
Returns a boolean indicating whether the value is an SV.

=for apidoc Am|bool|SvIOKp|SV* sv
Returns a boolean indicating whether the SV contains an integer.  Checks
the B<private> setting.  Use C<SvIOK>.

=for apidoc Am|bool|SvNOKp|SV* sv
Returns a boolean indicating whether the SV contains a double.  Checks the
B<private> setting.  Use C<SvNOK>.

=for apidoc Am|bool|SvPOKp|SV* sv
Returns a boolean indicating whether the SV contains a character string.
Checks the B<private> setting.  Use C<SvPOK>.

=for apidoc Am|bool|SvIOK|SV* sv
Returns a boolean indicating whether the SV contains an integer.

=for apidoc Am|void|SvIOK_on|SV* sv
Tells an SV that it is an integer.

=for apidoc Am|void|SvIOK_off|SV* sv
Unsets the IV status of an SV.

=for apidoc Am|void|SvIOK_only|SV* sv
Tells an SV that it is an integer and disables all other OK bits.

=for apidoc Am|void|SvIOK_only_UV|SV* sv
Tells and SV that it is an unsigned integer and disables all other OK bits.

=for apidoc Am|void|SvIOK_UV|SV* sv
Returns a boolean indicating whether the SV contains an unsigned integer.

=for apidoc Am|void|SvIOK_notUV|SV* sv
Returns a boolean indicating whether the SV contains an signed integer.

=for apidoc Am|bool|SvNOK|SV* sv
Returns a boolean indicating whether the SV contains a double.

=for apidoc Am|void|SvNOK_on|SV* sv
Tells an SV that it is a double.

=for apidoc Am|void|SvNOK_off|SV* sv
Unsets the NV status of an SV.

=for apidoc Am|void|SvNOK_only|SV* sv
Tells an SV that it is a double and disables all other OK bits.

=for apidoc Am|bool|SvPOK|SV* sv
Returns a boolean indicating whether the SV contains a character
string.

=for apidoc Am|void|SvPOK_on|SV* sv
Tells an SV that it is a string.

=for apidoc Am|void|SvPOK_off|SV* sv
Unsets the PV status of an SV.

=for apidoc Am|void|SvPOK_only|SV* sv
Tells an SV that it is a string and disables all other OK bits.

=for apidoc Am|bool|SvOOK|SV* sv
Returns a boolean indicating whether the SvIVX is a valid offset value for
the SvPVX.  This hack is used internally to speed up removal of characters
from the beginning of a SvPV.  When SvOOK is true, then the start of the
allocated string buffer is really (SvPVX - SvIVX).

=for apidoc Am|bool|SvROK|SV* sv
Tests if the SV is an RV.

=for apidoc Am|void|SvROK_on|SV* sv
Tells an SV that it is an RV.

=for apidoc Am|void|SvROK_off|SV* sv
Unsets the RV status of an SV.

=for apidoc Am|SV*|SvRV|SV* sv
Dereferences an RV to return the SV.

=for apidoc Am|IV|SvIVX|SV* sv
Returns the integer which is stored in the SV, assuming SvIOK is
true.

=for apidoc Am|UV|SvUVX|SV* sv
Returns the unsigned integer which is stored in the SV, assuming SvIOK is
true.

=for apidoc Am|NV|SvNVX|SV* sv
Returns the double which is stored in the SV, assuming SvNOK is
true.

=for apidoc Am|char*|SvPVX|SV* sv
Returns a pointer to the string in the SV.  The SV must contain a
string.

=for apidoc Am|STRLEN|SvCUR|SV* sv
Returns the length of the string which is in the SV.  See C<SvLEN>.

=for apidoc Am|STRLEN|SvLEN|SV* sv
Returns the size of the string buffer in the SV, not including any part
attributable to C<SvOOK>.  See C<SvCUR>.

=for apidoc Am|char*|SvEND|SV* sv
Returns a pointer to the last character in the string which is in the SV.
See C<SvCUR>.  Access the character as *(SvEND(sv)).

=for apidoc Am|HV*|SvSTASH|SV* sv
Returns the stash of the SV.

=for apidoc Am|void|SvCUR_set|SV* sv|STRLEN len
Set the length of the string which is in the SV.  See C<SvCUR>.

=cut
*/

#define SvNIOK(sv)		(SvFLAGS(sv) & (SVf_IOK|SVf_NOK))
#define SvNIOKp(sv)		(SvFLAGS(sv) & (SVp_IOK|SVp_NOK))
#define SvNIOK_off(sv)		(SvFLAGS(sv) &= ~(SVf_IOK|SVf_NOK| \
						  SVp_IOK|SVp_NOK|SVf_IVisUV))

#define SvOK(sv)		(SvFLAGS(sv) & SVf_OK)
#define SvOK_off(sv)		(SvFLAGS(sv) &=	~(SVf_OK|SVf_AMAGIC|	\
						  SVf_IVisUV|SVf_UTF8),	\
							SvOOK_off(sv))
#define SvOK_off_exc_UV(sv)	(SvFLAGS(sv) &=	~(SVf_OK|SVf_AMAGIC|	\
						  SVf_UTF8),		\
							SvOOK_off(sv))

#define SvOKp(sv)		(SvFLAGS(sv) & (SVp_IOK|SVp_NOK|SVp_POK))
#define SvIOKp(sv)		(SvFLAGS(sv) & SVp_IOK)
#define SvIOKp_on(sv)		((void)SvOOK_off(sv), SvFLAGS(sv) |= SVp_IOK)
#define SvNOKp(sv)		(SvFLAGS(sv) & SVp_NOK)
#define SvNOKp_on(sv)		(SvFLAGS(sv) |= SVp_NOK)
#define SvPOKp(sv)		(SvFLAGS(sv) & SVp_POK)
#define SvPOKp_on(sv)		(SvFLAGS(sv) |= SVp_POK)

#define SvIOK(sv)		(SvFLAGS(sv) & SVf_IOK)
#define SvIOK_on(sv)		((void)SvOOK_off(sv), \
				    SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))
#define SvIOK_off(sv)		(SvFLAGS(sv) &= ~(SVf_IOK|SVp_IOK|SVf_IVisUV))
#define SvIOK_only(sv)		((void)SvOK_off(sv), \
				    SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))
#define SvIOK_only_UV(sv)	((void)SvOK_off_exc_UV(sv), \
				    SvFLAGS(sv) |= (SVf_IOK|SVp_IOK))

#define SvIOK_UV(sv)		((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV))	\
				 == (SVf_IOK|SVf_IVisUV))
#define SvIOK_notUV(sv)		((SvFLAGS(sv) & (SVf_IOK|SVf_IVisUV))	\
				 == SVf_IOK)

#define SvIsUV(sv)		(SvFLAGS(sv) & SVf_IVisUV)
#define SvIsUV_on(sv)		(SvFLAGS(sv) |= SVf_IVisUV)
#define SvIsUV_off(sv)		(SvFLAGS(sv) &= ~SVf_IVisUV)

#define SvNOK(sv)		(SvFLAGS(sv) & SVf_NOK)
#define SvNOK_on(sv)		(SvFLAGS(sv) |= (SVf_NOK|SVp_NOK))
#define SvNOK_off(sv)		(SvFLAGS(sv) &= ~(SVf_NOK|SVp_NOK))
#define SvNOK_only(sv)		((void)SvOK_off(sv), \
				    SvFLAGS(sv) |= (SVf_NOK|SVp_NOK))

/*
=for apidoc Am|void|SvUTF8|SV* sv
Returns a boolean indicating whether the SV contains UTF-8 encoded data.

=for apidoc Am|void|SvUTF8_on|SV *sv
Tells an SV that it is a string and encoded in UTF8.  Do not use frivolously.

=for apidoc Am|void|SvUTF8_off|SV *sv
Unsets the UTF8 status of an SV.

=for apidoc Am|void|SvPOK_only_UTF8|SV* sv
Tells an SV that it is a UTF8 string (do not use frivolously)
and disables all other OK bits.
  
=cut
 */

#define SvUTF8(sv)		(SvFLAGS(sv) & SVf_UTF8)
#define SvUTF8_on(sv)		(SvFLAGS(sv) |= (SVf_UTF8))
#define SvUTF8_off(sv)		(SvFLAGS(sv) &= ~(SVf_UTF8))

#define SvPOK(sv)		(SvFLAGS(sv) & SVf_POK)
#define SvPOK_on(sv)		(SvFLAGS(sv) |= (SVf_POK|SVp_POK))
#define SvPOK_off(sv)		(SvFLAGS(sv) &= ~(SVf_POK|SVp_POK))
#define SvPOK_only(sv)		(SvFLAGS(sv) &= ~(SVf_OK|SVf_AMAGIC|	\
						  SVf_IVisUV|SVf_UTF8),	\
				    SvFLAGS(sv) |= (SVf_POK|SVp_POK))
#define SvPOK_only_UTF8(sv)	(SvFLAGS(sv) &= ~(SVf_OK|SVf_AMAGIC|	\
						  SVf_IVisUV),		\
				    SvFLAGS(sv) |= (SVf_POK|SVp_POK))

#define SvOOK(sv)		(SvFLAGS(sv) & SVf_OOK)
#define SvOOK_on(sv)		((void)SvIOK_off(sv), SvFLAGS(sv) |= SVf_OOK)
#define SvOOK_off(sv)		(SvOOK(sv) && sv_backoff(sv))

#define SvFAKE(sv)		(SvFLAGS(sv) & SVf_FAKE)
#define SvFAKE_on(sv)		(SvFLAGS(sv) |= SVf_FAKE)
#define SvFAKE_off(sv)		(SvFLAGS(sv) &= ~SVf_FAKE)

#define SvROK(sv)		(SvFLAGS(sv) & SVf_ROK)
#define SvROK_on(sv)		(SvFLAGS(sv) |= SVf_ROK)
#define SvROK_off(sv)		(SvFLAGS(sv) &= ~(SVf_ROK|SVf_AMAGIC))

#define SvMAGICAL(sv)		(SvFLAGS(sv) & (SVs_GMG|SVs_SMG|SVs_RMG))
#define SvMAGICAL_on(sv)	(SvFLAGS(sv) |= (SVs_GMG|SVs_SMG|SVs_RMG))
#define SvMAGICAL_off(sv)	(SvFLAGS(sv) &= ~(SVs_GMG|SVs_SMG|SVs_RMG))

#define SvGMAGICAL(sv)		(SvFLAGS(sv) & SVs_GMG)
#define SvGMAGICAL_on(sv)	(SvFLAGS(sv) |= SVs_GMG)
#define SvGMAGICAL_off(sv)	(SvFLAGS(sv) &= ~SVs_GMG)

#define SvSMAGICAL(sv)		(SvFLAGS(sv) & SVs_SMG)
#define SvSMAGICAL_on(sv)	(SvFLAGS(sv) |= SVs_SMG)
#define SvSMAGICAL_off(sv)	(SvFLAGS(sv) &= ~SVs_SMG)

#define SvRMAGICAL(sv)		(SvFLAGS(sv) & SVs_RMG)
#define SvRMAGICAL_on(sv)	(SvFLAGS(sv) |= SVs_RMG)
#define SvRMAGICAL_off(sv)	(SvFLAGS(sv) &= ~SVs_RMG)

#define SvAMAGIC(sv)		(SvFLAGS(sv) & SVf_AMAGIC)
#define SvAMAGIC_on(sv)		(SvFLAGS(sv) |= SVf_AMAGIC)
#define SvAMAGIC_off(sv)	(SvFLAGS(sv) &= ~SVf_AMAGIC)

#define SvGAMAGIC(sv)           (SvFLAGS(sv) & (SVs_GMG|SVf_AMAGIC)) 

/*
#define Gv_AMG(stash) \
        (HV_AMAGICmb(stash) && \
         ((!HV_AMAGICbad(stash) && HV_AMAGIC(stash)) || Gv_AMupdate(stash)))
*/
#define Gv_AMG(stash)           (PL_amagic_generation && Gv_AMupdate(stash))

#define SvWEAKREF(sv)		((SvFLAGS(sv) & (SVf_ROK|SVprv_WEAKREF)) \
				  == (SVf_ROK|SVprv_WEAKREF))
#define SvWEAKREF_on(sv)	(SvFLAGS(sv) |=  (SVf_ROK|SVprv_WEAKREF))
#define SvWEAKREF_off(sv)	(SvFLAGS(sv) &= ~(SVf_ROK|SVprv_WEAKREF))

#define SvTHINKFIRST(sv)	(SvFLAGS(sv) & SVf_THINKFIRST)

#define SvPADBUSY(sv)		(SvFLAGS(sv) & SVs_PADBUSY)

#define SvPADTMP(sv)		(SvFLAGS(sv) & SVs_PADTMP)
#define SvPADTMP_on(sv)		(SvFLAGS(sv) |= SVs_PADTMP|SVs_PADBUSY)
#define SvPADTMP_off(sv)	(SvFLAGS(sv) &= ~SVs_PADTMP)

#define SvPADMY(sv)		(SvFLAGS(sv) & SVs_PADMY)
#define SvPADMY_on(sv)		(SvFLAGS(sv) |= SVs_PADMY|SVs_PADBUSY)

#define SvTEMP(sv)		(SvFLAGS(sv) & SVs_TEMP)
#define SvTEMP_on(sv)		(SvFLAGS(sv) |= SVs_TEMP)
#define SvTEMP_off(sv)		(SvFLAGS(sv) &= ~SVs_TEMP)

#define SvOBJECT(sv)		(SvFLAGS(sv) & SVs_OBJECT)
#define SvOBJECT_on(sv)		(SvFLAGS(sv) |= SVs_OBJECT)
#define SvOBJECT_off(sv)	(SvFLAGS(sv) &= ~SVs_OBJECT)

#define SvREADONLY(sv)		(SvFLAGS(sv) & SVf_READONLY)
#define SvREADONLY_on(sv)	(SvFLAGS(sv) |= SVf_READONLY)
#define SvREADONLY_off(sv)	(SvFLAGS(sv) &= ~SVf_READONLY)

#define SvSCREAM(sv)		(SvFLAGS(sv) & SVp_SCREAM)
#define SvSCREAM_on(sv)		(SvFLAGS(sv) |= SVp_SCREAM)
#define SvSCREAM_off(sv)	(SvFLAGS(sv) &= ~SVp_SCREAM)

#define SvCOMPILED(sv)		(SvFLAGS(sv) & SVpfm_COMPILED)
#define SvCOMPILED_on(sv)	(SvFLAGS(sv) |= SVpfm_COMPILED)
#define SvCOMPILED_off(sv)	(SvFLAGS(sv) &= ~SVpfm_COMPILED)

#define SvEVALED(sv)		(SvFLAGS(sv) & SVrepl_EVAL)
#define SvEVALED_on(sv)		(SvFLAGS(sv) |= SVrepl_EVAL)
#define SvEVALED_off(sv)	(SvFLAGS(sv) &= ~SVrepl_EVAL)

#define SvTAIL(sv)		(SvFLAGS(sv) & SVpbm_TAIL)
#define SvTAIL_on(sv)		(SvFLAGS(sv) |= SVpbm_TAIL)
#define SvTAIL_off(sv)		(SvFLAGS(sv) &= ~SVpbm_TAIL)

#define SvVALID(sv)		(SvFLAGS(sv) & SVpbm_VALID)
#define SvVALID_on(sv)		(SvFLAGS(sv) |= SVpbm_VALID)
#define SvVALID_off(sv)		(SvFLAGS(sv) &= ~SVpbm_VALID)

#define SvRV(sv) ((XRV*)  SvANY(sv))->xrv_rv
#define SvRVx(sv) SvRV(sv)

#define SvIVX(sv) ((XPVIV*)  SvANY(sv))->xiv_iv
#define SvIVXx(sv) SvIVX(sv)
#define SvUVX(sv) ((XPVUV*)  SvANY(sv))->xuv_uv
#define SvUVXx(sv) SvUVX(sv)
#define SvNVX(sv)  ((XPVNV*)SvANY(sv))->xnv_nv
#define SvNVXx(sv) SvNVX(sv)
#define SvPVX(sv)  ((XPV*)  SvANY(sv))->xpv_pv
#define SvPVXx(sv) SvPVX(sv)
#define SvCUR(sv) ((XPV*)  SvANY(sv))->xpv_cur
#define SvLEN(sv) ((XPV*)  SvANY(sv))->xpv_len
#define SvLENx(sv) SvLEN(sv)
#define SvEND(sv)(((XPV*)  SvANY(sv))->xpv_pv + ((XPV*)SvANY(sv))->xpv_cur)
#define SvENDx(sv) ((PL_Sv = (sv)), SvEND(PL_Sv))
#define SvMAGIC(sv)	((XPVMG*)  SvANY(sv))->xmg_magic
#define SvSTASH(sv)	((XPVMG*)  SvANY(sv))->xmg_stash

#define SvIV_set(sv, val) \
	STMT_START { assert(SvTYPE(sv) == SVt_IV || SvTYPE(sv) >= SVt_PVIV); \
		(((XPVIV*)  SvANY(sv))->xiv_iv = val); } STMT_END
#define SvNV_set(sv, val) \
	STMT_START { assert(SvTYPE(sv) == SVt_NV || SvTYPE(sv) >= SVt_PVNV); \
		(((XPVNV*)  SvANY(sv))->xnv_nv = val); } STMT_END
#define SvPV_set(sv, val) \
	STMT_START { assert(SvTYPE(sv) >= SVt_PV); \
		(((XPV*)  SvANY(sv))->xpv_pv = val); } STMT_END
#define SvCUR_set(sv, val) \
	STMT_START { assert(SvTYPE(sv) >= SVt_PV); \
		(((XPV*)  SvANY(sv))->xpv_cur = val); } STMT_END
#define SvLEN_set(sv, val) \
	STMT_START { assert(SvTYPE(sv) >= SVt_PV); \
		(((XPV*)  SvANY(sv))->xpv_len = val); } STMT_END
#define SvEND_set(sv, val) \
	STMT_START { assert(SvTYPE(sv) >= SVt_PV); \
		(((XPV*)  SvANY(sv))->xpv_cur = val - SvPVX(sv)); } STMT_END

#define BmRARE(sv)	((XPVBM*)  SvANY(sv))->xbm_rare
#define BmUSEFUL(sv)	((XPVBM*)  SvANY(sv))->xbm_useful
#define BmPREVIOUS(sv)	((XPVBM*)  SvANY(sv))->xbm_previous

#define FmLINES(sv)	((XPVFM*)  SvANY(sv))->xfm_lines

#define LvTYPE(sv)	((XPVLV*)  SvANY(sv))->xlv_type
#define LvTARG(sv)	((XPVLV*)  SvANY(sv))->xlv_targ
#define LvTARGOFF(sv)	((XPVLV*)  SvANY(sv))->xlv_targoff
#define LvTARGLEN(sv)	((XPVLV*)  SvANY(sv))->xlv_targlen

#define IoIFP(sv)	((XPVIO*)  SvANY(sv))->xio_ifp
#define IoOFP(sv)	((XPVIO*)  SvANY(sv))->xio_ofp
#define IoDIRP(sv)	((XPVIO*)  SvANY(sv))->xio_dirp
#define IoANY(sv)	((XPVIO*)  SvANY(sv))->xio_any
#define IoLINES(sv)	((XPVIO*)  SvANY(sv))->xio_lines
#define IoPAGE(sv)	((XPVIO*)  SvANY(sv))->xio_page
#define IoPAGE_LEN(sv)	((XPVIO*)  SvANY(sv))->xio_page_len
#define IoLINES_LEFT(sv)((XPVIO*)  SvANY(sv))->xio_lines_left
#define IoTOP_NAME(sv)	((XPVIO*)  SvANY(sv))->xio_top_name
#define IoTOP_GV(sv)	((XPVIO*)  SvANY(sv))->xio_top_gv
#define IoFMT_NAME(sv)	((XPVIO*)  SvANY(sv))->xio_fmt_name
#define IoFMT_GV(sv)	((XPVIO*)  SvANY(sv))->xio_fmt_gv
#define IoBOTTOM_NAME(sv)((XPVIO*) SvANY(sv))->xio_bottom_name
#define IoBOTTOM_GV(sv)	((XPVIO*)  SvANY(sv))->xio_bottom_gv
#define IoSUBPROCESS(sv)((XPVIO*)  SvANY(sv))->xio_subprocess
#define IoTYPE(sv)	((XPVIO*)  SvANY(sv))->xio_type
#define IoFLAGS(sv)	((XPVIO*)  SvANY(sv))->xio_flags

/* IoTYPE(sv) is a single character telling the type of I/O connection. */
#define IoTYPE_RDONLY	'<'
#define IoTYPE_WRONLY	'>'
#define IoTYPE_RDWR	'+'
#define IoTYPE_APPEND 	'a'
#define IoTYPE_PIPE	'|'
#define IoTYPE_STD	'-'	/* stdin or stdout */
#define IoTYPE_SOCKET	's'
#define IoTYPE_CLOSED	' '

/*
=for apidoc Am|bool|SvTAINTED|SV* sv
Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if
not.

=for apidoc Am|void|SvTAINTED_on|SV* sv
Marks an SV as tainted.

=for apidoc Am|void|SvTAINTED_off|SV* sv
Untaints an SV. Be I<very> careful with this routine, as it short-circuits
some of Perl's fundamental security features. XS module authors should not
use this function unless they fully understand all the implications of
unconditionally untainting the value. Untainting should be done in the
standard perl fashion, via a carefully crafted regexp, rather than directly
untainting variables.

=for apidoc Am|void|SvTAINT|SV* sv
Taints an SV if tainting is enabled

=cut
*/

#define SvTAINTED(sv)	  (SvMAGICAL(sv) && sv_tainted(sv))
#define SvTAINTED_on(sv)  STMT_START{ if(PL_tainting){sv_taint(sv);}   }STMT_END
#define SvTAINTED_off(sv) STMT_START{ if(PL_tainting){sv_untaint(sv);} }STMT_END

#define SvTAINT(sv)			\
    STMT_START {			\
	if (PL_tainting) {		\
	    if (PL_tainted)		\
		SvTAINTED_on(sv);	\
	}				\
    } STMT_END

/*
=for apidoc Am|char*|SvPV_force|SV* sv|STRLEN len
Like <SvPV> but will force the SV into becoming a string (SvPOK).  You want
force if you are going to update the SvPVX directly.

=for apidoc Am|char*|SvPV|SV* sv|STRLEN len
Returns a pointer to the string in the SV, or a stringified form of the SV
if the SV does not contain a string.  Handles 'get' magic.

=for apidoc Am|char*|SvPV_nolen|SV* sv
Returns a pointer to the string in the SV, or a stringified form of the SV
if the SV does not contain a string.  Handles 'get' magic.

=for apidoc Am|IV|SvIV|SV* sv
Coerces the given SV to an integer and returns it.

=for apidoc Am|NV|SvNV|SV* sv
Coerce the given SV to a double and return it.

=for apidoc Am|UV|SvUV|SV* sv
Coerces the given SV to an unsigned integer and returns it.

=for apidoc Am|bool|SvTRUE|SV* sv
Returns a boolean indicating whether Perl would evaluate the SV as true or
false, defined or undefined.  Does not handle 'get' magic.

=cut
*/

#define SvPV_force(sv, lp) sv_pvn_force(sv, &lp)
#define SvPV(sv, lp) sv_pvn(sv, &lp)
#define SvPV_nolen(sv) sv_pv(sv)

#define SvPVutf8_force(sv, lp) sv_pvutf8n_force(sv, &lp)
#define SvPVutf8(sv, lp) sv_pvutf8n(sv, &lp)
#define SvPVutf8_nolen(sv) sv_pvutf8(sv)

#define SvPVbyte_force(sv, lp) sv_pvbyte_force(sv, &lp)
#define SvPVbyte(sv, lp) sv_pvbyten(sv, &lp)
#define SvPVbyte_nolen(sv) sv_pvbyte(sv)

#define SvPVx(sv, lp) sv_pvn(sv, &lp)
#define SvPVx_force(sv, lp) sv_pvn_force(sv, &lp)
#define SvPVutf8x(sv, lp) sv_pvutf8n(sv, &lp)
#define SvPVutf8x_force(sv, lp) sv_pvutf8n_force(sv, &lp)
#define SvPVbytex(sv, lp) sv_pvbyten(sv, &lp)
#define SvPVbytex_force(sv, lp) sv_pvbyten_force(sv, &lp)

#define SvIVx(sv) sv_iv(sv)
#define SvUVx(sv) sv_uv(sv)
#define SvNVx(sv) sv_nv(sv)

#define SvTRUEx(sv) sv_true(sv)

#define SvIV(sv) SvIVx(sv)
#define SvNV(sv) SvNVx(sv)
#define SvUV(sv) SvUVx(sv)
#define SvTRUE(sv) SvTRUEx(sv)

#ifndef CRIPPLED_CC
/* redefine some things to more efficient inlined versions */

/* Let us hope that bitmaps for UV and IV are the same */
#undef SvIV
#define SvIV(sv) (SvIOK(sv) ? SvIVX(sv) : sv_2iv(sv))

#undef SvUV
#define SvUV(sv) (SvIOK(sv) ? SvUVX(sv) : sv_2uv(sv))

#undef SvNV
#define SvNV(sv) (SvNOK(sv) ? SvNVX(sv) : sv_2nv(sv))

#undef SvPV
#define SvPV(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK)) == SVf_POK \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pv(sv, &lp))


#undef SvPV_force
#define SvPV_force(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_THINKFIRST)) == SVf_POK \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvn_force(sv, &lp))

#undef SvPV_nolen
#define SvPV_nolen(sv) \
    ((SvFLAGS(sv) & (SVf_POK)) == SVf_POK \
     ? SvPVX(sv) : sv_2pv_nolen(sv))

#undef SvPVutf8
#define SvPVutf8(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8)) == (SVf_POK|SVf_UTF8) \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pvutf8(sv, &lp))

#undef SvPVutf8_force
#define SvPVutf8_force(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_THINKFIRST)) == (SVf_POK|SVf_UTF8) \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvutf8n_force(sv, &lp))

#undef SvPVutf8_nolen
#define SvPVutf8_nolen(sv) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8)) == (SVf_POK|SVf_UTF8)\
     ? SvPVX(sv) : sv_2pvutf8_nolen(sv))

#undef SvPVutf8
#define SvPVutf8(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8)) == (SVf_POK|SVf_UTF8) \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pvutf8(sv, &lp))

#undef SvPVutf8_force
#define SvPVutf8_force(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_THINKFIRST)) == (SVf_POK|SVf_UTF8) \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvutf8n_force(sv, &lp))

#undef SvPVutf8_nolen
#define SvPVutf8_nolen(sv) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8)) == (SVf_POK|SVf_UTF8)\
     ? SvPVX(sv) : sv_2pvutf8_nolen(sv))

#undef SvPVbyte
#define SvPVbyte(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8)) == (SVf_POK) \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_2pvbyte(sv, &lp))

#undef SvPVbyte_force
#define SvPVbyte_force(sv, lp) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8|SVf_THINKFIRST)) == (SVf_POK) \
     ? ((lp = SvCUR(sv)), SvPVX(sv)) : sv_pvbyte_force(sv, &lp))

#undef SvPVbyte_nolen
#define SvPVbyte_nolen(sv) \
    ((SvFLAGS(sv) & (SVf_POK|SVf_UTF8)) == (SVf_POK)\
     ? SvPVX(sv) : sv_2pvbyte_nolen(sv))


#ifdef __GNUC__
#  undef SvIVx
#  undef SvUVx
#  undef SvNVx
#  undef SvPVx
#  undef SvPVutf8x
#  undef SvPVbytex
#  undef SvTRUE
#  undef SvTRUEx
#  define SvIVx(sv) ({SV *nsv = (SV*)(sv); SvIV(nsv); })
#  define SvUVx(sv) ({SV *nsv = (SV*)(sv); SvUV(nsv); })
#  define SvNVx(sv) ({SV *nsv = (SV*)(sv); SvNV(nsv); })
#  define SvPVx(sv, lp) ({SV *nsv = (sv); SvPV(nsv, lp); })
#  define SvPVutf8x(sv, lp) ({SV *nsv = (sv); SvPVutf8(nsv, lp); })
#  define SvPVbytex(sv, lp) ({SV *nsv = (sv); SvPVbyte(nsv, lp); })
#  define SvTRUE(sv) (						\
    !sv								\
    ? 0								\
    :    SvPOK(sv)						\
	?   (({XPV *nxpv = (XPV*)SvANY(sv);			\
	     nxpv &&						\
	     (nxpv->xpv_cur > 1 ||				\
	      (nxpv->xpv_cur && *nxpv->xpv_pv != '0')); })	\
	     ? 1						\
	     : 0)						\
	:							\
	    SvIOK(sv)						\
	    ? SvIVX(sv) != 0					\
	    :   SvNOK(sv)					\
		? SvNVX(sv) != 0.0				\
		: sv_2bool(sv) )
#  define SvTRUEx(sv) ({SV *nsv = (sv); SvTRUE(nsv); })
#else /* __GNUC__ */
#ifndef USE_THREADS
/* These inlined macros use globals, which will require a thread
 * declaration in user code, so we avoid them under threads */

#  undef SvIVx
#  undef SvUVx
#  undef SvNVx
#  undef SvPVx
#  undef SvPVutf8x
#  undef SvPVbytex
#  undef SvTRUE
#  undef SvTRUEx
#  define SvIVx(sv) ((PL_Sv = (sv)), SvIV(PL_Sv))
#  define SvUVx(sv) ((PL_Sv = (sv)), SvUV(PL_Sv))
#  define SvNVx(sv) ((PL_Sv = (sv)), SvNV(PL_Sv))
#  define SvPVx(sv, lp) ((PL_Sv = (sv)), SvPV(PL_Sv, lp))
#  define SvPVutf8x(sv, lp) ((PL_Sv = (sv)), SvPVutf8(PL_Sv, lp))
#  define SvPVbytex(sv, lp) ((PL_Sv = (sv)), SvPVbyte(PL_Sv, lp))
#  define SvTRUE(sv) (						\
    !sv								\
    ? 0								\
    :    SvPOK(sv)						\
	?   ((PL_Xpv = (XPV*)SvANY(sv)) &&			\
	     (PL_Xpv->xpv_cur > 1 ||				\
	      (PL_Xpv->xpv_cur && *PL_Xpv->xpv_pv != '0'))	\
	     ? 1						\
	     : 0)						\
	:							\
	    SvIOK(sv)						\
	    ? SvIVX(sv) != 0					\
	    :   SvNOK(sv)					\
		? SvNVX(sv) != 0.0				\
		: sv_2bool(sv) )
#  define SvTRUEx(sv) ((PL_Sv = (sv)), SvTRUE(PL_Sv))
#endif /* !USE_THREADS */
#endif /* !__GNU__ */
#endif /* !CRIPPLED_CC */

/*
=for apidoc Am|SV*|newRV_inc|SV* sv

Creates an RV wrapper for an SV.  The reference count for the original SV is
incremented.

=cut
*/

#define newRV_inc(sv)	newRV(sv)

/* the following macros update any magic values this sv is associated with */

/*
=for apidoc Am|void|SvGETMAGIC|SV* sv
Invokes C<mg_get> on an SV if it has 'get' magic.  This macro evaluates its
argument more than once.

=for apidoc Am|void|SvSETMAGIC|SV* sv
Invokes C<mg_set> on an SV if it has 'set' magic.  This macro evaluates its
argument more than once.

=for apidoc Am|void|SvSetSV|SV* dsb|SV* ssv
Calls C<sv_setsv> if dsv is not the same as ssv.  May evaluate arguments
more than once.

=for apidoc Am|void|SvSetSV_nosteal|SV* dsv|SV* ssv
Calls a non-destructive version of C<sv_setsv> if dsv is not the same as
ssv. May evaluate arguments more than once.

=for apidoc Am|void|SvGROW|SV* sv|STRLEN len
Expands the character buffer in the SV so that it has room for the
indicated number of bytes (remember to reserve space for an extra trailing
NUL character).  Calls C<sv_grow> to perform the expansion if necessary. 
Returns a pointer to the character buffer.

=cut
*/

#define SvGETMAGIC(x) STMT_START { if (SvGMAGICAL(x)) mg_get(x); } STMT_END
#define SvSETMAGIC(x) STMT_START { if (SvSMAGICAL(x)) mg_set(x); } STMT_END

#define SvSetSV_and(dst,src,finally) \
	STMT_START {					\
	    if ((dst) != (src)) {			\
		sv_setsv(dst, src);			\
		finally;				\
	    }						\
	} STMT_END
#define SvSetSV_nosteal_and(dst,src,finally) \
	STMT_START {					\
	    if ((dst) != (src)) {			\
		U32 tMpF = SvFLAGS(src) & SVs_TEMP;	\
		SvTEMP_off(src);			\
		sv_setsv(dst, src);			\
		SvFLAGS(src) |= tMpF;			\
		finally;				\
	    }						\
	} STMT_END

#define SvSetSV(dst,src) \
		SvSetSV_and(dst,src,/*nothing*/;)
#define SvSetSV_nosteal(dst,src) \
		SvSetSV_nosteal_and(dst,src,/*nothing*/;)

#define SvSetMagicSV(dst,src) \
		SvSetSV_and(dst,src,SvSETMAGIC(dst))
#define SvSetMagicSV_nosteal(dst,src) \
		SvSetSV_nosteal_and(dst,src,SvSETMAGIC(dst))

#ifdef DEBUGGING
#define SvPEEK(sv) sv_peek(sv)
#else
#define SvPEEK(sv) ""
#endif

#define SvIMMORTAL(sv) ((sv)==&PL_sv_undef || (sv)==&PL_sv_yes || (sv)==&PL_sv_no)

#define boolSV(b) ((b) ? &PL_sv_yes : &PL_sv_no)

#define isGV(sv) (SvTYPE(sv) == SVt_PVGV)

#define SvGROW(sv,len) (SvLEN(sv) < (len) ? sv_grow(sv,len) : SvPVX(sv))
#define Sv_Grow sv_grow

#define CLONEf_COPY_STACKS 1
#define CLONEf_KEEP_PTR_TABLE 2
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\thrdvar.h ===
/***********************************************/
/* Global only to current thread               */
/***********************************************/

/* Don't forget to re-run embed.pl to propagate changes! */

/* The 'T' prefix is only needed for vars that need appropriate #defines
 * generated when built with or without USE_THREADS.  It is also used
 * to generate the appropriate export list for win32.
 *
 * When building without USE_THREADS, these variables will be truly global.
 * When building without USE_THREADS but with MULTIPLICITY, these variables
 * will be global per-interpreter. */

/* Important ones in the first cache line (if alignment is done right) */

#ifdef USE_THREADS
PERLVAR(interp,		PerlInterpreter*)	/* thread owner */
#endif

PERLVAR(Tstack_sp,	SV **)		/* top of the stack */
#ifdef OP_IN_REGISTER
PERLVAR(Topsave,	OP *)
#else
PERLVAR(Top,		OP *)		/* currently executing op */
#endif
PERLVAR(Tcurpad,	SV **)		/* active pad (lexicals+tmps) */

PERLVAR(Tstack_base,	SV **)
PERLVAR(Tstack_max,	SV **)

PERLVAR(Tscopestack,	I32 *)		/* scopes we've ENTERed */
PERLVAR(Tscopestack_ix,	I32)
PERLVAR(Tscopestack_max,I32)

PERLVAR(Tsavestack,	ANY *)		/* items that need to be restored
					   when LEAVEing scopes we've ENTERed */
PERLVAR(Tsavestack_ix,	I32)
PERLVAR(Tsavestack_max,	I32)

PERLVAR(Ttmps_stack,	SV **)		/* mortals we've made */
PERLVARI(Ttmps_ix,	I32,	-1)
PERLVARI(Ttmps_floor,	I32,	-1)
PERLVAR(Ttmps_max,	I32)

PERLVAR(Tmarkstack,	I32 *)		/* stack_sp locations we're remembering */
PERLVAR(Tmarkstack_ptr,	I32 *)
PERLVAR(Tmarkstack_max,	I32 *)

PERLVAR(Tretstack,	OP **)		/* OPs we have postponed executing */
PERLVAR(Tretstack_ix,	I32)
PERLVAR(Tretstack_max,	I32)

PERLVAR(TSv,		SV *)		/* used to hold temporary values */
PERLVAR(TXpv,		XPV *)		/* used to hold temporary values */

/*
=for apidoc Amn|STRLEN|PL_na

A convenience variable which is typically used with C<SvPV> when one
doesn't care about the length of the string.  It is usually more efficient
to either declare a local variable and use that instead or to use the
C<SvPV_nolen> macro.

=cut
*/

PERLVAR(Tna,		STRLEN)		/* for use in SvPV when length is
					   Not Applicable */

/* stat stuff */
PERLVAR(Tstatbuf,	Stat_t)
PERLVAR(Tstatcache,	Stat_t)		/* _ */
PERLVAR(Tstatgv,	GV *)
PERLVARI(Tstatname,	SV *,	Nullsv)

#ifdef HAS_TIMES
PERLVAR(Ttimesbuf,	struct tms)
#endif

/* Fields used by magic variables such as $@, $/ and so on */
PERLVAR(Ttainted,	bool)		/* using variables controlled by $< */
PERLVAR(Tcurpm,		PMOP *)		/* what to do \ interps in REs from */
PERLVAR(Tnrs,		SV *)

/*
=for apidoc mn|SV*|PL_rs

The input record separator - C<$/> in Perl space.

=for apidoc mn|GV*|PL_last_in_gv

The GV which was last used for a filehandle input operation. (C<< <FH> >>)

=for apidoc mn|SV*|PL_ofs_sv

The output field separator - C<$,> in Perl space.

=cut
*/

PERLVAR(Trs,		SV *)		/* input record separator $/ */
PERLVAR(Tlast_in_gv,	GV *)		/* GV used in last <FH> */
PERLVAR(Tofs,		char *)		/* output field separator $, */
PERLVAR(Tofslen,	STRLEN)
PERLVAR(Tdefoutgv,	GV *)		/* default FH for output */
PERLVARI(Tchopset,	char *,	" \n-")	/* $: */
PERLVAR(Tformtarget,	SV *)
PERLVAR(Tbodytarget,	SV *)
PERLVAR(Ttoptarget,	SV *)

/* Stashes */
PERLVAR(Tdefstash,	HV *)		/* main symbol table */
PERLVAR(Tcurstash,	HV *)		/* symbol table for current package */

PERLVAR(Trestartop,	OP *)		/* propagating an error from croak? */
PERLVARI(Tcurcop,	COP * VOL,	&PL_compiling)
PERLVAR(Tin_eval,	VOL int)	/* trap "fatal" errors? */
PERLVAR(Tdelaymagic,	int)		/* ($<,$>) = ... */
PERLVARI(Tdirty,	bool, FALSE)	/* in the middle of tearing things down? */
PERLVAR(Tlocalizing,	int)		/* are we processing a local() list? */

PERLVAR(Tcurstack,	AV *)		/* THE STACK */
PERLVAR(Tcurstackinfo,	PERL_SI *)	/* current stack + context */
PERLVAR(Tmainstack,	AV *)		/* the stack when nothing funny is happening */

PERLVAR(Ttop_env,	JMPENV *)	/* ptr. to current sigjmp() environment */
PERLVAR(Tstart_env,	JMPENV)		/* empty startup sigjmp() environment */
#ifdef PERL_FLEXIBLE_EXCEPTIONS
PERLVARI(Tprotect,	protect_proc_t,	MEMBER_TO_FPTR(Perl_default_protect))
#endif
PERLVARI(Terrors,	SV *, Nullsv)	/* outstanding queued errors */

/* statics "owned" by various functions */
PERLVAR(Tav_fetch_sv,	SV *)		/* owned by av_fetch() */
PERLVAR(Thv_fetch_sv,	SV *)		/* owned by hv_fetch() */
PERLVAR(Thv_fetch_ent_mh, HE)		/* owned by hv_fetch_ent() */

PERLVAR(Tmodcount,	I32)		/* how much mod()ification in assignment? */

PERLVAR(Tlastgotoprobe,	OP*)		/* from pp_ctl.c */
PERLVARI(Tdumpindent,	I32, 4)		/* # of blanks per dump indentation level */

/* sort stuff */
PERLVAR(Tsortcop,	OP *)		/* user defined sort routine */
PERLVAR(Tsortstash,	HV *)		/* which is in some package or other */
PERLVAR(Tfirstgv,	GV *)		/* $a */
PERLVAR(Tsecondgv,	GV *)		/* $b */
PERLVAR(Tsortcxix,	I32)		/* from pp_ctl.c */

/* float buffer */
PERLVAR(Tefloatbuf,	char*)
PERLVAR(Tefloatsize,	STRLEN)

/* regex stuff */

PERLVAR(Tscreamfirst,	I32 *)
PERLVAR(Tscreamnext,	I32 *)
PERLVARI(Tmaxscream,	I32,	-1)
PERLVAR(Tlastscream,	SV *)

PERLVAR(Tregdummy,	regnode)	/* from regcomp.c */
PERLVAR(Tregcomp_parse,	char*)		/* Input-scan pointer. */
PERLVAR(Tregxend,	char*)		/* End of input for compile */
PERLVAR(Tregcode,	regnode*)	/* Code-emit pointer; &regdummy = don't */
PERLVAR(Tregnaughty,	I32)		/* How bad is this pattern? */
PERLVAR(Tregsawback,	I32)		/* Did we see \1, ...? */
PERLVAR(Tregprecomp,	char *)		/* uncompiled string. */
PERLVAR(Tregnpar,	I32)		/* () count. */
PERLVAR(Tregsize,	I32)		/* Code size. */
PERLVAR(Tregflags,	U16)		/* are we folding, multilining? */
PERLVAR(Tregseen,	U32)		/* from regcomp.c */
PERLVAR(Tseen_zerolen,	I32)		/* from regcomp.c */
PERLVAR(Tseen_evals,	I32)		/* from regcomp.c */
PERLVAR(Tregcomp_rx,	regexp *)	/* from regcomp.c */
PERLVAR(Textralen,	I32)		/* from regcomp.c */
PERLVAR(Tcolorset,	int)		/* from regcomp.c */
PERLVARA(Tcolors,6,	char *)		/* from regcomp.c */
PERLVAR(Treg_whilem_seen, I32)		/* number of WHILEM in this expr */
PERLVAR(Treginput,	char *)		/* String-input pointer. */
PERLVAR(Tregbol,	char *)		/* Beginning of input, for ^ check. */
PERLVAR(Tregeol,	char *)		/* End of input, for $ check. */
PERLVAR(Tregstartp,	I32 *)		/* Pointer to startp array. */
PERLVAR(Tregendp,	I32 *)		/* Ditto for endp. */
PERLVAR(Treglastparen,	U32 *)		/* Similarly for lastparen. */
PERLVAR(Tregtill,	char *)		/* How far we are required to go. */
PERLVAR(Tregprev,	char)		/* char before regbol, \n if none */
PERLVAR(Treg_start_tmp,	char **)	/* from regexec.c */
PERLVAR(Treg_start_tmpl,U32)		/* from regexec.c */
PERLVAR(Tregdata,	struct reg_data *)
					/* from regexec.c renamed was data */
PERLVAR(Tbostr,		char *)		/* from regexec.c */
PERLVAR(Treg_flags,	U32)		/* from regexec.c */
PERLVAR(Treg_eval_set,	I32)		/* from regexec.c */
PERLVAR(Tregnarrate,	I32)		/* from regexec.c */
PERLVAR(Tregprogram,	regnode *)	/* from regexec.c */
PERLVARI(Tregindent,	int,	    0)	/* from regexec.c */
PERLVAR(Tregcc,		CURCUR *)	/* from regexec.c */
PERLVAR(Treg_call_cc,	struct re_cc_state *)	/* from regexec.c */
PERLVAR(Treg_re,	regexp *)	/* from regexec.c */
PERLVAR(Treg_ganch,	char *)		/* position of \G */
PERLVAR(Treg_sv,	SV *)		/* what we match against */
PERLVAR(Treg_magic,	MAGIC *)	/* pos-magic of what we match */
PERLVAR(Treg_oldpos,	I32)		/* old pos of what we match */
PERLVARI(Treg_oldcurpm,	PMOP*, NULL)	/* curpm before match */
PERLVARI(Treg_curpm,	PMOP*, NULL)	/* curpm during match */
PERLVAR(Treg_oldsaved,	char*)		/* old saved substr during match */
PERLVAR(Treg_oldsavedlen, STRLEN)	/* old length of saved substr during match */
PERLVAR(Treg_maxiter,	I32)		/* max wait until caching pos */
PERLVAR(Treg_leftiter,	I32)		/* wait until caching pos */
PERLVARI(Treg_poscache, char *, Nullch)	/* cache of pos of WHILEM */
PERLVAR(Treg_poscache_size, STRLEN)	/* size of pos cache of WHILEM */

PERLVARI(Tregcompp,	regcomp_t, MEMBER_TO_FPTR(Perl_pregcomp))
					/* Pointer to REx compiler */
PERLVARI(Tregexecp,	regexec_t, MEMBER_TO_FPTR(Perl_regexec_flags))
					/* Pointer to REx executer */
PERLVARI(Tregint_start,	re_intuit_start_t, MEMBER_TO_FPTR(Perl_re_intuit_start))
					/* Pointer to optimized REx executer */
PERLVARI(Tregint_string,re_intuit_string_t, MEMBER_TO_FPTR(Perl_re_intuit_string))
					/* Pointer to optimized REx string */
PERLVARI(Tregfree,	regfree_t, MEMBER_TO_FPTR(Perl_pregfree))
					/* Pointer to REx free()er */

PERLVARI(Treginterp_cnt,int,	    0)	/* Whether `Regexp'
						   was interpolated. */
PERLVARI(Treg_starttry,	char *,	    0)	/* -Dr: where regtry was called. */
PERLVARI(Twatchaddr,	char **,    0)
PERLVAR(Twatchok,	char *)

/* Note that the variables below are all explicitly referenced in the code
 * as thr->whatever and therefore don't need the 'T' prefix. */

#ifdef USE_THREADS

PERLVAR(oursv,		SV *)
PERLVAR(cvcache,	HV *)
PERLVAR(self,		perl_os_thread)	/* Underlying thread object */
PERLVAR(flags,		U32)
PERLVAR(threadsv,	AV *)		/* Per-thread SVs ($_, $@ etc.) */
PERLVAR(threadsvp,	SV **)		/* AvARRAY(threadsv) */
PERLVAR(specific,	AV *)		/* Thread-specific user data */
PERLVAR(errsv,		SV *)		/* Backing SV for $@ */
PERLVAR(mutex,		perl_mutex)	/* For the fields others can change */
PERLVAR(tid,		U32)
PERLVAR(prev,		struct perl_thread *)
PERLVAR(next,		struct perl_thread *)
					/* Circular linked list of threads */

#ifdef HAVE_THREAD_INTERN
PERLVAR(i,		struct thread_intern)
					/* Platform-dependent internals */
#endif

PERLVAR(trailing_nul,	char)		/* For the sake of thrsv and oursv */

#endif /* USE_THREADS */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\unixish.h ===
/*
 * The following symbols are defined if your operating system supports
 * functions by that name.  All Unixes I know of support them, thus they
 * are not checked by the configuration script, but are directly defined
 * here.
 */

/* HAS_IOCTL:
 *	This symbol, if defined, indicates that the ioctl() routine is
 *	available to set I/O characteristics
 */
#define	HAS_IOCTL		/ **/
 
/* HAS_UTIME:
 *	This symbol, if defined, indicates that the routine utime() is
 *	available to update the access and modification times of files.
 */
#define HAS_UTIME		/ **/

/* HAS_GROUP
 *	This symbol, if defined, indicates that the getgrnam() and
 *	getgrgid() routines are available to get group entries.
 *	The getgrent() has a separate definition, HAS_GETGRENT.
 */
#define HAS_GROUP		/ **/

/* HAS_PASSWD
 *	This symbol, if defined, indicates that the getpwnam() and
 *	getpwuid() routines are available to get password entries.
 *	The getpwent() has a separate definition, HAS_GETPWENT.
 */
#define HAS_PASSWD		/ **/

#define HAS_KILL
#define HAS_WAIT
  
/* USEMYBINMODE
 *	This symbol, if defined, indicates that the program should
 *	use the routine my_binmode(FILE *fp, char iotype) to insure
 *	that a file is in "binary" mode -- that is, that no translation
 *	of bytes occurs on read or write operations.
 */
#undef USEMYBINMODE

/* Stat_t:
 *	This symbol holds the type used to declare buffers for information
 *	returned by stat().  It's usually just struct stat.  It may be necessary
 *	to include <sys/stat.h> and <sys/types.h> to get any typedef'ed
 *	information.
 */
#define Stat_t struct stat

/* USE_STAT_RDEV:
 *	This symbol is defined if this system has a stat structure declaring
 *	st_rdev
 */
#define USE_STAT_RDEV 	/ **/

/* ACME_MESS:
 *	This symbol, if defined, indicates that error messages should be 
 *	should be generated in a format that allows the use of the Acme
 *	GUI/editor's autofind feature.
 */
#undef ACME_MESS	/**/

/* UNLINK_ALL_VERSIONS:
 *	This symbol, if defined, indicates that the program should arrange
 *	to remove all versions of a file if unlink() is called.  This is
 *	probably only relevant for VMS.
 */
/* #define UNLINK_ALL_VERSIONS		/ **/

/* VMS:
 *	This symbol, if defined, indicates that the program is running under
 *	VMS.  It is currently automatically set by cpps running under VMS,
 *	and is included here for completeness only.
 */
/* #define VMS		/ **/

/* ALTERNATE_SHEBANG:
 *	This symbol, if defined, contains a "magic" string which may be used
 *	as the first line of a Perl program designed to be executed directly
 *	by name, instead of the standard Unix #!.  If ALTERNATE_SHEBANG
 *	begins with a character other then #, then Perl will only treat
 *	it as a command line if if finds the string "perl" in the first
 *	word; otherwise it's treated as the first line of code in the script.
 *	(IOW, Perl won't hand off to another interpreter via an alternate
 *	shebang sequence that might be legal Perl code.)
 */
/* #define ALTERNATE_SHEBANG "#!" / **/

#if !defined(NSIG) || defined(M_UNIX) || defined(M_XENIX) || defined(__NetBSD__)
# include <signal.h>
#endif

#ifndef SIGABRT
#    define SIGABRT SIGILL
#endif
#ifndef SIGILL
#    define SIGILL 6         /* blech */
#endif
#define ABORT() kill(PerlProc_getpid(),SIGABRT);

/*
 * fwrite1() should be a routine with the same calling sequence as fwrite(),
 * but which outputs all of the bytes requested as a single stream (unlike
 * fwrite() itself, which on some systems outputs several distinct records
 * if the number_of_items parameter is >1).
 */
#define fwrite1 fwrite

#define Stat(fname,bufptr) stat((fname),(bufptr))
#define Fstat(fd,bufptr)   fstat((fd),(bufptr))
#define Fflush(fp)         fflush(fp)
#define Mkdir(path,mode)   mkdir((path),(mode))

/* these should be set in a hint file, not here */
#ifndef PERL_SYS_INIT
#if defined(PERL_SCO5) || defined(__FreeBSD__)
#  ifdef __FreeBSD__
#    include <floatingpoint.h>
#  endif
#  define PERL_SYS_INIT(c,v)	fpsetmask(0); MALLOC_INIT
#else
#  ifdef POSIX_BC
#    define PERL_SYS_INIT(c,v)	sigignore(SIGFPE); MALLOC_INIT
#  else
#    define PERL_SYS_INIT(c,v) MALLOC_INIT
#  endif
#endif
#endif

#ifndef PERL_SYS_TERM
#define PERL_SYS_TERM()		OP_REFCNT_TERM; MALLOC_TERM
#endif

#define BIT_BUCKET "/dev/null"

#define dXSUB_SYS

#define USE_ENVIRON_ARRAY
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\thread.h ===
#if defined(USE_THREADS) || defined(USE_ITHREADS)

#ifdef WIN32
#  include <win32thread.h>
#else
#  ifdef OLD_PTHREADS_API /* Here be dragons. */
#    define DETACH(t) \
    STMT_START {						\
	if (pthread_detach(&(t)->self)) {			\
	    MUTEX_UNLOCK(&(t)->mutex);				\
	    Perl_croak_nocontext("panic: DETACH");		\
	}							\
    } STMT_END

#    define PERL_GET_CONTEXT	Perl_get_context()
#    define PERL_SET_CONTEXT(t)	Perl_set_context((void*)t)

#    define PTHREAD_GETSPECIFIC_INT
#    ifdef DJGPP
#      define pthread_addr_t any_t
#      define NEED_PTHREAD_INIT
#      define PTHREAD_CREATE_JOINABLE (1)
#    endif
#    ifdef __OPEN_VM
#      define pthread_addr_t void *
#    endif
#    ifdef VMS
#      define pthread_attr_init(a) pthread_attr_create(a)
#      define PTHREAD_ATTR_SETDETACHSTATE(a,s) pthread_setdetach_np(a,s)
#      define PTHREAD_CREATE(t,a,s,d) pthread_create(t,a,s,d)
#      define pthread_key_create(k,d) pthread_keycreate(k,(pthread_destructor_t)(d))
#      define pthread_mutexattr_init(a) pthread_mutexattr_create(a)
#      define pthread_mutexattr_settype(a,t) pthread_mutexattr_setkind_np(a,t)
#    endif
#    if defined(__hpux) && defined(__ux_version) && __ux_version <= 1020
#      define PTHREAD_ATFORK(prepare,parent,child)	NOOP
#      define pthread_attr_init(a) pthread_attr_create(a)
       /* XXX pthread_setdetach_np() missing in DCE threads on HP-UX 10.20 */
#      define PTHREAD_ATTR_SETDETACHSTATE(a,s)	(0)
#      define PTHREAD_CREATE(t,a,s,d) pthread_create(t,a,s,d)
#      define pthread_key_create(k,d) pthread_keycreate(k,(pthread_destructor_t)(d))
#      define pthread_mutexattr_init(a) pthread_mutexattr_create(a)
#      define pthread_mutexattr_settype(a,t) pthread_mutexattr_setkind_np(a,t)
#    endif
#    if defined(DJGPP) || defined(__OPEN_VM)
#      define PTHREAD_ATTR_SETDETACHSTATE(a,s) pthread_attr_setdetachstate(a,&(s))
#      define YIELD pthread_yield(NULL)
#    endif
#  endif
#  if !defined(__hpux) || !defined(__ux_version) || __ux_version > 1020
#    define pthread_mutexattr_default NULL
#    define pthread_condattr_default  NULL
#  endif
#endif

#ifndef PTHREAD_CREATE
/* You are not supposed to pass NULL as the 2nd arg of PTHREAD_CREATE(). */
#  define PTHREAD_CREATE(t,a,s,d) pthread_create(t,&(a),s,d)
#endif

#ifndef PTHREAD_ATTR_SETDETACHSTATE
#  define PTHREAD_ATTR_SETDETACHSTATE(a,s) pthread_attr_setdetachstate(a,s)
#endif

#ifndef PTHREAD_CREATE_JOINABLE
#  ifdef OLD_PTHREAD_CREATE_JOINABLE
#    define PTHREAD_CREATE_JOINABLE OLD_PTHREAD_CREATE_JOINABLE
#  else
#    define PTHREAD_CREATE_JOINABLE 0 /* Panic?  No, guess. */
#  endif
#endif

#ifdef I_MACH_CTHREADS

/* cthreads interface */

/* #include <mach/cthreads.h> is in perl.h #ifdef I_MACH_CTHREADS */

#define MUTEX_INIT(m) \
    STMT_START {						\
	*m = mutex_alloc();					\
	if (*m) {						\
	    mutex_init(*m);					\
	} else {						\
	    Perl_croak_nocontext("panic: MUTEX_INIT");		\
	}							\
    } STMT_END

#define MUTEX_LOCK(m)			mutex_lock(*m)
#define MUTEX_UNLOCK(m)			mutex_unlock(*m)
#define MUTEX_DESTROY(m) \
    STMT_START {						\
	mutex_free(*m);						\
	*m = 0;							\
    } STMT_END

#define COND_INIT(c) \
    STMT_START {						\
	*c = condition_alloc();					\
	if (*c) {						\
	    condition_init(*c);					\
	}							\
	else {							\
	    Perl_croak_nocontext("panic: COND_INIT");		\
	}							\
    } STMT_END

#define COND_SIGNAL(c)		condition_signal(*c)
#define COND_BROADCAST(c)	condition_broadcast(*c)
#define COND_WAIT(c, m)		condition_wait(*c, *m)
#define COND_DESTROY(c) \
    STMT_START {						\
	condition_free(*c);					\
	*c = 0;							\
    } STMT_END

#define THREAD_CREATE(thr, f)	(thr->self = cthread_fork(f, thr), 0)
#define THREAD_POST_CREATE(thr)

#define THREAD_RET_TYPE		any_t
#define THREAD_RET_CAST(x)	((any_t) x)

#define DETACH(t)		cthread_detach(t->self)
#define JOIN(t, avp)		(*(avp) = (AV *)cthread_join(t->self))

#define PERL_SET_CONTEXT(t)	cthread_set_data(cthread_self(), t)
#define PERL_GET_CONTEXT	cthread_data(cthread_self())

#define INIT_THREADS		cthread_init()
#define YIELD			cthread_yield()
#define ALLOC_THREAD_KEY	NOOP
#define FREE_THREAD_KEY		NOOP
#define SET_THREAD_SELF(thr)	(thr->self = cthread_self())

#endif /* I_MACH_CTHREADS */

#ifndef YIELD
#  ifdef SCHED_YIELD
#    define YIELD SCHED_YIELD
#  else
#    ifdef HAS_SCHED_YIELD
#      define YIELD sched_yield()
#    else
#      ifdef HAS_PTHREAD_YIELD
    /* pthread_yield(NULL) platforms are expected
     * to have #defined YIELD for themselves. */
#        define YIELD pthread_yield()
#      endif
#    endif
#  endif
#endif

#ifdef __hpux
#  define MUTEX_INIT_NEEDS_MUTEX_ZEROED
#endif

#ifndef MUTEX_INIT

#  ifdef MUTEX_INIT_NEEDS_MUTEX_ZEROED
    /* Temporary workaround, true bug is deeper. --jhi 1999-02-25 */
#    define MUTEX_INIT(m) \
    STMT_START {						\
	Zero((m), 1, perl_mutex);                               \
 	if (pthread_mutex_init((m), pthread_mutexattr_default))	\
	    Perl_croak_nocontext("panic: MUTEX_INIT");		\
    } STMT_END
#  else
#    define MUTEX_INIT(m) \
    STMT_START {						\
	if (pthread_mutex_init((m), pthread_mutexattr_default))	\
	    Perl_croak_nocontext("panic: MUTEX_INIT");		\
    } STMT_END
#  endif

#  define MUTEX_LOCK(m) \
    STMT_START {						\
	if (pthread_mutex_lock((m)))				\
	    Perl_croak_nocontext("panic: MUTEX_LOCK");		\
    } STMT_END

#  define MUTEX_UNLOCK(m) \
    STMT_START {						\
	if (pthread_mutex_unlock((m)))				\
	    Perl_croak_nocontext("panic: MUTEX_UNLOCK");	\
    } STMT_END

#  define MUTEX_DESTROY(m) \
    STMT_START {						\
	if (pthread_mutex_destroy((m)))				\
	    Perl_croak_nocontext("panic: MUTEX_DESTROY");	\
    } STMT_END
#endif /* MUTEX_INIT */

#ifndef COND_INIT
#  define COND_INIT(c) \
    STMT_START {						\
	if (pthread_cond_init((c), pthread_condattr_default))	\
	    Perl_croak_nocontext("panic: COND_INIT");		\
    } STMT_END

#  define COND_SIGNAL(c) \
    STMT_START {						\
	if (pthread_cond_signal((c)))				\
	    Perl_croak_nocontext("panic: COND_SIGNAL");		\
    } STMT_END

#  define COND_BROADCAST(c) \
    STMT_START {						\
	if (pthread_cond_broadcast((c)))			\
	    Perl_croak_nocontext("panic: COND_BROADCAST");	\
    } STMT_END

#  define COND_WAIT(c, m) \
    STMT_START {						\
	if (pthread_cond_wait((c), (m)))			\
	    Perl_croak_nocontext("panic: COND_WAIT");		\
    } STMT_END

#  define COND_DESTROY(c) \
    STMT_START {						\
	if (pthread_cond_destroy((c)))				\
	    Perl_croak_nocontext("panic: COND_DESTROY");	\
    } STMT_END
#endif /* COND_INIT */

/* DETACH(t) must only be called while holding t->mutex */
#ifndef DETACH
#  define DETACH(t) \
    STMT_START {						\
	if (pthread_detach((t)->self)) {			\
	    MUTEX_UNLOCK(&(t)->mutex);				\
	    Perl_croak_nocontext("panic: DETACH");		\
	}							\
    } STMT_END
#endif /* DETACH */

#ifndef JOIN
#  define JOIN(t, avp) \
    STMT_START {						\
	if (pthread_join((t)->self, (void**)(avp)))		\
	    Perl_croak_nocontext("panic: pthread_join");	\
    } STMT_END
#endif /* JOIN */

#ifndef PERL_GET_CONTEXT
#  define PERL_GET_CONTEXT	pthread_getspecific(PL_thr_key)
#endif

#ifndef PERL_SET_CONTEXT
#  define PERL_SET_CONTEXT(t) \
    STMT_START {						\
	if (pthread_setspecific(PL_thr_key, (void *)(t)))	\
	    Perl_croak_nocontext("panic: pthread_setspecific");	\
    } STMT_END
#endif /* PERL_SET_CONTEXT */

#ifndef INIT_THREADS
#  ifdef NEED_PTHREAD_INIT
#    define INIT_THREADS pthread_init()
#  endif
#endif

#ifndef ALLOC_THREAD_KEY
#  define ALLOC_THREAD_KEY \
    STMT_START {						\
	if (pthread_key_create(&PL_thr_key, 0))	{		\
	    PerlIO_printf(PerlIO_stderr(), "panic: pthread_key_create");	\
	    exit(1);						\
	}							\
    } STMT_END
#endif

#ifndef FREE_THREAD_KEY
#  define FREE_THREAD_KEY \
    STMT_START {						\
	pthread_key_delete(PL_thr_key);				\
    } STMT_END
#endif

#ifndef PTHREAD_ATFORK
#  define PTHREAD_ATFORK(prepare,parent,child)			\
    pthread_atfork(prepare,parent,child)
#endif

#ifndef THREAD_RET_TYPE
#  define THREAD_RET_TYPE	void *
#  define THREAD_RET_CAST(p)	((void *)(p))
#endif /* THREAD_RET */

#if defined(USE_THREADS)

/* Accessor for per-thread SVs */
#  define THREADSV(i) (thr->threadsvp[i])

/*
 * LOCK_SV_MUTEX and UNLOCK_SV_MUTEX are performance-critical. Here, we
 * try only locking them if there may be more than one thread in existence.
 * Systems with very fast mutexes (and/or slow conditionals) may wish to
 * remove the "if (threadnum) ..." test.
 * XXX do NOT use C<if (PL_threadnum) ...> -- it sets up race conditions!
 */
#  define LOCK_SV_MUTEX		MUTEX_LOCK(&PL_sv_mutex)
#  define UNLOCK_SV_MUTEX	MUTEX_UNLOCK(&PL_sv_mutex)
#  define LOCK_STRTAB_MUTEX	MUTEX_LOCK(&PL_strtab_mutex)
#  define UNLOCK_STRTAB_MUTEX	MUTEX_UNLOCK(&PL_strtab_mutex)
#  define LOCK_CRED_MUTEX	MUTEX_LOCK(&PL_cred_mutex)
#  define UNLOCK_CRED_MUTEX	MUTEX_UNLOCK(&PL_cred_mutex)
#  define LOCK_FDPID_MUTEX	MUTEX_LOCK(&PL_fdpid_mutex)
#  define UNLOCK_FDPID_MUTEX	MUTEX_UNLOCK(&PL_fdpid_mutex)
#  define LOCK_SV_LOCK_MUTEX	MUTEX_LOCK(&PL_sv_lock_mutex)
#  define UNLOCK_SV_LOCK_MUTEX	MUTEX_UNLOCK(&PL_sv_lock_mutex)

/* Values and macros for thr->flags */
#define THRf_STATE_MASK	7
#define THRf_R_JOINABLE	0
#define THRf_R_JOINED	1
#define THRf_R_DETACHED	2
#define THRf_ZOMBIE	3
#define THRf_DEAD	4

#define THRf_DID_DIE	8

/* ThrSTATE(t) and ThrSETSTATE(t) must only be called while holding t->mutex */
#define ThrSTATE(t) ((t)->flags & THRf_STATE_MASK)
#define ThrSETSTATE(t, s) STMT_START {		\
	(t)->flags &= ~THRf_STATE_MASK;		\
	(t)->flags |= (s);			\
	DEBUG_S(PerlIO_printf(Perl_debug_log,	\
			      "thread %p set to state %d\n", (t), (s))); \
    } STMT_END

typedef struct condpair {
    perl_mutex	mutex;		/* Protects all other fields */
    perl_cond	owner_cond;	/* For when owner changes at all */
    perl_cond	cond;		/* For cond_signal and cond_broadcast */
    Thread	owner;		/* Currently owning thread */
} condpair_t;

#define MgMUTEXP(mg) (&((condpair_t *)(mg->mg_ptr))->mutex)
#define MgOWNERCONDP(mg) (&((condpair_t *)(mg->mg_ptr))->owner_cond)
#define MgCONDP(mg) (&((condpair_t *)(mg->mg_ptr))->cond)
#define MgOWNER(mg) ((condpair_t *)(mg->mg_ptr))->owner

#endif /* USE_THREADS */
#endif /* USE_THREADS || USE_ITHREADS */

#ifndef MUTEX_LOCK
#  define MUTEX_LOCK(m)
#endif

#ifndef MUTEX_UNLOCK
#  define MUTEX_UNLOCK(m)
#endif

#ifndef MUTEX_INIT
#  define MUTEX_INIT(m)
#endif

#ifndef MUTEX_DESTROY
#  define MUTEX_DESTROY(m)
#endif

#ifndef COND_INIT
#  define COND_INIT(c)
#endif

#ifndef COND_SIGNAL
#  define COND_SIGNAL(c)
#endif

#ifndef COND_BROADCAST
#  define COND_BROADCAST(c)
#endif

#ifndef COND_WAIT
#  define COND_WAIT(c, m)
#endif

#ifndef COND_DESTROY
#  define COND_DESTROY(c)
#endif

#ifndef LOCK_SV_MUTEX
#  define LOCK_SV_MUTEX
#endif

#ifndef UNLOCK_SV_MUTEX
#  define UNLOCK_SV_MUTEX
#endif

#ifndef LOCK_STRTAB_MUTEX
#  define LOCK_STRTAB_MUTEX
#endif

#ifndef UNLOCK_STRTAB_MUTEX
#  define UNLOCK_STRTAB_MUTEX
#endif

#ifndef LOCK_CRED_MUTEX
#  define LOCK_CRED_MUTEX
#endif

#ifndef UNLOCK_CRED_MUTEX
#  define UNLOCK_CRED_MUTEX
#endif

#ifndef LOCK_FDPID_MUTEX
#  define LOCK_FDPID_MUTEX
#endif

#ifndef UNLOCK_FDPID_MUTEX
#  define UNLOCK_FDPID_MUTEX
#endif

#ifndef LOCK_SV_LOCK_MUTEX
#  define LOCK_SV_LOCK_MUTEX
#endif

#ifndef UNLOCK_SV_LOCK_MUTEX
#  define UNLOCK_SV_LOCK_MUTEX
#endif

/* THR, SET_THR, and dTHR are there for compatibility with old versions */
#ifndef THR
#  define THR		PERL_GET_THX
#endif

#ifndef SET_THR
#  define SET_THR(t)	PERL_SET_THX(t)
#endif

#ifndef dTHR
#  define dTHR dNOOP
#endif

#ifndef INIT_THREADS
#  define INIT_THREADS NOOP
#endif

#ifndef PTHREAD_ATFORK
#  define PTHREAD_ATFORK(prepare,parent,child)	NOOP
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\util.h ===
/*    util.h
 *
 *    Copyright (c) 1991-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#ifdef VMS
#  define PERL_FILE_IS_ABSOLUTE(f) \
	(*(f) == '/'							\
	 || (strchr(f,':')						\
	     || ((*(f) == '[' || *(f) == '<')				\
		 && (isALNUM((f)[1]) || strchr("$-_]>",(f)[1])))))

#else		/* !VMS */
#  ifdef WIN32
#    define PERL_FILE_IS_ABSOLUTE(f) \
	(*(f) == '/'							\
	 || ((f)[0] && (f)[1] == ':')		/* drive name */	\
	 || ((f)[0] == '\\' && (f)[1] == '\\'))	/* UNC path */
#  else		/* !WIN32 */
#    if defined( DOSISH) || defined(EPOC)
#      define PERL_FILE_IS_ABSOLUTE(f) \
	(*(f) == '/'							\
	 || ((f)[0] && (f)[1] == ':'))		/* drive name */
#    else	/* NEITHER DOSISH NOR EPOCISH */
#      ifdef MACOS_TRADITIONAL
#        define PERL_FILE_IS_ABSOLUTE(f)	(strchr(f, ':') && *(f) != ':')
#      else /* !MACOS_TRADITIONAL */
#        define PERL_FILE_IS_ABSOLUTE(f)	(*(f) == '/')
#      endif /* MACOS_TRADITIONAL */
#    endif	/* DOSISH */
#  endif	/* WIN32 */
#endif		/* VMS */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\utf8.h ===
/*    utf8.h
 *
 *    Copyright (c) 1998-2001, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

START_EXTERN_C

#ifdef DOINIT
EXTCONST unsigned char PL_utf8skip[] = {
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /* ascii */
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /* ascii */
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /* ascii */
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /* ascii */
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /* bogus */
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /* bogus */
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, /* scripts */
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,	 /* cjk etc. */
7,13, /* Perl extended (not UTF-8).  Up to 72bit allowed (64-bit + reserved). */
};
#else
EXTCONST unsigned char PL_utf8skip[];
#endif

END_EXTERN_C

#define UTF8_MAXLEN 13 /* how wide can a single UTF8 encoded character become */

/* #define IN_UTF8 (PL_curcop->op_private & HINT_UTF8) */
#define IN_BYTE (PL_curcop->op_private & HINT_BYTE)
#define DO_UTF8(sv) (SvUTF8(sv) && !IN_BYTE)

#define UTF8_ALLOW_EMPTY		0x0001
#define UTF8_ALLOW_CONTINUATION		0x0002
#define UTF8_ALLOW_NON_CONTINUATION	0x0004
#define UTF8_ALLOW_FE_FF		0x0008
#define UTF8_ALLOW_SHORT		0x0010
#define UTF8_ALLOW_SURROGATE		0x0020
#define UTF8_ALLOW_BOM			0x0040
#define UTF8_ALLOW_FFFF			0x0080
#define UTF8_ALLOW_LONG			0x0100
#define UTF8_ALLOW_ANYUV		(UTF8_ALLOW_EMPTY|UTF8_ALLOW_FE_FF|\
					 UTF8_ALLOW_SURROGATE|UTF8_ALLOW_BOM|\
					 UTF8_ALLOW_FFFF|UTF8_ALLOW_LONG)
#define UTF8_ALLOW_ANY			0x00ff
#define UTF8_CHECK_ONLY			0x0100

#define UNICODE_SURROGATE_FIRST		0xd800
#define UNICODE_SURROGATE_LAST		0xdfff
#define UNICODE_REPLACEMENT		0xfffd
#define UNICODE_BYTER_ORDER_MARK	0xfffe
#define UNICODE_ILLEGAL			0xffff

#define UNICODE_IS_SURROGATE(c)		((c) >= UNICODE_SURROGATE_FIRST && \
					 (c) <= UNICODE_SURROGATE_LAST)
#define UNICODE_IS_REPLACEMENT(c)	((c) == UNICODE_REPLACMENT)
#define UNICODE_IS_BYTE_ORDER_MARK(c)	((c) == UNICODE_BYTER_ORDER_MARK)
#define UNICODE_IS_ILLEGAL(c)		((c) == UNICODE_ILLEGAL)

#define UTF8SKIP(s) PL_utf8skip[*(U8*)s]

#define UTF8_QUAD_MAX	UINT64_C(0x1000000000)

/*
 
 The following table is from Unicode 3.1.

 Code Points		1st Byte  2nd Byte  3rd Byte  4th Byte

   U+0000..U+007F	00..7F
   U+0080..U+07FF	C2..DF    80..BF
   U+0800..U+0FFF	E0        A0..BF    80..BF
   U+1000..U+FFFF	E1..EF    80..BF    80..BF
  U+10000..U+3FFFF	F0        90..BF    80..BF    80..BF
  U+40000..U+FFFFF	F1..F3    80..BF    80..BF    80..BF
 U+100000..U+10FFFF	F4        80..8F    80..BF    80..BF

 */

#define UTF8_IS_ASCII(c) 		(((U8)c) <  0x80)
#define UTF8_IS_START(c)		(((U8)c) >= 0xc0 && (((U8)c) <= 0xfd))
#define UTF8_IS_CONTINUATION(c)		(((U8)c) >= 0x80 && (((U8)c) <= 0xbf))
#define UTF8_IS_CONTINUED(c) 		(((U8)c) &  0x80)
#define UTF8_IS_DOWNGRADEABLE_START(c)	(((U8)c & 0xfc) != 0xc0)

#define UTF8_CONTINUATION_MASK		((U8)0x3f)
#define UTF8_ACCUMULATION_SHIFT		6
#define UTF8_ACCUMULATE(old, new)	(((old) << UTF8_ACCUMULATION_SHIFT) | (((U8)new) & UTF8_CONTINUATION_MASK))

#define UTF8_EIGHT_BIT_HI(c)	( (((U8)(c))>>6)      |0xc0)
#define UTF8_EIGHT_BIT_LO(c)	(((((U8)(c))   )&0x3f)|0x80)

#ifdef HAS_QUAD
#define UNISKIP(uv) ( (uv) < 0x80           ? 1 : \
		      (uv) < 0x800          ? 2 : \
		      (uv) < 0x10000        ? 3 : \
		      (uv) < 0x200000       ? 4 : \
		      (uv) < 0x4000000      ? 5 : \
		      (uv) < 0x80000000     ? 6 : \
                      (uv) < UTF8_QUAD_MAX ? 7 : 13 ) 
#else
/* No, I'm not even going to *TRY* putting #ifdef inside a #define */
#define UNISKIP(uv) ( (uv) < 0x80           ? 1 : \
		      (uv) < 0x800          ? 2 : \
		      (uv) < 0x10000        ? 3 : \
		      (uv) < 0x200000       ? 4 : \
		      (uv) < 0x4000000      ? 5 : \
		      (uv) < 0x80000000     ? 6 : 7 )
#endif


/*
 * Note: we try to be careful never to call the isXXX_utf8() functions
 * unless we're pretty sure we've seen the beginning of a UTF-8 character
 * (that is, the two high bits are set).  Otherwise we risk loading in the
 * heavy-duty SWASHINIT and SWASHGET routines unnecessarily.
 */
#ifdef EBCDIC
#define isIDFIRST_lazy_if(p,c) isIDFIRST(*(p))
#define isALNUM_lazy_if(p,c)   isALNUM(*(p))
#else
#define isIDFIRST_lazy_if(p,c) ((IN_BYTE || (!c || (*((U8*)p) < 0xc0))) \
				? isIDFIRST(*(p)) \
				: isIDFIRST_utf8((U8*)p))
#define isALNUM_lazy_if(p,c)   ((IN_BYTE || (!c || (*((U8*)p) < 0xc0))) \
				? isALNUM(*(p)) \
				: isALNUM_utf8((U8*)p))
#endif
#define isIDFIRST_lazy(p)	isIDFIRST_lazy_if(p,1)
#define isALNUM_lazy(p)		isALNUM_lazy_if(p,1)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\vdir.h ===
/* vdir.h
 *
 * (c) 1999 Microsoft Corporation. All rights reserved. 
 * Portions (c) 1999 ActiveState Tool Corp, http://www.ActiveState.com/
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 */

#ifndef ___VDir_H___
#define ___VDir_H___

/*
 * Allow one slot for each possible drive letter
 * and one additional slot for a UNC name
 */
const int driveCount = ('Z'-'A')+1+1;

class VDir
{
public:
    VDir(int bManageDir = 1);
    ~VDir() {};

    void Init(VDir* pDir, VMem *pMem);
    void SetDefaultA(char const *pDefault);
    void SetDefaultW(WCHAR const *pDefault);
    char* MapPathA(const char *pInName);
    WCHAR* MapPathW(const WCHAR *pInName);
    int SetCurrentDirectoryA(char *lpBuffer);
    int SetCurrentDirectoryW(WCHAR *lpBuffer);
    inline int GetDefault(void) { return nDefault; };

    inline char* GetCurrentDirectoryA(int dwBufSize, char *lpBuffer)
    {
	char* ptr = dirTableA[nDefault];
	while (dwBufSize--)
	{
	    if ((*lpBuffer++ = *ptr++) == '\0')
		break;
	}
	return lpBuffer;
    };
    inline WCHAR* GetCurrentDirectoryW(int dwBufSize, WCHAR *lpBuffer)
    {
	WCHAR* ptr = dirTableW[nDefault];
	while (dwBufSize--)
	{
	    if ((*lpBuffer++ = *ptr++) == '\0')
		break;
	}
	return lpBuffer;
    };


    DWORD CalculateEnvironmentSpace(void);
    LPSTR BuildEnvironmentSpace(LPSTR lpStr);

protected:
    int SetDirA(char const *pPath, int index);
    void FromEnvA(char *pEnv, int index);
    inline const char *GetDefaultDirA(void)
    {
	return dirTableA[nDefault];
    };

    inline void SetDefaultDirA(char const *pPath, int index)
    {
	SetDirA(pPath, index);
	nDefault = index;
    };
    int SetDirW(WCHAR const *pPath, int index);
    inline const WCHAR *GetDefaultDirW(void)
    {
	return dirTableW[nDefault];
    };

    inline void SetDefaultDirW(WCHAR const *pPath, int index)
    {
	SetDirW(pPath, index);
	nDefault = index;
    };
    inline const char *GetDirA(int index)
    {
	char *ptr = dirTableA[index];
	if (!ptr) {
	    /* simulate the existance of this drive */
	    ptr = szLocalBufferA;
	    ptr[0] = 'A' + index;
	    ptr[1] = ':';
	    ptr[2] = '\\';
	    ptr[3] = 0;
	}
	return ptr;
    };
    inline const WCHAR *GetDirW(int index)
    {
	WCHAR *ptr = dirTableW[index];
	if (!ptr) {
	    /* simulate the existance of this drive */
	    ptr = szLocalBufferW;
	    ptr[0] = 'A' + index;
	    ptr[1] = ':';
	    ptr[2] = '\\';
	    ptr[3] = 0;
	}
	return ptr;
    };

    inline int DriveIndex(char chr)
    {
	if (chr == '\\' || chr == '/')
	    return ('Z'-'A')+1;
	return (chr | 0x20)-'a';
    };

    VMem *pMem;
    int nDefault, bManageDirectory;
    char *dirTableA[driveCount];
    char szLocalBufferA[MAX_PATH+1];
    WCHAR *dirTableW[driveCount];
    WCHAR szLocalBufferW[MAX_PATH+1];
};


VDir::VDir(int bManageDir /* = 1 */)
{
    nDefault = 0;
    bManageDirectory = bManageDir;
    memset(dirTableA, 0, sizeof(dirTableA));
    memset(dirTableW, 0, sizeof(dirTableW));
}

void VDir::Init(VDir* pDir, VMem *p)
{
    int index;
    DWORD driveBits;
    int nSave;
    char szBuffer[MAX_PATH*driveCount];

    pMem = p;
    if (pDir) {
	for (index = 0; index < driveCount; ++index) {
	    SetDirW(pDir->GetDirW(index), index);
	}
	nDefault = pDir->GetDefault();
    }
    else {
	nSave = bManageDirectory;
	bManageDirectory = 0;
	driveBits = GetLogicalDrives();
	if (GetLogicalDriveStrings(sizeof(szBuffer), szBuffer)) {
	    char* pEnv = GetEnvironmentStrings();
	    char* ptr = szBuffer;
	    for (index = 0; index < driveCount; ++index) {
		if (driveBits & (1<<index)) {
		    ptr += SetDirA(ptr, index) + 1;
		    FromEnvA(pEnv, index);
		}
	    }
	    FreeEnvironmentStrings(pEnv);
	}
	SetDefaultA(".");
	bManageDirectory = nSave;
    }
}

int VDir::SetDirA(char const *pPath, int index)
{
    char chr, *ptr;
    int length = 0;
    WCHAR wBuffer[MAX_PATH+1];
    if (index < driveCount && pPath != NULL) {
	length = strlen(pPath);
	pMem->Free(dirTableA[index]);
	ptr = dirTableA[index] = (char*)pMem->Malloc(length+2);
	if (ptr != NULL) {
	    strcpy(ptr, pPath);
	    ptr += length-1;
	    chr = *ptr++;
	    if (chr != '\\' && chr != '/') {
		*ptr++ = '\\';
		*ptr = '\0';
	    }
	    MultiByteToWideChar(CP_ACP, 0, dirTableA[index], -1,
		    wBuffer, (sizeof(wBuffer)/sizeof(WCHAR)));
	    length = wcslen(wBuffer);
	    pMem->Free(dirTableW[index]);
	    dirTableW[index] = (WCHAR*)pMem->Malloc((length+1)*2);
	    if (dirTableW[index] != NULL) {
		wcscpy(dirTableW[index], wBuffer);
	    }
	}
    }

    if(bManageDirectory)
	::SetCurrentDirectoryA(pPath);

    return length;
}

void VDir::FromEnvA(char *pEnv, int index)
{   /* gets the directory for index from the environment variable. */
    while (*pEnv != '\0') {
	if ((pEnv[0] == '=') && (DriveIndex(pEnv[1]) == index)) {
	    SetDirA(&pEnv[4], index);
	    break;
	}
	else
	    pEnv += strlen(pEnv)+1;
    }
}

void VDir::SetDefaultA(char const *pDefault)
{
    char szBuffer[MAX_PATH+1];
    char *pPtr;

    if (GetFullPathNameA(pDefault, sizeof(szBuffer), szBuffer, &pPtr)) {
        if (*pDefault != '.' && pPtr != NULL)
	    *pPtr = '\0';

	SetDefaultDirA(szBuffer, DriveIndex(szBuffer[0]));
    }
}

int VDir::SetDirW(WCHAR const *pPath, int index)
{
    WCHAR chr, *ptr;
    char szBuffer[MAX_PATH+1];
    int length = 0;
    if (index < driveCount && pPath != NULL) {
	length = wcslen(pPath);
	pMem->Free(dirTableW[index]);
	ptr = dirTableW[index] = (WCHAR*)pMem->Malloc((length+2)*2);
	if (ptr != NULL) {
	    wcscpy(ptr, pPath);
	    ptr += length-1;
	    chr = *ptr++;
	    if (chr != '\\' && chr != '/') {
		*ptr++ = '\\';
		*ptr = '\0';
	    }
	    WideCharToMultiByte(CP_ACP, 0, dirTableW[index], -1, szBuffer, sizeof(szBuffer), NULL, NULL);
	    length = strlen(szBuffer);
	    pMem->Free(dirTableA[index]);
	    dirTableA[index] = (char*)pMem->Malloc(length+1);
	    if (dirTableA[index] != NULL) {
		strcpy(dirTableA[index], szBuffer);
	    }
	}
    }

    if(bManageDirectory)
	::SetCurrentDirectoryW(pPath);

    return length;
}

void VDir::SetDefaultW(WCHAR const *pDefault)
{
    WCHAR szBuffer[MAX_PATH+1];
    WCHAR *pPtr;

    if (GetFullPathNameW(pDefault, (sizeof(szBuffer)/sizeof(WCHAR)), szBuffer, &pPtr)) {
        if (*pDefault != '.' && pPtr != NULL)
	    *pPtr = '\0';

	SetDefaultDirW(szBuffer, DriveIndex((char)szBuffer[0]));
    }
}

inline BOOL IsPathSep(char ch)
{
    return (ch == '\\' || ch == '/');
}

inline void DoGetFullPathNameA(char* lpBuffer, DWORD dwSize, char* Dest)
{
    char *pPtr;

    /*
     * On WinNT GetFullPathName does not fail, (or at least always
     * succeeds when the drive is valid) WinNT does set *Dest to Nullch
     * On Win98 GetFullPathName will set last error if it fails, but
     * does not touch *Dest
     */
    *Dest = '\0';
    GetFullPathNameA(lpBuffer, dwSize, Dest, &pPtr);
}

inline bool IsSpecialFileName(const char* pName)
{
    /* specical file names are devices that the system can open
     * these include AUX, CON, NUL, PRN, COMx, LPTx, CLOCK$, CONIN$, CONOUT$
     * (x is a single digit, and names are case-insensitive)
     */
    char ch = (pName[0] & ~0x20);
    switch (ch)
    {
	case 'A': /* AUX */
	    if (((pName[1] & ~0x20) == 'U')
		&& ((pName[2] & ~0x20) == 'X')
		&& !pName[3])
		    return true;
	    break;
	case 'C': /* CLOCK$, COMx,  CON, CONIN$ CONOUT$ */
	    ch = (pName[1] & ~0x20);
	    switch (ch)
	    {
		case 'L': /* CLOCK$ */
		    if (((pName[2] & ~0x20) == 'O')
			&& ((pName[3] & ~0x20) == 'C')
			&& ((pName[4] & ~0x20) == 'K')
			&& (pName[5] == '$')
			&& !pName[6])
			    return true;
		    break;
		case 'O': /* COMx,  CON, CONIN$ CONOUT$ */
		    if ((pName[2] & ~0x20) == 'M') {
			if ((pName[3] >= '1') && (pName[3] <= '9')
			    && !pName[4])
			    return true;
		    }
		    else if ((pName[2] & ~0x20) == 'N') {
			if (!pName[3])
			    return true;
			else if ((pName[3] & ~0x20) == 'I') {
			    if (((pName[4] & ~0x20) == 'N')
				&& (pName[5] == '$')
				&& !pName[6])
			    return true;
			}
			else if ((pName[3] & ~0x20) == 'O') {
			    if (((pName[4] & ~0x20) == 'U')
				&& ((pName[5] & ~0x20) == 'T')
				&& (pName[6] == '$')
				&& !pName[7])
			    return true;
			}
		    }
		    break;
	    }
	    break;
	case 'L': /* LPTx */
	    if (((pName[1] & ~0x20) == 'U')
		&& ((pName[2] & ~0x20) == 'X')
		&& (pName[3] >= '1') && (pName[3] <= '9')
		&& !pName[4])
		    return true;
	    break;
	case 'N': /* NUL */
	    if (((pName[1] & ~0x20) == 'U')
		&& ((pName[2] & ~0x20) == 'L')
		&& !pName[3])
		    return true;
	    break;
	case 'P': /* PRN */
	    if (((pName[1] & ~0x20) == 'R')
		&& ((pName[2] & ~0x20) == 'N')
		&& !pName[3])
		    return true;
	    break;
    }
    return false;
}

char *VDir::MapPathA(const char *pInName)
{   /*
     * possiblities -- relative path or absolute path with or without drive letter
     * OR UNC name
     */
    char szBuffer[(MAX_PATH+1)*2];
    char szlBuf[MAX_PATH+1];
    int length = strlen(pInName);

    if (!length)
	return (char*)pInName;

    if (length > MAX_PATH) {
	strncpy(szlBuf, pInName, MAX_PATH);
	if (IsPathSep(pInName[0]) && !IsPathSep(pInName[1])) {   
	    /* absolute path - reduce length by 2 for drive specifier */
	    szlBuf[MAX_PATH-2] = '\0';
	}
	else
	    szlBuf[MAX_PATH] = '\0';
	pInName = szlBuf;
    }
    /* strlen(pInName) is now <= MAX_PATH */

    if (pInName[1] == ':') {
	/* has drive letter */
	if (IsPathSep(pInName[2])) {
	    /* absolute with drive letter */
	    strcpy(szLocalBufferA, pInName);
	}
	else {
	    /* relative path with drive letter */
	    strcpy(szBuffer, GetDirA(DriveIndex(*pInName)));
	    strcat(szBuffer, &pInName[2]);
	    if(strlen(szBuffer) > MAX_PATH)
		szBuffer[MAX_PATH] = '\0';

	    DoGetFullPathNameA(szBuffer, sizeof(szLocalBufferA), szLocalBufferA);
	}
    }
    else {
	/* no drive letter */
	if (IsPathSep(pInName[1]) && IsPathSep(pInName[0])) {
	    /* UNC name */
	    strcpy(szLocalBufferA, pInName);
	}
	else {
	    strcpy(szBuffer, GetDefaultDirA());
	    if (IsPathSep(pInName[0])) {
		/* absolute path */
		szLocalBufferA[0] = szBuffer[0];
		szLocalBufferA[1] = szBuffer[1];
		strcpy(&szLocalBufferA[2], pInName);
	    }
	    else {
		/* relative path */
		if (IsSpecialFileName(pInName)) {
		    return (char*)pInName;
		}
		else {
		    strcat(szBuffer, pInName);
		    if (strlen(szBuffer) > MAX_PATH)
			szBuffer[MAX_PATH] = '\0';

		    DoGetFullPathNameA(szBuffer, sizeof(szLocalBufferA), szLocalBufferA);
		}
	    }
	}
    }

    return szLocalBufferA;
}

int VDir::SetCurrentDirectoryA(char *lpBuffer)
{
    char *pPtr;
    int length, nRet = -1;

    pPtr = MapPathA(lpBuffer);
    length = strlen(pPtr);
    if(length > 3 && IsPathSep(pPtr[length-1])) {
	/* don't remove the trailing slash from 'x:\'  */
	pPtr[length-1] = '\0';
    }

    DWORD r = GetFileAttributesA(pPtr);
    if ((r != 0xffffffff) && (r & FILE_ATTRIBUTE_DIRECTORY))
    {
	char szBuffer[(MAX_PATH+1)*2];
	DoGetFullPathNameA(pPtr, sizeof(szBuffer), szBuffer);
	SetDefaultDirA(szBuffer, DriveIndex(szBuffer[0]));
	nRet = 0;
    }

    return nRet;
}

DWORD VDir::CalculateEnvironmentSpace(void)
{   /* the current directory environment strings are stored as '=D:=d:\path' */
    int index;
    DWORD dwSize = 0;
    for (index = 0; index < driveCount; ++index) {
	if (dirTableA[index] != NULL) {
	    dwSize += strlen(dirTableA[index]) + 5;  /* add 1 for trailing NULL and 4 for '=D:=' */
	}
    }
    return dwSize;
}

LPSTR VDir::BuildEnvironmentSpace(LPSTR lpStr)
{   /* store the current directory environment strings as '=D:=d:\path' */
    int index, length;
    LPSTR lpDirStr;
    for (index = 0; index < driveCount; ++index) {
	lpDirStr = dirTableA[index];
	if (lpDirStr != NULL) {
	    lpStr[0] = '=';
	    lpStr[1] = lpDirStr[0];
	    lpStr[2] = '\0';
	    CharUpper(&lpStr[1]);
	    lpStr[2] = ':';
	    lpStr[3] = '=';
	    strcpy(&lpStr[4], lpDirStr);
	    length = strlen(lpDirStr);
	    lpStr += length + 5; /* add 1 for trailing NULL and 4 for '=D:=' */
	    if (length > 3 && IsPathSep(lpStr[-2])) {
		lpStr[-2] = '\0';   /* remove the trailing path separator */
		--lpStr;
	    }
	}
    }
    return lpStr;
}

inline BOOL IsPathSep(WCHAR ch)
{
    return (ch == '\\' || ch == '/');
}

inline void DoGetFullPathNameW(WCHAR* lpBuffer, DWORD dwSize, WCHAR* Dest)
{
    WCHAR *pPtr;

    /*
     * On WinNT GetFullPathName does not fail, (or at least always
     * succeeds when the drive is valid) WinNT does set *Dest to Nullch
     * On Win98 GetFullPathName will set last error if it fails, but
     * does not touch *Dest
     */
    *Dest = '\0';
    GetFullPathNameW(lpBuffer, dwSize, Dest, &pPtr);
}

inline bool IsSpecialFileName(const WCHAR* pName)
{
    /* specical file names are devices that the system can open
     * these include AUX, CON, NUL, PRN, COMx, LPTx, CLOCK$, CONIN$, CONOUT$
     * (x is a single digit, and names are case-insensitive)
     */
    WCHAR ch = (pName[0] & ~0x20);
    switch (ch)
    {
	case 'A': /* AUX */
	    if (((pName[1] & ~0x20) == 'U')
		&& ((pName[2] & ~0x20) == 'X')
		&& !pName[3])
		    return true;
	    break;
	case 'C': /* CLOCK$, COMx,  CON, CONIN$ CONOUT$ */
	    ch = (pName[1] & ~0x20);
	    switch (ch)
	    {
		case 'L': /* CLOCK$ */
		    if (((pName[2] & ~0x20) == 'O')
			&& ((pName[3] & ~0x20) == 'C')
			&& ((pName[4] & ~0x20) == 'K')
			&& (pName[5] == '$')
			&& !pName[6])
			    return true;
		    break;
		case 'O': /* COMx,  CON, CONIN$ CONOUT$ */
		    if ((pName[2] & ~0x20) == 'M') {
			if ((pName[3] >= '1') && (pName[3] <= '9')
			    && !pName[4])
			    return true;
		    }
		    else if ((pName[2] & ~0x20) == 'N') {
			if (!pName[3])
			    return true;
			else if ((pName[3] & ~0x20) == 'I') {
			    if (((pName[4] & ~0x20) == 'N')
				&& (pName[5] == '$')
				&& !pName[6])
			    return true;
			}
			else if ((pName[3] & ~0x20) == 'O') {
			    if (((pName[4] & ~0x20) == 'U')
				&& ((pName[5] & ~0x20) == 'T')
				&& (pName[6] == '$')
				&& !pName[7])
			    return true;
			}
		    }
		    break;
	    }
	    break;
	case 'L': /* LPTx */
	    if (((pName[1] & ~0x20) == 'U')
		&& ((pName[2] & ~0x20) == 'X')
		&& (pName[3] >= '1') && (pName[3] <= '9')
		&& !pName[4])
		    return true;
	    break;
	case 'N': /* NUL */
	    if (((pName[1] & ~0x20) == 'U')
		&& ((pName[2] & ~0x20) == 'L')
		&& !pName[3])
		    return true;
	    break;
	case 'P': /* PRN */
	    if (((pName[1] & ~0x20) == 'R')
		&& ((pName[2] & ~0x20) == 'N')
		&& !pName[3])
		    return true;
	    break;
    }
    return false;
}

WCHAR* VDir::MapPathW(const WCHAR *pInName)
{   /*
     * possiblities -- relative path or absolute path with or without drive letter
     * OR UNC name
     */
    WCHAR szBuffer[(MAX_PATH+1)*2];
    WCHAR szlBuf[MAX_PATH+1];
    int length = wcslen(pInName);

    if (!length)
	return (WCHAR*)pInName;

    if (length > MAX_PATH) {
	wcsncpy(szlBuf, pInName, MAX_PATH);
	if (IsPathSep(pInName[0]) && !IsPathSep(pInName[1])) {   
	    /* absolute path - reduce length by 2 for drive specifier */
	    szlBuf[MAX_PATH-2] = '\0';
	}
	else
	    szlBuf[MAX_PATH] = '\0';
	pInName = szlBuf;
    }
    /* strlen(pInName) is now <= MAX_PATH */

    if (pInName[1] == ':') {
	/* has drive letter */
	if (IsPathSep(pInName[2])) {
	    /* absolute with drive letter */
	    wcscpy(szLocalBufferW, pInName);
	}
	else {
	    /* relative path with drive letter */
	    wcscpy(szBuffer, GetDirW(DriveIndex((char)*pInName)));
	    wcscat(szBuffer, &pInName[2]);
	    if(wcslen(szBuffer) > MAX_PATH)
		szBuffer[MAX_PATH] = '\0';

	    DoGetFullPathNameW(szBuffer, (sizeof(szLocalBufferW)/sizeof(WCHAR)), szLocalBufferW);
	}
    }
    else {
	/* no drive letter */
	if (IsPathSep(pInName[1]) && IsPathSep(pInName[0])) {
	    /* UNC name */
	    wcscpy(szLocalBufferW, pInName);
	}
	else {
	    wcscpy(szBuffer, GetDefaultDirW());
	    if (IsPathSep(pInName[0])) {
		/* absolute path */
		szLocalBufferW[0] = szBuffer[0];
		szLocalBufferW[1] = szBuffer[1];
		wcscpy(&szLocalBufferW[2], pInName);
	    }
	    else {
		/* relative path */
		if (IsSpecialFileName(pInName)) {
		    return (WCHAR*)pInName;
		}
		else {
		    wcscat(szBuffer, pInName);
		    if (wcslen(szBuffer) > MAX_PATH)
			szBuffer[MAX_PATH] = '\0';

		    DoGetFullPathNameW(szBuffer, (sizeof(szLocalBufferW)/sizeof(WCHAR)), szLocalBufferW);
		}
	    }
	}
    }
    return szLocalBufferW;
}

int VDir::SetCurrentDirectoryW(WCHAR *lpBuffer)
{
    WCHAR *pPtr;
    int length, nRet = -1;

    pPtr = MapPathW(lpBuffer);
    length = wcslen(pPtr);
    if(length > 3 && IsPathSep(pPtr[length-1])) {
	/* don't remove the trailing slash from 'x:\'  */
	pPtr[length-1] = '\0';
    }

    DWORD r = GetFileAttributesW(pPtr);
    if ((r != 0xffffffff) && (r & FILE_ATTRIBUTE_DIRECTORY))
    {
	WCHAR wBuffer[(MAX_PATH+1)*2];
	DoGetFullPathNameW(pPtr, (sizeof(wBuffer)/sizeof(WCHAR)), wBuffer);
	SetDefaultDirW(wBuffer, DriveIndex((char)wBuffer[0]));
	nRet = 0;
    }

    return nRet;
}

#endif	/* ___VDir_H___ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\warnings.h ===
/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by warnings.pl
   Any changes made here will be lost!
*/


#define Off(x)			((x) / 8)
#define Bit(x)			(1 << ((x) % 8))
#define IsSet(a, x)		((a)[Off(x)] & Bit(x))


#define G_WARN_OFF		0 	/* $^W == 0 */
#define G_WARN_ON		1	/* -w flag and $^W != 0 */
#define G_WARN_ALL_ON		2	/* -W flag */
#define G_WARN_ALL_OFF		4	/* -X flag */
#define G_WARN_ONCE		8	/* set if 'once' ever enabled */
#define G_WARN_ALL_MASK		(G_WARN_ALL_ON|G_WARN_ALL_OFF)

#define pWARN_STD		Nullsv
#define pWARN_ALL		(Nullsv+1)	/* use warnings 'all' */
#define pWARN_NONE		(Nullsv+2)	/* no  warnings 'all' */

#define specialWARN(x)		((x) == pWARN_STD || (x) == pWARN_ALL ||	\
				 (x) == pWARN_NONE)
#define WARN_ALL		0
#define WARN_CHMOD		1
#define WARN_CLOSURE		2
#define WARN_EXITING		3
#define WARN_GLOB		4
#define WARN_IO			5
#define WARN_CLOSED		6
#define WARN_EXEC		7
#define WARN_NEWLINE		8
#define WARN_PIPE		9
#define WARN_UNOPENED		10
#define WARN_MISC		11
#define WARN_NUMERIC		12
#define WARN_ONCE		13
#define WARN_OVERFLOW		14
#define WARN_PACK		15
#define WARN_PORTABLE		16
#define WARN_RECURSION		17
#define WARN_REDEFINE		18
#define WARN_REGEXP		19
#define WARN_SEVERE		20
#define WARN_DEBUGGING		21
#define WARN_INPLACE		22
#define WARN_INTERNAL		23
#define WARN_MALLOC		24
#define WARN_SIGNAL		25
#define WARN_SUBSTR		26
#define WARN_SYNTAX		27
#define WARN_AMBIGUOUS		28
#define WARN_BAREWORD		29
#define WARN_DEPRECATED		30
#define WARN_DIGIT		31
#define WARN_PARENTHESIS	32
#define WARN_PRECEDENCE		33
#define WARN_PRINTF		34
#define WARN_PROTOTYPE		35
#define WARN_QW			36
#define WARN_RESERVED		37
#define WARN_SEMICOLON		38
#define WARN_TAINT		39
#define WARN_UMASK		40
#define WARN_UNINITIALIZED	41
#define WARN_UNPACK		42
#define WARN_UNTIE		43
#define WARN_UTF8		44
#define WARN_VOID		45
#define WARN_Y2K		46

#define WARNsize		12
#define WARN_ALLstring		"\125\125\125\125\125\125\125\125\125\125\125\125"
#define WARN_NONEstring		"\0\0\0\0\0\0\0\0\0\0\0\0"

#define isLEXWARN_on 	(PL_curcop->cop_warnings != pWARN_STD)
#define isLEXWARN_off	(PL_curcop->cop_warnings == pWARN_STD)
#define isWARN_ONCE	(PL_dowarn & (G_WARN_ON|G_WARN_ONCE))
#define isWARN_on(c,x)	(IsSet(SvPVX(c), 2*(x)))
#define isWARNf_on(c,x)	(IsSet(SvPVX(c), 2*(x)+1))

#define ckDEAD(x)							\
	   ( ! specialWARN(PL_curcop->cop_warnings) &&			\
	    ( isWARNf_on(PL_curcop->cop_warnings, WARN_ALL) || 		\
	      isWARNf_on(PL_curcop->cop_warnings, x)))

#define ckWARN(x)							\
	( (isLEXWARN_on && PL_curcop->cop_warnings != pWARN_NONE &&	\
	      (PL_curcop->cop_warnings == pWARN_ALL ||			\
	       isWARN_on(PL_curcop->cop_warnings, x) ) )		\
	  || (isLEXWARN_off && PL_dowarn & G_WARN_ON) )

#define ckWARN2(x,y)							\
	  ( (isLEXWARN_on && PL_curcop->cop_warnings != pWARN_NONE &&	\
	      (PL_curcop->cop_warnings == pWARN_ALL ||			\
	        isWARN_on(PL_curcop->cop_warnings, x)  ||		\
	        isWARN_on(PL_curcop->cop_warnings, y) ) ) 		\
	    ||	(isLEXWARN_off && PL_dowarn & G_WARN_ON) )

#define ckWARN_d(x)							\
	  (isLEXWARN_off || PL_curcop->cop_warnings == pWARN_ALL ||	\
	     (PL_curcop->cop_warnings != pWARN_NONE &&			\
	      isWARN_on(PL_curcop->cop_warnings, x) ) )

#define ckWARN2_d(x,y)							\
	  (isLEXWARN_off || PL_curcop->cop_warnings == pWARN_ALL ||	\
	     (PL_curcop->cop_warnings != pWARN_NONE &&			\
	        (isWARN_on(PL_curcop->cop_warnings, x)  ||		\
	         isWARN_on(PL_curcop->cop_warnings, y) ) ) )

/* end of file warnings.h */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\win32.h ===
/* WIN32.H
 *
 * (c) 1995 Microsoft Corporation. All rights reserved. 
 * 		Developed by hip communications inc., http://info.hip.com/info/
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 */
#ifndef  _INC_WIN32_PERL5
#define  _INC_WIN32_PERL5

#include "BuildInfo.h"

#ifndef _WIN32_WINNT
#  define _WIN32_WINNT 0x0400     /* needed for TryEnterCriticalSection() etc. */
#endif

#if defined(PERL_OBJECT) || defined(PERL_IMPLICIT_SYS) || defined(PERL_CAPI)
#  define DYNAMIC_ENV_FETCH
#  define ENV_HV_NAME "___ENV_HV_NAME___"
#  define HAS_GETENV_LEN
#  define prime_env_iter()
#  define WIN32IO_IS_STDIO		/* don't pull in custom stdio layer */
#  define WIN32SCK_IS_STDSCK		/* don't pull in custom wsock layer */
#  ifdef PERL_GLOBAL_STRUCT
#    error PERL_GLOBAL_STRUCT cannot be defined with PERL_IMPLICIT_SYS
#  endif
#  define win32_get_privlib PerlEnv_lib_path
#  define win32_get_sitelib PerlEnv_sitelib_path
#  define win32_get_vendorlib PerlEnv_vendorlib_path
#endif

#ifdef __GNUC__
#  ifndef __int64		/* some versions seem to #define it already */
#    define __int64 long long
#  endif
#  define Win32_Winsock
#endif

/* Define DllExport akin to perl's EXT, 
 * If we are in the DLL or mimicing the DLL for Win95 work round
 * then Export the symbol, 
 * otherwise import it.
 */

/* now even GCC supports __declspec() */

#if defined(PERL_OBJECT)
#define DllExport
#else
#if defined(PERLDLL) || defined(WIN95FIX)
#define DllExport
/*#define DllExport __declspec(dllexport)*/	/* noises with VC5+sp3 */
#else 
#define DllExport __declspec(dllimport)
#endif
#endif

#define  WIN32_LEAN_AND_MEAN
#include <windows.h>

#ifdef   WIN32_LEAN_AND_MEAN		/* C file is NOT a Perl5 original. */
#define  CONTEXT	PERL_CONTEXT	/* Avoid conflict of CONTEXT defs. */
#endif /*WIN32_LEAN_AND_MEAN */

#ifndef TLS_OUT_OF_INDEXES
#define TLS_OUT_OF_INDEXES (DWORD)0xFFFFFFFF
#endif

#include <dirent.h>
#include <io.h>
#include <process.h>
#include <stdio.h>
#include <direct.h>
#include <stdlib.h>
#include <fcntl.h>
#ifndef EXT
#include "EXTERN.h"
#endif

struct tms {
	long	tms_utime;
	long	tms_stime;
	long	tms_cutime;
	long	tms_cstime;
};

#ifndef SYS_NMLN
#define SYS_NMLN	257
#endif

struct utsname {
    char sysname[SYS_NMLN];
    char nodename[SYS_NMLN];
    char release[SYS_NMLN];
    char version[SYS_NMLN];
    char machine[SYS_NMLN];
};

#ifndef START_EXTERN_C
#undef EXTERN_C
#ifdef __cplusplus
#  define START_EXTERN_C extern "C" {
#  define END_EXTERN_C }
#  define EXTERN_C extern "C"
#else
#  define START_EXTERN_C 
#  define END_EXTERN_C 
#  define EXTERN_C
#endif
#endif

#define  STANDARD_C	1
#define  DOSISH		1		/* no escaping our roots */
#define  OP_BINARY	O_BINARY	/* mistake in in pp_sys.c? */

/* Define USE_SOCKETS_AS_HANDLES to enable emulation of windows sockets as
 * real filehandles. XXX Should always be defined (the other version is untested) */
#define USE_SOCKETS_AS_HANDLES

/* read() and write() aren't transparent for socket handles */
#define PERL_SOCK_SYSREAD_IS_RECV
#define PERL_SOCK_SYSWRITE_IS_SEND

#define PERL_NO_FORCE_LINK		/* no need for PL_force_link_funcs */

/* Define USE_FIXED_OSFHANDLE to fix MSVCRT's _open_osfhandle() on W95.
   It now uses some black magic to work seamlessly with the DLL CRT and
   works with MSVC++ 4.0+ or GCC/Mingw32
	-- BKS 1-24-2000 */
#if (defined(_M_IX86) && _MSC_VER >= 1000) || defined(__MINGW32__)
#define USE_FIXED_OSFHANDLE
#endif

/* Define PERL_WIN32_SOCK_DLOAD to have Perl dynamically load the winsock
   DLL when needed. Don't use if your compiler supports delayloading (ie, VC++ 6.0)
	-- BKS 5-29-2000 */
#if !(defined(_M_IX86) && _MSC_VER >= 1200)
#define PERL_WIN32_SOCK_DLOAD
#endif
#define ENV_IS_CASELESS

#ifndef VER_PLATFORM_WIN32_WINDOWS	/* VC-2.0 headers don't have this */
#define VER_PLATFORM_WIN32_WINDOWS	1
#endif

#ifndef FILE_SHARE_DELETE		/* VC-4.0 headers don't have this */
#define FILE_SHARE_DELETE		0x00000004
#endif

/* access() mode bits */
#ifndef R_OK
#  define	R_OK	4
#  define	W_OK	2
#  define	X_OK	1
#  define	F_OK	0
#endif

/* for waitpid() */
#ifndef WNOHANG
#  define WNOHANG	1
#endif

#define PERL_GET_CONTEXT_DEFINED

/* Compiler-specific stuff. */

#ifdef __BORLANDC__		/* Borland C++ */

#if (__BORLANDC__ <= 0x520)
#define _access access
#define _chdir chdir
#endif

#define _getpid getpid
#define wcsicmp _wcsicmp
#include <sys/types.h>

#ifndef DllMain
#define DllMain DllEntryPoint
#endif

#pragma warn -ccc	/* "condition is always true/false" */
#pragma warn -rch	/* "unreachable code" */
#pragma warn -sig	/* "conversion may lose significant digits" */
#pragma warn -pia	/* "possibly incorrect assignment" */
#pragma warn -par	/* "parameter 'foo' is never used" */
#pragma warn -aus	/* "'foo' is assigned a value that is never used" */
#pragma warn -use	/* "'foo' is declared but never used" */
#pragma warn -csu	/* "comparing signed and unsigned values" */

/* Borland is picky about a bare member function name used as its ptr */
#ifdef PERL_OBJECT
#  define MEMBER_TO_FPTR(name)	&(name)
#endif

/* Borland C thinks that a pointer to a member variable is 12 bytes in size. */
#define PERL_MEMBER_PTR_SIZE	12

#define isnan		_isnan

#endif

#ifdef _MSC_VER			/* Microsoft Visual C++ */

typedef long		uid_t;
typedef long		gid_t;
typedef unsigned short	mode_t;

#pragma  warning(disable: 4102)	/* "unreferenced label" */

/* Visual C thinks that a pointer to a member variable is 16 bytes in size. */
#define PERL_MEMBER_PTR_SIZE	16

#define isnan		_isnan

#endif /* _MSC_VER */

#ifdef __MINGW32__		/* Minimal Gnu-Win32 */

typedef long		uid_t;
typedef long		gid_t;
#ifndef _environ
#define _environ	environ
#endif
#define flushall	_flushall
#define fcloseall	_fcloseall
#define isnan		_isnan	/* ...same libraries as MSVC */

#ifdef PERL_OBJECT
#  define MEMBER_TO_FPTR(name)	&(name)
#endif

#ifndef _O_NOINHERIT
#  define _O_NOINHERIT	0x0080
#  ifndef _NO_OLDNAMES
#    define O_NOINHERIT	_O_NOINHERIT
#  endif
#endif

#endif /* __MINGW32__ */

/* both GCC/Mingw32 and MSVC++ 4.0 are missing this, so we put it here */
#ifndef CP_UTF8
#  define CP_UTF8	65001
#endif

/* compatibility stuff for other compilers goes here */


#if !defined(PERL_OBJECT) && defined(PERL_CAPI) && defined(PERL_MEMBER_PTR_SIZE)
#  define STRUCT_MGVTBL_DEFINITION \
struct mgvtbl {								\
    union {								\
	int	    (CPERLscope(*svt_get))(pTHX_ SV *sv, MAGIC* mg);	\
	char	    handle_VC_problem1[PERL_MEMBER_PTR_SIZE];		\
    };									\
    union {								\
	int	    (CPERLscope(*svt_set))(pTHX_ SV *sv, MAGIC* mg);	\
	char	    handle_VC_problem2[PERL_MEMBER_PTR_SIZE];		\
    };									\
    union {								\
	U32	    (CPERLscope(*svt_len))(pTHX_ SV *sv, MAGIC* mg);	\
	char	    handle_VC_problem3[PERL_MEMBER_PTR_SIZE];		\
    };									\
    union {								\
	int	    (CPERLscope(*svt_clear))(pTHX_ SV *sv, MAGIC* mg);	\
	char	    handle_VC_problem4[PERL_MEMBER_PTR_SIZE];		\
    };									\
    union {								\
	int	    (CPERLscope(*svt_free))(pTHX_ SV *sv, MAGIC* mg);	\
	char	    handle_VC_problem5[PERL_MEMBER_PTR_SIZE];		\
    };									\
}

#  define BASEOP_DEFINITION \
    OP*		op_next;						\
    OP*		op_sibling;						\
    OP*		(CPERLscope(*op_ppaddr))(pTHX);				\
    char	handle_VC_problem[PERL_MEMBER_PTR_SIZE-sizeof(OP*)];	\
    PADOFFSET	op_targ;						\
    OPCODE	op_type;						\
    U16		op_seq;							\
    U8		op_flags;						\
    U8		op_private;

#endif /* !PERL_OBJECT && PERL_CAPI && PERL_MEMBER_PTR_SIZE */


START_EXTERN_C

/* For UNIX compatibility. */

extern  uid_t	getuid(void);
extern  gid_t	getgid(void);
extern  uid_t	geteuid(void);
extern  gid_t	getegid(void);
extern  int	setuid(uid_t uid);
extern  int	setgid(gid_t gid);
extern  int	kill(int pid, int sig);
extern  void	*sbrk(int need);
extern	char *	getlogin(void);
extern	int	chown(const char *p, uid_t o, gid_t g);

#undef	 Stat
#define  Stat		win32_stat

#undef   init_os_extras
#define  init_os_extras Perl_init_os_extras

DllExport void		Perl_win32_init(int *argcp, char ***argvp);
DllExport void		Perl_init_os_extras(void);
DllExport void		win32_str_os_error(void *sv, DWORD err);
DllExport int		RunPerl(int argc, char **argv, char **env);

typedef struct {
    HANDLE	childStdIn;
    HANDLE	childStdOut;
    HANDLE	childStdErr;
    /*
     * the following correspond to the fields of the same name
     * in the STARTUPINFO structure. Embedders can use these to
     * control the spawning process' look.
     * Example - to hide the window of the spawned process:
     *    dwFlags = STARTF_USESHOWWINDOW;
     *	  wShowWindow = SW_HIDE;
     */
    DWORD	dwFlags;
    DWORD	dwX; 
    DWORD	dwY; 
    DWORD	dwXSize; 
    DWORD	dwYSize; 
    DWORD	dwXCountChars; 
    DWORD	dwYCountChars; 
    DWORD	dwFillAttribute;
    WORD	wShowWindow; 
} child_IO_table;

DllExport void		win32_get_child_IO(child_IO_table* ptr);

#ifndef USE_SOCKETS_AS_HANDLES
extern FILE *		my_fdopen(int, char *);
#endif
extern int		my_fclose(FILE *);
extern int		my_fstat(int fd, struct stat *sbufptr);
extern char *		win32_get_privlib(const char *pl);
extern char *		win32_get_sitelib(const char *pl);
extern char *		win32_get_vendorlib(const char *pl);
extern int		IsWin95(void);
extern int		IsWinNT(void);
extern void		win32_argv2utf8(int argc, char** argv);

#ifdef PERL_IMPLICIT_SYS
extern void		win32_delete_internal_host(void *h);
#endif

extern char *		staticlinkmodules[];

END_EXTERN_C

typedef  char *		caddr_t;	/* In malloc.c (core address). */

/*
 * handle socket stuff, assuming socket is always available
 */
#include <sys/socket.h>
#include <netdb.h>

#ifdef MYMALLOC
#define EMBEDMYMALLOC	/**/
/* #define USE_PERL_SBRK	/**/
/* #define PERL_SBRK_VIA_MALLOC	/**/
#endif

#if defined(PERLDLL) && !defined(PERL_CORE)
#define PERL_CORE
#endif

#ifdef PERL_TEXTMODE_SCRIPTS
#  define PERL_SCRIPT_MODE		"r"
#else
#  define PERL_SCRIPT_MODE		"rb"
#endif

/* 
 * Now Win32 specific per-thread data stuff 
 */

struct thread_intern {
    /* XXX can probably use one buffer instead of several */
    char		Wstrerror_buffer[512];
    struct servent	Wservent;
    char		Wgetlogin_buffer[128];
#    ifdef USE_SOCKETS_AS_HANDLES
    int			Winit_socktype;
#    endif
#    ifdef HAVE_DES_FCRYPT
    char		Wcrypt_buffer[30];
#    endif
#    ifdef USE_RTL_THREAD_API
    void *		retv;	/* slot for thread return value */
#    endif
};

#ifdef USE_THREADS
#  ifndef USE_DECLSPEC_THREAD
#    define HAVE_THREAD_INTERN
#  endif /* !USE_DECLSPEC_THREAD */
#endif /* USE_THREADS */

#define HAVE_INTERP_INTERN
typedef struct {
    long	num;
    DWORD	pids[MAXIMUM_WAIT_OBJECTS];
    HANDLE	handles[MAXIMUM_WAIT_OBJECTS];
} child_tab;

struct interp_intern {
    char *	perlshell_tokens;
    char **	perlshell_vec;
    long	perlshell_items;
    struct av *	fdpid;
    child_tab *	children;
#if defined(USE_ITHREADS) || defined(PERL_OBJECT)
    DWORD	pseudo_id;
    child_tab *	pseudo_children;
#endif
    void *	internal_host;
#ifndef USE_THREADS
    struct thread_intern	thr_intern;
#endif
};


#define w32_perlshell_tokens	(PL_sys_intern.perlshell_tokens)
#define w32_perlshell_vec	(PL_sys_intern.perlshell_vec)
#define w32_perlshell_items	(PL_sys_intern.perlshell_items)
#define w32_fdpid		(PL_sys_intern.fdpid)
#define w32_children		(PL_sys_intern.children)
#define w32_num_children	(w32_children->num)
#define w32_child_pids		(w32_children->pids)
#define w32_child_handles	(w32_children->handles)
#define w32_pseudo_id		(PL_sys_intern.pseudo_id)
#define w32_pseudo_children	(PL_sys_intern.pseudo_children)
#define w32_num_pseudo_children		(w32_pseudo_children->num)
#define w32_pseudo_child_pids		(w32_pseudo_children->pids)
#define w32_pseudo_child_handles	(w32_pseudo_children->handles)
#define w32_internal_host		(PL_sys_intern.internal_host)
#ifdef USE_THREADS
#  define w32_strerror_buffer	(thr->i.Wstrerror_buffer)
#  define w32_getlogin_buffer	(thr->i.Wgetlogin_buffer)
#  define w32_crypt_buffer	(thr->i.Wcrypt_buffer)
#  define w32_servent		(thr->i.Wservent)
#  define w32_init_socktype	(thr->i.Winit_socktype)
#else
#  define w32_strerror_buffer	(PL_sys_intern.thr_intern.Wstrerror_buffer)
#  define w32_getlogin_buffer	(PL_sys_intern.thr_intern.Wgetlogin_buffer)
#  define w32_crypt_buffer	(PL_sys_intern.thr_intern.Wcrypt_buffer)
#  define w32_servent		(PL_sys_intern.thr_intern.Wservent)
#  define w32_init_socktype	(PL_sys_intern.thr_intern.Winit_socktype)
#endif /* USE_THREADS */

/* UNICODE<>ANSI translation helpers */
/* Use CP_ACP when mode is ANSI */
/* Use CP_UTF8 when mode is UTF8 */

#define A2WHELPER_LEN(lpa, alen, lpw, nBytes)\
    (lpw[0] = 0, MultiByteToWideChar((IN_BYTE) ? CP_ACP : CP_UTF8, 0, \
				    lpa, alen, lpw, (nBytes/sizeof(WCHAR))))
#define A2WHELPER(lpa, lpw, nBytes)	A2WHELPER_LEN(lpa, -1, lpw, nBytes)

#define W2AHELPER_LEN(lpw, wlen, lpa, nChars)\
    (lpa[0] = '\0', WideCharToMultiByte((IN_BYTE) ? CP_ACP : CP_UTF8, 0, \
				       lpw, wlen, (LPSTR)lpa, nChars,NULL,NULL))
#define W2AHELPER(lpw, lpa, nChars)	W2AHELPER_LEN(lpw, -1, lpa, nChars)

#define USING_WIDE() (PL_widesyscalls && PerlEnv_os_id() == VER_PLATFORM_WIN32_NT)

#ifdef USE_ITHREADS
#  define PERL_WAIT_FOR_CHILDREN \
    STMT_START {							\
	if (w32_pseudo_children && w32_num_pseudo_children) {		\
	    long children = w32_num_pseudo_children;			\
	    WaitForMultipleObjects(children,				\
				   w32_pseudo_child_handles,		\
				   TRUE, INFINITE);			\
	    while (children)						\
		CloseHandle(w32_pseudo_child_handles[--children]);	\
	}								\
    } STMT_END
#endif

#if defined(USE_FIXED_OSFHANDLE) || defined(PERL_MSVCRT_READFIX)
#ifdef PERL_CORE

/* C doesn't like repeat struct definitions */
#ifndef _CRTIMP
#define _CRTIMP __declspec(dllimport)
#endif

/*
 * Control structure for lowio file handles
 */
typedef struct {
    long osfhnd;    /* underlying OS file HANDLE */
    char osfile;    /* attributes of file (e.g., open in text mode?) */
    char pipech;    /* one char buffer for handles opened on pipes */
    int lockinitflag;
    CRITICAL_SECTION lock;
} ioinfo;


/*
 * Array of arrays of control structures for lowio files.
 */
EXTERN_C _CRTIMP ioinfo* __pioinfo[];

/*
 * Definition of IOINFO_L2E, the log base 2 of the number of elements in each
 * array of ioinfo structs.
 */
#define IOINFO_L2E	    5

/*
 * Definition of IOINFO_ARRAY_ELTS, the number of elements in ioinfo array
 */
#define IOINFO_ARRAY_ELTS   (1 << IOINFO_L2E)

/*
 * Access macros for getting at an ioinfo struct and its fields from a
 * file handle
 */
#define _pioinfo(i) (__pioinfo[(i) >> IOINFO_L2E] + ((i) & (IOINFO_ARRAY_ELTS - 1)))
#define _osfhnd(i)  (_pioinfo(i)->osfhnd)
#define _osfile(i)  (_pioinfo(i)->osfile)
#define _pipech(i)  (_pioinfo(i)->pipech)

/* since we are not doing a dup2(), this works fine */
#define _set_osfhnd(fh, osfh) (void)(_osfhnd(fh) = (long)osfh)
#endif
#endif

/*
 * This provides a layer of functions and macros to ensure extensions will
 * get to use the same RTL functions as the core.
 */
#include "win32iop.h"

#define EXEC_ARGV_CAST(x) ((const char *const *) x)

#endif /* _INC_WIN32_PERL5 */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\vmem.h ===
/* vmem.h
 *
 * (c) 1999 Microsoft Corporation. All rights reserved. 
 * Portions (c) 1999 ActiveState Tool Corp, http://www.ActiveState.com/
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * Knuth's boundary tag algorithm Vol #1, Page 440.
 *
 * Each block in the heap has tag words before and after it,
 *  TAG
 *  block
 *  TAG
 * The size is stored in these tags as a long word, and includes the 8 bytes
 * of overhead that the boundary tags consume.  Blocks are allocated on long
 * word boundaries, so the size is always multiples of long words.  When the
 * block is allocated, bit 0, (the tag bit), of the size is set to 1.  When 
 * a block is freed, it is merged with adjacent free blocks, and the tag bit
 * is set to 0.
 *
 * A linked list is used to manage the free list. The first two long words of
 * the block contain double links.  These links are only valid when the block
 * is freed, therefore space needs to be reserved for them.  Thus, the minimum
 * block size (not counting the tags) is 8 bytes.
 *
 * Since memory allocation may occur on a single threaded, explict locks are
 * provided.
 * 
 */

#ifndef ___VMEM_H_INC___
#define ___VMEM_H_INC___

const long lAllocStart = 0x00010000; /* start at 64K */
const long minBlockSize = sizeof(void*)*2;
const long sizeofTag = sizeof(long);
const long blockOverhead = sizeofTag*2;
const long minAllocSize = minBlockSize+blockOverhead;

typedef BYTE* PBLOCK;	/* pointer to a memory block */

/*
 * Macros for accessing hidden fields in a memory block:
 *
 * SIZE	    size of this block (tag bit 0 is 1 if block is allocated)
 * PSIZE    size of previous physical block
 */

#define SIZE(block)	(*(ULONG*)(((PBLOCK)(block))-sizeofTag))
#define PSIZE(block)	(*(ULONG*)(((PBLOCK)(block))-(sizeofTag*2)))
inline void SetTags(PBLOCK block, long size)
{
    SIZE(block) = size;
    PSIZE(block+(size&~1)) = size;
}

/*
 * Free list pointers
 * PREV	pointer to previous block
 * NEXT	pointer to next block
 */

#define PREV(block)	(*(PBLOCK*)(block))
#define NEXT(block)	(*(PBLOCK*)((block)+sizeof(PBLOCK)))
inline void SetLink(PBLOCK block, PBLOCK prev, PBLOCK next)
{
    PREV(block) = prev;
    NEXT(block) = next;
}
inline void Unlink(PBLOCK p)
{
    PBLOCK next = NEXT(p);
    PBLOCK prev = PREV(p);
    NEXT(prev) = next;
    PREV(next) = prev;
}
inline void AddToFreeList(PBLOCK block, PBLOCK pInList)
{
    PBLOCK next = NEXT(pInList);
    NEXT(pInList) = block;
    SetLink(block, pInList, next);
    PREV(next) = block;
}


/* Macro for rounding up to the next sizeof(long) */
#define ROUND_UP(n)	(((ULONG)(n)+sizeof(long)-1)&~(sizeof(long)-1))
#define ROUND_UP64K(n)	(((ULONG)(n)+0x10000-1)&~(0x10000-1))
#define ROUND_DOWN(n)	((ULONG)(n)&~(sizeof(long)-1))

/*
 * HeapRec - a list of all non-contiguous heap areas
 *
 * Each record in this array contains information about a non-contiguous heap area.
 */

const int maxHeaps = 32; /* 64 was overkill */
const long lAllocMax   = 0x80000000; /* max size of allocation */

#define USE_BIGBLOCK_ALLOC
/*
 * performance tuning
 * Use VirtualAlloc() for blocks bigger than nMaxHeapAllocSize since
 * Windows 95/98/Me have heap managers that are designed for memory 
 * blocks smaller than four megabytes.
 */

#ifdef USE_BIGBLOCK_ALLOC
const int nMaxHeapAllocSize = (1024*512);  /* don't allocate anything larger than this from the heap */
#endif

typedef struct _HeapRec
{
    PBLOCK	base;	/* base of heap area */
    ULONG	len;	/* size of heap area */
#ifdef USE_BIGBLOCK_ALLOC
    BOOL	bBigBlock;  /* was allocate using VirtualAlloc */
#endif
} HeapRec;


class VMem
{
public:
    VMem();
    ~VMem();
    virtual void* Malloc(size_t size);
    virtual void* Realloc(void* pMem, size_t size);
    virtual void Free(void* pMem);
    virtual void GetLock(void);
    virtual void FreeLock(void);
    virtual int IsLocked(void);
    virtual long Release(void);
    virtual long AddRef(void);

    inline BOOL CreateOk(void)
    {
	return m_hHeap != NULL;
    };

    void ReInit(void);

protected:
    void Init(void);
    int Getmem(size_t size);
#ifdef USE_BIGBLOCK_ALLOC
    int HeapAdd(void* ptr, size_t size, BOOL bBigBlock);
#else
    int HeapAdd(void* ptr, size_t size);
#endif
    void* Expand(void* block, size_t size);
    void WalkHeap(void);

    HANDLE		m_hHeap;		    // memory heap for this script
    char		m_FreeDummy[minAllocSize];  // dummy free block
    PBLOCK		m_pFreeList;		    // pointer to first block on free list
    PBLOCK		m_pRover;		    // roving pointer into the free list
    HeapRec		m_heaps[maxHeaps];	    // list of all non-contiguous heap areas 
    int			m_nHeaps;		    // no. of heaps in m_heaps 
    long		m_lAllocSize;		    // current alloc size
    long		m_lRefCount;		    // number of current users
    CRITICAL_SECTION	m_cs;			    // access lock
#ifdef _DEBUG_MEM
    FILE*		m_pLog;
#endif
};

// #define _DEBUG_MEM
#ifdef _DEBUG_MEM
#define ASSERT(f) if(!(f)) DebugBreak();

inline void MEMODS(char *str)
{
    OutputDebugString(str);
    OutputDebugString("\n");
}

inline void MEMODSlx(char *str, long x)
{
    char szBuffer[512];	
    sprintf(szBuffer, "%s %lx\n", str, x);
    OutputDebugString(szBuffer);
}

#define WALKHEAP() WalkHeap()
#define WALKHEAPTRACE() m_pRover = NULL; WalkHeap()

#else

#define ASSERT(f)
#define MEMODS(x)
#define MEMODSlx(x, y)
#define WALKHEAP()
#define WALKHEAPTRACE()

#endif


VMem::VMem()
{
    m_lRefCount = 1;
    BOOL bRet = (NULL != (m_hHeap = HeapCreate(HEAP_NO_SERIALIZE,
				lAllocStart,	/* initial size of heap */
				0)));		/* no upper limit on size of heap */
    ASSERT(bRet);

    InitializeCriticalSection(&m_cs);
#ifdef _DEBUG_MEM
    m_pLog = 0;
#endif

    Init();
}

VMem::~VMem(void)
{
    ASSERT(HeapValidate(m_hHeap, HEAP_NO_SERIALIZE, NULL));
    WALKHEAPTRACE();
#ifdef _DEBUG_MEM
    MemoryUsageMessage(NULL, 0, 0, 0);
#endif
    DeleteCriticalSection(&m_cs);
#ifdef USE_BIGBLOCK_ALLOC
    for(int index = 0; index < m_nHeaps; ++index) {
	if (m_heaps[index].bBigBlock) {
	    VirtualFree(m_heaps[index].base, 0, MEM_RELEASE);
	}
    }
#endif
    BOOL bRet = HeapDestroy(m_hHeap);
    ASSERT(bRet);
}

void VMem::ReInit(void)
{
    for(int index = 0; index < m_nHeaps; ++index) {
#ifdef USE_BIGBLOCK_ALLOC
	if (m_heaps[index].bBigBlock) {
	    VirtualFree(m_heaps[index].base, 0, MEM_RELEASE);
	}
	else
#endif
	    HeapFree(m_hHeap, HEAP_NO_SERIALIZE, m_heaps[index].base);
    }

    Init();
}

void VMem::Init(void)
{   /*
     * Initialize the free list by placing a dummy zero-length block on it.
     * Set the number of non-contiguous heaps to zero.
     */
    m_pFreeList = m_pRover = (PBLOCK)(&m_FreeDummy[minBlockSize]);
    PSIZE(m_pFreeList) = SIZE(m_pFreeList) = 0;
    PREV(m_pFreeList) = NEXT(m_pFreeList) = m_pFreeList;

    m_nHeaps = 0;
    m_lAllocSize = lAllocStart;
}

void* VMem::Malloc(size_t size)
{
    WALKHEAP();

    /*
     * Adjust the real size of the block to be a multiple of sizeof(long), and add
     * the overhead for the boundary tags.  Disallow negative or zero sizes.
     */
    size_t realsize = (size < blockOverhead) ? minAllocSize : (size_t)ROUND_UP(size) + minBlockSize;
    if((int)realsize < minAllocSize || size == 0)
	return NULL;

    /*
     * Start searching the free list at the rover.  If we arrive back at rover without
     * finding anything, allocate some memory from the heap and try again.
     */
    PBLOCK ptr = m_pRover;	/* start searching at rover */
    int loops = 2;		/* allow two times through the loop  */
    for(;;) {
	size_t lsize = SIZE(ptr);
	ASSERT((lsize&1)==0);
	/* is block big enough? */
	if(lsize >= realsize) {	
	    /* if the remainder is too small, don't bother splitting the block. */
	    size_t rem = lsize - realsize;
	    if(rem < minAllocSize) {
		if(m_pRover == ptr)
		    m_pRover = NEXT(ptr);

		/* Unlink the block from the free list. */
		Unlink(ptr);
	    }
	    else {
		/*
		 * split the block
		 * The remainder is big enough to split off into a new block.
		 * Use the end of the block, resize the beginning of the block
		 * no need to change the free list.
		 */
		SetTags(ptr, rem);
		ptr += SIZE(ptr);
		lsize = realsize;
	    }
	    /* Set the boundary tags to mark it as allocated. */
	    SetTags(ptr, lsize | 1);
	    return ((void *)ptr);
	}

	/*
	 * This block was unsuitable.  If we've gone through this list once already without
	 * finding anything, allocate some new memory from the heap and try again.
	 */
	ptr = NEXT(ptr);
	if(ptr == m_pRover) {
	    if(!(loops-- && Getmem(realsize))) {
		return NULL;
	    }
	    ptr = m_pRover;
	}
    }
}

void* VMem::Realloc(void* block, size_t size)
{
    WALKHEAP();

    /* if size is zero, free the block. */
    if(size == 0) {
	Free(block);
	return (NULL);
    }

    /* if block pointer is NULL, do a Malloc(). */
    if(block == NULL)
	return Malloc(size);

    /*
     * Grow or shrink the block in place.
     * if the block grows then the next block will be used if free
     */
    if(Expand(block, size) != NULL)
	return block;

    /*
     * adjust the real size of the block to be a multiple of sizeof(long), and add the
     * overhead for the boundary tags.  Disallow negative or zero sizes.
     */
    size_t realsize = (size < blockOverhead) ? minAllocSize : (size_t)ROUND_UP(size) + minBlockSize;
    if((int)realsize < minAllocSize)
	return NULL;

    /*
     * see if the previous block is free, and is it big enough to cover the new size
     * if merged with the current block.
     */
    PBLOCK ptr = (PBLOCK)block;
    size_t cursize = SIZE(ptr) & ~1;
    size_t psize = PSIZE(ptr);
    if((psize&1) == 0 && (psize + cursize) >= realsize) {
	PBLOCK prev = ptr - psize;
	if(m_pRover == prev)
	    m_pRover = NEXT(prev);

	/* Unlink the next block from the free list. */
	Unlink(prev);

	/* Copy contents of old block to new location, make it the current block. */
	memmove(prev, ptr, cursize);
	cursize += psize;	/* combine sizes */
	ptr = prev;

	size_t rem = cursize - realsize;
	if(rem >= minAllocSize) {
	    /*
	     * The remainder is big enough to be a new block.  Set boundary
	     * tags for the resized block and the new block.
	     */
	    prev = ptr + realsize;
	    /*
	     * add the new block to the free list.
	     * next block cannot be free
	     */
	    SetTags(prev, rem);
	    AddToFreeList(prev, m_pFreeList);
	    cursize = realsize;
        }
	/* Set the boundary tags to mark it as allocated. */
	SetTags(ptr, cursize | 1);
        return ((void *)ptr);
    }

    /* Allocate a new block, copy the old to the new, and free the old. */
    if((ptr = (PBLOCK)Malloc(size)) != NULL) {
	memmove(ptr, block, cursize-minBlockSize);
	Free(block);
    }
    return ((void *)ptr);
}

void VMem::Free(void* p)
{
    WALKHEAP();

    /* Ignore null pointer. */
    if(p == NULL)
	return;

    PBLOCK ptr = (PBLOCK)p;

    /* Check for attempt to free a block that's already free. */
    size_t size = SIZE(ptr);
    if((size&1) == 0) {
	MEMODSlx("Attempt to free previously freed block", (long)p);
	return;
    }
    size &= ~1;	/* remove allocated tag */

    /* if previous block is free, add this block to it. */
    int linked = FALSE;
    size_t psize = PSIZE(ptr);
    if((psize&1) == 0) {
	ptr -= psize;	/* point to previous block */
	size += psize;	/* merge the sizes of the two blocks */
	linked = TRUE;	/* it's already on the free list */
    }

    /* if the next physical block is free, merge it with this block. */
    PBLOCK next = ptr + size;	/* point to next physical block */
    size_t nsize = SIZE(next);
    if((nsize&1) == 0) {
	/* block is free move rover if needed */
	if(m_pRover == next)
	    m_pRover = NEXT(next);

	/* unlink the next block from the free list. */
	Unlink(next);

	/* merge the sizes of this block and the next block. */
	size += nsize;
    }

    /* Set the boundary tags for the block; */
    SetTags(ptr, size);

    /* Link the block to the head of the free list. */
    if(!linked) {
	AddToFreeList(ptr, m_pFreeList);
    }
}

void VMem::GetLock(void)
{
    EnterCriticalSection(&m_cs);
}

void VMem::FreeLock(void)
{
    LeaveCriticalSection(&m_cs);
}

int VMem::IsLocked(void)
{
#if 0
    /* XXX TryEnterCriticalSection() is not available in some versions
     * of Windows 95.  Since this code is not used anywhere yet, we 
     * skirt the issue for now. */
    BOOL bAccessed = TryEnterCriticalSection(&m_cs);
    if(bAccessed) {
	LeaveCriticalSection(&m_cs);
    }
    return !bAccessed;
#else
    ASSERT(0);	/* alarm bells for when somebody calls this */
    return 0;
#endif
}


long VMem::Release(void)
{
    long lCount = InterlockedDecrement(&m_lRefCount);
    if(!lCount)
	delete this;
    return lCount;
}

long VMem::AddRef(void)
{
    long lCount = InterlockedIncrement(&m_lRefCount);
    return lCount;
}


int VMem::Getmem(size_t requestSize)
{   /* returns -1 is successful 0 if not */
#ifdef USE_BIGBLOCK_ALLOC
    BOOL bBigBlock;
#endif
    void *ptr;

    /* Round up size to next multiple of 64K. */
    size_t size = (size_t)ROUND_UP64K(requestSize);
    
    /*
     * if the size requested is smaller than our current allocation size
     * adjust up
     */
    if(size < (unsigned long)m_lAllocSize)
	size = m_lAllocSize;

    /* Update the size to allocate on the next request */
    if(m_lAllocSize != lAllocMax)
	m_lAllocSize <<= 1;

    if(m_nHeaps != 0
#ifdef USE_BIGBLOCK_ALLOC
	&& !m_heaps[m_nHeaps-1].bBigBlock
#endif
		    ) {
	/* Expand the last allocated heap */
	ptr = HeapReAlloc(m_hHeap, HEAP_REALLOC_IN_PLACE_ONLY|HEAP_NO_SERIALIZE,
		m_heaps[m_nHeaps-1].base,
		m_heaps[m_nHeaps-1].len + size);
	if(ptr != 0) {
	    HeapAdd(((char*)ptr) + m_heaps[m_nHeaps-1].len, size
#ifdef USE_BIGBLOCK_ALLOC
		, FALSE
#endif
		);
	    return -1;
	}
    }

    /*
     * if we didn't expand a block to cover the requested size
     * allocate a new Heap
     * the size of this block must include the additional dummy tags at either end
     * the above ROUND_UP64K may not have added any memory to include this.
     */
    if(size == requestSize)
	size = (size_t)ROUND_UP64K(requestSize+(sizeofTag*2));

#ifdef USE_BIGBLOCK_ALLOC
    bBigBlock = FALSE;
    if (size >= nMaxHeapAllocSize) {
	bBigBlock = TRUE;
	ptr = VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_READWRITE);
    }
    else
#endif
    ptr = HeapAlloc(m_hHeap, HEAP_NO_SERIALIZE, size);

    if(ptr == 0) {
	MEMODSlx("HeapAlloc failed on size!!!", size);
	return 0;
    }

#ifdef USE_BIGBLOCK_ALLOC
    if (HeapAdd(ptr, size, bBigBlock)) {
	if (bBigBlock) {
	    VirtualFree(ptr, 0, MEM_RELEASE);
	}
    }
#else
    HeapAdd(ptr, size);
#endif
    return -1;
}

#ifdef USE_BIGBLOCK_ALLOC
int VMem::HeapAdd(void* p, size_t size, BOOL bBigBlock)
#else
int VMem::HeapAdd(void* p, size_t size)
#endif
{   /* if the block can be succesfully added to the heap, returns 0; otherwise -1. */
    int index;

    /* Check size, then round size down to next long word boundary. */
    if(size < minAllocSize)
	return -1;

    size = (size_t)ROUND_DOWN(size);
    PBLOCK ptr = (PBLOCK)p;

#ifdef USE_BIGBLOCK_ALLOC
    if (!bBigBlock) {
#endif
	/*
	 * Search for another heap area that's contiguous with the bottom of this new area.
	 * (It should be extremely unusual to find one that's contiguous with the top).
	 */
	for(index = 0; index < m_nHeaps; ++index) {
	    if(ptr == m_heaps[index].base + (int)m_heaps[index].len) {
		/*
		 * The new block is contiguous with a previously allocated heap area.  Add its
		 * length to that of the previous heap.  Merge it with the the dummy end-of-heap
		 * area marker of the previous heap.
		 */
		m_heaps[index].len += size;
		break;
	    }
	}
#ifdef USE_BIGBLOCK_ALLOC
    }
    else {
	index = m_nHeaps;
    }
#endif

    if(index == m_nHeaps) {
	/* The new block is not contiguous, or is BigBlock.  Add it to the heap list. */
	if(m_nHeaps == maxHeaps) {
	    return -1;	/* too many non-contiguous heaps */
	}
	m_heaps[m_nHeaps].base = ptr;
	m_heaps[m_nHeaps].len = size;
#ifdef USE_BIGBLOCK_ALLOC
	m_heaps[m_nHeaps].bBigBlock = bBigBlock;
#endif
	m_nHeaps++;

	/*
	 * Reserve the first LONG in the block for the ending boundary tag of a dummy
	 * block at the start of the heap area.
	 */
	size -= minBlockSize;
	ptr += minBlockSize;
	PSIZE(ptr) = 1;	/* mark the dummy previous block as allocated */
    }

    /*
     * Convert the heap to one large block.  Set up its boundary tags, and those of
     * marker block after it.  The marker block before the heap will already have
     * been set up if this heap is not contiguous with the end of another heap.
     */
    SetTags(ptr, size | 1);
    PBLOCK next = ptr + size;	/* point to dummy end block */
    SIZE(next) = 1;	/* mark the dummy end block as allocated */

    /*
     * Link the block to the start of the free list by calling free().
     * This will merge the block with any adjacent free blocks.
     */
    Free(ptr);
    return 0;
}


void* VMem::Expand(void* block, size_t size)
{
    /*
     * Adjust the size of the block to be a multiple of sizeof(long), and add the
     * overhead for the boundary tags.  Disallow negative or zero sizes.
     */
    size_t realsize = (size < blockOverhead) ? minAllocSize : (size_t)ROUND_UP(size) + minBlockSize;
    if((int)realsize < minAllocSize || size == 0)
	return NULL;

    PBLOCK ptr = (PBLOCK)block; 

    /* if the current size is the same as requested, do nothing. */
    size_t cursize = SIZE(ptr) & ~1;
    if(cursize == realsize) {
	return block;
    }

    /* if the block is being shrunk, convert the remainder of the block into a new free block. */
    if(realsize <= cursize) {
	size_t nextsize = cursize - realsize;	/* size of new remainder block */
	if(nextsize >= minAllocSize) {
	    /*
	     * Split the block
	     * Set boundary tags for the resized block and the new block.
	     */
	    SetTags(ptr, realsize | 1);
	    ptr += realsize;

	    /*
	     * add the new block to the free list.
	     * call Free to merge this block with next block if free
	     */
	    SetTags(ptr, nextsize | 1);
	    Free(ptr);
	}

	return block;
    }

    PBLOCK next = ptr + cursize;
    size_t nextsize = SIZE(next);

    /* Check the next block for consistency.*/
    if((nextsize&1) == 0 && (nextsize + cursize) >= realsize) {
	/*
	 * The next block is free and big enough.  Add the part that's needed
	 * to our block, and split the remainder off into a new block.
	 */
	if(m_pRover == next)
	    m_pRover = NEXT(next);

	/* Unlink the next block from the free list. */
	Unlink(next);
	cursize += nextsize;	/* combine sizes */

	size_t rem = cursize - realsize;	/* size of remainder */
	if(rem >= minAllocSize) {
	    /*
	     * The remainder is big enough to be a new block.
	     * Set boundary tags for the resized block and the new block.
	     */
	    next = ptr + realsize;
	    /*
	     * add the new block to the free list.
	     * next block cannot be free
	     */
	    SetTags(next, rem);
	    AddToFreeList(next, m_pFreeList);
	    cursize = realsize;
        }
	/* Set the boundary tags to mark it as allocated. */
	SetTags(ptr, cursize | 1);
	return ((void *)ptr);
    }
    return NULL;
}

#ifdef _DEBUG_MEM
#define LOG_FILENAME ".\\MemLog.txt"

void MemoryUsageMessage(char *str, long x, long y, int c)
{
    char szBuffer[512];
    if(str) {
	if(!m_pLog)
	    m_pLog = fopen(LOG_FILENAME, "w");
	sprintf(szBuffer, str, x, y, c);
	fputs(szBuffer, m_pLog);
    }
    else {
	fflush(m_pLog);
	fclose(m_pLog);
	m_pLog = 0;
    }
}

void VMem::WalkHeap(void)
{
    if(!m_pRover) {
	MemoryUsageMessage("VMem heaps used %d\n", m_nHeaps, 0, 0);
    }

    /* Walk all the heaps - verify structures */
    for(int index = 0; index < m_nHeaps; ++index) {
	PBLOCK ptr = m_heaps[index].base;
	size_t size = m_heaps[index].len;
	ASSERT(HeapValidate(m_hHeap, HEAP_NO_SERIALIZE, p));

	/* set over reserved header block */
	size -= minBlockSize;
	ptr += minBlockSize;
	PBLOCK pLast = ptr + size;
	ASSERT(PSIZE(ptr) == 1); /* dummy previous block is allocated */
	ASSERT(SIZE(pLast) == 1); /* dummy next block is allocated */
	while(ptr < pLast) {
	    ASSERT(ptr > m_heaps[index].base);
	    size_t cursize = SIZE(ptr) & ~1;
	    ASSERT((PSIZE(ptr+cursize) & ~1) == cursize);
	    if(!m_pRover) {
		MemoryUsageMessage("Memory Block %08x: Size %08x %c\n", (long)ptr, cursize, (SIZE(p)&1) ? 'x' : ' ');
	    }
	    if(!(SIZE(ptr)&1)) {
		/* this block is on the free list */
		PBLOCK tmp = NEXT(ptr);
		while(tmp != ptr) {
		    ASSERT((SIZE(tmp)&1)==0);
		    if(tmp == m_pFreeList)
			break;
		    ASSERT(NEXT(tmp));
		    tmp = NEXT(tmp);
		}
		if(tmp == ptr) {
		    MemoryUsageMessage("Memory Block %08x: Size %08x free but not in free list\n", (long)ptr, cursize, 0);
		}
	    }
	    ptr += cursize;
	}
    }
    if(!m_pRover) {
	MemoryUsageMessage(NULL, 0, 0, 0);
    }
}
#endif

#endif	/* ___VMEM_H_INC___ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\arpa\inet.h ===
/* 
 * this is a dummy header file for Socket.xs 
 */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\win32thread.h ===
#ifndef _WIN32THREAD_H
#define _WIN32THREAD_H

#include "win32.h"

typedef struct win32_cond { LONG waiters; HANDLE sem; } perl_cond;
typedef DWORD perl_key;
typedef HANDLE perl_os_thread;

#ifndef DONT_USE_CRITICAL_SECTION

/* Critical Sections used instead of mutexes: lightweight,
 * but can't be communicated to child processes, and can't get
 * HANDLE to it for use elsewhere.
 */
typedef CRITICAL_SECTION perl_mutex;
#define MUTEX_INIT(m) InitializeCriticalSection(m)
#define MUTEX_LOCK(m) EnterCriticalSection(m)
#define MUTEX_UNLOCK(m) LeaveCriticalSection(m)
#define MUTEX_DESTROY(m) DeleteCriticalSection(m)

#else

typedef HANDLE perl_mutex;
#  define MUTEX_INIT(m) \
    STMT_START {						\
	if ((*(m) = CreateMutex(NULL,FALSE,NULL)) == NULL)	\
	    Perl_croak_nocontext("panic: MUTEX_INIT");		\
    } STMT_END

#  define MUTEX_LOCK(m) \
    STMT_START {						\
	if (WaitForSingleObject(*(m),INFINITE) == WAIT_FAILED)	\
	    Perl_croak_nocontext("panic: MUTEX_LOCK");		\
    } STMT_END

#  define MUTEX_UNLOCK(m) \
    STMT_START {						\
	if (ReleaseMutex(*(m)) == 0)				\
	    Perl_croak_nocontext("panic: MUTEX_UNLOCK");	\
    } STMT_END

#  define MUTEX_DESTROY(m) \
    STMT_START {						\
	if (CloseHandle(*(m)) == 0)				\
	    Perl_croak_nocontext("panic: MUTEX_DESTROY");	\
    } STMT_END

#endif

/* These macros assume that the mutex associated with the condition
 * will always be held before COND_{SIGNAL,BROADCAST,WAIT,DESTROY},
 * so there's no separate mutex protecting access to (c)->waiters
 */
#define COND_INIT(c) \
    STMT_START {						\
	(c)->waiters = 0;					\
	(c)->sem = CreateSemaphore(NULL,0,LONG_MAX,NULL);	\
	if ((c)->sem == NULL)					\
	    Perl_croak_nocontext("panic: COND_INIT (%ld)",GetLastError());	\
    } STMT_END

#define COND_SIGNAL(c) \
    STMT_START {						\
	if ((c)->waiters > 0 &&					\
	    ReleaseSemaphore((c)->sem,1,NULL) == 0)		\
	    Perl_croak_nocontext("panic: COND_SIGNAL (%ld)",GetLastError());	\
    } STMT_END

#define COND_BROADCAST(c) \
    STMT_START {						\
	if ((c)->waiters > 0 &&					\
	    ReleaseSemaphore((c)->sem,(c)->waiters,NULL) == 0)	\
	    Perl_croak_nocontext("panic: COND_BROADCAST (%ld)",GetLastError());\
    } STMT_END

#define COND_WAIT(c, m) \
    STMT_START {						\
	(c)->waiters++;						\
	MUTEX_UNLOCK(m);					\
	/* Note that there's no race here, since a		\
	 * COND_BROADCAST() on another thread will have seen the\
	 * right number of waiters (i.e. including this one) */	\
	if (WaitForSingleObject((c)->sem,INFINITE)==WAIT_FAILED)\
	    Perl_croak_nocontext("panic: COND_WAIT (%ld)",GetLastError());	\
	/* XXX there may be an inconsequential race here */	\
	MUTEX_LOCK(m);						\
	(c)->waiters--;						\
    } STMT_END

#define COND_DESTROY(c) \
    STMT_START {						\
	(c)->waiters = 0;					\
	if (CloseHandle((c)->sem) == 0)				\
	    Perl_croak_nocontext("panic: COND_DESTROY (%ld)",GetLastError());	\
    } STMT_END

#define DETACH(t) \
    STMT_START {						\
	if (CloseHandle((t)->self) == 0) {			\
	    MUTEX_UNLOCK(&(t)->mutex);				\
	    Perl_croak_nocontext("panic: DETACH");		\
	}							\
    } STMT_END


#define THREAD_CREATE(t, f)	Perl_thread_create(t, f)
#define THREAD_POST_CREATE(t)	NOOP

/* XXX Docs mention that the RTL versions of thread creation routines
 * should be used, but that advice only seems applicable when the RTL
 * is not in a DLL.  RTL DLLs in both Borland and VC seem to do all of
 * the init/deinit required upon DLL_THREAD_ATTACH/DETACH.  So we seem
 * to be completely safe using straight Win32 API calls, rather than
 * the much braindamaged RTL calls.
 *
 * _beginthread() in the RTLs call CloseHandle() just after the thread
 * function returns, which means: 1) we have a race on our hands
 * 2) it is impossible to implement join() semantics.
 *
 * IOW, do *NOT* turn on USE_RTL_THREAD_API!  It is here
 * for experimental purposes only. GSAR 98-01-02
 */
#ifdef USE_RTL_THREAD_API
#  include <process.h>
#  if defined(__BORLANDC__)
     /* Borland RTL doesn't allow a return value from thread function! */
#    define THREAD_RET_TYPE	void _USERENTRY
#    define THREAD_RET_CAST(p)	((void)(thr->i.retv = (void *)(p)))
#  elif defined (_MSC_VER)
#    define THREAD_RET_TYPE	unsigned __stdcall
#    define THREAD_RET_CAST(p)	((unsigned)(p))
#  else
     /* CRTDLL.DLL doesn't allow a return value from thread function! */
#    define THREAD_RET_TYPE	void __cdecl
#    define THREAD_RET_CAST(p)	((void)(thr->i.retv = (void *)(p)))
#  endif
#else	/* !USE_RTL_THREAD_API */
#  define THREAD_RET_TYPE	DWORD WINAPI
#  define THREAD_RET_CAST(p)	((DWORD)(p))
#endif	/* !USE_RTL_THREAD_API */

typedef THREAD_RET_TYPE thread_func_t(void *);


START_EXTERN_C

#if defined(PERLDLL) && defined(USE_DECLSPEC_THREAD) && (!defined(__BORLANDC__) || defined(_DLL))
extern __declspec(thread) void *PL_current_context;
#define PERL_SET_CONTEXT(t)   		(PL_current_context = t)
#define PERL_GET_CONTEXT		PL_current_context
#else
#define PERL_GET_CONTEXT		Perl_get_context()
#define PERL_SET_CONTEXT(t)		Perl_set_context(t)
#endif

#if defined(USE_THREADS)
struct perl_thread;
int Perl_thread_create (struct perl_thread *thr, thread_func_t *fn);
void Perl_set_thread_self (struct perl_thread *thr);
void Perl_init_thread_intern (struct perl_thread *t);

#define SET_THREAD_SELF(thr) Perl_set_thread_self(thr)

#endif /* USE_THREADS */

END_EXTERN_C

#define INIT_THREADS		NOOP
#define ALLOC_THREAD_KEY \
    STMT_START {							\
	if ((PL_thr_key = TlsAlloc()) == TLS_OUT_OF_INDEXES) {		\
	    fprintf(stderr,"panic: TlsAlloc");				\
	    exit(1);							\
	}								\
    } STMT_END

#define FREE_THREAD_KEY \
    STMT_START {							\
	TlsFree(PL_thr_key);						\
    } STMT_END

#define PTHREAD_ATFORK(prepare,parent,child)	NOOP

#if defined(USE_RTL_THREAD_API) && !defined(_MSC_VER)
#define JOIN(t, avp)							\
    STMT_START {							\
	if ((WaitForSingleObject((t)->self,INFINITE) == WAIT_FAILED)	\
	     || (GetExitCodeThread((t)->self,(LPDWORD)(avp)) == 0)	\
	     || (CloseHandle((t)->self) == 0))				\
	    Perl_croak_nocontext("panic: JOIN");			\
	*avp = (AV *)((t)->i.retv);					\
    } STMT_END
#else	/* !USE_RTL_THREAD_API || _MSC_VER */
#define JOIN(t, avp)							\
    STMT_START {							\
	if ((WaitForSingleObject((t)->self,INFINITE) == WAIT_FAILED)	\
	     || (GetExitCodeThread((t)->self,(LPDWORD)(avp)) == 0)	\
	     || (CloseHandle((t)->self) == 0))				\
	    Perl_croak_nocontext("panic: JOIN");			\
    } STMT_END
#endif	/* !USE_RTL_THREAD_API || _MSC_VER */

#define YIELD			Sleep(0)

#endif /* _WIN32THREAD_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\win32iop.h ===
#ifndef WIN32IOP_H
#define WIN32IOP_H

#ifndef START_EXTERN_C
#ifdef __cplusplus
#  define START_EXTERN_C extern "C" {
#  define END_EXTERN_C }
#  define EXTERN_C extern "C"
#else
#  define START_EXTERN_C 
#  define END_EXTERN_C 
#  define EXTERN_C
#endif
#endif

#if defined(_MSC_VER) || defined(__MINGW32__)
#  include <sys/utime.h>
#else
#  include <utime.h>
#endif

/*
 * defines for flock emulation
 */
#define LOCK_SH 1
#define LOCK_EX 2
#define LOCK_NB 4
#define LOCK_UN 8

/*
 * Make this as close to original stdio as possible.
 */

/*
 * function prototypes for our own win32io layer
 */
START_EXTERN_C

DllExport  int * 	win32_errno(void);
DllExport  char *** 	win32_environ(void);
DllExport  FILE*	win32_stdin(void);
DllExport  FILE*	win32_stdout(void);
DllExport  FILE*	win32_stderr(void);
DllExport  int		win32_ferror(FILE *fp);
DllExport  int		win32_feof(FILE *fp);
DllExport  char*	win32_strerror(int e);

DllExport  int		win32_fprintf(FILE *pf, const char *format, ...);
DllExport  int		win32_printf(const char *format, ...);
DllExport  int		win32_vfprintf(FILE *pf, const char *format, va_list arg);
DllExport  int		win32_vprintf(const char *format, va_list arg);
DllExport  size_t	win32_fread(void *buf, size_t size, size_t count, FILE *pf);
DllExport  size_t	win32_fwrite(const void *buf, size_t size, size_t count, FILE *pf);
DllExport  FILE*	win32_fopen(const char *path, const char *mode);
DllExport  FILE*	win32_fdopen(int fh, const char *mode);
DllExport  FILE*	win32_freopen(const char *path, const char *mode, FILE *pf);
DllExport  int		win32_fclose(FILE *pf);
DllExport  int		win32_fputs(const char *s,FILE *pf);
DllExport  int		win32_fputc(int c,FILE *pf);
DllExport  int		win32_ungetc(int c,FILE *pf);
DllExport  int		win32_getc(FILE *pf);
DllExport  int		win32_fileno(FILE *pf);
DllExport  void		win32_clearerr(FILE *pf);
DllExport  int		win32_fflush(FILE *pf);
DllExport  long		win32_ftell(FILE *pf);
DllExport  int		win32_fseek(FILE *pf,long offset,int origin);
DllExport  int		win32_fgetpos(FILE *pf,fpos_t *p);
DllExport  int		win32_fsetpos(FILE *pf,const fpos_t *p);
DllExport  void		win32_rewind(FILE *pf);
DllExport  FILE*	win32_tmpfile(void);
DllExport  void		win32_abort(void);
DllExport  int  	win32_fstat(int fd,struct stat *sbufptr);
DllExport  int  	win32_stat(const char *name,struct stat *sbufptr);
DllExport  int		win32_pipe( int *phandles, unsigned int psize, int textmode );
DllExport  FILE*	win32_popen( const char *command, const char *mode );
DllExport  int		win32_pclose( FILE *pf);
DllExport  int		win32_rename( const char *oname, const char *newname);
DllExport  int		win32_setmode( int fd, int mode);
DllExport  long		win32_lseek( int fd, long offset, int origin);
DllExport  long		win32_tell( int fd);
DllExport  int		win32_dup( int fd);
DllExport  int		win32_dup2(int h1, int h2);
DllExport  int		win32_open(const char *path, int oflag,...);
DllExport  int		win32_close(int fd);
DllExport  int		win32_eof(int fd);
DllExport  int		win32_read(int fd, void *buf, unsigned int cnt);
DllExport  int		win32_write(int fd, const void *buf, unsigned int cnt);
DllExport  int		win32_spawnvp(int mode, const char *cmdname,
			      const char *const *argv);
DllExport  int		win32_mkdir(const char *dir, int mode);
DllExport  int		win32_rmdir(const char *dir);
DllExport  int		win32_chdir(const char *dir);
DllExport  int		win32_flock(int fd, int oper);
DllExport  int		win32_execv(const char *cmdname, const char *const *argv);
DllExport  int		win32_execvp(const char *cmdname, const char *const *argv);
DllExport  void		win32_perror(const char *str);
DllExport  void		win32_setbuf(FILE *pf, char *buf);
DllExport  int		win32_setvbuf(FILE *pf, char *buf, int type, size_t size);
DllExport  int		win32_flushall(void);
DllExport  int		win32_fcloseall(void);
DllExport  char*	win32_fgets(char *s, int n, FILE *pf);
DllExport  char*	win32_gets(char *s);
DllExport  int		win32_fgetc(FILE *pf);
DllExport  int		win32_putc(int c, FILE *pf);
DllExport  int		win32_puts(const char *s);
DllExport  int		win32_getchar(void);
DllExport  int		win32_putchar(int c);
DllExport  void*	win32_malloc(size_t size);
DllExport  void*	win32_calloc(size_t numitems, size_t size);
DllExport  void*	win32_realloc(void *block, size_t size);
DllExport  void		win32_free(void *block);

DllExport  int		win32_open_osfhandle(long handle, int flags);
DllExport  long		win32_get_osfhandle(int fd);

DllExport  DIR*		win32_opendir(char *filename);
DllExport  struct direct*	win32_readdir(DIR *dirp);
DllExport  long		win32_telldir(DIR *dirp);
DllExport  void		win32_seekdir(DIR *dirp, long loc);
DllExport  void		win32_rewinddir(DIR *dirp);
DllExport  int		win32_closedir(DIR *dirp);

DllExport  char*	win32_getenv(const char *name);
DllExport  int		win32_putenv(const char *name);

DllExport  unsigned 	win32_sleep(unsigned int);
DllExport  int		win32_times(struct tms *timebuf);
DllExport  unsigned 	win32_alarm(unsigned int sec);
DllExport  int		win32_stat(const char *path, struct stat *buf);
DllExport  char*	win32_longpath(char *path);
DllExport  int		win32_ioctl(int i, unsigned int u, char *data);
DllExport  int          win32_link(const char *oldname, const char *newname);
DllExport  int		win32_unlink(const char *f);
DllExport  int		win32_utime(const char *f, struct utimbuf *t);
DllExport  int		win32_uname(struct utsname *n);
DllExport  int		win32_wait(int *status);
DllExport  int		win32_waitpid(int pid, int *status, int flags);
DllExport  int		win32_kill(int pid, int sig);
DllExport  unsigned long	win32_os_id(void);
DllExport  void*	win32_dynaload(const char*filename);
DllExport  int		win32_access(const char *path, int mode);
DllExport  int		win32_chmod(const char *path, int mode);
DllExport  int		win32_getpid(void);

DllExport char *	win32_crypt(const char *txt, const char *salt);

DllExport void *	win32_get_childenv(void);
DllExport void		win32_free_childenv(void* d);
DllExport void		win32_clearenv(void);
DllExport char *	win32_get_childdir(void);
DllExport void		win32_free_childdir(char* d);

END_EXTERN_C

/*
 * the following six(6) is #define in stdio.h
 */
#ifndef WIN32IO_IS_STDIO
#undef errno
#undef environ
#undef stderr
#undef stdin
#undef stdout
#undef ferror
#undef feof
#undef fclose
#undef pipe
#undef pause
#undef sleep
#undef times
#undef alarm
#undef ioctl
#undef unlink
#undef utime
#undef uname
#undef wait

#ifdef __BORLANDC__
#undef ungetc
#undef getc
#undef putc
#undef getchar
#undef putchar
#undef fileno
#endif

#define stderr				win32_stderr()
#define stdout				win32_stdout()
#define	stdin				win32_stdin()
#define feof(f)				win32_feof(f)
#define ferror(f)			win32_ferror(f)
#define errno 				(*win32_errno())
#define environ				(*win32_environ())
#define strerror			win32_strerror

/*
 * redirect to our own version
 */
#undef fprintf
#define	fprintf			win32_fprintf
#define	vfprintf		win32_vfprintf
#define	printf			win32_printf
#define	vprintf			win32_vprintf
#define fread(buf,size,count,f)	win32_fread(buf,size,count,f)
#define fwrite(buf,size,count,f)	win32_fwrite(buf,size,count,f)
#define fopen			win32_fopen
#undef fdopen
#define fdopen			win32_fdopen
#define freopen			win32_freopen
#define	fclose(f)		win32_fclose(f)
#define fputs(s,f)		win32_fputs(s,f)
#define fputc(c,f)		win32_fputc(c,f)
#define ungetc(c,f)		win32_ungetc(c,f)
#undef getc
#define getc(f)			win32_getc(f)
#define fileno(f)		win32_fileno(f)
#define clearerr(f)		win32_clearerr(f)
#define fflush(f)		win32_fflush(f)
#define ftell(f)		win32_ftell(f)
#define fseek(f,o,w)		win32_fseek(f,o,w)
#define fgetpos(f,p)		win32_fgetpos(f,p)
#define fsetpos(f,p)		win32_fsetpos(f,p)
#define rewind(f)		win32_rewind(f)
#define tmpfile()		win32_tmpfile()
#define abort()			win32_abort()
#define fstat(fd,bufptr)   	win32_fstat(fd,bufptr)
#define stat(pth,bufptr)   	win32_stat(pth,bufptr)
#define longpath(pth)   	win32_longpath(pth)
#define rename(old,new)		win32_rename(old,new)
#define setmode(fd,mode)	win32_setmode(fd,mode)
#define lseek(fd,offset,orig)	win32_lseek(fd,offset,orig)
#define tell(fd)		win32_tell(fd)
#define dup(fd)			win32_dup(fd)
#define dup2(fd1,fd2)		win32_dup2(fd1,fd2)
#define open			win32_open
#define close(fd)		win32_close(fd)
#define eof(fd)			win32_eof(fd)
#define read(fd,b,s)		win32_read(fd,b,s)
#define write(fd,b,s)		win32_write(fd,b,s)
#define _open_osfhandle		win32_open_osfhandle
#define _get_osfhandle		win32_get_osfhandle
#define spawnvp			win32_spawnvp
#define mkdir			win32_mkdir
#define rmdir			win32_rmdir
#define chdir			win32_chdir
#define flock(fd,o)		win32_flock(fd,o)
#define execv			win32_execv
#define execvp			win32_execvp
#define perror			win32_perror
#define setbuf			win32_setbuf
#define setvbuf			win32_setvbuf
#undef flushall
#define flushall		win32_flushall
#undef fcloseall
#define fcloseall		win32_fcloseall
#define fgets			win32_fgets
#define gets			win32_gets
#define fgetc			win32_fgetc
#undef putc
#define putc			win32_putc
#define puts			win32_puts
#undef getchar
#define getchar			win32_getchar
#undef putchar
#define putchar			win32_putchar
#define access(p,m)		win32_access(p,m)
#define chmod(p,m)		win32_chmod(p,m)


#if !defined(MYMALLOC) || !defined(PERL_CORE)
#undef malloc
#undef calloc
#undef realloc
#undef free
#define malloc			win32_malloc
#define calloc			win32_calloc
#define realloc			win32_realloc
#define free			win32_free
#endif

#define pipe(fd)		win32_pipe((fd), 512, O_BINARY)
#define pause()			win32_sleep((32767L << 16) + 32767)
#define sleep			win32_sleep
#define times			win32_times
#define alarm			win32_alarm
#define ioctl			win32_ioctl
#define link			win32_link
#define unlink			win32_unlink
#define utime			win32_utime
#define uname			win32_uname
#define wait			win32_wait
#define waitpid			win32_waitpid
#define kill			win32_kill

#define opendir			win32_opendir
#define readdir			win32_readdir
#define telldir			win32_telldir
#define seekdir			win32_seekdir
#define rewinddir		win32_rewinddir
#define closedir		win32_closedir
#define os_id			win32_os_id
#define getpid			win32_getpid

#undef crypt
#define crypt(t,s)		win32_crypt(t,s)

#undef get_childenv
#undef free_childenv
#undef clearenv
#undef get_childdir
#undef free_childdir
#define get_childenv()		win32_get_childenv()
#define free_childenv(d)	win32_free_childenv(d)
#define clearenv()		win32_clearenv()
#define get_childdir()		win32_get_childdir()
#define free_childdir(d)	win32_free_childdir(d)

#undef getenv
#define getenv win32_getenv
#undef putenv
#define putenv win32_putenv

#endif /* WIN32IO_IS_STDIO */
#endif /* WIN32IOP_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\xsub.h ===
#ifndef _INC_PERL_XSUB_H
#define _INC_PERL_XSUB_H 1

/* first, some documentation for xsubpp-generated items */

/*
=for apidoc Amn|char*|CLASS
Variable which is setup by C<xsubpp> to indicate the 
class name for a C++ XS constructor.  This is always a C<char*>.  See C<THIS>.

=for apidoc Amn|(whatever)|RETVAL
Variable which is setup by C<xsubpp> to hold the return value for an 
XSUB. This is always the proper type for the XSUB. See 
L<perlxs/"The RETVAL Variable">.

=for apidoc Amn|(whatever)|THIS
Variable which is setup by C<xsubpp> to designate the object in a C++ 
XSUB.  This is always the proper type for the C++ object.  See C<CLASS> and 
L<perlxs/"Using XS With C++">.

=for apidoc Amn|I32|items
Variable which is setup by C<xsubpp> to indicate the number of 
items on the stack.  See L<perlxs/"Variable-length Parameter Lists">.

=for apidoc Amn|I32|ix
Variable which is setup by C<xsubpp> to indicate which of an 
XSUB's aliases was used to invoke it.  See L<perlxs/"The ALIAS: Keyword">.

=for apidoc Am|SV*|ST|int ix
Used to access elements on the XSUB's stack.

=for apidoc AmU||XS
Macro to declare an XSUB and its C parameter list.  This is handled by
C<xsubpp>.

=for apidoc Ams||dXSARGS
Sets up stack and mark pointers for an XSUB, calling dSP and dMARK.  This
is usually handled automatically by C<xsubpp>.  Declares the C<items>
variable to indicate the number of items on the stack.

=for apidoc Ams||dXSI32
Sets up the C<ix> variable for an XSUB which has aliases.  This is usually
handled automatically by C<xsubpp>.

=cut
*/

#define ST(off) PL_stack_base[ax + (off)]

#if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#  define XS(name) __declspec(dllexport) void name(pTHXo_ CV* cv)
#else
#  define XS(name) void name(pTHXo_ CV* cv)
#endif

#define dXSARGS				\
	dSP; dMARK;			\
	I32 ax = mark - PL_stack_base + 1;	\
	I32 items = sp - mark

#define dXSTARG SV * targ = ((PL_op->op_private & OPpENTERSUB_HASTARG) \
			     ? PAD_SV(PL_op->op_targ) : sv_newmortal())

/* Should be used before final PUSHi etc. if not in PPCODE section. */
#define XSprePUSH (sp = PL_stack_base + ax - 1)

#define XSANY CvXSUBANY(cv)

#define dXSI32 I32 ix = XSANY.any_i32

#ifdef __cplusplus
#  define XSINTERFACE_CVT(ret,name) ret (*name)(...)
#else
#  define XSINTERFACE_CVT(ret,name) ret (*name)()
#endif
#define dXSFUNCTION(ret)		XSINTERFACE_CVT(ret,XSFUNCTION)
#define XSINTERFACE_FUNC(ret,cv,f)	((XSINTERFACE_CVT(ret,cv))(f))
#define XSINTERFACE_FUNC_SET(cv,f)	\
		CvXSUBANY(cv).any_dptr = (void (*) (pTHXo_ void*))(f)

/* Simple macros to put new mortal values onto the stack.   */
/* Typically used to return values from XS functions.       */

/*
=for apidoc Am|void|XST_mIV|int pos|IV iv
Place an integer into the specified position C<pos> on the stack.  The
value is stored in a new mortal SV.

=for apidoc Am|void|XST_mNV|int pos|NV nv
Place a double into the specified position C<pos> on the stack.  The value
is stored in a new mortal SV.

=for apidoc Am|void|XST_mPV|int pos|char* str
Place a copy of a string into the specified position C<pos> on the stack. 
The value is stored in a new mortal SV.

=for apidoc Am|void|XST_mNO|int pos
Place C<&PL_sv_no> into the specified position C<pos> on the
stack.

=for apidoc Am|void|XST_mYES|int pos
Place C<&PL_sv_yes> into the specified position C<pos> on the
stack.

=for apidoc Am|void|XST_mUNDEF|int pos
Place C<&PL_sv_undef> into the specified position C<pos> on the
stack.

=for apidoc Am|void|XSRETURN|int nitems
Return from XSUB, indicating number of items on the stack.  This is usually
handled by C<xsubpp>.

=for apidoc Am|void|XSRETURN_IV|IV iv
Return an integer from an XSUB immediately.  Uses C<XST_mIV>.

=for apidoc Am|void|XSRETURN_NV|NV nv
Return an double from an XSUB immediately.  Uses C<XST_mNV>.

=for apidoc Am|void|XSRETURN_PV|char* str
Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.

=for apidoc Ams||XSRETURN_NO
Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.

=for apidoc Ams||XSRETURN_YES
Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.

=for apidoc Ams||XSRETURN_UNDEF
Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.

=for apidoc Ams||XSRETURN_EMPTY
Return an empty list from an XSUB immediately.

=for apidoc AmU||newXSproto
Used by C<xsubpp> to hook up XSUBs as Perl subs.  Adds Perl prototypes to
the subs.

=for apidoc AmU||XS_VERSION
The version identifier for an XS module.  This is usually
handled automatically by C<ExtUtils::MakeMaker>.  See C<XS_VERSION_BOOTCHECK>.

=for apidoc Ams||XS_VERSION_BOOTCHECK
Macro to verify that a PM module's $VERSION variable matches the XS
module's C<XS_VERSION> variable.  This is usually handled automatically by
C<xsubpp>.  See L<perlxs/"The VERSIONCHECK: Keyword">.

=cut
*/

#define XST_mIV(i,v)  (ST(i) = sv_2mortal(newSViv(v))  )
#define XST_mNV(i,v)  (ST(i) = sv_2mortal(newSVnv(v))  )
#define XST_mPV(i,v)  (ST(i) = sv_2mortal(newSVpv(v,0)))
#define XST_mPVN(i,v,n)  (ST(i) = sv_2mortal(newSVpvn(v,n)))
#define XST_mNO(i)    (ST(i) = &PL_sv_no   )
#define XST_mYES(i)   (ST(i) = &PL_sv_yes  )
#define XST_mUNDEF(i) (ST(i) = &PL_sv_undef)

#define XSRETURN(off)					\
    STMT_START {					\
	PL_stack_sp = PL_stack_base + ax + ((off) - 1);	\
	return;						\
    } STMT_END

#define XSRETURN_IV(v) STMT_START { XST_mIV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_NV(v) STMT_START { XST_mNV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_PV(v) STMT_START { XST_mPV(0,v);  XSRETURN(1); } STMT_END
#define XSRETURN_PVN(v,n) STMT_START { XST_mPVN(0,v,n);  XSRETURN(1); } STMT_END
#define XSRETURN_NO    STMT_START { XST_mNO(0);    XSRETURN(1); } STMT_END
#define XSRETURN_YES   STMT_START { XST_mYES(0);   XSRETURN(1); } STMT_END
#define XSRETURN_UNDEF STMT_START { XST_mUNDEF(0); XSRETURN(1); } STMT_END
#define XSRETURN_EMPTY STMT_START {                XSRETURN(0); } STMT_END

#define newXSproto(a,b,c,d)	sv_setpv((SV*)newXS(a,b,c), d)

#ifdef XS_VERSION
#  define XS_VERSION_BOOTCHECK \
    STMT_START {							\
	SV *tmpsv; STRLEN n_a;						\
	char *vn = Nullch, *module = SvPV(ST(0),n_a);			\
	if (items >= 2)	 /* version supplied as bootstrap arg */	\
	    tmpsv = ST(1);						\
	else {								\
	    /* XXX GV_ADDWARN */					\
	    tmpsv = get_sv(Perl_form(aTHX_ "%s::%s", module,		\
				vn = "XS_VERSION"), FALSE);		\
	    if (!tmpsv || !SvOK(tmpsv))					\
		tmpsv = get_sv(Perl_form(aTHX_ "%s::%s", module,	\
				    vn = "VERSION"), FALSE);		\
	}								\
	if (tmpsv && (!SvOK(tmpsv) || strNE(XS_VERSION, SvPV(tmpsv, n_a))))	\
	    Perl_croak(aTHX_ "%s object version %s does not match %s%s%s%s %"SVf,\
		  module, XS_VERSION,					\
		  vn ? "$" : "", vn ? module : "", vn ? "::" : "",	\
		  vn ? vn : "bootstrap parameter", tmpsv);		\
    } STMT_END
#else
#  define XS_VERSION_BOOTCHECK
#endif

#if 1		/* for compatibility */
#  define VTBL_sv		&PL_vtbl_sv
#  define VTBL_env		&PL_vtbl_env
#  define VTBL_envelem		&PL_vtbl_envelem
#  define VTBL_sig		&PL_vtbl_sig
#  define VTBL_sigelem		&PL_vtbl_sigelem
#  define VTBL_pack		&PL_vtbl_pack
#  define VTBL_packelem		&PL_vtbl_packelem
#  define VTBL_dbline		&PL_vtbl_dbline
#  define VTBL_isa		&PL_vtbl_isa
#  define VTBL_isaelem		&PL_vtbl_isaelem
#  define VTBL_arylen		&PL_vtbl_arylen
#  define VTBL_glob		&PL_vtbl_glob
#  define VTBL_mglob		&PL_vtbl_mglob
#  define VTBL_nkeys		&PL_vtbl_nkeys
#  define VTBL_taint		&PL_vtbl_taint
#  define VTBL_substr		&PL_vtbl_substr
#  define VTBL_vec		&PL_vtbl_vec
#  define VTBL_pos		&PL_vtbl_pos
#  define VTBL_bm		&PL_vtbl_bm
#  define VTBL_fm		&PL_vtbl_fm
#  define VTBL_uvar		&PL_vtbl_uvar
#  define VTBL_defelem		&PL_vtbl_defelem
#  define VTBL_regexp		&PL_vtbl_regexp
#  define VTBL_regdata		&PL_vtbl_regdata
#  define VTBL_regdatum		&PL_vtbl_regdatum
#  ifdef USE_LOCALE_COLLATE
#    define VTBL_collxfrm	&PL_vtbl_collxfrm
#  endif
#  define VTBL_amagic		&PL_vtbl_amagic
#  define VTBL_amagicelem	&PL_vtbl_amagicelem
#endif

#include "perlapi.h"
#include "objXSUB.h"

#if defined(PERL_IMPLICIT_CONTEXT) && !defined(PERL_NO_GET_CONTEXT) && !defined(PERL_CORE)
#  undef aTHX
#  undef aTHX_
#  define aTHX		PERL_GET_THX
#  define aTHX_		aTHX,
#endif

#if (defined(PERL_CAPI) || defined(PERL_IMPLICIT_SYS)) && !defined(PERL_CORE)
#  ifndef NO_XSLOCKS
#    undef closedir
#    undef opendir
#    undef stdin
#    undef stdout
#    undef stderr
#    undef feof
#    undef ferror
#    undef fgetpos
#    undef ioctl
#    undef getlogin
#    undef setjmp
#    undef getc
#    undef ungetc
#    undef fileno

#    define mkdir		PerlDir_mkdir
#    define chdir		PerlDir_chdir
#    define rmdir		PerlDir_rmdir
#    define closedir		PerlDir_close
#    define opendir		PerlDir_open
#    define readdir		PerlDir_read
#    define rewinddir		PerlDir_rewind
#    define seekdir		PerlDir_seek
#    define telldir		PerlDir_tell
#    define putenv		PerlEnv_putenv
#    define getenv		PerlEnv_getenv
#    define uname		PerlEnv_uname
#    define stdin		PerlIO_stdin()
#    define stdout		PerlIO_stdout()
#    define stderr		PerlIO_stderr()
#    define fopen		PerlIO_open
#    define fclose		PerlIO_close
#    define feof		PerlIO_eof
#    define ferror		PerlIO_error
#    define fclearerr		PerlIO_clearerr
#    define getc		PerlIO_getc
#    define fputc(c, f)		PerlIO_putc(f,c)
#    define fputs(s, f)		PerlIO_puts(f,s)
#    define fflush		PerlIO_flush
#    define ungetc(c, f)	PerlIO_ungetc((f),(c))
#    define fileno		PerlIO_fileno
#    define fdopen		PerlIO_fdopen
#    define freopen		PerlIO_reopen
#    define fread(b,s,c,f)	PerlIO_read((f),(b),(s*c))
#    define fwrite(b,s,c,f)	PerlIO_write((f),(b),(s*c))
#    define setbuf		PerlIO_setbuf
#    define setvbuf		PerlIO_setvbuf
#    define setlinebuf		PerlIO_setlinebuf
#    define stdoutf		PerlIO_stdoutf
#    define vfprintf		PerlIO_vprintf
#    define ftell		PerlIO_tell
#    define fseek		PerlIO_seek
#    define fgetpos		PerlIO_getpos
#    define fsetpos		PerlIO_setpos
#    define frewind		PerlIO_rewind
#    define tmpfile		PerlIO_tmpfile
#    define access		PerlLIO_access
#    define chmod		PerlLIO_chmod
#    define chsize		PerlLIO_chsize
#    define close		PerlLIO_close
#    define dup			PerlLIO_dup
#    define dup2		PerlLIO_dup2
#    define flock		PerlLIO_flock
#    define fstat		PerlLIO_fstat
#    define ioctl		PerlLIO_ioctl
#    define isatty		PerlLIO_isatty
#    define link                PerlLIO_link
#    define lseek		PerlLIO_lseek
#    define lstat		PerlLIO_lstat
#    define mktemp		PerlLIO_mktemp
#    define open		PerlLIO_open
#    define read		PerlLIO_read
#    define rename		PerlLIO_rename
#    define setmode		PerlLIO_setmode
#    define stat(buf,sb)	PerlLIO_stat(buf,sb)
#    define tmpnam		PerlLIO_tmpnam
#    define umask		PerlLIO_umask
#    define unlink		PerlLIO_unlink
#    define utime		PerlLIO_utime
#    define write		PerlLIO_write
#    define malloc		PerlMem_malloc
#    define realloc		PerlMem_realloc
#    define free		PerlMem_free
#    define abort		PerlProc_abort
#    define exit		PerlProc_exit
#    define _exit		PerlProc__exit
#    define execl		PerlProc_execl
#    define execv		PerlProc_execv
#    define execvp		PerlProc_execvp
#    define getuid		PerlProc_getuid
#    define geteuid		PerlProc_geteuid
#    define getgid		PerlProc_getgid
#    define getegid		PerlProc_getegid
#    define getlogin		PerlProc_getlogin
#    define kill		PerlProc_kill
#    define killpg		PerlProc_killpg
#    define pause		PerlProc_pause
#    define popen		PerlProc_popen
#    define pclose		PerlProc_pclose
#    define pipe		PerlProc_pipe
#    define setuid		PerlProc_setuid
#    define setgid		PerlProc_setgid
#    define sleep		PerlProc_sleep
#    define times		PerlProc_times
#    define wait		PerlProc_wait
#    define setjmp		PerlProc_setjmp
#    define longjmp		PerlProc_longjmp
#    define signal		PerlProc_signal
#    define getpid		PerlProc_getpid
#    define htonl		PerlSock_htonl
#    define htons		PerlSock_htons
#    define ntohl		PerlSock_ntohl
#    define ntohs		PerlSock_ntohs
#    define accept		PerlSock_accept
#    define bind		PerlSock_bind
#    define connect		PerlSock_connect
#    define endhostent		PerlSock_endhostent
#    define endnetent		PerlSock_endnetent
#    define endprotoent		PerlSock_endprotoent
#    define endservent		PerlSock_endservent
#    define gethostbyaddr	PerlSock_gethostbyaddr
#    define gethostbyname	PerlSock_gethostbyname
#    define gethostent		PerlSock_gethostent
#    define gethostname		PerlSock_gethostname
#    define getnetbyaddr	PerlSock_getnetbyaddr
#    define getnetbyname	PerlSock_getnetbyname
#    define getnetent		PerlSock_getnetent
#    define getpeername		PerlSock_getpeername
#    define getprotobyname	PerlSock_getprotobyname
#    define getprotobynumber	PerlSock_getprotobynumber
#    define getprotoent		PerlSock_getprotoent
#    define getservbyname	PerlSock_getservbyname
#    define getservbyport	PerlSock_getservbyport
#    define getservent		PerlSock_getservent
#    define getsockname		PerlSock_getsockname
#    define getsockopt		PerlSock_getsockopt
#    define inet_addr		PerlSock_inet_addr
#    define inet_ntoa		PerlSock_inet_ntoa
#    define listen		PerlSock_listen
#    define recv		PerlSock_recv
#    define recvfrom		PerlSock_recvfrom
#    define select		PerlSock_select
#    define send		PerlSock_send
#    define sendto		PerlSock_sendto
#    define sethostent		PerlSock_sethostent
#    define setnetent		PerlSock_setnetent
#    define setprotoent		PerlSock_setprotoent
#    define setservent		PerlSock_setservent
#    define setsockopt		PerlSock_setsockopt
#    define shutdown		PerlSock_shutdown
#    define socket		PerlSock_socket
#    define socketpair		PerlSock_socketpair
#  endif  /* NO_XSLOCKS */
#endif  /* PERL_CAPI */

#endif /* _INC_PERL_XSUB_H */		/* include guard */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\lib\core\sys\socket.h ===
// sys/socket.h

// djl
// Provide UNIX compatibility

#ifndef  _INC_SYS_SOCKET
#define  _INC_SYS_SOCKET

#ifdef __cplusplus
extern "C" {
#endif

#define WIN32_LEAN_AND_MEAN
#ifdef __GNUC__
#  define Win32_Winsock
#endif
#include <windows.h>
#include <winsock.h>

#include "win32.h"

#define  ENOTSOCK	WSAENOTSOCK

#ifdef USE_SOCKETS_AS_HANDLES

#ifndef PERL_FD_SETSIZE
#define PERL_FD_SETSIZE		64
#endif

#define PERL_BITS_PER_BYTE	8
#define	PERL_NFDBITS		(sizeof(Perl_fd_mask)*PERL_BITS_PER_BYTE)

typedef int			Perl_fd_mask;

typedef struct	Perl_fd_set {
    Perl_fd_mask bits[(PERL_FD_SETSIZE+PERL_NFDBITS-1)/PERL_NFDBITS];
}				Perl_fd_set;

#define PERL_FD_CLR(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] &= ~((unsigned)1 << ((n)%PERL_NFDBITS)))

#define PERL_FD_SET(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] |=  ((unsigned)1 << ((n)%PERL_NFDBITS)))

#define PERL_FD_ZERO(p) memset((char *)(p),0,sizeof(*(p)))

#define PERL_FD_ISSET(n,p) \
    ((p)->bits[(n)/PERL_NFDBITS] &   ((unsigned)1 << ((n)%PERL_NFDBITS)))

#else	/* USE_SOCKETS_AS_HANDLES */

#define Perl_fd_set	fd_set
#define PERL_FD_SET(n,p)	FD_SET(n,p)
#define PERL_FD_CLR(n,p)	FD_CLR(n,p)
#define PERL_FD_ISSET(n,p)	FD_ISSET(n,p)
#define PERL_FD_ZERO(p)		FD_ZERO(p)

#endif	/* USE_SOCKETS_AS_HANDLES */

SOCKET win32_accept (SOCKET s, struct sockaddr *addr, int *addrlen);
int win32_bind (SOCKET s, const struct sockaddr *addr, int namelen);
int win32_closesocket (SOCKET s);
int win32_connect (SOCKET s, const struct sockaddr *name, int namelen);
int win32_ioctlsocket (SOCKET s, long cmd, u_long *argp);
int win32_getpeername (SOCKET s, struct sockaddr *name, int * namelen);
int win32_getsockname (SOCKET s, struct sockaddr *name, int * namelen);
int win32_getsockopt (SOCKET s, int level, int optname, char * optval, int *optlen);
u_long win32_htonl (u_long hostlong);
u_short win32_htons (u_short hostshort);
unsigned long win32_inet_addr (const char * cp);
char * win32_inet_ntoa (struct in_addr in);
int win32_listen (SOCKET s, int backlog);
u_long win32_ntohl (u_long netlong);
u_short win32_ntohs (u_short netshort);
int win32_recv (SOCKET s, char * buf, int len, int flags);
int win32_recvfrom (SOCKET s, char * buf, int len, int flags,
                         struct sockaddr *from, int * fromlen);
int win32_select (int nfds, Perl_fd_set *rfds, Perl_fd_set *wfds, Perl_fd_set *xfds,
		  const struct timeval *timeout);
int win32_send (SOCKET s, const char * buf, int len, int flags);
int win32_sendto (SOCKET s, const char * buf, int len, int flags,
                       const struct sockaddr *to, int tolen);
int win32_setsockopt (SOCKET s, int level, int optname,
                           const char * optval, int optlen);
SOCKET win32_socket (int af, int type, int protocol);
int win32_shutdown (SOCKET s, int how);

/* Database function prototypes */

struct hostent * win32_gethostbyaddr(const char * addr, int len, int type);
struct hostent * win32_gethostbyname(const char * name);
int win32_gethostname (char * name, int namelen);
struct servent * win32_getservbyport(int port, const char * proto);
struct servent * win32_getservbyname(const char * name, const char * proto);
struct protoent * win32_getprotobynumber(int proto);
struct protoent * win32_getprotobyname(const char * name);
struct protoent *win32_getprotoent(void);
struct servent *win32_getservent(void);
void win32_sethostent(int stayopen);
void win32_setnetent(int stayopen);
struct netent * win32_getnetent(void);
struct netent * win32_getnetbyname(char *name);
struct netent * win32_getnetbyaddr(long net, int type);
void win32_setprotoent(int stayopen);
void win32_setservent(int stayopen);
void win32_endhostent(void);
void win32_endnetent(void);
void win32_endprotoent(void);
void win32_endservent(void);

#ifndef WIN32SCK_IS_STDSCK
//
// direct to our version
//
#define htonl		win32_htonl
#define htons		win32_htons
#define ntohl		win32_ntohl
#define ntohs		win32_ntohs
#define inet_addr	win32_inet_addr
#define inet_ntoa	win32_inet_ntoa

#define socket		win32_socket
#define bind		win32_bind
#define listen		win32_listen
#define accept		win32_accept
#define connect		win32_connect
#define send		win32_send
#define sendto		win32_sendto
#define recv		win32_recv
#define recvfrom	win32_recvfrom
#define shutdown	win32_shutdown
#define closesocket	win32_closesocket
#define ioctlsocket	win32_ioctlsocket
#define setsockopt	win32_setsockopt
#define getsockopt	win32_getsockopt
#define getpeername	win32_getpeername
#define getsockname	win32_getsockname
#define gethostname	win32_gethostname
#define gethostbyname	win32_gethostbyname
#define gethostbyaddr	win32_gethostbyaddr
#define getprotobyname	win32_getprotobyname
#define getprotobynumber win32_getprotobynumber
#define getservbyname	win32_getservbyname
#define getservbyport	win32_getservbyport
#define select		win32_select
#define endhostent	win32_endhostent
#define endnetent	win32_endnetent
#define endprotoent	win32_endprotoent
#define endservent	win32_endservent
#define getnetent	win32_getnetent
#define getnetbyname	win32_getnetbyname
#define getnetbyaddr	win32_getnetbyaddr
#define getprotoent	win32_getprotoent
#define getservent	win32_getservent
#define sethostent	win32_sethostent
#define setnetent	win32_setnetent
#define setprotoent	win32_setprotoent
#define setservent	win32_setservent

#ifdef USE_SOCKETS_AS_HANDLES
#undef fd_set
#undef FD_SET
#undef FD_CLR
#undef FD_ISSET
#undef FD_ZERO
#define fd_set		Perl_fd_set
#define FD_SET(n,p)	PERL_FD_SET(n,p)
#define FD_CLR(n,p)	PERL_FD_CLR(n,p)
#define FD_ISSET(n,p)	PERL_FD_ISSET(n,p)
#define FD_ZERO(p)	PERL_FD_ZERO(p)
#endif	/* USE_SOCKETS_AS_HANDLES */

#endif	/* WIN32SCK_IS_STDSCK */

#ifdef __cplusplus
}
#endif

#endif	// _INC_SYS_SOCKET
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\gennmtab\gennmtab.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include <string.h>
#include <stdio.h>
#include <stddef.h>

struct range {
  int start;
  int end;
};

struct range nmstrt[] = {
  { '_' },
  { ':' },
  /* BaseChar */
  { 0x0041, 0x005a },
  { 0x0061, 0x007a },
  { 0x00c0, 0x00d6 },
  { 0x00d8, 0x00f6 },
  { 0x00f8, 0x00ff },
  { 0x0100, 0x0131 },
  { 0x0134, 0x013e },
  { 0x0141, 0x0148 },
  { 0x014a, 0x017e },
  { 0x0180, 0x01c3 },
  { 0x01cd, 0x01f0 },
  { 0x01f4, 0x01f5 },
  { 0x01fa, 0x0217 },
  { 0x0250, 0x02a8 },
  { 0x02bb, 0x02c1 },
  { 0x0386 },
  { 0x0388, 0x038a },
  { 0x038c },
  { 0x038e, 0x03a1 },
  { 0x03a3, 0x03ce },
  { 0x03d0, 0x03d6 },
  { 0x03da },
  { 0x03dc },
  { 0x03de },
  { 0x03e0 },
  { 0x03e2, 0x03f3 },
  { 0x0401, 0x040c },
  { 0x040e, 0x044f },
  { 0x0451, 0x045c },
  { 0x045e, 0x0481 },
  { 0x0490, 0x04c4 },
  { 0x04c7, 0x04c8 },
  { 0x04cb, 0x04cc },
  { 0x04d0, 0x04eb },
  { 0x04ee, 0x04f5 },
  { 0x04f8, 0x04f9 },
  { 0x0531, 0x0556 },
  { 0x0559 },
  { 0x0561, 0x0586 },
  { 0x05d0, 0x05ea },
  { 0x05f0, 0x05f2 },
  { 0x0621, 0x063a },
  { 0x0641, 0x064a },
  { 0x0671, 0x06b7 },
  { 0x06ba, 0x06be },
  { 0x06c0, 0x06ce },
  { 0x06d0, 0x06d3 },
  { 0x06d5 },
  { 0x06e5, 0x06e6 },
  { 0x0905, 0x0939 },
  { 0x093d },
  { 0x0958, 0x0961 },
  { 0x0985, 0x098c },
  { 0x098f, 0x0990 },
  { 0x0993, 0x09a8 },
  { 0x09aa, 0x09b0 },
  { 0x09b2 },
  { 0x09b6, 0x09b9 },
  { 0x09dc, 0x09dd },
  { 0x09df, 0x09e1 },
  { 0x09f0, 0x09f1 },
  { 0x0a05, 0x0a0a },
  { 0x0a0f, 0x0a10 },
  { 0x0a13, 0x0a28 },
  { 0x0a2a, 0x0a30 },
  { 0x0a32, 0x0a33 },
  { 0x0a35, 0x0a36 },
  { 0x0a38, 0x0a39 },
  { 0x0a59, 0x0a5c },
  { 0x0a5e },
  { 0x0a72, 0x0a74 },
  { 0x0a85, 0x0a8b },
  { 0x0a8d },
  { 0x0a8f, 0x0a91 },
  { 0x0a93, 0x0aa8 },
  { 0x0aaa, 0x0ab0 },
  { 0x0ab2, 0x0ab3 },
  { 0x0ab5, 0x0ab9 },
  { 0x0abd },
  { 0x0ae0 },
  { 0x0b05, 0x0b0c },
  { 0x0b0f, 0x0b10 },
  { 0x0b13, 0x0b28 },
  { 0x0b2a, 0x0b30 },
  { 0x0b32, 0x0b33 },
  { 0x0b36, 0x0b39 },
  { 0x0b3d },
  { 0x0b5c, 0x0b5d },
  { 0x0b5f, 0x0b61 },
  { 0x0b85, 0x0b8a },
  { 0x0b8e, 0x0b90 },
  { 0x0b92, 0x0b95 },
  { 0x0b99, 0x0b9a },
  { 0x0b9c },
  { 0x0b9e, 0x0b9f },
  { 0x0ba3, 0x0ba4 },
  { 0x0ba8, 0x0baa },
  { 0x0bae, 0x0bb5 },
  { 0x0bb7, 0x0bb9 },
  { 0x0c05, 0x0c0c },
  { 0x0c0e, 0x0c10 },
  { 0x0c12, 0x0c28 },
  { 0x0c2a, 0x0c33 },
  { 0x0c35, 0x0c39 },
  { 0x0c60, 0x0c61 },
  { 0x0c85, 0x0c8c },
  { 0x0c8e, 0x0c90 },
  { 0x0c92, 0x0ca8 },
  { 0x0caa, 0x0cb3 },
  { 0x0cb5, 0x0cb9 },
  { 0x0cde },
  { 0x0ce0, 0x0ce1 },
  { 0x0d05, 0x0d0c },
  { 0x0d0e, 0x0d10 },
  { 0x0d12, 0x0d28 },
  { 0x0d2a, 0x0d39 },
  { 0x0d60, 0x0d61 },
  { 0x0e01, 0x0e2e },
  { 0x0e30 },
  { 0x0e32, 0x0e33 },
  { 0x0e40, 0x0e45 },
  { 0x0e81, 0x0e82 },
  { 0x0e84 },
  { 0x0e87, 0x0e88 },
  { 0x0e8a },
  { 0x0e8d },
  { 0x0e94, 0x0e97 },
  { 0x0e99, 0x0e9f },
  { 0x0ea1, 0x0ea3 },
  { 0x0ea5 },
  { 0x0ea7 },
  { 0x0eaa, 0x0eab },
  { 0x0ead, 0x0eae },
  { 0x0eb0 },
  { 0x0eb2, 0x0eb3 },
  { 0x0ebd },
  { 0x0ec0, 0x0ec4 },
  { 0x0f40, 0x0f47 },
  { 0x0f49, 0x0f69 },
  { 0x10a0, 0x10c5 },
  { 0x10d0, 0x10f6 },
  { 0x1100 },
  { 0x1102, 0x1103 },
  { 0x1105, 0x1107 },
  { 0x1109 },
  { 0x110b, 0x110c },
  { 0x110e, 0x1112 },
  { 0x113c },
  { 0x113e },
  { 0x1140 },
  { 0x114c },
  { 0x114e },
  { 0x1150 },
  { 0x1154, 0x1155 },
  { 0x1159 },
  { 0x115f, 0x1161 },
  { 0x1163 },
  { 0x1165 },
  { 0x1167 },
  { 0x1169 },
  { 0x116d, 0x116e },
  { 0x1172, 0x1173 },
  { 0x1175 },
  { 0x119e },
  { 0x11a8 },
  { 0x11ab },
  { 0x11ae, 0x11af },
  { 0x11b7, 0x11b8 },
  { 0x11ba },
  { 0x11bc, 0x11c2 },
  { 0x11eb },
  { 0x11f0 },
  { 0x11f9 },
  { 0x1e00, 0x1e9b },
  { 0x1ea0, 0x1ef9 },
  { 0x1f00, 0x1f15 },
  { 0x1f18, 0x1f1d },
  { 0x1f20, 0x1f45 },
  { 0x1f48, 0x1f4d },
  { 0x1f50, 0x1f57 },
  { 0x1f59 },
  { 0x1f5b },
  { 0x1f5d },
  { 0x1f5f, 0x1f7d },
  { 0x1f80, 0x1fb4 },
  { 0x1fb6, 0x1fbc },
  { 0x1fbe },
  { 0x1fc2, 0x1fc4 },
  { 0x1fc6, 0x1fcc },
  { 0x1fd0, 0x1fd3 },
  { 0x1fd6, 0x1fdb },
  { 0x1fe0, 0x1fec },
  { 0x1ff2, 0x1ff4 },
  { 0x1ff6, 0x1ffc },
  { 0x2126 },
  { 0x212a, 0x212b },
  { 0x212e },
  { 0x2180, 0x2182 },
  { 0x3041, 0x3094 },
  { 0x30a1, 0x30fa },
  { 0x3105, 0x312c },
  { 0xac00, 0xd7a3 },
  /* Ideographic */
  { 0x4e00, 0x9fa5 },
  { 0x3007 },
  { 0x3021, 0x3029 },
};

/* name chars that are not name start chars */
struct range name[] = {
  { '.' },
  { '-' },
  /* CombiningChar */
  { 0x0300, 0x0345 },
  { 0x0360, 0x0361 },
  { 0x0483, 0x0486 },
  { 0x0591, 0x05a1 },
  { 0x05a3, 0x05b9 },
  { 0x05bb, 0x05bd },
  { 0x05bf },
  { 0x05c1, 0x05c2 },
  { 0x05c4 },
  { 0x064b, 0x0652 },
  { 0x0670 },
  { 0x06d6, 0x06dc },
  { 0x06dd, 0x06df },
  { 0x06e0, 0x06e4 },
  { 0x06e7, 0x06e8 },
  { 0x06ea, 0x06ed },
  { 0x0901, 0x0903 },
  { 0x093c },
  { 0x093e, 0x094c },
  { 0x094d },
  { 0x0951, 0x0954 },
  { 0x0962, 0x0963 },
  { 0x0981, 0x0983 },
  { 0x09bc },
  { 0x09be },
  { 0x09bf },
  { 0x09c0, 0x09c4 },
  { 0x09c7, 0x09c8 },
  { 0x09cb, 0x09cd },
  { 0x09d7 },
  { 0x09e2, 0x09e3 },
  { 0x0a02 },
  { 0x0a3c },
  { 0x0a3e },
  { 0x0a3f },
  { 0x0a40, 0x0a42 },
  { 0x0a47, 0x0a48 },
  { 0x0a4b, 0x0a4d },
  { 0x0a70, 0x0a71 },
  { 0x0a81, 0x0a83 },
  { 0x0abc },
  { 0x0abe, 0x0ac5 },
  { 0x0ac7, 0x0ac9 },
  { 0x0acb, 0x0acd },
  { 0x0b01, 0x0b03 },
  { 0x0b3c },
  { 0x0b3e, 0x0b43 },
  { 0x0b47, 0x0b48 },
  { 0x0b4b, 0x0b4d },
  { 0x0b56, 0x0b57 },
  { 0x0b82, 0x0b83 },
  { 0x0bbe, 0x0bc2 },
  { 0x0bc6, 0x0bc8 },
  { 0x0bca, 0x0bcd },
  { 0x0bd7 },
  { 0x0c01, 0x0c03 },
  { 0x0c3e, 0x0c44 },
  { 0x0c46, 0x0c48 },
  { 0x0c4a, 0x0c4d },
  { 0x0c55, 0x0c56 },
  { 0x0c82, 0x0c83 },
  { 0x0cbe, 0x0cc4 },
  { 0x0cc6, 0x0cc8 },
  { 0x0cca, 0x0ccd },
  { 0x0cd5, 0x0cd6 },
  { 0x0d02, 0x0d03 },
  { 0x0d3e, 0x0d43 },
  { 0x0d46, 0x0d48 },
  { 0x0d4a, 0x0d4d },
  { 0x0d57 },
  { 0x0e31 },
  { 0x0e34, 0x0e3a },
  { 0x0e47, 0x0e4e },
  { 0x0eb1 },
  { 0x0eb4, 0x0eb9 },
  { 0x0ebb, 0x0ebc },
  { 0x0ec8, 0x0ecd },
  { 0x0f18, 0x0f19 },
  { 0x0f35 },
  { 0x0f37 },
  { 0x0f39 },
  { 0x0f3e },
  { 0x0f3f },
  { 0x0f71, 0x0f84 },
  { 0x0f86, 0x0f8b },
  { 0x0f90, 0x0f95 },
  { 0x0f97 },
  { 0x0f99, 0x0fad },
  { 0x0fb1, 0x0fb7 },
  { 0x0fb9 },
  { 0x20d0, 0x20dc },
  { 0x20e1 },
  { 0x302a, 0x302f },
  { 0x3099 },
  { 0x309a },
  /* Digit */
  { 0x0030, 0x0039 },
  { 0x0660, 0x0669 },
  { 0x06f0, 0x06f9 },
  { 0x0966, 0x096f },
  { 0x09e6, 0x09ef },
  { 0x0a66, 0x0a6f },
  { 0x0ae6, 0x0aef },
  { 0x0b66, 0x0b6f },
  { 0x0be7, 0x0bef },
  { 0x0c66, 0x0c6f },
  { 0x0ce6, 0x0cef },
  { 0x0d66, 0x0d6f },
  { 0x0e50, 0x0e59 },
  { 0x0ed0, 0x0ed9 },
  { 0x0f20, 0x0f29 },
  /* Extender */
  { 0xb7 },
  { 0x02d0 },
  { 0x02d1 },
  { 0x0387 },
  { 0x0640 },
  { 0x0e46 },
  { 0x0ec6 },
  { 0x3005 },
  { 0x3031, 0x3035 },
  { 0x309d, 0x309e },
  { 0x30fc, 0x30fe },
};

void setTab(char *tab, struct range *ranges, size_t nRanges)
{
  size_t i;
  int j;
  for (i = 0; i < nRanges; i++) {
    if (ranges[i].end) {
      for (j = ranges[i].start; j <= ranges[i].end; j++)
	tab[j] = 1;
    }
    else
      tab[ranges[i].start] = 1;
  }
}

void printTabs(char *tab)
{ 
  int nBitmaps = 2;
  int i, j, k;
  unsigned char pageIndex[512];

  printf(
"static const unsigned namingBitmap[] = {\n\
0x00000000, 0x00000000, 0x00000000, 0x00000000,\n\
0x00000000, 0x00000000, 0x00000000, 0x00000000,\n\
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\n\
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\n");
  for (i = 0; i < 512; i++) {
    int kind = tab[i*256];
    for (j = 1; j < 256; j++)
      if (tab[i*256 +j] != kind) {
	kind = -1;
	break;
      }
    if (i >= 256 &&  memcmp(tab + (i - 256)*256, tab + i*256, 256) == 0)
      pageIndex[i] = pageIndex[i - 256];
    else if (kind == -1) { 
      pageIndex[i] = nBitmaps++;
      for (j = 0; j < 8; j++) {
	unsigned val = 0;
	for (k = 0; k < 32; k++) {
	  if (tab[i*256 + j*32 +k])
	    val |= (1 << k);
	}
	printf("0x%08X,", val);
	putchar((((j + 1) & 3) == 0) ? '\n' : ' ');
      }
    }
    else
      pageIndex[i] = kind;
  }
  printf("};\n");
  printf("static const unsigned char nmstrtPages[] = {\n");
  for (i = 0; i < 512; i++) {
    if (i == 256)
      printf("};\nstatic const unsigned char namePages[] = {\n");
    printf("0x%02X,", pageIndex[i]);
    putchar((((i + 1) & 7) == 0) ? '\n' : ' ');
  }
  printf("};\n");
}

int main()
{ 
  char tab[2*65536];
  memset(tab, 0, 65536);
  setTab(tab, nmstrt, sizeof(nmstrt)/sizeof(nmstrt[0]));
  memcpy(tab + 65536, tab, 65536);
  setTab(tab + 65536, name, sizeof(name)/sizeof(name[0]));
  printTabs(tab);
  return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\sample\elements.c ===
/* This is simple demonstration of how to use expat. This program
reads an XML document from standard input and writes a line with the
name of each element to standard output indenting child elements by
one tab stop more than their parent element. */

#include <stdio.h>
#include "xmlparse.h"

void startElement(void *userData, const char *name, const char **atts)
{
  int i;
  int *depthPtr = userData;
  for (i = 0; i < *depthPtr; i++)
    putchar('\t');
  puts(name);
  *depthPtr += 1;
}

void endElement(void *userData, const char *name)
{
  int *depthPtr = userData;
  *depthPtr -= 1;
}

int main()
{
  char buf[BUFSIZ];
  XML_Parser parser = XML_ParserCreate(NULL);
  int done;
  int depth = 0;
  XML_SetUserData(parser, &depth);
  XML_SetElementHandler(parser, startElement, endElement);
  do {
    size_t len = fread(buf, 1, sizeof(buf), stdin);
    done = len < sizeof(buf);
    if (!XML_Parse(parser, buf, len, done)) {
      fprintf(stderr,
	      "%s at line %d\n",
	      XML_ErrorString(XML_GetErrorCode(parser)),
	      XML_GetCurrentLineNumber(parser));
      return 1;
    }
  } while (!done);
  XML_ParserFree(parser);
  return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\asciitab.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

/* 0x00 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x04 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x08 */ BT_NONXML, BT_S, BT_LF, BT_NONXML,
/* 0x0C */ BT_NONXML, BT_CR, BT_NONXML, BT_NONXML,
/* 0x10 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x14 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x18 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x1C */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x20 */ BT_S, BT_EXCL, BT_QUOT, BT_NUM,
/* 0x24 */ BT_OTHER, BT_PERCNT, BT_AMP, BT_APOS,
/* 0x28 */ BT_LPAR, BT_RPAR, BT_AST, BT_PLUS,
/* 0x2C */ BT_COMMA, BT_MINUS, BT_NAME, BT_SOL,
/* 0x30 */ BT_DIGIT, BT_DIGIT, BT_DIGIT, BT_DIGIT,
/* 0x34 */ BT_DIGIT, BT_DIGIT, BT_DIGIT, BT_DIGIT,
/* 0x38 */ BT_DIGIT, BT_DIGIT, BT_COLON, BT_SEMI,
/* 0x3C */ BT_LT, BT_EQUALS, BT_GT, BT_QUEST,
/* 0x40 */ BT_OTHER, BT_HEX, BT_HEX, BT_HEX,
/* 0x44 */ BT_HEX, BT_HEX, BT_HEX, BT_NMSTRT,
/* 0x48 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x4C */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x50 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x54 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x58 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_LSQB,
/* 0x5C */ BT_OTHER, BT_RSQB, BT_OTHER, BT_NMSTRT,
/* 0x60 */ BT_OTHER, BT_HEX, BT_HEX, BT_HEX,
/* 0x64 */ BT_HEX, BT_HEX, BT_HEX, BT_NMSTRT,
/* 0x68 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x6C */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x70 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x74 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x78 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_OTHER,
/* 0x7C */ BT_VERBAR, BT_OTHER, BT_OTHER, BT_OTHER,
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlparse\hashtable.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/


#include <stddef.h>

#ifdef XML_UNICODE

#ifdef XML_UNICODE_WCHAR_T
typedef const wchar_t *KEY;
#else /* not XML_UNICODE_WCHAR_T */
typedef const unsigned short *KEY;
#endif /* not XML_UNICODE_WCHAR_T */

#else /* not XML_UNICODE */

typedef const char *KEY;

#endif /* not XML_UNICODE */

typedef struct {
  KEY name;
} NAMED;

typedef struct {
  NAMED **v;
  size_t size;
  size_t used;
  size_t usedLim;
} HASH_TABLE;

NAMED *lookup(HASH_TABLE *table, KEY name, size_t createSize);
void hashTableInit(HASH_TABLE *);
void hashTableDestroy(HASH_TABLE *);

typedef struct {
  NAMED **p;
  NAMED **end;
} HASH_TABLE_ITER;

void hashTableIterInit(HASH_TABLE_ITER *, const HASH_TABLE *);
NAMED *hashTableIterNext(HASH_TABLE_ITER *);
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlparse\xmlparse.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#ifndef XmlParse_INCLUDED
#define XmlParse_INCLUDED 1

#ifdef __cplusplus
extern "C" {
#endif

#ifndef XMLPARSEAPI
#define XMLPARSEAPI /* as nothing */
#endif

typedef void *XML_Parser;

#ifdef XML_UNICODE_WCHAR_T

/* XML_UNICODE_WCHAR_T will work only if sizeof(wchar_t) == 2 and wchar_t
uses Unicode. */
/* Information is UTF-16 encoded as wchar_ts */

#ifndef XML_UNICODE
#define XML_UNICODE
#endif

#include <stddef.h>
typedef wchar_t XML_Char;
typedef wchar_t XML_LChar;

#else /* not XML_UNICODE_WCHAR_T */

#ifdef XML_UNICODE

/* Information is UTF-16 encoded as unsigned shorts */
typedef unsigned short XML_Char;
typedef char XML_LChar;

#else /* not XML_UNICODE */

/* Information is UTF-8 encoded. */
typedef char XML_Char;
typedef char XML_LChar;

#endif /* not XML_UNICODE */

#endif /* not XML_UNICODE_WCHAR_T */


/* Constructs a new parser; encoding is the encoding specified by the external
protocol or null if there is none specified. */

XML_Parser XMLPARSEAPI
XML_ParserCreate(const XML_Char *encoding);

/* Constructs a new parser and namespace processor.  Element type names
and attribute names that belong to a namespace will be expanded;
unprefixed attribute names are never expanded; unprefixed element type
names are expanded only if there is a default namespace. The expanded
name is the concatenation of the namespace URI, the namespace separator character,
and the local part of the name.  If the namespace separator is '\0' then
the namespace URI and the local part will be concatenated without any
separator.  When a namespace is not declared, the name and prefix will be
passed through without expansion. */

XML_Parser XMLPARSEAPI
XML_ParserCreateNS(const XML_Char *encoding, XML_Char namespaceSeparator);


/* atts is array of name/value pairs, terminated by 0;
   names and values are 0 terminated. */

typedef void (*XML_StartElementHandler)(void *userData,
					const XML_Char *name,
					const XML_Char **atts);

typedef void (*XML_EndElementHandler)(void *userData,
				      const XML_Char *name);

/* s is not 0 terminated. */
typedef void (*XML_CharacterDataHandler)(void *userData,
					 const XML_Char *s,
					 int len);

/* target and data are 0 terminated */
typedef void (*XML_ProcessingInstructionHandler)(void *userData,
						 const XML_Char *target,
						 const XML_Char *data);

/* data is 0 terminated */
typedef void (*XML_CommentHandler)(void *userData, const XML_Char *data);

typedef void (*XML_StartCdataSectionHandler)(void *userData);
typedef void (*XML_EndCdataSectionHandler)(void *userData);

/* This is called for any characters in the XML document for
which there is no applicable handler.  This includes both
characters that are part of markup which is of a kind that is
not reported (comments, markup declarations), or characters
that are part of a construct which could be reported but
for which no handler has been supplied. The characters are passed
exactly as they were in the XML document except that
they will be encoded in UTF-8.  Line boundaries are not normalized.
Note that a byte order mark character is not passed to the default handler.
There are no guarantees about how characters are divided between calls
to the default handler: for example, a comment might be split between
multiple calls. */

typedef void (*XML_DefaultHandler)(void *userData,
				   const XML_Char *s,
				   int len);

/* This is called for the start of the DOCTYPE declaration when the
name of the DOCTYPE is encountered. */
typedef void (*XML_StartDoctypeDeclHandler)(void *userData,
					    const XML_Char *doctypeName);

/* This is called for the start of the DOCTYPE declaration when the
closing > is encountered, but after processing any external subset. */
typedef void (*XML_EndDoctypeDeclHandler)(void *userData);

/* This is called for a declaration of an unparsed (NDATA)
entity.  The base argument is whatever was set by XML_SetBase.
The entityName, systemId and notationName arguments will never be null.
The other arguments may be. */

typedef void (*XML_UnparsedEntityDeclHandler)(void *userData,
					      const XML_Char *entityName,
					      const XML_Char *base,
					      const XML_Char *systemId,
					      const XML_Char *publicId,
					      const XML_Char *notationName);

/* This is called for a declaration of notation.
The base argument is whatever was set by XML_SetBase.
The notationName will never be null.  The other arguments can be. */

typedef void (*XML_NotationDeclHandler)(void *userData,
					const XML_Char *notationName,
					const XML_Char *base,
					const XML_Char *systemId,
					const XML_Char *publicId);

/* When namespace processing is enabled, these are called once for
each namespace declaration. The call to the start and end element
handlers occur between the calls to the start and end namespace
declaration handlers. For an xmlns attribute, prefix will be null.
For an xmlns="" attribute, uri will be null. */

typedef void (*XML_StartNamespaceDeclHandler)(void *userData,
					      const XML_Char *prefix,
					      const XML_Char *uri);

typedef void (*XML_EndNamespaceDeclHandler)(void *userData,
					    const XML_Char *prefix);

/* This is called if the document is not standalone (it has an
external subset or a reference to a parameter entity, but does not
have standalone="yes"). If this handler returns 0, then processing
will not continue, and the parser will return a
XML_ERROR_NOT_STANDALONE error. */

typedef int (*XML_NotStandaloneHandler)(void *userData);

/* This is called for a reference to an external parsed general entity.
The referenced entity is not automatically parsed.
The application can parse it immediately or later using
XML_ExternalEntityParserCreate.
The parser argument is the parser parsing the entity containing the reference;
it can be passed as the parser argument to XML_ExternalEntityParserCreate.
The systemId argument is the system identifier as specified in the entity declaration;
it will not be null.
The base argument is the system identifier that should be used as the base for
resolving systemId if systemId was relative; this is set by XML_SetBase;
it may be null.
The publicId argument is the public identifier as specified in the entity declaration,
or null if none was specified; the whitespace in the public identifier
will have been normalized as required by the XML spec.
The context argument specifies the parsing context in the format
expected by the context argument to
XML_ExternalEntityParserCreate; context is valid only until the handler
returns, so if the referenced entity is to be parsed later, it must be copied.
The handler should return 0 if processing should not continue because of
a fatal error in the handling of the external entity.
In this case the calling parser will return an XML_ERROR_EXTERNAL_ENTITY_HANDLING
error.
Note that unlike other handlers the first argument is the parser, not userData. */

typedef int (*XML_ExternalEntityRefHandler)(XML_Parser parser,
					    const XML_Char *context,
					    const XML_Char *base,
					    const XML_Char *systemId,
					    const XML_Char *publicId);

/* This structure is filled in by the XML_UnknownEncodingHandler
to provide information to the parser about encodings that are unknown
to the parser.
The map[b] member gives information about byte sequences
whose first byte is b.
If map[b] is c where c is >= 0, then b by itself encodes the Unicode scalar value c.
If map[b] is -1, then the byte sequence is malformed.
If map[b] is -n, where n >= 2, then b is the first byte of an n-byte
sequence that encodes a single Unicode scalar value.
The data member will be passed as the first argument to the convert function.
The convert function is used to convert multibyte sequences;
s will point to a n-byte sequence where map[(unsigned char)*s] == -n.
The convert function must return the Unicode scalar value
represented by this byte sequence or -1 if the byte sequence is malformed.
The convert function may be null if the encoding is a single-byte encoding,
that is if map[b] >= -1 for all bytes b.
When the parser is finished with the encoding, then if release is not null,
it will call release passing it the data member;
once release has been called, the convert function will not be called again.

Expat places certain restrictions on the encodings that are supported
using this mechanism.

1. Every ASCII character that can appear in a well-formed XML document,
other than the characters

  $@\^`{}~

must be represented by a single byte, and that byte must be the
same byte that represents that character in ASCII.

2. No character may require more than 4 bytes to encode.

3. All characters encoded must have Unicode scalar values <= 0xFFFF,
(ie characters that would be encoded by surrogates in UTF-16
are  not allowed).  Note that this restriction doesn't apply to
the built-in support for UTF-8 and UTF-16.

4. No Unicode character may be encoded by more than one distinct sequence
of bytes. */

typedef struct {
  int map[256];
  void *data;
  int (*convert)(void *data, const char *s);
  void (*release)(void *data);
} XML_Encoding;

/* This is called for an encoding that is unknown to the parser.
The encodingHandlerData argument is that which was passed as the
second argument to XML_SetUnknownEncodingHandler.
The name argument gives the name of the encoding as specified in
the encoding declaration.
If the callback can provide information about the encoding,
it must fill in the XML_Encoding structure, and return 1.
Otherwise it must return 0.
If info does not describe a suitable encoding,
then the parser will return an XML_UNKNOWN_ENCODING error. */

typedef int (*XML_UnknownEncodingHandler)(void *encodingHandlerData,
					  const XML_Char *name,
					  XML_Encoding *info);

void XMLPARSEAPI
XML_SetElementHandler(XML_Parser parser,
		      XML_StartElementHandler start,
		      XML_EndElementHandler end);

void XMLPARSEAPI
XML_SetCharacterDataHandler(XML_Parser parser,
			    XML_CharacterDataHandler handler);

void XMLPARSEAPI
XML_SetProcessingInstructionHandler(XML_Parser parser,
				    XML_ProcessingInstructionHandler handler);
void XMLPARSEAPI
XML_SetCommentHandler(XML_Parser parser,
                      XML_CommentHandler handler);

void XMLPARSEAPI
XML_SetCdataSectionHandler(XML_Parser parser,
			   XML_StartCdataSectionHandler start,
			   XML_EndCdataSectionHandler end);

/* This sets the default handler and also inhibits expansion of internal entities.
The entity reference will be passed to the default handler. */

void XMLPARSEAPI
XML_SetDefaultHandler(XML_Parser parser,
		      XML_DefaultHandler handler);

/* This sets the default handler but does not inhibit expansion of internal entities.
The entity reference will not be passed to the default handler. */

void XMLPARSEAPI
XML_SetDefaultHandlerExpand(XML_Parser parser,
		            XML_DefaultHandler handler);

void XMLPARSEAPI
XML_SetDoctypeDeclHandler(XML_Parser parser,
			  XML_StartDoctypeDeclHandler start,
			  XML_EndDoctypeDeclHandler end);

void XMLPARSEAPI
XML_SetUnparsedEntityDeclHandler(XML_Parser parser,
				 XML_UnparsedEntityDeclHandler handler);

void XMLPARSEAPI
XML_SetNotationDeclHandler(XML_Parser parser,
			   XML_NotationDeclHandler handler);

void XMLPARSEAPI
XML_SetNamespaceDeclHandler(XML_Parser parser,
			    XML_StartNamespaceDeclHandler start,
			    XML_EndNamespaceDeclHandler end);

void XMLPARSEAPI
XML_SetNotStandaloneHandler(XML_Parser parser,
			    XML_NotStandaloneHandler handler);

void XMLPARSEAPI
XML_SetExternalEntityRefHandler(XML_Parser parser,
				XML_ExternalEntityRefHandler handler);

/* If a non-null value for arg is specified here, then it will be passed
as the first argument to the external entity ref handler instead
of the parser object. */
void XMLPARSEAPI
XML_SetExternalEntityRefHandlerArg(XML_Parser, void *arg);

void XMLPARSEAPI
XML_SetUnknownEncodingHandler(XML_Parser parser,
			      XML_UnknownEncodingHandler handler,
			      void *encodingHandlerData);

/* This can be called within a handler for a start element, end element,
processing instruction or character data.  It causes the corresponding
markup to be passed to the default handler. */
void XMLPARSEAPI XML_DefaultCurrent(XML_Parser parser);

/* This value is passed as the userData argument to callbacks. */
void XMLPARSEAPI
XML_SetUserData(XML_Parser parser, void *userData);

/* Returns the last value set by XML_SetUserData or null. */
#define XML_GetUserData(parser) (*(void **)(parser))

/* This is equivalent to supplying an encoding argument
to XML_CreateParser. It must not be called after XML_Parse
or XML_ParseBuffer. */

int XMLPARSEAPI
XML_SetEncoding(XML_Parser parser, const XML_Char *encoding);

/* If this function is called, then the parser will be passed
as the first argument to callbacks instead of userData.
The userData will still be accessible using XML_GetUserData. */

void XMLPARSEAPI
XML_UseParserAsHandlerArg(XML_Parser parser);

/* Sets the base to be used for resolving relative URIs in system identifiers in
declarations.  Resolving relative identifiers is left to the application:
this value will be passed through as the base argument to the
XML_ExternalEntityRefHandler, XML_NotationDeclHandler
and XML_UnparsedEntityDeclHandler. The base argument will be copied.
Returns zero if out of memory, non-zero otherwise. */

int XMLPARSEAPI
XML_SetBase(XML_Parser parser, const XML_Char *base);

const XML_Char XMLPARSEAPI *
XML_GetBase(XML_Parser parser);

/* Returns the number of the attributes passed in last call to the
XML_StartElementHandler that were specified in the start-tag rather
than defaulted. */

int XMLPARSEAPI XML_GetSpecifiedAttributeCount(XML_Parser parser);

/* Parses some input. Returns 0 if a fatal error is detected.
The last call to XML_Parse must have isFinal true;
len may be zero for this call (or any other). */
int XMLPARSEAPI
XML_Parse(XML_Parser parser, const char *s, int len, int isFinal);

void XMLPARSEAPI *
XML_GetBuffer(XML_Parser parser, int len);

int XMLPARSEAPI
XML_ParseBuffer(XML_Parser parser, int len, int isFinal);

/* Creates an XML_Parser object that can parse an external general entity;
context is a '\0'-terminated string specifying the parse context;
encoding is a '\0'-terminated string giving the name of the externally specified encoding,
or null if there is no externally specified encoding.
The context string consists of a sequence of tokens separated by formfeeds (\f);
a token consisting of a name specifies that the general entity of the name
is open; a token of the form prefix=uri specifies the namespace for a particular
prefix; a token of the form =uri specifies the default namespace.
This can be called at any point after the first call to an ExternalEntityRefHandler
so longer as the parser has not yet been freed.
The new parser is completely independent and may safely be used in a separate thread.
The handlers and userData are initialized from the parser argument.
Returns 0 if out of memory.  Otherwise returns a new XML_Parser object. */
XML_Parser XMLPARSEAPI
XML_ExternalEntityParserCreate(XML_Parser parser,
			       const XML_Char *context,
			       const XML_Char *encoding);

enum XML_ParamEntityParsing {
  XML_PARAM_ENTITY_PARSING_NEVER,
  XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE,
  XML_PARAM_ENTITY_PARSING_ALWAYS
};

/* Controls parsing of parameter entities (including the external DTD
subset). If parsing of parameter entities is enabled, then references
to external parameter entities (including the external DTD subset)
will be passed to the handler set with
XML_SetExternalEntityRefHandler.  The context passed will be 0.
Unlike external general entities, external parameter entities can only
be parsed synchronously.  If the external parameter entity is to be
parsed, it must be parsed during the call to the external entity ref
handler: the complete sequence of XML_ExternalEntityParserCreate,
XML_Parse/XML_ParseBuffer and XML_ParserFree calls must be made during
this call.  After XML_ExternalEntityParserCreate has been called to
create the parser for the external parameter entity (context must be 0
for this call), it is illegal to make any calls on the old parser
until XML_ParserFree has been called on the newly created parser.  If
the library has been compiled without support for parameter entity
parsing (ie without XML_DTD being defined), then
XML_SetParamEntityParsing will return 0 if parsing of parameter
entities is requested; otherwise it will return non-zero. */

int XMLPARSEAPI
XML_SetParamEntityParsing(XML_Parser parser,
			  enum XML_ParamEntityParsing parsing);

enum XML_Error {
  XML_ERROR_NONE,
  XML_ERROR_NO_MEMORY,
  XML_ERROR_SYNTAX,
  XML_ERROR_NO_ELEMENTS,
  XML_ERROR_INVALID_TOKEN,
  XML_ERROR_UNCLOSED_TOKEN,
  XML_ERROR_PARTIAL_CHAR,
  XML_ERROR_TAG_MISMATCH,
  XML_ERROR_DUPLICATE_ATTRIBUTE,
  XML_ERROR_JUNK_AFTER_DOC_ELEMENT,
  XML_ERROR_PARAM_ENTITY_REF,
  XML_ERROR_UNDEFINED_ENTITY,
  XML_ERROR_RECURSIVE_ENTITY_REF,
  XML_ERROR_ASYNC_ENTITY,
  XML_ERROR_BAD_CHAR_REF,
  XML_ERROR_BINARY_ENTITY_REF,
  XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF,
  XML_ERROR_MISPLACED_XML_PI,
  XML_ERROR_UNKNOWN_ENCODING,
  XML_ERROR_INCORRECT_ENCODING,
  XML_ERROR_UNCLOSED_CDATA_SECTION,
  XML_ERROR_EXTERNAL_ENTITY_HANDLING,
  XML_ERROR_NOT_STANDALONE
};

/* If XML_Parse or XML_ParseBuffer have returned 0, then XML_GetErrorCode
returns information about the error. */

enum XML_Error XMLPARSEAPI XML_GetErrorCode(XML_Parser parser);

/* These functions return information about the current parse location.
They may be called when XML_Parse or XML_ParseBuffer return 0;
in this case the location is the location of the character at which
the error was detected.
They may also be called from any other callback called to report
some parse event; in this the location is the location of the first
of the sequence of characters that generated the event. */

int XMLPARSEAPI XML_GetCurrentLineNumber(XML_Parser parser);
int XMLPARSEAPI XML_GetCurrentColumnNumber(XML_Parser parser);
long XMLPARSEAPI XML_GetCurrentByteIndex(XML_Parser parser);

/* Return the number of bytes in the current event.
Returns 0 if the event is in an internal entity. */

int XMLPARSEAPI XML_GetCurrentByteCount(XML_Parser parser);

/* If XML_CONTEXT_BYTES is defined, returns the input buffer, sets
   the integer pointed to by offset to the offset within this buffer
   of the current parse position, and sets the integer pointed to by size
   to the size of this buffer (the number of input bytes). Otherwise
   returns a null pointer. Also returns a null pointer if a parse isn't active.

   NOTE: The character pointer returned should not be used outside
   the handler that makes the call. */

const char XMLPARSEAPI * XML_GetInputContext(XML_Parser parser,
					     int *offset,
					     int *size);

/* For backwards compatibility with previous versions. */
#define XML_GetErrorLineNumber XML_GetCurrentLineNumber
#define XML_GetErrorColumnNumber XML_GetCurrentColumnNumber
#define XML_GetErrorByteIndex XML_GetCurrentByteIndex

/* Frees memory used by the parser. */
void XMLPARSEAPI
XML_ParserFree(XML_Parser parser);

/* Returns a string describing the error. */
const XML_LChar XMLPARSEAPI *XML_ErrorString(int code);

#ifdef __cplusplus
}
#endif

#endif /* not XmlParse_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlparse\hashtable.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
csompliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include "xmldef.h"

#ifdef XML_UNICODE_WCHAR_T
#ifndef XML_UNICODE
#define XML_UNICODE
#endif
#endif

#include "hashtable.h"

#define INIT_SIZE 64

static
int keyeq(KEY s1, KEY s2)
{
  for (; *s1 == *s2; s1++, s2++)
    if (*s1 == 0)
      return 1;
  return 0;
}

static
unsigned long hash(KEY s)
{
  unsigned long h = 0;
  while (*s)
    h = (h << 5) + h + (unsigned char)*s++;
  return h;
}

NAMED *lookup(HASH_TABLE *table, KEY name, size_t createSize)
{
  size_t i;
  if (table->size == 0) {
    if (!createSize)
      return 0;
    table->v = calloc(INIT_SIZE, sizeof(NAMED *));
    if (!table->v)
      return 0;
    table->size = INIT_SIZE;
    table->usedLim = INIT_SIZE / 2;
    i = hash(name) & (table->size - 1);
  }
  else {
    unsigned long h = hash(name);
    for (i = h & (table->size - 1);
         table->v[i];
         i == 0 ? i = table->size - 1 : --i) {
      if (keyeq(name, table->v[i]->name))
	return table->v[i];
    }
    if (!createSize)
      return 0;
    if (table->used == table->usedLim) {
      /* check for overflow */
      size_t newSize = table->size * 2;
      NAMED **newV = calloc(newSize, sizeof(NAMED *));
      if (!newV)
	return 0;
      for (i = 0; i < table->size; i++)
	if (table->v[i]) {
	  size_t j;
	  for (j = hash(table->v[i]->name) & (newSize - 1);
	       newV[j];
	       j == 0 ? j = newSize - 1 : --j)
	    ;
	  newV[j] = table->v[i];
	}
      free(table->v);
      table->v = newV;
      table->size = newSize;
      table->usedLim = newSize/2;
      for (i = h & (table->size - 1);
	   table->v[i];
	   i == 0 ? i = table->size - 1 : --i)
	;
    }
  }
  table->v[i] = calloc(1, createSize);
  if (!table->v[i])
    return 0;
  table->v[i]->name = name;
  (table->used)++;
  return table->v[i];
}

void hashTableDestroy(HASH_TABLE *table)
{
  size_t i;
  for (i = 0; i < table->size; i++) {
    NAMED *p = table->v[i];
    if (p)
      free(p);
  }
  free(table->v);
}

void hashTableInit(HASH_TABLE *p)
{
  p->size = 0;
  p->usedLim = 0;
  p->used = 0;
  p->v = 0;
}

void hashTableIterInit(HASH_TABLE_ITER *iter, const HASH_TABLE *table)
{
  iter->p = table->v;
  iter->end = iter->p + table->size;
}

NAMED *hashTableIterNext(HASH_TABLE_ITER *iter)
{
  while (iter->p != iter->end) {
    NAMED *tem = *(iter->p)++;
    if (tem)
      return tem;
  }
  return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlparse\xmlparse.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include "xmldef.h"
#include "xmlparse.h"

#ifdef XML_UNICODE
#define XML_ENCODE_MAX XML_UTF16_ENCODE_MAX
#define XmlConvert XmlUtf16Convert
#define XmlGetInternalEncoding XmlGetUtf16InternalEncoding
#define XmlGetInternalEncodingNS XmlGetUtf16InternalEncodingNS
#define XmlEncode XmlUtf16Encode
#define MUST_CONVERT(enc, s) (!(enc)->isUtf16 || (((unsigned long)s) & 1))
typedef unsigned short ICHAR;
#else
#define XML_ENCODE_MAX XML_UTF8_ENCODE_MAX
#define XmlConvert XmlUtf8Convert
#define XmlGetInternalEncoding XmlGetUtf8InternalEncoding
#define XmlGetInternalEncodingNS XmlGetUtf8InternalEncodingNS
#define XmlEncode XmlUtf8Encode
#define MUST_CONVERT(enc, s) (!(enc)->isUtf8)
typedef char ICHAR;
#endif


#ifndef XML_NS

#define XmlInitEncodingNS XmlInitEncoding
#define XmlInitUnknownEncodingNS XmlInitUnknownEncoding
#undef XmlGetInternalEncodingNS
#define XmlGetInternalEncodingNS XmlGetInternalEncoding
#define XmlParseXmlDeclNS XmlParseXmlDecl

#endif

#ifdef XML_UNICODE_WCHAR_T
#define XML_T(x) L ## x
#else
#define XML_T(x) x
#endif

/* Round up n to be a multiple of sz, where sz is a power of 2. */
#define ROUND_UP(n, sz) (((n) + ((sz) - 1)) & ~((sz) - 1))

#include "xmltok.h"
#include "xmlrole.h"
#include "hashtable.h"

#define INIT_TAG_BUF_SIZE 32  /* must be a multiple of sizeof(XML_Char) */
#define INIT_DATA_BUF_SIZE 1024
#define INIT_ATTS_SIZE 16
#define INIT_BLOCK_SIZE 1024
#define INIT_BUFFER_SIZE 1024

#define EXPAND_SPARE 24

typedef struct binding {
  struct prefix *prefix;
  struct binding *nextTagBinding;
  struct binding *prevPrefixBinding;
  const struct attribute_id *attId;
  XML_Char *uri;
  int uriLen;
  int uriAlloc;
} BINDING;

typedef struct prefix {
  const XML_Char *name;
  BINDING *binding;
} PREFIX;

typedef struct {
  const XML_Char *str;
  const XML_Char *localPart;
  int uriLen;
} TAG_NAME;

typedef struct tag {
  struct tag *parent;
  const char *rawName;
  int rawNameLength;
  TAG_NAME name;
  char *buf;
  char *bufEnd;
  BINDING *bindings;
} TAG;

typedef struct {
  const XML_Char *name;
  const XML_Char *textPtr;
  int textLen;
  const XML_Char *systemId;
  const XML_Char *base;
  const XML_Char *publicId;
  const XML_Char *notation;
  char open;
} ENTITY;

typedef struct block {
  struct block *next;
  int size;
  XML_Char s[1];
} BLOCK;

typedef struct {
  BLOCK *blocks;
  BLOCK *freeBlocks;
  const XML_Char *end;
  XML_Char *ptr;
  XML_Char *start;
} STRING_POOL;

/* The XML_Char before the name is used to determine whether
an attribute has been specified. */
typedef struct attribute_id {
  XML_Char *name;
  PREFIX *prefix;
  char maybeTokenized;
  char xmlns;
} ATTRIBUTE_ID;

typedef struct {
  const ATTRIBUTE_ID *id;
  char isCdata;
  const XML_Char *value;
} DEFAULT_ATTRIBUTE;

typedef struct {
  const XML_Char *name;
  PREFIX *prefix;
  int nDefaultAtts;
  int allocDefaultAtts;
  DEFAULT_ATTRIBUTE *defaultAtts;
} ELEMENT_TYPE;

typedef struct {
  HASH_TABLE generalEntities;
  HASH_TABLE elementTypes;
  HASH_TABLE attributeIds;
  HASH_TABLE prefixes;
  STRING_POOL pool;
  int complete;
  int standalone;
#ifdef XML_DTD
  HASH_TABLE paramEntities;
#endif /* XML_DTD */
  PREFIX defaultPrefix;
} DTD;

typedef struct open_internal_entity {
  const char *internalEventPtr;
  const char *internalEventEndPtr;
  struct open_internal_entity *next;
  ENTITY *entity;
} OPEN_INTERNAL_ENTITY;

typedef enum XML_Error Processor(XML_Parser parser,
				 const char *start,
				 const char *end,
				 const char **endPtr);

static Processor prologProcessor;
static Processor prologInitProcessor;
static Processor contentProcessor;
static Processor cdataSectionProcessor;
#ifdef XML_DTD
static Processor ignoreSectionProcessor;
#endif /* XML_DTD */
static Processor epilogProcessor;
static Processor errorProcessor;
static Processor externalEntityInitProcessor;
static Processor externalEntityInitProcessor2;
static Processor externalEntityInitProcessor3;
static Processor externalEntityContentProcessor;

static enum XML_Error
handleUnknownEncoding(XML_Parser parser, const XML_Char *encodingName);
static enum XML_Error
processXmlDecl(XML_Parser parser, int isGeneralTextEntity, const char *, const char *);
static enum XML_Error
initializeEncoding(XML_Parser parser);
static enum XML_Error
doProlog(XML_Parser parser, const ENCODING *enc, const char *s,
	 const char *end, int tok, const char *next, const char **nextPtr);
static enum XML_Error
processInternalParamEntity(XML_Parser parser, ENTITY *entity);
static enum XML_Error
doContent(XML_Parser parser, int startTagLevel, const ENCODING *enc,
	  const char *start, const char *end, const char **endPtr);
static enum XML_Error
doCdataSection(XML_Parser parser, const ENCODING *, const char **startPtr, const char *end, const char **nextPtr);
#ifdef XML_DTD
static enum XML_Error
doIgnoreSection(XML_Parser parser, const ENCODING *, const char **startPtr, const char *end, const char **nextPtr);
#endif /* XML_DTD */
static enum XML_Error storeAtts(XML_Parser parser, const ENCODING *, const char *s,
				TAG_NAME *tagNamePtr, BINDING **bindingsPtr);
static
int addBinding(XML_Parser parser, PREFIX *prefix, const ATTRIBUTE_ID *attId, const XML_Char *uri, BINDING **bindingsPtr);
static int
defineAttribute(ELEMENT_TYPE *type, ATTRIBUTE_ID *, int isCdata, const XML_Char *dfltValue);
static enum XML_Error
storeAttributeValue(XML_Parser parser, const ENCODING *, int isCdata, const char *, const char *,
		    STRING_POOL *);
static enum XML_Error
appendAttributeValue(XML_Parser parser, const ENCODING *, int isCdata, const char *, const char *,
		    STRING_POOL *);
static ATTRIBUTE_ID *
getAttributeId(XML_Parser parser, const ENCODING *enc, const char *start, const char *end);
static int setElementTypePrefix(XML_Parser parser, ELEMENT_TYPE *);
static enum XML_Error
storeEntityValue(XML_Parser parser, const ENCODING *enc, const char *start, const char *end);
static int
reportProcessingInstruction(XML_Parser parser, const ENCODING *enc, const char *start, const char *end);
static int
reportComment(XML_Parser parser, const ENCODING *enc, const char *start, const char *end);
static void
reportDefault(XML_Parser parser, const ENCODING *enc, const char *start, const char *end);

static const XML_Char *getContext(XML_Parser parser);
static int setContext(XML_Parser parser, const XML_Char *context);
static void normalizePublicId(XML_Char *s);
static int dtdInit(DTD *);
static void dtdDestroy(DTD *);
static int dtdCopy(DTD *newDtd, const DTD *oldDtd);
static int copyEntityTable(HASH_TABLE *, STRING_POOL *, const HASH_TABLE *);
#ifdef XML_DTD
static void dtdSwap(DTD *, DTD *);
#endif /* XML_DTD */
static void poolInit(STRING_POOL *);
static void poolClear(STRING_POOL *);
static void poolDestroy(STRING_POOL *);
static XML_Char *poolAppend(STRING_POOL *pool, const ENCODING *enc,
			    const char *ptr, const char *end);
static XML_Char *poolStoreString(STRING_POOL *pool, const ENCODING *enc,
				  const char *ptr, const char *end);
static int poolGrow(STRING_POOL *pool);
static const XML_Char *poolCopyString(STRING_POOL *pool, const XML_Char *s);
static const XML_Char *poolCopyStringN(STRING_POOL *pool, const XML_Char *s, int n);

#define poolStart(pool) ((pool)->start)
#define poolEnd(pool) ((pool)->ptr)
#define poolLength(pool) ((pool)->ptr - (pool)->start)
#define poolChop(pool) ((void)--(pool->ptr))
#define poolLastChar(pool) (((pool)->ptr)[-1])
#define poolDiscard(pool) ((pool)->ptr = (pool)->start)
#define poolFinish(pool) ((pool)->start = (pool)->ptr)
#define poolAppendChar(pool, c) \
  (((pool)->ptr == (pool)->end && !poolGrow(pool)) \
   ? 0 \
   : ((*((pool)->ptr)++ = c), 1))

typedef struct {
  /* The first member must be userData so that the XML_GetUserData macro works. */
  void *m_userData;
  void *m_handlerArg;
  char *m_buffer;
  /* first character to be parsed */
  const char *m_bufferPtr;
  /* past last character to be parsed */
  char *m_bufferEnd;
  /* allocated end of buffer */
  const char *m_bufferLim;
  long m_parseEndByteIndex;
  const char *m_parseEndPtr;
  XML_Char *m_dataBuf;
  XML_Char *m_dataBufEnd;
  XML_StartElementHandler m_startElementHandler;
  XML_EndElementHandler m_endElementHandler;
  XML_CharacterDataHandler m_characterDataHandler;
  XML_ProcessingInstructionHandler m_processingInstructionHandler;
  XML_CommentHandler m_commentHandler;
  XML_StartCdataSectionHandler m_startCdataSectionHandler;
  XML_EndCdataSectionHandler m_endCdataSectionHandler;
  XML_DefaultHandler m_defaultHandler;
  XML_StartDoctypeDeclHandler m_startDoctypeDeclHandler;
  XML_EndDoctypeDeclHandler m_endDoctypeDeclHandler;
  XML_UnparsedEntityDeclHandler m_unparsedEntityDeclHandler;
  XML_NotationDeclHandler m_notationDeclHandler;
  XML_StartNamespaceDeclHandler m_startNamespaceDeclHandler;
  XML_EndNamespaceDeclHandler m_endNamespaceDeclHandler;
  XML_NotStandaloneHandler m_notStandaloneHandler;
  XML_ExternalEntityRefHandler m_externalEntityRefHandler;
  void *m_externalEntityRefHandlerArg;
  XML_UnknownEncodingHandler m_unknownEncodingHandler;
  const ENCODING *m_encoding;
  INIT_ENCODING m_initEncoding;
  const ENCODING *m_internalEncoding;
  const XML_Char *m_protocolEncodingName;
  int m_ns;
  void *m_unknownEncodingMem;
  void *m_unknownEncodingData;
  void *m_unknownEncodingHandlerData;
  void (*m_unknownEncodingRelease)(void *);
  PROLOG_STATE m_prologState;
  Processor *m_processor;
  enum XML_Error m_errorCode;
  const char *m_eventPtr;
  const char *m_eventEndPtr;
  const char *m_positionPtr;
  OPEN_INTERNAL_ENTITY *m_openInternalEntities;
  int m_defaultExpandInternalEntities;
  int m_tagLevel;
  ENTITY *m_declEntity;
  const XML_Char *m_declNotationName;
  const XML_Char *m_declNotationPublicId;
  ELEMENT_TYPE *m_declElementType;
  ATTRIBUTE_ID *m_declAttributeId;
  char m_declAttributeIsCdata;
  DTD m_dtd;
  const XML_Char *m_curBase;
  TAG *m_tagStack;
  TAG *m_freeTagList;
  BINDING *m_inheritedBindings;
  BINDING *m_freeBindingList;
  int m_attsSize;
  int m_nSpecifiedAtts;
  ATTRIBUTE *m_atts;
  POSITION m_position;
  STRING_POOL m_tempPool;
  STRING_POOL m_temp2Pool;
  char *m_groupConnector;
  unsigned m_groupSize;
  int m_hadExternalDoctype;
  XML_Char m_namespaceSeparator;
#ifdef XML_DTD
  enum XML_ParamEntityParsing m_paramEntityParsing;
  XML_Parser m_parentParser;
#endif
} Parser;

#define userData (((Parser *)parser)->m_userData)
#define handlerArg (((Parser *)parser)->m_handlerArg)
#define startElementHandler (((Parser *)parser)->m_startElementHandler)
#define endElementHandler (((Parser *)parser)->m_endElementHandler)
#define characterDataHandler (((Parser *)parser)->m_characterDataHandler)
#define processingInstructionHandler (((Parser *)parser)->m_processingInstructionHandler)
#define commentHandler (((Parser *)parser)->m_commentHandler)
#define startCdataSectionHandler (((Parser *)parser)->m_startCdataSectionHandler)
#define endCdataSectionHandler (((Parser *)parser)->m_endCdataSectionHandler)
#define defaultHandler (((Parser *)parser)->m_defaultHandler)
#define startDoctypeDeclHandler (((Parser *)parser)->m_startDoctypeDeclHandler)
#define endDoctypeDeclHandler (((Parser *)parser)->m_endDoctypeDeclHandler)
#define unparsedEntityDeclHandler (((Parser *)parser)->m_unparsedEntityDeclHandler)
#define notationDeclHandler (((Parser *)parser)->m_notationDeclHandler)
#define startNamespaceDeclHandler (((Parser *)parser)->m_startNamespaceDeclHandler)
#define endNamespaceDeclHandler (((Parser *)parser)->m_endNamespaceDeclHandler)
#define notStandaloneHandler (((Parser *)parser)->m_notStandaloneHandler)
#define externalEntityRefHandler (((Parser *)parser)->m_externalEntityRefHandler)
#define externalEntityRefHandlerArg (((Parser *)parser)->m_externalEntityRefHandlerArg)
#define unknownEncodingHandler (((Parser *)parser)->m_unknownEncodingHandler)
#define encoding (((Parser *)parser)->m_encoding)
#define initEncoding (((Parser *)parser)->m_initEncoding)
#define internalEncoding (((Parser *)parser)->m_internalEncoding)
#define unknownEncodingMem (((Parser *)parser)->m_unknownEncodingMem)
#define unknownEncodingData (((Parser *)parser)->m_unknownEncodingData)
#define unknownEncodingHandlerData \
  (((Parser *)parser)->m_unknownEncodingHandlerData)
#define unknownEncodingRelease (((Parser *)parser)->m_unknownEncodingRelease)
#define protocolEncodingName (((Parser *)parser)->m_protocolEncodingName)
#define ns (((Parser *)parser)->m_ns)
#define prologState (((Parser *)parser)->m_prologState)
#define processor (((Parser *)parser)->m_processor)
#define errorCode (((Parser *)parser)->m_errorCode)
#define eventPtr (((Parser *)parser)->m_eventPtr)
#define eventEndPtr (((Parser *)parser)->m_eventEndPtr)
#define positionPtr (((Parser *)parser)->m_positionPtr)
#define position (((Parser *)parser)->m_position)
#define openInternalEntities (((Parser *)parser)->m_openInternalEntities)
#define defaultExpandInternalEntities (((Parser *)parser)->m_defaultExpandInternalEntities)
#define tagLevel (((Parser *)parser)->m_tagLevel)
#define buffer (((Parser *)parser)->m_buffer)
#define bufferPtr (((Parser *)parser)->m_bufferPtr)
#define bufferEnd (((Parser *)parser)->m_bufferEnd)
#define parseEndByteIndex (((Parser *)parser)->m_parseEndByteIndex)
#define parseEndPtr (((Parser *)parser)->m_parseEndPtr)
#define bufferLim (((Parser *)parser)->m_bufferLim)
#define dataBuf (((Parser *)parser)->m_dataBuf)
#define dataBufEnd (((Parser *)parser)->m_dataBufEnd)
#define dtd (((Parser *)parser)->m_dtd)
#define curBase (((Parser *)parser)->m_curBase)
#define declEntity (((Parser *)parser)->m_declEntity)
#define declNotationName (((Parser *)parser)->m_declNotationName)
#define declNotationPublicId (((Parser *)parser)->m_declNotationPublicId)
#define declElementType (((Parser *)parser)->m_declElementType)
#define declAttributeId (((Parser *)parser)->m_declAttributeId)
#define declAttributeIsCdata (((Parser *)parser)->m_declAttributeIsCdata)
#define freeTagList (((Parser *)parser)->m_freeTagList)
#define freeBindingList (((Parser *)parser)->m_freeBindingList)
#define inheritedBindings (((Parser *)parser)->m_inheritedBindings)
#define tagStack (((Parser *)parser)->m_tagStack)
#define atts (((Parser *)parser)->m_atts)
#define attsSize (((Parser *)parser)->m_attsSize)
#define nSpecifiedAtts (((Parser *)parser)->m_nSpecifiedAtts)
#define tempPool (((Parser *)parser)->m_tempPool)
#define temp2Pool (((Parser *)parser)->m_temp2Pool)
#define groupConnector (((Parser *)parser)->m_groupConnector)
#define groupSize (((Parser *)parser)->m_groupSize)
#define hadExternalDoctype (((Parser *)parser)->m_hadExternalDoctype)
#define namespaceSeparator (((Parser *)parser)->m_namespaceSeparator)
#ifdef XML_DTD
#define parentParser (((Parser *)parser)->m_parentParser)
#define paramEntityParsing (((Parser *)parser)->m_paramEntityParsing)
#endif /* XML_DTD */

#ifdef _MSC_VER
#ifdef _DEBUG
Parser *asParser(XML_Parser parser)
{
  return parser;
}
#endif
#endif

XML_Parser XML_ParserCreate(const XML_Char *encodingName)
{
  XML_Parser parser = malloc(sizeof(Parser));
  if (!parser)
    return parser;
  processor = prologInitProcessor;
  XmlPrologStateInit(&prologState);
  userData = 0;
  handlerArg = 0;
  startElementHandler = 0;
  endElementHandler = 0;
  characterDataHandler = 0;
  processingInstructionHandler = 0;
  commentHandler = 0;
  startCdataSectionHandler = 0;
  endCdataSectionHandler = 0;
  defaultHandler = 0;
  startDoctypeDeclHandler = 0;
  endDoctypeDeclHandler = 0;
  unparsedEntityDeclHandler = 0;
  notationDeclHandler = 0;
  startNamespaceDeclHandler = 0;
  endNamespaceDeclHandler = 0;
  notStandaloneHandler = 0;
  externalEntityRefHandler = 0;
  externalEntityRefHandlerArg = parser;
  unknownEncodingHandler = 0;
  buffer = 0;
  bufferPtr = 0;
  bufferEnd = 0;
  parseEndByteIndex = 0;
  parseEndPtr = 0;
  bufferLim = 0;
  declElementType = 0;
  declAttributeId = 0;
  declEntity = 0;
  declNotationName = 0;
  declNotationPublicId = 0;
  memset(&position, 0, sizeof(POSITION));
  errorCode = XML_ERROR_NONE;
  eventPtr = 0;
  eventEndPtr = 0;
  positionPtr = 0;
  openInternalEntities = 0;
  tagLevel = 0;
  tagStack = 0;
  freeTagList = 0;
  freeBindingList = 0;
  inheritedBindings = 0;
  attsSize = INIT_ATTS_SIZE;
  atts = malloc(attsSize * sizeof(ATTRIBUTE));
  nSpecifiedAtts = 0;
  dataBuf = malloc(INIT_DATA_BUF_SIZE * sizeof(XML_Char));
  groupSize = 0;
  groupConnector = 0;
  hadExternalDoctype = 0;
  unknownEncodingMem = 0;
  unknownEncodingRelease = 0;
  unknownEncodingData = 0;
  unknownEncodingHandlerData = 0;
  namespaceSeparator = '!';
#ifdef XML_DTD
  parentParser = 0;
  paramEntityParsing = XML_PARAM_ENTITY_PARSING_NEVER;
#endif
  ns = 0;
  poolInit(&tempPool);
  poolInit(&temp2Pool);
  protocolEncodingName = encodingName ? poolCopyString(&tempPool, encodingName) : 0;
  curBase = 0;
  if (!dtdInit(&dtd) || !atts || !dataBuf
      || (encodingName && !protocolEncodingName)) {
    XML_ParserFree(parser);
    return 0;
  }
  dataBufEnd = dataBuf + INIT_DATA_BUF_SIZE;
  XmlInitEncoding(&initEncoding, &encoding, 0);
  internalEncoding = XmlGetInternalEncoding();
  return parser;
}

XML_Parser XML_ParserCreateNS(const XML_Char *encodingName, XML_Char nsSep)
{
  static
  const XML_Char implicitContext[] = {
    XML_T('x'), XML_T('m'), XML_T('l'), XML_T('='),
    XML_T('h'), XML_T('t'), XML_T('t'), XML_T('p'), XML_T(':'),
    XML_T('/'), XML_T('/'), XML_T('w'), XML_T('w'), XML_T('w'),
    XML_T('.'), XML_T('w'), XML_T('3'),
    XML_T('.'), XML_T('o'), XML_T('r'), XML_T('g'),
    XML_T('/'), XML_T('X'), XML_T('M'), XML_T('L'),
    XML_T('/'), XML_T('1'), XML_T('9'), XML_T('9'), XML_T('8'),
    XML_T('/'), XML_T('n'), XML_T('a'), XML_T('m'), XML_T('e'),
    XML_T('s'), XML_T('p'), XML_T('a'), XML_T('c'), XML_T('e'),
    XML_T('\0')
  };

  XML_Parser parser = XML_ParserCreate(encodingName);
  if (parser) {
    XmlInitEncodingNS(&initEncoding, &encoding, 0);
    ns = 1;
    internalEncoding = XmlGetInternalEncodingNS();
    namespaceSeparator = nsSep;
  }
  if (!setContext(parser, implicitContext)) {
    XML_ParserFree(parser);
    return 0;
  }
  return parser;
}

int XML_SetEncoding(XML_Parser parser, const XML_Char *encodingName)
{
  if (!encodingName)
    protocolEncodingName = 0;
  else {
    protocolEncodingName = poolCopyString(&tempPool, encodingName);
    if (!protocolEncodingName)
      return 0;
  }
  return 1;
}

XML_Parser XML_ExternalEntityParserCreate(XML_Parser oldParser,
					  const XML_Char *context,
					  const XML_Char *encodingName)
{
  XML_Parser parser = oldParser;
  DTD *oldDtd = &dtd;
  XML_StartElementHandler oldStartElementHandler = startElementHandler;
  XML_EndElementHandler oldEndElementHandler = endElementHandler;
  XML_CharacterDataHandler oldCharacterDataHandler = characterDataHandler;
  XML_ProcessingInstructionHandler oldProcessingInstructionHandler = processingInstructionHandler;
  XML_CommentHandler oldCommentHandler = commentHandler;
  XML_StartCdataSectionHandler oldStartCdataSectionHandler = startCdataSectionHandler;
  XML_EndCdataSectionHandler oldEndCdataSectionHandler = endCdataSectionHandler;
  XML_DefaultHandler oldDefaultHandler = defaultHandler;
  XML_StartNamespaceDeclHandler oldStartNamespaceDeclHandler = startNamespaceDeclHandler;
  XML_EndNamespaceDeclHandler oldEndNamespaceDeclHandler = endNamespaceDeclHandler;
  XML_NotStandaloneHandler oldNotStandaloneHandler = notStandaloneHandler;
  XML_ExternalEntityRefHandler oldExternalEntityRefHandler = externalEntityRefHandler;
  XML_UnknownEncodingHandler oldUnknownEncodingHandler = unknownEncodingHandler;
  void *oldUserData = userData;
  void *oldHandlerArg = handlerArg;
  int oldDefaultExpandInternalEntities = defaultExpandInternalEntities;
  void *oldExternalEntityRefHandlerArg = externalEntityRefHandlerArg;
#ifdef XML_DTD
  int oldParamEntityParsing = paramEntityParsing;
#endif
  parser = (ns
            ? XML_ParserCreateNS(encodingName, namespaceSeparator)
	    : XML_ParserCreate(encodingName));
  if (!parser)
    return 0;
  startElementHandler = oldStartElementHandler;
  endElementHandler = oldEndElementHandler;
  characterDataHandler = oldCharacterDataHandler;
  processingInstructionHandler = oldProcessingInstructionHandler;
  commentHandler = oldCommentHandler;
  startCdataSectionHandler = oldStartCdataSectionHandler;
  endCdataSectionHandler = oldEndCdataSectionHandler;
  defaultHandler = oldDefaultHandler;
  startNamespaceDeclHandler = oldStartNamespaceDeclHandler;
  endNamespaceDeclHandler = oldEndNamespaceDeclHandler;
  notStandaloneHandler = oldNotStandaloneHandler;
  externalEntityRefHandler = oldExternalEntityRefHandler;
  unknownEncodingHandler = oldUnknownEncodingHandler;
  userData = oldUserData;
  if (oldUserData == oldHandlerArg)
    handlerArg = userData;
  else
    handlerArg = parser;
  if (oldExternalEntityRefHandlerArg != oldParser)
    externalEntityRefHandlerArg = oldExternalEntityRefHandlerArg;
  defaultExpandInternalEntities = oldDefaultExpandInternalEntities;
#ifdef XML_DTD
  paramEntityParsing = oldParamEntityParsing;
  if (context) {
#endif /* XML_DTD */
    if (!dtdCopy(&dtd, oldDtd) || !setContext(parser, context)) {
      XML_ParserFree(parser);
      return 0;
    }
    processor = externalEntityInitProcessor;
#ifdef XML_DTD
  }
  else {
    dtdSwap(&dtd, oldDtd);
    parentParser = oldParser;
    XmlPrologStateInitExternalEntity(&prologState);
    dtd.complete = 1;
    hadExternalDoctype = 1;
  }
#endif /* XML_DTD */
  return parser;
}

static
void destroyBindings(BINDING *bindings)
{
  for (;;) {
    BINDING *b = bindings;
    if (!b)
      break;
    bindings = b->nextTagBinding;
    free(b->uri);
    free(b);
  }
}

void XML_ParserFree(XML_Parser parser)
{
  for (;;) {
    TAG *p;
    if (tagStack == 0) {
      if (freeTagList == 0)
	break;
      tagStack = freeTagList;
      freeTagList = 0;
    }
    p = tagStack;
    tagStack = tagStack->parent;
    free(p->buf);
    destroyBindings(p->bindings);
    free(p);
  }
  destroyBindings(freeBindingList);
  destroyBindings(inheritedBindings);
  poolDestroy(&tempPool);
  poolDestroy(&temp2Pool);
#ifdef XML_DTD
  if (parentParser) {
    if (hadExternalDoctype)
      dtd.complete = 0;
    dtdSwap(&dtd, &((Parser *)parentParser)->m_dtd);
  }
#endif /* XML_DTD */
  dtdDestroy(&dtd);
  free((void *)atts);
  free(groupConnector);
  free(buffer);
  free(dataBuf);
  free(unknownEncodingMem);
  if (unknownEncodingRelease)
    unknownEncodingRelease(unknownEncodingData);
  free(parser);
}

void XML_UseParserAsHandlerArg(XML_Parser parser)
{
  handlerArg = parser;
}

void XML_SetUserData(XML_Parser parser, void *p)
{
  if (handlerArg == userData)
    handlerArg = userData = p;
  else
    userData = p;
}

int XML_SetBase(XML_Parser parser, const XML_Char *p)
{
  if (p) {
    p = poolCopyString(&dtd.pool, p);
    if (!p)
      return 0;
    curBase = p;
  }
  else
    curBase = 0;
  return 1;
}

const XML_Char *XML_GetBase(XML_Parser parser)
{
  return curBase;
}

int XML_GetSpecifiedAttributeCount(XML_Parser parser)
{
  return nSpecifiedAtts;
}

void XML_SetElementHandler(XML_Parser parser,
			   XML_StartElementHandler start,
			   XML_EndElementHandler end)
{
  startElementHandler = start;
  endElementHandler = end;
}

void XML_SetCharacterDataHandler(XML_Parser parser,
				 XML_CharacterDataHandler handler)
{
  characterDataHandler = handler;
}

void XML_SetProcessingInstructionHandler(XML_Parser parser,
					 XML_ProcessingInstructionHandler handler)
{
  processingInstructionHandler = handler;
}

void XML_SetCommentHandler(XML_Parser parser,
			   XML_CommentHandler handler)
{
  commentHandler = handler;
}

void XML_SetCdataSectionHandler(XML_Parser parser,
				XML_StartCdataSectionHandler start,
			        XML_EndCdataSectionHandler end)
{
  startCdataSectionHandler = start;
  endCdataSectionHandler = end;
}

void XML_SetDefaultHandler(XML_Parser parser,
			   XML_DefaultHandler handler)
{
  defaultHandler = handler;
  defaultExpandInternalEntities = 0;
}

void XML_SetDefaultHandlerExpand(XML_Parser parser,
				 XML_DefaultHandler handler)
{
  defaultHandler = handler;
  defaultExpandInternalEntities = 1;
}

void XML_SetDoctypeDeclHandler(XML_Parser parser,
			       XML_StartDoctypeDeclHandler start,
			       XML_EndDoctypeDeclHandler end)
{
  startDoctypeDeclHandler = start;
  endDoctypeDeclHandler = end;
}

void XML_SetUnparsedEntityDeclHandler(XML_Parser parser,
				      XML_UnparsedEntityDeclHandler handler)
{
  unparsedEntityDeclHandler = handler;
}

void XML_SetNotationDeclHandler(XML_Parser parser,
				XML_NotationDeclHandler handler)
{
  notationDeclHandler = handler;
}

void XML_SetNamespaceDeclHandler(XML_Parser parser,
				 XML_StartNamespaceDeclHandler start,
				 XML_EndNamespaceDeclHandler end)
{
  startNamespaceDeclHandler = start;
  endNamespaceDeclHandler = end;
}

void XML_SetNotStandaloneHandler(XML_Parser parser,
				 XML_NotStandaloneHandler handler)
{
  notStandaloneHandler = handler;
}

void XML_SetExternalEntityRefHandler(XML_Parser parser,
				     XML_ExternalEntityRefHandler handler)
{
  externalEntityRefHandler = handler;
}

void XML_SetExternalEntityRefHandlerArg(XML_Parser parser, void *arg)
{
  if (arg)
    externalEntityRefHandlerArg = arg;
  else
    externalEntityRefHandlerArg = parser;
}

void XML_SetUnknownEncodingHandler(XML_Parser parser,
				   XML_UnknownEncodingHandler handler,
				   void *data)
{
  unknownEncodingHandler = handler;
  unknownEncodingHandlerData = data;
}

int XML_SetParamEntityParsing(XML_Parser parser,
			      enum XML_ParamEntityParsing parsing)
{
#ifdef XML_DTD
  paramEntityParsing = parsing;
  return 1;
#else
  return parsing == XML_PARAM_ENTITY_PARSING_NEVER;
#endif
}

int XML_Parse(XML_Parser parser, const char *s, int len, int isFinal)
{
  if (len == 0) {
    if (!isFinal)
      return 1;
    positionPtr = bufferPtr;
    errorCode = processor(parser, bufferPtr, parseEndPtr = bufferEnd, 0);
    if (errorCode == XML_ERROR_NONE)
      return 1;
    eventEndPtr = eventPtr;
    processor = errorProcessor;
    return 0;
  }
#ifndef XML_CONTEXT_BYTES
  else if (bufferPtr == bufferEnd) {
    const char *end;
    int nLeftOver;
    parseEndByteIndex += len;
    positionPtr = s;
    if (isFinal) {
      errorCode = processor(parser, s, parseEndPtr = s + len, 0);
      if (errorCode == XML_ERROR_NONE)
	return 1;
      eventEndPtr = eventPtr;
      processor = errorProcessor;
      return 0;
    }
    errorCode = processor(parser, s, parseEndPtr = s + len, &end);
    if (errorCode != XML_ERROR_NONE) {
      eventEndPtr = eventPtr;
      processor = errorProcessor;
      return 0;
    }
    XmlUpdatePosition(encoding, positionPtr, end, &position);
    nLeftOver = s + len - end;
    if (nLeftOver) {
      if (buffer == 0 || nLeftOver > bufferLim - buffer) {
	/* FIXME avoid integer overflow */
	buffer = buffer == 0 ? malloc(len * 2) : realloc(buffer, len * 2);
	/* FIXME storage leak if realloc fails */
	if (!buffer) {
	  errorCode = XML_ERROR_NO_MEMORY;
	  eventPtr = eventEndPtr = 0;
	  processor = errorProcessor;
	  return 0;
	}
	bufferLim = buffer + len * 2;
      }
      memcpy(buffer, end, nLeftOver);
      bufferPtr = buffer;
      bufferEnd = buffer + nLeftOver;
    }
    return 1;
  }
#endif  /* not defined XML_CONTEXT_BYTES */
  else {
    memcpy(XML_GetBuffer(parser, len), s, len);
    return XML_ParseBuffer(parser, len, isFinal);
  }
}

int XML_ParseBuffer(XML_Parser parser, int len, int isFinal)
{
  const char *start = bufferPtr;
  positionPtr = start;
  bufferEnd += len;
  parseEndByteIndex += len;
  errorCode = processor(parser, start, parseEndPtr = bufferEnd,
			isFinal ? (const char **)0 : &bufferPtr);
  if (errorCode == XML_ERROR_NONE) {
    if (!isFinal)
      XmlUpdatePosition(encoding, positionPtr, bufferPtr, &position);
    return 1;
  }
  else {
    eventEndPtr = eventPtr;
    processor = errorProcessor;
    return 0;
  }
}

void *XML_GetBuffer(XML_Parser parser, int len)
{
  if (len > bufferLim - bufferEnd) {
    /* FIXME avoid integer overflow */
    int neededSize = len + (bufferEnd - bufferPtr);
#ifdef XML_CONTEXT_BYTES
    int keep = bufferPtr - buffer;

    if (keep > XML_CONTEXT_BYTES)
      keep = XML_CONTEXT_BYTES;
    neededSize += keep;
#endif  /* defined XML_CONTEXT_BYTES */
    if (neededSize  <= bufferLim - buffer) {
#ifdef XML_CONTEXT_BYTES
      if (keep < bufferPtr - buffer) {
	int offset = (bufferPtr - buffer) - keep;
	memmove(buffer, &buffer[offset], bufferEnd - bufferPtr + keep);
	bufferEnd -= offset;
	bufferPtr -= offset;
      }
#else
      memmove(buffer, bufferPtr, bufferEnd - bufferPtr);
      bufferEnd = buffer + (bufferEnd - bufferPtr);
      bufferPtr = buffer;
#endif  /* not defined XML_CONTEXT_BYTES */
    }
    else {
      char *newBuf;
      int bufferSize = bufferLim - bufferPtr;
      if (bufferSize == 0)
	bufferSize = INIT_BUFFER_SIZE;
      do {
	bufferSize *= 2;
      } while (bufferSize < neededSize);
      newBuf = malloc(bufferSize);
      if (newBuf == 0) {
	errorCode = XML_ERROR_NO_MEMORY;
	return 0;
      }
      bufferLim = newBuf + bufferSize;
#ifdef XML_CONTEXT_BYTES
      if (bufferPtr) {
	int keep = bufferPtr - buffer;
	if (keep > XML_CONTEXT_BYTES)
	  keep = XML_CONTEXT_BYTES;
	memcpy(newBuf, &bufferPtr[-keep], bufferEnd - bufferPtr + keep);
	free(buffer);
	buffer = newBuf;
	bufferEnd = buffer + (bufferEnd - bufferPtr) + keep;
	bufferPtr = buffer + keep;
      }
      else {
	bufferEnd = newBuf + (bufferEnd - bufferPtr);
	bufferPtr = buffer = newBuf;
      }
#else
      if (bufferPtr) {
	memcpy(newBuf, bufferPtr, bufferEnd - bufferPtr);
	free(buffer);
      }
      bufferEnd = newBuf + (bufferEnd - bufferPtr);
      bufferPtr = buffer = newBuf;
#endif  /* not defined XML_CONTEXT_BYTES */
    }
  }
  return bufferEnd;
}

enum XML_Error XML_GetErrorCode(XML_Parser parser)
{
  return errorCode;
}

long XML_GetCurrentByteIndex(XML_Parser parser)
{
  if (eventPtr)
    return parseEndByteIndex - (parseEndPtr - eventPtr);
  return -1;
}

int XML_GetCurrentByteCount(XML_Parser parser)
{
  if (eventEndPtr && eventPtr)
    return eventEndPtr - eventPtr;
  return 0;
}

const char * XML_GetInputContext(XML_Parser parser, int *offset, int *size)
{
#ifdef XML_CONTEXT_BYTES
  if (eventPtr && buffer) {
    *offset = eventPtr - buffer;
    *size   = bufferEnd - buffer;
    return buffer;
  }
#endif /* defined XML_CONTEXT_BYTES */
  return (char *) 0;
}

int XML_GetCurrentLineNumber(XML_Parser parser)
{
  if (eventPtr) {
    XmlUpdatePosition(encoding, positionPtr, eventPtr, &position);
    positionPtr = eventPtr;
  }
  return position.lineNumber + 1;
}

int XML_GetCurrentColumnNumber(XML_Parser parser)
{
  if (eventPtr) {
    XmlUpdatePosition(encoding, positionPtr, eventPtr, &position);
    positionPtr = eventPtr;
  }
  return position.columnNumber;
}

void XML_DefaultCurrent(XML_Parser parser)
{
  if (defaultHandler) {
    if (openInternalEntities)
      reportDefault(parser,
	            internalEncoding,
		    openInternalEntities->internalEventPtr,
		    openInternalEntities->internalEventEndPtr);
    else
      reportDefault(parser, encoding, eventPtr, eventEndPtr);
  }
}

const XML_LChar *XML_ErrorString(int code)
{
  static const XML_LChar *message[] = {
    0,
    XML_T("out of memory"),
    XML_T("syntax error"),
    XML_T("no element found"),
    XML_T("not well-formed"),
    XML_T("unclosed token"),
    XML_T("unclosed token"),
    XML_T("mismatched tag"),
    XML_T("duplicate attribute"),
    XML_T("junk after document element"),
    XML_T("illegal parameter entity reference"),
    XML_T("undefined entity"),
    XML_T("recursive entity reference"),
    XML_T("asynchronous entity"),
    XML_T("reference to invalid character number"),
    XML_T("reference to binary entity"),
    XML_T("reference to external entity in attribute"),
    XML_T("xml processing instruction not at start of external entity"),
    XML_T("unknown encoding"),
    XML_T("encoding specified in XML declaration is incorrect"),
    XML_T("unclosed CDATA section"),
    XML_T("error in processing external entity reference"),
    XML_T("document is not standalone")
  };
  if (code > 0 && code < sizeof(message)/sizeof(message[0]))
    return message[code];
  return 0;
}

static
enum XML_Error contentProcessor(XML_Parser parser,
				const char *start,
				const char *end,
				const char **endPtr)
{
  return doContent(parser, 0, encoding, start, end, endPtr);
}

static
enum XML_Error externalEntityInitProcessor(XML_Parser parser,
					   const char *start,
					   const char *end,
					   const char **endPtr)
{
  enum XML_Error result = initializeEncoding(parser);
  if (result != XML_ERROR_NONE)
    return result;
  processor = externalEntityInitProcessor2;
  return externalEntityInitProcessor2(parser, start, end, endPtr);
}

static
enum XML_Error externalEntityInitProcessor2(XML_Parser parser,
					    const char *start,
					    const char *end,
					    const char **endPtr)
{
  const char *next;
  int tok = XmlContentTok(encoding, start, end, &next);
  switch (tok) {
  case XML_TOK_BOM:
    start = next;
    break;
  case XML_TOK_PARTIAL:
    if (endPtr) {
      *endPtr = start;
      return XML_ERROR_NONE;
    }
    eventPtr = start;
    return XML_ERROR_UNCLOSED_TOKEN;
  case XML_TOK_PARTIAL_CHAR:
    if (endPtr) {
      *endPtr = start;
      return XML_ERROR_NONE;
    }
    eventPtr = start;
    return XML_ERROR_PARTIAL_CHAR;
  }
  processor = externalEntityInitProcessor3;
  return externalEntityInitProcessor3(parser, start, end, endPtr);
}

static
enum XML_Error externalEntityInitProcessor3(XML_Parser parser,
					    const char *start,
					    const char *end,
					    const char **endPtr)
{
  const char *next;
  int tok = XmlContentTok(encoding, start, end, &next);
  switch (tok) {
  case XML_TOK_XML_DECL:
    {
      enum XML_Error result = processXmlDecl(parser, 1, start, next);
      if (result != XML_ERROR_NONE)
	return result;
      start = next;
    }
    break;
  case XML_TOK_PARTIAL:
    if (endPtr) {
      *endPtr = start;
      return XML_ERROR_NONE;
    }
    eventPtr = start;
    return XML_ERROR_UNCLOSED_TOKEN;
  case XML_TOK_PARTIAL_CHAR:
    if (endPtr) {
      *endPtr = start;
      return XML_ERROR_NONE;
    }
    eventPtr = start;
    return XML_ERROR_PARTIAL_CHAR;
  }
  processor = externalEntityContentProcessor;
  tagLevel = 1;
  return doContent(parser, 1, encoding, start, end, endPtr);
}

static
enum XML_Error externalEntityContentProcessor(XML_Parser parser,
					      const char *start,
					      const char *end,
					      const char **endPtr)
{
  return doContent(parser, 1, encoding, start, end, endPtr);
}

static enum XML_Error
doContent(XML_Parser parser,
	  int startTagLevel,
	  const ENCODING *enc,
	  const char *s,
	  const char *end,
	  const char **nextPtr)
{
  const char **eventPP;
  const char **eventEndPP;
  if (enc == encoding) {
    eventPP = &eventPtr;
    eventEndPP = &eventEndPtr;
  }
  else {
    eventPP = &(openInternalEntities->internalEventPtr);
    eventEndPP = &(openInternalEntities->internalEventEndPtr);
  }
  *eventPP = s;
  for (;;) {
    const char *next = s; /* XmlContentTok doesn't always set the last arg */
    int tok = XmlContentTok(enc, s, end, &next);
    *eventEndPP = next;
    switch (tok) {
    case XML_TOK_TRAILING_CR:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      *eventEndPP = end;
      if (characterDataHandler) {
	XML_Char c = 0xA;
	characterDataHandler(handlerArg, &c, 1);
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, end);
      if (startTagLevel == 0)
	return XML_ERROR_NO_ELEMENTS;
      if (tagLevel != startTagLevel)
	return XML_ERROR_ASYNC_ENTITY;
      return XML_ERROR_NONE;
    case XML_TOK_NONE:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      if (startTagLevel > 0) {
	if (tagLevel != startTagLevel)
	  return XML_ERROR_ASYNC_ENTITY;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_NO_ELEMENTS;
    case XML_TOK_INVALID:
      *eventPP = next;
      return XML_ERROR_INVALID_TOKEN;
    case XML_TOK_PARTIAL:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_UNCLOSED_TOKEN;
    case XML_TOK_PARTIAL_CHAR:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_PARTIAL_CHAR;
    case XML_TOK_ENTITY_REF:
      {
	const XML_Char *name;
	ENTITY *entity;
	XML_Char ch = XmlPredefinedEntityName(enc,
					      s + enc->minBytesPerChar,
					      next - enc->minBytesPerChar);
	if (ch) {
	  if (characterDataHandler)
	    characterDataHandler(handlerArg, &ch, 1);
	  else if (defaultHandler)
	    reportDefault(parser, enc, s, next);
	  break;
	}
	name = poolStoreString(&dtd.pool, enc,
				s + enc->minBytesPerChar,
				next - enc->minBytesPerChar);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	entity = (ENTITY *)lookup(&dtd.generalEntities, name, 0);
	poolDiscard(&dtd.pool);
	if (!entity) {
	  if (dtd.complete || dtd.standalone)
	    return XML_ERROR_UNDEFINED_ENTITY;
	  if (defaultHandler)
	    reportDefault(parser, enc, s, next);
	  break;
	}
	if (entity->open)
	  return XML_ERROR_RECURSIVE_ENTITY_REF;
	if (entity->notation)
	  return XML_ERROR_BINARY_ENTITY_REF;
	if (entity) {
	  if (entity->textPtr) {
	    enum XML_Error result;
	    OPEN_INTERNAL_ENTITY openEntity;
	    if (defaultHandler && !defaultExpandInternalEntities) {
	      reportDefault(parser, enc, s, next);
	      break;
	    }
	    entity->open = 1;
	    openEntity.next = openInternalEntities;
	    openInternalEntities = &openEntity;
	    openEntity.entity = entity;
	    openEntity.internalEventPtr = 0;
	    openEntity.internalEventEndPtr = 0;
	    result = doContent(parser,
			       tagLevel,
			       internalEncoding,
			       (char *)entity->textPtr,
			       (char *)(entity->textPtr + entity->textLen),
			       0);
	    entity->open = 0;
	    openInternalEntities = openEntity.next;
	    if (result)
	      return result;
	  }
	  else if (externalEntityRefHandler) {
	    const XML_Char *context;
	    entity->open = 1;
	    context = getContext(parser);
	    entity->open = 0;
	    if (!context)
	      return XML_ERROR_NO_MEMORY;
	    if (!externalEntityRefHandler(externalEntityRefHandlerArg,
				          context,
					  entity->base,
					  entity->systemId,
					  entity->publicId))
	      return XML_ERROR_EXTERNAL_ENTITY_HANDLING;
	    poolDiscard(&tempPool);
	  }
	  else if (defaultHandler)
	    reportDefault(parser, enc, s, next);
	}
	break;
      }
    case XML_TOK_START_TAG_WITH_ATTS:
      if (!startElementHandler) {
	enum XML_Error result = storeAtts(parser, enc, s, 0, 0);
	if (result)
	  return result;
      }
      /* fall through */
    case XML_TOK_START_TAG_NO_ATTS:
      {
	TAG *tag;
	if (freeTagList) {
	  tag = freeTagList;
	  freeTagList = freeTagList->parent;
	}
	else {
	  tag = malloc(sizeof(TAG));
	  if (!tag)
	    return XML_ERROR_NO_MEMORY;
	  tag->buf = malloc(INIT_TAG_BUF_SIZE);
	  if (!tag->buf)
	    return XML_ERROR_NO_MEMORY;
	  tag->bufEnd = tag->buf + INIT_TAG_BUF_SIZE;
	}
	tag->bindings = 0;
	tag->parent = tagStack;
	tagStack = tag;
	tag->name.localPart = 0;
	tag->rawName = s + enc->minBytesPerChar;
	tag->rawNameLength = XmlNameLength(enc, tag->rawName);
	if (nextPtr) {
	  /* Need to guarantee that:
	     tag->buf + ROUND_UP(tag->rawNameLength, sizeof(XML_Char)) <= tag->bufEnd - sizeof(XML_Char) */
	  if (tag->rawNameLength + (int)(sizeof(XML_Char) - 1) + (int)sizeof(XML_Char) > tag->bufEnd - tag->buf) {
	    int bufSize = tag->rawNameLength * 4;
	    bufSize = ROUND_UP(bufSize, sizeof(XML_Char));
	    tag->buf = realloc(tag->buf, bufSize);
	    if (!tag->buf)
	      return XML_ERROR_NO_MEMORY;
	    tag->bufEnd = tag->buf + bufSize;
	  }
	  memcpy(tag->buf, tag->rawName, tag->rawNameLength);
	  tag->rawName = tag->buf;
	}
	++tagLevel;
	if (startElementHandler) {
	  enum XML_Error result;
	  XML_Char *toPtr;
	  for (;;) {
	    const char *rawNameEnd = tag->rawName + tag->rawNameLength;
	    const char *fromPtr = tag->rawName;
	    int bufSize;
	    if (nextPtr)
	      toPtr = (XML_Char *)(tag->buf + ROUND_UP(tag->rawNameLength, sizeof(XML_Char)));
	    else
	      toPtr = (XML_Char *)tag->buf;
	    tag->name.str = toPtr;
	    XmlConvert(enc,
		       &fromPtr, rawNameEnd,
		       (ICHAR **)&toPtr, (ICHAR *)tag->bufEnd - 1);
	    if (fromPtr == rawNameEnd)
	      break;
	    bufSize = (tag->bufEnd - tag->buf) << 1;
	    tag->buf = realloc(tag->buf, bufSize);
	    if (!tag->buf)
	      return XML_ERROR_NO_MEMORY;
	    tag->bufEnd = tag->buf + bufSize;
	    if (nextPtr)
	      tag->rawName = tag->buf;
	  }
	  *toPtr = XML_T('\0');
	  result = storeAtts(parser, enc, s, &(tag->name), &(tag->bindings));
	  if (result)
	    return result;
	  startElementHandler(handlerArg, tag->name.str, (const XML_Char **)atts);
	  poolClear(&tempPool);
	}
	else {
	  tag->name.str = 0;
	  if (defaultHandler)
	    reportDefault(parser, enc, s, next);
	}
	break;
      }
    case XML_TOK_EMPTY_ELEMENT_WITH_ATTS:
      if (!startElementHandler) {
	enum XML_Error result = storeAtts(parser, enc, s, 0, 0);
	if (result)
	  return result;
      }
      /* fall through */
    case XML_TOK_EMPTY_ELEMENT_NO_ATTS:
      if (startElementHandler || endElementHandler) {
	const char *rawName = s + enc->minBytesPerChar;
	enum XML_Error result;
	BINDING *bindings = 0;
	TAG_NAME name;
	name.str = poolStoreString(&tempPool, enc, rawName,
				   rawName + XmlNameLength(enc, rawName));
	if (!name.str)
	  return XML_ERROR_NO_MEMORY;
	poolFinish(&tempPool);
	result = storeAtts(parser, enc, s, &name, &bindings);
	if (result)
	  return result;
	poolFinish(&tempPool);
	if (startElementHandler)
	  startElementHandler(handlerArg, name.str, (const XML_Char **)atts);
	if (endElementHandler) {
	  if (startElementHandler)
	    *eventPP = *eventEndPP;
	  endElementHandler(handlerArg, name.str);
	}
	poolClear(&tempPool);
	while (bindings) {
	  BINDING *b = bindings;
	  if (endNamespaceDeclHandler)
	    endNamespaceDeclHandler(handlerArg, b->prefix->name);
	  bindings = bindings->nextTagBinding;
	  b->nextTagBinding = freeBindingList;
	  freeBindingList = b;
	  b->prefix->binding = b->prevPrefixBinding;
	}
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, next);
      if (tagLevel == 0)
	return epilogProcessor(parser, next, end, nextPtr);
      break;
    case XML_TOK_END_TAG:
      if (tagLevel == startTagLevel)
        return XML_ERROR_ASYNC_ENTITY;
      else {
	int len;
	const char *rawName;
	TAG *tag = tagStack;
	tagStack = tag->parent;
	tag->parent = freeTagList;
	freeTagList = tag;
	rawName = s + enc->minBytesPerChar*2;
	len = XmlNameLength(enc, rawName);
	if (len != tag->rawNameLength
	    || memcmp(tag->rawName, rawName, len) != 0) {
	  *eventPP = rawName;
	  return XML_ERROR_TAG_MISMATCH;
	}
	--tagLevel;
	if (endElementHandler && tag->name.str) {
	  if (tag->name.localPart) {
	    XML_Char *to = (XML_Char *)tag->name.str + tag->name.uriLen;
	    const XML_Char *from = tag->name.localPart;
	    while ((*to++ = *from++) != 0)
	      ;
	  }
	  endElementHandler(handlerArg, tag->name.str);
	}
	else if (defaultHandler)
	  reportDefault(parser, enc, s, next);
	while (tag->bindings) {
	  BINDING *b = tag->bindings;
	  if (endNamespaceDeclHandler)
	    endNamespaceDeclHandler(handlerArg, b->prefix->name);
	  tag->bindings = tag->bindings->nextTagBinding;
	  b->nextTagBinding = freeBindingList;
	  freeBindingList = b;
	  b->prefix->binding = b->prevPrefixBinding;
	}
	if (tagLevel == 0)
	  return epilogProcessor(parser, next, end, nextPtr);
      }
      break;
    case XML_TOK_CHAR_REF:
      {
	int n = XmlCharRefNumber(enc, s);
	if (n < 0)
	  return XML_ERROR_BAD_CHAR_REF;
	if (characterDataHandler) {
	  XML_Char buf[XML_ENCODE_MAX];
	  characterDataHandler(handlerArg, buf, XmlEncode(n, (ICHAR *)buf));
	}
	else if (defaultHandler)
	  reportDefault(parser, enc, s, next);
      }
      break;
    case XML_TOK_XML_DECL:
      return XML_ERROR_MISPLACED_XML_PI;
    case XML_TOK_DATA_NEWLINE:
      if (characterDataHandler) {
	XML_Char c = 0xA;
	characterDataHandler(handlerArg, &c, 1);
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, next);
      break;
    case XML_TOK_CDATA_SECT_OPEN:
      {
	enum XML_Error result;
	if (startCdataSectionHandler)
  	  startCdataSectionHandler(handlerArg);
#if 0
	/* Suppose you doing a transformation on a document that involves
	   changing only the character data.  You set up a defaultHandler
	   and a characterDataHandler.  The defaultHandler simply copies
	   characters through.  The characterDataHandler does the transformation
	   and writes the characters out escaping them as necessary.  This case
	   will fail to work if we leave out the following two lines (because &
	   and < inside CDATA sections will be incorrectly escaped).

	   However, now we have a start/endCdataSectionHandler, so it seems
	   easier to let the user deal with this. */

	else if (characterDataHandler)
  	  characterDataHandler(handlerArg, dataBuf, 0);
#endif
	else if (defaultHandler)
	  reportDefault(parser, enc, s, next);
	result = doCdataSection(parser, enc, &next, end, nextPtr);
	if (!next) {
	  processor = cdataSectionProcessor;
	  return result;
	}
      }
      break;
    case XML_TOK_TRAILING_RSQB:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      if (characterDataHandler) {
	if (MUST_CONVERT(enc, s)) {
	  ICHAR *dataPtr = (ICHAR *)dataBuf;
	  XmlConvert(enc, &s, end, &dataPtr, (ICHAR *)dataBufEnd);
	  characterDataHandler(handlerArg, dataBuf, dataPtr - (ICHAR *)dataBuf);
	}
	else
	  characterDataHandler(handlerArg,
		  	       (XML_Char *)s,
			       (XML_Char *)end - (XML_Char *)s);
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, end);
      if (startTagLevel == 0) {
        *eventPP = end;
	return XML_ERROR_NO_ELEMENTS;
      }
      if (tagLevel != startTagLevel) {
	*eventPP = end;
	return XML_ERROR_ASYNC_ENTITY;
      }
      return XML_ERROR_NONE;
    case XML_TOK_DATA_CHARS:
      if (characterDataHandler) {
	if (MUST_CONVERT(enc, s)) {
	  for (;;) {
	    ICHAR *dataPtr = (ICHAR *)dataBuf;
	    XmlConvert(enc, &s, next, &dataPtr, (ICHAR *)dataBufEnd);
	    *eventEndPP = s;
	    characterDataHandler(handlerArg, dataBuf, dataPtr - (ICHAR *)dataBuf);
	    if (s == next)
	      break;
	    *eventPP = s;
	  }
	}
	else
	  characterDataHandler(handlerArg,
			       (XML_Char *)s,
			       (XML_Char *)next - (XML_Char *)s);
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, next);
      break;
    case XML_TOK_PI:
      if (!reportProcessingInstruction(parser, enc, s, next))
	return XML_ERROR_NO_MEMORY;
      break;
    case XML_TOK_COMMENT:
      if (!reportComment(parser, enc, s, next))
	return XML_ERROR_NO_MEMORY;
      break;
    default:
      if (defaultHandler)
	reportDefault(parser, enc, s, next);
      break;
    }
    *eventPP = s = next;
  }
  /* not reached */
}

/* If tagNamePtr is non-null, build a real list of attributes,
otherwise just check the attributes for well-formedness. */

static enum XML_Error storeAtts(XML_Parser parser, const ENCODING *enc,
				const char *attStr, TAG_NAME *tagNamePtr,
				BINDING **bindingsPtr)
{
  ELEMENT_TYPE *elementType = 0;
  int nDefaultAtts = 0;
  const XML_Char **appAtts;
  int attIndex = 0;
  int i;
  int n;
  int nPrefixes = 0;
  BINDING *binding;
  const XML_Char *localPart;

  if (tagNamePtr) {
    elementType = (ELEMENT_TYPE *)lookup(&dtd.elementTypes, tagNamePtr->str, 0);
    if (!elementType) {
      tagNamePtr->str = poolCopyString(&dtd.pool, tagNamePtr->str);
      if (!tagNamePtr->str)
	return XML_ERROR_NO_MEMORY;
      elementType = (ELEMENT_TYPE *)lookup(&dtd.elementTypes, tagNamePtr->str, sizeof(ELEMENT_TYPE));
      if (!elementType)
        return XML_ERROR_NO_MEMORY;
      if (ns && !setElementTypePrefix(parser, elementType))
        return XML_ERROR_NO_MEMORY;
    }
    nDefaultAtts = elementType->nDefaultAtts;
  }
  n = XmlGetAttributes(enc, attStr, attsSize, atts);
  if (n + nDefaultAtts > attsSize) {
    int oldAttsSize = attsSize;
    attsSize = n + nDefaultAtts + INIT_ATTS_SIZE;
    atts = realloc((void *)atts, attsSize * sizeof(ATTRIBUTE));
    if (!atts)
      return XML_ERROR_NO_MEMORY;
    if (n > oldAttsSize)
      XmlGetAttributes(enc, attStr, n, atts);
  }
  appAtts = (const XML_Char **)atts;
  for (i = 0; i < n; i++) {
    ATTRIBUTE_ID *attId = getAttributeId(parser, enc, atts[i].name,
					 atts[i].name
					 + XmlNameLength(enc, atts[i].name));
    if (!attId)
      return XML_ERROR_NO_MEMORY;
    if ((attId->name)[-1]) {
      if (enc == encoding)
	eventPtr = atts[i].name;
      return XML_ERROR_DUPLICATE_ATTRIBUTE;
    }
    (attId->name)[-1] = 1;
    appAtts[attIndex++] = attId->name;
    if (!atts[i].normalized) {
      enum XML_Error result;
      int isCdata = 1;

      if (attId->maybeTokenized) {
	int j;
	for (j = 0; j < nDefaultAtts; j++) {
	  if (attId == elementType->defaultAtts[j].id) {
	    isCdata = elementType->defaultAtts[j].isCdata;
	    break;
	  }
	}
      }

      result = storeAttributeValue(parser, enc, isCdata,
				   atts[i].valuePtr, atts[i].valueEnd,
			           &tempPool);
      if (result)
	return result;
      if (tagNamePtr) {
	appAtts[attIndex] = poolStart(&tempPool);
	poolFinish(&tempPool);
      }
      else
	poolDiscard(&tempPool);
    }
    else if (tagNamePtr) {
      appAtts[attIndex] = poolStoreString(&tempPool, enc, atts[i].valuePtr, atts[i].valueEnd);
      if (appAtts[attIndex] == 0)
	return XML_ERROR_NO_MEMORY;
      poolFinish(&tempPool);
    }
    if (attId->prefix && tagNamePtr) {
      if (attId->xmlns) {
        if (!addBinding(parser, attId->prefix, attId, appAtts[attIndex], bindingsPtr))
          return XML_ERROR_NO_MEMORY;
        --attIndex;
      }
      else {
        attIndex++;
        nPrefixes++;
        (attId->name)[-1] = 2;
      }
    }
    else
      attIndex++;
  }
  nSpecifiedAtts = attIndex;
  if (tagNamePtr) {
    int j;
    for (j = 0; j < nDefaultAtts; j++) {
      const DEFAULT_ATTRIBUTE *da = elementType->defaultAtts + j;
      if (!(da->id->name)[-1] && da->value) {
        if (da->id->prefix) {
          if (da->id->xmlns) {
	    if (!addBinding(parser, da->id->prefix, da->id, da->value, bindingsPtr))
	      return XML_ERROR_NO_MEMORY;
	  }
          else {
	    (da->id->name)[-1] = 2;
	    nPrefixes++;
  	    appAtts[attIndex++] = da->id->name;
	    appAtts[attIndex++] = da->value;
	  }
	}
	else {
	  (da->id->name)[-1] = 1;
	  appAtts[attIndex++] = da->id->name;
	  appAtts[attIndex++] = da->value;
	}
      }
    }
    appAtts[attIndex] = 0;
  }
  i = 0;
  if (nPrefixes) {
    for (; i < attIndex; i += 2) {
      if (appAtts[i][-1] == 2) {
        ATTRIBUTE_ID *id;
        ((XML_Char *)(appAtts[i]))[-1] = 0;
	id = (ATTRIBUTE_ID *)lookup(&dtd.attributeIds, appAtts[i], 0);
	if (id->prefix->binding) {
	  int j;
	  const BINDING *b = id->prefix->binding;
	  const XML_Char *s = appAtts[i];
	  for (j = 0; j < b->uriLen; j++) {
	    if (!poolAppendChar(&tempPool, b->uri[j]))
	      return XML_ERROR_NO_MEMORY;
	  }
	  while (*s++ != ':')
	    ;
	  do {
	    if (!poolAppendChar(&tempPool, *s))
	      return XML_ERROR_NO_MEMORY;
	  } while (*s++);
	  appAtts[i] = poolStart(&tempPool);
	  poolFinish(&tempPool);
	}
	if (!--nPrefixes)
	  break;
      }
      else
	((XML_Char *)(appAtts[i]))[-1] = 0;
    }
  }
  for (; i < attIndex; i += 2)
    ((XML_Char *)(appAtts[i]))[-1] = 0;
  if (!tagNamePtr)
    return XML_ERROR_NONE;
  for (binding = *bindingsPtr; binding; binding = binding->nextTagBinding)
    binding->attId->name[-1] = 0;
  if (elementType->prefix) {
    binding = elementType->prefix->binding;
    if (!binding)
      return XML_ERROR_NONE;
    localPart = tagNamePtr->str;
    while (*localPart++ != XML_T(':'))
      ;
  }
  else if (dtd.defaultPrefix.binding) {
    binding = dtd.defaultPrefix.binding;
    localPart = tagNamePtr->str;
  }
  else
    return XML_ERROR_NONE;
  tagNamePtr->localPart = localPart;
  tagNamePtr->uriLen = binding->uriLen;
  i = binding->uriLen;
  do {
    if (i == binding->uriAlloc) {
      binding->uri = realloc(binding->uri, binding->uriAlloc *= 2);
      if (!binding->uri)
	return XML_ERROR_NO_MEMORY;
    }
    binding->uri[i++] = *localPart;
  } while (*localPart++);
  tagNamePtr->str = binding->uri;
  return XML_ERROR_NONE;
}

static
int addBinding(XML_Parser parser, PREFIX *prefix, const ATTRIBUTE_ID *attId, const XML_Char *uri, BINDING **bindingsPtr)
{
  BINDING *b;
  int len;
  for (len = 0; uri[len]; len++)
    ;
  if (namespaceSeparator)
    len++;
  if (freeBindingList) {
    b = freeBindingList;
    if (len > b->uriAlloc) {
      b->uri = realloc(b->uri, len + EXPAND_SPARE);
      if (!b->uri)
	return 0;
      b->uriAlloc = len + EXPAND_SPARE;
    }
    freeBindingList = b->nextTagBinding;
  }
  else {
    b = malloc(sizeof(BINDING));
    if (!b)
      return 0;
    b->uri = malloc(sizeof(XML_Char) * len + EXPAND_SPARE);
    if (!b->uri) {
      free(b);
      return 0;
    }
    b->uriAlloc = len;
  }
  b->uriLen = len;
  memcpy(b->uri, uri, len * sizeof(XML_Char));
  if (namespaceSeparator)
    b->uri[len - 1] = namespaceSeparator;
  b->prefix = prefix;
  b->attId = attId;
  b->prevPrefixBinding = prefix->binding;
  if (*uri == XML_T('\0') && prefix == &dtd.defaultPrefix)
    prefix->binding = 0;
  else
    prefix->binding = b;
  b->nextTagBinding = *bindingsPtr;
  *bindingsPtr = b;
  if (startNamespaceDeclHandler)
    startNamespaceDeclHandler(handlerArg, prefix->name,
			      prefix->binding ? uri : 0);
  return 1;
}

/* The idea here is to avoid using stack for each CDATA section when
the whole file is parsed with one call. */

static
enum XML_Error cdataSectionProcessor(XML_Parser parser,
				     const char *start,
			    	     const char *end,
				     const char **endPtr)
{
  enum XML_Error result = doCdataSection(parser, encoding, &start, end, endPtr);
  if (start) {
    processor = contentProcessor;
    return contentProcessor(parser, start, end, endPtr);
  }
  return result;
}

/* startPtr gets set to non-null is the section is closed, and to null if
the section is not yet closed. */

static
enum XML_Error doCdataSection(XML_Parser parser,
			      const ENCODING *enc,
			      const char **startPtr,
			      const char *end,
			      const char **nextPtr)
{
  const char *s = *startPtr;
  const char **eventPP;
  const char **eventEndPP;
  if (enc == encoding) {
    eventPP = &eventPtr;
    *eventPP = s;
    eventEndPP = &eventEndPtr;
  }
  else {
    eventPP = &(openInternalEntities->internalEventPtr);
    eventEndPP = &(openInternalEntities->internalEventEndPtr);
  }
  *eventPP = s;
  *startPtr = 0;
  for (;;) {
    const char *next;
    int tok = XmlCdataSectionTok(enc, s, end, &next);
    *eventEndPP = next;
    switch (tok) {
    case XML_TOK_CDATA_SECT_CLOSE:
      if (endCdataSectionHandler)
	endCdataSectionHandler(handlerArg);
#if 0
      /* see comment under XML_TOK_CDATA_SECT_OPEN */
      else if (characterDataHandler)
	characterDataHandler(handlerArg, dataBuf, 0);
#endif
      else if (defaultHandler)
	reportDefault(parser, enc, s, next);
      *startPtr = next;
      return XML_ERROR_NONE;
    case XML_TOK_DATA_NEWLINE:
      if (characterDataHandler) {
	XML_Char c = 0xA;
	characterDataHandler(handlerArg, &c, 1);
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, next);
      break;
    case XML_TOK_DATA_CHARS:
      if (characterDataHandler) {
	if (MUST_CONVERT(enc, s)) {
	  for (;;) {
  	    ICHAR *dataPtr = (ICHAR *)dataBuf;
	    XmlConvert(enc, &s, next, &dataPtr, (ICHAR *)dataBufEnd);
	    *eventEndPP = next;
	    characterDataHandler(handlerArg, dataBuf, dataPtr - (ICHAR *)dataBuf);
	    if (s == next)
	      break;
	    *eventPP = s;
	  }
	}
	else
	  characterDataHandler(handlerArg,
		  	       (XML_Char *)s,
			       (XML_Char *)next - (XML_Char *)s);
      }
      else if (defaultHandler)
	reportDefault(parser, enc, s, next);
      break;
    case XML_TOK_INVALID:
      *eventPP = next;
      return XML_ERROR_INVALID_TOKEN;
    case XML_TOK_PARTIAL_CHAR:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_PARTIAL_CHAR;
    case XML_TOK_PARTIAL:
    case XML_TOK_NONE:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_UNCLOSED_CDATA_SECTION;
    default:
      abort();
    }
    *eventPP = s = next;
  }
  /* not reached */
}

#ifdef XML_DTD

/* The idea here is to avoid using stack for each IGNORE section when
the whole file is parsed with one call. */

static
enum XML_Error ignoreSectionProcessor(XML_Parser parser,
				      const char *start,
				      const char *end,
				      const char **endPtr)
{
  enum XML_Error result = doIgnoreSection(parser, encoding, &start, end, endPtr);
  if (start) {
    processor = prologProcessor;
    return prologProcessor(parser, start, end, endPtr);
  }
  return result;
}

/* startPtr gets set to non-null is the section is closed, and to null if
the section is not yet closed. */

static
enum XML_Error doIgnoreSection(XML_Parser parser,
			       const ENCODING *enc,
			       const char **startPtr,
			       const char *end,
			       const char **nextPtr)
{
  const char *next;
  int tok;
  const char *s = *startPtr;
  const char **eventPP;
  const char **eventEndPP;
  if (enc == encoding) {
    eventPP = &eventPtr;
    *eventPP = s;
    eventEndPP = &eventEndPtr;
  }
  else {
    eventPP = &(openInternalEntities->internalEventPtr);
    eventEndPP = &(openInternalEntities->internalEventEndPtr);
  }
  *eventPP = s;
  *startPtr = 0;
  tok = XmlIgnoreSectionTok(enc, s, end, &next);
  *eventEndPP = next;
  switch (tok) {
  case XML_TOK_IGNORE_SECT:
    if (defaultHandler)
      reportDefault(parser, enc, s, next);
    *startPtr = next;
    return XML_ERROR_NONE;
  case XML_TOK_INVALID:
    *eventPP = next;
    return XML_ERROR_INVALID_TOKEN;
  case XML_TOK_PARTIAL_CHAR:
    if (nextPtr) {
      *nextPtr = s;
      return XML_ERROR_NONE;
    }
    return XML_ERROR_PARTIAL_CHAR;
  case XML_TOK_PARTIAL:
  case XML_TOK_NONE:
    if (nextPtr) {
      *nextPtr = s;
      return XML_ERROR_NONE;
    }
    return XML_ERROR_SYNTAX; /* XML_ERROR_UNCLOSED_IGNORE_SECTION */
  default:
    abort();
  }
  /* not reached */
}

#endif /* XML_DTD */

static enum XML_Error
initializeEncoding(XML_Parser parser)
{
  const char *s;
#ifdef XML_UNICODE
  char encodingBuf[128];
  if (!protocolEncodingName)
    s = 0;
  else {
    int i;
    for (i = 0; protocolEncodingName[i]; i++) {
      if (i == sizeof(encodingBuf) - 1
	  || protocolEncodingName[i] >= 0x80
	  || protocolEncodingName[i] < 0) {
	encodingBuf[0] = '\0';
	break;
      }
      encodingBuf[i] = (char)protocolEncodingName[i];
    }
    encodingBuf[i] = '\0';
    s = encodingBuf;
  }
#else
  s = protocolEncodingName;
#endif
  if ((ns ? XmlInitEncodingNS : XmlInitEncoding)(&initEncoding, &encoding, s))
    return XML_ERROR_NONE;
  return handleUnknownEncoding(parser, protocolEncodingName);
}

static enum XML_Error
processXmlDecl(XML_Parser parser, int isGeneralTextEntity,
	       const char *s, const char *next)
{
  const char *encodingName = 0;
  const ENCODING *newEncoding = 0;
  const char *version;
  int standalone = -1;
  if (!(ns
        ? XmlParseXmlDeclNS
	: XmlParseXmlDecl)(isGeneralTextEntity,
		           encoding,
		           s,
		           next,
		           &eventPtr,
		           &version,
		           &encodingName,
		           &newEncoding,
		           &standalone))
    return XML_ERROR_SYNTAX;
  if (!isGeneralTextEntity && standalone == 1) {
    dtd.standalone = 1;
#ifdef XML_DTD
    if (paramEntityParsing == XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE)
      paramEntityParsing = XML_PARAM_ENTITY_PARSING_NEVER;
#endif /* XML_DTD */
  }
  if (defaultHandler)
    reportDefault(parser, encoding, s, next);
  if (!protocolEncodingName) {
    if (newEncoding) {
      if (newEncoding->minBytesPerChar != encoding->minBytesPerChar) {
	eventPtr = encodingName;
	return XML_ERROR_INCORRECT_ENCODING;
      }
      encoding = newEncoding;
    }
    else if (encodingName) {
      enum XML_Error result;
      const XML_Char *s = poolStoreString(&tempPool,
					  encoding,
					  encodingName,
					  encodingName
					  + XmlNameLength(encoding, encodingName));
      if (!s)
	return XML_ERROR_NO_MEMORY;
      result = handleUnknownEncoding(parser, s);
      poolDiscard(&tempPool);
      if (result == XML_ERROR_UNKNOWN_ENCODING)
	eventPtr = encodingName;
      return result;
    }
  }
  return XML_ERROR_NONE;
}

static enum XML_Error
handleUnknownEncoding(XML_Parser parser, const XML_Char *encodingName)
{
  if (unknownEncodingHandler) {
    XML_Encoding info;
    int i;
    for (i = 0; i < 256; i++)
      info.map[i] = -1;
    info.convert = 0;
    info.data = 0;
    info.release = 0;
    if (unknownEncodingHandler(unknownEncodingHandlerData, encodingName, &info)) {
      ENCODING *enc;
      unknownEncodingMem = malloc(XmlSizeOfUnknownEncoding());
      if (!unknownEncodingMem) {
	if (info.release)
	  info.release(info.data);
	return XML_ERROR_NO_MEMORY;
      }
      enc = (ns
	     ? XmlInitUnknownEncodingNS
	     : XmlInitUnknownEncoding)(unknownEncodingMem,
				       info.map,
				       info.convert,
				       info.data);
      if (enc) {
	unknownEncodingData = info.data;
	unknownEncodingRelease = info.release;
	encoding = enc;
	return XML_ERROR_NONE;
      }
    }
    if (info.release)
      info.release(info.data);
  }
  return XML_ERROR_UNKNOWN_ENCODING;
}

static enum XML_Error
prologInitProcessor(XML_Parser parser,
		    const char *s,
		    const char *end,
		    const char **nextPtr)
{
  enum XML_Error result = initializeEncoding(parser);
  if (result != XML_ERROR_NONE)
    return result;
  processor = prologProcessor;
  return prologProcessor(parser, s, end, nextPtr);
}

static enum XML_Error
prologProcessor(XML_Parser parser,
		const char *s,
		const char *end,
		const char **nextPtr)
{
  const char *next;
  int tok = XmlPrologTok(encoding, s, end, &next);
  return doProlog(parser, encoding, s, end, tok, next, nextPtr);
}

static enum XML_Error
doProlog(XML_Parser parser,
	 const ENCODING *enc,
	 const char *s,
	 const char *end,
	 int tok,
	 const char *next,
	 const char **nextPtr)
{
#ifdef XML_DTD
  static const XML_Char externalSubsetName[] = { '#' , '\0' };
#endif /* XML_DTD */

  const char **eventPP;
  const char **eventEndPP;
  if (enc == encoding) {
    eventPP = &eventPtr;
    eventEndPP = &eventEndPtr;
  }
  else {
    eventPP = &(openInternalEntities->internalEventPtr);
    eventEndPP = &(openInternalEntities->internalEventEndPtr);
  }
  for (;;) {
    int role;
    *eventPP = s;
    *eventEndPP = next;
    if (tok <= 0) {
      if (nextPtr != 0 && tok != XML_TOK_INVALID) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      switch (tok) {
      case XML_TOK_INVALID:
	*eventPP = next;
	return XML_ERROR_INVALID_TOKEN;
      case XML_TOK_PARTIAL:
	return XML_ERROR_UNCLOSED_TOKEN;
      case XML_TOK_PARTIAL_CHAR:
	return XML_ERROR_PARTIAL_CHAR;
      case XML_TOK_NONE:
#ifdef XML_DTD
	if (enc != encoding)
	  return XML_ERROR_NONE;
	if (parentParser) {
	  if (XmlTokenRole(&prologState, XML_TOK_NONE, end, end, enc)
	      == XML_ROLE_ERROR)
	    return XML_ERROR_SYNTAX;
	  hadExternalDoctype = 0;
	  return XML_ERROR_NONE;
	}
#endif /* XML_DTD */
	return XML_ERROR_NO_ELEMENTS;
      default:
	tok = -tok;
	next = end;
	break;
      }
    }
    role = XmlTokenRole(&prologState, tok, s, next, enc);
    switch (role) {
    case XML_ROLE_XML_DECL:
      {
	enum XML_Error result = processXmlDecl(parser, 0, s, next);
	if (result != XML_ERROR_NONE)
	  return result;
	enc = encoding;
      }
      break;
    case XML_ROLE_DOCTYPE_NAME:
      if (startDoctypeDeclHandler) {
	const XML_Char *name = poolStoreString(&tempPool, enc, s, next);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	startDoctypeDeclHandler(handlerArg, name);
	poolClear(&tempPool);
      }
      break;
#ifdef XML_DTD
    case XML_ROLE_TEXT_DECL:
      {
	enum XML_Error result = processXmlDecl(parser, 1, s, next);
	if (result != XML_ERROR_NONE)
	  return result;
	enc = encoding;
      }
      break;
#endif /* XML_DTD */
    case XML_ROLE_DOCTYPE_PUBLIC_ID:
#ifdef XML_DTD
      declEntity = (ENTITY *)lookup(&dtd.paramEntities,
				    externalSubsetName,
				    sizeof(ENTITY));
      if (!declEntity)
	return XML_ERROR_NO_MEMORY;
#endif /* XML_DTD */
      /* fall through */
    case XML_ROLE_ENTITY_PUBLIC_ID:
      if (!XmlIsPublicId(enc, s, next, eventPP))
	return XML_ERROR_SYNTAX;
      if (declEntity) {
	XML_Char *tem = poolStoreString(&dtd.pool,
	                                enc,
					s + enc->minBytesPerChar,
	  				next - enc->minBytesPerChar);
	if (!tem)
	  return XML_ERROR_NO_MEMORY;
	normalizePublicId(tem);
	declEntity->publicId = tem;
	poolFinish(&dtd.pool);
      }
      break;
    case XML_ROLE_DOCTYPE_CLOSE:
      if (dtd.complete && hadExternalDoctype) {
	dtd.complete = 0;
#ifdef XML_DTD
	if (paramEntityParsing && externalEntityRefHandler) {
	  ENTITY *entity = (ENTITY *)lookup(&dtd.paramEntities,
					    externalSubsetName,
					    0);
	  if (!externalEntityRefHandler(externalEntityRefHandlerArg,
					0,
					entity->base,
					entity->systemId,
					entity->publicId))
	   return XML_ERROR_EXTERNAL_ENTITY_HANDLING;
	}
#endif /* XML_DTD */
	if (!dtd.complete
	    && !dtd.standalone
	    && notStandaloneHandler
	    && !notStandaloneHandler(handlerArg))
	  return XML_ERROR_NOT_STANDALONE;
      }
      if (endDoctypeDeclHandler)
	endDoctypeDeclHandler(handlerArg);
      break;
    case XML_ROLE_INSTANCE_START:
      processor = contentProcessor;
      return contentProcessor(parser, s, end, nextPtr);
    case XML_ROLE_ATTLIST_ELEMENT_NAME:
      {
	const XML_Char *name = poolStoreString(&dtd.pool, enc, s, next);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	declElementType = (ELEMENT_TYPE *)lookup(&dtd.elementTypes, name, sizeof(ELEMENT_TYPE));
	if (!declElementType)
	  return XML_ERROR_NO_MEMORY;
	if (declElementType->name != name)
	  poolDiscard(&dtd.pool);
	else {
	  poolFinish(&dtd.pool);
	  if (!setElementTypePrefix(parser, declElementType))
            return XML_ERROR_NO_MEMORY;
	}
	break;
      }
    case XML_ROLE_ATTRIBUTE_NAME:
      declAttributeId = getAttributeId(parser, enc, s, next);
      if (!declAttributeId)
	return XML_ERROR_NO_MEMORY;
      declAttributeIsCdata = 0;
      break;
    case XML_ROLE_ATTRIBUTE_TYPE_CDATA:
      declAttributeIsCdata = 1;
      break;
    case XML_ROLE_IMPLIED_ATTRIBUTE_VALUE:
    case XML_ROLE_REQUIRED_ATTRIBUTE_VALUE:
      if (dtd.complete
	  && !defineAttribute(declElementType, declAttributeId, declAttributeIsCdata, 0))
	return XML_ERROR_NO_MEMORY;
      break;
    case XML_ROLE_DEFAULT_ATTRIBUTE_VALUE:
    case XML_ROLE_FIXED_ATTRIBUTE_VALUE:
      {
	const XML_Char *attVal;
	enum XML_Error result
	  = storeAttributeValue(parser, enc, declAttributeIsCdata,
				s + enc->minBytesPerChar,
			        next - enc->minBytesPerChar,
			        &dtd.pool);
	if (result)
	  return result;
	attVal = poolStart(&dtd.pool);
	poolFinish(&dtd.pool);
	if (dtd.complete
	    && !defineAttribute(declElementType, declAttributeId, declAttributeIsCdata, attVal))
	  return XML_ERROR_NO_MEMORY;
	break;
      }
    case XML_ROLE_ENTITY_VALUE:
      {
	enum XML_Error result = storeEntityValue(parser, enc,
						 s + enc->minBytesPerChar,
						 next - enc->minBytesPerChar);
	if (declEntity) {
	  declEntity->textPtr = poolStart(&dtd.pool);
	  declEntity->textLen = poolLength(&dtd.pool);
	  poolFinish(&dtd.pool);
	}
	else
	  poolDiscard(&dtd.pool);
	if (result != XML_ERROR_NONE)
	  return result;
      }
      break;
    case XML_ROLE_DOCTYPE_SYSTEM_ID:
      if (!dtd.standalone
#ifdef XML_DTD
	  && !paramEntityParsing
#endif /* XML_DTD */
	  && notStandaloneHandler
	  && !notStandaloneHandler(handlerArg))
	return XML_ERROR_NOT_STANDALONE;
      hadExternalDoctype = 1;
#ifndef XML_DTD
      break;
#else /* XML_DTD */
      if (!declEntity) {
	declEntity = (ENTITY *)lookup(&dtd.paramEntities,
				      externalSubsetName,
				      sizeof(ENTITY));
	if (!declEntity)
	  return XML_ERROR_NO_MEMORY;
      }
      /* fall through */
#endif /* XML_DTD */
    case XML_ROLE_ENTITY_SYSTEM_ID:
      if (declEntity) {
	declEntity->systemId = poolStoreString(&dtd.pool, enc,
	                                       s + enc->minBytesPerChar,
	  				       next - enc->minBytesPerChar);
	if (!declEntity->systemId)
	  return XML_ERROR_NO_MEMORY;
	declEntity->base = curBase;
	poolFinish(&dtd.pool);
      }
      break;
    case XML_ROLE_ENTITY_NOTATION_NAME:
      if (declEntity) {
	declEntity->notation = poolStoreString(&dtd.pool, enc, s, next);
	if (!declEntity->notation)
	  return XML_ERROR_NO_MEMORY;
	poolFinish(&dtd.pool);
	if (unparsedEntityDeclHandler) {
	  *eventEndPP = s;
	  unparsedEntityDeclHandler(handlerArg,
				    declEntity->name,
				    declEntity->base,
				    declEntity->systemId,
				    declEntity->publicId,
				    declEntity->notation);
	}

      }
      break;
    case XML_ROLE_GENERAL_ENTITY_NAME:
      {
	const XML_Char *name;
	if (XmlPredefinedEntityName(enc, s, next)) {
	  declEntity = 0;
	  break;
	}
	name = poolStoreString(&dtd.pool, enc, s, next);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	if (dtd.complete) {
	  declEntity = (ENTITY *)lookup(&dtd.generalEntities, name, sizeof(ENTITY));
	  if (!declEntity)
	    return XML_ERROR_NO_MEMORY;
	  if (declEntity->name != name) {
	    poolDiscard(&dtd.pool);
	    declEntity = 0;
	  }
	  else
	    poolFinish(&dtd.pool);
	}
	else {
	  poolDiscard(&dtd.pool);
	  declEntity = 0;
	}
      }
      break;
    case XML_ROLE_PARAM_ENTITY_NAME:
#ifdef XML_DTD
      if (dtd.complete) {
	const XML_Char *name = poolStoreString(&dtd.pool, enc, s, next);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	declEntity = (ENTITY *)lookup(&dtd.paramEntities, name, sizeof(ENTITY));
	if (!declEntity)
	  return XML_ERROR_NO_MEMORY;
	if (declEntity->name != name) {
	  poolDiscard(&dtd.pool);
	  declEntity = 0;
	}
	else
	  poolFinish(&dtd.pool);
      }
#else /* not XML_DTD */
      declEntity = 0;
#endif /* not XML_DTD */
      break;
    case XML_ROLE_NOTATION_NAME:
      declNotationPublicId = 0;
      declNotationName = 0;
      if (notationDeclHandler) {
	declNotationName = poolStoreString(&tempPool, enc, s, next);
	if (!declNotationName)
	  return XML_ERROR_NO_MEMORY;
	poolFinish(&tempPool);
      }
      break;
    case XML_ROLE_NOTATION_PUBLIC_ID:
      if (!XmlIsPublicId(enc, s, next, eventPP))
	return XML_ERROR_SYNTAX;
      if (declNotationName) {
	XML_Char *tem = poolStoreString(&tempPool,
	                                enc,
					s + enc->minBytesPerChar,
	  				next - enc->minBytesPerChar);
	if (!tem)
	  return XML_ERROR_NO_MEMORY;
	normalizePublicId(tem);
	declNotationPublicId = tem;
	poolFinish(&tempPool);
      }
      break;
    case XML_ROLE_NOTATION_SYSTEM_ID:
      if (declNotationName && notationDeclHandler) {
	const XML_Char *systemId
	  = poolStoreString(&tempPool, enc,
			    s + enc->minBytesPerChar,
	  		    next - enc->minBytesPerChar);
	if (!systemId)
	  return XML_ERROR_NO_MEMORY;
	*eventEndPP = s;
	notationDeclHandler(handlerArg,
			    declNotationName,
			    curBase,
			    systemId,
			    declNotationPublicId);
      }
      poolClear(&tempPool);
      break;
    case XML_ROLE_NOTATION_NO_SYSTEM_ID:
      if (declNotationPublicId && notationDeclHandler) {
	*eventEndPP = s;
	notationDeclHandler(handlerArg,
			    declNotationName,
			    curBase,
			    0,
			    declNotationPublicId);
      }
      poolClear(&tempPool);
      break;
    case XML_ROLE_ERROR:
      switch (tok) {
      case XML_TOK_PARAM_ENTITY_REF:
	return XML_ERROR_PARAM_ENTITY_REF;
      case XML_TOK_XML_DECL:
	return XML_ERROR_MISPLACED_XML_PI;
      default:
	return XML_ERROR_SYNTAX;
      }
#ifdef XML_DTD
    case XML_ROLE_IGNORE_SECT:
      {
	enum XML_Error result;
	if (defaultHandler)
	  reportDefault(parser, enc, s, next);
	result = doIgnoreSection(parser, enc, &next, end, nextPtr);
	if (!next) {
	  processor = ignoreSectionProcessor;
	  return result;
	}
      }
      break;
#endif /* XML_DTD */
    case XML_ROLE_GROUP_OPEN:
      if (prologState.level >= groupSize) {
	if (groupSize)
	  groupConnector = realloc(groupConnector, groupSize *= 2);
	else
	  groupConnector = malloc(groupSize = 32);
	if (!groupConnector)
	  return XML_ERROR_NO_MEMORY;
      }
      groupConnector[prologState.level] = 0;
      break;
    case XML_ROLE_GROUP_SEQUENCE:
      if (groupConnector[prologState.level] == '|')
	return XML_ERROR_SYNTAX;
      groupConnector[prologState.level] = ',';
      break;
    case XML_ROLE_GROUP_CHOICE:
      if (groupConnector[prologState.level] == ',')
	return XML_ERROR_SYNTAX;
      groupConnector[prologState.level] = '|';
      break;
    case XML_ROLE_PARAM_ENTITY_REF:
#ifdef XML_DTD
    case XML_ROLE_INNER_PARAM_ENTITY_REF:
      if (paramEntityParsing
	  && (dtd.complete || role == XML_ROLE_INNER_PARAM_ENTITY_REF)) {
	const XML_Char *name;
	ENTITY *entity;
	name = poolStoreString(&dtd.pool, enc,
				s + enc->minBytesPerChar,
				next - enc->minBytesPerChar);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	entity = (ENTITY *)lookup(&dtd.paramEntities, name, 0);
	poolDiscard(&dtd.pool);
	if (!entity) {
	  /* FIXME what to do if !dtd.complete? */
	  return XML_ERROR_UNDEFINED_ENTITY;
	}
	if (entity->open)
	  return XML_ERROR_RECURSIVE_ENTITY_REF;
	if (entity->textPtr) {
	  enum XML_Error result;
	  result = processInternalParamEntity(parser, entity);
	  if (result != XML_ERROR_NONE)
	    return result;
	  break;
	}
	if (role == XML_ROLE_INNER_PARAM_ENTITY_REF)
	  return XML_ERROR_PARAM_ENTITY_REF;
	if (externalEntityRefHandler) {
	  dtd.complete = 0;
	  entity->open = 1;
	  if (!externalEntityRefHandler(externalEntityRefHandlerArg,
					0,
					entity->base,
					entity->systemId,
					entity->publicId)) {
	    entity->open = 0;
	    return XML_ERROR_EXTERNAL_ENTITY_HANDLING;
	  }
	  entity->open = 0;
	  if (dtd.complete)
	    break;
	}
      }
#endif /* XML_DTD */
      if (!dtd.standalone
	  && notStandaloneHandler
	  && !notStandaloneHandler(handlerArg))
	return XML_ERROR_NOT_STANDALONE;
      dtd.complete = 0;
      if (defaultHandler)
	reportDefault(parser, enc, s, next);
      break;
    case XML_ROLE_NONE:
      switch (tok) {
      case XML_TOK_PI:
	if (!reportProcessingInstruction(parser, enc, s, next))
	  return XML_ERROR_NO_MEMORY;
	break;
      case XML_TOK_COMMENT:
	if (!reportComment(parser, enc, s, next))
	  return XML_ERROR_NO_MEMORY;
	break;
      }
      break;
    }
    if (defaultHandler) {
      switch (tok) {
      case XML_TOK_PI:
      case XML_TOK_COMMENT:
      case XML_TOK_BOM:
      case XML_TOK_XML_DECL:
#ifdef XML_DTD
      case XML_TOK_IGNORE_SECT:
#endif /* XML_DTD */
      case XML_TOK_PARAM_ENTITY_REF:
	break;
      default:
	if (role != XML_ROLE_IGNORE_SECT)
	  reportDefault(parser, enc, s, next);
      }
    }
    s = next;
    tok = XmlPrologTok(enc, s, end, &next);
  }
  /* not reached */
}

static
enum XML_Error epilogProcessor(XML_Parser parser,
			       const char *s,
			       const char *end,
			       const char **nextPtr)
{
  processor = epilogProcessor;
  eventPtr = s;
  for (;;) {
    const char *next;
    int tok = XmlPrologTok(encoding, s, end, &next);
    eventEndPtr = next;
    switch (tok) {
    case -XML_TOK_PROLOG_S:
      if (defaultHandler) {
	eventEndPtr = end;
	reportDefault(parser, encoding, s, end);
      }
      /* fall through */
    case XML_TOK_NONE:
      if (nextPtr)
	*nextPtr = end;
      return XML_ERROR_NONE;
    case XML_TOK_PROLOG_S:
      if (defaultHandler)
	reportDefault(parser, encoding, s, next);
      break;
    case XML_TOK_PI:
      if (!reportProcessingInstruction(parser, encoding, s, next))
	return XML_ERROR_NO_MEMORY;
      break;
    case XML_TOK_COMMENT:
      if (!reportComment(parser, encoding, s, next))
	return XML_ERROR_NO_MEMORY;
      break;
    case XML_TOK_INVALID:
      eventPtr = next;
      return XML_ERROR_INVALID_TOKEN;
    case XML_TOK_PARTIAL:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_UNCLOSED_TOKEN;
    case XML_TOK_PARTIAL_CHAR:
      if (nextPtr) {
	*nextPtr = s;
	return XML_ERROR_NONE;
      }
      return XML_ERROR_PARTIAL_CHAR;
    default:
      return XML_ERROR_JUNK_AFTER_DOC_ELEMENT;
    }
    eventPtr = s = next;
  }
}

#ifdef XML_DTD

static enum XML_Error
processInternalParamEntity(XML_Parser parser, ENTITY *entity)
{
  const char *s, *end, *next;
  int tok;
  enum XML_Error result;
  OPEN_INTERNAL_ENTITY openEntity;
  entity->open = 1;
  openEntity.next = openInternalEntities;
  openInternalEntities = &openEntity;
  openEntity.entity = entity;
  openEntity.internalEventPtr = 0;
  openEntity.internalEventEndPtr = 0;
  s = (char *)entity->textPtr;
  end = (char *)(entity->textPtr + entity->textLen);
  tok = XmlPrologTok(internalEncoding, s, end, &next);
  result = doProlog(parser, internalEncoding, s, end, tok, next, 0);
  entity->open = 0;
  openInternalEntities = openEntity.next;
  return result;
}

#endif /* XML_DTD */

static
enum XML_Error errorProcessor(XML_Parser parser,
			      const char *s,
			      const char *end,
			      const char **nextPtr)
{
  return errorCode;
}

static enum XML_Error
storeAttributeValue(XML_Parser parser, const ENCODING *enc, int isCdata,
		    const char *ptr, const char *end,
		    STRING_POOL *pool)
{
  enum XML_Error result = appendAttributeValue(parser, enc, isCdata, ptr, end, pool);
  if (result)
    return result;
  if (!isCdata && poolLength(pool) && poolLastChar(pool) == 0x20)
    poolChop(pool);
  if (!poolAppendChar(pool, XML_T('\0')))
    return XML_ERROR_NO_MEMORY;
  return XML_ERROR_NONE;
}

static enum XML_Error
appendAttributeValue(XML_Parser parser, const ENCODING *enc, int isCdata,
		     const char *ptr, const char *end,
		     STRING_POOL *pool)
{
  for (;;) {
    const char *next;
    int tok = XmlAttributeValueTok(enc, ptr, end, &next);
    switch (tok) {
    case XML_TOK_NONE:
      return XML_ERROR_NONE;
    case XML_TOK_INVALID:
      if (enc == encoding)
	eventPtr = next;
      return XML_ERROR_INVALID_TOKEN;
    case XML_TOK_PARTIAL:
      if (enc == encoding)
	eventPtr = ptr;
      return XML_ERROR_INVALID_TOKEN;
    case XML_TOK_CHAR_REF:
      {
	XML_Char buf[XML_ENCODE_MAX];
	int i;
	int n = XmlCharRefNumber(enc, ptr);
	if (n < 0) {
	  if (enc == encoding)
	    eventPtr = ptr;
      	  return XML_ERROR_BAD_CHAR_REF;
	}
	if (!isCdata
	    && n == 0x20 /* space */
	    && (poolLength(pool) == 0 || poolLastChar(pool) == 0x20))
	  break;
	n = XmlEncode(n, (ICHAR *)buf);
	if (!n) {
	  if (enc == encoding)
	    eventPtr = ptr;
	  return XML_ERROR_BAD_CHAR_REF;
	}
	for (i = 0; i < n; i++) {
	  if (!poolAppendChar(pool, buf[i]))
	    return XML_ERROR_NO_MEMORY;
	}
      }
      break;
    case XML_TOK_DATA_CHARS:
      if (!poolAppend(pool, enc, ptr, next))
	return XML_ERROR_NO_MEMORY;
      break;
      break;
    case XML_TOK_TRAILING_CR:
      next = ptr + enc->minBytesPerChar;
      /* fall through */
    case XML_TOK_ATTRIBUTE_VALUE_S:
    case XML_TOK_DATA_NEWLINE:
      if (!isCdata && (poolLength(pool) == 0 || poolLastChar(pool) == 0x20))
	break;
      if (!poolAppendChar(pool, 0x20))
	return XML_ERROR_NO_MEMORY;
      break;
    case XML_TOK_ENTITY_REF:
      {
	const XML_Char *name;
	ENTITY *entity;
	XML_Char ch = XmlPredefinedEntityName(enc,
					      ptr + enc->minBytesPerChar,
					      next - enc->minBytesPerChar);
	if (ch) {
	  if (!poolAppendChar(pool, ch))
  	    return XML_ERROR_NO_MEMORY;
	  break;
	}
	name = poolStoreString(&temp2Pool, enc,
			       ptr + enc->minBytesPerChar,
			       next - enc->minBytesPerChar);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	entity = (ENTITY *)lookup(&dtd.generalEntities, name, 0);
	poolDiscard(&temp2Pool);
	if (!entity) {
	  if (dtd.complete) {
	    if (enc == encoding)
	      eventPtr = ptr;
	    return XML_ERROR_UNDEFINED_ENTITY;
	  }
	}
	else if (entity->open) {
	  if (enc == encoding)
	    eventPtr = ptr;
	  return XML_ERROR_RECURSIVE_ENTITY_REF;
	}
	else if (entity->notation) {
	  if (enc == encoding)
	    eventPtr = ptr;
	  return XML_ERROR_BINARY_ENTITY_REF;
	}
	else if (!entity->textPtr) {
	  if (enc == encoding)
	    eventPtr = ptr;
  	  return XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF;
	}
	else {
	  enum XML_Error result;
	  const XML_Char *textEnd = entity->textPtr + entity->textLen;
	  entity->open = 1;
	  result = appendAttributeValue(parser, internalEncoding, isCdata, (char *)entity->textPtr, (char *)textEnd, pool);
	  entity->open = 0;
	  if (result)
	    return result;
	}
      }
      break;
    default:
      abort();
    }
    ptr = next;
  }
  /* not reached */
}

static
enum XML_Error storeEntityValue(XML_Parser parser,
				const ENCODING *enc,
				const char *entityTextPtr,
				const char *entityTextEnd)
{
  STRING_POOL *pool = &(dtd.pool);
  for (;;) {
    const char *next;
    int tok = XmlEntityValueTok(enc, entityTextPtr, entityTextEnd, &next);
    switch (tok) {
    case XML_TOK_PARAM_ENTITY_REF:
#ifdef XML_DTD
      if (parentParser || enc != encoding) {
	enum XML_Error result;
	const XML_Char *name;
	ENTITY *entity;
	name = poolStoreString(&tempPool, enc,
			       entityTextPtr + enc->minBytesPerChar,
			       next - enc->minBytesPerChar);
	if (!name)
	  return XML_ERROR_NO_MEMORY;
	entity = (ENTITY *)lookup(&dtd.paramEntities, name, 0);
	poolDiscard(&tempPool);
	if (!entity) {
	  if (enc == encoding)
	    eventPtr = entityTextPtr;
	  return XML_ERROR_UNDEFINED_ENTITY;
	}
	if (entity->open) {
	  if (enc == encoding)
	    eventPtr = entityTextPtr;
	  return XML_ERROR_RECURSIVE_ENTITY_REF;
	}
	if (entity->systemId) {
	  if (enc == encoding)
	    eventPtr = entityTextPtr;
	  return XML_ERROR_PARAM_ENTITY_REF;
	}
	entity->open = 1;
	result = storeEntityValue(parser,
				  internalEncoding,
				  (char *)entity->textPtr,
				  (char *)(entity->textPtr + entity->textLen));
	entity->open = 0;
	if (result)
	  return result;
	break;
      }
#endif /* XML_DTD */
      eventPtr = entityTextPtr;
      return XML_ERROR_SYNTAX;
    case XML_TOK_NONE:
      return XML_ERROR_NONE;
    case XML_TOK_ENTITY_REF:
    case XML_TOK_DATA_CHARS:
      if (!poolAppend(pool, enc, entityTextPtr, next))
	return XML_ERROR_NO_MEMORY;
      break;
    case XML_TOK_TRAILING_CR:
      next = entityTextPtr + enc->minBytesPerChar;
      /* fall through */
    case XML_TOK_DATA_NEWLINE:
      if (pool->end == pool->ptr && !poolGrow(pool))
	return XML_ERROR_NO_MEMORY;
      *(pool->ptr)++ = 0xA;
      break;
    case XML_TOK_CHAR_REF:
      {
	XML_Char buf[XML_ENCODE_MAX];
	int i;
	int n = XmlCharRefNumber(enc, entityTextPtr);
	if (n < 0) {
	  if (enc == encoding)
	    eventPtr = entityTextPtr;
	  return XML_ERROR_BAD_CHAR_REF;
	}
	n = XmlEncode(n, (ICHAR *)buf);
	if (!n) {
	  if (enc == encoding)
	    eventPtr = entityTextPtr;
	  return XML_ERROR_BAD_CHAR_REF;
	}
	for (i = 0; i < n; i++) {
	  if (pool->end == pool->ptr && !poolGrow(pool))
	    return XML_ERROR_NO_MEMORY;
	  *(pool->ptr)++ = buf[i];
	}
      }
      break;
    case XML_TOK_PARTIAL:
      if (enc == encoding)
	eventPtr = entityTextPtr;
      return XML_ERROR_INVALID_TOKEN;
    case XML_TOK_INVALID:
      if (enc == encoding)
	eventPtr = next;
      return XML_ERROR_INVALID_TOKEN;
    default:
      abort();
    }
    entityTextPtr = next;
  }
  /* not reached */
}

static void
normalizeLines(XML_Char *s)
{
  XML_Char *p;
  for (;; s++) {
    if (*s == XML_T('\0'))
      return;
    if (*s == 0xD)
      break;
  }
  p = s;
  do {
    if (*s == 0xD) {
      *p++ = 0xA;
      if (*++s == 0xA)
        s++;
    }
    else
      *p++ = *s++;
  } while (*s);
  *p = XML_T('\0');
}

static int
reportProcessingInstruction(XML_Parser parser, const ENCODING *enc, const char *start, const char *end)
{
  const XML_Char *target;
  XML_Char *data;
  const char *tem;
  if (!processingInstructionHandler) {
    if (defaultHandler)
      reportDefault(parser, enc, start, end);
    return 1;
  }
  start += enc->minBytesPerChar * 2;
  tem = start + XmlNameLength(enc, start);
  target = poolStoreString(&tempPool, enc, start, tem);
  if (!target)
    return 0;
  poolFinish(&tempPool);
  data = poolStoreString(&tempPool, enc,
			XmlSkipS(enc, tem),
			end - enc->minBytesPerChar*2);
  if (!data)
    return 0;
  normalizeLines(data);
  processingInstructionHandler(handlerArg, target, data);
  poolClear(&tempPool);
  return 1;
}

static int
reportComment(XML_Parser parser, const ENCODING *enc, const char *start, const char *end)
{
  XML_Char *data;
  if (!commentHandler) {
    if (defaultHandler)
      reportDefault(parser, enc, start, end);
    return 1;
  }
  data = poolStoreString(&tempPool,
                         enc,
                         start + enc->minBytesPerChar * 4, 
			 end - enc->minBytesPerChar * 3);
  if (!data)
    return 0;
  normalizeLines(data);
  commentHandler(handlerArg, data);
  poolClear(&tempPool);
  return 1;
}

static void
reportDefault(XML_Parser parser, const ENCODING *enc, const char *s, const char *end)
{
  if (MUST_CONVERT(enc, s)) {
    const char **eventPP;
    const char **eventEndPP;
    if (enc == encoding) {
      eventPP = &eventPtr;
      eventEndPP = &eventEndPtr;
    }
    else {
      eventPP = &(openInternalEntities->internalEventPtr);
      eventEndPP = &(openInternalEntities->internalEventEndPtr);
    }
    do {
      ICHAR *dataPtr = (ICHAR *)dataBuf;
      XmlConvert(enc, &s, end, &dataPtr, (ICHAR *)dataBufEnd);
      *eventEndPP = s;
      defaultHandler(handlerArg, dataBuf, dataPtr - (ICHAR *)dataBuf);
      *eventPP = s;
    } while (s != end);
  }
  else
    defaultHandler(handlerArg, (XML_Char *)s, (XML_Char *)end - (XML_Char *)s);
}


static int
defineAttribute(ELEMENT_TYPE *type, ATTRIBUTE_ID *attId, int isCdata, const XML_Char *value)
{
  DEFAULT_ATTRIBUTE *att;
  if (value) {
    /* The handling of default attributes gets messed up if we have
       a default which duplicates a non-default. */
    int i;
    for (i = 0; i < type->nDefaultAtts; i++)
      if (attId == type->defaultAtts[i].id)
	return 1;
  }
  if (type->nDefaultAtts == type->allocDefaultAtts) {
    if (type->allocDefaultAtts == 0) {
      type->allocDefaultAtts = 8;
      type->defaultAtts = malloc(type->allocDefaultAtts*sizeof(DEFAULT_ATTRIBUTE));
    }
    else {
      type->allocDefaultAtts *= 2;
      type->defaultAtts = realloc(type->defaultAtts,
				  type->allocDefaultAtts*sizeof(DEFAULT_ATTRIBUTE));
    }
    if (!type->defaultAtts)
      return 0;
  }
  att = type->defaultAtts + type->nDefaultAtts;
  att->id = attId;
  att->value = value;
  att->isCdata = isCdata;
  if (!isCdata)
    attId->maybeTokenized = 1;
  type->nDefaultAtts += 1;
  return 1;
}

static int setElementTypePrefix(XML_Parser parser, ELEMENT_TYPE *elementType)
{
  const XML_Char *name;
  for (name = elementType->name; *name; name++) {
    if (*name == XML_T(':')) {
      PREFIX *prefix;
      const XML_Char *s;
      for (s = elementType->name; s != name; s++) {
	if (!poolAppendChar(&dtd.pool, *s))
	  return 0;
      }
      if (!poolAppendChar(&dtd.pool, XML_T('\0')))
	return 0;
      prefix = (PREFIX *)lookup(&dtd.prefixes, poolStart(&dtd.pool), sizeof(PREFIX));
      if (!prefix)
	return 0;
      if (prefix->name == poolStart(&dtd.pool))
	poolFinish(&dtd.pool);
      else
	poolDiscard(&dtd.pool);
      elementType->prefix = prefix;

    }
  }
  return 1;
}

static ATTRIBUTE_ID *
getAttributeId(XML_Parser parser, const ENCODING *enc, const char *start, const char *end)
{
  ATTRIBUTE_ID *id;
  const XML_Char *name;
  if (!poolAppendChar(&dtd.pool, XML_T('\0')))
    return 0;
  name = poolStoreString(&dtd.pool, enc, start, end);
  if (!name)
    return 0;
  ++name;
  id = (ATTRIBUTE_ID *)lookup(&dtd.attributeIds, name, sizeof(ATTRIBUTE_ID));
  if (!id)
    return 0;
  if (id->name != name)
    poolDiscard(&dtd.pool);
  else {
    poolFinish(&dtd.pool);
    if (!ns)
      ;
    else if (name[0] == 'x'
	&& name[1] == 'm'
	&& name[2] == 'l'
	&& name[3] == 'n'
	&& name[4] == 's'
	&& (name[5] == XML_T('\0') || name[5] == XML_T(':'))) {
      if (name[5] == '\0')
	id->prefix = &dtd.defaultPrefix;
      else
	id->prefix = (PREFIX *)lookup(&dtd.prefixes, name + 6, sizeof(PREFIX));
      id->xmlns = 1;
    }
    else {
      int i;
      for (i = 0; name[i]; i++) {
	if (name[i] == XML_T(':')) {
	  int j;
	  for (j = 0; j < i; j++) {
	    if (!poolAppendChar(&dtd.pool, name[j]))
	      return 0;
	  }
	  if (!poolAppendChar(&dtd.pool, XML_T('\0')))
	    return 0;
	  id->prefix = (PREFIX *)lookup(&dtd.prefixes, poolStart(&dtd.pool), sizeof(PREFIX));
	  if (id->prefix->name == poolStart(&dtd.pool))
	    poolFinish(&dtd.pool);
	  else
	    poolDiscard(&dtd.pool);
	  break;
	}
      }
    }
  }
  return id;
}

#define CONTEXT_SEP XML_T('\f')

static
const XML_Char *getContext(XML_Parser parser)
{
  HASH_TABLE_ITER iter;
  int needSep = 0;

  if (dtd.defaultPrefix.binding) {
    int i;
    int len;
    if (!poolAppendChar(&tempPool, XML_T('=')))
      return 0;
    len = dtd.defaultPrefix.binding->uriLen;
    if (namespaceSeparator != XML_T('\0'))
      len--;
    for (i = 0; i < len; i++)
      if (!poolAppendChar(&tempPool, dtd.defaultPrefix.binding->uri[i]))
  	return 0;
    needSep = 1;
  }

  hashTableIterInit(&iter, &(dtd.prefixes));
  for (;;) {
    int i;
    int len;
    const XML_Char *s;
    PREFIX *prefix = (PREFIX *)hashTableIterNext(&iter);
    if (!prefix)
      break;
    if (!prefix->binding)
      continue;
    if (needSep && !poolAppendChar(&tempPool, CONTEXT_SEP))
      return 0;
    for (s = prefix->name; *s; s++)
      if (!poolAppendChar(&tempPool, *s))
        return 0;
    if (!poolAppendChar(&tempPool, XML_T('=')))
      return 0;
    len = prefix->binding->uriLen;
    if (namespaceSeparator != XML_T('\0'))
      len--;
    for (i = 0; i < len; i++)
      if (!poolAppendChar(&tempPool, prefix->binding->uri[i]))
        return 0;
    needSep = 1;
  }


  hashTableIterInit(&iter, &(dtd.generalEntities));
  for (;;) {
    const XML_Char *s;
    ENTITY *e = (ENTITY *)hashTableIterNext(&iter);
    if (!e)
      break;
    if (!e->open)
      continue;
    if (needSep && !poolAppendChar(&tempPool, CONTEXT_SEP))
      return 0;
    for (s = e->name; *s; s++)
      if (!poolAppendChar(&tempPool, *s))
        return 0;
    needSep = 1;
  }

  if (!poolAppendChar(&tempPool, XML_T('\0')))
    return 0;
  return tempPool.start;
}

static
int setContext(XML_Parser parser, const XML_Char *context)
{
  const XML_Char *s = context;

  while (*context != XML_T('\0')) {
    if (*s == CONTEXT_SEP || *s == XML_T('\0')) {
      ENTITY *e;
      if (!poolAppendChar(&tempPool, XML_T('\0')))
	return 0;
      e = (ENTITY *)lookup(&dtd.generalEntities, poolStart(&tempPool), 0);
      if (e)
	e->open = 1;
      if (*s != XML_T('\0'))
	s++;
      context = s;
      poolDiscard(&tempPool);
    }
    else if (*s == '=') {
      PREFIX *prefix;
      if (poolLength(&tempPool) == 0)
	prefix = &dtd.defaultPrefix;
      else {
	if (!poolAppendChar(&tempPool, XML_T('\0')))
	  return 0;
	prefix = (PREFIX *)lookup(&dtd.prefixes, poolStart(&tempPool), sizeof(PREFIX));
	if (!prefix)
	  return 0;
        if (prefix->name == poolStart(&tempPool))
          poolFinish(&tempPool);
        else
	  poolDiscard(&tempPool);
      }
      for (context = s + 1; *context != CONTEXT_SEP && *context != XML_T('\0'); context++)
        if (!poolAppendChar(&tempPool, *context))
          return 0;
      if (!poolAppendChar(&tempPool, XML_T('\0')))
	return 0;
      if (!addBinding(parser, prefix, 0, poolStart(&tempPool), &inheritedBindings))
	return 0;
      poolDiscard(&tempPool);
      if (*context != XML_T('\0'))
	++context;
      s = context;
    }
    else {
      if (!poolAppendChar(&tempPool, *s))
	return 0;
      s++;
    }
  }
  return 1;
}


static
void normalizePublicId(XML_Char *publicId)
{
  XML_Char *p = publicId;
  XML_Char *s;
  for (s = publicId; *s; s++) {
    switch (*s) {
    case 0x20:
    case 0xD:
    case 0xA:
      if (p != publicId && p[-1] != 0x20)
	*p++ = 0x20;
      break;
    default:
      *p++ = *s;
    }
  }
  if (p != publicId && p[-1] == 0x20)
    --p;
  *p = XML_T('\0');
}

static int dtdInit(DTD *p)
{
  poolInit(&(p->pool));
  hashTableInit(&(p->generalEntities));
  hashTableInit(&(p->elementTypes));
  hashTableInit(&(p->attributeIds));
  hashTableInit(&(p->prefixes));
  p->complete = 1;
  p->standalone = 0;
#ifdef XML_DTD
  hashTableInit(&(p->paramEntities));
#endif /* XML_DTD */
  p->defaultPrefix.name = 0;
  p->defaultPrefix.binding = 0;
  return 1;
}

#ifdef XML_DTD

static void dtdSwap(DTD *p1, DTD *p2)
{
  DTD tem;
  memcpy(&tem, p1, sizeof(DTD));
  memcpy(p1, p2, sizeof(DTD));
  memcpy(p2, &tem, sizeof(DTD));
}

#endif /* XML_DTD */

static void dtdDestroy(DTD *p)
{
  HASH_TABLE_ITER iter;
  hashTableIterInit(&iter, &(p->elementTypes));
  for (;;) {
    ELEMENT_TYPE *e = (ELEMENT_TYPE *)hashTableIterNext(&iter);
    if (!e)
      break;
    if (e->allocDefaultAtts != 0)
      free(e->defaultAtts);
  }
  hashTableDestroy(&(p->generalEntities));
#ifdef XML_DTD
  hashTableDestroy(&(p->paramEntities));
#endif /* XML_DTD */
  hashTableDestroy(&(p->elementTypes));
  hashTableDestroy(&(p->attributeIds));
  hashTableDestroy(&(p->prefixes));
  poolDestroy(&(p->pool));
}

/* Do a deep copy of the DTD.  Return 0 for out of memory; non-zero otherwise.
The new DTD has already been initialized. */

static int dtdCopy(DTD *newDtd, const DTD *oldDtd)
{
  HASH_TABLE_ITER iter;

  /* Copy the prefix table. */

  hashTableIterInit(&iter, &(oldDtd->prefixes));
  for (;;) {
    const XML_Char *name;
    const PREFIX *oldP = (PREFIX *)hashTableIterNext(&iter);
    if (!oldP)
      break;
    name = poolCopyString(&(newDtd->pool), oldP->name);
    if (!name)
      return 0;
    if (!lookup(&(newDtd->prefixes), name, sizeof(PREFIX)))
      return 0;
  }

  hashTableIterInit(&iter, &(oldDtd->attributeIds));

  /* Copy the attribute id table. */

  for (;;) {
    ATTRIBUTE_ID *newA;
    const XML_Char *name;
    const ATTRIBUTE_ID *oldA = (ATTRIBUTE_ID *)hashTableIterNext(&iter);

    if (!oldA)
      break;
    /* Remember to allocate the scratch byte before the name. */
    if (!poolAppendChar(&(newDtd->pool), XML_T('\0')))
      return 0;
    name = poolCopyString(&(newDtd->pool), oldA->name);
    if (!name)
      return 0;
    ++name;
    newA = (ATTRIBUTE_ID *)lookup(&(newDtd->attributeIds), name, sizeof(ATTRIBUTE_ID));
    if (!newA)
      return 0;
    newA->maybeTokenized = oldA->maybeTokenized;
    if (oldA->prefix) {
      newA->xmlns = oldA->xmlns;
      if (oldA->prefix == &oldDtd->defaultPrefix)
	newA->prefix = &newDtd->defaultPrefix;
      else
	newA->prefix = (PREFIX *)lookup(&(newDtd->prefixes), oldA->prefix->name, 0);
    }
  }

  /* Copy the element type table. */

  hashTableIterInit(&iter, &(oldDtd->elementTypes));

  for (;;) {
    int i;
    ELEMENT_TYPE *newE;
    const XML_Char *name;
    const ELEMENT_TYPE *oldE = (ELEMENT_TYPE *)hashTableIterNext(&iter);
    if (!oldE)
      break;
    name = poolCopyString(&(newDtd->pool), oldE->name);
    if (!name)
      return 0;
    newE = (ELEMENT_TYPE *)lookup(&(newDtd->elementTypes), name, sizeof(ELEMENT_TYPE));
    if (!newE)
      return 0;
    if (oldE->nDefaultAtts) {
      newE->defaultAtts = (DEFAULT_ATTRIBUTE *)malloc(oldE->nDefaultAtts * sizeof(DEFAULT_ATTRIBUTE));
      if (!newE->defaultAtts)
	return 0;
    }
    newE->allocDefaultAtts = newE->nDefaultAtts = oldE->nDefaultAtts;
    if (oldE->prefix)
      newE->prefix = (PREFIX *)lookup(&(newDtd->prefixes), oldE->prefix->name, 0);
    for (i = 0; i < newE->nDefaultAtts; i++) {
      newE->defaultAtts[i].id = (ATTRIBUTE_ID *)lookup(&(newDtd->attributeIds), oldE->defaultAtts[i].id->name, 0);
      newE->defaultAtts[i].isCdata = oldE->defaultAtts[i].isCdata;
      if (oldE->defaultAtts[i].value) {
	newE->defaultAtts[i].value = poolCopyString(&(newDtd->pool), oldE->defaultAtts[i].value);
	if (!newE->defaultAtts[i].value)
  	  return 0;
      }
      else
	newE->defaultAtts[i].value = 0;
    }
  }

  /* Copy the entity tables. */
  if (!copyEntityTable(&(newDtd->generalEntities),
		       &(newDtd->pool),
		       &(oldDtd->generalEntities)))
      return 0;

#ifdef XML_DTD
  if (!copyEntityTable(&(newDtd->paramEntities),
		       &(newDtd->pool),
		       &(oldDtd->paramEntities)))
      return 0;
#endif /* XML_DTD */

  newDtd->complete = oldDtd->complete;
  newDtd->standalone = oldDtd->standalone;
  return 1;
}

static int copyEntityTable(HASH_TABLE *newTable,
			   STRING_POOL *newPool,
			   const HASH_TABLE *oldTable)
{
  HASH_TABLE_ITER iter;
  const XML_Char *cachedOldBase = 0;
  const XML_Char *cachedNewBase = 0;

  hashTableIterInit(&iter, oldTable);

  for (;;) {
    ENTITY *newE;
    const XML_Char *name;
    const ENTITY *oldE = (ENTITY *)hashTableIterNext(&iter);
    if (!oldE)
      break;
    name = poolCopyString(newPool, oldE->name);
    if (!name)
      return 0;
    newE = (ENTITY *)lookup(newTable, name, sizeof(ENTITY));
    if (!newE)
      return 0;
    if (oldE->systemId) {
      const XML_Char *tem = poolCopyString(newPool, oldE->systemId);
      if (!tem)
	return 0;
      newE->systemId = tem;
      if (oldE->base) {
	if (oldE->base == cachedOldBase)
	  newE->base = cachedNewBase;
	else {
	  cachedOldBase = oldE->base;
	  tem = poolCopyString(newPool, cachedOldBase);
	  if (!tem)
	    return 0;
	  cachedNewBase = newE->base = tem;
	}
      }
    }
    else {
      const XML_Char *tem = poolCopyStringN(newPool, oldE->textPtr, oldE->textLen);
      if (!tem)
	return 0;
      newE->textPtr = tem;
      newE->textLen = oldE->textLen;
    }
    if (oldE->notation) {
      const XML_Char *tem = poolCopyString(newPool, oldE->notation);
      if (!tem)
	return 0;
      newE->notation = tem;
    }
  }
  return 1;
}

static
void poolInit(STRING_POOL *pool)
{
  pool->blocks = 0;
  pool->freeBlocks = 0;
  pool->start = 0;
  pool->ptr = 0;
  pool->end = 0;
}

static
void poolClear(STRING_POOL *pool)
{
  if (!pool->freeBlocks)
    pool->freeBlocks = pool->blocks;
  else {
    BLOCK *p = pool->blocks;
    while (p) {
      BLOCK *tem = p->next;
      p->next = pool->freeBlocks;
      pool->freeBlocks = p;
      p = tem;
    }
  }
  pool->blocks = 0;
  pool->start = 0;
  pool->ptr = 0;
  pool->end = 0;
}

static
void poolDestroy(STRING_POOL *pool)
{
  BLOCK *p = pool->blocks;
  while (p) {
    BLOCK *tem = p->next;
    free(p);
    p = tem;
  }
  pool->blocks = 0;
  p = pool->freeBlocks;
  while (p) {
    BLOCK *tem = p->next;
    free(p);
    p = tem;
  }
  pool->freeBlocks = 0;
  pool->ptr = 0;
  pool->start = 0;
  pool->end = 0;
}

static
XML_Char *poolAppend(STRING_POOL *pool, const ENCODING *enc,
		     const char *ptr, const char *end)
{
  if (!pool->ptr && !poolGrow(pool))
    return 0;
  for (;;) {
    XmlConvert(enc, &ptr, end, (ICHAR **)&(pool->ptr), (ICHAR *)pool->end);
    if (ptr == end)
      break;
    if (!poolGrow(pool))
      return 0;
  }
  return pool->start;
}

static const XML_Char *poolCopyString(STRING_POOL *pool, const XML_Char *s)
{
  do {
    if (!poolAppendChar(pool, *s))
      return 0;
  } while (*s++);
  s = pool->start;
  poolFinish(pool);
  return s;
}

static const XML_Char *poolCopyStringN(STRING_POOL *pool, const XML_Char *s, int n)
{
  if (!pool->ptr && !poolGrow(pool))
    return 0;
  for (; n > 0; --n, s++) {
    if (!poolAppendChar(pool, *s))
      return 0;

  }
  s = pool->start;
  poolFinish(pool);
  return s;
}

static
XML_Char *poolStoreString(STRING_POOL *pool, const ENCODING *enc,
			  const char *ptr, const char *end)
{
  if (!poolAppend(pool, enc, ptr, end))
    return 0;
  if (pool->ptr == pool->end && !poolGrow(pool))
    return 0;
  *(pool->ptr)++ = 0;
  return pool->start;
}

static
int poolGrow(STRING_POOL *pool)
{
  if (pool->freeBlocks) {
    if (pool->start == 0) {
      pool->blocks = pool->freeBlocks;
      pool->freeBlocks = pool->freeBlocks->next;
      pool->blocks->next = 0;
      pool->start = pool->blocks->s;
      pool->end = pool->start + pool->blocks->size;
      pool->ptr = pool->start;
      return 1;
    }
    if (pool->end - pool->start < pool->freeBlocks->size) {
      BLOCK *tem = pool->freeBlocks->next;
      pool->freeBlocks->next = pool->blocks;
      pool->blocks = pool->freeBlocks;
      pool->freeBlocks = tem;
      memcpy(pool->blocks->s, pool->start, (pool->end - pool->start) * sizeof(XML_Char));
      pool->ptr = pool->blocks->s + (pool->ptr - pool->start);
      pool->start = pool->blocks->s;
      pool->end = pool->start + pool->blocks->size;
      return 1;
    }
  }
  if (pool->blocks && pool->start == pool->blocks->s) {
    int blockSize = (pool->end - pool->start)*2;
    pool->blocks = realloc(pool->blocks, offsetof(BLOCK, s) + blockSize * sizeof(XML_Char));
    if (!pool->blocks)
      return 0;
    pool->blocks->size = blockSize;
    pool->ptr = pool->blocks->s + (pool->ptr - pool->start);
    pool->start = pool->blocks->s;
    pool->end = pool->start + blockSize;
  }
  else {
    BLOCK *tem;
    int blockSize = pool->end - pool->start;
    if (blockSize < INIT_BLOCK_SIZE)
      blockSize = INIT_BLOCK_SIZE;
    else
      blockSize *= 2;
    tem = malloc(offsetof(BLOCK, s) + blockSize * sizeof(XML_Char));
    if (!tem)
      return 0;
    tem->size = blockSize;
    tem->next = pool->blocks;
    pool->blocks = tem;
    memcpy(tem->s, pool->start, (pool->ptr - pool->start) * sizeof(XML_Char));
    pool->ptr = tem->s + (pool->ptr - pool->start);
    pool->start = tem->s;
    pool->end = tem->s + blockSize;
  }
  return 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\latin1tab.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

/* 0x80 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x84 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x88 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x8C */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x90 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x94 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x98 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0x9C */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0xA0 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0xA4 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0xA8 */ BT_OTHER, BT_OTHER, BT_NMSTRT, BT_OTHER,
/* 0xAC */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0xB0 */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0xB4 */ BT_OTHER, BT_NMSTRT, BT_OTHER, BT_NAME,
/* 0xB8 */ BT_OTHER, BT_OTHER, BT_NMSTRT, BT_OTHER,
/* 0xBC */ BT_OTHER, BT_OTHER, BT_OTHER, BT_OTHER,
/* 0xC0 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xC4 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xC8 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xCC */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xD0 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xD4 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_OTHER,
/* 0xD8 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xDC */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xE0 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xE4 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xE8 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xEC */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xF0 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xF4 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_OTHER,
/* 0xF8 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0xFC */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\iasciitab.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

/* Like asciitab.h, except that 0xD has code BT_S rather than BT_CR */
/* 0x00 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x04 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x08 */ BT_NONXML, BT_S, BT_LF, BT_NONXML,
/* 0x0C */ BT_NONXML, BT_S, BT_NONXML, BT_NONXML,
/* 0x10 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x14 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x18 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x1C */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0x20 */ BT_S, BT_EXCL, BT_QUOT, BT_NUM,
/* 0x24 */ BT_OTHER, BT_PERCNT, BT_AMP, BT_APOS,
/* 0x28 */ BT_LPAR, BT_RPAR, BT_AST, BT_PLUS,
/* 0x2C */ BT_COMMA, BT_MINUS, BT_NAME, BT_SOL,
/* 0x30 */ BT_DIGIT, BT_DIGIT, BT_DIGIT, BT_DIGIT,
/* 0x34 */ BT_DIGIT, BT_DIGIT, BT_DIGIT, BT_DIGIT,
/* 0x38 */ BT_DIGIT, BT_DIGIT, BT_COLON, BT_SEMI,
/* 0x3C */ BT_LT, BT_EQUALS, BT_GT, BT_QUEST,
/* 0x40 */ BT_OTHER, BT_HEX, BT_HEX, BT_HEX,
/* 0x44 */ BT_HEX, BT_HEX, BT_HEX, BT_NMSTRT,
/* 0x48 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x4C */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x50 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x54 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x58 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_LSQB,
/* 0x5C */ BT_OTHER, BT_RSQB, BT_OTHER, BT_NMSTRT,
/* 0x60 */ BT_OTHER, BT_HEX, BT_HEX, BT_HEX,
/* 0x64 */ BT_HEX, BT_HEX, BT_HEX, BT_NMSTRT,
/* 0x68 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x6C */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x70 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x74 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_NMSTRT,
/* 0x78 */ BT_NMSTRT, BT_NMSTRT, BT_NMSTRT, BT_OTHER,
/* 0x7C */ BT_VERBAR, BT_OTHER, BT_OTHER, BT_OTHER,
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\dllmain.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#define STRICT 1
#define WIN32_LEAN_AND_MEAN 1

#include <windows.h>

BOOL WINAPI DllMain(HANDLE hInst, ULONG ul_reason_for_call, LPVOID lpReserved)
{
  return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmldef.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include <string.h>

#ifdef XML_WINLIB

#define WIN32_LEAN_AND_MEAN
#define STRICT
#include <windows.h>

#define malloc(x) HeapAlloc(GetProcessHeap(), 0, (x))
#define calloc(x, y) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, (x)*(y))
#define free(x) HeapFree(GetProcessHeap(), 0, (x))
#define realloc(x, y) HeapReAlloc(GetProcessHeap(), 0, x, y)
#define abort() /* as nothing */

#else /* not XML_WINLIB */

#include <stdlib.h>

#endif /* not XML_WINLIB */

/* This file can be used for any definitions needed in
particular environments. */

#ifdef MOZILLA

#include "nspr.h"
#define malloc(x) PR_Malloc(x)
#define realloc(x, y) PR_Realloc((x), (y))
#define calloc(x, y) PR_Calloc((x),(y))
#define free(x) PR_Free(x)
#define int int32

#endif /* MOZILLA */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmlrole.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include "xmldef.h"
#include "xmlrole.h"

/* Doesn't check:

 that ,| are not mixed in a model group
 content of literals

*/

#ifndef MIN_BYTES_PER_CHAR
#define MIN_BYTES_PER_CHAR(enc) ((enc)->minBytesPerChar)
#endif

#ifdef XML_DTD
#define setTopLevel(state) \
  ((state)->handler = ((state)->documentEntity \
                       ? internalSubset \
                       : externalSubset1))
#else /* not XML_DTD */
#define setTopLevel(state) ((state)->handler = internalSubset)
#endif /* not XML_DTD */

typedef int PROLOG_HANDLER(PROLOG_STATE *state,
			   int tok,
			   const char *ptr,
			   const char *end,
			   const ENCODING *enc);

static PROLOG_HANDLER
  prolog0, prolog1, prolog2,
  doctype0, doctype1, doctype2, doctype3, doctype4, doctype5,
  internalSubset,
  entity0, entity1, entity2, entity3, entity4, entity5, entity6,
  entity7, entity8, entity9,
  notation0, notation1, notation2, notation3, notation4,
  attlist0, attlist1, attlist2, attlist3, attlist4, attlist5, attlist6,
  attlist7, attlist8, attlist9,
  element0, element1, element2, element3, element4, element5, element6,
  element7,
#ifdef XML_DTD
  externalSubset0, externalSubset1,
  condSect0, condSect1, condSect2,
#endif /* XML_DTD */
  declClose,
  error;

static
int common(PROLOG_STATE *state, int tok);

static
int prolog0(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    state->handler = prolog1;
    return XML_ROLE_NONE;
  case XML_TOK_XML_DECL:
    state->handler = prolog1;
    return XML_ROLE_XML_DECL;
  case XML_TOK_PI:
    state->handler = prolog1;
    return XML_ROLE_NONE;
  case XML_TOK_COMMENT:
    state->handler = prolog1;
  case XML_TOK_BOM:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_OPEN:
    if (!XmlNameMatchesAscii(enc,
			     ptr + 2 * MIN_BYTES_PER_CHAR(enc),
			     end,
			     "DOCTYPE"))
      break;
    state->handler = doctype0;
    return XML_ROLE_NONE;
  case XML_TOK_INSTANCE_START:
    state->handler = error;
    return XML_ROLE_INSTANCE_START;
  }
  return common(state, tok);
}

static
int prolog1(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_PI:
  case XML_TOK_COMMENT:
  case XML_TOK_BOM:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_OPEN:
    if (!XmlNameMatchesAscii(enc,
			     ptr + 2 * MIN_BYTES_PER_CHAR(enc),
			     end,
			     "DOCTYPE"))
      break;
    state->handler = doctype0;
    return XML_ROLE_NONE;
  case XML_TOK_INSTANCE_START:
    state->handler = error;
    return XML_ROLE_INSTANCE_START;
  }
  return common(state, tok);
}

static
int prolog2(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_PI:
  case XML_TOK_COMMENT:
    return XML_ROLE_NONE;
  case XML_TOK_INSTANCE_START:
    state->handler = error;
    return XML_ROLE_INSTANCE_START;
  }
  return common(state, tok);
}

static
int doctype0(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = doctype1;
    return XML_ROLE_DOCTYPE_NAME;
  }
  return common(state, tok);
}

static
int doctype1(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_OPEN_BRACKET:
    state->handler = internalSubset;
    return XML_ROLE_NONE;
  case XML_TOK_DECL_CLOSE:
    state->handler = prolog2;
    return XML_ROLE_DOCTYPE_CLOSE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "SYSTEM")) {
      state->handler = doctype3;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "PUBLIC")) {
      state->handler = doctype2;
      return XML_ROLE_NONE;
    }
    break;
  }
  return common(state, tok);
}

static
int doctype2(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = doctype3;
    return XML_ROLE_DOCTYPE_PUBLIC_ID;
  }
  return common(state, tok);
}

static
int doctype3(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = doctype4;
    return XML_ROLE_DOCTYPE_SYSTEM_ID;
  }
  return common(state, tok);
}

static
int doctype4(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_OPEN_BRACKET:
    state->handler = internalSubset;
    return XML_ROLE_NONE;
  case XML_TOK_DECL_CLOSE:
    state->handler = prolog2;
    return XML_ROLE_DOCTYPE_CLOSE;
  }
  return common(state, tok);
}

static
int doctype5(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_CLOSE:
    state->handler = prolog2;
    return XML_ROLE_DOCTYPE_CLOSE;
  }
  return common(state, tok);
}

static
int internalSubset(PROLOG_STATE *state,
		   int tok,
		   const char *ptr,
		   const char *end,
		   const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_OPEN:
    if (XmlNameMatchesAscii(enc,
			    ptr + 2 * MIN_BYTES_PER_CHAR(enc),
			    end,
			    "ENTITY")) {
      state->handler = entity0;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc,
			    ptr + 2 * MIN_BYTES_PER_CHAR(enc),
			    end,
			    "ATTLIST")) {
      state->handler = attlist0;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc,
			    ptr + 2 * MIN_BYTES_PER_CHAR(enc),
			    end,
			    "ELEMENT")) {
      state->handler = element0;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc,
			    ptr + 2 * MIN_BYTES_PER_CHAR(enc),
			    end,
			    "NOTATION")) {
      state->handler = notation0;
      return XML_ROLE_NONE;
    }
    break;
  case XML_TOK_PI:
  case XML_TOK_COMMENT:
    return XML_ROLE_NONE;
  case XML_TOK_PARAM_ENTITY_REF:
    return XML_ROLE_PARAM_ENTITY_REF;
  case XML_TOK_CLOSE_BRACKET:
    state->handler = doctype5;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

#ifdef XML_DTD

static
int externalSubset0(PROLOG_STATE *state,
		    int tok,
		    const char *ptr,
		    const char *end,
		    const ENCODING *enc)
{
  state->handler = externalSubset1;
  if (tok == XML_TOK_XML_DECL)
    return XML_ROLE_TEXT_DECL;
  return externalSubset1(state, tok, ptr, end, enc);
}

static
int externalSubset1(PROLOG_STATE *state,
		    int tok,
		    const char *ptr,
		    const char *end,
		    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_COND_SECT_OPEN:
    state->handler = condSect0;
    return XML_ROLE_NONE;
  case XML_TOK_COND_SECT_CLOSE:
    if (state->includeLevel == 0)
      break;
    state->includeLevel -= 1;
    return XML_ROLE_NONE;
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_CLOSE_BRACKET:
    break;
  case XML_TOK_NONE:
    if (state->includeLevel)
      break;
    return XML_ROLE_NONE;
  default:
    return internalSubset(state, tok, ptr, end, enc);
  }
  return common(state, tok);
}

#endif /* XML_DTD */

static
int entity0(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_PERCENT:
    state->handler = entity1;
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    state->handler = entity2;
    return XML_ROLE_GENERAL_ENTITY_NAME;
  }
  return common(state, tok);
}

static
int entity1(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    state->handler = entity7;
    return XML_ROLE_PARAM_ENTITY_NAME;
  }
  return common(state, tok);
}

static
int entity2(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "SYSTEM")) {
      state->handler = entity4;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "PUBLIC")) {
      state->handler = entity3;
      return XML_ROLE_NONE;
    }
    break;
  case XML_TOK_LITERAL:
    state->handler = declClose;
    return XML_ROLE_ENTITY_VALUE;
  }
  return common(state, tok);
}

static
int entity3(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = entity4;
    return XML_ROLE_ENTITY_PUBLIC_ID;
  }
  return common(state, tok);
}


static
int entity4(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = entity5;
    return XML_ROLE_ENTITY_SYSTEM_ID;
  }
  return common(state, tok);
}

static
int entity5(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_CLOSE:
    setTopLevel(state);
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "NDATA")) {
      state->handler = entity6;
      return XML_ROLE_NONE;
    }
    break;
  }
  return common(state, tok);
}

static
int entity6(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    state->handler = declClose;
    return XML_ROLE_ENTITY_NOTATION_NAME;
  }
  return common(state, tok);
}

static
int entity7(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "SYSTEM")) {
      state->handler = entity9;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "PUBLIC")) {
      state->handler = entity8;
      return XML_ROLE_NONE;
    }
    break;
  case XML_TOK_LITERAL:
    state->handler = declClose;
    return XML_ROLE_ENTITY_VALUE;
  }
  return common(state, tok);
}

static
int entity8(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = entity9;
    return XML_ROLE_ENTITY_PUBLIC_ID;
  }
  return common(state, tok);
}

static
int entity9(PROLOG_STATE *state,
	    int tok,
	    const char *ptr,
	    const char *end,
	    const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = declClose;
    return XML_ROLE_ENTITY_SYSTEM_ID;
  }
  return common(state, tok);
}

static
int notation0(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    state->handler = notation1;
    return XML_ROLE_NOTATION_NAME;
  }
  return common(state, tok);
}

static
int notation1(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "SYSTEM")) {
      state->handler = notation3;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "PUBLIC")) {
      state->handler = notation2;
      return XML_ROLE_NONE;
    }
    break;
  }
  return common(state, tok);
}

static
int notation2(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = notation4;
    return XML_ROLE_NOTATION_PUBLIC_ID;
  }
  return common(state, tok);
}

static
int notation3(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = declClose;
    return XML_ROLE_NOTATION_SYSTEM_ID;
  }
  return common(state, tok);
}

static
int notation4(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = declClose;
    return XML_ROLE_NOTATION_SYSTEM_ID;
  case XML_TOK_DECL_CLOSE:
    setTopLevel(state);
    return XML_ROLE_NOTATION_NO_SYSTEM_ID;
  }
  return common(state, tok);
}

static
int attlist0(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = attlist1;
    return XML_ROLE_ATTLIST_ELEMENT_NAME;
  }
  return common(state, tok);
}

static
int attlist1(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_CLOSE:
    setTopLevel(state);
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = attlist2;
    return XML_ROLE_ATTRIBUTE_NAME;
  }
  return common(state, tok);
}

static
int attlist2(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    {
      static const char *types[] = {
	"CDATA",
        "ID",
        "IDREF",
        "IDREFS",
        "ENTITY",
        "ENTITIES",
        "NMTOKEN",
        "NMTOKENS",
      };
      int i;
      for (i = 0; i < (int)(sizeof(types)/sizeof(types[0])); i++)
	if (XmlNameMatchesAscii(enc, ptr, end, types[i])) {
	  state->handler = attlist8;
	  return XML_ROLE_ATTRIBUTE_TYPE_CDATA + i;
	}
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "NOTATION")) {
      state->handler = attlist5;
      return XML_ROLE_NONE;
    }
    break;
  case XML_TOK_OPEN_PAREN:
    state->handler = attlist3;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

static
int attlist3(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NMTOKEN:
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = attlist4;
    return XML_ROLE_ATTRIBUTE_ENUM_VALUE;
  }
  return common(state, tok);
}

static
int attlist4(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_CLOSE_PAREN:
    state->handler = attlist8;
    return XML_ROLE_NONE;
  case XML_TOK_OR:
    state->handler = attlist3;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

static
int attlist5(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_OPEN_PAREN:
    state->handler = attlist6;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}


static
int attlist6(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    state->handler = attlist7;
    return XML_ROLE_ATTRIBUTE_NOTATION_VALUE;
  }
  return common(state, tok);
}

static
int attlist7(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_CLOSE_PAREN:
    state->handler = attlist8;
    return XML_ROLE_NONE;
  case XML_TOK_OR:
    state->handler = attlist6;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

/* default value */
static
int attlist8(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_POUND_NAME:
    if (XmlNameMatchesAscii(enc,
			    ptr + MIN_BYTES_PER_CHAR(enc),
			    end,
			    "IMPLIED")) {
      state->handler = attlist1;
      return XML_ROLE_IMPLIED_ATTRIBUTE_VALUE;
    }
    if (XmlNameMatchesAscii(enc,
			    ptr + MIN_BYTES_PER_CHAR(enc),
			    end,
			    "REQUIRED")) {
      state->handler = attlist1;
      return XML_ROLE_REQUIRED_ATTRIBUTE_VALUE;
    }
    if (XmlNameMatchesAscii(enc,
			    ptr + MIN_BYTES_PER_CHAR(enc),
			    end,
			    "FIXED")) {
      state->handler = attlist9;
      return XML_ROLE_NONE;
    }
    break;
  case XML_TOK_LITERAL:
    state->handler = attlist1;
    return XML_ROLE_DEFAULT_ATTRIBUTE_VALUE;
  }
  return common(state, tok);
}

static
int attlist9(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_LITERAL:
    state->handler = attlist1;
    return XML_ROLE_FIXED_ATTRIBUTE_VALUE;
  }
  return common(state, tok);
}

static
int element0(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = element1;
    return XML_ROLE_ELEMENT_NAME;
  }
  return common(state, tok);
}

static
int element1(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "EMPTY")) {
      state->handler = declClose;
      return XML_ROLE_CONTENT_EMPTY;
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "ANY")) {
      state->handler = declClose;
      return XML_ROLE_CONTENT_ANY;
    }
    break;
  case XML_TOK_OPEN_PAREN:
    state->handler = element2;
    state->level = 1;
    return XML_ROLE_GROUP_OPEN;
  }
  return common(state, tok);
}

static
int element2(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_POUND_NAME:
    if (XmlNameMatchesAscii(enc,
			    ptr + MIN_BYTES_PER_CHAR(enc),
			    end,
			    "PCDATA")) {
      state->handler = element3;
      return XML_ROLE_CONTENT_PCDATA;
    }
    break;
  case XML_TOK_OPEN_PAREN:
    state->level = 2;
    state->handler = element6;
    return XML_ROLE_GROUP_OPEN;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT;
  case XML_TOK_NAME_QUESTION:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT_OPT;
  case XML_TOK_NAME_ASTERISK:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT_REP;
  case XML_TOK_NAME_PLUS:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT_PLUS;
  }
  return common(state, tok);
}

static
int element3(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_CLOSE_PAREN:
  case XML_TOK_CLOSE_PAREN_ASTERISK:
    state->handler = declClose;
    return XML_ROLE_GROUP_CLOSE_REP;
  case XML_TOK_OR:
    state->handler = element4;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

static
int element4(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = element5;
    return XML_ROLE_CONTENT_ELEMENT;
  }
  return common(state, tok);
}

static
int element5(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_CLOSE_PAREN_ASTERISK:
    state->handler = declClose;
    return XML_ROLE_GROUP_CLOSE_REP;
  case XML_TOK_OR:
    state->handler = element4;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

static
int element6(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_OPEN_PAREN:
    state->level += 1;
    return XML_ROLE_GROUP_OPEN;
  case XML_TOK_NAME:
  case XML_TOK_PREFIXED_NAME:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT;
  case XML_TOK_NAME_QUESTION:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT_OPT;
  case XML_TOK_NAME_ASTERISK:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT_REP;
  case XML_TOK_NAME_PLUS:
    state->handler = element7;
    return XML_ROLE_CONTENT_ELEMENT_PLUS;
  }
  return common(state, tok);
}

static
int element7(PROLOG_STATE *state,
	     int tok,
	     const char *ptr,
	     const char *end,
	     const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_CLOSE_PAREN:
    state->level -= 1;
    if (state->level == 0)
      state->handler = declClose;
    return XML_ROLE_GROUP_CLOSE;
  case XML_TOK_CLOSE_PAREN_ASTERISK:
    state->level -= 1;
    if (state->level == 0)
      state->handler = declClose;
    return XML_ROLE_GROUP_CLOSE_REP;
  case XML_TOK_CLOSE_PAREN_QUESTION:
    state->level -= 1;
    if (state->level == 0)
      state->handler = declClose;
    return XML_ROLE_GROUP_CLOSE_OPT;
  case XML_TOK_CLOSE_PAREN_PLUS:
    state->level -= 1;
    if (state->level == 0)
      state->handler = declClose;
    return XML_ROLE_GROUP_CLOSE_PLUS;
  case XML_TOK_COMMA:
    state->handler = element6;
    return XML_ROLE_GROUP_SEQUENCE;
  case XML_TOK_OR:
    state->handler = element6;
    return XML_ROLE_GROUP_CHOICE;
  }
  return common(state, tok);
}

#ifdef XML_DTD

static
int condSect0(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_NAME:
    if (XmlNameMatchesAscii(enc, ptr, end, "INCLUDE")) {
      state->handler = condSect1;
      return XML_ROLE_NONE;
    }
    if (XmlNameMatchesAscii(enc, ptr, end, "IGNORE")) {
      state->handler = condSect2;
      return XML_ROLE_NONE;
    }
    break;
  }
  return common(state, tok);
}

static
int condSect1(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_OPEN_BRACKET:
    state->handler = externalSubset1;
    state->includeLevel += 1;
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

static
int condSect2(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_OPEN_BRACKET:
    state->handler = externalSubset1;
    return XML_ROLE_IGNORE_SECT;
  }
  return common(state, tok);
}

#endif /* XML_DTD */

static
int declClose(PROLOG_STATE *state,
	      int tok,
	      const char *ptr,
	      const char *end,
	      const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_PROLOG_S:
    return XML_ROLE_NONE;
  case XML_TOK_DECL_CLOSE:
    setTopLevel(state);
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}

#if 0

static
int ignore(PROLOG_STATE *state,
	   int tok,
	   const char *ptr,
	   const char *end,
	   const ENCODING *enc)
{
  switch (tok) {
  case XML_TOK_DECL_CLOSE:
    state->handler = internalSubset;
    return 0;
  default:
    return XML_ROLE_NONE;
  }
  return common(state, tok);
}
#endif

static
int error(PROLOG_STATE *state,
	  int tok,
	  const char *ptr,
	  const char *end,
	  const ENCODING *enc)
{
  return XML_ROLE_NONE;
}

static
int common(PROLOG_STATE *state, int tok)
{
#ifdef XML_DTD
  if (!state->documentEntity && tok == XML_TOK_PARAM_ENTITY_REF)
    return XML_ROLE_INNER_PARAM_ENTITY_REF;
#endif
  state->handler = error;
  return XML_ROLE_ERROR;
}

void XmlPrologStateInit(PROLOG_STATE *state)
{
  state->handler = prolog0;
#ifdef XML_DTD
  state->documentEntity = 1;
  state->includeLevel = 0;
#endif /* XML_DTD */
}

#ifdef XML_DTD

void XmlPrologStateInitExternalEntity(PROLOG_STATE *state)
{
  state->handler = externalSubset0;
  state->documentEntity = 0;
  state->includeLevel = 0;
}

#endif /* XML_DTD */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\nametab.h ===
static const unsigned namingBitmap[] = {
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
0x00000000, 0x04000000, 0x87FFFFFE, 0x07FFFFFE,
0x00000000, 0x00000000, 0xFF7FFFFF, 0xFF7FFFFF,
0xFFFFFFFF, 0x7FF3FFFF, 0xFFFFFDFE, 0x7FFFFFFF,
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFE00F, 0xFC31FFFF,
0x00FFFFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF,
0xFFFFFFFF, 0xF80001FF, 0x00000003, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0xFFFFD740, 0xFFFFFFFB, 0x547F7FFF, 0x000FFFFD,
0xFFFFDFFE, 0xFFFFFFFF, 0xDFFEFFFF, 0xFFFFFFFF,
0xFFFF0003, 0xFFFFFFFF, 0xFFFF199F, 0x033FCFFF,
0x00000000, 0xFFFE0000, 0x027FFFFF, 0xFFFFFFFE,
0x0000007F, 0x00000000, 0xFFFF0000, 0x000707FF,
0x00000000, 0x07FFFFFE, 0x000007FE, 0xFFFE0000,
0xFFFFFFFF, 0x7CFFFFFF, 0x002F7FFF, 0x00000060,
0xFFFFFFE0, 0x23FFFFFF, 0xFF000000, 0x00000003,
0xFFF99FE0, 0x03C5FDFF, 0xB0000000, 0x00030003,
0xFFF987E0, 0x036DFDFF, 0x5E000000, 0x001C0000,
0xFFFBAFE0, 0x23EDFDFF, 0x00000000, 0x00000001,
0xFFF99FE0, 0x23CDFDFF, 0xB0000000, 0x00000003,
0xD63DC7E0, 0x03BFC718, 0x00000000, 0x00000000,
0xFFFDDFE0, 0x03EFFDFF, 0x00000000, 0x00000003,
0xFFFDDFE0, 0x03EFFDFF, 0x40000000, 0x00000003,
0xFFFDDFE0, 0x03FFFDFF, 0x00000000, 0x00000003,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0xFFFFFFFE, 0x000D7FFF, 0x0000003F, 0x00000000,
0xFEF02596, 0x200D6CAE, 0x0000001F, 0x00000000,
0x00000000, 0x00000000, 0xFFFFFEFF, 0x000003FF,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0xFFFFFFFF, 0xFFFF003F, 0x007FFFFF,
0x0007DAED, 0x50000000, 0x82315001, 0x002C62AB,
0x40000000, 0xF580C900, 0x00000007, 0x02010800,
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
0x0FFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x03FFFFFF,
0x3F3FFFFF, 0xFFFFFFFF, 0xAAFF3F3F, 0x3FFFFFFF,
0xFFFFFFFF, 0x5FDFFFFF, 0x0FCF1FDC, 0x1FDC1FFF,
0x00000000, 0x00004C40, 0x00000000, 0x00000000,
0x00000007, 0x00000000, 0x00000000, 0x00000000,
0x00000080, 0x000003FE, 0xFFFFFFFE, 0xFFFFFFFF,
0x001FFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0x07FFFFFF,
0xFFFFFFE0, 0x00001FFF, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
0xFFFFFFFF, 0x0000003F, 0x00000000, 0x00000000,
0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
0xFFFFFFFF, 0x0000000F, 0x00000000, 0x00000000,
0x00000000, 0x07FF6000, 0x87FFFFFE, 0x07FFFFFE,
0x00000000, 0x00800000, 0xFF7FFFFF, 0xFF7FFFFF,
0x00FFFFFF, 0x00000000, 0xFFFF0000, 0xFFFFFFFF,
0xFFFFFFFF, 0xF80001FF, 0x00030003, 0x00000000,
0xFFFFFFFF, 0xFFFFFFFF, 0x0000003F, 0x00000003,
0xFFFFD7C0, 0xFFFFFFFB, 0x547F7FFF, 0x000FFFFD,
0xFFFFDFFE, 0xFFFFFFFF, 0xDFFEFFFF, 0xFFFFFFFF,
0xFFFF007B, 0xFFFFFFFF, 0xFFFF199F, 0x033FCFFF,
0x00000000, 0xFFFE0000, 0x027FFFFF, 0xFFFFFFFE,
0xFFFE007F, 0xBBFFFFFB, 0xFFFF0016, 0x000707FF,
0x00000000, 0x07FFFFFE, 0x0007FFFF, 0xFFFF03FF,
0xFFFFFFFF, 0x7CFFFFFF, 0xFFEF7FFF, 0x03FF3DFF,
0xFFFFFFEE, 0xF3FFFFFF, 0xFF1E3FFF, 0x0000FFCF,
0xFFF99FEE, 0xD3C5FDFF, 0xB080399F, 0x0003FFCF,
0xFFF987E4, 0xD36DFDFF, 0x5E003987, 0x001FFFC0,
0xFFFBAFEE, 0xF3EDFDFF, 0x00003BBF, 0x0000FFC1,
0xFFF99FEE, 0xF3CDFDFF, 0xB0C0398F, 0x0000FFC3,
0xD63DC7EC, 0xC3BFC718, 0x00803DC7, 0x0000FF80,
0xFFFDDFEE, 0xC3EFFDFF, 0x00603DDF, 0x0000FFC3,
0xFFFDDFEC, 0xC3EFFDFF, 0x40603DDF, 0x0000FFC3,
0xFFFDDFEC, 0xC3FFFDFF, 0x00803DCF, 0x0000FFC3,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0xFFFFFFFE, 0x07FF7FFF, 0x03FF7FFF, 0x00000000,
0xFEF02596, 0x3BFF6CAE, 0x03FF3F5F, 0x00000000,
0x03000000, 0xC2A003FF, 0xFFFFFEFF, 0xFFFE03FF,
0xFEBF0FDF, 0x02FE3FFF, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x1FFF0000, 0x00000002,
0x000000A0, 0x003EFFFE, 0xFFFFFFFE, 0xFFFFFFFF,
0x661FFFFF, 0xFFFFFFFE, 0xFFFFFFFF, 0x77FFFFFF,
};
static const unsigned char nmstrtPages[] = {
0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00,
0x00, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
0x10, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x13,
0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x15, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x17,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x18,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const unsigned char namePages[] = {
0x19, 0x03, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x00,
0x00, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
0x10, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x13,
0x26, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x27, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x17,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x18,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmlrole.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#ifndef XmlRole_INCLUDED
#define XmlRole_INCLUDED 1

#include "xmltok.h"

#ifdef __cplusplus
extern "C" {
#endif

enum {
  XML_ROLE_ERROR = -1,
  XML_ROLE_NONE = 0,
  XML_ROLE_XML_DECL,
  XML_ROLE_INSTANCE_START,
  XML_ROLE_DOCTYPE_NAME,
  XML_ROLE_DOCTYPE_SYSTEM_ID,
  XML_ROLE_DOCTYPE_PUBLIC_ID,
  XML_ROLE_DOCTYPE_CLOSE,
  XML_ROLE_GENERAL_ENTITY_NAME,
  XML_ROLE_PARAM_ENTITY_NAME,
  XML_ROLE_ENTITY_VALUE,
  XML_ROLE_ENTITY_SYSTEM_ID,
  XML_ROLE_ENTITY_PUBLIC_ID,
  XML_ROLE_ENTITY_NOTATION_NAME,
  XML_ROLE_NOTATION_NAME,
  XML_ROLE_NOTATION_SYSTEM_ID,
  XML_ROLE_NOTATION_NO_SYSTEM_ID,
  XML_ROLE_NOTATION_PUBLIC_ID,
  XML_ROLE_ATTRIBUTE_NAME,
  XML_ROLE_ATTRIBUTE_TYPE_CDATA,
  XML_ROLE_ATTRIBUTE_TYPE_ID,
  XML_ROLE_ATTRIBUTE_TYPE_IDREF,
  XML_ROLE_ATTRIBUTE_TYPE_IDREFS,
  XML_ROLE_ATTRIBUTE_TYPE_ENTITY,
  XML_ROLE_ATTRIBUTE_TYPE_ENTITIES,
  XML_ROLE_ATTRIBUTE_TYPE_NMTOKEN,
  XML_ROLE_ATTRIBUTE_TYPE_NMTOKENS,
  XML_ROLE_ATTRIBUTE_ENUM_VALUE,
  XML_ROLE_ATTRIBUTE_NOTATION_VALUE,
  XML_ROLE_ATTLIST_ELEMENT_NAME,
  XML_ROLE_IMPLIED_ATTRIBUTE_VALUE,
  XML_ROLE_REQUIRED_ATTRIBUTE_VALUE,
  XML_ROLE_DEFAULT_ATTRIBUTE_VALUE,
  XML_ROLE_FIXED_ATTRIBUTE_VALUE,
  XML_ROLE_ELEMENT_NAME,
  XML_ROLE_CONTENT_ANY,
  XML_ROLE_CONTENT_EMPTY,
  XML_ROLE_CONTENT_PCDATA,
  XML_ROLE_GROUP_OPEN,
  XML_ROLE_GROUP_CLOSE,
  XML_ROLE_GROUP_CLOSE_REP,
  XML_ROLE_GROUP_CLOSE_OPT,
  XML_ROLE_GROUP_CLOSE_PLUS,
  XML_ROLE_GROUP_CHOICE,
  XML_ROLE_GROUP_SEQUENCE,
  XML_ROLE_CONTENT_ELEMENT,
  XML_ROLE_CONTENT_ELEMENT_REP,
  XML_ROLE_CONTENT_ELEMENT_OPT,
  XML_ROLE_CONTENT_ELEMENT_PLUS,
#ifdef XML_DTD
  XML_ROLE_TEXT_DECL,
  XML_ROLE_IGNORE_SECT,
  XML_ROLE_INNER_PARAM_ENTITY_REF,
#endif /* XML_DTD */
  XML_ROLE_PARAM_ENTITY_REF
};

typedef struct prolog_state {
  int (*handler)(struct prolog_state *state,
	         int tok,
		 const char *ptr,
		 const char *end,
		 const ENCODING *enc);
  unsigned level;
#ifdef XML_DTD
  unsigned includeLevel;
  int documentEntity;
#endif /* XML_DTD */
} PROLOG_STATE;

void XMLTOKAPI XmlPrologStateInit(PROLOG_STATE *);
#ifdef XML_DTD
void XMLTOKAPI XmlPrologStateInitExternalEntity(PROLOG_STATE *);
#endif /* XML_DTD */

#define XmlTokenRole(state, tok, ptr, end, enc) \
 (((state)->handler)(state, tok, ptr, end, enc))

#ifdef __cplusplus
}
#endif

#endif /* not XmlRole_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\utf8tab.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/


/* 0x80 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x84 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x88 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x8C */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x90 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x94 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x98 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0x9C */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xA0 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xA4 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xA8 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xAC */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xB0 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xB4 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xB8 */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xBC */ BT_TRAIL, BT_TRAIL, BT_TRAIL, BT_TRAIL,
/* 0xC0 */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xC4 */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xC8 */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xCC */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xD0 */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xD4 */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xD8 */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xDC */ BT_LEAD2, BT_LEAD2, BT_LEAD2, BT_LEAD2,
/* 0xE0 */ BT_LEAD3, BT_LEAD3, BT_LEAD3, BT_LEAD3,
/* 0xE4 */ BT_LEAD3, BT_LEAD3, BT_LEAD3, BT_LEAD3,
/* 0xE8 */ BT_LEAD3, BT_LEAD3, BT_LEAD3, BT_LEAD3,
/* 0xEC */ BT_LEAD3, BT_LEAD3, BT_LEAD3, BT_LEAD3,
/* 0xF0 */ BT_LEAD4, BT_LEAD4, BT_LEAD4, BT_LEAD4,
/* 0xF4 */ BT_LEAD4, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0xF8 */ BT_NONXML, BT_NONXML, BT_NONXML, BT_NONXML,
/* 0xFC */ BT_NONXML, BT_NONXML, BT_MALFORM, BT_MALFORM,
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmltok_impl.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

enum {
  BT_NONXML,
  BT_MALFORM,
  BT_LT,
  BT_AMP,
  BT_RSQB,
  BT_LEAD2,
  BT_LEAD3,
  BT_LEAD4,
  BT_TRAIL,
  BT_CR,
  BT_LF,
  BT_GT,
  BT_QUOT,
  BT_APOS,
  BT_EQUALS,
  BT_QUEST,
  BT_EXCL,
  BT_SOL,
  BT_SEMI,
  BT_NUM,
  BT_LSQB,
  BT_S,
  BT_NMSTRT,
  BT_COLON,
  BT_HEX,
  BT_DIGIT,
  BT_NAME,
  BT_MINUS,
  BT_OTHER, /* known not to be a name or name start character */
  BT_NONASCII, /* might be a name or name start character */
  BT_PERCNT,
  BT_LPAR,
  BT_RPAR,
  BT_AST,
  BT_PLUS,
  BT_COMMA,
  BT_VERBAR
};

#include <stddef.h>
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\codepage.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include "codepage.h"

#ifdef WIN32
#define STRICT 1
#define WIN32_LEAN_AND_MEAN 1

#include <windows.h>

int codepageMap(int cp, int *map)
{
  int i;
  CPINFO info;
  if (!GetCPInfo(cp, &info) || info.MaxCharSize > 2)
    return 0;
  for (i = 0; i < 256; i++)
    map[i] = -1;
  if (info.MaxCharSize > 1) {
    for (i = 0; i < MAX_LEADBYTES; i++) {
      int j, lim;
      if (info.LeadByte[i] == 0 && info.LeadByte[i + 1] == 0)
        break;
      lim = info.LeadByte[i + 1];
      for (j = info.LeadByte[i]; j < lim; j++)
	map[j] = -2;
    }
  }
  for (i = 0; i < 256; i++) {
   if (map[i] == -1) {
     char c = i;
     unsigned short n;
     if (MultiByteToWideChar(cp, MB_PRECOMPOSED|MB_ERR_INVALID_CHARS,
		             &c, 1, &n, 1) == 1)
       map[i] = n;
   }
  }
  return 1;
}

int codepageConvert(int cp, const char *p)
{
  unsigned short c;
  if (MultiByteToWideChar(cp, MB_PRECOMPOSED|MB_ERR_INVALID_CHARS,
		          p, 2, &c, 1) == 1)
    return c;
  return -1;
}

#else /* not WIN32 */

int codepageMap(int cp, int *map)
{
  return 0;
}

int codepageConvert(int cp, const char *p)
{
  return -1;
}

#endif /* not WIN32 */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmltok.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include "xmldef.h"
#include "xmltok.h"
#include "nametab.h"

#ifdef XML_DTD
#define IGNORE_SECTION_TOK_VTABLE , PREFIX(ignoreSectionTok)
#else
#define IGNORE_SECTION_TOK_VTABLE /* as nothing */
#endif

#define VTABLE1 \
  { PREFIX(prologTok), PREFIX(contentTok), \
    PREFIX(cdataSectionTok) IGNORE_SECTION_TOK_VTABLE }, \
  { PREFIX(attributeValueTok), PREFIX(entityValueTok) }, \
  PREFIX(sameName), \
  PREFIX(nameMatchesAscii), \
  PREFIX(nameLength), \
  PREFIX(skipS), \
  PREFIX(getAtts), \
  PREFIX(charRefNumber), \
  PREFIX(predefinedEntityName), \
  PREFIX(updatePosition), \
  PREFIX(isPublicId)

#define VTABLE VTABLE1, PREFIX(toUtf8), PREFIX(toUtf16)

#define UCS2_GET_NAMING(pages, hi, lo) \
   (namingBitmap[(pages[hi] << 3) + ((lo) >> 5)] & (1 << ((lo) & 0x1F)))

/* A 2 byte UTF-8 representation splits the characters 11 bits
between the bottom 5 and 6 bits of the bytes.
We need 8 bits to index into pages, 3 bits to add to that index and
5 bits to generate the mask. */
#define UTF8_GET_NAMING2(pages, byte) \
    (namingBitmap[((pages)[(((byte)[0]) >> 2) & 7] << 3) \
                      + ((((byte)[0]) & 3) << 1) \
                      + ((((byte)[1]) >> 5) & 1)] \
         & (1 << (((byte)[1]) & 0x1F)))

/* A 3 byte UTF-8 representation splits the characters 16 bits
between the bottom 4, 6 and 6 bits of the bytes.
We need 8 bits to index into pages, 3 bits to add to that index and
5 bits to generate the mask. */
#define UTF8_GET_NAMING3(pages, byte) \
  (namingBitmap[((pages)[((((byte)[0]) & 0xF) << 4) \
                             + ((((byte)[1]) >> 2) & 0xF)] \
		       << 3) \
                      + ((((byte)[1]) & 3) << 1) \
                      + ((((byte)[2]) >> 5) & 1)] \
         & (1 << (((byte)[2]) & 0x1F)))

#define UTF8_GET_NAMING(pages, p, n) \
  ((n) == 2 \
  ? UTF8_GET_NAMING2(pages, (const unsigned char *)(p)) \
  : ((n) == 3 \
     ? UTF8_GET_NAMING3(pages, (const unsigned char *)(p)) \
     : 0))

#define UTF8_INVALID3(p) \
  ((*p) == 0xED \
  ? (((p)[1] & 0x20) != 0) \
  : ((*p) == 0xEF \
     ? ((p)[1] == 0xBF && ((p)[2] == 0xBF || (p)[2] == 0xBE)) \
     : 0))

#define UTF8_INVALID4(p) ((*p) == 0xF4 && ((p)[1] & 0x30) != 0)

static
int isNever(const ENCODING *enc, const char *p)
{
  return 0;
}

static
int utf8_isName2(const ENCODING *enc, const char *p)
{
  return UTF8_GET_NAMING2(namePages, (const unsigned char *)p);
}

static
int utf8_isName3(const ENCODING *enc, const char *p)
{
  return UTF8_GET_NAMING3(namePages, (const unsigned char *)p);
}

#define utf8_isName4 isNever

static
int utf8_isNmstrt2(const ENCODING *enc, const char *p)
{
  return UTF8_GET_NAMING2(nmstrtPages, (const unsigned char *)p);
}

static
int utf8_isNmstrt3(const ENCODING *enc, const char *p)
{
  return UTF8_GET_NAMING3(nmstrtPages, (const unsigned char *)p);
}

#define utf8_isNmstrt4 isNever

#define utf8_isInvalid2 isNever

static
int utf8_isInvalid3(const ENCODING *enc, const char *p)
{
  return UTF8_INVALID3((const unsigned char *)p);
}

static
int utf8_isInvalid4(const ENCODING *enc, const char *p)
{
  return UTF8_INVALID4((const unsigned char *)p);
}

struct normal_encoding {
  ENCODING enc;
  unsigned char type[256];
#ifdef XML_MIN_SIZE
  int (*byteType)(const ENCODING *, const char *);
  int (*isNameMin)(const ENCODING *, const char *);
  int (*isNmstrtMin)(const ENCODING *, const char *);
  int (*byteToAscii)(const ENCODING *, const char *);
  int (*charMatches)(const ENCODING *, const char *, int);
#endif /* XML_MIN_SIZE */
  int (*isName2)(const ENCODING *, const char *);
  int (*isName3)(const ENCODING *, const char *);
  int (*isName4)(const ENCODING *, const char *);
  int (*isNmstrt2)(const ENCODING *, const char *);
  int (*isNmstrt3)(const ENCODING *, const char *);
  int (*isNmstrt4)(const ENCODING *, const char *);
  int (*isInvalid2)(const ENCODING *, const char *);
  int (*isInvalid3)(const ENCODING *, const char *);
  int (*isInvalid4)(const ENCODING *, const char *);
};

#ifdef XML_MIN_SIZE

#define STANDARD_VTABLE(E) \
 E ## byteType, \
 E ## isNameMin, \
 E ## isNmstrtMin, \
 E ## byteToAscii, \
 E ## charMatches,

#else

#define STANDARD_VTABLE(E) /* as nothing */

#endif

#define NORMAL_VTABLE(E) \
 E ## isName2, \
 E ## isName3, \
 E ## isName4, \
 E ## isNmstrt2, \
 E ## isNmstrt3, \
 E ## isNmstrt4, \
 E ## isInvalid2, \
 E ## isInvalid3, \
 E ## isInvalid4

static int checkCharRefNumber(int);

#include "xmltok_impl.h"

#ifdef XML_MIN_SIZE
#define sb_isNameMin isNever
#define sb_isNmstrtMin isNever
#endif

#ifdef XML_MIN_SIZE
#define MINBPC(enc) ((enc)->minBytesPerChar)
#else
/* minimum bytes per character */
#define MINBPC(enc) 1
#endif

#define SB_BYTE_TYPE(enc, p) \
  (((struct normal_encoding *)(enc))->type[(unsigned char)*(p)])

#ifdef XML_MIN_SIZE
static
int sb_byteType(const ENCODING *enc, const char *p)
{
  return SB_BYTE_TYPE(enc, p);
}
#define BYTE_TYPE(enc, p) \
 (((const struct normal_encoding *)(enc))->byteType(enc, p))
#else
#define BYTE_TYPE(enc, p) SB_BYTE_TYPE(enc, p)
#endif

#ifdef XML_MIN_SIZE
#define BYTE_TO_ASCII(enc, p) \
 (((const struct normal_encoding *)(enc))->byteToAscii(enc, p))
static
int sb_byteToAscii(const ENCODING *enc, const char *p)
{
  return *p;
}
#else
#define BYTE_TO_ASCII(enc, p) (*p)
#endif

#define IS_NAME_CHAR(enc, p, n) \
 (((const struct normal_encoding *)(enc))->isName ## n(enc, p))
#define IS_NMSTRT_CHAR(enc, p, n) \
 (((const struct normal_encoding *)(enc))->isNmstrt ## n(enc, p))
#define IS_INVALID_CHAR(enc, p, n) \
 (((const struct normal_encoding *)(enc))->isInvalid ## n(enc, p))

#ifdef XML_MIN_SIZE
#define IS_NAME_CHAR_MINBPC(enc, p) \
 (((const struct normal_encoding *)(enc))->isNameMin(enc, p))
#define IS_NMSTRT_CHAR_MINBPC(enc, p) \
 (((const struct normal_encoding *)(enc))->isNmstrtMin(enc, p))
#else
#define IS_NAME_CHAR_MINBPC(enc, p) (0)
#define IS_NMSTRT_CHAR_MINBPC(enc, p) (0)
#endif

#ifdef XML_MIN_SIZE
#define CHAR_MATCHES(enc, p, c) \
 (((const struct normal_encoding *)(enc))->charMatches(enc, p, c))
static
int sb_charMatches(const ENCODING *enc, const char *p, int c)
{
  return *p == c;
}
#else
/* c is an ASCII character */
#define CHAR_MATCHES(enc, p, c) (*(p) == c)
#endif

#define PREFIX(ident) normal_ ## ident
#include "xmltok_impl.c"

#undef MINBPC
#undef BYTE_TYPE
#undef BYTE_TO_ASCII
#undef CHAR_MATCHES
#undef IS_NAME_CHAR
#undef IS_NAME_CHAR_MINBPC
#undef IS_NMSTRT_CHAR
#undef IS_NMSTRT_CHAR_MINBPC
#undef IS_INVALID_CHAR

enum {  /* UTF8_cvalN is value of masked first byte of N byte sequence */
  UTF8_cval1 = 0x00,
  UTF8_cval2 = 0xc0,
  UTF8_cval3 = 0xe0,
  UTF8_cval4 = 0xf0
};

static
void utf8_toUtf8(const ENCODING *enc,
		 const char **fromP, const char *fromLim,
		 char **toP, const char *toLim)
{
  char *to;
  const char *from;
  if (fromLim - *fromP > toLim - *toP) {
    /* Avoid copying partial characters. */
    for (fromLim = *fromP + (toLim - *toP); fromLim > *fromP; fromLim--)
      if (((unsigned char)fromLim[-1] & 0xc0) != 0x80)
	break;
  }
  for (to = *toP, from = *fromP; from != fromLim; from++, to++)
    *to = *from;
  *fromP = from;
  *toP = to;
}

static
void utf8_toUtf16(const ENCODING *enc,
		  const char **fromP, const char *fromLim,
		  unsigned short **toP, const unsigned short *toLim)
{
  unsigned short *to = *toP;
  const char *from = *fromP;
  while (from != fromLim && to != toLim) {
    switch (((struct normal_encoding *)enc)->type[(unsigned char)*from]) {
    case BT_LEAD2:
      *to++ = ((from[0] & 0x1f) << 6) | (from[1] & 0x3f);
      from += 2;
      break;
    case BT_LEAD3:
      *to++ = ((from[0] & 0xf) << 12) | ((from[1] & 0x3f) << 6) | (from[2] & 0x3f);
      from += 3;
      break;
    case BT_LEAD4:
      {
	unsigned long n;
	if (to + 1 == toLim)
	  break;
	n = ((from[0] & 0x7) << 18) | ((from[1] & 0x3f) << 12) | ((from[2] & 0x3f) << 6) | (from[3] & 0x3f);
	n -= 0x10000;
	to[0] = (unsigned short)((n >> 10) | 0xD800);
	to[1] = (unsigned short)((n & 0x3FF) | 0xDC00);
	to += 2;
	from += 4;
      }
      break;
    default:
      *to++ = *from++;
      break;
    }
  }
  *fromP = from;
  *toP = to;
}

#ifdef XML_NS
static const struct normal_encoding utf8_encoding_ns = {
  { VTABLE1, utf8_toUtf8, utf8_toUtf16, 1, 1, 0 },
  {
#include "asciitab.h"
#include "utf8tab.h"
  },
  STANDARD_VTABLE(sb_) NORMAL_VTABLE(utf8_)
};
#endif

static const struct normal_encoding utf8_encoding = {
  { VTABLE1, utf8_toUtf8, utf8_toUtf16, 1, 1, 0 },
  {
#define BT_COLON BT_NMSTRT
#include "asciitab.h"
#undef BT_COLON
#include "utf8tab.h"
  },
  STANDARD_VTABLE(sb_) NORMAL_VTABLE(utf8_)
};

#ifdef XML_NS

static const struct normal_encoding internal_utf8_encoding_ns = {
  { VTABLE1, utf8_toUtf8, utf8_toUtf16, 1, 1, 0 },
  {
#include "iasciitab.h"
#include "utf8tab.h"
  },
  STANDARD_VTABLE(sb_) NORMAL_VTABLE(utf8_)
};

#endif

static const struct normal_encoding internal_utf8_encoding = {
  { VTABLE1, utf8_toUtf8, utf8_toUtf16, 1, 1, 0 },
  {
#define BT_COLON BT_NMSTRT
#include "iasciitab.h"
#undef BT_COLON
#include "utf8tab.h"
  },
  STANDARD_VTABLE(sb_) NORMAL_VTABLE(utf8_)
};

static
void latin1_toUtf8(const ENCODING *enc,
		   const char **fromP, const char *fromLim,
		   char **toP, const char *toLim)
{
  for (;;) {
    unsigned char c;
    if (*fromP == fromLim)
      break;
    c = (unsigned char)**fromP;
    if (c & 0x80) {
      if (toLim - *toP < 2)
	break;
      *(*toP)++ = ((c >> 6) | UTF8_cval2);
      *(*toP)++ = ((c & 0x3f) | 0x80);
      (*fromP)++;
    }
    else {
      if (*toP == toLim)
	break;
      *(*toP)++ = *(*fromP)++;
    }
  }
}

static
void latin1_toUtf16(const ENCODING *enc,
		    const char **fromP, const char *fromLim,
		    unsigned short **toP, const unsigned short *toLim)
{
  while (*fromP != fromLim && *toP != toLim)
    *(*toP)++ = (unsigned char)*(*fromP)++;
}

#ifdef XML_NS

static const struct normal_encoding latin1_encoding_ns = {
  { VTABLE1, latin1_toUtf8, latin1_toUtf16, 1, 0, 0 },
  {
#include "asciitab.h"
#include "latin1tab.h"
  },
  STANDARD_VTABLE(sb_)
};

#endif

static const struct normal_encoding latin1_encoding = {
  { VTABLE1, latin1_toUtf8, latin1_toUtf16, 1, 0, 0 },
  {
#define BT_COLON BT_NMSTRT
#include "asciitab.h"
#undef BT_COLON
#include "latin1tab.h"
  },
  STANDARD_VTABLE(sb_)
};

static
void ascii_toUtf8(const ENCODING *enc,
		  const char **fromP, const char *fromLim,
		  char **toP, const char *toLim)
{
  while (*fromP != fromLim && *toP != toLim)
    *(*toP)++ = *(*fromP)++;
}

#ifdef XML_NS

static const struct normal_encoding ascii_encoding_ns = {
  { VTABLE1, ascii_toUtf8, latin1_toUtf16, 1, 1, 0 },
  {
#include "asciitab.h"
/* BT_NONXML == 0 */
  },
  STANDARD_VTABLE(sb_)
};

#endif

static const struct normal_encoding ascii_encoding = {
  { VTABLE1, ascii_toUtf8, latin1_toUtf16, 1, 1, 0 },
  {
#define BT_COLON BT_NMSTRT
#include "asciitab.h"
#undef BT_COLON
/* BT_NONXML == 0 */
  },
  STANDARD_VTABLE(sb_)
};

static int unicode_byte_type(char hi, char lo)
{
  switch ((unsigned char)hi) {
  case 0xD8: case 0xD9: case 0xDA: case 0xDB:
    return BT_LEAD4;
  case 0xDC: case 0xDD: case 0xDE: case 0xDF:
    return BT_TRAIL;
  case 0xFF:
    switch ((unsigned char)lo) {
    case 0xFF:
    case 0xFE:
      return BT_NONXML;
    }
    break;
  }
  return BT_NONASCII;
}

#define DEFINE_UTF16_TO_UTF8(E) \
static \
void E ## toUtf8(const ENCODING *enc, \
		 const char **fromP, const char *fromLim, \
		 char **toP, const char *toLim) \
{ \
  const char *from; \
  for (from = *fromP; from != fromLim; from += 2) { \
    int plane; \
    unsigned char lo2; \
    unsigned char lo = GET_LO(from); \
    unsigned char hi = GET_HI(from); \
    switch (hi) { \
    case 0: \
      if (lo < 0x80) { \
        if (*toP == toLim) { \
          *fromP = from; \
	  return; \
        } \
        *(*toP)++ = lo; \
        break; \
      } \
      /* fall through */ \
    case 0x1: case 0x2: case 0x3: \
    case 0x4: case 0x5: case 0x6: case 0x7: \
      if (toLim -  *toP < 2) { \
        *fromP = from; \
	return; \
      } \
      *(*toP)++ = ((lo >> 6) | (hi << 2) |  UTF8_cval2); \
      *(*toP)++ = ((lo & 0x3f) | 0x80); \
      break; \
    default: \
      if (toLim -  *toP < 3)  { \
        *fromP = from; \
	return; \
      } \
      /* 16 bits divided 4, 6, 6 amongst 3 bytes */ \
      *(*toP)++ = ((hi >> 4) | UTF8_cval3); \
      *(*toP)++ = (((hi & 0xf) << 2) | (lo >> 6) | 0x80); \
      *(*toP)++ = ((lo & 0x3f) | 0x80); \
      break; \
    case 0xD8: case 0xD9: case 0xDA: case 0xDB: \
      if (toLim -  *toP < 4) { \
	*fromP = from; \
	return; \
      } \
      plane = (((hi & 0x3) << 2) | ((lo >> 6) & 0x3)) + 1; \
      *(*toP)++ = ((plane >> 2) | UTF8_cval4); \
      *(*toP)++ = (((lo >> 2) & 0xF) | ((plane & 0x3) << 4) | 0x80); \
      from += 2; \
      lo2 = GET_LO(from); \
      *(*toP)++ = (((lo & 0x3) << 4) \
	           | ((GET_HI(from) & 0x3) << 2) \
		   | (lo2 >> 6) \
		   | 0x80); \
      *(*toP)++ = ((lo2 & 0x3f) | 0x80); \
      break; \
    } \
  } \
  *fromP = from; \
}

#define DEFINE_UTF16_TO_UTF16(E) \
static \
void E ## toUtf16(const ENCODING *enc, \
		  const char **fromP, const char *fromLim, \
		  unsigned short **toP, const unsigned short *toLim) \
{ \
  /* Avoid copying first half only of surrogate */ \
  if (fromLim - *fromP > ((toLim - *toP) << 1) \
      && (GET_HI(fromLim - 2) & 0xF8) == 0xD8) \
    fromLim -= 2; \
  for (; *fromP != fromLim && *toP != toLim; *fromP += 2) \
    *(*toP)++ = (GET_HI(*fromP) << 8) | GET_LO(*fromP); \
}

#define SET2(ptr, ch) \
  (((ptr)[0] = ((ch) & 0xff)), ((ptr)[1] = ((ch) >> 8)))
#define GET_LO(ptr) ((unsigned char)(ptr)[0])
#define GET_HI(ptr) ((unsigned char)(ptr)[1])

DEFINE_UTF16_TO_UTF8(little2_)
DEFINE_UTF16_TO_UTF16(little2_)

#undef SET2
#undef GET_LO
#undef GET_HI

#define SET2(ptr, ch) \
  (((ptr)[0] = ((ch) >> 8)), ((ptr)[1] = ((ch) & 0xFF)))
#define GET_LO(ptr) ((unsigned char)(ptr)[1])
#define GET_HI(ptr) ((unsigned char)(ptr)[0])

DEFINE_UTF16_TO_UTF8(big2_)
DEFINE_UTF16_TO_UTF16(big2_)

#undef SET2
#undef GET_LO
#undef GET_HI

#define LITTLE2_BYTE_TYPE(enc, p) \
 ((p)[1] == 0 \
  ? ((struct normal_encoding *)(enc))->type[(unsigned char)*(p)] \
  : unicode_byte_type((p)[1], (p)[0]))
#define LITTLE2_BYTE_TO_ASCII(enc, p) ((p)[1] == 0 ? (p)[0] : -1)
#define LITTLE2_CHAR_MATCHES(enc, p, c) ((p)[1] == 0 && (p)[0] == c)
#define LITTLE2_IS_NAME_CHAR_MINBPC(enc, p) \
  UCS2_GET_NAMING(namePages, (unsigned char)p[1], (unsigned char)p[0])
#define LITTLE2_IS_NMSTRT_CHAR_MINBPC(enc, p) \
  UCS2_GET_NAMING(nmstrtPages, (unsigned char)p[1], (unsigned char)p[0])

#ifdef XML_MIN_SIZE

static
int little2_byteType(const ENCODING *enc, const char *p)
{
  return LITTLE2_BYTE_TYPE(enc, p);
}

static
int little2_byteToAscii(const ENCODING *enc, const char *p)
{
  return LITTLE2_BYTE_TO_ASCII(enc, p);
}

static
int little2_charMatches(const ENCODING *enc, const char *p, int c)
{
  return LITTLE2_CHAR_MATCHES(enc, p, c);
}

static
int little2_isNameMin(const ENCODING *enc, const char *p)
{
  return LITTLE2_IS_NAME_CHAR_MINBPC(enc, p);
}

static
int little2_isNmstrtMin(const ENCODING *enc, const char *p)
{
  return LITTLE2_IS_NMSTRT_CHAR_MINBPC(enc, p);
}

#undef VTABLE
#define VTABLE VTABLE1, little2_toUtf8, little2_toUtf16

#else /* not XML_MIN_SIZE */

#undef PREFIX
#define PREFIX(ident) little2_ ## ident
#define MINBPC(enc) 2
/* CHAR_MATCHES is guaranteed to have MINBPC bytes available. */
#define BYTE_TYPE(enc, p) LITTLE2_BYTE_TYPE(enc, p)
#define BYTE_TO_ASCII(enc, p) LITTLE2_BYTE_TO_ASCII(enc, p) 
#define CHAR_MATCHES(enc, p, c) LITTLE2_CHAR_MATCHES(enc, p, c)
#define IS_NAME_CHAR(enc, p, n) 0
#define IS_NAME_CHAR_MINBPC(enc, p) LITTLE2_IS_NAME_CHAR_MINBPC(enc, p)
#define IS_NMSTRT_CHAR(enc, p, n) (0)
#define IS_NMSTRT_CHAR_MINBPC(enc, p) LITTLE2_IS_NMSTRT_CHAR_MINBPC(enc, p)

#include "xmltok_impl.c"

#undef MINBPC
#undef BYTE_TYPE
#undef BYTE_TO_ASCII
#undef CHAR_MATCHES
#undef IS_NAME_CHAR
#undef IS_NAME_CHAR_MINBPC
#undef IS_NMSTRT_CHAR
#undef IS_NMSTRT_CHAR_MINBPC
#undef IS_INVALID_CHAR

#endif /* not XML_MIN_SIZE */

#ifdef XML_NS

static const struct normal_encoding little2_encoding_ns = { 
  { VTABLE, 2, 0,
#if XML_BYTE_ORDER == 12
    1
#else
    0
#endif
  },
  {
#include "asciitab.h"
#include "latin1tab.h"
  },
  STANDARD_VTABLE(little2_)
};

#endif

static const struct normal_encoding little2_encoding = { 
  { VTABLE, 2, 0,
#if XML_BYTE_ORDER == 12
    1
#else
    0
#endif
  },
  {
#define BT_COLON BT_NMSTRT
#include "asciitab.h"
#undef BT_COLON
#include "latin1tab.h"
  },
  STANDARD_VTABLE(little2_)
};

#if XML_BYTE_ORDER != 21

#ifdef XML_NS

static const struct normal_encoding internal_little2_encoding_ns = { 
  { VTABLE, 2, 0, 1 },
  {
#include "iasciitab.h"
#include "latin1tab.h"
  },
  STANDARD_VTABLE(little2_)
};

#endif

static const struct normal_encoding internal_little2_encoding = { 
  { VTABLE, 2, 0, 1 },
  {
#define BT_COLON BT_NMSTRT
#include "iasciitab.h"
#undef BT_COLON
#include "latin1tab.h"
  },
  STANDARD_VTABLE(little2_)
};

#endif


#define BIG2_BYTE_TYPE(enc, p) \
 ((p)[0] == 0 \
  ? ((struct normal_encoding *)(enc))->type[(unsigned char)(p)[1]] \
  : unicode_byte_type((p)[0], (p)[1]))
#define BIG2_BYTE_TO_ASCII(enc, p) ((p)[0] == 0 ? (p)[1] : -1)
#define BIG2_CHAR_MATCHES(enc, p, c) ((p)[0] == 0 && (p)[1] == c)
#define BIG2_IS_NAME_CHAR_MINBPC(enc, p) \
  UCS2_GET_NAMING(namePages, (unsigned char)p[0], (unsigned char)p[1])
#define BIG2_IS_NMSTRT_CHAR_MINBPC(enc, p) \
  UCS2_GET_NAMING(nmstrtPages, (unsigned char)p[0], (unsigned char)p[1])

#ifdef XML_MIN_SIZE

static
int big2_byteType(const ENCODING *enc, const char *p)
{
  return BIG2_BYTE_TYPE(enc, p);
}

static
int big2_byteToAscii(const ENCODING *enc, const char *p)
{
  return BIG2_BYTE_TO_ASCII(enc, p);
}

static
int big2_charMatches(const ENCODING *enc, const char *p, int c)
{
  return BIG2_CHAR_MATCHES(enc, p, c);
}

static
int big2_isNameMin(const ENCODING *enc, const char *p)
{
  return BIG2_IS_NAME_CHAR_MINBPC(enc, p);
}

static
int big2_isNmstrtMin(const ENCODING *enc, const char *p)
{
  return BIG2_IS_NMSTRT_CHAR_MINBPC(enc, p);
}

#undef VTABLE
#define VTABLE VTABLE1, big2_toUtf8, big2_toUtf16

#else /* not XML_MIN_SIZE */

#undef PREFIX
#define PREFIX(ident) big2_ ## ident
#define MINBPC(enc) 2
/* CHAR_MATCHES is guaranteed to have MINBPC bytes available. */
#define BYTE_TYPE(enc, p) BIG2_BYTE_TYPE(enc, p)
#define BYTE_TO_ASCII(enc, p) BIG2_BYTE_TO_ASCII(enc, p) 
#define CHAR_MATCHES(enc, p, c) BIG2_CHAR_MATCHES(enc, p, c)
#define IS_NAME_CHAR(enc, p, n) 0
#define IS_NAME_CHAR_MINBPC(enc, p) BIG2_IS_NAME_CHAR_MINBPC(enc, p)
#define IS_NMSTRT_CHAR(enc, p, n) (0)
#define IS_NMSTRT_CHAR_MINBPC(enc, p) BIG2_IS_NMSTRT_CHAR_MINBPC(enc, p)

#include "xmltok_impl.c"

#undef MINBPC
#undef BYTE_TYPE
#undef BYTE_TO_ASCII
#undef CHAR_MATCHES
#undef IS_NAME_CHAR
#undef IS_NAME_CHAR_MINBPC
#undef IS_NMSTRT_CHAR
#undef IS_NMSTRT_CHAR_MINBPC
#undef IS_INVALID_CHAR

#endif /* not XML_MIN_SIZE */

#ifdef XML_NS

static const struct normal_encoding big2_encoding_ns = {
  { VTABLE, 2, 0,
#if XML_BYTE_ORDER == 21
  1
#else
  0
#endif
  },
  {
#include "asciitab.h"
#include "latin1tab.h"
  },
  STANDARD_VTABLE(big2_)
};

#endif

static const struct normal_encoding big2_encoding = {
  { VTABLE, 2, 0,
#if XML_BYTE_ORDER == 21
  1
#else
  0
#endif
  },
  {
#define BT_COLON BT_NMSTRT
#include "asciitab.h"
#undef BT_COLON
#include "latin1tab.h"
  },
  STANDARD_VTABLE(big2_)
};

#if XML_BYTE_ORDER != 12

#ifdef XML_NS

static const struct normal_encoding internal_big2_encoding_ns = {
  { VTABLE, 2, 0, 1 },
  {
#include "iasciitab.h"
#include "latin1tab.h"
  },
  STANDARD_VTABLE(big2_)
};

#endif

static const struct normal_encoding internal_big2_encoding = {
  { VTABLE, 2, 0, 1 },
  {
#define BT_COLON BT_NMSTRT
#include "iasciitab.h"
#undef BT_COLON
#include "latin1tab.h"
  },
  STANDARD_VTABLE(big2_)
};

#endif

#undef PREFIX

static
int streqci(const char *s1, const char *s2)
{
  for (;;) {
    char c1 = *s1++;
    char c2 = *s2++;
    if ('a' <= c1 && c1 <= 'z')
      c1 += 'A' - 'a';
    if ('a' <= c2 && c2 <= 'z')
      c2 += 'A' - 'a';
    if (c1 != c2)
      return 0;
    if (!c1)
      break;
  }
  return 1;
}

static
void initUpdatePosition(const ENCODING *enc, const char *ptr,
			const char *end, POSITION *pos)
{
  normal_updatePosition(&utf8_encoding.enc, ptr, end, pos);
}

static
int toAscii(const ENCODING *enc, const char *ptr, const char *end)
{
  char buf[1];
  char *p = buf;
  XmlUtf8Convert(enc, &ptr, end, &p, p + 1);
  if (p == buf)
    return -1;
  else
    return buf[0];
}

static
int isSpace(int c)
{
  switch (c) {
  case 0x20:
  case 0xD:
  case 0xA:
  case 0x9:	
    return 1;
  }
  return 0;
}

/* Return 1 if there's just optional white space
or there's an S followed by name=val. */
static
int parsePseudoAttribute(const ENCODING *enc,
			 const char *ptr,
			 const char *end,
			 const char **namePtr,
			 const char **nameEndPtr,
			 const char **valPtr,
			 const char **nextTokPtr)
{
  int c;
  char open;
  if (ptr == end) {
    *namePtr = 0;
    return 1;
  }
  if (!isSpace(toAscii(enc, ptr, end))) {
    *nextTokPtr = ptr;
    return 0;
  }
  do {
    ptr += enc->minBytesPerChar;
  } while (isSpace(toAscii(enc, ptr, end)));
  if (ptr == end) {
    *namePtr = 0;
    return 1;
  }
  *namePtr = ptr;
  for (;;) {
    c = toAscii(enc, ptr, end);
    if (c == -1) {
      *nextTokPtr = ptr;
      return 0;
    }
    if (c == '=') {
      *nameEndPtr = ptr;
      break;
    }
    if (isSpace(c)) {
      *nameEndPtr = ptr;
      do {
	ptr += enc->minBytesPerChar;
      } while (isSpace(c = toAscii(enc, ptr, end)));
      if (c != '=') {
	*nextTokPtr = ptr;
	return 0;
      }
      break;
    }
    ptr += enc->minBytesPerChar;
  }
  if (ptr == *namePtr) {
    *nextTokPtr = ptr;
    return 0;
  }
  ptr += enc->minBytesPerChar;
  c = toAscii(enc, ptr, end);
  while (isSpace(c)) {
    ptr += enc->minBytesPerChar;
    c = toAscii(enc, ptr, end);
  }
  if (c != '"' && c != '\'') {
    *nextTokPtr = ptr;
    return 0;
  }
  open = c;
  ptr += enc->minBytesPerChar;
  *valPtr = ptr;
  for (;; ptr += enc->minBytesPerChar) {
    c = toAscii(enc, ptr, end);
    if (c == open)
      break;
    if (!('a' <= c && c <= 'z')
	&& !('A' <= c && c <= 'Z')
	&& !('0' <= c && c <= '9')
	&& c != '.'
	&& c != '-'
	&& c != '_') {
      *nextTokPtr = ptr;
      return 0;
    }
  }
  *nextTokPtr = ptr + enc->minBytesPerChar;
  return 1;
}

static
int doParseXmlDecl(const ENCODING *(*encodingFinder)(const ENCODING *,
		                                     const char *,
						     const char *),
		   int isGeneralTextEntity,
		   const ENCODING *enc,
		   const char *ptr,
		   const char *end,
		   const char **badPtr,
		   const char **versionPtr,
		   const char **encodingName,
		   const ENCODING **encoding,
		   int *standalone)
{
  const char *val = 0;
  const char *name = 0;
  const char *nameEnd = 0;
  ptr += 5 * enc->minBytesPerChar;
  end -= 2 * enc->minBytesPerChar;
  if (!parsePseudoAttribute(enc, ptr, end, &name, &nameEnd, &val, &ptr) || !name) {
    *badPtr = ptr;
    return 0;
  }
  if (!XmlNameMatchesAscii(enc, name, nameEnd, "version")) {
    if (!isGeneralTextEntity) {
      *badPtr = name;
      return 0;
    }
  }
  else {
    if (versionPtr)
      *versionPtr = val;
    if (!parsePseudoAttribute(enc, ptr, end, &name, &nameEnd, &val, &ptr)) {
      *badPtr = ptr;
      return 0;
    }
    if (!name) {
      if (isGeneralTextEntity) {
	/* a TextDecl must have an EncodingDecl */
	*badPtr = ptr;
	return 0;
      }
      return 1;
    }
  }
  if (XmlNameMatchesAscii(enc, name, nameEnd, "encoding")) {
    int c = toAscii(enc, val, end);
    if (!('a' <= c && c <= 'z') && !('A' <= c && c <= 'Z')) {
      *badPtr = val;
      return 0;
    }
    if (encodingName)
      *encodingName = val;
    if (encoding)
      *encoding = encodingFinder(enc, val, ptr - enc->minBytesPerChar);
    if (!parsePseudoAttribute(enc, ptr, end, &name, &nameEnd, &val, &ptr)) {
      *badPtr = ptr;
      return 0;
    }
    if (!name)
      return 1;
  }
  if (!XmlNameMatchesAscii(enc, name, nameEnd, "standalone") || isGeneralTextEntity) {
    *badPtr = name;
    return 0;
  }
  if (XmlNameMatchesAscii(enc, val, ptr - enc->minBytesPerChar, "yes")) {
    if (standalone)
      *standalone = 1;
  }
  else if (XmlNameMatchesAscii(enc, val, ptr - enc->minBytesPerChar, "no")) {
    if (standalone)
      *standalone = 0;
  }
  else {
    *badPtr = val;
    return 0;
  }
  while (isSpace(toAscii(enc, ptr, end)))
    ptr += enc->minBytesPerChar;
  if (ptr != end) {
    *badPtr = ptr;
    return 0;
  }
  return 1;
}

static
int checkCharRefNumber(int result)
{
  switch (result >> 8) {
  case 0xD8: case 0xD9: case 0xDA: case 0xDB:
  case 0xDC: case 0xDD: case 0xDE: case 0xDF:
    return -1;
  case 0:
    if (latin1_encoding.type[result] == BT_NONXML)
      return -1;
    break;
  case 0xFF:
    if (result == 0xFFFE || result == 0xFFFF)
      return -1;
    break;
  }
  return result;
}

int XmlUtf8Encode(int c, char *buf)
{
  enum {
    /* minN is minimum legal resulting value for N byte sequence */
    min2 = 0x80,
    min3 = 0x800,
    min4 = 0x10000
  };

  if (c < 0)
    return 0;
  if (c < min2) {
    buf[0] = (c | UTF8_cval1);
    return 1;
  }
  if (c < min3) {
    buf[0] = ((c >> 6) | UTF8_cval2);
    buf[1] = ((c & 0x3f) | 0x80);
    return 2;
  }
  if (c < min4) {
    buf[0] = ((c >> 12) | UTF8_cval3);
    buf[1] = (((c >> 6) & 0x3f) | 0x80);
    buf[2] = ((c & 0x3f) | 0x80);
    return 3;
  }
  if (c < 0x110000) {
    buf[0] = ((c >> 18) | UTF8_cval4);
    buf[1] = (((c >> 12) & 0x3f) | 0x80);
    buf[2] = (((c >> 6) & 0x3f) | 0x80);
    buf[3] = ((c & 0x3f) | 0x80);
    return 4;
  }
  return 0;
}

int XmlUtf16Encode(int charNum, unsigned short *buf)
{
  if (charNum < 0)
    return 0;
  if (charNum < 0x10000) {
    buf[0] = charNum;
    return 1;
  }
  if (charNum < 0x110000) {
    charNum -= 0x10000;
    buf[0] = (charNum >> 10) + 0xD800;
    buf[1] = (charNum & 0x3FF) + 0xDC00;
    return 2;
  }
  return 0;
}

struct unknown_encoding {
  struct normal_encoding normal;
  int (*convert)(void *userData, const char *p);
  void *userData;
  unsigned short utf16[256];
  char utf8[256][4];
};

int XmlSizeOfUnknownEncoding(void)
{
  return sizeof(struct unknown_encoding);
}

static
int unknown_isName(const ENCODING *enc, const char *p)
{
  int c = ((const struct unknown_encoding *)enc)
	  ->convert(((const struct unknown_encoding *)enc)->userData, p);
  if (c & ~0xFFFF)
    return 0;
  return UCS2_GET_NAMING(namePages, c >> 8, c & 0xFF);
}

static
int unknown_isNmstrt(const ENCODING *enc, const char *p)
{
  int c = ((const struct unknown_encoding *)enc)
	  ->convert(((const struct unknown_encoding *)enc)->userData, p);
  if (c & ~0xFFFF)
    return 0;
  return UCS2_GET_NAMING(nmstrtPages, c >> 8, c & 0xFF);
}

static
int unknown_isInvalid(const ENCODING *enc, const char *p)
{
  int c = ((const struct unknown_encoding *)enc)
	   ->convert(((const struct unknown_encoding *)enc)->userData, p);
  return (c & ~0xFFFF) || checkCharRefNumber(c) < 0;
}

static
void unknown_toUtf8(const ENCODING *enc,
		    const char **fromP, const char *fromLim,
		    char **toP, const char *toLim)
{
  char buf[XML_UTF8_ENCODE_MAX];
  for (;;) {
    const char *utf8;
    int n;
    if (*fromP == fromLim)
      break;
    utf8 = ((const struct unknown_encoding *)enc)->utf8[(unsigned char)**fromP];
    n = *utf8++;
    if (n == 0) {
      int c = ((const struct unknown_encoding *)enc)
	      ->convert(((const struct unknown_encoding *)enc)->userData, *fromP);
      n = XmlUtf8Encode(c, buf);
      if (n > toLim - *toP)
	break;
      utf8 = buf;
      *fromP += ((const struct normal_encoding *)enc)->type[(unsigned char)**fromP]
	         - (BT_LEAD2 - 2);
    }
    else {
      if (n > toLim - *toP)
	break;
      (*fromP)++;
    }
    do {
      *(*toP)++ = *utf8++;
    } while (--n != 0);
  }
}

static
void unknown_toUtf16(const ENCODING *enc,
		     const char **fromP, const char *fromLim,
		     unsigned short **toP, const unsigned short *toLim)
{
  while (*fromP != fromLim && *toP != toLim) {
    unsigned short c
      = ((const struct unknown_encoding *)enc)->utf16[(unsigned char)**fromP];
    if (c == 0) {
      c = (unsigned short)((const struct unknown_encoding *)enc)
	   ->convert(((const struct unknown_encoding *)enc)->userData, *fromP);
      *fromP += ((const struct normal_encoding *)enc)->type[(unsigned char)**fromP]
	         - (BT_LEAD2 - 2);
    }
    else
      (*fromP)++;
    *(*toP)++ = c;
  }
}

ENCODING *
XmlInitUnknownEncoding(void *mem,
		       int *table,
		       int (*convert)(void *userData, const char *p),
		       void *userData)
{
  int i;
  struct unknown_encoding *e = mem;
  for (i = 0; i < sizeof(struct normal_encoding); i++)
    ((char *)mem)[i] = ((char *)&latin1_encoding)[i];
  for (i = 0; i < 128; i++)
    if (latin1_encoding.type[i] != BT_OTHER
        && latin1_encoding.type[i] != BT_NONXML
	&& table[i] != i)
      return 0;
  for (i = 0; i < 256; i++) {
    int c = table[i];
    if (c == -1) {
      e->normal.type[i] = BT_MALFORM;
      /* This shouldn't really get used. */
      e->utf16[i] = 0xFFFF;
      e->utf8[i][0] = 1;
      e->utf8[i][1] = 0;
    }
    else if (c < 0) {
      if (c < -4)
	return 0;
      e->normal.type[i] = BT_LEAD2 - (c + 2);
      e->utf8[i][0] = 0;
      e->utf16[i] = 0;
    }
    else if (c < 0x80) {
      if (latin1_encoding.type[c] != BT_OTHER
	  && latin1_encoding.type[c] != BT_NONXML
	  && c != i)
	return 0;
      e->normal.type[i] = latin1_encoding.type[c];
      e->utf8[i][0] = 1;
      e->utf8[i][1] = (char)c;
      e->utf16[i] = c == 0 ? 0xFFFF : c;
    }
    else if (checkCharRefNumber(c) < 0) {
      e->normal.type[i] = BT_NONXML;
      /* This shouldn't really get used. */
      e->utf16[i] = 0xFFFF;
      e->utf8[i][0] = 1;
      e->utf8[i][1] = 0;
    }
    else {
      if (c > 0xFFFF)
	return 0;
      if (UCS2_GET_NAMING(nmstrtPages, c >> 8, c & 0xff))
	e->normal.type[i] = BT_NMSTRT;
      else if (UCS2_GET_NAMING(namePages, c >> 8, c & 0xff))
	e->normal.type[i] = BT_NAME;
      else
	e->normal.type[i] = BT_OTHER;
      e->utf8[i][0] = (char)XmlUtf8Encode(c, e->utf8[i] + 1);
      e->utf16[i] = c;
    }
  }
  e->userData = userData;
  e->convert = convert;
  if (convert) {
    e->normal.isName2 = unknown_isName;
    e->normal.isName3 = unknown_isName;
    e->normal.isName4 = unknown_isName;
    e->normal.isNmstrt2 = unknown_isNmstrt;
    e->normal.isNmstrt3 = unknown_isNmstrt;
    e->normal.isNmstrt4 = unknown_isNmstrt;
    e->normal.isInvalid2 = unknown_isInvalid;
    e->normal.isInvalid3 = unknown_isInvalid;
    e->normal.isInvalid4 = unknown_isInvalid;
  }
  e->normal.enc.utf8Convert = unknown_toUtf8;
  e->normal.enc.utf16Convert = unknown_toUtf16;
  return &(e->normal.enc);
}

/* If this enumeration is changed, getEncodingIndex and encodings
must also be changed. */
enum {
  UNKNOWN_ENC = -1,
  ISO_8859_1_ENC = 0,
  US_ASCII_ENC,
  UTF_8_ENC,
  UTF_16_ENC,
  UTF_16BE_ENC,
  UTF_16LE_ENC,
  /* must match encodingNames up to here */
  NO_ENC
};

static
int getEncodingIndex(const char *name)
{
  static const char *encodingNames[] = {
    "ISO-8859-1",
    "US-ASCII",
    "UTF-8",
    "UTF-16",
    "UTF-16BE"
    "UTF-16LE",
  };
  int i;
  if (name == 0)
    return NO_ENC;
  for (i = 0; i < sizeof(encodingNames)/sizeof(encodingNames[0]); i++)
    if (streqci(name, encodingNames[i]))
      return i;
  return UNKNOWN_ENC;
}

/* For binary compatibility, we store the index of the encoding specified
at initialization in the isUtf16 member. */

#define INIT_ENC_INDEX(enc) ((int)(enc)->initEnc.isUtf16)
#define SET_INIT_ENC_INDEX(enc, i) ((enc)->initEnc.isUtf16 = (char)i)

/* This is what detects the encoding.
encodingTable maps from encoding indices to encodings;
INIT_ENC_INDEX(enc) is the index of the external (protocol) specified encoding;
state is XML_CONTENT_STATE if we're parsing an external text entity,
and XML_PROLOG_STATE otherwise.
*/


static
int initScan(const ENCODING **encodingTable,
	     const INIT_ENCODING *enc,
	     int state,
	     const char *ptr,
	     const char *end,
	     const char **nextTokPtr)
{
  const ENCODING **encPtr;

  if (ptr == end)
    return XML_TOK_NONE;
  encPtr = enc->encPtr;
  if (ptr + 1 == end) {
    /* only a single byte available for auto-detection */
#ifndef XML_DTD /* FIXME */
    /* a well-formed document entity must have more than one byte */
    if (state != XML_CONTENT_STATE)
      return XML_TOK_PARTIAL;
#endif
    /* so we're parsing an external text entity... */
    /* if UTF-16 was externally specified, then we need at least 2 bytes */
    switch (INIT_ENC_INDEX(enc)) {
    case UTF_16_ENC:
    case UTF_16LE_ENC:
    case UTF_16BE_ENC:
      return XML_TOK_PARTIAL;
    }
    switch ((unsigned char)*ptr) {
    case 0xFE:
    case 0xFF:
    case 0xEF: /* possibly first byte of UTF-8 BOM */
      if (INIT_ENC_INDEX(enc) == ISO_8859_1_ENC
	  && state == XML_CONTENT_STATE)
	break;
      /* fall through */
    case 0x00:
    case 0x3C:
      return XML_TOK_PARTIAL;
    }
  }
  else {
    switch (((unsigned char)ptr[0] << 8) | (unsigned char)ptr[1]) {
    case 0xFEFF:
      if (INIT_ENC_INDEX(enc) == ISO_8859_1_ENC
	  && state == XML_CONTENT_STATE)
	break;
      *nextTokPtr = ptr + 2;
      *encPtr = encodingTable[UTF_16BE_ENC];
      return XML_TOK_BOM;
    /* 00 3C is handled in the default case */
    case 0x3C00:
      if ((INIT_ENC_INDEX(enc) == UTF_16BE_ENC
	   || INIT_ENC_INDEX(enc) == UTF_16_ENC)
	  && state == XML_CONTENT_STATE)
	break;
      *encPtr = encodingTable[UTF_16LE_ENC];
      return XmlTok(*encPtr, state, ptr, end, nextTokPtr);
    case 0xFFFE:
      if (INIT_ENC_INDEX(enc) == ISO_8859_1_ENC
	  && state == XML_CONTENT_STATE)
	break;
      *nextTokPtr = ptr + 2;
      *encPtr = encodingTable[UTF_16LE_ENC];
      return XML_TOK_BOM;
    case 0xEFBB:
      /* Maybe a UTF-8 BOM (EF BB BF) */
      /* If there's an explicitly specified (external) encoding
         of ISO-8859-1 or some flavour of UTF-16
         and this is an external text entity,
	 don't look for the BOM,
         because it might be a legal data. */
      if (state == XML_CONTENT_STATE) {
	int e = INIT_ENC_INDEX(enc);
	if (e == ISO_8859_1_ENC || e == UTF_16BE_ENC || e == UTF_16LE_ENC || e == UTF_16_ENC)
	  break;
      }
      if (ptr + 2 == end)
	return XML_TOK_PARTIAL;
      if ((unsigned char)ptr[2] == 0xBF) {
	*encPtr = encodingTable[UTF_8_ENC];
	return XML_TOK_BOM;
      }
      break;
    default:
      if (ptr[0] == '\0') {
	/* 0 isn't a legal data character. Furthermore a document entity can only
	   start with ASCII characters.  So the only way this can fail to be big-endian
	   UTF-16 if it it's an external parsed general entity that's labelled as
	   UTF-16LE. */
	if (state == XML_CONTENT_STATE && INIT_ENC_INDEX(enc) == UTF_16LE_ENC)
	  break;
	*encPtr = encodingTable[UTF_16BE_ENC];
	return XmlTok(*encPtr, state, ptr, end, nextTokPtr);
      }
      else if (ptr[1] == '\0') {
	/* We could recover here in the case:
	    - parsing an external entity
	    - second byte is 0
	    - no externally specified encoding
	    - no encoding declaration
	   by assuming UTF-16LE.  But we don't, because this would mean when
	   presented just with a single byte, we couldn't reliably determine
	   whether we needed further bytes. */
	if (state == XML_CONTENT_STATE)
	  break;
	*encPtr = encodingTable[UTF_16LE_ENC];
	return XmlTok(*encPtr, state, ptr, end, nextTokPtr);
      }
      break;
    }
  }
  *encPtr = encodingTable[INIT_ENC_INDEX(enc)];
  return XmlTok(*encPtr, state, ptr, end, nextTokPtr);
}


#define NS(x) x
#define ns(x) x
#include "xmltok_ns.c"
#undef NS
#undef ns

#ifdef XML_NS

#define NS(x) x ## NS
#define ns(x) x ## _ns

#include "xmltok_ns.c"

#undef NS
#undef ns

ENCODING *
XmlInitUnknownEncodingNS(void *mem,
		         int *table,
		         int (*convert)(void *userData, const char *p),
		         void *userData)
{
  ENCODING *enc = XmlInitUnknownEncoding(mem, table, convert, userData);
  if (enc)
    ((struct normal_encoding *)enc)->type[':'] = BT_COLON;
  return enc;
}

#endif /* XML_NS */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmltok.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#ifndef XmlTok_INCLUDED
#define XmlTok_INCLUDED 1

#ifdef __cplusplus
extern "C" {
#endif

#ifndef XMLTOKAPI
#define XMLTOKAPI /* as nothing */
#endif

/* The following token may be returned by XmlContentTok */
#define XML_TOK_TRAILING_RSQB -5 /* ] or ]] at the end of the scan; might be start of
                                    illegal ]]> sequence */
/* The following tokens may be returned by both XmlPrologTok and XmlContentTok */
#define XML_TOK_NONE -4    /* The string to be scanned is empty */
#define XML_TOK_TRAILING_CR -3 /* A CR at the end of the scan;
                                  might be part of CRLF sequence */ 
#define XML_TOK_PARTIAL_CHAR -2 /* only part of a multibyte sequence */
#define XML_TOK_PARTIAL -1 /* only part of a token */
#define XML_TOK_INVALID 0

/* The following tokens are returned by XmlContentTok; some are also
  returned by XmlAttributeValueTok, XmlEntityTok, XmlCdataSectionTok */

#define XML_TOK_START_TAG_WITH_ATTS 1
#define XML_TOK_START_TAG_NO_ATTS 2
#define XML_TOK_EMPTY_ELEMENT_WITH_ATTS 3 /* empty element tag <e/> */
#define XML_TOK_EMPTY_ELEMENT_NO_ATTS 4
#define XML_TOK_END_TAG 5
#define XML_TOK_DATA_CHARS 6
#define XML_TOK_DATA_NEWLINE 7
#define XML_TOK_CDATA_SECT_OPEN 8
#define XML_TOK_ENTITY_REF 9
#define XML_TOK_CHAR_REF 10     /* numeric character reference */

/* The following tokens may be returned by both XmlPrologTok and XmlContentTok */
#define XML_TOK_PI 11      /* processing instruction */
#define XML_TOK_XML_DECL 12 /* XML decl or text decl */
#define XML_TOK_COMMENT 13
#define XML_TOK_BOM 14     /* Byte order mark */

/* The following tokens are returned only by XmlPrologTok */
#define XML_TOK_PROLOG_S 15
#define XML_TOK_DECL_OPEN 16 /* <!foo */
#define XML_TOK_DECL_CLOSE 17 /* > */
#define XML_TOK_NAME 18
#define XML_TOK_NMTOKEN 19
#define XML_TOK_POUND_NAME 20 /* #name */
#define XML_TOK_OR 21 /* | */
#define XML_TOK_PERCENT 22
#define XML_TOK_OPEN_PAREN 23
#define XML_TOK_CLOSE_PAREN 24
#define XML_TOK_OPEN_BRACKET 25
#define XML_TOK_CLOSE_BRACKET 26
#define XML_TOK_LITERAL 27
#define XML_TOK_PARAM_ENTITY_REF 28
#define XML_TOK_INSTANCE_START 29

/* The following occur only in element type declarations */
#define XML_TOK_NAME_QUESTION 30 /* name? */
#define XML_TOK_NAME_ASTERISK 31 /* name* */
#define XML_TOK_NAME_PLUS 32 /* name+ */
#define XML_TOK_COND_SECT_OPEN 33 /* <![ */
#define XML_TOK_COND_SECT_CLOSE 34 /* ]]> */
#define XML_TOK_CLOSE_PAREN_QUESTION 35 /* )? */
#define XML_TOK_CLOSE_PAREN_ASTERISK 36 /* )* */
#define XML_TOK_CLOSE_PAREN_PLUS 37 /* )+ */
#define XML_TOK_COMMA 38

/* The following token is returned only by XmlAttributeValueTok */
#define XML_TOK_ATTRIBUTE_VALUE_S 39

/* The following token is returned only by XmlCdataSectionTok */
#define XML_TOK_CDATA_SECT_CLOSE 40

/* With namespace processing this is returned by XmlPrologTok
   for a name with a colon. */
#define XML_TOK_PREFIXED_NAME 41

#ifdef XML_DTD
#define XML_TOK_IGNORE_SECT 42
#endif /* XML_DTD */

#ifdef XML_DTD
#define XML_N_STATES 4
#else /* not XML_DTD */
#define XML_N_STATES 3
#endif /* not XML_DTD */

#define XML_PROLOG_STATE 0
#define XML_CONTENT_STATE 1
#define XML_CDATA_SECTION_STATE 2
#ifdef XML_DTD
#define XML_IGNORE_SECTION_STATE 3
#endif /* XML_DTD */

#define XML_N_LITERAL_TYPES 2
#define XML_ATTRIBUTE_VALUE_LITERAL 0
#define XML_ENTITY_VALUE_LITERAL 1

/* The size of the buffer passed to XmlUtf8Encode must be at least this. */
#define XML_UTF8_ENCODE_MAX 4
/* The size of the buffer passed to XmlUtf16Encode must be at least this. */
#define XML_UTF16_ENCODE_MAX 2

typedef struct position {
  /* first line and first column are 0 not 1 */
  unsigned long lineNumber;
  unsigned long columnNumber;
} POSITION;

typedef struct {
  const char *name;
  const char *valuePtr;
  const char *valueEnd;
  char normalized;
} ATTRIBUTE;

struct encoding;
typedef struct encoding ENCODING;

struct encoding {
  int (*scanners[XML_N_STATES])(const ENCODING *,
			        const char *,
			        const char *,
			        const char **);
  int (*literalScanners[XML_N_LITERAL_TYPES])(const ENCODING *,
					      const char *,
					      const char *,
					      const char **);
  int (*sameName)(const ENCODING *,
	          const char *, const char *);
  int (*nameMatchesAscii)(const ENCODING *,
			  const char *, const char *, const char *);
  int (*nameLength)(const ENCODING *, const char *);
  const char *(*skipS)(const ENCODING *, const char *);
  int (*getAtts)(const ENCODING *enc, const char *ptr,
	         int attsMax, ATTRIBUTE *atts);
  int (*charRefNumber)(const ENCODING *enc, const char *ptr);
  int (*predefinedEntityName)(const ENCODING *, const char *, const char *);
  void (*updatePosition)(const ENCODING *,
			 const char *ptr,
			 const char *end,
			 POSITION *);
  int (*isPublicId)(const ENCODING *enc, const char *ptr, const char *end,
		    const char **badPtr);
  void (*utf8Convert)(const ENCODING *enc,
		      const char **fromP,
		      const char *fromLim,
		      char **toP,
		      const char *toLim);
  void (*utf16Convert)(const ENCODING *enc,
		       const char **fromP,
		       const char *fromLim,
		       unsigned short **toP,
		       const unsigned short *toLim);
  int minBytesPerChar;
  char isUtf8;
  char isUtf16;
};

/*
Scan the string starting at ptr until the end of the next complete token,
but do not scan past eptr.  Return an integer giving the type of token.

Return XML_TOK_NONE when ptr == eptr; nextTokPtr will not be set.

Return XML_TOK_PARTIAL when the string does not contain a complete token;
nextTokPtr will not be set.

Return XML_TOK_INVALID when the string does not start a valid token; nextTokPtr
will be set to point to the character which made the token invalid.

Otherwise the string starts with a valid token; nextTokPtr will be set to point
to the character following the end of that token.

Each data character counts as a single token, but adjacent data characters
may be returned together.  Similarly for characters in the prolog outside
literals, comments and processing instructions.
*/


#define XmlTok(enc, state, ptr, end, nextTokPtr) \
  (((enc)->scanners[state])(enc, ptr, end, nextTokPtr))

#define XmlPrologTok(enc, ptr, end, nextTokPtr) \
   XmlTok(enc, XML_PROLOG_STATE, ptr, end, nextTokPtr)

#define XmlContentTok(enc, ptr, end, nextTokPtr) \
   XmlTok(enc, XML_CONTENT_STATE, ptr, end, nextTokPtr)

#define XmlCdataSectionTok(enc, ptr, end, nextTokPtr) \
   XmlTok(enc, XML_CDATA_SECTION_STATE, ptr, end, nextTokPtr)

#ifdef XML_DTD

#define XmlIgnoreSectionTok(enc, ptr, end, nextTokPtr) \
   XmlTok(enc, XML_IGNORE_SECTION_STATE, ptr, end, nextTokPtr)

#endif /* XML_DTD */

/* This is used for performing a 2nd-level tokenization on
the content of a literal that has already been returned by XmlTok. */ 

#define XmlLiteralTok(enc, literalType, ptr, end, nextTokPtr) \
  (((enc)->literalScanners[literalType])(enc, ptr, end, nextTokPtr))

#define XmlAttributeValueTok(enc, ptr, end, nextTokPtr) \
   XmlLiteralTok(enc, XML_ATTRIBUTE_VALUE_LITERAL, ptr, end, nextTokPtr)

#define XmlEntityValueTok(enc, ptr, end, nextTokPtr) \
   XmlLiteralTok(enc, XML_ENTITY_VALUE_LITERAL, ptr, end, nextTokPtr)

#define XmlSameName(enc, ptr1, ptr2) (((enc)->sameName)(enc, ptr1, ptr2))

#define XmlNameMatchesAscii(enc, ptr1, end1, ptr2) \
  (((enc)->nameMatchesAscii)(enc, ptr1, end1, ptr2))

#define XmlNameLength(enc, ptr) \
  (((enc)->nameLength)(enc, ptr))

#define XmlSkipS(enc, ptr) \
  (((enc)->skipS)(enc, ptr))

#define XmlGetAttributes(enc, ptr, attsMax, atts) \
  (((enc)->getAtts)(enc, ptr, attsMax, atts))

#define XmlCharRefNumber(enc, ptr) \
  (((enc)->charRefNumber)(enc, ptr))

#define XmlPredefinedEntityName(enc, ptr, end) \
  (((enc)->predefinedEntityName)(enc, ptr, end))

#define XmlUpdatePosition(enc, ptr, end, pos) \
  (((enc)->updatePosition)(enc, ptr, end, pos))

#define XmlIsPublicId(enc, ptr, end, badPtr) \
  (((enc)->isPublicId)(enc, ptr, end, badPtr))

#define XmlUtf8Convert(enc, fromP, fromLim, toP, toLim) \
  (((enc)->utf8Convert)(enc, fromP, fromLim, toP, toLim))

#define XmlUtf16Convert(enc, fromP, fromLim, toP, toLim) \
  (((enc)->utf16Convert)(enc, fromP, fromLim, toP, toLim))

typedef struct {
  ENCODING initEnc;
  const ENCODING **encPtr;
} INIT_ENCODING;

int XMLTOKAPI XmlParseXmlDecl(int isGeneralTextEntity,
			      const ENCODING *enc,
			      const char *ptr,
	  		      const char *end,
			      const char **badPtr,
			      const char **versionPtr,
			      const char **encodingNamePtr,
			      const ENCODING **namedEncodingPtr,
			      int *standalonePtr);

int XMLTOKAPI XmlInitEncoding(INIT_ENCODING *, const ENCODING **, const char *name);
const ENCODING XMLTOKAPI *XmlGetUtf8InternalEncoding(void);
const ENCODING XMLTOKAPI *XmlGetUtf16InternalEncoding(void);
int XMLTOKAPI XmlUtf8Encode(int charNumber, char *buf);
int XMLTOKAPI XmlUtf16Encode(int charNumber, unsigned short *buf);

int XMLTOKAPI XmlSizeOfUnknownEncoding(void);
ENCODING XMLTOKAPI *
XmlInitUnknownEncoding(void *mem,
		       int *table,
		       int (*conv)(void *userData, const char *p),
		       void *userData);

int XMLTOKAPI XmlParseXmlDeclNS(int isGeneralTextEntity,
			        const ENCODING *enc,
			        const char *ptr,
	  		        const char *end,
			        const char **badPtr,
			        const char **versionPtr,
			        const char **encodingNamePtr,
			        const ENCODING **namedEncodingPtr,
			        int *standalonePtr);
int XMLTOKAPI XmlInitEncodingNS(INIT_ENCODING *, const ENCODING **, const char *name);
const ENCODING XMLTOKAPI *XmlGetUtf8InternalEncodingNS();
const ENCODING XMLTOKAPI *XmlGetUtf16InternalEncodingNS();
ENCODING XMLTOKAPI *
XmlInitUnknownEncodingNS(void *mem,
		         int *table,
		         int (*conv)(void *userData, const char *p),
		         void *userData);
#ifdef __cplusplus
}
#endif

#endif /* not XmlTok_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\codepage.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

int codepageMap(int cp, int *map);
int codepageConvert(int cp, const char *p);
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmltok_impl.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#ifndef IS_INVALID_CHAR
#define IS_INVALID_CHAR(enc, ptr, n) (0)
#endif

#define INVALID_LEAD_CASE(n, ptr, nextTokPtr) \
    case BT_LEAD ## n: \
      if (end - ptr < n) \
	return XML_TOK_PARTIAL_CHAR; \
      if (IS_INVALID_CHAR(enc, ptr, n)) { \
        *(nextTokPtr) = (ptr); \
        return XML_TOK_INVALID; \
      } \
      ptr += n; \
      break;

#define INVALID_CASES(ptr, nextTokPtr) \
  INVALID_LEAD_CASE(2, ptr, nextTokPtr) \
  INVALID_LEAD_CASE(3, ptr, nextTokPtr) \
  INVALID_LEAD_CASE(4, ptr, nextTokPtr) \
  case BT_NONXML: \
  case BT_MALFORM: \
  case BT_TRAIL: \
    *(nextTokPtr) = (ptr); \
    return XML_TOK_INVALID;

#define CHECK_NAME_CASE(n, enc, ptr, end, nextTokPtr) \
   case BT_LEAD ## n: \
     if (end - ptr < n) \
       return XML_TOK_PARTIAL_CHAR; \
     if (!IS_NAME_CHAR(enc, ptr, n)) { \
       *nextTokPtr = ptr; \
       return XML_TOK_INVALID; \
     } \
     ptr += n; \
     break;

#define CHECK_NAME_CASES(enc, ptr, end, nextTokPtr) \
  case BT_NONASCII: \
    if (!IS_NAME_CHAR_MINBPC(enc, ptr)) { \
      *nextTokPtr = ptr; \
      return XML_TOK_INVALID; \
    } \
  case BT_NMSTRT: \
  case BT_HEX: \
  case BT_DIGIT: \
  case BT_NAME: \
  case BT_MINUS: \
    ptr += MINBPC(enc); \
    break; \
  CHECK_NAME_CASE(2, enc, ptr, end, nextTokPtr) \
  CHECK_NAME_CASE(3, enc, ptr, end, nextTokPtr) \
  CHECK_NAME_CASE(4, enc, ptr, end, nextTokPtr)

#define CHECK_NMSTRT_CASE(n, enc, ptr, end, nextTokPtr) \
   case BT_LEAD ## n: \
     if (end - ptr < n) \
       return XML_TOK_PARTIAL_CHAR; \
     if (!IS_NMSTRT_CHAR(enc, ptr, n)) { \
       *nextTokPtr = ptr; \
       return XML_TOK_INVALID; \
     } \
     ptr += n; \
     break;

#define CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr) \
  case BT_NONASCII: \
    if (!IS_NMSTRT_CHAR_MINBPC(enc, ptr)) { \
      *nextTokPtr = ptr; \
      return XML_TOK_INVALID; \
    } \
  case BT_NMSTRT: \
  case BT_HEX: \
    ptr += MINBPC(enc); \
    break; \
  CHECK_NMSTRT_CASE(2, enc, ptr, end, nextTokPtr) \
  CHECK_NMSTRT_CASE(3, enc, ptr, end, nextTokPtr) \
  CHECK_NMSTRT_CASE(4, enc, ptr, end, nextTokPtr)

#ifndef PREFIX
#define PREFIX(ident) ident
#endif

/* ptr points to character following "<!-" */

static
int PREFIX(scanComment)(const ENCODING *enc, const char *ptr, const char *end,
			const char **nextTokPtr)
{
  if (ptr != end) {
    if (!CHAR_MATCHES(enc, ptr, '-')) {
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
    ptr += MINBPC(enc);
    while (ptr != end) {
      switch (BYTE_TYPE(enc, ptr)) {
      INVALID_CASES(ptr, nextTokPtr)
      case BT_MINUS:
	if ((ptr += MINBPC(enc)) == end)
	  return XML_TOK_PARTIAL;
	if (CHAR_MATCHES(enc, ptr, '-')) {
	  if ((ptr += MINBPC(enc)) == end)
	    return XML_TOK_PARTIAL;
	  if (!CHAR_MATCHES(enc, ptr, '>')) {
	    *nextTokPtr = ptr;
	    return XML_TOK_INVALID;
	  }
	  *nextTokPtr = ptr + MINBPC(enc);
	  return XML_TOK_COMMENT;
	}
	break;
      default:
	ptr += MINBPC(enc);
	break;
      }
    }
  }
  return XML_TOK_PARTIAL;
}

/* ptr points to character following "<!" */

static
int PREFIX(scanDecl)(const ENCODING *enc, const char *ptr, const char *end,
		     const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  case BT_MINUS:
    return PREFIX(scanComment)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_LSQB:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_COND_SECT_OPEN;
  case BT_NMSTRT:
  case BT_HEX:
    ptr += MINBPC(enc);
    break;
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_PERCNT:
      if (ptr + MINBPC(enc) == end)
	return XML_TOK_PARTIAL;
      /* don't allow <!ENTITY% foo "whatever"> */
      switch (BYTE_TYPE(enc, ptr + MINBPC(enc))) {
      case BT_S: case BT_CR: case BT_LF: case BT_PERCNT:
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      /* fall through */
    case BT_S: case BT_CR: case BT_LF:
      *nextTokPtr = ptr;
      return XML_TOK_DECL_OPEN;
    case BT_NMSTRT:
    case BT_HEX:
      ptr += MINBPC(enc);
      break;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}

static
int PREFIX(checkPiTarget)(const ENCODING *enc, const char *ptr, const char *end, int *tokPtr)
{
  int upper = 0;
  *tokPtr = XML_TOK_PI;
  if (end - ptr != MINBPC(enc)*3)
    return 1;
  switch (BYTE_TO_ASCII(enc, ptr)) {
  case 'x':
    break;
  case 'X':
    upper = 1;
    break;
  default:
    return 1;
  }
  ptr += MINBPC(enc);
  switch (BYTE_TO_ASCII(enc, ptr)) {
  case 'm':
    break;
  case 'M':
    upper = 1;
    break;
  default:
    return 1;
  }
  ptr += MINBPC(enc);
  switch (BYTE_TO_ASCII(enc, ptr)) {
  case 'l':
    break;
  case 'L':
    upper = 1;
    break;
  default:
    return 1;
  }
  if (upper)
    return 0;
  *tokPtr = XML_TOK_XML_DECL;
  return 1;
}

/* ptr points to character following "<?" */

static
int PREFIX(scanPi)(const ENCODING *enc, const char *ptr, const char *end,
		   const char **nextTokPtr)
{
  int tok;
  const char *target = ptr;
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
    case BT_S: case BT_CR: case BT_LF:
      if (!PREFIX(checkPiTarget)(enc, target, ptr, &tok)) {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      ptr += MINBPC(enc);
      while (ptr != end) {
        switch (BYTE_TYPE(enc, ptr)) {
        INVALID_CASES(ptr, nextTokPtr)
	case BT_QUEST:
	  ptr += MINBPC(enc);
	  if (ptr == end)
	    return XML_TOK_PARTIAL;
	  if (CHAR_MATCHES(enc, ptr, '>')) {
	    *nextTokPtr = ptr + MINBPC(enc);
	    return tok;
	  }
	  break;
	default:
	  ptr += MINBPC(enc);
	  break;
	}
      }
      return XML_TOK_PARTIAL;
    case BT_QUEST:
      if (!PREFIX(checkPiTarget)(enc, target, ptr, &tok)) {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      ptr += MINBPC(enc);
      if (ptr == end)
	return XML_TOK_PARTIAL;
      if (CHAR_MATCHES(enc, ptr, '>')) {
	*nextTokPtr = ptr + MINBPC(enc);
	return tok;
      }
      /* fall through */
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}


static
int PREFIX(scanCdataSection)(const ENCODING *enc, const char *ptr, const char *end,
			     const char **nextTokPtr)
{
  int i;
  /* CDATA[ */
  if (end - ptr < 6 * MINBPC(enc))
    return XML_TOK_PARTIAL;
  for (i = 0; i < 6; i++, ptr += MINBPC(enc)) {
    if (!CHAR_MATCHES(enc, ptr, "CDATA["[i])) {
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  *nextTokPtr = ptr;
  return XML_TOK_CDATA_SECT_OPEN;
}

static
int PREFIX(cdataSectionTok)(const ENCODING *enc, const char *ptr, const char *end,
			    const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_NONE;
  if (MINBPC(enc) > 1) {
    size_t n = end - ptr;
    if (n & (MINBPC(enc) - 1)) {
      n &= ~(MINBPC(enc) - 1);
      if (n == 0)
	return XML_TOK_PARTIAL;
      end = ptr + n;
    }
  }
  switch (BYTE_TYPE(enc, ptr)) {
  case BT_RSQB:
    ptr += MINBPC(enc);
    if (ptr == end)
      return XML_TOK_PARTIAL;
    if (!CHAR_MATCHES(enc, ptr, ']'))
      break;
    ptr += MINBPC(enc);
    if (ptr == end)
      return XML_TOK_PARTIAL;
    if (!CHAR_MATCHES(enc, ptr, '>')) {
      ptr -= MINBPC(enc);
      break;
    }
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_CDATA_SECT_CLOSE;
  case BT_CR:
    ptr += MINBPC(enc);
    if (ptr == end)
      return XML_TOK_PARTIAL;
    if (BYTE_TYPE(enc, ptr) == BT_LF)
      ptr += MINBPC(enc);
    *nextTokPtr = ptr;
    return XML_TOK_DATA_NEWLINE;
  case BT_LF:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_DATA_NEWLINE;
  INVALID_CASES(ptr, nextTokPtr)
  default:
    ptr += MINBPC(enc);
    break;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: \
      if (end - ptr < n || IS_INVALID_CHAR(enc, ptr, n)) { \
	*nextTokPtr = ptr; \
	return XML_TOK_DATA_CHARS; \
      } \
      ptr += n; \
      break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_NONXML:
    case BT_MALFORM:
    case BT_TRAIL:
    case BT_CR:
    case BT_LF:
    case BT_RSQB:
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    default:
      ptr += MINBPC(enc);
      break;
    }
  }
  *nextTokPtr = ptr;
  return XML_TOK_DATA_CHARS;
}

/* ptr points to character following "</" */

static
int PREFIX(scanEndTag)(const ENCODING *enc, const char *ptr, const char *end,
		       const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
    case BT_S: case BT_CR: case BT_LF:
      for (ptr += MINBPC(enc); ptr != end; ptr += MINBPC(enc)) {
	switch (BYTE_TYPE(enc, ptr)) {
	case BT_S: case BT_CR: case BT_LF:
	  break;
	case BT_GT:
	  *nextTokPtr = ptr + MINBPC(enc);
          return XML_TOK_END_TAG;
	default:
	  *nextTokPtr = ptr;
	  return XML_TOK_INVALID;
	}
      }
      return XML_TOK_PARTIAL;
#ifdef XML_NS
    case BT_COLON:
      /* no need to check qname syntax here, since end-tag must match exactly */
      ptr += MINBPC(enc);
      break;
#endif
    case BT_GT:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_END_TAG;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}

/* ptr points to character following "&#X" */

static
int PREFIX(scanHexCharRef)(const ENCODING *enc, const char *ptr, const char *end,
			   const char **nextTokPtr)
{
  if (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_DIGIT:
    case BT_HEX:
      break;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
    for (ptr += MINBPC(enc); ptr != end; ptr += MINBPC(enc)) {
      switch (BYTE_TYPE(enc, ptr)) {
      case BT_DIGIT:
      case BT_HEX:
	break;
      case BT_SEMI:
	*nextTokPtr = ptr + MINBPC(enc);
	return XML_TOK_CHAR_REF;
      default:
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
    }
  }
  return XML_TOK_PARTIAL;
}

/* ptr points to character following "&#" */

static
int PREFIX(scanCharRef)(const ENCODING *enc, const char *ptr, const char *end,
			const char **nextTokPtr)
{
  if (ptr != end) {
    if (CHAR_MATCHES(enc, ptr, 'x'))
      return PREFIX(scanHexCharRef)(enc, ptr + MINBPC(enc), end, nextTokPtr);
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_DIGIT:
      break;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
    for (ptr += MINBPC(enc); ptr != end; ptr += MINBPC(enc)) {
      switch (BYTE_TYPE(enc, ptr)) {
      case BT_DIGIT:
	break;
      case BT_SEMI:
	*nextTokPtr = ptr + MINBPC(enc);
	return XML_TOK_CHAR_REF;
      default:
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
    }
  }
  return XML_TOK_PARTIAL;
}

/* ptr points to character following "&" */

static
int PREFIX(scanRef)(const ENCODING *enc, const char *ptr, const char *end,
		    const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
  case BT_NUM:
    return PREFIX(scanCharRef)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
    case BT_SEMI:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_ENTITY_REF;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}

/* ptr points to character following first character of attribute name */

static
int PREFIX(scanAtts)(const ENCODING *enc, const char *ptr, const char *end,
		     const char **nextTokPtr)
{
#ifdef XML_NS
  int hadColon = 0;
#endif
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
#ifdef XML_NS
    case BT_COLON:
      if (hadColon) {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      hadColon = 1;
      ptr += MINBPC(enc);
      if (ptr == end)
	return XML_TOK_PARTIAL;
      switch (BYTE_TYPE(enc, ptr)) {
      CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
      default:
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      break;
#endif
    case BT_S: case BT_CR: case BT_LF:
      for (;;) {
	int t;

	ptr += MINBPC(enc);
	if (ptr == end)
	  return XML_TOK_PARTIAL;
	t = BYTE_TYPE(enc, ptr);
	if (t == BT_EQUALS)
	  break;
	switch (t) {
	case BT_S:
	case BT_LF:
	case BT_CR:
	  break;
	default:
	  *nextTokPtr = ptr;
	  return XML_TOK_INVALID;
	}
      }
    /* fall through */
    case BT_EQUALS:
      {
	int open;
#ifdef XML_NS
	hadColon = 0;
#endif
	for (;;) {
	  
	  ptr += MINBPC(enc);
	  if (ptr == end)
	    return XML_TOK_PARTIAL;
	  open = BYTE_TYPE(enc, ptr);
	  if (open == BT_QUOT || open == BT_APOS)
	    break;
	  switch (open) {
	  case BT_S:
	  case BT_LF:
	  case BT_CR:
	    break;
	  default:
	    *nextTokPtr = ptr;
	    return XML_TOK_INVALID;
	  }
	}
	ptr += MINBPC(enc);
	/* in attribute value */
	for (;;) {
	  int t;
	  if (ptr == end)
	    return XML_TOK_PARTIAL;
	  t = BYTE_TYPE(enc, ptr);
	  if (t == open)
	    break;
	  switch (t) {
	  INVALID_CASES(ptr, nextTokPtr)
	  case BT_AMP:
	    {
	      int tok = PREFIX(scanRef)(enc, ptr + MINBPC(enc), end, &ptr);
	      if (tok <= 0) {
		if (tok == XML_TOK_INVALID)
		  *nextTokPtr = ptr;
		return tok;
	      }
	      break;
	    }
	  case BT_LT:
	    *nextTokPtr = ptr;
	    return XML_TOK_INVALID;
	  default:
	    ptr += MINBPC(enc);
	    break;
	  }
	}
	ptr += MINBPC(enc);
	if (ptr == end)
	  return XML_TOK_PARTIAL;
	switch (BYTE_TYPE(enc, ptr)) {
	case BT_S:
	case BT_CR:
	case BT_LF:
	  break;
	case BT_SOL:
	  goto sol;
	case BT_GT:
	  goto gt;
	default:
	  *nextTokPtr = ptr;
	  return XML_TOK_INVALID;
	}
	/* ptr points to closing quote */
	for (;;) {
	  ptr += MINBPC(enc);
	  if (ptr == end)
	    return XML_TOK_PARTIAL;
	  switch (BYTE_TYPE(enc, ptr)) {
	  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
	  case BT_S: case BT_CR: case BT_LF:
	    continue;
	  case BT_GT:
          gt:
	    *nextTokPtr = ptr + MINBPC(enc);
	    return XML_TOK_START_TAG_WITH_ATTS;
	  case BT_SOL:
          sol:
	    ptr += MINBPC(enc);
	    if (ptr == end)
	      return XML_TOK_PARTIAL;
	    if (!CHAR_MATCHES(enc, ptr, '>')) {
	      *nextTokPtr = ptr;
	      return XML_TOK_INVALID;
	    }
	    *nextTokPtr = ptr + MINBPC(enc);
	    return XML_TOK_EMPTY_ELEMENT_WITH_ATTS;
	  default:
	    *nextTokPtr = ptr;
	    return XML_TOK_INVALID;
	  }
	  break;
	}
	break;
      }
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}

/* ptr points to character following "<" */

static
int PREFIX(scanLt)(const ENCODING *enc, const char *ptr, const char *end,
		   const char **nextTokPtr)
{
#ifdef XML_NS
  int hadColon;
#endif
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
  case BT_EXCL:
    if ((ptr += MINBPC(enc)) == end)
      return XML_TOK_PARTIAL;
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_MINUS:
      return PREFIX(scanComment)(enc, ptr + MINBPC(enc), end, nextTokPtr);
    case BT_LSQB:
      return PREFIX(scanCdataSection)(enc, ptr + MINBPC(enc), end, nextTokPtr);
    }
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  case BT_QUEST:
    return PREFIX(scanPi)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_SOL:
    return PREFIX(scanEndTag)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
#ifdef XML_NS
  hadColon = 0;
#endif
  /* we have a start-tag */
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
#ifdef XML_NS
    case BT_COLON:
      if (hadColon) {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      hadColon = 1;
      ptr += MINBPC(enc);
      if (ptr == end)
	return XML_TOK_PARTIAL;
      switch (BYTE_TYPE(enc, ptr)) {
      CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
      default:
        *nextTokPtr = ptr;
        return XML_TOK_INVALID;
      }
      break;
#endif
    case BT_S: case BT_CR: case BT_LF:
      {
        ptr += MINBPC(enc);
	while (ptr != end) {
	  switch (BYTE_TYPE(enc, ptr)) {
	  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
	  case BT_GT:
	    goto gt;
	  case BT_SOL:
	    goto sol;
	  case BT_S: case BT_CR: case BT_LF:
	    ptr += MINBPC(enc);
	    continue;
	  default:
	    *nextTokPtr = ptr;
	    return XML_TOK_INVALID;
	  }
	  return PREFIX(scanAtts)(enc, ptr, end, nextTokPtr);
	}
	return XML_TOK_PARTIAL;
      }
    case BT_GT:
    gt:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_START_TAG_NO_ATTS;
    case BT_SOL:
    sol:
      ptr += MINBPC(enc);
      if (ptr == end)
	return XML_TOK_PARTIAL;
      if (!CHAR_MATCHES(enc, ptr, '>')) {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_EMPTY_ELEMENT_NO_ATTS;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}

static
int PREFIX(contentTok)(const ENCODING *enc, const char *ptr, const char *end,
		       const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_NONE;
  if (MINBPC(enc) > 1) {
    size_t n = end - ptr;
    if (n & (MINBPC(enc) - 1)) {
      n &= ~(MINBPC(enc) - 1);
      if (n == 0)
	return XML_TOK_PARTIAL;
      end = ptr + n;
    }
  }
  switch (BYTE_TYPE(enc, ptr)) {
  case BT_LT:
    return PREFIX(scanLt)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_AMP:
    return PREFIX(scanRef)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_CR:
    ptr += MINBPC(enc);
    if (ptr == end)
      return XML_TOK_TRAILING_CR;
    if (BYTE_TYPE(enc, ptr) == BT_LF)
      ptr += MINBPC(enc);
    *nextTokPtr = ptr;
    return XML_TOK_DATA_NEWLINE;
  case BT_LF:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_DATA_NEWLINE;
  case BT_RSQB:
    ptr += MINBPC(enc);
    if (ptr == end)
      return XML_TOK_TRAILING_RSQB;
    if (!CHAR_MATCHES(enc, ptr, ']'))
      break;
    ptr += MINBPC(enc);
    if (ptr == end)
      return XML_TOK_TRAILING_RSQB;
    if (!CHAR_MATCHES(enc, ptr, '>')) {
      ptr -= MINBPC(enc);
      break;
    }
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  INVALID_CASES(ptr, nextTokPtr)
  default:
    ptr += MINBPC(enc);
    break;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: \
      if (end - ptr < n || IS_INVALID_CHAR(enc, ptr, n)) { \
	*nextTokPtr = ptr; \
	return XML_TOK_DATA_CHARS; \
      } \
      ptr += n; \
      break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_RSQB:
      if (ptr + MINBPC(enc) != end) {
	 if (!CHAR_MATCHES(enc, ptr + MINBPC(enc), ']')) {
	   ptr += MINBPC(enc);
	   break;
	 }
	 if (ptr + 2*MINBPC(enc) != end) {
	   if (!CHAR_MATCHES(enc, ptr + 2*MINBPC(enc), '>')) {
	     ptr += MINBPC(enc);
	     break;
	   }
	   *nextTokPtr = ptr + 2*MINBPC(enc);
	   return XML_TOK_INVALID;
	 }
      }
      /* fall through */
    case BT_AMP:
    case BT_LT:
    case BT_NONXML:
    case BT_MALFORM:
    case BT_TRAIL:
    case BT_CR:
    case BT_LF:
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    default:
      ptr += MINBPC(enc);
      break;
    }
  }
  *nextTokPtr = ptr;
  return XML_TOK_DATA_CHARS;
}

/* ptr points to character following "%" */

static
int PREFIX(scanPercent)(const ENCODING *enc, const char *ptr, const char *end,
			const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
  case BT_S: case BT_LF: case BT_CR: case BT_PERCNT:
    *nextTokPtr = ptr;
    return XML_TOK_PERCENT;
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
    case BT_SEMI:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_PARAM_ENTITY_REF;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return XML_TOK_PARTIAL;
}

static
int PREFIX(scanPoundName)(const ENCODING *enc, const char *ptr, const char *end,
			  const char **nextTokPtr)
{
  if (ptr == end)
    return XML_TOK_PARTIAL;
  switch (BYTE_TYPE(enc, ptr)) {
  CHECK_NMSTRT_CASES(enc, ptr, end, nextTokPtr)
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
    case BT_CR: case BT_LF: case BT_S:
    case BT_RPAR: case BT_GT: case BT_PERCNT: case BT_VERBAR:
      *nextTokPtr = ptr;
      return XML_TOK_POUND_NAME;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return -XML_TOK_POUND_NAME;
}

static
int PREFIX(scanLit)(int open, const ENCODING *enc,
		    const char *ptr, const char *end,
		    const char **nextTokPtr)
{
  while (ptr != end) {
    int t = BYTE_TYPE(enc, ptr);
    switch (t) {
    INVALID_CASES(ptr, nextTokPtr)
    case BT_QUOT:
    case BT_APOS:
      ptr += MINBPC(enc);
      if (t != open)
	break;
      if (ptr == end)
	return -XML_TOK_LITERAL;
      *nextTokPtr = ptr;
      switch (BYTE_TYPE(enc, ptr)) {
      case BT_S: case BT_CR: case BT_LF:
      case BT_GT: case BT_PERCNT: case BT_LSQB:
	return XML_TOK_LITERAL;
      default:
	return XML_TOK_INVALID;
      }
    default:
      ptr += MINBPC(enc);
      break;
    }
  }
  return XML_TOK_PARTIAL;
}

static
int PREFIX(prologTok)(const ENCODING *enc, const char *ptr, const char *end,
		      const char **nextTokPtr)
{
  int tok;
  if (ptr == end)
    return XML_TOK_NONE;
  if (MINBPC(enc) > 1) {
    size_t n = end - ptr;
    if (n & (MINBPC(enc) - 1)) {
      n &= ~(MINBPC(enc) - 1);
      if (n == 0)
	return XML_TOK_PARTIAL;
      end = ptr + n;
    }
  }
  switch (BYTE_TYPE(enc, ptr)) {
  case BT_QUOT:
    return PREFIX(scanLit)(BT_QUOT, enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_APOS:
    return PREFIX(scanLit)(BT_APOS, enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_LT:
    {
      ptr += MINBPC(enc);
      if (ptr == end)
	return XML_TOK_PARTIAL;
      switch (BYTE_TYPE(enc, ptr)) {
      case BT_EXCL:
	return PREFIX(scanDecl)(enc, ptr + MINBPC(enc), end, nextTokPtr);
      case BT_QUEST:
	return PREFIX(scanPi)(enc, ptr + MINBPC(enc), end, nextTokPtr);
      case BT_NMSTRT:
      case BT_HEX:
      case BT_NONASCII:
      case BT_LEAD2:
      case BT_LEAD3:
      case BT_LEAD4:
	*nextTokPtr = ptr - MINBPC(enc);
	return XML_TOK_INSTANCE_START;
      }
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  case BT_CR:
    if (ptr + MINBPC(enc) == end)
      return -XML_TOK_PROLOG_S;
    /* fall through */
  case BT_S: case BT_LF:
    for (;;) {
      ptr += MINBPC(enc);
      if (ptr == end)
	break;
      switch (BYTE_TYPE(enc, ptr)) {
      case BT_S: case BT_LF:
	break;
      case BT_CR:
	/* don't split CR/LF pair */
	if (ptr + MINBPC(enc) != end)
	  break;
	/* fall through */
      default:
	*nextTokPtr = ptr;
	return XML_TOK_PROLOG_S;
      }
    }
    *nextTokPtr = ptr;
    return XML_TOK_PROLOG_S;
  case BT_PERCNT:
    return PREFIX(scanPercent)(enc, ptr + MINBPC(enc), end, nextTokPtr);
  case BT_COMMA:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_COMMA;
  case BT_LSQB:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_OPEN_BRACKET;
  case BT_RSQB:
    ptr += MINBPC(enc);
    if (ptr == end)
      return -XML_TOK_CLOSE_BRACKET;
    if (CHAR_MATCHES(enc, ptr, ']')) {
      if (ptr + MINBPC(enc) == end)
	return XML_TOK_PARTIAL;
      if (CHAR_MATCHES(enc, ptr + MINBPC(enc), '>')) {
	*nextTokPtr = ptr + 2*MINBPC(enc);
	return XML_TOK_COND_SECT_CLOSE;
      }
    }
    *nextTokPtr = ptr;
    return XML_TOK_CLOSE_BRACKET;
  case BT_LPAR:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_OPEN_PAREN;
  case BT_RPAR:
    ptr += MINBPC(enc);
    if (ptr == end)
      return -XML_TOK_CLOSE_PAREN;
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_AST:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_CLOSE_PAREN_ASTERISK;
    case BT_QUEST:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_CLOSE_PAREN_QUESTION;
    case BT_PLUS:
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_CLOSE_PAREN_PLUS;
    case BT_CR: case BT_LF: case BT_S:
    case BT_GT: case BT_COMMA: case BT_VERBAR:
    case BT_RPAR:
      *nextTokPtr = ptr;
      return XML_TOK_CLOSE_PAREN;
    }
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  case BT_VERBAR:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_OR;
  case BT_GT:
    *nextTokPtr = ptr + MINBPC(enc);
    return XML_TOK_DECL_CLOSE;
  case BT_NUM:
    return PREFIX(scanPoundName)(enc, ptr + MINBPC(enc), end, nextTokPtr);
#define LEAD_CASE(n) \
  case BT_LEAD ## n: \
    if (end - ptr < n) \
      return XML_TOK_PARTIAL_CHAR; \
    if (IS_NMSTRT_CHAR(enc, ptr, n)) { \
      ptr += n; \
      tok = XML_TOK_NAME; \
      break; \
    } \
    if (IS_NAME_CHAR(enc, ptr, n)) { \
      ptr += n; \
      tok = XML_TOK_NMTOKEN; \
      break; \
    } \
    *nextTokPtr = ptr; \
    return XML_TOK_INVALID;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
  case BT_NMSTRT:
  case BT_HEX:
    tok = XML_TOK_NAME;
    ptr += MINBPC(enc);
    break;
  case BT_DIGIT:
  case BT_NAME:
  case BT_MINUS:
#ifdef XML_NS
  case BT_COLON:
#endif
    tok = XML_TOK_NMTOKEN;
    ptr += MINBPC(enc);
    break;
  case BT_NONASCII:
    if (IS_NMSTRT_CHAR_MINBPC(enc, ptr)) {
      ptr += MINBPC(enc);
      tok = XML_TOK_NAME;
      break;
    }
    if (IS_NAME_CHAR_MINBPC(enc, ptr)) {
      ptr += MINBPC(enc);
      tok = XML_TOK_NMTOKEN;
      break;
    }
    /* fall through */
  default:
    *nextTokPtr = ptr;
    return XML_TOK_INVALID;
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
    case BT_GT: case BT_RPAR: case BT_COMMA:
    case BT_VERBAR: case BT_LSQB: case BT_PERCNT:
    case BT_S: case BT_CR: case BT_LF:
      *nextTokPtr = ptr;
      return tok;
#ifdef XML_NS
    case BT_COLON:
      ptr += MINBPC(enc);
      switch (tok) {
      case XML_TOK_NAME:
	if (ptr == end)
	  return XML_TOK_PARTIAL;
	tok = XML_TOK_PREFIXED_NAME;
	switch (BYTE_TYPE(enc, ptr)) {
	CHECK_NAME_CASES(enc, ptr, end, nextTokPtr)
	default:
	  tok = XML_TOK_NMTOKEN;
	  break;
	}
	break;
      case XML_TOK_PREFIXED_NAME:
	tok = XML_TOK_NMTOKEN;
	break;
      }
      break;
#endif
    case BT_PLUS:
      if (tok == XML_TOK_NMTOKEN)  {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_NAME_PLUS;
    case BT_AST:
      if (tok == XML_TOK_NMTOKEN)  {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_NAME_ASTERISK;
    case BT_QUEST:
      if (tok == XML_TOK_NMTOKEN)  {
	*nextTokPtr = ptr;
	return XML_TOK_INVALID;
      }
      *nextTokPtr = ptr + MINBPC(enc);
      return XML_TOK_NAME_QUESTION;
    default:
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    }
  }
  return -tok;
}

static
int PREFIX(attributeValueTok)(const ENCODING *enc, const char *ptr, const char *end,
			      const char **nextTokPtr)
{
  const char *start;
  if (ptr == end)
    return XML_TOK_NONE;
  start = ptr;
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: ptr += n; break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_AMP:
      if (ptr == start)
	return PREFIX(scanRef)(enc, ptr + MINBPC(enc), end, nextTokPtr);
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    case BT_LT:
      /* this is for inside entity references */
      *nextTokPtr = ptr;
      return XML_TOK_INVALID;
    case BT_LF:
      if (ptr == start) {
	*nextTokPtr = ptr + MINBPC(enc);
	return XML_TOK_DATA_NEWLINE;
      }
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    case BT_CR:
      if (ptr == start) {
	ptr += MINBPC(enc);
	if (ptr == end)
	  return XML_TOK_TRAILING_CR;
	if (BYTE_TYPE(enc, ptr) == BT_LF)
	  ptr += MINBPC(enc);
	*nextTokPtr = ptr;
	return XML_TOK_DATA_NEWLINE;
      }
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    case BT_S:
      if (ptr == start) {
	*nextTokPtr = ptr + MINBPC(enc);
	return XML_TOK_ATTRIBUTE_VALUE_S;
      }
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    default:
      ptr += MINBPC(enc);
      break;
    }
  }
  *nextTokPtr = ptr;
  return XML_TOK_DATA_CHARS;
}

static
int PREFIX(entityValueTok)(const ENCODING *enc, const char *ptr, const char *end,
			   const char **nextTokPtr)
{
  const char *start;
  if (ptr == end)
    return XML_TOK_NONE;
  start = ptr;
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: ptr += n; break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_AMP:
      if (ptr == start)
	return PREFIX(scanRef)(enc, ptr + MINBPC(enc), end, nextTokPtr);
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    case BT_PERCNT:
      if (ptr == start)
	return PREFIX(scanPercent)(enc, ptr + MINBPC(enc), end, nextTokPtr);
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    case BT_LF:
      if (ptr == start) {
	*nextTokPtr = ptr + MINBPC(enc);
	return XML_TOK_DATA_NEWLINE;
      }
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    case BT_CR:
      if (ptr == start) {
	ptr += MINBPC(enc);
	if (ptr == end)
	  return XML_TOK_TRAILING_CR;
	if (BYTE_TYPE(enc, ptr) == BT_LF)
	  ptr += MINBPC(enc);
	*nextTokPtr = ptr;
	return XML_TOK_DATA_NEWLINE;
      }
      *nextTokPtr = ptr;
      return XML_TOK_DATA_CHARS;
    default:
      ptr += MINBPC(enc);
      break;
    }
  }
  *nextTokPtr = ptr;
  return XML_TOK_DATA_CHARS;
}

#ifdef XML_DTD

static
int PREFIX(ignoreSectionTok)(const ENCODING *enc, const char *ptr, const char *end,
			     const char **nextTokPtr)
{
  int level = 0;
  if (MINBPC(enc) > 1) {
    size_t n = end - ptr;
    if (n & (MINBPC(enc) - 1)) {
      n &= ~(MINBPC(enc) - 1);
      end = ptr + n;
    }
  }
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
    INVALID_CASES(ptr, nextTokPtr)
    case BT_LT:
      if ((ptr += MINBPC(enc)) == end)
	return XML_TOK_PARTIAL;
      if (CHAR_MATCHES(enc, ptr, '!')) {
	if ((ptr += MINBPC(enc)) == end)
	  return XML_TOK_PARTIAL;
	if (CHAR_MATCHES(enc, ptr, '[')) {
	  ++level;
	  ptr += MINBPC(enc);
	}
      }
      break;
    case BT_RSQB:
      if ((ptr += MINBPC(enc)) == end)
	return XML_TOK_PARTIAL;
      if (CHAR_MATCHES(enc, ptr, ']')) {
	if ((ptr += MINBPC(enc)) == end)
	  return XML_TOK_PARTIAL;
	if (CHAR_MATCHES(enc, ptr, '>')) {
	  ptr += MINBPC(enc);
	  if (level == 0) {
	    *nextTokPtr = ptr;
	    return XML_TOK_IGNORE_SECT;
	  }
	  --level;
	}
      }
      break;
    default:
      ptr += MINBPC(enc);
      break;
    }
  }
  return XML_TOK_PARTIAL;
}

#endif /* XML_DTD */

static
int PREFIX(isPublicId)(const ENCODING *enc, const char *ptr, const char *end,
		       const char **badPtr)
{
  ptr += MINBPC(enc);
  end -= MINBPC(enc);
  for (; ptr != end; ptr += MINBPC(enc)) {
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_DIGIT:
    case BT_HEX:
    case BT_MINUS:
    case BT_APOS:
    case BT_LPAR:
    case BT_RPAR:
    case BT_PLUS:
    case BT_COMMA:
    case BT_SOL:
    case BT_EQUALS:
    case BT_QUEST:
    case BT_CR:
    case BT_LF:
    case BT_SEMI:
    case BT_EXCL:
    case BT_AST:
    case BT_PERCNT:
    case BT_NUM:
#ifdef XML_NS
    case BT_COLON:
#endif
      break;
    case BT_S:
      if (CHAR_MATCHES(enc, ptr, '\t')) {
	*badPtr = ptr;
	return 0;
      }
      break;
    case BT_NAME:
    case BT_NMSTRT:
      if (!(BYTE_TO_ASCII(enc, ptr) & ~0x7f))
	break;
    default:
      switch (BYTE_TO_ASCII(enc, ptr)) {
      case 0x24: /* $ */
      case 0x40: /* @ */
	break;
      default:
	*badPtr = ptr;
	return 0;
      }
      break;
    }
  }
  return 1;
}

/* This must only be called for a well-formed start-tag or empty element tag.
Returns the number of attributes.  Pointers to the first attsMax attributes 
are stored in atts. */

static
int PREFIX(getAtts)(const ENCODING *enc, const char *ptr,
		    int attsMax, ATTRIBUTE *atts)
{
  enum { other, inName, inValue } state = inName;
  int nAtts = 0;
  int open = 0; /* defined when state == inValue;
		   initialization just to shut up compilers */

  for (ptr += MINBPC(enc);; ptr += MINBPC(enc)) {
    switch (BYTE_TYPE(enc, ptr)) {
#define START_NAME \
      if (state == other) { \
	if (nAtts < attsMax) { \
	  atts[nAtts].name = ptr; \
	  atts[nAtts].normalized = 1; \
	} \
	state = inName; \
      }
#define LEAD_CASE(n) \
    case BT_LEAD ## n: START_NAME ptr += (n - MINBPC(enc)); break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_NONASCII:
    case BT_NMSTRT:
    case BT_HEX:
      START_NAME
      break;
#undef START_NAME
    case BT_QUOT:
      if (state != inValue) {
	if (nAtts < attsMax)
	  atts[nAtts].valuePtr = ptr + MINBPC(enc);
        state = inValue;
        open = BT_QUOT;
      }
      else if (open == BT_QUOT) {
        state = other;
	if (nAtts < attsMax)
	  atts[nAtts].valueEnd = ptr;
	nAtts++;
      }
      break;
    case BT_APOS:
      if (state != inValue) {
	if (nAtts < attsMax)
	  atts[nAtts].valuePtr = ptr + MINBPC(enc);
        state = inValue;
        open = BT_APOS;
      }
      else if (open == BT_APOS) {
        state = other;
	if (nAtts < attsMax)
	  atts[nAtts].valueEnd = ptr;
	nAtts++;
      }
      break;
    case BT_AMP:
      if (nAtts < attsMax)
	atts[nAtts].normalized = 0;
      break;
    case BT_S:
      if (state == inName)
        state = other;
      else if (state == inValue
	       && nAtts < attsMax
	       && atts[nAtts].normalized
	       && (ptr == atts[nAtts].valuePtr
		   || BYTE_TO_ASCII(enc, ptr) != ' '
		   || BYTE_TO_ASCII(enc, ptr + MINBPC(enc)) == ' '
	           || BYTE_TYPE(enc, ptr + MINBPC(enc)) == open))
	atts[nAtts].normalized = 0;
      break;
    case BT_CR: case BT_LF:
      /* This case ensures that the first attribute name is counted
         Apart from that we could just change state on the quote. */
      if (state == inName)
        state = other;
      else if (state == inValue && nAtts < attsMax)
	atts[nAtts].normalized = 0;
      break;
    case BT_GT:
    case BT_SOL:
      if (state != inValue)
	return nAtts;
      break;
    default:
      break;
    }
  }
  /* not reached */
}

static
int PREFIX(charRefNumber)(const ENCODING *enc, const char *ptr)
{
  int result = 0;
  /* skip &# */
  ptr += 2*MINBPC(enc);
  if (CHAR_MATCHES(enc, ptr, 'x')) {
    for (ptr += MINBPC(enc); !CHAR_MATCHES(enc, ptr, ';'); ptr += MINBPC(enc)) {
      int c = BYTE_TO_ASCII(enc, ptr);
      switch (c) {
      case '0': case '1': case '2': case '3': case '4':
      case '5': case '6': case '7': case '8': case '9':
	result <<= 4;
	result |= (c - '0');
	break;
      case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
	result <<= 4;
	result += 10 + (c - 'A');
	break;
      case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
	result <<= 4;
	result += 10 + (c - 'a');
	break;
      }
      if (result >= 0x110000)
	return -1;
    }
  }
  else {
    for (; !CHAR_MATCHES(enc, ptr, ';'); ptr += MINBPC(enc)) {
      int c = BYTE_TO_ASCII(enc, ptr);
      result *= 10;
      result += (c - '0');
      if (result >= 0x110000)
	return -1;
    }
  }
  return checkCharRefNumber(result);
}

static
int PREFIX(predefinedEntityName)(const ENCODING *enc, const char *ptr, const char *end)
{
  switch ((end - ptr)/MINBPC(enc)) {
  case 2:
    if (CHAR_MATCHES(enc, ptr + MINBPC(enc), 't')) {
      switch (BYTE_TO_ASCII(enc, ptr)) {
      case 'l':
	return '<';
      case 'g':
	return '>';
      }
    }
    break;
  case 3:
    if (CHAR_MATCHES(enc, ptr, 'a')) {
      ptr += MINBPC(enc);
      if (CHAR_MATCHES(enc, ptr, 'm')) {
	ptr += MINBPC(enc);
	if (CHAR_MATCHES(enc, ptr, 'p'))
	  return '&';
      }
    }
    break;
  case 4:
    switch (BYTE_TO_ASCII(enc, ptr)) {
    case 'q':
      ptr += MINBPC(enc);
      if (CHAR_MATCHES(enc, ptr, 'u')) {
	ptr += MINBPC(enc);
	if (CHAR_MATCHES(enc, ptr, 'o')) {
	  ptr += MINBPC(enc);
  	  if (CHAR_MATCHES(enc, ptr, 't'))
	    return '"';
	}
      }
      break;
    case 'a':
      ptr += MINBPC(enc);
      if (CHAR_MATCHES(enc, ptr, 'p')) {
	ptr += MINBPC(enc);
	if (CHAR_MATCHES(enc, ptr, 'o')) {
	  ptr += MINBPC(enc);
  	  if (CHAR_MATCHES(enc, ptr, 's'))
	    return '\'';
	}
      }
      break;
    }
  }
  return 0;
}

static
int PREFIX(sameName)(const ENCODING *enc, const char *ptr1, const char *ptr2)
{
  for (;;) {
    switch (BYTE_TYPE(enc, ptr1)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: \
      if (*ptr1++ != *ptr2++) \
	return 0;
    LEAD_CASE(4) LEAD_CASE(3) LEAD_CASE(2)
#undef LEAD_CASE
      /* fall through */
      if (*ptr1++ != *ptr2++)
	return 0;
      break;
    case BT_NONASCII:
    case BT_NMSTRT:
#ifdef XML_NS
    case BT_COLON:
#endif
    case BT_HEX:
    case BT_DIGIT:
    case BT_NAME:
    case BT_MINUS:
      if (*ptr2++ != *ptr1++)
	return 0;
      if (MINBPC(enc) > 1) {
	if (*ptr2++ != *ptr1++)
	  return 0;
	if (MINBPC(enc) > 2) {
	  if (*ptr2++ != *ptr1++)
	    return 0;
          if (MINBPC(enc) > 3) {
	    if (*ptr2++ != *ptr1++)
      	      return 0;
	  }
	}
      }
      break;
    default:
      if (MINBPC(enc) == 1 && *ptr1 == *ptr2)
	return 1;
      switch (BYTE_TYPE(enc, ptr2)) {
      case BT_LEAD2:
      case BT_LEAD3:
      case BT_LEAD4:
      case BT_NONASCII:
      case BT_NMSTRT:
#ifdef XML_NS
      case BT_COLON:
#endif
      case BT_HEX:
      case BT_DIGIT:
      case BT_NAME:
      case BT_MINUS:
	return 0;
      default:
	return 1;
      }
    }
  }
  /* not reached */
}

static
int PREFIX(nameMatchesAscii)(const ENCODING *enc, const char *ptr1,
			     const char *end1, const char *ptr2)
{
  for (; *ptr2; ptr1 += MINBPC(enc), ptr2++) {
    if (ptr1 == end1)
      return 0;
    if (!CHAR_MATCHES(enc, ptr1, *ptr2))
      return 0;
  }
  return ptr1 == end1;
}

static
int PREFIX(nameLength)(const ENCODING *enc, const char *ptr)
{
  const char *start = ptr;
  for (;;) {
    switch (BYTE_TYPE(enc, ptr)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: ptr += n; break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_NONASCII:
    case BT_NMSTRT:
#ifdef XML_NS
    case BT_COLON:
#endif
    case BT_HEX:
    case BT_DIGIT:
    case BT_NAME:
    case BT_MINUS:
      ptr += MINBPC(enc);
      break;
    default:
      return ptr - start;
    }
  }
}

static
const char *PREFIX(skipS)(const ENCODING *enc, const char *ptr)
{
  for (;;) {
    switch (BYTE_TYPE(enc, ptr)) {
    case BT_LF:
    case BT_CR:
    case BT_S:
      ptr += MINBPC(enc);
      break;
    default:
      return ptr;
    }
  }
}

static
void PREFIX(updatePosition)(const ENCODING *enc,
			    const char *ptr,
			    const char *end,
			    POSITION *pos)
{
  while (ptr != end) {
    switch (BYTE_TYPE(enc, ptr)) {
#define LEAD_CASE(n) \
    case BT_LEAD ## n: \
      ptr += n; \
      break;
    LEAD_CASE(2) LEAD_CASE(3) LEAD_CASE(4)
#undef LEAD_CASE
    case BT_LF:
      pos->columnNumber = (unsigned)-1;
      pos->lineNumber++;
      ptr += MINBPC(enc);
      break;
    case BT_CR:
      pos->lineNumber++;
      ptr += MINBPC(enc);
      if (ptr != end && BYTE_TYPE(enc, ptr) == BT_LF)
	ptr += MINBPC(enc);
      pos->columnNumber = (unsigned)-1;
      break;
    default:
      ptr += MINBPC(enc);
      break;
    }
    pos->columnNumber++;
  }
}

#undef DO_LEAD_CASE
#undef MULTIBYTE_CASES
#undef INVALID_CASES
#undef CHECK_NAME_CASE
#undef CHECK_NAME_CASES
#undef CHECK_NMSTRT_CASE
#undef CHECK_NMSTRT_CASES
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmltok\xmltok_ns.c ===
const ENCODING *NS(XmlGetUtf8InternalEncoding)(void)
{
  return &ns(internal_utf8_encoding).enc;
}

const ENCODING *NS(XmlGetUtf16InternalEncoding)(void)
{
#if XML_BYTE_ORDER == 12
  return &ns(internal_little2_encoding).enc;
#elif XML_BYTE_ORDER == 21
  return &ns(internal_big2_encoding).enc;
#else
  const short n = 1;
  return *(const char *)&n ? &ns(internal_little2_encoding).enc : &ns(internal_big2_encoding).enc;
#endif
}

static
const ENCODING *NS(encodings)[] = {
  &ns(latin1_encoding).enc,
  &ns(ascii_encoding).enc,
  &ns(utf8_encoding).enc,
  &ns(big2_encoding).enc,
  &ns(big2_encoding).enc,
  &ns(little2_encoding).enc,
  &ns(utf8_encoding).enc /* NO_ENC */
};

static
int NS(initScanProlog)(const ENCODING *enc, const char *ptr, const char *end,
		       const char **nextTokPtr)
{
  return initScan(NS(encodings), (const INIT_ENCODING *)enc, XML_PROLOG_STATE, ptr, end, nextTokPtr);
}

static
int NS(initScanContent)(const ENCODING *enc, const char *ptr, const char *end,
		       const char **nextTokPtr)
{
  return initScan(NS(encodings), (const INIT_ENCODING *)enc, XML_CONTENT_STATE, ptr, end, nextTokPtr);
}

int NS(XmlInitEncoding)(INIT_ENCODING *p, const ENCODING **encPtr, const char *name)
{
  int i = getEncodingIndex(name);
  if (i == UNKNOWN_ENC)
    return 0;
  SET_INIT_ENC_INDEX(p, i);
  p->initEnc.scanners[XML_PROLOG_STATE] = NS(initScanProlog);
  p->initEnc.scanners[XML_CONTENT_STATE] = NS(initScanContent);
  p->initEnc.updatePosition = initUpdatePosition;
  p->encPtr = encPtr;
  *encPtr = &(p->initEnc);
  return 1;
}

static
const ENCODING *NS(findEncoding)(const ENCODING *enc, const char *ptr, const char *end)
{
#define ENCODING_MAX 128
  char buf[ENCODING_MAX];
  char *p = buf;
  int i;
  XmlUtf8Convert(enc, &ptr, end, &p, p + ENCODING_MAX - 1);
  if (ptr != end)
    return 0;
  *p = 0;
  if (streqci(buf, "UTF-16") && enc->minBytesPerChar == 2)
    return enc;
  i = getEncodingIndex(buf);
  if (i == UNKNOWN_ENC)
    return 0;
  return NS(encodings)[i];
}

int NS(XmlParseXmlDecl)(int isGeneralTextEntity,
			const ENCODING *enc,
			const char *ptr,
			const char *end,
			const char **badPtr,
			const char **versionPtr,
			const char **encodingName,
			const ENCODING **encoding,
			int *standalone)
{
  return doParseXmlDecl(NS(findEncoding),
			isGeneralTextEntity,
			enc,
			ptr,
			end,
			badPtr,
			versionPtr,
			encodingName,
			encoding,
			standalone);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\filemap.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/


#include <stddef.h>

#ifdef XML_UNICODE
int filemap(const wchar_t *name,
	    void (*processor)(const void *, size_t, const wchar_t *, void *arg),
	    void *arg);
#else
int filemap(const char *name,
	    void (*processor)(const void *, size_t, const char *, void *arg),
	    void *arg);
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\readfilemap.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef S_ISREG
#ifndef S_IFREG
#define S_IFREG _S_IFREG
#endif
#ifndef S_IFMT
#define S_IFMT _S_IFMT
#endif
#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#endif /* not S_ISREG */

#ifndef O_BINARY
#ifdef _O_BINARY
#define O_BINARY _O_BINARY
#else
#define O_BINARY 0
#endif
#endif

int filemap(const char *name,
	    void (*processor)(const void *, size_t, const char *, void *arg),
	    void *arg)
{
  size_t nbytes;
  int fd;
  int n;
  struct stat sb;
  void *p;

  fd = open(name, O_RDONLY|O_BINARY);
  if (fd < 0) {
    perror(name);
    return 0;
  }
  if (fstat(fd, &sb) < 0) {
    perror(name);
    return 0;
  }
  if (!S_ISREG(sb.st_mode)) {
    fprintf(stderr, "%s: not a regular file\n", name);
    return 0;
  }
  nbytes = sb.st_size;
  p = malloc(nbytes);
  if (!p) {
    fprintf(stderr, "%s: out of memory\n", name);
    return 0;
  }
  n = read(fd, p, nbytes);
  if (n < 0) {
    perror(name);
    close(fd);
    return 0;
  }
  if (n != nbytes) {
    fprintf(stderr, "%s: read unexpected number of bytes\n", name);
    close(fd);
    return 0;
  }
  processor(p, nbytes, name, arg);
  free(p);
  close(fd);
  return 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\unixfilemap.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <stdio.h>

#ifndef MAP_FILE
#define MAP_FILE 0
#endif

#include "filemap.h"

int filemap(const char *name,
	    void (*processor)(const void *, size_t, const char *, void *arg),
	    void *arg)
{
  int fd;
  size_t nbytes;
  struct stat sb;
  void *p;

  fd = open(name, O_RDONLY);
  if (fd < 0) {
    perror(name);
    return 0;
  }
  if (fstat(fd, &sb) < 0) {
    perror(name);
    close(fd);
    return 0;
  }
  if (!S_ISREG(sb.st_mode)) {
    close(fd);
    fprintf(stderr, "%s: not a regular file\n", name);
    return 0;
  }
  
  nbytes = sb.st_size;
  p = (void *)mmap((caddr_t)0, (size_t)nbytes, PROT_READ,
		   MAP_FILE|MAP_PRIVATE, fd, (off_t)0);
  if (p == (void *)-1) {
    perror(name);
    close(fd);
    return 0;
  }
  processor(p, nbytes, name, arg);
  munmap((caddr_t)p, nbytes);
  close(fd);
  return 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\xmltchar.h ===
#ifdef XML_UNICODE
#ifndef XML_UNICODE_WCHAR_T
#error xmlwf requires a 16-bit Unicode-compatible wchar_t 
#endif
#define T(x) L ## x
#define ftprintf fwprintf
#define tfopen _wfopen
#define fputts fputws
#define puttc putwc
#define tcscmp wcscmp
#define tcscpy wcscpy
#define tcscat wcscat
#define tcschr wcschr
#define tcsrchr wcsrchr
#define tcslen wcslen
#define tperror _wperror
#define topen _wopen
#define tmain wmain
#define tremove _wremove
#else /* not XML_UNICODE */
#define T(x) x
#define ftprintf fprintf
#define tfopen fopen
#define fputts fputs
#define puttc putc
#define tcscmp strcmp
#define tcscpy strcpy
#define tcscat strcat
#define tcschr strchr
#define tcsrchr strrchr
#define tcslen strlen
#define tperror perror
#define topen open
#define tmain main
#define tremove remove
#endif /* not XML_UNICODE */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\win32filemap.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#define STRICT 1
#define WIN32_LEAN_AND_MEAN 1

#ifdef XML_UNICODE_WCHAR_T
#ifndef XML_UNICODE
#define XML_UNICODE
#endif
#endif

#ifdef XML_UNICODE
#define UNICODE
#define _UNICODE
#endif /* XML_UNICODE */
#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include "filemap.h"

static void win32perror(const TCHAR *);

int filemap(const TCHAR *name,
	    void (*processor)(const void *, size_t, const TCHAR *, void *arg),
	    void *arg)
{
  HANDLE f;
  HANDLE m;
  DWORD size;
  DWORD sizeHi;
  void *p;

  f = CreateFile(name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING,
			  FILE_FLAG_SEQUENTIAL_SCAN, NULL);
  if (f == INVALID_HANDLE_VALUE) {
    win32perror(name);
    return 0;
  }
  size = GetFileSize(f, &sizeHi);
  if (size == (DWORD)-1) {
    win32perror(name);
    return 0;
  }
  if (sizeHi) {
    _ftprintf(stderr, _T("%s: bigger than 2Gb\n"), name);
    return 0;
  }
  /* CreateFileMapping barfs on zero length files */
  if (size == 0) {
    static const char c = '\0';
    processor(&c, 0, name, arg);
    CloseHandle(f);
    return 1;
  }
  m = CreateFileMapping(f, NULL, PAGE_READONLY, 0, 0, NULL);
  if (m == NULL) {
    win32perror(name);
    CloseHandle(f);
    return 0;
  }
  p = MapViewOfFile(m, FILE_MAP_READ, 0, 0, 0);
  if (p == NULL) {
    win32perror(name);
    CloseHandle(m);
    CloseHandle(f);
    return 0;
  }
  processor(p, size, name, arg); 
  UnmapViewOfFile(p);
  CloseHandle(m);
  CloseHandle(f);
  return 1;
}

static
void win32perror(const TCHAR *s)
{
  LPVOID buf;
  if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
		    NULL,
		    GetLastError(),
		    MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		    (LPTSTR) &buf,
		    0,
		    NULL)) {
    _ftprintf(stderr, _T("%s: %s"), s, buf);
    fflush(stderr);
    LocalFree(buf);
  }
  else
    _ftprintf(stderr, _T("%s: unknown Windows error\n"), s);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\xmlfile.h ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#define XML_MAP_FILE 01
#define XML_EXTERNAL_ENTITIES 02

extern int XML_ProcessFile(XML_Parser parser,
			   const XML_Char *filename,
			   unsigned flags);
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\xmlfile.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <fcntl.h>
#include "xmlparse.h"
#include "xmlfile.h"
#include "xmltchar.h"
#include "filemap.h"

#ifdef _MSC_VER
#include <io.h>
#endif

#ifdef _POSIX_SOURCE
#include <unistd.h>
#endif

#ifndef O_BINARY
#ifdef _O_BINARY
#define O_BINARY _O_BINARY
#else
#define O_BINARY 0
#endif
#endif

#ifdef _DEBUG
#define READ_SIZE 16
#else
#define READ_SIZE (1024*8)
#endif



typedef struct {
  XML_Parser parser;
  int *retPtr;
} PROCESS_ARGS;

static
void reportError(XML_Parser parser, const XML_Char *filename)
{
  int code = XML_GetErrorCode(parser);
  const XML_Char *message = XML_ErrorString(code);
  if (message)
    ftprintf(stdout, T("%s:%d:%ld: %s\n"),
	     filename,
	     XML_GetErrorLineNumber(parser),
	     XML_GetErrorColumnNumber(parser),
	     message);
  else
    ftprintf(stderr, T("%s: (unknown message %d)\n"), filename, code);
}

static
void processFile(const void *data,
		 size_t size,
		 const XML_Char *filename,
		 void *args)
{
  XML_Parser parser = ((PROCESS_ARGS *)args)->parser;
  int *retPtr = ((PROCESS_ARGS *)args)->retPtr;
  if (!XML_Parse(parser, data, size, 1)) {
    reportError(parser, filename);
    *retPtr = 0;
  }
  else
    *retPtr = 1;
}

static
int isAsciiLetter(XML_Char c)
{
  return (T('a') <= c && c <= T('z')) || (T('A') <= c && c <= T('Z'));
}

static
const XML_Char *resolveSystemId(const XML_Char *base, const XML_Char *systemId, XML_Char **toFree)
{
  XML_Char *s;
  *toFree = 0;
  if (!base
      || *systemId == T('/')
#ifdef WIN32
      || *systemId == T('\\')
      || (isAsciiLetter(systemId[0]) && systemId[1] == T(':'))
#endif
     )
    return systemId;
  *toFree = (XML_Char *)malloc((tcslen(base) + tcslen(systemId) + 2)*sizeof(XML_Char));
  if (!*toFree)
    return systemId;
  tcscpy(*toFree, base);
  s = *toFree;
  if (tcsrchr(s, T('/')))
    s = tcsrchr(s, T('/')) + 1;
#ifdef WIN32
  if (tcsrchr(s, T('\\')))
    s = tcsrchr(s, T('\\')) + 1;
#endif
  tcscpy(s, systemId);
  return *toFree;
}

static
int externalEntityRefFilemap(XML_Parser parser,
			     const XML_Char *context,
			     const XML_Char *base,
			     const XML_Char *systemId,
			     const XML_Char *publicId)
{
  int result;
  XML_Char *s;
  const XML_Char *filename;
  XML_Parser entParser = XML_ExternalEntityParserCreate(parser, context, 0);
  PROCESS_ARGS args;
  args.retPtr = &result;
  args.parser = entParser;
  filename = resolveSystemId(base, systemId, &s);
  XML_SetBase(entParser, filename);
  if (!filemap(filename, processFile, &args))
    result = 0;
  free(s);
  XML_ParserFree(entParser);
  return result;
}

static
int processStream(const XML_Char *filename, XML_Parser parser)
{
  int fd = topen(filename, O_BINARY|O_RDONLY);
  if (fd < 0) {
    tperror(filename);
    return 0;
  }
  for (;;) {
    int nread;
    char *buf = XML_GetBuffer(parser, READ_SIZE);
    if (!buf) {
      close(fd);
      ftprintf(stderr, T("%s: out of memory\n"), filename);
      return 0;
    }
    nread = read(fd, buf, READ_SIZE);
    if (nread < 0) {
      tperror(filename);
      close(fd);
      return 0;
    }
    if (!XML_ParseBuffer(parser, nread, nread == 0)) {
      reportError(parser, filename);
      close(fd);
      return 0;
    }
    if (nread == 0) {
      close(fd);
      break;;
    }
  }
  return 1;
}

static
int externalEntityRefStream(XML_Parser parser,
			    const XML_Char *context,
			    const XML_Char *base,
			    const XML_Char *systemId,
			    const XML_Char *publicId)
{
  XML_Char *s;
  const XML_Char *filename;
  int ret;
  XML_Parser entParser = XML_ExternalEntityParserCreate(parser, context, 0);
  filename = resolveSystemId(base, systemId, &s);
  XML_SetBase(entParser, filename);
  ret = processStream(filename, entParser);
  free(s);
  XML_ParserFree(entParser);
  return ret;
}

int XML_ProcessFile(XML_Parser parser,
		    const XML_Char *filename,
		    unsigned flags)
{
  int result;

  if (!XML_SetBase(parser, filename)) {
    ftprintf(stderr, T("%s: out of memory"), filename);
    exit(1);
  }

  if (flags & XML_EXTERNAL_ENTITIES)
      XML_SetExternalEntityRefHandler(parser,
	                              (flags & XML_MAP_FILE)
				      ? externalEntityRefFilemap
				      : externalEntityRefStream);
  if (flags & XML_MAP_FILE) {
    PROCESS_ARGS args;
    args.retPtr = &result;
    args.parser = parser;
    if (!filemap(filename, processFile, &args))
      result = 0;
  }
  else
    result = processStream(filename, parser);
  return result;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\perl\site\lib\xml\parser\expat\xmlwf\xmlwf.c ===
/*
The contents of this file are subject to the Mozilla Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is expat.

The Initial Developer of the Original Code is James Clark.
Portions created by James Clark are Copyright (C) 1998, 1999
James Clark. All Rights Reserved.

Contributor(s):

Alternatively, the contents of this file may be used under the terms
of the GNU General Public License (the "GPL"), in which case the
provisions of the GPL are applicable instead of those above.  If you
wish to allow use of your version of this file only under the terms of
the GPL and not to allow others to use your version of this file under
the MPL, indicate your decision by deleting the provisions above and
replace them with the notice and other provisions required by the
GPL. If you do not delete the provisions above, a recipient may use
your version of this file under either the MPL or the GPL.
*/

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

#include "xmlparse.h"
#include "codepage.h"
#include "xmlfile.h"
#include "xmltchar.h"

#ifdef _MSC_VER
#include <crtdbg.h>
#endif

/* This ensures proper sorting. */

#define NSSEP T('\001')

static void characterData(void *userData, const XML_Char *s, int len)
{
  FILE *fp = userData;
  for (; len > 0; --len, ++s) {
    switch (*s) {
    case T('&'):
      fputts(T("&amp;"), fp);
      break;
    case T('<'):
      fputts(T("&lt;"), fp);
      break;
    case T('>'):
      fputts(T("&gt;"), fp);
      break;
#ifdef W3C14N
    case 13:
      fputts(T("&#xD;"), fp);
      break;
#else
    case T('"'):
      fputts(T("&quot;"), fp);
      break;
    case 9:
    case 10:
    case 13:
      ftprintf(fp, T("&#%d;"), *s);
      break;
#endif
    default:
      puttc(*s, fp);
      break;
    }
  }
}

static void attributeValue(FILE *fp, const XML_Char *s)
{
  puttc(T('='), fp);
  puttc(T('"'), fp);
  for (;;) {
    switch (*s) {
    case 0:
    case NSSEP:
      puttc(T('"'), fp);
      return;
    case T('&'):
      fputts(T("&amp;"), fp);
      break;
    case T('<'):
      fputts(T("&lt;"), fp);
      break;
    case T('"'):
      fputts(T("&quot;"), fp);
      break;
#ifdef W3C14N
    case 9:
      fputts(T("&#x9;"), fp);
      break;
    case 10:
      fputts(T("&#xA;"), fp);
      break;
    case 13:
      fputts(T("&#xD;"), fp);
      break;
#else
    case T('>'):
      fputts(T("&gt;"), fp);
      break;
    case 9:
    case 10:
    case 13:
      ftprintf(fp, T("&#%d;"), *s);
      break;
#endif
    default:
      puttc(*s, fp);
      break;
    }
    s++;
  }
}

/* Lexicographically comparing UTF-8 encoded attribute values,
is equivalent to lexicographically comparing based on the character number. */

static int attcmp(const void *att1, const void *att2)
{
  return tcscmp(*(const XML_Char **)att1, *(const XML_Char **)att2);
}

static void startElement(void *userData, const XML_Char *name, const XML_Char **atts)
{
  int nAtts;
  const XML_Char **p;
  FILE *fp = userData;
  puttc(T('<'), fp);
  fputts(name, fp);

  p = atts;
  while (*p)
    ++p;
  nAtts = (p - atts) >> 1;
  if (nAtts > 1)
    qsort((void *)atts, nAtts, sizeof(XML_Char *) * 2, attcmp);
  while (*atts) {
    puttc(T(' '), fp);
    fputts(*atts++, fp);
    attributeValue(fp, *atts);
    atts++;
  }
  puttc(T('>'), fp);
}

static void endElement(void *userData, const XML_Char *name)
{
  FILE *fp = userData;
  puttc(T('<'), fp);
  puttc(T('/'), fp);
  fputts(name, fp);
  puttc(T('>'), fp);
}

static int nsattcmp(const void *p1, const void *p2)
{
  const XML_Char *att1 = *(const XML_Char **)p1;
  const XML_Char *att2 = *(const XML_Char **)p2;
  int sep1 = (tcsrchr(att1, NSSEP) != 0);
  int sep2 = (tcsrchr(att1, NSSEP) != 0);
  if (sep1 != sep2)
    return sep1 - sep2;
  return tcscmp(att1, att2);
}

static void startElementNS(void *userData, const XML_Char *name, const XML_Char **atts)
{
  int nAtts;
  int nsi;
  const XML_Char **p;
  FILE *fp = userData;
  const XML_Char *sep;
  puttc(T('<'), fp);

  sep = tcsrchr(name, NSSEP);
  if (sep) {
    fputts(T("n1:"), fp);
    fputts(sep + 1, fp);
    fputts(T(" xmlns:n1"), fp);
    attributeValue(fp, name);
    nsi = 2;
  }
  else {
    fputts(name, fp);
    nsi = 1;
  }

  p = atts;
  while (*p)
    ++p;
  nAtts = (p - atts) >> 1;
  if (nAtts > 1)
    qsort((void *)atts, nAtts, sizeof(XML_Char *) * 2, nsattcmp);
  while (*atts) {
    name = *atts++;
    sep = tcsrchr(name, NSSEP);
    puttc(T(' '), fp);
    if (sep) {
      ftprintf(fp, T("n%d:"), nsi);
      fputts(sep + 1, fp);
    }
    else
      fputts(name, fp);
    attributeValue(fp, *atts);
    if (sep) {
      ftprintf(fp, T(" xmlns:n%d"), nsi++);
      attributeValue(fp, name);
    }
    atts++;
  }
  puttc(T('>'), fp);
}

static void endElementNS(void *userData, const XML_Char *name)
{
  FILE *fp = userData;
  const XML_Char *sep;
  puttc(T('<'), fp);
  puttc(T('/'), fp);
  sep = tcsrchr(name, NSSEP);
  if (sep) {
    fputts(T("n1:"), fp);
    fputts(sep + 1, fp);
  }
  else
    fputts(name, fp);
  puttc(T('>'), fp);
}

#ifndef W3C14N

static void processingInstruction(void *userData, const XML_Char *target, const XML_Char *data)
{
  FILE *fp = userData;
  puttc(T('<'), fp);
  puttc(T('?'), fp);
  fputts(target, fp);
  puttc(T(' '), fp);
  fputts(data, fp);
  puttc(T('?'), fp);
  puttc(T('>'), fp);
}

#endif /* not W3C14N */

static void defaultCharacterData(XML_Parser parser, const XML_Char *s, int len)
{
  XML_DefaultCurrent(parser);
}

static void defaultStartElement(XML_Parser parser, const XML_Char *name, const XML_Char **atts)
{
  XML_DefaultCurrent(parser);
}

static void defaultEndElement(XML_Parser parser, const XML_Char *name)
{
  XML_DefaultCurrent(parser);
}

static void defaultProcessingInstruction(XML_Parser parser, const XML_Char *target, const XML_Char *data)
{
  XML_DefaultCurrent(parser);
}

static void nopCharacterData(XML_Parser parser, const XML_Char *s, int len)
{
}

static void nopStartElement(XML_Parser parser, const XML_Char *name, const XML_Char **atts)
{
}

static void nopEndElement(XML_Parser parser, const XML_Char *name)
{
}

static void nopProcessingInstruction(XML_Parser parser, const XML_Char *target, const XML_Char *data)
{
}

static void markup(XML_Parser parser, const XML_Char *s, int len)
{
  FILE *fp = XML_GetUserData(parser);
  for (; len > 0; --len, ++s)
    puttc(*s, fp);
}

static
void metaLocation(XML_Parser parser)
{
  const XML_Char *uri = XML_GetBase(parser);
  if (uri)
    ftprintf(XML_GetUserData(parser), T(" uri=\"%s\""), uri);
  ftprintf(XML_GetUserData(parser),
           T(" byte=\"%ld\" nbytes=\"%d\" line=\"%d\" col=\"%d\""),
	   XML_GetCurrentByteIndex(parser),
	   XML_GetCurrentByteCount(parser),
	   XML_GetCurrentLineNumber(parser),
	   XML_GetCurrentColumnNumber(parser));
}

static
void metaStartDocument(XML_Parser parser)
{
  fputts(T("<document>\n"), XML_GetUserData(parser));
}

static
void metaEndDocument(XML_Parser parser)
{
  fputts(T("</document>\n"), XML_GetUserData(parser));
}

static
void metaStartElement(XML_Parser parser, const XML_Char *name, const XML_Char **atts)
{
  FILE *fp = XML_GetUserData(parser);
  const XML_Char **specifiedAttsEnd
    = atts + 2*XML_GetSpecifiedAttributeCount(parser);
  ftprintf(fp, T("<starttag name=\"%s\""), name);
  metaLocation(parser);
  if (*atts) {
    fputts(T(">\n"), fp);
    do {
      ftprintf(fp, T("<attribute name=\"%s\" value=\""), atts[0]);
      characterData(fp, atts[1], tcslen(atts[1]));
      if (atts >= specifiedAttsEnd)
	fputts(T("\" defaulted=\"yes\"/>\n"), fp);
      else
	fputts(T("\"/>\n"), fp);
    } while (*(atts += 2));
    fputts(T("</starttag>\n"), fp);
  }
  else
    fputts(T("/>\n"), fp);
}

static
void metaEndElement(XML_Parser parser, const XML_Char *name)
{
  FILE *fp = XML_GetUserData(parser);
  ftprintf(fp, T("<endtag name=\"%s\""), name);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaProcessingInstruction(XML_Parser parser, const XML_Char *target, const XML_Char *data)
{
  FILE *fp = XML_GetUserData(parser);
  ftprintf(fp, T("<pi target=\"%s\" data=\""), target);
  characterData(fp, data, tcslen(data));
  puttc(T('"'), fp);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaComment(XML_Parser parser, const XML_Char *data)
{
  FILE *fp = XML_GetUserData(parser);
  fputts(T("<comment data=\""), fp);
  characterData(fp, data, tcslen(data));
  puttc(T('"'), fp);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaStartCdataSection(XML_Parser parser)
{
  FILE *fp = XML_GetUserData(parser);
  fputts(T("<startcdata"), fp);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaEndCdataSection(XML_Parser parser)
{
  FILE *fp = XML_GetUserData(parser);
  fputts(T("<endcdata"), fp);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaCharacterData(XML_Parser parser, const XML_Char *s, int len)
{
  FILE *fp = XML_GetUserData(parser);
  fputts(T("<chars str=\""), fp);
  characterData(fp, s, len);
  puttc(T('"'), fp);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaStartDoctypeDecl(XML_Parser parser, const XML_Char *doctypeName)
{
  FILE *fp = XML_GetUserData(parser);
  ftprintf(fp, T("<startdoctype name=\"%s\""), doctypeName);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaEndDoctypeDecl(XML_Parser parser)
{
  FILE *fp = XML_GetUserData(parser);
  fputts(T("<enddoctype"), fp);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaUnparsedEntityDecl(XML_Parser parser,
			    const XML_Char *entityName,
			    const XML_Char *base,
			    const XML_Char *systemId,
			    const XML_Char *publicId,
			    const XML_Char *notationName)
{
  FILE *fp = XML_GetUserData(parser);
  ftprintf(fp, T("<entity name=\"%s\""), entityName);
  if (publicId)
    ftprintf(fp, T(" public=\"%s\""), publicId);
  fputts(T(" system=\""), fp);
  characterData(fp, systemId, tcslen(systemId));
  puttc(T('"'), fp);
  ftprintf(fp, T(" notation=\"%s\""), notationName);
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaNotationDecl(XML_Parser parser,
		      const XML_Char *notationName,
		      const XML_Char *base,
		      const XML_Char *systemId,
		      const XML_Char *publicId)
{
  FILE *fp = XML_GetUserData(parser);
  ftprintf(fp, T("<notation name=\"%s\""), notationName);
  if (publicId)
    ftprintf(fp, T(" public=\"%s\""), publicId);
  if (systemId) {
    fputts(T(" system=\""), fp);
    characterData(fp, systemId, tcslen(systemId));
    puttc(T('"'), fp);
  }
  metaLocation(parser);
  fputts(T("/>\n"), fp);
}

static
void metaStartNamespaceDecl(XML_Parser parser,
			    const XML_Char *prefix,
			    const XML_Char *uri)
{
  FILE *fp = XML_GetUserData(parser);
  fputts(T("<startns"), fp);
  if (prefix)
    ftprintf(fp, T(" prefix=\"%s\""), prefix);
  if (uri) {
    fputts(T(" ns=\""), fp);
    characterData(fp, uri, tcslen(uri));
    fputts(T("\"/>\n"), fp);
  }
  else
    fputts(T("/>\n"), fp);
}

static
void metaEndNamespaceDecl(XML_Parser parser, const XML_Char *prefix)
{
  FILE *fp = XML_GetUserData(parser);
  if (!prefix)
    fputts(T("<endns/>\n"), fp);
  else
    ftprintf(fp, T("<endns prefix=\"%s\"/>\n"), prefix);
}

static
int unknownEncodingConvert(void *data, const char *p)
{
  return codepageConvert(*(int *)data, p);
}

static
int unknownEncoding(void *userData,
		    const XML_Char *name,
		    XML_Encoding *info)
{
  int cp;
  static const XML_Char prefixL[] = T("windows-");
  static const XML_Char prefixU[] = T("WINDOWS-");
  int i;

  for (i = 0; prefixU[i]; i++)
    if (name[i] != prefixU[i] && name[i] != prefixL[i])
      return 0;
  
  cp = 0;
  for (; name[i]; i++) {
    static const XML_Char digits[] = T("0123456789");
    const XML_Char *s = tcschr(digits, name[i]);
    if (!s)
      return 0;
    cp *= 10;
    cp += s - digits;
    if (cp >= 0x10000)
      return 0;
  }
  if (!codepageMap(cp, info->map))
    return 0;
  info->convert = unknownEncodingConvert;
  /* We could just cast the code page integer to a void *,
  and avoid the use of release. */
  info->release = free;
  info->data = malloc(sizeof(int));
  if (!info->data)
    return 0;
  *(int *)info->data = cp;
  return 1;
}

static
int notStandalone(void *userData)
{
  return 0;
}

static
void usage(const XML_Char *prog)
{
  ftprintf(stderr, T("usage: %s [-n] [-p] [-r] [-s] [-w] [-x] [-d output-dir] [-e encoding] file ...\n"), prog);
  exit(1);
}

int tmain(int argc, XML_Char **argv)
{
  int i, j;
  const XML_Char *outputDir = 0;
  const XML_Char *encoding = 0;
  unsigned processFlags = XML_MAP_FILE;
  int windowsCodePages = 0;
  int outputType = 0;
  int useNamespaces = 0;
  int requireStandalone = 0;
  int paramEntityParsing = XML_PARAM_ENTITY_PARSING_NEVER;

#ifdef _MSC_VER
  _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF|_CRTDBG_LEAK_CHECK_DF);
#endif

  i = 1;
  j = 0;
  while (i < argc) {
    if (j == 0) {
      if (argv[i][0] != T('-'))
	break;
      if (argv[i][1] == T('-') && argv[i][2] == T('\0')) {
	i++;
	break;
      }
      j++;
    }
    switch (argv[i][j]) {
    case T('r'):
      processFlags &= ~XML_MAP_FILE;
      j++;
      break;
    case T('s'):
      requireStandalone = 1;
      j++;
      break;
    case T('n'):
      useNamespaces = 1;
      j++;
      break;
    case T('p'):
      paramEntityParsing = XML_PARAM_ENTITY_PARSING_ALWAYS;
      /* fall through */
    case T('x'):
      processFlags |= XML_EXTERNAL_ENTITIES;
      j++;
      break;
    case T('w'):
      windowsCodePages = 1;
      j++;
      break;
    case T('m'):
      outputType = 'm';
      j++;
      break;
    case T('c'):
      outputType = 'c';
      useNamespaces = 0;
      j++;
      break;
    case T('t'):
      outputType = 't';
      j++;
      break;
    case T('d'):
      if (argv[i][j + 1] == T('\0')) {
	if (++i == argc)
	  usage(argv[0]);
	outputDir = argv[i];
      }
      else
	outputDir = argv[i] + j + 1;
      i++;
      j = 0;
      break;
    case T('e'):
      if (argv[i][j + 1] == T('\0')) {
	if (++i == argc)
	  usage(argv[0]);
	encoding = argv[i];
      }
      else
	encoding = argv[i] + j + 1;
      i++;
      j = 0;
      break;
    case T('\0'):
      if (j > 1) {
	i++;
	j = 0;
	break;
      }
      /* fall through */
    default:
      usage(argv[0]);
    }
  }
  if (i == argc)
    usage(argv[0]);
  for (; i < argc; i++) {
    FILE *fp = 0;
    XML_Char *outName = 0;
    int result;
    XML_Parser parser;
    if (useNamespaces)
      parser = XML_ParserCreateNS(encoding, NSSEP);
    else
      parser = XML_ParserCreate(encoding);
    if (requireStandalone)
      XML_SetNotStandaloneHandler(parser, notStandalone);
    XML_SetParamEntityParsing(parser, paramEntityParsing);
    if (outputType == 't') {
      /* This is for doing timings; this gives a more realistic estimate of
	 the parsing time. */
      outputDir = 0;
      XML_SetElementHandler(parser, nopStartElement, nopEndElement);
      XML_SetCharacterDataHandler(parser, nopCharacterData);
      XML_SetProcessingInstructionHandler(parser, nopProcessingInstruction);
    }
    else if (outputDir) {
      const XML_Char *file = argv[i];
      if (tcsrchr(file, T('/')))
	file = tcsrchr(file, T('/')) + 1;
#ifdef WIN32
      if (tcsrchr(file, T('\\')))
	file = tcsrchr(file, T('\\')) + 1;
#endif
      outName = malloc((tcslen(outputDir) + tcslen(file) + 2) * sizeof(XML_Char));
      tcscpy(outName, outputDir);
      tcscat(outName, T("/"));
      tcscat(outName, file);
      fp = tfopen(outName, T("wb"));
      if (!fp) {
	tperror(outName);
	exit(1);
      }
      setvbuf(fp, NULL, _IOFBF, 16384);
#ifdef XML_UNICODE
      puttc(0xFEFF, fp);
#endif
      XML_SetUserData(parser, fp);
      switch (outputType) {
      case 'm':
	XML_UseParserAsHandlerArg(parser);
	XML_SetElementHandler(parser, metaStartElement, metaEndElement);
	XML_SetProcessingInstructionHandler(parser, metaProcessingInstruction);
	XML_SetCommentHandler(parser, metaComment);
	XML_SetCdataSectionHandler(parser, metaStartCdataSection, metaEndCdataSection);
	XML_SetCharacterDataHandler(parser, metaCharacterData);
	XML_SetDoctypeDeclHandler(parser, metaStartDoctypeDecl, metaEndDoctypeDecl);
	XML_SetUnparsedEntityDeclHandler(parser, metaUnparsedEntityDecl);
	XML_SetNotationDeclHandler(parser, metaNotationDecl);
	XML_SetNamespaceDeclHandler(parser, metaStartNamespaceDecl, metaEndNamespaceDecl);
	metaStartDocument(parser);
	break;
      case 'c':
	XML_UseParserAsHandlerArg(parser);
	XML_SetDefaultHandler(parser, markup);
	XML_SetElementHandler(parser, defaultStartElement, defaultEndElement);
	XML_SetCharacterDataHandler(parser, defaultCharacterData);
	XML_SetProcessingInstructionHandler(parser, defaultProcessingInstruction);
	break;
      default:
	if (useNamespaces)
	  XML_SetElementHandler(parser, startElementNS, endElementNS);
	else
	  XML_SetElementHandler(parser, startElement, endElement);
	XML_SetCharacterDataHandler(parser, characterData);
#ifndef W3C14N
	XML_SetProcessingInstructionHandler(parser, processingInstruction);
#endif /* not W3C14N */
	break;
      }
    }
    if (windowsCodePages)
      XML_SetUnknownEncodingHandler(parser, unknownEncoding, 0);
    result = XML_ProcessFile(parser, argv[i], processFlags);
    if (outputDir) {
      if (outputType == 'm')
	metaEndDocument(parser);
      fclose(fp);
      if (!result)
	tremove(outName);
      free(outName);
    }
    XML_ParserFree(parser);
  }
  return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\postbuildscripts\sfp\amd64_dtc.h ===
PROTECT_FILE_ENTRY DtcFiles[] =
{
    {L"wAcGenral.dll", L"%systemroot%\\AppPatch\\AcGenral.dll", NULL},
    {L"wAcLayers.dll", L"%systemroot%\\AppPatch\\AcLayers.dll", NULL},
    {L"wAcSpecfc.dll", L"%systemroot%\\AppPatch\\AcSpecfc.dll", NULL},
    {L"wAcXtrnal.dll", L"%systemroot%\\AppPatch\\AcXtrnal.dll", NULL},
    {NULL, L"%systemroot%\\system32\\admwprox.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\adsiis.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ahui.exe", NULL},
    {L"wahui.exe", L"%systemroot%\\SysWOW64\\ahui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\apphelp.dll", NULL},
    {L"wapphelp.dll", L"%systemroot%\\SysWOW64\\apphelp.dll", NULL},
    {L"wapphelp.sdb", L"%systemroot%\\AppPatch\\apphelp.sdb", NULL},
    {NULL, L"%systemroot%\\help\\apps.chm", NULL},
    {NULL, L"%systemroot%\\system32\\asycfilt.dll", NULL},
    {L"wasycfilt.dll", L"%systemroot%\\SysWOW64\\asycfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atmlib.dll", NULL},
    {L"watmlib.dll", L"%systemroot%\\SysWOW64\\atmlib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\CertMap.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\CertWiz.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\cfgmgr32.dll", NULL},
    {L"wcfgmgr32.dll", L"%systemroot%\\SysWOW64\\cfgmgr32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\Cnfgprts.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\coadmin.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\comctl32.dll", NULL},
    {L"wcomctl32.dll", L"%systemroot%\\SysWOW64\\comctl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comdlg32.dll", NULL},
    {L"wcomdlg32.dll", L"%systemroot%\\SysWOW64\\comdlg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compatUI.dll", NULL},
    {L"wcompatUI.dll", L"%systemroot%\\SysWOW64\\compatUI.dll", NULL},
    {NULL, L"%systemroot%\\system32\\crypt32.dll", NULL},
    {L"wcrypt32.dll", L"%systemroot%\\SysWOW64\\crypt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdlg.dll", NULL},
    {L"wcryptdlg.dll", L"%systemroot%\\SysWOW64\\cryptdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdll.dll", NULL},
    {L"wcryptdll.dll", L"%systemroot%\\SysWOW64\\cryptdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptext.dll", NULL},
    {L"wcryptext.dll", L"%systemroot%\\SysWOW64\\cryptext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptnet.dll", NULL},
    {L"wcryptnet.dll", L"%systemroot%\\SysWOW64\\cryptnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptsvc.dll", NULL},
    {L"wcryptsvc.dll", L"%systemroot%\\SysWOW64\\cryptsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptui.dll", NULL},
    {L"wcryptui.dll", L"%systemroot%\\SysWOW64\\cryptui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dispex.dll", NULL},
    {L"wdispex.dll", L"%systemroot%\\SysWOW64\\dispex.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\dosapp.fon", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\drvmain.sdb", NULL},
    {L"wdrvmain.sdb", L"%systemroot%\\AppPatch\\drvmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\dssenh.dll", NULL},
    {L"wdssenh.dll", L"%systemroot%\\SysWOW64\\dssenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fastfat.sys", NULL},
    {NULL, L"%systemroot%\\fonts\\framd.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\framdit.ttf", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iismap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisreset.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisrstap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisrstas.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisRtl.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisui.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\imeshare.dll", NULL},
    {L"wimeshare.dll", L"%systemroot%\\SysWOW64\\imeshare.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\inetmgr.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\inetmgr.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\infoadmn.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\ipsec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\isatq.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\itircl.dll", NULL},
    {L"witircl.dll", L"%systemroot%\\SysWOW64\\itircl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\itss.dll", NULL},
    {L"witss.dll", L"%systemroot%\\SysWOW64\\itss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jscript.dll", NULL},
    {L"wjscript.dll", L"%systemroot%\\SysWOW64\\jscript.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jsproxy.dll", NULL},
    {L"wjsproxy.dll", L"%systemroot%\\SysWOW64\\jsproxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kernel32.dll", NULL},
    {L"wkernel32.dll", L"%systemroot%\\SysWOW64\\kernel32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\logui.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\lsasrv.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\marlett.ttf", NULL},
    {L"wmfc40.dll", L"%systemroot%\\SysWOW64\\mfc40.dll", NULL},
    {L"wmfc40u.dll", L"%systemroot%\\SysWOW64\\mfc40u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42.dll", NULL},
    {L"wmfc42.dll", L"%systemroot%\\SysWOW64\\mfc42.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42u.dll", NULL},
    {L"wmfc42u.dll", L"%systemroot%\\SysWOW64\\mfc42u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfcsubs.dll", NULL},
    {L"wmfcsubs.dll", L"%systemroot%\\SysWOW64\\mfcsubs.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\micross.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\modern.fon", NULL},
    {L"wmsimain.sdb", L"%systemroot%\\AppPatch\\msimain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\mssip32.dll", NULL},
    {L"wmssip32.dll", L"%systemroot%\\SysWOW64\\mssip32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcrt.dll", NULL},
    {L"wmsvcrt.dll", L"%systemroot%\\SysWOW64\\msvcrt.dll", NULL},
    {L"wmsvcrt40.dll", L"%systemroot%\\SysWOW64\\msvcrt40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndiswan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\netapi32.dll", NULL},
    {L"wnetapi32.dll", L"%systemroot%\\SysWOW64\\netapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpadm.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpsnap.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\ntdll.dll", NULL},
    {L"wntdll.dll", L"%systemroot%\\SysWOW64\\ntdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ntfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ntoskrnl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ocmanage.dll", NULL},
    {L"wocmanage.dll", L"%systemroot%\\SysWOW64\\ocmanage.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbccp32.dll", NULL},
    {L"wodbccp32.dll", L"%systemroot%\\SysWOW64\\odbccp32.dll", NULL},
    {L"wodtext32.dll", L"%systemroot%\\SysWOW64\\odtext32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ole32.dll", NULL},
    {L"wole32.dll", L"%systemroot%\\SysWOW64\\ole32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleaut32.dll", NULL},
    {L"woleaut32.dll", L"%systemroot%\\SysWOW64\\oleaut32.dll", NULL},
    {L"wolepro32.dll", L"%systemroot%\\SysWOW64\\olepro32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\riched20.dll", NULL},
    {L"wriched20.dll", L"%systemroot%\\SysWOW64\\riched20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\riched32.dll", NULL},
    {L"wriched32.dll", L"%systemroot%\\SysWOW64\\riched32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsaenh.dll", NULL},
    {L"wrsaenh.dll", L"%systemroot%\\SysWOW64\\rsaenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\samlib.dll", NULL},
    {L"wsamlib.dll", L"%systemroot%\\SysWOW64\\samlib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\samsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schannel.dll", NULL},
    {L"wschannel.dll", L"%systemroot%\\SysWOW64\\schannel.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\script.fon", NULL},
    {NULL, L"%systemroot%\\system32\\scrobj.dll", NULL},
    {L"wscrobj.dll", L"%systemroot%\\SysWOW64\\scrobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scrrun.dll", NULL},
    {L"wscrrun.dll", L"%systemroot%\\SysWOW64\\scrrun.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sdbinst.exe", NULL},
    {L"wsdbinst.exe", L"%systemroot%\\SysWOW64\\sdbinst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\setupapi.dll", NULL},
    {L"wsetupapi.dll", L"%systemroot%\\SysWOW64\\setupapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc.dll", NULL},
    {L"wsfc.dll", L"%systemroot%\\SysWOW64\\sfc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc.exe", NULL},
    {L"wsfc.exe", L"%systemroot%\\SysWOW64\\sfc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfcfiles.dll", NULL},
    {L"wsfcfiles.dll", L"%systemroot%\\SysWOW64\\sfcfiles.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shimeng.dll", NULL},
    {L"wshimeng.dll", L"%systemroot%\\SysWOW64\\shimeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slayerxp.dll", NULL},
    {L"wslayerxp.dll", L"%systemroot%\\SysWOW64\\slayerxp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpadm.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpsnap.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\staxmem.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\stdole2.tlb", NULL},
    {L"wstdole2.tlb", L"%systemroot%\\SysWOW64\\stdole2.tlb", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\sysmain.sdb", NULL},
    {L"wsysmain.sdb", L"%systemroot%\\AppPatch\\sysmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\sysocmgr.exe", NULL},
    {L"wsysocmgr.exe", L"%systemroot%\\SysWOW64\\sysocmgr.exe", NULL},
    {NULL, L"%systemroot%\\fonts\\tahoma.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\tahomabd.ttf", NULL},
    {NULL, L"%systemroot%\\twunk_16.exe", NULL},
    {NULL, L"%systemroot%\\twunk_32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\umpnpmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\url.dll", NULL},
    {L"wurl.dll", L"%systemroot%\\SysWOW64\\url.dll", NULL},
    {NULL, L"%systemroot%\\system32\\urlmon.dll", NULL},
    {L"wurlmon.dll", L"%systemroot%\\SysWOW64\\urlmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vbscript.dll", NULL},
    {L"wvbscript.dll", L"%systemroot%\\SysWOW64\\vbscript.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\vgaoem.fon", NULL},
    {NULL, L"%systemroot%\\system32\\wamregps.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\wininet.dll", NULL},
    {L"wwininet.dll", L"%systemroot%\\SysWOW64\\wininet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winlogon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wintrust.dll", NULL},
    {L"wwintrust.dll", L"%systemroot%\\SysWOW64\\wintrust.dll", NULL},
    {L"wasfsipc.dll", L"%systemroot%\\SysWOW64\\asfsipc.dll", NULL},
    {L"wdao360.dll", L"%commonprogramfiles(x86)%\\Microsoft Shared\\DAO\\dao360.dll", NULL},
    {L"wdrmclien.dll", L"%systemroot%\\SysWOW64\\drmclien.dll", NULL},
    {L"wdrmstor.dll", L"%systemroot%\\SysWOW64\\drmstor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ds32gt.dll", NULL},
    {L"wds32gt.dll", L"%systemroot%\\SysWOW64\\ds32gt.dll", NULL},
    {L"wdxmasf.dll", L"%systemroot%\\SysWOW64\\dxmasf.dll", NULL},
    {L"wlaprxy.dll", L"%systemroot%\\SysWOW64\\laprxy.dll", NULL},
    {L"wlogagent.exe", L"%systemroot%\\SysWOW64\\logagent.exe", NULL},
    {L"wmpg4ds32.ax", L"%systemroot%\\SysWOW64\\mpg4ds32.ax", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadce.dll", NULL},
    {L"wmsadce.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadce.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcer.dll", NULL},
    {L"wmsadcer.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcer.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcf.dll", NULL},
    {L"wmsadcf.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcf.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcfr.dll", NULL},
    {L"wmsadcfr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcfr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadco.dll", NULL},
    {L"wmsadco.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadco.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcor.dll", NULL},
    {L"wmsadcor.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcor.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcs.dll", NULL},
    {L"wmsadcs.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcs.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadds.dll", NULL},
    {L"wmsadds.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadds.dll", NULL},
    {L"wmsadds32.ax", L"%systemroot%\\SysWOW64\\msadds32.ax", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msaddsr.dll", NULL},
    {L"wmsaddsr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msaddsr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msader15.dll", NULL},
    {L"wmsader15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msader15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado15.dll", NULL},
    {L"wmsado15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msado15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado20.tlb", NULL},
    {L"wmsado20.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado20.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado21.tlb", NULL},
    {L"wmsado21.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado21.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadomd.dll", NULL},
    {L"wmsadomd.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadomd.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msador15.dll", NULL},
    {L"wmsador15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msador15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadox.dll", NULL},
    {L"wmsadox.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadox.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadrh15.dll", NULL},
    {L"wmsadrh15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadrh15.dll", NULL},
    {L"wmscpxl32.dLL", L"%systemroot%\\SysWOW64\\mscpxl32.dLL", NULL},
    {L"wmsdadc.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdadc.dll", NULL},
    {L"wmsdaenum.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaenum.dll", NULL},
    {L"wmsdaer.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaer.dll", NULL},
    {L"wmsdaora.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaora.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdaosp.dll", NULL},
    {L"wmsdaosp.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaosp.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaprsr.dll", NULL},
    {L"wmsdaprsr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaprsr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaprst.dll", NULL},
    {L"wmsdaprst.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaprst.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdaps.dll", NULL},
    {L"wmsdaps.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaps.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdarem.dll", NULL},
    {L"wmsdarem.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdarem.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaremr.dll", NULL},
    {L"wmsdaremr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaremr.dll", NULL},
    {L"wmsdasc.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasc.dll", NULL},
    {L"wmsdasql.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasql.dll", NULL},
    {L"wmsdasqlr.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasqlr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdatsrc.tlb", NULL},
    {L"wmsdatsrc.tlb", L"%systemroot%\\SysWOW64\\msdatsrc.tlb", NULL},
    {L"wmsdatt.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdatt.dll", NULL},
    {L"wmsdaurl.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaurl.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdfmap.dll", NULL},
    {L"wmsdfmap.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdfmap.dll", NULL},
    {L"wmsdxm.ocx", L"%systemroot%\\SysWOW64\\msdxm.ocx", NULL},
    {L"wmsdxmlc.dll", L"%systemroot%\\SysWOW64\\msdxmlc.dll", NULL},
    {L"wmsexch40.dll", L"%systemroot%\\SysWOW64\\msexch40.dll", NULL},
    {L"wmsexcl40.dll", L"%systemroot%\\SysWOW64\\msexcl40.dll", NULL},
    {L"wmsjet40.dll", L"%systemroot%\\SysWOW64\\msjet40.dll", NULL},
    {L"wmsjint40.dll", L"%systemroot%\\SysWOW64\\msjint40.dll", NULL},
    {L"wmsjro.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msjro.dll", NULL},
    {L"wmsjter40.dll", L"%systemroot%\\SysWOW64\\msjter40.dll", NULL},
    {L"wmsjtes40.dll", L"%systemroot%\\SysWOW64\\msjtes40.dll", NULL},
    {L"wmsltus40.dll", L"%systemroot%\\SysWOW64\\msltus40.dll", NULL},
    {L"wmsorcl32.dll", L"%systemroot%\\SysWOW64\\msorcl32.dll", NULL},
    {L"wmspbde40.dll", L"%systemroot%\\SysWOW64\\mspbde40.dll", NULL},
    {L"wmsrd2x40.dll", L"%systemroot%\\SysWOW64\\msrd2x40.dll", NULL},
    {L"wmsrd3x40.dll", L"%systemroot%\\SysWOW64\\msrd3x40.dll", NULL},
    {L"wmsrepl40.dll", L"%systemroot%\\SysWOW64\\msrepl40.dll", NULL},
    {L"wmstext40.dll", L"%systemroot%\\SysWOW64\\mstext40.dll", NULL},
    {L"wmswdat10.dll", L"%systemroot%\\SysWOW64\\mswdat10.dll", NULL},
    {L"wmswstr10.dll", L"%systemroot%\\SysWOW64\\mswstr10.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msxactps.dll", NULL},
    {L"wmsxactps.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msxactps.dll", NULL},
    {L"wmsxbde40.dll", L"%systemroot%\\SysWOW64\\msxbde40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbc32.dll", NULL},
    {L"wodbc32.dll", L"%systemroot%\\SysWOW64\\odbc32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbc32gt.dll", NULL},
    {L"wodbc32gt.dll", L"%systemroot%\\SysWOW64\\odbc32gt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcad32.exe", NULL},
    {L"wodbcad32.exe", L"%systemroot%\\SysWOW64\\odbcad32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.dll", NULL},
    {L"wodbcconf.dll", L"%systemroot%\\SysWOW64\\odbcconf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.exe", NULL},
    {L"wodbcconf.exe", L"%systemroot%\\SysWOW64\\odbcconf.exe", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.rsp", NULL},
    {L"wodbcconf.rsp", L"%systemroot%\\SysWOW64\\odbcconf.rsp", NULL},
    {NULL, L"%systemroot%\\system32\\odbccp32.cpl", NULL},
    {L"wodbccp32.cpl", L"%systemroot%\\SysWOW64\\odbccp32.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\odbccr32.dll", NULL},
    {L"wodbccr32.dll", L"%systemroot%\\SysWOW64\\odbccr32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbccu32.dll", NULL},
    {L"wodbccu32.dll", L"%systemroot%\\SysWOW64\\odbccu32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcint.dll", NULL},
    {L"wodbcint.dll", L"%systemroot%\\SysWOW64\\odbcint.dll", NULL},
    {L"wodbcji32.dll", L"%systemroot%\\SysWOW64\\odbcji32.dll", NULL},
    {L"wodbcjt32.dll", L"%systemroot%\\SysWOW64\\odbcjt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbctrac.dll", NULL},
    {L"wodbctrac.dll", L"%systemroot%\\SysWOW64\\odbctrac.dll", NULL},
    {L"woddbse32.dll", L"%systemroot%\\SysWOW64\\oddbse32.dll", NULL},
    {L"wodexl32.dll", L"%systemroot%\\SysWOW64\\odexl32.dll", NULL},
    {L"wodfox32.dll", L"%systemroot%\\SysWOW64\\odfox32.dll", NULL},
    {L"wodpdx32.dll", L"%systemroot%\\SysWOW64\\odpdx32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\oledb32.dll", NULL},
    {L"woledb32.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\oledb32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\oledb32r.dll", NULL},
    {L"woledb32r.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\oledb32r.dll", NULL},
    {L"wstrmdll.dll", L"%systemroot%\\SysWOW64\\strmdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\wmsocm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\1394bus.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\4mmdat.sys", NULL},
    {NULL, L"%systemroot%\\system32\\6to4svc.dll", NULL},
    {L"w6to4svc.dll", L"%systemroot%\\SysWOW64\\6to4svc.dll", NULL},
    {L"w_isdel.exe", L"%systemroot%\\SysWOW64\\InstallShield\\_isdel.exe", NULL},
    {L"w_setup.dll", L"%systemroot%\\SysWOW64\\InstallShield\\_setup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\aaaamon.dll", NULL},
    {L"waaaamon.dll", L"%systemroot%\\SysWOW64\\aaaamon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\access.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\acctres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\accwiz.exe", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\AcGen64.dll", NULL},
    {NULL, L"%systemroot%\\Application Compatibility Scripts\\aciniupd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\acledit.dll", NULL},
    {L"wacledit.dll", L"%systemroot%\\SysWOW64\\acledit.dll", NULL},
    {L"wAcLua.dll", L"%systemroot%\\AppPatch\\AcLua.dll", NULL},
    {NULL, L"%systemroot%\\system32\\aclui.dll", NULL},
    {L"waclui.dll", L"%systemroot%\\SysWOW64\\aclui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\acpi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\acpiec.sys", NULL},
    {NULL, L"%systemroot%\\Application Compatibility Scripts\\acregl.exe", NULL},
    {NULL, L"%systemroot%\\Application Compatibility Scripts\\acsr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\activeds.dll", NULL},
    {L"wactiveds.dll", L"%systemroot%\\SysWOW64\\activeds.dll", NULL},
    {NULL, L"%systemroot%\\system32\\activeds.tlb", NULL},
    {L"wactiveds.tlb", L"%systemroot%\\SysWOW64\\activeds.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\actmovie.exe", NULL},
    {L"wactmovie.exe", L"%systemroot%\\SysWOW64\\actmovie.exe", NULL},
    {NULL, L"%systemroot%\\system32\\actxprxy.dll", NULL},
    {L"wactxprxy.dll", L"%systemroot%\\SysWOW64\\actxprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adicsc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adicvls.sys", NULL},
    {NULL, L"%systemroot%\\system32\\admparse.dll", NULL},
    {L"wadmparse.dll", L"%systemroot%\\SysWOW64\\admparse.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adprop.dll", NULL},
    {L"wadprop.dll", L"%systemroot%\\SysWOW64\\adprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adptif.dll", NULL},
    {L"wadptif.dll", L"%systemroot%\\SysWOW64\\adptif.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adpu160m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adpu320.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ADROT.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\adsiisex.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\adsldp.dll", NULL},
    {L"wadsldp.dll", L"%systemroot%\\SysWOW64\\adsldp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsldpc.dll", NULL},
    {L"wadsldpc.dll", L"%systemroot%\\SysWOW64\\adsldpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsmsext.dll", NULL},
    {L"wadsmsext.dll", L"%systemroot%\\SysWOW64\\adsmsext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsnt.dll", NULL},
    {L"wadsnt.dll", L"%systemroot%\\SysWOW64\\adsnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\advapi32.dll", NULL},
    {L"wadvapi32.dll", L"%systemroot%\\SysWOW64\\advapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\advpack.dll", NULL},
    {L"wadvpack.dll", L"%systemroot%\\SysWOW64\\advpack.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\afcnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\afd.sys", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentanm.dll", NULL},
    {L"wagentanm.dll", L"%systemroot%\\msagent\\agentanm.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentctl.dll", NULL},
    {L"wagentctl.dll", L"%systemroot%\\msagent\\agentctl.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentdp2.dll", NULL},
    {L"wagentdp2.dll", L"%systemroot%\\msagent\\agentdp2.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentdpv.dll", NULL},
    {L"wagentdpv.dll", L"%systemroot%\\msagent\\agentdpv.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentmpx.dll", NULL},
    {L"wagentmpx.dll", L"%systemroot%\\msagent\\agentmpx.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentpsh.dll", NULL},
    {L"wagentpsh.dll", L"%systemroot%\\msagent\\agentpsh.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentsr.dll", NULL},
    {L"wagentsr.dll", L"%systemroot%\\msagent\\agentsr.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentsvr.exe", NULL},
    {L"wagentsvr.exe", L"%systemroot%\\msagent\\agentsvr.exe", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0401.dll", L"intl.inf"},
    {L"wagt0401.dll", L"%systemroot%\\msagent\\intl\\agt0401.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0404.dll", L"intl.inf"},
    {L"wagt0404.dll", L"%systemroot%\\msagent\\intl\\agt0404.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0405.dll", NULL},
    {L"wagt0405.dll", L"%systemroot%\\msagent\\intl\\agt0405.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0406.dll", NULL},
    {L"wagt0406.dll", L"%systemroot%\\msagent\\intl\\agt0406.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0407.dll", NULL},
    {L"wagt0407.dll", L"%systemroot%\\msagent\\intl\\agt0407.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0408.dll", NULL},
    {L"wagt0408.dll", L"%systemroot%\\msagent\\intl\\agt0408.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\intl\\agt0409.dll", NULL},
    {L"wagt0409.dll", L"%systemroot%\\msagent\\intl\\agt0409.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040b.dll", NULL},
    {L"wagt040b.dll", L"%systemroot%\\msagent\\intl\\agt040b.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040c.dll", NULL},
    {L"wagt040c.dll", L"%systemroot%\\msagent\\intl\\agt040c.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040d.dll", L"intl.inf"},
    {L"wagt040d.dll", L"%systemroot%\\msagent\\intl\\agt040d.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040e.dll", NULL},
    {L"wagt040e.dll", L"%systemroot%\\msagent\\intl\\agt040e.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0410.dll", NULL},
    {L"wagt0410.dll", L"%systemroot%\\msagent\\intl\\agt0410.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0411.dll", L"intl.inf"},
    {L"wagt0411.dll", L"%systemroot%\\msagent\\intl\\agt0411.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0412.dll", L"intl.inf"},
    {L"wagt0412.dll", L"%systemroot%\\msagent\\intl\\agt0412.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0413.dll", NULL},
    {L"wagt0413.dll", L"%systemroot%\\msagent\\intl\\agt0413.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0414.dll", NULL},
    {L"wagt0414.dll", L"%systemroot%\\msagent\\intl\\agt0414.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0415.dll", NULL},
    {L"wagt0415.dll", L"%systemroot%\\msagent\\intl\\agt0415.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0416.dll", NULL},
    {L"wagt0416.dll", L"%systemroot%\\msagent\\intl\\agt0416.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0419.dll", NULL},
    {L"wagt0419.dll", L"%systemroot%\\msagent\\intl\\agt0419.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt041d.dll", NULL},
    {L"wagt041d.dll", L"%systemroot%\\msagent\\intl\\agt041d.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt041f.dll", NULL},
    {L"wagt041f.dll", L"%systemroot%\\msagent\\intl\\agt041f.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0804.dll", L"intl.inf"},
    {L"wagt0804.dll", L"%systemroot%\\msagent\\intl\\agt0804.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0816.dll", NULL},
    {L"wagt0816.dll", L"%systemroot%\\msagent\\intl\\agt0816.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0c0a.dll", NULL},
    {L"wagt0c0a.dll", L"%systemroot%\\msagent\\intl\\agt0c0a.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agtctl15.tlb", NULL},
    {L"wagtctl15.tlb", L"%systemroot%\\msagent\\agtctl15.tlb", NULL},
    {NULL, L"%systemroot%\\msagent64\\agtintl.dll", NULL},
    {L"wagtintl.dll", L"%systemroot%\\msagent\\agtintl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aic78u2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aic78xx.sys", NULL},
    {NULL, L"%systemroot%\\system32\\alg.exe", NULL},
    {L"walg.exe", L"%systemroot%\\SysWOW64\\alg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aliide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\alrsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\amdagp8p.sys", NULL},
    {NULL, L"%systemroot%\\system32\\amstream.dll", NULL},
    {L"wamstream.dll", L"%systemroot%\\SysWOW64\\amstream.dll", NULL},
    {NULL, L"%systemroot%\\system32\\apcups.dll", NULL},
    {L"wapcups.dll", L"%systemroot%\\SysWOW64\\apcups.dll", NULL},
    {L"wappend.exe", L"%systemroot%\\SysWOW64\\append.exe", NULL},
    {NULL, L"%systemroot%\\system32\\appmgmts.dll", NULL},
    {L"wappmgmts.dll", L"%systemroot%\\SysWOW64\\appmgmts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\appmgr.dll", NULL},
    {L"wappmgr.dll", L"%systemroot%\\SysWOW64\\appmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\appwiz.cpl", NULL},
    {L"wappwiz.cpl", L"%systemroot%\\SysWOW64\\appwiz.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\aqadmin.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\aqueue.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\arp.exe", NULL},
    {L"warp.exe", L"%systemroot%\\SysWOW64\\arp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\arp1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\asctrls.ocx", NULL},
    {L"wasctrls.ocx", L"%systemroot%\\SysWOW64\\asctrls.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\ASFArchiver.dll", L"wmsocm.inf"},
    {L"wasferror.dll", L"%systemroot%\\SysWOW64\\asferror.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\asp.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\aspperf.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\asr_fmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\asr_ldm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\asr_pfu.exe", NULL},
    {L"wasr_pfu.exe", L"%systemroot%\\SysWOW64\\asr_pfu.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\asyncmac.sys", NULL},
    {NULL, L"%systemroot%\\system32\\at.exe", NULL},
    {L"wat.exe", L"%systemroot%\\SysWOW64\\at.exe", NULL},
    {L"bhp001.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\atalk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atkctrs.dll", NULL},
    {L"watkctrs.dll", L"%systemroot%\\SysWOW64\\atkctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atl.dll", NULL},
    {L"watl.dll", L"%systemroot%\\SysWOW64\\atl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atlmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmadm.exe", NULL},
    {L"watmadm.exe", L"%systemroot%\\SysWOW64\\atmadm.exe", NULL},
    {L"bhp024.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\ATMARP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmarpc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmarps.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmepvc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmfd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmlane.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmpvcno.dll", NULL},
    {L"watmpvcno.dll", L"%systemroot%\\SysWOW64\\atmpvcno.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmuni.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atrace.dll", NULL},
    {NULL, L"%systemroot%\\system32\\attrib.exe", NULL},
    {L"wattrib.exe", L"%systemroot%\\SysWOW64\\attrib.exe", NULL},
    {NULL, L"%systemroot%\\system32\\audiosrv.dll", NULL},
    {L"waudiosrv.dll", L"%systemroot%\\SysWOW64\\audiosrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\audstub.sys", NULL},
    {NULL, L"%systemroot%\\system32\\authz.dll", NULL},
    {L"wauthz.dll", L"%systemroot%\\SysWOW64\\authz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\autochk.exe", NULL},
    {L"wautochk.exe", L"%systemroot%\\SysWOW64\\autochk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autoconv.exe", NULL},
    {L"wautoconv.exe", L"%systemroot%\\SysWOW64\\autoconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autodisc.dll", NULL},
    {L"wautodisc.dll", L"%systemroot%\\SysWOW64\\autodisc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\autofmt.exe", NULL},
    {L"wautofmt.exe", L"%systemroot%\\SysWOW64\\autofmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autolfn.exe", NULL},
    {L"wautolfn.exe", L"%systemroot%\\SysWOW64\\autolfn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\avicap.dll", NULL},
    {L"wavicap.dll", L"%systemroot%\\SysWOW64\\avicap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avicap32.dll", NULL},
    {L"wavicap32.dll", L"%systemroot%\\SysWOW64\\avicap32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avifil32.dll", NULL},
    {L"wavifil32.dll", L"%systemroot%\\SysWOW64\\avifil32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avifile.dll", NULL},
    {L"wavifile.dll", L"%systemroot%\\SysWOW64\\avifile.dll", NULL},
    {L"wavmcoxp.dll", L"%systemroot%\\SysWOW64\\avmcoxp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\azroles.dll", NULL},
    {L"wazroles.dll", L"%systemroot%\\SysWOW64\\azroles.dll", NULL},
    {NULL, L"%systemroot%\\system32\\azroleui.dll", NULL},
    {L"wazroleui.dll", L"%systemroot%\\SysWOW64\\azroleui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\b57amd64.sys", NULL},
    {NULL, L"%systemroot%\\system32\\basesrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\batmeter.dll", NULL},
    {L"wbatmeter.dll", L"%systemroot%\\SysWOW64\\batmeter.dll", NULL},
    {NULL, L"%systemroot%\\system32\\batt.dll", NULL},
    {L"wbatt.dll", L"%systemroot%\\SysWOW64\\batt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\battc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\bdaplgin.ax", NULL},
    {L"wbdaplgin.ax", L"%systemroot%\\SysWOW64\\bdaplgin.ax", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\beep.sys", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\bhsupp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bidispl.dll", NULL},
    {L"wbidispl.dll", L"%systemroot%\\SysWOW64\\bidispl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\big5.nls", NULL},
    {NULL, L"%systemroot%\\system32\\binlsvc.dll", NULL},
    {L"wbinlsvc.dll", L"%systemroot%\\SysWOW64\\binlsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\bitsoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bitsprx2.dll", NULL},
    {L"wblackbox.dll", L"%systemroot%\\SysWOW64\\blackbox.dll", NULL},
    {NULL, L"%systemroot%\\help\\bnts.dll", NULL},
    {L"bhp002.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\BONE.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\bootcfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\bootvid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bopomofo.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\breecemc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\browscap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\browselc.dll", NULL},
    {L"wbrowselc.dll", L"%systemroot%\\SysWOW64\\browselc.dll", NULL},
    {L"bhp003.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\browser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\browser.dll", NULL},
    {L"wbrowser.dll", L"%systemroot%\\SysWOW64\\browser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\browseui.dll", NULL},
    {L"wbrowseui.dll", L"%systemroot%\\SysWOW64\\browseui.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\brpinfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\btpagnt.dll", NULL},
    {L"wbtpagnt.dll", L"%systemroot%\\SysWOW64\\btpagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\bulltlp3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\c_037.nls", NULL},
    {L"wc_037.nls", L"%systemroot%\\SysWOW64\\c_037.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10000.nls", NULL},
    {L"wc_10000.nls", L"%systemroot%\\SysWOW64\\c_10000.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10001.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10002.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10003.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10004.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10005.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10006.nls", NULL},
    {L"wc_10006.nls", L"%systemroot%\\SysWOW64\\c_10006.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10007.nls", NULL},
    {L"wc_10007.nls", L"%systemroot%\\SysWOW64\\c_10007.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10008.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10010.nls", NULL},
    {L"wc_10010.nls", L"%systemroot%\\SysWOW64\\c_10010.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10017.nls", NULL},
    {L"wc_10017.nls", L"%systemroot%\\SysWOW64\\c_10017.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10021.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10029.nls", NULL},
    {L"wc_10029.nls", L"%systemroot%\\SysWOW64\\c_10029.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10079.nls", NULL},
    {L"wc_10079.nls", L"%systemroot%\\SysWOW64\\c_10079.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10081.nls", NULL},
    {L"wc_10081.nls", L"%systemroot%\\SysWOW64\\c_10081.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10082.nls", NULL},
    {L"wc_10082.nls", L"%systemroot%\\SysWOW64\\c_10082.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1026.nls", NULL},
    {L"wc_1026.nls", L"%systemroot%\\SysWOW64\\c_1026.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1047.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1140.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1141.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1142.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1143.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1144.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1145.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1146.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1147.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1148.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1149.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1250.nls", NULL},
    {L"wc_1250.nls", L"%systemroot%\\SysWOW64\\c_1250.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1251.nls", NULL},
    {L"wc_1251.nls", L"%systemroot%\\SysWOW64\\c_1251.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1252.nls", NULL},
    {L"wc_1252.nls", L"%systemroot%\\SysWOW64\\c_1252.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1253.nls", NULL},
    {L"wc_1253.nls", L"%systemroot%\\SysWOW64\\c_1253.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1254.nls", NULL},
    {L"wc_1254.nls", L"%systemroot%\\SysWOW64\\c_1254.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1255.nls", NULL},
    {L"wc_1255.nls", L"%systemroot%\\SysWOW64\\c_1255.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1256.nls", NULL},
    {L"wc_1256.nls", L"%systemroot%\\SysWOW64\\c_1256.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1257.nls", NULL},
    {L"wc_1257.nls", L"%systemroot%\\SysWOW64\\c_1257.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1258.nls", NULL},
    {L"wc_1258.nls", L"%systemroot%\\SysWOW64\\c_1258.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1361.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20000.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20001.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20002.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20003.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20004.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20005.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20105.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20106.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20107.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20108.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20127.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20261.nls", NULL},
    {L"wc_20261.nls", L"%systemroot%\\SysWOW64\\c_20261.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20269.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20273.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20277.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20278.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20280.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20284.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20285.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20290.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20297.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20420.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20423.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20424.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20833.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20838.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20866.nls", NULL},
    {L"wc_20866.nls", L"%systemroot%\\SysWOW64\\c_20866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20871.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20880.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20905.nls", NULL},
    {L"wc_20905.nls", L"%systemroot%\\SysWOW64\\c_20905.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20924.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20932.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20936.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20949.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21025.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21027.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21866.nls", NULL},
    {L"wc_21866.nls", L"%systemroot%\\SysWOW64\\c_21866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28591.nls", NULL},
    {L"wc_28591.nls", L"%systemroot%\\SysWOW64\\c_28591.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28592.nls", NULL},
    {L"wc_28592.nls", L"%systemroot%\\SysWOW64\\c_28592.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28593.nls", NULL},
    {L"wc_28593.nls", L"%systemroot%\\SysWOW64\\c_28593.nls", NULL},
    {NULL, L"%systemroot%\\system32\\C_28594.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28595.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28596.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28597.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\c_28598.nls", NULL},
    {L"wc_28598.nls", L"%systemroot%\\SysWOW64\\c_28598.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28599.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28603.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28605.nls", NULL},
    {L"wc_28605.nls", L"%systemroot%\\SysWOW64\\c_28605.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_437.nls", NULL},
    {L"wc_437.nls", L"%systemroot%\\SysWOW64\\c_437.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_500.nls", NULL},
    {L"wc_500.nls", L"%systemroot%\\SysWOW64\\c_500.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_708.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_720.nls", NULL},
    {L"wc_720.nls", L"%systemroot%\\SysWOW64\\c_720.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_737.nls", NULL},
    {L"wc_737.nls", L"%systemroot%\\SysWOW64\\c_737.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_775.nls", NULL},
    {L"wc_775.nls", L"%systemroot%\\SysWOW64\\c_775.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_850.nls", NULL},
    {L"wc_850.nls", L"%systemroot%\\SysWOW64\\c_850.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_852.nls", NULL},
    {L"wc_852.nls", L"%systemroot%\\SysWOW64\\c_852.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_855.nls", NULL},
    {L"wc_855.nls", L"%systemroot%\\SysWOW64\\c_855.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_857.nls", NULL},
    {L"wc_857.nls", L"%systemroot%\\SysWOW64\\c_857.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_858.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_860.nls", NULL},
    {L"wc_860.nls", L"%systemroot%\\SysWOW64\\c_860.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_861.nls", NULL},
    {L"wc_861.nls", L"%systemroot%\\SysWOW64\\c_861.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_862.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_863.nls", NULL},
    {L"wc_863.nls", L"%systemroot%\\SysWOW64\\c_863.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_864.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_865.nls", NULL},
    {L"wc_865.nls", L"%systemroot%\\SysWOW64\\c_865.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_866.nls", NULL},
    {L"wc_866.nls", L"%systemroot%\\SysWOW64\\c_866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_869.nls", NULL},
    {L"wc_869.nls", L"%systemroot%\\SysWOW64\\c_869.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_870.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_874.nls", NULL},
    {L"wc_874.nls", L"%systemroot%\\SysWOW64\\c_874.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_875.nls", NULL},
    {L"wc_875.nls", L"%systemroot%\\SysWOW64\\c_875.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_932.nls", NULL},
    {L"wc_932.nls", L"%systemroot%\\SysWOW64\\c_932.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_936.nls", NULL},
    {L"wc_936.nls", L"%systemroot%\\SysWOW64\\c_936.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_949.nls", NULL},
    {L"wc_949.nls", L"%systemroot%\\SysWOW64\\c_949.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_950.nls", NULL},
    {L"wc_950.nls", L"%systemroot%\\SysWOW64\\c_950.nls", NULL},
    {L"wc_eucdb.dll", L"%systemroot%\\SysWOW64\\c_eucdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_g18030.dll", NULL},
    {L"wc_g18030.dll", L"%systemroot%\\SysWOW64\\c_g18030.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_is2022.dll", NULL},
    {L"wc_is2022.dll", L"%systemroot%\\SysWOW64\\c_is2022.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_iscii.dll", NULL},
    {L"wc_iscii.dll", L"%systemroot%\\SysWOW64\\c_iscii.dll", NULL},
    {L"wc_snadb.dll", L"%systemroot%\\SysWOW64\\c_snadb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cabinet.dll", NULL},
    {L"wcabinet.dll", L"%systemroot%\\SysWOW64\\cabinet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cabview.dll", NULL},
    {L"wcabview.dll", L"%systemroot%\\SysWOW64\\cabview.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cacls.exe", NULL},
    {L"wcacls.exe", L"%systemroot%\\SysWOW64\\cacls.exe", NULL},
    {NULL, L"%systemroot%\\system32\\calc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\camocx.dll", NULL},
    {L"wcamocx.dll", L"%systemroot%\\SysWOW64\\camocx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\capesnpn.dll", NULL},
    {L"wcapesnpn.dll", L"%systemroot%\\SysWOW64\\capesnpn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cards.dll", NULL},
    {L"wcards.dll", L"%systemroot%\\SysWOW64\\cards.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrvps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrvut.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cbidf2k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\CCDECODE.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ccfapi32.dll", NULL},
    {L"wccfapi32.dll", L"%systemroot%\\SysWOW64\\ccfapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ccfgnt.dll", NULL},
    {L"wccfgnt.dll", L"%systemroot%\\SysWOW64\\ccfgnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cdfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cdfview.dll", NULL},
    {L"wcdfview.dll", L"%systemroot%\\SysWOW64\\cdfview.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cdosys.dll", NULL},
    {L"wcdosys.dll", L"%systemroot%\\SysWOW64\\cdosys.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cdrom.sys", NULL},
    {NULL, L"%systemroot%\\system32\\certadm.dll", NULL},
    {L"wcertadm.dll", L"%systemroot%\\SysWOW64\\certadm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certcli.dll", NULL},
    {L"wcertcli.dll", L"%systemroot%\\SysWOW64\\certcli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certenc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certmgr.dll", NULL},
    {L"wcertmgr.dll", L"%systemroot%\\SysWOW64\\certmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certmmc.dll", NULL},
    {L"wcertmmc.dll", L"%systemroot%\\SysWOW64\\certmmc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\certobj.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\Setup\\certocm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certpdef.dll", NULL},
    {L"wcertpdef.dll", L"%systemroot%\\SysWOW64\\certpdef.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certreq.exe", NULL},
    {L"wcertreq.exe", L"%systemroot%\\SysWOW64\\certreq.exe", NULL},
    {NULL, L"%systemroot%\\system32\\certsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\certtmpl.dll", NULL},
    {L"wcerttmpl.dll", L"%systemroot%\\SysWOW64\\certtmpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certutil.exe", NULL},
    {L"wcertutil.exe", L"%systemroot%\\SysWOW64\\certutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\certxds.dll", NULL},
    {L"wcertxds.dll", L"%systemroot%\\SysWOW64\\certxds.dll", NULL},
    {L"wcewmdm.dll", L"%systemroot%\\SysWOW64\\cewmdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cfgbkend.dll", NULL},
    {NULL, L"%systemroot%\\system32\\chajei.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\change.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\changer.sys", NULL},
    {NULL, L"%systemroot%\\system32\\charmap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chglogon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chgport.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chgusr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chkdsk.exe", NULL},
    {L"wchkdsk.exe", L"%systemroot%\\SysWOW64\\chkdsk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chkntfs.exe", NULL},
    {L"wchkntfs.exe", L"%systemroot%\\SysWOW64\\chkntfs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\choice.exe", NULL},
    {L"wchoice.exe", L"%systemroot%\\SysWOW64\\choice.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chsbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\chtbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTMBX.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKDIC.DIC", L"intl.inf"},
    {L"wCHTSKDIC.DIC", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKDIC.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKDIC.DLL", L"intl.inf"},
    {L"wCHTSKDIC.DLL", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKDIC.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKF.DLL", L"intl.inf"},
    {L"wCHTSKF.DLL", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKF.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\ciadmin.dll", NULL},
    {L"wciadmin.dll", L"%systemroot%\\SysWOW64\\ciadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cic.dll", NULL},
    {L"wcic.dll", L"%systemroot%\\SysWOW64\\cic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cidaemon.exe", NULL},
    {L"wcidaemon.exe", L"%systemroot%\\SysWOW64\\cidaemon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\cimwin32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTIME.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGB.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGD.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGIE.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\CINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGSI.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGU.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGUC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTSETP.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\ciodm.dll", NULL},
    {L"wciodm.dll", L"%systemroot%\\SysWOW64\\ciodm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cipher.exe", NULL},
    {L"wcipher.exe", L"%systemroot%\\SysWOW64\\cipher.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cisvc.exe", NULL},
    {L"wcisvc.exe", L"%systemroot%\\SysWOW64\\cisvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ckcnv.exe", NULL},
    {L"wckcnv.exe", L"%systemroot%\\SysWOW64\\ckcnv.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClAdmWiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\classpnp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\clb.dll", NULL},
    {L"wclb.dll", L"%systemroot%\\SysWOW64\\clb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clbcatex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clbcatq.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClCfgSrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cleanmgr.exe", NULL},
    {L"wcleanmgr.exe", L"%systemroot%\\SysWOW64\\cleanmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cleanri.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clip.exe", NULL},
    {L"wclip.exe", L"%systemroot%\\SysWOW64\\clip.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clipbrd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clipsrv.exe", NULL},
    {L"wclipsrv.exe", L"%systemroot%\\SysWOW64\\clipsrv.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClNetRes.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClNetREx.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\CluAdmEx.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\CluAdmin.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\CluAdMMC.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clusapi.dll", NULL},
    {L"wclusapi.dll", L"%systemroot%\\SysWOW64\\clusapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\clusdisk.sys", NULL},
    {L"IIS_clusftp.vbs", L"%systemroot%\\system32\\inetsrv\\clusftp.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\ClusNet.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\clusocm.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClusRes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ClusSprt.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClusSvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cluster.exe", NULL},
    {L"wcluster.exe", L"%systemroot%\\SysWOW64\\cluster.exe", NULL},
    {L"IIS_clusweb.vbs", L"%systemroot%\\system32\\inetsrv\\clusweb.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\ClusWMI.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cmbp0wdm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cmcfg32.dll", NULL},
    {L"wcmcfg32.dll", L"%systemroot%\\SysWOW64\\cmcfg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmd.exe", NULL},
    {L"wcmd.exe", L"%systemroot%\\SysWOW64\\cmd.exe", NULL},
    {L"evtgprov.dll", L"%systemroot%\\system32\\wbem\\CmdEvTgProv.dll", NULL},
    {L"wevtgprov.dll", L"%systemroot%\\SysWOW64\\wbem\\CmdEvTgProv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmdial32.dll", NULL},
    {L"wcmdial32.dll", L"%systemroot%\\SysWOW64\\cmdial32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cmdide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cmdkey.exe", NULL},
    {L"wcmdkey.exe", L"%systemroot%\\SysWOW64\\cmdkey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmdl32.exe", NULL},
    {L"wcmdl32.exe", L"%systemroot%\\SysWOW64\\cmdl32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmmon32.exe", NULL},
    {L"wcmmon32.exe", L"%systemroot%\\SysWOW64\\cmmon32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmpbk32.dll", NULL},
    {L"wcmpbk32.dll", L"%systemroot%\\SysWOW64\\cmpbk32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmprops.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmstp.exe", NULL},
    {L"wcmstp.exe", L"%systemroot%\\SysWOW64\\cmstp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmutil.dll", NULL},
    {L"wcmutil.dll", L"%systemroot%\\SysWOW64\\cmutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnbjmon.dll", NULL},
    {L"wcnbjmon.dll", L"%systemroot%\\SysWOW64\\cnbjmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnetcfg.dll", NULL},
    {L"wcnetcfg.dll", L"%systemroot%\\SysWOW64\\cnetcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnvfat.dll", NULL},
    {L"wcnvfat.dll", L"%systemroot%\\SysWOW64\\cnvfat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\colbact.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comaddin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comcat.dll", NULL},
    {L"wcomcat.dll", L"%systemroot%\\SysWOW64\\comcat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comclust.exe", NULL},
    {L"wcommdlg.dll", L"%systemroot%\\SysWOW64\\commdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comp.exe", NULL},
    {L"wcomp.exe", L"%systemroot%\\SysWOW64\\comp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\compact.exe", NULL},
    {L"wcompact.exe", L"%systemroot%\\SysWOW64\\compact.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\compbatt.sys", NULL},
    {L"wcompobj.dll", L"%systemroot%\\SysWOW64\\compobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compstui.dll", NULL},
    {L"wcompstui.dll", L"%systemroot%\\SysWOW64\\compstui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comrepl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comrepl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comrereg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\comres.dll", NULL},
    {L"wcomres.dll", L"%systemroot%\\SysWOW64\\comres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\comsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comsvcs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comuid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\confmsp.dll", NULL},
    {L"wconfmsp.dll", L"%systemroot%\\SysWOW64\\confmsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\conime.exe", NULL},
    {L"wconime.exe", L"%systemroot%\\SysWOW64\\conime.exe", NULL},
    {NULL, L"%systemroot%\\system32\\console.dll", NULL},
    {L"wconsole.dll", L"%systemroot%\\SysWOW64\\console.dll", NULL},
    {NULL, L"%systemroot%\\system32\\control.exe", NULL},
    {L"wcontrol.exe", L"%systemroot%\\SysWOW64\\control.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ContRot.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\convert.exe", NULL},
    {L"wconvert.exe", L"%systemroot%\\SysWOW64\\convert.exe", NULL},
    {NULL, L"%systemroot%\\system32\\convlog.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\convmsg.dll", NULL},
    {L"wconvmsg.dll", L"%systemroot%\\SysWOW64\\convmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\corpol.dll", NULL},
    {L"wcorpol.dll", L"%systemroot%\\SysWOW64\\corpol.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\cplexe.exe", L"intl.inf"},
    {L"wcplexe.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\cplexe.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\cpqarry2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cpqcissm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cprofile.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\crcdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\credui.dll", NULL},
    {L"wcredui.dll", L"%systemroot%\\SysWOW64\\credui.dll", NULL},
    {L"wcrtdll.dll", L"%systemroot%\\SysWOW64\\crtdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csamsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cscdll.dll", NULL},
    {L"wcscdll.dll", L"%systemroot%\\SysWOW64\\cscdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cscript.exe", NULL},
    {L"wcscript.exe", L"%systemroot%\\SysWOW64\\cscript.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cscui.dll", NULL},
    {L"wcscui.dll", L"%systemroot%\\SysWOW64\\cscui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csrsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csrss.exe", NULL},
    {L"wcsseqchk.dll", L"%systemroot%\\SysWOW64\\csseqchk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csvde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ctfmon.exe", NULL},
    {L"wctfmon.exe", L"%systemroot%\\SysWOW64\\ctfmon.exe", NULL},
    {L"wctl3d32.dll", L"%systemroot%\\SysWOW64\\ctl3d32.dll", NULL},
    {L"wctl3dv2.dll", L"%systemroot%\\SysWOW64\\ctl3dv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ctype.nls", NULL},
    {L"wctype.nls", L"%systemroot%\\SysWOW64\\ctype.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyclad-z.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyclom-y.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cys.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cyycoins.dll", NULL},
    {L"wcyycoins.dll", L"%systemroot%\\SysWOW64\\cyycoins.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyyport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyyports.dll", NULL},
    {L"wcyyports.dll", L"%systemroot%\\SysWOW64\\cyyports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cyzcoins.dll", NULL},
    {L"wcyzcoins.dll", L"%systemroot%\\SysWOW64\\cyzcoins.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyzport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyzports.dll", NULL},
    {L"wcyzports.dll", L"%systemroot%\\SysWOW64\\cyzports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3d8.dll", NULL},
    {L"wd3d8.dll", L"%systemroot%\\SysWOW64\\d3d8.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3d8thk.dll", NULL},
    {L"wd3d8thk.dll", L"%systemroot%\\SysWOW64\\d3d8thk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dim.dll", NULL},
    {L"wd3dim.dll", L"%systemroot%\\SysWOW64\\d3dim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dim700.dll", NULL},
    {L"wd3dim700.dll", L"%systemroot%\\SysWOW64\\d3dim700.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dpmesh.dll", NULL},
    {L"wd3dpmesh.dll", L"%systemroot%\\SysWOW64\\d3dpmesh.dll", NULL},
    {L"wd3dramp.dll", L"%systemroot%\\SysWOW64\\d3dramp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3drm.dll", NULL},
    {L"wd3drm.dll", L"%systemroot%\\SysWOW64\\d3drm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dxof.dll", NULL},
    {L"wd3dxof.dll", L"%systemroot%\\SysWOW64\\d3dxof.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dac2w2k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dac960nt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\danim.dll", NULL},
    {L"wdanim.dll", L"%systemroot%\\SysWOW64\\danim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dataclen.dll", NULL},
    {L"wdataclen.dll", L"%systemroot%\\SysWOW64\\dataclen.dll", NULL},
    {NULL, L"%systemroot%\\system32\\datime.dll", NULL},
    {L"wdatime.dll", L"%systemroot%\\SysWOW64\\datime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\davcdata.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\davclnt.dll", NULL},
    {L"wdavclnt.dll", L"%systemroot%\\SysWOW64\\davclnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\daxctle.ocx", NULL},
    {L"wdaxctle.ocx", L"%systemroot%\\SysWOW64\\daxctle.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\dayi.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\dbgeng.dll", NULL},
    {L"wdbgeng.dll", L"%systemroot%\\SysWOW64\\dbgeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dbghelp.dll", NULL},
    {L"wdbghelp.dll", L"%systemroot%\\SysWOW64\\dbghelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcgpofix.exe", NULL},
    {L"wdcgpofix.exe", L"%systemroot%\\SysWOW64\\dcgpofix.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dciman32.dll", NULL},
    {L"wdciman32.dll", L"%systemroot%\\SysWOW64\\dciman32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcomcnfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dcphelp.exe", NULL},
    {L"wdcphelp.exe", L"%systemroot%\\SysWOW64\\dcphelp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dcpromo.dll", NULL},
    {L"wdcpromo.dll", L"%systemroot%\\SysWOW64\\dcpromo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcpromo.exe", NULL},
    {L"wddeml.dll", L"%systemroot%\\SysWOW64\\ddeml.dll", NULL},
    {L"wddeshare.exe", L"%systemroot%\\SysWOW64\\ddeshare.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ddraw.dll", NULL},
    {L"wddraw.dll", L"%systemroot%\\SysWOW64\\ddraw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ddrawex.dll", NULL},
    {L"wddrawex.dll", L"%systemroot%\\SysWOW64\\ddrawex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ddrop.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\ddsmc.sys", NULL},
    {NULL, L"%systemroot%\\Cluster\\DebugEx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\defrag.exe", NULL},
    {NULL, L"%systemroot%\\system32\\desk.cpl", NULL},
    {L"wdesk.cpl", L"%systemroot%\\SysWOW64\\desk.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\deskadp.dll", NULL},
    {L"wdeskadp.dll", L"%systemroot%\\SysWOW64\\deskadp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\deskmon.dll", NULL},
    {L"wdeskmon.dll", L"%systemroot%\\SysWOW64\\deskmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\deskperf.dll", NULL},
    {L"wdeskperf.dll", L"%systemroot%\\SysWOW64\\deskperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\devenum.dll", NULL},
    {L"wdevenum.dll", L"%systemroot%\\SysWOW64\\devenum.dll", NULL},
    {NULL, L"%systemroot%\\system32\\devmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgfat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgifc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgifps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgntfs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dfscmd.exe", NULL},
    {L"wdfscmd.exe", L"%systemroot%\\SysWOW64\\dfscmd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfscore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsgui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsinit.exe", NULL},
    {L"wdfsinit.exe", L"%systemroot%\\SysWOW64\\dfsinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfssetup.dll", NULL},
    {L"wdfssetup.dll", L"%systemroot%\\SysWOW64\\dfssetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsshlex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfssvc.exe", NULL},
    {L"wdfssvc.exe", L"%systemroot%\\SysWOW64\\dfssvc.exe", NULL},
    {L"wdgconfig.dll", L"%systemroot%\\SysWOW64\\dgconfig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dgnet.dll", NULL},
    {L"wdgsetup.dll", L"%systemroot%\\SysWOW64\\dgsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpcsvc.dll", NULL},
    {L"wdhcpcsvc.dll", L"%systemroot%\\SysWOW64\\dhcpcsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpmib.dll", NULL},
    {L"wdhcpmib.dll", L"%systemroot%\\SysWOW64\\dhcpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpmon.dll", NULL},
    {L"wdhcpmon.dll", L"%systemroot%\\SysWOW64\\dhcpmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpsapi.dll", NULL},
    {L"wdhcpsapi.dll", L"%systemroot%\\SysWOW64\\dhcpsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpsnap.dll", NULL},
    {L"wdhcpsnap.dll", L"%systemroot%\\SysWOW64\\dhcpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpssvc.dll", NULL},
    {L"wdhcpssvc.dll", L"%systemroot%\\SysWOW64\\dhcpssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpwiz.exe", NULL},
    {L"wDHTMLED.OCX", L"%commonprogramfiles(x86)%\\Microsoft Shared\\Triedit\\DHTMLED.OCX", NULL},
    {NULL, L"%systemroot%\\system32\\diactfrm.dll", NULL},
    {L"wdiactfrm.dll", L"%systemroot%\\SysWOW64\\diactfrm.dll", NULL},
    {NULL, L"%systemroot%\\dialer.exe", NULL},
    {NULL, L"%systemroot%\\system32\\diantz.exe", NULL},
    {L"wdiantz.exe", L"%systemroot%\\SysWOW64\\diantz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\digest.dll", NULL},
    {L"wwdigest.dll", L"%systemroot%\\SysWOW64\\digest.dll", NULL},
    {L"wdigiinf.dll", L"%systemroot%\\SysWOW64\\digiinf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\digirlpt.dll", NULL},
    {L"wdigirlpt.dll", L"%systemroot%\\SysWOW64\\digirlpt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\digirlpt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dimap.dll", NULL},
    {L"wdimap.dll", L"%systemroot%\\SysWOW64\\dimap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dinput.dll", NULL},
    {L"wdinput.dll", L"%systemroot%\\SysWOW64\\dinput.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dinput8.dll", NULL},
    {L"wdinput8.dll", L"%systemroot%\\SysWOW64\\dinput8.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\directdb.dll", NULL},
    {L"wdirectdb.dll", L"%commonprogramfiles(x86)%\\System\\directdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\disk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\diskcopy.dll", NULL},
    {L"wdiskcopy.dll", L"%systemroot%\\SysWOW64\\diskcopy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\diskdump.sys", NULL},
    {NULL, L"%systemroot%\\system32\\diskpart.exe", NULL},
    {NULL, L"%systemroot%\\system32\\diskperf.exe", NULL},
    {L"wdiskperf.exe", L"%systemroot%\\SysWOW64\\diskperf.exe", NULL},
    {L"wdisrvci.dll", L"%systemroot%\\SysWOW64\\disrvci.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dllhost.exe", NULL},
    {L"wdllhost.exe", L"%systemroot%\\SysWOW64\\dllhost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dllhst3g.exe", NULL},
    {L"wdllhst3g.exe", L"%systemroot%\\SysWOW64\\dllhst3g.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dlttape.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmboot.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmconfig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdlgs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdskmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdskres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmintf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmivcitf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmload.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmocx.dll", NULL},
    {L"wdmocx.dll", L"%systemroot%\\SysWOW64\\dmocx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmremote.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dmserver.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmvdsitf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmview.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\dns.exe", NULL},
    {L"wdns.exe", L"%systemroot%\\SysWOW64\\dns.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dnsapi.dll", NULL},
    {L"wdnsapi.dll", L"%systemroot%\\SysWOW64\\dnsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsmgr.dll", NULL},
    {L"wdnsmgr.dll", L"%systemroot%\\SysWOW64\\dnsmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsperf.dll", NULL},
    {L"wdnsperf.dll", L"%systemroot%\\SysWOW64\\dnsperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\dnsprov.dll", NULL},
    {L"wdnsprov.dll", L"%systemroot%\\SysWOW64\\wbem\\dnsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsrslvr.dll", NULL},
    {L"wdnsrslvr.dll", L"%systemroot%\\SysWOW64\\dnsrslvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnswiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\docprop.dll", NULL},
    {L"wdocprop.dll", L"%systemroot%\\SysWOW64\\docprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\docprop2.dll", NULL},
    {L"wdocprop2.dll", L"%systemroot%\\SysWOW64\\docprop2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\domadmin.dll", NULL},
    {L"wdomadmin.dll", L"%systemroot%\\SysWOW64\\domadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\doskey.exe", NULL},
    {L"wdoskey.exe", L"%systemroot%\\SysWOW64\\doskey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4Prt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4Scan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4usb.sys", NULL},
    {L"wdplaysvr.exe", L"%systemroot%\\SysWOW64\\dplaysvr.exe", NULL},
    {L"wdplayx.dll", L"%systemroot%\\SysWOW64\\dplayx.dll", NULL},
    {L"wdpmodemx.dll", L"%systemroot%\\SysWOW64\\dpmodemx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnaddr.dll", NULL},
    {L"wdpnaddr.dll", L"%systemroot%\\SysWOW64\\dpnaddr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnet.dll", NULL},
    {L"wdpnet.dll", L"%systemroot%\\SysWOW64\\dpnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnhpast.dll", NULL},
    {L"wdpnhpast.dll", L"%systemroot%\\SysWOW64\\dpnhpast.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnhupnp.dll", NULL},
    {L"wdpnhupnp.dll", L"%systemroot%\\SysWOW64\\dpnhupnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnlobby.dll", NULL},
    {L"wdpnlobby.dll", L"%systemroot%\\SysWOW64\\dpnlobby.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnsvr.exe", NULL},
    {L"wdpnsvr.exe", L"%systemroot%\\SysWOW64\\dpnsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dpti2o.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dpvacm.dll", NULL},
    {L"wdpvacm.dll", L"%systemroot%\\SysWOW64\\dpvacm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpvoice.dll", NULL},
    {L"wdpvoice.dll", L"%systemroot%\\SysWOW64\\dpvoice.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpvsetup.exe", NULL},
    {L"wdpvsetup.exe", L"%systemroot%\\SysWOW64\\dpvsetup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dpvvox.dll", NULL},
    {L"wdpvvox.dll", L"%systemroot%\\SysWOW64\\dpvvox.dll", NULL},
    {L"wdpwsockx.dll", L"%systemroot%\\SysWOW64\\dpwsockx.dll", NULL},
    {L"drvqry.exe", L"%systemroot%\\system32\\driverquery.exe", NULL},
    {L"wdrvqry.exe", L"%systemroot%\\SysWOW64\\driverquery.exe", NULL},
    {L"wdrmv2clt.dll", L"%systemroot%\\SysWOW64\\drmv2clt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drprov.dll", NULL},
    {L"wdrprov.dll", L"%systemroot%\\SysWOW64\\drprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drwtsn32.exe", NULL},
    {L"wdrwtsn32.exe", L"%systemroot%\\SysWOW64\\drwtsn32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsadd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsadmin.dll", NULL},
    {L"wdsadmin.dll", L"%systemroot%\\SysWOW64\\dsadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsauth.dll", NULL},
    {L"wdsauth.dll", L"%systemroot%\\SysWOW64\\dsauth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsdmo.dll", NULL},
    {L"wdsdmo.dll", L"%systemroot%\\SysWOW64\\dsdmo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsdmoprp.dll", NULL},
    {L"wdsdmoprp.dll", L"%systemroot%\\SysWOW64\\dsdmoprp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsget.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dskquota.dll", NULL},
    {L"wdskquota.dll", L"%systemroot%\\SysWOW64\\dskquota.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dskquoui.dll", NULL},
    {L"wdskquoui.dll", L"%systemroot%\\SysWOW64\\dskquoui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsmod.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsmove.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsound.dll", NULL},
    {L"wdsound.dll", L"%systemroot%\\SysWOW64\\dsound.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsound3d.dll", NULL},
    {L"wdsound3d.dll", L"%systemroot%\\SysWOW64\\dsound3d.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsprop.dll", NULL},
    {L"wdsprop.dll", L"%systemroot%\\SysWOW64\\dsprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\dsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsquery.dll", NULL},
    {L"wdsquery.dll", L"%systemroot%\\SysWOW64\\dsquery.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsquery.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsrestor.dll", NULL},
    {L"wdsrestor.dll", L"%systemroot%\\SysWOW64\\dsrestor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsrevt.dll", NULL},
    {L"wdsrevt.dll", L"%systemroot%\\SysWOW64\\dsrevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsrm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dssec.dll", NULL},
    {L"wdssec.dll", L"%systemroot%\\SysWOW64\\dssec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsuiext.dll", NULL},
    {L"wdsuiext.dll", L"%systemroot%\\SysWOW64\\dsuiext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsuiwiz.dll", NULL},
    {L"wdsuiwiz.dll", L"%systemroot%\\SysWOW64\\dsuiwiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dumprep.exe", NULL},
    {L"wdumprep.exe", L"%systemroot%\\SysWOW64\\dumprep.exe", NULL},
    {NULL, L"%systemroot%\\system32\\duser.dll", NULL},
    {L"wduser.dll", L"%systemroot%\\SysWOW64\\duser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dvdplay.exe", NULL},
    {L"wdvdplay.exe", L"%systemroot%\\SysWOW64\\dvdplay.exe", NULL},
    {L"wdvdupgrd.exe", L"%systemroot%\\SysWOW64\\dvdupgrd.exe", NULL},
    {L"dwil1033.dll", L"%systemroot%\\system32\\1033\\dwintl.dll", NULL},
    {L"wdwil1033.dll", L"%systemroot%\\SysWOW64\\1033\\dwintl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dwwin.exe", NULL},
    {L"wdwwin.exe", L"%systemroot%\\SysWOW64\\dwwin.exe", NULL},
    {L"wdx7vb.dll", L"%systemroot%\\SysWOW64\\dx7vb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dx8vb.dll", NULL},
    {L"wdx8vb.dll", L"%systemroot%\\SysWOW64\\dx8vb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dxdiag.exe", NULL},
    {L"wdxdiag.exe", L"%systemroot%\\SysWOW64\\dxdiag.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxg.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxgthk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dxmrtp.dll", NULL},
    {L"wdxmrtp.dll", L"%systemroot%\\SysWOW64\\dxmrtp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dxtmsft.dll", NULL},
    {L"wdxtmsft.dll", L"%systemroot%\\SysWOW64\\dxtmsft.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dxtrans.dll", NULL},
    {L"wdxtrans.dll", L"%systemroot%\\SysWOW64\\dxtrans.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\e10064ex.sys", NULL},
    {L"wedb500.dll", L"%systemroot%\\SysWOW64\\edb500.dll", NULL},
    {NULL, L"%systemroot%\\system32\\efsadu.dll", NULL},
    {L"wefsadu.dll", L"%systemroot%\\SysWOW64\\efsadu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\elmsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\els.dll", NULL},
    {L"wels.dll", L"%systemroot%\\SysWOW64\\els.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\enum1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ersvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\es.dll", NULL},
    {L"wes.dll", L"%systemroot%\\SysWOW64\\es.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esent.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esentprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esentutl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\esscli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\eudcedit.exe", NULL},
    {L"weudcedit.exe", L"%systemroot%\\SysWOW64\\eudcedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventcls.dll", NULL},
    {L"evcreate.exe", L"%systemroot%\\system32\\eventcreate.exe", NULL},
    {L"wevcreate.exe", L"%systemroot%\\SysWOW64\\eventcreate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventlog.dll", NULL},
    {L"evtquery.vbs", L"%systemroot%\\system32\\eventquery.vbs", NULL},
    {L"evtrig.exe", L"%systemroot%\\system32\\eventtriggers.exe", NULL},
    {L"wevtrig.exe", L"%systemroot%\\SysWOW64\\eventtriggers.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventvwr.exe", NULL},
    {L"weventvwr.exe", L"%systemroot%\\SysWOW64\\eventvwr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\evntagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\evntcmd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\evntrprv.dll", NULL},
    {L"wevntrprv.dll", L"%systemroot%\\SysWOW64\\wbem\\evntrprv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\evntwin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\exabyte2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\examc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\expand.exe", NULL},
    {L"wexpand.exe", L"%systemroot%\\SysWOW64\\expand.exe", NULL},
    {NULL, L"%systemroot%\\explorer.exe", NULL},
    {L"wexplorer.exe", L"%systemroot%\\SysWOW64\\explorer.exe", NULL},
    {L"wexpsrv.dll", L"%systemroot%\\SysWOW64\\expsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\exstrace.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\extrac32.exe", NULL},
    {L"wextrac32.exe", L"%systemroot%\\SysWOW64\\extrac32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\f3ahvoas.dll", NULL},
    {L"wf3ahvoas.dll", L"%systemroot%\\SysWOW64\\f3ahvoas.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\fastprox.dll", NULL},
    {NULL, L"%systemroot%\\system32\\faultrep.dll", NULL},
    {L"wfaultrep.dll", L"%systemroot%\\SysWOW64\\faultrep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fc.exe", NULL},
    {L"wfc.exe", L"%systemroot%\\SysWOW64\\fc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\fcachdll.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\fdc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fde.dll", NULL},
    {L"wfde.dll", L"%systemroot%\\SysWOW64\\fde.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fdeploy.dll", NULL},
    {L"wfdeploy.dll", L"%systemroot%\\SysWOW64\\fdeploy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\feclient.dll", NULL},
    {L"wfeclient.dll", L"%systemroot%\\SysWOW64\\feclient.dll", NULL},
    {NULL, L"%systemroot%\\system32\\filemgmt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\find.exe", NULL},
    {L"wfind.exe", L"%systemroot%\\SysWOW64\\find.exe", NULL},
    {NULL, L"%systemroot%\\system32\\findstr.exe", NULL},
    {L"wfindstr.exe", L"%systemroot%\\SysWOW64\\findstr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\finger.exe", NULL},
    {L"wfinger.exe", L"%systemroot%\\SysWOW64\\finger.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fips.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fixmapi.exe", NULL},
    {L"wfixmapi.exe", L"%systemroot%\\SysWOW64\\fixmapi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\flattemp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\flpydisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fmifs.dll", NULL},
    {L"wfmifs.dll", L"%systemroot%\\SysWOW64\\fmifs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontext.dll", NULL},
    {L"wfontext.dll", L"%systemroot%\\SysWOW64\\fontext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontsub.dll", NULL},
    {L"wfontsub.dll", L"%systemroot%\\SysWOW64\\fontsub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontview.exe", NULL},
    {L"wfontview.exe", L"%systemroot%\\SysWOW64\\fontview.exe", NULL},
    {NULL, L"%systemroot%\\system32\\forfiles.exe", NULL},
    {L"wforfiles.exe", L"%systemroot%\\SysWOW64\\forfiles.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\fp50ext.dll", NULL},
    {L"bhp004.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\FRAME.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\framebuf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\framedyn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\freedisk.exe", NULL},
    {L"wfreedisk.exe", L"%systemroot%\\SysWOW64\\freedisk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fs_rec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fsutil.exe", NULL},
    {L"wfsutil.exe", L"%systemroot%\\SysWOW64\\fsutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ftdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ftp.exe", NULL},
    {L"wftp.exe", L"%systemroot%\\SysWOW64\\ftp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ftpctrs2.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ftpmib.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ftpsvc2.dll", L"iis.inf"},
    {L"wftsrch.dll", L"%systemroot%\\SysWOW64\\ftsrch.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\fwdprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\g711codc.ax", NULL},
    {L"wg711codc.ax", L"%systemroot%\\SysWOW64\\g711codc.ax", NULL},
    {NULL, L"%systemroot%\\system32\\gcdef.dll", NULL},
    {L"wgcdef.dll", L"%systemroot%\\SysWOW64\\gcdef.dll", NULL},
    {L"wgdi.exe", L"%systemroot%\\SysWOW64\\gdi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gdi32.dll", NULL},
    {L"wgdi32.dll", L"%systemroot%\\SysWOW64\\gdi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\geo.nls", NULL},
    {L"wgeo.nls", L"%systemroot%\\SysWOW64\\geo.nls", NULL},
    {NULL, L"%systemroot%\\system32\\getmac.exe", NULL},
    {L"wgetmac.exe", L"%systemroot%\\SysWOW64\\getmac.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gettype.exe", NULL},
    {L"wgettype.exe", L"%systemroot%\\SysWOW64\\gettype.exe", NULL},
    {NULL, L"%systemroot%\\system32\\getuname.dll", NULL},
    {NULL, L"%systemroot%\\system32\\glmf32.dll", NULL},
    {L"wglmf32.dll", L"%systemroot%\\SysWOW64\\glmf32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\glu32.dll", NULL},
    {L"wglu32.dll", L"%systemroot%\\SysWOW64\\glu32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\gm.dls", NULL},
    {NULL, L"%systemroot%\\system32\\gpedit.dll", NULL},
    {L"wgpedit.dll", L"%systemroot%\\SysWOW64\\gpedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpkcsp.dll", NULL},
    {L"wgpkcsp.dll", L"%systemroot%\\SysWOW64\\gpkcsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpkrsrc.dll", NULL},
    {L"wgpkrsrc.dll", L"%systemroot%\\SysWOW64\\gpkrsrc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\gpr400.sys", NULL},
    {L"gprslt.exe", L"%systemroot%\\system32\\gpresult.exe", NULL},
    {L"wgprslt.exe", L"%systemroot%\\SysWOW64\\gpresult.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gptext.dll", NULL},
    {L"wgptext.dll", L"%systemroot%\\SysWOW64\\gptext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpupdate.exe", NULL},
    {L"wgpupdate.exe", L"%systemroot%\\SysWOW64\\gpupdate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\grovel.exe", NULL},
    {NULL, L"%systemroot%\\system32\\grovmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\grpconv.exe", NULL},
    {L"wgrpconv.exe", L"%systemroot%\\SysWOW64\\grpconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\grserial.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\gzip.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\h323.tsp", NULL},
    {L"wh323.tsp", L"%systemroot%\\SysWOW64\\h323.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\h323msp.dll", NULL},
    {L"wh323msp.dll", L"%systemroot%\\SysWOW64\\h323msp.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\hanja.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\hanjadic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HCAppRes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hccoin.dll", NULL},
    {L"whccoin.dll", L"%systemroot%\\SysWOW64\\hccoin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hdwwiz.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\help.exe", NULL},
    {L"whelp.exe", L"%systemroot%\\SysWOW64\\help.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpHost.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpSvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\hexedit.dll", NULL},
    {NULL, L"%systemroot%\\hh.exe", NULL},
    {L"whh.exe", L"%systemroot%\\SysWOW64\\hh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\hhctrl.ocx", NULL},
    {L"whhctrl.ocx", L"%systemroot%\\SysWOW64\\hhctrl.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\mui\\0009\\hhctrlui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hhsetup.dll", NULL},
    {L"whhsetup.dll", L"%systemroot%\\SysWOW64\\hhsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hid.dll", NULL},
    {L"whid.dll", L"%systemroot%\\SysWOW64\\hid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidbatt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidgame.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidir.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidparse.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hidphone.tsp", NULL},
    {L"whidphone.tsp", L"%systemroot%\\SysWOW64\\hidphone.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\hidserv.dll", NULL},
    {L"whidserv.dll", L"%systemroot%\\SysWOW64\\hidserv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidusb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hlink.dll", NULL},
    {L"whlink.dll", L"%systemroot%\\SysWOW64\\hlink.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\HMMAPI.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\hnetcfg.dll", NULL},
    {L"whnetcfg.dll", L"%systemroot%\\SysWOW64\\hnetcfg.dll", NULL},
    {L"whnetmon.dll", L"%systemroot%\\SysWOW64\\hnetmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hostmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hostname.exe", NULL},
    {L"whostname.exe", L"%systemroot%\\SysWOW64\\hostname.exe", NULL},
    {NULL, L"%systemroot%\\system32\\hotplug.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpn.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpt4qic.sys", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\htrn_jis.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\http.sys", NULL},
    {NULL, L"%systemroot%\\system32\\httpapi.dll", NULL},
    {L"whttpapi.dll", L"%systemroot%\\SysWOW64\\httpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\httpext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\httpmib.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\httpodbc.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\htui.dll", NULL},
    {L"whtui.dll", L"%systemroot%\\SysWOW64\\htui.dll", NULL},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\HWXCHT.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\hwxjpn.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Applets\\hwxkor.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\i2omgmt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\i2omp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\i8042prt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ias.dll", NULL},
    {L"wias.dll", L"%systemroot%\\SysWOW64\\ias.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasacct.dll", NULL},
    {L"wiasacct.dll", L"%systemroot%\\SysWOW64\\iasacct.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasads.dll", NULL},
    {L"wiasads.dll", L"%systemroot%\\SysWOW64\\iasads.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iashlpr.dll", NULL},
    {L"wiashlpr.dll", L"%systemroot%\\SysWOW64\\iashlpr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasmmc.dll", NULL},
    {L"wiasmmc.dll", L"%systemroot%\\SysWOW64\\iasmmc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasnap.dll", NULL},
    {L"wiasnap.dll", L"%systemroot%\\SysWOW64\\iasnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasperf.dll", NULL},
    {L"wiasperf.dll", L"%systemroot%\\SysWOW64\\iasperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iaspolcy.dll", NULL},
    {L"wiaspolcy.dll", L"%systemroot%\\SysWOW64\\iaspolcy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasrad.dll", NULL},
    {L"wiasrad.dll", L"%systemroot%\\SysWOW64\\iasrad.dll", NULL},
    {L"wiasrecst.dll", L"%systemroot%\\SysWOW64\\iasrecst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassam.dll", NULL},
    {L"wiassam.dll", L"%systemroot%\\SysWOW64\\iassam.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassdo.dll", NULL},
    {L"wiassdo.dll", L"%systemroot%\\SysWOW64\\iassdo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassvcs.dll", NULL},
    {L"wiassvcs.dll", L"%systemroot%\\SysWOW64\\iassvcs.dll", NULL},
    {L"wibmsgnet.dll", L"%systemroot%\\SysWOW64\\ibmsgnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ibmvcap.sys", NULL},
    {NULL, L"%systemroot%\\system32\\icaapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icfgnt5.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ichaud.sys", NULL},
    {NULL, L"%systemroot%\\system32\\icm32.dll", NULL},
    {L"wicm32.dll", L"%systemroot%\\SysWOW64\\icm32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icmp.dll", NULL},
    {L"wicmp.dll", L"%systemroot%\\SysWOW64\\icmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icmui.dll", NULL},
    {L"wicmui.dll", L"%systemroot%\\SysWOW64\\icmui.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn1.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn2.exe", NULL},
    {NULL, L"%systemroot%\\system32\\icwdial.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwdl.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwhelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icwphbk.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwres.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwrmind.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwtutor.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\idq.dll", NULL},
    {L"widq.dll", L"%systemroot%\\SysWOW64\\idq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\idwlog.exe", NULL},
    {L"widwlog.exe", L"%systemroot%\\SysWOW64\\idwlog.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ie4uinit.exe", NULL},
    {L"wie4uinit.exe", L"%systemroot%\\SysWOW64\\ie4uinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ieakeng.dll", NULL},
    {L"wieakeng.dll", L"%systemroot%\\SysWOW64\\ieakeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ieaksie.dll", NULL},
    {L"wieaksie.dll", L"%systemroot%\\SysWOW64\\ieaksie.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ieakui.dll", NULL},
    {L"wieakui.dll", L"%systemroot%\\SysWOW64\\ieakui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iedkcs32.dll", NULL},
    {L"wiedkcs32.dll", L"%systemroot%\\SysWOW64\\iedkcs32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\MSInfo\\IEINFO5.OCX", NULL},
    {L"wIEINFO5.OCX", L"%commonprogramfiles(x86)%\\Microsoft Shared\\MSInfo\\IEINFO5.OCX", NULL},
    {NULL, L"%systemroot%\\system32\\iepeers.dll", NULL},
    {L"wiepeers.dll", L"%systemroot%\\SysWOW64\\iepeers.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iernonce.dll", NULL},
    {L"wiernonce.dll", L"%systemroot%\\SysWOW64\\iernonce.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iesetup.dll", NULL},
    {L"wiesetup.dll", L"%systemroot%\\SysWOW64\\iesetup.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\IEXPLORE.EXE", NULL},
    {NULL, L"%systemroot%\\system32\\iexpress.exe", NULL},
    {L"wiexpress.exe", L"%systemroot%\\SysWOW64\\iexpress.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ifmon.dll", NULL},
    {L"wifmon.dll", L"%systemroot%\\SysWOW64\\ifmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ifsutil.dll", NULL},
    {L"wifsutil.dll", L"%systemroot%\\SysWOW64\\ifsutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\igmpagnt.dll", NULL},
    {L"wigmpagnt.dll", L"%systemroot%\\SysWOW64\\igmpagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\igmpv2.dll", NULL},
    {L"wigmpv2.dll", L"%systemroot%\\SysWOW64\\igmpv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\iis.dll", NULL},
    {L"IIS_iis_switch.vbs", L"%systemroot%\\system32\\inetsrv\\iis_switch.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisadmin.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisapp.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisback.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iiscfg.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisclex4.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\IIsCnfg.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisext.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\IIsFtp.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\IIsFtpdr.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iislog.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iismui.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisres.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iissuba.dll", NULL},
    {L"wiissuba.dll", L"%systemroot%\\SysWOW64\\iissuba.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisuiobj.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisutil.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisvdir.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisw3adm.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisweb.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iiswmi.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\imadmui.dll", NULL},
    {L"wimadmui.dll", L"%systemroot%\\SysWOW64\\imadmui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imagehlp.dll", NULL},
    {L"wimagehlp.dll", L"%systemroot%\\SysWOW64\\imagehlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imapi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\imapi.sys", NULL},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\imekr.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imekr61.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imekrcic.dll", L"intl.inf"},
    {L"wimekrcic.dll", L"%systemroot%\\ime (x86)\\IMKR6_1\\imekrcic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Applets\\imekrmbx.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imekrmig.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imepadsm.dll", L"intl.inf"},
    {L"wimepadsm.dll", L"%systemroot%\\ime (x86)\\SHARED\\imepadsm.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imepadsv.exe", L"intl.inf"},
    {L"wimepadsv.exe", L"%systemroot%\\ime (x86)\\SHARED\\imepadsv.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imgutil.dll", NULL},
    {L"wimgutil.dll", L"%systemroot%\\SysWOW64\\imgutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imjp81.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imjp81k.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpcd.dic", L"intl.inf"},
    {L"wimjpcd.dic", L"%systemroot%\\ime (x86)\\IMJP8_1\\DICTS\\imjpcd.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpch.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpcic.dll", L"intl.inf"},
    {L"wimjpcic.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpcic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpcus.dll", L"intl.inf"},
    {L"wimjpcus.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpcus.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdadm.exe", L"intl.inf"},
    {L"wimjpdadm.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdadm.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdct.dll", L"intl.inf"},
    {L"wimjpdct.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdct.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdct.exe", L"intl.inf"},
    {L"wimjpdct.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdct.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdsvr.exe", L"intl.inf"},
    {L"wimjpdsvr.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdsvr.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpgn.grm", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpinst.exe", L"intl.inf"},
    {L"wimjpinst.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpinst.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpln.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpmig.exe", L"intl.inf"},
    {L"wimjpmig.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpmig.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpnm.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjprw.exe", L"intl.inf"},
    {L"wimjprw.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjprw.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpsb.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpst.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjptk.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpuex.exe", L"intl.inf"},
    {L"wimjpuex.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpuex.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjputy.exe", L"intl.inf"},
    {L"wimjputy.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjputy.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjputyc.dll", L"intl.inf"},
    {L"wimjputyc.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjputyc.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpzp.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imkrinst.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imlang.dll", L"intl.inf"},
    {L"wimlang.dll", L"%systemroot%\\ime (x86)\\SHARED\\imlang.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imm32.dll", NULL},
    {L"wimm32.dll", L"%systemroot%\\SysWOW64\\imm32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\IMSCINST.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\Setup\\imsinsnt.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\imskdic.dll", L"intl.inf"},
    {L"wimskdic.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\imskdic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\imskf.dll", L"intl.inf"},
    {L"wimskf.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\imskf.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\inetcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetcomm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetcpl.cpl", NULL},
    {L"winetcpl.cpl", L"%systemroot%\\SysWOW64\\inetcpl.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inetcplc.dll", NULL},
    {L"winetcplc.dll", L"%systemroot%\\SysWOW64\\inetcplc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\inetinfo.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetmib1.dll", NULL},
    {L"winetmib1.dll", L"%systemroot%\\SysWOW64\\inetmib1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetpp.dll", NULL},
    {L"winetpp.dll", L"%systemroot%\\SysWOW64\\inetpp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetppui.dll", NULL},
    {L"winetppui.dll", L"%systemroot%\\SysWOW64\\inetppui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetres.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\inetwiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\infocomm.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\infoctrs.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\infosoft.dll", NULL},
    {L"winfosoft.dll", L"%systemroot%\\SysWOW64\\infosoft.dll", NULL},
    {NULL, L"%systemroot%\\system32\\initpki.dll", NULL},
    {L"winitpki.dll", L"%systemroot%\\SysWOW64\\initpki.dll", NULL},
    {NULL, L"%systemroot%\\system32\\input.dll", NULL},
    {L"winput.dll", L"%systemroot%\\SysWOW64\\input.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inseng.dll", NULL},
    {L"winseng.dll", L"%systemroot%\\SysWOW64\\inseng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clients\\tsclient\\win32\\instmsia.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clients\\tsclient\\win32\\instmsiw.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\intelide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\interop_msxml.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\intl.cpl", NULL},
    {L"wintl.cpl", L"%systemroot%\\SysWOW64\\intl.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inuse.exe", NULL},
    {L"winuse.exe", L"%systemroot%\\SysWOW64\\inuse.exe", NULL},
    {NULL, L"%systemroot%\\system32\\iologmsg.dll", NULL},
    {L"wiologmsg.dll", L"%systemroot%\\SysWOW64\\iologmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipbootp.dll", NULL},
    {L"wipbootp.dll", L"%systemroot%\\SysWOW64\\ipbootp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipconf.tsp", NULL},
    {L"wipconf.tsp", L"%systemroot%\\SysWOW64\\ipconf.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\ipconfig.exe", NULL},
    {L"wipconfig.exe", L"%systemroot%\\SysWOW64\\ipconfig.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipfltdrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\iphlpapi.dll", NULL},
    {L"wiphlpapi.dll", L"%systemroot%\\SysWOW64\\iphlpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipmontr.dll", NULL},
    {L"wipmontr.dll", L"%systemroot%\\SysWOW64\\ipmontr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipnat.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ipnathlp.dll", NULL},
    {L"wipnathlp.dll", L"%systemroot%\\SysWOW64\\ipnathlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ippromon.dll", NULL},
    {L"wippromon.dll", L"%systemroot%\\SysWOW64\\ippromon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprip.dll", NULL},
    {L"wiprip.dll", L"%systemroot%\\SysWOW64\\iprip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprip2.dll", NULL},
    {L"wiprip2.dll", L"%systemroot%\\SysWOW64\\iprip2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprop.dll", NULL},
    {L"wiprop.dll", L"%systemroot%\\SysWOW64\\iprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprtprio.dll", NULL},
    {L"wiprtprio.dll", L"%systemroot%\\SysWOW64\\iprtprio.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprtrmgr.dll", NULL},
    {L"wiprtrmgr.dll", L"%systemroot%\\SysWOW64\\iprtrmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsec6.exe", NULL},
    {L"wipsec6.exe", L"%systemroot%\\SysWOW64\\ipsec6.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ipsecsnp.dll", NULL},
    {L"wipsecsnp.dll", L"%systemroot%\\SysWOW64\\ipsecsnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsecsvc.dll", NULL},
    {L"wipsecsvc.dll", L"%systemroot%\\SysWOW64\\ipsecsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsink.ax", NULL},
    {L"wipsink.ax", L"%systemroot%\\SysWOW64\\ipsink.ax", NULL},
    {NULL, L"%systemroot%\\system32\\ipsmsnap.dll", NULL},
    {L"wipsmsnap.dll", L"%systemroot%\\SysWOW64\\ipsmsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsnap.dll", NULL},
    {L"wipsnap.dll", L"%systemroot%\\SysWOW64\\ipsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipv6mon.dll", NULL},
    {L"wipv6mon.dll", L"%systemroot%\\SysWOW64\\ipv6mon.dll", NULL},
    {L"bhp005.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\IPX.DLL", NULL},
    {L"wipxroute.exe", L"%systemroot%\\SysWOW64\\ipxroute.exe", NULL},
    {L"wipxsap.dll", L"%systemroot%\\SysWOW64\\ipxsap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\irbus.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\isapips.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\isapnp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iscomlog.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\isign32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\isignup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ismip.dll", NULL},
    {L"wismip.dll", L"%systemroot%\\SysWOW64\\ismip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ismserv.exe", NULL},
    {L"wismserv.exe", L"%systemroot%\\SysWOW64\\ismserv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ismsink.dll", NULL},
    {L"wismsink.dll", L"%systemroot%\\SysWOW64\\ismsink.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ismsmtp.dll", NULL},
    {L"wismsmtp.dll", L"%systemroot%\\SysWOW64\\ismsmtp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\isrpc.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\iuctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iuengine.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ixsso.dll", NULL},
    {L"wixsso.dll", L"%systemroot%\\SysWOW64\\ixsso.dll", NULL},
    {L"wiyuv_32.dll", L"%systemroot%\\SysWOW64\\iyuv_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jet.dll", NULL},
    {L"wjet.dll", L"%systemroot%\\SysWOW64\\jet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jet500.dll", NULL},
    {L"wjet500.dll", L"%systemroot%\\SysWOW64\\jet500.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jetconv.exe", NULL},
    {L"wjetconv.exe", L"%systemroot%\\SysWOW64\\jetconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\jetpack.exe", NULL},
    {L"wjetpack.exe", L"%systemroot%\\SysWOW64\\jetpack.exe", NULL},
    {L"wjgaw400.dll", L"%systemroot%\\SysWOW64\\jgaw400.dll", NULL},
    {L"wjgdw400.dll", L"%systemroot%\\SysWOW64\\jgdw400.dll", NULL},
    {L"wjgmd400.dll", L"%systemroot%\\SysWOW64\\jgmd400.dll", NULL},
    {L"wjgpl400.dll", L"%systemroot%\\SysWOW64\\jgpl400.dll", NULL},
    {L"wjgsd400.dll", L"%systemroot%\\SysWOW64\\jgsd400.dll", NULL},
    {L"wjgsh400.dll", L"%systemroot%\\SysWOW64\\jgsh400.dll", NULL},
    {L"wjobexec.dll", L"%systemroot%\\SysWOW64\\jobexec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\joy.cpl", NULL},
    {L"wjoy.cpl", L"%systemroot%\\SysWOW64\\joy.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\jvcmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101.dll", NULL},
    {L"wkbd101.dll", L"%systemroot%\\SysWOW64\\kbd101.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101a.dll", NULL},
    {L"wkbd101a.dll", L"%systemroot%\\SysWOW64\\kbd101a.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101b.dll", NULL},
    {L"wkbd101b.dll", L"%systemroot%\\SysWOW64\\kbd101b.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101c.dll", NULL},
    {L"wkbd101c.dll", L"%systemroot%\\SysWOW64\\kbd101c.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd103.dll", NULL},
    {L"wkbd103.dll", L"%systemroot%\\SysWOW64\\kbd103.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd106.dll", NULL},
    {L"wkbd106.dll", L"%systemroot%\\SysWOW64\\kbd106.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd106n.dll", NULL},
    {L"wkbd106n.dll", L"%systemroot%\\SysWOW64\\kbd106n.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda1.dll", NULL},
    {L"wkbda1.dll", L"%systemroot%\\SysWOW64\\kbda1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda2.dll", NULL},
    {L"wkbda2.dll", L"%systemroot%\\SysWOW64\\kbda2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda3.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda3.dll", NULL},
    {L"wkbda3.dll", L"%systemroot%\\SysWOW64\\kbda3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdal.dll", NULL},
    {L"wkbdal.dll", L"%systemroot%\\SysWOW64\\kbdal.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdarme.dll", NULL},
    {L"wkbdarme.dll", L"%systemroot%\\SysWOW64\\kbdarme.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdarmw.dll", NULL},
    {L"wkbdarmw.dll", L"%systemroot%\\SysWOW64\\kbdarmw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdax2.dll", NULL},
    {L"wkbdax2.dll", L"%systemroot%\\SysWOW64\\kbdax2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdaze.dll", NULL},
    {L"wkbdaze.dll", L"%systemroot%\\SysWOW64\\kbdaze.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdazel.dll", NULL},
    {L"wkbdazel.dll", L"%systemroot%\\SysWOW64\\kbdazel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbe.dll", NULL},
    {L"wkbdbe.dll", L"%systemroot%\\SysWOW64\\kbdbe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbene.dll", NULL},
    {L"wkbdbene.dll", L"%systemroot%\\SysWOW64\\kbdbene.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdblr.dll", NULL},
    {L"wkbdblr.dll", L"%systemroot%\\SysWOW64\\kbdblr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbr.dll", NULL},
    {L"wkbdbr.dll", L"%systemroot%\\SysWOW64\\kbdbr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbu.dll", NULL},
    {L"wkbdbu.dll", L"%systemroot%\\SysWOW64\\kbdbu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdca.dll", NULL},
    {L"wkbdca.dll", L"%systemroot%\\SysWOW64\\kbdca.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcan.dll", NULL},
    {L"wkbdcan.dll", L"%systemroot%\\SysWOW64\\kbdcan.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kbdclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcr.dll", NULL},
    {L"wkbdcr.dll", L"%systemroot%\\SysWOW64\\kbdcr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz.dll", NULL},
    {L"wkbdcz.dll", L"%systemroot%\\SysWOW64\\kbdcz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz1.dll", NULL},
    {L"wkbdcz1.dll", L"%systemroot%\\SysWOW64\\kbdcz1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz2.dll", NULL},
    {L"wkbdcz2.dll", L"%systemroot%\\SysWOW64\\kbdcz2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdda.dll", NULL},
    {L"wkbdda.dll", L"%systemroot%\\SysWOW64\\kbdda.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddiv1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbddiv1.dll", NULL},
    {L"wkbddiv1.dll", L"%systemroot%\\SysWOW64\\kbddiv1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddiv2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbddiv2.dll", NULL},
    {L"wkbddiv2.dll", L"%systemroot%\\SysWOW64\\kbddiv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddv.dll", NULL},
    {L"wkbddv.dll", L"%systemroot%\\SysWOW64\\kbddv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdes.dll", NULL},
    {L"wkbdes.dll", L"%systemroot%\\SysWOW64\\kbdes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdest.dll", NULL},
    {L"wkbdest.dll", L"%systemroot%\\SysWOW64\\kbdest.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfa.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdfa.dll", NULL},
    {L"wkbdfa.dll", L"%systemroot%\\SysWOW64\\kbdfa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfc.dll", NULL},
    {L"wkbdfc.dll", L"%systemroot%\\SysWOW64\\kbdfc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfi.dll", NULL},
    {L"wkbdfi.dll", L"%systemroot%\\SysWOW64\\kbdfi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfo.dll", NULL},
    {L"wkbdfo.dll", L"%systemroot%\\SysWOW64\\kbdfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfr.dll", NULL},
    {L"wkbdfr.dll", L"%systemroot%\\SysWOW64\\kbdfr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgae.dll", NULL},
    {L"wkbdgae.dll", L"%systemroot%\\SysWOW64\\kbdgae.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgeo.dll", NULL},
    {L"wkbdgeo.dll", L"%systemroot%\\SysWOW64\\kbdgeo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgkl.dll", NULL},
    {L"wkbdgkl.dll", L"%systemroot%\\SysWOW64\\kbdgkl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgr.dll", NULL},
    {L"wkbdgr.dll", L"%systemroot%\\SysWOW64\\kbdgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgr1.dll", NULL},
    {L"wkbdgr1.dll", L"%systemroot%\\SysWOW64\\kbdgr1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe.dll", NULL},
    {L"wkbdhe.dll", L"%systemroot%\\SysWOW64\\kbdhe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe220.dll", NULL},
    {L"wkbdhe220.dll", L"%systemroot%\\SysWOW64\\kbdhe220.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe319.dll", NULL},
    {L"wkbdhe319.dll", L"%systemroot%\\SysWOW64\\kbdhe319.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdheb.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdheb.dll", NULL},
    {L"wkbdheb.dll", L"%systemroot%\\SysWOW64\\kbdheb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhela2.dll", NULL},
    {L"wkbdhela2.dll", L"%systemroot%\\SysWOW64\\kbdhela2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhela3.dll", NULL},
    {L"wkbdhela3.dll", L"%systemroot%\\SysWOW64\\kbdhela3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhept.dll", NULL},
    {L"wkbdhept.dll", L"%systemroot%\\SysWOW64\\kbdhept.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kbdhid.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhu.dll", NULL},
    {L"wkbdhu.dll", L"%systemroot%\\SysWOW64\\kbdhu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhu1.dll", NULL},
    {L"wkbdhu1.dll", L"%systemroot%\\SysWOW64\\kbdhu1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdibm02.dll", NULL},
    {L"wkbdibm02.dll", L"%systemroot%\\SysWOW64\\kbdibm02.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdic.dll", NULL},
    {L"wkbdic.dll", L"%systemroot%\\SysWOW64\\kbdic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdindev.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdindev.dll", NULL},
    {L"wkbdindev.dll", L"%systemroot%\\SysWOW64\\kbdindev.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinguj.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinguj.dll", NULL},
    {L"wkbdinguj.dll", L"%systemroot%\\SysWOW64\\kbdinguj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinhin.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinhin.dll", NULL},
    {L"wkbdinhin.dll", L"%systemroot%\\SysWOW64\\kbdinhin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinkan.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinkan.dll", NULL},
    {L"wkbdinkan.dll", L"%systemroot%\\SysWOW64\\kbdinkan.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinmar.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinmar.dll", NULL},
    {L"wkbdinmar.dll", L"%systemroot%\\SysWOW64\\kbdinmar.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinpun.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinpun.dll", NULL},
    {L"wkbdinpun.dll", L"%systemroot%\\SysWOW64\\kbdinpun.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdintam.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdintam.dll", NULL},
    {L"wkbdintam.dll", L"%systemroot%\\SysWOW64\\kbdintam.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdintel.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdintel.dll", NULL},
    {L"wkbdintel.dll", L"%systemroot%\\SysWOW64\\kbdintel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdir.dll", NULL},
    {L"wkbdir.dll", L"%systemroot%\\SysWOW64\\kbdir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdit.dll", NULL},
    {L"wkbdit.dll", L"%systemroot%\\SysWOW64\\kbdit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdit142.dll", NULL},
    {L"wkbdit142.dll", L"%systemroot%\\SysWOW64\\kbdit142.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdjpn.dll", NULL},
    {L"wkbdjpn.dll", L"%systemroot%\\SysWOW64\\kbdjpn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkaz.dll", NULL},
    {L"wkbdkaz.dll", L"%systemroot%\\SysWOW64\\kbdkaz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkor.dll", NULL},
    {L"wkbdkor.dll", L"%systemroot%\\SysWOW64\\kbdkor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkyr.dll", NULL},
    {L"wkbdkyr.dll", L"%systemroot%\\SysWOW64\\kbdkyr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdla.dll", NULL},
    {L"wkbdla.dll", L"%systemroot%\\SysWOW64\\kbdla.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlk41a.dll", NULL},
    {L"wkbdlk41a.dll", L"%systemroot%\\SysWOW64\\kbdlk41a.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlk41j.dll", NULL},
    {L"wkbdlk41j.dll", L"%systemroot%\\SysWOW64\\kbdlk41j.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlt.dll", NULL},
    {L"wkbdlt.dll", L"%systemroot%\\SysWOW64\\kbdlt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlt1.dll", NULL},
    {L"wkbdlt1.dll", L"%systemroot%\\SysWOW64\\kbdlt1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlv.dll", NULL},
    {L"wkbdlv.dll", L"%systemroot%\\SysWOW64\\kbdlv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlv1.dll", NULL},
    {L"wkbdlv1.dll", L"%systemroot%\\SysWOW64\\kbdlv1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdmac.dll", NULL},
    {L"wkbdmac.dll", L"%systemroot%\\SysWOW64\\kbdmac.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdmon.dll", NULL},
    {L"wkbdmon.dll", L"%systemroot%\\SysWOW64\\kbdmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdne.dll", NULL},
    {L"wkbdne.dll", L"%systemroot%\\SysWOW64\\kbdne.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnec.dll", NULL},
    {L"wkbdnec.dll", L"%systemroot%\\SysWOW64\\kbdnec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnec95.dll", NULL},
    {L"wkbdnec95.dll", L"%systemroot%\\SysWOW64\\kbdnec95.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnecat.dll", NULL},
    {L"wkbdnecat.dll", L"%systemroot%\\SysWOW64\\kbdnecat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnecnt.dll", NULL},
    {L"wkbdnecnt.dll", L"%systemroot%\\SysWOW64\\kbdnecnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdno.dll", NULL},
    {L"wkbdno.dll", L"%systemroot%\\SysWOW64\\kbdno.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpl.dll", NULL},
    {L"wkbdpl.dll", L"%systemroot%\\SysWOW64\\kbdpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpl1.dll", NULL},
    {L"wkbdpl1.dll", L"%systemroot%\\SysWOW64\\kbdpl1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpo.dll", NULL},
    {L"wkbdpo.dll", L"%systemroot%\\SysWOW64\\kbdpo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdro.dll", NULL},
    {L"wkbdro.dll", L"%systemroot%\\SysWOW64\\kbdro.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdru.dll", NULL},
    {L"wkbdru.dll", L"%systemroot%\\SysWOW64\\kbdru.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdru1.dll", NULL},
    {L"wkbdru1.dll", L"%systemroot%\\SysWOW64\\kbdru1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsf.dll", NULL},
    {L"wkbdsf.dll", L"%systemroot%\\SysWOW64\\kbdsf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsg.dll", NULL},
    {L"wkbdsg.dll", L"%systemroot%\\SysWOW64\\kbdsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsl.dll", NULL},
    {L"wkbdsl.dll", L"%systemroot%\\SysWOW64\\kbdsl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsl1.dll", NULL},
    {L"wkbdsl1.dll", L"%systemroot%\\SysWOW64\\kbdsl1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsp.dll", NULL},
    {L"wkbdsp.dll", L"%systemroot%\\SysWOW64\\kbdsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsw.dll", NULL},
    {L"wkbdsw.dll", L"%systemroot%\\SysWOW64\\kbdsw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsyr1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdsyr1.dll", NULL},
    {L"wkbdsyr1.dll", L"%systemroot%\\SysWOW64\\kbdsyr1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsyr2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdsyr2.dll", NULL},
    {L"wkbdsyr2.dll", L"%systemroot%\\SysWOW64\\kbdsyr2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtat.dll", NULL},
    {L"wkbdtat.dll", L"%systemroot%\\SysWOW64\\kbdtat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth0.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth0.dll", NULL},
    {L"wkbdth0.dll", L"%systemroot%\\SysWOW64\\kbdth0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth1.dll", NULL},
    {L"wkbdth1.dll", L"%systemroot%\\SysWOW64\\kbdth1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth2.dll", NULL},
    {L"wkbdth2.dll", L"%systemroot%\\SysWOW64\\kbdth2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth3.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth3.dll", NULL},
    {L"wkbdth3.dll", L"%systemroot%\\SysWOW64\\kbdth3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtuf.dll", NULL},
    {L"wkbdtuf.dll", L"%systemroot%\\SysWOW64\\kbdtuf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtuq.dll", NULL},
    {L"wkbdtuq.dll", L"%systemroot%\\SysWOW64\\kbdtuq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbduk.dll", NULL},
    {L"wkbduk.dll", L"%systemroot%\\SysWOW64\\kbduk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdur.dll", NULL},
    {L"wkbdur.dll", L"%systemroot%\\SysWOW64\\kbdur.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdurdu.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdurdu.dll", NULL},
    {L"wkbdurdu.dll", L"%systemroot%\\SysWOW64\\kbdurdu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdus.dll", NULL},
    {L"wkbdus.dll", L"%systemroot%\\SysWOW64\\kbdus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusl.dll", NULL},
    {L"wkbdusl.dll", L"%systemroot%\\SysWOW64\\kbdusl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusr.dll", NULL},
    {L"wkbdusr.dll", L"%systemroot%\\SysWOW64\\kbdusr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusx.dll", NULL},
    {L"wkbdusx.dll", L"%systemroot%\\SysWOW64\\kbdusx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbduzb.dll", NULL},
    {L"wkbduzb.dll", L"%systemroot%\\SysWOW64\\kbduzb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdvntc.dll", NULL},
    {L"wkbdvntc.dll", L"%systemroot%\\SysWOW64\\kbdvntc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdycc.dll", NULL},
    {L"wkbdycc.dll", L"%systemroot%\\SysWOW64\\kbdycc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdycl.dll", NULL},
    {L"wkbdycl.dll", L"%systemroot%\\SysWOW64\\kbdycl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kd1394.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kdcom.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kdcsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kerberos.dll", NULL},
    {L"wkerberos.dll", L"%systemroot%\\SysWOW64\\kerberos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\PARSERS\\kerbprsr.dll", NULL},
    {L"wkeyboard.drv", L"%systemroot%\\SysWOW64\\keyboard.drv", NULL},
    {NULL, L"%systemroot%\\system32\\keymgr.cpl", NULL},
    {L"wkeymgr.cpl", L"%systemroot%\\SysWOW64\\keymgr.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\keymgr.dll", NULL},
    {L"wkeymgr.dll", L"%systemroot%\\SysWOW64\\keymgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kmddsp.tsp", NULL},
    {L"wkmddsp.tsp", L"%systemroot%\\SysWOW64\\kmddsp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kmixer.sys", NULL},
    {NULL, L"%systemroot%\\system32\\korwbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\korwbrkr.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\krnlprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ks.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ksc.nls", NULL},
    {L"wksc.nls", L"%systemroot%\\SysWOW64\\ksc.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ksecdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ksproxy.ax", NULL},
    {NULL, L"%systemroot%\\system32\\kstvtune.ax", NULL},
    {NULL, L"%systemroot%\\system32\\ksuser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ksxbar.ax", NULL},
    {NULL, L"%systemroot%\\system32\\l_except.nls", NULL},
    {L"wl_except.nls", L"%systemroot%\\SysWOW64\\l_except.nls", NULL},
    {NULL, L"%systemroot%\\system32\\l_intl.nls", NULL},
    {L"wl_intl.nls", L"%systemroot%\\SysWOW64\\l_intl.nls", NULL},
    {NULL, L"%systemroot%\\system32\\label.exe", NULL},
    {L"wlabel.exe", L"%systemroot%\\SysWOW64\\label.exe", NULL},
    {L"bhp023.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LANE.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\langwrbk.dll", NULL},
    {L"wlangwrbk.dll", L"%systemroot%\\SysWOW64\\langwrbk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lcwiz.exe", NULL},
    {L"wlcwiz.exe", L"%systemroot%\\SysWOW64\\lcwiz.exe", NULL},
    {L"bhp025.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LDAP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\ldifde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\libxprmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\liccpa.cpl", NULL},
    {L"wliccpa.cpl", L"%systemroot%\\SysWOW64\\liccpa.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\licenoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\licmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\licmgr10.dll", NULL},
    {L"wlicmgr10.dll", L"%systemroot%\\SysWOW64\\licmgr10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\linkinfo.dll", NULL},
    {L"wlinkinfo.dll", L"%systemroot%\\SysWOW64\\linkinfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\LIT220P.SYS", NULL},
    {L"bhp006.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LLC.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\llsmgr.exe", NULL},
    {L"wllsmgr.exe", L"%systemroot%\\SysWOW64\\llsmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\llsrpc.dll", NULL},
    {L"wllsrpc.dll", L"%systemroot%\\SysWOW64\\llsrpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\llssrv.exe", NULL},
    {L"wllssrv.exe", L"%systemroot%\\SysWOW64\\llssrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lmhsvc.dll", NULL},
    {L"wlmhsvc.dll", L"%systemroot%\\SysWOW64\\lmhsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lmmib2.dll", NULL},
    {L"wlmmib2.dll", L"%systemroot%\\SysWOW64\\lmmib2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lmrt.dll", NULL},
    {L"wlmrt.dll", L"%systemroot%\\SysWOW64\\lmrt.dll", NULL},
    {L"wlnkstub.exe", L"%systemroot%\\SysWOW64\\lnkstub.exe", NULL},
    {NULL, L"%systemroot%\\system32\\loadperf.dll", NULL},
    {L"wloadperf.dll", L"%systemroot%\\SysWOW64\\loadperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\locale.nls", NULL},
    {L"wlocale.nls", L"%systemroot%\\SysWOW64\\locale.nls", NULL},
    {NULL, L"%systemroot%\\system32\\localsec.dll", NULL},
    {L"wlocalsec.dll", L"%systemroot%\\SysWOW64\\localsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\localspl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\localui.dll", NULL},
    {L"wlocalui.dll", L"%systemroot%\\SysWOW64\\localui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\locator.exe", NULL},
    {L"wlocator.exe", L"%systemroot%\\SysWOW64\\locator.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lodctr.exe", NULL},
    {L"wlodctr.exe", L"%systemroot%\\SysWOW64\\lodctr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\loghours.dll", NULL},
    {L"wloghours.dll", L"%systemroot%\\SysWOW64\\loghours.dll", NULL},
    {NULL, L"%systemroot%\\system32\\logman.exe", NULL},
    {L"wlogman.exe", L"%systemroot%\\SysWOW64\\logman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\logoff.exe", NULL},
    {L"bhp019.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LOGON.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\logon.scr", NULL},
    {NULL, L"%systemroot%\\system32\\logonui.exe", NULL},
    {L"wlogonui.exe", L"%systemroot%\\SysWOW64\\logonui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\logscrpt.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\lonsint.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\loop.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\lp6nds35.sys", NULL},
    {NULL, L"%systemroot%\\system32\\lpdsvc.dll", NULL},
    {L"wlpdsvc.dll", L"%systemroot%\\SysWOW64\\lpdsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lpk.dll", NULL},
    {L"wlpk.dll", L"%systemroot%\\SysWOW64\\lpk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lpq.exe", NULL},
    {L"wlpq.exe", L"%systemroot%\\SysWOW64\\lpq.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lpr.exe", NULL},
    {L"wlpr.exe", L"%systemroot%\\SysWOW64\\lpr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lprhelp.dll", NULL},
    {L"wlprhelp.dll", L"%systemroot%\\SysWOW64\\lprhelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lprmon.dll", NULL},
    {L"wlprmon.dll", L"%systemroot%\\SysWOW64\\lprmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lprmonui.dll", NULL},
    {L"wlprmonui.dll", L"%systemroot%\\SysWOW64\\lprmonui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lrwizdll.dll", NULL},
    {L"bhp020.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LSARPC.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\lsass.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lserver.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ltotape.sys", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\Lexicon\\1033\\ltts1033.lxa", NULL},
    {NULL, L"%systemroot%\\system32\\lz32.dll", NULL},
    {L"wlz32.dll", L"%systemroot%\\SysWOW64\\lz32.dll", NULL},
    {L"wlzexpand.dll", L"%systemroot%\\SysWOW64\\lzexpand.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\m4mc.sys", NULL},
    {L"bhp007.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\MAC.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\macfile.exe", NULL},
    {L"wmacfile.exe", L"%systemroot%\\SysWOW64\\macfile.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mag_hook.dll", NULL},
    {L"wmag_hook.dll", L"%systemroot%\\SysWOW64\\mag_hook.dll", NULL},
    {NULL, L"%systemroot%\\system32\\magnify.exe", NULL},
    {L"wmagnify.exe", L"%systemroot%\\SysWOW64\\magnify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\mailmsg.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\main.cpl", NULL},
    {L"wmain.cpl", L"%systemroot%\\SysWOW64\\main.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\makecab.exe", NULL},
    {L"wmakecab.exe", L"%systemroot%\\SysWOW64\\makecab.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mammoth.sys", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\PARSERS\\mcast.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcastmib.dll", NULL},
    {L"wmcastmib.dll", L"%systemroot%\\SysWOW64\\mcastmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mcd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mcd32.dll", NULL},
    {L"wmcd32.dll", L"%systemroot%\\SysWOW64\\mcd32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcdsrv32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mchgrcoi.dll", NULL},
    {L"wmchgrcoi.dll", L"%systemroot%\\SysWOW64\\mchgrcoi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciavi.drv", NULL},
    {L"wmciavi.drv", L"%systemroot%\\SysWOW64\\mciavi.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mciavi32.dll", NULL},
    {L"wmciavi32.dll", L"%systemroot%\\SysWOW64\\mciavi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcicda.dll", NULL},
    {L"wmcicda.dll", L"%systemroot%\\SysWOW64\\mcicda.dll", NULL},
    {L"wmciole16.dll", L"%systemroot%\\SysWOW64\\mciole16.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciole32.dll", NULL},
    {L"wmciole32.dll", L"%systemroot%\\SysWOW64\\mciole32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciqtz32.dll", NULL},
    {L"wmciqtz32.dll", L"%systemroot%\\SysWOW64\\mciqtz32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciseq.dll", NULL},
    {L"wmciseq.dll", L"%systemroot%\\SysWOW64\\mciseq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciseq.drv", NULL},
    {L"wmciseq.drv", L"%systemroot%\\SysWOW64\\mciseq.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mciwave.dll", NULL},
    {L"wmciwave.dll", L"%systemroot%\\SysWOW64\\mciwave.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciwave.drv", NULL},
    {L"wmciwave.drv", L"%systemroot%\\SysWOW64\\mciwave.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mdhcp.dll", NULL},
    {L"wmdhcp.dll", L"%systemroot%\\SysWOW64\\mdhcp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mdminst.dll", NULL},
    {L"wmdminst.dll", L"%systemroot%\\SysWOW64\\mdminst.dll", NULL},
    {L"wmdwmdmsp.dll", L"%systemroot%\\SysWOW64\\mdwmdmsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\memcard.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\metadata.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\mf.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mf3216.dll", NULL},
    {L"wmf3216.dll", L"%systemroot%\\SysWOW64\\mf3216.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mgmtapi.dll", NULL},
    {L"wmgmtapi.dll", L"%systemroot%\\SysWOW64\\mgmtapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Microsoft.WindowsMediaServices.DLL", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\midimap.dll", NULL},
    {L"wmidimap.dll", L"%systemroot%\\SysWOW64\\midimap.dll", NULL},
    {L"wmigisol.exe", L"%systemroot%\\SysWOW64\\migisol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\miglibnt.dll", NULL},
    {L"wmiglibnt.dll", L"%systemroot%\\SysWOW64\\miglibnt.dll", NULL},
    {L"wmigpwd.exe", L"%systemroot%\\SysWOW64\\migpwd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\migregdb.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mimefilt.dll", NULL},
    {L"wmimefilt.dll", L"%systemroot%\\SysWOW64\\mimefilt.dll", NULL},
    {L"wmindex.dll", L"%systemroot%\\SysWOW64\\mindex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\miniqic.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mlang.dat", NULL},
    {L"wmlang.dat", L"%systemroot%\\SysWOW64\\mlang.dat", NULL},
    {NULL, L"%systemroot%\\system32\\mlang.dll", NULL},
    {L"wmlang.dll", L"%systemroot%\\SysWOW64\\mlang.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_hp.dll", NULL},
    {L"wmll_hp.dll", L"%systemroot%\\SysWOW64\\mll_hp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_mtf.dll", NULL},
    {L"wmll_mtf.dll", L"%systemroot%\\SysWOW64\\mll_mtf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_qic.dll", NULL},
    {L"wmll_qic.dll", L"%systemroot%\\SysWOW64\\mll_qic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmc.exe", NULL},
    {L"wmmc.exe", L"%systemroot%\\SysWOW64\\mmc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mmcbase.dll", NULL},
    {L"wmmcbase.dll", L"%systemroot%\\SysWOW64\\mmcbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmcndmgr.dll", NULL},
    {L"wmmcndmgr.dll", L"%systemroot%\\SysWOW64\\mmcndmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmcshext.dll", NULL},
    {L"wmmcshext.dll", L"%systemroot%\\SysWOW64\\mmcshext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmfutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmsys.cpl", NULL},
    {L"wmmsys.cpl", L"%systemroot%\\SysWOW64\\mmsys.cpl", NULL},
    {L"wmmsystem.dll", L"%systemroot%\\SysWOW64\\mmsystem.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmutilse.dll", NULL},
    {L"wmmutilse.dll", L"%systemroot%\\SysWOW64\\mmutilse.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mobsync.dll", NULL},
    {L"wmobsync.dll", L"%systemroot%\\SysWOW64\\mobsync.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mobsync.exe", NULL},
    {L"wmobsync.exe", L"%systemroot%\\SysWOW64\\mobsync.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\modem.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\MODEMCSA.sys", NULL},
    {NULL, L"%systemroot%\\system32\\modemui.dll", NULL},
    {L"wmodemui.dll", L"%systemroot%\\SysWOW64\\modemui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\modex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\mofcomp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\mofd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\moricons.dll", NULL},
    {L"wmoricons.dll", L"%systemroot%\\SysWOW64\\moricons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mouclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mouhid.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mountmgr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mountvol.exe", NULL},
    {L"wmountvol.exe", L"%systemroot%\\SysWOW64\\mountvol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpg2splt.ax", NULL},
    {L"wmpg2splt.ax", L"%systemroot%\\SysWOW64\\mpg2splt.ax", NULL},
    {L"wmpg4dmod.dll", L"%systemroot%\\SysWOW64\\mpg4dmod.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mplay32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpnotify.exe", NULL},
    {L"wmpnotify.exe", L"%systemroot%\\SysWOW64\\mpnotify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpr.dll", NULL},
    {L"wmpr.dll", L"%systemroot%\\SysWOW64\\mpr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprapi.dll", NULL},
    {L"wmprapi.dll", L"%systemroot%\\SysWOW64\\mprapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprddm.dll", NULL},
    {L"wmprddm.dll", L"%systemroot%\\SysWOW64\\mprddm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprdim.dll", NULL},
    {L"wmprdim.dll", L"%systemroot%\\SysWOW64\\mprdim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprmsg.dll", NULL},
    {L"wmprmsg.dll", L"%systemroot%\\SysWOW64\\mprmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprsnap.dll", NULL},
    {L"wmprsnap.dll", L"%systemroot%\\SysWOW64\\mprsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprui.dll", NULL},
    {L"wmprui.dll", L"%systemroot%\\SysWOW64\\mprui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mqac.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mqad.dll", NULL},
    {L"wmqad.dll", L"%systemroot%\\SysWOW64\\mqad.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqads.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqbkup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqcertui.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\MQClus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqdscli.dll", NULL},
    {L"wmqdscli.dll", L"%systemroot%\\SysWOW64\\mqdscli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqdssrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqdssvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqgentr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqise.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqlogmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqoa.dll", NULL},
    {L"wmqoa.dll", L"%systemroot%\\SysWOW64\\mqoa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqoa10.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mqoa20.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mqperf.dll", NULL},
    {L"wmqperf.dll", L"%systemroot%\\SysWOW64\\mqperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqqm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqrt.dll", NULL},
    {L"wmqrt.dll", L"%systemroot%\\SysWOW64\\mqrt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqrtdep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqsec.dll", NULL},
    {L"wmqsec.dll", L"%systemroot%\\SysWOW64\\mqsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqtgclus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqtgsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqtrig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqupgrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqutil.dll", NULL},
    {L"wmqutil.dll", L"%systemroot%\\SysWOW64\\mqutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mraid35x.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mrinfo.exe", NULL},
    {L"wmrinfo.exe", L"%systemroot%\\SysWOW64\\mrinfo.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mrxdav.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mrxsmb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msaatext.dll", NULL},
    {L"wmsaatext.dll", L"%systemroot%\\SysWOW64\\msaatext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msacm.dll", NULL},
    {L"wmsacm.dll", L"%systemroot%\\SysWOW64\\msacm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msacm32.dll", NULL},
    {L"wmsacm32.dll", L"%systemroot%\\SysWOW64\\msacm32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado25.tlb", NULL},
    {L"wmsado25.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado25.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado26.tlb", NULL},
    {L"wmsado26.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado26.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\msafd.dll", NULL},
    {L"wmsafd.dll", L"%systemroot%\\SysWOW64\\msafd.dll", NULL},
    {L"wmsapsspc.dll", L"%systemroot%\\SysWOW64\\msapsspc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msasn1.dll", NULL},
    {L"wmsasn1.dll", L"%systemroot%\\SysWOW64\\msasn1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msaudite.dll", NULL},
    {L"wmsaudite.dll", L"%systemroot%\\SysWOW64\\msaudite.dll", NULL},
    {NULL, L"%systemroot%\\ime\\mscandui.dll", NULL},
    {L"wmscandui.dll", L"%systemroot%\\ime (x86)\\mscandui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mscat32.dll", NULL},
    {L"wmscat32.dll", L"%systemroot%\\SysWOW64\\mscat32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msclus.dll", NULL},
    {L"wmsclus.dll", L"%systemroot%\\SysWOW64\\msclus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mscms.dll", NULL},
    {L"wmscms.dll", L"%systemroot%\\SysWOW64\\mscms.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\msconfig.exe", NULL},
    {L"wmscpx32r.dLL", L"%systemroot%\\SysWOW64\\mscpx32r.dLL", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTF.dll", NULL},
    {L"wMSCTF.dll", L"%systemroot%\\SysWOW64\\MSCTF.dll", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTFIME.IME", NULL},
    {L"wMSCTFIME.IME", L"%systemroot%\\SysWOW64\\MSCTFIME.IME", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTFP.dll", NULL},
    {L"wMSCTFP.dll", L"%systemroot%\\SysWOW64\\MSCTFP.dll", NULL},
    {L"wmsdaorar.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaorar.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdart.dll", NULL},
    {L"wmsdart.dll", L"%systemroot%\\SysWOW64\\msdart.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdatl3.dll", NULL},
    {L"wmsdatl3.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdatl3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdmo.dll", NULL},
    {L"wmsdmo.dll", L"%systemroot%\\SysWOW64\\msdmo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msdtclog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtcprx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\msdtcstp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtctm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtcuiu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdvbnp.ax", NULL},
    {L"wmsdvbnp.ax", L"%systemroot%\\SysWOW64\\msdvbnp.ax", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msftedit.dll", NULL},
    {L"wmsftedit.dll", L"%systemroot%\\SysWOW64\\msftedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msgina.dll", NULL},
    {L"wmsgina.dll", L"%systemroot%\\SysWOW64\\msgina.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msgpc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msgsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshta.exe", NULL},
    {L"wmshta.exe", L"%systemroot%\\SysWOW64\\mshta.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mshtml.dll", NULL},
    {L"wmshtml.dll", L"%systemroot%\\SysWOW64\\mshtml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshtml.tlb", NULL},
    {L"wmshtml.tlb", L"%systemroot%\\SysWOW64\\mshtml.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mshtmled.dll", NULL},
    {L"wmshtmled.dll", L"%systemroot%\\SysWOW64\\mshtmled.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshtmler.dll", NULL},
    {L"wmshtmler.dll", L"%systemroot%\\SysWOW64\\mshtmler.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msi.dll", NULL},
    {L"wmsi.dll", L"%systemroot%\\SysWOW64\\msi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msident.dll", NULL},
    {L"wmsident.dll", L"%systemroot%\\SysWOW64\\msident.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msidle.dll", NULL},
    {L"wmsidle.dll", L"%systemroot%\\SysWOW64\\msidle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msidntld.dll", NULL},
    {L"wmsidntld.dll", L"%systemroot%\\SysWOW64\\msidntld.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msieftp.dll", NULL},
    {L"wmsieftp.dll", L"%systemroot%\\SysWOW64\\msieftp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msiexec.exe", NULL},
    {L"wmsiexec.exe", L"%systemroot%\\SysWOW64\\msiexec.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msihnd.dll", NULL},
    {L"wmsihnd.dll", L"%systemroot%\\SysWOW64\\msihnd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msimg32.dll", NULL},
    {L"wmsimg32.dll", L"%systemroot%\\SysWOW64\\msimg32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msimn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msimsg.dll", NULL},
    {L"wmsimsg.dll", L"%systemroot%\\SysWOW64\\msimsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\MSIMTF.dll", NULL},
    {L"wMSIMTF.dll", L"%systemroot%\\SysWOW64\\MSIMTF.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\msinfo.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\MSInfo\\msinfo32.exe", NULL},
    {L"wmsinfo32.exe", L"%commonprogramfiles(x86)%\\Microsoft Shared\\MSInfo\\msinfo32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\msiprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msir3jp.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\msir3jp.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\msiregmv.exe", NULL},
    {L"wmsiregmv.exe", L"%systemroot%\\SysWOW64\\msiregmv.exe", NULL},
    {L"wmsisam11.dll", L"%systemroot%\\SysWOW64\\msisam11.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msisip.dll", NULL},
    {L"wmsisip.dll", L"%systemroot%\\SysWOW64\\msisip.dll", NULL},
    {L"wmsjetol1.dll", L"%systemroot%\\SysWOW64\\msjetoledb40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mskssrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mslbui.dll", NULL},
    {L"wmslbui.dll", L"%systemroot%\\SysWOW64\\mslbui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msls31.dll", NULL},
    {L"wmsls31.dll", L"%systemroot%\\SysWOW64\\msls31.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\mslwvtts.dll", NULL},
    {L"wmslwvtts.dll", L"%systemroot%\\msagent\\mslwvtts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msmpu401.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\msmqocm.dll", NULL},
    {L"wmsnetobj.dll", L"%systemroot%\\SysWOW64\\msnetobj.dll", NULL},
    {L"wmsnsspc.dll", L"%systemroot%\\SysWOW64\\msnsspc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msobjs.dll", NULL},
    {L"wmsobjs.dll", L"%systemroot%\\SysWOW64\\msobjs.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msoe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msoeacct.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msoeres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msoert2.dll", NULL},
    {L"wmsorc32r.dll", L"%systemroot%\\SysWOW64\\msorc32r.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mspaint.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mspatcha.dll", NULL},
    {L"wmspatcha.dll", L"%systemroot%\\SysWOW64\\mspatcha.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mspclock.sys", NULL},
    {L"wmspmsp.dll", L"%systemroot%\\SysWOW64\\mspmsp.dll", NULL},
    {L"wmspmspsv.dll", L"%systemroot%\\SysWOW64\\mspmspsv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msports.dll", NULL},
    {L"wmsports.dll", L"%systemroot%\\SysWOW64\\msports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppalrt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppcnfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msppcntr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mspplkrh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppmalr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppmd5.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppnxus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mspqm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msprivs.dll", NULL},
    {L"wmsprivs.dll", L"%systemroot%\\SysWOW64\\msprivs.dll", NULL},
    {L"wmsr2c.dll", L"%systemroot%\\SysWOW64\\msr2c.dll", NULL},
    {L"wmsr2cenu.dll", L"%systemroot%\\SysWOW64\\msr2cenu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msratelc.dll", NULL},
    {L"wmsratelc.dll", L"%systemroot%\\SysWOW64\\msratelc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msrating.dll", NULL},
    {L"wmsrating.dll", L"%systemroot%\\SysWOW64\\msrating.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msrle32.dll", NULL},
    {L"wmsrle32.dll", L"%systemroot%\\SysWOW64\\msrle32.dll", NULL},
    {L"bhp008.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\MSRPC.DLL", NULL},
    {L"wmsscds32.ax", L"%systemroot%\\SysWOW64\\msscds32.ax", NULL},
    {L"wmsscp.dll", L"%systemroot%\\SysWOW64\\msscp.dll", NULL},
    {L"wmsscript.ocx", L"%systemroot%\\SysWOW64\\msscript.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\mssign32.dll", NULL},
    {L"wmssign32.dll", L"%systemroot%\\SysWOW64\\mssign32.dll", NULL},
    {L"wmssoap1.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\mssoap1.dll", NULL},
    {L"wmssoapr.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\Resources\\1033\\mssoapr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msswch.dll", NULL},
    {L"wmsswch.dll", L"%systemroot%\\SysWOW64\\msswch.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msswchx.exe", NULL},
    {L"wmsswchx.exe", L"%systemroot%\\SysWOW64\\msswchx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstask.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\MSTEE.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mstime.dll", NULL},
    {L"wmstime.dll", L"%systemroot%\\SysWOW64\\mstime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstlsapi.dll", NULL},
    {L"wmstlsapi.dll", L"%systemroot%\\SysWOW64\\mstlsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstscax.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsmhst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsmmc.dll", NULL},
    {L"wmsuni11.dll", L"%systemroot%\\SysWOW64\\msuni11.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msutb.dll", NULL},
    {L"wmsutb.dll", L"%systemroot%\\SysWOW64\\msutb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msv1_0.dll", NULL},
    {L"wmsv1_0.dll", L"%systemroot%\\SysWOW64\\msv1_0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcirt.dll", NULL},
    {L"wmsvcirt.dll", L"%systemroot%\\SysWOW64\\msvcirt.dll", NULL},
    {L"wmsvcp50.dll", L"%systemroot%\\SysWOW64\\msvcp50.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcp60.dll", NULL},
    {L"wmsvcp60.dll", L"%systemroot%\\SysWOW64\\msvcp60.dll", NULL},
    {L"wmsvcrt20.dll", L"%systemroot%\\SysWOW64\\msvcrt20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvfw32.dll", NULL},
    {L"wmsvfw32.dll", L"%systemroot%\\SysWOW64\\msvfw32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvidc32.dll", NULL},
    {L"wmsvidc32.dll", L"%systemroot%\\SysWOW64\\msvidc32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvidctl.dll", NULL},
    {L"wmsvidctl.dll", L"%systemroot%\\SysWOW64\\msvidctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvideo.dll", NULL},
    {L"wmsvideo.dll", L"%systemroot%\\SysWOW64\\msvideo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msw3prt.dll", NULL},
    {L"wmsw3prt.dll", L"%systemroot%\\SysWOW64\\msw3prt.dll", NULL},
    {L"wmswebdvd.dll", L"%systemroot%\\SysWOW64\\mswebdvd.dll", NULL},
    {L"wmswmdm.dll", L"%systemroot%\\SysWOW64\\mswmdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mswsock.dll", NULL},
    {L"wmswsock.dll", L"%systemroot%\\SysWOW64\\mswsock.dll", NULL},
    {L"wmsxml.dll", L"%systemroot%\\SysWOW64\\msxml.dll", NULL},
    {L"wmsxml2.dll", L"%systemroot%\\SysWOW64\\msxml2.dll", NULL},
    {L"wmsxml2r.dll", L"%systemroot%\\SysWOW64\\msxml2r.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxml3.dll", NULL},
    {L"wmsxml3.dll", L"%systemroot%\\SysWOW64\\msxml3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxml3r.dll", NULL},
    {L"wmsxml3r.dll", L"%systemroot%\\SysWOW64\\msxml3r.dll", NULL},
    {L"wmsxmlr.dll", L"%systemroot%\\SysWOW64\\msxmlr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxs64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msyuv.dll", NULL},
    {L"wmsyuv.dll", L"%systemroot%\\SysWOW64\\msyuv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\mtsadmin.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mtstocom.exe", NULL},
    {L"wmtstocom.exe", L"%systemroot%\\SysWOW64\\mtstocom.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mtxclu.dll", NULL},
    {L"wmtxclu.dll", L"%systemroot%\\SysWOW64\\mtxclu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxoci.dll", NULL},
    {NULL, L"%systemroot%\\mui\\muisetup.exe", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\multibox.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\mup.sys", NULL},
    {L"wmxicfg.dll", L"%systemroot%\\SysWOW64\\mxicfg.dll", NULL},
    {L"wmxport.dll", L"%systemroot%\\SysWOW64\\mxport.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mycomput.dll", NULL},
    {L"wmycomput.dll", L"%systemroot%\\SysWOW64\\mycomput.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mydocs.dll", NULL},
    {L"wmydocs.dll", L"%systemroot%\\SysWOW64\\mydocs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mys.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Namespace.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\napmmc.dll", NULL},
    {L"wnapmmc.dll", L"%systemroot%\\SysWOW64\\napmmc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\narrator.exe", NULL},
    {L"wnarrator.exe", L"%systemroot%\\SysWOW64\\narrator.exe", NULL},
    {NULL, L"%systemroot%\\system32\\narrhook.dll", NULL},
    {L"wnarrhook.dll", L"%systemroot%\\SysWOW64\\narrhook.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nbtstat.exe", NULL},
    {L"wnbtstat.exe", L"%systemroot%\\SysWOW64\\nbtstat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ncobjapi.dll", NULL},
    {L"wncobjapi.dll", L"%systemroot%\\SysWOW64\\ncobjapi.dll", NULL},
    {L"bhp009.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\NCP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\ncpa.cpl", NULL},
    {L"wncpa.cpl", L"%systemroot%\\SysWOW64\\ncpa.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\ncprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nddeapi.dll", NULL},
    {L"wnddeapi.dll", L"%systemroot%\\SysWOW64\\nddeapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nddeapir.exe", NULL},
    {L"wnddeapir.exe", L"%systemroot%\\SysWOW64\\nddeapir.exe", NULL},
    {NULL, L"%systemroot%\\system32\\nddenb32.dll", NULL},
    {L"wnddenb32.dll", L"%systemroot%\\SysWOW64\\nddenb32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndis.sys", NULL},
    {NULL, L"%systemroot%\\system32\\npp\\ndisnpp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndistapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndisuio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndproxy.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ndptsp.tsp", NULL},
    {L"wndptsp.tsp", L"%systemroot%\\SysWOW64\\ndptsp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ne2000.sys", NULL},
    {NULL, L"%systemroot%\\system32\\net.exe", NULL},
    {L"wnet.exe", L"%systemroot%\\SysWOW64\\net.exe", NULL},
    {NULL, L"%systemroot%\\system32\\net1.exe", NULL},
    {L"wnet1.exe", L"%systemroot%\\SysWOW64\\net1.exe", NULL},
    {L"wnetapi.dll", L"%systemroot%\\SysWOW64\\netapi.dll", NULL},
    {L"bhp010.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\NETBIOS.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\netbios.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\netbt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\netcfgx.dll", NULL},
    {L"wnetcfgx.dll", L"%systemroot%\\SysWOW64\\netcfgx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netdde.exe", NULL},
    {L"wnetdde.exe", L"%systemroot%\\SysWOW64\\netdde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netevent.dll", NULL},
    {L"wnetevent.dll", L"%systemroot%\\SysWOW64\\netevent.dll", NULL},
    {NULL, L"%systemroot%\\system32\\neth.dll", NULL},
    {L"wneth.dll", L"%systemroot%\\SysWOW64\\neth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netid.dll", NULL},
    {L"wnetid.dll", L"%systemroot%\\SysWOW64\\netid.dll", NULL},
    {L"bhp011.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\netlogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netlogon.dll", NULL},
    {L"wnetlogon.dll", L"%systemroot%\\SysWOW64\\netlogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\netmon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netmsg.dll", NULL},
    {L"wnetmsg.dll", L"%systemroot%\\SysWOW64\\netmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\netoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netplwiz.dll", NULL},
    {L"wnetplwiz.dll", L"%systemroot%\\SysWOW64\\netplwiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netrap.dll", NULL},
    {L"wnetrap.dll", L"%systemroot%\\SysWOW64\\netrap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netsh.exe", NULL},
    {L"wnetsh.exe", L"%systemroot%\\SysWOW64\\netsh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netshell.dll", NULL},
    {L"wnetshell.dll", L"%systemroot%\\SysWOW64\\netshell.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netstat.exe", NULL},
    {L"wnetstat.exe", L"%systemroot%\\SysWOW64\\netstat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netui0.dll", NULL},
    {L"wnetui0.dll", L"%systemroot%\\SysWOW64\\netui0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netui1.dll", NULL},
    {L"wnetui1.dll", L"%systemroot%\\SysWOW64\\netui1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netui2.dll", NULL},
    {L"wnetui2.dll", L"%systemroot%\\SysWOW64\\netui2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\newdev.dll", NULL},
    {L"wnewdev.dll", L"%systemroot%\\SysWOW64\\newdev.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\NEXTLINK.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\nfrd960.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nic1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\nlb.exe", NULL},
    {L"wnlb.exe", L"%systemroot%\\SysWOW64\\nlb.exe", NULL},
    {NULL, L"%systemroot%\\system32\\nlbmgr.exe", NULL},
    {L"wnlbmgr.exe", L"%systemroot%\\SysWOW64\\nlbmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\nlbmprov.dll", NULL},
    {L"wnlbmprov.dll", L"%systemroot%\\SysWOW64\\wbem\\nlbmprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nlhtml.dll", NULL},
    {L"wnlhtml.dll", L"%systemroot%\\SysWOW64\\nlhtml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\nmapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nmnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\nmsupp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nntpapi.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\nntpctrs.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpfs.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpsvc.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\notepad.exe", NULL},
    {L"wnotepad.exe", L"%systemroot%\\SysWOW64\\notepad.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\npfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\npp\\nppagent.exe", NULL},
    {NULL, L"%systemroot%\\system32\\npptools.dll", NULL},
    {L"wnpptools.dll", L"%systemroot%\\SysWOW64\\npptools.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nshipsec.dll", NULL},
    {L"wnshipsec.dll", L"%systemroot%\\SysWOW64\\nshipsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nslookup.exe", NULL},
    {L"wnslookup.exe", L"%systemroot%\\SysWOW64\\nslookup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nsmmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\nsneterr.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\ntbackup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsapi.dll", NULL},
    {L"wntdsapi.dll", L"%systemroot%\\SysWOW64\\ntdsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsatq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsbcli.dll", NULL},
    {L"wntdsbcli.dll", L"%systemroot%\\SysWOW64\\ntdsbcli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsbmsg.dll", NULL},
    {L"wntdsbmsg.dll", L"%systemroot%\\SysWOW64\\ntdsbmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsbsrv.dll", NULL},
    {L"wntdsbsrv.dll", L"%systemroot%\\SysWOW64\\ntdsbsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsetup.dll", NULL},
    {L"wntdsetup.dll", L"%systemroot%\\SysWOW64\\ntdsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdskcc.dll", NULL},
    {L"wntdskcc.dll", L"%systemroot%\\SysWOW64\\ntdskcc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsmsg.dll", NULL},
    {L"wntdsmsg.dll", L"%systemroot%\\SysWOW64\\ntdsmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsperf.dll", NULL},
    {L"wntdsperf.dll", L"%systemroot%\\SysWOW64\\ntdsperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsutil.exe", NULL},
    {L"wntdsutil.exe", L"%systemroot%\\SysWOW64\\ntdsutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\ntevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrs.exe", NULL},
    {L"wntfrs.exe", L"%systemroot%\\SysWOW64\\ntfrs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrsapi.dll", NULL},
    {L"wntfrsapi.dll", L"%systemroot%\\SysWOW64\\ntfrsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrsprf.dll", NULL},
    {L"wntfrsprf.dll", L"%systemroot%\\SysWOW64\\ntfrsprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrsres.dll", NULL},
    {L"wntfrsres.dll", L"%systemroot%\\SysWOW64\\ntfrsres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ntfsdrv.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\ntlanman.dll", NULL},
    {L"wntlanman.dll", L"%systemroot%\\SysWOW64\\ntlanman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlanui.dll", NULL},
    {L"wntlanui.dll", L"%systemroot%\\SysWOW64\\ntlanui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlanui2.dll", NULL},
    {L"wntlanui2.dll", L"%systemroot%\\SysWOW64\\ntlanui2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlsapi.dll", NULL},
    {L"wntlsapi.dll", L"%systemroot%\\SysWOW64\\ntlsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmarta.dll", NULL},
    {L"wntmarta.dll", L"%systemroot%\\SysWOW64\\ntmarta.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsapi.dll", NULL},
    {L"wntmsapi.dll", L"%systemroot%\\SysWOW64\\ntmsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsdba.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\ntoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntprint.dll", NULL},
    {L"wntprint.dll", L"%systemroot%\\SysWOW64\\ntprint.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntsd.exe", NULL},
    {L"wntsd.exe", L"%systemroot%\\SysWOW64\\ntsd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntshrui.dll", NULL},
    {L"wntshrui.dll", L"%systemroot%\\SysWOW64\\ntshrui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntvdm64.dll", NULL},
    {L"wntvdm64.dll", L"%systemroot%\\SysWOW64\\ntvdm64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\null.sys", NULL},
    {NULL, L"%systemroot%\\system32\\oakley.dll", NULL},
    {L"woakley.dll", L"%systemroot%\\SysWOW64\\oakley.dll", NULL},
    {NULL, L"%systemroot%\\system32\\objsel.dll", NULL},
    {L"wobjsel.dll", L"%systemroot%\\SysWOW64\\objsel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\occache.dll", NULL},
    {L"woccache.dll", L"%systemroot%\\SysWOW64\\occache.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\ocgen.dll", NULL},
    {L"wodbc16gt.dll", L"%systemroot%\\SysWOW64\\odbc16gt.dll", NULL},
    {L"wodbcp32r.dll", L"%systemroot%\\SysWOW64\\odbcp32r.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oeimport.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oemig50.exe", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oemiglib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\offfilt.dll", NULL},
    {L"wofffilt.dll", L"%systemroot%\\SysWOW64\\offfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ohci1394.sys", NULL},
    {L"wole2.dll", L"%systemroot%\\SysWOW64\\ole2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleacc.dll", NULL},
    {L"woleacc.dll", L"%systemroot%\\SysWOW64\\oleacc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleaccrc.dll", NULL},
    {L"woleaccrc.dll", L"%systemroot%\\SysWOW64\\oleaccrc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olecli32.dll", NULL},
    {L"wolecli32.dll", L"%systemroot%\\SysWOW64\\olecli32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olecnv32.dll", NULL},
    {L"wolecnv32.dll", L"%systemroot%\\SysWOW64\\olecnv32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oledlg.dll", NULL},
    {L"woledlg.dll", L"%systemroot%\\SysWOW64\\oledlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleprn.dll", NULL},
    {L"woleprn.dll", L"%systemroot%\\SysWOW64\\oleprn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olesvr32.dll", NULL},
    {L"wolesvr32.dll", L"%systemroot%\\SysWOW64\\olesvr32.dll", NULL},
    {L"wolethk32.dll", L"%systemroot%\\SysWOW64\\olethk32.dll", NULL},
    {L"opnfiles.exe", L"%systemroot%\\system32\\openfiles.exe", NULL},
    {NULL, L"%systemroot%\\system32\\opengl32.dll", NULL},
    {L"wopengl32.dll", L"%systemroot%\\SysWOW64\\opengl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\oprghdlr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\osk.exe", NULL},
    {L"wosk.exe", L"%systemroot%\\SysWOW64\\osk.exe", NULL},
    {L"wospf.dll", L"%systemroot%\\SysWOW64\\ospf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ospfagnt.dll", NULL},
    {L"wospfagnt.dll", L"%systemroot%\\SysWOW64\\ospfagnt.dll", NULL},
    {L"wospfmib.dll", L"%systemroot%\\SysWOW64\\ospfmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\osuninst.dll", NULL},
    {L"wosuninst.dll", L"%systemroot%\\SysWOW64\\osuninst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\P3Admin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\P3Store.dll", NULL},
    {NULL, L"%systemroot%\\system32\\packager.exe", NULL},
    {L"wpackager.exe", L"%systemroot%\\SysWOW64\\packager.exe", NULL},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\PADRS404.DLL", L"intl.inf"},
    {L"wPADRS404.DLL", L"%systemroot%\\ime (x86)\\SHARED\\RES\\PADRS404.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs411.dll", L"intl.inf"},
    {L"wpadrs411.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs411.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs412.dll", L"intl.inf"},
    {L"wpadrs412.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs412.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs804.dll", L"intl.inf"},
    {L"wpadrs804.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs804.dll", L"intl.inf"},
    {L"pagefile.vbs", L"%systemroot%\\system32\\pagefileconfig.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\panmap.dll", NULL},
    {L"wpanmap.dll", L"%systemroot%\\SysWOW64\\panmap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\parser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\partmgr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\pathping.exe", NULL},
    {L"wpathping.exe", L"%systemroot%\\SysWOW64\\pathping.exe", NULL},
    {NULL, L"%systemroot%\\system32\\pautoenr.dll", NULL},
    {L"wpautoenr.dll", L"%systemroot%\\SysWOW64\\pautoenr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\pbsnetoc.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\pchshell.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\pchsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pciide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pciidex.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pcmcia.sys", NULL},
    {NULL, L"%systemroot%\\system32\\pdh.dll", NULL},
    {L"wpdh.dll", L"%systemroot%\\SysWOW64\\pdh.dll", NULL},
    {L"wpentnt.exe", L"%systemroot%\\SysWOW64\\pentnt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\perfctrs.dll", NULL},
    {L"wperfctrs.dll", L"%systemroot%\\SysWOW64\\perfctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfdisk.dll", NULL},
    {L"wperfdisk.dll", L"%systemroot%\\SysWOW64\\perfdisk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfmon.exe", NULL},
    {L"wperfmon.exe", L"%systemroot%\\SysWOW64\\perfmon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\perfnet.dll", NULL},
    {L"wperfnet.dll", L"%systemroot%\\SysWOW64\\perfnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfos.dll", NULL},
    {L"wperfos.dll", L"%systemroot%\\SysWOW64\\perfos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfproc.dll", NULL},
    {L"wperfproc.dll", L"%systemroot%\\SysWOW64\\perfproc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfts.dll", NULL},
    {L"wperfts.dll", L"%systemroot%\\SysWOW64\\perfts.dll", NULL},
    {L"bhp046.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\pgmparser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\PhilDec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\phon.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\photowiz.dll", NULL},
    {L"wphotowiz.dll", L"%systemroot%\\SysWOW64\\photowiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pid.dll", NULL},
    {L"wpid.dll", L"%systemroot%\\SysWOW64\\pid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pidgen.dll", NULL},
    {L"wpidgen.dll", L"%systemroot%\\SysWOW64\\pidgen.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pifmgr.dll", NULL},
    {L"wpifmgr.dll", L"%systemroot%\\SysWOW64\\pifmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ping.exe", NULL},
    {L"wping.exe", L"%systemroot%\\SysWOW64\\ping.exe", NULL},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSA.DLL", L"intl.inf"},
    {L"wPINTLCSA.DLL", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSA.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSD.DIC", L"intl.inf"},
    {L"wPINTLCSD.DIC", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSD.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSD.DLL", L"intl.inf"},
    {L"wPINTLCSD.DLL", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSD.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSK.DIC", L"intl.inf"},
    {L"wPINTLCSK.DIC", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSK.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGD.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGDX.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGI.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGIX.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\PINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGR.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLPHR.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\pjlmon.dll", NULL},
    {L"wpjlmon.dll", L"%systemroot%\\SysWOW64\\pjlmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\plasmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\PlaylistTransformPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\plugin.ocx", NULL},
    {L"wplugin.ocx", L"%systemroot%\\SysWOW64\\plugin.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PMIGRATE.DLL", L"intl.inf"},
    {L"wpmspl.dll", L"%systemroot%\\SysWOW64\\pmspl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pngfilt.dll", NULL},
    {L"wpngfilt.dll", L"%systemroot%\\SysWOW64\\pngfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pnrmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\policman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\polstore.dll", NULL},
    {L"wpolstore.dll", L"%systemroot%\\SysWOW64\\polstore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\Pop3Auth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\Pop3evt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\pop3oc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\pop3perf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\pop3snap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\POP3Svc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\portcls.sys", NULL},
    {NULL, L"%systemroot%\\system32\\powercfg.cpl", NULL},
    {L"wpowercfg.cpl", L"%systemroot%\\SysWOW64\\powercfg.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\powercfg.exe", NULL},
    {L"wpowercfg.exe", L"%systemroot%\\SysWOW64\\powercfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\powerfil.sys", NULL},
    {NULL, L"%systemroot%\\system32\\powrprof.dll", NULL},
    {L"wpowrprof.dll", L"%systemroot%\\SysWOW64\\powrprof.dll", NULL},
    {L"bhp012.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\PPP.DLL", NULL},
    {L"nmpppoe.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\PPPOE.dll", NULL},
    {NULL, L"%systemroot%\\system32\\prc.nls", NULL},
    {NULL, L"%systemroot%\\system32\\prcp.nls", NULL},
    {NULL, L"%systemroot%\\system32\\prflbmsg.dll", NULL},
    {L"wprflbmsg.dll", L"%systemroot%\\SysWOW64\\prflbmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\print.exe", NULL},
    {L"wprint.exe", L"%systemroot%\\SysWOW64\\print.exe", NULL},
    {NULL, L"%systemroot%\\system32\\printui.dll", NULL},
    {L"wprintui.dll", L"%systemroot%\\SysWOW64\\printui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\prncnfg.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prndrvr.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnjobs.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnmngr.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnport.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnqctl.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\processr.sys", NULL},
    {L"wproctexe.ocx", L"%systemroot%\\SysWOW64\\proctexe.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\profmap.dll", NULL},
    {L"wprofmap.dll", L"%systemroot%\\SysWOW64\\profmap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\progman.exe", NULL},
    {L"wprogman.exe", L"%systemroot%\\SysWOW64\\progman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\proquota.exe", NULL},
    {L"wproquota.exe", L"%systemroot%\\SysWOW64\\proquota.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\provthrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\proxycfg.exe", NULL},
    {L"wproxycfg.exe", L"%systemroot%\\SysWOW64\\proxycfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\psapi.dll", NULL},
    {L"wpsapi.dll", L"%systemroot%\\SysWOW64\\psapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\psbase.dll", NULL},
    {L"wpsbase.dll", L"%systemroot%\\SysWOW64\\psbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pschdprf.dll", NULL},
    {L"wpschdprf.dll", L"%systemroot%\\SysWOW64\\pschdprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\psched.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pscr.sys", NULL},
    {L"wpsisdecd.dll", L"%systemroot%\\SysWOW64\\psisdecd.dll", NULL},
    {L"wpsisrndr.ax", L"%systemroot%\\SysWOW64\\psisrndr.ax", NULL},
    {NULL, L"%systemroot%\\system32\\psnppagn.dll", NULL},
    {L"wpsnppagn.dll", L"%systemroot%\\SysWOW64\\psnppagn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pstorec.dll", NULL},
    {L"wpstorec.dll", L"%systemroot%\\SysWOW64\\pstorec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pstorsvc.dll", NULL},
    {L"wpstorsvc.dll", L"%systemroot%\\SysWOW64\\pstorsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ptilink.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ptpusd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pubprn.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\pwdssp.dll", NULL},
    {L"wpwdssp.dll", L"%systemroot%\\SysWOW64\\pwdssp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qappsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\qasf.dll", NULL},
    {L"wqasf.dll", L"%systemroot%\\SysWOW64\\qasf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qcap.dll", NULL},
    {L"wqcap.dll", L"%systemroot%\\SysWOW64\\qcap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qdv.dll", NULL},
    {L"wqdv.dll", L"%systemroot%\\SysWOW64\\qdv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qdvd.dll", NULL},
    {L"wqdvd.dll", L"%systemroot%\\SysWOW64\\qdvd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qedit.dll", NULL},
    {L"wqedit.dll", L"%systemroot%\\SysWOW64\\qedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qedwipes.dll", NULL},
    {L"wqedwipes.dll", L"%systemroot%\\SysWOW64\\qedwipes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qic157.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1080.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql10wnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql12160.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1240.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1280.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql2100.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql2200.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql2300.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qlstrmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\qmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qmgrprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qntmmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\qosname.dll", NULL},
    {L"wqosname.dll", L"%systemroot%\\SysWOW64\\qosname.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qprocess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\quartz.dll", NULL},
    {L"wquartz.dll", L"%systemroot%\\SysWOW64\\quartz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\query.dll", NULL},
    {L"wquery.dll", L"%systemroot%\\SysWOW64\\query.dll", NULL},
    {NULL, L"%systemroot%\\system32\\query.exe", NULL},
    {NULL, L"%systemroot%\\system32\\quick.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\quser.exe", NULL},
    {NULL, L"%systemroot%\\system32\\qwinsta.exe", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\Lexicon\\1033\\r1033tts.lxa", NULL},
    {NULL, L"%systemroot%\\system32\\racpldlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ramdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rasacd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasadhlp.dll", NULL},
    {L"wrasadhlp.dll", L"%systemroot%\\SysWOW64\\rasadhlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasapi32.dll", NULL},
    {L"wrasapi32.dll", L"%systemroot%\\SysWOW64\\rasapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasauto.dll", NULL},
    {L"wrasauto.dll", L"%systemroot%\\SysWOW64\\rasauto.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasautou.exe", NULL},
    {L"wrasautou.exe", L"%systemroot%\\SysWOW64\\rasautou.exe", NULL},
    {NULL, L"%systemroot%\\system32\\raschap.dll", NULL},
    {L"wraschap.dll", L"%systemroot%\\SysWOW64\\raschap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasctrs.dll", NULL},
    {L"wrasctrs.dll", L"%systemroot%\\SysWOW64\\rasctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasdial.exe", NULL},
    {L"wrasdial.exe", L"%systemroot%\\SysWOW64\\rasdial.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rasdlg.dll", NULL},
    {L"wrasdlg.dll", L"%systemroot%\\SysWOW64\\rasdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rasl2tp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasman.dll", NULL},
    {L"wrasman.dll", L"%systemroot%\\SysWOW64\\rasman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmans.dll", NULL},
    {L"wrasmans.dll", L"%systemroot%\\SysWOW64\\rasmans.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmontr.dll", NULL},
    {L"wrasmontr.dll", L"%systemroot%\\SysWOW64\\rasmontr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmxs.dll", NULL},
    {L"wrasmxs.dll", L"%systemroot%\\SysWOW64\\rasmxs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasphone.exe", NULL},
    {L"wrasphone.exe", L"%systemroot%\\SysWOW64\\rasphone.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rasppp.dll", NULL},
    {L"wrasppp.dll", L"%systemroot%\\SysWOW64\\rasppp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspppoe.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspptp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspti.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasrad.dll", NULL},
    {L"wrasrad.dll", L"%systemroot%\\SysWOW64\\rasrad.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rassapi.dll", NULL},
    {L"wrassapi.dll", L"%systemroot%\\SysWOW64\\rassapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasser.dll", NULL},
    {L"wrasser.dll", L"%systemroot%\\SysWOW64\\rasser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rassfm.dll", NULL},
    {L"wrassfm.dll", L"%systemroot%\\SysWOW64\\rassfm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rastapi.dll", NULL},
    {L"wrastapi.dll", L"%systemroot%\\SysWOW64\\rastapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rastls.dll", NULL},
    {L"wrastls.dll", L"%systemroot%\\SysWOW64\\rastls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasuser.dll", NULL},
    {L"wrasuser.dll", L"%systemroot%\\SysWOW64\\rasuser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rawwan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\RemInst\\rbfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rcancel.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\rcbdyctl.dll", NULL},
    {L"wrcbdyctl.dll", L"%systemroot%\\SysWOW64\\rcbdyctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rcimlby.exe", NULL},
    {L"wrcimlby.exe", L"%systemroot%\\SysWOW64\\rcimlby.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rcp.exe", NULL},
    {L"wrcp.exe", L"%systemroot%\\SysWOW64\\rcp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdbss.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdchost.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpcdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpcfgex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rdpclip.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rdpdd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpdr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpsnd.dll", NULL},
    {L"wrdpsnd.dll", L"%systemroot%\\SysWOW64\\rdpsnd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpwd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpwsx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rdsaddin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rdshost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\recover.exe", NULL},
    {L"wrecover.exe", L"%systemroot%\\SysWOW64\\recover.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\redbook.sys", NULL},
    {NULL, L"%systemroot%\\system32\\reg.exe", NULL},
    {L"wreg.exe", L"%systemroot%\\SysWOW64\\reg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regapi.dll", NULL},
    {L"wregapi.dll", L"%systemroot%\\SysWOW64\\regapi.dll", NULL},
    {NULL, L"%systemroot%\\regedit.exe", NULL},
    {L"wregedit.exe", L"%systemroot%\\SysWOW64\\regedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regedt32.exe", NULL},
    {L"wregedt32.exe", L"%systemroot%\\SysWOW64\\regedt32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\regfilt.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\regini.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regsvc.dll", NULL},
    {L"wregsvc.dll", L"%systemroot%\\SysWOW64\\regsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\regsvr32.exe", NULL},
    {L"wregsvr32.exe", L"%systemroot%\\SysWOW64\\regsvr32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regtrace.exe", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\regwiz.exe", NULL},
    {L"wregwiz.exe", L"%systemroot%\\SysWOW64\\regwiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regwizc.dll", NULL},
    {L"wregwizc.dll", L"%systemroot%\\SysWOW64\\regwizc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\relog.exe", NULL},
    {L"wrelog.exe", L"%systemroot%\\SysWOW64\\relog.exe", NULL},
    {NULL, L"%systemroot%\\system32\\remotepg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\remotesp.tsp", NULL},
    {L"wremotesp.tsp", L"%systemroot%\\SysWOW64\\remotesp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\remrras.exe", NULL},
    {L"wremrras.exe", L"%systemroot%\\SysWOW64\\remrras.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rend.dll", NULL},
    {L"wrend.dll", L"%systemroot%\\SysWOW64\\rend.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\repdrvfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\replace.exe", NULL},
    {L"wreplace.exe", L"%systemroot%\\SysWOW64\\replace.exe", NULL},
    {NULL, L"%systemroot%\\system32\\replprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\reset.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\ResrcMon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\resutils.dll", NULL},
    {L"wresutils.dll", L"%systemroot%\\SysWOW64\\resutils.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rexec.exe", NULL},
    {L"wrexec.exe", L"%systemroot%\\SysWOW64\\rexec.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rexpire.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rfeed.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rgroup.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\rigpsnap.dll", NULL},
    {L"wrigpsnap.dll", L"%systemroot%\\SysWOW64\\rigpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ripagnt.dll", NULL},
    {L"wripagnt.dll", L"%systemroot%\\SysWOW64\\ripagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\risetup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\RMCast.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rndismp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rnr20.dll", NULL},
    {L"wrnr20.dll", L"%systemroot%\\SysWOW64\\rnr20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\romanime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\rootmdm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\route.exe", NULL},
    {L"wroute.exe", L"%systemroot%\\SysWOW64\\route.exe", NULL},
    {NULL, L"%systemroot%\\system32\\routemon.exe", NULL},
    {L"wroutemon.exe", L"%systemroot%\\SysWOW64\\routemon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\routetab.dll", NULL},
    {L"wroutetab.dll", L"%systemroot%\\SysWOW64\\routetab.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcns4.dll", NULL},
    {L"wrpcns4.dll", L"%systemroot%\\SysWOW64\\rpcns4.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcnsh.dll", NULL},
    {L"wrpcnsh.dll", L"%systemroot%\\SysWOW64\\rpcnsh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcproxy\\rpcproxy.dll", NULL},
    {L"wrpcproxy.dll", L"%systemroot%\\SysWOW64\\rpcproxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rpcref.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\rpcrt4.dll", NULL},
    {L"wrpcrt4.dll", L"%systemroot%\\SysWOW64\\rpcrt4.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rrasprxy.dll", NULL},
    {L"wrrasprxy.dll", L"%systemroot%\\SysWOW64\\rrasprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rraswiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsAdmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsCli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsCommon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsConn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsEng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsEngPs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rsess.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\rsfilter.sys", NULL},
    {NULL, L"%systemroot%\\system32\\RsFsa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsfsaps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsh.exe", NULL},
    {L"wrsh.exe", L"%systemroot%\\SysWOW64\\rsh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rshx32.dll", NULL},
    {L"wrshx32.dll", L"%systemroot%\\SysWOW64\\rshx32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsIdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsJob.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsLaunch.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsLnk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmmllsv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsMover.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsmps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsmsink.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsnotify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsopprov.exe", NULL},
    {L"wrsopprov.exe", L"%systemroot%\\SysWOW64\\rsopprov.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\rsoptcom.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Rss.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsServ.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsServPs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsShell.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsSub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsSubPs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsTask.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsTore.exe", NULL},
    {L"bhp022.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\RSVP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\RTL39A64.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rtm.dll", NULL},
    {L"wrtm.dll", L"%systemroot%\\SysWOW64\\rtm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtrfiltr.dll", NULL},
    {L"wrtrfiltr.dll", L"%systemroot%\\SysWOW64\\rtrfiltr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtrupg.dll", NULL},
    {L"wrtrupg.dll", L"%systemroot%\\SysWOW64\\rtrupg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtutils.dll", NULL},
    {L"wrtutils.dll", L"%systemroot%\\SysWOW64\\rtutils.dll", NULL},
    {NULL, L"%systemroot%\\system32\\runas.exe", NULL},
    {L"wrunas.exe", L"%systemroot%\\SysWOW64\\runas.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rundll32.exe", NULL},
    {L"wrundll32.exe", L"%systemroot%\\SysWOW64\\rundll32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\runonce.exe", NULL},
    {L"wrunonce.exe", L"%systemroot%\\SysWOW64\\runonce.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rwinsta.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rwnh.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\sacdrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sacsess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sacsvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrcdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrslv.dll", NULL},
    {L"wsainstal.dll", L"%systemroot%\\SysWOW64\\sainstall.dll", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\sam.sdf", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\sam.spd", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapi.cpl", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapi.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapisvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\saport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\savedump.exe", NULL},
    {L"wsavedump.exe", L"%systemroot%\\SysWOW64\\savedump.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sbp2port.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sc.exe", NULL},
    {L"wsc.exe", L"%systemroot%\\SysWOW64\\sc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\scarddlg.dll", NULL},
    {L"wscarddlg.dll", L"%systemroot%\\SysWOW64\\scarddlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scardsvr.exe", NULL},
    {L"wscardsvr.exe", L"%systemroot%\\SysWOW64\\scardsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sccbase.dll", NULL},
    {L"wsccbase.dll", L"%systemroot%\\SysWOW64\\sccbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sccmn50m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sccmusbm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sccsccp.dll", NULL},
    {L"wsccsccp.dll", L"%systemroot%\\SysWOW64\\sccsccp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scecli.dll", NULL},
    {L"wscecli.dll", L"%systemroot%\\SysWOW64\\scecli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scesrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schedsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schmmgmt.dll", NULL},
    {L"wschmmgmt.dll", L"%systemroot%\\SysWOW64\\schmmgmt.dll", NULL},
    {L"sctasks.exe", L"%systemroot%\\system32\\schtasks.exe", NULL},
    {L"wsctasks.exe", L"%systemroot%\\SysWOW64\\schtasks.exe", NULL},
    {NULL, L"%systemroot%\\system32\\schupgr.exe", NULL},
    {L"wschupgr.exe", L"%systemroot%\\SysWOW64\\schupgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sclgntfy.dll", NULL},
    {L"wsclgntfy.dll", L"%systemroot%\\SysWOW64\\sclgntfy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scmstcs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\SCR111.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\scrcons.exe", NULL},
    {NULL, L"%systemroot%\\system32\\scrdenrl.dll", NULL},
    {L"scrdia64.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\ia64\\scrdenrl.dll", NULL},
    {L"scrdw2k.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\w2k\\scrdenrl.dll", NULL},
    {L"scrdx86.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\x86\\scrdenrl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scredir.dll", NULL},
    {L"wscredir.dll", L"%systemroot%\\SysWOW64\\scredir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\scripto.dll", L"ims.inf"},
    {L"wscripto.dll", L"%systemroot%\\SysWOW64\\scripto.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scriptpw.dll", NULL},
    {L"wscriptpw.dll", L"%systemroot%\\SysWOW64\\scriptpw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scrnsave.scr", NULL},
    {NULL, L"%systemroot%\\system32\\scrptutl.dll", NULL},
    {L"wscrptutl.dll", L"%systemroot%\\SysWOW64\\scrptutl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiprnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sdpblb.dll", NULL},
    {L"wsdpblb.dll", L"%systemroot%\\SysWOW64\\sdpblb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\seaddsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\secedit.exe", NULL},
    {L"wsecedit.exe", L"%systemroot%\\SysWOW64\\secedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\seclogon.dll", NULL},
    {L"wseclogon.dll", L"%systemroot%\\SysWOW64\\seclogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\secur32.dll", NULL},
    {L"wsecur32.dll", L"%systemroot%\\SysWOW64\\secur32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\security.dll", NULL},
    {L"wsecurity.dll", L"%systemroot%\\SysWOW64\\security.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sendcmsg.dll", NULL},
    {L"wsendcmsg.dll", L"%systemroot%\\SysWOW64\\sendcmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sendmail.dll", NULL},
    {L"wsendmail.dll", L"%systemroot%\\SysWOW64\\sendmail.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sens.dll", NULL},
    {L"wsens.dll", L"%systemroot%\\SysWOW64\\sens.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sensapi.dll", NULL},
    {L"wsensapi.dll", L"%systemroot%\\SysWOW64\\sensapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\senscfg.dll", NULL},
    {L"wsenscfg.dll", L"%systemroot%\\SysWOW64\\senscfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\seo.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\seos.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\serenum.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\serial.sys", NULL},
    {NULL, L"%systemroot%\\system32\\serialui.dll", NULL},
    {L"wserialui.dll", L"%systemroot%\\SysWOW64\\serialui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sermouse.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\serscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\servdeps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\services.exe", NULL},
    {NULL, L"%systemroot%\\system32\\serwvdrv.dll", NULL},
    {L"wserwvdrv.dll", L"%systemroot%\\SysWOW64\\serwvdrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sessmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sethc.exe", NULL},
    {L"wsethc.exe", L"%systemroot%\\SysWOW64\\sethc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\setup.exe", NULL},
    {L"tscmsi02.w32", L"%systemroot%\\system32\\clients\\tsclient\\win32\\setup.exe", NULL},
    {L"wisetup.exe", L"%systemroot%\\SysWOW64\\InstallShield\\setup.exe", NULL},
    {L"wsetup.exe", L"%systemroot%\\SysWOW64\\setup.exe", NULL},
    {L"wsetup16.exe", L"%systemroot%\\SysWOW64\\setup16.exe", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\setup50.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\setupqry.dll", NULL},
    {NULL, L"%systemroot%\\system32\\setx.exe", NULL},
    {L"wsetx.exe", L"%systemroot%\\SysWOW64\\setx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfc_os.dll", NULL},
    {L"wsfc_os.dll", L"%systemroot%\\SysWOW64\\sfc_os.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfloppy.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmapi.dll", NULL},
    {L"wsfmapi.dll", L"%systemroot%\\SysWOW64\\sfmapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfmatalk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmatmsg.dll", NULL},
    {L"wsfmatmsg.dll", L"%systemroot%\\SysWOW64\\sfmatmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfmctrs.dll", NULL},
    {L"wsfmctrs.dll", L"%systemroot%\\SysWOW64\\sfmctrs.dll", NULL},
    {L"wsfmmon.dll", L"%systemroot%\\SysWOW64\\sfmmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfmmsg.dll", NULL},
    {L"wsfmmsg.dll", L"%systemroot%\\SysWOW64\\sfmmsg.dll", NULL},
    {L"wsfmprint.exe", L"%systemroot%\\SysWOW64\\sfmprint.exe", NULL},
    {L"wsfmpsdib.dll", L"%systemroot%\\SysWOW64\\sfmpsdib.dll", NULL},
    {L"wsfmpsexe.exe", L"%systemroot%\\SysWOW64\\sfmpsexe.exe", NULL},
    {L"wsfmpsfnt.dll", L"%systemroot%\\SysWOW64\\sfmpsfnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfmsrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmsvc.exe", NULL},
    {L"wsfmsvc.exe", L"%systemroot%\\SysWOW64\\sfmsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfmwshat.dll", NULL},
    {L"wsfmwshat.dll", L"%systemroot%\\SysWOW64\\sfmwshat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shadow.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shdoclc.dll", NULL},
    {L"wshdoclc.dll", L"%systemroot%\\SysWOW64\\shdoclc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shdocvw.dll", NULL},
    {L"wshdocvw.dll", L"%systemroot%\\SysWOW64\\shdocvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shell32.dll", NULL},
    {L"wshell32.dll", L"%systemroot%\\SysWOW64\\shell32.dll", NULL},
    {L"class_ss.dll", L"%systemroot%\\system32\\shellstyle.dll", NULL},
    {L"wclass_ss.dll", L"%systemroot%\\SysWOW64\\shellstyle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shfolder.dll", NULL},
    {L"wshfolder.dll", L"%systemroot%\\SysWOW64\\shfolder.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shgina.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shimgvw.dll", NULL},
    {L"wshimgvw.dll", L"%systemroot%\\SysWOW64\\shimgvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shlwapi.dll", NULL},
    {L"wshlwapi.dll", L"%systemroot%\\SysWOW64\\shlwapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shmedia.dll", NULL},
    {L"wshmedia.dll", L"%systemroot%\\SysWOW64\\shmedia.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shmgrate.exe", NULL},
    {L"wshmgrate.exe", L"%systemroot%\\SysWOW64\\shmgrate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shrpubw.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shscrap.dll", NULL},
    {L"wshscrap.dll", L"%systemroot%\\SysWOW64\\shscrap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shsvcs.dll", NULL},
    {L"wshsvcs.dll", L"%systemroot%\\SysWOW64\\shsvcs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shutdown.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sigtab.dll", NULL},
    {L"wsigtab.dll", L"%systemroot%\\SysWOW64\\sigtab.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sigverif.exe", NULL},
    {L"wsigverif.exe", L"%systemroot%\\SysWOW64\\sigverif.exe", NULL},
    {L"wsimpdata.tlb", L"%systemroot%\\SysWOW64\\simpdata.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\simptcp.dll", NULL},
    {L"wsimptcp.dll", L"%systemroot%\\SysWOW64\\simptcp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sis.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sisbkup.dll", NULL},
    {L"wsisbkup.dll", L"%systemroot%\\SysWOW64\\sisbkup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\skdll.dll", NULL},
    {L"wskdll.dll", L"%systemroot%\\SysWOW64\\skdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\skeys.exe", NULL},
    {L"wskeys.exe", L"%systemroot%\\SysWOW64\\skeys.exe", NULL},
    {NULL, L"%systemroot%\\system32\\slbcsp.dll", NULL},
    {L"wslbcsp.dll", L"%systemroot%\\SysWOW64\\slbcsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slbiop.dll", NULL},
    {L"wslbiop.dll", L"%systemroot%\\SysWOW64\\slbiop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slbrccsp.dll", NULL},
    {L"wslbrccsp.dll", L"%systemroot%\\SysWOW64\\slbrccsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\slbs.dll", NULL},
    {L"bhp013.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\SMB.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\smb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\smclib.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smi2smir.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smierrsm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smierrsy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smimsgif.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smlogcfg.dll", NULL},
    {L"wsmlogcfg.dll", L"%systemroot%\\SysWOW64\\smlogcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smlogsvc.exe", NULL},
    {L"wsmlogsvc.exe", L"%systemroot%\\SysWOW64\\smlogsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\smss.exe", NULL},
    {L"wsmss.exe", L"%systemroot%\\SysWOW64\\smss.exe", NULL},
    {NULL, L"%systemroot%\\system32\\smtpapi.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\smtpcons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smtpctrs.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpsvc.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\snapshot.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sndrec32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sndvol32.exe", NULL},
    {NULL, L"%systemroot%\\help\\sniffpol.dll", NULL},
    {L"bhp014.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\SNMP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\snmp.exe", NULL},
    {L"wsnmp.exe", L"%systemroot%\\SysWOW64\\snmp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\snmpapi.dll", NULL},
    {L"wsnmpapi.dll", L"%systemroot%\\SysWOW64\\snmpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpcl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpincl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpsmir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmpsnap.dll", NULL},
    {L"wsnmpsnap.dll", L"%systemroot%\\SysWOW64\\snmpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpstup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpthrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmptrap.exe", NULL},
    {L"wsnmptrap.exe", L"%systemroot%\\SysWOW64\\snmptrap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\snprfdll.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\snyaitmc.sys", NULL},
    {NULL, L"%systemroot%\\ime\\SOFTKBD.DLL", NULL},
    {L"wSOFTKBD.DLL", L"%systemroot%\\ime (x86)\\SOFTKBD.DLL", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\softkey.dll", L"intl.inf"},
    {L"wsoftkey.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\softkey.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\softpub.dll", NULL},
    {L"wsoftpub.dll", L"%systemroot%\\SysWOW64\\softpub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonyait.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonydcam.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonymc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sort.exe", NULL},
    {L"wsort.exe", L"%systemroot%\\SysWOW64\\sort.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sortkey.nls", NULL},
    {L"wsortkey.nls", L"%systemroot%\\SysWOW64\\sortkey.nls", NULL},
    {NULL, L"%systemroot%\\system32\\sorttbls.nls", NULL},
    {L"wsorttbls.nls", L"%systemroot%\\SysWOW64\\sorttbls.nls", NULL},
    {L"wsound.drv", L"%systemroot%\\SysWOW64\\sound.drv", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\spcommon.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\1033\\spcplui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\spctramc.sys", NULL},
    {NULL, L"%systemroot%\\ime\\spgrmr.dll", NULL},
    {L"wspgrmr.dll", L"%systemroot%\\ime (x86)\\spgrmr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\splitter.sys", NULL},
    {NULL, L"%systemroot%\\splwow64.exe", NULL},
    {NULL, L"%systemroot%\\system32\\spoolss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\spoolsv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sprestrt.exe", NULL},
    {L"wsprestrt.exe", L"%systemroot%\\SysWOW64\\sprestrt.exe", NULL},
    {NULL, L"%systemroot%\\ime\\SPTIP.dll", NULL},
    {L"wSPTIP.dll", L"%systemroot%\\ime (x86)\\SPTIP.dll", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\spttseng.dll", NULL},
    {L"wSpxupchk.dll", L"%systemroot%\\SysWOW64\\Spxupchk.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\sqlxmlx.dll", NULL},
    {L"wsqlxmlx.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\sqlxmlx.dll", NULL},
    {L"srgb.icm", L"%systemroot%\\system32\\spool\\drivers\\color\\sRGB Color Space Profile.icm", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\srv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\srvsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ssinc.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ssmarque.scr", NULL},
    {NULL, L"%systemroot%\\help\\sstub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\stclient.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\stcusb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\stdole32.tlb", NULL},
    {L"wstdole32.tlb", L"%systemroot%\\SysWOW64\\stdole32.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\stdprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sti.dll", NULL},
    {L"wsti.dll", L"%systemroot%\\SysWOW64\\sti.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sti_ci.dll", NULL},
    {L"wsti_ci.dll", L"%systemroot%\\SysWOW64\\sti_ci.dll", NULL},
    {L"wstlncoin.dll", L"%systemroot%\\SysWOW64\\stlncoin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\stobject.dll", NULL},
    {L"wstobject.dll", L"%systemroot%\\SysWOW64\\stobject.dll", NULL},
    {L"wstorage.dll", L"%systemroot%\\SysWOW64\\storage.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\storport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\storprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\storprov.dll", NULL},
    {L"wstorprov.dll", L"%systemroot%\\SysWOW64\\storprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\stream.sys", NULL},
    {NULL, L"%systemroot%\\system32\\streamci.dll", NULL},
    {L"wstreamci.dll", L"%systemroot%\\SysWOW64\\streamci.dll", NULL},
    {NULL, L"%systemroot%\\system32\\strmfilt.dll", NULL},
    {L"wstrmfilt.dll", L"%systemroot%\\SysWOW64\\strmfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\strmtest.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\subst.exe", NULL},
    {L"wsubst.exe", L"%systemroot%\\SysWOW64\\subst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\svcext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\svchost.exe", NULL},
    {L"wsvchost.exe", L"%systemroot%\\SysWOW64\\svchost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\svcpack.dll", NULL},
    {L"wsvcpack.dll", L"%systemroot%\\SysWOW64\\svcpack.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swdisp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swenum.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swkeypad.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swmidi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swnvram.sys", NULL},
    {NULL, L"%systemroot%\\system32\\swprv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sxs.dll", NULL},
    {L"wsxs.dll", L"%systemroot%\\SysWOW64\\sxs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sym_hi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sym_u3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symc810.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symc8xx.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symmpi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\syncapp.exe", NULL},
    {L"wsyncapp.exe", L"%systemroot%\\SysWOW64\\syncapp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\synceng.dll", NULL},
    {L"wsynceng.dll", L"%systemroot%\\SysWOW64\\synceng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\syncui.dll", NULL},
    {L"wsyncui.dll", L"%systemroot%\\SysWOW64\\syncui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sysaudio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sysdm.cpl", NULL},
    {L"wsysdm.cpl", L"%systemroot%\\SysWOW64\\sysdm.cpl", NULL},
    {L"wsysedit.exe", L"%systemroot%\\SysWOW64\\sysedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sysinv.dll", NULL},
    {L"wsysinv.dll", L"%systemroot%\\SysWOW64\\sysinv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\syskey.exe", NULL},
    {L"wsyskey.exe", L"%systemroot%\\SysWOW64\\syskey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sysmon.ocx", NULL},
    {L"wsysmon.ocx", L"%systemroot%\\SysWOW64\\sysmon.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\syssetup.dll", NULL},
    {L"wsyssetup.dll", L"%systemroot%\\SysWOW64\\syssetup.dll", NULL},
    {L"sysinfo.exe", L"%systemroot%\\system32\\systeminfo.exe", NULL},
    {L"wsysinfo.exe", L"%systemroot%\\SysWOW64\\systeminfo.exe", NULL},
    {NULL, L"%systemroot%\\system32\\systray.exe", NULL},
    {L"wsystray.exe", L"%systemroot%\\SysWOW64\\systray.exe", NULL},
    {NULL, L"%systemroot%\\system32\\t2embed.dll", NULL},
    {L"wt2embed.dll", L"%systemroot%\\SysWOW64\\t2embed.dll", NULL},
    {NULL, L"%systemroot%\\system32\\takeown.exe", NULL},
    {L"wtakeown.exe", L"%systemroot%\\SysWOW64\\takeown.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tandqic.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tape.sys", NULL},
    {L"wtapi.dll", L"%systemroot%\\SysWOW64\\tapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapi3.dll", NULL},
    {L"wtapi3.dll", L"%systemroot%\\SysWOW64\\tapi3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapi32.dll", NULL},
    {L"wtapi32.dll", L"%systemroot%\\SysWOW64\\tapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapicfg.exe", NULL},
    {L"wtapicfg.exe", L"%systemroot%\\SysWOW64\\tapicfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tapiperf.dll", NULL},
    {L"wtapiperf.dll", L"%systemroot%\\SysWOW64\\tapiperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapisnap.dll", NULL},
    {L"wtapisnap.dll", L"%systemroot%\\SysWOW64\\tapisnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapisrv.dll", NULL},
    {L"wtapisrv.dll", L"%systemroot%\\SysWOW64\\tapisrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapiui.dll", NULL},
    {L"wtapiui.dll", L"%systemroot%\\SysWOW64\\tapiui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\taskkill.exe", NULL},
    {L"wtaskkill.exe", L"%systemroot%\\SysWOW64\\taskkill.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tasklist.exe", NULL},
    {L"wtasklist.exe", L"%systemroot%\\SysWOW64\\tasklist.exe", NULL},
    {NULL, L"%systemroot%\\system32\\taskmgr.exe", NULL},
    {L"wtaskmgr.exe", L"%systemroot%\\SysWOW64\\taskmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tcmsetup.exe", NULL},
    {L"wtcmsetup.exe", L"%systemroot%\\SysWOW64\\tcmsetup.exe", NULL},
    {L"bhp015.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\TCPIP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tcpip.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tcpip6.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmib.dll", NULL},
    {L"wtcpmib.dll", L"%systemroot%\\SysWOW64\\tcpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmon.dll", NULL},
    {L"wtcpmon.dll", L"%systemroot%\\SysWOW64\\tcpmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmonui.dll", NULL},
    {L"wtcpmonui.dll", L"%systemroot%\\SysWOW64\\tcpmonui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpsvcs.exe", NULL},
    {L"wtcpsvcs.exe", L"%systemroot%\\SysWOW64\\tcpsvcs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tdc.ocx", NULL},
    {L"wtdc.ocx", L"%systemroot%\\SysWOW64\\tdc.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdpipe.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdtcp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\telephon.cpl", NULL},
    {L"wtelephon.cpl", L"%systemroot%\\SysWOW64\\telephon.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\telnet.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\termdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\termmgr.dll", NULL},
    {L"wtermmgr.dll", L"%systemroot%\\SysWOW64\\termmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\termsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tffsport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tftp.exe", NULL},
    {L"wtftp.exe", L"%systemroot%\\SysWOW64\\tftp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tftpd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Thawbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\themeui.dll", NULL},
    {L"wthemeui.dll", L"%systemroot%\\SysWOW64\\themeui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\timedate.cpl", NULL},
    {L"wtimedate.cpl", L"%systemroot%\\SysWOW64\\timedate.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\timeout.exe", NULL},
    {L"wtimeout.exe", L"%systemroot%\\SysWOW64\\timeout.exe", NULL},
    {L"wtimer.drv", L"%systemroot%\\SysWOW64\\timer.drv", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\TINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLPHR.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTSETP.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\tlntadmn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tlntsess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tlntsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tlntsvrp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tls236.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TMIGRATE.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\tmplprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\toside.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tracerpt.exe", NULL},
    {L"wtracerpt.exe", L"%systemroot%\\SysWOW64\\tracerpt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tracert.exe", NULL},
    {L"wtracert.exe", L"%systemroot%\\SysWOW64\\tracert.exe", NULL},
    {NULL, L"%systemroot%\\system32\\traffic.dll", NULL},
    {L"wtraffic.dll", L"%systemroot%\\SysWOW64\\traffic.dll", NULL},
    {L"bhp016.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\TRAIL.DLL", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\trialoc.dll", NULL},
    {L"wTRIEDIT.DLL", L"%commonprogramfiles(x86)%\\Microsoft Shared\\Triedit\\TRIEDIT.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\trksvr.dll", NULL},
    {L"wtrksvr.dll", L"%systemroot%\\SysWOW64\\trksvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\trkwks.dll", NULL},
    {L"wtrkwks.dll", L"%systemroot%\\SysWOW64\\trkwks.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\trnsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\AdStatus\\trustmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsappcmp.dll", NULL},
    {L"wtsappcmp.dll", L"%systemroot%\\SysWOW64\\tsappcmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsbyuv.dll", NULL},
    {L"wtsbyuv.dll", L"%systemroot%\\SysWOW64\\tsbyuv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscfgwmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tscupgrd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsd32.dll", NULL},
    {L"wtsd32.dll", L"%systemroot%\\SysWOW64\\tsd32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsddd.dll", NULL},
    {L"wtsddd.dll", L"%systemroot%\\SysWOW64\\tsddd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsdiscon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsec.dll", NULL},
    {L"wtsec.dll", L"%systemroot%\\SysWOW64\\tsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsecimp.exe", NULL},
    {L"wtsecimp.exe", L"%systemroot%\\SysWOW64\\tsecimp.exe", NULL},
    {NULL, L"%systemroot%\\help\\tshoot.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tskill.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\tsoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsprof.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tssdis.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tssdjet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsshutdn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsuserex.dll", NULL},
    {L"wtsuserex.dll", L"%systemroot%\\SysWOW64\\tsuserex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tunmp.sys", NULL},
    {NULL, L"%systemroot%\\twain.dll", NULL},
    {L"wtwain_32.dll", L"%systemroot%\\twain_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\twext.dll", NULL},
    {L"wtwext.dll", L"%systemroot%\\SysWOW64\\twext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\txflog.dll", NULL},
    {L"wtxflog.dll", L"%systemroot%\\SysWOW64\\txflog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\typeperf.exe", NULL},
    {L"wtypeperf.exe", L"%systemroot%\\SysWOW64\\typeperf.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\udfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ufat.dll", NULL},
    {L"wufat.dll", L"%systemroot%\\SysWOW64\\ufat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\uihelper.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ulib.dll", NULL},
    {L"wulib.dll", L"%systemroot%\\SysWOW64\\ulib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\umandlg.dll", NULL},
    {L"wumandlg.dll", L"%systemroot%\\SysWOW64\\umandlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\umdmxfrm.dll", NULL},
    {L"wumdmxfrm.dll", L"%systemroot%\\SysWOW64\\umdmxfrm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\unicdime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\unicode.nls", NULL},
    {L"wunicode.nls", L"%systemroot%\\SysWOW64\\unicode.nls", NULL},
    {NULL, L"%systemroot%\\system32\\uniime.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\unimdm.tsp", NULL},
    {L"wunimdm.tsp", L"%systemroot%\\SysWOW64\\unimdm.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\unimdmat.dll", NULL},
    {L"wunimdmat.dll", L"%systemroot%\\SysWOW64\\unimdmat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\uniplat.dll", NULL},
    {L"wuniplat.dll", L"%systemroot%\\SysWOW64\\uniplat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\unlodctr.exe", NULL},
    {L"wunlodctr.exe", L"%systemroot%\\SysWOW64\\unlodctr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\unsecapp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\untfs.dll", NULL},
    {L"wuntfs.dll", L"%systemroot%\\SysWOW64\\untfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\updprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\upg351db.exe", NULL},
    {L"wupg351db.exe", L"%systemroot%\\SysWOW64\\upg351db.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\UploadLB\\Binaries\\UploadM.exe", NULL},
    {L"bhp045.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\upnpparser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ups.exe", NULL},
    {L"wups.exe", L"%systemroot%\\SysWOW64\\ups.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ureg.dll", NULL},
    {L"wureg.dll", L"%systemroot%\\SysWOW64\\ureg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\urlauth.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\usb8023.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\USBAUDIO.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbcamd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbcamd2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbccgp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbehci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbhub.sys", NULL},
    {NULL, L"%systemroot%\\system32\\usbmon.dll", NULL},
    {L"wusbmon.dll", L"%systemroot%\\SysWOW64\\usbmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbohci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbprint.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbser.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbstor.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbuhci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\usbui.dll", NULL},
    {L"wusbui.dll", L"%systemroot%\\SysWOW64\\usbui.dll", NULL},
    {L"wuser.exe", L"%systemroot%\\SysWOW64\\user.exe", NULL},
    {NULL, L"%systemroot%\\system32\\user32.dll", NULL},
    {L"wuser32.dll", L"%systemroot%\\SysWOW64\\user32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\userenv.dll", NULL},
    {L"wuserenv.dll", L"%systemroot%\\SysWOW64\\userenv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\userinit.exe", NULL},
    {L"wuserinit.exe", L"%systemroot%\\SysWOW64\\userinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\usp10.dll", NULL},
    {L"wusp10.dll", L"%systemroot%\\SysWOW64\\usp10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\utildll.dll", NULL},
    {L"wutildll.dll", L"%systemroot%\\SysWOW64\\utildll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\utilman.exe", NULL},
    {L"wutilman.exe", L"%systemroot%\\SysWOW64\\utilman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\uxtheme.dll", NULL},
    {L"wuxtheme.dll", L"%systemroot%\\SysWOW64\\uxtheme.dll", NULL},
    {L"wvbajet32.dll", L"%systemroot%\\SysWOW64\\vbajet32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vbisurf.ax", NULL},
    {L"wvbisurf.ax", L"%systemroot%\\SysWOW64\\vbisurf.ax", NULL},
    {L"wvdmdbg.dll", L"%systemroot%\\SysWOW64\\vdmdbg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vdmindvd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\vds.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vds_ps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsbas.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsdyndr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsldr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vdsutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\vdswmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\verifier.dll", NULL},
    {L"wverifier.dll", L"%systemroot%\\SysWOW64\\verifier.dll", NULL},
    {NULL, L"%systemroot%\\system32\\verifier.exe", NULL},
    {L"wverifier.exe", L"%systemroot%\\SysWOW64\\verifier.exe", NULL},
    {NULL, L"%systemroot%\\system32\\version.dll", NULL},
    {L"wversion.dll", L"%systemroot%\\SysWOW64\\version.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vga.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vga.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vgapnp.sys", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\VGX\\vgx.dll", NULL},
    {L"wvgx.dll", L"%commonprogramfiles(x86)%\\Microsoft Shared\\VGX\\vgx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\viaide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\videoprt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\viewprov.dll", NULL},
    {L"bhp017.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\VINES.DLL", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\voicepad.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\voicesub.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\volsnap.sys", NULL},
    {NULL, L"%systemroot%\\system32\\vss_ddu.dll", NULL},
    {L"wvss_ddu.dll", L"%systemroot%\\SysWOW64\\vss_ddu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vss_ps.dll", NULL},
    {L"wvss_ps.dll", L"%systemroot%\\SysWOW64\\vss_ps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vssapi.dll", NULL},
    {L"wvssapi.dll", L"%systemroot%\\SysWOW64\\vssapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssddups.dll", NULL},
    {L"wvssddups.dll", L"%systemroot%\\SysWOW64\\vssddups.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\vsswmi.dll", NULL},
    {L"wvwipxspx.dll", L"%systemroot%\\SysWOW64\\vwipxspx.dll", NULL},
    {L"wvwipxspx.exe", L"%systemroot%\\SysWOW64\\vwipxspx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\w32time.dll", NULL},
    {L"ww32time.dll", L"%systemroot%\\SysWOW64\\w32time.dll", NULL},
    {NULL, L"%systemroot%\\system32\\w32tm.exe", NULL},
    {L"ww32tm.exe", L"%systemroot%\\SysWOW64\\w32tm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\w32topl.dll", NULL},
    {L"ww32topl.dll", L"%systemroot%\\SysWOW64\\w32topl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3cache.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3comlog.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3core.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3ctrlps.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3ctrs.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3dt.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3ext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3isapi.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\w3ssl.dll", NULL},
    {L"ww3ssl.dll", L"%systemroot%\\SysWOW64\\w3ssl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3tp.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3wp.exe", L"iis.inf"},
    {L"ww95upgnt.dll", L"%systemroot%\\SysWOW64\\w95upgnt.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wab.exe", NULL},
    {NULL, L"%commonprogramfiles%\\System\\wab32.dll", NULL},
    {L"wwab32.dll", L"%commonprogramfiles(x86)%\\System\\wab32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\wab32res.dll", NULL},
    {L"wwab32res.dll", L"%commonprogramfiles(x86)%\\System\\wab32res.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabfind.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabimp.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabmig.exe", NULL},
    {NULL, L"%systemroot%\\system32\\waitfor.exe", NULL},
    {L"wwaitfor.exe", L"%systemroot%\\SysWOW64\\waitfor.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\wam.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\wamd64cpuex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\wamps.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\wamreg.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\wanarp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\watchdog.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wavemsp.dll", NULL},
    {L"wwavemsp.dll", L"%systemroot%\\SysWOW64\\wavemsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcntl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcomn.dll", NULL},
    {L"wwbemcomn.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemcomn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemdisp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemdisp.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemess.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemperf.dll", NULL},
    {L"wwbemperf.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemprox.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemtest.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemupgd.dll", NULL},
    {L"wwbemupgd.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemupgd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wdigest.dll", NULL},
    {L"wwwdigest.dll", L"%systemroot%\\SysWOW64\\wdigest.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wdmaud.drv", NULL},
    {L"wwdmaud.drv", L"%systemroot%\\SysWOW64\\wdmaud.drv", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wdmaud.sys", NULL},
    {NULL, L"%systemroot%\\system32\\webcheck.dll", NULL},
    {L"wwebcheck.dll", L"%systemroot%\\SysWOW64\\webcheck.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webclnt.dll", NULL},
    {L"wwebclnt.dll", L"%systemroot%\\SysWOW64\\webclnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webhits.dll", NULL},
    {L"wwebhits.dll", L"%systemroot%\\SysWOW64\\webhits.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webvw.dll", NULL},
    {L"wwebvw.dll", L"%systemroot%\\SysWOW64\\webvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wextract.exe", NULL},
    {L"wwextract.exe", L"%systemroot%\\SysWOW64\\wextract.exe", NULL},
    {NULL, L"%systemroot%\\system32\\where.exe", NULL},
    {L"wwhere.exe", L"%systemroot%\\SysWOW64\\where.exe", NULL},
    {NULL, L"%systemroot%\\system32\\whoami.exe", NULL},
    {L"wwhoami.exe", L"%systemroot%\\SysWOW64\\whoami.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wiaacmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wiadefui.dll", NULL},
    {L"wwiadefui.dll", L"%systemroot%\\SysWOW64\\wiadefui.dll", NULL},
    {L"wwiadss.dll", L"%systemroot%\\SysWOW64\\wiadss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiafbdrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiarpc.dll", NULL},
    {L"wwiarpc.dll", L"%systemroot%\\SysWOW64\\wiarpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiascr.dll", NULL},
    {L"wwiascr.dll", L"%systemroot%\\SysWOW64\\wiascr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiaservc.dll", NULL},
    {L"wwiaservc.dll", L"%systemroot%\\SysWOW64\\wiaservc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiasf.ax", NULL},
    {L"wwiasf.ax", L"%systemroot%\\SysWOW64\\wiasf.ax", NULL},
    {NULL, L"%systemroot%\\system32\\wiashext.dll", NULL},
    {L"wwiashext.dll", L"%systemroot%\\SysWOW64\\wiashext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiavideo.dll", NULL},
    {L"wwiavideo.dll", L"%systemroot%\\SysWOW64\\wiavideo.dll", NULL},
    {L"wwifeman.dll", L"%systemroot%\\SysWOW64\\wifeman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\win32k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\win32spl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winar30.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winbrand.dll", NULL},
    {L"wwinbrand.dll", L"%systemroot%\\SysWOW64\\winbrand.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winchat.exe", NULL},
    {L"wwinfax.dll", L"%systemroot%\\SysWOW64\\winfax.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wingb.ime", L"intl.inf"},
    {L"wwinhlp32.exe", L"%systemroot%\\winhlp32.exe", NULL},
    {L"wwinhstb.exe", L"%systemroot%\\SysWOW64\\winhlp32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winipsec.dll", NULL},
    {L"wwinipsec.dll", L"%systemroot%\\SysWOW64\\winipsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\winmgmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\winmgmtr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winmm.dll", NULL},
    {L"wwinmm.dll", L"%systemroot%\\SysWOW64\\winmm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winmsd.exe", NULL},
    {L"wwinmsd.exe", L"%systemroot%\\SysWOW64\\winmsd.exe", NULL},
    {L"wwinnls.dll", L"%systemroot%\\SysWOW64\\winnls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winntbbu.dll", NULL},
    {L"wwinntbbu.dll", L"%systemroot%\\SysWOW64\\winntbbu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winpop.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winpy.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winrnr.dll", NULL},
    {L"wwinrnr.dll", L"%systemroot%\\SysWOW64\\winrnr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wins.exe", NULL},
    {L"wwins.exe", L"%systemroot%\\SysWOW64\\wins.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winscard.dll", NULL},
    {L"wwinscard.dll", L"%systemroot%\\SysWOW64\\winscard.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsctrs.dll", NULL},
    {L"wwinsctrs.dll", L"%systemroot%\\SysWOW64\\winsctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsevnt.dll", NULL},
    {L"wwinsevnt.dll", L"%systemroot%\\SysWOW64\\winsevnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsmib.dll", NULL},
    {L"wwinsmib.dll", L"%systemroot%\\SysWOW64\\winsmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsmon.dll", NULL},
    {L"wwinsmon.dll", L"%systemroot%\\SysWOW64\\winsmon.dll", NULL},
    {L"wwinsock.dll", L"%systemroot%\\SysWOW64\\winsock.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsp.ime", L"intl.inf"},
    {L"bhp021.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\WINSPL.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\winspool.drv", NULL},
    {L"wwinspool.drv", L"%systemroot%\\SysWOW64\\winspool.drv", NULL},
    {L"wwinspool.exe", L"%systemroot%\\SysWOW64\\winspool.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winsrpc.dll", NULL},
    {L"wwinsrpc.dll", L"%systemroot%\\SysWOW64\\winsrpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winssnap.dll", NULL},
    {L"wwinssnap.dll", L"%systemroot%\\SysWOW64\\winssnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsta.dll", NULL},
    {L"wwinsta.dll", L"%systemroot%\\SysWOW64\\winsta.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winver.exe", NULL},
    {L"wwinver.exe", L"%systemroot%\\SysWOW64\\winver.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winzm.ime", L"intl.inf"},
    {L"wwisc10.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\wisc10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wkssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlanmon.dll", NULL},
    {L"wwlanmon.dll", L"%systemroot%\\SysWOW64\\wlanmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlbs.exe", NULL},
    {L"wwlbs.exe", L"%systemroot%\\SysWOW64\\wlbs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wlbs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wlbsctrl.dll", NULL},
    {L"wwlbsctrl.dll", L"%systemroot%\\SysWOW64\\wlbsctrl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wlbsprov.dll", NULL},
    {L"wwlbsprov.dll", L"%systemroot%\\SysWOW64\\wbem\\wlbsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wldap32.dll", NULL},
    {L"wwldap32.dll", L"%systemroot%\\SysWOW64\\wldap32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlnotify.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlsnp.dll", NULL},
    {L"wwlsnp.dll", L"%systemroot%\\SysWOW64\\wlsnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlstore.dll", NULL},
    {L"wwlstore.dll", L"%systemroot%\\SysWOW64\\wlstore.dll", NULL},
    {L"wwmadmod.dll", L"%systemroot%\\SysWOW64\\wmadmod.dll", NULL},
    {L"wwmadmoe.dll", L"%systemroot%\\SysWOW64\\wmadmoe.dll", NULL},
    {L"wwmasf.dll", L"%systemroot%\\SysWOW64\\wmasf.dll", NULL},
    {L"wwmdmlog.dll", L"%systemroot%\\SysWOW64\\wmdmlog.dll", NULL},
    {L"wwmdmps.dll", L"%systemroot%\\SysWOW64\\wmdmps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmi.dll", NULL},
    {L"wwmi.dll", L"%systemroot%\\SysWOW64\\wmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\xml\\wmi2xml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiadap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiapres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiaprpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiapsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMIBridge.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\wmic.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmicookr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmidcprv.dll", NULL},
    {L"wwmidx.ocx", L"%systemroot%\\SysWOW64\\wmidx.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wmilib.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMIListener.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\wmimsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipcima.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipdfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipdskq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipicmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipiprt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipjobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmiprop.dll", NULL},
    {L"wwmiprop.dll", L"%systemroot%\\SysWOW64\\wmiprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprvsd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprvse.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipsess.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmiscmgr.dll", NULL},
    {L"wwmiscmgr.dll", L"%systemroot%\\SysWOW64\\wmiscmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmisvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmitimep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiutils.dll", NULL},
    {L"wwmnetmgr.dll", L"%systemroot%\\SysWOW64\\wmnetmgr.dll", NULL},
    {L"wwmp.ocx", L"%systemroot%\\SysWOW64\\wmp.ocx", NULL},
    {L"wwmpcd.dll", L"%systemroot%\\SysWOW64\\wmpcd.dll", NULL},
    {L"wwmpcore.dll", L"%systemroot%\\SysWOW64\\wmpcore.dll", NULL},
    {L"wwmploc.dll", L"%systemroot%\\SysWOW64\\wmploc.dll", NULL},
    {L"wwmpshell.dll", L"%systemroot%\\SysWOW64\\wmpshell.dll", NULL},
    {L"wwmpstub.exe", L"%systemroot%\\SysWOW64\\wmpstub.exe", NULL},
    {L"wwmpui.dll", L"%systemroot%\\SysWOW64\\wmpui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSACLCheckPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\wmsactscrpt.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSAdmin.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSAdminRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSAnonAuthenPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSArchiveSinkV1PropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\web\\WMSASPADMIN.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSBROWSE.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSBrowseRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSDigestAuthenPropPage.dll", L"wmsocm.inf"},
    {L"wwmsdmod.dll", L"%systemroot%\\SysWOW64\\wmsdmod.dll", NULL},
    {L"wwmsdmoe.dll", L"%systemroot%\\SysWOW64\\wmsdmoe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\wmseditor.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wmserr.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wmserror.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMServer.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSHTTPAuthenPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSHTTPControlPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSHttpSysCfg.exe", L"wmsocm.inf"},
    {NULL, L"%systemdrive%\\WMPub\\WMIISLog\\wmsiislog.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSIPAccessPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSIpHlp.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSLF.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSLogPropPages.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSMONITOR.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSMonitorRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSMulticastSinkPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSNetworkDataSourcePropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wmsperf.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\wmsperfmon.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSPLAYLIST.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSPlaylistRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSPluginRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSScriptPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServer.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerConfig.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerResource.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerResourceRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerTypeLib.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerUpgrade.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\wmssnmp.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSSrvMk.dll", L"wmsocm.inf"},
    {L"wwmstream.dll", L"%systemroot%\\SysWOW64\\wmstream.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSUnicastSinkPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSWizard.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSWizardRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSWMIPropPage.dll", L"wmsocm.inf"},
    {L"wwmv8dmod.dll", L"%systemroot%\\SysWOW64\\wmv8dmod.dll", NULL},
    {L"wwmv8ds32.ax", L"%systemroot%\\SysWOW64\\wmv8ds32.ax", NULL},
    {L"wwmvcore.dll", L"%systemroot%\\SysWOW64\\wmvcore.dll", NULL},
    {L"wwmvdmod.dll", L"%systemroot%\\SysWOW64\\wmvdmod.dll", NULL},
    {L"wwmvdmoe.dll", L"%systemroot%\\SysWOW64\\wmvdmoe.dll", NULL},
    {L"wwmvds32.ax", L"%systemroot%\\SysWOW64\\wmvds32.ax", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\Accessories\\wordpad.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wow64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wow64cpu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wow64win.dll", NULL},
    {L"wwowexec.exe", L"%systemroot%\\SysWOW64\\wowexec.exe", NULL},
    {L"wwowfax.dll", L"%systemroot%\\SysWOW64\\wowfax.dll", NULL},
    {L"wwowfaxui.dll", L"%systemroot%\\SysWOW64\\wowfaxui.dll", NULL},
    {L"wwowreg32.exe", L"%systemroot%\\SysWOW64\\wowreg32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wpnpinst.exe", NULL},
    {L"wwpnpinst.exe", L"%systemroot%\\SysWOW64\\wpnpinst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\write.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ws2_32.dll", NULL},
    {L"wws2_32.dll", L"%systemroot%\\SysWOW64\\ws2_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ws2help.dll", NULL},
    {L"wws2help.dll", L"%systemroot%\\SysWOW64\\ws2help.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ws2ifsl.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wscript.exe", NULL},
    {L"wwscript.exe", L"%systemroot%\\SysWOW64\\wscript.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wsecedit.dll", NULL},
    {L"wwsecedit.dll", L"%systemroot%\\SysWOW64\\wsecedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshatm.dll", NULL},
    {L"wwshatm.dll", L"%systemroot%\\SysWOW64\\wshatm.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\WSHClus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshcon.dll", NULL},
    {L"wwshcon.dll", L"%systemroot%\\SysWOW64\\wshcon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshext.dll", NULL},
    {L"wwshext.dll", L"%systemroot%\\SysWOW64\\wshext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wship6.dll", NULL},
    {L"wwship6.dll", L"%systemroot%\\SysWOW64\\wship6.dll", NULL},
    {L"wwshisn.dll", L"%systemroot%\\SysWOW64\\wshisn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshnetbs.dll", NULL},
    {L"wwshnetbs.dll", L"%systemroot%\\SysWOW64\\wshnetbs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshom.ocx", NULL},
    {L"wwshom.ocx", L"%systemroot%\\SysWOW64\\wshom.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\wshqos.dll", NULL},
    {L"wwshqos.dll", L"%systemroot%\\SysWOW64\\wshqos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\WshRm.dll", NULL},
    {L"wWshRm.dll", L"%systemroot%\\SysWOW64\\WshRm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshtcpip.dll", NULL},
    {L"wwshtcpip.dll", L"%systemroot%\\SysWOW64\\wshtcpip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wsnmp32.dll", NULL},
    {L"wwsnmp32.dll", L"%systemroot%\\SysWOW64\\wsnmp32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wsock32.dll", NULL},
    {L"wwsock32.dll", L"%systemroot%\\SysWOW64\\wsock32.dll", NULL},
    {L"wwstdecod.dll", L"%systemroot%\\SysWOW64\\wstdecod.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wtsapi32.dll", NULL},
    {L"wwtsapi32.dll", L"%systemroot%\\SysWOW64\\wtsapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wuauclt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wuaueng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wuauserv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wupdmgr.exe", NULL},
    {L"wwupdmgr.exe", L"%systemroot%\\SysWOW64\\wupdmgr.exe", NULL},
    {L"wwzcdlg.dll", L"%systemroot%\\SysWOW64\\wzcdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcdlg.dll", NULL},
    {L"wwzcsapi.dll", L"%systemroot%\\SysWOW64\\wzcsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcsvc.dll", NULL},
    {L"wxactsrv.dll", L"%systemroot%\\SysWOW64\\xactsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xactsrv.dll", NULL},
    {L"wxcopy.exe", L"%systemroot%\\SysWOW64\\xcopy.exe", NULL},
    {NULL, L"%systemroot%\\system32\\xcopy.exe", NULL},
    {L"wxenroll.dll", L"%systemroot%\\SysWOW64\\xenroll.dll", NULL},
    {L"xenria64.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\ia64\\xenroll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xenroll.dll", NULL},
    {L"xenrx86.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\x86\\xenroll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xjis.nls", NULL},
    {L"bhp018.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\XNS.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\xolehlp.dll", NULL},
    {L"wzipfldr.dll", L"%systemroot%\\SysWOW64\\zipfldr.dll", NULL},
};

#define CountDtcFiles (sizeof(DtcFiles)/sizeof(DtcFiles[0]))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\postbuildscripts\sfp\amd64_ent.h ===
PROTECT_FILE_ENTRY EntFiles[] =
{
    {L"wAcGenral.dll", L"%systemroot%\\AppPatch\\AcGenral.dll", NULL},
    {L"wAcLayers.dll", L"%systemroot%\\AppPatch\\AcLayers.dll", NULL},
    {L"wAcSpecfc.dll", L"%systemroot%\\AppPatch\\AcSpecfc.dll", NULL},
    {L"wAcXtrnal.dll", L"%systemroot%\\AppPatch\\AcXtrnal.dll", NULL},
    {NULL, L"%systemroot%\\system32\\admwprox.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\adsiis.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ahui.exe", NULL},
    {L"wahui.exe", L"%systemroot%\\SysWOW64\\ahui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\apphelp.dll", NULL},
    {L"wapphelp.dll", L"%systemroot%\\SysWOW64\\apphelp.dll", NULL},
    {L"wapphelp.sdb", L"%systemroot%\\AppPatch\\apphelp.sdb", NULL},
    {NULL, L"%systemroot%\\help\\apps.chm", NULL},
    {NULL, L"%systemroot%\\system32\\asycfilt.dll", NULL},
    {L"wasycfilt.dll", L"%systemroot%\\SysWOW64\\asycfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atmlib.dll", NULL},
    {L"watmlib.dll", L"%systemroot%\\SysWOW64\\atmlib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\CertMap.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\CertWiz.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\cfgmgr32.dll", NULL},
    {L"wcfgmgr32.dll", L"%systemroot%\\SysWOW64\\cfgmgr32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\Cnfgprts.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\coadmin.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\comctl32.dll", NULL},
    {L"wcomctl32.dll", L"%systemroot%\\SysWOW64\\comctl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comdlg32.dll", NULL},
    {L"wcomdlg32.dll", L"%systemroot%\\SysWOW64\\comdlg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compatUI.dll", NULL},
    {L"wcompatUI.dll", L"%systemroot%\\SysWOW64\\compatUI.dll", NULL},
    {NULL, L"%systemroot%\\system32\\crypt32.dll", NULL},
    {L"wcrypt32.dll", L"%systemroot%\\SysWOW64\\crypt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdlg.dll", NULL},
    {L"wcryptdlg.dll", L"%systemroot%\\SysWOW64\\cryptdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdll.dll", NULL},
    {L"wcryptdll.dll", L"%systemroot%\\SysWOW64\\cryptdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptext.dll", NULL},
    {L"wcryptext.dll", L"%systemroot%\\SysWOW64\\cryptext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptnet.dll", NULL},
    {L"wcryptnet.dll", L"%systemroot%\\SysWOW64\\cryptnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptsvc.dll", NULL},
    {L"wcryptsvc.dll", L"%systemroot%\\SysWOW64\\cryptsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptui.dll", NULL},
    {L"wcryptui.dll", L"%systemroot%\\SysWOW64\\cryptui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dispex.dll", NULL},
    {L"wdispex.dll", L"%systemroot%\\SysWOW64\\dispex.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\dosapp.fon", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\drvmain.sdb", NULL},
    {L"wdrvmain.sdb", L"%systemroot%\\AppPatch\\drvmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\dssenh.dll", NULL},
    {L"wdssenh.dll", L"%systemroot%\\SysWOW64\\dssenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fastfat.sys", NULL},
    {NULL, L"%systemroot%\\fonts\\framd.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\framdit.ttf", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iismap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisreset.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisrstap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisrstas.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisRtl.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisui.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\imeshare.dll", NULL},
    {L"wimeshare.dll", L"%systemroot%\\SysWOW64\\imeshare.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\inetmgr.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\inetmgr.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\infoadmn.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\ipsec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\isatq.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\itircl.dll", NULL},
    {L"witircl.dll", L"%systemroot%\\SysWOW64\\itircl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\itss.dll", NULL},
    {L"witss.dll", L"%systemroot%\\SysWOW64\\itss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jscript.dll", NULL},
    {L"wjscript.dll", L"%systemroot%\\SysWOW64\\jscript.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jsproxy.dll", NULL},
    {L"wjsproxy.dll", L"%systemroot%\\SysWOW64\\jsproxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kernel32.dll", NULL},
    {L"wkernel32.dll", L"%systemroot%\\SysWOW64\\kernel32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\logui.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\lsasrv.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\marlett.ttf", NULL},
    {L"wmfc40.dll", L"%systemroot%\\SysWOW64\\mfc40.dll", NULL},
    {L"wmfc40u.dll", L"%systemroot%\\SysWOW64\\mfc40u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42.dll", NULL},
    {L"wmfc42.dll", L"%systemroot%\\SysWOW64\\mfc42.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42u.dll", NULL},
    {L"wmfc42u.dll", L"%systemroot%\\SysWOW64\\mfc42u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfcsubs.dll", NULL},
    {L"wmfcsubs.dll", L"%systemroot%\\SysWOW64\\mfcsubs.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\micross.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\modern.fon", NULL},
    {L"wmsimain.sdb", L"%systemroot%\\AppPatch\\msimain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\mssip32.dll", NULL},
    {L"wmssip32.dll", L"%systemroot%\\SysWOW64\\mssip32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcrt.dll", NULL},
    {L"wmsvcrt.dll", L"%systemroot%\\SysWOW64\\msvcrt.dll", NULL},
    {L"wmsvcrt40.dll", L"%systemroot%\\SysWOW64\\msvcrt40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndiswan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\netapi32.dll", NULL},
    {L"wnetapi32.dll", L"%systemroot%\\SysWOW64\\netapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpadm.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpsnap.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\ntdll.dll", NULL},
    {L"wntdll.dll", L"%systemroot%\\SysWOW64\\ntdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ntfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ntoskrnl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ocmanage.dll", NULL},
    {L"wocmanage.dll", L"%systemroot%\\SysWOW64\\ocmanage.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbccp32.dll", NULL},
    {L"wodbccp32.dll", L"%systemroot%\\SysWOW64\\odbccp32.dll", NULL},
    {L"wodtext32.dll", L"%systemroot%\\SysWOW64\\odtext32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ole32.dll", NULL},
    {L"wole32.dll", L"%systemroot%\\SysWOW64\\ole32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleaut32.dll", NULL},
    {L"woleaut32.dll", L"%systemroot%\\SysWOW64\\oleaut32.dll", NULL},
    {L"wolepro32.dll", L"%systemroot%\\SysWOW64\\olepro32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\riched20.dll", NULL},
    {L"wriched20.dll", L"%systemroot%\\SysWOW64\\riched20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\riched32.dll", NULL},
    {L"wriched32.dll", L"%systemroot%\\SysWOW64\\riched32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsaenh.dll", NULL},
    {L"wrsaenh.dll", L"%systemroot%\\SysWOW64\\rsaenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\samlib.dll", NULL},
    {L"wsamlib.dll", L"%systemroot%\\SysWOW64\\samlib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\samsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schannel.dll", NULL},
    {L"wschannel.dll", L"%systemroot%\\SysWOW64\\schannel.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\script.fon", NULL},
    {NULL, L"%systemroot%\\system32\\scrobj.dll", NULL},
    {L"wscrobj.dll", L"%systemroot%\\SysWOW64\\scrobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scrrun.dll", NULL},
    {L"wscrrun.dll", L"%systemroot%\\SysWOW64\\scrrun.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sdbinst.exe", NULL},
    {L"wsdbinst.exe", L"%systemroot%\\SysWOW64\\sdbinst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\setupapi.dll", NULL},
    {L"wsetupapi.dll", L"%systemroot%\\SysWOW64\\setupapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc.dll", NULL},
    {L"wsfc.dll", L"%systemroot%\\SysWOW64\\sfc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc.exe", NULL},
    {L"wsfc.exe", L"%systemroot%\\SysWOW64\\sfc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfcfiles.dll", NULL},
    {L"wsfcfiles.dll", L"%systemroot%\\SysWOW64\\sfcfiles.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shimeng.dll", NULL},
    {L"wshimeng.dll", L"%systemroot%\\SysWOW64\\shimeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slayerxp.dll", NULL},
    {L"wslayerxp.dll", L"%systemroot%\\SysWOW64\\slayerxp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpadm.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpsnap.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\staxmem.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\stdole2.tlb", NULL},
    {L"wstdole2.tlb", L"%systemroot%\\SysWOW64\\stdole2.tlb", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\sysmain.sdb", NULL},
    {L"wsysmain.sdb", L"%systemroot%\\AppPatch\\sysmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\sysocmgr.exe", NULL},
    {L"wsysocmgr.exe", L"%systemroot%\\SysWOW64\\sysocmgr.exe", NULL},
    {NULL, L"%systemroot%\\fonts\\tahoma.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\tahomabd.ttf", NULL},
    {NULL, L"%systemroot%\\twunk_16.exe", NULL},
    {NULL, L"%systemroot%\\twunk_32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\umpnpmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\url.dll", NULL},
    {L"wurl.dll", L"%systemroot%\\SysWOW64\\url.dll", NULL},
    {NULL, L"%systemroot%\\system32\\urlmon.dll", NULL},
    {L"wurlmon.dll", L"%systemroot%\\SysWOW64\\urlmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vbscript.dll", NULL},
    {L"wvbscript.dll", L"%systemroot%\\SysWOW64\\vbscript.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\vgaoem.fon", NULL},
    {NULL, L"%systemroot%\\system32\\wamregps.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\wininet.dll", NULL},
    {L"wwininet.dll", L"%systemroot%\\SysWOW64\\wininet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winlogon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wintrust.dll", NULL},
    {L"wwintrust.dll", L"%systemroot%\\SysWOW64\\wintrust.dll", NULL},
    {L"wasfsipc.dll", L"%systemroot%\\SysWOW64\\asfsipc.dll", NULL},
    {L"wdao360.dll", L"%commonprogramfiles(x86)%\\Microsoft Shared\\DAO\\dao360.dll", NULL},
    {L"wdrmclien.dll", L"%systemroot%\\SysWOW64\\drmclien.dll", NULL},
    {L"wdrmstor.dll", L"%systemroot%\\SysWOW64\\drmstor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ds32gt.dll", NULL},
    {L"wds32gt.dll", L"%systemroot%\\SysWOW64\\ds32gt.dll", NULL},
    {L"wdxmasf.dll", L"%systemroot%\\SysWOW64\\dxmasf.dll", NULL},
    {L"wlaprxy.dll", L"%systemroot%\\SysWOW64\\laprxy.dll", NULL},
    {L"wlogagent.exe", L"%systemroot%\\SysWOW64\\logagent.exe", NULL},
    {L"wmpg4ds32.ax", L"%systemroot%\\SysWOW64\\mpg4ds32.ax", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadce.dll", NULL},
    {L"wmsadce.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadce.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcer.dll", NULL},
    {L"wmsadcer.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcer.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcf.dll", NULL},
    {L"wmsadcf.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcf.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcfr.dll", NULL},
    {L"wmsadcfr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcfr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadco.dll", NULL},
    {L"wmsadco.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadco.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcor.dll", NULL},
    {L"wmsadcor.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcor.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcs.dll", NULL},
    {L"wmsadcs.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcs.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadds.dll", NULL},
    {L"wmsadds.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadds.dll", NULL},
    {L"wmsadds32.ax", L"%systemroot%\\SysWOW64\\msadds32.ax", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msaddsr.dll", NULL},
    {L"wmsaddsr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msaddsr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msader15.dll", NULL},
    {L"wmsader15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msader15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado15.dll", NULL},
    {L"wmsado15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msado15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado20.tlb", NULL},
    {L"wmsado20.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado20.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado21.tlb", NULL},
    {L"wmsado21.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado21.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadomd.dll", NULL},
    {L"wmsadomd.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadomd.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msador15.dll", NULL},
    {L"wmsador15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msador15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadox.dll", NULL},
    {L"wmsadox.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadox.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadrh15.dll", NULL},
    {L"wmsadrh15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadrh15.dll", NULL},
    {L"wmscpxl32.dLL", L"%systemroot%\\SysWOW64\\mscpxl32.dLL", NULL},
    {L"wmsdadc.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdadc.dll", NULL},
    {L"wmsdaenum.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaenum.dll", NULL},
    {L"wmsdaer.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaer.dll", NULL},
    {L"wmsdaora.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaora.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdaosp.dll", NULL},
    {L"wmsdaosp.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaosp.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaprsr.dll", NULL},
    {L"wmsdaprsr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaprsr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaprst.dll", NULL},
    {L"wmsdaprst.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaprst.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdaps.dll", NULL},
    {L"wmsdaps.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaps.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdarem.dll", NULL},
    {L"wmsdarem.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdarem.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaremr.dll", NULL},
    {L"wmsdaremr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaremr.dll", NULL},
    {L"wmsdasc.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasc.dll", NULL},
    {L"wmsdasql.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasql.dll", NULL},
    {L"wmsdasqlr.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasqlr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdatsrc.tlb", NULL},
    {L"wmsdatsrc.tlb", L"%systemroot%\\SysWOW64\\msdatsrc.tlb", NULL},
    {L"wmsdatt.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdatt.dll", NULL},
    {L"wmsdaurl.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaurl.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdfmap.dll", NULL},
    {L"wmsdfmap.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdfmap.dll", NULL},
    {L"wmsdxm.ocx", L"%systemroot%\\SysWOW64\\msdxm.ocx", NULL},
    {L"wmsdxmlc.dll", L"%systemroot%\\SysWOW64\\msdxmlc.dll", NULL},
    {L"wmsexch40.dll", L"%systemroot%\\SysWOW64\\msexch40.dll", NULL},
    {L"wmsexcl40.dll", L"%systemroot%\\SysWOW64\\msexcl40.dll", NULL},
    {L"wmsjet40.dll", L"%systemroot%\\SysWOW64\\msjet40.dll", NULL},
    {L"wmsjint40.dll", L"%systemroot%\\SysWOW64\\msjint40.dll", NULL},
    {L"wmsjro.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msjro.dll", NULL},
    {L"wmsjter40.dll", L"%systemroot%\\SysWOW64\\msjter40.dll", NULL},
    {L"wmsjtes40.dll", L"%systemroot%\\SysWOW64\\msjtes40.dll", NULL},
    {L"wmsltus40.dll", L"%systemroot%\\SysWOW64\\msltus40.dll", NULL},
    {L"wmsorcl32.dll", L"%systemroot%\\SysWOW64\\msorcl32.dll", NULL},
    {L"wmspbde40.dll", L"%systemroot%\\SysWOW64\\mspbde40.dll", NULL},
    {L"wmsrd2x40.dll", L"%systemroot%\\SysWOW64\\msrd2x40.dll", NULL},
    {L"wmsrd3x40.dll", L"%systemroot%\\SysWOW64\\msrd3x40.dll", NULL},
    {L"wmsrepl40.dll", L"%systemroot%\\SysWOW64\\msrepl40.dll", NULL},
    {L"wmstext40.dll", L"%systemroot%\\SysWOW64\\mstext40.dll", NULL},
    {L"wmswdat10.dll", L"%systemroot%\\SysWOW64\\mswdat10.dll", NULL},
    {L"wmswstr10.dll", L"%systemroot%\\SysWOW64\\mswstr10.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msxactps.dll", NULL},
    {L"wmsxactps.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msxactps.dll", NULL},
    {L"wmsxbde40.dll", L"%systemroot%\\SysWOW64\\msxbde40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbc32.dll", NULL},
    {L"wodbc32.dll", L"%systemroot%\\SysWOW64\\odbc32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbc32gt.dll", NULL},
    {L"wodbc32gt.dll", L"%systemroot%\\SysWOW64\\odbc32gt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcad32.exe", NULL},
    {L"wodbcad32.exe", L"%systemroot%\\SysWOW64\\odbcad32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.dll", NULL},
    {L"wodbcconf.dll", L"%systemroot%\\SysWOW64\\odbcconf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.exe", NULL},
    {L"wodbcconf.exe", L"%systemroot%\\SysWOW64\\odbcconf.exe", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.rsp", NULL},
    {L"wodbcconf.rsp", L"%systemroot%\\SysWOW64\\odbcconf.rsp", NULL},
    {NULL, L"%systemroot%\\system32\\odbccp32.cpl", NULL},
    {L"wodbccp32.cpl", L"%systemroot%\\SysWOW64\\odbccp32.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\odbccr32.dll", NULL},
    {L"wodbccr32.dll", L"%systemroot%\\SysWOW64\\odbccr32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbccu32.dll", NULL},
    {L"wodbccu32.dll", L"%systemroot%\\SysWOW64\\odbccu32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcint.dll", NULL},
    {L"wodbcint.dll", L"%systemroot%\\SysWOW64\\odbcint.dll", NULL},
    {L"wodbcji32.dll", L"%systemroot%\\SysWOW64\\odbcji32.dll", NULL},
    {L"wodbcjt32.dll", L"%systemroot%\\SysWOW64\\odbcjt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbctrac.dll", NULL},
    {L"wodbctrac.dll", L"%systemroot%\\SysWOW64\\odbctrac.dll", NULL},
    {L"woddbse32.dll", L"%systemroot%\\SysWOW64\\oddbse32.dll", NULL},
    {L"wodexl32.dll", L"%systemroot%\\SysWOW64\\odexl32.dll", NULL},
    {L"wodfox32.dll", L"%systemroot%\\SysWOW64\\odfox32.dll", NULL},
    {L"wodpdx32.dll", L"%systemroot%\\SysWOW64\\odpdx32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\oledb32.dll", NULL},
    {L"woledb32.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\oledb32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\oledb32r.dll", NULL},
    {L"woledb32r.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\oledb32r.dll", NULL},
    {L"wstrmdll.dll", L"%systemroot%\\SysWOW64\\strmdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\wmsocm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\1394bus.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\4mmdat.sys", NULL},
    {NULL, L"%systemroot%\\system32\\6to4svc.dll", NULL},
    {L"w6to4svc.dll", L"%systemroot%\\SysWOW64\\6to4svc.dll", NULL},
    {L"w_isdel.exe", L"%systemroot%\\SysWOW64\\InstallShield\\_isdel.exe", NULL},
    {L"w_setup.dll", L"%systemroot%\\SysWOW64\\InstallShield\\_setup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\aaaamon.dll", NULL},
    {L"waaaamon.dll", L"%systemroot%\\SysWOW64\\aaaamon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\access.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\acctres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\accwiz.exe", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\AcGen64.dll", NULL},
    {NULL, L"%systemroot%\\Application Compatibility Scripts\\aciniupd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\acledit.dll", NULL},
    {L"wacledit.dll", L"%systemroot%\\SysWOW64\\acledit.dll", NULL},
    {L"wAcLua.dll", L"%systemroot%\\AppPatch\\AcLua.dll", NULL},
    {NULL, L"%systemroot%\\system32\\aclui.dll", NULL},
    {L"waclui.dll", L"%systemroot%\\SysWOW64\\aclui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\acpi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\acpiec.sys", NULL},
    {NULL, L"%systemroot%\\Application Compatibility Scripts\\acregl.exe", NULL},
    {NULL, L"%systemroot%\\Application Compatibility Scripts\\acsr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\activeds.dll", NULL},
    {L"wactiveds.dll", L"%systemroot%\\SysWOW64\\activeds.dll", NULL},
    {NULL, L"%systemroot%\\system32\\activeds.tlb", NULL},
    {L"wactiveds.tlb", L"%systemroot%\\SysWOW64\\activeds.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\actmovie.exe", NULL},
    {L"wactmovie.exe", L"%systemroot%\\SysWOW64\\actmovie.exe", NULL},
    {NULL, L"%systemroot%\\system32\\actxprxy.dll", NULL},
    {L"wactxprxy.dll", L"%systemroot%\\SysWOW64\\actxprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\administration\\addusr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adicsc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adicvls.sys", NULL},
    {NULL, L"%systemroot%\\system32\\admparse.dll", NULL},
    {L"wadmparse.dll", L"%systemroot%\\SysWOW64\\admparse.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adprop.dll", NULL},
    {L"wadprop.dll", L"%systemroot%\\SysWOW64\\adprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adptif.dll", NULL},
    {L"wadptif.dll", L"%systemroot%\\SysWOW64\\adptif.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adpu160m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adpu320.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ADROT.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\adsiisex.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\adsldp.dll", NULL},
    {L"wadsldp.dll", L"%systemroot%\\SysWOW64\\adsldp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsldpc.dll", NULL},
    {L"wadsldpc.dll", L"%systemroot%\\SysWOW64\\adsldpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsmsext.dll", NULL},
    {L"wadsmsext.dll", L"%systemroot%\\SysWOW64\\adsmsext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsnt.dll", NULL},
    {L"wadsnt.dll", L"%systemroot%\\SysWOW64\\adsnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\advapi32.dll", NULL},
    {L"wadvapi32.dll", L"%systemroot%\\SysWOW64\\advapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\advpack.dll", NULL},
    {L"wadvpack.dll", L"%systemroot%\\SysWOW64\\advpack.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\afcnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\afd.sys", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentanm.dll", NULL},
    {L"wagentanm.dll", L"%systemroot%\\msagent\\agentanm.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentctl.dll", NULL},
    {L"wagentctl.dll", L"%systemroot%\\msagent\\agentctl.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentdp2.dll", NULL},
    {L"wagentdp2.dll", L"%systemroot%\\msagent\\agentdp2.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentdpv.dll", NULL},
    {L"wagentdpv.dll", L"%systemroot%\\msagent\\agentdpv.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentmpx.dll", NULL},
    {L"wagentmpx.dll", L"%systemroot%\\msagent\\agentmpx.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentpsh.dll", NULL},
    {L"wagentpsh.dll", L"%systemroot%\\msagent\\agentpsh.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentsr.dll", NULL},
    {L"wagentsr.dll", L"%systemroot%\\msagent\\agentsr.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentsvr.exe", NULL},
    {L"wagentsvr.exe", L"%systemroot%\\msagent\\agentsvr.exe", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0401.dll", L"intl.inf"},
    {L"wagt0401.dll", L"%systemroot%\\msagent\\intl\\agt0401.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0404.dll", L"intl.inf"},
    {L"wagt0404.dll", L"%systemroot%\\msagent\\intl\\agt0404.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0405.dll", NULL},
    {L"wagt0405.dll", L"%systemroot%\\msagent\\intl\\agt0405.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0406.dll", NULL},
    {L"wagt0406.dll", L"%systemroot%\\msagent\\intl\\agt0406.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0407.dll", NULL},
    {L"wagt0407.dll", L"%systemroot%\\msagent\\intl\\agt0407.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0408.dll", NULL},
    {L"wagt0408.dll", L"%systemroot%\\msagent\\intl\\agt0408.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\intl\\agt0409.dll", NULL},
    {L"wagt0409.dll", L"%systemroot%\\msagent\\intl\\agt0409.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040b.dll", NULL},
    {L"wagt040b.dll", L"%systemroot%\\msagent\\intl\\agt040b.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040c.dll", NULL},
    {L"wagt040c.dll", L"%systemroot%\\msagent\\intl\\agt040c.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040d.dll", L"intl.inf"},
    {L"wagt040d.dll", L"%systemroot%\\msagent\\intl\\agt040d.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040e.dll", NULL},
    {L"wagt040e.dll", L"%systemroot%\\msagent\\intl\\agt040e.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0410.dll", NULL},
    {L"wagt0410.dll", L"%systemroot%\\msagent\\intl\\agt0410.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0411.dll", L"intl.inf"},
    {L"wagt0411.dll", L"%systemroot%\\msagent\\intl\\agt0411.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0412.dll", L"intl.inf"},
    {L"wagt0412.dll", L"%systemroot%\\msagent\\intl\\agt0412.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0413.dll", NULL},
    {L"wagt0413.dll", L"%systemroot%\\msagent\\intl\\agt0413.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0414.dll", NULL},
    {L"wagt0414.dll", L"%systemroot%\\msagent\\intl\\agt0414.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0415.dll", NULL},
    {L"wagt0415.dll", L"%systemroot%\\msagent\\intl\\agt0415.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0416.dll", NULL},
    {L"wagt0416.dll", L"%systemroot%\\msagent\\intl\\agt0416.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0419.dll", NULL},
    {L"wagt0419.dll", L"%systemroot%\\msagent\\intl\\agt0419.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt041d.dll", NULL},
    {L"wagt041d.dll", L"%systemroot%\\msagent\\intl\\agt041d.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt041f.dll", NULL},
    {L"wagt041f.dll", L"%systemroot%\\msagent\\intl\\agt041f.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0804.dll", L"intl.inf"},
    {L"wagt0804.dll", L"%systemroot%\\msagent\\intl\\agt0804.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0816.dll", NULL},
    {L"wagt0816.dll", L"%systemroot%\\msagent\\intl\\agt0816.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0c0a.dll", NULL},
    {L"wagt0c0a.dll", L"%systemroot%\\msagent\\intl\\agt0c0a.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agtctl15.tlb", NULL},
    {L"wagtctl15.tlb", L"%systemroot%\\msagent\\agtctl15.tlb", NULL},
    {NULL, L"%systemroot%\\msagent64\\agtintl.dll", NULL},
    {L"wagtintl.dll", L"%systemroot%\\msagent\\agtintl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aic78u2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aic78xx.sys", NULL},
    {NULL, L"%systemroot%\\system32\\alg.exe", NULL},
    {L"walg.exe", L"%systemroot%\\SysWOW64\\alg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aliide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\alrsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\amdagp8p.sys", NULL},
    {NULL, L"%systemroot%\\system32\\amstream.dll", NULL},
    {L"wamstream.dll", L"%systemroot%\\SysWOW64\\amstream.dll", NULL},
    {NULL, L"%systemroot%\\system32\\apcups.dll", NULL},
    {L"wapcups.dll", L"%systemroot%\\SysWOW64\\apcups.dll", NULL},
    {L"wappend.exe", L"%systemroot%\\SysWOW64\\append.exe", NULL},
    {NULL, L"%systemroot%\\system32\\appmgmts.dll", NULL},
    {L"wappmgmts.dll", L"%systemroot%\\SysWOW64\\appmgmts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\appmgr.dll", NULL},
    {L"wappmgr.dll", L"%systemroot%\\SysWOW64\\appmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\appwiz.cpl", NULL},
    {L"wappwiz.cpl", L"%systemroot%\\SysWOW64\\appwiz.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\aqadmin.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\aqueue.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\arp.exe", NULL},
    {L"warp.exe", L"%systemroot%\\SysWOW64\\arp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\arp1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\asctrls.ocx", NULL},
    {L"wasctrls.ocx", L"%systemroot%\\SysWOW64\\asctrls.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\ASFArchiver.dll", L"wmsocm.inf"},
    {L"wasferror.dll", L"%systemroot%\\SysWOW64\\asferror.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\asp.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\aspperf.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\asr_fmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\asr_ldm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\asr_pfu.exe", NULL},
    {L"wasr_pfu.exe", L"%systemroot%\\SysWOW64\\asr_pfu.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\asyncmac.sys", NULL},
    {NULL, L"%systemroot%\\system32\\at.exe", NULL},
    {L"wat.exe", L"%systemroot%\\SysWOW64\\at.exe", NULL},
    {L"bhp001.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\atalk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atidvag.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Atievxx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atimtag.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atkctrs.dll", NULL},
    {L"watkctrs.dll", L"%systemroot%\\SysWOW64\\atkctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atl.dll", NULL},
    {L"watl.dll", L"%systemroot%\\SysWOW64\\atl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atlmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmadm.exe", NULL},
    {L"watmadm.exe", L"%systemroot%\\SysWOW64\\atmadm.exe", NULL},
    {L"bhp024.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\ATMARP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmarpc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmarps.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmepvc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmfd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmlane.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmpvcno.dll", NULL},
    {L"watmpvcno.dll", L"%systemroot%\\SysWOW64\\atmpvcno.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmuni.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atrace.dll", NULL},
    {NULL, L"%systemroot%\\system32\\attrib.exe", NULL},
    {L"wattrib.exe", L"%systemroot%\\SysWOW64\\attrib.exe", NULL},
    {NULL, L"%systemroot%\\system32\\administration\\au_accnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\audiosrv.dll", NULL},
    {L"waudiosrv.dll", L"%systemroot%\\SysWOW64\\audiosrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\audstub.sys", NULL},
    {NULL, L"%systemroot%\\system32\\authz.dll", NULL},
    {L"wauthz.dll", L"%systemroot%\\SysWOW64\\authz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\autochk.exe", NULL},
    {L"wautochk.exe", L"%systemroot%\\SysWOW64\\autochk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autoconv.exe", NULL},
    {L"wautoconv.exe", L"%systemroot%\\SysWOW64\\autoconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autodisc.dll", NULL},
    {L"wautodisc.dll", L"%systemroot%\\SysWOW64\\autodisc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\autofmt.exe", NULL},
    {L"wautofmt.exe", L"%systemroot%\\SysWOW64\\autofmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autolfn.exe", NULL},
    {L"wautolfn.exe", L"%systemroot%\\SysWOW64\\autolfn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\avicap.dll", NULL},
    {L"wavicap.dll", L"%systemroot%\\SysWOW64\\avicap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avicap32.dll", NULL},
    {L"wavicap32.dll", L"%systemroot%\\SysWOW64\\avicap32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avifil32.dll", NULL},
    {L"wavifil32.dll", L"%systemroot%\\SysWOW64\\avifil32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avifile.dll", NULL},
    {L"wavifile.dll", L"%systemroot%\\SysWOW64\\avifile.dll", NULL},
    {L"wavmcoxp.dll", L"%systemroot%\\SysWOW64\\avmcoxp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\azroles.dll", NULL},
    {L"wazroles.dll", L"%systemroot%\\SysWOW64\\azroles.dll", NULL},
    {NULL, L"%systemroot%\\system32\\azroleui.dll", NULL},
    {L"wazroleui.dll", L"%systemroot%\\SysWOW64\\azroleui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\b57amd64.sys", NULL},
    {NULL, L"%systemroot%\\system32\\administration\\backsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\basesrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\batmeter.dll", NULL},
    {L"wbatmeter.dll", L"%systemroot%\\SysWOW64\\batmeter.dll", NULL},
    {NULL, L"%systemroot%\\system32\\batt.dll", NULL},
    {L"wbatt.dll", L"%systemroot%\\SysWOW64\\batt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\battc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\bdaplgin.ax", NULL},
    {L"wbdaplgin.ax", L"%systemroot%\\SysWOW64\\bdaplgin.ax", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\beep.sys", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\bhsupp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bidispl.dll", NULL},
    {L"wbidispl.dll", L"%systemroot%\\SysWOW64\\bidispl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\big5.nls", NULL},
    {NULL, L"%systemroot%\\system32\\binlsvc.dll", NULL},
    {L"wbinlsvc.dll", L"%systemroot%\\SysWOW64\\binlsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\bitsoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bitsprx2.dll", NULL},
    {L"wblackbox.dll", L"%systemroot%\\SysWOW64\\blackbox.dll", NULL},
    {NULL, L"%systemroot%\\help\\bnts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\administration\\bomsnap.dll", NULL},
    {L"bhp002.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\BONE.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\bootcfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\bootvid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bopomofo.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\breecemc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\browscap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\browselc.dll", NULL},
    {L"wbrowselc.dll", L"%systemroot%\\SysWOW64\\browselc.dll", NULL},
    {L"bhp003.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\browser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\browser.dll", NULL},
    {L"wbrowser.dll", L"%systemroot%\\SysWOW64\\browser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\browseui.dll", NULL},
    {L"wbrowseui.dll", L"%systemroot%\\SysWOW64\\browseui.dll", NULL},
    {L"wbrowsewm.dll", L"%systemroot%\\SysWOW64\\browsewm.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\brpinfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\btpagnt.dll", NULL},
    {L"wbtpagnt.dll", L"%systemroot%\\SysWOW64\\btpagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\bulltlp3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\c_037.nls", NULL},
    {L"wc_037.nls", L"%systemroot%\\SysWOW64\\c_037.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10000.nls", NULL},
    {L"wc_10000.nls", L"%systemroot%\\SysWOW64\\c_10000.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10001.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10002.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10003.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10004.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10005.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10006.nls", NULL},
    {L"wc_10006.nls", L"%systemroot%\\SysWOW64\\c_10006.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10007.nls", NULL},
    {L"wc_10007.nls", L"%systemroot%\\SysWOW64\\c_10007.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10008.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10010.nls", NULL},
    {L"wc_10010.nls", L"%systemroot%\\SysWOW64\\c_10010.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10017.nls", NULL},
    {L"wc_10017.nls", L"%systemroot%\\SysWOW64\\c_10017.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10021.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10029.nls", NULL},
    {L"wc_10029.nls", L"%systemroot%\\SysWOW64\\c_10029.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10079.nls", NULL},
    {L"wc_10079.nls", L"%systemroot%\\SysWOW64\\c_10079.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10081.nls", NULL},
    {L"wc_10081.nls", L"%systemroot%\\SysWOW64\\c_10081.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10082.nls", NULL},
    {L"wc_10082.nls", L"%systemroot%\\SysWOW64\\c_10082.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1026.nls", NULL},
    {L"wc_1026.nls", L"%systemroot%\\SysWOW64\\c_1026.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1047.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1140.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1141.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1142.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1143.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1144.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1145.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1146.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1147.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1148.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1149.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1250.nls", NULL},
    {L"wc_1250.nls", L"%systemroot%\\SysWOW64\\c_1250.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1251.nls", NULL},
    {L"wc_1251.nls", L"%systemroot%\\SysWOW64\\c_1251.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1252.nls", NULL},
    {L"wc_1252.nls", L"%systemroot%\\SysWOW64\\c_1252.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1253.nls", NULL},
    {L"wc_1253.nls", L"%systemroot%\\SysWOW64\\c_1253.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1254.nls", NULL},
    {L"wc_1254.nls", L"%systemroot%\\SysWOW64\\c_1254.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1255.nls", NULL},
    {L"wc_1255.nls", L"%systemroot%\\SysWOW64\\c_1255.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1256.nls", NULL},
    {L"wc_1256.nls", L"%systemroot%\\SysWOW64\\c_1256.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1257.nls", NULL},
    {L"wc_1257.nls", L"%systemroot%\\SysWOW64\\c_1257.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1258.nls", NULL},
    {L"wc_1258.nls", L"%systemroot%\\SysWOW64\\c_1258.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1361.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20000.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20001.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20002.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20003.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20004.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20005.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20105.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20106.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20107.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20108.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20127.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20261.nls", NULL},
    {L"wc_20261.nls", L"%systemroot%\\SysWOW64\\c_20261.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20269.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20273.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20277.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20278.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20280.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20284.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20285.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20290.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20297.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20420.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20423.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20424.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20833.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20838.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20866.nls", NULL},
    {L"wc_20866.nls", L"%systemroot%\\SysWOW64\\c_20866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20871.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20880.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20905.nls", NULL},
    {L"wc_20905.nls", L"%systemroot%\\SysWOW64\\c_20905.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20924.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20932.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20936.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20949.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21025.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21027.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21866.nls", NULL},
    {L"wc_21866.nls", L"%systemroot%\\SysWOW64\\c_21866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28591.nls", NULL},
    {L"wc_28591.nls", L"%systemroot%\\SysWOW64\\c_28591.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28592.nls", NULL},
    {L"wc_28592.nls", L"%systemroot%\\SysWOW64\\c_28592.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28593.nls", NULL},
    {L"wc_28593.nls", L"%systemroot%\\SysWOW64\\c_28593.nls", NULL},
    {NULL, L"%systemroot%\\system32\\C_28594.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28595.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28596.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28597.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\c_28598.nls", NULL},
    {L"wc_28598.nls", L"%systemroot%\\SysWOW64\\c_28598.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28599.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28603.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28605.nls", NULL},
    {L"wc_28605.nls", L"%systemroot%\\SysWOW64\\c_28605.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_437.nls", NULL},
    {L"wc_437.nls", L"%systemroot%\\SysWOW64\\c_437.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_500.nls", NULL},
    {L"wc_500.nls", L"%systemroot%\\SysWOW64\\c_500.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_708.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_720.nls", NULL},
    {L"wc_720.nls", L"%systemroot%\\SysWOW64\\c_720.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_737.nls", NULL},
    {L"wc_737.nls", L"%systemroot%\\SysWOW64\\c_737.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_775.nls", NULL},
    {L"wc_775.nls", L"%systemroot%\\SysWOW64\\c_775.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_850.nls", NULL},
    {L"wc_850.nls", L"%systemroot%\\SysWOW64\\c_850.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_852.nls", NULL},
    {L"wc_852.nls", L"%systemroot%\\SysWOW64\\c_852.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_855.nls", NULL},
    {L"wc_855.nls", L"%systemroot%\\SysWOW64\\c_855.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_857.nls", NULL},
    {L"wc_857.nls", L"%systemroot%\\SysWOW64\\c_857.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_858.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_860.nls", NULL},
    {L"wc_860.nls", L"%systemroot%\\SysWOW64\\c_860.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_861.nls", NULL},
    {L"wc_861.nls", L"%systemroot%\\SysWOW64\\c_861.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_862.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_863.nls", NULL},
    {L"wc_863.nls", L"%systemroot%\\SysWOW64\\c_863.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_864.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_865.nls", NULL},
    {L"wc_865.nls", L"%systemroot%\\SysWOW64\\c_865.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_866.nls", NULL},
    {L"wc_866.nls", L"%systemroot%\\SysWOW64\\c_866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_869.nls", NULL},
    {L"wc_869.nls", L"%systemroot%\\SysWOW64\\c_869.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_870.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_874.nls", NULL},
    {L"wc_874.nls", L"%systemroot%\\SysWOW64\\c_874.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_875.nls", NULL},
    {L"wc_875.nls", L"%systemroot%\\SysWOW64\\c_875.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_932.nls", NULL},
    {L"wc_932.nls", L"%systemroot%\\SysWOW64\\c_932.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_936.nls", NULL},
    {L"wc_936.nls", L"%systemroot%\\SysWOW64\\c_936.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_949.nls", NULL},
    {L"wc_949.nls", L"%systemroot%\\SysWOW64\\c_949.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_950.nls", NULL},
    {L"wc_950.nls", L"%systemroot%\\SysWOW64\\c_950.nls", NULL},
    {L"wc_eucdb.dll", L"%systemroot%\\SysWOW64\\c_eucdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_g18030.dll", NULL},
    {L"wc_g18030.dll", L"%systemroot%\\SysWOW64\\c_g18030.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_is2022.dll", NULL},
    {L"wc_is2022.dll", L"%systemroot%\\SysWOW64\\c_is2022.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_iscii.dll", NULL},
    {L"wc_iscii.dll", L"%systemroot%\\SysWOW64\\c_iscii.dll", NULL},
    {L"wc_snadb.dll", L"%systemroot%\\SysWOW64\\c_snadb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cabinet.dll", NULL},
    {L"wcabinet.dll", L"%systemroot%\\SysWOW64\\cabinet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cabview.dll", NULL},
    {L"wcabview.dll", L"%systemroot%\\SysWOW64\\cabview.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cacls.exe", NULL},
    {L"wcacls.exe", L"%systemroot%\\SysWOW64\\cacls.exe", NULL},
    {NULL, L"%systemroot%\\system32\\calc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\camocx.dll", NULL},
    {L"wcamocx.dll", L"%systemroot%\\SysWOW64\\camocx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\capesnpn.dll", NULL},
    {L"wcapesnpn.dll", L"%systemroot%\\SysWOW64\\capesnpn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cards.dll", NULL},
    {L"wcards.dll", L"%systemroot%\\SysWOW64\\cards.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrvps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrvut.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cbidf2k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\CCDECODE.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ccfapi32.dll", NULL},
    {L"wccfapi32.dll", L"%systemroot%\\SysWOW64\\ccfapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ccfgnt.dll", NULL},
    {L"wccfgnt.dll", L"%systemroot%\\SysWOW64\\ccfgnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cdfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cdfview.dll", NULL},
    {L"wcdfview.dll", L"%systemroot%\\SysWOW64\\cdfview.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cdosys.dll", NULL},
    {L"wcdosys.dll", L"%systemroot%\\SysWOW64\\cdosys.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cdrom.sys", NULL},
    {NULL, L"%systemroot%\\system32\\certadm.dll", NULL},
    {L"wcertadm.dll", L"%systemroot%\\SysWOW64\\certadm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certcli.dll", NULL},
    {L"wcertcli.dll", L"%systemroot%\\SysWOW64\\certcli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certenc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certmgr.dll", NULL},
    {L"wcertmgr.dll", L"%systemroot%\\SysWOW64\\certmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certmmc.dll", NULL},
    {L"wcertmmc.dll", L"%systemroot%\\SysWOW64\\certmmc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\certobj.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\Setup\\certocm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certpdef.dll", NULL},
    {L"wcertpdef.dll", L"%systemroot%\\SysWOW64\\certpdef.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certreq.exe", NULL},
    {L"wcertreq.exe", L"%systemroot%\\SysWOW64\\certreq.exe", NULL},
    {NULL, L"%systemroot%\\system32\\certsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\certtmpl.dll", NULL},
    {L"wcerttmpl.dll", L"%systemroot%\\SysWOW64\\certtmpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certutil.exe", NULL},
    {L"wcertutil.exe", L"%systemroot%\\SysWOW64\\certutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\certxds.dll", NULL},
    {L"wcertxds.dll", L"%systemroot%\\SysWOW64\\certxds.dll", NULL},
    {L"wcewmdm.dll", L"%systemroot%\\SysWOW64\\cewmdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cfgbkend.dll", NULL},
    {NULL, L"%systemroot%\\system32\\chajei.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\change.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\changer.sys", NULL},
    {NULL, L"%systemroot%\\system32\\charmap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chglogon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chgport.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chgusr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chkdsk.exe", NULL},
    {L"wchkdsk.exe", L"%systemroot%\\SysWOW64\\chkdsk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chkntfs.exe", NULL},
    {L"wchkntfs.exe", L"%systemroot%\\SysWOW64\\chkntfs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\choice.exe", NULL},
    {L"wchoice.exe", L"%systemroot%\\SysWOW64\\choice.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chsbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\chtbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTMBX.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKDIC.DIC", L"intl.inf"},
    {L"wCHTSKDIC.DIC", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKDIC.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKDIC.DLL", L"intl.inf"},
    {L"wCHTSKDIC.DLL", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKDIC.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKF.DLL", L"intl.inf"},
    {L"wCHTSKF.DLL", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKF.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\ciadmin.dll", NULL},
    {L"wciadmin.dll", L"%systemroot%\\SysWOW64\\ciadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cic.dll", NULL},
    {L"wcic.dll", L"%systemroot%\\SysWOW64\\cic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cidaemon.exe", NULL},
    {L"wcidaemon.exe", L"%systemroot%\\SysWOW64\\cidaemon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\cimwin32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTIME.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGB.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGD.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGIE.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\CINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGSI.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGU.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGUC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTSETP.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\ciodm.dll", NULL},
    {L"wciodm.dll", L"%systemroot%\\SysWOW64\\ciodm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cipher.exe", NULL},
    {L"wcipher.exe", L"%systemroot%\\SysWOW64\\cipher.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cisvc.exe", NULL},
    {L"wcisvc.exe", L"%systemroot%\\SysWOW64\\cisvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ckcnv.exe", NULL},
    {L"wckcnv.exe", L"%systemroot%\\SysWOW64\\ckcnv.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClAdmWiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\classpnp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\clb.dll", NULL},
    {L"wclb.dll", L"%systemroot%\\SysWOW64\\clb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clbcatex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clbcatq.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClCfgSrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cleanmgr.exe", NULL},
    {L"wcleanmgr.exe", L"%systemroot%\\SysWOW64\\cleanmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cleanri.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clip.exe", NULL},
    {L"wclip.exe", L"%systemroot%\\SysWOW64\\clip.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clipbrd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clipsrv.exe", NULL},
    {L"wclipsrv.exe", L"%systemroot%\\SysWOW64\\clipsrv.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClNetRes.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClNetREx.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\CluAdmEx.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\CluAdmin.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\CluAdMMC.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clusapi.dll", NULL},
    {L"wclusapi.dll", L"%systemroot%\\SysWOW64\\clusapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\clusdisk.sys", NULL},
    {L"IIS_clusftp.vbs", L"%systemroot%\\system32\\inetsrv\\clusftp.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\ClusNet.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\clusocm.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClusRes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ClusSprt.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\ClusSvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cluster.exe", NULL},
    {L"wcluster.exe", L"%systemroot%\\SysWOW64\\cluster.exe", NULL},
    {L"IIS_clusweb.vbs", L"%systemroot%\\system32\\inetsrv\\clusweb.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\ClusWMI.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cmbp0wdm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cmcfg32.dll", NULL},
    {L"wcmcfg32.dll", L"%systemroot%\\SysWOW64\\cmcfg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmd.exe", NULL},
    {L"wcmd.exe", L"%systemroot%\\SysWOW64\\cmd.exe", NULL},
    {L"evtgprov.dll", L"%systemroot%\\system32\\wbem\\CmdEvTgProv.dll", NULL},
    {L"wevtgprov.dll", L"%systemroot%\\SysWOW64\\wbem\\CmdEvTgProv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmdial32.dll", NULL},
    {L"wcmdial32.dll", L"%systemroot%\\SysWOW64\\cmdial32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cmdide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cmdkey.exe", NULL},
    {L"wcmdkey.exe", L"%systemroot%\\SysWOW64\\cmdkey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmdl32.exe", NULL},
    {L"wcmdl32.exe", L"%systemroot%\\SysWOW64\\cmdl32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmmon32.exe", NULL},
    {L"wcmmon32.exe", L"%systemroot%\\SysWOW64\\cmmon32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmpbk32.dll", NULL},
    {L"wcmpbk32.dll", L"%systemroot%\\SysWOW64\\cmpbk32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmprops.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmstp.exe", NULL},
    {L"wcmstp.exe", L"%systemroot%\\SysWOW64\\cmstp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmutil.dll", NULL},
    {L"wcmutil.dll", L"%systemroot%\\SysWOW64\\cmutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnbjmon.dll", NULL},
    {L"wcnbjmon.dll", L"%systemroot%\\SysWOW64\\cnbjmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnetcfg.dll", NULL},
    {L"wcnetcfg.dll", L"%systemroot%\\SysWOW64\\cnetcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnvfat.dll", NULL},
    {L"wcnvfat.dll", L"%systemroot%\\SysWOW64\\cnvfat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\colbact.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comaddin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comcat.dll", NULL},
    {L"wcomcat.dll", L"%systemroot%\\SysWOW64\\comcat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comclust.exe", NULL},
    {L"wcommdlg.dll", L"%systemroot%\\SysWOW64\\commdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comp.exe", NULL},
    {L"wcomp.exe", L"%systemroot%\\SysWOW64\\comp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\compact.exe", NULL},
    {L"wcompact.exe", L"%systemroot%\\SysWOW64\\compact.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\compbatt.sys", NULL},
    {L"wcompobj.dll", L"%systemroot%\\SysWOW64\\compobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compstui.dll", NULL},
    {L"wcompstui.dll", L"%systemroot%\\SysWOW64\\compstui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comrepl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comrepl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comrereg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\comres.dll", NULL},
    {L"wcomres.dll", L"%systemroot%\\SysWOW64\\comres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\comsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comsvcs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comuid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\confmsp.dll", NULL},
    {L"wconfmsp.dll", L"%systemroot%\\SysWOW64\\confmsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\conime.exe", NULL},
    {L"wconime.exe", L"%systemroot%\\SysWOW64\\conime.exe", NULL},
    {NULL, L"%systemroot%\\system32\\console.dll", NULL},
    {L"wconsole.dll", L"%systemroot%\\SysWOW64\\console.dll", NULL},
    {NULL, L"%systemroot%\\system32\\control.exe", NULL},
    {L"wcontrol.exe", L"%systemroot%\\SysWOW64\\control.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ContRot.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\convert.exe", NULL},
    {L"wconvert.exe", L"%systemroot%\\SysWOW64\\convert.exe", NULL},
    {NULL, L"%systemroot%\\system32\\convlog.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\convmsg.dll", NULL},
    {L"wconvmsg.dll", L"%systemroot%\\SysWOW64\\convmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\corpol.dll", NULL},
    {L"wcorpol.dll", L"%systemroot%\\SysWOW64\\corpol.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\cplexe.exe", L"intl.inf"},
    {L"wcplexe.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\cplexe.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\cpqarry2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cpqcissm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cprofile.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\crcdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\credui.dll", NULL},
    {L"wcredui.dll", L"%systemroot%\\SysWOW64\\credui.dll", NULL},
    {L"wcrtdll.dll", L"%systemroot%\\SysWOW64\\crtdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csamsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cscdll.dll", NULL},
    {L"wcscdll.dll", L"%systemroot%\\SysWOW64\\cscdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cscript.exe", NULL},
    {L"wcscript.exe", L"%systemroot%\\SysWOW64\\cscript.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cscui.dll", NULL},
    {L"wcscui.dll", L"%systemroot%\\SysWOW64\\cscui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csrsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csrss.exe", NULL},
    {L"wcsseqchk.dll", L"%systemroot%\\SysWOW64\\csseqchk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csvde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ctfmon.exe", NULL},
    {L"wctfmon.exe", L"%systemroot%\\SysWOW64\\ctfmon.exe", NULL},
    {L"wctl3d32.dll", L"%systemroot%\\SysWOW64\\ctl3d32.dll", NULL},
    {L"wctl3dv2.dll", L"%systemroot%\\SysWOW64\\ctl3dv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ctype.nls", NULL},
    {L"wctype.nls", L"%systemroot%\\SysWOW64\\ctype.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyclad-z.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyclom-y.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cys.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cyycoins.dll", NULL},
    {L"wcyycoins.dll", L"%systemroot%\\SysWOW64\\cyycoins.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyyport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyyports.dll", NULL},
    {L"wcyyports.dll", L"%systemroot%\\SysWOW64\\cyyports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cyzcoins.dll", NULL},
    {L"wcyzcoins.dll", L"%systemroot%\\SysWOW64\\cyzcoins.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyzport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyzports.dll", NULL},
    {L"wcyzports.dll", L"%systemroot%\\SysWOW64\\cyzports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3d8.dll", NULL},
    {L"wd3d8.dll", L"%systemroot%\\SysWOW64\\d3d8.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3d8thk.dll", NULL},
    {L"wd3d8thk.dll", L"%systemroot%\\SysWOW64\\d3d8thk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dim.dll", NULL},
    {L"wd3dim.dll", L"%systemroot%\\SysWOW64\\d3dim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dim700.dll", NULL},
    {L"wd3dim700.dll", L"%systemroot%\\SysWOW64\\d3dim700.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dpmesh.dll", NULL},
    {L"wd3dpmesh.dll", L"%systemroot%\\SysWOW64\\d3dpmesh.dll", NULL},
    {L"wd3dramp.dll", L"%systemroot%\\SysWOW64\\d3dramp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3drm.dll", NULL},
    {L"wd3drm.dll", L"%systemroot%\\SysWOW64\\d3drm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dxof.dll", NULL},
    {L"wd3dxof.dll", L"%systemroot%\\SysWOW64\\d3dxof.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dac2w2k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dac960nt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\danim.dll", NULL},
    {L"wdanim.dll", L"%systemroot%\\SysWOW64\\danim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dataclen.dll", NULL},
    {L"wdataclen.dll", L"%systemroot%\\SysWOW64\\dataclen.dll", NULL},
    {NULL, L"%systemroot%\\system32\\datime.dll", NULL},
    {L"wdatime.dll", L"%systemroot%\\SysWOW64\\datime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\davcdata.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\davclnt.dll", NULL},
    {L"wdavclnt.dll", L"%systemroot%\\SysWOW64\\davclnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\daxctle.ocx", NULL},
    {L"wdaxctle.ocx", L"%systemroot%\\SysWOW64\\daxctle.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\dayi.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\dbgeng.dll", NULL},
    {L"wdbgeng.dll", L"%systemroot%\\SysWOW64\\dbgeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dbghelp.dll", NULL},
    {L"wdbghelp.dll", L"%systemroot%\\SysWOW64\\dbghelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcgpofix.exe", NULL},
    {L"wdcgpofix.exe", L"%systemroot%\\SysWOW64\\dcgpofix.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dciman32.dll", NULL},
    {L"wdciman32.dll", L"%systemroot%\\SysWOW64\\dciman32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcomcnfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dcphelp.exe", NULL},
    {L"wdcphelp.exe", L"%systemroot%\\SysWOW64\\dcphelp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dcpromo.dll", NULL},
    {L"wdcpromo.dll", L"%systemroot%\\SysWOW64\\dcpromo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcpromo.exe", NULL},
    {L"wddeml.dll", L"%systemroot%\\SysWOW64\\ddeml.dll", NULL},
    {L"wddeshare.exe", L"%systemroot%\\SysWOW64\\ddeshare.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ddraw.dll", NULL},
    {L"wddraw.dll", L"%systemroot%\\SysWOW64\\ddraw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ddrawex.dll", NULL},
    {L"wddrawex.dll", L"%systemroot%\\SysWOW64\\ddrawex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ddrop.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\ddsmc.sys", NULL},
    {NULL, L"%systemroot%\\Cluster\\DebugEx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\defrag.exe", NULL},
    {NULL, L"%systemroot%\\system32\\desk.cpl", NULL},
    {L"wdesk.cpl", L"%systemroot%\\SysWOW64\\desk.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\deskadp.dll", NULL},
    {L"wdeskadp.dll", L"%systemroot%\\SysWOW64\\deskadp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\deskmon.dll", NULL},
    {L"wdeskmon.dll", L"%systemroot%\\SysWOW64\\deskmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\deskperf.dll", NULL},
    {L"wdeskperf.dll", L"%systemroot%\\SysWOW64\\deskperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\devenum.dll", NULL},
    {L"wdevenum.dll", L"%systemroot%\\SysWOW64\\devenum.dll", NULL},
    {NULL, L"%systemroot%\\system32\\devmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgfat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgifc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgifps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgntfs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dfscmd.exe", NULL},
    {L"wdfscmd.exe", L"%systemroot%\\SysWOW64\\dfscmd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfscore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsgui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsinit.exe", NULL},
    {L"wdfsinit.exe", L"%systemroot%\\SysWOW64\\dfsinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfssetup.dll", NULL},
    {L"wdfssetup.dll", L"%systemroot%\\SysWOW64\\dfssetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsshlex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfssvc.exe", NULL},
    {L"wdfssvc.exe", L"%systemroot%\\SysWOW64\\dfssvc.exe", NULL},
    {L"wdgconfig.dll", L"%systemroot%\\SysWOW64\\dgconfig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dgnet.dll", NULL},
    {L"wdgsetup.dll", L"%systemroot%\\SysWOW64\\dgsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpcsvc.dll", NULL},
    {L"wdhcpcsvc.dll", L"%systemroot%\\SysWOW64\\dhcpcsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpmib.dll", NULL},
    {L"wdhcpmib.dll", L"%systemroot%\\SysWOW64\\dhcpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpmon.dll", NULL},
    {L"wdhcpmon.dll", L"%systemroot%\\SysWOW64\\dhcpmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpsapi.dll", NULL},
    {L"wdhcpsapi.dll", L"%systemroot%\\SysWOW64\\dhcpsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpsnap.dll", NULL},
    {L"wdhcpsnap.dll", L"%systemroot%\\SysWOW64\\dhcpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpssvc.dll", NULL},
    {L"wdhcpssvc.dll", L"%systemroot%\\SysWOW64\\dhcpssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpwiz.exe", NULL},
    {L"wDHTMLED.OCX", L"%commonprogramfiles(x86)%\\Microsoft Shared\\Triedit\\DHTMLED.OCX", NULL},
    {NULL, L"%systemroot%\\system32\\diactfrm.dll", NULL},
    {L"wdiactfrm.dll", L"%systemroot%\\SysWOW64\\diactfrm.dll", NULL},
    {NULL, L"%systemroot%\\dialer.exe", NULL},
    {NULL, L"%systemroot%\\system32\\diantz.exe", NULL},
    {L"wdiantz.exe", L"%systemroot%\\SysWOW64\\diantz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\digest.dll", NULL},
    {L"wwdigest.dll", L"%systemroot%\\SysWOW64\\digest.dll", NULL},
    {L"wdigiinf.dll", L"%systemroot%\\SysWOW64\\digiinf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\digirlpt.dll", NULL},
    {L"wdigirlpt.dll", L"%systemroot%\\SysWOW64\\digirlpt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\digirlpt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dimap.dll", NULL},
    {L"wdimap.dll", L"%systemroot%\\SysWOW64\\dimap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dinput.dll", NULL},
    {L"wdinput.dll", L"%systemroot%\\SysWOW64\\dinput.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dinput8.dll", NULL},
    {L"wdinput8.dll", L"%systemroot%\\SysWOW64\\dinput8.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\directdb.dll", NULL},
    {L"wdirectdb.dll", L"%commonprogramfiles(x86)%\\System\\directdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\disk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\diskcopy.dll", NULL},
    {L"wdiskcopy.dll", L"%systemroot%\\SysWOW64\\diskcopy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\diskdump.sys", NULL},
    {NULL, L"%systemroot%\\system32\\diskpart.exe", NULL},
    {NULL, L"%systemroot%\\system32\\diskperf.exe", NULL},
    {L"wdiskperf.exe", L"%systemroot%\\SysWOW64\\diskperf.exe", NULL},
    {L"wdisrvci.dll", L"%systemroot%\\SysWOW64\\disrvci.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dllhost.exe", NULL},
    {L"wdllhost.exe", L"%systemroot%\\SysWOW64\\dllhost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dllhst3g.exe", NULL},
    {L"wdllhst3g.exe", L"%systemroot%\\SysWOW64\\dllhst3g.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dlttape.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmboot.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmconfig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdlgs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdskmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdskres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmintf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmivcitf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmload.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmocx.dll", NULL},
    {L"wdmocx.dll", L"%systemroot%\\SysWOW64\\dmocx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmremote.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dmserver.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmvdsitf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmview.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\dns.exe", NULL},
    {L"wdns.exe", L"%systemroot%\\SysWOW64\\dns.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dnsapi.dll", NULL},
    {L"wdnsapi.dll", L"%systemroot%\\SysWOW64\\dnsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsmgr.dll", NULL},
    {L"wdnsmgr.dll", L"%systemroot%\\SysWOW64\\dnsmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsperf.dll", NULL},
    {L"wdnsperf.dll", L"%systemroot%\\SysWOW64\\dnsperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\dnsprov.dll", NULL},
    {L"wdnsprov.dll", L"%systemroot%\\SysWOW64\\wbem\\dnsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsrslvr.dll", NULL},
    {L"wdnsrslvr.dll", L"%systemroot%\\SysWOW64\\dnsrslvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnswiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\docprop.dll", NULL},
    {L"wdocprop.dll", L"%systemroot%\\SysWOW64\\docprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\docprop2.dll", NULL},
    {L"wdocprop2.dll", L"%systemroot%\\SysWOW64\\docprop2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\domadmin.dll", NULL},
    {L"wdomadmin.dll", L"%systemroot%\\SysWOW64\\domadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\doskey.exe", NULL},
    {L"wdoskey.exe", L"%systemroot%\\SysWOW64\\doskey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4Prt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4Scan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4usb.sys", NULL},
    {L"wdplaysvr.exe", L"%systemroot%\\SysWOW64\\dplaysvr.exe", NULL},
    {L"wdplayx.dll", L"%systemroot%\\SysWOW64\\dplayx.dll", NULL},
    {L"wdpmodemx.dll", L"%systemroot%\\SysWOW64\\dpmodemx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnaddr.dll", NULL},
    {L"wdpnaddr.dll", L"%systemroot%\\SysWOW64\\dpnaddr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnet.dll", NULL},
    {L"wdpnet.dll", L"%systemroot%\\SysWOW64\\dpnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnhpast.dll", NULL},
    {L"wdpnhpast.dll", L"%systemroot%\\SysWOW64\\dpnhpast.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnhupnp.dll", NULL},
    {L"wdpnhupnp.dll", L"%systemroot%\\SysWOW64\\dpnhupnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnlobby.dll", NULL},
    {L"wdpnlobby.dll", L"%systemroot%\\SysWOW64\\dpnlobby.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnsvr.exe", NULL},
    {L"wdpnsvr.exe", L"%systemroot%\\SysWOW64\\dpnsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dpti2o.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dpvacm.dll", NULL},
    {L"wdpvacm.dll", L"%systemroot%\\SysWOW64\\dpvacm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpvoice.dll", NULL},
    {L"wdpvoice.dll", L"%systemroot%\\SysWOW64\\dpvoice.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpvsetup.exe", NULL},
    {L"wdpvsetup.exe", L"%systemroot%\\SysWOW64\\dpvsetup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dpvvox.dll", NULL},
    {L"wdpvvox.dll", L"%systemroot%\\SysWOW64\\dpvvox.dll", NULL},
    {L"wdpwsockx.dll", L"%systemroot%\\SysWOW64\\dpwsockx.dll", NULL},
    {L"drvqry.exe", L"%systemroot%\\system32\\driverquery.exe", NULL},
    {L"wdrvqry.exe", L"%systemroot%\\SysWOW64\\driverquery.exe", NULL},
    {L"wdrmv2clt.dll", L"%systemroot%\\SysWOW64\\drmv2clt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drprov.dll", NULL},
    {L"wdrprov.dll", L"%systemroot%\\SysWOW64\\drprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drwtsn32.exe", NULL},
    {L"wdrwtsn32.exe", L"%systemroot%\\SysWOW64\\drwtsn32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsadd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsadmin.dll", NULL},
    {L"wdsadmin.dll", L"%systemroot%\\SysWOW64\\dsadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsauth.dll", NULL},
    {L"wdsauth.dll", L"%systemroot%\\SysWOW64\\dsauth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsdmo.dll", NULL},
    {L"wdsdmo.dll", L"%systemroot%\\SysWOW64\\dsdmo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsdmoprp.dll", NULL},
    {L"wdsdmoprp.dll", L"%systemroot%\\SysWOW64\\dsdmoprp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsget.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dskquota.dll", NULL},
    {L"wdskquota.dll", L"%systemroot%\\SysWOW64\\dskquota.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dskquoui.dll", NULL},
    {L"wdskquoui.dll", L"%systemroot%\\SysWOW64\\dskquoui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsmod.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsmove.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsound.dll", NULL},
    {L"wdsound.dll", L"%systemroot%\\SysWOW64\\dsound.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsound3d.dll", NULL},
    {L"wdsound3d.dll", L"%systemroot%\\SysWOW64\\dsound3d.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsprop.dll", NULL},
    {L"wdsprop.dll", L"%systemroot%\\SysWOW64\\dsprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\dsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsquery.dll", NULL},
    {L"wdsquery.dll", L"%systemroot%\\SysWOW64\\dsquery.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsquery.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsrestor.dll", NULL},
    {L"wdsrestor.dll", L"%systemroot%\\SysWOW64\\dsrestor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsrevt.dll", NULL},
    {L"wdsrevt.dll", L"%systemroot%\\SysWOW64\\dsrevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsrm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dssec.dll", NULL},
    {L"wdssec.dll", L"%systemroot%\\SysWOW64\\dssec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsuiext.dll", NULL},
    {L"wdsuiext.dll", L"%systemroot%\\SysWOW64\\dsuiext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsuiwiz.dll", NULL},
    {L"wdsuiwiz.dll", L"%systemroot%\\SysWOW64\\dsuiwiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dumprep.exe", NULL},
    {L"wdumprep.exe", L"%systemroot%\\SysWOW64\\dumprep.exe", NULL},
    {NULL, L"%systemroot%\\system32\\duser.dll", NULL},
    {L"wduser.dll", L"%systemroot%\\SysWOW64\\duser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dvdplay.exe", NULL},
    {L"wdvdplay.exe", L"%systemroot%\\SysWOW64\\dvdplay.exe", NULL},
    {L"wdvdupgrd.exe", L"%systemroot%\\SysWOW64\\dvdupgrd.exe", NULL},
    {L"dwil1033.dll", L"%systemroot%\\system32\\1033\\dwintl.dll", NULL},
    {L"wdwil1033.dll", L"%systemroot%\\SysWOW64\\1033\\dwintl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dwwin.exe", NULL},
    {L"wdwwin.exe", L"%systemroot%\\SysWOW64\\dwwin.exe", NULL},
    {L"wdx7vb.dll", L"%systemroot%\\SysWOW64\\dx7vb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dx8vb.dll", NULL},
    {L"wdx8vb.dll", L"%systemroot%\\SysWOW64\\dx8vb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dxdiag.exe", NULL},
    {L"wdxdiag.exe", L"%systemroot%\\SysWOW64\\dxdiag.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxg.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxgthk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dxmrtp.dll", NULL},
    {L"wdxmrtp.dll", L"%systemroot%\\SysWOW64\\dxmrtp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dxtmsft.dll", NULL},
    {L"wdxtmsft.dll", L"%systemroot%\\SysWOW64\\dxtmsft.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dxtrans.dll", NULL},
    {L"wdxtrans.dll", L"%systemroot%\\SysWOW64\\dxtrans.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\e10064ex.sys", NULL},
    {L"wedb500.dll", L"%systemroot%\\SysWOW64\\edb500.dll", NULL},
    {NULL, L"%systemroot%\\system32\\efsadu.dll", NULL},
    {L"wefsadu.dll", L"%systemroot%\\SysWOW64\\efsadu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\elmsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\els.dll", NULL},
    {L"wels.dll", L"%systemroot%\\SysWOW64\\els.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\enum1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ersvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\es.dll", NULL},
    {L"wes.dll", L"%systemroot%\\SysWOW64\\es.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esent.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esentprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esentutl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\esscli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\eudcedit.exe", NULL},
    {L"weudcedit.exe", L"%systemroot%\\SysWOW64\\eudcedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventcls.dll", NULL},
    {L"evcreate.exe", L"%systemroot%\\system32\\eventcreate.exe", NULL},
    {L"wevcreate.exe", L"%systemroot%\\SysWOW64\\eventcreate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventlog.dll", NULL},
    {L"evtquery.vbs", L"%systemroot%\\system32\\eventquery.vbs", NULL},
    {L"evtrig.exe", L"%systemroot%\\system32\\eventtriggers.exe", NULL},
    {L"wevtrig.exe", L"%systemroot%\\SysWOW64\\eventtriggers.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventvwr.exe", NULL},
    {L"weventvwr.exe", L"%systemroot%\\SysWOW64\\eventvwr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\evntagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\evntcmd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\evntrprv.dll", NULL},
    {L"wevntrprv.dll", L"%systemroot%\\SysWOW64\\wbem\\evntrprv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\evntwin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\exabyte2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\examc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\expand.exe", NULL},
    {L"wexpand.exe", L"%systemroot%\\SysWOW64\\expand.exe", NULL},
    {NULL, L"%systemroot%\\explorer.exe", NULL},
    {L"wexplorer.exe", L"%systemroot%\\SysWOW64\\explorer.exe", NULL},
    {L"wexpsrv.dll", L"%systemroot%\\SysWOW64\\expsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\exstrace.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\extrac32.exe", NULL},
    {L"wextrac32.exe", L"%systemroot%\\SysWOW64\\extrac32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\f3ahvoas.dll", NULL},
    {L"wf3ahvoas.dll", L"%systemroot%\\SysWOW64\\f3ahvoas.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\fastprox.dll", NULL},
    {NULL, L"%systemroot%\\system32\\faultrep.dll", NULL},
    {L"wfaultrep.dll", L"%systemroot%\\SysWOW64\\faultrep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fc.exe", NULL},
    {L"wfc.exe", L"%systemroot%\\SysWOW64\\fc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\fcachdll.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\fdc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fde.dll", NULL},
    {L"wfde.dll", L"%systemroot%\\SysWOW64\\fde.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fdeploy.dll", NULL},
    {L"wfdeploy.dll", L"%systemroot%\\SysWOW64\\fdeploy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\feclient.dll", NULL},
    {L"wfeclient.dll", L"%systemroot%\\SysWOW64\\feclient.dll", NULL},
    {NULL, L"%systemroot%\\system32\\filemgmt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\find.exe", NULL},
    {L"wfind.exe", L"%systemroot%\\SysWOW64\\find.exe", NULL},
    {NULL, L"%systemroot%\\system32\\findstr.exe", NULL},
    {L"wfindstr.exe", L"%systemroot%\\SysWOW64\\findstr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\finger.exe", NULL},
    {L"wfinger.exe", L"%systemroot%\\SysWOW64\\finger.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fips.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fixmapi.exe", NULL},
    {L"wfixmapi.exe", L"%systemroot%\\SysWOW64\\fixmapi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\flattemp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\flpydisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fmifs.dll", NULL},
    {L"wfmifs.dll", L"%systemroot%\\SysWOW64\\fmifs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontext.dll", NULL},
    {L"wfontext.dll", L"%systemroot%\\SysWOW64\\fontext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontsub.dll", NULL},
    {L"wfontsub.dll", L"%systemroot%\\SysWOW64\\fontsub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontview.exe", NULL},
    {L"wfontview.exe", L"%systemroot%\\SysWOW64\\fontview.exe", NULL},
    {NULL, L"%systemroot%\\system32\\forfiles.exe", NULL},
    {L"wforfiles.exe", L"%systemroot%\\SysWOW64\\forfiles.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\fp50ext.dll", NULL},
    {L"bhp004.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\FRAME.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\framebuf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\framedyn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\freedisk.exe", NULL},
    {L"wfreedisk.exe", L"%systemroot%\\SysWOW64\\freedisk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fs_rec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fsutil.exe", NULL},
    {L"wfsutil.exe", L"%systemroot%\\SysWOW64\\fsutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ftdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ftp.exe", NULL},
    {L"wftp.exe", L"%systemroot%\\SysWOW64\\ftp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ftpctrs2.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ftpmib.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ftpsvc2.dll", L"iis.inf"},
    {L"wftsrch.dll", L"%systemroot%\\SysWOW64\\ftsrch.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\fwdprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\G400d.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\G400m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\g711codc.ax", NULL},
    {L"wg711codc.ax", L"%systemroot%\\SysWOW64\\g711codc.ax", NULL},
    {NULL, L"%systemroot%\\system32\\gcdef.dll", NULL},
    {L"wgcdef.dll", L"%systemroot%\\SysWOW64\\gcdef.dll", NULL},
    {L"wgdi.exe", L"%systemroot%\\SysWOW64\\gdi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gdi32.dll", NULL},
    {L"wgdi32.dll", L"%systemroot%\\SysWOW64\\gdi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\geo.nls", NULL},
    {L"wgeo.nls", L"%systemroot%\\SysWOW64\\geo.nls", NULL},
    {NULL, L"%systemroot%\\system32\\getmac.exe", NULL},
    {L"wgetmac.exe", L"%systemroot%\\SysWOW64\\getmac.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gettype.exe", NULL},
    {L"wgettype.exe", L"%systemroot%\\SysWOW64\\gettype.exe", NULL},
    {NULL, L"%systemroot%\\system32\\getuname.dll", NULL},
    {NULL, L"%systemroot%\\system32\\glmf32.dll", NULL},
    {L"wglmf32.dll", L"%systemroot%\\SysWOW64\\glmf32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\glu32.dll", NULL},
    {L"wglu32.dll", L"%systemroot%\\SysWOW64\\glu32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\gm.dls", NULL},
    {NULL, L"%systemroot%\\system32\\gpedit.dll", NULL},
    {L"wgpedit.dll", L"%systemroot%\\SysWOW64\\gpedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpkcsp.dll", NULL},
    {L"wgpkcsp.dll", L"%systemroot%\\SysWOW64\\gpkcsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpkrsrc.dll", NULL},
    {L"wgpkrsrc.dll", L"%systemroot%\\SysWOW64\\gpkrsrc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\gpr400.sys", NULL},
    {L"gprslt.exe", L"%systemroot%\\system32\\gpresult.exe", NULL},
    {L"wgprslt.exe", L"%systemroot%\\SysWOW64\\gpresult.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gptext.dll", NULL},
    {L"wgptext.dll", L"%systemroot%\\SysWOW64\\gptext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpupdate.exe", NULL},
    {L"wgpupdate.exe", L"%systemroot%\\SysWOW64\\gpupdate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\grovel.exe", NULL},
    {NULL, L"%systemroot%\\system32\\grovmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\grpconv.exe", NULL},
    {L"wgrpconv.exe", L"%systemroot%\\SysWOW64\\grpconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\grserial.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\gzip.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\h323.tsp", NULL},
    {L"wh323.tsp", L"%systemroot%\\SysWOW64\\h323.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\h323msp.dll", NULL},
    {L"wh323msp.dll", L"%systemroot%\\SysWOW64\\h323msp.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\hanja.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\hanjadic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HCAppRes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hccoin.dll", NULL},
    {L"whccoin.dll", L"%systemroot%\\SysWOW64\\hccoin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hdwwiz.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\help.exe", NULL},
    {L"whelp.exe", L"%systemroot%\\SysWOW64\\help.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpHost.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpSvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\hexedit.dll", NULL},
    {NULL, L"%systemroot%\\hh.exe", NULL},
    {L"whh.exe", L"%systemroot%\\SysWOW64\\hh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\hhctrl.ocx", NULL},
    {L"whhctrl.ocx", L"%systemroot%\\SysWOW64\\hhctrl.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\mui\\0009\\hhctrlui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hhsetup.dll", NULL},
    {L"whhsetup.dll", L"%systemroot%\\SysWOW64\\hhsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hid.dll", NULL},
    {L"whid.dll", L"%systemroot%\\SysWOW64\\hid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidbatt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidgame.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidir.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidparse.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hidphone.tsp", NULL},
    {L"whidphone.tsp", L"%systemroot%\\SysWOW64\\hidphone.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\hidserv.dll", NULL},
    {L"whidserv.dll", L"%systemroot%\\SysWOW64\\hidserv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidusb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hlink.dll", NULL},
    {L"whlink.dll", L"%systemroot%\\SysWOW64\\hlink.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\HMMAPI.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\hnetcfg.dll", NULL},
    {L"whnetcfg.dll", L"%systemroot%\\SysWOW64\\hnetcfg.dll", NULL},
    {L"whnetmon.dll", L"%systemroot%\\SysWOW64\\hnetmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hostmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hostname.exe", NULL},
    {L"whostname.exe", L"%systemroot%\\SysWOW64\\hostname.exe", NULL},
    {NULL, L"%systemroot%\\system32\\hotplug.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpn.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpt4qic.sys", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\htrn_jis.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\http.sys", NULL},
    {NULL, L"%systemroot%\\system32\\httpapi.dll", NULL},
    {L"whttpapi.dll", L"%systemroot%\\SysWOW64\\httpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\httpext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\httpmib.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\httpodbc.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\htui.dll", NULL},
    {L"whtui.dll", L"%systemroot%\\SysWOW64\\htui.dll", NULL},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\HWXCHT.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\hwxjpn.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Applets\\hwxkor.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\i2omgmt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\i2omp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\i8042prt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ias.dll", NULL},
    {L"wias.dll", L"%systemroot%\\SysWOW64\\ias.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasacct.dll", NULL},
    {L"wiasacct.dll", L"%systemroot%\\SysWOW64\\iasacct.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasads.dll", NULL},
    {L"wiasads.dll", L"%systemroot%\\SysWOW64\\iasads.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iashlpr.dll", NULL},
    {L"wiashlpr.dll", L"%systemroot%\\SysWOW64\\iashlpr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasmmc.dll", NULL},
    {L"wiasmmc.dll", L"%systemroot%\\SysWOW64\\iasmmc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasnap.dll", NULL},
    {L"wiasnap.dll", L"%systemroot%\\SysWOW64\\iasnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasperf.dll", NULL},
    {L"wiasperf.dll", L"%systemroot%\\SysWOW64\\iasperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iaspolcy.dll", NULL},
    {L"wiaspolcy.dll", L"%systemroot%\\SysWOW64\\iaspolcy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasrad.dll", NULL},
    {L"wiasrad.dll", L"%systemroot%\\SysWOW64\\iasrad.dll", NULL},
    {L"wiasrecst.dll", L"%systemroot%\\SysWOW64\\iasrecst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassam.dll", NULL},
    {L"wiassam.dll", L"%systemroot%\\SysWOW64\\iassam.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassdo.dll", NULL},
    {L"wiassdo.dll", L"%systemroot%\\SysWOW64\\iassdo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassvcs.dll", NULL},
    {L"wiassvcs.dll", L"%systemroot%\\SysWOW64\\iassvcs.dll", NULL},
    {L"wibmsgnet.dll", L"%systemroot%\\SysWOW64\\ibmsgnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ibmvcap.sys", NULL},
    {NULL, L"%systemroot%\\system32\\icaapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icfgnt5.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ichaud.sys", NULL},
    {NULL, L"%systemroot%\\system32\\icm32.dll", NULL},
    {L"wicm32.dll", L"%systemroot%\\SysWOW64\\icm32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icmp.dll", NULL},
    {L"wicmp.dll", L"%systemroot%\\SysWOW64\\icmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icmui.dll", NULL},
    {L"wicmui.dll", L"%systemroot%\\SysWOW64\\icmui.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn1.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn2.exe", NULL},
    {NULL, L"%systemroot%\\system32\\icwdial.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwdl.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwhelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icwphbk.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwres.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwrmind.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwtutor.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\idq.dll", NULL},
    {L"widq.dll", L"%systemroot%\\SysWOW64\\idq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\idwlog.exe", NULL},
    {L"widwlog.exe", L"%systemroot%\\SysWOW64\\idwlog.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ie4uinit.exe", NULL},
    {L"wie4uinit.exe", L"%systemroot%\\SysWOW64\\ie4uinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ieakeng.dll", NULL},
    {L"wieakeng.dll", L"%systemroot%\\SysWOW64\\ieakeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ieaksie.dll", NULL},
    {L"wieaksie.dll", L"%systemroot%\\SysWOW64\\ieaksie.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ieakui.dll", NULL},
    {L"wieakui.dll", L"%systemroot%\\SysWOW64\\ieakui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iedkcs32.dll", NULL},
    {L"wiedkcs32.dll", L"%systemroot%\\SysWOW64\\iedkcs32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\MSInfo\\IEINFO5.OCX", NULL},
    {L"wIEINFO5.OCX", L"%commonprogramfiles(x86)%\\Microsoft Shared\\MSInfo\\IEINFO5.OCX", NULL},
    {NULL, L"%systemroot%\\system32\\iepeers.dll", NULL},
    {L"wiepeers.dll", L"%systemroot%\\SysWOW64\\iepeers.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iernonce.dll", NULL},
    {L"wiernonce.dll", L"%systemroot%\\SysWOW64\\iernonce.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iesetup.dll", NULL},
    {L"wiesetup.dll", L"%systemroot%\\SysWOW64\\iesetup.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\IEXPLORE.EXE", NULL},
    {NULL, L"%systemroot%\\system32\\iexpress.exe", NULL},
    {L"wiexpress.exe", L"%systemroot%\\SysWOW64\\iexpress.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ifmon.dll", NULL},
    {L"wifmon.dll", L"%systemroot%\\SysWOW64\\ifmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ifsutil.dll", NULL},
    {L"wifsutil.dll", L"%systemroot%\\SysWOW64\\ifsutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\igmpagnt.dll", NULL},
    {L"wigmpagnt.dll", L"%systemroot%\\SysWOW64\\igmpagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\igmpv2.dll", NULL},
    {L"wigmpv2.dll", L"%systemroot%\\SysWOW64\\igmpv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\iis.dll", NULL},
    {L"IIS_iis_switch.vbs", L"%systemroot%\\system32\\inetsrv\\iis_switch.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisadmin.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisapp.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisback.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iiscfg.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisclex4.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\IIsCnfg.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisext.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\IIsFtp.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\IIsFtpdr.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iislog.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iismui.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisres.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iissuba.dll", NULL},
    {L"wiissuba.dll", L"%systemroot%\\SysWOW64\\iissuba.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisuiobj.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisutil.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisvdir.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisw3adm.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisweb.vbs", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iiswmi.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\imadmui.dll", NULL},
    {L"wimadmui.dll", L"%systemroot%\\SysWOW64\\imadmui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imagehlp.dll", NULL},
    {L"wimagehlp.dll", L"%systemroot%\\SysWOW64\\imagehlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imapi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\imapi.sys", NULL},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\imekr.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imekr61.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imekrcic.dll", L"intl.inf"},
    {L"wimekrcic.dll", L"%systemroot%\\ime (x86)\\IMKR6_1\\imekrcic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Applets\\imekrmbx.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imekrmig.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imepadsm.dll", L"intl.inf"},
    {L"wimepadsm.dll", L"%systemroot%\\ime (x86)\\SHARED\\imepadsm.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imepadsv.exe", L"intl.inf"},
    {L"wimepadsv.exe", L"%systemroot%\\ime (x86)\\SHARED\\imepadsv.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imgutil.dll", NULL},
    {L"wimgutil.dll", L"%systemroot%\\SysWOW64\\imgutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imjp81.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imjp81k.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpcd.dic", L"intl.inf"},
    {L"wimjpcd.dic", L"%systemroot%\\ime (x86)\\IMJP8_1\\DICTS\\imjpcd.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpch.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpcic.dll", L"intl.inf"},
    {L"wimjpcic.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpcic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpcus.dll", L"intl.inf"},
    {L"wimjpcus.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpcus.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdadm.exe", L"intl.inf"},
    {L"wimjpdadm.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdadm.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdct.dll", L"intl.inf"},
    {L"wimjpdct.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdct.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdct.exe", L"intl.inf"},
    {L"wimjpdct.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdct.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdsvr.exe", L"intl.inf"},
    {L"wimjpdsvr.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdsvr.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpgn.grm", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpinst.exe", L"intl.inf"},
    {L"wimjpinst.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpinst.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpln.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpmig.exe", L"intl.inf"},
    {L"wimjpmig.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpmig.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpnm.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjprw.exe", L"intl.inf"},
    {L"wimjprw.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjprw.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpsb.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpst.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjptk.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpuex.exe", L"intl.inf"},
    {L"wimjpuex.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpuex.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjputy.exe", L"intl.inf"},
    {L"wimjputy.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjputy.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjputyc.dll", L"intl.inf"},
    {L"wimjputyc.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjputyc.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpzp.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imkrinst.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imlang.dll", L"intl.inf"},
    {L"wimlang.dll", L"%systemroot%\\ime (x86)\\SHARED\\imlang.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imm32.dll", NULL},
    {L"wimm32.dll", L"%systemroot%\\SysWOW64\\imm32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\IMSCINST.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\Setup\\imsinsnt.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\imskdic.dll", L"intl.inf"},
    {L"wimskdic.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\imskdic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\imskf.dll", L"intl.inf"},
    {L"wimskf.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\imskf.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\inetcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetcomm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetcpl.cpl", NULL},
    {L"winetcpl.cpl", L"%systemroot%\\SysWOW64\\inetcpl.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inetcplc.dll", NULL},
    {L"winetcplc.dll", L"%systemroot%\\SysWOW64\\inetcplc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\inetinfo.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetmib1.dll", NULL},
    {L"winetmib1.dll", L"%systemroot%\\SysWOW64\\inetmib1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetpp.dll", NULL},
    {L"winetpp.dll", L"%systemroot%\\SysWOW64\\inetpp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetppui.dll", NULL},
    {L"winetppui.dll", L"%systemroot%\\SysWOW64\\inetppui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetres.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\inetwiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\infocomm.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\infoctrs.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\infosoft.dll", NULL},
    {L"winfosoft.dll", L"%systemroot%\\SysWOW64\\infosoft.dll", NULL},
    {NULL, L"%systemroot%\\system32\\initpki.dll", NULL},
    {L"winitpki.dll", L"%systemroot%\\SysWOW64\\initpki.dll", NULL},
    {NULL, L"%systemroot%\\system32\\input.dll", NULL},
    {L"winput.dll", L"%systemroot%\\SysWOW64\\input.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inseng.dll", NULL},
    {L"winseng.dll", L"%systemroot%\\SysWOW64\\inseng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clients\\tsclient\\win32\\instmsia.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clients\\tsclient\\win32\\instmsiw.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\intelide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\interop_msxml.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\intl.cpl", NULL},
    {L"wintl.cpl", L"%systemroot%\\SysWOW64\\intl.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inuse.exe", NULL},
    {L"winuse.exe", L"%systemroot%\\SysWOW64\\inuse.exe", NULL},
    {NULL, L"%systemroot%\\system32\\iologmsg.dll", NULL},
    {L"wiologmsg.dll", L"%systemroot%\\SysWOW64\\iologmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipbootp.dll", NULL},
    {L"wipbootp.dll", L"%systemroot%\\SysWOW64\\ipbootp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipconf.tsp", NULL},
    {L"wipconf.tsp", L"%systemroot%\\SysWOW64\\ipconf.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\ipconfig.exe", NULL},
    {L"wipconfig.exe", L"%systemroot%\\SysWOW64\\ipconfig.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipfltdrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\iphlpapi.dll", NULL},
    {L"wiphlpapi.dll", L"%systemroot%\\SysWOW64\\iphlpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipmontr.dll", NULL},
    {L"wipmontr.dll", L"%systemroot%\\SysWOW64\\ipmontr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipnat.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ipnathlp.dll", NULL},
    {L"wipnathlp.dll", L"%systemroot%\\SysWOW64\\ipnathlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ippromon.dll", NULL},
    {L"wippromon.dll", L"%systemroot%\\SysWOW64\\ippromon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprip.dll", NULL},
    {L"wiprip.dll", L"%systemroot%\\SysWOW64\\iprip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprip2.dll", NULL},
    {L"wiprip2.dll", L"%systemroot%\\SysWOW64\\iprip2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprop.dll", NULL},
    {L"wiprop.dll", L"%systemroot%\\SysWOW64\\iprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprtprio.dll", NULL},
    {L"wiprtprio.dll", L"%systemroot%\\SysWOW64\\iprtprio.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprtrmgr.dll", NULL},
    {L"wiprtrmgr.dll", L"%systemroot%\\SysWOW64\\iprtrmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsec6.exe", NULL},
    {L"wipsec6.exe", L"%systemroot%\\SysWOW64\\ipsec6.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ipsecsnp.dll", NULL},
    {L"wipsecsnp.dll", L"%systemroot%\\SysWOW64\\ipsecsnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsecsvc.dll", NULL},
    {L"wipsecsvc.dll", L"%systemroot%\\SysWOW64\\ipsecsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsink.ax", NULL},
    {L"wipsink.ax", L"%systemroot%\\SysWOW64\\ipsink.ax", NULL},
    {NULL, L"%systemroot%\\system32\\ipsmsnap.dll", NULL},
    {L"wipsmsnap.dll", L"%systemroot%\\SysWOW64\\ipsmsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsnap.dll", NULL},
    {L"wipsnap.dll", L"%systemroot%\\SysWOW64\\ipsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipv6mon.dll", NULL},
    {L"wipv6mon.dll", L"%systemroot%\\SysWOW64\\ipv6mon.dll", NULL},
    {L"bhp005.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\IPX.DLL", NULL},
    {L"wipxroute.exe", L"%systemroot%\\SysWOW64\\ipxroute.exe", NULL},
    {L"wipxsap.dll", L"%systemroot%\\SysWOW64\\ipxsap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\irbus.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\isapips.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\isapnp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iscomlog.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\isign32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\isignup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ismip.dll", NULL},
    {L"wismip.dll", L"%systemroot%\\SysWOW64\\ismip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ismserv.exe", NULL},
    {L"wismserv.exe", L"%systemroot%\\SysWOW64\\ismserv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ismsink.dll", NULL},
    {L"wismsink.dll", L"%systemroot%\\SysWOW64\\ismsink.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ismsmtp.dll", NULL},
    {L"wismsmtp.dll", L"%systemroot%\\SysWOW64\\ismsmtp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\isrpc.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\iuctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iuengine.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ixsso.dll", NULL},
    {L"wixsso.dll", L"%systemroot%\\SysWOW64\\ixsso.dll", NULL},
    {L"wiyuv_32.dll", L"%systemroot%\\SysWOW64\\iyuv_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jet.dll", NULL},
    {L"wjet.dll", L"%systemroot%\\SysWOW64\\jet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jet500.dll", NULL},
    {L"wjet500.dll", L"%systemroot%\\SysWOW64\\jet500.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jetconv.exe", NULL},
    {L"wjetconv.exe", L"%systemroot%\\SysWOW64\\jetconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\jetpack.exe", NULL},
    {L"wjetpack.exe", L"%systemroot%\\SysWOW64\\jetpack.exe", NULL},
    {L"wjgaw400.dll", L"%systemroot%\\SysWOW64\\jgaw400.dll", NULL},
    {L"wjgdw400.dll", L"%systemroot%\\SysWOW64\\jgdw400.dll", NULL},
    {L"wjgmd400.dll", L"%systemroot%\\SysWOW64\\jgmd400.dll", NULL},
    {L"wjgpl400.dll", L"%systemroot%\\SysWOW64\\jgpl400.dll", NULL},
    {L"wjgsd400.dll", L"%systemroot%\\SysWOW64\\jgsd400.dll", NULL},
    {L"wjgsh400.dll", L"%systemroot%\\SysWOW64\\jgsh400.dll", NULL},
    {L"wjobexec.dll", L"%systemroot%\\SysWOW64\\jobexec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\joy.cpl", NULL},
    {L"wjoy.cpl", L"%systemroot%\\SysWOW64\\joy.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\jvcmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101.dll", NULL},
    {L"wkbd101.dll", L"%systemroot%\\SysWOW64\\kbd101.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101a.dll", NULL},
    {L"wkbd101a.dll", L"%systemroot%\\SysWOW64\\kbd101a.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101b.dll", NULL},
    {L"wkbd101b.dll", L"%systemroot%\\SysWOW64\\kbd101b.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101c.dll", NULL},
    {L"wkbd101c.dll", L"%systemroot%\\SysWOW64\\kbd101c.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd103.dll", NULL},
    {L"wkbd103.dll", L"%systemroot%\\SysWOW64\\kbd103.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd106.dll", NULL},
    {L"wkbd106.dll", L"%systemroot%\\SysWOW64\\kbd106.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd106n.dll", NULL},
    {L"wkbd106n.dll", L"%systemroot%\\SysWOW64\\kbd106n.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda1.dll", NULL},
    {L"wkbda1.dll", L"%systemroot%\\SysWOW64\\kbda1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda2.dll", NULL},
    {L"wkbda2.dll", L"%systemroot%\\SysWOW64\\kbda2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda3.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda3.dll", NULL},
    {L"wkbda3.dll", L"%systemroot%\\SysWOW64\\kbda3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdal.dll", NULL},
    {L"wkbdal.dll", L"%systemroot%\\SysWOW64\\kbdal.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdarme.dll", NULL},
    {L"wkbdarme.dll", L"%systemroot%\\SysWOW64\\kbdarme.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdarmw.dll", NULL},
    {L"wkbdarmw.dll", L"%systemroot%\\SysWOW64\\kbdarmw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdax2.dll", NULL},
    {L"wkbdax2.dll", L"%systemroot%\\SysWOW64\\kbdax2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdaze.dll", NULL},
    {L"wkbdaze.dll", L"%systemroot%\\SysWOW64\\kbdaze.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdazel.dll", NULL},
    {L"wkbdazel.dll", L"%systemroot%\\SysWOW64\\kbdazel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbe.dll", NULL},
    {L"wkbdbe.dll", L"%systemroot%\\SysWOW64\\kbdbe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbene.dll", NULL},
    {L"wkbdbene.dll", L"%systemroot%\\SysWOW64\\kbdbene.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdblr.dll", NULL},
    {L"wkbdblr.dll", L"%systemroot%\\SysWOW64\\kbdblr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbr.dll", NULL},
    {L"wkbdbr.dll", L"%systemroot%\\SysWOW64\\kbdbr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbu.dll", NULL},
    {L"wkbdbu.dll", L"%systemroot%\\SysWOW64\\kbdbu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdca.dll", NULL},
    {L"wkbdca.dll", L"%systemroot%\\SysWOW64\\kbdca.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcan.dll", NULL},
    {L"wkbdcan.dll", L"%systemroot%\\SysWOW64\\kbdcan.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kbdclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcr.dll", NULL},
    {L"wkbdcr.dll", L"%systemroot%\\SysWOW64\\kbdcr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz.dll", NULL},
    {L"wkbdcz.dll", L"%systemroot%\\SysWOW64\\kbdcz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz1.dll", NULL},
    {L"wkbdcz1.dll", L"%systemroot%\\SysWOW64\\kbdcz1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz2.dll", NULL},
    {L"wkbdcz2.dll", L"%systemroot%\\SysWOW64\\kbdcz2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdda.dll", NULL},
    {L"wkbdda.dll", L"%systemroot%\\SysWOW64\\kbdda.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddiv1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbddiv1.dll", NULL},
    {L"wkbddiv1.dll", L"%systemroot%\\SysWOW64\\kbddiv1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddiv2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbddiv2.dll", NULL},
    {L"wkbddiv2.dll", L"%systemroot%\\SysWOW64\\kbddiv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddv.dll", NULL},
    {L"wkbddv.dll", L"%systemroot%\\SysWOW64\\kbddv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdes.dll", NULL},
    {L"wkbdes.dll", L"%systemroot%\\SysWOW64\\kbdes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdest.dll", NULL},
    {L"wkbdest.dll", L"%systemroot%\\SysWOW64\\kbdest.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfa.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdfa.dll", NULL},
    {L"wkbdfa.dll", L"%systemroot%\\SysWOW64\\kbdfa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfc.dll", NULL},
    {L"wkbdfc.dll", L"%systemroot%\\SysWOW64\\kbdfc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfi.dll", NULL},
    {L"wkbdfi.dll", L"%systemroot%\\SysWOW64\\kbdfi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfo.dll", NULL},
    {L"wkbdfo.dll", L"%systemroot%\\SysWOW64\\kbdfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfr.dll", NULL},
    {L"wkbdfr.dll", L"%systemroot%\\SysWOW64\\kbdfr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgae.dll", NULL},
    {L"wkbdgae.dll", L"%systemroot%\\SysWOW64\\kbdgae.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgeo.dll", NULL},
    {L"wkbdgeo.dll", L"%systemroot%\\SysWOW64\\kbdgeo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgkl.dll", NULL},
    {L"wkbdgkl.dll", L"%systemroot%\\SysWOW64\\kbdgkl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgr.dll", NULL},
    {L"wkbdgr.dll", L"%systemroot%\\SysWOW64\\kbdgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgr1.dll", NULL},
    {L"wkbdgr1.dll", L"%systemroot%\\SysWOW64\\kbdgr1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe.dll", NULL},
    {L"wkbdhe.dll", L"%systemroot%\\SysWOW64\\kbdhe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe220.dll", NULL},
    {L"wkbdhe220.dll", L"%systemroot%\\SysWOW64\\kbdhe220.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe319.dll", NULL},
    {L"wkbdhe319.dll", L"%systemroot%\\SysWOW64\\kbdhe319.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdheb.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdheb.dll", NULL},
    {L"wkbdheb.dll", L"%systemroot%\\SysWOW64\\kbdheb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhela2.dll", NULL},
    {L"wkbdhela2.dll", L"%systemroot%\\SysWOW64\\kbdhela2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhela3.dll", NULL},
    {L"wkbdhela3.dll", L"%systemroot%\\SysWOW64\\kbdhela3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhept.dll", NULL},
    {L"wkbdhept.dll", L"%systemroot%\\SysWOW64\\kbdhept.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kbdhid.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhu.dll", NULL},
    {L"wkbdhu.dll", L"%systemroot%\\SysWOW64\\kbdhu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhu1.dll", NULL},
    {L"wkbdhu1.dll", L"%systemroot%\\SysWOW64\\kbdhu1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdibm02.dll", NULL},
    {L"wkbdibm02.dll", L"%systemroot%\\SysWOW64\\kbdibm02.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdic.dll", NULL},
    {L"wkbdic.dll", L"%systemroot%\\SysWOW64\\kbdic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdindev.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdindev.dll", NULL},
    {L"wkbdindev.dll", L"%systemroot%\\SysWOW64\\kbdindev.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinguj.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinguj.dll", NULL},
    {L"wkbdinguj.dll", L"%systemroot%\\SysWOW64\\kbdinguj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinhin.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinhin.dll", NULL},
    {L"wkbdinhin.dll", L"%systemroot%\\SysWOW64\\kbdinhin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinkan.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinkan.dll", NULL},
    {L"wkbdinkan.dll", L"%systemroot%\\SysWOW64\\kbdinkan.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinmar.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinmar.dll", NULL},
    {L"wkbdinmar.dll", L"%systemroot%\\SysWOW64\\kbdinmar.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinpun.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinpun.dll", NULL},
    {L"wkbdinpun.dll", L"%systemroot%\\SysWOW64\\kbdinpun.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdintam.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdintam.dll", NULL},
    {L"wkbdintam.dll", L"%systemroot%\\SysWOW64\\kbdintam.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdintel.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdintel.dll", NULL},
    {L"wkbdintel.dll", L"%systemroot%\\SysWOW64\\kbdintel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdir.dll", NULL},
    {L"wkbdir.dll", L"%systemroot%\\SysWOW64\\kbdir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdit.dll", NULL},
    {L"wkbdit.dll", L"%systemroot%\\SysWOW64\\kbdit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdit142.dll", NULL},
    {L"wkbdit142.dll", L"%systemroot%\\SysWOW64\\kbdit142.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdjpn.dll", NULL},
    {L"wkbdjpn.dll", L"%systemroot%\\SysWOW64\\kbdjpn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkaz.dll", NULL},
    {L"wkbdkaz.dll", L"%systemroot%\\SysWOW64\\kbdkaz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkor.dll", NULL},
    {L"wkbdkor.dll", L"%systemroot%\\SysWOW64\\kbdkor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkyr.dll", NULL},
    {L"wkbdkyr.dll", L"%systemroot%\\SysWOW64\\kbdkyr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdla.dll", NULL},
    {L"wkbdla.dll", L"%systemroot%\\SysWOW64\\kbdla.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlk41a.dll", NULL},
    {L"wkbdlk41a.dll", L"%systemroot%\\SysWOW64\\kbdlk41a.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlk41j.dll", NULL},
    {L"wkbdlk41j.dll", L"%systemroot%\\SysWOW64\\kbdlk41j.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlt.dll", NULL},
    {L"wkbdlt.dll", L"%systemroot%\\SysWOW64\\kbdlt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlt1.dll", NULL},
    {L"wkbdlt1.dll", L"%systemroot%\\SysWOW64\\kbdlt1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlv.dll", NULL},
    {L"wkbdlv.dll", L"%systemroot%\\SysWOW64\\kbdlv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlv1.dll", NULL},
    {L"wkbdlv1.dll", L"%systemroot%\\SysWOW64\\kbdlv1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdmac.dll", NULL},
    {L"wkbdmac.dll", L"%systemroot%\\SysWOW64\\kbdmac.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdmon.dll", NULL},
    {L"wkbdmon.dll", L"%systemroot%\\SysWOW64\\kbdmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdne.dll", NULL},
    {L"wkbdne.dll", L"%systemroot%\\SysWOW64\\kbdne.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnec.dll", NULL},
    {L"wkbdnec.dll", L"%systemroot%\\SysWOW64\\kbdnec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnec95.dll", NULL},
    {L"wkbdnec95.dll", L"%systemroot%\\SysWOW64\\kbdnec95.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnecat.dll", NULL},
    {L"wkbdnecat.dll", L"%systemroot%\\SysWOW64\\kbdnecat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnecnt.dll", NULL},
    {L"wkbdnecnt.dll", L"%systemroot%\\SysWOW64\\kbdnecnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdno.dll", NULL},
    {L"wkbdno.dll", L"%systemroot%\\SysWOW64\\kbdno.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpl.dll", NULL},
    {L"wkbdpl.dll", L"%systemroot%\\SysWOW64\\kbdpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpl1.dll", NULL},
    {L"wkbdpl1.dll", L"%systemroot%\\SysWOW64\\kbdpl1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpo.dll", NULL},
    {L"wkbdpo.dll", L"%systemroot%\\SysWOW64\\kbdpo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdro.dll", NULL},
    {L"wkbdro.dll", L"%systemroot%\\SysWOW64\\kbdro.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdru.dll", NULL},
    {L"wkbdru.dll", L"%systemroot%\\SysWOW64\\kbdru.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdru1.dll", NULL},
    {L"wkbdru1.dll", L"%systemroot%\\SysWOW64\\kbdru1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsf.dll", NULL},
    {L"wkbdsf.dll", L"%systemroot%\\SysWOW64\\kbdsf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsg.dll", NULL},
    {L"wkbdsg.dll", L"%systemroot%\\SysWOW64\\kbdsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsl.dll", NULL},
    {L"wkbdsl.dll", L"%systemroot%\\SysWOW64\\kbdsl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsl1.dll", NULL},
    {L"wkbdsl1.dll", L"%systemroot%\\SysWOW64\\kbdsl1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsp.dll", NULL},
    {L"wkbdsp.dll", L"%systemroot%\\SysWOW64\\kbdsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsw.dll", NULL},
    {L"wkbdsw.dll", L"%systemroot%\\SysWOW64\\kbdsw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsyr1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdsyr1.dll", NULL},
    {L"wkbdsyr1.dll", L"%systemroot%\\SysWOW64\\kbdsyr1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsyr2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdsyr2.dll", NULL},
    {L"wkbdsyr2.dll", L"%systemroot%\\SysWOW64\\kbdsyr2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtat.dll", NULL},
    {L"wkbdtat.dll", L"%systemroot%\\SysWOW64\\kbdtat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth0.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth0.dll", NULL},
    {L"wkbdth0.dll", L"%systemroot%\\SysWOW64\\kbdth0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth1.dll", NULL},
    {L"wkbdth1.dll", L"%systemroot%\\SysWOW64\\kbdth1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth2.dll", NULL},
    {L"wkbdth2.dll", L"%systemroot%\\SysWOW64\\kbdth2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth3.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth3.dll", NULL},
    {L"wkbdth3.dll", L"%systemroot%\\SysWOW64\\kbdth3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtuf.dll", NULL},
    {L"wkbdtuf.dll", L"%systemroot%\\SysWOW64\\kbdtuf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtuq.dll", NULL},
    {L"wkbdtuq.dll", L"%systemroot%\\SysWOW64\\kbdtuq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbduk.dll", NULL},
    {L"wkbduk.dll", L"%systemroot%\\SysWOW64\\kbduk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdur.dll", NULL},
    {L"wkbdur.dll", L"%systemroot%\\SysWOW64\\kbdur.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdurdu.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdurdu.dll", NULL},
    {L"wkbdurdu.dll", L"%systemroot%\\SysWOW64\\kbdurdu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdus.dll", NULL},
    {L"wkbdus.dll", L"%systemroot%\\SysWOW64\\kbdus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusl.dll", NULL},
    {L"wkbdusl.dll", L"%systemroot%\\SysWOW64\\kbdusl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusr.dll", NULL},
    {L"wkbdusr.dll", L"%systemroot%\\SysWOW64\\kbdusr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusx.dll", NULL},
    {L"wkbdusx.dll", L"%systemroot%\\SysWOW64\\kbdusx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbduzb.dll", NULL},
    {L"wkbduzb.dll", L"%systemroot%\\SysWOW64\\kbduzb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdvntc.dll", NULL},
    {L"wkbdvntc.dll", L"%systemroot%\\SysWOW64\\kbdvntc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdycc.dll", NULL},
    {L"wkbdycc.dll", L"%systemroot%\\SysWOW64\\kbdycc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdycl.dll", NULL},
    {L"wkbdycl.dll", L"%systemroot%\\SysWOW64\\kbdycl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kd1394.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kdcom.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kdcsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kerberos.dll", NULL},
    {L"wkerberos.dll", L"%systemroot%\\SysWOW64\\kerberos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\PARSERS\\kerbprsr.dll", NULL},
    {L"wkeyboard.drv", L"%systemroot%\\SysWOW64\\keyboard.drv", NULL},
    {NULL, L"%systemroot%\\system32\\keymgr.cpl", NULL},
    {L"wkeymgr.cpl", L"%systemroot%\\SysWOW64\\keymgr.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\keymgr.dll", NULL},
    {L"wkeymgr.dll", L"%systemroot%\\SysWOW64\\keymgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kmddsp.tsp", NULL},
    {L"wkmddsp.tsp", L"%systemroot%\\SysWOW64\\kmddsp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kmixer.sys", NULL},
    {NULL, L"%systemroot%\\system32\\korwbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\korwbrkr.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\krnlprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ks.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ksc.nls", NULL},
    {L"wksc.nls", L"%systemroot%\\SysWOW64\\ksc.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ksecdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ksproxy.ax", NULL},
    {NULL, L"%systemroot%\\system32\\kstvtune.ax", NULL},
    {NULL, L"%systemroot%\\system32\\ksuser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ksxbar.ax", NULL},
    {NULL, L"%systemroot%\\system32\\l_except.nls", NULL},
    {L"wl_except.nls", L"%systemroot%\\SysWOW64\\l_except.nls", NULL},
    {NULL, L"%systemroot%\\system32\\l_intl.nls", NULL},
    {L"wl_intl.nls", L"%systemroot%\\SysWOW64\\l_intl.nls", NULL},
    {NULL, L"%systemroot%\\system32\\label.exe", NULL},
    {L"wlabel.exe", L"%systemroot%\\SysWOW64\\label.exe", NULL},
    {L"bhp023.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LANE.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\langwrbk.dll", NULL},
    {L"wlangwrbk.dll", L"%systemroot%\\SysWOW64\\langwrbk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lcwiz.exe", NULL},
    {L"wlcwiz.exe", L"%systemroot%\\SysWOW64\\lcwiz.exe", NULL},
    {L"bhp025.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LDAP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\ldifde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\libxprmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\liccpa.cpl", NULL},
    {L"wliccpa.cpl", L"%systemroot%\\SysWOW64\\liccpa.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\licenoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\licmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\licmgr10.dll", NULL},
    {L"wlicmgr10.dll", L"%systemroot%\\SysWOW64\\licmgr10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\linkinfo.dll", NULL},
    {L"wlinkinfo.dll", L"%systemroot%\\SysWOW64\\linkinfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\LIT220P.SYS", NULL},
    {L"bhp006.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LLC.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\llsmgr.exe", NULL},
    {L"wllsmgr.exe", L"%systemroot%\\SysWOW64\\llsmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\llsrpc.dll", NULL},
    {L"wllsrpc.dll", L"%systemroot%\\SysWOW64\\llsrpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\llssrv.exe", NULL},
    {L"wllssrv.exe", L"%systemroot%\\SysWOW64\\llssrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lmhsvc.dll", NULL},
    {L"wlmhsvc.dll", L"%systemroot%\\SysWOW64\\lmhsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lmmib2.dll", NULL},
    {L"wlmmib2.dll", L"%systemroot%\\SysWOW64\\lmmib2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lmrt.dll", NULL},
    {L"wlmrt.dll", L"%systemroot%\\SysWOW64\\lmrt.dll", NULL},
    {L"wlnkstub.exe", L"%systemroot%\\SysWOW64\\lnkstub.exe", NULL},
    {NULL, L"%systemroot%\\system32\\loadperf.dll", NULL},
    {L"wloadperf.dll", L"%systemroot%\\SysWOW64\\loadperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\locale.nls", NULL},
    {L"wlocale.nls", L"%systemroot%\\SysWOW64\\locale.nls", NULL},
    {NULL, L"%systemroot%\\system32\\localsec.dll", NULL},
    {L"wlocalsec.dll", L"%systemroot%\\SysWOW64\\localsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\localspl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\localui.dll", NULL},
    {L"wlocalui.dll", L"%systemroot%\\SysWOW64\\localui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\locator.exe", NULL},
    {L"wlocator.exe", L"%systemroot%\\SysWOW64\\locator.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lodctr.exe", NULL},
    {L"wlodctr.exe", L"%systemroot%\\SysWOW64\\lodctr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\loghours.dll", NULL},
    {L"wloghours.dll", L"%systemroot%\\SysWOW64\\loghours.dll", NULL},
    {NULL, L"%systemroot%\\system32\\logman.exe", NULL},
    {L"wlogman.exe", L"%systemroot%\\SysWOW64\\logman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\logoff.exe", NULL},
    {L"bhp019.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LOGON.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\logon.scr", NULL},
    {NULL, L"%systemroot%\\system32\\logonui.exe", NULL},
    {L"wlogonui.exe", L"%systemroot%\\SysWOW64\\logonui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\logscrpt.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\lonsint.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\loop.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\lp6nds35.sys", NULL},
    {NULL, L"%systemroot%\\system32\\lpdsvc.dll", NULL},
    {L"wlpdsvc.dll", L"%systemroot%\\SysWOW64\\lpdsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lpk.dll", NULL},
    {L"wlpk.dll", L"%systemroot%\\SysWOW64\\lpk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lpq.exe", NULL},
    {L"wlpq.exe", L"%systemroot%\\SysWOW64\\lpq.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lpr.exe", NULL},
    {L"wlpr.exe", L"%systemroot%\\SysWOW64\\lpr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lprhelp.dll", NULL},
    {L"wlprhelp.dll", L"%systemroot%\\SysWOW64\\lprhelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lprmon.dll", NULL},
    {L"wlprmon.dll", L"%systemroot%\\SysWOW64\\lprmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lprmonui.dll", NULL},
    {L"wlprmonui.dll", L"%systemroot%\\SysWOW64\\lprmonui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lrwizdll.dll", NULL},
    {L"bhp020.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\LSARPC.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\lsass.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lserver.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ltotape.sys", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\Lexicon\\1033\\ltts1033.lxa", NULL},
    {NULL, L"%systemroot%\\system32\\lz32.dll", NULL},
    {L"wlz32.dll", L"%systemroot%\\SysWOW64\\lz32.dll", NULL},
    {L"wlzexpand.dll", L"%systemroot%\\SysWOW64\\lzexpand.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\m4mc.sys", NULL},
    {L"bhp007.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\MAC.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\macfile.exe", NULL},
    {L"wmacfile.exe", L"%systemroot%\\SysWOW64\\macfile.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mag_hook.dll", NULL},
    {L"wmag_hook.dll", L"%systemroot%\\SysWOW64\\mag_hook.dll", NULL},
    {NULL, L"%systemroot%\\system32\\magnify.exe", NULL},
    {L"wmagnify.exe", L"%systemroot%\\SysWOW64\\magnify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\mailmsg.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\main.cpl", NULL},
    {L"wmain.cpl", L"%systemroot%\\SysWOW64\\main.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\makecab.exe", NULL},
    {L"wmakecab.exe", L"%systemroot%\\SysWOW64\\makecab.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mammoth.sys", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\PARSERS\\mcast.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcastmib.dll", NULL},
    {L"wmcastmib.dll", L"%systemroot%\\SysWOW64\\mcastmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mcd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mcd32.dll", NULL},
    {L"wmcd32.dll", L"%systemroot%\\SysWOW64\\mcd32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcdsrv32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mchgrcoi.dll", NULL},
    {L"wmchgrcoi.dll", L"%systemroot%\\SysWOW64\\mchgrcoi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciavi.drv", NULL},
    {L"wmciavi.drv", L"%systemroot%\\SysWOW64\\mciavi.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mciavi32.dll", NULL},
    {L"wmciavi32.dll", L"%systemroot%\\SysWOW64\\mciavi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcicda.dll", NULL},
    {L"wmcicda.dll", L"%systemroot%\\SysWOW64\\mcicda.dll", NULL},
    {L"wmciole16.dll", L"%systemroot%\\SysWOW64\\mciole16.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciole32.dll", NULL},
    {L"wmciole32.dll", L"%systemroot%\\SysWOW64\\mciole32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciqtz32.dll", NULL},
    {L"wmciqtz32.dll", L"%systemroot%\\SysWOW64\\mciqtz32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciseq.dll", NULL},
    {L"wmciseq.dll", L"%systemroot%\\SysWOW64\\mciseq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciseq.drv", NULL},
    {L"wmciseq.drv", L"%systemroot%\\SysWOW64\\mciseq.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mciwave.dll", NULL},
    {L"wmciwave.dll", L"%systemroot%\\SysWOW64\\mciwave.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciwave.drv", NULL},
    {L"wmciwave.drv", L"%systemroot%\\SysWOW64\\mciwave.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mdhcp.dll", NULL},
    {L"wmdhcp.dll", L"%systemroot%\\SysWOW64\\mdhcp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mdminst.dll", NULL},
    {L"wmdminst.dll", L"%systemroot%\\SysWOW64\\mdminst.dll", NULL},
    {L"wmdwmdmsp.dll", L"%systemroot%\\SysWOW64\\mdwmdmsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\memcard.sys", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\metadata.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\mf.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mf3216.dll", NULL},
    {L"wmf3216.dll", L"%systemroot%\\SysWOW64\\mf3216.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mgmtapi.dll", NULL},
    {L"wmgmtapi.dll", L"%systemroot%\\SysWOW64\\mgmtapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Microsoft.WindowsMediaServices.DLL", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\midimap.dll", NULL},
    {L"wmidimap.dll", L"%systemroot%\\SysWOW64\\midimap.dll", NULL},
    {L"wmigisol.exe", L"%systemroot%\\SysWOW64\\migisol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\miglibnt.dll", NULL},
    {L"wmiglibnt.dll", L"%systemroot%\\SysWOW64\\miglibnt.dll", NULL},
    {L"wmigpwd.exe", L"%systemroot%\\SysWOW64\\migpwd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\migregdb.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mimefilt.dll", NULL},
    {L"wmimefilt.dll", L"%systemroot%\\SysWOW64\\mimefilt.dll", NULL},
    {L"wmindex.dll", L"%systemroot%\\SysWOW64\\mindex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\miniqic.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mlang.dat", NULL},
    {L"wmlang.dat", L"%systemroot%\\SysWOW64\\mlang.dat", NULL},
    {NULL, L"%systemroot%\\system32\\mlang.dll", NULL},
    {L"wmlang.dll", L"%systemroot%\\SysWOW64\\mlang.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_hp.dll", NULL},
    {L"wmll_hp.dll", L"%systemroot%\\SysWOW64\\mll_hp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_mtf.dll", NULL},
    {L"wmll_mtf.dll", L"%systemroot%\\SysWOW64\\mll_mtf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_qic.dll", NULL},
    {L"wmll_qic.dll", L"%systemroot%\\SysWOW64\\mll_qic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmc.exe", NULL},
    {L"wmmc.exe", L"%systemroot%\\SysWOW64\\mmc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mmcbase.dll", NULL},
    {L"wmmcbase.dll", L"%systemroot%\\SysWOW64\\mmcbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmcndmgr.dll", NULL},
    {L"wmmcndmgr.dll", L"%systemroot%\\SysWOW64\\mmcndmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmcshext.dll", NULL},
    {L"wmmcshext.dll", L"%systemroot%\\SysWOW64\\mmcshext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmfutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmsys.cpl", NULL},
    {L"wmmsys.cpl", L"%systemroot%\\SysWOW64\\mmsys.cpl", NULL},
    {L"wmmsystem.dll", L"%systemroot%\\SysWOW64\\mmsystem.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmutilse.dll", NULL},
    {L"wmmutilse.dll", L"%systemroot%\\SysWOW64\\mmutilse.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mobsync.dll", NULL},
    {L"wmobsync.dll", L"%systemroot%\\SysWOW64\\mobsync.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mobsync.exe", NULL},
    {L"wmobsync.exe", L"%systemroot%\\SysWOW64\\mobsync.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\modem.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\MODEMCSA.sys", NULL},
    {NULL, L"%systemroot%\\system32\\modemui.dll", NULL},
    {L"wmodemui.dll", L"%systemroot%\\SysWOW64\\modemui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\modex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\mofcomp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\mofd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\moricons.dll", NULL},
    {L"wmoricons.dll", L"%systemroot%\\SysWOW64\\moricons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mouclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mouhid.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mountmgr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mountvol.exe", NULL},
    {L"wmountvol.exe", L"%systemroot%\\SysWOW64\\mountvol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpg2splt.ax", NULL},
    {L"wmpg2splt.ax", L"%systemroot%\\SysWOW64\\mpg2splt.ax", NULL},
    {L"wmpg4dmod.dll", L"%systemroot%\\SysWOW64\\mpg4dmod.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mplay32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpnotify.exe", NULL},
    {L"wmpnotify.exe", L"%systemroot%\\SysWOW64\\mpnotify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpr.dll", NULL},
    {L"wmpr.dll", L"%systemroot%\\SysWOW64\\mpr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprapi.dll", NULL},
    {L"wmprapi.dll", L"%systemroot%\\SysWOW64\\mprapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprddm.dll", NULL},
    {L"wmprddm.dll", L"%systemroot%\\SysWOW64\\mprddm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprdim.dll", NULL},
    {L"wmprdim.dll", L"%systemroot%\\SysWOW64\\mprdim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprmsg.dll", NULL},
    {L"wmprmsg.dll", L"%systemroot%\\SysWOW64\\mprmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprsnap.dll", NULL},
    {L"wmprsnap.dll", L"%systemroot%\\SysWOW64\\mprsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprui.dll", NULL},
    {L"wmprui.dll", L"%systemroot%\\SysWOW64\\mprui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mqac.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mqad.dll", NULL},
    {L"wmqad.dll", L"%systemroot%\\SysWOW64\\mqad.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqads.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqbkup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqcertui.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\MQClus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqdscli.dll", NULL},
    {L"wmqdscli.dll", L"%systemroot%\\SysWOW64\\mqdscli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqdssrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqdssvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqgentr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqise.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqlogmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqoa.dll", NULL},
    {L"wmqoa.dll", L"%systemroot%\\SysWOW64\\mqoa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqoa10.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mqoa20.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mqperf.dll", NULL},
    {L"wmqperf.dll", L"%systemroot%\\SysWOW64\\mqperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqqm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqrt.dll", NULL},
    {L"wmqrt.dll", L"%systemroot%\\SysWOW64\\mqrt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqrtdep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqsec.dll", NULL},
    {L"wmqsec.dll", L"%systemroot%\\SysWOW64\\mqsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqtgclus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqtgsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mqtrig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqupgrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mqutil.dll", NULL},
    {L"wmqutil.dll", L"%systemroot%\\SysWOW64\\mqutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mraid35x.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mrinfo.exe", NULL},
    {L"wmrinfo.exe", L"%systemroot%\\SysWOW64\\mrinfo.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mrxdav.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mrxsmb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msaatext.dll", NULL},
    {L"wmsaatext.dll", L"%systemroot%\\SysWOW64\\msaatext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msacm.dll", NULL},
    {L"wmsacm.dll", L"%systemroot%\\SysWOW64\\msacm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msacm32.dll", NULL},
    {L"wmsacm32.dll", L"%systemroot%\\SysWOW64\\msacm32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado25.tlb", NULL},
    {L"wmsado25.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado25.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado26.tlb", NULL},
    {L"wmsado26.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado26.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\msafd.dll", NULL},
    {L"wmsafd.dll", L"%systemroot%\\SysWOW64\\msafd.dll", NULL},
    {L"wmsapsspc.dll", L"%systemroot%\\SysWOW64\\msapsspc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msasn1.dll", NULL},
    {L"wmsasn1.dll", L"%systemroot%\\SysWOW64\\msasn1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msaudite.dll", NULL},
    {L"wmsaudite.dll", L"%systemroot%\\SysWOW64\\msaudite.dll", NULL},
    {NULL, L"%systemroot%\\ime\\mscandui.dll", NULL},
    {L"wmscandui.dll", L"%systemroot%\\ime (x86)\\mscandui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mscat32.dll", NULL},
    {L"wmscat32.dll", L"%systemroot%\\SysWOW64\\mscat32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msclus.dll", NULL},
    {L"wmsclus.dll", L"%systemroot%\\SysWOW64\\msclus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mscms.dll", NULL},
    {L"wmscms.dll", L"%systemroot%\\SysWOW64\\mscms.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\msconfig.exe", NULL},
    {L"wmscpx32r.dLL", L"%systemroot%\\SysWOW64\\mscpx32r.dLL", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTF.dll", NULL},
    {L"wMSCTF.dll", L"%systemroot%\\SysWOW64\\MSCTF.dll", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTFIME.IME", NULL},
    {L"wMSCTFIME.IME", L"%systemroot%\\SysWOW64\\MSCTFIME.IME", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTFP.dll", NULL},
    {L"wMSCTFP.dll", L"%systemroot%\\SysWOW64\\MSCTFP.dll", NULL},
    {L"wmsdaorar.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaorar.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdart.dll", NULL},
    {L"wmsdart.dll", L"%systemroot%\\SysWOW64\\msdart.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdatl3.dll", NULL},
    {L"wmsdatl3.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdatl3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdmo.dll", NULL},
    {L"wmsdmo.dll", L"%systemroot%\\SysWOW64\\msdmo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msdtclog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtcprx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\msdtcstp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtctm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtcuiu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdvbnp.ax", NULL},
    {L"wmsdvbnp.ax", L"%systemroot%\\SysWOW64\\msdvbnp.ax", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msftedit.dll", NULL},
    {L"wmsftedit.dll", L"%systemroot%\\SysWOW64\\msftedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msgina.dll", NULL},
    {L"wmsgina.dll", L"%systemroot%\\SysWOW64\\msgina.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msgpc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msgsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshta.exe", NULL},
    {L"wmshta.exe", L"%systemroot%\\SysWOW64\\mshta.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mshtml.dll", NULL},
    {L"wmshtml.dll", L"%systemroot%\\SysWOW64\\mshtml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshtml.tlb", NULL},
    {L"wmshtml.tlb", L"%systemroot%\\SysWOW64\\mshtml.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mshtmled.dll", NULL},
    {L"wmshtmled.dll", L"%systemroot%\\SysWOW64\\mshtmled.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshtmler.dll", NULL},
    {L"wmshtmler.dll", L"%systemroot%\\SysWOW64\\mshtmler.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msi.dll", NULL},
    {L"wmsi.dll", L"%systemroot%\\SysWOW64\\msi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msident.dll", NULL},
    {L"wmsident.dll", L"%systemroot%\\SysWOW64\\msident.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msidle.dll", NULL},
    {L"wmsidle.dll", L"%systemroot%\\SysWOW64\\msidle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msidntld.dll", NULL},
    {L"wmsidntld.dll", L"%systemroot%\\SysWOW64\\msidntld.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msieftp.dll", NULL},
    {L"wmsieftp.dll", L"%systemroot%\\SysWOW64\\msieftp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msiexec.exe", NULL},
    {L"wmsiexec.exe", L"%systemroot%\\SysWOW64\\msiexec.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msihnd.dll", NULL},
    {L"wmsihnd.dll", L"%systemroot%\\SysWOW64\\msihnd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msimg32.dll", NULL},
    {L"wmsimg32.dll", L"%systemroot%\\SysWOW64\\msimg32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msimn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msimsg.dll", NULL},
    {L"wmsimsg.dll", L"%systemroot%\\SysWOW64\\msimsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\MSIMTF.dll", NULL},
    {L"wMSIMTF.dll", L"%systemroot%\\SysWOW64\\MSIMTF.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\msinfo.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\MSInfo\\msinfo32.exe", NULL},
    {L"wmsinfo32.exe", L"%commonprogramfiles(x86)%\\Microsoft Shared\\MSInfo\\msinfo32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\msiprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msir3jp.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\msir3jp.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\msiregmv.exe", NULL},
    {L"wmsiregmv.exe", L"%systemroot%\\SysWOW64\\msiregmv.exe", NULL},
    {L"wmsisam11.dll", L"%systemroot%\\SysWOW64\\msisam11.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msisip.dll", NULL},
    {L"wmsisip.dll", L"%systemroot%\\SysWOW64\\msisip.dll", NULL},
    {L"wmsjetol1.dll", L"%systemroot%\\SysWOW64\\msjetoledb40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mskssrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mslbui.dll", NULL},
    {L"wmslbui.dll", L"%systemroot%\\SysWOW64\\mslbui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msls31.dll", NULL},
    {L"wmsls31.dll", L"%systemroot%\\SysWOW64\\msls31.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\mslwvtts.dll", NULL},
    {L"wmslwvtts.dll", L"%systemroot%\\msagent\\mslwvtts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msmpu401.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\msmqocm.dll", NULL},
    {L"wmsnetobj.dll", L"%systemroot%\\SysWOW64\\msnetobj.dll", NULL},
    {L"wmsnsspc.dll", L"%systemroot%\\SysWOW64\\msnsspc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msobjs.dll", NULL},
    {L"wmsobjs.dll", L"%systemroot%\\SysWOW64\\msobjs.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msoe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msoeacct.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msoeres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msoert2.dll", NULL},
    {L"wmsorc32r.dll", L"%systemroot%\\SysWOW64\\msorc32r.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mspaint.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mspatcha.dll", NULL},
    {L"wmspatcha.dll", L"%systemroot%\\SysWOW64\\mspatcha.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mspclock.sys", NULL},
    {L"wmspmsp.dll", L"%systemroot%\\SysWOW64\\mspmsp.dll", NULL},
    {L"wmspmspsv.dll", L"%systemroot%\\SysWOW64\\mspmspsv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msports.dll", NULL},
    {L"wmsports.dll", L"%systemroot%\\SysWOW64\\msports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppalrt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppcnfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msppcntr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mspplkrh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppmalr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppmd5.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msppnxus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mspqm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msprivs.dll", NULL},
    {L"wmsprivs.dll", L"%systemroot%\\SysWOW64\\msprivs.dll", NULL},
    {L"wmsr2c.dll", L"%systemroot%\\SysWOW64\\msr2c.dll", NULL},
    {L"wmsr2cenu.dll", L"%systemroot%\\SysWOW64\\msr2cenu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msratelc.dll", NULL},
    {L"wmsratelc.dll", L"%systemroot%\\SysWOW64\\msratelc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msrating.dll", NULL},
    {L"wmsrating.dll", L"%systemroot%\\SysWOW64\\msrating.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msrle32.dll", NULL},
    {L"wmsrle32.dll", L"%systemroot%\\SysWOW64\\msrle32.dll", NULL},
    {L"bhp008.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\MSRPC.DLL", NULL},
    {L"wmssap.dll", L"%systemroot%\\SysWOW64\\mssap.dll", NULL},
    {L"wmsscds32.ax", L"%systemroot%\\SysWOW64\\msscds32.ax", NULL},
    {L"wmsscp.dll", L"%systemroot%\\SysWOW64\\msscp.dll", NULL},
    {L"wmsscript.ocx", L"%systemroot%\\SysWOW64\\msscript.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\mssign32.dll", NULL},
    {L"wmssign32.dll", L"%systemroot%\\SysWOW64\\mssign32.dll", NULL},
    {L"wmssoap1.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\mssoap1.dll", NULL},
    {L"wmssoapr.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\Resources\\1033\\mssoapr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msswch.dll", NULL},
    {L"wmsswch.dll", L"%systemroot%\\SysWOW64\\msswch.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msswchx.exe", NULL},
    {L"wmsswchx.exe", L"%systemroot%\\SysWOW64\\msswchx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstask.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\MSTEE.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mstime.dll", NULL},
    {L"wmstime.dll", L"%systemroot%\\SysWOW64\\mstime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstlsapi.dll", NULL},
    {L"wmstlsapi.dll", L"%systemroot%\\SysWOW64\\mstlsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstscax.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsmhst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsmmc.dll", NULL},
    {L"wmsuni11.dll", L"%systemroot%\\SysWOW64\\msuni11.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msutb.dll", NULL},
    {L"wmsutb.dll", L"%systemroot%\\SysWOW64\\msutb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msv1_0.dll", NULL},
    {L"wmsv1_0.dll", L"%systemroot%\\SysWOW64\\msv1_0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcirt.dll", NULL},
    {L"wmsvcirt.dll", L"%systemroot%\\SysWOW64\\msvcirt.dll", NULL},
    {L"wmsvcp50.dll", L"%systemroot%\\SysWOW64\\msvcp50.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcp60.dll", NULL},
    {L"wmsvcp60.dll", L"%systemroot%\\SysWOW64\\msvcp60.dll", NULL},
    {L"wmsvcrt20.dll", L"%systemroot%\\SysWOW64\\msvcrt20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvfw32.dll", NULL},
    {L"wmsvfw32.dll", L"%systemroot%\\SysWOW64\\msvfw32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvidc32.dll", NULL},
    {L"wmsvidc32.dll", L"%systemroot%\\SysWOW64\\msvidc32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvidctl.dll", NULL},
    {L"wmsvidctl.dll", L"%systemroot%\\SysWOW64\\msvidctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvideo.dll", NULL},
    {L"wmsvideo.dll", L"%systemroot%\\SysWOW64\\msvideo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msw3prt.dll", NULL},
    {L"wmsw3prt.dll", L"%systemroot%\\SysWOW64\\msw3prt.dll", NULL},
    {L"wmswebdvd.dll", L"%systemroot%\\SysWOW64\\mswebdvd.dll", NULL},
    {L"wmswmdm.dll", L"%systemroot%\\SysWOW64\\mswmdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mswsock.dll", NULL},
    {L"wmswsock.dll", L"%systemroot%\\SysWOW64\\mswsock.dll", NULL},
    {L"wmsxml.dll", L"%systemroot%\\SysWOW64\\msxml.dll", NULL},
    {L"wmsxml2.dll", L"%systemroot%\\SysWOW64\\msxml2.dll", NULL},
    {L"wmsxml2r.dll", L"%systemroot%\\SysWOW64\\msxml2r.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxml3.dll", NULL},
    {L"wmsxml3.dll", L"%systemroot%\\SysWOW64\\msxml3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxml3r.dll", NULL},
    {L"wmsxml3r.dll", L"%systemroot%\\SysWOW64\\msxml3r.dll", NULL},
    {L"wmsxmlr.dll", L"%systemroot%\\SysWOW64\\msxmlr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxs64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msyuv.dll", NULL},
    {L"wmsyuv.dll", L"%systemroot%\\SysWOW64\\msyuv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\mtsadmin.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mtstocom.exe", NULL},
    {L"wmtstocom.exe", L"%systemroot%\\SysWOW64\\mtstocom.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mtxclu.dll", NULL},
    {L"wmtxclu.dll", L"%systemroot%\\SysWOW64\\mtxclu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxoci.dll", NULL},
    {NULL, L"%systemroot%\\mui\\muisetup.exe", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\multibox.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\mup.sys", NULL},
    {L"wmxicfg.dll", L"%systemroot%\\SysWOW64\\mxicfg.dll", NULL},
    {L"wmxport.dll", L"%systemroot%\\SysWOW64\\mxport.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mycomput.dll", NULL},
    {L"wmycomput.dll", L"%systemroot%\\SysWOW64\\mycomput.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mydocs.dll", NULL},
    {L"wmydocs.dll", L"%systemroot%\\SysWOW64\\mydocs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mys.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Namespace.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\napmmc.dll", NULL},
    {L"wnapmmc.dll", L"%systemroot%\\SysWOW64\\napmmc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\narrator.exe", NULL},
    {L"wnarrator.exe", L"%systemroot%\\SysWOW64\\narrator.exe", NULL},
    {NULL, L"%systemroot%\\system32\\narrhook.dll", NULL},
    {L"wnarrhook.dll", L"%systemroot%\\SysWOW64\\narrhook.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nbtstat.exe", NULL},
    {L"wnbtstat.exe", L"%systemroot%\\SysWOW64\\nbtstat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ncobjapi.dll", NULL},
    {L"wncobjapi.dll", L"%systemroot%\\SysWOW64\\ncobjapi.dll", NULL},
    {L"bhp009.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\NCP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\ncpa.cpl", NULL},
    {L"wncpa.cpl", L"%systemroot%\\SysWOW64\\ncpa.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\ncprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nddeapi.dll", NULL},
    {L"wnddeapi.dll", L"%systemroot%\\SysWOW64\\nddeapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nddeapir.exe", NULL},
    {L"wnddeapir.exe", L"%systemroot%\\SysWOW64\\nddeapir.exe", NULL},
    {NULL, L"%systemroot%\\system32\\nddenb32.dll", NULL},
    {L"wnddenb32.dll", L"%systemroot%\\SysWOW64\\nddenb32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndis.sys", NULL},
    {NULL, L"%systemroot%\\system32\\npp\\ndisnpp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndistapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndisuio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndproxy.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ndptsp.tsp", NULL},
    {L"wndptsp.tsp", L"%systemroot%\\SysWOW64\\ndptsp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ne2000.sys", NULL},
    {NULL, L"%systemroot%\\system32\\net.exe", NULL},
    {L"wnet.exe", L"%systemroot%\\SysWOW64\\net.exe", NULL},
    {NULL, L"%systemroot%\\system32\\net1.exe", NULL},
    {L"wnet1.exe", L"%systemroot%\\SysWOW64\\net1.exe", NULL},
    {L"wnetapi.dll", L"%systemroot%\\SysWOW64\\netapi.dll", NULL},
    {L"bhp010.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\NETBIOS.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\netbios.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\netbt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\netcfgx.dll", NULL},
    {L"wnetcfgx.dll", L"%systemroot%\\SysWOW64\\netcfgx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netdde.exe", NULL},
    {L"wnetdde.exe", L"%systemroot%\\SysWOW64\\netdde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netevent.dll", NULL},
    {L"wnetevent.dll", L"%systemroot%\\SysWOW64\\netevent.dll", NULL},
    {NULL, L"%systemroot%\\system32\\neth.dll", NULL},
    {L"wneth.dll", L"%systemroot%\\SysWOW64\\neth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netid.dll", NULL},
    {L"wnetid.dll", L"%systemroot%\\SysWOW64\\netid.dll", NULL},
    {L"bhp011.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\netlogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netlogon.dll", NULL},
    {L"wnetlogon.dll", L"%systemroot%\\SysWOW64\\netlogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\netmon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netmsg.dll", NULL},
    {L"wnetmsg.dll", L"%systemroot%\\SysWOW64\\netmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\netoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netplwiz.dll", NULL},
    {L"wnetplwiz.dll", L"%systemroot%\\SysWOW64\\netplwiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netrap.dll", NULL},
    {L"wnetrap.dll", L"%systemroot%\\SysWOW64\\netrap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netsh.exe", NULL},
    {L"wnetsh.exe", L"%systemroot%\\SysWOW64\\netsh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netshell.dll", NULL},
    {L"wnetshell.dll", L"%systemroot%\\SysWOW64\\netshell.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netstat.exe", NULL},
    {L"wnetstat.exe", L"%systemroot%\\SysWOW64\\netstat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netui0.dll", NULL},
    {L"wnetui0.dll", L"%systemroot%\\SysWOW64\\netui0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netui1.dll", NULL},
    {L"wnetui1.dll", L"%systemroot%\\SysWOW64\\netui1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netui2.dll", NULL},
    {L"wnetui2.dll", L"%systemroot%\\SysWOW64\\netui2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\newdev.dll", NULL},
    {L"wnewdev.dll", L"%systemroot%\\SysWOW64\\newdev.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\NEXTLINK.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\nfrd960.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nic1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\nlb.exe", NULL},
    {L"wnlb.exe", L"%systemroot%\\SysWOW64\\nlb.exe", NULL},
    {NULL, L"%systemroot%\\system32\\nlbmgr.exe", NULL},
    {L"wnlbmgr.exe", L"%systemroot%\\SysWOW64\\nlbmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\nlbmprov.dll", NULL},
    {L"wnlbmprov.dll", L"%systemroot%\\SysWOW64\\wbem\\nlbmprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nlhtml.dll", NULL},
    {L"wnlhtml.dll", L"%systemroot%\\SysWOW64\\nlhtml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\nmapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nmnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\nmsupp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nntpapi.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\nntpctrs.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpfs.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\nntpsvc.dll", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\notepad.exe", NULL},
    {L"wnotepad.exe", L"%systemroot%\\SysWOW64\\notepad.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\npfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\npp\\nppagent.exe", NULL},
    {NULL, L"%systemroot%\\system32\\npptools.dll", NULL},
    {L"wnpptools.dll", L"%systemroot%\\SysWOW64\\npptools.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nshipsec.dll", NULL},
    {L"wnshipsec.dll", L"%systemroot%\\SysWOW64\\nshipsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nslookup.exe", NULL},
    {L"wnslookup.exe", L"%systemroot%\\SysWOW64\\nslookup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nsmmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\nsneterr.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\ntbackup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsapi.dll", NULL},
    {L"wntdsapi.dll", L"%systemroot%\\SysWOW64\\ntdsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsatq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsbcli.dll", NULL},
    {L"wntdsbcli.dll", L"%systemroot%\\SysWOW64\\ntdsbcli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsbmsg.dll", NULL},
    {L"wntdsbmsg.dll", L"%systemroot%\\SysWOW64\\ntdsbmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsbsrv.dll", NULL},
    {L"wntdsbsrv.dll", L"%systemroot%\\SysWOW64\\ntdsbsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsetup.dll", NULL},
    {L"wntdsetup.dll", L"%systemroot%\\SysWOW64\\ntdsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdskcc.dll", NULL},
    {L"wntdskcc.dll", L"%systemroot%\\SysWOW64\\ntdskcc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsmsg.dll", NULL},
    {L"wntdsmsg.dll", L"%systemroot%\\SysWOW64\\ntdsmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsperf.dll", NULL},
    {L"wntdsperf.dll", L"%systemroot%\\SysWOW64\\ntdsperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsutil.exe", NULL},
    {L"wntdsutil.exe", L"%systemroot%\\SysWOW64\\ntdsutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\ntevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrs.exe", NULL},
    {L"wntfrs.exe", L"%systemroot%\\SysWOW64\\ntfrs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrsapi.dll", NULL},
    {L"wntfrsapi.dll", L"%systemroot%\\SysWOW64\\ntfrsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrsprf.dll", NULL},
    {L"wntfrsprf.dll", L"%systemroot%\\SysWOW64\\ntfrsprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntfrsres.dll", NULL},
    {L"wntfrsres.dll", L"%systemroot%\\SysWOW64\\ntfrsres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ntfsdrv.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\ntlanman.dll", NULL},
    {L"wntlanman.dll", L"%systemroot%\\SysWOW64\\ntlanman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlanui.dll", NULL},
    {L"wntlanui.dll", L"%systemroot%\\SysWOW64\\ntlanui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlanui2.dll", NULL},
    {L"wntlanui2.dll", L"%systemroot%\\SysWOW64\\ntlanui2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlsapi.dll", NULL},
    {L"wntlsapi.dll", L"%systemroot%\\SysWOW64\\ntlsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmarta.dll", NULL},
    {L"wntmarta.dll", L"%systemroot%\\SysWOW64\\ntmarta.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsapi.dll", NULL},
    {L"wntmsapi.dll", L"%systemroot%\\SysWOW64\\ntmsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsdba.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\ntoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntprint.dll", NULL},
    {L"wntprint.dll", L"%systemroot%\\SysWOW64\\ntprint.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntsd.exe", NULL},
    {L"wntsd.exe", L"%systemroot%\\SysWOW64\\ntsd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntshrui.dll", NULL},
    {L"wntshrui.dll", L"%systemroot%\\SysWOW64\\ntshrui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntvdm64.dll", NULL},
    {L"wntvdm64.dll", L"%systemroot%\\SysWOW64\\ntvdm64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\null.sys", NULL},
    {NULL, L"%systemroot%\\system32\\oakley.dll", NULL},
    {L"woakley.dll", L"%systemroot%\\SysWOW64\\oakley.dll", NULL},
    {NULL, L"%systemroot%\\system32\\objsel.dll", NULL},
    {L"wobjsel.dll", L"%systemroot%\\SysWOW64\\objsel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\occache.dll", NULL},
    {L"woccache.dll", L"%systemroot%\\SysWOW64\\occache.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\ocgen.dll", NULL},
    {L"wodbc16gt.dll", L"%systemroot%\\SysWOW64\\odbc16gt.dll", NULL},
    {L"wodbcp32r.dll", L"%systemroot%\\SysWOW64\\odbcp32r.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oeimport.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oemig50.exe", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oemiglib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\offfilt.dll", NULL},
    {L"wofffilt.dll", L"%systemroot%\\SysWOW64\\offfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ohci1394.sys", NULL},
    {L"wole2.dll", L"%systemroot%\\SysWOW64\\ole2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleacc.dll", NULL},
    {L"woleacc.dll", L"%systemroot%\\SysWOW64\\oleacc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleaccrc.dll", NULL},
    {L"woleaccrc.dll", L"%systemroot%\\SysWOW64\\oleaccrc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olecli32.dll", NULL},
    {L"wolecli32.dll", L"%systemroot%\\SysWOW64\\olecli32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olecnv32.dll", NULL},
    {L"wolecnv32.dll", L"%systemroot%\\SysWOW64\\olecnv32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oledlg.dll", NULL},
    {L"woledlg.dll", L"%systemroot%\\SysWOW64\\oledlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleprn.dll", NULL},
    {L"woleprn.dll", L"%systemroot%\\SysWOW64\\oleprn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olesvr32.dll", NULL},
    {L"wolesvr32.dll", L"%systemroot%\\SysWOW64\\olesvr32.dll", NULL},
    {L"wolethk32.dll", L"%systemroot%\\SysWOW64\\olethk32.dll", NULL},
    {L"opnfiles.exe", L"%systemroot%\\system32\\openfiles.exe", NULL},
    {NULL, L"%systemroot%\\system32\\opengl32.dll", NULL},
    {L"wopengl32.dll", L"%systemroot%\\SysWOW64\\opengl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\oprghdlr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\osk.exe", NULL},
    {L"wosk.exe", L"%systemroot%\\SysWOW64\\osk.exe", NULL},
    {L"wospf.dll", L"%systemroot%\\SysWOW64\\ospf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ospfagnt.dll", NULL},
    {L"wospfagnt.dll", L"%systemroot%\\SysWOW64\\ospfagnt.dll", NULL},
    {L"wospfmib.dll", L"%systemroot%\\SysWOW64\\ospfmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\osuninst.dll", NULL},
    {L"wosuninst.dll", L"%systemroot%\\SysWOW64\\osuninst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\P3Admin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\P3Store.dll", NULL},
    {NULL, L"%systemroot%\\system32\\packager.exe", NULL},
    {L"wpackager.exe", L"%systemroot%\\SysWOW64\\packager.exe", NULL},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\PADRS404.DLL", L"intl.inf"},
    {L"wPADRS404.DLL", L"%systemroot%\\ime (x86)\\SHARED\\RES\\PADRS404.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs411.dll", L"intl.inf"},
    {L"wpadrs411.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs411.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs412.dll", L"intl.inf"},
    {L"wpadrs412.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs412.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs804.dll", L"intl.inf"},
    {L"wpadrs804.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs804.dll", L"intl.inf"},
    {L"pagefile.vbs", L"%systemroot%\\system32\\pagefileconfig.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\panmap.dll", NULL},
    {L"wpanmap.dll", L"%systemroot%\\SysWOW64\\panmap.dll", NULL},
    {L"wpaqsp.dll", L"%systemroot%\\SysWOW64\\paqsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\parser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\partmgr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\pathping.exe", NULL},
    {L"wpathping.exe", L"%systemroot%\\SysWOW64\\pathping.exe", NULL},
    {NULL, L"%systemroot%\\system32\\pautoenr.dll", NULL},
    {L"wpautoenr.dll", L"%systemroot%\\SysWOW64\\pautoenr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\pbsnetoc.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\pchshell.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\pchsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pciide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pciidex.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pcmcia.sys", NULL},
    {NULL, L"%systemroot%\\system32\\pdh.dll", NULL},
    {L"wpdh.dll", L"%systemroot%\\SysWOW64\\pdh.dll", NULL},
    {L"wpentnt.exe", L"%systemroot%\\SysWOW64\\pentnt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\perfctrs.dll", NULL},
    {L"wperfctrs.dll", L"%systemroot%\\SysWOW64\\perfctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfdisk.dll", NULL},
    {L"wperfdisk.dll", L"%systemroot%\\SysWOW64\\perfdisk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfmon.exe", NULL},
    {L"wperfmon.exe", L"%systemroot%\\SysWOW64\\perfmon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\perfnet.dll", NULL},
    {L"wperfnet.dll", L"%systemroot%\\SysWOW64\\perfnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfos.dll", NULL},
    {L"wperfos.dll", L"%systemroot%\\SysWOW64\\perfos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfproc.dll", NULL},
    {L"wperfproc.dll", L"%systemroot%\\SysWOW64\\perfproc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfts.dll", NULL},
    {L"wperfts.dll", L"%systemroot%\\SysWOW64\\perfts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\perm2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\perm2dll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\perm3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\perm3dd.dll", NULL},
    {L"bhp046.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\pgmparser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\PhilDec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\phon.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\photowiz.dll", NULL},
    {L"wphotowiz.dll", L"%systemroot%\\SysWOW64\\photowiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pid.dll", NULL},
    {L"wpid.dll", L"%systemroot%\\SysWOW64\\pid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pidgen.dll", NULL},
    {L"wpidgen.dll", L"%systemroot%\\SysWOW64\\pidgen.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pifmgr.dll", NULL},
    {L"wpifmgr.dll", L"%systemroot%\\SysWOW64\\pifmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ping.exe", NULL},
    {L"wping.exe", L"%systemroot%\\SysWOW64\\ping.exe", NULL},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSA.DLL", L"intl.inf"},
    {L"wPINTLCSA.DLL", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSA.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSD.DIC", L"intl.inf"},
    {L"wPINTLCSD.DIC", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSD.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSD.DLL", L"intl.inf"},
    {L"wPINTLCSD.DLL", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSD.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSK.DIC", L"intl.inf"},
    {L"wPINTLCSK.DIC", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSK.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGD.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGDX.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGI.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGIX.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\PINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGR.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLPHR.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\pjlmon.dll", NULL},
    {L"wpjlmon.dll", L"%systemroot%\\SysWOW64\\pjlmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\plasmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\PlaylistTransformPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\plugin.ocx", NULL},
    {L"wplugin.ocx", L"%systemroot%\\SysWOW64\\plugin.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PMIGRATE.DLL", L"intl.inf"},
    {L"wpmspl.dll", L"%systemroot%\\SysWOW64\\pmspl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pngfilt.dll", NULL},
    {L"wpngfilt.dll", L"%systemroot%\\SysWOW64\\pngfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pnrmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\policman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\polstore.dll", NULL},
    {L"wpolstore.dll", L"%systemroot%\\SysWOW64\\polstore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\Pop3Auth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\Pop3evt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\pop3oc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\pop3perf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\pop3snap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\POP3Server\\POP3Svc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\portcls.sys", NULL},
    {NULL, L"%systemroot%\\system32\\powercfg.cpl", NULL},
    {L"wpowercfg.cpl", L"%systemroot%\\SysWOW64\\powercfg.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\powercfg.exe", NULL},
    {L"wpowercfg.exe", L"%systemroot%\\SysWOW64\\powercfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\powerfil.sys", NULL},
    {NULL, L"%systemroot%\\system32\\powrprof.dll", NULL},
    {L"wpowrprof.dll", L"%systemroot%\\SysWOW64\\powrprof.dll", NULL},
    {L"bhp012.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\PPP.DLL", NULL},
    {L"nmpppoe.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\PPPOE.dll", NULL},
    {NULL, L"%systemroot%\\system32\\prc.nls", NULL},
    {NULL, L"%systemroot%\\system32\\prcp.nls", NULL},
    {NULL, L"%systemroot%\\system32\\prflbmsg.dll", NULL},
    {L"wprflbmsg.dll", L"%systemroot%\\SysWOW64\\prflbmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\print.exe", NULL},
    {L"wprint.exe", L"%systemroot%\\SysWOW64\\print.exe", NULL},
    {NULL, L"%systemroot%\\system32\\printui.dll", NULL},
    {L"wprintui.dll", L"%systemroot%\\SysWOW64\\printui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\prncnfg.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prndrvr.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnjobs.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnmngr.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnport.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\prnqctl.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\processr.sys", NULL},
    {L"wproctexe.ocx", L"%systemroot%\\SysWOW64\\proctexe.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\profmap.dll", NULL},
    {L"wprofmap.dll", L"%systemroot%\\SysWOW64\\profmap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\progman.exe", NULL},
    {L"wprogman.exe", L"%systemroot%\\SysWOW64\\progman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\proquota.exe", NULL},
    {L"wproquota.exe", L"%systemroot%\\SysWOW64\\proquota.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\provthrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\proxycfg.exe", NULL},
    {L"wproxycfg.exe", L"%systemroot%\\SysWOW64\\proxycfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\psapi.dll", NULL},
    {L"wpsapi.dll", L"%systemroot%\\SysWOW64\\psapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\psbase.dll", NULL},
    {L"wpsbase.dll", L"%systemroot%\\SysWOW64\\psbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pschdprf.dll", NULL},
    {L"wpschdprf.dll", L"%systemroot%\\SysWOW64\\pschdprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\psched.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pscr.sys", NULL},
    {L"wpsisdecd.dll", L"%systemroot%\\SysWOW64\\psisdecd.dll", NULL},
    {L"wpsisrndr.ax", L"%systemroot%\\SysWOW64\\psisrndr.ax", NULL},
    {NULL, L"%systemroot%\\system32\\psnppagn.dll", NULL},
    {L"wpsnppagn.dll", L"%systemroot%\\SysWOW64\\psnppagn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pstorec.dll", NULL},
    {L"wpstorec.dll", L"%systemroot%\\SysWOW64\\pstorec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pstorsvc.dll", NULL},
    {L"wpstorsvc.dll", L"%systemroot%\\SysWOW64\\pstorsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ptilink.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ptpusd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pubprn.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\pwdssp.dll", NULL},
    {L"wpwdssp.dll", L"%systemroot%\\SysWOW64\\pwdssp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qappsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\qasf.dll", NULL},
    {L"wqasf.dll", L"%systemroot%\\SysWOW64\\qasf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qcap.dll", NULL},
    {L"wqcap.dll", L"%systemroot%\\SysWOW64\\qcap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qdv.dll", NULL},
    {L"wqdv.dll", L"%systemroot%\\SysWOW64\\qdv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qdvd.dll", NULL},
    {L"wqdvd.dll", L"%systemroot%\\SysWOW64\\qdvd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qedit.dll", NULL},
    {L"wqedit.dll", L"%systemroot%\\SysWOW64\\qedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qedwipes.dll", NULL},
    {L"wqedwipes.dll", L"%systemroot%\\SysWOW64\\qedwipes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qic157.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1080.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql10wnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql12160.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1240.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1280.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql2100.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql2200.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql2300.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qlstrmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\qmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qmgrprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qntmmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\qosname.dll", NULL},
    {L"wqosname.dll", L"%systemroot%\\SysWOW64\\qosname.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qprocess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\quartz.dll", NULL},
    {L"wquartz.dll", L"%systemroot%\\SysWOW64\\quartz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\query.dll", NULL},
    {L"wquery.dll", L"%systemroot%\\SysWOW64\\query.dll", NULL},
    {NULL, L"%systemroot%\\system32\\query.exe", NULL},
    {NULL, L"%systemroot%\\system32\\quick.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\quser.exe", NULL},
    {NULL, L"%systemroot%\\system32\\qwinsta.exe", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\Lexicon\\1033\\r1033tts.lxa", NULL},
    {NULL, L"%systemroot%\\system32\\racpldlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ramdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rasacd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasadhlp.dll", NULL},
    {L"wrasadhlp.dll", L"%systemroot%\\SysWOW64\\rasadhlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasapi32.dll", NULL},
    {L"wrasapi32.dll", L"%systemroot%\\SysWOW64\\rasapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasauto.dll", NULL},
    {L"wrasauto.dll", L"%systemroot%\\SysWOW64\\rasauto.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasautou.exe", NULL},
    {L"wrasautou.exe", L"%systemroot%\\SysWOW64\\rasautou.exe", NULL},
    {NULL, L"%systemroot%\\system32\\raschap.dll", NULL},
    {L"wraschap.dll", L"%systemroot%\\SysWOW64\\raschap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasctrs.dll", NULL},
    {L"wrasctrs.dll", L"%systemroot%\\SysWOW64\\rasctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasdial.exe", NULL},
    {L"wrasdial.exe", L"%systemroot%\\SysWOW64\\rasdial.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rasdlg.dll", NULL},
    {L"wrasdlg.dll", L"%systemroot%\\SysWOW64\\rasdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rasl2tp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasman.dll", NULL},
    {L"wrasman.dll", L"%systemroot%\\SysWOW64\\rasman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmans.dll", NULL},
    {L"wrasmans.dll", L"%systemroot%\\SysWOW64\\rasmans.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmontr.dll", NULL},
    {L"wrasmontr.dll", L"%systemroot%\\SysWOW64\\rasmontr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmxs.dll", NULL},
    {L"wrasmxs.dll", L"%systemroot%\\SysWOW64\\rasmxs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasphone.exe", NULL},
    {L"wrasphone.exe", L"%systemroot%\\SysWOW64\\rasphone.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rasppp.dll", NULL},
    {L"wrasppp.dll", L"%systemroot%\\SysWOW64\\rasppp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspppoe.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspptp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspti.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasrad.dll", NULL},
    {L"wrasrad.dll", L"%systemroot%\\SysWOW64\\rasrad.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rassapi.dll", NULL},
    {L"wrassapi.dll", L"%systemroot%\\SysWOW64\\rassapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasser.dll", NULL},
    {L"wrasser.dll", L"%systemroot%\\SysWOW64\\rasser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rassfm.dll", NULL},
    {L"wrassfm.dll", L"%systemroot%\\SysWOW64\\rassfm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rastapi.dll", NULL},
    {L"wrastapi.dll", L"%systemroot%\\SysWOW64\\rastapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rastls.dll", NULL},
    {L"wrastls.dll", L"%systemroot%\\SysWOW64\\rastls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasuser.dll", NULL},
    {L"wrasuser.dll", L"%systemroot%\\SysWOW64\\rasuser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rawwan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\RemInst\\rbfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rcancel.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\rcbdyctl.dll", NULL},
    {L"wrcbdyctl.dll", L"%systemroot%\\SysWOW64\\rcbdyctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rcimlby.exe", NULL},
    {L"wrcimlby.exe", L"%systemroot%\\SysWOW64\\rcimlby.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rcp.exe", NULL},
    {L"wrcp.exe", L"%systemroot%\\SysWOW64\\rcp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdbss.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdchost.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpcdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpcfgex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rdpclip.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rdpdd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpdr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpsnd.dll", NULL},
    {L"wrdpsnd.dll", L"%systemroot%\\SysWOW64\\rdpsnd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpwd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpwsx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rdsaddin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rdshost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\recover.exe", NULL},
    {L"wrecover.exe", L"%systemroot%\\SysWOW64\\recover.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\redbook.sys", NULL},
    {NULL, L"%systemroot%\\system32\\reg.exe", NULL},
    {L"wreg.exe", L"%systemroot%\\SysWOW64\\reg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regapi.dll", NULL},
    {L"wregapi.dll", L"%systemroot%\\SysWOW64\\regapi.dll", NULL},
    {NULL, L"%systemroot%\\regedit.exe", NULL},
    {L"wregedit.exe", L"%systemroot%\\SysWOW64\\regedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regedt32.exe", NULL},
    {L"wregedt32.exe", L"%systemroot%\\SysWOW64\\regedt32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\regfilt.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\regini.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regsvc.dll", NULL},
    {L"wregsvc.dll", L"%systemroot%\\SysWOW64\\regsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\regsvr32.exe", NULL},
    {L"wregsvr32.exe", L"%systemroot%\\SysWOW64\\regsvr32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regtrace.exe", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\regwiz.exe", NULL},
    {L"wregwiz.exe", L"%systemroot%\\SysWOW64\\regwiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regwizc.dll", NULL},
    {L"wregwizc.dll", L"%systemroot%\\SysWOW64\\regwizc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\relog.exe", NULL},
    {L"wrelog.exe", L"%systemroot%\\SysWOW64\\relog.exe", NULL},
    {NULL, L"%systemroot%\\system32\\remotepg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\remotesp.tsp", NULL},
    {L"wremotesp.tsp", L"%systemroot%\\SysWOW64\\remotesp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\remrras.exe", NULL},
    {L"wremrras.exe", L"%systemroot%\\SysWOW64\\remrras.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rend.dll", NULL},
    {L"wrend.dll", L"%systemroot%\\SysWOW64\\rend.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\repdrvfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\replace.exe", NULL},
    {L"wreplace.exe", L"%systemroot%\\SysWOW64\\replace.exe", NULL},
    {NULL, L"%systemroot%\\system32\\replprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\reset.exe", NULL},
    {NULL, L"%systemroot%\\Cluster\\ResrcMon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\resutils.dll", NULL},
    {L"wresutils.dll", L"%systemroot%\\SysWOW64\\resutils.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rexec.exe", NULL},
    {L"wrexec.exe", L"%systemroot%\\SysWOW64\\rexec.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rexpire.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rfeed.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rgroup.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\rigpsnap.dll", NULL},
    {L"wrigpsnap.dll", L"%systemroot%\\SysWOW64\\rigpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ripagnt.dll", NULL},
    {L"wripagnt.dll", L"%systemroot%\\SysWOW64\\ripagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\risetup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\RMCast.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rndismp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rnr20.dll", NULL},
    {L"wrnr20.dll", L"%systemroot%\\SysWOW64\\rnr20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\romanime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\rootmdm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\route.exe", NULL},
    {L"wroute.exe", L"%systemroot%\\SysWOW64\\route.exe", NULL},
    {NULL, L"%systemroot%\\system32\\routemon.exe", NULL},
    {L"wroutemon.exe", L"%systemroot%\\SysWOW64\\routemon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\routetab.dll", NULL},
    {L"wroutetab.dll", L"%systemroot%\\SysWOW64\\routetab.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcns4.dll", NULL},
    {L"wrpcns4.dll", L"%systemroot%\\SysWOW64\\rpcns4.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcnsh.dll", NULL},
    {L"wrpcnsh.dll", L"%systemroot%\\SysWOW64\\rpcnsh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcproxy\\rpcproxy.dll", NULL},
    {L"wrpcproxy.dll", L"%systemroot%\\SysWOW64\\rpcproxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rpcref.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\rpcrt4.dll", NULL},
    {L"wrpcrt4.dll", L"%systemroot%\\SysWOW64\\rpcrt4.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rrasprxy.dll", NULL},
    {L"wrrasprxy.dll", L"%systemroot%\\SysWOW64\\rrasprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rraswiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsAdmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsCli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsCommon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsConn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsEng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsEngPs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\rsess.vbs", L"ins.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\rsfilter.sys", NULL},
    {NULL, L"%systemroot%\\system32\\RsFsa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsfsaps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsh.exe", NULL},
    {L"wrsh.exe", L"%systemroot%\\SysWOW64\\rsh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rshx32.dll", NULL},
    {L"wrshx32.dll", L"%systemroot%\\SysWOW64\\rshx32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsIdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsJob.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsLaunch.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsLnk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmmllsv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsMover.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsmps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsmsink.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsnotify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsopprov.exe", NULL},
    {L"wrsopprov.exe", L"%systemroot%\\SysWOW64\\rsopprov.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\rsoptcom.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Rss.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsServ.exe", NULL},
    {NULL, L"%systemroot%\\system32\\RsServPs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsShell.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsSub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsSubPs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsTask.dll", NULL},
    {NULL, L"%systemroot%\\system32\\RsTore.exe", NULL},
    {L"bhp022.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\RSVP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\RTL39A64.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rtm.dll", NULL},
    {L"wrtm.dll", L"%systemroot%\\SysWOW64\\rtm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtrfiltr.dll", NULL},
    {L"wrtrfiltr.dll", L"%systemroot%\\SysWOW64\\rtrfiltr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtrupg.dll", NULL},
    {L"wrtrupg.dll", L"%systemroot%\\SysWOW64\\rtrupg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtutils.dll", NULL},
    {L"wrtutils.dll", L"%systemroot%\\SysWOW64\\rtutils.dll", NULL},
    {NULL, L"%systemroot%\\system32\\runas.exe", NULL},
    {L"wrunas.exe", L"%systemroot%\\SysWOW64\\runas.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rundll32.exe", NULL},
    {L"wrundll32.exe", L"%systemroot%\\SysWOW64\\rundll32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\runonce.exe", NULL},
    {L"wrunonce.exe", L"%systemroot%\\SysWOW64\\runonce.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rwinsta.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rwnh.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\sacdrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sacsess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sacsvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrcdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrslv.dll", NULL},
    {L"wsainstal.dll", L"%systemroot%\\SysWOW64\\sainstall.dll", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\sam.sdf", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\sam.spd", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapi.cpl", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapi.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapisvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\saport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\savedump.exe", NULL},
    {L"wsavedump.exe", L"%systemroot%\\SysWOW64\\savedump.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sbp2port.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sc.exe", NULL},
    {L"wsc.exe", L"%systemroot%\\SysWOW64\\sc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\scarddlg.dll", NULL},
    {L"wscarddlg.dll", L"%systemroot%\\SysWOW64\\scarddlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scardsvr.exe", NULL},
    {L"wscardsvr.exe", L"%systemroot%\\SysWOW64\\scardsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sccbase.dll", NULL},
    {L"wsccbase.dll", L"%systemroot%\\SysWOW64\\sccbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sccmn50m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sccmusbm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sccsccp.dll", NULL},
    {L"wsccsccp.dll", L"%systemroot%\\SysWOW64\\sccsccp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scecli.dll", NULL},
    {L"wscecli.dll", L"%systemroot%\\SysWOW64\\scecli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scesrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schedsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schmmgmt.dll", NULL},
    {L"wschmmgmt.dll", L"%systemroot%\\SysWOW64\\schmmgmt.dll", NULL},
    {L"sctasks.exe", L"%systemroot%\\system32\\schtasks.exe", NULL},
    {L"wsctasks.exe", L"%systemroot%\\SysWOW64\\schtasks.exe", NULL},
    {NULL, L"%systemroot%\\system32\\schupgr.exe", NULL},
    {L"wschupgr.exe", L"%systemroot%\\SysWOW64\\schupgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sclgntfy.dll", NULL},
    {L"wsclgntfy.dll", L"%systemroot%\\SysWOW64\\sclgntfy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scmstcs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\SCR111.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\scrcons.exe", NULL},
    {NULL, L"%systemroot%\\system32\\scrdenrl.dll", NULL},
    {L"scrdia64.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\ia64\\scrdenrl.dll", NULL},
    {L"scrdw2k.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\w2k\\scrdenrl.dll", NULL},
    {L"scrdx86.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\x86\\scrdenrl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scredir.dll", NULL},
    {L"wscredir.dll", L"%systemroot%\\SysWOW64\\scredir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\scripto.dll", L"ims.inf"},
    {L"wscripto.dll", L"%systemroot%\\SysWOW64\\scripto.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scriptpw.dll", NULL},
    {L"wscriptpw.dll", L"%systemroot%\\SysWOW64\\scriptpw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scrnsave.scr", NULL},
    {NULL, L"%systemroot%\\system32\\scrptutl.dll", NULL},
    {L"wscrptutl.dll", L"%systemroot%\\SysWOW64\\scrptutl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiprnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sdpblb.dll", NULL},
    {L"wsdpblb.dll", L"%systemroot%\\SysWOW64\\sdpblb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\seaddsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\secedit.exe", NULL},
    {L"wsecedit.exe", L"%systemroot%\\SysWOW64\\secedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\seclogon.dll", NULL},
    {L"wseclogon.dll", L"%systemroot%\\SysWOW64\\seclogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\secur32.dll", NULL},
    {L"wsecur32.dll", L"%systemroot%\\SysWOW64\\secur32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\security.dll", NULL},
    {L"wsecurity.dll", L"%systemroot%\\SysWOW64\\security.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sendcmsg.dll", NULL},
    {L"wsendcmsg.dll", L"%systemroot%\\SysWOW64\\sendcmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sendmail.dll", NULL},
    {L"wsendmail.dll", L"%systemroot%\\SysWOW64\\sendmail.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sens.dll", NULL},
    {L"wsens.dll", L"%systemroot%\\SysWOW64\\sens.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sensapi.dll", NULL},
    {L"wsensapi.dll", L"%systemroot%\\SysWOW64\\sensapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\senscfg.dll", NULL},
    {L"wsenscfg.dll", L"%systemroot%\\SysWOW64\\senscfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\seo.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\seos.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\serenum.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\serial.sys", NULL},
    {NULL, L"%systemroot%\\system32\\serialui.dll", NULL},
    {L"wserialui.dll", L"%systemroot%\\SysWOW64\\serialui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sermouse.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\serscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\servdeps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\services.exe", NULL},
    {NULL, L"%systemroot%\\system32\\serwvdrv.dll", NULL},
    {L"wserwvdrv.dll", L"%systemroot%\\SysWOW64\\serwvdrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sessmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sethc.exe", NULL},
    {L"wsethc.exe", L"%systemroot%\\SysWOW64\\sethc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\setup.exe", NULL},
    {L"tscmsi02.w32", L"%systemroot%\\system32\\clients\\tsclient\\win32\\setup.exe", NULL},
    {L"wisetup.exe", L"%systemroot%\\SysWOW64\\InstallShield\\setup.exe", NULL},
    {L"wsetup.exe", L"%systemroot%\\SysWOW64\\setup.exe", NULL},
    {L"wsetup16.exe", L"%systemroot%\\SysWOW64\\setup16.exe", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\setup50.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\setupqry.dll", NULL},
    {NULL, L"%systemroot%\\system32\\setx.exe", NULL},
    {L"wsetx.exe", L"%systemroot%\\SysWOW64\\setx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfc_os.dll", NULL},
    {L"wsfc_os.dll", L"%systemroot%\\SysWOW64\\sfc_os.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfloppy.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmapi.dll", NULL},
    {L"wsfmapi.dll", L"%systemroot%\\SysWOW64\\sfmapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfmatalk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmatmsg.dll", NULL},
    {L"wsfmatmsg.dll", L"%systemroot%\\SysWOW64\\sfmatmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfmctrs.dll", NULL},
    {L"wsfmctrs.dll", L"%systemroot%\\SysWOW64\\sfmctrs.dll", NULL},
    {L"wsfmmon.dll", L"%systemroot%\\SysWOW64\\sfmmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfmmsg.dll", NULL},
    {L"wsfmmsg.dll", L"%systemroot%\\SysWOW64\\sfmmsg.dll", NULL},
    {L"wsfmprint.exe", L"%systemroot%\\SysWOW64\\sfmprint.exe", NULL},
    {L"wsfmpsdib.dll", L"%systemroot%\\SysWOW64\\sfmpsdib.dll", NULL},
    {L"wsfmpsexe.exe", L"%systemroot%\\SysWOW64\\sfmpsexe.exe", NULL},
    {L"wsfmpsfnt.dll", L"%systemroot%\\SysWOW64\\sfmpsfnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfmsrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmsvc.exe", NULL},
    {L"wsfmsvc.exe", L"%systemroot%\\SysWOW64\\sfmsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfmwshat.dll", NULL},
    {L"wsfmwshat.dll", L"%systemroot%\\SysWOW64\\sfmwshat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shadow.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shdoclc.dll", NULL},
    {L"wshdoclc.dll", L"%systemroot%\\SysWOW64\\shdoclc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shdocvw.dll", NULL},
    {L"wshdocvw.dll", L"%systemroot%\\SysWOW64\\shdocvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shell32.dll", NULL},
    {L"wshell32.dll", L"%systemroot%\\SysWOW64\\shell32.dll", NULL},
    {L"class_ss.dll", L"%systemroot%\\system32\\shellstyle.dll", NULL},
    {L"wclass_ss.dll", L"%systemroot%\\SysWOW64\\shellstyle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shfolder.dll", NULL},
    {L"wshfolder.dll", L"%systemroot%\\SysWOW64\\shfolder.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shgina.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shimgvw.dll", NULL},
    {L"wshimgvw.dll", L"%systemroot%\\SysWOW64\\shimgvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shlwapi.dll", NULL},
    {L"wshlwapi.dll", L"%systemroot%\\SysWOW64\\shlwapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shmedia.dll", NULL},
    {L"wshmedia.dll", L"%systemroot%\\SysWOW64\\shmedia.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shmgrate.exe", NULL},
    {L"wshmgrate.exe", L"%systemroot%\\SysWOW64\\shmgrate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shrpubw.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shscrap.dll", NULL},
    {L"wshscrap.dll", L"%systemroot%\\SysWOW64\\shscrap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shsvcs.dll", NULL},
    {L"wshsvcs.dll", L"%systemroot%\\SysWOW64\\shsvcs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shutdown.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sigtab.dll", NULL},
    {L"wsigtab.dll", L"%systemroot%\\SysWOW64\\sigtab.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sigverif.exe", NULL},
    {L"wsigverif.exe", L"%systemroot%\\SysWOW64\\sigverif.exe", NULL},
    {L"wsimpdata.tlb", L"%systemroot%\\SysWOW64\\simpdata.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\simptcp.dll", NULL},
    {L"wsimptcp.dll", L"%systemroot%\\SysWOW64\\simptcp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sis.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sisbkup.dll", NULL},
    {L"wsisbkup.dll", L"%systemroot%\\SysWOW64\\sisbkup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\skdll.dll", NULL},
    {L"wskdll.dll", L"%systemroot%\\SysWOW64\\skdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\skeys.exe", NULL},
    {L"wskeys.exe", L"%systemroot%\\SysWOW64\\skeys.exe", NULL},
    {NULL, L"%systemroot%\\system32\\slbcsp.dll", NULL},
    {L"wslbcsp.dll", L"%systemroot%\\SysWOW64\\slbcsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slbiop.dll", NULL},
    {L"wslbiop.dll", L"%systemroot%\\SysWOW64\\slbiop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slbrccsp.dll", NULL},
    {L"wslbrccsp.dll", L"%systemroot%\\SysWOW64\\slbrccsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\NETMON\\slbs.dll", NULL},
    {L"bhp013.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\SMB.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\smb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\smclib.sys", NULL},
    {NULL, L"%systemroot%\\system32\\smcyscom.dll", NULL},
    {L"wsmcyscom.dll", L"%systemroot%\\SysWOW64\\smcyscom.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smi2smir.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smierrsm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smierrsy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smimsgif.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smlogcfg.dll", NULL},
    {L"wsmlogcfg.dll", L"%systemroot%\\SysWOW64\\smlogcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smlogsvc.exe", NULL},
    {L"wsmlogsvc.exe", L"%systemroot%\\SysWOW64\\smlogsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\smss.exe", NULL},
    {L"wsmss.exe", L"%systemroot%\\SysWOW64\\smss.exe", NULL},
    {NULL, L"%systemroot%\\system32\\smtpapi.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\smtpcons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smtpctrs.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpsvc.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\snapshot.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sndrec32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sndvol32.exe", NULL},
    {NULL, L"%systemroot%\\help\\sniffpol.dll", NULL},
    {L"bhp014.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\SNMP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\snmp.exe", NULL},
    {L"wsnmp.exe", L"%systemroot%\\SysWOW64\\snmp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\snmpapi.dll", NULL},
    {L"wsnmpapi.dll", L"%systemroot%\\SysWOW64\\snmpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpcl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpincl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpsmir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmpsnap.dll", NULL},
    {L"wsnmpsnap.dll", L"%systemroot%\\SysWOW64\\snmpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpstup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpthrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmptrap.exe", NULL},
    {L"wsnmptrap.exe", L"%systemroot%\\SysWOW64\\snmptrap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\snprfdll.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\snyaitmc.sys", NULL},
    {NULL, L"%systemroot%\\ime\\SOFTKBD.DLL", NULL},
    {L"wSOFTKBD.DLL", L"%systemroot%\\ime (x86)\\SOFTKBD.DLL", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\softkey.dll", L"intl.inf"},
    {L"wsoftkey.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\softkey.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\softpub.dll", NULL},
    {L"wsoftpub.dll", L"%systemroot%\\SysWOW64\\softpub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonyait.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonydcam.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonymc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sort.exe", NULL},
    {L"wsort.exe", L"%systemroot%\\SysWOW64\\sort.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sortkey.nls", NULL},
    {L"wsortkey.nls", L"%systemroot%\\SysWOW64\\sortkey.nls", NULL},
    {NULL, L"%systemroot%\\system32\\sorttbls.nls", NULL},
    {L"wsorttbls.nls", L"%systemroot%\\SysWOW64\\sorttbls.nls", NULL},
    {L"wsound.drv", L"%systemroot%\\SysWOW64\\sound.drv", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\spcommon.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\1033\\spcplui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\spctramc.sys", NULL},
    {NULL, L"%systemroot%\\ime\\spgrmr.dll", NULL},
    {L"wspgrmr.dll", L"%systemroot%\\ime (x86)\\spgrmr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\splitter.sys", NULL},
    {NULL, L"%systemroot%\\splwow64.exe", NULL},
    {L"wspnike.dll", L"%systemroot%\\SysWOW64\\spnike.dll", NULL},
    {NULL, L"%systemroot%\\system32\\spoolss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\spoolsv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sprestrt.exe", NULL},
    {L"wsprestrt.exe", L"%systemroot%\\SysWOW64\\sprestrt.exe", NULL},
    {L"wsprio600.dll", L"%systemroot%\\SysWOW64\\sprio600.dll", NULL},
    {L"wsprio800.dll", L"%systemroot%\\SysWOW64\\sprio800.dll", NULL},
    {NULL, L"%systemroot%\\ime\\SPTIP.dll", NULL},
    {L"wSPTIP.dll", L"%systemroot%\\ime (x86)\\SPTIP.dll", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\spttseng.dll", NULL},
    {L"wSpxupchk.dll", L"%systemroot%\\SysWOW64\\Spxupchk.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\sqlxmlx.dll", NULL},
    {L"wsqlxmlx.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\sqlxmlx.dll", NULL},
    {L"srgb.icm", L"%systemroot%\\system32\\spool\\drivers\\color\\sRGB Color Space Profile.icm", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\srv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\srvsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ssinc.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ssmarque.scr", NULL},
    {NULL, L"%systemroot%\\help\\sstub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\stclient.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\stcusb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\stdole32.tlb", NULL},
    {L"wstdole32.tlb", L"%systemroot%\\SysWOW64\\stdole32.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\stdprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sti.dll", NULL},
    {L"wsti.dll", L"%systemroot%\\SysWOW64\\sti.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sti_ci.dll", NULL},
    {L"wsti_ci.dll", L"%systemroot%\\SysWOW64\\sti_ci.dll", NULL},
    {L"wstlncoin.dll", L"%systemroot%\\SysWOW64\\stlncoin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\stobject.dll", NULL},
    {L"wstobject.dll", L"%systemroot%\\SysWOW64\\stobject.dll", NULL},
    {L"wstorage.dll", L"%systemroot%\\SysWOW64\\storage.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\storport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\storprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\storprov.dll", NULL},
    {L"wstorprov.dll", L"%systemroot%\\SysWOW64\\storprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\stream.sys", NULL},
    {NULL, L"%systemroot%\\system32\\streamci.dll", NULL},
    {L"wstreamci.dll", L"%systemroot%\\SysWOW64\\streamci.dll", NULL},
    {NULL, L"%systemroot%\\system32\\strmfilt.dll", NULL},
    {L"wstrmfilt.dll", L"%systemroot%\\SysWOW64\\strmfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\strmtest.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\subst.exe", NULL},
    {L"wsubst.exe", L"%systemroot%\\SysWOW64\\subst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\svcext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\svchost.exe", NULL},
    {L"wsvchost.exe", L"%systemroot%\\SysWOW64\\svchost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\svcpack.dll", NULL},
    {L"wsvcpack.dll", L"%systemroot%\\SysWOW64\\svcpack.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swdisp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swenum.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swkeypad.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swmidi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swnvram.sys", NULL},
    {NULL, L"%systemroot%\\system32\\swprv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sxs.dll", NULL},
    {L"wsxs.dll", L"%systemroot%\\SysWOW64\\sxs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sym_hi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sym_u3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symc810.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symc8xx.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symmpi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\syncapp.exe", NULL},
    {L"wsyncapp.exe", L"%systemroot%\\SysWOW64\\syncapp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\synceng.dll", NULL},
    {L"wsynceng.dll", L"%systemroot%\\SysWOW64\\synceng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\syncui.dll", NULL},
    {L"wsyncui.dll", L"%systemroot%\\SysWOW64\\syncui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sysaudio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sysdm.cpl", NULL},
    {L"wsysdm.cpl", L"%systemroot%\\SysWOW64\\sysdm.cpl", NULL},
    {L"wsysedit.exe", L"%systemroot%\\SysWOW64\\sysedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sysinv.dll", NULL},
    {L"wsysinv.dll", L"%systemroot%\\SysWOW64\\sysinv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\syskey.exe", NULL},
    {L"wsyskey.exe", L"%systemroot%\\SysWOW64\\syskey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sysmon.ocx", NULL},
    {L"wsysmon.ocx", L"%systemroot%\\SysWOW64\\sysmon.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\syssetup.dll", NULL},
    {L"wsyssetup.dll", L"%systemroot%\\SysWOW64\\syssetup.dll", NULL},
    {L"sysinfo.exe", L"%systemroot%\\system32\\systeminfo.exe", NULL},
    {L"wsysinfo.exe", L"%systemroot%\\SysWOW64\\systeminfo.exe", NULL},
    {NULL, L"%systemroot%\\system32\\systray.exe", NULL},
    {L"wsystray.exe", L"%systemroot%\\SysWOW64\\systray.exe", NULL},
    {NULL, L"%systemroot%\\system32\\t2embed.dll", NULL},
    {L"wt2embed.dll", L"%systemroot%\\SysWOW64\\t2embed.dll", NULL},
    {NULL, L"%systemroot%\\system32\\takeown.exe", NULL},
    {L"wtakeown.exe", L"%systemroot%\\SysWOW64\\takeown.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tandqic.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tape.sys", NULL},
    {L"wtapi.dll", L"%systemroot%\\SysWOW64\\tapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapi3.dll", NULL},
    {L"wtapi3.dll", L"%systemroot%\\SysWOW64\\tapi3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapi32.dll", NULL},
    {L"wtapi32.dll", L"%systemroot%\\SysWOW64\\tapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapicfg.exe", NULL},
    {L"wtapicfg.exe", L"%systemroot%\\SysWOW64\\tapicfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tapiperf.dll", NULL},
    {L"wtapiperf.dll", L"%systemroot%\\SysWOW64\\tapiperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapisnap.dll", NULL},
    {L"wtapisnap.dll", L"%systemroot%\\SysWOW64\\tapisnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapisrv.dll", NULL},
    {L"wtapisrv.dll", L"%systemroot%\\SysWOW64\\tapisrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapiui.dll", NULL},
    {L"wtapiui.dll", L"%systemroot%\\SysWOW64\\tapiui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\taskkill.exe", NULL},
    {L"wtaskkill.exe", L"%systemroot%\\SysWOW64\\taskkill.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tasklist.exe", NULL},
    {L"wtasklist.exe", L"%systemroot%\\SysWOW64\\tasklist.exe", NULL},
    {NULL, L"%systemroot%\\system32\\taskmgr.exe", NULL},
    {L"wtaskmgr.exe", L"%systemroot%\\SysWOW64\\taskmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tcmsetup.exe", NULL},
    {L"wtcmsetup.exe", L"%systemroot%\\SysWOW64\\tcmsetup.exe", NULL},
    {L"bhp015.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\TCPIP.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tcpip.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tcpip6.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmib.dll", NULL},
    {L"wtcpmib.dll", L"%systemroot%\\SysWOW64\\tcpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmon.dll", NULL},
    {L"wtcpmon.dll", L"%systemroot%\\SysWOW64\\tcpmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmonui.dll", NULL},
    {L"wtcpmonui.dll", L"%systemroot%\\SysWOW64\\tcpmonui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpsvcs.exe", NULL},
    {L"wtcpsvcs.exe", L"%systemroot%\\SysWOW64\\tcpsvcs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tdc.ocx", NULL},
    {L"wtdc.ocx", L"%systemroot%\\SysWOW64\\tdc.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdpipe.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdtcp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\telephon.cpl", NULL},
    {L"wtelephon.cpl", L"%systemroot%\\SysWOW64\\telephon.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\telnet.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\termdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\termmgr.dll", NULL},
    {L"wtermmgr.dll", L"%systemroot%\\SysWOW64\\termmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\termsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tffsport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tftp.exe", NULL},
    {L"wtftp.exe", L"%systemroot%\\SysWOW64\\tftp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tftpd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Thawbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\themeui.dll", NULL},
    {L"wthemeui.dll", L"%systemroot%\\SysWOW64\\themeui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\timedate.cpl", NULL},
    {L"wtimedate.cpl", L"%systemroot%\\SysWOW64\\timedate.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\timeout.exe", NULL},
    {L"wtimeout.exe", L"%systemroot%\\SysWOW64\\timeout.exe", NULL},
    {L"wtimer.drv", L"%systemroot%\\SysWOW64\\timer.drv", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\TINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLPHR.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTSETP.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\tlntadmn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tlntsess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tlntsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tlntsvrp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tls236.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TMIGRATE.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\tmplprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\toside.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tracerpt.exe", NULL},
    {L"wtracerpt.exe", L"%systemroot%\\SysWOW64\\tracerpt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tracert.exe", NULL},
    {L"wtracert.exe", L"%systemroot%\\SysWOW64\\tracert.exe", NULL},
    {NULL, L"%systemroot%\\system32\\traffic.dll", NULL},
    {L"wtraffic.dll", L"%systemroot%\\SysWOW64\\traffic.dll", NULL},
    {L"bhp016.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\TRAIL.DLL", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\trialoc.dll", NULL},
    {L"wTRIEDIT.DLL", L"%commonprogramfiles(x86)%\\Microsoft Shared\\Triedit\\TRIEDIT.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\trksvr.dll", NULL},
    {L"wtrksvr.dll", L"%systemroot%\\SysWOW64\\trksvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\trkwks.dll", NULL},
    {L"wtrkwks.dll", L"%systemroot%\\SysWOW64\\trkwks.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\trnsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\AdStatus\\trustmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsappcmp.dll", NULL},
    {L"wtsappcmp.dll", L"%systemroot%\\SysWOW64\\tsappcmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsbyuv.dll", NULL},
    {L"wtsbyuv.dll", L"%systemroot%\\SysWOW64\\tsbyuv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscfgwmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tscupgrd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsd32.dll", NULL},
    {L"wtsd32.dll", L"%systemroot%\\SysWOW64\\tsd32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsddd.dll", NULL},
    {L"wtsddd.dll", L"%systemroot%\\SysWOW64\\tsddd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsdiscon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsec.dll", NULL},
    {L"wtsec.dll", L"%systemroot%\\SysWOW64\\tsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsecimp.exe", NULL},
    {L"wtsecimp.exe", L"%systemroot%\\SysWOW64\\tsecimp.exe", NULL},
    {NULL, L"%systemroot%\\help\\tshoot.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tskill.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\tsoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsprof.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tssdis.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tssdjet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsshutdn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsuserex.dll", NULL},
    {L"wtsuserex.dll", L"%systemroot%\\SysWOW64\\tsuserex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tunmp.sys", NULL},
    {NULL, L"%systemroot%\\twain.dll", NULL},
    {L"wtwain_32.dll", L"%systemroot%\\twain_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\twext.dll", NULL},
    {L"wtwext.dll", L"%systemroot%\\SysWOW64\\twext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\txflog.dll", NULL},
    {L"wtxflog.dll", L"%systemroot%\\SysWOW64\\txflog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\typeperf.exe", NULL},
    {L"wtypeperf.exe", L"%systemroot%\\SysWOW64\\typeperf.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\udfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ufat.dll", NULL},
    {L"wufat.dll", L"%systemroot%\\SysWOW64\\ufat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\uihelper.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ulib.dll", NULL},
    {L"wulib.dll", L"%systemroot%\\SysWOW64\\ulib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\umandlg.dll", NULL},
    {L"wumandlg.dll", L"%systemroot%\\SysWOW64\\umandlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\umdmxfrm.dll", NULL},
    {L"wumdmxfrm.dll", L"%systemroot%\\SysWOW64\\umdmxfrm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\unicdime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\unicode.nls", NULL},
    {L"wunicode.nls", L"%systemroot%\\SysWOW64\\unicode.nls", NULL},
    {NULL, L"%systemroot%\\system32\\uniime.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\unimdm.tsp", NULL},
    {L"wunimdm.tsp", L"%systemroot%\\SysWOW64\\unimdm.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\unimdmat.dll", NULL},
    {L"wunimdmat.dll", L"%systemroot%\\SysWOW64\\unimdmat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\uniplat.dll", NULL},
    {L"wuniplat.dll", L"%systemroot%\\SysWOW64\\uniplat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\unlodctr.exe", NULL},
    {L"wunlodctr.exe", L"%systemroot%\\SysWOW64\\unlodctr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\unsecapp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\untfs.dll", NULL},
    {L"wuntfs.dll", L"%systemroot%\\SysWOW64\\untfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\updprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\upg351db.exe", NULL},
    {L"wupg351db.exe", L"%systemroot%\\SysWOW64\\upg351db.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\UploadLB\\Binaries\\UploadM.exe", NULL},
    {L"bhp045.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\upnpparser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ups.exe", NULL},
    {L"wups.exe", L"%systemroot%\\SysWOW64\\ups.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ureg.dll", NULL},
    {L"wureg.dll", L"%systemroot%\\SysWOW64\\ureg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\urlauth.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\usb8023.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\USBAUDIO.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbcamd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbcamd2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbccgp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbehci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbhub.sys", NULL},
    {NULL, L"%systemroot%\\system32\\usbmon.dll", NULL},
    {L"wusbmon.dll", L"%systemroot%\\SysWOW64\\usbmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbohci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbprint.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbser.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbstor.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbuhci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\usbui.dll", NULL},
    {L"wusbui.dll", L"%systemroot%\\SysWOW64\\usbui.dll", NULL},
    {L"wuser.exe", L"%systemroot%\\SysWOW64\\user.exe", NULL},
    {NULL, L"%systemroot%\\system32\\user32.dll", NULL},
    {L"wuser32.dll", L"%systemroot%\\SysWOW64\\user32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\userenv.dll", NULL},
    {L"wuserenv.dll", L"%systemroot%\\SysWOW64\\userenv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\userinit.exe", NULL},
    {L"wuserinit.exe", L"%systemroot%\\SysWOW64\\userinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\usp10.dll", NULL},
    {L"wusp10.dll", L"%systemroot%\\SysWOW64\\usp10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\utildll.dll", NULL},
    {L"wutildll.dll", L"%systemroot%\\SysWOW64\\utildll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\utilman.exe", NULL},
    {L"wutilman.exe", L"%systemroot%\\SysWOW64\\utilman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\uxtheme.dll", NULL},
    {L"wuxtheme.dll", L"%systemroot%\\SysWOW64\\uxtheme.dll", NULL},
    {L"wvbajet32.dll", L"%systemroot%\\SysWOW64\\vbajet32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vbisurf.ax", NULL},
    {L"wvbisurf.ax", L"%systemroot%\\SysWOW64\\vbisurf.ax", NULL},
    {L"wvdmdbg.dll", L"%systemroot%\\SysWOW64\\vdmdbg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vdmindvd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\vds.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vds_ps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsbas.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsdyndr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsldr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vdsutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\vdswmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\verifier.dll", NULL},
    {L"wverifier.dll", L"%systemroot%\\SysWOW64\\verifier.dll", NULL},
    {NULL, L"%systemroot%\\system32\\verifier.exe", NULL},
    {L"wverifier.exe", L"%systemroot%\\SysWOW64\\verifier.exe", NULL},
    {NULL, L"%systemroot%\\system32\\version.dll", NULL},
    {L"wversion.dll", L"%systemroot%\\SysWOW64\\version.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vga.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vga.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vgapnp.sys", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\VGX\\vgx.dll", NULL},
    {L"wvgx.dll", L"%commonprogramfiles(x86)%\\Microsoft Shared\\VGX\\vgx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\viaide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\videoprt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\viewprov.dll", NULL},
    {L"bhp017.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\VINES.DLL", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\voicepad.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\voicesub.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\volsnap.sys", NULL},
    {NULL, L"%systemroot%\\system32\\vss_ddu.dll", NULL},
    {L"wvss_ddu.dll", L"%systemroot%\\SysWOW64\\vss_ddu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vss_ps.dll", NULL},
    {L"wvss_ps.dll", L"%systemroot%\\SysWOW64\\vss_ps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vssapi.dll", NULL},
    {L"wvssapi.dll", L"%systemroot%\\SysWOW64\\vssapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssddups.dll", NULL},
    {L"wvssddups.dll", L"%systemroot%\\SysWOW64\\vssddups.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\vsswmi.dll", NULL},
    {L"wvwipxspx.dll", L"%systemroot%\\SysWOW64\\vwipxspx.dll", NULL},
    {L"wvwipxspx.exe", L"%systemroot%\\SysWOW64\\vwipxspx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\w32time.dll", NULL},
    {L"ww32time.dll", L"%systemroot%\\SysWOW64\\w32time.dll", NULL},
    {NULL, L"%systemroot%\\system32\\w32tm.exe", NULL},
    {L"ww32tm.exe", L"%systemroot%\\SysWOW64\\w32tm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\w32topl.dll", NULL},
    {L"ww32topl.dll", L"%systemroot%\\SysWOW64\\w32topl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3cache.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3comlog.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3core.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3ctrlps.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3ctrs.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3dt.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3ext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3isapi.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\w3ssl.dll", NULL},
    {L"ww3ssl.dll", L"%systemroot%\\SysWOW64\\w3ssl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3tp.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\w3wp.exe", L"iis.inf"},
    {L"ww95upgnt.dll", L"%systemroot%\\SysWOW64\\w95upgnt.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wab.exe", NULL},
    {NULL, L"%commonprogramfiles%\\System\\wab32.dll", NULL},
    {L"wwab32.dll", L"%commonprogramfiles(x86)%\\System\\wab32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\wab32res.dll", NULL},
    {L"wwab32res.dll", L"%commonprogramfiles(x86)%\\System\\wab32res.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabfind.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabimp.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabmig.exe", NULL},
    {NULL, L"%systemroot%\\system32\\waitfor.exe", NULL},
    {L"wwaitfor.exe", L"%systemroot%\\SysWOW64\\waitfor.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\wam.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\wamd64cpuex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\wamps.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\wamreg.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\wanarp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\watchdog.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wavemsp.dll", NULL},
    {L"wwavemsp.dll", L"%systemroot%\\SysWOW64\\wavemsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcntl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcomn.dll", NULL},
    {L"wwbemcomn.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemcomn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemdisp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemdisp.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemess.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemperf.dll", NULL},
    {L"wwbemperf.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemprox.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemtest.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemupgd.dll", NULL},
    {L"wwbemupgd.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemupgd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wdigest.dll", NULL},
    {L"wwwdigest.dll", L"%systemroot%\\SysWOW64\\wdigest.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wdmaud.drv", NULL},
    {L"wwdmaud.drv", L"%systemroot%\\SysWOW64\\wdmaud.drv", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wdmaud.sys", NULL},
    {NULL, L"%systemroot%\\system32\\webcheck.dll", NULL},
    {L"wwebcheck.dll", L"%systemroot%\\SysWOW64\\webcheck.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webclnt.dll", NULL},
    {L"wwebclnt.dll", L"%systemroot%\\SysWOW64\\webclnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webhits.dll", NULL},
    {L"wwebhits.dll", L"%systemroot%\\SysWOW64\\webhits.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webvw.dll", NULL},
    {L"wwebvw.dll", L"%systemroot%\\SysWOW64\\webvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wextract.exe", NULL},
    {L"wwextract.exe", L"%systemroot%\\SysWOW64\\wextract.exe", NULL},
    {NULL, L"%systemroot%\\system32\\where.exe", NULL},
    {L"wwhere.exe", L"%systemroot%\\SysWOW64\\where.exe", NULL},
    {NULL, L"%systemroot%\\system32\\whoami.exe", NULL},
    {L"wwhoami.exe", L"%systemroot%\\SysWOW64\\whoami.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wiaacmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wiadefui.dll", NULL},
    {L"wwiadefui.dll", L"%systemroot%\\SysWOW64\\wiadefui.dll", NULL},
    {L"wwiadss.dll", L"%systemroot%\\SysWOW64\\wiadss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiafbdrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiarpc.dll", NULL},
    {L"wwiarpc.dll", L"%systemroot%\\SysWOW64\\wiarpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiascr.dll", NULL},
    {L"wwiascr.dll", L"%systemroot%\\SysWOW64\\wiascr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiaservc.dll", NULL},
    {L"wwiaservc.dll", L"%systemroot%\\SysWOW64\\wiaservc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiasf.ax", NULL},
    {L"wwiasf.ax", L"%systemroot%\\SysWOW64\\wiasf.ax", NULL},
    {NULL, L"%systemroot%\\system32\\wiashext.dll", NULL},
    {L"wwiashext.dll", L"%systemroot%\\SysWOW64\\wiashext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiavideo.dll", NULL},
    {L"wwiavideo.dll", L"%systemroot%\\SysWOW64\\wiavideo.dll", NULL},
    {L"wwifeman.dll", L"%systemroot%\\SysWOW64\\wifeman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\win32k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\win32spl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winar30.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winbrand.dll", NULL},
    {L"wwinbrand.dll", L"%systemroot%\\SysWOW64\\winbrand.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winchat.exe", NULL},
    {L"wwinfax.dll", L"%systemroot%\\SysWOW64\\winfax.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wingb.ime", L"intl.inf"},
    {L"wwinhlp32.exe", L"%systemroot%\\winhlp32.exe", NULL},
    {L"wwinhstb.exe", L"%systemroot%\\SysWOW64\\winhlp32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winipsec.dll", NULL},
    {L"wwinipsec.dll", L"%systemroot%\\SysWOW64\\winipsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\winmgmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\winmgmtr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winmm.dll", NULL},
    {L"wwinmm.dll", L"%systemroot%\\SysWOW64\\winmm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winmsd.exe", NULL},
    {L"wwinmsd.exe", L"%systemroot%\\SysWOW64\\winmsd.exe", NULL},
    {L"wwinnls.dll", L"%systemroot%\\SysWOW64\\winnls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winntbbu.dll", NULL},
    {L"wwinntbbu.dll", L"%systemroot%\\SysWOW64\\winntbbu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winpop.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winpy.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winrnr.dll", NULL},
    {L"wwinrnr.dll", L"%systemroot%\\SysWOW64\\winrnr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wins.exe", NULL},
    {L"wwins.exe", L"%systemroot%\\SysWOW64\\wins.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winscard.dll", NULL},
    {L"wwinscard.dll", L"%systemroot%\\SysWOW64\\winscard.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsctrs.dll", NULL},
    {L"wwinsctrs.dll", L"%systemroot%\\SysWOW64\\winsctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsevnt.dll", NULL},
    {L"wwinsevnt.dll", L"%systemroot%\\SysWOW64\\winsevnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsmib.dll", NULL},
    {L"wwinsmib.dll", L"%systemroot%\\SysWOW64\\winsmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsmon.dll", NULL},
    {L"wwinsmon.dll", L"%systemroot%\\SysWOW64\\winsmon.dll", NULL},
    {L"wwinsock.dll", L"%systemroot%\\SysWOW64\\winsock.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsp.ime", L"intl.inf"},
    {L"bhp021.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\WINSPL.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\winspool.drv", NULL},
    {L"wwinspool.drv", L"%systemroot%\\SysWOW64\\winspool.drv", NULL},
    {L"wwinspool.exe", L"%systemroot%\\SysWOW64\\winspool.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winsrpc.dll", NULL},
    {L"wwinsrpc.dll", L"%systemroot%\\SysWOW64\\winsrpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winssnap.dll", NULL},
    {L"wwinssnap.dll", L"%systemroot%\\SysWOW64\\winssnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsta.dll", NULL},
    {L"wwinsta.dll", L"%systemroot%\\SysWOW64\\winsta.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winver.exe", NULL},
    {L"wwinver.exe", L"%systemroot%\\SysWOW64\\winver.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winzm.ime", L"intl.inf"},
    {L"wwisc10.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\wisc10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\administration\\wizchain.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wkssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlanmon.dll", NULL},
    {L"wwlanmon.dll", L"%systemroot%\\SysWOW64\\wlanmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlbs.exe", NULL},
    {L"wwlbs.exe", L"%systemroot%\\SysWOW64\\wlbs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wlbs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wlbsctrl.dll", NULL},
    {L"wwlbsctrl.dll", L"%systemroot%\\SysWOW64\\wlbsctrl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wlbsprov.dll", NULL},
    {L"wwlbsprov.dll", L"%systemroot%\\SysWOW64\\wbem\\wlbsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wldap32.dll", NULL},
    {L"wwldap32.dll", L"%systemroot%\\SysWOW64\\wldap32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlnotify.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlsnp.dll", NULL},
    {L"wwlsnp.dll", L"%systemroot%\\SysWOW64\\wlsnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlstore.dll", NULL},
    {L"wwlstore.dll", L"%systemroot%\\SysWOW64\\wlstore.dll", NULL},
    {L"wwmadmod.dll", L"%systemroot%\\SysWOW64\\wmadmod.dll", NULL},
    {L"wwmadmoe.dll", L"%systemroot%\\SysWOW64\\wmadmoe.dll", NULL},
    {L"wwmasf.dll", L"%systemroot%\\SysWOW64\\wmasf.dll", NULL},
    {L"wwmdmlog.dll", L"%systemroot%\\SysWOW64\\wmdmlog.dll", NULL},
    {L"wwmdmps.dll", L"%systemroot%\\SysWOW64\\wmdmps.dll", NULL},
    {L"wwmerrenu.dll", L"%systemroot%\\SysWOW64\\wmerrenu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmi.dll", NULL},
    {L"wwmi.dll", L"%systemroot%\\SysWOW64\\wmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\xml\\wmi2xml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiadap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiapres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiaprpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiapsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMIBridge.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\wmic.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmicookr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmidcprv.dll", NULL},
    {L"wwmidx.ocx", L"%systemroot%\\SysWOW64\\wmidx.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wmilib.sys", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMIListener.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\wmimsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipcima.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipdfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipdskq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipicmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipiprt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipjobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmiprop.dll", NULL},
    {L"wwmiprop.dll", L"%systemroot%\\SysWOW64\\wmiprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprvsd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprvse.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipsess.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmiscmgr.dll", NULL},
    {L"wwmiscmgr.dll", L"%systemroot%\\SysWOW64\\wmiscmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmisvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmitimep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiutils.dll", NULL},
    {L"wwmnetmgr.dll", L"%systemroot%\\SysWOW64\\wmnetmgr.dll", NULL},
    {L"wwmp.ocx", L"%systemroot%\\SysWOW64\\wmp.ocx", NULL},
    {L"wwmpcd.dll", L"%systemroot%\\SysWOW64\\wmpcd.dll", NULL},
    {L"wwmpcore.dll", L"%systemroot%\\SysWOW64\\wmpcore.dll", NULL},
    {L"wwmploc.dll", L"%systemroot%\\SysWOW64\\wmploc.dll", NULL},
    {L"wwmpshell.dll", L"%systemroot%\\SysWOW64\\wmpshell.dll", NULL},
    {L"wwmpstub.exe", L"%systemroot%\\SysWOW64\\wmpstub.exe", NULL},
    {L"wwmpui.dll", L"%systemroot%\\SysWOW64\\wmpui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSACLCheckPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\wmsactscrpt.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSAdmin.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSAdminRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSAnonAuthenPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSArchiveSinkV1PropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\web\\WMSASPADMIN.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSBROWSE.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSBrowseRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSDigestAuthenPropPage.dll", L"wmsocm.inf"},
    {L"wwmsdmod.dll", L"%systemroot%\\SysWOW64\\wmsdmod.dll", NULL},
    {L"wwmsdmoe.dll", L"%systemroot%\\SysWOW64\\wmsdmoe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\wmseditor.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wmserr.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wmserror.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMServer.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSHTTPAuthenPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSHTTPControlPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSHttpSysCfg.exe", L"wmsocm.inf"},
    {NULL, L"%systemdrive%\\WMPub\\WMIISLog\\wmsiislog.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSIPAccessPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSIpHlp.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSLF.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSLogPropPages.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSMONITOR.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSMonitorRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSMulticastSinkPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSNetworkDataSourcePropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\wmsperf.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\wmsperfmon.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSPLAYLIST.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSPlaylistRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSPluginRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSScriptPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServer.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerConfig.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerResource.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerResourceRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerTypeLib.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSServerUpgrade.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\wmssnmp.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\WMSSrvMk.dll", L"wmsocm.inf"},
    {L"wwmstream.dll", L"%systemroot%\\SysWOW64\\wmstream.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSUnicastSinkPropPage.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSWizard.exe", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSWizardRES.dll", L"wmsocm.inf"},
    {NULL, L"%systemroot%\\system32\\Windows Media\\Server\\Admin\\mmc\\WMSWMIPropPage.dll", L"wmsocm.inf"},
    {L"wwmv8dmod.dll", L"%systemroot%\\SysWOW64\\wmv8dmod.dll", NULL},
    {L"wwmv8ds32.ax", L"%systemroot%\\SysWOW64\\wmv8ds32.ax", NULL},
    {L"wwmvcore.dll", L"%systemroot%\\SysWOW64\\wmvcore.dll", NULL},
    {L"wwmvdmod.dll", L"%systemroot%\\SysWOW64\\wmvdmod.dll", NULL},
    {L"wwmvdmoe.dll", L"%systemroot%\\SysWOW64\\wmvdmoe.dll", NULL},
    {L"wwmvds32.ax", L"%systemroot%\\SysWOW64\\wmvds32.ax", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\Accessories\\wordpad.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wow64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wow64cpu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wow64win.dll", NULL},
    {L"wwowexec.exe", L"%systemroot%\\SysWOW64\\wowexec.exe", NULL},
    {L"wwowfax.dll", L"%systemroot%\\SysWOW64\\wowfax.dll", NULL},
    {L"wwowfaxui.dll", L"%systemroot%\\SysWOW64\\wowfaxui.dll", NULL},
    {L"wwowreg32.exe", L"%systemroot%\\SysWOW64\\wowreg32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wpnpinst.exe", NULL},
    {L"wwpnpinst.exe", L"%systemroot%\\SysWOW64\\wpnpinst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\write.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ws2_32.dll", NULL},
    {L"wws2_32.dll", L"%systemroot%\\SysWOW64\\ws2_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ws2help.dll", NULL},
    {L"wws2help.dll", L"%systemroot%\\SysWOW64\\ws2help.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ws2ifsl.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wscript.exe", NULL},
    {L"wwscript.exe", L"%systemroot%\\SysWOW64\\wscript.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wsecedit.dll", NULL},
    {L"wwsecedit.dll", L"%systemroot%\\SysWOW64\\wsecedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshatm.dll", NULL},
    {L"wwshatm.dll", L"%systemroot%\\SysWOW64\\wshatm.dll", NULL},
    {NULL, L"%systemroot%\\Cluster\\WSHClus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshcon.dll", NULL},
    {L"wwshcon.dll", L"%systemroot%\\SysWOW64\\wshcon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshext.dll", NULL},
    {L"wwshext.dll", L"%systemroot%\\SysWOW64\\wshext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wship6.dll", NULL},
    {L"wwship6.dll", L"%systemroot%\\SysWOW64\\wship6.dll", NULL},
    {L"wwshisn.dll", L"%systemroot%\\SysWOW64\\wshisn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshnetbs.dll", NULL},
    {L"wwshnetbs.dll", L"%systemroot%\\SysWOW64\\wshnetbs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshom.ocx", NULL},
    {L"wwshom.ocx", L"%systemroot%\\SysWOW64\\wshom.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\wshqos.dll", NULL},
    {L"wwshqos.dll", L"%systemroot%\\SysWOW64\\wshqos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\WshRm.dll", NULL},
    {L"wWshRm.dll", L"%systemroot%\\SysWOW64\\WshRm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshtcpip.dll", NULL},
    {L"wwshtcpip.dll", L"%systemroot%\\SysWOW64\\wshtcpip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wsnmp32.dll", NULL},
    {L"wwsnmp32.dll", L"%systemroot%\\SysWOW64\\wsnmp32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wsock32.dll", NULL},
    {L"wwsock32.dll", L"%systemroot%\\SysWOW64\\wsock32.dll", NULL},
    {L"wwstdecod.dll", L"%systemroot%\\SysWOW64\\wstdecod.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wtsapi32.dll", NULL},
    {L"wwtsapi32.dll", L"%systemroot%\\SysWOW64\\wtsapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wuauclt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wuaueng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wuauserv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wupdmgr.exe", NULL},
    {L"wwupdmgr.exe", L"%systemroot%\\SysWOW64\\wupdmgr.exe", NULL},
    {L"wwzcdlg.dll", L"%systemroot%\\SysWOW64\\wzcdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcdlg.dll", NULL},
    {L"wwzcsapi.dll", L"%systemroot%\\SysWOW64\\wzcsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcsvc.dll", NULL},
    {L"wxactsrv.dll", L"%systemroot%\\SysWOW64\\xactsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xactsrv.dll", NULL},
    {L"wxcopy.exe", L"%systemroot%\\SysWOW64\\xcopy.exe", NULL},
    {NULL, L"%systemroot%\\system32\\xcopy.exe", NULL},
    {L"wxenroll.dll", L"%systemroot%\\SysWOW64\\xenroll.dll", NULL},
    {L"xenria64.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\ia64\\xenroll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xenroll.dll", NULL},
    {L"xenrx86.dll", L"%systemroot%\\system32\\CertSrv\\CertControl\\x86\\xenroll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xjis.nls", NULL},
    {L"bhp018.dll", L"%systemroot%\\system32\\NETMON\\PARSERS\\XNS.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\xolehlp.dll", NULL},
    {L"wzipfldr.dll", L"%systemroot%\\SysWOW64\\zipfldr.dll", NULL},
};

#define CountEntFiles (sizeof(EntFiles)/sizeof(EntFiles[0]))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\postbuildscripts\sfp\amd64_per.h ===
PROTECT_FILE_ENTRY PerFiles[] =
{
    {L"wAcGenral.dll", L"%systemroot%\\AppPatch\\AcGenral.dll", NULL},
    {L"wAcLayers.dll", L"%systemroot%\\AppPatch\\AcLayers.dll", NULL},
    {L"wAcSpecfc.dll", L"%systemroot%\\AppPatch\\AcSpecfc.dll", NULL},
    {L"wAcXtrnal.dll", L"%systemroot%\\AppPatch\\AcXtrnal.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\isapi\\_vti_adm\\admin.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\_vti_adm\\admin.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\ahui.exe", NULL},
    {L"wahui.exe", L"%systemroot%\\SysWOW64\\ahui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\apphelp.dll", NULL},
    {L"wapphelp.dll", L"%systemroot%\\SysWOW64\\apphelp.dll", NULL},
    {L"wapphelp.sdb", L"%systemroot%\\AppPatch\\apphelp.sdb", NULL},
    {NULL, L"%systemroot%\\help\\apps.chm", NULL},
    {NULL, L"%systemroot%\\system32\\asycfilt.dll", NULL},
    {L"wasycfilt.dll", L"%systemroot%\\SysWOW64\\asycfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atmlib.dll", NULL},
    {L"watmlib.dll", L"%systemroot%\\SysWOW64\\atmlib.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\isapi\\_vti_aut\\author.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\_vti_aut\\author.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\cfgmgr32.dll", NULL},
    {L"wcfgmgr32.dll", L"%systemroot%\\SysWOW64\\cfgmgr32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\cfgwiz.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\comctl32.dll", NULL},
    {L"wcomctl32.dll", L"%systemroot%\\SysWOW64\\comctl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comdlg32.dll", NULL},
    {L"wcomdlg32.dll", L"%systemroot%\\SysWOW64\\comdlg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compatUI.dll", NULL},
    {L"wcompatUI.dll", L"%systemroot%\\SysWOW64\\compatUI.dll", NULL},
    {NULL, L"%systemroot%\\system32\\crypt32.dll", NULL},
    {L"wcrypt32.dll", L"%systemroot%\\SysWOW64\\crypt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdlg.dll", NULL},
    {L"wcryptdlg.dll", L"%systemroot%\\SysWOW64\\cryptdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdll.dll", NULL},
    {L"wcryptdll.dll", L"%systemroot%\\SysWOW64\\cryptdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptext.dll", NULL},
    {L"wcryptext.dll", L"%systemroot%\\SysWOW64\\cryptext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptnet.dll", NULL},
    {L"wcryptnet.dll", L"%systemroot%\\SysWOW64\\cryptnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptsvc.dll", NULL},
    {L"wcryptsvc.dll", L"%systemroot%\\SysWOW64\\cryptsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptui.dll", NULL},
    {L"wcryptui.dll", L"%systemroot%\\SysWOW64\\cryptui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dispex.dll", NULL},
    {L"wdispex.dll", L"%systemroot%\\SysWOW64\\dispex.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\dosapp.fon", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\drvmain.sdb", NULL},
    {L"wdrvmain.sdb", L"%systemroot%\\AppPatch\\drvmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\dssenh.dll", NULL},
    {L"wdssenh.dll", L"%systemroot%\\SysWOW64\\dssenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fastfat.sys", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\servsupp\\fp4amsft.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4areg.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4atxt.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bots\\vinavbar\\fp4avnb.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4avss.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4awel.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\fpcount.exe", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fpexedll.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fpmmc.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\1033\\fpmmcsat.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fpremadm.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\fonts\\framd.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\framdit.ttf", NULL},
    {NULL, L"%systemroot%\\system32\\imeshare.dll", NULL},
    {L"wimeshare.dll", L"%systemroot%\\SysWOW64\\imeshare.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipsec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\itircl.dll", NULL},
    {L"witircl.dll", L"%systemroot%\\SysWOW64\\itircl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\itss.dll", NULL},
    {L"witss.dll", L"%systemroot%\\SysWOW64\\itss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jscript.dll", NULL},
    {L"wjscript.dll", L"%systemroot%\\SysWOW64\\jscript.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jsproxy.dll", NULL},
    {L"wjsproxy.dll", L"%systemroot%\\SysWOW64\\jsproxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kernel32.dll", NULL},
    {L"wkernel32.dll", L"%systemroot%\\SysWOW64\\kernel32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lsasrv.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\marlett.ttf", NULL},
    {L"wmfc40.dll", L"%systemroot%\\SysWOW64\\mfc40.dll", NULL},
    {L"wmfc40u.dll", L"%systemroot%\\SysWOW64\\mfc40u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42.dll", NULL},
    {L"wmfc42.dll", L"%systemroot%\\SysWOW64\\mfc42.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42u.dll", NULL},
    {L"wmfc42u.dll", L"%systemroot%\\SysWOW64\\mfc42u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfcsubs.dll", NULL},
    {L"wmfcsubs.dll", L"%systemroot%\\SysWOW64\\mfcsubs.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\micross.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\modern.fon", NULL},
    {L"wmsimain.sdb", L"%systemroot%\\AppPatch\\msimain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\mssip32.dll", NULL},
    {L"wmssip32.dll", L"%systemroot%\\SysWOW64\\mssip32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcrt.dll", NULL},
    {L"wmsvcrt.dll", L"%systemroot%\\SysWOW64\\msvcrt.dll", NULL},
    {L"wmsvcrt40.dll", L"%systemroot%\\SysWOW64\\msvcrt40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndiswan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\netapi32.dll", NULL},
    {L"wnetapi32.dll", L"%systemroot%\\SysWOW64\\netapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntdll.dll", NULL},
    {L"wntdll.dll", L"%systemroot%\\SysWOW64\\ntdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ntfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ntoskrnl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ocmanage.dll", NULL},
    {L"wocmanage.dll", L"%systemroot%\\SysWOW64\\ocmanage.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbccp32.dll", NULL},
    {L"wodbccp32.dll", L"%systemroot%\\SysWOW64\\odbccp32.dll", NULL},
    {L"wodtext32.dll", L"%systemroot%\\SysWOW64\\odtext32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ole32.dll", NULL},
    {L"wole32.dll", L"%systemroot%\\SysWOW64\\ole32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleaut32.dll", NULL},
    {L"woleaut32.dll", L"%systemroot%\\SysWOW64\\oleaut32.dll", NULL},
    {L"wolepro32.dll", L"%systemroot%\\SysWOW64\\olepro32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\riched20.dll", NULL},
    {L"wriched20.dll", L"%systemroot%\\SysWOW64\\riched20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\riched32.dll", NULL},
    {L"wriched32.dll", L"%systemroot%\\SysWOW64\\riched32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsaenh.dll", NULL},
    {L"wrsaenh.dll", L"%systemroot%\\SysWOW64\\rsaenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\samlib.dll", NULL},
    {L"wsamlib.dll", L"%systemroot%\\SysWOW64\\samlib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\samsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schannel.dll", NULL},
    {L"wschannel.dll", L"%systemroot%\\SysWOW64\\schannel.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\script.fon", NULL},
    {NULL, L"%systemroot%\\system32\\scrobj.dll", NULL},
    {L"wscrobj.dll", L"%systemroot%\\SysWOW64\\scrobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scrrun.dll", NULL},
    {L"wscrrun.dll", L"%systemroot%\\SysWOW64\\scrrun.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sdbinst.exe", NULL},
    {L"wsdbinst.exe", L"%systemroot%\\SysWOW64\\sdbinst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\setupapi.dll", NULL},
    {L"wsetupapi.dll", L"%systemroot%\\SysWOW64\\setupapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc.dll", NULL},
    {L"wsfc.dll", L"%systemroot%\\SysWOW64\\sfc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc.exe", NULL},
    {L"wsfc.exe", L"%systemroot%\\SysWOW64\\sfc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sfcfiles.dll", NULL},
    {L"wsfcfiles.dll", L"%systemroot%\\SysWOW64\\sfcfiles.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shimeng.dll", NULL},
    {L"wshimeng.dll", L"%systemroot%\\SysWOW64\\shimeng.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\isapi\\shtml.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\shtml.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\slayerxp.dll", NULL},
    {L"wslayerxp.dll", L"%systemroot%\\SysWOW64\\slayerxp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpadm.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpsnap.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\stdole2.tlb", NULL},
    {L"wstdole2.tlb", L"%systemroot%\\SysWOW64\\stdole2.tlb", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\sysmain.sdb", NULL},
    {L"wsysmain.sdb", L"%systemroot%\\AppPatch\\sysmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\sysocmgr.exe", NULL},
    {L"wsysocmgr.exe", L"%systemroot%\\SysWOW64\\sysocmgr.exe", NULL},
    {NULL, L"%systemroot%\\fonts\\tahoma.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\tahomabd.ttf", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\tcptest.exe", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\1033\\tcptsat.dll", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\twunk_16.exe", NULL},
    {NULL, L"%systemroot%\\twunk_32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\umpnpmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\url.dll", NULL},
    {L"wurl.dll", L"%systemroot%\\SysWOW64\\url.dll", NULL},
    {NULL, L"%systemroot%\\system32\\urlmon.dll", NULL},
    {L"wurlmon.dll", L"%systemroot%\\SysWOW64\\urlmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vbscript.dll", NULL},
    {L"wvbscript.dll", L"%systemroot%\\SysWOW64\\vbscript.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\vgaoem.fon", NULL},
    {NULL, L"%systemroot%\\system32\\wininet.dll", NULL},
    {L"wwininet.dll", L"%systemroot%\\SysWOW64\\wininet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winlogon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wintrust.dll", NULL},
    {L"wwintrust.dll", L"%systemroot%\\SysWOW64\\wintrust.dll", NULL},
    {L"wasfsipc.dll", L"%systemroot%\\SysWOW64\\asfsipc.dll", NULL},
    {L"wdao360.dll", L"%commonprogramfiles(x86)%\\Microsoft Shared\\DAO\\dao360.dll", NULL},
    {L"wdrmclien.dll", L"%systemroot%\\SysWOW64\\drmclien.dll", NULL},
    {L"wdrmstor.dll", L"%systemroot%\\SysWOW64\\drmstor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ds32gt.dll", NULL},
    {L"wds32gt.dll", L"%systemroot%\\SysWOW64\\ds32gt.dll", NULL},
    {L"wdxmasf.dll", L"%systemroot%\\SysWOW64\\dxmasf.dll", NULL},
    {L"wlaprxy.dll", L"%systemroot%\\SysWOW64\\laprxy.dll", NULL},
    {L"wlogagent.exe", L"%systemroot%\\SysWOW64\\logagent.exe", NULL},
    {L"wmpg4ds32.ax", L"%systemroot%\\SysWOW64\\mpg4ds32.ax", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadce.dll", NULL},
    {L"wmsadce.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadce.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcer.dll", NULL},
    {L"wmsadcer.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcer.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcf.dll", NULL},
    {L"wmsadcf.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcf.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcfr.dll", NULL},
    {L"wmsadcfr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcfr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadco.dll", NULL},
    {L"wmsadco.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadco.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcor.dll", NULL},
    {L"wmsadcor.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcor.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadcs.dll", NULL},
    {L"wmsadcs.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadcs.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msadds.dll", NULL},
    {L"wmsadds.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msadds.dll", NULL},
    {L"wmsadds32.ax", L"%systemroot%\\SysWOW64\\msadds32.ax", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msaddsr.dll", NULL},
    {L"wmsaddsr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msaddsr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msader15.dll", NULL},
    {L"wmsader15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msader15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado15.dll", NULL},
    {L"wmsado15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msado15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado20.tlb", NULL},
    {L"wmsado20.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado20.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado21.tlb", NULL},
    {L"wmsado21.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado21.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadomd.dll", NULL},
    {L"wmsadomd.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadomd.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msador15.dll", NULL},
    {L"wmsador15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msador15.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadox.dll", NULL},
    {L"wmsadox.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadox.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msadrh15.dll", NULL},
    {L"wmsadrh15.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msadrh15.dll", NULL},
    {L"wmscpxl32.dLL", L"%systemroot%\\SysWOW64\\mscpxl32.dLL", NULL},
    {L"wmsdadc.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdadc.dll", NULL},
    {L"wmsdaenum.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaenum.dll", NULL},
    {L"wmsdaer.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaer.dll", NULL},
    {L"wmsdaora.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaora.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdaosp.dll", NULL},
    {L"wmsdaosp.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaosp.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaprsr.dll", NULL},
    {L"wmsdaprsr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaprsr.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaprst.dll", NULL},
    {L"wmsdaprst.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaprst.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdaps.dll", NULL},
    {L"wmsdaps.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaps.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdarem.dll", NULL},
    {L"wmsdarem.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdarem.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdaremr.dll", NULL},
    {L"wmsdaremr.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdaremr.dll", NULL},
    {L"wmsdasc.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasc.dll", NULL},
    {L"wmsdasql.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasql.dll", NULL},
    {L"wmsdasqlr.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdasqlr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdatsrc.tlb", NULL},
    {L"wmsdatsrc.tlb", L"%systemroot%\\SysWOW64\\msdatsrc.tlb", NULL},
    {L"wmsdatt.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdatt.dll", NULL},
    {L"wmsdaurl.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaurl.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\msadc\\msdfmap.dll", NULL},
    {L"wmsdfmap.dll", L"%commonprogramfiles(x86)%\\System\\msadc\\msdfmap.dll", NULL},
    {L"wmsdxm.ocx", L"%systemroot%\\SysWOW64\\msdxm.ocx", NULL},
    {L"wmsdxmlc.dll", L"%systemroot%\\SysWOW64\\msdxmlc.dll", NULL},
    {L"wmsexch40.dll", L"%systemroot%\\SysWOW64\\msexch40.dll", NULL},
    {L"wmsexcl40.dll", L"%systemroot%\\SysWOW64\\msexcl40.dll", NULL},
    {L"wmsjet40.dll", L"%systemroot%\\SysWOW64\\msjet40.dll", NULL},
    {L"wmsjint40.dll", L"%systemroot%\\SysWOW64\\msjint40.dll", NULL},
    {L"wmsjro.dll", L"%commonprogramfiles(x86)%\\System\\ado\\msjro.dll", NULL},
    {L"wmsjter40.dll", L"%systemroot%\\SysWOW64\\msjter40.dll", NULL},
    {L"wmsjtes40.dll", L"%systemroot%\\SysWOW64\\msjtes40.dll", NULL},
    {L"wmsltus40.dll", L"%systemroot%\\SysWOW64\\msltus40.dll", NULL},
    {L"wmsorcl32.dll", L"%systemroot%\\SysWOW64\\msorcl32.dll", NULL},
    {L"wmspbde40.dll", L"%systemroot%\\SysWOW64\\mspbde40.dll", NULL},
    {L"wmsrd2x40.dll", L"%systemroot%\\SysWOW64\\msrd2x40.dll", NULL},
    {L"wmsrd3x40.dll", L"%systemroot%\\SysWOW64\\msrd3x40.dll", NULL},
    {L"wmsrepl40.dll", L"%systemroot%\\SysWOW64\\msrepl40.dll", NULL},
    {L"wmstext40.dll", L"%systemroot%\\SysWOW64\\mstext40.dll", NULL},
    {L"wmswdat10.dll", L"%systemroot%\\SysWOW64\\mswdat10.dll", NULL},
    {L"wmswstr10.dll", L"%systemroot%\\SysWOW64\\mswstr10.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msxactps.dll", NULL},
    {L"wmsxactps.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msxactps.dll", NULL},
    {L"wmsxbde40.dll", L"%systemroot%\\SysWOW64\\msxbde40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbc32.dll", NULL},
    {L"wodbc32.dll", L"%systemroot%\\SysWOW64\\odbc32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbc32gt.dll", NULL},
    {L"wodbc32gt.dll", L"%systemroot%\\SysWOW64\\odbc32gt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcad32.exe", NULL},
    {L"wodbcad32.exe", L"%systemroot%\\SysWOW64\\odbcad32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.dll", NULL},
    {L"wodbcconf.dll", L"%systemroot%\\SysWOW64\\odbcconf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.exe", NULL},
    {L"wodbcconf.exe", L"%systemroot%\\SysWOW64\\odbcconf.exe", NULL},
    {NULL, L"%systemroot%\\system32\\odbcconf.rsp", NULL},
    {L"wodbcconf.rsp", L"%systemroot%\\SysWOW64\\odbcconf.rsp", NULL},
    {NULL, L"%systemroot%\\system32\\odbccp32.cpl", NULL},
    {L"wodbccp32.cpl", L"%systemroot%\\SysWOW64\\odbccp32.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\odbccr32.dll", NULL},
    {L"wodbccr32.dll", L"%systemroot%\\SysWOW64\\odbccr32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbccu32.dll", NULL},
    {L"wodbccu32.dll", L"%systemroot%\\SysWOW64\\odbccu32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbcint.dll", NULL},
    {L"wodbcint.dll", L"%systemroot%\\SysWOW64\\odbcint.dll", NULL},
    {L"wodbcji32.dll", L"%systemroot%\\SysWOW64\\odbcji32.dll", NULL},
    {L"wodbcjt32.dll", L"%systemroot%\\SysWOW64\\odbcjt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\odbctrac.dll", NULL},
    {L"wodbctrac.dll", L"%systemroot%\\SysWOW64\\odbctrac.dll", NULL},
    {L"woddbse32.dll", L"%systemroot%\\SysWOW64\\oddbse32.dll", NULL},
    {L"wodexl32.dll", L"%systemroot%\\SysWOW64\\odexl32.dll", NULL},
    {L"wodfox32.dll", L"%systemroot%\\SysWOW64\\odfox32.dll", NULL},
    {L"wodpdx32.dll", L"%systemroot%\\SysWOW64\\odpdx32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\oledb32.dll", NULL},
    {L"woledb32.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\oledb32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\oledb32r.dll", NULL},
    {L"woledb32r.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\oledb32r.dll", NULL},
    {L"wstrmdll.dll", L"%systemroot%\\SysWOW64\\strmdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\1394bus.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\4mmdat.sys", NULL},
    {NULL, L"%systemroot%\\system32\\6to4svc.dll", NULL},
    {L"w6to4svc.dll", L"%systemroot%\\SysWOW64\\6to4svc.dll", NULL},
    {L"w_isdel.exe", L"%systemroot%\\SysWOW64\\InstallShield\\_isdel.exe", NULL},
    {L"w_setup.dll", L"%systemroot%\\SysWOW64\\InstallShield\\_setup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\aaaamon.dll", NULL},
    {L"waaaamon.dll", L"%systemroot%\\SysWOW64\\aaaamon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\access.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\acctres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\accwiz.exe", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\AcGen64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\acledit.dll", NULL},
    {L"wacledit.dll", L"%systemroot%\\SysWOW64\\acledit.dll", NULL},
    {L"wAcLua.dll", L"%systemroot%\\AppPatch\\AcLua.dll", NULL},
    {NULL, L"%systemroot%\\system32\\aclui.dll", NULL},
    {L"waclui.dll", L"%systemroot%\\SysWOW64\\aclui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\acpi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\acpiec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\activeds.dll", NULL},
    {L"wactiveds.dll", L"%systemroot%\\SysWOW64\\activeds.dll", NULL},
    {NULL, L"%systemroot%\\system32\\activeds.tlb", NULL},
    {L"wactiveds.tlb", L"%systemroot%\\SysWOW64\\activeds.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\actmovie.exe", NULL},
    {L"wactmovie.exe", L"%systemroot%\\SysWOW64\\actmovie.exe", NULL},
    {NULL, L"%systemroot%\\system32\\actxprxy.dll", NULL},
    {L"wactxprxy.dll", L"%systemroot%\\SysWOW64\\actxprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adicvls.sys", NULL},
    {NULL, L"%systemroot%\\system32\\admparse.dll", NULL},
    {L"wadmparse.dll", L"%systemroot%\\SysWOW64\\admparse.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adptif.dll", NULL},
    {L"wadptif.dll", L"%systemroot%\\SysWOW64\\adptif.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adpu160m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\adpu320.sys", NULL},
    {NULL, L"%systemroot%\\system32\\adsiisex.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\adsldp.dll", NULL},
    {L"wadsldp.dll", L"%systemroot%\\SysWOW64\\adsldp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsldpc.dll", NULL},
    {L"wadsldpc.dll", L"%systemroot%\\SysWOW64\\adsldpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsmsext.dll", NULL},
    {L"wadsmsext.dll", L"%systemroot%\\SysWOW64\\adsmsext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\adsnt.dll", NULL},
    {L"wadsnt.dll", L"%systemroot%\\SysWOW64\\adsnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\advapi32.dll", NULL},
    {L"wadvapi32.dll", L"%systemroot%\\SysWOW64\\advapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\advpack.dll", NULL},
    {L"wadvpack.dll", L"%systemroot%\\SysWOW64\\advpack.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\afd.sys", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentanm.dll", NULL},
    {L"wagentanm.dll", L"%systemroot%\\msagent\\agentanm.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentctl.dll", NULL},
    {L"wagentctl.dll", L"%systemroot%\\msagent\\agentctl.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentdp2.dll", NULL},
    {L"wagentdp2.dll", L"%systemroot%\\msagent\\agentdp2.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentdpv.dll", NULL},
    {L"wagentdpv.dll", L"%systemroot%\\msagent\\agentdpv.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentmpx.dll", NULL},
    {L"wagentmpx.dll", L"%systemroot%\\msagent\\agentmpx.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentpsh.dll", NULL},
    {L"wagentpsh.dll", L"%systemroot%\\msagent\\agentpsh.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentsr.dll", NULL},
    {L"wagentsr.dll", L"%systemroot%\\msagent\\agentsr.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agentsvr.exe", NULL},
    {L"wagentsvr.exe", L"%systemroot%\\msagent\\agentsvr.exe", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0401.dll", L"intl.inf"},
    {L"wagt0401.dll", L"%systemroot%\\msagent\\intl\\agt0401.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0404.dll", L"intl.inf"},
    {L"wagt0404.dll", L"%systemroot%\\msagent\\intl\\agt0404.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0405.dll", NULL},
    {L"wagt0405.dll", L"%systemroot%\\msagent\\intl\\agt0405.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0406.dll", NULL},
    {L"wagt0406.dll", L"%systemroot%\\msagent\\intl\\agt0406.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0407.dll", NULL},
    {L"wagt0407.dll", L"%systemroot%\\msagent\\intl\\agt0407.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0408.dll", NULL},
    {L"wagt0408.dll", L"%systemroot%\\msagent\\intl\\agt0408.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\intl\\agt0409.dll", NULL},
    {L"wagt0409.dll", L"%systemroot%\\msagent\\intl\\agt0409.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040b.dll", NULL},
    {L"wagt040b.dll", L"%systemroot%\\msagent\\intl\\agt040b.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040c.dll", NULL},
    {L"wagt040c.dll", L"%systemroot%\\msagent\\intl\\agt040c.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040d.dll", L"intl.inf"},
    {L"wagt040d.dll", L"%systemroot%\\msagent\\intl\\agt040d.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt040e.dll", NULL},
    {L"wagt040e.dll", L"%systemroot%\\msagent\\intl\\agt040e.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0410.dll", NULL},
    {L"wagt0410.dll", L"%systemroot%\\msagent\\intl\\agt0410.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0411.dll", L"intl.inf"},
    {L"wagt0411.dll", L"%systemroot%\\msagent\\intl\\agt0411.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0412.dll", L"intl.inf"},
    {L"wagt0412.dll", L"%systemroot%\\msagent\\intl\\agt0412.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0413.dll", NULL},
    {L"wagt0413.dll", L"%systemroot%\\msagent\\intl\\agt0413.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0414.dll", NULL},
    {L"wagt0414.dll", L"%systemroot%\\msagent\\intl\\agt0414.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0415.dll", NULL},
    {L"wagt0415.dll", L"%systemroot%\\msagent\\intl\\agt0415.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0416.dll", NULL},
    {L"wagt0416.dll", L"%systemroot%\\msagent\\intl\\agt0416.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0419.dll", NULL},
    {L"wagt0419.dll", L"%systemroot%\\msagent\\intl\\agt0419.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt041d.dll", NULL},
    {L"wagt041d.dll", L"%systemroot%\\msagent\\intl\\agt041d.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt041f.dll", NULL},
    {L"wagt041f.dll", L"%systemroot%\\msagent\\intl\\agt041f.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0804.dll", L"intl.inf"},
    {L"wagt0804.dll", L"%systemroot%\\msagent\\intl\\agt0804.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0816.dll", NULL},
    {L"wagt0816.dll", L"%systemroot%\\msagent\\intl\\agt0816.dll", NULL},
    {NULL, L"%systemroot%\\msagent\\intl\\agt0c0a.dll", NULL},
    {L"wagt0c0a.dll", L"%systemroot%\\msagent\\intl\\agt0c0a.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\agtctl15.tlb", NULL},
    {L"wagtctl15.tlb", L"%systemroot%\\msagent\\agtctl15.tlb", NULL},
    {NULL, L"%systemroot%\\msagent64\\agtintl.dll", NULL},
    {L"wagtintl.dll", L"%systemroot%\\msagent\\agtintl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aic78u2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aic78xx.sys", NULL},
    {L"wair300pp.dll", L"%systemroot%\\SysWOW64\\air300pp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\alg.exe", NULL},
    {L"walg.exe", L"%systemroot%\\SysWOW64\\alg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\aliide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\alrsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\amdagp8p.sys", NULL},
    {NULL, L"%systemroot%\\system32\\amstream.dll", NULL},
    {L"wamstream.dll", L"%systemroot%\\SysWOW64\\amstream.dll", NULL},
    {NULL, L"%systemroot%\\system32\\apcups.dll", NULL},
    {L"wapcups.dll", L"%systemroot%\\SysWOW64\\apcups.dll", NULL},
    {L"wappend.exe", L"%systemroot%\\SysWOW64\\append.exe", NULL},
    {NULL, L"%systemroot%\\system32\\appwiz.cpl", NULL},
    {L"wappwiz.cpl", L"%systemroot%\\SysWOW64\\appwiz.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\aqadmin.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\aqueue.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\arp.exe", NULL},
    {L"warp.exe", L"%systemroot%\\SysWOW64\\arp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\arp1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\asctrls.ocx", NULL},
    {L"wasctrls.ocx", L"%systemroot%\\SysWOW64\\asctrls.ocx", NULL},
    {L"wasferror.dll", L"%systemroot%\\SysWOW64\\asferror.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\asyncmac.sys", NULL},
    {NULL, L"%systemroot%\\system32\\at.exe", NULL},
    {L"wat.exe", L"%systemroot%\\SysWOW64\\at.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atidvag.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Atievxx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atimtag.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atkctrs.dll", NULL},
    {L"watkctrs.dll", L"%systemroot%\\SysWOW64\\atkctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atl.dll", NULL},
    {L"watl.dll", L"%systemroot%\\SysWOW64\\atl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atmadm.exe", NULL},
    {L"watmadm.exe", L"%systemroot%\\SysWOW64\\atmadm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmarpc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmepvc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmfd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmlane.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atmpvcno.dll", NULL},
    {L"watmpvcno.dll", L"%systemroot%\\SysWOW64\\atmpvcno.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\atmuni.sys", NULL},
    {NULL, L"%systemroot%\\system32\\atrace.dll", NULL},
    {NULL, L"%systemroot%\\system32\\attrib.exe", NULL},
    {L"wattrib.exe", L"%systemroot%\\SysWOW64\\attrib.exe", NULL},
    {NULL, L"%systemroot%\\system32\\audiosrv.dll", NULL},
    {L"waudiosrv.dll", L"%systemroot%\\SysWOW64\\audiosrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\audstub.sys", NULL},
    {NULL, L"%systemroot%\\system32\\authz.dll", NULL},
    {L"wauthz.dll", L"%systemroot%\\SysWOW64\\authz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\autochk.exe", NULL},
    {L"wautochk.exe", L"%systemroot%\\SysWOW64\\autochk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autoconv.exe", NULL},
    {L"wautoconv.exe", L"%systemroot%\\SysWOW64\\autoconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autodisc.dll", NULL},
    {L"wautodisc.dll", L"%systemroot%\\SysWOW64\\autodisc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\autofmt.exe", NULL},
    {L"wautofmt.exe", L"%systemroot%\\SysWOW64\\autofmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\autolfn.exe", NULL},
    {L"wautolfn.exe", L"%systemroot%\\SysWOW64\\autolfn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\avicap.dll", NULL},
    {L"wavicap.dll", L"%systemroot%\\SysWOW64\\avicap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avicap32.dll", NULL},
    {L"wavicap32.dll", L"%systemroot%\\SysWOW64\\avicap32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avifil32.dll", NULL},
    {L"wavifil32.dll", L"%systemroot%\\SysWOW64\\avifil32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\avifile.dll", NULL},
    {L"wavifile.dll", L"%systemroot%\\SysWOW64\\avifile.dll", NULL},
    {L"wavmcoxp.dll", L"%systemroot%\\SysWOW64\\avmcoxp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\azroles.dll", NULL},
    {L"wazroles.dll", L"%systemroot%\\SysWOW64\\azroles.dll", NULL},
    {NULL, L"%systemroot%\\system32\\azroleui.dll", NULL},
    {L"wazroleui.dll", L"%systemroot%\\SysWOW64\\azroleui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\b57amd64.sys", NULL},
    {NULL, L"%systemroot%\\system32\\basesrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\batmeter.dll", NULL},
    {L"wbatmeter.dll", L"%systemroot%\\SysWOW64\\batmeter.dll", NULL},
    {NULL, L"%systemroot%\\system32\\batt.dll", NULL},
    {L"wbatt.dll", L"%systemroot%\\SysWOW64\\batt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\battc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\bdaplgin.ax", NULL},
    {L"wbdaplgin.ax", L"%systemroot%\\SysWOW64\\bdaplgin.ax", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\beep.sys", NULL},
    {NULL, L"%systemroot%\\system32\\bidispl.dll", NULL},
    {L"wbidispl.dll", L"%systemroot%\\SysWOW64\\bidispl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\big5.nls", NULL},
    {NULL, L"%systemroot%\\system32\\bitsprx2.dll", NULL},
    {L"wblackbox.dll", L"%systemroot%\\SysWOW64\\blackbox.dll", NULL},
    {NULL, L"%systemroot%\\help\\bnts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bootvid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\bopomofo.nls", NULL},
    {NULL, L"%systemroot%\\system32\\browselc.dll", NULL},
    {L"wbrowselc.dll", L"%systemroot%\\SysWOW64\\browselc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\browser.dll", NULL},
    {L"wbrowser.dll", L"%systemroot%\\SysWOW64\\browser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\browseui.dll", NULL},
    {L"wbrowseui.dll", L"%systemroot%\\SysWOW64\\browseui.dll", NULL},
    {L"wbrowsewm.dll", L"%systemroot%\\SysWOW64\\browsewm.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\brpinfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\bulltlp3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\c_037.nls", NULL},
    {L"wc_037.nls", L"%systemroot%\\SysWOW64\\c_037.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10000.nls", NULL},
    {L"wc_10000.nls", L"%systemroot%\\SysWOW64\\c_10000.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10001.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10002.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10003.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10004.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10005.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10006.nls", NULL},
    {L"wc_10006.nls", L"%systemroot%\\SysWOW64\\c_10006.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10007.nls", NULL},
    {L"wc_10007.nls", L"%systemroot%\\SysWOW64\\c_10007.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10008.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10010.nls", NULL},
    {L"wc_10010.nls", L"%systemroot%\\SysWOW64\\c_10010.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10017.nls", NULL},
    {L"wc_10017.nls", L"%systemroot%\\SysWOW64\\c_10017.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10021.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10029.nls", NULL},
    {L"wc_10029.nls", L"%systemroot%\\SysWOW64\\c_10029.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10079.nls", NULL},
    {L"wc_10079.nls", L"%systemroot%\\SysWOW64\\c_10079.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10081.nls", NULL},
    {L"wc_10081.nls", L"%systemroot%\\SysWOW64\\c_10081.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_10082.nls", NULL},
    {L"wc_10082.nls", L"%systemroot%\\SysWOW64\\c_10082.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1026.nls", NULL},
    {L"wc_1026.nls", L"%systemroot%\\SysWOW64\\c_1026.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1047.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1140.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1141.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1142.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1143.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1144.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1145.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1146.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1147.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1148.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1149.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1250.nls", NULL},
    {L"wc_1250.nls", L"%systemroot%\\SysWOW64\\c_1250.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1251.nls", NULL},
    {L"wc_1251.nls", L"%systemroot%\\SysWOW64\\c_1251.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1252.nls", NULL},
    {L"wc_1252.nls", L"%systemroot%\\SysWOW64\\c_1252.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1253.nls", NULL},
    {L"wc_1253.nls", L"%systemroot%\\SysWOW64\\c_1253.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1254.nls", NULL},
    {L"wc_1254.nls", L"%systemroot%\\SysWOW64\\c_1254.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1255.nls", NULL},
    {L"wc_1255.nls", L"%systemroot%\\SysWOW64\\c_1255.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1256.nls", NULL},
    {L"wc_1256.nls", L"%systemroot%\\SysWOW64\\c_1256.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1257.nls", NULL},
    {L"wc_1257.nls", L"%systemroot%\\SysWOW64\\c_1257.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1258.nls", NULL},
    {L"wc_1258.nls", L"%systemroot%\\SysWOW64\\c_1258.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_1361.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20000.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20001.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20002.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20003.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20004.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20005.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20105.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20106.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20107.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20108.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20127.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20261.nls", NULL},
    {L"wc_20261.nls", L"%systemroot%\\SysWOW64\\c_20261.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20269.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20273.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20277.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20278.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20280.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20284.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20285.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20290.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20297.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20420.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20423.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20424.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20833.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20838.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20866.nls", NULL},
    {L"wc_20866.nls", L"%systemroot%\\SysWOW64\\c_20866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20871.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20880.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20905.nls", NULL},
    {L"wc_20905.nls", L"%systemroot%\\SysWOW64\\c_20905.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20924.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20932.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20936.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_20949.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21025.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21027.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_21866.nls", NULL},
    {L"wc_21866.nls", L"%systemroot%\\SysWOW64\\c_21866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28591.nls", NULL},
    {L"wc_28591.nls", L"%systemroot%\\SysWOW64\\c_28591.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28592.nls", NULL},
    {L"wc_28592.nls", L"%systemroot%\\SysWOW64\\c_28592.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28593.nls", NULL},
    {L"wc_28593.nls", L"%systemroot%\\SysWOW64\\c_28593.nls", NULL},
    {NULL, L"%systemroot%\\system32\\C_28594.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28595.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28596.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\C_28597.NLS", NULL},
    {NULL, L"%systemroot%\\system32\\c_28598.nls", NULL},
    {L"wc_28598.nls", L"%systemroot%\\SysWOW64\\c_28598.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28599.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28603.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_28605.nls", NULL},
    {L"wc_28605.nls", L"%systemroot%\\SysWOW64\\c_28605.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_437.nls", NULL},
    {L"wc_437.nls", L"%systemroot%\\SysWOW64\\c_437.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_500.nls", NULL},
    {L"wc_500.nls", L"%systemroot%\\SysWOW64\\c_500.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_708.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_720.nls", NULL},
    {L"wc_720.nls", L"%systemroot%\\SysWOW64\\c_720.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_737.nls", NULL},
    {L"wc_737.nls", L"%systemroot%\\SysWOW64\\c_737.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_775.nls", NULL},
    {L"wc_775.nls", L"%systemroot%\\SysWOW64\\c_775.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_850.nls", NULL},
    {L"wc_850.nls", L"%systemroot%\\SysWOW64\\c_850.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_852.nls", NULL},
    {L"wc_852.nls", L"%systemroot%\\SysWOW64\\c_852.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_855.nls", NULL},
    {L"wc_855.nls", L"%systemroot%\\SysWOW64\\c_855.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_857.nls", NULL},
    {L"wc_857.nls", L"%systemroot%\\SysWOW64\\c_857.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_858.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_860.nls", NULL},
    {L"wc_860.nls", L"%systemroot%\\SysWOW64\\c_860.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_861.nls", NULL},
    {L"wc_861.nls", L"%systemroot%\\SysWOW64\\c_861.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_862.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_863.nls", NULL},
    {L"wc_863.nls", L"%systemroot%\\SysWOW64\\c_863.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_864.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_865.nls", NULL},
    {L"wc_865.nls", L"%systemroot%\\SysWOW64\\c_865.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_866.nls", NULL},
    {L"wc_866.nls", L"%systemroot%\\SysWOW64\\c_866.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_869.nls", NULL},
    {L"wc_869.nls", L"%systemroot%\\SysWOW64\\c_869.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_870.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_874.nls", NULL},
    {L"wc_874.nls", L"%systemroot%\\SysWOW64\\c_874.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_875.nls", NULL},
    {L"wc_875.nls", L"%systemroot%\\SysWOW64\\c_875.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_932.nls", NULL},
    {L"wc_932.nls", L"%systemroot%\\SysWOW64\\c_932.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_936.nls", NULL},
    {L"wc_936.nls", L"%systemroot%\\SysWOW64\\c_936.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_949.nls", NULL},
    {L"wc_949.nls", L"%systemroot%\\SysWOW64\\c_949.nls", NULL},
    {NULL, L"%systemroot%\\system32\\c_950.nls", NULL},
    {L"wc_950.nls", L"%systemroot%\\SysWOW64\\c_950.nls", NULL},
    {L"wc_eucdb.dll", L"%systemroot%\\SysWOW64\\c_eucdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_g18030.dll", NULL},
    {L"wc_g18030.dll", L"%systemroot%\\SysWOW64\\c_g18030.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_is2022.dll", NULL},
    {L"wc_is2022.dll", L"%systemroot%\\SysWOW64\\c_is2022.dll", NULL},
    {NULL, L"%systemroot%\\system32\\c_iscii.dll", NULL},
    {L"wc_iscii.dll", L"%systemroot%\\SysWOW64\\c_iscii.dll", NULL},
    {L"wc_snadb.dll", L"%systemroot%\\SysWOW64\\c_snadb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cabinet.dll", NULL},
    {L"wcabinet.dll", L"%systemroot%\\SysWOW64\\cabinet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cabview.dll", NULL},
    {L"wcabview.dll", L"%systemroot%\\SysWOW64\\cabview.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cacls.exe", NULL},
    {L"wcacls.exe", L"%systemroot%\\SysWOW64\\cacls.exe", NULL},
    {NULL, L"%systemroot%\\system32\\calc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\camocx.dll", NULL},
    {L"wcamocx.dll", L"%systemroot%\\SysWOW64\\camocx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cards.dll", NULL},
    {L"wcards.dll", L"%systemroot%\\SysWOW64\\cards.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrvps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\catsrvut.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cbidf2k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\CCDECODE.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ccfgnt.dll", NULL},
    {L"wccfgnt.dll", L"%systemroot%\\SysWOW64\\ccfgnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cdfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cdfview.dll", NULL},
    {L"wcdfview.dll", L"%systemroot%\\SysWOW64\\cdfview.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cdosys.dll", NULL},
    {L"wcdosys.dll", L"%systemroot%\\SysWOW64\\cdosys.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cdrom.sys", NULL},
    {NULL, L"%systemroot%\\system32\\certcli.dll", NULL},
    {L"wcertcli.dll", L"%systemroot%\\SysWOW64\\certcli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\certmgr.dll", NULL},
    {L"wcertmgr.dll", L"%systemroot%\\SysWOW64\\certmgr.dll", NULL},
    {L"wcewmdm.dll", L"%systemroot%\\SysWOW64\\cewmdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cfgbkend.dll", NULL},
    {NULL, L"%systemroot%\\system32\\chajei.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\change.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\changer.sys", NULL},
    {NULL, L"%systemroot%\\system32\\charmap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chglogon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chgport.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chgusr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chkdsk.exe", NULL},
    {L"wchkdsk.exe", L"%systemroot%\\SysWOW64\\chkdsk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chkntfs.exe", NULL},
    {L"wchkntfs.exe", L"%systemroot%\\SysWOW64\\chkntfs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\chsbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\chtbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTMBX.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKDIC.DIC", L"intl.inf"},
    {L"wCHTSKDIC.DIC", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKDIC.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKDIC.DLL", L"intl.inf"},
    {L"wCHTSKDIC.DLL", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKDIC.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\CHTSKF.DLL", L"intl.inf"},
    {L"wCHTSKF.DLL", L"%systemroot%\\ime (x86)\\CHTIME\\APPLETS\\CHTSKF.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\ciadmin.dll", NULL},
    {L"wciadmin.dll", L"%systemroot%\\SysWOW64\\ciadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cic.dll", NULL},
    {L"wcic.dll", L"%systemroot%\\SysWOW64\\cic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cidaemon.exe", NULL},
    {L"wcidaemon.exe", L"%systemroot%\\SysWOW64\\cidaemon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\cimwin32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTIME.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGB.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGD.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGIE.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\CINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGSI.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGU.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTLGUC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\CINTLGNT\\CINTSETP.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\ciodm.dll", NULL},
    {L"wciodm.dll", L"%systemroot%\\SysWOW64\\ciodm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cisvc.exe", NULL},
    {L"wcisvc.exe", L"%systemroot%\\SysWOW64\\cisvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ckcnv.exe", NULL},
    {L"wckcnv.exe", L"%systemroot%\\SysWOW64\\ckcnv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\classpnp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\clb.dll", NULL},
    {L"wclb.dll", L"%systemroot%\\SysWOW64\\clb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clbcatex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\clbcatq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cleanmgr.exe", NULL},
    {L"wcleanmgr.exe", L"%systemroot%\\SysWOW64\\cleanmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clip.exe", NULL},
    {L"wclip.exe", L"%systemroot%\\SysWOW64\\clip.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clipbrd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clipsrv.exe", NULL},
    {L"wclipsrv.exe", L"%systemroot%\\SysWOW64\\clipsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\clusapi.dll", NULL},
    {L"wclusapi.dll", L"%systemroot%\\SysWOW64\\clusapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cmbp0wdm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cmcfg32.dll", NULL},
    {L"wcmcfg32.dll", L"%systemroot%\\SysWOW64\\cmcfg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmd.exe", NULL},
    {L"wcmd.exe", L"%systemroot%\\SysWOW64\\cmd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmdial32.dll", NULL},
    {L"wcmdial32.dll", L"%systemroot%\\SysWOW64\\cmdial32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cmdide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cmdkey.exe", NULL},
    {L"wcmdkey.exe", L"%systemroot%\\SysWOW64\\cmdkey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmdl32.exe", NULL},
    {L"wcmdl32.exe", L"%systemroot%\\SysWOW64\\cmdl32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmmon32.exe", NULL},
    {L"wcmmon32.exe", L"%systemroot%\\SysWOW64\\cmmon32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmpbk32.dll", NULL},
    {L"wcmpbk32.dll", L"%systemroot%\\SysWOW64\\cmpbk32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmprops.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cmstp.exe", NULL},
    {L"wcmstp.exe", L"%systemroot%\\SysWOW64\\cmstp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cmutil.dll", NULL},
    {L"wcmutil.dll", L"%systemroot%\\SysWOW64\\cmutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnbjmon.dll", NULL},
    {L"wcnbjmon.dll", L"%systemroot%\\SysWOW64\\cnbjmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnetcfg.dll", NULL},
    {L"wcnetcfg.dll", L"%systemroot%\\SysWOW64\\cnetcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cnvfat.dll", NULL},
    {L"wcnvfat.dll", L"%systemroot%\\SysWOW64\\cnvfat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\colbact.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comaddin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comadmin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comcat.dll", NULL},
    {L"wcomcat.dll", L"%systemroot%\\SysWOW64\\comcat.dll", NULL},
    {L"wcommdlg.dll", L"%systemroot%\\SysWOW64\\commdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comp.exe", NULL},
    {L"wcomp.exe", L"%systemroot%\\SysWOW64\\comp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\compact.exe", NULL},
    {L"wcompact.exe", L"%systemroot%\\SysWOW64\\compact.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\compbatt.sys", NULL},
    {L"wcompobj.dll", L"%systemroot%\\SysWOW64\\compobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compstui.dll", NULL},
    {L"wcompstui.dll", L"%systemroot%\\SysWOW64\\compstui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comrepl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comrepl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\comrereg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\comres.dll", NULL},
    {L"wcomres.dll", L"%systemroot%\\SysWOW64\\comres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\comsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comsvcs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comuid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\confmsp.dll", NULL},
    {L"wconfmsp.dll", L"%systemroot%\\SysWOW64\\confmsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\conime.exe", NULL},
    {L"wconime.exe", L"%systemroot%\\SysWOW64\\conime.exe", NULL},
    {NULL, L"%systemroot%\\system32\\console.dll", NULL},
    {L"wconsole.dll", L"%systemroot%\\SysWOW64\\console.dll", NULL},
    {NULL, L"%systemroot%\\system32\\control.exe", NULL},
    {L"wcontrol.exe", L"%systemroot%\\SysWOW64\\control.exe", NULL},
    {NULL, L"%systemroot%\\system32\\convert.exe", NULL},
    {L"wconvert.exe", L"%systemroot%\\SysWOW64\\convert.exe", NULL},
    {NULL, L"%systemroot%\\system32\\corpol.dll", NULL},
    {L"wcorpol.dll", L"%systemroot%\\SysWOW64\\corpol.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\cplexe.exe", L"intl.inf"},
    {L"wcplexe.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\cplexe.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\cprofile.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\crcdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\credui.dll", NULL},
    {L"wcredui.dll", L"%systemroot%\\SysWOW64\\credui.dll", NULL},
    {L"wcrtdll.dll", L"%systemroot%\\SysWOW64\\crtdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csamsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cscdll.dll", NULL},
    {L"wcscdll.dll", L"%systemroot%\\SysWOW64\\cscdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cscript.exe", NULL},
    {L"wcscript.exe", L"%systemroot%\\SysWOW64\\cscript.exe", NULL},
    {NULL, L"%systemroot%\\system32\\cscui.dll", NULL},
    {L"wcscui.dll", L"%systemroot%\\SysWOW64\\cscui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csrsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\csrss.exe", NULL},
    {L"wcsseqchk.dll", L"%systemroot%\\SysWOW64\\csseqchk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ctfmon.exe", NULL},
    {L"wctfmon.exe", L"%systemroot%\\SysWOW64\\ctfmon.exe", NULL},
    {L"wctl3d32.dll", L"%systemroot%\\SysWOW64\\ctl3d32.dll", NULL},
    {L"wctl3dv2.dll", L"%systemroot%\\SysWOW64\\ctl3dv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ctype.nls", NULL},
    {L"wctype.nls", L"%systemroot%\\SysWOW64\\ctype.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyclad-z.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyclom-y.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyycoins.dll", NULL},
    {L"wcyycoins.dll", L"%systemroot%\\SysWOW64\\cyycoins.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyyport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyyports.dll", NULL},
    {L"wcyyports.dll", L"%systemroot%\\SysWOW64\\cyyports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cyzcoins.dll", NULL},
    {L"wcyzcoins.dll", L"%systemroot%\\SysWOW64\\cyzcoins.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\cyzport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\cyzports.dll", NULL},
    {L"wcyzports.dll", L"%systemroot%\\SysWOW64\\cyzports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3d8.dll", NULL},
    {L"wd3d8.dll", L"%systemroot%\\SysWOW64\\d3d8.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3d8thk.dll", NULL},
    {L"wd3d8thk.dll", L"%systemroot%\\SysWOW64\\d3d8thk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dim.dll", NULL},
    {L"wd3dim.dll", L"%systemroot%\\SysWOW64\\d3dim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dim700.dll", NULL},
    {L"wd3dim700.dll", L"%systemroot%\\SysWOW64\\d3dim700.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dpmesh.dll", NULL},
    {L"wd3dpmesh.dll", L"%systemroot%\\SysWOW64\\d3dpmesh.dll", NULL},
    {L"wd3dramp.dll", L"%systemroot%\\SysWOW64\\d3dramp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3drm.dll", NULL},
    {L"wd3drm.dll", L"%systemroot%\\SysWOW64\\d3drm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\d3dxof.dll", NULL},
    {L"wd3dxof.dll", L"%systemroot%\\SysWOW64\\d3dxof.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dac2w2k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dac960nt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\danim.dll", NULL},
    {L"wdanim.dll", L"%systemroot%\\SysWOW64\\danim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dataclen.dll", NULL},
    {L"wdataclen.dll", L"%systemroot%\\SysWOW64\\dataclen.dll", NULL},
    {NULL, L"%systemroot%\\system32\\datime.dll", NULL},
    {L"wdatime.dll", L"%systemroot%\\SysWOW64\\datime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\davclnt.dll", NULL},
    {L"wdavclnt.dll", L"%systemroot%\\SysWOW64\\davclnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\daxctle.ocx", NULL},
    {L"wdaxctle.ocx", L"%systemroot%\\SysWOW64\\daxctle.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\dayi.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\dbgeng.dll", NULL},
    {L"wdbgeng.dll", L"%systemroot%\\SysWOW64\\dbgeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dbghelp.dll", NULL},
    {L"wdbghelp.dll", L"%systemroot%\\SysWOW64\\dbghelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dbnetlib.dll", NULL},
    {L"wdbnetlib.dll", L"%systemroot%\\SysWOW64\\dbnetlib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dciman32.dll", NULL},
    {L"wdciman32.dll", L"%systemroot%\\SysWOW64\\dciman32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dcomcnfg.exe", NULL},
    {L"wddeml.dll", L"%systemroot%\\SysWOW64\\ddeml.dll", NULL},
    {L"wddeshare.exe", L"%systemroot%\\SysWOW64\\ddeshare.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ddraw.dll", NULL},
    {L"wddraw.dll", L"%systemroot%\\SysWOW64\\ddraw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ddrawex.dll", NULL},
    {L"wddrawex.dll", L"%systemroot%\\SysWOW64\\ddrawex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ddsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\defrag.exe", NULL},
    {NULL, L"%systemroot%\\system32\\desk.cpl", NULL},
    {L"wdesk.cpl", L"%systemroot%\\SysWOW64\\desk.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\deskadp.dll", NULL},
    {L"wdeskadp.dll", L"%systemroot%\\SysWOW64\\deskadp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\deskmon.dll", NULL},
    {L"wdeskmon.dll", L"%systemroot%\\SysWOW64\\deskmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\deskperf.dll", NULL},
    {L"wdeskperf.dll", L"%systemroot%\\SysWOW64\\deskperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\devenum.dll", NULL},
    {L"wdevenum.dll", L"%systemroot%\\SysWOW64\\devenum.dll", NULL},
    {NULL, L"%systemroot%\\system32\\devmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgfat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgifc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgifps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgntfs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfrgui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dfsshlex.dll", NULL},
    {L"wdgconfig.dll", L"%systemroot%\\SysWOW64\\dgconfig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dgnet.dll", NULL},
    {L"wdgsetup.dll", L"%systemroot%\\SysWOW64\\dgsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpcsvc.dll", NULL},
    {L"wdhcpcsvc.dll", L"%systemroot%\\SysWOW64\\dhcpcsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpmon.dll", NULL},
    {L"wdhcpmon.dll", L"%systemroot%\\SysWOW64\\dhcpmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dhcpsapi.dll", NULL},
    {L"wdhcpsapi.dll", L"%systemroot%\\SysWOW64\\dhcpsapi.dll", NULL},
    {L"wDHTMLED.OCX", L"%commonprogramfiles(x86)%\\Microsoft Shared\\Triedit\\DHTMLED.OCX", NULL},
    {NULL, L"%systemroot%\\system32\\diactfrm.dll", NULL},
    {L"wdiactfrm.dll", L"%systemroot%\\SysWOW64\\diactfrm.dll", NULL},
    {NULL, L"%systemroot%\\dialer.exe", NULL},
    {NULL, L"%systemroot%\\system32\\diantz.exe", NULL},
    {L"wdiantz.exe", L"%systemroot%\\SysWOW64\\diantz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\digest.dll", NULL},
    {L"wwdigest.dll", L"%systemroot%\\SysWOW64\\digest.dll", NULL},
    {L"wdigiinf.dll", L"%systemroot%\\SysWOW64\\digiinf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\digirlpt.dll", NULL},
    {L"wdigirlpt.dll", L"%systemroot%\\SysWOW64\\digirlpt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\digirlpt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dimap.dll", NULL},
    {L"wdimap.dll", L"%systemroot%\\SysWOW64\\dimap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dinput.dll", NULL},
    {L"wdinput.dll", L"%systemroot%\\SysWOW64\\dinput.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dinput8.dll", NULL},
    {L"wdinput8.dll", L"%systemroot%\\SysWOW64\\dinput8.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\directdb.dll", NULL},
    {L"wdirectdb.dll", L"%commonprogramfiles(x86)%\\System\\directdb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\disk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\diskcopy.dll", NULL},
    {L"wdiskcopy.dll", L"%systemroot%\\SysWOW64\\diskcopy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\diskdump.sys", NULL},
    {NULL, L"%systemroot%\\system32\\diskpart.exe", NULL},
    {NULL, L"%systemroot%\\system32\\diskperf.exe", NULL},
    {L"wdiskperf.exe", L"%systemroot%\\SysWOW64\\diskperf.exe", NULL},
    {L"wdisrvci.dll", L"%systemroot%\\SysWOW64\\disrvci.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dllhost.exe", NULL},
    {L"wdllhost.exe", L"%systemroot%\\SysWOW64\\dllhost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dllhst3g.exe", NULL},
    {L"wdllhst3g.exe", L"%systemroot%\\SysWOW64\\dllhst3g.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dlttape.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dmband.dll", NULL},
    {L"wdmband.dll", L"%systemroot%\\SysWOW64\\dmband.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmboot.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmcompos.dll", NULL},
    {L"wdmcompos.dll", L"%systemroot%\\SysWOW64\\dmcompos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmconfig.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdlgs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdskmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmdskres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmime.dll", NULL},
    {L"wdmime.dll", L"%systemroot%\\SysWOW64\\dmime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmintf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmivcitf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dmload.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dmloader.dll", NULL},
    {L"wdmloader.dll", L"%systemroot%\\SysWOW64\\dmloader.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmocx.dll", NULL},
    {L"wdmocx.dll", L"%systemroot%\\SysWOW64\\dmocx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmremote.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dmscript.dll", NULL},
    {L"wdmscript.dll", L"%systemroot%\\SysWOW64\\dmscript.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmserver.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmstyle.dll", NULL},
    {L"wdmstyle.dll", L"%systemroot%\\SysWOW64\\dmstyle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmsynth.dll", NULL},
    {L"wdmsynth.dll", L"%systemroot%\\SysWOW64\\dmsynth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmusic.dll", NULL},
    {L"wdmusic.dll", L"%systemroot%\\SysWOW64\\dmusic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmvdsitf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dmview.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\dnsapi.dll", NULL},
    {L"wdnsapi.dll", L"%systemroot%\\SysWOW64\\dnsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dnsrslvr.dll", NULL},
    {L"wdnsrslvr.dll", L"%systemroot%\\SysWOW64\\dnsrslvr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\docprop.dll", NULL},
    {L"wdocprop.dll", L"%systemroot%\\SysWOW64\\docprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\docprop2.dll", NULL},
    {L"wdocprop2.dll", L"%systemroot%\\SysWOW64\\docprop2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\doskey.exe", NULL},
    {L"wdoskey.exe", L"%systemroot%\\SysWOW64\\doskey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4Prt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4Scan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\Dot4usb.sys", NULL},
    {L"wdplaysvr.exe", L"%systemroot%\\SysWOW64\\dplaysvr.exe", NULL},
    {L"wdplayx.dll", L"%systemroot%\\SysWOW64\\dplayx.dll", NULL},
    {L"wdpmodemx.dll", L"%systemroot%\\SysWOW64\\dpmodemx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnaddr.dll", NULL},
    {L"wdpnaddr.dll", L"%systemroot%\\SysWOW64\\dpnaddr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnet.dll", NULL},
    {L"wdpnet.dll", L"%systemroot%\\SysWOW64\\dpnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnhpast.dll", NULL},
    {L"wdpnhpast.dll", L"%systemroot%\\SysWOW64\\dpnhpast.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnhupnp.dll", NULL},
    {L"wdpnhupnp.dll", L"%systemroot%\\SysWOW64\\dpnhupnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnlobby.dll", NULL},
    {L"wdpnlobby.dll", L"%systemroot%\\SysWOW64\\dpnlobby.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpnsvr.exe", NULL},
    {L"wdpnsvr.exe", L"%systemroot%\\SysWOW64\\dpnsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dpti2o.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dpvacm.dll", NULL},
    {L"wdpvacm.dll", L"%systemroot%\\SysWOW64\\dpvacm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpvoice.dll", NULL},
    {L"wdpvoice.dll", L"%systemroot%\\SysWOW64\\dpvoice.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dpvsetup.exe", NULL},
    {L"wdpvsetup.exe", L"%systemroot%\\SysWOW64\\dpvsetup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dpvvox.dll", NULL},
    {L"wdpvvox.dll", L"%systemroot%\\SysWOW64\\dpvvox.dll", NULL},
    {L"wdpwsockx.dll", L"%systemroot%\\SysWOW64\\dpwsockx.dll", NULL},
    {L"wdrmv2clt.dll", L"%systemroot%\\SysWOW64\\drmv2clt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drprov.dll", NULL},
    {L"wdrprov.dll", L"%systemroot%\\SysWOW64\\drprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drwtsn32.exe", NULL},
    {L"wdrwtsn32.exe", L"%systemroot%\\SysWOW64\\drwtsn32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\dsauth.dll", NULL},
    {L"wdsauth.dll", L"%systemroot%\\SysWOW64\\dsauth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsdmo.dll", NULL},
    {L"wdsdmo.dll", L"%systemroot%\\SysWOW64\\dsdmo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsdmoprp.dll", NULL},
    {L"wdsdmoprp.dll", L"%systemroot%\\SysWOW64\\dsdmoprp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dskquota.dll", NULL},
    {L"wdskquota.dll", L"%systemroot%\\SysWOW64\\dskquota.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dskquoui.dll", NULL},
    {L"wdskquoui.dll", L"%systemroot%\\SysWOW64\\dskquoui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsound.dll", NULL},
    {L"wdsound.dll", L"%systemroot%\\SysWOW64\\dsound.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsound3d.dll", NULL},
    {L"wdsound3d.dll", L"%systemroot%\\SysWOW64\\dsound3d.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsprop.dll", NULL},
    {L"wdsprop.dll", L"%systemroot%\\SysWOW64\\dsprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\dsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsquery.dll", NULL},
    {L"wdsquery.dll", L"%systemroot%\\SysWOW64\\dsquery.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dssec.dll", NULL},
    {L"wdssec.dll", L"%systemroot%\\SysWOW64\\dssec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dsuiext.dll", NULL},
    {L"wdsuiext.dll", L"%systemroot%\\SysWOW64\\dsuiext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dswave.dll", NULL},
    {L"wdswave.dll", L"%systemroot%\\SysWOW64\\dswave.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dumprep.exe", NULL},
    {L"wdumprep.exe", L"%systemroot%\\SysWOW64\\dumprep.exe", NULL},
    {NULL, L"%systemroot%\\system32\\duser.dll", NULL},
    {L"wduser.dll", L"%systemroot%\\SysWOW64\\duser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dvdplay.exe", NULL},
    {L"wdvdplay.exe", L"%systemroot%\\SysWOW64\\dvdplay.exe", NULL},
    {L"wdvdupgrd.exe", L"%systemroot%\\SysWOW64\\dvdupgrd.exe", NULL},
    {L"dwil1033.dll", L"%systemroot%\\system32\\1033\\dwintl.dll", NULL},
    {L"wdwil1033.dll", L"%systemroot%\\SysWOW64\\1033\\dwintl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dwwin.exe", NULL},
    {L"wdwwin.exe", L"%systemroot%\\SysWOW64\\dwwin.exe", NULL},
    {L"wdx7vb.dll", L"%systemroot%\\SysWOW64\\dx7vb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dx8vb.dll", NULL},
    {L"wdx8vb.dll", L"%systemroot%\\SysWOW64\\dx8vb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dxdiag.exe", NULL},
    {L"wdxdiag.exe", L"%systemroot%\\SysWOW64\\dxdiag.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxg.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\dxgthk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\dxmrtp.dll", NULL},
    {L"wdxmrtp.dll", L"%systemroot%\\SysWOW64\\dxmrtp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dxtmsft.dll", NULL},
    {L"wdxtmsft.dll", L"%systemroot%\\SysWOW64\\dxtmsft.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dxtrans.dll", NULL},
    {L"wdxtrans.dll", L"%systemroot%\\SysWOW64\\dxtrans.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\e10064ex.sys", NULL},
    {L"wedb500.dll", L"%systemroot%\\SysWOW64\\edb500.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\elmsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\els.dll", NULL},
    {L"wels.dll", L"%systemroot%\\SysWOW64\\els.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\enum1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ersvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\es.dll", NULL},
    {L"wes.dll", L"%systemroot%\\SysWOW64\\es.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esent.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esentprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\esentutl.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\esscli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\eudcedit.exe", NULL},
    {L"weudcedit.exe", L"%systemroot%\\SysWOW64\\eudcedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\eventcls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\eventlog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\eventvwr.exe", NULL},
    {L"weventvwr.exe", L"%systemroot%\\SysWOW64\\eventvwr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\evntagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\evntcmd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\evntrprv.dll", NULL},
    {L"wevntrprv.dll", L"%systemroot%\\SysWOW64\\wbem\\evntrprv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\evntwin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\exabyte2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\expand.exe", NULL},
    {L"wexpand.exe", L"%systemroot%\\SysWOW64\\expand.exe", NULL},
    {NULL, L"%systemroot%\\explorer.exe", NULL},
    {L"wexplorer.exe", L"%systemroot%\\SysWOW64\\explorer.exe", NULL},
    {L"wexpsrv.dll", L"%systemroot%\\SysWOW64\\expsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\extrac32.exe", NULL},
    {L"wextrac32.exe", L"%systemroot%\\SysWOW64\\extrac32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\f3ahvoas.dll", NULL},
    {L"wf3ahvoas.dll", L"%systemroot%\\SysWOW64\\f3ahvoas.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\fastprox.dll", NULL},
    {NULL, L"%systemroot%\\system32\\faultrep.dll", NULL},
    {L"wfaultrep.dll", L"%systemroot%\\SysWOW64\\faultrep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fc.exe", NULL},
    {L"wfc.exe", L"%systemroot%\\SysWOW64\\fc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\fcachdll.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\fdc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\feclient.dll", NULL},
    {L"wfeclient.dll", L"%systemroot%\\SysWOW64\\feclient.dll", NULL},
    {NULL, L"%systemroot%\\system32\\filemgmt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\find.exe", NULL},
    {L"wfind.exe", L"%systemroot%\\SysWOW64\\find.exe", NULL},
    {NULL, L"%systemroot%\\system32\\findstr.exe", NULL},
    {L"wfindstr.exe", L"%systemroot%\\SysWOW64\\findstr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\finger.exe", NULL},
    {L"wfinger.exe", L"%systemroot%\\SysWOW64\\finger.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fips.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fixmapi.exe", NULL},
    {L"wfixmapi.exe", L"%systemroot%\\SysWOW64\\fixmapi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\flattemp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\fldrclnr.dll", NULL},
    {L"wfldrclnr.dll", L"%systemroot%\\SysWOW64\\fldrclnr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\flpydisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fmifs.dll", NULL},
    {L"wfmifs.dll", L"%systemroot%\\SysWOW64\\fmifs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontext.dll", NULL},
    {L"wfontext.dll", L"%systemroot%\\SysWOW64\\fontext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontsub.dll", NULL},
    {L"wfontsub.dll", L"%systemroot%\\SysWOW64\\fontsub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fontview.exe", NULL},
    {L"wfontview.exe", L"%systemroot%\\SysWOW64\\fontview.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\fp40ext.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4autl.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\admcgi\\scripts\\fpadmcgi.exe", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\admisapi\\scripts\\fpadmdll.dll", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\framebuf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\framedyn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\freecell.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fs_rec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\fsusd.dll", NULL},
    {L"wfsusd.dll", L"%systemroot%\\SysWOW64\\fsusd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\fsutil.exe", NULL},
    {L"wfsutil.exe", L"%systemroot%\\SysWOW64\\fsutil.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ftdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ftp.exe", NULL},
    {L"wftp.exe", L"%systemroot%\\SysWOW64\\ftp.exe", NULL},
    {L"wftsrch.dll", L"%systemroot%\\SysWOW64\\ftsrch.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\fwdprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\G400d.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\G400m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\g711codc.ax", NULL},
    {L"wg711codc.ax", L"%systemroot%\\SysWOW64\\g711codc.ax", NULL},
    {NULL, L"%systemroot%\\system32\\gcdef.dll", NULL},
    {L"wgcdef.dll", L"%systemroot%\\SysWOW64\\gcdef.dll", NULL},
    {L"wgdi.exe", L"%systemroot%\\SysWOW64\\gdi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\gdi32.dll", NULL},
    {L"wgdi32.dll", L"%systemroot%\\SysWOW64\\gdi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\geo.nls", NULL},
    {L"wgeo.nls", L"%systemroot%\\SysWOW64\\geo.nls", NULL},
    {NULL, L"%systemroot%\\system32\\getuname.dll", NULL},
    {NULL, L"%systemroot%\\system32\\glmf32.dll", NULL},
    {L"wglmf32.dll", L"%systemroot%\\SysWOW64\\glmf32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\glu32.dll", NULL},
    {L"wglu32.dll", L"%systemroot%\\SysWOW64\\glu32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\gm.dls", NULL},
    {NULL, L"%systemroot%\\system32\\gpkcsp.dll", NULL},
    {L"wgpkcsp.dll", L"%systemroot%\\SysWOW64\\gpkcsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\gpkrsrc.dll", NULL},
    {L"wgpkrsrc.dll", L"%systemroot%\\SysWOW64\\gpkrsrc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\gpr400.sys", NULL},
    {NULL, L"%systemroot%\\system32\\grpconv.exe", NULL},
    {L"wgrpconv.exe", L"%systemroot%\\SysWOW64\\grpconv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\grserial.sys", NULL},
    {NULL, L"%systemroot%\\system32\\h323.tsp", NULL},
    {L"wh323.tsp", L"%systemroot%\\SysWOW64\\h323.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\h323msp.dll", NULL},
    {L"wh323msp.dll", L"%systemroot%\\SysWOW64\\h323msp.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\hanja.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\hanjadic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HCAppRes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hccoin.dll", NULL},
    {L"whccoin.dll", L"%systemroot%\\SysWOW64\\hccoin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hdwwiz.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\help.exe", NULL},
    {L"whelp.exe", L"%systemroot%\\SysWOW64\\help.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpHost.exe", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\HelpSvc.exe", NULL},
    {NULL, L"%systemroot%\\hh.exe", NULL},
    {L"whh.exe", L"%systemroot%\\SysWOW64\\hh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\hhctrl.ocx", NULL},
    {L"whhctrl.ocx", L"%systemroot%\\SysWOW64\\hhctrl.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\mui\\0009\\hhctrlui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hhsetup.dll", NULL},
    {L"whhsetup.dll", L"%systemroot%\\SysWOW64\\hhsetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hid.dll", NULL},
    {L"whid.dll", L"%systemroot%\\SysWOW64\\hid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidbatt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidgame.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidir.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidparse.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hidphone.tsp", NULL},
    {L"whidphone.tsp", L"%systemroot%\\SysWOW64\\hidphone.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\hidserv.dll", NULL},
    {L"whidserv.dll", L"%systemroot%\\SysWOW64\\hidserv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hidusb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hlink.dll", NULL},
    {L"whlink.dll", L"%systemroot%\\SysWOW64\\hlink.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\HMMAPI.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\hnetcfg.dll", NULL},
    {L"whnetcfg.dll", L"%systemroot%\\SysWOW64\\hnetcfg.dll", NULL},
    {L"whnetmon.dll", L"%systemroot%\\SysWOW64\\hnetmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hostmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\hostname.exe", NULL},
    {L"whostname.exe", L"%systemroot%\\SysWOW64\\hostname.exe", NULL},
    {NULL, L"%systemroot%\\system32\\hotplug.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpn.sys", NULL},
    {NULL, L"%systemroot%\\system32\\hpsjmcro.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\hpt4qic.sys", NULL},
    {L"whsf_inst.dll", L"%systemroot%\\SysWOW64\\hsf_inst.dll", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\htrn_jis.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\http.sys", NULL},
    {NULL, L"%systemroot%\\system32\\httpapi.dll", NULL},
    {L"whttpapi.dll", L"%systemroot%\\SysWOW64\\httpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\htui.dll", NULL},
    {L"whtui.dll", L"%systemroot%\\SysWOW64\\htui.dll", NULL},
    {NULL, L"%systemroot%\\ime\\CHTIME\\Applets\\HWXCHT.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\hwxjpn.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Applets\\hwxkor.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\i2omgmt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\i2omp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\i8042prt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\iasacct.dll", NULL},
    {L"wiasacct.dll", L"%systemroot%\\SysWOW64\\iasacct.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasads.dll", NULL},
    {L"wiasads.dll", L"%systemroot%\\SysWOW64\\iasads.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iashlpr.dll", NULL},
    {L"wiashlpr.dll", L"%systemroot%\\SysWOW64\\iashlpr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasnap.dll", NULL},
    {L"wiasnap.dll", L"%systemroot%\\SysWOW64\\iasnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iaspolcy.dll", NULL},
    {L"wiaspolcy.dll", L"%systemroot%\\SysWOW64\\iaspolcy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iasrad.dll", NULL},
    {L"wiasrad.dll", L"%systemroot%\\SysWOW64\\iasrad.dll", NULL},
    {L"wiasrecst.dll", L"%systemroot%\\SysWOW64\\iasrecst.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassam.dll", NULL},
    {L"wiassam.dll", L"%systemroot%\\SysWOW64\\iassam.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassdo.dll", NULL},
    {L"wiassdo.dll", L"%systemroot%\\SysWOW64\\iassdo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iassvcs.dll", NULL},
    {L"wiassvcs.dll", L"%systemroot%\\SysWOW64\\iassvcs.dll", NULL},
    {L"wibmsgnet.dll", L"%systemroot%\\SysWOW64\\ibmsgnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ibmvcap.sys", NULL},
    {NULL, L"%systemroot%\\system32\\icaapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icfgnt5.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ichaud.sys", NULL},
    {NULL, L"%systemroot%\\system32\\icm32.dll", NULL},
    {L"wicm32.dll", L"%systemroot%\\SysWOW64\\icm32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icmp.dll", NULL},
    {L"wicmp.dll", L"%systemroot%\\SysWOW64\\icmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icmui.dll", NULL},
    {L"wicmui.dll", L"%systemroot%\\SysWOW64\\icmui.dll", NULL},
    {L"wiconf32.dll", L"%systemroot%\\SysWOW64\\iconf32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn1.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwconn2.exe", NULL},
    {NULL, L"%systemroot%\\system32\\icwdial.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwdl.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwhelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\icwphbk.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwres.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwrmind.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwtutor.exe", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\icwutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\idq.dll", NULL},
    {L"widq.dll", L"%systemroot%\\SysWOW64\\idq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\idwlog.exe", NULL},
    {L"widwlog.exe", L"%systemroot%\\SysWOW64\\idwlog.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ie4uinit.exe", NULL},
    {L"wie4uinit.exe", L"%systemroot%\\SysWOW64\\ie4uinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ieakeng.dll", NULL},
    {L"wieakeng.dll", L"%systemroot%\\SysWOW64\\ieakeng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ieaksie.dll", NULL},
    {L"wieaksie.dll", L"%systemroot%\\SysWOW64\\ieaksie.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ieakui.dll", NULL},
    {L"wieakui.dll", L"%systemroot%\\SysWOW64\\ieakui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iedkcs32.dll", NULL},
    {L"wiedkcs32.dll", L"%systemroot%\\SysWOW64\\iedkcs32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\MSInfo\\IEINFO5.OCX", NULL},
    {L"wIEINFO5.OCX", L"%commonprogramfiles(x86)%\\Microsoft Shared\\MSInfo\\IEINFO5.OCX", NULL},
    {NULL, L"%systemroot%\\system32\\iepeers.dll", NULL},
    {L"wiepeers.dll", L"%systemroot%\\SysWOW64\\iepeers.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iernonce.dll", NULL},
    {L"wiernonce.dll", L"%systemroot%\\SysWOW64\\iernonce.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iesetup.dll", NULL},
    {L"wiesetup.dll", L"%systemroot%\\SysWOW64\\iesetup.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\IEXPLORE.EXE", NULL},
    {NULL, L"%systemroot%\\system32\\iexpress.exe", NULL},
    {L"wiexpress.exe", L"%systemroot%\\SysWOW64\\iexpress.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ifmon.dll", NULL},
    {L"wifmon.dll", L"%systemroot%\\SysWOW64\\ifmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ifsutil.dll", NULL},
    {L"wifsutil.dll", L"%systemroot%\\SysWOW64\\ifsutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\igmpagnt.dll", NULL},
    {L"wigmpagnt.dll", L"%systemroot%\\SysWOW64\\igmpagnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\iis.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imagehlp.dll", NULL},
    {L"wimagehlp.dll", L"%systemroot%\\SysWOW64\\imagehlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imapi.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\imapi.sys", NULL},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Dicts\\imekr.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imekr61.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imekrcic.dll", L"intl.inf"},
    {L"wimekrcic.dll", L"%systemroot%\\ime (x86)\\IMKR6_1\\imekrcic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\Applets\\imekrmbx.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imekrmig.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imepadsm.dll", L"intl.inf"},
    {L"wimepadsm.dll", L"%systemroot%\\ime (x86)\\SHARED\\imepadsm.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imepadsv.exe", L"intl.inf"},
    {L"wimepadsv.exe", L"%systemroot%\\ime (x86)\\SHARED\\imepadsv.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imgutil.dll", NULL},
    {L"wimgutil.dll", L"%systemroot%\\SysWOW64\\imgutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\imjp81.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imjp81k.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpcd.dic", L"intl.inf"},
    {L"wimjpcd.dic", L"%systemroot%\\ime (x86)\\IMJP8_1\\DICTS\\imjpcd.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpch.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpcic.dll", L"intl.inf"},
    {L"wimjpcic.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpcic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpcus.dll", L"intl.inf"},
    {L"wimjpcus.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpcus.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdadm.exe", L"intl.inf"},
    {L"wimjpdadm.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdadm.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdct.dll", L"intl.inf"},
    {L"wimjpdct.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdct.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdct.exe", L"intl.inf"},
    {L"wimjpdct.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdct.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpdsvr.exe", L"intl.inf"},
    {L"wimjpdsvr.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpdsvr.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpgn.grm", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpinst.exe", L"intl.inf"},
    {L"wimjpinst.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpinst.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpln.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpmig.exe", L"intl.inf"},
    {L"wimjpmig.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpmig.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpnm.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjprw.exe", L"intl.inf"},
    {L"wimjprw.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjprw.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpsb.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpst.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjptk.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjpuex.exe", L"intl.inf"},
    {L"wimjpuex.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjpuex.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjputy.exe", L"intl.inf"},
    {L"wimjputy.exe", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjputy.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\imjputyc.dll", L"intl.inf"},
    {L"wimjputyc.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\imjputyc.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\DICTS\\imjpzp.dic", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMKR6_1\\imkrinst.exe", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\imlang.dll", L"intl.inf"},
    {L"wimlang.dll", L"%systemroot%\\ime (x86)\\SHARED\\imlang.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\imm32.dll", NULL},
    {L"wimm32.dll", L"%systemroot%\\SysWOW64\\imm32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\IMSCINST.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\Setup\\imsinsnt.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\imskdic.dll", L"intl.inf"},
    {L"wimskdic.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\imskdic.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\imskf.dll", L"intl.inf"},
    {L"wimskf.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\imskf.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\inetcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetcomm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetcpl.cpl", NULL},
    {L"winetcpl.cpl", L"%systemroot%\\SysWOW64\\inetcpl.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\inetcplc.dll", NULL},
    {L"winetcplc.dll", L"%systemroot%\\SysWOW64\\inetcplc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetmib1.dll", NULL},
    {L"winetmib1.dll", L"%systemroot%\\SysWOW64\\inetmib1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetpp.dll", NULL},
    {L"winetpp.dll", L"%systemroot%\\SysWOW64\\inetpp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetppui.dll", NULL},
    {L"winetppui.dll", L"%systemroot%\\SysWOW64\\inetppui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetres.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\inetwiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\infosoft.dll", NULL},
    {L"winfosoft.dll", L"%systemroot%\\SysWOW64\\infosoft.dll", NULL},
    {NULL, L"%systemroot%\\system32\\initpki.dll", NULL},
    {L"winitpki.dll", L"%systemroot%\\SysWOW64\\initpki.dll", NULL},
    {NULL, L"%systemroot%\\system32\\input.dll", NULL},
    {L"winput.dll", L"%systemroot%\\SysWOW64\\input.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inseng.dll", NULL},
    {L"winseng.dll", L"%systemroot%\\SysWOW64\\inseng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\intelide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\intl.cpl", NULL},
    {L"wintl.cpl", L"%systemroot%\\SysWOW64\\intl.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\iologmsg.dll", NULL},
    {L"wiologmsg.dll", L"%systemroot%\\SysWOW64\\iologmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipconf.tsp", NULL},
    {L"wipconf.tsp", L"%systemroot%\\SysWOW64\\ipconf.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\ipconfig.exe", NULL},
    {L"wipconfig.exe", L"%systemroot%\\SysWOW64\\ipconfig.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipfltdrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\iphlpapi.dll", NULL},
    {L"wiphlpapi.dll", L"%systemroot%\\SysWOW64\\iphlpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipmontr.dll", NULL},
    {L"wipmontr.dll", L"%systemroot%\\SysWOW64\\ipmontr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ipnat.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ipnathlp.dll", NULL},
    {L"wipnathlp.dll", L"%systemroot%\\SysWOW64\\ipnathlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ippromon.dll", NULL},
    {L"wippromon.dll", L"%systemroot%\\SysWOW64\\ippromon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprip.dll", NULL},
    {L"wiprip.dll", L"%systemroot%\\SysWOW64\\iprip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprop.dll", NULL},
    {L"wiprop.dll", L"%systemroot%\\SysWOW64\\iprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprtprio.dll", NULL},
    {L"wiprtprio.dll", L"%systemroot%\\SysWOW64\\iprtprio.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iprtrmgr.dll", NULL},
    {L"wiprtrmgr.dll", L"%systemroot%\\SysWOW64\\iprtrmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsec6.exe", NULL},
    {L"wipsec6.exe", L"%systemroot%\\SysWOW64\\ipsec6.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ipsecsnp.dll", NULL},
    {L"wipsecsnp.dll", L"%systemroot%\\SysWOW64\\ipsecsnp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsecsvc.dll", NULL},
    {L"wipsecsvc.dll", L"%systemroot%\\SysWOW64\\ipsecsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipsink.ax", NULL},
    {L"wipsink.ax", L"%systemroot%\\SysWOW64\\ipsink.ax", NULL},
    {NULL, L"%systemroot%\\system32\\ipsmsnap.dll", NULL},
    {L"wipsmsnap.dll", L"%systemroot%\\SysWOW64\\ipsmsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ipv6mon.dll", NULL},
    {L"wipv6mon.dll", L"%systemroot%\\SysWOW64\\ipv6mon.dll", NULL},
    {L"wipxroute.exe", L"%systemroot%\\SysWOW64\\ipxroute.exe", NULL},
    {L"wipxsap.dll", L"%systemroot%\\SysWOW64\\ipxsap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\irbus.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\isapnp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\isign32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\isignup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\iuctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\iuengine.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ixsso.dll", NULL},
    {L"wixsso.dll", L"%systemroot%\\SysWOW64\\ixsso.dll", NULL},
    {L"wiyuv_32.dll", L"%systemroot%\\SysWOW64\\iyuv_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\jet500.dll", NULL},
    {L"wjet500.dll", L"%systemroot%\\SysWOW64\\jet500.dll", NULL},
    {L"wjgaw400.dll", L"%systemroot%\\SysWOW64\\jgaw400.dll", NULL},
    {L"wjgdw400.dll", L"%systemroot%\\SysWOW64\\jgdw400.dll", NULL},
    {L"wjgmd400.dll", L"%systemroot%\\SysWOW64\\jgmd400.dll", NULL},
    {L"wjgpl400.dll", L"%systemroot%\\SysWOW64\\jgpl400.dll", NULL},
    {L"wjgsd400.dll", L"%systemroot%\\SysWOW64\\jgsd400.dll", NULL},
    {L"wjgsh400.dll", L"%systemroot%\\SysWOW64\\jgsh400.dll", NULL},
    {L"wjobexec.dll", L"%systemroot%\\SysWOW64\\jobexec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\joy.cpl", NULL},
    {L"wjoy.cpl", L"%systemroot%\\SysWOW64\\joy.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101.dll", NULL},
    {L"wkbd101.dll", L"%systemroot%\\SysWOW64\\kbd101.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101a.dll", NULL},
    {L"wkbd101a.dll", L"%systemroot%\\SysWOW64\\kbd101a.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101b.dll", NULL},
    {L"wkbd101b.dll", L"%systemroot%\\SysWOW64\\kbd101b.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd101c.dll", NULL},
    {L"wkbd101c.dll", L"%systemroot%\\SysWOW64\\kbd101c.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd103.dll", NULL},
    {L"wkbd103.dll", L"%systemroot%\\SysWOW64\\kbd103.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd106.dll", NULL},
    {L"wkbd106.dll", L"%systemroot%\\SysWOW64\\kbd106.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbd106n.dll", NULL},
    {L"wkbd106n.dll", L"%systemroot%\\SysWOW64\\kbd106n.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda1.dll", NULL},
    {L"wkbda1.dll", L"%systemroot%\\SysWOW64\\kbda1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda2.dll", NULL},
    {L"wkbda2.dll", L"%systemroot%\\SysWOW64\\kbda2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbda3.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbda3.dll", NULL},
    {L"wkbda3.dll", L"%systemroot%\\SysWOW64\\kbda3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdal.dll", NULL},
    {L"wkbdal.dll", L"%systemroot%\\SysWOW64\\kbdal.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdarme.dll", NULL},
    {L"wkbdarme.dll", L"%systemroot%\\SysWOW64\\kbdarme.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdarmw.dll", NULL},
    {L"wkbdarmw.dll", L"%systemroot%\\SysWOW64\\kbdarmw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdax2.dll", NULL},
    {L"wkbdax2.dll", L"%systemroot%\\SysWOW64\\kbdax2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdaze.dll", NULL},
    {L"wkbdaze.dll", L"%systemroot%\\SysWOW64\\kbdaze.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdazel.dll", NULL},
    {L"wkbdazel.dll", L"%systemroot%\\SysWOW64\\kbdazel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbe.dll", NULL},
    {L"wkbdbe.dll", L"%systemroot%\\SysWOW64\\kbdbe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbene.dll", NULL},
    {L"wkbdbene.dll", L"%systemroot%\\SysWOW64\\kbdbene.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdblr.dll", NULL},
    {L"wkbdblr.dll", L"%systemroot%\\SysWOW64\\kbdblr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbr.dll", NULL},
    {L"wkbdbr.dll", L"%systemroot%\\SysWOW64\\kbdbr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdbu.dll", NULL},
    {L"wkbdbu.dll", L"%systemroot%\\SysWOW64\\kbdbu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdca.dll", NULL},
    {L"wkbdca.dll", L"%systemroot%\\SysWOW64\\kbdca.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcan.dll", NULL},
    {L"wkbdcan.dll", L"%systemroot%\\SysWOW64\\kbdcan.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kbdclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcr.dll", NULL},
    {L"wkbdcr.dll", L"%systemroot%\\SysWOW64\\kbdcr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz.dll", NULL},
    {L"wkbdcz.dll", L"%systemroot%\\SysWOW64\\kbdcz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz1.dll", NULL},
    {L"wkbdcz1.dll", L"%systemroot%\\SysWOW64\\kbdcz1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdcz2.dll", NULL},
    {L"wkbdcz2.dll", L"%systemroot%\\SysWOW64\\kbdcz2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdda.dll", NULL},
    {L"wkbdda.dll", L"%systemroot%\\SysWOW64\\kbdda.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddiv1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbddiv1.dll", NULL},
    {L"wkbddiv1.dll", L"%systemroot%\\SysWOW64\\kbddiv1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddiv2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbddiv2.dll", NULL},
    {L"wkbddiv2.dll", L"%systemroot%\\SysWOW64\\kbddiv2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbddv.dll", NULL},
    {L"wkbddv.dll", L"%systemroot%\\SysWOW64\\kbddv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdes.dll", NULL},
    {L"wkbdes.dll", L"%systemroot%\\SysWOW64\\kbdes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdest.dll", NULL},
    {L"wkbdest.dll", L"%systemroot%\\SysWOW64\\kbdest.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfa.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdfa.dll", NULL},
    {L"wkbdfa.dll", L"%systemroot%\\SysWOW64\\kbdfa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfc.dll", NULL},
    {L"wkbdfc.dll", L"%systemroot%\\SysWOW64\\kbdfc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfi.dll", NULL},
    {L"wkbdfi.dll", L"%systemroot%\\SysWOW64\\kbdfi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfo.dll", NULL},
    {L"wkbdfo.dll", L"%systemroot%\\SysWOW64\\kbdfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdfr.dll", NULL},
    {L"wkbdfr.dll", L"%systemroot%\\SysWOW64\\kbdfr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgae.dll", NULL},
    {L"wkbdgae.dll", L"%systemroot%\\SysWOW64\\kbdgae.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgeo.dll", NULL},
    {L"wkbdgeo.dll", L"%systemroot%\\SysWOW64\\kbdgeo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgkl.dll", NULL},
    {L"wkbdgkl.dll", L"%systemroot%\\SysWOW64\\kbdgkl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgr.dll", NULL},
    {L"wkbdgr.dll", L"%systemroot%\\SysWOW64\\kbdgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdgr1.dll", NULL},
    {L"wkbdgr1.dll", L"%systemroot%\\SysWOW64\\kbdgr1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe.dll", NULL},
    {L"wkbdhe.dll", L"%systemroot%\\SysWOW64\\kbdhe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe220.dll", NULL},
    {L"wkbdhe220.dll", L"%systemroot%\\SysWOW64\\kbdhe220.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhe319.dll", NULL},
    {L"wkbdhe319.dll", L"%systemroot%\\SysWOW64\\kbdhe319.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdheb.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdheb.dll", NULL},
    {L"wkbdheb.dll", L"%systemroot%\\SysWOW64\\kbdheb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhela2.dll", NULL},
    {L"wkbdhela2.dll", L"%systemroot%\\SysWOW64\\kbdhela2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhela3.dll", NULL},
    {L"wkbdhela3.dll", L"%systemroot%\\SysWOW64\\kbdhela3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhept.dll", NULL},
    {L"wkbdhept.dll", L"%systemroot%\\SysWOW64\\kbdhept.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kbdhid.sys", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhu.dll", NULL},
    {L"wkbdhu.dll", L"%systemroot%\\SysWOW64\\kbdhu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdhu1.dll", NULL},
    {L"wkbdhu1.dll", L"%systemroot%\\SysWOW64\\kbdhu1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdibm02.dll", NULL},
    {L"wkbdibm02.dll", L"%systemroot%\\SysWOW64\\kbdibm02.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdic.dll", NULL},
    {L"wkbdic.dll", L"%systemroot%\\SysWOW64\\kbdic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdindev.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdindev.dll", NULL},
    {L"wkbdindev.dll", L"%systemroot%\\SysWOW64\\kbdindev.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinguj.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinguj.dll", NULL},
    {L"wkbdinguj.dll", L"%systemroot%\\SysWOW64\\kbdinguj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinhin.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinhin.dll", NULL},
    {L"wkbdinhin.dll", L"%systemroot%\\SysWOW64\\kbdinhin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinkan.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinkan.dll", NULL},
    {L"wkbdinkan.dll", L"%systemroot%\\SysWOW64\\kbdinkan.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinmar.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinmar.dll", NULL},
    {L"wkbdinmar.dll", L"%systemroot%\\SysWOW64\\kbdinmar.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdinpun.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdinpun.dll", NULL},
    {L"wkbdinpun.dll", L"%systemroot%\\SysWOW64\\kbdinpun.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdintam.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdintam.dll", NULL},
    {L"wkbdintam.dll", L"%systemroot%\\SysWOW64\\kbdintam.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdintel.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdintel.dll", NULL},
    {L"wkbdintel.dll", L"%systemroot%\\SysWOW64\\kbdintel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdir.dll", NULL},
    {L"wkbdir.dll", L"%systemroot%\\SysWOW64\\kbdir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdit.dll", NULL},
    {L"wkbdit.dll", L"%systemroot%\\SysWOW64\\kbdit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdit142.dll", NULL},
    {L"wkbdit142.dll", L"%systemroot%\\SysWOW64\\kbdit142.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdjpn.dll", NULL},
    {L"wkbdjpn.dll", L"%systemroot%\\SysWOW64\\kbdjpn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkaz.dll", NULL},
    {L"wkbdkaz.dll", L"%systemroot%\\SysWOW64\\kbdkaz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkor.dll", NULL},
    {L"wkbdkor.dll", L"%systemroot%\\SysWOW64\\kbdkor.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdkyr.dll", NULL},
    {L"wkbdkyr.dll", L"%systemroot%\\SysWOW64\\kbdkyr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdla.dll", NULL},
    {L"wkbdla.dll", L"%systemroot%\\SysWOW64\\kbdla.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlk41a.dll", NULL},
    {L"wkbdlk41a.dll", L"%systemroot%\\SysWOW64\\kbdlk41a.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlk41j.dll", NULL},
    {L"wkbdlk41j.dll", L"%systemroot%\\SysWOW64\\kbdlk41j.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlt.dll", NULL},
    {L"wkbdlt.dll", L"%systemroot%\\SysWOW64\\kbdlt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlt1.dll", NULL},
    {L"wkbdlt1.dll", L"%systemroot%\\SysWOW64\\kbdlt1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlv.dll", NULL},
    {L"wkbdlv.dll", L"%systemroot%\\SysWOW64\\kbdlv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdlv1.dll", NULL},
    {L"wkbdlv1.dll", L"%systemroot%\\SysWOW64\\kbdlv1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdmac.dll", NULL},
    {L"wkbdmac.dll", L"%systemroot%\\SysWOW64\\kbdmac.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdmon.dll", NULL},
    {L"wkbdmon.dll", L"%systemroot%\\SysWOW64\\kbdmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdne.dll", NULL},
    {L"wkbdne.dll", L"%systemroot%\\SysWOW64\\kbdne.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnec.dll", NULL},
    {L"wkbdnec.dll", L"%systemroot%\\SysWOW64\\kbdnec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnec95.dll", NULL},
    {L"wkbdnec95.dll", L"%systemroot%\\SysWOW64\\kbdnec95.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnecat.dll", NULL},
    {L"wkbdnecat.dll", L"%systemroot%\\SysWOW64\\kbdnecat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdnecnt.dll", NULL},
    {L"wkbdnecnt.dll", L"%systemroot%\\SysWOW64\\kbdnecnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdno.dll", NULL},
    {L"wkbdno.dll", L"%systemroot%\\SysWOW64\\kbdno.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpl.dll", NULL},
    {L"wkbdpl.dll", L"%systemroot%\\SysWOW64\\kbdpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpl1.dll", NULL},
    {L"wkbdpl1.dll", L"%systemroot%\\SysWOW64\\kbdpl1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdpo.dll", NULL},
    {L"wkbdpo.dll", L"%systemroot%\\SysWOW64\\kbdpo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdro.dll", NULL},
    {L"wkbdro.dll", L"%systemroot%\\SysWOW64\\kbdro.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdru.dll", NULL},
    {L"wkbdru.dll", L"%systemroot%\\SysWOW64\\kbdru.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdru1.dll", NULL},
    {L"wkbdru1.dll", L"%systemroot%\\SysWOW64\\kbdru1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsf.dll", NULL},
    {L"wkbdsf.dll", L"%systemroot%\\SysWOW64\\kbdsf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsg.dll", NULL},
    {L"wkbdsg.dll", L"%systemroot%\\SysWOW64\\kbdsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsl.dll", NULL},
    {L"wkbdsl.dll", L"%systemroot%\\SysWOW64\\kbdsl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsl1.dll", NULL},
    {L"wkbdsl1.dll", L"%systemroot%\\SysWOW64\\kbdsl1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsp.dll", NULL},
    {L"wkbdsp.dll", L"%systemroot%\\SysWOW64\\kbdsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsw.dll", NULL},
    {L"wkbdsw.dll", L"%systemroot%\\SysWOW64\\kbdsw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsyr1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdsyr1.dll", NULL},
    {L"wkbdsyr1.dll", L"%systemroot%\\SysWOW64\\kbdsyr1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdsyr2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdsyr2.dll", NULL},
    {L"wkbdsyr2.dll", L"%systemroot%\\SysWOW64\\kbdsyr2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtat.dll", NULL},
    {L"wkbdtat.dll", L"%systemroot%\\SysWOW64\\kbdtat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth0.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth0.dll", NULL},
    {L"wkbdth0.dll", L"%systemroot%\\SysWOW64\\kbdth0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth1.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth1.dll", NULL},
    {L"wkbdth1.dll", L"%systemroot%\\SysWOW64\\kbdth1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth2.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth2.dll", NULL},
    {L"wkbdth2.dll", L"%systemroot%\\SysWOW64\\kbdth2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdth3.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdth3.dll", NULL},
    {L"wkbdth3.dll", L"%systemroot%\\SysWOW64\\kbdth3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtuf.dll", NULL},
    {L"wkbdtuf.dll", L"%systemroot%\\SysWOW64\\kbdtuf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdtuq.dll", NULL},
    {L"wkbdtuq.dll", L"%systemroot%\\SysWOW64\\kbdtuq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbduk.dll", NULL},
    {L"wkbduk.dll", L"%systemroot%\\SysWOW64\\kbduk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdur.dll", NULL},
    {L"wkbdur.dll", L"%systemroot%\\SysWOW64\\kbdur.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdurdu.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\kbdurdu.dll", NULL},
    {L"wkbdurdu.dll", L"%systemroot%\\SysWOW64\\kbdurdu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdus.dll", NULL},
    {L"wkbdus.dll", L"%systemroot%\\SysWOW64\\kbdus.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusl.dll", NULL},
    {L"wkbdusl.dll", L"%systemroot%\\SysWOW64\\kbdusl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusr.dll", NULL},
    {L"wkbdusr.dll", L"%systemroot%\\SysWOW64\\kbdusr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdusx.dll", NULL},
    {L"wkbdusx.dll", L"%systemroot%\\SysWOW64\\kbdusx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbduzb.dll", NULL},
    {L"wkbduzb.dll", L"%systemroot%\\SysWOW64\\kbduzb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdvntc.dll", NULL},
    {L"wkbdvntc.dll", L"%systemroot%\\SysWOW64\\kbdvntc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdycc.dll", NULL},
    {L"wkbdycc.dll", L"%systemroot%\\SysWOW64\\kbdycc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kbdycl.dll", NULL},
    {L"wkbdycl.dll", L"%systemroot%\\SysWOW64\\kbdycl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kd1394.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kdcom.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kerberos.dll", NULL},
    {L"wkerberos.dll", L"%systemroot%\\SysWOW64\\kerberos.dll", NULL},
    {L"wkeyboard.drv", L"%systemroot%\\SysWOW64\\keyboard.drv", NULL},
    {NULL, L"%systemroot%\\system32\\keymgr.dll", NULL},
    {L"wkeymgr.dll", L"%systemroot%\\SysWOW64\\keymgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\kmddsp.tsp", NULL},
    {L"wkmddsp.tsp", L"%systemroot%\\SysWOW64\\kmddsp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\kmixer.sys", NULL},
    {NULL, L"%systemroot%\\system32\\korwbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\korwbrkr.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\krnlprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ks.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ksc.nls", NULL},
    {L"wksc.nls", L"%systemroot%\\SysWOW64\\ksc.nls", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ksecdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ksproxy.ax", NULL},
    {NULL, L"%systemroot%\\system32\\kstvtune.ax", NULL},
    {NULL, L"%systemroot%\\system32\\ksuser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ksxbar.ax", NULL},
    {NULL, L"%systemroot%\\system32\\l_except.nls", NULL},
    {L"wl_except.nls", L"%systemroot%\\SysWOW64\\l_except.nls", NULL},
    {NULL, L"%systemroot%\\system32\\l_intl.nls", NULL},
    {L"wl_intl.nls", L"%systemroot%\\SysWOW64\\l_intl.nls", NULL},
    {NULL, L"%systemroot%\\system32\\label.exe", NULL},
    {L"wlabel.exe", L"%systemroot%\\SysWOW64\\label.exe", NULL},
    {NULL, L"%systemroot%\\system32\\langwrbk.dll", NULL},
    {L"wlangwrbk.dll", L"%systemroot%\\SysWOW64\\langwrbk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\licmgr10.dll", NULL},
    {L"wlicmgr10.dll", L"%systemroot%\\SysWOW64\\licmgr10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\linkinfo.dll", NULL},
    {L"wlinkinfo.dll", L"%systemroot%\\SysWOW64\\linkinfo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\LIT220P.SYS", NULL},
    {NULL, L"%systemroot%\\system32\\lmhsvc.dll", NULL},
    {L"wlmhsvc.dll", L"%systemroot%\\SysWOW64\\lmhsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lmmib2.dll", NULL},
    {L"wlmmib2.dll", L"%systemroot%\\SysWOW64\\lmmib2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lmrt.dll", NULL},
    {L"wlmrt.dll", L"%systemroot%\\SysWOW64\\lmrt.dll", NULL},
    {L"wlnkstub.exe", L"%systemroot%\\SysWOW64\\lnkstub.exe", NULL},
    {NULL, L"%systemroot%\\system32\\loadperf.dll", NULL},
    {L"wloadperf.dll", L"%systemroot%\\SysWOW64\\loadperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\locale.nls", NULL},
    {L"wlocale.nls", L"%systemroot%\\SysWOW64\\locale.nls", NULL},
    {NULL, L"%systemroot%\\system32\\localsec.dll", NULL},
    {L"wlocalsec.dll", L"%systemroot%\\SysWOW64\\localsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\localspl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\localui.dll", NULL},
    {L"wlocalui.dll", L"%systemroot%\\SysWOW64\\localui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\locator.exe", NULL},
    {L"wlocator.exe", L"%systemroot%\\SysWOW64\\locator.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lodctr.exe", NULL},
    {L"wlodctr.exe", L"%systemroot%\\SysWOW64\\lodctr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\loghours.dll", NULL},
    {L"wloghours.dll", L"%systemroot%\\SysWOW64\\loghours.dll", NULL},
    {NULL, L"%systemroot%\\system32\\logoff.exe", NULL},
    {NULL, L"%systemroot%\\system32\\logon.scr", NULL},
    {NULL, L"%systemroot%\\system32\\logonui.exe", NULL},
    {L"wlogonui.exe", L"%systemroot%\\SysWOW64\\logonui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\loop.sys", NULL},
    {NULL, L"%systemroot%\\system32\\lpdsvc.dll", NULL},
    {L"wlpdsvc.dll", L"%systemroot%\\SysWOW64\\lpdsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lpk.dll", NULL},
    {L"wlpk.dll", L"%systemroot%\\SysWOW64\\lpk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lpq.exe", NULL},
    {L"wlpq.exe", L"%systemroot%\\SysWOW64\\lpq.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lpr.exe", NULL},
    {L"wlpr.exe", L"%systemroot%\\SysWOW64\\lpr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\lprhelp.dll", NULL},
    {L"wlprhelp.dll", L"%systemroot%\\SysWOW64\\lprhelp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lprmon.dll", NULL},
    {L"wlprmon.dll", L"%systemroot%\\SysWOW64\\lprmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lprmonui.dll", NULL},
    {L"wlprmonui.dll", L"%systemroot%\\SysWOW64\\lprmonui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\lsass.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ltotape.sys", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\Lexicon\\1033\\ltts1033.lxa", NULL},
    {NULL, L"%systemroot%\\system32\\lz32.dll", NULL},
    {L"wlz32.dll", L"%systemroot%\\SysWOW64\\lz32.dll", NULL},
    {L"wlzexpand.dll", L"%systemroot%\\SysWOW64\\lzexpand.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mag_hook.dll", NULL},
    {L"wmag_hook.dll", L"%systemroot%\\SysWOW64\\mag_hook.dll", NULL},
    {NULL, L"%systemroot%\\system32\\magnify.exe", NULL},
    {L"wmagnify.exe", L"%systemroot%\\SysWOW64\\magnify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\mailmsg.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\main.cpl", NULL},
    {L"wmain.cpl", L"%systemroot%\\SysWOW64\\main.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\makecab.exe", NULL},
    {L"wmakecab.exe", L"%systemroot%\\SysWOW64\\makecab.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mammoth.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mcastmib.dll", NULL},
    {L"wmcastmib.dll", L"%systemroot%\\SysWOW64\\mcastmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mcd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mcd32.dll", NULL},
    {L"wmcd32.dll", L"%systemroot%\\SysWOW64\\mcd32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcdsrv32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mchgrcoi.dll", NULL},
    {L"wmchgrcoi.dll", L"%systemroot%\\SysWOW64\\mchgrcoi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciavi.drv", NULL},
    {L"wmciavi.drv", L"%systemroot%\\SysWOW64\\mciavi.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mciavi32.dll", NULL},
    {L"wmciavi32.dll", L"%systemroot%\\SysWOW64\\mciavi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mcicda.dll", NULL},
    {L"wmcicda.dll", L"%systemroot%\\SysWOW64\\mcicda.dll", NULL},
    {L"wmciole16.dll", L"%systemroot%\\SysWOW64\\mciole16.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciole32.dll", NULL},
    {L"wmciole32.dll", L"%systemroot%\\SysWOW64\\mciole32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciqtz32.dll", NULL},
    {L"wmciqtz32.dll", L"%systemroot%\\SysWOW64\\mciqtz32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciseq.dll", NULL},
    {L"wmciseq.dll", L"%systemroot%\\SysWOW64\\mciseq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciseq.drv", NULL},
    {L"wmciseq.drv", L"%systemroot%\\SysWOW64\\mciseq.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mciwave.dll", NULL},
    {L"wmciwave.dll", L"%systemroot%\\SysWOW64\\mciwave.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mciwave.drv", NULL},
    {L"wmciwave.drv", L"%systemroot%\\SysWOW64\\mciwave.drv", NULL},
    {NULL, L"%systemroot%\\system32\\mdhcp.dll", NULL},
    {L"wmdhcp.dll", L"%systemroot%\\SysWOW64\\mdhcp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mdminst.dll", NULL},
    {L"wmdminst.dll", L"%systemroot%\\SysWOW64\\mdminst.dll", NULL},
    {L"wmdwmdmsp.dll", L"%systemroot%\\SysWOW64\\mdwmdmsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\memcard.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mf.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mf3216.dll", NULL},
    {L"wmf3216.dll", L"%systemroot%\\SysWOW64\\mf3216.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mfc42u.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mgmtapi.dll", NULL},
    {L"wmgmtapi.dll", L"%systemroot%\\SysWOW64\\mgmtapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\midimap.dll", NULL},
    {L"wmidimap.dll", L"%systemroot%\\SysWOW64\\midimap.dll", NULL},
    {L"wmigisol.exe", L"%systemroot%\\SysWOW64\\migisol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\miglibnt.dll", NULL},
    {L"wmiglibnt.dll", L"%systemroot%\\SysWOW64\\miglibnt.dll", NULL},
    {L"wmigpwd.exe", L"%systemroot%\\SysWOW64\\migpwd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\migregdb.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mimefilt.dll", NULL},
    {L"wmimefilt.dll", L"%systemroot%\\SysWOW64\\mimefilt.dll", NULL},
    {L"wmindex.dll", L"%systemroot%\\SysWOW64\\mindex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\miniqic.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mlang.dat", NULL},
    {L"wmlang.dat", L"%systemroot%\\SysWOW64\\mlang.dat", NULL},
    {NULL, L"%systemroot%\\system32\\mlang.dll", NULL},
    {L"wmlang.dll", L"%systemroot%\\SysWOW64\\mlang.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_hp.dll", NULL},
    {L"wmll_hp.dll", L"%systemroot%\\SysWOW64\\mll_hp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_mtf.dll", NULL},
    {L"wmll_mtf.dll", L"%systemroot%\\SysWOW64\\mll_mtf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mll_qic.dll", NULL},
    {L"wmll_qic.dll", L"%systemroot%\\SysWOW64\\mll_qic.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmc.exe", NULL},
    {L"wmmc.exe", L"%systemroot%\\SysWOW64\\mmc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mmcbase.dll", NULL},
    {L"wmmcbase.dll", L"%systemroot%\\SysWOW64\\mmcbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmcndmgr.dll", NULL},
    {L"wmmcndmgr.dll", L"%systemroot%\\SysWOW64\\mmcndmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmcshext.dll", NULL},
    {L"wmmcshext.dll", L"%systemroot%\\SysWOW64\\mmcshext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmfutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmsys.cpl", NULL},
    {L"wmmsys.cpl", L"%systemroot%\\SysWOW64\\mmsys.cpl", NULL},
    {L"wmmsystem.dll", L"%systemroot%\\SysWOW64\\mmsystem.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mmutilse.dll", NULL},
    {L"wmmutilse.dll", L"%systemroot%\\SysWOW64\\mmutilse.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mobsync.dll", NULL},
    {L"wmobsync.dll", L"%systemroot%\\SysWOW64\\mobsync.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mobsync.exe", NULL},
    {L"wmobsync.exe", L"%systemroot%\\SysWOW64\\mobsync.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\modem.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\MODEMCSA.sys", NULL},
    {NULL, L"%systemroot%\\system32\\modemui.dll", NULL},
    {L"wmodemui.dll", L"%systemroot%\\SysWOW64\\modemui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\modex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\mofcomp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\mofd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\moricons.dll", NULL},
    {L"wmoricons.dll", L"%systemroot%\\SysWOW64\\moricons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mouclass.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mouhid.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mountmgr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mountvol.exe", NULL},
    {L"wmountvol.exe", L"%systemroot%\\SysWOW64\\mountvol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpg2splt.ax", NULL},
    {L"wmpg2splt.ax", L"%systemroot%\\SysWOW64\\mpg2splt.ax", NULL},
    {L"wmpg4dmod.dll", L"%systemroot%\\SysWOW64\\mpg4dmod.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mplay32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpnotify.exe", NULL},
    {L"wmpnotify.exe", L"%systemroot%\\SysWOW64\\mpnotify.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mpr.dll", NULL},
    {L"wmpr.dll", L"%systemroot%\\SysWOW64\\mpr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprapi.dll", NULL},
    {L"wmprapi.dll", L"%systemroot%\\SysWOW64\\mprapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprddm.dll", NULL},
    {L"wmprddm.dll", L"%systemroot%\\SysWOW64\\mprddm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprdim.dll", NULL},
    {L"wmprdim.dll", L"%systemroot%\\SysWOW64\\mprdim.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprmsg.dll", NULL},
    {L"wmprmsg.dll", L"%systemroot%\\SysWOW64\\mprmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mprui.dll", NULL},
    {L"wmprui.dll", L"%systemroot%\\SysWOW64\\mprui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mraid35x.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mrinfo.exe", NULL},
    {L"wmrinfo.exe", L"%systemroot%\\SysWOW64\\mrinfo.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mrxdav.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mrxsmb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msaatext.dll", NULL},
    {L"wmsaatext.dll", L"%systemroot%\\SysWOW64\\msaatext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msacm.dll", NULL},
    {L"wmsacm.dll", L"%systemroot%\\SysWOW64\\msacm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msacm32.dll", NULL},
    {L"wmsacm32.dll", L"%systemroot%\\SysWOW64\\msacm32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado25.tlb", NULL},
    {L"wmsado25.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado25.tlb", NULL},
    {NULL, L"%commonprogramfiles%\\System\\ado\\msado26.tlb", NULL},
    {L"wmsado26.tlb", L"%commonprogramfiles(x86)%\\System\\ado\\msado26.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\msafd.dll", NULL},
    {L"wmsafd.dll", L"%systemroot%\\SysWOW64\\msafd.dll", NULL},
    {L"wmsapsspc.dll", L"%systemroot%\\SysWOW64\\msapsspc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msasn1.dll", NULL},
    {L"wmsasn1.dll", L"%systemroot%\\SysWOW64\\msasn1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msaudite.dll", NULL},
    {L"wmsaudite.dll", L"%systemroot%\\SysWOW64\\msaudite.dll", NULL},
    {NULL, L"%systemroot%\\ime\\mscandui.dll", NULL},
    {L"wmscandui.dll", L"%systemroot%\\ime (x86)\\mscandui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mscat32.dll", NULL},
    {L"wmscat32.dll", L"%systemroot%\\SysWOW64\\mscat32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mscms.dll", NULL},
    {L"wmscms.dll", L"%systemroot%\\SysWOW64\\mscms.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\msconfig.exe", NULL},
    {L"wmscpx32r.dLL", L"%systemroot%\\SysWOW64\\mscpx32r.dLL", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTF.dll", NULL},
    {L"wMSCTF.dll", L"%systemroot%\\SysWOW64\\MSCTF.dll", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTFIME.IME", NULL},
    {L"wMSCTFIME.IME", L"%systemroot%\\SysWOW64\\MSCTFIME.IME", NULL},
    {NULL, L"%systemroot%\\system32\\MSCTFP.dll", NULL},
    {L"wMSCTFP.dll", L"%systemroot%\\SysWOW64\\MSCTFP.dll", NULL},
    {L"wmsdaorar.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdaorar.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdart.dll", NULL},
    {L"wmsdart.dll", L"%systemroot%\\SysWOW64\\msdart.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\msdatl3.dll", NULL},
    {L"wmsdatl3.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\msdatl3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdmo.dll", NULL},
    {L"wmsdmo.dll", L"%systemroot%\\SysWOW64\\msdmo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msdtclog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtcprx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\msdtcstp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtctm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdtcuiu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msdvbnp.ax", NULL},
    {L"wmsdvbnp.ax", L"%systemroot%\\SysWOW64\\msdvbnp.ax", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msftedit.dll", NULL},
    {L"wmsftedit.dll", L"%systemroot%\\SysWOW64\\msftedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msgina.dll", NULL},
    {L"wmsgina.dll", L"%systemroot%\\SysWOW64\\msgina.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msgpc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msgsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshearts.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mshta.exe", NULL},
    {L"wmshta.exe", L"%systemroot%\\SysWOW64\\mshta.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mshtml.dll", NULL},
    {L"wmshtml.dll", L"%systemroot%\\SysWOW64\\mshtml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshtml.tlb", NULL},
    {L"wmshtml.tlb", L"%systemroot%\\SysWOW64\\mshtml.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mshtmled.dll", NULL},
    {L"wmshtmled.dll", L"%systemroot%\\SysWOW64\\mshtmled.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mshtmler.dll", NULL},
    {L"wmshtmler.dll", L"%systemroot%\\SysWOW64\\mshtmler.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msi.dll", NULL},
    {L"wmsi.dll", L"%systemroot%\\SysWOW64\\msi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msident.dll", NULL},
    {L"wmsident.dll", L"%systemroot%\\SysWOW64\\msident.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msidle.dll", NULL},
    {L"wmsidle.dll", L"%systemroot%\\SysWOW64\\msidle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msidntld.dll", NULL},
    {L"wmsidntld.dll", L"%systemroot%\\SysWOW64\\msidntld.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msieftp.dll", NULL},
    {L"wmsieftp.dll", L"%systemroot%\\SysWOW64\\msieftp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msiexec.exe", NULL},
    {L"wmsiexec.exe", L"%systemroot%\\SysWOW64\\msiexec.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msihnd.dll", NULL},
    {L"wmsihnd.dll", L"%systemroot%\\SysWOW64\\msihnd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msimg32.dll", NULL},
    {L"wmsimg32.dll", L"%systemroot%\\SysWOW64\\msimg32.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msimn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\msimsg.dll", NULL},
    {L"wmsimsg.dll", L"%systemroot%\\SysWOW64\\msimsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\MSIMTF.dll", NULL},
    {L"wMSIMTF.dll", L"%systemroot%\\SysWOW64\\MSIMTF.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\msinfo.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\MSInfo\\msinfo32.exe", NULL},
    {L"wmsinfo32.exe", L"%commonprogramfiles(x86)%\\Microsoft Shared\\MSInfo\\msinfo32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\msiprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msir3jp.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\msir3jp.lex", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\msiregmv.exe", NULL},
    {L"wmsiregmv.exe", L"%systemroot%\\SysWOW64\\msiregmv.exe", NULL},
    {L"wmsisam11.dll", L"%systemroot%\\SysWOW64\\msisam11.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msisip.dll", NULL},
    {L"wmsisip.dll", L"%systemroot%\\SysWOW64\\msisip.dll", NULL},
    {L"wmsjetol1.dll", L"%systemroot%\\SysWOW64\\msjetoledb40.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mskssrv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mslbui.dll", NULL},
    {L"wmslbui.dll", L"%systemroot%\\SysWOW64\\mslbui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msls31.dll", NULL},
    {L"wmsls31.dll", L"%systemroot%\\SysWOW64\\msls31.dll", NULL},
    {NULL, L"%systemroot%\\msagent64\\mslwvtts.dll", NULL},
    {L"wmslwvtts.dll", L"%systemroot%\\msagent\\mslwvtts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\msmpu401.sys", NULL},
    {L"wmsnetobj.dll", L"%systemroot%\\SysWOW64\\msnetobj.dll", NULL},
    {L"wmsnsspc.dll", L"%systemroot%\\SysWOW64\\msnsspc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msobjs.dll", NULL},
    {L"wmsobjs.dll", L"%systemroot%\\SysWOW64\\msobjs.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msoe.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msoeacct.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\msoeres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msoert2.dll", NULL},
    {L"wmsorc32r.dll", L"%systemroot%\\SysWOW64\\msorc32r.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mspaint.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mspatcha.dll", NULL},
    {L"wmspatcha.dll", L"%systemroot%\\SysWOW64\\mspatcha.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mspclock.sys", NULL},
    {L"wmspmsp.dll", L"%systemroot%\\SysWOW64\\mspmsp.dll", NULL},
    {L"wmspmspsv.dll", L"%systemroot%\\SysWOW64\\mspmspsv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msports.dll", NULL},
    {L"wmsports.dll", L"%systemroot%\\SysWOW64\\msports.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\mspqm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\msprivs.dll", NULL},
    {L"wmsprivs.dll", L"%systemroot%\\SysWOW64\\msprivs.dll", NULL},
    {L"wmsr2c.dll", L"%systemroot%\\SysWOW64\\msr2c.dll", NULL},
    {L"wmsr2cenu.dll", L"%systemroot%\\SysWOW64\\msr2cenu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msratelc.dll", NULL},
    {L"wmsratelc.dll", L"%systemroot%\\SysWOW64\\msratelc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msrating.dll", NULL},
    {L"wmsrating.dll", L"%systemroot%\\SysWOW64\\msrating.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msrle32.dll", NULL},
    {L"wmsrle32.dll", L"%systemroot%\\SysWOW64\\msrle32.dll", NULL},
    {L"wmssap.dll", L"%systemroot%\\SysWOW64\\mssap.dll", NULL},
    {L"wmsscds32.ax", L"%systemroot%\\SysWOW64\\msscds32.ax", NULL},
    {L"wmsscp.dll", L"%systemroot%\\SysWOW64\\msscp.dll", NULL},
    {L"wmsscript.ocx", L"%systemroot%\\SysWOW64\\msscript.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\mssign32.dll", NULL},
    {L"wmssign32.dll", L"%systemroot%\\SysWOW64\\mssign32.dll", NULL},
    {L"wmssoap1.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\mssoap1.dll", NULL},
    {L"wmssoapr.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\Resources\\1033\\mssoapr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msswch.dll", NULL},
    {L"wmsswch.dll", L"%systemroot%\\SysWOW64\\msswch.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msswchx.exe", NULL},
    {L"wmsswchx.exe", L"%systemroot%\\SysWOW64\\msswchx.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstask.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\MSTEE.sys", NULL},
    {NULL, L"%systemroot%\\system32\\mstime.dll", NULL},
    {L"wmstime.dll", L"%systemroot%\\SysWOW64\\mstime.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstlsapi.dll", NULL},
    {L"wmstlsapi.dll", L"%systemroot%\\SysWOW64\\mstlsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mstsc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mstscax.dll", NULL},
    {L"wmsuni11.dll", L"%systemroot%\\SysWOW64\\msuni11.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msutb.dll", NULL},
    {L"wmsutb.dll", L"%systemroot%\\SysWOW64\\msutb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msv1_0.dll", NULL},
    {L"wmsv1_0.dll", L"%systemroot%\\SysWOW64\\msv1_0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcirt.dll", NULL},
    {L"wmsvcirt.dll", L"%systemroot%\\SysWOW64\\msvcirt.dll", NULL},
    {L"wmsvcp50.dll", L"%systemroot%\\SysWOW64\\msvcp50.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvcp60.dll", NULL},
    {L"wmsvcp60.dll", L"%systemroot%\\SysWOW64\\msvcp60.dll", NULL},
    {L"wmsvcrt20.dll", L"%systemroot%\\SysWOW64\\msvcrt20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvfw32.dll", NULL},
    {L"wmsvfw32.dll", L"%systemroot%\\SysWOW64\\msvfw32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvidc32.dll", NULL},
    {L"wmsvidc32.dll", L"%systemroot%\\SysWOW64\\msvidc32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvidctl.dll", NULL},
    {L"wmsvidctl.dll", L"%systemroot%\\SysWOW64\\msvidctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msvideo.dll", NULL},
    {L"wmsvideo.dll", L"%systemroot%\\SysWOW64\\msvideo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msw3prt.dll", NULL},
    {L"wmsw3prt.dll", L"%systemroot%\\SysWOW64\\msw3prt.dll", NULL},
    {L"wmswebdvd.dll", L"%systemroot%\\SysWOW64\\mswebdvd.dll", NULL},
    {L"wmswmdm.dll", L"%systemroot%\\SysWOW64\\mswmdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mswsock.dll", NULL},
    {L"wmswsock.dll", L"%systemroot%\\SysWOW64\\mswsock.dll", NULL},
    {L"wmsxml.dll", L"%systemroot%\\SysWOW64\\msxml.dll", NULL},
    {L"wmsxml2.dll", L"%systemroot%\\SysWOW64\\msxml2.dll", NULL},
    {L"wmsxml2r.dll", L"%systemroot%\\SysWOW64\\msxml2r.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxml3.dll", NULL},
    {L"wmsxml3.dll", L"%systemroot%\\SysWOW64\\msxml3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxml3r.dll", NULL},
    {L"wmsxml3r.dll", L"%systemroot%\\SysWOW64\\msxml3r.dll", NULL},
    {L"wmsxmlr.dll", L"%systemroot%\\SysWOW64\\msxmlr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msxs64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\msyuv.dll", NULL},
    {L"wmsyuv.dll", L"%systemroot%\\SysWOW64\\msyuv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Com\\mtsadmin.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\mtstocom.exe", NULL},
    {L"wmtstocom.exe", L"%systemroot%\\SysWOW64\\mtstocom.exe", NULL},
    {NULL, L"%systemroot%\\system32\\mtxclu.dll", NULL},
    {L"wmtxclu.dll", L"%systemroot%\\SysWOW64\\mtxclu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mtxoci.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\multibox.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\mup.sys", NULL},
    {L"wmxicfg.dll", L"%systemroot%\\SysWOW64\\mxicfg.dll", NULL},
    {L"wmxport.dll", L"%systemroot%\\SysWOW64\\mxport.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mycomput.dll", NULL},
    {L"wmycomput.dll", L"%systemroot%\\SysWOW64\\mycomput.dll", NULL},
    {NULL, L"%systemroot%\\system32\\mydocs.dll", NULL},
    {L"wmydocs.dll", L"%systemroot%\\SysWOW64\\mydocs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\narrator.exe", NULL},
    {L"wnarrator.exe", L"%systemroot%\\SysWOW64\\narrator.exe", NULL},
    {NULL, L"%systemroot%\\system32\\narrhook.dll", NULL},
    {L"wnarrhook.dll", L"%systemroot%\\SysWOW64\\narrhook.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nbtstat.exe", NULL},
    {L"wnbtstat.exe", L"%systemroot%\\SysWOW64\\nbtstat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ncobjapi.dll", NULL},
    {L"wncobjapi.dll", L"%systemroot%\\SysWOW64\\ncobjapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ncpa.cpl", NULL},
    {L"wncpa.cpl", L"%systemroot%\\SysWOW64\\ncpa.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\ncprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nddeapi.dll", NULL},
    {L"wnddeapi.dll", L"%systemroot%\\SysWOW64\\nddeapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nddeapir.exe", NULL},
    {L"wnddeapir.exe", L"%systemroot%\\SysWOW64\\nddeapir.exe", NULL},
    {NULL, L"%systemroot%\\system32\\nddenb32.dll", NULL},
    {L"wnddenb32.dll", L"%systemroot%\\SysWOW64\\nddenb32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndis.sys", NULL},
    {NULL, L"%systemroot%\\system32\\npp\\ndisnpp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndistapi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndisuio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ndproxy.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ndptsp.tsp", NULL},
    {L"wndptsp.tsp", L"%systemroot%\\SysWOW64\\ndptsp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ne2000.sys", NULL},
    {NULL, L"%systemroot%\\system32\\net.exe", NULL},
    {L"wnet.exe", L"%systemroot%\\SysWOW64\\net.exe", NULL},
    {NULL, L"%systemroot%\\system32\\net1.exe", NULL},
    {L"wnet1.exe", L"%systemroot%\\SysWOW64\\net1.exe", NULL},
    {L"wnetapi.dll", L"%systemroot%\\SysWOW64\\netapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\netbios.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\netbt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\netcfgx.dll", NULL},
    {L"wnetcfgx.dll", L"%systemroot%\\SysWOW64\\netcfgx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netdde.exe", NULL},
    {L"wnetdde.exe", L"%systemroot%\\SysWOW64\\netdde.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netevent.dll", NULL},
    {L"wnetevent.dll", L"%systemroot%\\SysWOW64\\netevent.dll", NULL},
    {NULL, L"%systemroot%\\system32\\neth.dll", NULL},
    {L"wneth.dll", L"%systemroot%\\SysWOW64\\neth.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netid.dll", NULL},
    {L"wnetid.dll", L"%systemroot%\\SysWOW64\\netid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netlogon.dll", NULL},
    {L"wnetlogon.dll", L"%systemroot%\\SysWOW64\\netlogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netmsg.dll", NULL},
    {L"wnetmsg.dll", L"%systemroot%\\SysWOW64\\netmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\netoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netplwiz.dll", NULL},
    {L"wnetplwiz.dll", L"%systemroot%\\SysWOW64\\netplwiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netrap.dll", NULL},
    {L"wnetrap.dll", L"%systemroot%\\SysWOW64\\netrap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netsh.exe", NULL},
    {L"wnetsh.exe", L"%systemroot%\\SysWOW64\\netsh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netshell.dll", NULL},
    {L"wnetshell.dll", L"%systemroot%\\SysWOW64\\netshell.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netstat.exe", NULL},
    {L"wnetstat.exe", L"%systemroot%\\SysWOW64\\netstat.exe", NULL},
    {NULL, L"%systemroot%\\system32\\netui0.dll", NULL},
    {L"wnetui0.dll", L"%systemroot%\\SysWOW64\\netui0.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netui1.dll", NULL},
    {L"wnetui1.dll", L"%systemroot%\\SysWOW64\\netui1.dll", NULL},
    {NULL, L"%systemroot%\\system32\\netui2.dll", NULL},
    {L"wnetui2.dll", L"%systemroot%\\SysWOW64\\netui2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\newdev.dll", NULL},
    {L"wnewdev.dll", L"%systemroot%\\SysWOW64\\newdev.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nic1394.sys", NULL},
    {NULL, L"%systemroot%\\system32\\nlhtml.dll", NULL},
    {L"wnlhtml.dll", L"%systemroot%\\SysWOW64\\nlhtml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nmnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\notepad.exe", NULL},
    {L"wnotepad.exe", L"%systemroot%\\SysWOW64\\notepad.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\npfs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\npp\\nppagent.exe", NULL},
    {NULL, L"%systemroot%\\system32\\npptools.dll", NULL},
    {L"wnpptools.dll", L"%systemroot%\\SysWOW64\\npptools.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nshipsec.dll", NULL},
    {L"wnshipsec.dll", L"%systemroot%\\SysWOW64\\nshipsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\nslookup.exe", NULL},
    {L"wnslookup.exe", L"%systemroot%\\SysWOW64\\nslookup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\nsmmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\ntdsapi.dll", NULL},
    {L"wntdsapi.dll", L"%systemroot%\\SysWOW64\\ntdsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\ntevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\ntfsdrv.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\ntlanman.dll", NULL},
    {L"wntlanman.dll", L"%systemroot%\\SysWOW64\\ntlanman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlanui.dll", NULL},
    {L"wntlanui.dll", L"%systemroot%\\SysWOW64\\ntlanui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlanui2.dll", NULL},
    {L"wntlanui2.dll", L"%systemroot%\\SysWOW64\\ntlanui2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntlsapi.dll", NULL},
    {L"wntlsapi.dll", L"%systemroot%\\SysWOW64\\ntlsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmarta.dll", NULL},
    {L"wntmarta.dll", L"%systemroot%\\SysWOW64\\ntmarta.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsapi.dll", NULL},
    {L"wntmsapi.dll", L"%systemroot%\\SysWOW64\\ntmsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsdba.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsevt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmsmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntmssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\ntoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntprint.dll", NULL},
    {L"wntprint.dll", L"%systemroot%\\SysWOW64\\ntprint.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntsd.exe", NULL},
    {L"wntsd.exe", L"%systemroot%\\SysWOW64\\ntsd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ntshrui.dll", NULL},
    {L"wntshrui.dll", L"%systemroot%\\SysWOW64\\ntshrui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ntvdm64.dll", NULL},
    {L"wntvdm64.dll", L"%systemroot%\\SysWOW64\\ntvdm64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\null.sys", NULL},
    {NULL, L"%systemroot%\\system32\\nusrmgr.cpl", NULL},
    {L"wnusrmgr.cpl", L"%systemroot%\\SysWOW64\\nusrmgr.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\oakley.dll", NULL},
    {L"woakley.dll", L"%systemroot%\\SysWOW64\\oakley.dll", NULL},
    {NULL, L"%systemroot%\\system32\\objsel.dll", NULL},
    {L"wobjsel.dll", L"%systemroot%\\SysWOW64\\objsel.dll", NULL},
    {NULL, L"%systemroot%\\system32\\occache.dll", NULL},
    {L"woccache.dll", L"%systemroot%\\SysWOW64\\occache.dll", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\ocgen.dll", NULL},
    {L"wodbc16gt.dll", L"%systemroot%\\SysWOW64\\odbc16gt.dll", NULL},
    {L"wodbcp32r.dll", L"%systemroot%\\SysWOW64\\odbcp32r.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oeimport.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oemig50.exe", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\oemiglib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\offfilt.dll", NULL},
    {L"wofffilt.dll", L"%systemroot%\\SysWOW64\\offfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ohci1394.sys", NULL},
    {L"wole2.dll", L"%systemroot%\\SysWOW64\\ole2.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleacc.dll", NULL},
    {L"woleacc.dll", L"%systemroot%\\SysWOW64\\oleacc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleaccrc.dll", NULL},
    {L"woleaccrc.dll", L"%systemroot%\\SysWOW64\\oleaccrc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olecli32.dll", NULL},
    {L"wolecli32.dll", L"%systemroot%\\SysWOW64\\olecli32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olecnv32.dll", NULL},
    {L"wolecnv32.dll", L"%systemroot%\\SysWOW64\\olecnv32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oledlg.dll", NULL},
    {L"woledlg.dll", L"%systemroot%\\SysWOW64\\oledlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\oleprn.dll", NULL},
    {L"woleprn.dll", L"%systemroot%\\SysWOW64\\oleprn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\olesvr32.dll", NULL},
    {L"wolesvr32.dll", L"%systemroot%\\SysWOW64\\olesvr32.dll", NULL},
    {L"wolethk32.dll", L"%systemroot%\\SysWOW64\\olethk32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\opengl32.dll", NULL},
    {L"wopengl32.dll", L"%systemroot%\\SysWOW64\\opengl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\oprghdlr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\osk.exe", NULL},
    {L"wosk.exe", L"%systemroot%\\SysWOW64\\osk.exe", NULL},
    {NULL, L"%systemroot%\\system32\\osuninst.dll", NULL},
    {L"wosuninst.dll", L"%systemroot%\\SysWOW64\\osuninst.dll", NULL},
    {L"wosuninst.exe", L"%systemroot%\\SysWOW64\\osuninst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\packager.exe", NULL},
    {L"wpackager.exe", L"%systemroot%\\SysWOW64\\packager.exe", NULL},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\PADRS404.DLL", L"intl.inf"},
    {L"wPADRS404.DLL", L"%systemroot%\\ime (x86)\\SHARED\\RES\\PADRS404.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs411.dll", L"intl.inf"},
    {L"wpadrs411.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs411.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs412.dll", L"intl.inf"},
    {L"wpadrs412.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs412.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\SHARED\\RES\\padrs804.dll", L"intl.inf"},
    {L"wpadrs804.dll", L"%systemroot%\\ime (x86)\\SHARED\\RES\\padrs804.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\panmap.dll", NULL},
    {L"wpanmap.dll", L"%systemroot%\\SysWOW64\\panmap.dll", NULL},
    {L"wpaqsp.dll", L"%systemroot%\\SysWOW64\\paqsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\partmgr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\pathping.exe", NULL},
    {L"wpathping.exe", L"%systemroot%\\SysWOW64\\pathping.exe", NULL},
    {NULL, L"%systemroot%\\system32\\pautoenr.dll", NULL},
    {L"wpautoenr.dll", L"%systemroot%\\SysWOW64\\pautoenr.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\pchshell.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\HelpCtr\\Binaries\\pchsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pciide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pciidex.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pcmcia.sys", NULL},
    {NULL, L"%systemroot%\\system32\\pdh.dll", NULL},
    {L"wpdh.dll", L"%systemroot%\\SysWOW64\\pdh.dll", NULL},
    {L"wpentnt.exe", L"%systemroot%\\SysWOW64\\pentnt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\perfctrs.dll", NULL},
    {L"wperfctrs.dll", L"%systemroot%\\SysWOW64\\perfctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfdisk.dll", NULL},
    {L"wperfdisk.dll", L"%systemroot%\\SysWOW64\\perfdisk.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfmon.exe", NULL},
    {L"wperfmon.exe", L"%systemroot%\\SysWOW64\\perfmon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\perfnet.dll", NULL},
    {L"wperfnet.dll", L"%systemroot%\\SysWOW64\\perfnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfos.dll", NULL},
    {L"wperfos.dll", L"%systemroot%\\SysWOW64\\perfos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfproc.dll", NULL},
    {L"wperfproc.dll", L"%systemroot%\\SysWOW64\\perfproc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\perfts.dll", NULL},
    {L"wperfts.dll", L"%systemroot%\\SysWOW64\\perfts.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\perm2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\perm2dll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\perm3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\perm3dd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\PhilDec.sys", NULL},
    {NULL, L"%systemroot%\\system32\\phon.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\photowiz.dll", NULL},
    {L"wphotowiz.dll", L"%systemroot%\\SysWOW64\\photowiz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pid.dll", NULL},
    {L"wpid.dll", L"%systemroot%\\SysWOW64\\pid.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pidgen.dll", NULL},
    {L"wpidgen.dll", L"%systemroot%\\SysWOW64\\pidgen.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pifmgr.dll", NULL},
    {L"wpifmgr.dll", L"%systemroot%\\SysWOW64\\pifmgr.dll", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\Pinball\\PINBALL.EXE", NULL},
    {NULL, L"%systemroot%\\system32\\ping.exe", NULL},
    {L"wping.exe", L"%systemroot%\\SysWOW64\\ping.exe", NULL},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSA.DLL", L"intl.inf"},
    {L"wPINTLCSA.DLL", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSA.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSD.DIC", L"intl.inf"},
    {L"wPINTLCSD.DIC", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSD.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSD.DLL", L"intl.inf"},
    {L"wPINTLCSD.DLL", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSD.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\CHSIME\\APPLETS\\PINTLCSK.DIC", L"intl.inf"},
    {L"wPINTLCSK.DIC", L"%systemroot%\\ime (x86)\\CHSIME\\APPLETS\\PINTLCSK.DIC", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGD.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGDX.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGI.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGIX.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\PINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGR.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PINTLPHR.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\pjlmon.dll", NULL},
    {L"wpjlmon.dll", L"%systemroot%\\SysWOW64\\pjlmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\plugin.ocx", NULL},
    {L"wplugin.ocx", L"%systemroot%\\SysWOW64\\plugin.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\PINTLGNT\\PMIGRATE.DLL", L"intl.inf"},
    {L"wpmspl.dll", L"%systemroot%\\SysWOW64\\pmspl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pngfilt.dll", NULL},
    {L"wpngfilt.dll", L"%systemroot%\\SysWOW64\\pngfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pnrmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\polstore.dll", NULL},
    {L"wpolstore.dll", L"%systemroot%\\SysWOW64\\polstore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\portcls.sys", NULL},
    {NULL, L"%systemroot%\\system32\\powercfg.cpl", NULL},
    {L"wpowercfg.cpl", L"%systemroot%\\SysWOW64\\powercfg.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\powerfil.sys", NULL},
    {NULL, L"%systemroot%\\system32\\powrprof.dll", NULL},
    {L"wpowrprof.dll", L"%systemroot%\\SysWOW64\\powrprof.dll", NULL},
    {NULL, L"%systemroot%\\system32\\prc.nls", NULL},
    {NULL, L"%systemroot%\\system32\\prcp.nls", NULL},
    {NULL, L"%systemroot%\\system32\\prflbmsg.dll", NULL},
    {L"wprflbmsg.dll", L"%systemroot%\\SysWOW64\\prflbmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\print.exe", NULL},
    {L"wprint.exe", L"%systemroot%\\SysWOW64\\print.exe", NULL},
    {NULL, L"%systemroot%\\system32\\printui.dll", NULL},
    {L"wprintui.dll", L"%systemroot%\\SysWOW64\\printui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\processr.sys", NULL},
    {L"wproctexe.ocx", L"%systemroot%\\SysWOW64\\proctexe.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\profmap.dll", NULL},
    {L"wprofmap.dll", L"%systemroot%\\SysWOW64\\profmap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\progman.exe", NULL},
    {L"wprogman.exe", L"%systemroot%\\SysWOW64\\progman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\proquota.exe", NULL},
    {L"wproquota.exe", L"%systemroot%\\SysWOW64\\proquota.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\provthrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\proxycfg.exe", NULL},
    {L"wproxycfg.exe", L"%systemroot%\\SysWOW64\\proxycfg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\psapi.dll", NULL},
    {L"wpsapi.dll", L"%systemroot%\\SysWOW64\\psapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\psbase.dll", NULL},
    {L"wpsbase.dll", L"%systemroot%\\SysWOW64\\psbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pschdprf.dll", NULL},
    {L"wpschdprf.dll", L"%systemroot%\\SysWOW64\\pschdprf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\psched.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\pscr.sys", NULL},
    {L"wpsisdecd.dll", L"%systemroot%\\SysWOW64\\psisdecd.dll", NULL},
    {L"wpsisrndr.ax", L"%systemroot%\\SysWOW64\\psisrndr.ax", NULL},
    {NULL, L"%systemroot%\\system32\\psnppagn.dll", NULL},
    {L"wpsnppagn.dll", L"%systemroot%\\SysWOW64\\psnppagn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pstorec.dll", NULL},
    {L"wpstorec.dll", L"%systemroot%\\SysWOW64\\pstorec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pstorsvc.dll", NULL},
    {L"wpstorsvc.dll", L"%systemroot%\\SysWOW64\\pstorsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ptilink.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ptpusd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\pubprn.vbs", NULL},
    {NULL, L"%systemroot%\\system32\\qappsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\qasf.dll", NULL},
    {L"wqasf.dll", L"%systemroot%\\SysWOW64\\qasf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qcap.dll", NULL},
    {L"wqcap.dll", L"%systemroot%\\SysWOW64\\qcap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qdv.dll", NULL},
    {L"wqdv.dll", L"%systemroot%\\SysWOW64\\qdv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qdvd.dll", NULL},
    {L"wqdvd.dll", L"%systemroot%\\SysWOW64\\qdvd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qedit.dll", NULL},
    {L"wqedit.dll", L"%systemroot%\\SysWOW64\\qedit.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qedwipes.dll", NULL},
    {L"wqedwipes.dll", L"%systemroot%\\SysWOW64\\qedwipes.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\qic157.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1080.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql10wnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql12160.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1240.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ql1280.sys", NULL},
    {NULL, L"%systemroot%\\system32\\qmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qmgrprxy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qosname.dll", NULL},
    {L"wqosname.dll", L"%systemroot%\\SysWOW64\\qosname.dll", NULL},
    {NULL, L"%systemroot%\\system32\\qprocess.exe", NULL},
    {NULL, L"%systemroot%\\system32\\quartz.dll", NULL},
    {L"wquartz.dll", L"%systemroot%\\SysWOW64\\quartz.dll", NULL},
    {NULL, L"%systemroot%\\system32\\query.dll", NULL},
    {L"wquery.dll", L"%systemroot%\\SysWOW64\\query.dll", NULL},
    {NULL, L"%systemroot%\\system32\\query.exe", NULL},
    {NULL, L"%systemroot%\\system32\\quick.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\quser.exe", NULL},
    {NULL, L"%systemroot%\\system32\\qwinsta.exe", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\Lexicon\\1033\\r1033tts.lxa", NULL},
    {NULL, L"%systemroot%\\system32\\racpldlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ramdisk.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rasacd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasadhlp.dll", NULL},
    {L"wrasadhlp.dll", L"%systemroot%\\SysWOW64\\rasadhlp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasapi32.dll", NULL},
    {L"wrasapi32.dll", L"%systemroot%\\SysWOW64\\rasapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasauto.dll", NULL},
    {L"wrasauto.dll", L"%systemroot%\\SysWOW64\\rasauto.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasautou.exe", NULL},
    {L"wrasautou.exe", L"%systemroot%\\SysWOW64\\rasautou.exe", NULL},
    {NULL, L"%systemroot%\\system32\\raschap.dll", NULL},
    {L"wraschap.dll", L"%systemroot%\\SysWOW64\\raschap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasctrs.dll", NULL},
    {L"wrasctrs.dll", L"%systemroot%\\SysWOW64\\rasctrs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasdial.exe", NULL},
    {L"wrasdial.exe", L"%systemroot%\\SysWOW64\\rasdial.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rasdlg.dll", NULL},
    {L"wrasdlg.dll", L"%systemroot%\\SysWOW64\\rasdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rasl2tp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasman.dll", NULL},
    {L"wrasman.dll", L"%systemroot%\\SysWOW64\\rasman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmans.dll", NULL},
    {L"wrasmans.dll", L"%systemroot%\\SysWOW64\\rasmans.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmontr.dll", NULL},
    {L"wrasmontr.dll", L"%systemroot%\\SysWOW64\\rasmontr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasmxs.dll", NULL},
    {L"wrasmxs.dll", L"%systemroot%\\SysWOW64\\rasmxs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasphone.exe", NULL},
    {L"wrasphone.exe", L"%systemroot%\\SysWOW64\\rasphone.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rasppp.dll", NULL},
    {L"wrasppp.dll", L"%systemroot%\\SysWOW64\\rasppp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspppoe.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspptp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\raspti.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rasrad.dll", NULL},
    {L"wrasrad.dll", L"%systemroot%\\SysWOW64\\rasrad.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rassapi.dll", NULL},
    {L"wrassapi.dll", L"%systemroot%\\SysWOW64\\rassapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rasser.dll", NULL},
    {L"wrasser.dll", L"%systemroot%\\SysWOW64\\rasser.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rastapi.dll", NULL},
    {L"wrastapi.dll", L"%systemroot%\\SysWOW64\\rastapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rastls.dll", NULL},
    {L"wrastls.dll", L"%systemroot%\\SysWOW64\\rastls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rawwan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rcbdyctl.dll", NULL},
    {L"wrcbdyctl.dll", L"%systemroot%\\SysWOW64\\rcbdyctl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rcimlby.exe", NULL},
    {L"wrcimlby.exe", L"%systemroot%\\SysWOW64\\rcimlby.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rcp.exe", NULL},
    {L"wrcp.exe", L"%systemroot%\\SysWOW64\\rcp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdbss.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdchost.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpcdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpcfgex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rdpclip.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rdpdd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpdr.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpsnd.dll", NULL},
    {L"wrdpsnd.dll", L"%systemroot%\\SysWOW64\\rdpsnd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rdpwd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rdpwsx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rdsaddin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rdshost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\recover.exe", NULL},
    {L"wrecover.exe", L"%systemroot%\\SysWOW64\\recover.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\redbook.sys", NULL},
    {NULL, L"%systemroot%\\system32\\reg.exe", NULL},
    {L"wreg.exe", L"%systemroot%\\SysWOW64\\reg.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regapi.dll", NULL},
    {L"wregapi.dll", L"%systemroot%\\SysWOW64\\regapi.dll", NULL},
    {NULL, L"%systemroot%\\regedit.exe", NULL},
    {L"wregedit.exe", L"%systemroot%\\SysWOW64\\regedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regedt32.exe", NULL},
    {L"wregedt32.exe", L"%systemroot%\\SysWOW64\\regedt32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regini.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regsvc.dll", NULL},
    {L"wregsvc.dll", L"%systemroot%\\SysWOW64\\regsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\regsvr32.exe", NULL},
    {L"wregsvr32.exe", L"%systemroot%\\SysWOW64\\regsvr32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regtrace.exe", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\regwiz.exe", NULL},
    {L"wregwiz.exe", L"%systemroot%\\SysWOW64\\regwiz.exe", NULL},
    {NULL, L"%systemroot%\\system32\\regwizc.dll", NULL},
    {L"wregwizc.dll", L"%systemroot%\\SysWOW64\\regwizc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\remotepg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\remotesp.tsp", NULL},
    {L"wremotesp.tsp", L"%systemroot%\\SysWOW64\\remotesp.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\rend.dll", NULL},
    {L"wrend.dll", L"%systemroot%\\SysWOW64\\rend.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\repdrvfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\replace.exe", NULL},
    {L"wreplace.exe", L"%systemroot%\\SysWOW64\\replace.exe", NULL},
    {NULL, L"%systemroot%\\system32\\reset.exe", NULL},
    {NULL, L"%systemroot%\\system32\\resutils.dll", NULL},
    {L"wresutils.dll", L"%systemroot%\\SysWOW64\\resutils.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rexec.exe", NULL},
    {L"wrexec.exe", L"%systemroot%\\SysWOW64\\rexec.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\RMCast.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\rndismp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rnr20.dll", NULL},
    {L"wrnr20.dll", L"%systemroot%\\SysWOW64\\rnr20.dll", NULL},
    {NULL, L"%systemroot%\\system32\\romanime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\rootmdm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\route.exe", NULL},
    {L"wroute.exe", L"%systemroot%\\SysWOW64\\route.exe", NULL},
    {NULL, L"%systemroot%\\system32\\routemon.exe", NULL},
    {L"wroutemon.exe", L"%systemroot%\\SysWOW64\\routemon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\routetab.dll", NULL},
    {L"wroutetab.dll", L"%systemroot%\\SysWOW64\\routetab.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcns4.dll", NULL},
    {L"wrpcns4.dll", L"%systemroot%\\SysWOW64\\rpcns4.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcrt4.dll", NULL},
    {L"wrpcrt4.dll", L"%systemroot%\\SysWOW64\\rpcrt4.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rpcss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsh.exe", NULL},
    {L"wrsh.exe", L"%systemroot%\\SysWOW64\\rsh.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rshx32.dll", NULL},
    {L"wrshx32.dll", L"%systemroot%\\SysWOW64\\rshx32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmmllsv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rsmsink.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rsmui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\RTL39A64.sys", NULL},
    {NULL, L"%systemroot%\\system32\\rtm.dll", NULL},
    {L"wrtm.dll", L"%systemroot%\\SysWOW64\\rtm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\rtutils.dll", NULL},
    {L"wrtutils.dll", L"%systemroot%\\SysWOW64\\rtutils.dll", NULL},
    {NULL, L"%systemroot%\\system32\\runas.exe", NULL},
    {L"wrunas.exe", L"%systemroot%\\SysWOW64\\runas.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rundll32.exe", NULL},
    {L"wrundll32.exe", L"%systemroot%\\SysWOW64\\rundll32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\runonce.exe", NULL},
    {L"wrunonce.exe", L"%systemroot%\\SysWOW64\\runonce.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rwinsta.exe", NULL},
    {NULL, L"%systemroot%\\system32\\rwnh.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\safrcdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrdm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\safrslv.dll", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\sam.sdf", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\sam.spd", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapi.cpl", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapi.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\sapisvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\saport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\savedump.exe", NULL},
    {L"wsavedump.exe", L"%systemroot%\\SysWOW64\\savedump.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sbp2port.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sc.exe", NULL},
    {L"wsc.exe", L"%systemroot%\\SysWOW64\\sc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\scarddlg.dll", NULL},
    {L"wscarddlg.dll", L"%systemroot%\\SysWOW64\\scarddlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scardsvr.exe", NULL},
    {L"wscardsvr.exe", L"%systemroot%\\SysWOW64\\scardsvr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sccbase.dll", NULL},
    {L"wsccbase.dll", L"%systemroot%\\SysWOW64\\sccbase.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sccmn50m.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sccmusbm.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sccsccp.dll", NULL},
    {L"wsccsccp.dll", L"%systemroot%\\SysWOW64\\sccsccp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scecli.dll", NULL},
    {L"wscecli.dll", L"%systemroot%\\SysWOW64\\scecli.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scesrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\schedsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sclgntfy.dll", NULL},
    {L"wsclgntfy.dll", L"%systemroot%\\SysWOW64\\sclgntfy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scmstcs.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\SCR111.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\scrcons.exe", NULL},
    {NULL, L"%systemroot%\\system32\\scredir.dll", NULL},
    {L"wscredir.dll", L"%systemroot%\\SysWOW64\\scredir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\scripto.dll", L"ims.inf"},
    {L"wscripto.dll", L"%systemroot%\\SysWOW64\\scripto.dll", NULL},
    {NULL, L"%systemroot%\\system32\\scrnsave.scr", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiprnt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\scsiscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sdpblb.dll", NULL},
    {L"wsdpblb.dll", L"%systemroot%\\SysWOW64\\sdpblb.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\seaddsmc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\seclogon.dll", NULL},
    {L"wseclogon.dll", L"%systemroot%\\SysWOW64\\seclogon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\secur32.dll", NULL},
    {L"wsecur32.dll", L"%systemroot%\\SysWOW64\\secur32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\security.dll", NULL},
    {L"wsecurity.dll", L"%systemroot%\\SysWOW64\\security.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sendcmsg.dll", NULL},
    {L"wsendcmsg.dll", L"%systemroot%\\SysWOW64\\sendcmsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sendmail.dll", NULL},
    {L"wsendmail.dll", L"%systemroot%\\SysWOW64\\sendmail.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sens.dll", NULL},
    {L"wsens.dll", L"%systemroot%\\SysWOW64\\sens.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sensapi.dll", NULL},
    {L"wsensapi.dll", L"%systemroot%\\SysWOW64\\sensapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\senscfg.dll", NULL},
    {L"wsenscfg.dll", L"%systemroot%\\SysWOW64\\senscfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\seo.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\seos.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\serenum.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\serial.sys", NULL},
    {NULL, L"%systemroot%\\system32\\serialui.dll", NULL},
    {L"wserialui.dll", L"%systemroot%\\SysWOW64\\serialui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sermouse.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\serscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\servdeps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\services.exe", NULL},
    {NULL, L"%systemroot%\\system32\\serwvdrv.dll", NULL},
    {L"wserwvdrv.dll", L"%systemroot%\\SysWOW64\\serwvdrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sessmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sethc.exe", NULL},
    {L"wsethc.exe", L"%systemroot%\\SysWOW64\\sethc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\setup.exe", NULL},
    {L"wisetup.exe", L"%systemroot%\\SysWOW64\\InstallShield\\setup.exe", NULL},
    {L"wsetup.exe", L"%systemroot%\\SysWOW64\\setup.exe", NULL},
    {L"wsetup16.exe", L"%systemroot%\\SysWOW64\\setup16.exe", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\setup50.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\setupqry.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sfc_os.dll", NULL},
    {L"wsfc_os.dll", L"%systemroot%\\SysWOW64\\sfc_os.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sfloppy.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sfmapi.dll", NULL},
    {L"wsfmapi.dll", L"%systemroot%\\SysWOW64\\sfmapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shadow.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shdoclc.dll", NULL},
    {L"wshdoclc.dll", L"%systemroot%\\SysWOW64\\shdoclc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shdocvw.dll", NULL},
    {L"wshdocvw.dll", L"%systemroot%\\SysWOW64\\shdocvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shell32.dll", NULL},
    {L"wshell32.dll", L"%systemroot%\\SysWOW64\\shell32.dll", NULL},
    {L"class_ss.dll", L"%systemroot%\\system32\\shellstyle.dll", NULL},
    {L"wclass_ss.dll", L"%systemroot%\\SysWOW64\\shellstyle.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shfolder.dll", NULL},
    {L"wshfolder.dll", L"%systemroot%\\SysWOW64\\shfolder.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shgina.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shimgvw.dll", NULL},
    {L"wshimgvw.dll", L"%systemroot%\\SysWOW64\\shimgvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shlwapi.dll", NULL},
    {L"wshlwapi.dll", L"%systemroot%\\SysWOW64\\shlwapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shmedia.dll", NULL},
    {L"wshmedia.dll", L"%systemroot%\\SysWOW64\\shmedia.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shmgrate.exe", NULL},
    {L"wshmgrate.exe", L"%systemroot%\\SysWOW64\\shmgrate.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shrpubw.exe", NULL},
    {NULL, L"%systemroot%\\system32\\shscrap.dll", NULL},
    {L"wshscrap.dll", L"%systemroot%\\SysWOW64\\shscrap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shsvcs.dll", NULL},
    {L"wshsvcs.dll", L"%systemroot%\\SysWOW64\\shsvcs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\shutdown.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sigtab.dll", NULL},
    {L"wsigtab.dll", L"%systemroot%\\SysWOW64\\sigtab.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sigverif.exe", NULL},
    {L"wsigverif.exe", L"%systemroot%\\SysWOW64\\sigverif.exe", NULL},
    {L"wsimpdata.tlb", L"%systemroot%\\SysWOW64\\simpdata.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\simptcp.dll", NULL},
    {L"wsimptcp.dll", L"%systemroot%\\SysWOW64\\simptcp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sisbkup.dll", NULL},
    {L"wsisbkup.dll", L"%systemroot%\\SysWOW64\\sisbkup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\skdll.dll", NULL},
    {L"wskdll.dll", L"%systemroot%\\SysWOW64\\skdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\skeys.exe", NULL},
    {L"wskeys.exe", L"%systemroot%\\SysWOW64\\skeys.exe", NULL},
    {NULL, L"%systemroot%\\system32\\slbcsp.dll", NULL},
    {L"wslbcsp.dll", L"%systemroot%\\SysWOW64\\slbcsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slbiop.dll", NULL},
    {L"wslbiop.dll", L"%systemroot%\\SysWOW64\\slbiop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\slbrccsp.dll", NULL},
    {L"wslbrccsp.dll", L"%systemroot%\\SysWOW64\\slbrccsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\smb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\smclib.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smi2smir.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smierrsm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smierrsy.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\SNMP\\smimsgif.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smlogcfg.dll", NULL},
    {L"wsmlogcfg.dll", L"%systemroot%\\SysWOW64\\smlogcfg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smlogsvc.exe", NULL},
    {L"wsmlogsvc.exe", L"%systemroot%\\SysWOW64\\smlogsvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\smss.exe", NULL},
    {L"wsmss.exe", L"%systemroot%\\SysWOW64\\smss.exe", NULL},
    {NULL, L"%systemroot%\\system32\\smtpapi.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\smtpcons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\smtpctrs.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\smtpsvc.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\sndrec32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sndvol32.exe", NULL},
    {NULL, L"%systemroot%\\help\\sniffpol.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmp.exe", NULL},
    {L"wsnmp.exe", L"%systemroot%\\SysWOW64\\snmp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\snmpapi.dll", NULL},
    {L"wsnmpapi.dll", L"%systemroot%\\SysWOW64\\snmpapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpcl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpincl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpsmir.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmpsnap.dll", NULL},
    {L"wsnmpsnap.dll", L"%systemroot%\\SysWOW64\\snmpsnap.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpstup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\snmpthrd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\snmptrap.exe", NULL},
    {L"wsnmptrap.exe", L"%systemroot%\\SysWOW64\\snmptrap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\snprfdll.dll", L"ims.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\snyaitmc.sys", NULL},
    {NULL, L"%systemroot%\\ime\\SOFTKBD.DLL", NULL},
    {L"wSOFTKBD.DLL", L"%systemroot%\\ime (x86)\\SOFTKBD.DLL", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\softkey.dll", L"intl.inf"},
    {L"wsoftkey.dll", L"%systemroot%\\ime (x86)\\IMJP8_1\\APPLETS\\softkey.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\softpub.dll", NULL},
    {L"wsoftpub.dll", L"%systemroot%\\SysWOW64\\softpub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sol.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonyait.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonydcam.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sonymc.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sort.exe", NULL},
    {L"wsort.exe", L"%systemroot%\\SysWOW64\\sort.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sortkey.nls", NULL},
    {L"wsortkey.nls", L"%systemroot%\\SysWOW64\\sortkey.nls", NULL},
    {NULL, L"%systemroot%\\system32\\sorttbls.nls", NULL},
    {L"wsorttbls.nls", L"%systemroot%\\SysWOW64\\sorttbls.nls", NULL},
    {L"wsound.drv", L"%systemroot%\\SysWOW64\\sound.drv", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sparrow.sys", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\spcommon.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Speech\\1033\\spcplui.dll", NULL},
    {NULL, L"%systemroot%\\ime\\spgrmr.dll", NULL},
    {L"wspgrmr.dll", L"%systemroot%\\ime (x86)\\spgrmr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\spider.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\splitter.sys", NULL},
    {NULL, L"%systemroot%\\splwow64.exe", NULL},
    {L"wspnike.dll", L"%systemroot%\\SysWOW64\\spnike.dll", NULL},
    {NULL, L"%systemroot%\\system32\\spoolss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\spoolsv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sprestrt.exe", NULL},
    {L"wsprestrt.exe", L"%systemroot%\\SysWOW64\\sprestrt.exe", NULL},
    {L"wsprio600.dll", L"%systemroot%\\SysWOW64\\sprio600.dll", NULL},
    {L"wsprio800.dll", L"%systemroot%\\SysWOW64\\sprio800.dll", NULL},
    {NULL, L"%systemroot%\\ime\\SPTIP.dll", NULL},
    {L"wSPTIP.dll", L"%systemroot%\\ime (x86)\\SPTIP.dll", NULL},
    {NULL, L"%commonprogramfiles%\\SpeechEngines\\Microsoft\\TTS\\1033\\spttseng.dll", NULL},
    {L"wSpxupchk.dll", L"%systemroot%\\SysWOW64\\Spxupchk.dll", NULL},
    {L"wsqlunirl.dll", L"%systemroot%\\SysWOW64\\sqlunirl.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\Ole DB\\sqlxmlx.dll", NULL},
    {L"wsqlxmlx.dll", L"%commonprogramfiles(x86)%\\System\\Ole DB\\sqlxmlx.dll", NULL},
    {L"srgb.icm", L"%systemroot%\\system32\\spool\\drivers\\color\\sRGB Color Space Profile.icm", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\srv.sys", NULL},
    {NULL, L"%systemroot%\\system32\\srvsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ss3dfo.scr", NULL},
    {NULL, L"%systemroot%\\system32\\ssbezier.scr", NULL},
    {L"wssdpapi.dll", L"%systemroot%\\SysWOW64\\ssdpapi.dll", NULL},
    {L"wssdpsrv.dll", L"%systemroot%\\SysWOW64\\ssdpsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ssflwbox.scr", NULL},
    {NULL, L"%systemroot%\\system32\\ssmarque.scr", NULL},
    {NULL, L"%systemroot%\\system32\\ssmypics.scr", NULL},
    {NULL, L"%systemroot%\\system32\\ssmyst.scr", NULL},
    {NULL, L"%systemroot%\\system32\\sspipes.scr", NULL},
    {NULL, L"%systemroot%\\system32\\ssstars.scr", NULL},
    {NULL, L"%systemroot%\\system32\\sstext3d.scr", NULL},
    {NULL, L"%systemroot%\\help\\sstub.dll", NULL},
    {NULL, L"%systemroot%\\system32\\stclient.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\stcusb.sys", NULL},
    {NULL, L"%systemroot%\\system32\\stdole32.tlb", NULL},
    {L"wstdole32.tlb", L"%systemroot%\\SysWOW64\\stdole32.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\stdprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sti.dll", NULL},
    {L"wsti.dll", L"%systemroot%\\SysWOW64\\sti.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sti_ci.dll", NULL},
    {L"wsti_ci.dll", L"%systemroot%\\SysWOW64\\sti_ci.dll", NULL},
    {L"wstlncoin.dll", L"%systemroot%\\SysWOW64\\stlncoin.dll", NULL},
    {NULL, L"%systemroot%\\system32\\stobject.dll", NULL},
    {L"wstobject.dll", L"%systemroot%\\SysWOW64\\stobject.dll", NULL},
    {L"wstorage.dll", L"%systemroot%\\SysWOW64\\storage.dll", NULL},
    {NULL, L"%systemroot%\\system32\\storprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\storprov.dll", NULL},
    {L"wstorprov.dll", L"%systemroot%\\SysWOW64\\storprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\stream.sys", NULL},
    {NULL, L"%systemroot%\\system32\\streamci.dll", NULL},
    {L"wstreamci.dll", L"%systemroot%\\SysWOW64\\streamci.dll", NULL},
    {NULL, L"%systemroot%\\system32\\strmfilt.dll", NULL},
    {L"wstrmfilt.dll", L"%systemroot%\\SysWOW64\\strmfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\subst.exe", NULL},
    {L"wsubst.exe", L"%systemroot%\\SysWOW64\\subst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\svchost.exe", NULL},
    {L"wsvchost.exe", L"%systemroot%\\SysWOW64\\svchost.exe", NULL},
    {NULL, L"%systemroot%\\system32\\svcpack.dll", NULL},
    {L"wsvcpack.dll", L"%systemroot%\\SysWOW64\\svcpack.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swdisp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swenum.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swkeypad.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swmidi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\swnvram.sys", NULL},
    {NULL, L"%systemroot%\\system32\\swprv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\sxs.dll", NULL},
    {L"wsxs.dll", L"%systemroot%\\SysWOW64\\sxs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sym_hi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sym_u3.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symc810.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symc8xx.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\symmpi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\syncapp.exe", NULL},
    {L"wsyncapp.exe", L"%systemroot%\\SysWOW64\\syncapp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\synceng.dll", NULL},
    {L"wsynceng.dll", L"%systemroot%\\SysWOW64\\synceng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\syncui.dll", NULL},
    {L"wsyncui.dll", L"%systemroot%\\SysWOW64\\syncui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\sysaudio.sys", NULL},
    {NULL, L"%systemroot%\\system32\\sysdm.cpl", NULL},
    {L"wsysdm.cpl", L"%systemroot%\\SysWOW64\\sysdm.cpl", NULL},
    {L"wsysedit.exe", L"%systemroot%\\SysWOW64\\sysedit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sysinv.dll", NULL},
    {L"wsysinv.dll", L"%systemroot%\\SysWOW64\\sysinv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\syskey.exe", NULL},
    {L"wsyskey.exe", L"%systemroot%\\SysWOW64\\syskey.exe", NULL},
    {NULL, L"%systemroot%\\system32\\sysmon.ocx", NULL},
    {L"wsysmon.ocx", L"%systemroot%\\SysWOW64\\sysmon.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\syssetup.dll", NULL},
    {L"wsyssetup.dll", L"%systemroot%\\SysWOW64\\syssetup.dll", NULL},
    {NULL, L"%systemroot%\\system32\\systray.exe", NULL},
    {L"wsystray.exe", L"%systemroot%\\SysWOW64\\systray.exe", NULL},
    {NULL, L"%systemroot%\\system32\\t2embed.dll", NULL},
    {L"wt2embed.dll", L"%systemroot%\\SysWOW64\\t2embed.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tandqic.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tape.sys", NULL},
    {L"wtapi.dll", L"%systemroot%\\SysWOW64\\tapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapi3.dll", NULL},
    {L"wtapi3.dll", L"%systemroot%\\SysWOW64\\tapi3.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapi32.dll", NULL},
    {L"wtapi32.dll", L"%systemroot%\\SysWOW64\\tapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapiperf.dll", NULL},
    {L"wtapiperf.dll", L"%systemroot%\\SysWOW64\\tapiperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapisrv.dll", NULL},
    {L"wtapisrv.dll", L"%systemroot%\\SysWOW64\\tapisrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tapiui.dll", NULL},
    {L"wtapiui.dll", L"%systemroot%\\SysWOW64\\tapiui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\taskmgr.exe", NULL},
    {L"wtaskmgr.exe", L"%systemroot%\\SysWOW64\\taskmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tcmsetup.exe", NULL},
    {L"wtcmsetup.exe", L"%systemroot%\\SysWOW64\\tcmsetup.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tcpip.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tcpip6.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmib.dll", NULL},
    {L"wtcpmib.dll", L"%systemroot%\\SysWOW64\\tcpmib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmon.dll", NULL},
    {L"wtcpmon.dll", L"%systemroot%\\SysWOW64\\tcpmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpmonui.dll", NULL},
    {L"wtcpmonui.dll", L"%systemroot%\\SysWOW64\\tcpmonui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tcpsvcs.exe", NULL},
    {L"wtcpsvcs.exe", L"%systemroot%\\SysWOW64\\tcpsvcs.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tdc.ocx", NULL},
    {L"wtdc.ocx", L"%systemroot%\\SysWOW64\\tdc.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdi.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdpipe.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tdtcp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\telephon.cpl", NULL},
    {L"wtelephon.cpl", L"%systemroot%\\SysWOW64\\telephon.cpl", NULL},
    {NULL, L"%systemroot%\\system32\\telnet.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\termdd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\termmgr.dll", NULL},
    {L"wtermmgr.dll", L"%systemroot%\\SysWOW64\\termmgr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\termsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tffsport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\tftp.exe", NULL},
    {L"wtftp.exe", L"%systemroot%\\SysWOW64\\tftp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Thawbrkr.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\themeui.dll", NULL},
    {L"wthemeui.dll", L"%systemroot%\\SysWOW64\\themeui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\timedate.cpl", NULL},
    {L"wtimedate.cpl", L"%systemroot%\\SysWOW64\\timedate.cpl", NULL},
    {L"wtimer.drv", L"%systemroot%\\SysWOW64\\timer.drv", NULL},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGC.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGD_.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGL.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\TINTLGNT.IME", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLGS.IMD", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTLPHR.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TINTSETP.EXE", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\IME\\TINTLGNT\\TMIGRATE.DLL", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\wbem\\tmplprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\toside.sys", NULL},
    {L"wtourstrt.exe", L"%systemroot%\\SysWOW64\\tourstart.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tracert.exe", NULL},
    {L"wtracert.exe", L"%systemroot%\\SysWOW64\\tracert.exe", NULL},
    {NULL, L"%systemroot%\\system32\\traffic.dll", NULL},
    {L"wtraffic.dll", L"%systemroot%\\SysWOW64\\traffic.dll", NULL},
    {NULL, L"%ProgramFiles%\\Internet Explorer\\Connection Wizard\\trialoc.dll", NULL},
    {L"wTRIEDIT.DLL", L"%commonprogramfiles(x86)%\\Microsoft Shared\\Triedit\\TRIEDIT.DLL", NULL},
    {NULL, L"%systemroot%\\system32\\trkwks.dll", NULL},
    {L"wtrkwks.dll", L"%systemroot%\\SysWOW64\\trkwks.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\trnsprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsappcmp.dll", NULL},
    {L"wtsappcmp.dll", L"%systemroot%\\SysWOW64\\tsappcmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsbyuv.dll", NULL},
    {L"wtsbyuv.dll", L"%systemroot%\\SysWOW64\\tsbyuv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscfgwmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tscon.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tscupgrd.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsd32.dll", NULL},
    {L"wtsd32.dll", L"%systemroot%\\SysWOW64\\tsd32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsddd.dll", NULL},
    {L"wtsddd.dll", L"%systemroot%\\SysWOW64\\tsddd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsdiscon.exe", NULL},
    {NULL, L"%systemroot%\\help\\tshoot.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tskill.exe", NULL},
    {NULL, L"%systemroot%\\system32\\Setup\\tsoc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\tsprof.exe", NULL},
    {NULL, L"%systemroot%\\system32\\tsshutdn.exe", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\tunmp.sys", NULL},
    {NULL, L"%systemroot%\\twain.dll", NULL},
    {L"wtwain_32.dll", L"%systemroot%\\twain_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\twext.dll", NULL},
    {L"wtwext.dll", L"%systemroot%\\SysWOW64\\twext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\txflog.dll", NULL},
    {L"wtxflog.dll", L"%systemroot%\\SysWOW64\\txflog.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\udfs.sys", NULL},
    {L"wudhisapi.dll", L"%systemroot%\\SysWOW64\\udhisapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ufat.dll", NULL},
    {L"wufat.dll", L"%systemroot%\\SysWOW64\\ufat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ulib.dll", NULL},
    {L"wulib.dll", L"%systemroot%\\SysWOW64\\ulib.dll", NULL},
    {NULL, L"%systemroot%\\system32\\umandlg.dll", NULL},
    {L"wumandlg.dll", L"%systemroot%\\SysWOW64\\umandlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\umdmxfrm.dll", NULL},
    {L"wumdmxfrm.dll", L"%systemroot%\\SysWOW64\\umdmxfrm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\unicdime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\unicode.nls", NULL},
    {L"wunicode.nls", L"%systemroot%\\SysWOW64\\unicode.nls", NULL},
    {NULL, L"%systemroot%\\system32\\uniime.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\unimdm.tsp", NULL},
    {L"wunimdm.tsp", L"%systemroot%\\SysWOW64\\unimdm.tsp", NULL},
    {NULL, L"%systemroot%\\system32\\unimdmat.dll", NULL},
    {L"wunimdmat.dll", L"%systemroot%\\SysWOW64\\unimdmat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\uniplat.dll", NULL},
    {L"wuniplat.dll", L"%systemroot%\\SysWOW64\\uniplat.dll", NULL},
    {NULL, L"%systemroot%\\system32\\unlodctr.exe", NULL},
    {L"wunlodctr.exe", L"%systemroot%\\SysWOW64\\unlodctr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\unsecapp.exe", NULL},
    {NULL, L"%systemroot%\\system32\\untfs.dll", NULL},
    {L"wuntfs.dll", L"%systemroot%\\SysWOW64\\untfs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\updprov.dll", NULL},
    {NULL, L"%systemroot%\\PCHealth\\UploadLB\\Binaries\\UploadM.exe", NULL},
    {L"wupnp.dll", L"%systemroot%\\SysWOW64\\upnp.dll", NULL},
    {L"wupnpcont.exe", L"%systemroot%\\SysWOW64\\upnpcont.exe", NULL},
    {L"wupnphost.dll", L"%systemroot%\\SysWOW64\\upnphost.dll", NULL},
    {L"wupnpui.dll", L"%systemroot%\\SysWOW64\\upnpui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ups.exe", NULL},
    {L"wups.exe", L"%systemroot%\\SysWOW64\\ups.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ureg.dll", NULL},
    {L"wureg.dll", L"%systemroot%\\SysWOW64\\ureg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usb8023.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\USBAUDIO.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbcamd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbcamd2.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbccgp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbehci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbhub.sys", NULL},
    {NULL, L"%systemroot%\\system32\\usbmon.dll", NULL},
    {L"wusbmon.dll", L"%systemroot%\\SysWOW64\\usbmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbohci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbport.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbprint.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbscan.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbser.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbstor.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\usbuhci.sys", NULL},
    {NULL, L"%systemroot%\\system32\\usbui.dll", NULL},
    {L"wusbui.dll", L"%systemroot%\\SysWOW64\\usbui.dll", NULL},
    {L"wuser.exe", L"%systemroot%\\SysWOW64\\user.exe", NULL},
    {NULL, L"%systemroot%\\system32\\user32.dll", NULL},
    {L"wuser32.dll", L"%systemroot%\\SysWOW64\\user32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\userenv.dll", NULL},
    {L"wuserenv.dll", L"%systemroot%\\SysWOW64\\userenv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\userinit.exe", NULL},
    {L"wuserinit.exe", L"%systemroot%\\SysWOW64\\userinit.exe", NULL},
    {NULL, L"%systemroot%\\system32\\usp10.dll", NULL},
    {L"wusp10.dll", L"%systemroot%\\SysWOW64\\usp10.dll", NULL},
    {L"wusrcntra.dll", L"%systemroot%\\SysWOW64\\usrcntra.dll", NULL},
    {L"wusrcoina.dll", L"%systemroot%\\SysWOW64\\usrcoina.dll", NULL},
    {L"wusrdpa.dll", L"%systemroot%\\SysWOW64\\usrdpa.dll", NULL},
    {L"wusrdtea.dll", L"%systemroot%\\SysWOW64\\usrdtea.dll", NULL},
    {L"wusrfaxa.dll", L"%systemroot%\\SysWOW64\\usrfaxa.dll", NULL},
    {L"wusrlbva.dll", L"%systemroot%\\SysWOW64\\usrlbva.dll", NULL},
    {L"wusrmlnka.exe", L"%systemroot%\\SysWOW64\\usrmlnka.exe", NULL},
    {L"wusrprbda.exe", L"%systemroot%\\SysWOW64\\usrprbda.exe", NULL},
    {L"wusrrtosa.dll", L"%systemroot%\\SysWOW64\\usrrtosa.dll", NULL},
    {L"wusrsdpia.dll", L"%systemroot%\\SysWOW64\\usrsdpia.dll", NULL},
    {L"wusrshuta.exe", L"%systemroot%\\SysWOW64\\usrshuta.exe", NULL},
    {L"wusrsvpia.dll", L"%systemroot%\\SysWOW64\\usrsvpia.dll", NULL},
    {L"wusrv42a.dll", L"%systemroot%\\SysWOW64\\usrv42a.dll", NULL},
    {L"wusrv80a.dll", L"%systemroot%\\SysWOW64\\usrv80a.dll", NULL},
    {L"wusrvoica.dll", L"%systemroot%\\SysWOW64\\usrvoica.dll", NULL},
    {L"wusrvpa.dll", L"%systemroot%\\SysWOW64\\usrvpa.dll", NULL},
    {NULL, L"%systemroot%\\system32\\utildll.dll", NULL},
    {L"wutildll.dll", L"%systemroot%\\SysWOW64\\utildll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\utilman.exe", NULL},
    {L"wutilman.exe", L"%systemroot%\\SysWOW64\\utilman.exe", NULL},
    {NULL, L"%systemroot%\\system32\\uxtheme.dll", NULL},
    {L"wuxtheme.dll", L"%systemroot%\\SysWOW64\\uxtheme.dll", NULL},
    {L"wvbajet32.dll", L"%systemroot%\\SysWOW64\\vbajet32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vbisurf.ax", NULL},
    {L"wvbisurf.ax", L"%systemroot%\\SysWOW64\\vbisurf.ax", NULL},
    {L"wvdmdbg.dll", L"%systemroot%\\SysWOW64\\vdmdbg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vdmindvd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\vds.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vds_ps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsbas.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsdyndr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vdsldr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vdsutil.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\vdswmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\verifier.dll", NULL},
    {L"wverifier.dll", L"%systemroot%\\SysWOW64\\verifier.dll", NULL},
    {NULL, L"%systemroot%\\system32\\verifier.exe", NULL},
    {L"wverifier.exe", L"%systemroot%\\SysWOW64\\verifier.exe", NULL},
    {NULL, L"%systemroot%\\system32\\version.dll", NULL},
    {L"wversion.dll", L"%systemroot%\\SysWOW64\\version.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vga.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vga.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\vgapnp.sys", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\VGX\\vgx.dll", NULL},
    {L"wvgx.dll", L"%commonprogramfiles(x86)%\\Microsoft Shared\\VGX\\vgx.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\viaide.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\videoprt.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\viewprov.dll", NULL},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\voicepad.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\ime\\IMJP8_1\\APPLETS\\voicesub.dll", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\drivers\\volsnap.sys", NULL},
    {NULL, L"%systemroot%\\system32\\vss_ps.dll", NULL},
    {L"wvss_ps.dll", L"%systemroot%\\SysWOW64\\vss_ps.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssadmin.exe", NULL},
    {NULL, L"%systemroot%\\system32\\vssapi.dll", NULL},
    {L"wvssapi.dll", L"%systemroot%\\SysWOW64\\vssapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\vssvc.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\vsswmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\w32time.dll", NULL},
    {L"ww32time.dll", L"%systemroot%\\SysWOW64\\w32time.dll", NULL},
    {NULL, L"%systemroot%\\system32\\w32tm.exe", NULL},
    {L"ww32tm.exe", L"%systemroot%\\SysWOW64\\w32tm.exe", NULL},
    {NULL, L"%systemroot%\\system32\\w32topl.dll", NULL},
    {L"ww32topl.dll", L"%systemroot%\\SysWOW64\\w32topl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\w3ssl.dll", NULL},
    {L"ww3ssl.dll", L"%systemroot%\\SysWOW64\\w3ssl.dll", NULL},
    {L"ww95upgnt.dll", L"%systemroot%\\SysWOW64\\w95upgnt.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wab.exe", NULL},
    {NULL, L"%commonprogramfiles%\\System\\wab32.dll", NULL},
    {L"wwab32.dll", L"%commonprogramfiles(x86)%\\System\\wab32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\System\\wab32res.dll", NULL},
    {L"wwab32res.dll", L"%commonprogramfiles(x86)%\\System\\wab32res.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabfind.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabimp.dll", NULL},
    {NULL, L"%ProgramFiles%\\Outlook Express\\wabmig.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wamd64cpuex.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wanarp.sys", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\watchdog.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wavemsp.dll", NULL},
    {L"wwavemsp.dll", L"%systemroot%\\SysWOW64\\wavemsp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcntl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcomn.dll", NULL},
    {L"wwbemcomn.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemcomn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcons.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemcore.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemdisp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemdisp.tlb", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemess.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemperf.dll", NULL},
    {L"wwbemperf.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemperf.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemprox.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemtest.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wbemupgd.dll", NULL},
    {L"wwbemupgd.dll", L"%systemroot%\\SysWOW64\\wbem\\wbemupgd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wd.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wdigest.dll", NULL},
    {L"wwwdigest.dll", L"%systemroot%\\SysWOW64\\wdigest.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wdmaud.drv", NULL},
    {L"wwdmaud.drv", L"%systemroot%\\SysWOW64\\wdmaud.drv", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wdmaud.sys", NULL},
    {NULL, L"%systemroot%\\system32\\webcheck.dll", NULL},
    {L"wwebcheck.dll", L"%systemroot%\\SysWOW64\\webcheck.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webclnt.dll", NULL},
    {L"wwebclnt.dll", L"%systemroot%\\SysWOW64\\webclnt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webhits.dll", NULL},
    {L"wwebhits.dll", L"%systemroot%\\SysWOW64\\webhits.dll", NULL},
    {NULL, L"%systemroot%\\system32\\webvw.dll", NULL},
    {L"wwebvw.dll", L"%systemroot%\\SysWOW64\\webvw.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wextract.exe", NULL},
    {L"wwextract.exe", L"%systemroot%\\SysWOW64\\wextract.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wiaacmgr.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wiadefui.dll", NULL},
    {L"wwiadefui.dll", L"%systemroot%\\SysWOW64\\wiadefui.dll", NULL},
    {L"wwiadss.dll", L"%systemroot%\\SysWOW64\\wiadss.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiafbdrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiarpc.dll", NULL},
    {L"wwiarpc.dll", L"%systemroot%\\SysWOW64\\wiarpc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiascr.dll", NULL},
    {L"wwiascr.dll", L"%systemroot%\\SysWOW64\\wiascr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiaservc.dll", NULL},
    {L"wwiaservc.dll", L"%systemroot%\\SysWOW64\\wiaservc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiasf.ax", NULL},
    {L"wwiasf.ax", L"%systemroot%\\SysWOW64\\wiasf.ax", NULL},
    {NULL, L"%systemroot%\\system32\\wiashext.dll", NULL},
    {L"wwiashext.dll", L"%systemroot%\\SysWOW64\\wiashext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiavideo.dll", NULL},
    {L"wwiavideo.dll", L"%systemroot%\\SysWOW64\\wiavideo.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wiavusd.dll", NULL},
    {L"wwiavusd.dll", L"%systemroot%\\SysWOW64\\wiavusd.dll", NULL},
    {L"wwifeman.dll", L"%systemroot%\\SysWOW64\\wifeman.dll", NULL},
    {NULL, L"%systemroot%\\system32\\win32k.sys", NULL},
    {NULL, L"%systemroot%\\system32\\win32spl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winar30.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winbrand.dll", NULL},
    {L"wwinbrand.dll", L"%systemroot%\\SysWOW64\\winbrand.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winchat.exe", NULL},
    {L"wwinfax.dll", L"%systemroot%\\SysWOW64\\winfax.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wingb.ime", L"intl.inf"},
    {L"wwinhlp32.exe", L"%systemroot%\\winhlp32.exe", NULL},
    {L"wwinhstb.exe", L"%systemroot%\\SysWOW64\\winhlp32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winime.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winipsec.dll", NULL},
    {L"wwinipsec.dll", L"%systemroot%\\SysWOW64\\winipsec.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\winmgmt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\winmgmtr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winmine.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winmm.dll", NULL},
    {L"wwinmm.dll", L"%systemroot%\\SysWOW64\\winmm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winmsd.exe", NULL},
    {L"wwinmsd.exe", L"%systemroot%\\SysWOW64\\winmsd.exe", NULL},
    {L"wwinnls.dll", L"%systemroot%\\SysWOW64\\winnls.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winntbbu.dll", NULL},
    {L"wwinntbbu.dll", L"%systemroot%\\SysWOW64\\winntbbu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winpy.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winrnr.dll", NULL},
    {L"wwinrnr.dll", L"%systemroot%\\SysWOW64\\winrnr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winscard.dll", NULL},
    {L"wwinscard.dll", L"%systemroot%\\SysWOW64\\winscard.dll", NULL},
    {L"wwinsock.dll", L"%systemroot%\\SysWOW64\\winsock.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsp.ime", L"intl.inf"},
    {NULL, L"%systemroot%\\system32\\winspool.drv", NULL},
    {L"wwinspool.drv", L"%systemroot%\\SysWOW64\\winspool.drv", NULL},
    {L"wwinspool.exe", L"%systemroot%\\SysWOW64\\winspool.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winsta.dll", NULL},
    {L"wwinsta.dll", L"%systemroot%\\SysWOW64\\winsta.dll", NULL},
    {NULL, L"%systemroot%\\system32\\winver.exe", NULL},
    {L"wwinver.exe", L"%systemroot%\\SysWOW64\\winver.exe", NULL},
    {NULL, L"%systemroot%\\system32\\winzm.ime", L"intl.inf"},
    {L"wwisc10.dll", L"%commonprogramfiles(x86)%\\MSSoap\\Binaries\\wisc10.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wkssvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlanmon.dll", NULL},
    {L"wwlanmon.dll", L"%systemroot%\\SysWOW64\\wlanmon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wldap32.dll", NULL},
    {L"wwldap32.dll", L"%systemroot%\\SysWOW64\\wldap32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wlnotify.dll", NULL},
    {L"wwmadmod.dll", L"%systemroot%\\SysWOW64\\wmadmod.dll", NULL},
    {L"wwmadmoe.dll", L"%systemroot%\\SysWOW64\\wmadmoe.dll", NULL},
    {L"wwmasf.dll", L"%systemroot%\\SysWOW64\\wmasf.dll", NULL},
    {L"wwmdmlog.dll", L"%systemroot%\\SysWOW64\\wmdmlog.dll", NULL},
    {L"wwmdmps.dll", L"%systemroot%\\SysWOW64\\wmdmps.dll", NULL},
    {L"wwmerrenu.dll", L"%systemroot%\\SysWOW64\\wmerrenu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmi.dll", NULL},
    {L"wwmi.dll", L"%systemroot%\\SysWOW64\\wmi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\xml\\wmi2xml.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiadap.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiapres.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiaprpl.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiapsrv.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmicookr.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmidcprv.dll", NULL},
    {L"wwmidx.ocx", L"%systemroot%\\SysWOW64\\wmidx.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\wmilib.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmimsg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipcima.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipdskq.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipicmp.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipiprt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipjobj.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wmiprop.dll", NULL},
    {L"wwmiprop.dll", L"%systemroot%\\SysWOW64\\wmiprop.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprov.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprvsd.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiprvse.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmipsess.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmisvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmitimep.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wbem\\wmiutils.dll", NULL},
    {L"wwmnetmgr.dll", L"%systemroot%\\SysWOW64\\wmnetmgr.dll", NULL},
    {L"wwmp.ocx", L"%systemroot%\\SysWOW64\\wmp.ocx", NULL},
    {L"wwmpcd.dll", L"%systemroot%\\SysWOW64\\wmpcd.dll", NULL},
    {L"wwmpcore.dll", L"%systemroot%\\SysWOW64\\wmpcore.dll", NULL},
    {L"wwmploc.dll", L"%systemroot%\\SysWOW64\\wmploc.dll", NULL},
    {L"wwmpshell.dll", L"%systemroot%\\SysWOW64\\wmpshell.dll", NULL},
    {L"wwmpstub.exe", L"%systemroot%\\SysWOW64\\wmpstub.exe", NULL},
    {L"wwmpui.dll", L"%systemroot%\\SysWOW64\\wmpui.dll", NULL},
    {L"wwmsdmod.dll", L"%systemroot%\\SysWOW64\\wmsdmod.dll", NULL},
    {L"wwmsdmoe.dll", L"%systemroot%\\SysWOW64\\wmsdmoe.dll", NULL},
    {L"wwmstream.dll", L"%systemroot%\\SysWOW64\\wmstream.dll", NULL},
    {L"wwmv8dmod.dll", L"%systemroot%\\SysWOW64\\wmv8dmod.dll", NULL},
    {L"wwmv8ds32.ax", L"%systemroot%\\SysWOW64\\wmv8ds32.ax", NULL},
    {L"wwmvcore.dll", L"%systemroot%\\SysWOW64\\wmvcore.dll", NULL},
    {L"wwmvdmod.dll", L"%systemroot%\\SysWOW64\\wmvdmod.dll", NULL},
    {L"wwmvdmoe.dll", L"%systemroot%\\SysWOW64\\wmvdmoe.dll", NULL},
    {L"wwmvds32.ax", L"%systemroot%\\SysWOW64\\wmvds32.ax", NULL},
    {NULL, L"%ProgramFiles%\\Windows NT\\Accessories\\wordpad.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wow64.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wow64cpu.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wow64win.dll", NULL},
    {L"wwowexec.exe", L"%systemroot%\\SysWOW64\\wowexec.exe", NULL},
    {L"wwowfax.dll", L"%systemroot%\\SysWOW64\\wowfax.dll", NULL},
    {L"wwowfaxui.dll", L"%systemroot%\\SysWOW64\\wowfaxui.dll", NULL},
    {L"wwowreg32.exe", L"%systemroot%\\SysWOW64\\wowreg32.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wpnpinst.exe", NULL},
    {L"wwpnpinst.exe", L"%systemroot%\\SysWOW64\\wpnpinst.exe", NULL},
    {NULL, L"%systemroot%\\system32\\write.exe", NULL},
    {NULL, L"%systemroot%\\system32\\ws2_32.dll", NULL},
    {L"wws2_32.dll", L"%systemroot%\\SysWOW64\\ws2_32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\ws2help.dll", NULL},
    {L"wws2help.dll", L"%systemroot%\\SysWOW64\\ws2help.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\ws2ifsl.sys", NULL},
    {NULL, L"%systemroot%\\system32\\wscript.exe", NULL},
    {L"wwscript.exe", L"%systemroot%\\SysWOW64\\wscript.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wshatm.dll", NULL},
    {L"wwshatm.dll", L"%systemroot%\\SysWOW64\\wshatm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshcon.dll", NULL},
    {L"wwshcon.dll", L"%systemroot%\\SysWOW64\\wshcon.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshext.dll", NULL},
    {L"wwshext.dll", L"%systemroot%\\SysWOW64\\wshext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wship6.dll", NULL},
    {L"wwship6.dll", L"%systemroot%\\SysWOW64\\wship6.dll", NULL},
    {L"wwshisn.dll", L"%systemroot%\\SysWOW64\\wshisn.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshnetbs.dll", NULL},
    {L"wwshnetbs.dll", L"%systemroot%\\SysWOW64\\wshnetbs.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshom.ocx", NULL},
    {L"wwshom.ocx", L"%systemroot%\\SysWOW64\\wshom.ocx", NULL},
    {NULL, L"%systemroot%\\system32\\wshqos.dll", NULL},
    {L"wwshqos.dll", L"%systemroot%\\SysWOW64\\wshqos.dll", NULL},
    {NULL, L"%systemroot%\\system32\\WshRm.dll", NULL},
    {L"wWshRm.dll", L"%systemroot%\\SysWOW64\\WshRm.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wshtcpip.dll", NULL},
    {L"wwshtcpip.dll", L"%systemroot%\\SysWOW64\\wshtcpip.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wsnmp32.dll", NULL},
    {L"wwsnmp32.dll", L"%systemroot%\\SysWOW64\\wsnmp32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wsock32.dll", NULL},
    {L"wwsock32.dll", L"%systemroot%\\SysWOW64\\wsock32.dll", NULL},
    {L"wwstdecod.dll", L"%systemroot%\\SysWOW64\\wstdecod.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wtsapi32.dll", NULL},
    {L"wwtsapi32.dll", L"%systemroot%\\SysWOW64\\wtsapi32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wuauclt.exe", NULL},
    {NULL, L"%systemroot%\\system32\\wuaueng.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wuauserv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wupdmgr.exe", NULL},
    {L"wwupdmgr.exe", L"%systemroot%\\SysWOW64\\wupdmgr.exe", NULL},
    {L"wwzcdlg.dll", L"%systemroot%\\SysWOW64\\wzcdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcdlg.dll", NULL},
    {L"wwzcsapi.dll", L"%systemroot%\\SysWOW64\\wzcsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcsapi.dll", NULL},
    {NULL, L"%systemroot%\\system32\\wzcsvc.dll", NULL},
    {L"wxactsrv.dll", L"%systemroot%\\SysWOW64\\xactsrv.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xactsrv.dll", NULL},
    {L"wxcopy.exe", L"%systemroot%\\SysWOW64\\xcopy.exe", NULL},
    {NULL, L"%systemroot%\\system32\\xcopy.exe", NULL},
    {L"wxenroll.dll", L"%systemroot%\\SysWOW64\\xenroll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xenroll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\xjis.nls", NULL},
    {NULL, L"%systemroot%\\system32\\xolehlp.dll", NULL},
    {L"wzipfldr.dll", L"%systemroot%\\SysWOW64\\zipfldr.dll", NULL},
};

#define CountPerFiles (sizeof(PerFiles)/sizeof(PerFiles[0]))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\tools\postbuildscripts\sfp\amd64_wks.h ===
PROTECT_FILE_ENTRY WksFiles[] =
{
    {L"wAcGenral.dll", L"%systemroot%\\AppPatch\\AcGenral.dll", NULL},
    {L"wAcLayers.dll", L"%systemroot%\\AppPatch\\AcLayers.dll", NULL},
    {L"wAcSpecfc.dll", L"%systemroot%\\AppPatch\\AcSpecfc.dll", NULL},
    {L"wAcXtrnal.dll", L"%systemroot%\\AppPatch\\AcXtrnal.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\isapi\\_vti_adm\\admin.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\_vti_adm\\admin.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\admwprox.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\adsiis.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\ahui.exe", NULL},
    {L"wahui.exe", L"%systemroot%\\SysWOW64\\ahui.exe", NULL},
    {NULL, L"%systemroot%\\system32\\apphelp.dll", NULL},
    {L"wapphelp.dll", L"%systemroot%\\SysWOW64\\apphelp.dll", NULL},
    {L"wapphelp.sdb", L"%systemroot%\\AppPatch\\apphelp.sdb", NULL},
    {NULL, L"%systemroot%\\help\\apps.chm", NULL},
    {NULL, L"%systemroot%\\system32\\asycfilt.dll", NULL},
    {L"wasycfilt.dll", L"%systemroot%\\SysWOW64\\asycfilt.dll", NULL},
    {NULL, L"%systemroot%\\system32\\atmlib.dll", NULL},
    {L"watmlib.dll", L"%systemroot%\\SysWOW64\\atmlib.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\isapi\\_vti_aut\\author.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\_vti_aut\\author.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\CertMap.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\CertWiz.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\cfgmgr32.dll", NULL},
    {L"wcfgmgr32.dll", L"%systemroot%\\SysWOW64\\cfgmgr32.dll", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\cfgwiz.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\Cnfgprts.ocx", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\coadmin.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\comctl32.dll", NULL},
    {L"wcomctl32.dll", L"%systemroot%\\SysWOW64\\comctl32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\comdlg32.dll", NULL},
    {L"wcomdlg32.dll", L"%systemroot%\\SysWOW64\\comdlg32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\compatUI.dll", NULL},
    {L"wcompatUI.dll", L"%systemroot%\\SysWOW64\\compatUI.dll", NULL},
    {NULL, L"%systemroot%\\system32\\crypt32.dll", NULL},
    {L"wcrypt32.dll", L"%systemroot%\\SysWOW64\\crypt32.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdlg.dll", NULL},
    {L"wcryptdlg.dll", L"%systemroot%\\SysWOW64\\cryptdlg.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptdll.dll", NULL},
    {L"wcryptdll.dll", L"%systemroot%\\SysWOW64\\cryptdll.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptext.dll", NULL},
    {L"wcryptext.dll", L"%systemroot%\\SysWOW64\\cryptext.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptnet.dll", NULL},
    {L"wcryptnet.dll", L"%systemroot%\\SysWOW64\\cryptnet.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptsvc.dll", NULL},
    {L"wcryptsvc.dll", L"%systemroot%\\SysWOW64\\cryptsvc.dll", NULL},
    {NULL, L"%systemroot%\\system32\\cryptui.dll", NULL},
    {L"wcryptui.dll", L"%systemroot%\\SysWOW64\\cryptui.dll", NULL},
    {NULL, L"%systemroot%\\system32\\dispex.dll", NULL},
    {L"wdispex.dll", L"%systemroot%\\SysWOW64\\dispex.dll", NULL},
    {NULL, L"%systemroot%\\fonts\\dosapp.fon", NULL},
    {NULL, L"%systemroot%\\AppPatch\\ia64\\drvmain.sdb", NULL},
    {L"wdrvmain.sdb", L"%systemroot%\\AppPatch\\drvmain.sdb", NULL},
    {NULL, L"%systemroot%\\system32\\dssenh.dll", NULL},
    {L"wdssenh.dll", L"%systemroot%\\SysWOW64\\dssenh.dll", NULL},
    {NULL, L"%systemroot%\\system32\\drivers\\fastfat.sys", NULL},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\servsupp\\fp4amsft.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4areg.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4atxt.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bots\\vinavbar\\fp4avnb.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4avss.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fp4awel.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\_vti_bin\\fpcount.exe", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fpexedll.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fpmmc.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\1033\\fpmmcsat.dll", L"fp40ext.inf"},
    {NULL, L"%commonprogramfiles%\\Microsoft Shared\\Web Server Extensions\\40\\bin\\fpremadm.exe", L"fp40ext.inf"},
    {NULL, L"%systemroot%\\fonts\\framd.ttf", NULL},
    {NULL, L"%systemroot%\\fonts\\framdit.ttf", NULL},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisext.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iismap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisreset.exe", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\iisrstap.dll", L"iis.inf"},
    {NULL, L"%systemroot%\\system32\\inetsrv\\iisrstas.exe", L"iis.inf