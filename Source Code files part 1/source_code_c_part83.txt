     mov     cl,4
        shr     dx,cl
        pop     cx
        mov     ax,es
        add     ax,dx
        mov     es,ax
        jmp     ScanLoop

Skip00:
        mov     dx,1                            ; Skip past this byte
        jmp     CheckCountUnderFlow

ScanAdd1ToCount:
        inc     cx
        mov     ScanIncCount,0
        jmp     AdjustScanPtr

S0:
        mov     ScanIncCount,1                  ; We'll need to increment Count next time we get a chance
        jmp     SetNewCount

ResetCount0:
        cmp     ExtentLen1,0                    ; Do we still have at least 64K bytes left to scan?
        jne     ResetContinue
        stc                                     ; We overran the end of the directory - corrupt/invalid directory
        ret
ResetContinue:
        sub     ExtentLen1,1

        add     bx,dx                           ; Adjust ES:BX to point to next record - we cross seg boundary here
        push    bx
        push    cx
        mov     cl,4
        shr     bx,cl
        pop     cx
        mov     ax,es
        add     ax,bx
        mov     es,ax
        pop     bx
        and     bx,0fh

        sub     dx,cx                           ; Get overflow amount
        je      S0                              ; If we ended right on the boundary we need to make special adjustments
        dec     dx
SetNewCount:
        mov     ax,0ffffh
        sub     ax,dx                           ;   and subtract it from 10000h
        mov     cx,ax                           ;   - this is the new count
        jmp     ScanLoop

ScanEnd:
        cmp     IsDir,1
        je      CheckDir

        test    byte ptr es:[bx][25],2          ; Is this a file?
        jnz     CheckCountUnderFlow             ;    No - go to next record
        jmp     CheckLen

CheckDir:
        test    byte ptr es:[bx][25],2          ; Is this a directory?
        jz      CheckCountUnderFlow             ;    No - go to next record

CheckLen:
        mov     al,EntryLen
        cmp     byte ptr es:[bx][32],al         ; Is the identifier length correct?
        jnz     CheckCountUnderFlow             ;    No - go to next record

        clc
        ret
ScanForEntry endp

;
; ExtRead - Do an INT 13h extended read
; NOTE: I force the offset of the Transfer buffer address to be 0
;       I force the high 2 words of the Starting absolute block number to be 0
;       - This allows for a max 4 GB medium - a safe assumption for now
;
; Entry:
;   Arg1 - word 0 (low word) of Number of 2048-byte blocks to transfer
;   Arg2 - word 1 (high word) of Number of 2048-byte blocks to transfer
;   Arg3 - segment of Transfer buffer address
;   Arg4 - word 0 (low word) of Starting absolute block number
;   Arg5 - word 1 of Starting absolute block number
;
; Exit
;   The following are modified:
;      Count0
;      Count1
;      Dest
;      Source0
;      Source1
;      PartialRead
;      NumBlocks
;      Disk Address Packet [DiskAddPack]
;
ExtRead proc near
        push    bp                              ; set up stack frame so we can get args
        mov     bp,sp

        push    bx                              ; Save registers used during this routine
        push    si
        push    dx
        push    ax

        mov     bx,offset DiskAddPack           ; Use BX as base to index into Disk Address Packet

        ; Set up constant fields
        mov     [bx][0],byte ptr 010h           ; Offset 0: Packet size = 16 bytes
        mov     [bx][1],byte ptr 0h             ; Offset 1: Reserved (must be 0)
        mov     [bx][3],byte ptr 0h             ; Offset 3: Reserved (must be 0)
        mov     [bx][4],word ptr 0h             ; Offset 4: Offset of Transfer buffer address (force 0)
        mov     [bx][12],word ptr 0h            ; Offset 12: Word 2 of Starting absolute block number (force 0)
        mov     [bx][14],word ptr 0h            ; Offset 14: Word 3 (high word) of Starting absolute block number (force 0)

;
; Initialize loop variables
;
        mov     ax,[bp][12]                     ; set COUNT to number of blocks to transfer
        mov     Count0,ax
        mov     ax,[bp][10]
        mov     Count1,ax

        mov     ax,[bp][8]                      ; set DEST to destination segment
        mov     Dest,ax

        mov     ax,[bp][6]                      ; set SOURCE to source lbn
        mov     Source0,ax
        mov     ax,[bp][4]
        mov     Source1,ax

ExtReadLoop:
;
; First check if COUNT <= 32
;
        cmp     Count1,word ptr 0h              ; Is upper word 0?
        jne     SetupPartialRead                ;   No - we're trying to read at least 64K blocks (128 MB)
        cmp     Count0,word ptr 20h             ; Is lower word greater than 32?
        jg      SetupPartialRead                ;   Yes - only read in 32-block increments

        mov     PartialRead,0                   ; Clear flag to indicate we are doing a full read

        mov     ax,Count0                       ; NUMBLOCKS = COUNT
        mov     NumBlocks,al                    ; Since Count0 < 32 we're OK just using low byte

        jmp     DoExtRead                       ; Do read

SetupPartialRead:
;
; Since COUNT > 32,
; Set flag indicating we are only doing a partial read
;
        mov     PartialRead,1

        mov     NumBlocks,20h                   ; NUMBYTES = 32

DoExtRead:
;
; Perform Extended Read
;
        mov     al,NumBlocks                    ; Offset 2: Number of 2048-byte blocks to transfer
        mov     [bx][2],al
        mov     ax,Dest                         ; Offset 6: Segment of Transfer buffer address
        mov     [bx][6],ax
        mov     ax,Source0                      ; Offset 8: Word 0 (low word) of Starting absolute block number
        mov     [bx][8],ax
        mov     ax,Source1                      ; Offset 10: Word 1 of Starting absolute block number
        mov     [bx][10],ax

        mov     si,offset DiskAddPack           ; Disk Address Packet in DS:SI
        mov     ah,042h                         ; Function = Extended Read
        mov     dl,DriveNum                     ; CD-ROM drive number
        int     13h

;
; Determine if we are done reading
;
        cmp     PartialRead,1                   ; Did we just do a partial read?
        jne     ExtReadDone                     ;   No - we're done

ReadjustValues:
;
; We're not done reading yet, so
; COUNT = COUNT - 32
;
        sub     Count0,020h                     ; Subtract low-order words
        sbb     Count1,0h                       ; Subtract high-order words

;
; Just read 32 blocks and have more to read
; Increment DEST to next 64K segment (this equates to adding 1000h to the segment)
;
        add     Dest,1000h
        jc      BootErr$mof                     ; Error if we overflowed

;
; SOURCE = SOURCE + 32 blocks
;
        add     Source0,word ptr 020h           ; Add low order words
        adc     Source1,word ptr 0h             ; Add high order words
        ; NOTE - I don't account for overflow - probably OK now since we already account for 4 GB medium

;
; jump back to top of loop to do another read
;
        jmp     ExtReadLoop

ExtReadDone:

        pop     ax                              ; Restore registers used during this routine
        pop     dx
        pop     si
        pop     bx

        mov     sp,bp                           ; restore BP and SP
        pop     bp

        ret
ExtRead endp

;
; ReadExtent - Read in an extent
;
;   Arg1 - segment to transfer extent to
;
; Entry:
;   ExtentLen0 = word 0 (low word) of extent length in bytes
;   ExtentLen1 = word 1 (high word) of extent length in bytes
;   ExtentLoc0 = word 0 (low word) of starting absolute block number of extent
;   ExtentLoc1 = word 1 of starting absolute block number of extent
;
; Exit:
;   ExtRead exit mods
;
ReadExtent proc near
        push    bp                              ; set up stack frame so we can get args
        mov     bp,sp

        push    cx                              ; Save registers used during this routine
        push    bx
        push    ax

        mov     cl,11                           ; Convert length in bytes to 2048-byte blocks
        mov     bx,ExtentLen1                   ; Directory length = BX:AX
        mov     ax,ExtentLen0

.386
        shrd    ax,bx,cl                        ; Shift AX, filling with BX
.8086
        shr     bx,cl                           ; BX:AX = number of blocks (rounded down)
        test    ExtentLen0,07ffh                ; If any of the low-order 11 bits are set we need to round up
        jz      ReadExtentNoRoundUp
        add     ax,1                            ; We need to round up by incrementing AX, and
        adc     bx,0                            ;   adding the carry to BX
ReadExtentNoRoundUp:

        push    ax                              ; Word 0 (low word) of Transfer size = AX
        push    bx                              ; Word 1 (high word) of Transfer size = BX
.286
        push    [bp][4]                         ; Segment used to transfer extent
.8086
        push    ExtentLoc0                      ; Word 0 (low word) of Starting absolute block number
        push    ExtentLoc1                      ; Word 1 of Starting absolute block number
        call    ExtRead
        add     sp,10                           ; Clean 5 arguments off the stack

        pop     ax                              ; Restore registers used during this routine
        pop     bx
        pop     cx

        mov     sp,bp                           ; restore BP and SP
        pop     bp

        ret
ReadExtent endp

;
; GetExtentInfo - Get extent location
;
; Entry:
;   ES:BX points to record
; Exit:
;   Location -> ExtentLoc1 and ExtentLoc0
;   Length -> ExtentLen1 and ExtentLen0
;
GetExtentInfo proc near
        push    ax                              ; Save registers used during this routine

        mov     ax,es:[bx][2]                   ; 32-bit LBN of extent
        mov     ExtentLoc0,ax                   ;   store low word
        mov     ax,es:[bx][4]
        mov     ExtentLoc1,ax                   ;   store high word
        mov     ax,es:[bx][10]                  ; 32-bit file length in bytes
        mov     ExtentLen0,ax                   ;   store low word
        mov     ax,es:[bx][12]
        mov     ExtentLen1,ax                   ;   store high word

        pop     ax                              ; Restore registers used during this routine

        ret
GetExtentInfo endp


LoadFileISO proc near
        push    bp
        mov     bp, sp       
;
; First thing, we need to read in the Primary Volume Descriptor so we can locate the root directory
;
.286
        push    01h                             ; Word 0 (low word) of Transfer size = 1 block (2048 bytes)
        push    0h                              ; Word 1 (high word) of Transfer size = 0
        push    DirSeg                          ; Segment of Transfer buffer = DirSeg
        push    VrsStartLbn                     ; Word 0 (low word) of Starting absolute block number = 10h
        push    0h                              ; Word 1 of Starting absolute block number = 0
.8086
        call    ExtRead
        add     sp,10                           ; Clean 5 arguments off the stack

;
; Determine the root directory location LBN -> ExtentLoc1:ExtentLoc0
; determine the root directory data length in bytes -> ExtentLen1:ExtentLen0
;
        mov     ax,DirSeg                       ; ES is set to segment used for storing PVD and directories
        mov     es,ax
ASSUME  ES:DirSeg
        mov     ax,es:[09eh]                    ; 32-bit LBN of extent at offset 158 in Primary Volume Descriptor
        mov     ExtentLoc0,ax                   ;   store low word
        mov     ax,es:[0a0h]
        mov     ExtentLoc1,ax                   ;   store high word
        mov     ax,es:[0a6h]                    ; 32-bit Root directory data length in bytes at offset 166 in Primary Volume Descriptor
        mov     ExtentLen0,ax                   ;   store low word
        mov     ax,es:[0a8h]
        mov     ExtentLen1,ax                   ;   store high word

;
; Now read in the root directory
;
.286
        push    DirSeg                          ; Segment used for transfer = DirSeg
.8086
        call    ReadExtent
        add     sp,2                            ; Clean 1 argument off the stack

;
; Scan for the presence of the I386 directory
; ES points to directory segment
;
        mov     EntryToFind, offset I386DIRNAME
        mov     EntryLen,4
        mov     IsDir,1
        call    ScanForEntry
        jc      EntryNotFound
;
; We found the I386 directory entry, so now get its extent location (offset -31 from filename ID)
; ES:[BX] still points to the directory record for the I386 directory
;
        call    GetExtentInfo

;
; Now read in the I386 directory
;
.286
        push    DirSeg                          ; Segment used for transfer = DirSeg
.8086
        call    ReadExtent
        add     sp,2                            ; Clean 1 argument off the stack

;
; Scan for the presence of the file that we need
; ES points to directory segment
;

        mov     ax, DirSeg
        mov     es, ax
        mov     ax, [bp][8]
        mov     EntryToFind, ax
        mov     al, [bp][6]
        mov     EntryLen, al
        mov     IsDir,0
        call    ScanForEntry
        jc      EntryNotFound
;
; We found the needed file, so now get its extent location (offset -31 from filename ID)
; ES:[BX] still points to the directory record for that code
;
        call    GetExtentInfo

;
; Now, go read the file
;
.286
        push    [bp][4]                         ; Segment used for transfer
.8086
        call    ReadExtent
        add     sp,2                            ; Clean 1 argument off the stack

EntryNotFound:
        pop     bp
        ret

LoadFileISO endp

;
; Entry:
;   arg0 - offset to file name to load from i386 directory  (bp[8])
;   arg1 - length of name in bytes
;   arg2 - segment to load data into                        (bp[4])
;
; Exit:
;   CARRY SET => not found,  CLEAR => found & loaded
;

LoadFile proc near

        cmp     MediaIsUdf,1
.386
        je      LoadFileUDF
        jmp     LoadFileISO
.286
        
LoadFile endp


OldInt08       DD  ?                            ; Default Int08 vector
TicksCount     dw  24H                          ; two seconds
DiskAddPack    db  16 dup (?)                   ; Disk Address Packet
PartialRead    db  0                            ; Boolean indicating whether or not we are doing a partial read
LOADERNAME     db  "SETUPLDR.BIN"
BOOTFIXNAME    db  "BOOTFIX.BIN"
I386DIRNAME    db  "I386"
DriveNum       db  ?                            ; Drive number used for INT 13h extended reads
ExtentLoc0     dw  ?                            ; Loader LBN - low word
ExtentLoc1     dw  ?                            ; Loader LBN - high word
ExtentLen0     dw  ?                            ; Loader Length - low word
ExtentLen1     dw  ?                            ; Loader Length - high word
Count0         dw  ?                            ; Read Count - low word
Count1         dw  ?                            ; Read Count - high word
Dest           dw  ?                            ; Read Destination segment
Source0        dw  ?                            ; Read Source - word 0 (low word)
Source1        dw  ?                            ; Read Source - word 1
NumBlocks      db  ?                            ; Number of blocks to Read
EntryToFind    dw  ?                            ; Offset of string trying to match in ScanForEntry
EntryLen       db  ?                            ; Length in bytes of entry to match in ScanForEntry
IsDir          db  ?                            ; Boolean indicating whether or not entry to match in ScanForEntry is a directory
ScanIncCount   db  ?                            ; Boolean indicating if we need to add 1 to Count after adjustment in ScanForEntry

MediaIsUdf     db  0                            ; Boolean if true => media contains UDF

;
; IsThereUDF - look to see if we have UDF here and,  if so,  locate the
;              root directory for use in file lookups later.
;

IsThereUDF proc near
        push    bp
        mov     bp, sp

        mov     ax, DirSeg
        mov     es, ax
;
; Look for an AVDP @ block 256 only
;

.286
        push    01h                             ; Word 0 (low word) of Transfer size
        push    0h                              ; Word 1 (high word) of Transfer size
        push    DirSeg                          ; Segment of Transfer buffer = DirSeg
        push    UdfAVDPLbn                      ; Word 0 (low word) of Starting absolute block number
        push    0h                              ; Word 1 of Starting absolute block number = 0
.8086
        call    ExtRead
        add     sp,10                           ; Clean 5 arguments off the stack

        cmp     word ptr es:[0], UdfDestagAVDP  ; No match - bail
.386
        jne     ExitIsThereUdf
.8086
        mov     al, es:[0]                      ; Calculate checksum - bytes 0+1+2
        add     al, es:[1]
        add     al, es:[2]

        mov     bx, 5                           ; ...+ bytes [5..15]
        
AVDPChecksum:
        add     al, byte ptr es:[bx]
        inc     bx
        cmp     bx, 16
        jne     AVDPCheckSum
        
        cmp     es:[4], al                      ; does it match the checksym in the descriptor?
.386
        jne     ExitIsThereUdf                  
.286        
;
; So the AVDP checked out - pretty good indicator that we have UDF here
; Now read the VDS extent, and locate the root directory.
;

.286
        mov     ax,es:[20]                      ; 32-bit PSN of extent
        mov     ExtentLoc0,ax                   ;   store low word
        mov     ax,es:[22]
        mov     ExtentLoc1,ax                   ;   store high word
        
        mov     ax,es:[16]                      ; 32-bit extent length (bytes)
        mov     ExtentLen0,ax                   ;   store low word
        xor     ax, ax
        cmp     es:[18], ax                     ; bail if high word nonzero
        jne     ExitIsThereUdf
        mov     ExtentLen1,0                    ;   store high word (force 0 i.e. <= 64kb length)

        push    DirSeg                          ; Segment used for transfer = DirSeg
.8086
        call    ReadExtent
        add     sp,2                            ; Clean 1 argument off the stack
.286
;
; Walk through looking for LVD (to get to FSD) and PD (to find partition start)
;
        mov     bx, 0
        
CheckForLvdPd:

        mov     ax, es:[bx]
        cmp     ax, UdfDestagLVD
        jne     NotLvd
;
; Found an LVD - extract the FSD location
;
        mov     ax,es:[bx][252]                 ; 32-bit LBN of extent
        mov     FSDLbn0,ax                      ;   store low word
        mov     ax,es:[bx][254]
        mov     FSDLbn1,ax                      ;   store high word
        jmp     CheckFoundBoth
NotLvd:
        cmp     ax, UdfDestagPD
        jne     NextVdsBlock
;
; Found PD - extract partition start
;
        mov     ax,es:[bx][188]                 ; 32-bit LBN of extent
        mov     PartitionLbn0,ax                ;   store low word
        
        cmp     word ptr es:[bx][190], 0        ; we don't currently support a partition
.386                                            ; start address > 128mb (64k blocks)
        jne     BootErr$bnf                     
.286
;
; If we've found both descriptors,  then we're done here
;
CheckFoundBoth:
        cmp     PartitionLbn0, 0
        je      NextVdsBlock
        cmp     FSDLbn0, 0ffffh                 ; FSD is typically at LBN 0, so we check against
        jne     FoundBoth                       ; an impossible LBN which we init the fields with.
        cmp     FSDLbn1, 0ffffh
        jne     FoundBoth
;
; No,  process next block in the VDS
;
NextVdsBlock:
        add     bx, 0800h                       ; next block of VDS
        cmp     bx, ExtentLen0                  ; if there are more blocks,  loop.
        jne     CheckForLvdPd

ExitIsThereUDF:
        pop     bp
        ret
        
FoundBoth:
;
; So we found both LVD and PVD,  so now load up the FSD
;
        mov     ax, PartitionLbn0               ; convert part rel FSD lbn -> absolute PSN
        add     ax, FSDLbn0

        push    1                               ; low word transfer size (blocks)
        push    0                               ; high...
        push    DirSeg                          ; Segment used for transfer = DirSeg
        push    ax                              ; low word start PSN
        push    0                               ; high
.8086
        call    ExtRead
        add     sp,10                           ; Clean arguments
.286
        cmp     word ptr es:[0], UdfDestagFSD   ; Is the tag right?
        jne     ExitIsThereUdf                  ; No,  bail out
;
; Extract the Lbn of the root directory FE
;
        mov     ax,es:[404]                      ; 32-bit LBN of extent
        mov     RootFELbn0,ax                   ;   store low word
        mov     ax,es:[406]
        mov     RootFELbn1,ax                   ;   store high word
        
        mov     MediaIsUdf, 1                   ; OK,  so we've found the root dir - done!
        jmp     ExitIsThereUDF
        
IsThereUDF endp


;
;   arg 0 = seg to load data to (bp[6])
;   arg 1 = FE lbn lowword      (bp[4])   (part rel LBN)
;
;   Exit - ExtentLocX and ExtentLenX will hold location/len of stream data
;
LoadStreamFromFE proc near
.8086
        push    bp
        mov     bp, sp

        mov     ax, [bp][4]                     ; FE LBN (low word)
        add     ax, PartitionLbn0               ; Add partition base PSN
.286
        push    1
        push    0
        push    DirSeg
        push    ax
        push    0

        call    ExtRead
        add     sp, 10                          ; Clean args

        mov     ax, DirSeg
        mov     es, ax

        cmp     word ptr es:[0], UdfDestagFE    ; Is the tag an FE?
.386
        jne     BootErr$bnf                     ; No,  error.
;
; Ensure L_AD == 8 (1 x short AD)
;
        cmp     word ptr es:[172], 8
        jne     BootErr$bnf                     ; No,  error.
        cmp     word ptr es:[174], 0
        jne     BootErr$bnf
;
; Skip any EAs
;
        cmp     word ptr es:[170], 0            ; better not be > 64Kb of EAs!
        jne     BootErr$bnf

        mov     bx, es:[168]                    ; pickup low word of L_EA to adjust AD offset later.
.286
;
; Extract the stream start Lbn / Length
;
        mov     ax, es:[bx][176]                ; low word of length (bytes)
        mov     ExtentLen0, ax
        mov     ax, es:[bx][178]                ; high word of length (bytes)
        mov     ExtentLen1, ax

        mov     ax, es:[bx][182]                ; high word of LBN
        mov     ExtentLoc1, ax

        mov     ax, es:[bx][180]                ; low word of LBN
        add     ax, PartitionLbn0               ; convert part rel -> absolute block number
        adc     ExtentLoc1, 0                   ; carry
        mov     ExtentLoc0, ax

        push    [bp][6]                         ; target segment
.8086
        call    ReadExtent
        add     sp,2                            ; Clean 1 argument off the stack
        
        pop     bp
        ret

LoadStreamFromFE endp

;
; On Entry:
;
;   arg[0] = dir FE (part. rel) LBN low word          (bp[10])
;   arg[1] = OFFSET name (ASCII)
;   arg[2] = name len                       
;   arg[3] = OFFSET DWORD to place FE LBN (part.rel)  (bp[4])
;
; On Exit:
;   output Lbn (arg3) = ffffffffh if not found.  Otherwise,  found.
;
FindFEForName proc near
.286
        push    bp
        mov     bp, sp
        push    es
;
; Set output to invalid LBN
;
        mov     bx, [bp][4]
        mov     [bx], 0ffffh
        mov     [bx][2], 0ffffh
;
; Load the directory stream from it's FE.  Dir could be large (64 bytes/entry), 
; so we load it into LoadSeg,  which gives us plenty of space (hopefully).
;
        push    LoadSeg
        push    [bp][10]                        ; Lbn low word
        call    LoadStreamFromFE
        add     sp, 4
;
; NOTE now the length of the directory stream is in ExtentLen0 / 1
;
        mov     ax, LoadSeg
        mov     es, ax

        mov     bx, 0                           ; Offset into dir of current FID
;
; Scan the directory for a matching FID
;
; es -> dir seg.
; bx -> offset in seg (es)
; si = offset in DS of required name
; 
ExamineFID:
        cmp     word ptr es:[bx], UdfDestagFID  ; Look like a FID?
.386
        jne     BootErr$bnf
.286
        mov     CurrentFidOffset, bx            ; Store the base offset of this FID.
        mov     cl, es:[bx][19]                 ; Get File identifier length (incl. comp.id)
        mov     dx, es:[bx][36]                 ; Get L_IU
        add     bx, dx                          ; Skip impuse area... BX->identifier start
        add     bx, 38                          ; sizeof( FID)
        mov     di, 0                           ; assume ASCII (skip 0 bytes / char)

        cmp     cl, 0                           ; Check for zero length ID (parent entry case)
        je      NoMatch
        
        mov     ch, es:[bx]                     ; read compression ID (first byte of identifier)
        dec     cl                              ; chop compid off length
        inc     bx                              ; skip compression ID
        
        cmp     ch, 10h                         ; is this a UTF-16 name?
        jne     MatchLength                     ; no,  compare as is, no skip req'd.
        
        shr     cl, 1                           ; yes, convert length to characters (/2)
        mov     di, 1                           ; skip 1 byte per char
        inc     bx                              ; skip high byte of first char (UDF Unicode is big endian)

MatchLength:
        cmp     cl, [bp][6]                     ; same length as desired match?
        jne     NoMatch                         ; no,  don't bother with the name comparison

        mov     si, [bp][8]                     ; Offset to name to match

MatchNextChar:
        mov     al, es:[bx]                     ; fetch FID char

        cmp     al, 061h                        ; upcase if neccessary
        jb      Upcased
        cmp     al, 07ah
        ja      UpCased
        and     al, 0dfh                        ; clear bit 5
Upcased:
        cmp     al, [si]                        ; compare against source char
        jne     NoMatch
        inc     si                              ; point to next char in source
        inc     bx                              ; point to next char in FID
        add     bx, di                          ; skip a zero byte if unicode
        dec     cl                              ; decrease chars remaining
        jnz     MatchNextChar
;
; We have a match!  Extract the location of the FE from the FID
;
        mov     bx, CurrentFidOffset
        mov     di, [bp][4]
        
        mov     ax, es:[bx][24]                 ; LBN low
        mov     [di], ax
        mov     ax, es:[bx][26]                 ; LBN high 
        mov     [di][2], ax
        
        jmp     ExitFindFEForName

NoMatch:
;
; This name doesn't match, so skip to next FID
;
        mov     ch, 0                           ; skip remaining chars. Clear CH. CL is bytes remaining .
        add     bx, cx
        cmp     di, 0                           ; If this was unicode, we need to add char count twice
        jz      CheckMoreFids
        add     bx, cx
        dec     bx                              ; step back one to compensate for skipping the first byte of first char
      
CheckMoreFids:
;
; So here we are.  BX is our offset in the current segment,  we need to
;
;   1. dword align offset (see ECMA 167 4/14.4.9),  and decrease bytes remaining.
;
        add     bx, 3
        and     bx, 0fffch

        mov     ax, bx                          ; get size of the FID we just processed
        sub     ax, CurrentFidOffset
        sub     ExtentLen0, ax                  ; and chop if off bytes remaining
        jae     AlignES
        sub     ExtentLen1, 1                   ; dec high word
        jb      ExitFindFEForName
;
;   2. compare offset to directory length.  For simplicity,  to avoid ever straddling
;      a segment boundry,  we'll advance the seg pointer every time we cross a 4kb 
;      aligned address (i.e. 0x1000).
;
AlignES:
        cmp     bx, 1000h
        jb      CheckEndOfDir
        sub     bx, 1000h                       ; dec offset by 4k
        mov     ax, es
        add     ax, 100h                        ; inc segment base reg compensate
        mov     es, ax
      
CheckEndOfDir:
.386
        cmp     ExtentLen1, 0                   ; high word != 0 -> plenty more.
        ja      ExamineFID
        cmp     ExtentLen0, 42                  ; remaining must be >= sizeof( FID) + 4 (min size with name)
        jae     ExamineFID                      ; More...
.286
ExitFindFEForName:
        pop     es
        pop     bp
        ret

FindFEForName endp


;
;   See LoadFile for params.
;
LoadFileUDF proc near

        push    bp
        mov     bp, sp
;
; Find I386 in the root dir,  if we haven't already.
;
        cmp     I386FELbn0, 0
        jne     AlreadyLookedupI386
        cmp     I386FELbn1, 0
        jne     AlreadyLookedupI386
        
        push    RootFELbn0                      ; NOTE only takes low word of LBN currently (limit 128Mb)
        push    offset I386DIRNAME
        push    4
        push    offset I386FELbn0
        
        call    FindFEForName
        add     sp, 8

        cmp     I386FELbn1, 0ffffh              ; Fatal error - didn't find i386
.386
        je      BootErr$bnf
.286
AlreadyLookedupI386:
;
; Now look for the target name in the I386 directory
;
        push    I386FELbn0                      ; NOTE only takes low word of LBN currently (limit 128Mb)
        push    [bp][8]                         ; Offset of name to find
        push    [bp][6]                         ; Length of entry
        push    offset CurrentFileFE0           ; Addr to store FE Lbn

        call    FindFEForName
        add     sp, 8

        cmp     CurrentFileFE0, 0ffffh          ; Did we find a match?
        jne     ExitLFUDFFound
        
        stc
        jmp     ExitLFUDF
;
; Yes, load the file.
;

ExitLFUDFFound:
        push    LoadSeg
        push    CurrentFileFE0
        call    LoadStreamFromFE
        add     sp, 4
        
        clc
        
ExitLFUDF:
        pop     bp
        ret
        
LoadFileUDF endp
                                                ; NOTE: Do NOT change the ordering of the next 3 decls.

UDFPVDSIG      db  0                            ; Opening 4 bytes of UDF SVD.
               db  "NSR"
UDFSVDSIG1XX   db  "02"                         ; Alternate final 2 bytes of UDF SVD,
UDFSVDSIG20X   db  "03"                         ; depends on version of UDF used.

PartitionLbn0  dw  0
FSDLbn0        dw  0ffffh
FSDLbn1        dw  0ffffh
RootFELbn0     dw  0
RootFELbn1     dw  0
RootDirIsXFE   db  0
I386FELbn0     dw  0
I386FELbn1     dw  0
CurrentFileFE0 dw  0
CurrentFileFE1 dw  0
CurrentFidOffset dw 0                       ; Offset within segment of current FID during name scan
tempmsg        dw 0

    .errnz  ($-ETFSBOOT) GT (EtfsCodeSize - 2)  ; FATAL PROBLEM: boot sector is too large

        org     (EtfsCodeSize - 2)
        db      55h,0aah

BootSectorEnd   label   dword

BootCode        ends


        END     ETFSBOOT
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\ger\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Drcken Sie eine beliebige Taste, um von der CD zu starten."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\pl\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Dowolny klawisz spowoduje rozruch z dysku CD."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\hu\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "CD-ROM-rl val indtshoz nyomjon meg egy gombot."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\it\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Premere un tasto per avviare da CD-ROM."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\pt\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Prima qualquer tecla para arrancar a partir do CD."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\nl\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Druk op een toets als u de computer vanaf cd-rom wilt opstarten."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\tr\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "CD'den onyukleme icin bir tusa basin."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\sv\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Tryck ned valfri tangent om du vill starta med CD-skivan."
                        db      0
; t-jholm: prolly this is displayed in OEM. I avoided swedish chars.
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.da\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.el\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\usa\etfsboot.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    etfsboot.inc
;
;Abstract:
;
;    This contains the message text that the boot sector prints out on
;    error conditions
;
;Author:
;
;    Steve Collins (stevec) 25-Oct-1995
;
;Revision History:
;
;    Calin Negreanu (calinn) 25-May-1998 - added MSG_BAD_BIOS
;    Calin Negreanu (calinn) 20-Apr-1999 - added MSG_BAD_BIOS_CODE
;           1 - Wrong load address (offset is not 0 or 7c00h)
;           2 - Wrong load address (offset is 7c00h but segment is not 0)
;           3 - Wrong load address (offset is 0 but segment is not 07c0h)
;           4 - Wrong drive letter (should be 80h-FFh)
;           5 - Boot sector was not completely loaded
;
;--

MSG_BAD_BIOS            db      "CDBOOT: Cannot boot from CD - Code: "
MSG_BAD_BIOS_CODE       db      "0"
                        db      0dh, 0ah, 0
MSG_NO_NTLDR            db      "CDBOOT: Couldn't find NTLDR"
                        db      0dh, 0ah, 0
MSG_MEM_OVERFLOW        db      "CDBOOT: Memory overflow error"
                        db      0dh, 0ah, 0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.es\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.fi\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.fr\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.br\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.hu\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.cs\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs\i386\usa\bootfix.inc ===
;++
;
;Copyright (c) 1995  Compaq Computer Corporation
;
;Module Name:
;
;    bootfix.inc
;
;Abstract:
;
;    This contains the message text that the ETFS boot sector prints out
;
;Author:
;
;    Calin Negreanu (calinn) 24-Feb-1999
;
;Revision History:
;
;--

MsgPressKey             db      0dh, 0ah, "Press any key to boot from CD."
                        db      0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.ger\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.it\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.nl\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.no\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.pl\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.ru\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.pt\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.tr\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\etfs.sv\makefile.inc ===
!include ..\etfs\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\dirent.inc ===
DIR_ENTRY	STRUC
dir_name	DB	11 DUP (?)
dir_attr	DB	?
dir_pad	DB	6 DUP (?)
dir_lastaccessdate	DW	?
dir_firstHigh	DW	?
dir_time	DW	?
dir_date	DW	?
dir_first	DW	?
dir_size_l	DW	?
dir_size_h	DW	?
DIR_ENTRY	ENDS
ATTR_READ_ONLY	EQU	01H
ATTR_HIDDEN	EQU	02H
ATTR_SYSTEM	EQU	04H
ATTR_VOLUME_ID	EQU	08H
ATTR_DIRECTORY	EQU	10H
ATTR_ARCHIVE	EQU	20H
ATTR_LONG_NAME	EQU	(ATTR_READ_ONLY OR ATTR_HIDDEN OR ATTR_SYSTEM OR ATTR_VOLUME_ID)
ATTR_DEVICE	EQU	40H
ATTR_ALL	EQU	(ATTR_HIDDEN OR ATTR_SYSTEM OR ATTR_DIRECTORY)
ATTR_IGNORE	EQU	(ATTR_READ_ONLY OR ATTR_ARCHIVE OR ATTR_DEVICE)
ATTR_CHANGEABLE	EQU	(ATTR_READ_ONLY OR ATTR_HIDDEN OR ATTR_SYSTEM OR ATTR_ARCHIVE)
DIRFREE	EQU	0E5H
MAXDIRENTRIES	EQU	65536
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\bpb.inc ===
BPB	STRUC
BPB_BytesPerSector	DW	?
BPB_SectorsPerCluster	DB	?
BPB_ReservedSectors	DW	?
BPB_NumberOfFATs	DB	?
BPB_RootEntries	DW	?
BPB_TotalSectors	DW	?
BPB_MediaDescriptor	DB	?
BPB_SectorsPerFAT	DW	?
BPB_SectorsPerTrack	DW	?
BPB_Heads	DW	?
BPB_HiddenSectors	DW	?
BPB_HiddenSectorsHigh	DW	?
BPB_BigTotalSectors	DW	?
BPB_BigTotalSectorsHigh	DW	?
BPB	ENDS

BIGFATBPB	STRUC
oldBPB	DB	SIZE BPB DUP (?)
BGBPB_BigSectorsPerFat	DW	?
BGBPB_BigSectorsPerFatHi	DW	?
BGBPB_ExtFlags	DW	?
BGBPB_FS_Version	DW	?
BGBPB_RootDirStrtClus	DW	?
BGBPB_RootDirStrtClusHi	DW	?
BGBPB_FSInfoSec	DW	?
BGBPB_BkUpBootSec	DW	?
BGBPB_Reserved	DW	6 DUP (?)
BIGFATBPB	ENDS
BGBPB_F_ActiveFATMsk	EQU	000FH
BGBPB_F_NoFATMirror	EQU	0080H
BGBPB_F_CompressedVol	EQU	0100H
FAT32_Curr_FS_Version	EQU	0000H
FAT32_Curr_Version	EQU	FAT32_Curr_FS_Version

A_BPB	STRUC
A_BPB_BytesPerSector	DW	?
A_BPB_SectorsPerCluster	DB	?
A_BPB_ReservedSectors	DW	?
A_BPB_NumberOfFATs	DB	?
A_BPB_RootEntries	DW	?
A_BPB_TotalSectors	DW	?
A_BPB_MediaDescriptor	DB	?
A_BPB_SectorsPerFAT	DW	?
A_BPB_SectorsPerTrack	DW	?
A_BPB_Heads	DW	?
A_BPB_HiddenSectors	DW	?
A_BPB_HiddenSectorsHigh	DW	?
A_BPB_BigTotalSectors	DW	?
A_BPB_BigTotalSectorsHigh	DW	?
A_BPB_Reserved	DB	6 DUP (?)
A_BPB	ENDS

A_BF_BPB	STRUC
A_BF_BPB_BytesPerSector	DW	?
A_BF_BPB_SectorsPerCluster	DB	?
A_BF_BPB_ReservedSectors	DW	?
A_BF_BPB_NumberOfFATs	DB	?
A_BF_BPB_RootEntries	DW	?
A_BF_BPB_TotalSectors	DW	?
A_BF_BPB_MediaDescriptor	DB	?
A_BF_BPB_SectorsPerFAT	DW	?
A_BF_BPB_SectorsPerTrack	DW	?
A_BF_BPB_Heads	DW	?
A_BF_BPB_HiddenSectors	DW	?
A_BF_BPB_HiddenSectorsHigh	DW	?
A_BF_BPB_BigTotalSectors	DW	?
A_BF_BPB_BigTotalSectorsHigh	DW	?
A_BF_BPB_BigSectorsPerFat	DW	?
A_BF_BPB_BigSectorsPerFatHi	DW	?
A_BF_BPB_ExtFlags	DW	?
A_BF_BPB_FS_Version	DW	?
A_BF_BPB_RootDirStrtClus	DW	?
A_BF_BPB_RootDirStrtClusHi	DW	?
A_BF_BPB_FSInfoSec	DW	?
A_BF_BPB_BkUpBootSec	DW	?
A_BF_BPB_Reserved	DW	6 DUP (?)
A_BF_BPB	ENDS

EXT_BPB_INFO	STRUC
EBPB_BYTESPERSECTOR	DW	?
EBPB_SECTORSPERCLUSTER	DB	?
EBPB_RESERVEDSECTORS	DW	?
EBPB_NUMBEROFFATS	DB	?
EBPB_ROOTENTRIES	DW	?
EBPB_TOTALSECTORS	DW	?
EBPB_MEDIADESCRIPTOR	DB	?
EBPB_SECTORSPERFAT	DW	?
EBPB_SECTORSPERTRACK	DW	?
EBPB_HEADS	DW	?
EBPB_HIDDENSECTOR	DD	?
EBPB_BIGTOTALSECTORS	DD	?
EXT_BPB_INFO	ENDS

EXT_BIGBPB_INFO	STRUC
EBGBPB_BYTESPERSECTOR	DW	?
EBGBPB_SECTORSPERCLUSTER	DB	?
EBGBPB_RESERVEDSECTORS	DW	?
EBGBPB_NUMBEROFFATS	DB	?
EBGBPB_ROOTENTRIES	DW	?
EBGBPB_TOTALSECTORS	DW	?
EBGBPB_MEDIADESCRIPTOR	DB	?
EBGBPB_SECTORSPERFAT	DW	?
EBGBPB_SECTORSPERTRACK	DW	?
EBGBPB_HEADS	DW	?
EBGBPB_HIDDENSECTOR	DD	?
EBGBPB_BIGTOTALSECTORS	DD	?
EBGBPB_BIGSECTORSPERFAT	DD	?
EBGBPB_EXTFLAGS	DW	?
EBGBPB_FS_VERSION	DW	?
EBGBPB_ROOTDIRSTRTCLUS	DD	?
EBGBPB_FSINFOSEC	DW	?
EBGBPB_BKUPBOOTSEC	DW	?
EBGBPB_RESERVED	DD	3 DUP (?)
EXT_BIGBPB_INFO	ENDS
.errnz  EXT_BPB_INFO.EBPB_BYTESPERSECTOR            NE  BPB.BPB_BytesPerSector
.errnz  EXT_BPB_INFO.EBPB_SECTORSPERCLUSTER         NE  BPB.BPB_SectorsPerCluster
.errnz  EXT_BPB_INFO.EBPB_RESERVEDSECTORS           NE  BPB.BPB_ReservedSectors
.errnz  EXT_BPB_INFO.EBPB_NUMBEROFFATS              NE  BPB.BPB_NumberOfFATs
.errnz  EXT_BPB_INFO.EBPB_ROOTENTRIES               NE  BPB.BPB_RootEntries
.errnz  EXT_BPB_INFO.EBPB_TOTALSECTORS              NE  BPB.BPB_TotalSectors
.errnz  EXT_BPB_INFO.EBPB_MEDIADESCRIPTOR           NE  BPB.BPB_MediaDescriptor
.errnz  EXT_BPB_INFO.EBPB_SECTORSPERFAT             NE  BPB.BPB_SectorsPerFAT
.errnz  EXT_BPB_INFO.EBPB_SECTORSPERTRACK           NE  BPB.BPB_SectorsPerTrack
.errnz  EXT_BPB_INFO.EBPB_HEADS                     NE  BPB.BPB_Heads
.errnz  EXT_BPB_INFO.EBPB_HIDDENSECTOR              NE  BPB.BPB_HiddenSectors
.errnz  EXT_BPB_INFO.EBPB_BIGTOTALSECTORS           NE  BPB.BPB_BigTotalSectors
.errnz  (SIZE EXT_BPB_INFO) NE  (SIZE BPB)

.errnz  EXT_BIGBPB_INFO.EBGBPB_BYTESPERSECTOR       NE  EXT_BPB_INFO.EBPB_BYTESPERSECTOR
.errnz  EXT_BIGBPB_INFO.EBGBPB_SECTORSPERCLUSTER    NE  EXT_BPB_INFO.EBPB_SECTORSPERCLUSTER
.errnz  EXT_BIGBPB_INFO.EBGBPB_RESERVEDSECTORS      NE  EXT_BPB_INFO.EBPB_RESERVEDSECTORS
.errnz  EXT_BIGBPB_INFO.EBGBPB_NUMBEROFFATS         NE  EXT_BPB_INFO.EBPB_NUMBEROFFATS
.errnz  EXT_BIGBPB_INFO.EBGBPB_ROOTENTRIES          NE  EXT_BPB_INFO.EBPB_ROOTENTRIES
.errnz  EXT_BIGBPB_INFO.EBGBPB_TOTALSECTORS         NE  EXT_BPB_INFO.EBPB_TOTALSECTORS
.errnz  EXT_BIGBPB_INFO.EBGBPB_MEDIADESCRIPTOR      NE  EXT_BPB_INFO.EBPB_MEDIADESCRIPTOR
.errnz  EXT_BIGBPB_INFO.EBGBPB_SECTORSPERFAT        NE  EXT_BPB_INFO.EBPB_SECTORSPERFAT
.errnz  EXT_BIGBPB_INFO.EBGBPB_SECTORSPERTRACK      NE  EXT_BPB_INFO.EBPB_SECTORSPERTRACK
.errnz  EXT_BIGBPB_INFO.EBGBPB_HEADS                NE  EXT_BPB_INFO.EBPB_HEADS
.errnz  EXT_BIGBPB_INFO.EBGBPB_HIDDENSECTOR         NE  EXT_BPB_INFO.EBPB_HIDDENSECTOR
.errnz  EXT_BIGBPB_INFO.EBGBPB_BIGTOTALSECTORS      NE  EXT_BPB_INFO.EBPB_BIGTOTALSECTORS



EXT_IBMBOOT_HEADER	STRUC
EXT_BOOT_JUMP	DB	3 DUP (?)
EXT_BOOT_OEM	DB	8 DUP (?)
EXT_BOOT_BPB	DB	SIZE EXT_BPB_INFO DUP (?)
EXT_PHYDRV	DB	?
EXT_CURHD	DB	?
EXT_BOOT_SIG	DB	?
EXT_BOOT_SERIAL	DD	?
EXT_BOOT_VOL_LABEL	DB	11 DUP (?)
EXT_SYSTEM_ID	DB	8 DUP (?)
EXT_IBMBOOT_HEADER	ENDS

EXT_BIGIBMBOOT_HEADER	STRUC
EXT_BGBOOT_JUMP	DB	3 DUP (?)
EXT_BGBOOT_OEM	DB	8 DUP (?)
EXT_BGBOOT_BPB	DB	SIZE EXT_BIGBPB_INFO DUP (?)
EXT_BGPHYDRV	DB	?
EXT_BGCURHD	DB	?
EXT_BGBOOT_SIG	DB	?
EXT_BGBOOT_SERIAL	DD	?
EXT_BGBOOT_VOL_LABEL	DB	11 DUP (?)
EXT_BGSYSTEM_ID	DB	8 DUP (?)
EXT_BIGIBMBOOT_HEADER	ENDS
.errnz  EXT_BIGIBMBOOT_HEADER.EXT_BGBOOT_JUMP   NE  EXT_IBMBOOT_HEADER.EXT_BOOT_JUMP
.errnz  EXT_BIGIBMBOOT_HEADER.EXT_BGBOOT_OEM    NE  EXT_IBMBOOT_HEADER.EXT_BOOT_OEM
.errnz  EXT_BIGIBMBOOT_HEADER.EXT_BGBOOT_BPB    NE  EXT_IBMBOOT_HEADER.EXT_BOOT_BPB
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\bootfat.h ===
#define FATBOOTCODE_SIZE 512


unsigned char FatBootCode[] = {
235,60,144,77,83,87,73,78,52,46,49,0,2,8,1,0,
2,0,2,3,81,248,8,0,17,0,4,0,1,0,0,0,
0,0,0,0,128,0,41,0,0,0,0,78,79,32,78,65,
77,69,32,32,32,32,70,65,84,49,50,32,32,32,51,201,
142,209,188,240,123,142,217,184,0,32,142,192,252,189,0,124,
56,78,36,125,36,139,193,153,232,60,1,114,28,131,235,58,
102,161,28,124,38,102,59,7,38,138,87,252,117,6,128,202,
2,136,86,2,128,195,16,115,235,51,201,138,70,16,152,247,
102,22,3,70,28,19,86,30,3,70,14,19,209,139,118,17,
96,137,70,252,137,86,254,184,32,0,247,230,139,94,11,3,
195,72,247,243,1,70,252,17,78,254,97,191,0,0,232,230,
0,114,57,38,56,45,116,23,96,177,11,190,161,125,243,166,
97,116,50,78,116,9,131,199,32,59,251,114,230,235,220,160,
251,125,180,125,139,240,172,152,64,116,12,72,116,19,180,14,
187,7,0,205,16,235,239,160,253,125,235,230,160,252,125,235,
225,205,22,205,25,38,139,85,26,82,176,1,187,0,0,232,
59,0,114,232,91,138,86,36,190,11,124,139,252,199,70,240,
61,125,199,70,244,41,125,140,217,137,78,242,137,78,246,198,
6,150,125,203,234,3,0,0,32,15,182,200,102,139,70,248,
102,3,70,28,102,139,208,102,193,234,16,235,94,15,182,200,
74,74,138,70,13,50,228,247,226,3,70,252,19,86,254,235,
74,82,80,6,83,106,1,106,16,145,139,70,24,150,146,51,
210,247,246,145,247,246,66,135,202,247,118,26,138,242,138,232,
192,204,2,10,204,184,1,2,128,126,2,14,117,4,180,66,
139,244,138,86,36,205,19,97,97,114,11,64,117,1,66,3,
94,11,73,117,6,248,195,65,187,0,0,96,102,106,0,235,
176,78,84,76,68,82,32,32,32,32,32,32,13,10,78,84,
76,68,82,32,105,115,32,109,105,115,115,105,110,103,255,13,
10,68,105,115,107,32,101,114,114,111,114,255,13,10,80,114,
101,115,115,32,97,110,121,32,107,101,121,32,116,111,32,114,
101,115,116,97,114,116,13,10,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,172,191,204,85,170
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\bootf32.h ===
#define FAT32BOOTCODE_SIZE 1536


unsigned char Fat32BootCode[] = {
235,88,144,77,83,87,73,78,52,46,49,0,2,2,8,0,
1,0,4,0,0,248,0,0,17,0,4,0,1,0,0,0,
0,0,32,0,224,31,0,0,0,0,0,0,0,0,0,0,
1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,0,41,0,0,0,0,78,79,32,78,65,77,69,32,32,
32,32,70,65,84,51,50,32,32,32,51,201,142,209,188,244,
123,142,193,142,217,189,0,124,136,78,2,138,86,64,180,8,
205,19,115,5,185,255,255,138,241,102,15,182,198,64,102,15,
182,209,128,226,63,247,226,134,205,192,237,6,65,102,15,183,
201,102,247,225,102,137,70,248,131,126,22,0,117,56,131,126,
42,0,119,50,102,139,70,28,102,131,192,12,187,0,128,185,
1,0,232,43,0,233,72,3,160,250,125,180,125,139,240,172,
132,192,116,23,60,255,116,9,180,14,187,7,0,205,16,235,
238,160,251,125,235,229,160,249,125,235,224,152,205,22,205,25,
102,96,102,59,70,248,15,130,74,0,102,106,0,102,80,6,
83,102,104,16,0,1,0,128,126,2,0,15,133,32,0,180,
65,187,170,85,138,86,64,205,19,15,130,28,0,129,251,85,
170,15,133,20,0,246,193,1,15,132,13,0,254,70,2,180,
66,138,86,64,139,244,205,19,176,249,102,88,102,88,102,88,
102,88,235,42,102,51,210,102,15,183,78,24,102,247,241,254,
194,138,202,102,139,208,102,193,234,16,247,118,26,134,214,138,
86,64,138,232,192,228,6,10,204,184,1,2,205,19,102,97,
15,130,84,255,129,195,0,2,102,64,73,15,133,113,255,195,
78,84,76,68,82,32,32,32,32,32,32,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,13,10,78,84,
76,68,82,32,105,115,32,109,105,115,115,105,110,103,255,13,
10,68,105,115,107,32,101,114,114,111,114,255,13,10,80,114,
101,115,115,32,97,110,121,32,107,101,121,32,116,111,32,114,
101,115,116,97,114,116,13,10,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,172,191,204,0,0,85,170,
82,82,97,65,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,114,114,65,97,255,255,255,255,2,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170,
102,15,182,70,16,102,139,78,36,102,247,225,102,3,70,28,
102,15,183,86,14,102,3,194,102,137,70,252,102,199,70,244,
255,255,255,255,102,139,70,44,102,131,248,2,15,130,166,252,
102,61,248,255,255,15,15,131,156,252,102,80,102,131,232,2,
102,15,182,94,13,139,243,102,247,227,102,3,70,252,187,0,
130,139,251,185,1,0,232,135,252,56,45,116,30,177,11,86,
190,112,125,243,166,94,116,27,3,249,131,199,21,59,251,114,
232,78,117,218,102,88,232,101,0,114,191,131,196,4,233,85,
252,0,32,131,196,4,139,117,9,139,125,15,139,198,102,193,
224,16,139,199,102,131,248,2,15,130,58,252,102,61,248,255,
255,15,15,131,48,252,102,80,102,131,232,2,102,15,182,78,
13,102,247,225,102,3,70,252,187,0,0,6,142,6,129,128,
232,29,252,7,102,88,193,235,4,1,30,129,128,232,14,0,
15,131,2,0,114,208,138,86,64,234,0,0,0,32,102,193,
224,2,232,17,0,38,102,139,1,102,37,255,255,255,15,102,
61,248,255,255,15,195,191,0,126,102,15,183,78,11,102,51,
210,102,247,241,102,59,70,244,116,58,102,137,70,244,102,3,
70,28,102,15,183,78,14,102,3,193,102,15,183,94,40,131,
227,15,116,22,58,94,16,15,131,171,251,82,102,139,200,102,
139,70,36,102,247,227,102,3,193,90,82,139,223,185,1,0,
232,157,251,90,139,218,195,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\boot98f.h ===
#define PC98FATBOOTCODE_SIZE 512


unsigned char PC98FatBootCode[] = {
235,60,144,77,83,87,73,78,52,46,49,0,2,8,4,0,
2,0,12,0,0,248,112,0,35,0,7,0,245,0,0,0,
196,105,3,0,128,0,41,0,0,0,0,78,79,32,78,65,
77,69,32,32,32,32,70,65,84,49,50,32,32,32,51,192,
142,208,188,0,124,14,31,184,64,0,142,192,38,160,132,1,
162,36,0,86,139,54,11,0,168,16,117,32,180,132,51,219,
205,27,114,4,133,219,117,3,187,0,1,139,198,51,210,247,
243,163,64,0,184,0,128,247,246,162,66,0,184,32,0,247,
38,17,0,78,3,198,131,210,0,70,247,246,139,200,160,16,
0,50,228,247,38,22,0,3,6,14,0,131,210,0,163,75,
0,137,22,77,0,3,193,163,62,0,81,86,187,0,16,142,
195,51,219,51,210,184,0,64,247,246,80,14,232,149,0,88,
114,115,51,219,185,0,2,139,251,81,185,11,0,190,227,1,
243,166,89,116,5,131,195,32,226,237,133,201,94,89,117,16,
1,6,75,0,131,22,77,0,0,43,200,119,189,235,70,144,
38,139,87,26,184,1,0,129,62,11,0,0,1,117,1,64,
187,0,32,142,195,51,219,82,14,232,47,0,91,114,38,141,
54,11,0,141,62,67,0,140,216,163,69,0,199,6,67,0,
59,1,163,73,0,199,6,71,0,84,1,138,22,36,0,93,
234,3,0,0,32,176,6,230,55,235,254,80,74,74,160,13,
0,50,228,247,226,3,6,62,0,131,210,0,163,75,0,137,
22,77,0,88,50,228,61,0,0,117,2,254,196,86,87,85,
139,240,139,235,139,14,75,0,139,22,77,0,82,81,160,36,
0,168,16,116,39,80,139,193,139,30,24,0,247,243,246,54,
26,0,138,244,138,200,160,12,0,50,237,60,0,116,6,254,
197,208,232,235,246,88,42,218,254,194,235,28,36,127,139,30,
64,0,209,235,114,6,209,225,209,210,235,246,3,14,28,0,
19,22,30,0,138,30,66,0,50,255,59,243,115,2,139,222,
83,82,147,247,38,11,0,147,90,83,180,86,205,27,95,91,
89,90,114,11,3,203,131,210,0,3,239,43,243,117,141,93,
95,94,203,78,84,76,68,82,32,32,32,32,32,32,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\bootsec.inc ===
BOOT_SIZE	EQU	512

BOOTSEC	STRUC
bsJump	DB	3 DUP (?)
bsOemName	DB	8 DUP (?)
bsBPB	DB	SIZE BPB DUP (?)
bsDriveNumber	DB	?
bsReserved1	DB	?
bsBootSignature	DB	?
bsVolumeID	DD	?
bsVolumeLabel	DB	11 DUP (?)
bsFileSysType	DB	8 DUP (?)
BOOTSEC	ENDS

BIGFATBOOTSEC	STRUC
bgbsJump	DB	3 DUP (?)
bgbsOemName	DB	8 DUP (?)
bgbsBPB	DB	SIZE BIGFATBPB DUP (?)
bgbsDriveNumber	DB	?
bgbsReserved1	DB	?
bgbsBootSignature	DB	?
bgbsVolumeID	DD	?
bgbsVolumeLabel	DB	11 DUP (?)
bgbsFileSysType	DB	8 DUP (?)
BIGFATBOOTSEC	ENDS
BOOTSECTRAILSIGL	EQU	0000H
BOOTSECTRAILSIGH	EQU	0AA55H
BOOTSECTRAILSIG	EQU	0AA550000H
OFFSETTRLSIG	EQU	<(BOOT_SIZE-4)>
BOOT_SIGNATURE	EQU	<(BOOT_SIZE-2)>
BOOT_TRAILSIG	EQU	BOOTSECTRAILSIGH
DOREAD_OFFSET	EQU	014BH
DOREAD_MOVDL_OFFSET	EQU	0016H
DOREAD_LENGTH	EQU	0035H
MBR_BOOTFAILBACKUP	EQU	6
MBR_BOOTFLBCKUP	EQU	MBR_BOOTFAILBACKUP
SECONDBOOTSECSIG	EQU	41615252H
SECONDBOOTSECSIGL	EQU	5252H
SECONDBOOTSECSIGH	EQU	4161H

BIGFATBOOTFSINFO	STRUC
bfFSInf_Sig	DD	?
bfFSInf_free_clus_cnt	DD	?
bfFSInf_next_free_clus	DD	?
bfFSInf_resvd	DD	3 DUP (?)
BIGFATBOOTFSINFO	ENDS
EXT_BIGIBMBOOT_FSINFO	EQU	<BIGFATBOOTFSINFO>
EXT_BGFSInf_Sig	EQU	<bfFSInf_Sig>
EXT_BGFSInf_free_clus_cnt	EQU	<bfFSInf_free_clus_cnt>
EXT_BGFSInf_resvd	EQU	<bfFSInf_next_free_clus>
FSINFOSIG	EQU	61417272H
FSINFOSIGL	EQU	7272H
FSINFOSIGH	EQU	6141H
OFFSETFSINFOFRMSECSTRT	EQU	<(OFFSETTRLSIG-SIZE BIGFATBOOTFSINFO)>
OFFSETEXTFSINFOFRMSECSTRT	EQU	<OFFSETFSINFOFRMSECSTRT>
BS2BYTJMP	EQU	0EBH
BS3BYTJMP	EQU	0E9H
BOOT_2BYTJMP	EQU	BS2BYTJMP
BOOT_3BYTJMP	EQU	BS3BYTJMP
BSEXTSIG	EQU	29H
EXT_BOOT_SIGNATURE	EQU	BSEXTSIG
BSFSTYPFAT12	EQU	<"FAT12   ">
BSFSTYPFAT16	EQU	<"FAT16   ">
BSFSTYPFAT32	EQU	<"FAT32   ">
ifdef NOTFAT32
IBMLOADSIZE	EQU	3
else
IBMLOADSIZE	EQU	4
endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\boot98f2.h ===
#define PC98FAT32BOOTCODE_SIZE 1536


unsigned char PC98Fat32BootCode[] = {
235,88,144,77,83,87,73,78,52,46,49,0,2,2,8,0,
1,0,4,0,0,248,0,0,17,0,4,0,1,0,0,0,
0,0,32,0,224,31,0,0,0,0,0,0,0,0,0,0,
1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
128,0,41,0,0,0,0,78,79,32,78,65,77,69,32,32,
32,32,70,65,84,51,50,32,32,32,86,87,140,200,142,216,
190,0,0,252,185,0,1,51,192,142,192,191,0,124,243,165,
95,94,184,0,0,80,184,0,124,5,127,0,144,80,203,51,
201,142,209,188,244,123,142,193,142,217,189,0,124,86,160,132,
5,136,70,64,131,126,22,0,117,73,131,126,42,0,119,67,
102,139,70,28,102,131,192,12,187,0,128,185,1,0,232,64,
0,233,76,3,160,250,125,180,125,5,2,0,191,0,0,139,
240,184,0,160,142,192,50,228,172,60,13,116,27,60,255,116,
3,171,235,237,160,251,125,180,125,5,2,0,139,240,191,160,
0,235,222,160,249,125,235,207,184,0,0,205,24,176,0,230,
240,102,96,102,15,164,194,16,139,200,139,235,187,0,2,30,
51,192,142,216,160,132,5,31,36,127,180,6,205,27,102,97,
114,162,129,195,0,2,102,64,73,117,214,195,78,84,76,68,
82,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,13,10,78,84,
76,68,82,32,105,115,32,109,105,115,115,105,110,103,255,13,
10,68,105,115,107,32,101,114,114,111,114,255,13,10,80,114,
101,115,115,32,97,110,121,32,107,101,121,32,116,111,32,114,
101,115,116,97,114,116,13,10,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,172,191,204,0,0,85,170,
82,82,97,65,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,114,114,65,97,255,255,255,255,2,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170,
102,15,182,70,16,102,139,78,36,102,247,225,102,3,70,28,
102,15,183,86,14,102,3,194,102,137,70,252,102,199,70,244,
255,255,255,255,102,139,70,44,102,131,248,2,15,130,179,252,
102,61,248,255,255,15,15,131,169,252,102,80,102,131,232,2,
102,15,182,94,13,139,243,102,247,227,102,3,70,252,187,0,
130,139,251,185,1,0,232,152,252,56,45,116,30,177,11,86,
190,28,125,243,166,94,116,27,3,249,131,199,21,59,251,114,
232,78,117,218,102,88,232,105,0,114,191,131,196,4,233,98,
252,0,32,131,196,4,139,117,9,139,125,15,139,198,102,193,
224,16,139,199,102,131,248,2,15,130,71,252,102,61,248,255,
255,15,15,131,61,252,102,80,102,131,232,2,102,15,182,78,
13,102,247,225,102,3,70,252,187,0,0,6,142,6,129,128,
232,46,252,7,102,88,193,235,4,1,30,129,128,232,18,0,
15,131,2,0,114,208,138,86,64,141,118,11,93,234,0,0,
0,32,102,193,224,2,232,17,0,38,102,139,1,102,37,255,
255,255,15,102,61,248,255,255,15,195,191,0,126,102,15,183,
78,11,102,51,210,102,247,241,102,59,70,244,116,58,102,137,
70,244,102,3,70,28,102,15,183,78,14,102,3,193,102,15,
183,94,40,131,227,15,116,22,58,94,16,15,131,180,251,82,
102,139,200,102,139,70,36,102,247,227,102,3,193,90,82,139,
223,185,1,0,232,170,251,90,139,218,195,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\9xboot32.h ===
unsigned char Fat32BootCode9x[] =
{
    0xEB,0x58,0x90,0x4D,0x53,0x57,0x49,0x4E,
    0x34,0x2E,0x31,0x00,0x02,0x02,0x08,0x00,
    0x01,0x00,0x04,0x00,0x00,0xF8,0x00,0x00,
    0x11,0x00,0x04,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x20,0x00,0xE0,0x1F,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x06,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x80,0x00,0x29,0x00,0x00,0x00,0x00,0x4E,
    0x4F,0x20,0x4E,0x41,0x4D,0x45,0x20,0x20,
    0x20,0x20,0x46,0x41,0x54,0x33,0x32,0x20,
    0x20,0x20,0xFA,0x33,0xC9,0x8E,0xD1,0xBC,
    0xF8,0x7B,0x8E,0xC1,0xBD,0x78,0x00,0xC5,
    0x76,0x00,0x1E,0x56,0x16,0x55,0xBF,0x22,
    0x05,0x89,0x7E,0x00,0x89,0x4E,0x02,0xB1,
    0x0B,0xFC,0xF3,0xA4,0x8E,0xD9,0xBD,0x00,
    0x7C,0xC6,0x45,0xFE,0x0F,0x8B,0x46,0x18,
    0x88,0x45,0xF9,0x38,0x4E,0x40,0x7D,0x25,
    0x8B,0xC1,0x99,0xBB,0x00,0x07,0xE8,0x97,
    0x00,0x72,0x1A,0x83,0xEB,0x3A,0x66,0xA1,
    0x1C,0x7C,0x66,0x3B,0x07,0x8A,0x57,0xFC,
    0x75,0x06,0x80,0xCA,0x02,0x88,0x56,0x02,
    0x80,0xC3,0x10,0x73,0xED,0xBF,0x02,0x00,
    0x83,0x7E,0x16,0x00,0x75,0x45,0x8B,0x46,
    0x1C,0x8B,0x56,0x1E,0xB9,0x03,0x00,0x49,
    0x40,0x75,0x01,0x42,0xBB,0x00,0x7E,0xE8,
    0x5F,0x00,0x73,0x26,0xB0,0xF8,0x4F,0x74,
    0x1D,0x8B,0x46,0x32,0x33,0xD2,0xB9,0x03,
    0x00,0x3B,0xC8,0x77,0x1E,0x8B,0x76,0x0E,
    0x3B,0xCE,0x73,0x17,0x2B,0xF1,0x03,0x46,
    0x1C,0x13,0x56,0x1E,0xEB,0xD1,0x73,0x0B,
    0xEB,0x27,0x83,0x7E,0x2A,0x00,0x77,0x03,
    0xE9,0xFD,0x02,0xBE,0x7E,0x7D,0xAC,0x98,
    0x03,0xF0,0xAC,0x84,0xC0,0x74,0x17,0x3C,
    0xFF,0x74,0x09,0xB4,0x0E,0xBB,0x07,0x00,
    0xCD,0x10,0xEB,0xEE,0xBE,0x81,0x7D,0xEB,
    0xE5,0xBE,0x7F,0x7D,0xEB,0xE0,0x98,0xCD,
    0x16,0x5E,0x1F,0x66,0x8F,0x04,0xCD,0x19,
    0x41,0x56,0x66,0x6A,0x00,0x52,0x50,0x06,
    0x53,0x6A,0x01,0x6A,0x10,0x8B,0xF4,0x60,
    0x80,0x7E,0x02,0x0E,0x75,0x04,0xB4,0x42,
    0xEB,0x1D,0x91,0x92,0x33,0xD2,0xF7,0x76,
    0x18,0x91,0xF7,0x76,0x18,0x42,0x87,0xCA,
    0xF7,0x76,0x1A,0x8A,0xF2,0x8A,0xE8,0xC0,
    0xCC,0x02,0x0A,0xCC,0xB8,0x01,0x02,0x8A,
    0x56,0x40,0xCD,0x13,0x61,0x8D,0x64,0x10,
    0x5E,0x72,0x0A,0x40,0x75,0x01,0x42,0x03,
    0x5E,0x0B,0x49,0x75,0xB4,0xC3,0x03,0x18,
    0x01,0x27,0x0D,0x0A,0x49,0x6E,0x76,0x61,
    0x6C,0x69,0x64,0x20,0x73,0x79,0x73,0x74,
    0x65,0x6D,0x20,0x64,0x69,0x73,0x6B,0xFF,
    0x0D,0x0A,0x44,0x69,0x73,0x6B,0x20,0x49,
    0x2F,0x4F,0x20,0x65,0x72,0x72,0x6F,0x72,
    0xFF,0x0D,0x0A,0x52,0x65,0x70,0x6C,0x61,
    0x63,0x65,0x20,0x74,0x68,0x65,0x20,0x64,
    0x69,0x73,0x6B,0x2C,0x20,0x61,0x6E,0x64,
    0x20,0x74,0x68,0x65,0x6E,0x20,0x70,0x72,
    0x65,0x73,0x73,0x20,0x61,0x6E,0x79,0x20,
    0x6B,0x65,0x79,0x0D,0x0A,0x00,0x00,0x00,
    0x49,0x4F,0x20,0x20,0x20,0x20,0x20,0x20,
    0x53,0x59,0x53,0x4D,0x53,0x44,0x4F,0x53,
    0x20,0x20,0x20,0x53,0x59,0x53,0x7E,0x01,
    0x00,0x57,0x49,0x4E,0x42,0x4F,0x4F,0x54,
    0x20,0x53,0x59,0x53,0x00,0x00,0x55,0xAA,
    0x52,0x52,0x61,0x41,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x72,0x72,0x41,0x61,
    0xFF,0xFF,0xFF,0xFF,0x02,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xAA,
    0xFA,0x66,0x0F,0xB6,0x46,0x10,0x66,0x8B,
    0x4E,0x24,0x66,0xF7,0xE1,0x66,0x03,0x46,
    0x1C,0x66,0x0F,0xB7,0x56,0x0E,0x66,0x03,
    0xC2,0x33,0xC9,0x66,0x89,0x46,0xFC,0x66,
    0xC7,0x46,0xF8,0xFF,0xFF,0xFF,0xFF,0xFA,
    0x66,0x8B,0x46,0x2C,0x66,0x83,0xF8,0x02,
    0x0F,0x82,0xCF,0xFC,0x66,0x3D,0xF8,0xFF,
    0xFF,0x0F,0x0F,0x83,0xC5,0xFC,0x66,0x0F,
    0xA4,0xC2,0x10,0xFB,0x52,0x50,0xFA,0x66,
    0xC1,0xE0,0x10,0x66,0x0F,0xAC,0xD0,0x10,
    0x66,0x83,0xE8,0x02,0x66,0x0F,0xB6,0x5E,
    0x0D,0x8B,0xF3,0x66,0xF7,0xE3,0x66,0x03,
    0x46,0xFC,0x66,0x0F,0xA4,0xC2,0x10,0xFB,
    0xBB,0x00,0x07,0x8B,0xFB,0xB9,0x01,0x00,
    0xE8,0xBE,0xFC,0x0F,0x82,0xAA,0xFC,0x38,
    0x2D,0x74,0x1E,0xB1,0x0B,0x56,0xBE,0xD8,
    0x7D,0xF3,0xA6,0x5E,0x74,0x19,0x03,0xF9,
    0x83,0xC7,0x15,0x3B,0xFB,0x72,0xE8,0x4E,
    0x75,0xD6,0x58,0x5A,0xE8,0x66,0x00,0x72,
    0xAB,0x83,0xC4,0x04,0xE9,0x64,0xFC,0x83,
    0xC4,0x04,0x8B,0x75,0x09,0x8B,0x7D,0x0F,
    0x8B,0xC6,0xFA,0x66,0xC1,0xE0,0x10,0x8B,
    0xC7,0x66,0x83,0xF8,0x02,0x72,0x3B,0x66,
    0x3D,0xF8,0xFF,0xFF,0x0F,0x73,0x33,0x66,
    0x48,0x66,0x48,0x66,0x0F,0xB6,0x4E,0x0D,
    0x66,0xF7,0xE1,0x66,0x03,0x46,0xFC,0x66,
    0x0F,0xA4,0xC2,0x10,0xFB,0xBB,0x00,0x07,
    0x53,0xB9,0x04,0x00,0xE8,0x52,0xFC,0x5B,
    0x0F,0x82,0x3D,0xFC,0x81,0x3F,0x4D,0x5A,
    0x75,0x08,0x81,0xBF,0x00,0x02,0x42,0x4A,
    0x74,0x06,0xBE,0x80,0x7D,0xE9,0x0E,0xFC,
    0xEA,0x00,0x02,0x70,0x00,0x03,0xC0,0x13,
    0xD2,0x03,0xC0,0x13,0xD2,0xE8,0x18,0x00,
    0xFA,0x26,0x66,0x8B,0x01,0x66,0x25,0xFF,
    0xFF,0xFF,0x0F,0x66,0x0F,0xA4,0xC2,0x10,
    0x66,0x3D,0xF8,0xFF,0xFF,0x0F,0xFB,0xC3,
    0xBF,0x00,0x7E,0xFA,0x66,0xC1,0xE0,0x10,
    0x66,0x0F,0xAC,0xD0,0x10,0x66,0x0F,0xB7,
    0x4E,0x0B,0x66,0x33,0xD2,0x66,0xF7,0xF1,
    0x66,0x3B,0x46,0xF8,0x74,0x44,0x66,0x89,
    0x46,0xF8,0x66,0x03,0x46,0x1C,0x66,0x0F,
    0xB7,0x4E,0x0E,0x66,0x03,0xC1,0x66,0x0F,
    0xB7,0x5E,0x28,0x83,0xE3,0x0F,0x74,0x16,
    0x3A,0x5E,0x10,0x0F,0x83,0xA4,0xFB,0x52,
    0x66,0x8B,0xC8,0x66,0x8B,0x46,0x24,0x66,
    0xF7,0xE3,0x66,0x03,0xC1,0x5A,0x52,0x66,
    0x0F,0xA4,0xC2,0x10,0xFB,0x8B,0xDF,0xB9,
    0x01,0x00,0xE8,0xB4,0xFB,0x5A,0x0F,0x82,
    0x9F,0xFB,0xFB,0x8B,0xDA,0xC3,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x55,0xAA
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\msgstub.inc ===
MSG_NOSYS       DB      13,10,"NTLDR is missing",255
MSG_IOERROR     DB      13,10,"Disk error",255
MSG_COMMON      DB      13,10,"Press any key to restart",13,10,0
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\mbr\i386\bootmbr.h ===
#define X86BOOTCODE_SIZE 512


unsigned char x86BootCode[] = {
51,192,142,208,188,0,124,251,80,7,80,31,252,190,27,124,
191,27,6,80,87,185,229,1,243,164,203,189,190,7,177,4,
56,110,0,124,9,117,19,131,197,16,226,244,205,24,139,245,
131,198,16,73,116,25,56,44,116,246,160,181,7,180,7,139,
240,172,60,0,116,252,187,7,0,180,14,205,16,235,242,136,
78,16,232,70,0,115,42,254,70,16,128,126,4,11,116,11,
128,126,4,12,116,5,160,182,7,117,210,128,70,2,6,131,
70,8,6,131,86,10,0,232,33,0,115,5,160,182,7,235,
188,129,62,254,125,85,170,116,11,128,126,16,0,116,200,160,
183,7,235,169,139,252,30,87,139,245,203,191,5,0,138,86,
0,180,8,205,19,114,35,138,193,36,63,152,138,222,138,252,
67,247,227,139,209,134,214,177,6,210,238,66,247,226,57,86,
10,119,35,114,5,57,70,8,115,28,184,1,2,187,0,124,
139,78,2,139,86,0,205,19,115,81,79,116,78,50,228,138,
86,0,205,19,235,228,138,86,0,96,187,170,85,180,65,205,
19,114,54,129,251,85,170,117,48,246,193,1,116,43,97,96,
106,0,106,0,255,118,10,255,118,8,106,0,104,0,124,106,
1,106,16,180,66,139,244,205,19,97,97,115,14,79,116,11,
50,228,138,86,0,205,19,235,214,97,249,195,73,110,118,97,
108,105,100,32,112,97,114,116,105,116,105,111,110,32,116,97,
98,108,101,0,69,114,114,111,114,32,108,111,97,100,105,110,
103,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,
101,109,0,77,105,115,115,105,110,103,32,111,112,101,114,97,
116,105,110,103,32,115,121,115,116,101,109,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,44,68,99,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,170
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\fatboot.asm ===
Page ,132
TITLE BOOT      SECTOR 1 OF TRACK 0 - BOOT LOADER
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */

;   Rev 1.0 ChrisP, AaronR and others.  2.0 format boot
;
;   Rev 3.0 MarkZ   PC/AT enhancements
;                   2.50 in label
;   Rev 3.1 MarkZ   3.1 in label due to vagaries of SYSing to IBM drive D's
;                   This resulted in the BPB being off by 1.  So we now trust
;                   2.0 and 3.1 boot sectors and disbelieve 3.0.
;
;   Rev 3.2 LeeAc   Modify layout of extended BPB for >32M support
;                   Move PHYDRV to 3rd byte from end of sector
;                   so that it won't have to be moved again
;                   FORMAT and SYS count on PHYDRV being in a known location
;
;   Rev 3.3 D.C.L.  Changed Sec 9 EOT field from 15 to 18. May 29, 1986.
;
;   Rev 3.31 MarkT  The COUNT value has a bogus check (JBE????) to determine
;                   if we've loaded in all the sectors of IBMBIO. This will
;                   cause too big of a load if the sectors per track is high
;                   enough, causing either a stack overflow or the boot code
;                   to be overwritten.
;
;   Rev 4.00 J. K.  For DOS 4.00 Modified to handle the extended BPB, and
;                   32 bit sector number calculation to enable the primary
;                   partition be started beyond 32 MB boundary.
;
;   Rev 7.0 JeffPar Loads WINBOOT.SYS from anywhere in the root of the boot
;                   drive.  WINBOOT.SYS must be an EXE with exactly 1 sector
;                   of header information, followed by a series of binary
;                   images imbedded in the EXE, as follows:
;
;                    1. WINLOAD module (ORGed at 200h, loaded at 70:200h)
;                    2. IO.SYS module
;                    3. MSDOS.SYS module
;
;                   The WINLOAD module should fit within WINLOAD_SIZE sectors,
;                   which includes 1 sector for the EXE header, so the code
;                   and data for the WINLOAD bootstrap should fit in 3 sectors.
;
;   Rev 7.1 ScottQ  removed Winboot.sys stuff, add support for extended int 13
;           MSliger bootable partitions implemented by scanning the MBR.
;
;   Rev 8.0 ScottQ  re-implement winboot.sys dual-boot as JO.SYS dual boot
;           MSliger
;
; The ROM in the IBM PC starts the boot process by performing a hardware
; initialization and a verification of all external devices.  If all goes
; well, it will then load from the boot drive the sector from track 0, head 0,
; sector 1.  This sector is placed at physical address 07C00h.  The initial
; registers are presumably set up as follows:  CS=DS=ES=SS=0, IP=7C00h, and
; SP=0400h.  But all we rely on is the BIOS being loaded at linear 07C00h.
;
; If IO.SYS is not found, an error message is displayed and the user is
; prompted to insert another disk.  If there is a disk error during the
; process, a message is displayed and things are halted.
;
; At the beginning of the boot sector, there is a table which describes the
; MSDOS structure of the media.  This is equivalent to the BPB with some
; additional information describing the physical layout of the driver (heads,
; tracks, sectors)
;
;==============================================================================
;REALLY OLD REVISION HISTORY which has no meaning but hey its nostalgic
;AN000 - New for DOS Version 4.00 - J.K.
;AC000 - Changed for DOS Version 4.00 - J.K.
;AN00x - PTM number for DOS Version 4.00 - J.K.
;==============================================================================
;AN001; d52 Make the fixed positioned variable "CURHD" to be local.  7/6/87 J.K.
;AN002; d48 Change head settle at boot time.                         7/7/87 J.K.
;AN003; P1820 New message SKL file                                 10/20/87 J.K.
;AN004; D304 New structrue of Boot record for OS2.                 11/09/87 J.K.
;AN005; Changed version to 5.0                                     03/08/90 E.A.
;AN006; Changed to remove MSLOAD in first cluster restriction      04/23/90 J.H.
;==============================================================================

        .xlist
        include bpb.inc
        include bootsec.inc
        include dirent.inc
        ;include version.inc
        .list

; ==========================================================================

ORIGIN          EQU     7C00H           ; Origin of bootstrap LOADER
BIO_SEG         EQU     2000H           ; Destination segment of ntldr
BIO_OFFSET      EQU     0               ; Offset of ntldr
SECTOR_SIZE     EQU     512             ; Sector size in bytes
DIR_ENTRY_SIZE  EQU     SIZE DIR_ENTRY  ; Size of directory entry in bytes
DSK_PARMS       EQU     1EH*4           ; POINTER TO DRIVE PARMS
SEC9            EQU     522h            ; ADDRESS OF NEW DRIVE PARM TABLE

ROM_DISKRD      EQU     2
ROM_DISKRDX     EQU     42h

; ==========================================================================

;
; This little set of directives establishes the address
; where we'll jump to once the first sector of ntldr has been
; loaded. The first 3 bytes of that sector are used for non-FAT
; filesystems, so we must skip over them.
;
SEGBIOS SEGMENT AT BIO_SEG

        ORG     3
NTLOAD  LABEL   BYTE

SEGBIOS ENDS

; ==========================================================================

        ; Data storage between temp. stack and start of boot sector

pReadClustersO  EQU     -16
pReadClustersS  EQU     -14
pReadSectorsO   EQU     -12
pReadSectorsS   EQU     -10
SectorBase      EQU     -8

DataSecL        EQU     -4      ; absolute sector # of first sector in data area
DataSecH        EQU     -2

; ==========================================================================

CODE    SEGMENT
        ASSUME  CS:CODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
        ORG     ORIGIN


        Public  $START
$START  Label   byte

        jmp     short Main
PartitionType:                  ;the in-memory copy of this will leave
        nop                     ;the partition type in this NOP's place
                                ;so IO.SYS can tell if it needs x13

PartitionTypeOffset = (offset PartitionType - offset $START)

; ==========================================================================

        ; Start of BPB area of the boot record

OsName          DB      "MSWIN"
OsVersion       DB      "4.1"           ; Windows version number

CoreBpb         label   byte
BytesPerSector  DW      SECTOR_SIZE     ; Size of a physical sector
SecsPerClust    DB      8               ; Sectors per allocation unit
ReservedSecs    DW      1               ; Number of reserved sectors
NumFats         DB      2               ; Number of fats
NumDirEntries   DW      512             ; Number of direc entries
TotalSectors    DW      4*17*305-1      ; Number of sectors - number of hidden
                                        ; sectors (0 when 32 bit sector number)
MediaByte       DB      0F8H            ; MediaByte byte
NumFatSecs      DW      8               ; Number of fat sectors
SecPerTrack     DW      17              ; Sectors per track
NumHeads        DW      4               ; Number of drive heads

HiddenSecs      DD      1               ; Number of hidden sectors
BigTotalSecs    DD      0               ; 32 bit version of number of sectors

        .errnz  ($-BytesPerSector) NE SIZE BPB

BootDrv         DB      80h
CurrentHead     DB      0h              ; Current Head
ExtBootSig      DB      41
SerialNum       DD      0
VolumeLabel     DB      'NO NAME    '
FatId           DB      'FAT12   '

        .errnz  ($-$START) NE SIZE BOOTSEC

; =========================================================================

;
;   First thing is to reset the stack to a better and more known
;   place. The ROM may change, but we'd like to get the stack
;   in the correct place.
;
Main:
        xor     CX,CX
        mov     SS,CX                   ;Work in stack just below this routine
        mov     SP,ORIGIN+pReadClustersO
        ASSUME  SS:CODE

        mov     ds,cx
        assume  DS:CODE

;
; Set up es for sector reads
;
        mov     ax,BIO_SEG
        mov     es,ax
        ASSUME  ES:NOTHING

        cld
        mov     BP,ORIGIN

;   The system is now prepared for us to begin reading.

;   First we read the master boot record (MBR) if this is a
;   harddisk so we can get our partion type.  Types E and C
;   need extended int13 calls.

        cmp     [BP].bsDriveNumber,cl   ;assert cl == 0 from above
        jnl     failed                  ;dont check for MBR on floppies!

        mov     ax,cx                   ;read sector zero
        cwd

        call    DoReadOne               ;note! assume cx==0 for DoReadOne
        jc      failed
        sub     bx,(42h - 12 +4)        ;bx comes back point it end of sector,
                                        ;we want hidden sector field of first
                                        ;partition entry
.386
        mov     eax,dword ptr HiddenSecs;get the hidden sectors for us
scan:
        cmp     eax,dword ptr es:[bx]   ;is it the same as this partition entry?
.286
        mov     dl,byte ptr es:[bx-4]   ;put the entry's type in dl

        jne     short dontgotit         ;its our partition, go write it down
        or      dl,2                    ;turn C's into E's
        mov     [bp+2],dl               ;put our partition type at byte 2's nop
dontgotit:
        add     bl,10h                  ; 8CA - 8DA - 8EA - 8FA - 90A : carry
        jnc     short scan              ; we scan 4 partition entries

failed:
                                        ;if we failed, leave nop alone; we
                                        ;will use old int13 and so will IO.SYS
        xor      cx,cx                  ;later code needs CX to still be zero

.286

;   Next, determine logical sector numbers of the start of the
;   directory and the start of the data area.
;

DirRead:
        mov     AL,[BP].bsBPB.BPB_NumberOfFATs  ; Determine sector dir starts on (NumFats)
        cbw                                     ;

        mul     [BP].bsBPB.BPB_SectorsPerFAT    ; DX:AX (NumFatSecs)
        add     AX,[BP].bsBPB.BPB_HiddenSectors ; (HiddenSecs)
        adc     DX,[BP].bsBPB.BPB_HiddenSectorsHigh
        add     AX,[BP].bsBPB.BPB_ReservedSectors;(ReservedSecs)
        adc     DX,CX
;
;   DX:AX = NumFats * NumFatSecs + ReservedSecs + cSecHid
;
        mov     SI,[BP].bsBPB.BPB_RootEntries
        pusha

        mov     [BP].DataSecL,AX
        mov     [BP].DataSecH,DX


        mov     AX,DIR_ENTRY_SIZE       ; bytes per directory entry
        mul     SI                      ; convert to bytes in directory (NumDirEntries)

        mov     BX,[BP].bsBPB.BPB_BytesPerSector; add in sector size
        add     AX,BX
        dec     AX                      ; decrement so that we round up
        div     BX                      ; convert to sector number
        add     [BP].DataSecL,AX        ; Start sector # of Data area
        adc     [BP].DataSecH,CX        ;
        popa

DirSector:
        mov     DI,BIO_OFFSET           ; address in DI for comparisons

        call    DoReadOne               ;NOTE assumes CX==0!


DiskErrorJump:
        jc      DiskError               ; if errors try to recover

DirEntry:
        cmp     byte ptr es:[di],ch     ; empty directory entry?
        je      MissingFile             ; yes, that's the end
        pusha
        mov     cl,11
        mov     si,offset BootFilename

        repz    cmpsb                   ; see if the same
        popa

        jz      DoLoad                  ; if so, continue booting

        dec     SI                      ; decrement # root entries
        jz      MissingFile             ; hmmm, file doesn't exist in root
next_entry:
        add     DI,DIR_ENTRY_SIZE

        cmp     DI,BX                   ; exhausted this root dir sector yet?
        jb      DirEntry                ; no, check next entry
        jmp     DirSector               ; yes, check next sector

MissingFile:
        mov     al,byte ptr [MSGOFF_NOSYS] ; point to no system file message

;
; There has been some recoverable error. Display a message
; and wait for a keystroke. Al is the offset - 256 of the
; message within the boot sector. So we first calculate
; the real segment-based offset to the message and stick it in si
; so lodsb will work later.
;
DisplayError:
        .ERRNZ  ORIGIN MOD 256

        mov     ah,(ORIGIN / 256) + 1
        mov     si,ax

DisplayError1:
        lodsb                           ; get next character
        cbw                             ; make 00->0000, FF->FFFF
        inc     ax                      ; end of sub-message?  (0xFF?)
        jz      DisplayWait             ;   if so, get tail
        dec     ax                      ; end of message?  (0x00?)
        jz      WaitForKey              ;   if so, get key

        mov     AH,14                   ; write character & attribute
        mov     BX,7                    ; attribute (white char on black)
        int     10h                     ; print the character
        jmp     short DisplayError1

DisplayWait:
        mov     al,byte ptr [MSGOFF_COMMON]
        jmp     short DisplayError

DiskError:
        mov     al,byte ptr [MSGOFF_IOERROR]
        jmp     short DisplayError

WaitForKey:
                                        ;we know ax is zero, thats how we got here
        int     16h                     ; get character from keyboard
        int     19h                     ; Continue in loop till good disk
;
;   We now load the first sector of ntldr.
;
;   All we have to do is multiply the file's starting cluster
;   (whose directory entry is at ES:DI-11) by sectors per cluster and
;   add that to the disk's starting data sector.
;
;   Note that after we're read the sector into 2000:0 the directory sector
;   will get blown away. So we need to save the starting cluster number.
;
DoLoad:

        mov     dx,es:[di].dir_first    ; dx = ntldr starting cluster
        push    dx                      ; save for later
        mov     al,1                    ; 1 sector
        mov     bx,BIO_OFFSET           ; into 2000:0
        call    NtldrClusterRead
        jc      DiskError

; =========================================================================
;
; NTLDR requires the following input conditions:
;
;       BX == starting cluster number of NTLDR
;       DL == int13 unit number of boot drive
;       DS:SI -> BPB
;       DS:DI -> arg structure
;
; =========================================================================

        pop     bx                      ; starting cluster number
        mov     dl,[bp].bsDriveNumber
        mov     si,OFFSET CoreBpb
        mov     di,sp                   ; we should be at TOS now

        mov     [bp].pReadClustersO,OFFSET NtldrClusterRead
        mov     [bp].pReadSectorsO,OFFSET NtldrSectorRead
        mov     cx,ds
        mov     [bp].pReadClustersS,cx
        mov     [bp].pReadSectorsS,cx

;
; We do something nasty. Ntldr is expecting the readcluster and readsector
; routines to do a far return. Since ntldr is now the only guy who will be
; reading via those routines, we patch the return instruction from a near
; return to a far return.
;
        mov     byte ptr DoReadExit,0cbh      ; retf
        jmp     FAR PTR NTLOAD          ; Crank up NTLDR

;
; Sector read routine required by ntldr
;
;       Read al sectors into es:bx starting from sector SectorBase
;               (SectorBase is logical sector # from start of partition)
;
NtldrSectorRead label near
.386
        movzx   cx,al
        mov     eax,[bp].SectorBase
        add     eax,dword ptr [bp].bsBPB.BPB_HiddenSectors
        mov     edx,eax
        shr     edx,16
.286
        jmp short DoReadMore

;
; Cluster read routine required by ntldr
;
;       Read al sectors into es:bx starting from cluster dx
;
NtldrClusterRead label near
.386
        movzx   cx,al                   ; cx = # of sectors to read
.286
        dec     dx
        dec     dx                      ; adjust for reserved clusters 0 and 1
        mov     al,[BP].bsBPB.BPB_SectorsPerCluster
        xor     ah,ah
        mul     dx                      ; DX:AX = starting sector number
        add     ax,[bp].DataSecL        ; adjust for FATs, root dir, boot sec.
        adc     dx,[bp].DataSecH
DoPush:
        jmp short DoReadMore

; =========================================================================
;
; Read disk sector(s).
;
;   Inputs:  DX:AX == logical sector #
;            CL == # sectors (CH == 0)
;            ES:BX == transfer address
;
;   Outputs: DX:AX next logical sector #
;            CX == 0 (assuming no errors)
;            ES:BX -> byte after last byte of read
;            Carry set if error, else clear if success
;
;   Preserves: BP, SI, DI
;
;   New Notes: This function will now use extended int 13 if
;            necessary. The next note is correct for standard int 13
;
;   Notes:   Reads sectors one at a time in case they straddle a
;            track boundary.  Performs full 32-bit division on the
;            first decomposition (of logical sector into track+sector)
;            but not on the second (of track into cylinder+head),
;            since (A) we don't have room for it, and (B) the results
;            of that division must yield a quotient < 1024 anyway, because
;            the CHS-style INT 13h interface can't deal with cylinders
;            larger than that.
;
; =========================================================================

switchx13:      ;setup for x13 read, and switch to old if not needed

        push    dx                      ;
        push    ax                      ; block number
        push    es
        push    bx                      ; transfer address
        push    1                       ; count of one, because we're looping
        push    16                      ; packet size

        xchg    AX,CX                   ; AX -> CX

        mov     ax,[bp].bsBPB.BPB_SectorsPerTrack  ; get sectors/track
        xchg    ax,si                   ; save for divides

        xchg    AX,DX                   ; DX -> AX
        xor     DX,DX                   ; divide 0:AX
        div     si                      ; AX = high word of track

        xchg    AX,CX                   ; save AX in CX and restore old AX
        div     si                      ; CX:AX = track, DX = sector

        inc     DX                      ; sector is 1-based
        xchg    CX,DX                   ; CX = sector, DX = high word of track
        div     [BP].bsBPB.BPB_Heads    ; AX = cylinder, DX = head

        mov     DH,DL                   ; head # < 255

        mov     CH,AL                   ; CH = cyl #
        ror     AH,2                    ; move bits 8,9 of AX to bits 14,15
                                        ; (the rest has to be zero, since
                                        ;  cyls cannot be more than 10 bits)
        or      CL,AH                   ; CL = sector # plus high bits of cyl #
        mov     AX,(ROM_DISKRD SHL 8)+1 ; disk read 1 sector

        cmp     byte ptr [bp].PartitionTypeOffset,0Eh ;set flag to be tested
        jne     short doio              ;use extended calls if E (or C)
        mov     ah,ROM_DISKRDX          ;x13, we're ready to rock
        mov     si,sp                   ; DS:SI -> X13 packet
doio:
        mov     dl,[bp].bsDriveNumber   ; DL == drive #
        int     13h

        popa                            ; throw away packet on stack (8 words)
        popa                            ; get real registers back

        jc      DoReadExit              ; disk error

        inc     ax
        jnz     DoReadNext
        inc     dx

DoReadNext:                             ; Adjust buffer address
        add     BX,[BP].bsBPB.BPB_BytesPerSector

        dec     cx
        jnz     DoReadMore
        clc

DoReadExit:

        ret

DoReadOne:
        inc     cx              ;assumes cx == 0! to set to 1 sector read
DoRead:
        mov     bx,BIO_OFFSET
DoReadMore:

        pusha
.386
        db      66h                     ;push a dword of 0 on the stack
        push    0                       ;hand coded for 386
.286
        jmp     switchx13

;
; This string can go anywhere. NT and NT Setup are not picky about it.
;
        Public  BootFilename

BootFilename db "NTLDR      ";

;
; Message table.
;
; We put English messages here as a placeholder only, so that in case
; anyone uses bootfat.h without patching new messages in, things will
; still be correct (in English, but at least functional).
;
        include msgstub.inc

;
; Now build a table with the low byte of the offset to each message.
; Code that patches the boot sector messages updates this table.
;
        .errnz ($-$START) GT (SECTOR_SIZE-5)
        ORG     ORIGIN + SECTOR_SIZE - 5
MSGOFF_NOSYS:
        db OFFSET (MSG_NOSYS - ORIGIN) - 256
MSGOFF_IOERROR:
        db OFFSET (MSG_IOERROR - ORIGIN) - 256
MSGOFF_COMMON:
        db OFFSET (MSG_COMMON - ORIGIN) - 256

        .errnz ($-$START) NE (SECTOR_SIZE-2)
        DB      55h,0AAh                ; Boot sector signature


CODE    ENDS

        END
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\fat32bt.asm ===
Page ,132
TITLE BOOT      SECTOR 1 OF TRACK 0 - BOOT LOADER
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */

;   Rev 1.0 ChrisP, AaronR and others.  2.0 format boot
;
;   Rev 3.0 MarkZ   PC/AT enhancements
;                   2.50 in label
;   Rev 3.1 MarkZ   3.1 in label due to vagaries of SYSing to IBM drive D's
;                   This resulted in the BPB being off by 1.  So we now trust
;                   2.0 and 3.1 boot sectors and disbelieve 3.0.
;
;   Rev 3.2 LeeAc   Modify layout of extended BPB for >32M support
;                   Move PHYDRV to 3rd byte from end of sector
;                   so that it won't have to be moved again
;                   FORMAT and SYS count on PHYDRV being in a known location
;
;   Rev 3.3 D.C.L.  Changed Sec 9 EOT field from 15 to 18. May 29, 1986.
;
;   Rev 3.31 MarkT  The COUNT value has a bogus check (JBE????) to determine
;                   if we've loaded in all the sectors of IBMBIO. This will
;                   cause too big of a load if the sectors per track is high
;                   enough, causing either a stack overflow or the boot code
;                   to be overwritten.
;
;   Rev 4.00 J. K.  For DOS 4.00 Modified to handle the extended BPB, and
;                   32 bit sector number calculation to enable the primary
;                   partition be started beyond 32 MB boundary.
;
;   Rev 7.0 JeffPar Loads WINBOOT.SYS from anywhere in the root of the boot
;                   drive.  WINBOOT.SYS must be an EXE with exactly 1 sector
;                   of header information, followed by a series of binary
;                   images imbedded in the EXE, as follows:
;
;                    1. WINLOAD module (ORGed at 200h, loaded at 70:200h)
;                    2. IO.SYS module
;                    3. MSDOS.SYS module
;
;                   The WINLOAD module should fit within WINLOAD_SIZE sectors,
;                   which includes 1 sector for the EXE header, so the code
;                   and data for the WINLOAD bootstrap should fit in 3 sectors.
;
;   Rev 7.1 ARR     Multi sector version of boot record for booting off 32-bit
;                   BigFAT media.
;
; The ROM in the IBM PC starts the boot process by performing a hardware
; initialization and a verification of all external devices.  If all goes
; well, it will then load from the boot drive the sector from track 0, head 0,
; sector 1.  This sector is placed at physical address 07C00h.  The initial
; registers are presumably set up as follows:  CS=DS=ES=SS=0, IP=7C00h, and
; SP=0400h.  But all we rely on is the BIOS being loaded at linear 07C00h.
;
; If WINBOOT.SYS is not found, an error message is displayed and the user is
; prompted to insert another disk.  If there is a disk error during the
; process, a message is displayed and things are halted.
;
; At the beginning of the boot sector, there is a table which describes the
; MSDOS structure of the media.  This is equivalent to the BPB with some
; additional information describing the physical layout of the driver (heads,
; tracks, sectors)
;
;==============================================================================
;REVISION HISTORY:
;AN000 - New for DOS Version 4.00 - J.K.
;AC000 - Changed for DOS Version 4.00 - J.K.
;AN00x - PTM number for DOS Version 4.00 - J.K.
;==============================================================================
;AN001; d52 Make the fixed positioned variable "CURHD" to be local.  7/6/87 J.K.
;AN002; d48 Change head settle at boot time.                         7/7/87 J.K.
;AN003; P1820 New message SKL file                                 10/20/87 J.K.
;AN004; D304 New structrue of Boot record for OS2.                 11/09/87 J.K.
;AN005; Changed version to 5.0                                     03/08/90 E.A.
;AN006; Changed to remove MSLOAD in first cluster restriction      04/23/90 J.H.
;==============================================================================

        .xlist
        include bpb.inc
        include bootsec.inc
        include dirent.inc
        ;include version.inc
        .list

; ==========================================================================
ORIGIN          EQU     7C00H           ; Origin of bootstrap LOADER

BIO_SEG         EQU     2000H           ; Destination segment of BIOS
BIO_OFFSET      EQU     0000H           ; Offset of bios

SECTOR_SIZE     EQU     512             ; Sector size in bytes
DIR_ENTRY_SIZE  EQU     SIZE DIR_ENTRY  ; Size of directory entry in bytes

ROM_DISKRD      EQU     2

SIZEBIGBOOTINSEC EQU    3

; ==========================================================================

SEGBIOS SEGMENT AT BIO_SEG

        ; Define the destination segment of the BIOS, including the
        ; initialization label
        ORG     BIO_OFFSET
WINLOAD LABEL   BYTE

SEGBIOS ENDS

; ==========================================================================

        ; Local (on stack) Data storage between temp stack and start of
        ; boot sector

CurrBuffFatSecL EQU     -12
CurrBuffFatSecH EQU     -10
Int13Sectors    EQU     -8
DataSecL        EQU     -4
DataSecH        EQU     -2

; ==========================================================================

CODE    SEGMENT
        ASSUME  CS:CODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
        ORG     ORIGIN


        Public  $START
$START  Label   byte

        jmp     short Main
GotXint13:
        nop                             ; used to store xint13 flag

GotXint13Offset = (offset GotXint13 - offset $START)

; ==========================================================================

        ; Start of BPB area of the boot record

OsName          DB      "MSWIN"
OsVersion       DB      "4.1"           ; Windows version number

BytesPerSector  DW      SECTOR_SIZE     ; Size of a physical sector
SecsPerClust    DB      2               ; Sectors per allocation unit
ReservedSecs    DW      8               ; Number of reserved sectors
NumFats         DB      1               ; Number of fats
NumDirEntries   DW      1024            ; Number of direc entries
TotalSectors    DW      0               ; Number of sectors - number of hidden
                                        ; sectors (0 when 32 bit sector number)
MediaByte       DB      0F8H            ; MediaByte byte
NumFatSecs      DW      0               ; Number of fat sectors (0 when 32 bit)
SecPerTrack     DW      17              ; Sectors per track
NumHeads        DW      4               ; Number of drive heads

HiddenSecs      DD      1               ; Number of hidden sectors
BigTotalSecs    DD      00200000h       ; 32 bit version of number of sectors
BigNumFatSecs   DD      00001FE0h       ; 32 bit version of number of FAT sectors
ExtFlags        DW      0
BPBReserved1    DW      0
RootStrtClus    DD      0
FSInfoSec       dw      ((FSInfoSecSig - $START) / SECTOR_SIZE)
BkUpBootSec     dw      MBR_BOOTFAILBACKUP
BPBReserved2    DD      3 DUP (0)
        .errnz  ($-BytesPerSector) NE SIZE BIGFATBPB

BootDrv         DB      80h
CurrentHead     DB      0h              ; Current Head
ExtBootSig      DB      41
SerialNum       DD      0
VolumeLabel     DB      'NO NAME    '
FatId           DB      'FAT32   '

        .errnz  ($-$START) NE SIZE BIGFATBOOTSEC


; =========================================================================

;
;   First thing is to reset the stack to a better and more known
;   place. The ROM may change, but we'd like to get the stack
;   in the correct place.
;
Main:
        xor     CX,CX
        mov     SS,CX                   ;Work in stack just below this routine
        mov     SP,ORIGIN+CurrBuffFatSecL
        mov     es,cx
        mov     ds,cx                   ; DS = ES = SS = 0
        ASSUME  DS:CODE,ES:CODE,SS:CODE
        mov     BP,ORIGIN

;
; Determine the number of sectors addressable via
; conventional int13. If we can't get drive params for some reason
; then something is very wrong -- we'll try to force the caller
; to use conventional int13 by maxing out the sector count.
;
        mov     [bp].GotXint13Offset,cl ; no xint13 yet
        mov     dl,[bp].bgbsDriveNumber ; int13 unit number
        mov     ah,8                    ; get drive params
        int     13h                     ; call BIOS
        jnc     @f                      ; no error, procede
        mov     cx,-1                   ; strange case, fake registers to force
        mov     dh,cl                   ; use of standard int13 (set all vals to max)
@@:
.386
        movzx   eax,dh                  ; eax = max head # (0-255)
        inc     ax                      ; eax = heads (1-256)
        movzx   edx,cl                  ; edx = sectors per track + cyl bits
        and     dl,3fh                  ; edx = sectors per track (1-63)
        mul     dx                      ; eax = sectors per cylinder, edx = 0
        xchg    cl,ch
        shr     ch,6                    ; cx = max cylinder # (0-1023)
        inc     cx                      ; cx = cylinders (1-1024)
        movzx   ecx,cx                  ; ecx = cylinders (1-1024)
        mul     ecx                     ; eax = sectors visible via int13, edx = 0
        mov     [bp].Int13Sectors,eax   ; save # sectors addressable via int13
.8086

;
; The MBR (or boot ROM) only reads one boot sector. Thus the first order
; of business is to read the rest of ourself in by reading the second
; boot sector of the 2-sector boot record.
;
; The second sector in the NT case is at sector 12. This preserves
; the bootsect.dos logic and eliminates a special case for fat32.
;
ReadBoot:
        cmp     [BP].bgbsBPB.oldBPB.BPB_SectorsPerFAT,0 ; FAT32 BPB?
        jne     short NoSysMsg          ; No, invalid, messed up
        cmp     [BP].bgbsBPB.BGBPB_FS_Version,FAT32_Curr_FS_Version
        ja      short NoSysMsg          ; boot code too old for this volume
.386
        mov     eax,dword ptr [BP].bgbsBPB.oldBPB.BPB_HiddenSectors
        add     eax,12                  ; read in the second boot sector
.8086
        mov     BX,ORIGIN + (SECTOR_SIZE * 2)
        mov     cx,1

        call    DoRead                  ; doesn't return if err

        jmp     DirRead                 ; no error, continue boot in sector 2

DiskError:
        mov     al,byte ptr [MSGOFF_IOERROR]

;
; Al is the offset - 256 of the message within the boot sector.
; So we first calculate the real segment-based offset to the message
; and stick it in si so lodsb will work later.
;
DisplayError:
        .ERRNZ  ORIGIN MOD 256

        mov     ah,(ORIGIN / 256) + 1
        mov     si,ax

DisplayError1:
        lodsb                           ; get next character
        test    AL,AL                   ; end of message?
        jz      WaitForKey              ; yes
        cmp     AL,0FFh                 ; end of sub-message?
        je      DisplayWait             ; yes, switch to final message now
        mov     AH,14                   ; write character & attribute
        mov     BX,7                    ; attribute (white char on black)
        int     10h                     ; print the character
        jmp     short DisplayError1

DisplayWait:
        mov     al,byte ptr [MSGOFF_COMMON]
        jmp     short DisplayError

NoSysMsg:
        mov     al,byte ptr [MSGOFF_NOSYS] ; point to no system file message
        jmp     short DisplayError

WaitForKey:
        cbw                             ;warning assumes al is zero!
        int     16h                     ; get character from keyboard
        int     19h                     ; Continue in loop till good disk

; =========================================================================
;
; Read disk sector(s). This routine cannot transfer more than 64K!
;
;   Inputs:  EAX == physical sector #
;            CL == # sectors (CH == 0)
;            ES:BX == transfer address
;
;   Outputs: EAX next physical sector #
;            CX == 0
;            ES:BX -> byte after last byte of read
;            Does not return if error
;
;   Reads sectors, switching to extended int13 if necessary and
;   available. The note below is for the conventional int13 case.
;
;   Notes:   Reads sectors one at a time in case they straddle a
;            track boundary.  Performs full 32-bit division on the
;            first decomposition (of logical sector into track+sector)
;            but not on the second (of track into cylinder+head),
;            since (A) we don't have room for it, and (B) the results
;            of that division must yield a quotient < 1024 anyway, because
;            the CHS-style INT 13h interface can't deal with cylinders
;            larger than that.
;
; =========================================================================

DoRead:
.386
        pushad

;
; Determine if the sector we're about to read is available via
; conventional int13.
;
        cmp     eax,[bp].Int13Sectors   ; determine if standard int13 is ok
        jb      stdint13

;
; Need extended int13. First set up parameter packet on stack.
; Then, if we don't know whether xint13 is available for the drive yet,
; find out. If not, error out since we know we can't read the sector
; we need.
;
        db      66h                     ; hand-coded 32-bit push of 8-bit immediate
        push    0                       ; high 32 bits of sector #
        push    eax                     ; low 32 bits of sector #
        push    es
        push    bx                      ; transfer address
        push    dword ptr 10010h        ; transfer 1 sector, packet size = 16

        cmp     byte ptr [bp].GotXint13Offset,0  ; have xint13?
        jnz     xint13ok                ; yes, do the read
        mov     ah,41h
        mov     bx,055aah
        mov     dl,[bp].bgbsDriveNumber
        int     13h                     ; check availability
        jc      xint13err               ; error from int13 means no xint13
        cmp     bx,0aa55h               ; absence of sig means no xint13
        jne     xint13err
        test    cl,1                    ; bit 0 off means no xint13
        jz      xint13err
        inc     byte ptr [bp].GotXint13Offset ; have xint13, remember for next time

xint13ok:
        mov     ah,42h                  ; extended read
        mov     dl,[bp].bgbsDriveNumber ; dl = int13 unit #
        mov     si,sp                   ; ds:si -> param packet
        int     13h                     ; perform the read
        db 0b0h                         ; HACK: avoid stc by making next
                                        ; byte part of mov al,xx instruction
xint13err:
        stc                             ; this instruction MUST follow previous byte!
        pop     eax                     ; throw away param packet without
        pop     eax                     ; clobbering carry flag
        pop     eax
        pop     eax

        jmp     short did_read

stdint13:
;
; Read via conventional int13
;
        xor     edx,edx                 ; edx:eax = absolute sector number
        movzx   ecx,[bp].bgbsBPB.oldBPB.BPB_SectorsPerTrack  ; ecx = sectors per track
        div     ecx                     ; eax = track, edx = sector within track (0-62)
        inc     dl                      ; dl = sector within track (1-63)
        mov     cl,dl                   ; cl = sector within track
        mov     edx,eax
        shr     edx,16                  ; dx:ax = track
        div     [bp].bgbsBPB.oldBPB.BPB_Heads ; ax = cylinder (0-1023), dx = head (0-255)
        xchg    dl,dh                   ; dh = head
        mov     dl,[bp].bgbsDriveNumber ; dl = int13 unit #
        mov     ch,al                   ; ch = bits 0-7 of cylinder
        shl     ah,6
        or      cl,ah                   ; bits 6-7 of cl = bits 8-9 of cylinder
        mov     ax,201h                 ; read 1 sector
        int     13h

did_read:
        popad

        jc      DiskError

        add     bx,SECTOR_SIZE          ; advance transfer address
        inc     eax                     ; next sector number
        dec     cx                      ; loop instruction is out of range,
        jnz     DoRead                  ; have to do it manually
        ret
.8086

        Public  WinBoot                 ; System boot file (11 bytes)

WinBoot DB      "NTLDR      "

;
; Message table.
;
; We put English messages here as a placeholder only, so that in case
; anyone uses bootf32.h without patching new messages in, things will
; still be correct (in English, but at least functional).
;

        .errnz ($-$START) GT 1ACH
        ORG     ORIGIN + 01ACH          ; shift message to coincide with that in FAT
                                        ; this will help driver to think the MBR
                                        ; is empty when dealing with FAT32 superfloppy
        include msgstub.inc

;
; Now build a table with the low byte of the offset to each message.
; Code that patches the boot sector messages updates this table.
;
        .errnz ($-$START) GT (SECTOR_SIZE-7)
        ORG     ORIGIN + SECTOR_SIZE - 7
MSGOFF_NOSYS:
        db OFFSET (MSG_NOSYS - ORIGIN) - 256
MSGOFF_IOERROR:
        db OFFSET (MSG_IOERROR - ORIGIN) - 256
MSGOFF_COMMON:
        db OFFSET (MSG_COMMON - ORIGIN) - 256

        ORG     ORIGIN + (SECTOR_SIZE - 4)
        DD      BOOTSECTRAILSIG         ; Boot sector signature (4 bytes)


        .errnz  ($-$START) NE SECTOR_SIZE
SecndSecStart label byte
;
; The second boot sector contains nothing but data. This sector is re-written
; by MS-DOS with a fairly high frequency due to changes made to the fsinfo
; structure. We don't want the actual boot code to get accidentally corrupted.
;
FSInfoSecSig label byte
        .errnz  ($-SecndSecStart) NE 0
        DD      SECONDBOOTSECSIG

        db      (SECTOR_SIZE - ($-FSInfoSecSig) - 4 - (SIZE BIGFATBOOTFSINFO)) DUP (0)

        .errnz  ($-SecndSecStart) NE (OFFSETFSINFOFRMSECSTRT)

fsinfo  BIGFATBOOTFSINFO <FSINFOSIG,0FFFFFFFFh,000000002h>

        .errnz  ($-FSInfoSecSig) NE OFFSETTRLSIG
        DD      BOOTSECTRAILSIG         ; Boot sector signature (4 bytes)

        .errnz  ($-$START) NE (SECTOR_SIZE * 2)
StrtThirdBootSector     LABEL BYTE

DirRead:
.386
        movzx   eax,[BP].bgbsBPB.oldBPB.BPB_NumberOfFATs  ; Determine sector dir starts on (NumFats)
        mov     ecx,dword ptr [BP].bgbsBPB.BGBPB_BigSectorsPerFat
        mul     ecx                     ; EAX = (NumFatSecs)
        add     EAX,dword ptr [BP].bgbsBPB.oldBPB.BPB_HiddenSectors ; (HiddenSecs)
        movzx   edx,[BP].bgbsBPB.oldBPB.BPB_ReservedSectors         ;(ReservedSecs)
        add     EAX,EDX
;
;   EAX = NumFats * NumFatSecs + ReservedSecs + cSecHid
;         (first physical sector of cluster area)
;
        mov     dword ptr [BP].DataSecL,EAX
        mov     dword ptr [BP].CurrBuffFatSecL,0FFFFFFFFh
DirReRead:
        mov     eax,dword ptr [BP].bgbsBPB.BGBPB_RootDirStrtClus
        cmp     eax,2
        jb      NoSysMsg
        cmp     eax,00FFFFFF8h
        jae     NoSysMsg

; EAX is starting cluster of root directory

DirCluster:
        push    eax                     ; save starting cluster number
        sub     eax,2                   ; Convert to 0 based cluster #
        movzx   EBX,[BP].bgbsBPB.oldBPB.BPB_SectorsPerCluster
        mov     si,bx                   ; Sector count to SI for sector loop
        mul     EBX                     ; compute logical sector in EAX
        add     EAX,dword ptr [BP].DataSecL ; Add data start bias
DirSector:
        mov     BX,ORIGIN+(SIZEBIGBOOTINSEC*SECTOR_SIZE)
        mov     DI,BX                   ; save address in DI for comparisons
        mov     CX,1
        call    DoRead                  ; doesn't return if error
                                        ; relies on return cx=0
DirEntry:
        cmp     byte ptr [di],ch        ; empty, NUL directory entry?
        je      short MissingFile       ; yes, that's the end

        mov     CL,11
        push    SI
        mov     si,offset WinBoot
        repz    cmpsb                   ; see if the same
        pop     SI
        jz      short DoLoad            ; if so, continue booting

        add     DI,CX                   ; Finish advance to end of name field
        add     DI,DIR_ENTRY_SIZE-11    ; Next dir entry
        cmp     DI,BX                   ; exhausted this root dir sector yet?
        jb      DirEntry                ; no, check next entry
        dec     SI                      ; decrement # dir sectors
        jnz     DirSector               ; More dir sectors in this cluster
        pop     eax                     ; recover current root dir cluster
        call    GetNextFatEntry
        jc      DirCluster              ; Do next Root dir cluster
MissingFile:
        add     sp,4                    ; Discard EAX saved on stack
        jmp     NoSysMsg

CurrentSegment  dw      BIO_SEG
;
;   We now load NTLDR
;
;   All we have to do is multiply the file's starting cluster
;   (whose directory entry is at DS:DI-11) by sectors per cluster and
;   add that to the disk's starting data sector. We read ntldr into
;   2000:0, and begin execution there.
;
DoLoad:

        add     sp,4                    ; Discard DX:AX saved on stack above
        mov     si,[DI-11].DIR_FIRSTHIGH
        mov     di,[DI-11].DIR_FIRST    ; SI:DI = NTLDR starting cluster
        mov     ax,si
        shl     eax,16
        mov     ax,di                   ; EAX = NTLDR starting cluster
        cmp     eax,2                   ; valid cluster #?
        jb      NoSysMsg                ; NO!
        cmp     eax,00FFFFFF8h
        jae     NoSysMsg                ; NO!

ReadAcluster:
        push    eax                     ; save cluster number
        sub     eax,2                   ; Subtract first 2 reserved clusters
        movzx   ecx,[BP].bgbsBPB.oldBPB.BPB_SectorsPerCluster ; ECX = Sectors per cluster (SecsPerClust)
        mul     ecx                     ; EAX = logical sector #

        add     eax,dword ptr [BP].DataSecL  ; EAX = physical sector #

        mov     bx,BIO_OFFSET
        push    es
        mov     es,CurrentSegment       ; ES:BX = destination for read
        call    DoRead                  ; read all sectors in cluster, doesn't return if error
        pop     es
        pop     eax                     ; recover current 0-based cluster#
        shr     bx,4                    ; updated offset -> paragraphs
        add     CurrentSegment,bx       ; update segment for next read

        call    GetNextFatEntry         ; get 2-based successor cluster in EAX
        jnc     StartItUp               ; if end of cluster chain reached
        jc      ReadACluster            ; keep sucking up clusters
.8086

;
; NTLDR requires the following input conditions:
;
;       DL = boot drive #
;

StartItUp:
        mov     DL,[BP].bgbsDriveNumber
        jmp     FAR PTR WINLOAD         ; CRANK UP THE WINDOWS NT BOOT LOADER

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   GetNextFatEntry
;
;   Given the last cluster found, this will return the next cluster
;   of a chain of clusters. If the last cluster is (ffff)(f)ff8 - (ffff)(f)fff,
;   then the final cluster has been loaded.
;
;   INPUTS:
;       EAX = CurrentCluster (0 based cluster #)
;
;   OUTPUTS:
;       EAX = Next cluster (2 based cluster #)
;       Carry CLEAR if all done, SET if not
;
;   USES:
;   EAX,EBX,ECX,EDX,ESI,DI es
;

GetNextFatEntry PROC NEAR

        ; NOTE For following... FAT32 cluster numbers are 28 bits not 32,
        ; so we know the following multiply (shl DX:AX by 2) will never
        ; overflow into carry.
.386
        shl     eax,2
        call    GetFatSector
        mov     EAX,dword ptr ES:[DI+BX]
        and     EAX,0FFFFFFFh           ; Mask to valid FAT32 cluster # bits
        cmp     EAX,00FFFFFF8h          ; carry CLEAR if all done, SET if not
.8086
        ret

GetNextFatEntry ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   GetFatSector
;
;   Read the corresponding FAT sector into the second boot sector
;
;   INPUTS:
;       EAX == offset (from FAT entry 0) of entry to find
;
;   OUTPUTS:
;       ES:DI+BX -> corresponding FAT entry in the FAT sector
;
;   USES:
;       BX,EAX,ECX,EDX,DI
;

GetFatSector    PROC    NEAR
.386
        mov     DI,ORIGIN + SECTOR_SIZE
        movzx   ECX,[BP].bgbsBPB.oldBPB.BPB_BytesPerSector
        xor     edx,edx
        div     ECX                     ; EAX = Sector number, (E)DX = Offset
        cmp     EAX,dword ptr [BP].CurrBuffFatSecL  ; The same fat sector?
        je      short SetRet            ; Don't need to read it again
        mov     dword ptr [BP].CurrBuffFatSecL,EAX
        add     EAX,dword ptr [BP].bgbsBPB.oldBPB.BPB_HiddenSectors
        movzx   ecx,[BP].bgbsBPB.oldBPB.BPB_ReservedSectors
        add     eax,ecx                 ; Point at 1st (0th) FAT
        movzx   ebx,[BP].bgbsBPB.BGBPB_ExtFlags
        and     bx,BGBPB_F_ACTIVEFATMSK
        jz      short GotFatSec
        cmp     bl,[BP].bgbsBPB.oldBPB.BPB_NumberOfFATs
        jae     NoSysMsg
        push    dx                      ; Save offset of cluster in the FAT sec
        mov     ecx,eax                 ; Save FAT sector # in 0th FAT
        mov     eax,dword ptr [BP].bgbsBPB.BGBPB_BigSectorsPerFat
        mul     ebx                     ; EAX = Sector offset to active FAT
                                        ;       from 0th FAT
        add     eax,ecx
        pop     dx
GotFatSec:
        push    dx                      ; Save offset of cluster in the FAT sec
        mov     BX,DI
        mov     CX,1
        call    DoRead                  ; do the disk read, doesn't return if error
        pop     dx
SetRet:
        mov     BX,DX                   ; set BX to the offset of the cluster
.8086
        ret

GetFatSector    ENDP

        db      ((SECTOR_SIZE - ($-StrtThirdBootSector)) - 4) DUP (0)

        .errnz  ($-StrtThirdBootSector) NE OFFSETTRLSIG
        DD      BOOTSECTRAILSIG         ; Boot sector signature (4 bytes)

        .errnz  ($-$START) NE (SECTOR_SIZE * 3)
        .errnz  SIZEBIGBOOTINSEC NE 3

$BigEnd label byte

CODE    ENDS

        END
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\fat32nec.asm ===
NEC_98=1
        Page ,132
TITLE BOOT      SECTOR 1 OF TRACK 0 - BOOT LOADER
;++
;
;Module Name:
;
; fat32nec.asm
;
;Abstract:
;
; The ROM in NEC PC-9800 starts the boot process by performing a hardware
; initialization and a verification of all external devices.  If all goes
; well, it will then load from the boot drive the sector from track 0, head 0,
; sector 1.  This sector is placed at physical address 1FE00h.
;
; We need to load NTLDR at 2000:0. But the bootcode of FAT32 is 600h bytes.
; If we start at physical address 1FE0:0, the bootcode is broken by loaded NTLDR.
; At first, we move the bootcode to 0:7C00 from 1FE0:0 by oneself.
; The next, we jump to new Segment:Offset and start real bootcode procedure.
;
; The code is responsible for locating NTLDR and for placing the directory sector
; with this information.
;
; If WINBOOT.SYS is not found, an error message is displayed and the user is
; prompted to insert another disk.  If there is a disk error during the
; process, a message is displayed and things are halted.
;
; At the beginning of the boot sector, there is a table which describes the
; structure of the media.  This is equivalent to the BPB with some
; additional information describing the physical layout of the driver (heads,
; tracks, sectors)
;
;Author:
;
;
;Environment:
;
;    Real mode
;    FAT32 file system
;
;Revision History:
;
;     7/01/97    Tochizawa(NEC) support FAT32
;
;--

        .xlist
        include bpb.inc
        include bootsec.inc
        include dirent.inc
        ;include version.inc
        .list

; ==========================================================================
ORIGIN          EQU     7C00H           ; Origin of bootstrap LOADER

BIO_SEG         EQU     2000H           ; Destination segment of BIOS
BIO_OFFSET      EQU     0000H           ; Offset of bios

SECTOR_SIZE     EQU     512             ; Sector size in bytes
DIR_ENTRY_SIZE  EQU     SIZE DIR_ENTRY  ; Size of directory entry in bytes

ROM_DISKRD      EQU     2

SIZEBIGBOOTINSEC EQU    3

ifdef NEC_98
BOOTCODE_SEG    EQU     0000H           ; Destination segment of BOOTCODE
DAUA            EQU     584h
endif
; ==========================================================================

SEGBIOS SEGMENT AT BIO_SEG

        ; Define the destination segment of the BIOS, including the
        ; initialization label
        ORG     BIO_OFFSET
WINLOAD LABEL   BYTE

SEGBIOS ENDS

; ==========================================================================

        ; Local (on stack) Data storage between temp stack and start of
        ; boot sector

CurrBuffFatSecL EQU     -12
CurrBuffFatSecH EQU     -10
Int13Sectors    EQU     -8
DataSecL        EQU     -4
DataSecH        EQU     -2

; ==========================================================================

CODE    SEGMENT
        ASSUME  CS:CODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
        ORG     ORIGIN


        Public  $START
$START  Label   byte

        jmp     short Main
GotXint13:
        nop                             ; used to store xint13 flag

GotXint13Offset = (offset GotXint13 - offset $START)

; ==========================================================================

        ; Start of BPB area of the boot record

OsName          DB      "MSWIN"
OsVersion       DB      "4.1"           ; Windows version number

BytesPerSector  DW      SECTOR_SIZE     ; Size of a physical sector
SecsPerClust    DB      2               ; Sectors per allocation unit
ReservedSecs    DW      8               ; Number of reserved sectors
NumFats         DB      1               ; Number of fats
NumDirEntries   DW      1024            ; Number of direc entries
TotalSectors    DW      0               ; Number of sectors - number of hidden
                                        ; sectors (0 when 32 bit sector number)
MediaByte       DB      0F8H            ; MediaByte byte
NumFatSecs      DW      0               ; Number of fat sectors (0 when 32 bit)
SecPerTrack     DW      17              ; Sectors per track
NumHeads        DW      4               ; Number of drive heads

HiddenSecs      DD      1               ; Number of hidden sectors
BigTotalSecs    DD      00200000h       ; 32 bit version of number of sectors
BigNumFatSecs   DD      00001FE0h       ; 32 bit version of number of FAT sectors
ExtFlags        DW      0
BPBReserved1    DW      0
RootStrtClus    DD      0
FSInfoSec       dw      ((FSInfoSecSig - $START) / SECTOR_SIZE)
BkUpBootSec     dw      MBR_BOOTFAILBACKUP
BPBReserved2    DD      3 DUP (0)
        .errnz  ($-BytesPerSector) NE SIZE BIGFATBPB

BootDrv         DB      80h
CurrentHead     DB      0h              ; Current Head
ExtBootSig      DB      41
SerialNum       DD      0
VolumeLabel     DB      'NO NAME    '
FatId           DB      'FAT32   '

        .errnz  ($-$START) NE SIZE BIGFATBOOTSEC


; =========================================================================

;
;   First thing is to reset the stack to a better and more known
;   place. The ROM may change, but we'd like to get the stack
;   in the correct place.
;
Main:
ifdef NEC_98
        push    si                      ; Save Partition Information
;
; We moved bootcode to 0:ORIGIN from 1fe0:0.
;
        push    di
        mov     ax, cs
        mov     ds, ax                  ; DS = CS
        mov     si, 0                   ; DS:SI = 1fe0:0
        cld
        mov     cx, 256
        xor     ax, ax
        mov     es, ax
        mov     di, ORIGIN              ; ES:DI = 0:7c00
        rep     movsw
        pop     di
        pop     si                      ; Restore Partition Information
;
; We jump to 0:ORIGIN+RealBootStart
;
        mov     ax, BOOTCODE_SEG
        push    ax
        mov     ax, ORIGIN
        add     ax, RealBootStart
        push    ax
        retf

RealBootStart = (offset $ - offset $START)
endif
        xor     CX,CX
        mov     SS,CX                   ;Work in stack just below this routine
        mov     SP,ORIGIN+CurrBuffFatSecL
        mov     es,cx
        mov     ds,cx                   ; DS = ES = SS = 0
        ASSUME  DS:CODE,ES:CODE,SS:CODE
        mov     BP,ORIGIN

IFDEF NEC_98
.386
        push    si                          ; Save Partition Information
        mov     al, ds:[DAUA]               ;
        mov     [BP].bgbsDriveNumber, al    ; Save DriveNumber
else
;
; Determine the number of sectors addressable via
; conventional int13. If we can't get drive params for some reason
; then something is very wrong -- we'll try to force the caller
; to use conventional int13 by maxing out the sector count.
;
        mov     [bp].GotXint13Offset,cl ; no xint13 yet
        mov     dl,[bp].bgbsDriveNumber ; int13 unit number
        mov     ah,8                    ; get drive params
        int     13h                     ; call BIOS
        jnc     @f                      ; no error, procede
        mov     cx,-1                   ; strange case, fake registers to force
        mov     dh,cl                   ; use of standard int13 (set all vals to max)
@@:
.386
        movzx   eax,dh                  ; eax = max head # (0-255)
        inc     ax                      ; eax = heads (1-256)
        movzx   edx,cl                  ; edx = sectors per track + cyl bits
        and     dl,3fh                  ; edx = sectors per track (1-63)
        mul     dx                      ; eax = sectors per cylinder, edx = 0
        xchg    cl,ch
        shr     ch,6                    ; cx = max cylinder # (0-1023)
        inc     cx                      ; cx = cylinders (1-1024)
        movzx   ecx,cx                  ; ecx = cylinders (1-1024)
        mul     ecx                     ; eax = sectors visible via int13, edx = 0
        mov     [bp].Int13Sectors,eax   ; save # sectors addressable via int13
ENDIF
.8086

;
; The MBR (or boot ROM) only reads one boot sector. Thus the first order
; of business is to read the rest of ourself in by reading the second
; boot sector of the 2-sector boot record.
;
; The second sector in the NT case is at sector 12. This preserves
; the bootsect.dos logic and eliminates a special case for fat32.
;
ReadBoot:
        cmp     [BP].bgbsBPB.oldBPB.BPB_SectorsPerFAT,0 ; FAT32 BPB?
        jne     short NoSysMsg          ; No, invalid, messed up
        cmp     [BP].bgbsBPB.BGBPB_FS_Version,FAT32_Curr_FS_Version
        ja      short NoSysMsg          ; boot code too old for this volume
.386
        mov     eax,dword ptr [BP].bgbsBPB.oldBPB.BPB_HiddenSectors
        add     eax,12                  ; read in the second boot sector
.8086
        mov     BX,ORIGIN + (SECTOR_SIZE * 2)
        mov     cx,1
        call    DoRead                  ; doesn't return if err
        jmp     DirRead                 ; no error, continue boot in sector 2

DiskError:
        mov     al,byte ptr [MSGOFF_IOERROR]

;
; Al is the offset - 256 of the message within the boot sector.
; So we first calculate the real segment-based offset to the message
; and stick it in si so lodsb will work later.
;
DisplayError:
        .ERRNZ  ORIGIN MOD 256
        mov     ah,(ORIGIN / 256) + 1
ifdef NEC_98
        add     ax, 2
        mov     di, 0
endif
        mov     si,ax

DisplayError1:
ifdef NEC_98
        mov     ax, 0a000h              ; set V-RAM
        mov     es, ax
        xor     ah, ah
        lodsb                           ; Get next character
        cmp     AL,0Dh                  ; end of message?
        jz      WaitForKey              ; yes
        cmp     AL,0FFh                 ; end of sub-message?
        je      DisplayWait             ; yes, switch to final message now
        stosw                           ; move to vram
        jmp     short DisplayError1
else
        lodsb                           ; get next character
        test    AL,AL                   ; end of message?
        jz      WaitForKey              ; yes
        cmp     AL,0FFh                 ; end of sub-message?
        je      DisplayWait             ; yes, switch to final message now
        mov     AH,14                   ; write character & attribute
        mov     BX,7                    ; attribute (white char on black)
        int     10h                     ; print the character
        jmp     short DisplayError1
endif

DisplayWait:
        mov     al,byte ptr [MSGOFF_COMMON]
ifdef NEC_98
        mov     ah,(ORIGIN / 256) + 1
        add     ax, 2
        mov     si,ax
        mov     di, 160
        jmp     short DisplayError1
else
        jmp     short DisplayError
endif

NoSysMsg:
        mov     al,byte ptr [MSGOFF_NOSYS] ; point to no system file message
        jmp     short DisplayError

WaitForKey:
ifdef NEC_98
        mov     ax, 0h
        int     18h
        mov     al, 0h
        out     0f0h, al
else
        cbw                             ;warning assumes al is zero!
        int     16h                     ; get character from keyboard
        int     19h                     ; Continue in loop till good disk
endif

; =========================================================================
;
; Read disk sector(s). This routine cannot transfer more than 64K!
;
;   Inputs:  EAX == physical sector #
;            CL == # sectors (CH == 0)
;            ES:BX == transfer address
;
;   Outputs: EAX next physical sector #
;            CX == 0
;            ES:BX -> byte after last byte of read
;            Does not return if error
;
;   Reads sectors, switching to extended int13 if necessary and
;   available. The note below is for the conventional int13 case.
;
;   Notes:   Reads sectors one at a time in case they straddle a
;            track boundary.  Performs full 32-bit division on the
;            first decomposition (of logical sector into track+sector)
;            but not on the second (of track into cylinder+head),
;            since (A) we don't have room for it, and (B) the results
;            of that division must yield a quotient < 1024 anyway, because
;            the CHS-style INT 13h interface can't deal with cylinders
;            larger than that.
;
; =========================================================================

DoRead:
.386
        pushad

IFDEF NEC_98
        shld    edx,eax,16              ; EAX -> DX:AX
        mov     CX,AX                   ; We've gotten Phy.Sector# in DX:CX
        mov     bp,bx                   ; Buffer addr -> bp
        mov     bx,SECTOR_SIZE          ; Sector size -> bx
        push    ds
        xor     ax,ax
        mov     ds,ax                   ; DS = 0
        mov     al,ds:[DAUA]            ; set booting da/ua
        pop     ds                      ; Restore DS
        and     al,7fh                  ; strip high 1 bit
                                        ; SCSI HD
        mov     ah,06h                  ; set read command
        int     1bh
else
;
; Determine if the sector we're about to read is available via
; conventional int13.
;
        cmp     eax,[bp].Int13Sectors   ; determine if standard int13 is ok
        jb      stdint13

;
; Need extended int13. First set up parameter packet on stack.
; Then, if we don't know whether xint13 is available for the drive yet,
; find out. If not, error out since we know we can't read the sector
; we need.
;
        db      66h                     ; hand-coded 32-bit push of 8-bit immediate
        push    0                       ; high 32 bits of sector #
        push    eax                     ; low 32 bits of sector #
        push    es
        push    bx                      ; transfer address
        push    dword ptr 10010h        ; transfer 1 sector, packet size = 16

        cmp     byte ptr [bp].GotXint13Offset,0  ; have xint13?
        jnz     xint13ok                ; yes, do the read
        mov     ah,41h
        mov     bx,055aah
        mov     dl,[bp].bgbsDriveNumber
        int     13h                     ; check availability
        jc      xint13err               ; error from int13 means no xint13
        cmp     bx,0aa55h               ; absence of sig means no xint13
        jne     xint13err
        test    cl,1                    ; bit 0 off means no xint13
        jz      xint13err
        inc     byte ptr [bp].GotXint13Offset ; have xint13, remember for next time

xint13ok:
        mov     ah,42h                  ; extended read
        mov     dl,[bp].bgbsDriveNumber ; dl = int13 unit #
        mov     si,sp                   ; ds:si -> param packet
        int     13h                     ; perform the read
        db 0b0h                         ; HACK: avoid stc by making next
                                        ; byte part of mov al,xx instruction
xint13err:
        stc                             ; this instruction MUST follow previous byte!
        pop     eax                     ; throw away param packet without
        pop     eax                     ; clobbering carry flag
        pop     eax
        pop     eax

        jmp     short did_read

stdint13:
;
; Read via conventional int13
;
        xor     edx,edx                 ; edx:eax = absolute sector number
        movzx   ecx,[bp].bgbsBPB.oldBPB.BPB_SectorsPerTrack  ; ecx = sectors per track
        div     ecx                     ; eax = track, edx = sector within track (0-62)
        inc     dl                      ; dl = sector within track (1-63)
        mov     cl,dl                   ; cl = sector within track
        mov     edx,eax
        shr     edx,16                  ; dx:ax = track
        div     [bp].bgbsBPB.oldBPB.BPB_Heads ; ax = cylinder (0-1023), dx = head (0-255)
        xchg    dl,dh                   ; dh = head
        mov     dl,[bp].bgbsDriveNumber ; dl = int13 unit #
        mov     ch,al                   ; ch = bits 0-7 of cylinder
        shl     ah,6
        or      cl,ah                   ; bits 6-7 of cl = bits 8-9 of cylinder
        mov     ax,201h                 ; read 1 sector
        int     13h

did_read:
ENDIF
        popad

        jc      DiskError

        add     bx,SECTOR_SIZE          ; advance transfer address
        inc     eax                     ; next sector number
        dec     cx                      ; loop instruction is out of range,
        jnz     DoRead                  ; have to do it manually
        ret
.8086

        Public  WinBoot                 ; System boot file (11 bytes)
WinBoot DB      "NTLDR      "

;
; Message table.
;
; We put English messages here as a placeholder only, so that in case
; anyone uses bootf32.h without patching new messages in, things will
; still be correct (in English, but at least functional).
;
        .errnz ($-$START) GT 1ACH
        ORG     ORIGIN + 01ACH          ; shift message to coincide with that in FAT
                                        ; this will help driver to think the MBR
                                        ; is empty when dealing with FAT32 superfloppy
        include msgstub.inc

;
; Now build a table with the low byte of the offset to each message.
; Code that patches the boot sector messages updates this table.
;
        .errnz ($-$START) GT (SECTOR_SIZE-7)
        ORG     ORIGIN + SECTOR_SIZE - 7
MSGOFF_NOSYS:
        db OFFSET (MSG_NOSYS - ORIGIN) - 256
MSGOFF_IOERROR:
        db OFFSET (MSG_IOERROR - ORIGIN) - 256
MSGOFF_COMMON:
        db OFFSET (MSG_COMMON - ORIGIN) - 256

        ORG     ORIGIN + (SECTOR_SIZE - 4)
        DD      BOOTSECTRAILSIG         ; Boot sector signature (4 bytes)


        .errnz  ($-$START) NE SECTOR_SIZE
SecndSecStart label byte
;
; The second boot sector contains nothing but data. This sector is re-written
; by MS-DOS with a fairly high frequency due to changes made to the fsinfo
; structure. We don't want the actual boot code to get accidentally corrupted.
;
FSInfoSecSig label byte
        .errnz  ($-SecndSecStart) NE 0
        DD      SECONDBOOTSECSIG

        db      (SECTOR_SIZE - ($-FSInfoSecSig) - 4 - (SIZE BIGFATBOOTFSINFO)) DUP (0)

        .errnz  ($-SecndSecStart) NE (OFFSETFSINFOFRMSECSTRT)

fsinfo  BIGFATBOOTFSINFO <FSINFOSIG,0FFFFFFFFh,000000002h>

        .errnz  ($-FSInfoSecSig) NE OFFSETTRLSIG
        DD      BOOTSECTRAILSIG         ; Boot sector signature (4 bytes)

        .errnz  ($-$START) NE (SECTOR_SIZE * 2)
StrtThirdBootSector     LABEL BYTE

DirRead:
.386
        movzx   eax,[BP].bgbsBPB.oldBPB.BPB_NumberOfFATs  ; Determine sector dir starts on (NumFats)
        mov     ecx,dword ptr [BP].bgbsBPB.BGBPB_BigSectorsPerFat
        mul     ecx                     ; EAX = (NumFatSecs)
        add     EAX,dword ptr [BP].bgbsBPB.oldBPB.BPB_HiddenSectors ; (HiddenSecs)
        movzx   edx,[BP].bgbsBPB.oldBPB.BPB_ReservedSectors         ;(ReservedSecs)
        add     EAX,EDX
;
;   EAX = NumFats * NumFatSecs + ReservedSecs + cSecHid
;         (first physical sector of cluster area)
;
        mov     dword ptr [BP].DataSecL,EAX
        mov     dword ptr [BP].CurrBuffFatSecL,0FFFFFFFFh
DirReRead:
        mov     eax,dword ptr [BP].bgbsBPB.BGBPB_RootDirStrtClus
        cmp     eax,2
        jb      NoSysMsg
        cmp     eax,00FFFFFF8h
        jae     NoSysMsg

; EAX is starting cluster of root directory

DirCluster:
        push    eax                     ; save starting cluster number
        sub     eax,2                   ; Convert to 0 based cluster #
        movzx   EBX,[BP].bgbsBPB.oldBPB.BPB_SectorsPerCluster
        mov     si,bx                   ; Sector count to SI for sector loop
        mul     EBX                     ; compute logical sector in EAX
        add     EAX,dword ptr [BP].DataSecL ; Add data start bias
DirSector:
        mov     BX,ORIGIN+(SIZEBIGBOOTINSEC*SECTOR_SIZE)
        mov     DI,BX                   ; save address in DI for comparisons
        mov     CX,1
        call    DoRead                  ; doesn't return if error
                                        ; relies on return cx=0
DirEntry:
        cmp     byte ptr [di],ch        ; empty, NUL directory entry?
        je      short MissingFile       ; yes, that's the end

        mov     CL,11
        push    SI
        mov     si,offset WinBoot
        repz    cmpsb                   ; see if the same
        pop     SI
        jz      short DoLoad            ; if so, continue booting

        add     DI,CX                   ; Finish advance to end of name field
        add     DI,DIR_ENTRY_SIZE-11    ; Next dir entry
        cmp     DI,BX                   ; exhausted this root dir sector yet?
        jb      DirEntry                ; no, check next entry
        dec     SI                      ; decrement # dir sectors
        jnz     DirSector               ; More dir sectors in this cluster
        pop     eax                     ; recover current root dir cluster
        call    GetNextFatEntry
        jc      DirCluster              ; Do next Root dir cluster
MissingFile:
        add     sp,4                    ; Discard EAX saved on stack
        jmp     NoSysMsg

CurrentSegment  dw      BIO_SEG
;
;   We now load NTLDR
;
;   All we have to do is multiply the file's starting cluster
;   (whose directory entry is at DS:DI-11) by sectors per cluster and
;   add that to the disk's starting data sector. We read ntldr into
;   2000:0, and begin execution there.
;
DoLoad:
        add     sp,4                    ; Discard DX:AX saved on stack above
        mov     si,[DI-11].DIR_FIRSTHIGH
        mov     di,[DI-11].DIR_FIRST    ; SI:DI = NTLDR starting cluster
        mov     ax,si
        shl     eax,16
        mov     ax,di                   ; EAX = NTLDR starting cluster
        cmp     eax,2                   ; valid cluster #?
        jb      NoSysMsg                ; NO!
        cmp     eax,00FFFFFF8h
        jae     NoSysMsg                ; NO!

ReadAcluster:
        push    eax                     ; save cluster number
        sub     eax,2                   ; Subtract first 2 reserved clusters
        movzx   ecx,[BP].bgbsBPB.oldBPB.BPB_SectorsPerCluster ; ECX = Sectors per cluster (SecsPerClust)
        mul     ecx                     ; EAX = logical sector #

        add     eax,dword ptr [BP].DataSecL  ; EAX = physical sector #

        mov     bx,BIO_OFFSET
        push    es
        mov     es,CurrentSegment       ; ES:BX = destination for read
        call    DoRead                  ; read all sectors in cluster, doesn't return if error
        pop     es
        pop     eax                     ; recover current 0-based cluster#
        shr     bx,4                    ; updated offset -> paragraphs
        add     CurrentSegment,bx       ; update segment for next read

        call    GetNextFatEntry         ; get 2-based successor cluster in EAX
        jnc     StartItUp               ; if end of cluster chain reached
        jc      ReadACluster            ; keep sucking up clusters
.8086

;
; NTLDR requires the following input conditions:
;
;       DL = boot drive #
;

StartItUp:
        mov     DL,[BP].bgbsDriveNumber
ifdef NEC_98
        lea     si,[BP].bgbsBPB
        pop     bp                      ; Restore Partition Information
endif
        jmp     FAR PTR WINLOAD         ; CRANK UP THE WINDOWS NT BOOT LOADER

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   GetNextFatEntry
;
;   Given the last cluster found, this will return the next cluster
;   of a chain of clusters. If the last cluster is (ffff)(f)ff8 - (ffff)(f)fff,
;   then the final cluster has been loaded.
;
;   INPUTS:
;       EAX = CurrentCluster (0 based cluster #)
;
;   OUTPUTS:
;       EAX = Next cluster (2 based cluster #)
;       Carry CLEAR if all done, SET if not
;
;   USES:
;   EAX,EBX,ECX,EDX,ESI,DI es
;

GetNextFatEntry PROC NEAR

        ; NOTE For following... FAT32 cluster numbers are 28 bits not 32,
        ; so we know the following multiply (shl DX:AX by 2) will never
        ; overflow into carry.
.386
        shl     eax,2
        call    GetFatSector
        mov     EAX,dword ptr ES:[DI+BX]
        and     EAX,0FFFFFFFh           ; Mask to valid FAT32 cluster # bits
        cmp     EAX,00FFFFFF8h          ; carry CLEAR if all done, SET if not
.8086
        ret

GetNextFatEntry ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   GetFatSector
;
;   Read the corresponding FAT sector into the second boot sector
;
;   INPUTS:
;       EAX == offset (from FAT entry 0) of entry to find
;
;   OUTPUTS:
;       ES:DI+BX -> corresponding FAT entry in the FAT sector
;
;   USES:
;       BX,EAX,ECX,EDX,DI
;

GetFatSector    PROC    NEAR
.386
        mov     DI,ORIGIN + SECTOR_SIZE
        movzx   ECX,[BP].bgbsBPB.oldBPB.BPB_BytesPerSector
        xor     edx,edx
        div     ECX                     ; EAX = Sector number, (E)DX = Offset
        cmp     EAX,dword ptr [BP].CurrBuffFatSecL  ; The same fat sector?
        je      short SetRet            ; Don't need to read it again
        mov     dword ptr [BP].CurrBuffFatSecL,EAX
        add     EAX,dword ptr [BP].bgbsBPB.oldBPB.BPB_HiddenSectors
        movzx   ecx,[BP].bgbsBPB.oldBPB.BPB_ReservedSectors
        add     eax,ecx                 ; Point at 1st (0th) FAT
        movzx   ebx,[BP].bgbsBPB.BGBPB_ExtFlags
        and     bx,BGBPB_F_ACTIVEFATMSK
        jz      short GotFatSec
        cmp     bl,[BP].bgbsBPB.oldBPB.BPB_NumberOfFATs
        jae     NoSysMsg
        push    dx                      ; Save offset of cluster in the FAT sec
        mov     ecx,eax                 ; Save FAT sector # in 0th FAT
        mov     eax,dword ptr [BP].bgbsBPB.BGBPB_BigSectorsPerFat
        mul     ebx                     ; EAX = Sector offset to active FAT
                                        ;       from 0th FAT
        add     eax,ecx
        pop     dx
GotFatSec:
        push    dx                      ; Save offset of cluster in the FAT sec
        mov     BX,DI
        mov     CX,1
        call    DoRead                  ; do the disk read, doesn't return if error
        pop     dx
SetRet:
        mov     BX,DX                   ; set BX to the offset of the cluster
.8086
        ret

GetFatSector    ENDP

        db      ((SECTOR_SIZE - ($-StrtThirdBootSector)) - 4) DUP (0)

        .errnz  ($-StrtThirdBootSector) NE OFFSETTRLSIG
        DD      BOOTSECTRAILSIG         ; Boot sector signature (4 bytes)

        .errnz  ($-$START) NE (SECTOR_SIZE * 3)
        .errnz  SIZEBIGBOOTINSEC NE 3

$BigEnd label byte

CODE    ENDS

        END
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\mbr\i386\x86mboot.asm ===
page    ,132
;
;   Microsoft Confidential
;   Copyright (C) Microsoft Corporation 1983-1997
;   All Rights Reserved.
;
;
;   This is the standard boot record that will be shipped on all hard disks.
;   It contains:
;
;   1.  Code to load (and give control to) the active boot record for 1 of 4
;       possible operating systems.
;
;   2.  A partition table at the end of the boot record, followed by the
;       required signature.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VOLBOOT_ORG             EQU 7c00h
SIZE_SECTOR             EQU 512

;
; Partition table entry structure and other related stuff
;
Part_Active             EQU 0
Part_StartHead          EQU 1
Part_StartSector        EQU 2
Part_StartCylinder      EQU 3
Part_Type               EQU 4
Part_EndHead            EQU 5
Part_EndSector          EQU 6
Part_EndCylinder        EQU 7
Part_AbsoluteSector     EQU 8
Part_AbsoluteSectorH    EQU 10
Part_SectorCount        EQU 12
Part_SectorCountH       EQU 14

SIZE_PART_TAB_ENT       EQU 16
NUM_PART_TAB_ENTS       EQU 4

PART_TAB_OFF            EQU (SIZE_SECTOR - 2 - (SIZE_PART_TAB_ENT * NUM_PART_TAB_ENTS))
MBR_NT_OFFSET           EQU (PART_TAB_OFF - 6)
MBR_MSG_TABLE_OFFSET    EQU (PART_TAB_OFF - 9)

;
; Space we use for temp storage, beyond the end of
; the active partition table entry, and thus safe.
;
UsingBackup             EQU SIZE_PART_TAB_ENT

;
; Partition types
;
PART_IFS                EQU 07h
PART_FAT32              EQU 0bh
PART_FAT32_XINT13       EQU 0ch
PART_XINT13             EQU 0eh

;
; Filesystem and pbr stuff
;
BOOTSECTRAILSIGH        EQU 0aa55h
FAT32_BACKUP            EQU 6



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RELOCATION_ORG  EQU     600h

READ_RETRY_CNT  EQU     5


_data   segment public
        assume  cs:_data,ds:nothing,es:nothing,ss:nothing

        org     100h
start100 label near
        org     RELOCATION_ORG

;   Move ourselves so that we can load the partition boot record from
;   the active partition at 0:VOLBOOT_ORG without trashing our own code.
;
;   WARNING: We are not executing at 0:RELOCATION_ORG until the far
;   immediate jump, below.  This basically means beware of OFFSETs of
;   any labels until we get there.  Until then, we're still executing at
;   0:VOLBOOT_ORG.

reloc_delta = 1Bh

start:
        xor     ax,ax
        mov     ss,ax
        mov     sp,VOLBOOT_ORG          ; new stack at 0:7c00
        sti
        push    ax
        pop     es
        assume  es:_data
        push    ax
        pop     ds
        assume  ds:_data
        cld
        mov     si,VOLBOOT_ORG + reloc_delta
        mov     di,RELOCATION_ORG + reloc_delta
        push    ax
        push    di
        mov     cx,SIZE_SECTOR - reloc_delta
        rep     movsb                   ; relocate to 0:0600
        retf

;   We are now RELOCATED and are now executing at 0:RELOCATION_ORG.
;
;   Find the active partition.  Once we find it, we also make sure that the
;   remaining partitions are INACTIVE, too.

        .errnz  reloc_delta NE $-start  ; make sure reloc_delta is correct

        mov     bp,offset tab           ; partition table
        mov     cl,NUM_PART_TAB_ENTS    ; number of table entries (CH==0)

active_loop:
        cmp     [bp].Part_Active,ch     ; is this the active entry?
        jl      check_inactive          ; yes
        jne     display_bad             ; no, it must be "00" or "8x"

        add     bp,SIZE_PART_TAB_ENT    ; yes, go to next entry
        loop    active_loop

        int     18h                     ; no active entries - go to ROM BASIC

;   Now make sure the remaining partitions are INACTIVE.
check_inactive:
        mov     si,bp                   ; si = active entry
inactive_loop:
        add     si,SIZE_PART_TAB_ENT    ; point si to next entry
        dec     cx                      ; # entries left
        jz      StartLoad               ; all entries look ok, start load
        cmp     [si],ch                 ; all remaining entries should be zero
        je      inactive_loop           ; this one is ok

display_bad:
        mov     al,byte ptr [m1]        ; partition table is bad

display_msg:
;
; Al is the offset-256 of the message text. Adjust and
; stick in si so lodsb below will work.
;
        .ERRNZ  RELOCATION_ORG MOD 256
        mov     ah,(RELOCATION_ORG / 256) + 1
        mov     si,ax

display_msg1:
        lodsb                           ; get a message character
@@:     cmp     al,0                    ; end of string?
        je      @b                      ; yes, loop infinitely
        mov     bx,7
        mov     ah,14
        int     10h                     ; and display it
        jmp     display_msg1            ; do the entire message

;
; Now attempt to read the sector.
;
; We store a data byte indicating whether this is the backup
; sector, at the byte just beyond the end of the partition table entry.
; We know there's nothing there we care about any more, so this
; is harmless.
;
; BP is the address of the active partition entry.
; AX and CX are currently zero.
;
StartLoad:
        mov     byte ptr [bp].UsingBackup,cl    ; not backup sector
        call    ReadSector
        jnc     CheckPbr
trybackup:
        inc     byte ptr [bp].UsingBackup

;
; Switch to backup sector for NTFS and FAT32.
;
if 0
;
; (tedm) for NTFS this code is actually worthless since other code,
; such as ntldr and the filesystem itself won't all do the right thing.
; For example the filesystem won't recognize the volume if sector 0
; can be read but is bad.
;
        cmp     byte ptr [bp].Part_Type,PART_IFS
        jne     tryfat32
;
; We assume here that type 7 is NTFS.
; Back up to end of partition by using the end CHS and subtracting 1
; from the sector #. There is no check for the case where we underflow
; and wrap a head -- it is assumed that partitions are at least head-aligned.
; There is also no check for the case where the start sector and sector count
; are both maxdword and so adding them overflows.
;
        mov     al,[bp].Part_EndHead    ; make start head same as end head
        mov     [bp].Part_StartHead,al
        mov     ax,[bp].Part_EndSector  ; ax = end sector and cylinder
        dec     al                      ; start sector = end sector minus 1
        mov     [bp].Part_StartSector,ax
        mov     ax,[bp].Part_SectorCount
        mov     dx,[bp].Part_SectorCountH
        add     [bp].Part_AbsoluteSector,ax
        adc     [bp].Part_AbsoluteSectorH,dx
        sub     word ptr [bp].Part_AbsoluteSector,1
        sbb     word ptr [bp].Part_AbsoluteSectorH,0
        jmp     short RestartLoad
endif

tryfat32:
        cmp     byte ptr [bp].Part_Type,PART_FAT32
        je      fat32backup
        cmp     byte ptr [bp].Part_Type,PART_FAT32_XINT13
        je      fat32backup
        mov     al,byte ptr [m2]        ; unknown fs, so no backup sector
        jne     display_msg

fat32backup:
;
; There is no check for the case where adding to the sector value
; in the start CHS overflows and wraps to the next head. It is assumed
; that partitions are at least head-aligned and that hard drives have
; at least FAT32_BACKUP+1 sectors per track.
;
        add     byte ptr [bp].Part_StartSector,FAT32_BACKUP
        add     word ptr [bp].Part_AbsoluteSector,FAT32_BACKUP
        adc     word ptr [bp].Part_AbsoluteSectorH,0

RestartLoad:
        call    ReadSector
        jnc     CheckPbr
        mov     al,byte ptr [m2]        ; can't load, we're done.
        jmp     short display_msg

CheckPbr:
        cmp     word ptr ds:[VOLBOOT_ORG + SIZE_SECTOR - 2],BOOTSECTRAILSIGH
        je      done
;
; Not a valid filesystem boot sector. Switch to backup if this
; isn't already the backup.
;
        cmp     byte ptr [bp].UsingBackup,0
        je      trybackup
        mov     al,byte ptr [m3]
        jmp     short display_msg

;
; Jump to PBR. We pass a pointer to the table entry that booted us
; in bp. If we used the backup boot sector, then that table entry
; will have been altered, but neither NTFS not FAT32 use the pointer
; in BP, and no other fs type will have been loaded via the backup
; boot sector, so this isn't an issue.
;
done:
        mov     di,sp                   ; DI -> start of PBR
        push    ds                      ; prepare for RETF, which is
        push    di                      ; smaller than JMP 0:VOLBOOT_ORG
        mov     si,bp                   ; pass boot partition table entry address
        retf                            ; start executing PBR


ReadSector proc near

        mov     di,5                    ; retry count
;
; Calculate the maximum sector # that can be addressed via
; conventional int13. Note that the max # of heads is 256
; and the maximum # of sectors per track is 63. Thus the maximum
; # of sectors per cylinder is something less than a 16-bit quantity.
;
        mov     dl,[bp].Part_Active     ;
        mov     ah,8                    ; get disk params
        int     13h
        jc      nonxint13               ; strange case, fall back to std int13

        mov     al,cl
        and     al,3fh                  ; al = # of sectors per track
        cbw                             ; ax = # of sectors per track (ah=0)

        mov     bl,dh                   ; bl = max head # (0-based)
        mov     bh,ah                   ; bh = 0
        inc     bx                      ; bx = # of heads

        mul     bx                      ; ax = sectors per cylinder, dx = 0

        mov     dx,cx                   ; dx = cylinder/sector in int13 format
        xchg    dl,dh                   ; dl = low 8 bits of cylinder
        mov     cl,6
        shr     dh,cl                   ; dx = max cylinder # (0-based)
        inc     dx                      ; dx = # cylinders

        mul     dx                      ; dx:ax = # sectors visible via int13

;
; If the sector # we're reading is less than the than number of
; addressable sectors, use conventional int 13
;
        cmp     [bp].Part_AbsoluteSectorH,dx
        ja      xint13
        jb      nonxint13
        cmp     [bp].Part_AbsoluteSector,ax
        jae     xint13

nonxint13:
        mov     ax,201h
        mov     bx,VOLBOOT_ORG          ; es:bx = read address (0:7c00)
        mov     cx,[bp].Part_StartSector
        mov     dx,[bp].Part_Active
        int     13h
        jnc     endread
        dec     di                      ; retry? (does not affect carry)
        jz      endread                 ; carry set for return
        xor     ah,ah                   ; ah = 0 (reset disk system)
        mov     dl,[bp].Part_Active     ; dl = int13 unit #
        int     13h
        jmp     short nonxint13

xint13:
;
; We want to avoid calling xint13 unless we know it's available
; since we don't trust all BIOSes to not hang if we attempt an xint13 read.
; If xint13 isn't supported we won't be able to boot, but at least
; we'll give an error message instead of just a black screen.
;
        mov     dl,[bp].Part_Active     ; unit #
.286
        pusha
        mov     bx,055AAh               ; signature
        mov     ah,41h                  ; perform X13 interrogation
        int     13h                     ;
        jc      endread1                ; call failed
        cmp     bx,0AA55h               ; did our signature get flipped?
        jne     endread1                ; no
        test    cl,1                    ; is there X13 support?
        jz      endread1                ; no
        popa

doxint13:
        pusha                           ; save regs
        push    0                       ; push dword of 0
        push    0                       ; (high 32 bits of sector #)
        push    [bp].Part_AbsoluteSectorH
        push    [bp].Part_AbsoluteSector ; low 32 bits of sector #
        push    0
        push    VOLBOOT_ORG             ; transfer address
        push    1                       ; 1 sector
        push    16                      ; packet size and reserved byte

        mov     ah,42h                  ; extended read
        mov     si,sp                   ; ds:si points to parameter packet
        int     13h                     ; dl already set from above

        popa                            ; pop param packet off stack
        popa                            ; get real registers back
        jnc     endread
        dec     di                      ; retry? (does not affect carry)
        jz      endread                 ; carry set for return
        xor     ah,ah                   ; ah = 0 (reset disk system)
        mov     dl,[bp].Part_Active     ; dl = int13 unit #
        int     13h
        jmp     short doxint13

endread1:
        popa
        stc                             ; this is the error case
.8086
endread:
        ret
ReadSector endp

;
; Message table.
;
; We put English messages here as a placeholder only, so that in case
; anyone uses bootmbr.h without patching new messages in, things will
; still be correct (in English, but at least functional).
;
_m1:    db      "Invalid partition table",0
_m2:    db      "Error loading operating system",0
_m3:    db      "Missing operating system",0

;
; Now build a table with the low byte of the offset to each message.
; Code that patches the boot sector messages updates this table.
;
        .errnz  ($ - start) GT MBR_MSG_TABLE_OFFSET
        org     RELOCATION_ORG + MBR_MSG_TABLE_OFFSET

m1:     db (OFFSET _m1 - RELOCATION_ORG) - 256
m2:     db (OFFSET _m2 - RELOCATION_ORG) - 256
m3:     db (OFFSET _m3 - RELOCATION_ORG) - 256


        .errnz  ($ - start) NE MBR_NT_OFFSET
        dd      0                       ; NT disk administrator signature
        dw      0

        .errnz  ($ - start) GT PART_TAB_OFF

        org     RELOCATION_ORG + PART_TAB_OFF
tab:                            ;partition table
        dw      0,0             ;partition 1 begin
        dw      0,0             ;partition 1 end
        dw      0,0             ;partition 1 relative sector (low, high parts)
        dw      0,0             ;partition 1 # of sectors (low, high parts)
        dw      0,0             ;partition 2 begin
        dw      0,0             ;partition 2 end
        dw      0,0             ;partition 2 relative sector
        dw      0,0             ;partition 2 # of sectors
        dw      0,0             ;partition 3 begin
        dw      0,0             ;partition 3 end
        dw      0,0             ;partition 3 relative sector
        dw      0,0             ;partition 3 # of sectors
        dw      0,0             ;partition 4 begin
        dw      0,0             ;partition 4 end
        dw      0,0             ;partition 4 relative sector
        dw      0,0             ;partition 4 # of sectors

    .errnz  ($ - tab)   NE (SIZE_PART_TAB_ENT * NUM_PART_TAB_ENTS)
    .errnz  ($ - start) NE (SIZE_SECTOR - 2)

signa   dw      BOOTSECTRAILSIGH ;signature

    .errnz  ($ - start) NE SIZE_SECTOR

_data   ends

        end start100
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\fat\i386\fatnec98.asm ===
;++
;
;Module Name:
;
; fatnec98.asm
;
;Abstract:
;
; The ROM in NEC PC-9800 starts the boot process by performing a hardware
; initialization and a verification of all external devices.  If all goes
; well, it will then load from the boot drive the sector from track 0, head 0,
; sector 1.  This sector is placed at physical address 1FC00h or 1FE00h.
; This start address is decided by boot device.
;
; The code in this sector is responsible for locating NTLDR and
; for placing the directory sector with this information at DirSeg:0.
; After loading in this sector, it reads in the entirety of the BIOS at
; BiosSeg:0 and does a long jump to the entry point at BiosSeg:0.
;
; There are no error message during execution of this code.
; In case of NTLDR does not exist or BIOS read error, will sound beep.
;
; At the beginning of the boot sector, there is a table which describes the
; structure of the media.  This is equivalent to the BPB with some
; additional information describing the physical layout of the driver (heads,
; tracks, sectors)
;
;Author:
;
;
;Environment:
;
;    Real mode
;    FAT file system
;
;Revision History:
;
;     6/12/97    Tochizawa(NEC) support booting from 1.44MB FD
;
;--
        page    ,132
        title   boot - NTLDR FAT loader
        name    fatboot

.8086

DIR_ENT struc
        Filename        db 11 dup(?)
        Attribute       db ?
        Reserved        db 10 dup(?)
        Time            dw 2 dup(?)
        StartCluster    dw ?
        FileSize        dd ?
DIR_ENT ends

;
; This is the structure used to pass all shared data between the boot sector
; and NTLDR.
;

SHARED  struc
        ReadClusters            dd      ?               ; function pointer
        ReadSectors             dd      ?               ; function pointer
        SectorBase              dd      ?               ; starting sector
SHARED  ends



DoubleWord      struc
lsw     dw      ?
msw     dw      ?
DoubleWord      ends

SectorSize      equ     512             ; sector size

HiRes           equ     00001000b
DAFloppy        equ     00010000b       ; floppy bit in DA
DASCSI          equ     00100000b       ; SCSI bit in DA
SYS_PORT        equ     37h

BootSeg segment at 1fc0h
BootSeg ends

SysSeg  segment at 0040h
        org     100h
BIOS_FLAG   label byte
        org     184h
BootDrive98 label byte
SysSeg  ends

DirSeg  segment at 1000h
DirSeg  ends

NtLdrSeg segment at 2000h
NtLdrSeg ends

BootCode        segment ;would like to use BootSeg here, but LINK flips its lid
    ASSUME  CS:BootCode,DS:NOTHING,ES:NOTHING,SS:NOTHING

        public  FATBOOT
FATBOOT proc    far

        jmp     short   Start
        nop
;
;       THE FOLLOWING DATA CONFIGURES THE BOOT PROGRAM
;       FOR ANY TYPE OF DRIVE OR HARDFILE
;
; Note that this data is just a place-holder here.  The actual values will
; be filled in by FORMAT or SYS.  When installing the boot sector, only the
; code following the BPB (from Start to the end) should be copied into the
; first sector.
;

OsName                  db      "MSWIN"
OsVersion               db      "4.1"
BPB                     label   byte
BytesPerSector          dw      SectorSize      ; Size of a physical sector
SectorsPerCluster       db      8               ; Sectors per allocation unit
ReservedSectors         dw      4               ; Number of reserved sectors
Fats                    db      2               ; Number of fats
DirectoryEntries        dw      0c00h           ; Number of directory entries
Sectors                 dw      0               ; No. of sectors - no. of hidden sectors
Media                   db      0F8H            ; Media byte
FatSectors              dw      70h             ; Number of fat sectors
SectorsPerTrack         dw      23h             ; Sectors per track
Heads                   dw      7               ; Number of surfaces
HiddenSectors           dd      0f5h            ; Number of hidden sectors
SectorsLong             dd      369c4h          ; Number of sectors iff Sectors = 0

;
; The following byte is NOT part of the BPB but is set by SYS and format
; We should NOT change its position.
;

; keep order of DriveNumber and CurrentHead!
DriveNumber     db      80h             ; Physical drive number (0 or 80h)
CurrentHead     db      0               ; Unitialized

Signature       db      41              ; Signature Byte for bootsector
BootID          dd      0               ; Boot ID field.
Boot_Vol_Label  db      "NO NAME    "
Boot_System_ID  db      'FAT12   '      ;

;
; We need a shred data area with ntldr/setupldr.
; But we don't have memory for using data area. Because bootcode size is 512KB.
; There is nothing for it but to use this area.
;
NtldrSharedData   label   dword
Start:
    assume  DS:nothing,ES:nothing

        xor     ax, ax                  ; Setup the stack to a known good spot
        mov     ss, ax
        mov     sp, 7c00h

        push    cs
        pop     ds
    assume DS:BootCode
        mov     ax, SysSeg
        mov     es, ax
    assume ES:SysSeg

        mov     al, BootDrive98
        mov     DriveNumber, al         ; boot drive

        push    si                      ; save partition info

; We need some intialization.
        mov     si, BytesPerSector      ; keep it in reg

        test    al, DAFloppy
        jnz     Flg00
; Boot is from hard disk.
; Our BPB tells us BytesPerSector, but it is a logical value
; that may differ from the physical value.
; We need SectorShiftFactor that is used to convert logical sector address
; to phisical sector address.

        mov     ah, 84h                 ; ROM BIOS sense command
        xor     bx, bx                  ; initialize bx to 0
        int     1Bh                     ;
        jc      Flg01

        test    bx, bx                  ; physical sector length returned ?
        jnz     Flg02                   ; if not,
Flg01:
        mov     bx, 256                 ;   we assume 256 bytes per sector
Flg02:
        mov     ax, si                  ; BytesPerSector
        xor     dx, dx
        div     bx
        mov     NtldrSharedData.SectorShiftFactor, ax
        mov     ax, 32*1024             ; 32KB
;       xor     dx, dx                  ; dx must be 0 here.
        div     si                      ; BytesPerSector
        mov     NtldrSharedData.LogicalSectorsIn32KByte, al
Flg00:

; The system is now prepared for us to begin reading.  First, determine
; logical sector numbers of the start of the directory and the start of the
; data area.
;

; We read all the directory entries into DirSeg.
; It might be more than 64KB if hard disk.

        mov     ax, size DIR_ENT
        mul     DirectoryEntries    ; (dx:ax) = # of bytes in directory
        dec     si                  ; (si) = BytesPerSector -1
        add     ax, si
        adc     dx, 0
        inc     si                  ; (si) = BytesPerSector
        div     si                  ; (ax) = # of sectors in directory
        mov     cx, ax              ; save it in cx for later

        mov     al, Fats
        xor     ah, ah              ; (ax) = # of FATs
        mul     FatSectors          ; (ax) = # of FAT sectors
        add     ax, ReservedSectors ; (ax) = sector # directory starts
        adc     dx, 0
                                    ; save it in "Arguments" for later 'Read'
        mov     NtldrSharedData.Arguments.SectorBase.lsw, ax
        mov     NtldrSharedData.Arguments.SectorBase.msw, dx

        add     ax, cx              ; next sector after directory
        mov     NtldrSharedData.ClusterBase, ax   ; save it for later use

Rpt00:
        push    cx                  ; (cx) = # of sectors in directory
        push    si                  ; (si) = BytesPerSector

        mov     bx, DirSeg
        mov     es, bx
    assume  es:DirSeg
        xor     bx, bx              ; (es:bx) -> directory segment

; NTLDR is supposed to occupy 1st 512 entries
; in the root directory.

        xor     dx, dx
        mov     ax, (512*32)        ; (dx:ax) = 4000h
        div     si                  ; (si) = BytesPerSector

;
; DoRead does a RETF, but LINK pukes if we do a FAR call in a /tiny program.
;
; (ax) = # of sectors to read
;

        push    ax
        push    cs                  ; make retern frame
        call    DoRead              ; read directory
        pop     ax
        jc      BootErr$he

; Now we scan for the presence of NTLDR

        xor     bx, bx              ; offset
        mov     cx, 512             ; # of entries to search (only 512)

Rpt01:
        mov     di, bx              ; (es:di) = filespec in directory entry
        push    cx
        mov     cx, 11              ; (cx) = filespec size
        mov     si, offset LOADERNAME   ; (ds:si) = filespec we are searching
        repe    cmpsb
        pop     cx
        je      @F                  ; if matches, exit loop
        add     bx, size DIR_ENT    ; else next entry
        loop    Rpt01
@@:
        test    cx, cx
        pop     si
        pop     cx
        jnz     Rpt02

        add     NtldrSharedData.Arguments.SectorBase.lsw, ax
        adc     NtldrSharedData.Arguments.SectorBase.msw, 0
        sub     cx, ax
        ja      Rpt00
        jmp     BootErr$bnf

Rpt02:
; We have found NTLDR
; We read it into NtLdrSeg.

        mov     dx, es:[bx].StartCluster    ; (dx) = starting cluster number
        mov     ax, 1               ; (ax) = sectors to read
        cmp     BytesPerSector, 256
        jne     @F

        inc     ax                  ; We need to read 2 sectors
@@:
;
; Now, go read the file
;

        mov     bx, NtLdrSeg
        mov     es, bx
    assume  es:NtLdrSeg
        xor     bx, bx              ; (es:bx) -> start of NTLDR

;
; LINK barfs if we do a FAR call in a TINY program, so we have to fake it
; out by pushing CS.
;

        push    dx                  ; save starting cluster number

        push    cs                  ; make retern frame
        call    ClusterRead

        pop     bx                  ; (bx) = Starting Cluster Number
        jc      BootErr$he

;
; NTLDR requires:
;   BX = Starting Cluster Number of NTLDR
;   DL = INT 1B drive number we booted from  <- DA/UA in 98
;   DS:SI -> the boot media's BPB
;   DS:DI -> argument structure
;   1000:0000 - entire DIR is loaded
; On PC-9801 we have one more parameter...
;   (bp) = partition info
;

        lea     si, BPB             ; ds:si -> BPB
        lea     di, NtldrSharedData.Arguments ; ds:di -> Arguments

        mov     ax,ds
        mov     NtldrSharedData.Arguments.ReadClusters.msw, ax
        mov     NtldrSharedData.Arguments.ReadClusters.lsw, offset ClusterRead

        mov     NtldrSharedData.Arguments.ReadSectors.msw, ax
        mov     NtldrSharedData.Arguments.ReadSectors.lsw, offset DoRead
        mov     dl, DriveNumber     ; dl = boot drive

        pop     bp                  ; partition info
;
; FAR JMP to 2000:0003.  This is hand-coded, because I can't figure out
; how to make MASM do this for me.  By entering NTLDR here, we skip the
; initial jump and execute the FAT-specific code to load the rest of
; NTLDR.
;
        db      0EAh                ; JMP FAR PTR
        dw      3                   ; 2000:3
        dw      02000h
FATBOOT endp

;
; BootErr - print error message and hang the system.
;
BootErr proc
BootErr endp

; BootError - print error message and hang the system.
;
BootError proc
    assume  DS:BootCode,ES:nothing
;
; Am I display message that is reason of the ERROR ?
; Ofcourse. but no room available.

BootErr$bnf:
BootErr$he:
        mov     al, 06h
        out     37h, al

        jmp     $

BootError endp

;
; ClusterRead - read AL sectors into ES:BX starting from
;       cluster DX
;
ClusterRead proc
        push    ax                  ; (TOS) = # of sectors to read
        dec     dx
        dec     dx                  ; adjust for reserved clusters 0 and 1
        mov     al, SectorsPerCluster
        xor     ah, ah
        mul     dx                  ; DX:AX = starting sector number
        add     ax, NtldrSharedData.ClusterBase   ; adjust for FATs, root dir, boot sec.
        adc     dx, 0
        mov     NtldrSharedData.Arguments.SectorBase.lsw, ax
        mov     NtldrSharedData.Arguments.SectorBase.msw, dx
        pop     ax                  ; (al) = # of sectors to read

;
; Now we've converted the cluster number to a SectorBase, so just fall
; through into DoRead
;

ClusterRead endp


;
; DoRead - read AL sectors into ES:BX starting from sector
;          SectorBase.
;
DoRead  proc
        xor     ah, ah
        cmp     ax, 0
        jnz     @F

        inc     ah                  ; read 256 Sectors
@@:
        push    si
        push    di
        push    bp

        mov     si, ax
        mov     bp, bx
        mov     cx, NtldrSharedData.Arguments.SectorBase.lsw  ; Starting sector
        mov     dx, NtldrSharedData.Arguments.SectorBase.msw  ; Starting sector

;    (dx:cx) = logical sector # relative to partition
;    (si)    = # of sectors to read
;    (es:bp) = read buffer

Rpt03:
        push    dx
        push    cx

;   [sp]   = logical sector number LSW
;   [sp+2] = logical sector number MSW

        mov     al, DriveNumber

        test    al, DAFloppy
        jz      Flg03

;   We are reading floppy disk.
;   We don't care about DMA boundary, as no PC-9801 DOS floppy disk
;   has more than 2048 directory entries, we never read
;   more than 64 KB.

        push    ax
        mov     ax, cx              ; (dx:ax) = lsn
        mov     bx, SectorsPerTrack
        div     bx                  ; (dx) = sector # (0-based)
                                    ; (ax) = cylinder # * # of heads + head #
        div     byte ptr Heads      ;(ah) = head address
                                    ; (al) = cylinder address
        mov     dh, ah
        mov     cl, al
        mov     al, byte ptr BytesPerSector + 1     ; convert Bytes/Sector to
        xor     ch, ch                              ;            SectorLengthID
whl00:                                              ; Bytes/Sect |  ID (ch)
        cmp     al, 0
        jz      @f

        inc     ch                  ;      128   ->   0
        shr     al, 1               ;      256   ->   1
        jmp     short   whl00       ;      512   ->   2
@@:                                 ;     1024   ->   3
        pop     ax

        sub     bl, dl              ; sectors in THIS track
        inc     dl                  ; sector # (1-based)

;   We have prepared following ROM BIOS parameters
;   (al) = drive
;   (cl) = cylinder address
;   (ch) = sector size
;   (dl) = sector address
;   (dh) = head address
;   (es:bp) -> buffer
;
;   And we have some more.
;   (bl) = # of sectors we can read with 1 time ROM call
;   (si) = # of sectors we need to read
;
        jmp     short   Flg04

Flg03:
;   We are reading hard disk.
;   We don't care about DMA boundary
;   as length we read is 64KB max.
;

        and     al, 7FH                 ; drive #
        mov     bx,NtldrSharedData.SectorShiftFactor

Rpt04:                                  ; logical sector address to
        shr     bx, 1
        jc      @F

        shl     cx, 1                   ; physical sector address
        rcl     dx, 1
        jmp     short   Rpt04
@@:
        add     cx, HiddenSectors.lsw
        adc     dx, HiddenSectors.msw   ; (dx:cx) -> relative to drive
        mov     bl, NtldrSharedData.LogicalSectorsIn32KByte
                                        ; sectors we can read (32KB)
                                        ; this is not optimum on performance

;   We have prepared following ROM BIOS parameters
;   (al) = drive
;   (dx:cx) = relative sector number
;   (es:bp) -> buffer
;
;   And we have some more.
;   (bl) = # of sectors we can read with 1 time ROM call
;   (si) = # of sectors we need to read
;
Flg04:

        xor     bh, bh

        cmp     si, bx
        jnb     @F

        mov     bx, si
@@:
        push    bx              ; # of sectors we are reading this call
        push    dx
        xchg    ax, bx
        mul     BytesPerSector
        xchg    ax, bx
        pop     dx
        push    bx              ; # of bytes.

;   [sp]   = # of bytes to read
;   [sp+2] = # of sectors
;   [sp+4] = logical sector number LSW
;   [sp+6] = logical sector number MSW

        mov     ah, 01010110b   ; read
        int     1BH

        pop     di              ; # of bytes
        pop     bx              ; # of sectors
        pop     cx              ; lsn (LSW)
        pop     dx              ; lsn (MSW)

        jc      @F              ; return Carry

;   prepare for next call

        add     cx, bx          ; advance lsn
        adc     dx, 0           ;
        add     bp, di          ; advance offset
        sub     si, bx          ; decrement # of sectors
        jnz     Rpt03           ; CarryFlag is Clear
@@:

        pop     bp
        pop     di
        pop     si
        retf
DoRead  endp

LOADERNAME      DB      "NTLDR      "

;       .errnz  ($-FATBOOT) GT 510,<FATAL PROBLEM: boot sector is too large>

        org     510
        db      55h, 0aah

BootCode        ends

;Unitialized variables go here--beyond the end of the boot sector in free memory
UninitializedWork       struc
ClusterBase                 dw    ?                     ; first sector of cluster # 2
SectorShiftFactor           dw    ?
LogicalSectorsIn32KByte     db    ?
Arguments                   db    (size SHARED) dup (?) ; structure passed to NTLDR
UninitializedWork       ends

        END     FATBOOT
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\nlspatch\patchbc.c ===
/*++

Copyright (c) 1996 Microsoft Corporation

Module Name:

    Patchbc.c

Abstract:

    Implementation for a module that knows how to patch translated
    messages into arrays that constitute Windows NT file system boot code.

Author:

    Ted Miller (tedm) 6 May 1997

Revision History:

--*/


/*

    Various modules in the Windows NT need to lay the mbr or file system
    boot records, such as format, setup, etc. Boot code for fat, fat32,
    ntfs, and the mbr is each built into a corresponding header file
    in sdk\inc. Each header file has an array of bytes that constitute
    the boot code itself. The code has no text in it, but instead has some
    placeholders for text that needs to be patched in at run-time by
    users of those header files. This allows localization of the
    boot messages without recompiles.

    As built, each boot code array has a table in a known place that
    indicates where in the array the messages are supposed to start.
    The boot code expects to look there to find the offset of any
    message it needs.

    For the file system boot code, the message offset table is located
    immediately before the 2-byte 55aa sig (for fat) or the 4-byte 000055aa
    sig (for fat32 and ntfs).

    Fat/Fat32 share 3 messages, whose offsets are expected to be in the
    following order in the offset table:

        NTLDR is missing
        Disk error
        Press any key to restart

    NTFS has 4 messages, whose offsets are expected to be in the following
    order in the offset table:

        A disk read error occurred
        NTLDR is missing
        NTLDR is compressed
        Press Ctrl+Alt+Del to restart

    For the master boot code, the message offset table is immediately before
    the NTFT signature and has 3 messages (thus it starts at offset 0x1b5).
    The offsets are expected to be in the following order:

        Invalid partition table
        Error loading operating system
        Missing operating system

    Finally note that to allow one-byte values to be stored in the message
    offset tables we store the offset - 256.

*/

#include <nt.h>
#include <patchbc.h>
#include <string.h>

BOOLEAN
DoPatchMessagesIntoBootCode(
    IN OUT PUCHAR   BootCode,
    IN     unsigned TableOffset,
    IN     BOOLEAN  WantCrLfs,
    IN     BOOLEAN  WantTerminating255,
    IN     unsigned MessageCount,
    ...
    )
{
    va_list arglist;
    unsigned Offset;
    unsigned i;
    LPCSTR text;

    va_start(arglist,MessageCount);

    Offset = (unsigned)BootCode[TableOffset] + 256;

    for(i=0; i<MessageCount; i++) {

        text = va_arg(arglist,LPCSTR);

        BootCode[TableOffset+i] = (UCHAR)(Offset - 256);

        if(WantCrLfs) {
            BootCode[Offset++] = 13;
            BootCode[Offset++] = 10;
        }

        strcpy(BootCode+Offset,text);
        Offset += strlen(text);

        if(i == (MessageCount-1)) {
            //
            // Last message gets special treatment.
            //
            if(WantCrLfs) {
                BootCode[Offset++] = 13;
                BootCode[Offset++] = 10;
            }
            BootCode[Offset++] = 0;
        } else {
            //
            // Not last message.
            //
            if(WantTerminating255) {
                BootCode[Offset++] = 255;
            } else {
                BootCode[Offset++] = 0;
            }
        }
    }

    va_end(arglist);

    return(Offset <= TableOffset);
}


BOOLEAN
PatchMessagesIntoFatBootCode(
    IN OUT PUCHAR  BootCode,
    IN     BOOLEAN IsFat32,
    IN     LPCSTR  MsgNtldrMissing,
    IN     LPCSTR  MsgDiskError,
    IN     LPCSTR  MsgPressKey
    )
{
    BOOLEAN b;

    b = DoPatchMessagesIntoBootCode(
            BootCode,
            IsFat32 ? 505 : 507,
            TRUE,
            TRUE,
            3,
            MsgNtldrMissing,
            MsgDiskError,
            MsgPressKey
            );

    return(b);
}


BOOLEAN
PatchMessagesIntoNtfsBootCode(
    IN OUT PUCHAR  BootCode,
    IN     LPCSTR  MsgNtldrMissing,
    IN     LPCSTR  MsgNtldrCompressed,
    IN     LPCSTR  MsgDiskError,
    IN     LPCSTR  MsgPressKey
    )
{
    BOOLEAN b;

    b = DoPatchMessagesIntoBootCode(
            BootCode,
            504,
            TRUE,
            FALSE,
            4,
            MsgDiskError,
            MsgNtldrMissing,
            MsgNtldrCompressed,
            MsgPressKey
            );

    return(b);
}


BOOLEAN
PatchMessagesIntoMasterBootCode(
    IN OUT PUCHAR  BootCode,
    IN     LPCSTR  MsgInvalidTable,
    IN     LPCSTR  MsgIoError,
    IN     LPCSTR  MsgMissingOs
    )
{
    BOOLEAN b;

    b = DoPatchMessagesIntoBootCode(
            BootCode,
            0x1b5,
            FALSE,
            FALSE,
            3,
            MsgInvalidTable,
            MsgIoError,
            MsgMissingOs
            );

    return(b);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\i386\ntfs.inc ===
;
;   Copyright (c) 1991  Microsoft Corporation
;
;   Module Name:
;
;       ntfs.inc
;
;   Abstract:
;
;       This module contains declarations for the NTFS on-disk
;       structures needed by the boot code.
;
;   Author:
;
;       Bill McJohn (billmc) 12-May-1992
;
MASTER_FILE_TABLE_NUMBER         EQU 0d
MASTER_FILE_TABLE2_NUMBER        EQU 1d
LOG_FILE_NUMBER                  EQU 2d
VOLUME_DASD_NUMBER               EQU 3d
ATTRIBUTE_DEF_TABLE_NUMBER       EQU 4d
ROOT_FILE_NAME_INDEX_NUMBER      EQU 5d
BIT_MAP_FILE_NUMBER              EQU 6d
BOOT_FILE_NUMBER                 EQU 7d
BAD_CLUSTER_FILE_NUMBER          EQU 8d
QUOTA_TABLE_NUMBER               EQU 9d
UPCASE_TABLE_NUMBER              EQU 10d

$STANDARD_INFORMATION            EQU 010h
$ATTRIBUTE_LIST                  EQU 020h
$FILE_NAME                       EQU 030h
$VOLUME_VERSION                  EQU 040h
$SECURITY_DESCRIPTOR             EQU 050h
$VOLUME_NAME                     EQU 060h
$VOLUME_INFORMATION              EQU 070h
$DATA                            EQU 080h
$INDEX_ROOT                      EQU 090h
$INDEX_ALLOCATION                EQU 0A0h
$BITMAP                          EQU 0B0h
$SYMBOLIC_LINK                   EQU 0C0h
$EA_INFORMATION                  EQU 0D0h
$EA_DATA                         EQU 0E0h
$FIRST_USER_DEFINED_ATTRIBUTE    EQU 0100h
$END                             EQU 0FFFFFFFFh

SEQUENCE_NUMBER_STRIDE           EQU 512d


LARGE_INTEGER struc
    LowPart     dd ?;
    HighPart    dd ?;
LARGE_INTEGER ends;

MFT_SEGMENT_REFERENCE struc
    REF_LowPart     dd ?;
    REF_HighPart    dw ?;
    REF_SeqNo       dw ?;
MFT_SEGMENT_REFERENCE ends;

MULTI_SECTOR_HEADER struc
    MSH_Signature       dd ?;
    MSH_UpdateArrayOfs  dw ?;
    MSH_UpdateArraySize dw ?;
MULTI_SECTOR_HEADER ends;

FILE_RECORD_SEGMENT struc
    FRS_Header          db (size MULTI_SECTOR_HEADER) dup (?);
    FRS_Lsn             db (size LARGE_INTEGER) dup (?);
    FRS_SequenceNumber  dw ?;
    FRS_ReferenceCount  dw ?;
    FRS_FirstAttribute  dw ?;
    FRS_Flags           dw ?;
    FRS_FirstFreeByte   dd ?;
    FRS_BytesAvailable  dd ?;
    FRS_BaseFRS         db (size MFT_SEGMENT_REFERENCE) dup (?);
    FRS_NextInstance    dw ?;
FILE_RECORD_SEGMENT ends;

FILE_RECORD_SEGMENT_IN_USE       EQU 0001h
FILE_FILE_NAME_INDEX_PRESENT     EQU 0002h

ATTRIBUTE_RECORD struc
    ATTR_TypeCode       dd ?;
    ATTR_RecordLength   dd ?;
    ATTR_FormCode       db ?;
    ATTR_NameLength     db ?;
    ATTR_NameOffset     dw ?;
    ATTR_Flags          dw ?;
    ATTR_Instance       dw ?;
    ATTR_FormUnion      db ?;
ATTRIBUTE_RECORD ends

RESIDENT_ATTRIBUTE_FORM struc
    RES_ValueLength     dd ?;
    RES_ValueOffset     dw ?;
    RES_ResidentFlags   db ?;
    RES_Reserved        db ?;
RESIDENT_ATTRIBUTE_FORM ends

NONRESIDENT_ATTRIBUTE_FORM struc
    NONRES_LowestVcn            db (size LARGE_INTEGER) dup (?);
    NONRES_HighestVcn           db (size LARGE_INTEGER) dup (?);
    NONRES_MappingPairOffset    dw ?;
    NONRES_Reserved             dw 3 dup (?);
    NONRES_AllocatedLength      db (size LARGE_INTEGER) dup (?);
    NONRES_FileSize             db (size LARGE_INTEGER) dup (?);
    NONRES_ValidDataLength      db (size LARGE_INTEGER) dup (?);
NONRESIDENT_ATTRIBUTE_FORM ends

;   Attribute Form Codes

RESIDENT_FORM       EQU 0
NONRESIDENT_FORM    EQU 1

;   Attribute Record Flag Values

ATTRIBUTE_FLAG_COMPRESSION_MASK  EQU 00FFh


;   Attribute list entry structure:
;
ATTRIBUTE_LIST_ENTRY struc
    ATTRLIST_TypeCode           dd  ?;
    ATTRLIST_Length             dw  ?;
    ATTRLIST_NameLength         db  ?;
    ATTRLIST_NameOffset         db  ?;
    ATTRLIST_LowestVcn          db (size LARGE_INTEGER) dup (?);
    ATTRLIST_SegmentReference   db (size MFT_SEGMENT_REFERENCE) dup (?);
    ATTRLIST_Instance           dw  ?;
    ATTRLIST_Name               dw  ?;
ATTRIBUTE_LIST_ENTRY ends


FAT_DIRENT_ATTR_READ_ONLY        EQU 01h
FAT_DIRENT_ATTR_HIDDEN           EQU 02h
FAT_DIRENT_ATTR_SYSTEM           EQU 04h
FAT_DIRENT_ATTR_VOLUME_ID        EQU 08h
FAT_DIRENT_ATTR_ARCHIVE          EQU 20h
FAT_DIRENT_ATTR_DEVICE           EQU 40h

DUPLICATED_INFORMATION struc
    DUPINFO_CreationTime            db (size LARGE_INTEGER) dup (?);
    DUPINFO_LastModificationTime    db (size LARGE_INTEGER) dup (?);
    DUPINFO_LastChangeTime          db (size LARGE_INTEGER) dup (?);
    DUPINFO_LastAccessTime          db (size LARGE_INTEGER) dup (?);
    DUPINFO_AllocatedLength         db (size LARGE_INTEGER) dup (?);
    DUPINFO_FileSize                db (size LARGE_INTEGER) dup (?);
    DUPINFO_FileAttributes          dd ?;
    DUPINFO_PackedEaSize            dw ?;
DUPLICATED_INFORMATION ends


FILE_NAME struc
    FN_ParentDirectory              db (size MFT_SEGMENT_REFERENCE) dup (?);
    FN_Info                         db (size DUPLICATED_INFORMATION) dup (?);
    FN_Pad                          dw ?;
    FN_FileNameLength               db ?;   Length in chars
    FN_Flags                        db ?;
    FN_FileName                     dw ?;   First char of name.
FILE_NAME ends

FILE_NAME_NTFS  EQU     1
FILE_NAME_DOS   EQU     2
FILE_NAME_LINK  EQU     4


INDEX_HEADER struc

    IH_FirstIndexEntry      dd ?;
    IH_FirstFreeByte        dd ?;
    IH_BytesAvailable       dd ?;
    IH_Flags                db ?;   INDEX_xxx flags
    IH_Reserved             db 3 dup (?);
INDEX_HEADER ends

; INDEX_xxx flags

INDEX_NODE  EQU 1


INDEX_ROOT struc

    IR_IndexedAttributeType dd ?;
    IR_CollationRule        dd ?;
    IR_BytesPerBuffer       dd ?;
    IR_ClustersPerBuffer    db ?;
    IR_Reserved             db 3 dup (?);
    IR_IndexHeader	    db (size INDEX_HEADER) dup (?);
INDEX_ROOT ends;

INDEX_ALLOCATION_BUFFER struc

    IB_Header               db (size MULTI_SECTOR_HEADER) dup (?);
    IB_Lsn                  db (size LARGE_INTEGER) dup (?);
    IB_ThisVcn              db (size LARGE_INTEGER) dup (?);
    IB_IndexHeader          db (size INDEX_HEADER) dup (?);
INDEX_ALLOCATION_BUFFER ends;


INDEX_ENTRY struc

    IE_FileReference    db (size MFT_SEGMENT_REFERENCE) dup (?);
    IE_Length           dw ?;
    IE_AttributeLength  dw ?;
    IE_Flags            dw ?;
    IE_Reserved         dw ?;
    IE_Value            db ?;
INDEX_ENTRY ends;


;   INDEX_ENTRY_xxx flags
;
INDEX_ENTRY_NODE    EQU 1
INDEX_ENTRY_END     EQU 2
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\i386\ntfsboot.asm ===
page    ,132
        title   ntfsboot - NTFS boot loader
        name    ntfsboot

; The ROM in the IBM PC starts the boot process by performing a hardware
; initialization and a verification of all external devices.  If all goes
; well, it will then load from the boot drive the sector from track 0, head 0,
; sector 1.  This sector is placed at physical address 07C00h.
;
; The boot code's sole resposiblity is to find NTLDR, load it at
; address 2000:0000, and then jump to it.
;
; The boot code understands the structure of the NTFS root directory,
; and is capable of reading files.  There is no contiguity restriction.
;
; DEBUG EQU 1
MASM    equ     1
        .xlist
        .286

A_DEFINED EQU 1

    include ntfs.inc

DoubleWord      struc
lsw     dw      ?
msw     dw      ?
DoubleWord      ends

;
; The following are various segments used by the boot loader. The first
; two are the segments where the boot sector is initially loaded and where
; the boot sector is relocated to.  The third is the static location
; where the NTLDR is loaded.
;

BootSeg segment at 07c0h        ; this is where the MBR loads us initially.
BootSeg ends

NewSeg  segment at 0d00h        ; this is where we'll relocate to.
NewSeg  ends                    ; enough for 16 boot sectors +
                                ;       4-sector scratch
                                ; below where we'll load NTLDR.

LdrSeg segment at 2000h         ; we want to load the loader at 2000:0000
LdrSeg ends

;/********************** START OF SPECIFICATIONS ************************/
;/*                                                                     */
;/* SUBROUTINE NAME: ntfsboot                                           */
;/*                                                                     */
;/* DESCRIPTIVE NAME: Bootstrap loader                                  */
;/*                                                                     */
;/* FUNCTION:    To load NTLDR into memory.                             */
;/*                                                                     */
;/* NOTES:       ntfsboot is loaded by the ROM BIOS (Int 19H) at        */
;/*              physical memory location 0000:7C00H.                   */
;/*              ntfsboot runs in real mode.                            */
;/*              This boot record is for NTFS volumes only.             */
;/*                                                                     */
;/* ENTRY POINT: ntfsboot                                               */
;/* LINKAGE:     Jump (far) from Int 19H                                */
;/*                                                                     */
;/* INPUT:       CS:IP = 0000:7C00H                                     */
;/*              SS:SP = 0030:00FAH (CBIOS dependent)                   */
;/*                                                                     */
;/* EXIT-NORMAL: DL = INT 13 drive number we booted from                */
;/*              Jmp to main in NTLDR                                   */
;/*                                                                     */
;/* EXIT-ERROR:  None                                                   */
;/*                                                                     */
;/* EFFECTS:     NTLDR is loaded into the physical memory               */
;/*                location 00020000H                                   */
;/*                                                                     */
;/*********************** END OF SPECIFICATIONS *************************/
BootCode segment        ;would like to use BootSeg here, but LINK flips its lid
        assume  cs:BootCode,ds:nothing,es:nothing,ss:nothing

        org     0               ; start at beginning of segment, not 0100h.

        public  _ntfsboot
_ntfsboot label near
        jmp     start
    .errnz  ($-_ntfsboot) GT (3)        ;<FATAL PROBLEM: JMP is more than three bytes>

    org 3

Version                 db      "NTFS    "      ; Signature, must be "NTFS    "
BPB                     label   byte
BytesPerSector          dw      512             ; Size of a physical sector
SectorsPerCluster       db      1               ; Sectors per allocation unit

;
; Traditionally the next 7 bytes were the reserved sector count, fat count,
; root dir entry count, and the small volume sector count. However all of
; these fields must be 0 on NTFS volumes.
;
; We use this space to store some temporary variables used by the boot code,
; which avoids the need for separate space in sector 0 to store them.
; We also take advantage of the free 0-initialization to save some space
; by avoiding the code to initialize them.
;
; Note that ideally we'd want to use an unused field for the SectorCount
; and initialize it to 16. This would let us save a few bytes by avoiding
; code to explicitly initialize this value before we read the 16 boot sectors.
; However setup and other code tends to preserve the entire bpb area when
; it updates boot code, so we avoid a dependency here and initialize
; the value explicitly to 16 in the first part of the boot code.
;
SectorCount             dw      0               ; number of sectors to read
SectorBase              dd      0               ; start sector for read request
HaveXInt13              db      0               ; extended int13 available flag

Media                   db      0f8h            ; Media byte
FatSectors              dw      0               ; (always 0 on NTFS)
SectorsPerTrack         dw      0               ; Sectors per track
Heads                   dw      0               ; Number of surfaces
HiddenSectors           dd      0               ; partition start LBA

;
; The field below is traditionally the large sector count and is
; always 0 on NTFS. We use it here for a value the boot code calculates,
; namely the number of sectors visible on the drive via conventional int13.
;
Int13Sectors            dd      0

DriveNumber             db      80h             ; int13 unit number

                        db      3 dup (?)       ; alignment filler

;
; The following is the rest of the NTFS Sector Zero information.
; The offsets of most of these fields cannot be changed without changing
; all code that validates, formats, recognizes, etc, NTFS volumes.
; In other words, don't change it.
;
SectorsOnVolume         db (size LARGE_INTEGER) dup (?)
MftStartLcn             db (size LARGE_INTEGER) dup (?)
Mft2StartLcn            db (size LARGE_INTEGER) dup (?)
ClustersPerFrs          dd ?
DefClustersPerBuf       dd ?
SerialNumber            db (size LARGE_INTEGER) dup (?)
CheckSum                dd ?

;
; Make sure size of fields matches what fs_rec.sys thinks is should be
;
        .errnz          ($-_ntfsboot) NE (54h)

;****************************************************************************
start:
;
;       First of all, set up the segments we need (stack and data).
;
        cli
        xor     ax,ax                   ; Set up the stack to just before
        mov     ss,ax                   ; this code.  It'll be moved after
        mov     sp,7c00h                ; we relocate.
        sti

        mov     ax,Bootseg              ; Address BPB with DS.
        mov     ds,ax
        assume  ds:BootCode

        call    Int13SecCnt             ; determine range of regular int13

;
; Read bootcode and jump to code in sector 1.
; Assumes HaveXInt13 and SectorBase are initialized to 0,
; which they are since they are stored in areas of the BPB
; that must be 0 on NTFS volumes.
;
        mov     ax,NewSeg
        mov     es,ax
        xor     bx,bx                   ; es:bx = transfer address

        mov     byte ptr SectorCount,16 ; word field is 0 on-disk so byte init is OK
        call    ReadSectors

        push    NewSeg
        push    offset mainboot
        retf

;
; Determine the number of sectors addressable via
; conventional int13. If we can't get drive params for some reason
; then something is very wrong -- we'll try to force the caller
; to use conventional int13 by maxing out the sector count.
;
; Input: ds addresses start of first sector
;
; Output: in eax; also stored in Int13Sectors variable.
;
; Preserves: assume none.
;
Int13SecCnt proc near
        mov     dl,DriveNumber          ; int13 unit number
        mov     ah,8                    ; get drive params
        int     13h                     ; call BIOS
        jnc     @f                      ; no error, procede
        mov     cx,-1                   ; strange case, fake registers to force
        mov     dh,cl                   ; use of standard int13 (set all vals to max)
@@:
.386
        movzx   eax,dh                  ; eax = max head # (0-255)
        inc     ax                      ; eax = heads (1-256)
        movzx   edx,cl                  ; edx = sectors per track + cyl bits
        and     dl,3fh                  ; edx = sectors per track (1-63)
        mul     dx                      ; eax = sectors per cylinder, edx = 0
        xchg    cl,ch
        shr     ch,6                    ; cx = max cylinder # (0-1023)
        inc     cx                      ; cx = cylinders (1-1024)
        movzx   ecx,cx                  ; ecx = cylinders (1-1024)
        mul     ecx                     ; eax = sectors visible via int13, edx = 0
        mov     Int13Sectors,eax        ; save # sectors addressable via int13
.286
        ret
Int13SecCnt endp

;
; Determine whether extended int13 services are available on the boot drive.
;
; Stores result (boolean) in HaveXInt13 variable.
;
; Preserves: assume none.
;
HaveInt13Ext proc near
        mov     ah,41h
        mov     bx,055aah
        mov     dl,DriveNumber
        int     13h
        jc      @f                      ; error from int13 means no xint13
        cmp     bx,0aa55h               ; absence of sig means no xint13
        jne     @f
        test    cl,1                    ; bit 0 off means no xint13
        jz      @f
        inc     byte ptr HaveXInt13     ; xint13 is available
@@:     ret
HaveInt13Ext endp


;
; Read SectorCount sectors starting at logical sector SectorBase,
; into es:bx, using extended int13 if necessary.
;
; Preserves all
;
ReadSectors proc near
.386
        pushad                          ; save registers
        push    ds
        push    es

read_loop:
        mov     eax,SectorBase          ; logical starting sector
        add     eax,HiddenSectors       ; eax = physical starting sector
        cmp     eax,Int13Sectors        ; determine if standard int13 is ok
        jb      stdint13

        push    ds                      ; preserve ds

        db      66h                     ; hand-coded 32-bit push of 8-bit immediate
        push    0                       ; high 32 bits of sector #
        push    eax                     ; low 32 bits of sector #
        push    es
        push    bx                      ; transfer address
        push    dword ptr 10010h        ; transfer 1 sector, packet size = 16

        cmp     byte ptr HaveXInt13,0
        jne     @f                      ; already know we have xint13 available
        call    HaveInt13Ext            ; see if we have it
        cmp     byte ptr HaveXInt13,0

        je      BootErr$he              ; need it but don't have it

@@:     mov     ah,42h                  ; extended read
        mov     dl,DriveNumber          ; dl = int13 unit #
        push    ss
        pop     ds
        mov     si,sp                   ; ds:si -> param packet

        int     13h

        pop     eax                     ; throw away first 4 bytes of param packet
        pop     bx                      ; restore es:bx from param packet
        pop     es
        pop     eax                     ; throw away last 8 bytes of param packet
        pop     eax                     ; without clobbering carry flag

        pop     ds                      ; restore ds

        jmp     short did_read

stdint13:
        xor     edx,edx                 ; edx:eax = absolute sector number
        movzx   ecx,SectorsPerTrack     ; ecx = sectors per track
        div     ecx                     ; eax = track, edx = sector within track (0-62)
        inc     dl                      ; dl = sector within track (1-63)
        mov     cl,dl                   ; cl = sector within track
        mov     edx,eax
        shr     edx,16                  ; dx:ax = track
        div     Heads                   ; ax = cylinder (0-1023), dx = head (0-255)
        xchg    dl,dh                   ; dh = head
        mov     dl,DriveNumber          ; dl = int13 unit #
        mov     ch,al                   ; ch = bits 0-7 of cylinder
        shl     ah,6
        or      cl,ah                   ; bits 6-7 of cl = bits 8-9 of cylinder
        mov     ax,201h                 ; read 1 sector
        int     13h
did_read:
        jc      BootErr$he

read_next:
        mov     ax,es                   ; advance transfer address
        add     ax,20h                  ; by moving segment register along
        mov     es,ax                   ; thus no 64K limit on transfer length

        inc     SectorBase              ; advance sector number
        dec     SectorCount             ; see if done
        jnz     read_loop               ; not done

        pop     es
        pop     ds
        popad                           ; restore registers
.286
        ret
ReadSectors endp

BootErr$he:

        mov     al,byte ptr TXT_MSG_SYSINIT_BOOT_ERROR
BootErr2:

        call    BootErr$print
        mov     al,byte ptr TXT_MSG_SYSINIT_REBOOT
        call    BootErr$print
        sti
        jmp     $                       ; Wait forever

BootErr$print:
;
; al is offset - 256 of message. Adjust to form real offset
; and stick in si so lodsb below will work.
;
        mov     ah,1
        mov     si,ax

BootErr$print1:
        lodsb                           ; Get next character
        cmp     al,0
        je      BootErr$Done
        mov     ah,14                   ; Write teletype
        mov     bx,7                    ; Attribute
        int     10h                     ; Print it
        jmp     BootErr$print1
BootErr$Done:
        ret

;****************************************************************************

;
; Message table.
;
; We put English messages here as a placeholder only, so that in case
; anyone uses bootntfs.h without patching new messages in, things will
; still be correct (in English, but at least functional).
;
MSG_SYSINIT_BOOT_ERROR:

        DB      13,10,'A disk read error occurred',0

MSG_SYSINIT_FILE_NOT_FD:

        DB      13,10,'NTLDR is missing',0

MSG_SYSINIT_NTLDR_CMPRS:

        DB      13,10,'NTLDR is compressed',0

MSG_SYSINIT_REBOOT:

        DB      13,10,'Press Ctrl+Alt+Del to restart',13,10,0

;
; Now build a table with the low byte of the offset to each message.
; Code that patches the boot sector messages updates this table.
;
        .errnz ($-_ntfsboot) GT (512-8)
        ORG     512 - 8
TXT_MSG_SYSINIT_BOOT_ERROR:
        db OFFSET (MSG_SYSINIT_BOOT_ERROR - _ntfsboot) - 256
TXT_MSG_SYSINIT_FILE_NOT_FD:
        db OFFSET (MSG_SYSINIT_FILE_NOT_FD - _ntfsboot) - 256
TXT_MSG_SYSINIT_NTLDR_CMPRS:
        db OFFSET (MSG_SYSINIT_NTLDR_CMPRS - _ntfsboot) - 256
TXT_MSG_SYSINIT_REBOOT:
        db OFFSET (MSG_SYSINIT_REBOOT - _ntfsboot) - 256

        .errnz ($-_ntfsboot) NE (512-4)
        db      0,0,55h,0aah

;   Name we look for.  ntldr_length is the number of characters,
;   ntldr_name is the name itself.  Note that it is not NULL
;   terminated, and doesn't need to be.
;
ntldr_name_length   dw  5

ntldr_name          dw  'N', 'T', 'L', 'D', 'R'

;   Predefined name for index-related attributes associated with an
;   index over $FILE_NAME
;
index_name_length   dw 4
index_name          dw '$', 'I', '3', '0'

;   Global variables.  These offsets are all relative to NewSeg.
;
AttrList            dd 0e000h   ; Offset of buffer to hold attribute list
MftFrs              dd  3000h   ; Offset of general scratch buffer for FRS
SegmentsInMft       dd   ?      ; number of FRS's with MFT Data attribute records
RootIndexFrs        dd   ?      ; Offset of Root Index FRS
AllocationIndexFrs  dd   ?      ; Offset of Allocation Index FRS        ; KPeery
BitmapIndexFrs      dd   ?      ; Offset of Bitmap Index FRS            ; KPeery
IndexRoot           dd   ?      ; Offset of Root Index $INDEX_ROOT attribute
IndexAllocation     dd   ?      ; Offset of Root Index $INDEX_ALLOCATION attribute
IndexBitmap         dd   ?      ; Offset of Root Index $BITMAP attribute
NtldrFrs            dd   ?      ; Offset of NTLDR FRS
NtldrData           dd   ?      ; Offset of NTLDR $DATA attribute
IndexBlockBuffer    dd   ?      ; Offset of current index buffer
IndexBitmapBuffer   dd   ?      ; Offset of index bitmap buffer
NextBuffer          dd   ?      ; Offset of next free byte in buffer space

BytesPerCluster     dd   ?      ; Bytes per cluster
BytesPerFrs         dd   ?      ; Bytes per File Record Segment

;
; For floppyless booting, winnt32.exe creates c:\$win_nt$.~bt\bootsec.dat and
; places an entry in boot.ini for it (the boot selection says something
; like "Windows NT Setup or Upgrade"). When that is selected, the boot loader
; loads 16 sectors worth of data from bootsect.dat into d000 (which is where
; the first sector of this code would have loaded it) and jumps into it at
; a known location of 256h. That was correct in earlier versions of NT
; but is not correct now because the 4 fields below were added to this sector.
;
; Note that 0000 is "add [bx+si],al" which because of the way the boot loader
; is written happens to be a benign add of 0 to something in segment 7c0,
; which doesn't seem to hose anything but is still somewhat random.
;
; We code in a jump here so as this new code proliferates we get this
; cleaned up.
;
        .errnz  $-_ntfsboot ne 256h
SectorsPerFrs label dword       ; Sectors per File Record Segment
                    jmp short mainboot
                    nop
                    nop
        .errnz  $-_ntfsboot ne 25ah

MftLcnFrs               dd  ?   ; Offset scratch FRS buffer for LookupMftLcn
BytesPerIndexBlock      dd  ?   ; Bytes per index alloc block in root index
ClustersPerIndexBlock   dd  ?   ; Clusters per index alloc block in root index
SectorsPerIndexBlock    dd  ?   ; Sectors per index block in root index

.386

SAVE_ALL    macro

    push    es
    push    ds
    pushad

endm

RESTORE_ALL macro

    popad
    nop
    pop     ds
    pop     es

endm


;****************************************************************************
;
; mainboot - entry point after 16 boot sectors have been read in
;
;
mainboot proc   far

;       Get the new ds and the new stack.  Note that ss is zero.
;
        mov     ax, cs                  ; Set DS to CS
        mov     ds, ax

        shl     ax, 4                   ; convert to an offset.
        cli
        mov     sp, ax                  ; load new stack, just before boot code.
        sti

;
; Reinitialize xint13-related variables
;
        call    Int13SecCnt             ; determine range of regular int13

;       Set up the FRS buffers.  The MFT buffer is in a fixed
;       location, and the other three come right after it.  The
;       buffer for index allocation blocks comes after that.
;

;       Compute the useful constants associated with the volume
;
        movzx   eax, BytesPerSector     ; eax = Bytes per Sector
        movzx   ebx, SectorsPerCluster  ; ebx = Sectors Per Cluster
        mul     ebx                     ; eax = Bytes per Cluster
        mov     BytesPerCluster, eax

        mov     ecx, ClustersPerFrs     ; ecx = clusters per frs
        cmp     cl, 0                   ; is ClustersPerFrs less than zero?
        jg      mainboot$1

;       If the ClustersPerFrs field is negative, we calculate the number
;       of bytes per FRS by negating the value and using that as a shif count.
;

        neg     cl
        mov     eax, 1
        shl     eax, cl                 ; eax = bytes per frs
        jmp     mainboot$2

mainboot$1:

;       Otherwise if ClustersPerFrs was positive, we multiply by bytes
;       per cluster.

        mov     eax, BytesPerCluster
        mul     ecx                     ; eax = bytes per frs

mainboot$2:

        mov     BytesPerFrs, eax
        movzx   ebx, BytesPerSector
        xor     edx, edx                ; zero high part of dividend
        div     ebx                     ; eax = sectors per frs
        mov     SectorsPerFrs, eax


;       Set up the MFT FRS's---this will read all the $DATA attribute
;       records for the MFT.
;

        call    SetupMft

;       Set up the remaining FRS buffers.  The RootIndex FRS comes
;       directly after the last MFT FRS, followed by the NTLdr FRS
;       and the Index Block buffer.
;
        mov     ecx, NextBuffer
        mov     RootIndexFrs, ecx

        add     ecx, BytesPerFrs            ; AllocationFrs may be different
        mov     AllocationIndexFrs, ecx     ; from RootIndexFrs - KPeery

        add     ecx, BytesPerFrs            ; BitmapFrs may be different
        mov     BitmapIndexFrs, ecx         ; from RootIndexFrs - KPeery

        add     ecx, BytesPerFrs
        mov     NtldrFrs, ecx

        add     ecx, BytesPerFrs
        mov     IndexBlockBuffer, ecx

;
;       Read the root index, allocation index and bitmap FRS's and locate
;       the interesting attributes.
;

        mov     eax, $INDEX_ROOT
        mov     ecx, RootIndexFrs
        call    LoadIndexFrs

        or      eax, eax

        jz      BootErr$he

        mov     IndexRoot, eax          ; offset in Frs buffer

        mov     eax, $INDEX_ALLOCATION  ; Attribute type code
        mov     ecx, AllocationIndexFrs ; FRS to search
        call    LoadIndexFrs

        mov     IndexAllocation, eax

        mov     eax, $BITMAP            ; Attribute type code
        mov     ecx, BitmapIndexFrs     ; FRS to search
        call    LoadIndexFrs

        mov     IndexBitmap, eax

;       Consistency check: the index root must exist, and it
;       must be resident.
;
        mov     eax, IndexRoot
        or      eax, eax

        jz      BootErr$he

        cmp     [eax].ATTR_FormCode, RESIDENT_FORM

        jne     BootErr$he


;       Determine the size of the index allocation buffer based
;       on information in the $INDEX_ROOT attribute.  The index
;       bitmap buffer comes immediately after the index block buffer.
;
;       eax -> $INDEX_ROOT attribute record
;
        lea     edx, [eax].ATTR_FormUnion   ; edx -> resident info
        add     ax, [edx].RES_ValueOffset   ; eax -> value of $INDEX_ROOT

        movzx   ecx, [eax].IR_ClustersPerBuffer
        mov     ClustersPerIndexBlock, ecx

        mov     ecx, [eax].IR_BytesPerBuffer
        mov     BytesPerIndexBlock, ecx

        mov     eax, BytesPerIndexBlock
        movzx   ecx, BytesPerSector
        xor     edx, edx
        div     ecx                     ; eax = sectors per index block
        mov     SectorsPerIndexBlock, eax

        mov     eax, IndexBlockBuffer
        add     eax, BytesPerIndexBlock
        mov     IndexBitmapBuffer, eax

;       Next consistency check: if the $INDEX_ALLOCATION attribute
;       exists, the $INDEX_BITMAP attribute must also exist.
;
        cmp     IndexAllocation, 0
        je      mainboot30

        cmp     IndexBitmap, 0          ; since IndexAllocation exists, the

        je      BootErr$he              ;  bitmap must exist, too.

;       Since the bitmap exists, we need to read it into the bitmap
;       buffer.  If it's resident, we can just copy the data.
;

        mov     ebx, IndexBitmap        ; ebx -> index bitmap attribute
        push    ds
        pop     es
        mov     edi, IndexBitmapBuffer  ; es:edi -> index bitmap buffer
        mov     eax, BitmapIndexFrs     ; FRS containing attribute

        call    ReadWholeAttribute

mainboot30:
;
;       OK, we've got the index-related attributes.
;
        movzx   ecx, ntldr_name_length  ; ecx = name length in characters
        mov     eax, offset ntldr_name  ; eax -> name

        call    FindFile

        or      eax, eax
        jz      BootErr$fnf

;       Read the FRS for NTLDR and find its data attribute.
;
;       eax -> Index Entry for NTLDR.
;
        mov     eax, [eax].IE_FileReference.REF_LowPart

        push    ds
        pop     es              ; es:edi = target buffer
        mov     edi, NtldrFrs

        call    ReadFrs

;
;       See if the loader FRS has an attribute list.
;

        mov     eax, NtldrFrs   ; FRS buffer
        mov     ebx, $ATTRIBUTE_LIST  ; Type code
        mov     ecx, 0          ; Attribute name length
        mov     edx, 0          ; Attribute name

        call    LocateAttributeRecord

        test    eax, eax        ; Check for attribute list.
        jnz     mainboot$AttribList  ; If attribute list present, use it.

;
;       No attribute list was found.  Just search the base FRS.
;

        mov     eax, NtldrFrs   ; pointer to FRS
        mov     ebx, $DATA      ; requested attribute type
        mov     ecx, 0          ; attribute name length in characters
        mov     edx, 0          ; attribute name (NULL if none)

        call    LocateAttributeRecord

;       eax -> $DATA attribute for NTLDR
;
        or      eax, eax        ; if eax is zero, attribute not found.
        jnz     mainboot$FoundData
        jmp     BootErr$fnf     ; Data was not found.

mainboot$AttribList:
;
;       The ntldr $DATA segment is fragmented.  Search the attribute list
;       for the $DATA member.  And load it from there.
;
        xor     edx, edx               ; VCN zero
        mov     ecx, $DATA             ; Attribute type code
        mov     eax, NtldrFrs          ; FRS to search

        call    SearchAttrList         ; search attribute list for FRN
                                       ; of specified ($DATA)

        or      eax, eax               ; if eax is zero, attribute not found.
        jz      BootErr$fnf

;
;       We found the FRN of the $DATA attribute; load that into memory.
;
        push    ds
        pop     es                     ; es:edi = target buffer
        mov     edi, NtldrFrs

        call    ReadFrs

;
;       Determine the beginning offset of the $DATA in the FRS
;
        mov     eax, NtldrFrs   ; pointer to FRS
        mov     ebx, $DATA      ; requested attribute type
        mov     ecx, 0          ; attribute name length in characters
        mov     edx, 0          ; attribute name (NULL if none)

        call    LocateAttributeRecord

;       eax -> $DATA attribute for NTLDR
;
        or      eax, eax        ; if eax is zero, attribute not found.
        jz      BootErr$fnf

mainboot$FoundData:

;       Get the attribute record header flags, and make sure none of the
;       `compressed' bits are set

        movzx   ebx, [eax].ATTR_Flags
        and     ebx, ATTRIBUTE_FLAG_COMPRESSION_MASK
        jnz     BootErr$ntc

        mov     ebx, eax        ; ebx -> $DATA attribute for NTLDR

        push    LdrSeg
        pop     es              ; es = segment addres to read into
        sub     edi, edi        ; es:edi = buffer address
        mov     eax, NtldrFrs   ; FRS containing attribute

        call    ReadWholeAttribute

;
; We've loaded NTLDR--jump to it.
;
; Before we go to NTLDR, set up the registers the way it wants them:
;       DL = INT 13 drive number we booted from
;
        mov     dl, DriveNumber
        mov     ax,1000
        mov     es, ax                  ; we don't really need this
        lea     si, BPB
        sub     ax,ax
        push    LdrSeg
        push    ax
        retf                            ; "return" to NTLDR.

mainboot endp

.386
;****************************************************************************
;
;   ReadClusters - Reads a run of clusters from the disk.
;
;   ENTRY:  eax == LCN to read
;           edx == clusters to read
;           es:edi -> Target buffer
;
;   USES:   none (preserves all registers)
;
ReadClusters proc near

    SAVE_ALL

    mov     ebx, edx                ; ebx = clusters to read.
    movzx   ecx, SectorsPerCluster  ; ecx = cluster factor

    mul     ecx                 ; Convert LCN to sectors (wipes out edx!)
    mov     SectorBase, eax     ; Store starting sector in SectorBase

    mov     eax, ebx            ; eax = number of clusters
    mul     ecx                 ; Convert EAX to sectors (wipes out edx!)
    mov     SectorCount, ax     ; Store number of sectors in SectorCount

;
;   Note that ReadClusters gets its target buffer in es:edi but calls
;   the ReadSectors worker function that takes a target in es:bx--we need
;   to normalize es:edi so that we don't overflow bx.
;
    mov     bx, di
    and     bx, 0Fh
    mov     ax, es
    shr     edi, 4
    add     ax, di              ; ax:bx -> target buffer

    push    ax
    pop     es                  ; es:bx -> target buffer

    call    ReadSectors

    RESTORE_ALL
    ret

ReadClusters endp

;
;****************************************************************************
;
;   LocateAttributeRecord   --  Find an attribute record in an FRS.
;
;   ENTRY:  EAX -- pointer to FRS
;           EBX -- desired attribute type code
;           ECX -- length of attribute name in characters
;           EDX -- pointer to attribute name
;
;   EXIT:   EAX points at attribute record (0 indicates not found)
;
;   USES:   All
;
LocateAttributeRecord proc near

; get the first attribute record.
;
        add     ax, word ptr[eax].FRS_FirstAttribute

;       eax -> next attribute record to investigate.
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;
lar10:
        cmp     [eax].ATTR_TypeCode, 0ffffffffh
        je      lar99

        cmp     dword ptr[eax].ATTR_TypeCode, ebx
        jne     lar80

;       this record is a potential match.  Compare the names:
;
;       eax -> candidate record
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;
        or      ecx, ecx    ; Did the caller pass in a name length?
        jnz     lar20

;       We want an attribute with no name--the current record is
;       a match if and only if it has no name.
;
        cmp     [eax].ATTR_NameLength, 0
        jne     lar80       ; Not a match.

;       It's a match, and eax is set up correctly, so return.
;
        ret

;       We want a named attribute.
;
;       eax -> candidate record
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;
lar20:
        cmp     cl, [eax].ATTR_NameLength
        jne     lar80       ; Not a match.

;       Convert name in current record to uppercase.
;
        mov     esi, eax
        add     si, word ptr[eax].ATTR_NameOffset

        call    UpcaseName

;       eax -> candidate record
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;       esi -> Name in current record (upcased)
;
        push    ecx         ; save cx

        push    ds          ; Copy data segment into es
        pop     es
        mov     edi, edx    ; note that esi is already set up.

        repe cmpsw          ; zero flag is set if equal

        pop     ecx         ; restore cx

        jnz     lar80       ; not a match

;       eax points at a matching record.
;
        ret

;
;   This record doesn't match; go on to the next.
;
;       eax -> rejected candidate attribute record
;       ebx == desired type
;       ecx == Name length
;       edx -> desired name
;
lar80:  cmp     [eax].ATTR_RecordLength, 0  ; if the record length is zero
        je      lar99                       ; the FRS is corrupt.

        add     eax, [eax].ATTR_RecordLength; Go to next record
        jmp     lar10                       ; and try again

;       Didn't find it.
;
lar99:  sub     eax, eax
        ret

LocateAttributeRecord endp

;****************************************************************************
;
;   LocateIndexEntry   --  Find an index entry in a file name index
;
;   ENTRY:  EAX -> pointer to index header
;           EBX -> file name to find
;           ECX == length of file name in characters
;
;   EXIT:   EAX points at index entry.  NULL to indicate failure.
;
;   USES:   All
;
LocateIndexEntry proc near

;       Convert the input name to upper-case
;

        mov     esi, ebx
        call    UpcaseName

ifdef DEBUG
        call    PrintName
        call    Debug2
endif ; DEBUG

        add     eax, [eax].IH_FirstIndexEntry

;       EAX -> current entry
;       EBX -> file name to find
;       ECX == length of file name in characters
;
lie10:  test    [eax].IE_Flags, INDEX_ENTRY_END ; Is it the end entry?
        jnz     lie99

        lea     edx, [eax].IE_Value         ; edx -> FILE_NAME attribute value

ifdef DEBUG
;       DEBUG CODE -- list file names as they are examined

        SAVE_ALL

        call    Debug3
        movzx   ecx, [edx].FN_FileNameLength    ; ecx = chars in name
        lea     esi, [edx].FN_FileName          ; esi -> name
        call    PrintName

        RESTORE_ALL
endif ; DEBUG

;       EAX -> current entry
;       EBX -> file name to find
;       ECX == length of file name in characters
;       EDX -> FILE_NAME attribute

        cmp     cl, [edx].FN_FileNameLength ; Is name the right length?
        jne     lie80

        lea     esi, [edx].FN_FileName      ; Get name from FILE_NAME structure

        call    UpcaseName

        push    ecx         ; save ecx

        push    ds
        pop     es          ; copy data segment into es for cmpsw
        mov     edi, ebx    ; edi->search name (esi already set up)
        repe    cmpsw       ; zero flag is set if they're equal

        pop     ecx         ; restore ecx

        jnz     lie80

;       the current entry matches the search name, and eax points at it.
;
        ret

;       The current entry is not a match--get the next one.
;           EAX -> current entry
;           EBX -> file name to find
;           ECX == length of file name in characters
;
lie80:  cmp     [eax].IE_Length, 0      ; If the entry length is zero
        je      lie99                   ; then the index block is corrupt.

        add     ax, [eax].IE_Length     ; Get the next entry.

        jmp     lie10


;   Name not found in this block.  Set eax to zero and return
;
lie99:  xor     eax, eax
        ret

LocateIndexEntry endp

;****************************************************************************
;
;   ReadWholeAttribute - Read an entire attribute value
;
;   ENTRY:  ebx -> attribute
;           es:edi -> target buffer
;           eax -> FRS containing attribute (NULL means use highest VCN in this attribute record)
;
;   USES:   ALL
;
ReadWholeAttribute proc near

        cmp     [ebx].ATTR_FormCode, RESIDENT_FORM
        jne      rwa10

;       The attribute is resident.
;       ebx -> attribute
;       es:edi -> target buffer
;

        SAVE_ALL

        lea     edx, [ebx].ATTR_FormUnion   ; edx -> resident form info
        mov     ecx, [edx].RES_ValueLength  ; ecx = bytes in value
        mov     esi, ebx                    ; esi -> attribute
        add     si, [edx].RES_ValueOffset   ; esi -> attribute value

        rep     movsb                       ; copy bytes from value to buffer

        RESTORE_ALL

        ret                                 ; That's all!

rwa10:
;
;       The attribute type is non-resident.  Just call
;       ReadNonresidentAttribute starting at VCN 0 and
;       asking for the whole thing.
;
;       ebx -> attribute
;       es:edi -> target buffer
;
        push    eax                         ; Save FRS.

        lea     edx, [ebx].ATTR_FormUnion   ; edx -> nonresident form info

        test    eax, eax                    ; See if caller gave us an FRS.
        jnz     rwa20                       ; If FRS was provided, calculate the highest VCN.

        mov     ecx, [edx].NONRES_HighestVcn.LowPart; ecx = HighestVcn
        inc     ecx                         ; ecx = clusters in attribute

        jmp     rwa30

rwa20:
        mov     eax, [edx].NONRES_AllocatedLength.REF_LowPart  ; Size of attribute in bytes
        xor     edx, edx                    ; Zero high order of dividend.
        div     BytesPerCluster             ; Highest VCN
        mov     ecx, eax

rwa30:
        sub     eax, eax                    ; eax = 0 (first VCN to read)

        pop     esi                         ; Restore FRS.

        call    ReadNonresidentAttribute

        ret

ReadWholeAttribute endp

;****************************************************************************
;
;   ReadNonresidentAttribute - Read clusters from a nonresident attribute
;
;   ENTRY:  EAX == First VCN to read
;           EBX -> Attribute
;           ECX == Number of clusters to read
;           ESI == FRS contianing attribute (can be NULL if requested data is in passed in attribute)
;           ES:EDI == Target of read
;
;   EXIT:   None.
;
;   USES:   None (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadNonresidentAttribute proc near

        SAVE_ALL

        cmp     [ebx].ATTR_FormCode, NONRESIDENT_FORM
        je      ReadNR10

;       This attribute is not resident--the disk is corrupt.

        jmp     BootErr$he

ReadNR10:
;       eax == Next VCN to read
;       ebx -> Attribute
;       ecx -> Remaining clusters to read
;       es:edi -> Target of read
;

        cmp     ecx, 0
        jne     ReadNR20

;       Nothing left to read--return success.
;
        RESTORE_ALL
        ret

ReadNR20:
        push    ebx ; pointer to attribute
        push    eax ; Current VCN

        push    ecx
        push    esi
        push    edi
        push    es

        call    ComputeLcn  ; eax = LCN to read, ecx = run length
        mov     edx, ecx    ; edx = remaining run length

        pop     es
        pop     edi
        pop     esi
        pop     ecx

        test    eax, eax    ; See if it found the LCN.
        jz      ReadNR40    ; If not found, get the next piece of the attribute.

;       eax == LCN to read
;       ecx == remaining clusters to read
;       edx == remaining clusters in current run
;       es:edi == Target of read
;       TOS == Current VCN
;       TOS + 4 == pointer to attribute
;
        cmp     ecx, edx
        jge     ReadNR30

;       Run length is greater than remaining request; only read
;       remaining request.
;
        mov     edx, ecx    ; edx = Remaining request

ReadNR30:
;       eax == LCN to read
;       ecx == remaining clusters to read
;       edx == clusters to read in current run
;       es:edi == Target of read
;       TOS == Current VCN
;       TOS +  == pointer to attribute
;

        call    ReadClusters

        sub     ecx, edx            ; Decrement clusters remaining in request
        mov     ebx, edx            ; ebx = clusters read

        mov     eax, edx            ; eax = clusters read
        movzx   edx, SectorsPerCluster
        mul     edx                 ; eax = sectors read (wipes out edx!)
        movzx   edx, BytesPerSector
        mul     edx                 ; eax = bytes read (wipes out edx!)

        add     edi, eax            ; Update target of read

        pop     eax                 ; eax = previous VCN
        add     eax, ebx            ; update VCN to read

        pop     ebx                 ; ebx -> attribute
        jmp     ReadNR10


ReadNR40:

;
;       Get the next chunk of the attribute from the attribute list.  If
;       there are no more chunks, something is wrong.
;

        test    esi, esi            ; Make sure we have an FRS buffer.
        jz      BootErr$he          ; If not, something is wrong.

        push    ecx                 ; Save remaining clusters.
        push    edi                 ; Save read buffer.
        push    es                  ; Save read buffer segment.

;
;       As soon as we read in a new FRS, the attribute we currently have is
;       useless.  So, save off the information we need to the stack.
;       First save off the name, if there is one.
;
        movzx   eax, [ebx].ATTR_NameLength  ; Get the name length

        test    eax, eax            ; See if there is a name.
        jz      ReadNR50            ; If no name, store NULL for the name length and buffer.

        shl     eax, 1              ; Double the length, since it's unicode.
        sub     esp, eax            ; Reserve space for the name.
        mov     edi, esp            ; Setup the destination buffer.
        push    esp                 ; Store the name buffer.

        push    esi                 ; Save the FRS buffer.

        movzx   esi, [ebx].ATTR_NameOffset  ; Setup the source buffer.
        add     esi, ebx            ; It is at an offset within the attribute.

        mov     ecx, eax            ; Setup the length.
        rep     movsb               ; Do the copy.

        pop     esi                 ; Restore the FRS buffer.

        jmp     ReadNR60
        

ReadNR50:

        push    eax                 ; Name buffer (NULL, since the length is zero.)

ReadNR60:

;
;       The name buffer is done.  Now save the name length, type code, and highest VCN.
;

        push    eax                 ; Name length

        mov     eax, [ebx].ATTR_TypeCode
        push    eax

        mov     eax, [ebx].ATTR_FormUnion.NONRES_HighestVcn.LowPart
        push    eax

;
;       At this point our stack looks like this:
;
;       TOS      = Highest VCN of attribute
;       TOS +  4 = Type code of attribute
;       TOS +  8 = Length of attriubte name (in bytes)
;       TOS +  c = Pointer to attribute name buffer
;       TOS + 10 = Name buffer (if needed)
;       TOS +  ? = Buffer segment
;       TOS +  ? = Buffer address
;       TOS +  ? = Remaining clusters
;       TOS +  ? = Current VCB
;       TOS +  ? = Current attribute
;       

;
;       See if this is the base FRS.  If not, get the base FRS.
;

        mov     edx, [esi].FRS_BaseFRS.REF_LowPart  ; Get the base FRS number.
        test    edx, edx            ; See if this is the base FRS.
        jz      ReadNR70

;
;       Read in the base FRS.
;

        mov     edi, esi            ; FRS buffer
        push    ds
        pop     es
        mov     eax, edx            ; FRS number

        call    ReadFrs             ; Read in the base FRS.

ReadNR70:

;
;       The base FRS is in our buffer.  Find the next chunk of the attribute.
;

        mov     eax, esi            ; Frs Buffer
        pop     edx                 ; Highest VCN of current attribute
        pop     ecx                 ; Type code

        inc     edx                 ; VCN we will look for

        push    ecx                 ; Save type code.
        push    esi                 ; Save FRS buffer.

        call SearchAttrList

        test    eax, eax            ; If we didn't get back an FRS number, something is wrong.
        jz      BootErr$he

        pop     esi                 ; Restore FRS buffer.
        pop     ecx                 ; Restore type code.

                                    ; EAX contains FRS number
        mov     edi, esi            ; FRS buffer
        push    ds
        pop     es

        call    ReadFrs             ; Read in the FRS.

;
;       The FRS containing the next chunk is in memory.  Find the next chunk and
;       continue processing.
;

        mov     eax, esi            ; FRS buffer
        mov     ebx, ecx            ; Type code
        pop     ecx                 ; Attribute name length (in bytes)
        pop     edx                 ; Attribute name

        push    ecx                 ; Save attribute name length (in bytes).
        push    esi                 ; Save FRS buffer.

        shr     ecx, 1              ; Convert name length back to characters.

        call    LocateAttributeRecord

        test    eax, eax            ; Make sure we found the attribute.
        jz      BootErr$he          ; If not, something is wrong.

        pop     esi                 ; Restore FRS buffer.
        pop     ecx                 ; Restore attribute name length (in bytes).
        add     esp, ecx            ; Give back storage for name buffer.        
        pop     es                  ; Restore read buffer segment.
        pop     edi                 ; Restore read buffer.
        pop     ecx                 ; Restore remaining clusters.

;
;       Switch the attribute chunk being looked at and continue.
;

        mov     edx, eax            ; Hold new attribute temporarily.

        pop     eax                 ; Restore current VCN.
        pop     ebx                 ; Restore old attribute.

        mov     ebx, edx            ; Switch to new attribute.

        jmp     ReadNR20            ; Coninue.
        
ReadNonresidentAttribute endp

;****************************************************************************
;
;   MultiSectorFixup - fixup a structure read off the disk
;                      to reflect Update Sequence Array.
;
;   ENTRY:  ES:EDI = Target buffer
;
;   USES:   none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
;   Note: ES:EDI must point at a structure which is protected
;         by an update sequence array, and which begins with
;         a multi-sector-header structure.
;
MultiSectorFixup proc near

    SAVE_ALL

    movzx   ebx, es:[edi].MSH_UpdateArrayOfs    ; ebx = update array offset
    movzx   ecx, es:[edi].MSH_UpdateArraySize   ; ecx = update array size

    or      ecx, ecx        ; if the size of the update sequence array

    jz      BootErr$he      ; is zero, this structure is corrupt.

    add     ebx, edi        ; es:ebx -> update sequence array count word
    add     ebx, 2          ; es:ebx -> 1st entry of update array

    add     edi, SEQUENCE_NUMBER_STRIDE - 2 ; es:edi->last word of first chunk
    dec     ecx             ; decrement to reflect count word

MSF10:

;   ecx = number of entries remaining in update sequence array
;   es:ebx -> next entry in update sequence array
;   es:edi -> next target word for update sequence array

    or      ecx, ecx
    jz      MSF30

    mov     ax, word ptr es:[ebx]   ; copy next update sequence array entry
    mov     word ptr es:[edi], ax   ; to next target word

    add     ebx, 2                      ; go on to next entry
    add     edi, SEQUENCE_NUMBER_STRIDE ; go on to next target

    dec     ecx


    jmp     MSF10

MSF30:

    RESTORE_ALL

    ret

MultiSectorFixup endp

;****************************************************************************
;
;   SetupMft - Reads MFT File Record Segments into the LBN array
;
;   ENTRY:  none.
;
;   EXIT:   NextBuffer is set to the free byte after the last MFT FRS
;           SegmentsInMft is initialized
;
;
SetupMft proc near

        SAVE_ALL

;       Initialize SegmentsInMft and NextBuffer as if the MFT
;       had only one FRS.
;
        mov     eax, 1
        mov     SegmentsInMft, eax

        mov     eax, MftFrs                     ; this is the scratch mft buffer
        add     eax, BytesPerFrs
        mov     MftLcnFrs,eax                   ; this is the scratch mft buffer for lookup
        add     eax, BytesPerFrs
        mov     NextBuffer, eax


;       Read FRS 0 into the first MFT FRS buffer, being sure
;       to resolve the Update Sequence Array.  Remember the physical
;       location in the Lbn array.
;

        mov     eax, MftStartLcn.LowPart
        movzx   ebx, SectorsPerCluster
        mul     ebx                             ; eax = mft starting sector

        mov     ebx, NextBuffer                 ; Store this location in the Lbn array
        mov     [bx], eax
        mov     SectorBase, eax                 ; SectorBase = mft starting sector for read
        add     bx, 4
        mov     eax, SectorsPerFrs
        mov     [bx], eax                       ; Store the sector count in the Lcn array
        mov     SectorCount, ax                 ; SectorCount = SectorsPerFrs
        add     bx, 4
        mov     NextBuffer, ebx                 ; Remember the next Lbn array location

        mov     ebx, MftFrs                     ; Read the sectors into the MftFrs scratch buffer

        push    ds
        pop     es

        call    ReadSectors
        mov     edi, ebx                        ; es:edi = buffer

        call    MultiSectorFixup

;       Determine whether the MFT has an Attribute List attribute

        mov     eax, MftFrs
        mov     ebx, $ATTRIBUTE_LIST
        mov     ecx, 0
        mov     edx, 0

        call    LocateAttributeRecord

        or      eax, eax        ; If there's no Attribute list,
        jz      SetupMft99      ;    we're done!

;       Read the attribute list.
;       eax -> attribute list attribute
;
        mov     ebx, eax        ; ebx -> attribute list attribute
        push    ds
        pop     es              ; copy ds into es
        mov     edi, AttrList   ; ds:edi->attribute list buffer
        xor     eax, eax        ; FRS Buffer is NULL since attribute lists can only be in one FRS.

        call    ReadWholeAttribute

        mov     ebx, AttrList   ; ebx -> first attribute list entry

;       Now, traverse the attribute list looking for the first
;       entry for the $DATA type.  We know it must have at least
;       one.
;
;       ebx -> first attribute list entry
;

SetupMft10:
        cmp     [bx].ATTRLIST_TypeCode, $DATA
        je      SetupMft30

        add     bx,[bx].ATTRLIST_Length
        jmp     SetupMft10


SetupMft20:
;       Scan forward through the attribute list entries for the
;       $DATA attribute, reading each referenced FRS.  Note that
;       there will be at least one non-$DATA entry after the entries
;       for the $DATA attribute, since there's a $BITMAP.
;
;       ebx -> Next attribute list entry
;       NextBuffer    -> Target for next mapping information
;       MftFrs        -> Target of next read
;       SegmentsInMft == number of MFT segments read so far
;

;       Find the physical sector and sector count for the runs for this
;       file record (max 2 runs).  The mapping for this must already
;       be in a file record already visited.  Find the Vcn and cluster
;       offset for this FRS.  Use LookupMftLcn to find the Lcn.

        push    ebx                 ; Save the current position in the attribute list

;       Convert from Frs to sectors, then to Vcn

        mov     eax, [bx].ATTRLIST_SegmentReference.REF_LowPart
        mul     SectorsPerFrs
        push    eax                 ; Remember the VBN
        xor     edx, edx
        movzx   ebx, SectorsPerCluster
        div     ebx                 ; eax = VCN
        push    edx                 ; save remainder, this is cluster offset

        call    ComputeMftLcn       ; eax = LCN

        or      eax, eax            ; LCN equal to zero?

        jz      BootErr$he          ; zero is not a possible LCN

        mov     ecx, SectorsPerFrs  ; ecx = Number of sectors remaining for this file record

;       Change the LCN back into an LBN and add the remainder back in to get
;       the sector we want to read.

        movzx   ebx, SectorsPerCluster
        mul     ebx                 ; eax = cluster first LBN
        pop     edx                 ; edx = sector remainder
        add     eax, edx            ; eax = desired LBN

;       Store this in the current Lcn array slot

        mov     ebx, NextBuffer
        mov     [bx], eax           ; Store the starting sector
        add     bx, 4
        movzx   eax, SectorsPerCluster
        sub     eax, edx

        cmp     eax, ecx            ; Check if we have too many sectors
        jbe     SetupMft60
        mov     eax, ecx            ; Limit ourselves to the sectors remaining
SetupMft60:
        mov     [bx], eax           ; Store the sector count

;       If we have a complete file record skip to process the attribute entry

SetupMft70:
        sub     ecx, eax            ; Subtract these sectors from remaining sectors
        pop     edx                 ; Get the previous starting VBN (restores stack also)

        jz      SetupMft50

;       This may be a split file record.  Go ahead and get the next piece.

        add     eax, edx            ; Add the sector count for the last run to the start Vbn for the run
                                    ; This is the next Vbn to read
        push    eax                 ; Save the Vbn

        xor     edx, edx            ; Convert to Vcn, there should be no remainder this time
        movzx   ebx, SectorsPerCluster
        div     ebx                 ; eax = VCN

        push    ecx                 ; Save the remaining sectors
        call    ComputeMftLcn       ; eax = LCN
        pop     ecx                 ; Restore the remaining sectors

        or      eax, eax            ; LCN equal to zero?
        jz      BootErr$he          ; zero is not a possible LCN

;       Change the LCN back into a LBN to get the starting sector we want to read.

        movzx   ebx, SectorsPerCluster
        mul     ebx                 ; eax = cluster first LBN

;       If this sector is the contiguous with the other half of the run
;       make it appear to be single longer run.

        mov     ebx, NextBuffer     ; Recover the last run
        mov     edx, [bx]
        add     bx, 4
        add     edx, [bx]           ; This is the next potential LBN

        cmp     edx, eax            ; Check if we are at the contiguous LBN
        jne     SetupMft80

;       Append this to the previous run.

        movzx   eax, SectorsPerCluster
        cmp     eax, ecx            ; Check if have more sectors than we need
        jbe     SetupMft90
        mov     eax, ecx
SetupMft90:

        add     [bx], eax
        jmp     SetupMft70          ; Loop to see if there more work to do

;       This is multiple runs.  Update the next entry.

SetupMft80:
        add     bx, 4
        mov     NextBuffer, ebx    ; advance our NextBuffer pointer

        mov     [bx], eax          ; fill in the next run start sector
        add     bx, 4

        movzx   eax, SectorsPerCluster
        cmp     eax, ecx            ; Check if have more sectors than we need
        jbe     SetupMft100
        mov     eax, ecx
SetupMft100:
        mov     [bx], eax          ; and count
        jmp     SetupMft70         ; Loop to see if there is more work to do

SetupMft50:

;       Advance the count of Frs segments and the NextBuffer pointer

        add     bx, 4
        inc     SegmentsInMft
        mov     NextBuffer, ebx

        pop     ebx

;       Go on to the next attribute list entry

SetupMft30:
        add     bx,[bx].ATTRLIST_Length
        cmp     [bx].ATTRLIST_TypeCode, $DATA
        je      SetupMft20

SetupMft99:

        RESTORE_ALL
        ret

SetupMft endp

;****************************************************************************
;
;   ComputeMftLcn   --  Computes the LCN for a cluster of the MFT
;
;
;   ENTRY:  EAX == VCN
;
;   EXIT:   EAX == LCN
;
;   USES:   ALL
;
ComputeMftLcn proc near

        mov     edx, eax                ; edx = VCN

        mov     ecx, SegmentsInMft      ; ecx = # of FRS's to search

        mov     esi,MftLcnFrs
        add     esi,BytesPerFrs         ; si -> FRS LBN list

MftLcn10:
;       ECX == number of remaining FRS's to search
;       EDX == VCN
;       EBX == Buffer to read into
;       ESI == LBN array
;       EDI == Number of sectors to read
;
        push    edx                     ; save VCN
        push    ecx                     ; save MFT segment count
        push    edx                     ; save VCN again

;       Read the sectors for the given FRS

        mov     ebx,MftLcnFrs
        mov     edi,SectorsPerFrs

;       Read these sectors

MftLcn40:
        mov     eax,[si]                ; Get the start sector and sector count
        mov     SectorBase,eax
        add     si,4
        mov     eax,[si]
        mov     SectorCount,ax
        add     si,4

        push    ds
        pop     es

        call    ReadSectors

;       Check if we have more data to read

        sub     edi, eax
        je      MftLcn30

;       Read the next run

        mul     BytesPerSector          ; move forward in the buffer, results in ax:dx
        add     bx,ax
        jmp     MftLcn40

MftLcn30:

;       Do the multi sector fixup

        mov     edi,MftLcnFrs
        push    ds
        pop     es

        call    MultiSectorFixup

        mov     eax, MftLcnFrs
        mov     ebx, $DATA
        mov     ecx, 0
        mov     edx, ecx

        call    LocateAttributeRecord

;       EAX -> $DATA attribute
;       TOS == VCN
;       TOS + 4 == number of remaining FRS's to search
;       TOS + 8 -> FRS being searched
;       TOS +12 == VCN

        or      eax, eax

        jz      BootErr$he  ; No $DATA attribute in this FRS!

        mov     ebx, eax    ; ebx -> attribute
        pop     eax         ; eax = VCN

;       EAX == VCN
;       EBX -> $DATA attribute
;       TOS number of remaining FRS's to search
;       TOS + 4 == FRS being searched
;       TOS + 8 == VCN

        push    esi
        call    ComputeLcn
        pop     esi

        or      eax, eax
        jz      MftLcn20

;       Found our LCN.  Clean up the stack and return.
;
;       EAX == LCN
;       TOS number of remaining FRS's to search
;       TOS + 4 == FRS being searched
;       TOS + 8 == VCN
;
        pop     ebx
        pop     ebx     ; clean up the stack

        ret

MftLcn20:
;
;       Didn't find the VCN in this FRS; try the next one.
;
;       TOS number of remaining FRS's to search
;       TOS + 4 -> FRS being searched
;       TOS + 8 == VCN
;
        pop     ecx     ; ecx = number of FRS's remaining, including current
        pop     edx     ; edx = VCN

        loop    MftLcn10            ; decrement cx and try next FRS

;       This VCN was not found.
;
        xor     eax, eax
        ret


ComputeMftLcn endp

;****************************************************************************
;
;   ReadMftSectors - Read sectors from the MFT
;
;   ENTRY:  EAX == starting VBN
;           ECX == number of sectors to read
;           ES:EDI == Target buffer
;
;   USES:   none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadMftSectors proc near

    SAVE_ALL

RMS$Again:

    push    eax                     ; save starting VBN
    push    ecx                     ; save sector count

;   Divide the VBN by SectorsPerCluster to get the VCN

    xor     edx, edx                ; zero high part of dividend
    movzx   ebx, SectorsPerCluster
    div     ebx                     ; eax = VCN
    push    edx                     ; save remainder
    push    edi                     ; save the target buffer

    call    ComputeMftLcn           ; eax = LCN
    pop     edi                     ; recover the buffer

    or      eax, eax                ; LCN equal to zero?

    jz      BootErr$he              ; zero is not a possible LCN

;   Change the LCN back into a LBN and add the remainder back in to get
;   the sector we want to read, which goes into SectorBase.
;

    movzx   ebx, SectorsPerCluster
    mul     ebx                     ; eax = cluster first LBN
    pop     edx                     ; edx = sector remainder
    add     eax, edx                ; eax = desired LBN

    mov     SectorBase, eax



;
;   Figure out how many sectors to read this time; we never attempt
;   to read more than one cluster at a time.
;

    pop     ecx                     ; ecx = sectors to read

    movzx   ebx, SectorsPerCluster
    cmp     ecx,ebx
    jle     RMS10

;
;   Read only a single cluster at a time, to avoid problems with fragmented
;   runs in the mft.
;

    mov     SectorCount, bx         ; this time read 1 cluster
    sub     ecx, ebx                ; ecx = sectors remaining to read

    pop     eax                     ; eax = VBN
    add     eax, ebx                ; VBN += sectors this read


    push    eax                     ; save next VBN
    push    ecx                     ; save remaining sector count

    jmp     RMS20

RMS10:

    pop     eax                     ; eax = VBN
    add     eax, ecx                ; VBN += sectors this read
    push    eax                     ; save next VBN

    mov     SectorCount, cx
    mov     ecx, 0
    push    ecx                     ; save remaining sector count (0)

RMS20:


;   The target buffer was passed in es:edi, but we want it in es:bx.
;   Do the conversion.
;

    push    es                      ; save buffer pointer
    push    edi

    mov     bx, di
    and     bx, 0Fh
    mov     ax, es
    shr     edi, 4
    add     ax, di                  ; ax:bx -> target buffer

    push    ax
    pop     es                      ; es:bx -> target buffer

    call    ReadSectors

    pop     edi                     ; restore buffer pointer
    pop     es

    add     edi, BytesPerCluster    ; increment buf ptr by one cluster

    pop     ecx                     ; restore remaining sector count
    pop     eax                     ; restore starting VBN

    cmp     ecx, 0                  ; are we done?
    jg      RMS$Again               ; repeat until desired == 0


    RESTORE_ALL
    ret

ReadMftSectors endp


;****************************************************************************
;
;   ReadFrs - Read an FRS
;
;   ENTRY:  EAX == FRS number
;           ES:EDI == Target buffer
;
;   USES:  none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadFrs proc near

    SAVE_ALL

    mul     SectorsPerFrs       ; eax = sector number in MFT DATA attribute
                                ; (note that mul wipes out edx!)

    mov     ecx, SectorsPerFrs  ; number of sectors to read

    call    ReadMftSectors
    call    MultiSectorFixup

    RESTORE_ALL
    ret

ReadFrs endp

;****************************************************************************
;
;   ReadIndexBlock - read an index block from the root index.
;
;   ENTRY:  EAX == Block number
;
;   USES:  none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadIndexBlock proc near

    SAVE_ALL

    mul     ClustersPerIndexBlock       ; First VCN to read
                                        ; (note that mul wipes out edx!)
    mov     ebx, IndexAllocation        ; ebx -> $INDEX_ALLOCATION attribute
    mov     ecx, ClustersPerIndexBlock  ; Clusters to read
    mov     esi, AllocationIndexFrs     ; FRS containing index allocation attribute

    push    ds
    pop     es
    mov     edi, IndexBlockBuffer       ; es:edi -> index block buffer

    call    ReadNonresidentAttribute

    call    MultiSectorFixup

    RESTORE_ALL
    ret

ReadIndexBlock endp

;****************************************************************************
;
;   IsBlockInUse - Checks the index bitmap to see if an index
;                  allocation block is in use.
;
;   ENTRY:  EAX == block number
;
;   EXIT:   Carry flag clear if block is in use
;           Carry flag set   if block is not in use.
;
IsBlockInUse proc near

        push    eax
        push    ebx
        push    ecx

        mov     ebx, IndexBitmapBuffer

        mov     ecx, eax    ; ecx = block number
        shr     eax, 3      ; eax = byte number
        and     ecx, 7      ; ecx = bit number in byte

        add     ebx, eax    ; ebx -> byte to test

        mov     eax, 1
        shl     eax, cl     ; eax = mask

        test    byte ptr[ebx], al

        jz      IBU10

        clc                 ; Block is not in use.
        jmp     IBU20

IBU10:  stc                 ; Block is in use.

IBU20:
        pop     ecx
        pop     ebx
        pop     eax         ; restore registers

        ret

IsBlockInUse endp

;****************************************************************************
;
;   ComputeLcn - Converts a VCN into an LCN
;
;   ENTRY:  EAX -> VCN
;           EBX -> Attribute
;
;   EXIT:   EAX -> LCN  (zero indicates not found)
;           ECX -> Remaining run length
;
;   USES:   ALL.
;
ComputeLcn proc near

        cmp     [ebx].ATTR_FormCode, NONRESIDENT_FORM
        je      clcn10

        sub     eax, eax    ; This is a resident attribute.
        ret

clcn10: lea     esi, [ebx].ATTR_FormUnion   ; esi -> nonresident info of attrib

;       eax -> VCN
;       ebx -> Attribute
;       esi -> Nonresident information of attribute record
;
;       See if the desired VCN is in range.

        mov     edx, [esi].NONRES_HighestVcn.LowPart ; edx = HighestVcn
        cmp     eax, edx
        ja      clcn15      ; VCN is greater than HighestVcn

        mov     edx, [esi].NONRES_LowestVcn.LowPart ; edx = LowestVcn
        cmp     eax, edx
        jae     clcn20

clcn15:
        sub     eax, eax    ; VCN is not in range
        ret

clcn20:
;       eax -> VCN
;       ebx -> Attribute
;       esi -> Nonresident information of attribute record
;       edx -> LowestVcn
;
        add     bx, [esi].NONRES_MappingPairOffset  ; ebx -> mapping pairs
        sub     esi, esi                            ; esi = 0

clcn30:
;       eax == VCN to find
;       ebx -> Current mapping pair count byte
;       edx == Current VCN
;       esi == Current LCN
;
        cmp     byte ptr[ebx], 0    ; if count byte is zero...
        je      clcn99              ;  ... we're done (and didn't find it)

;       Update CurrentLcn
;
        call    LcnFromMappingPair
        add     esi, ecx            ; esi = current lcn for this mapping pair

        call    VcnFromMappingPair

;       eax == VCN to find
;       ebx -> Current mapping pair count byte
;       ecx == DeltaVcn for current mapping pair
;       edx == Current VCN
;       esi == Current LCN
;
        add     ecx, edx            ; ecx = NextVcn

        cmp     eax, ecx            ; If target < NextVcn ...
        jl      clcn80              ;   ... we found the right mapping pair.

;       Go on to next mapping pair.
;
        mov     edx, ecx            ; CurrentVcn = NextVcn

        push    eax

        movzx   ecx, byte ptr[ebx]  ; ecx = count byte
        mov     eax, ecx            ; eax = count byte
        and     eax, 0fh            ; eax = number of vcn bytes
        shr     ecx, 4              ; ecx = number of lcn bytes

        add     ebx, ecx
        add     ebx, eax
        inc     ebx                 ; ebx -> next count byte

        pop     eax
        jmp     clcn30

clcn80:
;       We found the mapping pair we want.
;
;       eax == target VCN
;       ebx -> mapping pair count byte
;       edx == Starting VCN of run
;       ecx == Next VCN (ie. start of next run)
;       esi == starting LCN of run
;
        sub     ecx, eax            ; ecx = remaining run length
        sub     eax, edx            ; eax = offset into run
        add     eax, esi            ; eax = LCN to return

        ret

;       The target VCN is not in this attribute.

clcn99: sub     eax, eax    ; Not found.
        ret


ComputeLcn endp

;****************************************************************************
;
;   VcnFromMappingPair
;
;   ENTRY:  EBX -> Mapping Pair count byte
;
;   EXIT:   ECX == DeltaVcn from mapping pair
;
;   USES:   ECX
;
VcnFromMappingPair proc near

        sub     ecx, ecx            ; ecx = 0
        mov     cl, byte ptr[ebx]   ; ecx = count byte
        and     cl, 0fh             ; ecx = v

        cmp     ecx, 0              ; if ecx is zero, volume is corrupt.
        jne     VFMP5

        sub     ecx, ecx
        ret

VFMP5:
        push    ebx
        push    edx

        add     ebx, ecx            ; ebx -> last byte of compressed vcn

        movsx   edx, byte ptr[ebx]
        dec     ecx
        dec     ebx

;       ebx -> Next byte to add in
;       ecx == Number of bytes remaining
;       edx == Accumulated value
;
VFMP10: cmp     ecx, 0              ; When ecx == 0, we're done.
        je      VFMP20

        shl     edx, 8
        mov     dl, byte ptr[ebx]

        dec     ebx                 ; Back up through bytes to process.
        dec     ecx                 ; One less byte to process.

        jmp     VFMP10

VFMP20:
;       edx == Accumulated value to return

        mov     ecx, edx

        pop     edx
        pop     ebx

        ret

VcnFromMappingPair endp


;****************************************************************************
;
;   LcnFromMappingPair
;
;   ENTRY:  EBX -> Mapping Pair count byte
;
;   EXIT:   ECX == DeltaLcn from mapping pair
;
;   USES:   ECX
;
LcnFromMappingPair proc near

        push    ebx
        push    edx

        sub     edx, edx            ; edx = 0
        mov     dl, byte ptr[ebx]   ; edx = count byte
        and     edx, 0fh            ; edx = v

        sub     ecx, ecx            ; ecx = 0
        mov     cl, byte ptr[ebx]   ; ecx = count byte
        shr     cl, 4               ; ecx = l

        cmp     ecx, 0              ; if ecx is zero, volume is corrupt.
        jne     LFMP5

        sub     ecx, ecx

        pop     edx
        pop     ebx
        ret

LFMP5:
;       ebx -> count byte
;       ecx == l
;       edx == v
;

        add     ebx, edx            ; ebx -> last byte of compressed vcn
        add     ebx, ecx            ; ebx -> last byte of compressed lcn

        movsx   edx, byte ptr[ebx]
        dec     ecx
        dec     ebx

;       ebx -> Next byte to add in
;       ecx == Number of bytes remaining
;       edx == Accumulated value
;
LFMP10: cmp     ecx, 0              ; When ecx == 0, we're done.
        je      LFMP20

        shl     edx, 8
        mov     dl, byte ptr[ebx]

        dec     ebx                 ; Back up through bytes to process.
        dec     ecx                 ; One less byte to process.

        jmp     LFMP10

LFMP20:
;       edx == Accumulated value to return

        mov     ecx, edx

        pop     edx
        pop     ebx

        ret

LcnFromMappingPair endp

;****************************************************************************
;
; UpcaseName - Converts the name of the file to all upper-case
;
;       ENTRY:  ESI -> Name
;               ECX -> Length of name
;
;       USES:   none
;
UpcaseName proc   near


        or      ecx, ecx
        jnz     UN5

        ret

UN5:
        push    ecx
        push    esi

UN10:
        cmp     word ptr[esi], 'a'      ; if it's less than 'a'
        jl      UN20                    ; leave it alone

        cmp     word ptr[esi], 'z'      ; if it's greater than 'z'
        jg      UN20                    ; leave it alone.

        sub     word ptr[esi], 'a'-'A'  ; the letter is lower-case--convert it.
UN20:
        add     esi, 2                  ; move on to next unicode character
        loop    UN10

        pop     esi
        pop     ecx

        ret
UpcaseName endp

;****************************************************************************
;
;   FindFile - Locates the index entry for a file in the root index.
;
;   ENTRY:  EAX -> name to find
;           ECX == length of file name in characters
;
;   EXIT:   EAX -> Index Entry.  NULL to indicate failure.
;
;   USES:   ALL
;
FindFile proc near

        push    eax     ; name address
        push    ecx     ; name length

;       First, search the index root.
;
;       eax -> name to find
;       ecx == name length
;       TOS == name length
;       TOS+4 -> name to find
;
        mov     edx, eax                    ; edx -> name to find
        mov     eax, IndexRoot              ; eax -> &INDEX_ROOT attribute
        lea     ebx, [eax].ATTR_FormUnion   ; ebx -> resident info
        add     ax, [ebx].RES_ValueOffset   ; eax -> Index Root value

        lea     eax, [eax].IR_IndexHeader   ; eax -> Index Header

        mov     ebx, edx                    ; ebx -> name to find

        call    LocateIndexEntry

        or      eax, eax
        jz      FindFile20

;       Found it in the root!  The result is already in eax.
;       Clean up the stack and return.
;
        pop     ecx
        pop     ecx
        ret

FindFile20:
;
;       We didn't find the index entry we want in the root, so we have to
;       crawl through the index allocation buffers.
;
;       TOS == name length
;       TOS+4 -> name to find
;
        mov     eax, IndexAllocation
        or      eax, eax
        jnz     FindFile30

;       There is no index allocation attribute; clean up
;       the stack and return failure.
;
        pop     ecx
        pop     ecx
        xor     eax, eax
        ret

FindFile30:
;
;       Search the index allocation blocks for the name we want.
;       Instead of searching in tree order, we'll just start with
;       the first one and work our way forwards.
;
;       TOS == name length
;       TOS+4 -> name to find
;
        mov     edx, IndexAllocation        ; edx -> index allocation attr.
        lea     edx, [edx].ATTR_FormUnion   ; edx -> nonresident form info
        mov     eax, [edx].NONRES_AllocatedLength.LowPart; Size of attribute in bytes

        xor     edx, edx
        div     BytesPerIndexBlock          ; convert bytes to index blocks

        xor     esi, esi                    ; Start at block zero.
        push    eax                         ; number of blocks to process
        push    esi                         ; Current block

FindFile40:
;
;       TOS == Next block to search
;       TOS + 4 == Total blocks to search
;       TOS + 8 == name length
;       TOS + c -> name to find
;
        pop     eax         ; Block to process
        pop     esi         ; Total blocks

        cmp     eax, esi
        je      FindFile90

        push    esi         ; Save Total.

        inc     eax         ; Save the next block to the stack,
        push    eax         ; but keep using the current block.
        dec     eax

;       eax == block number to process
;       TOS == Next block to search
;       TOS + 4 == Total blocks to search
;       TOS + 8 == name length
;       TOS + c -> name to find
;
;       See if the block is in use; if not, go on to next.

        call    IsBlockInUse
        jc      FindFile40      ; c set if not in use

;       eax == block number to process
;       TOS == Next block to search
;       TOS + 4 == Total blocks to search
;       TOS + 8 == name length
;       TOS + c -> name to find
;

        call    ReadIndexBlock

        pop     edx         ; Current block
        pop     esi         ; Total blocks
        pop     ecx         ; ecx == name length
        pop     ebx         ; ebx -> name

        push    ebx
        push    ecx
        push    esi
        push    edx

;       ebx -> name to find
;       ecx == name length in characters
;       TOS == Next block to search
;       TOS + 4 == Total blocks to search
;       TOS + 8 == name length
;       TOS + c -> name to find
;
;       Index buffer to search is in index allocation block buffer.
;
        mov     eax, IndexBlockBuffer       ; eax -> Index allocation block
        lea     eax, [eax].IB_IndexHeader   ; eax -> Index Header

        call    LocateIndexEntry            ; eax -> found entry

        or      eax, eax
        jz      FindFile40

;       Found it!
;
;       eax -> Found entry
;       TOS == Next block to search
;       TOS + 4 == Total blocks to search
;       TOS + 8 == name length
;       TOS + c -> name to find
;
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx ; clean up stack
        ret

FindFile90:
;
;       Name not found.
;
;       TOS == name length
;       TOS + 4 -> name to find
;
        pop     ecx
        pop     ecx         ; clean up stack.
        xor     eax, eax    ; zero out eax.
        ret


FindFile endp

ifdef DEBUG
;****************************************************************************
;
;   DumpIndexBlock - dumps the index block buffer
;
DumpIndexBlock proc near

    SAVE_ALL

    mov     esi, IndexBlockBuffer

    mov     ecx, 20h    ; dwords to dump

DIB10:

    test    ecx, 3
    jnz     DIB20
    call    DebugNewLine

DIB20:

    lodsd
    call    PrintNumber
    loop    DIB10

    RESTORE_ALL
    ret

DumpIndexBlock endp

;****************************************************************************
;
;   DebugNewLine
;
DebugNewLine proc near

    SAVE_ALL

    xor     eax, eax
    xor     ebx, ebx

    mov     al, 0dh
    mov     ah, 14
    mov     bx, 7
    int     10h

    mov     al, 0ah
    mov     ah, 14
    mov     bx, 7
    int     10h

    RESTORE_ALL
    ret

DebugNewLine endp


;****************************************************************************
;
;   PrintName  -   Display a unicode name
;
;   ENTRY:  DS:ESI  -> null-terminated string
;           ECX     == characters in string
;
;   USES:   None.
;
PrintName proc near


    SAVE_ALL

    or      ecx, ecx
    jnz     PrintName10

    call    DebugNewLine

    RESTORE_ALL

    ret

PrintName10:

    xor     eax, eax
    xor     ebx, ebx

    lodsw

    mov     ah, 14  ; write teletype
    mov     bx, 7   ; attribute
    int     10h     ; print it
    loop    PrintName10

    call    DebugNewLine

    RESTORE_ALL
    ret

PrintName endp

;****************************************************************************
;
;   DebugPrint  -   Display a debug string.
;
;   ENTRY:  DS:SI  -> null-terminated string
;
;   USES:   None.
;
.286
DebugPrint proc near

    pusha

DbgPr20:

    lodsb
    cmp     al, 0
    je      DbgPr30

    mov     ah, 14  ; write teletype
    mov     bx, 7   ; attribute
    int     10h     ; print it
    jmp     DbgPr20

DbgPr30:

    popa
    nop
    ret

DebugPrint endp

;****************************************************************************
;
;
;   PrintNumber
;
;   ENTRY: EAX == number to print
;
;   PRESERVES ALL REGISTERS
;
.386
PrintNumber proc near


    SAVE_ALL

    mov     ecx, 8      ; number of digits in a DWORD

PrintNumber10:

    mov     edx, eax
    and     edx, 0fh    ; edx = lowest-order digit
    push    edx         ; put it on the stack
    shr     eax, 4      ; drop low-order digit
    loop    PrintNumber10

    mov     ecx, 8      ; number of digits on stack.

PrintNumber20:

    pop     eax         ; eax = next digit to print
    cmp     eax, 9
    jg      PrintNumber22

    add     eax, '0'
    jmp     PrintNumber25

PrintNumber22:

    sub     eax, 10
    add     eax, 'A'

PrintNumber25:

    xor     ebx, ebx

    mov     ah, 14
    mov     bx, 7
    int     10h
    loop    PrintNumber20

;   Print a space to separate numbers

    mov     al, ' '
    mov     ah, 14
    mov     bx, 7
    int     10h

    RESTORE_ALL

    call    Pause

    ret

PrintNumber endp


;****************************************************************************
;
;   Debug0 - Print debug string 0 -- used for checkpoints in mainboot
;
Debug0 proc near

    SAVE_ALL

    mov     si, offset DbgString0
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug0 endp

;****************************************************************************
;
;   Debug1 - Print debug string 1 --
;
Debug1 proc near

    SAVE_ALL

    mov     si, offset DbgString1
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug1 endp

;****************************************************************************
;
;   Debug2 - Print debug string 2
;
Debug2 proc near

    SAVE_ALL

    mov     si, offset DbgString2
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug2 endp

;****************************************************************************
;
;   Debug3 - Print debug string 3 --
;
Debug3 proc near

    SAVE_ALL

    mov     si, offset DbgString3
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug3 endp

;****************************************************************************
;
;   Debug4 - Print debug string 4
;
Debug4 proc near

    SAVE_ALL

    mov     si, offset DbgString4
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug4 endp

;****************************************************************************
;
;   Pause - Pause for about 1/2 a second.  Simply count until you overlap
;           to zero.
;
Pause proc near

    push eax
    mov  eax, 0fff10000h

PauseLoopy:
    inc  eax

    or   eax, eax
    jnz  PauseLoopy

    pop  eax
    ret

Pause endp

endif ; DEBUG

;*************************************************************************
;
;       LoadIndexFrs  -  For the requested index type code locate and
;                        load the associated Frs.
;
;       ENTRY: EAX - requested index type code
;              ECX - Points to empty Frs buffer
;
;       EXIT:  EAX - points to offset in Frs buffer of requested index type
;                    code or Zero if not found.
;       USES:  All
;
LoadIndexFrs    proc    near

        push    ecx                     ; save FRS buffer for later
        push    eax                     ; save index type code for later

        mov     eax, ROOT_FILE_NAME_INDEX_NUMBER
        push    ds
        pop     es
        mov     edi, ecx                ; es:edi = target buffer

        call    ReadFrs

;
;       See if an attribute list exists.
;

        mov     eax, ecx                ; Base FRS
        mov     ebx, $ATTRIBUTE_LIST    ; Attribute type code
        mov     ecx, 0                  ; Attribute name length
        mov     edx, 0                  ; Attribute name

        call    LocateAttributeRecord

        pop     ebx                     ; Restore type code.
        pop     ecx                     ; Restore FRS.

        test    eax, eax                ; If attribute list exists, search it.
        jnz     LoadIndexFrs$AttribList

        mov     eax, ecx                ; FRS to search
                                        ; EBX contains type code.
        movzx   ecx, index_name_length  ; Attribute name length
        mov     edx, offset index_name  ; Attribute name

        call    LocateAttributeRecord

        jmp     LoadIndexFrs$Exit       ; Return with results from search above.

LoadIndexFrs$AttribList:

;
;       Search in attribute list.
;

        xor     edx, edx               ; VCN zero
        mov     eax, ecx               ; FRS to search
        mov     ecx, ebx               ; type code
        push    eax                    ; save Frs
        push    ebx                    ; save type code

        call    SearchAttrList          ; search attribute list for FRN
                                        ; of specified ($INDEX_ROOT,
                                        ; $INDEX_ALLOCATION, or $BITMAP)

        ; EAX - holds FRN for Frs, or Zero

        pop     ebx                     ; Attribute type code (used later)
        pop     edi                     ; es:edi = target buffer

        or      eax, eax                ; if we cann't find it in attribute
        jz      LoadIndexFrs$Exit       ; list then we are hosed


;       We should now have the File Record Number where the index for the
;       specified type code we are searching for is,  load this into the
;       Frs target buffer.
;
;       EAX - holds FRN
;       EBX - holds type code
;       EDI - holds target buffer

        push    ds
        pop     es

        call    ReadFrs

;
;       Now determine the offset in the Frs of the index
;

;       EBX - holds type code

        mov     eax, edi                ; Frs to search
        movzx   ecx, index_name_length  ; Attribute name length
        mov     edx, offset index_name  ; Attribute name

        call    LocateAttributeRecord

;       EAX -  holds offset or Zero.


LoadIndexFrs$Exit:
        ret

LoadIndexFrs    endp


;****************************************************************************
;
;   SearchAttrList
;
;   Search the Frs for the attribute list.  Then search the attribute list
;   for the specifed type code.  When you find it return the FRN in the
;   attribute list entry found or Zero if no match found.
;
;   ENTRY: ECX - type code to search attrib list for
;          EAX - Frs buffer holding head of attribute list
;          EDX - Lowest VCN
;
;   EXIT:  EAX - FRN file record number to load, Zero if none.
;
;   USES: All
;
SearchAttrList proc  near

        push    edx                     ; Save VCN.
        push    ecx                     ; type code to search for in
                                        ; attrib list

                                        ; EAX - holds Frs to search
        mov     ebx, $ATTRIBUTE_LIST    ; Attribute type code
        mov     ecx, 0                  ; Attribute name length
        mov     edx, 0                  ; Attribute name

        call    LocateAttributeRecord

        or      eax, eax                      ; If there's no Attribute list,
        jz      SearchAttrList$NotFoundIndex1 ; We are done

;       Read the attribute list.
;       eax -> attribute list attribute

        mov     ebx, eax        ; ebx -> attribute list attribute
        push    ds
        pop     es              ; copy ds into es
        mov     edi, AttrList   ; ds:edi->attribute list buffer
        xor     eax, eax        ; FRS Buffer is NULL since attribute lists can only be in one FRS.

        call    ReadWholeAttribute

        push    ds
        pop     es
        mov     ebx, AttrList   ; es:ebx -> first attribute list entry

;       Now, traverse the attribute list looking for the entry for
;       the Index type code.
;
;       ebx -> first attribute list entry
;

        pop     ecx                            ; Get Index Type code
        pop     edx                            ; Restore VCN.


SearchAttrList$LookingForIndex:

ifdef DEBUG
        SAVE_ALL

        mov     eax, es:[bx].ATTRLIST_TypeCode
        call    PrintNumber
        movzx   eax, es:[bx].ATTRLIST_Length
        call    PrintNumber
        mov     eax, es
        call    PrintNumber
        mov     eax, ebx
        call    PrintNumber
        push    es
        pop     ds
        movzx   ecx, es:[bx].ATTRLIST_NameLength    ; ecx = chars in name
        lea     esi, es:[bx].ATTRLIST_Name          ; esi -> name
        call    PrintName

        RESTORE_ALL
endif ; DEBUG

        cmp     es:[bx].ATTRLIST_TypeCode, ecx
        jne     SearchAttrList$NotFoundIndex3     ; This is not the right attribute.

        cmp     es:[bx].ATTRLIST_LowestVcn.LowPart, edx

        je      SearchAttrList$FoundIndex         ; Found it.
        jmp     SearchAttrList$NotFoundIndex4     ; Wrong VCN.

SearchAttrList$NotFoundIndex3:

        cmp     es:[bx].ATTRLIST_TypeCode, $END   ; reached invalid attribute
        je      SearchAttrList$NotFoundIndex2     ; so must be at end

        cmp     es:[bx].ATTRLIST_Length, 0
        je      SearchAttrList$NotFoundIndex2     ; reached end of list and
                                                  ; nothing found

SearchAttrList$NotFoundIndex4:

        movzx   eax, es:[bx].ATTRLIST_Length
        add     bx, ax

        mov     ax, bx
        and     ax, 08000h                        ; test for roll over
        jz      SearchAttrList$LookingForIndex

        ;  If we rolled over then increment to the next es 32K segment and
        ;  zero off the high bits of bx

        mov     ax, es
        add     ax, 800h
        mov     es, ax

        and     bx, 07fffh

        jmp     SearchAttrList$LookingForIndex

SearchAttrList$FoundIndex:

        ;  found the index, return the FRN

        mov     eax, es:[bx].ATTRLIST_SegmentReference.REF_LowPart
        ret


SearchAttrList$NotFoundIndex1:
        pop     ecx
        pop     edx
SearchAttrList$NotFoundIndex2:
        xor     eax, eax
        ret

SearchAttrList endp

;
; Boot message printing, relocated from sector 0 to sace space
;
BootErr$fnf:
        mov     al,byte ptr TXT_MSG_SYSINIT_FILE_NOT_FD
        jmp     BootErr2
BootErr$ntc:
        mov     al,byte ptr TXT_MSG_SYSINIT_NTLDR_CMPRS
        jmp     BootErr2

ifdef DEBUG
DbgString0      db  "Debug Point 0", 0Dh, 0Ah, 0
DbgString1      db  "Debug Point 1", 0Dh, 0Ah, 0
DbgString2      db  "Debug Point 2", 0Dh, 0Ah, 0
DbgString3      db  "Debug Point 3", 0Dh, 0Ah, 0
DbgString4      db  "Debug Point 4", 0Dh, 0Ah, 0

endif ; DEBUG

        .errnz  ($-_ntfsboot) GT 8192   ; <FATAL PROBLEM: main boot record exceeds available space>

        org     8192

BootCode ends

         end _ntfsboot
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\i386\boot98n.h ===
#define PC98NTFSBOOTCODE_SIZE 8192


unsigned char PC98NtfsBootCode[] = {
235,82,0,78,84,70,83,32,32,32,32,0,2,1,0,0,
0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,250,51,192,142,208,188,0,124,251,86,140,200,
142,216,102,51,192,142,192,38,160,132,5,162,36,0,199,6,
28,0,0,0,199,6,30,0,0,0,199,6,16,0,0,0,
199,6,18,0,0,0,199,6,14,0,2,0,184,0,13,142,
192,102,51,219,232,68,0,161,26,0,38,139,92,10,102,247,
227,139,30,24,0,102,247,227,102,163,28,0,199,6,16,0,
0,0,199,6,18,0,0,0,198,6,14,0,16,184,0,13,
142,192,51,219,232,20,0,138,14,36,0,139,30,28,0,139,
22,30,0,94,104,0,13,104,106,2,203,96,6,139,54,14,
0,139,235,139,14,16,0,139,22,18,0,82,81,184,64,0,
59,240,115,2,139,198,80,82,247,38,11,0,90,80,139,216,
3,14,28,0,19,22,30,0,160,36,0,36,127,180,86,205,
27,95,91,89,90,114,11,3,203,131,210,0,3,239,43,243,
117,201,137,54,14,0,137,14,16,0,137,22,18,0,7,97,
195,80,83,81,82,6,255,54,14,0,255,54,16,0,255,54,
18,0,139,195,193,232,4,140,193,3,193,37,255,15,45,0,
16,247,216,80,161,14,0,139,14,11,0,193,233,4,247,225,
139,200,88,81,59,193,118,2,139,193,80,139,14,11,0,193,
233,4,51,210,247,241,163,14,0,232,95,255,88,89,43,200,
118,11,140,194,3,208,142,194,184,0,16,235,214,143,6,18,
0,143,6,16,0,143,6,14,0,7,90,89,91,88,195,160,
248,1,180,1,5,2,0,139,240,232,3,0,251,235,254,184,
0,160,142,192,50,228,172,60,0,116,3,171,235,241,195,13,
10,65,32,100,105,115,107,32,114,101,97,100,32,101,114,114,
111,114,32,111,99,99,117,114,114,101,100,0,13,10,78,84,
76,68,82,32,105,115,32,109,105,115,115,105,110,103,0,0,
0,0,0,0,0,0,0,0,191,220,0,0,0,0,85,170,
5,0,78,0,84,0,76,0,68,0,82,0,4,0,36,0,
73,0,51,0,48,0,0,224,0,0,0,48,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,235,18,144,144,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,140,200,142,216,193,224,
4,250,139,224,251,138,193,162,36,0,137,30,28,0,137,22,
30,0,86,102,15,183,6,11,0,102,15,182,30,13,0,102,
247,227,102,163,78,2,102,139,14,64,0,128,249,0,15,143,
14,0,246,217,102,184,1,0,0,0,102,211,224,235,8,144,
102,161,78,2,102,247,225,102,163,82,2,102,15,183,30,11,
0,102,51,210,102,247,243,102,163,86,2,232,14,4,102,139,
14,74,2,102,137,14,34,2,102,3,14,82,2,102,137,14,
38,2,102,3,14,82,2,102,137,14,42,2,102,3,14,82,
2,102,137,14,58,2,102,3,14,82,2,102,137,14,66,2,
102,184,144,0,0,0,102,139,14,34,2,232,237,8,102,11,
192,15,132,138,254,102,163,46,2,102,184,160,0,0,0,102,
139,14,38,2,232,212,8,102,163,50,2,102,184,176,0,0,
0,102,139,14,42,2,232,194,8,102,163,54,2,102,161,46,
2,102,11,192,15,132,87,254,103,128,120,8,0,15,133,78,
254,103,102,141,80,16,103,3,66,4,103,102,15,182,72,12,
102,137,14,98,2,103,102,139,72,8,102,137,14,94,2,102,
161,94,2,102,15,183,14,11,0,102,51,210,102,247,241,102,
163,102,2,102,161,66,2,102,3,6,94,2,102,163,70,2,
102,131,62,50,2,0,15,132,25,0,102,131,62,54,2,0,
15,132,251,253,102,139,30,54,2,30,7,102,139,62,70,2,
232,147,1,102,15,183,14,0,2,102,184,2,2,0,0,232,
151,7,102,11,192,15,132,11,9,103,102,139,0,30,7,102,
139,62,58,2,232,207,5,102,161,58,2,102,187,128,0,0,
0,102,185,0,0,0,0,102,186,0,0,0,0,232,173,0,
102,11,192,15,133,62,0,102,185,128,0,0,0,102,161,58,
2,232,90,8,102,11,192,15,132,201,8,30,7,102,139,62,
58,2,232,145,5,102,161,58,2,102,187,128,0,0,0,102,
185,0,0,0,0,102,186,0,0,0,0,232,111,0,102,11,
192,15,132,159,8,103,102,15,183,88,12,102,129,227,255,0,
0,0,15,133,142,8,102,139,216,104,0,32,7,102,43,255,
232,243,0,138,22,36,0,184,232,3,142,192,141,54,11,0,
43,192,93,104,0,32,80,203,6,30,102,96,102,139,218,102,
15,182,14,13,0,102,247,225,102,163,16,0,102,139,195,102,
247,225,163,14,0,139,223,131,227,15,140,192,102,193,239,4,
3,199,80,7,232,154,252,102,97,144,31,7,195,103,3,64,
20,103,102,131,56,255,15,132,76,0,103,102,57,24,15,133,
51,0,102,11,201,15,133,10,0,103,128,120,9,0,15,133,
35,0,195,103,58,72,9,15,133,26,0,102,139,240,103,3,
112,10,232,89,6,102,81,30,7,102,139,250,243,167,102,89,
15,133,1,0,195,103,102,131,120,4,0,15,132,7,0,103,
102,3,64,4,235,171,102,43,192,195,102,139,243,232,46,6,
103,102,3,0,103,247,64,12,2,0,15,133,52,0,103,102,
141,80,16,103,58,74,64,15,133,24,0,103,102,141,114,66,
232,11,6,102,81,30,7,102,139,251,243,167,102,89,15,133,
1,0,195,103,131,120,8,0,15,132,6,0,103,3,64,8,
235,194,102,51,192,195,103,128,123,8,0,15,133,28,0,6,
30,102,96,103,102,141,83,16,103,102,139,10,102,139,243,103,
3,114,4,243,164,102,97,144,31,7,195,103,102,141,83,16,
103,102,139,74,8,102,65,102,43,192,232,1,0,195,6,30,
102,96,103,128,123,8,1,15,132,3,0,233,17,252,102,131,
249,0,15,133,6,0,102,97,144,31,7,195,102,83,102,80,
102,81,102,87,6,232,115,4,102,139,209,7,102,95,102,89,
102,59,202,15,141,3,0,102,139,209,232,171,254,102,43,202,
102,139,218,102,139,194,102,15,182,22,13,0,102,247,226,102,
15,183,22,11,0,102,247,226,102,3,248,102,88,102,3,195,
102,91,235,170,6,30,102,96,103,128,123,8,1,15,132,3,
0,233,171,251,102,131,249,0,15,133,6,0,102,97,144,31,
7,195,102,83,102,80,102,81,102,87,6,102,81,102,51,210,
102,15,182,14,13,0,102,247,241,102,82,232,253,3,102,15,
182,30,13,0,102,247,227,102,90,102,3,194,102,80,102,15,
182,6,13,0,102,247,225,102,139,208,102,88,102,89,7,102,
95,102,89,102,59,202,15,141,3,0,102,139,209,102,163,16,
0,137,22,14,0,6,30,102,96,139,223,131,227,15,140,192,
102,193,239,4,3,199,80,7,232,198,250,102,97,144,31,7,
102,43,202,102,139,218,102,139,194,102,15,183,22,11,0,102,
247,226,102,3,248,102,88,102,3,195,102,91,233,101,255,6,
30,102,96,38,103,102,15,183,95,4,38,103,102,15,183,79,
6,102,11,201,15,132,247,250,102,3,223,102,131,195,2,102,
129,199,254,1,0,0,102,73,102,11,201,15,132,23,0,38,
103,139,3,38,103,137,7,102,131,195,2,102,129,199,0,2,
0,0,102,73,235,226,102,97,144,31,7,195,6,30,102,96,
102,184,1,0,0,0,102,163,30,2,102,161,26,2,102,3,
6,82,2,102,163,90,2,102,3,6,82,2,102,163,74,2,
102,161,48,0,102,15,182,30,13,0,102,247,227,102,139,30,
74,2,102,137,7,102,163,16,0,131,195,4,102,161,86,2,
102,137,7,163,14,0,131,195,4,102,137,30,74,2,102,139,
30,26,2,30,7,232,249,249,102,139,251,232,81,255,102,161,
26,2,102,187,32,0,0,0,102,185,0,0,0,0,102,186,
0,0,0,0,232,70,253,102,11,192,15,132,22,1,102,139,
216,30,7,102,139,62,22,2,232,219,253,102,139,30,22,2,
102,129,63,128,0,0,0,15,132,235,0,3,95,4,235,240,
102,83,102,139,71,16,102,247,38,86,2,102,80,102,51,210,
102,15,182,30,13,0,102,247,243,102,82,232,220,0,102,11,
192,15,132,250,249,102,139,14,86,2,102,15,182,30,13,0,
102,247,227,102,90,102,3,194,102,139,30,74,2,102,137,7,
131,195,4,102,15,182,6,13,0,102,43,194,102,59,193,15,
134,3,0,102,139,193,102,137,7,102,43,200,102,90,15,132,
117,0,102,3,194,102,80,102,51,210,102,15,182,30,13,0,
102,247,243,102,81,232,130,0,102,89,102,11,192,15,132,158,
249,102,15,182,30,13,0,102,247,227,102,139,30,74,2,102,
139,23,131,195,4,102,3,23,102,59,208,15,133,21,0,102,
15,182,6,13,0,102,59,193,15,134,3,0,102,139,193,102,
1,7,235,165,131,195,4,102,137,30,74,2,102,137,7,131,
195,4,102,15,182,6,13,0,102,59,193,15,134,3,0,102,
139,193,102,137,7,235,130,131,195,4,102,255,6,30,2,102,
137,30,74,2,102,91,3,95,4,102,129,63,128,0,0,0,
15,132,12,255,102,97,144,31,7,195,102,139,208,102,139,14,
30,2,102,139,54,90,2,102,3,54,82,2,102,82,102,81,
102,82,102,139,30,90,2,102,139,62,86,2,102,139,4,102,
163,16,0,131,198,4,102,139,4,163,14,0,131,198,4,30,
7,232,125,248,102,43,248,15,132,8,0,247,38,11,0,3,
216,235,217,102,139,62,90,2,30,7,232,194,253,102,161,90,
2,102,187,128,0,0,0,102,185,0,0,0,0,102,139,209,
232,186,251,102,11,192,15,132,181,248,102,139,216,102,88,102,
86,232,39,1,102,94,102,11,192,15,132,5,0,102,91,102,
91,195,102,89,102,90,226,132,102,51,192,195,6,30,102,96,
102,80,102,81,102,51,210,102,15,182,30,13,0,102,247,243,
102,82,102,87,232,83,255,102,95,102,11,192,15,132,111,248,
102,15,182,30,13,0,102,247,227,102,90,102,3,194,102,163,
16,0,102,89,102,15,182,30,13,0,102,59,203,15,142,19,
0,137,30,14,0,102,43,203,102,88,102,3,195,102,80,102,
81,235,20,144,102,88,102,3,193,102,80,137,14,14,0,102,
185,0,0,0,0,102,81,6,102,87,139,223,131,227,15,140,
192,102,193,239,4,3,199,80,7,232,165,247,102,95,7,102,
3,62,78,2,102,89,102,88,102,131,249,0,15,143,112,255,
102,97,144,31,7,195,6,30,102,96,102,247,38,86,2,102,
139,14,86,2,232,85,255,232,213,252,102,97,144,31,7,195,
6,30,102,96,102,247,38,102,2,102,139,30,50,2,102,139,
14,102,2,30,7,102,139,62,66,2,232,7,252,232,175,252,
102,97,144,31,7,195,102,80,102,83,102,81,102,139,30,70,
2,102,139,200,102,193,232,3,102,131,225,7,102,3,216,102,
184,1,0,0,0,102,211,224,103,132,3,15,132,4,0,248,
235,2,144,249,102,89,102,91,102,88,195,103,128,123,8,1,
15,132,4,0,102,43,192,195,103,102,141,115,16,103,102,139,
86,8,102,59,194,15,135,11,0,103,102,139,22,102,59,194,
15,131,4,0,102,43,192,195,103,3,94,16,102,43,246,103,
128,59,0,15,132,62,0,232,129,0,102,3,241,232,57,0,
102,3,202,102,59,193,15,140,33,0,102,139,209,102,80,103,
102,15,182,11,102,139,193,102,131,224,15,102,193,233,4,102,
3,217,102,3,216,102,67,102,88,235,196,102,43,200,102,43,
194,102,3,198,195,102,43,192,195,102,43,201,103,138,11,128,
225,15,102,131,249,0,15,133,4,0,102,43,201,195,102,83,
102,82,102,3,217,103,102,15,190,19,102,73,102,75,102,131,
249,0,15,132,13,0,102,193,226,8,103,138,19,102,75,102,
73,235,235,102,139,202,102,90,102,91,195,102,83,102,82,102,
43,210,103,138,19,102,131,226,15,102,43,201,103,138,11,192,
233,4,102,131,249,0,15,133,8,0,102,43,201,102,90,102,
91,195,102,3,218,102,3,217,103,102,15,190,19,102,73,102,
75,102,131,249,0,15,132,13,0,102,193,226,8,103,138,19,
102,75,102,73,235,235,102,139,202,102,90,102,91,195,102,11,
201,15,133,1,0,195,102,81,102,86,103,131,62,97,15,140,
12,0,103,131,62,122,15,143,4,0,103,131,46,32,102,131,
198,2,226,230,102,94,102,89,195,102,80,102,81,102,139,208,
102,161,46,2,103,102,141,88,16,103,3,67,4,103,102,141,
64,16,102,139,218,232,130,249,102,11,192,15,132,5,0,102,
89,102,89,195,102,161,50,2,102,11,192,15,133,8,0,102,
89,102,89,102,51,192,195,102,139,22,50,2,103,102,141,82,
16,103,102,139,66,8,102,64,102,139,30,78,2,102,247,227,
102,51,210,102,247,54,94,2,102,80,102,88,102,11,192,15,
132,48,0,102,72,102,80,232,28,254,114,238,232,241,253,102,
90,102,89,102,91,102,83,102,81,102,82,102,161,66,2,103,
102,141,64,24,232,19,249,102,11,192,116,206,102,89,102,89,
102,89,195,102,89,102,89,102,51,192,195,102,81,102,80,102,
184,5,0,0,0,30,7,102,139,249,232,153,253,102,139,193,
102,91,102,83,102,15,183,14,12,2,102,186,14,2,0,0,
232,122,248,102,91,102,89,102,11,192,15,133,47,0,102,139,
193,102,139,203,102,80,102,83,232,35,0,102,91,102,95,102,
11,192,15,132,23,0,30,7,232,91,253,102,139,199,102,15,
183,14,12,2,102,186,14,2,0,0,232,64,248,195,102,81,
102,187,32,0,0,0,102,185,0,0,0,0,102,186,0,0,
0,0,232,40,248,102,11,192,15,132,82,0,102,139,216,30,
7,102,139,62,22,2,232,189,248,30,7,102,139,30,22,2,
102,89,38,102,57,15,15,132,46,0,38,102,131,63,255,15,
132,45,0,38,131,127,4,0,15,132,36,0,38,102,15,183,
71,4,3,216,139,195,37,0,128,116,215,140,192,5,0,8,
142,192,129,227,255,127,235,202,38,102,139,71,16,195,102,89,
102,51,192,195,160,249,1,233,200,244,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\i386\ntfsn98.asm ===
NEC_98=1;
        page    ,132
        title   ntfsboot - NTFS boot loader
        name    ntfsboot

; The ROM in the IBM PC starts the boot process by performing a hardware
; initialization and a verification of all external devices.  If all goes
; well, it will then load from the boot drive the sector from track 0, head 0,
; sector 1.  This sector is placed at physical address 07C00h.
;
; The boot code's sole resposiblity is to find NTLDR, load it at
; address 2000:0000, and then jump to it.
;
; The boot code understands the structure of the NTFS root directory,
; and is capable of reading files.  There is no contiguity restriction.
;
; DEBUG EQU 1
MASM    equ     1
        .xlist
        .286

A_DEFINED EQU 1

    include ntfs.inc

DoubleWord      struc
lsw     dw      ?
msw     dw      ?
DoubleWord      ends

IFDEF NEC_98
PartitionDescriptor struc
    BootableFlag        db  ?
    PartitionType       db  ?
    Reserved            dw  ?
    IPLSector           db  ?
    IPLTrack            db  ?
    IPLCylinder         dw  ?
    StartingSector      db  ?
    StartingTrack       db  ?
    StartingCylinder    dw  ?
    EndingSector        db  ?
    EndingTrack         db  ?
    EndingCylinder      dw  ?
    PartitionName       db  16 dup(?)       ; ASCII strings
PartitionDescriptor ends

DAUA        equ     584h
endif
;
; The following are various segments used by the boot loader. The first
; two are the segments where the boot sector is initially loaded and where
; the boot sector is relocated to.  The third is the static location
; where the NTLDR is loaded.
;

IFDEF NEC_98
; We must not use BootSeg.
; Because, we don't know address that this module is loaded.
; The address transform under the influence of Sector Length and Machine Mode.
else
BootSeg segment at 07c0h        ; this is where the MBR loads us initially.
BootSeg ends
endif

NewSeg  segment at 0d00h        ; this is where we'll relocate to.
NewSeg  ends                    ; enough for 16 boot sectors +
                                ;       4-sector scratch
                                ; below where we'll load NTLDR.

LdrSeg segment at 2000h         ; we want to load the loader at 2000:0000
LdrSeg ends

;/********************** START OF SPECIFICATIONS ************************/
;/*                                                                     */
;/* SUBROUTINE NAME: ntfsboot                                           */
;/*                                                                     */
;/* DESCRIPTIVE NAME: Bootstrap loader                                  */
;/*                                                                     */
;/* FUNCTION:    To load NTLDR into memory.                             */
;/*                                                                     */
;/* NOTES:       ntfsboot is loaded by the ROM BIOS (Int 19H) at        */
;/*              physical memory location 0000:7C00H.                   */
;/*              ntfsboot runs in real mode.                            */
;/*              This boot record is for NTFS volumes only.             */
;/*                                                                     */
;/* ENTRY POINT: ntfsboot                                               */
;/* LINKAGE:     Jump (far) from Int 19H                                */
;/*                                                                     */
;/* INPUT:       CS:IP = 0000:7C00H                                     */
;/*              SS:SP = 0030:00FAH (CBIOS dependent)                   */
;/*                                                                     */
;/* EXIT-NORMAL: DL = INT 13 drive number we booted from                */
;/*              Jmp to main in NTLDR                                   */
;/*                                                                     */
;/* EXIT-ERROR:  None                                                   */
;/*                                                                     */
;/* EFFECTS:     NTLDR is loaded into the physical memory               */
;/*                location 00020000H                                   */
;/*                                                                     */
;/*********************** END OF SPECIFICATIONS *************************/
BootCode segment        ;would like to use BootSeg here, but LINK flips its lid
        assume  cs:BootCode,ds:nothing,es:nothing,ss:nothing

        org     0               ; start at beginning of segment, not 0100h.

        public  _ntfsboot
_ntfsboot label near
IFDEF NEC_98
        jmp     short   start
else
        jmp     start
endif
    .errnz  ($-_ntfsboot) GT (3)        ;<FATAL PROBLEM: JMP is more than three bytes>

    org 3

Version                 db      "NTFS    "      ; Signature, must be "NTFS    "
BPB                     label   byte
BytesPerSector          dw      512             ; Size of a physical sector
SectorsPerCluster       db      1               ; Sectors per allocation unit

;
; Traditionally the next 7 bytes were the reserved sector count, fat count,
; root dir entry count, and the small volume sector count. However all of
; these fields must be 0 on NTFS volumes.
;
; We use this space to store some temporary variables used by the boot code,
; which avoids the need for separate space in sector 0 to store them.
; We also take advantage of the free 0-initialization to save some space
; by avoiding the code to initialize them.
;
; Note that ideally we'd want to use an unused field for the SectorCount
; and initialize it to 16. This would let us save a few bytes by avoiding
; code to explicitly initialize this value before we read the 16 boot sectors.
; However setup and other code tends to preserve the entire bpb area when
; it updates boot code, so we avoid a dependency here and initialize
; the value explicitly to 16 in the first part of the boot code.
;
SectorCount             dw      0               ; number of sectors to read
SectorBase              dd      0               ; start sector for read request
HaveXInt13              db      0               ; extended int13 available flag

Media                   db      0f8h            ; Media byte
FatSectors              dw      0               ; (always 0 on NTFS)
SectorsPerTrack         dw      0               ; Sectors per track
Heads                   dw      0               ; Number of surfaces
HiddenSectors           dd      0               ; partition start LBA

;
; The field below is traditionally the large sector count and is
; always 0 on NTFS. We use it here for a value the boot code calculates,
; namely the number of sectors visible on the drive via conventional int13.
;
Int13Sectors            dd      0

DriveNumber             db      80h             ; int13 unit number

                        db      3 dup (?)       ; alignment filler

;
; The following is the rest of the NTFS Sector Zero information.
; The offsets of most of these fields cannot be changed without changing
; all code that validates, formats, recognizes, etc, NTFS volumes.
; In other words, don't change it.
;
SectorsOnVolume         db (size LARGE_INTEGER) dup (?)
MftStartLcn             db (size LARGE_INTEGER) dup (?)
Mft2StartLcn            db (size LARGE_INTEGER) dup (?)
ClustersPerFrs          dd ?
DefClustersPerBuf       dd ?
SerialNumber            db (size LARGE_INTEGER) dup (?)
CheckSum                dd ?

;
; Make sure size of fields matches what fs_rec.sys thinks is should be
;
        .errnz          ($-_ntfsboot) NE (54h)

;****************************************************************************
start:
;
;       First of all, set up the segments we need (stack and data).
;
        cli
        xor     ax,ax                   ; Set up the stack to just before
        mov     ss,ax                   ; this code.  It'll be moved after
        mov     sp,7c00h                ; we relocate.
        sti

IFDEF NEC_98
        push    si                      ; for after use
        mov     ax, cs                  ; Address BPB with DS.
else
        mov     ax,Bootseg              ; Address BPB with DS.
endif
        mov     ds,ax
        assume  ds:BootCode

IFDEF NEC_98
; Boot is from hard disk.
; Our BPB tells us BytesPerSector, but it is a logical value
; that may differ from the physical value.
; We need SectorShiftFactor that is used to convert logical sector address
; to phisical sector address.

.386
        xor     eax, eax                ;
.286
        mov     es, ax                  ;
        mov     al, es:[DAUA]           ;
        mov     DriveNumber, al         ; Save DriveNumber

IFDEF NEC_98
;
; we assume physical sector length is 512.
; so SectorShiftFactor is 1
;
else
        mov     ah, 84h                 ; ROM BIOS sense command
        xor     bx, bx                  ; initialize bx to 0
        int     1Bh                     ;
        jc      Flg01

        test    bx, bx                  ; physical sector length returned ?
        jnz     Flg02                   ; if not,
Flg01:
        mov     bx, 512                 ; we assume 512 bytes per sector
Flg02:
        mov     ax, BytesPerSector      ; BytesPerSector
        xor     dx, dx
        div     bx
        mov     SectorShiftFactor,ax
endif
;
;   We need to calculate length of hidden sector.
;
        mov     HiddenSectors.lsw, 0
        mov     HiddenSectors.msw, 0

        mov     SectorBase.lsw, 0       ; read Partition control area
        mov     SectorBase.msw, 0
        mov     word ptr [SectorCount], 2   ; Maximum pattern

        mov     ax, NewSeg              ; read it at NewSeg.
        mov     es, ax                  ;                   >>  take a room
.386
        xor     ebx, ebx                ; at NewSeg:0000.
.286
        call    DoReadLL                ; Call low-level DoRead routine

.386
        mov     ax, Heads               ;
        mov     bx, es:[si].StartingCylinder ;
        mul     ebx                     ; cylinder * head = total_track
        mov     bx, SectorsPerTrack     ;
        mul     ebx                     ; (edx:eax = total_track) * (ebx=sec/trk)
        mov     HiddenSectors, eax      ; = total_sec
.286
else
        call    Int13SecCnt             ; determine range of regular int13
endif

;
; Read bootcode and jump to code in sector 1.
; Assumes HaveXInt13 and SectorBase are initialized to 0,
; which they are since they are stored in areas of the BPB
; that must be 0 on NTFS volumes.
;
IFDEF NEC_98
        mov     SectorBase.lsw, 0       ; read sector zero.
        mov     SectorBase.msw, 0

;        xor     dx, dx
;        mov     ax, 2000h
;        div     BytesPerSector
;        mov     byte ptr SectorCount,ax ; word field is 0 on-disk so byte init is OK
        mov     byte ptr SectorCount,10h ; word field is 0 on-disk so byte init is OK
        mov     ax,NewSeg
        mov     es,ax
        xor     bx,bx                   ; es:bx = transfer address
        call    DoReadLL                ; Call low-level DoRead routine
else
        mov     ax,NewSeg
        mov     es,ax
        xor     bx,bx                   ; es:bx = transfer address
        mov     byte ptr SectorCount,16 ; word field is 0 on-disk so byte init is OK
        call    ReadSectors
endif
IFDEF NEC_98
        mov     cl, DriveNumber         ; Copy DriveNumber
        mov     bx, HiddenSectors.lsw   ;
        mov     dx, HiddenSectors.msw   ; bx:ax = HiddenSectors
        pop     si                      ; Partition information
endif
        push    NewSeg
        push    offset mainboot
        retf

IFDEF NEC_98
else
;
; Determine the number of sectors addressable via
; conventional int13. If we can't get drive params for some reason
; then something is very wrong -- we'll try to force the caller
; to use conventional int13 by maxing out the sector count.
;
; Input: ds addresses start of first sector
;
; Output: in eax; also stored in Int13Sectors variable.
;
; Preserves: assume none.
;
Int13SecCnt proc near
        mov     dl,DriveNumber          ; int13 unit number
        mov     ah,8                    ; get drive params
        int     13h                     ; call BIOS
        jnc     @f                      ; no error, procede
        mov     cx,-1                   ; strange case, fake registers to force
        mov     dh,cl                   ; use of standard int13 (set all vals to max)
@@:
.386
        movzx   eax,dh                  ; eax = max head # (0-255)
        inc     ax                      ; eax = heads (1-256)
        movzx   edx,cl                  ; edx = sectors per track + cyl bits
        and     dl,3fh                  ; edx = sectors per track (1-63)
        mul     dx                      ; eax = sectors per cylinder, edx = 0
        xchg    cl,ch
        shr     ch,6                    ; cx = max cylinder # (0-1023)
        inc     cx                      ; cx = cylinders (1-1024)
        movzx   ecx,cx                  ; ecx = cylinders (1-1024)
        mul     ecx                     ; eax = sectors visible via int13, edx = 0
        mov     Int13Sectors,eax        ; save # sectors addressable via int13
.286
        ret
Int13SecCnt endp

;
; Determine whether extended int13 services are available on the boot drive.
;
; Stores result (boolean) in HaveXInt13 variable.
;
; Preserves: assume none.
;
HaveInt13Ext proc near
        mov     ah,41h
        mov     bx,055aah
        mov     dl,DriveNumber
        int     13h
        jc      @f                      ; error from int13 means no xint13
        cmp     bx,0aa55h               ; absence of sig means no xint13
        jne     @f
        test    cl,1                    ; bit 0 off means no xint13
        jz      @f
        inc     byte ptr HaveXInt13     ; xint13 is available
@@:     ret
HaveInt13Ext endp

endif
IFDEF NEC_98
;*******************************************************************************
;
; Low-level read routine that doesn't work across a 64k addr boundary.
;
;       Read SectorCount sectors (starting at SectorBase) to es:bx.
;
;       As a side effect, SectorBase is updated (but es:bx are not)
;       and SectorCount is reduced to zero.
;
DoReadLL proc
        pusha
        push    es

        mov     si, SectorCount
        mov     bp, bx
        mov     cx, SectorBase.lsw      ; Starting sector
        mov     dx, SectorBase.msw      ; Starting sector

;    (dx:cx) = logical sector # relative to partition
;    (si)    = # of sectors to read
;    (es:bp) = read buffer

Rpt03:
        push    dx
        push    cx

;   [sp]   = logical sector number LSW
;   [sp+2] = logical sector number MSW

;   We are reading hard disk.
;   We don't care about DMA boundary
;   as length we read is 64KB max.
;
;        push    dx
;        xor     dx, dx
;        mov     ax, 32768               ; sectors we can read (32KB)
;        div     BytesPerSector          ; this is not optimum on performance
;        pop     dx
        mov     ax, 64                  ; ax = 32768(32KB)/512(BytePerSector)
;
;   (ax) = # of sectors we can read with 1 time ROM call
;   (si) = # of sectors we need to read
;
        cmp     si, ax
        jnb     @F

        mov     ax, si
@@:

        push    ax                      ; # of sectors we are reading this call
        push    dx
        mul     BytesPerSector          ; SECSIZE
        pop     dx
        push    ax                      ; # of bytes.

;   [sp]   = # of bytes to read
;   [sp+2] = # of sectors
;   [sp+4] = logical sector number LSW
;   [sp+6] = logical sector number MSW

        mov     bx, ax                  ; # of bytes we read
;        mov     ax, SectorShiftFactor
;
;Rpt04:                                  ; logical sector address to
;        shr     ax, 1
;        jc      @F
;
;        shl     cx, 1                   ; physical sector address
;        rcl     dx, 1
;        jmp     short   Rpt04
;@@:
Flg00:
        add     cx, HiddenSectors.lsw
        adc     dx, HiddenSectors.msw   ; (dx:cx) -> relative to drive

        mov     al, DriveNumber
        and     al, 7Fh                 ; drive #

;   We have prepared following ROM BIOS parameters
;   (al) = drive
;   (dx:cx) = relative sector number
;   (es:bp) -> buffer
;
        mov     ah, 01010110b           ; read
        int     1Bh

        pop     di                      ; # of bytes
        pop     bx                      ; # of sectors
        pop     cx                      ; lsn (LSW)
        pop     dx                      ; lsn (MSW)

        jc      @F                      ; return Carry

;   prepare for next call

        add     cx, bx                  ; advance lsn
        adc     dx, 0                   ;
        add     bp, di                  ; advance offset
        sub     si, bx                  ; decrement # of sectors
        jnz     Rpt03                   ; CarryFlag is Clear
@@:

        mov     SectorCount, si
        mov     SectorBase.lsw, cx      ; Next Starting sector
        mov     SectorBase.msw, dx      ; Next Starting sector

        pop     es
        popa
        ret
DoReadLL  endp
endif
IFDEF NEC_98
;SectorShiftFactor           dw    ?
endif

;
; Read SectorCount sectors starting at logical sector SectorBase,
; into es:bx, using extended int13 if necessary.
;
; Preserves all
;
ReadSectors proc near
IFDEF NEC_98
;****************************************************************************
;
; ReadSectors - read SectorCount sectors into ES:BX starting from sector
;          SectorBase.
;
; NOTE: This code WILL NOT WORK if ES:BX does not point to an address whose
; physical address (ES * 16 + BX) MOD 512 != 0.
;
; ReadSectors adds to ES rather than BX in the main loop so that runs longer than
; 64K can be read with a single call to ReadSectors.
;
; Note that ReadSectors (unlike DoReadLL) saves and restores SectorCount
; and SectorBase
;
.286
        push    ax                      ; save important registers
        push    bx
        push    cx
        push    dx
        push    es
        push    SectorCount             ; save state variables too
        push    SectorBase.lsw
        push    SectorBase.msw
;
; Calculate how much we can read into what's left of the current 64k
; physical address block, and read it.
;
;
        mov     ax,bx

        shr     ax,4
        mov     cx,es
        add     ax,cx                   ; ax = paragraph addr

;
; Now calc maximum number of paragraphs that we can read safely:
;       4k - ( ax mod 4k )
;

        and     ax,0fffh
        sub     ax,1000h
        neg     ax

;
; Calc CX = number of paragraphs to be read
;
        push    ax
        mov     ax,SectorCount          ; convert SectorCount to paragraph cnt
        mov     cx,BytesPerSector
        shr     cx,4
        mul     cx
        mov     cx,ax
        pop     ax

ReadSectors$Loop64:
        push    cx                      ; save cpRead

        cmp     ax,cx                   ; ax = min(cpReadSafely, cpRead)
        jbe     @F
        mov     ax,cx
@@:
        push    ax
;
; Calculate new SectorCount from amount we can read
;
        mov     cx,BytesPerSector
        shr     cx,4
        xor     dx,dx
        div     cx
        mov     SectorCount,ax

        call    DoReadLL

        pop     ax                      ; ax = cpActuallyRead
        pop     cx                      ; cx = cpRead

        sub     cx,ax                   ; Any more to read?
        jbe     ReadSectors$Exit64           ; Nope.
;
; Adjust ES:BX by amount read
;
        mov     dx,es
        add     dx,ax
        mov     es,dx
;
; Since we're now reading on a 64k byte boundary, cpReadSafely == 4k.
;
        mov     ax,01000h               ; 16k paragraphs per 64k segment
        jmp     short ReadSectors$Loop64     ; and go read some more.

ReadSectors$Exit64:
        pop     SectorBase.msw          ; restore all this crap
        pop     SectorBase.lsw
        pop     SectorCount
        pop     es
        pop     dx
        pop     cx
        pop     bx
        pop     ax
        ret
else
.386
        pushad                          ; save registers
        push    ds
        push    es

read_loop:
        mov     eax,SectorBase          ; logical starting sector
        add     eax,HiddenSectors       ; eax = physical starting sector
        cmp     eax,Int13Sectors        ; determine if standard int13 is ok
        jb      stdint13

        push    ds                      ; preserve ds

        db      66h                     ; hand-coded 32-bit push of 8-bit immediate
        push    0                       ; high 32 bits of sector #
        push    eax                     ; low 32 bits of sector #
        push    es
        push    bx                      ; transfer address
        push    dword ptr 10010h        ; transfer 1 sector, packet size = 16

        cmp     byte ptr HaveXInt13,0
        jne     @f                      ; already know we have xint13 available
        call    HaveInt13Ext            ; see if we have it
        cmp     byte ptr HaveXInt13,0

        je      BootErr$he              ; need it but don't have it

@@:     mov     ah,42h                  ; extended read
        mov     dl,DriveNumber          ; dl = int13 unit #
        push    ss
        pop     ds
        mov     si,sp                   ; ds:si -> param packet

        int     13h

        pop     eax                     ; throw away first 4 bytes of param packet
        pop     bx                      ; restore es:bx from param packet
        pop     es
        pop     eax                     ; throw away last 8 bytes of param packet
        pop     eax                     ; without clobbering carry flag

        pop     ds                      ; restore ds

        jmp     short did_read

stdint13:
        xor     edx,edx                 ; edx:eax = absolute sector number
        movzx   ecx,SectorsPerTrack     ; ecx = sectors per track
        div     ecx                     ; eax = track, edx = sector within track (0-62)
        inc     dl                      ; dl = sector within track (1-63)
        mov     cl,dl                   ; cl = sector within track
        mov     edx,eax
        shr     edx,16                  ; dx:ax = track
        div     Heads                   ; ax = cylinder (0-1023), dx = head (0-255)
        xchg    dl,dh                   ; dh = head
        mov     dl,DriveNumber          ; dl = int13 unit #
        mov     ch,al                   ; ch = bits 0-7 of cylinder
        shl     ah,6
        or      cl,ah                   ; bits 6-7 of cl = bits 8-9 of cylinder
        mov     ax,201h                 ; read 1 sector
        int     13h
did_read:
        jc      BootErr$he

read_next:
        mov     ax,es                   ; advance transfer address
        add     ax,20h                  ; by moving segment register along
        mov     es,ax                   ; thus no 64K limit on transfer length

        inc     SectorBase              ; advance sector number
        dec     SectorCount             ; see if done
        jnz     read_loop               ; not done

        pop     es
        pop     ds
        popad                           ; restore registers
.286
        ret
endif
ReadSectors endp

BootErr$he:

        mov     al,byte ptr TXT_MSG_SYSINIT_BOOT_ERROR
IFDEF NEC_98
BootErr2:

        mov     ah, 1                   ; offset = offseet + 256
        add     ax, 2
        mov     si, ax                  ; set string data

;        mov     ax, 0a00h               ; initialize crt mode 80*25
;        int     18h                     ;
;        mov     ah, 0ch                 ; start display
;        int     18h                     ;

        call    BootErr$print
        sti
        jmp     $                       ; Wait forever

BootErr$print:
        mov     ax, 0a000h              ; set V-RAM
        mov     es, ax
        xor     ah, ah

        lodsb                           ; Get next character
        cmp     al, 0                   ; Is text end ?
        je      BootErr$Done            ;
        stosw                           ; move to vram
        jmp     BootErr$print           ;
BootErr$Done:
else
BootErr2:
        call    BootErr$print
        mov     al,byte ptr TXT_MSG_SYSINIT_REBOOT
        call    BootErr$print
        sti
        jmp     $                       ; Wait forever

BootErr$print:
;
; al is offset - 256 of message. Adjust to form real offset
; and stick in si so lodsb below will work.
;
        mov     ah,1
        mov     si,ax

BootErr$print1:
        lodsb                           ; Get next character
        cmp     al,0
        je      BootErr$Done
        mov     ah,14                   ; Write teletype
        mov     bx,7                    ; Attribute
        int     10h                     ; Print it
        jmp     BootErr$print1
BootErr$Done:
endif
        ret

;****************************************************************************

;
; Message table.
;
; We put English messages here as a placeholder only, so that in case
; anyone uses bootntfs.h without patching new messages in, things will
; still be correct (in English, but at least functional).
;
MSG_SYSINIT_BOOT_ERROR:

        DB      13,10,'A disk read error occurred',0

MSG_SYSINIT_FILE_NOT_FD:

        DB      13,10,'NTLDR is missing',0

ifdef NEC_98
else
MSG_SYSINIT_NTLDR_CMPRS:

        DB      13,10,'NTLDR is compressed',0

MSG_SYSINIT_REBOOT:

        DB      13,10,'Press Ctrl+Alt+Del to restart',13,10,0
endif

;
; Now build a table with the low byte of the offset to each message.
; Code that patches the boot sector messages updates this table.
;
        .errnz ($-_ntfsboot) GT (512-8)
        ORG     512 - 8
TXT_MSG_SYSINIT_BOOT_ERROR:
        db OFFSET (MSG_SYSINIT_BOOT_ERROR - _ntfsboot) - 256
TXT_MSG_SYSINIT_FILE_NOT_FD:
        db OFFSET (MSG_SYSINIT_FILE_NOT_FD - _ntfsboot) - 256
ifdef NEC_98
else
TXT_MSG_SYSINIT_NTLDR_CMPRS:
        db OFFSET (MSG_SYSINIT_NTLDR_CMPRS - _ntfsboot) - 256
TXT_MSG_SYSINIT_REBOOT:
        db OFFSET (MSG_SYSINIT_REBOOT - _ntfsboot) - 256
endif

ifdef NEC_98
        .errnz ($-_ntfsboot) GT (512-4)
        ORG     512 - 4
endif
        .errnz ($-_ntfsboot) NE (512-4)
        db      0,0,55h,0aah

;   Name we look for.  ntldr_length is the number of characters,
;   ntldr_name is the name itself.  Note that it is not NULL
;   terminated, and doesn't need to be.
;
ntldr_name_length   dw  5
ntldr_name          dw  'N', 'T', 'L', 'D', 'R'

;   Predefined name for index-related attributes associated with an
;   index over $FILE_NAME
;
index_name_length   dw 4
index_name          dw '$', 'I', '3', '0'

;   Global variables.  These offsets are all relative to NewSeg.
;
AttrList            dd 0e000h   ; Offset of buffer to hold attribute list
MftFrs              dd  3000h   ; Offset of general scratch buffer for FRS
SegmentsInMft       dd   ?      ; number of FRS's with MFT Data attribute records
RootIndexFrs        dd   ?      ; Offset of Root Index FRS
AllocationIndexFrs  dd   ?      ; Offset of Allocation Index FRS        ; KPeery
BitmapIndexFrs      dd   ?      ; Offset of Bitmap Index FRS            ; KPeery
IndexRoot           dd   ?      ; Offset of Root Index $INDEX_ROOT attribute
IndexAllocation     dd   ?      ; Offset of Root Index $INDEX_ALLOCATION attribute
IndexBitmap         dd   ?      ; Offset of Root Index $BITMAP attribute
NtldrFrs            dd   ?      ; Offset of NTLDR FRS
NtldrData           dd   ?      ; Offset of NTLDR $DATA attribute
IndexBlockBuffer    dd   ?      ; Offset of current index buffer
IndexBitmapBuffer   dd   ?      ; Offset of index bitmap buffer
NextBuffer          dd   ?      ; Offset of next free byte in buffer space

BytesPerCluster     dd   ?      ; Bytes per cluster
BytesPerFrs         dd   ?      ; Bytes per File Record Segment

;
; For floppyless booting, winnt32.exe creates c:\$win_nt$.~bt\bootsec.dat and
; places an entry in boot.ini for it (the boot selection says something
; like "Windows NT Setup or Upgrade"). When that is selected, the boot loader
; loads 16 sectors worth of data from bootsect.dat into d000 (which is where
; the first sector of this code would have loaded it) and jumps into it at
; a known location of 256h. That was correct in earlier versions of NT
; but is not correct now because the 4 fields below were added to this sector.
;
; Note that 0000 is "add [bx+si],al" which because of the way the boot loader
; is written happens to be a benign add of 0 to something in segment 7c0,
; which doesn't seem to hose anything but is still somewhat random.
;
; We code in a jump here so as this new code proliferates we get this
; cleaned up.
;
        .errnz  $-_ntfsboot ne 256h
SectorsPerFrs label dword       ; Sectors per File Record Segment
                    jmp short mainboot
                    nop
                    nop
        .errnz  $-_ntfsboot ne 25ah

MftLcnFrs               dd  ?   ; Offset scratch FRS buffer for LookupMftLcn
BytesPerIndexBlock      dd  ?   ; Bytes per index alloc block in root index
ClustersPerIndexBlock   dd  ?   ; Clusters per index alloc block in root index
SectorsPerIndexBlock    dd  ?   ; Sectors per index block in root index

.386

SAVE_ALL    macro

    push    es
    push    ds
    pushad

endm

RESTORE_ALL macro

    popad
    nop
    pop     ds
    pop     es

endm


;****************************************************************************
;
; mainboot - entry point after 16 boot sectors have been read in
;
;
mainboot proc   far

;       Get the new ds and the new stack.  Note that ss is zero.
;
        mov     ax, cs                  ; Set DS to CS
        mov     ds, ax

        shl     ax, 4                   ; convert to an offset.
        cli
        mov     sp, ax                  ; load new stack, just before boot code.
        sti

IFDEF NEC_98
;
;       cl    = DA/UA Booted from
;       dx:bx = HiddenSectors
;       si    = Partition information
;
        mov     al, cl
        mov     DriveNumber, al         ; Save DriveNumber
        mov     HiddenSectors.lsw, bx   ;
        mov     HiddenSectors.msw, dx   ;
        push    si                      ;

; Boot is from hard disk.
; Our BPB tells us BytesPerSector, but it is a logical value
; that may differ from the physical value.
; We need SectorShiftFactor that is used to convert logical sector address
; to phisical sector address.
ifdef NEC_98
;        mov     SectorShiftFactor, 1
else
        mov     ah, 84h                 ; ROM BIOS sense command
        xor     bx, bx                  ; initialize bx to 0
        int     1Bh                     ;
        jc      Flg21

        test    bx, bx                  ; physical sector length returned ?
        jnz     Flg22                   ; if not,
Flg21:
        mov     bx, 256                 ;   we assume 256 bytes per sector
Flg22:
        mov     ax, BytesPerSector      ; BytesPerSector
        xor     dx, dx
        div     bx
        mov     SectorShiftFactor,ax
endif
else
;
; Reinitialize xint13-related variables
;
        call    Int13SecCnt             ; determine range of regular int13
endif

;       Set up the FRS buffers.  The MFT buffer is in a fixed
;       location, and the other three come right after it.  The
;       buffer for index allocation blocks comes after that.
;

;       Compute the useful constants associated with the volume
;
        movzx   eax, BytesPerSector     ; eax = Bytes per Sector
        movzx   ebx, SectorsPerCluster  ; ebx = Sectors Per Cluster
        mul     ebx                     ; eax = Bytes per Cluster
        mov     BytesPerCluster, eax

        mov     ecx, ClustersPerFrs     ; ecx = clusters per frs
        cmp     cl, 0                   ; is ClustersPerFrs less than zero?
        jg      mainboot$1

;       If the ClustersPerFrs field is negative, we calculate the number
;       of bytes per FRS by negating the value and using that as a shif count.
;

        neg     cl
        mov     eax, 1
        shl     eax, cl                 ; eax = bytes per frs
        jmp     mainboot$2

mainboot$1:

;       Otherwise if ClustersPerFrs was positive, we multiply by bytes
;       per cluster.

        mov     eax, BytesPerCluster
        mul     ecx                     ; eax = bytes per frs

mainboot$2:

        mov     BytesPerFrs, eax
        movzx   ebx, BytesPerSector
        xor     edx, edx                ; zero high part of dividend
        div     ebx                     ; eax = sectors per frs
        mov     SectorsPerFrs, eax


;       Set up the MFT FRS's---this will read all the $DATA attribute
;       records for the MFT.
;

        call    SetupMft

;       Set up the remaining FRS buffers.  The RootIndex FRS comes
;       directly after the last MFT FRS, followed by the NTLdr FRS
;       and the Index Block buffer.
;
        mov     ecx, NextBuffer
        mov     RootIndexFrs, ecx

        add     ecx, BytesPerFrs            ; AllocationFrs may be different
        mov     AllocationIndexFrs, ecx     ; from RootIndexFrs - KPeery

        add     ecx, BytesPerFrs            ; BitmapFrs may be different
        mov     BitmapIndexFrs, ecx         ; from RootIndexFrs - KPeery

        add     ecx, BytesPerFrs
        mov     NtldrFrs, ecx

        add     ecx, BytesPerFrs
        mov     IndexBlockBuffer, ecx

;
;       Read the root index, allocation index and bitmap FRS's and locate
;       the interesting attributes.
;

        mov     eax, $INDEX_ROOT
        mov     ecx, RootIndexFrs
        call    LoadIndexFrs

        or      eax, eax

        jz      BootErr$he

        mov     IndexRoot, eax          ; offset in Frs buffer

        mov     eax, $INDEX_ALLOCATION  ; Attribute type code
        mov     ecx, AllocationIndexFrs ; FRS to search
        call    LoadIndexFrs

        mov     IndexAllocation, eax

        mov     eax, $BITMAP            ; Attribute type code
        mov     ecx, BitmapIndexFrs     ; FRS to search
        call    LoadIndexFrs

        mov     IndexBitmap, eax

;       Consistency check: the index root must exist, and it
;       must be resident.
;
        mov     eax, IndexRoot
        or      eax, eax

        jz      BootErr$he

        cmp     [eax].ATTR_FormCode, RESIDENT_FORM

        jne     BootErr$he


;       Determine the size of the index allocation buffer based
;       on information in the $INDEX_ROOT attribute.  The index
;       bitmap buffer comes immediately after the index block buffer.
;
;       eax -> $INDEX_ROOT attribute record
;
        lea     edx, [eax].ATTR_FormUnion   ; edx -> resident info
        add     ax, [edx].RES_ValueOffset   ; eax -> value of $INDEX_ROOT

        movzx   ecx, [eax].IR_ClustersPerBuffer
        mov     ClustersPerIndexBlock, ecx

        mov     ecx, [eax].IR_BytesPerBuffer
        mov     BytesPerIndexBlock, ecx

        mov     eax, BytesPerIndexBlock
        movzx   ecx, BytesPerSector
        xor     edx, edx
        div     ecx                     ; eax = sectors per index block
        mov     SectorsPerIndexBlock, eax

        mov     eax, IndexBlockBuffer
        add     eax, BytesPerIndexBlock
        mov     IndexBitmapBuffer, eax

;       Next consistency check: if the $INDEX_ALLOCATION attribute
;       exists, the $INDEX_BITMAP attribute must also exist.
;
        cmp     IndexAllocation, 0
        je      mainboot30

        cmp     IndexBitmap, 0          ; since IndexAllocation exists, the

        je      BootErr$he              ;  bitmap must exist, too.

;       Since the bitmap exists, we need to read it into the bitmap
;       buffer.  If it's resident, we can just copy the data.
;

        mov     ebx, IndexBitmap        ; ebx -> index bitmap attribute
        push    ds
        pop     es
        mov     edi, IndexBitmapBuffer  ; es:edi -> index bitmap buffer

        call    ReadWholeAttribute

mainboot30:
;
;       OK, we've got the index-related attributes.
;
        movzx   ecx, ntldr_name_length  ; ecx = name length in characters
        mov     eax, offset ntldr_name  ; eax -> name

        call    FindFile

        or      eax, eax
        jz      BootErr$fnf

;       Read the FRS for NTLDR and find its data attribute.
;
;       eax -> Index Entry for NTLDR.
;
        mov     eax, [eax].IE_FileReference.REF_LowPart

        push    ds
        pop     es              ; es:edi = target buffer
        mov     edi, NtldrFrs

        call    ReadFrs

        mov     eax, NtldrFrs   ; pointer to FRS
        mov     ebx, $DATA      ; requested attribute type
        mov     ecx, 0          ; attribute name length in characters
        mov     edx, 0          ; attribute name (NULL if none)

        call    LocateAttributeRecord

;       eax -> $DATA attribute for NTLDR
;
        or      eax, eax        ; if eax is zero, attribute not found.
        jnz     mainboot$FoundData

;
;       The ntldr $DATA segment is fragmented.  Search the attribute list
;       for the $DATA member.  And load it from there.
;
        mov     ecx, $DATA             ; Attribute type code
        mov     eax, NtldrFrs          ; FRS to search

        call    SearchAttrList         ; search attribute list for FRN
                                       ; of specified ($DATA)

        or      eax, eax               ; if eax is zero, attribute not found.
        jz      BootErr$fnf

;
;       We found the FRN of the $DATA attribute; load that into memory.
;
        push    ds
        pop     es                     ; es:edi = target buffer
        mov     edi, NtldrFrs

        call    ReadFrs

;
;       Determine the beginning offset of the $DATA in the FRS
;
        mov     eax, NtldrFrs   ; pointer to FRS
        mov     ebx, $DATA      ; requested attribute type
        mov     ecx, 0          ; attribute name length in characters
        mov     edx, 0          ; attribute name (NULL if none)

        call    LocateAttributeRecord

;       eax -> $DATA attribute for NTLDR
;
        or      eax, eax        ; if eax is zero, attribute not found.
        jz      BootErr$fnf

mainboot$FoundData:

;       Get the attribute record header flags, and make sure none of the
;       `compressed' bits are set

        movzx   ebx, [eax].ATTR_Flags
        and     ebx, ATTRIBUTE_FLAG_COMPRESSION_MASK
        jnz     BootErr$ntc

        mov     ebx, eax        ; ebx -> $DATA attribute for NTLDR

        push    LdrSeg
        pop     es              ; es = segment addres to read into
        sub     edi, edi        ; es:edi = buffer address

        call    ReadWholeAttribute

;
; We've loaded NTLDR--jump to it.
;
; Before we go to NTLDR, set up the registers the way it wants them:
;       DL = INT 13 drive number we booted from
;
        mov     dl, DriveNumber
        mov     ax,1000
        mov     es, ax                  ; we don't really need this
        lea     si, BPB
        sub     ax,ax
IFDEF NEC_98
        pop     bp
endif
        push    LdrSeg
        push    ax
        retf                            ; "return" to NTLDR.

mainboot endp

.386
;****************************************************************************
;
;   ReadClusters - Reads a run of clusters from the disk.
;
;   ENTRY:  eax == LCN to read
;           edx == clusters to read
;           es:edi -> Target buffer
;
;   USES:   none (preserves all registers)
;
ReadClusters proc near

    SAVE_ALL

    mov     ebx, edx                ; ebx = clusters to read.
    movzx   ecx, SectorsPerCluster  ; ecx = cluster factor

    mul     ecx                 ; Convert LCN to sectors (wipes out edx!)
    mov     SectorBase, eax     ; Store starting sector in SectorBase

    mov     eax, ebx            ; eax = number of clusters
    mul     ecx                 ; Convert EAX to sectors (wipes out edx!)
    mov     SectorCount, ax     ; Store number of sectors in SectorCount

;
;   Note that ReadClusters gets its target buffer in es:edi but calls
;   the ReadSectors worker function that takes a target in es:bx--we need
;   to normalize es:edi so that we don't overflow bx.
;
    mov     bx, di
    and     bx, 0Fh
    mov     ax, es
    shr     edi, 4
    add     ax, di              ; ax:bx -> target buffer

    push    ax
    pop     es                  ; es:bx -> target buffer

    call    ReadSectors

    RESTORE_ALL
    ret

ReadClusters endp

;
;****************************************************************************
;
;   LocateAttributeRecord   --  Find an attribute record in an FRS.
;
;   ENTRY:  EAX -- pointer to FRS
;           EBX -- desired attribute type code
;           ECX -- length of attribute name in characters
;           EDX -- pointer to attribute name
;
;   EXIT:   EAX points at attribute record (0 indicates not found)
;
;   USES:   All
;
LocateAttributeRecord proc near

; get the first attribute record.
;
        add     ax, word ptr[eax].FRS_FirstAttribute

;       eax -> next attribute record to investigate.
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;
lar10:
        cmp     [eax].ATTR_TypeCode, 0ffffffffh
        je      lar99

        cmp     dword ptr[eax].ATTR_TypeCode, ebx
        jne     lar80

;       this record is a potential match.  Compare the names:
;
;       eax -> candidate record
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;
        or      ecx, ecx    ; Did the caller pass in a name length?
        jnz     lar20

;       We want an attribute with no name--the current record is
;       a match if and only if it has no name.
;
        cmp     [eax].ATTR_NameLength, 0
        jne     lar80       ; Not a match.

;       It's a match, and eax is set up correctly, so return.
;
        ret

;       We want a named attribute.
;
;       eax -> candidate record
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;
lar20:
        cmp     cl, [eax].ATTR_NameLength
        jne     lar80       ; Not a match.

;       Convert name in current record to uppercase.
;
        mov     esi, eax
        add     si, word ptr[eax].ATTR_NameOffset

        call    UpcaseName

;       eax -> candidate record
;       ebx == desired type
;       ecx == name length
;       edx -> pointer to name
;       esi -> Name in current record (upcased)
;
        push    ecx         ; save cx

        push    ds          ; Copy data segment into es
        pop     es
        mov     edi, edx    ; note that esi is already set up.

        repe cmpsw          ; zero flag is set if equal

        pop     ecx         ; restore cx

        jnz     lar80       ; not a match

;       eax points at a matching record.
;
        ret

;
;   This record doesn't match; go on to the next.
;
;       eax -> rejected candidate attribute record
;       ebx == desired type
;       ecx == Name length
;       edx -> desired name
;
lar80:  cmp     [eax].ATTR_RecordLength, 0  ; if the record length is zero
        je      lar99                       ; the FRS is corrupt.

        add     eax, [eax].ATTR_RecordLength; Go to next record
        jmp     lar10                       ; and try again

;       Didn't find it.
;
lar99:  sub     eax, eax
        ret

LocateAttributeRecord endp

;****************************************************************************
;
;   LocateIndexEntry   --  Find an index entry in a file name index
;
;   ENTRY:  EAX -> pointer to index header
;           EBX -> file name to find
;           ECX == length of file name in characters
;
;   EXIT:   EAX points at index entry.  NULL to indicate failure.
;
;   USES:   All
;
LocateIndexEntry proc near

;       Convert the input name to upper-case
;

        mov     esi, ebx
        call    UpcaseName

ifdef DEBUG
        call    PrintName
        call    Debug2
endif ; DEBUG

        add     eax, [eax].IH_FirstIndexEntry

;       EAX -> current entry
;       EBX -> file name to find
;       ECX == length of file name in characters
;
lie10:  test    [eax].IE_Flags, INDEX_ENTRY_END ; Is it the end entry?
        jnz     lie99

        lea     edx, [eax].IE_Value         ; edx -> FILE_NAME attribute value

ifdef DEBUG
;       DEBUG CODE -- list file names as they are examined

        SAVE_ALL

        call    Debug3
        movzx   ecx, [edx].FN_FileNameLength    ; ecx = chars in name
        lea     esi, [edx].FN_FileName          ; esi -> name
        call    PrintName

        RESTORE_ALL
endif ; DEBUG

;       EAX -> current entry
;       EBX -> file name to find
;       ECX == length of file name in characters
;       EDX -> FILE_NAME attribute

        cmp     cl, [edx].FN_FileNameLength ; Is name the right length?
        jne     lie80

        lea     esi, [edx].FN_FileName      ; Get name from FILE_NAME structure

        call    UpcaseName

        push    ecx         ; save ecx

        push    ds
        pop     es          ; copy data segment into es for cmpsw
        mov     edi, ebx    ; edi->search name (esi already set up)
        repe    cmpsw       ; zero flag is set if they're equal

        pop     ecx         ; restore ecx

        jnz     lie80

;       the current entry matches the search name, and eax points at it.
;
        ret

;       The current entry is not a match--get the next one.
;           EAX -> current entry
;           EBX -> file name to find
;           ECX == length of file name in characters
;
lie80:  cmp     [eax].IE_Length, 0      ; If the entry length is zero
        je      lie99                   ; then the index block is corrupt.

        add     ax, [eax].IE_Length     ; Get the next entry.

        jmp     lie10


;   Name not found in this block.  Set eax to zero and return
;
lie99:  xor     eax, eax
        ret

LocateIndexEntry endp

;****************************************************************************
;
;   ReadWholeAttribute - Read an entire attribute value
;
;   ENTRY:  ebx -> attribute
;           es:edi -> target buffer
;
;   USES:   ALL
;
ReadWholeAttribute proc near

        cmp     [ebx].ATTR_FormCode, RESIDENT_FORM
        jne      rwa10

;       The attribute is resident.
;       ebx -> attribute
;       es:edi -> target buffer
;

        SAVE_ALL

        lea     edx, [ebx].ATTR_FormUnion   ; edx -> resident form info
        mov     ecx, [edx].RES_ValueLength  ; ecx = bytes in value
        mov     esi, ebx                    ; esi -> attribute
        add     si, [edx].RES_ValueOffset   ; esi -> attribute value

        rep     movsb                       ; copy bytes from value to buffer

        RESTORE_ALL

        ret                                 ; That's all!

rwa10:
;
;       The attribute type is non-resident.  Just call
;       ReadNonresidentAttribute starting at VCN 0 and
;       asking for the whole thing.
;
;       ebx -> attribute
;       es:edi -> target buffer
;
        lea     edx, [ebx].ATTR_FormUnion   ; edx -> nonresident form info
        mov     ecx, [edx].NONRES_HighestVcn.LowPart; ecx = HighestVcn
        inc     ecx                         ; ecx = clusters in attribute

        sub     eax, eax                    ; eax = 0 (first VCN to read)

        call    ReadNonresidentAttribute

        ret

ReadWholeAttribute endp

;****************************************************************************
;
;   ReadNonresidentAttribute - Read clusters from a nonresident attribute
;
;   ENTRY:  EAX == First VCN to read
;           EBX -> Attribute
;           ECX == Number of clusters to read
;           ES:EDI == Target of read
;
;   EXIT:   None.
;
;   USES:   None (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadNonresidentAttribute proc near

        SAVE_ALL

        cmp     [ebx].ATTR_FormCode, NONRESIDENT_FORM
        je      ReadNR10

;       This attribute is not resident--the disk is corrupt.

        jmp     BootErr$he

ReadNR10:
;       eax == Next VCN to read
;       ebx -> Attribute
;       ecx -> Remaining clusters to read
;       es:edi -> Target of read
;

        cmp     ecx, 0
        jne     ReadNR20

;       Nothing left to read--return success.
;
        RESTORE_ALL
        ret

ReadNR20:
        push    ebx ; pointer to attribute
        push    eax ; Current VCN

        push    ecx
        push    edi
        push    es

        call    ComputeLcn  ; eax = LCN to read, ecx = run length
        mov     edx, ecx    ; edx = remaining run length

        pop     es
        pop     edi
        pop     ecx


;       eax == LCN to read
;       ecx == remaining clusters to read
;       edx == remaining clusters in current run
;       es:edi == Target of read
;       TOS == Current VCN
;       TOS + 4 == pointer to attribute
;
        cmp     ecx, edx
        jge     ReadNR30

;       Run length is greater than remaining request; only read
;       remaining request.
;
        mov     edx, ecx    ; edx = Remaining request

ReadNR30:
;       eax == LCN to read
;       ecx == remaining clusters to read
;       edx == clusters to read in current run
;       es:edi == Target of read
;       TOS == Current VCN
;       TOS +  == pointer to attribute
;

        call    ReadClusters

        sub     ecx, edx            ; Decrement clusters remaining in request
        mov     ebx, edx            ; ebx = clusters read

        mov     eax, edx            ; eax = clusters read
        movzx   edx, SectorsPerCluster
        mul     edx                 ; eax = sectors read (wipes out edx!)
        movzx   edx, BytesPerSector
        mul     edx                 ; eax = bytes read (wipes out edx!)

        add     edi, eax            ; Update target of read

        pop     eax                 ; eax = previous VCN
        add     eax, ebx            ; update VCN to read

        pop     ebx                 ; ebx -> attribute
        jmp     ReadNR10


ReadNonresidentAttribute endp

;****************************************************************************
;
;   ReadIndexBlockSectors - Read sectors from an index allocation attribute
;
;   ENTRY:  EAX == First VBN to read
;           EBX -> Attribute
;           ECX == Number of sectors to read
;           ES:EDI == Target of read
;
;   EXIT:   None.
;
;   USES:   None (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadIndexBlockSectors proc near

        SAVE_ALL

        cmp     [ebx].ATTR_FormCode, NONRESIDENT_FORM
        je      ReadIBS_10

;       This attribute is resident--the disk is corrupt.

        jmp     BootErr$he

ReadIBS_10:
;       eax == Next VBN to read
;       ebx -> Attribute
;       ecx -> Remaining sectors to read
;       es:edi -> Target of read
;

        cmp     ecx, 0
        jne     ReadIBS_20

;       Nothing left to read--return success.
;


        RESTORE_ALL
        ret

ReadIBS_20:
        push    ebx ; pointer to attribute
        push    eax ; Current VBN

        push    ecx
        push    edi
        push    es

        ; Convert eax from a VBN back to a VCN by dividing by SectorsPerCluster.
        ; The remainder of this division is the sector offset in the cluster we
        ; want.  Then use the mapping information to get the LCN for this VCN,
        ; then multiply to get back to LBN.
        ;

        push    ecx         ; save remaining sectors in request

        xor     edx, edx    ; zero high part of dividend
        movzx   ecx, SectorsPerCluster
        div     ecx         ; edx = remainder
        push    edx         ; save remainder

        call    ComputeLcn  ; eax = LCN to read, ecx = remaining run length

        movzx   ebx, SectorsPerCluster
        mul     ebx         ; eax = LBN of cluster, edx = 0
        pop     edx         ; edx = remainder
        add     eax, edx    ; eax = LBN we want
        push    eax         ; save LBN

        movzx   eax, SectorsPerCluster
        mul     ecx         ; eax = remaining run length in sectors, edx = 0
        mov     edx, eax    ; edx = remaining run length

        pop     eax         ; eax = LBN
        pop     ecx         ; ecx = remaining sectors in request

        pop     es
        pop     edi
        pop     ecx


;       eax == LBN to read
;       ecx == remaining sectors to read
;       edx == remaining sectors in current run
;       es:edi == Target of read
;       TOS == Current VCN
;       TOS + 4 == pointer to attribute
;
        cmp     ecx, edx
        jge     ReadIBS_30

;       Run length is greater than remaining request; only read
;       remaining request.
;
        mov     edx, ecx    ; edx = Remaining request

ReadIBS_30:
;       eax == LBN to read
;       ecx == remaining sectors to read
;       edx == sectors to read in current run
;       es:edi == Target of read
;       TOS == Current VCN
;       TOS +  == pointer to attribute
;

        mov     SectorBase, eax
        mov     SectorCount, dx

;       We have a pointer to the target buffer in es:edi, but we want that
;       in es:bx for ReadSectors.
;

        SAVE_ALL

        mov     bx, di
        and     bx, 0Fh
        mov     ax, es
        shr     edi, 4
        add     ax, di              ; ax:bx -> target buffer

        push    ax
        pop     es                  ; es:bx -> target buffer

        call    ReadSectors

        RESTORE_ALL

        sub     ecx, edx            ; Decrement sectors remaining in request
        mov     ebx, edx            ; ebx = sectors read

        mov     eax, edx            ; eax = sectors read
        movzx   edx, BytesPerSector
        mul     edx                 ; eax = bytes read (wipes out edx!)

        add     edi, eax            ; Update target of read

        pop     eax                 ; eax = previous VBN
        add     eax, ebx            ; update VBN to read

        pop     ebx                 ; ebx -> attribute
        jmp     ReadIBS_10


ReadIndexBlockSectors endp


;****************************************************************************
;
;   MultiSectorFixup - fixup a structure read off the disk
;                      to reflect Update Sequence Array.
;
;   ENTRY:  ES:EDI = Target buffer
;
;   USES:   none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
;   Note: ES:EDI must point at a structure which is protected
;         by an update sequence array, and which begins with
;         a multi-sector-header structure.
;
MultiSectorFixup proc near

    SAVE_ALL

    movzx   ebx, es:[edi].MSH_UpdateArrayOfs    ; ebx = update array offset
    movzx   ecx, es:[edi].MSH_UpdateArraySize   ; ecx = update array size

    or      ecx, ecx        ; if the size of the update sequence array

    jz      BootErr$he      ; is zero, this structure is corrupt.

    add     ebx, edi        ; es:ebx -> update sequence array count word
    add     ebx, 2          ; es:ebx -> 1st entry of update array

    add     edi, SEQUENCE_NUMBER_STRIDE - 2 ; es:edi->last word of first chunk
    dec     ecx             ; decrement to reflect count word

MSF10:

;   ecx = number of entries remaining in update sequence array
;   es:ebx -> next entry in update sequence array
;   es:edi -> next target word for update sequence array

    or      ecx, ecx
    jz      MSF30

    mov     ax, word ptr es:[ebx]   ; copy next update sequence array entry
    mov     word ptr es:[edi], ax   ; to next target word

    add     ebx, 2                      ; go on to next entry
    add     edi, SEQUENCE_NUMBER_STRIDE ; go on to next target

    dec     ecx


    jmp     MSF10

MSF30:

    RESTORE_ALL

    ret

MultiSectorFixup endp

;****************************************************************************
;
;   SetupMft - Reads MFT File Record Segments into the LBN array
;
;   ENTRY:  none.
;
;   EXIT:   NextBuffer is set to the free byte after the last MFT FRS
;           SegmentsInMft is initialized
;
;
SetupMft proc near

        SAVE_ALL

;       Initialize SegmentsInMft and NextBuffer as if the MFT
;       had only one FRS.
;
        mov     eax, 1
        mov     SegmentsInMft, eax

        mov     eax, MftFrs                     ; this is the scratch mft buffer
        add     eax, BytesPerFrs
        mov     MftLcnFrs,eax                   ; this is the scratch mft buffer for lookup
        add     eax, BytesPerFrs
        mov     NextBuffer, eax


;       Read FRS 0 into the first MFT FRS buffer, being sure
;       to resolve the Update Sequence Array.  Remember the physical
;       location in the Lbn array.
;

        mov     eax, MftStartLcn.LowPart
        movzx   ebx, SectorsPerCluster
        mul     ebx                             ; eax = mft starting sector

        mov     ebx, NextBuffer                 ; Store this location in the Lbn array
        mov     [bx], eax
        mov     SectorBase, eax                 ; SectorBase = mft starting sector for read
        add     bx, 4
        mov     eax, SectorsPerFrs
        mov     [bx], eax                       ; Store the sector count in the Lcn array
        mov     SectorCount, ax                 ; SectorCount = SectorsPerFrs
        add     bx, 4
        mov     NextBuffer, ebx                 ; Remember the next Lbn array location

        mov     ebx, MftFrs                     ; Read the sectors into the MftFrs scratch buffer

        push    ds
        pop     es

        call    ReadSectors
        mov     edi, ebx                        ; es:edi = buffer

        call    MultiSectorFixup

;       Determine whether the MFT has an Attribute List attribute

        mov     eax, MftFrs
        mov     ebx, $ATTRIBUTE_LIST
        mov     ecx, 0
        mov     edx, 0

        call    LocateAttributeRecord

        or      eax, eax        ; If there's no Attribute list,
        jz      SetupMft99      ;    we're done!

;       Read the attribute list.
;       eax -> attribute list attribute
;
        mov     ebx, eax        ; ebx -> attribute list attribute
        push    ds
        pop     es              ; copy ds into es
        mov     edi, AttrList   ; ds:edi->attribute list buffer

        call    ReadWholeAttribute

        mov     ebx, AttrList   ; ebx -> first attribute list entry

;       Now, traverse the attribute list looking for the first
;       entry for the $DATA type.  We know it must have at least
;       one.
;
;       ebx -> first attribute list entry
;

SetupMft10:
        cmp     [bx].ATTRLIST_TypeCode, $DATA
        je      SetupMft30

        add     bx,[bx].ATTRLIST_Length
        jmp     SetupMft10


SetupMft20:
;       Scan forward through the attribute list entries for the
;       $DATA attribute, reading each referenced FRS.  Note that
;       there will be at least one non-$DATA entry after the entries
;       for the $DATA attribute, since there's a $BITMAP.
;
;       ebx -> Next attribute list entry
;       NextBuffer    -> Target for next mapping information
;       MftFrs        -> Target of next read
;       SegmentsInMft == number of MFT segments read so far
;

;       Find the physical sector and sector count for the runs for this
;       file record (max 2 runs).  The mapping for this must already
;       be in a file record already visited.  Find the Vcn and cluster
;       offset for this FRS.  Use LookupMftLcn to find the Lcn.

        push    ebx                 ; Save the current position in the attribute list

;       Convert from Frs to sectors, then to Vcn

        mov     eax, [bx].ATTRLIST_SegmentReference.REF_LowPart
        mul     SectorsPerFrs
        push    eax                 ; Remember the VBN
        xor     edx, edx
        movzx   ebx, SectorsPerCluster
        div     ebx                 ; eax = VCN
        push    edx                 ; save remainder, this is cluster offset

        call    ComputeMftLcn       ; eax = LCN

        or      eax, eax            ; LCN equal to zero?

        jz      BootErr$he          ; zero is not a possible LCN

        mov     ecx, SectorsPerFrs  ; ecx = Number of sectors remaining for this file record

;       Change the LCN back into an LBN and add the remainder back in to get
;       the sector we want to read.

        movzx   ebx, SectorsPerCluster
        mul     ebx                 ; eax = cluster first LBN
        pop     edx                 ; edx = sector remainder
        add     eax, edx            ; eax = desired LBN

;       Store this in the current Lcn array slot

        mov     ebx, NextBuffer
        mov     [bx], eax           ; Store the starting sector
        add     bx, 4
        movzx   eax, SectorsPerCluster
        sub     eax, edx

        cmp     eax, ecx            ; Check if we have too many sectors
        jbe     SetupMft60
        mov     eax, ecx            ; Limit ourselves to the sectors remaining
SetupMft60:
        mov     [bx], eax           ; Store the sector count

;       If we have a complete file record skip to process the attribute entry

SetupMft70:
        sub     ecx, eax            ; Subtract these sectors from remaining sectors
        pop     edx                 ; Get the previous starting VBN (restores stack also)

        jz      SetupMft50

;       This may be a split file record.  Go ahead and get the next piece.

        add     eax, edx            ; Add the sector count for the last run to the start Vbn for the run
                                    ; This is the next Vbn to read
        push    eax                 ; Save the Vbn

        xor     edx, edx            ; Convert to Vcn, there should be no remainder this time
        movzx   ebx, SectorsPerCluster
        div     ebx                 ; eax = VCN

        push    ecx                 ; Save the remaining sectors
        call    ComputeMftLcn       ; eax = LCN
        pop     ecx                 ; Restore the remaining sectors

        or      eax, eax            ; LCN equal to zero?
        jz      BootErr$he          ; zero is not a possible LCN

;       Change the LCN back into a LBN to get the starting sector we want to read.

        movzx   ebx, SectorsPerCluster
        mul     ebx                 ; eax = cluster first LBN

;       If this sector is the contiguous with the other half of the run
;       make it appear to be single longer run.

        mov     ebx, NextBuffer     ; Recover the last run
        mov     edx, [bx]
        add     bx, 4
        add     edx, [bx]           ; This is the next potential LBN

        cmp     edx, eax            ; Check if we are at the contiguous LBN
        jne     SetupMft80

;       Append this to the previous run.
        
        movzx   eax, SectorsPerCluster
        cmp     eax, ecx            ; Check if have more sectors than we need
        jbe     SetupMft90
        mov     eax, ecx
SetupMft90:

        add     [bx], eax
        jmp     SetupMft70          ; Loop to see if there more work to do

;       This is multiple runs.  Update the next entry.

SetupMft80:
        add     bx, 4
        mov     NextBuffer, ebx    ; advance our NextBuffer pointer

        mov     [bx], eax          ; fill in the next run start sector
        add     bx, 4

        movzx   eax, SectorsPerCluster
        cmp     eax, ecx            ; Check if have more sectors than we need
        jbe     SetupMft100
        mov     eax, ecx
SetupMft100:
        mov     [bx], eax          ; and count
        jmp     SetupMft70         ; Loop to see if there is more work to do

SetupMft50:

;       Advance the count of Frs segments and the NextBuffer pointer

        add     bx, 4
        inc     SegmentsInMft
        mov     NextBuffer, ebx

        pop     ebx

;       Go on to the next attribute list entry

SetupMft30:
        add     bx,[bx].ATTRLIST_Length
        cmp     [bx].ATTRLIST_TypeCode, $DATA
        je      SetupMft20

SetupMft99:

        RESTORE_ALL
        ret

SetupMft endp

;****************************************************************************
;
;   ComputeMftLcn   --  Computes the LCN for a cluster of the MFT
;
;
;   ENTRY:  EAX == VCN
;
;   EXIT:   EAX == LCN
;
;   USES:   ALL
;
ComputeMftLcn proc near

        mov     edx, eax                ; edx = VCN

        mov     ecx, SegmentsInMft      ; ecx = # of FRS's to search

        mov     esi,MftLcnFrs
        add     esi,BytesPerFrs         ; si -> FRS LBN list

MftLcn10:
;       ECX == number of remaining FRS's to search
;       EDX == VCN
;       EBX == Buffer to read into
;       ESI == LBN array
;       EDI == Number of sectors to read
;
        push    edx                     ; save VCN
        push    ecx                     ; save MFT segment count
        push    edx                     ; save VCN again

;       Read the sectors for the given FRS

        mov     ebx,MftLcnFrs
        mov     edi,SectorsPerFrs

;       Read these sectors

MftLcn40:
        mov     eax,[si]                ; Get the start sector and sector count
        mov     SectorBase,eax
        add     si,4
        mov     eax,[si]
        mov     SectorCount,ax
        add     si,4

        push    ds
        pop     es

        call    ReadSectors

;       Check if we have more data to read

        sub     edi, eax
        je      MftLcn30

;       Read the next run

        mul     BytesPerSector          ; move forward in the buffer, results in ax:dx
        add     bx,ax
        jmp     MftLcn40

MftLcn30:

;       Do the multi sector fixup

        mov     edi,MftLcnFrs
        push    ds
        pop     es

        call    MultiSectorFixup

        mov     eax, MftLcnFrs
        mov     ebx, $DATA
        mov     ecx, 0
        mov     edx, ecx

        call    LocateAttributeRecord

;       EAX -> $DATA attribute
;       TOS == VCN
;       TOS + 4 == number of remaining FRS's to search
;       TOS + 8 -> FRS being searched
;       TOS +12 == VCN

        or      eax, eax

        jz      BootErr$he  ; No $DATA attribute in this FRS!

        mov     ebx, eax    ; ebx -> attribute
        pop     eax         ; eax = VCN

;       EAX == VCN
;       EBX -> $DATA attribute
;       TOS number of remaining FRS's to search
;       TOS + 4 == FRS being searched
;       TOS + 8 == VCN

        push    esi
        call    ComputeLcn
        pop     esi

        or      eax, eax
        jz      MftLcn20

;       Found our LCN.  Clean up the stack and return.
;
;       EAX == LCN
;       TOS number of remaining FRS's to search
;       TOS + 4 == FRS being searched
;       TOS + 8 == VCN
;
        pop     ebx
        pop     ebx     ; clean up the stack

        ret

MftLcn20:
;
;       Didn't find the VCN in this FRS; try the next one.
;
;       TOS number of remaining FRS's to search
;       TOS + 4 -> FRS being searched
;       TOS + 8 == VCN
;
        pop     ecx     ; ecx = number of FRS's remaining, including current
        pop     edx     ; edx = VCN

        loop    MftLcn10            ; decrement cx and try next FRS

;       This VCN was not found.
;
        xor     eax, eax
        ret


ComputeMftLcn endp

;****************************************************************************
;
;   ReadMftSectors - Read sectors from the MFT
;
;   ENTRY:  EAX == starting VBN
;           ECX == number of sectors to read
;           ES:EDI == Target buffer
;
;   USES:   none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadMftSectors proc near

    SAVE_ALL

RMS$Again:

    push    eax                     ; save starting VBN
    push    ecx                     ; save sector count

;   Divide the VBN by SectorsPerCluster to get the VCN

    xor     edx, edx                ; zero high part of dividend
    movzx   ebx, SectorsPerCluster
    div     ebx                     ; eax = VCN
    push    edx                     ; save remainder
    push    edi                     ; save the target buffer

    call    ComputeMftLcn           ; eax = LCN
    pop     edi                     ; recover the buffer

    or      eax, eax                ; LCN equal to zero?

    jz      BootErr$he              ; zero is not a possible LCN

;   Change the LCN back into a LBN and add the remainder back in to get
;   the sector we want to read, which goes into SectorBase.
;

    movzx   ebx, SectorsPerCluster
    mul     ebx                     ; eax = cluster first LBN
    pop     edx                     ; edx = sector remainder
    add     eax, edx                ; eax = desired LBN

    mov     SectorBase, eax


        
;
;   Figure out how many sectors to read this time; we never attempt
;   to read more than one cluster at a time.
;

    pop     ecx                     ; ecx = sectors to read

    movzx   ebx, SectorsPerCluster
    cmp     ecx,ebx
    jle     RMS10

;
;   Read only a single cluster at a time, to avoid problems with fragmented
;   runs in the mft.
;

    mov     SectorCount, bx         ; this time read 1 cluster
    sub     ecx, ebx                ; ecx = sectors remaining to read

    pop     eax                     ; eax = VBN
    add     eax, ebx                ; VBN += sectors this read


    push    eax                     ; save next VBN
    push    ecx                     ; save remaining sector count

    jmp     RMS20

RMS10:

    pop     eax                     ; eax = VBN
    add     eax, ecx                ; VBN += sectors this read
    push    eax                     ; save next VBN

    mov     SectorCount, cx
    mov     ecx, 0
    push    ecx                     ; save remaining sector count (0)

RMS20:


;   The target buffer was passed in es:edi, but we want it in es:bx.
;   Do the conversion.
;

    push    es                      ; save buffer pointer
    push    edi

    mov     bx, di
    and     bx, 0Fh
    mov     ax, es
    shr     edi, 4
    add     ax, di                  ; ax:bx -> target buffer

    push    ax
    pop     es                      ; es:bx -> target buffer

    call    ReadSectors

    pop     edi                     ; restore buffer pointer
    pop     es

    add     edi, BytesPerCluster    ; increment buf ptr by one cluster

    pop     ecx                     ; restore remaining sector count
    pop     eax                     ; restore starting VBN

    cmp     ecx, 0                  ; are we done?
    jg      RMS$Again               ; repeat until desired == 0


    RESTORE_ALL
    ret

ReadMftSectors endp


;****************************************************************************
;
;   ReadFrs - Read an FRS
;
;   ENTRY:  EAX == FRS number
;           ES:EDI == Target buffer
;
;   USES:  none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadFrs proc near

    SAVE_ALL

    mul     SectorsPerFrs       ; eax = sector number in MFT DATA attribute
                                ; (note that mul wipes out edx!)

    mov     ecx, SectorsPerFrs  ; number of sectors to read

    call    ReadMftSectors
    call    MultiSectorFixup

    RESTORE_ALL
    ret

ReadFrs endp

;****************************************************************************
;
;   ReadIndexBlock - read an index block from the root index.
;
;   ENTRY:  EAX == Block number
;
;   USES:  none (preserves all registers with SAVE_ALL/RESTORE_ALL)
;
ReadIndexBlock proc near

    SAVE_ALL

    mul     SectorsPerIndexBlock        ; eax = first VBN to read
                                        ; (note that mul wipes out edx!)
    mov     ebx, IndexAllocation        ; ebx -> $INDEX_ALLOCATION attribute
    mov     ecx, SectorsPerIndexBlock   ; ecx == Sectors to read

    push    ds
    pop     es
    mov     edi, IndexBlockBuffer       ; es:edi -> index block buffer

    call    ReadIndexBlockSectors

    call    MultiSectorFixup

    RESTORE_ALL
    ret

ReadIndexBlock endp

;****************************************************************************
;
;   IsBlockInUse - Checks the index bitmap to see if an index
;                  allocation block is in use.
;
;   ENTRY:  EAX == block number
;
;   EXIT:   Carry flag clear if block is in use
;           Carry flag set   if block is not in use.
;
IsBlockInUse proc near

        push    eax
        push    ebx
        push    ecx

        mov     ebx, IndexBitmapBuffer

        mov     ecx, eax    ; ecx = block number
        shr     eax, 3      ; eax = byte number
        and     ecx, 7      ; ecx = bit number in byte

        add     ebx, eax    ; ebx -> byte to test

        mov     eax, 1
        shl     eax, cl     ; eax = mask

        test    byte ptr[ebx], al

        jz      IBU10

        clc                 ; Block is not in use.
        jmp     IBU20

IBU10:  stc                 ; Block is in use.

IBU20:
        pop     ecx
        pop     ebx
        pop     eax         ; restore registers

        ret

IsBlockInUse endp

;****************************************************************************
;
;   ComputeLcn - Converts a VCN into an LCN
;
;   ENTRY:  EAX -> VCN
;           EBX -> Attribute
;
;   EXIT:   EAX -> LCN  (zero indicates not found)
;           ECX -> Remaining run length
;
;   USES:   ALL.
;
ComputeLcn proc near

        cmp     [ebx].ATTR_FormCode, NONRESIDENT_FORM
        je      clcn10

        sub     eax, eax    ; This is a resident attribute.
        ret

clcn10: lea     esi, [ebx].ATTR_FormUnion   ; esi -> nonresident info of attrib

;       eax -> VCN
;       ebx -> Attribute
;       esi -> Nonresident information of attribute record
;
;       See if the desired VCN is in range.

        mov     edx, [esi].NONRES_HighestVcn.LowPart ; edx = HighestVcn
        cmp     eax, edx
        ja      clcn15      ; VCN is greater than HighestVcn

        mov     edx, [esi].NONRES_LowestVcn.LowPart ; edx = LowestVcn
        cmp     eax, edx
        jae     clcn20

clcn15:
        sub     eax, eax    ; VCN is not in range
        ret

clcn20:
;       eax -> VCN
;       ebx -> Attribute
;       esi -> Nonresident information of attribute record
;       edx -> LowestVcn
;
        add     bx, [esi].NONRES_MappingPairOffset  ; ebx -> mapping pairs
        sub     esi, esi                            ; esi = 0

clcn30:
;       eax == VCN to find
;       ebx -> Current mapping pair count byte
;       edx == Current VCN
;       esi == Current LCN
;
        cmp     byte ptr[ebx], 0    ; if count byte is zero...
        je      clcn99              ;  ... we're done (and didn't find it)

;       Update CurrentLcn
;
        call    LcnFromMappingPair
        add     esi, ecx            ; esi = current lcn for this mapping pair

        call    VcnFromMappingPair

;       eax == VCN to find
;       ebx -> Current mapping pair count byte
;       ecx == DeltaVcn for current mapping pair
;       edx == Current VCN
;       esi == Current LCN
;
        add     ecx, edx            ; ecx = NextVcn

        cmp     eax, ecx            ; If target < NextVcn ...
        jl      clcn80              ;   ... we found the right mapping pair.

;       Go on to next mapping pair.
;
        mov     edx, ecx            ; CurrentVcn = NextVcn

        push    eax

        movzx   ecx, byte ptr[ebx]  ; ecx = count byte
        mov     eax, ecx            ; eax = count byte
        and     eax, 0fh            ; eax = number of vcn bytes
        shr     ecx, 4              ; ecx = number of lcn bytes

        add     ebx, ecx
        add     ebx, eax
        inc     ebx                 ; ebx -> next count byte

        pop     eax
        jmp     clcn30

clcn80:
;       We found the mapping pair we want.
;
;       eax == target VCN
;       ebx -> mapping pair count byte
;       edx == Starting VCN of run
;       ecx == Next VCN (ie. start of next run)
;       esi == starting LCN of run
;
        sub     ecx, eax            ; ecx = remaining run length
        sub     eax, edx            ; eax = offset into run
        add     eax, esi            ; eax = LCN to return

        ret

;       The target VCN is not in this attribute.

clcn99: sub     eax, eax    ; Not found.
        ret


ComputeLcn endp

;****************************************************************************
;
;   VcnFromMappingPair
;
;   ENTRY:  EBX -> Mapping Pair count byte
;
;   EXIT:   ECX == DeltaVcn from mapping pair
;
;   USES:   ECX
;
VcnFromMappingPair proc near

        sub     ecx, ecx            ; ecx = 0
        mov     cl, byte ptr[ebx]   ; ecx = count byte
        and     cl, 0fh             ; ecx = v

        cmp     ecx, 0              ; if ecx is zero, volume is corrupt.
        jne     VFMP5

        sub     ecx, ecx
        ret

VFMP5:
        push    ebx
        push    edx

        add     ebx, ecx            ; ebx -> last byte of compressed vcn

        movsx   edx, byte ptr[ebx]
        dec     ecx
        dec     ebx

;       ebx -> Next byte to add in
;       ecx == Number of bytes remaining
;       edx == Accumulated value
;
VFMP10: cmp     ecx, 0              ; When ecx == 0, we're done.
        je      VFMP20

        shl     edx, 8
        mov     dl, byte ptr[ebx]

        dec     ebx                 ; Back up through bytes to process.
        dec     ecx                 ; One less byte to process.

        jmp     VFMP10

VFMP20:
;       edx == Accumulated value to return

        mov     ecx, edx

        pop     edx
        pop     ebx

        ret

VcnFromMappingPair endp


;****************************************************************************
;
;   LcnFromMappingPair
;
;   ENTRY:  EBX -> Mapping Pair count byte
;
;   EXIT:   ECX == DeltaLcn from mapping pair
;
;   USES:   ECX
;
LcnFromMappingPair proc near

        push    ebx
        push    edx

        sub     edx, edx            ; edx = 0
        mov     dl, byte ptr[ebx]   ; edx = count byte
        and     edx, 0fh            ; edx = v

        sub     ecx, ecx            ; ecx = 0
        mov     cl, byte ptr[ebx]   ; ecx = count byte
        shr     cl, 4               ; ecx = l

        cmp     ecx, 0              ; if ecx is zero, volume is corrupt.
        jne     LFMP5

        sub     ecx, ecx

        pop     edx
        pop     ebx
        ret

LFMP5:
;       ebx -> count byte
;       ecx == l
;       edx == v
;

        add     ebx, edx            ; ebx -> last byte of compressed vcn
        add     ebx, ecx            ; ebx -> last byte of compressed lcn

        movsx   edx, byte ptr[ebx]
        dec     ecx
        dec     ebx

;       ebx -> Next byte to add in
;       ecx == Number of bytes remaining
;       edx == Accumulated value
;
LFMP10: cmp     ecx, 0              ; When ecx == 0, we're done.
        je      LFMP20

        shl     edx, 8
        mov     dl, byte ptr[ebx]

        dec     ebx                 ; Back up through bytes to process.
        dec     ecx                 ; One less byte to process.

        jmp     LFMP10

LFMP20:
;       edx == Accumulated value to return

        mov     ecx, edx

        pop     edx
        pop     ebx

        ret

LcnFromMappingPair endp

;****************************************************************************
;
; UpcaseName - Converts the name of the file to all upper-case
;
;       ENTRY:  ESI -> Name
;               ECX -> Length of name
;
;       USES:   none
;
UpcaseName proc   near


        or      ecx, ecx
        jnz     UN5

        ret

UN5:
        push    ecx
        push    esi

UN10:
        cmp     word ptr[esi], 'a'      ; if it's less than 'a'
        jl      UN20                    ; leave it alone

        cmp     word ptr[esi], 'z'      ; if it's greater than 'z'
        jg      UN20                    ; leave it alone.

        sub     word ptr[esi], 'a'-'A'  ; the letter is lower-case--convert it.
UN20:
        add     esi, 2                  ; move on to next unicode character
        loop    UN10

        pop     esi
        pop     ecx

        ret
UpcaseName endp

;****************************************************************************
;
;   FindFile - Locates the index entry for a file in the root index.
;
;   ENTRY:  EAX -> name to find
;           ECX == length of file name in characters
;
;   EXIT:   EAX -> Index Entry.  NULL to indicate failure.
;
;   USES:   ALL
;
FindFile proc near

        push    eax     ; name address
        push    ecx     ; name length

;       First, search the index root.
;
;       eax -> name to find
;       ecx == name length
;       TOS == name length
;       TOS+4 -> name to find
;
        mov     edx, eax                    ; edx -> name to find
        mov     eax, IndexRoot              ; eax -> &INDEX_ROOT attribute
        lea     ebx, [eax].ATTR_FormUnion   ; ebx -> resident info
        add     ax, [ebx].RES_ValueOffset   ; eax -> Index Root value

        lea     eax, [eax].IR_IndexHeader   ; eax -> Index Header

        mov     ebx, edx                    ; ebx -> name to find

        call    LocateIndexEntry

        or      eax, eax
        jz      FindFile20

;       Found it in the root!  The result is already in eax.
;       Clean up the stack and return.
;
        pop     ecx
        pop     ecx
        ret

FindFile20:
;
;       We didn't find the index entry we want in the root, so we have to
;       crawl through the index allocation buffers.
;
;       TOS == name length
;       TOS+4 -> name to find
;
        mov     eax, IndexAllocation
        or      eax, eax
        jnz     FindFile30

;       There is no index allocation attribute; clean up
;       the stack and return failure.
;
        pop     ecx
        pop     ecx
        xor     eax, eax
        ret

FindFile30:
;
;       Search the index allocation blocks for the name we want.
;       Instead of searching in tree order, we'll just start with
;       the last one and work our way backwards.
;
;       TOS == name length
;       TOS+4 -> name to find
;
        mov     edx, IndexAllocation        ; edx -> index allocation attr.
        lea     edx, [edx].ATTR_FormUnion   ; edx -> nonresident form info
        mov     eax, [edx].NONRES_HighestVcn.LowPart; eax = HighestVcn
        inc     eax                         ; eax = clusters in attribute

        mov     ebx, BytesPerCluster
        mul     ebx                         ; eax = bytes in attribute

        xor     edx, edx
        div     BytesPerIndexBlock          ; convert bytes to index blocks

        push    eax                         ; number of blocks to process

FindFile40:
;
;       TOS == remaining index blocks to search
;       TOS + 4 == name length
;       TOS + 8 -> name to find
;
        pop     eax         ; eax == number of remaining blocks

        or      eax, eax
        jz      FindFile90

        dec     eax         ; eax == number of next block to process
                            ;        and number of remaining blocks

        push    eax

;       eax == block number to process
;       TOS == remaining index blocks to search
;       TOS + 4 == name length
;       TOS + 8 -> name to find
;
;       See if the block is in use; if not, go on to next.

        call    IsBlockInUse
        jc      FindFile40      ; c set if not in use

;       eax == block number to process
;       TOS == remaining index blocks to search
;       TOS + 4 == name length
;       TOS + 8 -> name to find
;

        call    ReadIndexBlock

        pop     edx         ; edx == remaining buffers to search
        pop     ecx         ; ecx == name length
        pop     ebx         ; ebx -> name

        push    ebx
        push    ecx
        push    edx

;       ebx -> name to find
;       ecx == name length in characters
;       TOS == remaining blocks to process
;       TOS + 4 == name length
;       TOS + 8 -> name
;
;       Index buffer to search is in index allocation block buffer.
;
        mov     eax, IndexBlockBuffer       ; eax -> Index allocation block
        lea     eax, [eax].IB_IndexHeader   ; eax -> Index Header

        call    LocateIndexEntry            ; eax -> found entry

        or      eax, eax
        jz      FindFile40

;       Found it!
;
;       eax -> Found entry
;       TOS == remaining blocks to process
;       TOS + 4 == name length
;       TOS + 8 -> name
;
        pop     ecx
        pop     ecx
        pop     ecx ; clean up stack
        ret

FindFile90:
;
;       Name not found.
;
;       TOS == name length
;       TOS + 4 -> name to find
;
        pop     ecx
        pop     ecx         ; clean up stack.
        xor     eax, eax    ; zero out eax.
        ret


FindFile endp

ifdef DEBUG
;****************************************************************************
;
;   DumpIndexBlock - dumps the index block buffer
;
DumpIndexBlock proc near

    SAVE_ALL

    mov     esi, IndexBlockBuffer

    mov     ecx, 20h    ; dwords to dump

DIB10:

    test    ecx, 3
    jnz     DIB20
    call    DebugNewLine

DIB20:

    lodsd
    call    PrintNumber
    loop    DIB10

    RESTORE_ALL
    ret

DumpIndexBlock endp

;****************************************************************************
;
;   DebugNewLine
;
DebugNewLine proc near

    SAVE_ALL

    xor     eax, eax
    xor     ebx, ebx

    mov     al, 0dh
    mov     ah, 14
    mov     bx, 7
    int     10h

    mov     al, 0ah
    mov     ah, 14
    mov     bx, 7
    int     10h

    RESTORE_ALL
    ret

DebugNewLine endp


;****************************************************************************
;
;   PrintName  -   Display a unicode name
;
;   ENTRY:  DS:ESI  -> null-terminated string
;           ECX     == characters in string
;
;   USES:   None.
;
PrintName proc near


IFDEF NEC_98
else
    SAVE_ALL

    or      ecx, ecx
    jnz     PrintName10

    call    DebugNewLine

    RESTORE_ALL

    ret

PrintName10:

    xor     eax, eax
    xor     ebx, ebx

    lodsw

    mov     ah, 14  ; write teletype
    mov     bx, 7   ; attribute
    int     10h     ; print it
    loop    PrintName10

    call    DebugNewLine

    RESTORE_ALL
endif
    ret

PrintName endp

;****************************************************************************
;
;   DebugPrint  -   Display a debug string.
;
;   ENTRY:  DS:SI  -> null-terminated string
;
;   USES:   None.
;
.286
DebugPrint proc near

    pusha

DbgPr20:

    lodsb
    cmp     al, 0
    je      DbgPr30

    mov     ah, 14  ; write teletype
    mov     bx, 7   ; attribute
    int     10h     ; print it
    jmp     DbgPr20

DbgPr30:

    popa
    nop
    ret

DebugPrint endp

;****************************************************************************
;
;
;   PrintNumber
;
;   ENTRY: EAX == number to print
;
;   PRESERVES ALL REGISTERS
;
.386
PrintNumber proc near


IFDEF NEC_98
else
    SAVE_ALL

    mov     ecx, 8      ; number of digits in a DWORD

PrintNumber10:

    mov     edx, eax
    and     edx, 0fh    ; edx = lowest-order digit
    push    edx         ; put it on the stack
    shr     eax, 4      ; drop low-order digit
    loop    PrintNumber10

    mov     ecx, 8      ; number of digits on stack.

PrintNumber20:

    pop     eax         ; eax = next digit to print
    cmp     eax, 9
    jg      PrintNumber22

    add     eax, '0'
    jmp     PrintNumber25

PrintNumber22:

    sub     eax, 10
    add     eax, 'A'

PrintNumber25:

    xor     ebx, ebx

    mov     ah, 14
    mov     bx, 7
    int     10h
    loop    PrintNumber20

;   Print a space to separate numbers

    mov     al, ' '
    mov     ah, 14
    mov     bx, 7
    int     10h

    RESTORE_ALL

    call    Pause

endif
    ret

PrintNumber endp


IFDEF NEC_98
Debug0 proc near
Debug1:
Debug2:
Debug3:
Debug4:
        ret
Debug0 endp
else
;****************************************************************************
;
;   Debug0 - Print debug string 0 -- used for checkpoints in mainboot
;
Debug0 proc near

    SAVE_ALL

    mov     si, offset DbgString0
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug0 endp

;****************************************************************************
;
;   Debug1 - Print debug string 1 --
;
Debug1 proc near

    SAVE_ALL

    mov     si, offset DbgString1
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug1 endp

;****************************************************************************
;
;   Debug2 - Print debug string 2
;
Debug2 proc near

    SAVE_ALL

    mov     si, offset DbgString2
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug2 endp

;****************************************************************************
;
;   Debug3 - Print debug string 3 --
;
Debug3 proc near

    SAVE_ALL

    mov     si, offset DbgString3
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug3 endp

;****************************************************************************
;
;   Debug4 - Print debug string 4
;
Debug4 proc near

    SAVE_ALL

    mov     si, offset DbgString4
    call    BootErr$Print1

    RESTORE_ALL

    ret

Debug4 endp

;****************************************************************************
;
;   Pause - Pause for about 1/2 a second.  Simply count until you overlap
;           to zero.
;
Pause proc near

    push eax
    mov  eax, 0fff10000h

PauseLoopy:
    inc  eax

    or   eax, eax
    jnz  PauseLoopy

    pop  eax
    ret

Pause endp

endif ; DEBUG

endif
;*************************************************************************
;
;       LoadIndexFrs  -  For the requested index type code locate and
;                        load the associated Frs.
;
;       ENTRY: EAX - requested index type code
;              ECX - Points to empty Frs buffer
;
;       EXIT:  EAX - points to offset in Frs buffer of requested index type
;                    code or Zero if not found.
;       USES:  All
;
LoadIndexFrs    proc    near

        push    ecx                     ; save FRS buffer for later
        push    eax                     ; save index type code for later

        mov     eax, ROOT_FILE_NAME_INDEX_NUMBER
        push    ds
        pop     es
        mov     edi, ecx                ; es:edi = target buffer

        call    ReadFrs

        mov     eax, ecx                ; FRS to search

        pop     ebx                     ; Attribute type code
        push    ebx
        movzx   ecx, index_name_length  ; Attribute name length
        mov     edx, offset index_name  ; Attribute name

        call    LocateAttributeRecord

        pop     ebx
        pop     ecx

        or      eax, eax
        jnz     LoadIndexFrs$Exit      ; if found in root return

;
;       if not found in current Frs, search in attribute list
;
                                       ; EBX - holds Attribute type code
        mov     eax, ecx               ; FRS to search
        mov     ecx, ebx               ; type code
        push    eax                    ; save Frs
        push    ebx                    ; save type code

        call    SearchAttrList          ; search attribute list for FRN
                                        ; of specified ($INDEX_ROOT,
                                        ; $INDEX_ALLOCATION, or $BITMAP)

        ; EAX - holds FRN for Frs, or Zero

        pop     ebx                     ; Attribute type code (used later)
        pop     edi                     ; es:edi = target buffer

        or      eax, eax                ; if we cann't find it in attribute
        jz      LoadIndexFrs$Exit       ; list then we are hosed


;       We should now have the File Record Number where the index for the
;       specified type code we are searching for is,  load this into the
;       Frs target buffer.
;
;       EAX - holds FRN
;       EBX - holds type code
;       EDI - holds target buffer

        push    ds
        pop     es

        call    ReadFrs

;
;       Now determine the offset in the Frs of the index
;

;       EBX - holds type code

        mov     eax, edi                ; Frs to search
        movzx   ecx, index_name_length  ; Attribute name length
        mov     edx, offset index_name  ; Attribute name

        call    LocateAttributeRecord

;       EAX -  holds offset or Zero.


LoadIndexFrs$Exit:
        ret

LoadIndexFrs    endp


;****************************************************************************
;
;   SearchAttrList
;
;   Search the Frs for the attribute list.  Then search the attribute list
;   for the specifed type code.  When you find it return the FRN in the
;   attribute list entry found or Zero if no match found.
;
;   ENTRY: ECX - type code to search attrib list for
;          EAX - Frs buffer holding head of attribute list
;   EXIT:  EAX - FRN file record number to load, Zero if none.
;
;   USES: All
;
SearchAttrList proc  near

        push    ecx                     ; type code to search for in
                                        ; attrib list

                                        ; EAX - holds Frs to search
        mov     ebx, $ATTRIBUTE_LIST    ; Attribute type code
        mov     ecx, 0                  ; Attribute name length
        mov     edx, 0                  ; Attribute name

        call    LocateAttributeRecord

        or      eax, eax                      ; If there's no Attribute list,
        jz      SearchAttrList$NotFoundIndex1 ; We are done

;       Read the attribute list.
;       eax -> attribute list attribute

        mov     ebx, eax        ; ebx -> attribute list attribute
        push    ds
        pop     es              ; copy ds into es
        mov     edi, AttrList   ; ds:edi->attribute list buffer

        call    ReadWholeAttribute

        push    ds
        pop     es
        mov     ebx, AttrList   ; es:ebx -> first attribute list entry

;       Now, traverse the attribute list looking for the entry for
;       the Index type code.
;
;       ebx -> first attribute list entry
;

        pop     ecx                            ; Get Index Type code


SearchAttrList$LookingForIndex:

ifdef DEBUG
        SAVE_ALL

        mov     eax, es:[bx].ATTRLIST_TypeCode
        call    PrintNumber
        movzx   eax, es:[bx].ATTRLIST_Length
        call    PrintNumber
        mov     eax, es
        call    PrintNumber
        mov     eax, ebx
        call    PrintNumber
        push    es
        pop     ds
        movzx   ecx, es:[bx].ATTRLIST_NameLength    ; ecx = chars in name
        lea     esi, es:[bx].ATTRLIST_Name          ; esi -> name
        call    PrintName

        RESTORE_ALL
endif ; DEBUG

        cmp     es:[bx].ATTRLIST_TypeCode, ecx
        je      SearchAttrList$FoundIndex

        cmp     es:[bx].ATTRLIST_TypeCode, $END   ; reached invalid attribute
        je      SearchAttrList$NotFoundIndex2     ; so must be at end

        cmp     es:[bx].ATTRLIST_Length, 0
        je      SearchAttrList$NotFoundIndex2     ; reached end of list and
                                                  ; nothing found
        movzx   eax, es:[bx].ATTRLIST_Length
        add     bx, ax

        mov     ax, bx
        and     ax, 08000h                        ; test for roll over
        jz      SearchAttrList$LookingForIndex

        ;  If we rolled over then increment to the next es 32K segment and
        ;  zero off the high bits of bx

        mov     ax, es
        add     ax, 800h
        mov     es, ax

        and     bx, 07fffh

        jmp     SearchAttrList$LookingForIndex

SearchAttrList$FoundIndex:

        ;  found the index, return the FRN

        mov     eax, es:[bx].ATTRLIST_SegmentReference.REF_LowPart
        ret


SearchAttrList$NotFoundIndex1:
        pop     ecx
SearchAttrList$NotFoundIndex2:
        xor     eax, eax
        ret

SearchAttrList endp

;
; Boot message printing, relocated from sector 0 to sace space
;
ifdef NEC_98
BootErr$ntc:
endif
BootErr$fnf:
        mov     al,byte ptr TXT_MSG_SYSINIT_FILE_NOT_FD
        jmp     BootErr2
ifdef NEC_98
else
BootErr$ntc:
        mov     al,byte ptr TXT_MSG_SYSINIT_NTLDR_CMPRS
        jmp     BootErr2
endif

ifdef DEBUG
DbgString0      db  "Debug Point 0", 0Dh, 0Ah, 0
DbgString1      db  "Debug Point 1", 0Dh, 0Ah, 0
DbgString2      db  "Debug Point 2", 0Dh, 0Ah, 0
DbgString3      db  "Debug Point 3", 0Dh, 0Ah, 0
DbgString4      db  "Debug Point 4", 0Dh, 0Ah, 0

endif ; DEBUG

        .errnz  ($-_ntfsboot) GT 8192   ; <FATAL PROBLEM: main boot record exceeds available space>

        org     8192

BootCode ends

         end _ntfsboot
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\i386\bootntfs.h ===
#define NTFSBOOTCODE_SIZE 8192


unsigned char NtfsBootCode[] = {
235,82,144,78,84,70,83,32,32,32,32,0,2,1,0,0,
0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,250,51,192,142,208,188,0,124,251,184,192,7,
142,216,232,22,0,184,0,13,142,192,51,219,198,6,14,0,
16,232,83,0,104,0,13,104,106,2,203,138,22,36,0,180,
8,205,19,115,5,185,255,255,138,241,102,15,182,198,64,102,
15,182,209,128,226,63,247,226,134,205,192,237,6,65,102,15,
183,201,102,247,225,102,163,32,0,195,180,65,187,170,85,138,
22,36,0,205,19,114,15,129,251,85,170,117,9,246,193,1,
116,4,254,6,20,0,195,102,96,30,6,102,161,16,0,102,
3,6,28,0,102,59,6,32,0,15,130,58,0,30,102,106,
0,102,80,6,83,102,104,16,0,1,0,128,62,20,0,0,
15,133,12,0,232,179,255,128,62,20,0,0,15,132,97,0,
180,66,138,22,36,0,22,31,139,244,205,19,102,88,91,7,
102,88,102,88,31,235,45,102,51,210,102,15,183,14,24,0,
102,247,241,254,194,138,202,102,139,208,102,193,234,16,247,54,
26,0,134,214,138,22,36,0,138,232,192,228,6,10,204,184,
1,2,205,19,15,130,25,0,140,192,5,32,0,142,192,102,
255,6,16,0,255,14,14,0,15,133,111,255,7,31,102,97,
195,160,248,1,232,9,0,160,251,1,232,3,0,251,235,254,
180,1,139,240,172,60,0,116,9,180,14,187,7,0,205,16,
235,242,195,13,10,65,32,100,105,115,107,32,114,101,97,100,
32,101,114,114,111,114,32,111,99,99,117,114,114,101,100,0,
13,10,78,84,76,68,82,32,105,115,32,109,105,115,115,105,
110,103,0,13,10,78,84,76,68,82,32,105,115,32,99,111,
109,112,114,101,115,115,101,100,0,13,10,80,114,101,115,115,
32,67,116,114,108,43,65,108,116,43,68,101,108,32,116,111,
32,114,101,115,116,97,114,116,13,10,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,131,160,179,201,0,0,85,170,
5,0,78,0,84,0,76,0,68,0,82,0,4,0,36,0,
73,0,51,0,48,0,0,224,0,0,0,48,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,235,18,144,144,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,140,200,142,216,193,224,
4,250,139,224,251,232,3,254,102,15,183,6,11,0,102,15,
182,30,13,0,102,247,227,102,163,78,2,102,139,14,64,0,
128,249,0,15,143,14,0,246,217,102,184,1,0,0,0,102,
211,224,235,8,144,102,161,78,2,102,247,225,102,163,82,2,
102,15,183,30,11,0,102,51,210,102,247,243,102,163,86,2,
232,113,4,102,139,14,74,2,102,137,14,34,2,102,3,14,
82,2,102,137,14,38,2,102,3,14,82,2,102,137,14,42,
2,102,3,14,82,2,102,137,14,58,2,102,3,14,82,2,
102,137,14,66,2,102,184,144,0,0,0,102,139,14,34,2,
232,95,9,102,11,192,15,132,87,254,102,163,46,2,102,184,
160,0,0,0,102,139,14,38,2,232,70,9,102,163,50,2,
102,184,176,0,0,0,102,139,14,42,2,232,52,9,102,163,
54,2,102,161,46,2,102,11,192,15,132,36,254,103,128,120,
8,0,15,133,27,254,103,102,141,80,16,103,3,66,4,103,
102,15,182,72,12,102,137,14,98,2,103,102,139,72,8,102,
137,14,94,2,102,161,94,2,102,15,183,14,11,0,102,51,
210,102,247,241,102,163,102,2,102,161,66,2,102,3,6,94,
2,102,163,70,2,102,131,62,50,2,0,15,132,29,0,102,
131,62,54,2,0,15,132,200,253,102,139,30,54,2,30,7,
102,139,62,70,2,102,161,42,2,232,188,1,102,15,183,14,
0,2,102,184,2,2,0,0,232,254,7,102,11,192,15,132,
168,9,103,102,139,0,30,7,102,139,62,58,2,232,49,6,
102,161,58,2,102,187,32,0,0,0,102,185,0,0,0,0,
102,186,0,0,0,0,232,214,0,102,133,192,15,133,35,0,
102,161,58,2,102,187,128,0,0,0,102,185,0,0,0,0,
102,186,0,0,0,0,232,182,0,102,11,192,15,133,68,0,
233,87,9,102,51,210,102,185,128,0,0,0,102,161,58,2,
232,188,8,102,11,192,15,132,64,9,30,7,102,139,62,58,
2,232,205,5,102,161,58,2,102,187,128,0,0,0,102,185,
0,0,0,0,102,186,0,0,0,0,232,114,0,102,11,192,
15,132,22,9,103,102,15,183,88,12,102,129,227,255,0,0,
0,15,133,11,9,102,139,216,104,0,32,7,102,43,255,102,
161,58,2,232,242,0,138,22,36,0,184,232,3,142,192,141,
54,11,0,43,192,104,0,32,80,203,6,30,102,96,102,139,
218,102,15,182,14,13,0,102,247,225,102,163,16,0,102,139,
195,102,247,225,163,14,0,139,223,131,227,15,140,192,102,193,
239,4,3,199,80,7,232,14,252,102,97,144,31,7,195,103,
3,64,20,103,102,131,56,255,15,132,76,0,103,102,57,24,
15,133,51,0,102,11,201,15,133,10,0,103,128,120,9,0,
15,133,35,0,195,103,58,72,9,15,133,26,0,102,139,240,
103,3,112,10,232,151,6,102,81,30,7,102,139,250,243,167,
102,89,15,133,1,0,195,103,102,131,120,4,0,15,132,7,
0,103,102,3,64,4,235,171,102,43,192,195,102,139,243,232,
108,6,103,102,3,0,103,247,64,12,2,0,15,133,52,0,
103,102,141,80,16,103,58,74,64,15,133,24,0,103,102,141,
114,66,232,73,6,102,81,30,7,102,139,251,243,167,102,89,
15,133,1,0,195,103,131,120,8,0,15,132,6,0,103,3,
64,8,235,194,102,51,192,195,103,128,123,8,0,15,133,28,
0,6,30,102,96,103,102,141,83,16,103,102,139,10,102,139,
243,103,3,114,4,243,164,102,97,144,31,7,195,102,80,103,
102,141,83,16,102,133,192,15,133,10,0,103,102,139,74,8,
102,65,235,17,144,103,102,139,66,24,102,51,210,102,247,54,
78,2,102,139,200,102,43,192,102,94,232,1,0,195,6,30,
102,96,103,128,123,8,1,15,132,3,0,233,147,251,102,131,
249,0,15,133,6,0,102,97,144,31,7,195,102,83,102,80,
102,81,102,86,102,87,6,232,145,4,102,139,209,7,102,95,
102,94,102,89,102,133,192,15,132,52,0,102,59,202,15,141,
3,0,102,139,209,232,130,254,102,43,202,102,139,218,102,139,
194,102,15,182,22,13,0,102,247,226,102,15,183,22,11,0,
102,247,226,102,3,248,102,88,102,3,195,102,91,235,159,102,
133,246,15,132,43,251,102,81,102,87,6,103,102,15,182,67,
9,102,133,192,15,132,32,0,102,209,224,102,43,224,102,139,
252,102,84,102,86,103,102,15,183,115,10,102,3,243,102,139,
200,243,164,102,94,235,3,144,102,80,102,80,103,102,139,3,
102,80,103,102,139,67,24,102,80,103,102,139,86,32,102,133,
210,15,132,11,0,102,139,254,30,7,102,139,194,232,113,3,
102,139,198,102,90,102,89,102,66,102,81,102,86,232,63,6,
102,133,192,15,132,186,250,102,94,102,89,102,139,254,30,7,
232,78,3,102,139,198,102,139,217,102,89,102,90,102,81,102,
86,102,209,233,232,248,253,102,133,192,15,132,147,250,102,94,
102,89,102,3,225,7,102,95,102,89,102,139,208,102,88,102,
91,102,139,218,233,245,254,6,30,102,96,38,103,102,15,183,
95,4,38,103,102,15,183,79,6,102,11,201,15,132,97,250,
102,3,223,102,131,195,2,102,129,199,254,1,0,0,102,73,
102,11,201,15,132,23,0,38,103,139,3,38,103,137,7,102,
131,195,2,102,129,199,0,2,0,0,102,73,235,226,102,97,
144,31,7,195,6,30,102,96,102,184,1,0,0,0,102,163,
30,2,102,161,26,2,102,3,6,82,2,102,163,90,2,102,
3,6,82,2,102,163,74,2,102,161,48,0,102,15,182,30,
13,0,102,247,227,102,139,30,74,2,102,137,7,102,163,16,
0,131,195,4,102,161,86,2,102,137,7,163,14,0,131,195,
4,102,137,30,74,2,102,139,30,26,2,30,7,232,55,249,
102,139,251,232,81,255,102,161,26,2,102,187,32,0,0,0,
102,185,0,0,0,0,102,186,0,0,0,0,232,16,253,102,
11,192,15,132,25,1,102,139,216,30,7,102,139,62,22,2,
102,51,192,232,162,253,102,139,30,22,2,102,129,63,128,0,
0,0,15,132,235,0,3,95,4,235,240,102,83,102,139,71,
16,102,247,38,86,2,102,80,102,51,210,102,15,182,30,13,
0,102,247,243,102,82,232,220,0,102,11,192,15,132,97,249,
102,139,14,86,2,102,15,182,30,13,0,102,247,227,102,90,
102,3,194,102,139,30,74,2,102,137,7,131,195,4,102,15,
182,6,13,0,102,43,194,102,59,193,15,134,3,0,102,139,
193,102,137,7,102,43,200,102,90,15,132,117,0,102,3,194,
102,80,102,51,210,102,15,182,30,13,0,102,247,243,102,81,
232,130,0,102,89,102,11,192,15,132,5,249,102,15,182,30,
13,0,102,247,227,102,139,30,74,2,102,139,23,131,195,4,
102,3,23,102,59,208,15,133,21,0,102,15,182,6,13,0,
102,59,193,15,134,3,0,102,139,193,102,1,7,235,165,131,
195,4,102,137,30,74,2,102,137,7,131,195,4,102,15,182,
6,13,0,102,59,193,15,134,3,0,102,139,193,102,137,7,
235,130,131,195,4,102,255,6,30,2,102,137,30,74,2,102,
91,3,95,4,102,129,63,128,0,0,0,15,132,12,255,102,
97,144,31,7,195,102,139,208,102,139,14,30,2,102,139,54,
90,2,102,3,54,82,2,102,82,102,81,102,82,102,139,30,
90,2,102,139,62,86,2,102,139,4,102,163,16,0,131,198,
4,102,139,4,163,14,0,131,198,4,30,7,232,184,247,102,
43,248,15,132,8,0,247,38,11,0,3,216,235,217,102,139,
62,90,2,30,7,232,191,253,102,161,90,2,102,187,128,0,
0,0,102,185,0,0,0,0,102,139,209,232,129,251,102,11,
192,15,132,28,248,102,139,216,102,88,102,86,232,44,1,102,
94,102,11,192,15,132,5,0,102,91,102,91,195,102,89,102,
90,226,132,102,51,192,195,6,30,102,96,102,80,102,81,102,
51,210,102,15,182,30,13,0,102,247,243,102,82,102,87,232,
83,255,102,95,102,11,192,15,132,214,247,102,15,182,30,13,
0,102,247,227,102,90,102,3,194,102,163,16,0,102,89,102,
15,182,30,13,0,102,59,203,15,142,19,0,137,30,14,0,
102,43,203,102,88,102,3,195,102,80,102,81,235,20,144,102,
88,102,3,193,102,80,137,14,14,0,102,185,0,0,0,0,
102,81,6,102,87,139,223,131,227,15,140,192,102,193,239,4,
3,199,80,7,232,224,246,102,95,7,102,3,62,78,2,102,
89,102,88,102,131,249,0,15,143,112,255,102,97,144,31,7,
195,6,30,102,96,102,247,38,86,2,102,139,14,86,2,232,
85,255,232,210,252,102,97,144,31,7,195,6,30,102,96,102,
247,38,98,2,102,139,30,50,2,102,139,14,98,2,102,139,
54,38,2,30,7,102,139,62,66,2,232,129,251,232,167,252,
102,97,144,31,7,195,102,80,102,83,102,81,102,139,30,70,
2,102,139,200,102,193,232,3,102,131,225,7,102,3,216,102,
184,1,0,0,0,102,211,224,103,132,3,15,132,4,0,248,
235,2,144,249,102,89,102,91,102,88,195,103,128,123,8,1,
15,132,4,0,102,43,192,195,103,102,141,115,16,103,102,139,
86,8,102,59,194,15,135,11,0,103,102,139,22,102,59,194,
15,131,4,0,102,43,192,195,103,3,94,16,102,43,246,103,
128,59,0,15,132,62,0,232,129,0,102,3,241,232,57,0,
102,3,202,102,59,193,15,140,33,0,102,139,209,102,80,103,
102,15,182,11,102,139,193,102,131,224,15,102,193,233,4,102,
3,217,102,3,216,102,67,102,88,235,196,102,43,200,102,43,
194,102,3,198,195,102,43,192,195,102,43,201,103,138,11,128,
225,15,102,131,249,0,15,133,4,0,102,43,201,195,102,83,
102,82,102,3,217,103,102,15,190,19,102,73,102,75,102,131,
249,0,15,132,13,0,102,193,226,8,103,138,19,102,75,102,
73,235,235,102,139,202,102,90,102,91,195,102,83,102,82,102,
43,210,103,138,19,102,131,226,15,102,43,201,103,138,11,192,
233,4,102,131,249,0,15,133,8,0,102,43,201,102,90,102,
91,195,102,3,218,102,3,217,103,102,15,190,19,102,73,102,
75,102,131,249,0,15,132,13,0,102,193,226,8,103,138,19,
102,75,102,73,235,235,102,139,202,102,90,102,91,195,102,11,
201,15,133,1,0,195,102,81,102,86,103,131,62,97,15,140,
12,0,103,131,62,122,15,143,4,0,103,131,46,32,102,131,
198,2,226,230,102,94,102,89,195,102,80,102,81,102,139,208,
102,161,46,2,103,102,141,88,16,103,3,67,4,103,102,141,
64,16,102,139,218,232,68,249,102,11,192,15,132,5,0,102,
89,102,89,195,102,161,50,2,102,11,192,15,133,8,0,102,
89,102,89,102,51,192,195,102,139,22,50,2,103,102,141,82,
16,103,102,139,66,24,102,51,210,102,247,54,94,2,102,51,
246,102,80,102,86,102,88,102,94,102,59,198,15,132,58,0,
102,86,102,64,102,80,102,72,232,27,254,114,232,232,235,253,
102,90,102,94,102,89,102,91,102,83,102,81,102,86,102,82,
102,161,66,2,103,102,141,64,24,232,208,248,102,11,192,116,
196,102,89,102,89,102,89,102,89,195,102,89,102,89,102,51,
192,195,102,81,102,80,102,184,5,0,0,0,30,7,102,139,
249,232,141,253,102,139,193,102,187,32,0,0,0,102,185,0,
0,0,0,102,186,0,0,0,0,232,51,248,102,91,102,89,
102,133,192,15,133,21,0,102,139,193,102,15,183,14,12,2,
102,186,14,2,0,0,232,22,248,235,51,144,102,51,210,102,
139,193,102,139,203,102,80,102,83,232,35,0,102,91,102,95,
102,11,192,15,132,23,0,30,7,232,53,253,102,139,199,102,
15,183,14,12,2,102,186,14,2,0,0,232,225,247,195,102,
82,102,81,102,187,32,0,0,0,102,185,0,0,0,0,102,
186,0,0,0,0,232,199,247,102,11,192,15,132,99,0,102,
139,216,30,7,102,139,62,22,2,102,51,192,232,89,248,30,
7,102,139,30,22,2,102,89,102,90,38,102,57,15,15,133,
12,0,38,102,57,87,8,15,132,49,0,235,19,144,38,102,
131,63,255,15,132,47,0,38,131,127,4,0,15,132,38,0,
38,102,15,183,71,4,3,216,139,195,37,0,128,116,203,140,
192,5,0,8,142,192,129,227,255,127,235,190,38,102,139,71,
16,195,102,89,102,90,102,51,192,195,160,249,1,233,244,243,
160,250,1,233,238,243,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\makefile.inc ===
#
# dummy makefile.inc
#
BOOT_FILE=$(_OBJ_DIR)\ia64\ntfsboot.obj $(_OBJ_DIR)\ia64\miscc.obj
SIMSAL_FILE=$(_OBJ_DIR)\ia64\simsal.obj $(_OBJ_DIR)\ia64\miscc.obj

$(O)\ntfsboot.exe:$(BOOT_OBJ) makefile.inc
        -ilink -out:$(O)\ntfsboot.exe @$(TARGET_DIRECTORY)boot.rsp

$(O)\simsal.exe:$(BOOT_OBJ) makefile.inc
        -ilink -out:$(O)\simsal.exe @simsal.rsp
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\bootimage.c ===
//
// readbpb.c
//copyright (c) 1994 by CuTEST Inc.

#include "windows.h"
#include "stdio.h"
#include "stdlib.h"
#include "winioctl.h"

int main(int argc, char *argv[])
{
    ULONG       Value;
    UCHAR       Buffer[8012];
    HANDLE      Source, Target;
    DWORD       BytesRead, BytesWritten;
    ULONG       err;
    int         i;
    
    if ((Source = CreateFile( "ntfsboot.com",
                              GENERIC_READ | GENERIC_WRITE,
                              FILE_SHARE_READ | FILE_SHARE_WRITE,
                              NULL,
                              OPEN_EXISTING,
                              FILE_ATTRIBUTE_NORMAL,
                              NULL
                              )) == ((HANDLE)-1))  {

	printf("Can't get a handle to ntfsboot.com\n");
	err = GetLastError();
	printf("error = %d\n", err);
	return 0;
    }
    printf("Open to ntfsboot.com succeeded\n");

    if ((Target = CreateFile( "bootntfs.h",
                              GENERIC_READ | GENERIC_WRITE,
                              FILE_SHARE_READ | FILE_SHARE_WRITE,
                              NULL,
                              OPEN_ALWAYS,
                              FILE_ATTRIBUTE_NORMAL,
                              NULL
                              )) == ((HANDLE)-1))  {

	printf("Can't get a handle to bootntfs.h\n");
	err = GetLastError();
	printf("error = %d\n", err);
	return 0;
    }
    printf("Open to bootntfs.h succeeded\n");

    sprintf(Buffer, "#define NTFSBOOTCODE_SIZE 32768\n\n\n");
    WriteFile(Target, Buffer, strlen(Buffer), &BytesWritten, NULL);

    sprintf(Buffer, "unsigned char NtfsBootCode[] = {\n");
    WriteFile(Target, Buffer, strlen(Buffer), &BytesWritten, NULL);

    printf("Starting Do-While loop\n");
    i = 0;
    do {
        ReadFile(Source, &Value, 1, &BytesRead, NULL);
        _itoa(Value, Buffer, 10);
        WriteFile(Target, Buffer, strlen(Buffer), &BytesWritten, NULL);

        sprintf(Buffer, ",");
        WriteFile(Target, Buffer, strlen(Buffer), &BytesWritten, NULL);
        
        if ((i != 0) && (i % 16 == 0)) {
            sprintf(Buffer, "\n");
            WriteFile(Target, Buffer, strlen(Buffer), &BytesWritten, NULL);
        }
        i++;

    } while (BytesRead);

    sprintf(Buffer, "};\n");
    WriteFile(Target, Buffer, strlen(Buffer), &BytesWritten, NULL);

    CloseHandle(Source);
    CloseHandle(Target);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\genntfs.c ===
//
// No Check-in Source Code.
//
// Do not make this code available to non-Microsoft personnel
//      without Intel's express permission
//
/**
***  Copyright  (C) 1996-97 Intel Corporation. All rights reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
**/

/*++

Copyright (c) 1990  Microsoft Corporation

Module Name:

    genntfs.c

Abstract:

    This module implements a program which generates IA64 machine dependent
    structure offset definitions for kernel structures that are accessed in
    assembly code.

Author:

    David N. Cutler (davec) 27-Mar-1990

Revision History:

    Allen M. Kay (akay) 25-Jan-1996          Modified this file for IA64.

--*/

//#include "ki.h"
//#pragma hdrstop
//#define HEADER_FILE
#include "ntos.h"
#include "stdio.h"
#include "stdlib.h"
#include "zwapi.h"
#include "nt.h"
#include "excpt.h"
#include "ntdef.h"
#include "ntkeapi.h"
#include "ntia64.h"
#include "ntimage.h"
#include "ntseapi.h"
#include "ntobapi.h"
#include "ntlpcapi.h"
#include "ntioapi.h"
#include "ntmmapi.h"
#include "ntldr.h"
#include "ntpsapi.h"
#include "ntexapi.h"
#include "ntnls.h"
#include "nturtl.h"
#include "ntcsrmsg.h"
#include "ntcsrsrv.h"
#include "ntxcapi.h"
#include "ia64.h"
#include "arc.h"
#include "ntstatus.h"
#include "kxia64.h"
#include "stdarg.h"
#include "setjmp.h"
#include "ntioapi.h"
#include "fsrtl.h"
//#include "index.h"
#include "nodetype.h"
#include "ntfs.h"
#include "ntfsstru.h"
#include "ntfsdata.h"
#include "ntfslog.h"
#include "ntfsproc.h"

//
// Define architecture specific generation macros.
//

#define genAlt(Name, Type, Member) \
    dumpf("#define " #Name " 0x%lx\n", OFFSET(Type, Member))

#define genCom(Comment)        \
    dumpf("\n");               \
    dumpf("//\n");             \
    dumpf("// " Comment "\n"); \
    dumpf("//\n");             \
    dumpf("\n")

#define genDef(Prefix, Type, Member) \
    dumpf("#define " #Prefix #Member " 0x%lx\n", OFFSET(Type, Member))

#define genDef2(Prefix, Type, Name, Member) \
    dumpf("#define " #Prefix #Name " 0x%lx\n", OFFSET(Type, Member))

#define genVal(Name, Value)    \
    dumpf("#define " #Name " 0x%lx\n", Value)

#define genSpc() dumpf("\n");

//
// Define member offset computation macro.
//

#define OFFSET(type, field) ((LONG)(&((type *)0)->field))

FILE *NtfsDefs;

//
// EnableInc(a) - Enables output to goto specified include file
//
#define EnableInc(a)    OutputEnabled |= a;

//
// DisableInc(a) - Disables output to goto specified include file
//
#define DisableInc(a)   OutputEnabled &= ~a;

ULONG OutputEnabled;

#define NTFSDEFS    0x01

#define KERNEL NTFSDEFS

VOID dumpf (const char *format, ...);

//
// This routine returns the bit number right to left of a field.
//

LONG
t (
    IN ULONG z
    )

{
    LONG i;

    for (i = 0; i < 32; i += 1) {
        if ((z >> i) & 1) {
            break;
        }
    }
    return i;
}

//
// This program generates the IA64 machine dependent assembler offset
// definitions.
//

VOID
main (argc, argv)
    int argc;
    char *argv[];
{

    char *outName;

    //
    // Create file for output.
    //

    if (argc == 2) {
        outName = argv[ 1 ];
    } else {
        outName = "ntfsdefs.h";
    }
    outName = argc >= 2 ? argv[1] : "ntfsdefs.h";
    NtfsDefs = fopen( outName, "w" );

    if (NtfsDefs == NULL) {
        fprintf( stderr, "GENNTFS: Cannot open %s for writing.\n", outName);
        perror("NTFSDEFS");
        exit(1);
    }

    fprintf( stderr, "GENNTFS: Writing %s header file.\n", outName );

    //
    // Constant definitions
    //

    dumpf("\n");
    dumpf("//\n");
    dumpf("// Constant definitions\n");
    dumpf("//\n");
    dumpf("\n");

    genVal(LowPart, 0);
    genVal(HighPart, 4);
    genVal(MASTER_FILE_TABLE_NUMBER, MASTER_FILE_TABLE_NUMBER);
    genVal(MASTER_FILE_TABLE2_NUMBER, MASTER_FILE_TABLE2_NUMBER);
    genVal(LOG_FILE_NUMBER, LOG_FILE_NUMBER);
    genVal(VOLUME_DASD_NUMBER, VOLUME_DASD_NUMBER);
    genVal(ATTRIBUTE_DEF_TABLE_NUMBER, ATTRIBUTE_DEF_TABLE_NUMBER);
    genVal(ROOT_FILE_NAME_INDEX_NUMBER, ROOT_FILE_NAME_INDEX_NUMBER);
    genVal(BIT_MAP_FILE_NUMBER, BIT_MAP_FILE_NUMBER);
    genVal(BOOT_FILE_NUMBER, BOOT_FILE_NUMBER);
    genVal(BAD_CLUSTER_FILE_NUMBER, BAD_CLUSTER_FILE_NUMBER);
    genVal(QUOTA_TABLE_NUMBER, QUOTA_TABLE_NUMBER);
    genVal(UPCASE_TABLE_NUMBER, UPCASE_TABLE_NUMBER);
    genVal($STANDARD_INFORMATION, $STANDARD_INFORMATION);
    genVal($ATTRIBUTE_LIST, $ATTRIBUTE_LIST);
    genVal($FILE_NAME, $FILE_NAME);
    genVal($OBJECT_ID, $OBJECT_ID);
    genVal($SECURITY_DESCRIPTOR, $SECURITY_DESCRIPTOR);
    genVal($VOLUME_NAME, $VOLUME_NAME);
    genVal($VOLUME_INFORMATION, $VOLUME_INFORMATION);
    genVal($DATA, $DATA);
    genVal($INDEX_ROOT, $INDEX_ROOT);
    genVal($INDEX_ALLOCATION, $INDEX_ALLOCATION);
    genVal($BITMAP, $BITMAP);
    genVal($SYMBOLIC_LINK, $SYMBOLIC_LINK);
    genVal($EA_INFORMATION, $EA_INFORMATION);
    genVal($EA, $EA);
    genVal($FIRST_USER_DEFINED_ATTRIBUTE, $FIRST_USER_DEFINED_ATTRIBUTE);
    genVal($END, $END);

    genVal(SEQUENCE_NUMBER_STRIDE, SEQUENCE_NUMBER_STRIDE);

    //
    // MFT_SEGMENT_REFERENCE
    //
    genDef(REF_, MFT_SEGMENT_REFERENCE, SegmentNumberLowPart);
    genDef(REF_, MFT_SEGMENT_REFERENCE, SegmentNumberHighPart);
    genDef(REF_, MFT_SEGMENT_REFERENCE, SequenceNumber);

    //
    // MULTI_SECTOR_HEADER
    //
    genDef(MSH_, MULTI_SECTOR_HEADER, Signature);
    genDef(MSH_, MULTI_SECTOR_HEADER, UpdateSequenceArrayOffset);
    genDef(MSH_, MULTI_SECTOR_HEADER, UpdateSequenceArraySize);

    //
    // FILE_RECORD_SEGMENT_HEADER
    //
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, MultiSectorHeader);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, Lsn);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, SequenceNumber);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, ReferenceCount);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, FirstAttributeOffset);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, Flags);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, FirstFreeByte);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, BytesAvailable);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, BaseFileRecordSegment);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, NextAttributeInstance);
    genDef(FRS_, FILE_RECORD_SEGMENT_HEADER, UpdateArrayForCreateOnly);

    genVal(FILE_RECORD_SEGMENT_IN_USE, FILE_RECORD_SEGMENT_IN_USE);
    genVal(FILE_FILE_NAME_INDEX_PRESENT, FILE_FILE_NAME_INDEX_PRESENT);

    //
    // ATTRIBUTE_RECORD_HEADER
    //
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, TypeCode);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, RecordLength);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, FormCode);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, NameLength);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, NameOffset);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, Flags);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, Instance);
    genDef(ATTR_, ATTRIBUTE_RECORD_HEADER, Form);

    //
    // Resident
    //
    genDef2(RES_,ATTRIBUTE_RECORD_HEADER,ValueLength,Form.Resident.ValueLength);
    genDef2(RES_,ATTRIBUTE_RECORD_HEADER,ValueOffset,Form.Resident.ValueOffset);
    genDef2(RES_,ATTRIBUTE_RECORD_HEADER,ResidentFlags,Form.Resident.ResidentFlags);
    genDef2(RES_,ATTRIBUTE_RECORD_HEADER,Reserved,Form.Resident.Reserved);

    //
    // Nonresident
    //
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,LowestVcn,Form.Nonresident.LowestVcn);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,HighestVcn,Form.Nonresident.HighestVcn);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,MappingPairOffset,Form.Nonresident.MappingPairsOffset);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,CompressionUnit,Form.Nonresident.CompressionUnit);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,Reserved,Form.Nonresident.Reserved);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,AllocatedLength,Form.Nonresident.AllocatedLength);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,FileSize,Form.Nonresident.FileSize);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,ValidDataLength,Form.Nonresident.ValidDataLength);
    genDef2(NONRES_,ATTRIBUTE_RECORD_HEADER,TotalAllocated,Form.Nonresident.TotalAllocated);

    genVal(RESIDENT_FORM, RESIDENT_FORM);
    genVal(NONRESIDENT_FORM, NONRESIDENT_FORM);
    genVal(ATTRIBUTE_FLAG_COMPRESSION_MASK, ATTRIBUTE_FLAG_COMPRESSION_MASK);

    //
    // ATTRIBUTE_LIST_ENTRY
    //
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, AttributeTypeCode);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, RecordLength);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, AttributeNameLength);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, AttributeNameOffset);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, LowestVcn);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, SegmentReference);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, Instance);
    genDef(ATTRLIST_, ATTRIBUTE_LIST_ENTRY, AttributeName);

    genVal(FAT_DIRENT_ATTR_READ_ONLY, FAT_DIRENT_ATTR_READ_ONLY);
    genVal(FAT_DIRENT_ATTR_HIDDEN, FAT_DIRENT_ATTR_HIDDEN);
    genVal(FAT_DIRENT_ATTR_SYSTEM, FAT_DIRENT_ATTR_SYSTEM);
    genVal(FAT_DIRENT_ATTR_VOLUME_ID, FAT_DIRENT_ATTR_VOLUME_ID);
    genVal(FAT_DIRENT_ATTR_ARCHIVE, FAT_DIRENT_ATTR_ARCHIVE);
    genVal(FAT_DIRENT_ATTR_DEVICE, FAT_DIRENT_ATTR_DEVICE);

    //
    // DUPLICATED_INFORMATION
    //
    genDef(DUPINFO_, DUPLICATED_INFORMATION, CreationTime);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, LastModificationTime);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, LastChangeTime);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, LastAccessTime);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, AllocatedLength);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, FileSize);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, FileAttributes);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, PackedEaSize);
    genDef(DUPINFO_, DUPLICATED_INFORMATION, Reserved);

    //
    // FILE_NAME
    //
    genDef(FN_, FILE_NAME, ParentDirectory);
    genDef(FN_, FILE_NAME, Info);
    genDef(FN_, FILE_NAME, FileNameLength);
    genDef(FN_, FILE_NAME, Flags);
    genDef(FN_, FILE_NAME, FileName);

    genVal(FILE_NAME_NTFS, FILE_NAME_NTFS);
    genVal(FILE_NAME_DOS, FILE_NAME_DOS);
    genVal(FILE_NAME_LINK, 4);

    //
    // INDEX_HEADER
    //
    genDef(IH_, INDEX_HEADER, FirstIndexEntry);
    genDef(IH_, INDEX_HEADER, FirstFreeByte);
    genDef(IH_, INDEX_HEADER, BytesAvailable);
    genDef(IH_, INDEX_HEADER, Flags);
    genDef(IH_, INDEX_HEADER, Reserved);

    genVal(INDEX_NODE, INDEX_NODE);

    //
    // INDEX_ROOT
    //
    genDef(IR_, INDEX_ROOT, IndexedAttributeType);
    genDef(IR_, INDEX_ROOT, CollationRule);
    genDef(IR_, INDEX_ROOT, BytesPerIndexBuffer);
    genDef(IR_, INDEX_ROOT, BlocksPerIndexBuffer);
    genDef(IR_, INDEX_ROOT, Reserved);
    genDef(IR_, INDEX_ROOT, IndexHeader);

    //
    // INDEX_ALLOCATION_BUFFER
    //
    genDef(IB_, INDEX_ALLOCATION_BUFFER, MultiSectorHeader);
    genDef(IB_, INDEX_ALLOCATION_BUFFER, Lsn);
    genDef(IB_, INDEX_ALLOCATION_BUFFER, ThisBlock);
    genDef(IB_, INDEX_ALLOCATION_BUFFER, IndexHeader);
    genDef(IB_, INDEX_ALLOCATION_BUFFER, UpdateSequenceArray);

    //
    // INDEX_ENTRY
    //
    genDef(IE_, INDEX_ENTRY, FileReference);
    genDef(IE_, INDEX_ENTRY, Length);
    genDef(IE_, INDEX_ENTRY, AttributeLength);
    genDef(IE_, INDEX_ENTRY, Flags);
    genDef(IE_, INDEX_ENTRY, Reserved);

    genVal(INDEX_ENTRY_NODE, INDEX_ENTRY_NODE);
    genVal(INDEX_ENTRY_END, INDEX_ENTRY_END);

    fclose(NtfsDefs);
}

VOID
dumpf (const char *format, ...)
{
    va_list(arglist);

    va_start(arglist, format);

//    if (OutputEnabled & NTFSDEFS) {
        vfprintf (NtfsDefs, format, arglist);
//    }

    va_end(arglist);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\susetup.h ===
//
// No Check-in Source Code.
//
// Do not make this code available to non-Microsoft personnel
// 	without Intel's express permission
//
/**
***  Copyright  (C) 1996-97 Intel Corporation. All rights reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
**/

//++
//
//  Module name
//	SuSetup.h
//  Author
//	Allen Kay    (akay)    Jun-12-95
//  Description
//	Include file for SuSetup.s
//--

#ifndef __SUSETUP__
#define __SUSETUP__

//
// NT OS Loader address map
//
#define BOOT_USER_PAGE       0x00C00
#define BOOT_SYSTEM_PAGE     0x80C00
#define BOOT_PHYSICAL_PAGE   0x00000

#define BL_PAGE_SIZE         0x18            // 0x18=24, 2^24=16MB

#define BL_SP_BASE           0x00D80000      // Initial stack pointer
#define	Bl_IVT_BASE	         0x00A08000      // Interrup vector table base

//
// Initial CPU values
//

//
// Initial Region Register value:
//	RID = 0, PS = 4M, E = 0
//
#define	RR_PAGE_SIZE    (BL_PAGE_SIZE << RR_PS)
#define	RR_SHIFT        61
#define	RR_BITS         3
#define	RR_SIZE         8

#endif __SUSETUP__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\ntfsboot.s ===
/**
***  Copyright  (C) 1996-97 Intel Corporation. All rights reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
**/

//++
//
//  Module name
//      NTFSBOOT.S
//  Author
//      Allen Kay    (akay)    May-6-97
//  Description
//      NTFS boot code
// Notes
//      This is the startup routine for NTFS NT boot sector.  It finds
//      NTLDR by walk through the NTFS file system structure.
// Assumptions
//      1.  SAL/Gambit makes sure all TLB entries are purged before
//          passing control to SuSetup().
// SuSetup does the following:
//      1.   Initialize PSR with interrupt disabled.
//      2.   Invalidate ALAT.
//      3.   Invalidate RS.
//      4.   Setup GP.
//      5.   Set region registers rr[r0] - rr[r7] to RID=0, PS=8K, E=0.
//      6.   Initialize SP to 0x00902000.
//      7.   Initialize BSP to 0x00202000.
//      8.   Enable register stack engine.
//      9.   Setup IVA to 0x001F8000.
//      10.  Setup virtual->physical address translation
//           0x80000000->0x00000000 in dtr0/itr0 for NT kernel.
//      11.  Setup virtual->physical address translation
//           0x80400000->0x00400000 in dtr1/itr1 for HAL.dll.
//      12.  Setup virtual->physical address translation
//           0x00800000->0x00800000 in dtr1/itr1 for NTLDR.
//---

#include "ksia64.h"
#include "susetup.h"
#include "ntfsdefs.h"

        .file   "ntfsboot.s"

#define NewSeg 0x100000
#define LdrSeg 0x200000

        .global Multiply
        .type Multiply, @function

        .global Divide
        .type Divide, @function

        .global memcpy
        .type memcpy, @function

        .global strncmp
        .type strncmp, @function

        .global PrintName
        .type PrintName, @function

        .global BootErr$Print
        .type BootErr$Print, @function

        .global SscExit
        .type SscExit, @function

        .global SalDiskReadWrite
        .type SalDiskReadWrite, @function

        .global ReadSectors
        .type ReadSectors, @function

        .global SalPrint
        .type SalPrint, @function

        .global LoadNtldrSymbols
        .type LoadNtldrSymbols, @function

        .global RelocateLoaderSections
        .type RelocateLoaderSections, @function

//
//      This is a template BPB--anyone who writes boot code to disk
//      should either preserve the existing BPB and NTFS information
//      or create it anew.
//

#ifdef BSDT
//
// First define the Boot Sector Descriptor Table (BSDT)
//
BsdtSignature:      data1    0x01, 0x02, 0x45, 0x4d, 0x0f, 0x00
BsdtSectors:        data2    64
BsdtEntryPoint:     data4    mainboot
BsdtVersion:        data1    0
BsdtReserved:       data1    0, 0
BsdtCheckSum:       data1    0
#endif

//
// Start of the NTFS boot sector
//
Version:            string      "NTFS    "  // Must be 8 characters
BytesPerSector:     data2.ua    0           // Size of a physical sector 
SectorsPerCluster:  data1       0           // Sectors per allocation unit

//
// Traditionally the next 7 bytes were the reserved sector count, fat count,
// root dir entry count, and the small volume sector count. However all of
// these fields must be 0 on NTFS volumes.
//
// We use this space to store some temporary variables used by the boot code,
// which avoids the need for separate space in sector 0 to store them.
// We also take advantage of the free 0-initialization to save some space
// by avoiding the code to initialize them.
//
// Note that ideally we'd want to use an unused field for the SectorCount
// and initialize it to 16. This would let us save a few bytes by avoiding
// code to explicitly initialize this value before we read the 16 boot sectors.
// However setup and other code tends to preserve the entire bpb area when
// it updates boot code, so we avoid a dependency here and initialize
// the value explicitly to 16 in the first part of the boot code.
//
// ReservedSectors:    data2.ua    0    // Number of reserved sectors
// Fats:               data1       0    // Number of fats 
// DirectoryEntries:   data2.ua    0    // Number of directory entries 
// Sectors:            data2.ua    0    // No. of sectors-no. of hidden sectors

SectorCount:        data2.ua    0    // number of sectors to read
SectorBase:         data4.ua    0    // start sector for read request
HaveXInt13:         data1       0    // extended int13 available flag

Media:              data1       0    // Media byte
FatSectors:         data2.ua    0    // Number of fat sectors
SectorsPerTrack:    data2.ua    0    // Sectors per track
Heads:              data2.ua    0    // Number of surfaces
HiddenSectors:      data4.ua    0    // Number of hidden sectors

//
// The field below is traditionally the large sector count and is
// always 0 on NTFS. We use it here for a value the boot code calculates,
// namely the number of sectors visible on the drive via conventional int13.
//
// Int13Sectors:       data2    0
//

SectorsLong:        data4.ua    0           // Number of sectors iff Sectors = 0
//
// TBD: Need additition fields for 5.0 stuff.
//

DriveNumber:        data1    0x80        // int13 unit number
ReservedForBootCode:data1    0
#ifdef BSDT
Unused:             data1    0,0,0,0,0   // Alignment filler
#else
Unused:             data1    0,0         // Alignment filler
#endif

//
// The following is the rest of the NTFS Sector Zero information.
// The offsets of most of these fields cannot be changed without changing
// all code that validates, formats, recognizes, etc, NTFS volumes.
// In other words, don't change it.
//
SectorsOnVolume:    data8   0
MftStartLcn:        data8   0
Mft2StartLcn:       data8   0
ClustersPerFrs:     data1   0
Unused1:            data1   0,0,0
DefClustersPerBuf:  data1   0
Unused2:            data1   0,0,0
SerialNumber:       data8   0
CheckSum:           data4   0

//
// TBD:  What should be done for IA64?
//
// Make sure size of fields matches what fs_rec.sys thinks is should be
//
//        .errnz          ($-_ntfsboot) NE (54h)
//

//
// TBD.  Dummy BootErr$he function.  Need to fill in at a later time.
//
BootErr$he:

//
// NTFS data
//

//   Name we look for.  ntldr_length is the number of characters,
//   ntldr_name is the name itself.  Note that it is not NULL
//   terminated, and doesn't need to be.
//
ntldr_name_length:  data2  5
ntldr_name:         data2  'N', 'T', 'L', 'D', 'R'

//   Predefined name for index-related attributes associated with an
//   index over $FILE_NAME
//
index_name_length:  data2 4
index_name:         data2 '$', 'I', '3', '0'

//   Global variables.  These offsets are all relative to NewSeg.
//
AttrList:           data4 0x0e000 // Offset of buffer to hold attribute list
MftFrs:             data4 0x3000  // Offset of first MFT FRS
SegmentsInMft:      data4 0  // number of FRS's with MFT Data attribute records
RootIndexFrs:       data4 0  // Offset of Root Index FRS
AllocationIndexFrs: data4 0  // Offset of Allocation Index FRS        ; KPeery
BitmapIndexFrs:     data4 0  // Offset of Bitmap Index FRS            ; KPeery
IndexRoot:          data4 0  // Offset of Root Index $INDEX_ROOT attribute
IndexAllocation:    data4 0  // Offset of Root Index $INDEX_ALLOCATION attribute
IndexBitmap:        data4 0  // Offset of Root Index $BITMAP attribute
NtldrFrs:           data4 0  // Offset of NTLDR FRS
NtldrData:          data4 0  // Offset of NTLDR $DATA attribute
IndexBlockBuffer:   data4 0  // Offset of current index buffer
IndexBitmapBuffer:  data4 0  // Offset of index bitmap buffer
NextBuffer:         data4 0  // Offset of next free byte in buffer space

BytesPerCluster:    data4 0  // Bytes per cluster
BytesPerFrs:        data4 0  // Bytes per File Record Segment

Result:             data4 0  // Result from Multiply and Divide
Remainder:          data4 0  // Remainder 

//
// For floppyless booting, winnt32.exe creates c:\$win_nt$.~bt\bootsec.dat and
// places an entry in boot.ini for it (the boot selection says something
// like "Windows NT Setup or Upgrade"). When that is selected, the boot loader
// loads 16 sectors worth of data from bootsect.dat into d000 (which is where
// the first sector of this code would have loaded it) and jumps into it at
// a known location of 256h. That was correct in earlier versions of NT
// but is not correct now because the 4 fields below were added to this sector.
//
// Note that 0000 is "add [bx+si],al" which because of the way the boot loader
// is written happens to be a benign add of 0 to something in segment 7c0,
// which doesn't seem to hose anything but is still somewhat random.
//
// We code in a jump here so as this new code proliferates we get this
// cleaned up.
//
//        .errnz  $-_ntfsboot ne 256h
// SectorsPerFrs label dword       ; Sectors per File Record Segment
//                     jmp short mainboot
//                     nop
//                     nop
//         .errnz  $-_ntfsboot ne 25ah
SectorsPerFrs:          data4 0  // Sectors per File Record Segment

BytesPerIndexBlock:     data4 0  // Bytes per index alloc block in root index
ClustersPerIndexBlock:  data4 0  // Clusters per index alloc block in root index
SectorsPerIndexBlock:   data4 0  // Sectors per index block in root index

//***************************************************************************
//
// mainboot - entry point after 16 boot sectors have been read in
//
//
        .align 0x10
        NESTED_ENTRY(mainboot)
        NESTED_SETUP(3,6,8,0)
        PROLOGUE_END

        rpT0        = t22
        rpT1        = t21
        rpT2        = t20
        rpT3        = t19
        rIndexRoot  = loc2
        rIRAttrib   = loc3
        rNtldrIndex = loc4
        rPlabel     = loc5

//
// Setup the stack scratch area
//
        add      sp = -STACK_SCRATCH_AREA, sp

//
// Reinitialize xint13-related variables
//
//      br.call.sptd.many  brp = Int13SecCnt  // determine range of regular int13

//      Set up the FRS buffers.  The MFT buffer is in a fixed
//      location, and the other three come right after it.  The
//      buffer for index allocation blocks comes after that.
//

//
//      Compute the useful constants associated with the volume
//
        movl    rpT0 = BytesPerSector        // Bytes Per Sector
        ld2     out0 = [rpT0]
 
        movl    rpT0 = SectorsPerCluster     // Sectors Per Cluster
        ld1     out1 = [rpT0]

        mov      ap = sp
        br.call.sptk.many brp = Multiply

        movl    rpT0 = BytesPerCluster
        st4     [rpT0] = v0

        movl    rpT0 = ClustersPerFrs        // Clusters Per FRS
        ld1     t0 = [rpT0]
        sxt1    t0 = t0

        cmp.gt  pt0,pt1 = t0, zero           // ClustersPerFrs less than zero?
(pt0)   br.cond.sptk.clr mainboot1

//      If the ClustersPerFrs field is negative, we calculate the number
//      of bytes per FRS by negating the value and using that as a shift count.
//

        sub     t0 = zero, t0
        movl    t1 = 1
        shl     t3 = t1, t0                   // bytes per frs
        br.cond.sptk.clr mainboot2

mainboot1:

//      Otherwise if ClustersPerFrs was positive, we multiply by bytes
//      per cluster.

        movl    rpT0 = BytesPerCluster
        ld4     out1 = [rpT0]
        mov     out0 = t0

        mov     ap = sp
        br.call.sptk.many brp = Multiply

mainboot2:

        movl     rpT0 = BytesPerFrs
        st4      [rpT0] = v0

        movl     rpT0 = BytesPerSector
        ld2      t2 = [rpT0]

        mov      out0 = t3
        mov      out1 = t2
        movl     out2 = Result
        movl     out3 = Remainder

        mov      ap = sp
        br.call.sptk.many brp = Divide

        movl     rpT0 = Result
        ld4      t0 = [rpT0]

        movl     rpT0 = SectorsPerFrs
        st4      [rpT0] = t0

//      Set up the MFT FRS's---this will read all the $DATA attribute
//      records for the MFT.
//

        mov      ap = sp
        br.call.sptk.many  brp = SetupMft

//      Set up the remaining FRS buffers.  The RootIndex FRS comes
//      directly after the last MFT FRS, followed by the NTLdr FRS
//      and the Index Block buffer.
//
        movl    rpT0 = NextBuffer
        ld4     t0 = [rpT0]

        movl    rpT0 = RootIndexFrs
        st4     [rpT0] = t0

        movl    rpT0 = BytesPerFrs
        ld4     t1 = [rpT0]

        add     t0 = t0, t1                 // AllocationFrs may be different
        movl    rpT0 = AllocationIndexFrs   // from RootIndexFrs - KPeery
        st4     [rpT0] = t0 

        add     t0 = t0, t1                 // BitmapFrs may be different
        movl    rpT0 = BitmapIndexFrs       // from RootIndexFrs - KPeery
        st4     [rpT0] = t0

        add     t0 = t0, t1
        movl    rpT0 = NtldrFrs
        st4     [rpT0] = t0

        add     t0 = t0, t1
        movl    rpT0 = IndexBlockBuffer
        st4     [rpT0] = t0

//
//      Read the root index, allocation index and bitmap FRS's and locate
//      the interesting attributes.
//

        movl    out0 = $INDEX_ROOT
        movl    rpT0 = RootIndexFrs
        ld4     out1 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = LoadIndexFrs

        cmp.eq  pt0, pt1 = v0, zero
(pt0)   br.cond.sptk.clr BootErr$he

        mov     rIndexRoot = v0
        movl    rpT0 = IndexRoot          // offset in Frs buffer
        st4     [rpT0] = rIndexRoot

        movl    out0 = $INDEX_ALLOCATION  // Attribute type code
        movl    rpT0 = AllocationIndexFrs // FRS to search
        ld4     out1 = [rpT0]

        br.call.sptk.many brp = LoadIndexFrs
        movl    rpT0 = IndexAllocation
        st4     [rpT0] = v0

        movl    out0 = $BITMAP            // Attribute type code
        movl    rpT0 = BitmapIndexFrs     // FRS to search
        ld4     out1 = [rpT0]

        br.call.sptk.many brp = LoadIndexFrs
        movl    rpT0 = IndexBitmap
        st4     [rpT0] = v0

//      Consistency check: the index root must exist, and it
//      must be resident.
//
        cmp.eq  pt0, pt1 = rIndexRoot, zero
(pt0)   br.cond.sptk.clr BootErr$he

        add     rpT0 = ATTR_FormCode, rIndexRoot
        ld1     t0 = [rpT0]

        cmp.eq  pt0, pt1 = RESIDENT_FORM, t0
(pt1)   br.cond.sptk.clr BootErr$he

//      Determine the size of the index allocation buffer based
//      on information in the $INDEX_ROOT attribute.  The index
//      bitmap buffer comes immediately after the index block buffer.
//
//      rIndexRoot -> $INDEX_ROOT attribute record
//
        add     rpT3 = RES_ValueOffset, rIndexRoot // value of $INDEX_ROOT
        ld2     t0 = [rpT3]
        add     rIRAttrib = rIndexRoot, t0

        add     rpT0 = IR_BlocksPerIndexBuffer, rIRAttrib
        ld1     t0 = [rpT0]
        movl    rpT1 = ClustersPerIndexBlock
        st4     [rpT1] = t0

        add     rpT0 = IR_BytesPerIndexBuffer, rIRAttrib
        ld4     t0 = [rpT0]
        movl    rpT1 = BytesPerIndexBlock
        st4     [rpT1] = t0

        mov     out0 = t0
        movl    rpT0 = BytesPerSector
        ld2     out1 = [rpT0]

        movl    out2 = Result
        movl    out3 = Remainder

        mov     ap = sp
        br.call.sptk.many brp = Divide

        movl    rpT0 = Result
        ld4     t0 = [rpT0]

        movl    rpT1 = SectorsPerIndexBlock
        st4     [rpT1] = t0

        movl    rpT2 = IndexBlockBuffer
        ld4     t0 = [rpT2]

        movl    rpT3 = BytesPerIndexBlock
        ld4     t1 = [rpT3]
        
        add     t2 = t0, t1
        movl    rpT0 = IndexBitmapBuffer
        st4     [rpT0] = t2

//      Next consistency check: if the $INDEX_ALLOCATION attribute
//      exists, the $INDEX_BITMAP attribute must also exist.
//
        movl    rpT0 = IndexAllocation
        ld4     t0 = [rpT0]

        cmp.eq  pt0, pt1 = t0, zero
(pt0)   br.cond.sptk.clr mainboot30

        movl    rpT0 = IndexBitmap
        ld4     t0 = [rpT0]

        cmp.eq  pt0, pt1 = t0, zero         // since IndexAllocation exists, the
(pt0)   br.cond.sptk.clr BootErr$he         // bitmap must exist, too.

//      Since the bitmap exists, we need to read it into the bitmap
//      buffer.  If it's resident, we can just copy the data.
//

        movl    rpT0 = IndexBitmap
        ld4     out0 = [rpT0]               // out0 -> index bitmap attribute

        movl    rpT1 = IndexBitmapBuffer
        ld4     out1 = [rpT1]               // out1 -> index bitmap buffer

        mov     ap = sp
        br.call.sptk.many brp = ReadWholeAttribute

mainboot30:
//
//      OK, we've got the index-related attributes.
//
        movl    out0 = ntldr_name           // out0 -> name
        movl    rpT0 = ntldr_name_length
        ld2     out1 = [rpT0]               // out1 = name length in characters

        mov     ap = sp
        br.call.sptk.many brp = FindFile

        cmp.eq  pt0, pt1 = v0, zero
(pt0)   br.cond.sptk.clr BootErr$fnf

        mov     rNtldrIndex = v0

//      Read the FRS for NTLDR and find its data attribute.
//
//      rNtldrIndex -> Index Entry for NTLDR.
//
        add     rpT0 = IE_FileReference+LowPart, rNtldrIndex
        ld4     out0 = [rpT0]

        movl    rpT1 = NtldrFrs
        ld4     out1 = [rpT1]

        mov     ap = sp
        br.call.sptk.many brp = ReadFrs

        movl    rpT0 = NtldrFrs
        ld4     out0 = [rpT0]            // pointer to FRS

        movl    out1 = $DATA             // requested attribute type
        mov     out2 = zero              // attribute name length in characters
        mov     out3 = zero              // attribute name (NULL if none)

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

//      v0 -> $DATA attribute for NTLDR
//
        cmp.eq  pt0, pt1 = v0, zero
(pt1)   br.cond.sptk.clr mainboot$FoundData  // found attribute

//
//      The ntldr $DATA segment is fragmented.  Search the attribute list
//      for the $DATA member.  And load it from there.
//
        movl    out0 = $DATA             // Attribute type code
        movl    rpT0 = NtldrFrs 
        ld4     out1 = [rpT0]            // FRS to search

        mov     ap = sp
        br.call.sptk.many brp = SearchAttrList  // search attribute list for FRN
                                                // of specified ($DATA)

        cmp.eq  pt0, pt1 = v0, zero      // if v0 is zero, attribute not found.
(pt0)   br.cond.sptk.clr BootErr$fnf

//
//      We found the FRN of the $DATA attribute; load that into memory.
//
        movl    rpT0 = NtldrFrs
        ld4     out0 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = ReadFrs

//
//      Determine the beginning offset of the $DATA in the FRS
//
        movl    rpT0 = NtldrFrs // pointer to FRS
        ld4     out0 = [rpT0]

        movl    out1 = $DATA    // requested attribute type
        mov     out2 = zero     // attribute name length in characters
        mov     out3 = zero     // attribute name (NULL if none)

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

//      v0 -> $DATA attribute for NTLDR
//
        cmp.eq  pt0, pt1 = v0, zero  // if v0 is zero, attribute not found.
(pt0)   br.cond.sptk.clr BootErr$fnf

mainboot$FoundData:

//      Get the attribute record header flags, and make sure none of the
//      `compressed' bits are set

        add     rpT0 = ATTR_Flags, v0
        ld2     t0 = [rpT0]

        movl    t1 = ATTRIBUTE_FLAG_COMPRESSION_MASK
        and     t2 = t0, t1

        cmp.eq  pt0, pt1 = t2, zero
(pt1)   br.cond.sptk.clr BootErr$ntc 

        mov     out0 = v0             // out0 -> $DATA attribute for NTLDR
        movl    out1 = LdrSeg         // out1 = buffer address

        mov     ap = sp
        br.call.sptk.many brp = ReadWholeAttribute

//
// Relocate the NTLDR image from LdrSeg to what is specified by the PE header
// 
        movl    out0 = LdrSeg         // out1 = buffer address
        mov     ap = sp
        br.call.sptk.many brp = RelocateLoaderSections

        mov     rPlabel = v0

//
// Tell simdb to load NTLDR symbols
//
        mov      ap = sp
        br.call.sptk.many brp = LoadNtldrSymbols

//
// We've loaded NTLDR--jump to it.
//
// Before we go to NTLDR, set up the registers the way it wants them:
//
        movl    out0 = DriveNumber
        movl    out1 = BytesPerSector

        mov     psr.l = zero
        movl    t1 = MASK(PSR_BN,1) | MASK(PSR_IT,1) | MASK(PSR_DA,1) | MASK(PSR_RT,1) | MASK(PSR_DT,1) | MASK(PSR_PK,1) | MASK(PSR_I,1)| MASK(PSR_IC,1)
        mov     cr.ipsr = t1

        add     rpT0 = PlEntryPoint, rPlabel
        ld8     t0 = [rpT0]
        mov     cr.iip = t0

        add     rpT1 = PlGlobalPointer, rPlabel
        ld8     gp = [rpT1]
        rfi                              // "return" to NTLDR.
        ;;

        add     sp = STACK_SCRATCH_AREA, sp  // restore the original sp
        NESTED_RETURN
        NESTED_EXIT(mainboot)

//****************************************************************************
//
//   ReadClusters - Reads a run of clusters from the disk.
//
//   ENTRY:  in0 == LCN to read
//           in1 == clusters to read
//           in2 -> Target buffer
//
//   USES:   none (preserves all registers)
//
        NESTED_ENTRY(ReadClusters)
        NESTED_SETUP(3,4,8,0)
        PROLOGUE_END

        rpT0               = t22
        rpT1               = t21
        rLcn               = in0
        rCluster           = in1
        rBuffer            = in2
        rSectorBase        = loc2
        rSectorsPerCluster = loc3

//
// setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        movl    rpT0 = SectorsPerCluster
        ld1     rSectorsPerCluster = [rpT0]

        mov     out0 = rLcn
        mov     out1 = rSectorsPerCluster

        mov     ap = sp
        br.call.sptk.many brp = Multiply
        mov     rSectorBase= v0

        mov     out0 = rCluster    
        mov     out1 = rSectorsPerCluster

        mov     ap = sp
        br.call.sptk.many brp = Multiply

        mov     out1 = v0                 // Number of sectors to read

        mov     out0 = rSectorBase
        mov     out2 = rBuffer

        mov     ap = sp
        br.call.sptk.many brp = ReadSectors

        add     sp = STACK_SCRATCH_AREA, sp  // restore the original sp

        NESTED_RETURN
        NESTED_EXIT(ReadClusters)

//
//****************************************************************************
//
//   LocateAttributeRecord   --  Find an attribute record in an FRS.
//
//   ENTRY:  in0 -- pointer to FRS
//           in1 -- desired attribute type code
//           in2 -- length of attribute name in characters
//           in3 -- pointer to attribute name
//
//   EXIT:   v0 points at attribute record (0 indicates not found)
//
//   USES:   All
//
        NESTED_ENTRY(LocateAttributeRecord)
        NESTED_SETUP(4,3,8,0)
        PROLOGUE_END

        rpFrs         = in0
        rTypeCode     = in1
        rLength       = in2
        rpAttrName    = in3
        rpCurrentName = loc2
        rpT0          = t22
        rpT1          = t21

//
// Setup stack scratch area
//
        add      sp = -STACK_SCRATCH_AREA, sp

//
// get the first attribute record.
//
        add     rpT0 = FRS_FirstAttributeOffset, rpFrs
        ld2     t0 = [rpT0]
        add     rpFrs = rpFrs, t0

//      rpFrs -> next attribute record to investigate.
//      rTypeCode == desired type
//      rLength == name length
//      rpAttrName -> pointer to name
//
lar10:
        add     rpT0 = ATTR_TypeCode, rpFrs
        ld4     t0 = [rpT0]
        movl    t1 = 0xffffffff

        cmp.eq  pt0, pt1 = t0, t1
(pt0)   br.cond.sptk.clr lar99

        cmp.eq  pt0, pt1 = t0, rTypeCode
(pt1)   br.cond.sptk.clr lar80

//      this record is a potential match.  Compare the names:
//
//      rpFrs -> candidate record
//      rTypeCode == desired type
//      rLength == name length
//      rpAttrName -> pointer to name
//
        cmp.eq  pt0, pt1 = zero, rLength //Did the caller pass in a name length?
(pt1)   br.cond.sptk.clr lar20

//      We want an attribute with no name--the current record is
//      a match if and only if it has no name.
//
        add     rpT0 = ATTR_NameLength, rpFrs
        ld1     t0 = [rpT0]
        cmp.eq  pt0, pt1 = zero, t0
(pt1)   br.cond.sptk.clr lar80         // Not a match.

//      It's a match, and rpFrs is set up correctly, so return.
//
        mov     v0 = rpFrs
        add      sp = STACK_SCRATCH_AREA, sp  // retore the original sp
        NESTED_RETURN

//      We want a named attribute.
//
//      rpFrs -> candidate record
//      rTypeCode == desired type
//      rLength == name length
//      rpAttrName -> pointer to name
//
lar20:
        add     rpT0 = ATTR_NameLength, rpFrs
        ld1     t0 = [rpT0]

        cmp.eq  pt0, pt1 = rLength, t0
(pt1)   br.cond.sptk.clr lar80         // Not a match.

//      Convert name in current record to uppercase.
//
        add     rpT0 = ATTR_NameOffset, rpFrs
        ld2     t0 = [rpT0]

        add     rpCurrentName = rpFrs, t0
        mov     out0 = rpCurrentName
        add     out1 = ATTR_NameLength, rpFrs

        mov      ap = sp
        br.call.sptk.clr brp = UpcaseName

//      rpFrs -> candidate record
//      rTypeCode == desired type
//      rLength == name length
//      rpAttrName -> pointer to name
//      in4 -> Name in current record (upcased)
//

        mov     t2 = rLength
        mov     rpT0 = rpCurrentName
        mov     rpT1 = rpAttrName
lar79:
        ld2     t0 = [rpT0], 2
        ld2     t1 = [rpT1], 2

        cmp.eq  pt0, pt1 = t0, t1
(pt1)   br.cond.sptk.clr lar80

        add     t2 = -1, t2
        cmp.gt  pt0, pt1 = t2, zero
(pt0)   br.cond.sptk.clr lar79
        
//      t1 points at a matching record.
//
        mov     v0 = rpFrs
        add     sp = STACK_SCRATCH_AREA, sp    // restore sp before returning
        NESTED_RETURN

//
//  This record doesn't match; go on to the next.
//
//      rpFrs -> rejected candidate attribute record
//      rTypeCode == desired type
//      rLength == Name length
//      rpAttrName -> desired name
//
lar80:  add     rpT0 = ATTR_RecordLength, rpFrs
        ld1     t0 = [rpT0]
        cmp.eq  pt0, pt1 = zero, t0     // if the record length is zero
(pt0)   br.cond.sptk.clr lar99           // the FRS is corrupt.
        
        add     rpFrs = rpFrs, t0
        br.cond.sptk.clr lar10

//      Didn't find it.
//
lar99:  mov     v0 = zero

        add     sp = STACK_SCRATCH_AREA, sp    // restore sp before returning
        NESTED_RETURN
        NESTED_EXIT(LocateAttributeRecord)

//****************************************************************************
//
//  LocateIndexEntry   --  Find an index entry in a file name index
//
//  ENTRY:  in0 -> pointer to index header
//          in1 -> file name to find
//          in2 == length of file name in characters
//
//  EXIT:   v0 points at index entry.  NULL to indicate failure.
//
//  USES:   All
//
        NESTED_ENTRY(LocateIndexEntry)
        NESTED_SETUP(3,4,8,0)
        PROLOGUE_END

        rpT0         = t22
        rHeader      = in0
        rpName       = in1
        rLength      = in2
        rEntry       = loc2
        rAttr        = loc3

//
//      Setup the stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

//      Convert the input name to upper-case
//

        mov     out0 = rpName
        mov     out1 = rLength

        mov     ap = sp
        br.call.sptk.many brp = UpcaseName

#ifdef DEBUG
        mov     out0 = rpName
        mov     ap = sp
        br.call.sptk.many brp = PrintName

        mov     ap = sp
        br.call.sptk.many brp = Debug2
#endif DEBUG

        add     rpT0 = IH_FirstIndexEntry, rHeader
        ld4     t0 = [rpT0]
        add     rEntry = rHeader, t0

//      rEntry  -> current entry
//      rpName  -> file name to find
//      rLength == length of file name in characters
//
lie10:  add     rpT0 = IE_Flags, rEntry
        ld2     t0 = [rpT0]

        and     t1 = INDEX_ENTRY_END, t0    // Is it the end entry?
        cmp.eq  pt0, pt1 = t1, zero
(pt1)   br.cond.sptk.clr lie99              // quit if it is

        add     rAttr = IE_Reserved+0x2, rEntry   // FILE_NAME attribute value
                                                  // was IE_Value   

#ifdef DEBUG
//      DEBUG CODE -- list file names as they are examined

        mov     ap = sp
        br.call.sptk.many brp = Debug3

        mov     rpT0 = FN_FileNameLength, rAttr
        ld1     out1 = [rpT0]

        add     out0 = FN_FileName, rAttr
        mov     ap = sp
        br.call.sptk.many brp = PrintName

#endif DEBUG

//      rEntry  -> current entry
//      rpName  -> file name to find
//      rLength == length of file name in characters
//      rAttr   -> FILE_NAME attribute

        add     rpT0 = FN_FileNameLength, rAttr
        ld1     t0 = [rpT0]

        cmp.eq  pt0, pt1 = t0, rLength      // Is name the right length?
(pt1)   br.cond.sptk.clr lie80

        add     out0 = FN_FileName, rAttr   // Get name from FILE_NAME structure
        mov     out1 = rLength

        mov     ap = sp
        br.call.sptk.many brp = UpcaseName

        add     out0 = FN_FileName, rAttr
        mov     out1 = rpName               // out0 alread setup by last call
        mov     out2 = rLength
        br.call.sptk.many brp = strncmp

        cmp.eq  pt0, pt1 = v0, zero
(pt1)   br.cond.sptk.clr lie80

//      the current entry matches the search name, and eax points at it.
//
        mov     v0 = rEntry

        add     sp = STACK_SCRATCH_AREA, sp
        NESTED_RETURN

//      The current entry is not a match--get the next one.
//          rEntry -> current entry
//          rpName -> file name to find
//          rLength == length of file name in characters
//
lie80:  add     rpT0 = IE_Length, rEntry
        ld2     t0 = [rpT0]

        cmp.eq  pt0, pt1 = t0, zero     // If the entry length is zero
(pt0)   br.cond.sptk.clr lie99          // then the index block is corrupt.

        add     rEntry = rEntry, t0     // Get the next entry.
        br.cond.sptk.clr lie10

//  Name not found in this block.  Set v0 to zero and return
//
lie99:  mov     v0 = zero

        add     sp = STACK_SCRATCH_AREA, sp
        NESTED_RETURN
        NESTED_EXIT(LocateIndexEntry)

//****************************************************************************
//
//  ReadWholeAttribute - Read an entire attribute value
//
//  ENTRY:  in0 -> attribute
//          in1 -> target buffer
//
//  USES:   ALL
//
        NESTED_ENTRY(ReadWholeAttribute)
        NESTED_SETUP(2,4,8,0)

        rAttribute = in0
        rBuffer    = in1
        rpT0       = t22

// setup sp and ap for all function calls
        add     sp = -STACK_SCRATCH_AREA, sp

        add     rpT0 = ATTR_FormCode, in0
        ld1     t0 = [rpT0]

        cmp.eq   pt0, pt1 =  RESIDENT_FORM, t0
(pt1)   br.cond.sptk.clr rwa10

//      The attribute is resident.
//      rAttribute -> attribute
//      rBuffer    -> target buffer
//

        add     rpT0 = RES_ValueOffset, rAttribute
        ld2     t0 = [rpT0]
        add     out0 = rAttribute, t0

        mov     out1 = rBuffer
        add     rpT0 = RES_ValueLength, rAttribute
        ld4     out2 = [rpT0]

        mov      ap = sp
        br.call.sptk.many brp = memcpy

        add     sp = STACK_SCRATCH_AREA, sp // restore the original sp

        NESTED_RETURN                       // That's all!

rwa10:
//
//      The attribute type is non-resident.  Just call
//      ReadNonresidentAttribute starting at VCN 0 and
//      asking for the whole thing.
//
//      rAttribute -> attribute
//      rBuffer    -> target buffer
//
        mov     out0 = zero                 // 0 (first VCN to read)
        mov     out1 = rAttribute           // Attribute

        add     rpT0 = NONRES_HighestVcn+LowPart, rAttribute // # of clusters
        ld4     out2 = [rpT0]
        add     out2 = 1, out2

        mov     out3 = rBuffer              // Target Buffer
        mov     ap = sp
        br.call.sptk.many brp = ReadNonresidentAttribute

        add     sp = STACK_SCRATCH_AREA, sp // restore the original sp

        NESTED_RETURN
        NESTED_EXIT(ReadWholeAttribute)

//****************************************************************************
//
//  ReadNonresidentAttribute - Read clusters from a nonresident attribute
//
//  ENTRY:  in0 == First VCN to read
//          in1 -> Attribute
//          in2 == Number of clusters to read
//          in3 == Target of read
//
//  EXIT:   None.
//
//  USES:   None (preserves all registers with SAVE_ALL/RESTORE_ALL)
//
        NESTED_ENTRY(ReadNonresidentAttribute)
        NESTED_SETUP(4,4,8,0)
        PROLOGUE_END

        rVcn       = in0
        rAttribute = in1
        rCluster   = in2
        rBuffer    = in3
        rRun       = loc2
        rTmp       = loc3

//
// setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        add     rpT0 = ATTR_FormCode, rAttribute
        ld1     t0 = [rpT0]

        cmp.eq  pt0, pt1 = NONRESIDENT_FORM, t0
(pt0)   br.cond.sptk.clr ReadNR10

//      This attribute is not resident--the disk is corrupt.

        br.cond.sptk.clr BootErr$he


ReadNR10:
//      rVcn       == Next VCN to read
//      rAttribute -> Attribute
//      rCluster   -> Remaining clusters to read
//      rBuffer    -> Target of read
//

        cmp.eq  pt0, pt1 = rCluster,zero
(pt1)   br.cond.sptk.clr ReadNR20

//      Nothing left to read--return success.
//
        add     sp = STACK_SCRATCH_AREA, sp // restore the original sp
        NESTED_RETURN

ReadNR20:
        mov     out0 = rVcn
        mov     out1 = rAttribute

        mov     ap = sp
        br.call.sptk.many brp = ComputeLcn 

        mov     rLcn = t0                   // rLcn = LCN
        mov     rRun = t1                   // rRun = remaining run length

//      rLcn     == LCN to read
//      rCluster == remaining clusters to read
//      rRun     == remaining clusters in current run
//      rBuffer  == Target of read
//
        cmp.ge  pt0, pt1 = rCluster, rRun
(pt0)   br.cond.sptk.clr ReadNR30

//      Run length is greater than remaining request// only read
//      remaining request.
//
        mov     rRun = rCluster    // rRun = Remaining request

ReadNR30:
//      rLcn       == LCN to read
//      rCluster   == remaining clusters to read
//      rRun       == clusters to read in current run
//      rBuffer    == Target of read
//
        mov     out0 = rLcn
        mov     out1 = rCluster
        mov     out2 = rBuffer

        mov     ap = sp
        br.call.sptk.many brp = ReadClusters

        sub     rCluster = rCluster, rRun // Decrement clusters remaining

        mov     out0 = rRun
        movl    rpT0 = SectorsPerCluster
        ld1     out1 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = Multiply

        mov     out0 = v0
        movl    rpT0 = BytesPerSector
        ld4     out1 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = Multiply

        add     rBuffer = rBuffer, v0     // Update target of read
        add     rVcn = rVcn, rRun         // Update VCN to read

        br.cond.sptk.clr ReadNR10

        add     sp = STACK_SCRATCH_AREA, sp // restore the original sp
        NESTED_RETURN
        NESTED_EXIT(ReadNonresidentAttribute)

//****************************************************************************
//
//   ReadIndexBlockSectors - Read sectors from an index allocation attribute
//
//   ENTRY:  in0 == First VBN to read
//           in1 -> Attribute
//           in2 == Number of sectors to read
//           in3 == Target of read
//
//   EXIT:   None.
//
//   USES:   None (preserves all registers with SAVE_ALL/RESTORE_ALL)
//
        NESTED_ENTRY(ReadIndexBlockSectors)
        NESTED_SETUP(4,6,8,0)
        PROLOGUE_END

        rpT0               = t22
        rVbn               = in0
        rAttr              = in1
        rSectors           = in2
        rBuffer            = in3
        rSectorsPerCluster = loc2
        rRemainClusters    = loc3
        rRunSectors        = loc4
        rLbn               = loc5

//
// Setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        add     rpT0 = ATTR_FormCode, rAttr   
        ld1     t0 = [rpT0]

        cmp.eq  pt0, pt1 = NONRESIDENT_FORM, t0
(pt0)   br.cond.sptk.clr ReadIBS_10

//      This attribute is resident--the disk is corrupt.

        br.cond.sptk.clr BootErr$he

ReadIBS_10:
//      rVbn     == Next VBN to read
//      rAttr    -> Attribute
//      rSectors -> Remaining sectors to read
//      rBuffer  -> Target of read
//

        cmp.eq  pt0, pt1 = rSectors, zero
(pt1)   br.cond.sptk.clr ReadIBS_20

//      Nothing left to read--return success.
//
        add     sp = STACK_SCRATCH_AREA, sp
        NESTED_RETURN

ReadIBS_20:

        // Convert rVbn from a VBN back to a VCN by dividing by SectorsPerCluster.
        // The remainder of this division is the sector offset in the cluster we
        // want.  Then use the mapping information to get the LCN for this VCN,
        // then multiply to get back to LBN.
        //

        mov     out0 = rVbn
        movl    rpT0 = SectorsPerCluster
        ld1     rSectorsPerCluster = [rpT0]

        mov     out1 = rSectorsPerCluster
        movl    out2 = Result
        movl    out3 = Remainder

        mov     ap = sp
        br.call.sptk.many brp = Divide

        movl    rpT0 = Result
        ld4     out0 = [rpT0]
        mov     out1 = rAttr
        
        mov     ap = sp
        br.call.sptk.many brp = ComputeLcn  // t0 = LCN to read,
                                            // t1 = remaining run length

        mov     rRemainClusters = t1
        mov     out0 = t0
        mov     out1 = rSectorsPerCluster
        
        mov     ap = sp
        br.call.sptk.many brp = Multiply     // v0 = LBN of cluster

        movl    rpT0 = Remainder
        ld4     t0 = [rpT0]                  // t0 = remainder
        add     rLbn = v0, t0                // rLbn = LBN we want

        mov     out0 = rRemainClusters
        mov     out1 = rSectorsPerCluster

        mov     ap = sp
        br.call.sptk.many brp = Multiply // v0 = remaining run length in sectors
        mov     rRunSectors = v0         // remaining run length

//      rLbn        == LBN to read
//      rSectors    == remaining sectors to read
//      rRunSectors == remaining sectors in current run
//      rBuffer     == Target of read
//
        cmp.ge  pt0, pt1 = rSectors, rRunSectors
(pt0)   br.cond.sptk.clr ReadIBS_30

//      Run length is greater than remaining request; only read
//      remaining request.
//
        mov     rRunSectors = rSectors    // rRunSectors = Remaining request

ReadIBS_30:
//      rLbn == LBN to read
//      rSectors == remaining sectors to read
//      rRunSectors == sectors to read in current run
//      rBuffer == Target of read
//

        mov     out0 = rLbn
        mov     out1 = rRunSectors
        mov     out2 = rBuffer

        mov     ap = sp
        br.call.sptk.many brp = ReadSectors

//
// Decrement sectors remaining in request
//
        sub     rSectors = rSectors, rRunSectors 

        mov     out0 = rRunSectors        // eax = sectors read
        movl    rpT0 = BytesPerSector
        ld2     out1 = [rpT0]

        br.call.sptk.many brp = Multiply  // v0 = bytes read (wipes out edx!)

        add     rBuffer = rBuffer, v0     // Update target of read

        add     rVbn = rVbn, rRunSectors  // update VBN to read

        br.cond.sptk.clr ReadIBS_10

        add     sp = STACK_SCRATCH_AREA, sp
        NESTED_RETURN
        NESTED_EXIT(ReadIndexBlockSectors)

//****************************************************************************
//
//   MultiSectorFixup - fixup a structure read off the disk
//                      to reflect Update Sequence Array.
//
//   ENTRY:  in0 = Target buffer
//
//   USES:   none (preserves all registers with SAVE_ALL/RESTORE_ALL)
//
//   Note: in0 must point at a structure which is protected
//         by an update sequence array, and which begins with
//         a multi-sector-header structure.
//
        NESTED_ENTRY(MultiSectorFixup)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

#define MshUpdateSeqenceArrayOffset 4
#define SEQUENCE_NUMBER_STRIDE      512

        add     rpT0 = MshUpdateSeqenceArrayOffset, in0
        ld2     t0 = [rpT0], 2       // t0 = update array offset
        ld2     t1 = [rpT0]          // t1 = update array size

        cmp.eq  pt0, pt1 = zero, t1  // if the size of the update sequence array
(pt0)   br.cond.sptk.clr BootErr$he  // is zero, this structure is corrupt.

        add     rpT0 = t0, in0       // rpT0 -> update sequence array count word
        add     rpT0 = 2, rpT0       // rpT0 -> 1st entry of update array

        add     rpT1=SEQUENCE_NUMBER_STRIDE-2,in0 //t2->last word of first chunk
        movl    t2 = 1
        sub     t1 = t1, t2          // decrement to reflect count word

        cmp.eq  pt0, pt1 = zero, t2 
(pt0)   br.cond.sptk.clr MSF30

MSF10:

//   t1 = number of entries remaining in update sequence array
//   rpT0 -> next entry in update sequence array
//   rpT1 -> next target word for update sequence array


        ld2     t0 = [rpT0]          // copy next update sequence array entry
        st2     [rpT0] = t0          // to next target word

        add     rpT0 = 2, rpT0       // go on to next entry
        add     rpT1 = SEQUENCE_NUMBER_STRIDE, rpT1 // go on to next target

        sub     t1 = t1, t2

        cmp.lt  pt0, pt1 = zero, t1 
(pt0)   br.cond.sptk.clr MSF10

MSF30:

        NESTED_RETURN
        NESTED_EXIT(MultiSectorFixup)

//****************************************************************************
//
//   SetupMft - Reads MFT File Record Segments into memory.
//
//   ENTRY:  none.
//
//   EXIT:   NextBuffer is set to the free byte after the last MFT FRS
//           SegmentsInMft is initialized
//
//
        NESTED_ENTRY(SetupMft)
        NESTED_SETUP(3,6,8,0)
        PROLOGUE_END

        rpT0         = t22
        rpT1         = t21
        rpT2         = t20
        rpT3         = t19
        rAttrList    = loc2
        rAttrLength  = loc3
        rNextBuffer  = loc4
        rBytesPerFrs = loc5

//
// Setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

//
//      Update MftFrs with NewSeg base offset
//
        movl    rpT0 = MftFrs
        ld4     t0 = [rpT0]

        movl    t1 = NewSeg
        add     t2 = t0, t1

        st4     [rpT0] = t2


//      Initialize SegmentsInMft and NextBuffer as if the MFT
//      had only one FRS.
//
        movl    t0 = 1
        movl    rpT0 = SegmentsInMft
        st4     [rpT0] = t0

        movl    rpT1 = MftFrs
        ld4     t1 = [rpT1]

        movl    rpT2 = BytesPerFrs
        ld4     rBytesPerFrs = [rpT2]

        add     rNextBuffer = t1, rBytesPerFrs
        movl    rpT3 = NextBuffer
        st4     [rpT3] = t3

//      Read FRS 0 into the first MFT FRS buffer, being sure
//      to resolve the Update Sequence Array.
//

        movl    rpT0 = MftStartLcn
        ld8     out0 = [rpT0]

        movl    rpT1 = SectorsPerCluster
        ld8     out1 = [rpT1]

        mov     ap = sp
        br.call.sptk.many brp = Multiply

        movl    rpT0 = SectorBase          // SectorBase = mft starting sector
        st4     [rpT0] = v0

        movl    rpT0 = SectorsPerFrs
        ld8     t0 = [rpT0]

        movl    rpT0 = SectorCount        // SectorCount = SectorsPerFrs
        st2     [rpT0] = t0

        movl    rpT0 = MftFrs
        ld4     t0 = [rpT0]

        movl    rpT0 = SectorBase
        ld4     out0 = [rpT0]

        // Sector count is zero for some reason.  Manually set to 1
        //
        movl    rpT1 = SectorCount
        ld4     out1 = [rpT1]

        movl    rpT0 = MftFrs
        ld4     out2 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = ReadSectors

        movl    rpT0 = MftFrs
        ld4     out0 = [rpT0]

#ifdef MFT_FRS
        movl    t1 = NewSeg
        add     out0 = t0, t1
#endif

        mov     ap = sp
        br.call.sptk.many brp = MultiSectorFixup

//      Determine whether the MFT has an Attribute List attribute

        movl    rpT0 = MftFrs
        ld4     out0 = [rpT0]

#ifdef MFT_FRS
        movl    t1 = NewSeg
        add     out0 = t0, t1
#endif

        movl    out1 = $ATTRIBUTE_LIST
        mov     out2 = zero
        mov     out3 = zero

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

        cmp.eq  pt0, pt1 = zero, v0    // If there's no Attribute list,
(pt0)   br.cond.sptk.clr SetupMft99    // we're done!

//      Read the attribute list.
//      v0 -> attribute list attribute
//
        mov     out0 = v0                  // out0 -> attribute list attribute
        mov     out1 = rAttrList           // rAttrList -> attribute list buffer
        mov     ap = sp
        br.call.sptk.many brp = ReadWholeAttribute

//      Now, traverse the attribute list looking for the first
//      entry for the $DATA type.  We know it must have at least
//      one.
//
//      rAttrList -> first attribute list entry
//
SetupMft10:
        add     rpT0 = ATTRLIST_AttributeTypeCode, rAttrList
        ld4     t0 = [rpT0]
        movl    t1 = $DATA

        cmp.eq  pt0, pt1 = t0, t1
(pt0)   br.cond.sptk.clr SetupMft20

        add     rpT0 = ATTRLIST_RecordLength, rAttrList
        ld4     t0 = [rpT0]

        add     rAttrList = rAttrList, t0
        br.cond.sptk.clr SetupMft10

SetupMft20:
//      Scan forward through the attribute list entries for the
//      $DATA attribute, reading each referenced FRS.  Note that
//      there will be at least one non-$DATA entry after the entries
//      for the $DATA attribute, since there's a $BITMAP.
//
//      rAttrList     -> Next attribute list entry
//      rNextBuffer   -> Target for next read
//      SegmentsInMft == number of MFT segments read so far
//
        add     rpT0 = ATTRLIST_AttributeTypeCode, rAttrList
        ld4     t0 = [rpT0]
        movl    t1 = $DATA

        cmp.eq  pt0, pt1 = t0, t1
(pt1)   br.cond.sptk.clr SetupMft99

//      Read the FRS referred to by this attribute list entry into
//      the next buffer, and increment rNextBuffer and SegmentsInMft.
//
        add     rpT0 = ATTRLIST_SegmentReference, rAttrList
        add     rpT0 = REF_SegmentNumberLowPart, rAttrList
        ld4     out0 = [rpT0]

        mov     out1 = rNextBuffer
        mov     ap = sp
        br.call.sptk.many brp = ReadFrs

//      Increment rNextBuffer and SegmentsInMft

        add     rNextBuffer = rNextBuffer, rBytesPerFrs

        movl    rpT0 = SegmentsInMft
        ld4     t0 = [rpT0]

        add     t0 = 1, t0
        st4     [rpT0] = t0

//      Go on to the next attribute list entry

        add     rAttrList = rAttrList, rAttrLength
        br.cond.sptk.clr SetupMft20

SetupMft99:
        movl    rpT0 = NextBuffer
        st4     [rpT0] = rNextBuffer

        add     sp = STACK_SCRATCH_AREA, sp      // readjust sp before exiting

        NESTED_RETURN
        NESTED_EXIT(SetupMft)

//****************************************************************************
//
//   ComputeMftLcn   --  Computes the LCN for a cluster of the MFT
//
//
//   ENTRY:  in0 == VCN
//
//   EXIT:   v0  == LCN
//
//   USES:   ALL
//
        NESTED_ENTRY(ComputeMftLcn)
        NESTED_SETUP(3,5,8,0)
        PROLOGUE_END

        rpT0      = t22
        rFrsCount = loc2
        rNextFrs  = loc3
        rVcn      = loc4

//
// Setup sp and ap for all function calls
//
        add     sp = -STACK_SCRATCH_AREA, sp
        mov     ap = sp

        mov     rVcn = in0               // rVcn = VCN
        movl    rpT0 = SegmentsInMft     // rFrsCount = # of FRS's to search
        ld4     rFrsCount = [rpT0]

        movl    rpT0 = MftFrs            // rNextFrs -> first FRS to search
        ld4     rNextFrs = [rpT0]  

MftLcn10:
//      rNextFrs  -> Next FRS to search
//      rFrsCount == number of remaining FRS's to search
//      rVcn      == VCN
//
        mov     out0 = rNextFrs
        movl    out1 = $DATA
        mov     out2 = zero
        mov     out3 = zero

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

        cmp.eq  pt0, pt1 = zero, v0
(pt0)   br.cond.sptk.clr BootErr$he       // No $DATA attribute in this FRS!

        mov     out0 = rVcn               // out0 = VCN
        mov     out1 = v0                 // out1 -> attribute

        mov     ap = sp
        br.call.sptk.many brp = ComputeLcn

        cmp.eq  pt0, pt1 = zero, t0       // t0 is return value of ComputeLcn
(pt0)   br.cond.sptk.clr MftLcn20
        mov     v0 = t0

        add     sp = STACK_SCRATCH_AREA, sp  // readjust sp before exiting

        NESTED_RETURN

MftLcn20:
//
//      Didn't find the VCN in this FRS; try the next one.
//
        movl    rpT0 = BytesPerFrs        // rNextFrs -> next FRS
        ld4     t0 = [rpT0]
        add     rNextFrs = rNextFrs, t0

	br.cond.sptk.clr MftLcn10         // decrement ecx and try next FRS

//      This VCN was not found.
//
        mov     v0 = zero

        add     sp = STACK_SCRATCH_AREA, sp  // readjust sp before exiting

        NESTED_RETURN
        NESTED_EXIT(ComputeMftLcn)

//****************************************************************************
//
//  ReadMftSectors - Read sectors from the MFT
//
//  ENTRY:  in0 == starting VBN
//          in1 == number of sectors to read
//          in2 == Target buffer
//
//  USES:   none (preserves all registers with SAVE_ALL/RESTORE_ALL)
//
        NESTED_ENTRY(ReadMftSectors)
        NESTED_SETUP(3,4,8,0)
        PROLOGUE_END

        rpT0               = t22
        rVbn               = in0
        rSectorCount       = in1
        rBuffer            = in2
        rSectorsPerCluster = loc2
        rBytesPerCluster   = loc3

// Reserve the stack scratch area
        add     sp = -STACK_SCRATCH_AREA, sp

        movl    rpT0 = BytesPerCluster
        ld4     rBytesPerCluster = [rpT0]

RMS$Again:

// Divide the VBN by SectorsPerCluster to get the VCN

        mov     out0 = in0

        movl    rpT0 = SectorsPerCluster
        ld1     rSectorsPerCluster = [rpT0]
        mov     out1 = rSectorsPerCluster

        movl    out2 = Result
        movl    out3 = Remainder

        mov     ap = sp
        br.call.sptk.many brp = Divide

        movl    rpT0 = Result
        ld4     out0 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = ComputeMftLcn

        cmp.eq  pt0, pt1 = zero, v0     // LCN equal to zero?
(pt0)   br.cond.sptk.clr BootErr$he     // zero is not a possible LCN

// Change the LCN back into a LBN and add the remainder back in to get
// the sector we want to read, which goes into SectorBase.
//

        mov     out0 = v0
        mov     out1 = rSectorsPerCluster

        mov     ap = sp
        br.call.sptk.many brp = Multiply         // v0 = cluster first LBN

        movl    rpT0 = Remainder
        ld4     t0 = [rpT0]

        add     t1 = v0, t0                      // t1 = desired LBN
        movl    rpT0 = SectorBase
        st4     [rpT0] = t1

//
// Figure out how many sectors to read this time// we never attempt
// to read more than one cluster at a time.
//

        cmp.le  pt0, pt1 = rSectorCount,rSectorsPerCluster
(pt0)   br.cond.sptk.clr RMS10

//
// Read only a single cluster at a time, to avoid problems with fragmented
// runs in the mft.
//

        movl    rpT0 = SectorCount
        st2     [rpT0] = rSectorsPerCluster    // this time read 1 cluster
        sub     rSectorCount = rSectorCount, rSectorsPerCluster // sect. remain

        add     rVbn = rVbn, rSectorsPerCluster // VBN += sectors this read

        br.cond.sptk.clr RMS20

RMS10:

        add     rVbn = rVbn, rSectorCount     // VBN += sectors this read

        movl    rpT0 = SectorCount
        st2     [rpT0] = rSectorCount
        mov     rSectorCount = zero           // remaining sector count (0)

RMS20:


//   The target buffer was passed in es:edi, but we want it in es:bx.
//   Do the conversion.
//

        movl    rpT0 = SectorBase
        ld4     out0 = [rpT0]

        movl    rpT0 = SectorCount
        ld2     out1 = [rpT0]
        mov     out2 = rBuffer

        mov     ap = sp
        br.call.sptk.many brp = ReadSectors

        add     rBuffer = rBuffer, rBytesPerCluster 
        cmp.gt  pt0, pt1 = rSectorCount, zero    // are we done?
(pt0)   br.cond.sptk.clr RMS$Again               // repeat until desired == 0

        add     sp = STACK_SCRATCH_AREA, sp      // Reclaim the scratch area

        NESTED_RETURN
        NESTED_EXIT(ReadMftSectors)


//****************************************************************************
//
//  ReadFrs - Read an FRS
//
//  ENTRY:  in0 == FRS number
//          in1 == Target buffer
//
//  USES:  none (preserves all registers with SAVE_ALL/RESTORE_ALL)
//
        NESTED_ENTRY(ReadFrs)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

        rpT0           = t22
        rSectorsPerFrs = loc2

//
// Adjust sp with sratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        movl    rpT0 = SectorsPerFrs
        ld4     rSectorsPerFrs = [rpT0]

        mov     out0 = in0             // FRS number
        mov     out1 = rSectorsPerFrs  // Sectors per FRS

        mov     ap = sp
        br.call.sptk.many brp = Multiply

        mov     out0 = v0             // out0 = starting VBN
        mov     out1 = rSectorsPerFrs // out1 = number of sectors to read
        mov     out2 = in1            // out2 = target buffer

        mov     ap = sp
        br.call.sptk.many brp = ReadMftSectors

        mov     out0 = in1            // out2 = target buffer
        mov     ap = sp
        br.call.sptk.many brp = MultiSectorFixup

        add     sp = STACK_SCRATCH_AREA, sp     // Readjust sp before exiting

        NESTED_RETURN
        NESTED_EXIT(ReadFrs)

//****************************************************************************
//
//  ReadIndexBlock - read an index block from the root index.
//
//  ENTRY:  in0 == Block number
//
//  USES:  none (preserves all registers with SAVE_ALL/RESTORE_ALL)
//
        NESTED_ENTRY(ReadIndexBlock)
        NESTED_SETUP(3,3,8,0)

        rpT0      = t22
        rpT1      = t21
        rpT2      = t20
        rBlock    = in0
        rBuffer   = loc2
        
//
// Setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        mov     out0 = rBlock
        movl    rpT0 = SectorsPerIndexBlock
        ld4     out1 = [rpT0] 

        mov     ap = sp
        br.call.sptk.many brp = Multiply

        mov     out0 = v0                     // v0 = first VBN to read

        movl    rpT0 = IndexAllocation
        ld4     out1 = [rpT0]         // out1 -> $INDEX_ALLOCATION attribute

        movl    rpT1 = SectorsPerIndexBlock   // out2 == Sectors to read
        ld4     out2 = [rpT1]

        movl    rpT2 = IndexBlockBuffer       // out3 -> index block buffer
        ld4     rBuffer = [rpT2]
        mov     out3 = rBuffer

        mov     ap = sp
        br.call.sptk.many brp = ReadIndexBlockSectors

        mov     out0 = rBuffer
        mov     ap = sp
        br.call.sptk.many brp = MultiSectorFixup

        add     sp = STACK_SCRATCH_AREA, sp   // Readjust sp before exiting

        NESTED_RETURN
        NESTED_EXIT(ReadIndexBlock)

//****************************************************************************
//
//  IsBlockInUse - Checks the index bitmap to see if an index
//                 allocation block is in use.
//
//  ENTRY:  in0 == block number
//
//  EXIT:   Carry flag clear if block is in use
//          Carry flag set   if block is not in use.
//
        NESTED_ENTRY(IsBlockInUse)
        NESTED_SETUP(3,5,8,0)
        PROLOGUE_END

        rpT0               = t22
        rBlock             = in0
        rTest              = loc2
        rByte              = loc3
        rBit               = loc4

//
// Reserve stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        movl    rpT0 = IndexBitmapBuffer
        ld4     rTest = [rpT0]

        mov     t0 = rBlock                // t0 = block number
        shr     rByte = t0, 3              // rByte = byte number
        and     rBit = 7, rBlock           // rBit  = bit number in byte

        add     rTest = rTest, rByte       // rTest = byte to test
        movl    t0 = 1
        shl     t0 = t0, rBit              // t0 = mask

        ld1     t1 = [rTest]
        and     t2 = t1, t0

        cmp.eq  pt0, pt1 = t2, zero
(pt0)   br.cond.sptk.clr IBU10

        mov     v0 = zero    // Block is not in use.
        br.cond.sptk.clr IBU20

IBU10:  movl    v0 = 1       // Block is in use.

IBU20:  add     sp = STACK_SCRATCH_AREA, sp  // restore the original sp

        NESTED_RETURN
        NESTED_EXIT(IsBlockInUse)

//****************************************************************************
//
//  ComputeLcn - Converts a VCN into an LCN
//
//  ENTRY:  in0 -> VCN
//          in1 -> Attribute
//
//  EXIT:   t0 -> LCN  (zero indicates not found)
//          t1 -> Remaining run length
//
//  USES:   ALL.
//
        NESTED_ENTRY(ComputeLcn)
        NESTED_SETUP(3,7,8,0)
        PROLOGUE_END

        rpT0            = t22
        rVcn            = in0               // VCN
        rAttribute      = in1               // Attribute
        rpMappingPair   = loc2
        rDeltaVcn       = loc3
        rCurrentVcn     = loc4
        rCurrentLcn     = loc5
        rNextVcn        = loc6

//
// Setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        add     rpT0 = ATTR_FormCode, rAttribute
        ld1     t0 = [rpT0]
  
        cmp.eq  pt0, pt1 = NONRESIDENT_FORM, t0
(pt1)   br.cond.sptk.clr clcn99             // This is a resident attribute.

clcn10:

//
//      See if the desired VCN is in range.
//

        add     rpT0 = NONRES_HighestVcn+LowPart, rAttribute 
        ld4     t0 = [rpT0]                // t0 = HighestVcn
        cmp.gt  pt0, pt1 = rVcn, t0
(pt0)   br.cond.sptk.clr clcn99            // VCN is greater than HighestVcn

        add     rpT0 = NONRES_LowestVcn+LowPart, rAttribute 
        ld4     rCurrentVcn = [rpT0]       // rCurrentVcn = LowestVcn
        cmp.lt  pt0, pt1 = rVcn, rCurrentVcn
(pt0)   br.cond.sptk.clr clcn99            // VCN is less than LowestVcn

clcn20:
        add     rpT0 = NONRES_MappingPairOffset, rAttribute
        ld2     t0 = [rpT0]            

        add     rpMappingPair = rAttribute, t0
        ld1     t0 = [rpMappingPair]

        mov     rCurrentLcn = zero         // Initialize Current LCN

clcn30:
        cmp.eq  pt0, pt1 = zero, t0       // if count byte is zero...
(pt0)   br.cond.sptk.clr clcn99           // ... we're done (and didn't find it)

//      Update CurrentLcn
//
        mov     out0 = rpMappingPair

        mov     ap = sp
        br.call.sptk.many brp = LcnFromMappingPair
        add     rCurrentLcn = rCurrentLcn, v0 

        mov     out0 = rpMappingPair
        mov     ap = sp
        br.call.sptk.many brp = VcnFromMappingPair  // out0 = previous out0

        mov     rDeltaVcn = v0

//      rVcn          == VCN to find
//      rpMappingPair -> Current mapping pair count byte
//      rDeltaVcn     == DeltaVcn for current mapping pair
//      rCurrentVcn   == Current VCN
//      rCurrentLcn   == Current LCN
//
        add     rNextVcn = rDeltaVcn, rCurrentVcn  // NextVcn

        cmp.lt  pt0, pt1 = rVcn, rNextVcn    // If target < NextVcn ...
(pt0)   br.cond.sptk.clr clcn80      //   ... we found the right mapping pair.

//      Go on to next mapping pair.
//
        mov     rCurrentVcn = rNextVcn // CurrentVcn = NextVcn

        ld1     t0 = [rpMappingPair]   // t0 = count byte
        mov     t1 = t0                // t1 = count byte
        and     t1 = 0x0f, t1          // t1 = number of vcn bytes
        shr     t0 = t0, 4             // t0 = number of lcn bytes

        add     rpMappingPair = rpMappingPair, t0
        add     rpMappingPair = rpMappingPair, t1
        add     rpMappingPair = 1, rpMappingPair // -> next count byte

        br.cond.sptk.clr clcn30

clcn80:
//      We found the mapping pair we want.
//
//      rVcn == target VCN
//      rMappingPair -> mapping pair count byte
//      rCurrentVcn == Starting VCN of run
//      rNextVcn == Next VCN (ie. start of next run)
//      rCurrentLcn == starting LCN of run
//
        sub     t1 = rNextVcn, rVcn    // t1 = remaining run length
        sub     t0 = rVcn, rCurrentVcn // t0 = offset into run
        add     t0 = t0, rCurrentLcn   // t0 = LCN to return

        add     sp = STACK_SCRATCH_AREA, sp  // restore the original sp
        NESTED_RETURN

//      The target VCN is not in this attribute.

clcn99: mov     v0 = zero               // Not found.

        add     sp = STACK_SCRATCH_AREA, sp  // restore the original sp
        NESTED_RETURN
        NESTED_EXIT(ComputeLcn)

//****************************************************************************
//
//  VcnFromMappingPair
//
//  ENTRY:  in0 -> Mapping Pair count byte
//
//  EXIT:   v0  == DeltaVcn from mapping pair
//
//
        LEAF_ENTRY(VcnFromMappingPair)
        LEAF_SETUP(3,4,8,0)
        PROLOGUE_END

        rpMP  = in0
        rv    = loc2
        rVcn  = loc3

        ld1     rv = [rpMP]               // rv = count byte
        and     rv = 0x0f, rv             // rv = v

        cmp.eq  pt0, pt1 = zero, rv       // if rv is zero, volume is corrupt.
(pt1)   br.cond.sptk.clr VFMP5

        mov     v0 = zero
        br.cond.sptk.clr VFMP99

VFMP5:
        add     rpMP = rpMP, rv          // rpMP -> last byte of compressed vcn

        ld1     rVcn = [rpMP]
        sxt1    rVcn = rVcn

        add     rv  = -1, rv
        add     rpMP = -1, rpMP

//      rpMP -> Next byte to add in
//      rv == Number of bytes remaining
//      rVcn == Accumulated value
//
VFMP10: cmp.eq  pt0, pt1 = zero, rv      // When rv == 0, we're done.
(pt0)   br.cond.sptk.clr VFMP20

        shl     rVcn = rVcn, 8
        ld1     t0 = [rpMP]
        or      rVcn = rVcn, t0

        add     rpMP = -1, rpMP          // Back up through bytes to process.
        add     rv  = -1, rv             // One less byte to process.

        br.cond.sptk.clr VFMP10

VFMP20:
//      rVcn == Accumulated value to return

        movl    t0 = 0xffffffff         // return the lower 32-bits
        and     v0 = rVcn, t0

VFMP99:
        LEAF_RETURN
        LEAF_EXIT(VcnFromMappingPair)


//****************************************************************************
//
//  LcnFromMappingPair
//
//  ENTRY:  in0 -> Mapping Pair count byte
//
//  EXIT:   v0  == DeltaLcn from mapping pair
//
        LEAF_ENTRY(LcnFromMappingPair)
        LEAF_SETUP(3,5,8,0)
        PROLOGUE_END

        rpMP = in0
        rv   = loc2
        rl   = loc3
        rLcn = loc4

        ld1     rv = [rpMP]
        and     rv = 0xf, rv              // rv = v

        ld1     rl = [rpMP]
        shr     rl = rl, 4                // rl = l

        cmp.eq  pt0, pt1 = zero, rl       // if rl is zero, volume is corrupt.
(pt1)   br.cond.sptk.clr LFMP5

        mov     v0 = zero
        br.cond.sptk.clr LFMP99

LFMP5:
//      rpMP -> count byte
//      rl  == l
//      rv  == v
//

        add     rpMP = rpMP, rv          // rpMP -> last byte of compressed vcn
        add     rpMP = rpMP, rl          // rpMP -> last byte of compressed lcn

        ld1     rLcn = [rpMP]
        sxt1    rLcn = rLcn

        add     rl = -1, rl
        add     rpMP = -1, rpMP

//      rpMP  -> Next byte to add in
//      rl    == Number of bytes remaining
//      rLcn  == Accumulated value
//
LFMP10: cmp.eq  pt0, pt1 = zero, rl     // When rl == 0, we're done.
(pt0)   br.cond.sptk.clr LFMP20

        shl     rLcn = rLcn, 8
        ld1     t0 = [rpMP]
        or      rLcn = rLcn, t0

        add     rpMP = -1, rpMP         // Back up through bytes to process.
        add     rl  = -1, rl            // One less byte to process.

        br.cond.sptk.clr LFMP10

LFMP20:
//      rLcn == Accumulated value to return

        movl    t0 = 0xffffffff         // return the lower 32-bits
        and     v0 = rLcn, t0

LFMP99:

        LEAF_RETURN
        LEAF_EXIT(LcnFromMappingPair)


//***************************************************************************
//
// UpcaseName - Converts the name of the file to all upper-case
//
//      ENTRY:  in0 -> Name
//              in1 -> Length of name
//
//      USES:   none
//
        LEAF_ENTRY(UpcaseName)
        LEAF_SETUP(2,3,0,0)
        PROLOGUE_END

        rpName  = in0
        rLength = in1

        cmp.eq  pt0, pt1 = zero, rLength
(pt0)   br.cond.sptk.clr UN30

UN10:
        ld2     t0 = [rpName]
        cmp.gt  pt0, pt1 = 'a', t0      // if it's less than 'a'
(pt0)   br.cond.sptk.clr UN20           // leave it alone

        cmp.lt  pt0, pt1 = 'z', t0      // if it's greater than 'z'  
(pt0)   br.cond.sptk.clr UN20           // leave it alone.    

        movl    t1 = 'a' - 'A'          // the letter is lower-case--convert it.
        sub     t0 = t0, t1             
UN20:
        add     rpName = 2, rpName      // move on to next unicode character

        add     rLength = -1, rLength
        cmp.eq  pt0, pt1 = zero, rLength
(pt0)   br.cond.sptk.clr UN10

UN30: 
        LEAF_RETURN
        LEAF_EXIT(UpcaseName)

//****************************************************************************
//
//  FindFile - Locates the index entry for a file in the root index.
//
//  ENTRY:  in0 -> name to find
//          in1 == length of file name in characters
//
//  EXIT:   v0  -> Index Entry.  NULL to indicate failure.
//
//  USES:   ALL
//
        NESTED_ENTRY(FindFile)
        NESTED_SETUP(3,4,8,0)
        PROLOGUE_END

        rpT0             = t22
        rpT1             = t21
        rpName           = in0
        rLength          = in1
        rIndexAllocation = loc2
        rBlock           = loc3
//
// Setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

//      First, search the index root.
//
//      rpName  -> name to find
//      rLength == name length
//
        movl    rpT0 = IndexRoot
        ld4     t0 = [rpT0]        

        add     rpT1 = RES_ValueOffset, t0
        ld2     t1 = [rpT1]
        add     t2 = t0, t1

        add     out0 = IR_IndexHeader, t2
        mov     out1 = rpName
        mov     out2 = rLength

        mov     ap = sp
        br.call.sptk.many brp = LocateIndexEntry

        cmp.eq  pt0, pt1 = v0, zero
(pt0)   br.cond.sptk.clr FindFile20

//      Found it in the root!  The result is already in eax.
//      Clean up the stack and return.
//
        add     sp = STACK_SCRATCH_AREA, sp
        NESTED_RETURN

FindFile20:
//
//      We didn't find the index entry we want in the root, so we have to
//      crawl through the index allocation buffers.
//
        movl    rpT0 = IndexAllocation
        ld4     rIndexAllocation = [rpT0]

        cmp.eq  pt0, pt1 = t0, zero
(pt1)   br.cond.sptk.clr FindFile30

//      There is no index allocation attribute; clean up
//      the stack and return failure.
//
        mov     v0 = zero
        add     sp = STACK_SCRATCH_AREA, sp
        NESTED_RETURN

FindFile30:
//
//      Search the index allocation blocks for the name we want.
//      Instead of searching in tree order, we'll just start with
//      the last one and work our way backwards.
//
        add     rpT1 = NONRES_HighestVcn+LowPart, rIndexAllocation
        ld4     t1 = [rpT1]                 // t1 = HighestVcn
        add     out0 = 1, t1                // out0 = clusters in attribute

        movl    rpT2 = BytesPerCluster      
        ld4     out1 = [rpT2]

        mov     ap = sp
        br.call.sptk.many brp = Multiply    // v0 = bytes in attribute

        mov     out0 = v0
        movl    rpT0 = BytesPerIndexBlock
        ld4     out1 = [rpT0]

        movl    out2 = Result
        movl    out3 = Remainder

        mov     ap = sp
        br.call.sptk.many brp = Divide      // convert bytes to index blocks

        movl    rpT0 = Result
        ld4     rBlock = [rpT0]             // number of blocks to process

FindFile40:
        cmp.eq  pt0, pt1 = rBlock, zero
(pt0)   br.cond.sptk.clr FindFile90

        add     rBlock = -1, rBlock          // rBlock == number of next block to process

//
//      See if the block is in use; if not, go on to next.
//
        mov     out0 = rBlock
        mov     ap = sp
        br.call.sptk.many brp = IsBlockInUse

        cmp.eq  pt0, pt1 = v0, zero
(pt1)   br.cond.sptk.clr FindFile40          // v0 == zero if not in use

//      rBlock  == block number to process
//      rLength == name length
//      rpName  -> name to find
//
        mov     out0 = rBlock
        mov     ap = sp
        br.call.sptk.many brp = ReadIndexBlock

//      rpName -> name to find
//      rLength == name length in characters
//
//      Index buffer to search is in index allocation block buffer.
//
        movl    rpT0 = IndexBlockBuffer        // t0 -> Index allocation block
        ld4     t0 = [rpT0]

        add     out0 = IB_IndexHeader, t0      // out0 -> Index Header
        mov     out1 = rpName
        mov     out2 = rLength

        mov     ap = sp
        br.call.sptk.many brp = LocateIndexEntry  // v0 -> found entry

        cmp.eq  pt0, pt1 = v0, zero
(pt0)   br.cond.sptk.clr FindFile40

//      Found it!
//
//      v0      -> Found entry
//
        add      sp = STACK_SCRATCH_AREA, sp    // restore the original sp
        NESTED_RETURN

FindFile90:
//
//      Name not found.
//
        mov      v0 = zero                      // zero out v0.

        add      sp = STACK_SCRATCH_AREA, sp    // restore the original sp
        NESTED_RETURN
        NESTED_EXIT(FindFile)

#ifdef DEBUG
#ifdef NOT_YET_PORTED
;****************************************************************************
;
;   DumpIndexBlock - dumps the index block buffer
;
DumpIndexBlock proc near

    SAVE_ALL

    mov     esi, IndexBlockBuffer

    mov     ecx, 20h    ; dwords to dump

DIB10:

    test    ecx, 3
    jnz     DIB20
    call    DebugNewLine

DIB20:

    lodsd
    call    PrintNumber
    loop    DIB10

    RESTORE_ALL
    ret

DumpIndexBlock endp

;****************************************************************************
;
;   DebugNewLine
;
DebugNewLine proc near

    SAVE_ALL

    xor     eax, eax
    xor     ebx, ebx

    mov     al, 0dh
    mov     ah, 14
    mov     bx, 7
    int     10h

    mov     al, 0ah
    mov     ah, 14
    mov     bx, 7
    int     10h

    RESTORE_ALL
    ret

DebugNewLine endp

;****************************************************************************
;
;   DebugPrint  -   Display a debug string.
;
;   ENTRY:  DS:SI  -> null-terminated string
;
;   USES:   None.
;
.286
DebugPrint proc near

    pusha

DbgPr20:

    lodsb
    cmp     al, 0
    je      DbgPr30

    mov     ah, 14  ; write teletype
    mov     bx, 7   ; attribute
    int     10h     ; print it
    jmp     DbgPr20

DbgPr30:

    popa
    nop
    ret

DebugPrint endp

;****************************************************************************
;
;
;   PrintNumber
;
;   ENTRY: EAX == number to print
;
;   PRESERVES ALL REGISTERS
;
.386
PrintNumber proc near


    SAVE_ALL

    mov     ecx, 8      ; number of digits in a DWORD

PrintNumber10:

    mov     edx, eax
    and     edx, 0fh    ; edx = lowest-order digit
    push    edx         ; put it on the stack
    shr     eax, 4      ; drop low-order digit
    loop    PrintNumber10

    mov     ecx, 8      ; number of digits on stack.

PrintNumber20:

    pop     eax         ; eax = next digit to print
    cmp     eax, 9
    jg      PrintNumber22

    add     eax, '0'
    jmp     PrintNumber25

PrintNumber22:

    sub     eax, 10
    add     eax, 'A'

PrintNumber25:

    xor     ebx, ebx

    mov     ah, 14
    mov     bx, 7
    int     10h
    loop    PrintNumber20

;   Print a space to separate numbers

    mov     al, ' '
    mov     ah, 14
    mov     bx, 7
    int     10h

    RESTORE_ALL

    call    Pause

    ret

PrintNumber endp
#endif NOT_YET_PORTED


//****************************************************************************
//
//  Debug0 - Print debug string 0 -- used for checkpoints in mainboot
//
        NESTED_ENTRY(Debug0)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

        add     sp = STACK_SCRATCH_AREA, sp

        movl    out0 = DbgString0
        mov     ap = sp
        br.call.sptk.many brp = BootErr$Print

        add     sp = -STACK_SCRATCH_AREA, sp

        NESTED_RETURN
        NESTED_EXIT(Debug0)

//****************************************************************************
//
//  Debug1 - Print debug string 1 --
//
        NESTED_ENTRY(Debug1)
        NESTED_SETUP(3,3,8,0)

        add     sp = STACK_SCRATCH_AREA, sp

        movl    out0 = DbgString1
        mov     ap = sp
        br.call.sptk.many brp = BootErr$Print

        add     sp = -STACK_SCRATCH_AREA, sp

        NESTED_RETURN
        NESTED_EXIT(Debug1)

//****************************************************************************
//
//  Debug2 - Print debug string 2
//
        NESTED_ENTRY(Debug2)
        NESTED_SETUP(3,3,8,0)

        add     sp = -STACK_SCRATCH_AREA, sp

        movl    out0 = DbgString2
        mov     ap = sp
        br.call.sptk.many brp = BootErr$Print

        add     sp = STACK_SCRATCH_AREA, sp

        NESTED_RETURN
        NESTED_EXIT(Debug2)

//****************************************************************************
//
//   Debug3 - Print debug string 3 --
//
        NESTED_ENTRY(Debug3)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

        add     sp = -STACK_SCRATCH_AREA, sp

        movl    out0 = DbgString3
        mov     ap = sp
        br.call.sptk.many brp = BootErr$Print

        add     sp = STACK_SCRATCH_AREA, sp

        NESTED_RETURN
        NESTED_EXIT(Debug3)

//****************************************************************************
//
//   Debug4 - Print debug string 4
//
        NESTED_ENTRY(Debug4)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

        add     sp = -STACK_SCRATCH_AREA, sp

        movl    out0 = DbgString4
        mov     ap = sp
        br.call.sptk.many brp = BootErr$Print

        add     sp = STACK_SCRATCH_AREA, sp

        NESTED_RETURN
        NESTED_EXIT(Debug4)

#ifdef NOT_YET_PORTED
;****************************************************************************
;
;   Pause - Pause for about 1/2 a second.  Simply count until you overlap
;           to zero.
;
Pause proc near

    push eax
    mov  eax, 0fff10000h

PauseLoopy:
    inc  eax

    or   eax, eax
    jnz  PauseLoopy

    pop  eax
    ret

Pause endp
#endif NOT_YET_PORTED

#endif DEBUG


//*************************************************************************
//
//      LoadIndexFrs  -  For the requested index type code locate and
//                       load the associated Frs.
//
//      ENTRY: in0 - requested index type code
//             in1 - Points to empty Frs buffer
//
//      EXIT:  v0  - points to offset in Frs buffer of requested index type
//                   code or Zero if not found.
//      USES:  All
//
        NESTED_ENTRY(LoadIndexFrs)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

        rTypeCode = in0                   // index type code
        rpFrs     = in1                   // pointer to FRS

//
// setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        movl    out0 = ROOT_FILE_NAME_INDEX_NUMBER
        mov     out1 = rpFrs

        mov     ap = sp
        br.call.sptk.many brp = ReadFrs

        mov     out0 = rpFrs              // FRS to search
        mov     out1 = rTypeCode          // index type code
        movl    out3 = index_name         // Attribute name

        movl    rpT0 = index_name_length  // Attribute name length  
        ld2     out2 = [rpT0]

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

        cmp.eq  pt0, pt1 = v0, zero
(pt1)   br.cond.sptk.clr LoadIndexFrs$Exit // if found in root return

//
//      if not found in current Frs, search in attribute list
//
        mov     out0 = rTypeCode       // type code
        mov     out1 = rpFrs           // FRS to search

        mov     ap = sp
        br.call.sptk.many brp = SearchAttrList  // search attribute list for FRN
                                       // of specified ($INDEX_ROOT,
                                       // $INDEX_ALLOCATION, or $BITMAP)

        // v0 - holds FRN for Frs, or Zero

        cmp.eq  pt0, pt1 = v0, zero         // if we cann't find it in attribute
(pt0)   br.cond.sptk.clr LoadIndexFrs$Exit  // list then we are hosed

//      We should now have the File Record Number where the index for the
//      specified type code we are searching for is,  load this into the
//      Frs target buffer.
//
//      EAX - holds FRN
//      EBX - holds type code
//      EDI - holds target buffer

        mov     out0 = v0
        mov     out1 = rTypeCode
        mov     out2 = rpFrs

        mov     ap = sp
        br.call.sptk.many brp = ReadFrs

//
//      Now determine the offset in the Frs of the index
//

        mov     out0 = rpFrs            // Frs to search
        mov     out1 = rTypeCode        // FRS Type Code

        movl    rpT0 = index_name_length
        ld4     out2 = [rpT0]           // Attribute name length
        movl    out3 = index_name

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

//      v0 -  holds offset or Zero.

LoadIndexFrs$Exit:

        add     sp = STACK_SCRATCH_AREA, sp          // restore original sp

        NESTED_RETURN
        NESTED_EXIT(LoadIndexFrs)


//****************************************************************************
//
//  SearchAttrList
//
//  Search the Frs for the attribute list.  Then search the attribute list
//  for the specifed type code.  When you find it return the FRN in the
//  attribute list entry found or Zero if no match found.
//
//  ENTRY: in0 - type code to search attrib list for
//         in1 - Frs buffer holding head of attribute list
//  EXIT:  v0  - FRN file record number to load, Zero if none.
//
//  USES: All
//
        NESTED_ENTRY(SearchAttrList)
        NESTED_SETUP(2,4,8,0)
        PROLOGUE_END

        rTypeCode = in0
        rFrs      = in1
        rAttrList = loc2

//
// Setup stack scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

        mov     out0 = rFrs
        mov     out1 = $ATTRIBUTE_LIST    // Attribute type code
        mov     out2 = 0                  // Attribute name length
        mov     out3 = 0                  // Attribute name

        mov     ap = sp
        br.call.sptk.many brp = LocateAttributeRecord

        cmp.eq  pt0, pt1 = v0, zero       // If there's no Attribute list,
(pt0)   br.cond.sptk.clr SearchAttrList$NotFoundIndex1 // We are done

//      Read the attribute list.
//      eax -> attribute list attribute

        mov     out0 = v0       // out0 -> attribute list attribute
        movl    out1 = AttrList // out1 -> attribute list buffer

        mov     ap = sp
        br.call.sptk.many brp = ReadWholeAttribute

        movl    rpT0 = AttrList
        ld4     rAttrList = [rpT0]   // rAttrList -> first attribute list entry

//      Now, traverse the attribute list looking for the entry for
//      the Index type code.
//
//      rAttrList -> first attribute list entry
//

SearchAttrList$LookingForIndex:

#ifdef DEBUG

        add     rpT0 = ATTRLIST_AttributeTypeCode, rAttrList
        ld4     out0 = [rpT0]
        mov     ap = sp
        br.call.sptk.many brp = PrintNumber

        add     rpT0 = ATTRLIST_RecordLength, rAttrList
        ld4     out0 = [rpT0]
        mov     ap = sp
        br.call.sptk.many brp = PrintNumber

        mov     out0 = rAttrList
        mov     ap = sp
        br.call.sptk.many brp = PrintNumber

        add     out0 = ATTRLIST_Name, rAttrList
        mov     ap = sp
        br.call.sptk.many brp = PrintName

#endif

        add     rpT0 = ATTRLIST_AttributeTypeCode, rpT0
        ld4     t0 = [rpT0]
        cmp.eq  pt0, pt1 = rTypeCode, t0
(pt0)   br.cond.sptk.clr SearchAttrList$FoundIndex

        movl    t1 = $END
        cmp.eq  pt0, pt1 = t0, t1         // reached invalid attribute
(pt0)   br.cond.sptk.clr SearchAttrList$NotFoundIndex2  // so must be at end

        add     rpT0 = ATTRLIST_RecordLength, rpT0
        ld4     t0 = [rpT0]
        cmp.eq  pt0, pt1 = 0, t0
(pt0)   br.cond.sptk.clr SearchAttrList$NotFoundIndex2 //reached end of list and
                                                       // nothing found

        add     rAttrList = rAttrList, t0              // Next attribute
        br.cond.sptk.clr SearchAttrList$LookingForIndex

SearchAttrList$FoundIndex:

        //  found the index, return the FRN

        add    rpT0 = ATTRLIST_SegmentReference, rAttrList
        add    rpT0 = REF_SegmentNumberLowPart, rAttrList
        ld4     v0 = [rpT0]

        NESTED_RETURN

SearchAttrList$NotFoundIndex1:
        // pop     ecx
SearchAttrList$NotFoundIndex2:
        mov     v0 = zero

        add     sp = -STACK_SCRATCH_AREA, sp   // restore original sp 

        NESTED_RETURN
        NESTED_EXIT(SearchAttrList)

//
// Boot message printing, relocated from sector 0 to sace space
//
BootErr2:              // temporary label
BootErr$fnf:
        movl    out0 = TXT_MSG_SYSINIT_FILE_NOT_FD
        br.cond.sptk.clr BootErr2
BootErr$ntc:
        movl    out0 = TXT_MSG_SYSINIT_NTLDR_CMPRS
        br.cond.sptk.clr BootErr2

TXT_MSG_SYSINIT_BOOT_ERROR:     stringz  "A disk read error occurred"
TXT_MSG_SYSINIT_FILE_NOT_FD:    stringz  "NTLDR is missing"
TXT_MSG_SYSINIT_NTLDR_CMPRS:    stringz  "NTLDR is compressed"
TXT_MSG_SYSINIT_REBOOT:         stringz  "Press Ctrl+Alt+Del to restart"

#ifdef DEBUG
DbgString0      stringz  "Debug Point 0"
DbgString1      stringz  "Debug Point 1"
DbgString2      stringz  "Debug Point 2"
DbgString3      stringz  "Debug Point 3"
DbgString4      stringz  "Debug Point 4"
#endif DEBUG

#ifdef NOT_YET_PORTED
        .errnz  ($-_ntfsboot) GT 8192   ; <FATAL PROBLEM: main boot record exceeds available space>

        org     8192

BootCode ends

        end _ntfsboot
#endif NOT_YET_PORTED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\sal.h ===
typedef struct _IA32_BIOS_REGISTER_STATE {

    // general registers
    ULONG eax;    
    ULONG ecx;    
    ULONG edx;    
    ULONG ebx;    
    ULONG esp;    

    // stack registers
    ULONG ebp;    
    ULONG esi;    
    ULONG edi;    

    // eflags
    ULONG efalgs;    

    // instruction pointer
    ULONG cs;    
    ULONG ds;    
    ULONG es;    
    ULONG fs;    
    ULONG gs;    
    ULONG ss;    

    // LDT/GDT table pointer and LDT selector
    ULONGLONG *LDTTable;                      // 64 bit pointer to LDT table
    ULONGLONG *GDTTable;                      // 64 bit pointer to GDT table
    ULONG ldt_selector;
} IA32_BIOS_REGISTER_STATE, *PIA32_BIOS_REGISTER_STATE;

typedef union _BIT32_AND_BIT16 {
    ULONG Part32;
    struct {
        USHORT LowPart16;
        USHORT HighPart16;
    };
} BIT32_AND_BIT16;
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\miscc.c ===
#include "bldr.h"
#include "sal.h"
#include "ssc.h"
#include "ntimage.h"

#define SECTOR_SIZE 512

SalDiskReadWrite(
    ULONG ReadWrite,
    ULONG SectorsToRead,
    ULONG Cylinder,
    ULONG CylinderPerSector,
    ULONG Head,
    ULONG Drive,
    PUCHAR Buffer
    )
{
    IA32_BIOS_REGISTER_STATE IA32RegisterState;
    BIT32_AND_BIT16 IA32Register;

    if (ReadWrite == 0) {
        IA32Register.HighPart16 = 0x02;
    } else {
        IA32Register.HighPart16 = 0x03;
    }

    IA32Register.LowPart16 = SectorsToRead;
    IA32RegisterState.eax = IA32Register.Part32;

    IA32Register.HighPart16 = Cylinder;
    IA32Register.LowPart16 = CylinderPerSector;
    IA32RegisterState.ecx = IA32Register.Part32;

    IA32Register.HighPart16 = Head;
    IA32Register.LowPart16 = Drive;
    IA32RegisterState.edx = IA32Register.Part32;

    IA32RegisterState.es = 0;

    IA32Register.HighPart16 = 0;
    IA32Register.LowPart16 = Buffer;
    IA32RegisterState.ebx = IA32Register.Part32;
   
    // SAL_PROC(0x100,&IA32RegisterState,0,0,0,0,0,0,);
}

ReadSectors(
    ULONG SectorBase,
    USHORT SectorCount,
    PUCHAR Buffer)
{
    static char *VolumeName = "\\\\.\\D:";
    SSC_HANDLE VolumeHandle;
    SSC_DISK_REQUEST Request[1];
    SSC_DISK_COMPLETION DiskCompletion;
    LARGE_INTEGER VolumeNamePtr;
    LARGE_INTEGER RequestPtr;
    LARGE_INTEGER VolumeOffset;
    LARGE_INTEGER DiskCompletionPtr;

    VolumeNamePtr.LowPart = VolumeName;
    VolumeNamePtr.HighPart = 0;
    VolumeHandle = SscDiskOpenVolume (VolumeNamePtr, SSC_ACCESS_READ);

    Request[0].DiskBufferAddress.LowPart = Buffer;
    Request[0].DiskBufferAddress.HighPart = 0;
    Request[0].DiskByteCount = SectorCount * SECTOR_SIZE;
    RequestPtr.LowPart = Request;
    RequestPtr.HighPart = 0;

    VolumeOffset.LowPart = SectorBase * SECTOR_SIZE;
    VolumeOffset.HighPart = 0;
    SscDiskReadVolume(VolumeHandle, 1,  RequestPtr, VolumeOffset);

    DiskCompletion.VolumeHandle = VolumeHandle;
    DiskCompletionPtr.LowPart = &DiskCompletion;
    DiskCompletionPtr.HighPart = 0;
    while (1) {
        if (SscDiskWaitIoCompletion(DiskCompletionPtr) == 0) break;
    }
}

SalPrint(
    PUCHAR Buffer
    )
{
    IA32_BIOS_REGISTER_STATE IA32RegisterState;
    BIT32_AND_BIT16 IA32Register;
    ULONG i;

    for (i = 0; Buffer[i] != 0 && i < 256; i++) {
        IA32Register.HighPart16 = 14;
        IA32Register.LowPart16 = Buffer[i];
        IA32RegisterState.eax = IA32Register.Part32;

        IA32RegisterState.ebx = 7;
   
        // SAL_PROC(0x100,&IA32RegisterState,0,0,0,0,0,0,);
    }
}

Multiply(
    ULONG Multiplicant,
    ULONG Multiplier)
{
    return(Multiplicant * Multiplier);
}

Divide(
    ULONG Numerator,
    ULONG Denominator,
    PULONG Result,
    PULONG Remainder
    )
{
    float f1, f2;

    f1 = (float) Numerator;
    f2 = (float) Denominator;
    *Result = (ULONG) (f1 / f2);
    *Remainder = Numerator % Denominator;
}

memcpy(
    PUCHAR Source,
    PUCHAR Destination,
    ULONG Length
    )
{
    while (Length--) {
        *Destination++ = *Source++;
    }
}

memmove(
    PUCHAR Source,
    PUCHAR Destination,
    ULONG Length
    )
{
    while (Length--) {
        *Destination++ = *Source++;
    }
}

memset(
    PUCHAR Destination,
    ULONG Length,
    ULONG Value
    )
{
    while (Length--) {
        *Destination++ = Value;
    }
}

strncmp(
    PUCHAR String1,
    PUCHAR String2,
    ULONG Length
    )
{
    while (Length--) {
        if (*String1++ != *String2++)
            return(String1);
    }
    return(0);
}

PrintName(
    PUCHAR String
    )
{
    LARGE_INTEGER StringPtr;

    StringPtr.LowPart = String;
    StringPtr.HighPart = 0;
    SscDbgPrintf(StringPtr);
}

BootErr$Print(
    PUCHAR String
    )
{
    LARGE_INTEGER StringPtr;

    StringPtr.LowPart = String;
    StringPtr.HighPart = 0;
    SscDbgPrintf(StringPtr);
}

LoadNtldrSymbols()
{
    static char *NtfsBoot = "\\ntfsboot.exe";
    static char *Ntldr = "\\NTLDR";
    LARGE_INTEGER PhysicalPtr;

    PhysicalPtr.LowPart = NtfsBoot;
    PhysicalPtr.HighPart = 0;

    SscUnloadImage(PhysicalPtr, 
                   0x0, 
                   (ULONG)-1,
                   (ULONG)0);

    PhysicalPtr.LowPart = Ntldr;
    PhysicalPtr.HighPart = 0;

    SscLoadImage(PhysicalPtr,
                 0xE00000,
                 0x118A00,
                 0x7cc,
                 0,                   // process ID
                 1);                  // load count
}

ULONG
RelocateLoaderSections(
    ULONG NtldrBuffer
    )
/*++

Routine Description:

    The SU module is prepended to the OS loader file. The OS loader file
    is a coff++ file. This routine computes the beginning of the OS loader
    file, then relocates the OS loader's sections as if it were just
    loading the file from disk file.

Arguments:

    NtldrBuffer - Buffer that contains the NTLDR raw image from disk

Returns:

    Entry point of loader


--*/
{
    ULONG Start, End;
    USHORT Section;
    ULONG Source,Destination;
    ULONG VirtualSize;
    ULONG SizeOfRawData;
    PIMAGE_FILE_HEADER FileHeader;
    PIMAGE_OPTIONAL_HEADER OptionalHeader;
    PIMAGE_SECTION_HEADER SectionHeader;

    //
    // Make a pointer to the beginning of the loader's coff header
    //

    FileHeader = (PIMAGE_FILE_HEADER) NtldrBuffer;

    //
    // Validate the appended loader image by checking signatures.
    //   1st - is it an executable image?
    //   2nd - is the target environment the 386?
    //

    if ((FileHeader->Characteristics & IMAGE_FILE_EXECUTABLE_IMAGE) == 0) {
        SalPrint("SU_NTLDR_CORRUPT");
        return;
    }

    if (FileHeader->Machine != IMAGE_FILE_MACHINE_IA64) {
        SalPrint("SU_NTLDR_CORRUPT");
        return;
    }

    //
    // Make a pointer to the optional header in the header-buffer
    //

    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)((PUCHAR)FileHeader +
        sizeof(IMAGE_FILE_HEADER));

    //
    // Make a pointer to the first section in the header buffer
    //

    SectionHeader = (PIMAGE_SECTION_HEADER)((PUCHAR)OptionalHeader +
        FileHeader->SizeOfOptionalHeader);

    Start = OptionalHeader->ImageBase+SectionHeader->VirtualAddress;
    End   = Start + SectionHeader->SizeOfRawData;

    //
    // Loop and relocate each section with a non-zero RawData size
    //

    for (Section=FileHeader->NumberOfSections ; Section-- ; SectionHeader++) {

        //
        // Compute source, destination, and count arguments
        //

        Source = NtldrBuffer  + SectionHeader->PointerToRawData;
        Destination = OptionalHeader->ImageBase + SectionHeader->VirtualAddress;

        VirtualSize = SectionHeader->Misc.VirtualSize;
        SizeOfRawData = SectionHeader->SizeOfRawData;

        if (VirtualSize == 0) {
            VirtualSize = SizeOfRawData;
        }

        if (SectionHeader->PointerToRawData == 0) {
            //
            // SizeOfRawData can be non-zero even if PointerToRawData is zero
            //

            SizeOfRawData = 0;
        } else if (SizeOfRawData > VirtualSize) {
            //
            // Don't load more from image than is expected in memory
            //

            SizeOfRawData = VirtualSize;
        }

        if (Destination < Start) {
            Start = Destination;
        }

        if (Destination+VirtualSize > End) {
            End = Destination+VirtualSize;
        }

        if (SizeOfRawData != 0) {
            //
            // This section is either a code (.TEXT) section or an
            // initialized data (.DATA) section.
            // Relocate the section to memory at the virtual/physical
            // addresses specified in the section header.
            //
            memmove(Source,Destination,SizeOfRawData);
        }

        if (SizeOfRawData < VirtualSize) {
            //
            // Zero the portion not loaded from the image
            //
            memset(Destination+SizeOfRawData,0,VirtualSize - SizeOfRawData);
        }
#if 0
        //
        // Check if this is the resource section.  If so, we need
        // to pass its location to the osloader.
        //
        if ((SectionHeader->Name[0] == '.') &&
            (SectionHeader->Name[1] == 'r') &&
            (SectionHeader->Name[2] == 's') &&
            (SectionHeader->Name[3] == 'r') &&
            (SectionHeader->Name[4] == 'c')) {
            ResourceDirectory = Destination;
            ResourceOffset = SectionHeader->VirtualAddress;
        }
#endif
    }

    return(OptionalHeader->AddressOfEntryPoint + OptionalHeader->ImageBase);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\simsal.s ===
/**
***  Copyright  (C) 1996-97 Intel Corporation. All rights reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
**/

//++
//
//  Module name
//      SIMSAL.S
//  Author
//      Allen Kay    (akay)    May-6-97
//  Description
//      Initializes the CPU and loads the first sector from the boot partition.
//  SIMSAL does the following:
//      1.   Initialize PSR with interrupt disabled.
//      2.   Invalidate ALAT.
//      3.   Invalidate RS.
//      4.   Setup GP.
//      5.   Set region registers rr[r0] - rr[r7] to RID=0, PS=8K, E=0.
//      6.   Initialize SP to 0x00902000.
//      7.   Initialize BSP to 0x00202000.
//      8.   Enable register stack engine.
//      9.   Setup IVA to 0x001F8000.
//      10.  Setup virtual->physical address translation
//           0x80000000->0x00000000 in dtr0/itr0 for NT kernel.
//      11.  Setup virtual->physical address translation
//           0x80400000->0x00400000 in dtr1/itr1 for HAL.dll.
//      12.  Setup virtual->physical address translation
//           0x00800000->0x00800000 in dtr1/itr1 for NTLDR.
//---

#include "ksia64.h"
#include "susetup.h"
#include "ntfsdefs.h"

        .file   "start.s"

        .global SscExit
        .type SscExit, @function

        .global ReadSectors
        .type ReadSectors, @function

#define Buffer 0x0

//
// Interrupt Vector Table
//

#define VECTOR(Offset, Name)                     \
        .##org Offset;                           \
Name::                                           \
        mov     a0 = cr##.##iip;                 \
        br##.##call##.##sptk##.##clr brp = SscExit
        
        .section ivt = "ax", "progbits"
BlIvtBase::

        VECTOR(0x0000, BlVhptTransVector)
        VECTOR(0x0400, BlInstTlbVector)
        VECTOR(0x0800, BlDataTlbVector)
        VECTOR(0x0C00, BlAltInstTlbVector)
        VECTOR(0x1000, BlAltDataTlbVector)
        VECTOR(0x1400, BlNestedTlbVector)
        VECTOR(0x1800, BlInstKeyMissVector)
        VECTOR(0x1C00, BlDataKeyMissVector)
        VECTOR(0x2000, BlDirtyBitVector)
        VECTOR(0x2400, BlInstAccessBitVector)
        VECTOR(0x2800, BlDataAccessBitVector)
        VECTOR(0x2C00, BlBreakVector)
        VECTOR(0x3000, BlExternalInterruptVector)
        VECTOR(0x5000, BlPageNotPresentVector)
        VECTOR(0x5100, BlKeyPermVector)
        VECTOR(0x5200, BlInstAccessRightsVector)
        VECTOR(0x5300, BlDataAccessRightsVector)
        VECTOR(0x5400, BlGeneralExceptionVector)
        VECTOR(0x5500, BlDisabledFpRegisterVector)
        VECTOR(0x5600, BlNatConsumptionVector)
        VECTOR(0x5700, BlSpeculationVector)
        VECTOR(0x6900, BlIA32ExceptionVector)
        VECTOR(0x6A00, BlIA32InterceptionVector)
        VECTOR(0x6B00, BlIA32InterruptionVector)
        
// ***************************************************************************
// Initialize the processor
// ***************************************************************************
        NESTED_ENTRY(SimSal)
        NESTED_SETUP(3,3,8,0)
        PROLOGUE_END

        rpT0    = t22
        rpT1    = t21
        rpT2    = t20
        rpT3    = t19


        mov     psr.l = zero            // initialize psr.l
        movl    t0 = FPSR_FOR_KERNEL    
        mov     ar.fpsr = t0            // initialize fpsr

        invala                          // invalidate ALAT

        mov     ar.rsc = zero           // invalidate register stack
        loadrs             

//
// Initialize Region Registers
//
        mov     t0 = RR_PAGE_SIZE
        mov     t1 = zero
Bl_RRLoop:
        dep     t2 = t2, t1, RR_SHIFT, RR_BITS
        mov     rr[t2] = t0
        add     t1 = 1, t1
        cmp4.geu pt0, pt1 = RR_SIZE, t1
(pt0)   br.cond.sptk.clr Bl_RRLoop

//
// Initialize the protection key registers with only pkr[0] = valid.
//
        mov     t0 = PKR_VALID
        mov     t1 = zero
        mov     pkr[t1] = t0

        mov     t0 = zero

Bl_PKRLoop:
        add     t1 = t1, zero, 1                // increment PKR
        cmp.gtu pt0, pt1 = PKRNUM, t1
(pt0)   mov     pkr[t1] = t0
(pt0)   br.cond.sptk.clr Bl_PKRLoop

//
// Setup SP
//
        movl    sp = BL_SP_BASE

//
// Set up tbe scratch area
//
        add     sp = -STACK_SCRATCH_AREA, sp

//
// Setup register stack backing store.
//
        mov     t0 = RSC_KERNEL_DISABLED
        mov     ar.rsc = t0

        movl    t1 = BL_SP_BASE
        mov     ar.bspstore = t1

//
// Setup the base address of interrupt vector table
//
        movl    t0 = BlIvtBase
        mov     cr.iva = t0

//
// Setup system address translation for NT kernel
//  
//

        movl    t0 = BOOT_SYSTEM_PAGE << PAGE_SHIFT
        ADDS4   (t0, 0, t0)
        mov     cr.ifa = t0

        movl    t1 = IDTR_IIP_VALUE(0,0,BL_PAGE_SIZE)
        mov     cr.itir = t1
        
        movl    t2 = TR_VALUE(1,BOOT_PHYSICAL_PAGE,3,0,1,1,1,1)
        mov     t3 = zero

        itr.d   dtr[t3] = t2
        itr.i   itr[t3] = t2

//
//  Setup the aliased kernel space
//
        zxt4    t0 = t0                 // zero extend kernel address
        mov     t4 = 6                  // create alias in region 6 
        mov     t5 = 2                  // index
        dep     t0 = t4, t0, 61, 3
        mov     cr.ifa = t0
        
        itr.i   itr[t5] = t2            

//
// Setup 1-1 address translation for NT kernel
//  

        movl    t0 = BOOT_USER_PAGE << PAGE_SHIFT
        ADDS4   (t0, 0, t0)
        mov     cr.ifa = t0

        movl    t2 = TR_VALUE(1,BOOT_USER_PAGE,3,0,1,1,1,1)
        add     t3 = 1, t3

        itr.d   dtr[t3] = t2
        itr.i   itr[t3] = t2

//
// Turn on address translation, interrupt, psr.ed, protection key.
//
        movl    t1 = MASK(PSR_BN,1) | MASK(PSR_IT,1) | MASK(PSR_DA,1) | MASK(PSR_RT,1) | MASK(PSR_DT,1) | MASK(PSR_PK,1) | MASK(PSR_I,1)| MASK(PSR_IC,1)
        mov     cr.ipsr = t1

//
// Initialize DCR to defer all speculation faults
//
        movl    t0 = DCR_DEFER_ALL
        mov     cr.dcr = t0

//
// Read the first sector of the boot partition
//
        mov     out0 = zero
        movl    out1 = 1
        movl    out2 = Buffer

        mov     ap = sp
        br.call.sptk.many brp = ReadSectors

//
// Read the first sector of the boot partition
//
        mov     out0 = zero

#ifdef BSDT
        movl    t0 = Buffer             // get the sector count
        add     rpT0 = 6, t0
        ld2     out1 = [rpT0]
#else
        movl    out1 = 64               // read 64 sectors, 32KB
#endif

        movl    out2 = Buffer
        mov     ap = sp
        br.call.sptk.many brp = ReadSectors

//
// Now pass control to the first sector code
//
#ifdef BSDT
        movl    t0 = Buffer             // (the second sector).
        add     rpT0 = 8, t0
        ld4     t1 = [rpT0]
#else
        movl    t1 = 0xd0               // since no bsdt, hardcode it for now.
#endif

        mov     cr.iip = t1

        rfi;;

        NESTED_EXIT(SimSal)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootfont\sources.inc ===
!IF 0

binplace the appropriate bootfont.bin files.

!ENDIF

ALT_PROJECT=$(LANGUAGE)
ALT_PROJECT_TARGET=$(ALT_PROJECT)

TARGETNAME=
TARGETTYPE=NOTARGET
TARGETPATH=

SOURCES=

# makefile.def will binplace any file listed in the MISCFILES macro.
MISCFILES=bootfont.bin
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootcode\ntfs\ia64\ntfsdefs.h ===
//
// Constant definitions
//

#define LowPart 0x0
#define HighPart 0x4
#define MASTER_FILE_TABLE_NUMBER 0x0
#define MASTER_FILE_TABLE2_NUMBER 0x1
#define LOG_FILE_NUMBER 0x2
#define VOLUME_DASD_NUMBER 0x3
#define ATTRIBUTE_DEF_TABLE_NUMBER 0x4
#define ROOT_FILE_NAME_INDEX_NUMBER 0x5
#define BIT_MAP_FILE_NUMBER 0x6
#define BOOT_FILE_NUMBER 0x7
#define BAD_CLUSTER_FILE_NUMBER 0x8
#define QUOTA_TABLE_NUMBER 0x9
#define UPCASE_TABLE_NUMBER 0xa
#define $STANDARD_INFORMATION 0x10
#define $ATTRIBUTE_LIST 0x20
#define $FILE_NAME 0x30
#define $OBJECT_ID 0x40
#define $SECURITY_DESCRIPTOR 0x50
#define $VOLUME_NAME 0x60
#define $VOLUME_INFORMATION 0x70
#define $DATA 0x80
#define $INDEX_ROOT 0x90
#define $INDEX_ALLOCATION 0xa0
#define $BITMAP 0xb0
#define $SYMBOLIC_LINK 0xc0
#define $EA_INFORMATION 0xd0
#define $EA 0xe0
#define $FIRST_USER_DEFINED_ATTRIBUTE 0x100
#define $END 0xffffffff
#define SEQUENCE_NUMBER_STRIDE 0x200
#define REF_SegmentNumberLowPart 0x0
#define REF_SegmentNumberHighPart 0x4
#define REF_SequenceNumber 0x6
#define MSH_Signature 0x0
#define MSH_UpdateSequenceArrayOffset 0x4
#define MSH_UpdateSequenceArraySize 0x6
#define FRS_MultiSectorHeader 0x0
#define FRS_Lsn 0x8
#define FRS_SequenceNumber 0x10
#define FRS_ReferenceCount 0x12
#define FRS_FirstAttributeOffset 0x14
#define FRS_Flags 0x16
#define FRS_FirstFreeByte 0x18
#define FRS_BytesAvailable 0x1c
#define FRS_BaseFileRecordSegment 0x20
#define FRS_NextAttributeInstance 0x28
#define FRS_UpdateArrayForCreateOnly 0x2a
#define FILE_RECORD_SEGMENT_IN_USE 0x1
#define FILE_FILE_NAME_INDEX_PRESENT 0x2
#define ATTR_TypeCode 0x0
#define ATTR_RecordLength 0x4
#define ATTR_FormCode 0x8
#define ATTR_NameLength 0x9
#define ATTR_NameOffset 0xa
#define ATTR_Flags 0xc
#define ATTR_Instance 0xe
#define ATTR_Form 0x10
#define RES_ValueLength 0x10
#define RES_ValueOffset 0x14
#define RES_ResidentFlags 0x16
#define RES_Reserved 0x17
#define NONRES_LowestVcn 0x10
#define NONRES_HighestVcn 0x18
#define NONRES_MappingPairOffset 0x20
#define NONRES_CompressionUnit 0x22
#define NONRES_Reserved 0x23
#define NONRES_AllocatedLength 0x28
#define NONRES_FileSize 0x30
#define NONRES_ValidDataLength 0x38
#define NONRES_TotalAllocated 0x40
#define RESIDENT_FORM 0x0
#define NONRESIDENT_FORM 0x1
#define ATTRIBUTE_FLAG_COMPRESSION_MASK 0xff
#define ATTRLIST_AttributeTypeCode 0x0
#define ATTRLIST_RecordLength 0x4
#define ATTRLIST_AttributeNameLength 0x6
#define ATTRLIST_AttributeNameOffset 0x7
#define ATTRLIST_LowestVcn 0x8
#define ATTRLIST_SegmentReference 0x10
#define ATTRLIST_Instance 0x18
#define ATTRLIST_AttributeName 0x1a
#define FAT_DIRENT_ATTR_READ_ONLY 0x1
#define FAT_DIRENT_ATTR_HIDDEN 0x2
#define FAT_DIRENT_ATTR_SYSTEM 0x4
#define FAT_DIRENT_ATTR_VOLUME_ID 0x8
#define FAT_DIRENT_ATTR_ARCHIVE 0x20
#define FAT_DIRENT_ATTR_DEVICE 0x40
#define DUPINFO_CreationTime 0x0
#define DUPINFO_LastModificationTime 0x8
#define DUPINFO_LastChangeTime 0x10
#define DUPINFO_LastAccessTime 0x18
#define DUPINFO_AllocatedLength 0x20
#define DUPINFO_FileSize 0x28
#define DUPINFO_FileAttributes 0x30
#define DUPINFO_PackedEaSize 0x34
#define DUPINFO_Reserved 0x36
#define FN_ParentDirectory 0x0
#define FN_Info 0x8
#define FN_FileNameLength 0x40
#define FN_Flags 0x41
#define FN_FileName 0x42
#define FILE_NAME_NTFS 0x1
#define FILE_NAME_DOS 0x2
#define FILE_NAME_LINK 0x4
#define IH_FirstIndexEntry 0x0
#define IH_FirstFreeByte 0x4
#define IH_BytesAvailable 0x8
#define IH_Flags 0xc
#define IH_Reserved 0xd
#define INDEX_NODE 0x1
#define IR_IndexedAttributeType 0x0
#define IR_CollationRule 0x4
#define IR_BytesPerIndexBuffer 0x8
#define IR_BlocksPerIndexBuffer 0xc
#define IR_Reserved 0xd
#define IR_IndexHeader 0x10
#define IB_MultiSectorHeader 0x0
#define IB_Lsn 0x8
#define IB_ThisBlock 0x10
#define IB_IndexHeader 0x18
#define IB_UpdateSequenceArray 0x28
#define IE_FileReference 0x0
#define IE_Length 0x8
#define IE_AttributeLength 0xa
#define IE_Flags 0xc
#define IE_Reserved 0xe
#define INDEX_ENTRY_NODE 0x1
#define INDEX_ENTRY_END 0x2
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootfont\genfont\genfont.c ===
#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <tchar.h>
#include <locale.h>

#include "..\..\lib\i386\bootfont.h"
#include "fonttable.h"


int
__cdecl
main(
    IN int   argc,
    IN char *argv[]
    )
{
    HANDLE hFile;
    DWORD BytesWritten;
    BOOL b;
    BOOTFONTBIN_HEADER Header;
    unsigned u;
    unsigned char SBCSBuffer[MAX_SBCS_BYTES+2];
    unsigned char DBCSBuffer[MAX_DBCS_BYTES+2];


    if(argc != 2) {
        fprintf(stderr,"Usage: %s <outputfile>\n",argv[0]);
        return(1);
    }

    //
    // Fill in the header.
    //
    Header.Signature = BOOTFONTBIN_SIGNATURE;
    Header.LanguageId = LANGUAGE_ID;

    Header.NumSbcsChars = MAX_SBCS_NUM;
    Header.NumDbcsChars = MAX_DBCS_NUM;

    // Add 2 bytes for each entry for our unicode appendage
    Header.SbcsEntriesTotalSize = (MAX_SBCS_BYTES + 2) * MAX_SBCS_NUM;
    Header.DbcsEntriesTotalSize = (MAX_DBCS_BYTES + 2) * MAX_DBCS_NUM;

    ZeroMemory(Header.DbcsLeadTable,sizeof(Header.DbcsLeadTable));
    MoveMemory(Header.DbcsLeadTable,LeadByteTable,sizeof(LeadByteTable));

    Header.CharacterImageHeight = 16;
    Header.CharacterTopPad = 1;
    Header.CharacterBottomPad = 2;

    Header.CharacterImageSbcsWidth = 8;
    Header.CharacterImageDbcsWidth = 16;

    Header.SbcsOffset = sizeof(BOOTFONTBIN_HEADER);
    Header.DbcsOffset = Header.SbcsOffset + Header.SbcsEntriesTotalSize;


    //
    // Create the output file.
    //
    hFile = CreateFile(
                argv[1],
                FILE_GENERIC_WRITE,
                0,
                NULL,
                CREATE_ALWAYS,
                0,
                NULL
                );

    if(hFile == INVALID_HANDLE_VALUE) {
        printf("Unable to create output file (%u)\n",GetLastError());
        return(1);
    }

    //
    // Write the header.
    //
    b = WriteFile(hFile,&Header,sizeof(BOOTFONTBIN_HEADER),&BytesWritten,NULL);
    if(!b) {
        printf("Error writing output file (%u)\n",GetLastError());
        CloseHandle(hFile);
        return(1);
    }


    //
    // We're about to convert SBCS and DBCS characters into
    // unicode, so we need to figure out what to set our
    // locale to, so that mbtowc will work correctly.
    //
    if( _tsetlocale(LC_ALL, LocaleString) == NULL ) {
        printf( "_tsetlocale failed!\n" );
        return(0);
    }


    //
    // Write the sbcs images.
    //
    for(u=0; u<MAX_SBCS_NUM; u++) {

        //
        // Copy the SBCSImage info into our SBCSBuffer, append our
        // unicode encoding onto the last 2 bytes of SBCSImage, then
        // write it out.
        //
        RtlCopyMemory( SBCSBuffer, SBCSImage[u], MAX_SBCS_BYTES );
        

        //
        // We must use MultiByteToWideChar to convert from SBCS to unicode.
        //
        // MultiByteToWideChar doesn't seem to work when converting
        // from DBCS to unicode, so there we use mbtowc.
        //
#if 0
        if( !mbtowc( (WCHAR *)&SBCSBuffer[MAX_SBCS_BYTES], SBCSBuffer, 1 ) ) {

#else
        if( !MultiByteToWideChar( CP_OEMCP,
                                  MB_ERR_INVALID_CHARS,
                                  SBCSBuffer,
                                  1,
                                  (WCHAR *)&SBCSBuffer[MAX_SBCS_BYTES],
                                  sizeof(WCHAR) ) ) {
#endif
            SBCSBuffer[MAX_SBCS_BYTES] = 0;
            SBCSBuffer[MAX_SBCS_BYTES+1] = 0x3F;
        }

        b = WriteFile(hFile,SBCSBuffer,MAX_SBCS_BYTES+2,&BytesWritten,NULL);
        if(!b) {
            printf("Error writing output file (%u)\n",GetLastError());
            CloseHandle(hFile);
            return(1);
        }
    }

    //
    // Write the dbcs images.
    //
    for(u=0; u<MAX_DBCS_NUM; u++) {

        //
        // Copy the DBCSImage info into our DBCSBuffer, append our
        // unicode encoding onto the last 2 bytes of DBCSImage, then
        // write it out.
        //
        RtlCopyMemory( DBCSBuffer, DBCSImage[u], MAX_DBCS_BYTES );
        
        
        //
        // We must use mbtowc to convert from DBCS to unicode.
        //
        // Whereas, mbtowc doesn't seem to work when converting
        // from SBCS to unicode, so there we use MultiByteToWideChar.
        //
#if 0
        if( !mbtowc( (WCHAR *)&DBCSBuffer[MAX_DBCS_BYTES], DBCSBuffer, 2 ) ) {
#else
        if( !MultiByteToWideChar( CP_OEMCP,
                                  MB_ERR_INVALID_CHARS,
                                  DBCSBuffer,
                                  2,
                                  (WCHAR *)&DBCSBuffer[MAX_DBCS_BYTES],
                                  sizeof(WCHAR) ) ) {
#endif
            DBCSBuffer[MAX_DBCS_BYTES] = 0;
            DBCSBuffer[MAX_DBCS_BYTES+1] = 0x3F;
        }


        b = WriteFile(hFile,DBCSBuffer,MAX_DBCS_BYTES+2,&BytesWritten,NULL);
        if(!b) {
            printf("Error writing output file (%u)\n",GetLastError());
            CloseHandle(hFile);
            return(1);
        }
    }

    // restore the local to the one the system is using.
    _tsetlocale(LC_ALL, "");


    //
    // Done.
    //
    CloseHandle(hFile);
    printf("Output file sucessfully generated\n");
    return(0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootfont\jpn\fonttable.h ===
#define MAX_SBCS_NUM      190
#define MAX_SBCS_BYTES    17
#define MAX_DBCS_NUM      3573
#define MAX_DBCS_BYTES    34
#define LANGUAGE_ID       0x411


// local string to send into _tsetlocale
PCHAR   LocaleString = "japanese";

unsigned char LeadByteTable[] = { 0x81, 0x84, 0x87, 0x9f, 0xe0, 0xea, 0xfa, 0xfc, 0x00, 0x00 };

unsigned char SBCSImage[MAX_SBCS_NUM][MAX_SBCS_BYTES] = { 
{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x20, 0x27, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x4, 0xe4, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x3, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x20, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x4, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe4, 0x4, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x5, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x7, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x3e, 0x1c, 0x1c, 0x8 },
{ 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x9, 0x0, 0x0, 0x0, 0x0, 0x18, 0x24, 0x24, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x0, 0x0 },
{ 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xb, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x82, 0xc6, 0xaa, 0xaa, 0x92, 0x92, 0xaa, 0xaa, 0xc6, 0x82, 0xfe },
{ 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xe, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
{ 0xf, 0x0, 0x0, 0x49, 0x49, 0x2a, 0x36, 0x14, 0x22, 0xe3, 0x22, 0x14, 0x36, 0x2a, 0x49, 0x49, 0x0 },
{ 0x10, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe7, 0x0, 0xe7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x12, 0x0, 0x0, 0x0, 0x8, 0x1c, 0x1c, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x3e, 0x1c, 0x1c, 0x8 },
{ 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x14, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa },
{ 0x15, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe7, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0xe7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x17, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe4, 0x4, 0xe4, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x19, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x20, 0x27, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x1a, 0x0, 0x55, 0x0, 0xaa, 0x0, 0x55, 0x0, 0xaa, 0x0, 0x55, 0x0, 0xaa, 0x0, 0x55, 0x0, 0xaa },
{ 0x1b, 0x0, 0x0, 0x0, 0x2, 0x2, 0x2, 0x2, 0x22, 0x62, 0xfe, 0x60, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x1c, 0x0, 0x0, 0x0, 0x8, 0x1c, 0x1c, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8 },
{ 0x1d, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8 },
{ 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x6, 0x7f, 0x6, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x60, 0xfe, 0x60, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x21, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0, 0x10, 0x38, 0x10, 0x0, 0x0 },
{ 0x22, 0x0, 0x0, 0x6c, 0x6c, 0x24, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x23, 0x0, 0x0, 0x24, 0x24, 0x24, 0x7e, 0x24, 0x24, 0x24, 0x24, 0x7e, 0x24, 0x24, 0x24, 0x0, 0x0 },
{ 0x24, 0x0, 0x0, 0x10, 0x38, 0x54, 0x54, 0x50, 0x38, 0x14, 0x54, 0x54, 0x54, 0x38, 0x10, 0x0, 0x0 },
{ 0x25, 0x0, 0x0, 0x22, 0x56, 0x54, 0x2c, 0x8, 0x18, 0x10, 0x30, 0x24, 0x6a, 0x4a, 0x44, 0x0, 0x0 },
{ 0x26, 0x0, 0x0, 0x30, 0x48, 0x48, 0x50, 0x20, 0x66, 0x66, 0x94, 0x94, 0x88, 0x8c, 0x76, 0x0, 0x0 },
{ 0x27, 0x0, 0x0, 0x18, 0x18, 0x8, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x28, 0x0, 0x0, 0x8, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x8, 0x0, 0x0 },
{ 0x29, 0x0, 0x0, 0x10, 0x8, 0x8, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x0, 0x0 },
{ 0x2a, 0x0, 0x0, 0x0, 0x0, 0x10, 0x92, 0x54, 0x38, 0x38, 0x54, 0x92, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x2b, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x8, 0x10 },
{ 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x2e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0 },
{ 0x2f, 0x0, 0x0, 0x2, 0x4, 0x4, 0x8, 0x8, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x0, 0x0 },
{ 0x30, 0x0, 0x0, 0x18, 0x24, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x0, 0x0 },
{ 0x31, 0x0, 0x0, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x0, 0x0 },
{ 0x32, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x42, 0x42, 0x7e, 0x0, 0x0 },
{ 0x33, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x2, 0x2, 0x1c, 0x2, 0x2, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x34, 0x0, 0x0, 0x4, 0xc, 0xc, 0x14, 0x24, 0x24, 0x44, 0x44, 0xfe, 0x4, 0x4, 0xe, 0x0, 0x0 },
{ 0x35, 0x0, 0x0, 0x7e, 0x40, 0x40, 0x40, 0x7c, 0x42, 0x2, 0x2, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x36, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x40, 0x40, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x37, 0x0, 0x0, 0x7e, 0x42, 0x42, 0x4, 0x4, 0x8, 0x8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0 },
{ 0x38, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x39, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3e, 0x2, 0x2, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x3a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0 },
{ 0x3b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x8, 0x10 },
{ 0x3c, 0x0, 0x0, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x0, 0x0, 0x0 },
{ 0x3d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x3e, 0x0, 0x0, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x0, 0x0, 0x0 },
{ 0x3f, 0x0, 0x0, 0x38, 0x44, 0x82, 0x82, 0x44, 0x8, 0x10, 0x10, 0x0, 0x10, 0x38, 0x10, 0x0, 0x0 },
{ 0x40, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x2, 0x2, 0x32, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x3c, 0x0, 0x0 },
{ 0x41, 0x0, 0x0, 0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x0, 0x0 },
{ 0x42, 0x0, 0x0, 0xfc, 0x42, 0x42, 0x42, 0x42, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x42, 0xfc, 0x0, 0x0 },
{ 0x43, 0x0, 0x0, 0x3a, 0x46, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x44, 0x0, 0x0, 0xf8, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0xf8, 0x0, 0x0 },
{ 0x45, 0x0, 0x0, 0xfe, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x40, 0x40, 0x40, 0x42, 0xfe, 0x0, 0x0 },
{ 0x46, 0x0, 0x0, 0xfe, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x0, 0x0 },
{ 0x47, 0x0, 0x0, 0x3a, 0x46, 0x42, 0x42, 0x40, 0x40, 0x4e, 0x42, 0x42, 0x42, 0x46, 0x3a, 0x0, 0x0 },
{ 0x48, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x7c, 0x44, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x49, 0x0, 0x0, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x0, 0x0 },
{ 0x4a, 0x0, 0x0, 0x3c, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x88, 0x70, 0x0, 0x0 },
{ 0x4b, 0x0, 0x0, 0xee, 0x44, 0x48, 0x50, 0x60, 0x60, 0x50, 0x50, 0x48, 0x48, 0x44, 0xee, 0x0, 0x0 },
{ 0x4c, 0x0, 0x0, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x7e, 0x0, 0x0 },
{ 0x4d, 0x0, 0x0, 0xc6, 0x44, 0x6c, 0x6c, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x4e, 0x0, 0x0, 0xee, 0x44, 0x64, 0x64, 0x74, 0x54, 0x5c, 0x4c, 0x4c, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x4f, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x50, 0x0, 0x0, 0xf8, 0x44, 0x42, 0x42, 0x42, 0x44, 0x78, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x0, 0x0 },
{ 0x51, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x72, 0x4a, 0x44, 0x3a, 0x0, 0x0 },
{ 0x52, 0x0, 0x0, 0xfc, 0x42, 0x42, 0x42, 0x44, 0x78, 0x4c, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x53, 0x0, 0x0, 0x3a, 0x46, 0x42, 0x40, 0x20, 0x18, 0x4, 0x2, 0x42, 0x42, 0x62, 0x5c, 0x0, 0x0 },
{ 0x54, 0x0, 0x0, 0xfe, 0x92, 0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x55, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x0, 0x0 },
{ 0x56, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x0, 0x0 },
{ 0x57, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x7c, 0x6c, 0x6c, 0x44, 0x44, 0x0, 0x0 },
{ 0x58, 0x0, 0x0, 0xee, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x28, 0x28, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x59, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x5a, 0x0, 0x0, 0xfe, 0x82, 0x82, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x82, 0x82, 0xfe, 0x0, 0x0 },
{ 0x5b, 0x0, 0x0, 0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x0, 0x0 },
{ 0x5c, 0x0, 0x0, 0xee, 0x44, 0x44, 0x28, 0x10, 0x7c, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x5d, 0x0, 0x0, 0x38, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38, 0x0, 0x0 },
{ 0x5e, 0x0, 0x0, 0x18, 0x24, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x5f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0 },
{ 0x60, 0x0, 0x0, 0x30, 0x30, 0x20, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x4, 0x3c, 0x44, 0x44, 0x4c, 0x36, 0x0, 0x0 },
{ 0x62, 0x0, 0x0, 0xc0, 0x40, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x64, 0xd8, 0x0, 0x0 },
{ 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x44, 0x40, 0x40, 0x44, 0x44, 0x38, 0x0, 0x0 },
{ 0x64, 0x0, 0x0, 0xc, 0x4, 0x4, 0x4, 0x34, 0x4c, 0x44, 0x44, 0x44, 0x44, 0x4c, 0x36, 0x0, 0x0 },
{ 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x44, 0x7c, 0x40, 0x44, 0x44, 0x38, 0x0, 0x0 },
{ 0x66, 0x0, 0x0, 0xc, 0x12, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x44, 0x44, 0x44, 0x4c, 0x34, 0x4, 0x44, 0x44, 0x38 },
{ 0x68, 0x0, 0x0, 0xc0, 0x40, 0x40, 0x40, 0x58, 0x64, 0x44, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x69, 0x0, 0x0, 0x0, 0x10, 0x10, 0x0, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x6a, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x38, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x48, 0x48, 0x30 },
{ 0x6b, 0x0, 0x0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x48, 0x50, 0x60, 0x50, 0x48, 0xee, 0x0, 0x0 },
{ 0x6c, 0x0, 0x0, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0xd6, 0x0, 0x0 },
{ 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x64, 0x44, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7c, 0x22, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x20, 0x20, 0x70 },
{ 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x44, 0x44, 0x44, 0x44, 0x3c, 0x4, 0x4, 0x4, 0xe },
{ 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x32, 0x22, 0x20, 0x20, 0x20, 0x20, 0x70, 0x0, 0x0 },
{ 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x30, 0xc, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x74, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x12, 0x12, 0xc, 0x0, 0x0 },
{ 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4c, 0x36, 0x0, 0x0 },
{ 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x0, 0x0 },
{ 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc6, 0x44, 0x44, 0x54, 0x54, 0x54, 0x6c, 0x44, 0x0, 0x0 },
{ 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc6, 0x44, 0x28, 0x10, 0x10, 0x28, 0x44, 0xc6, 0x0, 0x0 },
{ 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x44, 0x44, 0x24, 0x28, 0x18, 0x8, 0x10, 0x90, 0x60 },
{ 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x42, 0x4, 0x8, 0x10, 0x20, 0x42, 0x7e, 0x0, 0x0 },
{ 0x7b, 0x0, 0x0, 0xc, 0x10, 0x10, 0x10, 0x10, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0xc, 0x0, 0x0 },
{ 0x7c, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0 },
{ 0x7d, 0x0, 0x0, 0x30, 0x8, 0x8, 0x8, 0x8, 0x4, 0x8, 0x8, 0x8, 0x8, 0x8, 0x30, 0x0, 0x0 },
{ 0x7e, 0x0, 0x0, 0x32, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x48, 0x48, 0x30 },
{ 0xa2, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3e },
{ 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x30, 0x10 },
{ 0xa5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xa6, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xa7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x14, 0x18, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x0 },
{ 0xa8, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x4, 0x8, 0x18, 0x68, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0xa9, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x41, 0x41, 0x1, 0x2, 0x2, 0x4, 0x18, 0x0 },
{ 0xaa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x0, 0x0, 0x0 },
{ 0xab, 0x0, 0x0, 0x0, 0x0, 0x4, 0x4, 0x4, 0x7f, 0x4, 0xc, 0x14, 0x24, 0x44, 0x4, 0xc, 0x0 },
{ 0xac, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x27, 0x79, 0x12, 0x12, 0x10, 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0xad, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7f, 0x0, 0x0, 0x0 },
{ 0xae, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0 },
{ 0xaf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x9, 0x49, 0x21, 0x21, 0x2, 0x2, 0x4, 0x8, 0x30, 0x0 },
{ 0xb0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xb1, 0x0, 0x0, 0x7f, 0x1, 0x9, 0xa, 0xa, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x20, 0x20, 0x0 },
{ 0xb2, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0xc, 0x14, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x0 },
{ 0xb3, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x41, 0x41, 0x41, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0x18, 0x0 },
{ 0xb4, 0x0, 0x0, 0x0, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x0, 0x0, 0x0 },
{ 0xb5, 0x0, 0x4, 0x4, 0x4, 0x7f, 0xc, 0xc, 0x14, 0x14, 0x14, 0x24, 0x24, 0x44, 0x4, 0xc, 0x0 },
{ 0xb6, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x9, 0x9, 0x9, 0x9, 0x11, 0x11, 0x11, 0x22, 0x22, 0x4c, 0x0 },
{ 0xb7, 0x0, 0x10, 0x10, 0x10, 0x1e, 0x68, 0x8, 0x8, 0xf, 0x78, 0x4, 0x4, 0x4, 0x4, 0x4, 0x0 },
{ 0xb8, 0x0, 0x8, 0x8, 0x1f, 0x11, 0x11, 0x21, 0x41, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xb9, 0x0, 0x20, 0x20, 0x20, 0x3f, 0x24, 0x24, 0x44, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xba, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0 },
{ 0xbb, 0x0, 0x24, 0x24, 0x24, 0x7f, 0x24, 0x24, 0x24, 0x24, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xbc, 0x0, 0x30, 0x8, 0x0, 0x0, 0x60, 0x11, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0x18, 0x60, 0x0 },
{ 0xbd, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x14, 0x12, 0x22, 0x21, 0x41, 0x0 },
{ 0xbe, 0x0, 0x10, 0x10, 0x10, 0x10, 0x17, 0x79, 0x11, 0x12, 0x12, 0x10, 0x10, 0x10, 0x8, 0x7, 0x0 },
{ 0xbf, 0x0, 0x2, 0x42, 0x22, 0x22, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xc0, 0x0, 0x20, 0x20, 0x3e, 0x22, 0x22, 0x5a, 0x46, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xc1, 0x0, 0x2, 0x4, 0x38, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x60, 0x0 },
{ 0xc2, 0x0, 0x10, 0x9, 0x9, 0x49, 0x21, 0x21, 0x1, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x20, 0x0 },
{ 0xc3, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x20, 0x0 },
{ 0xc4, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x12, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0 },
{ 0xc5, 0x0, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x20, 0x40, 0x0 },
{ 0xc6, 0x0, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x0 },
{ 0xc7, 0x0, 0x0, 0x3f, 0x1, 0x1, 0x2, 0x22, 0x1a, 0x4, 0x6, 0xa, 0x9, 0x11, 0x21, 0x40, 0x0 },
{ 0xc8, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x2, 0x4, 0x4, 0xa, 0x19, 0x29, 0x48, 0x8, 0x8, 0x8, 0x0 },
{ 0xc9, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x40, 0x0 },
{ 0xca, 0x0, 0x0, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x21, 0x21, 0x21, 0x21, 0x41, 0x41, 0x0 },
{ 0xcb, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0xf, 0x0 },
{ 0xcc, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xcd, 0x0, 0x0, 0x10, 0x28, 0x28, 0x44, 0x44, 0x4, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0 },
{ 0xce, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x8, 0x8, 0x0 },
{ 0xcf, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x4, 0x44, 0x28, 0x10, 0x10, 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0xd0, 0x0, 0x0, 0x38, 0x6, 0x1, 0x0, 0x30, 0xc, 0x2, 0x0, 0x70, 0xc, 0x2, 0x1, 0x0, 0x0 },
{ 0xd1, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x10, 0x12, 0x22, 0x21, 0x27, 0x59, 0x61, 0x0 },
{ 0xd2, 0x0, 0x1, 0x1, 0x1, 0x2, 0x32, 0xa, 0x4, 0x6, 0xa, 0x9, 0x11, 0x11, 0x20, 0x40, 0x0 },
{ 0xd3, 0x0, 0x0, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7, 0x0 },
{ 0xd4, 0x0, 0x20, 0x20, 0x23, 0x1d, 0x71, 0x12, 0x12, 0x8, 0x8, 0x8, 0x4, 0x4, 0x4, 0x4, 0x0 },
{ 0xd5, 0x0, 0x0, 0x0, 0x3c, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7f, 0x0, 0x0, 0x0 },
{ 0xd6, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0 },
{ 0xd7, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x20, 0x0 },
{ 0xd8, 0x0, 0x0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x0 },
{ 0xd9, 0x0, 0x0, 0x8, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2a, 0x2a, 0x4c, 0x4c, 0x48, 0x0 },
{ 0xda, 0x0, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x24, 0x28, 0x30, 0x0 },
{ 0xdb, 0x0, 0x0, 0x0, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x0, 0x0 },
{ 0xdc, 0x0, 0x0, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xdd, 0x0, 0x0, 0x60, 0x10, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xde, 0x0, 0x0, 0x8, 0x24, 0x12, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xdf, 0x0, 0x0, 0x18, 0x24, 0x24, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
};

unsigned char DBCSImage[MAX_DBCS_NUM][MAX_DBCS_BYTES] = { 
{ 0x81, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x18, 0x0, 0x8, 0x0 },
{ 0x81, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x48, 0x0, 0x48, 0x0, 0x30, 0x0 },
{ 0x81, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x30, 0x0, 0x10, 0x0, 0x20, 0x0 },
{ 0x81, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x80, 0x1, 0x0 },
{ 0x81, 0x48, 0x0, 0x0, 0x3, 0xe0, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x4, 0x8, 0x0, 0x30, 0x0, 0xc0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x49, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x4a, 0x28, 0x0, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0x48, 0x0, 0x48, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x4c, 0x0, 0xc0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x4d, 0x3, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x4e, 0x3, 0x60, 0x3, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x4f, 0x1, 0x80, 0x6, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x50, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x51, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff },
{ 0x81, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0x20, 0x0, 0x30, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x6, 0x28, 0x3, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0x20, 0x0, 0x30, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xe0, 0x0, 0x30, 0x0, 0x18, 0x0, 0x30, 0x0, 0xe0, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x28, 0xc, 0x28, 0x6, 0x0, 0x3, 0x0, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x4, 0x40, 0x4, 0x40, 0x8, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x57, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x81, 0x58, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x3, 0xf8, 0x6, 0x8, 0x4, 0x18, 0xc, 0x10, 0x8, 0x30, 0x13, 0x60, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x30, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x59, 0x0, 0x0, 0x0, 0x6, 0x0, 0xc, 0x0, 0x18, 0x3, 0xb0, 0x4, 0xe0, 0x8, 0xe0, 0x9, 0xb0, 0x1b, 0x18, 0x12, 0x0, 0x16, 0x0, 0x14, 0x0, 0x1c, 0x0, 0x18, 0x0, 0x30, 0x0, 0x0, 0x0 },
{ 0x81, 0x5a, 0x0, 0x0, 0x3, 0xe0, 0xe, 0x38, 0x18, 0xc, 0x10, 0x4, 0x30, 0x6, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x30, 0x6, 0x10, 0x4, 0x18, 0xc, 0xe, 0x38, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x5b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x3f, 0xfe, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x5c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x5e, 0x0, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x40, 0x0, 0x0, 0x0 },
{ 0x81, 0x5f, 0x40, 0x0, 0x20, 0x0, 0x10, 0x0, 0x8, 0x0, 0x4, 0x0, 0x2, 0x0, 0x1, 0x0, 0x0, 0x80, 0x0, 0x40, 0x0, 0x20, 0x0, 0x10, 0x0, 0x8, 0x0, 0x4, 0x0, 0x2, 0x0, 0x1, 0x0, 0x0 },
{ 0x81, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x23, 0x81, 0x40, 0xe2, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x61, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20 },
{ 0x81, 0x62, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x81, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x31, 0x8c, 0x31, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0xc, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x65, 0x0, 0x8, 0x0, 0x10, 0x0, 0x18, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x66, 0xc, 0x0, 0xc, 0x0, 0x4, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x67, 0x0, 0x12, 0x0, 0x24, 0x0, 0x36, 0x0, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x68, 0x1b, 0x0, 0x1b, 0x0, 0x9, 0x0, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x69, 0x0, 0x4, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x30, 0x0, 0x10, 0x0, 0x18, 0x0, 0x8, 0x0, 0x4 },
{ 0x81, 0x6a, 0x10, 0x0, 0x8, 0x0, 0xc, 0x0, 0x4, 0x0, 0x6, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x10, 0x0 },
{ 0x81, 0x6b, 0x0, 0x4, 0x0, 0x18, 0x0, 0x60, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x60, 0x0, 0x18, 0x0, 0x4 },
{ 0x81, 0x6c, 0x10, 0x0, 0xc, 0x0, 0x3, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0xc, 0x0, 0x10, 0x0 },
{ 0x81, 0x6d, 0x0, 0x7c, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x7c },
{ 0x81, 0x6e, 0x1f, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0x0 },
{ 0x81, 0x6f, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x20, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x8, 0x0, 0x4 },
{ 0x81, 0x70, 0x10, 0x0, 0x8, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x2, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0 },
{ 0x81, 0x71, 0x0, 0x4, 0x0, 0x8, 0x0, 0x8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x0, 0x80, 0x0, 0x40, 0x0, 0x20, 0x0, 0x20, 0x0, 0x10, 0x0, 0x8, 0x0, 0x8, 0x0, 0x4 },
{ 0x81, 0x72, 0x10, 0x0, 0x8, 0x0, 0x8, 0x0, 0x4, 0x0, 0x2, 0x0, 0x2, 0x0, 0x1, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0x0, 0x2, 0x0, 0x2, 0x0, 0x4, 0x0, 0x8, 0x0, 0x8, 0x0, 0x10, 0x0 },
{ 0x81, 0x73, 0x0, 0x12, 0x0, 0x24, 0x0, 0x24, 0x0, 0x48, 0x0, 0x90, 0x0, 0x90, 0x1, 0x20, 0x2, 0x40, 0x2, 0x40, 0x1, 0x20, 0x0, 0x90, 0x0, 0x90, 0x0, 0x48, 0x0, 0x24, 0x0, 0x24, 0x0, 0x12 },
{ 0x81, 0x74, 0x24, 0x0, 0x12, 0x0, 0x12, 0x0, 0x9, 0x0, 0x4, 0x80, 0x4, 0x80, 0x2, 0x40, 0x1, 0x20, 0x1, 0x20, 0x2, 0x40, 0x4, 0x80, 0x4, 0x80, 0x9, 0x0, 0x12, 0x0, 0x12, 0x0, 0x24, 0x0 },
{ 0x81, 0x75, 0x0, 0x7c, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0x0 },
{ 0x81, 0x77, 0x0, 0x7e, 0x0, 0x42, 0x0, 0x5e, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x50, 0x0, 0x70, 0x0, 0x0 },
{ 0x81, 0x78, 0x0, 0x0, 0x7, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x5, 0x0, 0x3d, 0x0, 0x21, 0x0, 0x3f, 0x0 },
{ 0x81, 0x79, 0x0, 0x7c, 0x0, 0x78, 0x0, 0x70, 0x0, 0x60, 0x0, 0x60, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x60, 0x0, 0x60, 0x0, 0x70, 0x0, 0x78, 0x0, 0x7c },
{ 0x81, 0x7a, 0x1f, 0x0, 0xf, 0x0, 0x7, 0x0, 0x3, 0x0, 0x3, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x3, 0x0, 0x7, 0x0, 0xf, 0x0, 0x1f, 0x0 },
{ 0x81, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x8, 0x8, 0x10, 0x4, 0x20, 0x2, 0x40, 0x1, 0x80, 0x1, 0x80, 0x2, 0x40, 0x4, 0x20, 0x8, 0x10, 0x10, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x82, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x1f, 0xfc, 0x0, 0x40, 0x0, 0x40, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x83, 0x0, 0x0, 0x0, 0x2, 0x0, 0xc, 0x0, 0x30, 0x0, 0xc0, 0x3, 0x0, 0xc, 0x0, 0x30, 0x0, 0xc, 0x0, 0x3, 0x0, 0x0, 0xc0, 0x0, 0x30, 0x0, 0xc, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x84, 0x0, 0x0, 0x20, 0x0, 0x18, 0x0, 0x6, 0x0, 0x1, 0x80, 0x0, 0x60, 0x0, 0x18, 0x0, 0x6, 0x0, 0x18, 0x0, 0x60, 0x1, 0x80, 0x6, 0x0, 0x18, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x70, 0x3, 0x80, 0x3c, 0x0, 0x3, 0x80, 0x0, 0x70, 0x0, 0xe, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x86, 0x0, 0x0, 0x0, 0x0, 0x38, 0x0, 0x7, 0x0, 0x0, 0xe0, 0x0, 0x1e, 0x0, 0xe0, 0x7, 0x0, 0x38, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x3c, 0x21, 0x42, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x21, 0x42, 0x1e, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0xc, 0x18, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x89, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x6, 0x0, 0xa, 0x0, 0x12, 0x0, 0x22, 0x0, 0x42, 0xe, 0x80, 0x11, 0x0, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x11, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x8a, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x1, 0xc0, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x81, 0x8b, 0x0, 0x0, 0x18, 0x0, 0x24, 0x0, 0x24, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x8c, 0x0, 0x0, 0x4, 0x0, 0xc, 0x0, 0x18, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x8d, 0x0, 0x0, 0x8, 0x80, 0x19, 0x80, 0x33, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x8e, 0x0, 0x0, 0x30, 0x70, 0x49, 0x8c, 0x4b, 0x2, 0x32, 0x2, 0x6, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x6, 0x0, 0x2, 0x2, 0x3, 0x2, 0x1, 0x8c, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x8f, 0x0, 0x0, 0x20, 0x2, 0x10, 0x4, 0x8, 0x8, 0x4, 0x10, 0x2, 0x20, 0x1, 0x40, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x81, 0x90, 0x0, 0x0, 0x0, 0x80, 0x3, 0xf0, 0x4, 0x98, 0x8, 0x88, 0x8, 0x80, 0x4, 0x80, 0x3, 0x80, 0x0, 0xf0, 0x0, 0x88, 0x10, 0x84, 0x18, 0x84, 0xc, 0x88, 0x7, 0xf0, 0x0, 0x80, 0x0, 0x0 },
{ 0x81, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0xe0, 0x2, 0x90, 0x4, 0x90, 0x4, 0x80, 0x4, 0x80, 0x4, 0x90, 0x2, 0x90, 0x1, 0xe0, 0x0, 0x80, 0x0, 0x0 },
{ 0x81, 0x92, 0x0, 0x0, 0x0, 0xf0, 0x1, 0x8, 0x2, 0x4, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3f, 0xf8, 0x1, 0x0, 0x1, 0x0, 0x1d, 0x0, 0x23, 0x2, 0x22, 0xc4, 0x1c, 0x38, 0x0, 0x0 },
{ 0x81, 0x93, 0x0, 0x0, 0x1c, 0x2, 0x22, 0x4, 0x22, 0x8, 0x22, 0x10, 0x22, 0x20, 0x22, 0x40, 0x1c, 0x80, 0x1, 0x1c, 0x2, 0x22, 0x4, 0x22, 0x8, 0x22, 0x10, 0x22, 0x20, 0x22, 0x40, 0x1c, 0x0, 0x0 },
{ 0x81, 0x94, 0x0, 0x0, 0x1, 0x10, 0x1, 0x10, 0x1, 0x10, 0x1, 0x10, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x1f, 0xfc, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x0, 0x0 },
{ 0x81, 0x95, 0x0, 0x0, 0x3, 0xc0, 0x6, 0x20, 0x4, 0x20, 0x4, 0x60, 0x6, 0xc0, 0x3, 0x80, 0x7, 0x0, 0xd, 0x84, 0x18, 0xcc, 0x10, 0x68, 0x10, 0x38, 0x10, 0x38, 0x8, 0xec, 0x7, 0x86, 0x0, 0x0 },
{ 0x81, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xc, 0x98, 0x6, 0xb0, 0x3, 0xe0, 0x0, 0x80, 0x3, 0xe0, 0x6, 0xb0, 0xc, 0x98, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x97, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x6, 0x30, 0x8, 0x8, 0x9, 0xa8, 0x12, 0x64, 0x14, 0x44, 0x14, 0x44, 0x14, 0xc8, 0xb, 0x70, 0x8, 0x4, 0x6, 0x18, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0x98, 0x0, 0x0, 0x3, 0xe0, 0x6, 0x30, 0x4, 0x10, 0x6, 0x0, 0x3, 0x80, 0x6, 0xe0, 0x4, 0x30, 0x6, 0x10, 0x3, 0xb0, 0x0, 0xe0, 0x0, 0x30, 0x4, 0x10, 0x6, 0x30, 0x3, 0xe0, 0x0, 0x0 },
{ 0x81, 0x99, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0x40, 0x1, 0x40, 0x2, 0x20, 0x3e, 0x3e, 0x10, 0x4, 0x8, 0x8, 0x4, 0x10, 0x4, 0x10, 0x8, 0x88, 0x9, 0x48, 0x16, 0x34, 0x18, 0xc, 0x0, 0x0 },
{ 0x81, 0x9a, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0xe0, 0x3f, 0xfe, 0x1f, 0xfc, 0xf, 0xf8, 0x7, 0xf0, 0x7, 0xf0, 0xf, 0x78, 0xe, 0x38, 0x1c, 0x1c, 0x10, 0x4, 0x0, 0x0 },
{ 0x81, 0x9b, 0x0, 0x0, 0x3, 0xc0, 0xc, 0x30, 0x10, 0x8, 0x20, 0x4, 0x20, 0x4, 0x40, 0x2, 0x40, 0x2, 0x40, 0x2, 0x40, 0x2, 0x20, 0x4, 0x20, 0x4, 0x10, 0x8, 0xc, 0x30, 0x3, 0xc0, 0x0, 0x0 },
{ 0x81, 0x9c, 0x0, 0x0, 0x3, 0xc0, 0xf, 0xf0, 0x1f, 0xf8, 0x3f, 0xfc, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc, 0x3f, 0xfc, 0x1f, 0xf8, 0xf, 0xf0, 0x3, 0xc0, 0x0, 0x0 },
{ 0x81, 0x9d, 0x0, 0x0, 0x3, 0xc0, 0xc, 0x30, 0x10, 0x8, 0x23, 0xc4, 0x24, 0x24, 0x48, 0x12, 0x48, 0x12, 0x48, 0x12, 0x48, 0x12, 0x24, 0x24, 0x23, 0xc4, 0x10, 0x8, 0xc, 0x30, 0x3, 0xc0, 0x0, 0x0 },
{ 0x81, 0x9e, 0x0, 0x80, 0x1, 0x40, 0x2, 0x20, 0x4, 0x10, 0x8, 0x8, 0x10, 0x4, 0x20, 0x2, 0x40, 0x1, 0x40, 0x1, 0x20, 0x2, 0x10, 0x4, 0x8, 0x8, 0x4, 0x10, 0x2, 0x20, 0x1, 0x40, 0x0, 0x80 },
{ 0x81, 0x9f, 0x0, 0x80, 0x1, 0xc0, 0x3, 0xe0, 0x7, 0xf0, 0xf, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xff, 0x7f, 0xff, 0x3f, 0xfe, 0x1f, 0xfc, 0xf, 0xf8, 0x7, 0xf0, 0x3, 0xe0, 0x1, 0xc0, 0x0, 0x80 },
{ 0x81, 0xa0, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x81, 0xa1, 0x0, 0x0, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x81, 0xa2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x1, 0x40, 0x1, 0x40, 0x2, 0x20, 0x2, 0x20, 0x4, 0x10, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x10, 0x4, 0x10, 0x4, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0xe0, 0x3, 0xe0, 0x7, 0xf0, 0x7, 0xf0, 0xf, 0xf8, 0xf, 0xf8, 0x1f, 0xfc, 0x1f, 0xfc, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x10, 0x4, 0x10, 0x4, 0x8, 0x8, 0x8, 0x8, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x2, 0x20, 0x1, 0x40, 0x1, 0x40, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xa5, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x1f, 0xfc, 0x1f, 0xfc, 0xf, 0xf8, 0xf, 0xf8, 0x7, 0xf0, 0x7, 0xf0, 0x3, 0xe0, 0x3, 0xe0, 0x1, 0xc0, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xa6, 0x0, 0x0, 0x0, 0x0, 0x21, 0x84, 0x11, 0x88, 0x8, 0x10, 0x4, 0x20, 0x2, 0x40, 0x31, 0x8c, 0x31, 0x8c, 0x2, 0x40, 0x4, 0x20, 0x8, 0x10, 0x11, 0x88, 0x21, 0x84, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xa7, 0x0, 0x0, 0x3f, 0xfe, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x3f, 0xfe, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x0, 0x0 },
{ 0x81, 0xa8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x4, 0x7f, 0xff, 0x0, 0x4, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xa9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x10, 0x0, 0x7f, 0xff, 0x10, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xaa, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x2, 0xa0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x81, 0xab, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x2, 0xa0, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x80 },
{ 0x81, 0xac, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xb8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfc, 0x8, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x8, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xb9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xf0, 0x0, 0x8, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x8, 0x1f, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xba, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfc, 0x8, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x8, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xbb, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xf0, 0x0, 0x8, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x8, 0x1f, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xbc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xfc, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x8, 0x0, 0x4, 0x0, 0x3, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xbd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xe0, 0x0, 0x10, 0x0, 0x8, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x1f, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x8, 0x8, 0x4, 0x10, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xbf, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x4, 0x10, 0x8, 0x8, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0x40, 0x1, 0x40, 0x2, 0x20, 0x2, 0x20, 0x4, 0x10, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x10, 0x4, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xc9, 0x0, 0x0, 0x0, 0x0, 0x10, 0x4, 0x10, 0x4, 0x8, 0x8, 0x8, 0x8, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x2, 0x20, 0x1, 0x40, 0x1, 0x40, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xca, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xcb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x8, 0x7f, 0xfc, 0x0, 0x2, 0x0, 0x1, 0x0, 0x2, 0x7f, 0xfc, 0x0, 0x8, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xcc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x8, 0x8, 0x1f, 0xfc, 0x20, 0x2, 0x40, 0x1, 0x20, 0x2, 0x1f, 0xfc, 0x8, 0x8, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xcd, 0x0, 0x0, 0x20, 0x2, 0x20, 0x2, 0x10, 0x4, 0x10, 0x4, 0xf, 0xf8, 0x8, 0x8, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x2, 0x20, 0x1, 0x40, 0x1, 0x40, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x81, 0xce, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xda, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x8, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xdc, 0x3, 0xe0, 0x1c, 0x1c, 0x60, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xdd, 0x0, 0x0, 0x0, 0xf0, 0x1, 0x98, 0x2, 0x8, 0x0, 0x8, 0x0, 0x8, 0x1, 0xd8, 0x2, 0x30, 0x4, 0x10, 0xc, 0x30, 0x8, 0x20, 0x8, 0x60, 0xc, 0xc0, 0x7, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xde, 0x0, 0x0, 0x3f, 0xfe, 0x3f, 0xfc, 0x18, 0x4, 0x18, 0x8, 0xc, 0x8, 0xc, 0x10, 0x6, 0x10, 0x6, 0x20, 0x3, 0x20, 0x3, 0x40, 0x1, 0xc0, 0x1, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xe0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x18, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xe1, 0x0, 0x0, 0x0, 0x22, 0x0, 0x44, 0x1, 0x98, 0x2, 0x20, 0xc, 0xc0, 0x11, 0x0, 0x22, 0x0, 0x11, 0x0, 0x8, 0x80, 0x4, 0x40, 0x3, 0x30, 0x0, 0x88, 0x0, 0x44, 0x0, 0x22, 0x0, 0x0 },
{ 0x81, 0xe2, 0x0, 0x0, 0x22, 0x0, 0x11, 0x0, 0xc, 0xc0, 0x2, 0x20, 0x1, 0x98, 0x0, 0x44, 0x0, 0x22, 0x0, 0x44, 0x0, 0x88, 0x1, 0x10, 0x6, 0x60, 0x8, 0x80, 0x11, 0x0, 0x22, 0x0, 0x0, 0x0 },
{ 0x81, 0xe3, 0x0, 0x7f, 0x0, 0x40, 0x0, 0x40, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x11, 0x0, 0x3a, 0x0, 0x5a, 0x0, 0xe, 0x0, 0xc, 0x0, 0x4, 0x0 },
{ 0x81, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x38, 0x10, 0x44, 0x20, 0x42, 0x20, 0x82, 0x20, 0x82, 0x21, 0x2, 0x11, 0x4, 0xe, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x1c, 0x11, 0x22, 0x20, 0xc0, 0x20, 0xc0, 0x20, 0xc0, 0x20, 0xc0, 0x11, 0x22, 0xe, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x6, 0x18, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xe7, 0x1, 0xc0, 0x2, 0x40, 0x2, 0x0, 0x3, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x60, 0x0, 0x20, 0x1, 0x20, 0x1, 0xc0 },
{ 0x81, 0xe8, 0xe, 0x38, 0x12, 0x48, 0x10, 0x40, 0x18, 0x60, 0x8, 0x20, 0x8, 0x20, 0xc, 0x30, 0x4, 0x10, 0x4, 0x10, 0x6, 0x18, 0x2, 0x8, 0x2, 0x8, 0x3, 0xc, 0x1, 0x4, 0x9, 0x24, 0xe, 0x38 },
{ 0x81, 0xf0, 0x1, 0xc0, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x1, 0xc0, 0x0, 0x80, 0x1, 0x40, 0x1, 0x40, 0x2, 0x20, 0x2, 0x20, 0x7, 0xf0, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x81, 0xf1, 0x0, 0x0, 0x30, 0x40, 0x48, 0x40, 0x48, 0x80, 0x49, 0x0, 0x49, 0x0, 0x4a, 0x0, 0x34, 0x0, 0x5, 0x8c, 0xa, 0x52, 0x12, 0x52, 0x12, 0x52, 0x22, 0x52, 0x42, 0x52, 0x41, 0x8c, 0x0, 0x0 },
{ 0x81, 0xf2, 0x0, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3e, 0x3, 0xe0, 0x3e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3e, 0x3, 0xe0, 0x3e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x0 },
{ 0x81, 0xf3, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0xf0, 0x3, 0x18, 0x2, 0x18, 0x2, 0x18, 0x2, 0x18, 0x2, 0x30, 0x2, 0x60, 0x2, 0x80, 0x3, 0x0, 0x2, 0x0 },
{ 0x81, 0xf4, 0x0, 0x80, 0x0, 0x80, 0x0, 0xc0, 0x0, 0xe0, 0x0, 0xb0, 0x0, 0x98, 0x0, 0x8c, 0x0, 0x84, 0x0, 0x84, 0x0, 0x88, 0x0, 0x90, 0x0, 0x80, 0xf, 0x80, 0x1f, 0x80, 0x1f, 0x0, 0xe, 0x0 },
{ 0x81, 0xf5, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xf, 0xf0, 0xf, 0xf0, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x81, 0xf6, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xf, 0xf0, 0xf, 0xf0, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xf, 0xf0, 0xf, 0xf0, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x81, 0xf7, 0x0, 0x0, 0x3, 0xf0, 0x7, 0x90, 0xf, 0x90, 0xf, 0x90, 0xf, 0x90, 0x7, 0x90, 0x3, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0x90 },
{ 0x81, 0xfc, 0x1, 0xc0, 0x6, 0x30, 0x8, 0x8, 0x10, 0x4, 0x20, 0x2, 0x20, 0x2, 0x40, 0x1, 0x40, 0x1, 0x40, 0x1, 0x40, 0x1, 0x20, 0x2, 0x20, 0x2, 0x10, 0x4, 0x8, 0x8, 0x6, 0x30, 0x1, 0xc0 },
{ 0x82, 0x4f, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x4, 0x10, 0xc, 0x18, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0x50, 0x0, 0x0, 0x0, 0x40, 0x0, 0xc0, 0x3, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x0 },
{ 0x82, 0x51, 0x0, 0x0, 0x3, 0xe0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0xf, 0xf8, 0x0, 0x0 },
{ 0x82, 0x52, 0x0, 0x0, 0x3, 0xe0, 0x6, 0x30, 0xc, 0x18, 0x0, 0x8, 0x0, 0x8, 0x0, 0x10, 0x3, 0xe0, 0x0, 0x10, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0xf, 0xe0, 0x0, 0x0 },
{ 0x82, 0x53, 0x0, 0x0, 0x0, 0x20, 0x0, 0x60, 0x0, 0xe0, 0x1, 0xa0, 0x3, 0x20, 0x6, 0x20, 0xc, 0x20, 0x18, 0x20, 0x10, 0x20, 0x1f, 0xfc, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x0 },
{ 0x82, 0x54, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xb, 0xe0, 0xc, 0x10, 0x8, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0xe0, 0xf, 0x80, 0x0, 0x0 },
{ 0x82, 0x55, 0x0, 0x0, 0x0, 0x70, 0x1, 0xc0, 0x3, 0x0, 0x6, 0x0, 0x4, 0x0, 0xd, 0xc0, 0xa, 0x30, 0xc, 0x18, 0x8, 0x8, 0x8, 0x8, 0xc, 0x8, 0x4, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0x56, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0 },
{ 0x82, 0x57, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x8, 0x8, 0x4, 0x10, 0x3, 0xe0, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0x58, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x10, 0x8, 0x18, 0x8, 0x8, 0x8, 0x8, 0xc, 0x18, 0x6, 0x28, 0x1, 0xd8, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x0, 0x0 },
{ 0x82, 0x60, 0x0, 0x0, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x61, 0x0, 0x0, 0xf, 0xc0, 0x8, 0x20, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x20, 0xf, 0xc0, 0x8, 0x30, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0xf, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x62, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x18, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x63, 0x0, 0x0, 0xf, 0x80, 0x8, 0x60, 0x8, 0x30, 0x8, 0x10, 0x8, 0x18, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x10, 0x8, 0x30, 0x8, 0x60, 0xf, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x64, 0x0, 0x0, 0x7, 0xf8, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x65, 0x0, 0x0, 0x7, 0xf8, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x66, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x18, 0x0, 0x10, 0x0, 0x10, 0xf8, 0x10, 0x8, 0x18, 0x8, 0x8, 0x8, 0xc, 0x18, 0x6, 0x28, 0x1, 0xc8, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x67, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x68, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x69, 0x0, 0x0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x8, 0x10, 0x8, 0x10, 0x4, 0x20, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x6a, 0x0, 0x0, 0x8, 0x18, 0x8, 0x30, 0x8, 0x60, 0x8, 0xc0, 0x9, 0x80, 0xb, 0x0, 0xf, 0x0, 0xd, 0x80, 0x8, 0xc0, 0x8, 0x60, 0x8, 0x30, 0x8, 0x18, 0x8, 0xc, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x6b, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x6c, 0x0, 0x0, 0x30, 0x6, 0x38, 0xe, 0x28, 0xa, 0x2c, 0x1a, 0x24, 0x12, 0x24, 0x12, 0x26, 0x32, 0x22, 0x22, 0x23, 0x62, 0x21, 0x42, 0x21, 0xc2, 0x20, 0x82, 0x20, 0x82, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x6d, 0x0, 0x0, 0xc, 0x8, 0xe, 0x8, 0xa, 0x8, 0xb, 0x8, 0x9, 0x8, 0x9, 0x88, 0x8, 0x88, 0x8, 0xc8, 0x8, 0x48, 0x8, 0x68, 0x8, 0x28, 0x8, 0x38, 0x8, 0x18, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x6e, 0x0, 0x0, 0x3, 0xe0, 0xc, 0x18, 0x18, 0xc, 0x10, 0x4, 0x30, 0x6, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x30, 0x6, 0x10, 0x4, 0x18, 0xc, 0xc, 0x18, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x6f, 0x0, 0x0, 0x7, 0xe0, 0x4, 0x10, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x10, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x70, 0x0, 0x0, 0x3, 0xe0, 0xc, 0x18, 0x18, 0xc, 0x10, 0x4, 0x30, 0x6, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x30, 0x6, 0x10, 0x44, 0x18, 0x2c, 0xc, 0x18, 0x3, 0xec, 0x0, 0x4, 0x0, 0x0 },
{ 0x82, 0x71, 0x0, 0x0, 0x7, 0xe0, 0x4, 0x10, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x10, 0x7, 0xe0, 0x4, 0x40, 0x4, 0x60, 0x4, 0x30, 0x4, 0x10, 0x4, 0x8, 0x4, 0xc, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x72, 0x0, 0x0, 0x3, 0xe0, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x6, 0x0, 0x1, 0xc0, 0x0, 0x30, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x4, 0x10, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x73, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x74, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x75, 0x0, 0x0, 0x10, 0x4, 0x10, 0x4, 0x18, 0xc, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0x40, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x76, 0x0, 0x0, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x31, 0xc6, 0x11, 0x44, 0x11, 0x44, 0x13, 0x64, 0x1a, 0x2c, 0xa, 0x28, 0xa, 0x28, 0xe, 0x38, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x77, 0x0, 0x0, 0x10, 0x4, 0x18, 0xc, 0xc, 0x18, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6, 0x20, 0x2, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x78, 0x0, 0x0, 0x10, 0x4, 0x18, 0xc, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x79, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x1, 0x0, 0x3, 0x0, 0x6, 0x0, 0xc, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x20, 0x0, 0x20, 0x7, 0xe0, 0x8, 0x20, 0x8, 0x20, 0x8, 0x68, 0x7, 0x98, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x82, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x5, 0xc0, 0x6, 0x20, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x6, 0x20, 0x5, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x2, 0x10, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x2, 0x10, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x84, 0x0, 0x0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x1, 0xd0, 0x2, 0x30, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x2, 0x30, 0x1, 0xd0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x2, 0x10, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x86, 0x0, 0x0, 0x0, 0x70, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7, 0xf0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xd8, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x3, 0xc0, 0x4, 0x0, 0x7, 0xf0, 0x8, 0x8, 0x8, 0x8, 0x7, 0xf0 },
{ 0x82, 0x88, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x5, 0xe0, 0x6, 0x30, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x89, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x8a, 0x0, 0x0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x4, 0x40, 0x3, 0x80 },
{ 0x82, 0x8b, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x30, 0x4, 0x60, 0x4, 0xc0, 0x5, 0x80, 0x7, 0xc0, 0x4, 0x60, 0x4, 0x30, 0x4, 0x18, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x8c, 0x0, 0x0, 0x3, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x17, 0x38, 0x18, 0xc4, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x8e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0xe0, 0x6, 0x30, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x8f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x4, 0x20, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x4, 0x20, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0xc0, 0x6, 0x20, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x6, 0x20, 0x5, 0xc0, 0x4, 0x0, 0x4, 0x0 },
{ 0x82, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xd0, 0x2, 0x30, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x2, 0x30, 0x1, 0xd0, 0x0, 0x10, 0x0, 0x10 },
{ 0x82, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x30, 0x1, 0x40, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x93, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x4, 0x20, 0x4, 0x0, 0x3, 0x80, 0x0, 0x60, 0x0, 0x10, 0x4, 0x10, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x94, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7, 0xe0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x95, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x6, 0x30, 0x3, 0xd0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0x40, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x97, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x84, 0x18, 0x8c, 0x9, 0xc8, 0xd, 0x58, 0x5, 0x50, 0x7, 0x70, 0x2, 0x20, 0x2, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x98, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x99, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0x40, 0x1, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x7, 0x0 },
{ 0x82, 0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x7, 0xf0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xf8, 0x2, 0x40, 0x3, 0xf0, 0x6, 0x58, 0xa, 0x4c, 0x12, 0x84, 0x12, 0x84, 0x11, 0xc, 0xe, 0x18, 0x0, 0x60 },
{ 0x82, 0xa0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xfc, 0x2, 0x0, 0x2, 0x40, 0x3, 0xf0, 0xe, 0x5c, 0x1a, 0x44, 0x12, 0xc6, 0x32, 0x82, 0x22, 0x82, 0x23, 0x6, 0x23, 0x4, 0x1c, 0x1c, 0x0, 0x70, 0x0, 0x0 },
{ 0x82, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x10, 0x30, 0x10, 0x18, 0x10, 0x8, 0x10, 0xc, 0x18, 0x4, 0xa, 0x4, 0xe, 0x0, 0x4, 0x0, 0x0, 0x0 },
{ 0x82, 0xa2, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x20, 0x10, 0x20, 0x18, 0x20, 0xc, 0x20, 0x4, 0x20, 0x6, 0x20, 0x2, 0x20, 0x2, 0x32, 0x2, 0x16, 0x0, 0x1c, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x3, 0x80, 0x0, 0xe0, 0x0, 0x0, 0xf, 0xe0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0 },
{ 0x82, 0xa4, 0x3, 0x0, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf0, 0x0, 0x18, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x0, 0x0 },
{ 0x82, 0xa5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x3, 0xc0, 0x6, 0x40, 0xc, 0x40, 0x0, 0x38 },
{ 0x82, 0xa6, 0x3, 0x0, 0x1, 0xc0, 0x0, 0x70, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x40, 0x6, 0x40, 0xc, 0x40, 0x18, 0x70, 0x0, 0x1e, 0x0, 0x0 },
{ 0x82, 0xa7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x10, 0x1, 0xd8, 0xf, 0x8, 0x1, 0x0, 0x1, 0xe0, 0x3, 0x10, 0x5, 0x8, 0x9, 0x8, 0x9, 0x18, 0x6, 0x70, 0x0, 0x0 },
{ 0x82, 0xa8, 0x2, 0x0, 0x2, 0x0, 0x2, 0xc, 0x3, 0xc6, 0x3e, 0x2, 0x2, 0x0, 0x2, 0x0, 0x2, 0xf8, 0x3, 0x8c, 0xe, 0x6, 0x1a, 0x2, 0x32, 0x2, 0x22, 0x6, 0x26, 0xc, 0x1c, 0x38, 0x0, 0x0 },
{ 0x82, 0xa9, 0x2, 0x0, 0x2, 0x0, 0x2, 0x8, 0x2, 0xc, 0x3f, 0xc6, 0x2, 0x22, 0x2, 0x23, 0x6, 0x21, 0x4, 0x21, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x60, 0x30, 0x40, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xaa, 0x2, 0x5, 0x2, 0x5, 0x2, 0x10, 0x2, 0x18, 0x3f, 0xcc, 0x2, 0x24, 0x2, 0x26, 0x6, 0x22, 0x4, 0x22, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x60, 0x30, 0x40, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xab, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xf8, 0x1, 0x0, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x40, 0x7, 0xf0, 0x8, 0x18, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0xf0, 0x0, 0x0 },
{ 0x82, 0xac, 0x1, 0x5, 0x1, 0x5, 0x1f, 0xf0, 0x1, 0x0, 0x0, 0x80, 0x1f, 0xf8, 0x0, 0x80, 0x0, 0x40, 0x7, 0xf0, 0x8, 0x18, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0xf0, 0x0, 0x0 },
{ 0x82, 0xad, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0xc, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0x30, 0x0, 0x10 },
{ 0x82, 0xae, 0x0, 0x10, 0x0, 0x35, 0x0, 0x65, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0xc, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0x30, 0x0, 0x10 },
{ 0x82, 0xaf, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x10, 0x23, 0xfe, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x28, 0x10, 0x30, 0x30, 0x10, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x0, 0x0 },
{ 0x82, 0xb0, 0x0, 0x15, 0x10, 0x15, 0x10, 0x10, 0x30, 0x10, 0x23, 0xfe, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x28, 0x10, 0x30, 0x30, 0x10, 0x20, 0x0, 0x60, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xb1, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xb2, 0x0, 0x5, 0x0, 0x5, 0xf, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xb3, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3f, 0xf8, 0x1, 0x0, 0x0, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x7, 0xf8, 0x8, 0xc, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0xf8, 0x0, 0x0 },
{ 0x82, 0xb4, 0x2, 0x5, 0x2, 0x5, 0x2, 0x0, 0x3f, 0xfc, 0x1, 0x0, 0x0, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x7, 0xf8, 0x8, 0xc, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0xf0, 0x0, 0x0 },
{ 0x82, 0xb5, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x4, 0x4, 0xc, 0x4, 0x18, 0x2, 0x70, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xb6, 0x0, 0x0, 0x4, 0x0, 0x4, 0x28, 0x4, 0x28, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x4, 0x4, 0xc, 0x4, 0x18, 0x2, 0x70, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xb7, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x40, 0x3, 0xc0, 0x6, 0x60, 0x4, 0x20, 0x4, 0x20, 0x6, 0x20, 0x3, 0xe0, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0 },
{ 0x82, 0xb8, 0x0, 0x45, 0x0, 0x45, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x40, 0x3, 0xc0, 0x6, 0x60, 0x4, 0x20, 0x4, 0x20, 0x6, 0x20, 0x3, 0xe0, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0 },
{ 0x82, 0xb9, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x60, 0x4, 0x0, 0x4, 0x0, 0x2, 0x0, 0x1, 0xfc, 0x0, 0x0 },
{ 0x82, 0xba, 0x0, 0x5, 0x4, 0x15, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x60, 0x4, 0x0, 0x4, 0x0, 0x2, 0x0, 0x1, 0xfc, 0x0, 0x0 },
{ 0x82, 0xbb, 0x0, 0x0, 0xf, 0xf0, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x6, 0x0, 0x3f, 0xfe, 0x1, 0x80, 0x3, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x3, 0x80, 0x0, 0xf0 },
{ 0x82, 0xbc, 0x0, 0x0, 0xf, 0xf0, 0x0, 0x25, 0x0, 0x65, 0x0, 0xc0, 0x1, 0x80, 0x6, 0x0, 0x3f, 0xfe, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0x4, 0x0, 0x4, 0x0, 0x6, 0x0, 0x3, 0x80, 0x0, 0xf0 },
{ 0x82, 0xbd, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3f, 0x80, 0x4, 0x0, 0x4, 0x7c, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x10, 0x80, 0x30, 0xc0, 0x20, 0x7e, 0x0, 0x0 },
{ 0x82, 0xbe, 0x2, 0x5, 0x2, 0x5, 0x2, 0x0, 0x3f, 0x80, 0x4, 0x0, 0x4, 0x7c, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x10, 0x80, 0x30, 0xc0, 0x20, 0x7e, 0x0, 0x0 },
{ 0x82, 0xbf, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3f, 0xfc, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x7, 0xf0, 0xc, 0x8, 0x18, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x38, 0x3, 0xe0, 0x0, 0x0 },
{ 0x82, 0xc0, 0x1, 0x5, 0x1, 0x5, 0x1, 0x0, 0x3f, 0xfc, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x7, 0xf0, 0xc, 0x8, 0x18, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x38, 0x3, 0xe0, 0x0, 0x0 },
{ 0x82, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x7, 0x10, 0x1c, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0xe0, 0x0, 0x0 },
{ 0x82, 0xc2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf8, 0xf, 0x4, 0x38, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0xc, 0x0, 0x38, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xc3, 0x0, 0x5, 0x0, 0x5, 0x0, 0x0, 0x1, 0xf8, 0xf, 0x4, 0x38, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0xc, 0x0, 0x38, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xc4, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x70, 0x0, 0x1c, 0x0, 0x0 },
{ 0x82, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfc, 0x0, 0x30, 0x0, 0x65, 0x0, 0xc5, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x70, 0x0, 0x1c, 0x0, 0x0 },
{ 0x82, 0xc6, 0x0, 0x0, 0x8, 0x0, 0xc, 0x0, 0x4, 0x0, 0x6, 0xc, 0x2, 0x38, 0x2, 0xe0, 0x3, 0x80, 0x6, 0x0, 0xc, 0x0, 0x18, 0x0, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xf, 0xfc, 0x0, 0x0 },
{ 0x82, 0xc7, 0x0, 0x5, 0x8, 0x5, 0xc, 0x0, 0x4, 0x0, 0x6, 0xc, 0x2, 0x38, 0x2, 0xe0, 0x3, 0x80, 0x7, 0x0, 0xc, 0x0, 0x18, 0x0, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xf, 0xfc, 0x0, 0x0 },
{ 0x82, 0xc8, 0x4, 0x0, 0x4, 0x0, 0x4, 0x18, 0x3f, 0x8c, 0x4, 0x6, 0xc, 0x0, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x1, 0xe0, 0x2, 0x38, 0x2, 0x6c, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xc9, 0x0, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x11, 0x0, 0x11, 0x0, 0x15, 0x80, 0x18, 0xfe, 0x8, 0x0, 0x0, 0x0 },
{ 0x82, 0xca, 0x0, 0x80, 0x0, 0x80, 0x10, 0x80, 0x10, 0x80, 0x17, 0xf0, 0x1c, 0x9c, 0x8, 0x84, 0x19, 0x86, 0x1d, 0x2, 0x35, 0x2, 0x27, 0x2, 0x22, 0x3a, 0x27, 0x44, 0x25, 0x4e, 0x1c, 0x3a, 0x0, 0x0 },
{ 0x82, 0xcb, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0xf8, 0x39, 0x8c, 0xb, 0x6, 0xe, 0x2, 0xc, 0x2, 0xc, 0x2, 0x18, 0x2, 0x38, 0x3a, 0x28, 0x44, 0x8, 0x4e, 0x8, 0x3b, 0x8, 0x0, 0x0, 0x0 },
{ 0x82, 0xcc, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0xe, 0xb8, 0x18, 0x8c, 0x10, 0x84, 0x31, 0x86, 0x21, 0x2, 0x21, 0x2, 0x23, 0x2, 0x22, 0x6, 0x26, 0x4, 0x1c, 0x1c, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xcd, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x30, 0x10, 0x23, 0xfe, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x21, 0xf0, 0x22, 0x18, 0x2a, 0x14, 0x32, 0x32, 0x11, 0xe0, 0x0, 0x0 },
{ 0x82, 0xce, 0x0, 0x5, 0x10, 0x15, 0x10, 0x10, 0x30, 0x10, 0x23, 0xfe, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x21, 0xf0, 0x22, 0x18, 0x2a, 0x14, 0x32, 0x32, 0x11, 0xe0, 0x0, 0x0 },
{ 0x82, 0xcf, 0x0, 0x0, 0x10, 0x20, 0x10, 0x26, 0x30, 0x29, 0x23, 0xf9, 0x20, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0xe0, 0x22, 0x38, 0x2a, 0x2c, 0x32, 0x66, 0x11, 0xc0, 0x0, 0x0 },
{ 0x82, 0xd0, 0x0, 0x0, 0x1, 0x10, 0x3f, 0x10, 0x2, 0x18, 0x6, 0x1c, 0xc, 0x16, 0x8, 0x13, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0x20, 0xc, 0xe0, 0x7, 0x80, 0x0, 0x0 },
{ 0x82, 0xd1, 0x0, 0x5, 0x1, 0x15, 0x3f, 0x10, 0x2, 0x18, 0x6, 0x1c, 0xc, 0x16, 0x8, 0x13, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x30, 0x18, 0x20, 0xc, 0xe0, 0x7, 0x80, 0x0, 0x0 },
{ 0x82, 0xd2, 0x0, 0x0, 0x4, 0x40, 0x7c, 0x46, 0x8, 0x49, 0x18, 0x69, 0x10, 0x76, 0x10, 0x58, 0x30, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x30, 0xc0, 0x19, 0x80, 0xf, 0x0, 0x0, 0x0 },
{ 0x82, 0xd3, 0x0, 0x0, 0x2, 0x0, 0x3, 0x0, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xcc, 0x20, 0x46, 0x20, 0x62, 0x2c, 0x23, 0x38, 0x21, 0x10, 0x60, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xd4, 0x0, 0x0, 0x2, 0xa, 0x3, 0xa, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xcc, 0x20, 0x46, 0x20, 0x62, 0x2c, 0x23, 0x38, 0x21, 0x10, 0x60, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xd5, 0x0, 0x0, 0x4, 0x0, 0x6, 0xc, 0x3, 0x92, 0x0, 0xd2, 0x0, 0xc, 0x6, 0x0, 0x3, 0x0, 0x1, 0x8c, 0x20, 0xc6, 0x20, 0x42, 0x2c, 0x63, 0x38, 0x21, 0x10, 0x60, 0x3, 0xc0, 0x0, 0x0 },
{ 0x82, 0xd6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x4, 0x80, 0xc, 0x80, 0x8, 0x40, 0x18, 0x40, 0x30, 0x20, 0x0, 0x30, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xd7, 0x0, 0x0, 0x0, 0x14, 0x0, 0x14, 0x3, 0x0, 0x4, 0x80, 0xc, 0x80, 0x8, 0x40, 0x18, 0x40, 0x30, 0x20, 0x0, 0x30, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xd8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc, 0x4, 0x92, 0xc, 0x92, 0x8, 0x4c, 0x18, 0x40, 0x30, 0x20, 0x0, 0x30, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x82, 0xd9, 0x0, 0x0, 0x10, 0x0, 0x13, 0xfe, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0xfe, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0xe0, 0x22, 0x38, 0x2a, 0x2c, 0x32, 0x66, 0x11, 0xc0, 0x0, 0x0 },
{ 0x82, 0xda, 0x0, 0x5, 0x10, 0x5, 0x13, 0xf8, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0xfc, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0xe0, 0x22, 0x38, 0x2a, 0x2c, 0x32, 0x66, 0x11, 0xc0, 0x0, 0x0 },
{ 0x82, 0xdb, 0x0, 0x0, 0x10, 0x0, 0x13, 0xf6, 0x30, 0x29, 0x20, 0x29, 0x20, 0x26, 0x23, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0xe0, 0x22, 0x38, 0x2a, 0x2c, 0x32, 0x66, 0x11, 0xc0, 0x0, 0x0 },
{ 0x82, 0xdc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0x80, 0x10, 0xe0, 0x10, 0xb8, 0x11, 0x8c, 0xf, 0x0, 0x0, 0x0 },
{ 0x82, 0xdd, 0x0, 0x0, 0x0, 0x0, 0xf, 0x80, 0x0, 0x80, 0x0, 0x88, 0x0, 0x88, 0x0, 0x88, 0xf, 0xf8, 0x19, 0xe, 0x33, 0xb, 0x22, 0x18, 0x26, 0x10, 0x2c, 0x30, 0x18, 0x60, 0x0, 0xc0, 0x0, 0x0 },
{ 0x82, 0xde, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x3f, 0x98, 0x4, 0xc, 0x4, 0x6, 0x4, 0x2, 0x1c, 0x0, 0x24, 0x0, 0x24, 0x0, 0x24, 0x0, 0x24, 0x8, 0x1c, 0x8, 0x6, 0x18, 0x3, 0xf0, 0x0, 0x0 },
{ 0x82, 0xdf, 0x0, 0x40, 0x0, 0x40, 0x10, 0x40, 0x10, 0x40, 0x1b, 0xf0, 0xe, 0x5c, 0x8, 0xc4, 0x1c, 0x86, 0x14, 0x82, 0x35, 0x82, 0x27, 0x2, 0x22, 0x6, 0x27, 0x4, 0x1d, 0x1c, 0x0, 0x70, 0x0, 0x0 },
{ 0x82, 0xe0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xf0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xf0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0x3, 0xc, 0x1, 0x98, 0x0, 0xf0, 0x0, 0x0 },
{ 0x82, 0xe1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x4, 0x60, 0x6, 0x20, 0x2, 0x78, 0x3, 0xc4, 0xf, 0x4, 0x19, 0x84, 0x0, 0x98, 0x0, 0x80, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40 },
{ 0x82, 0xe2, 0x0, 0x0, 0x8, 0xc0, 0xc, 0x60, 0x4, 0x20, 0x6, 0x7c, 0x3, 0xc2, 0x1e, 0x2, 0x73, 0x6, 0x1, 0x1c, 0x1, 0x0, 0x1, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40 },
{ 0x82, 0xe3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x8, 0x40, 0x9, 0xf0, 0x12, 0x48, 0x14, 0x44, 0x14, 0x44, 0x18, 0x44, 0xa, 0x48, 0x9, 0xf0, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80 },
{ 0x82, 0xe4, 0x0, 0x0, 0x0, 0x40, 0x10, 0x40, 0x11, 0xf8, 0x33, 0x4c, 0x26, 0x46, 0x24, 0x42, 0x28, 0x42, 0x28, 0x42, 0x30, 0x46, 0x16, 0x4c, 0x13, 0xf8, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0x0, 0x0 },
{ 0x82, 0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7, 0x80, 0x8, 0xf0, 0x8, 0x98, 0x7, 0x0 },
{ 0x82, 0xe6, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0x80, 0x10, 0xe0, 0x10, 0xb8, 0x11, 0x8c, 0xf, 0x0, 0x0, 0x0 },
{ 0x82, 0xe7, 0x1, 0x80, 0x0, 0xc0, 0x4, 0x60, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x8, 0x0, 0x9, 0xf0, 0xf, 0x1c, 0x18, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x38, 0x1, 0xe0, 0x0, 0x0 },
{ 0x82, 0xe8, 0x0, 0x0, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x5, 0x8, 0x6, 0x8, 0x4, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x0, 0x0 },
{ 0x82, 0xe9, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0xf0, 0x6, 0x18, 0xc, 0xc, 0x18, 0x4, 0x3, 0x84, 0x4, 0xc4, 0x4, 0x4c, 0x6, 0x58, 0x3, 0xf0, 0x0, 0x0 },
{ 0x82, 0xea, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0xe0, 0x3d, 0x90, 0x7, 0x10, 0x6, 0x10, 0xc, 0x10, 0xc, 0x10, 0x1c, 0x10, 0x14, 0x11, 0x34, 0x11, 0x4, 0x13, 0x4, 0xe, 0x4, 0x0, 0x0, 0x0 },
{ 0x82, 0xeb, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0xf0, 0x6, 0x18, 0xc, 0xc, 0x18, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x18, 0x0, 0x70, 0x3, 0xc0, 0x0, 0x0 },
{ 0x82, 0xec, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x1e, 0x70, 0x3, 0x88, 0x2, 0x4, 0x6, 0x4, 0xe, 0x4, 0xa, 0x4, 0x12, 0x8, 0x2, 0x30, 0x2, 0x0 },
{ 0x82, 0xed, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0xf8, 0x3d, 0x8c, 0x7, 0x6, 0x6, 0x2, 0xc, 0x2, 0xc, 0x2, 0x1c, 0x2, 0x14, 0x2, 0x34, 0x6, 0x4, 0xc, 0x4, 0x38, 0x4, 0x0, 0x0, 0x0 },
{ 0x82, 0xee, 0x0, 0x0, 0xf, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0xf8, 0x5, 0xc, 0xd, 0x6, 0x19, 0x2, 0x13, 0x2, 0x32, 0x62, 0x26, 0xb2, 0x2c, 0x96, 0x18, 0xcc, 0x0, 0x78, 0x0, 0x0 },
{ 0x82, 0xef, 0x0, 0x0, 0xf, 0xf0, 0x0, 0x60, 0x1, 0x80, 0x7, 0xf0, 0x1c, 0x18, 0x0, 0x8, 0x7, 0x8, 0x9, 0x98, 0xc, 0xb0, 0x7, 0xe0, 0x4, 0x0, 0x1f, 0x3c, 0x31, 0xe6, 0x60, 0x43, 0x0, 0x0 },
{ 0x82, 0xf0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xe0, 0x3e, 0x0, 0x4, 0x0, 0x4, 0x6, 0xf, 0x9c, 0x18, 0x70, 0x31, 0xc0, 0x3, 0x40, 0x6, 0x40, 0xc, 0x40, 0x8, 0x0, 0xc, 0x0, 0x7, 0xfc, 0x0, 0x0 },
{ 0x82, 0xf1, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0x4, 0x0, 0xd, 0x80, 0xa, 0x40, 0xc, 0x40, 0x18, 0x40, 0x10, 0x42, 0x10, 0x46, 0x30, 0x4c, 0x20, 0x38, 0x0, 0x0 },
{ 0x83, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xfc, 0x0, 0xc, 0x0, 0x98, 0x0, 0xb0, 0x0, 0x80, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x3, 0x0, 0x6, 0x0 },
{ 0x83, 0x41, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x6, 0x0, 0x8c, 0x0, 0x98, 0x0, 0xb0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x3, 0x0, 0x6, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0xe0, 0x3, 0x80, 0x1e, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x83, 0x43, 0x0, 0x0, 0x0, 0x4, 0x0, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x80, 0x3c, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x83, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80 },
{ 0x83, 0x45, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0x0, 0x0 },
{ 0x83, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x0 },
{ 0x83, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0xf, 0xfc, 0x0, 0xc0, 0x1, 0xc0, 0x3, 0x40, 0x6, 0x40, 0x1c, 0x40, 0x0, 0x40, 0x1, 0xc0 },
{ 0x83, 0x49, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x3f, 0xfe, 0x0, 0xc0, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x40, 0x6, 0x40, 0xc, 0x40, 0x18, 0x40, 0x30, 0x40, 0x0, 0x40, 0x1, 0xc0, 0x0, 0x0 },
{ 0x83, 0x4a, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x3, 0x4, 0x2, 0x4, 0x2, 0x4, 0x6, 0xc, 0x4, 0x8, 0xc, 0x8, 0x18, 0x78, 0x0, 0x0 },
{ 0x83, 0x4b, 0x1, 0x5, 0x1, 0x5, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x3, 0x4, 0x2, 0x4, 0x2, 0x4, 0x6, 0xc, 0x4, 0x8, 0xc, 0x8, 0x18, 0x78, 0x0, 0x0 },
{ 0x83, 0x4c, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x1, 0x38, 0x1, 0xe0, 0x7, 0x80, 0x3c, 0x80, 0x0, 0x9e, 0x0, 0xf0, 0x3, 0xc0, 0x1e, 0x40, 0x0, 0x60, 0x0, 0x20, 0x0, 0x20, 0x0, 0x30, 0x0, 0x10 },
{ 0x83, 0x4d, 0x2, 0x5, 0x2, 0x5, 0x3, 0x0, 0x1, 0x38, 0x1, 0xe0, 0x7, 0x80, 0x3c, 0x80, 0x0, 0x9e, 0x0, 0xf0, 0x3, 0xc0, 0x1e, 0x40, 0x0, 0x60, 0x0, 0x20, 0x0, 0x20, 0x0, 0x30, 0x0, 0x10 },
{ 0x83, 0x4e, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x6, 0x8, 0xc, 0x18, 0x18, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x4f, 0x1, 0x5, 0x1, 0x5, 0x1, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x6, 0x8, 0xc, 0x18, 0x18, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x50, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x8, 0x20, 0x18, 0x20, 0x30, 0x20, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x51, 0x2, 0x5, 0x2, 0x5, 0x6, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x8, 0x20, 0x18, 0x20, 0x30, 0x20, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x53, 0x0, 0x5, 0x0, 0x5, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x54, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x0, 0x0 },
{ 0x83, 0x55, 0x0, 0x5, 0x4, 0x15, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x0, 0x0 },
{ 0x83, 0x56, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x2, 0xc, 0x6, 0x4, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x57, 0x0, 0x0, 0x0, 0xa, 0x6, 0xa, 0x3, 0x0, 0x1, 0x0, 0x0, 0x0, 0x18, 0x2, 0xc, 0x6, 0x4, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x58, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xf0, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x0, 0xc0, 0x1, 0xe0, 0x3, 0x30, 0x6, 0x18, 0xc, 0xc, 0x38, 0x6, 0x0, 0x0 },
{ 0x83, 0x59, 0x0, 0x5, 0x0, 0x5, 0x1f, 0xf0, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x0, 0xc0, 0x1, 0xe0, 0x3, 0x30, 0x6, 0x18, 0xc, 0xc, 0x38, 0x6, 0x0, 0x0 },
{ 0x83, 0x5a, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x7e, 0x7, 0xc6, 0x7c, 0xc, 0x4, 0x18, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x6, 0x0, 0x3, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x5b, 0x0, 0x5, 0x4, 0x5, 0x4, 0x0, 0x4, 0x0, 0x4, 0x7e, 0x7, 0xc6, 0x7c, 0xc, 0x4, 0x18, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x6, 0x0, 0x3, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x5c, 0x0, 0x0, 0x0, 0x0, 0x10, 0x4, 0x18, 0x4, 0x8, 0x4, 0xc, 0x4, 0x4, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x5d, 0x0, 0x5, 0x0, 0x5, 0x10, 0x8, 0x18, 0x8, 0x8, 0x8, 0xc, 0x8, 0x4, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x5e, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0xfc, 0x2, 0x4, 0x6, 0xc, 0xd, 0x88, 0x18, 0xd8, 0x0, 0x50, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x5f, 0x1, 0x5, 0x1, 0x5, 0x1, 0x0, 0x3, 0xfc, 0x2, 0x4, 0x6, 0xc, 0xd, 0x88, 0x18, 0xd8, 0x0, 0x50, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x60, 0x0, 0x0, 0x0, 0x18, 0x0, 0x70, 0xf, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x61, 0x0, 0x5, 0x0, 0x35, 0x0, 0xe0, 0xf, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x13, 0x8, 0x19, 0x8, 0x8, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0 },
{ 0x83, 0x63, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x23, 0x2, 0x31, 0x2, 0x11, 0x86, 0x18, 0x84, 0x8, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x64, 0x0, 0x5, 0x0, 0x5, 0x2, 0x0, 0x23, 0x4, 0x31, 0x4, 0x11, 0x84, 0x18, 0x8c, 0x8, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x65, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x66, 0x0, 0x5, 0x0, 0x5, 0x1f, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x67, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xc0, 0x2, 0x70, 0x2, 0x1c, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x0, 0x0 },
{ 0x83, 0x68, 0x0, 0x0, 0x2, 0xa, 0x2, 0xa, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xc0, 0x2, 0x70, 0x2, 0x1c, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x0, 0x0 },
{ 0x83, 0x69, 0x0, 0x0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x0, 0x0 },
{ 0x83, 0x6a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x6b, 0x0, 0x0, 0x0, 0x0, 0xf, 0xfc, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x6, 0x18, 0x3, 0xb0, 0x0, 0xe0, 0x0, 0x70, 0x0, 0xd8, 0x1, 0x8c, 0x3, 0x4, 0x6, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x6c, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0xb0, 0xe, 0x9c, 0x38, 0x86, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x83, 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0x1c, 0x0, 0x0, 0x0 },
{ 0x83, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x20, 0x2, 0x30, 0x2, 0x10, 0x6, 0x18, 0x4, 0x8, 0x4, 0xc, 0x4, 0x4, 0xc, 0x6, 0x8, 0x2, 0x18, 0x2, 0x30, 0x2, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x6f, 0x0, 0x5, 0x0, 0x5, 0x0, 0x0, 0x2, 0x20, 0x2, 0x30, 0x2, 0x10, 0x6, 0x18, 0x4, 0x8, 0x4, 0xc, 0x4, 0x4, 0xc, 0x6, 0x8, 0x2, 0x18, 0x2, 0x30, 0x2, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x4, 0x49, 0x4, 0x69, 0x4, 0x26, 0xc, 0x30, 0x8, 0x10, 0x8, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x30, 0x4, 0x60, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x71, 0x0, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x18, 0x8, 0xf0, 0xf, 0x80, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xc, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x72, 0x0, 0x5, 0x8, 0x5, 0x8, 0x0, 0x8, 0x0, 0x8, 0x18, 0x8, 0xf0, 0xf, 0x80, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xc, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x73, 0x0, 0x0, 0x10, 0x0, 0x10, 0x6, 0x10, 0x9, 0x10, 0x69, 0x13, 0xc6, 0x1e, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x74, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x75, 0x0, 0x5, 0x0, 0x5, 0x3f, 0xf8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0xe, 0x0, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x76, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xe6, 0x0, 0x29, 0x0, 0x29, 0x0, 0x66, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0x1c, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x7, 0x0, 0x5, 0x0, 0xc, 0x80, 0x8, 0xc0, 0x18, 0x60, 0x30, 0x30, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x78, 0x0, 0x0, 0x0, 0x28, 0x0, 0x28, 0x2, 0x0, 0x7, 0x0, 0x5, 0x0, 0xc, 0x80, 0x8, 0xc0, 0x18, 0x60, 0x30, 0x30, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x18, 0x7, 0x24, 0x5, 0x24, 0xc, 0x98, 0x8, 0xc0, 0x18, 0x60, 0x30, 0x30, 0x0, 0x18, 0x0, 0xc, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x7a, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x4, 0x90, 0x4, 0x98, 0xc, 0x8c, 0x8, 0x84, 0x18, 0x86, 0x30, 0x82, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x83, 0x7b, 0x0, 0xa, 0x0, 0x8a, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x4, 0x90, 0x4, 0x98, 0xc, 0x8c, 0x8, 0x84, 0x18, 0x86, 0x30, 0x82, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x83, 0x7c, 0x0, 0x0, 0x0, 0x80, 0x0, 0x86, 0x0, 0x89, 0x3f, 0xf9, 0x0, 0x86, 0x0, 0x80, 0x4, 0x90, 0x4, 0x98, 0xc, 0x8c, 0x8, 0x84, 0x18, 0x86, 0x30, 0x82, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0 },
{ 0x83, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0xc, 0x0, 0x18, 0x0, 0x30, 0xc, 0x60, 0x3, 0x40, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0x20, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x7e, 0x0, 0x0, 0x7, 0x0, 0x1, 0xe0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x1, 0xc0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x3, 0x80, 0x0, 0xe0, 0x0, 0x30, 0x0, 0x0 },
{ 0x83, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x2, 0x10, 0x2, 0x10, 0x6, 0x18, 0x4, 0x8, 0x4, 0x7c, 0xf, 0xc4, 0x38, 0x6, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x81, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x6, 0x18, 0x3, 0xb0, 0x0, 0xe0, 0x0, 0x70, 0x0, 0xd8, 0x1, 0x8c, 0x3, 0x4, 0x6, 0x0, 0xc, 0x0, 0x38, 0x0, 0x0, 0x0 },
{ 0x83, 0x82, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3f, 0xfe, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x80, 0x0, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x3, 0x0, 0x1, 0x3c, 0x1, 0xe4, 0x7, 0x8c, 0x1c, 0x88, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x60, 0x0, 0x20, 0x0, 0x20 },
{ 0x83, 0x84, 0x0, 0x0, 0x4, 0x0, 0x6, 0x0, 0x2, 0x1e, 0x2, 0xf2, 0xf, 0x86, 0x79, 0xc, 0x1, 0x88, 0x0, 0x80, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x60, 0x0, 0x20, 0x0, 0x20, 0x0, 0x0 },
{ 0x83, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xfc, 0x0, 0x0 },
{ 0x83, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xe0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x7, 0xf0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x7, 0xf0, 0x0, 0x0 },
{ 0x83, 0x88, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x89, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x0, 0x0 },
{ 0x83, 0x8a, 0x0, 0x0, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x0, 0x0 },
{ 0x83, 0x8b, 0x0, 0x0, 0x0, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x42, 0x4, 0x46, 0xc, 0x4c, 0x8, 0x58, 0x18, 0x70, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x2, 0x4, 0x6, 0x4, 0xc, 0x4, 0x18, 0x4, 0x70, 0x5, 0xc0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x8e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0 },
{ 0x83, 0x8f, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x90, 0x0, 0x0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xfc, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x0 },
{ 0x83, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0xc, 0x0, 0x18, 0x0, 0xb0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x92, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x93, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0xe, 0x0, 0x3, 0x0, 0x0, 0x2, 0x0, 0x6, 0x0, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0x94, 0x0, 0x85, 0x0, 0x85, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x0, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x0, 0x0 },
{ 0x83, 0x95, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0xf, 0xf8, 0x1, 0x8, 0x1, 0x8, 0x1, 0x8, 0x3, 0x8, 0x2, 0x18, 0x6, 0x10, 0xc, 0x70 },
{ 0x83, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x7, 0xfc, 0x4, 0x20, 0xc, 0x20, 0x18, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0 },
{ 0x83, 0x9f, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa0, 0x0, 0x0, 0xf, 0xc0, 0x8, 0x20, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x20, 0xf, 0xc0, 0x8, 0x30, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0xf, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa1, 0x0, 0x0, 0x7, 0xf8, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa2, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa3, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa4, 0x0, 0x0, 0xf, 0xfc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x3, 0x0, 0x2, 0x0, 0x6, 0x0, 0xf, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa5, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa6, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x13, 0xe4, 0x10, 0x4, 0x18, 0xc, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa7, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa8, 0x0, 0x0, 0x8, 0x18, 0x8, 0x30, 0x8, 0x60, 0x8, 0xc0, 0x9, 0x80, 0xb, 0x0, 0xf, 0x80, 0x8, 0xc0, 0x8, 0x60, 0x8, 0x30, 0x8, 0x10, 0x8, 0x18, 0x8, 0xc, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xa9, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xaa, 0x0, 0x0, 0x30, 0x6, 0x30, 0x6, 0x38, 0xe, 0x28, 0xa, 0x2c, 0x1a, 0x24, 0x12, 0x26, 0x32, 0x22, 0x22, 0x23, 0x62, 0x21, 0x42, 0x21, 0xc2, 0x20, 0x82, 0x20, 0x82, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xab, 0x0, 0x0, 0x8, 0x8, 0xc, 0x8, 0xc, 0x8, 0xe, 0x8, 0xb, 0x8, 0x9, 0x8, 0x9, 0x88, 0x8, 0xc8, 0x8, 0x48, 0x8, 0x68, 0x8, 0x38, 0x8, 0x18, 0x8, 0x18, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xac, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xad, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x18, 0xc, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xae, 0x0, 0x0, 0x1f, 0xfc, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xaf, 0x0, 0x0, 0x7, 0xe0, 0x4, 0x10, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x10, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb0, 0x0, 0x0, 0xf, 0xf8, 0xc, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0xc, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb1, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb2, 0x0, 0x0, 0x10, 0x4, 0x18, 0xc, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb3, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x3, 0xe0, 0xc, 0x98, 0x18, 0x8c, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x3, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb4, 0x0, 0x0, 0x10, 0x4, 0x18, 0xc, 0xc, 0x18, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6, 0x20, 0x2, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb5, 0x0, 0x0, 0x10, 0x84, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x3, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xb6, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x8, 0xc, 0xc, 0x18, 0x6, 0x30, 0x1, 0x40, 0x1, 0x40, 0xf, 0x78, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x88, 0x2, 0x48, 0x4, 0x50, 0x4, 0x60, 0x8, 0x40, 0x8, 0xc0, 0x9, 0x48, 0x6, 0x30, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xc0, 0x0, 0x0, 0x0, 0x70, 0x0, 0xc8, 0x1, 0x88, 0x1, 0x8, 0x3, 0x8, 0x2, 0x10, 0x2, 0xe0, 0x6, 0x30, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0xd, 0x30, 0x8, 0xe0, 0x8, 0x0, 0x18, 0x0 },
{ 0x83, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xc, 0xc, 0x98, 0x18, 0xb0, 0x0, 0xe0, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x3, 0x0, 0x2, 0x0 },
{ 0x83, 0xc2, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x70, 0x2, 0x18, 0x1, 0x88, 0x0, 0x40, 0x1, 0xa0, 0x2, 0x10, 0x4, 0x10, 0x8, 0x10, 0x8, 0x30, 0x8, 0x20, 0x4, 0x40, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x2, 0x10, 0x2, 0x0, 0x1, 0xc0, 0x2, 0x0, 0x4, 0x10, 0x4, 0x20, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xc4, 0x2, 0x0, 0x4, 0x18, 0x4, 0x30, 0x3, 0xe0, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0xc, 0x0, 0x8, 0x0, 0xc, 0x0, 0x7, 0x0, 0x1, 0x80, 0x0, 0x40, 0x0, 0x40, 0x3, 0x80 },
{ 0x83, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x60, 0x9, 0x98, 0x1, 0x8, 0x3, 0x8, 0x2, 0x18, 0x2, 0x10, 0x6, 0x10, 0x4, 0x30, 0x0, 0x20, 0x0, 0x60 },
{ 0x83, 0xc6, 0x0, 0x0, 0x0, 0x60, 0x1, 0x90, 0x3, 0x8, 0x6, 0x8, 0x4, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x10, 0x8, 0x30, 0x8, 0x60, 0x4, 0xc0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xc7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x10, 0x4, 0xe0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x18, 0x2, 0x68, 0x2, 0xc0, 0x7, 0x0, 0x4, 0x80, 0xc, 0x88, 0x8, 0x90, 0x18, 0x60, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xc9, 0x0, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0xc0, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xca, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x20, 0x2, 0x20, 0x6, 0x60, 0x4, 0x40, 0x4, 0x40, 0x4, 0x40, 0xe, 0xc8, 0xb, 0xb0, 0x8, 0x0, 0x18, 0x0 },
{ 0x83, 0xcb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x8, 0x2, 0x8, 0x2, 0x10, 0x2, 0x10, 0x6, 0x20, 0x4, 0x60, 0x5, 0xc0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xcc, 0x0, 0x0, 0x0, 0x78, 0x0, 0x80, 0x0, 0x40, 0x1, 0xf8, 0x2, 0x0, 0x2, 0x0, 0x1, 0x0, 0x7, 0xf8, 0x8, 0x0, 0x8, 0x0, 0x7, 0x0, 0x0, 0xe0, 0x0, 0x10, 0x0, 0x10, 0x7, 0xe0 },
{ 0x83, 0xcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x3, 0x20, 0x6, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x30, 0x2, 0x60, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x7, 0xf8, 0x9, 0x20, 0x1, 0x20, 0x1, 0x20, 0x2, 0x40, 0x2, 0x40, 0x6, 0x48, 0xc, 0x30, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xcf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x1, 0x10, 0x2, 0x8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x8, 0x5, 0x10, 0xc, 0xe0, 0x8, 0x0, 0x8, 0x0 },
{ 0x83, 0xd0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x1, 0xf8, 0x2, 0x20, 0x6, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x30, 0x2, 0x60, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xd1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x7, 0xf0, 0x8, 0x80, 0x1, 0x80, 0x1, 0x0, 0x3, 0x0, 0x2, 0x20, 0x2, 0x40, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xd2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x10, 0x12, 0x10, 0x2, 0x10, 0x6, 0x30, 0x4, 0x20, 0x4, 0x60, 0x4, 0xc0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x83, 0xd3, 0x0, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0x40, 0x1, 0xe0, 0x6, 0x90, 0x8, 0x88, 0x9, 0x88, 0x9, 0x8, 0x5, 0x30, 0x3, 0xc0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0 },
{ 0x83, 0xd4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc, 0x4, 0x98, 0x0, 0xb0, 0x0, 0xe0, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x80, 0x6, 0x80, 0xc, 0x48, 0x18, 0x30 },
{ 0x83, 0xd5, 0x0, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0x40, 0xc, 0xc8, 0x14, 0x88, 0x4, 0x88, 0xd, 0x98, 0x9, 0x10, 0x9, 0x20, 0x7, 0xc0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0 },
{ 0x83, 0xd6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x8, 0x4, 0x44, 0x8, 0x44, 0x8, 0xc4, 0x10, 0x84, 0x10, 0x84, 0x11, 0xc8, 0xe, 0x70, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x40, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x41, 0x0, 0x0, 0xf, 0xf0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xf, 0xe0, 0x8, 0x10, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0xf, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x42, 0x0, 0x0, 0xf, 0xc0, 0x8, 0x20, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x20, 0xf, 0xc0, 0x8, 0x30, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0xf, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x43, 0x0, 0x0, 0x7, 0xf8, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x44, 0x0, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x4, 0x8, 0x4, 0x8, 0x8, 0x8, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4 },
{ 0x84, 0x45, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x46, 0x6, 0x30, 0x6, 0x30, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x47, 0x0, 0x0, 0x40, 0x81, 0x20, 0x82, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x8, 0x88, 0x7, 0xf0, 0xc, 0x98, 0x18, 0x8c, 0x10, 0x84, 0x30, 0x86, 0x60, 0x83, 0x40, 0x81, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x48, 0x0, 0x0, 0x3, 0xc0, 0xe, 0x30, 0x8, 0x18, 0x0, 0x8, 0x0, 0x8, 0x0, 0x10, 0x1, 0xe0, 0x0, 0x10, 0x0, 0x8, 0x0, 0x8, 0x8, 0x18, 0xe, 0x30, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x49, 0x0, 0x0, 0x8, 0x8, 0x8, 0x18, 0x8, 0x18, 0x8, 0x38, 0x8, 0x68, 0x8, 0x48, 0x8, 0xc8, 0x9, 0x88, 0x9, 0x8, 0xb, 0x8, 0xe, 0x8, 0xc, 0x8, 0xc, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x4a, 0x2, 0x20, 0x2, 0x20, 0x1, 0xc0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x38, 0x8, 0x68, 0x8, 0xc8, 0x9, 0x88, 0xb, 0x8, 0xe, 0x8, 0xc, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x4b, 0x0, 0x0, 0x8, 0x38, 0x8, 0x60, 0x8, 0x40, 0x8, 0x40, 0x8, 0xc0, 0x9, 0x80, 0xf, 0x0, 0x9, 0x80, 0x8, 0xc0, 0x8, 0x60, 0x8, 0x30, 0x8, 0x18, 0x8, 0xc, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x4c, 0x0, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x8, 0xc, 0x8, 0x38, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x4d, 0x0, 0x0, 0x30, 0x6, 0x30, 0x6, 0x38, 0xe, 0x28, 0xa, 0x2c, 0x1a, 0x24, 0x12, 0x26, 0x32, 0x22, 0x22, 0x23, 0x62, 0x21, 0x42, 0x21, 0xc2, 0x20, 0x82, 0x20, 0x82, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x4e, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x4f, 0x0, 0x0, 0x1, 0xc0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x18, 0xc, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x50, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x51, 0x0, 0x0, 0x7, 0xe0, 0x4, 0x10, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x10, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x52, 0x0, 0x0, 0x1, 0xe0, 0x6, 0x30, 0xc, 0x18, 0x8, 0x8, 0x18, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x18, 0x0, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x53, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x54, 0x0, 0x0, 0x4, 0x4, 0x4, 0x4, 0x6, 0xc, 0x2, 0x8, 0x3, 0x18, 0x1, 0x10, 0x1, 0xb0, 0x0, 0xa0, 0x0, 0xe0, 0x0, 0x40, 0x0, 0xc0, 0x1, 0x80, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x55, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x3, 0xe0, 0xc, 0x98, 0x18, 0x8c, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x3, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x56, 0x0, 0x0, 0x10, 0x4, 0x18, 0xc, 0xc, 0x18, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6, 0x20, 0x2, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x57, 0x0, 0x0, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0xf, 0xfc, 0x0, 0x4, 0x0, 0x4 },
{ 0x84, 0x58, 0x0, 0x0, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0xc, 0x30, 0x7, 0xd0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x59, 0x0, 0x0, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x5a, 0x0, 0x0, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xff, 0x0, 0x1, 0x0, 0x1 },
{ 0x84, 0x5b, 0x0, 0x0, 0x3e, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xf0, 0x2, 0x8, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x8, 0x3, 0xf0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x5c, 0x0, 0x0, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x1f, 0x8, 0x10, 0x88, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48, 0x10, 0x88, 0x1f, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x5d, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xe0, 0x4, 0x10, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x10, 0x7, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x5e, 0x0, 0x0, 0x3, 0xc0, 0x6, 0x30, 0x8, 0x18, 0x8, 0x8, 0x0, 0xc, 0x0, 0x4, 0x1, 0xfc, 0x0, 0x4, 0x0, 0xc, 0x8, 0x8, 0x8, 0x18, 0x6, 0x30, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x5f, 0x0, 0x0, 0x20, 0x70, 0x21, 0x8c, 0x21, 0x4, 0x23, 0x6, 0x22, 0x2, 0x22, 0x2, 0x3e, 0x2, 0x22, 0x2, 0x22, 0x2, 0x23, 0x6, 0x21, 0x4, 0x21, 0x8c, 0x20, 0x70, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x60, 0x0, 0x0, 0x3, 0xf8, 0x4, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x4, 0x8, 0x3, 0xf8, 0x0, 0x88, 0x1, 0x88, 0x3, 0x8, 0x2, 0x8, 0x6, 0x8, 0xc, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x10, 0x0, 0x10, 0x3, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x30, 0x3, 0xd8, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x71, 0x0, 0x0, 0x0, 0x10, 0x1, 0xe0, 0x3, 0x0, 0x6, 0x0, 0x4, 0x0, 0x5, 0xc0, 0x6, 0x20, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x2, 0x10, 0x2, 0x10, 0x3, 0xe0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8 },
{ 0x84, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x2, 0x10, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x60, 0x3, 0x60, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x2, 0x10, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x8c, 0x8, 0x88, 0x4, 0x90, 0x3, 0xe0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x4, 0x20, 0x0, 0x20, 0x1, 0xc0, 0x0, 0x20, 0x0, 0x20, 0x4, 0x20, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x10, 0x8, 0x30, 0x8, 0x50, 0x8, 0x90, 0x9, 0x10, 0xa, 0x10, 0xc, 0x10, 0x8, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x4, 0x20, 0x4, 0x20, 0x3, 0xc0, 0x0, 0x0, 0x8, 0x10, 0x8, 0x30, 0x8, 0x50, 0x8, 0x90, 0x9, 0x10, 0xa, 0x10, 0xc, 0x10, 0x8, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x30, 0x4, 0x40, 0x4, 0x40, 0x7, 0x80, 0x4, 0x80, 0x4, 0x40, 0x4, 0x20, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x6, 0x10, 0xc, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x18, 0xc, 0x18, 0xa, 0x28, 0xa, 0x28, 0x9, 0x48, 0x9, 0x48, 0x8, 0x88, 0x8, 0x88, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x82, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0xc0, 0x6, 0x20, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x6, 0x20, 0x5, 0xc0, 0x4, 0x0, 0x4, 0x0 },
{ 0x84, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe0, 0x2, 0x10, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x2, 0x10, 0x1, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x8, 0x6, 0x8, 0x2, 0x18, 0x3, 0x10, 0x1, 0x30, 0x1, 0xa0, 0x0, 0xe0, 0x0, 0xc0, 0x1, 0x80, 0x7, 0x0 },
{ 0x84, 0x86, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x6, 0xb0, 0x9, 0xc8, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x9, 0xc8, 0x6, 0xb0, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x7, 0xf8, 0x0, 0x8, 0x0, 0x8 },
{ 0x84, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x30, 0x3, 0xd0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xff, 0x0, 0x1, 0x0, 0x1 },
{ 0x84, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xe0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0x88, 0x8, 0x48, 0x8, 0x48, 0x8, 0x48, 0xf, 0x88, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x8e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xe0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x8f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc0, 0x4, 0x20, 0x0, 0x10, 0x1, 0xf0, 0x0, 0x10, 0x0, 0x10, 0x4, 0x20, 0x3, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x60, 0x8, 0x90, 0x9, 0x8, 0xf, 0x8, 0x9, 0x8, 0x9, 0x8, 0x8, 0x90, 0x8, 0x60, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x3, 0xf0, 0x1, 0x10, 0x2, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xa0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xa2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xa3, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xa4, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xa5, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xa6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xa7, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xa8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xa9, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xaa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xab, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xac, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0x1, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xad, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x80, 0xff, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xae, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0x80, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xaf, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0xff, 0x1, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xb0, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0xff, 0x1, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xb1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xb2, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0x80, 0xff, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xb3, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xb4, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0xff, 0xff, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xb5, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xb6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xb7, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xb8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xb9, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0xff, 0xff, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xba, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xff, 0x0, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xbb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x84, 0xbc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xff, 0x80, 0xff, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x84, 0xbd, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x84, 0xbe, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0xff, 0xff, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80, 0x1, 0x80 },
{ 0x87, 0x40, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x84, 0x21, 0x82, 0x23, 0x82, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x20, 0x82, 0x20, 0x82, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x41, 0x3, 0xe0, 0xc, 0x18, 0x13, 0xe4, 0x26, 0x32, 0x24, 0x12, 0x44, 0x11, 0x40, 0x31, 0x40, 0x61, 0x40, 0xc1, 0x41, 0x81, 0x43, 0x1, 0x26, 0x2, 0x27, 0xf2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x42, 0x3, 0xe0, 0xc, 0x18, 0x11, 0xe4, 0x23, 0x32, 0x26, 0x12, 0x40, 0x11, 0x40, 0x31, 0x41, 0xe1, 0x40, 0x31, 0x40, 0x11, 0x44, 0x11, 0x26, 0x32, 0x23, 0xe2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x43, 0x3, 0xe0, 0xc, 0x18, 0x10, 0xe4, 0x20, 0xa2, 0x21, 0xa2, 0x41, 0x21, 0x43, 0x21, 0x42, 0x21, 0x46, 0x21, 0x44, 0x21, 0x47, 0xf9, 0x20, 0x22, 0x20, 0x22, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x44, 0x3, 0xe0, 0xc, 0x18, 0x13, 0xe4, 0x22, 0x2, 0x22, 0x2, 0x42, 0x1, 0x42, 0xe1, 0x43, 0x31, 0x40, 0x11, 0x40, 0x11, 0x46, 0x11, 0x23, 0x32, 0x21, 0xe2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x45, 0x3, 0xe0, 0xc, 0x18, 0x11, 0xe4, 0x23, 0x32, 0x22, 0x12, 0x46, 0x1, 0x44, 0xe1, 0x45, 0x31, 0x46, 0x11, 0x46, 0x11, 0x42, 0x11, 0x23, 0x32, 0x21, 0xe2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x46, 0x3, 0xf0, 0xc, 0x8, 0x10, 0x4, 0x23, 0xf2, 0x20, 0x12, 0x40, 0x31, 0x40, 0x21, 0x40, 0x61, 0x40, 0x41, 0x40, 0xc1, 0x40, 0x81, 0x21, 0x82, 0x21, 0x2, 0x11, 0x4, 0xc, 0x8, 0x3, 0xf0 },
{ 0x87, 0x47, 0x3, 0xe0, 0xc, 0x18, 0x11, 0xe4, 0x23, 0x32, 0x22, 0x12, 0x42, 0x11, 0x41, 0x21, 0x40, 0xc1, 0x41, 0x21, 0x42, 0x11, 0x42, 0x11, 0x23, 0x32, 0x21, 0xe2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x48, 0x3, 0xe0, 0xc, 0x18, 0x11, 0xe4, 0x23, 0x32, 0x22, 0x12, 0x42, 0x19, 0x42, 0x19, 0x43, 0x29, 0x41, 0xc9, 0x40, 0x19, 0x42, 0x11, 0x23, 0x32, 0x21, 0xe2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x49, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x74, 0x2c, 0xda, 0x24, 0x8a, 0x44, 0x89, 0x44, 0x89, 0x44, 0x89, 0x44, 0x89, 0x44, 0x89, 0x44, 0x89, 0x24, 0xda, 0x24, 0x72, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x4a, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x4, 0x2c, 0x32, 0x24, 0x12, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x24, 0x12, 0x24, 0x12, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x4b, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x74, 0x2c, 0xda, 0x24, 0x8a, 0x44, 0x89, 0x44, 0x19, 0x44, 0x11, 0x44, 0x31, 0x44, 0x61, 0x44, 0xc1, 0x24, 0x82, 0x24, 0xfa, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x4c, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x74, 0x2c, 0xda, 0x24, 0x8a, 0x44, 0x9, 0x44, 0x19, 0x44, 0x71, 0x44, 0x19, 0x44, 0x9, 0x44, 0x89, 0x24, 0xda, 0x24, 0x72, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x4d, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x34, 0x2c, 0x32, 0x24, 0x52, 0x44, 0x51, 0x44, 0xd1, 0x44, 0x91, 0x45, 0x91, 0x45, 0x11, 0x45, 0xf9, 0x24, 0x12, 0x24, 0x12, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x4e, 0x3, 0xe0, 0xc, 0x18, 0x10, 0xf4, 0x2c, 0x82, 0x24, 0x82, 0x44, 0x81, 0x44, 0xb1, 0x44, 0xd9, 0x44, 0x89, 0x44, 0x9, 0x44, 0x9, 0x24, 0xda, 0x24, 0x72, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x4f, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x74, 0x2c, 0xda, 0x24, 0x8a, 0x44, 0x81, 0x44, 0xb1, 0x44, 0xd9, 0x44, 0x89, 0x44, 0x89, 0x44, 0x89, 0x24, 0xda, 0x24, 0x72, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x50, 0x3, 0xe0, 0xc, 0x18, 0x11, 0xf4, 0x2c, 0x12, 0x24, 0x12, 0x44, 0x31, 0x44, 0x21, 0x44, 0x21, 0x44, 0x21, 0x44, 0x61, 0x44, 0x41, 0x24, 0x42, 0x24, 0x42, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x51, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x74, 0x2c, 0xda, 0x24, 0x8a, 0x44, 0x89, 0x44, 0x89, 0x44, 0x71, 0x44, 0x89, 0x44, 0x89, 0x44, 0x89, 0x24, 0xda, 0x24, 0x72, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x52, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x74, 0x2c, 0xda, 0x24, 0x8a, 0x44, 0x89, 0x44, 0x89, 0x44, 0xd9, 0x44, 0x69, 0x44, 0x9, 0x44, 0x89, 0x24, 0xda, 0x24, 0x72, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x53, 0x3, 0xe0, 0xc, 0x18, 0x17, 0x4, 0x2d, 0x9a, 0x28, 0xa6, 0x48, 0xa5, 0x41, 0xa5, 0x41, 0x25, 0x43, 0x25, 0x46, 0x25, 0x4c, 0x25, 0x28, 0x26, 0x2f, 0x9a, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x54, 0x0, 0x0, 0x3, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0xe0, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x55, 0x0, 0x0, 0xf, 0xf8, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x56, 0x0, 0x0, 0x1f, 0xfc, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x4, 0x90, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x57, 0x0, 0x0, 0x7f, 0x1f, 0x14, 0x4, 0x16, 0xc, 0x12, 0x8, 0x12, 0x8, 0x13, 0x18, 0x11, 0x10, 0x11, 0x10, 0x11, 0xb0, 0x10, 0xa0, 0x10, 0xa0, 0x10, 0xe0, 0x7c, 0x40, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x58, 0x0, 0x0, 0x3e, 0x3e, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x2, 0x20, 0x3, 0x60, 0x1, 0x40, 0x1, 0x40, 0x1, 0xc0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x59, 0x0, 0x0, 0x7c, 0x7f, 0x10, 0x14, 0x18, 0x34, 0x8, 0x24, 0x8, 0x24, 0xc, 0x64, 0x4, 0x44, 0x4, 0x44, 0x6, 0xc4, 0x2, 0x84, 0x2, 0x84, 0x3, 0x84, 0x1, 0x1f, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x5a, 0x0, 0x0, 0x71, 0xff, 0x20, 0x92, 0x20, 0x92, 0x20, 0x92, 0x31, 0x92, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x1b, 0x12, 0xa, 0x12, 0xa, 0x12, 0xe, 0x12, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x5b, 0x0, 0x0, 0x71, 0xff, 0x20, 0xaa, 0x20, 0xaa, 0x20, 0xaa, 0x31, 0xaa, 0x11, 0x2a, 0x11, 0x2a, 0x11, 0x2a, 0x1b, 0x2a, 0xa, 0x2a, 0xa, 0x2a, 0xe, 0x2a, 0x4, 0xff, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x5c, 0x0, 0x0, 0x3f, 0xdf, 0x9, 0x4, 0x9, 0x8c, 0x8, 0x88, 0x8, 0xd8, 0x8, 0x50, 0x8, 0x70, 0x8, 0x50, 0x8, 0xd8, 0x8, 0x88, 0x9, 0x8c, 0x9, 0x4, 0x3f, 0xdf, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x5d, 0x0, 0x0, 0x1f, 0x3e, 0x6, 0x18, 0x2, 0x10, 0x3, 0x30, 0x1, 0x20, 0x1, 0xe0, 0x0, 0xc0, 0x1, 0xe0, 0x1, 0x20, 0x3, 0x30, 0x2, 0x10, 0x6, 0x18, 0x1f, 0x3e, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x5e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x5f, 0x1c, 0x0, 0x7, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x7, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x7, 0x0, 0x0, 0x42, 0x0, 0x42, 0x0, 0x42, 0x0, 0x42, 0x0, 0x42, 0x0, 0x6, 0x0, 0xc, 0x0, 0x38 },
{ 0x87, 0x60, 0x8, 0x0, 0xf, 0x0, 0x3c, 0x0, 0x4, 0x0, 0x7, 0xc0, 0x3e, 0x0, 0x2, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x42, 0x0, 0x42, 0x0, 0x42, 0x0, 0x42, 0x0, 0x7e, 0x0, 0x0 },
{ 0x87, 0x61, 0x10, 0x0, 0x10, 0x60, 0x1f, 0x31, 0x71, 0x1, 0x12, 0x3, 0x10, 0x6, 0x18, 0x1c, 0xf, 0x70, 0x0, 0x0, 0x7, 0x0, 0x3c, 0x0, 0x4, 0x0, 0x7f, 0x80, 0x4, 0x0, 0xc, 0x0, 0x38, 0x0 },
{ 0x87, 0x62, 0x1, 0x0, 0x1, 0x0, 0x33, 0x0, 0x1a, 0x7e, 0xe, 0x0, 0x1b, 0x0, 0x31, 0x0, 0x60, 0x0, 0x0, 0x0, 0x20, 0x8, 0x20, 0x28, 0x3c, 0x29, 0x27, 0x29, 0x21, 0x2b, 0x20, 0x6e, 0x20, 0xcc },
{ 0x87, 0x63, 0x1, 0x40, 0x11, 0x5e, 0x3e, 0x0, 0x62, 0x3f, 0x42, 0x1, 0x6, 0x3, 0xc, 0x6, 0x38, 0x1c, 0x0, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x32, 0x0, 0x22, 0x0, 0x7f, 0x0, 0x41, 0x0 },
{ 0x87, 0x64, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x3c, 0x0, 0x27, 0x0, 0x21, 0x0, 0x20, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x61, 0x0, 0x1, 0x0, 0x3, 0x0, 0x6, 0x0, 0x1c, 0x0, 0x70 },
{ 0x87, 0x65, 0x0, 0x0, 0x7f, 0x0, 0x1, 0x0, 0xb, 0x7e, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x0, 0x0, 0x4, 0x0, 0x14, 0x0, 0x14, 0x80, 0x14, 0x80, 0x15, 0x80, 0x37, 0x0, 0x66, 0x0 },
{ 0x87, 0x66, 0x0, 0x10, 0x10, 0x1e, 0x38, 0x32, 0x6c, 0x62, 0x46, 0x2, 0x3, 0x6, 0x1, 0x8c, 0x0, 0x38, 0x10, 0x0, 0x1e, 0x14, 0x32, 0x14, 0x6a, 0x15, 0xa, 0xd5, 0x6, 0x15, 0xc, 0x37, 0x38, 0x66 },
{ 0x87, 0x67, 0x0, 0x0, 0x21, 0x0, 0x21, 0x10, 0x21, 0x49, 0x21, 0x21, 0x3, 0x3, 0x6, 0x6, 0x1c, 0x1c, 0x0, 0x0, 0x20, 0x8, 0x20, 0x28, 0x3c, 0x29, 0x27, 0x29, 0x21, 0x2b, 0x20, 0x6e, 0x20, 0xcc },
{ 0x87, 0x68, 0x0, 0x0, 0x7e, 0x0, 0x42, 0x20, 0x42, 0x92, 0x2, 0x42, 0x6, 0x6, 0xc, 0xc, 0x18, 0x38, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x38, 0x0, 0x2e, 0x0, 0x22, 0x0, 0x20, 0x0, 0x20, 0x0 },
{ 0x87, 0x69, 0x8, 0x0, 0x8, 0x0, 0x3f, 0x3e, 0x9, 0x22, 0x9, 0x22, 0x19, 0x22, 0x31, 0x22, 0x63, 0x3e, 0x0, 0x0, 0x21, 0x0, 0x21, 0x0, 0x21, 0x3e, 0x21, 0x0, 0x3, 0x0, 0x6, 0x0, 0x1c, 0x0 },
{ 0x87, 0x6a, 0x25, 0x0, 0x25, 0x0, 0x20, 0x0, 0x3c, 0x0, 0x27, 0x0, 0x21, 0x0, 0x20, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x28, 0x0, 0x29, 0x0, 0x29, 0x0, 0x2b, 0x0, 0x6e, 0x0, 0xcc },
{ 0x87, 0x6b, 0x10, 0x0, 0x10, 0x60, 0x1f, 0x31, 0x71, 0x1, 0x12, 0x3, 0x10, 0x6, 0x18, 0x1c, 0xf, 0x70, 0x0, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1c, 0x0, 0x17, 0x0, 0x11, 0x0, 0x10, 0x0, 0x10, 0x0 },
{ 0x87, 0x6c, 0x1, 0x80, 0x11, 0x40, 0x12, 0xc0, 0x12, 0x3e, 0x33, 0x0, 0x21, 0x0, 0x61, 0x0, 0x0, 0x0, 0x20, 0x8, 0x21, 0x8, 0x7d, 0xa8, 0x24, 0x2e, 0x28, 0x6b, 0x20, 0x48, 0x30, 0xc8, 0x1d, 0x88 },
{ 0x87, 0x6d, 0x38, 0x42, 0xe, 0x42, 0x0, 0x42, 0x38, 0x42, 0xe, 0x42, 0x0, 0x6, 0x78, 0xc, 0xe, 0x38, 0x0, 0x0, 0x2a, 0x94, 0x2a, 0x94, 0x2c, 0x14, 0x25, 0xd5, 0x24, 0x15, 0x66, 0x37, 0x42, 0x66 },
{ 0x87, 0x6e, 0x1, 0x80, 0x2, 0x80, 0x3b, 0x0, 0x6c, 0x0, 0x46, 0x3f, 0x3, 0x0, 0x1, 0x80, 0x0, 0x0, 0x0, 0xa0, 0x30, 0xa0, 0x8, 0x0, 0x60, 0x80, 0x11, 0x80, 0x3, 0x0, 0xe, 0x0, 0x38, 0x0 },
{ 0x87, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5b, 0x5b, 0x6d, 0x6d, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x5b, 0x21, 0x6d, 0x40, 0x49, 0x40, 0x49, 0x40, 0x49, 0x40, 0x49, 0x21, 0x49, 0x1e, 0x49, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x71, 0x0, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x46, 0xb6, 0x4c, 0xda, 0x58, 0x92, 0x70, 0x92, 0x58, 0x92, 0x4c, 0x92, 0x46, 0x92, 0x42, 0x92, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x5b, 0x3a, 0x6d, 0x44, 0x49, 0x42, 0x49, 0x42, 0x49, 0x3c, 0x49, 0x40, 0x49, 0x3e, 0x49, 0x41, 0x0, 0x41, 0x0, 0x3e },
{ 0x87, 0x73, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x1, 0x23, 0x3d, 0x26, 0x46, 0x2c, 0x42, 0x38, 0x42, 0x2c, 0x3c, 0x26, 0x40, 0x23, 0x3e, 0x21, 0x41, 0x0, 0x41, 0x0, 0x3e },
{ 0x87, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x1e, 0x21, 0x21, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x21, 0x21, 0x1e, 0x1e, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x75, 0x0, 0x6, 0x0, 0x9, 0x0, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x8, 0x2c, 0xcf, 0x33, 0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x7e, 0x0, 0x5, 0x7f, 0x5, 0x8, 0x7e, 0x2a, 0x44, 0x2a, 0x44, 0x2a, 0x45, 0x2a, 0x75, 0x8, 0x55, 0x7f, 0x56, 0x8, 0xd6, 0x8, 0x94, 0x8, 0xb6, 0x8, 0xaa, 0x9, 0x8b, 0x9, 0x11, 0x0, 0x0 },
{ 0x87, 0x80, 0x0, 0x0, 0x0, 0x36, 0x0, 0x36, 0x0, 0x12, 0x0, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x36, 0x0, 0x36, 0x0, 0x12, 0x0, 0x24, 0x0, 0x0, 0x0 },
{ 0x87, 0x82, 0x0, 0x0, 0x42, 0x0, 0x42, 0x0, 0x62, 0x0, 0x62, 0x0, 0x72, 0x70, 0x52, 0xd8, 0x5a, 0x88, 0x4a, 0x88, 0x4e, 0x88, 0x46, 0x88, 0x46, 0x88, 0x42, 0xdb, 0x42, 0x73, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x83, 0x0, 0x0, 0x44, 0x44, 0x44, 0x44, 0x4c, 0x4c, 0x48, 0x48, 0x58, 0x58, 0x50, 0x50, 0x70, 0x70, 0x58, 0x58, 0x48, 0x48, 0x48, 0x48, 0x4c, 0x4c, 0x45, 0x45, 0x45, 0x45, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x84, 0x0, 0x0, 0x7f, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x9, 0xe8, 0x9, 0x8, 0x9, 0x8, 0x9, 0xe8, 0x9, 0x8, 0x9, 0x8, 0x9, 0x8, 0x9, 0xef, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x85, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x4, 0x20, 0x82, 0x20, 0x82, 0x40, 0x81, 0x40, 0xf1, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x2f, 0xfa, 0x20, 0x2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x86, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x4, 0x20, 0x82, 0x20, 0x82, 0x4f, 0xf9, 0x48, 0x89, 0x48, 0x89, 0x48, 0x89, 0x4f, 0xf9, 0x40, 0x81, 0x20, 0x82, 0x20, 0x82, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x87, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x4, 0x20, 0x2, 0x2f, 0xfa, 0x40, 0x81, 0x40, 0x81, 0x40, 0xe1, 0x40, 0xb1, 0x40, 0x81, 0x40, 0x81, 0x20, 0x82, 0x20, 0x82, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x88, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x84, 0x20, 0x82, 0x2f, 0xfa, 0x41, 0x1, 0x41, 0x1, 0x43, 0xf1, 0x42, 0x41, 0x46, 0x41, 0x4c, 0x41, 0x20, 0x42, 0x23, 0xfa, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x89, 0x3, 0xe0, 0xc, 0x18, 0x10, 0x84, 0x20, 0x82, 0x2f, 0xfa, 0x41, 0x1, 0x41, 0x1, 0x43, 0xf1, 0x43, 0x11, 0x47, 0x11, 0x4d, 0x11, 0x21, 0x12, 0x21, 0xf2, 0x10, 0x4, 0xc, 0x18, 0x3, 0xe0 },
{ 0x87, 0x8a, 0x10, 0x4, 0x24, 0xa2, 0x24, 0xa2, 0x5e, 0xf9, 0x44, 0xa1, 0x4c, 0x21, 0x4e, 0xfd, 0x5f, 0x21, 0x55, 0x71, 0x54, 0x79, 0x44, 0xed, 0x45, 0xa5, 0x45, 0x21, 0x24, 0x22, 0x24, 0x22, 0x10, 0x4 },
{ 0x87, 0x8b, 0x10, 0x4, 0x21, 0x2, 0x21, 0x2, 0x4f, 0xf9, 0x42, 0x1, 0x42, 0x1, 0x47, 0xf1, 0x4e, 0x11, 0x5a, 0x11, 0x53, 0xf1, 0x42, 0x11, 0x42, 0x11, 0x43, 0xf1, 0x22, 0x12, 0x22, 0x32, 0x10, 0x4 },
{ 0x87, 0x8c, 0x10, 0x4, 0x22, 0x42, 0x22, 0x5a, 0x46, 0x49, 0x44, 0x41, 0x4c, 0x79, 0x49, 0xc1, 0x5c, 0x41, 0x54, 0x41, 0x44, 0x41, 0x44, 0x41, 0x44, 0x61, 0x44, 0x29, 0x24, 0x3a, 0x24, 0x12, 0x10, 0x4 },
{ 0x87, 0x8d, 0x0, 0x4, 0x7, 0x44, 0x75, 0x64, 0x55, 0x28, 0x55, 0x9, 0x57, 0x5f, 0x75, 0x61, 0x55, 0x20, 0x55, 0xf, 0x57, 0x29, 0x55, 0x29, 0x75, 0x29, 0x5, 0x29, 0xd, 0x69, 0x9, 0x4f, 0x0, 0x0 },
{ 0x87, 0x8e, 0x8, 0x0, 0x8, 0x7f, 0x8, 0x4, 0x8, 0x4, 0x7f, 0x4, 0x8, 0x4, 0x1c, 0x24, 0x14, 0x27, 0x14, 0x24, 0x36, 0x24, 0x22, 0x24, 0x22, 0x24, 0x63, 0x24, 0x41, 0x24, 0x41, 0x7f, 0x0, 0x0 },
{ 0x87, 0x8f, 0x0, 0xc, 0xf, 0x18, 0x75, 0x70, 0x55, 0x17, 0x55, 0x15, 0x55, 0x7d, 0x5d, 0x15, 0x7b, 0x35, 0x50, 0x3d, 0x57, 0x55, 0x55, 0x55, 0x55, 0x95, 0x75, 0x15, 0x5, 0x15, 0x7, 0x17, 0x0, 0x10 },
{ 0x87, 0x90, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0xc, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x18, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x92, 0x1, 0xc0, 0x2, 0x40, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x3, 0x0, 0x1, 0x0, 0x1, 0x80, 0x1, 0x80, 0x0, 0x80, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x2, 0x40, 0x3, 0x80 },
{ 0x87, 0x93, 0x1, 0xc0, 0x2, 0x40, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x3, 0xe0, 0x5, 0x10, 0x9, 0x88, 0x9, 0x88, 0x4, 0x90, 0x3, 0xe0, 0x0, 0xc0, 0x0, 0x40, 0x0, 0x40, 0x2, 0x40, 0x3, 0x80 },
{ 0x87, 0x94, 0x0, 0x0, 0xf, 0xfc, 0xc, 0x0, 0x6, 0x0, 0x3, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0xc, 0x0, 0xf, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x95, 0x0, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x2, 0x0, 0x2, 0x0, 0x42, 0x0, 0x66, 0x0, 0x34, 0x0, 0x1c, 0x0, 0xc, 0x0, 0x4, 0x0 },
{ 0x87, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x97, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x40, 0x0, 0x80, 0x1, 0x0, 0x2, 0x0, 0x4, 0x0, 0x8, 0x0, 0x10, 0x0, 0x3f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x98, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x99, 0x0, 0x0, 0x0, 0x2, 0x0, 0x6, 0x0, 0xa, 0x0, 0x12, 0x0, 0x22, 0x0, 0x42, 0x0, 0x82, 0x1, 0x2, 0x2, 0x2, 0x4, 0x2, 0x8, 0x2, 0x10, 0x2, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x6, 0x30, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x9b, 0x0, 0x0, 0x1, 0xc0, 0x2, 0x20, 0x4, 0x10, 0x4, 0x10, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0 },
{ 0x87, 0x9c, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x4, 0x10, 0x4, 0x10, 0x2, 0x20, 0x1, 0xc0, 0x0, 0x0, 0x0, 0x0 },
{ 0x88, 0x9f, 0x0, 0x0, 0x3f, 0xfe, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x12, 0x24, 0x12, 0x24, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x88, 0xa0, 0x0, 0x0, 0xf, 0xff, 0x70, 0x90, 0x50, 0x90, 0x50, 0x90, 0x57, 0xfe, 0x54, 0x92, 0x54, 0x92, 0x54, 0x92, 0x57, 0xfe, 0x50, 0x90, 0x70, 0x90, 0x0, 0x90, 0x0, 0x90, 0xf, 0xff, 0x0, 0x0 },
{ 0x88, 0xa1, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x7e, 0x10, 0x12, 0x10, 0x13, 0xff, 0x32, 0x0, 0x22, 0x10, 0x26, 0x10, 0x74, 0xfe, 0xc, 0x10, 0xa, 0x10, 0x1a, 0x10, 0x30, 0x10, 0x61, 0xff },
{ 0x88, 0xa2, 0x0, 0x0, 0x3e, 0xff, 0x22, 0x2, 0x26, 0x2, 0x2c, 0xf2, 0x28, 0x92, 0x24, 0x92, 0x22, 0x92, 0x22, 0x92, 0x22, 0x92, 0x22, 0xf2, 0x22, 0x2, 0x2e, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x88, 0xa3, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x3, 0x42, 0x6, 0x66, 0x1c, 0x2c, 0x74, 0x30, 0x4, 0x18, 0x7, 0xcc, 0x3c, 0x7 },
{ 0x88, 0xa4, 0x0, 0x1c, 0x3f, 0xf0, 0x11, 0x4, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x81, 0x4a, 0x4c, 0x1a, 0x16, 0x33, 0xf2, 0x4, 0x0, 0x7, 0xfc, 0x1e, 0x18, 0x73, 0x30, 0x1, 0xe0, 0xf, 0x38, 0x78, 0xf },
{ 0x88, 0xa5, 0x10, 0x40, 0x10, 0x44, 0x10, 0xc4, 0x7c, 0x9e, 0x13, 0xf2, 0x10, 0x80, 0x10, 0x80, 0x11, 0xfe, 0x1b, 0x20, 0x70, 0x20, 0x13, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x13, 0x6, 0x36, 0x3 },
{ 0x88, 0xa6, 0x10, 0x10, 0x10, 0x38, 0x10, 0x28, 0x10, 0x6c, 0x7e, 0xc6, 0x13, 0x83, 0x12, 0x0, 0x32, 0x7c, 0x26, 0x0, 0x24, 0x0, 0x74, 0xfe, 0xc, 0x82, 0xa, 0x82, 0x1a, 0x82, 0x30, 0x82, 0x60, 0xfe },
{ 0x88, 0xa7, 0x0, 0x40, 0x30, 0x7c, 0x18, 0x84, 0xb, 0x48, 0x0, 0x30, 0x0, 0xcc, 0x3, 0x87, 0x78, 0x20, 0x9, 0xfc, 0x8, 0x20, 0x9, 0xfc, 0x8, 0x20, 0xb, 0xfe, 0x18, 0x20, 0x34, 0x0, 0x63, 0xff },
{ 0x88, 0xa8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3f, 0x44, 0x2, 0x29, 0x24, 0x12, 0x1f, 0xfc, 0x70, 0x87, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x38, 0xe },
{ 0x88, 0xa9, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0x3c, 0x3e, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x88, 0xaa, 0x4, 0x40, 0x1c, 0xf8, 0x71, 0x10, 0x13, 0xfc, 0x11, 0x24, 0x7d, 0xfc, 0x11, 0x24, 0x19, 0xfc, 0x34, 0x20, 0x33, 0xfe, 0x32, 0x22, 0x53, 0xfe, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x21, 0x10, 0x1f },
{ 0x88, 0xab, 0x0, 0x0, 0x3f, 0xfe, 0x2, 0x20, 0x2, 0x20, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x80, 0x12, 0xc6, 0x12, 0x4b, 0x33, 0x19, 0x61, 0xf0 },
{ 0x88, 0xac, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x7b, 0xfe, 0x12, 0x0, 0x12, 0xfe, 0x12, 0x20, 0x12, 0x44, 0x1a, 0xfe, 0x72, 0x12, 0x12, 0x10, 0x16, 0xfe, 0x14, 0x10, 0x1c, 0x10, 0x31, 0xff },
{ 0x88, 0xad, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x2, 0x3, 0xfe, 0x62, 0x0, 0x32, 0xfe, 0x12, 0x20, 0x2, 0x44, 0xa, 0xfe, 0xa, 0x12, 0x1a, 0x10, 0x16, 0xfe, 0x34, 0x10, 0x2c, 0x10, 0x61, 0xff },
{ 0x88, 0xae, 0x10, 0x0, 0x10, 0x7e, 0x10, 0x42, 0x10, 0x42, 0x7e, 0x42, 0x12, 0x42, 0x12, 0x7e, 0x12, 0x42, 0x12, 0x42, 0x12, 0x42, 0x12, 0x42, 0x12, 0x7e, 0x12, 0x0, 0x32, 0x1, 0x23, 0x3, 0x61, 0xfe },
{ 0x88, 0xaf, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1, 0x0, 0x1f, 0xf8, 0x2, 0x8, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x20, 0x1f, 0xfc, 0x4, 0x20, 0x7f, 0xff, 0x0, 0x20 },
{ 0x88, 0xb0, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0 },
{ 0x88, 0xb1, 0x10, 0x20, 0x1e, 0x64, 0x32, 0x46, 0x24, 0xfa, 0x7e, 0x10, 0x2b, 0xfe, 0x2a, 0x28, 0x3e, 0x44, 0x2b, 0x93, 0x2a, 0x20, 0x3e, 0xc4, 0x0, 0x18, 0x55, 0x61, 0x55, 0x6, 0x54, 0x18, 0x40, 0xe0 },
{ 0x88, 0xb2, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7c, 0x0, 0x11, 0x4, 0x11, 0x8c, 0x38, 0x88, 0x37, 0xff, 0x54, 0x20, 0x50, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x88, 0xb3, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x17, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x30, 0x40, 0x20, 0x40, 0x60, 0x40, 0xf, 0xff, 0x0, 0x0 },
{ 0x88, 0xb4, 0x8, 0x10, 0x8, 0x38, 0x7f, 0x28, 0x8, 0x6c, 0x3e, 0xc6, 0x23, 0x83, 0x22, 0x64, 0x3e, 0x34, 0x22, 0x4, 0x22, 0xc4, 0x3e, 0x64, 0x8, 0x7, 0x7f, 0x3c, 0x8, 0xe4, 0x8, 0x4, 0x8, 0x4 },
{ 0x88, 0xb5, 0x10, 0x0, 0x13, 0xf8, 0x11, 0x8, 0x11, 0x18, 0x7d, 0x10, 0x11, 0x10, 0x11, 0xbc, 0x11, 0x84, 0x11, 0xc4, 0x1d, 0x4c, 0x73, 0x68, 0x12, 0x38, 0x12, 0x10, 0x12, 0x38, 0x12, 0x6c, 0x36, 0xc7 },
{ 0x88, 0xb6, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x28, 0x2, 0x8, 0x0, 0xf, 0x7c, 0x19, 0x44, 0x11, 0x44, 0x3b, 0x44, 0x6a, 0x44, 0x6, 0x4c, 0x4, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x88, 0xb7, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x7e, 0x84, 0x12, 0xfc, 0x12, 0x84, 0x32, 0x84, 0x26, 0x84, 0x24, 0x84, 0x74, 0xfc, 0xc, 0x84, 0xa, 0x84, 0x1a, 0x84, 0x30, 0x84, 0x63, 0xff },
{ 0x88, 0xb8, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7f, 0x10, 0x49, 0xff, 0x49, 0x40, 0x49, 0x40, 0x49, 0x40, 0x7f, 0x40, 0x8, 0x40, 0x8, 0x40, 0xa, 0x40, 0xa, 0x40, 0xf, 0x60, 0x79, 0x3e, 0x0, 0x0 },
{ 0x88, 0xb9, 0x8, 0x10, 0x1c, 0x10, 0x16, 0x34, 0x33, 0x26, 0x28, 0x62, 0x7e, 0x4f, 0x22, 0xf9, 0x3e, 0x0, 0x22, 0x0, 0x3e, 0x7e, 0x20, 0x42, 0x22, 0x42, 0x22, 0x42, 0x2f, 0x42, 0x39, 0x42, 0x60, 0x7e },
{ 0x88, 0xba, 0x8, 0x40, 0x18, 0x40, 0x30, 0xff, 0x62, 0x81, 0x37, 0x81, 0xc, 0x79, 0x18, 0x49, 0x32, 0x49, 0x7f, 0x79, 0x9, 0x49, 0x8, 0x49, 0x2a, 0x79, 0x2b, 0x1, 0x69, 0x3, 0x48, 0x2, 0x8, 0xe },
{ 0x88, 0xbb, 0x8, 0x20, 0x18, 0x20, 0x11, 0xfe, 0x64, 0x20, 0x2f, 0xff, 0x18, 0x48, 0x10, 0xc8, 0x25, 0x8f, 0x7e, 0x40, 0x12, 0x7c, 0x10, 0xc4, 0x55, 0x8c, 0x54, 0x58, 0x54, 0x30, 0x10, 0xcc, 0x13, 0x87 },
{ 0x88, 0xbc, 0x10, 0x10, 0x1e, 0x10, 0x32, 0x10, 0x24, 0x10, 0x7f, 0x1f, 0x29, 0x10, 0x29, 0x10, 0x3f, 0x10, 0x29, 0x10, 0x29, 0x7e, 0x3f, 0x42, 0x0, 0x42, 0x55, 0x42, 0x55, 0x42, 0x54, 0x42, 0x40, 0x7e },
{ 0x88, 0xbd, 0x0, 0x48, 0x0, 0x4c, 0x0, 0x44, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x40, 0x3e, 0x42, 0x22, 0x66, 0x22, 0x24, 0x22, 0x2c, 0x3e, 0x38, 0x0, 0x10, 0x7, 0x39, 0x1c, 0x6d, 0x71, 0xc7, 0x7, 0x2 },
{ 0x88, 0xbe, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x88, 0xbf, 0x10, 0x10, 0x10, 0x38, 0x10, 0x28, 0x7c, 0x6c, 0x4, 0xc6, 0xd, 0x83, 0x8, 0x0, 0x1a, 0x7c, 0x16, 0x0, 0x3c, 0x0, 0x76, 0xfe, 0x12, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x88, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x21, 0x2, 0x3, 0x0, 0x2, 0x0, 0x7f, 0xff, 0x4, 0x8, 0xc, 0x18, 0x8, 0x10, 0x1f, 0x30, 0x0, 0xe0, 0x3, 0xb8, 0xe, 0xc, 0x38, 0x6 },
{ 0x88, 0xc1, 0x0, 0x40, 0x0, 0x40, 0x3f, 0xff, 0x20, 0x80, 0x2f, 0xfe, 0x21, 0x10, 0x22, 0x48, 0x27, 0xfc, 0x3c, 0x47, 0x24, 0x44, 0x27, 0xfc, 0x24, 0x44, 0x64, 0x44, 0x47, 0xfd, 0x40, 0x43, 0x0, 0x3e },
{ 0x88, 0xc2, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x12, 0x2, 0x7e, 0x42, 0x10, 0x40, 0x10, 0x40, 0x17, 0xff, 0x1c, 0x84, 0x71, 0x8c, 0x11, 0x8, 0x13, 0xd8, 0x10, 0x30, 0x10, 0x6c, 0x10, 0xc6, 0x33, 0x83 },
{ 0x88, 0xc3, 0x0, 0x20, 0x0, 0x20, 0x7b, 0xfe, 0x49, 0x4, 0x49, 0x8c, 0x48, 0x88, 0x4f, 0xff, 0x78, 0x0, 0x48, 0x0, 0x49, 0xfc, 0x49, 0x4, 0x49, 0x4, 0x79, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x1, 0xfc },
{ 0x88, 0xc4, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x1, 0x0, 0x7f, 0xff, 0x4, 0x10, 0xf, 0x30, 0x1, 0xe0, 0x7, 0x38, 0x3c, 0xc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0xe, 0xb8, 0x78, 0x8f, 0x0, 0x80 },
{ 0x88, 0xc5, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x82, 0x27, 0xf2, 0x22, 0x22, 0x2f, 0xfa, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xee },
{ 0x88, 0xc6, 0x22, 0x10, 0x22, 0x10, 0x7f, 0xfe, 0x22, 0x82, 0x22, 0xa2, 0x3e, 0x20, 0x8, 0x20, 0x7f, 0xff, 0x49, 0x24, 0x49, 0x64, 0x7f, 0x4c, 0x8, 0xe8, 0x7f, 0x38, 0x8, 0x2c, 0x8, 0x66, 0x8, 0xc2 },
{ 0x88, 0xc7, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x88, 0xc8, 0x0, 0x0, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x13, 0x4, 0x11, 0x84, 0x10, 0xc4, 0x10, 0x44, 0x10, 0xc, 0x10, 0x8, 0x10, 0x8, 0x10, 0x1c, 0x17, 0x36, 0x1c, 0x62, 0x70, 0xc3, 0x3, 0x81 },
{ 0x88, 0xc9, 0x4, 0x0, 0x5, 0xfe, 0xc, 0x22, 0x8, 0x22, 0x18, 0x22, 0x13, 0xff, 0x30, 0x22, 0x50, 0x22, 0x10, 0x22, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x60, 0x10, 0x40, 0x10, 0xc0, 0x11, 0x80 },
{ 0x88, 0xca, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0xb, 0xfe, 0x18, 0x0, 0x10, 0x0, 0x31, 0x4, 0x51, 0x4, 0x11, 0x8c, 0x10, 0x88, 0x10, 0x88, 0x10, 0x98, 0x10, 0x10, 0x10, 0x10, 0x17, 0xff, 0x10, 0x0 },
{ 0x88, 0xcb, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x10, 0x40, 0x30, 0x40, 0x30, 0xe2, 0x51, 0xa6, 0x13, 0x2c, 0x17, 0x38, 0x1d, 0x10, 0x11, 0x18, 0x11, 0x8, 0x11, 0x6c, 0x11, 0xc6, 0x17, 0x3 },
{ 0x88, 0xcc, 0x4, 0x20, 0x5, 0xfc, 0xc, 0x44, 0x8, 0x44, 0x1b, 0xff, 0x10, 0x0, 0x31, 0xfc, 0x51, 0x4, 0x11, 0xfc, 0x10, 0x10, 0x13, 0xfe, 0x10, 0x90, 0x10, 0x90, 0x17, 0xff, 0x10, 0x10, 0x10, 0x10 },
{ 0x88, 0xcd, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x22, 0x22, 0x22, 0x22, 0x2f, 0xfa, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2f, 0xfa, 0x22, 0x22, 0x26, 0x22, 0x2c, 0x22, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x88, 0xce, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x3f, 0xfc, 0x0, 0x84, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xfe, 0x1, 0x42, 0x3, 0x62, 0x2, 0x2e, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x88, 0xcf, 0x0, 0x1c, 0x1f, 0xf0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x30, 0xf, 0xe0, 0x1, 0xb8, 0x3e, 0xe },
{ 0x88, 0xd0, 0x0, 0x24, 0x0, 0x26, 0x0, 0x22, 0x3f, 0xff, 0x20, 0x20, 0x2f, 0xa0, 0x20, 0x22, 0x22, 0x32, 0x2f, 0xd6, 0x24, 0x94, 0x24, 0x9c, 0x2f, 0x8, 0x21, 0x9d, 0x62, 0xb5, 0x4c, 0x67, 0x40, 0xc2 },
{ 0x88, 0xd1, 0x0, 0x2, 0x3f, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0x82, 0x20, 0x3f, 0x20, 0x2, 0x2f, 0x82, 0x20, 0x12, 0x2f, 0x9a, 0x22, 0xa, 0x2a, 0x82, 0x6a, 0x82, 0x4a, 0x82, 0x52, 0x82, 0x6, 0xe },
{ 0x88, 0xd2, 0x10, 0x80, 0x10, 0x88, 0x11, 0x98, 0x19, 0x10, 0x55, 0xff, 0x53, 0x10, 0x55, 0x10, 0x51, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0xff },
{ 0x88, 0xd3, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x12, 0x46, 0x32, 0xb, 0x61, 0xf9 },
{ 0x88, 0xd4, 0x0, 0x4, 0x3f, 0x84, 0x20, 0x84, 0x3f, 0x84, 0x20, 0x7f, 0x2f, 0x84, 0x20, 0x24, 0x2f, 0x94, 0x22, 0x14, 0x6a, 0x84, 0x4a, 0x84, 0x16, 0x1c, 0x0, 0x80, 0x12, 0x46, 0x32, 0xb, 0x61, 0xf9 },
{ 0x88, 0xd5, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x0, 0xf, 0xfe, 0x19, 0x22, 0x73, 0x22, 0x6, 0x62, 0x1c, 0xc6, 0x3, 0x84, 0x0, 0x1c },
{ 0x88, 0xd6, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7c, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x18, 0x0, 0x37, 0xff, 0x34, 0x4, 0x51, 0xe4, 0x51, 0x24, 0x11, 0x24, 0x11, 0xe4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x88, 0xd7, 0x11, 0x0, 0x19, 0x0, 0x9, 0x0, 0x3f, 0xf8, 0x2, 0x8, 0x2, 0x10, 0x7, 0xfe, 0x4, 0x2, 0xc, 0x4, 0x1f, 0xff, 0x30, 0x1, 0x60, 0x11, 0x14, 0x89, 0x12, 0x4b, 0x22, 0x42, 0x0, 0xe },
{ 0x88, 0xd8, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x8, 0x84, 0x8, 0xcc, 0x8, 0x68, 0xb, 0x30, 0xe, 0x1c, 0x38, 0x7 },
{ 0x88, 0xd9, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x88, 0xda, 0x2, 0x20, 0xe, 0x3e, 0x78, 0x62, 0x8, 0xc6, 0x9, 0xac, 0x7e, 0x18, 0x8, 0x30, 0x8, 0xe8, 0x1c, 0xf, 0x1a, 0x19, 0x2a, 0x33, 0x28, 0xea, 0x48, 0x6, 0x8, 0xc, 0x8, 0x38, 0x9, 0xe0 },
{ 0x88, 0xdb, 0x8, 0x20, 0x18, 0x24, 0x30, 0x6c, 0x62, 0x48, 0x36, 0xff, 0xd, 0x48, 0x18, 0x48, 0x32, 0x7e, 0x7f, 0x48, 0x9, 0x48, 0x8, 0x48, 0x2a, 0x7e, 0x2b, 0x48, 0x69, 0x48, 0x48, 0x48, 0x8, 0x7f },
{ 0x88, 0xdc, 0x8, 0x20, 0x18, 0xfc, 0x10, 0x44, 0x64, 0x44, 0x2d, 0xff, 0x18, 0x0, 0x10, 0xfe, 0x24, 0x82, 0x7e, 0xfe, 0x12, 0x8, 0x10, 0xfe, 0x54, 0x48, 0x54, 0x48, 0x55, 0xff, 0x10, 0x8, 0x10, 0x8 },
{ 0x88, 0xdd, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x88, 0xde, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x3c, 0x1f, 0xe0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x1c, 0x9c, 0x70, 0x87, 0x2, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xa0, 0x0, 0xf8, 0x3f, 0xe },
{ 0x88, 0xdf, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x42, 0x6, 0x66, 0xc, 0x2c, 0x1c, 0x38, 0x74, 0x30, 0x4, 0x10, 0x4, 0x18, 0x4, 0x8, 0x5, 0xcc, 0xf, 0x6, 0x38, 0x3 },
{ 0x88, 0xe0, 0x0, 0x0, 0x3e, 0xfe, 0x0, 0x92, 0x7f, 0xfe, 0x0, 0x92, 0x3e, 0x92, 0x0, 0xfe, 0x0, 0x0, 0x3e, 0xfe, 0x0, 0x82, 0x0, 0xfe, 0x3e, 0x82, 0x22, 0xfe, 0x22, 0x82, 0x22, 0x82, 0x3e, 0x86 },
{ 0x88, 0xe1, 0x0, 0x20, 0x31, 0xfc, 0x18, 0x44, 0x8, 0x44, 0x3, 0xff, 0x0, 0x0, 0x0, 0xfc, 0x78, 0x84, 0x8, 0xfc, 0x8, 0x10, 0x9, 0xfe, 0x8, 0x90, 0xb, 0xff, 0x18, 0x10, 0x34, 0x10, 0x63, 0xff },
{ 0x88, 0xe2, 0x0, 0x20, 0x31, 0xfc, 0x19, 0x24, 0x9, 0xfc, 0x0, 0x20, 0x7, 0xff, 0x0, 0x0, 0x79, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x9, 0x4, 0x19, 0xfc, 0x36, 0x2, 0x63, 0xff },
{ 0x88, 0xe3, 0x0, 0x0, 0x3f, 0xfe, 0x22, 0x0, 0x22, 0x0, 0x27, 0xfc, 0x2c, 0x40, 0x20, 0x40, 0x2f, 0xfe, 0x20, 0xa0, 0x21, 0xb0, 0x21, 0x10, 0x23, 0x18, 0x26, 0xc, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x88, 0xe4, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x3f, 0xfe, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x20, 0x30, 0x20 },
{ 0x88, 0xe5, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1, 0xa0, 0x1b, 0x60, 0xc, 0x48, 0x6, 0xd8, 0x1, 0x90, 0x7, 0x30, 0xc, 0x60, 0x38, 0xd0, 0x3, 0x98, 0xe, 0xc, 0x38, 0x6 },
{ 0x88, 0xe6, 0x10, 0x14, 0x10, 0x12, 0x10, 0x12, 0x13, 0xff, 0x7c, 0x10, 0x10, 0x10, 0x13, 0xd2, 0x12, 0x52, 0x12, 0x5a, 0x12, 0x4e, 0x13, 0xcc, 0x1c, 0x8, 0x71, 0xdd, 0x7, 0x35, 0x0, 0x67, 0x1, 0x82 },
{ 0x88, 0xe7, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x0, 0x4, 0x4, 0xf, 0xfe, 0x38, 0x2, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x88, 0xe8, 0x4, 0x0, 0x4, 0x3e, 0x7f, 0xa2, 0x8, 0x26, 0x8, 0x24, 0x1f, 0x2c, 0x11, 0x28, 0x31, 0x24, 0x5f, 0x22, 0x11, 0x22, 0x11, 0x22, 0x1f, 0x22, 0x11, 0x22, 0x11, 0x2e, 0x11, 0x20, 0x17, 0x20 },
{ 0x88, 0xe9, 0x0, 0x92, 0x7d, 0x14, 0x13, 0x5d, 0x10, 0x92, 0x11, 0x15, 0x11, 0x5f, 0x3b, 0xd4, 0x28, 0x12, 0x6b, 0xff, 0x2a, 0x10, 0x2b, 0x12, 0x2a, 0x94, 0x3a, 0x88, 0x6, 0x1d, 0x4, 0x27, 0xc, 0xc2 },
{ 0x88, 0xea, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x88, 0xeb, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x40, 0x1, 0x48, 0x31, 0x8, 0xe0, 0xf, 0x80, 0x8, 0x2, 0x8, 0x6, 0xc, 0x4, 0x7, 0xfc },
{ 0x88, 0xec, 0x1, 0x4, 0x31, 0x8c, 0x18, 0x88, 0xb, 0xfe, 0x0, 0x88, 0x61, 0x8c, 0x31, 0x4, 0x13, 0x6, 0x6, 0x3, 0x0, 0x0, 0xb, 0xfe, 0x1a, 0x52, 0x12, 0x52, 0x32, 0x52, 0x22, 0x52, 0x67, 0xff },
{ 0x88, 0xed, 0x0, 0x40, 0x30, 0x7c, 0x18, 0xc8, 0x9, 0x90, 0x3, 0xfe, 0x1, 0x22, 0x1, 0x22, 0x79, 0x22, 0x9, 0xfe, 0x8, 0x50, 0x8, 0xd0, 0x8, 0x91, 0x9, 0x91, 0x1b, 0xf, 0x34, 0x0, 0x63, 0xff },
{ 0x88, 0xee, 0x6, 0x6, 0x1c, 0x3c, 0x71, 0xe0, 0x10, 0x0, 0x11, 0x22, 0x7d, 0xb6, 0x10, 0x94, 0x10, 0x0, 0x19, 0x3e, 0x35, 0x22, 0x31, 0x22, 0x51, 0x3e, 0x51, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0x3e },
{ 0x88, 0xef, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x5, 0x10, 0x31, 0x0, 0x19, 0xfe, 0xb, 0x22, 0x2, 0x26, 0x6, 0x74, 0x8, 0x50, 0x18, 0xd8, 0x10, 0x88, 0x31, 0x8c, 0x63, 0x6, 0x6, 0x3 },
{ 0x88, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x88, 0xf1, 0x21, 0xef, 0x3c, 0x21, 0x24, 0x21, 0x49, 0xef, 0x7d, 0x8, 0x55, 0x8, 0x55, 0xef, 0x7c, 0x21, 0x55, 0x29, 0x54, 0xa5, 0x7c, 0x21, 0x1, 0x63, 0x55, 0xa5, 0x55, 0x29, 0x54, 0x63, 0x40, 0xc6 },
{ 0x88, 0xf2, 0x2, 0x0, 0x2, 0x0, 0x6, 0x10, 0x4, 0x18, 0xc, 0xc, 0x8, 0xfe, 0x3f, 0xa2, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x21, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x88, 0xf3, 0x3, 0x0, 0xe, 0x0, 0x38, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3e, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3e, 0x9e, 0x0, 0x80, 0x0, 0x80 },
{ 0x88, 0xf4, 0x0, 0x0, 0x3, 0xfe, 0x7a, 0x2, 0x4a, 0x22, 0x4a, 0x22, 0x4a, 0xfa, 0x4a, 0x22, 0x4a, 0x22, 0x4a, 0x72, 0x4a, 0x52, 0x7a, 0x52, 0x2, 0x8a, 0x2, 0x2, 0x2, 0x2, 0x3, 0xfe, 0x0, 0x0 },
{ 0x88, 0xf5, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0xc, 0x18, 0x38, 0xe },
{ 0x88, 0xf6, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x82, 0x21, 0xc2, 0x21, 0x42, 0x23, 0x62, 0x26, 0x32, 0x2c, 0x1a, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x88, 0xf7, 0x20, 0x0, 0x23, 0xfe, 0x22, 0x2, 0x22, 0x22, 0x7a, 0x22, 0x2a, 0xfa, 0x2a, 0x22, 0x6a, 0x22, 0x4a, 0x72, 0x5a, 0x52, 0x52, 0x52, 0x52, 0x8a, 0x3a, 0x2, 0x2a, 0x2, 0x63, 0xfe, 0x40, 0x0 },
{ 0x88, 0xf8, 0x0, 0x4, 0x7f, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x3f, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x3f, 0x4, 0x1, 0x4, 0x1, 0x4, 0x3, 0x4, 0x2, 0x4, 0x6, 0x4, 0x3c, 0x4 },
{ 0x88, 0xf9, 0x8, 0x40, 0x1c, 0x40, 0x16, 0x40, 0x33, 0x7f, 0x28, 0x41, 0x7e, 0xd3, 0x22, 0x92, 0x3e, 0x10, 0x22, 0x10, 0x3e, 0x38, 0x20, 0x28, 0x24, 0x28, 0x24, 0x6c, 0x2e, 0x44, 0x3a, 0xc6, 0x61, 0x83 },
{ 0x88, 0xfa, 0x30, 0xe, 0x1b, 0xf8, 0x8, 0x2, 0x2, 0x46, 0x63, 0x64, 0x31, 0x20, 0x10, 0x1c, 0x1, 0xf0, 0x0, 0x20, 0x8, 0x20, 0xf, 0xff, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x23, 0xfe, 0x60, 0x0 },
{ 0x88, 0xfb, 0x10, 0x84, 0x11, 0x4, 0x16, 0x24, 0x13, 0x44, 0x10, 0x84, 0x11, 0x24, 0x17, 0xf4, 0x10, 0x14, 0x13, 0xe4, 0x12, 0x24, 0x13, 0xe4, 0x12, 0x24, 0x13, 0xe4, 0x32, 0x25, 0x22, 0x25, 0x62, 0x63 },
{ 0x88, 0xfc, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3c, 0x30, 0x24, 0x48, 0x24, 0xb4, 0x2b, 0x3, 0x28, 0xfc, 0x24, 0x8, 0x25, 0xfe, 0x24, 0x0, 0x2b, 0xff, 0x20, 0x84, 0x21, 0x1e, 0x23, 0xf2 },
{ 0x89, 0x40, 0x0, 0x20, 0x3c, 0x20, 0x25, 0xfe, 0x25, 0x2, 0x25, 0x2, 0x28, 0xfc, 0x28, 0x0, 0x24, 0x0, 0x27, 0xff, 0x24, 0x48, 0x24, 0x48, 0x24, 0x48, 0x2c, 0xc8, 0x20, 0x89, 0x21, 0x8b, 0x23, 0x6 },
{ 0x89, 0x41, 0x0, 0x20, 0x3c, 0x70, 0x24, 0x58, 0x24, 0xcc, 0x25, 0xb6, 0x2b, 0x3, 0x28, 0xfc, 0x24, 0x8, 0x24, 0x10, 0x25, 0xfc, 0x24, 0x0, 0x27, 0xff, 0x2c, 0x80, 0x20, 0x84, 0x21, 0x1e, 0x23, 0xf2 },
{ 0x89, 0x42, 0x0, 0x6, 0x3c, 0x3c, 0x27, 0xe2, 0x25, 0x26, 0x24, 0x94, 0x29, 0xfe, 0x28, 0x2, 0x25, 0xfe, 0x24, 0x2, 0x25, 0xfe, 0x24, 0x20, 0x24, 0x10, 0x2d, 0x52, 0x21, 0x43, 0x23, 0x45, 0x22, 0x3c },
{ 0x89, 0x43, 0x8, 0x0, 0x8, 0x7e, 0x7f, 0x42, 0x22, 0x42, 0x36, 0x7e, 0x14, 0x0, 0x7f, 0x7e, 0x0, 0x42, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x7e, 0x3e, 0x42, 0x22, 0x7e, 0x22, 0x24, 0x3e, 0x66, 0x0, 0xc3 },
{ 0x89, 0x44, 0x0, 0x4, 0x3e, 0x4, 0x22, 0x4, 0x22, 0x4, 0x23, 0xff, 0x22, 0x4, 0x22, 0x4, 0x22, 0xc4, 0x22, 0x64, 0x22, 0x24, 0x22, 0x4, 0x3e, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x1c },
{ 0x89, 0x45, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x1c, 0x4, 0x34, 0x4, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc, 0x0, 0x0 },
{ 0x89, 0x46, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x89, 0x47, 0x0, 0x40, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0xf, 0xfe, 0x0, 0x22, 0x14, 0xb2, 0x36, 0xd6, 0x22, 0x44, 0x0, 0x1c },
{ 0x89, 0x48, 0x0, 0x0, 0x7e, 0xfe, 0x2, 0x2, 0x2, 0x2, 0x32, 0x62, 0x1a, 0x32, 0xa, 0x12, 0x2, 0x2, 0xe, 0xe, 0xa, 0x1a, 0x1a, 0x32, 0x32, 0x62, 0x62, 0xc2, 0x2, 0x2, 0x2, 0x2, 0xe, 0xe },
{ 0x89, 0x49, 0x0, 0x0, 0x33, 0xfe, 0x18, 0x20, 0x8, 0x20, 0x0, 0x20, 0x0, 0x20, 0x7, 0xff, 0x78, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x18, 0xe0, 0x34, 0x0, 0x63, 0xff },
{ 0x89, 0x4a, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2c, 0xb2, 0x26, 0x9a, 0x22, 0x8a, 0x20, 0x82, 0x2c, 0xb2, 0x26, 0x9a, 0x22, 0x8a, 0x20, 0x82, 0x20, 0x82, 0x20, 0xe },
{ 0x89, 0x4b, 0x3, 0x0, 0xe, 0x0, 0x38, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x42, 0x64, 0x4e, 0xc, 0x40, 0x18, 0x40, 0x30, 0x40 },
{ 0x89, 0x4c, 0x22, 0x8, 0x36, 0x10, 0x14, 0x7e, 0x7f, 0x42, 0x9, 0x7e, 0x3f, 0x42, 0x28, 0x7e, 0x28, 0x40, 0x3f, 0x7f, 0x9, 0x40, 0x9, 0x7f, 0x1b, 0x1, 0x28, 0xab, 0x48, 0xa9, 0x9, 0x3, 0x8, 0x6 },
{ 0x89, 0x4d, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x2c, 0x3a, 0x0, 0x0, 0x8, 0x7c, 0x3e, 0x44, 0x8, 0x7c, 0x8, 0x44, 0x7f, 0x7c, 0x8, 0x44, 0x1c, 0x7c, 0x16, 0x29, 0x30, 0x69, 0x61, 0xc7 },
{ 0x89, 0x4e, 0x0, 0x0, 0x3f, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0 },
{ 0x89, 0x4f, 0x0, 0x24, 0x0, 0x6c, 0x7f, 0x48, 0x8, 0xff, 0x8, 0xc8, 0x19, 0x48, 0x10, 0x48, 0x3e, 0x7e, 0x32, 0x48, 0x52, 0x48, 0x12, 0x48, 0x12, 0x7e, 0x12, 0x48, 0x12, 0x48, 0x1e, 0x48, 0x0, 0x7f },
{ 0x89, 0x50, 0x1, 0x80, 0x7, 0x0, 0x3c, 0x3e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3e, 0x3e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x89, 0x51, 0x0, 0x0, 0x33, 0xfc, 0x1a, 0x4, 0xa, 0x4, 0x2, 0x7c, 0x62, 0x44, 0x32, 0x44, 0x17, 0xfe, 0x4, 0x2, 0x4, 0xf2, 0x14, 0x92, 0x14, 0x92, 0x34, 0x92, 0x24, 0xf2, 0x64, 0x2, 0x44, 0xe },
{ 0x89, 0x52, 0x0, 0x20, 0x0, 0x3e, 0x78, 0x20, 0x4b, 0xff, 0x4a, 0x21, 0x4a, 0x3a, 0x4a, 0xe0, 0x4a, 0x22, 0x4a, 0x1e, 0x4a, 0x0, 0x7a, 0x28, 0x6, 0xa9, 0x4, 0xaa, 0xc, 0xaa, 0x18, 0x28, 0x1, 0xff },
{ 0x89, 0x53, 0x0, 0x0, 0x0, 0xfe, 0x7c, 0x82, 0x44, 0x82, 0x44, 0xfe, 0x44, 0x82, 0x44, 0x82, 0x44, 0x82, 0x44, 0xfe, 0x44, 0x82, 0x44, 0x82, 0x7c, 0x82, 0x0, 0xfe, 0x0, 0x44, 0x0, 0xc6, 0x1, 0x83 },
{ 0x89, 0x54, 0x11, 0x44, 0x7c, 0x9f, 0x11, 0x44, 0x38, 0x8e, 0x55, 0x55, 0x1f, 0xfc, 0x12, 0x24, 0x1f, 0xfc, 0x0, 0x0, 0x3f, 0x4, 0x21, 0x7f, 0x3f, 0x4, 0x21, 0x24, 0x3f, 0x14, 0x22, 0x4, 0x7d, 0x1c },
{ 0x89, 0x55, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x2, 0x3f, 0x82, 0x20, 0x82, 0x3f, 0xbf, 0x20, 0x2, 0x2f, 0x92, 0x20, 0xa, 0x2f, 0x8a, 0x22, 0x2, 0x6a, 0x82, 0x52, 0x42, 0x6, 0xe },
{ 0x89, 0x56, 0x10, 0x7c, 0x1e, 0x44, 0x32, 0x7c, 0x24, 0x44, 0x7e, 0x7c, 0x2a, 0x0, 0x2a, 0xfe, 0x3e, 0xaa, 0x2a, 0xfe, 0x2a, 0x0, 0x3e, 0xfc, 0x0, 0x44, 0x55, 0x6c, 0x55, 0x38, 0x54, 0x6c, 0x41, 0xc7 },
{ 0x89, 0x57, 0x8, 0x22, 0x8, 0x22, 0x8, 0xfe, 0x8, 0x24, 0x7e, 0x2c, 0x12, 0x28, 0x13, 0xff, 0x12, 0x30, 0x36, 0x60, 0x25, 0xc6, 0x27, 0x5c, 0x7c, 0x70, 0xa, 0x40, 0x1a, 0x41, 0x30, 0x63, 0x60, 0x3e },
{ 0x89, 0x58, 0x0, 0x0, 0x3f, 0xff, 0x20, 0x0, 0x2f, 0x7e, 0x29, 0x28, 0x29, 0x28, 0x2f, 0x28, 0x29, 0x28, 0x29, 0x7f, 0x2f, 0x8, 0x28, 0x18, 0x2a, 0x18, 0x6a, 0x38, 0x4f, 0x29, 0x59, 0x69, 0x0, 0xc7 },
{ 0x89, 0x59, 0x0, 0x24, 0x30, 0x22, 0x1f, 0xff, 0x8, 0x20, 0x0, 0x20, 0x63, 0xfe, 0x32, 0x22, 0x12, 0x22, 0x3, 0xfe, 0xa, 0x22, 0xa, 0x22, 0x1b, 0xfe, 0x12, 0x22, 0x32, 0x22, 0x22, 0x22, 0x62, 0x26 },
{ 0x89, 0x5a, 0x0, 0x6, 0x0, 0x3c, 0x1f, 0xe8, 0x10, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0xc, 0x11, 0x4, 0x11, 0x24, 0x11, 0x24, 0x31, 0xf6, 0x27, 0x12, 0x60, 0x3 },
{ 0x89, 0x5b, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x27, 0xf2, 0x20, 0x82, 0x20, 0x82, 0x23, 0xe2, 0x20, 0x82, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x2, 0x20, 0xe },
{ 0x89, 0x5c, 0x1, 0x4, 0x0, 0x88, 0x7, 0xff, 0x78, 0x50, 0x4b, 0xfe, 0x4a, 0x52, 0x4b, 0x9e, 0x4a, 0x2, 0x4b, 0xfe, 0x4a, 0x2, 0x4b, 0xfe, 0x78, 0x4, 0x7, 0xff, 0x1, 0x4, 0x0, 0x84, 0x0, 0x1c },
{ 0x89, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x6, 0x8, 0x4, 0xc, 0x4, 0x4, 0xc, 0x3e, 0x9, 0xe2, 0x3f, 0x2, 0x0, 0x0 },
{ 0x89, 0x5e, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x22, 0x1, 0xfc, 0x0, 0x20, 0x1, 0xfc, 0x79, 0x24, 0x9, 0xfc, 0x9, 0x24, 0x9, 0xfc, 0x8, 0x20, 0xb, 0xfe, 0x18, 0x20, 0x34, 0x0, 0x63, 0xff },
{ 0x89, 0x5f, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0xe, 0xb8, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x4, 0x8, 0xc, 0x8, 0x8, 0xfc, 0x1f, 0x84 },
{ 0x89, 0x60, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x8, 0xc, 0x8, 0x38, 0x1b, 0xe0, 0x10, 0x20, 0x30, 0x20, 0x57, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x0 },
{ 0x89, 0x61, 0x8, 0x0, 0x1d, 0xff, 0x16, 0x44, 0x33, 0x44, 0x28, 0x44, 0x7e, 0x7c, 0x22, 0x44, 0x3e, 0x44, 0x22, 0x44, 0x3e, 0x7c, 0x20, 0x44, 0x22, 0x44, 0x22, 0x47, 0x2f, 0xfc, 0x39, 0x4, 0x60, 0x4 },
{ 0x89, 0x62, 0x8, 0x0, 0xf, 0x7e, 0x8, 0x22, 0x7f, 0xa2, 0x40, 0xa2, 0xc, 0x36, 0x21, 0x14, 0x4c, 0x94, 0x12, 0x1c, 0x3f, 0x8, 0x61, 0x88, 0x3f, 0x1c, 0x21, 0x14, 0x3f, 0x36, 0x21, 0x22, 0x3f, 0x63 },
{ 0x89, 0x63, 0x11, 0x4, 0x19, 0x8c, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x89, 0x64, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x12, 0x24, 0x21, 0x42, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x20, 0xf, 0xc0, 0x1, 0xf8, 0x3e, 0xe },
{ 0x89, 0x65, 0x0, 0x2, 0x3f, 0x86, 0x20, 0x8c, 0x3f, 0x98, 0x20, 0xb0, 0x3f, 0x82, 0x4, 0x6, 0x7f, 0xcc, 0x0, 0x18, 0x3f, 0xb0, 0x20, 0x81, 0x3f, 0x83, 0x4, 0x6, 0x24, 0x8c, 0x44, 0x58, 0xc, 0x30 },
{ 0x89, 0x66, 0x0, 0x20, 0x0, 0x20, 0x7c, 0x20, 0x45, 0xfe, 0x45, 0x22, 0x45, 0x22, 0x45, 0x22, 0x7d, 0x22, 0x45, 0x22, 0x47, 0xff, 0x44, 0x50, 0x44, 0xd8, 0x7c, 0x88, 0x1, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x89, 0x67, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x84, 0x0, 0xcc, 0x0, 0x59, 0x0, 0xf1, 0x7, 0x99, 0x7c, 0xf },
{ 0x89, 0x68, 0x3, 0x4, 0x31, 0x8c, 0x18, 0x98, 0x8, 0x10, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x89, 0x69, 0x3, 0x80, 0x0, 0xe0, 0x0, 0x20, 0x0, 0x0, 0x7, 0xc0, 0x0, 0x42, 0x0, 0x46, 0x3e, 0x6c, 0x2, 0x78, 0x6, 0x50, 0x4, 0x58, 0xc, 0x48, 0x18, 0x4c, 0x30, 0x46, 0x60, 0x43, 0x3, 0xc0 },
{ 0x89, 0x6a, 0x1, 0xc0, 0x30, 0x70, 0x18, 0x10, 0x8, 0x0, 0x3, 0xe0, 0x60, 0x22, 0x30, 0x32, 0x17, 0xb6, 0x0, 0xbc, 0x0, 0xa8, 0x11, 0xa8, 0x11, 0x2c, 0x33, 0x24, 0x26, 0x26, 0x6c, 0x23, 0x40, 0xe0 },
{ 0x89, 0x6b, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xfe, 0xa, 0x22, 0x2, 0x22, 0x63, 0xfe, 0x32, 0x22, 0x12, 0x22, 0x3, 0xfe, 0x8, 0x20, 0x8, 0x32, 0x18, 0x16, 0x10, 0x1c, 0x30, 0x39, 0x20, 0xed, 0x67, 0x87 },
{ 0x89, 0x6c, 0x0, 0x88, 0x7c, 0x88, 0x13, 0xff, 0x10, 0x88, 0x10, 0x88, 0x10, 0x20, 0x7d, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x13, 0xff, 0x10, 0x50, 0x1c, 0xd8, 0x71, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x89, 0x6d, 0x0, 0x0, 0x7f, 0xf0, 0x8, 0x10, 0x8, 0x10, 0xf, 0xde, 0x8, 0x42, 0x1a, 0x82, 0x11, 0x2, 0x36, 0xce, 0x60, 0x0, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x12, 0x24, 0x7f, 0xff, 0x0, 0x0 },
{ 0x89, 0x6e, 0x20, 0x0, 0x26, 0xff, 0x3c, 0x10, 0x20, 0x7e, 0x21, 0x42, 0x1f, 0x42, 0x0, 0x7e, 0x7, 0x42, 0x3c, 0x42, 0x4, 0x7e, 0x7f, 0xc2, 0x14, 0x42, 0x17, 0x7e, 0x35, 0xa4, 0x64, 0x66, 0x4, 0xc3 },
{ 0x89, 0x6f, 0x20, 0x0, 0x26, 0xff, 0x3c, 0x10, 0x20, 0x7e, 0x21, 0x42, 0x1f, 0x42, 0x0, 0x7e, 0x3f, 0x42, 0x0, 0x42, 0x7f, 0xfe, 0x8, 0x42, 0x2a, 0x42, 0x2b, 0x7e, 0x69, 0x24, 0x48, 0x66, 0x18, 0xc3 },
{ 0x89, 0x70, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x89, 0x71, 0x8, 0x80, 0x1b, 0xef, 0x31, 0x20, 0x61, 0x20, 0x7, 0xf0, 0x8, 0x0, 0x1b, 0xef, 0x32, 0x22, 0x73, 0xe2, 0x10, 0x42, 0x17, 0xf2, 0x12, 0x42, 0x12, 0x42, 0x1f, 0xfa, 0x10, 0x42, 0x10, 0x46 },
{ 0x89, 0x72, 0x0, 0x60, 0x3c, 0x38, 0x0, 0x8, 0x7e, 0x0, 0x0, 0xf0, 0x3c, 0x10, 0x0, 0x11, 0x1, 0xdb, 0x3c, 0x5a, 0x0, 0x5c, 0x0, 0x54, 0x3c, 0xd4, 0x24, 0x96, 0x25, 0x92, 0x27, 0x13, 0x3c, 0x70 },
{ 0x89, 0x73, 0x8, 0x42, 0x1c, 0x66, 0x16, 0x24, 0x33, 0x7e, 0x21, 0x42, 0x7e, 0x42, 0x8, 0x42, 0x8, 0x42, 0x7f, 0x7e, 0x8, 0x28, 0x4a, 0x28, 0x6a, 0x28, 0x28, 0x68, 0xf, 0x48, 0x78, 0xc9, 0x1, 0x87 },
{ 0x89, 0x74, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0x8, 0x90, 0x0, 0x90, 0x61, 0x9e, 0x31, 0x12, 0x13, 0x32, 0x5, 0x2a, 0x1, 0x66, 0x9, 0x14, 0x19, 0x1c, 0x11, 0x8, 0x31, 0x1c, 0x21, 0x36, 0x61, 0x63 },
{ 0x89, 0x75, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x50, 0x0, 0x31, 0xf8, 0x11, 0x8, 0x13, 0x8, 0x16, 0xf, 0x10, 0x0, 0x37, 0xfc, 0x51, 0x4, 0x11, 0x8c, 0x30, 0xd8, 0x20, 0x70, 0x61, 0xd8, 0xf, 0xf },
{ 0x89, 0x76, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff },
{ 0x89, 0x77, 0x0, 0x0, 0x3f, 0xbe, 0x24, 0x22, 0x24, 0x22, 0x3f, 0x22, 0x24, 0x22, 0x24, 0x22, 0x3f, 0x3e, 0x24, 0x28, 0x24, 0x28, 0x3f, 0xac, 0x0, 0xa4, 0x55, 0xa4, 0x54, 0xa6, 0x41, 0xa2, 0x3, 0x43 },
{ 0x89, 0x78, 0x8, 0x82, 0x8, 0xc6, 0x8, 0x44, 0x8, 0xfe, 0x2c, 0x82, 0x2a, 0x82, 0x2a, 0x82, 0x68, 0x82, 0x48, 0xfe, 0x8, 0x28, 0x8, 0x28, 0x8, 0x28, 0x8, 0x68, 0x8, 0x49, 0x8, 0xc9, 0x9, 0x87 },
{ 0x89, 0x79, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x82, 0x7e, 0xfe, 0x0, 0x82, 0x3c, 0xfe, 0x0, 0x40, 0x0, 0x7f, 0x3c, 0xc1, 0x1, 0x8d, 0x0, 0xf9, 0x3c, 0x81, 0x24, 0x85, 0x24, 0x7d, 0x24, 0x3, 0x3c, 0xe },
{ 0x89, 0x7a, 0x8, 0x14, 0x8, 0x12, 0x3e, 0x10, 0x8, 0xff, 0x8, 0x90, 0x7f, 0x92, 0x8, 0x92, 0x8, 0x96, 0x28, 0x94, 0x2e, 0x9c, 0x28, 0xe8, 0x29, 0x9d, 0x28, 0x37, 0x38, 0x62, 0x6e, 0x0, 0x43, 0xff },
{ 0x89, 0x7b, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x22, 0x22, 0x21, 0x42, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x21, 0x42, 0x23, 0x4a, 0x2e, 0x3a, 0x20, 0x6 },
{ 0x89, 0x7c, 0x8, 0x0, 0x9, 0xff, 0x8, 0x20, 0x7e, 0xfe, 0x8, 0x82, 0x8, 0xfe, 0x1c, 0x82, 0x1a, 0xfe, 0x1a, 0x82, 0x28, 0xfe, 0x28, 0x20, 0x48, 0x7e, 0x9, 0xc6, 0x8, 0x6c, 0x8, 0x38, 0x9, 0xef },
{ 0x89, 0x7d, 0x0, 0x0, 0x3f, 0xff, 0x20, 0x0, 0x2f, 0x8a, 0x28, 0x89, 0x2f, 0x88, 0x28, 0xbf, 0x2f, 0x88, 0x20, 0x8, 0x2f, 0x9c, 0x28, 0x94, 0x2f, 0x94, 0x68, 0x96, 0x4f, 0x92, 0x48, 0xb3, 0x9, 0xa1 },
{ 0x89, 0x7e, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe, 0x0, 0x0 },
{ 0x89, 0x80, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x82, 0x27, 0xf2, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf2, 0x21, 0xaa, 0x22, 0xb2, 0x2c, 0x9a, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x89, 0x81, 0x10, 0x0, 0x13, 0xff, 0x12, 0x0, 0x12, 0xfc, 0x12, 0x84, 0x7e, 0xfc, 0x12, 0x84, 0x12, 0xfc, 0x12, 0x20, 0x13, 0xfe, 0x12, 0x48, 0x1e, 0xd8, 0x72, 0x30, 0x3, 0xce, 0x2, 0x0, 0x3, 0xff },
{ 0x89, 0x82, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x90, 0x8, 0x88, 0x1f, 0xfc, 0x70, 0x87, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x81, 0x0, 0xc3, 0x0, 0x7e },
{ 0x89, 0x83, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x30, 0xf, 0xe0, 0x1, 0xb8, 0x1e, 0xc },
{ 0x89, 0x84, 0x0, 0x6, 0x7e, 0x1c, 0x5, 0xf0, 0x8, 0x10, 0x10, 0x10, 0x3c, 0x90, 0x4, 0x9e, 0x4, 0x90, 0x24, 0x90, 0x34, 0x90, 0x14, 0x90, 0x1c, 0x90, 0xb, 0xff, 0x1c, 0x0, 0x37, 0x0, 0x61, 0xff },
{ 0x89, 0x85, 0x8, 0x0, 0xf, 0x7e, 0x19, 0x42, 0x11, 0x42, 0x3b, 0x4e, 0x6a, 0x40, 0x6, 0x41, 0xc, 0x63, 0x18, 0x3e, 0x70, 0x0, 0x1, 0x80, 0x14, 0xc4, 0x14, 0x46, 0x34, 0xb, 0x26, 0x19, 0x63, 0xf0 },
{ 0x89, 0x86, 0x10, 0x40, 0x10, 0x40, 0x17, 0xff, 0x10, 0x88, 0x7c, 0xa8, 0x11, 0x24, 0x13, 0xfe, 0x15, 0x25, 0x11, 0x24, 0x1d, 0xfc, 0x71, 0x24, 0x11, 0x24, 0x11, 0xfc, 0x10, 0x21, 0x10, 0x33, 0x30, 0x1e },
{ 0x89, 0x87, 0x10, 0xe, 0x13, 0xf8, 0x11, 0x22, 0x7d, 0xb6, 0x10, 0x94, 0x11, 0xfe, 0x10, 0x40, 0x13, 0xff, 0x1c, 0x40, 0x70, 0x7c, 0x10, 0xc4, 0x11, 0x8c, 0x13, 0x58, 0x10, 0x30, 0x10, 0xec, 0x33, 0x87 },
{ 0x89, 0x88, 0x30, 0x88, 0x18, 0x88, 0x8, 0x88, 0x1, 0x8c, 0x1, 0x4, 0x63, 0x6, 0x36, 0x3, 0x10, 0x0, 0x1, 0xfc, 0x9, 0x4, 0x9, 0x4, 0x19, 0x4, 0x11, 0x4, 0x31, 0x4, 0x21, 0x4, 0x61, 0xfc },
{ 0x89, 0x89, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0xa, 0x1, 0x2, 0xfd, 0x60, 0x20, 0x31, 0xfe, 0x11, 0x22, 0x1, 0x22, 0x9, 0xfe, 0x9, 0x22, 0x19, 0x22, 0x11, 0xfe, 0x30, 0x84, 0x21, 0x86, 0x63, 0x3 },
{ 0x89, 0x8a, 0x0, 0x80, 0x8, 0x84, 0x8, 0x8c, 0x19, 0xd8, 0x11, 0x40, 0x3, 0x60, 0xe, 0x38, 0x38, 0x8e, 0x0, 0x84, 0x8, 0x8c, 0x19, 0xd8, 0x31, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x89, 0x8b, 0x8, 0x20, 0x8, 0x20, 0x8, 0x3e, 0xa, 0x62, 0x2a, 0x46, 0x2a, 0xcc, 0x28, 0x8, 0x68, 0xbf, 0x48, 0xa1, 0x8, 0xa1, 0x1c, 0xa1, 0x14, 0xbf, 0x16, 0xa1, 0x32, 0xa1, 0x20, 0xa1, 0x60, 0xbf },
{ 0x89, 0x8c, 0x8, 0x0, 0x9, 0xff, 0x8, 0x28, 0xa, 0x28, 0x2a, 0xfe, 0x2a, 0xaa, 0x28, 0xaa, 0x68, 0xaa, 0x48, 0xfe, 0x8, 0x10, 0x1c, 0x10, 0x14, 0xfe, 0x16, 0x10, 0x32, 0x10, 0x21, 0xff, 0x60, 0x0 },
{ 0x89, 0x8d, 0x4, 0x20, 0x4, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x7, 0xe0, 0x10, 0x9, 0x73, 0xca, 0x12, 0x4c, 0x12, 0x48, 0x12, 0x49, 0x33, 0xc9, 0x50, 0xf, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x89, 0x8e, 0x4, 0x20, 0x44, 0x20, 0x29, 0xfc, 0x10, 0x20, 0x13, 0xfe, 0x28, 0x0, 0x49, 0xfc, 0x9, 0x4, 0x19, 0x4, 0x29, 0xfc, 0x48, 0x51, 0x8, 0xdb, 0xb, 0x8a, 0x8, 0x8c, 0x18, 0xe6, 0x73, 0x83 },
{ 0x89, 0x8f, 0x8, 0x0, 0x19, 0xfc, 0x10, 0x4, 0x65, 0xfc, 0x2c, 0x4, 0x1b, 0xff, 0x10, 0x40, 0x24, 0xa2, 0x7d, 0x34, 0x14, 0x58, 0x10, 0x90, 0x55, 0x38, 0x54, 0x54, 0x54, 0x92, 0x11, 0x11, 0x10, 0x60 },
{ 0x89, 0x90, 0xa, 0x10, 0x3f, 0x9e, 0x2a, 0x92, 0x3f, 0xb6, 0x2a, 0xe4, 0x3f, 0xbf, 0x0, 0x29, 0x7f, 0xe9, 0x0, 0x29, 0x3f, 0xbf, 0x20, 0xa0, 0x3f, 0xa0, 0x11, 0x20, 0x1b, 0x21, 0xa, 0x21, 0x7f, 0xdf },
{ 0x89, 0x91, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x8, 0x0, 0xf, 0x7e, 0x19, 0x42, 0x11, 0x42, 0x3d, 0x42, 0x67, 0x42, 0x2, 0x4e, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x89, 0x92, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0xfe, 0x20, 0x82, 0x27, 0xf2, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf2, 0x21, 0x9a, 0x2e, 0xe2, 0x20, 0x9a, 0x3f, 0xfe },
{ 0x89, 0x93, 0x0, 0x20, 0x30, 0x20, 0x19, 0xfe, 0x8, 0x20, 0x3, 0xff, 0x0, 0x0, 0x1, 0xfe, 0x79, 0x2, 0x9, 0xfe, 0x8, 0x63, 0x8, 0xe6, 0x9, 0xb8, 0xb, 0x2e, 0x18, 0x23, 0x34, 0x20, 0x63, 0xff },
{ 0x89, 0x94, 0x8, 0x24, 0x1c, 0x24, 0x16, 0x24, 0x33, 0x66, 0x21, 0x42, 0x7e, 0xc3, 0x8, 0x81, 0x8, 0x0, 0x7f, 0x7e, 0x8, 0x42, 0x4a, 0x42, 0x6a, 0x42, 0x28, 0x42, 0xf, 0x42, 0x38, 0x42, 0x60, 0x7e },
{ 0x89, 0x95, 0x8, 0x3c, 0x1f, 0xa4, 0x71, 0x21, 0xa, 0x3f, 0xc, 0x80, 0x7f, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0x2f, 0xfe, 0x64, 0x92, 0x42, 0x4c },
{ 0x89, 0x96, 0x1, 0x0, 0x11, 0x0, 0x13, 0xfe, 0x16, 0x0, 0x11, 0xfc, 0x7d, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x52, 0x1e, 0x52, 0x72, 0x52, 0x2, 0x52, 0x2, 0x52, 0x7, 0xff },
{ 0x89, 0x97, 0x8, 0x10, 0x8, 0x10, 0x8, 0x38, 0x7f, 0x28, 0x10, 0x6c, 0x10, 0x44, 0x1e, 0xc6, 0x13, 0xb3, 0x12, 0x18, 0x12, 0xc, 0x12, 0x4, 0x32, 0x60, 0x26, 0x30, 0x24, 0x18, 0x64, 0xc, 0x4c, 0x4 },
{ 0x89, 0x98, 0x30, 0x0, 0x1b, 0xfe, 0x8, 0x40, 0x0, 0x40, 0x0, 0x40, 0x67, 0xff, 0x30, 0x80, 0x10, 0x80, 0x0, 0x80, 0x9, 0xfe, 0x8, 0x2, 0x18, 0x2, 0x10, 0x2, 0x30, 0x6, 0x20, 0x4, 0x60, 0x3c },
{ 0x89, 0x99, 0x8, 0x0, 0x8, 0xfe, 0x28, 0x92, 0x28, 0x92, 0x3e, 0xfe, 0x68, 0x92, 0x48, 0x92, 0x8, 0xfe, 0x3e, 0x10, 0x9, 0xff, 0x8, 0x11, 0x8, 0x31, 0xe, 0x21, 0x38, 0x63, 0x60, 0xc2, 0x3, 0x8e },
{ 0x89, 0x9a, 0x0, 0x0, 0x3e, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x89, 0x9b, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x89, 0x9c, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x14, 0x94, 0x12, 0xa4, 0x17, 0xf4, 0x11, 0xc4, 0x12, 0xa4, 0x14, 0x94, 0x10, 0x84, 0x11, 0x4, 0x7f, 0xff, 0x3, 0x60, 0xe, 0x38, 0x38, 0xe },
{ 0x89, 0x9d, 0x4, 0xc0, 0xc, 0x60, 0x18, 0x20, 0x33, 0xfe, 0x64, 0x20, 0xc, 0x20, 0x18, 0x20, 0x30, 0x20, 0x73, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x89, 0x9e, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x20, 0x0, 0x20, 0xc0, 0x20, 0x60, 0x21, 0x30, 0x21, 0x10, 0x25, 0x0, 0x25, 0x4, 0x25, 0x6, 0x2d, 0x3, 0x69, 0x1, 0x49, 0x4, 0x41, 0x8c, 0x0, 0xf8 },
{ 0x89, 0x9f, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x7a, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x1a, 0x22, 0x73, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20 },
{ 0x89, 0xa0, 0x0, 0x0, 0x7d, 0xfe, 0x44, 0x20, 0x44, 0x20, 0x44, 0x20, 0x44, 0x20, 0x7c, 0x20, 0x45, 0xfe, 0x44, 0x20, 0x44, 0x20, 0x44, 0x20, 0x44, 0x20, 0x7c, 0x20, 0x0, 0x20, 0x3, 0xff, 0x0, 0x0 },
{ 0x89, 0xa1, 0x8, 0x48, 0x9, 0xfe, 0x8, 0x48, 0x7e, 0x48, 0xb, 0xff, 0x8, 0x20, 0x1d, 0xfe, 0x1b, 0x22, 0x19, 0x22, 0x29, 0xfe, 0x29, 0x22, 0x49, 0x22, 0x9, 0xfe, 0x8, 0x84, 0x9, 0x86, 0xb, 0x3 },
{ 0x89, 0xa2, 0x0, 0x40, 0x3f, 0x40, 0x20, 0x40, 0x20, 0x7f, 0x2a, 0xc1, 0x2a, 0x93, 0x25, 0x92, 0x24, 0x10, 0x24, 0x10, 0x24, 0x38, 0x2a, 0x28, 0x2a, 0x28, 0x20, 0x6c, 0x20, 0x44, 0x3e, 0xc6, 0x1, 0x83 },
{ 0x89, 0xa3, 0x0, 0x0, 0x3f, 0x7c, 0x20, 0x44, 0x20, 0x44, 0x2a, 0x44, 0x2a, 0x87, 0x24, 0x0, 0x24, 0xfe, 0x24, 0x42, 0x2a, 0x66, 0x2a, 0x2c, 0x20, 0x38, 0x20, 0x10, 0x3f, 0x38, 0x0, 0x6c, 0x1, 0xc7 },
{ 0x89, 0xa4, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x89, 0xa5, 0x2, 0x20, 0x6, 0x30, 0x1d, 0x1c, 0x73, 0x7, 0x2, 0x10, 0x7, 0xf8, 0x1c, 0xc, 0x0, 0x0, 0x7e, 0xfe, 0x22, 0x22, 0x12, 0x12, 0xe, 0xe, 0x1a, 0x3a, 0x72, 0xe2, 0x2, 0x2, 0xe, 0xe },
{ 0x89, 0xa6, 0x10, 0x20, 0x10, 0x40, 0x11, 0xfe, 0x7d, 0x2, 0x5, 0xaa, 0xd, 0x22, 0x9, 0xfa, 0x19, 0x72, 0x35, 0xaa, 0x79, 0x22, 0x15, 0x42, 0x13, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x7 },
{ 0x89, 0xa7, 0x11, 0x4, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x81, 0x4f, 0xf9, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0xf, 0xfe, 0x24, 0x92, 0x62, 0x4a, 0x40, 0x6 },
{ 0x89, 0xa8, 0x0, 0x10, 0x7e, 0x20, 0x40, 0xfc, 0x40, 0x84, 0x54, 0xfc, 0x54, 0x84, 0x48, 0xfc, 0x48, 0x80, 0x48, 0xff, 0x54, 0x80, 0x54, 0xfe, 0x40, 0x2, 0x41, 0x56, 0x7d, 0x52, 0x2, 0x6, 0x0, 0xc },
{ 0x89, 0xa9, 0x4, 0x10, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x89, 0xaa, 0x0, 0x0, 0x3f, 0xfe, 0x24, 0x12, 0x22, 0x22, 0x22, 0x22, 0x2f, 0xfa, 0x20, 0x82, 0x20, 0x82, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x89, 0xab, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0x8, 0x20, 0x3, 0xff, 0x62, 0x21, 0x32, 0x21, 0x12, 0x21, 0x2, 0x21, 0xa, 0x21, 0xb, 0xff, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20 },
{ 0x89, 0xac, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x44, 0x20, 0x28, 0x21, 0x11, 0x23, 0x29, 0x26, 0x4b, 0x24, 0x1a, 0x70, 0x28, 0x50, 0x48, 0xd8, 0x9, 0x8c, 0x1b, 0x6, 0x36, 0x3 },
{ 0x89, 0xad, 0x8, 0x20, 0x8, 0x20, 0x1b, 0xfe, 0x11, 0x4, 0x10, 0x88, 0x37, 0xff, 0x30, 0x0, 0x51, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x20, 0x12, 0x92, 0x12, 0x85, 0x14, 0x7c },
{ 0x89, 0xae, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x17, 0xfe, 0x11, 0x0, 0x11, 0x4, 0x12, 0x3e, 0x17, 0xe2, 0x10, 0x40, 0x33, 0xfc, 0x20, 0x40, 0x60, 0x40, 0xf, 0xff },
{ 0x89, 0xaf, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x11, 0x4, 0x58, 0x88, 0x57, 0xff, 0x54, 0x0, 0x51, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x20, 0x12, 0x92, 0x12, 0x85, 0x14, 0x7c },
{ 0x89, 0xb0, 0x0, 0x20, 0x3c, 0x20, 0x27, 0xfe, 0x25, 0x4, 0x24, 0x88, 0x3f, 0xff, 0x24, 0x0, 0x25, 0xfc, 0x25, 0x4, 0x3d, 0xfc, 0x25, 0x4, 0x25, 0xfc, 0x24, 0x22, 0x25, 0x51, 0x65, 0x42, 0x4d, 0x3e },
{ 0x89, 0xb1, 0x8, 0x0, 0x9, 0xfe, 0x8, 0x4, 0x7e, 0x48, 0x8, 0x30, 0x9, 0xfe, 0x1d, 0x22, 0x1b, 0x22, 0x29, 0xfe, 0x29, 0x22, 0x49, 0x22, 0x9, 0xfe, 0x9, 0x22, 0x9, 0x22, 0x9, 0x22, 0x9, 0x26 },
{ 0x89, 0xb2, 0x8, 0x20, 0x28, 0x20, 0x28, 0x20, 0x28, 0x20, 0x3e, 0x20, 0x69, 0xfe, 0x48, 0x20, 0x8, 0x20, 0x8, 0x20, 0xe, 0x20, 0x78, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0xb, 0xff, 0x8, 0x0 },
{ 0x89, 0xb3, 0x0, 0x0, 0x3f, 0xf8, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x1, 0x80, 0x3, 0x0, 0x6, 0x0, 0xc, 0x0, 0x18, 0x0, 0x10, 0x2, 0x30, 0x2, 0x20, 0x6, 0x30, 0x4, 0x1f, 0xfc, 0x0, 0x0 },
{ 0x89, 0xb4, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xff, 0x11, 0x10, 0x11, 0x50, 0x32, 0x48, 0x33, 0xfc, 0x56, 0x46, 0x1a, 0x45, 0x13, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x13, 0xfc, 0x10, 0x41, 0x10, 0x63, 0x10, 0x3e },
{ 0x89, 0xb5, 0x10, 0x0, 0x10, 0x3e, 0x3f, 0xa2, 0x24, 0x22, 0x44, 0x22, 0x4, 0x22, 0x7f, 0xa2, 0x4, 0x22, 0x24, 0x22, 0x27, 0xa2, 0x24, 0x22, 0x24, 0x22, 0x27, 0xae, 0x3c, 0x20, 0x60, 0x20, 0x0, 0x20 },
{ 0x89, 0xb6, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x17, 0xf4, 0x11, 0x44, 0x12, 0x24, 0x14, 0x14, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x80, 0x14, 0xc6, 0x14, 0x43, 0x34, 0x9, 0x26, 0x18, 0x63, 0xf0 },
{ 0x89, 0xb7, 0x0, 0x0, 0x31, 0xfc, 0x19, 0x4, 0x9, 0x4, 0x1, 0xfc, 0x61, 0x4, 0x31, 0x4, 0x11, 0xfc, 0x0, 0x0, 0xb, 0xfe, 0xa, 0x52, 0x1a, 0x52, 0x12, 0x52, 0x32, 0x52, 0x22, 0x52, 0x67, 0xff },
{ 0x89, 0xb8, 0x6, 0x6, 0x1c, 0x1c, 0x73, 0xf2, 0x11, 0x26, 0x10, 0x94, 0x7d, 0xfe, 0x10, 0x2, 0x19, 0xfe, 0x14, 0x2, 0x35, 0xfe, 0x30, 0x0, 0x50, 0x10, 0x51, 0x5a, 0x11, 0x4b, 0x13, 0x45, 0x12, 0x3c },
{ 0x89, 0xb9, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x89, 0xba, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xe0, 0x0, 0xb0, 0x0, 0x98, 0x0, 0x8c, 0x0, 0x84, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x89, 0xbb, 0x2, 0x40, 0x2, 0x40, 0x6, 0x40, 0x4, 0x42, 0xc, 0x46, 0x8, 0x5c, 0x18, 0x70, 0x38, 0x40, 0x68, 0x40, 0x8, 0x40, 0x8, 0x40, 0x8, 0x41, 0x8, 0x41, 0x8, 0x43, 0x8, 0x62, 0x8, 0x3e },
{ 0x89, 0xbc, 0x4, 0x0, 0x5, 0xfe, 0xd, 0x0, 0x9, 0x0, 0x19, 0x0, 0x11, 0xfc, 0x31, 0x44, 0x51, 0x44, 0x11, 0x6c, 0x11, 0x28, 0x11, 0x38, 0x13, 0x10, 0x12, 0x38, 0x16, 0x6c, 0x10, 0xc6, 0x11, 0x83 },
{ 0x89, 0xbd, 0x4, 0x0, 0x4, 0x0, 0xf, 0xff, 0x8, 0x4, 0x18, 0x4, 0x13, 0xc4, 0x32, 0x44, 0x52, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x13, 0xc4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x89, 0xbe, 0x9, 0x0, 0x9, 0x0, 0x9, 0x1e, 0x19, 0x12, 0x17, 0xd2, 0x31, 0x52, 0x31, 0x52, 0x51, 0x52, 0x11, 0x52, 0x11, 0x52, 0x11, 0x52, 0x13, 0x52, 0x12, 0x52, 0x12, 0xd2, 0x16, 0x9e, 0x15, 0x80 },
{ 0x89, 0xbf, 0x8, 0x0, 0x8, 0x0, 0xf, 0xff, 0x18, 0x90, 0x10, 0x90, 0x30, 0x90, 0x37, 0xfe, 0x54, 0x92, 0x14, 0x92, 0x14, 0x92, 0x14, 0x92, 0x14, 0x92, 0x14, 0x92, 0x14, 0x92, 0x17, 0xfe, 0x10, 0x0 },
{ 0x89, 0xc0, 0x8, 0x20, 0x8, 0x20, 0xb, 0xfe, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x37, 0xff, 0x50, 0x0, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x89, 0xc1, 0x8, 0x0, 0x8, 0x0, 0x8, 0x3e, 0x8, 0x22, 0x7f, 0x22, 0x9, 0x22, 0x9, 0x22, 0x9, 0x22, 0x9, 0x22, 0x9, 0x22, 0x19, 0x22, 0x11, 0x22, 0x13, 0x22, 0x32, 0x22, 0x22, 0x3e, 0x66, 0x0 },
{ 0x89, 0xc2, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x4, 0x0, 0x4, 0xf, 0xc4, 0x8, 0x44, 0x8, 0x44, 0x8, 0x44, 0x8, 0x44, 0x8, 0x44, 0xf, 0xc4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x1c },
{ 0x89, 0xc3, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x20, 0x7f, 0xff, 0x8, 0x0, 0x3f, 0x3e, 0x9, 0x22, 0x11, 0x22, 0x67, 0x3e },
{ 0x89, 0xc4, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x0, 0x7, 0xf8, 0xc, 0x10, 0x32, 0x20, 0x1, 0xc0, 0x7e, 0x3f },
{ 0x89, 0xc5, 0x10, 0x20, 0x10, 0x20, 0x11, 0xfe, 0x7d, 0x2, 0x14, 0x0, 0x14, 0xfc, 0x14, 0x40, 0x34, 0xa2, 0x25, 0x26, 0x28, 0x54, 0x78, 0x90, 0x9, 0x38, 0x14, 0x54, 0x14, 0x96, 0x21, 0x13, 0x40, 0x60 },
{ 0x89, 0xc6, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0xf, 0xf8, 0x1, 0x0, 0x6, 0x86, 0x38, 0xcc, 0x3, 0x58, 0xe, 0x60, 0x38, 0xf0, 0x3, 0x58, 0xe, 0x4c, 0x78, 0xc7, 0x3, 0x80 },
{ 0x89, 0xc7, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x1, 0x5f, 0xfd, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x10, 0x4, 0x6f, 0xfb, 0x2, 0x8, 0x1c, 0x38 },
{ 0x89, 0xc8, 0x6, 0x4, 0x1c, 0xc4, 0x68, 0x64, 0x8, 0x24, 0x8, 0x4, 0x7e, 0x4, 0x8, 0xc4, 0x8, 0x64, 0x1c, 0x24, 0x1a, 0x4, 0x28, 0x7, 0x28, 0x3c, 0x49, 0xe4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4 },
{ 0x89, 0xc9, 0x0, 0x0, 0x3, 0xde, 0x7a, 0x42, 0x4a, 0x42, 0x4a, 0x42, 0x4b, 0xde, 0x4a, 0x0, 0x7a, 0x3e, 0x4b, 0xd2, 0x4a, 0x16, 0x4a, 0x14, 0x4a, 0x1c, 0x7b, 0xc8, 0x2, 0x1c, 0x2, 0x36, 0x2, 0x63 },
{ 0x89, 0xca, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x89, 0xcb, 0x8, 0x0, 0x8, 0x3e, 0x7f, 0x22, 0x9, 0x22, 0x9, 0x22, 0x19, 0x22, 0x11, 0x22, 0x37, 0x3e, 0x60, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x89, 0xcc, 0x0, 0x40, 0x7f, 0x40, 0x2, 0x40, 0x3a, 0x7f, 0x2a, 0xc1, 0x3a, 0x93, 0x2, 0x92, 0x6, 0x10, 0x0, 0x10, 0x7f, 0xb8, 0x2, 0x28, 0x3a, 0x28, 0x2a, 0x2c, 0x3a, 0x64, 0x2, 0x46, 0x6, 0xc3 },
{ 0x89, 0xcd, 0x30, 0x0, 0x1b, 0xff, 0x8, 0x4, 0x0, 0x4, 0x1, 0xe4, 0x61, 0x24, 0x31, 0x24, 0x11, 0x24, 0x1, 0x24, 0x9, 0x24, 0x9, 0xe4, 0x18, 0x4, 0x10, 0x4, 0x30, 0x4, 0x20, 0x4, 0x60, 0x1c },
{ 0x89, 0xce, 0x0, 0x80, 0x0, 0x80, 0x0, 0x82, 0x8, 0x86, 0x8, 0x84, 0x8, 0x8c, 0x18, 0x98, 0x10, 0x90, 0x31, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x89, 0xcf, 0x0, 0x0, 0x7d, 0xff, 0x10, 0x4, 0x10, 0x4, 0x11, 0xe4, 0x11, 0x24, 0x7d, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0xe4, 0x10, 0x4, 0x1c, 0x4, 0x70, 0x4, 0x0, 0x4, 0x0, 0x1c },
{ 0x89, 0xd0, 0x8, 0x0, 0x8, 0xfc, 0x8, 0x84, 0x7e, 0xbc, 0x2, 0xa4, 0x6, 0xa4, 0x4, 0xa4, 0xd, 0xfe, 0x19, 0x2, 0x3d, 0x7a, 0x6b, 0x4a, 0x9, 0x4a, 0x9, 0x4a, 0x9, 0x7a, 0x9, 0x2, 0x9, 0x6 },
{ 0x89, 0xd1, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80, 0x0, 0x80 },
{ 0x89, 0xd2, 0x4, 0x20, 0x1c, 0x20, 0x73, 0xfe, 0x12, 0x2, 0x10, 0x0, 0x7d, 0xfc, 0x10, 0x40, 0x10, 0xa2, 0x39, 0x26, 0x34, 0x54, 0x30, 0x90, 0x53, 0x38, 0x50, 0x5c, 0x10, 0x96, 0x13, 0x13, 0x10, 0x60 },
{ 0x89, 0xd3, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x24, 0x90, 0x42, 0x8, 0x3f, 0xfe, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x82, 0x20, 0x82, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x3f, 0xfe },
{ 0x89, 0xd4, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x4, 0x40, 0x4, 0x40, 0x8, 0x46, 0x18, 0x5c, 0x28, 0x70, 0x48, 0x40, 0x8, 0x40, 0x8, 0x40, 0x8, 0x41, 0x8, 0x63, 0x8, 0x3e },
{ 0x89, 0xd5, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x8, 0xf, 0x88, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0xf, 0x88, 0x0, 0x8, 0x0, 0x8, 0x0, 0x38 },
{ 0x89, 0xd6, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x8, 0x0, 0x8, 0x3e, 0x7f, 0x22, 0x9, 0x22, 0x9, 0x22, 0x19, 0x22, 0x11, 0x22, 0x13, 0x22, 0x32, 0x22, 0x22, 0x3e, 0x6e, 0x0 },
{ 0x89, 0xd7, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x8, 0x0, 0xb, 0xff, 0x10, 0x4, 0x11, 0xe4, 0x31, 0x24, 0x51, 0x24, 0x11, 0x24, 0x11, 0xe4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x89, 0xd8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0xfe, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0x88, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80 },
{ 0x89, 0xd9, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x89, 0xda, 0x0, 0x0, 0x11, 0xde, 0x11, 0x42, 0x11, 0x42, 0x7d, 0x42, 0x55, 0xde, 0x55, 0x0, 0x55, 0x3e, 0x55, 0xd2, 0x7d, 0x16, 0x11, 0x14, 0x15, 0xdc, 0x15, 0x8, 0x3d, 0x1c, 0x65, 0x36, 0x1, 0x63 },
{ 0x89, 0xdb, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x92, 0x7e, 0x92, 0x0, 0xfe, 0x3c, 0x92, 0x0, 0x92, 0x0, 0xfe, 0x3c, 0x10, 0x1, 0xff, 0x0, 0x54, 0x3c, 0x54, 0x24, 0xd6, 0x24, 0x92, 0x25, 0x93, 0x3c, 0x10 },
{ 0x89, 0xdc, 0x0, 0x88, 0x0, 0x88, 0x7b, 0xff, 0x48, 0x88, 0x4b, 0xfe, 0x49, 0x24, 0x49, 0x24, 0x4f, 0xff, 0x49, 0x24, 0x49, 0x24, 0x4b, 0xfe, 0x78, 0x20, 0x0, 0x20, 0x7, 0xff, 0x0, 0x20, 0x0, 0x20 },
{ 0x89, 0xdd, 0x2, 0x40, 0x6, 0x46, 0x1c, 0x7c, 0x74, 0x40, 0x4, 0x42, 0x4, 0x3e, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x89, 0xde, 0x1, 0x0, 0x61, 0x0, 0x31, 0x1e, 0x17, 0xd2, 0x1, 0x52, 0x1, 0x52, 0x1, 0x52, 0x71, 0x52, 0x11, 0x52, 0x13, 0x52, 0x12, 0x52, 0x12, 0xd2, 0x16, 0x9e, 0x31, 0x80, 0x28, 0x0, 0x67, 0xff },
{ 0x89, 0xdf, 0x1, 0xfc, 0x31, 0x4, 0x19, 0x3c, 0x9, 0x24, 0x1, 0x24, 0x1, 0x24, 0x3, 0xfe, 0x72, 0x2, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x32, 0x6, 0x28, 0x0, 0x67, 0xff },
{ 0x89, 0xe0, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x0, 0x80, 0x1e, 0xbc, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x2, 0x3f, 0x7e, 0x20, 0x0, 0x3e, 0x7e, 0x20, 0x24, 0x3e, 0x18, 0x20, 0xe7 },
{ 0x89, 0xe1, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7f, 0xff, 0x52, 0x44, 0x52, 0x44, 0x52, 0x44, 0x52, 0x6c, 0x52, 0x28, 0x7e, 0x38, 0x10, 0x10, 0x14, 0x38, 0x14, 0x28, 0x1e, 0x6c, 0x32, 0xc6, 0x61, 0x83 },
{ 0x89, 0xe2, 0x8, 0xd4, 0x9, 0x96, 0xf, 0x12, 0x19, 0x10, 0x11, 0x10, 0x37, 0xff, 0x31, 0x10, 0x51, 0x12, 0x11, 0x12, 0x11, 0xd6, 0x17, 0x14, 0x11, 0x1c, 0x11, 0x9, 0x11, 0x1d, 0x11, 0x37, 0x17, 0x62 },
{ 0x89, 0xe3, 0x10, 0x54, 0x10, 0xd6, 0x13, 0x92, 0x10, 0x90, 0x54, 0x90, 0x57, 0xff, 0x54, 0x90, 0x54, 0x92, 0x54, 0x92, 0x54, 0xd6, 0x57, 0x94, 0x54, 0x9c, 0x7c, 0x89, 0x0, 0x9d, 0x0, 0x97, 0x3, 0xb2 },
{ 0x89, 0xe4, 0x1, 0xa0, 0x7, 0x2c, 0x3c, 0x26, 0x4, 0x22, 0x4, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x4, 0x22, 0x4, 0x36, 0x7, 0x94, 0x7c, 0x1c, 0x4, 0x8, 0x4, 0x1d, 0x4, 0x35, 0x4, 0x67, 0x1d, 0xc2 },
{ 0x89, 0xe5, 0x0, 0x0, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x50, 0x0, 0xd0, 0x1, 0x90, 0x3, 0x10, 0x6, 0x10, 0x1c, 0x10, 0x70, 0x10, 0x0, 0x70 },
{ 0x89, 0xe6, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x27, 0xf2, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x27, 0xf2, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x27, 0xf2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x89, 0xe7, 0x0, 0x10, 0x3f, 0x90, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0x3f, 0x90, 0x20, 0x90, 0x20, 0xb8, 0x20, 0xa8, 0x3f, 0xa8, 0x24, 0x28, 0x24, 0x6c, 0x24, 0x44, 0x24, 0x44, 0x3f, 0xc6, 0x0, 0x83 },
{ 0x89, 0xe8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0xd0, 0x1, 0x90, 0x3, 0x10, 0xe, 0x10, 0x78, 0x10, 0x0, 0x70 },
{ 0x89, 0xe9, 0x10, 0x54, 0x10, 0x96, 0x13, 0x92, 0x7c, 0x90, 0x54, 0x90, 0x57, 0xff, 0x54, 0x90, 0x54, 0x92, 0x7c, 0x92, 0x10, 0xd4, 0x13, 0x94, 0x14, 0x98, 0x14, 0x89, 0x3c, 0x8d, 0x64, 0x97, 0x3, 0xa2 },
{ 0x89, 0xea, 0x8, 0x0, 0x8, 0x7e, 0x7f, 0x42, 0x9, 0x42, 0x19, 0x42, 0x37, 0x7e, 0x60, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x89, 0xeb, 0x0, 0x22, 0x3f, 0x26, 0x12, 0x24, 0x12, 0x7f, 0x12, 0xc8, 0x13, 0x48, 0x12, 0x48, 0x7f, 0x7e, 0xa, 0x48, 0xa, 0x48, 0xa, 0x48, 0x1a, 0x7e, 0x12, 0x48, 0x32, 0x48, 0x62, 0x48, 0xe, 0x7f },
{ 0x89, 0xec, 0x8, 0x2a, 0x1c, 0x49, 0x15, 0xc9, 0x32, 0x48, 0x68, 0x48, 0x3d, 0xff, 0x24, 0x48, 0x3c, 0x49, 0x24, 0x49, 0x3c, 0x6a, 0x21, 0xca, 0x24, 0x4c, 0x24, 0x44, 0x2e, 0x45, 0x3a, 0x4b, 0x61, 0xd1 },
{ 0x89, 0xed, 0x8, 0x0, 0x7f, 0xbf, 0x8, 0xa1, 0x18, 0xa1, 0x33, 0xbf, 0x60, 0x0, 0xf, 0xfc, 0x8, 0x80, 0xf, 0xf8, 0x8, 0x80, 0xf, 0xf8, 0x8, 0x80, 0xf, 0xfe, 0x24, 0x92, 0x62, 0x4a, 0x40, 0x6 },
{ 0x89, 0xee, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x1c, 0x1c, 0x74, 0x17, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0xc, 0x10, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10 },
{ 0x89, 0xef, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x8, 0x6, 0x8, 0x4, 0x7c, 0xf, 0xc4, 0x38, 0x4 },
{ 0x89, 0xf0, 0x10, 0x0, 0x1e, 0xfe, 0x32, 0x22, 0x24, 0x22, 0x7f, 0x62, 0x29, 0xce, 0x29, 0x0, 0x3f, 0x28, 0x29, 0x28, 0x29, 0x7e, 0x3f, 0x48, 0x21, 0x8, 0x21, 0xff, 0x21, 0x8, 0x61, 0x8, 0x47, 0x8 },
{ 0x89, 0xf1, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x89, 0xf2, 0x10, 0x20, 0x10, 0x40, 0x13, 0xfe, 0x12, 0x22, 0x7e, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x90, 0x1c, 0x94, 0x70, 0x95, 0x1, 0x9f, 0x1, 0x10, 0x3, 0x11, 0xe, 0xf },
{ 0x89, 0xf3, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x20, 0x7d, 0xfe, 0x11, 0x52, 0x11, 0x52, 0x11, 0xfe, 0x10, 0x20, 0x13, 0xff, 0x1c, 0x50, 0x70, 0xd9, 0x1, 0x8a, 0x6, 0x8c, 0x0, 0xe6, 0x3, 0x83 },
{ 0x89, 0xf4, 0x0, 0x0, 0x7e, 0xfe, 0x4, 0x82, 0x8, 0x82, 0x10, 0xba, 0x3c, 0xaa, 0x4, 0xaa, 0x4, 0xaa, 0x24, 0xaa, 0x34, 0xba, 0x14, 0x82, 0x1c, 0x82, 0x8, 0xfe, 0x1c, 0x0, 0x37, 0x0, 0x61, 0xff },
{ 0x89, 0xf5, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x9, 0xfc, 0x2c, 0x24, 0x2a, 0x24, 0x2a, 0x24, 0x68, 0x24, 0x4b, 0xff, 0x8, 0x50, 0x8, 0x50, 0x8, 0x58, 0x8, 0xc8, 0x8, 0x8c, 0x9, 0x86, 0xb, 0x3 },
{ 0x89, 0xf6, 0x8, 0x0, 0xb, 0xfc, 0x8, 0x84, 0x8, 0xcc, 0x2c, 0x58, 0x2a, 0x30, 0x2a, 0x78, 0x68, 0xcc, 0x4b, 0xa7, 0x8, 0x20, 0x9, 0xfe, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0xb, 0xff, 0x8, 0x0 },
{ 0x89, 0xf7, 0x8, 0x80, 0x8, 0x80, 0x9, 0xfe, 0x9, 0x0, 0x2a, 0x0, 0x2c, 0xfc, 0x2a, 0xa4, 0x68, 0xa4, 0x48, 0xa4, 0xf, 0xff, 0x9, 0x44, 0x9, 0x44, 0x9, 0x44, 0x9, 0xff, 0x8, 0x8, 0x8, 0x38 },
{ 0x89, 0xf8, 0x10, 0x0, 0x13, 0xff, 0x12, 0x0, 0x12, 0x10, 0x52, 0x12, 0x5a, 0x52, 0x56, 0x52, 0x52, 0xd6, 0x12, 0x94, 0x12, 0x10, 0x12, 0x38, 0x12, 0x28, 0x12, 0x6c, 0x14, 0x44, 0x10, 0xc6, 0x11, 0x83 },
{ 0x89, 0xf9, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x20, 0x59, 0xfe, 0x55, 0x52, 0x55, 0x52, 0x51, 0xfe, 0x10, 0x20, 0x13, 0xff, 0x10, 0x50, 0x10, 0xd9, 0x11, 0x8a, 0x16, 0x8c, 0x10, 0xe6, 0x13, 0x83 },
{ 0x89, 0xfa, 0x0, 0x2c, 0x0, 0x26, 0x0, 0x22, 0x7f, 0xff, 0x0, 0x20, 0x9, 0x20, 0x9, 0x32, 0x9, 0x12, 0x3f, 0xd6, 0x9, 0x14, 0x9, 0x1c, 0x19, 0x8, 0x11, 0x1d, 0x31, 0x35, 0x60, 0xe7, 0x3, 0x82 },
{ 0x89, 0xfb, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x7c, 0x84, 0x10, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x1d, 0xfe, 0x70, 0x22, 0x10, 0x22, 0x10, 0x62, 0x10, 0x42, 0x10, 0xc6, 0x11, 0x84, 0x33, 0x1c },
{ 0x89, 0xfc, 0x0, 0x40, 0x0, 0x40, 0x7e, 0x40, 0x2, 0x7f, 0x2, 0x44, 0x2, 0xc4, 0x3e, 0xa4, 0x21, 0xac, 0x20, 0x28, 0x20, 0x38, 0x20, 0x10, 0x22, 0x38, 0x32, 0x28, 0x1e, 0x6c, 0x0, 0xc6, 0x1, 0x83 },
{ 0x8a, 0x40, 0x4, 0x4, 0x8, 0x24, 0x3f, 0xb4, 0x24, 0x94, 0x24, 0x84, 0x3f, 0xa4, 0x24, 0xb4, 0x24, 0x94, 0x3f, 0x87, 0x12, 0x3c, 0x12, 0x84, 0x12, 0xa4, 0x13, 0xe4, 0x32, 0x1, 0x23, 0x3, 0x41, 0xfe },
{ 0x8a, 0x41, 0x0, 0x80, 0x0, 0x80, 0x3d, 0xff, 0x25, 0x0, 0x26, 0x0, 0x24, 0xfc, 0x24, 0xa4, 0x3c, 0xa4, 0x24, 0xa4, 0x27, 0xff, 0x25, 0x44, 0x25, 0x44, 0x3d, 0x44, 0x1, 0xff, 0x0, 0x8, 0x0, 0x38 },
{ 0x8a, 0x42, 0x10, 0x14, 0x10, 0x12, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x10, 0x11, 0x50, 0x39, 0x52, 0x35, 0x52, 0x33, 0xf6, 0x51, 0x54, 0x51, 0x5c, 0x11, 0x48, 0x11, 0x5d, 0x12, 0x35, 0x10, 0x67, 0x11, 0xc2 },
{ 0x8a, 0x43, 0x1, 0x0, 0x31, 0x0, 0x1b, 0xfe, 0xa, 0x0, 0x6, 0x0, 0x61, 0xfc, 0x31, 0x24, 0x11, 0x24, 0x1, 0x24, 0x7, 0xff, 0xa, 0x44, 0xa, 0x44, 0x1a, 0x44, 0x13, 0xff, 0x30, 0x8, 0x60, 0x38 },
{ 0x8a, 0x44, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x40, 0x10, 0x42, 0x12, 0x46, 0x12, 0x4c, 0x16, 0x48, 0x14, 0x40, 0x10, 0xe0, 0x30, 0xa0, 0x21, 0xb0, 0x21, 0x10, 0x63, 0x18, 0x6, 0xc, 0x1c, 0x7 },
{ 0x8a, 0x45, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x20, 0x6, 0x30, 0x1c, 0x1c, 0x74, 0x17, 0x4, 0x10, 0x4, 0x10, 0xc, 0x10, 0x18, 0x10 },
{ 0x8a, 0x46, 0x10, 0x40, 0x10, 0x46, 0x1f, 0x7c, 0x10, 0x40, 0x10, 0x41, 0x10, 0x43, 0x1f, 0x7e, 0x70, 0x80, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8a, 0x47, 0x8, 0x20, 0x18, 0x70, 0x10, 0x58, 0x64, 0xcc, 0x2d, 0x86, 0x1b, 0x3, 0x10, 0xfc, 0x24, 0x0, 0x7c, 0x0, 0x15, 0xfe, 0x10, 0x40, 0x54, 0x40, 0x54, 0xc4, 0x54, 0x84, 0x10, 0xbe, 0x11, 0xe2 },
{ 0x8a, 0x48, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x74, 0x17, 0x4, 0x10, 0x4, 0x10, 0xc, 0x10, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10 },
{ 0x8a, 0x49, 0x1c, 0x7e, 0x24, 0x12, 0x7f, 0x32, 0x29, 0x66, 0x3f, 0x28, 0x29, 0x3e, 0x3f, 0x48, 0x21, 0xff, 0x67, 0x8, 0x40, 0x88, 0x3f, 0xfe, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x84, 0x3, 0xfe, 0x7e, 0x2 },
{ 0x8a, 0x4a, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x2f, 0xf2, 0x22, 0x42, 0x22, 0x42, 0x2f, 0xfa, 0x22, 0x42, 0x22, 0x42, 0x26, 0x42, 0x2c, 0x42, 0x20, 0xe },
{ 0x8a, 0x4b, 0x1, 0x10, 0x3d, 0x13, 0x25, 0xde, 0x25, 0x10, 0x25, 0x10, 0x29, 0x11, 0x29, 0xcf, 0x2b, 0x10, 0x24, 0x20, 0x25, 0xfe, 0x25, 0x2, 0x25, 0x2, 0x2d, 0xfe, 0x21, 0x2, 0x21, 0x2, 0x21, 0xfe },
{ 0x8a, 0x4c, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x8a, 0x4d, 0x4, 0x0, 0x24, 0xbc, 0x24, 0xa4, 0x3f, 0xa4, 0x0, 0x24, 0x7f, 0xe4, 0x0, 0x24, 0x3f, 0xa4, 0x20, 0xa4, 0x20, 0xa4, 0x3f, 0xa4, 0x11, 0x24, 0x11, 0x24, 0xb, 0xa5, 0x1e, 0x65, 0x70, 0xc3 },
{ 0x8a, 0x4e, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x7f, 0xc8, 0x8, 0x3f, 0x18, 0x9, 0x31, 0x9, 0x1b, 0x9, 0x6, 0x9, 0xc, 0x89, 0x19, 0x99, 0x63, 0x11, 0x6, 0x13, 0xd, 0x32, 0x18, 0xa2, 0x60, 0x66 },
{ 0x8a, 0x4f, 0x8, 0x20, 0x8, 0x20, 0xf, 0xa0, 0x8, 0xa0, 0x18, 0xa0, 0x10, 0xb8, 0x30, 0xac, 0x69, 0xa6, 0x5, 0x23, 0x3, 0x21, 0x2, 0x20, 0x6, 0x20, 0xc, 0x20, 0x18, 0x20, 0x30, 0x20, 0x60, 0x20 },
{ 0x8a, 0x50, 0x0, 0x20, 0x0, 0x20, 0x7c, 0x20, 0x47, 0xff, 0x44, 0x40, 0x44, 0x48, 0x44, 0x88, 0x45, 0x9a, 0x44, 0xd2, 0x44, 0x36, 0x44, 0x64, 0x7c, 0xcc, 0x3, 0x98, 0x0, 0x34, 0x0, 0xe6, 0x7, 0x83 },
{ 0x8a, 0x51, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8a, 0x52, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x0, 0x0, 0x3f, 0xff, 0x20, 0x0, 0x20, 0x40, 0x27, 0xfc, 0x20, 0x40, 0x2f, 0xfe, 0x20, 0x0, 0x20, 0x40, 0x67, 0xfc, 0x40, 0x40, 0x5f, 0xff, 0x0, 0x0 },
{ 0x8a, 0x53, 0x10, 0x0, 0x13, 0xbe, 0x12, 0x94, 0x12, 0x94, 0x53, 0x94, 0x5a, 0x94, 0x56, 0x94, 0x53, 0xbf, 0x12, 0x4, 0x12, 0x4, 0x12, 0x8c, 0x12, 0x8c, 0x12, 0xd4, 0x13, 0x55, 0x16, 0x25, 0x10, 0x43 },
{ 0x8a, 0x54, 0x10, 0x0, 0x13, 0xbe, 0x12, 0x94, 0x12, 0x94, 0x7f, 0x94, 0x12, 0x94, 0x12, 0x94, 0x3b, 0xbf, 0x36, 0x4, 0x32, 0x4, 0x52, 0x8c, 0x12, 0x8c, 0x12, 0xd4, 0x13, 0x55, 0x16, 0x25, 0x10, 0x43 },
{ 0x8a, 0x55, 0x0, 0x0, 0x33, 0xff, 0x1a, 0x0, 0xa, 0x10, 0x2, 0xfe, 0x62, 0x10, 0x32, 0x10, 0x13, 0xff, 0x2, 0x0, 0x2, 0x10, 0x12, 0xfe, 0x16, 0x10, 0x34, 0x10, 0x2c, 0x10, 0x61, 0xff, 0x0, 0x0 },
{ 0x8a, 0x56, 0x0, 0xfc, 0x7e, 0x84, 0x8, 0x84, 0x8, 0xfc, 0x18, 0x84, 0x10, 0x84, 0x1e, 0xfc, 0x32, 0x0, 0x33, 0xff, 0x52, 0x4, 0x13, 0xff, 0x12, 0x44, 0x12, 0x24, 0x1e, 0x24, 0x0, 0x4, 0x0, 0x1c },
{ 0x8a, 0x57, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x8, 0x8, 0x4, 0x3f, 0xfa, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x7f, 0xff },
{ 0x8a, 0x58, 0x9, 0x0, 0x19, 0x1e, 0x17, 0xe0, 0x31, 0x0, 0x61, 0x0, 0x7, 0xe0, 0x8, 0x1f, 0x19, 0x4, 0x31, 0x4, 0x77, 0xe4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0xe4, 0x17, 0x4, 0x10, 0x1c },
{ 0x8a, 0x59, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x7e, 0xff, 0x0, 0x20, 0x3c, 0x60, 0x0, 0xc4, 0x0, 0x6c, 0x3c, 0x18, 0x0, 0x32, 0x0, 0x66, 0x3c, 0xcc, 0x24, 0x18, 0x24, 0x34, 0x24, 0x66, 0x3c, 0xc3 },
{ 0x8a, 0x5a, 0x10, 0x10, 0x38, 0x92, 0x2c, 0x92, 0x66, 0xfe, 0x40, 0x0, 0x7d, 0xff, 0x10, 0x0, 0x10, 0xfe, 0x7c, 0x82, 0x10, 0x82, 0x54, 0xfe, 0x54, 0x44, 0x50, 0x6c, 0x1c, 0x28, 0x31, 0xff, 0x60, 0x0 },
{ 0x8a, 0x5b, 0x0, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x2e, 0xff, 0x2a, 0x10, 0x2a, 0x30, 0x7f, 0x64, 0x41, 0x2c, 0x3e, 0x18, 0x22, 0x32, 0x3e, 0x66, 0x22, 0xcc, 0x3e, 0x18, 0x22, 0x34, 0x22, 0x66, 0x26, 0xc3 },
{ 0x8a, 0x5c, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x22, 0xa, 0x22, 0x3, 0xfe, 0x62, 0x22, 0x32, 0x22, 0x12, 0x22, 0x3, 0xfe, 0x8, 0x20, 0x18, 0x20, 0x13, 0xfe, 0x30, 0x20, 0x20, 0x20, 0x67, 0xff, 0x0, 0x0 },
{ 0x8a, 0x5d, 0x8, 0x3c, 0x7f, 0xa4, 0x8, 0x47, 0x7f, 0xbc, 0x29, 0x24, 0x3f, 0x18, 0x20, 0x34, 0x4f, 0xe3, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x90, 0x1f, 0xfc, 0x68, 0xb, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8a, 0x5e, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x7e, 0x10, 0x52, 0x10, 0x52, 0x10, 0x53, 0xff, 0x52, 0x0, 0x7e, 0x10, 0x10, 0x10, 0x14, 0xfe, 0x14, 0x10, 0x1e, 0x10, 0x32, 0x10, 0x61, 0xff, 0x0, 0x0 },
{ 0x8a, 0x5f, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x0, 0x10, 0x0, 0x7d, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x1d, 0x4, 0x71, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0x0, 0x0 },
{ 0x8a, 0x60, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x7f, 0xff, 0x8, 0x20, 0x8, 0x20, 0x19, 0xfe, 0x1d, 0x22, 0x1b, 0x22, 0x29, 0x22, 0x29, 0x22, 0x49, 0x22, 0x9, 0x2e, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20 },
{ 0x8a, 0x61, 0x10, 0x0, 0x11, 0xff, 0x11, 0x0, 0x7d, 0x0, 0x55, 0xff, 0x55, 0x20, 0x55, 0x20, 0x55, 0x3e, 0x7d, 0x22, 0x11, 0x22, 0x15, 0x22, 0x1d, 0x22, 0x37, 0x62, 0x62, 0x46, 0x6, 0xc4, 0x1, 0x9c },
{ 0x8a, 0x62, 0x10, 0x40, 0x38, 0x40, 0x2c, 0x40, 0x64, 0xfe, 0x40, 0x82, 0x7d, 0x82, 0x10, 0x42, 0x10, 0x42, 0x7c, 0xd2, 0x10, 0x92, 0x54, 0xfa, 0x55, 0x8a, 0x50, 0x2, 0x1c, 0x6, 0x30, 0x4, 0x60, 0x1c },
{ 0x8a, 0x63, 0x4, 0x2, 0x3f, 0x92, 0x4, 0x92, 0x7f, 0xd2, 0x4, 0x92, 0x3f, 0x92, 0x4, 0x12, 0x3f, 0x92, 0x4, 0x12, 0x7f, 0xd2, 0x24, 0x92, 0x3f, 0x82, 0x24, 0x82, 0x3f, 0x82, 0x0, 0x2, 0x7f, 0xce },
{ 0x8a, 0x64, 0x1, 0x8, 0x1, 0x8, 0x77, 0xfe, 0x51, 0x8, 0x51, 0x8, 0x51, 0x8, 0x5f, 0xff, 0x52, 0x94, 0x52, 0xd4, 0x5a, 0xb6, 0x7a, 0xb5, 0xa, 0xd5, 0x12, 0x94, 0x4, 0xa4, 0x4, 0xa4, 0x9, 0xcc },
{ 0x8a, 0x65, 0x2, 0x0, 0x2, 0x0, 0x7, 0xf0, 0xc, 0x10, 0x1e, 0x30, 0x73, 0x60, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8a, 0x66, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x0, 0x3f, 0xde, 0x20, 0x12, 0x2f, 0x92, 0x28, 0x94, 0x2f, 0x94, 0x20, 0x12, 0x3f, 0x92, 0x21, 0x12, 0x63, 0xd2, 0x5e, 0x16, 0x42, 0x10, 0xe, 0x10 },
{ 0x8a, 0x67, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x7d, 0x0, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x1d, 0x30, 0x71, 0x24, 0x11, 0x24, 0x11, 0x26, 0x11, 0x62, 0x13, 0x42, 0x12, 0x4f, 0x36, 0xf9 },
{ 0x8a, 0x68, 0x12, 0x42, 0x13, 0x66, 0x11, 0x24, 0x17, 0xff, 0x7c, 0x1, 0x15, 0xfd, 0x11, 0x4, 0x11, 0xfc, 0x19, 0x4, 0x71, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x90, 0x10, 0x91, 0x11, 0x93, 0x37, 0xe },
{ 0x8a, 0x69, 0x10, 0x40, 0x10, 0x40, 0x10, 0xfc, 0x7c, 0x84, 0x11, 0xcc, 0x13, 0x58, 0x38, 0x30, 0x34, 0x78, 0x30, 0xcc, 0x53, 0x87, 0x50, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0xfc },
{ 0x8a, 0x6a, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7f, 0xff, 0x8, 0x20, 0x8, 0x60, 0x18, 0xc4, 0x1c, 0x6c, 0x1a, 0x18, 0x28, 0x32, 0x28, 0x66, 0x49, 0xcc, 0x8, 0x18, 0x8, 0x34, 0x8, 0x66, 0x9, 0xc3 },
{ 0x8a, 0x6b, 0x8, 0x0, 0x8, 0x3c, 0x7f, 0x24, 0x8, 0x24, 0x8, 0x24, 0x3e, 0x47, 0x0, 0x0, 0x7f, 0x7e, 0x41, 0x22, 0x5d, 0x26, 0x14, 0x24, 0x14, 0x2c, 0x35, 0x18, 0x26, 0x3c, 0x6c, 0x66, 0x40, 0xc3 },
{ 0x8a, 0x6c, 0x4, 0x48, 0x47, 0xff, 0x28, 0x48, 0x10, 0x90, 0x11, 0xff, 0x2b, 0x10, 0x4d, 0xfe, 0x9, 0x10, 0x19, 0xfe, 0x29, 0x10, 0x49, 0xff, 0x8, 0x0, 0xb, 0xfe, 0x8, 0x4c, 0x18, 0x30, 0x73, 0xcf },
{ 0x8a, 0x6d, 0x0, 0x10, 0x0, 0x10, 0x7e, 0xff, 0x8, 0x91, 0x8, 0xb5, 0x18, 0x28, 0x10, 0x7f, 0x1e, 0xc8, 0x33, 0x48, 0x32, 0x7e, 0x52, 0x48, 0x12, 0x48, 0x12, 0x7e, 0x12, 0x48, 0x1e, 0x48, 0x0, 0x7f },
{ 0x8a, 0x6e, 0x4, 0x44, 0x1b, 0xff, 0x70, 0x44, 0x10, 0x90, 0x11, 0xff, 0x7f, 0x10, 0x11, 0xfe, 0x39, 0x10, 0x35, 0xfe, 0x35, 0x10, 0x51, 0xff, 0x50, 0x0, 0x13, 0xfe, 0x10, 0x84, 0x10, 0x78, 0x13, 0x87 },
{ 0x8a, 0x6f, 0x11, 0x4, 0x19, 0x8c, 0x8, 0x88, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x20, 0x6, 0x21, 0x1c, 0x33, 0x70, 0x1e },
{ 0x8a, 0x70, 0x2, 0x0, 0x7, 0xf0, 0xc, 0x20, 0x18, 0x40, 0x6f, 0xfc, 0x8, 0x84, 0x8, 0x84, 0xf, 0xfc, 0x8, 0x84, 0x8, 0x84, 0xf, 0xfc, 0x8, 0x4, 0x18, 0x4, 0x10, 0x4, 0x30, 0x4, 0x60, 0x1c },
{ 0x8a, 0x71, 0x4, 0x10, 0x4, 0x10, 0x3f, 0x7e, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0xa, 0x28, 0x2b, 0x6a, 0x2a, 0xaa, 0x6a, 0xab, 0x4a, 0x29, 0xa, 0x28, 0x1a, 0x68, 0x12, 0x48, 0x36, 0xd8 },
{ 0x8a, 0x72, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x9, 0xff, 0x3e, 0x44, 0x2a, 0xc6, 0x2b, 0x83, 0x3e, 0x44, 0x2a, 0x6c, 0x2a, 0x28, 0x3e, 0x38, 0x8, 0x10, 0x7f, 0x38, 0x8, 0x6c, 0x8, 0xc6, 0x9, 0x83 },
{ 0x8a, 0x73, 0x4, 0x0, 0x4, 0x1e, 0x7f, 0xd2, 0x0, 0x12, 0x3f, 0x92, 0x20, 0x94, 0x3f, 0x94, 0x0, 0x12, 0x7f, 0x92, 0x3, 0x12, 0xc, 0x12, 0x7, 0xd2, 0x7c, 0x12, 0x4, 0x16, 0x4, 0x10, 0x1c, 0x10 },
{ 0x8a, 0x74, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x2, 0x23, 0xe2, 0x26, 0x42, 0x21, 0x82, 0x23, 0x62, 0x2c, 0x1a, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe2, 0x20, 0xe },
{ 0x8a, 0x75, 0x0, 0x0, 0x3d, 0xfe, 0x24, 0x0, 0x24, 0xfc, 0x24, 0x84, 0x28, 0xfc, 0x28, 0x0, 0x25, 0xfe, 0x25, 0x52, 0x25, 0x52, 0x25, 0x8e, 0x25, 0x2, 0x2d, 0x7a, 0x21, 0x22, 0x21, 0x22, 0x21, 0x26 },
{ 0x8a, 0x76, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8a, 0x77, 0x11, 0x4, 0x19, 0x8c, 0x8, 0x88, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0xf, 0xf8, 0x0, 0x30, 0x0, 0x40, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8a, 0x78, 0x0, 0x18, 0x0, 0xf0, 0xf, 0x80, 0x8, 0x0, 0xf, 0xfe, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0 },
{ 0x8a, 0x79, 0x0, 0x80, 0x31, 0x6, 0x1b, 0xec, 0x2, 0x20, 0x2, 0x20, 0x3, 0xe0, 0x2, 0x20, 0x1a, 0x2c, 0x33, 0xe6, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8a, 0x7a, 0x8, 0x0, 0x8, 0xff, 0x7f, 0x10, 0x41, 0x7e, 0x51, 0x42, 0x1e, 0x42, 0x22, 0x7e, 0x54, 0x42, 0x8, 0x42, 0x14, 0x7e, 0x63, 0x42, 0x3e, 0x42, 0x22, 0x7e, 0x22, 0x24, 0x3e, 0x66, 0x0, 0xc3 },
{ 0x8a, 0x7b, 0x0, 0x0, 0x77, 0x7f, 0x55, 0x8, 0x55, 0x3e, 0x77, 0x22, 0x0, 0x22, 0x3e, 0x3e, 0x0, 0x22, 0x7f, 0x22, 0x8, 0x3e, 0x10, 0x22, 0x3e, 0x22, 0x2, 0x3e, 0x2, 0x14, 0x6, 0x36, 0x1c, 0x63 },
{ 0x8a, 0x7c, 0x10, 0x84, 0x10, 0x84, 0x13, 0xe4, 0x10, 0x84, 0x78, 0x84, 0x17, 0xf4, 0x10, 0x6, 0x10, 0x85, 0x18, 0x85, 0x73, 0xe4, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0xf4, 0x17, 0x84, 0x30, 0x4 },
{ 0x8a, 0x7d, 0x8, 0x10, 0x8, 0x10, 0x1f, 0xbf, 0x24, 0x28, 0x42, 0x44, 0x2, 0x84, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x4, 0x30, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8a, 0x7e, 0x10, 0x0, 0x13, 0xc0, 0x12, 0xbe, 0x7e, 0x92, 0x13, 0xd6, 0x12, 0x5c, 0x1b, 0xc8, 0x36, 0x9c, 0x32, 0xb6, 0x33, 0xc3, 0x50, 0x20, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x0 },
{ 0x8a, 0x80, 0x10, 0x0, 0x13, 0xff, 0x10, 0x0, 0x7d, 0xfc, 0x11, 0x24, 0x11, 0xfc, 0x31, 0x24, 0x3b, 0xff, 0x34, 0x0, 0x51, 0xfc, 0x51, 0x24, 0x11, 0xfc, 0x11, 0x24, 0x11, 0xfc, 0x10, 0x0, 0x13, 0xff },
{ 0x8a, 0x81, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x7e, 0x2, 0x13, 0xfe, 0x12, 0x0, 0x3a, 0x1c, 0x36, 0xf0, 0x32, 0x20, 0x53, 0xfe, 0x52, 0x20, 0x13, 0xff, 0x12, 0x20, 0x12, 0x21, 0x14, 0x33, 0x10, 0x1e },
{ 0x8a, 0x82, 0x20, 0x28, 0x3c, 0xe8, 0x27, 0x89, 0x48, 0xa9, 0x7c, 0xab, 0x57, 0xea, 0x54, 0xaa, 0x7c, 0x88, 0x55, 0xc8, 0x56, 0xa8, 0x7c, 0x9c, 0x0, 0x94, 0x0, 0x94, 0x54, 0x96, 0x54, 0xb2, 0x40, 0xa3 },
{ 0x8a, 0x83, 0x0, 0x60, 0x31, 0xce, 0x19, 0x2, 0x9, 0x2, 0x1, 0xce, 0x61, 0x2, 0x31, 0x2, 0x11, 0xfe, 0x0, 0x80, 0x9, 0xff, 0xb, 0x1, 0x1e, 0x5, 0x11, 0x55, 0x31, 0x53, 0x22, 0x2, 0x60, 0xe },
{ 0x8a, 0x84, 0x4, 0x2, 0x4, 0x12, 0x7f, 0xd2, 0x40, 0x52, 0x44, 0x52, 0x3f, 0x92, 0x4, 0x12, 0x3f, 0x92, 0x4, 0x12, 0x7f, 0xd2, 0x0, 0x12, 0x3f, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0x8e },
{ 0x8a, 0x85, 0x1, 0xfc, 0x1, 0x4, 0x79, 0x4, 0x49, 0xfc, 0x49, 0x4, 0x49, 0x4, 0x49, 0xfc, 0x48, 0x80, 0x48, 0xff, 0x49, 0x81, 0x7b, 0x19, 0x7, 0xf1, 0x1, 0x1, 0x1, 0xb, 0x0, 0xfa, 0x0, 0x6 },
{ 0x8a, 0x86, 0x10, 0x20, 0x10, 0x70, 0x10, 0x50, 0x18, 0xd8, 0x55, 0x8c, 0x53, 0x6, 0x56, 0x3, 0x51, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc },
{ 0x8a, 0x87, 0x8, 0x6, 0x8, 0x1c, 0x9, 0xf0, 0x8, 0x10, 0x7e, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x10, 0xe, 0x10, 0x78, 0x10, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0x82, 0x38, 0xfe },
{ 0x8a, 0x88, 0x0, 0x6, 0x30, 0x3c, 0x1b, 0xe0, 0x8, 0x20, 0x0, 0x20, 0x60, 0x20, 0x37, 0xff, 0x10, 0x20, 0x0, 0x20, 0x8, 0x20, 0xb, 0xfe, 0x1a, 0x2, 0x12, 0x2, 0x32, 0x2, 0x22, 0x2, 0x63, 0xfe },
{ 0x8a, 0x89, 0x31, 0xfc, 0x19, 0x4, 0x9, 0x4, 0x1, 0xfc, 0x1, 0x4, 0x61, 0x4, 0x31, 0xfc, 0x10, 0x80, 0x0, 0xff, 0x9, 0x81, 0xb, 0x19, 0x1f, 0xf1, 0x11, 0x1, 0x31, 0xb, 0x20, 0xfa, 0x60, 0x6 },
{ 0x8a, 0x8a, 0x31, 0xfc, 0x19, 0x4, 0x9, 0x3c, 0x1, 0x24, 0x1, 0x24, 0x67, 0xff, 0x34, 0x1, 0x14, 0x1, 0x1, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x19, 0x4, 0x11, 0xfc, 0x31, 0x4, 0x21, 0x4, 0x61, 0x1c },
{ 0x8a, 0x8b, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x0, 0xf, 0xfe, 0x18, 0x2, 0x6f, 0x82, 0x8, 0x26, 0x7, 0xe4, 0x0, 0x1c },
{ 0x8a, 0x8c, 0x10, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x7c, 0xfc, 0x4, 0x84, 0xc, 0x84, 0x8, 0xfc, 0x1a, 0x40, 0x34, 0x7f, 0x58, 0xc1, 0x15, 0x99, 0x12, 0xf1, 0x10, 0x81, 0x10, 0x8b, 0x10, 0x7a, 0x10, 0x6 },
{ 0x8a, 0x8d, 0x8, 0x10, 0x8, 0x10, 0x7f, 0xff, 0x8, 0x81, 0x3e, 0x91, 0x2a, 0x7e, 0x2a, 0x10, 0x3e, 0x7e, 0x2a, 0x10, 0x2a, 0xff, 0x3e, 0x0, 0x8, 0x7e, 0x7f, 0x42, 0x8, 0x42, 0x8, 0x42, 0x8, 0x7e },
{ 0x8a, 0x8e, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8a, 0x8f, 0x20, 0x0, 0x3d, 0xe0, 0x25, 0x5e, 0x49, 0x4a, 0x7d, 0xea, 0x55, 0x2e, 0x55, 0xe4, 0x7d, 0x4e, 0x55, 0x5a, 0x55, 0xe3, 0x7c, 0x10, 0x0, 0xfe, 0x55, 0x10, 0x54, 0x10, 0x41, 0xff, 0x0, 0x0 },
{ 0x8a, 0x90, 0x0, 0x20, 0x0, 0x20, 0x78, 0x20, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x4b, 0xff, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x78, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x8a, 0x91, 0x10, 0x88, 0x10, 0x88, 0x13, 0xff, 0x7c, 0x88, 0x10, 0x88, 0x10, 0x50, 0x38, 0xd0, 0x34, 0x93, 0x31, 0x96, 0x53, 0x9c, 0x56, 0x90, 0x10, 0x90, 0x10, 0x90, 0x10, 0x91, 0x10, 0x93, 0x10, 0x8e },
{ 0x8a, 0x92, 0x10, 0x88, 0x10, 0x88, 0x17, 0xff, 0x78, 0x88, 0x13, 0xfe, 0x11, 0x24, 0x39, 0x24, 0x37, 0xff, 0x31, 0x24, 0x51, 0x24, 0x53, 0xfe, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x8a, 0x93, 0x22, 0x20, 0x22, 0x20, 0x7f, 0x20, 0x22, 0x7e, 0x22, 0x42, 0x3e, 0xfa, 0x8, 0xa, 0x7f, 0xa, 0x49, 0x7a, 0x49, 0x46, 0x7f, 0x44, 0x8, 0x5c, 0x7f, 0x40, 0x8, 0x41, 0x8, 0x63, 0x8, 0x3e },
{ 0x8a, 0x94, 0x10, 0x20, 0x11, 0x20, 0x11, 0x20, 0x7d, 0x20, 0x13, 0xfe, 0x1a, 0x20, 0x34, 0x20, 0x30, 0x20, 0x37, 0xff, 0x50, 0xa8, 0x50, 0xa8, 0x11, 0xac, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0x20 },
{ 0x8a, 0x95, 0x4, 0x80, 0xd, 0xe, 0x3b, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x3b, 0xee, 0x0, 0x0, 0x2, 0x40, 0x2, 0x40, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x8a, 0x96, 0x0, 0x80, 0x3f, 0xfe, 0x24, 0x8a, 0x7b, 0xef, 0x0, 0x80, 0x7f, 0xff, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x3f, 0xfe, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x81, 0x0, 0x7f },
{ 0x8a, 0x97, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x14, 0x20, 0x22, 0x37, 0xff, 0x10, 0x20, 0x43, 0xfe, 0x62, 0x22, 0x23, 0xfe, 0x2, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x32, 0x22, 0x22, 0x22, 0x62, 0x26 },
{ 0x8a, 0x98, 0x2, 0x40, 0x6, 0x60, 0xc, 0x38, 0x3b, 0x6e, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x7b, 0xef, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8a, 0x99, 0x10, 0x84, 0x38, 0x48, 0x2f, 0xff, 0x64, 0x50, 0x41, 0xfe, 0x7c, 0x52, 0x10, 0x52, 0x13, 0xff, 0x7c, 0x52, 0x10, 0x52, 0x55, 0xfe, 0x54, 0x58, 0x50, 0xd4, 0x1d, 0x56, 0x72, 0x53, 0x0, 0x50 },
{ 0x8a, 0x9a, 0x0, 0x20, 0x1, 0x20, 0x79, 0x3e, 0x49, 0x20, 0x49, 0x20, 0x4f, 0xff, 0x4a, 0x2, 0x4a, 0xaa, 0x4a, 0x22, 0x4a, 0xfa, 0x4a, 0x22, 0x7a, 0x72, 0x2, 0xaa, 0x2, 0x22, 0x2, 0x2, 0x3, 0xfe },
{ 0x8a, 0x9b, 0x0, 0x10, 0x7e, 0x20, 0x52, 0xfe, 0x52, 0x82, 0x52, 0xfe, 0x7e, 0x82, 0x52, 0xfe, 0x52, 0x80, 0x52, 0xff, 0x7e, 0x80, 0x10, 0xff, 0x10, 0x1, 0x11, 0x55, 0x13, 0x55, 0x12, 0x3, 0x10, 0x6 },
{ 0x8a, 0x9c, 0x8, 0x0, 0x9, 0xff, 0x8, 0x10, 0x7e, 0x30, 0x8, 0x20, 0x8, 0xfe, 0x1c, 0x82, 0x1a, 0x82, 0x1a, 0x82, 0x28, 0x82, 0x28, 0xfe, 0x48, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe },
{ 0x8a, 0x9d, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xfc, 0x0, 0x18, 0x2, 0x20, 0x1, 0x40, 0x7f, 0xff, 0x1, 0x42, 0x3, 0x44, 0x6, 0x40, 0xc, 0x40, 0x18, 0x40, 0x70, 0x40, 0x1, 0xc0 },
{ 0x8a, 0x9e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff },
{ 0x8a, 0x9f, 0x0, 0x0, 0x78, 0x9e, 0xa, 0xa2, 0xa, 0xa2, 0xa, 0xa2, 0x38, 0x8e, 0x27, 0xf8, 0x20, 0x88, 0x39, 0xce, 0x9, 0xc2, 0xa, 0xa2, 0xa, 0xa2, 0xc, 0x92, 0x18, 0x86, 0x10, 0x84, 0x70, 0x1c },
{ 0x8a, 0xa0, 0x0, 0x82, 0x0, 0x92, 0x0, 0x92, 0x0, 0x92, 0x31, 0x92, 0x19, 0x12, 0xd, 0x12, 0x7, 0x12, 0x2, 0x12, 0x7, 0x12, 0x5, 0x92, 0xc, 0x82, 0x8, 0xc2, 0x18, 0x42, 0x30, 0x2, 0x60, 0xe },
{ 0x8a, 0xa1, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x82, 0x30, 0x92, 0x19, 0x92, 0xd, 0x12, 0x7, 0x12, 0x2, 0x12, 0x7, 0x12, 0xd, 0x82, 0x18, 0xc2, 0x30, 0x42, 0x60, 0xe },
{ 0x8a, 0xa2, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x5, 0x10, 0x5, 0x90, 0xc, 0x90, 0x8, 0x10, 0x8, 0x10, 0x9, 0xd1, 0x1f, 0x1b, 0x70, 0xe },
{ 0x8a, 0xa3, 0x8, 0x40, 0x8, 0x40, 0x7f, 0x40, 0x8, 0xff, 0x3e, 0x80, 0x23, 0x80, 0x22, 0x7e, 0x3e, 0xc, 0x22, 0x18, 0x22, 0x10, 0x3e, 0x30, 0x8, 0x20, 0x7f, 0x60, 0x8, 0x41, 0x8, 0x63, 0x8, 0x3e },
{ 0x8a, 0xa4, 0x8, 0x0, 0xb, 0xfe, 0xa, 0x2, 0x1a, 0x2, 0x12, 0x2, 0x33, 0xfe, 0x30, 0x0, 0x51, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x13, 0x25, 0x12, 0x25, 0x16, 0x3 },
{ 0x8a, 0xa5, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0x4, 0x0, 0x4, 0x0, 0x7f, 0x7f, 0x84, 0x12, 0x24, 0x12, 0x34, 0x12, 0x14, 0x12, 0x4, 0x12, 0x4, 0x32, 0x1d, 0x23, 0x3, 0x61, 0xfe },
{ 0x8a, 0xa6, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x22, 0x22, 0x1f, 0xfc, 0x2, 0x20, 0x1f, 0xfc, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0x1d, 0xdc, 0x70, 0x67, 0x7, 0x0, 0x1, 0xe0, 0x0, 0x30 },
{ 0x8a, 0xa7, 0x0, 0x2, 0x3f, 0x92, 0x4, 0x12, 0x4, 0x12, 0x4, 0x12, 0x4, 0x12, 0x7f, 0xd2, 0x4, 0x12, 0x4, 0x12, 0x4, 0x12, 0x4, 0x12, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0xe },
{ 0x8a, 0xa8, 0x11, 0x8, 0x11, 0x8, 0x7f, 0xc8, 0x11, 0x8, 0x1f, 0x3f, 0x11, 0x9, 0x1f, 0x9, 0x11, 0x9, 0x7f, 0xc9, 0x2a, 0x9, 0x2a, 0x19, 0x2b, 0x91, 0x30, 0x13, 0x20, 0x32, 0x3f, 0xa2, 0x0, 0x6e },
{ 0x8a, 0xa9, 0x10, 0x8, 0x10, 0x8, 0x3f, 0xc8, 0x24, 0x8, 0x44, 0x3f, 0x3f, 0xc9, 0x9, 0x9, 0x12, 0x9, 0x3f, 0xc9, 0x52, 0x19, 0x1f, 0x91, 0x12, 0x11, 0x1f, 0xb3, 0x12, 0x22, 0x1f, 0xe2, 0x0, 0x4e },
{ 0x8a, 0xaa, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x1f, 0xfc, 0x1, 0x40, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x18, 0x2c, 0x70, 0x27, 0x7, 0xe0, 0x4, 0x0, 0x4, 0x4, 0x6, 0xc, 0x3, 0xf8 },
{ 0x8a, 0xab, 0x0, 0x80, 0x0, 0xf8, 0x79, 0x88, 0x49, 0x10, 0x4b, 0xfe, 0x49, 0x52, 0x49, 0x52, 0x49, 0x52, 0x49, 0x5e, 0x49, 0x82, 0x49, 0x22, 0x7b, 0xff, 0x0, 0x50, 0x0, 0xd8, 0x1, 0x8c, 0x7, 0x7 },
{ 0x8a, 0xac, 0x10, 0x84, 0x10, 0x84, 0x13, 0xff, 0x10, 0x84, 0x7c, 0xfc, 0x10, 0x84, 0x10, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x13, 0xff, 0x11, 0x28, 0x1d, 0x28, 0x71, 0x4f, 0x1, 0x80, 0x1, 0x0, 0x1, 0xff },
{ 0x8a, 0xad, 0x1, 0x0, 0x1, 0x0, 0x3f, 0xfe, 0x2, 0x10, 0x4, 0x20, 0xf, 0xe0, 0x1, 0x3c, 0x3e, 0x6, 0x8, 0x10, 0x7f, 0xff, 0x11, 0x22, 0x23, 0x46, 0x3a, 0x74, 0xe, 0x1c, 0x1b, 0x36, 0x71, 0x63 },
{ 0x8a, 0xae, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8a, 0xaf, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x1, 0x40, 0x1, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc },
{ 0x8a, 0xb0, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x42, 0x21, 0x5f, 0xfd, 0x2, 0x20, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x21, 0xe, 0x23, 0x78, 0x1e },
{ 0x8a, 0xb1, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8a, 0xb2, 0x8, 0x10, 0x8, 0x38, 0x7f, 0x28, 0x8, 0x6c, 0x3e, 0xc6, 0x23, 0x83, 0x22, 0x7c, 0x3e, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0xff, 0x8, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x8a, 0xb3, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x40, 0x12, 0x66, 0x12, 0x2b, 0x33, 0x19, 0x61, 0xf0 },
{ 0x8a, 0xb4, 0x0, 0x28, 0x0, 0x24, 0x3f, 0xff, 0x20, 0x20, 0x2f, 0xa4, 0x20, 0x2c, 0x2f, 0xb8, 0x28, 0x90, 0x2f, 0xb9, 0x60, 0x6d, 0x40, 0x7, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8a, 0xb5, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x22, 0x13, 0xff, 0x59, 0x22, 0x55, 0xfe, 0x50, 0x0, 0x51, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x10, 0x84, 0x13, 0x3 },
{ 0x8a, 0xb6, 0x10, 0x14, 0x10, 0x12, 0x13, 0xff, 0x12, 0x10, 0x52, 0xfa, 0x5a, 0xa, 0x56, 0xee, 0x52, 0xa4, 0x12, 0xed, 0x12, 0x17, 0x14, 0x2, 0x10, 0x20, 0x12, 0xb6, 0x12, 0x93, 0x16, 0x85, 0x14, 0x7c },
{ 0x8a, 0xb7, 0x11, 0x0, 0x11, 0xf8, 0x13, 0x8, 0x7a, 0x10, 0x17, 0xfe, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x1a, 0x9e, 0x73, 0x2, 0x12, 0x22, 0x17, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x37, 0x7 },
{ 0x8a, 0xb8, 0x0, 0x10, 0x3f, 0x90, 0x4, 0x10, 0x4, 0x3f, 0x7f, 0xe2, 0x11, 0x22, 0x11, 0x72, 0x1f, 0x16, 0x11, 0x14, 0x11, 0x1c, 0x1f, 0x8, 0x11, 0x1c, 0x11, 0x14, 0x1f, 0x36, 0x71, 0x22, 0x1, 0x63 },
{ 0x8a, 0xb9, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x7c, 0x84, 0x13, 0xff, 0x10, 0x84, 0x38, 0x84, 0x34, 0x84, 0x34, 0x84, 0x50, 0xfc, 0x50, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0xfc },
{ 0x8a, 0xba, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x0, 0x7c, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x39, 0x4, 0x35, 0xfc, 0x35, 0x4, 0x51, 0x4, 0x51, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x17, 0xff, 0x10, 0x0 },
{ 0x8a, 0xbb, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x7e, 0x1, 0x12, 0x1, 0x10, 0xfc, 0x38, 0x84, 0x34, 0x84, 0x34, 0xfc, 0x50, 0x80, 0x50, 0x80, 0x10, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x8a, 0xbc, 0x8, 0x20, 0x8, 0x20, 0x7f, 0x20, 0x8, 0x7f, 0x8, 0x41, 0x3e, 0x53, 0x0, 0xd2, 0x3e, 0x10, 0x0, 0x10, 0x7f, 0x38, 0x8, 0x28, 0x2a, 0x28, 0x29, 0x6c, 0x49, 0x44, 0x8, 0xc6, 0x19, 0x83 },
{ 0x8a, 0xbd, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x20, 0x68, 0x7f, 0x8, 0x41, 0x7f, 0x53, 0x12, 0xd2, 0x14, 0x10, 0x3f, 0x90, 0x64, 0x38, 0x3f, 0x28, 0x24, 0x28, 0x3f, 0x6c, 0x24, 0x44, 0x3f, 0xc6, 0x0, 0x83 },
{ 0x8a, 0xbe, 0x0, 0x0, 0x33, 0xfe, 0x18, 0x20, 0x8, 0x20, 0x0, 0x20, 0x60, 0x20, 0x30, 0x20, 0x17, 0xff, 0x0, 0x20, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20, 0x0, 0x20 },
{ 0x8a, 0xbf, 0x0, 0x88, 0x33, 0xff, 0x18, 0x88, 0x8, 0x0, 0x1, 0xfe, 0x61, 0x22, 0x31, 0x22, 0x11, 0xfe, 0x0, 0x20, 0x9, 0xfe, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x50, 0x30, 0xd8, 0x21, 0x8c, 0x67, 0x7 },
{ 0x8a, 0xc0, 0x0, 0x0, 0x27, 0xdf, 0x34, 0x51, 0x17, 0xdf, 0x4, 0x51, 0x47, 0xdf, 0x64, 0x1, 0x24, 0xf9, 0x4, 0x89, 0x14, 0x89, 0x14, 0xf9, 0x14, 0x89, 0x34, 0x89, 0x24, 0xf9, 0x64, 0x1, 0x44, 0x7 },
{ 0x8a, 0xc1, 0x0, 0x80, 0x30, 0x80, 0x19, 0xfe, 0x9, 0x20, 0x7, 0xff, 0x60, 0x44, 0x30, 0x88, 0x11, 0xfe, 0x3, 0x10, 0x9, 0xfe, 0x9, 0x10, 0x19, 0x10, 0x11, 0xfe, 0x31, 0x10, 0x21, 0x10, 0x61, 0xff },
{ 0x8a, 0xc2, 0x0, 0x0, 0x1, 0xfe, 0x7d, 0x52, 0x11, 0x52, 0x11, 0xfe, 0x10, 0x0, 0x13, 0xff, 0x7c, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x10, 0x61, 0x1c, 0xb2, 0x71, 0x2c, 0x6, 0x23, 0x0, 0x20 },
{ 0x8a, 0xc3, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0 },
{ 0x8a, 0xc4, 0x0, 0x20, 0x3f, 0x20, 0x24, 0x20, 0x3f, 0x7f, 0x21, 0x40, 0x21, 0xc0, 0x3f, 0x3e, 0x24, 0x0, 0x3f, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8a, 0xc5, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x7, 0xfc, 0xc, 0x4, 0x17, 0xfc, 0x64, 0x4, 0x7, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x8a, 0xc6, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x24, 0x90, 0x42, 0x8, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8a, 0xc7, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x24, 0x90, 0x42, 0x8, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x0, 0x7, 0xf8, 0x4, 0x8, 0x4, 0x8, 0x7, 0xf8 },
{ 0x8a, 0xc8, 0x10, 0x40, 0x1f, 0x7f, 0x24, 0x90, 0x42, 0x8, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe2, 0x20, 0xe },
{ 0x8a, 0xc9, 0x8, 0x6, 0x18, 0x3c, 0x13, 0xe2, 0x65, 0x26, 0x2c, 0x94, 0x1b, 0xfe, 0x10, 0x40, 0x2b, 0xff, 0x7c, 0x40, 0x14, 0x7c, 0x10, 0x44, 0x54, 0xec, 0x55, 0xa8, 0x50, 0x38, 0x10, 0x6c, 0x11, 0xc7 },
{ 0x8a, 0xca, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x18, 0x80, 0x30, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x8a, 0xcb, 0x10, 0x20, 0x10, 0x70, 0x7c, 0xd8, 0x11, 0x8c, 0x7f, 0x7, 0x44, 0x0, 0x47, 0xde, 0x7c, 0x42, 0x46, 0x52, 0x45, 0x4a, 0x7c, 0x42, 0x10, 0xc6, 0x7d, 0x4a, 0x12, 0x52, 0x10, 0x42, 0x11, 0xce },
{ 0x8a, 0xcc, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x23, 0xff, 0x22, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x62, 0x10, 0x4e, 0x10 },
{ 0x8a, 0xcd, 0x8, 0x4, 0x11, 0xf4, 0x3d, 0x44, 0x25, 0x4f, 0x35, 0xf8, 0x35, 0x10, 0x25, 0xf0, 0x7f, 0x4f, 0x25, 0x40, 0x35, 0xf0, 0x34, 0x0, 0x34, 0xfe, 0x24, 0xaa, 0x24, 0xaa, 0x64, 0xaa, 0x4d, 0xff },
{ 0x8a, 0xce, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x40, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x8a, 0xcf, 0x10, 0x0, 0x10, 0x7e, 0x3f, 0x42, 0x68, 0x42, 0x8, 0x7e, 0x7f, 0xc2, 0x12, 0x42, 0x14, 0x7e, 0x3f, 0x42, 0x64, 0x42, 0x3f, 0x7e, 0x24, 0x28, 0x3f, 0x28, 0x24, 0x69, 0x3f, 0x49, 0x0, 0xc7 },
{ 0x8a, 0xd0, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7e, 0x10, 0x0, 0xfe, 0x3c, 0x92, 0x0, 0x92, 0x0, 0xfe, 0x3c, 0x92, 0x0, 0x92, 0x0, 0xfe, 0x3c, 0x54, 0x24, 0x54, 0x24, 0xd6, 0x25, 0x93, 0x3c, 0x10 },
{ 0x8a, 0xd1, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x8a, 0xd2, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x52, 0xb, 0xfe, 0x0, 0x0, 0x7, 0xff, 0x0, 0x0, 0x79, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x8, 0x62, 0x8, 0xb4, 0xb, 0x28, 0x18, 0x26, 0x34, 0x20, 0x63, 0xff },
{ 0x8a, 0xd3, 0x10, 0x4, 0x39, 0xf4, 0x2d, 0x44, 0x65, 0x4f, 0x41, 0xf8, 0x7d, 0x10, 0x11, 0xf0, 0x11, 0x4f, 0x7d, 0x40, 0x11, 0xf0, 0x54, 0x0, 0x54, 0xfe, 0x54, 0xaa, 0x10, 0xaa, 0x1c, 0xaa, 0x71, 0xff },
{ 0x8a, 0xd4, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x20, 0x2, 0x20, 0xe },
{ 0x8a, 0xd5, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x82, 0x20, 0x82, 0x27, 0xf2, 0x20, 0x82, 0x21, 0xc2, 0x21, 0xc2, 0x22, 0xa2, 0x24, 0x92, 0x20, 0x82, 0x20, 0xe },
{ 0x8a, 0xd6, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x22, 0x22, 0x21, 0x42, 0x27, 0xf2, 0x20, 0x82, 0x20, 0x82, 0x2f, 0xfa, 0x21, 0x42, 0x23, 0x62, 0x26, 0x32, 0x20, 0xe },
{ 0x8a, 0xd7, 0x0, 0x20, 0x3e, 0x20, 0x22, 0x7e, 0x26, 0x42, 0x24, 0xc6, 0x2d, 0x8c, 0x28, 0x8, 0x24, 0xbe, 0x22, 0xa2, 0x22, 0xa2, 0x22, 0xa2, 0x22, 0xbe, 0x2e, 0xa2, 0x20, 0xa2, 0x20, 0xa2, 0x20, 0xbe },
{ 0x8a, 0xd8, 0x8, 0x10, 0x8, 0x7c, 0x7f, 0x24, 0x8, 0x24, 0x3e, 0xff, 0x22, 0x0, 0x22, 0x7e, 0x3e, 0x42, 0x22, 0x7e, 0x22, 0x4, 0x3e, 0x7e, 0x8, 0x24, 0x7f, 0x24, 0x8, 0xff, 0x8, 0x4, 0x8, 0x4 },
{ 0x8a, 0xd9, 0x8, 0x10, 0x1c, 0x10, 0x16, 0xff, 0x32, 0x81, 0x28, 0x81, 0x7e, 0x7c, 0x22, 0x44, 0x3e, 0x44, 0x22, 0x7c, 0x3e, 0x40, 0x20, 0x40, 0x22, 0x7e, 0x22, 0x42, 0x2f, 0x42, 0x39, 0x42, 0x60, 0x7e },
{ 0x8a, 0xda, 0x8, 0x10, 0x1c, 0x10, 0x16, 0xff, 0x33, 0x81, 0x20, 0x81, 0x7e, 0x7c, 0x8, 0x44, 0x8, 0x44, 0x7f, 0x7c, 0x8, 0x40, 0x8, 0x40, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x7e },
{ 0x8a, 0xdb, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3f, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x32, 0x10, 0x1a, 0x10, 0xe, 0x10, 0x4, 0x10, 0xe, 0x10, 0xb, 0x10, 0x19, 0x11, 0x30, 0x13, 0x60, 0xe },
{ 0x8a, 0xdc, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x73, 0xe7, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x10, 0x0, 0x20, 0x0, 0x40, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8a, 0xdd, 0x0, 0x80, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x17, 0xfc, 0x10, 0x40, 0x10, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x30, 0x40, 0x20, 0x40, 0x60, 0x40, 0x0, 0x40 },
{ 0x8a, 0xde, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x9, 0x4, 0x3f, 0xff, 0x20, 0x10, 0x2f, 0x10, 0x24, 0x3f, 0x3f, 0xa4, 0x29, 0x64, 0x2f, 0x14, 0x29, 0x1c, 0x2f, 0x8, 0x69, 0x1c, 0x4f, 0x36, 0x19, 0x63 },
{ 0x8a, 0xdf, 0x0, 0x0, 0x7c, 0xfe, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x7d, 0xff, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48, 0x1c, 0x48, 0x70, 0xc8, 0x0, 0x89, 0x1, 0x89, 0x3, 0x7 },
{ 0x8a, 0xe0, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x51, 0xf8, 0x31, 0x8, 0x11, 0xf8, 0x10, 0x0, 0x37, 0x9e, 0x54, 0x92, 0x17, 0x9e, 0x10, 0x0, 0x30, 0x40, 0x24, 0x42, 0x64, 0x42, 0x7, 0xfe },
{ 0x8a, 0xe1, 0x0, 0x0, 0x3c, 0xfe, 0x24, 0x82, 0x24, 0x82, 0x24, 0xfe, 0x3c, 0x82, 0x24, 0x82, 0x24, 0xfe, 0x24, 0xa1, 0x3c, 0xb3, 0x24, 0x96, 0x24, 0x9c, 0x24, 0x88, 0x3c, 0x8c, 0x0, 0xe6, 0x3, 0x83 },
{ 0x8a, 0xe2, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x14, 0x4, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x8a, 0xe3, 0x0, 0x0, 0x77, 0xbe, 0x10, 0x80, 0x54, 0x80, 0x32, 0x80, 0x10, 0x80, 0x32, 0xff, 0x54, 0x94, 0x8, 0x14, 0x3f, 0x14, 0x21, 0x14, 0x21, 0x14, 0x3f, 0x14, 0x21, 0x35, 0x21, 0x25, 0x3f, 0x63 },
{ 0x8a, 0xe4, 0x3f, 0xff, 0x22, 0x44, 0x24, 0xff, 0x2d, 0x90, 0x36, 0xfe, 0x24, 0x90, 0x24, 0xfe, 0x24, 0x90, 0x23, 0xff, 0x22, 0x4, 0x23, 0xfc, 0x22, 0x4, 0x23, 0xfc, 0x62, 0x4, 0x43, 0xfc, 0xe, 0x7 },
{ 0x8a, 0xe5, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x11, 0x22, 0x11, 0x24, 0x12, 0x7f, 0x12, 0xc8, 0x17, 0x48, 0x1a, 0x7e, 0x12, 0x48, 0x12, 0x48, 0x12, 0x7e, 0x32, 0x48, 0x22, 0x48, 0x62, 0x7f, 0x2, 0x0 },
{ 0x8a, 0xe6, 0x0, 0x0, 0x3e, 0xff, 0x0, 0x10, 0x0, 0x7e, 0x0, 0x42, 0x7f, 0x42, 0x14, 0x7e, 0x14, 0x42, 0x14, 0x42, 0x14, 0x7e, 0x15, 0x42, 0x15, 0x42, 0x33, 0x7e, 0x20, 0x24, 0x60, 0x66, 0x0, 0xc3 },
{ 0x8a, 0xe7, 0x4, 0x0, 0x4, 0x7f, 0x3f, 0x88, 0x11, 0x3e, 0xa, 0x22, 0x3f, 0xa2, 0x22, 0x3e, 0x26, 0x22, 0x2d, 0x22, 0x23, 0x3e, 0x26, 0x22, 0x2c, 0xa2, 0x21, 0xbe, 0x63, 0x14, 0x46, 0x36, 0x1c, 0x63 },
{ 0x8a, 0xe8, 0x0, 0x0, 0x3f, 0xbf, 0x22, 0x8, 0x2f, 0xbe, 0x28, 0xa2, 0x28, 0xa2, 0x2f, 0xbe, 0x28, 0xa2, 0x28, 0xa2, 0x2f, 0xbe, 0x22, 0x22, 0x2a, 0xa2, 0x6a, 0xbe, 0x5a, 0x94, 0x52, 0x36, 0x6, 0x63 },
{ 0x8a, 0xe9, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x60, 0x3, 0x30, 0x6, 0x18, 0xc, 0x8c, 0x18, 0x87, 0x74, 0x80, 0x4, 0xf8, 0x4, 0x80, 0x4, 0x80, 0x4, 0x80, 0x4, 0x80, 0x4, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8a, 0xea, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x10, 0x20, 0x30, 0x20, 0x33, 0xfc, 0x51, 0x4, 0x11, 0x8c, 0x10, 0x88, 0x10, 0xd8, 0x10, 0x70, 0x10, 0x70, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x7 },
{ 0x8a, 0xeb, 0x4, 0x0, 0x7, 0xf0, 0xc, 0x20, 0x10, 0x40, 0x7f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x13, 0xf8, 0x12, 0x8, 0x12, 0x8, 0x12, 0x8, 0x12, 0x38, 0x32, 0x0, 0x22, 0x2, 0x63, 0x6, 0x1, 0xfc },
{ 0x8a, 0xec, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8a, 0xed, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0xc, 0x18, 0x70, 0x7, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e },
{ 0x8a, 0xee, 0x4, 0x10, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x88, 0x17, 0xf4, 0x60, 0x83, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8a, 0xef, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x40, 0x2, 0x20, 0xc, 0x18, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x8, 0xf, 0xc8, 0x8, 0x48, 0x8, 0x48, 0x8, 0x48, 0xf, 0xc8, 0x0, 0x8, 0x0, 0x38 },
{ 0x8a, 0xf0, 0x10, 0x10, 0x11, 0xff, 0x10, 0x10, 0x7e, 0xfe, 0x12, 0x0, 0x12, 0xfe, 0x12, 0x82, 0x32, 0xfe, 0x26, 0x44, 0x24, 0x28, 0x75, 0xff, 0xc, 0x0, 0xa, 0xfe, 0x1a, 0x82, 0x30, 0x82, 0x60, 0xfe },
{ 0x8a, 0xf1, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x1f, 0xfc, 0x1, 0x40, 0x6, 0x30, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x8, 0xf, 0xc8, 0x8, 0x48, 0x8, 0x48, 0xf, 0xc8, 0x0, 0x38 },
{ 0x8a, 0xf2, 0x0, 0x20, 0x10, 0x20, 0x13, 0xff, 0x54, 0x20, 0x54, 0x20, 0x55, 0xfc, 0x54, 0x84, 0x54, 0x8c, 0x54, 0xc8, 0x54, 0x58, 0x54, 0x70, 0x7c, 0x20, 0x0, 0x70, 0x0, 0xd8, 0x1, 0x8c, 0x3, 0x7 },
{ 0x8a, 0xf3, 0xe, 0xc, 0x3, 0xb8, 0x0, 0xe0, 0x7, 0xb8, 0x3d, 0xc, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x40, 0x4, 0x40, 0xf, 0xfe, 0x14, 0x42, 0x64, 0x42, 0x4, 0x42, 0x4, 0x42, 0x4, 0x4e, 0x0, 0x40 },
{ 0x8a, 0xf4, 0x8, 0x88, 0x18, 0x98, 0x32, 0xb2, 0x14, 0x94, 0x8, 0x88, 0xa, 0x92, 0x1e, 0xbe, 0x32, 0x8a, 0x0, 0x84, 0x1f, 0xff, 0x10, 0x40, 0x1c, 0x64, 0x16, 0x28, 0x32, 0x31, 0x20, 0xdb, 0x63, 0xe },
{ 0x8a, 0xf5, 0x0, 0x0, 0x1f, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x1f, 0xf8, 0x10, 0x0, 0x10, 0x2, 0x18, 0x6, 0xf, 0xfc, 0x0, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x43, 0x34, 0x9, 0x26, 0x18, 0x63, 0xf0 },
{ 0x8a, 0xf6, 0x10, 0x0, 0x17, 0xff, 0x14, 0x1, 0x14, 0x21, 0x7b, 0xfe, 0x10, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x1b, 0xfe, 0x72, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x30, 0x20 },
{ 0x8a, 0xf7, 0x10, 0x0, 0x10, 0xf8, 0x10, 0x88, 0x7e, 0x88, 0x10, 0x88, 0x10, 0x88, 0x38, 0x88, 0x34, 0x88, 0x34, 0x88, 0x50, 0x88, 0x50, 0x88, 0x10, 0x88, 0x11, 0x88, 0x11, 0x9, 0x13, 0x9, 0x16, 0x7 },
{ 0x8a, 0xf8, 0x8, 0x40, 0x8, 0x40, 0x8, 0xff, 0x7e, 0x80, 0x11, 0x24, 0x10, 0xff, 0x1e, 0x24, 0x12, 0x3c, 0x12, 0x24, 0x12, 0x3c, 0x12, 0x24, 0x12, 0xff, 0x32, 0x0, 0x26, 0x24, 0x24, 0x66, 0x6c, 0xc3 },
{ 0x8a, 0xf9, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x48, 0x22, 0x48, 0x3e, 0x48, 0x22, 0x48, 0x22, 0x48, 0x3f, 0xff, 0x20, 0x8, 0x20, 0x18, 0x22, 0x18, 0x22, 0x38, 0x2f, 0x28, 0x39, 0x69, 0x60, 0xc9, 0x1, 0x87 },
{ 0x8a, 0xfa, 0x22, 0x0, 0x22, 0x3e, 0x7f, 0xa2, 0x22, 0x22, 0x22, 0x22, 0x3e, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x7f, 0xa2, 0x0, 0x22, 0x26, 0x22, 0x63, 0x62, 0x40, 0xce },
{ 0x8a, 0xfb, 0x8, 0x44, 0x8, 0x44, 0x9, 0xff, 0x7e, 0x44, 0x8, 0x44, 0x8, 0x7c, 0x1c, 0x44, 0x1a, 0x44, 0x1a, 0x7c, 0x28, 0x44, 0x28, 0x44, 0x49, 0xff, 0x8, 0x0, 0x8, 0x44, 0x8, 0xc6, 0x9, 0x83 },
{ 0x8a, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x8, 0x1f, 0xf4, 0x0, 0x0, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0xe, 0xb8, 0x78, 0x8f, 0x0, 0x80 },
{ 0x8b, 0x40, 0x10, 0xa2, 0x11, 0x24, 0x13, 0x6d, 0x7c, 0xa2, 0x11, 0x25, 0x11, 0x6f, 0x33, 0xe4, 0x38, 0x22, 0x35, 0xff, 0x55, 0x20, 0x51, 0x12, 0x11, 0x94, 0x11, 0x48, 0x13, 0x55, 0x12, 0x27, 0x16, 0xc2 },
{ 0x8b, 0x41, 0x8, 0x0, 0x9, 0xfc, 0x28, 0x4, 0x29, 0xfc, 0x28, 0x4, 0x29, 0xfc, 0x28, 0x0, 0x2f, 0xff, 0x2c, 0x21, 0x2c, 0x21, 0xb, 0xfe, 0xa, 0x22, 0x1a, 0x22, 0x12, 0x22, 0x32, 0x26, 0x60, 0x20 },
{ 0x8b, 0x42, 0x4, 0x0, 0x4, 0x3c, 0x3f, 0xa4, 0x11, 0x24, 0xa, 0x24, 0x7f, 0xe4, 0x8, 0x47, 0x14, 0x80, 0x65, 0x7e, 0xa, 0x22, 0x13, 0x36, 0x66, 0x9c, 0xa, 0x48, 0x12, 0x1c, 0x62, 0x36, 0xc, 0xe3 },
{ 0x8b, 0x43, 0x8, 0x0, 0x8, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x37, 0xf8, 0x60, 0x0, 0x1f, 0xf8, 0x0, 0x8, 0x0, 0x48, 0x18, 0xc8, 0xd, 0x88, 0x7, 0x8, 0x7, 0x8d, 0xc, 0xc5, 0x18, 0x47, 0x70, 0x2 },
{ 0x8b, 0x44, 0x2, 0x0, 0x22, 0x0, 0x37, 0xfe, 0x14, 0x0, 0xd, 0xf8, 0x40, 0x0, 0x67, 0xf8, 0x20, 0x8, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x10, 0xd, 0x30, 0x5, 0x20, 0x7, 0x60, 0x2 },
{ 0x8b, 0x45, 0x8, 0x88, 0x18, 0x98, 0x32, 0xb2, 0x14, 0x94, 0x8, 0x88, 0x14, 0x94, 0x3e, 0xbe, 0x2, 0x8a, 0x7f, 0xff, 0x0, 0x40, 0x3f, 0xe2, 0x24, 0xa4, 0x3f, 0xa8, 0x24, 0x91, 0x3f, 0xad, 0x0, 0xc7 },
{ 0x8b, 0x46, 0x8, 0x6, 0x8, 0x1c, 0x8, 0x70, 0x7e, 0x40, 0x2, 0x40, 0x6, 0x7f, 0x4, 0x44, 0xc, 0x44, 0x18, 0x44, 0x3e, 0x44, 0x6b, 0x44, 0x8, 0x44, 0x8, 0xc4, 0x8, 0x84, 0x9, 0x84, 0x8, 0x4 },
{ 0x8b, 0x47, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x7, 0xf, 0xf8, 0x0, 0x30, 0x0, 0xc0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8b, 0x48, 0x2, 0xc4, 0xe, 0x6c, 0x78, 0x38, 0x8, 0x6c, 0x9, 0xc6, 0x7e, 0x20, 0x9, 0xff, 0x1c, 0x40, 0x1a, 0x90, 0x19, 0xfe, 0x2a, 0x92, 0x2c, 0x92, 0x48, 0x92, 0x8, 0x92, 0x8, 0x96, 0x8, 0x10 },
{ 0x8b, 0x49, 0x8, 0x0, 0x18, 0x7e, 0x30, 0x2, 0x62, 0x2, 0x36, 0x2, 0xc, 0x2, 0x18, 0x7e, 0x32, 0x40, 0x7f, 0x40, 0x9, 0x40, 0x8, 0x40, 0x2a, 0x40, 0x2b, 0x41, 0x69, 0x63, 0x48, 0x3e, 0x8, 0x0 },
{ 0x8b, 0x4a, 0x8, 0x88, 0x1a, 0xa8, 0x12, 0xa8, 0x32, 0xaf, 0x63, 0xea, 0x8, 0x92, 0x19, 0xa, 0x13, 0x4a, 0x30, 0x8e, 0x71, 0x24, 0x13, 0xe4, 0x10, 0x84, 0x12, 0xae, 0x12, 0xaa, 0x14, 0xbb, 0x10, 0x91 },
{ 0x8b, 0x4b, 0x8, 0x0, 0x8, 0x7e, 0x8, 0x42, 0x3f, 0x42, 0x8, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x3f, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x1c, 0x7e, 0x16, 0x28, 0x33, 0x28, 0x20, 0x69, 0x60, 0xc9, 0x1, 0x87 },
{ 0x8b, 0x4c, 0x0, 0x0, 0x3e, 0x7e, 0x0, 0x2, 0x7f, 0x2, 0x0, 0x2, 0x3e, 0x2, 0x0, 0x2, 0x0, 0x7e, 0x3e, 0x40, 0x0, 0x40, 0x0, 0x40, 0x3e, 0x40, 0x22, 0x40, 0x22, 0x41, 0x22, 0x63, 0x3e, 0x3e },
{ 0x8b, 0x4d, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x8b, 0x4e, 0x4, 0x0, 0x4, 0x3e, 0x3f, 0x82, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x7f, 0xbe, 0x4, 0x20, 0x24, 0x20, 0x27, 0xa0, 0x24, 0x21, 0x24, 0x33, 0x34, 0x1e, 0x2c, 0x0, 0x67, 0x0, 0x41, 0xff },
{ 0x8b, 0x4f, 0x8, 0x20, 0x8, 0x20, 0x7f, 0x20, 0x8, 0x20, 0x3f, 0xfc, 0x29, 0x24, 0x29, 0x24, 0x3f, 0x24, 0x29, 0x24, 0x29, 0x24, 0x3f, 0x24, 0x8, 0x24, 0x7f, 0xa4, 0x8, 0x65, 0x8, 0x45, 0x8, 0xc3 },
{ 0x8b, 0x50, 0x10, 0x0, 0x11, 0xff, 0x55, 0x1, 0x75, 0x11, 0x34, 0xfe, 0x10, 0x10, 0x10, 0xfe, 0x7e, 0x92, 0x28, 0xfe, 0x28, 0x92, 0x28, 0x92, 0x2a, 0xfe, 0x6c, 0x10, 0x49, 0xff, 0x40, 0x10, 0x0, 0x10 },
{ 0x8b, 0x51, 0x4, 0x0, 0xe, 0x3c, 0xb, 0x24, 0x19, 0xa4, 0x14, 0x24, 0x3f, 0x24, 0x51, 0x24, 0x1f, 0x24, 0x11, 0x24, 0x1f, 0x24, 0x10, 0x24, 0x12, 0x24, 0x12, 0x24, 0x13, 0x65, 0x1d, 0x45, 0x30, 0xc3 },
{ 0x8b, 0x52, 0x0, 0x8, 0x3f, 0x88, 0x24, 0x7f, 0x24, 0x8, 0x3f, 0x14, 0x24, 0x22, 0x24, 0x0, 0x3f, 0x7f, 0x24, 0x2, 0x24, 0x3a, 0x3f, 0xaa, 0x0, 0xaa, 0x55, 0xba, 0x54, 0x82, 0x41, 0x82, 0x3, 0xe },
{ 0x8b, 0x53, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x50, 0x2, 0x54, 0x6, 0x66, 0x4, 0x7a, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x8b, 0x54, 0x2, 0x0, 0x7, 0xe0, 0x8, 0x40, 0x1f, 0xf8, 0x68, 0x88, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfd, 0x0, 0x81, 0x0, 0x7f },
{ 0x8b, 0x55, 0x5, 0x20, 0x4, 0xa0, 0xc, 0x20, 0xb, 0xfc, 0x18, 0x44, 0x10, 0x48, 0x30, 0xfe, 0x51, 0x82, 0x11, 0x4, 0x13, 0xff, 0x16, 0x1, 0x1c, 0x9, 0x12, 0xa5, 0x12, 0xa3, 0x14, 0x2, 0x10, 0xe },
{ 0x8b, 0x56, 0x9, 0x4, 0x8, 0x88, 0x1b, 0xfe, 0x10, 0x20, 0x11, 0xfc, 0x30, 0x20, 0x37, 0xff, 0x50, 0x4, 0x13, 0xd2, 0x10, 0x90, 0x17, 0xff, 0x10, 0x92, 0x10, 0xd4, 0x17, 0x89, 0x10, 0x95, 0x13, 0xa3 },
{ 0x8b, 0x57, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x10, 0x10, 0x7e, 0x10, 0x12, 0xfe, 0x12, 0x42, 0x32, 0x46, 0x22, 0x64, 0x26, 0x2c, 0x74, 0x38, 0xc, 0x10, 0xa, 0x38, 0x19, 0x6c, 0x30, 0xc6, 0x61, 0x83 },
{ 0x8b, 0x58, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8b, 0x59, 0x4, 0x14, 0x7, 0x92, 0x4, 0x10, 0x3f, 0x93, 0x24, 0x9e, 0x27, 0x70, 0x3c, 0x92, 0x27, 0x92, 0x20, 0x16, 0x25, 0x14, 0x35, 0x5c, 0x2d, 0x88, 0x25, 0x1c, 0x25, 0x15, 0x47, 0xb7, 0x1c, 0x62 },
{ 0x8b, 0x5a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x13, 0xff, 0x7c, 0x10, 0x10, 0x10, 0x11, 0xfe, 0x10, 0x82, 0x1c, 0xc6, 0x70, 0x6c, 0x10, 0x38, 0x10, 0x10, 0x10, 0x38, 0x10, 0x6c, 0x10, 0xc6, 0x33, 0x83 },
{ 0x8b, 0x5b, 0x12, 0x0, 0x12, 0xbf, 0x13, 0x2, 0x12, 0x14, 0x7a, 0x48, 0x11, 0xff, 0x12, 0x9, 0x13, 0xca, 0x15, 0x28, 0x79, 0x2e, 0x17, 0xe8, 0x11, 0x28, 0x11, 0xa8, 0x11, 0x78, 0x12, 0x2c, 0x34, 0x47 },
{ 0x8b, 0x5c, 0x11, 0x10, 0x11, 0x10, 0x7f, 0xd0, 0x11, 0x1f, 0x11, 0x31, 0x1f, 0x2b, 0x11, 0x6a, 0x11, 0x8, 0x1f, 0x8, 0x11, 0x8, 0x11, 0x1c, 0x7f, 0xd4, 0x0, 0x14, 0x13, 0x36, 0x31, 0xa2, 0x60, 0x63 },
{ 0x8b, 0x5d, 0x9, 0x4, 0x28, 0x88, 0x29, 0xfe, 0x28, 0x20, 0x3e, 0xfc, 0x68, 0x20, 0x4b, 0xff, 0x8, 0x4, 0x9, 0xd2, 0xc, 0x90, 0x3b, 0xff, 0x68, 0x92, 0x8, 0xd4, 0xb, 0x89, 0x8, 0x95, 0x9, 0xa3 },
{ 0x8b, 0x5e, 0x20, 0x0, 0x27, 0x7e, 0x3c, 0x4, 0x20, 0x28, 0x21, 0x10, 0x1f, 0x7f, 0x10, 0x12, 0x1f, 0x14, 0x24, 0x50, 0x44, 0x5e, 0x3f, 0x50, 0x4, 0x50, 0xe, 0x50, 0x1b, 0x70, 0x30, 0xdc, 0x61, 0x87 },
{ 0x8b, 0x5f, 0x10, 0x6, 0x10, 0x1c, 0x11, 0xf0, 0x7d, 0x10, 0x5, 0x10, 0xd, 0x10, 0x9, 0x10, 0x19, 0xff, 0x11, 0x10, 0x3d, 0x18, 0x57, 0x8, 0x11, 0x8, 0x11, 0xc, 0x11, 0x5, 0x11, 0xe7, 0x17, 0x2 },
{ 0x8b, 0x60, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x8, 0x3f, 0x44, 0x4, 0x40, 0x7f, 0xff, 0x4, 0x44, 0x7, 0xa8, 0x7c, 0x11, 0x4, 0x6d, 0x1d, 0x87 },
{ 0x8b, 0x61, 0x10, 0x82, 0x10, 0x44, 0x11, 0xff, 0x7c, 0x10, 0x54, 0xfe, 0x54, 0x10, 0x55, 0xff, 0x54, 0x2, 0x7d, 0xe9, 0x10, 0x48, 0x11, 0xff, 0x14, 0x48, 0x14, 0x6a, 0x1d, 0xc5, 0x74, 0x4d, 0x0, 0xd3 },
{ 0x8b, 0x62, 0x0, 0x10, 0x3c, 0x10, 0x0, 0xfe, 0x7e, 0x82, 0x0, 0x82, 0x3c, 0x7c, 0x0, 0x44, 0x0, 0x44, 0x3c, 0x7c, 0x0, 0x44, 0x0, 0x44, 0x3c, 0x7c, 0x24, 0x44, 0x24, 0x44, 0x24, 0x44, 0x3d, 0xff },
{ 0x8b, 0x63, 0x0, 0x82, 0x3c, 0x44, 0x1, 0xff, 0x7e, 0x10, 0x0, 0xfe, 0x3c, 0x10, 0x1, 0xff, 0x0, 0x2, 0x3d, 0xe9, 0x0, 0x48, 0x1, 0xff, 0x3c, 0x48, 0x24, 0x6a, 0x25, 0xc5, 0x24, 0x4d, 0x3c, 0xd3 },
{ 0x8b, 0x64, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x11, 0xff, 0x7d, 0x1, 0x12, 0x21, 0x11, 0x25, 0x10, 0xa9, 0x1d, 0xfd, 0x70, 0x61, 0x10, 0xf9, 0x10, 0xad, 0x11, 0xa5, 0x13, 0x23, 0x10, 0x22, 0x30, 0xe },
{ 0x8b, 0x65, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x0, 0xf, 0xfe, 0x18, 0x2, 0x34, 0x92, 0x62, 0xa2, 0xf, 0xfa, 0x1, 0x82, 0x3, 0xe2, 0x6, 0xb2, 0xc, 0x96, 0x30, 0x84, 0x0, 0x1c },
{ 0x8b, 0x66, 0x14, 0x40, 0x14, 0x40, 0x7f, 0x7f, 0x14, 0x81, 0x15, 0x11, 0x1c, 0x55, 0x8, 0x55, 0x3e, 0xff, 0x2a, 0x11, 0x2a, 0x39, 0x3e, 0x35, 0x8, 0x55, 0x7f, 0x51, 0x8, 0x93, 0x8, 0x12, 0x8, 0xe },
{ 0x8b, 0x67, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8b, 0x68, 0x0, 0x80, 0x0, 0x80, 0x78, 0x80, 0x49, 0xff, 0x49, 0x0, 0x4b, 0x0, 0x4e, 0xfe, 0x48, 0xc, 0x48, 0x18, 0x48, 0x30, 0x48, 0x60, 0x48, 0xc0, 0x79, 0x80, 0x1, 0x1, 0x1, 0x83, 0x0, 0xfe },
{ 0x8b, 0x69, 0x1, 0x0, 0x7, 0xde, 0x71, 0xa, 0x51, 0xa, 0x57, 0xca, 0x51, 0xa, 0x51, 0x1a, 0x51, 0xd2, 0x57, 0x36, 0x50, 0x0, 0x70, 0x40, 0xf, 0xff, 0x0, 0x90, 0x1, 0x98, 0x3, 0xc, 0xe, 0x7 },
{ 0x8b, 0x6a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x10, 0x10, 0x10, 0x38, 0x10, 0x34, 0xfe, 0x34, 0x0, 0x50, 0x0, 0x50, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x8b, 0x6b, 0x10, 0x0, 0x11, 0xfe, 0x10, 0x44, 0x7c, 0x28, 0x13, 0xff, 0x18, 0x52, 0x34, 0x94, 0x31, 0x30, 0x33, 0xff, 0x52, 0x51, 0x52, 0x91, 0x13, 0x7f, 0x12, 0x49, 0x12, 0x49, 0x12, 0x79, 0x12, 0x7 },
{ 0x8b, 0x6c, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x7e, 0xff, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0x7e, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x3c, 0x42, 0x24, 0x42, 0x24, 0x42, 0x24, 0x42, 0x3c, 0x7e },
{ 0x8b, 0x6d, 0x0, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x1f, 0x18, 0x10, 0x10, 0x10, 0x1e, 0x10, 0x32, 0x10, 0x32, 0xfe, 0x52, 0x82, 0x12, 0x82, 0x12, 0x82, 0x12, 0x82, 0x1e, 0x82, 0x0, 0xfe },
{ 0x8b, 0x6e, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x7c, 0xfe, 0x10, 0x90, 0x11, 0x90, 0x38, 0x10, 0x34, 0x10, 0x35, 0xff, 0x50, 0x10, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 },
{ 0x8b, 0x6f, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0xc, 0x98, 0x71, 0xc7, 0x7, 0x70, 0x1c, 0x1c, 0x70, 0x87, 0xc, 0x98, 0x3, 0xe0, 0xc, 0x98, 0x70, 0x87, 0x3, 0x80 },
{ 0x8b, 0x70, 0x8, 0x0, 0x8, 0x3e, 0x3f, 0x22, 0x8, 0x22, 0x8, 0x22, 0x8, 0x22, 0x8, 0x22, 0x7f, 0xa2, 0x8, 0x22, 0x1a, 0x22, 0x13, 0x22, 0x31, 0x22, 0x27, 0xae, 0x7c, 0xa0, 0x0, 0x20, 0x0, 0x20 },
{ 0x8b, 0x71, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x2, 0x23, 0xfa, 0x4, 0x10, 0xa, 0x20, 0x31, 0xc0, 0x3, 0x70, 0xe, 0x1c, 0x78, 0x7, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8b, 0x72, 0x0, 0x80, 0x3c, 0x8f, 0x24, 0x89, 0x27, 0xe9, 0x24, 0x89, 0x3c, 0x89, 0x24, 0x89, 0x27, 0xf9, 0x24, 0x89, 0x3c, 0x89, 0x25, 0xa9, 0x25, 0x29, 0x25, 0x79, 0x27, 0xdb, 0x64, 0x8, 0x4c, 0x8 },
{ 0x8b, 0x73, 0x0, 0x80, 0x0, 0xfe, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x1, 0x11, 0x2, 0x11, 0xf8, 0x17, 0x0, 0x11, 0x2, 0x10, 0xfe, 0x10, 0x0, 0x17, 0xfe, 0x34, 0x0, 0x27, 0xfe, 0x64, 0x0, 0x7, 0xfe },
{ 0x8b, 0x74, 0x0, 0x84, 0x30, 0xcc, 0x18, 0x48, 0xb, 0xff, 0x0, 0x20, 0x1, 0x22, 0x1, 0x22, 0x79, 0x22, 0x9, 0x22, 0x9, 0xfe, 0x8, 0x20, 0x8, 0x60, 0x8, 0xc0, 0x19, 0x80, 0x34, 0x0, 0x63, 0xff },
{ 0x8b, 0x75, 0x0, 0x18, 0x0, 0xf0, 0xf, 0x80, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfe, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8b, 0x76, 0x1, 0x0, 0x1, 0x0, 0x3, 0xf0, 0x2, 0x10, 0x6, 0x10, 0xc, 0x30, 0x18, 0x20, 0x30, 0x60, 0x0, 0x40, 0x0, 0xe0, 0x1, 0xa0, 0x3, 0x30, 0x6, 0x10, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x8b, 0x77, 0x4, 0x80, 0x4, 0x80, 0xc, 0x80, 0x8, 0x80, 0x1b, 0xf8, 0x10, 0x88, 0x30, 0x88, 0x50, 0x88, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x11, 0x88, 0x11, 0x9, 0x13, 0x9, 0x16, 0x7 },
{ 0x8b, 0x78, 0x4, 0x40, 0x4, 0x40, 0xc, 0x40, 0x8, 0x40, 0x1f, 0xff, 0x11, 0x50, 0x31, 0x50, 0x51, 0x50, 0x11, 0x58, 0x13, 0x48, 0x12, 0x4c, 0x16, 0x46, 0x1c, 0x43, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40 },
{ 0x8b, 0x79, 0x0, 0x0, 0x3f, 0xf0, 0x2, 0x10, 0x2, 0x30, 0x2, 0x20, 0x7, 0x7c, 0x5, 0x4, 0x5, 0x8c, 0x4, 0x88, 0xc, 0xd8, 0x8, 0x70, 0x8, 0x60, 0x18, 0xf0, 0x11, 0x98, 0x33, 0xc, 0x6e, 0x7 },
{ 0x8b, 0x7a, 0x0, 0x0, 0x3, 0xfc, 0x78, 0x84, 0x48, 0x8c, 0x48, 0x88, 0x48, 0x9e, 0x48, 0x82, 0x49, 0xc6, 0x49, 0x44, 0x49, 0x6c, 0x4b, 0x38, 0x7a, 0x10, 0x6, 0x38, 0xc, 0x6c, 0x18, 0xc6, 0x3, 0x83 },
{ 0x8b, 0x7b, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8b, 0x7c, 0x0, 0x0, 0x3f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfe, 0x0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xc, 0x0, 0x78 },
{ 0x8b, 0x7d, 0x2, 0x0, 0x7, 0xf0, 0xc, 0x20, 0x18, 0x40, 0x7f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8b, 0x7e, 0x5, 0x10, 0x4, 0x90, 0x4, 0x10, 0x7f, 0x9f, 0x4, 0x12, 0x24, 0xb2, 0x35, 0xa2, 0x15, 0x76, 0x4, 0x14, 0x4, 0x1c, 0xf, 0x8, 0x1d, 0x88, 0x34, 0x9c, 0x64, 0x34, 0x4, 0x66, 0x1c, 0xc3 },
{ 0x8b, 0x80, 0x8, 0x0, 0x9, 0xff, 0x8, 0x20, 0x7e, 0x20, 0x8, 0x60, 0x8, 0x40, 0x1c, 0xfe, 0x1a, 0x2, 0x1a, 0x2, 0x28, 0x2, 0x28, 0x2, 0x48, 0x6, 0x8, 0x4, 0x8, 0x4, 0x8, 0xc, 0x8, 0x38 },
{ 0x8b, 0x81, 0x0, 0x98, 0x0, 0x8c, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x80, 0x10, 0x82, 0x18, 0x86, 0xc, 0x8c, 0x4, 0x98, 0x0, 0xc0, 0x2, 0xe0, 0x6, 0xb0, 0xc, 0x98, 0x38, 0x8c, 0x60, 0x87, 0x3, 0x80 },
{ 0x8b, 0x82, 0x0, 0x0, 0x37, 0xfc, 0x18, 0x84, 0x8, 0x8c, 0x0, 0x88, 0x60, 0x9e, 0x30, 0x82, 0x11, 0xc6, 0x1, 0x44, 0x9, 0x6c, 0x9, 0x38, 0x1b, 0x10, 0x12, 0x38, 0x36, 0x6c, 0x2c, 0xc6, 0x61, 0x83 },
{ 0x8b, 0x83, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0xb, 0xfe, 0x0, 0x0, 0x61, 0x4, 0x31, 0x4, 0x11, 0x4, 0x1, 0x8c, 0x8, 0x88, 0x8, 0x88, 0x18, 0x98, 0x10, 0x10, 0x30, 0x10, 0x27, 0xff, 0x60, 0x0 },
{ 0x8b, 0x84, 0x2, 0x0, 0x7, 0xf0, 0xc, 0x30, 0x38, 0x60, 0x0, 0xf0, 0x3, 0x98, 0xe, 0xc, 0x78, 0x7, 0x0, 0x80, 0x8, 0x82, 0x18, 0x86, 0x31, 0xcc, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8b, 0x85, 0x0, 0x24, 0x0, 0x26, 0x7c, 0x22, 0x13, 0xff, 0x10, 0x20, 0x11, 0x22, 0x11, 0xa6, 0x7c, 0xac, 0x10, 0x20, 0x10, 0x30, 0x10, 0xb8, 0x1d, 0xac, 0x73, 0x26, 0x6, 0x23, 0x0, 0x20, 0x0, 0x60 },
{ 0x8b, 0x86, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0xc, 0x20, 0x38, 0x3e, 0x1, 0x0, 0x1, 0x0, 0x3f, 0xf0, 0x1, 0x10, 0x3, 0x10, 0x2, 0x10, 0x6, 0x11, 0xc, 0x13, 0x38, 0xe },
{ 0x8b, 0x87, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0xc, 0x3c, 0x32, 0x0, 0x1f, 0x7e, 0x11, 0x2, 0x1f, 0x3e, 0x11, 0x20, 0x1f, 0x20, 0x11, 0xbe, 0x7f, 0x2, 0x5, 0x2, 0x19, 0x6, 0x67, 0x1c },
{ 0x8b, 0x88, 0x8, 0x10, 0x8, 0x10, 0x1f, 0xbf, 0x34, 0x48, 0x62, 0x4, 0x0, 0x0, 0x3f, 0xf8, 0x2, 0x10, 0x2, 0x3e, 0x7, 0xc, 0x5, 0x98, 0xc, 0xf0, 0x18, 0x60, 0x30, 0xf0, 0x63, 0x9c, 0xe, 0x7 },
{ 0x8b, 0x89, 0x8, 0x0, 0x19, 0xfc, 0x30, 0x44, 0x62, 0x4c, 0x36, 0x48, 0xc, 0x5e, 0x18, 0x42, 0x34, 0xe2, 0x7e, 0xa6, 0xa, 0xb4, 0x8, 0x9c, 0x2d, 0x88, 0x2b, 0x1c, 0x69, 0x34, 0x4b, 0x66, 0x8, 0xc3 },
{ 0x8b, 0x8a, 0x8, 0x4, 0x18, 0x24, 0x30, 0x24, 0x62, 0x24, 0x36, 0x24, 0xc, 0x24, 0x18, 0x24, 0x32, 0x24, 0x7f, 0x24, 0x9, 0x27, 0x8, 0x3c, 0x2a, 0xe4, 0x2b, 0x4, 0x69, 0x4, 0x48, 0x4, 0x8, 0x4 },
{ 0x8b, 0x8b, 0x8, 0x10, 0x18, 0x38, 0x10, 0x28, 0x64, 0x6c, 0x2c, 0xc6, 0x19, 0x83, 0x10, 0x0, 0x24, 0x7c, 0x7e, 0x0, 0xa, 0x0, 0x8, 0xfe, 0x2a, 0x82, 0x2a, 0x82, 0x6a, 0x82, 0x48, 0x82, 0x8, 0xfe },
{ 0x8b, 0x8c, 0x0, 0x0, 0x21, 0xfe, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0xfe, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0xfe, 0x0, 0x0 },
{ 0x8b, 0x8d, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xfc, 0x30, 0x80, 0x60, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8b, 0x8e, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x0, 0x3, 0x10, 0x2, 0x18, 0x6, 0x8, 0xc, 0x1c, 0x9, 0xf6, 0x3f, 0x2 },
{ 0x8b, 0x8f, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x10, 0x40, 0x17, 0xfe, 0x14, 0x2, 0x34, 0x2, 0x24, 0x2, 0x64, 0x2, 0x7, 0xfe },
{ 0x8b, 0x90, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfe, 0x0, 0x0 },
{ 0x8b, 0x91, 0x8, 0x0, 0x8, 0xff, 0x8, 0x80, 0x8, 0x80, 0x7e, 0x80, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0xe, 0x82, 0x78, 0xfe, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0xff, 0x38, 0x0 },
{ 0x8b, 0x92, 0x12, 0x0, 0x12, 0x3c, 0x13, 0xa4, 0x12, 0xa4, 0x7a, 0xa4, 0x16, 0xa4, 0x14, 0xa4, 0x12, 0xa4, 0x12, 0xa4, 0x1b, 0xa4, 0x71, 0x25, 0x11, 0x45, 0x13, 0x83, 0x12, 0xc0, 0x16, 0x70, 0x34, 0x1f },
{ 0x8b, 0x93, 0x11, 0x4, 0x19, 0x8c, 0x8, 0x88, 0x7f, 0xff, 0x2, 0x20, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0xe7, 0x7, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8b, 0x94, 0x0, 0x0, 0x19, 0xfe, 0xd, 0x0, 0x61, 0xfc, 0x31, 0x4, 0x1, 0x4, 0xd, 0xfc, 0x39, 0x0, 0x61, 0xff, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8b, 0x95, 0x0, 0x40, 0x0, 0x7e, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x81, 0x10, 0xfa, 0x17, 0x80, 0x10, 0x82, 0x10, 0x7e, 0x10, 0x0, 0x10, 0x90, 0x14, 0x92, 0x36, 0x96, 0x22, 0x94, 0x60, 0x90, 0xf, 0xff },
{ 0x8b, 0x96, 0x0, 0x20, 0x3e, 0x20, 0x0, 0x20, 0x7f, 0x7e, 0x0, 0x50, 0x3e, 0x90, 0x0, 0x10, 0x0, 0x10, 0x3e, 0xff, 0x0, 0x10, 0x0, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0x10 },
{ 0x8b, 0x97, 0x0, 0x0, 0x3e, 0xff, 0x22, 0x80, 0x22, 0x80, 0x22, 0x80, 0x22, 0xfe, 0x3e, 0x82, 0x8, 0x82, 0x28, 0x82, 0x2e, 0xfe, 0x28, 0x80, 0x28, 0x80, 0x28, 0x80, 0x2e, 0x80, 0x38, 0xff, 0x60, 0x0 },
{ 0x8b, 0x98, 0x8, 0x0, 0x1c, 0xfe, 0x16, 0x82, 0x32, 0x82, 0x20, 0xfe, 0x7e, 0x88, 0x8, 0x88, 0x8, 0xff, 0x7e, 0x88, 0x8, 0x88, 0x4a, 0xbe, 0x6a, 0xa2, 0x29, 0xa2, 0xd, 0x22, 0x3b, 0x22, 0x60, 0x3e },
{ 0x8b, 0x99, 0x0, 0x80, 0x30, 0x80, 0x19, 0xfc, 0xb, 0x8, 0x6, 0x10, 0x63, 0xfe, 0x32, 0x22, 0x12, 0x22, 0x3, 0xfe, 0xa, 0x22, 0xa, 0x22, 0x1b, 0xfe, 0x10, 0x0, 0x32, 0x92, 0x26, 0xdb, 0x6c, 0x49 },
{ 0x8b, 0x9a, 0xa, 0x0, 0x13, 0xde, 0x24, 0x92, 0x4b, 0xd2, 0x10, 0x92, 0x32, 0xd2, 0x52, 0x92, 0x13, 0xd6, 0x16, 0x10, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x18, 0x8c, 0x73, 0x87 },
{ 0x8b, 0x9b, 0x2, 0x0, 0x2, 0x0, 0x7, 0xf8, 0xc, 0x10, 0x18, 0x20, 0x7f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8b, 0x9c, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0xc, 0x0, 0x30, 0x0, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8b, 0x9d, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x18, 0x0, 0x60, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8b, 0x9e, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x3, 0x80 },
{ 0x8b, 0x9f, 0x8, 0x88, 0x8, 0x88, 0x18, 0x88, 0x10, 0x88, 0x13, 0xfe, 0x30, 0x88, 0x30, 0x88, 0x50, 0x88, 0x10, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x0, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6, 0x16, 0x3 },
{ 0x8b, 0xa0, 0x8, 0x20, 0x8, 0x20, 0x1b, 0xfe, 0x10, 0x20, 0x12, 0x22, 0x33, 0x26, 0x31, 0x24, 0x51, 0x24, 0x10, 0x20, 0x17, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6, 0x16, 0x3 },
{ 0x8b, 0xa1, 0x8, 0x1c, 0x9, 0xf0, 0x18, 0x40, 0x17, 0xff, 0x10, 0x88, 0x31, 0xfc, 0x36, 0x8b, 0x50, 0xf8, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x12, 0xe },
{ 0x8b, 0xa2, 0x0, 0x10, 0x16, 0x34, 0x13, 0x64, 0x11, 0xc4, 0x10, 0xc4, 0x11, 0xe4, 0x13, 0x34, 0x16, 0x14, 0x10, 0x4, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8b, 0xa3, 0x8, 0x10, 0x8, 0x10, 0x7f, 0xff, 0x21, 0x42, 0x12, 0x24, 0x7f, 0xff, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e, 0x14, 0x28, 0x14, 0x28, 0x35, 0x69, 0x26, 0x49, 0x64, 0xc7 },
{ 0x8b, 0xa4, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x8b, 0xa5, 0x0, 0x0, 0x0, 0x8, 0x2c, 0x1a, 0x26, 0x12, 0x23, 0x32, 0x21, 0xa2, 0x20, 0xe2, 0x20, 0xc2, 0x21, 0xe2, 0x23, 0x32, 0x26, 0x1a, 0x2c, 0xa, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8b, 0xa6, 0x10, 0x40, 0x10, 0x40, 0x13, 0xfc, 0x10, 0x44, 0x10, 0xc4, 0x7d, 0x8c, 0x13, 0x18, 0x10, 0x0, 0x11, 0x8, 0x17, 0xff, 0x11, 0x49, 0x11, 0x49, 0x13, 0x49, 0x12, 0x59, 0x16, 0xd3, 0x15, 0xb6 },
{ 0x8b, 0xa7, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x20, 0x0, 0x27, 0xf8, 0x20, 0x80, 0x20, 0x80, 0x23, 0xf0, 0x20, 0x80, 0x20, 0x80, 0x20, 0x80, 0x2f, 0xfc, 0x20, 0x0, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8b, 0xa8, 0xc, 0x0, 0x39, 0xef, 0x21, 0x29, 0x25, 0x29, 0x25, 0xe9, 0x25, 0x29, 0x25, 0x29, 0x25, 0xe9, 0x25, 0x9, 0x25, 0x9, 0x3d, 0x9, 0x65, 0x49, 0xd, 0x49, 0x19, 0xeb, 0x33, 0x28, 0x60, 0x8 },
{ 0x8b, 0xa9, 0x0, 0x4, 0x0, 0x4, 0x3e, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x47, 0x3e, 0x7c, 0x1, 0xc4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4 },
{ 0x8b, 0xaa, 0x0, 0x78, 0x1f, 0xc0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x7, 0xf0, 0x1a, 0x2c, 0x63, 0xe3, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x20, 0xe },
{ 0x8b, 0xab, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x84, 0x7c, 0x48, 0x13, 0xff, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x1d, 0xfe, 0x70, 0x48, 0x0, 0xc9, 0x1, 0x89, 0x7, 0x7 },
{ 0x8b, 0xac, 0x0, 0x20, 0x10, 0x20, 0x11, 0xfe, 0x54, 0x20, 0x55, 0x22, 0x55, 0xa6, 0x54, 0xa4, 0x54, 0xa4, 0x54, 0x20, 0x57, 0xff, 0x54, 0x50, 0x7c, 0xd8, 0x0, 0x88, 0x1, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x8b, 0xad, 0x0, 0x40, 0x7c, 0x44, 0x4, 0xc4, 0x4, 0x9e, 0x5, 0xf2, 0x3c, 0x20, 0x21, 0xfe, 0x21, 0x22, 0x21, 0x22, 0x3d, 0x22, 0x5, 0xfe, 0x4, 0x20, 0x4, 0x22, 0xc, 0x22, 0x8, 0x3f, 0x3b, 0xe1 },
{ 0x8b, 0xae, 0x0, 0x0, 0x7b, 0xff, 0x8, 0x0, 0x9, 0xfe, 0x9, 0x22, 0x39, 0xfe, 0x21, 0x22, 0x23, 0xff, 0x20, 0x0, 0x39, 0xfe, 0x9, 0x22, 0x9, 0xfe, 0x9, 0x22, 0x19, 0xfe, 0x10, 0x0, 0x73, 0xff },
{ 0x8b, 0xaf, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x9, 0xfe, 0x2c, 0x20, 0x2a, 0x20, 0x6a, 0x20, 0x48, 0x20, 0xb, 0xff, 0x8, 0x40, 0x8, 0x40, 0x8, 0xc4, 0x8, 0x84, 0x8, 0x9e, 0x9, 0xf2, 0xb, 0x2 },
{ 0x8b, 0xb0, 0x1, 0xf8, 0x7d, 0x8, 0x11, 0x8, 0x11, 0xc8, 0x11, 0x68, 0x11, 0x28, 0x1d, 0x9, 0x73, 0x9, 0x6, 0x7, 0x0, 0x0, 0x1, 0x80, 0x14, 0xc4, 0x14, 0x46, 0x34, 0xb, 0x26, 0x19, 0x63, 0xf0 },
{ 0x8b, 0xb1, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x88, 0x10, 0x84, 0x60, 0x83, 0x8, 0x8c, 0x8, 0xa6, 0x18, 0xb2, 0x30, 0x90, 0x3, 0x80 },
{ 0x8b, 0xb2, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x7a, 0x22, 0x13, 0x26, 0x11, 0x24, 0x11, 0x24, 0x18, 0x20, 0x77, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6, 0x36, 0x3 },
{ 0x8b, 0xb3, 0x4, 0x50, 0x4, 0x50, 0x3f, 0x90, 0x4, 0xbf, 0x5, 0x24, 0x7f, 0xc4, 0x2, 0x24, 0x3f, 0x2c, 0x9, 0x28, 0x12, 0x38, 0x64, 0x10, 0x7, 0xb8, 0x7c, 0x28, 0x4, 0x6c, 0x4, 0xc6, 0x1d, 0x83 },
{ 0x8b, 0xb4, 0x10, 0x1c, 0x11, 0xf0, 0x10, 0x20, 0x13, 0xff, 0x7c, 0x48, 0x10, 0xfc, 0x13, 0x4b, 0x38, 0x78, 0x34, 0x0, 0x55, 0xfe, 0x51, 0x2, 0x11, 0x7a, 0x11, 0x4a, 0x11, 0x7a, 0x11, 0x2, 0x11, 0x6 },
{ 0x8b, 0xb5, 0x0, 0x0, 0x33, 0xfc, 0x1a, 0x4, 0xa, 0x4, 0x2, 0x4, 0x62, 0x4, 0x32, 0x4, 0x13, 0xfc, 0x0, 0x90, 0x0, 0x90, 0x8, 0x90, 0x18, 0x90, 0x11, 0x90, 0x31, 0x11, 0x23, 0x13, 0x6e, 0xe },
{ 0x8b, 0xb6, 0x0, 0x0, 0x4b, 0xfe, 0x28, 0x20, 0x10, 0x20, 0x10, 0x20, 0x28, 0x20, 0x48, 0x20, 0x9, 0xfc, 0x18, 0x20, 0x18, 0x20, 0x28, 0x20, 0x48, 0x20, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x70, 0x0 },
{ 0x8b, 0xb7, 0x4, 0x20, 0x44, 0x20, 0x2b, 0xfe, 0x10, 0x20, 0x12, 0x22, 0x2b, 0x26, 0x49, 0x24, 0x9, 0x24, 0x18, 0x20, 0x1f, 0xff, 0x28, 0x50, 0x48, 0xd8, 0x8, 0x88, 0x9, 0x8c, 0x1b, 0x6, 0x76, 0x3 },
{ 0x8b, 0xb8, 0x20, 0x1c, 0x21, 0xf0, 0x3c, 0x20, 0x53, 0xff, 0x50, 0x48, 0x10, 0xfc, 0x13, 0x4b, 0x7c, 0x78, 0x10, 0x0, 0x11, 0xfe, 0x39, 0x2, 0x29, 0x7a, 0x2d, 0x4a, 0x65, 0x7a, 0x41, 0x2, 0x1, 0x6 },
{ 0x8b, 0xb9, 0x3c, 0x80, 0x24, 0x80, 0x25, 0xff, 0x25, 0x1, 0x3f, 0x1, 0x24, 0x51, 0x25, 0x55, 0x25, 0x25, 0x25, 0x25, 0x3d, 0x55, 0x25, 0x55, 0x25, 0x5, 0x25, 0xfd, 0x24, 0x3, 0x64, 0x2, 0x4c, 0xe },
{ 0x8b, 0xba, 0x0, 0x40, 0x1f, 0xfc, 0x1, 0x84, 0x1e, 0x38, 0x8, 0x8, 0x7f, 0x7f, 0x11, 0x11, 0x66, 0x66, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x1c },
{ 0x8b, 0xbb, 0x4, 0x0, 0xf, 0xf0, 0x34, 0x1e, 0x24, 0x12, 0x25, 0xd2, 0x3c, 0x1e, 0x25, 0xd2, 0x25, 0x52, 0x3d, 0x5e, 0x25, 0xd2, 0x24, 0x12, 0x24, 0x12, 0x7f, 0xff, 0x4, 0x10, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8b, 0xbc, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x7, 0xf0, 0x1a, 0x2c, 0x63, 0xe3, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe6 },
{ 0x8b, 0xbd, 0x10, 0x0, 0x33, 0xdf, 0x22, 0x51, 0x62, 0x53, 0x4b, 0xd2, 0x2a, 0x56, 0x1a, 0x54, 0x13, 0xd2, 0x32, 0x11, 0x22, 0x11, 0x7a, 0x11, 0xa, 0x91, 0x1a, 0xd1, 0x13, 0x57, 0x36, 0x10, 0x60, 0x10 },
{ 0x8b, 0xbe, 0x10, 0x10, 0x38, 0x10, 0x2d, 0xff, 0x64, 0x82, 0x40, 0x44, 0x7d, 0xff, 0x10, 0x0, 0x10, 0xfe, 0x7c, 0x82, 0x10, 0xfe, 0x54, 0x82, 0x54, 0xfe, 0x50, 0x48, 0x1c, 0x49, 0x30, 0xc9, 0x63, 0x87 },
{ 0x8b, 0xbf, 0x13, 0xef, 0x62, 0x29, 0x2b, 0xea, 0x12, 0x2a, 0x7b, 0xe9, 0x12, 0x49, 0x23, 0xeb, 0x46, 0x28, 0x0, 0x80, 0x3f, 0xfe, 0x2, 0x20, 0x7f, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8b, 0xc0, 0x13, 0xef, 0x62, 0x29, 0x2b, 0xea, 0x12, 0x2a, 0x7b, 0xe9, 0x12, 0x49, 0x23, 0xeb, 0x46, 0x28, 0x0, 0xc0, 0x7, 0xf0, 0x7c, 0x1f, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf4, 0x4, 0xc8, 0x3f, 0x3f },
{ 0x8b, 0xc1, 0x12, 0x20, 0x7f, 0xbe, 0x12, 0x24, 0x3f, 0x54, 0x21, 0x8, 0x5d, 0x14, 0x15, 0x23, 0x1f, 0xf8, 0x8, 0x80, 0xf, 0xf8, 0x8, 0x80, 0xf, 0xf8, 0x8, 0x80, 0x2f, 0xfe, 0x64, 0x92, 0x42, 0x4e },
{ 0x8b, 0xc2, 0x8, 0x60, 0x8, 0xc0, 0x1b, 0x9f, 0x12, 0x11, 0x12, 0x11, 0x32, 0x11, 0x32, 0x11, 0x52, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0xd1, 0x13, 0x97, 0x16, 0x10, 0x10, 0x10, 0x10, 0x10 },
{ 0x8b, 0xc3, 0x4, 0x0, 0x4, 0xbe, 0x67, 0x2, 0x34, 0x24, 0x14, 0x58, 0x3, 0xc8, 0x4, 0x3f, 0x7, 0x89, 0x15, 0xa, 0x19, 0x28, 0x17, 0xae, 0x31, 0x28, 0x22, 0xa8, 0x22, 0x38, 0x64, 0x6c, 0x8, 0xc7 },
{ 0x8b, 0xc4, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x8, 0x88, 0x8, 0x8, 0x7f, 0xff, 0x8, 0x8, 0x8, 0x8, 0x0, 0x0, 0x3f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x6, 0x21, 0xc, 0x33, 0x78, 0x1e },
{ 0x8b, 0xc5, 0x0, 0x20, 0x0, 0x20, 0x7b, 0xfe, 0x48, 0x20, 0x49, 0x24, 0x49, 0x4, 0x4f, 0xff, 0x79, 0x4, 0x49, 0x4, 0x48, 0x0, 0x4b, 0xfe, 0x48, 0x88, 0x78, 0x88, 0x1, 0x89, 0x3, 0x9, 0xe, 0x7 },
{ 0x8b, 0xc6, 0x11, 0x44, 0x19, 0x4c, 0x9, 0x48, 0x7f, 0xff, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8b, 0xc7, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x13, 0xf2, 0x12, 0x12, 0x32, 0x12, 0x23, 0xf2, 0x60, 0x6, 0x0, 0x4, 0x0, 0x1c },
{ 0x8b, 0xc8, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8b, 0xc9, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x40, 0x7c, 0x40, 0x10, 0xe0, 0x10, 0x20, 0x1b, 0xbe, 0x36, 0xa2, 0x32, 0xaa, 0x52, 0xa4, 0x53, 0xaa, 0x10, 0x51, 0x11, 0xc0, 0x10, 0x0, 0x17, 0xff, 0x10, 0x0 },
{ 0x8b, 0xca, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x98, 0x0, 0x8c, 0x0, 0x84, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8b, 0xcb, 0x8, 0x0, 0x9, 0xfe, 0x9, 0x2, 0x7f, 0x2, 0x9, 0x7a, 0x9, 0x2, 0x1d, 0x2, 0x1b, 0x7a, 0x19, 0x4a, 0x29, 0x4a, 0x29, 0x4a, 0x49, 0x7a, 0x9, 0x2, 0x9, 0x2, 0x9, 0x2, 0x9, 0xe },
{ 0x8b, 0xcc, 0x8, 0x6, 0x49, 0x1c, 0x6b, 0x70, 0x2a, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x8, 0x10, 0x9, 0xff, 0x1c, 0x10, 0x1a, 0x10, 0x29, 0x10, 0x28, 0x10, 0x48, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x8b, 0xcd, 0x8, 0x88, 0x8, 0x88, 0xf, 0xff, 0x18, 0x88, 0x10, 0x0, 0x33, 0xfe, 0x32, 0x22, 0x52, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff },
{ 0x8b, 0xce, 0x11, 0x8, 0x11, 0x8, 0x7f, 0xc8, 0x11, 0x8, 0x0, 0x7f, 0x3f, 0x89, 0x24, 0x89, 0x24, 0x89, 0x3f, 0x89, 0x4, 0x9, 0x3f, 0x99, 0x4, 0x11, 0x3f, 0x93, 0x4, 0x32, 0x7, 0xa2, 0x7c, 0x6e },
{ 0x8b, 0xcf, 0x0, 0x80, 0x10, 0x80, 0x10, 0x80, 0x11, 0xfe, 0x7d, 0x2, 0x13, 0x2, 0x10, 0xe2, 0x10, 0x32, 0x10, 0x2, 0x10, 0x1a, 0x1c, 0x72, 0x71, 0xc2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xc, 0x0, 0x38 },
{ 0x8b, 0xd0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x8e, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8b, 0xd1, 0x8, 0x8, 0x1c, 0x10, 0x16, 0x7e, 0x33, 0x42, 0x20, 0x7e, 0x7e, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x7f, 0x10, 0x8, 0xff, 0x4a, 0x91, 0x6a, 0x91, 0x28, 0x91, 0xe, 0x97, 0x38, 0x10, 0x60, 0x10 },
{ 0x8b, 0xd2, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20, 0x0, 0x20 },
{ 0x8b, 0xd3, 0x3, 0x40, 0xe, 0x40, 0x38, 0x40, 0x20, 0x7f, 0x20, 0xc1, 0x3e, 0x93, 0x25, 0x92, 0x24, 0x10, 0x24, 0x10, 0x24, 0x38, 0x24, 0x28, 0x24, 0x28, 0x24, 0x6c, 0x64, 0x44, 0x44, 0xc6, 0x5, 0x83 },
{ 0x8b, 0xd4, 0x8, 0x20, 0x1c, 0x20, 0x16, 0x20, 0x33, 0x7f, 0x20, 0x41, 0x7e, 0xd3, 0x8, 0x92, 0x8, 0x10, 0x7f, 0x10, 0x8, 0x38, 0x4a, 0x28, 0x6a, 0x28, 0x28, 0x6c, 0xf, 0x44, 0x38, 0xc6, 0x61, 0x83 },
{ 0x8b, 0xd5, 0x0, 0x0, 0x7f, 0x3f, 0x8, 0x8, 0x3e, 0x1e, 0x8, 0x8, 0xf, 0x8, 0x78, 0xbf, 0x1, 0xc0, 0x7, 0x70, 0x1c, 0x1c, 0x73, 0xe7, 0x0, 0x0, 0xf, 0xfc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60 },
{ 0x8b, 0xd6, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xfe, 0x14, 0x54, 0x16, 0x54, 0x35, 0x56, 0x64, 0x93, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x8, 0x88, 0x18, 0x8c, 0x70, 0x87, 0x3, 0x80 },
{ 0x8b, 0xd7, 0x0, 0x80, 0x1, 0xc0, 0x7, 0x70, 0x1c, 0x9c, 0x73, 0xe7, 0x9, 0x48, 0x8, 0x88, 0x9, 0x48, 0xf, 0xf8, 0x1, 0x0, 0x3f, 0xfe, 0x22, 0x2, 0x26, 0x22, 0x24, 0xf2, 0x2f, 0x92, 0x20, 0xe },
{ 0x8b, 0xd8, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x24, 0x48, 0x42, 0x84, 0x0, 0x10, 0x1f, 0x10, 0x11, 0x7e, 0x11, 0x12, 0x1f, 0x12, 0x11, 0x12, 0x11, 0x12, 0x1f, 0x12, 0x11, 0x32, 0x31, 0x22, 0x63, 0x6e },
{ 0x8b, 0xd9, 0x0, 0x0, 0x3f, 0x7e, 0x24, 0x2, 0x3f, 0x26, 0x21, 0x14, 0x3f, 0x8, 0x24, 0x14, 0x3f, 0x63, 0x0, 0x80, 0x5, 0x20, 0x2, 0x44, 0x3f, 0xfe, 0x0, 0x82, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87 },
{ 0x8b, 0xda, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0xe, 0x1f, 0xf8, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20, 0x0, 0x20 },
{ 0x8b, 0xdb, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x20, 0x82, 0x2f, 0xfa, 0x22, 0xa2, 0x22, 0xa2, 0x24, 0x92, 0x20, 0x82, 0x20, 0x2, 0x3f, 0xfe },
{ 0x8b, 0xdc, 0x8, 0x10, 0x8, 0x38, 0x8, 0x28, 0x7e, 0x6c, 0x2, 0x44, 0x6, 0xc6, 0xd, 0xbb, 0x8, 0x0, 0x1a, 0x0, 0x3c, 0x7c, 0x6a, 0x4, 0x8, 0x4, 0x8, 0xc, 0x8, 0x8, 0x8, 0x18, 0x8, 0x10 },
{ 0x8b, 0xdd, 0x10, 0x88, 0x10, 0x88, 0x13, 0xff, 0x7c, 0x88, 0x5, 0xdc, 0xd, 0xaa, 0xa, 0x89, 0x10, 0x0, 0x34, 0xfc, 0x58, 0x0, 0x15, 0xfe, 0x10, 0x20, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0x60 },
{ 0x8b, 0xde, 0x0, 0x44, 0x3c, 0x44, 0x1, 0xff, 0x7e, 0x44, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x92, 0x0, 0x92, 0x3c, 0xfe, 0x0, 0x10, 0x0, 0xfe, 0x3c, 0x10, 0x24, 0xfe, 0x24, 0x10, 0x24, 0x10, 0x3d, 0xff },
{ 0x8b, 0xdf, 0x0, 0xc, 0x30, 0x38, 0x18, 0xe0, 0x8, 0x80, 0x0, 0x80, 0x0, 0xff, 0x0, 0x88, 0x78, 0x88, 0x8, 0x88, 0x8, 0x88, 0x9, 0x88, 0x9, 0x8, 0xb, 0x8, 0x18, 0x8, 0x34, 0x0, 0x63, 0xff },
{ 0x8b, 0xe0, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x77, 0xf7, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x7f, 0xff },
{ 0x8b, 0xe1, 0x0, 0x20, 0x0, 0x70, 0x78, 0x50, 0x48, 0xd8, 0x49, 0x8c, 0x4b, 0x6, 0x4e, 0xfb, 0x48, 0x0, 0x48, 0x0, 0x49, 0xfc, 0x48, 0x4, 0x78, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30 },
{ 0x8b, 0xe2, 0x8, 0x0, 0x1c, 0x7e, 0x16, 0x42, 0x33, 0x42, 0x21, 0x7e, 0x7e, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x7f, 0x49, 0x8, 0x4b, 0x4a, 0x4a, 0x6a, 0x4c, 0x28, 0x44, 0xf, 0x46, 0x38, 0x7a, 0x61, 0xc3 },
{ 0x8b, 0xe3, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x7f, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x6, 0x10, 0x4, 0x10, 0xc, 0x11, 0x18, 0x1b, 0x70, 0xe },
{ 0x8b, 0xe4, 0x4, 0x0, 0x5, 0xfc, 0xd, 0x4, 0x9, 0x4, 0x19, 0xfc, 0x11, 0x4, 0x31, 0x4, 0x51, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6 },
{ 0x8b, 0xe5, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x18, 0x2, 0x30, 0x2, 0x67, 0xe2, 0x4, 0x22, 0x4, 0x22, 0x4, 0x22, 0x4, 0x22, 0x7, 0xe2, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0x1c },
{ 0x8b, 0xe6, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x20, 0x10, 0x2c, 0x10, 0x26, 0x30, 0x23, 0x20, 0x21, 0xe0, 0x20, 0xc0, 0x21, 0xe0, 0x23, 0x30, 0x26, 0x18, 0x2c, 0x8, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8b, 0xe7, 0x5, 0x0, 0x45, 0x0, 0x29, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x2a, 0x2, 0x4d, 0xf2, 0x9, 0x12, 0x19, 0x12, 0x19, 0x12, 0x29, 0x12, 0x49, 0xf2, 0x8, 0x2, 0x8, 0x2, 0x18, 0x6, 0x70, 0x1c },
{ 0x8b, 0xe8, 0x0, 0x80, 0x0, 0x80, 0x7c, 0xf8, 0x10, 0x88, 0x11, 0x88, 0x11, 0x8, 0x13, 0x18, 0x7c, 0x10, 0x10, 0x30, 0x10, 0x20, 0x10, 0x70, 0x10, 0x50, 0x1c, 0xd8, 0x71, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x8b, 0xe9, 0x10, 0x0, 0x10, 0x7f, 0x10, 0x40, 0x3f, 0x40, 0x28, 0x40, 0x68, 0x7e, 0x8, 0x42, 0x7f, 0xc2, 0x8, 0x42, 0x8, 0x7e, 0x1c, 0x40, 0x16, 0x40, 0x33, 0x40, 0x21, 0x40, 0x60, 0x7f, 0x0, 0x0 },
{ 0x8b, 0xea, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8b, 0xeb, 0x4, 0x0, 0x8, 0xff, 0x3e, 0x80, 0x22, 0x82, 0x22, 0xa2, 0x3e, 0xb6, 0x22, 0x94, 0x22, 0x9c, 0x3e, 0x88, 0x23, 0x8c, 0x22, 0x9c, 0x7e, 0x96, 0x6, 0xb2, 0xa, 0xa2, 0x12, 0x80, 0x6e, 0xff },
{ 0x8b, 0xec, 0x0, 0x0, 0x3f, 0xbf, 0x24, 0x20, 0x24, 0x20, 0x3f, 0x2a, 0x24, 0x2a, 0x24, 0x2a, 0x3f, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3f, 0xaa, 0x0, 0xaa, 0x55, 0xaa, 0x54, 0xa0, 0x41, 0xa0, 0x7, 0x3e },
{ 0x8b, 0xed, 0x0, 0x6, 0x3f, 0x8c, 0x24, 0x38, 0x24, 0x20, 0x3f, 0x20, 0x24, 0x3f, 0x24, 0x24, 0x3f, 0x24, 0x24, 0x24, 0x24, 0x24, 0x3f, 0xa4, 0x0, 0xa4, 0x55, 0xa4, 0x54, 0xa4, 0x41, 0xa4, 0x7, 0x7f },
{ 0x8b, 0xee, 0x0, 0x20, 0x3f, 0x20, 0x24, 0x3f, 0x24, 0x61, 0x3f, 0x41, 0x24, 0xfd, 0x24, 0x25, 0x3f, 0x25, 0x24, 0x25, 0x24, 0x25, 0x3f, 0xbd, 0x0, 0x81, 0x55, 0x81, 0x54, 0x83, 0x41, 0x82, 0x7, 0xe },
{ 0x8b, 0xef, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x8b, 0xf0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x92, 0x20, 0xfa, 0x2f, 0x8a, 0x20, 0x6, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8b, 0xf1, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x1f, 0xfe, 0x11, 0x2, 0x17, 0xf8, 0x11, 0x2, 0x10, 0xfe, 0x10, 0x0, 0x15, 0xf8, 0x15, 0x8, 0x17, 0xfc, 0x30, 0x4, 0x2f, 0xff, 0x61, 0x8, 0x6, 0x6 },
{ 0x8b, 0xf2, 0x0, 0x20, 0x0, 0x70, 0x78, 0xd8, 0x49, 0x8c, 0x4f, 0x27, 0x49, 0xfc, 0x49, 0x4, 0x49, 0xfc, 0x49, 0x4, 0x49, 0xfd, 0x49, 0x23, 0x79, 0x36, 0x1, 0x18, 0x1, 0xc, 0x1, 0xe6, 0x7, 0x3 },
{ 0x8b, 0xf3, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x22, 0x22, 0x2, 0x20, 0x6, 0x20, 0xc, 0x3e, 0x38, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8b, 0xf4, 0x4, 0x0, 0x5, 0xfe, 0xd, 0x22, 0x9, 0x22, 0x19, 0xfe, 0x11, 0x22, 0x31, 0x22, 0x51, 0xfe, 0x10, 0x20, 0x13, 0xff, 0x12, 0x21, 0x12, 0x29, 0x12, 0x3d, 0x12, 0xe5, 0x12, 0x1, 0x12, 0x7 },
{ 0x8b, 0xf5, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x92, 0x21, 0xfa, 0x2f, 0xa, 0x20, 0x6 },
{ 0x8b, 0xf6, 0x0, 0x0, 0x31, 0xfc, 0x19, 0x24, 0x9, 0xfc, 0x1, 0x24, 0x1, 0x24, 0x1, 0xfc, 0x70, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x2a, 0x12, 0x3a, 0x12, 0xea, 0x32, 0x6, 0x28, 0x0, 0x67, 0xff },
{ 0x8b, 0xf7, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x92, 0x26, 0x92, 0x2c, 0xfe, 0x28, 0x92, 0x28, 0x92, 0x24, 0xfe, 0x24, 0x10, 0x25, 0xff, 0x25, 0x11, 0x25, 0x15, 0x2d, 0x1d, 0x21, 0x75, 0x21, 0x1, 0x21, 0x7 },
{ 0x8b, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8b, 0xf9, 0x11, 0x8, 0x11, 0x8, 0x13, 0xef, 0x7a, 0x94, 0x14, 0x42, 0x10, 0x0, 0x33, 0xef, 0x3a, 0x29, 0x37, 0xe9, 0x52, 0x29, 0x53, 0xe9, 0x12, 0x9, 0x12, 0x49, 0x13, 0xeb, 0x16, 0x28, 0x10, 0x8 },
{ 0x8b, 0xfa, 0x8, 0x2, 0x1c, 0x92, 0x16, 0x92, 0x32, 0x92, 0x21, 0x92, 0x7e, 0x92, 0x8, 0x92, 0x8, 0x92, 0x7e, 0x92, 0x8, 0x92, 0x4a, 0x92, 0x6a, 0x92, 0x28, 0x92, 0xf, 0x82, 0x79, 0x2, 0x3, 0x2 },
{ 0x8b, 0xfb, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x12, 0x22, 0x11, 0x24, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x33, 0xfe, 0x22, 0x2, 0x62, 0x2, 0x2, 0xe },
{ 0x8b, 0xfc, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x40, 0x14, 0x44, 0x14, 0x44, 0x14, 0x44, 0x17, 0xfc, 0x30, 0x40, 0x28, 0x42, 0x28, 0x42, 0x68, 0x42, 0xf, 0xfe },
{ 0x8c, 0x40, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x7b, 0xfe, 0x12, 0x0, 0x12, 0x10, 0x12, 0x92, 0x1a, 0x92, 0x72, 0xfe, 0x12, 0x10, 0x12, 0x10, 0x16, 0x92, 0x14, 0x92, 0x1c, 0x92, 0x30, 0xfe },
{ 0x8c, 0x41, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x2c, 0x3f, 0x70, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x14, 0x44, 0x14, 0x44, 0x37, 0xfc, 0x28, 0x42, 0x68, 0x42, 0xf, 0xfe },
{ 0x8c, 0x42, 0x0, 0x80, 0x0, 0x82, 0x7e, 0xc6, 0x2, 0xec, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x73, 0x87, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8c, 0x43, 0x12, 0x28, 0x12, 0x28, 0x7f, 0xa8, 0x12, 0x68, 0x12, 0x49, 0x1e, 0x4b, 0x8, 0xce, 0x3f, 0x48, 0x29, 0x48, 0x29, 0x48, 0x3f, 0x48, 0x8, 0x48, 0x7f, 0xc8, 0x8, 0x49, 0x8, 0x49, 0x8, 0x47 },
{ 0x8c, 0x44, 0x10, 0x84, 0x23, 0xe8, 0x48, 0x92, 0x33, 0xec, 0x2a, 0xa9, 0x7b, 0xff, 0x12, 0xa4, 0x5b, 0xed, 0x54, 0x95, 0x53, 0xe5, 0x10, 0x84, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8c, 0x45, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x42, 0x26, 0x42, 0x7c, 0x7f, 0x0, 0x0, 0x30, 0x20, 0x19, 0xfe, 0x60, 0x20, 0x33, 0xff, 0x0, 0x0, 0x8, 0x20, 0x19, 0xfe, 0x30, 0x20, 0x63, 0xff },
{ 0x8c, 0x46, 0x10, 0x20, 0x21, 0x26, 0x7f, 0xbc, 0x0, 0xa0, 0x3f, 0x21, 0x21, 0x1f, 0x3f, 0x0, 0x21, 0x26, 0x3f, 0x3c, 0x21, 0x20, 0x21, 0x21, 0x23, 0x1f, 0x0, 0x0, 0x12, 0x24, 0x33, 0x36, 0x61, 0x13 },
{ 0x8c, 0x47, 0x0, 0x0, 0x3d, 0xfc, 0x25, 0x24, 0x25, 0x24, 0x2d, 0xfc, 0x29, 0x24, 0x29, 0x24, 0x25, 0xfc, 0x24, 0x0, 0x27, 0xff, 0x25, 0x20, 0x25, 0x32, 0x2d, 0x14, 0x21, 0x18, 0x21, 0xcc, 0x27, 0x7 },
{ 0x8c, 0x48, 0x1, 0x0, 0x3, 0xf0, 0xe, 0x20, 0x38, 0x60, 0x1, 0xb0, 0x7, 0x18, 0x1c, 0xc, 0x70, 0x87, 0x8, 0x88, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8c, 0x49, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8c, 0x4a, 0x8, 0x7c, 0x18, 0x44, 0x10, 0x44, 0x64, 0x7c, 0x2c, 0x0, 0x19, 0xef, 0x11, 0x29, 0x25, 0x29, 0x7d, 0xef, 0x14, 0x10, 0x11, 0xff, 0x54, 0x54, 0x54, 0x54, 0x54, 0xd6, 0x11, 0x93, 0x10, 0x10 },
{ 0x8c, 0x4b, 0xf, 0xf8, 0x2, 0x30, 0x1, 0xc0, 0xe, 0x3c, 0x0, 0x0, 0x3f, 0x7e, 0x12, 0x24, 0xc, 0x18, 0x73, 0x67, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8c, 0x4c, 0x10, 0x24, 0x38, 0xe4, 0x2f, 0x84, 0x64, 0x95, 0x40, 0x95, 0x7f, 0xf5, 0x10, 0x95, 0x11, 0xc4, 0x7d, 0xa4, 0x12, 0xa4, 0x54, 0x8e, 0x54, 0x8a, 0x50, 0x8a, 0x1c, 0x8a, 0x30, 0x9b, 0x60, 0x91 },
{ 0x8c, 0x4d, 0x1, 0x88, 0x3f, 0x8, 0x4, 0x8, 0x7f, 0xc8, 0x4, 0x3f, 0x3f, 0x89, 0x24, 0x89, 0x3f, 0x89, 0x24, 0x89, 0x3f, 0x99, 0x4, 0x13, 0x3f, 0x92, 0x4, 0x36, 0x7f, 0xc0, 0x22, 0x22, 0x41, 0x11 },
{ 0x8c, 0x4e, 0x0, 0x0, 0x1f, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x7f, 0xff, 0x1, 0x4, 0x1, 0x4, 0x1f, 0xfc, 0x2, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x14, 0x2, 0x64, 0x2, 0x4, 0x2, 0x4, 0x2, 0x7, 0xfe },
{ 0x8c, 0x4f, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x24, 0x22, 0x42, 0x11 },
{ 0x8c, 0x50, 0x0, 0x2, 0x3c, 0x82, 0x0, 0x92, 0x7e, 0x92, 0x0, 0x92, 0x3c, 0x92, 0x0, 0x92, 0x0, 0x92, 0x3c, 0x92, 0x0, 0x92, 0x0, 0x92, 0x3c, 0x92, 0x24, 0x92, 0x24, 0x82, 0x24, 0x82, 0x3d, 0x2 },
{ 0x8c, 0x51, 0x0, 0x41, 0x3f, 0x63, 0x9, 0x22, 0x9, 0x7f, 0x7f, 0x88, 0x9, 0x8, 0x9, 0x8, 0x3f, 0x3e, 0x10, 0x8, 0x10, 0x8, 0x3f, 0x8, 0x51, 0x7f, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x1f, 0x8 },
{ 0x8c, 0x52, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80 },
{ 0x8c, 0x53, 0x0, 0x0, 0x3f, 0xbf, 0x8, 0xa1, 0x8, 0xa3, 0x7f, 0xe2, 0x8, 0xa6, 0x8, 0xa4, 0x3f, 0xa2, 0x10, 0x21, 0x10, 0x21, 0x3f, 0xa1, 0x50, 0xa1, 0x10, 0xa7, 0x10, 0xa0, 0x10, 0xa0, 0x1f, 0xa0 },
{ 0x8c, 0x54, 0x4, 0x10, 0x4, 0x10, 0x3f, 0x90, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xdc, 0x0, 0x16, 0x4, 0x13, 0x4, 0x11, 0x3f, 0x90, 0x4, 0x10, 0x4, 0x10, 0x5, 0xd0, 0x1f, 0x10, 0x70, 0x10 },
{ 0x8c, 0x55, 0x8, 0x0, 0x8, 0x3e, 0x7f, 0x22, 0x9, 0x22, 0x9, 0x22, 0x19, 0x22, 0x37, 0x3e, 0x60, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x44, 0xc, 0x68, 0x74, 0x30, 0x4, 0x18, 0x7, 0x8c, 0x3c, 0x7 },
{ 0x8c, 0x56, 0x8, 0x0, 0x8, 0x7e, 0x8, 0x42, 0x7f, 0x46, 0x1, 0x44, 0x3, 0x4c, 0x6, 0x48, 0xc, 0x44, 0x18, 0x42, 0x3e, 0x42, 0x6b, 0x42, 0x9, 0x42, 0x8, 0x42, 0x8, 0x4e, 0x8, 0x40, 0x8, 0x40 },
{ 0x8c, 0x57, 0x4, 0x6, 0x4, 0x3c, 0xf, 0xe0, 0x8, 0x40, 0x18, 0xc4, 0x11, 0x8c, 0x30, 0xd8, 0x50, 0x32, 0x10, 0x62, 0x17, 0xff, 0x10, 0x21, 0x11, 0x24, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0x20 },
{ 0x8c, 0x58, 0x8, 0x0, 0x8, 0xff, 0x18, 0x8, 0x14, 0x10, 0x14, 0x7e, 0x35, 0x42, 0x36, 0x42, 0x54, 0x7e, 0x14, 0x42, 0x14, 0x42, 0x15, 0x7e, 0x15, 0x42, 0x13, 0x42, 0x10, 0x7e, 0x10, 0x24, 0x10, 0xc3 },
{ 0x8c, 0x59, 0x0, 0x2, 0x7f, 0xa2, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x7f, 0xa2, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x2, 0x12, 0x2, 0x32, 0x2, 0x22, 0x2, 0x62, 0xe },
{ 0x8c, 0x5a, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8c, 0x5b, 0x0, 0x20, 0x7f, 0xa0, 0x0, 0x7f, 0x3f, 0x44, 0x21, 0xcc, 0x21, 0x28, 0x3f, 0x38, 0x20, 0x6c, 0x20, 0xc6, 0x60, 0x3, 0x4f, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8c, 0x5c, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8c, 0x5d, 0x0, 0x20, 0x7c, 0x20, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x7d, 0xff, 0x10, 0x0, 0x10, 0x20, 0x10, 0x20, 0x11, 0xfe, 0x10, 0x20, 0x1c, 0x20, 0x70, 0x20, 0x3, 0xff, 0x0, 0x0 },
{ 0x8c, 0x5e, 0x0, 0x2, 0x7f, 0xa2, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x7f, 0xa2, 0x12, 0x22, 0x12, 0x2, 0x32, 0x2, 0x60, 0xe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8c, 0x5f, 0x8, 0x0, 0x8, 0x0, 0x7f, 0x7e, 0x8, 0x12, 0x3f, 0x12, 0x8, 0x32, 0x8, 0x22, 0x1f, 0x66, 0x70, 0x4c, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x8c, 0x60, 0x0, 0x2, 0x7f, 0x86, 0x12, 0xc, 0x12, 0x18, 0x12, 0x30, 0x12, 0x2, 0x7f, 0x86, 0x12, 0xc, 0x12, 0x18, 0x12, 0x30, 0x12, 0x0, 0x12, 0x2, 0x32, 0x6, 0x22, 0xc, 0x22, 0x18, 0x62, 0x70 },
{ 0x8c, 0x61, 0x8, 0x0, 0x1b, 0xfc, 0x31, 0x4, 0x61, 0x8c, 0x0, 0xd8, 0x8, 0x70, 0x19, 0xdc, 0x37, 0x7, 0x70, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x8c, 0x62, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x40, 0x12, 0x66, 0x12, 0x2b, 0x33, 0x19, 0x61, 0xf0 },
{ 0x8c, 0x63, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x20, 0x0, 0x3f, 0xff, 0x20, 0x41, 0x25, 0x2a, 0x29, 0xf9, 0x20, 0x80, 0x21, 0xfc, 0x6f, 0x18, 0x40, 0xe0, 0x1f, 0x1f },
{ 0x8c, 0x64, 0x8, 0x8, 0x7f, 0x7f, 0x8, 0x8, 0x7f, 0x7f, 0x8, 0x8, 0x7f, 0x7f, 0x8, 0x8, 0x3f, 0xfe, 0x0, 0x2, 0x3f, 0xfe, 0x0, 0x2, 0x3f, 0xfe, 0x0, 0x80, 0x12, 0x46, 0x32, 0xb, 0x61, 0xf9 },
{ 0x8c, 0x65, 0x2, 0x8, 0xe, 0x10, 0x38, 0x7e, 0x8, 0x42, 0x7f, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e, 0x0, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8c, 0x66, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x7d, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x80, 0x1d, 0xff, 0x73, 0x1, 0x16, 0x31, 0x13, 0xe1, 0x12, 0x1, 0x12, 0x13, 0x11, 0xf2, 0x30, 0xe },
{ 0x8c, 0x67, 0x10, 0x48, 0x10, 0x90, 0x11, 0xff, 0x13, 0x10, 0x7d, 0xfe, 0x11, 0x10, 0x11, 0xfe, 0x11, 0x10, 0x1d, 0xff, 0x70, 0x0, 0x13, 0xfc, 0x10, 0x44, 0x10, 0x4f, 0x10, 0xc1, 0x11, 0x83, 0x37, 0xe },
{ 0x8c, 0x68, 0x12, 0x20, 0x12, 0x20, 0x7f, 0xa0, 0x12, 0x7f, 0x12, 0x44, 0x20, 0xc4, 0x3f, 0x24, 0x21, 0x2c, 0x7d, 0x28, 0x25, 0x38, 0x25, 0x10, 0x25, 0x38, 0x3d, 0x28, 0x3, 0x6c, 0x2, 0x46, 0xe, 0xc3 },
{ 0x8c, 0x69, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x4, 0x90, 0xc, 0x98, 0x3b, 0x8e },
{ 0x8c, 0x6a, 0x8, 0x10, 0x8, 0x10, 0x8, 0xfe, 0x7e, 0x10, 0x8, 0x10, 0x8, 0x10, 0x1d, 0xff, 0x1a, 0x0, 0x1a, 0x10, 0x28, 0x10, 0x28, 0xfe, 0x48, 0x10, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x0 },
{ 0x8c, 0x6b, 0x0, 0x6, 0x30, 0x3c, 0x1b, 0xe0, 0x8, 0x42, 0x2, 0x66, 0x63, 0x2c, 0x31, 0x8, 0x10, 0x20, 0x1, 0xfe, 0x8, 0x20, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x50, 0x30, 0xd8, 0x21, 0x8c, 0x67, 0x7 },
{ 0x8c, 0x6c, 0x0, 0x10, 0x0, 0x10, 0x7c, 0xfe, 0x54, 0x10, 0x54, 0x10, 0x54, 0x10, 0x7d, 0xff, 0x54, 0x0, 0x54, 0x10, 0x54, 0x10, 0x54, 0xfe, 0x7c, 0x10, 0x0, 0x10, 0x0, 0x10, 0x1, 0xff, 0x0, 0x0 },
{ 0x8c, 0x6d, 0x4, 0x24, 0x1c, 0x22, 0x71, 0xff, 0x10, 0x48, 0x10, 0x48, 0x7c, 0x8f, 0x11, 0x40, 0x10, 0x7c, 0x38, 0x40, 0x34, 0x7e, 0x54, 0x0, 0x50, 0xfe, 0x10, 0x82, 0x10, 0xfe, 0x10, 0x82, 0x10, 0xfe },
{ 0x8c, 0x6e, 0x0, 0xc, 0x0, 0x78, 0x3f, 0xc0, 0x1, 0x0, 0x3, 0x10, 0x6, 0x30, 0xc, 0x60, 0x6, 0xcc, 0x1, 0x86, 0x7f, 0xff, 0x0, 0x81, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8c, 0x6f, 0x8, 0x0, 0x19, 0xfe, 0x10, 0x82, 0x64, 0xc6, 0x2c, 0x6c, 0x18, 0x38, 0x10, 0x6c, 0x25, 0xc7, 0x7e, 0x10, 0xa, 0x10, 0x8, 0xfe, 0x2a, 0x10, 0x2a, 0x10, 0x6a, 0x10, 0x49, 0xff, 0x8, 0x0 },
{ 0x8c, 0x70, 0x8, 0x88, 0x18, 0xc9, 0x30, 0xaa, 0x62, 0xaa, 0x36, 0x88, 0xc, 0xff, 0x18, 0x88, 0x32, 0x9c, 0x7e, 0x9c, 0xa, 0xaa, 0x8, 0xaa, 0x2a, 0xc9, 0x2a, 0x88, 0x6a, 0x80, 0x48, 0xff, 0x8, 0x0 },
{ 0x8c, 0x71, 0x8, 0x3c, 0x7f, 0xa4, 0x8, 0x24, 0x3f, 0x47, 0x29, 0x80, 0x3f, 0x7e, 0x29, 0x22, 0x3f, 0x14, 0x8, 0x8, 0x7f, 0xb7, 0x8, 0x80, 0x3, 0x10, 0x1, 0xa2, 0x7f, 0xff, 0x4, 0x91, 0x38, 0x8c },
{ 0x8c, 0x72, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x4, 0x8, 0x3f, 0xc8, 0x4, 0x8, 0x4, 0x8, 0x7f, 0xee, 0x0, 0xb, 0x4, 0x9, 0x3f, 0xc8, 0x4, 0x8, 0x7, 0xe8, 0x7c, 0x8 },
{ 0x8c, 0x73, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3f, 0xfc, 0x4, 0x8, 0x3, 0x30, 0x1, 0xe0, 0xf, 0x38, 0x78, 0x8f, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff },
{ 0x8c, 0x74, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x7f, 0x82, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x7f, 0xa2, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x32, 0x2, 0x22, 0x2, 0x62, 0xe },
{ 0x8c, 0x75, 0x3, 0x2, 0x31, 0x86, 0x18, 0x8c, 0x8, 0x8, 0x7f, 0xff, 0x40, 0x81, 0x40, 0x81, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x84, 0x7, 0xfe, 0x7c, 0x2 },
{ 0x8c, 0x76, 0x0, 0x10, 0x3e, 0x10, 0x0, 0x10, 0x7f, 0x10, 0x0, 0x10, 0x3e, 0x10, 0x0, 0xff, 0x0, 0x10, 0x3e, 0x10, 0x0, 0x10, 0x0, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0x10 },
{ 0x8c, 0x77, 0x0, 0x40, 0x3e, 0x46, 0x0, 0x7c, 0x7f, 0x40, 0x0, 0x41, 0x3e, 0x63, 0x0, 0x3e, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x7e, 0x0, 0x42, 0x3e, 0x42, 0x22, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x7e },
{ 0x8c, 0x78, 0x12, 0x20, 0x7f, 0xa0, 0x12, 0x7f, 0x3f, 0x44, 0x61, 0x2c, 0x3d, 0x18, 0x25, 0x24, 0x3e, 0xc3, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8c, 0x79, 0x8, 0x0, 0x8, 0xfe, 0x7f, 0x42, 0x8, 0x66, 0x3e, 0x2c, 0x2a, 0x38, 0x2a, 0x6c, 0x3e, 0xc7, 0x2a, 0x10, 0x2a, 0x10, 0x3e, 0xfe, 0x8, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x0 },
{ 0x8c, 0x7a, 0x0, 0x0, 0x7e, 0xff, 0x22, 0x10, 0x36, 0x7e, 0x1c, 0x42, 0x8, 0x42, 0x1c, 0x7e, 0x36, 0x42, 0x63, 0x42, 0x8, 0x7e, 0x3e, 0x42, 0x8, 0x42, 0x8, 0x7e, 0xf, 0x24, 0x78, 0x66, 0x0, 0xc3 },
{ 0x8c, 0x7b, 0x7, 0x8, 0x7c, 0x10, 0x1, 0x7e, 0x4b, 0x42, 0x6a, 0x7e, 0x20, 0x42, 0x8, 0x7e, 0x3e, 0x40, 0x8, 0x7f, 0x8, 0x40, 0x7f, 0x7f, 0x8, 0x1, 0x1c, 0xab, 0x16, 0xa9, 0x32, 0x83, 0x60, 0x6 },
{ 0x8c, 0x7c, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x6, 0x8, 0x4, 0xc, 0xc, 0x4, 0x9, 0xfe, 0x3f, 0x2 },
{ 0x8c, 0x7d, 0x0, 0x20, 0x30, 0x60, 0x19, 0xde, 0x9, 0x12, 0x1, 0x12, 0x1, 0x12, 0x1, 0x12, 0x79, 0x12, 0x9, 0x12, 0x9, 0x12, 0x9, 0xd2, 0xb, 0x16, 0x8, 0x10, 0x18, 0x10, 0x34, 0x0, 0x63, 0xff },
{ 0x8c, 0x7e, 0x10, 0x10, 0x1e, 0x10, 0x32, 0xff, 0x24, 0x0, 0x7e, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x3e, 0x42, 0x2a, 0x7e, 0x2a, 0x10, 0x3e, 0x10, 0x0, 0x54, 0x1, 0x56, 0x55, 0x52, 0x54, 0x93, 0x40, 0x30 },
{ 0x8c, 0x80, 0x4, 0x2, 0x7, 0xd2, 0x4, 0x12, 0x3f, 0xd2, 0x24, 0x52, 0x27, 0x12, 0x3c, 0x52, 0x27, 0xd2, 0x20, 0x12, 0x3f, 0xd2, 0x24, 0x12, 0x2a, 0x42, 0x35, 0x82, 0x6b, 0x42, 0x45, 0x22, 0x1b, 0xe },
{ 0x8c, 0x81, 0x4, 0x14, 0x4, 0x16, 0x7f, 0xd2, 0x4, 0x10, 0x3f, 0x9f, 0x20, 0xf0, 0x20, 0x90, 0x3f, 0x92, 0x20, 0x92, 0x20, 0x96, 0x3f, 0x9c, 0x4, 0x8, 0x7f, 0xdd, 0x4, 0x35, 0x4, 0x67, 0x4, 0xc2 },
{ 0x8c, 0x82, 0x8, 0x3c, 0x7f, 0xa4, 0x29, 0x47, 0x3f, 0x0, 0x29, 0x7e, 0x3f, 0x24, 0x8, 0x18, 0x7f, 0xa7, 0x8, 0x0, 0x7, 0xf0, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x3, 0x80 },
{ 0x8c, 0x83, 0x1, 0x8, 0x22, 0x8, 0x37, 0xc8, 0x14, 0x5f, 0x7, 0xd2, 0x44, 0x72, 0x67, 0xd2, 0x21, 0x1a, 0xf, 0xea, 0x12, 0xe, 0x13, 0xc4, 0x32, 0x44, 0x26, 0x4e, 0x24, 0xca, 0x6c, 0x9b, 0x59, 0x91 },
{ 0x8c, 0x84, 0x0, 0x20, 0x3c, 0xa4, 0x25, 0xa6, 0x27, 0x23, 0x2c, 0x20, 0x29, 0xfc, 0x29, 0x4, 0x25, 0xfc, 0x25, 0x4, 0x25, 0xfc, 0x24, 0x20, 0x25, 0x24, 0x29, 0x24, 0x23, 0x26, 0x26, 0x23, 0x20, 0xe0 },
{ 0x8c, 0x85, 0x10, 0x80, 0x10, 0x9e, 0x11, 0x80, 0x7d, 0x0, 0x13, 0x0, 0x12, 0x80, 0x38, 0xbf, 0x35, 0x84, 0x31, 0x4, 0x53, 0x4, 0x51, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x1c },
{ 0x8c, 0x86, 0xa, 0x4, 0xb, 0xc4, 0x1a, 0x7f, 0x17, 0x54, 0x15, 0xd4, 0x30, 0x94, 0x31, 0xbf, 0x53, 0x4, 0x16, 0x4, 0x10, 0x20, 0x17, 0xff, 0x10, 0xa8, 0x11, 0xac, 0x13, 0x26, 0x16, 0x23, 0x10, 0x20 },
{ 0x8c, 0x87, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x8, 0x2, 0x18, 0x86, 0x30, 0x8c, 0x60, 0x88, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x8c, 0x88, 0x0, 0x40, 0x30, 0x40, 0x18, 0x40, 0xb, 0xfc, 0x0, 0x44, 0x60, 0x44, 0x30, 0x44, 0x10, 0x44, 0x7, 0xff, 0x8, 0xa0, 0x8, 0xb0, 0x19, 0x90, 0x11, 0x18, 0x33, 0xc, 0x26, 0x6, 0x6c, 0x3 },
{ 0x8c, 0x89, 0x1, 0x0, 0x27, 0xdf, 0x31, 0x9, 0x17, 0xc9, 0x1, 0x19, 0x41, 0xd3, 0x67, 0x36, 0x20, 0x0, 0x0, 0x88, 0x11, 0x10, 0x10, 0xa2, 0x17, 0xff, 0x30, 0x21, 0x21, 0x24, 0x23, 0x26, 0x66, 0x23 },
{ 0x8c, 0x8a, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x2, 0x20, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x30, 0x6, 0x60, 0x3 },
{ 0x8c, 0x8b, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10, 0x61, 0xff, 0x34, 0x10, 0xc, 0x10, 0x18, 0x10, 0x34, 0xfe, 0x7e, 0x0, 0xa, 0x0, 0x8, 0xfe, 0x2a, 0x82, 0x2a, 0x82, 0x6a, 0x82, 0x48, 0x82, 0x8, 0xfe },
{ 0x8c, 0x8c, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8c, 0x8d, 0x0, 0x20, 0x3c, 0x20, 0x0, 0x20, 0x7e, 0xfc, 0x0, 0x24, 0x3c, 0x24, 0x0, 0x24, 0x0, 0x24, 0x3d, 0xff, 0x0, 0x50, 0x0, 0x50, 0x3c, 0x58, 0x24, 0xc8, 0x24, 0x8c, 0x25, 0x86, 0x3d, 0x3 },
{ 0x8c, 0x8e, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x10, 0x8, 0x30, 0x8, 0x60, 0x38 },
{ 0x8c, 0x8f, 0x8, 0x20, 0x9, 0x20, 0x19, 0x20, 0x11, 0x20, 0x13, 0xfe, 0x32, 0x20, 0x36, 0x20, 0x50, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x8c, 0x90, 0x8, 0x20, 0x8, 0x70, 0x18, 0xd8, 0x11, 0x8c, 0x17, 0x7, 0x31, 0xfc, 0x30, 0x20, 0x53, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x7 },
{ 0x8c, 0x91, 0xa, 0x44, 0xb, 0x4c, 0x19, 0x48, 0x17, 0xfe, 0x10, 0x90, 0x30, 0x90, 0x3f, 0xff, 0x51, 0x8, 0x12, 0xc, 0x17, 0xf6, 0x1c, 0x13, 0x10, 0x10, 0x13, 0xf0, 0x12, 0x2, 0x12, 0x6, 0x11, 0xfc },
{ 0x8c, 0x92, 0x8, 0x10, 0xf, 0x7e, 0x9, 0x12, 0x19, 0x12, 0x12, 0x7f, 0x37, 0x12, 0x31, 0x12, 0x51, 0x7e, 0x15, 0x10, 0x15, 0x7e, 0x17, 0x10, 0x12, 0xff, 0x12, 0x10, 0x16, 0x10, 0x15, 0x0, 0x14, 0xff },
{ 0x8c, 0x93, 0x8, 0x8, 0x4, 0x10, 0x3f, 0xfe, 0x2, 0x40, 0x1f, 0xfc, 0x2, 0x44, 0x2, 0x44, 0x7f, 0xff, 0x2, 0x44, 0x2, 0x44, 0x1f, 0xfc, 0xa, 0x50, 0x1a, 0x58, 0x32, 0x4c, 0x62, 0x47, 0x2, 0x40 },
{ 0x8c, 0x94, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x1f, 0xfc, 0x1, 0x40, 0x2, 0x20, 0x7f, 0xff, 0x6, 0x30, 0xc, 0x18, 0x1f, 0xfc, 0x71, 0x17, 0x3, 0x10, 0x2, 0x10, 0x6, 0x30, 0xc, 0x20, 0x38, 0xe0 },
{ 0x8c, 0x95, 0x4, 0x2, 0xe, 0x12, 0x1b, 0x12, 0x11, 0x92, 0x30, 0xd2, 0x6f, 0x12, 0x4, 0x12, 0x3f, 0xd2, 0x24, 0x52, 0x24, 0x52, 0x3f, 0xd2, 0x4, 0x2, 0xe, 0x2, 0x1b, 0x2, 0x31, 0x82, 0x60, 0xce },
{ 0x8c, 0x96, 0x0, 0x20, 0x0, 0x20, 0x7b, 0xfe, 0x4a, 0x2, 0x4a, 0x2, 0x49, 0xfc, 0x48, 0x0, 0x49, 0xfc, 0x49, 0x4, 0x49, 0x4, 0x49, 0xfc, 0x79, 0x4, 0x1, 0x4, 0x1, 0xfc, 0x0, 0x0, 0x7, 0xff },
{ 0x8c, 0x97, 0x0, 0x0, 0x3f, 0xfe, 0x24, 0x92, 0x22, 0xa2, 0x2f, 0xfa, 0x21, 0x42, 0x2f, 0xfa, 0x22, 0x22, 0x27, 0xf2, 0x38, 0x2e, 0x23, 0xe2, 0x22, 0x12, 0x23, 0xf2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8c, 0x98, 0x0, 0x0, 0x3f, 0x7e, 0x24, 0x22, 0x24, 0x26, 0x3f, 0x34, 0x21, 0x1c, 0x3f, 0x8, 0x24, 0x1c, 0x24, 0x36, 0x3f, 0x63, 0x0, 0x0, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8c, 0x99, 0x11, 0x4, 0x10, 0x88, 0x13, 0xfe, 0x10, 0x50, 0x7d, 0xfe, 0x14, 0x52, 0x14, 0x52, 0x37, 0xff, 0x24, 0x52, 0x24, 0x52, 0x7d, 0xfe, 0x8, 0x58, 0x14, 0xd4, 0x15, 0x56, 0x22, 0x53, 0x40, 0x50 },
{ 0x8c, 0x9a, 0x0, 0x10, 0x7e, 0xfe, 0x4, 0x12, 0x8, 0x12, 0x11, 0xff, 0x3c, 0x12, 0x4, 0x12, 0x4, 0xfe, 0x2c, 0x10, 0x28, 0xfe, 0x28, 0x10, 0x39, 0xff, 0x10, 0x10, 0x38, 0x10, 0x2e, 0x0, 0x63, 0xff },
{ 0x8c, 0x9b, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2f, 0xfa, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x24, 0x1f, 0xfc, 0x0, 0x80, 0x12, 0x46, 0x32, 0xb, 0x61, 0xf9 },
{ 0x8c, 0x9c, 0xf, 0x7, 0x29, 0x7c, 0x2f, 0x10, 0x29, 0x24, 0x2f, 0x68, 0x29, 0x12, 0x2f, 0x7f, 0x20, 0x9, 0x3f, 0xaa, 0x4, 0x2a, 0x25, 0x49, 0x44, 0x88, 0x0, 0x0, 0x14, 0x86, 0x34, 0x53, 0x63, 0xf1 },
{ 0x8c, 0x9d, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x3f, 0xfe, 0x1, 0x40, 0x7f, 0xff, 0x2, 0x20, 0x4, 0xf0, 0x1f, 0x9c, 0x70, 0x87, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8c, 0x9e, 0x12, 0x22, 0x13, 0x26, 0x11, 0x24, 0x13, 0xfe, 0x78, 0x50, 0x10, 0x50, 0x17, 0xff, 0x10, 0x88, 0x19, 0x4, 0x73, 0xfe, 0x16, 0xb, 0x10, 0x8, 0x11, 0xf8, 0x11, 0x2, 0x11, 0x6, 0x30, 0xfc },
{ 0x8c, 0x9f, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x79, 0x8c, 0x17, 0x7, 0x11, 0xfc, 0x30, 0x20, 0x3b, 0xfe, 0x36, 0x22, 0x52, 0x22, 0x52, 0x22, 0x13, 0xfe, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x7 },
{ 0x8c, 0xa0, 0x8, 0x80, 0x8, 0x80, 0x8, 0xfe, 0x7f, 0xa0, 0x9, 0x20, 0xb, 0xff, 0x18, 0x48, 0x1c, 0x50, 0x1a, 0xfe, 0x28, 0x90, 0x29, 0xfe, 0x4a, 0x90, 0x8, 0xfe, 0x8, 0x90, 0x8, 0x90, 0x8, 0xff },
{ 0x8c, 0xa1, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x9, 0x10, 0x6, 0x20, 0x3f, 0xfe, 0x22, 0x2, 0x24, 0x12, 0xf, 0xf8, 0x0, 0x8, 0x4, 0x80, 0xf, 0xf8, 0x10, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80 },
{ 0x8c, 0xa2, 0x0, 0x80, 0x0, 0x98, 0x0, 0x8c, 0x0, 0x84, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x8c, 0xa3, 0x8, 0x8, 0x8, 0xa, 0x7f, 0x8a, 0x8, 0x8, 0x8, 0x8, 0x7f, 0xbf, 0x40, 0x88, 0x62, 0x88, 0x54, 0x88, 0x7e, 0x9c, 0x48, 0x94, 0x7e, 0x94, 0x48, 0x94, 0x48, 0x96, 0x48, 0xb2, 0x41, 0xa3 },
{ 0x8c, 0xa4, 0x0, 0x0, 0x7e, 0xff, 0x8, 0x24, 0x8, 0x24, 0x8, 0x24, 0x18, 0x24, 0x10, 0x24, 0x1e, 0xff, 0x32, 0x24, 0x32, 0x24, 0x52, 0x24, 0x12, 0x24, 0x12, 0x64, 0x1e, 0x44, 0x0, 0xc4, 0x1, 0x84 },
{ 0x8c, 0xa5, 0x0, 0x0, 0x7f, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x18, 0x7e, 0x10, 0x42, 0x1e, 0x42, 0x32, 0x7e, 0x32, 0x42, 0x52, 0x42, 0x12, 0x7e, 0x12, 0x28, 0x12, 0x28, 0x1e, 0x69, 0x0, 0xc9, 0x1, 0x87 },
{ 0x8c, 0xa6, 0x8, 0x0, 0x18, 0xfe, 0x30, 0x82, 0x62, 0x82, 0x36, 0xfe, 0xc, 0x0, 0x18, 0xfe, 0x34, 0x82, 0x7e, 0x82, 0xa, 0xfe, 0x8, 0x82, 0x2a, 0x82, 0x2a, 0xfe, 0x6a, 0x82, 0x48, 0x82, 0x8, 0x8e },
{ 0x8c, 0xa7, 0x3, 0xf8, 0x12, 0x8, 0x12, 0x8, 0x13, 0xf8, 0x12, 0x8, 0x12, 0x8, 0x13, 0xf8, 0x12, 0x8, 0x12, 0x8, 0x13, 0xf8, 0x10, 0x0, 0x1f, 0xff, 0x2, 0x48, 0x6, 0x4c, 0x1c, 0x47, 0x0, 0x40 },
{ 0x8c, 0xa8, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x17, 0xfc, 0x14, 0x4, 0x17, 0xfc, 0x14, 0x4, 0x37, 0xfc, 0x24, 0x4, 0x64, 0x4, 0x4, 0x1c },
{ 0x8c, 0xa9, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x20, 0x2, 0x20, 0x6, 0x21, 0xc, 0x33, 0x78, 0x1e },
{ 0x8c, 0xaa, 0x0, 0x82, 0x3c, 0x44, 0x1, 0xff, 0x7e, 0x28, 0x0, 0xfe, 0x3c, 0x2a, 0x0, 0x2a, 0x1, 0xff, 0x3c, 0x2a, 0x0, 0x2a, 0x0, 0xfe, 0x3c, 0x28, 0x24, 0x6c, 0x24, 0xaa, 0x25, 0x29, 0x3c, 0x28 },
{ 0x8c, 0xab, 0x3f, 0x7e, 0x24, 0x22, 0x3f, 0x36, 0x21, 0x14, 0x3f, 0x1c, 0x24, 0x36, 0x3f, 0x63, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x38, 0xe },
{ 0x8c, 0xac, 0x8, 0x0, 0x8, 0x7f, 0x7f, 0x88, 0x8, 0x8, 0x3f, 0x8, 0x29, 0x8, 0x29, 0x8, 0x3f, 0x7f, 0x29, 0x8, 0x29, 0x8, 0x3f, 0x8, 0x8, 0x8, 0x7f, 0x88, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8 },
{ 0x8c, 0xad, 0x0, 0x20, 0x33, 0xfe, 0x1a, 0x22, 0xb, 0xfe, 0x0, 0x20, 0x7, 0xff, 0x0, 0x0, 0x79, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x9, 0x0, 0x9, 0xfe, 0x9, 0x2, 0x19, 0xfe, 0x34, 0x0, 0x63, 0xff },
{ 0x8c, 0xae, 0x10, 0x8, 0x39, 0xde, 0x2c, 0x4a, 0x64, 0x8a, 0x40, 0xbf, 0x39, 0xa, 0x11, 0xca, 0x10, 0x5e, 0x7c, 0x48, 0x11, 0x5e, 0x55, 0x48, 0x54, 0xbf, 0x50, 0x88, 0x1d, 0x88, 0x31, 0x40, 0x63, 0x3f },
{ 0x8c, 0xaf, 0x0, 0x20, 0x3c, 0x70, 0x24, 0xd8, 0x25, 0x8c, 0x27, 0x7, 0x28, 0xfc, 0x28, 0x20, 0x25, 0xfe, 0x25, 0x22, 0x25, 0x22, 0x25, 0x22, 0x25, 0xfe, 0x2c, 0x50, 0x20, 0xd8, 0x21, 0x8c, 0x27, 0x7 },
{ 0x8c, 0xb0, 0x0, 0x0, 0x3e, 0xff, 0x22, 0x10, 0x22, 0x7e, 0x3e, 0x42, 0x22, 0x42, 0x22, 0x7e, 0x3e, 0x42, 0x0, 0x42, 0x14, 0x7e, 0x15, 0x42, 0x56, 0x42, 0x34, 0x7e, 0x17, 0x24, 0x1c, 0x66, 0x70, 0xc3 },
{ 0x8c, 0xb1, 0x0, 0x8, 0x3f, 0x9c, 0x24, 0x36, 0x24, 0x63, 0x3f, 0x3e, 0x24, 0x8, 0x24, 0x7f, 0x3f, 0x49, 0x24, 0x49, 0x24, 0x49, 0x3f, 0xff, 0x0, 0x88, 0x55, 0x9c, 0x54, 0x94, 0x41, 0xb6, 0x3, 0x63 },
{ 0x8c, 0xb2, 0x8, 0x8, 0x8, 0x1c, 0xf, 0x36, 0x8, 0x63, 0x8, 0x3e, 0x7f, 0x8, 0x49, 0x7f, 0x41, 0x49, 0x55, 0x49, 0x49, 0x49, 0x6b, 0x7f, 0x49, 0x8, 0x55, 0x1c, 0x41, 0x14, 0x49, 0x36, 0x7f, 0x63 },
{ 0x8c, 0xb3, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8c, 0xb4, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x20, 0x10, 0x40, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe, 0x10, 0x20, 0x31, 0x24, 0x23, 0x26, 0x66, 0x23, 0x0, 0xe0 },
{ 0x8c, 0xb5, 0x10, 0x82, 0x8, 0x44, 0x3f, 0xff, 0x20, 0x0, 0x2f, 0x90, 0x22, 0x10, 0x3f, 0xde, 0x28, 0xb4, 0x2f, 0xa4, 0x28, 0x94, 0x2f, 0x9c, 0x28, 0x88, 0x68, 0x9c, 0x4f, 0x94, 0x58, 0xb6, 0x0, 0xe3 },
{ 0x8c, 0xb6, 0x4, 0x0, 0xc, 0xfe, 0x18, 0x2, 0x10, 0x2, 0x30, 0x2, 0x61, 0x2, 0x33, 0x2, 0x1a, 0x2, 0x6, 0x2, 0xc, 0x2, 0x8, 0x2, 0x19, 0x2, 0x11, 0x6, 0x3f, 0x84, 0x60, 0x84, 0x0, 0x1c },
{ 0x8c, 0xb7, 0x0, 0x20, 0x7c, 0x20, 0x4, 0x20, 0x7, 0xff, 0x4, 0x20, 0x3c, 0x60, 0x20, 0xc4, 0x21, 0x8c, 0x20, 0xc8, 0x3c, 0x58, 0x4, 0x30, 0x4, 0x64, 0x4, 0x46, 0xc, 0xc2, 0x9, 0x9f, 0x3b, 0xf1 },
{ 0x8c, 0xb8, 0x0, 0x14, 0x20, 0x12, 0x30, 0x12, 0x17, 0xff, 0x4, 0x10, 0x45, 0xd2, 0x64, 0x12, 0x25, 0xd6, 0x5, 0x54, 0x15, 0x5c, 0x15, 0x48, 0x15, 0xc8, 0x34, 0x1d, 0x2c, 0x35, 0x28, 0x67, 0x68, 0xc2 },
{ 0x8c, 0xb9, 0x0, 0x0, 0x23, 0xff, 0x32, 0x8, 0x12, 0x10, 0x2, 0xfe, 0x42, 0x82, 0x62, 0x82, 0x22, 0xfe, 0x2, 0x82, 0x12, 0x82, 0x12, 0xfe, 0x12, 0x10, 0x36, 0x54, 0x24, 0xd6, 0x2d, 0x93, 0x60, 0x30 },
{ 0x8c, 0xba, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1, 0x80, 0x3, 0x8, 0x6, 0x18, 0xc, 0x30, 0x6, 0x60, 0x3, 0xc0, 0x1, 0x90, 0x3, 0x18, 0x6, 0xc, 0xf, 0xfe, 0x38, 0x2 },
{ 0x8c, 0xbb, 0x0, 0x0, 0x1, 0xfc, 0x7d, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x7d, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x1c, 0x50, 0x70, 0x50, 0x0, 0xd1, 0x1, 0x93, 0x7, 0xe },
{ 0x8c, 0xbc, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10, 0x65, 0xff, 0x34, 0x10, 0xc, 0x30, 0x18, 0x60, 0x34, 0xc4, 0x7e, 0x6c, 0xa, 0x38, 0x8, 0x10, 0x2a, 0x30, 0x2a, 0x62, 0x6a, 0x42, 0x48, 0xdf, 0x9, 0xf1 },
{ 0x8c, 0xbd, 0x4, 0x10, 0x8, 0x10, 0x3e, 0x10, 0x22, 0xff, 0x2a, 0x10, 0x2a, 0x10, 0x22, 0x30, 0x7f, 0x24, 0x22, 0x6c, 0x2a, 0x28, 0x2a, 0x18, 0x2a, 0x10, 0x2a, 0x32, 0x22, 0x62, 0x62, 0x4f, 0x46, 0xf9 },
{ 0x8c, 0xbe, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8c, 0xbf, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7e, 0x44, 0x0, 0x28, 0x3d, 0xff, 0x1, 0x4, 0x1, 0x1c, 0x3d, 0x72, 0x1, 0x6, 0x1, 0x1c, 0x3d, 0x71, 0x25, 0x3, 0x25, 0x6, 0x26, 0x1c, 0x3c, 0x70 },
{ 0x8c, 0xc0, 0x0, 0x0, 0x3d, 0xfc, 0x25, 0x4, 0x25, 0x4, 0x25, 0xfc, 0x2d, 0x4, 0x29, 0x4, 0x25, 0xfc, 0x25, 0x21, 0x25, 0x33, 0x25, 0x16, 0x25, 0x1c, 0x2d, 0x8, 0x21, 0xc, 0x21, 0xe6, 0x27, 0x3 },
{ 0x8c, 0xc1, 0x0, 0x18, 0x0, 0xf0, 0x3f, 0x80, 0x0, 0x84, 0x10, 0x8c, 0x18, 0x98, 0x8, 0x90, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8c, 0xc2, 0x8, 0x0, 0xb, 0xfe, 0x1a, 0x2, 0x12, 0x22, 0x12, 0x22, 0x32, 0xfa, 0x32, 0x22, 0x52, 0x22, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0x8a, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x13, 0xfe, 0x10, 0x0 },
{ 0x8c, 0xc3, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0 },
{ 0x8c, 0xc4, 0x0, 0x6, 0x0, 0x3c, 0x7b, 0xe0, 0x48, 0x22, 0x4a, 0x26, 0x4b, 0x24, 0x49, 0x24, 0x48, 0x20, 0x4f, 0xff, 0x48, 0x20, 0x48, 0x20, 0x78, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0xe0 },
{ 0x8c, 0xc5, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x82, 0x20, 0x82, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8c, 0xc6, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7d, 0xff, 0x14, 0x10, 0x14, 0x10, 0x34, 0x10, 0x24, 0x10, 0x2c, 0xfe, 0x28, 0x82, 0x78, 0x82, 0x14, 0x82, 0x12, 0x82, 0x22, 0x82, 0x40, 0xfe },
{ 0x8c, 0xc7, 0x0, 0x6, 0x7c, 0x3c, 0x5, 0xe4, 0x9, 0x4, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x1d, 0x24, 0x71, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0x26, 0x11, 0x2a, 0x13, 0x3a, 0x12, 0xea, 0x76, 0x3 },
{ 0x8c, 0xc8, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x2, 0x18, 0x6, 0xf, 0xfc, 0x0, 0x0 },
{ 0x8c, 0xc9, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x40, 0x17, 0xfe, 0x10, 0x40, 0x13, 0xfc, 0x12, 0x44, 0x13, 0xfc, 0x12, 0x44, 0x13, 0xfc, 0x30, 0x40, 0x2f, 0xff, 0x60, 0x40, 0x0, 0x40 },
{ 0x8c, 0xca, 0x0, 0x6, 0x78, 0x3c, 0x9, 0xe4, 0x9, 0x4, 0x9, 0x24, 0x79, 0x24, 0x41, 0x24, 0x41, 0x24, 0x41, 0x24, 0x79, 0x24, 0x9, 0x24, 0x9, 0x26, 0x9, 0x2a, 0xb, 0x3a, 0x1a, 0xea, 0x76, 0x3 },
{ 0x8c, 0xcb, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0 },
{ 0x8c, 0xcc, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7f, 0x7f, 0x8, 0xc4, 0x8, 0x84, 0x9, 0xc4, 0x8, 0x4c, 0x3e, 0x68, 0x22, 0x38, 0x22, 0x10, 0x22, 0x38, 0x22, 0x28, 0x22, 0x6c, 0x3e, 0xc6, 0x1, 0x83 },
{ 0x8c, 0xcd, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x9, 0xff, 0x8, 0x10, 0x1c, 0x10, 0x1a, 0x10, 0x1a, 0xfe, 0x28, 0x82, 0x28, 0x82, 0x48, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x0 },
{ 0x8c, 0xce, 0x1, 0x0, 0x21, 0x1f, 0x31, 0x11, 0x11, 0x11, 0xf, 0xf1, 0x41, 0x1f, 0x61, 0x11, 0x21, 0x11, 0x7, 0xd1, 0x14, 0x5f, 0x14, 0x51, 0x14, 0x51, 0x34, 0x51, 0x24, 0x51, 0x27, 0xd1, 0x60, 0x27 },
{ 0x8c, 0xcf, 0x4, 0x6, 0x44, 0x3c, 0x29, 0xe4, 0x11, 0x4, 0x11, 0x24, 0x29, 0x24, 0x49, 0x24, 0x9, 0x24, 0x19, 0x24, 0x29, 0x24, 0x49, 0x24, 0x9, 0x26, 0x9, 0x2a, 0xb, 0x3a, 0x1a, 0xea, 0x76, 0x3 },
{ 0x8c, 0xd0, 0x10, 0x80, 0x54, 0x8f, 0x54, 0x89, 0x54, 0x89, 0x13, 0xe9, 0x10, 0x8f, 0x7c, 0x89, 0x10, 0x89, 0x13, 0xe9, 0x3a, 0x2f, 0x36, 0x29, 0x52, 0x29, 0x52, 0x29, 0x12, 0x29, 0x13, 0xe9, 0x10, 0x13 },
{ 0x8c, 0xd1, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x7e, 0x28, 0x2, 0x44, 0x7, 0x83, 0xc, 0x7c, 0x9, 0x0, 0x1a, 0xff, 0x3c, 0x10, 0x6a, 0x20, 0x9, 0x7e, 0x8, 0x2, 0x8, 0x2, 0x8, 0x6, 0x8, 0x1c },
{ 0x8c, 0xd2, 0x0, 0x0, 0x3c, 0xf8, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x3d, 0xf, 0x24, 0x0, 0x25, 0xfc, 0x24, 0x84, 0x3c, 0x8c, 0x24, 0xd8, 0x24, 0x70, 0x24, 0x20, 0x24, 0x70, 0x64, 0xdc, 0x4d, 0x87 },
{ 0x8c, 0xd3, 0x8, 0x0, 0x8, 0x7e, 0x8, 0x42, 0x7f, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x3e, 0x42, 0x22, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0xc2, 0x3e, 0x82, 0x1, 0x8e },
{ 0x8c, 0xd4, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x2, 0x7c, 0x1e, 0x5, 0xf4, 0x9, 0x4, 0x11, 0x24, 0x11, 0x24, 0x1d, 0x24, 0x71, 0x26, 0x11, 0x2a, 0x13, 0x7a, 0x12, 0xca, 0x36, 0x3 },
{ 0x8c, 0xd5, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x1, 0x11, 0x2, 0x11, 0xf8, 0x17, 0x0, 0x11, 0x2, 0x10, 0xfe, 0x10, 0x0, 0x11, 0x20, 0x31, 0x20, 0x21, 0x21, 0x63, 0x33, 0xe, 0x1e },
{ 0x8c, 0xd6, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7e, 0x28, 0x0, 0x44, 0x3d, 0x83, 0x0, 0x7c, 0x0, 0x0, 0x3d, 0xff, 0x0, 0x20, 0x0, 0x40, 0x3c, 0xfe, 0x24, 0x2, 0x24, 0x2, 0x24, 0x6, 0x3c, 0x1c },
{ 0x8c, 0xd7, 0x0, 0x10, 0x3e, 0x10, 0x23, 0xff, 0x22, 0x28, 0x22, 0x44, 0x23, 0x83, 0x3e, 0x7c, 0x8, 0x0, 0x29, 0xff, 0x2e, 0x20, 0x28, 0x40, 0x28, 0xfe, 0x28, 0x2, 0x2e, 0x2, 0x38, 0x6, 0x60, 0x1c },
{ 0x8c, 0xd8, 0x8, 0x10, 0x1c, 0x10, 0x16, 0x10, 0x32, 0x10, 0x21, 0xff, 0x7e, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x8, 0xfe, 0x4a, 0x82, 0x6a, 0x82, 0x28, 0x82, 0xe, 0x82, 0x38, 0x82, 0x60, 0xfe },
{ 0x8c, 0xd9, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x1f, 0xfe, 0x11, 0x10, 0x11, 0x20, 0x13, 0xfe, 0x16, 0x20, 0x1b, 0xfc, 0x12, 0x20, 0x33, 0xfc, 0x22, 0x20, 0x62, 0x20, 0x3, 0xff },
{ 0x8c, 0xda, 0x0, 0x0, 0x7f, 0xbf, 0x0, 0x8, 0x3f, 0xbe, 0x20, 0xa2, 0x3f, 0xa2, 0x20, 0x3e, 0x25, 0x22, 0x2f, 0xa2, 0x3a, 0x3e, 0x2f, 0xa2, 0x2a, 0x22, 0x6f, 0xbe, 0x4a, 0x14, 0xf, 0xb6, 0x0, 0x63 },
{ 0x8c, 0xdb, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x7f, 0x8, 0x8, 0x3e, 0x8, 0x0, 0x7e, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x36, 0x3e, 0x14, 0x0, 0x1c, 0x22, 0x8, 0x32, 0x1c, 0x17, 0x34, 0x1c, 0x66, 0x70, 0xc3 },
{ 0x8c, 0xdc, 0x0, 0x0, 0x3f, 0xfe, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x6, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8c, 0xdd, 0x0, 0x0, 0x3f, 0xfe, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0xc, 0x10, 0x8, 0x10, 0xf, 0xf0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8c, 0xde, 0x8, 0x0, 0xb, 0xfe, 0x18, 0x20, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20, 0x31, 0xfc, 0x50, 0x44, 0x10, 0x44, 0x10, 0x44, 0x10, 0x44, 0x10, 0xc4, 0x10, 0x84, 0x10, 0x84, 0x17, 0xff, 0x10, 0x0 },
{ 0x8c, 0xdf, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x8, 0x80, 0x18, 0x80, 0x30, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8c, 0xe0, 0x0, 0x0, 0x3, 0xf0, 0x12, 0x10, 0x12, 0x10, 0x12, 0x10, 0x13, 0xf0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x7f, 0xff, 0x0, 0x0, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x8c, 0xe1, 0x0, 0x0, 0x3f, 0xfe, 0x1, 0x0, 0x1, 0x0, 0x1f, 0xf8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x8, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8c, 0xe2, 0x8, 0x0, 0x8, 0xbc, 0x8, 0xa4, 0x8, 0xa4, 0x7e, 0xa4, 0x12, 0xbc, 0x12, 0x80, 0x12, 0x80, 0x36, 0xfe, 0x24, 0x2, 0x24, 0x2, 0x7d, 0xff, 0xa, 0x0, 0x1a, 0x44, 0x30, 0xc6, 0x61, 0x83 },
{ 0x8c, 0xe3, 0x4, 0x40, 0xc, 0xc0, 0x19, 0x88, 0x33, 0x18, 0x65, 0xb0, 0xc, 0x64, 0x18, 0xc2, 0x37, 0xff, 0x70, 0x81, 0x11, 0xf8, 0x13, 0x8, 0x16, 0x98, 0x10, 0xd0, 0x10, 0x70, 0x11, 0xdc, 0x17, 0x7 },
{ 0x8c, 0xe4, 0x9, 0x0, 0x19, 0xf, 0x13, 0xe9, 0x32, 0x89, 0x60, 0x89, 0x8, 0x89, 0x1b, 0xe9, 0x10, 0x89, 0x30, 0x89, 0x72, 0xe9, 0x12, 0x89, 0x12, 0x89, 0x12, 0xeb, 0x13, 0x88, 0x16, 0x8, 0x10, 0x8 },
{ 0x8c, 0xe5, 0x10, 0x0, 0x13, 0xff, 0x10, 0x20, 0x10, 0x20, 0x59, 0xfc, 0x54, 0x44, 0x54, 0x44, 0x50, 0x44, 0x13, 0xff, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe },
{ 0x8c, 0xe6, 0x10, 0x0, 0x13, 0xff, 0x10, 0x20, 0x7c, 0x20, 0x11, 0xfc, 0x10, 0x44, 0x38, 0x44, 0x34, 0x44, 0x33, 0xff, 0x50, 0x0, 0x51, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe },
{ 0x8c, 0xe7, 0x10, 0x20, 0x10, 0x50, 0x10, 0x88, 0x79, 0x24, 0x16, 0xfb, 0x11, 0x54, 0x19, 0x24, 0x35, 0x54, 0x31, 0xfc, 0x50, 0x20, 0x53, 0xfe, 0x12, 0x42, 0x12, 0x92, 0x12, 0xea, 0x12, 0x2, 0x12, 0xe },
{ 0x8c, 0xe8, 0x0, 0x80, 0x0, 0x8f, 0x7c, 0x89, 0x10, 0x89, 0x17, 0xf9, 0x10, 0x8f, 0x10, 0x89, 0x7c, 0x89, 0x10, 0x89, 0x13, 0xef, 0x12, 0x29, 0x12, 0x29, 0x1e, 0x29, 0x72, 0x29, 0x3, 0xe9, 0x0, 0x17 },
{ 0x8c, 0xe9, 0x4, 0x10, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x12, 0x4, 0x67, 0xfb, 0xc, 0x8, 0x34, 0x8, 0x7, 0xf8 },
{ 0x8c, 0xea, 0x0, 0x0, 0x3d, 0xfe, 0x0, 0x20, 0x7e, 0x20, 0x0, 0xfc, 0x3c, 0x44, 0x0, 0x44, 0x0, 0x44, 0x3d, 0xff, 0x0, 0x0, 0x0, 0xfe, 0x3c, 0x82, 0x24, 0x82, 0x24, 0x82, 0x24, 0x82, 0x3c, 0xfe },
{ 0x8c, 0xeb, 0x0, 0x0, 0x3c, 0xbc, 0x0, 0xa4, 0x7e, 0xa4, 0x0, 0xa4, 0x3c, 0xbc, 0x0, 0x80, 0x0, 0x80, 0x3c, 0xfe, 0x0, 0x2, 0x0, 0x2, 0x3d, 0xff, 0x24, 0x0, 0x24, 0x44, 0x24, 0xc6, 0x3d, 0x83 },
{ 0x8c, 0xec, 0x0, 0x44, 0x3d, 0xff, 0x0, 0x44, 0x7e, 0x90, 0x0, 0xff, 0x3d, 0x90, 0x2, 0xfe, 0x0, 0x90, 0x3c, 0xfe, 0x0, 0x90, 0x0, 0xff, 0x3c, 0x0, 0x25, 0xfe, 0x24, 0x44, 0x24, 0x38, 0x3d, 0xc7 },
{ 0x8c, 0xed, 0x0, 0x20, 0x7f, 0x27, 0x14, 0x25, 0x14, 0x25, 0x7f, 0xfd, 0x55, 0x27, 0x55, 0x25, 0x55, 0x25, 0x67, 0x75, 0x41, 0x57, 0x41, 0x55, 0x7f, 0x55, 0x41, 0x55, 0x41, 0x55, 0x7f, 0x75, 0x0, 0xb },
{ 0x8c, 0xee, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x18, 0x0, 0x30, 0x0, 0x6f, 0xf8, 0x0, 0x30, 0x0, 0xc0, 0x3, 0x80, 0x6, 0x0, 0xc, 0x0, 0x18, 0x0, 0x10, 0x2, 0x18, 0x6, 0xf, 0xfc },
{ 0x8c, 0xef, 0x10, 0x0, 0x1e, 0xfe, 0x32, 0x92, 0x24, 0x92, 0x7e, 0xfe, 0x2a, 0x92, 0x2a, 0x92, 0x3e, 0x92, 0x2a, 0xfe, 0x2a, 0x10, 0x3e, 0x10, 0x0, 0xfe, 0x2a, 0x10, 0x2a, 0x10, 0x6a, 0x10, 0x41, 0xff },
{ 0x8c, 0xf0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x34, 0x16, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8c, 0xf1, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x10, 0x88, 0x31, 0x8c, 0x33, 0x6, 0x56, 0x8b, 0x10, 0x88, 0x10, 0xd8, 0x10, 0x70, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x7 },
{ 0x8c, 0xf2, 0x8, 0x0, 0x9, 0xfc, 0x8, 0x4, 0x18, 0x4, 0x13, 0xff, 0x30, 0x80, 0x30, 0x80, 0x51, 0xfe, 0x13, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x50, 0x10, 0x58, 0x10, 0xcc, 0x11, 0x86, 0x17, 0x3 },
{ 0x8c, 0xf3, 0x8, 0x0, 0x8, 0xfc, 0x18, 0x4, 0x14, 0x4, 0x15, 0xff, 0x34, 0x40, 0x34, 0x40, 0x54, 0xfe, 0x15, 0x90, 0x14, 0x10, 0x15, 0xff, 0x14, 0x28, 0x14, 0x28, 0x14, 0x6c, 0x10, 0xc6, 0x11, 0x83 },
{ 0x8c, 0xf4, 0x8, 0x20, 0x8, 0x20, 0xb, 0xfe, 0x18, 0x20, 0x10, 0x20, 0x37, 0xff, 0x31, 0x4, 0x51, 0x8c, 0x10, 0x88, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x8c, 0xf5, 0x0, 0x80, 0x20, 0x82, 0x30, 0x86, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8c, 0xf6, 0x2, 0x20, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xc, 0x18, 0x8, 0xc, 0x19, 0x6, 0x31, 0x3, 0x61, 0x0, 0x3, 0x20, 0x2, 0x30, 0x2, 0x18, 0x6, 0x8, 0x4, 0x7c, 0xf, 0xc6, 0x38, 0x2 },
{ 0x8c, 0xf7, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x7e, 0x20, 0x9, 0xfe, 0x8, 0x22, 0x8, 0x22, 0x8, 0x22, 0x8, 0x22, 0x8, 0x62, 0xe, 0x42, 0x38, 0x42, 0x60, 0xc6, 0x0, 0x84, 0x1, 0x84, 0x3, 0x1c },
{ 0x8c, 0xf8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x7f, 0xc8, 0x11, 0x3f, 0x31, 0x89, 0x60, 0xc9, 0x11, 0x9, 0x1b, 0x9, 0xa, 0x9, 0xe, 0x19, 0x4, 0x11, 0xe, 0x13, 0x1b, 0x32, 0x31, 0x22, 0x60, 0x6e },
{ 0x8c, 0xf9, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x8, 0x2, 0x19, 0x2, 0x31, 0x2, 0x63, 0x2, 0x2, 0x42, 0x2, 0x62, 0x6, 0x22, 0x4, 0xf2, 0xf, 0x96, 0x0, 0x4, 0x0, 0xc, 0x0, 0x38 },
{ 0x8c, 0xfa, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x10, 0x0, 0x13, 0xfe, 0x10, 0xc, 0x10, 0x30, 0x37, 0xff, 0x20, 0x20, 0x60, 0x20, 0x0, 0xe0 },
{ 0x8c, 0xfb, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0 },
{ 0x8c, 0xfc, 0x1, 0x0, 0x3, 0x0, 0x2, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x8d, 0x40, 0x0, 0xc, 0x0, 0xf8, 0x1f, 0x80, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x12, 0x4, 0x32, 0x4, 0x22, 0x4, 0x62, 0x4, 0x3, 0xfc },
{ 0x8d, 0x41, 0x2, 0x0, 0x2, 0xfc, 0x72, 0x4, 0x52, 0x4, 0x55, 0xff, 0x54, 0x0, 0x5c, 0x80, 0x54, 0xfe, 0x55, 0x10, 0x54, 0x10, 0x55, 0xff, 0x74, 0x28, 0x4, 0x6c, 0x4, 0x44, 0x4, 0xc6, 0x5, 0x83 },
{ 0x8d, 0x42, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x7c, 0x0, 0x10, 0x0, 0x10, 0xf8, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x1c, 0x88, 0x70, 0x88, 0x1, 0x88, 0x1, 0x9, 0x3, 0x9, 0x6, 0x7 },
{ 0x8d, 0x43, 0x0, 0x6, 0x10, 0x3c, 0x11, 0xe0, 0x11, 0x0, 0x11, 0x0, 0x7d, 0xff, 0x11, 0x0, 0x11, 0x0, 0x11, 0x7e, 0x11, 0x42, 0x11, 0x42, 0x1d, 0x42, 0x73, 0x42, 0x2, 0x42, 0x6, 0x42, 0x0, 0x7e },
{ 0x8d, 0x44, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x6, 0x8, 0xc, 0x7f, 0x18, 0x11, 0x10, 0x11, 0x10, 0x11, 0xff, 0x33, 0x10, 0x22, 0x10, 0x26, 0x10, 0x7c, 0x10, 0xa, 0x10, 0x19, 0x10, 0x31, 0x10, 0x60, 0x70 },
{ 0x8d, 0x45, 0x0, 0x20, 0x7f, 0xa0, 0x3, 0x20, 0x6, 0x20, 0xc, 0x20, 0x8, 0x20, 0x8, 0x20, 0xb, 0x20, 0xe, 0x20, 0x38, 0x20, 0x68, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x21, 0x8, 0x33, 0x38, 0x1e },
{ 0x8d, 0x46, 0x1, 0x2, 0x1, 0x6, 0x1f, 0xfc, 0x1, 0x18, 0x1, 0x20, 0x7f, 0xff, 0x1, 0x80, 0x6, 0x0, 0x1f, 0xf8, 0x60, 0x20, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8d, 0x47, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x21, 0x2, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x20, 0x6, 0x60, 0x4, 0x40, 0xc, 0xc8, 0x18, 0x8c, 0x31, 0x84, 0x61, 0x3e, 0x3, 0xe2 },
{ 0x8d, 0x48, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0 },
{ 0x8d, 0x49, 0x0, 0x0, 0x3, 0xff, 0x7c, 0x20, 0x10, 0x20, 0x10, 0x60, 0x10, 0x40, 0x10, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1c, 0x2, 0x70, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x78 },
{ 0x8d, 0x4a, 0x4, 0x10, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x8, 0x1f, 0xfc, 0x70, 0x17, 0x0, 0x10, 0xf, 0xf0, 0x8, 0x0, 0x8, 0x4, 0xc, 0xc, 0x7, 0xf8 },
{ 0x8d, 0x4b, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8d, 0x4c, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x10, 0x80, 0x10, 0x80, 0x11, 0x90, 0x11, 0x18, 0x11, 0x8, 0x13, 0xc, 0x32, 0x4, 0x22, 0x3e, 0x67, 0xe2, 0xc, 0x2 },
{ 0x8d, 0x4d, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x17, 0xfc, 0x10, 0x44, 0x10, 0x44, 0x1f, 0xff, 0x10, 0x44, 0x10, 0x44, 0x17, 0xfc, 0x10, 0xa0, 0x31, 0xb0, 0x23, 0x18, 0x66, 0xc, 0x1c, 0x7 },
{ 0x8d, 0x4e, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x17, 0xfc, 0x10, 0x44, 0x1f, 0xff, 0x10, 0x44, 0x17, 0xfc, 0x10, 0x40, 0x16, 0x46, 0x13, 0x6c, 0x30, 0xd8, 0x23, 0x4c, 0x6c, 0x47, 0x1, 0xc0 },
{ 0x8d, 0x4f, 0x0, 0x10, 0x7e, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x30, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x60, 0x3e, 0x44, 0x2, 0x44, 0x2, 0x46, 0x2, 0xc2, 0x6, 0x82, 0x4, 0x9f, 0x3d, 0xf1 },
{ 0x8d, 0x50, 0x8, 0x0, 0x9, 0xfe, 0x8, 0x0, 0x8, 0x0, 0x2c, 0xfc, 0x2a, 0x84, 0x6a, 0x84, 0x48, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x8, 0x84, 0x8, 0xfc, 0x8, 0x0, 0x8, 0x0, 0xb, 0xff, 0x8, 0x0 },
{ 0x8d, 0x51, 0x10, 0x84, 0x10, 0x84, 0x13, 0xff, 0x10, 0x84, 0x50, 0x20, 0x5b, 0xff, 0x54, 0x80, 0x54, 0x80, 0x10, 0x7e, 0x10, 0x0, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x11, 0x25, 0x13, 0x25, 0x16, 0x3 },
{ 0x8d, 0x52, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7c, 0x0, 0x10, 0x0, 0x10, 0xf8, 0x10, 0x88, 0x1c, 0x88, 0x70, 0x88, 0x10, 0x88, 0x10, 0x88, 0x11, 0x88, 0x11, 0x9, 0x13, 0x9, 0x76, 0x7 },
{ 0x8d, 0x53, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x11, 0xfe, 0x7d, 0x2, 0x13, 0x2, 0x10, 0xf2, 0x10, 0x92, 0x10, 0x92, 0x1c, 0x92, 0x70, 0x92, 0x10, 0xf2, 0x10, 0x2, 0x10, 0x6, 0x10, 0x4, 0x30, 0x1c },
{ 0x8d, 0x54, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x12, 0x92, 0x7a, 0x92, 0x11, 0x90, 0x13, 0x1e, 0x10, 0x0, 0x18, 0x0, 0x73, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x30, 0x0 },
{ 0x8d, 0x55, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7d, 0xff, 0x11, 0x4, 0x13, 0x84, 0x16, 0x8c, 0x10, 0xc8, 0x10, 0x58, 0x10, 0x70, 0x1c, 0x20, 0x70, 0x70, 0x0, 0xd8, 0x1, 0x8c, 0x3, 0x6, 0xe, 0x3 },
{ 0x8d, 0x56, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x7, 0x0, 0x3c, 0x7e, 0x20, 0x42, 0x20, 0x42, 0x20, 0x42, 0x3e, 0x42, 0x60, 0x4e, 0x0, 0x40, 0x0, 0x40 },
{ 0x8d, 0x57, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8d, 0x58, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x8, 0x80, 0x5, 0x80, 0x3, 0x0, 0x6, 0xc0, 0x1c, 0x78, 0x70, 0xf },
{ 0x8d, 0x59, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x7f, 0xff, 0x8, 0x0, 0x8, 0x0, 0x1c, 0xf8, 0x1a, 0x88, 0x1a, 0x88, 0x28, 0x88, 0x28, 0x88, 0x48, 0x88, 0x8, 0x88, 0x9, 0x89, 0x9, 0x9, 0xb, 0x7 },
{ 0x8d, 0x5a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x44, 0x10, 0xc6, 0x39, 0x83, 0x34, 0x44, 0x34, 0x44, 0x50, 0x6c, 0x50, 0x38, 0x10, 0x10, 0x10, 0x38, 0x10, 0x6c, 0x10, 0xc6, 0x11, 0x83 },
{ 0x8d, 0x5b, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x20, 0x7d, 0xfc, 0x11, 0x24, 0x11, 0x24, 0x39, 0xfc, 0x35, 0x24, 0x35, 0x24, 0x51, 0xfc, 0x50, 0x20, 0x11, 0xa0, 0x10, 0xe0, 0x10, 0x70, 0x10, 0xdc, 0x13, 0x87 },
{ 0x8d, 0x5c, 0x10, 0x48, 0x10, 0x48, 0x13, 0xff, 0x7c, 0x48, 0x11, 0xfe, 0x10, 0x48, 0x33, 0xff, 0x38, 0x20, 0x35, 0xfe, 0x51, 0x22, 0x51, 0xfe, 0x11, 0x22, 0x13, 0xff, 0x11, 0x2, 0x11, 0x2, 0x11, 0xe },
{ 0x8d, 0x5d, 0x0, 0x0, 0x30, 0x0, 0x1b, 0xfe, 0x8, 0x20, 0x0, 0x20, 0x60, 0x20, 0x30, 0x20, 0x10, 0x20, 0x0, 0x20, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x27, 0xff, 0x60, 0x0 },
{ 0x8d, 0x5e, 0x0, 0x88, 0x30, 0x88, 0x18, 0x88, 0xb, 0xfe, 0x0, 0x88, 0x60, 0x88, 0x30, 0x88, 0x10, 0x88, 0x0, 0x88, 0x7, 0xff, 0x8, 0x0, 0x18, 0x0, 0x10, 0x88, 0x31, 0x8c, 0x23, 0x6, 0x66, 0x3 },
{ 0x8d, 0x5f, 0x0, 0x20, 0x31, 0x20, 0x19, 0x20, 0xb, 0xfe, 0x2, 0x20, 0x64, 0x20, 0x30, 0x20, 0x17, 0xff, 0x0, 0x0, 0x8, 0x0, 0xb, 0xfe, 0x1a, 0x2, 0x12, 0x2, 0x32, 0x2, 0x22, 0x2, 0x63, 0xfe },
{ 0x8d, 0x60, 0x0, 0x88, 0x30, 0x88, 0x1b, 0xfe, 0x8, 0x88, 0x0, 0x88, 0x67, 0xff, 0x30, 0x88, 0x11, 0x4, 0x3, 0xfe, 0x6, 0xb, 0x10, 0x8, 0x11, 0xf8, 0x11, 0x0, 0x31, 0x2, 0x21, 0x86, 0x60, 0xfc },
{ 0x8d, 0x61, 0x0, 0x88, 0x20, 0x88, 0x37, 0xff, 0x10, 0x88, 0x3, 0xfe, 0x40, 0x88, 0x67, 0xff, 0x20, 0x20, 0x3, 0xfe, 0x12, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x37, 0xff, 0x22, 0x2, 0x22, 0x2, 0x62, 0xe },
{ 0x8d, 0x62, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8d, 0x63, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8d, 0x64, 0x0, 0x0, 0x7d, 0xff, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x92, 0x3c, 0x92, 0x24, 0xfe, 0x64, 0x92, 0x24, 0x92, 0x24, 0xfe, 0x24, 0x10, 0x24, 0xd0, 0x3c, 0x70, 0x0, 0x38, 0x0, 0x6c, 0x1, 0xc7 },
{ 0x8d, 0x65, 0x4, 0x20, 0x1c, 0x20, 0x73, 0xff, 0x10, 0x0, 0x10, 0xfc, 0x7c, 0x84, 0x10, 0xfc, 0x10, 0x0, 0x39, 0xfe, 0x35, 0x2, 0x55, 0x7a, 0x51, 0x4a, 0x11, 0x4a, 0x11, 0x7a, 0x11, 0x2, 0x11, 0x6 },
{ 0x8d, 0x66, 0x10, 0x10, 0x10, 0x10, 0x55, 0xff, 0x55, 0x10, 0x55, 0xfe, 0x11, 0x12, 0x7d, 0xff, 0x11, 0x12, 0x11, 0xfe, 0x39, 0x10, 0x35, 0x92, 0x51, 0x54, 0x53, 0x38, 0x12, 0x54, 0x16, 0x93, 0x10, 0x30 },
{ 0x8d, 0x67, 0x8, 0x0, 0x18, 0x0, 0x30, 0xfe, 0x62, 0x10, 0x36, 0x10, 0xc, 0x10, 0x18, 0x10, 0x32, 0x10, 0x7f, 0x10, 0x9, 0x10, 0x8, 0x10, 0x2a, 0x10, 0x2a, 0x10, 0x6a, 0x10, 0x49, 0xff, 0x8, 0x0 },
{ 0x8d, 0x68, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x65, 0xff, 0x2c, 0x20, 0x18, 0x20, 0x10, 0x20, 0x24, 0x68, 0x7e, 0x48, 0xa, 0x58, 0x8, 0xd0, 0x2a, 0x92, 0x2b, 0xb2, 0x6a, 0x22, 0x48, 0x7f, 0x8, 0xc1 },
{ 0x8d, 0x69, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x65, 0xff, 0x2c, 0x44, 0x18, 0xc6, 0x11, 0x83, 0x24, 0x44, 0x7e, 0x44, 0xa, 0x6c, 0x8, 0x38, 0x2a, 0x10, 0x2a, 0x38, 0x6a, 0x6c, 0x48, 0xc6, 0x9, 0x83 },
{ 0x8d, 0x6a, 0x8, 0x0, 0x19, 0xff, 0x11, 0x1, 0x65, 0x45, 0x2d, 0x29, 0x19, 0x1, 0x11, 0x7d, 0x25, 0x11, 0x7d, 0x11, 0x15, 0x55, 0x11, 0x55, 0x55, 0x55, 0x55, 0x7d, 0x55, 0x1, 0x11, 0x1, 0x11, 0x7 },
{ 0x8d, 0x6b, 0x8, 0x24, 0x8, 0x24, 0x7f, 0x24, 0x8, 0xff, 0x8, 0x24, 0x7f, 0x24, 0x8, 0x24, 0x8, 0x24, 0x7f, 0x24, 0x8, 0xff, 0x1c, 0x24, 0x1a, 0x24, 0x29, 0x24, 0x48, 0x64, 0x8, 0x44, 0x8, 0xc4 },
{ 0x8d, 0x6c, 0x1, 0x2, 0x1, 0x6, 0x1f, 0xfc, 0x1, 0x18, 0x1, 0x20, 0x7f, 0xff, 0x0, 0xc0, 0x1, 0x1c, 0x7, 0xf0, 0x1c, 0x0, 0x74, 0x0, 0x7, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x78 },
{ 0x8d, 0x6d, 0x0, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x8d, 0x6e, 0x0, 0x20, 0x3c, 0x20, 0x24, 0x20, 0x25, 0xff, 0x24, 0x20, 0x3c, 0x20, 0x24, 0x60, 0x24, 0x48, 0x24, 0x48, 0x3c, 0xd8, 0x24, 0x90, 0x25, 0x92, 0x27, 0x32, 0x24, 0x22, 0x64, 0x3f, 0x4c, 0xe1 },
{ 0x8d, 0x6f, 0x0, 0x10, 0x3c, 0x10, 0x25, 0xff, 0x25, 0x49, 0x25, 0x49, 0x3c, 0xc8, 0x25, 0x8f, 0x24, 0x0, 0x24, 0x0, 0x3c, 0xfe, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0x65, 0xff, 0x4c, 0x0 },
{ 0x8d, 0x70, 0x0, 0x80, 0x7f, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x48, 0x9, 0x4f, 0xf9, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x1c },
{ 0x8d, 0x71, 0x4, 0x10, 0x8, 0x10, 0x3e, 0x10, 0x23, 0xff, 0x2a, 0x0, 0x2a, 0x7c, 0x22, 0x44, 0x7f, 0x44, 0x22, 0x44, 0x2a, 0x44, 0x2a, 0x44, 0x2a, 0x44, 0x2a, 0x44, 0x22, 0x45, 0x62, 0xc5, 0x46, 0x83 },
{ 0x8d, 0x72, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x7f, 0xff, 0x8, 0x0, 0x8, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0x18, 0x89, 0x30, 0x8b, 0x60, 0x6 },
{ 0x8d, 0x73, 0x4, 0x0, 0xc, 0xfe, 0x18, 0x0, 0x30, 0x0, 0x60, 0x0, 0x4, 0x0, 0xd, 0xff, 0x18, 0x8, 0x38, 0x8, 0x68, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x8d, 0x74, 0x9, 0x0, 0x19, 0xef, 0x13, 0x20, 0x36, 0x40, 0x63, 0xe0, 0xa, 0xaf, 0x1a, 0xa2, 0x13, 0xe2, 0x32, 0xa2, 0x72, 0xa2, 0x13, 0xe2, 0x10, 0x82, 0x17, 0xf2, 0x11, 0x42, 0x13, 0x62, 0x16, 0x36 },
{ 0x8d, 0x75, 0x0, 0x24, 0x3c, 0x24, 0x1, 0xff, 0x7e, 0x24, 0x0, 0xfe, 0x3c, 0x24, 0x1, 0xff, 0x0, 0x10, 0x3c, 0xfe, 0x0, 0x92, 0x0, 0xfe, 0x3c, 0x92, 0x25, 0xff, 0x24, 0x82, 0x24, 0x82, 0x3c, 0x8e },
{ 0x8d, 0x76, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x8d, 0x77, 0x0, 0x24, 0x3c, 0x24, 0x25, 0xff, 0x24, 0x24, 0x3c, 0xfe, 0x24, 0x24, 0x25, 0xff, 0x24, 0x10, 0x3c, 0xfe, 0x24, 0x92, 0x24, 0xfe, 0x24, 0x92, 0x3d, 0xff, 0x14, 0x82, 0x36, 0x82, 0x62, 0x8e },
{ 0x8d, 0x78, 0x4, 0x0, 0x4, 0x1f, 0x4, 0x11, 0x7f, 0xd3, 0x11, 0x12, 0x31, 0x96, 0x60, 0xd4, 0x11, 0x12, 0x1b, 0x11, 0xe, 0x11, 0x6, 0x11, 0x7, 0x11, 0xd, 0x11, 0x19, 0x97, 0x30, 0x90, 0x60, 0x10 },
{ 0x8d, 0x79, 0x0, 0x11, 0x7f, 0x11, 0x14, 0x7e, 0x14, 0x12, 0x7f, 0x14, 0x55, 0xff, 0x55, 0x8, 0x55, 0x10, 0x57, 0x3e, 0x61, 0xc4, 0x41, 0x8, 0x41, 0xff, 0x7f, 0x8, 0x41, 0x8, 0x41, 0x8, 0x7f, 0x38 },
{ 0x8d, 0x7a, 0x8, 0x10, 0x1c, 0x10, 0x16, 0x10, 0x32, 0xff, 0x20, 0x80, 0x7e, 0x80, 0x8, 0x88, 0x8, 0x88, 0x7e, 0x88, 0x8, 0x98, 0x4a, 0x90, 0x6a, 0x90, 0x28, 0xb2, 0xf, 0xa2, 0x39, 0x2f, 0x63, 0x79 },
{ 0x8d, 0x7b, 0x0, 0x10, 0x7e, 0x10, 0x10, 0x10, 0x10, 0xff, 0x10, 0x80, 0x10, 0x80, 0x3c, 0x88, 0x24, 0x88, 0x64, 0x88, 0x24, 0x98, 0x24, 0x90, 0x24, 0x90, 0x24, 0xb2, 0x3d, 0xa2, 0x1, 0x2f, 0x3, 0x79 },
{ 0x8d, 0x7c, 0x10, 0x0, 0x39, 0xff, 0x2d, 0x1, 0x65, 0x45, 0x41, 0x29, 0x7d, 0x1, 0x11, 0x7d, 0x11, 0x11, 0x7d, 0x11, 0x11, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x7d, 0x1d, 0x1, 0x31, 0x1, 0x61, 0x7 },
{ 0x8d, 0x7d, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x82, 0x21, 0x42, 0x22, 0x22, 0x2d, 0xda, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x20, 0xe },
{ 0x8d, 0x7e, 0x0, 0x20, 0x3e, 0x20, 0x22, 0x7e, 0x26, 0xc2, 0x25, 0xa4, 0x2c, 0x18, 0x28, 0x6c, 0x29, 0xc7, 0x24, 0x8, 0x24, 0xfe, 0x24, 0x48, 0x24, 0x48, 0x2d, 0xff, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8 },
{ 0x8d, 0x80, 0x0, 0x0, 0x1, 0xff, 0x7c, 0x10, 0x10, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe, 0x1c, 0x82, 0x70, 0x82, 0x0, 0xfe, 0x0, 0x44, 0x0, 0xc6, 0x1, 0x83 },
{ 0x8d, 0x81, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x6f, 0xfb, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8d, 0x82, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x20, 0xe },
{ 0x8d, 0x83, 0x0, 0x10, 0x20, 0x20, 0x37, 0x7e, 0x12, 0x42, 0x2, 0x7e, 0x42, 0x42, 0x62, 0x7e, 0x22, 0x40, 0x2, 0x7f, 0x12, 0x40, 0x13, 0x7f, 0x16, 0x1, 0x30, 0xab, 0x20, 0xa9, 0x20, 0x83, 0x60, 0x6 },
{ 0x8d, 0x84, 0x0, 0x2, 0x7f, 0xd2, 0x40, 0x52, 0x51, 0x52, 0x4a, 0x52, 0x40, 0x52, 0x5f, 0x52, 0x44, 0x52, 0x44, 0x52, 0x55, 0x52, 0x55, 0x52, 0x55, 0x42, 0x5f, 0x42, 0x40, 0x42, 0x40, 0x42, 0x41, 0xce },
{ 0x8d, 0x85, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x3f, 0x88, 0x4, 0x3f, 0x4, 0x9, 0x4, 0x9, 0x4, 0x9, 0x7f, 0xc9, 0x8, 0x9, 0x8, 0x19, 0x19, 0x11, 0x11, 0x13, 0x17, 0xb2, 0x3c, 0xa2, 0x60, 0x6e },
{ 0x8d, 0x86, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x4, 0x0, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0xf0 },
{ 0x8d, 0x87, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7, 0x7, 0xf0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8d, 0x88, 0x10, 0x20, 0x13, 0xff, 0x10, 0x0, 0x10, 0xfc, 0x7c, 0x84, 0x10, 0xfc, 0x10, 0x0, 0x13, 0xff, 0x12, 0x1, 0x12, 0xfd, 0x10, 0x40, 0x1d, 0xa2, 0x70, 0x54, 0x1, 0xb8, 0x0, 0x54, 0x3, 0xb3 },
{ 0x8d, 0x89, 0x10, 0x42, 0x10, 0x42, 0x13, 0xfc, 0x10, 0x44, 0x78, 0x48, 0x17, 0xff, 0x10, 0x20, 0x10, 0x4e, 0x19, 0xf8, 0x76, 0x80, 0x10, 0x80, 0x10, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x10, 0x6, 0x30, 0x3c },
{ 0x8d, 0x8a, 0x0, 0x20, 0x27, 0xff, 0x30, 0x0, 0x11, 0xfc, 0x1, 0x4, 0x41, 0xfc, 0x60, 0x0, 0x27, 0xff, 0x4, 0x1, 0x15, 0xfd, 0x10, 0xc0, 0x13, 0x22, 0x30, 0xd4, 0x23, 0x38, 0x20, 0xd4, 0x67, 0x33 },
{ 0x8d, 0x8b, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x3, 0x0, 0x1c, 0xc6, 0x3, 0x6c, 0x1c, 0xf0, 0x3, 0x5c, 0x3c, 0xc7 },
{ 0x8d, 0x8c, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7, 0xf0, 0x4, 0x90, 0x7, 0xf0, 0x4, 0x90, 0x3f, 0xfe, 0x0, 0x80, 0x8, 0x8, 0x7f, 0x7f, 0x2a, 0x2a, 0x3e, 0x3e, 0x2a, 0x2a, 0x7f, 0x7f, 0x8, 0x8 },
{ 0x8d, 0x8d, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xfe, 0x9, 0x2, 0x3e, 0xaa, 0x8, 0xaa, 0x7f, 0x22, 0x10, 0xfa, 0x1e, 0x22, 0x32, 0x72, 0x66, 0xaa, 0x15, 0x26, 0x8, 0x4, 0x16, 0x1c, 0x33, 0x80, 0x60, 0xff },
{ 0x8d, 0x8e, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x8d, 0x8f, 0x4, 0x2, 0x4, 0x2, 0x4, 0x12, 0x7f, 0xd2, 0x8, 0x12, 0x18, 0x12, 0x31, 0x12, 0x63, 0x12, 0x36, 0x12, 0xc, 0x92, 0x19, 0x92, 0x33, 0x2, 0x66, 0x2, 0xd, 0x82, 0x18, 0xc2, 0x70, 0x4e },
{ 0x8d, 0x90, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x30, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8d, 0x91, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x27, 0xf2, 0x20, 0x82, 0x20, 0xa2, 0x20, 0x92, 0x20, 0x92, 0x2f, 0xfa, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8d, 0x92, 0x8, 0x0, 0x8, 0x3c, 0x7f, 0x24, 0x8, 0x24, 0x3e, 0x24, 0x0, 0x47, 0x7f, 0x0, 0x41, 0x7e, 0x4d, 0x22, 0x38, 0x22, 0x8, 0x36, 0x7f, 0x1c, 0x2a, 0x8, 0x2b, 0x1c, 0x69, 0xb6, 0x48, 0x63 },
{ 0x8d, 0x93, 0x0, 0x8, 0x7f, 0x28, 0x14, 0x28, 0x14, 0x7e, 0x7f, 0x48, 0x55, 0x8, 0x55, 0x8, 0x55, 0xff, 0x55, 0x0, 0x67, 0x0, 0x41, 0x3e, 0x41, 0x22, 0x7f, 0x22, 0x41, 0x22, 0x41, 0x22, 0x7f, 0x3e },
{ 0x8d, 0x94, 0x8, 0x8, 0x28, 0x10, 0x28, 0x7e, 0x7e, 0x42, 0x48, 0x7e, 0x8, 0x42, 0x8, 0x7e, 0x7f, 0x40, 0x0, 0x7f, 0x3e, 0x40, 0x22, 0x7f, 0x22, 0x1, 0x22, 0xab, 0x22, 0xa9, 0x3e, 0x83, 0x0, 0x6 },
{ 0x8d, 0x95, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8d, 0x96, 0x8, 0xa, 0x4b, 0x89, 0x28, 0x9, 0x17, 0xc8, 0x10, 0x3e, 0x2b, 0x88, 0x48, 0x8, 0xb, 0x88, 0x18, 0x8, 0x18, 0x1c, 0x2b, 0x94, 0x4a, 0x94, 0xa, 0x94, 0xa, 0xb6, 0x1b, 0xa2, 0x70, 0x63 },
{ 0x8d, 0x97, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x14, 0x90, 0x4, 0x90, 0x47, 0xfe, 0x64, 0x92, 0x24, 0x92, 0x7, 0xfe, 0x14, 0x0, 0x15, 0x10, 0x15, 0xd6, 0x35, 0x1c, 0x2d, 0x10, 0x29, 0xd1, 0x63, 0xf },
{ 0x8d, 0x98, 0x0, 0x0, 0x3d, 0xff, 0x24, 0x28, 0x25, 0xff, 0x25, 0x29, 0x3d, 0x29, 0x25, 0xff, 0x24, 0x20, 0x24, 0x20, 0x3d, 0xff, 0x24, 0x44, 0x24, 0x4c, 0x24, 0xe8, 0x24, 0x38, 0x64, 0x6e, 0x4d, 0xc3 },
{ 0x8d, 0x99, 0x22, 0x0, 0x14, 0xff, 0x7f, 0x20, 0x49, 0x20, 0x49, 0x20, 0x7f, 0x3c, 0x49, 0x24, 0x49, 0x24, 0x7f, 0x34, 0x0, 0x2c, 0x3e, 0x24, 0x22, 0x24, 0x3e, 0x24, 0x22, 0x25, 0x22, 0x35, 0x3e, 0xe3 },
{ 0x8d, 0x9a, 0x2, 0x0, 0x2, 0x0, 0x7, 0xfe, 0xc, 0x92, 0x39, 0x92, 0x3, 0x32, 0xe, 0x62, 0x38, 0xc6, 0x3, 0x84, 0x1e, 0x1c, 0x0, 0xc0, 0x0, 0x66, 0x12, 0x23, 0x12, 0x5, 0x33, 0xc, 0x61, 0xf8 },
{ 0x8d, 0x9b, 0x10, 0x80, 0x10, 0x80, 0x11, 0xfe, 0x11, 0x2a, 0x5a, 0x4a, 0x54, 0x92, 0x51, 0x26, 0x50, 0x44, 0x10, 0x9c, 0x10, 0x0, 0x10, 0x60, 0x10, 0xb0, 0x12, 0x86, 0x12, 0x8b, 0x16, 0x99, 0x14, 0x70 },
{ 0x8d, 0x9c, 0xf, 0xf8, 0x8, 0x8, 0x8, 0xf8, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x8d, 0x9d, 0x4, 0x10, 0x44, 0x10, 0x28, 0x30, 0x10, 0x20, 0x11, 0xfe, 0x29, 0x2, 0x49, 0x2, 0x9, 0x2, 0x19, 0x2, 0x19, 0xfe, 0x29, 0x2, 0x49, 0x2, 0x9, 0x2, 0x9, 0x2, 0x19, 0x2, 0x71, 0xfe },
{ 0x8d, 0x9e, 0x0, 0x0, 0x31, 0xe0, 0x18, 0x20, 0x8, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x70, 0x78, 0x50, 0x8, 0x58, 0x8, 0xc8, 0x8, 0x8c, 0x9, 0x86, 0xb, 0x3, 0x18, 0x0, 0x34, 0x0, 0x63, 0xff },
{ 0x8d, 0x9f, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x24, 0x23, 0x24, 0x26, 0x24, 0x2c, 0x27, 0xb8, 0x24, 0x20, 0x24, 0x20, 0x24, 0x20, 0x24, 0x20, 0x24, 0x20, 0x24, 0x20, 0x27, 0xa1, 0x3c, 0x33, 0x60, 0x1e },
{ 0x8d, 0xa0, 0x0, 0x0, 0x21, 0xff, 0x20, 0x10, 0x20, 0xfe, 0x26, 0x82, 0x3c, 0x82, 0x20, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0xfe, 0x22, 0x82, 0x22, 0x82, 0x1e, 0xfe, 0x0, 0x44, 0x0, 0xc6, 0x1, 0x83 },
{ 0x8d, 0xa1, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x1b, 0xec, 0x70, 0x7, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x60, 0x0, 0x40 },
{ 0x8d, 0xa2, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x20, 0x82, 0x2f, 0xfa, 0x22, 0xa2, 0x22, 0xa2, 0x26, 0xb2, 0x24, 0x92, 0x2c, 0x9a, 0x20, 0x82, 0x20, 0x82, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8d, 0xa3, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x7d, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1d, 0xff, 0x70, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10 },
{ 0x8d, 0xa4, 0x6, 0x0, 0x18, 0x7e, 0x65, 0x42, 0x12, 0x7e, 0x4, 0x42, 0x1a, 0x7e, 0x65, 0x51, 0x1b, 0x5b, 0x65, 0x4a, 0x19, 0x7c, 0x63, 0xc6, 0xe, 0x3, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff },
{ 0x8d, 0xa5, 0x8, 0xe, 0x8, 0xf8, 0x8, 0x88, 0x8, 0x88, 0x7e, 0xff, 0x12, 0x88, 0x12, 0x88, 0x12, 0xe5, 0x33, 0x83, 0x26, 0xfe, 0x24, 0x82, 0x7c, 0x82, 0xa, 0xfe, 0x19, 0x82, 0x30, 0x82, 0x60, 0xfe },
{ 0x8d, 0xa6, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x2c, 0xfe, 0x2a, 0x82, 0x6a, 0x82, 0x48, 0xfe, 0x8, 0xa1, 0x8, 0xb3, 0x8, 0x96, 0x8, 0x98, 0x8, 0x88, 0x8, 0x8c, 0x8, 0xf6, 0xb, 0x83 },
{ 0x8d, 0xa7, 0x6, 0x0, 0x18, 0x7e, 0x65, 0x42, 0x12, 0x7e, 0x4, 0x42, 0x1a, 0x7e, 0x65, 0x51, 0x1b, 0x5b, 0x65, 0x4a, 0x19, 0x7c, 0x63, 0xc6, 0xe, 0x3, 0x0, 0xc0, 0x12, 0x66, 0x32, 0xb, 0x61, 0xf9 },
{ 0x8d, 0xa8, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x10, 0x80, 0x1f, 0xfe, 0x10, 0x40, 0x10, 0x61, 0x1e, 0x33, 0x70, 0xe, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8d, 0xa9, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x10, 0x40, 0x10, 0x46, 0x1f, 0x7c, 0x10, 0x40, 0x10, 0x41, 0x1f, 0x63, 0x70, 0x3e },
{ 0x8d, 0xaa, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x1c, 0x82, 0x1a, 0xfe, 0x1a, 0xa1, 0x28, 0xb3, 0x28, 0x96, 0x48, 0x98, 0x8, 0x88, 0x8, 0x8c, 0x8, 0xf6, 0xb, 0x83 },
{ 0x8d, 0xab, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x7e, 0x22, 0x12, 0x22, 0x12, 0xfa, 0x3a, 0x22, 0x36, 0x72, 0x32, 0x72, 0x52, 0xaa, 0x52, 0xaa, 0x12, 0x22, 0x12, 0x22, 0x12, 0x2, 0x13, 0xfe, 0x10, 0x0 },
{ 0x8d, 0xac, 0x0, 0x0, 0x33, 0xfc, 0x1a, 0x4, 0xa, 0x4, 0x3, 0xfc, 0x62, 0x4, 0x32, 0x4, 0x13, 0xfc, 0x0, 0x0, 0xa, 0x10, 0xa, 0x16, 0x1b, 0xdc, 0x12, 0x10, 0x32, 0x11, 0x23, 0xd3, 0x6e, 0xe },
{ 0x8d, 0xad, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x53, 0xfc, 0x32, 0x4, 0x12, 0x4, 0x13, 0xfc, 0x32, 0x4, 0x52, 0x4, 0x13, 0xfd, 0x12, 0x43, 0x32, 0x66, 0x22, 0x30, 0x63, 0xdc, 0xe, 0x7 },
{ 0x8d, 0xae, 0x8, 0x44, 0x18, 0x44, 0x30, 0x44, 0x63, 0xff, 0x36, 0x44, 0xc, 0x44, 0x18, 0x44, 0x32, 0x44, 0x7f, 0x44, 0x9, 0x7c, 0x8, 0x44, 0x2a, 0x44, 0x2b, 0x44, 0x69, 0x44, 0x48, 0x44, 0x8, 0x7c },
{ 0x8d, 0xaf, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xfa, 0x8, 0x86, 0x8, 0xcc, 0x8, 0x58, 0x8, 0x60, 0xb, 0x30, 0xe, 0x1c, 0x38, 0x7 },
{ 0x8d, 0xb0, 0x0, 0x20, 0x0, 0x40, 0x3d, 0xfe, 0x1, 0x22, 0x1, 0x22, 0x1, 0xfe, 0x7f, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x30, 0x50, 0x24, 0x54, 0x24, 0x55, 0x3e, 0xdf, 0x62, 0x90, 0x1, 0x91, 0x7, 0xf },
{ 0x8d, 0xb1, 0x4, 0x20, 0x4, 0x20, 0x24, 0x26, 0x27, 0xbc, 0x24, 0x20, 0x24, 0x20, 0x24, 0x21, 0x27, 0xb3, 0x3c, 0x1e, 0x60, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8d, 0xb2, 0x4, 0x40, 0x4, 0x40, 0xc, 0x40, 0xb, 0xff, 0x18, 0x80, 0x10, 0x80, 0x31, 0x80, 0x51, 0x0, 0x13, 0xfe, 0x16, 0x20, 0x1c, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x8d, 0xb3, 0x0, 0x0, 0x3f, 0xfc, 0x8, 0x4, 0x9, 0x8c, 0xc, 0xc8, 0x4, 0x58, 0x6, 0x10, 0x2, 0x30, 0x3, 0x20, 0x1, 0xe0, 0x0, 0xc0, 0x1, 0xe0, 0x3, 0x30, 0x6, 0x18, 0x1c, 0xc, 0x70, 0x7 },
{ 0x8d, 0xb4, 0x0, 0x80, 0x1, 0x84, 0x79, 0x4, 0x4b, 0xfe, 0x48, 0x92, 0x49, 0x90, 0x4b, 0x1f, 0x4e, 0x80, 0x48, 0xfc, 0x49, 0x84, 0x7b, 0xc, 0x6, 0xd8, 0x0, 0x70, 0x0, 0xd8, 0x1, 0x8c, 0x7, 0x7 },
{ 0x8d, 0xb5, 0x1, 0x4, 0x10, 0x88, 0x13, 0xfe, 0x54, 0x20, 0x54, 0x20, 0x55, 0xfc, 0x54, 0x20, 0x54, 0x20, 0x57, 0xfe, 0x54, 0x40, 0x54, 0x80, 0x7d, 0xfe, 0x3, 0x10, 0xc, 0x10, 0x0, 0x10, 0x1, 0xff },
{ 0x8d, 0xb6, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x7, 0xfe, 0x4, 0x20, 0xc, 0x20, 0x18, 0x20, 0x30, 0x20, 0x60, 0x20, 0x0, 0x20, 0x7, 0xff, 0x0, 0x0 },
{ 0x8d, 0xb7, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x18, 0x40, 0x60, 0x40, 0x0, 0x40, 0x1f, 0xff },
{ 0x8d, 0xb8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x7, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8d, 0xb9, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0x9, 0x24, 0x1, 0x26, 0x63, 0x23, 0x32, 0x21, 0x16, 0x20, 0x0, 0x24, 0x8, 0xe4, 0x8, 0xc, 0x18, 0x8, 0x10, 0x18, 0x30, 0x30, 0x20, 0xe0, 0x63, 0x80 },
{ 0x8d, 0xba, 0x0, 0x84, 0x0, 0x48, 0x7d, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x11, 0xfc, 0x7c, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x40, 0x10, 0x80, 0x1d, 0xfe, 0x73, 0x10, 0xc, 0x10, 0x0, 0x10, 0x1, 0xff },
{ 0x8d, 0xbb, 0x0, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x8, 0x54, 0x8, 0x56, 0x8, 0xd3, 0x1e, 0x91, 0x13, 0x90, 0x32, 0x12, 0x52, 0x12, 0x12, 0x76, 0x12, 0x4, 0x12, 0xc, 0x1e, 0x18, 0x0, 0x70, 0x1, 0xc0 },
{ 0x8d, 0xbc, 0x0, 0x20, 0x3e, 0x20, 0x0, 0x20, 0x7f, 0x7f, 0x0, 0x50, 0x3e, 0xd0, 0x0, 0x10, 0x0, 0x1e, 0x3e, 0x10, 0x0, 0x10, 0x0, 0x10, 0x3e, 0x1e, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0x10 },
{ 0x8d, 0xbd, 0x8, 0x92, 0x1c, 0xd6, 0x16, 0x54, 0x32, 0x10, 0x20, 0xfe, 0x7e, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x7e, 0x82, 0x8, 0x82, 0x4a, 0xfe, 0x6a, 0x82, 0x28, 0x82, 0xe, 0xfe, 0x38, 0x44, 0x61, 0x83 },
{ 0x8d, 0xbe, 0x30, 0x20, 0x19, 0x24, 0x1, 0x26, 0x63, 0x23, 0x36, 0x25, 0x0, 0xec, 0xc, 0x18, 0x38, 0x70, 0x63, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x42, 0xe, 0x6c, 0x78, 0x30, 0xf, 0x1c, 0x38, 0x7 },
{ 0x8d, 0xbf, 0x0, 0x80, 0x0, 0x80, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0x1c, 0x9c, 0x16, 0xb4, 0x32, 0xa6, 0x60, 0x83, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8d, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x0, 0x12, 0x48, 0x12, 0x48, 0x12, 0x48, 0x15, 0x54, 0x15, 0x54, 0x18, 0xe2, 0x10, 0x40, 0x37, 0xfc, 0x20, 0x40, 0x60, 0x40, 0x1f, 0xff, 0x0, 0x0 },
{ 0x8d, 0xc1, 0x10, 0x20, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x7d, 0x24, 0x12, 0xaa, 0x12, 0xaa, 0x14, 0x71, 0x10, 0x20, 0x1c, 0x20, 0x73, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x30, 0x0 },
{ 0x8d, 0xc2, 0x8, 0x20, 0xb, 0xfe, 0x18, 0x20, 0x11, 0xfc, 0x10, 0x20, 0x37, 0xff, 0x30, 0x0, 0x51, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x88, 0x13, 0x6 },
{ 0x8d, 0xc3, 0x4, 0x20, 0x5, 0x22, 0xd, 0x22, 0x9, 0xfe, 0x18, 0x88, 0x10, 0x90, 0x31, 0xfe, 0x51, 0x10, 0x13, 0x10, 0x15, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x11, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x11, 0xff },
{ 0x8d, 0xc4, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x7f, 0xff, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x8d, 0xc5, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x11, 0x0, 0x1f, 0x7e, 0x11, 0x22, 0x1f, 0x36, 0x11, 0x14, 0x11, 0x8, 0x1f, 0x1c, 0x71, 0x77, 0x1, 0x0 },
{ 0x8d, 0xc6, 0x4, 0x20, 0x4, 0x24, 0x3f, 0xa6, 0x4, 0x22, 0x4, 0x20, 0x7f, 0xff, 0x0, 0x20, 0x0, 0x22, 0x3f, 0xb2, 0x20, 0x96, 0x20, 0x94, 0x20, 0x9c, 0x20, 0x88, 0x3f, 0x9d, 0x0, 0x77, 0x3, 0xc2 },
{ 0x8d, 0xc7, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x22, 0x22, 0x1f, 0xfc, 0x2, 0x20, 0x1f, 0xfc, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0x1c, 0x9c, 0x70, 0x87, 0xf, 0xf8, 0x0, 0x80, 0x3f, 0xfe },
{ 0x8d, 0xc8, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x84, 0x1f, 0xfc, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x20, 0xf, 0xc0, 0x2, 0x78, 0x3c, 0xe },
{ 0x8d, 0xc9, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x1f, 0xfc, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8d, 0xca, 0x1, 0x84, 0x7, 0xc, 0x7c, 0x8, 0x8, 0x98, 0x4d, 0xb2, 0x65, 0x6, 0x20, 0x4, 0x4, 0xc, 0x7f, 0x98, 0x4, 0x31, 0xc, 0x3, 0xf, 0x2, 0x15, 0x86, 0x34, 0xc, 0x64, 0x18, 0x4, 0x30 },
{ 0x8d, 0xcb, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x48, 0x0, 0x58, 0x0, 0x70, 0x0, 0x40, 0x1, 0xc0, 0x7, 0x40, 0x1c, 0x40, 0x70, 0x40, 0x0, 0x40, 0x1, 0xc0 },
{ 0x8d, 0xcc, 0x10, 0x6, 0x10, 0x3c, 0x13, 0xe0, 0x10, 0x42, 0x7a, 0x66, 0x13, 0x24, 0x11, 0x0, 0x10, 0x20, 0x18, 0x20, 0x77, 0xff, 0x10, 0xa8, 0x10, 0xa8, 0x11, 0xac, 0x13, 0x26, 0x16, 0x23, 0x30, 0x20 },
{ 0x8d, 0xcd, 0x4, 0x20, 0x4, 0x24, 0x3f, 0xa6, 0x4, 0x22, 0x4, 0x20, 0x7f, 0xff, 0x0, 0x20, 0x4, 0x22, 0x4, 0x32, 0x7f, 0xd6, 0xc, 0x14, 0xf, 0x1c, 0x15, 0x88, 0x34, 0x1d, 0x64, 0x77, 0x5, 0xc2 },
{ 0x8d, 0xce, 0x0, 0x80, 0x8, 0x80, 0x8, 0xfe, 0x8, 0x80, 0x7f, 0xff, 0x0, 0x28, 0x0, 0x24, 0x1f, 0xfe, 0x10, 0x10, 0x17, 0xd2, 0x11, 0x16, 0x15, 0x5c, 0x15, 0x49, 0x31, 0x1d, 0x23, 0x37, 0x60, 0xe2 },
{ 0x8d, 0xcf, 0x0, 0x20, 0x30, 0x20, 0x1f, 0xff, 0x9, 0x4, 0x0, 0xd8, 0x60, 0x70, 0x31, 0xdc, 0x17, 0x7, 0x1, 0x4, 0x9, 0xfc, 0x9, 0x4, 0x19, 0xfc, 0x11, 0x4, 0x33, 0x4, 0x22, 0x4, 0x66, 0x4 },
{ 0x8d, 0xd0, 0x4, 0x42, 0xc, 0xc6, 0x19, 0x8c, 0x33, 0x18, 0x22, 0x10, 0x19, 0x8c, 0xc, 0xc6, 0x4, 0x42, 0x0, 0x80, 0x8, 0x82, 0x18, 0x86, 0x31, 0xcc, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8d, 0xd1, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x1, 0x4, 0x11, 0x84, 0x18, 0x8c, 0x8, 0x8, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8d, 0xd2, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x17, 0x4e, 0x10, 0x40, 0x17, 0x4e, 0x10, 0x0, 0x12, 0x40, 0x13, 0xfe, 0x34, 0x40, 0x2f, 0xff, 0x60, 0x40, 0x0, 0x40 },
{ 0x8d, 0xd3, 0x0, 0x40, 0x7e, 0x40, 0x11, 0xf8, 0x10, 0x48, 0x10, 0x48, 0x10, 0xc9, 0x3c, 0x89, 0x25, 0x87, 0x64, 0x20, 0x24, 0x20, 0x25, 0xfe, 0x24, 0x20, 0x24, 0x20, 0x3c, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x8d, 0xd4, 0x4, 0x20, 0x24, 0x20, 0x24, 0x26, 0x27, 0xbc, 0x24, 0x20, 0x24, 0x21, 0x27, 0xb3, 0x3c, 0x1e, 0x60, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x7, 0xfc, 0x1c, 0x4, 0x74, 0x4, 0x7, 0xfc },
{ 0x8d, 0xd5, 0x8, 0x0, 0xf, 0x7e, 0x18, 0x82, 0x35, 0xc6, 0x63, 0x6c, 0x16, 0x30, 0xc, 0x18, 0x1b, 0xec, 0x70, 0x7, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x3, 0x80 },
{ 0x8d, 0xd6, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x10, 0x2, 0x20, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x7b, 0xef, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x88, 0xa, 0xa8, 0x1c, 0x98, 0x11, 0x88, 0x30, 0x8 },
{ 0x8d, 0xd7, 0x8, 0x0, 0x18, 0xfe, 0x30, 0x92, 0x62, 0x92, 0x36, 0x92, 0xc, 0x92, 0x18, 0x92, 0x34, 0xfe, 0x7e, 0x92, 0xa, 0x92, 0x8, 0x92, 0x2a, 0x92, 0x2a, 0x92, 0x68, 0x92, 0x48, 0xfe, 0x8, 0x0 },
{ 0x8d, 0xd8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x38, 0x1f, 0xe0, 0x0, 0x84, 0x18, 0xcc, 0xc, 0x58, 0x0, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8d, 0xd9, 0x4, 0x20, 0x4, 0x24, 0x3f, 0xa6, 0x4, 0x22, 0x4, 0x20, 0x7f, 0xff, 0x0, 0x20, 0x4, 0x32, 0x7f, 0xd6, 0x8, 0x14, 0x14, 0x9c, 0x35, 0x8, 0x52, 0x1d, 0x11, 0x15, 0x1c, 0xb7, 0x30, 0x62 },
{ 0x8d, 0xda, 0x4, 0x24, 0x4, 0x26, 0x3f, 0xa2, 0x4, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x7f, 0xe2, 0x4, 0x32, 0x3f, 0x96, 0x24, 0x94, 0x3f, 0x9c, 0x24, 0x88, 0x3f, 0x9d, 0x4, 0x15, 0x7f, 0xb7, 0x4, 0x62 },
{ 0x8d, 0xdb, 0x1, 0x0, 0x3d, 0xde, 0x25, 0x22, 0x26, 0xa6, 0x25, 0x54, 0x28, 0x88, 0x29, 0x4, 0x26, 0xfb, 0x24, 0x0, 0x24, 0x0, 0x27, 0xff, 0x2c, 0x20, 0x21, 0x24, 0x23, 0x26, 0x26, 0x23, 0x20, 0xe0 },
{ 0x8d, 0xdc, 0x4, 0x2, 0x4, 0x12, 0x7f, 0xf2, 0x10, 0x92, 0x9, 0x12, 0x6, 0x12, 0x19, 0x92, 0x70, 0xf2, 0x10, 0x92, 0x1f, 0x92, 0x10, 0x92, 0x1f, 0x82, 0x10, 0x82, 0x30, 0x82, 0x20, 0x82, 0x60, 0x8e },
{ 0x8d, 0xdd, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0xa, 0x20, 0xc, 0x20, 0x8, 0x20, 0x19, 0xfe, 0x28, 0x20, 0x48, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0xb, 0xff, 0x8, 0x0 },
{ 0x8d, 0xde, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x7e, 0xff, 0x8, 0xc, 0x8, 0xc, 0x1c, 0x1c, 0x1a, 0x14, 0x19, 0x34, 0x28, 0x24, 0x28, 0x64, 0x48, 0xc4, 0x9, 0x84, 0x8, 0x4, 0x8, 0x4, 0x8, 0x1c },
{ 0x8d, 0xdf, 0x0, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x1e, 0x20, 0x72, 0x3f, 0x6, 0x20, 0xc, 0x20, 0x38, 0x20 },
{ 0x8d, 0xe0, 0x0, 0x4, 0x3e, 0x4, 0x22, 0x4, 0x22, 0x4, 0x3e, 0xff, 0x22, 0xc, 0x22, 0xc, 0x22, 0x1c, 0x3e, 0x14, 0x22, 0x34, 0x22, 0x64, 0x22, 0xc4, 0x3e, 0x4, 0x14, 0x4, 0x36, 0x4, 0x62, 0x1c },
{ 0x8d, 0xe1, 0x0, 0x0, 0x33, 0xfe, 0x18, 0x88, 0x8, 0x88, 0x0, 0x88, 0x0, 0x88, 0x0, 0x88, 0x3, 0xff, 0x8, 0x28, 0x8, 0x68, 0x18, 0x48, 0x10, 0xc8, 0x31, 0x88, 0x23, 0x8, 0x6e, 0x8, 0x0, 0x38 },
{ 0x8d, 0xe2, 0x10, 0x0, 0x11, 0xff, 0x11, 0x0, 0x11, 0x0, 0x7d, 0x0, 0x11, 0xfe, 0x11, 0x42, 0x11, 0x46, 0x11, 0x64, 0x11, 0x2c, 0x1d, 0x38, 0x73, 0x10, 0x2, 0x38, 0x6, 0x6c, 0xc, 0xc6, 0x1, 0x83 },
{ 0x8d, 0xe3, 0x0, 0x0, 0x3d, 0xff, 0x25, 0x0, 0x25, 0x0, 0x25, 0x0, 0x2d, 0xfe, 0x29, 0x42, 0x25, 0x46, 0x25, 0x64, 0x25, 0x2c, 0x2d, 0x38, 0x23, 0x10, 0x22, 0x38, 0x26, 0x6c, 0x2c, 0xc6, 0x21, 0x83 },
{ 0x8d, 0xe4, 0x0, 0x0, 0x11, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x7d, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x10, 0x48, 0x10, 0xcc, 0x1d, 0xce, 0x73, 0x4b, 0x0, 0x48, 0x0, 0x48, 0x0, 0xc8, 0x1, 0x88 },
{ 0x8d, 0xe5, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x7f, 0xdf, 0x10, 0x55, 0x10, 0xd5, 0x38, 0x95, 0x35, 0x9f, 0x31, 0x55, 0x53, 0x55, 0x55, 0x15, 0x11, 0x1f, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4 },
{ 0x8d, 0xe6, 0x0, 0x8, 0xe, 0x30, 0x1, 0xc0, 0x1e, 0x38, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x14, 0x4, 0x67, 0xfc, 0x4, 0x4, 0x7, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x4, 0x1c },
{ 0x8d, 0xe7, 0x2, 0x2, 0x3, 0x6, 0x1, 0x8c, 0x78, 0x88, 0x4b, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x4f, 0xff, 0x48, 0x50, 0x48, 0x50, 0x78, 0xd8, 0x0, 0x88, 0x1, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x8d, 0xe8, 0x0, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x54, 0x50, 0x54, 0xd8, 0x55, 0x8c, 0x54, 0x0, 0x57, 0xff, 0x54, 0x4, 0x55, 0xe4, 0x55, 0x24, 0x7d, 0x24, 0x1, 0x24, 0x1, 0xe4, 0x0, 0x4, 0x0, 0x1c },
{ 0x8d, 0xe9, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x50, 0x7c, 0xd8, 0x11, 0x8c, 0x10, 0x0, 0x17, 0xff, 0x10, 0x4, 0x11, 0xe4, 0x1d, 0x24, 0x71, 0x24, 0x1, 0x24, 0x1, 0xe4, 0x0, 0x4, 0x0, 0x1c },
{ 0x8d, 0xea, 0x0, 0x20, 0x7c, 0x20, 0x13, 0xfe, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x3c, 0x0, 0x27, 0xff, 0x24, 0x4, 0x65, 0xe4, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x3d, 0xe4, 0x0, 0x4, 0x0, 0x1c },
{ 0x8d, 0xeb, 0x3f, 0x1e, 0x21, 0x62, 0x3f, 0x1c, 0x8, 0x63, 0x2f, 0x3e, 0x28, 0x22, 0x3e, 0x3e, 0x60, 0x80, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xff, 0x24, 0x92, 0x62, 0x4a, 0x40, 0x6 },
{ 0x8d, 0xec, 0x4, 0x80, 0x4, 0x80, 0xc, 0x80, 0x9, 0xff, 0x19, 0x20, 0x13, 0x20, 0x36, 0x20, 0x50, 0x3e, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x3e, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x8d, 0xed, 0x48, 0x82, 0x69, 0xa2, 0x29, 0x22, 0x8, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x21, 0x2, 0x27, 0xe },
{ 0x8d, 0xee, 0x0, 0x80, 0x0, 0x80, 0x78, 0x80, 0x49, 0xff, 0x49, 0x20, 0x4b, 0x20, 0x4e, 0x20, 0x48, 0x3e, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x78, 0x3e, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x8d, 0xef, 0x10, 0x40, 0x10, 0x40, 0x17, 0xfe, 0x14, 0x92, 0x7d, 0x92, 0x13, 0x10, 0x16, 0x1f, 0x11, 0x0, 0x19, 0xff, 0x73, 0x40, 0x16, 0x7e, 0x10, 0x40, 0x10, 0x7e, 0x10, 0x40, 0x10, 0x40, 0x30, 0x40 },
{ 0x8d, 0xf0, 0x0, 0x80, 0x0, 0x80, 0x78, 0x80, 0x49, 0xff, 0x49, 0x20, 0x4b, 0x20, 0x4e, 0x20, 0x78, 0x3e, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x48, 0x3e, 0x78, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x8d, 0xf1, 0x20, 0x80, 0x31, 0xbe, 0x11, 0x22, 0x7f, 0xe2, 0x4, 0x22, 0x4, 0x3e, 0x24, 0xa2, 0x24, 0xa2, 0x24, 0xa2, 0x24, 0xbe, 0x3f, 0xa2, 0x4, 0x22, 0xc, 0x62, 0x8, 0x42, 0x18, 0xc2, 0x31, 0x8e },
{ 0x8d, 0xf2, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x52, 0x7e, 0x52, 0x12, 0x52, 0x12, 0x52, 0x3a, 0x52, 0x37, 0xff, 0x32, 0x52, 0x52, 0x52, 0x52, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x56 },
{ 0x8d, 0xf3, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0x1c, 0x20, 0x72, 0x3f, 0x2, 0x0, 0x7, 0xfe, 0x1c, 0x80, 0x70, 0xfc, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8d, 0xf4, 0x8, 0x10, 0x8, 0x10, 0x1f, 0xbf, 0x34, 0x28, 0x62, 0x44, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x11, 0xcc, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8d, 0xf5, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x21, 0x2, 0x22, 0x22, 0xe, 0x48, 0x1, 0x84, 0x3f, 0xfe, 0x0, 0x82, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8d, 0xf6, 0x8, 0x24, 0x1c, 0x24, 0x16, 0x24, 0x32, 0xff, 0x20, 0x24, 0x7e, 0x24, 0x8, 0x24, 0x8, 0xff, 0x7f, 0x0, 0x8, 0x7e, 0x4a, 0x42, 0x6a, 0x42, 0x28, 0x7e, 0xe, 0x42, 0x38, 0x42, 0x60, 0x7e },
{ 0x8d, 0xf7, 0x8, 0x21, 0x9, 0x33, 0x9, 0x92, 0x7e, 0x96, 0x8, 0x84, 0x8, 0x0, 0x1c, 0x20, 0x1a, 0x20, 0x19, 0xff, 0x28, 0x44, 0x28, 0xc4, 0x48, 0x8c, 0x8, 0xe8, 0x8, 0x3c, 0x8, 0x66, 0x9, 0xc3 },
{ 0x8d, 0xf8, 0x10, 0x10, 0x1e, 0x10, 0x32, 0xfe, 0x24, 0x10, 0x7e, 0x10, 0x2a, 0x10, 0x2b, 0xff, 0x3e, 0x0, 0x2a, 0x10, 0x2a, 0x10, 0x3e, 0xfe, 0x0, 0x10, 0x55, 0x10, 0x55, 0x10, 0x54, 0x10, 0x41, 0xff },
{ 0x8d, 0xf9, 0x10, 0x20, 0x10, 0x20, 0x1f, 0x3f, 0x34, 0x68, 0x66, 0xcc, 0x2, 0x4, 0x8, 0x90, 0x8, 0x90, 0x7f, 0xff, 0x8, 0x90, 0x8, 0x90, 0x8, 0x90, 0x8, 0xf0, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfe },
{ 0x8d, 0xfa, 0x0, 0x20, 0x3f, 0x20, 0x21, 0x20, 0x3f, 0x20, 0x21, 0x23, 0x3f, 0x3e, 0x0, 0x20, 0x7f, 0xa0, 0x4, 0x20, 0x14, 0x20, 0x17, 0x21, 0x14, 0x33, 0x14, 0x1e, 0x3c, 0x0, 0x27, 0x0, 0x61, 0xff },
{ 0x8d, 0xfb, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x4c },
{ 0x8d, 0xfc, 0x0, 0x2, 0x3f, 0xd2, 0x20, 0x52, 0x20, 0x52, 0x3f, 0xd2, 0x22, 0x12, 0x22, 0x12, 0x2f, 0xd2, 0x2a, 0x52, 0x2a, 0x52, 0x2a, 0x52, 0x2a, 0x42, 0x6a, 0x42, 0x4a, 0xc2, 0x42, 0x2, 0x2, 0xe },
{ 0x8e, 0x40, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x24, 0x2, 0x27, 0x7a, 0x8, 0x88, 0x35, 0x50, 0x12, 0x20, 0xc, 0x18, 0x73, 0xe7, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0xc, 0x98, 0x38, 0x8e, 0x3, 0x80 },
{ 0x8e, 0x41, 0x11, 0x11, 0x13, 0x33, 0x12, 0x22, 0x16, 0x66, 0x7b, 0x33, 0x11, 0x11, 0x10, 0x40, 0x10, 0x7e, 0x18, 0xc2, 0x71, 0x86, 0x13, 0x44, 0x10, 0x2c, 0x10, 0x18, 0x10, 0x30, 0x10, 0xe0, 0x33, 0x80 },
{ 0x8e, 0x42, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x79, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x12, 0x40, 0x1b, 0xde, 0x72, 0x4a, 0x13, 0xca, 0x12, 0x4e, 0x12, 0x44, 0x13, 0xce, 0x16, 0x5b, 0x30, 0x40 },
{ 0x8e, 0x43, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x14, 0x1, 0x7d, 0xff, 0x12, 0x52, 0x15, 0x54, 0x12, 0x88, 0x19, 0x4, 0x76, 0xfb, 0x10, 0x0, 0x13, 0xfe, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x30, 0x60 },
{ 0x8e, 0x44, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7f, 0x40, 0x8, 0x40, 0x8, 0x40, 0x1c, 0x40, 0x1a, 0x40, 0x19, 0x40, 0x28, 0x40, 0x28, 0x40, 0x48, 0x40, 0x8, 0x40, 0x8, 0x41, 0x8, 0x63, 0x8, 0x3e },
{ 0x8e, 0x45, 0x2, 0x0, 0x22, 0x78, 0x14, 0x48, 0x8, 0x48, 0x14, 0x48, 0x62, 0xc8, 0x9, 0x8f, 0x8, 0x0, 0x7e, 0xfc, 0x8, 0x44, 0x1c, 0x6c, 0x1a, 0x28, 0x2a, 0x10, 0x48, 0x38, 0x8, 0x6c, 0x9, 0xc7 },
{ 0x8e, 0x46, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x0, 0x10, 0x3c, 0xfe, 0x24, 0x44, 0x24, 0x28, 0x29, 0xff, 0x29, 0x0, 0x25, 0x50, 0x25, 0x7e, 0x25, 0x90, 0x2d, 0x7e, 0x21, 0x10, 0x22, 0x10, 0x20, 0xff },
{ 0x8e, 0x47, 0x10, 0x24, 0x10, 0x2c, 0x7c, 0x28, 0x14, 0x7f, 0x15, 0x48, 0x37, 0x48, 0x60, 0xc8, 0x9, 0x7e, 0x8, 0x48, 0x7f, 0x48, 0x8, 0x48, 0x1c, 0x7e, 0x1a, 0x48, 0x29, 0x48, 0x48, 0x48, 0x8, 0x7f },
{ 0x8e, 0x48, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x1c, 0x9c, 0x0, 0x80, 0x1c, 0x9c, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8e, 0x49, 0x10, 0x10, 0x1e, 0x10, 0x32, 0xff, 0x24, 0x10, 0x7f, 0x7e, 0x29, 0x10, 0x29, 0xff, 0x3f, 0x0, 0x29, 0x7e, 0x29, 0x42, 0x3f, 0x7e, 0x0, 0x42, 0x0, 0x7e, 0x55, 0x42, 0x55, 0x42, 0x40, 0x4e },
{ 0x8e, 0x4a, 0x10, 0x1, 0x13, 0xe9, 0x12, 0x29, 0x12, 0x29, 0x7e, 0x29, 0x13, 0xe9, 0x11, 0x9, 0x11, 0x9, 0x11, 0xe9, 0x1d, 0x29, 0x71, 0x29, 0x11, 0x21, 0x13, 0x21, 0x12, 0x61, 0x12, 0x41, 0x36, 0xc7 },
{ 0x8e, 0x4b, 0x8, 0x10, 0x1c, 0x10, 0x17, 0xff, 0x32, 0x10, 0x20, 0xfe, 0x7e, 0x10, 0x9, 0xff, 0x8, 0x0, 0x7e, 0xfe, 0x8, 0x82, 0x4a, 0xfe, 0x6a, 0x82, 0x28, 0xfe, 0xe, 0x82, 0x38, 0x82, 0x60, 0x86 },
{ 0x8e, 0x4c, 0x10, 0x10, 0x1e, 0x10, 0x32, 0x10, 0x25, 0xff, 0x7e, 0x44, 0x2a, 0xc6, 0x2b, 0x83, 0x3e, 0x44, 0x2a, 0x44, 0x2a, 0x6c, 0x3e, 0x38, 0x0, 0x10, 0x55, 0x38, 0x55, 0x6c, 0x54, 0xc6, 0x41, 0x83 },
{ 0x8e, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0x4e, 0x0, 0x0, 0x3, 0xff, 0x78, 0x50, 0x48, 0x50, 0x48, 0x50, 0x49, 0xfe, 0x49, 0x52, 0x79, 0x52, 0x49, 0x52, 0x49, 0x52, 0x49, 0x9e, 0x49, 0x2, 0x79, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0xfe },
{ 0x8e, 0x4f, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0x50, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x78, 0x8f, 0x8, 0x88, 0x14, 0x94, 0x22, 0xa2, 0x8, 0x88, 0x14, 0x94, 0x22, 0xa2, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8e, 0x51, 0x2, 0x0, 0x6, 0x10, 0x4, 0x18, 0xf, 0xe8, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x6, 0x30, 0x1c, 0xdc, 0x71, 0x87, 0x7, 0x30, 0x1c, 0xe0, 0x3, 0x8c, 0x1e, 0x38, 0x0, 0xe0, 0x1f, 0x80 },
{ 0x8e, 0x52, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8e, 0x53, 0x10, 0x40, 0x10, 0xc4, 0x10, 0x86, 0x11, 0xfa, 0x50, 0x20, 0x5b, 0xff, 0x54, 0x48, 0x50, 0x84, 0x13, 0x13, 0x10, 0x60, 0x11, 0x88, 0x10, 0x31, 0x11, 0xc3, 0x10, 0xe, 0x10, 0x38, 0x11, 0xe0 },
{ 0x8e, 0x54, 0x12, 0x48, 0x12, 0x48, 0x17, 0xe8, 0x12, 0x4f, 0x7a, 0x4a, 0x17, 0xea, 0x10, 0x12, 0x13, 0xca, 0x1a, 0x4a, 0x73, 0xce, 0x12, 0x44, 0x13, 0xc4, 0x12, 0x4e, 0x12, 0x4a, 0x12, 0x4a, 0x32, 0xdb },
{ 0x8e, 0x55, 0x14, 0x20, 0x14, 0x20, 0x7f, 0x20, 0x14, 0x3f, 0x14, 0x64, 0x7f, 0x44, 0x0, 0xcc, 0x3e, 0x28, 0x22, 0x28, 0x3e, 0x38, 0x22, 0x10, 0x3e, 0x38, 0x22, 0x28, 0x22, 0x6c, 0x22, 0x46, 0x26, 0xc3 },
{ 0x8e, 0x56, 0x10, 0x24, 0x10, 0x26, 0x10, 0x22, 0x7d, 0xff, 0x10, 0x20, 0x11, 0xfe, 0x38, 0x20, 0x35, 0xff, 0x34, 0x20, 0x50, 0x32, 0x50, 0x16, 0x10, 0x1c, 0x10, 0x38, 0x10, 0xed, 0x13, 0x87, 0x10, 0x2 },
{ 0x8e, 0x57, 0x11, 0x0, 0x11, 0xde, 0x15, 0x2, 0x1b, 0xd4, 0x52, 0x48, 0x55, 0x54, 0x50, 0xa3, 0x13, 0x0, 0x1d, 0x22, 0x10, 0xa8, 0x13, 0xff, 0x38, 0xa8, 0x2c, 0xa8, 0x25, 0xac, 0x63, 0x26, 0x40, 0x20 },
{ 0x8e, 0x58, 0x0, 0x0, 0x7d, 0xfe, 0x11, 0x52, 0x11, 0x52, 0x11, 0x52, 0x11, 0x52, 0x7d, 0x52, 0x13, 0xff, 0x11, 0x52, 0x11, 0x52, 0x11, 0x52, 0x11, 0x52, 0x1d, 0x52, 0x71, 0x52, 0x1, 0x52, 0x1, 0x56 },
{ 0x8e, 0x59, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x1f, 0xff, 0x10, 0x0, 0x12, 0x40, 0x13, 0xfc, 0x14, 0x40, 0x10, 0x40, 0x33, 0xfc, 0x20, 0x40, 0x60, 0x40, 0xf, 0xff },
{ 0x8e, 0x5a, 0x10, 0x40, 0x10, 0x40, 0x3e, 0xff, 0x29, 0x20, 0x44, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x18, 0x20 },
{ 0x8e, 0x5b, 0x10, 0x40, 0x1f, 0x7f, 0x24, 0x90, 0x4f, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x4, 0x90, 0x1b, 0x2c, 0x61, 0x53, 0x1f, 0xf8, 0x4, 0x90, 0x38, 0x8e },
{ 0x8e, 0x5c, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x40, 0x6, 0x30, 0x1c, 0x9c, 0x70, 0x87, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x82, 0x3, 0xff, 0x7e, 0x1 },
{ 0x8e, 0x5d, 0x0, 0x44, 0x3d, 0xef, 0x0, 0x44, 0x7d, 0xef, 0x0, 0x44, 0x3c, 0xaa, 0x1, 0x1, 0x0, 0xfe, 0x3c, 0x82, 0x0, 0xfe, 0x0, 0x82, 0x3c, 0xfe, 0x24, 0x82, 0x24, 0xfe, 0x24, 0x44, 0x3d, 0x83 },
{ 0x8e, 0x5e, 0x4, 0x10, 0x3f, 0x7e, 0x4, 0x10, 0x7f, 0x7f, 0xa, 0x28, 0x11, 0x44, 0x60, 0x3, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x8e, 0x5f, 0x0, 0x20, 0x7f, 0x62, 0x14, 0x42, 0x14, 0xff, 0x7f, 0x25, 0x55, 0x24, 0x55, 0x47, 0x55, 0xa0, 0x67, 0x3e, 0x41, 0x62, 0x41, 0xc6, 0x7f, 0x2c, 0x41, 0x18, 0x41, 0x3c, 0x7f, 0x66, 0x0, 0xc3 },
{ 0x8e, 0x60, 0x4, 0x0, 0x7, 0x7e, 0x4, 0x22, 0x1f, 0x94, 0x71, 0x8, 0x16, 0x34, 0x78, 0x83, 0x3, 0x60, 0xc, 0x98, 0x77, 0xf7, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf4, 0x4, 0x48, 0x3f, 0x3f },
{ 0x8e, 0x61, 0x8, 0x2, 0x8, 0xe, 0x7f, 0xb8, 0x8, 0x20, 0x3f, 0x20, 0x29, 0x3f, 0x29, 0x24, 0x3f, 0x24, 0x29, 0x24, 0x29, 0x24, 0x3f, 0x24, 0x8, 0x24, 0x7f, 0xe4, 0x8, 0x44, 0x8, 0xc4, 0x8, 0x4 },
{ 0x8e, 0x62, 0x4, 0x2, 0x7f, 0x8e, 0x4, 0x38, 0x3f, 0xa0, 0x24, 0xbf, 0x3f, 0xa4, 0x24, 0xa4, 0x3f, 0xe4, 0x4, 0x44, 0x7f, 0x84, 0x4, 0x4, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8e, 0x63, 0x0, 0x20, 0x7f, 0x24, 0x10, 0x22, 0x11, 0xff, 0x1e, 0x20, 0x13, 0xfe, 0x32, 0x20, 0x23, 0xff, 0x3a, 0x20, 0x6e, 0x32, 0x6, 0x16, 0x4, 0x1c, 0xc, 0x38, 0x18, 0x6d, 0x31, 0xc7, 0x60, 0x2 },
{ 0x8e, 0x64, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x30, 0x20, 0x50, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x0 },
{ 0x8e, 0x65, 0x8, 0x0, 0xb, 0xfe, 0x18, 0xc, 0x10, 0x18, 0x10, 0x20, 0x30, 0x20, 0x30, 0x20, 0x57, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0xe0 },
{ 0x8e, 0x66, 0x4, 0x0, 0x7, 0xfe, 0xc, 0x2, 0x8, 0x2, 0x1b, 0xf2, 0x10, 0x2, 0x30, 0x2, 0x53, 0xf2, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0xf2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0xe },
{ 0x8e, 0x67, 0x4, 0x20, 0x4, 0x20, 0xf, 0xff, 0x8, 0x20, 0x1b, 0xfe, 0x12, 0x22, 0x32, 0x22, 0x52, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x11, 0x20, 0x10, 0xe0, 0x10, 0x40, 0x10, 0xf0, 0x11, 0x9c, 0x17, 0x7 },
{ 0x8e, 0x68, 0x4, 0x2, 0x4, 0x12, 0x7f, 0xd2, 0x4, 0x12, 0x4, 0x12, 0x7f, 0xd2, 0x44, 0x52, 0x44, 0x52, 0x44, 0xd2, 0xe, 0x12, 0xd, 0x12, 0x15, 0x82, 0x34, 0xc2, 0x64, 0x2, 0x4, 0x2, 0x4, 0xe },
{ 0x8e, 0x69, 0x0, 0x0, 0x7f, 0xfe, 0x0, 0x2, 0x0, 0x2, 0x1f, 0xf2, 0x0, 0x2, 0x0, 0x2, 0xf, 0xe2, 0x8, 0x22, 0x8, 0x22, 0x8, 0x22, 0xf, 0xe2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0xe },
{ 0x8e, 0x6a, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x80, 0x19, 0x80, 0xd, 0x0, 0x3, 0x80, 0x6, 0xe0, 0x1c, 0x38, 0x70, 0xf },
{ 0x8e, 0x6b, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x2, 0x22, 0x2, 0x3e, 0x7a, 0x0, 0x2, 0x7f, 0x2, 0x55, 0x7a, 0x55, 0x4a, 0x55, 0x4a, 0x7f, 0x4a, 0x55, 0x7a, 0x55, 0x2, 0x55, 0x2, 0x55, 0x2, 0x57, 0xe },
{ 0x8e, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x24, 0x32, 0x2c, 0x1e, 0x38, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0 },
{ 0x8e, 0x6d, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8e, 0x6e, 0x8, 0x20, 0x8, 0x20, 0x8, 0x60, 0x8, 0x44, 0x7e, 0x46, 0x12, 0xc2, 0x12, 0x9f, 0x13, 0xf1, 0x32, 0x0, 0x26, 0x0, 0x24, 0xfe, 0x7c, 0x82, 0xa, 0x82, 0x1a, 0x82, 0x30, 0x82, 0x60, 0xfe },
{ 0x8e, 0x6f, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x7e, 0x10, 0x12, 0x10, 0x12, 0xfe, 0x12, 0x92, 0x32, 0x92, 0x26, 0x92, 0x24, 0x92, 0x7c, 0x92, 0xa, 0x96, 0x1a, 0x10, 0x30, 0x10, 0x60, 0x10 },
{ 0x8e, 0x70, 0x0, 0x80, 0x30, 0x80, 0x19, 0xfe, 0x9, 0x22, 0x2, 0x24, 0x8, 0x70, 0x18, 0xd8, 0x31, 0x8c, 0x67, 0x7, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x20, 0xf, 0xc0, 0x2, 0x78, 0x3c, 0xe },
{ 0x8e, 0x71, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8e, 0x72, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x20, 0x0, 0x20, 0x0, 0x3f, 0xff, 0x24, 0x0, 0x27, 0xa0, 0x2c, 0xa6, 0x39, 0xbc, 0x25, 0x20, 0x63, 0x21, 0x46, 0x23, 0x1c, 0x1e },
{ 0x8e, 0x73, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x9c, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8e, 0x74, 0x4, 0x0, 0x9, 0xff, 0x3e, 0x10, 0x22, 0x10, 0x22, 0xfe, 0x22, 0x92, 0x3e, 0x92, 0x20, 0x92, 0x20, 0x92, 0x3e, 0x92, 0x22, 0x92, 0x22, 0x92, 0x22, 0x92, 0x22, 0x96, 0x3e, 0x10, 0x0, 0x10 },
{ 0x8e, 0x75, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x1, 0x80, 0x4, 0xc0, 0x14, 0x46, 0x14, 0x3, 0x34, 0x9, 0x66, 0x18, 0x3, 0xf0 },
{ 0x8e, 0x76, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x43, 0x34, 0x9, 0x66, 0x18, 0x3, 0xf0 },
{ 0x8e, 0x77, 0x8, 0x80, 0x8, 0x8e, 0x8, 0xf8, 0x8, 0x80, 0x7e, 0x81, 0x8, 0xc3, 0x8, 0x7e, 0x8, 0x0, 0xe, 0x0, 0x78, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x38, 0xfe },
{ 0x8e, 0x78, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xf8, 0x4, 0x8, 0x6, 0x18, 0x2, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8e, 0x79, 0x0, 0x20, 0x7f, 0xa0, 0x3, 0x40, 0x6, 0x7f, 0xc, 0x84, 0x8, 0xc4, 0x9, 0x44, 0xe, 0x6c, 0x38, 0x28, 0x68, 0x38, 0x8, 0x10, 0x8, 0x38, 0x8, 0x28, 0x8, 0x6c, 0x8, 0xc6, 0x39, 0x83 },
{ 0x8e, 0x7a, 0x12, 0x2, 0x12, 0xe, 0x7f, 0xb8, 0x12, 0x20, 0x12, 0x20, 0x1e, 0x3f, 0x12, 0x24, 0x12, 0x24, 0x1e, 0x24, 0x12, 0x24, 0x12, 0x24, 0x7f, 0xa4, 0x12, 0x24, 0x13, 0x64, 0x31, 0x44, 0x60, 0xc4 },
{ 0x8e, 0x7b, 0x8, 0x40, 0x8, 0x40, 0x8, 0x80, 0x7e, 0xff, 0x11, 0x80, 0x11, 0x10, 0x1e, 0x96, 0x12, 0x9a, 0x12, 0xb2, 0x12, 0xd2, 0x13, 0x96, 0x12, 0x90, 0x32, 0x90, 0x22, 0x81, 0x22, 0xc3, 0x6e, 0x7e },
{ 0x8e, 0x7c, 0x10, 0x0, 0x10, 0x3c, 0x1f, 0xe0, 0x10, 0x0, 0x10, 0x2, 0x18, 0x6, 0xf, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8e, 0x7d, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x10, 0x10, 0x10, 0x39, 0xfe, 0x34, 0x82, 0x34, 0xc6, 0x50, 0x44, 0x50, 0x6c, 0x10, 0x38, 0x10, 0x38, 0x10, 0x6c, 0x10, 0xc6, 0x11, 0x83 },
{ 0x8e, 0x7e, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0x80, 0x0, 0x0, 0x7f, 0xff, 0x8, 0x40, 0x8, 0x40, 0xf, 0x40, 0x9, 0x46, 0x19, 0x5c, 0x11, 0x70, 0x3b, 0x40, 0x6e, 0x40, 0x6, 0x40, 0x4, 0x40, 0xc, 0x40, 0x18, 0x41, 0x30, 0x63, 0x60, 0x3e },
{ 0x8e, 0x81, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x10, 0x60, 0x10, 0x20, 0x10, 0x20, 0x10, 0x30, 0x10, 0x11, 0x1f, 0x1b, 0x70, 0xe },
{ 0x8e, 0x82, 0x4, 0x80, 0x45, 0x1f, 0x2b, 0xc4, 0x1a, 0x44, 0x12, 0x5f, 0x32, 0x55, 0x53, 0xd5, 0x12, 0x15, 0x12, 0x15, 0x33, 0xd5, 0x52, 0x55, 0x12, 0x55, 0x12, 0x55, 0x12, 0x57, 0x33, 0xc4, 0x60, 0x4 },
{ 0x8e, 0x83, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x90, 0x2, 0x90, 0x6, 0x9e, 0x4, 0x90, 0xc, 0x90, 0x18, 0x90, 0x3c, 0x90, 0x6a, 0x90, 0xa, 0x90, 0x8, 0x90, 0x8, 0x90, 0xb, 0xff, 0x8, 0x0 },
{ 0x8e, 0x84, 0x3, 0x10, 0xe, 0x10, 0x78, 0x10, 0x8, 0x30, 0x8, 0x20, 0x7f, 0x20, 0x8, 0x20, 0x8, 0x20, 0x1c, 0x60, 0x1a, 0x44, 0x29, 0x44, 0x28, 0x46, 0x48, 0xc2, 0x8, 0x9e, 0x8, 0xf3, 0xb, 0x81 },
{ 0x8e, 0x85, 0x0, 0x80, 0x1, 0x80, 0x3, 0x8, 0x6, 0x18, 0x18, 0x30, 0xc, 0x64, 0x6, 0xc6, 0x1, 0x82, 0x7f, 0xff, 0x0, 0x81, 0x0, 0x80, 0x8, 0x88, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80 },
{ 0x8e, 0x86, 0x8, 0x2, 0x18, 0xe, 0x30, 0xf8, 0x62, 0x88, 0x36, 0x88, 0xc, 0x88, 0x18, 0x88, 0x34, 0xff, 0x7e, 0x88, 0xa, 0x88, 0x8, 0x88, 0x2a, 0x8c, 0x2a, 0x84, 0x68, 0x85, 0x48, 0xe7, 0xb, 0x82 },
{ 0x8e, 0x87, 0x4, 0x20, 0x24, 0x26, 0x27, 0xbc, 0x24, 0x20, 0x24, 0x21, 0x27, 0xb3, 0x3c, 0x1e, 0x60, 0x80, 0x3, 0x8, 0xc, 0x30, 0x2, 0xc2, 0x7f, 0xff, 0x0, 0x81, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87 },
{ 0x8e, 0x88, 0x0, 0x10, 0x3c, 0x10, 0x24, 0x10, 0x25, 0xff, 0x24, 0x10, 0x3c, 0x10, 0x25, 0xfe, 0x24, 0x82, 0x24, 0xc6, 0x3c, 0x44, 0x24, 0x6c, 0x24, 0x38, 0x24, 0x38, 0x24, 0x6c, 0x64, 0xc6, 0x4d, 0x83 },
{ 0x8e, 0x89, 0x0, 0x40, 0x3e, 0x4e, 0x22, 0x78, 0x22, 0x40, 0x22, 0x41, 0x3e, 0x63, 0x22, 0x3e, 0x22, 0x0, 0x22, 0x0, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x7e, 0x22, 0x42, 0x62, 0x42, 0x46, 0x7e },
{ 0x8e, 0x8a, 0x0, 0x0, 0x3f, 0xfe, 0x2, 0x0, 0x2, 0x10, 0x6, 0x10, 0x4, 0xf8, 0x1f, 0x8c, 0x0, 0x0, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0x8b, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x2, 0xfe, 0x6, 0x82, 0x4, 0x82, 0xc, 0xfe, 0x18, 0x82, 0x3c, 0x82, 0x6a, 0xfe, 0xa, 0x48, 0x8, 0x48, 0x8, 0x49, 0x8, 0xc9, 0x9, 0x87 },
{ 0x8e, 0x8c, 0x0, 0x0, 0x3d, 0xfe, 0x0, 0x2, 0x7e, 0x2, 0x0, 0xf2, 0x3c, 0x2, 0x0, 0x2, 0x0, 0xf2, 0x3c, 0x92, 0x0, 0x92, 0x0, 0x92, 0x3c, 0xf2, 0x24, 0x2, 0x24, 0x2, 0x24, 0x2, 0x3c, 0xe },
{ 0x8e, 0x8d, 0x0, 0x10, 0x3e, 0x10, 0x0, 0xfe, 0x7f, 0x10, 0x0, 0x10, 0x3e, 0x10, 0x1, 0xff, 0x0, 0x4, 0x3e, 0x4, 0x1, 0xff, 0x0, 0x4, 0x3e, 0x44, 0x22, 0x64, 0x22, 0x24, 0x22, 0x4, 0x3e, 0x1c },
{ 0x8e, 0x8e, 0x0, 0xa, 0x3c, 0x9, 0x0, 0x9, 0x7e, 0x8, 0x1, 0xff, 0x3c, 0x8, 0x0, 0x8, 0x1, 0xf8, 0x3c, 0x48, 0x0, 0x48, 0x0, 0x48, 0x3c, 0x4c, 0x24, 0x74, 0x25, 0xc5, 0x24, 0x7, 0x3c, 0x2 },
{ 0x8e, 0x8f, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x7e, 0xff, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0xfe, 0x3c, 0x0, 0x0, 0x10, 0x0, 0x18, 0x3c, 0x2a, 0x24, 0xa3, 0x24, 0xa5, 0x25, 0xa4, 0x3d, 0x1c },
{ 0x8e, 0x90, 0x0, 0x10, 0x3d, 0x10, 0x1, 0xbf, 0x7e, 0xa9, 0x0, 0xa, 0x3c, 0x9c, 0x0, 0x94, 0x1, 0xb6, 0x3d, 0x63, 0x0, 0x0, 0x0, 0xfe, 0x3c, 0x82, 0x24, 0x82, 0x24, 0x82, 0x24, 0x82, 0x3c, 0xfe },
{ 0x8e, 0x91, 0x30, 0x80, 0x1d, 0xfe, 0x3, 0x22, 0x0, 0x74, 0xc, 0xd8, 0x3b, 0x8c, 0x60, 0x7, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x8e, 0x92, 0x0, 0x0, 0x3e, 0xfc, 0x22, 0x84, 0x22, 0x84, 0x3e, 0xfc, 0x22, 0x84, 0x22, 0x84, 0x22, 0xfc, 0x3e, 0x20, 0x22, 0x7f, 0x23, 0x95, 0x22, 0x25, 0x3e, 0xc9, 0x14, 0x13, 0x36, 0x62, 0x62, 0xe },
{ 0x8e, 0x93, 0xa, 0x24, 0xa, 0x6c, 0xa, 0x48, 0x2a, 0xff, 0x2a, 0x48, 0x2a, 0x48, 0x2e, 0xc8, 0x2b, 0x7e, 0x2a, 0x48, 0x2a, 0x48, 0x2a, 0x48, 0x2a, 0x7e, 0x2a, 0x48, 0x2e, 0x48, 0x3a, 0xc8, 0x61, 0x7f },
{ 0x8e, 0x94, 0x8, 0x0, 0x1d, 0xfe, 0x16, 0x2, 0x32, 0x2, 0x28, 0xf2, 0x7e, 0x2, 0x22, 0x2, 0x3e, 0xf2, 0x22, 0x92, 0x3e, 0x92, 0x20, 0x92, 0x24, 0xf2, 0x24, 0x2, 0x2e, 0x2, 0x3a, 0x2, 0x60, 0xe },
{ 0x8e, 0x95, 0x0, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xff, 0x10, 0x4, 0x14, 0x94, 0x12, 0xa4, 0x17, 0xf4, 0x10, 0x84, 0x11, 0xc4, 0x12, 0xa4, 0x14, 0x94, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8e, 0x96, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8e, 0x97, 0x8, 0x4, 0xa, 0x4, 0x1a, 0x4, 0x12, 0x4, 0x32, 0xc4, 0x32, 0x64, 0x52, 0x24, 0x12, 0x4, 0x12, 0x4, 0x12, 0xc, 0x12, 0x8, 0x12, 0x8, 0x12, 0xdc, 0x13, 0x96, 0x1e, 0x33, 0x10, 0x61 },
{ 0x8e, 0x98, 0x4, 0x20, 0x4, 0x20, 0xd, 0xfe, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x33, 0xff, 0x50, 0x4, 0x10, 0x4, 0x13, 0xff, 0x10, 0x4, 0x10, 0xc4, 0x10, 0x64, 0x10, 0x24, 0x10, 0x4, 0x10, 0x1c },
{ 0x8e, 0x99, 0x0, 0x0, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x12, 0x4, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x12, 0x4, 0x13, 0xfc, 0x10, 0x0, 0x4, 0x40, 0x4, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x8e, 0x9a, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0xf, 0xf8, 0x0, 0x30, 0x0, 0x60, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8e, 0x9b, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x10, 0x0, 0x10, 0x3f, 0xfe, 0x0, 0x10, 0xc, 0x10, 0x6, 0x10, 0x2, 0x10, 0x0, 0x10, 0x0, 0x70 },
{ 0x8e, 0x9c, 0x8, 0x8, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x20, 0x11, 0x44, 0xa, 0x28, 0x4, 0x10, 0xa, 0x24, 0x3d, 0x7e, 0x0, 0x2, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8e, 0x9d, 0x10, 0x10, 0x10, 0x10, 0x11, 0xfe, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x13, 0xff, 0x10, 0x4, 0x1c, 0x4, 0x73, 0xff, 0x10, 0x4, 0x11, 0x84, 0x10, 0xc4, 0x10, 0x44, 0x10, 0x4, 0x70, 0x1c },
{ 0x8e, 0x9e, 0x0, 0x20, 0x0, 0x20, 0x79, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x7b, 0xff, 0x48, 0x4, 0x48, 0x4, 0x4b, 0xff, 0x48, 0x4, 0x78, 0xc4, 0x0, 0x64, 0x0, 0x24, 0x0, 0x4, 0x0, 0x1c },
{ 0x8e, 0x9f, 0x1, 0x0, 0x1, 0x0, 0x31, 0x0, 0x19, 0xfe, 0xb, 0x2, 0x2, 0x46, 0x6, 0x44, 0x0, 0x40, 0x8, 0x40, 0x8, 0xe0, 0x18, 0xa0, 0x11, 0xb0, 0x31, 0x10, 0x23, 0x18, 0x66, 0xc, 0xc, 0x7 },
{ 0x8e, 0xa0, 0x0, 0x84, 0x30, 0xcc, 0x18, 0x48, 0xb, 0xff, 0x0, 0x84, 0x60, 0x84, 0x31, 0x8, 0x11, 0x8, 0x2, 0x52, 0x9, 0x4a, 0x8, 0x84, 0x18, 0x84, 0x11, 0x4a, 0x31, 0x4a, 0x23, 0xdf, 0x62, 0x51 },
{ 0x8e, 0xa1, 0x0, 0x20, 0x30, 0x20, 0x18, 0x60, 0x8, 0x44, 0x0, 0xc4, 0x60, 0x9e, 0x33, 0xf3, 0x10, 0x0, 0x0, 0x0, 0x8, 0x0, 0x9, 0xfe, 0x19, 0x2, 0x11, 0x2, 0x31, 0x2, 0x21, 0x2, 0x61, 0xfe },
{ 0x8e, 0xa2, 0x0, 0x0, 0x7f, 0xff, 0x8, 0x88, 0x10, 0x84, 0x3f, 0xfe, 0x60, 0x83, 0x2a, 0xaa, 0x24, 0x92, 0x2a, 0xaa, 0x20, 0x82, 0x2a, 0xaa, 0x24, 0x92, 0x2a, 0xaa, 0x20, 0x82, 0x20, 0x82, 0x20, 0x8e },
{ 0x8e, 0xa3, 0x7f, 0xff, 0x10, 0x84, 0x3f, 0xfe, 0x6a, 0xab, 0x24, 0x92, 0x2a, 0xaa, 0x20, 0x82, 0x2a, 0xaa, 0x24, 0x92, 0x2a, 0xaa, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x90, 0x7f, 0xff },
{ 0x8e, 0xa4, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x20, 0x51, 0xfc, 0x30, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x8, 0x30, 0x8, 0x57, 0xff, 0x11, 0x8, 0x31, 0x88, 0x20, 0x88, 0x60, 0x8, 0x0, 0x38 },
{ 0x8e, 0xa5, 0x0, 0x84, 0x0, 0xcc, 0x7c, 0x48, 0x13, 0xff, 0x10, 0x84, 0x10, 0x84, 0x11, 0x8, 0x39, 0x8, 0x2a, 0x52, 0x69, 0x4a, 0x28, 0x84, 0x28, 0x84, 0x29, 0x4a, 0x29, 0x4a, 0x3b, 0xdf, 0x2, 0x51 },
{ 0x8e, 0xa6, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x8, 0x88, 0x8, 0x88, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80, 0x3, 0x80 },
{ 0x8e, 0xa7, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x1, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2e },
{ 0x8e, 0xa8, 0x0, 0x0, 0x7f, 0xff, 0x8, 0x10, 0x8, 0x10, 0xf, 0xf0, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0xf, 0xf0, 0x8, 0x10, 0x8, 0x10, 0x8, 0x1f, 0xf, 0xf0, 0x78, 0x10, 0x0, 0x10, 0x0, 0x10 },
{ 0x8e, 0xa9, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8e, 0xaa, 0x4, 0x20, 0x4, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x0, 0x10, 0x3e, 0xfe, 0x22, 0x10, 0x22, 0x10, 0x3f, 0xff, 0x22, 0x4, 0x23, 0xff, 0x22, 0x44, 0x22, 0x64, 0x3e, 0x24, 0x0, 0x4, 0x0, 0x1c },
{ 0x8e, 0xab, 0x6, 0x10, 0x1c, 0x10, 0x71, 0xff, 0x10, 0x82, 0x10, 0xc6, 0x10, 0x44, 0x7c, 0x44, 0x11, 0xff, 0x10, 0x10, 0x10, 0x10, 0x7d, 0xff, 0x44, 0x10, 0x44, 0x10, 0x44, 0x10, 0x44, 0x10, 0x7c, 0x10 },
{ 0x8e, 0xac, 0x0, 0x20, 0x18, 0x20, 0xc, 0x20, 0x4, 0x7f, 0x0, 0x41, 0x60, 0xc1, 0x31, 0x83, 0x13, 0x62, 0x0, 0x36, 0x8, 0x14, 0x8, 0xc, 0x18, 0x18, 0x10, 0x30, 0x30, 0x60, 0x21, 0xc0, 0x67, 0x0 },
{ 0x8e, 0xad, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x11, 0x20, 0x11, 0x20, 0x1f, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x1f, 0xfe, 0x10, 0x0, 0x14, 0x26, 0x17, 0xbc, 0x34, 0x20, 0x24, 0x21, 0x67, 0xb3, 0x1c, 0x1e },
{ 0x8e, 0xae, 0x0, 0x24, 0x0, 0x26, 0x0, 0x22, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x20, 0x0, 0x20, 0x3f, 0xa0, 0x4, 0x30, 0x4, 0x10, 0x4, 0x10, 0x4, 0x18, 0x5, 0xc8, 0x1f, 0xd, 0x70, 0x7, 0x0, 0x2 },
{ 0x8e, 0xaf, 0x0, 0x88, 0x38, 0x8a, 0x3, 0xeb, 0x7c, 0x9, 0x2, 0x28, 0x39, 0x48, 0x7, 0xff, 0x0, 0x8, 0x3b, 0xe9, 0x2, 0x29, 0x2, 0x2a, 0x3b, 0xee, 0x2a, 0x24, 0x2a, 0x25, 0x2b, 0xeb, 0x38, 0x12 },
{ 0x8e, 0xb0, 0x0, 0x20, 0x0, 0x40, 0x7d, 0xfc, 0x55, 0x4, 0x55, 0xfc, 0x55, 0x4, 0x7d, 0xfc, 0x55, 0x0, 0x55, 0xff, 0x55, 0x0, 0x55, 0xfe, 0x7c, 0x2, 0x2, 0xaa, 0x6, 0xaa, 0x4, 0x6, 0x0, 0x1c },
{ 0x8e, 0xb1, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x14, 0x50, 0x36, 0xd8, 0x62, 0x8, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0xb2, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x88, 0x8, 0x8, 0x3f, 0x7f, 0x29, 0x49, 0x29, 0x49, 0x3f, 0x49, 0x29, 0x49, 0x29, 0x7f, 0x3f, 0x49, 0x8, 0x49, 0x7f, 0xc9, 0x8, 0x49, 0x8, 0x7f, 0x8, 0x0 },
{ 0x8e, 0xb3, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x20, 0x82, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6, 0x60, 0x3 },
{ 0x8e, 0xb4, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x40, 0x81, 0x1e, 0xbc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0xf0, 0x0, 0x9c, 0x0, 0x86, 0x0, 0x80, 0x0, 0x80 },
{ 0x8e, 0xb5, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x7, 0x4, 0x7c, 0x7, 0xc0, 0x7c, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x2, 0x4, 0x2, 0x4, 0x6, 0x6, 0x4, 0x3, 0xfc, 0x0, 0x0 },
{ 0x8e, 0xb6, 0x0, 0x80, 0x0, 0x80, 0x7c, 0x80, 0x44, 0x82, 0x44, 0x86, 0x44, 0x8c, 0x44, 0xb8, 0x44, 0xe0, 0x47, 0x80, 0x44, 0x80, 0x44, 0x80, 0x44, 0x80, 0x7c, 0x80, 0x0, 0x81, 0x0, 0xc3, 0x0, 0x7e },
{ 0x8e, 0xb7, 0x8, 0x20, 0x8, 0x20, 0x3e, 0x20, 0x8, 0x20, 0x8, 0xfc, 0x7f, 0x24, 0x22, 0x24, 0x14, 0xa4, 0x7f, 0x64, 0x8, 0x24, 0x8, 0x34, 0x3e, 0x54, 0x8, 0x54, 0x8, 0xc5, 0x9, 0x85, 0xb, 0x3 },
{ 0x8e, 0xb8, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x30, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x8e, 0xb9, 0x10, 0x10, 0x10, 0x10, 0x10, 0xff, 0x12, 0x80, 0x7d, 0xa0, 0x24, 0xbe, 0x24, 0xc8, 0x24, 0x88, 0x6d, 0x88, 0x4a, 0xff, 0x48, 0x88, 0x78, 0x9c, 0x15, 0x94, 0x11, 0x36, 0x33, 0x22, 0x60, 0x63 },
{ 0x8e, 0xba, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x1f, 0xfc, 0x2, 0x0, 0x4, 0x10, 0xf, 0xf8, 0x0, 0x88, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0xbb, 0x0, 0xe, 0x0, 0xf8, 0x3f, 0x80, 0x8, 0x88, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x0, 0x5, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8e, 0xbc, 0x0, 0x0, 0x23, 0xfc, 0x32, 0x4, 0x12, 0x4, 0x3, 0xfc, 0x42, 0x4, 0x62, 0x4, 0x23, 0xfc, 0x0, 0x0, 0x10, 0x90, 0x14, 0x92, 0x16, 0x96, 0x32, 0x94, 0x20, 0x90, 0x6f, 0xff, 0x40, 0x0 },
{ 0x8e, 0xbd, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x10, 0xa8, 0x1, 0xac, 0x47, 0x27, 0x60, 0x70, 0x21, 0xdc, 0x7, 0x7, 0x10, 0x20, 0x11, 0x24, 0x10, 0xa8, 0x30, 0x70, 0x21, 0xac, 0x27, 0x27, 0x60, 0x60 },
{ 0x8e, 0xbe, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x52, 0x0, 0x32, 0x0, 0x17, 0xfe, 0x14, 0x40, 0x1c, 0x40, 0x30, 0x40, 0x5f, 0xff, 0x10, 0xa0, 0x11, 0xb0, 0x31, 0x10, 0x23, 0x18, 0x66, 0xc, 0x1c, 0x7 },
{ 0x8e, 0xbf, 0x1, 0x86, 0x1f, 0x7c, 0x10, 0x40, 0x1f, 0x7f, 0x14, 0x48, 0x34, 0x88, 0x60, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x8e, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x8e, 0xc1, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x0, 0x7f, 0xbf, 0x21, 0x21, 0x33, 0x22, 0x12, 0x24, 0x7f, 0xa2, 0x0, 0x21, 0x3f, 0x21, 0x21, 0x21, 0x21, 0x27, 0x21, 0x20, 0x3f, 0x20 },
{ 0x8e, 0xc2, 0x10, 0x20, 0x3f, 0x3f, 0x24, 0x50, 0x42, 0x88, 0x8, 0x40, 0x8, 0xff, 0x15, 0x84, 0x14, 0x48, 0x34, 0x30, 0x55, 0xcf, 0x14, 0x10, 0x15, 0xff, 0x14, 0x54, 0x14, 0xd6, 0x11, 0x93, 0x10, 0x10 },
{ 0x8e, 0xc3, 0x8, 0x0, 0xb, 0xfe, 0x1a, 0x22, 0x12, 0x22, 0x33, 0xfe, 0x32, 0x22, 0x52, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x0, 0x10, 0xa0, 0x12, 0xb2, 0x12, 0x93, 0x16, 0x85, 0x14, 0x8c, 0x10, 0x78 },
{ 0x8e, 0xc4, 0x4, 0x20, 0x24, 0x23, 0x27, 0xbe, 0x24, 0x20, 0x24, 0x21, 0x27, 0xb3, 0x3c, 0x1e, 0x60, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8e, 0xc5, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x9, 0xc0, 0xb, 0x0, 0x1e, 0x0, 0x37, 0xc0, 0x60, 0x7f },
{ 0x8e, 0xc6, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x14, 0x44, 0x12, 0x48, 0x1f, 0xff, 0x11, 0x50, 0x16, 0x4e, 0x11, 0x0, 0x3f, 0xff, 0x22, 0x10, 0x67, 0xe0, 0x0, 0x98, 0x1f, 0x6 },
{ 0x8e, 0xc7, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x2, 0x40, 0x12, 0x44, 0x12, 0x12, 0x21, 0xf2, 0x0, 0x0, 0x10, 0x10, 0xa, 0xa, 0x51, 0x51, 0x50, 0x50, 0x51, 0x51, 0xf, 0xf },
{ 0x8e, 0xc8, 0x8, 0x10, 0x18, 0x10, 0x11, 0xff, 0x64, 0x0, 0x2c, 0x7c, 0x18, 0x44, 0x10, 0x7c, 0x24, 0x0, 0x7d, 0xff, 0x15, 0x1, 0x11, 0x7d, 0x55, 0x45, 0x55, 0x45, 0x51, 0x7d, 0x11, 0x1, 0x11, 0x3 },
{ 0x8e, 0xc9, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x9c, 0x70, 0x87, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x8e, 0xca, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x24, 0x2, 0x27, 0xf2, 0x4, 0x0, 0x4, 0x0, 0x7, 0xe0, 0x0, 0x20, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x20, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x3, 0xc0 },
{ 0x8e, 0xcb, 0x2, 0x4, 0x4, 0x4, 0x1f, 0x4, 0x11, 0x4, 0x11, 0x7f, 0x1f, 0x4, 0x11, 0x4, 0x11, 0x24, 0x1f, 0x34, 0x11, 0x14, 0x11, 0x84, 0x7f, 0x4, 0x5, 0x4, 0x19, 0x4, 0x61, 0x4, 0x7, 0x1c },
{ 0x8e, 0xcc, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x79, 0x8c, 0x17, 0x27, 0x10, 0x20, 0x11, 0xfc, 0x10, 0x20, 0x18, 0x20, 0x77, 0xff, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x31, 0xfc },
{ 0x8e, 0xcd, 0x8, 0x20, 0x8, 0x20, 0x3f, 0x20, 0x8, 0x7f, 0x8, 0x44, 0x8, 0xc4, 0x7f, 0xa4, 0x12, 0x2c, 0x12, 0x28, 0x33, 0x38, 0x52, 0x90, 0x12, 0x10, 0x12, 0x38, 0x32, 0x2c, 0x22, 0x66, 0x66, 0xc3 },
{ 0x8e, 0xce, 0x8, 0x4, 0x1c, 0x44, 0x16, 0x64, 0x33, 0x24, 0x21, 0x4, 0x7e, 0x44, 0x48, 0x64, 0x8, 0x24, 0x7f, 0x84, 0x8, 0x7, 0x2a, 0x3c, 0x2a, 0xe4, 0x6b, 0x4, 0x49, 0x4, 0x8, 0x4, 0x38, 0x4 },
{ 0x8e, 0xcf, 0x0, 0x82, 0x0, 0x86, 0x1f, 0xfc, 0x0, 0x98, 0x0, 0xb0, 0x7f, 0xff, 0x1, 0x80, 0xf, 0xf8, 0x78, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8e, 0xd0, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x2, 0x10, 0x6, 0xfe, 0x4, 0x10, 0xc, 0x10, 0x18, 0x10, 0x3e, 0x10, 0x6b, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x0 },
{ 0x8e, 0xd1, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10, 0x62, 0x54, 0x36, 0x56, 0xc, 0xd3, 0x19, 0x90, 0x32, 0x12, 0x7e, 0x12, 0xa, 0x76, 0x8, 0x4, 0x2a, 0xc, 0x2a, 0x18, 0x6a, 0x30, 0x48, 0x60, 0x9, 0xc0 },
{ 0x8e, 0xd2, 0x1, 0x8, 0x1, 0x8, 0x1f, 0xf0, 0x1, 0x10, 0x1, 0x20, 0x1, 0x40, 0x7f, 0xff, 0x1, 0x0, 0x2, 0x0, 0x7, 0xf8, 0x1c, 0x8, 0x64, 0x8, 0x7, 0xf8, 0x4, 0x8, 0x4, 0x8, 0x7, 0xf8 },
{ 0x8e, 0xd3, 0x0, 0x42, 0x38, 0x82, 0x1, 0xe2, 0x7d, 0x22, 0x1, 0x3f, 0x39, 0xe2, 0x1, 0x22, 0x1, 0x32, 0x39, 0xea, 0x1, 0x2a, 0x1, 0x22, 0x3b, 0xe2, 0x28, 0xa2, 0x29, 0x22, 0x2a, 0x22, 0x38, 0x66 },
{ 0x8e, 0xd4, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8e, 0xd5, 0x0, 0x10, 0x30, 0x10, 0x1b, 0xff, 0xa, 0x0, 0x2, 0x44, 0x3, 0xff, 0x2, 0x44, 0x7a, 0x44, 0xa, 0x7c, 0xa, 0x0, 0xa, 0x0, 0xc, 0xaa, 0x9, 0xab, 0x19, 0x29, 0x34, 0x0, 0x63, 0xff },
{ 0x8e, 0xd6, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7e, 0xff, 0x52, 0x81, 0x52, 0x81, 0x52, 0x20, 0x52, 0x22, 0x52, 0x2e, 0x7e, 0x38, 0x10, 0x20, 0x12, 0x20, 0x12, 0x20, 0x1f, 0x21, 0x71, 0x33, 0x0, 0x1e },
{ 0x8e, 0xd7, 0x0, 0x0, 0x7f, 0xbf, 0x12, 0x21, 0x12, 0x23, 0x12, 0x22, 0x12, 0x26, 0x12, 0x24, 0x7f, 0xa2, 0xa, 0x21, 0xa, 0x21, 0x1a, 0x21, 0x12, 0x21, 0x32, 0x2f, 0x22, 0x20, 0x62, 0x20, 0xe, 0x20 },
{ 0x8e, 0xd8, 0x4, 0x88, 0x4, 0x88, 0xc, 0x88, 0xb, 0xfe, 0x18, 0x88, 0x10, 0x88, 0x30, 0x88, 0x57, 0xff, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc },
{ 0x8e, 0xd9, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x8, 0x2, 0x18, 0x2, 0x30, 0x2, 0x67, 0x2, 0x1, 0x82, 0x0, 0xc2, 0x0, 0x42, 0x0, 0x2, 0x0, 0x2, 0x0, 0x6, 0x0, 0xc, 0x0, 0x78 },
{ 0x8e, 0xda, 0x0, 0x0, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc, 0x8, 0x80, 0x8, 0xc0, 0x8, 0x40, 0x8, 0x60, 0x8, 0x20, 0x18, 0x30, 0x10, 0x18, 0x30, 0xc, 0x60, 0x7 },
{ 0x8e, 0xdb, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7e, 0x7e, 0x8, 0xc2, 0x8, 0x82, 0x19, 0x82, 0x1c, 0x62, 0x1a, 0x32, 0x2a, 0x12, 0x28, 0x2, 0x48, 0x2, 0x8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x8, 0x1c },
{ 0x8e, 0xdc, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0xa, 0x7e, 0x2a, 0xc2, 0x2a, 0x82, 0x29, 0x82, 0x68, 0x62, 0x48, 0x32, 0x8, 0x12, 0x1c, 0x2, 0x14, 0x2, 0x16, 0x2, 0x32, 0x6, 0x20, 0x4, 0x60, 0x1c },
{ 0x8e, 0xdd, 0x0, 0x1c, 0x3f, 0xf0, 0x11, 0x4, 0x8, 0x88, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x3f, 0x4, 0x21, 0x7f, 0x3f, 0x4, 0x21, 0x64, 0x3f, 0x34, 0x22, 0x4, 0x3f, 0x4, 0x61, 0x1c },
{ 0x8e, 0xde, 0x0, 0x20, 0x7f, 0x20, 0x14, 0x20, 0x14, 0x3e, 0x7f, 0x62, 0x55, 0x42, 0x55, 0xc2, 0x55, 0x32, 0x57, 0x1a, 0x61, 0xa, 0x41, 0x2, 0x41, 0x2, 0x7f, 0x2, 0x41, 0x6, 0x41, 0x4, 0x7f, 0x1c },
{ 0x8e, 0xdf, 0x6, 0x0, 0x1c, 0xfe, 0x68, 0x82, 0x8, 0x82, 0x4a, 0x82, 0x2c, 0x82, 0x8, 0xfe, 0x7e, 0x90, 0x8, 0x90, 0x18, 0x90, 0x1c, 0x98, 0x2a, 0x88, 0x28, 0x8c, 0x49, 0x84, 0x9, 0x6, 0xb, 0x3 },
{ 0x8e, 0xe0, 0x8, 0x0, 0x1c, 0xfe, 0x16, 0x82, 0x32, 0x82, 0x20, 0xfe, 0x7e, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x7f, 0x20, 0x8, 0x7f, 0x4a, 0x95, 0x6a, 0x25, 0x28, 0xc9, 0xe, 0x13, 0x38, 0x62, 0x60, 0xe },
{ 0x8e, 0xe1, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x14, 0x4, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x8e, 0xe2, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x28, 0x2, 0xf, 0x0, 0x8, 0xfe, 0x8, 0x42, 0x7f, 0x46, 0x8, 0x64, 0x2a, 0x2c, 0x2a, 0x38, 0x6b, 0x10, 0x49, 0x38, 0x8, 0x6c, 0x38, 0xc7 },
{ 0x8e, 0xe3, 0x0, 0x0, 0x3f, 0x7e, 0x1, 0x2, 0x1, 0x2, 0x3f, 0x7e, 0x20, 0x40, 0x20, 0x40, 0x3f, 0x7e, 0x1, 0x2, 0x31, 0x62, 0x19, 0x32, 0x3, 0x6, 0xd, 0x1a, 0x33, 0x66, 0x2, 0x4, 0xe, 0x1c },
{ 0x8e, 0xe4, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0xf, 0xfc, 0x78, 0x4, 0x8, 0x4, 0xf, 0xfc, 0x0, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8e, 0xe5, 0x3, 0x0, 0x1, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8e, 0xe6, 0x0, 0x0, 0x7f, 0x80, 0x11, 0x7e, 0x11, 0x22, 0x11, 0x22, 0x1f, 0x22, 0x11, 0x36, 0x11, 0x14, 0x11, 0x14, 0x1f, 0x1c, 0x11, 0x8, 0x11, 0x1c, 0x11, 0x14, 0x1f, 0x36, 0x71, 0x22, 0x1, 0x63 },
{ 0x8e, 0xe7, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x0, 0x20, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x20, 0xc, 0x20, 0x6, 0x20, 0x2, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0xe0 },
{ 0x8e, 0xe8, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8e, 0xe9, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x30, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80 },
{ 0x8e, 0xea, 0x0, 0x10, 0x7e, 0x50, 0x10, 0x50, 0x10, 0x7e, 0x1e, 0xd0, 0x12, 0x90, 0x12, 0x10, 0x3a, 0xff, 0x2e, 0x54, 0x64, 0x54, 0x4, 0x54, 0xc, 0xd6, 0x8, 0x92, 0x19, 0x93, 0x30, 0x10, 0x0, 0x10 },
{ 0x8e, 0xeb, 0x4, 0x20, 0x44, 0x20, 0x2b, 0xff, 0x12, 0x1, 0x12, 0x1, 0x28, 0x8, 0x48, 0x8, 0xb, 0xff, 0x18, 0x8, 0x19, 0x88, 0x28, 0xc8, 0x48, 0x48, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x70, 0x38 },
{ 0x8e, 0xec, 0x0, 0x20, 0x1, 0x20, 0x7d, 0x20, 0x13, 0xfe, 0x12, 0x20, 0x16, 0x20, 0x78, 0x20, 0x17, 0xff, 0x10, 0xa8, 0x10, 0xa8, 0x11, 0xac, 0x1d, 0x24, 0x73, 0x26, 0x6, 0x23, 0x0, 0x20, 0x0, 0x20 },
{ 0x8e, 0xed, 0x2, 0xc, 0xe, 0x38, 0x78, 0xf0, 0x8, 0x10, 0x9, 0xff, 0x7e, 0x10, 0x8, 0xfe, 0x8, 0x92, 0x1c, 0xfe, 0x1a, 0x92, 0x28, 0xfe, 0x28, 0x10, 0x48, 0xfe, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff },
{ 0x8e, 0xee, 0x0, 0xc, 0x3c, 0x38, 0x24, 0xf0, 0x24, 0x10, 0x25, 0xff, 0x3c, 0x10, 0x24, 0xfe, 0x24, 0x92, 0x24, 0xfe, 0x3c, 0x92, 0x24, 0xfe, 0x24, 0x10, 0x24, 0xfe, 0x24, 0x10, 0x64, 0x10, 0x4d, 0xff },
{ 0x8e, 0xef, 0x8, 0x0, 0x9, 0xff, 0x3e, 0xa0, 0x8, 0xae, 0x8, 0xe2, 0x7e, 0xaa, 0x8, 0xaa, 0x8, 0xee, 0x28, 0xa4, 0x2e, 0xa6, 0x28, 0xea, 0x29, 0xb3, 0x28, 0x21, 0x38, 0x20, 0x6e, 0x0, 0x43, 0xff },
{ 0x8e, 0xf0, 0x0, 0x0, 0x37, 0xff, 0x18, 0x50, 0x8, 0x50, 0x3, 0xfe, 0x62, 0x52, 0x32, 0x52, 0x12, 0x52, 0x2, 0x52, 0xa, 0x9e, 0xb, 0x2, 0x1a, 0x2, 0x13, 0xfe, 0x32, 0x2, 0x22, 0x2, 0x63, 0xfe },
{ 0x8e, 0xf1, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8e, 0xf2, 0x8, 0x0, 0xb, 0xfe, 0x18, 0x20, 0x17, 0xff, 0x14, 0x21, 0x35, 0xad, 0x34, 0x21, 0x51, 0xac, 0x10, 0x0, 0x17, 0xff, 0x10, 0x20, 0x17, 0xff, 0x14, 0x91, 0x14, 0x91, 0x14, 0x91, 0x14, 0x93 },
{ 0x8e, 0xf3, 0x0, 0xc, 0x0, 0x78, 0x3f, 0xc4, 0x11, 0xc, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x40, 0x1, 0x1f, 0xf8, 0x4, 0x18, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x8e, 0xf4, 0x0, 0x0, 0x1, 0xfe, 0x79, 0x2, 0x49, 0x2, 0x49, 0x2, 0x49, 0x2, 0x49, 0x2, 0x49, 0xfe, 0x48, 0x48, 0x48, 0x48, 0x78, 0x48, 0x0, 0xc8, 0x0, 0x88, 0x1, 0x89, 0x3, 0x9, 0xe, 0x7 },
{ 0x8e, 0xf5, 0x1, 0x0, 0x1, 0x0, 0x3f, 0xfe, 0x1, 0x0, 0x1f, 0xfc, 0x1, 0x0, 0x3f, 0xfe, 0x2, 0x0, 0x2, 0x8, 0x7f, 0xff, 0x4, 0x8, 0xd, 0x88, 0x18, 0xc8, 0x30, 0x48, 0x60, 0x8, 0x0, 0x38 },
{ 0x8e, 0xf6, 0x10, 0x6, 0x10, 0x3c, 0x13, 0xe2, 0x11, 0x22, 0x7c, 0x94, 0x13, 0xff, 0x12, 0x1, 0x12, 0x1, 0x11, 0xfc, 0x1c, 0x84, 0x70, 0xcc, 0x10, 0x58, 0x10, 0x70, 0x10, 0xd8, 0x11, 0x8c, 0x37, 0x7 },
{ 0x8e, 0xf7, 0x10, 0x82, 0x10, 0x82, 0x17, 0xf2, 0x78, 0x82, 0x13, 0xef, 0x10, 0x2, 0x3b, 0xe2, 0x36, 0x2a, 0x32, 0x2a, 0x53, 0xea, 0x50, 0x2, 0x12, 0x22, 0x11, 0x42, 0x10, 0x72, 0x17, 0x82, 0x10, 0x6 },
{ 0x8e, 0xf8, 0x8, 0x6, 0x18, 0x1c, 0x11, 0xf1, 0x64, 0x92, 0x2c, 0x4a, 0x19, 0xff, 0x11, 0x1, 0x25, 0x1, 0x7c, 0xfe, 0x14, 0x42, 0x10, 0x66, 0x54, 0x2c, 0x54, 0x38, 0x54, 0x6c, 0x10, 0xc6, 0x11, 0x83 },
{ 0x8e, 0xf9, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0xe, 0xb8, 0x0, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2e },
{ 0x8e, 0xfa, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x21, 0xc2, 0x21, 0x42, 0x21, 0x42, 0x23, 0x62, 0x22, 0x22, 0x26, 0x32, 0x2c, 0x1a, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8e, 0xfb, 0x4, 0x0, 0x4, 0x0, 0x25, 0xfe, 0x24, 0x42, 0x24, 0x42, 0x24, 0x46, 0x24, 0x64, 0x24, 0x2c, 0x24, 0x28, 0x24, 0x38, 0x24, 0x10, 0x3c, 0x38, 0x64, 0x28, 0x4, 0x6c, 0x4, 0xc6, 0x5, 0x83 },
{ 0x8e, 0xfc, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x82, 0x13, 0xf2, 0x10, 0x82, 0x10, 0x82, 0x17, 0xfa, 0x10, 0x2, 0x13, 0xf2, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x33, 0xf2, 0x20, 0x2, 0x60, 0xe },
{ 0x8f, 0x40, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x27, 0xf2, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x8, 0x88, 0x8, 0x88, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x3, 0x80 },
{ 0x8f, 0x41, 0x4, 0xa, 0x4, 0xb, 0x4, 0x9, 0x7f, 0xc8, 0x0, 0x3f, 0x3f, 0x88, 0x20, 0x88, 0x20, 0x88, 0x3f, 0x88, 0x4, 0x1c, 0x15, 0x14, 0x15, 0x94, 0x34, 0xb4, 0x64, 0x25, 0x4, 0x65, 0x1c, 0xc3 },
{ 0x8f, 0x42, 0x8, 0x2, 0x8, 0x42, 0x8, 0x42, 0x8, 0x42, 0x8, 0x42, 0x2a, 0x52, 0x2b, 0x5a, 0x29, 0x4a, 0x69, 0x4a, 0x48, 0x42, 0x8, 0x42, 0x8, 0x42, 0x18, 0x42, 0x10, 0x42, 0x30, 0x2, 0x60, 0x2 },
{ 0x8f, 0x43, 0x8, 0x80, 0x8, 0x80, 0x19, 0xff, 0x11, 0x4, 0x32, 0x8c, 0x34, 0xd8, 0x54, 0x70, 0x14, 0xdc, 0x17, 0x87, 0x14, 0x60, 0x15, 0xcc, 0x14, 0x38, 0x15, 0xe3, 0x14, 0xe, 0x10, 0x78, 0x13, 0xc0 },
{ 0x8f, 0x44, 0x2, 0x10, 0xe, 0x10, 0x78, 0x51, 0x8, 0xd3, 0x7e, 0x92, 0x8, 0x38, 0x1c, 0x28, 0x1a, 0x6c, 0x28, 0xc6, 0x49, 0x83, 0x8, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x8f, 0x45, 0x10, 0x20, 0x10, 0x70, 0x10, 0x50, 0x10, 0xd8, 0x7d, 0x8c, 0x13, 0x6, 0x16, 0xfb, 0x10, 0x0, 0x1c, 0x0, 0x71, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x31, 0xfc },
{ 0x8f, 0x46, 0x21, 0x2, 0x31, 0x22, 0x11, 0x22, 0x1, 0x22, 0x1, 0x22, 0x45, 0xb2, 0x65, 0x6a, 0x2d, 0x6a, 0x9, 0x22, 0x1, 0x22, 0x11, 0x22, 0x11, 0x22, 0x33, 0x22, 0x22, 0x22, 0x26, 0x2, 0x6c, 0x2 },
{ 0x8f, 0x47, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x7, 0xf, 0xe0, 0x2, 0x20, 0x2, 0x3c, 0x6, 0x4, 0x4, 0x4, 0xc, 0xc, 0x38, 0x38 },
{ 0x8f, 0x48, 0x6, 0x20, 0x1c, 0x20, 0x70, 0x22, 0x11, 0x22, 0x11, 0x26, 0x7d, 0x24, 0x13, 0x2c, 0x12, 0x20, 0x38, 0x70, 0x34, 0x50, 0x50, 0x50, 0x50, 0xd8, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6, 0x16, 0x3 },
{ 0x8f, 0x49, 0x8, 0x40, 0x18, 0x40, 0x10, 0xfc, 0x60, 0x84, 0x29, 0x8c, 0x1b, 0x58, 0x10, 0x30, 0x24, 0x78, 0x7c, 0xcc, 0x13, 0x87, 0x10, 0x70, 0x54, 0x18, 0x54, 0x0, 0x54, 0xe0, 0x10, 0x38, 0x10, 0xc },
{ 0x8f, 0x4a, 0x8, 0x10, 0x18, 0xfe, 0x10, 0x12, 0x65, 0xff, 0x2c, 0x12, 0x18, 0xfe, 0x10, 0x10, 0x25, 0x55, 0x7d, 0x55, 0x15, 0x11, 0x11, 0x7d, 0x55, 0x11, 0x55, 0x39, 0x55, 0x55, 0x11, 0x11, 0x12, 0x11 },
{ 0x8f, 0x4b, 0x0, 0x0, 0x7e, 0xfe, 0x22, 0x42, 0x32, 0x62, 0x12, 0x26, 0x6, 0x1a, 0x1a, 0x62, 0x61, 0x2, 0x2, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8f, 0x4c, 0x0, 0x40, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x8f, 0x4d, 0x0, 0x40, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x9, 0x88, 0x8, 0xc8, 0x8, 0x48, 0x8, 0x8, 0x7f, 0xff, 0x8, 0x8, 0x8, 0x88, 0x8, 0x88, 0x18, 0x88, 0x10, 0x88, 0x30, 0x8, 0x60, 0x38 },
{ 0x8f, 0x4e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x50, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x50, 0x2, 0x50, 0x6, 0x64, 0xc, 0x7d, 0x18, 0x43, 0x70, 0x7e },
{ 0x8f, 0x4f, 0x0, 0x40, 0x0, 0x80, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x7f, 0xff, 0x0, 0x20, 0x8, 0x62, 0x18, 0xc6, 0x37, 0xac, 0x60, 0xb0, 0x8, 0x90, 0x18, 0x98, 0x30, 0x8c, 0x60, 0x87, 0x0, 0x80 },
{ 0x8f, 0x50, 0x4, 0x20, 0x3f, 0xbf, 0x11, 0x20, 0x7f, 0xbe, 0x11, 0x2, 0x1f, 0x3e, 0x11, 0x20, 0x1f, 0x3e, 0x11, 0x21, 0x13, 0x1f, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x42, 0x7c, 0x24, 0x7, 0xd8, 0x1c, 0x7 },
{ 0x8f, 0x51, 0x12, 0x24, 0x3f, 0x7f, 0x64, 0xc8, 0x3f, 0x7e, 0x24, 0x48, 0x3f, 0x7e, 0x24, 0x48, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8f, 0x52, 0x0, 0x8a, 0x3c, 0x8b, 0x24, 0x89, 0x27, 0xe8, 0x24, 0x3f, 0x25, 0xc8, 0x3d, 0x48, 0x9, 0x48, 0x9, 0x5c, 0x2d, 0xd4, 0x28, 0x94, 0x29, 0xd4, 0x29, 0xb4, 0x2a, 0x95, 0x3c, 0xb5, 0x61, 0xa3 },
{ 0x8f, 0x53, 0x8, 0x7c, 0x8, 0x44, 0x7f, 0x7c, 0x8, 0x0, 0x3e, 0xff, 0x2a, 0x44, 0x2a, 0x44, 0x3e, 0x7c, 0x2a, 0x44, 0x2a, 0x44, 0x3e, 0x7c, 0x8, 0x44, 0x7f, 0x47, 0x8, 0x7c, 0x9, 0xc4, 0x8, 0x4 },
{ 0x8f, 0x54, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x22, 0x2, 0xfa, 0x2, 0x22, 0x2, 0xfa, 0x72, 0x2, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x34, 0x6, 0x28, 0x0, 0x47, 0xff },
{ 0x8f, 0x55, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x7f, 0xff, 0x2, 0x40, 0x2, 0x40, 0x3f, 0xfe, 0x22, 0x42, 0x22, 0x4a, 0x24, 0x3a, 0x38, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe },
{ 0x8f, 0x56, 0x0, 0x1, 0x7f, 0x49, 0x14, 0x49, 0x14, 0x49, 0x7f, 0x49, 0x55, 0x49, 0x55, 0xdb, 0x55, 0xdb, 0x67, 0x49, 0x41, 0x49, 0x41, 0x49, 0x7f, 0x49, 0x41, 0x49, 0x41, 0x49, 0x7f, 0xc1, 0x0, 0x81 },
{ 0x8f, 0x57, 0x4, 0x40, 0x8, 0x80, 0x1f, 0xfe, 0x70, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8f, 0x58, 0x0, 0x10, 0x7f, 0x20, 0x14, 0x7e, 0x14, 0x52, 0x7f, 0x52, 0x55, 0x7e, 0x55, 0x52, 0x55, 0x52, 0x67, 0x7e, 0x41, 0x2a, 0x41, 0x2c, 0x7f, 0x2d, 0x41, 0x2f, 0x41, 0x28, 0x7f, 0x69, 0x0, 0xcf },
{ 0x8f, 0x59, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x37, 0xff, 0x50, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x8f, 0x5a, 0x4, 0xc0, 0x4, 0x60, 0xc, 0x20, 0x9, 0xfe, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x50, 0x20, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x0 },
{ 0x8f, 0x5b, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x8, 0x6, 0x8, 0x4, 0x7c, 0x1f, 0xc4, 0x2, 0x40, 0x2, 0x40, 0x2, 0x40, 0x6, 0x40, 0x4, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x8f, 0x5c, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8f, 0x5d, 0x9, 0x4, 0x19, 0x8c, 0x10, 0x88, 0x30, 0x88, 0x67, 0xff, 0x8, 0x20, 0x18, 0x20, 0x11, 0x20, 0x31, 0x3e, 0x71, 0x20, 0x11, 0x20, 0x11, 0x20, 0x13, 0xa0, 0x12, 0xe0, 0x16, 0x38, 0x14, 0xf },
{ 0x8f, 0x5e, 0x0, 0x48, 0x0, 0x4c, 0x0, 0x44, 0x7f, 0xff, 0x0, 0x40, 0x8, 0x40, 0x8, 0x42, 0x8, 0x66, 0x7f, 0x24, 0x8, 0x2c, 0x8, 0x38, 0x18, 0x10, 0x10, 0x38, 0x30, 0x6d, 0x61, 0xc7, 0x7, 0x2 },
{ 0x8f, 0x5f, 0x0, 0x0, 0x1f, 0xf8, 0x2, 0x30, 0x1, 0x40, 0x3f, 0xfe, 0x1, 0x44, 0x3, 0x48, 0xe, 0x40, 0x38, 0x40, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8f, 0x60, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0x8, 0x20, 0x0, 0x20, 0x60, 0x20, 0x37, 0xff, 0x10, 0x20, 0x0, 0x20, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20 },
{ 0x8f, 0x61, 0x0, 0x10, 0x30, 0x10, 0x18, 0x90, 0x8, 0x9e, 0x0, 0x90, 0x60, 0x90, 0x30, 0x90, 0x13, 0xff, 0x0, 0x0, 0x9, 0x86, 0x8, 0xcc, 0x18, 0x48, 0x10, 0x0, 0x30, 0xcc, 0x21, 0x86, 0x63, 0x3 },
{ 0x8f, 0x62, 0x48, 0x48, 0x24, 0x8a, 0x0, 0xb, 0x3f, 0x89, 0x24, 0x88, 0x3f, 0xff, 0x24, 0x88, 0x3f, 0x88, 0x0, 0x8, 0x7f, 0xdc, 0x0, 0x14, 0x3f, 0x94, 0x20, 0x96, 0x20, 0xb2, 0x3f, 0xa2, 0x0, 0x63 },
{ 0x8f, 0x63, 0x10, 0xa2, 0x10, 0xa2, 0x21, 0x94, 0x29, 0x14, 0x4b, 0x7f, 0x30, 0x88, 0x10, 0x88, 0x25, 0xa8, 0x7d, 0x28, 0x13, 0x2e, 0x11, 0x28, 0x59, 0x28, 0x55, 0x28, 0x51, 0x38, 0x11, 0x28, 0x11, 0x4f },
{ 0x8f, 0x64, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff },
{ 0x8f, 0x65, 0x8, 0x10, 0x1c, 0x10, 0x16, 0x10, 0x32, 0xff, 0x20, 0x20, 0x7e, 0x64, 0x8, 0x44, 0x8, 0xfe, 0x7f, 0x2a, 0x8, 0x28, 0x4a, 0x28, 0x6a, 0x28, 0x28, 0x68, 0xf, 0x49, 0x38, 0xc9, 0x61, 0x87 },
{ 0x8f, 0x66, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x42, 0xf, 0x42, 0x8, 0x46, 0x8, 0x64, 0x8, 0x24, 0x7f, 0xac, 0x8, 0x28, 0x2a, 0x38, 0x2a, 0x10, 0x6b, 0x38, 0x49, 0x28, 0x8, 0x6c, 0x8, 0xc6, 0x39, 0x83 },
{ 0x8f, 0x67, 0x0, 0x0, 0x1f, 0xf8, 0x10, 0x8, 0x10, 0x8, 0x17, 0xe8, 0x11, 0x8, 0x11, 0xe8, 0x11, 0x28, 0x13, 0x28, 0x12, 0xa8, 0x16, 0x68, 0x10, 0x48, 0x10, 0xcc, 0x31, 0x85, 0x23, 0x7, 0x60, 0x2 },
{ 0x8f, 0x68, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x28, 0x2, 0xb, 0xff, 0x18, 0x10, 0x10, 0x20, 0x31, 0xfe, 0x51, 0x2, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe },
{ 0x8f, 0x69, 0x1, 0x0, 0x31, 0x7e, 0x19, 0x12, 0x9, 0xd2, 0x1, 0x12, 0x61, 0x16, 0x31, 0x14, 0x17, 0xd4, 0x1, 0x1c, 0x11, 0x8, 0x15, 0x48, 0x15, 0x5c, 0x35, 0x54, 0x2d, 0x16, 0x29, 0x32, 0x63, 0x63 },
{ 0x8f, 0x6a, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x2, 0x82, 0x6, 0x82, 0x4, 0x82, 0xc, 0xfe, 0x18, 0x28, 0x3e, 0x28, 0x6b, 0x28, 0x8, 0x28, 0x8, 0x68, 0x8, 0x49, 0x8, 0xc9, 0x9, 0x87 },
{ 0x8f, 0x6b, 0x10, 0x20, 0x10, 0x20, 0x23, 0xfe, 0x2a, 0x2, 0x4a, 0x82, 0x30, 0xff, 0x10, 0x88, 0x25, 0x90, 0x7d, 0x3e, 0x13, 0x22, 0x11, 0x22, 0x59, 0x3e, 0x55, 0x22, 0x55, 0x22, 0x11, 0x22, 0x11, 0x3e },
{ 0x8f, 0x6c, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x14, 0x94, 0x12, 0xa4, 0x17, 0xf4, 0x10, 0x84, 0x11, 0xc4, 0x12, 0xa4, 0x34, 0x94, 0x20, 0x84, 0x60, 0x84 },
{ 0x8f, 0x6d, 0x8, 0x20, 0x7f, 0x20, 0x0, 0x20, 0x3e, 0xfc, 0x22, 0x24, 0x3e, 0x24, 0x0, 0xa4, 0x3e, 0x64, 0x4, 0x34, 0x7f, 0x55, 0x8, 0x87, 0x38, 0x2, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff },
{ 0x8f, 0x6e, 0x8, 0x20, 0x7f, 0x20, 0x0, 0x20, 0x3e, 0xfc, 0x22, 0x24, 0x3e, 0x24, 0x0, 0xa4, 0x3e, 0x64, 0x4, 0x34, 0x7f, 0x55, 0x8, 0x87, 0x38, 0x2, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8f, 0x6f, 0x0, 0x80, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8f, 0x70, 0x8, 0x80, 0x18, 0xae, 0x10, 0xb0, 0x30, 0x90, 0x63, 0xe0, 0x8, 0x9f, 0x18, 0x84, 0x12, 0xa4, 0x32, 0xa4, 0x72, 0xa4, 0x12, 0xa4, 0x16, 0xb4, 0x14, 0x94, 0x10, 0x84, 0x10, 0x84, 0x10, 0xc },
{ 0x8f, 0x71, 0x0, 0x24, 0x30, 0x26, 0x18, 0x22, 0x8, 0x20, 0x3, 0xff, 0x0, 0x20, 0x0, 0x20, 0x78, 0xa8, 0x8, 0xa8, 0x9, 0xac, 0x9, 0x24, 0xb, 0x26, 0x8, 0x20, 0x18, 0x20, 0x34, 0x0, 0x63, 0xff },
{ 0x8f, 0x72, 0x8, 0x80, 0x9, 0x84, 0x19, 0x4, 0x13, 0xfe, 0x30, 0x92, 0x31, 0x90, 0x53, 0x1f, 0x16, 0x80, 0x10, 0xfc, 0x11, 0x84, 0x13, 0xc, 0x16, 0xd8, 0x10, 0x50, 0x10, 0x70, 0x11, 0xdc, 0x17, 0x7 },
{ 0x8f, 0x73, 0x0, 0x80, 0x11, 0x84, 0x11, 0x4, 0x13, 0xfe, 0x54, 0x92, 0x54, 0x90, 0x55, 0x9f, 0x57, 0x40, 0x54, 0x7c, 0x54, 0xc4, 0x55, 0x8c, 0x57, 0x58, 0x7c, 0x30, 0x0, 0x78, 0x0, 0xcc, 0x3, 0x87 },
{ 0x8f, 0x74, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x1, 0x40, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x10, 0x1f, 0xfc, 0x74, 0x17, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0 },
{ 0x8f, 0x75, 0x0, 0x6, 0x78, 0x3c, 0x4b, 0xe2, 0x49, 0x26, 0x48, 0x94, 0x7b, 0xff, 0x4a, 0x1, 0x4a, 0x81, 0x48, 0xe2, 0x79, 0xbf, 0x49, 0x2a, 0x4a, 0xea, 0x48, 0x4a, 0x78, 0xdf, 0x1, 0x82, 0x3, 0x2 },
{ 0x8f, 0x76, 0x10, 0x40, 0x10, 0xc4, 0x10, 0x84, 0x7d, 0xfe, 0x0, 0x4a, 0x44, 0x48, 0x44, 0x8f, 0x65, 0x40, 0x2c, 0x7c, 0x28, 0xc4, 0x9, 0x8c, 0xc, 0x58, 0x30, 0x30, 0x60, 0x78, 0x0, 0xcc, 0x3, 0x87 },
{ 0x8f, 0x77, 0x0, 0xc, 0x0, 0x78, 0x3f, 0xc4, 0x11, 0xc, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x48, 0x5, 0xf, 0x7e, 0x19, 0x24, 0x33, 0x24, 0x6a, 0x24, 0x6, 0xff, 0xc, 0x4, 0x18, 0x4, 0x70, 0x4 },
{ 0x8f, 0x78, 0x0, 0x20, 0x3f, 0x62, 0x24, 0x42, 0x24, 0xff, 0x3e, 0x25, 0x24, 0x24, 0x24, 0x47, 0x3e, 0xa0, 0x24, 0x3e, 0x24, 0x62, 0x3f, 0xd6, 0x0, 0x94, 0x55, 0x88, 0x54, 0x9c, 0x41, 0xb6, 0x3, 0x63 },
{ 0x8f, 0x79, 0x0, 0x48, 0x30, 0xd8, 0x18, 0x90, 0x9, 0xff, 0x3, 0x10, 0x5, 0x10, 0x1, 0x10, 0x1, 0xfe, 0x9, 0x10, 0x9, 0x10, 0x19, 0x10, 0x11, 0xfe, 0x31, 0x10, 0x21, 0x10, 0x61, 0x10, 0x1, 0xff },
{ 0x8f, 0x7a, 0x8, 0x6, 0x18, 0x3c, 0x13, 0xe0, 0x32, 0x10, 0x63, 0xff, 0xa, 0x10, 0x1a, 0xfe, 0x12, 0x82, 0x32, 0x82, 0x72, 0xfe, 0x12, 0x82, 0x16, 0x82, 0x14, 0xfe, 0x1c, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x8f, 0x7b, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x8, 0x2, 0x18, 0x2, 0x37, 0xe2, 0x64, 0x22, 0x4, 0x22, 0x7, 0xe2, 0x4, 0x22, 0x4, 0x22, 0x4, 0x22, 0x7, 0xe2, 0x0, 0x6, 0x0, 0x4, 0x0, 0x1c },
{ 0x8f, 0x7c, 0x10, 0x6, 0x10, 0x3c, 0x11, 0xe0, 0x7d, 0x10, 0x11, 0xff, 0x11, 0x10, 0x39, 0x7e, 0x35, 0x42, 0x55, 0x42, 0x51, 0x7e, 0x11, 0x42, 0x13, 0x42, 0x12, 0x7e, 0x16, 0x42, 0x10, 0x42, 0x10, 0x7e },
{ 0x8f, 0x7d, 0x0, 0x80, 0x7e, 0x80, 0x10, 0xfe, 0x11, 0x82, 0x11, 0x2, 0x1c, 0xf2, 0x14, 0x92, 0x34, 0x92, 0x24, 0xf2, 0x74, 0x92, 0x1c, 0x92, 0x8, 0x92, 0x18, 0xf2, 0x10, 0x6, 0x30, 0x4, 0x60, 0x1c },
{ 0x8f, 0x7e, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x10, 0x0, 0x1, 0xfc, 0x41, 0x4, 0x61, 0xfc, 0x20, 0x0, 0x3, 0xfe, 0x10, 0xc, 0x10, 0x10, 0x17, 0xff, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x60, 0xe0 },
{ 0x8f, 0x80, 0x0, 0x48, 0x30, 0x90, 0x19, 0xfe, 0x63, 0x20, 0x35, 0xfc, 0x1, 0x20, 0x9, 0xfc, 0x19, 0x20, 0x31, 0x20, 0x61, 0xfe, 0x0, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x8f, 0x81, 0x0, 0x0, 0x27, 0xdf, 0x34, 0x51, 0x17, 0xdf, 0x4, 0x51, 0x47, 0xdf, 0x64, 0x1, 0x24, 0xf9, 0x4, 0x21, 0x14, 0x21, 0x14, 0xf9, 0x14, 0x21, 0x34, 0x21, 0x25, 0xfd, 0x24, 0x1, 0x64, 0x7 },
{ 0x8f, 0x82, 0x0, 0x6, 0x0, 0x7c, 0x1f, 0xc0, 0x10, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x33, 0xfc, 0x22, 0x4, 0x62, 0x4, 0x3, 0xfc },
{ 0x8f, 0x83, 0x8, 0x10, 0x18, 0x13, 0x10, 0x1e, 0x65, 0xf0, 0x2c, 0x10, 0x18, 0x92, 0x10, 0x92, 0x24, 0x92, 0x7e, 0x92, 0x12, 0x92, 0x10, 0xfe, 0x54, 0x10, 0x54, 0x10, 0x54, 0x11, 0x50, 0x13, 0x10, 0xe },
{ 0x8f, 0x84, 0x0, 0x0, 0x30, 0x92, 0x19, 0xb6, 0x9, 0x24, 0x3, 0x6c, 0x2, 0x48, 0x4, 0x90, 0x74, 0x90, 0x12, 0x48, 0x13, 0x6c, 0x11, 0x24, 0x11, 0xb6, 0x10, 0x92, 0x30, 0x0, 0x28, 0x0, 0x67, 0xff },
{ 0x8f, 0x85, 0x0, 0x84, 0x30, 0x48, 0x1b, 0xff, 0x8, 0x50, 0x1, 0xfe, 0x1, 0x52, 0x1, 0x9e, 0x79, 0x2, 0x9, 0xfe, 0x9, 0x2, 0x9, 0xfe, 0x8, 0x4, 0xb, 0xff, 0x18, 0x84, 0x34, 0x4c, 0x63, 0xff },
{ 0x8f, 0x86, 0x0, 0x8, 0x7f, 0x8, 0x14, 0x7f, 0x14, 0x0, 0x7f, 0x3e, 0x55, 0x22, 0x55, 0x3e, 0x55, 0x0, 0x67, 0x3e, 0x41, 0x4, 0x41, 0x8, 0x7f, 0x7f, 0x41, 0x8, 0x41, 0x8, 0x7f, 0x8, 0x0, 0x38 },
{ 0x8f, 0x87, 0x2, 0x0, 0x22, 0xff, 0x2a, 0x10, 0x2a, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x2a, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x2a, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x62, 0x7e, 0x42, 0x24, 0x2, 0x66, 0x2, 0xc3 },
{ 0x8f, 0x88, 0x10, 0x0, 0x10, 0x7c, 0x10, 0x44, 0x1e, 0x44, 0x12, 0x44, 0x32, 0x44, 0x22, 0x44, 0x76, 0x44, 0x54, 0x44, 0x1c, 0x44, 0x8, 0xc5, 0x1c, 0x85, 0x15, 0x83, 0x36, 0x0, 0x23, 0x0, 0x61, 0xff },
{ 0x8f, 0x89, 0x8, 0x0, 0x8, 0x0, 0x9, 0xfe, 0x7e, 0x22, 0x2, 0x22, 0x6, 0x22, 0xc, 0x22, 0x9, 0x22, 0x1b, 0x22, 0x3e, 0x62, 0x6b, 0x42, 0x9, 0x42, 0x8, 0xc6, 0x8, 0x84, 0x9, 0x84, 0xb, 0x1c },
{ 0x8f, 0x8a, 0x0, 0x6, 0x3f, 0x9c, 0x0, 0x70, 0x0, 0x40, 0x1f, 0x40, 0x11, 0x7f, 0x11, 0x44, 0x11, 0x44, 0x1f, 0x44, 0x10, 0x44, 0x10, 0x44, 0x10, 0xc4, 0x30, 0x84, 0x21, 0x84, 0x63, 0x4, 0x0, 0x4 },
{ 0x8f, 0x8b, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x9, 0xf, 0xfb, 0x0, 0x86, 0x1f, 0xfc, 0x0, 0x90, 0x7f, 0xff, 0x0, 0x40, 0x7, 0xfc, 0x7c, 0x4, 0x7, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x8f, 0x8c, 0x3, 0xfe, 0x2, 0x52, 0x7a, 0x52, 0x4b, 0xfe, 0x48, 0x21, 0x49, 0xfe, 0x48, 0x24, 0x78, 0x28, 0x4b, 0xff, 0x48, 0x10, 0x48, 0xfe, 0x4f, 0x82, 0x78, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x0, 0xfe },
{ 0x8f, 0x8d, 0x0, 0x40, 0x20, 0x42, 0x33, 0xfe, 0x10, 0x44, 0x0, 0x4c, 0x40, 0x48, 0x67, 0xfe, 0x20, 0x20, 0x0, 0x40, 0x11, 0xfc, 0x17, 0x4, 0x11, 0x4, 0x31, 0xfc, 0x21, 0x4, 0x21, 0x4, 0x61, 0xfc },
{ 0x8f, 0x8e, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x11, 0x8, 0x11, 0x8, 0x1f, 0xff, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0xf8, 0x30, 0x0, 0x20, 0x0, 0x64, 0x92, 0xc, 0xdb, 0x18, 0x49 },
{ 0x8f, 0x8f, 0x8, 0x20, 0x18, 0x22, 0x10, 0xfe, 0x64, 0x24, 0x2c, 0x24, 0x18, 0x28, 0x11, 0xff, 0x24, 0x10, 0x7c, 0x20, 0x14, 0x7e, 0x11, 0xc2, 0x54, 0x42, 0x54, 0x7e, 0x54, 0x42, 0x10, 0x42, 0x10, 0x7e },
{ 0x8f, 0x90, 0x0, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x90, 0x7f, 0xff, 0x0, 0x80, 0x7, 0xfc, 0x7c, 0x4, 0x7, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x8f, 0x91, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8f, 0x92, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x90, 0x7f, 0xff, 0x1, 0x0, 0xf, 0xfc, 0x78, 0x4, 0xf, 0xfc, 0x8, 0x4, 0xf, 0xfc },
{ 0x8f, 0x93, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3c, 0x22, 0x0, 0xfe, 0x7e, 0x24, 0x0, 0x28, 0x3d, 0xff, 0x0, 0x10, 0x3c, 0x7e, 0x1, 0xc2, 0x3c, 0x7e, 0x24, 0x42, 0x24, 0x42, 0x3c, 0x7e },
{ 0x8f, 0x94, 0x0, 0x20, 0x3c, 0x22, 0x0, 0xfe, 0x7e, 0x24, 0x0, 0x24, 0x3c, 0x28, 0x1, 0xff, 0x0, 0x10, 0x3c, 0x20, 0x0, 0x7e, 0x1, 0xc2, 0x3c, 0x42, 0x24, 0x7e, 0x24, 0x42, 0x24, 0x42, 0x3c, 0x7e },
{ 0x8f, 0x95, 0x0, 0x20, 0x3e, 0x20, 0x22, 0x20, 0x22, 0x20, 0x22, 0xfe, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x66, 0x3f, 0x44, 0x60, 0xc4, 0x1, 0x9c },
{ 0x8f, 0x96, 0x8, 0x0, 0x1c, 0xfe, 0x16, 0x42, 0x33, 0x42, 0x21, 0x46, 0x7e, 0x64, 0x48, 0x2c, 0x8, 0x28, 0x7f, 0x38, 0x8, 0x10, 0x2a, 0x10, 0x2a, 0x38, 0x6b, 0x28, 0x49, 0x6c, 0x8, 0x46, 0x18, 0xc3 },
{ 0x8f, 0x97, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x2, 0x10, 0x6, 0x10, 0x4, 0x30, 0xc, 0x20, 0x8, 0x60, 0x1f, 0x40, 0x1, 0xe0, 0x3, 0x38, 0xe, 0xc, 0x38, 0x6 },
{ 0x8f, 0x98, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x17, 0xfc, 0x10, 0x8, 0x11, 0x10, 0x10, 0xa0, 0x1f, 0xff, 0x10, 0x42, 0x10, 0x46, 0x10, 0x44, 0x30, 0x40, 0x20, 0x40, 0x60, 0x40, 0x1, 0xc0 },
{ 0x8f, 0x99, 0x8, 0x20, 0x18, 0x70, 0x10, 0x50, 0x30, 0xd8, 0x61, 0x8c, 0xb, 0x6, 0x1e, 0xfb, 0x10, 0x20, 0x30, 0x20, 0x73, 0xfe, 0x10, 0x20, 0x11, 0x24, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0xe0 },
{ 0x8f, 0x9a, 0x4, 0x0, 0x4, 0x0, 0x7f, 0xbe, 0x8, 0xa2, 0x19, 0xa2, 0x11, 0x22, 0x3f, 0x22, 0x5, 0xa2, 0x18, 0xbe, 0x70, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x43, 0x34, 0x9, 0x26, 0x18, 0x63, 0xf0 },
{ 0x8f, 0x9b, 0x10, 0x8, 0x39, 0xe8, 0x2d, 0x28, 0x65, 0x28, 0x1, 0x3f, 0x7d, 0xe9, 0x11, 0x29, 0x11, 0x29, 0x7d, 0x29, 0x11, 0xe9, 0x55, 0x29, 0x55, 0x29, 0x51, 0x29, 0x1d, 0xfb, 0x33, 0x12, 0x60, 0x36 },
{ 0x8f, 0x9c, 0x0, 0x20, 0x3c, 0x70, 0x24, 0x50, 0x24, 0xd8, 0x25, 0x8c, 0x29, 0x6, 0x2a, 0xfb, 0x24, 0x20, 0x24, 0x20, 0x27, 0xfe, 0x24, 0x20, 0x24, 0xa4, 0x2c, 0xa4, 0x21, 0xa6, 0x23, 0x23, 0x20, 0x60 },
{ 0x8f, 0x9d, 0x9, 0x0, 0xb, 0xfe, 0x1a, 0x0, 0x15, 0xfc, 0x11, 0x4, 0x31, 0xfc, 0x31, 0x4, 0x51, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x11, 0x0, 0x13, 0xfe, 0x16, 0x92, 0x11, 0x22, 0x16, 0x46, 0x11, 0x9c },
{ 0x8f, 0x9e, 0x9, 0x22, 0x8, 0xa4, 0x1b, 0xff, 0x12, 0x1, 0x12, 0xfd, 0x30, 0x84, 0x30, 0xfc, 0x50, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x13, 0x3 },
{ 0x8f, 0x9f, 0x0, 0x20, 0x3d, 0x24, 0x24, 0xa8, 0x24, 0x20, 0x25, 0xfe, 0x3c, 0x48, 0x24, 0x48, 0x27, 0xff, 0x24, 0x84, 0x3d, 0xa6, 0x27, 0x23, 0x24, 0xfc, 0x24, 0x24, 0x24, 0x64, 0x64, 0xc4, 0x4d, 0x9c },
{ 0x8f, 0xa0, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x20, 0x3c, 0x23, 0xe0, 0x22, 0x0, 0x23, 0xfe, 0x22, 0x20, 0x22, 0x20, 0x26, 0x20, 0x24, 0x20, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x8f, 0xa1, 0x0, 0x10, 0x0, 0xd0, 0x3, 0x90, 0x1e, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x7f, 0xff, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x6, 0x10, 0x4, 0x10, 0xc, 0x10, 0x18, 0x10, 0x70, 0x10 },
{ 0x8f, 0xa2, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x1, 0x82, 0x3, 0x6, 0x6, 0x4, 0x1c, 0x1c, 0x70, 0x0, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc },
{ 0x8f, 0xa3, 0x1, 0x22, 0x1, 0xa6, 0x78, 0xa4, 0x48, 0xa4, 0x48, 0x20, 0x49, 0xfe, 0x49, 0x2, 0x49, 0x2, 0x49, 0xfe, 0x49, 0x2, 0x49, 0x2, 0x79, 0xfe, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0xe },
{ 0x8f, 0xa4, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x42, 0x22, 0x42, 0x24, 0x7e, 0x38, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x20, 0x2, 0x20, 0xe },
{ 0x8f, 0xa5, 0x0, 0x0, 0x0, 0xfe, 0x7c, 0x82, 0x44, 0x82, 0x44, 0xfe, 0x44, 0x82, 0x44, 0x82, 0x44, 0xfe, 0x44, 0x0, 0x45, 0xff, 0x7d, 0x1, 0x1, 0x1, 0x1, 0xff, 0x1, 0x1, 0x1, 0x1, 0x1, 0xff },
{ 0x8f, 0xa6, 0x10, 0x84, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x8, 0x8, 0xf, 0xf8, 0x20, 0x0, 0x3f, 0xf8, 0x20, 0x1, 0x3f, 0xff, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8f, 0xa7, 0x4, 0xe, 0x24, 0xf9, 0x34, 0x22, 0x14, 0x94, 0x4, 0x44, 0x5, 0xff, 0x1c, 0x4, 0x74, 0x64, 0x4, 0x34, 0x4, 0xc, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x8f, 0xa8, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0x2, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x30, 0x1e, 0x60, 0x3, 0xc0, 0x6, 0x78, 0x3c, 0xe },
{ 0x8f, 0xa9, 0x8, 0x0, 0x8, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x7e, 0x7e, 0x12, 0x42, 0x12, 0x42, 0x12, 0x7e, 0x32, 0x0, 0x26, 0xff, 0x24, 0x81, 0x7c, 0x81, 0xa, 0xff, 0x19, 0x81, 0x30, 0x81, 0x60, 0xff },
{ 0x8f, 0xaa, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x1, 0x48, 0x89, 0xc, 0x98, 0x4, 0x90, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x8f, 0xab, 0x8, 0x6, 0x8, 0x1c, 0x9, 0xf1, 0x48, 0x23, 0x69, 0x36, 0x29, 0x94, 0x8, 0x80, 0x8, 0x4, 0xb, 0xff, 0x18, 0x4, 0x38, 0xc4, 0x68, 0x64, 0x8, 0x24, 0x8, 0x4, 0x8, 0x4, 0x8, 0x1c },
{ 0x8f, 0xac, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0x18, 0x8c, 0x10, 0x84, 0x30, 0x86, 0x20, 0x82, 0x60, 0x83, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x8f, 0xad, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x8, 0x90, 0x8, 0x98, 0x18, 0x8c, 0x10, 0x86, 0x30, 0x83, 0x60, 0x88, 0x0, 0x98, 0x3, 0x90, 0x0, 0x30, 0x0, 0x60, 0x1, 0xc0, 0x7, 0x0, 0x3c, 0x0 },
{ 0x8f, 0xae, 0x0, 0x80, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x8f, 0xaf, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x17, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x30, 0x40, 0x20, 0x40, 0x60, 0x40, 0xf, 0xff },
{ 0x8f, 0xb0, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x40, 0x10, 0x40, 0x1f, 0xff, 0x11, 0x50, 0x11, 0x50, 0x11, 0x58, 0x13, 0x48, 0x12, 0x4c, 0x36, 0x46, 0x2c, 0x43, 0x60, 0x40, 0x0, 0x40 },
{ 0x8f, 0xb1, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x21, 0x8, 0x29, 0x28, 0x25, 0x48, 0x21, 0x1f, 0x2f, 0xf2, 0x28, 0x2a, 0x2b, 0xaa, 0x2a, 0xae, 0x2a, 0xa4, 0x6b, 0xa4, 0x48, 0x2e, 0x48, 0x2a, 0x8, 0x7b },
{ 0x8f, 0xb2, 0x4, 0x4, 0x4, 0xc, 0x7f, 0xc8, 0x20, 0x98, 0x11, 0x32, 0x7f, 0xc6, 0x0, 0x4, 0x3f, 0x8c, 0x20, 0x98, 0x3f, 0xb0, 0x20, 0x82, 0x3f, 0x82, 0x4, 0x6, 0x7f, 0xcc, 0x4, 0x18, 0x4, 0x70 },
{ 0x8f, 0xb3, 0x0, 0x0, 0x3f, 0xfc, 0x0, 0x18, 0x0, 0x60, 0x0, 0x88, 0x78, 0x89, 0xb, 0xeb, 0x8, 0x8e, 0x8, 0x88, 0xb, 0xe8, 0x8, 0x88, 0x18, 0x8c, 0x13, 0xe4, 0x30, 0x86, 0x60, 0x83, 0x3, 0x80 },
{ 0x8f, 0xb4, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0xa4, 0x7c, 0xa4, 0x11, 0xa6, 0x11, 0x22, 0x13, 0x23, 0x10, 0x24, 0x1c, 0xe4, 0x70, 0xc, 0x10, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10, 0x60, 0x31, 0xc0 },
{ 0x8f, 0xb5, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x42, 0x10, 0x42, 0x7c, 0xc2, 0x10, 0x86, 0x11, 0x84, 0x13, 0x1c, 0x1c, 0x0, 0x71, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x31, 0xfe },
{ 0x8f, 0xb6, 0x10, 0x84, 0x18, 0x8c, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x3, 0x80 },
{ 0x8f, 0xb7, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x20, 0x7d, 0xfe, 0x10, 0x22, 0x13, 0xff, 0x10, 0x22, 0x1d, 0xfe, 0x70, 0x20, 0x11, 0x20, 0x11, 0x3e, 0x11, 0x20, 0x13, 0xa0, 0x12, 0xe0, 0x36, 0x3f },
{ 0x8f, 0xb8, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3, 0x90, 0x1e, 0x10, 0x2, 0x10, 0x7f, 0xff, 0x2, 0x10, 0x2, 0x10, 0x6, 0x10, 0xc, 0x10, 0x38, 0x10 },
{ 0x8f, 0xb9, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe },
{ 0x8f, 0xba, 0x0, 0x0, 0x1, 0xfe, 0x7c, 0x22, 0x44, 0x22, 0x44, 0x62, 0x44, 0x46, 0x44, 0xc4, 0x7d, 0x9c, 0x44, 0x0, 0x44, 0xfe, 0x44, 0x82, 0x44, 0x82, 0x7c, 0x82, 0x0, 0x82, 0x0, 0x82, 0x0, 0xfe },
{ 0x8f, 0xbb, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e },
{ 0x8f, 0xbc, 0x8, 0x44, 0x8, 0x44, 0x8, 0x44, 0x7e, 0xc6, 0x8, 0x82, 0x8, 0x82, 0x19, 0xa3, 0x1c, 0x20, 0x1a, 0x20, 0x2a, 0x20, 0x28, 0x64, 0x48, 0x44, 0x8, 0x44, 0x8, 0x4e, 0x8, 0x7a, 0x9, 0xc3 },
{ 0x8f, 0xbd, 0x8, 0x10, 0x8, 0x92, 0x8, 0xd6, 0x7e, 0x54, 0x8, 0x10, 0x8, 0xfe, 0x1c, 0x82, 0x1a, 0x82, 0x1a, 0xfe, 0x28, 0x82, 0x28, 0x82, 0x48, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0x8e },
{ 0x8f, 0xbe, 0x8, 0x10, 0x8, 0x10, 0x8, 0xfe, 0x7e, 0x44, 0x8, 0x28, 0x9, 0xff, 0x1c, 0x0, 0x1a, 0xfe, 0x1a, 0x82, 0x28, 0xfe, 0x28, 0x82, 0x48, 0xfe, 0x8, 0x10, 0x9, 0xff, 0x8, 0x10, 0x8, 0x10 },
{ 0x8f, 0xbf, 0x8, 0x48, 0x8, 0x50, 0x8, 0xff, 0x7e, 0x90, 0x9, 0x90, 0xa, 0xfe, 0x18, 0x90, 0x1c, 0x90, 0x1a, 0xfe, 0x2a, 0x90, 0x28, 0x90, 0x48, 0xff, 0x8, 0x0, 0x8, 0xaa, 0x9, 0xab, 0x9, 0x1 },
{ 0x8f, 0xc0, 0x0, 0x0, 0x33, 0xfe, 0x18, 0x42, 0x8, 0x42, 0x0, 0xc2, 0x60, 0x86, 0x31, 0x84, 0x13, 0x1c, 0x0, 0x0, 0x9, 0xfe, 0x9, 0x2, 0x19, 0x2, 0x11, 0x2, 0x31, 0x2, 0x21, 0x2, 0x61, 0xfe },
{ 0x8f, 0xc1, 0x0, 0x20, 0x32, 0x22, 0x1b, 0x26, 0x9, 0x24, 0x0, 0x20, 0x63, 0xfe, 0x32, 0x2, 0x12, 0x2, 0x3, 0xfe, 0xa, 0x2, 0xa, 0x2, 0x1b, 0xfe, 0x12, 0x2, 0x32, 0x2, 0x22, 0x2, 0x62, 0xe },
{ 0x8f, 0xc2, 0x0, 0x20, 0x30, 0xa0, 0x18, 0xbe, 0x8, 0xa0, 0x0, 0xa0, 0x63, 0xff, 0x30, 0x20, 0x10, 0xa4, 0x1, 0xa6, 0xb, 0x23, 0x8, 0x24, 0x18, 0x6c, 0x10, 0x8, 0x30, 0x18, 0x20, 0x70, 0x63, 0xc0 },
{ 0x8f, 0xc3, 0x1, 0x0, 0x21, 0x3e, 0x31, 0x22, 0x17, 0xe2, 0x1, 0x22, 0x41, 0x3e, 0x63, 0xa2, 0x23, 0x62, 0x5, 0x22, 0x15, 0x22, 0x11, 0x3e, 0x11, 0x22, 0x31, 0x22, 0x21, 0x22, 0x21, 0x22, 0x61, 0x3e },
{ 0x8f, 0xc4, 0x8, 0x10, 0x8, 0x10, 0x8, 0xfe, 0xa, 0x10, 0x2a, 0x92, 0x2a, 0x82, 0x29, 0xff, 0x68, 0x82, 0x48, 0x82, 0x8, 0x0, 0x1d, 0xff, 0x14, 0x48, 0x16, 0x48, 0x32, 0xc8, 0x21, 0x89, 0x63, 0x7 },
{ 0x8f, 0xc5, 0x4, 0x40, 0x8, 0x80, 0x1f, 0xfe, 0x30, 0x80, 0x50, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xff, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8f, 0xc6, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x12, 0x22, 0x32, 0x22, 0x62, 0x3e, 0xce, 0x22, 0x0, 0x22, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x42, 0x0, 0x7e, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8f, 0xc7, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x0, 0x50, 0x0, 0x37, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x32, 0x40, 0x52, 0x7c, 0x12, 0x40, 0x12, 0x40, 0x32, 0x40, 0x22, 0x40, 0x62, 0x40, 0xf, 0xff },
{ 0x8f, 0xc8, 0x0, 0x80, 0x4, 0x90, 0xc, 0x9c, 0x18, 0x87, 0x73, 0x98, 0x0, 0x60, 0xf, 0xfc, 0x78, 0x4, 0x8, 0x4, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc },
{ 0x8f, 0xc9, 0x0, 0x10, 0x7e, 0x92, 0x10, 0xd6, 0x10, 0x54, 0x10, 0x10, 0x10, 0xfe, 0x3c, 0x82, 0x24, 0x82, 0x64, 0xfe, 0x24, 0x82, 0x24, 0x82, 0x24, 0xfe, 0x24, 0x82, 0x3c, 0x82, 0x0, 0x82, 0x0, 0x8e },
{ 0x8f, 0xca, 0x0, 0x48, 0x7e, 0x50, 0x10, 0xff, 0x10, 0x90, 0x11, 0x90, 0x12, 0xfe, 0x3c, 0x90, 0x24, 0x90, 0x64, 0xfe, 0x24, 0x90, 0x24, 0x90, 0x24, 0xff, 0x24, 0x0, 0x3c, 0xaa, 0x1, 0xab, 0x1, 0x29 },
{ 0x8f, 0xcb, 0x8, 0x82, 0x8, 0xc6, 0x8, 0x44, 0x7e, 0xfe, 0x2, 0x10, 0x6, 0x10, 0x4, 0x10, 0xc, 0xfe, 0x18, 0x10, 0x3c, 0x10, 0x6a, 0x10, 0x9, 0xff, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x8f, 0xcc, 0x2, 0x40, 0xe, 0x40, 0x78, 0x40, 0x8, 0xff, 0x8, 0x90, 0x7e, 0x90, 0x8, 0x10, 0x18, 0x10, 0x1c, 0x54, 0x1a, 0x54, 0x2a, 0xd6, 0x28, 0x92, 0x49, 0x93, 0x8, 0x10, 0x8, 0x10, 0x8, 0x70 },
{ 0x8f, 0xcd, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80 },
{ 0x8f, 0xce, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x50, 0x62, 0x88, 0x0, 0x0, 0x0, 0x1c, 0x1f, 0xf0, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8f, 0xcf, 0x10, 0x10, 0x54, 0x10, 0x54, 0x10, 0x55, 0xff, 0x11, 0x0, 0x7d, 0x10, 0x11, 0x10, 0x11, 0x10, 0x39, 0x7e, 0x35, 0x10, 0x51, 0x10, 0x51, 0x10, 0x13, 0x10, 0x12, 0x10, 0x16, 0xff, 0x10, 0x0 },
{ 0x8f, 0xd0, 0x8, 0x0, 0x19, 0xfe, 0x10, 0x22, 0x64, 0x22, 0x2c, 0x62, 0x18, 0x46, 0x10, 0xc4, 0x25, 0x9c, 0x7e, 0x0, 0x12, 0xfe, 0x10, 0x82, 0x54, 0x82, 0x54, 0x82, 0x54, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x8f, 0xd1, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x8f, 0xd2, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe },
{ 0x8f, 0xd3, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x6, 0x8, 0x3c, 0x4b, 0xe1, 0x69, 0x12, 0x28, 0x80, 0x8, 0x4, 0xb, 0xff, 0x38, 0x84, 0x68, 0xc4, 0x8, 0x44, 0x8, 0x4, 0x8, 0x1c },
{ 0x8f, 0xd4, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x80, 0x1f, 0xfe, 0x30, 0x80, 0x5f, 0xfc, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xff, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8f, 0xd5, 0x8, 0x60, 0x1b, 0xde, 0x10, 0x80, 0x37, 0xf0, 0x60, 0x80, 0xb, 0xe0, 0x1a, 0xbf, 0x13, 0xe4, 0x32, 0xa4, 0x73, 0xe4, 0x10, 0x84, 0x13, 0xe4, 0x10, 0x84, 0x10, 0xf4, 0x17, 0x84, 0x10, 0xc },
{ 0x8f, 0xd6, 0x10, 0x84, 0x8, 0x88, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x44, 0x6, 0x6c, 0x1c, 0x28, 0x74, 0x30, 0x7, 0x9c, 0x1c, 0x7 },
{ 0x8f, 0xd7, 0x0, 0x0, 0x3c, 0x48, 0x0, 0x48, 0x7e, 0x4c, 0x0, 0xc4, 0x3c, 0x86, 0x0, 0x82, 0x1, 0xa3, 0x3c, 0x20, 0x0, 0x20, 0x0, 0x64, 0x3c, 0x44, 0x24, 0x46, 0x24, 0xc2, 0x24, 0x9e, 0x3d, 0xf3 },
{ 0x8f, 0xd8, 0x0, 0x0, 0x3d, 0xfe, 0x0, 0x10, 0x7e, 0x10, 0x0, 0x10, 0x3c, 0x90, 0x0, 0x90, 0x0, 0x9e, 0x3c, 0x90, 0x0, 0x90, 0x0, 0x90, 0x3c, 0x90, 0x24, 0x90, 0x24, 0x90, 0x27, 0xff, 0x3c, 0x0 },
{ 0x8f, 0xd9, 0x0, 0x0, 0x3d, 0xfe, 0x0, 0x22, 0x7e, 0x22, 0x0, 0x62, 0x3c, 0x46, 0x0, 0xc4, 0x1, 0x8c, 0x3c, 0x0, 0x0, 0xfe, 0x0, 0x82, 0x3c, 0x82, 0x24, 0x82, 0x24, 0x82, 0x24, 0x82, 0x3c, 0xfe },
{ 0x8f, 0xda, 0x0, 0x82, 0x3c, 0xc6, 0x0, 0x44, 0x7e, 0xfe, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0xfe, 0x3c, 0x10, 0x0, 0x10, 0x0, 0x10, 0x3d, 0xff, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0x3c, 0x10 },
{ 0x8f, 0xdb, 0x2, 0x0, 0x7, 0xf0, 0xc, 0x20, 0x18, 0x40, 0x7f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x1, 0x2, 0x6, 0x86, 0x39, 0x4c, 0x6, 0x60, 0x38, 0xd8, 0x7, 0x4c, 0x7c, 0x47, 0x1, 0xc0 },
{ 0x8f, 0xdc, 0x10, 0x84, 0x8, 0x88, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x38, 0xe },
{ 0x8f, 0xdd, 0x24, 0xe, 0x35, 0xf8, 0x14, 0xa2, 0x4, 0x54, 0x1f, 0xff, 0x74, 0x84, 0x4, 0x4c, 0x7f, 0xff, 0x2, 0x40, 0x1f, 0xfc, 0x12, 0x44, 0x1c, 0x7c, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc },
{ 0x8f, 0xde, 0x10, 0x0, 0x39, 0xfe, 0x2c, 0x10, 0x64, 0x10, 0x40, 0x10, 0x7c, 0x90, 0x10, 0x90, 0x10, 0x9e, 0x7c, 0x90, 0x10, 0x90, 0x54, 0x90, 0x54, 0x90, 0x10, 0x90, 0x1c, 0x90, 0x33, 0xff, 0x60, 0x0 },
{ 0x8f, 0xdf, 0x8, 0x6, 0x1c, 0xfc, 0x16, 0x10, 0x32, 0xff, 0x20, 0x10, 0x7e, 0xfe, 0x8, 0x92, 0x8, 0x92, 0x7e, 0xfe, 0x8, 0x92, 0x4a, 0x92, 0x6a, 0xfe, 0x28, 0x10, 0xe, 0xfe, 0x38, 0x10, 0x61, 0xff },
{ 0x8f, 0xe0, 0x10, 0x10, 0x38, 0x10, 0x2d, 0xff, 0x64, 0x44, 0x40, 0x28, 0x7d, 0xff, 0x10, 0x0, 0x10, 0xfe, 0x7c, 0x92, 0x10, 0xfe, 0x54, 0x92, 0x54, 0xfe, 0x10, 0x10, 0x1c, 0xfe, 0x30, 0x10, 0x61, 0xff },
{ 0x8f, 0xe1, 0x0, 0x10, 0x3e, 0x10, 0x22, 0xfe, 0x26, 0x44, 0x24, 0x28, 0x2d, 0xff, 0x28, 0x0, 0x28, 0xfe, 0x24, 0x82, 0x24, 0xfe, 0x24, 0x82, 0x24, 0xfe, 0x2c, 0x10, 0x21, 0xff, 0x20, 0x10, 0x20, 0x10 },
{ 0x8f, 0xe2, 0x24, 0x10, 0x24, 0x92, 0x7e, 0xd6, 0x24, 0x54, 0x24, 0x10, 0x3c, 0xfe, 0x10, 0x82, 0x7e, 0x82, 0x52, 0xfe, 0x52, 0x82, 0x7e, 0x82, 0x10, 0xfe, 0x7e, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x8e },
{ 0x8f, 0xe3, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0xfc, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x8f, 0xe4, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x40, 0x4, 0x40, 0x6, 0x40, 0x3, 0x40, 0x1, 0xc0, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x8f, 0xe5, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x8, 0x0, 0x30, 0x0, 0xe2, 0x3e, 0xa2, 0x2, 0xb6, 0x6, 0x94, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x3, 0x80, 0x0, 0x0, 0x3f, 0xff, 0x0, 0x0 },
{ 0x8f, 0xe6, 0x0, 0x38, 0x1f, 0xe0, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0x88, 0x3f, 0xfe, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8f, 0xe7, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x27, 0xe2, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x31, 0x70, 0x1f },
{ 0x8f, 0xe8, 0x3, 0x82, 0x1e, 0x12, 0x4, 0x12, 0x3f, 0xd2, 0x14, 0x92, 0x14, 0x92, 0x7f, 0xf2, 0x14, 0x92, 0x14, 0x92, 0x3f, 0xd2, 0xc, 0x12, 0x1f, 0x12, 0x15, 0x82, 0x34, 0xc2, 0x64, 0x2, 0x4, 0xe },
{ 0x8f, 0xe9, 0x10, 0x14, 0x10, 0x16, 0x10, 0x12, 0x13, 0xff, 0x7e, 0x10, 0x12, 0x10, 0x13, 0xd2, 0x12, 0x52, 0x12, 0x56, 0x12, 0x54, 0x1e, 0x5c, 0x72, 0x48, 0x6, 0x5c, 0x4, 0xd5, 0xc, 0x37, 0x18, 0x62 },
{ 0x8f, 0xea, 0x10, 0xfc, 0x10, 0x84, 0x10, 0xfc, 0x10, 0x84, 0x7c, 0x84, 0x10, 0xfc, 0x10, 0x0, 0x13, 0xff, 0x10, 0x80, 0x10, 0xff, 0x1d, 0x25, 0x72, 0x6d, 0x0, 0xc9, 0x1, 0x9b, 0x0, 0x32, 0x0, 0xe },
{ 0x8f, 0xeb, 0x0, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x48, 0x13, 0x87, 0x7c, 0x48, 0x11, 0xfe, 0x10, 0x48, 0x11, 0xfe, 0x10, 0x48, 0x13, 0xff, 0x1c, 0x49, 0x70, 0xca, 0x7, 0x8c, 0x0, 0xe6, 0x3, 0x83 },
{ 0x8f, 0xec, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x10, 0x44, 0x7d, 0x83, 0x14, 0x28, 0x14, 0xfe, 0x34, 0x28, 0x24, 0xfe, 0x2c, 0x28, 0x29, 0xff, 0x78, 0x28, 0x14, 0x6a, 0x15, 0xc4, 0x30, 0x76, 0x61, 0xc3 },
{ 0x8f, 0xed, 0x10, 0x84, 0x18, 0x8c, 0x8, 0x88, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x9c, 0x0, 0x80 },
{ 0x8f, 0xee, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x18, 0x20, 0x55, 0xfc, 0x50, 0x20, 0x57, 0xff, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xc },
{ 0x8f, 0xef, 0x13, 0xff, 0x10, 0x20, 0x10, 0xfc, 0x10, 0x84, 0x7c, 0xfc, 0x10, 0x84, 0x13, 0xff, 0x12, 0x11, 0x1d, 0x4a, 0x71, 0x45, 0x12, 0x3c, 0x10, 0x40, 0x10, 0xfc, 0x13, 0x44, 0x10, 0x38, 0x33, 0xc7 },
{ 0x8f, 0xf0, 0x1, 0x0, 0x3, 0xf8, 0x6, 0x8, 0xc, 0x10, 0x3b, 0x60, 0x1, 0xc0, 0xf, 0x78, 0x78, 0xf, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x8f, 0xf1, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7e, 0xff, 0x8, 0x8, 0x8, 0x8, 0x18, 0x48, 0x1c, 0x68, 0x1a, 0x28, 0x2a, 0x38, 0x28, 0x10, 0x48, 0x38, 0x8, 0x28, 0x8, 0x6c, 0x8, 0xc6, 0x9, 0x83 },
{ 0x8f, 0xf2, 0x0, 0x80, 0x30, 0xfc, 0x19, 0x88, 0xb, 0x10, 0x0, 0x20, 0x63, 0xfe, 0x30, 0x22, 0x10, 0x22, 0x7, 0xff, 0x8, 0x22, 0x8, 0x22, 0x1b, 0xfe, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0xe0 },
{ 0x8f, 0xf3, 0x4, 0x10, 0x4, 0x14, 0x24, 0x16, 0x34, 0x12, 0x14, 0x10, 0x5, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c, 0x38, 0x34, 0x28, 0x64, 0x28, 0x4, 0x6c, 0x4, 0x44, 0x4, 0xc6, 0x5, 0x83 },
{ 0x8f, 0xf4, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff },
{ 0x8f, 0xf5, 0x4, 0x20, 0x1c, 0x20, 0x73, 0xff, 0x10, 0x84, 0x13, 0x3, 0x7c, 0x48, 0x11, 0xfe, 0x10, 0x48, 0x39, 0xfe, 0x34, 0x48, 0x51, 0xfe, 0x50, 0x48, 0x10, 0xca, 0x13, 0x84, 0x10, 0xe6, 0x13, 0x83 },
{ 0x8f, 0xf6, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x1f, 0xf8, 0x0, 0x62, 0x3e, 0xc6, 0x2, 0xac, 0x4, 0x90, 0x18, 0x8c, 0x63, 0x87, 0x0, 0x0, 0x7f, 0xff, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x8f, 0xf7, 0x0, 0x20, 0x38, 0x20, 0x3, 0xff, 0x7c, 0x84, 0x3, 0x3, 0x38, 0x48, 0x1, 0xfe, 0x0, 0x48, 0x39, 0xfe, 0x0, 0x48, 0x3, 0xff, 0x38, 0x48, 0x28, 0xca, 0x2b, 0x84, 0x28, 0xe6, 0x3b, 0x83 },
{ 0x8f, 0xf8, 0x0, 0x10, 0x7f, 0x10, 0x14, 0xff, 0x14, 0x24, 0x7f, 0xc3, 0x55, 0x24, 0x55, 0x7e, 0x55, 0x24, 0x67, 0x7e, 0x41, 0x24, 0x41, 0xff, 0x7f, 0x24, 0x41, 0x65, 0x41, 0xc6, 0x7f, 0x72, 0x0, 0xc3 },
{ 0x8f, 0xf9, 0x10, 0x10, 0x38, 0x10, 0x2d, 0xff, 0x65, 0x1, 0x41, 0x1, 0x7c, 0xfe, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x90, 0x10, 0x9e, 0x54, 0x90, 0x54, 0x90, 0x10, 0x90, 0x1d, 0xd0, 0x31, 0x70, 0x63, 0x1f },
{ 0x8f, 0xfa, 0x0, 0x0, 0x3, 0xff, 0x7a, 0x1, 0x4b, 0xff, 0x4a, 0x0, 0x4a, 0xfe, 0x4a, 0x10, 0x4a, 0xfe, 0x4a, 0x92, 0x4a, 0xfe, 0x7a, 0x10, 0x7, 0xff, 0x5, 0x15, 0xd, 0x1d, 0x19, 0x75, 0x1, 0x3 },
{ 0x8f, 0xfb, 0x0, 0x20, 0x10, 0x20, 0x17, 0xfe, 0x10, 0x20, 0x10, 0xfc, 0x78, 0x84, 0x12, 0x84, 0x12, 0xfc, 0x12, 0x84, 0x12, 0x84, 0x12, 0xfc, 0x1a, 0x84, 0x72, 0x84, 0x2, 0xfc, 0x2, 0x0, 0x3, 0xff },
{ 0x8f, 0xfc, 0x8, 0x20, 0x1c, 0x20, 0x16, 0x20, 0x32, 0x7f, 0x28, 0x50, 0x7e, 0x90, 0x22, 0x7e, 0x3e, 0x52, 0x22, 0x52, 0x3e, 0x52, 0x20, 0x52, 0x24, 0x52, 0x24, 0x52, 0x26, 0x56, 0x3a, 0x10, 0x60, 0x10 },
{ 0x90, 0x40, 0x10, 0x10, 0x10, 0x14, 0x10, 0x16, 0x10, 0x12, 0x7d, 0xff, 0x10, 0x10, 0x10, 0x10, 0x13, 0xf0, 0x1c, 0x98, 0x70, 0x88, 0x10, 0x88, 0x10, 0x88, 0x10, 0xec, 0x13, 0x85, 0x10, 0x7, 0x30, 0x2 },
{ 0x90, 0x41, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x7c, 0x10, 0x10, 0x7e, 0x11, 0x42, 0x19, 0x42, 0x35, 0x7e, 0x35, 0x42, 0x31, 0x42, 0x51, 0x7e, 0x51, 0x42, 0x11, 0x42, 0x11, 0x7e, 0x11, 0x0, 0x11, 0xff },
{ 0x90, 0x42, 0x0, 0x10, 0x7e, 0x10, 0x11, 0xff, 0x10, 0x10, 0x10, 0x7e, 0x3d, 0x42, 0x25, 0x42, 0x25, 0x7e, 0x75, 0x42, 0x5d, 0x42, 0xd, 0x7e, 0x9, 0x42, 0x19, 0x42, 0x11, 0x7e, 0x31, 0x0, 0x61, 0xff },
{ 0x90, 0x43, 0x10, 0x0, 0x11, 0xff, 0x11, 0x49, 0x15, 0x49, 0x55, 0xff, 0x54, 0x80, 0x51, 0xff, 0x53, 0x21, 0x11, 0xfd, 0x11, 0x25, 0x39, 0xfd, 0x28, 0x21, 0x2c, 0x29, 0x24, 0x7b, 0x61, 0xca, 0x40, 0x6 },
{ 0x90, 0x44, 0x10, 0x88, 0x10, 0x8a, 0x33, 0xeb, 0x68, 0x9, 0x2a, 0x28, 0x19, 0x48, 0x17, 0xff, 0x28, 0x8, 0x7d, 0xea, 0x15, 0x2a, 0x11, 0x2e, 0x55, 0xe4, 0x55, 0x24, 0x55, 0x25, 0x11, 0xef, 0x10, 0x1a },
{ 0x90, 0x45, 0x0, 0x88, 0x7c, 0x8a, 0x2b, 0xeb, 0x28, 0x9, 0x2a, 0x28, 0x39, 0x48, 0x2f, 0xff, 0x28, 0x8, 0x2b, 0xea, 0x3a, 0x2a, 0x2a, 0x2e, 0x2b, 0xe4, 0x2a, 0x24, 0x3a, 0x25, 0x6b, 0xef, 0x8, 0x1a },
{ 0x90, 0x46, 0x4, 0x0, 0x7, 0xf0, 0xc, 0x10, 0x18, 0x20, 0x7f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x1, 0x18, 0x3, 0xf, 0xfe },
{ 0x90, 0x47, 0x10, 0x8, 0x1e, 0x8, 0x32, 0x8, 0x24, 0x7f, 0x7f, 0x49, 0x29, 0x49, 0x29, 0x49, 0x3f, 0x49, 0x29, 0x49, 0x29, 0x7f, 0x3f, 0x8, 0x21, 0x8, 0x21, 0xa, 0x21, 0xa, 0x61, 0x1f, 0x47, 0x71 },
{ 0x90, 0x48, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x9c, 0x70, 0x87, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xfa, 0x8, 0x46, 0x8, 0x6c, 0x8, 0x30, 0xf, 0x98, 0x38, 0xe },
{ 0x90, 0x49, 0x8, 0x10, 0x1c, 0x10, 0x16, 0x10, 0x32, 0xfe, 0x68, 0x92, 0x3e, 0x92, 0x22, 0x92, 0x3e, 0x92, 0x22, 0x92, 0x3e, 0xfe, 0x20, 0x10, 0x24, 0x12, 0x24, 0x12, 0x2e, 0x1e, 0x32, 0x73, 0x61, 0xc1 },
{ 0x90, 0x4a, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x17, 0xfc, 0x10, 0x0, 0x1f, 0xfe, 0x12, 0x44, 0x32, 0x6c, 0x23, 0xb8, 0x6e, 0xf, 0x0, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x6, 0x10, 0x2, 0x10, 0x0, 0x70 },
{ 0x90, 0x4b, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x80, 0x10, 0x80, 0x17, 0xf8, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x31, 0x88, 0x21, 0x9, 0x63, 0x9, 0xe, 0x7 },
{ 0x90, 0x4c, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0xb, 0xff, 0x1a, 0x21, 0x12, 0x21, 0x32, 0x21, 0x53, 0xff, 0x12, 0x21, 0x12, 0x21, 0x12, 0x21, 0x13, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x90, 0x4d, 0x4, 0x0, 0x4, 0xfc, 0xc, 0x0, 0xb, 0xff, 0x18, 0x0, 0x10, 0xfc, 0x30, 0x0, 0x50, 0x0, 0x10, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe },
{ 0x90, 0x4e, 0x4, 0x0, 0x5, 0xfc, 0xc, 0x4, 0x9, 0xfc, 0x18, 0x4, 0x11, 0xfc, 0x30, 0x0, 0x57, 0xff, 0x14, 0x1, 0x15, 0xfd, 0x10, 0x84, 0x10, 0xcc, 0x10, 0x58, 0x10, 0x70, 0x11, 0xdc, 0x17, 0x7 },
{ 0x90, 0x4f, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x17, 0xfc, 0x10, 0x0, 0x1f, 0xff, 0x12, 0x44, 0x12, 0x68, 0x32, 0x30, 0x23, 0xdc, 0x6e, 0x7, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x90, 0x50, 0x10, 0x0, 0x10, 0xff, 0x10, 0x80, 0x7e, 0x80, 0x12, 0xbe, 0x12, 0x80, 0x12, 0x80, 0x36, 0xff, 0x24, 0xa8, 0x24, 0xa9, 0x7c, 0xab, 0xa, 0xaa, 0x19, 0xac, 0x11, 0x24, 0x33, 0x36, 0x60, 0x63 },
{ 0x90, 0x51, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x29, 0xfa, 0x8, 0x8, 0x49, 0xf8, 0x68, 0x8, 0x29, 0xf8, 0x8, 0x0, 0xb, 0xfe, 0x3a, 0x2, 0x69, 0xf8, 0x8, 0x88, 0x8, 0x70, 0xb, 0x8f },
{ 0x90, 0x52, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x8, 0x88, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x4, 0x90, 0x1f, 0xfc, 0x68, 0x8b, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8 },
{ 0x90, 0x53, 0x0, 0x0, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x4, 0x20, 0x4, 0x0, 0x4, 0x0, 0x14, 0xc, 0x14, 0x6, 0x14, 0x2, 0x34, 0xb, 0x24, 0x9, 0x64, 0x18, 0x6, 0x10, 0x3, 0xf0, 0x0, 0x0 },
{ 0x90, 0x54, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x59, 0xfc, 0x55, 0x4, 0x55, 0xfc, 0x51, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6 },
{ 0x90, 0x55, 0x10, 0x0, 0x11, 0xff, 0x11, 0x0, 0x11, 0x0, 0x7d, 0x7e, 0x11, 0x0, 0x11, 0x0, 0x11, 0xff, 0x1d, 0x48, 0x71, 0x49, 0x11, 0x4b, 0x11, 0x4a, 0x13, 0x4c, 0x12, 0x44, 0x16, 0x76, 0x30, 0xc3 },
{ 0x90, 0x56, 0x4, 0x2, 0x4, 0xe, 0x7f, 0xb8, 0x21, 0x20, 0x33, 0x20, 0x12, 0x3f, 0x7f, 0xa4, 0x4, 0x24, 0x4, 0x24, 0x7f, 0xa4, 0x14, 0x24, 0x16, 0x24, 0x35, 0x64, 0x24, 0x44, 0x64, 0xc4, 0x4, 0x4 },
{ 0x90, 0x57, 0x0, 0x0, 0x3f, 0xfe, 0x2, 0x20, 0x12, 0x24, 0x1a, 0x2c, 0xa, 0x28, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x90, 0x58, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfe, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x38, 0x8e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0x7f, 0x4, 0x10, 0xe, 0x38, 0x15, 0x54, 0x34, 0xd6, 0x65, 0x93, 0x4, 0x10 },
{ 0x90, 0x59, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x7d, 0xfc, 0x10, 0x50, 0x1b, 0xff, 0x34, 0x88, 0x31, 0x34, 0x36, 0xe3, 0x50, 0x20, 0x53, 0xfe, 0x10, 0xa8, 0x11, 0xac, 0x13, 0x26, 0x16, 0x23, 0x10, 0x20 },
{ 0x90, 0x5a, 0x0, 0x0, 0x31, 0xfc, 0x18, 0x4, 0x9, 0xfc, 0x0, 0x4, 0x61, 0xfc, 0x30, 0x0, 0x17, 0xff, 0x4, 0x1, 0x5, 0xfd, 0x8, 0x84, 0x8, 0xcc, 0x18, 0x58, 0x10, 0x70, 0x31, 0xdc, 0x67, 0x7 },
{ 0x90, 0x5b, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x52, 0xa, 0x52, 0x0, 0xd0, 0x61, 0x9f, 0x33, 0x0, 0x10, 0x20, 0x0, 0x20, 0x7, 0xff, 0x8, 0xa8, 0x8, 0xa8, 0x19, 0xac, 0x13, 0x26, 0x36, 0x23, 0x60, 0x20 },
{ 0x90, 0x5c, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x90, 0x5d, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x40, 0x50, 0xe0, 0x31, 0xb0, 0x13, 0x1c, 0x1e, 0x27, 0x10, 0xe0, 0x33, 0x88, 0x50, 0x38, 0x10, 0xe2, 0x33, 0x86, 0x20, 0x1c, 0x60, 0xf0, 0x7, 0x80 },
{ 0x90, 0x5e, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x90, 0x5f, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0xfe, 0x2, 0x92, 0x6, 0x92, 0x4, 0x92, 0xc, 0xfe, 0x18, 0x92, 0x3e, 0x92, 0x6b, 0x92, 0x8, 0xfe, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x90, 0x60, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x1, 0x40, 0x7f, 0xff, 0x4, 0x10, 0x18, 0xec, 0x77, 0x87, 0x0, 0x80, 0x3f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x90, 0x61, 0x8, 0x8, 0x18, 0x8, 0x30, 0x8, 0x62, 0x7f, 0x36, 0x49, 0xc, 0x49, 0x18, 0x49, 0x32, 0x7f, 0x7f, 0x49, 0x9, 0x49, 0x8, 0x49, 0x2a, 0x7f, 0x2b, 0x8, 0x69, 0x8, 0x48, 0x8, 0x8, 0x8 },
{ 0x90, 0x62, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xfe, 0x0, 0x0 },
{ 0x90, 0x63, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60, 0x4, 0x20, 0x14, 0xc, 0x14, 0x6, 0x14, 0x3, 0x34, 0x1, 0x24, 0x8, 0x66, 0x18, 0x3, 0xf0 },
{ 0x90, 0x64, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x6, 0x3f, 0xbc, 0x11, 0x20, 0xa, 0x20, 0x7f, 0xbf, 0x4, 0x24, 0x7f, 0xa4, 0x15, 0x24, 0x15, 0x64, 0x35, 0x44, 0x64, 0xc4, 0x4, 0x4 },
{ 0x90, 0x65, 0x8, 0x0, 0x8, 0x7e, 0x7f, 0x42, 0x22, 0x42, 0x36, 0x7e, 0x14, 0x42, 0x7f, 0x42, 0x8, 0x7e, 0x8, 0x42, 0x7f, 0x42, 0x28, 0x7e, 0x2c, 0x28, 0x6a, 0x28, 0x49, 0x69, 0x48, 0x49, 0x8, 0xc7 },
{ 0x90, 0x66, 0x0, 0x10, 0x3c, 0x38, 0x0, 0x28, 0x7e, 0x6c, 0x0, 0xc6, 0x3d, 0x93, 0x0, 0x30, 0x0, 0x64, 0x3c, 0xcc, 0x0, 0x18, 0x0, 0x30, 0x3c, 0xe2, 0x24, 0x6, 0x24, 0xc, 0x24, 0x38, 0x3c, 0xe0 },
{ 0x90, 0x67, 0x0, 0x40, 0x0, 0x80, 0x7, 0xf8, 0x4, 0x8, 0x4, 0x8, 0x7, 0xf8, 0x4, 0x8, 0x4, 0x9, 0x7, 0xfb, 0x4, 0xe, 0x4, 0xc, 0x3f, 0xf8, 0x0, 0x68, 0x1, 0xc8, 0x7, 0x8, 0x3c, 0x38 },
{ 0x90, 0x68, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x90, 0x69, 0x0, 0x48, 0x30, 0xd8, 0x18, 0x90, 0x9, 0xfe, 0x3, 0x20, 0x5, 0x20, 0x1, 0xfc, 0x79, 0x20, 0x9, 0x20, 0x9, 0xfc, 0x9, 0x20, 0x9, 0x20, 0x9, 0xfe, 0x18, 0x0, 0x34, 0x0, 0x63, 0xff },
{ 0x90, 0x6a, 0x8, 0x10, 0x1c, 0x10, 0x16, 0x10, 0x33, 0x10, 0x20, 0x10, 0x7e, 0x10, 0x9, 0xff, 0x8, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x4a, 0x10, 0x6a, 0x10, 0x28, 0x10, 0xf, 0x10, 0x38, 0x10, 0x60, 0x10 },
{ 0x90, 0x6b, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0xe, 0xb8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x2f, 0xfc, 0x20, 0x0, 0x3f, 0xff, 0x64, 0x24, 0x47, 0x98, 0x1c, 0xf },
{ 0x90, 0x6c, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6, 0x60, 0x3 },
{ 0x90, 0x6d, 0x4, 0x0, 0x4, 0x0, 0xc, 0x0, 0x9, 0xfe, 0x18, 0x0, 0x10, 0x0, 0x30, 0x0, 0x50, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x13, 0xff, 0x10, 0x0, 0x10, 0x0 },
{ 0x90, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x1, 0x2, 0x1, 0x2, 0x19, 0x2, 0xd, 0x2, 0x7, 0x2, 0x2, 0x2, 0x7, 0x2, 0x5, 0x82, 0xc, 0x86, 0x18, 0x4, 0x30, 0x4, 0x60, 0x3c, 0x0, 0x0 },
{ 0x90, 0x6f, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x12, 0x20, 0x1f, 0xfe, 0x12, 0x22, 0x1f, 0xfe, 0x14, 0x20, 0x17, 0xa4, 0x34, 0x39, 0x27, 0xa3, 0x6c, 0x1e, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff },
{ 0x90, 0x70, 0x0, 0x6, 0x0, 0x1c, 0x0, 0xf0, 0x3f, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x90, 0x71, 0xf, 0xf8, 0x0, 0x8, 0xf, 0xf8, 0x0, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xbe, 0x4, 0x22, 0x7, 0xa2, 0x3c, 0x3e, 0x0, 0x8, 0x7f, 0xff, 0x4, 0x8, 0x6, 0x8, 0x2, 0x8, 0x0, 0x38 },
{ 0x90, 0x72, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x11, 0x20, 0x12, 0x20, 0x1c, 0x3e, 0x10, 0x0, 0x1f, 0xfe },
{ 0x90, 0x73, 0x0, 0x0, 0xf, 0xfc, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0xf, 0xfc, 0x8, 0x8, 0x8, 0x8, 0x9, 0x88, 0x18, 0xcc, 0x10, 0x64, 0x30, 0x6, 0x63, 0x3, 0x1, 0x80, 0x0, 0xc0, 0x0, 0x60 },
{ 0x90, 0x74, 0x0, 0x0, 0x3f, 0x7e, 0x24, 0x22, 0x3f, 0x36, 0x21, 0x14, 0x3f, 0x18, 0x24, 0x2c, 0x3f, 0x47, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x38 },
{ 0x90, 0x75, 0x0, 0x0, 0x3d, 0xfc, 0x0, 0x44, 0x7e, 0x44, 0x0, 0x44, 0x3c, 0x44, 0x0, 0x44, 0x1, 0xf4, 0x3c, 0x44, 0x0, 0x44, 0x0, 0x44, 0x3c, 0x44, 0x24, 0x44, 0x24, 0xc5, 0x24, 0x85, 0x3d, 0x83 },
{ 0x90, 0x76, 0x0, 0x0, 0x33, 0xf8, 0x18, 0x8, 0x8, 0x88, 0x0, 0x88, 0x0, 0x88, 0x0, 0x88, 0x7b, 0xf8, 0x8, 0x88, 0x8, 0x88, 0x8, 0x8c, 0x8, 0x85, 0x8, 0x87, 0x18, 0x82, 0x34, 0x0, 0x63, 0xff },
{ 0x90, 0x77, 0x0, 0x20, 0x3e, 0x20, 0x23, 0xff, 0x26, 0x20, 0x25, 0xfe, 0x2d, 0x22, 0x29, 0x22, 0x29, 0xfe, 0x25, 0x22, 0x25, 0x22, 0x25, 0xfe, 0x24, 0x20, 0x27, 0xff, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20 },
{ 0x90, 0x78, 0x22, 0x0, 0x22, 0xfe, 0x7f, 0x22, 0x22, 0x22, 0x22, 0xa2, 0x3e, 0x62, 0x8, 0x22, 0x7f, 0x22, 0x49, 0x32, 0x49, 0x2a, 0x7f, 0x2a, 0x8, 0x22, 0x7f, 0x62, 0x8, 0x46, 0x8, 0xc4, 0x9, 0x9c },
{ 0x90, 0x79, 0x8, 0x20, 0x8, 0x20, 0x1f, 0xfe, 0x34, 0x50, 0x66, 0x98, 0x2, 0x8, 0x3f, 0xfe, 0x0, 0x2, 0x1f, 0xe2, 0x0, 0x2, 0x1f, 0xe2, 0x10, 0x22, 0x10, 0x22, 0x1f, 0xe2, 0x0, 0x2, 0x0, 0xe },
{ 0x90, 0x7a, 0x0, 0x0, 0x3b, 0xfe, 0x1, 0x40, 0x7d, 0x40, 0x1, 0x7e, 0x39, 0xd2, 0x1, 0x52, 0x1, 0x56, 0x39, 0x54, 0x1, 0xdc, 0x1, 0x48, 0x39, 0x48, 0x29, 0x5c, 0x29, 0xd4, 0x2b, 0x66, 0x38, 0x43 },
{ 0x90, 0x7b, 0x4, 0x0, 0xd, 0xff, 0x18, 0x10, 0x30, 0xfe, 0x64, 0x82, 0xc, 0x82, 0x8, 0xfe, 0x18, 0x82, 0x32, 0x82, 0x66, 0xfe, 0x4, 0x82, 0xc, 0x82, 0x18, 0xfe, 0x30, 0x44, 0x60, 0xc6, 0x1, 0x83 },
{ 0x90, 0x7c, 0x0, 0x20, 0x7f, 0xa0, 0x14, 0x20, 0x14, 0x7f, 0x7f, 0x50, 0x55, 0x90, 0x55, 0x10, 0x55, 0x1e, 0x67, 0x10, 0x41, 0x10, 0x41, 0x10, 0x7f, 0x1e, 0x41, 0x10, 0x41, 0x10, 0x7f, 0x10, 0x0, 0x10 },
{ 0x90, 0x7d, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x21, 0x82, 0x2c, 0xca, 0x26, 0x4a, 0x22, 0x1a, 0x20, 0x12, 0x21, 0xb2, 0x20, 0x62, 0x20, 0xb2, 0x23, 0x9a, 0x2e, 0xa, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x90, 0x7e, 0x0, 0x0, 0x3f, 0xff, 0x20, 0x0, 0x20, 0x4, 0x3f, 0x84, 0x20, 0x4, 0x2f, 0x7f, 0x29, 0x4, 0x29, 0x24, 0x29, 0x34, 0x2f, 0x14, 0x20, 0x4, 0x69, 0x4, 0x49, 0x4, 0x47, 0x84, 0x1c, 0x1c },
{ 0x90, 0x80, 0x0, 0x0, 0x33, 0xfe, 0x18, 0x0, 0x9, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x79, 0xfc, 0x8, 0x0, 0x8, 0x88, 0x8, 0xd8, 0x8, 0x50, 0xb, 0xfe, 0x18, 0x0, 0x34, 0x0, 0x63, 0xff },
{ 0x90, 0x81, 0x0, 0x80, 0x0, 0x80, 0x78, 0x80, 0x49, 0xff, 0x49, 0x1, 0x4b, 0x23, 0x4e, 0x22, 0x48, 0x20, 0x48, 0x20, 0x48, 0x70, 0x48, 0x50, 0x78, 0xd8, 0x0, 0x88, 0x1, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x90, 0x82, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x90, 0x83, 0x4, 0x8, 0x8, 0x8, 0x3e, 0x8, 0x22, 0x7f, 0x22, 0x49, 0x22, 0x49, 0x3e, 0x49, 0x20, 0x49, 0x20, 0x49, 0x3e, 0x49, 0x22, 0x49, 0x22, 0x49, 0x22, 0x4b, 0x22, 0x8, 0x3e, 0x8, 0x0, 0x8 },
{ 0x90, 0x84, 0x10, 0x44, 0x10, 0xcc, 0x10, 0x88, 0x11, 0xff, 0x7b, 0x10, 0x15, 0x10, 0x11, 0x10, 0x11, 0xfe, 0x19, 0x10, 0x71, 0x10, 0x11, 0x10, 0x11, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x31, 0xff },
{ 0x90, 0x85, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x82, 0x7e, 0x86, 0x2, 0x8c, 0x2, 0xd8, 0x6, 0xc0, 0x4, 0xe0, 0xc, 0xa0, 0x8, 0xb0, 0x18, 0x98, 0x30, 0x8c, 0x60, 0x87, 0x0, 0x80, 0x3, 0x80 },
{ 0x90, 0x86, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x2a, 0x7f, 0x2e, 0xc1, 0x2c, 0x93, 0x69, 0x92, 0x48, 0x10, 0x8, 0x10, 0x8, 0x38, 0x1c, 0x28, 0x14, 0x28, 0x16, 0x6c, 0x33, 0x44, 0x20, 0xc6, 0x61, 0x83 },
{ 0x90, 0x87, 0x0, 0xc, 0x78, 0x38, 0x4b, 0xe0, 0x48, 0x20, 0x4b, 0xfe, 0x79, 0x24, 0x49, 0x24, 0x49, 0x24, 0x4f, 0xff, 0x79, 0x24, 0x49, 0x24, 0x49, 0x24, 0x4b, 0xfe, 0x78, 0x20, 0x0, 0x20, 0x7, 0xff },
{ 0x90, 0x88, 0x8, 0x20, 0x4a, 0x20, 0x6e, 0xfc, 0x2c, 0x24, 0x8, 0x64, 0x7e, 0x45, 0x8, 0xc5, 0x9, 0x83, 0x1c, 0x10, 0x1a, 0x10, 0x2a, 0xff, 0x28, 0x10, 0x48, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x90, 0x89, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x13, 0x26, 0xd, 0x1a, 0x31, 0x62, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0xa, 0x28, 0x31, 0x46, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x90, 0x8a, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x42, 0x6, 0x66, 0x1c, 0x2c, 0x74, 0x30, 0x4, 0x18, 0x7, 0xcc, 0x3c, 0x7 },
{ 0x90, 0x8b, 0x1, 0x4, 0x31, 0x8c, 0x18, 0x88, 0xb, 0xff, 0x0, 0x40, 0x0, 0x82, 0x3, 0x46, 0x78, 0x6c, 0x8, 0xb0, 0xb, 0x28, 0x8, 0x6c, 0x8, 0xa6, 0xb, 0x23, 0x18, 0xe0, 0x34, 0x0, 0x63, 0xff },
{ 0x90, 0x8c, 0x0, 0x20, 0x7f, 0x20, 0x14, 0xfc, 0x14, 0x24, 0x7f, 0x24, 0x55, 0x65, 0x55, 0x45, 0x55, 0xc3, 0x55, 0x10, 0x67, 0x10, 0x41, 0xff, 0x41, 0x10, 0x7f, 0x10, 0x41, 0x10, 0x41, 0x10, 0x7f, 0x10 },
{ 0x90, 0x8d, 0x8, 0x24, 0x1c, 0x2c, 0x16, 0x28, 0x33, 0x7f, 0x20, 0x48, 0x7e, 0xc8, 0x9, 0x48, 0x8, 0x7e, 0x7f, 0x48, 0x8, 0x48, 0x4a, 0x48, 0x6a, 0x7e, 0x28, 0x48, 0xf, 0x48, 0x38, 0x48, 0x60, 0x7f },
{ 0x90, 0x8e, 0x8, 0x6, 0x1c, 0x1c, 0x16, 0xf0, 0x33, 0x10, 0x20, 0xff, 0x7e, 0x52, 0x8, 0x52, 0x8, 0x52, 0x7e, 0xff, 0x8, 0x52, 0x4a, 0x52, 0x6a, 0x52, 0x28, 0xff, 0xe, 0x10, 0x38, 0x10, 0x60, 0xff },
{ 0x90, 0x8f, 0x0, 0x8, 0x3d, 0x8, 0x25, 0xbf, 0x24, 0x88, 0x24, 0x1e, 0x28, 0x12, 0x28, 0x32, 0x25, 0x9e, 0x24, 0x92, 0x24, 0x92, 0x24, 0x9e, 0x24, 0x92, 0x2c, 0x92, 0x21, 0x96, 0x23, 0x40, 0x26, 0x3f },
{ 0x90, 0x90, 0x0, 0x20, 0x1, 0x22, 0x7d, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x10, 0x0, 0x13, 0xff, 0x7c, 0x20, 0x10, 0x40, 0x11, 0xfe, 0x11, 0x52, 0x11, 0x52, 0x1d, 0x52, 0x71, 0x52, 0x1, 0x52, 0x1, 0x56 },
{ 0x90, 0x91, 0x3e, 0x8, 0x22, 0x88, 0x2e, 0xff, 0x2a, 0x48, 0x2a, 0x1e, 0x7f, 0x12, 0x41, 0x32, 0x3e, 0xde, 0x22, 0x52, 0x3e, 0x52, 0x22, 0x5e, 0x3e, 0x52, 0x22, 0x52, 0x22, 0x56, 0x22, 0xe0, 0x26, 0x9f },
{ 0x90, 0x92, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x8, 0x88, 0x18, 0x8c, 0x70, 0x87, 0x3, 0x80 },
{ 0x90, 0x93, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf6 },
{ 0x90, 0x94, 0x4, 0x10, 0x24, 0x90, 0x35, 0x90, 0x15, 0x3f, 0x7f, 0xa2, 0x14, 0x62, 0x17, 0x12, 0x35, 0x96, 0x64, 0x94, 0x8, 0x14, 0x7f, 0xcc, 0x11, 0x8, 0x13, 0x18, 0x3e, 0x14, 0xb, 0x36, 0x71, 0x63 },
{ 0x90, 0x95, 0x10, 0x0, 0x11, 0xff, 0x11, 0x0, 0x7d, 0x0, 0x11, 0x2, 0x11, 0x66, 0x39, 0x34, 0x35, 0x1c, 0x35, 0x8, 0x51, 0x1c, 0x51, 0x36, 0x11, 0x62, 0x11, 0x0, 0x11, 0x0, 0x11, 0xff, 0x10, 0x0 },
{ 0x90, 0x96, 0x8, 0x80, 0x8, 0xfe, 0x3e, 0x22, 0x8, 0xaa, 0x8, 0xfa, 0x7f, 0x26, 0x8, 0x4c, 0x8, 0x80, 0x28, 0xfe, 0x2e, 0x22, 0x28, 0xaa, 0x28, 0xfa, 0x28, 0x26, 0x38, 0xcc, 0x6e, 0x0, 0x43, 0xff },
{ 0x90, 0x97, 0x10, 0x12, 0x3f, 0x96, 0x48, 0x94, 0x2a, 0xbf, 0x2a, 0xa4, 0x3e, 0xe4, 0x11, 0xa4, 0x23, 0x3e, 0x10, 0x24, 0x3f, 0xa4, 0x48, 0xa4, 0x2a, 0xbe, 0x2a, 0xa4, 0x3e, 0xa4, 0x11, 0xa4, 0x23, 0x3f },
{ 0x90, 0x98, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x7d, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x11, 0xff, 0x1d, 0x10, 0x71, 0x10, 0x11, 0x7e, 0x11, 0x42, 0x13, 0x42, 0x12, 0x42, 0x16, 0x42, 0x30, 0x7e },
{ 0x90, 0x99, 0x8, 0x4, 0x8, 0xc, 0x8, 0x18, 0x7e, 0x30, 0x8, 0xe2, 0x8, 0x6, 0x1c, 0xc, 0x1a, 0x18, 0x1a, 0x30, 0x28, 0xe1, 0x28, 0x3, 0x48, 0x6, 0x8, 0xc, 0x8, 0x18, 0x8, 0x70, 0x9, 0xc0 },
{ 0x90, 0x9a, 0x8, 0x0, 0x8, 0xfc, 0x8, 0x84, 0x7e, 0x84, 0x8, 0xfc, 0x8, 0x84, 0x1c, 0x84, 0x1a, 0xfc, 0x1a, 0x0, 0x29, 0xfe, 0x29, 0x2, 0x49, 0x2, 0x9, 0xfe, 0x9, 0x2, 0x9, 0x2, 0x9, 0xfe },
{ 0x90, 0x9b, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x0, 0x7, 0xf8, 0x4, 0x8, 0x4, 0x8, 0x7, 0xf8 },
{ 0x90, 0x9c, 0x4, 0x0, 0x4, 0x7f, 0x4, 0x8, 0x3f, 0xbe, 0x24, 0xa2, 0x24, 0x22, 0x3f, 0x3e, 0x21, 0x22, 0x33, 0x22, 0x2a, 0x3e, 0x2e, 0x22, 0x24, 0x22, 0x6e, 0x3e, 0x4b, 0x14, 0x19, 0x36, 0x0, 0x63 },
{ 0x90, 0x9d, 0x0, 0x80, 0x8, 0x98, 0x8, 0x8c, 0x18, 0x96, 0x30, 0xb2, 0x63, 0xe0, 0x0, 0xc8, 0x3, 0x10, 0xf, 0xfe, 0x78, 0x40, 0xf, 0xfc, 0x8, 0x40, 0xf, 0xfc, 0x8, 0x40, 0x8, 0x40, 0xf, 0xff },
{ 0x90, 0x9e, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x7d, 0x2, 0x5, 0xfe, 0xd, 0x10, 0x9, 0x10, 0x1b, 0xff, 0x15, 0x10, 0x39, 0x10, 0x55, 0x7e, 0x15, 0x42, 0x13, 0x42, 0x12, 0x42, 0x16, 0x42, 0x10, 0x7e },
{ 0x90, 0x9f, 0x0, 0x4, 0x23, 0xe8, 0x34, 0x51, 0x12, 0x8a, 0x1, 0x4, 0x46, 0xfb, 0x60, 0x0, 0x21, 0xfc, 0x1, 0x4, 0x9, 0x4, 0x9, 0xfc, 0x18, 0x0, 0x11, 0x4, 0x31, 0x8c, 0x20, 0x88, 0x67, 0xff },
{ 0x90, 0xa0, 0x10, 0x0, 0x17, 0xdf, 0x12, 0x49, 0x11, 0x45, 0x78, 0x41, 0x11, 0xc7, 0x16, 0x59, 0x10, 0x41, 0x18, 0x20, 0x71, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x31, 0xfe },
{ 0x90, 0xa1, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x7f, 0xff, 0x0, 0x10, 0x0, 0x10, 0xc, 0x10, 0x6, 0x10, 0x3, 0x10, 0x1, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x70 },
{ 0x90, 0xa2, 0x0, 0x0, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x7f, 0xff, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0xf8, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfe, 0x0, 0x0 },
{ 0x90, 0xa3, 0x1, 0x0, 0x21, 0x3f, 0x37, 0xc8, 0x11, 0x1e, 0x7, 0xd2, 0x45, 0x52, 0x65, 0x5e, 0x25, 0x52, 0x7, 0xd2, 0x11, 0x1e, 0x13, 0x12, 0x13, 0x92, 0x35, 0x5e, 0x25, 0x48, 0x29, 0x12, 0x61, 0x21 },
{ 0x90, 0xa4, 0x8, 0x20, 0x8, 0x20, 0x8, 0x3c, 0x7f, 0xa4, 0x0, 0x64, 0x3f, 0x44, 0x29, 0xcc, 0x29, 0x8, 0x29, 0x8, 0x3f, 0x8, 0x29, 0x1c, 0x29, 0x14, 0x29, 0x34, 0x3f, 0x26, 0x0, 0x62, 0x0, 0xc3 },
{ 0x90, 0xa5, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x1c, 0x80, 0x16, 0x80, 0x33, 0x80, 0x60, 0xff },
{ 0x90, 0xa6, 0x0, 0x20, 0x0, 0x20, 0x67, 0xff, 0x30, 0x20, 0x13, 0xfe, 0x0, 0x22, 0x7, 0xff, 0x0, 0x22, 0x13, 0xfe, 0x10, 0x40, 0x17, 0xff, 0x30, 0x84, 0x21, 0x8, 0x23, 0xf0, 0x60, 0x5e, 0x7, 0x83 },
{ 0x90, 0xa7, 0x4, 0x2, 0x14, 0x12, 0x14, 0x12, 0x3f, 0xd2, 0x64, 0x12, 0x4, 0x12, 0x7f, 0xf2, 0x4, 0x12, 0x4, 0x12, 0x3f, 0xd2, 0x24, 0x52, 0x24, 0x52, 0x24, 0x42, 0x24, 0x42, 0x24, 0xc2, 0x4, 0xe },
{ 0x90, 0xa8, 0x8, 0x10, 0x3f, 0x10, 0x8, 0x10, 0x7f, 0xfc, 0x12, 0x14, 0x2b, 0x94, 0x48, 0x74, 0x3f, 0x24, 0x8, 0x35, 0xf, 0x55, 0x78, 0x3, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x2, 0x6, 0x6, 0x78, 0x1c },
{ 0x90, 0xa9, 0x10, 0x10, 0x10, 0x90, 0x10, 0x90, 0x10, 0x90, 0x7c, 0xfe, 0x15, 0x90, 0x15, 0x10, 0x24, 0x10, 0x2c, 0x10, 0x28, 0xfe, 0x48, 0x10, 0x78, 0x10, 0x14, 0x10, 0x14, 0x10, 0x31, 0xff, 0x60, 0x0 },
{ 0x90, 0xaa, 0x4, 0x0, 0xd, 0xfe, 0x8, 0x20, 0x18, 0x20, 0x30, 0x20, 0x65, 0x20, 0xd, 0x20, 0x9, 0x3e, 0x19, 0x20, 0x39, 0x20, 0x69, 0x20, 0x9, 0x20, 0x9, 0x20, 0x9, 0x20, 0xb, 0xff, 0x8, 0x0 },
{ 0x90, 0xab, 0x10, 0x20, 0x11, 0x20, 0x11, 0x20, 0x19, 0x20, 0x55, 0xfe, 0x53, 0x20, 0x52, 0x20, 0x50, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x90, 0xac, 0x0, 0x48, 0x0, 0x4c, 0x0, 0x44, 0x1f, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x1f, 0x42, 0x11, 0x66, 0x11, 0x24, 0x11, 0x2c, 0x11, 0x38, 0x11, 0x10, 0x13, 0x39, 0x32, 0x6b, 0x26, 0xce, 0x61, 0x84 },
{ 0x90, 0xad, 0x0, 0x40, 0x0, 0x40, 0x7f, 0x40, 0x8, 0x7f, 0x8, 0xc4, 0x8, 0x84, 0x29, 0xc4, 0x2e, 0x4c, 0x28, 0x68, 0x28, 0x38, 0x28, 0x10, 0x28, 0x38, 0x2f, 0x28, 0x38, 0x6c, 0x60, 0xc6, 0x1, 0x83 },
{ 0x90, 0xae, 0x8, 0x20, 0x7f, 0xa0, 0x8, 0x3f, 0x3f, 0x64, 0x29, 0xc4, 0x29, 0x2c, 0x3f, 0x18, 0x1a, 0x34, 0x2b, 0x66, 0x49, 0x3, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x8, 0xf8, 0x8, 0x80, 0x7f, 0xff },
{ 0x90, 0xaf, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x8, 0x80, 0xf, 0xfc, 0x18, 0x80, 0x30, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff },
{ 0x90, 0xb0, 0x0, 0x20, 0x0, 0x20, 0x79, 0xfe, 0x48, 0x20, 0x48, 0xfc, 0x48, 0x20, 0x7b, 0xff, 0x48, 0x0, 0x48, 0xfc, 0x48, 0x84, 0x48, 0xfc, 0x78, 0x84, 0x0, 0xfc, 0x0, 0x84, 0x0, 0x84, 0x0, 0x9c },
{ 0x90, 0xb1, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x7c, 0x20, 0x11, 0xfe, 0x10, 0x22, 0x33, 0xff, 0x38, 0x22, 0x35, 0xfe, 0x50, 0x20, 0x53, 0xff, 0x10, 0x44, 0x10, 0x8c, 0x11, 0xf8, 0x10, 0x2e, 0x13, 0xc3 },
{ 0x90, 0xb2, 0x8, 0x0, 0x9, 0xff, 0x8, 0x28, 0x7e, 0x28, 0x9, 0xff, 0x9, 0x29, 0x1d, 0x29, 0x1b, 0x29, 0x19, 0x29, 0x29, 0x49, 0x29, 0x87, 0x49, 0x1, 0x9, 0x1, 0x9, 0x1, 0x9, 0xff, 0x8, 0x0 },
{ 0x90, 0xb3, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x90, 0xb4, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xfe, 0x8, 0x20, 0x1, 0xfc, 0x60, 0x20, 0x37, 0xff, 0x10, 0x0, 0x1, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x19, 0x4, 0x11, 0xfc, 0x31, 0x4, 0x21, 0x4, 0x61, 0x1c },
{ 0x90, 0xb5, 0x8, 0x20, 0x29, 0x20, 0x29, 0x20, 0x29, 0x20, 0x3d, 0xfe, 0x6b, 0x20, 0x4a, 0x20, 0x8, 0x20, 0xc, 0x20, 0x39, 0xfc, 0x68, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0xb, 0xff, 0x8, 0x0 },
{ 0x90, 0xb6, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xfe, 0x10, 0x80, 0x30, 0x80, 0x60, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x90, 0xb7, 0x0, 0x28, 0x0, 0x24, 0x1f, 0xfe, 0x10, 0x20, 0x1f, 0x32, 0x11, 0x14, 0x11, 0x8, 0x31, 0x1d, 0x27, 0x67, 0x60, 0x2, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x90, 0xb8, 0x8, 0x20, 0xa, 0x20, 0x4b, 0xfe, 0x6a, 0x20, 0x28, 0xfc, 0x8, 0x20, 0x7f, 0xff, 0x8, 0x0, 0x1c, 0xfc, 0x1a, 0x84, 0x2a, 0xfc, 0x28, 0x84, 0x48, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x8, 0x9c },
{ 0x90, 0xb9, 0x7f, 0x0, 0x22, 0x7e, 0x3e, 0x42, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x42, 0x22, 0x42, 0x22, 0x7e, 0x7e, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff },
{ 0x90, 0xba, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x0, 0x60, 0x0 },
{ 0x90, 0xbb, 0x14, 0x2, 0x1f, 0x92, 0x24, 0x12, 0x7f, 0xd2, 0x4, 0x12, 0x3f, 0x92, 0x24, 0x82, 0x24, 0x82, 0x25, 0x8e, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x44, 0x6, 0x68, 0x7c, 0x30, 0x7, 0x9c, 0x1c, 0x7 },
{ 0x90, 0xbc, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x2c, 0x32, 0x38, 0x1e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x90, 0xbd, 0x0, 0xa, 0x38, 0x9, 0x0, 0x8, 0x7d, 0xff, 0x1, 0x8, 0x39, 0x8, 0x1, 0xe8, 0x1, 0x2a, 0x39, 0x2a, 0x1, 0x2a, 0x1, 0x2c, 0x39, 0x24, 0x29, 0x64, 0x29, 0xd, 0x29, 0x17, 0x3a, 0x62 },
{ 0x90, 0xbe, 0x8, 0x6, 0x7f, 0x7c, 0x8, 0x40, 0x7f, 0x7f, 0x8, 0x84, 0x1b, 0xe4, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc },
{ 0x90, 0xbf, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7e, 0x10, 0x0, 0xfe, 0x3c, 0x10, 0x1, 0xff, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x82, 0x0, 0xfe, 0x3c, 0x82, 0x24, 0xfe, 0x24, 0x82, 0x24, 0x82, 0x3c, 0x8e },
{ 0x90, 0xc0, 0x1, 0x6, 0x31, 0x3c, 0x19, 0x20, 0x9, 0x20, 0x7, 0xbf, 0x1, 0x24, 0x1, 0x24, 0x71, 0xa4, 0x17, 0x24, 0x11, 0x24, 0x11, 0x64, 0x11, 0x44, 0x11, 0xc4, 0x33, 0x4, 0x28, 0x0, 0x67, 0xff },
{ 0x90, 0xc1, 0x0, 0x0, 0x7f, 0x7e, 0x14, 0x42, 0x14, 0x7e, 0x7f, 0x42, 0x55, 0x42, 0x55, 0x7e, 0x55, 0x10, 0x67, 0x50, 0x41, 0x7e, 0x41, 0x90, 0x7f, 0x10, 0x41, 0x7e, 0x41, 0x10, 0x7f, 0x10, 0x0, 0xff },
{ 0x90, 0xc2, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x90, 0xc3, 0x8, 0x20, 0x8, 0x3c, 0x7f, 0x44, 0x8, 0x88, 0x3e, 0x7e, 0x8, 0x12, 0x7f, 0x12, 0x0, 0xff, 0x3e, 0x12, 0x22, 0x12, 0x3e, 0x7e, 0x22, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x22, 0x10, 0x26, 0x70 },
{ 0x90, 0xc4, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x10, 0x3, 0x60, 0x1, 0xc0, 0xf, 0x78, 0x78, 0xf, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x18, 0x8, 0x30, 0x8, 0x60, 0x8 },
{ 0x90, 0xc5, 0x2, 0x82, 0xe, 0xc6, 0x78, 0x44, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x8, 0x82, 0x8, 0x82, 0x1c, 0xfe, 0x1a, 0x28, 0x2a, 0x28, 0x28, 0x28, 0x48, 0x68, 0x8, 0x49, 0x8, 0xc9, 0x9, 0x87 },
{ 0x90, 0xc6, 0x0, 0x20, 0x3c, 0x3e, 0x24, 0x44, 0x24, 0x88, 0x25, 0xff, 0x3c, 0x80, 0x24, 0x80, 0x24, 0xbc, 0x24, 0xa4, 0x3c, 0xa4, 0x24, 0xa4, 0x24, 0xac, 0x24, 0xa0, 0x24, 0xa1, 0x65, 0x33, 0x4c, 0x1e },
{ 0x90, 0xc7, 0x4, 0x20, 0x8, 0x40, 0x1f, 0xfe, 0x30, 0x80, 0x5f, 0xfc, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xff, 0x0, 0x0, 0x3f, 0xfc, 0x4, 0x8, 0x3, 0x30, 0x0, 0xc0, 0x7, 0x38, 0x7c, 0xf },
{ 0x90, 0xc8, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x11, 0x8, 0x17, 0xfe, 0x11, 0x8, 0x11, 0x8, 0x11, 0xf8, 0x10, 0x40, 0x17, 0xfe, 0x14, 0x42, 0x34, 0x42, 0x24, 0x42, 0x64, 0x4e, 0x0, 0x40 },
{ 0x90, 0xc9, 0x8, 0x48, 0x8, 0x48, 0x9, 0xfe, 0xc, 0x48, 0x2a, 0x48, 0x28, 0x48, 0x2b, 0xff, 0x68, 0x0, 0x48, 0x0, 0x8, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x8, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x8, 0xfc },
{ 0x90, 0xca, 0x0, 0x24, 0x0, 0x26, 0x0, 0x22, 0x3f, 0xff, 0x20, 0x20, 0x24, 0x20, 0x27, 0xa2, 0x24, 0x32, 0x3f, 0xd6, 0x22, 0x14, 0x2a, 0x9c, 0x2a, 0x88, 0x2a, 0xc8, 0x6a, 0x5d, 0x46, 0x37, 0x40, 0x62 },
{ 0x90, 0xcb, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xff, 0x10, 0x40, 0x10, 0x40, 0x13, 0x40, 0x11, 0xf0, 0x10, 0x5c, 0x30, 0x46, 0x20, 0x40, 0x60, 0x40, 0x0, 0x40, 0x0, 0x40 },
{ 0x90, 0xcc, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x90, 0xcd, 0x8, 0x6, 0x8, 0x1c, 0x8, 0xf0, 0x7e, 0x80, 0x8, 0x80, 0x8, 0xff, 0x1c, 0x88, 0x1a, 0x88, 0x1a, 0x88, 0x28, 0x88, 0x28, 0x88, 0x48, 0x88, 0x9, 0x88, 0x9, 0x8, 0xb, 0x8, 0x8, 0x8 },
{ 0x90, 0xce, 0x0, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x3, 0x0, 0x2, 0x0, 0x6, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x1c, 0x4, 0x34, 0x4, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc, 0x0, 0x0 },
{ 0x90, 0xcf, 0x4, 0x10, 0x1d, 0xff, 0x70, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x0, 0x10, 0xfe, 0x38, 0x82, 0x34, 0xfe, 0x34, 0x82, 0x50, 0xfe, 0x50, 0x82, 0x10, 0xfe, 0x10, 0x44, 0x11, 0x83 },
{ 0x90, 0xd0, 0x10, 0x10, 0x1f, 0xbf, 0x24, 0x44, 0x42, 0x2, 0x8, 0x24, 0x3e, 0xff, 0x8, 0x24, 0x3e, 0x24, 0x8, 0xff, 0x7f, 0x0, 0x8, 0x7e, 0x1c, 0x42, 0x1a, 0x7e, 0x29, 0x42, 0x48, 0x42, 0x8, 0x7e },
{ 0x90, 0xd1, 0x8, 0x10, 0x19, 0xff, 0x10, 0x10, 0x64, 0xfe, 0x2c, 0x10, 0x19, 0xff, 0x10, 0x0, 0x24, 0xfe, 0x7e, 0x82, 0xa, 0xfe, 0x8, 0x82, 0x2a, 0xfe, 0x2a, 0x82, 0x6a, 0xfe, 0x48, 0x44, 0x9, 0x83 },
{ 0x90, 0xd2, 0x0, 0x80, 0x0, 0x80, 0x3d, 0x9e, 0x1, 0x40, 0x3a, 0x2e, 0x4, 0x10, 0x1f, 0xfc, 0x68, 0xb, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x90, 0xd3, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x90, 0xd4, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x12, 0x24, 0x12, 0x26, 0x32, 0x22, 0x22, 0x23, 0x66, 0x21, 0x4, 0x20, 0xc, 0x20, 0x18, 0xe0 },
{ 0x90, 0xd5, 0x0, 0x20, 0x3e, 0x20, 0x22, 0x20, 0x23, 0xff, 0x22, 0x48, 0x22, 0x48, 0x3e, 0x48, 0x9, 0x4a, 0x29, 0x4a, 0x2f, 0x4b, 0x2a, 0x49, 0x28, 0x48, 0x28, 0xc8, 0x2e, 0x88, 0x39, 0x88, 0x63, 0x38 },
{ 0x90, 0xd6, 0x0, 0x10, 0x3e, 0xff, 0x22, 0x10, 0x22, 0x7e, 0x22, 0x10, 0x22, 0xff, 0x3e, 0x0, 0x8, 0x7e, 0x28, 0x42, 0x2e, 0x7e, 0x28, 0x42, 0x28, 0x7e, 0x28, 0x42, 0x2e, 0x7e, 0x38, 0x24, 0x60, 0xc3 },
{ 0x90, 0xd7, 0x0, 0x0, 0x7e, 0xff, 0x8, 0x10, 0x8, 0x7e, 0x18, 0x42, 0x10, 0x42, 0x1e, 0x7e, 0x32, 0x42, 0x32, 0x42, 0x52, 0x7e, 0x12, 0x42, 0x12, 0x42, 0x12, 0x7e, 0x1e, 0x24, 0x0, 0x66, 0x0, 0xc3 },
{ 0x90, 0xd8, 0x10, 0x0, 0x11, 0xfe, 0x10, 0x22, 0x10, 0x22, 0x13, 0x22, 0x1e, 0x22, 0x70, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x62, 0x11, 0x42, 0x13, 0x42, 0xe, 0xc6, 0x0, 0x84, 0x1, 0x84, 0x3, 0x1c },
{ 0x90, 0xd9, 0x10, 0x20, 0x10, 0x20, 0x12, 0x22, 0x12, 0x22, 0x7a, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x18, 0x20, 0x70, 0x20, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x30, 0x0 },
{ 0x90, 0xda, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x11, 0x4, 0x79, 0x8c, 0x10, 0x88, 0x17, 0xff, 0x10, 0x40, 0x18, 0x40, 0x77, 0xff, 0x10, 0x84, 0x11, 0xc, 0x13, 0xd8, 0x10, 0x70, 0x11, 0xce, 0x37, 0x3 },
{ 0x90, 0xdb, 0x10, 0x0, 0x13, 0xff, 0x10, 0x84, 0x10, 0xfc, 0x7c, 0x84, 0x10, 0xfc, 0x10, 0x84, 0x13, 0xff, 0x1c, 0x4, 0x70, 0x0, 0x11, 0x86, 0x10, 0xcc, 0x10, 0x0, 0x10, 0xcc, 0x11, 0x86, 0x33, 0x3 },
{ 0x90, 0xdc, 0x10, 0x6, 0x10, 0x1c, 0x11, 0xf0, 0x11, 0x0, 0x7d, 0x0, 0x11, 0xff, 0x11, 0x8, 0x11, 0x8, 0x1d, 0x8, 0x71, 0x8, 0x11, 0x8, 0x11, 0x8, 0x13, 0x8, 0x12, 0x8, 0x16, 0x8, 0x30, 0x8 },
{ 0x90, 0xdd, 0x0, 0x0, 0x3c, 0x7c, 0x0, 0x44, 0x7e, 0x44, 0x0, 0x44, 0x3c, 0xc4, 0x1, 0x87, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x42, 0x0, 0x66, 0x3c, 0x2c, 0x24, 0x18, 0x24, 0x30, 0x24, 0x6c, 0x3d, 0xc7 },
{ 0x90, 0xde, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0x1c, 0x3f, 0x70, 0x0, 0x10, 0x0, 0x11, 0xfe, 0x1e, 0x22, 0x70, 0x22, 0x10, 0x22, 0x12, 0x62, 0xe, 0x46, 0x0, 0xc4, 0x1, 0x9c },
{ 0x90, 0xdf, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x28, 0x48, 0x44, 0x84, 0x0, 0x0, 0x3f, 0x3e, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x20, 0x22, 0x22, 0x22, 0x3f, 0x2e, 0x61, 0x20, 0x0, 0x20 },
{ 0x90, 0xe0, 0x0, 0x82, 0x3c, 0xc6, 0x0, 0x44, 0x7e, 0x0, 0x0, 0xfe, 0x3c, 0x82, 0x0, 0x82, 0x0, 0x82, 0x3c, 0xfe, 0x0, 0x48, 0x0, 0x48, 0x3c, 0x48, 0x24, 0x48, 0x24, 0xc9, 0x24, 0x89, 0x3d, 0x87 },
{ 0x90, 0xe1, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x40, 0x81, 0x1e, 0xbc, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc },
{ 0x90, 0xe2, 0x8, 0x40, 0x18, 0x7c, 0x10, 0x44, 0x64, 0xcc, 0x2d, 0x88, 0x18, 0xfe, 0x10, 0x92, 0x24, 0x92, 0x7e, 0x92, 0xa, 0xfe, 0x8, 0x80, 0x2a, 0x80, 0x2a, 0x80, 0x6a, 0x81, 0x48, 0xc3, 0x8, 0x7e },
{ 0x90, 0xe3, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x90, 0xe4, 0x11, 0x22, 0x11, 0xb6, 0x10, 0x94, 0x7c, 0xfe, 0x54, 0x92, 0x54, 0x92, 0x54, 0xfe, 0x54, 0x92, 0x54, 0x92, 0x7c, 0xfe, 0x10, 0x10, 0x14, 0x10, 0x15, 0xff, 0x3e, 0x10, 0x62, 0x10, 0x0, 0x10 },
{ 0x90, 0xe5, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x1a, 0x22, 0x12, 0x22, 0x32, 0x22, 0x52, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x0 },
{ 0x90, 0xe6, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0xf, 0xfc, 0x18, 0x80, 0x30, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x90, 0xe7, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x90, 0xe8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x90, 0xe9, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x90, 0xea, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x6, 0x10, 0x2, 0x10, 0x0, 0x70 },
{ 0x90, 0xeb, 0x0, 0x80, 0x0, 0x80, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80, 0x3, 0x80, 0x0, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x90, 0xec, 0x0, 0x2, 0x10, 0x2, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x30, 0x82, 0x20, 0x2, 0x60, 0x2, 0x0, 0x2 },
{ 0x90, 0xed, 0x48, 0x54, 0x6c, 0xd6, 0x24, 0x92, 0x3f, 0x90, 0x24, 0x9f, 0x24, 0xf0, 0x3f, 0x92, 0x24, 0x92, 0x24, 0x96, 0x3f, 0x94, 0x4, 0x1c, 0x4, 0x8, 0x7f, 0xdc, 0x4, 0x14, 0x4, 0x36, 0x4, 0xe3 },
{ 0x90, 0xee, 0x0, 0x0, 0x3f, 0xff, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x17, 0xbe, 0x10, 0x82, 0x14, 0xa2, 0x12, 0x92, 0x31, 0x8e, 0x26, 0x9a, 0x6c, 0xb2, 0x1, 0x86 },
{ 0x90, 0xef, 0x10, 0x0, 0x13, 0xdf, 0x10, 0x41, 0x13, 0xdf, 0x7e, 0x10, 0x12, 0x51, 0x11, 0xcf, 0x10, 0x0, 0x1c, 0x48, 0x71, 0xfe, 0x10, 0x48, 0x10, 0x48, 0x13, 0xff, 0x10, 0x48, 0x10, 0xcc, 0x33, 0x87 },
{ 0x90, 0xf0, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x7d, 0x8c, 0x13, 0x6, 0x16, 0x3, 0x31, 0xfc, 0x38, 0x20, 0x34, 0x20, 0x54, 0x20, 0x51, 0xfc, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x90, 0xf1, 0x8, 0x80, 0x8, 0x80, 0x9, 0xff, 0x7f, 0x0, 0xa, 0x0, 0x8, 0xfe, 0x18, 0x92, 0x1c, 0x92, 0x1a, 0x92, 0x2a, 0x92, 0x29, 0xff, 0x48, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0x8e },
{ 0x90, 0xf2, 0x0, 0x40, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x82, 0x3e, 0xc6, 0x2, 0xac, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x3, 0x80 },
{ 0x90, 0xf3, 0x0, 0x28, 0x30, 0x24, 0x1b, 0xff, 0x8, 0x20, 0x0, 0x20, 0x61, 0xfe, 0x30, 0x20, 0x10, 0x20, 0x3, 0xff, 0x8, 0x20, 0x8, 0x32, 0x18, 0x16, 0x10, 0x1c, 0x30, 0x39, 0x20, 0xed, 0x67, 0x87 },
{ 0x90, 0xf4, 0x0, 0x20, 0x31, 0x20, 0x19, 0x20, 0x9, 0xfe, 0x3, 0x20, 0x66, 0x20, 0x30, 0x20, 0x17, 0xff, 0x0, 0x88, 0x8, 0x88, 0x8, 0x88, 0x18, 0x88, 0x11, 0x88, 0x31, 0x9, 0x23, 0x9, 0x66, 0x7 },
{ 0x90, 0xf5, 0x0, 0x40, 0x18, 0x40, 0xd, 0xf8, 0x60, 0x48, 0x30, 0x48, 0x0, 0xc8, 0xc, 0x89, 0x39, 0x89, 0x63, 0x7, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x90, 0xf6, 0x1, 0x4, 0x21, 0x4, 0x37, 0xdf, 0x11, 0x4, 0x7, 0xdf, 0x41, 0x4, 0x62, 0x8a, 0x24, 0x51, 0x0, 0x0, 0xb, 0xfe, 0xa, 0x2, 0x1a, 0x2, 0x13, 0xfe, 0x32, 0x2, 0x22, 0x2, 0x63, 0xfe },
{ 0x90, 0xf7, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0x4, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x4, 0x11, 0x4, 0x13, 0x1c, 0x0, 0x0, 0x12, 0x24, 0x33, 0x36, 0x61, 0x13 },
{ 0x90, 0xf8, 0x10, 0x0, 0x13, 0xff, 0x10, 0x0, 0x55, 0xfe, 0x55, 0x2, 0x55, 0x2, 0x55, 0xfe, 0x11, 0x0, 0x11, 0xff, 0x11, 0x11, 0x39, 0x99, 0x2d, 0x55, 0x27, 0x33, 0x62, 0x55, 0x46, 0x99, 0x0, 0x33 },
{ 0x90, 0xf9, 0x8, 0x40, 0x8, 0x40, 0x8, 0xff, 0x7f, 0x80, 0x11, 0x0, 0x10, 0xff, 0x1e, 0x12, 0x12, 0x14, 0x12, 0x50, 0x12, 0x50, 0x12, 0x5e, 0x12, 0x50, 0x32, 0x50, 0x26, 0x70, 0x24, 0xdc, 0x6d, 0x87 },
{ 0x90, 0xfa, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0x1c, 0x3f, 0x70, 0x0, 0x1f, 0xfc, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x90, 0x3, 0x90, 0xe, 0x10, 0x78, 0x70 },
{ 0x90, 0xfb, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x44, 0x88, 0x8, 0x4, 0x4, 0x8, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0x4, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x4, 0x11, 0x4, 0x13, 0x1c },
{ 0x90, 0xfc, 0x8, 0x10, 0x18, 0x20, 0x30, 0xfe, 0x62, 0x82, 0x36, 0xfe, 0xc, 0x82, 0x18, 0x82, 0x32, 0xfe, 0x7e, 0x11, 0xb, 0xd3, 0x8, 0x5a, 0x2a, 0x5c, 0x2a, 0xd4, 0x6a, 0x96, 0x49, 0x93, 0x8, 0x30 },
{ 0x91, 0x40, 0x10, 0x88, 0x30, 0x8a, 0x23, 0xeb, 0x68, 0x89, 0x28, 0x88, 0x1f, 0xff, 0x11, 0x48, 0x29, 0x4a, 0x7d, 0x5a, 0x13, 0x6a, 0x11, 0x4e, 0x55, 0x44, 0x55, 0x4c, 0x55, 0xed, 0x13, 0x17, 0x10, 0x32 },
{ 0x91, 0x41, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x30, 0xfe, 0x19, 0xa2, 0x63, 0x24, 0x34, 0x70, 0xc, 0x50, 0x18, 0xd8, 0x31, 0x8c, 0x67, 0x7 },
{ 0x91, 0x42, 0x0, 0x10, 0x3c, 0x20, 0x25, 0xfc, 0x25, 0x4, 0x25, 0xfc, 0x3d, 0x4, 0x25, 0x4, 0x25, 0xfc, 0x24, 0x22, 0x3d, 0xa6, 0x24, 0xb4, 0x24, 0xa8, 0x25, 0xac, 0x25, 0x26, 0x67, 0x23, 0x4c, 0x60 },
{ 0x91, 0x43, 0x8, 0x4, 0x8, 0x4, 0xf, 0x84, 0x8, 0x84, 0x18, 0xff, 0x10, 0xa4, 0x39, 0xa4, 0x6d, 0x24, 0x7, 0x24, 0x2, 0x24, 0x6, 0xff, 0x4, 0x4, 0xc, 0x4, 0x18, 0x4, 0x30, 0x4, 0x60, 0x4 },
{ 0x91, 0x44, 0x4, 0x0, 0x8, 0x28, 0x3e, 0x28, 0x22, 0x28, 0x2a, 0x6c, 0x2a, 0x44, 0x22, 0xc6, 0x7f, 0x83, 0x22, 0x0, 0x2a, 0x7c, 0x2a, 0x44, 0x2a, 0x44, 0x2a, 0x44, 0x22, 0x44, 0x62, 0x44, 0x46, 0x7c },
{ 0x91, 0x45, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x1f, 0xff, 0x11, 0x20, 0x1f, 0xfe, 0x11, 0x22, 0x1f, 0xfe, 0x12, 0x0, 0x13, 0xff, 0x32, 0x0, 0x23, 0xff, 0x68, 0x1, 0xa, 0x49, 0x11, 0x27 },
{ 0x91, 0x46, 0x0, 0x10, 0x3c, 0x38, 0x0, 0x6c, 0x7e, 0xc6, 0x1, 0x83, 0x3c, 0x0, 0x0, 0xfe, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0xfe, 0x3c, 0x10, 0x24, 0x10, 0x24, 0x10, 0x25, 0xff, 0x3c, 0x0 },
{ 0x91, 0x47, 0x0, 0x28, 0x3e, 0x24, 0x22, 0x20, 0x23, 0xfe, 0x3e, 0x20, 0x23, 0xfe, 0x22, 0x20, 0x23, 0xff, 0x3e, 0x20, 0x22, 0x32, 0x22, 0x16, 0x22, 0x1c, 0x3e, 0x8, 0x14, 0x3d, 0x36, 0xe7, 0x62, 0x2 },
{ 0x91, 0x48, 0x0, 0x28, 0x3e, 0x24, 0x22, 0x20, 0x23, 0xfe, 0x22, 0x20, 0x23, 0xfe, 0x3e, 0x20, 0x9, 0xff, 0x28, 0x20, 0x2e, 0x32, 0x28, 0x16, 0x28, 0x1c, 0x28, 0x8, 0x2e, 0x1d, 0x38, 0x77, 0x61, 0xc2 },
{ 0x91, 0x49, 0x0, 0x0, 0x27, 0xbe, 0x30, 0x82, 0x17, 0xbe, 0x4, 0x20, 0x4, 0xa2, 0x3, 0x9e, 0x70, 0x90, 0x13, 0xfc, 0x10, 0x90, 0x10, 0x90, 0x17, 0xfe, 0x11, 0x8, 0x36, 0x6, 0x28, 0x0, 0x67, 0xff },
{ 0x91, 0x4a, 0x0, 0x0, 0x37, 0xff, 0x18, 0x90, 0xb, 0xfe, 0x2, 0x92, 0x3, 0xfe, 0x0, 0x40, 0x7b, 0xff, 0x8, 0x88, 0x9, 0xfc, 0xe, 0xb, 0x9, 0xf8, 0x9, 0x2, 0x18, 0xfe, 0x34, 0x0, 0x63, 0xff },
{ 0x91, 0x4b, 0x8, 0x28, 0x1c, 0x24, 0x16, 0x20, 0x32, 0xfe, 0x20, 0x20, 0x7e, 0xfe, 0x8, 0x20, 0x8, 0xff, 0x7f, 0x20, 0x8, 0x32, 0x4a, 0x16, 0x6a, 0x1c, 0x28, 0x8, 0xe, 0x1d, 0x38, 0x77, 0x61, 0xc2 },
{ 0x91, 0x4c, 0x8, 0x10, 0x1c, 0x50, 0x16, 0x50, 0x32, 0xfe, 0x20, 0x90, 0x7e, 0x10, 0x8, 0x10, 0x8, 0xff, 0x7f, 0x28, 0x8, 0x28, 0x4a, 0x28, 0x6a, 0x28, 0x28, 0x68, 0xe, 0x49, 0x38, 0xc9, 0x61, 0x87 },
{ 0x91, 0x4d, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x20, 0x82, 0x20, 0x82, 0x21, 0xc2, 0x21, 0x42, 0x23, 0x62, 0x26, 0x32, 0x2c, 0x1a, 0x20, 0x2, 0x20, 0xe },
{ 0x91, 0x4e, 0x10, 0x41, 0x1e, 0x63, 0x32, 0x22, 0x24, 0x7f, 0x7f, 0x8, 0x29, 0x8, 0x29, 0x3e, 0x3f, 0x8, 0x29, 0x8, 0x29, 0x8, 0x3f, 0x7f, 0x0, 0x8, 0x2a, 0x88, 0x2a, 0x88, 0x6a, 0x88, 0x40, 0x8 },
{ 0x91, 0x4f, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0x4, 0x11, 0x24, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x24, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x24, 0x11, 0x4, 0x11, 0x4, 0x13, 0x1c },
{ 0x91, 0x50, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0x4, 0x90, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x91, 0x51, 0x1, 0x2, 0x21, 0x6, 0x37, 0xdc, 0x11, 0x10, 0x7, 0xd0, 0x45, 0x5f, 0x65, 0x52, 0x27, 0xd2, 0x5, 0x52, 0x15, 0x52, 0x17, 0xd2, 0x11, 0x12, 0x37, 0xf2, 0x21, 0x22, 0x21, 0x62, 0x61, 0x2 },
{ 0x91, 0x52, 0x4, 0x28, 0x4, 0x2c, 0xf, 0xa4, 0x8, 0xa0, 0x19, 0xff, 0x35, 0x28, 0x63, 0x28, 0x16, 0x6c, 0xc, 0x44, 0x18, 0xc6, 0x71, 0x83, 0x0, 0x0, 0x12, 0x24, 0x32, 0x26, 0x23, 0x32, 0x61, 0x13 },
{ 0x91, 0x53, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x91, 0x54, 0x9, 0x21, 0x9, 0xb3, 0x8, 0x92, 0x7e, 0xfe, 0x2, 0x92, 0x6, 0x92, 0x4, 0xfe, 0xc, 0x92, 0x18, 0x92, 0x3e, 0xfe, 0x6b, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x91, 0x55, 0x8, 0x82, 0x18, 0x44, 0x11, 0xff, 0x64, 0x10, 0x2c, 0xfe, 0x18, 0x10, 0x11, 0xff, 0x24, 0x92, 0x7e, 0x54, 0xb, 0xff, 0x8, 0x0, 0x2a, 0xfe, 0x2a, 0x82, 0x6a, 0x82, 0x48, 0x82, 0x8, 0xfe },
{ 0x91, 0x56, 0x0, 0x82, 0x3c, 0x44, 0x25, 0xff, 0x24, 0x10, 0x24, 0xfe, 0x3c, 0x10, 0x25, 0xff, 0x24, 0x92, 0x24, 0x54, 0x3d, 0xff, 0x24, 0x0, 0x24, 0xfe, 0x24, 0x82, 0x24, 0x82, 0x64, 0x82, 0x4c, 0xfe },
{ 0x91, 0x57, 0x10, 0x0, 0x55, 0xff, 0x55, 0x0, 0x55, 0x7e, 0x11, 0x52, 0x7d, 0x52, 0x11, 0x7e, 0x11, 0x52, 0x39, 0x52, 0x35, 0x7e, 0x51, 0x10, 0x51, 0x10, 0x13, 0x7e, 0x12, 0x10, 0x16, 0x10, 0x10, 0xff },
{ 0x91, 0x58, 0x0, 0x82, 0x0, 0x44, 0x7d, 0xff, 0x45, 0x11, 0x45, 0x11, 0x45, 0xff, 0x45, 0x11, 0x45, 0x11, 0x45, 0xff, 0x44, 0x0, 0x7c, 0xfe, 0x0, 0x82, 0x0, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x0, 0xfe },
{ 0x91, 0x59, 0x21, 0x0, 0x12, 0x3e, 0x7f, 0xa2, 0x8, 0x3e, 0x29, 0x22, 0x29, 0x3e, 0x29, 0x22, 0x3f, 0x22, 0x8, 0x22, 0x10, 0x46, 0x60, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x91, 0x5a, 0x0, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x54, 0x84, 0x54, 0x84, 0x54, 0xfc, 0x54, 0x84, 0x54, 0x84, 0x54, 0x84, 0x54, 0xfc, 0x54, 0x84, 0x7c, 0x84, 0x0, 0x84, 0x0, 0x84, 0x3, 0xff, 0x0, 0x0 },
{ 0x91, 0x5b, 0x10, 0x88, 0x10, 0x88, 0x13, 0xfe, 0x10, 0x88, 0x78, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x0, 0x18, 0x0, 0x71, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x31, 0xfc },
{ 0x91, 0x5c, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x7f, 0xff, 0x10, 0x84, 0x14, 0x94, 0x12, 0xa4, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x91, 0x5d, 0x8, 0x8, 0x4, 0x10, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x91, 0x5e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x14, 0x54, 0x16, 0x54, 0x35, 0x56, 0x64, 0x93, 0x4, 0x10, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x82, 0x8, 0x80, 0x8, 0xfc, 0x1c, 0x80, 0x37, 0x80, 0x60, 0xff },
{ 0x91, 0x5f, 0x4, 0x0, 0x44, 0xfc, 0x28, 0x84, 0x10, 0x84, 0x10, 0x84, 0x28, 0xfc, 0x48, 0x84, 0x8, 0x84, 0x18, 0x84, 0x18, 0xfc, 0x28, 0x84, 0x48, 0x84, 0x8, 0x84, 0x8, 0x84, 0x1b, 0xff, 0x70, 0x0 },
{ 0x91, 0x60, 0x0, 0x10, 0x7f, 0x10, 0x2, 0xff, 0x4, 0x20, 0x8, 0x60, 0x28, 0x42, 0x28, 0xff, 0x2e, 0x1, 0x28, 0x44, 0x28, 0x54, 0x28, 0x54, 0x28, 0x54, 0x28, 0x54, 0x2e, 0xd5, 0x38, 0x95, 0x61, 0x83 },
{ 0x91, 0x61, 0x0, 0x10, 0x7e, 0x10, 0x3, 0xff, 0x4, 0x10, 0x8, 0xfe, 0x28, 0x92, 0x28, 0x92, 0x2e, 0x92, 0x28, 0xfe, 0x28, 0x54, 0x28, 0x54, 0x28, 0x54, 0x2e, 0xd6, 0x38, 0x92, 0x61, 0x93, 0x0, 0x10 },
{ 0x91, 0x62, 0x0, 0x44, 0x7e, 0x44, 0x11, 0xff, 0x10, 0x44, 0x10, 0xee, 0x11, 0x55, 0x3c, 0x44, 0x24, 0x0, 0x65, 0xff, 0x24, 0x11, 0x24, 0x90, 0x24, 0x9e, 0x24, 0x90, 0x3d, 0xd0, 0x1, 0x70, 0x3, 0x1f },
{ 0x91, 0x63, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x7c, 0x84, 0x4, 0x84, 0xc, 0xfc, 0x8, 0x84, 0x18, 0x84, 0x10, 0x84, 0x3c, 0xfc, 0x56, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x13, 0xff, 0x10, 0x0 },
{ 0x91, 0x64, 0x2, 0x0, 0xe, 0xfc, 0x78, 0x84, 0x8, 0x84, 0x8, 0x84, 0x7e, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x1c, 0x84, 0x1a, 0xfc, 0x2a, 0x84, 0x28, 0x84, 0x48, 0x84, 0x8, 0x84, 0xb, 0xff, 0x8, 0x0 },
{ 0x91, 0x65, 0x8, 0x0, 0x4a, 0xfc, 0x6e, 0x84, 0x2c, 0x84, 0x8, 0x84, 0x7e, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x1c, 0x84, 0x1a, 0xfc, 0x2a, 0x84, 0x28, 0x84, 0x48, 0x84, 0x8, 0x84, 0xb, 0xff, 0x8, 0x0 },
{ 0x91, 0x66, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x3, 0x8, 0xc, 0x30, 0x2, 0xc4, 0x3f, 0xfe, 0x0, 0x82, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x91, 0x67, 0x8, 0x0, 0x18, 0xfc, 0x10, 0x84, 0x64, 0x84, 0x2c, 0x84, 0x18, 0xfc, 0x10, 0x84, 0x24, 0x84, 0x7e, 0x84, 0xa, 0xfc, 0x8, 0x84, 0x2a, 0x84, 0x2a, 0x84, 0x6a, 0x84, 0x49, 0xff, 0x8, 0x0 },
{ 0x91, 0x68, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x10, 0x2, 0x1e, 0xe, 0x24, 0x78, 0x7f, 0x8, 0x29, 0x7f, 0x3f, 0x8, 0x29, 0x1c, 0x29, 0x1c, 0x3f, 0x2a, 0x0, 0x2a, 0x55, 0x49, 0x55, 0x8, 0x0, 0x8 },
{ 0x91, 0x69, 0x0, 0x6, 0x3c, 0x1c, 0x0, 0xf0, 0x7e, 0x80, 0x0, 0x80, 0x3c, 0xff, 0x0, 0x88, 0x0, 0x88, 0x3c, 0x88, 0x0, 0xb8, 0x0, 0x8e, 0x3c, 0x8b, 0x25, 0x88, 0x25, 0x8, 0x27, 0x8, 0x3c, 0x8 },
{ 0x91, 0x6a, 0x0, 0x0, 0x3e, 0xfc, 0x22, 0x84, 0x26, 0x84, 0x2c, 0x84, 0x28, 0xfc, 0x24, 0x84, 0x22, 0x84, 0x22, 0x84, 0x22, 0xfc, 0x22, 0x84, 0x2e, 0x84, 0x20, 0x84, 0x20, 0x84, 0x23, 0xff, 0x20, 0x0 },
{ 0x91, 0x6b, 0x4, 0x40, 0x26, 0xde, 0x32, 0x92, 0x17, 0xd2, 0x1, 0x1e, 0x1, 0x12, 0x5, 0x52, 0x75, 0x52, 0x15, 0x5e, 0x17, 0xd2, 0x11, 0x12, 0x11, 0x12, 0x13, 0x12, 0x36, 0x26, 0x28, 0x0, 0x67, 0xff },
{ 0x91, 0x6c, 0x3, 0x0, 0x3e, 0x7e, 0x20, 0x2, 0x3f, 0x7e, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0, 0x10, 0x88, 0x14, 0xc8, 0x12, 0xa8, 0x10, 0x88, 0x14, 0xc8, 0x12, 0xac, 0x10, 0x85, 0x1c, 0xe7, 0x73, 0x82 },
{ 0x91, 0x6d, 0x9, 0x4, 0x8, 0x88, 0xf, 0xff, 0x1c, 0x21, 0x14, 0x21, 0x37, 0xff, 0x34, 0x21, 0x54, 0x21, 0x17, 0xff, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe },
{ 0x91, 0x6e, 0x2, 0x2, 0x7, 0x12, 0xd, 0x92, 0x18, 0xd2, 0x37, 0x72, 0x60, 0x12, 0x1f, 0xd2, 0x10, 0x52, 0x1f, 0xd2, 0x10, 0x52, 0x1f, 0xd2, 0x10, 0x12, 0x3f, 0xc2, 0x28, 0x42, 0x68, 0x42, 0xf, 0xce },
{ 0x91, 0x6f, 0x0, 0x0, 0x3f, 0x7e, 0x1, 0x22, 0x1, 0x22, 0x1, 0x22, 0x3, 0x22, 0x32, 0x26, 0x1a, 0x34, 0xe, 0x14, 0x4, 0x1c, 0xe, 0x8, 0xb, 0x1c, 0x19, 0x14, 0x10, 0x36, 0x30, 0x62, 0x61, 0xc3 },
{ 0x91, 0x70, 0x11, 0x44, 0x9, 0x48, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x11, 0x0, 0x1f, 0x7e, 0x11, 0x22, 0x1f, 0x14, 0x11, 0x8, 0x7f, 0x14, 0x1, 0x63 },
{ 0x91, 0x71, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x79, 0xcf, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x18, 0x0, 0x17, 0xfc, 0x34, 0x4, 0x64, 0x4, 0x7, 0xfc },
{ 0x91, 0x72, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x3e, 0xbe, 0x22, 0xa2, 0x22, 0xa2, 0x3e, 0xbe, 0x0, 0x80, 0x7f, 0xff, 0x8, 0x42, 0x8, 0x66, 0x8, 0x2c, 0x8, 0x30, 0xf, 0x1c, 0x38, 0x7 },
{ 0x91, 0x73, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x24, 0x20, 0x34, 0x20, 0x17, 0xff, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x1c, 0x20, 0x34, 0x20, 0x64, 0x20, 0x4, 0x20, 0x4, 0x20, 0x5, 0xfe, 0x4, 0x0 },
{ 0x91, 0x74, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x1, 0x40, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x10, 0x1b, 0xec, 0x60, 0x83, 0x1f, 0xfc, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x38, 0xe },
{ 0x91, 0x75, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x24, 0x92, 0x18, 0x8c, 0x24, 0x92, 0x0, 0x80, 0x24, 0x92, 0x18, 0x8c, 0x25, 0xd2, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x91, 0x76, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80, 0x0, 0x80 },
{ 0x91, 0x77, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x1f, 0xfe, 0x11, 0x10, 0x17, 0xfe, 0x14, 0x42, 0x17, 0xfe, 0x14, 0x42, 0x17, 0xfe, 0x10, 0x0, 0x13, 0xfc, 0x32, 0x4, 0x23, 0xfc, 0x62, 0x4, 0x3, 0xfc },
{ 0x91, 0x78, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x20, 0x80, 0x20, 0x80, 0x27, 0xf8, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x24, 0xb8, 0x20, 0x80, 0x20, 0x80, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x91, 0x79, 0x8, 0x80, 0x28, 0x80, 0x3f, 0xfe, 0x69, 0x2a, 0xb, 0x6a, 0x8, 0x5a, 0xe, 0xd2, 0x79, 0xb6, 0x8, 0x64, 0x9, 0xdc, 0x0, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x91, 0x7a, 0x8, 0x0, 0x8, 0xfe, 0x7e, 0x82, 0x8, 0xfe, 0x1c, 0x82, 0x1a, 0x82, 0x2a, 0xfe, 0x48, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x91, 0x7b, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x7a, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x1b, 0xfe, 0x70, 0x20, 0x17, 0xfe, 0x11, 0x4, 0x10, 0x98, 0x10, 0x70, 0x11, 0xdc, 0x37, 0x7 },
{ 0x91, 0x7c, 0x10, 0x0, 0x11, 0xfc, 0x10, 0x4, 0x11, 0xfc, 0x78, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x1c, 0x21, 0x74, 0x21, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x26, 0x30, 0x20 },
{ 0x91, 0x7d, 0x10, 0x6, 0x10, 0x3c, 0x13, 0xe0, 0x78, 0x20, 0x17, 0xff, 0x10, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x1a, 0x22, 0x73, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20 },
{ 0x91, 0x7e, 0x10, 0x0, 0x17, 0xfe, 0x11, 0x4, 0x10, 0x88, 0x78, 0x70, 0x11, 0xdc, 0x17, 0x7, 0x10, 0x20, 0x1b, 0xfe, 0x72, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x22, 0x10, 0xff, 0x37, 0x81 },
{ 0x91, 0x80, 0x10, 0xf8, 0x10, 0x88, 0x10, 0x88, 0x10, 0xf8, 0x78, 0x0, 0x13, 0xde, 0x12, 0x52, 0x12, 0x52, 0x1b, 0xde, 0x70, 0x20, 0x17, 0xff, 0x10, 0xa8, 0x11, 0xac, 0x13, 0x26, 0x16, 0x23, 0x30, 0x20 },
{ 0x91, 0x81, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x91, 0x82, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x91, 0x83, 0x11, 0x4, 0x19, 0x8c, 0x8, 0x88, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x91, 0x84, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x7d, 0x8c, 0x13, 0x77, 0x10, 0x0, 0x39, 0xfc, 0x35, 0x4, 0x35, 0xfc, 0x51, 0x4, 0x51, 0xfc, 0x11, 0x0, 0x13, 0xfe, 0x12, 0x82, 0x16, 0x82, 0x10, 0xfe },
{ 0x91, 0x85, 0x10, 0x48, 0x10, 0x48, 0x13, 0xff, 0x7c, 0x48, 0x13, 0xff, 0x12, 0x49, 0x3b, 0xff, 0x36, 0x49, 0x33, 0xff, 0x50, 0x0, 0x51, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe },
{ 0x91, 0x86, 0x0, 0x90, 0x20, 0x90, 0x3f, 0xff, 0x10, 0x90, 0x7, 0xfe, 0x44, 0x92, 0x67, 0xfe, 0x24, 0x92, 0x7, 0xfe, 0x8, 0x0, 0xb, 0xfc, 0x1a, 0x4, 0x13, 0xfc, 0x32, 0x4, 0x22, 0x4, 0x63, 0xfc },
{ 0x91, 0x87, 0x10, 0xf8, 0x10, 0x88, 0x14, 0x88, 0x54, 0xf8, 0x54, 0x0, 0x53, 0xde, 0x52, 0x52, 0x12, 0x52, 0x13, 0xde, 0x10, 0x20, 0x13, 0xfe, 0x38, 0xa8, 0x2d, 0xac, 0x23, 0x26, 0x66, 0x23, 0x40, 0x20 },
{ 0x91, 0x88, 0x2, 0x0, 0x7, 0xf8, 0xc, 0x30, 0x18, 0x60, 0x70, 0xc0, 0x1f, 0xfc, 0x0, 0x84, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x84, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x91, 0x89, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x57, 0xfc, 0x34, 0x44, 0x17, 0xfc, 0x14, 0x44, 0x17, 0xfc, 0x30, 0x40, 0x57, 0xfc, 0x12, 0x8, 0x31, 0x10, 0x20, 0xe0, 0x63, 0xb8, 0x1e, 0xf },
{ 0x91, 0x8a, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x1c, 0x82, 0x1a, 0x82, 0x1a, 0x82, 0x28, 0xfe, 0x28, 0x82, 0x48, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x0 },
{ 0x91, 0x8b, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0x1c, 0x3f, 0x72, 0x0, 0x6, 0x30, 0x4, 0x18, 0xf, 0xfc, 0x38, 0x4, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x91, 0x8c, 0x10, 0x48, 0x54, 0x48, 0x57, 0xff, 0x54, 0x48, 0x13, 0xff, 0x7e, 0x49, 0x13, 0xff, 0x12, 0x49, 0x3b, 0xff, 0x34, 0x0, 0x55, 0xfe, 0x51, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe },
{ 0x91, 0x8d, 0x8, 0x44, 0x18, 0x44, 0x10, 0xc6, 0x65, 0xa3, 0x2c, 0x20, 0x18, 0x64, 0x10, 0x44, 0x24, 0x7e, 0x7d, 0xc3, 0x14, 0x10, 0x10, 0x18, 0x54, 0x28, 0x54, 0xa2, 0x54, 0xa3, 0x11, 0xa5, 0x11, 0x1c },
{ 0x91, 0x8e, 0x8, 0x10, 0x18, 0x10, 0x11, 0xff, 0x65, 0x1, 0x2d, 0x1, 0x18, 0xfe, 0x10, 0x0, 0x24, 0x0, 0x7d, 0xff, 0x14, 0x10, 0x10, 0x10, 0x54, 0x92, 0x54, 0x92, 0x55, 0x93, 0x11, 0x11, 0x10, 0x70 },
{ 0x91, 0x8f, 0x0, 0x44, 0x7e, 0x44, 0x24, 0xc6, 0x25, 0xa3, 0x3c, 0x20, 0x24, 0x64, 0x24, 0x44, 0x24, 0x7e, 0x3d, 0xc2, 0x24, 0x10, 0x24, 0x18, 0x24, 0x28, 0x3c, 0xa2, 0x64, 0xa3, 0x5, 0xa5, 0x5, 0x1c },
{ 0x91, 0x90, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x91, 0x91, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x4, 0x20, 0x24, 0x20, 0x34, 0x20, 0x17, 0xff, 0x4, 0x20, 0x4, 0x20, 0x3c, 0x20, 0x64, 0x20, 0x4, 0x20, 0x5, 0xfe, 0x4, 0x0 },
{ 0x91, 0x92, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0xfe, 0x8, 0x40, 0x1f, 0x46, 0x71, 0x7c, 0x1a, 0x41, 0xc, 0x43, 0x70, 0x3e, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x10, 0x38, 0x10 },
{ 0x91, 0x93, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x90, 0x1, 0x40, 0x6, 0x30, 0x1d, 0xdc, 0x70, 0x7, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x1f, 0xf8, 0x10, 0x0, 0x37, 0xfc, 0x64, 0x4, 0x7, 0xfc },
{ 0x91, 0x94, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x31, 0xfc, 0x19, 0x4, 0x1, 0xfc, 0x60, 0x0, 0x33, 0xde, 0x2, 0x52, 0xb, 0xde, 0x18, 0x20, 0x17, 0xff, 0x30, 0xa8, 0x21, 0xac, 0x67, 0x27 },
{ 0x91, 0x95, 0x4, 0x20, 0x24, 0x20, 0x37, 0xff, 0x14, 0x20, 0x4, 0x20, 0x1c, 0x20, 0x75, 0xfe, 0x4, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x44, 0x6, 0x4c, 0x7c, 0x28, 0x4, 0x30, 0x7, 0x9c, 0x3c, 0x7 },
{ 0x91, 0x96, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x1c, 0x80, 0x16, 0x80, 0x33, 0x80, 0x60, 0xff },
{ 0x91, 0x97, 0x1, 0x4, 0x31, 0x8c, 0x18, 0x88, 0xb, 0xfe, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x7b, 0xff, 0x8, 0x20, 0x8, 0x70, 0x8, 0x50, 0x8, 0xd8, 0x9, 0x8c, 0x1b, 0x6, 0x34, 0x0, 0x63, 0xff },
{ 0x91, 0x98, 0x0, 0x90, 0x2f, 0xff, 0x30, 0x90, 0x17, 0xfe, 0x4, 0x92, 0x7, 0xfe, 0x4, 0x92, 0x77, 0xfe, 0x10, 0x0, 0x13, 0xfc, 0x12, 0x4, 0x13, 0xfc, 0x12, 0x4, 0x33, 0xfc, 0x28, 0x0, 0x67, 0xff },
{ 0x91, 0x99, 0x8, 0x10, 0x1c, 0x38, 0x16, 0x6c, 0x32, 0xc6, 0x21, 0xbb, 0x7e, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0xfe, 0x8, 0x82, 0x4a, 0xfe, 0x6a, 0x80, 0x29, 0xff, 0xd, 0x41, 0x3b, 0x41, 0x60, 0x7f },
{ 0x91, 0x9a, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x40, 0x81, 0x1e, 0xbc, 0x0, 0x80, 0x4, 0x7e, 0x7f, 0x42, 0x14, 0x7e, 0x16, 0x42, 0x35, 0x7e, 0x64, 0x42, 0x4, 0x7e },
{ 0x91, 0x9b, 0x0, 0x0, 0x3f, 0x7e, 0x24, 0x22, 0x24, 0x14, 0x3f, 0x8, 0x24, 0x14, 0x24, 0x6b, 0x3f, 0x8, 0x24, 0x3e, 0x24, 0x2a, 0x3f, 0xaa, 0x0, 0xbe, 0x55, 0x88, 0x54, 0x8a, 0x41, 0x9f, 0x3, 0x71 },
{ 0x91, 0x9c, 0x8, 0x80, 0x9, 0xf8, 0xb, 0x10, 0x16, 0x20, 0x13, 0xfe, 0x32, 0x22, 0x32, 0x22, 0x53, 0xfe, 0x10, 0x41, 0x11, 0xa3, 0x16, 0x56, 0x11, 0xb0, 0x16, 0x58, 0x11, 0x94, 0x16, 0x33, 0x10, 0xe0 },
{ 0x91, 0x9d, 0x10, 0x82, 0x10, 0x44, 0x11, 0xff, 0x11, 0x11, 0x7d, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0x11, 0x11, 0xff, 0x10, 0x0, 0x1c, 0xfe, 0x70, 0x82, 0x0, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x0, 0xfe },
{ 0x91, 0x9e, 0x8, 0x82, 0x8, 0x44, 0x9, 0xff, 0x9, 0x11, 0x2d, 0x11, 0x2b, 0xff, 0x69, 0x11, 0x49, 0x11, 0x9, 0xff, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe },
{ 0x91, 0x9f, 0x38, 0x48, 0x2b, 0xff, 0x28, 0x4a, 0x28, 0x49, 0x38, 0x4, 0x2b, 0xff, 0x2a, 0x4, 0x2a, 0xf4, 0x3a, 0xa5, 0x2a, 0xf7, 0x2a, 0x96, 0x2a, 0xf4, 0x2a, 0xac, 0x2a, 0xfd, 0x6c, 0x17, 0x58, 0x62 },
{ 0x91, 0xa0, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x24, 0x0, 0x12, 0x1f, 0xff, 0x10, 0x10, 0x17, 0xd2, 0x15, 0x16, 0x17, 0xd4, 0x14, 0x5c, 0x17, 0xc8, 0x15, 0x1c, 0x37, 0xf5, 0x20, 0x67, 0x61, 0xc2 },
{ 0x91, 0xa1, 0x0, 0x82, 0x3c, 0x44, 0x25, 0xff, 0x25, 0x11, 0x3d, 0x11, 0x25, 0xff, 0x25, 0x11, 0x25, 0x11, 0x3d, 0xff, 0x24, 0x0, 0x24, 0xfe, 0x24, 0x82, 0x3c, 0xfe, 0x14, 0x82, 0x36, 0x82, 0x62, 0xfe },
{ 0x91, 0xa2, 0x0, 0x20, 0x31, 0x20, 0x19, 0x20, 0xb, 0xfe, 0x2, 0x20, 0x6, 0x20, 0x0, 0x20, 0x77, 0xff, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x31, 0xfc, 0x28, 0x0, 0x67, 0xff },
{ 0x91, 0xa3, 0x8, 0x0, 0xb, 0xfe, 0xa, 0x2, 0x1a, 0x2, 0x12, 0x2, 0x32, 0x2, 0x33, 0xfe, 0x50, 0x20, 0x10, 0x20, 0x11, 0x20, 0x11, 0x3e, 0x11, 0x20, 0x13, 0x20, 0x12, 0xa0, 0x12, 0x70, 0x14, 0x1f },
{ 0x91, 0xa4, 0x8, 0x2, 0xb, 0xd2, 0x1a, 0x52, 0x12, 0x52, 0x13, 0xd2, 0x32, 0x52, 0x32, 0x52, 0x52, 0x52, 0x13, 0xd2, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x13, 0xc2, 0x11, 0x42, 0x13, 0x62, 0x16, 0x2e },
{ 0x91, 0xa5, 0x0, 0x2, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x2, 0x3f, 0x2, 0x12, 0x2, 0x33, 0x2, 0x61, 0x8e },
{ 0x91, 0xa6, 0x0, 0x0, 0x3f, 0x3e, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x20, 0x22, 0x21, 0x22, 0x21, 0x22, 0x27, 0xae, 0x3c, 0xa0, 0x60, 0x20, 0x0, 0x20 },
{ 0x91, 0xa7, 0x0, 0x80, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x91, 0xa8, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x7a, 0x2, 0x12, 0x2, 0x13, 0xfe, 0x10, 0x20, 0x18, 0x20, 0x71, 0x20, 0x11, 0x3e, 0x11, 0x20, 0x13, 0x20, 0x12, 0xa0, 0x12, 0x70, 0x34, 0x1f },
{ 0x91, 0xa9, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x91, 0xaa, 0x0, 0x2, 0x27, 0xd2, 0x34, 0x52, 0x14, 0x52, 0x7, 0xd2, 0x44, 0x52, 0x64, 0x52, 0x24, 0x52, 0x7, 0xd2, 0x14, 0x52, 0x14, 0x52, 0x14, 0x52, 0x37, 0xc2, 0x22, 0x82, 0x26, 0xc2, 0x6c, 0x6e },
{ 0x91, 0xab, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x1c, 0x80, 0x16, 0x80, 0x33, 0x80, 0x60, 0xff },
{ 0x91, 0xac, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x10, 0x20, 0x3, 0xfe, 0x2, 0x22, 0x2, 0x22, 0x72, 0x22, 0x13, 0xfe, 0x10, 0xa8, 0x11, 0xac, 0x13, 0x26, 0x16, 0x23, 0x30, 0x20, 0x28, 0x0, 0x67, 0xff },
{ 0x91, 0xad, 0x8, 0x88, 0x9, 0x8c, 0x1b, 0x6, 0x16, 0x23, 0x10, 0x70, 0x30, 0xd8, 0x31, 0x8c, 0x53, 0x6, 0x16, 0x3, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe },
{ 0x91, 0xae, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x13, 0xfc, 0x10, 0x40, 0x13, 0xfc, 0x12, 0x44, 0x13, 0xfc, 0x10, 0x40, 0x17, 0xfe, 0x34, 0x52, 0x24, 0x7a, 0x65, 0xca, 0x4, 0x6 },
{ 0x91, 0xaf, 0x0, 0xa, 0x3c, 0xb, 0x24, 0x9, 0x24, 0x8, 0x3d, 0xff, 0x24, 0x8, 0x24, 0x48, 0x24, 0x49, 0x3d, 0xf9, 0x24, 0x4b, 0x24, 0x4a, 0x24, 0x4e, 0x3c, 0x4c, 0x14, 0x1d, 0x36, 0x37, 0x62, 0xe2 },
{ 0x91, 0xb0, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xff, 0x11, 0x0, 0x11, 0x40, 0x1e, 0x7e, 0x12, 0xd0, 0x12, 0x10, 0x12, 0x10, 0x12, 0xff, 0x12, 0x28, 0x12, 0x28, 0x32, 0x6c, 0x26, 0xc6, 0x6d, 0x83 },
{ 0x91, 0xb1, 0x8, 0x10, 0x18, 0x10, 0x11, 0xff, 0x64, 0x10, 0x2c, 0x10, 0x18, 0xfe, 0x10, 0x0, 0x25, 0xff, 0x7d, 0x1, 0x15, 0x49, 0x10, 0x48, 0x54, 0x48, 0x54, 0x48, 0x54, 0xc9, 0x10, 0x89, 0x11, 0x87 },
{ 0x91, 0xb2, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0xe, 0x38, 0x1b, 0x6c, 0x30, 0x6, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x91, 0xb3, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x10, 0x5, 0xff, 0xd, 0x11, 0x9, 0x11, 0x1b, 0x11, 0x15, 0x11, 0x39, 0xff, 0x55, 0x11, 0x15, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xff, 0x10, 0x0 },
{ 0x91, 0xb4, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0, 0x4, 0x10, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x91, 0xb5, 0x11, 0x4, 0x11, 0x8c, 0x10, 0x88, 0x17, 0xff, 0x78, 0x0, 0x13, 0xc2, 0x12, 0x52, 0x12, 0x52, 0x1b, 0xd2, 0x72, 0x52, 0x12, 0x52, 0x13, 0xd2, 0x12, 0x42, 0x12, 0x42, 0x12, 0x42, 0x32, 0xce },
{ 0x91, 0xb6, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x6, 0x0, 0x5, 0xfc, 0xc, 0x8, 0x18, 0x10, 0x38, 0x20, 0x6f, 0xff, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0xe0 },
{ 0x91, 0xb7, 0x0, 0x6, 0x7c, 0x1c, 0x5, 0xf0, 0x8, 0x40, 0x10, 0xc4, 0x11, 0x8c, 0x10, 0xd8, 0x10, 0x30, 0x1c, 0x62, 0x73, 0xff, 0x10, 0x21, 0x11, 0x24, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x30, 0x20 },
{ 0x91, 0xb8, 0x8, 0x8, 0x4, 0x10, 0x7f, 0xff, 0x1, 0x40, 0x1f, 0xfc, 0x11, 0x44, 0x1e, 0x7c, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x10, 0x7f, 0xff, 0x8, 0x10, 0x4, 0x10, 0x0, 0x70 },
{ 0x91, 0xb9, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x7b, 0xfe, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x1b, 0xfe, 0x72, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x11, 0x4, 0x13, 0x6, 0x36, 0x3 },
{ 0x91, 0xba, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x7e, 0xff, 0x8, 0x4, 0x8, 0x4, 0x1c, 0x4, 0x1a, 0x64, 0x19, 0x34, 0x28, 0x14, 0x28, 0x4, 0x48, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x1c },
{ 0x91, 0xbb, 0x0, 0x2, 0x27, 0xce, 0x30, 0x78, 0x10, 0x92, 0x1, 0x26, 0x1, 0x1c, 0x1, 0xc8, 0x77, 0x12, 0x11, 0x7f, 0x11, 0x9, 0x11, 0x2a, 0x11, 0x2a, 0x11, 0x2a, 0x33, 0x8, 0x28, 0x0, 0x67, 0xff },
{ 0x91, 0xbc, 0x8, 0x20, 0x8, 0x20, 0xa, 0x20, 0x1a, 0x2e, 0x12, 0x3a, 0x32, 0xe2, 0x33, 0xa2, 0x56, 0x22, 0x12, 0x22, 0x12, 0x26, 0x12, 0x20, 0x12, 0x20, 0x12, 0x0, 0x12, 0x1, 0x13, 0x3, 0x11, 0xfe },
{ 0x91, 0xbd, 0x1, 0x0, 0x3, 0xf0, 0x6, 0x10, 0x1c, 0x30, 0x36, 0x60, 0x2, 0xc0, 0x3, 0x80, 0xe, 0x20, 0x38, 0x7e, 0x0, 0xc2, 0x3, 0x86, 0x6, 0xcc, 0x0, 0x58, 0x0, 0x70, 0x3, 0xc0, 0x1e, 0x0 },
{ 0x91, 0xbe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x1, 0x40, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0x5, 0x90, 0xc, 0xd8, 0x18, 0x4c, 0x70, 0x7 },
{ 0x91, 0xbf, 0x0, 0x40, 0x20, 0x40, 0x30, 0x40, 0x10, 0x40, 0x0, 0x40, 0x4f, 0xff, 0x60, 0xa0, 0x20, 0xa0, 0x0, 0xa0, 0x9, 0xb0, 0x9, 0x10, 0x19, 0x18, 0x13, 0x48, 0x32, 0x6c, 0x26, 0x26, 0x6c, 0x3 },
{ 0x91, 0xc0, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x7f, 0xff, 0x1, 0x1, 0x3d, 0x1, 0x0, 0x40, 0x0, 0x46, 0x3c, 0x5c, 0x0, 0x70, 0x0, 0x40, 0x3c, 0x40, 0x24, 0x40, 0x24, 0x41, 0x24, 0x63, 0x3c, 0x3e },
{ 0x91, 0xc1, 0x0, 0xc, 0x0, 0x38, 0x7b, 0xe0, 0x48, 0x20, 0x4b, 0xfe, 0x49, 0x24, 0x49, 0x24, 0x49, 0x24, 0x4f, 0xff, 0x49, 0x24, 0x49, 0x24, 0x79, 0x24, 0x3, 0xfe, 0x0, 0x20, 0x0, 0x20, 0x7, 0xff },
{ 0x91, 0xc2, 0x0, 0x20, 0x3c, 0x20, 0x25, 0xff, 0x24, 0x40, 0x28, 0x7e, 0x28, 0xc2, 0x25, 0x7e, 0x24, 0x42, 0x2c, 0x7e, 0x20, 0x42, 0x20, 0x46, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff },
{ 0x91, 0xc3, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x1, 0x4, 0x11, 0x8c, 0x18, 0x98, 0x9, 0x10, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x6, 0x10, 0x4, 0x30, 0xf, 0xa0, 0x0, 0xf0, 0x3, 0x9c, 0x3e, 0x6 },
{ 0x91, 0xc4, 0x10, 0x40, 0x10, 0x40, 0x13, 0xff, 0x58, 0x80, 0x55, 0xfe, 0x53, 0x10, 0x56, 0xff, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0xe },
{ 0x91, 0xc5, 0x8, 0x0, 0x8, 0x0, 0x9, 0xff, 0x8, 0x8, 0x7e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xe, 0x8, 0x78, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38, 0x38 },
{ 0x91, 0xc6, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0xff, 0x8, 0x81, 0x8, 0x81, 0x1c, 0x40, 0x1a, 0x46, 0x1a, 0x5c, 0x28, 0x70, 0x28, 0x40, 0x48, 0x40, 0x8, 0x40, 0x8, 0x41, 0x8, 0x63, 0x8, 0x3e },
{ 0x91, 0xc7, 0x4, 0x10, 0x8, 0x10, 0x3e, 0x10, 0x22, 0xff, 0x2a, 0x81, 0x2a, 0x81, 0x22, 0x40, 0x7f, 0x46, 0x22, 0x5c, 0x2a, 0x70, 0x2a, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x22, 0x41, 0x62, 0x63, 0x46, 0x3e },
{ 0x91, 0xc8, 0x10, 0x40, 0x10, 0x40, 0x13, 0xff, 0x7c, 0x80, 0x11, 0xfe, 0x13, 0x10, 0x38, 0xff, 0x34, 0x0, 0x35, 0xfe, 0x51, 0x2, 0x51, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0xe },
{ 0x91, 0xc9, 0x0, 0x10, 0x3c, 0x10, 0x24, 0x10, 0x25, 0xff, 0x25, 0x1, 0x29, 0x1, 0x28, 0x40, 0x24, 0x46, 0x24, 0x5c, 0x24, 0x70, 0x24, 0x40, 0x24, 0x40, 0x2c, 0x40, 0x20, 0x41, 0x20, 0x63, 0x20, 0x3e },
{ 0x91, 0xca, 0x0, 0x8, 0x3f, 0x88, 0x24, 0x8, 0x24, 0x8, 0x3f, 0x7f, 0x24, 0x8, 0x24, 0x8, 0x3f, 0x1c, 0x24, 0x14, 0x24, 0x14, 0x3f, 0x94, 0x0, 0xb6, 0x55, 0xa2, 0x54, 0xaa, 0x41, 0xab, 0x3, 0x41 },
{ 0x91, 0xcb, 0x0, 0x91, 0x3f, 0xdb, 0x24, 0x4a, 0x24, 0x7f, 0x3f, 0x49, 0x24, 0x49, 0x24, 0x7f, 0x3f, 0x49, 0x24, 0x49, 0x24, 0x7f, 0x3f, 0x88, 0x0, 0x88, 0x55, 0xff, 0x54, 0x88, 0x41, 0x88, 0x3, 0x8 },
{ 0x91, 0xcc, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x10, 0xa8, 0x30, 0xa8, 0x50, 0xa8, 0x11, 0xac, 0x11, 0x24, 0x11, 0x24, 0x13, 0x26, 0x16, 0xfb, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x91, 0xcd, 0x10, 0x24, 0x10, 0x6c, 0x10, 0x48, 0x10, 0xff, 0x7d, 0x90, 0x12, 0x90, 0x10, 0x90, 0x10, 0xfe, 0x10, 0x90, 0x10, 0x90, 0x10, 0x90, 0x1c, 0xfe, 0x70, 0x90, 0x0, 0x90, 0x0, 0x90, 0x0, 0xff },
{ 0x91, 0xce, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x7f, 0x84, 0x1, 0x7f, 0x1, 0x4, 0x33, 0x4, 0x1a, 0x64, 0xe, 0x34, 0x4, 0x14, 0xe, 0x4, 0xa, 0x4, 0x1b, 0x4, 0x31, 0x4, 0x60, 0x4, 0x0, 0x1c },
{ 0x91, 0xcf, 0x0, 0x4, 0x7f, 0xc4, 0x4, 0x4, 0x8, 0x4, 0x3f, 0xbf, 0x2a, 0x84, 0x2a, 0x84, 0x2a, 0xa4, 0x2a, 0xb4, 0x2a, 0x94, 0x2a, 0x84, 0x2a, 0x84, 0x2a, 0x84, 0x2a, 0x84, 0x2a, 0x84, 0x21, 0x9c },
{ 0x91, 0xd0, 0x4, 0x48, 0xc, 0x4c, 0x18, 0x44, 0x33, 0xff, 0x50, 0x20, 0x10, 0x30, 0x10, 0x18, 0x10, 0xd, 0x10, 0x7, 0x10, 0x2, 0x0, 0x80, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x91, 0xd1, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x9c, 0x0, 0x80 },
{ 0x91, 0xd2, 0x8, 0x20, 0x18, 0x20, 0x13, 0xfe, 0x30, 0x20, 0x60, 0x20, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x4, 0x30, 0x4, 0x77, 0xff, 0x11, 0x4, 0x11, 0x84, 0x10, 0x84, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x91, 0xd3, 0x2, 0x0, 0x6, 0x18, 0x4, 0xc, 0xf, 0xfe, 0x38, 0x2, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x91, 0xd4, 0x8, 0x20, 0x18, 0x26, 0x31, 0x3c, 0x7f, 0xa0, 0x0, 0xa1, 0x3f, 0x1f, 0x21, 0x0, 0x3f, 0x26, 0x21, 0x3c, 0x3f, 0x20, 0x21, 0x21, 0x23, 0x1f, 0x0, 0xc0, 0x14, 0x66, 0x34, 0xb, 0x63, 0xf9 },
{ 0x91, 0xd5, 0x2, 0x12, 0x1f, 0xd1, 0x2, 0x10, 0x7f, 0xff, 0x0, 0x10, 0x1f, 0x92, 0x14, 0x92, 0x1f, 0x96, 0x14, 0x94, 0x1f, 0x94, 0x9, 0x1c, 0x3f, 0xc8, 0x9, 0x9, 0x7f, 0xdd, 0x9, 0x17, 0x30, 0xb2 },
{ 0x91, 0xd6, 0x4, 0x10, 0x4, 0x10, 0x3f, 0x7e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0x7f, 0xa, 0x28, 0x19, 0x4c, 0x30, 0x6, 0x6f, 0xfb, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x91, 0xd7, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x1, 0x40, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x90, 0x18, 0x8c, 0x64, 0x93, 0x6, 0xb0, 0x3, 0xe0, 0xe, 0xb8, 0x38, 0x8e, 0x3, 0x80 },
{ 0x91, 0xd8, 0x1, 0x24, 0x21, 0x24, 0x37, 0xff, 0x11, 0x24, 0x1, 0x24, 0x41, 0xfc, 0x60, 0x0, 0x27, 0xff, 0x4, 0x21, 0x14, 0x21, 0x13, 0xfe, 0x12, 0x22, 0x32, 0x22, 0x22, 0x22, 0x22, 0x26, 0x60, 0x20 },
{ 0x91, 0xd9, 0x0, 0x20, 0x3c, 0x20, 0x24, 0x60, 0x24, 0x42, 0x24, 0xc2, 0x3c, 0x9f, 0x25, 0xf1, 0x24, 0x0, 0x24, 0x0, 0x3c, 0xfe, 0x24, 0x82, 0x24, 0x82, 0x24, 0x82, 0x24, 0x82, 0x64, 0x82, 0x4c, 0xfe },
{ 0x91, 0xda, 0x0, 0x0, 0x3d, 0x3e, 0x25, 0xa2, 0x24, 0xa2, 0x24, 0x3e, 0x3c, 0x22, 0x24, 0x22, 0x27, 0xbe, 0x24, 0xa9, 0x3c, 0xaa, 0x24, 0xac, 0x24, 0xa4, 0x24, 0xb6, 0x24, 0xa3, 0x65, 0x40, 0x4d, 0x3f },
{ 0x91, 0xdb, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x2, 0x0, 0x6, 0x18, 0x4, 0xc, 0xf, 0xfe, 0x78, 0x3, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x91, 0xdc, 0x4, 0x48, 0xc, 0x44, 0xb, 0xfe, 0x18, 0x40, 0x38, 0x60, 0x68, 0x32, 0x8, 0x1a, 0x8, 0x8e, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x6, 0x62, 0x1c, 0x34, 0x74, 0x18, 0x7, 0x8c, 0x1c, 0x7 },
{ 0x91, 0xdd, 0x4, 0x48, 0xc, 0x44, 0x1b, 0xff, 0x38, 0x20, 0x68, 0x30, 0x8, 0x19, 0x0, 0xf, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x91, 0xde, 0x0, 0x0, 0x31, 0xfc, 0x19, 0x4, 0x9, 0x4, 0x1, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x79, 0xfd, 0x9, 0x23, 0x9, 0x36, 0x9, 0x10, 0x9, 0x18, 0x9, 0xec, 0x1b, 0x6, 0x34, 0x0, 0x63, 0xff },
{ 0x91, 0xdf, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xfe, 0x8, 0x22, 0x7, 0xff, 0x0, 0x22, 0x3, 0xfe, 0x78, 0x20, 0xb, 0x26, 0x9, 0xac, 0x8, 0x78, 0x9, 0xae, 0xb, 0x23, 0x18, 0x60, 0x34, 0x0, 0x63, 0xff },
{ 0x91, 0xe0, 0x0, 0x84, 0x3e, 0xcc, 0x22, 0x48, 0x27, 0xff, 0x2c, 0x40, 0x29, 0xa0, 0x28, 0x22, 0x24, 0x56, 0x25, 0x94, 0x24, 0x38, 0x24, 0x58, 0x24, 0x94, 0x2b, 0x16, 0x20, 0x13, 0x20, 0x30, 0x20, 0xe0 },
{ 0x91, 0xe1, 0x4, 0x24, 0xc, 0x22, 0x39, 0xff, 0x68, 0x20, 0x8, 0x11, 0x1f, 0xfd, 0x10, 0x87, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x12, 0x24, 0x61, 0x13 },
{ 0x91, 0xe2, 0x10, 0x0, 0x1e, 0x7f, 0x32, 0x41, 0x24, 0x49, 0x7f, 0x5d, 0x29, 0x49, 0x29, 0x49, 0x3f, 0x5d, 0x29, 0x41, 0x29, 0x5d, 0x3f, 0x55, 0x0, 0x55, 0x55, 0x5d, 0x55, 0x41, 0x55, 0x41, 0x0, 0x83 },
{ 0x91, 0xe3, 0x4, 0x20, 0x4, 0x2c, 0xc, 0x26, 0x8, 0x22, 0x18, 0x20, 0x13, 0xff, 0x30, 0x20, 0x50, 0x20, 0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x18, 0x10, 0x9, 0x10, 0xd, 0x10, 0x7, 0x10, 0x2 },
{ 0x91, 0xe4, 0x2, 0x0, 0x2, 0x0, 0x6, 0x8, 0x4, 0xc, 0xc, 0x4, 0x8, 0xfe, 0x7f, 0x83, 0x0, 0x1, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x91, 0xe5, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x91, 0xe6, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x64, 0x90, 0x2, 0x8, 0x3f, 0xfc, 0x0, 0x84, 0x3f, 0xfc, 0x20, 0x80, 0x20, 0x80, 0x3f, 0xfe, 0x2, 0x82, 0x6, 0x82, 0x1c, 0x86, 0x70, 0x9c, 0x0, 0x80 },
{ 0x91, 0xe7, 0x0, 0x0, 0x7f, 0x7e, 0x14, 0x42, 0x14, 0x7e, 0x7f, 0x42, 0x55, 0x42, 0x55, 0x7e, 0x55, 0x0, 0x67, 0xff, 0x41, 0x10, 0x41, 0x10, 0x7f, 0x1e, 0x41, 0x50, 0x41, 0x50, 0x7f, 0x70, 0x0, 0x9f },
{ 0x91, 0xe8, 0x0, 0x0, 0x3e, 0xff, 0x22, 0x10, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x7e, 0x0, 0x42, 0x7f, 0x42, 0x8, 0x7e, 0x28, 0x42, 0x2f, 0x42, 0x28, 0x7e, 0x28, 0x24, 0x78, 0x42, 0x4f, 0xff },
{ 0x91, 0xe9, 0x0, 0x40, 0x3f, 0xff, 0x24, 0x88, 0x2d, 0xfe, 0x2b, 0x10, 0x39, 0xfe, 0x29, 0x10, 0x29, 0xff, 0x2a, 0x0, 0x27, 0xf8, 0x24, 0x8, 0x27, 0xf8, 0x64, 0x8, 0x47, 0xfe, 0x4a, 0xa2, 0x12, 0x96 },
{ 0x91, 0xea, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x11, 0x4, 0x0, 0x88, 0x47, 0xff, 0x60, 0x0, 0x23, 0xfe, 0x2, 0x22, 0xa, 0x22, 0xb, 0xfe, 0x1a, 0x22, 0x12, 0x22, 0x33, 0xfe, 0x20, 0x21, 0x60, 0x1f },
{ 0x91, 0xeb, 0x21, 0x10, 0x31, 0x10, 0x1f, 0xff, 0x4, 0x50, 0x2, 0x9f, 0x4f, 0xe1, 0x60, 0x1f, 0x27, 0xd0, 0x4, 0x5f, 0x17, 0xd0, 0x14, 0x5f, 0x17, 0xd0, 0x34, 0x5f, 0x24, 0x50, 0x24, 0x51, 0x64, 0xcf },
{ 0x91, 0xec, 0x0, 0x80, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x91, 0xed, 0x0, 0x0, 0x7, 0xff, 0x78, 0x40, 0x48, 0xc0, 0x49, 0xa2, 0x4f, 0x22, 0x48, 0x76, 0x48, 0xd4, 0x49, 0x90, 0x4f, 0x38, 0x78, 0x58, 0x0, 0xdc, 0x1, 0x94, 0x3, 0x16, 0xe, 0x33, 0x0, 0xe0 },
{ 0x91, 0xee, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x32, 0x21, 0xe2, 0x1f, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x2, 0x1, 0x86, 0x0, 0xfc },
{ 0x91, 0xef, 0x10, 0x6, 0x10, 0x3c, 0x11, 0xe0, 0x10, 0x20, 0x7c, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x1c, 0x20, 0x70, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x21, 0x10, 0x33, 0x70, 0x1e },
{ 0x91, 0xf0, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x7d, 0x2, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x10, 0x1d, 0x10, 0x71, 0x10, 0x11, 0x18, 0x11, 0x8, 0x11, 0xc, 0x13, 0x4, 0x12, 0x6, 0x36, 0x3 },
{ 0x91, 0xf1, 0x10, 0x0, 0x17, 0xff, 0x10, 0x40, 0x10, 0x40, 0x7c, 0x40, 0x10, 0xc0, 0x10, 0x80, 0x10, 0xfe, 0x1d, 0x82, 0x73, 0x82, 0x16, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x30, 0xfe },
{ 0x91, 0xf2, 0x0, 0x0, 0x31, 0xfe, 0x19, 0x2, 0x9, 0x2, 0x1, 0x2, 0x61, 0x2, 0x31, 0xfe, 0x11, 0x10, 0x1, 0x10, 0x9, 0x10, 0x9, 0x18, 0x19, 0x8, 0x13, 0xc, 0x32, 0x4, 0x26, 0x6, 0x6c, 0x3 },
{ 0x91, 0xf3, 0x0, 0x0, 0x27, 0xdf, 0x30, 0x41, 0x17, 0xdf, 0x0, 0x41, 0x47, 0xdf, 0x60, 0x88, 0x21, 0x10, 0x3, 0xff, 0x16, 0x20, 0x13, 0xfe, 0x12, 0x20, 0x33, 0xfe, 0x22, 0x20, 0x22, 0x20, 0x63, 0xff },
{ 0x91, 0xf4, 0x0, 0x0, 0x7d, 0xfe, 0x10, 0x40, 0x10, 0xc0, 0x11, 0xa2, 0x13, 0x26, 0x78, 0x74, 0x10, 0xd0, 0x11, 0x90, 0x13, 0x38, 0x10, 0x58, 0x1c, 0xd4, 0x71, 0x96, 0x3, 0x13, 0x6, 0x30, 0x0, 0xe0 },
{ 0x91, 0xf5, 0x0, 0x6, 0x3c, 0x1c, 0x0, 0xf0, 0x7e, 0x20, 0x0, 0x20, 0x3c, 0x20, 0x0, 0x20, 0x1, 0xff, 0x3c, 0x20, 0x0, 0x20, 0x0, 0x20, 0x3c, 0x20, 0x24, 0x20, 0x24, 0x21, 0x24, 0x33, 0x3c, 0x1e },
{ 0x91, 0xf6, 0x10, 0x0, 0x38, 0xfe, 0x2c, 0xaa, 0x64, 0xaa, 0x40, 0xfe, 0x7c, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x44, 0x54, 0x28, 0x55, 0xff, 0x50, 0x10, 0x1c, 0xfe, 0x30, 0x10, 0x60, 0x10 },
{ 0x91, 0xf7, 0x0, 0x0, 0x27, 0xfe, 0x34, 0x92, 0x14, 0x92, 0x7, 0xfe, 0x41, 0x0, 0x63, 0xff, 0x26, 0x41, 0xf, 0xf9, 0x12, 0x49, 0x12, 0x49, 0x13, 0xf9, 0x30, 0x51, 0x21, 0xfb, 0x27, 0xa, 0x60, 0x6 },
{ 0x91, 0xf8, 0x0, 0x44, 0x3c, 0x44, 0x1, 0xff, 0x7e, 0x44, 0x0, 0x44, 0x3c, 0x20, 0x0, 0x20, 0x1, 0xff, 0x3c, 0x40, 0x0, 0x40, 0x0, 0xfe, 0x3d, 0x42, 0x24, 0x42, 0x24, 0x42, 0x24, 0x42, 0x3c, 0x7e },
{ 0x91, 0xf9, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x1f, 0x7, 0xf0, 0x7c, 0x10, 0x0, 0x10 },
{ 0x91, 0xfa, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x84, 0x10, 0x84, 0x17, 0xf4, 0x14, 0x94, 0x14, 0x94, 0x14, 0x94, 0x14, 0x94, 0x14, 0x94, 0x14, 0x94, 0x14, 0xb5, 0x30, 0x85, 0x20, 0x87, 0x60, 0x2 },
{ 0x91, 0xfb, 0x10, 0x10, 0x11, 0x11, 0x11, 0x93, 0x7e, 0x92, 0x52, 0x10, 0x52, 0xfe, 0x52, 0x82, 0x52, 0x82, 0x7e, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x14, 0xfe, 0x14, 0x82, 0x1e, 0x82, 0x72, 0x82, 0x0, 0x8e },
{ 0x91, 0xfc, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6 },
{ 0x92, 0x40, 0x0, 0x0, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x4e, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40 },
{ 0x92, 0x41, 0x4, 0x0, 0x5, 0xfc, 0xd, 0x4, 0x9, 0x4, 0x19, 0x4, 0x11, 0x4, 0x31, 0xfc, 0x51, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x17, 0xff, 0x10, 0x0 },
{ 0x92, 0x42, 0x0, 0x20, 0x30, 0x20, 0x19, 0xfe, 0x8, 0x20, 0x3, 0xff, 0x0, 0x84, 0x0, 0x48, 0x7b, 0xff, 0x8, 0x20, 0x9, 0xfe, 0x8, 0x20, 0xb, 0xff, 0x8, 0x20, 0x18, 0x20, 0x34, 0x0, 0x63, 0xff },
{ 0x92, 0x43, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x13, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xff, 0x12, 0x40, 0x12, 0x42, 0x12, 0x66, 0x12, 0x2c, 0x32, 0x30, 0x22, 0x18, 0x63, 0xcc, 0xe, 0x7 },
{ 0x92, 0x44, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0xc, 0x18, 0x72, 0x47, 0x7, 0xfc, 0x18, 0x80, 0x6f, 0xf8, 0x8, 0x80, 0xf, 0xf8, 0x8, 0x80, 0xf, 0xfe, 0x0, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x2, 0x70 },
{ 0x92, 0x45, 0x0, 0x84, 0x3c, 0xcc, 0x24, 0x48, 0x25, 0xfe, 0x25, 0x2, 0x3d, 0x2, 0x25, 0x2, 0x25, 0x2, 0x25, 0xfe, 0x3c, 0x48, 0x24, 0x48, 0x24, 0x48, 0x24, 0x48, 0x24, 0xc9, 0x64, 0x89, 0x4d, 0x87 },
{ 0x92, 0x46, 0x0, 0x0, 0x3f, 0x7e, 0x1, 0x2, 0x3f, 0x7e, 0x20, 0x40, 0x21, 0x42, 0x1f, 0x3e, 0x0, 0x0, 0x2, 0x20, 0x1f, 0xfc, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x92, 0x47, 0x0, 0x0, 0x3f, 0x7e, 0x24, 0x22, 0x3f, 0x36, 0x21, 0x14, 0x3f, 0x1c, 0x24, 0x36, 0x3f, 0x63, 0x0, 0x0, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0x48, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0xa, 0x22, 0x2, 0x22, 0x2, 0x22, 0x2, 0x22, 0x7a, 0x22, 0xa, 0x22, 0xa, 0x22, 0xa, 0x22, 0xa, 0x22, 0xb, 0xfe, 0x18, 0x0, 0x34, 0x0, 0x63, 0xff },
{ 0x92, 0x49, 0x10, 0x0, 0x13, 0xde, 0x12, 0x52, 0x7e, 0x52, 0x12, 0x52, 0x13, 0xde, 0x3a, 0x52, 0x36, 0x52, 0x32, 0x52, 0x53, 0xde, 0x52, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x14, 0xa6 },
{ 0x92, 0x4a, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x38, 0x8e, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x92, 0x4b, 0x4, 0x0, 0x45, 0xfe, 0x29, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x29, 0x22, 0x49, 0x22, 0x9, 0x22, 0x19, 0xfe, 0x18, 0x20, 0x28, 0x20, 0x49, 0xfe, 0x8, 0x20, 0x8, 0x20, 0x1b, 0xff, 0x70, 0x0 },
{ 0x92, 0x4c, 0x10, 0x0, 0x1e, 0xff, 0x32, 0x10, 0x24, 0xff, 0x7e, 0x91, 0x2a, 0xdd, 0x2a, 0x91, 0x3e, 0x5c, 0x2a, 0x0, 0x2a, 0x7e, 0x3e, 0x2, 0x0, 0x2, 0x55, 0x7e, 0x55, 0x2, 0x54, 0x2, 0x40, 0x7e },
{ 0x92, 0x4d, 0x10, 0x84, 0x10, 0x48, 0x13, 0xff, 0x7c, 0x50, 0x11, 0xfe, 0x11, 0x52, 0x39, 0x9e, 0x35, 0x2, 0x35, 0xfe, 0x51, 0x2, 0x51, 0xfe, 0x10, 0x4, 0x13, 0xff, 0x10, 0x84, 0x10, 0x44, 0x10, 0x1c },
{ 0x92, 0x4e, 0x0, 0x44, 0x3c, 0x4c, 0x0, 0x48, 0x7e, 0xff, 0x0, 0x88, 0x3d, 0x88, 0x2, 0x88, 0x0, 0xfe, 0x3c, 0x88, 0x0, 0x88, 0x0, 0x88, 0x3c, 0xfe, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x3c, 0xff },
{ 0x92, 0x4f, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x9, 0x88, 0x8, 0xc8, 0x8, 0x48, 0x8, 0x8, 0x7f, 0xff, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0x10, 0x8, 0x30, 0x8, 0x60, 0x38 },
{ 0x92, 0x50, 0x11, 0x4, 0x19, 0x8c, 0x8, 0x88, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x92, 0x51, 0x0, 0x88, 0x7, 0xff, 0x78, 0x88, 0x48, 0x0, 0x4b, 0xfe, 0x4a, 0x22, 0x4a, 0x22, 0x4b, 0xfe, 0x48, 0x20, 0x49, 0xfc, 0x48, 0x20, 0x7b, 0xff, 0x0, 0x50, 0x0, 0xd8, 0x1, 0x8c, 0x7, 0x7 },
{ 0x92, 0x52, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x7d, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x1d, 0x4, 0x71, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x7, 0xff, 0x0, 0x0 },
{ 0x92, 0x53, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x7d, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x1d, 0x4, 0x71, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x17, 0xff, 0x30, 0x0 },
{ 0x92, 0x54, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x52, 0x12, 0x52, 0x7c, 0xd0, 0x11, 0x9f, 0x13, 0x0, 0x10, 0x20, 0x1c, 0x20, 0x73, 0xff, 0x10, 0xa8, 0x10, 0xa8, 0x11, 0xac, 0x13, 0x26, 0x16, 0x23, 0x30, 0x20 },
{ 0x92, 0x55, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0x56, 0x11, 0x10, 0x7f, 0xd0, 0x11, 0x10, 0x0, 0x1f, 0x3f, 0xb1, 0x24, 0xab, 0x24, 0xea, 0x3f, 0x88, 0x4, 0x8, 0x3f, 0x9c, 0x4, 0x14, 0x7f, 0xd4, 0xa, 0x14, 0x1b, 0x36, 0x31, 0xa2, 0x60, 0x63 },
{ 0x92, 0x57, 0x0, 0x20, 0x31, 0x22, 0x19, 0x26, 0xb, 0x74, 0x2, 0x50, 0x60, 0xd8, 0x31, 0x8c, 0x13, 0x27, 0x0, 0x20, 0x9, 0x26, 0xb, 0x2c, 0x1a, 0x70, 0x10, 0x50, 0x30, 0xd8, 0x21, 0x8c, 0x67, 0x7 },
{ 0x92, 0x58, 0x1, 0x4, 0x27, 0xff, 0x31, 0x4, 0x11, 0x4, 0x1, 0xfc, 0x41, 0x4, 0x61, 0x4, 0x21, 0xfc, 0x1, 0x4, 0x11, 0x4, 0x1f, 0xff, 0x12, 0x48, 0x32, 0x48, 0x23, 0x8f, 0x22, 0x0, 0x63, 0xff },
{ 0x92, 0x59, 0x0, 0x80, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x40, 0x12, 0x44, 0x12, 0x4c, 0x16, 0x58, 0x14, 0xe0, 0x30, 0xb0, 0x21, 0x98, 0x63, 0xc, 0xe, 0x7 },
{ 0x92, 0x5a, 0x10, 0x0, 0x10, 0xff, 0x3f, 0x0, 0x28, 0x0, 0x68, 0x7e, 0x8, 0x42, 0x7f, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x1c, 0x0, 0x16, 0x42, 0x13, 0x66, 0x31, 0x24, 0x20, 0x4, 0x60, 0xff, 0x0, 0x0 },
{ 0x92, 0x5b, 0x8, 0x10, 0x9, 0x11, 0x9, 0x11, 0x7f, 0x11, 0x1, 0xff, 0x24, 0x0, 0x25, 0xff, 0x24, 0x10, 0x2c, 0x20, 0x29, 0xff, 0x9, 0x49, 0xf, 0x49, 0x39, 0x49, 0x61, 0x49, 0x1, 0x49, 0x1, 0x4b },
{ 0x92, 0x5c, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x28, 0x90, 0x44, 0x8, 0x11, 0x4, 0x8, 0x88, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80 },
{ 0x92, 0x5d, 0x8, 0x10, 0x18, 0x10, 0x11, 0xff, 0x65, 0x1, 0x2d, 0x1, 0x18, 0xfe, 0x10, 0x10, 0x24, 0x10, 0x7e, 0x90, 0x12, 0x9e, 0x10, 0x90, 0x54, 0x90, 0x54, 0x90, 0x54, 0xd0, 0x11, 0xb0, 0x13, 0x1f },
{ 0x92, 0x5e, 0x0, 0x10, 0x7e, 0x10, 0x24, 0x10, 0x24, 0xff, 0x24, 0x91, 0x3c, 0x91, 0x24, 0x10, 0x24, 0x10, 0x24, 0x38, 0x3c, 0x28, 0x24, 0x28, 0x24, 0x28, 0x24, 0x68, 0x3c, 0x49, 0x64, 0xc9, 0x5, 0x87 },
{ 0x92, 0x5f, 0x0, 0x0, 0x3c, 0xfc, 0x24, 0x84, 0x24, 0x84, 0x24, 0x84, 0x3c, 0x84, 0x24, 0xfc, 0x24, 0x84, 0x24, 0x84, 0x3c, 0x84, 0x24, 0x84, 0x24, 0xfc, 0x24, 0x0, 0x24, 0x0, 0x65, 0xff, 0x4c, 0x0 },
{ 0x92, 0x60, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x81, 0x8, 0x80, 0x8, 0xfc, 0x1e, 0x80, 0x33, 0x80, 0x60, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x82, 0x0, 0xff, 0x7f, 0x81 },
{ 0x92, 0x61, 0x0, 0x2, 0x3b, 0xce, 0x0, 0xb8, 0x7c, 0x88, 0x1, 0x8, 0x39, 0x28, 0x3, 0xae, 0x0, 0xa8, 0x3a, 0xa8, 0x2, 0xa8, 0x2, 0xa8, 0x3b, 0xa8, 0x29, 0x7e, 0x29, 0x0, 0x2b, 0xc0, 0x3a, 0x7f },
{ 0x92, 0x62, 0x10, 0x60, 0x39, 0xde, 0x2d, 0x12, 0x65, 0x12, 0x1, 0xd2, 0x7d, 0x23, 0x11, 0x0, 0x11, 0xc0, 0x7d, 0x3e, 0x11, 0x12, 0x55, 0x16, 0x55, 0xcc, 0x53, 0x8, 0x11, 0x1c, 0x1d, 0x36, 0x71, 0x63 },
{ 0x92, 0x63, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x22, 0x20, 0x22, 0x2f, 0xfa, 0x20, 0x22, 0x22, 0x22, 0x23, 0x22, 0x21, 0x22, 0x20, 0x22, 0x20, 0x22, 0x20, 0xe2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x92, 0x64, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0, 0x13, 0xfe, 0x7e, 0x2, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x13, 0xfe, 0x1d, 0x4, 0x71, 0xfc, 0x1, 0x4, 0x1, 0xfc, 0x1, 0x4, 0x7, 0xff },
{ 0x92, 0x65, 0x2, 0x42, 0x7b, 0x66, 0x9, 0x24, 0xb, 0xfe, 0xa, 0x22, 0x3a, 0x22, 0x23, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3b, 0xfe, 0x8, 0x20, 0x8, 0x20, 0xf, 0xff, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20 },
{ 0x92, 0x66, 0x0, 0x2, 0x22, 0xe, 0x2a, 0xb8, 0x2a, 0xa0, 0x2a, 0xa0, 0x22, 0x20, 0x2f, 0xbf, 0x22, 0x24, 0x27, 0x24, 0x26, 0xa4, 0x2a, 0xa4, 0x22, 0x24, 0x22, 0x24, 0x20, 0x24, 0x3f, 0xe4, 0x0, 0x44 },
{ 0x92, 0x67, 0x0, 0xc, 0x0, 0x78, 0x7b, 0xc2, 0x49, 0x26, 0x48, 0x94, 0x4b, 0xff, 0x48, 0x40, 0x7b, 0xff, 0x48, 0x40, 0x48, 0x7c, 0x48, 0xc4, 0x48, 0xac, 0x79, 0x98, 0x3, 0x30, 0x6, 0x6c, 0x1, 0xc7 },
{ 0x92, 0x68, 0x10, 0x20, 0x13, 0xff, 0x10, 0x0, 0x7d, 0xfe, 0x11, 0x2, 0x11, 0x7a, 0x39, 0x4a, 0x35, 0x7a, 0x35, 0x2, 0x51, 0xfe, 0x50, 0x84, 0x10, 0xfc, 0x10, 0x84, 0x10, 0xfc, 0x10, 0x84, 0x13, 0xff },
{ 0x92, 0x69, 0x2, 0x0, 0xe, 0xf8, 0x38, 0x88, 0x20, 0x88, 0x20, 0x88, 0x3d, 0x88, 0x23, 0xf, 0x20, 0x0, 0x3d, 0xfc, 0x20, 0x84, 0x20, 0xcc, 0x20, 0x48, 0x3c, 0x58, 0x60, 0x30, 0x20, 0xec, 0x23, 0x87 },
{ 0x92, 0x6a, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x82, 0x1, 0x82, 0x3, 0x6, 0xe, 0x4, 0x38, 0x1c },
{ 0x92, 0x6b, 0x0, 0x10, 0x3c, 0x91, 0x0, 0x93, 0x7e, 0xba, 0x1, 0x28, 0x3c, 0x6c, 0x0, 0xc6, 0x1, 0x93, 0x3c, 0x10, 0x0, 0x91, 0x0, 0x93, 0x3d, 0xba, 0x25, 0x28, 0x24, 0x6c, 0x24, 0xc6, 0x3d, 0x83 },
{ 0x92, 0x6c, 0x8, 0x20, 0x8, 0x20, 0xf, 0xff, 0x18, 0x20, 0x11, 0xfc, 0x35, 0x4, 0x35, 0x4, 0x55, 0xfc, 0x15, 0x4, 0x15, 0x4, 0x15, 0xfc, 0x15, 0x4, 0x15, 0x4, 0x15, 0xfc, 0x14, 0x0, 0x17, 0xff },
{ 0x92, 0x6d, 0x10, 0x0, 0x10, 0x0, 0x3f, 0x7e, 0x24, 0x42, 0x64, 0x42, 0x4, 0x42, 0x4, 0x42, 0x7f, 0xc2, 0x4, 0x42, 0x4, 0x42, 0xe, 0x42, 0xa, 0x42, 0x1b, 0x42, 0x11, 0x7e, 0x31, 0x80, 0x60, 0x0 },
{ 0x92, 0x6e, 0x0, 0x10, 0x10, 0x90, 0x10, 0x90, 0x10, 0x96, 0x10, 0x9a, 0x7c, 0xb2, 0x10, 0xd2, 0x13, 0x92, 0x10, 0x92, 0x10, 0x92, 0x10, 0x96, 0x1c, 0x90, 0x70, 0x80, 0x0, 0x81, 0x0, 0xc3, 0x0, 0x7e },
{ 0x92, 0x6f, 0x0, 0x10, 0x7c, 0x90, 0x4, 0x90, 0x4, 0x96, 0x4, 0x9a, 0x3c, 0xb2, 0x20, 0xd2, 0x23, 0x92, 0x20, 0x92, 0x3c, 0x92, 0x4, 0x96, 0x4, 0x90, 0x4, 0x80, 0xc, 0x81, 0x8, 0xc3, 0x38, 0x7e },
{ 0x92, 0x70, 0x0, 0x0, 0x7e, 0x30, 0x24, 0x10, 0x24, 0x18, 0x3c, 0x48, 0x24, 0x40, 0x24, 0x40, 0x24, 0x42, 0x3d, 0x43, 0x25, 0x41, 0x25, 0x41, 0x25, 0x40, 0x3e, 0x42, 0x64, 0x66, 0x4, 0x3c, 0x4, 0x0 },
{ 0x92, 0x71, 0x10, 0x0, 0x1f, 0x7e, 0x24, 0x42, 0x4, 0x42, 0x7f, 0xc2, 0x4, 0x42, 0xe, 0x42, 0x1b, 0x7e, 0x70, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x92, 0x72, 0x0, 0x20, 0x31, 0x20, 0x19, 0x20, 0x9, 0x26, 0x1, 0x3a, 0x61, 0x62, 0x31, 0xa2, 0x17, 0x22, 0x1, 0x22, 0x9, 0x22, 0x9, 0x26, 0x19, 0x20, 0x11, 0x0, 0x31, 0x1, 0x21, 0x83, 0x60, 0xfe },
{ 0x92, 0x73, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x52, 0x0, 0x33, 0xde, 0x15, 0x12, 0x11, 0x12, 0x11, 0x12, 0x3f, 0xf2, 0x51, 0x12, 0x13, 0x92, 0x32, 0x92, 0x22, 0xd2, 0x66, 0x5e, 0xc, 0x0 },
{ 0x92, 0x74, 0x2, 0x24, 0xe, 0x2c, 0x78, 0x28, 0x8, 0x7f, 0x8, 0x48, 0x7e, 0xc8, 0x9, 0x48, 0x8, 0x7e, 0x1c, 0x48, 0x1a, 0x48, 0x2a, 0x48, 0x28, 0x7e, 0x48, 0x48, 0x8, 0x48, 0x8, 0x48, 0x8, 0x7f },
{ 0x92, 0x75, 0x0, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x7, 0xf8, 0x24, 0x8, 0x27, 0xf8, 0x24, 0x8, 0x27, 0xf8, 0x24, 0x8, 0x27, 0xf8, 0x20, 0x0, 0x3f, 0xff },
{ 0x92, 0x76, 0x0, 0x20, 0x7e, 0x20, 0x10, 0x20, 0x10, 0x7f, 0x32, 0x44, 0x22, 0xc4, 0x2f, 0x24, 0x79, 0x2c, 0x8, 0x28, 0x8, 0x38, 0x7f, 0x10, 0x8, 0x38, 0x8, 0x28, 0xb, 0x6c, 0x1e, 0xc6, 0x71, 0x83 },
{ 0x92, 0x77, 0x10, 0x80, 0x10, 0x80, 0x10, 0x8f, 0x7d, 0xf9, 0x56, 0x49, 0x54, 0x49, 0x54, 0x49, 0x57, 0xf9, 0x7c, 0x49, 0x10, 0x49, 0x10, 0x49, 0x14, 0xe9, 0x1c, 0xa9, 0x35, 0xaf, 0x63, 0x10, 0x6, 0x0 },
{ 0x92, 0x78, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x2, 0x3, 0xfe, 0x2, 0x44, 0x2, 0x28, 0x7a, 0xfe, 0xa, 0x10, 0xa, 0xfe, 0xa, 0x10, 0xd, 0xff, 0x8, 0x10, 0x18, 0x10, 0x34, 0x0, 0x63, 0xff },
{ 0x92, 0x79, 0x0, 0x8, 0x3f, 0xa8, 0x24, 0x28, 0x24, 0x2e, 0x3f, 0x2a, 0x24, 0x3a, 0x24, 0x2a, 0x3f, 0x6a, 0x24, 0x2a, 0x24, 0x2a, 0x3f, 0xae, 0x0, 0xa8, 0x55, 0xa8, 0x54, 0xa1, 0x41, 0xb3, 0x3, 0x1e },
{ 0x92, 0x7a, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x24, 0x90, 0x42, 0x8, 0x3f, 0x7c, 0x8, 0x44, 0x8, 0x54, 0xf, 0x55, 0x78, 0x83, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0xe, 0xb8, 0x78, 0x8f, 0x0, 0x80 },
{ 0x92, 0x7b, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x0, 0x2, 0x10, 0x1c, 0x24, 0x6, 0x42, 0x1, 0xff, 0x7f, 0x1, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x92, 0x7c, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x1f, 0xbf, 0x14, 0x28, 0x34, 0x68, 0x64, 0xc8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x38 },
{ 0x92, 0x7d, 0x10, 0x20, 0x10, 0x20, 0x1f, 0x7f, 0x34, 0x90, 0x66, 0x18, 0x2, 0x8, 0x0, 0x0, 0x3e, 0xfc, 0x8, 0x84, 0x8, 0xa4, 0x8, 0xb4, 0x8, 0x94, 0xe, 0x84, 0x39, 0x85, 0x61, 0x5, 0x3, 0x3 },
{ 0x92, 0x7e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x2, 0x0, 0xc, 0x24, 0x3, 0x42, 0x7f, 0xff, 0x0, 0x1, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc },
{ 0x92, 0x80, 0x0, 0x0, 0x33, 0xff, 0x18, 0x20, 0x8, 0x60, 0x0, 0xd2, 0x3, 0xb6, 0x0, 0x7c, 0x78, 0xd0, 0xb, 0xb8, 0x8, 0x7c, 0x8, 0xd6, 0xb, 0x93, 0x8, 0x30, 0x18, 0xe0, 0x34, 0x0, 0x63, 0xff },
{ 0x92, 0x81, 0x2, 0x10, 0xe, 0x90, 0x78, 0x90, 0x8, 0xfe, 0x9, 0x90, 0x7f, 0x10, 0x8, 0x10, 0x9, 0xff, 0x1c, 0x10, 0x1a, 0x38, 0x2a, 0x28, 0x28, 0x28, 0x48, 0x6c, 0x8, 0x44, 0x8, 0xc6, 0x9, 0x83 },
{ 0x92, 0x82, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x24, 0x22, 0x78, 0x3f, 0x0, 0x0, 0x3f, 0xff, 0x2, 0x10, 0x4, 0x8, 0x1f, 0xf4, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0x83, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x9c, 0x70, 0x87, 0xf, 0xf8, 0x0, 0x80, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x92, 0x84, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x10, 0x82, 0x7c, 0x44, 0x15, 0xff, 0x15, 0x11, 0x15, 0x11, 0x35, 0x7d, 0x25, 0x11, 0x2d, 0x7d, 0x79, 0x45, 0xd, 0x45, 0x1b, 0x7d, 0x31, 0x1, 0x61, 0x3 },
{ 0x92, 0x85, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x0, 0x7, 0xfc, 0xc, 0x4, 0x1f, 0xfc, 0x74, 0x4, 0x7, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x92, 0x86, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x92, 0x87, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x1b, 0xff, 0x12, 0x21, 0x32, 0x21, 0x52, 0x21, 0x12, 0x21, 0x12, 0x21, 0x13, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x92, 0x88, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x92, 0x89, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x14, 0xc6, 0x14, 0x63, 0x34, 0x25, 0x26, 0xc, 0x63, 0xf8 },
{ 0x92, 0x8a, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x7b, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x1a, 0x22, 0x73, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x30, 0x0 },
{ 0x92, 0x8b, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x10, 0x18, 0x8, 0x17, 0xfc, 0x34, 0x16, 0x67, 0xf3, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0x8c, 0x10, 0xc0, 0x10, 0x60, 0x10, 0x20, 0x7c, 0x0, 0x13, 0xfe, 0x10, 0x20, 0x38, 0x20, 0x34, 0x20, 0x30, 0x20, 0x53, 0xfe, 0x50, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x0 },
{ 0x92, 0x8d, 0x0, 0xc0, 0x30, 0x60, 0x18, 0x20, 0x8, 0x0, 0x3, 0xfe, 0x60, 0x20, 0x30, 0x20, 0x10, 0x20, 0x0, 0x20, 0xb, 0xfe, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x27, 0xff, 0x60, 0x0 },
{ 0x92, 0x8e, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x84, 0x0, 0x84, 0x0, 0xfe, 0x7, 0x82, 0x3c, 0x2, 0x0, 0x0 },
{ 0x92, 0x8f, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x82, 0x4, 0xc6, 0x1c, 0x4c, 0x74, 0x68, 0x4, 0x30, 0x7, 0x9c, 0x3c, 0x7 },
{ 0x92, 0x90, 0x0, 0x20, 0x3c, 0x30, 0x0, 0x10, 0x7e, 0xfe, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0x10, 0x3c, 0xfe, 0x0, 0x10, 0x0, 0x10, 0x3c, 0x10, 0x24, 0x10, 0x24, 0x10, 0x25, 0xff, 0x3c, 0x0 },
{ 0x92, 0x91, 0x0, 0x4, 0x7f, 0x4, 0x14, 0x4, 0x14, 0x4, 0x7f, 0x7f, 0x55, 0x4, 0x55, 0x4, 0x55, 0x64, 0x55, 0x34, 0x67, 0x14, 0x41, 0x4, 0x41, 0x4, 0x7f, 0x4, 0x41, 0x4, 0x41, 0x4, 0x7f, 0x1c },
{ 0x92, 0x92, 0x10, 0x20, 0x38, 0x20, 0x2d, 0xff, 0x64, 0x20, 0x40, 0xfe, 0x7c, 0x20, 0x11, 0xff, 0x10, 0x40, 0x7c, 0x42, 0x11, 0xff, 0x54, 0x42, 0x54, 0xd2, 0x50, 0x9a, 0x1d, 0x8a, 0x33, 0x2, 0x60, 0xe },
{ 0x92, 0x93, 0x0, 0x10, 0x3f, 0x98, 0x24, 0x8, 0x24, 0x0, 0x3f, 0x7f, 0x24, 0x8, 0x24, 0x8, 0x3f, 0x8, 0x24, 0x8, 0x24, 0x7f, 0x3f, 0x88, 0x0, 0x88, 0x55, 0x88, 0x54, 0x88, 0x41, 0x88, 0x3, 0x7f },
{ 0x92, 0x94, 0x10, 0x0, 0x13, 0xff, 0x10, 0x20, 0x7f, 0xff, 0x12, 0x21, 0x13, 0xad, 0x32, 0x21, 0x39, 0xac, 0x34, 0x0, 0x51, 0xfe, 0x50, 0x0, 0x13, 0xff, 0x10, 0x80, 0x11, 0xfe, 0x10, 0x2, 0x10, 0xe },
{ 0x92, 0x95, 0x20, 0x9, 0x3f, 0xc9, 0x12, 0x3f, 0x2, 0xa, 0x5, 0x2a, 0x49, 0x4c, 0x63, 0xbf, 0x25, 0x8, 0x9, 0x10, 0x1, 0x3e, 0x13, 0x52, 0x15, 0x92, 0x19, 0x5e, 0x31, 0x32, 0x23, 0x12, 0x66, 0x1e },
{ 0x92, 0x96, 0x4, 0x42, 0x44, 0x42, 0x2b, 0xfe, 0x10, 0x44, 0x10, 0x4c, 0x28, 0x48, 0x4f, 0xff, 0x8, 0x20, 0x18, 0x40, 0x19, 0xfc, 0x2f, 0x4, 0x49, 0x4, 0x9, 0xfc, 0x9, 0x4, 0x19, 0x4, 0x71, 0xfc },
{ 0x92, 0x97, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x92, 0x98, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x98, 0x0, 0xb0, 0x7f, 0xff, 0x1, 0xc0, 0x7, 0xf8, 0x1c, 0x8, 0x77, 0xf8, 0x4, 0x8, 0x4, 0x8, 0x7, 0xf8 },
{ 0x92, 0x99, 0x0, 0x10, 0x3c, 0x10, 0x25, 0xff, 0x25, 0x1, 0x3d, 0x1, 0x24, 0x0, 0x25, 0xff, 0x24, 0x10, 0x3c, 0x10, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0x3c, 0x10, 0x14, 0x10, 0x36, 0x10, 0x62, 0x70 },
{ 0x92, 0x9a, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x92, 0x9b, 0x2, 0x40, 0x2, 0x40, 0x2, 0x44, 0x32, 0x4c, 0x1a, 0x58, 0xa, 0x70, 0x2, 0x40, 0x2, 0x40, 0xe, 0x70, 0x3a, 0x5c, 0x62, 0x47, 0x6, 0x40, 0x4, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x92, 0x9c, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x22, 0x2, 0xfa, 0x2, 0x22, 0x2, 0x22, 0x2, 0xfa, 0xa, 0x2, 0xa, 0xfa, 0x1a, 0x8a, 0x12, 0x8a, 0x32, 0xfa, 0x26, 0x2, 0x64, 0x2, 0xc, 0xe },
{ 0x92, 0x9d, 0x1, 0x24, 0x1, 0x24, 0x7b, 0xff, 0x49, 0x24, 0x49, 0x24, 0x49, 0x3c, 0x49, 0x0, 0x49, 0xfe, 0x48, 0x20, 0x4f, 0xff, 0x78, 0xa8, 0x0, 0xa8, 0x1, 0xac, 0x3, 0x26, 0x6, 0x23, 0x0, 0x20 },
{ 0x92, 0x9e, 0x0, 0x80, 0x3f, 0xfe, 0x24, 0x22, 0x7f, 0xbf, 0x21, 0x20, 0x12, 0x3e, 0x7f, 0x82, 0x0, 0x3e, 0x3f, 0x20, 0x21, 0x3e, 0x3f, 0x20, 0x21, 0x3e, 0x3f, 0x20, 0x21, 0x3e, 0x21, 0x21, 0x23, 0x1f },
{ 0x92, 0x9f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7e, 0x10, 0x52, 0x1f, 0x52, 0x10, 0x52, 0x10, 0x52, 0x10, 0x52, 0x10, 0x52, 0xfe, 0x56, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x92, 0xa0, 0x10, 0x0, 0x10, 0xfe, 0x10, 0x80, 0x7c, 0xfc, 0x54, 0x80, 0x54, 0xfc, 0x54, 0x80, 0x54, 0x80, 0x57, 0xff, 0x54, 0x92, 0x5c, 0x96, 0x10, 0x9c, 0x10, 0x88, 0x10, 0x8c, 0x10, 0xe6, 0x13, 0x83 },
{ 0x92, 0xa1, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20, 0x0, 0xe0 },
{ 0x92, 0xa2, 0x0, 0x0, 0x7f, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x3f, 0xfc, 0x21, 0x0, 0x21, 0x0, 0x21, 0x0, 0x3f, 0xfe, 0x1, 0x2, 0x1, 0x2, 0x1, 0x6, 0x1, 0x4, 0x1, 0x1c, 0x1, 0x0 },
{ 0x92, 0xa3, 0x0, 0x0, 0x7c, 0xfe, 0x4, 0x80, 0x4, 0xfc, 0x4, 0x80, 0x3c, 0xfc, 0x20, 0x80, 0x20, 0x80, 0x23, 0xff, 0x3c, 0xa2, 0x4, 0xb6, 0x4, 0x94, 0x4, 0x98, 0xc, 0x8c, 0x8, 0xe6, 0x3b, 0x83 },
{ 0x92, 0xa4, 0x0, 0x2, 0x3f, 0xe2, 0x20, 0x26, 0x22, 0x24, 0x2f, 0xad, 0x22, 0x21, 0x22, 0x23, 0x2f, 0xa2, 0x20, 0x26, 0x2f, 0xac, 0x28, 0xa1, 0x28, 0xa1, 0x2f, 0xa3, 0x20, 0x22, 0x60, 0x26, 0x40, 0xec },
{ 0x92, 0xa5, 0x8, 0x88, 0x1a, 0xa8, 0x12, 0xa8, 0x32, 0xaf, 0x63, 0xea, 0x8, 0x12, 0x18, 0xa, 0x13, 0xea, 0x30, 0x8a, 0x70, 0x8e, 0x13, 0xe4, 0x10, 0x84, 0x10, 0x8e, 0x10, 0xea, 0x13, 0x9b, 0x10, 0x11 },
{ 0x92, 0xa6, 0x8, 0x88, 0x1a, 0xa8, 0x32, 0xaf, 0x4b, 0xfa, 0x18, 0x12, 0x33, 0xea, 0x50, 0x8e, 0x13, 0xe4, 0x10, 0x8e, 0x13, 0xfb, 0x10, 0x11, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x92, 0xa7, 0x10, 0x50, 0x10, 0x50, 0x12, 0x52, 0x13, 0x56, 0x7d, 0x5c, 0x11, 0x50, 0x10, 0x50, 0x10, 0x50, 0x1c, 0x5c, 0x71, 0xd6, 0x17, 0x52, 0x10, 0x50, 0x10, 0xd0, 0x10, 0x91, 0x11, 0x93, 0x33, 0xe },
{ 0x92, 0xa8, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x7c, 0xfc, 0x54, 0x84, 0x54, 0x84, 0x54, 0xfc, 0x7c, 0x0, 0x57, 0xff, 0x54, 0x80, 0x55, 0xff, 0x7e, 0x49, 0x10, 0x99, 0x13, 0x33, 0x10, 0x62, 0x11, 0x8e },
{ 0x92, 0xa9, 0x8, 0x0, 0x8, 0x3e, 0x7f, 0xa2, 0x8, 0x22, 0x3f, 0x22, 0x21, 0x3e, 0x21, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x3e, 0x3f, 0x22, 0x8, 0x22, 0x7f, 0xa2, 0x8, 0x62, 0x8, 0x42, 0x8, 0xc6 },
{ 0x92, 0xaa, 0x0, 0x80, 0x30, 0x8f, 0x1f, 0xf9, 0x8, 0x89, 0x3, 0xe9, 0x62, 0x2f, 0x32, 0x29, 0x13, 0xe9, 0x2, 0x29, 0xa, 0x2f, 0xb, 0xe9, 0x18, 0x89, 0x17, 0xf9, 0x30, 0x89, 0x20, 0x99, 0x60, 0xb3 },
{ 0x92, 0xab, 0x29, 0x24, 0x29, 0x24, 0x2b, 0xff, 0x29, 0x24, 0x29, 0x24, 0x3d, 0x3c, 0x21, 0x0, 0x21, 0xfe, 0x3c, 0x20, 0x27, 0xff, 0x24, 0xa8, 0x24, 0xa8, 0x25, 0xac, 0x25, 0x26, 0x67, 0x23, 0x44, 0x20 },
{ 0x92, 0xac, 0x0, 0x0, 0x3f, 0x80, 0x24, 0xff, 0x24, 0x84, 0x24, 0x84, 0x24, 0x84, 0x3f, 0x84, 0x24, 0x84, 0x24, 0x84, 0x24, 0x84, 0x24, 0x84, 0x24, 0x84, 0x3f, 0x84, 0x0, 0x4, 0x0, 0x4, 0x0, 0x1c },
{ 0x92, 0xad, 0x0, 0x90, 0x78, 0x90, 0x48, 0x92, 0x4e, 0x96, 0x4b, 0x94, 0x78, 0x90, 0x48, 0x90, 0x48, 0x90, 0x48, 0x9c, 0x7b, 0x96, 0x4e, 0x93, 0x48, 0x90, 0x49, 0x90, 0x79, 0x11, 0x3, 0x13, 0xe, 0xe },
{ 0x92, 0xae, 0x0, 0x10, 0x7e, 0x10, 0x25, 0xff, 0x24, 0x10, 0x3c, 0x10, 0x25, 0xff, 0x25, 0x29, 0x25, 0x29, 0x3d, 0xff, 0x24, 0x0, 0x24, 0x10, 0x24, 0x58, 0x3d, 0x4a, 0x65, 0x43, 0x5, 0x45, 0x5, 0x3c },
{ 0x92, 0xaf, 0x0, 0x0, 0x3c, 0xfe, 0x24, 0x80, 0x24, 0xfc, 0x24, 0x80, 0x3c, 0xfc, 0x24, 0x80, 0x24, 0x80, 0x25, 0xff, 0x3c, 0x92, 0x24, 0x96, 0x24, 0x9c, 0x24, 0x88, 0x24, 0x8c, 0x64, 0xe6, 0x4d, 0x83 },
{ 0x92, 0xb0, 0x0, 0x0, 0x3c, 0xfc, 0x24, 0x84, 0x24, 0xfc, 0x24, 0x84, 0x3c, 0x84, 0x24, 0xfc, 0x24, 0x0, 0x27, 0xff, 0x3c, 0x80, 0x25, 0xff, 0x26, 0x49, 0x24, 0x99, 0x27, 0x33, 0x64, 0x62, 0x4d, 0x8e },
{ 0x92, 0xb1, 0x11, 0x24, 0x11, 0x24, 0x13, 0xff, 0x7d, 0x24, 0x55, 0x24, 0x55, 0x3c, 0x55, 0x0, 0x55, 0xfe, 0x7c, 0x20, 0x13, 0xff, 0x10, 0xa8, 0x14, 0xa8, 0x15, 0xac, 0x1d, 0x26, 0x77, 0x23, 0x0, 0x20 },
{ 0x92, 0xb2, 0x0, 0x0, 0x3c, 0xff, 0x0, 0x81, 0x7e, 0x91, 0x0, 0xbd, 0x3c, 0x91, 0x0, 0x91, 0x0, 0xbd, 0x3c, 0x81, 0x0, 0xbd, 0x0, 0xa5, 0x3c, 0xa5, 0x24, 0xbd, 0x24, 0x81, 0x24, 0x81, 0x3d, 0x7 },
{ 0x92, 0xb3, 0x0, 0x94, 0x3c, 0x94, 0x1, 0xff, 0x7e, 0x94, 0x0, 0x94, 0x3c, 0x9c, 0x0, 0x80, 0x0, 0xfe, 0x3c, 0x10, 0x1, 0xff, 0x0, 0x54, 0x3c, 0x54, 0x24, 0xd6, 0x24, 0x92, 0x25, 0x93, 0x3c, 0x10 },
{ 0x92, 0xb4, 0x8, 0x0, 0x8, 0xfe, 0x3e, 0x22, 0x8, 0x22, 0x8, 0x62, 0x8, 0x42, 0x7e, 0xce, 0x8, 0x0, 0x28, 0x7e, 0x2e, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x38, 0x7e, 0x6e, 0x0, 0x43, 0xff },
{ 0x92, 0xb5, 0x0, 0x28, 0x3e, 0x28, 0x22, 0x29, 0x23, 0xab, 0x22, 0xee, 0x22, 0x28, 0x3e, 0x28, 0x8, 0x28, 0x28, 0x2e, 0x2e, 0xeb, 0x29, 0xa9, 0x28, 0x28, 0x28, 0x68, 0x2e, 0x49, 0x38, 0xc9, 0x61, 0x87 },
{ 0x92, 0xb6, 0x8, 0x28, 0x1c, 0x28, 0x16, 0x29, 0x32, 0xab, 0x20, 0x6e, 0x7e, 0x28, 0x8, 0x28, 0x8, 0x28, 0x7e, 0x2e, 0x8, 0x6b, 0x4a, 0xa9, 0x6a, 0x28, 0x28, 0x68, 0xe, 0x49, 0x38, 0xc9, 0x61, 0x87 },
{ 0x92, 0xb7, 0x0, 0x0, 0xf, 0xfc, 0x8, 0x0, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xf8, 0x8, 0x0, 0x8, 0x0, 0x7f, 0xff, 0x9, 0x4, 0x9, 0x8c, 0x8, 0xd8, 0x8, 0x60, 0x8, 0x30, 0xf, 0x1c, 0x38, 0x7 },
{ 0x92, 0xb8, 0x0, 0x0, 0x1, 0xff, 0x7e, 0x10, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x44, 0x38, 0xc6, 0x1, 0x83 },
{ 0x92, 0xb9, 0x0, 0x80, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0xf, 0xff, 0x20, 0x1, 0x24, 0x91, 0x66, 0xdb, 0x42, 0x4a, 0x0, 0x6 },
{ 0x92, 0xba, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xd0, 0x4, 0x10, 0x3f, 0xbf, 0x24, 0x91, 0x24, 0x91, 0x24, 0x91, 0x3f, 0x91, 0xc, 0x11, 0xe, 0x11, 0x15, 0x31, 0x14, 0xa1, 0x24, 0x63, 0x44, 0xc2, 0x5, 0x8e },
{ 0x92, 0xbb, 0x10, 0x20, 0x11, 0x20, 0x11, 0x3e, 0x11, 0x20, 0x79, 0x20, 0x17, 0xff, 0x10, 0x20, 0x11, 0x24, 0x1b, 0x26, 0x76, 0x23, 0x10, 0x24, 0x10, 0xec, 0x10, 0x18, 0x10, 0x30, 0x10, 0xe0, 0x33, 0x80 },
{ 0x92, 0xbc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x7, 0xf8, 0x24, 0x8, 0x24, 0x8, 0x27, 0xf8, 0x24, 0x8, 0x24, 0x8, 0x27, 0xf8, 0x24, 0x8, 0x24, 0x8, 0x27, 0xf8, 0x20, 0x0, 0x3f, 0xff },
{ 0x92, 0xbd, 0x0, 0x82, 0x3c, 0xc6, 0x24, 0x4c, 0x24, 0x8, 0x24, 0xfe, 0x3c, 0x10, 0x24, 0x10, 0x24, 0x10, 0x25, 0xff, 0x3c, 0x10, 0x24, 0x38, 0x24, 0x28, 0x24, 0x6c, 0x24, 0x44, 0x64, 0xc6, 0x4d, 0x83 },
{ 0x92, 0xbe, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0xb, 0xfe, 0x2, 0x22, 0x62, 0x22, 0x32, 0x22, 0x10, 0x20, 0x0, 0x70, 0x8, 0x50, 0x8, 0x50, 0x18, 0xd0, 0x10, 0x90, 0x31, 0x91, 0x23, 0x1b, 0x66, 0xe },
{ 0x92, 0xbf, 0x0, 0x20, 0x0, 0x70, 0x7c, 0xd8, 0x11, 0x8c, 0x13, 0x6, 0x16, 0x23, 0x10, 0x60, 0x7c, 0xc4, 0x11, 0x8c, 0x10, 0x19, 0x10, 0x73, 0x11, 0xc2, 0x1c, 0x6, 0x70, 0xc, 0x0, 0x38, 0x1, 0xe0 },
{ 0x92, 0xc0, 0x4, 0x1c, 0xd, 0xf0, 0x18, 0x20, 0x77, 0xff, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x92, 0xc1, 0x8, 0x10, 0x1c, 0x10, 0x15, 0xff, 0x32, 0x10, 0x20, 0xfe, 0x7e, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0xfe, 0x8, 0x82, 0x4a, 0xfe, 0x6a, 0x0, 0x29, 0xff, 0xe, 0x44, 0x38, 0xc6, 0x61, 0x83 },
{ 0x92, 0xc2, 0x0, 0x20, 0x3e, 0x20, 0x23, 0xff, 0x26, 0x20, 0x2d, 0xfe, 0x29, 0x22, 0x29, 0xfe, 0x25, 0x22, 0x25, 0x22, 0x25, 0xfe, 0x24, 0xa8, 0x24, 0xa8, 0x2d, 0xac, 0x23, 0x26, 0x26, 0x23, 0x20, 0x20 },
{ 0x92, 0xc3, 0x0, 0x20, 0x33, 0xfe, 0x18, 0x22, 0x8, 0x22, 0x7, 0xff, 0x60, 0x22, 0x30, 0x22, 0x13, 0xfe, 0x0, 0x20, 0x8, 0x20, 0xb, 0xfe, 0x18, 0x20, 0x10, 0x20, 0x37, 0xff, 0x20, 0x20, 0x60, 0x20 },
{ 0x92, 0xc4, 0x0, 0x84, 0x3e, 0x48, 0x23, 0xff, 0x24, 0x20, 0x28, 0x53, 0x25, 0xae, 0x24, 0x58, 0x25, 0xac, 0x24, 0x4a, 0x2d, 0x8b, 0x20, 0x38, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0xc5, 0x8, 0x44, 0x8, 0x4c, 0x8, 0x88, 0x7e, 0xff, 0x9, 0x88, 0xa, 0x88, 0x1c, 0x88, 0x1a, 0xfe, 0x1a, 0x88, 0x28, 0x88, 0x28, 0x88, 0x48, 0xfe, 0x8, 0x88, 0x8, 0x88, 0x8, 0x88, 0x8, 0xff },
{ 0x92, 0xc6, 0x10, 0x8, 0x16, 0x10, 0x13, 0x7e, 0x7d, 0x42, 0x10, 0x42, 0x10, 0x42, 0x18, 0x7e, 0x37, 0x40, 0x35, 0x40, 0x51, 0x7e, 0x51, 0x42, 0x11, 0x42, 0x11, 0x42, 0x13, 0x7e, 0x12, 0x80, 0x16, 0x7f },
{ 0x92, 0xc7, 0x0, 0x20, 0x30, 0x40, 0x19, 0xfc, 0x9, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xfc, 0x79, 0x0, 0x9, 0x0, 0x9, 0xfc, 0x9, 0x4, 0x9, 0x4, 0x9, 0x4, 0x19, 0xfc, 0x34, 0x0, 0x63, 0xff },
{ 0x92, 0xc8, 0x10, 0x4, 0x39, 0x8, 0x2d, 0xbe, 0x64, 0xa2, 0x40, 0x22, 0x7c, 0x22, 0x10, 0x3e, 0x13, 0xa0, 0x7c, 0xa0, 0x10, 0xbe, 0x54, 0xa2, 0x54, 0xa2, 0x50, 0xa2, 0x1d, 0xbe, 0x31, 0x40, 0x63, 0x3f },
{ 0x92, 0xc9, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x50, 0x0, 0x37, 0xfc, 0x11, 0x8, 0x10, 0x90, 0x17, 0xfe, 0x14, 0x42, 0x37, 0xfe, 0x54, 0x42, 0x14, 0x42, 0x37, 0xfe, 0x24, 0x42, 0x64, 0x42, 0x4, 0x46 },
{ 0x92, 0xca, 0x0, 0x0, 0x67, 0xfe, 0x30, 0x8c, 0x10, 0x50, 0x3, 0xfe, 0x2, 0x22, 0x2, 0x22, 0x73, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x32, 0x26, 0x28, 0x0, 0x67, 0xff },
{ 0x92, 0xcb, 0x10, 0x0, 0x13, 0xff, 0x12, 0x1, 0x12, 0x1, 0x7d, 0xfe, 0x10, 0x20, 0x10, 0x42, 0x10, 0xa6, 0x13, 0x34, 0x10, 0x50, 0x1c, 0x98, 0x73, 0x3c, 0x0, 0x54, 0x0, 0x96, 0x7, 0x33, 0x0, 0xe0 },
{ 0x92, 0xcc, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0xa2, 0x8, 0xb2, 0x8, 0x92, 0x1c, 0x82, 0x1b, 0xff, 0x19, 0x2, 0x29, 0x22, 0x29, 0x32, 0x49, 0x12, 0x9, 0x2, 0x9, 0xff, 0x8, 0x4, 0x8, 0x1c },
{ 0x92, 0xcd, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0xfa, 0x7e, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0xfa, 0x1e, 0x22, 0x72, 0x2a, 0x12, 0x2a, 0x12, 0x22, 0x12, 0xfa, 0x12, 0x2, 0x13, 0xfe, 0x30, 0x0 },
{ 0x92, 0xce, 0x11, 0x0, 0x11, 0x3e, 0x17, 0xe2, 0x79, 0x22, 0x11, 0x3e, 0x11, 0x22, 0x37, 0xe2, 0x39, 0x3e, 0x51, 0x22, 0x53, 0xa2, 0x12, 0xbe, 0x12, 0xd4, 0x16, 0x54, 0x14, 0x35, 0x1c, 0x25, 0x10, 0x63 },
{ 0x92, 0xcf, 0x8, 0x0, 0xb, 0xfe, 0x1a, 0x22, 0x12, 0x22, 0x12, 0x22, 0x32, 0x22, 0x32, 0x22, 0x53, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x0 },
{ 0x92, 0xd0, 0x0, 0x20, 0x37, 0xff, 0x18, 0x20, 0xb, 0xfe, 0x0, 0x20, 0x67, 0xff, 0x30, 0x0, 0x13, 0xfe, 0x2, 0x2, 0xb, 0xfe, 0xa, 0x2, 0x1b, 0xfe, 0x12, 0x2, 0x33, 0xfe, 0x21, 0x4, 0x66, 0x3 },
{ 0x92, 0xd1, 0x8, 0x0, 0xb, 0xff, 0x8, 0x20, 0x7e, 0x20, 0x8, 0x60, 0x8, 0x40, 0x1c, 0x40, 0x1a, 0xfe, 0x19, 0x82, 0x2b, 0x82, 0x28, 0x82, 0x48, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x0 },
{ 0x92, 0xd2, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0x8, 0x20, 0x0, 0x20, 0x0, 0x20, 0x3, 0xfe, 0x78, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x18, 0x20, 0x34, 0x0, 0x63, 0xff },
{ 0x92, 0xd3, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x90, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0x2f, 0xfe, 0x24, 0x92, 0x66, 0xda, 0x42, 0x4e },
{ 0x92, 0xd4, 0x10, 0x0, 0x33, 0xde, 0x20, 0x42, 0x6b, 0x5a, 0x28, 0x84, 0x19, 0x4a, 0x12, 0x11, 0x24, 0x0, 0x7f, 0xde, 0x14, 0x42, 0x12, 0x42, 0x55, 0x94, 0x54, 0x94, 0x55, 0x48, 0x12, 0x54, 0x14, 0x23 },
{ 0x92, 0xd5, 0x10, 0x0, 0x39, 0xef, 0x2d, 0x29, 0x65, 0x29, 0x41, 0xef, 0x7c, 0x0, 0x10, 0xfe, 0x10, 0x0, 0x7d, 0xff, 0x10, 0x20, 0x54, 0x40, 0x54, 0xfe, 0x50, 0x2, 0x14, 0x2, 0x38, 0x6, 0x60, 0x1c },
{ 0x92, 0xd6, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7c, 0x20, 0x11, 0xfc, 0x10, 0x50, 0x3b, 0xff, 0x34, 0x88, 0x31, 0x4, 0x53, 0xfe, 0x55, 0x5, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc },
{ 0x92, 0xd7, 0x0, 0x20, 0x33, 0xfe, 0x1a, 0x22, 0xb, 0xfe, 0x0, 0x20, 0x67, 0xff, 0x30, 0x0, 0x13, 0xfe, 0x2, 0x2, 0xb, 0xfe, 0xa, 0x2, 0x1b, 0xfe, 0x12, 0x2, 0x33, 0xfe, 0x21, 0x4, 0x66, 0x3 },
{ 0x92, 0xd8, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x20, 0x12, 0x22, 0x7d, 0x26, 0x11, 0x24, 0x11, 0x24, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x1c, 0x20, 0x70, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x92, 0xd9, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x0, 0x3f, 0xfe, 0x21, 0x42, 0x2f, 0xfa, 0x9, 0x48, 0x9, 0x48, 0xf, 0xf8, 0x1, 0x40, 0x1, 0x40, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0xda, 0x10, 0x0, 0x11, 0xff, 0x10, 0x10, 0x11, 0xff, 0x7d, 0x11, 0x15, 0xdd, 0x35, 0x11, 0x24, 0xdc, 0x2c, 0x0, 0x29, 0xff, 0x28, 0x20, 0x79, 0xff, 0x15, 0x49, 0x35, 0x49, 0x21, 0x49, 0x61, 0x4b },
{ 0x92, 0xdb, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x64, 0x10, 0x2d, 0xff, 0x19, 0x11, 0x11, 0x11, 0x25, 0x11, 0x7d, 0x11, 0x15, 0xff, 0x11, 0x11, 0x55, 0x11, 0x55, 0x11, 0x55, 0x11, 0x11, 0xff, 0x10, 0x0 },
{ 0x92, 0xdc, 0x0, 0xc, 0x0, 0xf8, 0x1f, 0x88, 0x10, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x8, 0x11, 0xc, 0x11, 0x4, 0x11, 0x4, 0x31, 0x4, 0x21, 0x6, 0x21, 0x2, 0x61, 0x3 },
{ 0x92, 0xdd, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x8e, 0x0, 0x80, 0x0, 0x80 },
{ 0x92, 0xde, 0x8, 0x20, 0x1c, 0x20, 0x16, 0x20, 0x33, 0x7f, 0x21, 0x41, 0x7e, 0xc1, 0x9, 0x81, 0x8, 0x31, 0x7f, 0x19, 0x8, 0x9, 0x4a, 0x1, 0x6a, 0x1, 0x28, 0x1, 0xf, 0x3, 0x38, 0x2, 0x60, 0xe },
{ 0x92, 0xdf, 0x8, 0x10, 0x8, 0x20, 0x7e, 0xfe, 0x52, 0x82, 0x54, 0xfe, 0x3e, 0x82, 0x28, 0xfe, 0x68, 0x80, 0x3e, 0xff, 0x28, 0x80, 0x28, 0xff, 0x3e, 0x1, 0x29, 0x55, 0x29, 0x55, 0x3e, 0x3, 0x0, 0x6 },
{ 0x92, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x92, 0xe1, 0x4, 0x6, 0x4, 0x1c, 0xd, 0xf0, 0x9, 0x10, 0x19, 0x10, 0x11, 0x10, 0x31, 0xff, 0x51, 0x10, 0x11, 0x10, 0x11, 0x18, 0x11, 0x8, 0x11, 0xc8, 0x17, 0xc, 0x10, 0x5, 0x17, 0xf7, 0x10, 0x2 },
{ 0x92, 0xe2, 0x4, 0x20, 0x4, 0x20, 0xf, 0xff, 0x8, 0x0, 0x19, 0xfc, 0x11, 0x4, 0x31, 0xfc, 0x50, 0x0, 0x17, 0xff, 0x14, 0x1, 0x15, 0xfd, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0xe0 },
{ 0x92, 0xe3, 0x4, 0x20, 0x4, 0x20, 0xc, 0x3f, 0x8, 0x20, 0x1b, 0xfe, 0x12, 0x2, 0x32, 0x2, 0x53, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe, 0x11, 0x4, 0x16, 0x3 },
{ 0x92, 0xe4, 0x21, 0x2, 0x12, 0x12, 0x7f, 0x92, 0x4, 0x92, 0x4, 0x92, 0x3f, 0x92, 0x24, 0x12, 0x24, 0x12, 0x3f, 0xd2, 0x4, 0x52, 0xc, 0x52, 0xc, 0xc2, 0x14, 0x82, 0x35, 0x82, 0x64, 0x2, 0x4, 0xe },
{ 0x92, 0xe5, 0x0, 0x80, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x92, 0xe6, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x92, 0xe7, 0x0, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x7d, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x10, 0x20, 0x11, 0x20, 0x1d, 0x3e, 0x71, 0x20, 0x3, 0xa0, 0x6, 0xe0, 0xc, 0x3f },
{ 0x92, 0xe8, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x8, 0x80, 0x8, 0xf8, 0x8, 0x80, 0x8, 0x80, 0x1c, 0x80, 0x16, 0x80, 0x33, 0x80, 0x60, 0xff },
{ 0x92, 0xe9, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x40, 0x81, 0x40, 0x81, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x9c, 0x0, 0x80 },
{ 0x92, 0xea, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x10, 0xc, 0x13, 0xf8, 0x12, 0x20, 0x12, 0x20, 0x13, 0xff, 0x12, 0x10, 0x12, 0x10, 0x13, 0x98, 0x16, 0x8, 0x30, 0xd, 0x27, 0xe7, 0x60, 0x2 },
{ 0x92, 0xeb, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x6, 0x1f, 0x7c, 0x12, 0x10, 0x14, 0x10, 0x17, 0xff, 0x11, 0x10, 0x15, 0x10, 0x15, 0x10, 0x32, 0x7e, 0x22, 0x0, 0x65, 0x80, 0x8, 0x7f },
{ 0x92, 0xec, 0x0, 0xc, 0x7e, 0x38, 0x5, 0xe0, 0x8, 0x20, 0x10, 0x20, 0x3c, 0x20, 0x7, 0xff, 0x4, 0x20, 0x2c, 0x20, 0x28, 0x20, 0x28, 0x20, 0x38, 0x20, 0x11, 0xfe, 0x38, 0x0, 0x2e, 0x0, 0x63, 0xff },
{ 0x92, 0xed, 0x8, 0x10, 0x4, 0x20, 0x7f, 0xfc, 0x0, 0x84, 0x0, 0x84, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xfe, 0x1, 0x82, 0x2, 0x82, 0x6, 0x82, 0xc, 0x86, 0x18, 0x84, 0x70, 0x9c, 0x0, 0x80 },
{ 0x92, 0xee, 0x11, 0x4, 0x10, 0x88, 0x13, 0xfe, 0x10, 0x22, 0x58, 0x22, 0x55, 0xfe, 0x55, 0x20, 0x51, 0x20, 0x11, 0xff, 0x10, 0x61, 0x10, 0x61, 0x10, 0xa3, 0x11, 0xa2, 0x13, 0x2e, 0x16, 0x20, 0x10, 0x20 },
{ 0x92, 0xef, 0x10, 0x6, 0x10, 0x1c, 0x11, 0xf0, 0x11, 0x10, 0x7d, 0x10, 0x11, 0x10, 0x11, 0xff, 0x11, 0x10, 0x1d, 0x10, 0x71, 0x18, 0x11, 0x8, 0x11, 0xc8, 0x17, 0xc, 0x10, 0x5, 0x17, 0xf7, 0x30, 0x2 },
{ 0x92, 0xf0, 0x10, 0x3, 0x17, 0xce, 0x10, 0xb8, 0x10, 0x88, 0x7d, 0x88, 0x11, 0x8, 0x13, 0xff, 0x10, 0x48, 0x1c, 0x48, 0x72, 0xc8, 0x12, 0x88, 0x13, 0x88, 0x11, 0x3f, 0x13, 0x80, 0x12, 0xe0, 0x36, 0x3f },
{ 0x92, 0xf1, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x7d, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x18, 0x20, 0x71, 0x20, 0x11, 0x3e, 0x11, 0x20, 0x13, 0xa0, 0x12, 0xe0, 0x36, 0x3f },
{ 0x92, 0xf2, 0x11, 0x4, 0x10, 0x88, 0x13, 0xfe, 0x7c, 0x22, 0x10, 0x22, 0x13, 0xfe, 0x3a, 0x20, 0x36, 0x20, 0x33, 0xff, 0x50, 0x61, 0x50, 0x61, 0x10, 0xa3, 0x11, 0xa2, 0x13, 0x2e, 0x16, 0x20, 0x10, 0x20 },
{ 0x92, 0xf3, 0x0, 0x0, 0x30, 0x0, 0x1b, 0xff, 0x8, 0x10, 0x0, 0x10, 0x60, 0x10, 0x30, 0x10, 0x10, 0x10, 0x0, 0x10, 0x8, 0x10, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x30, 0x10, 0x20, 0x10, 0x60, 0x70 },
{ 0x92, 0xf4, 0x0, 0x10, 0x7e, 0x10, 0x11, 0xff, 0x11, 0x1, 0x11, 0x1, 0x10, 0xfe, 0x3c, 0x10, 0x24, 0x10, 0x64, 0x90, 0x24, 0x9e, 0x24, 0x90, 0x24, 0x90, 0x24, 0x90, 0x3d, 0xd0, 0x1, 0x70, 0x3, 0x1f },
{ 0x92, 0xf5, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x7c, 0x10, 0x4, 0xfe, 0xc, 0x82, 0x8, 0x82, 0x18, 0xfe, 0x30, 0x82, 0x3c, 0x82, 0x56, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe, 0x10, 0x44, 0x11, 0x83 },
{ 0x92, 0xf6, 0x2, 0x0, 0xe, 0xfc, 0x78, 0x84, 0x8, 0x84, 0x8, 0x84, 0x7e, 0xfc, 0x8, 0x0, 0x8, 0x0, 0x1d, 0xfe, 0x1a, 0x20, 0x2a, 0x20, 0x28, 0xfc, 0x48, 0x20, 0x8, 0x20, 0xb, 0xff, 0x8, 0x0 },
{ 0x92, 0xf7, 0x8, 0x10, 0x18, 0x10, 0x31, 0xff, 0x64, 0x44, 0x2c, 0x6c, 0x18, 0x28, 0x31, 0xff, 0x25, 0x11, 0x7d, 0x11, 0x14, 0xfe, 0x10, 0x92, 0x54, 0x92, 0x54, 0x92, 0x54, 0x96, 0x50, 0x10, 0x10, 0x10 },
{ 0x92, 0xf8, 0x8, 0x2, 0x11, 0xc6, 0x3c, 0x5c, 0x24, 0x44, 0x34, 0xc4, 0x2c, 0x84, 0x25, 0xdf, 0x7e, 0x44, 0x24, 0x44, 0x35, 0x44, 0x2d, 0x44, 0x2d, 0xc4, 0x24, 0x9f, 0x24, 0x80, 0x65, 0xe0, 0x4d, 0x3f },
{ 0x92, 0xf9, 0x0, 0x0, 0x3e, 0x0, 0x0, 0xff, 0x7f, 0x8, 0x0, 0x8, 0x3e, 0x8, 0x0, 0x8, 0x0, 0x8, 0x3e, 0x8, 0x0, 0x8, 0x0, 0x8, 0x3e, 0x8, 0x22, 0x8, 0x22, 0x8, 0x22, 0x8, 0x3e, 0x38 },
{ 0x92, 0xfa, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7e, 0x44, 0x0, 0x6c, 0x3c, 0x28, 0x1, 0xff, 0x1, 0x11, 0x3d, 0x11, 0x0, 0xfe, 0x0, 0x92, 0x3c, 0x92, 0x24, 0x92, 0x24, 0x96, 0x24, 0x10, 0x3c, 0x10 },
{ 0x92, 0xfb, 0x0, 0x10, 0x3c, 0x10, 0x25, 0xff, 0x24, 0x44, 0x24, 0x6c, 0x24, 0x28, 0x3d, 0xff, 0x9, 0x11, 0x29, 0x11, 0x2c, 0xfe, 0x28, 0x92, 0x28, 0x92, 0x28, 0x92, 0x2c, 0x96, 0x38, 0x10, 0x60, 0x10 },
{ 0x92, 0xfc, 0x0, 0x6, 0x20, 0x1c, 0x33, 0xf0, 0x12, 0x10, 0x3, 0xff, 0x2, 0x10, 0x3, 0xff, 0x72, 0x10, 0x12, 0xfe, 0x12, 0x92, 0x12, 0x92, 0x12, 0x92, 0x14, 0x96, 0x30, 0x10, 0x28, 0x0, 0x67, 0xff },
{ 0x93, 0x40, 0x0, 0xc0, 0x3, 0x9f, 0x3e, 0x11, 0x22, 0x13, 0x22, 0x12, 0x22, 0x16, 0x3f, 0xd4, 0x22, 0x12, 0x22, 0x11, 0x22, 0x11, 0x23, 0x11, 0x39, 0x11, 0x61, 0x57, 0x1, 0xd0, 0x7c, 0x90, 0x0, 0x10 },
{ 0x93, 0x41, 0x10, 0x80, 0x9, 0x1f, 0x7f, 0xf1, 0x9, 0x13, 0x3f, 0xd2, 0x29, 0x56, 0x31, 0xd4, 0x20, 0x52, 0x3f, 0xd1, 0x20, 0x51, 0x3f, 0xd1, 0x4, 0x11, 0x7f, 0xf7, 0x9, 0x10, 0x19, 0x90, 0x70, 0xd0 },
{ 0x93, 0x42, 0x8, 0x0, 0x1c, 0x0, 0x16, 0xff, 0x33, 0x8, 0x21, 0x8, 0x7e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x4a, 0x8, 0x6a, 0x8, 0x28, 0x8, 0xf, 0x8, 0x38, 0x8, 0x60, 0x38 },
{ 0x93, 0x43, 0x0, 0x0, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf2, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x3f, 0x7e, 0x1, 0x40, 0x7f, 0x7f, 0x11, 0x44, 0x11, 0x44, 0x31, 0x44, 0x61, 0x44 },
{ 0x93, 0x44, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x2, 0x2, 0x2, 0x63, 0xfe, 0x32, 0x0, 0x12, 0x40, 0x2, 0x46, 0xa, 0x5c, 0xa, 0x70, 0x1a, 0x40, 0x16, 0x40, 0x34, 0x41, 0x2c, 0x63, 0x60, 0x3e },
{ 0x93, 0x45, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x11, 0x4, 0x78, 0x88, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x22, 0x1a, 0xfa, 0x72, 0x22, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x32, 0x6 },
{ 0x93, 0x46, 0x10, 0x0, 0x13, 0xdf, 0x10, 0x41, 0x13, 0xdf, 0x7c, 0x41, 0x13, 0xdf, 0x10, 0x48, 0x10, 0x90, 0x1d, 0xff, 0x73, 0x10, 0x15, 0xfe, 0x11, 0x10, 0x11, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x31, 0xff },
{ 0x93, 0x47, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xd0, 0x11, 0x1f, 0xa, 0x14, 0x3f, 0xb4, 0x20, 0xa4, 0x24, 0x94, 0x2e, 0x94, 0x24, 0x9c, 0x2e, 0x88, 0x2a, 0x88, 0x2a, 0x9c, 0x2e, 0x94, 0x20, 0x96, 0x21, 0xa3 },
{ 0x93, 0x48, 0x0, 0x20, 0x30, 0x20, 0x1f, 0xff, 0x9, 0x4, 0x0, 0x88, 0x63, 0xfe, 0x32, 0x2, 0x12, 0x22, 0x2, 0xfa, 0xa, 0x22, 0xa, 0xfa, 0x1a, 0x8a, 0x12, 0x8a, 0x32, 0xfa, 0x22, 0x2, 0x62, 0x6 },
{ 0x93, 0x49, 0x4, 0x40, 0xc, 0x40, 0x8, 0x40, 0x3e, 0x7e, 0x22, 0xc2, 0x22, 0x82, 0x23, 0x82, 0x22, 0x62, 0x3e, 0x32, 0x22, 0x12, 0x22, 0x2, 0x22, 0x2, 0x22, 0x6, 0x3e, 0x4, 0x0, 0xc, 0x0, 0x38 },
{ 0x93, 0x4a, 0x8, 0x40, 0x8, 0x40, 0x1f, 0xff, 0x34, 0x90, 0x66, 0x18, 0x2, 0x88, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x93, 0x4b, 0x0, 0x20, 0x60, 0x20, 0x37, 0xff, 0x11, 0x4, 0x0, 0x88, 0x3, 0xfe, 0x2, 0x22, 0x72, 0xfa, 0x12, 0x22, 0x12, 0xfa, 0x12, 0x8a, 0x12, 0xfa, 0x12, 0x2, 0x32, 0x6, 0x28, 0x0, 0x67, 0xff },
{ 0x93, 0x4c, 0x10, 0x10, 0x38, 0x10, 0x2d, 0xff, 0x64, 0x82, 0x40, 0x44, 0x7d, 0xff, 0x11, 0x1, 0x11, 0x11, 0x7d, 0x7d, 0x11, 0x11, 0x55, 0x7d, 0x55, 0x45, 0x51, 0x45, 0x15, 0x7d, 0x39, 0x1, 0x61, 0x7 },
{ 0x93, 0x4d, 0x0, 0x0, 0x2f, 0xbe, 0x30, 0x82, 0x10, 0x82, 0x7, 0x9e, 0x44, 0x10, 0x64, 0x10, 0x27, 0x9e, 0x0, 0x82, 0x16, 0xb2, 0x12, 0x92, 0x11, 0x8e, 0x36, 0x9a, 0x2c, 0xb2, 0x21, 0x86, 0x67, 0x1c },
{ 0x93, 0x4e, 0x8, 0x6, 0x8, 0xfc, 0x7e, 0x80, 0x8, 0x80, 0x8, 0xff, 0xe, 0x88, 0x78, 0x88, 0x9, 0x88, 0xb, 0x8, 0x18, 0x8, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x93, 0x4f, 0x9, 0x8, 0x19, 0x8, 0x17, 0xe8, 0x31, 0xf, 0x61, 0x5a, 0xa, 0x62, 0x1b, 0xaa, 0x10, 0xa, 0x33, 0xca, 0x72, 0x4e, 0x13, 0xc4, 0x12, 0x44, 0x13, 0xce, 0x12, 0x4a, 0x12, 0x4a, 0x12, 0xdb },
{ 0x93, 0x50, 0x11, 0x8, 0x11, 0x8, 0x17, 0xe8, 0x11, 0xf, 0x79, 0x5a, 0x12, 0x62, 0x13, 0xaa, 0x10, 0xa, 0x1b, 0xca, 0x72, 0x4e, 0x13, 0xc4, 0x12, 0x44, 0x13, 0xce, 0x12, 0x4a, 0x12, 0x4a, 0x32, 0xdb },
{ 0x93, 0x51, 0x10, 0x88, 0x10, 0x88, 0x7f, 0xf8, 0x10, 0x8f, 0x7c, 0xaa, 0x55, 0x32, 0x55, 0xd2, 0x7c, 0xa, 0x55, 0xea, 0x55, 0x2e, 0x7d, 0xe4, 0x11, 0x24, 0x7d, 0xee, 0x11, 0x2a, 0x11, 0x2a, 0x11, 0x7b },
{ 0x93, 0x52, 0x0, 0x20, 0x61, 0x20, 0x31, 0x20, 0x11, 0xfe, 0x3, 0x20, 0x2, 0x20, 0x0, 0x20, 0x77, 0xff, 0x10, 0x20, 0x10, 0x60, 0x10, 0x58, 0x10, 0xcc, 0x11, 0x86, 0x33, 0x2, 0x28, 0x0, 0x67, 0xff },
{ 0x93, 0x53, 0x8, 0x10, 0x1c, 0x50, 0x16, 0x50, 0x32, 0x7e, 0x20, 0xd0, 0x7e, 0x90, 0x8, 0x10, 0x8, 0xff, 0x7e, 0x10, 0x8, 0x10, 0x4a, 0x38, 0x6a, 0x28, 0x28, 0x6c, 0xe, 0x44, 0x38, 0xc6, 0x61, 0x83 },
{ 0x93, 0x54, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x12, 0x24, 0x1f, 0xfc, 0x12, 0x24, 0x12, 0x24, 0x12, 0x24, 0x7f, 0xff, 0x0, 0x0, 0x4, 0x10, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x93, 0x55, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x7d, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x4, 0x1d, 0xfc, 0x70, 0x0, 0x7, 0xff, 0x1, 0x4, 0x3, 0x6, 0x6, 0x3 },
{ 0x93, 0x56, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x40, 0x1, 0x60, 0x3, 0x20, 0x2, 0x30, 0x6, 0x10, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x93, 0x57, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x17, 0xfe, 0x11, 0x10, 0x11, 0x10, 0x1f, 0xff, 0x12, 0x44, 0x32, 0x68, 0x22, 0x30, 0x63, 0x9c, 0xe, 0x7 },
{ 0x93, 0x58, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x40, 0x10, 0x40, 0x10, 0x7f, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x13, 0xfc, 0x32, 0x4, 0x22, 0x4, 0x62, 0x4, 0x2, 0x4, 0x3, 0xfc },
{ 0x93, 0x59, 0x0, 0xc, 0x30, 0x38, 0x1b, 0xe0, 0x8, 0x40, 0x0, 0x40, 0x67, 0xff, 0x30, 0x90, 0x11, 0x98, 0x3, 0xc, 0x16, 0x47, 0x10, 0x40, 0x12, 0x52, 0x32, 0x5b, 0x26, 0x49, 0x24, 0x49, 0x60, 0xc0 },
{ 0x93, 0x5a, 0x8, 0x10, 0x19, 0xff, 0x11, 0x0, 0x65, 0x7e, 0x2d, 0x52, 0x19, 0x7e, 0x11, 0x52, 0x25, 0x7e, 0x7d, 0x10, 0x11, 0xff, 0x11, 0x24, 0x55, 0xd7, 0x55, 0x10, 0x51, 0x7e, 0x12, 0x10, 0x10, 0xff },
{ 0x93, 0x5b, 0x3, 0x44, 0xe, 0x44, 0x78, 0x44, 0x8, 0x44, 0x9, 0xff, 0x8, 0x44, 0x7f, 0x44, 0x8, 0x44, 0x8, 0x44, 0x8, 0x7c, 0x3e, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x22, 0x44, 0x3e, 0x7c },
{ 0x93, 0x5c, 0x0, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0x1f, 0x22, 0x10, 0x22, 0x10, 0x22, 0x10, 0x3e, 0x10, 0x22, 0xfe, 0x22, 0x82, 0x22, 0x82, 0x3e, 0x82, 0x14, 0x82, 0x36, 0x82, 0x62, 0xfe },
{ 0x93, 0x5d, 0x8, 0x0, 0x8, 0x3e, 0x7f, 0x80, 0x8, 0x0, 0x3f, 0x0, 0x29, 0x0, 0x29, 0x7f, 0x3f, 0x10, 0x29, 0x10, 0x29, 0x10, 0x3f, 0x10, 0x8, 0x32, 0x7f, 0xa2, 0x8, 0x22, 0x8, 0x2f, 0x8, 0x79 },
{ 0x93, 0x5e, 0x8, 0x0, 0x8, 0xff, 0x7f, 0x10, 0x8, 0x7e, 0x3e, 0x42, 0x22, 0x42, 0x3e, 0x7e, 0x22, 0x42, 0x3e, 0x42, 0x22, 0x7e, 0x3e, 0x42, 0x0, 0x42, 0x7f, 0x7e, 0x12, 0x24, 0x33, 0x66, 0x61, 0xc3 },
{ 0x93, 0x5f, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0, 0x12, 0x24, 0x33, 0x36, 0x61, 0x13 },
{ 0x93, 0x60, 0x4, 0x0, 0x5, 0xfe, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x10, 0x0, 0x33, 0xff, 0x50, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0xc4, 0x10, 0x86, 0x10, 0x82, 0x10, 0x9f, 0x11, 0xf1, 0x13, 0x1 },
{ 0x93, 0x61, 0x0, 0x0, 0x3f, 0xbc, 0x20, 0xa4, 0x20, 0xa4, 0x3f, 0xa4, 0x20, 0x27, 0x29, 0x40, 0x3f, 0x80, 0x29, 0x7e, 0x29, 0x22, 0x3f, 0xb6, 0x20, 0x1c, 0x69, 0x8, 0x49, 0x9c, 0x18, 0xb6, 0x30, 0x63 },
{ 0x93, 0x62, 0x0, 0x0, 0x27, 0xee, 0x34, 0x2a, 0x14, 0x2a, 0x7, 0xea, 0x44, 0xb, 0x65, 0x50, 0x27, 0xe0, 0x5, 0x5f, 0x15, 0x49, 0x17, 0xeb, 0x14, 0xa, 0x35, 0x44, 0x29, 0x6e, 0x23, 0x2b, 0x66, 0x11 },
{ 0x93, 0x63, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x93, 0x64, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x40, 0x81, 0x1e, 0xbc, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfd, 0x0, 0x83, 0x0, 0x7e },
{ 0x93, 0x65, 0x0, 0xc, 0x0, 0x78, 0x1f, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x2, 0x48, 0x2, 0x4c, 0x6, 0x44, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x93, 0x66, 0x0, 0x20, 0x0, 0x20, 0x78, 0x20, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x4b, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x78, 0x20, 0x0, 0x20, 0x0, 0x20, 0x7, 0xff, 0x0, 0x0 },
{ 0x93, 0x67, 0x10, 0x22, 0x10, 0x22, 0x11, 0xfe, 0x10, 0x24, 0x7c, 0x2c, 0x10, 0x28, 0x13, 0xff, 0x10, 0x10, 0x10, 0x20, 0x10, 0x7e, 0x1c, 0xc2, 0x71, 0x42, 0x6, 0x7e, 0x0, 0x42, 0x0, 0x42, 0x0, 0x7e },
{ 0x93, 0x68, 0x0, 0x20, 0x30, 0x70, 0x19, 0xdc, 0x67, 0x7, 0x31, 0xfc, 0x0, 0x20, 0xb, 0xff, 0x19, 0x24, 0x33, 0x26, 0x66, 0x63, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x93, 0x69, 0x8, 0x0, 0x8, 0xff, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x12, 0x30, 0x12, 0x20, 0x12, 0x3e, 0x36, 0x62, 0x24, 0xe2, 0x25, 0xa2, 0x7c, 0x22, 0xa, 0x22, 0x19, 0x22, 0x31, 0x22, 0x60, 0x3e },
{ 0x93, 0x6a, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x84, 0x17, 0xfc, 0x10, 0x90, 0x1f, 0xff, 0x10, 0x40, 0x13, 0xfc, 0x1e, 0x4, 0x33, 0xfc, 0x22, 0x4, 0x62, 0x4, 0x3, 0xfc },
{ 0x93, 0x6b, 0x8, 0x20, 0x18, 0x20, 0x11, 0xfe, 0x30, 0x20, 0x60, 0x20, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x20, 0x30, 0x20, 0x71, 0x20, 0x11, 0x3e, 0x11, 0x20, 0x13, 0xa0, 0x12, 0xa0, 0x12, 0x60, 0x16, 0x3f },
{ 0x93, 0x6c, 0x0, 0x20, 0x0, 0x20, 0xc, 0x20, 0x7, 0x20, 0x1, 0x20, 0x0, 0x20, 0x18, 0x20, 0xe, 0x20, 0x2, 0x20, 0x0, 0x20, 0x0, 0x3f, 0x7, 0xe0, 0x7c, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x93, 0x6d, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x8, 0xfe, 0x1c, 0x10, 0x1a, 0x10, 0x19, 0x10, 0x28, 0x10, 0x28, 0x10, 0x48, 0x10, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x0 },
{ 0x93, 0x6e, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0xa, 0x0, 0x2, 0x24, 0x62, 0xff, 0x32, 0x24, 0x12, 0x3c, 0x2, 0x0, 0xa, 0xfe, 0xa, 0x42, 0x1a, 0x66, 0x16, 0x2c, 0x34, 0x38, 0x2c, 0x6c, 0x61, 0xc7 },
{ 0x93, 0x6f, 0x0, 0x0, 0x1f, 0x8c, 0x1, 0xd8, 0x33, 0x63, 0x16, 0x36, 0xf, 0xf8, 0x18, 0xc, 0x77, 0xf7, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x93, 0x70, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3, 0xe0, 0x6, 0x20, 0xc, 0x40, 0x3f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x50, 0x2, 0x58, 0x6, 0x49, 0x1c, 0x63, 0x70, 0x3e },
{ 0x93, 0x71, 0x0, 0x22, 0x3e, 0x22, 0x22, 0xfe, 0x22, 0x24, 0x3e, 0x2c, 0x22, 0x28, 0x23, 0xff, 0x22, 0x10, 0x3e, 0x20, 0x22, 0x7e, 0x23, 0xc2, 0x22, 0x42, 0x3e, 0x7e, 0x14, 0x42, 0x36, 0x42, 0x62, 0x7e },
{ 0x93, 0x72, 0x0, 0x20, 0x30, 0x70, 0x18, 0xd8, 0x9, 0x8c, 0x3, 0x7, 0x1, 0xfc, 0x0, 0x20, 0x78, 0x20, 0xb, 0xff, 0x8, 0x20, 0x8, 0xa4, 0x9, 0xa6, 0xb, 0x23, 0x18, 0x60, 0x34, 0x0, 0x63, 0xff },
{ 0x93, 0x73, 0x4, 0x40, 0x4, 0x5f, 0x3f, 0xd1, 0x4, 0x93, 0x4, 0x92, 0x5, 0x16, 0x7f, 0xf4, 0x4, 0x12, 0x8, 0x11, 0x1f, 0x91, 0x70, 0x91, 0x10, 0x91, 0x1f, 0x91, 0x10, 0x97, 0x10, 0x90, 0x1f, 0x90 },
{ 0x93, 0x74, 0x10, 0x10, 0x38, 0x10, 0x2d, 0xff, 0x65, 0x0, 0x41, 0x24, 0x7d, 0xff, 0x11, 0x24, 0x11, 0x3c, 0x7d, 0x0, 0x11, 0xfe, 0x55, 0x42, 0x55, 0x66, 0x51, 0x2c, 0x15, 0x38, 0x3a, 0x6c, 0x61, 0xc7 },
{ 0x93, 0x75, 0x0, 0x6, 0x7e, 0x1c, 0x10, 0xf8, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x3c, 0xff, 0x24, 0x88, 0x64, 0x88, 0x24, 0x88, 0x24, 0x8c, 0x24, 0xe4, 0x25, 0x84, 0x3c, 0x5, 0x1, 0xf7, 0x0, 0x2 },
{ 0x93, 0x76, 0x0, 0x0, 0x7e, 0xff, 0x10, 0x80, 0x10, 0x80, 0x10, 0xff, 0x10, 0x90, 0x3c, 0x90, 0x24, 0x9e, 0x64, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x25, 0x92, 0x3d, 0x32, 0x3, 0x22, 0x0, 0x6e },
{ 0x93, 0x77, 0x4, 0x0, 0x4, 0x0, 0x7f, 0xfe, 0x9, 0x42, 0x1b, 0x66, 0x12, 0x2c, 0x3e, 0x18, 0xb, 0x6c, 0x10, 0x7, 0x60, 0x80, 0x1f, 0xfc, 0x0, 0x84, 0x1, 0x84, 0x3, 0xc, 0xe, 0x8, 0x38, 0x38 },
{ 0x93, 0x78, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x0, 0x11, 0x10, 0x1f, 0xfe, 0x11, 0x10, 0x11, 0xf0, 0x10, 0x0, 0x1f, 0xf8, 0x12, 0x8, 0x13, 0x18, 0x31, 0xb0, 0x20, 0xe0, 0x63, 0xb8, 0x1e, 0xf },
{ 0x93, 0x79, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x93, 0x7a, 0x8, 0x0, 0x9, 0xfe, 0x8, 0x42, 0x8, 0x42, 0x7e, 0x46, 0x12, 0x64, 0x12, 0x24, 0x12, 0x2c, 0x36, 0x28, 0x24, 0x38, 0x24, 0x10, 0x7c, 0x10, 0xa, 0x38, 0x1a, 0x6c, 0x30, 0xc6, 0x61, 0x83 },
{ 0x93, 0x7b, 0x4, 0x0, 0x4, 0x0, 0x7f, 0xfe, 0x9, 0x42, 0x1b, 0x66, 0x12, 0x2c, 0x3e, 0x18, 0xb, 0x6c, 0x11, 0x7, 0x60, 0x0, 0x1, 0x80, 0x4, 0xc6, 0x14, 0x43, 0x14, 0x9, 0x36, 0x18, 0x63, 0xf0 },
{ 0x93, 0x7c, 0x8, 0x2, 0xf, 0xe2, 0x9, 0xa, 0x19, 0x4a, 0x12, 0x4a, 0x12, 0xea, 0x37, 0xaa, 0x51, 0xa, 0x11, 0xa, 0x17, 0xea, 0x11, 0xa, 0x11, 0x2, 0x11, 0x2, 0x11, 0xe2, 0x17, 0x2, 0x10, 0xe },
{ 0x93, 0x7d, 0x10, 0x84, 0x18, 0x8c, 0x8, 0x88, 0x7f, 0xff, 0x40, 0x1, 0x4f, 0xf9, 0x48, 0x9, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x40, 0x2, 0x40, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x93, 0x7e, 0x1, 0x0, 0x1, 0x0, 0x3, 0xf0, 0x6, 0x10, 0xc, 0x30, 0x3b, 0x60, 0x1, 0x80, 0x3, 0xc0, 0x6, 0x70, 0x1c, 0x1c, 0x71, 0xc7, 0x0, 0x60, 0x0, 0x0, 0x7, 0x80, 0x0, 0xe0, 0x0, 0x30 },
{ 0x93, 0x80, 0x0, 0x20, 0x0, 0x20, 0x37, 0xff, 0x18, 0x20, 0xb, 0xfe, 0x2, 0x22, 0x3, 0xfe, 0x2, 0x22, 0x2, 0x22, 0xb, 0xfe, 0x18, 0xa8, 0x10, 0xac, 0x31, 0xa4, 0x23, 0x26, 0x66, 0x23, 0x0, 0x20 },
{ 0x93, 0x81, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2, 0x6, 0x2, 0x4, 0x6, 0xc, 0x4, 0x18, 0x4, 0x70, 0x1c, 0x0, 0x0 },
{ 0x93, 0x82, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x10, 0x40, 0x13, 0xfc, 0x10, 0x44, 0x1f, 0xff, 0x10, 0x44, 0x10, 0x44, 0x13, 0xfc, 0x10, 0x0, 0x13, 0xfc, 0x32, 0x4, 0x22, 0x4, 0x62, 0x4, 0x3, 0xfc },
{ 0x93, 0x83, 0x0, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x88, 0x10, 0x20, 0x7c, 0x70, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x77, 0x10, 0x0, 0x10, 0x0, 0x1d, 0xfc, 0x71, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xfc },
{ 0x93, 0x84, 0x0, 0x20, 0x10, 0x20, 0x11, 0xff, 0x11, 0x10, 0x11, 0x7e, 0x7d, 0x12, 0x11, 0xff, 0x11, 0x12, 0x11, 0x12, 0x11, 0x7e, 0x11, 0x0, 0x1d, 0x7e, 0x73, 0x42, 0x2, 0x42, 0x6, 0x42, 0x0, 0x7e },
{ 0x93, 0x85, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x10, 0x1f, 0xfc, 0x74, 0x7, 0x7, 0xf0, 0x4, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x7f, 0xff, 0x4, 0x0, 0xc, 0x8, 0x9, 0xfc, 0x3f, 0x4 },
{ 0x93, 0x86, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x0, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x3, 0x0, 0x6, 0x0, 0x1f, 0xfc, 0x74, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x93, 0x87, 0x0, 0x80, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0xf, 0xfe, 0x4, 0x2, 0x44, 0x22, 0x44, 0x22, 0x7f, 0xe6, 0x0, 0x1c },
{ 0x93, 0x88, 0x0, 0x20, 0x10, 0x40, 0x11, 0xfc, 0x55, 0x4, 0x55, 0xfc, 0x55, 0x4, 0x55, 0xfc, 0x55, 0x0, 0x55, 0xff, 0x55, 0x0, 0x55, 0xfe, 0x7c, 0x2, 0x2, 0xaa, 0x6, 0xaa, 0x4, 0x6, 0x0, 0xc },
{ 0x93, 0x89, 0x10, 0x20, 0x10, 0x20, 0x10, 0x3f, 0x10, 0x20, 0x59, 0xfc, 0x55, 0x4, 0x55, 0x4, 0x51, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x93, 0x8a, 0x10, 0x0, 0x10, 0xf8, 0x10, 0x88, 0x10, 0x88, 0x7c, 0x88, 0x11, 0x8f, 0x13, 0x0, 0x10, 0x0, 0x1d, 0xfc, 0x70, 0x84, 0x10, 0xcc, 0x10, 0x58, 0x10, 0x30, 0x10, 0x78, 0x10, 0xcc, 0x33, 0x87 },
{ 0x93, 0x8b, 0x10, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x88, 0x78, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x77, 0x18, 0x0, 0x70, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x31, 0xfc },
{ 0x93, 0x8c, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x93, 0x8d, 0x8, 0x48, 0x8, 0x48, 0xa, 0x49, 0x7f, 0x4b, 0x9, 0x4e, 0x8, 0x48, 0x1c, 0x48, 0x1a, 0x48, 0x1a, 0x4e, 0x29, 0xcb, 0x2b, 0x49, 0x48, 0x48, 0x8, 0xc8, 0x8, 0x89, 0x9, 0x89, 0xb, 0x7 },
{ 0x93, 0x8e, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x7c, 0x20, 0x11, 0xfe, 0x10, 0x20, 0x3b, 0xff, 0x34, 0x40, 0x30, 0x44, 0x53, 0xff, 0x50, 0x84, 0x11, 0xa4, 0x11, 0x34, 0x13, 0x14, 0x16, 0x4, 0x10, 0x1c },
{ 0x93, 0x8f, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x7e, 0x10, 0x8, 0xfe, 0x8, 0x92, 0x1c, 0xfe, 0x1a, 0x92, 0x1a, 0x92, 0x28, 0xfe, 0x28, 0x54, 0x48, 0x54, 0x8, 0xd6, 0x8, 0x92, 0x9, 0x93, 0x8, 0x10 },
{ 0x93, 0x90, 0x0, 0x80, 0x30, 0x80, 0x19, 0xfe, 0x9, 0x22, 0x3, 0x24, 0x8, 0x70, 0x18, 0xd8, 0x31, 0x8c, 0x63, 0x7, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x93, 0x91, 0x2, 0x0, 0x22, 0x0, 0x37, 0xfe, 0x14, 0x2, 0xa, 0x2, 0x43, 0xf2, 0x64, 0x82, 0x20, 0x82, 0x7, 0xf2, 0x10, 0x82, 0x14, 0x92, 0x14, 0x92, 0x34, 0x92, 0x27, 0xf6, 0x20, 0x4, 0x60, 0x1c },
{ 0x93, 0x92, 0x0, 0x0, 0x30, 0xfc, 0x18, 0x84, 0x8, 0xfc, 0x0, 0x84, 0x60, 0x84, 0x30, 0xfc, 0x10, 0x0, 0x3, 0xff, 0x8, 0x80, 0x9, 0xff, 0x1b, 0x49, 0x10, 0xd9, 0x33, 0xb3, 0x20, 0x62, 0x61, 0xce },
{ 0x93, 0x93, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0x8, 0x20, 0x1, 0xfe, 0x60, 0x20, 0x33, 0xff, 0x10, 0x40, 0x0, 0x44, 0xb, 0xff, 0x8, 0x84, 0x19, 0xa4, 0x11, 0x34, 0x33, 0x14, 0x26, 0x4, 0x60, 0x1c },
{ 0x93, 0x94, 0x8, 0x0, 0x8, 0x0, 0x8, 0xff, 0x9, 0x8, 0x2b, 0x8, 0x2a, 0x8, 0x68, 0x8, 0x48, 0x8, 0x8, 0x8, 0x8, 0x8, 0x1c, 0x8, 0x14, 0x8, 0x16, 0x8, 0x32, 0x8, 0x23, 0x8, 0x60, 0x38 },
{ 0x93, 0x95, 0x11, 0xe4, 0x12, 0x28, 0x11, 0x71, 0x14, 0xda, 0x55, 0x8c, 0x53, 0x76, 0x56, 0x3, 0x51, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x39, 0xfc, 0x28, 0x88, 0x2c, 0xd8, 0x24, 0x50, 0x63, 0xff, 0x40, 0x0 },
{ 0x93, 0x96, 0x0, 0x80, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x1f, 0xfc, 0x0, 0x0 },
{ 0x93, 0x97, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x50, 0x0, 0x37, 0xfe, 0x10, 0x0, 0x13, 0xfc, 0x12, 0x4, 0x32, 0x4, 0x52, 0x4, 0x13, 0xfc, 0x11, 0x8, 0x31, 0x98, 0x20, 0x90, 0x6f, 0xff, 0x0, 0x0 },
{ 0x93, 0x98, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7c, 0x20, 0x5, 0xfc, 0xc, 0x20, 0xb, 0xfe, 0x18, 0x40, 0x10, 0x44, 0x3b, 0xff, 0x54, 0x84, 0x11, 0xa4, 0x11, 0x34, 0x13, 0x14, 0x16, 0x4, 0x10, 0x1c },
{ 0x93, 0x99, 0x8, 0x20, 0x8, 0x20, 0x1f, 0xbf, 0x34, 0x48, 0x62, 0x84, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x10, 0x0, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x10, 0x2, 0x10, 0x0, 0x70 },
{ 0x93, 0x9a, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x48, 0x62, 0x84, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x73, 0xe7, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x93, 0x9b, 0x10, 0x40, 0x10, 0x40, 0x3f, 0x7f, 0x24, 0x90, 0x42, 0x8, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x93, 0x9c, 0x10, 0x10, 0x54, 0x10, 0x55, 0xff, 0x55, 0x10, 0x11, 0x7e, 0x7d, 0x12, 0x11, 0xff, 0x11, 0x12, 0x39, 0x12, 0x35, 0x7e, 0x51, 0x0, 0x51, 0x7e, 0x13, 0x42, 0x12, 0x42, 0x16, 0x42, 0x10, 0x7e },
{ 0x93, 0x9d, 0x8, 0x20, 0x18, 0x20, 0x33, 0xff, 0x60, 0x40, 0x34, 0xc4, 0xc, 0x84, 0x19, 0xfe, 0x32, 0x4b, 0x7e, 0x48, 0xa, 0x48, 0x8, 0x48, 0x2a, 0x48, 0x2a, 0xc8, 0x6a, 0x89, 0x49, 0x89, 0xb, 0x7 },
{ 0x93, 0x9e, 0x0, 0x2, 0x7f, 0xd2, 0x10, 0x12, 0x10, 0x92, 0x30, 0x92, 0x27, 0xd2, 0x7c, 0x52, 0x4, 0x12, 0x4, 0x12, 0x3f, 0x92, 0x4, 0x12, 0x4, 0x2, 0x4, 0x2, 0x5, 0xc2, 0x1f, 0x2, 0x70, 0xe },
{ 0x93, 0x9f, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff },
{ 0x93, 0xa0, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x31, 0xfc, 0x19, 0x4, 0x1, 0xfc, 0x61, 0x4, 0x31, 0xfc, 0x0, 0x0, 0xb, 0xff, 0x19, 0x0, 0x13, 0xfe, 0x36, 0x92, 0x21, 0xb2, 0x63, 0x6e },
{ 0x93, 0xa1, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3c, 0x92, 0x24, 0x54, 0x24, 0xfe, 0x3c, 0x28, 0x25, 0xff, 0x24, 0x44, 0x3c, 0x92, 0x25, 0x55, 0x24, 0x38, 0x24, 0xd6, 0x65, 0x93, 0x4c, 0x30 },
{ 0x93, 0xa2, 0x0, 0x4, 0x3e, 0x4, 0x0, 0x4, 0x7f, 0x4, 0x0, 0xff, 0x3e, 0x4, 0x0, 0x4, 0x0, 0x64, 0x3e, 0x34, 0x0, 0x14, 0x0, 0x4, 0x3e, 0x4, 0x22, 0x4, 0x22, 0x4, 0x22, 0x4, 0x3e, 0x1c },
{ 0x93, 0xa3, 0x0, 0xa4, 0x3d, 0xfe, 0x24, 0x48, 0x27, 0xff, 0x24, 0x84, 0x3d, 0x7a, 0x26, 0x1, 0x25, 0xfe, 0x24, 0x0, 0x3c, 0xfc, 0x24, 0x0, 0x24, 0xfc, 0x24, 0x0, 0x25, 0xfe, 0x65, 0x2, 0x4d, 0xfe },
{ 0x93, 0xa4, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x4, 0x10, 0x6, 0x10, 0x2, 0x30, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x93, 0xa5, 0x0, 0x10, 0x3c, 0x12, 0x25, 0xd6, 0x24, 0x58, 0x24, 0x5c, 0x24, 0xd6, 0x3d, 0x93, 0x8, 0x30, 0x28, 0x0, 0x2c, 0xfe, 0x28, 0x82, 0x28, 0x82, 0x28, 0xfe, 0x2c, 0x82, 0x38, 0x82, 0x60, 0xfe },
{ 0x93, 0xa6, 0x0, 0x50, 0x30, 0x50, 0x1a, 0x52, 0xb, 0x56, 0x1, 0x54, 0x0, 0x50, 0x0, 0x50, 0x79, 0xdc, 0xb, 0x56, 0x8, 0x52, 0x8, 0xd0, 0x8, 0x92, 0x9, 0x92, 0x1b, 0xe, 0x34, 0x0, 0x63, 0xff },
{ 0x93, 0xa7, 0x0, 0xc, 0x30, 0x38, 0x19, 0xe0, 0x8, 0x20, 0x3, 0xff, 0x0, 0x68, 0x0, 0xa4, 0x7b, 0x23, 0x8, 0xf8, 0x8, 0x48, 0x8, 0x4e, 0x8, 0xc2, 0x9, 0x82, 0x1b, 0xe, 0x34, 0x0, 0x63, 0xff },
{ 0x93, 0xa8, 0x10, 0xf2, 0x39, 0x15, 0x2c, 0xba, 0x64, 0x6c, 0x40, 0xc6, 0x7d, 0x83, 0x10, 0x7c, 0x10, 0x0, 0x7c, 0xfe, 0x10, 0x82, 0x54, 0x82, 0x54, 0xfe, 0x50, 0x44, 0x1c, 0x6c, 0x30, 0x28, 0x61, 0xff },
{ 0x93, 0xa9, 0x0, 0x80, 0x3c, 0x80, 0x25, 0xff, 0x27, 0x1, 0x2c, 0x81, 0x28, 0xf9, 0x29, 0x41, 0x24, 0x41, 0x27, 0xfd, 0x24, 0x41, 0x25, 0x49, 0x2d, 0x49, 0x21, 0x49, 0x21, 0xfb, 0x20, 0x2, 0x20, 0xe },
{ 0x93, 0xaa, 0x0, 0x0, 0x7e, 0xff, 0x0, 0x10, 0x0, 0x7e, 0x3e, 0x42, 0x22, 0x42, 0x22, 0x7e, 0x22, 0x42, 0x3e, 0x42, 0x0, 0x7e, 0x22, 0x42, 0x36, 0x42, 0x14, 0x7e, 0x1f, 0x24, 0x70, 0x66, 0x0, 0xc3 },
{ 0x93, 0xab, 0x1, 0x24, 0x3c, 0xa8, 0x25, 0xfe, 0x24, 0x48, 0x27, 0xff, 0x3c, 0x84, 0x25, 0xfe, 0x26, 0x91, 0x24, 0xfe, 0x3c, 0x90, 0x24, 0xfe, 0x24, 0x90, 0x24, 0xff, 0x25, 0x55, 0x65, 0x55, 0x4d, 0x3 },
{ 0x93, 0xac, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x2f, 0x12, 0x20, 0xfa, 0x2f, 0x12, 0x29, 0x52, 0x2f, 0x52, 0x2a, 0x12, 0x27, 0x12, 0x2c, 0x32, 0x20, 0x6 },
{ 0x93, 0xad, 0x8, 0xc8, 0xb, 0x88, 0x9, 0x8, 0x1f, 0xe8, 0x11, 0x1f, 0x37, 0xe9, 0x35, 0x29, 0x57, 0xe9, 0x15, 0x29, 0x17, 0xe9, 0x11, 0x9, 0x17, 0xe9, 0x11, 0x19, 0x11, 0xd3, 0x17, 0x32, 0x10, 0x66 },
{ 0x93, 0xae, 0x3, 0x90, 0x3e, 0x10, 0x4, 0x10, 0x7f, 0xd0, 0x4, 0x3f, 0x3f, 0x91, 0x24, 0x91, 0x3f, 0x91, 0x24, 0x91, 0x3f, 0x91, 0x4, 0x11, 0x3f, 0x91, 0x4, 0x31, 0x7, 0xa3, 0x1c, 0x62, 0x70, 0xce },
{ 0x93, 0xaf, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x27, 0xf2, 0x24, 0x12, 0x24, 0x12, 0x24, 0x12, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x93, 0xb0, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x93, 0xb1, 0x0, 0x88, 0x37, 0xff, 0x18, 0x40, 0x9, 0xfc, 0x1, 0x4, 0x79, 0xfc, 0x9, 0x4, 0x9, 0xfc, 0x9, 0x4, 0x19, 0xfc, 0x34, 0x0, 0x63, 0xff, 0x0, 0x8, 0x7f, 0xff, 0x4, 0x8, 0x2, 0x38 },
{ 0x93, 0xb2, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x11, 0x4, 0x58, 0x88, 0x57, 0xff, 0x50, 0x0, 0x11, 0xfc, 0x11, 0x24, 0x11, 0xfc, 0x11, 0x24, 0x11, 0xfc, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x17, 0xff },
{ 0x93, 0xb3, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x11, 0x4, 0x78, 0x88, 0x17, 0xff, 0x10, 0x0, 0x11, 0xfc, 0x19, 0x24, 0x71, 0xfc, 0x11, 0x24, 0x11, 0xfc, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x37, 0xff },
{ 0x93, 0xb4, 0x0, 0x0, 0x33, 0xfe, 0x1a, 0x2, 0xa, 0x2, 0x2, 0xfa, 0x62, 0x2, 0x32, 0x2, 0x12, 0xfa, 0x2, 0x8a, 0xa, 0x8a, 0xa, 0x8a, 0x1a, 0xfa, 0x12, 0x2, 0x32, 0x2, 0x22, 0x2, 0x62, 0x6 },
{ 0x93, 0xb5, 0x0, 0x20, 0x78, 0x20, 0x4b, 0xfe, 0x49, 0x4, 0x48, 0x88, 0x7f, 0xff, 0x48, 0x0, 0x49, 0xfc, 0x49, 0x24, 0x79, 0xfc, 0x49, 0x24, 0x49, 0xfc, 0x48, 0x20, 0x7b, 0xfe, 0x0, 0x20, 0x7, 0xff },
{ 0x93, 0xb6, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff },
{ 0x93, 0xb7, 0x0, 0x0, 0x3d, 0xfe, 0x25, 0x2, 0x25, 0x2, 0x25, 0x7a, 0x3d, 0x2, 0x25, 0x2, 0x25, 0x7a, 0x25, 0x4a, 0x3d, 0x4a, 0x25, 0x4a, 0x25, 0x7a, 0x25, 0x2, 0x25, 0x2, 0x65, 0x2, 0x4d, 0x6 },
{ 0x93, 0xb8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x10, 0x0, 0x1f, 0xfe, 0x34, 0x2, 0x67, 0xf2, 0x9, 0x2, 0x1f, 0xfa, 0x1, 0x2, 0x9, 0x12, 0x9, 0x12, 0xf, 0xf6, 0x0, 0x4, 0x0, 0x1c },
{ 0x93, 0xb9, 0x1, 0x4, 0x30, 0x88, 0x1f, 0xff, 0x8, 0x20, 0x1, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x79, 0xfc, 0x9, 0x4, 0x9, 0x4, 0x9, 0xfc, 0x9, 0x4, 0x9, 0x4, 0x19, 0xfc, 0x34, 0x0, 0x63, 0xff },
{ 0x93, 0xba, 0x10, 0x0, 0x39, 0xfe, 0x2d, 0x2, 0x65, 0x2, 0x41, 0x7a, 0x7d, 0x2, 0x11, 0x2, 0x11, 0x7a, 0x7f, 0x4a, 0x11, 0x4a, 0x55, 0x4a, 0x55, 0x7a, 0x51, 0x2, 0x1d, 0x2, 0x31, 0x2, 0x61, 0x6 },
{ 0x93, 0xbb, 0x10, 0x20, 0x10, 0x20, 0x10, 0x3e, 0x54, 0x20, 0x54, 0x20, 0x57, 0xff, 0x54, 0x0, 0x54, 0x0, 0x57, 0xff, 0x54, 0x20, 0x54, 0x20, 0x7c, 0x3c, 0x0, 0x26, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x93, 0xbc, 0x20, 0x10, 0x26, 0x20, 0x3c, 0x7e, 0x20, 0x42, 0x20, 0x7e, 0x22, 0x42, 0x1e, 0x7e, 0x0, 0x40, 0x8, 0x7f, 0x8, 0x40, 0x7f, 0x7f, 0x8, 0x1, 0x9, 0x55, 0x9, 0x55, 0x9, 0x3, 0x8, 0x6 },
{ 0x93, 0xbd, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x21, 0x10, 0x27, 0xfc, 0x21, 0x10, 0x20, 0x80, 0x2f, 0xfe, 0x21, 0x0, 0x23, 0xf8, 0x25, 0x8, 0x21, 0x8, 0x21, 0xf8, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x93, 0xbe, 0x4, 0x0, 0xd, 0xfc, 0x19, 0x4, 0x31, 0xfc, 0x65, 0x4, 0xd, 0x4, 0x19, 0xfc, 0x30, 0x0, 0x77, 0xff, 0x10, 0x8, 0x17, 0xff, 0x11, 0x8, 0x11, 0x88, 0x10, 0x88, 0x10, 0x8, 0x10, 0x38 },
{ 0x93, 0xbf, 0x8, 0x20, 0x18, 0x20, 0x17, 0xff, 0x30, 0x20, 0x63, 0xfe, 0xa, 0x52, 0x1a, 0x52, 0x12, 0x52, 0x33, 0xfe, 0x70, 0x0, 0x10, 0x60, 0x10, 0xb6, 0x12, 0x93, 0x12, 0x85, 0x16, 0xcc, 0x14, 0x78 },
{ 0x93, 0xc0, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0x8, 0x20, 0x0, 0x20, 0x61, 0xfe, 0x30, 0x0, 0x13, 0xff, 0x2, 0x1, 0xa, 0x49, 0x8, 0x48, 0x18, 0x48, 0x10, 0x48, 0x30, 0xc9, 0x21, 0x89, 0x63, 0x7 },
{ 0x93, 0xc1, 0x8, 0x10, 0x28, 0x10, 0x28, 0xfe, 0x28, 0x10, 0x7e, 0x10, 0x48, 0x10, 0x9, 0xff, 0x8, 0x4, 0xe, 0x4, 0x39, 0xff, 0x68, 0x4, 0x8, 0xc4, 0x8, 0x64, 0x8, 0x24, 0x8, 0x4, 0x8, 0x1c },
{ 0x93, 0xc2, 0x8, 0x0, 0xf, 0x7e, 0x8, 0x22, 0x7f, 0xb4, 0x2a, 0x18, 0x29, 0x2c, 0x58, 0x47, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x93, 0xc3, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x0, 0x2, 0x40, 0x2, 0x40, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x93, 0xc4, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0xd0, 0x62, 0x8, 0xf, 0xfe, 0x8, 0x40, 0xf, 0xfc, 0x8, 0x40, 0xf, 0xfc, 0x8, 0x40, 0xf, 0xfe, 0x0, 0x2, 0x12, 0x4a, 0x32, 0x46, 0x20, 0xc },
{ 0x93, 0xc5, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x11, 0x8, 0x11, 0x8, 0x1f, 0xfe, 0x0, 0x10, 0x0, 0x70 },
{ 0x93, 0xc6, 0x4, 0x20, 0x44, 0x20, 0x28, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x2a, 0x22, 0x4a, 0x22, 0xa, 0x22, 0x1a, 0x22, 0x1b, 0xfe, 0x28, 0x20, 0x48, 0x24, 0x8, 0x24, 0x8, 0x3e, 0x19, 0xe2, 0x77, 0x3 },
{ 0x93, 0xc7, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7e, 0x10, 0x0, 0x10, 0x3c, 0xfe, 0x0, 0x0, 0x1, 0xff, 0x3d, 0x1, 0x1, 0x49, 0x0, 0x48, 0x3c, 0x48, 0x24, 0x48, 0x24, 0x49, 0x24, 0xc9, 0x3d, 0x87 },
{ 0x93, 0xc8, 0x10, 0x0, 0x11, 0xff, 0x11, 0x0, 0x7d, 0x0, 0x11, 0xff, 0x11, 0x20, 0x39, 0x20, 0x35, 0x3e, 0x35, 0x22, 0x51, 0x22, 0x51, 0x22, 0x13, 0x62, 0x12, 0x46, 0x16, 0x44, 0x10, 0xc4, 0x11, 0x9c },
{ 0x93, 0xc9, 0x10, 0x80, 0x10, 0xfc, 0x11, 0x88, 0x7d, 0x10, 0x13, 0xfe, 0x11, 0x22, 0x39, 0x22, 0x35, 0xfe, 0x34, 0x20, 0x50, 0xc2, 0x53, 0x26, 0x10, 0xd4, 0x13, 0x38, 0x10, 0xd4, 0x13, 0x13, 0x10, 0x70 },
{ 0x93, 0xca, 0x0, 0x0, 0x3, 0xe0, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x3e, 0x3e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x93, 0xcb, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x6, 0x20, 0xc, 0x3e, 0x38, 0x0, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x93, 0xcc, 0x10, 0x40, 0x10, 0xdc, 0x13, 0x94, 0x7e, 0x14, 0x12, 0x14, 0x13, 0x94, 0x3a, 0x27, 0x36, 0x0, 0x53, 0xbe, 0x52, 0x12, 0x12, 0x16, 0x12, 0x14, 0x13, 0x88, 0x16, 0x1c, 0x12, 0x16, 0x12, 0x23 },
{ 0x93, 0xcd, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x17, 0xfe, 0x14, 0x42, 0x14, 0x42, 0x14, 0x42, 0x17, 0xfe, 0x34, 0x42, 0x24, 0x42, 0x64, 0x42, 0x7, 0xfe },
{ 0x93, 0xce, 0x2, 0x10, 0x2, 0x8, 0x7f, 0xff, 0x0, 0x80, 0x2, 0x61, 0xf, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0x2f, 0xfe, 0x64, 0x92, 0x42, 0x4e },
{ 0x93, 0xcf, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x80, 0x0, 0x80, 0x0, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x93, 0xd0, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x93, 0xd1, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x24, 0x3e, 0x38, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x93, 0xd2, 0x2, 0x10, 0x22, 0x1e, 0x37, 0xb2, 0x12, 0x64, 0x7, 0xbe, 0x42, 0xa, 0x6f, 0xca, 0x20, 0x3f, 0x7, 0x8a, 0x14, 0x8a, 0x17, 0xbe, 0x14, 0x88, 0x37, 0x88, 0x24, 0x88, 0x24, 0x88, 0x65, 0x98 },
{ 0x93, 0xd3, 0x1, 0x0, 0x1, 0x3f, 0x71, 0xc8, 0x57, 0x1e, 0x51, 0x12, 0x55, 0x52, 0x55, 0x5e, 0x55, 0x52, 0x55, 0x52, 0x57, 0xde, 0x51, 0x12, 0x71, 0x12, 0x1, 0x5e, 0x0, 0xd4, 0x0, 0x36, 0x0, 0x63 },
{ 0x93, 0xd4, 0x0, 0x80, 0x0, 0x8e, 0x0, 0xf8, 0x7f, 0x80, 0x0, 0x80, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x81, 0x0, 0xc3, 0x0, 0x7e },
{ 0x93, 0xd5, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x8, 0x0, 0x2c, 0x7c, 0x2a, 0x44, 0x6a, 0x7c, 0x48, 0x0, 0x8, 0xfe, 0x8, 0x4, 0x8, 0x8, 0x9, 0xff, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x30 },
{ 0x93, 0xd6, 0x4, 0x20, 0x4, 0x20, 0x7f, 0xe0, 0x0, 0x3f, 0x1f, 0x24, 0x11, 0x64, 0x1f, 0x44, 0x0, 0x2c, 0x3f, 0x28, 0x2, 0x38, 0x4, 0x10, 0x7, 0x90, 0x7c, 0x38, 0x4, 0x2c, 0x4, 0x66, 0x1c, 0xc3 },
{ 0x93, 0xd7, 0x0, 0x40, 0x30, 0x46, 0x18, 0x7c, 0xf, 0xc0, 0x0, 0x40, 0x60, 0x40, 0x32, 0x44, 0x12, 0x44, 0x2, 0x44, 0xa, 0x44, 0xa, 0x44, 0x1b, 0xfc, 0x10, 0x40, 0x30, 0x41, 0x20, 0x63, 0x60, 0x3e },
{ 0x93, 0xd8, 0x0, 0x0, 0x3b, 0xff, 0x28, 0x40, 0x28, 0xc0, 0x29, 0xa2, 0x3b, 0x26, 0x28, 0x74, 0x28, 0xd0, 0x29, 0x90, 0x3b, 0x38, 0x28, 0x58, 0x28, 0xd4, 0x29, 0x96, 0x2b, 0x13, 0x68, 0x30, 0x58, 0xe0 },
{ 0x93, 0xd9, 0x0, 0x6, 0x30, 0x1c, 0x19, 0xf0, 0x9, 0x10, 0x1, 0xff, 0x1, 0x10, 0x1, 0x7e, 0x79, 0x42, 0x9, 0x7e, 0x9, 0x42, 0x9, 0x7e, 0x9, 0x42, 0xa, 0x42, 0x18, 0x7e, 0x34, 0x0, 0x63, 0xff },
{ 0x93, 0xda, 0x8, 0x0, 0x8, 0xff, 0xf, 0x10, 0x78, 0x7e, 0x8, 0x42, 0x2a, 0x42, 0x2a, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x2a, 0x7e, 0x3e, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x9, 0x24, 0x7, 0x66, 0x0, 0xc3 },
{ 0x93, 0xdb, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x7f, 0xff, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x93, 0xdc, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x4, 0x8, 0x8, 0xfc, 0x3f, 0x86 },
{ 0x93, 0xdd, 0x8, 0x10, 0x1c, 0x16, 0x16, 0x1c, 0x32, 0xf0, 0x20, 0x10, 0x7e, 0x92, 0x8, 0x92, 0x8, 0x92, 0x7e, 0x92, 0x8, 0x92, 0x4a, 0xfe, 0x6a, 0x10, 0x28, 0x10, 0xe, 0x11, 0x38, 0x1b, 0x60, 0xe },
{ 0x93, 0xde, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x73, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x3, 0x80 },
{ 0x93, 0xdf, 0x0, 0x0, 0x7f, 0xbf, 0x8, 0xa1, 0x8, 0xa3, 0x8, 0xa2, 0x7f, 0xa6, 0x8, 0xa4, 0x8, 0xa2, 0x8, 0xa1, 0x7f, 0xa1, 0x8, 0xa1, 0x8, 0xa1, 0x18, 0xa7, 0x11, 0xa0, 0x31, 0x20, 0x67, 0x20 },
{ 0x93, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x21, 0xc2, 0x21, 0x42, 0x23, 0x62, 0x26, 0x32, 0x2c, 0x1a, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x93, 0xe1, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x1f, 0xff, 0x10, 0x80, 0x30, 0x80, 0x60, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x93, 0xe2, 0x0, 0x0, 0x1f, 0xf8, 0x10, 0x8, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x12, 0x88, 0x12, 0xe8, 0x12, 0x88, 0x12, 0x88, 0x12, 0x88, 0x12, 0x88, 0x12, 0x8c, 0x32, 0x85, 0x2f, 0xf7, 0x60, 0x2 },
{ 0x93, 0xe3, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x10, 0x24, 0x10, 0x28, 0x3e, 0x7f, 0x28, 0xc8, 0x8, 0x48, 0x7f, 0x7e, 0x8, 0x48, 0x8, 0x48, 0x1c, 0x7e, 0x16, 0x48, 0x32, 0x48, 0x60, 0x7f },
{ 0x93, 0xe4, 0x0, 0x8, 0x3a, 0x49, 0x3, 0x6b, 0x7d, 0x2a, 0x0, 0x8, 0x38, 0x7f, 0x0, 0x8, 0x3, 0x9c, 0x38, 0x9c, 0x0, 0xaa, 0x0, 0xaa, 0x38, 0xc9, 0x28, 0x88, 0x29, 0x88, 0x2b, 0x40, 0x3a, 0x3f },
{ 0x93, 0xe5, 0x2, 0x8a, 0x22, 0x8a, 0x3f, 0xf4, 0x12, 0x9f, 0x0, 0x34, 0x47, 0xd4, 0x65, 0x54, 0x25, 0x5f, 0x7, 0xd4, 0x11, 0x14, 0x17, 0xd4, 0x11, 0x1f, 0x3f, 0xf4, 0x22, 0x94, 0x26, 0xd4, 0x6c, 0x5f },
{ 0x93, 0xe6, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x50, 0x78, 0xd8, 0x11, 0x8c, 0x17, 0x7, 0x10, 0xf8, 0x18, 0x0, 0x70, 0x0, 0x17, 0xff, 0x10, 0x20, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x30, 0xe0 },
{ 0x93, 0xe7, 0x10, 0x0, 0x38, 0xfe, 0x2c, 0x82, 0x64, 0x9e, 0x40, 0x92, 0x7c, 0x92, 0x10, 0x92, 0x11, 0xff, 0x7d, 0x1, 0x11, 0x7d, 0x55, 0x45, 0x55, 0x45, 0x51, 0x7d, 0x1d, 0x1, 0x31, 0x1, 0x61, 0x7 },
{ 0x93, 0xe8, 0x8, 0x82, 0x8, 0xc6, 0x8, 0x44, 0x9, 0xff, 0x7e, 0x28, 0x8, 0x28, 0x9, 0xff, 0x1d, 0x29, 0x1b, 0x29, 0x29, 0xcf, 0x29, 0x1, 0x49, 0xff, 0x9, 0x1, 0x9, 0x1, 0x9, 0xff, 0x8, 0x0 },
{ 0x93, 0xe9, 0x0, 0x1, 0x3f, 0xa1, 0x24, 0x29, 0x24, 0x29, 0x3f, 0x29, 0x24, 0x29, 0x24, 0x29, 0x3f, 0x29, 0x24, 0x29, 0x24, 0x29, 0x3f, 0xa9, 0x0, 0xa9, 0x55, 0xa9, 0x54, 0xa1, 0x41, 0xa1, 0x3, 0x41 },
{ 0x93, 0xea, 0x8, 0x0, 0x18, 0xfe, 0x30, 0x92, 0x62, 0xfe, 0x36, 0x92, 0xc, 0x92, 0x18, 0xfe, 0x32, 0x10, 0x7e, 0xfe, 0xa, 0x92, 0x8, 0xfe, 0x2a, 0x92, 0x2a, 0x92, 0x6a, 0xfe, 0x48, 0x11, 0x8, 0xf },
{ 0x93, 0xeb, 0x0, 0x0, 0x3, 0xde, 0x7c, 0x42, 0x55, 0x4a, 0x54, 0x84, 0x55, 0x4a, 0x56, 0x11, 0x7c, 0x0, 0x54, 0x0, 0x57, 0xfe, 0x54, 0x52, 0x56, 0x92, 0x7d, 0x14, 0x1, 0x88, 0x2, 0x94, 0xc, 0x23 },
{ 0x93, 0xec, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x24, 0x12, 0x22, 0x22, 0x27, 0xf2, 0x20, 0x82, 0x20, 0x82, 0x2f, 0xfa, 0x20, 0x82, 0x20, 0x82, 0x20, 0x82, 0x20, 0x8e },
{ 0x93, 0xed, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x7c, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x3a, 0x8a, 0x36, 0x52, 0x52, 0xfa, 0x52, 0x22, 0x12, 0x22, 0x12, 0xfa, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x26 },
{ 0x93, 0xee, 0x10, 0x40, 0x10, 0x40, 0x7e, 0x40, 0x10, 0x7f, 0x7e, 0x41, 0x52, 0xd3, 0x53, 0x92, 0x7e, 0x10, 0x52, 0x10, 0x52, 0x38, 0x7e, 0x28, 0x10, 0x28, 0x7e, 0x6c, 0x10, 0x44, 0x10, 0xc6, 0x11, 0x83 },
{ 0x93, 0xef, 0x12, 0x24, 0x7f, 0xac, 0x12, 0x28, 0x0, 0x7f, 0x3f, 0x48, 0x29, 0xc8, 0x29, 0x48, 0x3f, 0x7e, 0x8, 0x48, 0x3f, 0x48, 0x8, 0x48, 0x7f, 0xfe, 0x14, 0x48, 0x16, 0x48, 0x33, 0x48, 0x60, 0x7f },
{ 0x93, 0xf0, 0x0, 0x40, 0x30, 0x40, 0x18, 0x40, 0x8, 0x40, 0x7, 0xff, 0x60, 0x88, 0x30, 0x88, 0x10, 0x88, 0x1, 0x88, 0x9, 0x18, 0x9, 0x10, 0x1b, 0xd0, 0x10, 0x70, 0x30, 0xdc, 0x23, 0x86, 0x6e, 0x2 },
{ 0x93, 0xf1, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0 },
{ 0x93, 0xf2, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x11, 0x0, 0x11, 0x6, 0x11, 0x3c, 0x11, 0xe0, 0x11, 0x0, 0x31, 0x0, 0x21, 0x1, 0x61, 0x83, 0x0, 0xfe },
{ 0x93, 0xf3, 0x0, 0x4c, 0x1e, 0x46, 0x0, 0x42, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x3f, 0x30, 0x0, 0x10, 0x0, 0x10, 0x0, 0x18, 0x3, 0x88, 0x1e, 0xd, 0x70, 0x7, 0x0, 0x2 },
{ 0x93, 0xf4, 0x0, 0x80, 0x30, 0x80, 0x19, 0xff, 0x9, 0x20, 0x3, 0x20, 0x6, 0x20, 0x0, 0xa4, 0x78, 0xa4, 0x8, 0xa4, 0x9, 0xa6, 0x9, 0x22, 0xb, 0x23, 0x8, 0x20, 0x18, 0x60, 0x34, 0x0, 0x63, 0xff },
{ 0x93, 0xf5, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfe, 0x18, 0x2, 0x10, 0x2, 0x34, 0x2, 0x64, 0x32, 0x4, 0xe2, 0x7, 0x82, 0x4, 0x2, 0x4, 0x2, 0x4, 0xa, 0x6, 0x1a, 0x3, 0xf6, 0x0, 0x4, 0x0, 0x1c },
{ 0x93, 0xf6, 0x0, 0x0, 0x3e, 0xff, 0x22, 0x80, 0x22, 0x80, 0x3e, 0xbe, 0x22, 0x80, 0x22, 0x80, 0x22, 0xff, 0x3e, 0xa8, 0x22, 0xa9, 0x22, 0xab, 0x22, 0xaa, 0x3e, 0xac, 0x14, 0xa4, 0x36, 0xb6, 0x63, 0x63 },
{ 0x93, 0xf7, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x21, 0xc2, 0x21, 0x62, 0x23, 0x32, 0x26, 0x9a, 0x20, 0x82, 0x21, 0xc2, 0x21, 0x62, 0x23, 0x32, 0x26, 0x1a, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x93, 0xf8, 0x8, 0x0, 0x8, 0x0, 0x8, 0xfe, 0x7f, 0x10, 0x49, 0x10, 0x49, 0x10, 0x49, 0x10, 0x49, 0x10, 0x49, 0x10, 0x7f, 0x10, 0x8, 0x10, 0xa, 0x10, 0xa, 0x10, 0xf, 0x10, 0x39, 0xff, 0x60, 0x0 },
{ 0x93, 0xf9, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0 },
{ 0x93, 0xfa, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0 },
{ 0x93, 0xfb, 0x1, 0xa0, 0x7, 0x20, 0x7c, 0xa0, 0x29, 0xa0, 0x15, 0x20, 0x0, 0x20, 0x3f, 0xa0, 0x1, 0x20, 0x2, 0x20, 0x4, 0x20, 0x7, 0xe0, 0x7c, 0x20, 0x4, 0x20, 0x4, 0x21, 0x4, 0x33, 0x1c, 0x1e },
{ 0x93, 0xfc, 0x0, 0x0, 0xf, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x94, 0x40, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x7e, 0x7e, 0x42, 0x12, 0x42, 0x12, 0x42, 0x12, 0x42, 0x36, 0x42, 0x24, 0x42, 0x24, 0x42, 0x7c, 0x42, 0xe, 0x42, 0x1b, 0x7e, 0x31, 0x0, 0x60, 0x0 },
{ 0x94, 0x41, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x40, 0x10, 0x42, 0x17, 0x46, 0x11, 0x6c, 0x11, 0x78, 0x13, 0x50, 0x32, 0x58, 0x26, 0x4c, 0x6c, 0x47, 0x1, 0xc0 },
{ 0x94, 0x42, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x0, 0x0, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff },
{ 0x94, 0x43, 0x4, 0x6, 0x4, 0x3c, 0xd, 0xe0, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x30, 0x20, 0x53, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x11, 0xfe, 0x10, 0x0 },
{ 0x94, 0x44, 0x8, 0x6, 0x8, 0x1c, 0x8, 0xf0, 0x8, 0x10, 0x7e, 0x10, 0x12, 0x10, 0x12, 0x10, 0x13, 0xff, 0x36, 0x10, 0x24, 0x10, 0x24, 0x10, 0x7c, 0x10, 0xa, 0x10, 0x19, 0x10, 0x30, 0xfe, 0x60, 0x0 },
{ 0x94, 0x45, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x42, 0xc, 0x42, 0x6, 0xc2, 0x1, 0x82, 0x3, 0x86, 0xe, 0xc4, 0x38, 0x5c, 0x0, 0x0, 0x0, 0xc0, 0x2, 0x60, 0x12, 0x26, 0x12, 0xb, 0x33, 0x19, 0x61, 0xf0 },
{ 0x94, 0x46, 0x0, 0x0, 0x39, 0xfe, 0x0, 0x22, 0x7d, 0xa2, 0x0, 0xe2, 0x38, 0x46, 0x0, 0xe4, 0x1, 0xac, 0x38, 0x0, 0x0, 0x20, 0x0, 0x30, 0x38, 0x52, 0x29, 0x43, 0x29, 0x45, 0x2b, 0x44, 0x3a, 0x3c },
{ 0x94, 0x47, 0x0, 0x0, 0x31, 0xfe, 0x18, 0x20, 0xb, 0xff, 0x2, 0x21, 0x63, 0xad, 0x32, 0x21, 0x11, 0xac, 0x0, 0x0, 0xb, 0xff, 0x8, 0x20, 0x1b, 0xff, 0x12, 0x49, 0x32, 0x49, 0x22, 0x49, 0x62, 0x4b },
{ 0x94, 0x48, 0x10, 0x0, 0x17, 0xff, 0x11, 0x24, 0x7a, 0x22, 0xf, 0xff, 0xa, 0x22, 0x1b, 0x76, 0x12, 0xaa, 0x33, 0x76, 0x3a, 0x22, 0x57, 0x76, 0x12, 0xaa, 0x13, 0x76, 0x12, 0x22, 0x12, 0x22, 0x12, 0x6 },
{ 0x94, 0x49, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x7c, 0xff, 0x4, 0x90, 0xd, 0x90, 0xb, 0x10, 0x18, 0x54, 0x10, 0x54, 0x3c, 0x54, 0x56, 0xd6, 0x10, 0x92, 0x11, 0x93, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70 },
{ 0x94, 0x4a, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2a, 0x4a, 0x1a, 0x2c, 0x33, 0xe6, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x24, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x94, 0x4b, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x0, 0xf, 0xfe, 0x19, 0x12, 0x76, 0x22, 0x3, 0xc6, 0x1c, 0xe4, 0x3, 0x1c, 0x0, 0x0, 0x15, 0x86, 0x14, 0xcb, 0x36, 0x19, 0x63, 0xf0 },
{ 0x94, 0x4c, 0x4, 0x88, 0x44, 0x88, 0x2b, 0xff, 0x10, 0x88, 0x10, 0x88, 0x28, 0x0, 0x4b, 0xfe, 0xa, 0x22, 0x1a, 0x22, 0x1a, 0x22, 0x2b, 0xfe, 0x4a, 0x22, 0xa, 0x22, 0xa, 0x22, 0x1a, 0x22, 0x73, 0xfe },
{ 0x94, 0x4d, 0x8, 0x10, 0x8, 0x10, 0x3f, 0x10, 0x8, 0x7c, 0x7f, 0x94, 0x12, 0x14, 0x2b, 0x94, 0x5e, 0x74, 0x8, 0x24, 0x1f, 0x75, 0x70, 0xd3, 0x0, 0x0, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x94, 0x4e, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfe, 0x18, 0x40, 0x30, 0x40, 0x60, 0x40, 0xf, 0xfc, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40 },
{ 0x94, 0x4f, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x73, 0xe7, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x10, 0x0, 0x30, 0x0, 0x20, 0x5, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x94, 0x50, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x79, 0x8c, 0x17, 0x7, 0x10, 0xf8, 0x10, 0x0, 0x13, 0xfe, 0x18, 0x4, 0x70, 0xc, 0x10, 0x68, 0x10, 0x30, 0x12, 0x96, 0x12, 0x83, 0x16, 0xc5, 0x34, 0x7c },
{ 0x94, 0x51, 0x11, 0xa, 0x11, 0x9, 0x11, 0xc8, 0x79, 0x7f, 0x12, 0xc8, 0x12, 0x48, 0x15, 0x48, 0x10, 0x9c, 0x18, 0x94, 0x71, 0x36, 0x12, 0x63, 0x10, 0x0, 0x12, 0x92, 0x12, 0x92, 0x16, 0xdb, 0x34, 0x49 },
{ 0x94, 0x52, 0x11, 0xa, 0x11, 0x9, 0x15, 0xc8, 0x55, 0x7f, 0x5a, 0xc8, 0x52, 0x48, 0x55, 0x48, 0x10, 0x9c, 0x10, 0x94, 0x11, 0x36, 0x12, 0x63, 0x38, 0x0, 0x2a, 0x92, 0x2a, 0x92, 0x66, 0xdb, 0x44, 0x49 },
{ 0x94, 0x53, 0x8, 0x10, 0x49, 0x10, 0x6b, 0x10, 0x2a, 0x10, 0x8, 0x1f, 0x7f, 0x10, 0x8, 0x10, 0x8, 0x10, 0x1c, 0x10, 0x1a, 0xfe, 0x29, 0x82, 0x28, 0x82, 0x48, 0x82, 0x8, 0x82, 0x8, 0x82, 0x8, 0xfe },
{ 0x94, 0x54, 0x0, 0x0, 0x3f, 0xf0, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x10, 0x2, 0x1e, 0x6, 0x2, 0x4, 0x2, 0x4, 0x2, 0xc, 0x2, 0x8, 0x2, 0x18, 0x6, 0x30, 0x4, 0x60, 0x3c, 0x0, 0x0 },
{ 0x94, 0x55, 0x0, 0x0, 0x7d, 0xff, 0x4, 0x28, 0x8, 0x28, 0x10, 0xfe, 0x3c, 0xaa, 0x4, 0xaa, 0x4, 0xaa, 0x24, 0xae, 0x34, 0xc2, 0x1c, 0x82, 0x8, 0x82, 0x1c, 0xfe, 0x16, 0x0, 0x33, 0x80, 0x60, 0xff },
{ 0x94, 0x56, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x6, 0x0, 0xc, 0x0, 0x8, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x9, 0x80, 0xb, 0x0, 0x1e, 0x0, 0x33, 0x80, 0x60, 0xff },
{ 0x94, 0x57, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x14, 0x54, 0x16, 0x54, 0x35, 0x56, 0x24, 0xd2, 0x64, 0x93, 0x4, 0x10, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x94, 0x58, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x48, 0x9, 0x12, 0x24, 0x6f, 0xfb, 0x2, 0x20, 0x1f, 0xfc, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x48, 0x78, 0x30, 0xf, 0xf },
{ 0x94, 0x59, 0x10, 0x21, 0x11, 0x33, 0x11, 0x92, 0x10, 0x96, 0x58, 0x84, 0x54, 0x0, 0x55, 0x5, 0x51, 0x4d, 0x11, 0x69, 0x11, 0x39, 0x11, 0x11, 0x11, 0x39, 0x11, 0x6d, 0x11, 0x45, 0x11, 0x1, 0x11, 0xff },
{ 0x94, 0x5a, 0x0, 0x50, 0x31, 0xfe, 0x19, 0x52, 0x9, 0xfe, 0x1, 0x52, 0x61, 0xfe, 0x30, 0x0, 0x13, 0xff, 0x2, 0x0, 0xa, 0xfe, 0xa, 0x0, 0x1b, 0xff, 0x12, 0x92, 0x32, 0x9a, 0x24, 0xec, 0x61, 0x87 },
{ 0x94, 0x5b, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x61, 0xff, 0x29, 0x11, 0x19, 0x11, 0x11, 0x39, 0x25, 0x29, 0x7d, 0x29, 0x15, 0x6d, 0x11, 0x45, 0x55, 0x1, 0x55, 0x1, 0x55, 0x1, 0x11, 0x1, 0x11, 0x7 },
{ 0x94, 0x5c, 0x8, 0x20, 0x1a, 0x26, 0x12, 0x3c, 0x3f, 0x20, 0x61, 0x21, 0x0, 0x33, 0x3f, 0x1e, 0x21, 0x0, 0x21, 0x0, 0x3f, 0x20, 0x21, 0x26, 0x21, 0x3c, 0x3f, 0x20, 0x21, 0x21, 0x21, 0x33, 0x23, 0x1e },
{ 0x94, 0x5d, 0x0, 0x21, 0x3d, 0x33, 0x25, 0x92, 0x24, 0x96, 0x24, 0x84, 0x3c, 0x0, 0x25, 0x5, 0x25, 0x4d, 0x25, 0x69, 0x3d, 0x39, 0x25, 0x11, 0x25, 0x39, 0x25, 0x6d, 0x25, 0x45, 0x65, 0x1, 0x4d, 0xff },
{ 0x94, 0x5e, 0x0, 0x28, 0x3c, 0xfe, 0x24, 0xaa, 0x24, 0xfe, 0x24, 0xaa, 0x3c, 0xfe, 0x24, 0x0, 0x25, 0xff, 0x25, 0x0, 0x3d, 0x7e, 0x25, 0x0, 0x25, 0xff, 0x25, 0x52, 0x25, 0x4a, 0x66, 0x6c, 0x4c, 0xc7 },
{ 0x94, 0x5f, 0x1, 0x20, 0xf, 0xfc, 0x9, 0x24, 0xf, 0xfc, 0x9, 0x24, 0xf, 0xfc, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x17, 0xfc, 0x10, 0x0, 0x1f, 0xff, 0x12, 0x44, 0x32, 0x6c, 0x63, 0xb8, 0xe, 0xf },
{ 0x94, 0x60, 0x0, 0x0, 0x7e, 0x7e, 0x2, 0x42, 0x2, 0x42, 0x3a, 0x7e, 0x2, 0x42, 0x2, 0x42, 0x3a, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x2a, 0x7e, 0x3a, 0x24, 0x2, 0x24, 0x2, 0x25, 0x2, 0x65, 0xe, 0xc3 },
{ 0x94, 0x61, 0x0, 0x0, 0x3f, 0xfc, 0x4, 0x8c, 0x26, 0x58, 0x33, 0x70, 0x11, 0xc0, 0x7, 0x70, 0x1c, 0x1c, 0x70, 0x87, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x82, 0x0, 0xff, 0x7f, 0x81 },
{ 0x94, 0x62, 0x0, 0x0, 0x3f, 0xfc, 0x21, 0x4, 0x21, 0x4, 0x21, 0x4, 0x21, 0x4, 0x21, 0x4, 0x3f, 0xfc, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x1, 0x30, 0x3, 0x1f, 0xfe, 0x0, 0x0 },
{ 0x94, 0x63, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x7a, 0x22, 0x12, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x1a, 0x0, 0x72, 0x0, 0x12, 0x0, 0x12, 0x0, 0x12, 0x1, 0x13, 0x3, 0x11, 0xfe, 0x30, 0x0 },
{ 0x94, 0x64, 0x10, 0x1c, 0x11, 0xf0, 0x12, 0x22, 0x79, 0x24, 0x17, 0xff, 0x10, 0xa8, 0x11, 0xac, 0x1b, 0x26, 0x76, 0x23, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x33, 0xfe },
{ 0x94, 0x65, 0x7f, 0xff, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x12, 0x0, 0x7f, 0xbe, 0x12, 0x22, 0x1e, 0x22, 0x8, 0x3e, 0x3f, 0x22, 0x29, 0x22, 0x3f, 0x3e, 0x8, 0x22, 0x7f, 0xa2, 0x8, 0x46 },
{ 0x94, 0x66, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x22, 0x7d, 0x22, 0x11, 0x22, 0x11, 0x22, 0x39, 0x22, 0x35, 0xfe, 0x35, 0x0, 0x51, 0x0, 0x51, 0x0, 0x11, 0x0, 0x11, 0x1, 0x11, 0x83, 0x10, 0xfe, 0x10, 0x0 },
{ 0x94, 0x67, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0xb, 0xff, 0x2, 0x21, 0x62, 0x22, 0x32, 0x20, 0x13, 0xfe, 0x2, 0x82, 0xa, 0xc6, 0xa, 0x44, 0x1a, 0x6c, 0x16, 0x38, 0x34, 0x6c, 0x2c, 0xc6, 0x61, 0x83 },
{ 0x94, 0x68, 0x0, 0x6, 0x30, 0x3c, 0x1b, 0xe0, 0xa, 0x6, 0x2, 0x1c, 0x62, 0x70, 0x32, 0x42, 0x12, 0x46, 0x2, 0x6c, 0xa, 0x70, 0xa, 0x50, 0x1a, 0x58, 0x16, 0x4c, 0x34, 0x46, 0x2c, 0x43, 0x60, 0x40 },
{ 0x94, 0x69, 0x0, 0x0, 0x7f, 0x7f, 0x8, 0x8, 0x3e, 0x3e, 0x8, 0x8, 0x7f, 0x7f, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x1, 0x18, 0x3, 0xf, 0xfe },
{ 0x94, 0x6a, 0x0, 0x10, 0x7e, 0x10, 0x10, 0x10, 0x10, 0xff, 0x10, 0x91, 0x10, 0x92, 0x3c, 0x90, 0x24, 0xfe, 0x64, 0xa2, 0x24, 0xb6, 0x24, 0x94, 0x24, 0x9c, 0x25, 0x88, 0x3d, 0x1c, 0x3, 0x36, 0x0, 0x63 },
{ 0x94, 0x6b, 0x0, 0x20, 0x18, 0x20, 0xd, 0xfe, 0x61, 0x22, 0x31, 0xfc, 0x1, 0x44, 0x9, 0x68, 0x1b, 0x38, 0x36, 0x6c, 0x61, 0xc7, 0x2, 0x0, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xa0, 0x0, 0xf8, 0x3f, 0x8e },
{ 0x94, 0x6c, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xff, 0x0, 0x1, 0x24, 0x91, 0x66, 0xdb, 0x42, 0x4e },
{ 0x94, 0x6d, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x1, 0x18, 0x3, 0xf, 0xfe },
{ 0x94, 0x6e, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xf8, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xf8, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xfe, 0x0, 0x2, 0x29, 0x22, 0x6d, 0xb2, 0x44, 0x96, 0x0, 0xc },
{ 0x94, 0x6f, 0x4, 0x48, 0x4, 0x48, 0xc, 0x48, 0xb, 0xcf, 0x18, 0x48, 0x10, 0x48, 0x30, 0x48, 0x53, 0xcf, 0x10, 0x48, 0x10, 0x48, 0x11, 0xc8, 0x17, 0x4f, 0x10, 0x48, 0x10, 0xc8, 0x11, 0x88, 0x13, 0x8 },
{ 0x94, 0x70, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x17, 0xe2, 0x10, 0x95, 0x15, 0xa, 0x12, 0x4, 0x1d, 0xfb, 0x10, 0x90, 0x10, 0x90, 0x17, 0xfe, 0x30, 0x90, 0x21, 0x91, 0x63, 0x13, 0xe, 0xe },
{ 0x94, 0x71, 0x10, 0x0, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x7b, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x18, 0x20, 0x70, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20 },
{ 0x94, 0x72, 0x10, 0x48, 0x10, 0x48, 0x10, 0x48, 0x13, 0xcf, 0x78, 0x48, 0x10, 0x48, 0x10, 0x48, 0x13, 0xcf, 0x18, 0x48, 0x70, 0x48, 0x11, 0xc8, 0x17, 0x4f, 0x10, 0x48, 0x10, 0xc8, 0x11, 0x88, 0x33, 0x8 },
{ 0x94, 0x73, 0x0, 0x40, 0x3e, 0x40, 0x22, 0x40, 0x22, 0xff, 0x3e, 0x84, 0x23, 0x84, 0x22, 0x44, 0x22, 0x6c, 0x3e, 0x28, 0x22, 0x38, 0x22, 0x10, 0x22, 0x38, 0x3e, 0x28, 0x14, 0x6c, 0x36, 0xc6, 0x63, 0x83 },
{ 0x94, 0x74, 0x10, 0x0, 0x13, 0xff, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x30, 0x10, 0x20, 0x38, 0x68, 0x34, 0x6c, 0x34, 0xe4, 0x51, 0xa6, 0x53, 0x23, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x94, 0x75, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x40, 0x0, 0xc0, 0x3, 0xb0, 0xe, 0x9c, 0x78, 0x87, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x94, 0x76, 0x0, 0x10, 0x24, 0x20, 0x24, 0xfe, 0x24, 0x92, 0x24, 0x92, 0x3e, 0xfe, 0x20, 0x92, 0x20, 0x92, 0x20, 0xfe, 0x3c, 0x28, 0x24, 0x48, 0x25, 0xff, 0x24, 0x8, 0x24, 0x8, 0x64, 0x8, 0x44, 0x8 },
{ 0x94, 0x77, 0x2, 0x40, 0x2, 0x46, 0x7e, 0x7c, 0x2, 0x40, 0x2, 0x41, 0x1e, 0x63, 0x72, 0x3e, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x94, 0x78, 0x0, 0x10, 0x3c, 0x10, 0x24, 0x10, 0x25, 0xff, 0x24, 0x10, 0x3c, 0x10, 0x24, 0xfe, 0x24, 0x92, 0x24, 0x92, 0x3c, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x96, 0x24, 0x10, 0x64, 0x10, 0x4c, 0x10 },
{ 0x94, 0x79, 0x2, 0x20, 0x7e, 0x3f, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x7e, 0x3f, 0x4, 0x20, 0x8, 0x80, 0x7f, 0xff, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80 },
{ 0x94, 0x7a, 0x0, 0x0, 0x7f, 0xbe, 0xa, 0x2, 0xa, 0x2, 0x3f, 0x82, 0x2a, 0x82, 0x2a, 0xbe, 0x2a, 0xa0, 0x33, 0xa0, 0x20, 0xa0, 0x20, 0xa0, 0x3f, 0xa0, 0x20, 0xa1, 0x20, 0xb3, 0x3f, 0x9e, 0x0, 0x0 },
{ 0x94, 0x7b, 0x4, 0x20, 0x4, 0x20, 0xf, 0xfe, 0x9, 0x4, 0x19, 0x8c, 0x10, 0x88, 0x30, 0x88, 0x57, 0xff, 0x10, 0x0, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x11, 0xfc },
{ 0x94, 0x7c, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x11, 0x4, 0x7d, 0x8c, 0x10, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x0, 0x10, 0x0, 0x1d, 0xfc, 0x71, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xfc },
{ 0x94, 0x7d, 0x8, 0x44, 0x8, 0x44, 0x9, 0xff, 0x8, 0x44, 0x7e, 0x7c, 0x12, 0x44, 0x12, 0x44, 0x12, 0x7c, 0x32, 0x10, 0x27, 0xff, 0x24, 0x54, 0x7c, 0x54, 0xa, 0xd6, 0x1a, 0x92, 0x31, 0x93, 0x60, 0x10 },
{ 0x94, 0x7e, 0x10, 0x80, 0x10, 0x80, 0x11, 0xff, 0x7d, 0x0, 0x13, 0x0, 0x10, 0xfe, 0x38, 0x92, 0x34, 0x92, 0x30, 0x92, 0x53, 0xff, 0x51, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0xff, 0x10, 0x4, 0x10, 0x1c },
{ 0x94, 0x80, 0x8, 0x44, 0x8, 0x44, 0x9, 0xff, 0x7e, 0x44, 0x8, 0x7c, 0x8, 0x44, 0x1c, 0x44, 0x1a, 0x7c, 0x1a, 0x10, 0x29, 0xff, 0x28, 0x54, 0x48, 0x54, 0x8, 0xd6, 0x8, 0x92, 0x9, 0x93, 0x8, 0x10 },
{ 0x94, 0x81, 0x8, 0x44, 0x8, 0x44, 0x9, 0xff, 0xa, 0x44, 0x2a, 0x7c, 0x2a, 0x44, 0x68, 0x44, 0x48, 0x7c, 0x8, 0x10, 0x9, 0xff, 0x1c, 0x54, 0x14, 0x54, 0x16, 0xd6, 0x32, 0x92, 0x21, 0x93, 0x60, 0x10 },
{ 0x94, 0x82, 0x4, 0x0, 0x44, 0xfe, 0x28, 0x82, 0x10, 0x82, 0x10, 0xfe, 0x28, 0x82, 0x48, 0x82, 0x8, 0x82, 0x18, 0xfe, 0x18, 0x82, 0x28, 0x82, 0x48, 0x82, 0x8, 0xfe, 0x8, 0x44, 0x18, 0xc6, 0x71, 0x83 },
{ 0x94, 0x83, 0x0, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x4, 0x10, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x94, 0x84, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x22, 0x22, 0x2, 0x20, 0x6, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x94, 0x85, 0x0, 0x20, 0x3c, 0x20, 0x25, 0xfe, 0x24, 0x84, 0x3c, 0x84, 0x24, 0xcc, 0x24, 0x48, 0x27, 0xff, 0x3c, 0x0, 0x24, 0x0, 0x24, 0xfc, 0x24, 0x84, 0x3c, 0x84, 0x14, 0x84, 0x36, 0x84, 0x62, 0xfc },
{ 0x94, 0x86, 0x0, 0x20, 0x3c, 0x20, 0x25, 0xfe, 0x24, 0x84, 0x24, 0xcc, 0x28, 0x48, 0x28, 0x48, 0x2b, 0xff, 0x24, 0x0, 0x24, 0x0, 0x24, 0xfc, 0x24, 0x84, 0x3c, 0x84, 0x20, 0x84, 0x20, 0x84, 0x20, 0xfc },
{ 0x94, 0x87, 0x0, 0x0, 0x30, 0xfc, 0x18, 0x0, 0xb, 0xff, 0x0, 0x0, 0x0, 0xfc, 0x0, 0x0, 0x78, 0xfc, 0x8, 0x0, 0x8, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x8, 0x84, 0x18, 0xfc, 0x34, 0x0, 0x63, 0xff },
{ 0x94, 0x88, 0x10, 0x0, 0x10, 0xfe, 0x10, 0x92, 0x7c, 0xfe, 0x54, 0x92, 0x54, 0x92, 0x54, 0xfe, 0x54, 0x10, 0x54, 0xfe, 0x7c, 0x92, 0x10, 0xfe, 0x14, 0x92, 0x14, 0x92, 0x1e, 0xfe, 0x72, 0x11, 0x0, 0xf },
{ 0x94, 0x89, 0x4, 0x0, 0x1d, 0xfe, 0x70, 0x20, 0x11, 0x22, 0x11, 0xa6, 0x7c, 0xa4, 0x10, 0xa4, 0x10, 0x20, 0x3b, 0xff, 0x34, 0x20, 0x54, 0x20, 0x50, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x94, 0x8a, 0x10, 0x2, 0x11, 0xf2, 0x10, 0x12, 0x3e, 0x12, 0x28, 0x12, 0x68, 0xf2, 0x8, 0x82, 0x7f, 0x82, 0x8, 0x82, 0x8, 0xf2, 0x1c, 0x12, 0x14, 0x12, 0x16, 0x12, 0x32, 0x32, 0x60, 0x22, 0x0, 0xe2 },
{ 0x94, 0x8b, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x6, 0x10, 0x3c, 0x52, 0x8, 0x52, 0x7e, 0xd6, 0x8, 0x94, 0x1c, 0x38, 0x1a, 0x28, 0x28, 0x6c, 0x48, 0x44, 0x8, 0xc6, 0x9, 0x83 },
{ 0x94, 0x8c, 0x4, 0x10, 0x4, 0x30, 0xc, 0x20, 0x9, 0xfe, 0x19, 0x2, 0x11, 0x2, 0x31, 0x2, 0x51, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe, 0x10, 0x0 },
{ 0x94, 0x8d, 0x0, 0x2, 0x3f, 0x12, 0x1, 0x12, 0x3f, 0x12, 0x1, 0x12, 0x1, 0x12, 0x7f, 0xd2, 0x4, 0x12, 0x24, 0x92, 0x35, 0x92, 0x15, 0x12, 0xe, 0x2, 0x15, 0x2, 0x35, 0x82, 0x64, 0xc2, 0x1c, 0xe },
{ 0x94, 0x8e, 0x10, 0x24, 0x10, 0x22, 0x13, 0xff, 0x10, 0x20, 0x11, 0xfe, 0x7d, 0x22, 0x11, 0xfe, 0x11, 0x22, 0x11, 0xfe, 0x10, 0x4, 0x13, 0xff, 0x10, 0x84, 0x10, 0xc4, 0x10, 0x44, 0x10, 0x4, 0x10, 0x1c },
{ 0x94, 0x8f, 0x10, 0x10, 0x10, 0x30, 0x10, 0x20, 0x11, 0xfe, 0x7d, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x1d, 0xfe, 0x71, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe, 0x30, 0x0 },
{ 0x94, 0x90, 0x10, 0x10, 0x10, 0x30, 0x10, 0x20, 0x7d, 0xfe, 0x11, 0x2, 0x11, 0x2, 0x39, 0x2, 0x35, 0x2, 0x35, 0xfe, 0x51, 0x2, 0x51, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0x2, 0x11, 0xfe, 0x10, 0x0 },
{ 0x94, 0x91, 0x0, 0x20, 0x30, 0x60, 0x18, 0x40, 0xb, 0xfe, 0x2, 0x2, 0x62, 0x2, 0x32, 0x2, 0x12, 0x2, 0x3, 0xfe, 0xa, 0x2, 0xa, 0x2, 0x1a, 0x2, 0x12, 0x2, 0x32, 0x2, 0x23, 0xfe, 0x60, 0x0 },
{ 0x94, 0x92, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x0, 0x0 },
{ 0x94, 0x93, 0x8, 0x40, 0x8, 0x40, 0x1f, 0x7f, 0x34, 0x90, 0x62, 0x8, 0x0, 0x20, 0x18, 0x40, 0xd, 0xfe, 0x1, 0x2, 0x31, 0x2, 0x19, 0x2, 0x1, 0xfe, 0x5, 0x2, 0xd, 0x2, 0x19, 0x2, 0x31, 0xfe },
{ 0x94, 0x94, 0x8, 0x10, 0x49, 0x30, 0x6b, 0x20, 0x2a, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x8, 0x82, 0x8, 0x82, 0x1c, 0xfe, 0x1a, 0x82, 0x2a, 0x82, 0x28, 0x82, 0x48, 0x82, 0x8, 0x82, 0x8, 0xfe, 0x8, 0x0 },
{ 0x94, 0x95, 0x8, 0x8, 0x10, 0x18, 0x3e, 0x10, 0x22, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x22, 0x42, 0x7f, 0x42, 0x22, 0x7e, 0x2a, 0x42, 0x2a, 0x42, 0x2a, 0x42, 0x2a, 0x42, 0x22, 0x42, 0x62, 0x7e, 0x46, 0x0 },
{ 0x94, 0x96, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x4, 0x20, 0x22, 0x37, 0xff, 0x10, 0x20, 0x43, 0xfe, 0x62, 0x22, 0x23, 0xfe, 0x2, 0x22, 0x13, 0xfe, 0x10, 0x4, 0x37, 0xff, 0x21, 0x4, 0x60, 0x9c },
{ 0x94, 0x97, 0x0, 0x10, 0x30, 0x30, 0x18, 0x20, 0x9, 0xfe, 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x79, 0xfe, 0x9, 0x2, 0x9, 0x2, 0x9, 0x2, 0x9, 0x2, 0x9, 0xfe, 0x18, 0x0, 0x34, 0x0, 0x63, 0xff },
{ 0x94, 0x98, 0x1, 0xfc, 0x79, 0x4, 0x49, 0xfc, 0x49, 0x4, 0x49, 0xfc, 0x48, 0x88, 0x7b, 0xfe, 0x48, 0x88, 0x4f, 0xff, 0x48, 0x88, 0x49, 0x24, 0x4e, 0xab, 0x78, 0x70, 0x1, 0xac, 0x7, 0x27, 0x0, 0x60 },
{ 0x94, 0x99, 0x0, 0x48, 0x30, 0x48, 0x1b, 0xff, 0x8, 0x48, 0x0, 0x48, 0x61, 0xfe, 0x31, 0x2, 0x11, 0xfe, 0x1, 0x2, 0x9, 0xfe, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x50, 0x30, 0xd8, 0x21, 0x8c, 0x63, 0x7 },
{ 0x94, 0x9a, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x15, 0x4, 0x55, 0xfc, 0x54, 0x88, 0x5b, 0xfe, 0x50, 0x88, 0x17, 0xff, 0x10, 0x88, 0x11, 0x24, 0x3a, 0xab, 0x28, 0x70, 0x2c, 0xac, 0x65, 0x26, 0x40, 0x60 },
{ 0x94, 0x9b, 0x8, 0x14, 0x18, 0x12, 0x31, 0xff, 0x62, 0x10, 0x36, 0xfe, 0xc, 0x92, 0x18, 0xfe, 0x32, 0x92, 0x7e, 0xfe, 0xa, 0x4, 0x9, 0xff, 0x2a, 0x44, 0x2b, 0x64, 0x69, 0x24, 0x48, 0x4, 0x8, 0x1c },
{ 0x94, 0x9c, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x94, 0x9d, 0x0, 0x2, 0x3f, 0x66, 0x24, 0x3c, 0x24, 0x18, 0x3f, 0x3c, 0x24, 0x66, 0x24, 0xc2, 0x3f, 0x0, 0x24, 0x22, 0x24, 0x36, 0x3f, 0x94, 0x0, 0x9c, 0x55, 0x88, 0x54, 0x9c, 0x41, 0xb6, 0x3, 0x63 },
{ 0x94, 0x9e, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x0, 0x3, 0xf0, 0x6, 0x10, 0xc, 0x30, 0x3b, 0x60, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x94, 0x9f, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x23, 0x82, 0x28, 0x92, 0x2c, 0xb2, 0x24, 0xa2, 0x20, 0x82, 0x26, 0xe2, 0x2c, 0xb2, 0x38, 0x9a, 0x23, 0x82, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x94, 0xa0, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x48, 0x62, 0x84, 0x8, 0x0, 0x8, 0x7e, 0x7f, 0x42, 0x8, 0x42, 0x1c, 0x7e, 0x1a, 0x42, 0x29, 0x42, 0x48, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x8, 0x7e },
{ 0x94, 0xa1, 0x0, 0x44, 0x7f, 0x44, 0x8, 0xc6, 0x9, 0x93, 0x18, 0x38, 0x10, 0x28, 0x1e, 0x6c, 0x32, 0xc6, 0x33, 0x83, 0x52, 0x0, 0x12, 0xfe, 0x12, 0x82, 0x12, 0x82, 0x1e, 0x82, 0x0, 0x82, 0x0, 0xfe },
{ 0x94, 0xa2, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x50, 0x62, 0x8a, 0x0, 0x86, 0x1f, 0xfc, 0x0, 0x98, 0x7f, 0xff, 0x1, 0x80, 0xf, 0xfc, 0x7c, 0x4, 0x7, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x94, 0xa3, 0x7f, 0xa0, 0x0, 0x3f, 0x3f, 0x44, 0x21, 0xa8, 0x3f, 0x18, 0x20, 0xa7, 0x4f, 0xf8, 0x0, 0x88, 0x7f, 0xff, 0x0, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80 },
{ 0x94, 0xa4, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x50, 0x62, 0x88, 0x0, 0x3c, 0xf, 0xe0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x94, 0xa5, 0x10, 0x40, 0x10, 0x78, 0x10, 0x40, 0x13, 0xfe, 0x7e, 0x42, 0x12, 0xf8, 0x12, 0x42, 0x3a, 0xfe, 0x36, 0xa4, 0x32, 0xfc, 0x52, 0xa4, 0x52, 0xfc, 0x12, 0x0, 0x15, 0xfe, 0x11, 0x52, 0x13, 0xff },
{ 0x94, 0xa6, 0x10, 0xc, 0x10, 0x38, 0x13, 0xe0, 0x7d, 0x24, 0x54, 0xa8, 0x57, 0xff, 0x54, 0xa8, 0x54, 0xac, 0x55, 0x26, 0x56, 0x3, 0x55, 0xfc, 0x11, 0x24, 0x11, 0xfc, 0x11, 0x24, 0x11, 0x24, 0x11, 0xfc },
{ 0x94, 0xa7, 0x0, 0x0, 0x3c, 0xf8, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x3c, 0x88, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x3c, 0x88, 0x24, 0x88, 0x24, 0x88, 0x24, 0x88, 0x24, 0x89, 0x64, 0x89, 0x4d, 0x7 },
{ 0x94, 0xa8, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x92, 0x2a, 0x92, 0x2a, 0x92, 0x2a, 0x92, 0x6c, 0x92, 0x48, 0xfe, 0x8, 0x92, 0x8, 0x92, 0x1c, 0x92, 0x14, 0x92, 0x16, 0x92, 0x32, 0x92, 0x20, 0xfe, 0x60, 0x0 },
{ 0x94, 0xa9, 0x0, 0x80, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe },
{ 0x94, 0xaa, 0x0, 0x0, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0x4, 0x10, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x30, 0x6, 0x60, 0x3, 0x0, 0x0 },
{ 0x94, 0xab, 0x10, 0x10, 0x38, 0x10, 0x2c, 0x10, 0x64, 0x10, 0x41, 0xff, 0x7c, 0x54, 0x10, 0x54, 0x10, 0x54, 0x7c, 0x54, 0x10, 0xd6, 0x54, 0x92, 0x55, 0x93, 0x50, 0x7c, 0x1c, 0x10, 0x30, 0x10, 0x60, 0x10 },
{ 0x94, 0xac, 0x0, 0x2, 0x23, 0xf4, 0x34, 0x51, 0x12, 0xda, 0x1, 0x8c, 0x43, 0x6, 0x66, 0x3, 0x21, 0xfc, 0x0, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x88, 0x30, 0x88, 0x21, 0x89, 0x23, 0x9, 0x66, 0x7 },
{ 0x94, 0xad, 0x0, 0x0, 0x3f, 0xc8, 0x1, 0x50, 0x23, 0x62, 0x16, 0x34, 0xc, 0x18, 0x1f, 0xfc, 0x72, 0x27, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x6, 0x20, 0xc, 0x21, 0x18, 0x33, 0x70, 0x1e },
{ 0x94, 0xae, 0x0, 0x0, 0x7f, 0x7a, 0x14, 0x24, 0x14, 0xa5, 0x7f, 0x66, 0x55, 0x42, 0x55, 0xff, 0x55, 0x24, 0x67, 0x24, 0x41, 0x24, 0x41, 0xff, 0x7f, 0x24, 0x41, 0x24, 0x41, 0x65, 0x7f, 0x45, 0x0, 0xc3 },
{ 0x94, 0xaf, 0x1f, 0x84, 0x10, 0x18, 0x1f, 0x60, 0x10, 0x2, 0x1f, 0xc, 0x10, 0x30, 0x7f, 0xc1, 0x11, 0x6, 0x3e, 0xb8, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x7, 0xfc, 0x1d, 0x8, 0x70, 0xf0, 0x7, 0x9f },
{ 0x94, 0xb0, 0x4, 0x8c, 0x4, 0x86, 0xc, 0x82, 0x8, 0x80, 0x1f, 0xff, 0x10, 0x80, 0x30, 0x84, 0x50, 0xcc, 0x10, 0x58, 0x10, 0x70, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd1, 0x11, 0x9b, 0x17, 0xe, 0x10, 0x4 },
{ 0x94, 0xb1, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x3f, 0x2, 0x0, 0x22, 0x7f, 0xa2, 0x0, 0x22, 0x3f, 0x22, 0x0, 0x22, 0x3f, 0x22, 0x0, 0x2, 0x3f, 0x2, 0x21, 0x2, 0x3f, 0xe },
{ 0x94, 0xb2, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x17, 0xff, 0x78, 0x40, 0x10, 0x40, 0x10, 0xfc, 0x10, 0x84, 0x18, 0x84, 0x71, 0xcc, 0x11, 0x48, 0x13, 0x78, 0x16, 0x30, 0x10, 0x78, 0x10, 0xcc, 0x33, 0x87 },
{ 0x94, 0xb3, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x50, 0x62, 0x88, 0x0, 0x0, 0x4, 0x48, 0xc, 0x44, 0x1b, 0xff, 0x70, 0x40, 0x10, 0x64, 0x10, 0x2c, 0x10, 0x38, 0x10, 0xf1, 0x13, 0x9b, 0x10, 0xe },
{ 0x94, 0xb4, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x22, 0x22, 0x92, 0x27, 0xfa, 0x2c, 0x82, 0x34, 0xa2, 0x24, 0x42, 0x24, 0xea, 0x25, 0xba, 0x24, 0x12, 0x20, 0xe },
{ 0x94, 0xb5, 0x20, 0x10, 0x20, 0x20, 0x20, 0xfc, 0x78, 0x84, 0x28, 0xfc, 0x28, 0x84, 0x28, 0xfc, 0x28, 0x80, 0x28, 0xff, 0x28, 0x80, 0x2a, 0xff, 0x2a, 0x1, 0x66, 0xab, 0x41, 0xa9, 0x1, 0x3, 0x0, 0xe },
{ 0x94, 0xb6, 0x0, 0x83, 0x0, 0x8e, 0x77, 0xf8, 0x52, 0x28, 0x53, 0x68, 0x51, 0x4f, 0x57, 0xfa, 0x50, 0x8a, 0x50, 0x8a, 0x57, 0xfa, 0x50, 0x8a, 0x71, 0xca, 0x1, 0xaa, 0x2, 0x8a, 0x4, 0x8a, 0x0, 0x92 },
{ 0x94, 0xb7, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x10, 0x0, 0x7c, 0xfc, 0x10, 0x84, 0x10, 0xfc, 0x10, 0x0, 0x13, 0xff, 0x12, 0x1, 0x1e, 0x79, 0x72, 0x49, 0x2, 0x49, 0x2, 0x79, 0x2, 0x1, 0x2, 0x7 },
{ 0x94, 0xb8, 0x10, 0x10, 0x10, 0x38, 0x10, 0x28, 0x7e, 0x6c, 0x52, 0xc6, 0x53, 0x83, 0x52, 0x0, 0x52, 0xfe, 0x52, 0x0, 0x7e, 0x0, 0x10, 0xfe, 0x14, 0x82, 0x14, 0x82, 0x1e, 0x82, 0x32, 0x82, 0x60, 0xfe },
{ 0x94, 0xb9, 0x4, 0x40, 0xc, 0xc0, 0x8, 0x80, 0x1f, 0xfe, 0x30, 0x80, 0x5f, 0xfc, 0x10, 0x80, 0x1f, 0xfc, 0x10, 0x80, 0x1f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x94, 0xba, 0x8, 0x20, 0xa, 0x22, 0xb, 0x26, 0x19, 0x24, 0x10, 0x20, 0x33, 0xfe, 0x30, 0x20, 0x50, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x94, 0xbb, 0x4, 0x2, 0x44, 0x52, 0x64, 0xd2, 0x24, 0x92, 0x4, 0x12, 0x7f, 0xd2, 0x4, 0x12, 0x4, 0x12, 0x4, 0x12, 0x7f, 0xd2, 0x4, 0x12, 0x4, 0x12, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0xe },
{ 0x94, 0xbc, 0x0, 0x80, 0x10, 0x84, 0x18, 0x8c, 0x8, 0x88, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x94, 0xbd, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x1f, 0xfc, 0x12, 0x4, 0x13, 0xc, 0x11, 0x8, 0x11, 0x98, 0x10, 0xb0, 0x30, 0x60, 0x20, 0xe0, 0x61, 0xb0, 0x7, 0x1c, 0x1c, 0x7 },
{ 0x94, 0xbe, 0x8, 0x0, 0x4a, 0xff, 0x6a, 0x80, 0x2c, 0x80, 0x8, 0x80, 0x7e, 0xfe, 0x8, 0xa2, 0x8, 0xa2, 0xe, 0xb6, 0x78, 0x94, 0x8, 0x9c, 0x8, 0x88, 0x19, 0x9c, 0x11, 0x14, 0x33, 0x36, 0x60, 0x63 },
{ 0x94, 0xbf, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x7e, 0x84, 0x52, 0x84, 0x52, 0xa4, 0x52, 0xb4, 0x52, 0x94, 0x52, 0x94, 0x52, 0x84, 0x56, 0x84, 0x10, 0x84, 0x10, 0x84, 0x11, 0x85, 0x11, 0x5, 0x13, 0x3 },
{ 0x94, 0xc0, 0x10, 0x80, 0x11, 0x1e, 0x13, 0xd2, 0x12, 0x52, 0x7b, 0x52, 0x12, 0xd3, 0x12, 0x60, 0x17, 0xdf, 0x12, 0x49, 0x1b, 0x4b, 0x72, 0xca, 0x12, 0xce, 0x12, 0x44, 0x12, 0x4e, 0x12, 0x4a, 0x34, 0xdb },
{ 0x94, 0xc1, 0x0, 0x80, 0x7c, 0xbf, 0x10, 0x88, 0x17, 0xe8, 0x10, 0x48, 0x12, 0x48, 0x3b, 0x48, 0x11, 0x5e, 0x11, 0xc8, 0x10, 0x88, 0x11, 0xc8, 0x1d, 0x68, 0x33, 0x28, 0x66, 0x8, 0xc, 0x3f, 0x0, 0x0 },
{ 0x94, 0xc2, 0x8, 0x0, 0x8, 0xff, 0x8, 0x80, 0x7e, 0x80, 0x8, 0x80, 0x8, 0xfe, 0x1c, 0xa2, 0x1a, 0xa6, 0x1a, 0xb4, 0x28, 0x94, 0x28, 0x9c, 0x48, 0x88, 0x9, 0x9c, 0x9, 0x14, 0xb, 0x36, 0x8, 0x63 },
{ 0x94, 0xc3, 0x0, 0x0, 0x31, 0xfc, 0x19, 0x4, 0x9, 0x4, 0x1, 0x4, 0x61, 0x4, 0x31, 0x4, 0x11, 0x4, 0x1, 0x1c, 0x9, 0x0, 0x9, 0x0, 0x19, 0x0, 0x11, 0x1, 0x31, 0x83, 0x20, 0xfe, 0x60, 0x0 },
{ 0x94, 0xc4, 0x0, 0x0, 0x33, 0xf8, 0x1a, 0x8, 0xa, 0x8, 0x2, 0x8, 0x62, 0xc8, 0x32, 0x68, 0x12, 0x28, 0x2, 0x8, 0xa, 0x8, 0xa, 0x8, 0x1a, 0x8, 0x12, 0x8, 0x36, 0x9, 0x24, 0x9, 0x6c, 0x7 },
{ 0x94, 0xc5, 0x24, 0x0, 0x24, 0xff, 0x24, 0x80, 0x24, 0x80, 0x24, 0x80, 0x3e, 0xfe, 0x20, 0xa2, 0x20, 0xa2, 0x3c, 0xb6, 0x24, 0x94, 0x24, 0x9c, 0x24, 0x88, 0x25, 0x9c, 0x25, 0x14, 0x67, 0x36, 0x44, 0x63 },
{ 0x94, 0xc6, 0x4, 0x0, 0x45, 0xfc, 0x29, 0x4, 0x11, 0x4, 0x11, 0x4, 0x29, 0x4, 0x49, 0x4, 0x9, 0x4, 0x19, 0x1c, 0x19, 0x0, 0x29, 0x0, 0x49, 0x0, 0x9, 0x1, 0x9, 0x83, 0x18, 0xfe, 0x70, 0x0 },
{ 0x94, 0xc7, 0x0, 0x80, 0x7c, 0xff, 0x12, 0x88, 0x12, 0x88, 0x12, 0x88, 0x12, 0x88, 0x7e, 0x88, 0x12, 0xbe, 0x12, 0x88, 0x10, 0x88, 0x10, 0x88, 0x1c, 0x88, 0x31, 0x88, 0x61, 0x8, 0x3, 0x7f, 0x0, 0x0 },
{ 0x94, 0xc8, 0x0, 0x20, 0x7d, 0x22, 0x55, 0xa6, 0x54, 0xa4, 0x54, 0x20, 0x55, 0xfe, 0x7c, 0x20, 0x54, 0x20, 0x54, 0x20, 0x57, 0xff, 0x54, 0x20, 0x54, 0x20, 0x7c, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x94, 0xc9, 0x10, 0x20, 0x3f, 0xa0, 0x60, 0x3f, 0x1f, 0x44, 0x15, 0x2c, 0x7f, 0xa8, 0x29, 0x1c, 0x3f, 0xb6, 0x6, 0x63, 0x1, 0x80, 0x6, 0x10, 0x1, 0x22, 0x7f, 0xff, 0x0, 0x81, 0xc, 0x98, 0x38, 0x8e },
{ 0x94, 0xca, 0x8, 0x0, 0x10, 0x3c, 0x3e, 0x24, 0x22, 0x24, 0x2a, 0x64, 0x2a, 0xc7, 0x22, 0x0, 0x7f, 0x7e, 0x22, 0x22, 0x2a, 0x26, 0x2a, 0x34, 0x2a, 0x1c, 0x2a, 0x8, 0x22, 0x1c, 0x62, 0x36, 0x46, 0xe3 },
{ 0x94, 0xcb, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0xe, 0x33, 0xf8, 0x19, 0x24, 0x0, 0xa8, 0x67, 0xff, 0x30, 0xa8, 0x1, 0x24, 0x17, 0xff, 0x11, 0x24, 0x31, 0xfc, 0x21, 0x24, 0x61, 0xfc },
{ 0x94, 0xcc, 0x0, 0x0, 0x3c, 0xff, 0x24, 0x80, 0x24, 0x80, 0x3c, 0x80, 0x24, 0xfe, 0x24, 0xa2, 0x24, 0xa2, 0x3c, 0xb6, 0x24, 0x94, 0x24, 0x9c, 0x24, 0x88, 0x3c, 0x9c, 0x15, 0x94, 0x35, 0x36, 0x62, 0x63 },
{ 0x94, 0xcd, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x90, 0x62, 0x8, 0x4, 0x0, 0x3f, 0xbe, 0x4, 0x22, 0x3f, 0xa2, 0x24, 0xa2, 0x3f, 0xa2, 0x24, 0xa6, 0x3f, 0xa0, 0x4, 0x21, 0x3f, 0xb3, 0x4, 0x1e },
{ 0x94, 0xce, 0x0, 0xc, 0x0, 0x78, 0x3f, 0xc0, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80 },
{ 0x94, 0xcf, 0x8, 0x0, 0x8, 0xff, 0x8, 0x10, 0x9, 0x7e, 0x2b, 0x42, 0x2a, 0x42, 0x68, 0x7e, 0x48, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x1c, 0x42, 0x14, 0x42, 0x16, 0x7e, 0x32, 0x24, 0x23, 0x66, 0x60, 0xc3 },
{ 0x94, 0xd0, 0x0, 0x0, 0x12, 0xff, 0x12, 0x10, 0x33, 0x7e, 0x21, 0x42, 0x61, 0xc2, 0x0, 0x7e, 0x3f, 0x42, 0x9, 0x42, 0x9, 0x7e, 0x19, 0x42, 0x11, 0x42, 0x13, 0x7e, 0x32, 0x24, 0x66, 0x66, 0x0, 0xc3 },
{ 0x94, 0xd1, 0x8, 0x0, 0x1c, 0xff, 0x16, 0x80, 0x32, 0x80, 0x28, 0x80, 0x7e, 0xfe, 0x22, 0xa2, 0x3e, 0xa2, 0x22, 0xb6, 0x3e, 0x94, 0x20, 0x9c, 0x24, 0x88, 0x24, 0x9c, 0x2e, 0x94, 0x3b, 0xb6, 0x61, 0x63 },
{ 0x94, 0xd2, 0x10, 0x80, 0x10, 0xfc, 0x11, 0x88, 0x7b, 0x18, 0x16, 0x10, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x1a, 0x22, 0x73, 0xfe, 0x10, 0x90, 0x10, 0x90, 0x11, 0x90, 0x11, 0x11, 0x13, 0x13, 0x36, 0xe },
{ 0x94, 0xd3, 0x0, 0x80, 0x0, 0xfc, 0x79, 0x88, 0x4b, 0x18, 0x4e, 0x10, 0x4b, 0xfe, 0x4a, 0x22, 0x7a, 0x22, 0x4a, 0x22, 0x4b, 0xfe, 0x48, 0x90, 0x48, 0x90, 0x79, 0x90, 0x1, 0x11, 0x3, 0x13, 0xe, 0xe },
{ 0x94, 0xd4, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x8, 0x88, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x7, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8 },
{ 0x94, 0xd5, 0x4, 0x0, 0x1f, 0x7c, 0x11, 0x44, 0x15, 0x47, 0x7f, 0x80, 0x11, 0x7e, 0x15, 0x22, 0x15, 0x24, 0x31, 0x18, 0x63, 0x67, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x94, 0xd6, 0x4, 0x0, 0x1f, 0x7c, 0x11, 0x44, 0x15, 0x47, 0x7f, 0x80, 0x11, 0x7e, 0x15, 0x24, 0x35, 0x18, 0x63, 0x67, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x7, 0xfc, 0x1c, 0x4, 0x74, 0x4, 0x7, 0xfc },
{ 0x94, 0xd7, 0x4, 0x20, 0x7f, 0xff, 0x4, 0x20, 0x0, 0x18, 0x1f, 0xf0, 0x8, 0x88, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x4, 0x90, 0x18, 0xc, 0x6f, 0xfb, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8 },
{ 0x94, 0xd8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x12, 0x24, 0x36, 0x26, 0x6c, 0x23, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x84, 0x3, 0xfe, 0x7e, 0x3 },
{ 0x94, 0xd9, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x0, 0x21, 0x20, 0x2f, 0x3c, 0x21, 0x20, 0x2f, 0x20, 0x21, 0x3c, 0x23, 0x20, 0x2d, 0x20, 0x21, 0x3c, 0x22, 0x20, 0x2c, 0x20, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x94, 0xda, 0x0, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x4, 0x40, 0x8, 0x40, 0x7f, 0xff, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x40 },
{ 0x94, 0xdb, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x1, 0x80, 0x3, 0xb0, 0x6, 0x98, 0x1c, 0x8c, 0x70, 0x87, 0x0, 0x80, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x94, 0xdc, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x2, 0x8, 0x2, 0x7e, 0x2, 0x12, 0x2, 0x12, 0xfe, 0x12, 0x80, 0x32, 0x80, 0x26, 0x80, 0x24, 0x80, 0x7c, 0x80, 0xe, 0x81, 0x1a, 0xc3, 0x30, 0x7e, 0x60, 0x0 },
{ 0x94, 0xdd, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x20, 0x0, 0x24, 0x20, 0x24, 0x20, 0x24, 0x22, 0x24, 0x2e, 0x27, 0xb8, 0x24, 0x20, 0x24, 0x20, 0x24, 0x20, 0x64, 0x20, 0x44, 0x21, 0x47, 0xb3, 0x1c, 0x1e },
{ 0x94, 0xde, 0x8, 0x20, 0x18, 0x20, 0x10, 0x20, 0x33, 0xff, 0x62, 0x21, 0xa, 0x22, 0x1a, 0x20, 0x13, 0xfe, 0x32, 0x82, 0x72, 0xc6, 0x12, 0x4c, 0x16, 0x78, 0x14, 0x30, 0x1c, 0x78, 0x10, 0xcc, 0x13, 0x87 },
{ 0x94, 0xdf, 0x2, 0x20, 0x2, 0x20, 0x7e, 0x3f, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x1e, 0x20, 0x72, 0x3f, 0x6, 0x20, 0xc, 0x20, 0x39, 0x80, 0x4, 0xc0, 0x14, 0x46, 0x14, 0xb, 0x36, 0x19, 0x63, 0xf0 },
{ 0x94, 0xe0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x90, 0x17, 0x9e, 0x10, 0x90, 0x17, 0x9e, 0x10, 0x90, 0x33, 0x90, 0x2c, 0x9f, 0x61, 0x90, 0x3, 0x10 },
{ 0x94, 0xe1, 0x12, 0x10, 0x12, 0x10, 0x12, 0x10, 0x12, 0x12, 0x7a, 0x16, 0x13, 0xdc, 0x12, 0x10, 0x12, 0x10, 0x1a, 0x10, 0x72, 0x10, 0x12, 0x10, 0x12, 0x10, 0x12, 0x10, 0x12, 0x11, 0x13, 0xdb, 0x36, 0xe },
{ 0x94, 0xe2, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x7a, 0x21, 0x12, 0x22, 0x12, 0x20, 0x13, 0xfe, 0x1a, 0x82, 0x72, 0x86, 0x12, 0xcc, 0x16, 0x58, 0x14, 0x30, 0x1c, 0x78, 0x10, 0xcc, 0x33, 0x87 },
{ 0x94, 0xe3, 0x2, 0x20, 0x2, 0x20, 0x7e, 0x3f, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x7e, 0x3f, 0x4, 0xa0, 0x8, 0x80, 0x7f, 0xff, 0x4, 0x10, 0x6, 0x30, 0x3, 0x60, 0x1, 0xc0, 0xf, 0x78, 0x78, 0xf },
{ 0x94, 0xe4, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x46, 0x1f, 0x5c, 0x10, 0x70, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x17, 0x41, 0x1c, 0x63, 0x70, 0x3e },
{ 0x94, 0xe5, 0x0, 0xc0, 0x20, 0x60, 0x30, 0x20, 0x10, 0x84, 0x0, 0x84, 0x40, 0x8c, 0x60, 0x88, 0x22, 0x98, 0x2, 0x96, 0x12, 0xb3, 0x16, 0xe1, 0x14, 0xc0, 0x30, 0x80, 0x23, 0x82, 0x2e, 0xc6, 0x60, 0x7c },
{ 0x94, 0xe6, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xff, 0x50, 0x40, 0x30, 0x40, 0x17, 0xfe, 0x14, 0x42, 0x14, 0x44, 0x37, 0xf8, 0x55, 0x8, 0x15, 0x98, 0x14, 0xb0, 0x34, 0x60, 0x2c, 0xf0, 0x69, 0x9c, 0x7, 0x7 },
{ 0x94, 0xe7, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfe, 0x10, 0x82, 0x10, 0x84, 0x10, 0x80, 0x1f, 0xf8, 0x14, 0x8, 0x16, 0x18, 0x13, 0x30, 0x11, 0x60, 0x30, 0xc0, 0x21, 0xe0, 0x67, 0x38, 0x1c, 0xe },
{ 0x94, 0xe8, 0x0, 0x20, 0x7e, 0x40, 0x11, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x3d, 0x22, 0x25, 0x22, 0x65, 0xfe, 0x24, 0x50, 0x24, 0x90, 0x27, 0xff, 0x24, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0x10 },
{ 0x94, 0xe9, 0x4, 0x60, 0x1c, 0x30, 0x70, 0x10, 0x10, 0x44, 0x10, 0x44, 0x7c, 0x4c, 0x10, 0x48, 0x11, 0x58, 0x39, 0x56, 0x35, 0x73, 0x53, 0x61, 0x52, 0x40, 0x10, 0xc0, 0x11, 0x42, 0x16, 0x66, 0x10, 0x3c },
{ 0x94, 0xea, 0x8, 0x48, 0x18, 0x48, 0x10, 0x48, 0x65, 0xcf, 0x2c, 0x48, 0x18, 0x48, 0x10, 0x48, 0x25, 0xcf, 0x7c, 0x48, 0x14, 0x48, 0x10, 0xc8, 0x55, 0x4f, 0x54, 0x48, 0x54, 0xc8, 0x10, 0x88, 0x11, 0x88 },
{ 0x94, 0xeb, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x8, 0x0, 0x11, 0x26, 0x7f, 0xbc, 0x0, 0xa0, 0x3f, 0x21, 0x21, 0x1f, 0x3f, 0x0, 0x21, 0x26, 0x3f, 0x3c, 0x21, 0x20, 0x21, 0x21, 0x23, 0x1f },
{ 0x94, 0xec, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x92, 0x22, 0x92, 0x22, 0x92, 0x3e, 0x92, 0x22, 0x92, 0x22, 0xfe, 0x22, 0x80, 0x3e, 0x80, 0x22, 0x80, 0x22, 0x80, 0x22, 0x80, 0x22, 0x81, 0x62, 0xc3, 0x46, 0x7e },
{ 0x94, 0xed, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7d, 0xff, 0x5, 0x11, 0xd, 0x12, 0x19, 0x10, 0x11, 0xfe, 0x35, 0x42, 0x59, 0x66, 0x15, 0x24, 0x15, 0x3c, 0x13, 0x18, 0x12, 0x3c, 0x16, 0x66, 0x10, 0xc3 },
{ 0x94, 0xee, 0x0, 0x24, 0x3c, 0x24, 0x0, 0x24, 0x7e, 0xe7, 0x0, 0x24, 0x3c, 0x24, 0x0, 0x24, 0x0, 0xe7, 0x3c, 0x24, 0x0, 0x24, 0x0, 0x64, 0x3d, 0xa7, 0x24, 0x24, 0x24, 0x64, 0x24, 0x44, 0x3c, 0xc4 },
{ 0x94, 0xef, 0x2, 0x20, 0x7f, 0xfe, 0x2, 0x22, 0x3f, 0xfe, 0x22, 0x20, 0x3f, 0xff, 0x4, 0x21, 0xf, 0xfb, 0x78, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x94, 0xf0, 0x0, 0x8, 0x23, 0x88, 0x32, 0xbe, 0x12, 0x80, 0x2, 0xa2, 0x3, 0x94, 0x2, 0x7f, 0x72, 0x8, 0x17, 0x88, 0x16, 0xbe, 0x1a, 0x88, 0x12, 0x88, 0x12, 0x88, 0x33, 0x88, 0x28, 0x0, 0x67, 0xff },
{ 0x94, 0xf1, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x7e, 0x3f, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x3e, 0x3e, 0x2, 0x20, 0x2, 0x20, 0x1e, 0x20, 0x72, 0x3f, 0x6, 0x20, 0xc, 0x20, 0x18, 0x20, 0x70, 0x20 },
{ 0x94, 0xf2, 0x0, 0x0, 0x3f, 0xf2, 0x0, 0x14, 0x5, 0x1c, 0xd, 0x12, 0x39, 0x8, 0x9, 0x5, 0x7f, 0xf3, 0x9, 0x10, 0x9, 0x14, 0x9, 0x18, 0x9, 0x14, 0x19, 0x12, 0x11, 0x18, 0x31, 0xd, 0x61, 0x7 },
{ 0x94, 0xf3, 0x10, 0x0, 0x14, 0xfe, 0x16, 0x4, 0x7a, 0x68, 0x10, 0x10, 0x10, 0xfe, 0x38, 0x92, 0x36, 0xfe, 0x52, 0x92, 0x52, 0xfe, 0x12, 0x92, 0x12, 0x92, 0x12, 0x92, 0x16, 0x96, 0x15, 0x0, 0x1c, 0xff },
{ 0x94, 0xf4, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x68, 0xd0, 0x0, 0x8, 0x24, 0x8, 0x7e, 0xff, 0x24, 0x89, 0x3c, 0x88, 0x24, 0xfe, 0x3c, 0xa2, 0x24, 0xb6, 0x7e, 0x9c, 0x14, 0x88, 0x37, 0x14, 0x62, 0x63 },
{ 0x94, 0xf5, 0x8, 0x88, 0x8, 0x88, 0xf, 0xff, 0x18, 0x88, 0x10, 0x88, 0x13, 0xff, 0x32, 0x0, 0x52, 0xfe, 0x12, 0x92, 0x12, 0xfe, 0x12, 0x92, 0x12, 0x92, 0x12, 0xfe, 0x12, 0x92, 0x14, 0x92, 0x10, 0x96 },
{ 0x94, 0xf6, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x2, 0x10, 0x2, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x18, 0x13, 0xf0, 0x10, 0x80, 0x17, 0xfc, 0x10, 0x80, 0x1f, 0xfe, 0x30, 0x80, 0x20, 0x81, 0x60, 0xc3, 0x0, 0x7e },
{ 0x94, 0xf7, 0x8, 0x88, 0x1a, 0xa8, 0x12, 0xa8, 0x32, 0xaf, 0x63, 0xea, 0x8, 0x12, 0x18, 0xa, 0x17, 0xfa, 0x31, 0x4a, 0x71, 0x4e, 0x11, 0x44, 0x11, 0x54, 0x13, 0x6e, 0x12, 0x4a, 0x16, 0x1b, 0x10, 0x11 },
{ 0x94, 0xf8, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x7d, 0x12, 0x11, 0x16, 0x11, 0xdc, 0x39, 0x10, 0x35, 0x10, 0x35, 0x10, 0x51, 0x10, 0x51, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x11, 0x11, 0xd3, 0x17, 0xe },
{ 0x94, 0xf9, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0, 0x10, 0x40, 0x10, 0x46, 0x1f, 0x7c, 0x10, 0x40, 0x10, 0x41, 0x1f, 0x63, 0x70, 0x3e },
{ 0x94, 0xfa, 0x0, 0x0, 0x7f, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x3e, 0x3e, 0x8, 0x8, 0x8, 0x8, 0xf, 0x7f, 0x78, 0x0, 0x10, 0x40, 0x10, 0x46, 0x1f, 0x7c, 0x10, 0x40, 0x10, 0x41, 0x1f, 0x63, 0x70, 0x3e },
{ 0x94, 0xfb, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x10, 0x0, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x13, 0xfc, 0x12, 0x4, 0x12, 0x4, 0x33, 0xfc, 0x22, 0x4, 0x62, 0x4, 0x3, 0xfc },
{ 0x94, 0xfc, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x95, 0x40, 0x1, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x3f, 0xfe, 0x20, 0x82, 0x3f, 0xfe, 0x20, 0x82, 0x3f, 0xfe, 0x4, 0x10, 0x7f, 0xff, 0x8, 0x10, 0x30, 0x10 },
{ 0x95, 0x41, 0x8, 0x40, 0x8, 0x40, 0x8, 0x7c, 0x7e, 0xc4, 0x9, 0x8c, 0x8, 0x58, 0x1c, 0x30, 0x1a, 0x78, 0x18, 0xcc, 0x2b, 0x87, 0x28, 0x70, 0x48, 0x18, 0x8, 0x0, 0x8, 0xe0, 0x8, 0x38, 0x8, 0xc },
{ 0x95, 0x42, 0x4, 0x10, 0x1c, 0x20, 0x71, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x7d, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x39, 0xfe, 0x34, 0x48, 0x50, 0x88, 0x13, 0xff, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8 },
{ 0x95, 0x43, 0x0, 0x0, 0x3f, 0xfe, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x23, 0x20, 0x22, 0x22, 0x26, 0x26, 0x2c, 0x1c, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x95, 0x44, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x82, 0x0, 0x84, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x1c, 0x80, 0x16, 0x80, 0x33, 0x80, 0x21, 0xc0, 0x60, 0x7f },
{ 0x95, 0x45, 0x1f, 0x84, 0x10, 0x18, 0x1f, 0x62, 0x10, 0xc, 0x1f, 0x30, 0x10, 0x2, 0x7f, 0xcc, 0x11, 0x30, 0x3e, 0x80, 0x8, 0x40, 0x28, 0x46, 0x2f, 0x7c, 0x28, 0x40, 0x28, 0x41, 0x3f, 0x63, 0x60, 0x3e },
{ 0x95, 0x46, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x4, 0x10, 0x2, 0x20, 0x1f, 0xfe, 0x10, 0x0, 0x10, 0x30, 0x10, 0xe0, 0x17, 0x8c, 0x10, 0x38, 0x10, 0xe0, 0x37, 0x86, 0x20, 0x1c, 0x60, 0x70, 0x7, 0xc0 },
{ 0x95, 0x47, 0x0, 0x10, 0x3c, 0x10, 0x25, 0xff, 0x24, 0x54, 0x24, 0xd6, 0x3d, 0x93, 0x24, 0x38, 0x24, 0x6c, 0x25, 0xc7, 0x3c, 0x10, 0x24, 0x92, 0x24, 0x54, 0x24, 0x38, 0x24, 0xd6, 0x65, 0x93, 0x4c, 0x30 },
{ 0x95, 0x48, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0xc, 0x3f, 0x71, 0x0, 0x3, 0xf0, 0xe, 0x30, 0x3b, 0x60, 0x1, 0xc0, 0xf, 0x78, 0x78, 0xf },
{ 0x95, 0x49, 0x0, 0x8, 0x3c, 0x8, 0x24, 0x8, 0x24, 0x8, 0x25, 0xff, 0x3c, 0x8, 0x24, 0x8, 0x24, 0xc8, 0x24, 0x68, 0x3c, 0x28, 0x24, 0x8, 0x24, 0x8, 0x24, 0x8, 0x24, 0x8, 0x64, 0x8, 0x4c, 0x38 },
{ 0x95, 0x4a, 0x0, 0x0, 0x7b, 0xde, 0x9, 0x2, 0x9, 0x2, 0xb, 0xc2, 0x3a, 0x4e, 0x22, 0x48, 0x22, 0x48, 0x22, 0x48, 0x3b, 0xce, 0xa, 0x42, 0xa, 0x42, 0xa, 0x42, 0x1a, 0x46, 0x13, 0xc4, 0x70, 0x1c },
{ 0x95, 0x4b, 0x1, 0x80, 0x0, 0xc8, 0x0, 0x48, 0x2, 0x8, 0x2, 0x18, 0x2, 0x10, 0x12, 0x34, 0x12, 0x26, 0x12, 0x62, 0x32, 0x43, 0x22, 0xc1, 0x63, 0x84, 0x2, 0xc, 0xf, 0x8, 0x79, 0xf8, 0x0, 0x0 },
{ 0x95, 0x4c, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x8, 0x88, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0x88, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0x4d, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x68, 0x90, 0x4, 0x88, 0x1f, 0xfc, 0x0, 0x84, 0x7f, 0xff, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0x4e, 0x0, 0x0, 0x33, 0xff, 0x18, 0x0, 0x8, 0xfc, 0x0, 0x84, 0x0, 0xfc, 0x0, 0x0, 0x79, 0xfe, 0x9, 0x22, 0x9, 0x22, 0x9, 0xfe, 0x9, 0x22, 0x9, 0x22, 0x19, 0xfe, 0x34, 0x0, 0x63, 0xff },
{ 0x95, 0x4f, 0x10, 0x20, 0x10, 0x70, 0x10, 0x58, 0x7c, 0xcc, 0x11, 0x86, 0x13, 0x3, 0x38, 0xfc, 0x34, 0x0, 0x30, 0x0, 0x53, 0xff, 0x50, 0x40, 0x10, 0x48, 0x10, 0xcc, 0x10, 0x84, 0x10, 0xfe, 0x13, 0x82 },
{ 0x95, 0x50, 0x8, 0x0, 0x8, 0xff, 0x8, 0x88, 0x8, 0x88, 0x7e, 0x88, 0x12, 0xfe, 0x12, 0x82, 0x12, 0x82, 0x36, 0x82, 0x24, 0xfe, 0x24, 0x88, 0x7c, 0x88, 0xa, 0x88, 0x1a, 0x88, 0x30, 0xff, 0x60, 0x0 },
{ 0x95, 0x51, 0x10, 0x6, 0x10, 0x1c, 0x13, 0xf2, 0x11, 0x26, 0x7c, 0x94, 0x17, 0xff, 0x14, 0x40, 0x37, 0xff, 0x24, 0x40, 0x2c, 0x7c, 0x28, 0x44, 0x7c, 0xec, 0x15, 0xb8, 0x13, 0x10, 0x36, 0x7c, 0x61, 0xc7 },
{ 0x95, 0x52, 0x8, 0x0, 0x19, 0xfc, 0x10, 0x44, 0x62, 0x44, 0x26, 0x44, 0xc, 0x44, 0x18, 0x44, 0x35, 0xff, 0x7e, 0x44, 0xa, 0x44, 0x8, 0x44, 0x2a, 0x44, 0x2a, 0x44, 0x68, 0x44, 0x49, 0xff, 0x8, 0x0 },
{ 0x95, 0x53, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x95, 0x54, 0x0, 0x0, 0x3b, 0xde, 0x0, 0x42, 0x7d, 0x4a, 0x0, 0xc6, 0x39, 0x4a, 0x0, 0x22, 0x0, 0x70, 0x38, 0xdc, 0x3, 0x87, 0x0, 0x30, 0x39, 0xc8, 0x28, 0x32, 0x29, 0xc4, 0x28, 0x18, 0x39, 0xe0 },
{ 0x95, 0x55, 0x4, 0x20, 0x4, 0x20, 0xf, 0xfe, 0x8, 0x20, 0x1b, 0xfe, 0x10, 0x20, 0x30, 0x20, 0x57, 0xff, 0x10, 0x50, 0x10, 0xd1, 0x11, 0x9b, 0x17, 0xa, 0x11, 0xc, 0x11, 0x4, 0x11, 0xe6, 0x17, 0x3 },
{ 0x95, 0x56, 0x4, 0x2, 0x7, 0x86, 0x4, 0xc, 0x3f, 0xd8, 0x24, 0x42, 0x27, 0x86, 0x3c, 0xc, 0x24, 0x98, 0x23, 0xb1, 0x20, 0x3, 0x29, 0x6, 0x29, 0xc, 0x29, 0x38, 0x69, 0x0, 0x49, 0x81, 0x10, 0xff },
{ 0x95, 0x57, 0x8, 0x0, 0x9, 0xff, 0x8, 0x28, 0x7f, 0xff, 0x9, 0x29, 0x9, 0x29, 0x1d, 0xff, 0x1a, 0x0, 0x18, 0xfe, 0x28, 0x0, 0x29, 0xff, 0x48, 0x10, 0x8, 0x94, 0x9, 0x96, 0xb, 0x13, 0x8, 0x70 },
{ 0x95, 0x58, 0x0, 0x80, 0x0, 0x80, 0x18, 0x81, 0xc, 0x83, 0x4, 0x86, 0x0, 0xcc, 0x7e, 0xd8, 0x2, 0xe0, 0x6, 0xa0, 0x4, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80, 0x3, 0x80 },
{ 0x95, 0x59, 0x0, 0x0, 0x67, 0xff, 0x30, 0x90, 0x13, 0xfe, 0x2, 0x92, 0x62, 0x92, 0x33, 0xfe, 0x10, 0x0, 0x3, 0xfe, 0x8, 0x0, 0xf, 0xff, 0x18, 0x20, 0x11, 0x24, 0x33, 0x26, 0x26, 0x23, 0x60, 0xe0 },
{ 0x95, 0x5a, 0x0, 0x6, 0x7f, 0x1c, 0x14, 0x74, 0x7f, 0x54, 0x55, 0x54, 0x55, 0x54, 0x7f, 0x54, 0x0, 0x54, 0x3e, 0x54, 0x0, 0x54, 0x7f, 0x54, 0x8, 0x54, 0x2a, 0x54, 0x2a, 0xdd, 0x4a, 0xb7, 0x19, 0x82 },
{ 0x95, 0x5b, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x8, 0x88, 0x18, 0x8c, 0x70, 0x87, 0x3, 0x80 },
{ 0x95, 0x5c, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x3, 0x40, 0x6, 0x42, 0x1c, 0x66, 0x74, 0x2c, 0x4, 0x30, 0x4, 0x18, 0x7, 0x8c, 0x3c, 0x7 },
{ 0x95, 0x5d, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x10, 0x7e, 0x92, 0x0, 0xd6, 0x3c, 0x54, 0x0, 0x54, 0x0, 0x10, 0x3d, 0xff, 0x0, 0x10, 0x0, 0x10, 0x3c, 0x10, 0x24, 0x10, 0x24, 0x10, 0x24, 0x10, 0x3c, 0x10 },
{ 0x95, 0x5e, 0x4, 0x40, 0x18, 0x40, 0x65, 0x40, 0x12, 0x7e, 0x4, 0xc2, 0x18, 0x82, 0x65, 0x82, 0x4, 0x62, 0xa, 0x32, 0x12, 0x12, 0x66, 0x2, 0xa, 0x2, 0x12, 0x2, 0x62, 0x6, 0x6, 0x4, 0x1c, 0x1c },
{ 0x95, 0x5f, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x20, 0x0, 0x22, 0x1e, 0x2f, 0xd2, 0x22, 0x12, 0x2f, 0xde, 0x28, 0x52, 0x2f, 0xd2, 0x28, 0x5e, 0x2f, 0xd2, 0x62, 0x12, 0x4f, 0xd2, 0x42, 0x12, 0x2, 0x26 },
{ 0x95, 0x60, 0x10, 0x88, 0x10, 0x88, 0x17, 0xff, 0x10, 0x88, 0x78, 0x88, 0x10, 0x0, 0x10, 0x0, 0x13, 0xfe, 0x1a, 0x22, 0x72, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x33, 0xfe },
{ 0x95, 0x61, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x50, 0x0, 0x30, 0x0, 0x17, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x37, 0xfe, 0x54, 0x42, 0x14, 0xe2, 0x15, 0xb2, 0x37, 0x1a, 0x24, 0x2, 0x64, 0x2, 0x4, 0xe },
{ 0x95, 0x62, 0x4, 0x20, 0x1c, 0x20, 0x70, 0x20, 0x10, 0xa8, 0x10, 0xac, 0x7d, 0xa6, 0x13, 0x23, 0x10, 0x20, 0x38, 0x22, 0x34, 0x26, 0x30, 0xe4, 0x50, 0xc, 0x50, 0x18, 0x10, 0x30, 0x10, 0x60, 0x11, 0xc0 },
{ 0x95, 0x63, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x95, 0x64, 0x8, 0x44, 0x1c, 0x44, 0x15, 0xff, 0x32, 0x44, 0x20, 0x44, 0x7e, 0x0, 0x8, 0x0, 0x8, 0xfe, 0x7e, 0x92, 0x8, 0x92, 0x4a, 0x92, 0x6a, 0xfe, 0x28, 0x92, 0xe, 0x92, 0x38, 0x92, 0x60, 0xfe },
{ 0x95, 0x65, 0x8, 0x4, 0x1c, 0x1c, 0x16, 0x70, 0x32, 0x40, 0x20, 0x40, 0x7e, 0x7e, 0x8, 0x44, 0x8, 0x44, 0x7e, 0x44, 0x8, 0x44, 0x4a, 0xff, 0x6a, 0x0, 0x28, 0x0, 0xe, 0x44, 0x38, 0xc6, 0x61, 0x83 },
{ 0x95, 0x66, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3e, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x7f, 0x8, 0x8, 0x2a, 0x2a, 0x2a, 0x2a, 0x6b, 0x6b, 0x49, 0x49, 0x8, 0x8, 0x18, 0x18 },
{ 0x95, 0x67, 0x10, 0x0, 0x11, 0xff, 0x10, 0x20, 0x7e, 0x64, 0x52, 0x44, 0x52, 0x5e, 0x52, 0xf2, 0x52, 0x0, 0x7e, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x14, 0x10, 0x1e, 0x10, 0x32, 0x10, 0x61, 0xff, 0x0, 0x0 },
{ 0x95, 0x68, 0x10, 0x22, 0x1e, 0x26, 0x32, 0xfc, 0x24, 0x28, 0x7f, 0xff, 0x2a, 0x20, 0x2a, 0x46, 0x3f, 0xfc, 0x2a, 0x41, 0x2a, 0x3f, 0x3e, 0x0, 0x0, 0x7e, 0x55, 0x42, 0x55, 0x7e, 0x54, 0x42, 0x40, 0x7e },
{ 0x95, 0x69, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x21, 0x42, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e, 0x0, 0x0 },
{ 0x95, 0x6a, 0x11, 0x4, 0x11, 0xc, 0x11, 0x8, 0x7f, 0xd8, 0x11, 0x32, 0x11, 0x6, 0x33, 0x4, 0x3b, 0x8c, 0x55, 0x58, 0x55, 0x31, 0x11, 0x3, 0x11, 0x2, 0x11, 0x6, 0x11, 0xc, 0x11, 0x18, 0x11, 0x30 },
{ 0x95, 0x6b, 0x10, 0xa, 0x11, 0xe9, 0x10, 0x9, 0x7c, 0x8, 0xb, 0xff, 0x28, 0x48, 0x28, 0x48, 0x39, 0x48, 0x19, 0x78, 0x11, 0x48, 0x19, 0x4c, 0x39, 0x44, 0x25, 0x44, 0x65, 0x75, 0x41, 0xc7, 0x3, 0x2 },
{ 0x95, 0x6c, 0x0, 0xc, 0x30, 0x38, 0x19, 0xe0, 0x9, 0x0, 0x1, 0xfe, 0x61, 0x8, 0x31, 0x8, 0x11, 0x8, 0x1, 0x8, 0x9, 0x8, 0xf, 0xff, 0x18, 0x0, 0x11, 0x8, 0x33, 0xc, 0x26, 0x6, 0x6c, 0x3 },
{ 0x95, 0x6d, 0x1, 0x0, 0x21, 0x3f, 0x35, 0xc8, 0x15, 0x1e, 0x5, 0x12, 0x45, 0x12, 0x6f, 0xde, 0x21, 0x12, 0x5, 0x52, 0x5, 0x3e, 0x29, 0x52, 0x23, 0x52, 0x20, 0x9e, 0x61, 0x8a, 0x43, 0x1b, 0x46, 0x31 },
{ 0x95, 0x6e, 0x2, 0x20, 0x4, 0x10, 0x1f, 0xfc, 0x71, 0x17, 0x2, 0x10, 0xc, 0x70, 0x38, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x95, 0x6f, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x4, 0x90, 0x38, 0xae, 0x1, 0xc0, 0xf, 0xf8, 0x78, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x95, 0x70, 0x8, 0x0, 0x28, 0xff, 0x2f, 0x10, 0x28, 0x7e, 0x28, 0x42, 0x7f, 0xc2, 0x8, 0x7e, 0x2a, 0x42, 0x2b, 0x42, 0x69, 0xfe, 0x4a, 0x42, 0x1a, 0x42, 0x6, 0x7e, 0xc, 0x24, 0x18, 0x66, 0x70, 0xc3 },
{ 0x95, 0x71, 0x10, 0x20, 0x10, 0x20, 0x3f, 0xa0, 0x20, 0x3f, 0x5f, 0x64, 0x15, 0x44, 0x15, 0xc4, 0x15, 0x2c, 0x7f, 0xa8, 0x29, 0x28, 0x29, 0x38, 0x29, 0x10, 0x29, 0x38, 0x3f, 0xac, 0x2, 0x66, 0x6, 0xc3 },
{ 0x95, 0x72, 0x22, 0x0, 0x36, 0xff, 0x14, 0x40, 0x7f, 0x40, 0x14, 0x40, 0x14, 0x7c, 0x14, 0x44, 0x7f, 0x44, 0x14, 0x64, 0x14, 0x54, 0x14, 0x54, 0x14, 0x44, 0x14, 0x44, 0x34, 0x45, 0x24, 0x75, 0x64, 0xc3 },
{ 0x95, 0x73, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x40, 0x0, 0xc0, 0x0, 0x80, 0x1, 0xa0, 0x3, 0xb0, 0x6, 0x98, 0xc, 0x8c, 0x18, 0x86, 0x70, 0x83, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0x74, 0x4, 0x8, 0x4, 0x8, 0xc, 0x8, 0x8, 0x8, 0x1b, 0xff, 0x10, 0x8, 0x30, 0x8, 0x53, 0x8, 0x11, 0x88, 0x10, 0x88, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x38 },
{ 0x95, 0x75, 0x0, 0x10, 0x10, 0x20, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x7d, 0xfc, 0x11, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x1d, 0xfc, 0x70, 0x20, 0x7, 0xff, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x95, 0x76, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x95, 0x77, 0x10, 0x0, 0x10, 0xfe, 0x10, 0x2, 0x10, 0xfe, 0x7c, 0x2, 0x14, 0xfe, 0x14, 0x0, 0x35, 0xff, 0x25, 0x11, 0x2d, 0x11, 0x28, 0xfe, 0x78, 0x92, 0x14, 0x92, 0x34, 0x92, 0x20, 0x96, 0x60, 0x10 },
{ 0x95, 0x78, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x95, 0x79, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x95, 0x7a, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x6, 0x40, 0x4, 0x40, 0xf, 0xfe, 0x1c, 0x42, 0x34, 0x42, 0x64, 0x42, 0x4, 0x42, 0x4, 0x42, 0x4, 0x4e, 0x0, 0x40, 0x0, 0x40 },
{ 0x95, 0x7b, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x11, 0x4, 0x11, 0x4, 0x13, 0xff, 0x12, 0x4, 0x16, 0x44, 0x1a, 0x64, 0x12, 0x24, 0x12, 0x4, 0x32, 0x4, 0x22, 0x4, 0x62, 0x4, 0x2, 0x1c },
{ 0x95, 0x7c, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x53, 0xff, 0x58, 0x40, 0x54, 0xd0, 0x50, 0x90, 0x11, 0xff, 0x13, 0x91, 0x16, 0x91, 0x10, 0x91, 0x10, 0x91, 0x10, 0x91, 0x10, 0x93, 0x10, 0x10, 0x10, 0x10 },
{ 0x95, 0x7d, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x78, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x1b, 0xff, 0x70, 0x50, 0x10, 0x50, 0x10, 0xd8, 0x10, 0x88, 0x11, 0x8c, 0x13, 0x6, 0x36, 0x3 },
{ 0x95, 0x7e, 0x5, 0x10, 0x4, 0x90, 0x7f, 0xd0, 0x4, 0x3f, 0x3f, 0xa2, 0x24, 0xe2, 0x3f, 0x92, 0x24, 0x96, 0x3f, 0x94, 0x4, 0x1c, 0x7f, 0xc8, 0x8, 0x8, 0xf, 0x9c, 0x18, 0x94, 0x31, 0xb6, 0x67, 0x63 },
{ 0x95, 0x80, 0x2, 0x40, 0x6, 0x60, 0xc, 0x38, 0x3b, 0x6e, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x78, 0xef, 0xf, 0x80, 0x8, 0x0, 0xf, 0xff, 0x8, 0x40, 0x18, 0x40, 0x30, 0x40, 0x60, 0x40, 0x0, 0x40 },
{ 0x95, 0x81, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x12, 0x24, 0x1a, 0x2c, 0xa, 0x28, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x95, 0x82, 0x0, 0xc, 0x20, 0x38, 0x37, 0xe2, 0x12, 0x46, 0x3, 0x6c, 0x41, 0x28, 0x63, 0xfe, 0x20, 0x4, 0x0, 0x18, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20, 0x40, 0xe0 },
{ 0x95, 0x83, 0x2, 0x20, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x74, 0x17, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0x40, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0xe, 0x38, 0x78, 0xf },
{ 0x95, 0x84, 0x8, 0x20, 0x8, 0x20, 0x1f, 0x7f, 0x34, 0x50, 0x62, 0x88, 0x0, 0x0, 0x4, 0x8, 0xc, 0x8, 0x1b, 0xff, 0x38, 0x8, 0x69, 0x88, 0x8, 0xc8, 0x8, 0x48, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38 },
{ 0x95, 0x85, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x24, 0x8, 0x2d, 0xff, 0x38, 0x88, 0x28, 0x48, 0x28, 0x18, 0x20, 0x80, 0x2f, 0xfc, 0x29, 0x44, 0x2a, 0x24, 0x68, 0x84, 0x49, 0x44, 0x4a, 0x24, 0x8, 0xc },
{ 0x95, 0x86, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x3f, 0xff, 0x20, 0x81, 0x2f, 0xfc, 0x20, 0x81, 0x2f, 0xff, 0x28, 0x42, 0x2f, 0xfe, 0x28, 0x42, 0x2f, 0xfe, 0x64, 0x4, 0x47, 0xfc, 0x44, 0x4, 0x4, 0xc },
{ 0x95, 0x87, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x95, 0x88, 0x0, 0x44, 0x3c, 0x6c, 0x0, 0x28, 0x7e, 0xff, 0x0, 0x28, 0x3c, 0xaa, 0x0, 0x6c, 0x0, 0x28, 0x3d, 0xff, 0x0, 0x0, 0x0, 0x7c, 0x3c, 0x44, 0x24, 0x7c, 0x24, 0x44, 0x24, 0x44, 0x3c, 0x7c },
{ 0x95, 0x89, 0x2, 0x0, 0x7, 0xf0, 0xc, 0x20, 0x38, 0x40, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x95, 0x8a, 0x0, 0xa, 0x3c, 0xe9, 0x24, 0x9, 0x24, 0x8, 0x3d, 0xff, 0x24, 0x28, 0x24, 0x28, 0x24, 0xa8, 0x3c, 0xb8, 0x24, 0xa8, 0x24, 0xac, 0x24, 0xa4, 0x3c, 0xa4, 0x14, 0xf5, 0x37, 0x87, 0x62, 0x2 },
{ 0x95, 0x8b, 0x4, 0x10, 0x4, 0x10, 0x3f, 0x90, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1c, 0x7f, 0xd6, 0x4, 0x13, 0x4, 0x11, 0x17, 0x90, 0x14, 0x10, 0x14, 0x10, 0x14, 0x10, 0x3c, 0x10, 0x27, 0x0, 0x61, 0xff },
{ 0x95, 0x8c, 0x0, 0x40, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0x8d, 0x0, 0x44, 0x3e, 0x44, 0x22, 0x44, 0x26, 0xc4, 0x24, 0xbf, 0x2c, 0x84, 0x29, 0x84, 0x2a, 0xa4, 0x24, 0xb4, 0x24, 0x94, 0x24, 0x84, 0x24, 0x84, 0x2c, 0x84, 0x20, 0x84, 0x20, 0x84, 0x20, 0x9c },
{ 0x95, 0x8e, 0x9, 0x0, 0x9, 0x0, 0x1b, 0xff, 0x12, 0x0, 0x36, 0x0, 0x31, 0xfc, 0x51, 0x24, 0x11, 0x24, 0x11, 0x24, 0x1f, 0xff, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x13, 0xff, 0x10, 0x8, 0x10, 0x38 },
{ 0x95, 0x8f, 0x11, 0x0, 0x11, 0x0, 0x13, 0xff, 0x17, 0x54, 0x79, 0x54, 0x11, 0x54, 0x17, 0xff, 0x11, 0x54, 0x19, 0x54, 0x71, 0x54, 0x17, 0xff, 0x10, 0x0, 0x10, 0x0, 0x11, 0x54, 0x13, 0x56, 0x36, 0x53 },
{ 0x95, 0x90, 0x0, 0x14, 0x1f, 0x16, 0x0, 0x12, 0x0, 0x10, 0x7f, 0xff, 0x0, 0x10, 0x2, 0x10, 0x12, 0x10, 0x13, 0xd0, 0x12, 0x18, 0x12, 0x8, 0x12, 0x8, 0x13, 0xcc, 0x1e, 0x5, 0x70, 0x7, 0x0, 0x2 },
{ 0x95, 0x91, 0x10, 0x0, 0x10, 0x0, 0x3f, 0xfe, 0x6a, 0x48, 0xa, 0x48, 0x7f, 0xff, 0xa, 0x48, 0xa, 0x48, 0x3f, 0xfe, 0x8, 0x4, 0x1f, 0x7e, 0x31, 0x24, 0x6b, 0x24, 0x6, 0xff, 0x1c, 0x4, 0x70, 0x4 },
{ 0x95, 0x92, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x0, 0x1f, 0xfe, 0x30, 0x82, 0x62, 0x42, 0x3f, 0xf2, 0x2, 0x2, 0x1f, 0xe2, 0x12, 0x22, 0x1f, 0xe2, 0x12, 0x22, 0x1f, 0xe6, 0x12, 0x24, 0x12, 0x6c },
{ 0x95, 0x93, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x10, 0x0, 0x3f, 0xfe, 0x6a, 0x48, 0xa, 0x48, 0x7f, 0xff, 0xa, 0x48, 0xa, 0x48, 0x3f, 0xfe, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x95, 0x94, 0x8, 0x0, 0x8, 0x3f, 0x7f, 0xa1, 0x21, 0x23, 0x33, 0x22, 0x12, 0x24, 0x12, 0x24, 0x7f, 0xa2, 0x0, 0x21, 0x0, 0x21, 0x3f, 0x21, 0x21, 0x21, 0x21, 0x23, 0x21, 0x20, 0x21, 0x20, 0x3f, 0x20 },
{ 0x95, 0x95, 0x4, 0x2, 0x4, 0x2, 0x3f, 0x82, 0x4, 0x2, 0x4, 0x3f, 0x7f, 0xc2, 0x0, 0x2, 0x4, 0x22, 0x4, 0x32, 0x3f, 0x92, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x7, 0x82, 0x1c, 0x2, 0x70, 0xe },
{ 0x95, 0x96, 0x10, 0x0, 0x17, 0xfc, 0x14, 0x4, 0x7c, 0x34, 0x15, 0xe4, 0x14, 0x44, 0x3d, 0xf4, 0x35, 0x54, 0x55, 0x54, 0x55, 0xf4, 0x14, 0x44, 0x14, 0x44, 0x14, 0x54, 0x14, 0x75, 0x15, 0xd5, 0x18, 0x3 },
{ 0x95, 0x97, 0x0, 0x0, 0x1f, 0xf8, 0x10, 0x8, 0x10, 0xe8, 0x17, 0x88, 0x11, 0x8, 0x17, 0xe8, 0x15, 0x28, 0x15, 0x28, 0x17, 0xe8, 0x11, 0x8, 0x11, 0x8, 0x11, 0x2c, 0x33, 0xf5, 0x2e, 0x17, 0x60, 0x2 },
{ 0x95, 0x98, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x7f, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0xf, 0xf, 0xf8, 0x78, 0x8, 0x0, 0x8 },
{ 0x95, 0x99, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x40, 0x3e, 0x7c, 0x22, 0xc4, 0x22, 0xa8, 0x3e, 0x10, 0x8, 0x6c, 0x2e, 0xc7, 0x28, 0x0, 0x28, 0x7e, 0x2e, 0x42, 0x38, 0x42, 0x60, 0x7e },
{ 0x95, 0x9a, 0x4, 0x20, 0x4, 0x2c, 0xc, 0x26, 0x8, 0x22, 0x18, 0x20, 0x17, 0xff, 0x30, 0x20, 0x50, 0x20, 0x10, 0x70, 0x10, 0x50, 0x10, 0x58, 0x10, 0xc8, 0x10, 0x8c, 0x11, 0x84, 0x13, 0x6, 0x16, 0x3 },
{ 0x95, 0x9b, 0x0, 0x2, 0x7f, 0xd2, 0x0, 0x12, 0x1f, 0x12, 0x11, 0x12, 0x11, 0x12, 0x1f, 0x12, 0x0, 0x12, 0x0, 0x12, 0x3f, 0x92, 0x24, 0x92, 0x24, 0x82, 0x3f, 0x82, 0x24, 0x82, 0x24, 0x82, 0x3f, 0x8e },
{ 0x95, 0x9c, 0x9, 0x0, 0x19, 0x0, 0x13, 0xfe, 0x36, 0x0, 0x61, 0xfc, 0x9, 0x4, 0x19, 0xfc, 0x11, 0x4, 0x31, 0xfc, 0x70, 0x80, 0x11, 0xf8, 0x13, 0x8, 0x16, 0xd8, 0x10, 0x70, 0x11, 0xdc, 0x17, 0x7 },
{ 0x95, 0x9d, 0x10, 0x0, 0x11, 0xff, 0x10, 0x0, 0x7c, 0xfe, 0x54, 0x82, 0x54, 0x82, 0x54, 0xfe, 0x54, 0x0, 0x54, 0x0, 0x55, 0xff, 0x5d, 0x11, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0x11, 0x11, 0xff },
{ 0x95, 0x9e, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x82, 0x22, 0x82, 0x22, 0x86, 0x3e, 0x80, 0x22, 0x80, 0x22, 0xfe, 0x22, 0xa2, 0x3e, 0xb6, 0x22, 0x94, 0x22, 0x9c, 0x22, 0x88, 0x22, 0x9c, 0x62, 0x96, 0x46, 0xb3 },
{ 0x95, 0x9f, 0x10, 0x0, 0x11, 0xff, 0x10, 0x0, 0x7c, 0xfe, 0x4, 0x82, 0xc, 0x82, 0x8, 0xfe, 0x18, 0x0, 0x10, 0x0, 0x3d, 0xff, 0x57, 0x11, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0x11, 0x11, 0xff },
{ 0x95, 0xa0, 0x0, 0x40, 0x3c, 0x40, 0x24, 0xff, 0x25, 0x80, 0x24, 0x7e, 0x3c, 0x42, 0x24, 0x7e, 0x24, 0x42, 0x24, 0x7e, 0x3c, 0x20, 0x24, 0x7e, 0x24, 0xc2, 0x25, 0xa6, 0x24, 0x18, 0x64, 0x6c, 0x4d, 0xc7 },
{ 0x95, 0xa1, 0x10, 0x80, 0x10, 0x80, 0x11, 0xff, 0x7d, 0x0, 0x7, 0xfc, 0xc, 0x84, 0x8, 0xfc, 0x1a, 0x84, 0x14, 0xfc, 0x38, 0x40, 0x54, 0xfc, 0x11, 0x84, 0x13, 0x6c, 0x10, 0x38, 0x10, 0x6c, 0x11, 0xc7 },
{ 0x95, 0xa2, 0x7f, 0xff, 0x2, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x9, 0x0, 0x1b, 0xff, 0x36, 0x84, 0x68, 0xfc, 0x18, 0x84, 0x30, 0xfc, 0x70, 0x40, 0x10, 0xfe, 0x13, 0x84, 0x10, 0x78, 0x13, 0xcf },
{ 0x95, 0xa3, 0x2, 0x2, 0x32, 0x52, 0x1a, 0x52, 0xa, 0x52, 0x3, 0xde, 0x62, 0x2, 0x32, 0x2, 0x13, 0xfe, 0x2, 0x2, 0xa, 0x2, 0xb, 0xde, 0x1a, 0x52, 0x12, 0x52, 0x36, 0x52, 0x24, 0x52, 0x6c, 0x2 },
{ 0x95, 0xa4, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xfe, 0x2, 0x22, 0x2, 0x22, 0x3f, 0xfe, 0x22, 0x20, 0x22, 0x20, 0x3f, 0xff, 0x2, 0x21, 0x2, 0x21, 0x6, 0x23, 0x4, 0x22, 0xc, 0x2e, 0x18, 0x20, 0x70, 0x20 },
{ 0x95, 0xa5, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x7c, 0xc0, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x1c, 0x80, 0x70, 0x84, 0x11, 0x84, 0x11, 0x6, 0x11, 0x2, 0x11, 0x3e, 0x13, 0xe3, 0x76, 0x1 },
{ 0x95, 0xa6, 0x0, 0x90, 0x20, 0x90, 0x37, 0xfe, 0x10, 0x92, 0x0, 0x92, 0x47, 0xfe, 0x64, 0x90, 0x24, 0x90, 0x4, 0x90, 0x17, 0xff, 0x10, 0x91, 0x10, 0x91, 0x31, 0x93, 0x21, 0x12, 0x23, 0x16, 0x66, 0x10 },
{ 0x95, 0xa7, 0x4, 0x40, 0x4, 0x40, 0xc, 0x40, 0x8, 0x40, 0x18, 0xc0, 0x10, 0x80, 0x30, 0x80, 0x50, 0x80, 0x10, 0x80, 0x10, 0x84, 0x11, 0x84, 0x11, 0x6, 0x11, 0x2, 0x11, 0x3e, 0x13, 0xe3, 0x16, 0x1 },
{ 0x95, 0xa8, 0x8, 0x80, 0x28, 0x80, 0x28, 0x80, 0x28, 0xff, 0x7e, 0xa9, 0x49, 0xa9, 0x9, 0x29, 0x8, 0x29, 0x8, 0x69, 0xe, 0x49, 0x78, 0xd9, 0x9, 0x91, 0x8, 0x31, 0x8, 0x21, 0x8, 0x63, 0x8, 0xe },
{ 0x95, 0xa9, 0x20, 0x44, 0x3c, 0x44, 0x24, 0x44, 0x48, 0xc4, 0x7c, 0xbf, 0x55, 0x84, 0x55, 0xa4, 0x7e, 0xb4, 0x54, 0x94, 0x54, 0x94, 0x7c, 0x84, 0x0, 0x84, 0x55, 0x84, 0x55, 0x84, 0x54, 0x84, 0x40, 0x9c },
{ 0x95, 0xaa, 0x2, 0x20, 0x2, 0x20, 0x6, 0x30, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6, 0x6f, 0xfb, 0x1, 0x8, 0x1, 0x8, 0x1, 0x8, 0x3, 0x8, 0x2, 0x8, 0x6, 0x18, 0xc, 0x10, 0x38, 0x70 },
{ 0x95, 0xab, 0x1, 0x0, 0x1, 0x0, 0x79, 0x0, 0x49, 0xff, 0x49, 0x49, 0x4b, 0x49, 0x4a, 0x49, 0x4e, 0x49, 0x48, 0xc9, 0x48, 0x99, 0x49, 0x91, 0x7b, 0x31, 0x6, 0x21, 0x0, 0x63, 0x0, 0xc2, 0x0, 0xe },
{ 0x95, 0xac, 0x0, 0x20, 0x3, 0xfe, 0x78, 0x20, 0x49, 0x4, 0x4f, 0xff, 0x49, 0x4, 0x48, 0x0, 0x4b, 0xfe, 0x4a, 0x2, 0x4b, 0xfe, 0x7a, 0x2, 0x3, 0xfe, 0x2, 0x2, 0x3, 0xfe, 0x1, 0x4, 0x6, 0x3 },
{ 0x95, 0xad, 0x10, 0x20, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x84, 0x13, 0xff, 0x7c, 0x84, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x1d, 0xfe, 0x71, 0x2, 0x1, 0xfe, 0x0, 0x84, 0x3, 0x3 },
{ 0x95, 0xae, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x11, 0x4, 0x17, 0xff, 0x59, 0x4, 0x54, 0x0, 0x53, 0xfe, 0x52, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x12, 0x2, 0x13, 0xfe, 0x11, 0x4, 0x16, 0x3 },
{ 0x95, 0xaf, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x11, 0x8c, 0x79, 0x4, 0x13, 0x6, 0x16, 0x3, 0x11, 0xfc, 0x18, 0x44, 0x70, 0x44, 0x10, 0x44, 0x10, 0xc4, 0x10, 0x84, 0x11, 0x8c, 0x13, 0x8, 0x36, 0x38 },
{ 0x95, 0xb0, 0x4, 0x10, 0x4, 0x10, 0x7f, 0x7f, 0x4, 0x10, 0xe, 0x38, 0x15, 0x54, 0x34, 0x96, 0x64, 0x13, 0x0, 0x80, 0x8, 0x84, 0x18, 0x8c, 0x31, 0xd8, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x95, 0xb1, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0xd, 0x58, 0x72, 0x87, 0xf, 0xf8, 0x38, 0x80, 0xf, 0xf8, 0x8, 0x80, 0xf, 0xf8, 0x8, 0x80, 0x1f, 0xfe, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc },
{ 0x95, 0xb2, 0x10, 0x48, 0x54, 0x48, 0x54, 0x48, 0x54, 0xcc, 0x10, 0x84, 0x7d, 0x86, 0x13, 0x3, 0x10, 0xfc, 0x38, 0x24, 0x34, 0x24, 0x34, 0x24, 0x50, 0x64, 0x50, 0x44, 0x10, 0xcc, 0x11, 0x88, 0x13, 0x38 },
{ 0x95, 0xb3, 0x10, 0x84, 0x8, 0x88, 0x7f, 0xff, 0x2, 0xa0, 0x4, 0x90, 0x1f, 0xfc, 0x68, 0x8b, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x7f, 0xff, 0x8, 0x8, 0x30, 0x6 },
{ 0x95, 0xb4, 0x8, 0x48, 0x18, 0x48, 0x10, 0x48, 0x64, 0xcc, 0x2c, 0x84, 0x19, 0x86, 0x13, 0x3, 0x24, 0xfc, 0x7c, 0x24, 0x14, 0x24, 0x10, 0x24, 0x54, 0x64, 0x54, 0x44, 0x54, 0xcc, 0x11, 0x88, 0x13, 0x38 },
{ 0x95, 0xb5, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0x2e, 0xba, 0x0, 0x80, 0x2, 0x20, 0x4, 0x10, 0x1f, 0xfc, 0x71, 0xb, 0x3, 0x8, 0xe, 0x8, 0x38, 0x38 },
{ 0x95, 0xb6, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x3, 0x60, 0x1, 0x40, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x95, 0xb7, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x2f, 0xfa, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x23, 0xe2, 0x2e, 0x22, 0x20, 0x2e },
{ 0x95, 0xb8, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x11, 0xc4, 0x11, 0x44, 0x13, 0x64, 0x16, 0x34, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x1c },
{ 0x95, 0xb9, 0x5, 0x4, 0x5, 0x8c, 0xc, 0x88, 0xb, 0xfe, 0x18, 0x88, 0x10, 0x88, 0x30, 0x88, 0x50, 0x88, 0x17, 0xff, 0x10, 0x88, 0x10, 0x88, 0x10, 0x88, 0x11, 0x88, 0x11, 0x8, 0x13, 0x8, 0x16, 0x8 },
{ 0x95, 0xba, 0x0, 0x18, 0x0, 0xf0, 0x7, 0x80, 0x4, 0x0, 0x7, 0xfc, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0, 0x4, 0x10, 0xc, 0x18, 0x18, 0xc, 0x30, 0x6 },
{ 0x95, 0xbb, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x7f, 0xfe, 0x12, 0x84, 0x12, 0x48, 0x13, 0xfe, 0x12, 0x48, 0x12, 0x48, 0x1f, 0xff, 0x72, 0x48, 0x6, 0xc8, 0x4, 0x88, 0xd, 0x88, 0x3, 0x8 },
{ 0x95, 0xbc, 0x24, 0x90, 0x35, 0x90, 0x15, 0x3f, 0x3f, 0xa2, 0x24, 0xf6, 0x2e, 0x9c, 0x35, 0x88, 0x24, 0x9e, 0x25, 0xb3, 0x0, 0x0, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x9c, 0x0, 0x80 },
{ 0x95, 0xbd, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0xbe, 0x24, 0x90, 0x35, 0x90, 0x15, 0x3f, 0x3f, 0xa2, 0x24, 0xf6, 0x2e, 0x9c, 0x35, 0x88, 0x24, 0x9e, 0x25, 0xb3, 0x0, 0x0, 0x2, 0x10, 0x7f, 0xff, 0x2, 0x10, 0x6, 0x10, 0xc, 0x10, 0x38, 0x10 },
{ 0x95, 0xbf, 0x10, 0x0, 0x17, 0xff, 0x10, 0x20, 0x7c, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x3a, 0x22, 0x36, 0x72, 0x32, 0x52, 0x52, 0xda, 0x52, 0x8a, 0x12, 0x2, 0x12, 0x2, 0x12, 0x2, 0x12, 0x2, 0x12, 0xe },
{ 0x95, 0xc0, 0x8, 0x8, 0xc, 0x18, 0x6, 0x30, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x2, 0x20, 0x22, 0x22, 0x22, 0x22, 0x32, 0x26, 0x12, 0x24, 0x12, 0x24, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x95, 0xc1, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x24, 0x90, 0x35, 0x90, 0x15, 0x3f, 0x3f, 0xa2, 0x24, 0xe6, 0x24, 0x94, 0x2e, 0x9c, 0x35, 0x88, 0x24, 0x9c, 0x24, 0x96, 0x25, 0xb3 },
{ 0x95, 0xc2, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x20, 0x42, 0x20, 0x42, 0x27, 0xf2, 0x20, 0xc2, 0x21, 0x42, 0x23, 0x42, 0x26, 0x42, 0x20, 0xc2, 0x20, 0xe },
{ 0x95, 0xc3, 0x1, 0x10, 0x3d, 0x10, 0x25, 0x16, 0x25, 0xdc, 0x2d, 0x10, 0x29, 0x10, 0x29, 0x11, 0x25, 0xcf, 0x27, 0x0, 0x24, 0x20, 0x24, 0x20, 0x2d, 0xfe, 0x20, 0x20, 0x20, 0x20, 0x23, 0xff, 0x20, 0x0 },
{ 0x95, 0xc4, 0x0, 0x80, 0x10, 0x84, 0x18, 0x8c, 0xc, 0x98, 0x4, 0x90, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0xc5, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x95, 0xc6, 0x8, 0x8, 0xb, 0x88, 0xa, 0xbe, 0x1a, 0x80, 0x12, 0xa2, 0x32, 0xb6, 0x33, 0x94, 0x52, 0x7f, 0x12, 0x8, 0x13, 0x88, 0x16, 0xbe, 0x16, 0x88, 0x1a, 0x88, 0x12, 0x88, 0x13, 0x88, 0x10, 0x8 },
{ 0x95, 0xc7, 0x0, 0x8, 0x1f, 0x8, 0x11, 0x7f, 0x11, 0x22, 0x1f, 0x14, 0x10, 0x7f, 0x3f, 0x8, 0x29, 0x7f, 0x69, 0x8, 0xf, 0x8, 0x0, 0x0, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x95, 0xc8, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x50, 0x8, 0x37, 0x88, 0x14, 0xbe, 0x14, 0x80, 0x17, 0xa2, 0x34, 0x14, 0x54, 0x3e, 0x17, 0x88, 0x34, 0x88, 0x2c, 0xbe, 0x6c, 0x88, 0x17, 0x88, 0x0, 0x8 },
{ 0x95, 0xc9, 0x0, 0x10, 0x7f, 0x20, 0x8, 0xfe, 0x8, 0x82, 0x3e, 0x82, 0x8, 0xfe, 0x8, 0x82, 0xf, 0x82, 0x78, 0xfe, 0x0, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x7, 0xfc, 0x7c, 0x4, 0x4, 0x4, 0x7, 0xfc },
{ 0x95, 0xca, 0x0, 0x2, 0x3f, 0xa2, 0x20, 0xa2, 0x20, 0xa2, 0x20, 0xa2, 0x3f, 0xa2, 0x8, 0x22, 0x8, 0x22, 0xf, 0xa2, 0x8, 0xa2, 0x8, 0xa2, 0x8, 0x82, 0x18, 0x82, 0x11, 0x82, 0x31, 0x2, 0x67, 0xe },
{ 0x95, 0xcb, 0x24, 0x90, 0x15, 0x1f, 0x3f, 0xb2, 0x24, 0xe2, 0x2e, 0x94, 0x35, 0x88, 0x24, 0x9c, 0x25, 0xb7, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x95, 0xcc, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x1f, 0xfc, 0x0, 0x22, 0x1f, 0xff, 0x10, 0x20, 0x17, 0x34, 0x11, 0x9c, 0x30, 0x39, 0x20, 0xed, 0x63, 0x87 },
{ 0x95, 0xcd, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x68, 0xd0, 0x4, 0x8, 0x1f, 0xfc, 0x10, 0x84, 0x11, 0x44, 0x16, 0x34, 0x0, 0x0, 0x10, 0x46, 0x1f, 0x5c, 0x10, 0x70, 0x10, 0x41, 0x1f, 0x63, 0x70, 0x3e },
{ 0x95, 0xce, 0x8, 0x0, 0xf, 0xff, 0x8, 0x0, 0x1b, 0xfc, 0x12, 0x4, 0x32, 0x4, 0x33, 0xfc, 0x52, 0x0, 0x13, 0xfe, 0x12, 0x52, 0x16, 0x52, 0x17, 0xfe, 0x1a, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x56 },
{ 0x95, 0xcf, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x12, 0x24, 0x32, 0x26, 0x66, 0x23, 0xc, 0x20, 0x2, 0x0, 0x3, 0xf8, 0x6, 0x10, 0xc, 0x30, 0x3b, 0x60, 0x1, 0xc0, 0xf, 0x78, 0x78, 0xf },
{ 0x95, 0xd0, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0xf, 0xff, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xf, 0xf0, 0x8, 0x10, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x30, 0x10, 0x60, 0x10, 0x0, 0x10 },
{ 0x95, 0xd1, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x68, 0xd0, 0x4, 0x8, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x3f, 0xfe, 0x31, 0x22, 0x5f, 0xfe, 0x11, 0x22, 0x11, 0x26 },
{ 0x95, 0xd2, 0x8, 0x0, 0x19, 0xff, 0x10, 0x0, 0x64, 0xfe, 0x2c, 0x82, 0x18, 0x82, 0x10, 0xfe, 0x24, 0x80, 0x7e, 0xfe, 0x12, 0xaa, 0x10, 0xaa, 0x55, 0xfe, 0x55, 0xaa, 0x52, 0xaa, 0x10, 0xaa, 0x10, 0x86 },
{ 0x95, 0xd3, 0x0, 0x0, 0x30, 0x0, 0x1b, 0xfe, 0x8, 0x42, 0x0, 0x42, 0x0, 0x42, 0x0, 0x42, 0x78, 0x42, 0x8, 0x42, 0x8, 0xc2, 0x8, 0x86, 0x9, 0x84, 0xb, 0x1c, 0x18, 0x0, 0x34, 0x0, 0x63, 0xff },
{ 0x95, 0xd4, 0x0, 0x0, 0x31, 0xfe, 0x19, 0x0, 0x9, 0x0, 0x1, 0x0, 0x1, 0xfc, 0x1, 0x44, 0x79, 0x44, 0x9, 0x6c, 0xb, 0x28, 0xa, 0x10, 0xe, 0x38, 0x8, 0x6c, 0x19, 0xc7, 0x34, 0x0, 0x63, 0xff },
{ 0x95, 0xd5, 0x0, 0x0, 0x33, 0xfe, 0x18, 0x0, 0x9, 0xfc, 0x1, 0x4, 0x1, 0xfc, 0x1, 0x0, 0x79, 0xfe, 0x9, 0xaa, 0xb, 0xaa, 0xa, 0xfe, 0xe, 0xaa, 0x8, 0xaa, 0x18, 0xae, 0x34, 0x0, 0x63, 0xff },
{ 0x95, 0xd6, 0x8, 0x0, 0xf, 0xff, 0x18, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x32, 0x22, 0x33, 0xfe, 0x52, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x10, 0x20, 0x12, 0x60, 0x11, 0x40, 0x10, 0xe0, 0x11, 0xb8, 0x17, 0xf },
{ 0x95, 0xd7, 0x10, 0x10, 0x1f, 0x10, 0x11, 0x10, 0x33, 0x7e, 0x22, 0x12, 0x7f, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x3f, 0xb2, 0xa, 0x26, 0xa, 0x64, 0x1a, 0xdc, 0x12, 0x1, 0x33, 0x3, 0x61, 0xfe },
{ 0x95, 0xd8, 0x8, 0x40, 0x8, 0x7c, 0x8, 0x44, 0x8, 0xcc, 0x7e, 0x88, 0x13, 0xfe, 0x12, 0x92, 0x12, 0x92, 0x32, 0x92, 0x26, 0xfe, 0x24, 0x48, 0x7c, 0x48, 0xa, 0xc8, 0x1a, 0x89, 0x31, 0x89, 0x63, 0x7 },
{ 0x95, 0xd9, 0x2, 0x0, 0x2, 0x10, 0x6, 0x10, 0x4, 0xf8, 0xf, 0x8c, 0x38, 0x6, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x6, 0x20, 0x4, 0x20, 0xc, 0x20, 0x18, 0x20, 0x30, 0x20 },
{ 0x95, 0xda, 0x28, 0x80, 0x28, 0xff, 0x7d, 0x88, 0x29, 0x7f, 0x2b, 0x49, 0x39, 0x49, 0x11, 0x7f, 0x7d, 0x49, 0x55, 0x49, 0x55, 0x7f, 0x7d, 0x8, 0x11, 0x28, 0x7d, 0x28, 0x11, 0x1c, 0x11, 0x36, 0x11, 0x63 },
{ 0x95, 0xdb, 0x4, 0x0, 0x5, 0xfc, 0xd, 0x4, 0x9, 0x4, 0x19, 0x4, 0x11, 0xfc, 0x30, 0x20, 0x50, 0x20, 0x17, 0xff, 0x10, 0xa8, 0x10, 0xa8, 0x11, 0xac, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0x20 },
{ 0x95, 0xdc, 0x8, 0x14, 0x1c, 0x12, 0x16, 0xff, 0x33, 0x10, 0x60, 0x10, 0x8, 0xfe, 0x3e, 0x92, 0x8, 0x92, 0x8, 0xfe, 0x7f, 0x92, 0x0, 0x92, 0x3e, 0xfe, 0x22, 0x92, 0x22, 0x92, 0x22, 0x92, 0x3e, 0x96 },
{ 0x95, 0xdd, 0x8, 0x14, 0x1c, 0x12, 0x16, 0xff, 0x32, 0x10, 0x20, 0x10, 0x7e, 0xfe, 0x8, 0x92, 0x8, 0x92, 0x7e, 0xfe, 0x8, 0x92, 0x4a, 0x92, 0x6a, 0xfe, 0x28, 0x92, 0xe, 0x92, 0x38, 0x92, 0x60, 0x96 },
{ 0x95, 0xde, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x22, 0x20, 0x92, 0x2f, 0xfa, 0x20, 0x82, 0x27, 0xf2, 0x24, 0x92, 0x27, 0xf2, 0x24, 0x92, 0x27, 0xf2, 0x24, 0x92, 0x24, 0xb2, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x95, 0xdf, 0x10, 0x24, 0x10, 0x22, 0x17, 0xff, 0x10, 0x20, 0x78, 0x20, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x1b, 0xfe, 0x72, 0x22, 0x12, 0x22, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x32, 0x26 },
{ 0x95, 0xe0, 0x0, 0x80, 0x8, 0x80, 0x8, 0xfc, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x97, 0x3, 0xb0, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0x1e, 0x0 },
{ 0x95, 0xe1, 0x0, 0x90, 0x0, 0x88, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x9c },
{ 0x95, 0xe2, 0x10, 0x14, 0x10, 0x12, 0x11, 0xff, 0x7c, 0x10, 0x4, 0x10, 0xc, 0xfe, 0x8, 0x92, 0x1a, 0x92, 0x14, 0xfe, 0x38, 0x92, 0x54, 0x92, 0x12, 0xfe, 0x10, 0x92, 0x10, 0x92, 0x10, 0x92, 0x10, 0x96 },
{ 0x95, 0xe3, 0x10, 0x14, 0x10, 0x12, 0x7e, 0xff, 0x10, 0x10, 0x7e, 0x10, 0x52, 0xfe, 0x52, 0x92, 0x7e, 0x92, 0x52, 0xfe, 0x52, 0x92, 0x7e, 0x92, 0x10, 0xfe, 0x7e, 0x92, 0x10, 0x92, 0x10, 0x92, 0x10, 0x96 },
{ 0x95, 0xe4, 0x2, 0x10, 0xe, 0x10, 0x79, 0xff, 0x8, 0x10, 0x8, 0xfe, 0x7e, 0x92, 0x8, 0xfe, 0x8, 0x92, 0x1c, 0x92, 0x1a, 0xfe, 0x2a, 0x0, 0x28, 0x18, 0x48, 0xaa, 0x8, 0xa3, 0x9, 0xa5, 0x9, 0x1c },
{ 0x95, 0xe5, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x18, 0x8c, 0x6f, 0xfb, 0x1, 0x8, 0x7, 0x8, 0x3c, 0x38 },
{ 0x95, 0xe6, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x20, 0xc, 0x98, 0x70, 0x87, 0x7, 0xf0, 0x0, 0x80, 0x3f, 0xfe },
{ 0x95, 0xe7, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x19, 0xc, 0x65, 0x53, 0xd, 0x78, 0x19, 0x2c, 0x3, 0x0 },
{ 0x95, 0xe8, 0x0, 0x48, 0x0, 0x4c, 0x0, 0x44, 0x1f, 0xff, 0x10, 0x40, 0x10, 0x40, 0x10, 0x42, 0x10, 0x66, 0x10, 0x24, 0x10, 0x2c, 0x10, 0x38, 0x10, 0x10, 0x10, 0x78, 0x31, 0xcd, 0x27, 0x7, 0x60, 0x2 },
{ 0x95, 0xe9, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xfc, 0x68, 0xb, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x95, 0xea, 0x0, 0x0, 0xf, 0xfc, 0x8, 0x4, 0x9, 0x84, 0x8, 0xc4, 0x8, 0x44, 0x8, 0x4, 0x7f, 0xff, 0x10, 0x4, 0x13, 0x4, 0x11, 0x84, 0x10, 0x84, 0x10, 0x4, 0x1f, 0xff, 0x0, 0x8, 0x0, 0x38 },
{ 0x95, 0xeb, 0x10, 0x20, 0x10, 0x20, 0x3f, 0x7f, 0x68, 0xc8, 0x4, 0x22, 0x33, 0xff, 0x18, 0x20, 0x9, 0xfe, 0x61, 0x22, 0x31, 0xfe, 0x11, 0x22, 0x5, 0xfe, 0xc, 0x4, 0x1b, 0xff, 0x30, 0x84, 0x60, 0x5c },
{ 0x95, 0xec, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x95, 0xed, 0x9, 0x10, 0x9, 0x10, 0x9, 0x10, 0x1f, 0xdf, 0x12, 0x12, 0x32, 0x32, 0x33, 0xa2, 0x52, 0x96, 0x12, 0x94, 0x12, 0x9c, 0x12, 0x88, 0x12, 0x88, 0x12, 0x9c, 0x12, 0x94, 0x12, 0xb6, 0x15, 0xa3 },
{ 0x95, 0xee, 0x4, 0x20, 0x4, 0x20, 0xf, 0xff, 0x8, 0x20, 0x1b, 0xfe, 0x10, 0x50, 0x37, 0xff, 0x50, 0x88, 0x11, 0x24, 0x16, 0x23, 0x11, 0xfc, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x95, 0xef, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfc, 0x18, 0x4, 0x10, 0x4, 0x3f, 0xc4, 0x60, 0x44, 0x0, 0x44, 0x0, 0x44, 0x1f, 0xcc, 0x10, 0x8, 0x10, 0x38, 0x10, 0x0, 0x10, 0x1, 0x18, 0x3, 0xf, 0xfe },
{ 0x95, 0xf0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x95, 0xf1, 0x8, 0x0, 0x8, 0xfe, 0x3e, 0x82, 0x8, 0x82, 0x8, 0x8e, 0x7f, 0x80, 0x22, 0xfe, 0x36, 0xa2, 0x14, 0xa2, 0x7f, 0xb6, 0x8, 0x94, 0x8, 0x9c, 0x3e, 0x88, 0x8, 0x9c, 0x8, 0x96, 0x8, 0xb3 },
{ 0x95, 0xf2, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x1, 0x40, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x90, 0x18, 0x8c, 0x67, 0xf3, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x95, 0xf3, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x90, 0x0, 0x98, 0x0, 0x88, 0x7f, 0xff, 0x0, 0x0 },
{ 0x95, 0xf4, 0x0, 0x20, 0x10, 0x3e, 0x10, 0x62, 0x54, 0xc6, 0x55, 0xac, 0x54, 0x38, 0x54, 0x6c, 0x55, 0xc7, 0x54, 0x10, 0x54, 0xfe, 0x54, 0x10, 0x7c, 0xfe, 0x0, 0x10, 0x1, 0xff, 0x0, 0x10, 0x0, 0x10 },
{ 0x95, 0xf5, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x1, 0x0, 0x3, 0xf0, 0xe, 0x10, 0x39, 0x20, 0x0, 0xc0, 0xf, 0x78, 0x78, 0x8f, 0xf, 0xf8, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80 },
{ 0x95, 0xf6, 0x0, 0x80, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0x3e, 0x11, 0x22, 0x11, 0x22, 0x1f, 0x3e, 0x11, 0x22, 0x11, 0x22, 0x1f, 0x3e, 0x11, 0x22, 0x31, 0x22, 0x21, 0x62, 0x67, 0x4e },
{ 0x95, 0xf7, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x11, 0x0, 0x11, 0x0, 0x13, 0xfc, 0x12, 0x4, 0x17, 0xe4, 0x1c, 0x24, 0x10, 0x24, 0x13, 0xe4, 0x12, 0x1c, 0x32, 0x0, 0x22, 0x1, 0x63, 0x3, 0x1, 0xfe },
{ 0x95, 0xf8, 0x11, 0x0, 0x11, 0x0, 0x11, 0xfe, 0x13, 0x2, 0x7a, 0x2, 0x13, 0xf2, 0x16, 0x12, 0x10, 0x12, 0x18, 0x12, 0x73, 0xf6, 0x12, 0x4, 0x12, 0x1c, 0x12, 0x0, 0x12, 0x1, 0x13, 0x3, 0x31, 0xfe },
{ 0x95, 0xf9, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x79, 0xfc, 0x10, 0x50, 0x17, 0xff, 0x10, 0x88, 0x19, 0x24, 0x76, 0x23, 0x11, 0xfc, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20 },
{ 0x95, 0xfa, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7f, 0x7f, 0x8, 0xc4, 0x8, 0xa4, 0xf, 0x24, 0x9, 0x2c, 0x9, 0x28, 0x9, 0x38, 0x19, 0x10, 0x11, 0x38, 0x13, 0x28, 0x32, 0x6c, 0x22, 0x46, 0x66, 0xc3 },
{ 0x95, 0xfb, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0xf8, 0x3, 0x8, 0x2, 0x8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x18, 0xc, 0x10, 0x18, 0x10, 0x70, 0xf0 },
{ 0x95, 0xfc, 0x0, 0x0, 0x1f, 0x3e, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x1f, 0x3e, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x1f, 0x3e, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x31, 0x22, 0x21, 0x62, 0x67, 0x4e },
{ 0x96, 0x40, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0xb, 0xfe, 0x0, 0x20, 0x60, 0x20, 0x30, 0x20, 0x17, 0xff, 0x0, 0x40, 0x8, 0x40, 0x8, 0xc4, 0x18, 0x86, 0x10, 0x82, 0x31, 0x9f, 0x21, 0xf1, 0x67, 0x1 },
{ 0x96, 0x41, 0x1, 0x0, 0x31, 0x0, 0x19, 0xfe, 0xb, 0x2, 0x2, 0x2, 0x63, 0xf2, 0x36, 0x12, 0x10, 0x12, 0x0, 0x12, 0xb, 0xf6, 0xa, 0x4, 0x1a, 0x1c, 0x12, 0x0, 0x32, 0x1, 0x23, 0x3, 0x61, 0xfe },
{ 0x96, 0x42, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfc, 0x0, 0x30, 0x0, 0xc0, 0x0, 0x80, 0x1, 0x80, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x96, 0x43, 0x0, 0x80, 0x7e, 0x80, 0x10, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x11, 0xf2, 0x3d, 0x12, 0x27, 0x12, 0x64, 0x12, 0x24, 0xf2, 0x24, 0x8e, 0x24, 0x80, 0x24, 0x80, 0x3c, 0x81, 0x0, 0xc3, 0x0, 0x7e },
{ 0x96, 0x44, 0x8, 0x10, 0x19, 0x1e, 0x11, 0xa2, 0x64, 0xd4, 0x2c, 0x8, 0x18, 0x14, 0x10, 0x63, 0x25, 0x88, 0x7c, 0xbe, 0x14, 0x88, 0x10, 0xbe, 0x54, 0x88, 0x54, 0xff, 0x51, 0x88, 0x11, 0x40, 0x13, 0x3f },
{ 0x96, 0x45, 0x0, 0x80, 0x3c, 0x80, 0x24, 0xfe, 0x24, 0x82, 0x24, 0x82, 0x3d, 0xf2, 0x25, 0x12, 0x27, 0x12, 0x24, 0x12, 0x3c, 0xf2, 0x24, 0x8e, 0x24, 0x80, 0x24, 0x80, 0x24, 0x81, 0x64, 0xc3, 0x4c, 0x7e },
{ 0x96, 0x46, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x8, 0xc, 0x18, 0x18, 0x10, 0x70, 0x70 },
{ 0x96, 0x47, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x7e, 0x3e, 0xc2, 0x0, 0x82, 0x1, 0x82, 0x7, 0xe },
{ 0x96, 0x48, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x21, 0xfe, 0x37, 0xc, 0x10, 0xf8, 0x7, 0x8f, 0x0, 0x20, 0x73, 0xfe, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x37, 0xff, 0x68, 0x20, 0x47, 0xff },
{ 0x96, 0x49, 0x10, 0x20, 0x10, 0x3c, 0x10, 0x64, 0x7c, 0xcc, 0x55, 0xa8, 0x54, 0x30, 0x54, 0x6c, 0x55, 0xc7, 0x54, 0x10, 0x7c, 0xfe, 0x10, 0x10, 0x10, 0xfe, 0x14, 0x10, 0x3d, 0xff, 0x64, 0x10, 0x0, 0x10 },
{ 0x96, 0x4a, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x0, 0xd, 0xfc, 0x19, 0x4, 0x31, 0xfc, 0x50, 0x20, 0x17, 0xff, 0x11, 0x24, 0x16, 0x23, 0x1, 0x8, 0x6, 0x90, 0x7c, 0x60, 0x7, 0x38, 0x1c, 0xf },
{ 0x96, 0x4b, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x7e, 0xff, 0x0, 0x20, 0x3c, 0x20, 0x0, 0x20, 0x0, 0x3e, 0x3c, 0x22, 0x0, 0x22, 0x0, 0x22, 0x3c, 0x62, 0x24, 0x46, 0x24, 0x44, 0x24, 0xc4, 0x3d, 0x9c },
{ 0x96, 0x4c, 0x2, 0x20, 0x1f, 0xfc, 0x12, 0x24, 0x1f, 0xfc, 0x12, 0x24, 0x1f, 0xfc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x96, 0x4d, 0x4, 0x0, 0x4, 0x3f, 0x3f, 0xa1, 0x4, 0x23, 0x4, 0x22, 0x3f, 0xa6, 0x4, 0x24, 0x4, 0x22, 0x4, 0x21, 0x7f, 0xe1, 0x4, 0x21, 0xc, 0x21, 0x8, 0x27, 0x18, 0x20, 0x30, 0x20, 0x60, 0x20 },
{ 0x96, 0x4e, 0x10, 0x40, 0x38, 0x7c, 0x2c, 0x44, 0x64, 0xcc, 0x41, 0xa8, 0x7c, 0x38, 0x10, 0x6c, 0x11, 0xc7, 0x7c, 0x10, 0x10, 0xfe, 0x54, 0x10, 0x54, 0xfe, 0x50, 0x10, 0x1d, 0xff, 0x30, 0x10, 0x60, 0x10 },
{ 0x96, 0x4f, 0x8, 0x40, 0x1c, 0x40, 0x16, 0x7e, 0x32, 0x42, 0x28, 0x42, 0x7e, 0xf2, 0x23, 0x92, 0x3e, 0x12, 0x22, 0x12, 0x3e, 0xf2, 0x20, 0x8e, 0x24, 0x80, 0x24, 0x80, 0x2e, 0x81, 0x3a, 0xc3, 0x60, 0x7e },
{ 0x96, 0x50, 0x1f, 0xfc, 0x10, 0x4, 0x17, 0xf4, 0x10, 0x84, 0x13, 0xe4, 0x12, 0x24, 0x13, 0xe4, 0x12, 0x24, 0x13, 0xe4, 0x12, 0x4, 0x13, 0xfc, 0x12, 0x4, 0x13, 0xf4, 0x30, 0x15, 0x25, 0x57, 0x64, 0x32 },
{ 0x96, 0x51, 0x0, 0x4, 0x3b, 0x88, 0x2a, 0xbe, 0x2a, 0xa2, 0x2a, 0xbe, 0x3b, 0xa2, 0x2a, 0xbe, 0x2a, 0xa0, 0x2a, 0xbf, 0x3b, 0xa0, 0x2a, 0xbf, 0x2a, 0x81, 0x2a, 0xab, 0x2a, 0xa9, 0x6c, 0xa3, 0x59, 0x86 },
{ 0x96, 0x52, 0x0, 0x6, 0x0, 0x3c, 0x1f, 0xe0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0x60, 0x8, 0xc0, 0xb, 0x80, 0x1e, 0x0, 0x33, 0xc0, 0x60, 0x7f },
{ 0x96, 0x53, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xc, 0x0, 0x7, 0xfe, 0x0, 0x0 },
{ 0x96, 0x54, 0x4, 0x20, 0x4, 0x20, 0xf, 0xff, 0x8, 0x84, 0x18, 0x48, 0x13, 0xff, 0x32, 0x1, 0x52, 0x21, 0x10, 0x20, 0x13, 0xff, 0x10, 0x40, 0x10, 0x7e, 0x10, 0x42, 0x10, 0xc2, 0x11, 0x82, 0x13, 0xe },
{ 0x96, 0x55, 0x4, 0x2, 0x4, 0x12, 0x3f, 0xd2, 0x10, 0x92, 0x19, 0x92, 0x9, 0x12, 0x9, 0x12, 0x7f, 0xf2, 0x0, 0x12, 0x0, 0x12, 0x1f, 0x92, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x1f, 0x8e },
{ 0x96, 0x56, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xff, 0x7c, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x7e, 0x10, 0x42, 0x10, 0x42, 0x1c, 0x42, 0x70, 0xc2, 0x0, 0x86, 0x1, 0x84, 0x3, 0x4, 0x6, 0x1c },
{ 0x96, 0x57, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x7e, 0x20, 0x12, 0x20, 0x12, 0x20, 0x12, 0x3e, 0x32, 0x22, 0x26, 0x22, 0x24, 0x22, 0x7e, 0x62, 0xb, 0x46, 0x19, 0x44, 0x30, 0xc4, 0x61, 0x9c },
{ 0x96, 0x58, 0x10, 0x0, 0x11, 0xff, 0x11, 0x1, 0x7d, 0xff, 0x55, 0x1, 0x55, 0xff, 0x54, 0x0, 0x54, 0xfe, 0x54, 0x82, 0x54, 0xfe, 0x5c, 0x82, 0x10, 0x82, 0x10, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x96, 0x59, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0xc, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x1, 0x80, 0x4, 0xc0, 0x14, 0x46, 0x14, 0xb, 0x36, 0x19, 0x63, 0xf0 },
{ 0x96, 0x5a, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0xb, 0xff, 0x28, 0x80, 0x2c, 0x80, 0x2a, 0x80, 0x6a, 0x80, 0x48, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0xc0, 0x8, 0x7e, 0x8, 0x0 },
{ 0x96, 0x5b, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xff, 0x11, 0x0, 0x11, 0xfc, 0x31, 0x4, 0x23, 0x4, 0x66, 0x4, 0x1c, 0x1c },
{ 0x96, 0x5c, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x20, 0x1f, 0xfc, 0x2, 0x20, 0x7f, 0xff, 0x4, 0x10, 0x18, 0x8c, 0x66, 0xb3, 0x3, 0xe0, 0xe, 0xb8, 0x38, 0x8e, 0x3, 0x80 },
{ 0x96, 0x5d, 0x0, 0x0, 0x8, 0x7e, 0x8, 0x42, 0x7f, 0x7e, 0x20, 0x42, 0x20, 0x7e, 0x20, 0x44, 0x1e, 0xc4, 0x1, 0x9c, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x96, 0x5e, 0x4, 0x10, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x96, 0x5f, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7c, 0x20, 0x11, 0xfc, 0x10, 0x50, 0x3b, 0xff, 0x34, 0x88, 0x31, 0x24, 0x56, 0x23, 0x51, 0xfc, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20 },
{ 0x96, 0x60, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x3f, 0xfe, 0x20, 0x2, 0x3f, 0xfe, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x96, 0x61, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x65, 0xff, 0x2c, 0x20, 0x18, 0x20, 0x10, 0x20, 0x24, 0x3e, 0x7e, 0x22, 0xa, 0x22, 0x8, 0x22, 0x2a, 0x62, 0x2a, 0x46, 0x6a, 0x44, 0x48, 0xc4, 0x9, 0x9c },
{ 0x96, 0x62, 0x0, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x22, 0xff, 0x22, 0x20, 0x3e, 0x20, 0x22, 0x20, 0x22, 0x3e, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x66, 0x62, 0x44, 0x46, 0xcc },
{ 0x96, 0x63, 0x0, 0x82, 0x38, 0x86, 0x2b, 0xe4, 0x28, 0x8c, 0x2b, 0xe9, 0x38, 0x3, 0x2b, 0xe2, 0x2a, 0x26, 0x2b, 0xec, 0x38, 0x0, 0x2a, 0x21, 0x2b, 0x63, 0x29, 0x42, 0x28, 0xe6, 0x6b, 0x8c, 0x58, 0x18 },
{ 0x96, 0x64, 0x0, 0x44, 0x3c, 0x44, 0x1, 0xff, 0x7e, 0x44, 0x0, 0x7c, 0x3c, 0x44, 0x0, 0x44, 0x0, 0x7c, 0x3c, 0x10, 0x1, 0xff, 0x0, 0x54, 0x3c, 0x54, 0x24, 0xd6, 0x24, 0x92, 0x25, 0x93, 0x3c, 0x10 },
{ 0x96, 0x65, 0x4, 0x10, 0x8, 0x20, 0x14, 0xfe, 0x62, 0x82, 0x14, 0x82, 0x8, 0xfe, 0x14, 0x82, 0x64, 0x82, 0xa, 0xfe, 0x12, 0x48, 0x66, 0x48, 0xa, 0x48, 0x12, 0x48, 0x62, 0x49, 0x6, 0xc9, 0x1d, 0x87 },
{ 0x96, 0x66, 0x6, 0x0, 0x3c, 0xfe, 0x20, 0x22, 0x24, 0x22, 0x26, 0x62, 0x3a, 0xce, 0x60, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x96, 0x67, 0x10, 0x20, 0x38, 0x20, 0x2c, 0x64, 0x66, 0x44, 0x40, 0xfe, 0x7c, 0x2, 0x10, 0x10, 0x10, 0x90, 0x7c, 0xfe, 0x11, 0x10, 0x54, 0x10, 0x55, 0xff, 0x50, 0x10, 0x1c, 0x10, 0x30, 0x10, 0x60, 0x10 },
{ 0x96, 0x68, 0x0, 0x10, 0x3e, 0x10, 0x22, 0x10, 0x27, 0xff, 0x24, 0x20, 0x2c, 0x20, 0x28, 0x20, 0x24, 0x3e, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x62, 0x2e, 0x46, 0x20, 0x44, 0x20, 0xc4, 0x21, 0x9c },
{ 0x96, 0x69, 0x0, 0x20, 0x0, 0x2c, 0x3c, 0x26, 0x24, 0x22, 0x24, 0x20, 0x27, 0xff, 0x24, 0x20, 0x24, 0x20, 0x24, 0x70, 0x24, 0x50, 0x24, 0x50, 0x3c, 0xd8, 0x0, 0x88, 0x1, 0x8c, 0x3, 0x6, 0x6, 0x3 },
{ 0x96, 0x6a, 0x8, 0x0, 0x8, 0xff, 0x7f, 0x10, 0x8, 0x7e, 0x49, 0x42, 0x2b, 0x42, 0x2a, 0x7e, 0x8, 0x42, 0x7f, 0x42, 0x8, 0x7e, 0x8, 0x42, 0x1c, 0x42, 0x14, 0x7e, 0x36, 0x24, 0x23, 0x66, 0x60, 0xc3 },
{ 0x96, 0x6b, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x23, 0x7e, 0x2e, 0x2, 0x38, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe, 0x20, 0x3a, 0x21, 0x62, 0x33, 0x2, 0x1e, 0x2, 0x0 },
{ 0x96, 0x6c, 0x8, 0x50, 0xa, 0x52, 0x19, 0x54, 0x10, 0x50, 0x33, 0xfe, 0x30, 0x88, 0x50, 0x50, 0x13, 0xfe, 0x10, 0x20, 0x11, 0xfc, 0x10, 0x20, 0x17, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x17, 0x7 },
{ 0x96, 0x6d, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0xc0, 0x1, 0x70, 0x1, 0x18, 0x1, 0xc, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0 },
{ 0x96, 0x6e, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x12, 0x24, 0x60, 0x83, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x96, 0x6f, 0x10, 0x28, 0x11, 0x29, 0x10, 0xaa, 0x10, 0x28, 0x7d, 0xff, 0x10, 0x44, 0x10, 0x28, 0x11, 0xff, 0x1c, 0x10, 0x70, 0xfe, 0x10, 0x10, 0x11, 0xff, 0x10, 0x28, 0x10, 0x6c, 0x10, 0xc6, 0x31, 0x83 },
{ 0x96, 0x70, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x7f, 0x20, 0x8, 0x20, 0x8, 0x30, 0x1c, 0x38, 0x1a, 0x2c, 0x19, 0x26, 0x28, 0x23, 0x28, 0x20, 0x48, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20, 0x8, 0x20 },
{ 0x96, 0x71, 0x8, 0x40, 0x28, 0x40, 0x28, 0x40, 0x28, 0x7f, 0x3e, 0xc4, 0x68, 0x84, 0x49, 0x84, 0x8, 0x4c, 0xe, 0x68, 0x38, 0x28, 0x68, 0x38, 0x8, 0x10, 0x8, 0x38, 0x8, 0x6c, 0x8, 0xc6, 0x9, 0x83 },
{ 0x96, 0x72, 0x0, 0x20, 0x78, 0x20, 0x4b, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x7f, 0xff, 0x48, 0x88, 0x49, 0x88, 0x4f, 0xf, 0x78, 0x20, 0x48, 0x20, 0x4b, 0xfe, 0x48, 0x20, 0x78, 0x20, 0x0, 0x20, 0x7, 0xff },
{ 0x96, 0x73, 0x4, 0x10, 0x1c, 0x20, 0x71, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x7d, 0x2, 0x11, 0xfe, 0x38, 0x20, 0x34, 0xa4, 0x53, 0x2b, 0x50, 0x70, 0x13, 0xc4, 0x10, 0x39, 0x11, 0xc6, 0x10, 0x38, 0x13, 0xe0 },
{ 0x96, 0x74, 0x8, 0x0, 0x1c, 0x0, 0x16, 0x7f, 0x33, 0x41, 0x20, 0x41, 0x7e, 0x41, 0x48, 0x41, 0x8, 0x41, 0x7f, 0x41, 0x8, 0x41, 0x4a, 0x41, 0x6a, 0x41, 0x28, 0x41, 0xf, 0x41, 0x38, 0x7f, 0x60, 0x0 },
{ 0x96, 0x75, 0x8, 0x10, 0x8, 0x10, 0x7f, 0x90, 0x8, 0x10, 0x8, 0x7e, 0x7f, 0x92, 0x40, 0x92, 0x5e, 0x92, 0x2, 0x12, 0x4, 0x32, 0xf, 0xa2, 0x78, 0x22, 0x8, 0x66, 0x8, 0x44, 0x8, 0xc4, 0x39, 0x9c },
{ 0x96, 0x76, 0x0, 0x0, 0x31, 0xf8, 0x19, 0x8, 0x9, 0x8, 0x1, 0x8, 0x63, 0xf, 0x36, 0x0, 0x10, 0x0, 0x3, 0xfc, 0x9, 0x4, 0x9, 0x8c, 0x18, 0xd8, 0x10, 0x70, 0x30, 0xd8, 0x21, 0x8c, 0x67, 0x7 },
{ 0x96, 0x77, 0x0, 0x10, 0x7f, 0x10, 0x10, 0x30, 0x10, 0x24, 0x1e, 0x26, 0x12, 0x62, 0x12, 0x4f, 0x3a, 0xf9, 0x2e, 0x0, 0x64, 0x7e, 0x4, 0x42, 0xc, 0x42, 0x8, 0x42, 0x18, 0x42, 0x30, 0x42, 0x60, 0x7e },
{ 0x96, 0x78, 0x10, 0x0, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe, 0x7e, 0x0, 0x12, 0x10, 0x12, 0x92, 0x12, 0x92, 0x12, 0xfe, 0x12, 0x10, 0x1e, 0x10, 0x72, 0x92, 0x6, 0x92, 0x4, 0x92, 0xc, 0xfe },
{ 0x96, 0x79, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x7c, 0xfc, 0x54, 0x84, 0x54, 0xfc, 0x55, 0x22, 0x55, 0xa6, 0x54, 0xa4, 0x57, 0xff, 0x5c, 0x48, 0x10, 0x48, 0x10, 0x48, 0x10, 0xc9, 0x11, 0x89, 0x13, 0x7 },
{ 0x96, 0x7a, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x6, 0xb0, 0x1c, 0x9c, 0x77, 0xf7, 0x0, 0x80, 0x4, 0x90, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x10, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10 },
{ 0x96, 0x7b, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x67, 0xf3, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x96, 0x7c, 0x2, 0x0, 0xe, 0xef, 0x38, 0x21, 0x49, 0x21, 0x2a, 0xa9, 0x7f, 0x65, 0x1c, 0x21, 0x2a, 0x21, 0x49, 0x21, 0x0, 0x63, 0x3e, 0xa5, 0x2b, 0x29, 0x3e, 0x21, 0x2a, 0x21, 0x2a, 0x21, 0x3e, 0x67 },
{ 0x96, 0x7d, 0x0, 0x0, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x5, 0x90, 0x4, 0xd0, 0x4, 0x50, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0xc, 0x10, 0x8, 0x11, 0x18, 0x1b, 0x70, 0xe },
{ 0x96, 0x7e, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x38, 0xe, 0x6f, 0xfb, 0x1, 0x8, 0x3, 0x8, 0xe, 0x8, 0x38, 0x38, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x96, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x8, 0x3f, 0xbf, 0x26, 0xc, 0x2b, 0x1a, 0x32, 0xa9, 0x20, 0x1c, 0x27, 0xf0, 0x20, 0x40, 0x2f, 0xfe, 0x60, 0x40, 0x5f, 0xff, 0x40, 0x40, 0x1, 0xc0 },
{ 0x96, 0x81, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x8, 0x3f, 0xbf, 0x22, 0x8, 0x27, 0x1c, 0x2a, 0xaa, 0x32, 0x9, 0x20, 0x0, 0x3f, 0xff, 0x21, 0x0, 0x67, 0xfe, 0x5c, 0x2, 0x44, 0x2, 0x7, 0xfe },
{ 0x96, 0x82, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x8, 0x3f, 0xbf, 0x26, 0xc, 0x2b, 0x1a, 0x32, 0xa9, 0x27, 0xfc, 0x24, 0x44, 0x27, 0xfc, 0x24, 0x44, 0x27, 0xfc, 0x61, 0x2a, 0x43, 0x2e, 0x46, 0x31, 0x1c, 0x1f },
{ 0x96, 0x83, 0x0, 0x40, 0x0, 0x40, 0x3f, 0xff, 0x20, 0x0, 0x22, 0x8, 0x22, 0x8, 0x3f, 0xbf, 0x22, 0x8, 0x26, 0x1c, 0x27, 0x1c, 0x2a, 0xaa, 0x6a, 0x2a, 0x52, 0x49, 0x42, 0x8, 0x42, 0x8, 0x2, 0x8 },
{ 0x96, 0x84, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x7d, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x1d, 0xfe, 0x70, 0x20, 0x0, 0x20, 0x0, 0x20, 0x3, 0xff, 0x0, 0x0 },
{ 0x96, 0x85, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x7c, 0x10, 0x14, 0x10, 0x14, 0x10, 0x35, 0xff, 0x24, 0x54, 0x2c, 0x54, 0x28, 0x54, 0x78, 0x54, 0x14, 0xd6, 0x34, 0x92, 0x21, 0x93, 0x60, 0x10 },
{ 0x96, 0x86, 0x0, 0x20, 0x0, 0x20, 0x78, 0x20, 0x4b, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x7f, 0xff, 0x48, 0xa8, 0x48, 0xa8, 0x48, 0xa8, 0x49, 0xac, 0x79, 0x24, 0x3, 0x26, 0x6, 0x23, 0x0, 0x20 },
{ 0x96, 0x87, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7e, 0xff, 0x8, 0x84, 0x9, 0x84, 0x1c, 0x44, 0x1a, 0x4c, 0x1a, 0x68, 0x28, 0x28, 0x28, 0x38, 0x48, 0x10, 0x8, 0x38, 0x8, 0x6c, 0x8, 0xc6, 0x9, 0x83 },
{ 0x96, 0x88, 0x8, 0x0, 0x8, 0x0, 0x1f, 0xfe, 0x10, 0x0, 0x30, 0x0, 0x67, 0xf8, 0x4, 0x88, 0x4, 0x88, 0x4, 0x88, 0x7f, 0xff, 0x9, 0x8, 0x9, 0x8, 0x9, 0x8, 0xf, 0xff, 0x0, 0x10, 0x0, 0x70 },
{ 0x96, 0x89, 0x0, 0x0, 0x3, 0xfe, 0x7a, 0x22, 0x4a, 0x22, 0x4b, 0xfe, 0x4a, 0x22, 0x4a, 0x22, 0x4b, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x7b, 0xfe, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x7, 0xff, 0x0, 0x0 },
{ 0x96, 0x8a, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0x7e, 0x10, 0x8, 0xfe, 0x8, 0x82, 0x1c, 0xfe, 0x1a, 0x82, 0x1a, 0xfe, 0x28, 0x82, 0x28, 0xfe, 0x48, 0x0, 0x9, 0xff, 0x8, 0x44, 0x8, 0xc6, 0x9, 0x83 },
{ 0x96, 0x8b, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x0, 0x7f, 0xff, 0x4, 0x90, 0x1f, 0xfc, 0x68, 0x8b, 0x8, 0x88, 0x8, 0xb8, 0x0, 0x80 },
{ 0x96, 0x8c, 0x0, 0x44, 0x3c, 0x44, 0x25, 0xff, 0x24, 0x44, 0x24, 0x44, 0x3c, 0xfe, 0x24, 0x82, 0x24, 0xfe, 0x24, 0x82, 0x3c, 0xfe, 0x24, 0x10, 0x25, 0xff, 0x24, 0x28, 0x24, 0x6c, 0x64, 0xc6, 0x4d, 0x83 },
{ 0x96, 0x8d, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x7d, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x38, 0x20, 0x34, 0x20, 0x54, 0x70, 0x50, 0x50, 0x10, 0x50, 0x10, 0x50, 0x10, 0xd0, 0x10, 0x91, 0x11, 0x93, 0x13, 0xe },
{ 0x96, 0x8e, 0x10, 0x10, 0x1e, 0x10, 0x32, 0xff, 0x24, 0x20, 0x7e, 0x20, 0x2a, 0x7e, 0x2a, 0xc2, 0x3f, 0x42, 0x2a, 0x7e, 0x2a, 0x42, 0x3e, 0x42, 0x0, 0x7e, 0x55, 0x42, 0x55, 0x42, 0x54, 0x42, 0x40, 0x4e },
{ 0x96, 0x8f, 0x8, 0x0, 0x9, 0xfe, 0x8, 0x10, 0x7e, 0x10, 0x8, 0x10, 0x8, 0x90, 0x1c, 0x90, 0x1a, 0x9e, 0x1a, 0x90, 0x28, 0x90, 0x28, 0x90, 0x48, 0x90, 0x8, 0x90, 0x8, 0x90, 0xb, 0xff, 0x8, 0x0 },
{ 0x96, 0x90, 0x20, 0x82, 0x3c, 0x44, 0x25, 0xff, 0x48, 0x28, 0x3e, 0xfe, 0x2a, 0xaa, 0x2a, 0xce, 0x3e, 0x82, 0x2a, 0xfe, 0x2a, 0x82, 0x3e, 0xfe, 0x1, 0x4, 0x55, 0xff, 0x55, 0x44, 0x54, 0x24, 0x40, 0xc },
{ 0x96, 0x91, 0x11, 0x4, 0x11, 0x4, 0x11, 0x4, 0x7d, 0xc4, 0x11, 0x7f, 0x13, 0x54, 0x3a, 0x54, 0x37, 0x54, 0x51, 0xd4, 0x50, 0x94, 0x10, 0xbf, 0x11, 0x84, 0x11, 0x4, 0x13, 0x4, 0x12, 0x4, 0x16, 0x4 },
{ 0x96, 0x92, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0x2, 0x20, 0x12, 0x24, 0x12, 0x24, 0x32, 0x26, 0x22, 0x22, 0x62, 0x23, 0x6, 0x20, 0x4, 0x20, 0xc, 0x20, 0x18, 0x20, 0x30, 0xe0 },
{ 0x96, 0x93, 0x4, 0x0, 0x5, 0xfc, 0xd, 0x4, 0x9, 0x4, 0x19, 0x4, 0x11, 0xfc, 0x30, 0x0, 0x53, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x50, 0x10, 0xd8, 0x11, 0x8c, 0x13, 0x6, 0x16, 0x3 },
{ 0x96, 0x94, 0x0, 0x0, 0x3f, 0xfc, 0x4, 0x4, 0x4, 0x4, 0x6, 0xc, 0x2, 0x8, 0x2, 0x18, 0x3, 0x10, 0x1, 0x30, 0x1, 0xe0, 0x0, 0xc0, 0x1, 0xe0, 0x3, 0x30, 0x6, 0x18, 0x1c, 0xc, 0x70, 0x7 },
{ 0x96, 0x95, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x78, 0x20, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x18, 0xa8, 0x70, 0xa8, 0x10, 0xa8, 0x11, 0xac, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x30, 0x20 },
{ 0x96, 0x96, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80 },
{ 0x96, 0x97, 0x0, 0x20, 0x20, 0x20, 0x30, 0x20, 0x17, 0xff, 0x0, 0x20, 0x40, 0x20, 0x60, 0x20, 0x23, 0xfe, 0x0, 0xa8, 0x10, 0xa8, 0x10, 0xa8, 0x11, 0xac, 0x31, 0x24, 0x23, 0x26, 0x26, 0x23, 0x60, 0x20 },
{ 0x96, 0x98, 0x0, 0x80, 0x30, 0x80, 0x19, 0xff, 0xb, 0x0, 0x6, 0x0, 0x1, 0xfc, 0x0, 0x18, 0x78, 0x30, 0x8, 0x60, 0x8, 0xc0, 0x9, 0x80, 0x9, 0x2, 0x9, 0x86, 0x18, 0xfc, 0x34, 0x0, 0x63, 0xff },
{ 0x96, 0x99, 0x4, 0x0, 0x5, 0xfc, 0xd, 0x4, 0x9, 0x4, 0x19, 0x4, 0x11, 0xfc, 0x31, 0x10, 0x51, 0x18, 0x13, 0x8, 0x12, 0xcc, 0x16, 0x76, 0x1c, 0x13, 0x11, 0xc0, 0x10, 0x70, 0x10, 0x1c, 0x10, 0x4 },
{ 0x96, 0x9a, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x7f, 0xff, 0x49, 0x11, 0x51, 0x11, 0x75, 0x7d, 0x49, 0x55, 0x55, 0x55, 0x7f, 0x7d, 0x49, 0x11, 0x5d, 0x15, 0x6b, 0x1d, 0x49, 0x75, 0x41, 0x3 },
{ 0x96, 0x9b, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x8, 0x3f, 0xbf, 0x26, 0xc, 0x2b, 0x1a, 0x32, 0xa9, 0x20, 0x0, 0x27, 0xfc, 0x24, 0x4, 0x27, 0xfc, 0x60, 0x40, 0x4f, 0xfe, 0x48, 0x2, 0xf, 0xfe },
{ 0x96, 0x9c, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x2, 0x8, 0x6, 0x8, 0x4, 0x8, 0x4, 0x8, 0xc, 0x8, 0x8, 0x8, 0x18, 0x18, 0x30, 0x10, 0x60, 0x70 },
{ 0x96, 0x9d, 0x10, 0xfc, 0x10, 0x84, 0x10, 0xfc, 0x50, 0x84, 0x58, 0xfc, 0x54, 0x0, 0x53, 0xff, 0x12, 0x49, 0x13, 0xff, 0x10, 0x0, 0x13, 0xff, 0x10, 0x84, 0x10, 0x48, 0x10, 0x30, 0x10, 0xec, 0x13, 0x87 },
{ 0x96, 0x9e, 0x0, 0x88, 0x30, 0x88, 0x1b, 0xfe, 0x8, 0x88, 0x0, 0x88, 0x67, 0xff, 0x30, 0x20, 0x13, 0xfe, 0x2, 0x22, 0xa, 0xaa, 0xa, 0xaa, 0x1a, 0xaa, 0x12, 0xfa, 0x32, 0x2, 0x22, 0x2, 0x62, 0xe },
{ 0x96, 0x9f, 0x1, 0xf8, 0x21, 0x8, 0x31, 0xf8, 0x11, 0x8, 0x1, 0xf8, 0x40, 0x0, 0x67, 0xfe, 0x24, 0x92, 0x7, 0xfe, 0x10, 0x0, 0x17, 0xfe, 0x11, 0x4, 0x30, 0x98, 0x20, 0x70, 0x21, 0xdc, 0x67, 0x7 },
{ 0x96, 0xa0, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x6, 0x38, 0x1, 0xc0, 0xf, 0x78, 0x78, 0xf },
{ 0x96, 0xa1, 0x0, 0x20, 0x0, 0x20, 0x78, 0x20, 0x4b, 0xfe, 0x48, 0x20, 0x48, 0x20, 0x48, 0x20, 0x4f, 0xff, 0x48, 0xa8, 0x48, 0xa8, 0x49, 0xac, 0x79, 0x24, 0x3, 0x26, 0x6, 0x23, 0x0, 0x20, 0x0, 0x20 },
{ 0x96, 0xa2, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80 },
{ 0x96, 0xa3, 0x4, 0x8, 0x8, 0x8, 0x3f, 0x8, 0x29, 0x3e, 0x29, 0x8, 0x3f, 0x8, 0x29, 0x7f, 0x29, 0x8, 0x3f, 0x1c, 0x14, 0x1c, 0x14, 0xaa, 0x15, 0x9, 0x15, 0x48, 0x35, 0xc8, 0x26, 0x1, 0x63, 0xff },
{ 0x96, 0xa4, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x1, 0x18, 0x3, 0xf, 0xfe, 0x0, 0x0 },
{ 0x96, 0xa5, 0x8, 0x20, 0x8, 0x20, 0x1f, 0xbf, 0x34, 0x48, 0x62, 0x4, 0x4, 0x10, 0x3f, 0xfe, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x18, 0x38, 0xe },
{ 0x96, 0xa6, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x22, 0x55, 0x22, 0x55, 0x22, 0x55, 0xfe, 0x55, 0x22, 0x55, 0x22, 0x55, 0x22, 0x55, 0x22, 0x55, 0xfe, 0x7c, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20 },
{ 0x96, 0xa7, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x21, 0x2, 0x21, 0x82, 0x4, 0xa0, 0x14, 0x46, 0x34, 0x8b, 0x67, 0x19, 0x1d, 0xf0, 0x70, 0x0, 0x0, 0x80, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x96, 0xa8, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x21, 0x2, 0x24, 0x90, 0x14, 0x66, 0x35, 0x8b, 0xf, 0xf8, 0x78, 0x0, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x88, 0x3, 0xfc, 0x3e, 0x6 },
{ 0x96, 0xa9, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xfe, 0x8, 0x20, 0x1, 0xfc, 0x60, 0x50, 0x37, 0xff, 0x10, 0x88, 0x1, 0x4, 0x6, 0xfb, 0x8, 0x20, 0x1b, 0xfe, 0x10, 0x50, 0x30, 0xd8, 0x21, 0x8c, 0x67, 0x7 },
{ 0x96, 0xaa, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x1, 0x46, 0x6, 0x6c, 0x7c, 0x30, 0x7, 0x9c, 0x1c, 0x7 },
{ 0x96, 0xab, 0x4, 0x20, 0x1c, 0x70, 0x70, 0xd8, 0x11, 0x8e, 0x13, 0x3, 0x7c, 0xf8, 0x10, 0x0, 0x11, 0xfe, 0x38, 0x4, 0x34, 0x8, 0x54, 0x20, 0x50, 0x30, 0x11, 0x52, 0x11, 0x43, 0x13, 0x45, 0x12, 0x3c },
{ 0x96, 0xac, 0x0, 0xc, 0x3c, 0x38, 0x25, 0xe0, 0x25, 0x6, 0x25, 0x3c, 0x3d, 0x20, 0x25, 0x22, 0x25, 0x26, 0x25, 0x2c, 0x3d, 0x30, 0x25, 0x28, 0x25, 0x28, 0x25, 0x2c, 0x25, 0x24, 0x65, 0x26, 0x4e, 0x23 },
{ 0x96, 0xad, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x54, 0x7e, 0x54, 0x12, 0x56, 0x12, 0xd2, 0x12, 0x93, 0x32, 0x14, 0x26, 0x14, 0x24, 0x34, 0x7e, 0xc, 0xb, 0x8, 0x19, 0x18, 0x30, 0x30, 0x60, 0x60 },
{ 0x96, 0xae, 0x8, 0xc, 0x4a, 0x38, 0x6a, 0xe0, 0x2a, 0x20, 0x8, 0x20, 0x7e, 0x20, 0x9, 0xfe, 0x8, 0x20, 0x1c, 0x20, 0x1a, 0x20, 0x29, 0xfe, 0x28, 0x20, 0x48, 0x20, 0x8, 0x21, 0x8, 0x33, 0x8, 0x1e },
{ 0x96, 0xaf, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x80, 0x10, 0x80, 0x1f, 0xff, 0x10, 0x40, 0x10, 0x40, 0x10, 0x60, 0x10, 0x20, 0x13, 0xb1, 0x1e, 0x1b, 0x70, 0xe },
{ 0x96, 0xb0, 0x0, 0x0, 0x3d, 0xfe, 0x25, 0x2, 0x25, 0x2, 0x25, 0x2, 0x3d, 0xfe, 0x25, 0x10, 0x25, 0x10, 0x25, 0xff, 0x3d, 0x10, 0x25, 0x10, 0x25, 0x18, 0x25, 0x8, 0x3d, 0x6d, 0x1, 0xc7, 0x3, 0x2 },
{ 0x96, 0xb1, 0x0, 0x20, 0x7f, 0x20, 0x2, 0x7f, 0x14, 0x44, 0x18, 0xac, 0x8, 0x28, 0x7f, 0x10, 0x9, 0x6c, 0xa, 0xc7, 0x18, 0x20, 0x18, 0xfe, 0x28, 0x22, 0x28, 0x62, 0x48, 0x46, 0x8, 0xc4, 0x39, 0x8c },
{ 0x96, 0xb2, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xfc, 0x12, 0x24, 0x1f, 0xfc, 0x0, 0x0, 0x3f, 0xfe, 0x21, 0x2, 0x23, 0xfa, 0x6, 0x30, 0x1d, 0x60, 0x0, 0xc0, 0x3, 0x80, 0x1e, 0x0 },
{ 0x96, 0xb3, 0x8, 0x0, 0x8, 0x0, 0x1f, 0xfe, 0x39, 0x24, 0x69, 0x24, 0x9, 0x24, 0x7f, 0xff, 0x9, 0x24, 0x9, 0x24, 0x9, 0x24, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x96, 0xb4, 0x2, 0x0, 0x6, 0x8, 0x4, 0x8, 0x1f, 0xfc, 0x0, 0x4, 0x8, 0x80, 0x8, 0x80, 0x1f, 0xfc, 0x30, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x96, 0xb5, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x18, 0x3, 0x20, 0x1, 0xc0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0xc1, 0x1, 0xc2, 0x1, 0x44, 0x3, 0x40, 0x6, 0x40, 0xc, 0x40, 0x18, 0x40, 0x70, 0x40, 0x1, 0xc0 },
{ 0x96, 0xb6, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x0, 0x80, 0x1e, 0xbc, 0x0, 0x40, 0x3f, 0x7f, 0x2, 0xa4, 0x14, 0x18, 0x7f, 0x67, 0xd, 0x10, 0x14, 0xfe, 0x64, 0x22, 0xc, 0xce },
{ 0x96, 0xb7, 0x2, 0x88, 0x3a, 0x90, 0x2, 0x7e, 0x2, 0x42, 0x7f, 0x7e, 0x2, 0x42, 0xa, 0x7e, 0x2a, 0x40, 0x2e, 0x7f, 0x2a, 0x40, 0x2a, 0x7f, 0x2a, 0x1, 0x2a, 0xab, 0x3e, 0xa9, 0x62, 0x83, 0x1, 0x6 },
{ 0x96, 0xb8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7d, 0xff, 0x10, 0x0, 0x10, 0xfe, 0x38, 0x82, 0x34, 0x82, 0x34, 0x82, 0x50, 0xfe, 0x50, 0x10, 0x10, 0x92, 0x10, 0x92, 0x11, 0x93, 0x11, 0x11, 0x10, 0x70 },
{ 0x96, 0xb9, 0x8, 0x0, 0x9, 0xff, 0x8, 0x11, 0x8, 0x9e, 0x7e, 0x90, 0x12, 0xd0, 0x13, 0xbf, 0x12, 0x0, 0x32, 0xfe, 0x26, 0x82, 0x24, 0xfe, 0x7c, 0x82, 0xa, 0xfe, 0x1a, 0x82, 0x30, 0x82, 0x60, 0x86 },
{ 0x96, 0xba, 0x8, 0x10, 0x8, 0x10, 0x8, 0xfe, 0x8, 0x82, 0x7e, 0x82, 0x12, 0xfe, 0x12, 0x82, 0x12, 0x82, 0x32, 0xfe, 0x26, 0x91, 0x24, 0x93, 0x7c, 0x9a, 0xa, 0x88, 0x1a, 0x8c, 0x30, 0xf6, 0x63, 0x83 },
{ 0x96, 0xbb, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x27, 0xf2, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x2, 0x20, 0xe, 0x38, 0x38, 0xe },
{ 0x96, 0xbc, 0x1, 0x0, 0x1, 0x0, 0x3, 0xf8, 0x6, 0x8, 0xc, 0x18, 0x1b, 0x10, 0x71, 0xb0, 0x0, 0x60, 0x0, 0xc0, 0x3, 0xfe, 0xe, 0x2, 0x7a, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0xfe },
{ 0x96, 0xbd, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x73, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x7c, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x1f, 0x5c, 0x0, 0x40, 0x0, 0x40 },
{ 0x96, 0xbe, 0x0, 0x0, 0x0, 0xfe, 0x7c, 0x82, 0x44, 0x82, 0x44, 0x82, 0x44, 0xfe, 0x7c, 0x82, 0x44, 0x82, 0x44, 0x82, 0x44, 0xfe, 0x44, 0x82, 0x7c, 0x82, 0x1, 0x82, 0x1, 0x2, 0x3, 0x2, 0xe, 0xe },
{ 0x96, 0xbf, 0x0, 0x0, 0x3e, 0x7e, 0x22, 0x42, 0x22, 0x7e, 0x3e, 0x42, 0x22, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x3e, 0xc2, 0x1, 0x8e, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff },
{ 0x96, 0xc0, 0x0, 0x20, 0x32, 0x22, 0x1b, 0x26, 0x9, 0x24, 0x0, 0x20, 0x7, 0xff, 0x0, 0xa8, 0x78, 0xa8, 0x9, 0xac, 0x9, 0x24, 0xb, 0x26, 0xe, 0x23, 0x8, 0x20, 0x18, 0x20, 0x34, 0x0, 0x63, 0xff },
{ 0x96, 0xc1, 0x10, 0x40, 0x38, 0x40, 0x2c, 0x7c, 0x64, 0xc4, 0x40, 0x8c, 0x7d, 0xc8, 0x13, 0x58, 0x10, 0x30, 0x7c, 0x20, 0x10, 0x7e, 0x55, 0xc2, 0x54, 0x42, 0x50, 0x42, 0x1c, 0x42, 0x30, 0x42, 0x60, 0x7e },
{ 0x96, 0xc2, 0x0, 0x20, 0x0, 0x40, 0x79, 0xfc, 0x49, 0x4, 0x49, 0xfc, 0x49, 0x4, 0x49, 0xfc, 0x49, 0x0, 0x49, 0xff, 0x49, 0x0, 0x79, 0xfe, 0x0, 0x2, 0x5, 0x52, 0xd, 0x52, 0x8, 0x6, 0x0, 0xc },
{ 0x96, 0xc3, 0x8, 0x0, 0x9, 0xff, 0x8, 0x40, 0x8, 0x44, 0x7e, 0xc4, 0x12, 0x9e, 0x13, 0xf3, 0x12, 0x0, 0x36, 0x10, 0x24, 0x10, 0x24, 0xfe, 0x7e, 0x10, 0xb, 0x10, 0x19, 0x10, 0x30, 0x10, 0x61, 0xff },
{ 0x96, 0xc4, 0x4, 0x40, 0x14, 0x40, 0x14, 0x40, 0x14, 0x40, 0x3f, 0x46, 0x24, 0x5c, 0x64, 0x70, 0x4, 0x40, 0x7, 0x40, 0x1c, 0x40, 0x74, 0x40, 0x4, 0x40, 0x4, 0x40, 0x4, 0x41, 0x4, 0x63, 0x4, 0x3e },
{ 0x96, 0xc5, 0x0, 0xa, 0x20, 0x9, 0x30, 0x8, 0x17, 0xff, 0x4, 0x8, 0x47, 0xe8, 0x64, 0x9, 0x24, 0x89, 0x6, 0xab, 0x16, 0xaa, 0x14, 0x8e, 0x15, 0x44, 0x35, 0x44, 0x26, 0x2d, 0x24, 0x17, 0x68, 0x22 },
{ 0x96, 0xc6, 0x2, 0x0, 0x3, 0xf8, 0x6, 0x10, 0xc, 0x20, 0x38, 0x40, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x40, 0x2, 0x40, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x96, 0xc7, 0x8, 0x10, 0x8, 0x20, 0x8, 0xfe, 0x7e, 0x82, 0x8, 0xfe, 0x8, 0x82, 0x1c, 0x82, 0x1a, 0xfe, 0x1a, 0x10, 0x29, 0xff, 0x29, 0x11, 0x49, 0x11, 0x9, 0x11, 0x9, 0x17, 0x8, 0x10, 0x8, 0x10 },
{ 0x96, 0xc8, 0x8, 0x10, 0x18, 0x20, 0x10, 0xfe, 0x64, 0x82, 0x2c, 0xfe, 0x18, 0x82, 0x10, 0x82, 0x24, 0xfe, 0x7c, 0x10, 0x15, 0xff, 0x11, 0x11, 0x55, 0x11, 0x55, 0x11, 0x55, 0x17, 0x10, 0x10, 0x10, 0x10 },
{ 0x96, 0xc9, 0x8, 0x0, 0x1b, 0xff, 0x10, 0x20, 0x64, 0x40, 0x2d, 0xfe, 0x19, 0x4a, 0x11, 0x4a, 0x25, 0x7a, 0x7d, 0x4a, 0x15, 0x4a, 0x11, 0x7a, 0x55, 0x4a, 0x55, 0x4a, 0x55, 0x4a, 0x11, 0xfe, 0x10, 0x0 },
{ 0x96, 0xca, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x1, 0x0, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x0, 0x0 },
{ 0x96, 0xcb, 0x8, 0x0, 0x8, 0xff, 0x7f, 0x10, 0x8, 0x20, 0x3e, 0xfe, 0x8, 0xaa, 0x7f, 0xba, 0x10, 0xaa, 0x1e, 0xaa, 0x22, 0xba, 0x36, 0xaa, 0x5c, 0xaa, 0x8, 0xfe, 0x1c, 0x0, 0x37, 0x0, 0x61, 0xff },
{ 0x96, 0xcc, 0x10, 0x48, 0x10, 0x48, 0x13, 0xff, 0x10, 0x48, 0x7c, 0x48, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x1d, 0x2, 0x71, 0xfe, 0x10, 0x20, 0x13, 0xff, 0x10, 0x48, 0x10, 0xcc, 0x11, 0x86, 0x33, 0x3 },
{ 0x96, 0xcd, 0x10, 0x48, 0x10, 0x48, 0x13, 0xff, 0x7c, 0x48, 0x10, 0x48, 0x11, 0xfe, 0x39, 0x2, 0x35, 0xfe, 0x35, 0x2, 0x51, 0xfe, 0x50, 0x20, 0x13, 0xff, 0x10, 0x48, 0x10, 0xcc, 0x11, 0x86, 0x13, 0x3 },
{ 0x96, 0xce, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x54, 0x0, 0x42, 0x1f, 0xff, 0x10, 0x40, 0x10, 0x42, 0x10, 0x62, 0x10, 0x26, 0x10, 0x2c, 0x10, 0x38, 0x30, 0xf1, 0x27, 0x9b, 0x60, 0xe },
{ 0x96, 0xcf, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x8, 0x0, 0x8, 0x0, 0x8, 0x0, 0x7, 0xfc, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x30, 0xf, 0x60, 0x1, 0xc0, 0x7, 0x78, 0x3c, 0xe },
{ 0x96, 0xd0, 0x0, 0x0, 0x1f, 0xf8, 0x0, 0x30, 0x0, 0x40, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff, 0x0, 0x0 },
{ 0x96, 0xd1, 0x0, 0x18, 0x0, 0xf0, 0x1f, 0x80, 0x1, 0x0, 0x1, 0x0, 0x3f, 0xfe, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x83, 0x0, 0xfe },
{ 0x96, 0xd2, 0x4, 0x0, 0x45, 0xfe, 0x28, 0x4, 0x10, 0x8, 0x10, 0x10, 0x2b, 0xff, 0x48, 0x10, 0x8, 0x10, 0x18, 0x70, 0x18, 0x0, 0x29, 0xfe, 0x49, 0x52, 0x9, 0x52, 0x9, 0x52, 0x1b, 0xff, 0x70, 0x0 },
{ 0x96, 0xd3, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0xf, 0xfc, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x96, 0xd4, 0x8, 0x0, 0x19, 0xff, 0x11, 0x1, 0x65, 0x45, 0x2d, 0x29, 0x19, 0xff, 0x11, 0x11, 0x25, 0x11, 0x7d, 0xff, 0x15, 0x21, 0x11, 0x21, 0x55, 0x21, 0x55, 0x3d, 0x55, 0x1, 0x11, 0x1, 0x11, 0x7 },
{ 0x96, 0xd5, 0x8, 0x6, 0x8, 0x1c, 0x7f, 0x70, 0x8, 0x10, 0x8, 0x10, 0x3e, 0x7e, 0x8, 0x10, 0x8, 0x10, 0x7f, 0x10, 0x8, 0xff, 0x1c, 0x10, 0x1a, 0x10, 0x29, 0x10, 0x48, 0x11, 0x8, 0x1b, 0x8, 0xe },
{ 0x96, 0xd6, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0xfe, 0x20, 0x2, 0x2f, 0xfa, 0x0, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x6, 0x8c, 0x39, 0x58, 0x6, 0xf0, 0x39, 0x58, 0x6, 0x4c, 0x78, 0x47, 0x1, 0xc0 },
{ 0x96, 0xd7, 0x10, 0x12, 0x17, 0x92, 0x10, 0x3e, 0x1f, 0xd4, 0x30, 0x14, 0x27, 0x98, 0x20, 0x7f, 0x60, 0x10, 0x27, 0xa0, 0x20, 0x7e, 0x20, 0x22, 0x27, 0xa2, 0x24, 0xbe, 0x24, 0xa2, 0x24, 0xa2, 0x27, 0xbe },
{ 0x96, 0xd8, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x8, 0x88, 0x18, 0x8c, 0x30, 0x86, 0x60, 0x83, 0x0, 0x80, 0x0, 0x80 },
{ 0x96, 0xd9, 0x0, 0x8, 0x3f, 0x8a, 0x24, 0x89, 0x3f, 0x88, 0x24, 0xff, 0x24, 0x88, 0x3f, 0x9c, 0x4, 0x14, 0x3f, 0x94, 0x4, 0x36, 0x7, 0xa2, 0x7c, 0x63, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x96, 0xda, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0 },
{ 0x96, 0xdb, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x96, 0xdc, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfe, 0x9, 0x22, 0x19, 0x22, 0x11, 0x22, 0x33, 0x22, 0x62, 0x22, 0x6, 0x62, 0xc, 0x42, 0x18, 0xc2, 0x30, 0x82, 0x1, 0x86, 0x3, 0x4, 0xe, 0xc, 0x0, 0x38 },
{ 0x96, 0xdd, 0x8, 0x42, 0x1c, 0x66, 0x16, 0x24, 0x32, 0x0, 0x28, 0xff, 0x7e, 0x24, 0x22, 0x24, 0x3e, 0x24, 0x22, 0xff, 0x3e, 0x24, 0x20, 0x24, 0x22, 0x24, 0x22, 0x24, 0x2f, 0x64, 0x39, 0x44, 0x60, 0xc4 },
{ 0x96, 0xde, 0x0, 0x98, 0x0, 0x8c, 0x0, 0x84, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x1, 0xc0, 0x1, 0x40, 0x1, 0x40, 0x3, 0x40, 0x2, 0x40, 0x6, 0x40, 0xc, 0x41, 0x18, 0x63, 0x70, 0x3e },
{ 0x96, 0xdf, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x40, 0x10, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x10, 0xe0, 0x30, 0xb0, 0x21, 0x98, 0x63, 0xc, 0xe, 0x7 },
{ 0x96, 0xe0, 0x8, 0x0, 0x4a, 0xfe, 0x6a, 0x22, 0x2a, 0x22, 0x8, 0x22, 0x7f, 0x22, 0x8, 0xa2, 0x8, 0xa2, 0x1c, 0xe2, 0x1a, 0x42, 0x2a, 0x42, 0x28, 0xe2, 0x48, 0xa6, 0x8, 0xa4, 0x9, 0x84, 0xb, 0x1c },
{ 0x96, 0xe1, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0xf8, 0x8, 0x0, 0xf, 0xfc, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x10, 0x38, 0xe },
{ 0x96, 0xe2, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x20, 0x2, 0x23, 0xe2, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0xe2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x96, 0xe3, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x20, 0x82, 0x20, 0xc2, 0x21, 0x52, 0x25, 0x1a, 0x25, 0xa, 0x2d, 0x12, 0x28, 0xf2, 0x20, 0x2, 0x20, 0xe },
{ 0x96, 0xe4, 0x8, 0x10, 0x18, 0x10, 0x10, 0x10, 0x65, 0xff, 0x2c, 0x44, 0x18, 0x44, 0x10, 0x44, 0x22, 0x6c, 0x7e, 0x28, 0xa, 0x38, 0x8, 0x10, 0x2a, 0x38, 0x2a, 0x28, 0x6a, 0x6c, 0x48, 0xc6, 0x9, 0x83 },
{ 0x96, 0xe5, 0x0, 0x0, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x96, 0xe6, 0x8, 0x0, 0x8, 0x0, 0xf, 0xfc, 0x8, 0x84, 0x1c, 0x84, 0x14, 0x84, 0x36, 0x84, 0x62, 0x84, 0x3, 0x84, 0x1, 0xc, 0x3, 0x88, 0x6, 0xe8, 0xc, 0x38, 0x18, 0x1f, 0x70, 0x10, 0x0, 0xf0 },
{ 0x96, 0xe7, 0x0, 0x80, 0x8, 0x80, 0x8, 0x80, 0x8, 0x9c, 0x8, 0xf4, 0xb, 0xc4, 0xe, 0x84, 0x78, 0x84, 0x8, 0x84, 0x8, 0x84, 0x8, 0x9c, 0x8, 0x80, 0x8, 0x1, 0xc, 0x3, 0x7, 0xfe, 0x0, 0x0 },
{ 0x96, 0xe8, 0x0, 0x40, 0x0, 0x40, 0x30, 0xc4, 0x18, 0x86, 0x9, 0x82, 0x1, 0x3f, 0x7, 0xe1, 0x0, 0x0, 0x8, 0x0, 0x9, 0xfe, 0x19, 0x2, 0x11, 0x2, 0x31, 0x2, 0x21, 0x2, 0x61, 0x2, 0x1, 0xfe },
{ 0x96, 0xe9, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x40, 0x4, 0x40, 0xc, 0xfc, 0x8, 0x84, 0x19, 0xcc, 0x33, 0x28, 0x56, 0x98, 0x10, 0x70, 0x10, 0x20, 0x10, 0x70, 0x11, 0xdc, 0x17, 0x7 },
{ 0x96, 0xea, 0x2, 0x20, 0xe, 0x38, 0x39, 0x4e, 0x0, 0x80, 0x7, 0x70, 0x7c, 0x1f, 0x0, 0x0, 0x7f, 0xbe, 0x11, 0x22, 0x1f, 0x24, 0x11, 0x28, 0x1f, 0x24, 0x11, 0x22, 0x1f, 0x22, 0x71, 0x2e, 0x1, 0x20 },
{ 0x96, 0xeb, 0x0, 0x0, 0x7f, 0xbf, 0x11, 0x21, 0x11, 0x23, 0x1f, 0x22, 0x11, 0x26, 0x11, 0x24, 0x11, 0x22, 0x1f, 0x21, 0x11, 0x21, 0x11, 0x21, 0x11, 0x21, 0x1f, 0x27, 0x71, 0x20, 0x1, 0x20, 0x1, 0x20 },
{ 0x96, 0xec, 0x0, 0x0, 0x7f, 0x7e, 0x49, 0x2, 0x49, 0x4, 0x7f, 0x28, 0x49, 0x10, 0x49, 0xff, 0x7f, 0x11, 0x8, 0x12, 0x8, 0x10, 0x7f, 0x10, 0x8, 0x10, 0x8, 0x10, 0xf, 0x10, 0x78, 0x10, 0x0, 0x70 },
{ 0x96, 0xed, 0x0, 0x40, 0x7c, 0x40, 0x4, 0x40, 0x4, 0xff, 0x4, 0x90, 0x3d, 0x90, 0x20, 0x10, 0x20, 0x10, 0x20, 0x92, 0x3c, 0x92, 0x4, 0x92, 0x5, 0x93, 0x5, 0x11, 0xc, 0x10, 0x8, 0x10, 0x38, 0x70 },
{ 0x96, 0xee, 0x4, 0x0, 0x4, 0x0, 0xf, 0xfc, 0x8, 0x80, 0x18, 0x80, 0x30, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x40, 0x1, 0x40, 0x3, 0x60, 0x2, 0x20, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x70, 0x7 },
{ 0x96, 0xef, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x10, 0x0, 0x13, 0xf8, 0x12, 0x8, 0x12, 0x8, 0x12, 0x8, 0x12, 0x8, 0x12, 0x8, 0x12, 0x38, 0x12, 0x0, 0x32, 0x0, 0x22, 0x1, 0x63, 0x3, 0x1, 0xfe },
{ 0x96, 0xf0, 0x4, 0x0, 0xc, 0xf8, 0x18, 0x88, 0x30, 0x88, 0x64, 0x88, 0xd, 0x8f, 0x1b, 0x0, 0x30, 0x0, 0x71, 0xfc, 0x10, 0x84, 0x10, 0xcc, 0x10, 0x58, 0x10, 0x30, 0x10, 0x78, 0x10, 0xcc, 0x13, 0x87 },
{ 0x96, 0xf1, 0x8, 0x40, 0x18, 0x40, 0x30, 0x40, 0x62, 0xfe, 0x36, 0x82, 0xd, 0x82, 0x18, 0x2, 0x32, 0x62, 0x7f, 0x32, 0x9, 0x12, 0x8, 0x2, 0x2a, 0x2, 0x2b, 0x2, 0x69, 0x6, 0x48, 0x4, 0x8, 0x1c },
{ 0x96, 0xf2, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x1, 0x0, 0x33, 0xe6, 0x1a, 0x2c, 0x3, 0xe0, 0x1a, 0x2c, 0x33, 0xe6, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x96, 0xf3, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0x82, 0x7e, 0x82, 0x0, 0x82, 0x3c, 0x82, 0x0, 0xfe, 0x0, 0x90, 0x3c, 0x90, 0x0, 0x98, 0x0, 0x88, 0x3c, 0x88, 0x24, 0x8c, 0x24, 0x84, 0x25, 0x86, 0x3d, 0x3 },
{ 0x96, 0xf4, 0x0, 0x0, 0x3e, 0xef, 0x22, 0x21, 0x22, 0xef, 0x22, 0x21, 0x3e, 0xef, 0x8, 0x48, 0x8, 0x90, 0x29, 0xff, 0x2e, 0x90, 0x28, 0xfe, 0x28, 0x90, 0x28, 0xfe, 0x2e, 0x90, 0x38, 0x90, 0x60, 0xff },
{ 0x96, 0xf5, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x7e, 0x10, 0x0, 0xfe, 0x44, 0x10, 0x45, 0xff, 0x64, 0x0, 0x2c, 0xfe, 0x28, 0x82, 0x8, 0xfe, 0x1e, 0x82, 0x70, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x0, 0x8e },
{ 0x96, 0xf6, 0x10, 0x20, 0x10, 0x60, 0x11, 0xcf, 0x7d, 0x29, 0x11, 0x29, 0x11, 0x29, 0x39, 0x29, 0x35, 0x29, 0x55, 0x29, 0x51, 0x29, 0x11, 0x29, 0x11, 0xe9, 0x13, 0x2f, 0x10, 0x28, 0x10, 0x68, 0x10, 0xc8 },
{ 0x96, 0xf7, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x4, 0x10, 0x24, 0x90, 0x15, 0x3f, 0x7f, 0xa4, 0xe, 0x64, 0x15, 0x14, 0x64, 0xd4, 0x8, 0x1c, 0x7f, 0xc8, 0x11, 0x1c, 0x3a, 0x14, 0xc, 0x36, 0x73, 0x63 },
{ 0x96, 0xf8, 0x10, 0x8, 0x39, 0x3e, 0x29, 0xaa, 0x6c, 0xbe, 0x0, 0x8, 0x7c, 0x7f, 0x10, 0x0, 0x13, 0xbe, 0x7c, 0xa2, 0x10, 0xbe, 0x54, 0xa0, 0x54, 0xbe, 0x50, 0xa2, 0x1d, 0xbe, 0x31, 0x40, 0x63, 0x3f },
{ 0x96, 0xf9, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x15, 0x8c, 0x57, 0x7, 0x54, 0xf8, 0x50, 0x0, 0x53, 0xc2, 0x12, 0x52, 0x13, 0xd2, 0x12, 0x52, 0x13, 0xd2, 0x12, 0x52, 0x12, 0x42, 0x12, 0x42, 0x12, 0xce },
{ 0x96, 0xfa, 0x0, 0x80, 0x3, 0xe0, 0xe, 0x38, 0x79, 0xcf, 0x0, 0x0, 0x1f, 0x4, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x24, 0x1f, 0x24, 0x11, 0x4, 0x13, 0x1c, 0x0, 0xc0, 0x12, 0x66, 0x32, 0xb, 0x61, 0xf9 },
{ 0x96, 0xfb, 0x0, 0x20, 0x30, 0x20, 0x18, 0x20, 0x8, 0x20, 0x3, 0xfe, 0x62, 0x22, 0x32, 0x22, 0x12, 0x22, 0x2, 0x22, 0xb, 0xfe, 0xa, 0x22, 0x1a, 0x22, 0x12, 0x22, 0x32, 0x22, 0x23, 0xfe, 0x60, 0x0 },
{ 0x96, 0xfc, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x51, 0xb0, 0x3e, 0xef, 0x10, 0x0, 0x17, 0xd2, 0x14, 0x52, 0x37, 0xd2, 0x54, 0x52, 0x17, 0xd2, 0x14, 0x46, 0x30, 0x0, 0x25, 0x42, 0x6d, 0x2b, 0x9, 0xf9 },
{ 0x97, 0x40, 0x0, 0x10, 0x3c, 0x38, 0x0, 0x6c, 0x7e, 0xc6, 0x1, 0xbb, 0x3c, 0x0, 0x1, 0xe2, 0x1, 0x2a, 0x3d, 0x2a, 0x1, 0xea, 0x1, 0x2a, 0x3d, 0x2a, 0x25, 0xe2, 0x25, 0x22, 0x25, 0x22, 0x3d, 0x6e },
{ 0x97, 0x41, 0x10, 0x10, 0x10, 0x38, 0x7c, 0x6c, 0x10, 0xc6, 0x7d, 0xbb, 0x54, 0x0, 0x55, 0xe2, 0x7d, 0x2a, 0x55, 0x2a, 0x55, 0xea, 0x7d, 0x2a, 0x11, 0x2a, 0x7d, 0xe2, 0x11, 0x22, 0x11, 0x22, 0x11, 0x6e },
{ 0x97, 0x42, 0x0, 0x44, 0x0, 0xcc, 0x3c, 0x88, 0x25, 0xff, 0x27, 0x10, 0x25, 0x10, 0x25, 0x10, 0x25, 0xfe, 0x25, 0x10, 0x25, 0x10, 0x25, 0x10, 0x3d, 0xfe, 0x1, 0x10, 0x1, 0x10, 0x1, 0x10, 0x1, 0xff },
{ 0x97, 0x43, 0x4, 0x20, 0x4, 0x20, 0xc, 0x20, 0xb, 0xff, 0x18, 0x40, 0x10, 0x40, 0x30, 0xc0, 0x50, 0x80, 0x11, 0xfe, 0x13, 0x82, 0x16, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x97, 0x44, 0xb, 0xff, 0x8, 0x20, 0x19, 0xfc, 0x11, 0x4, 0x31, 0xfc, 0x31, 0x4, 0x57, 0xff, 0x14, 0x21, 0x12, 0x92, 0x12, 0x85, 0x14, 0x7c, 0x10, 0x80, 0x11, 0xfc, 0x16, 0x84, 0x10, 0x78, 0x17, 0x87 },
{ 0x97, 0x45, 0x1f, 0xf8, 0x2, 0x30, 0x1, 0x40, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xfe, 0x1, 0x2, 0x3, 0x2, 0xe, 0x6, 0x38, 0x1c },
{ 0x97, 0x46, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x1, 0x0, 0x3, 0xf8, 0x2, 0x8, 0x7, 0x18, 0x5, 0x10, 0xd, 0xb0, 0x18, 0xe0, 0x30, 0x70, 0x60, 0xd8, 0x3, 0x8c, 0xe, 0x7 },
{ 0x97, 0x47, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x21, 0x2, 0x7f, 0xff, 0x1, 0x0, 0x2, 0x0, 0x7, 0xfc, 0xe, 0x4, 0x1b, 0xfc, 0x72, 0x4, 0x3, 0xfc, 0x2, 0x4, 0x2, 0x4, 0x2, 0x1c },
{ 0x97, 0x48, 0x0, 0x80, 0x24, 0x92, 0x24, 0x92, 0x28, 0xa2, 0x28, 0xa2, 0x32, 0xca, 0x2a, 0xaa, 0x24, 0x92, 0x24, 0x92, 0x28, 0xa2, 0x2a, 0xaa, 0x2e, 0xbe, 0x3a, 0xe6, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe },
{ 0x97, 0x49, 0x4, 0x40, 0xc, 0x40, 0x8, 0xff, 0x18, 0x84, 0x15, 0x4c, 0x34, 0x58, 0x54, 0x30, 0x14, 0x38, 0x10, 0x6c, 0x11, 0xc7, 0x0, 0x0, 0x1, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x97, 0x4a, 0x7f, 0xff, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x41, 0x1, 0x54, 0x89, 0x14, 0x14, 0x27, 0xf2, 0x2, 0x0, 0x7, 0xf8, 0x3c, 0x10, 0x3, 0xe0, 0x7c, 0x1f },
{ 0x97, 0x4b, 0x10, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x7d, 0xfc, 0x10, 0x0, 0x17, 0xff, 0x11, 0x4, 0x1d, 0xfc, 0x71, 0x4, 0x11, 0xfc, 0x11, 0x7, 0x11, 0xfc, 0x17, 0x4, 0x10, 0x4, 0x30, 0x4 },
{ 0x97, 0x4c, 0x1, 0x0, 0x1, 0x0, 0x7f, 0xff, 0x1, 0x0, 0x3, 0x0, 0x3, 0xfc, 0x6, 0x4, 0xe, 0x4, 0x1b, 0xfc, 0x32, 0x4, 0x62, 0x4, 0x3, 0xfc, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x1c },
{ 0x97, 0x4d, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0x10, 0x8, 0xff, 0x8, 0x91, 0x1c, 0x91, 0x1a, 0x91, 0x1a, 0x91, 0x28, 0xff, 0x28, 0x91, 0x48, 0x91, 0x8, 0x91, 0x8, 0x91, 0x8, 0x91, 0x8, 0xff },
{ 0x97, 0x4e, 0x3, 0xfe, 0x30, 0x84, 0x18, 0x48, 0xb, 0xfe, 0x2, 0x22, 0x62, 0x22, 0x33, 0xfe, 0x12, 0x22, 0x2, 0x22, 0xb, 0xfe, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x41, 0x30, 0xc3, 0x21, 0x82, 0x67, 0xe },
{ 0x97, 0x4f, 0x0, 0x0, 0x37, 0xfe, 0x18, 0x4, 0x8, 0x88, 0x0, 0x50, 0x63, 0xfe, 0x32, 0x22, 0x12, 0x22, 0x3, 0xfe, 0xa, 0x22, 0xa, 0x22, 0x1b, 0xfe, 0x12, 0x22, 0x32, 0x22, 0x22, 0x22, 0x62, 0x2e },
{ 0x97, 0x50, 0x5, 0x4, 0x45, 0x8c, 0x28, 0x88, 0x17, 0xff, 0x10, 0x50, 0x28, 0x50, 0x4b, 0xfe, 0xa, 0x52, 0x1a, 0x52, 0x1a, 0x9e, 0x2b, 0x2, 0x4a, 0x2, 0xb, 0xfe, 0xa, 0x2, 0x1a, 0x2, 0x73, 0xfe },
{ 0x97, 0x51, 0x20, 0x88, 0x31, 0x8c, 0x11, 0xa, 0x7f, 0xca, 0xa, 0x8, 0xa, 0x7f, 0x3f, 0x88, 0x2a, 0x88, 0x2a, 0x88, 0x2b, 0x88, 0x30, 0x9c, 0x20, 0x94, 0x3f, 0x94, 0x20, 0xb6, 0x3f, 0xa2, 0x0, 0x63 },
{ 0x97, 0x52, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x0 },
{ 0x97, 0x53, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x7d, 0xff, 0x4, 0x20, 0xc, 0x60, 0x8, 0x40, 0x18, 0x40, 0x10, 0xfe, 0x38, 0xc2, 0x55, 0x42, 0x12, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x7e },
{ 0x97, 0x54, 0x10, 0x44, 0x10, 0x44, 0x10, 0xc6, 0x7d, 0x93, 0x4, 0x38, 0xc, 0x6c, 0x8, 0xc6, 0x19, 0x83, 0x14, 0x0, 0x38, 0xfe, 0x54, 0x82, 0x12, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x10, 0xfe },
{ 0x97, 0x55, 0x0, 0x6, 0x3c, 0x1c, 0x0, 0xf0, 0x7e, 0x10, 0x1, 0xff, 0x3c, 0x54, 0x0, 0xd6, 0x1, 0x93, 0x3c, 0x0, 0x0, 0xfc, 0x0, 0x24, 0x3c, 0x27, 0x24, 0x61, 0x24, 0x41, 0x24, 0xc1, 0x3d, 0x87 },
{ 0x97, 0x56, 0x1, 0x10, 0x21, 0x10, 0x31, 0x10, 0x17, 0xff, 0x1, 0x20, 0x1, 0x1e, 0x1, 0xc2, 0x71, 0x44, 0x11, 0x44, 0x11, 0x5f, 0x13, 0x44, 0x12, 0x44, 0x12, 0x44, 0x36, 0xdc, 0x28, 0x0, 0x67, 0xff },
{ 0x97, 0x57, 0x7, 0xf0, 0x4, 0x10, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x1, 0x18, 0x3, 0xf, 0xfe },
{ 0x97, 0x58, 0x1, 0x80, 0x7, 0x1f, 0x3c, 0x11, 0x4, 0x13, 0x3f, 0xd2, 0x14, 0x96, 0x14, 0x94, 0x7f, 0xf2, 0x14, 0x91, 0x14, 0x91, 0x3f, 0xd1, 0x4, 0x11, 0x4, 0x17, 0x5, 0x90, 0xf, 0x10, 0x38, 0x10 },
{ 0x97, 0x59, 0x10, 0x22, 0x10, 0x26, 0x10, 0x24, 0x10, 0x7f, 0x7f, 0x48, 0x10, 0xc8, 0x11, 0x48, 0x14, 0x7e, 0x14, 0x48, 0x34, 0x48, 0x24, 0x48, 0x2c, 0x7e, 0x28, 0x48, 0x6a, 0x48, 0x1f, 0x48, 0x31, 0x7f },
{ 0x97, 0x5a, 0x0, 0x8, 0x7f, 0x8, 0x0, 0x8, 0x3e, 0x7f, 0x22, 0x49, 0x3e, 0x49, 0x0, 0x49, 0x7f, 0x49, 0x55, 0x7f, 0x55, 0x8, 0x67, 0x8, 0x41, 0x8, 0x5d, 0xa, 0x49, 0xa, 0x49, 0x1f, 0x4b, 0x71 },
{ 0x97, 0x5b, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0xfc, 0x2, 0x4, 0x6, 0x4, 0xc, 0xc, 0x1b, 0x8, 0x31, 0x98, 0x0, 0xd0, 0x0, 0x30, 0x0, 0x60, 0x0, 0xc0, 0x3, 0x80, 0xe, 0x0, 0x78, 0x0 },
{ 0x97, 0x5c, 0x0, 0x0, 0x1f, 0xf8, 0x0, 0x10, 0x6, 0x20, 0x3, 0x40, 0x1, 0x80, 0x7f, 0xff, 0x0, 0x81, 0x0, 0x82, 0x0, 0x84, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x97, 0x5d, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x80, 0x8, 0x88, 0x8, 0x88, 0x18, 0x8c, 0x30, 0x86, 0x3, 0x80 },
{ 0x97, 0x5e, 0x4, 0x0, 0x4, 0x0, 0x7, 0xf0, 0x4, 0x0, 0x4, 0x0, 0x7, 0xe0, 0x0, 0x20, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x60, 0x0, 0x40, 0x0, 0xc0, 0x3, 0x80 },
{ 0x97, 0x5f, 0x11, 0x4, 0x8, 0x88, 0x7f, 0xff, 0x4, 0x10, 0xd, 0xd8, 0x8, 0x8, 0x3f, 0xfe, 0x60, 0x3, 0x7, 0xf0, 0x0, 0x0, 0x7, 0xf0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x97, 0x60, 0xc, 0x0, 0x38, 0x9e, 0x23, 0xe2, 0x20, 0x82, 0x3b, 0xee, 0x22, 0xa2, 0x23, 0xe2, 0x22, 0xa2, 0x3b, 0xee, 0x20, 0x82, 0x23, 0xe2, 0x20, 0x82, 0x7f, 0xff, 0x4, 0x10, 0x1c, 0x1c, 0x70, 0x7 },
{ 0x97, 0x61, 0x0, 0x0, 0x7e, 0xff, 0x2, 0x10, 0x34, 0x7e, 0x18, 0x42, 0x8, 0x42, 0x7f, 0x7e, 0x9, 0x42, 0xb, 0x42, 0xa, 0x7e, 0x8, 0x42, 0x8, 0x42, 0x8, 0x7e, 0x8, 0x24, 0x8, 0x66, 0x38, 0xc3 },
{ 0x97, 0x62, 0x8, 0x10, 0xb, 0xff, 0x1a, 0x10, 0x12, 0xfe, 0x32, 0x12, 0x33, 0xff, 0x52, 0x12, 0x12, 0xfe, 0x12, 0x10, 0x12, 0xfe, 0x12, 0x92, 0x16, 0xfe, 0x14, 0x92, 0x1c, 0xfe, 0x10, 0x92, 0x10, 0x96 },
{ 0x97, 0x63, 0x4, 0x20, 0xc, 0x20, 0x8, 0x20, 0x18, 0x20, 0x12, 0xfe, 0x32, 0x22, 0x66, 0x22, 0x34, 0x22, 0x1c, 0x22, 0x8, 0x22, 0x1a, 0x22, 0x12, 0x62, 0x17, 0x42, 0x3d, 0x46, 0x60, 0xc4, 0x1, 0x9c },
{ 0x97, 0x64, 0x8, 0x6, 0x8, 0x1c, 0x8, 0xf0, 0x8, 0x10, 0x7e, 0x10, 0x12, 0x10, 0x13, 0xff, 0x12, 0x10, 0x36, 0x10, 0x24, 0x38, 0x24, 0x28, 0x7e, 0x28, 0xb, 0x6c, 0x19, 0x44, 0x30, 0xc6, 0x61, 0x83 },
{ 0x97, 0x65, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x24, 0x12, 0xc, 0x98, 0x39, 0xce, 0x3, 0x60, 0x6, 0x30, 0x1c, 0x1c, 0x70, 0x7, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x97, 0x66, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x40, 0x17, 0xfc, 0x10, 0x44, 0x1f, 0xff, 0x10, 0x44, 0x17, 0xfc, 0x10, 0x40, 0x17, 0xfc, 0x14, 0x44, 0x17, 0xfc, 0x34, 0x44, 0x27, 0xfc, 0x64, 0x44, 0x4, 0x4c },
{ 0x97, 0x67, 0x10, 0x0, 0x10, 0xfc, 0x10, 0x84, 0x10, 0xfc, 0x7c, 0x84, 0x10, 0x84, 0x10, 0xfc, 0x10, 0x0, 0x1b, 0xff, 0x70, 0x80, 0x11, 0xfe, 0x13, 0x2a, 0x10, 0x4a, 0x11, 0x92, 0x10, 0x26, 0x30, 0xcc },
{ 0x97, 0x68, 0x10, 0x6, 0x10, 0x3c, 0x17, 0xe2, 0x12, 0x46, 0x79, 0x24, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x20, 0x18, 0x20, 0x77, 0xff, 0x10, 0x20, 0x10, 0x20, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x33, 0xfe },
{ 0x97, 0x69, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x92, 0x79, 0x94, 0x11, 0x3f, 0x16, 0x64, 0x12, 0xa4, 0x19, 0xbe, 0x73, 0x24, 0x12, 0xa4, 0x17, 0xbe, 0x10, 0xa4, 0x11, 0xa4, 0x13, 0x24, 0x36, 0x3f },
{ 0x97, 0x6a, 0x0, 0x0, 0x3, 0xdf, 0x78, 0x41, 0x4b, 0xdf, 0x48, 0x41, 0x4b, 0xdf, 0x48, 0x88, 0x79, 0x10, 0x4b, 0xff, 0x4d, 0x10, 0x49, 0xfe, 0x49, 0x10, 0x79, 0xfe, 0x1, 0x10, 0x1, 0x10, 0x1, 0xff },
{ 0x97, 0x6b, 0x8, 0x0, 0x8, 0xfc, 0x8, 0x84, 0x7e, 0xfc, 0x8, 0x84, 0x8, 0x84, 0x1c, 0xfc, 0x1a, 0x0, 0x1b, 0xff, 0x28, 0x80, 0x29, 0xff, 0x4b, 0x29, 0x8, 0x49, 0x9, 0x93, 0x8, 0x22, 0x8, 0xce },
{ 0x97, 0x6c, 0x11, 0x4, 0x10, 0x88, 0x13, 0xfe, 0x7c, 0x20, 0x11, 0xfc, 0x10, 0x20, 0x38, 0x20, 0x37, 0xff, 0x30, 0x20, 0x53, 0x23, 0x51, 0xb6, 0x10, 0x38, 0x10, 0xec, 0x13, 0xa6, 0x16, 0x23, 0x10, 0xe0 },
{ 0x97, 0x6d, 0x1, 0x4, 0x31, 0x8c, 0x18, 0x88, 0xb, 0xfe, 0x0, 0x20, 0x60, 0x20, 0x30, 0x20, 0x11, 0xfc, 0x0, 0x20, 0x8, 0x20, 0x8, 0x20, 0x1b, 0xff, 0x10, 0x20, 0x30, 0x20, 0x20, 0x20, 0x60, 0x20 },
{ 0x97, 0x6e, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xfe, 0xa, 0x2, 0x2, 0x8a, 0x61, 0x8c, 0x33, 0x26, 0x10, 0x70, 0x0, 0xd8, 0x9, 0x8c, 0xf, 0x7, 0x19, 0xfc, 0x11, 0x4, 0x31, 0x4, 0x21, 0x4, 0x61, 0xfc },
{ 0x97, 0x6f, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0xb, 0x1, 0x2d, 0x45, 0x28, 0xc6, 0x69, 0x93, 0x48, 0x38, 0x8, 0x6c, 0x9, 0xc7, 0x8, 0x0, 0x1c, 0xfe, 0x14, 0x82, 0x16, 0x82, 0x32, 0x82, 0x60, 0xfe },
{ 0x97, 0x70, 0x0, 0x0, 0x1f, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x1f, 0xfe, 0x10, 0x82, 0x10, 0x82, 0x10, 0x82, 0x30, 0x82, 0x20, 0x82, 0x60, 0x8e },
{ 0x97, 0x71, 0x0, 0x80, 0x3f, 0xfe, 0x22, 0x22, 0x26, 0x22, 0x7c, 0x3f, 0x8, 0x8, 0x4, 0x10, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x12, 0x24, 0x33, 0x36, 0x61, 0x13 },
{ 0x97, 0x72, 0x8, 0x8, 0xc, 0x18, 0x4, 0x10, 0x3f, 0xfe, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x97, 0x73, 0x10, 0x0, 0x11, 0xde, 0x54, 0x42, 0x55, 0xde, 0x54, 0x42, 0x11, 0xde, 0x10, 0x48, 0x7c, 0x90, 0x29, 0xff, 0x2a, 0x90, 0x28, 0xfe, 0x28, 0x90, 0x2a, 0xfe, 0x2c, 0x90, 0x68, 0x90, 0x40, 0xff },
{ 0x97, 0x74, 0x2, 0x20, 0x7f, 0xff, 0x2, 0x20, 0x8, 0x88, 0x7f, 0xff, 0x8, 0x88, 0x8, 0xf8, 0x8, 0x0, 0xf, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x97, 0x75, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x24, 0x12, 0xc, 0x98, 0x39, 0xce, 0x7, 0x70, 0x1c, 0x1c, 0x70, 0x7, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8 },
{ 0x97, 0x76, 0x0, 0x0, 0x7f, 0xff, 0x2, 0x40, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x12, 0x44, 0x1f, 0xfc, 0x1, 0x0, 0x7f, 0xff, 0x2, 0x10, 0x4, 0x30, 0xf, 0x60, 0x1, 0xc0, 0x7, 0x78, 0x3c, 0xe },
{ 0x97, 0x77, 0x0, 0x6, 0x3c, 0x1c, 0x0, 0xf0, 0x7e, 0x0, 0x1, 0x22, 0x3c, 0x94, 0x0, 0x0, 0x0, 0xfe, 0x3c, 0x10, 0x0, 0x10, 0x1, 0xff, 0x3c, 0x10, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x3c, 0xfe },
{ 0x97, 0x78, 0x0, 0x0, 0x3e, 0xfe, 0x22, 0x4, 0x22, 0x68, 0x22, 0x10, 0x3e, 0xff, 0x8, 0x91, 0x28, 0x91, 0x28, 0xff, 0x2e, 0x91, 0x28, 0x91, 0x28, 0xff, 0x28, 0x91, 0x2e, 0x91, 0x38, 0x91, 0x60, 0x93 },
{ 0x97, 0x79, 0x0, 0xe, 0x33, 0xf8, 0x18, 0x0, 0xa, 0x42, 0x1, 0x24, 0x0, 0x0, 0x3, 0xfe, 0x70, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x12, 0x22, 0x12, 0x22, 0x33, 0xfe, 0x28, 0x0, 0x67, 0xff },
{ 0x97, 0x7a, 0x0, 0x0, 0x3e, 0xfc, 0x22, 0x84, 0x26, 0xfc, 0x24, 0x84, 0x2c, 0x84, 0x28, 0xfc, 0x28, 0x0, 0x27, 0xff, 0x24, 0x80, 0x24, 0xfe, 0x25, 0x2a, 0x2c, 0x4a, 0x21, 0x92, 0x20, 0x26, 0x20, 0xcc },
{ 0x97, 0x7b, 0x4, 0x10, 0x2, 0x20, 0x3f, 0xfe, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x4, 0x90, 0xf, 0xf8, 0x14, 0x14, 0x67, 0xf3, 0x4, 0x10, 0x7, 0xf4, 0x4, 0x48, 0xf, 0x70, 0x38, 0x1f },
{ 0x97, 0x7c, 0x12, 0x10, 0x13, 0x10, 0x35, 0xbf, 0x6e, 0x29, 0x1b, 0x6a, 0x31, 0x88, 0x7f, 0x1c, 0x11, 0x14, 0x11, 0x14, 0x11, 0x36, 0x1f, 0x63, 0x0, 0x0, 0x15, 0x86, 0x14, 0xcb, 0x36, 0x19, 0x63, 0xf0 },
{ 0x97, 0x7d, 0x10, 0x40, 0x10, 0xc0, 0x13, 0xbe, 0x12, 0x22, 0x7e, 0x22, 0x12, 0x22, 0x12, 0x22, 0x12, 0x22, 0x1e, 0x22, 0x72, 0x22, 0x12, 0x22, 0x13, 0xa2, 0x16, 0x2e, 0x10, 0x20, 0x10, 0x20, 0x30, 0x20 },
{ 0x97, 0x7e, 0x12, 0x10, 0x12, 0x10, 0x33, 0x10, 0x61, 0xbf, 0x8, 0x21, 0x1c, 0x6b, 0x16, 0xa, 0x33, 0x8, 0x61, 0x88, 0x0, 0x1c, 0x3f, 0x14, 0x21, 0x14, 0x21, 0x14, 0x21, 0x36, 0x21, 0x22, 0x3f, 0x63 },
{ 0x97, 0x80, 0x0, 0xc, 0x30, 0x38, 0x1b, 0xe0, 0x8, 0x20, 0x0, 0x20, 0x60, 0x20, 0x37, 0xff, 0x10, 0x20, 0x0, 0x70, 0x8, 0x50, 0x8, 0x50, 0x18, 0xd8, 0x10, 0x88, 0x31, 0x8c, 0x23, 0x6, 0x66, 0x3 },
{ 0x97, 0x81, 0x0, 0x88, 0x21, 0x8c, 0x33, 0x6, 0x16, 0x23, 0x0, 0x70, 0x40, 0xd8, 0x61, 0x8c, 0x23, 0x6, 0x6, 0x3, 0x8, 0x0, 0xb, 0xfe, 0x1a, 0x2, 0x12, 0x2, 0x32, 0x2, 0x22, 0x2, 0x63, 0xfe },
{ 0x97, 0x82, 0x0, 0x0, 0x3f, 0x7e, 0x11, 0x22, 0x9, 0x12, 0x3, 0x6, 0x5, 0xa, 0x19, 0x32, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x97, 0x83, 0x7f, 0x7e, 0x11, 0x22, 0xf, 0x1e, 0x39, 0x72, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x2, 0x20, 0x3f, 0xfe, 0x2, 0x20, 0x7f, 0xff, 0x8, 0x8, 0x30, 0x6 },
{ 0x97, 0x84, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0xa, 0x1, 0x2, 0x1, 0x61, 0xfe, 0x30, 0x20, 0x10, 0x20, 0x1, 0x20, 0x9, 0x3e, 0x9, 0x20, 0x19, 0x20, 0x11, 0x20, 0x33, 0xa0, 0x22, 0x70, 0x66, 0x1f },
{ 0x97, 0x85, 0x3f, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x3f, 0xfe, 0x8, 0x12, 0x10, 0x24, 0x62, 0x7f, 0x35, 0xc8, 0x8, 0x48, 0x12, 0x7e, 0x7d, 0x48, 0x8, 0x48, 0x2a, 0x7e, 0x6a, 0x48, 0x4a, 0x48, 0x8, 0x7f },
{ 0x97, 0x86, 0x10, 0x0, 0x11, 0xff, 0x11, 0x11, 0x7d, 0xff, 0x55, 0x11, 0x55, 0xff, 0x54, 0x20, 0x54, 0x48, 0x54, 0xd0, 0x7c, 0x22, 0x11, 0xff, 0x10, 0x11, 0x14, 0x54, 0x1c, 0xd6, 0x35, 0x93, 0x60, 0x10 },
{ 0x97, 0x87, 0x8, 0x0, 0x8, 0xfe, 0x8, 0x92, 0x7e, 0x92, 0x2, 0xfe, 0x6, 0x92, 0xc, 0x92, 0x8, 0xfe, 0x1a, 0x10, 0x3d, 0xff, 0x6a, 0x54, 0xa, 0x54, 0x8, 0xd6, 0x8, 0x92, 0x9, 0x93, 0x8, 0x10 },
{ 0x97, 0x88, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x2, 0xa0, 0x6, 0xb0, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x97, 0x89, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x8, 0x88, 0xc, 0x98, 0x4, 0x90, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x87, 0x0, 0x80 },
{ 0x97, 0x8a, 0x8, 0x0, 0x8, 0xff, 0x7f, 0x10, 0x8, 0x7e, 0x8, 0x42, 0x7f, 0x42, 0x49, 0x7e, 0x49, 0x42, 0x7f, 0x42, 0x8, 0x7e, 0x1c, 0x42, 0x1a, 0x42, 0x29, 0x7e, 0x28, 0x24, 0x48, 0x66, 0x8, 0xc3 },
{ 0x97, 0x8b, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0xe, 0xb8, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x97, 0x8c, 0x0, 0x80, 0x30, 0x80, 0x19, 0xfc, 0x9, 0x4, 0x3, 0x8c, 0x66, 0xd8, 0x30, 0x70, 0x11, 0xdc, 0x7, 0x7, 0x8, 0x0, 0x9, 0xfc, 0x19, 0x4, 0x11, 0x4, 0x31, 0x4, 0x21, 0x4, 0x61, 0xfc },
{ 0x97, 0x8d, 0x8, 0x20, 0x18, 0x20, 0x10, 0x7e, 0x64, 0xc6, 0x2d, 0xac, 0x18, 0x18, 0x10, 0x30, 0x22, 0x6c, 0x7f, 0xc7, 0xa, 0x0, 0x8, 0xfe, 0x2a, 0x82, 0x2a, 0x82, 0x6a, 0x82, 0x48, 0x82, 0x8, 0xfe },
{ 0x97, 0x8e, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x30, 0xfc, 0x19, 0x8c, 0x3, 0x58, 0x60, 0x70, 0x31, 0xdc, 0x7, 0x7, 0x0, 0x0, 0xd, 0xfc, 0x19, 0x4, 0x31, 0x4, 0x61, 0xfc },
{ 0x97, 0x8f, 0x0, 0x20, 0x7f, 0x20, 0x14, 0x3e, 0x14, 0x62, 0x7f, 0x46, 0x55, 0xac, 0x55, 0x18, 0x55, 0x3c, 0x67, 0x66, 0x41, 0xc3, 0x41, 0x0, 0x7f, 0x7e, 0x41, 0x42, 0x41, 0x42, 0x7f, 0x42, 0x0, 0x7e },
{ 0x97, 0x90, 0x1, 0xa0, 0x7, 0x20, 0x3c, 0x20, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x7f, 0xe0, 0x4, 0x20, 0x4, 0x20, 0x4, 0x20, 0x3f, 0xa0, 0x20, 0xa0, 0x20, 0xa0, 0x20, 0xa1, 0x20, 0xb3, 0x3f, 0x9e },
{ 0x97, 0x91, 0x1, 0x80, 0x7, 0x0, 0x3c, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x32, 0x42, 0x3a, 0x52, 0x2a, 0x5a, 0x22, 0x4a, 0x22, 0x42, 0x22, 0x42, 0x3e, 0x42, 0x64, 0x4e, 0xc, 0x40, 0x18, 0x40, 0x30, 0x40 },
{ 0x97, 0x92, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x17, 0xf4, 0x10, 0x84, 0x17, 0xf4, 0x14, 0x94, 0x14, 0x94, 0x17, 0xf4, 0x10, 0x84, 0x30, 0xa5, 0x20, 0xf5, 0x6f, 0x93 },
{ 0x97, 0x93, 0x10, 0x0, 0x13, 0xdf, 0x12, 0x51, 0x7f, 0xdf, 0x12, 0x51, 0x13, 0xdf, 0x32, 0x21, 0x3b, 0xfd, 0x56, 0xa9, 0x52, 0xf9, 0x12, 0xa9, 0x12, 0xf9, 0x12, 0x21, 0x12, 0x71, 0x12, 0xa9, 0x12, 0x23 },
{ 0x97, 0x94, 0x0, 0x10, 0x27, 0xd0, 0x35, 0x10, 0x15, 0x3f, 0x7, 0xe0, 0x44, 0x40, 0x67, 0xc0, 0x25, 0x1e, 0x5, 0x0, 0x17, 0xc0, 0x10, 0x0, 0x13, 0xfe, 0x32, 0x92, 0x22, 0x92, 0x22, 0x92, 0x67, 0xff },
{ 0x97, 0x95, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x20, 0x3f, 0xa0, 0x24, 0x3f, 0x3f, 0x60, 0x21, 0x40, 0x3f, 0x1e, 0x24, 0x0, 0x3f, 0x80, 0x0, 0x0, 0x1f, 0xfc, 0x12, 0x44, 0x12, 0x44, 0x7f, 0xff },
{ 0x97, 0x96, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x21, 0x42, 0x3f, 0x7e, 0x20, 0x82, 0x2f, 0xfa, 0x24, 0x92, 0x27, 0xf2, 0x24, 0x92, 0x27, 0xf2, 0x22, 0xa2, 0x24, 0x96 },
{ 0x97, 0x97, 0x3f, 0x20, 0x24, 0x3f, 0x3f, 0x40, 0x21, 0x0, 0x3f, 0x3e, 0x24, 0x0, 0x3f, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x2, 0x21, 0xe, 0x23, 0x78, 0x1e },
{ 0x97, 0x98, 0x1, 0x82, 0x7, 0x2, 0x7c, 0x22, 0x4, 0x22, 0x4, 0x22, 0x7f, 0xa2, 0x4, 0x22, 0xe, 0x22, 0xd, 0x22, 0x14, 0xa2, 0x34, 0x22, 0x64, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0x2, 0x4, 0xe },
{ 0x97, 0x99, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x9, 0x80, 0x5, 0x0, 0x3, 0x80, 0x6, 0xe0, 0x1c, 0x38, 0x70, 0xf },
{ 0x97, 0x9a, 0x3f, 0xfe, 0x20, 0x2, 0x3f, 0xfe, 0x24, 0x80, 0x2c, 0xfe, 0x29, 0x0, 0x30, 0xfc, 0x24, 0x84, 0x2c, 0xfc, 0x28, 0x84, 0x38, 0xfc, 0x28, 0x40, 0x68, 0xfe, 0x4b, 0x44, 0x48, 0x38, 0xb, 0xc7 },
{ 0x97, 0x9b, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x0, 0xf, 0xf8, 0x0, 0x30, 0x0, 0xc0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x97, 0x9c, 0x3, 0x4, 0x3e, 0x24, 0x4, 0x24, 0x7f, 0xa4, 0x4, 0x24, 0xe, 0x24, 0x15, 0x4, 0x64, 0x4, 0x4, 0x1c, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x97, 0x9d, 0x0, 0x0, 0x1, 0xfe, 0x7d, 0x22, 0x11, 0x22, 0x11, 0xfe, 0x11, 0x22, 0x7d, 0x22, 0x11, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x11, 0xfe, 0x1c, 0x20, 0x70, 0x20, 0x0, 0x20, 0x3, 0xff, 0x0, 0x0 },
{ 0x97, 0x9e, 0x0, 0x20, 0x0, 0x20, 0x7d, 0xff, 0x10, 0x0, 0x11, 0x4a, 0x11, 0x32, 0x7d, 0x4a, 0x11, 0x2, 0x11, 0xfe, 0x10, 0x20, 0x13, 0xff, 0x1e, 0x41, 0x72, 0x49, 0x2, 0xf5, 0x2, 0x1, 0x2, 0x3 },
{ 0x97, 0x9f, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x50, 0x0, 0x30, 0xc2, 0x17, 0x92, 0x11, 0x12, 0x1f, 0xd2, 0x11, 0x12, 0x31, 0x12, 0x53, 0x92, 0x13, 0x52, 0x35, 0x42, 0x29, 0x2, 0x61, 0x2, 0x1, 0xe },
{ 0x97, 0xa0, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x42, 0x7c, 0x64, 0x7, 0xb8, 0x1c, 0xf },
{ 0x97, 0xa1, 0x10, 0x0, 0x10, 0xfe, 0x10, 0x92, 0x7c, 0x92, 0x4, 0xfe, 0xc, 0x92, 0x8, 0x92, 0x1a, 0xfe, 0x14, 0x10, 0x38, 0x10, 0x54, 0xfe, 0x12, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0xff, 0x10, 0x0 },
{ 0x97, 0xa2, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x97, 0xa3, 0x8, 0x24, 0x8, 0x6c, 0x7f, 0x48, 0x0, 0xff, 0x55, 0xc8, 0x49, 0x48, 0x55, 0x48, 0x7f, 0x7e, 0x8, 0x48, 0x7f, 0x48, 0x51, 0x48, 0x55, 0x7e, 0x7b, 0x48, 0x41, 0x48, 0x41, 0x48, 0x43, 0x7f },
{ 0x97, 0xa4, 0x0, 0x10, 0x3e, 0x10, 0x22, 0xfe, 0x26, 0x10, 0x24, 0x10, 0x2d, 0xff, 0x28, 0x48, 0x28, 0x48, 0x25, 0x8f, 0x24, 0x10, 0x24, 0x10, 0x24, 0xfe, 0x2c, 0x10, 0x20, 0x10, 0x21, 0xff, 0x20, 0x0 },
{ 0x97, 0xa5, 0x8, 0x20, 0x1b, 0xfe, 0x10, 0x22, 0x30, 0x22, 0x67, 0xff, 0x8, 0x22, 0x18, 0x22, 0x13, 0xfe, 0x30, 0x20, 0x70, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20 },
{ 0x97, 0xa6, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x1, 0x0, 0x32, 0xc, 0x19, 0x58, 0x0, 0x80, 0x9, 0x48, 0x1b, 0xac, 0x30, 0x6, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x97, 0xa7, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x6, 0x30, 0x2, 0x20, 0x2, 0x20, 0x2, 0x60, 0x0, 0x40, 0x0, 0x40, 0x7f, 0xff, 0x0, 0x0 },
{ 0x97, 0xa8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x8, 0x20, 0x1b, 0xfe, 0x30, 0x22, 0x67, 0xff, 0x8, 0x22, 0x1b, 0xfe, 0x30, 0x20, 0x73, 0xfe, 0x10, 0x20, 0x17, 0xff, 0x10, 0x20, 0x10, 0x20 },
{ 0x97, 0xa9, 0x10, 0x20, 0x10, 0x20, 0x10, 0x20, 0x17, 0xff, 0x78, 0x0, 0x11, 0xfc, 0x11, 0x4, 0x11, 0x4, 0x19, 0xfc, 0x70, 0x20, 0x11, 0x24, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0x20, 0x30, 0xe0 },
{ 0x97, 0xaa, 0x0, 0x40, 0x0, 0x40, 0x7c, 0xfc, 0x55, 0x84, 0x57, 0xc, 0x54, 0xd8, 0x54, 0x70, 0x7d, 0xdc, 0x57, 0x7, 0x54, 0x0, 0x55, 0xfc, 0x55, 0x4, 0x7d, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0xfc },
{ 0x97, 0xab, 0x8, 0x2, 0x33, 0xc2, 0x21, 0x52, 0x29, 0x52, 0x3a, 0x52, 0x64, 0xd2, 0xe, 0x12, 0x1b, 0x12, 0x71, 0xd2, 0x1f, 0x12, 0x4, 0x12, 0x7f, 0xc2, 0x4, 0x82, 0x25, 0x2, 0x17, 0xc2, 0x7c, 0xe },
{ 0x97, 0xac, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x10, 0x80, 0x0, 0x84, 0x41, 0x3e, 0x63, 0xe2, 0x20, 0x0, 0x1, 0x24, 0x9, 0x24, 0x9, 0x24, 0x19, 0x24, 0x11, 0x24, 0x31, 0x25, 0x23, 0x25, 0x66, 0x3 },
{ 0x97, 0xad, 0x0, 0xc0, 0x27, 0xbf, 0x34, 0x9, 0x14, 0x9, 0x4, 0x99, 0x44, 0x91, 0x67, 0xf7, 0x2c, 0x40, 0x0, 0x0, 0x13, 0xfe, 0x12, 0x22, 0x12, 0x22, 0x33, 0xfe, 0x22, 0x22, 0x22, 0x22, 0x63, 0xfe },
{ 0x97, 0xae, 0x0, 0x20, 0x7c, 0x20, 0x13, 0xff, 0x10, 0x80, 0x10, 0x84, 0x11, 0x3e, 0x3b, 0xe2, 0x10, 0x0, 0x11, 0x24, 0x11, 0x24, 0x11, 0x24, 0x1d, 0x24, 0x71, 0x24, 0x1, 0x25, 0x3, 0x25, 0x6, 0x3 },
{ 0x97, 0xaf, 0x7, 0x0, 0x3c, 0x7f, 0x20, 0x11, 0x20, 0x11, 0x22, 0x11, 0x22, 0x33, 0x3f, 0x22, 0x61, 0x66, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc },
{ 0x97, 0xb0, 0x0, 0x20, 0x7c, 0x20, 0x13, 0xff, 0x10, 0x40, 0x10, 0x44, 0x10, 0x9e, 0x3d, 0xf2, 0x24, 0x0, 0x65, 0x24, 0x25, 0x24, 0x25, 0x24, 0x25, 0x24, 0x3d, 0x24, 0x1, 0x25, 0x3, 0x25, 0x6, 0x3 },
{ 0x97, 0xb1, 0x8, 0x10, 0x4a, 0x10, 0x6a, 0x10, 0x2a, 0xfe, 0x8, 0x0, 0x7f, 0x44, 0x8, 0x44, 0x1c, 0x44, 0x1a, 0x64, 0x2a, 0x2c, 0x28, 0x28, 0x48, 0x28, 0x8, 0x28, 0x8, 0x8, 0x9, 0xff, 0x8, 0x0 },
{ 0x97, 0xb2, 0x0, 0x40, 0x3e, 0x40, 0x22, 0xfc, 0x26, 0x8c, 0x25, 0x58, 0x2c, 0x30, 0x28, 0x6c, 0x25, 0xc7, 0x24, 0x50, 0x24, 0xfe, 0x25, 0x10, 0x24, 0x7c, 0x2c, 0x10, 0x20, 0x10, 0x21, 0xff, 0x20, 0x0 },
{ 0x97, 0xb3, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x2, 0x20, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf9, 0x0, 0x83, 0x0, 0x7e },
{ 0x97, 0xb4, 0x4, 0x20, 0x4, 0x20, 0x3f, 0xbf, 0x11, 0x20, 0xa, 0x3e, 0x7f, 0xc2, 0x0, 0x3e, 0x1f, 0x20, 0x11, 0x3e, 0x1f, 0x20, 0x11, 0x3e, 0x1f, 0x20, 0x11, 0x3e, 0x11, 0x21, 0x11, 0x33, 0x13, 0x1e },
{ 0x97, 0xb5, 0x4, 0x0, 0x5, 0xfc, 0xd, 0x4, 0x9, 0x4, 0x19, 0x4, 0x11, 0x4, 0x31, 0xfc, 0x50, 0x20, 0x10, 0x60, 0x10, 0x40, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x12, 0x2, 0x12, 0x2, 0x13, 0xfe },
{ 0x97, 0xb6, 0x0, 0x80, 0x0, 0xfc, 0x0, 0x80, 0x3f, 0xff, 0x21, 0x1, 0x2f, 0xf8, 0x21, 0x2, 0x27, 0xfe, 0x24, 0x44, 0x27, 0xfc, 0x24, 0x44, 0x27, 0xfc, 0x60, 0x40, 0x45, 0x26, 0x4d, 0xb, 0x18, 0xf9 },
{ 0x97, 0xb7, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x7e, 0xff, 0x10, 0x90, 0x11, 0xb0, 0x10, 0x20, 0x1e, 0x72, 0x13, 0xd6, 0x12, 0x54, 0x12, 0x58, 0x12, 0x48, 0x32, 0x4c, 0x26, 0x44, 0x24, 0x46, 0x6c, 0x43 },
{ 0x97, 0xb8, 0x0, 0x40, 0x0, 0x7e, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x81, 0x17, 0xfc, 0x10, 0x81, 0x17, 0xff, 0x14, 0x44, 0x17, 0xfc, 0x14, 0x44, 0x17, 0xfc, 0x30, 0x80, 0x2f, 0xfe, 0x61, 0x2, 0xe, 0xe },
{ 0x97, 0xb9, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0xc, 0x0, 0x18, 0x0, 0x30, 0x0, 0xc0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3, 0x80 },
{ 0x97, 0xba, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x3f, 0xfe, 0x20, 0x2, 0x22, 0x22, 0x2, 0x20, 0x2, 0x20, 0x6, 0x21, 0x1c, 0x33, 0x70, 0x1e },
{ 0x97, 0xbb, 0x8, 0x40, 0x8, 0x40, 0xf, 0xff, 0x18, 0x88, 0x12, 0x8a, 0x31, 0x4, 0x33, 0xfe, 0x55, 0x5, 0x11, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x10, 0x20, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x10, 0xe0 },
{ 0x97, 0xbc, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x20, 0x82, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x27, 0xf2, 0x20, 0x2, 0x20, 0x2, 0x20, 0x2, 0x20, 0xe },
{ 0x97, 0xbd, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xfe, 0x8, 0x20, 0x7, 0xff, 0x0, 0x88, 0x1, 0x88, 0x3, 0xf, 0x8, 0x40, 0x8, 0x7c, 0x18, 0xc4, 0x11, 0x8c, 0x33, 0x58, 0x20, 0x70, 0x60, 0xdc, 0x7, 0x87 },
{ 0x97, 0xbe, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x1, 0x0, 0x7f, 0xff, 0x22, 0x22, 0x14, 0x14, 0xf, 0xf8, 0x78, 0xf, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x3, 0x80 },
{ 0x97, 0xbf, 0x8, 0x4, 0x49, 0x64, 0x6b, 0x34, 0x2a, 0x14, 0x8, 0x4, 0x7e, 0xc4, 0x8, 0x64, 0x1c, 0x24, 0x1a, 0x4, 0x29, 0x7, 0x28, 0x3c, 0x48, 0xe4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4, 0x8, 0x4 },
{ 0x97, 0xc0, 0x0, 0x0, 0x33, 0xf8, 0x18, 0x48, 0x61, 0x4a, 0x33, 0x4b, 0xa, 0xc9, 0x18, 0x88, 0x31, 0xb8, 0x60, 0x0, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0x6, 0xb0, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x97, 0xc1, 0x0, 0x20, 0x20, 0x20, 0x30, 0x20, 0x17, 0xff, 0x0, 0x0, 0x41, 0xfc, 0x61, 0x4, 0x21, 0x4, 0x1, 0x4, 0x9, 0xfc, 0x8, 0x20, 0x19, 0x24, 0x11, 0x24, 0x33, 0x26, 0x26, 0x23, 0x60, 0xe0 },
{ 0x97, 0xc2, 0x5, 0x22, 0x45, 0xb6, 0x28, 0x94, 0x10, 0x0, 0x11, 0xfc, 0x29, 0x24, 0x49, 0x24, 0x9, 0xfc, 0x19, 0x24, 0x19, 0x24, 0x29, 0xfc, 0x49, 0x24, 0x9, 0x24, 0x9, 0x25, 0x1b, 0x25, 0x76, 0x23 },
{ 0x97, 0xc3, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x80, 0x5f, 0xfe, 0x31, 0x10, 0x1a, 0xa, 0x17, 0xfc, 0x1a, 0xa, 0x33, 0xf8, 0x52, 0x8, 0x13, 0xf8, 0x32, 0x48, 0x26, 0x4c, 0x6c, 0x46, 0x1, 0xc0 },
{ 0x97, 0xc4, 0x0, 0x40, 0x78, 0x40, 0x4f, 0xff, 0x48, 0x88, 0x4a, 0x8a, 0x79, 0x4, 0x4b, 0xfe, 0x4d, 0x5, 0x49, 0xfc, 0x79, 0x4, 0x49, 0xfc, 0x48, 0x20, 0x49, 0x24, 0x7b, 0x26, 0x6, 0x23, 0x0, 0xe0 },
{ 0x97, 0xc5, 0x4, 0x20, 0x1c, 0x20, 0x71, 0xfe, 0x10, 0x20, 0x13, 0xff, 0x7c, 0x48, 0x10, 0x48, 0x38, 0x8f, 0x35, 0x40, 0x34, 0x7c, 0x50, 0xc4, 0x51, 0x8c, 0x13, 0x58, 0x10, 0x70, 0x10, 0xdc, 0x13, 0x87 },
{ 0x97, 0xc6, 0x11, 0xfc, 0x55, 0x4, 0x55, 0xfc, 0x55, 0x4, 0x13, 0xff, 0x7c, 0x0, 0x11, 0xfc, 0x11, 0x24, 0x39, 0xfc, 0x35, 0x24, 0x55, 0x24, 0x51, 0xfc, 0x10, 0x20, 0x13, 0xfe, 0x10, 0x20, 0x17, 0xff },
{ 0x97, 0xc7, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x42, 0x8, 0x66, 0x8, 0x2c, 0x8, 0x30, 0x9, 0xd8, 0xf, 0xc, 0x38, 0x7 },
{ 0x97, 0xc8, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x7e, 0xff, 0x0, 0x0, 0x3c, 0x7e, 0x0, 0x42, 0x0, 0x42, 0x3c, 0x42, 0x0, 0x7e, 0x0, 0x10, 0x3c, 0x54, 0x24, 0x54, 0x24, 0xd6, 0x25, 0x93, 0x3c, 0x30 },
{ 0x97, 0xc9, 0x0, 0x40, 0x60, 0x40, 0x37, 0xff, 0x12, 0x8a, 0x1, 0x4, 0x3, 0xfe, 0x5, 0x5, 0x71, 0xfc, 0x11, 0x4, 0x11, 0xfc, 0x11, 0x24, 0x13, 0x26, 0x16, 0x23, 0x30, 0xe0, 0x28, 0x0, 0x67, 0xff },
{ 0x97, 0xca, 0xf, 0xf8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x7f, 0xff, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x80, 0x7f, 0xff },
{ 0x97, 0xcb, 0x0, 0x20, 0x3c, 0x20, 0x25, 0xfe, 0x24, 0x20, 0x27, 0xff, 0x2c, 0x88, 0x29, 0x88, 0x27, 0x4f, 0x24, 0x40, 0x24, 0xfc, 0x25, 0x84, 0x27, 0xc, 0x2c, 0xd8, 0x20, 0x70, 0x21, 0xdc, 0x27, 0x7 },
{ 0x97, 0xcc, 0x8, 0x0, 0x1c, 0xff, 0x16, 0x10, 0x33, 0x7e, 0x60, 0x42, 0x1c, 0x42, 0x0, 0x7e, 0x0, 0x42, 0x7e, 0x42, 0x12, 0x7e, 0x12, 0x42, 0x12, 0x42, 0x12, 0x7e, 0x16, 0x24, 0x10, 0x66, 0x10, 0xc3 },
{ 0x97, 0xcd, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x0, 0x82, 0x1, 0x82, 0x1, 0x2, 0x1, 0x2, 0x3, 0x2, 0x2, 0x6, 0x6, 0x4, 0xc, 0x4, 0x38, 0x3c },
{ 0x97, 0xce, 0x8, 0x0, 0x18, 0xfc, 0x30, 0x4, 0x62, 0xfc, 0x36, 0x4, 0xc, 0x4, 0x19, 0xff, 0x32, 0x10, 0x7e, 0x92, 0xa, 0xd6, 0x8, 0x54, 0x2a, 0x38, 0x2a, 0x5c, 0x6a, 0xd6, 0x49, 0x93, 0x8, 0x30 },
{ 0x97, 0xcf, 0x4, 0x20, 0x4, 0x70, 0xc, 0xd8, 0x9, 0x8c, 0x1b, 0x6, 0x16, 0xfb, 0x30, 0x0, 0x50, 0x0, 0x13, 0xfe, 0x12, 0x52, 0x12, 0x52, 0x13, 0xfe, 0x12, 0x52, 0x12, 0x52, 0x12, 0x52, 0x12, 0x56 },
{ 0x97, 0xd0, 0x0, 0x0, 0x1f, 0xff, 0x10, 0x0, 0x17, 0xfc, 0x14, 0x44, 0x14, 0x44, 0x17, 0xfc, 0x14, 0x44, 0x14, 0x44, 0x17, 0xfc, 0x10, 0x40, 0x10, 0x40, 0x37, 0xfc, 0x20, 0x40, 0x60, 0x40, 0xf, 0xfe },
{ 0x97, 0xd1, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x7e, 0xff, 0x8, 0x10, 0x8, 0x10, 0x1c, 0x38, 0x1a, 0x38, 0x19, 0x54, 0x28, 0x54, 0x28, 0x92, 0x49, 0x11, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x97, 0xd2, 0x1, 0x8, 0x21, 0x8, 0x31, 0x8, 0x17, 0xbf, 0x1, 0x8, 0x41, 0x8, 0x63, 0x9c, 0x23, 0x5c, 0x5, 0x2a, 0x15, 0x2a, 0x19, 0x49, 0x11, 0x8, 0x31, 0x8, 0x21, 0x8, 0x21, 0x8, 0x61, 0x8 },
{ 0x97, 0xd3, 0x11, 0x22, 0x10, 0xa4, 0x14, 0x20, 0x55, 0xfe, 0x54, 0xa8, 0x59, 0xac, 0x53, 0x26, 0x16, 0x23, 0x11, 0xc4, 0x11, 0x7e, 0x12, 0x54, 0x35, 0x54, 0x28, 0xbf, 0x29, 0x84, 0x63, 0x4, 0x46, 0x4 },
{ 0x97, 0xd4, 0x0, 0x88, 0x7c, 0x88, 0x10, 0x88, 0x13, 0xde, 0x10, 0x88, 0x10, 0x88, 0x7d, 0xdc, 0x11, 0xdc, 0x12, 0xaa, 0x12, 0xaa, 0x14, 0x89, 0x10, 0x88, 0x1c, 0x88, 0x70, 0x88, 0x0, 0x88, 0x0, 0x88 },
{ 0x97, 0xd5, 0x0, 0x40, 0x7e, 0x40, 0x48, 0xff, 0x49, 0x80, 0x48, 0x7c, 0x7e, 0x44, 0x42, 0x44, 0x42, 0x44, 0x7e, 0x7c, 0x48, 0x0, 0x49, 0xef, 0x49, 0x29, 0x49, 0x29, 0x7f, 0x29, 0x1, 0x29, 0x1, 0xef },
{ 0x97, 0xd6, 0x10, 0x20, 0x10, 0x70, 0x7c, 0xd8, 0x11, 0x8c, 0x7f, 0x7, 0x54, 0xf8, 0x54, 0x0, 0x7d, 0xfe, 0x55, 0x52, 0x55, 0x52, 0x7d, 0xfe, 0x11, 0x52, 0x7d, 0x52, 0x11, 0x52, 0x11, 0x52, 0x11, 0x56 },
{ 0x97, 0xd7, 0x0, 0x92, 0x3c, 0x54, 0x24, 0x10, 0x25, 0xff, 0x2c, 0x54, 0x28, 0xd6, 0x29, 0x93, 0x24, 0x90, 0x24, 0xe2, 0x25, 0xbf, 0x27, 0x2a, 0x24, 0xea, 0x2c, 0x7f, 0x20, 0xc2, 0x21, 0x82, 0x23, 0x2 },
{ 0x97, 0xd8, 0x20, 0x92, 0x3c, 0x54, 0x24, 0x10, 0x49, 0xff, 0x7c, 0x54, 0x54, 0xd6, 0x55, 0x93, 0x7c, 0x90, 0x54, 0xe2, 0x55, 0xbf, 0x7f, 0x2a, 0x0, 0xea, 0x54, 0x7f, 0x54, 0xc2, 0x55, 0x82, 0x43, 0x2 },
{ 0x97, 0xd9, 0x8, 0x92, 0x8, 0x54, 0x7f, 0x10, 0x54, 0xff, 0x7f, 0x54, 0x55, 0x56, 0x55, 0xd3, 0x7f, 0x90, 0x54, 0xe2, 0x55, 0xbf, 0x5f, 0x2a, 0x54, 0xaa, 0x54, 0x6a, 0x5d, 0x5f, 0x77, 0x42, 0x40, 0xc2 },
{ 0x97, 0xda, 0x0, 0x60, 0x7d, 0xdf, 0x11, 0x5, 0x11, 0x5, 0x11, 0x45, 0x11, 0x6d, 0x7d, 0xa9, 0x13, 0x1b, 0x10, 0x0, 0x11, 0xfe, 0x11, 0x22, 0x11, 0x22, 0x1d, 0xfe, 0x71, 0x22, 0x1, 0x22, 0x1, 0xfe },
{ 0x97, 0xdb, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x88, 0xf, 0xf8, 0x8, 0x88, 0x8, 0x88, 0xf, 0xf8, 0x30, 0x6, 0x1e, 0x3c, 0x0, 0x0, 0xe, 0x38, 0x38, 0xe, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x7f, 0xff },
{ 0x97, 0xdc, 0x0, 0x0, 0x27, 0xff, 0x30, 0x0, 0x13, 0xfe, 0x2, 0x2, 0x42, 0x2, 0x63, 0xfe, 0x22, 0x20, 0x2, 0x20, 0x13, 0xff, 0x12, 0x20, 0x16, 0x70, 0x34, 0x50, 0x2c, 0xd8, 0x21, 0x8c, 0x67, 0x7 },
{ 0x97, 0xdd, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x10, 0x84, 0x1f, 0xfc, 0x1, 0x10, 0x6, 0x22, 0x1, 0x42, 0x7f, 0xff, 0x0, 0x81, 0x4, 0x90, 0x1c, 0x9c, 0x70, 0x87, 0x0, 0x80 },
{ 0x97, 0xde, 0x8, 0x0, 0x4a, 0xff, 0x2a, 0x10, 0x7f, 0x7e, 0x8, 0x42, 0x1c, 0x42, 0x2a, 0x7e, 0x49, 0x42, 0x0, 0x42, 0x8, 0x7e, 0x7f, 0x42, 0x8, 0x42, 0x1c, 0x7e, 0x16, 0x24, 0x33, 0x66, 0x60, 0xc3 },
{ 0x97, 0xdf, 0x0, 0x80, 0x1, 0xc0, 0x3, 0x60, 0x6, 0x30, 0xc, 0x18, 0x18, 0xc, 0x77, 0xf7, 0x0, 0x0, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x82, 0x0, 0x82, 0x0, 0x82, 0x0, 0x8e, 0x0, 0x80, 0x0, 0x80 },
{ 0x97, 0xe0, 0x4, 0x20, 0x4, 0x70, 0xc, 0xd8, 0x9, 0x8c, 0x1b, 0x6, 0x16, 0xfb, 0x30, 0x0, 0x50, 0x0, 0x13, 0xfe, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x4e, 0x10, 0x40, 0x10, 0x40 },
{ 0x97, 0xe1, 0x8, 0x1, 0xf, 0xe9, 0x8, 0x89, 0x18, 0x89, 0x10, 0x89, 0x11, 0xe9, 0x31, 0x29, 0x31, 0x29, 0x53, 0xa9, 0x16, 0xe9, 0x10, 0x49, 0x10, 0xc1, 0x10, 0x81, 0x11, 0x81, 0x13, 0x1, 0x16, 0x7 },
{ 0x97, 0xe2, 0x0, 0x20, 0x30, 0x70, 0x18, 0xd8, 0x9, 0x8c, 0x3, 0x6, 0x6, 0xfb, 0x0, 0x0, 0x0, 0x0, 0xb, 0xfe, 0x8, 0x42, 0x18, 0x42, 0x10, 0x42, 0x30, 0x42, 0x20, 0x4e, 0x60, 0x40, 0x0, 0x40 },
{ 0x97, 0xe3, 0x0, 0x10, 0x3f, 0xd0, 0x20, 0x10, 0x20, 0x10, 0x3f, 0xbe, 0x24, 0x12, 0x24, 0x12, 0x27, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x24, 0x92, 0x64, 0xb2, 0x4d, 0xa6, 0x49, 0x24, 0x1b, 0x6c },
{ 0x97, 0xe4, 0x20, 0x82, 0x20, 0x82, 0x3f, 0xfe, 0x8, 0x0, 0x1c, 0xff, 0x36, 0x10, 0x63, 0x7e, 0x1c, 0x42, 0x0, 0x7e, 0x7e, 0x42, 0x12, 0x7e, 0x12, 0x42, 0x12, 0x7e, 0x16, 0x24, 0x10, 0x66, 0x10, 0xc3 },
{ 0x97, 0xe5, 0x10, 0x20, 0x10, 0x70, 0x10, 0xd8, 0x51, 0x8c, 0x5b, 0x6, 0x54, 0xfb, 0x54, 0x0, 0x50, 0x0, 0x13, 0xfe, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x4e, 0x10, 0x40, 0x10, 0x40 },
{ 0x97, 0xe6, 0x0, 0x20, 0x7c, 0x70, 0x10, 0xd8, 0x11, 0x8c, 0x13, 0x6, 0x16, 0xfb, 0x38, 0x0, 0x10, 0x0, 0x13, 0xfe, 0x10, 0x42, 0x10, 0x42, 0x1c, 0x42, 0x70, 0x42, 0x0, 0x4e, 0x0, 0x40, 0x0, 0x40 },
{ 0x97, 0xe7, 0x8, 0x40, 0x8, 0x40, 0x8, 0x40, 0x7e, 0x40, 0x2, 0x40, 0x6, 0x40, 0x4, 0x40, 0xc, 0x40, 0x18, 0x40, 0x3e, 0x40, 0x6b, 0x40, 0x8, 0x40, 0x8, 0x40, 0x8, 0x41, 0x8, 0x63, 0x8, 0x3e },
{ 0x97, 0xe8, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x4, 0x90, 0x1, 0xc0, 0x7, 0x70, 0x1c, 0x1c, 0x77, 0xf7, 0x0, 0x0, 0x1f, 0xfc, 0x1, 0x4, 0x1, 0x4, 0x1, 0x4, 0x1, 0x1c, 0x1, 0x0 },
{ 0x97, 0xe9, 0x8, 0x10, 0x1c, 0x38, 0x16, 0x6c, 0x32, 0xc6, 0x21, 0x83, 0x7e, 0x7c, 0x8, 0x0, 0x8, 0x0, 0x7e, 0xfe, 0x8, 0x22, 0x4a, 0x22, 0x6a, 0x22, 0x28, 0x22, 0xe, 0x2e, 0x38, 0x20, 0x60, 0x20 },
{ 0x97, 0xea, 0x8, 0x10, 0x8, 0x10, 0x7f, 0x7e, 0x8, 0x12, 0x3e, 0xff, 0x0, 0x12, 0x3e, 0x7e, 0x0, 0x10, 0x3e, 0x92, 0x8, 0xd6, 0x2a, 0x54, 0x2b, 0x18, 0x69, 0x34, 0x48, 0x56, 0x9, 0x93, 0x18, 0x30 },
{ 0x97, 0xeb, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0xe, 0xb8, 0x1, 0xc0, 0x7, 0x70, 0x1c, 0x1c, 0x73, 0xf7, 0x0, 0x0, 0xf, 0xfc, 0x0, 0x84, 0x0, 0x8c, 0x0, 0x80 },
{ 0x97, 0xec, 0x1f, 0xfc, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x82, 0x2e, 0xba, 0x20, 0x82, 0xe, 0xb8, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x0, 0x3f, 0xfe, 0x1, 0x40, 0x9, 0x48, 0x5, 0x50, 0x7f, 0xff, 0x0, 0x0 },
{ 0x97, 0xed, 0x7f, 0x7f, 0x0, 0x0, 0x3e, 0x3e, 0x22, 0x22, 0x2a, 0x2a, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x20, 0x3f, 0xfe, 0x22, 0x22, 0x3f, 0xfe, 0x24, 0x20, 0x27, 0xbc, 0x64, 0x21, 0x47, 0xb3, 0x1c, 0x1e },
{ 0x97, 0xee, 0x4, 0x8, 0x14, 0x1c, 0x17, 0x94, 0x14, 0x36, 0x14, 0x63, 0x7f, 0xdd, 0x20, 0x80, 0x35, 0x80, 0x2e, 0xbe, 0x24, 0x92, 0x3f, 0x92, 0x24, 0x92, 0x2e, 0x96, 0x35, 0x90, 0x20, 0x90, 0x3f, 0x90 },
{ 0x97, 0xef, 0x0, 0x0, 0x3f, 0xff, 0x22, 0x8, 0x22, 0x8, 0x3f, 0xbf, 0x22, 0x8, 0x27, 0x1c, 0x3a, 0xab, 0x22, 0x8, 0x20, 0x0, 0x2f, 0xfe, 0x28, 0x2, 0x6f, 0xfe, 0x48, 0x2, 0x48, 0x2, 0xf, 0xfe },
{ 0x97, 0xf0, 0x0, 0x0, 0x3f, 0xff, 0x22, 0x8, 0x22, 0x8, 0x3f, 0xbf, 0x22, 0x8, 0x27, 0x1c, 0x3a, 0xab, 0x22, 0x8, 0x20, 0x40, 0x24, 0x40, 0x64, 0x7e, 0x44, 0x40, 0x44, 0x40, 0x1f, 0xff, 0x0, 0x0 },
{ 0x97, 0xf1, 0x0, 0x2, 0x3f, 0xd2, 0x4, 0x12, 0x4, 0x12, 0xc, 0x12, 0xf, 0x92, 0x18, 0x92, 0x10, 0x92, 0x39, 0x92, 0x6d, 0x12, 0x7, 0x12, 0x2, 0x2, 0x6, 0x2, 0xc, 0x2, 0x18, 0x2, 0x70, 0xe },
{ 0x97, 0xf2, 0x0, 0x80, 0x4, 0x90, 0xc, 0x98, 0x18, 0x8c, 0x70, 0x97, 0x3, 0xb0, 0x0, 0xe0, 0x7, 0x80, 0x7c, 0x0, 0x0, 0x80, 0x3f, 0xfc, 0x1, 0x4, 0x3, 0x4, 0x6, 0xc, 0x1c, 0x8, 0x70, 0x38 },
{ 0x97, 0xf3, 0x0, 0x2, 0x3f, 0xd2, 0x4, 0x12, 0x4, 0x12, 0xf, 0x92, 0x8, 0x92, 0x19, 0x92, 0x35, 0x12, 0x3, 0x2, 0x6, 0x2, 0xc, 0x2, 0x38, 0xe, 0x0, 0x0, 0x12, 0x22, 0x33, 0x33, 0x61, 0x11 },
{ 0x97, 0xf4, 0x0, 0x2, 0x3f, 0xd2, 0x4, 0x12, 0xf, 0x92, 0x18, 0x92, 0x35, 0x92, 0x3, 0x2, 0xe, 0x2, 0x38, 0x8e, 0x0, 0x80, 0x7f, 0xff, 0x1, 0x44, 0x7, 0x68, 0x7c, 0x30, 0x7, 0x9c, 0x1c, 0x7 },
{ 0x97, 0xf5, 0x0, 0x80, 0x3f, 0xff, 0x24, 0x8, 0x22, 0x10, 0x3f, 0xfe, 0x21, 0x20, 0x2f, 0xfc, 0x21, 0x24, 0x3f, 0xff, 0x21, 0x24, 0x2f, 0xfc, 0x25, 0x28, 0x65, 0x2c, 0x4d, 0x26, 0x59, 0x23, 0x1, 0x20 },
{ 0x97, 0xf6, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x2, 0x20, 0xa, 0x28, 0xa, 0x28, 0x1a, 0x2c, 0x32, 0x26, 0x66, 0x23, 0xc, 0x20, 0x0, 0x0, 0x5, 0x80, 0x14, 0xc6, 0x14, 0x4b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x97, 0xf7, 0x11, 0x22, 0x10, 0xa4, 0x10, 0x20, 0x13, 0xff, 0x58, 0xa8, 0x55, 0xac, 0x53, 0x27, 0x51, 0x20, 0x11, 0xc4, 0x12, 0x7f, 0x13, 0x54, 0x15, 0xd4, 0x10, 0xbf, 0x11, 0x84, 0x13, 0x4, 0x16, 0x4 },
{ 0x97, 0xf8, 0x0, 0x10, 0x24, 0x10, 0x36, 0xfe, 0x12, 0x10, 0x0, 0xfe, 0x40, 0x92, 0x60, 0x92, 0x2e, 0xfe, 0x2, 0x92, 0x2, 0x92, 0x12, 0xfe, 0x12, 0x10, 0x33, 0xff, 0x26, 0x10, 0x25, 0x10, 0x6c, 0xff },
{ 0x97, 0xf9, 0x8, 0x10, 0x8, 0x10, 0x9, 0xff, 0xa, 0x10, 0x2a, 0xfe, 0x2c, 0x92, 0x68, 0xfe, 0x48, 0x92, 0x8, 0x92, 0x8, 0xfe, 0x8, 0x54, 0x1c, 0x54, 0x16, 0x54, 0x12, 0xd6, 0x31, 0x93, 0x60, 0x10 },
{ 0x97, 0xfa, 0x10, 0x20, 0x3f, 0xbf, 0x64, 0x48, 0x0, 0x80, 0x3f, 0xff, 0x22, 0x10, 0x3f, 0xfe, 0x21, 0x20, 0x2f, 0xfc, 0x21, 0x24, 0x3f, 0xff, 0x21, 0x24, 0x2f, 0xfc, 0x65, 0x28, 0x4d, 0x2c, 0x19, 0x27 },
{ 0x97, 0xfb, 0x8, 0x10, 0x18, 0x10, 0x31, 0xff, 0x62, 0x10, 0x36, 0xfe, 0xc, 0x92, 0x18, 0xfe, 0x34, 0x92, 0x7e, 0x92, 0xa, 0xfe, 0x8, 0x54, 0x2a, 0x54, 0x2a, 0xd6, 0x6a, 0x92, 0x49, 0x93, 0x8, 0x10 },
{ 0x97, 0xfc, 0x0, 0x42, 0x7e, 0x84, 0x25, 0x8, 0x24, 0xa5, 0x3c, 0x42, 0x24, 0x84, 0x25, 0x29, 0x25, 0xef, 0x3c, 0x0, 0x25, 0x29, 0x25, 0x29, 0x25, 0x29, 0x3d, 0xef, 0x64, 0x28, 0x4, 0x68, 0x5, 0xc8 },
{ 0x98, 0x40, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x20, 0x33, 0xff, 0x18, 0x20, 0x9, 0xfe, 0x1, 0x22, 0x1, 0xfe, 0x79, 0x22, 0x9, 0xfe, 0x8, 0x20, 0xb, 0xff, 0x18, 0x20, 0x34, 0x20, 0x63, 0xff },
{ 0x98, 0x41, 0x0, 0x20, 0x30, 0x20, 0x1b, 0xff, 0x8, 0x20, 0x1, 0xfe, 0x1, 0x22, 0x1, 0x22, 0x79, 0xfe, 0x9, 0x22, 0x9, 0x22, 0x9, 0xfe, 0x8, 0x20, 0xb, 0xff, 0x18, 0x20, 0x34, 0x20, 0x63, 0xff },
{ 0x98, 0x42, 0x8, 0x10, 0x1c, 0x10, 0x16, 0xff, 0x32, 0x10, 0x20, 0xfe, 0x7e, 0x92, 0x8, 0xfe, 0x8, 0x92, 0x7e, 0x92, 0x8, 0xfe, 0x4a, 0x54, 0x6a, 0x54, 0x28, 0xd6, 0xe, 0x92, 0x39, 0x93, 0x60, 0x10 },
{ 0x98, 0x43, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x80, 0x1, 0x80, 0x1, 0x0, 0x1f, 0xfc, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x10, 0x4, 0x1f, 0xfc },
{ 0x98, 0x44, 0x4, 0x0, 0xf, 0xe0, 0x10, 0x40, 0x7f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x12, 0x24, 0x33, 0x36, 0x61, 0x13, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc, 0x10, 0x4, 0x1f, 0xfc },
{ 0x98, 0x45, 0x10, 0x80, 0x11, 0xf8, 0x13, 0x10, 0x7d, 0xfe, 0x11, 0x22, 0x11, 0xfe, 0x39, 0x22, 0x35, 0xfe, 0x31, 0x4a, 0x52, 0x25, 0x50, 0x0, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe, 0x11, 0x2, 0x11, 0xfe },
{ 0x98, 0x46, 0x8, 0x0, 0x9, 0xff, 0x8, 0x0, 0xa, 0x0, 0x2a, 0xfe, 0x2c, 0x82, 0x68, 0x82, 0x48, 0xfe, 0x8, 0x80, 0x8, 0x80, 0x1c, 0x80, 0x16, 0x80, 0x12, 0x80, 0x31, 0x80, 0x21, 0x0, 0x63, 0x0 },
{ 0x98, 0x47, 0x0, 0x40, 0x3c, 0x40, 0x24, 0x7c, 0x24, 0xc4, 0x3d, 0x8c, 0x24, 0x68, 0x24, 0x38, 0x24, 0x6c, 0x3d, 0xc7, 0x24, 0x0, 0x24, 0xfe, 0x24, 0x82, 0x3c, 0x82, 0x14, 0x82, 0x36, 0x82, 0x62, 0xfe },
{ 0x98, 0x48, 0x0, 0x40, 0x3e, 0x40, 0x22, 0x7c, 0x22, 0xc4, 0x23, 0x8c, 0x3e, 0x68, 0x8, 0x38, 0x8, 0x6c, 0x29, 0xc7, 0x2e, 0x0, 0x28, 0xfe, 0x28, 0x82, 0x28, 0x82, 0x2e, 0x82, 0x38, 0x82, 0x60, 0xfe },
{ 0x98, 0x49, 0x3f, 0xfe, 0x0, 0x80, 0x7f, 0xff, 0x40, 0x81, 0x5e, 0xbd, 0x40, 0x81, 0x1e, 0xbc, 0x0, 0x20, 0x3e, 0x7c, 0x22, 0xc4, 0x3e, 0x2c, 0x8, 0x38, 0x2e, 0xc7, 0x28, 0x7e, 0x2e, 0x42, 0x78, 0x7e },
{ 0x98, 0x4a, 0x11, 0x2, 0x19, 0x86, 0x8, 0x8c, 0x0, 0x8, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x82, 0x0, 0x80, 0x1f, 0xfc, 0x0, 0x84, 0x1, 0x84, 0x1, 0x4, 0x3, 0x4, 0x6, 0xc, 0xc, 0x8, 0x38, 0x38 },
{ 0x98, 0x4b, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x7f, 0xff, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x80, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x1, 0x0, 0x7f, 0xff, 0x4, 0x10, 0x1f, 0xe0, 0x1, 0x38, 0x3e, 0xe },
{ 0x98, 0x4c, 0x0, 0x40, 0x0, 0x40, 0x1f, 0xff, 0x10, 0x0, 0x11, 0x0, 0x17, 0xde, 0x14, 0x52, 0x17, 0xd2, 0x14, 0x56, 0x17, 0xd4, 0x14, 0x12, 0x14, 0x92, 0x34, 0x92, 0x27, 0xd6, 0x6c, 0x50, 0x0, 0x10 },
{ 0x98, 0x4d, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x0, 0x80, 0xf, 0xf8, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0xc, 0x10, 0x8, 0x10, 0x18, 0x10, 0x30, 0x10 },
{ 0x98, 0x4e, 0x8, 0x0, 0x8, 0x3e, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x3e, 0x21, 0x22, 0x21, 0x22, 0x3f, 0x22, 0x20, 0x3e, 0x20, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2f, 0x62, 0x39, 0x42, 0x60, 0xce },
{ 0x98, 0x4f, 0x8, 0x91, 0x8, 0x52, 0x8, 0x10, 0x7e, 0xff, 0x8, 0x54, 0x8, 0x54, 0x18, 0xd6, 0x1d, 0x93, 0x1a, 0x0, 0x2a, 0x20, 0x29, 0xff, 0x48, 0x44, 0x8, 0x8c, 0x8, 0xf8, 0x8, 0x2e, 0x9, 0xc3 },
{ 0x98, 0x50, 0x11, 0x0, 0x11, 0x1f, 0x13, 0xd1, 0x7e, 0x53, 0x12, 0x52, 0x13, 0xd6, 0x3a, 0x54, 0x36, 0x52, 0x53, 0xd1, 0x52, 0x11, 0x12, 0x91, 0x12, 0x91, 0x12, 0xd7, 0x13, 0x50, 0x16, 0x10, 0x10, 0x10 },
{ 0x98, 0x51, 0x0, 0x40, 0x30, 0x40, 0x1b, 0xfc, 0xa, 0x4, 0x2, 0x4, 0x63, 0xfc, 0x32, 0x4, 0x12, 0x4, 0x3, 0xfc, 0xa, 0x21, 0xa, 0x33, 0x1a, 0x16, 0x12, 0x18, 0x32, 0xcc, 0x23, 0x86, 0x6e, 0x3 },
{ 0x98, 0x52, 0x0, 0x0, 0x27, 0xff, 0x34, 0x1, 0x17, 0xff, 0x4, 0x0, 0x45, 0xff, 0x64, 0x10, 0x25, 0xff, 0x5, 0x11, 0x15, 0x99, 0x15, 0x55, 0x15, 0x11, 0x35, 0x99, 0x2d, 0x55, 0x29, 0x11, 0x61, 0x13 },
{ 0x98, 0x53, 0x0, 0x80, 0x0, 0x80, 0x3f, 0xfe, 0x20, 0x2, 0x20, 0x2, 0x4, 0x80, 0x4, 0x80, 0xf, 0xfc, 0x18, 0x80, 0x30, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80 },
{ 0x98, 0x54, 0x4, 0x20, 0x44, 0x20, 0x29, 0xfc, 0x19, 0x4, 0x11, 0x4, 0x29, 0xfc, 0x49, 0x4, 0x9, 0x4, 0x19, 0xfd, 0x19, 0x13, 0x29, 0x16, 0x49, 0x18, 0x9, 0x8, 0x9, 0xc, 0x19, 0xe6, 0x77, 0x3 },
{ 0x98, 0x55, 0x10, 0x20, 0x1f, 0xbf, 0x34, 0x48, 0x62, 0x4, 0x0, 0x80, 0x1f, 0xfc, 0x4, 0x10, 0x7f, 0xff, 0x0, 0x0, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x10, 0x84, 0x1f, 0xfc, 0x0, 0x81, 0x0, 0x7f },
{ 0x98, 0x56, 0x0, 0x84, 0x0, 0x84, 0x1f, 0xfc, 0x0, 0x88, 0x0, 0x98, 0x0, 0xb0, 0x7f, 0xff, 0x0, 0xc0, 0x1, 0x80, 0x7, 0xc, 0x1c, 0x78, 0x77, 0xc0, 0x4, 0x0, 0x4, 0x1, 0x6, 0x3, 0x3, 0xfe },
{ 0x98, 0x57, 0x8, 0x20, 0x7f, 0xbf, 0x12, 0x20, 0x7f, 0xbe, 0x21, 0x2, 0x3f, 0x3e, 0x21, 0x20, 0x3f, 0x3e, 0x21, 0x20, 0x23, 0x21, 0x7f, 0xff, 0x8, 0x8, 0xf, 0xf8, 0x8, 0xf, 0x7f, 0xf8, 0x0, 0x8 },
{ 0x98, 0x58, 0x11, 0x22, 0x11, 0xb6, 0x10, 0x94, 0x7c, 0x0, 0x55, 0xfc, 0x55, 0x24, 0x55, 0x24, 0x55, 0xfc, 0x55, 0x24, 0x7d, 0x24, 0x11, 0xfc, 0x11, 0x24, 0x15, 0x24, 0x15, 0x25, 0x3d, 0x25, 0x66, 0x23 },
{ 0x98, 0x59, 0x4, 0x0, 0x4, 0x3f, 0x3f, 0xa1, 0x20, 0xa3, 0x20, 0xa2, 0x3f, 0xa6, 0x20, 0xa4, 0x20, 0xa2, 0x3f, 0xa1, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x27, 0xa1, 0x3c, 0xa7, 0x60, 0x20, 0x0, 0x20 },
{ 0x98, 0x5a, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x0, 0x80, 0x7f, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x10, 0x4, 0x10, 0xc, 0x18, 0x8, 0x8, 0x18, 0xc, 0x10, 0x4, 0x30, 0x6, 0x60, 0x3 },
{ 0x98, 0x5b, 0x4, 0x10, 0x7f, 0xff, 0x14, 0x54, 0x36, 0x96, 0x65, 0x13, 0x0, 0x40, 0x1f, 0xff, 0x11, 0x20, 0x1f, 0xfe, 0x11, 0x22, 0x1f, 0xfe, 0x14, 0x20, 0x37, 0xbc, 0x24, 0x21, 0x67, 0xa3, 0x1c, 0x1e },
{ 0x98, 0x5c, 0x10, 0x0, 0x11, 0xfc, 0x10, 0x4, 0x7d, 0xfc, 0x4, 0x4, 0xc, 0x4, 0xb, 0xff, 0x18, 0x20, 0x11, 0x22, 0x3d, 0xa6, 0x56, 0xb4, 0x10, 0x78, 0x10, 0xac, 0x11, 0xa6, 0x13, 0x23, 0x10, 0xe0 },
{ 0x98, 0x5d, 0x0, 0x20, 0x3c, 0x20, 0x24, 0x20, 0x24, 0x20, 0x25, 0xfe, 0x3c, 0x22, 0x24, 0x22, 0x24, 0x22, 0x24, 0x22, 0x3c, 0x22, 0x24, 0x22, 0x24, 0x62, 0x24, 0x46, 0x24, 0x44, 0x64, 0xc4, 0x4d, 0x9c },
{ 0x98, 0x5e, 0x8, 0x0, 0x1c, 0xfc, 0x16, 0x4, 0x32, 0xfc, 0x20, 0x4, 0x7e, 0x4, 0x9, 0xff, 0x8, 0x10, 0x7e, 0x92, 0x8, 0xd6, 0x4a, 0x54, 0x2a, 0x38, 0x28, 0x5c, 0xe, 0xd6, 0x39, 0x93, 0x60, 0x70 },
{ 0x98, 0x5f, 0x0, 0x10, 0x3c, 0x38, 0x0, 0x6c, 0x7e, 0xc6, 0x1, 0x83, 0x3c, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x3c, 0xfe, 0x0, 0xaa, 0x0, 0xaa, 0x3c, 0xfe, 0x24, 0xaa, 0x24, 0xaa, 0x24, 0xaa, 0x3c, 0x86 },
{ 0x98, 0x60, 0x8, 0xc, 0x8, 0x38, 0xb, 0xe0, 0x18, 0x20, 0x17, 0xff, 0x30, 0xa8, 0x31, 0xac, 0x57, 0x27, 0x10, 0x40, 0x10, 0x40, 0x17, 0xff, 0x10, 0x84, 0x11, 0x8, 0x13, 0xf0, 0x10, 0x5c, 0x17, 0x86 },
{ 0x98, 0x61, 0x1, 0x80, 0x7, 0x0, 0x7c, 0x7e, 0x4, 0x42, 0x4, 0x42, 0x7f, 0xc2, 0x4, 0x42, 0xe, 0x42, 0xd, 0x42, 0x15, 0x42, 0x34, 0x42, 0x64, 0x42, 0x4, 0x42, 0x4, 0x7e, 0x4, 0x0, 0x4, 0x0 },
{ 0x98, 0x62, 0x0, 0x6, 0x3c, 0x1c, 0x0, 0xf0, 0x7e, 0x10, 0x0, 0x10, 0x3d, 0xff, 0x0, 0x10, 0x0, 0x10, 0x3c, 0x10, 0x0, 0x10, 0x0, 0xfe, 0x3c, 0x82, 0x24, 0x82, 0x24, 0x82, 0x24, 0x82, 0x3c, 0xfe },
{ 0x98, 0x63, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x80, 0x1, 0xa0, 0x3, 0xb0, 0xe, 0x9c, 0x78, 0x87, 0x0, 0x0, 0x1f, 0xfc, 0x0, 0x80, 0x8, 0x80, 0x8, 0xf8, 0x8, 0x80, 0x8, 0x80, 0x7f, 0xff, 0x0, 0x0 },
{ 0x98, 0x64, 0x0, 0x20, 0x3e, 0x20, 0x23, 0xff, 0x22, 0x20, 0x3e, 0x20, 0x22, 0x7e, 0x22, 0x42, 0x22, 0xc2, 0x3f, 0x7e, 0x22, 0x42, 0x22, 0x42, 0x22, 0x7e, 0x3e, 0x42, 0x14, 0x42, 0x36, 0x42, 0x63, 0x4e },
{ 0x98, 0x65, 0x0, 0x20, 0x3c, 0x20, 0x24, 0xfe, 0x24, 0x22, 0x24, 0x22, 0x3c, 0x62, 0x24, 0xce, 0x24, 0x0, 0x24, 0x84, 0x3d, 0xef, 0x24, 0xa5, 0x24, 0xa5, 0x24, 0xa5, 0x24, 0xa5, 0x64, 0xa5, 0x4d, 0x6b },
{ 0x98, 0x66, 0x0, 0x48, 0x0, 0x44, 0x7f, 0xff, 0x0, 0x40, 0x1f, 0x62, 0x11, 0x26, 0x1f, 0x34, 0x0, 0x18, 0xf, 0xbd, 0x78, 0x67, 0x1, 0xc2, 0x0, 0x0, 0x14, 0xc6, 0x14, 0x6b, 0x36, 0x19, 0x63, 0xf0 },
{ 0x98, 0x67, 0x8, 0x20, 0x8, 0x20, 0x8, 0xfc, 0x7e, 0x24, 0x8, 0x64, 0xc, 0x45, 0x1a, 0xc5, 0x19, 0x83, 0x18, 0x10, 0x28, 0x10, 0x29, 0xff, 0x48, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10, 0x8, 0x10 },
{ 0x98, 0x68, 0x4, 0x12, 0x7f, 0xbf, 0x11, 0x14, 0x1f, 0x14, 0x24, 0xb5, 0x4c, 0x67, 0x1, 0x0, 0xf, 0xf0, 0x8, 0x10, 0xf, 0xf0, 0x8, 0x10, 0xf, 0xff, 0x8, 0x0, 0x2f, 0xfe, 0x64, 0x92, 0x42, 0x4e },
{ 0x98, 0x69, 0x0, 0x0, 0x3f, 0xfe, 0x2, 0x0, 0x2, 0x0, 0x3, 0xf0, 0x2, 0x10, 0x6, 0x90, 0x4, 0xd0, 0x4, 0x50, 0x5, 0x10, 0xd, 0xb0, 0x8, 0xa0, 0x0, 0x20, 0x0, 0x20, 0x7f, 0xff, 0x0, 0x0 },
{ 0x98, 0x6a, 0x0, 0x0, 0x3f, 0xfe, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0xf, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xff, 0x0, 0x0 },
{ 0x98, 0x6b, 0x10, 0x0, 0x1e, 0xee, 0x32, 0xaa, 0x24, 0xaa, 0x7e, 0xee, 0x2a, 0x0, 0x2a, 0xfe, 0x3e, 0x0, 0x2b, 0xff, 0x2a, 0x20, 0x3e, 0x40, 0x0, 0xfe, 0x55, 0x2, 0x55, 0x2, 0x54, 0x6, 0x40, 0x1c },
{ 0x98, 0x6c, 0x0, 0x10, 0x3c, 0x10, 0x1, 0xff, 0x7f, 0x1, 0x1, 0xd, 0x3c, 0x38, 0x0, 0xe0, 0x0, 0x20, 0x3c, 0x20, 0x1, 0xff, 0x0, 0x20, 0x3c, 0x20, 0x24, 0x20, 0x24, 0x21, 0x24, 0x33, 0x3c, 0x1e },
{ 0x98, 0x6d, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x80, 0x3f, 0xfe, 0x4, 0x10, 0x7, 0xf0, 0x0, 0x0, 0x3f, 0xfe, 0x24, 0x12, 0x27, 0xf6, 0x0, 0x80, 0x7f, 0xff, 0x2, 0xa0, 0xe, 0xb8, 0x78, 0x8f },
{ 0x98, 0x6e, 0x4, 0x10, 0x7f, 0xff, 0x4, 0x10, 0x0, 0x0, 0x3f, 0xff, 0x28, 0x90, 0x25, 0x10, 0x2f, 0xbf, 0x22, 0x29, 0x2a, 0xaa, 0x2a, 0x88, 0x2a, 0x9c, 0x2f, 0x94, 0x62, 0x14, 0x46, 0x36, 0xc, 0x63 },
{ 0x98, 0x6f, 0x10, 0x20, 0x10, 0x20, 0x13, 0xfe, 0x7e, 0x2, 0x12, 0x2, 0x11, 0x0, 0x39, 0xde, 0x35, 0x52, 0x33, 0x52, 0x52, 0x52, 0x57, 0xd2, 0x10, 0x96, 0x11, 0x90, 0x11, 0x11, 0x13, 0x13, 0x16, 0xe },
{ 0x98, 0x70, 0x0, 0x20, 0x20, 0x20, 0x37, 0xff, 0x10, 0x88, 0x2, 0x8a, 0x44, 0x89, 0x61, 0x8, 0x20, 0x0, 0x7, 0xfe, 0x10, 0x2, 0x13, 0xfe, 0x12, 0x0, 0x33, 0xff, 0x20, 0x1, 0x20, 0x3, 0x60, 0xe },
{ 0x98, 0x71, 0x0, 0x20, 0x7c, 0x20, 0x13, 0xfe, 0x12, 0x2, 0x12, 0x2, 0x11, 0x0, 0x39, 0xde, 0x29, 0x52, 0x6b, 0x52, 0x2a, 0x52, 0x2d, 0xd2, 0x28, 0x96, 0x29, 0x90, 0x39, 0x11, 0x3, 0x13, 0x6, 0xe },
{ 0x98, 0x72, 0x0, 0x20, 0x38, 0x20, 0x2b, 0xfe, 0x2a, 0x2, 0x2a, 0x2, 0x39, 0x0, 0x29, 0xde, 0x29, 0x52, 0x2b, 0x52, 0x3a, 0x52, 0x29, 0x52, 0x28, 0xd6, 0x28, 0x90, 0x28, 0x91, 0x69, 0x93, 0x5b, 0xe },
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\base\boot\bootfont\cht\fonttable.h ===
#define MAX_SBCS_NUM      190
#define MAX_SBCS_BYTES    17
#define MAX_DBCS_NUM      5838
#define MAX_DBCS_BYTES    34
#define LANGUAGE_ID       0x404


// local string to send into _tsetlocale
PCHAR   LocaleString = "chinese-traditional";

unsigned char LeadByteTable[] = { 0xA1, 0xFE, 0x8E, 0xA0, 0x81, 0x8D, 0x00, 0x00 };

unsigned char SBCSImage[MAX_SBCS_NUM][MAX_SBCS_BYTES] = { 
{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x20, 0x27, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x4, 0xe4, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x3, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x20, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x4, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe4, 0x4, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x5, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x7, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x3e, 0x1c, 0x1c, 0x8 },
{ 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x9, 0x0, 0x0, 0x0, 0x0, 0x18, 0x24, 0x24, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x0, 0x0 },
{ 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xb, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x82, 0xc6, 0xaa, 0xaa, 0x92, 0x92, 0xaa, 0xaa, 0xc6, 0x82, 0xfe },
{ 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xe, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe },
{ 0xf, 0x0, 0x0, 0x49, 0x49, 0x2a, 0x36, 0x14, 0x22, 0xe3, 0x22, 0x14, 0x36, 0x2a, 0x49, 0x49, 0x0 },
{ 0x10, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe7, 0x0, 0xe7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x12, 0x0, 0x0, 0x0, 0x8, 0x1c, 0x1c, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x3e, 0x1c, 0x1c, 0x8 },
{ 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x14, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa },
{ 0x15, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe7, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0xe7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x17, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xe4, 0x4, 0xe4, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x19, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x27, 0x20, 0x27, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24 },
{ 0x1a, 0x0, 0x55, 0x0, 0xaa, 0x0, 0x55, 0x0, 0xaa, 0x0, 0x55, 0x0, 0xaa, 0x0, 0x55, 0x0, 0xaa },
{ 0x1b, 0x0, 0x0, 0x0, 0x2, 0x2, 0x2, 0x2, 0x22, 0x62, 0xfe, 0x60, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x1c, 0x0, 0x0, 0x0, 0x8, 0x1c, 0x1c, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8 },
{ 0x1d, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8 },
{ 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x6, 0x7f, 0x6, 0x4, 0x0, 0x0, 0x0, 0x0 },
{ 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x60, 0xfe, 0x60, 0x20, 0x0, 0x0, 0x0, 0x0 },
{ 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x21, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0, 0x10, 0x38, 0x10, 0x0, 0x0 },
{ 0x22, 0x0, 0x0, 0x6c, 0x6c, 0x24, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x23, 0x0, 0x0, 0x24, 0x24, 0x24, 0x7e, 0x24, 0x24, 0x24, 0x24, 0x7e, 0x24, 0x24, 0x24, 0x0, 0x0 },
{ 0x24, 0x0, 0x0, 0x10, 0x38, 0x54, 0x54, 0x50, 0x38, 0x14, 0x54, 0x54, 0x54, 0x38, 0x10, 0x0, 0x0 },
{ 0x25, 0x0, 0x0, 0x22, 0x56, 0x54, 0x2c, 0x8, 0x18, 0x10, 0x30, 0x24, 0x6a, 0x4a, 0x44, 0x0, 0x0 },
{ 0x26, 0x0, 0x0, 0x30, 0x48, 0x48, 0x50, 0x20, 0x66, 0x66, 0x94, 0x94, 0x88, 0x8c, 0x76, 0x0, 0x0 },
{ 0x27, 0x0, 0x0, 0x18, 0x18, 0x8, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x28, 0x0, 0x0, 0x8, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x8, 0x0, 0x0 },
{ 0x29, 0x0, 0x0, 0x10, 0x8, 0x8, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x0, 0x0 },
{ 0x2a, 0x0, 0x0, 0x0, 0x0, 0x10, 0x92, 0x54, 0x38, 0x38, 0x54, 0x92, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x2b, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0 },
{ 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x8, 0x10 },
{ 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x2e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0 },
{ 0x2f, 0x0, 0x0, 0x2, 0x4, 0x4, 0x8, 0x8, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x0, 0x0 },
{ 0x30, 0x0, 0x0, 0x18, 0x24, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x0, 0x0 },
{ 0x31, 0x0, 0x0, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x0, 0x0 },
{ 0x32, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x42, 0x42, 0x7e, 0x0, 0x0 },
{ 0x33, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x2, 0x2, 0x1c, 0x2, 0x2, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x34, 0x0, 0x0, 0x4, 0xc, 0xc, 0x14, 0x24, 0x24, 0x44, 0x44, 0xfe, 0x4, 0x4, 0xe, 0x0, 0x0 },
{ 0x35, 0x0, 0x0, 0x7e, 0x40, 0x40, 0x40, 0x7c, 0x42, 0x2, 0x2, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x36, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x40, 0x40, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x37, 0x0, 0x0, 0x7e, 0x42, 0x42, 0x4, 0x4, 0x8, 0x8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0 },
{ 0x38, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x39, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3e, 0x2, 0x2, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x3a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0 },
{ 0x3b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x8, 0x10 },
{ 0x3c, 0x0, 0x0, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x0, 0x0, 0x0 },
{ 0x3d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x3e, 0x0, 0x0, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x0, 0x0, 0x0 },
{ 0x3f, 0x0, 0x0, 0x38, 0x44, 0x82, 0x82, 0x44, 0x8, 0x10, 0x10, 0x0, 0x10, 0x38, 0x10, 0x0, 0x0 },
{ 0x40, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x2, 0x2, 0x32, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x3c, 0x0, 0x0 },
{ 0x41, 0x0, 0x0, 0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x0, 0x0 },
{ 0x42, 0x0, 0x0, 0xfc, 0x42, 0x42, 0x42, 0x42, 0x7c, 0x42, 0x42, 0x42, 0x42, 0x42, 0xfc, 0x0, 0x0 },
{ 0x43, 0x0, 0x0, 0x3a, 0x46, 0x42, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x44, 0x0, 0x0, 0xf8, 0x44, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x44, 0xf8, 0x0, 0x0 },
{ 0x45, 0x0, 0x0, 0xfe, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x40, 0x40, 0x40, 0x42, 0xfe, 0x0, 0x0 },
{ 0x46, 0x0, 0x0, 0xfe, 0x42, 0x40, 0x40, 0x44, 0x7c, 0x44, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x0, 0x0 },
{ 0x47, 0x0, 0x0, 0x3a, 0x46, 0x42, 0x42, 0x40, 0x40, 0x4e, 0x42, 0x42, 0x42, 0x46, 0x3a, 0x0, 0x0 },
{ 0x48, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x7c, 0x44, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x49, 0x0, 0x0, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7c, 0x0, 0x0 },
{ 0x4a, 0x0, 0x0, 0x3c, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x88, 0x70, 0x0, 0x0 },
{ 0x4b, 0x0, 0x0, 0xee, 0x44, 0x48, 0x50, 0x60, 0x60, 0x50, 0x50, 0x48, 0x48, 0x44, 0xee, 0x0, 0x0 },
{ 0x4c, 0x0, 0x0, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x7e, 0x0, 0x0 },
{ 0x4d, 0x0, 0x0, 0xc6, 0x44, 0x6c, 0x6c, 0x54, 0x54, 0x54, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x4e, 0x0, 0x0, 0xee, 0x44, 0x64, 0x64, 0x74, 0x54, 0x5c, 0x4c, 0x4c, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x4f, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x50, 0x0, 0x0, 0xf8, 0x44, 0x42, 0x42, 0x42, 0x44, 0x78, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x0, 0x0 },
{ 0x51, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x72, 0x4a, 0x44, 0x3a, 0x0, 0x0 },
{ 0x52, 0x0, 0x0, 0xfc, 0x42, 0x42, 0x42, 0x44, 0x78, 0x4c, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x53, 0x0, 0x0, 0x3a, 0x46, 0x42, 0x40, 0x20, 0x18, 0x4, 0x2, 0x42, 0x42, 0x62, 0x5c, 0x0, 0x0 },
{ 0x54, 0x0, 0x0, 0xfe, 0x92, 0x92, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x55, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x0, 0x0 },
{ 0x56, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10, 0x10, 0x0, 0x0 },
{ 0x57, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x44, 0x54, 0x54, 0x7c, 0x6c, 0x6c, 0x44, 0x44, 0x0, 0x0 },
{ 0x58, 0x0, 0x0, 0xee, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x28, 0x28, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x59, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x5a, 0x0, 0x0, 0xfe, 0x82, 0x82, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x82, 0x82, 0xfe, 0x0, 0x0 },
{ 0x5b, 0x0, 0x0, 0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x0, 0x0 },
{ 0x5c, 0x0, 0x0, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x8,  0x8,  0x4,  0x4,  0x2,  0x0, 0x0},
{ 0x5d, 0x0, 0x0, 0x38, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x38, 0x0, 0x0 },
{ 0x5e, 0x0, 0x0, 0x18, 0x24, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x5f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0 },
{ 0x60, 0x0, 0x0, 0x30, 0x30, 0x20, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x4, 0x3c, 0x44, 0x44, 0x4c, 0x36, 0x0, 0x0 },
{ 0x62, 0x0, 0x0, 0xc0, 0x40, 0x40, 0x40, 0x58, 0x64, 0x42, 0x42, 0x42, 0x42, 0x64, 0xd8, 0x0, 0x0 },
{ 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x44, 0x40, 0x40, 0x44, 0x44, 0x38, 0x0, 0x0 },
{ 0x64, 0x0, 0x0, 0xc, 0x4, 0x4, 0x4, 0x34, 0x4c, 0x44, 0x44, 0x44, 0x44, 0x4c, 0x36, 0x0, 0x0 },
{ 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x44, 0x7c, 0x40, 0x44, 0x44, 0x38, 0x0, 0x0 },
{ 0x66, 0x0, 0x0, 0xc, 0x12, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x44, 0x44, 0x44, 0x4c, 0x34, 0x4, 0x44, 0x44, 0x38 },
{ 0x68, 0x0, 0x0, 0xc0, 0x40, 0x40, 0x40, 0x58, 0x64, 0x44, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x69, 0x0, 0x0, 0x0, 0x10, 0x10, 0x0, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x6a, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x38, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x48, 0x48, 0x30 },
{ 0x6b, 0x0, 0x0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x48, 0x50, 0x60, 0x50, 0x48, 0xee, 0x0, 0x0 },
{ 0x6c, 0x0, 0x0, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x0, 0x0 },
{ 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0xd6, 0x0, 0x0 },
{ 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x64, 0x44, 0x44, 0x44, 0x44, 0x44, 0xee, 0x0, 0x0 },
{ 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7c, 0x22, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x20, 0x20, 0x70 },
{ 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x44, 0x44, 0x44, 0x44, 0x3c, 0x4, 0x4, 0x4, 0xe },
{ 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x32, 0x22, 0x20, 0x20, 0x20, 0x20, 0x70, 0x0, 0x0 },
{ 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x42, 0x42, 0x30, 0xc, 0x42, 0x42, 0x3c, 0x0, 0x0 },
{ 0x74, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x12, 0x12, 0xc, 0x0, 0x0 },
{ 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4c, 0x36, 0x0, 0x0 },
{ 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x44, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x0, 0x0 },
{ 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc6, 0x44, 0x44, 0x54, 0x54, 0x54, 0x6c, 0x44, 0x0, 0x0 },
{ 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc6, 0x44, 0x28, 0x10, 0x10, 0x28, 0x44, 0xc6, 0x0, 0x0 },
{ 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x44, 0x44, 0x24, 0x28, 0x18, 0x8, 0x10, 0x90, 0x60 },
{ 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x42, 0x4, 0x8, 0x10, 0x20, 0x42, 0x7e, 0x0, 0x0 },
{ 0x7b, 0x0, 0x0, 0xc, 0x10, 0x10, 0x10, 0x10, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0xc, 0x0, 0x0 },
{ 0x7c, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0 },
{ 0x7d, 0x0, 0x0, 0x30, 0x8, 0x8, 0x8, 0x8, 0x4, 0x8, 0x8, 0x8, 0x8, 0x8, 0x30, 0x0, 0x0 },
{ 0x7e, 0x0, 0x0, 0x32, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x48, 0x48, 0x30 },
{ 0xa2, 0x3e, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3e },
{ 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x30, 0x10 },
{ 0xa5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xa6, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xa7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x14, 0x18, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x0 },
{ 0xa8, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x4, 0x8, 0x18, 0x68, 0x8, 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0xa9, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x41, 0x41, 0x1, 0x2, 0x2, 0x4, 0x18, 0x0 },
{ 0xaa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x0, 0x0, 0x0 },
{ 0xab, 0x0, 0x0, 0x0, 0x0, 0x4, 0x4, 0x4, 0x7f, 0x4, 0xc, 0x14, 0x24, 0x44, 0x4, 0xc, 0x0 },
{ 0xac, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x27, 0x79, 0x12, 0x12, 0x10, 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0xad, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7f, 0x0, 0x0, 0x0 },
{ 0xae, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0 },
{ 0xaf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x9, 0x49, 0x21, 0x21, 0x2, 0x2, 0x4, 0x8, 0x30, 0x0 },
{ 0xb0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xb1, 0x0, 0x0, 0x7f, 0x1, 0x9, 0xa, 0xa, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x20, 0x20, 0x0 },
{ 0xb2, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0xc, 0x14, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x0 },
{ 0xb3, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x41, 0x41, 0x41, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0x18, 0x0 },
{ 0xb4, 0x0, 0x0, 0x0, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x0, 0x0, 0x0 },
{ 0xb5, 0x0, 0x4, 0x4, 0x4, 0x7f, 0xc, 0xc, 0x14, 0x14, 0x14, 0x24, 0x24, 0x44, 0x4, 0xc, 0x0 },
{ 0xb6, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x9, 0x9, 0x9, 0x9, 0x11, 0x11, 0x11, 0x22, 0x22, 0x4c, 0x0 },
{ 0xb7, 0x0, 0x10, 0x10, 0x10, 0x1e, 0x68, 0x8, 0x8, 0xf, 0x78, 0x4, 0x4, 0x4, 0x4, 0x4, 0x0 },
{ 0xb8, 0x0, 0x8, 0x8, 0x1f, 0x11, 0x11, 0x21, 0x41, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xb9, 0x0, 0x20, 0x20, 0x20, 0x3f, 0x24, 0x24, 0x44, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xba, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0 },
{ 0xbb, 0x0, 0x24, 0x24, 0x24, 0x7f, 0x24, 0x24, 0x24, 0x24, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xbc, 0x0, 0x30, 0x8, 0x0, 0x0, 0x60, 0x11, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0x18, 0x60, 0x0 },
{ 0xbd, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x14, 0x12, 0x22, 0x21, 0x41, 0x0 },
{ 0xbe, 0x0, 0x10, 0x10, 0x10, 0x10, 0x17, 0x79, 0x11, 0x12, 0x12, 0x10, 0x10, 0x10, 0x8, 0x7, 0x0 },
{ 0xbf, 0x0, 0x2, 0x42, 0x22, 0x22, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xc0, 0x0, 0x20, 0x20, 0x3e, 0x22, 0x22, 0x5a, 0x46, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xc1, 0x0, 0x2, 0x4, 0x38, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x60, 0x0 },
{ 0xc2, 0x0, 0x10, 0x9, 0x9, 0x49, 0x21, 0x21, 0x1, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x20, 0x0 },
{ 0xc3, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x20, 0x0 },
{ 0xc4, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c, 0x12, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0 },
{ 0xc5, 0x0, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x20, 0x40, 0x0 },
{ 0xc6, 0x0, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x0 },
{ 0xc7, 0x0, 0x0, 0x3f, 0x1, 0x1, 0x2, 0x22, 0x1a, 0x4, 0x6, 0xa, 0x9, 0x11, 0x21, 0x40, 0x0 },
{ 0xc8, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x2, 0x4, 0x4, 0xa, 0x19, 0x29, 0x48, 0x8, 0x8, 0x8, 0x0 },
{ 0xc9, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x40, 0x0 },
{ 0xca, 0x0, 0x0, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x21, 0x21, 0x21, 0x21, 0x41, 0x41, 0x0 },
{ 0xcb, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0xf, 0x0 },
{ 0xcc, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x2, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xcd, 0x0, 0x0, 0x10, 0x28, 0x28, 0x44, 0x44, 0x4, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0 },
{ 0xce, 0x0, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x8, 0x8, 0x0 },
{ 0xcf, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x4, 0x44, 0x28, 0x10, 0x10, 0x8, 0x8, 0x8, 0x8, 0x0 },
{ 0xd0, 0x0, 0x0, 0x38, 0x6, 0x1, 0x0, 0x30, 0xc, 0x2, 0x0, 0x70, 0xc, 0x2, 0x1, 0x0, 0x0 },
{ 0xd1, 0x0, 0x8, 0x8, 0x8, 0x8, 0x8, 0x10, 0x10, 0x10, 0x12, 0x22, 0x21, 0x27, 0x59, 0x61, 0x0 },
{ 0xd2, 0x0, 0x1, 0x1, 0x1, 0x2, 0x32, 0xa, 0x4, 0x6, 0xa, 0x9, 0x11, 0x11, 0x20, 0x40, 0x0 },
{ 0xd3, 0x0, 0x0, 0x3e, 0x8, 0x8, 0x8, 0x8, 0x7f, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x7, 0x0 },
{ 0xd4, 0x0, 0x20, 0x20, 0x23, 0x1d, 0x71, 0x12, 0x12, 0x8, 0x8, 0x8, 0x4, 0x4, 0x4, 0x4, 0x0 },
{ 0xd5, 0x0, 0x0, 0x0, 0x3c, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x7f, 0x0, 0x0, 0x0 },
{ 0xd6, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x7e, 0x2, 0x2, 0x2, 0x2, 0x7e, 0x0, 0x0, 0x0 },
{ 0xd7, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x7e, 0x2, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x20, 0x0 },
{ 0xd8, 0x0, 0x0, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x2, 0x2, 0x4, 0x4, 0x8, 0x10, 0x0 },
{ 0xd9, 0x0, 0x0, 0x8, 0x28, 0x28, 0x28, 0x28, 0x29, 0x29, 0x29, 0x2a, 0x2a, 0x4c, 0x4c, 0x48, 0x0 },
{ 0xda, 0x0, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x24, 0x28, 0x30, 0x0 },
{ 0xdb, 0x0, 0x0, 0x0, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7e, 0x42, 0x0, 0x0 },
{ 0xdc, 0x0, 0x0, 0x7e, 0x42, 0x42, 0x42, 0x42, 0x2, 0x4, 0x4, 0x4, 0x8, 0x8, 0x10, 0x20, 0x0 },
{ 0xdd, 0x0, 0x0, 0x60, 0x10, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x4, 0x8, 0x10, 0x60, 0x0 },
{ 0xde, 0x0, 0x0, 0x8, 0x24, 0x12, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
{ 0xdf, 0x0, 0x0, 0x18, 0x24, 0x24, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
};

unsigned char DBCSImage[MAX_DBCS_NUM][MAX_DBCS_BYTES] = { 
{0xA1,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0xC0,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x02,0x40,0x02,0x40,0x02,0x40,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x80,0x01,0x00,0x00,0x00},
{0xA1,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x48,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x30,0x04,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00},
{0xA1,0x49,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00},
{0xA1,0x4A,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x4B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x86,0x31,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x4C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x4D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x08,0x00,0x00,0x00},
{0xA1,0x4E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x04,0x00,0x00,0x00},
{0xA1,0x4F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x51,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x08,0x00,0x10,0x00,0x00,0x00},
{0xA1,0x52,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x53,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x61,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x54,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x55,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA1,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x57,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x00},
{0xA1,0x58,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x59,0x00,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00},
{0xA1,0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x66,0x00,0x66,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x5B,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x08,0x00},
{0xA1,0x5C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8E,0x31,0x71,0xCE,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x5D,0x00,0x00,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08},
{0xA1,0x5E,0x00,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00},
{0xA1,0x5F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF8,0x30,0x06,0x40,0x01,0x00,0x00,0x00,0x00},
{0xA1,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x30,0x06,0x0F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x61,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x30,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x04},
{0xA1,0x62,0x00,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x06,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x10,0x00},
{0xA1,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0xC0,0x3F,0x3E,0x40,0x01,0x00,0x00,0x00,0x00},
{0xA1,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x3E,0x7C,0x01,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x65,0x00,0x00,0x00,0x08,0x00,0x30,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x30,0x00,0x08},
{0xA1,0x66,0x00,0x00,0x08,0x00,0x06,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x06,0x00,0x08,0x00},
{0xA1,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFC,0x20,0x02,0x20,0x02,0x40,0x01,0x00,0x00,0x00,0x00},
{0xA1,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x20,0x02,0x20,0x02,0x1F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x69,0x00,0x00,0x00,0x7C,0x00,0x78,0x00,0x60,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x60,0x00,0x78,0x00,0x7C},
{0xA1,0x6A,0x00,0x00,0x1F,0x00,0x0F,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x0F,0x00,0x1F,0x00},
{0xA1,0x6B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x70,0x07,0x60,0x03,0x60,0x03,0x40,0x01,0x00,0x00,0x00,0x00},
{0xA1,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x40,0x03,0x60,0x03,0x70,0x07,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x6D,0x00,0x00,0x00,0x0A,0x00,0x0A,0x00,0x14,0x00,0x14,0x00,0x28,0x00,0x28,0x00,0x50,0x00,0x50,0x00,0x50,0x00,0x28,0x00,0x28,0x00,0x14,0x00,0x14,0x00,0x0A,0x00,0x0A},
{0xA1,0x6E,0x00,0x00,0x28,0x00,0x28,0x00,0x14,0x00,0x14,0x00,0x0A,0x00,0x0A,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x0A,0x00,0x0A,0x00,0x14,0x00,0x14,0x00,0x28,0x00,0x28,0x00},
{0xA1,0x6F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x06,0x30,0x19,0xCC,0x66,0x33,0x18,0x0C,0x60,0x03,0x00,0x00,0x00,0x00},
{0xA1,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x03,0x18,0x0C,0x66,0x33,0x19,0xCC,0x06,0x30,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x71,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04},
{0xA1,0x72,0x00,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00},
{0xA1,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x06,0x30,0x18,0x0C,0x60,0x03,0x00,0x00,0x00,0x00},
{0xA1,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x03,0x18,0x0C,0x06,0x30,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x75,0x00,0x00,0x00,0x7C,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x76,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x1F,0x00},
{0xA1,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x79,0x00,0x00,0x00,0x7C,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x7A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x1F,0x00,0x1F,0x00},
{0xA1,0x7B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00},
{0xA1,0x7C,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x7F,0x80,0x7F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x7D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xA1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x03,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x00,0x00,0x00},
{0xA1,0xA2,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xA3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00},
{0xA1,0xA4,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x00,0x00,0x00},
{0xA1,0xA5,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xA6,0x00,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xA7,0x00,0x00,0x00,0x12,0x00,0x24,0x00,0x36,0x00,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xA8,0x00,0x00,0x36,0x00,0x36,0x00,0x12,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xA9,0x00,0x00,0x00,0xD8,0x00,0x6C,0x00,0x24,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xAA,0x00,0x00,0x0D,0x80,0x1B,0x00,0x14,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xAB,0x00,0x00,0x06,0x00,0x03,0x80,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xAC,0x00,0x00,0x00,0x60,0x01,0xC0,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xAD,0x00,0x00,0x02,0x20,0x02,0x20,0x02,0x20,0x1F,0xFC,0x1F,0xFC,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x3F,0xF8,0x3F,0xF8,0x08,0x40,0x08,0x40,0x08,0x40,0x00,0x00},
{0xA1,0xAE,0x00,0x00,0x03,0x80,0x04,0x40,0x08,0x40,0x0C,0x40,0x0C,0x80,0x07,0x00,0x0E,0x3C,0x12,0x10,0x21,0x10,0x21,0x90,0x20,0xA0,0x30,0x62,0x18,0xB4,0x0F,0x18,0x00,0x00},
{0xA1,0xAF,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0xC0,0x30,0xC6,0x38,0xC6,0x0C,0x8C,0x02,0xB0,0x01,0xC0,0x06,0xB0,0x18,0x8C,0x31,0x86,0x31,0x86,0x01,0x80,0x00,0x80,0x00,0x00},
{0xA1,0xB0,0x00,0x00,0x00,0x00,0x20,0x04,0x11,0x88,0x09,0x90,0x04,0x20,0x02,0x40,0x19,0x98,0x19,0x98,0x02,0x40,0x04,0x20,0x09,0x90,0x11,0x88,0x20,0x04,0x00,0x00,0x00,0x00},
{0xA1,0xB1,0x00,0x00,0x01,0x80,0x02,0x40,0x02,0x00,0x01,0x00,0x00,0xC0,0x01,0x60,0x02,0x20,0x02,0x20,0x01,0x40,0x00,0x80,0x00,0x40,0x00,0x20,0x03,0x20,0x02,0x40,0x01,0x80},
{0xA1,0xB2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x60,0x02,0x40,0x02,0x40,0x02,0x40,0x04,0x80,0x04,0x80,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xB3,0x00,0x00,0x03,0xE0,0x0C,0x18,0x10,0x04,0x10,0x04,0x20,0x02,0x20,0x02,0x40,0x01,0x40,0x01,0x40,0x01,0x20,0x02,0x20,0x02,0x10,0x04,0x10,0x04,0x0C,0x18,0x03,0xE0},
{0xA1,0xB4,0x00,0x00,0x03,0xE0,0x0F,0xF8,0x1F,0xFC,0x1F,0xFC,0x3F,0xFE,0x3F,0xFE,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x3F,0xFE,0x3F,0xFE,0x1F,0xFC,0x1F,0xFC,0x0F,0xF8,0x03,0xE0},
{0xA1,0xB5,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x01,0x40,0x01,0x40,0x02,0x20,0x04,0x10,0x04,0x10,0x08,0x08,0x08,0x08,0x10,0x04,0x10,0x04,0x20,0x02,0x7F,0xFF,0x00,0x00},
{0xA1,0xB6,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x01,0xC0,0x01,0xC0,0x03,0xE0,0x07,0xF0,0x07,0xF0,0x0F,0xF8,0x0F,0xF8,0x1F,0xFC,0x1F,0xFC,0x3F,0xFE,0x7F,0xFF,0x00,0x00},
{0xA1,0xB7,0x00,0x00,0x03,0xE0,0x0C,0x18,0x10,0x04,0x11,0xC4,0x22,0x22,0x22,0x22,0x44,0x11,0x44,0x11,0x44,0x11,0x22,0x22,0x22,0x22,0x11,0xC4,0x10,0x04,0x0C,0x18,0x03,0xE0},
{0xA1,0xB8,0x00,0x00,0x00,0x80,0x00,0x80,0x01,0x40,0x01,0x20,0x02,0x10,0x7C,0x1F,0x10,0x04,0x08,0x08,0x04,0x10,0x04,0x90,0x09,0x48,0x0A,0x28,0x1C,0x1C,0x10,0x04,0x00,0x00},
{0xA1,0xB9,0x00,0x00,0x00,0x80,0x00,0x80,0x01,0xC0,0x01,0xE0,0x03,0xF0,0x7F,0xFF,0x1F,0xFC,0x0F,0xF8,0x07,0xF0,0x07,0xF0,0x0F,0x78,0x0E,0x38,0x1C,0x1C,0x10,0x04,0x00,0x00},
{0xA1,0xBA,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0x20,0x02,0x10,0x04,0x08,0x08,0x04,0x10,0x02,0x20,0x01,0x10,0x02,0x08,0x04,0x04,0x08,0x02,0x10,0x01,0x20,0x00,0xC0,0x00,0x00},
{0xA1,0xBB,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xE0,0x03,0xF0,0x07,0xF8,0x0F,0xFC,0x1F,0xFE,0x3F,0xFF,0x1F,0xFE,0x0F,0xFC,0x07,0xF8,0x03,0xF0,0x01,0xE0,0x00,0xC0,0x00,0x00},
{0xA1,0xBC,0x00,0x00,0x7F,0xFE,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x7F,0xFE,0x00,0x00},
{0xA1,0xBD,0x00,0x00,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x00,0x00},
{0xA1,0xBE,0x00,0x00,0x00,0x00,0x7F,0xFF,0x20,0x02,0x10,0x04,0x10,0x04,0x08,0x08,0x08,0x08,0x04,0x10,0x04,0x10,0x02,0x20,0x01,0x40,0x01,0x40,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA1,0xBF,0x00,0x00,0x00,0x00,0x7F,0xFF,0x3F,0xFE,0x1F,0xFC,0x1F,0xFC,0x0F,0xF8,0x0F,0xF8,0x07,0xF0,0x07,0xF0,0x03,0xE0,0x01,0xC0,0x01,0xC0,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA1,0xC0,0x00,0x00,0x03,0xE0,0x0C,0x18,0x10,0x04,0x17,0xF4,0x20,0x82,0x20,0x82,0x46,0xA1,0x44,0xF1,0x44,0x81,0x24,0x82,0x24,0x92,0x1F,0xFC,0x10,0x04,0x0C,0x18,0x03,0xE0},
{0xA1,0xC1,0x00,0x00,0x1C,0x03,0x22,0x04,0x46,0x08,0x40,0x10,0x40,0x20,0x42,0x40,0x22,0x80,0x1D,0x38,0x02,0x44,0x04,0x82,0x08,0x82,0x10,0x82,0x20,0x82,0x40,0x44,0x00,0x38},
{0xA1,0xC2,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xC3,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xC4,0x00,0x00,0x00,0xFF,0x00,0xFF,0x3C,0x00,0x66,0x00,0x66,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xC5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF},
{0xA1,0xC6,0x00,0x00,0x71,0xC7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xC7,0x00,0x00,0x7C,0x9F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xC8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x71,0xC7,0x00,0x00},
{0xA1,0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x9F,0x00,0x00},
{0xA1,0xCA,0x00,0x00,0x1C,0x1C,0x22,0x22,0x41,0xC1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xCB,0x00,0x00,0x1C,0x1C,0x22,0x22,0x41,0xC1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xCC,0x00,0x00,0x12,0x00,0x12,0x00,0x12,0x00,0x7F,0x00,0x7F,0x00,0x24,0x00,0x24,0x00,0x24,0x00,0x24,0x00,0x7F,0x00,0x7F,0x00,0x24,0x00,0x24,0x00,0x24,0x00,0x00,0x00},
{0xA1,0xCD,0x00,0x00,0x10,0x00,0x28,0x00,0x28,0x00,0x28,0x00,0x28,0x00,0x10,0x00,0x36,0x00,0x52,0x00,0x52,0x00,0x4C,0x00,0x4C,0x00,0x48,0x00,0x2E,0x00,0x10,0x00,0x00,0x00},
{0xA1,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x49,0x00,0x6B,0x00,0x2A,0x00,0x1C,0x00,0x2A,0x00,0x6B,0x00,0x49,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xCF,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00},
{0xA1,0xD0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xD1,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x08,0x10,0x04,0x20,0x02,0x40,0x01,0x80,0x01,0x80,0x02,0x40,0x04,0x20,0x08,0x10,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xD2,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xD3,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x1F,0xFC,0x00,0x00,0x00,0x00},
{0xA1,0xD4,0x00,0x3F,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x24,0x00,0xE4,0x00,0x28,0x00,0x38,0x00,0x10,0x00,0x10,0x00,0x00,0x00},
{0xA1,0xD5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x30,0x00,0xC0,0x03,0x00,0x0C,0x00,0x30,0x00,0x0C,0x00,0x03,0x00,0x00,0xC0,0x00,0x30,0x00,0x0C,0x00,0x00,0x00,0x00},
{0xA1,0xD6,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x0C,0x00,0x03,0x00,0x00,0xC0,0x00,0x30,0x00,0x0C,0x00,0x30,0x00,0xC0,0x03,0x00,0x0C,0x00,0x30,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xD7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xD8,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x70,0x03,0x80,0x0C,0x00,0x30,0x00,0x0C,0x00,0x03,0x80,0x00,0x70,0x00,0x0C,0x00,0x00,0x3F,0xFC,0x00,0x00,0x3F,0xFC,0x00,0x00},
{0xA1,0xD9,0x00,0x00,0x00,0x00,0x30,0x00,0x0E,0x00,0x01,0xC0,0x00,0x30,0x00,0x0C,0x00,0x30,0x01,0xC0,0x0E,0x00,0x30,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x3F,0xFC,0x00,0x00},
{0xA1,0xDA,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x1F,0xF8,0x01,0x00,0x01,0x00,0x01,0x00,0x1F,0xF8,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xDB,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x1C,0x22,0x22,0x41,0x41,0x40,0x81,0x40,0x81,0x41,0x41,0x22,0x22,0x1C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xDC,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00},
{0xA1,0xDD,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xDE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x7C,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xDF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x18,0x00,0x60,0x00,0x18,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x18,0x00,0x06,0x00,0x18,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x23,0x01,0x40,0xC2,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE4,0x00,0x00,0x00,0x00,0x07,0xE0,0x08,0x10,0x08,0x10,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x00,0x00,0x00,0x00},
{0xA1,0xE5,0x00,0x00,0x00,0x00,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x08,0x10,0x08,0x10,0x07,0xE0,0x00,0x00,0x00,0x00},
{0xA1,0xE6,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE7,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00},
{0xA1,0xE8,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x1F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xE9,0x00,0x00,0x00,0x08,0x00,0x18,0x00,0x28,0x00,0x48,0x00,0x88,0x01,0x08,0x02,0x08,0x04,0x08,0x08,0x08,0x10,0x08,0x20,0x08,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xEA,0x00,0x00,0x00,0x00,0x60,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x23,0x1B,0x24,0xA4,0x24,0xA4,0x24,0xA4,0x24,0x98,0x24,0xB0,0x24,0x9C,0x73,0x22,0x00,0x22,0x00,0x1C},
{0xA1,0xEB,0x00,0x00,0x00,0x00,0x38,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x09,0xB8,0x08,0xC4,0x08,0x84,0x08,0x84,0x08,0x84,0x08,0x84,0x3D,0xCE,0x00,0x00,0x00,0x00},
{0xA1,0xEC,0x00,0x00,0x01,0xC0,0x02,0x20,0x02,0x60,0x02,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x03,0x20,0x02,0x20,0x01,0xC0,0x00,0x00},
{0xA1,0xED,0x00,0x00,0x01,0xC0,0x02,0x20,0x02,0x60,0x01,0x00,0x03,0xC0,0x05,0x20,0x08,0x90,0x08,0x90,0x08,0x50,0x04,0x60,0x03,0xC0,0x00,0x20,0x03,0x20,0x01,0xC0,0x00,0x00},
{0xA1,0xEE,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0C,0x30,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00},
{0xA1,0xEF,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0C,0x30,0x0C,0x00,0x00,0x00,0x00},
{0xA1,0xF0,0x00,0x00,0x01,0xC0,0x02,0x20,0x04,0x10,0x04,0x10,0x02,0x20,0x01,0xC0,0x00,0x80,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA1,0xF1,0x00,0x00,0x00,0x80,0x01,0xC0,0x02,0xA0,0x02,0xA0,0x04,0x90,0x00,0x80,0x00,0x80,0x00,0x80,0x01,0xC0,0x02,0x20,0x04,0x10,0x04,0x10,0x02,0x20,0x01,0xC0,0x00,0x00},
{0xA1,0xF2,0x00,0x00,0x00,0x00,0x03,0xE0,0x0C,0x98,0x10,0x84,0x10,0x84,0x20,0x82,0x3F,0xFE,0x20,0x82,0x20,0x82,0x10,0x84,0x10,0x84,0x0C,0x98,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA1,0xF3,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x10,0x08,0x10,0x08,0x20,0x04,0x21,0x84,0x21,0x84,0x20,0x04,0x10,0x08,0x10,0x08,0x0C,0x30,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA1,0xF4,0x00,0x00,0x00,0x80,0x01,0xC0,0x02,0xA0,0x04,0x90,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA1,0xF5,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x90,0x02,0xA0,0x01,0xC0,0x00,0x80,0x00,0x00},
{0xA1,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x7F,0xFF,0x20,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xF7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x04,0x00,0x02,0x7F,0xFF,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x18,0x00,0x14,0x00,0x12,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xF9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x18,0x00,0x28,0x00,0x48,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xFA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x12,0x00,0x14,0x00,0x18,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xFB,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x48,0x00,0x28,0x00,0x18,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA1,0xFC,0x00,0x00,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x00,0x00},
{0xA1,0xFD,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA1,0xFE,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},
{0xA2,0x40,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00},
{0xA2,0x41,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00},
{0xA2,0x42,0x00,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10},
{0xA2,0x43,0x00,0x00,0x00,0x80,0x01,0xC0,0x02,0xA0,0x04,0x90,0x04,0xB0,0x04,0x80,0x02,0x80,0x01,0xC0,0x00,0xA0,0x00,0x90,0x06,0x90,0x04,0x90,0x04,0xA0,0x03,0xC0,0x00,0x80},
{0xA2,0x44,0x00,0x00,0x00,0x00,0x3E,0x3C,0x0C,0x10,0x04,0x10,0x06,0x20,0x3F,0xFC,0x01,0x40,0x01,0x80,0x3F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0x45,0x00,0x00,0x7F,0xFE,0x7F,0xFE,0x00,0x00,0x00,0x00,0x7F,0xFE,0x7F,0xFE,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x00},
{0xA2,0x46,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x01,0xE0,0x02,0x90,0x04,0xB0,0x04,0x80,0x04,0x80,0x04,0x80,0x04,0x90,0x02,0x90,0x01,0xE0,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA2,0x47,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x30,0x02,0x30,0x02,0x00,0x02,0x00,0x03,0x00,0x1F,0xF0,0x01,0x00,0x01,0x00,0x1D,0x04,0x23,0x08,0x22,0xF0,0x1C,0x00,0x00,0x00},
{0xA2,0x48,0x00,0x00,0x1C,0x00,0x22,0x04,0x22,0x08,0x22,0x10,0x22,0x20,0x22,0x40,0x1C,0x80,0x01,0x38,0x02,0x44,0x04,0x44,0x08,0x44,0x10,0x44,0x20,0x44,0x00,0x38,0x00,0x00},
{0xA2,0x49,0x00,0x00,0x00,0x00,0x03,0xF0,0x04,0x08,0x08,0x04,0x11,0xD4,0x12,0x24,0x12,0x24,0x12,0x24,0x12,0x68,0x11,0xB0,0x08,0x04,0x04,0x08,0x03,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0x4A,0x00,0x00,0x30,0x70,0x49,0x8A,0x4A,0x06,0x32,0x02,0x06,0x02,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x02,0x02,0x01,0x84,0x00,0x78,0x00,0x00,0x00,0x00},
{0xA2,0x4B,0x00,0x00,0x30,0x00,0x4B,0xFE,0x48,0x86,0x30,0x82,0x00,0x80,0x00,0x88,0x00,0xF8,0x00,0x88,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x07,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0x4C,0x00,0x00,0x08,0x00,0x0C,0x00,0x1A,0x00,0x2A,0x00,0x2A,0x00,0x28,0x00,0x18,0x00,0x18,0x00,0x0C,0x00,0x0A,0x00,0x2A,0x00,0x2A,0x00,0x2A,0x00,0x1C,0x00,0x08,0x00},
{0xA2,0x4D,0x00,0x00,0x21,0x00,0x51,0x00,0x52,0x00,0x52,0x00,0x54,0x00,0x24,0x00,0x08,0x00,0x08,0x00,0x12,0x00,0x15,0x00,0x25,0x00,0x25,0x00,0x45,0x00,0x42,0x00,0x00,0x00},
{0xA2,0x4E,0x00,0x00,0x00,0x00,0x1C,0x00,0x22,0x00,0x22,0x00,0x49,0x00,0x55,0x00,0x55,0x00,0x55,0x00,0x55,0x00,0x4A,0x00,0x20,0x00,0x22,0x00,0x1C,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x4F,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x02,0x00,0x02,0x00,0x02,0x5B,0x32,0x24,0x92,0x24,0x92,0x24,0x92,0x24,0x92,0x24,0x92,0x24,0x92,0x64,0xD7,0x00,0x00,0x00,0x00},
{0xA2,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x54,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x6B,0x00,0x00,0x00,0x00},
{0xA2,0x51,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xD4,0x22,0x2A,0x46,0x2A,0x40,0x2A,0x40,0x2A,0x40,0x2A,0x22,0x2A,0x1C,0x6B,0x00,0x00,0x00,0x00},
{0xA2,0x52,0x00,0x00,0x00,0x00,0x70,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x2E,0xD4,0x24,0x2A,0x28,0x2A,0x28,0x2A,0x34,0x2A,0x24,0x2A,0x22,0x2A,0x77,0x6B,0x00,0x00,0x00,0x00},
{0xA2,0x53,0x00,0x00,0x00,0x00,0x77,0x63,0x22,0x26,0x24,0x36,0x24,0x36,0x28,0x36,0x28,0x36,0x38,0x3A,0x24,0x2A,0x24,0x2A,0x22,0x2A,0x22,0x22,0x77,0x77,0x00,0x00,0x00,0x00},
{0xA2,0x54,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x09,0x00,0x02,0x00,0x04,0x5C,0xEF,0x23,0x10,0x22,0x10,0x22,0x10,0x22,0x10,0x22,0x10,0x22,0x10,0x77,0xB8,0x00,0x00,0x00,0x00},
{0xA2,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x3B,0x2A,0x44,0x2A,0x44,0x2A,0x44,0x2A,0x38,0x2A,0x60,0x2A,0x3C,0x6B,0x62,0x00,0x42,0x00,0x3C},
{0xA2,0x56,0x00,0x00,0x00,0x00,0x70,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x2E,0x3B,0x24,0x44,0x28,0x44,0x28,0x44,0x34,0x38,0x24,0x60,0x22,0x3C,0x77,0x62,0x00,0x42,0x00,0x3C},
{0xA2,0x57,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x1E,0x21,0x21,0x43,0x43,0x40,0x40,0x40,0x40,0x40,0x40,0x21,0x21,0x1E,0x1E,0x00,0x00,0x00,0x00},
{0xA2,0x58,0x00,0x00,0x18,0x00,0x24,0x00,0x24,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x59,0x00,0x00,0x0C,0x18,0x09,0x10,0x7F,0x90,0x08,0x10,0x08,0x14,0x3E,0xFE,0x22,0x10,0x22,0x10,0x22,0x10,0x3E,0x10,0x14,0x10,0x14,0x12,0x24,0x02,0x24,0x03,0x43,0xFE},
{0xA2,0x5A,0x00,0x00,0x0C,0x00,0x08,0x1C,0x7F,0x70,0x08,0x10,0x08,0x10,0x3E,0x14,0x22,0xFE,0x22,0x10,0x22,0x10,0x3E,0x10,0x14,0x12,0x14,0x12,0x24,0x12,0x24,0x03,0x43,0xFE},
{0xA2,0x5B,0x00,0x00,0x0C,0x10,0x08,0x38,0x7E,0xE0,0x08,0x20,0x08,0x3C,0x3E,0xE0,0x22,0x20,0x22,0x3C,0x22,0xE0,0x3E,0x24,0x14,0x24,0x14,0x1C,0x24,0x01,0x24,0x01,0x43,0xFF},
{0xA2,0x5C,0x00,0x00,0x0C,0x38,0x08,0x08,0x7F,0x64,0x08,0x44,0x08,0x42,0x3E,0x82,0x23,0x7D,0x22,0x24,0x22,0x24,0x3E,0x24,0x14,0x44,0x14,0x5D,0x24,0x89,0x24,0x01,0x43,0xFF},
{0xA2,0x5D,0x00,0x00,0x0C,0x04,0x08,0xFE,0x7F,0x10,0x08,0x20,0x08,0x7C,0x3E,0x44,0x22,0x44,0x22,0x7C,0x22,0x44,0x3E,0x44,0x14,0x7C,0x14,0x45,0x24,0x01,0x24,0x01,0x43,0xFF},
{0xA2,0x5E,0x00,0x00,0x0C,0x82,0x08,0xFF,0x7E,0x80,0x08,0xBE,0x08,0xAA,0x3E,0xBE,0x22,0xAA,0x22,0xBE,0x22,0x88,0x3E,0xBE,0x14,0x88,0x15,0x3E,0x25,0x01,0x24,0x01,0x43,0xFF},
{0xA2,0x5F,0x00,0x00,0x10,0x42,0x7E,0x7F,0x12,0x42,0x12,0x42,0x22,0x7E,0x2D,0x82,0x42,0x60,0x04,0x10,0x1B,0xEC,0x60,0x03,0x1F,0xFC,0x12,0x44,0x1F,0xFC,0x12,0x44,0x12,0x5C},
{0xA2,0x60,0x00,0x00,0x02,0x00,0x7F,0x0C,0x10,0x1E,0x10,0xF0,0x12,0x10,0x1E,0x10,0x12,0x12,0x12,0xFF,0x12,0x10,0x2A,0x10,0x2A,0x10,0x22,0x12,0x2E,0x12,0x72,0x03,0x21,0xFE},
{0xA2,0x61,0x00,0x00,0x0C,0x82,0x08,0xFF,0x4A,0x80,0x2A,0xBE,0x2C,0xAA,0x08,0xAA,0x7E,0xBE,0x18,0xAA,0x18,0xAA,0x2C,0xBE,0x2A,0x88,0x4A,0xBE,0x08,0x88,0x09,0x08,0x09,0x7F},
{0xA2,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x00},
{0xA2,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x68,0x00,0x00,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x69,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x7F,0xFF,0x00,0x00},
{0xA2,0x6A,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00},
{0xA2,0x6B,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x70,0x00,0x00,0x00},
{0xA2,0x6C,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x7C,0x00,0x00,0x00},
{0xA2,0x6D,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x00,0x00},
{0xA2,0x6E,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x7F,0xC0,0x00,0x00},
{0xA2,0x6F,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x7F,0xF0,0x00,0x00},
{0xA2,0x70,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x7F,0xFC,0x00,0x00},
{0xA2,0x71,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA2,0x72,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA2,0x74,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x7F,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA2,0x75,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA2,0x76,0x00,0x00,0x7F,0xFF,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x78,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA2,0x79,0x00,0x00,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03},
{0xA2,0x7A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA2,0x7B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA2,0x7C,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x7D,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x60,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA2,0xA1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x06,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA2,0xA2,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x60,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xA3,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x06,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xA4,0x00,0x00,0x00,0x80,0x00,0x80,0x3C,0x80,0x66,0x80,0x66,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xA5,0x00,0x00,0x00,0x80,0x00,0x80,0x3C,0x80,0x66,0x80,0x66,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xA6,0x00,0x00,0x00,0x80,0x00,0x80,0x3C,0x80,0x66,0x80,0x66,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xA7,0x00,0x00,0x00,0x80,0x00,0x80,0x3C,0x80,0x66,0x80,0x66,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xA8,0x00,0x00,0x00,0x01,0x00,0x03,0x00,0x07,0x00,0x0F,0x00,0x1F,0x00,0x3F,0x00,0x7F,0x00,0xFF,0x01,0xFF,0x03,0xFF,0x07,0xFF,0x0F,0xFF,0x1F,0xFF,0x3F,0xFF,0x00,0x00},
{0xA2,0xA9,0x00,0x00,0x40,0x00,0x60,0x00,0x70,0x00,0x78,0x00,0x7C,0x00,0x7E,0x00,0x7F,0x00,0x7F,0x80,0x7F,0xC0,0x7F,0xE0,0x7F,0xF0,0x7F,0xF8,0x7F,0xFC,0x7F,0xFE,0x00,0x00},
{0xA2,0xAA,0x00,0x00,0x3F,0xFF,0x1F,0xFF,0x0F,0xFF,0x07,0xFF,0x03,0xFF,0x01,0xFF,0x00,0xFF,0x00,0x7F,0x00,0x3F,0x00,0x1F,0x00,0x0F,0x00,0x07,0x00,0x03,0x00,0x01,0x00,0x00},
{0xA2,0xAB,0x00,0x00,0x7F,0xFE,0x7F,0xFC,0x7F,0xF8,0x7F,0xF0,0x7F,0xE0,0x7F,0xC0,0x7F,0x80,0x7F,0x00,0x7E,0x00,0x7C,0x00,0x78,0x00,0x70,0x00,0x60,0x00,0x40,0x00,0x00,0x00},
{0xA2,0xAC,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},
{0xA2,0xAD,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01},
{0xA2,0xAE,0x00,0x00,0x40,0x02,0x20,0x04,0x10,0x08,0x08,0x10,0x04,0x20,0x02,0x40,0x01,0x80,0x01,0x80,0x02,0x40,0x04,0x20,0x08,0x10,0x10,0x08,0x20,0x04,0x40,0x02,0x00,0x00},
{0xA2,0xAF,0x00,0x00,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x02,0x40,0x01,0x80,0x00,0x00,0x00,0x00},
{0xA2,0xB0,0x00,0x00,0x00,0x00,0x01,0x00,0x07,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xB1,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x20,0x04,0x20,0x04,0x20,0x00,0x60,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x20,0x04,0x20,0x07,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0xB2,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x60,0x04,0x20,0x00,0x20,0x00,0x40,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x04,0x20,0x04,0x20,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xB3,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0xC0,0x01,0x40,0x01,0x40,0x02,0x40,0x02,0x40,0x04,0x40,0x04,0x40,0x07,0xE0,0x00,0x40,0x00,0x40,0x01,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0xB4,0x00,0x00,0x00,0x00,0x07,0xE0,0x04,0x00,0x04,0x00,0x04,0x00,0x05,0x80,0x06,0x60,0x00,0x20,0x00,0x20,0x00,0x20,0x06,0x20,0x04,0x60,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xB5,0x00,0x00,0x00,0x00,0x01,0xC0,0x02,0x60,0x02,0x00,0x04,0x00,0x04,0x80,0x07,0x40,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x02,0x20,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xB6,0x00,0x00,0x00,0x00,0x07,0xE0,0x04,0x20,0x04,0x20,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xB7,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x20,0x04,0x20,0x04,0x20,0x06,0x40,0x03,0x80,0x02,0xC0,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xB8,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x40,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x03,0xE0,0x00,0x20,0x00,0x20,0x00,0x40,0x06,0x40,0x03,0x80,0x00,0x00,0x00,0x00},
{0xA2,0xB9,0x00,0x00,0x00,0x00,0x07,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xBA,0x00,0x00,0x00,0x00,0x3E,0x7C,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x3E,0x7C,0x00,0x00,0x00,0x00},
{0xA2,0xBB,0x00,0x00,0x00,0x00,0x7B,0xDE,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x7B,0xDE,0x00,0x00,0x00,0x00},
{0xA2,0xBC,0x00,0x00,0x00,0x00,0x7F,0xCF,0x21,0x04,0x21,0x84,0x20,0x84,0x20,0x88,0x20,0xC8,0x20,0x48,0x20,0x50,0x20,0x50,0x20,0x70,0x20,0x20,0x78,0x20,0x00,0x00,0x00,0x00},
{0xA2,0xBD,0x00,0x00,0x00,0x00,0x3E,0x3C,0x08,0x10,0x0C,0x10,0x04,0x10,0x04,0x20,0x06,0x20,0x02,0x40,0x02,0x40,0x03,0x40,0x01,0x80,0x01,0x80,0x01,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xBE,0x00,0x00,0x00,0x00,0x79,0xFF,0x30,0x84,0x10,0x84,0x10,0x84,0x11,0x04,0x19,0x04,0x09,0x04,0x0A,0x04,0x0E,0x04,0x06,0x04,0x04,0x04,0x04,0x1E,0x00,0x00,0x00,0x00},
{0xA2,0xBF,0x00,0x00,0x00,0x00,0x73,0x7F,0x62,0x24,0x22,0x24,0x22,0x24,0x24,0x24,0x34,0x24,0x14,0x24,0x14,0x24,0x18,0x24,0x18,0x24,0x08,0x24,0x08,0x7F,0x00,0x00,0x00,0x00},
{0xA2,0xC0,0x00,0x00,0x00,0x00,0x6F,0xFF,0x64,0x92,0x64,0x92,0x24,0x92,0x28,0x92,0x28,0x92,0x28,0x92,0x38,0x92,0x10,0x92,0x10,0x92,0x10,0x92,0x11,0xFF,0x00,0x00,0x00,0x00},
{0xA2,0xC1,0x00,0x00,0x00,0x00,0x7B,0xCE,0x21,0x84,0x20,0x88,0x20,0xD0,0x20,0x50,0x20,0x20,0x20,0x70,0x20,0x50,0x20,0x98,0x21,0x08,0x21,0x04,0x7F,0x8E,0x00,0x00,0x00,0x00},
{0xA2,0xC2,0x00,0x00,0x00,0x00,0x3E,0x7C,0x04,0x10,0x06,0x20,0x02,0x40,0x03,0x40,0x01,0x80,0x01,0x80,0x02,0xC0,0x02,0x40,0x04,0x60,0x08,0x30,0x3C,0x7C,0x00,0x00,0x00,0x00},
{0xA2,0xC3,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA2,0xC4,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x10,0x06,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x00,0x10,0x00,0x10,0x00,0x00},
{0xA2,0xC5,0x00,0x00,0x00,0x06,0x18,0x04,0x10,0xC4,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x04,0x00,0x04,0x00,0x00},
{0xA2,0xC6,0x00,0x00,0x00,0x18,0x20,0x10,0x10,0x10,0x08,0x20,0x06,0x20,0x01,0x40,0x00,0xC0,0x00,0xC0,0x01,0x20,0x02,0x10,0x04,0x08,0x08,0x04,0x30,0x04,0x00,0x00,0x00,0x00},
{0xA2,0xC7,0x00,0x00,0x00,0x08,0x00,0x08,0x06,0x18,0x04,0x30,0x06,0xE0,0x01,0xC0,0x06,0x60,0x0C,0x30,0x08,0x10,0x18,0x18,0x10,0x18,0x18,0x10,0x0C,0x30,0x07,0xE0,0x00,0x00},
{0xA2,0xC8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x04,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xC9,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x04,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xCA,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x04,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x00,0x00,0x00},
{0xA2,0xCB,0x00,0x00,0x01,0x80,0x01,0x04,0x7F,0xFE,0x00,0x0C,0x10,0x08,0x08,0x08,0x08,0x10,0x04,0x20,0x02,0x20,0x02,0x40,0x01,0x80,0x03,0x40,0x0C,0x30,0x70,0x0E,0x00,0x00},
{0xA2,0xCC,0x00,0x00,0x00,0x80,0x00,0x04,0x3C,0xFE,0x66,0x0C,0x66,0x08,0x06,0x08,0x0C,0x10,0x18,0x20,0x18,0x20,0x00,0x40,0x18,0x80,0x18,0x40,0x00,0x30,0x00,0x0E,0x00,0x00},
{0xA2,0xCD,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x12,0x7F,0xFF,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xA2,0xCE,0x00,0x00,0x00,0x18,0x00,0x10,0x3C,0x10,0x66,0x10,0x66,0x10,0x06,0x10,0x0C,0x12,0x18,0xFF,0x18,0x10,0x00,0x10,0x18,0x10,0x18,0x10,0x00,0x10,0x00,0x10,0x00,0x10},
{0xA2,0xCF,0x00,0x00,0x00,0x80,0x01,0x80,0x01,0x80,0x02,0xC0,0x02,0x40,0x02,0x40,0x04,0x60,0x04,0x20,0x0F,0xE0,0x08,0x30,0x08,0x10,0x10,0x18,0x3C,0x7C,0x00,0x00,0x00,0x00},
{0xA2,0xD0,0x00,0x00,0x00,0x00,0x3F,0xE0,0x08,0x30,0x08,0x10,0x08,0x10,0x08,0x20,0x0F,0xC0,0x08,0x30,0x08,0x18,0x08,0x18,0x08,0x18,0x08,0x30,0x3F,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0xD1,0x00,0x00,0x00,0x00,0x01,0xC0,0x06,0x28,0x08,0x18,0x18,0x08,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x08,0x00,0x0C,0x08,0x06,0x10,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0xD2,0x00,0x00,0x00,0x00,0x3F,0xC0,0x08,0x30,0x08,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x18,0x08,0x10,0x08,0x30,0x3F,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xD3,0x00,0x00,0x00,0x00,0x3F,0xF0,0x04,0x18,0x04,0x08,0x04,0x40,0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x40,0x04,0x00,0x04,0x08,0x04,0x18,0x3F,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0xD4,0x00,0x00,0x00,0x00,0x1F,0xF0,0x04,0x18,0x04,0x08,0x04,0x40,0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x40,0x04,0x00,0x04,0x00,0x04,0x00,0x1F,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xD5,0x00,0x00,0x00,0x00,0x03,0xC0,0x06,0x28,0x08,0x18,0x08,0x08,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x7C,0x08,0x10,0x0C,0x10,0x06,0x20,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xD6,0x00,0x00,0x00,0x00,0x1E,0x78,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x1E,0x78,0x00,0x00,0x00,0x00},
{0xA2,0xD7,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0xD8,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x0C,0x80,0x08,0x80,0x07,0x00,0x00,0x00},
{0xA2,0xD9,0x00,0x00,0x00,0x00,0x3E,0x7C,0x08,0x20,0x08,0x40,0x08,0x80,0x09,0x00,0x0B,0x00,0x0D,0x80,0x08,0xC0,0x08,0x60,0x08,0x30,0x08,0x18,0x3E,0x7E,0x00,0x00,0x00,0x00},
{0xA2,0xDA,0x00,0x00,0x00,0x00,0x1F,0x80,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x08,0x06,0x18,0x1F,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0xDB,0x00,0x00,0x00,0x00,0x70,0x0F,0x38,0x0C,0x28,0x14,0x2C,0x14,0x24,0x24,0x24,0x24,0x26,0x44,0x22,0x44,0x23,0x84,0x23,0x84,0x21,0x04,0x79,0x1F,0x00,0x00,0x00,0x00},
{0xA2,0xDC,0x00,0x00,0x00,0x00,0x38,0x1E,0x1C,0x08,0x16,0x08,0x12,0x08,0x13,0x08,0x11,0x88,0x10,0x88,0x10,0xC8,0x10,0x68,0x10,0x28,0x10,0x38,0x3C,0x18,0x00,0x00,0x00,0x00},
{0xA2,0xDD,0x00,0x00,0x00,0x00,0x03,0xE0,0x04,0x10,0x08,0x08,0x08,0x08,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x08,0x08,0x08,0x08,0x04,0x10,0x03,0xE0,0x00,0x00},
{0xA2,0xDE,0x00,0x00,0x00,0x00,0x1F,0xC0,0x04,0x30,0x04,0x18,0x04,0x18,0x04,0x18,0x04,0x30,0x07,0xC0,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x1F,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xDF,0x00,0x00,0x00,0x00,0x07,0xC0,0x08,0x20,0x08,0x20,0x10,0x10,0x30,0x18,0x30,0x18,0x30,0x18,0x10,0x10,0x17,0x90,0x08,0x50,0x08,0x60,0x07,0xD8,0x00,0x0E,0x00,0x00},
{0xA2,0xE0,0x00,0x00,0x00,0x00,0x1F,0x80,0x04,0x60,0x04,0x30,0x04,0x30,0x04,0x30,0x04,0x60,0x07,0x80,0x04,0xC0,0x04,0x40,0x04,0x60,0x04,0x30,0x1F,0x38,0x00,0x00,0x00,0x00},
{0xA2,0xE1,0x00,0x00,0x00,0x00,0x03,0x80,0x04,0x50,0x08,0x30,0x08,0x10,0x08,0x00,0x04,0x00,0x03,0x80,0x00,0xE0,0x00,0x30,0x08,0x10,0x0C,0x10,0x0A,0x20,0x01,0xC0,0x00,0x00},
{0xA2,0xE2,0x00,0x00,0x00,0x00,0x0F,0xF8,0x18,0x8C,0x10,0x84,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x07,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0xE3,0x00,0x00,0x00,0x00,0x3E,0x3C,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x10,0x08,0x10,0x0C,0x20,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xE4,0x00,0x00,0x00,0x00,0x3E,0x3C,0x18,0x10,0x08,0x10,0x0C,0x20,0x0C,0x20,0x04,0x40,0x06,0x40,0x06,0x40,0x02,0x80,0x03,0x80,0x03,0x00,0x01,0x00,0x00,0x00,0x00,0x00},
{0xA2,0xE5,0x00,0x00,0x00,0x00,0x7B,0xCF,0x31,0x84,0x31,0x84,0x10,0x84,0x18,0xC8,0x19,0xC8,0x19,0x48,0x0A,0x50,0x0E,0x70,0x0E,0x70,0x04,0x20,0x04,0x20,0x00,0x00,0x00,0x00},
{0xA2,0xE6,0x00,0x00,0x00,0x00,0x3E,0x78,0x0C,0x20,0x04,0x40,0x06,0x40,0x03,0x80,0x01,0x00,0x03,0x80,0x02,0xC0,0x04,0x40,0x08,0x60,0x08,0x30,0x3C,0x7C,0x00,0x00,0x00,0x00},
{0xA2,0xE7,0x00,0x00,0x00,0x00,0x3E,0x7C,0x18,0x10,0x0C,0x20,0x04,0x20,0x06,0x40,0x03,0x40,0x03,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xE8,0x00,0x00,0x00,0x00,0x07,0xF0,0x0C,0x30,0x08,0x60,0x00,0x40,0x00,0xC0,0x01,0x80,0x01,0x00,0x03,0x00,0x06,0x00,0x04,0x08,0x0C,0x18,0x1F,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0xE9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x0C,0x40,0x00,0x40,0x01,0xC0,0x06,0x40,0x0C,0x40,0x0C,0x40,0x07,0xB0,0x00,0x00,0x00,0x00},
{0xA2,0xEA,0x00,0x00,0x00,0x00,0x04,0x00,0x0C,0x00,0x04,0x00,0x04,0x00,0x05,0xC0,0x06,0x20,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x06,0x20,0x05,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xEB,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x04,0x10,0x04,0x30,0x0C,0x00,0x0C,0x00,0x04,0x10,0x04,0x20,0x03,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xEC,0x00,0x00,0x00,0x20,0x00,0x60,0x00,0x20,0x00,0x20,0x00,0x20,0x03,0xA0,0x04,0x60,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x04,0x60,0x03,0xB0,0x00,0x00,0x00,0x00},
{0xA2,0xED,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x06,0x20,0x04,0x30,0x0C,0x10,0x0F,0xF0,0x0C,0x00,0x0C,0x00,0x04,0x10,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA2,0xEE,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0x20,0x01,0x60,0x01,0x00,0x07,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xEF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x04,0xB0,0x08,0x40,0x08,0x40,0x04,0x80,0x03,0x00,0x0C,0x00,0x0F,0xC0,0x10,0x20,0x10,0x20,0x0F,0xC0},
{0xA2,0xF0,0x00,0x00,0x00,0x00,0x1C,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x05,0xC0,0x06,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x1E,0x70,0x00,0x00,0x00,0x00},
{0xA2,0xF1,0x00,0x00,0x00,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xF2,0x00,0x00,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x05,0x00,0x02,0x00},
{0xA2,0xF3,0x00,0x00,0x00,0x00,0x04,0x00,0x0C,0x00,0x04,0x00,0x04,0x00,0x04,0xF0,0x04,0x40,0x04,0x80,0x07,0x00,0x04,0x80,0x04,0xC0,0x04,0x40,0x1E,0xF0,0x00,0x00,0x00,0x00},
{0xA2,0xF4,0x00,0x00,0x00,0x00,0x01,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xF5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6E,0x70,0x31,0x88,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x21,0x08,0x73,0x9C,0x00,0x00,0x00,0x00},
{0xA2,0xF6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1D,0xC0,0x06,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x0E,0x70,0x00,0x00,0x00,0x00},
{0xA2,0xF7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x20,0x0C,0x30,0x08,0x10,0x08,0x10,0x08,0x10,0x0C,0x30,0x04,0x20,0x03,0xC0,0x00,0x00},
{0xA2,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1D,0xC0,0x06,0x20,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x06,0x20,0x05,0xC0,0x04,0x00,0x0E,0x00},
{0xA2,0xF9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xA0,0x04,0x60,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x04,0x60,0x03,0xA0,0x00,0x20,0x00,0x70},
{0xA2,0xFA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0xC0,0x03,0x20,0x02,0x60,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x0F,0x80,0x00,0x00,0x00,0x00},
{0xA2,0xFB,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xA0,0x04,0x60,0x04,0x20,0x04,0x00,0x03,0x00,0x00,0xC0,0x00,0x20,0x04,0x20,0x06,0x20,0x05,0xC0,0x00,0x00},
{0xA2,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x20,0x00,0xC0,0x00,0x00,0x00,0x00},
{0xA2,0xFD,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xE0,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x60,0x03,0xB0,0x00,0x00,0x00,0x00},
{0xA2,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x70,0x04,0x20,0x04,0x40,0x06,0x40,0x02,0x80,0x02,0x80,0x01,0x80,0x01,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7B,0x9C,0x11,0x08,0x11,0x90,0x1A,0x90,0x0A,0x90,0x0A,0x60,0x0C,0x60,0x04,0x40,0x00,0x00,0x00,0x00},
{0xA3,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0xF0,0x04,0x40,0x02,0x80,0x03,0x00,0x01,0x80,0x02,0x80,0x04,0x40,0x1E,0xF0,0x00,0x00,0x00,0x00},
{0xA3,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x70,0x04,0x20,0x04,0x40,0x06,0x40,0x02,0x80,0x03,0x00,0x01,0x00,0x0D,0x00,0x09,0x00,0x06,0x00},
{0xA3,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x0C,0x40,0x08,0x80,0x01,0x00,0x01,0x00,0x02,0x20,0x04,0x60,0x0F,0xC0,0x00,0x00,0x00,0x00},
{0xA3,0x44,0x00,0x00,0x00,0x80,0x01,0x80,0x01,0x80,0x02,0xC0,0x02,0x40,0x02,0x40,0x04,0x60,0x04,0x20,0x0F,0xE0,0x08,0x30,0x08,0x10,0x10,0x18,0x3C,0x7C,0x00,0x00,0x00,0x00},
{0xA3,0x45,0x00,0x00,0x00,0x00,0x3F,0xE0,0x08,0x30,0x08,0x10,0x08,0x10,0x08,0x20,0x0F,0xC0,0x08,0x30,0x08,0x18,0x08,0x18,0x08,0x18,0x08,0x30,0x3F,0xE0,0x00,0x00,0x00,0x00},
{0xA3,0x46,0x00,0x00,0x00,0x00,0x1F,0xF0,0x04,0x18,0x04,0x08,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x1F,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x47,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x80,0x02,0x80,0x02,0xC0,0x04,0x40,0x04,0x60,0x04,0x20,0x08,0x30,0x08,0x10,0x10,0x10,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x48,0x00,0x00,0x00,0x00,0x3F,0xF0,0x04,0x18,0x04,0x08,0x04,0x40,0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x40,0x04,0x00,0x04,0x08,0x04,0x18,0x3F,0xF0,0x00,0x00,0x00,0x00},
{0xA3,0x49,0x00,0x00,0x00,0x00,0x07,0xF0,0x0C,0x30,0x08,0x60,0x00,0x40,0x00,0xC0,0x01,0x80,0x01,0x00,0x03,0x00,0x06,0x00,0x04,0x08,0x0C,0x18,0x1F,0xF0,0x00,0x00,0x00,0x00},
{0xA3,0x4A,0x00,0x00,0x00,0x00,0x1E,0x78,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x1E,0x78,0x00,0x00,0x00,0x00},
{0xA3,0x4B,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x04,0x10,0x08,0x08,0x08,0x08,0x10,0x04,0x1F,0xFC,0x10,0x04,0x08,0x08,0x08,0x08,0x04,0x10,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA3,0x4C,0x00,0x00,0x00,0x00,0x07,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x07,0xC0,0x00,0x00,0x00,0x00},
{0xA3,0x4D,0x00,0x00,0x00,0x00,0x3E,0x78,0x08,0x20,0x08,0x40,0x08,0x80,0x09,0x00,0x0B,0x00,0x0D,0x80,0x08,0xC0,0x08,0x60,0x08,0x30,0x08,0x18,0x3E,0x7C,0x00,0x00,0x00,0x00},
{0xA3,0x4E,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x80,0x01,0x80,0x02,0xC0,0x02,0x40,0x02,0x60,0x04,0x20,0x04,0x20,0x04,0x30,0x08,0x10,0x08,0x18,0x1E,0x3C,0x00,0x00,0x00,0x00},
{0xA3,0x4F,0x00,0x00,0x00,0x00,0x70,0x0F,0x38,0x0C,0x28,0x14,0x2C,0x14,0x24,0x24,0x24,0x24,0x26,0x44,0x22,0x44,0x23,0x84,0x23,0x84,0x21,0x04,0x79,0x1F,0x00,0x00,0x00,0x00},
{0xA3,0x50,0x00,0x00,0x00,0x00,0x38,0x1E,0x1C,0x08,0x16,0x08,0x12,0x08,0x13,0x08,0x11,0x88,0x10,0x88,0x10,0xC8,0x10,0x68,0x10,0x28,0x10,0x38,0x3C,0x18,0x00,0x00,0x00,0x00},
{0xA3,0x51,0x00,0x00,0x00,0x00,0x07,0xF0,0x08,0x08,0x08,0x08,0x00,0x00,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x00,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x00,0x00,0x00,0x00},
{0xA3,0x52,0x00,0x00,0x00,0x00,0x03,0xE0,0x04,0x10,0x08,0x08,0x08,0x08,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x08,0x08,0x08,0x08,0x04,0x10,0x03,0xE0,0x00,0x00},
{0xA3,0x53,0x00,0x00,0x00,0x00,0x1F,0xF8,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x1E,0x78,0x00,0x00,0x00,0x00},
{0xA3,0x54,0x00,0x00,0x00,0x00,0x1F,0xC0,0x04,0x30,0x04,0x18,0x04,0x18,0x04,0x18,0x04,0x30,0x07,0xC0,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x1F,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x55,0x00,0x00,0x00,0x00,0x1F,0xE0,0x18,0x30,0x0C,0x10,0x06,0x00,0x03,0x00,0x01,0x80,0x00,0xC0,0x01,0x00,0x02,0x00,0x04,0x08,0x08,0x18,0x1F,0xF0,0x00,0x00,0x00,0x00},
{0xA3,0x56,0x00,0x00,0x00,0x00,0x0F,0xF8,0x18,0x8C,0x10,0x84,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x07,0xF0,0x00,0x00,0x00,0x00},
{0xA3,0x57,0x00,0x00,0x00,0x00,0x0E,0x38,0x11,0x44,0x11,0x44,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA3,0x58,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x80,0x03,0xE0,0x0C,0x98,0x18,0x8C,0x10,0x84,0x10,0x84,0x18,0x8C,0x0C,0x98,0x03,0xE0,0x00,0x80,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA3,0x59,0x00,0x00,0x00,0x00,0x3E,0x78,0x0C,0x20,0x04,0x40,0x06,0x40,0x03,0x80,0x01,0x00,0x03,0x80,0x02,0xC0,0x04,0x40,0x08,0x60,0x08,0x30,0x3C,0x7C,0x00,0x00,0x00,0x00},
{0xA3,0x5A,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x80,0x30,0x86,0x50,0x85,0x18,0x8C,0x08,0x88,0x0C,0x98,0x04,0x90,0x03,0xE0,0x00,0x80,0x00,0x80,0x03,0xE0,0x00,0x00,0x00,0x00},
{0xA3,0x5B,0x00,0x00,0x00,0x00,0x03,0xC0,0x04,0x30,0x08,0x10,0x18,0x18,0x18,0x18,0x18,0x18,0x08,0x10,0x04,0x20,0x04,0x20,0x12,0x48,0x1E,0x78,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x5C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x88,0x02,0x50,0x04,0x50,0x08,0x60,0x08,0x40,0x08,0xC0,0x09,0x50,0x06,0x20,0x00,0x00,0x00,0x00},
{0xA3,0x5D,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x10,0x02,0x10,0x02,0x10,0x04,0x20,0x05,0xC0,0x04,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x1C,0xC0,0x13,0x80,0x10,0x00,0x20,0x00},
{0xA3,0x5E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x30,0x09,0x60,0x01,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x00,0x00},
{0xA3,0x5F,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x01,0x20,0x01,0x10,0x00,0x80,0x06,0x40,0x0C,0x40,0x08,0x40,0x08,0x40,0x08,0xC0,0x0D,0x80,0x02,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x20,0x02,0x00,0x01,0x80,0x02,0x40,0x06,0x00,0x06,0x20,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x61,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x04,0x00,0x05,0xE0,0x07,0xE0,0x04,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x0F,0x80,0x00,0x40,0x00,0x40,0x07,0x80},
{0xA3,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x70,0x0A,0x90,0x03,0x20,0x02,0x20,0x04,0x20,0x04,0x40,0x0C,0x40,0x00,0xC0,0x00,0x80,0x00,0x00},
{0xA3,0x63,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0x20,0x02,0x20,0x02,0x20,0x04,0x20,0x07,0xE0,0x04,0x40,0x08,0x40,0x08,0x40,0x08,0x80,0x09,0x00,0x06,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x40,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x30,0x02,0x60,0x02,0x40,0x05,0x80,0x06,0x80,0x04,0x80,0x08,0x90,0x08,0x60,0x00,0x00,0x00,0x00},
{0xA3,0x66,0x00,0x00,0x00,0x00,0x02,0x00,0x05,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x01,0x80,0x02,0x80,0x04,0x80,0x04,0x80,0x08,0x90,0x00,0x60,0x00,0x00,0x00,0x00},
{0xA3,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x06,0x60,0x04,0x40,0x04,0x40,0x04,0x80,0x0C,0x80,0x0B,0x60,0x08,0x00,0x10,0x00,0x00,0x00},
{0xA3,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x10,0x02,0x20,0x02,0x20,0x06,0x40,0x04,0x40,0x04,0x80,0x07,0x00,0x04,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x69,0x00,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x01,0xE0,0x03,0xC0,0x04,0x00,0x04,0x00,0x03,0xC0,0x06,0xE0,0x08,0x00,0x08,0x00,0x08,0x00,0x07,0x00,0x00,0x80,0x03,0x00},
{0xA3,0x6A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x20,0x0C,0x20,0x08,0x20,0x08,0x60,0x04,0x40,0x03,0x80,0x00,0x00,0x00,0x00},
{0xA3,0x6B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x0F,0xF0,0x09,0x40,0x02,0x40,0x02,0x40,0x04,0x80,0x0C,0xA0,0x08,0xC0,0x00,0x00,0x00,0x00},
{0xA3,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x04,0x40,0x08,0x40,0x08,0x40,0x08,0x40,0x0C,0xC0,0x13,0x80,0x10,0x00,0x10,0x00,0x20,0x00},
{0xA3,0x6D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x03,0xF8,0x06,0xC0,0x04,0x60,0x08,0x20,0x08,0x60,0x08,0x40,0x04,0xC0,0x03,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x03,0xB0,0x0F,0xE0,0x09,0x00,0x01,0x00,0x01,0x00,0x02,0x40,0x02,0x80,0x03,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x6F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x10,0x0D,0x10,0x01,0x10,0x02,0x10,0x02,0x20,0x02,0x20,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x60,0x08,0x90,0x08,0x98,0x18,0x98,0x19,0x10,0x09,0x10,0x05,0x20,0x03,0xC0,0x02,0x00,0x04,0x00,0x04,0x00},
{0xA3,0x71,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x10,0x05,0x20,0x01,0x40,0x01,0x80,0x01,0x00,0x03,0x00,0x05,0x00,0x09,0x90,0x18,0xA0,0x00,0x60},
{0xA3,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x80,0x04,0x80,0x0C,0xA0,0x19,0x10,0x11,0x10,0x11,0x10,0x0A,0x20,0x07,0xC0,0x02,0x00,0x02,0x00,0x04,0x00},
{0xA3,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x30,0x08,0x08,0x10,0x88,0x11,0x48,0x11,0x88,0x11,0x90,0x0E,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x74,0x00,0x00,0x03,0x00,0x02,0x00,0x04,0x0C,0x08,0xFC,0x1F,0x04,0x10,0x0C,0x00,0x08,0x00,0x08,0x00,0x18,0x00,0x10,0x04,0x30,0x03,0x20,0x01,0xC0,0x00,0x80,0x00,0x00},
{0xA3,0x75,0x00,0x00,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x3C,0x03,0xCC,0x06,0x08,0x04,0x10,0x01,0x20,0x00,0xC0,0x00,0x60,0x00,0xB0,0x03,0x18,0x0C,0x08,0x30,0x00,0x00,0x00},
{0xA3,0x76,0x00,0x00,0x00,0x00,0x00,0x38,0x23,0xCC,0x3C,0x0C,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x00,0x08,0x00,0x00,0x00,0x00},
{0xA3,0x77,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xF8,0x3F,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x0C,0x00,0x07,0xFC,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0x78,0x00,0x00,0x03,0x00,0x02,0x00,0x06,0x00,0x04,0x1C,0x08,0x66,0x1F,0x86,0x11,0x04,0x03,0x04,0x02,0x04,0x04,0x08,0x04,0x08,0x08,0x90,0x10,0x70,0x00,0x20,0x00,0x00},
{0xA3,0x79,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x8C,0x01,0xFE,0x7F,0x00,0x01,0x00,0x02,0x40,0x02,0x20,0x04,0x50,0x0F,0x98,0x08,0x08,0x00,0x00},
{0xA3,0x7A,0x00,0x00,0x00,0x70,0x01,0xB0,0x1E,0x20,0x00,0x20,0x00,0x40,0x00,0xF8,0x00,0x88,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x04,0x60,0x03,0xC0,0x01,0x00,0x00,0x00},
{0xA3,0x7B,0x00,0x00,0x00,0xC0,0x08,0xC0,0x08,0x80,0x10,0x98,0x13,0xEC,0x3D,0x0C,0x21,0x08,0x02,0x08,0x02,0x08,0x04,0x08,0x04,0x10,0x09,0x10,0x10,0xE0,0x20,0x40,0x00,0x00},
{0xA3,0x7C,0x00,0x00,0x02,0x10,0x03,0x18,0x03,0x18,0x04,0x10,0x04,0x20,0x08,0x20,0x08,0x40,0x10,0x80,0x08,0x40,0x04,0x20,0x06,0x30,0x02,0x10,0x03,0x18,0x01,0x08,0x00,0x00},
{0xA3,0x7D,0x00,0x00,0x00,0x00,0x00,0x0C,0x01,0xFE,0x3F,0x00,0x01,0x00,0x01,0x18,0x03,0xEC,0x06,0x0C,0x04,0x18,0x00,0x10,0x00,0x30,0x02,0x20,0x01,0xC0,0x00,0x80,0x00,0x00},
{0xA3,0x7E,0x00,0x00,0x00,0x0C,0x08,0x3E,0x0F,0xC0,0x04,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},
{0xA3,0xA1,0x00,0x00,0x00,0x40,0x00,0x60,0x08,0x60,0x0C,0x20,0x0C,0x20,0x04,0x20,0x04,0x60,0x04,0xA0,0x07,0x20,0x0E,0x20,0x04,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00},
{0xA3,0xA2,0x00,0x00,0x00,0x20,0x00,0x30,0x00,0x60,0x00,0x40,0x01,0x80,0x02,0x00,0x0C,0x00,0x0C,0x00,0x03,0x00,0x00,0x80,0x00,0x40,0x00,0x30,0x00,0x18,0x00,0x08,0x00,0x00},
{0xA3,0xA3,0x00,0x00,0x00,0x0C,0x00,0xFE,0x3F,0x80,0x00,0x80,0x00,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x00},
{0xA3,0xA4,0x00,0x00,0x00,0x00,0x02,0x00,0x03,0x10,0x01,0x18,0x21,0x18,0x31,0x10,0x11,0x10,0x11,0xF8,0x3F,0x10,0x11,0x00,0x01,0x00,0x01,0x0C,0x01,0xFE,0x7E,0x00,0x00,0x00},
{0xA3,0xA5,0x00,0x00,0x00,0x30,0x00,0x20,0x00,0x40,0x01,0x98,0x06,0x10,0x00,0x20,0x00,0x60,0x00,0xA0,0x03,0x20,0x0C,0x20,0x30,0x60,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x00},
{0xA3,0xA6,0x00,0x00,0x00,0x1C,0x07,0xE6,0x00,0x06,0x00,0x0C,0x08,0x78,0x0F,0x80,0x0C,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00},
{0xA3,0xA7,0x00,0x00,0x00,0x08,0x20,0xFC,0x37,0x0C,0x30,0x0C,0x10,0x08,0x12,0x08,0x11,0x88,0x10,0xC8,0x10,0x48,0x10,0x08,0x10,0x18,0x1F,0xF0,0x10,0x10,0x00,0x00,0x00,0x00},
{0xA3,0xA8,0x00,0x00,0x00,0x18,0x31,0xFC,0x1F,0x0C,0x01,0x08,0x01,0x08,0x01,0x18,0x01,0x10,0x01,0x70,0x01,0x20,0x03,0x00,0x03,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x00},
{0xA3,0xA9,0x00,0x00,0x01,0x00,0x01,0x80,0x01,0x80,0x01,0x0C,0x01,0xFE,0x7F,0x00,0x01,0x00,0x01,0x00,0x02,0x60,0x07,0xB0,0x04,0x30,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x00},
{0xA3,0xAA,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x80,0x01,0x80,0x03,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x04,0x20,0x08,0x10,0x11,0xE8,0x3E,0x0C,0x20,0x04,0x00,0x00,0x00,0x00},
{0xA3,0xAB,0x00,0x00,0x00,0x00,0x38,0x18,0x0C,0x10,0x06,0x20,0x02,0x40,0x01,0x80,0x00,0x80,0x00,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0x00,0x00,0x00},
{0xA3,0xAC,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0xFE,0x3F,0x40,0x00,0x40,0x00,0x40,0x03,0xC0,0x04,0x80,0x08,0x00,0x08,0x08,0x04,0x10,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xAD,0x00,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x8C,0x00,0xFE,0x3F,0x40,0x00,0x40,0x03,0xC0,0x0C,0x40,0x10,0x00,0x10,0x00,0x10,0x08,0x08,0x30,0x07,0xC0,0x00,0x00},
{0xA3,0xAE,0x00,0x00,0x00,0x00,0x08,0x40,0x0C,0x60,0x04,0x60,0x04,0x20,0x04,0x2C,0x07,0xFE,0x7C,0x40,0x04,0x40,0x04,0x80,0x04,0x80,0x04,0x18,0x03,0xFC,0x00,0x00,0x00,0x00},
{0xA3,0xAF,0x00,0x00,0x00,0x0C,0x00,0xFE,0x3F,0x80,0x00,0x80,0x10,0x98,0x11,0xFC,0x3F,0x04,0x21,0x0C,0x23,0x08,0x02,0x08,0x02,0x18,0x04,0x10,0x04,0x10,0x08,0x20,0x00,0x00},
{0xA3,0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x06,0xC0,0x38,0xC0,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x30,0x00,0x18,0x00,0x0E,0x00,0x00,0x00,0x00},
{0xA3,0xB1,0x00,0x00,0x01,0x00,0x01,0x80,0x01,0x90,0x03,0x18,0x02,0x18,0x04,0x30,0x09,0xA0,0x1E,0x40,0x10,0x80,0x01,0x00,0x02,0x10,0x0C,0x68,0x1F,0x8C,0x10,0x04,0x00,0x00},
{0xA3,0xB2,0x00,0x00,0x00,0x30,0x00,0xF8,0x0F,0x98,0x00,0x10,0x00,0x30,0x02,0x20,0x01,0x40,0x00,0xC0,0x01,0xE0,0x03,0x30,0x02,0x18,0x04,0x0C,0x08,0x04,0x10,0x00,0x00,0x00},
{0xA3,0xB3,0x00,0x00,0x00,0x60,0x00,0xF0,0x1F,0x10,0x04,0x20,0x04,0x20,0x08,0x4C,0x08,0xFE,0x1F,0x06,0x10,0x0C,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00,0x00},
{0xA3,0xB4,0x00,0x00,0x10,0x00,0x18,0x00,0x18,0x00,0x10,0x00,0x10,0x00,0x20,0x30,0x23,0xF8,0x7C,0x08,0x40,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x00},
{0xA3,0xB5,0x00,0x00,0x02,0x00,0x03,0x00,0x03,0x00,0x01,0x30,0x01,0xFC,0x7F,0x00,0x03,0x00,0x03,0x00,0x05,0x00,0x05,0x00,0x09,0x00,0x11,0x00,0x20,0x98,0x40,0x7C,0x00,0x00},
{0xA3,0xB6,0x00,0x00,0x01,0x00,0x01,0x80,0x01,0x80,0x01,0x00,0x03,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x08,0x00,0x08,0x18,0x10,0x7C,0x3F,0x80,0x20,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xB7,0x00,0x00,0x00,0x00,0x08,0x80,0x0C,0xC0,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x0C,0x40,0x08,0x40,0x08,0x44,0x10,0x46,0x10,0x3C,0x20,0x00,0x00,0x00},
{0xA3,0xB8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xB9,0x00,0x00,0x00,0x10,0x00,0x18,0x08,0x18,0x04,0x10,0x02,0x20,0x01,0x60,0x00,0xC0,0x00,0xC0,0x01,0x20,0x02,0x30,0x04,0x18,0x08,0x08,0x30,0x0C,0x40,0x04,0x00,0x00},
{0xA3,0xBA,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x18,0x18,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x1F,0x88,0x18,0x08,0x10,0x00,0x00,0x00},
{0xA3,0xBB,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xBC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xBD,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x80,0x03,0x00,0x06,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xBE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x20,0x06,0x20,0x02,0x40,0x01,0x40,0x01,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA3,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x06,0x00,0x03,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA4,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0xA4,0x41,0x00,0x00,0x00,0x10,0x7F,0xF8,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x02,0x40,0x02,0x40,0x03,0x3F,0xFE,0x00,0x00},
{0xA4,0x42,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x43,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x02,0x02,0x1F,0x03,0xE0,0x7E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x02,0x02,0x02,0x02,0x03,0x01,0xFE,0x00,0x00},
{0xA4,0x44,0x00,0x00,0x00,0x20,0x7F,0xF0,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x42,0x08,0x7F,0x08,0x42,0x08,0x02,0x08,0x02,0x10,0x02,0x10,0x04,0x20,0x44,0x20,0x38,0x40,0x10},
{0xA4,0x45,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x20,0x7F,0xF0,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x22,0x10,0x22,0x20,0x23,0x40,0x1E},
{0xA4,0x46,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x04,0x00,0x18,0x00,0x20,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x47,0x00,0x00,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x00,0x00,0x00},
{0xA4,0x48,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x80,0x02,0x80,0x02,0x40,0x02,0x40,0x04,0x20,0x04,0x20,0x08,0x10,0x08,0x08,0x10,0x07,0x60,0x02},
{0xA4,0x49,0x00,0x00,0x06,0x60,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x08,0x40,0x08,0x40,0x08,0x40,0x10,0x42,0x10,0x42,0x20,0x43,0x40,0x3E},
{0xA4,0x4A,0x00,0x00,0x00,0x80,0x3F,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x01,0x40,0x01,0x40,0x02,0x40,0x02,0x20,0x04,0x20,0x04,0x10,0x08,0x08,0x10,0x07,0x60,0x02},
{0xA4,0x4B,0x00,0x40,0x03,0xE0,0x00,0x40,0x06,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x20,0x08,0x20,0x08,0x20,0x08,0x10,0x10,0x10,0x10,0x08,0x20,0x07,0x40,0x02},
{0xA4,0x4C,0x00,0x00,0x08,0x20,0x0F,0xF0,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x10,0x20,0x10,0x20,0x10,0x22,0x20,0x22,0x20,0x23,0x40,0x1E},
{0xA4,0x4D,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x04,0x02,0x04,0x02,0x04,0x02,0x08,0x04,0x08,0x04,0x10,0x04,0x10,0x44,0x20,0x38,0x40,0x10},
{0xA4,0x4E,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x02,0x00,0x02,0x00,0x12,0x00,0x22,0x00,0x42,0x00,0x82,0x01,0x02,0x06,0x04,0x18,0x04,0x70,0x04,0x20,0x44,0x00,0x38,0x00,0x10},
{0xA4,0x4F,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x02,0x7F,0xFF,0x01,0x02,0x01,0x02,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x04,0x04,0x04,0x04,0x08,0x44,0x10,0x38,0x60,0x10},
{0xA4,0x50,0x00,0x00,0x30,0x00,0x20,0x00,0x20,0x00,0x20,0x0C,0x20,0x10,0x20,0x60,0x23,0x80,0x3C,0x00,0x20,0x00,0x20,0x00,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE,0x00,0x00},
{0xA4,0x51,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0x52,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x03,0x00,0x02,0xC0,0x02,0x30,0x02,0x18,0x02,0x0C,0x02,0x04,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00},
{0xA4,0x53,0x00,0x00,0x00,0x08,0x7F,0xFC,0x00,0x08,0x08,0x08,0x18,0x10,0x34,0x10,0x24,0x20,0x02,0x20,0x01,0x40,0x00,0x80,0x01,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0x54,0x00,0x00,0x00,0x08,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x00},
{0xA4,0x55,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x80,0x01,0x60,0x01,0x18,0x01,0x08,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA4,0x56,0x00,0x00,0x00,0x30,0x00,0x20,0x00,0x22,0x7F,0xFF,0x00,0x20,0x18,0x20,0x14,0x40,0x24,0x40,0x22,0x80,0x01,0x00,0x01,0x80,0x02,0x60,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0x57,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x08,0x01,0xFC,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x02,0x7F,0xFF,0x00,0x00},
{0xA4,0x58,0x00,0x00,0x20,0x06,0x10,0x04,0x0C,0x08,0x02,0x10,0x02,0xA0,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0x59,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x10,0x7F,0xF8,0x02,0x10,0x02,0x10,0x02,0x10,0x02,0x10,0x06,0x10,0x05,0x90,0x08,0xD0,0x08,0x52,0x10,0x12,0x20,0x13,0x40,0x0E},
{0xA4,0x5A,0x00,0x00,0x08,0x20,0x0F,0xF0,0x08,0x20,0x08,0x20,0x0A,0x20,0x09,0x20,0x09,0x20,0x08,0xA0,0x08,0xA0,0x10,0x20,0x10,0x20,0x10,0x22,0x20,0x22,0x20,0x23,0x40,0x1E},
{0xA4,0x5B,0x00,0x00,0x06,0x00,0x04,0x00,0x04,0x20,0x07,0xF0,0x08,0x40,0x08,0x40,0x10,0x80,0x60,0x80,0x01,0x40,0x01,0x40,0x02,0x20,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0x5C,0x00,0x00,0x01,0x80,0x01,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x08,0xC0,0x10,0x80,0x60,0x80,0x01,0x00,0x02,0x10,0x02,0x08,0x04,0x0C,0x08,0xF6,0x3F,0x02,0x10,0x02},
{0xA4,0x5D,0x00,0x00,0x00,0xC0,0x18,0x80,0x10,0x84,0x10,0x9E,0x10,0xE4,0x17,0x84,0x78,0x84,0x10,0x84,0x10,0x88,0x10,0xB8,0x10,0x90,0x10,0x02,0x10,0x02,0x10,0x03,0x0F,0xFE},
{0xA4,0x5E,0x00,0x00,0x0C,0x00,0x08,0x04,0x1F,0xFE,0x10,0x00,0x20,0x10,0x4F,0xF8,0x00,0x10,0x00,0x20,0x00,0xC0,0x01,0x00,0x06,0x00,0x08,0x02,0x10,0x02,0x10,0x03,0x0F,0xFE},
{0xA4,0x5F,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x60,0x00,0x00,0x00,0xC0,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1F,0xFE,0x00,0x00},
{0xA4,0x61,0x00,0x00,0x00,0x02,0x7F,0xFF,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x08,0x40,0x08,0x40,0x08,0x40,0x10,0x42,0x10,0x42,0x20,0x43,0x40,0x3E},
{0xA4,0x62,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x02,0x01,0x02,0x01,0x02,0x41,0x02,0x22,0x02,0x1A,0x02,0x0A,0x02,0x04,0x04,0x04,0x04,0x08,0x04,0x08,0x44,0x10,0x38,0x60,0x10},
{0xA4,0x63,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x10,0x02,0x10,0x02,0x20,0x02,0x20,0x22,0x4F,0xF2,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA4,0x64,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0x65,0x00,0x00,0x00,0x08,0x7F,0xFC,0x00,0x08,0x0A,0x10,0x19,0x10,0x34,0x90,0x24,0xA0,0x02,0x20,0x01,0x40,0x00,0x80,0x01,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0x66,0x00,0x00,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x00,0x00},
{0xA4,0x67,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xA4,0x68,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE},
{0xA4,0x69,0x00,0x00,0x01,0x80,0x01,0x00,0x02,0x02,0x03,0xFF,0x04,0x02,0x0A,0x04,0x11,0x04,0x61,0x88,0x00,0x90,0x00,0x20,0x00,0x40,0x01,0x80,0x06,0x00,0x18,0x00,0x60,0x00},
{0xA4,0x6A,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x01,0x80,0x01,0x40,0x02,0x20,0x02,0x20,0x04,0x10,0x08,0x08,0x10,0x07,0x60,0x02},
{0xA4,0x6B,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x02,0x7F,0xFF,0x04,0x10,0x04,0x10,0x08,0x20,0x08,0x20,0x17,0x40,0x00,0xC0,0x01,0x30,0x02,0x08,0x0C,0x06,0x70,0x02},
{0xA4,0x6C,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x08,0x00,0x30,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x6D,0x00,0x00,0x00,0x08,0x3F,0xFC,0x00,0x18,0x00,0x20,0x00,0xC0,0x00,0x87,0x00,0xB8,0x03,0xC0,0x7C,0x80,0x20,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x6E,0x00,0x00,0x00,0x08,0x3F,0xFC,0x00,0x08,0x00,0x30,0x00,0xC0,0x00,0x80,0x30,0x80,0x2C,0x80,0x43,0x80,0x40,0xF0,0x00,0x8F,0x00,0x82,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x6F,0x00,0x00,0x00,0x30,0x00,0x20,0x00,0x20,0x00,0x22,0x7F,0xFF,0x00,0x20,0x20,0x20,0x18,0x20,0x0C,0x20,0x04,0x20,0x00,0x20,0x00,0x20,0x01,0x20,0x00,0xE0,0x00,0x40},
{0xA4,0x70,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x0C,0x90,0x08,0x88,0x10,0x84,0x10,0x86,0x20,0x83,0x40,0x81,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0x71,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x00,0x01,0x02,0x7F,0xFF,0x01,0x40,0x01,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA4,0x72,0x00,0x00,0x10,0x02,0x1F,0xFF,0x10,0x02,0x10,0x02,0x10,0x02,0x10,0x02,0x1F,0xFE,0x10,0x02,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x40,0x00},
{0xA4,0x73,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x60,0x83,0x40,0x82,0x40,0x82,0x40,0x82,0x40,0x82,0x40,0x82,0x40,0x82,0x40,0x82,0x40,0x82,0x7F,0xFE,0x40,0x02,0x40,0x02},
{0xA4,0x74,0x00,0x00,0x0C,0x63,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x08,0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x20,0x42,0x20,0x02,0x40,0x02},
{0xA4,0x75,0x00,0x00,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA4,0x76,0x00,0x00,0x00,0x08,0x7F,0xFC,0x00,0x08,0x00,0x08,0x00,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xA4,0x77,0x00,0x00,0x00,0x08,0x7F,0xFC,0x00,0x08,0x00,0x08,0x30,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xA4,0x78,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xA4,0x79,0x00,0x00,0x00,0xC0,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x92,0x20,0x8E,0x20,0x84,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0x7A,0x00,0x00,0x00,0x04,0x3F,0xFE,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA4,0x7B,0x00,0x00,0x06,0x18,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x12,0x7F,0xFF,0x04,0x10,0x04,0x10,0x08,0x10,0x08,0x10,0x10,0x10,0x10,0x10,0x20,0x10,0x40,0x10},
{0xA4,0x7C,0x00,0x00,0x01,0xA0,0x01,0x18,0x01,0x08,0x01,0x02,0x01,0x1F,0x03,0xE0,0x7D,0x00,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x42,0x00,0x22,0x00,0x12,0x00,0x0F,0x00,0x02},
{0xA4,0x7D,0x00,0x00,0x00,0x08,0x7F,0xFC,0x00,0x08,0x00,0x08,0x10,0x08,0x1F,0xF8,0x20,0x08,0x20,0x02,0x3F,0xFF,0x40,0x02,0x40,0x02,0x00,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA4,0x7E,0x00,0x00,0x00,0x60,0x00,0x40,0x00,0x42,0x7F,0xFF,0x00,0xC0,0x01,0x40,0x01,0x40,0x02,0x40,0x02,0x40,0x04,0x40,0x18,0x40,0x60,0x40,0x02,0x40,0x01,0xC0,0x00,0x80},
{0xA4,0xA1,0x00,0x00,0x00,0x10,0x3F,0xF8,0x02,0x10,0x02,0x10,0x02,0x10,0x02,0x10,0x04,0x12,0x7F,0xFF,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x08,0x22,0x7F,0xFF},
{0xA4,0xA2,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x01,0x08,0x19,0xFC,0x11,0x00,0x11,0x02,0x3F,0xFF,0x20,0x02,0x20,0x02,0x00,0x02,0x00,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA4,0xA3,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0xC0,0x01,0x90,0x02,0x88,0x04,0x84,0x18,0x86,0x60,0x82,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0xA4,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0xA5,0x00,0x00,0x00,0xC0,0x00,0x8C,0x00,0xF0,0x3F,0x80,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0xA6,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x12,0x08,0x11,0x88,0x10,0x88,0x10,0x0A,0x7F,0xFF,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x20,0x48,0x20,0x38,0x40,0x10},
{0xA4,0xA7,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x08,0x7F,0xFC,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x34,0x00,0x28,0x00,0x44,0x00,0x43,0x03,0x00,0xFC},
{0xA4,0xA8,0x00,0x00,0x00,0x08,0x1F,0xFC,0x01,0x08,0x01,0x08,0x01,0x0A,0x7F,0xFF,0x02,0x08,0x02,0x08,0x02,0x08,0x1F,0xF8,0x04,0x08,0x04,0x00,0x08,0x00,0x10,0x00,0x60,0x00},
{0xA4,0xA9,0x00,0x00,0x00,0x08,0x3F,0xFC,0x00,0x10,0x02,0x60,0x01,0x80,0x00,0x82,0x7F,0xFF,0x00,0x82,0x00,0x84,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0xAA,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x10,0x02,0x08,0x04,0x74,0x3F,0x86,0x10,0x02},
{0xA4,0xAB,0x00,0x00,0x06,0x30,0x04,0x20,0x04,0x24,0x3F,0xFE,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x22,0x7F,0xFF,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x20,0x20,0x20},
{0xA4,0xAC,0x00,0x00,0x00,0x04,0x7F,0xFE,0x04,0x00,0x04,0x10,0x07,0xF8,0x08,0x10,0x08,0x10,0x08,0x20,0x10,0x20,0x1F,0xE0,0x10,0x20,0x00,0x40,0x00,0x42,0x7F,0xFF,0x00,0x00},
{0xA4,0xAD,0x00,0x00,0x00,0x04,0x3F,0xFE,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x08,0x1F,0xFC,0x02,0x08,0x02,0x08,0x02,0x08,0x04,0x08,0x04,0x08,0x04,0x0A,0x7F,0xFF,0x00,0x00},
{0xA4,0xAE,0x00,0x00,0x01,0x80,0x01,0x04,0x7F,0xFE,0x00,0x00,0x00,0x00,0x04,0x20,0x07,0xF0,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x22,0x08,0x22,0x10,0x23,0x60,0x1E},
{0xA4,0xAF,0x00,0x00,0x0C,0x00,0x08,0x00,0x08,0x04,0x13,0xFE,0x18,0x00,0x30,0x00,0x50,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x02,0x17,0xFF,0x10,0x00},
{0xA4,0xB0,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x10,0x20,0x18,0x20,0x30,0x22,0x57,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA4,0xB1,0x00,0x00,0x0C,0x00,0x08,0x02,0x0B,0xFF,0x10,0x10,0x18,0x10,0x30,0x10,0x50,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0x10,0x70,0x10,0x20},
{0xA4,0xB2,0x00,0x00,0x06,0x30,0x04,0x20,0x04,0x20,0x08,0x20,0x0C,0x30,0x18,0x28,0x28,0x26,0x48,0x23,0x08,0x21,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20},
{0xA4,0xB3,0x00,0x00,0x0C,0xC0,0x08,0x80,0x08,0x80,0x10,0x88,0x1B,0xFC,0x30,0x88,0x50,0x88,0x10,0x88,0x10,0x88,0x11,0x08,0x11,0x08,0x11,0x0A,0x12,0x0A,0x12,0x0B,0x14,0x06},
{0xA4,0xB4,0x00,0x00,0x0C,0x08,0x0B,0xFC,0x08,0x88,0x10,0x88,0x18,0x88,0x30,0x92,0x50,0x9F,0x10,0x92,0x10,0x82,0x11,0x02,0x11,0x02,0x11,0x02,0x12,0x24,0x12,0x1C,0x14,0x08},
{0xA4,0xB5,0x00,0x00,0x01,0x80,0x02,0x80,0x02,0x40,0x04,0x20,0x08,0x18,0x10,0x47,0x67,0xE2,0x00,0x00,0x00,0x10,0x3F,0xF8,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00},
{0xA4,0xB6,0x00,0x00,0x01,0x80,0x02,0x80,0x02,0x40,0x04,0x20,0x08,0x18,0x10,0x07,0x66,0x32,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x20,0x20,0x20},
{0xA4,0xB7,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x00,0x20,0x60,0x20,0x40,0x20,0x40,0x20,0x40,0x20,0x40,0x20,0xA0,0x20,0xA0,0x21,0x10,0x21,0x10,0x42,0x08,0x44,0x07,0x48,0x02},
{0xA4,0xB8,0x00,0x00,0x00,0x08,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x04,0x7F,0xFE,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x08,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA4,0xB9,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x20,0x04,0x10,0x04,0x18,0x09,0xEC,0x7E,0x44,0x24,0x40,0x04,0x40,0x04,0x40,0x04,0x40,0x08,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA4,0xBA,0x00,0x00,0x00,0x80,0x0F,0xC0,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x21,0x42,0x21,0x22,0x22,0x3A,0x2C,0x12,0x20,0x02,0x20,0x02,0x20,0x06,0x20,0x04},
{0xA4,0xBB,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x20,0x04,0x10,0x0C,0x08,0x08,0x0C,0x10,0x04,0x20,0x06,0x40,0x02,0x00,0x00},
{0xA4,0xBC,0x00,0x00,0x00,0x20,0x00,0xF0,0x06,0x20,0x04,0x10,0x08,0x0C,0x1F,0xF3,0x64,0x00,0x04,0x08,0x07,0xFC,0x08,0x08,0x08,0x08,0x00,0x08,0x00,0x10,0x01,0xE0,0x00,0x40},
{0xA4,0xBD,0x00,0x00,0x00,0x40,0x01,0xE0,0x0C,0x40,0x08,0x20,0x08,0x20,0x10,0x10,0x10,0x08,0x23,0x07,0x42,0x02,0x02,0x40,0x04,0x20,0x04,0x10,0x08,0xE8,0x7F,0x0C,0x20,0x04},
{0xA4,0xBE,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x40,0x04,0x04,0x20,0x07,0xF0,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x22,0x08,0x22,0x08,0x22,0x10,0x23,0x60,0x1E},
{0xA4,0xBF,0x00,0x00,0x00,0x18,0x34,0x13,0x22,0x22,0x22,0x22,0x21,0x42,0x21,0x42,0x20,0x82,0x20,0xC2,0x21,0x22,0x21,0x22,0x22,0x12,0x24,0x12,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA4,0xC0,0x00,0x00,0x00,0x40,0x01,0xE0,0x0C,0x40,0x08,0x20,0x08,0x20,0x10,0x18,0x10,0x07,0x2F,0xFA,0x42,0x08,0x02,0x08,0x02,0x08,0x04,0x08,0x04,0x08,0x08,0xF0,0x30,0x20},
{0xA4,0xC1,0x00,0x00,0x30,0x02,0x23,0xFF,0x20,0x42,0x24,0x42,0x2E,0x42,0x70,0x42,0x20,0x42,0x24,0x42,0x24,0x82,0x26,0x84,0x1C,0x84,0x01,0x04,0x01,0x04,0x02,0x38,0x04,0x10},
{0xA4,0xC2,0x00,0x00,0x01,0x83,0x41,0x32,0x21,0x22,0x12,0x22,0x0A,0x22,0x0A,0x22,0x04,0x22,0x06,0x22,0x0A,0x22,0x09,0x22,0x11,0x82,0x10,0x82,0x20,0x92,0x40,0x0E,0x00,0x04},
{0xA4,0xC3,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x10,0x02,0x10,0x02,0x20,0x42,0x2F,0xE2,0x40,0x02,0x00,0x22,0x0F,0xF2,0x00,0x04,0x00,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA4,0xC4,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x10,0x02,0x13,0x02,0x22,0x02,0x42,0x02,0x04,0x82,0x04,0x42,0x09,0xA2,0x3E,0x24,0x10,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA4,0xC5,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x11,0x22,0x11,0x22,0x22,0x22,0x42,0x42,0x04,0x42,0x04,0x82,0x08,0x82,0x11,0x04,0x22,0x04,0x04,0x44,0x08,0x38,0x00,0x10},
{0xA4,0xC6,0x00,0x00,0x06,0x60,0x04,0x40,0x04,0x40,0x08,0x40,0x0C,0x46,0x18,0x44,0x28,0x58,0x48,0x60,0x09,0xC0,0x08,0x40,0x08,0x40,0x08,0x42,0x08,0x42,0x08,0x43,0x08,0x3E},
{0xA4,0xC7,0x00,0x00,0x00,0x02,0x7F,0xFF,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x22,0x24,0x22,0x24,0x24,0x26,0x38,0x1C,0x20,0x00,0x20,0x00,0x20,0x00,0x1F,0xFE,0x00,0x00},
{0xA4,0xC8,0x00,0x00,0x0C,0x00,0x08,0x08,0x0F,0xFC,0x18,0x80,0x10,0x80,0x20,0x80,0x40,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0xC9,0x00,0x00,0x01,0x98,0x06,0x10,0x7C,0x10,0x04,0x10,0x04,0x10,0x04,0x12,0x7F,0xFF,0x04,0x10,0x04,0x10,0x04,0x10,0x08,0x10,0x08,0x10,0x10,0x10,0x10,0x10,0x20,0x10},
{0xA4,0xCA,0x00,0x00,0x19,0x8C,0x11,0x08,0x11,0x08,0x11,0x08,0x11,0x08,0x11,0x0A,0x7F,0xFF,0x11,0x08,0x11,0x08,0x11,0x08,0x11,0x08,0x11,0x08,0x21,0x08,0x21,0x08,0x40,0x08},
{0xA4,0xCB,0x00,0x00,0x02,0x00,0x01,0x80,0x00,0x80,0x00,0x02,0x7F,0xFF,0x01,0x00,0x01,0x80,0x01,0x40,0x01,0x30,0x01,0x18,0x01,0x08,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA4,0xCC,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x00,0x20,0x00,0x24,0x08,0x27,0xFC,0x24,0x08,0x24,0x08,0x24,0x88,0x24,0x78,0x24,0x10,0x24,0x02,0x44,0x02,0x44,0x03,0x43,0xFE},
{0xA4,0xCD,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x02,0x7F,0xFF,0x04,0x00,0x04,0x08,0x07,0xFC,0x0A,0x08,0x09,0x10,0x09,0x10,0x10,0xA0,0x10,0x40,0x20,0xB0,0x43,0x0F,0x0C,0x02},
{0xA4,0xCE,0x00,0x00,0x00,0x20,0x7F,0xF0,0x08,0x20,0x08,0x20,0x08,0x40,0x08,0x48,0x0F,0xFC,0x0A,0x08,0x09,0x10,0x11,0x10,0x10,0xA0,0x20,0x60,0x20,0x98,0x43,0x07,0x0C,0x02},
{0xA4,0xCF,0x00,0x00,0x10,0x02,0x1F,0xFF,0x10,0x00,0x10,0x00,0x10,0x04,0x1F,0xFE,0x12,0x04,0x11,0x08,0x11,0x08,0x10,0x90,0x10,0x60,0x20,0xA0,0x21,0x18,0x22,0x07,0x4C,0x02},
{0xA4,0xD0,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE},
{0xA4,0xD1,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x01,0x40,0x01,0x40,0x02,0x20,0x02,0x10,0x04,0x08,0x18,0x07,0x60,0x02},
{0xA4,0xD2,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x01,0x40,0x01,0x20,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0xD3,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x01,0x40,0x01,0x40,0x02,0x20,0x02,0x20,0x04,0x10,0x05,0x10,0x08,0xCC,0x10,0x47,0x60,0x02},
{0xA4,0xD4,0x00,0x00,0x00,0x30,0x00,0xF8,0x07,0x80,0x38,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x01,0x40,0x01,0x40,0x02,0x20,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0xD5,0x00,0x00,0x01,0x30,0x7F,0xA0,0x01,0x20,0x02,0x20,0x0C,0x20,0x08,0x20,0x09,0xA0,0x0E,0x20,0x78,0x20,0x28,0x20,0x08,0x20,0x08,0x22,0x48,0x22,0x38,0x23,0x10,0x1E},
{0xA4,0xD6,0x00,0x00,0x00,0xC0,0x00,0x80,0x0C,0x88,0x08,0x84,0x18,0x82,0x10,0x83,0x20,0x81,0x44,0x8C,0x03,0x88,0x01,0x10,0x00,0x20,0x00,0x40,0x01,0x80,0x0E,0x00,0x70,0x00},
{0xA4,0xD7,0x00,0x00,0x01,0xA0,0x01,0x18,0x01,0x08,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x60,0x02,0x40,0x02,0x40,0x02,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA4,0xD8,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x88,0x10,0x80,0x10,0x40,0x10,0x40,0x10,0x20,0x20,0x20,0x20,0x18,0x20,0x07,0x40,0x02},
{0xA4,0xD9,0x00,0x00,0x01,0x80,0x01,0x04,0x7F,0xFE,0x01,0x00,0x01,0x00,0x31,0x0C,0x21,0x08,0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,0x01,0x02,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA4,0xDA,0x00,0x00,0x40,0x08,0x7F,0xFC,0x41,0x08,0x41,0x08,0x41,0x08,0x41,0x08,0x41,0x08,0x7F,0xF8,0x40,0x08,0x40,0x00,0x40,0x00,0x40,0x02,0x40,0x02,0x40,0x03,0x3F,0xFE},
{0xA4,0xDB,0x00,0x00,0x0C,0x02,0x09,0xFF,0x10,0x02,0x10,0x02,0x63,0x02,0x22,0x02,0x14,0x02,0x0C,0x02,0x08,0x02,0x0A,0x02,0x11,0x04,0x17,0x84,0x78,0x84,0x20,0x38,0x00,0x10},
{0xA4,0xDC,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x12,0x7F,0xFF,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10},
{0xA4,0xDD,0x00,0x00,0x00,0x08,0x7F,0xFC,0x01,0x08,0x01,0x08,0x11,0x08,0x3F,0xF8,0x21,0x08,0x21,0x02,0x7F,0xFF,0x41,0x02,0x41,0x02,0x01,0x22,0x01,0x1C,0x01,0x08,0x01,0x00},
{0xA4,0xDE,0x00,0x00,0x00,0x83,0x7F,0xC2,0x00,0x82,0x00,0x82,0x20,0x82,0x3F,0x82,0x20,0x02,0x20,0x42,0x7F,0xE2,0x40,0x42,0x40,0x42,0x00,0x42,0x08,0x82,0x07,0x02,0x02,0x02},
{0xA4,0xDF,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x60,0x06,0x20,0x04,0x04,0x14,0x02,0x14,0x02,0x24,0x03,0x24,0x11,0x44,0x10,0x04,0x10,0x04,0x18,0x03,0xF0,0x00,0x00},
{0xA4,0xE0,0x00,0x00,0x01,0xA0,0x01,0x18,0x01,0x08,0x01,0x02,0x01,0x1F,0x03,0xE0,0x7D,0x00,0x00,0x8C,0x00,0x88,0x00,0x50,0x00,0x62,0x01,0xA2,0x0E,0x12,0x70,0x0F,0x00,0x02},
{0xA4,0xE1,0x00,0x00,0x00,0x0C,0x10,0x7E,0x1F,0x80,0x10,0x00,0x10,0x02,0x1F,0xFF,0x10,0x02,0x10,0x02,0x1F,0xFE,0x10,0x02,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00},
{0xA4,0xE2,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA4,0xE3,0x00,0x00,0x0C,0x60,0x08,0x40,0x0A,0x40,0x7F,0x40,0x08,0x40,0x08,0x40,0x09,0x40,0x0E,0x40,0x78,0x40,0x28,0x40,0x08,0x40,0x08,0x42,0x48,0x42,0x38,0x43,0x10,0x3E},
{0xA4,0xE4,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x88,0x1F,0xFC,0x08,0x08,0x04,0x10,0x03,0x20,0x00,0xC0,0x01,0x60,0x06,0x18,0x18,0x07,0x60,0x02},
{0xA4,0xE5,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x08,0x08,0x08,0x18,0x10,0x34,0x10,0x02,0x20,0x01,0x40,0x00,0xC0,0x01,0x20,0x06,0x18,0x18,0x07,0x60,0x02},
{0xA4,0xE6,0x00,0x00,0x00,0x30,0x04,0x20,0x02,0x20,0x03,0x20,0x11,0x20,0x08,0x20,0x0C,0x20,0x04,0x22,0x00,0x3F,0x03,0xE0,0x7C,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20},
{0xA4,0xE7,0x00,0x00,0x00,0x0C,0x10,0x3E,0x1F,0xC0,0x10,0x00,0x10,0x00,0x10,0x02,0x1F,0xFF,0x10,0x40,0x10,0x40,0x10,0x40,0x10,0x40,0x20,0x40,0x20,0x40,0x20,0x40,0x40,0x40},
{0xA4,0xE8,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x04,0x00,0x04,0x08,0x07,0xFC,0x04,0x08,0x04,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x11,0x10,0x20,0xE0,0x40,0x40},
{0xA4,0xE9,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA4,0xEA,0x00,0x00,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x24,0x3F,0xF4,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x00,0x00},
{0xA4,0xEB,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x10,0x88,0x10,0x70,0x20,0x20},
{0xA4,0xEC,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0xA0,0x04,0x90,0x08,0x88,0x10,0x87,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA4,0xED,0x00,0x00,0x0C,0x00,0x08,0x00,0x08,0x04,0x0F,0xFE,0x10,0x04,0x11,0x88,0x21,0x10,0x41,0x00,0x01,0x00,0x01,0x80,0x02,0x40,0x02,0x20,0x04,0x18,0x08,0x07,0x70,0x02},
{0xA4,0xEE,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x18,0x80,0x10,0x88,0x10,0xFC,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x82,0x7F,0xFF,0x00,0x00},
{0xA4,0xEF,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x00,0x02,0x00,0x02,0x08,0x07,0xFC,0x04,0x08,0x0A,0x08,0x11,0x90,0x60,0xA0,0x00,0x40,0x00,0x80,0x03,0x00,0x0C,0x00,0x30,0x00},
{0xA4,0xF0,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x88,0x08,0x88,0x08,0x88,0x08,0x8A,0x7F,0xFF,0x11,0x08,0x11,0x08,0x22,0x10,0x22,0x12,0x7F,0xFF,0x24,0x10,0x08,0xE0,0x00,0x40},
{0xA4,0xF1,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x40,0x10,0x40,0x10,0x40,0x12,0x44,0x1F,0x7E,0x10,0x40,0x10,0x40,0x10,0x40,0x10,0x40,0x13,0x42,0x1C,0x42,0x70,0x43,0x20,0x3E},
{0xA4,0xF2,0x00,0x00,0x00,0x30,0x01,0xF8,0x3F,0x00,0x01,0x00,0x01,0x08,0x01,0xFC,0x3F,0x00,0x01,0x00,0x01,0x04,0x01,0xFE,0x7F,0x00,0x01,0x02,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA4,0xF3,0x00,0x00,0x00,0x18,0x10,0x7C,0x1F,0xC0,0x10,0x40,0x10,0x40,0x10,0x42,0x1F,0xFF,0x10,0x40,0x10,0x20,0x10,0x20,0x13,0x12,0x1C,0x12,0x70,0x0A,0x20,0x07,0x00,0x02},
{0xA4,0xF4,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0xC6,0x7E,0xA4,0x04,0xA8,0x04,0x90,0x08,0x90,0x08,0x88,0x10,0x88,0x60,0x87,0x04,0x82,0x03,0x80,0x01,0x00},
{0xA4,0xF5,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x08,0x86,0x08,0x8C,0x08,0x88,0x10,0x90,0x30,0xA0,0x21,0x40,0x01,0x40,0x02,0x20,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA4,0xF6,0x00,0x00,0x00,0x0C,0x08,0xFE,0x0F,0x90,0x08,0x90,0x08,0x90,0x08,0x88,0x08,0x88,0x08,0x88,0x10,0x88,0x10,0x88,0x10,0x84,0x10,0x84,0x20,0x84,0x20,0x82,0x40,0x81},
{0xA4,0xF7,0x00,0x00,0x06,0x30,0x0C,0x0C,0x08,0x06,0x10,0x03,0x20,0x19,0x4C,0x10,0x0A,0x20,0x12,0x20,0x11,0x40,0x00,0x80,0x00,0xC0,0x01,0x20,0x02,0x18,0x0C,0x07,0x70,0x02},
{0xA4,0xF8,0x00,0x00,0x38,0x0C,0x06,0x70,0x01,0x80,0x06,0x70,0x18,0x0E,0x60,0x02,0x0C,0x18,0x0A,0x10,0x12,0x20,0x11,0x40,0x00,0x80,0x01,0x60,0x06,0x18,0x18,0x07,0x60,0x02},
{0xA4,0xF9,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x40,0x10,0x42,0x1F,0xFF,0x10,0x00,0x10,0x00,0x10,0x20,0x1F,0xF0,0x10,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x20},
{0xA4,0xFA,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x40,0x18,0x40,0x10,0x40,0x10,0x42,0x3F,0xFF,0x00,0xC0,0x01,0x40,0x02,0x40,0x04,0x40,0x18,0x40,0x62,0x40,0x01,0xC0,0x00,0x80},
{0xA4,0xFB,0x00,0x00,0x00,0xC0,0x0C,0x80,0x08,0x88,0x1F,0xFC,0x10,0x80,0x20,0x80,0x40,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA4,0xFC,0x00,0x00,0x00,0xD0,0x00,0x88,0x00,0x88,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x01,0x40,0x01,0x40,0x02,0x20,0x02,0x20,0x04,0x10,0x08,0x08,0x10,0x07,0x60,0x02},
{0xA4,0xFD,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA4,0xFE,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x21,0x42,0x21,0x32,0x22,0x1A,0x2C,0x0A,0x20,0x02,0x20,0x02,0x20,0x1E,0x20,0x04},
{0xA5,0x40,0x00,0x00,0x19,0x98,0x11,0x10,0x11,0x10,0x11,0x12,0x7F,0xFF,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0xF0,0x11,0x10,0x10,0x00,0x10,0x04,0x1F,0xFE,0x10,0x00},
{0xA5,0x41,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x00,0x01,0x00,0x03,0x20,0x05,0x10,0x05,0x08,0x09,0x0C,0x11,0x06,0x61,0x02,0x01,0x00,0x01,0x00,0x00,0x02,0x7F,0xFF,0x00,0x00},
{0xA5,0x42,0x00,0x00,0x08,0x10,0x0F,0xF8,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x08,0x12,0x7F,0xFF,0x00,0x00},
{0xA5,0x43,0x00,0x00,0x00,0x18,0x10,0xFC,0x1F,0x00,0x10,0x00,0x10,0x00,0x10,0x04,0x1F,0xFE,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x22,0x7F,0xFF,0x00,0x00},
{0xA5,0x44,0x00,0x00,0x03,0x00,0x00,0xC0,0x00,0x44,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA5,0x45,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x12,0x00,0x12,0x00,0x22,0x08,0x43,0xFC,0x02,0x00,0x02,0x08,0x03,0xFC,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00},
{0xA5,0x46,0x00,0x00,0x00,0x0C,0x01,0xFE,0x7F,0x00,0x01,0x00,0x01,0x08,0x3F,0xFC,0x00,0x08,0x00,0x10,0x00,0x60,0x01,0x80,0x36,0x00,0x28,0x00,0x44,0x00,0x43,0x03,0x00,0xFC},
{0xA5,0x47,0x00,0x00,0x00,0x0C,0x00,0xFE,0x3F,0x80,0x00,0x8C,0x10,0x88,0x0C,0x90,0x04,0xA2,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA5,0x48,0x00,0x00,0x18,0x0C,0x10,0x08,0x12,0x08,0x11,0x08,0x11,0x88,0x10,0x88,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x94,0x13,0x14,0x1C,0x22,0x70,0x43,0x21,0x81,0x06,0x00},
{0xA5,0x49,0x00,0x00,0x0C,0x0C,0x08,0x08,0x08,0x08,0x10,0x0A,0x1B,0xFF,0x30,0x08,0x51,0x08,0x10,0x88,0x10,0xC8,0x10,0x48,0x10,0x08,0x10,0x08,0x10,0x48,0x10,0x38,0x10,0x10},
{0xA5,0x4A,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x04,0x10,0x08,0x18,0x30,0x30,0x20,0x50,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x11,0x20,0x10,0xE0,0x10,0x40},
{0xA5,0x4B,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x10,0x20,0x18,0x22,0x37,0xFF,0x50,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x24,0x17,0xFE,0x10,0x00},
{0xA5,0x4C,0x00,0x00,0x0C,0x60,0x08,0x40,0x0B,0x44,0x12,0x4E,0x1A,0x74,0x32,0xC4,0x57,0x44,0x12,0x44,0x12,0x5C,0x12,0x48,0x12,0x40,0x12,0x42,0x12,0x02,0x12,0x03,0x11,0xFE},
{0xA5,0x4D,0x00,0x00,0x0C,0x0C,0x08,0x08,0x08,0x08,0x10,0x0A,0x17,0xFF,0x30,0x08,0x53,0x08,0x12,0x88,0x14,0x50,0x10,0x50,0x10,0x20,0x10,0x50,0x10,0x88,0x11,0x07,0x16,0x02},
{0xA5,0x4E,0x00,0x00,0x0C,0x68,0x08,0x46,0x08,0x42,0x10,0x40,0x18,0x42,0x30,0x7F,0x57,0xC0,0x10,0x40,0x10,0x20,0x10,0x20,0x10,0x10,0x10,0x12,0x10,0x0A,0x10,0x07,0x10,0x02},
{0xA5,0x4F,0x00,0x00,0x01,0x80,0x02,0x80,0x02,0x40,0x04,0x20,0x08,0x18,0x17,0xE7,0x60,0x02,0x00,0x08,0x1F,0xFC,0x01,0x08,0x01,0x08,0x01,0x48,0x01,0x38,0x01,0x10,0x01,0x00},
{0xA5,0x50,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x13,0x23,0x1A,0x22,0x32,0x22,0x52,0x22,0x12,0x22,0x12,0x22,0x12,0x22,0x12,0x22,0x12,0x22,0x13,0xFE,0x12,0x02,0x12,0x02},
{0xA5,0x51,0x00,0x00,0x0C,0x00,0x08,0x02,0x0B,0xFF,0x10,0x42,0x18,0x42,0x32,0x42,0x51,0xC2,0x10,0xC2,0x10,0x42,0x10,0x82,0x10,0x82,0x11,0x04,0x11,0x44,0x12,0x38,0x14,0x10},
{0xA5,0x52,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x02,0x00,0x02,0x20,0x04,0x18,0x09,0xEC,0x3E,0x44,0x14,0x40,0x04,0x40,0x04,0x40,0x08,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA5,0x53,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x12,0x48,0x02,0x40,0x02,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA5,0x54,0x00,0x00,0x00,0xC0,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x10,0x84,0x7F,0xFF,0x10,0x04,0x10,0x04,0x10,0x24,0x10,0x1C,0x10,0x08},
{0xA5,0x55,0x00,0x00,0x20,0x04,0x3F,0xFE,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x7F,0xFF,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x5C,0x20,0x08},
{0xA5,0x56,0x00,0x00,0x06,0x00,0x04,0x08,0x07,0xFC,0x0C,0x08,0x12,0x10,0x61,0x20,0x00,0xC0,0x03,0x30,0x0D,0x0F,0x70,0xC2,0x00,0x40,0x00,0x18,0x00,0xE0,0x0F,0x00,0x04,0x00},
{0xA5,0x57,0x00,0x00,0x22,0x22,0x3F,0x3F,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x23,0xE2,0x22,0x22,0x22,0x22,0x20,0x02,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02,0x20,0x02},
{0xA5,0x58,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x00,0x80,0x30,0x83,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x02},
{0xA5,0x59,0x00,0x00,0x02,0x20,0x03,0xF0,0x02,0x20,0x02,0x20,0x02,0x20,0x22,0x22,0x3E,0x3F,0x22,0x22,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA5,0x5A,0x00,0x00,0x01,0x03,0x3F,0x82,0x04,0x1A,0x04,0x12,0x04,0x12,0x04,0x92,0x7F,0xD2,0x04,0x12,0x04,0x12,0x04,0x12,0x04,0x02,0x04,0x02,0x04,0x12,0x04,0x0E,0x04,0x04},
{0xA5,0x5B,0x00,0x00,0x18,0x00,0x10,0x00,0x11,0x42,0x7F,0x7F,0x11,0x42,0x11,0x42,0x11,0x42,0x11,0x42,0x11,0x42,0x11,0x42,0x11,0x42,0x21,0x42,0x21,0x7E,0x2E,0x42,0x44,0x00},
{0xA5,0x5C,0x00,0x00,0x00,0x60,0x04,0x40,0x7E,0x40,0x10,0x42,0x13,0xFF,0x10,0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x12,0x82,0x1C,0x84,0x71,0x04,0x21,0x04,0x02,0x38,0x04,0x10},
{0xA5,0x5D,0x00,0x00,0x0C,0x00,0x08,0x04,0x1F,0xFE,0x10,0x04,0x20,0x04,0x4F,0xC4,0x08,0x44,0x08,0x44,0x0F,0xC8,0x08,0x08,0x08,0x78,0x08,0x12,0x08,0x02,0x08,0x03,0x07,0xFE},
{0xA5,0x5E,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x11,0x22,0x11,0x22,0x22,0x22,0x4A,0x42,0x06,0x42,0x05,0x82,0x08,0xE2,0x11,0x24,0x22,0x04,0x04,0x44,0x08,0x38,0x00,0x10},
{0xA5,0x5F,0x00,0x00,0x03,0x60,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x44,0x7E,0x7E,0x02,0x40,0x02,0x40,0x02,0x40,0x02,0x40,0x06,0x40,0x1A,0x42,0x62,0x42,0x42,0x43,0x02,0x3E},
{0xA5,0x60,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x40,0xC0,0x48,0x88,0x4F,0xFC,0x48,0x88,0x48,0x88,0x48,0x88,0x48,0xB8,0x48,0x90,0x40,0x80,0x40,0x02,0x7F,0xFF,0x40,0x00},
{0xA5,0x61,0x00,0x00,0x0C,0x0C,0x08,0x3E,0x0B,0xE0,0x10,0x20,0x18,0x20,0x30,0x22,0x57,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA5,0x62,0x00,0x00,0x00,0xC0,0x0C,0x88,0x18,0x84,0x10,0x86,0x20,0x93,0x4F,0xF9,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA5,0x63,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0C,0x98,0x08,0x90,0x08,0x12,0x7F,0xFF,0x08,0x10,0x08,0x10,0x10,0x10,0x10,0x10,0x20,0x10,0x40,0x10},
{0xA5,0x64,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x08,0x01,0xFC,0x01,0x00,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x80,0x01,0x60,0x01,0x18,0x01,0x0C,0x01,0x04,0x01,0x00,0x01,0x00},
{0xA5,0x65,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x02,0x01,0xFF,0x01,0x00,0x01,0x00,0x21,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xA5,0x66,0x00,0x00,0x11,0x80,0x1E,0x22,0x10,0x3F,0x11,0xA2,0x11,0x22,0x11,0x22,0x11,0x22,0x11,0x22,0x17,0x22,0x39,0x32,0x11,0x2E,0x02,0x24,0x02,0x20,0x04,0x20,0x08,0x20},
{0xA5,0x67,0x00,0x00,0x20,0x7E,0x3F,0x80,0x20,0x02,0x3F,0xFF,0x20,0x00,0x24,0x08,0x27,0xFC,0x24,0x08,0x24,0x08,0x24,0x88,0x24,0x70,0x24,0x22,0x44,0x02,0x44,0x03,0x43,0xFE},
{0xA5,0x68,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x00,0x01,0x20,0x02,0x10,0x02,0x08,0x04,0xF4,0x3F,0x06,0x10,0x02},
{0xA5,0x69,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x08,0x00,0x08,0x10,0x88,0x1F,0xC8,0x10,0x88,0x10,0x88,0x10,0x88,0x1F,0x88,0x10,0x88,0x00,0x08,0x00,0x48,0x00,0x38,0x00,0x10},
{0xA5,0x6A,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04},
{0xA5,0x6B,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x02,0x7F,0xFF,0x04,0x00,0x04,0x00,0x08,0x00,0x0C,0x04,0x17,0xFE,0x14,0x04,0x24,0x04,0x44,0x04,0x04,0x04,0x07,0xFC,0x04,0x04},
{0xA5,0x6C,0x00,0x00,0x00,0x04,0x3F,0xFE,0x02,0x04,0x02,0x04,0x04,0x04,0x08,0x38,0x10,0x10,0x68,0x04,0x0F,0xFE,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x0F,0xFC,0x08,0x04},
{0xA5,0x6D,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x10,0x48,0x10,0x48,0x10,0x48,0x10,0x48,0x10,0x48,0x10,0x48,0x10,0x78,0x10,0x48,0x10,0x40,0x10,0x00,0x90,0x00,0x70,0x00,0x20},
{0xA5,0x6E,0x00,0x00,0x44,0x82,0x7E,0xFF,0x44,0x82,0x44,0x82,0x44,0x82,0x44,0x82,0x44,0x82,0x44,0x82,0x7C,0x82,0x44,0xA2,0x40,0x9C,0x00,0x88,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA5,0x6F,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x42,0x48,0x42,0x48,0x42,0x48,0x42,0x48,0x42,0x48,0x82,0x48,0x82,0x78,0x82,0x49,0x04,0x41,0x04,0x02,0x44,0x04,0x38,0x08,0x10},
{0xA5,0x70,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x02,0x48,0x02,0x48,0x02,0x48,0x0A,0x48,0x12,0x48,0x62,0x4B,0x82,0x79,0x02,0x48,0x04,0x40,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA5,0x71,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x04,0x00,0x24,0x3F,0xF4,0x00,0x04,0x10,0x44,0x1F,0xE4,0x10,0x44,0x10,0x44,0x1F,0xC4,0x10,0x44,0x00,0x04,0x00,0x38,0x00,0x10},
{0xA5,0x72,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x40,0x00,0x44,0x10,0x47,0xF8,0x44,0x10,0x44,0x10,0x44,0x10,0x47,0xF0,0x44,0x10,0x40,0x00,0x40,0x02,0x7F,0xFF,0x40,0x00},
{0xA5,0x73,0x00,0x00,0x44,0x03,0x7E,0x62,0x44,0x42,0x44,0x42,0x44,0x42,0x44,0x42,0x44,0x42,0x44,0x42,0x7C,0x46,0x44,0x5A,0x40,0xE2,0x00,0x42,0x00,0x02,0x00,0x02,0x00,0x02},
{0xA5,0x74,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x01,0x00,0x7F,0xFF,0x01,0x02,0x02,0x02,0x02,0x02,0x04,0x44,0x18,0x38,0x60,0x10},
{0xA5,0x75,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x06,0x10,0x04,0x08,0x08,0x04,0x08,0x06,0x10,0x03,0x60,0x01},
{0xA5,0x76,0x00,0x00,0x00,0xC0,0x00,0x80,0x20,0x84,0x3F,0xFE,0x20,0x84,0x20,0x84,0x20,0x84,0x3F,0xFC,0x20,0x84,0x00,0x80,0x19,0x00,0x27,0x00,0x22,0xE0,0x0C,0x1F,0x70,0x02},
{0xA5,0x77,0x00,0x00,0x00,0xC0,0x48,0x80,0x7C,0x80,0x48,0x80,0x48,0x86,0x48,0x84,0x48,0x88,0x48,0x90,0x48,0xE0,0x7B,0x80,0x48,0x80,0x40,0x82,0x00,0x82,0x00,0x83,0x00,0x7E},
{0xA5,0x78,0x00,0x00,0x01,0x80,0x01,0x00,0x02,0x10,0x04,0x0C,0x09,0xF6,0x7E,0x03,0x20,0x01,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA5,0x79,0x00,0x00,0x0C,0x00,0x08,0x02,0x0F,0xFF,0x18,0x02,0x10,0x02,0x24,0x22,0x47,0xF2,0x04,0x22,0x04,0x22,0x04,0x22,0x07,0xE4,0x04,0x24,0x00,0x04,0x00,0x78,0x00,0x10},
{0xA5,0x7A,0x00,0x00,0x00,0x20,0x48,0xF0,0x7C,0x20,0x49,0xA0,0x49,0x20,0x49,0x10,0x49,0x10,0x49,0x10,0x49,0x10,0x7A,0x10,0x4A,0x08,0x42,0x08,0x04,0x04,0x04,0x07,0x18,0x02},
{0xA5,0x7B,0x00,0x00,0x00,0x60,0x44,0x40,0x7C,0x42,0x45,0xFF,0x44,0x42,0x44,0x42,0x44,0x42,0x44,0x42,0x44,0x42,0x7C,0x82,0x44,0x84,0x41,0x04,0x01,0x04,0x02,0x38,0x0C,0x10},
{0xA5,0x7C,0x00,0x00,0x00,0x00,0x40,0x02,0x7F,0xFF,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0x4A,0x44,0x4A,0x48,0x3A,0x50,0x02,0x40,0x02,0x40,0x02,0x7F,0xFE,0x40,0x02,0x00,0x00},
{0xA5,0x7D,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0xC2,0x20,0x82,0x20,0x82,0x20,0x82,0x21,0x42,0x21,0x42,0x22,0x22,0x22,0x3A,0x2C,0x12,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA5,0x7E,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0x20,0x1F,0xA0,0x11,0x20,0x21,0x20,0x22,0x20,0x5A,0xE0,0x04,0x38,0x04,0x27,0x08,0x22,0x08,0x20,0x10,0x20,0x20,0x20,0x00,0x20},
{0xA5,0xA1,0x00,0x00,0x01,0x80,0x01,0x00,0x11,0x08,0x1F,0xFC,0x11,0x08,0x11,0x08,0x11,0x08,0x11,0x0A,0x7F,0xFF,0x02,0x80,0x02,0x40,0x04,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA5,0xA2,0x00,0x00,0x00,0xC0,0x0C,0x80,0x08,0x80,0x08,0x88,0x1F,0xFC,0x10,0x80,0x20,0x80,0x00,0x82,0x7F,0xFF,0x01,0x40,0x01,0x20,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA5,0xA3,0x00,0x00,0x18,0x00,0x10,0x02,0x10,0xFF,0x12,0x42,0x7F,0x42,0x12,0x42,0x12,0x24,0x22,0x24,0x24,0x18,0x54,0x08,0x08,0x14,0x14,0x14,0x12,0x22,0x22,0x42,0x40,0x81},
{0xA5,0xA4,0x00,0x00,0x18,0x08,0x11,0xFC,0x10,0x48,0x12,0x48,0x7F,0x48,0x12,0x52,0x12,0x5F,0x22,0x52,0x64,0x42,0x14,0x42,0x08,0x82,0x14,0x82,0x12,0xA2,0x21,0x1C,0x42,0x08},
{0xA5,0xA5,0x00,0x00,0x00,0x20,0x3F,0xF0,0x04,0x40,0x04,0x42,0x08,0x7F,0x08,0x02,0x17,0xF2,0x60,0x22,0x00,0x4C,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80,0x07,0x80,0x01,0x00},
{0xA5,0xA6,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4C,0x04,0x08,0x00,0x08,0x18,0x08,0x60,0x09,0x80,0x0E,0x00,0x08,0x04,0x08,0x04,0x08,0x06,0x07,0xFC,0x00,0x00},
{0xA5,0xA7,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x26,0x00,0x24,0x0C,0x24,0x30,0x24,0xC0,0x27,0x02,0x24,0x02,0x44,0x03,0x43,0xFE,0x40,0x00},
{0xA5,0xA8,0x00,0x00,0x00,0x04,0x7F,0xFE,0x10,0x00,0x10,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x00,0x10,0x02,0x7F,0xFF,0x00,0x00},
{0xA5,0xA9,0x00,0x00,0x00,0x02,0x03,0xFF,0x00,0x40,0x7E,0x40,0x10,0x80,0x10,0x82,0x11,0xFF,0x10,0x02,0x12,0x02,0x1C,0x02,0x70,0x02,0x20,0x04,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA5,0xAA,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x02,0x3F,0xFF,0x02,0x00,0x04,0x00,0x04,0x04,0x05,0xFE,0x08,0x20,0x08,0x20,0x10,0x20,0x20,0x20,0x40,0x22,0x07,0xFF,0x00,0x00},
{0xA5,0xAB,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x00,0x00,0x01,0x80,0x21,0x04,0x3F,0xFE,0x21,0x04,0x21,0x04,0x21,0x04,0x21,0x24,0x21,0x1C,0x21,0x08,0x01,0x00,0x01,0x00},
{0xA5,0xAC,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x02,0x7F,0xFF,0x04,0x00,0x08,0xC0,0x08,0x84,0x1F,0xFE,0x28,0x84,0x48,0x84,0x08,0xA4,0x08,0x9C,0x08,0x88,0x00,0x80,0x00,0x80},
{0xA5,0xAD,0x00,0x00,0x00,0x08,0x3F,0xFC,0x01,0x00,0x0D,0x20,0x09,0x10,0x11,0x18,0x21,0x08,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA5,0xAE,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x20,0xFF,0x66,0x22,0x14,0x22,0x0C,0x22,0x08,0x22,0x08,0x22,0x12,0x42,0x15,0x42,0x79,0x42,0x20,0x82,0x00,0x9C,0x01,0x08},
{0xA5,0xAF,0x00,0x00,0x03,0x00,0x02,0x20,0x04,0x10,0x08,0xEC,0x7F,0x06,0x20,0x02,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x20,0x20,0x20},
{0xA5,0xB0,0x00,0x00,0x02,0x00,0x7F,0x18,0x02,0x10,0x22,0x10,0x3E,0x10,0x22,0x10,0x20,0x20,0x42,0x20,0x7F,0x20,0x42,0x24,0x02,0x42,0x02,0x4D,0x22,0xF1,0x1C,0x40,0x08,0x00},
{0xA5,0xB1,0x00,0x00,0x06,0x60,0x04,0x48,0x7F,0xFC,0x04,0x48,0x24,0x48,0x3F,0xF8,0x24,0x48,0x44,0x42,0x7F,0xFF,0x44,0x42,0x04,0x42,0x08,0x42,0x08,0x5C,0x10,0x48,0x20,0x40},
{0xA5,0xB2,0x00,0x00,0x01,0x00,0x00,0xCC,0x00,0x48,0x06,0x08,0x04,0x10,0x04,0x10,0x24,0x24,0x24,0x22,0x24,0x43,0x44,0x81,0x45,0x08,0x06,0x08,0x1C,0x0C,0x63,0xF8,0x00,0x00},
{0xA5,0xB3,0x00,0x00,0x00,0x68,0x00,0x46,0x10,0x40,0x1F,0xFF,0x10,0x40,0x10,0x40,0x10,0x46,0x10,0x24,0x10,0x28,0x10,0x10,0x10,0x32,0x20,0x4A,0x21,0x8A,0x26,0x07,0x40,0x02},
{0xA5,0xB4,0x00,0x00,0x0C,0x00,0x08,0x02,0x09,0xFF,0x7E,0x10,0x08,0x10,0x08,0x10,0x0A,0x10,0x0C,0x10,0x78,0x10,0x28,0x10,0x08,0x10,0x08,0x10,0x48,0x90,0x38,0x70,0x10,0x20},
{0xA5,0xB5,0x00,0x00,0x18,0x08,0x13,0xFC,0x10,0x88,0x7C,0x88,0x10,0x88,0x10,0x92,0x14,0x9F,0x18,0x92,0x70,0x82,0x51,0x02,0x11,0x02,0x11,0x04,0x12,0x04,0x72,0x38,0x24,0x10},
{0xA5,0xB6,0x00,0x00,0x18,0x10,0x10,0xF8,0x10,0x10,0x7D,0x90,0x11,0x10,0x11,0x10,0x15,0x10,0x19,0x08,0x71,0x08,0x51,0x08,0x11,0x08,0x12,0x08,0x12,0x04,0x72,0x07,0x24,0x02},
{0xA5,0xB7,0x00,0x00,0x0C,0x30,0x08,0x20,0x0A,0x20,0x7F,0x20,0x08,0x20,0x08,0x30,0x09,0x28,0x0E,0x26,0x78,0x23,0x28,0x21,0x08,0x20,0x08,0x20,0x48,0x20,0x38,0x20,0x10,0x20},
{0xA5,0xB8,0x00,0x00,0x00,0x0C,0x10,0x7E,0x1F,0xC0,0x10,0x00,0x10,0x00,0x10,0x02,0x1F,0xFF,0x10,0x40,0x13,0x40,0x10,0xC0,0x10,0x70,0x20,0x58,0x20,0x48,0x20,0x40,0x40,0x40},
{0xA5,0xB9,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x00},
{0xA5,0xBA,0x00,0x00,0x01,0xA0,0x01,0x18,0x01,0x08,0x01,0x02,0x7F,0xFF,0x01,0x00,0x0D,0x30,0x09,0x20,0x09,0x20,0x09,0x20,0x11,0x22,0x11,0x22,0x21,0x23,0x41,0x1E,0x01,0x00},
{0xA5,0xBB,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0xC0,0x02,0xA0,0x02,0xA0,0x04,0x90,0x04,0x88,0x08,0x88,0x10,0xA4,0x67,0xF3,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA5,0xBC,0x00,0x00,0x00,0xC0,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA5,0xBD,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA5,0xBE,0x00,0x00,0x0C,0x60,0x08,0x40,0x0A,0x40,0x7F,0x40,0x18,0x40,0x18,0x40,0x2C,0x40,0x2B,0x40,0x29,0x40,0x48,0x40,0x08,0x42,0x08,0x42,0x08,0x43,0x08,0x3E,0x08,0x00},
{0xA5,0xBF,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x18,0x88,0x10,0xFC,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x82,0x7F,0xFF,0x00,0x00},
{0xA5,0xC0,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0B,0x08,0x08,0xC8,0x08,0x0A,0x7F,0xFF,0x10,0x08,0x13,0x08,0x10,0xC8,0x10,0x0A,0x3F,0xFF,0x20,0x10,0x00,0xF0,0x00,0x20},
{0xA5,0xC1,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x44,0x10,0x40,0x1F,0xFF,0x10,0x20,0x10,0x20,0x10,0x92,0x17,0x12,0x78,0x0A,0x20,0x07,0x00,0x02},
{0xA5,0xC2,0x00,0x00,0x10,0x7C,0x1F,0xC0,0x10,0x40,0x10,0x40,0x10,0x44,0x1F,0xFE,0x10,0x20,0x10,0x20,0x10,0x20,0x11,0x90,0x1E,0x12,0x70,0x0A,0x20,0x4A,0x0F,0xE7,0x00,0x02},
{0xA5,0xC3,0x00,0x00,0x0C,0x00,0x03,0x80,0x00,0x00,0x1F,0x80,0x00,0x80,0x04,0x86,0x7E,0xD8,0x04,0xA0,0x04,0xA0,0x08,0x90,0x08,0x88,0x10,0x87,0x64,0x82,0x03,0x80,0x01,0x00},
{0xA5,0xC4,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x20,0x44,0x20,0x24,0x22,0x2B,0xFF,0x08,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x20,0x60,0x20,0x20,0x20},
{0xA5,0xC5,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x20,0x40,0x20,0x24,0x20,0x28,0x20,0x08,0x20,0x10,0x20,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x20,0x61,0x20,0x20,0xE0,0x00,0x40},
{0xA5,0xC6,0x00,0x00,0x20,0x00,0x12,0x04,0x13,0xFE,0x42,0x04,0x22,0x04,0x26,0x04,0x0A,0x04,0x0A,0x44,0x12,0x38,0x12,0x10,0x62,0x02,0x22,0x02,0x22,0x02,0x62,0x03,0x21,0xFE},
{0xA5,0xC7,0x00,0x00,0x4C,0x00,0x29,0x04,0x11,0xFE,0x29,0x04,0x49,0x04,0x05,0x04,0x0D,0x04,0x15,0x44,0x15,0x38,0x25,0x10,0x45,0x00,0x09,0x02,0x09,0x02,0x71,0x03,0x20,0xFE},
{0xA5,0xC8,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x00,0x02,0x00,0x04,0x30,0x18,0x20,0x06,0x40,0x01,0x80,0x01,0x10,0x02,0x08,0x04,0x74,0x3F,0x86,0x10,0x02,0x00,0x00},
{0xA5,0xC9,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0xA0,0x00,0x98,0x00,0x88,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA5,0xCA,0x00,0x00,0x00,0x18,0x11,0xFC,0x1F,0x10,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0x08,0x11,0x08,0x11,0x48,0x21,0x24,0x21,0x74,0x23,0x92,0x40,0x01},
{0xA5,0xCB,0x00,0x00,0x00,0x04,0x7F,0xFE,0x04,0x00,0x04,0x00,0x04,0x20,0x0F,0xF0,0x08,0x20,0x0A,0x20,0x09,0x20,0x09,0x20,0x10,0x20,0x10,0xE2,0x17,0x22,0x78,0x23,0x20,0x1E},
{0xA5,0xCC,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x12,0x7F,0xFF,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10},
{0xA5,0xCD,0x00,0x00,0x00,0xC0,0x0C,0x80,0x08,0x80,0x08,0x84,0x1F,0xFE,0x10,0x80,0x20,0x80,0x40,0x88,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA5,0xCE,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x20,0x84,0x20,0xA4,0x20,0x9C,0x40,0x08},
{0xA5,0xCF,0x00,0x00,0x20,0x08,0x3F,0xFC,0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,0x21,0x08,0x3F,0xF8,0x21,0x08,0x21,0x08,0x21,0x48,0x21,0x3A,0x41,0x12,0x41,0x03,0x00,0xFE},
{0xA5,0xD0,0x00,0x00,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x02,0x00,0x00},
{0xA5,0xD1,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x02},
{0xA5,0xD2,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA5,0xD3,0x00,0x00,0x00,0xC0,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA5,0xD4,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x84,0x00,0x88,0x00,0x80,0x00,0x80,0x18,0x88,0x10,0xFC,0x10,0x80,0x10,0x80,0x10,0x80,0x28,0x80,0x26,0x80,0x21,0x83,0x40,0x7C},
{0xA5,0xD5,0x00,0x00,0x01,0x80,0x01,0x00,0x22,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xA5,0xD6,0x00,0x00,0x00,0x60,0x00,0x40,0x10,0x42,0x1F,0xFF,0x10,0x42,0x10,0x40,0x10,0x48,0x1F,0xFC,0x12,0x08,0x11,0x10,0x10,0xA0,0x20,0x40,0x20,0xB0,0x23,0x0F,0x4C,0x02},
{0xA5,0xD7,0x00,0x00,0x20,0x04,0x3F,0xFE,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x7F,0xFF,0x00,0x00},
{0xA5,0xD8,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04},
{0xA5,0xD9,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x10,0x03,0x60,0x00,0x82,0x7F,0xFF,0x01,0x82,0x02,0x84,0x02,0x88,0x04,0x80,0x18,0x80,0x60,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA5,0xDA,0x00,0x00,0x0C,0x00,0x08,0x00,0x08,0x04,0x1F,0xFE,0x10,0x80,0x20,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x01,0x40,0x01,0x20,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA5,0xDB,0x00,0x00,0x00,0x02,0x7F,0xFF,0x04,0x00,0x04,0x00,0x04,0x00,0x08,0x04,0x0F,0xFE,0x18,0x04,0x18,0x04,0x28,0x04,0x48,0x04,0x08,0x04,0x08,0x04,0x0F,0xFC,0x08,0x04},
{0xA5,0xDC,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x00,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x00,0x80,0x18,0x90,0x10,0x88,0x20,0x84,0x20,0x86,0x40,0x82,0x00,0x80,0x00,0x80},
{0xA5,0xDD,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA5,0xDE,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x44,0x03,0xE0,0x00,0x40,0x06,0x40,0x04,0x20,0x04,0x20,0x08,0x10,0x08,0x10,0x10,0x08,0x20,0x07,0x40,0x02},
{0xA5,0xDF,0x00,0x00,0x01,0x80,0x01,0x00,0x01,0x04,0x7F,0xFE,0x00,0x00,0x10,0x18,0x08,0x10,0x08,0x10,0x0C,0x20,0x04,0x20,0x04,0x20,0x04,0x40,0x00,0x42,0x7F,0xFF,0x00,0x00},
{0xA5,0xE0,0x00,0x00,0x00,0x10,0x3F,0xF8,0x00,0x10,0x00,0x20,0x04,0xC0,0x7E,0x86,0x04,0xD8,0x04,0xA0,0x08,0x98,0x10,0x87,0x60,0x82,0x07,0x80,0x01,0x00,0x00,0x02,0x7F,0xFF},
{0xA5,0xE1,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x00,0x01,0x08,0x3F,0xFC,0x01,0x00,0x01,0x02,0x7F,0xFF,0x02,0x00,0x02,0x20,0x04,0x10,0x04,0x08,0x08,0xF4,0x7F,0x06,0x20,0x02},
{0xA5,0xE2,0x00,0x00,0x00,0x18,0x08,0x7C,0x0F,0x80,0x08,0x00,0x08,0x04,0x0F,0xFE,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x22,0x7F,0xFF,0x00,0x00,0x06,0x00,0x18,0x00,0x60,0x00},
{0xA5,0xE3,0x00,0x00,0x00,0x18,0x08,0x7C,0x0F,0x80,0x08,0x00,0x08,0x04,0x0F,0xFE,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20,0x7F,0xFF,0x00,0x00,0x00,0x30,0x00,0x0E,0x00,0x02},
{0xA5,0xE4,0x00,0x00,0x0C,0x30,0x08,0x20,0x09,0x20,0x0F,0xA0,0x08,0x20,0x08,0x20,0x08,0x20,0x49,0x20,0x7F,0xA0,0x41,0x20,0x41,0x22,0x41,0x22,0x41,0x22,0x7F,0x23,0x41,0x1E},
{0xA5,0xE5,0x00,0x00,0x00,0x04,0x7F,0xFE,0x04,0x00,0x04,0x10,0x07,0xF8,0x04,0x10,0x05,0x10,0x08,0x90,0x08,0xA0,0x0A,0x20,0x11,0x20,0x11,0x40,0x00,0x40,0x00,0x42,0x7F,0xFF},
{0xA5,0xE6,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0C,0x08,0x10,0x06,0x66,0x13,0x0A,0x11,0x09,0x20,0x01,0x40,0x00,0x80,0x01,0x60,0x02,0x18,0x0C,0x07,0x70,0x02},
{0xA5,0xE7,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x02,0x20,0x02,0x20,0x1A,0x28,0x12,0x24,0x12,0x24,0x22,0x22,0x22,0x22,0x44,0x22,0x04,0x20,0x08,0x20,0x09,0xE0,0x10,0x40},
{0xA5,0xE8,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x00,0x06,0x00,0x18,0x00,0x06,0x60,0x00,0x8C,0x01,0x10,0x06,0x20,0x18,0x40,0x61,0xA0,0x06,0x10,0x18,0x0C,0x60,0x04},
{0xA5,0xE9,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x22,0x13,0xFF,0x18,0x80,0x30,0x84,0x50,0xFE,0x10,0x84,0x10,0x84,0x10,0x84,0x11,0x04,0x11,0x04,0x11,0x44,0x12,0x38,0x14,0x10},
{0xA5,0xEA,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x22,0x13,0xFF,0x18,0x00,0x30,0x88,0x50,0xFC,0x10,0x88,0x10,0x88,0x10,0x88,0x10,0x88,0x11,0x09,0x11,0x09,0x11,0x09,0x12,0x07},
{0xA5,0xEB,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x11,0x23,0x19,0x22,0x31,0x24,0x52,0x24,0x12,0x68,0x10,0x50,0x10,0x50,0x10,0x90,0x10,0x88,0x11,0x08,0x12,0x07,0x14,0x02},
{0xA5,0xEC,0x00,0x00,0x0C,0x00,0x08,0x04,0x0B,0xFE,0x10,0x44,0x10,0x44,0x37,0xFF,0x50,0x44,0x10,0x44,0x13,0xFC,0x10,0x44,0x10,0x40,0x10,0x80,0x10,0x80,0x11,0x00,0x12,0x00},
{0xA5,0xED,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x24,0x13,0xFE,0x18,0x20,0x30,0x20,0x50,0x22,0x17,0xFF,0x10,0x20,0x10,0x50,0x10,0x50,0x10,0x88,0x10,0x88,0x11,0x07,0x16,0x02},
{0xA5,0xEE,0x00,0x00,0x0C,0x04,0x0B,0xFE,0x08,0x40,0x10,0x40,0x18,0x40,0x30,0x44,0x53,0xFE,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x17,0xFF,0x10,0x00},
{0xA5,0xEF,0x00,0x00,0x0C,0x68,0x08,0x46,0x08,0x40,0x10,0x44,0x18,0x4E,0x30,0x70,0x53,0xC0,0x10,0x46,0x10,0x24,0x10,0x28,0x10,0x30,0x10,0x51,0x11,0x89,0x16,0x05,0x10,0x03},
{0xA5,0xF0,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x10,0x22,0x1B,0xFF,0x30,0x60,0x50,0xB0,0x10,0xA8,0x11,0x28,0x11,0x24,0x12,0x27,0x14,0x22,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA5,0xF1,0x00,0x00,0x0C,0x34,0x08,0x22,0x08,0x20,0x10,0x22,0x1B,0xFF,0x30,0x20,0x50,0x20,0x10,0x50,0x10,0x50,0x10,0x50,0x10,0x88,0x10,0x88,0x11,0x04,0x11,0x07,0x12,0x02},
{0xA5,0xF2,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x12,0x22,0x1B,0xFF,0x32,0x22,0x52,0x22,0x12,0x22,0x12,0x22,0x13,0xFE,0x12,0x22,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA5,0xF3,0x00,0x00,0x0C,0x30,0x09,0xA0,0x09,0x24,0x11,0xFE,0x19,0x20,0x32,0x20,0x54,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA5,0xF4,0x00,0x00,0x0C,0x0C,0x08,0x3E,0x0B,0xE0,0x10,0x20,0x18,0x20,0x30,0x20,0x50,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x24,0x11,0xFE,0x10,0x00},
{0xA5,0xF5,0x00,0x00,0x0C,0x00,0x08,0xD2,0x0B,0x1F,0x12,0x12,0x1A,0x12,0x32,0x12,0x52,0x12,0x12,0x12,0x12,0x12,0x12,0x52,0x12,0x92,0x17,0x1E,0x12,0x14,0x10,0x10,0x10,0x10},
{0xA5,0xF6,0x00,0x00,0x0B,0x18,0x0A,0x10,0x0A,0x10,0x12,0x10,0x1A,0x10,0x32,0x92,0x53,0xDF,0x12,0x10,0x12,0x10,0x12,0x10,0x12,0x10,0x12,0x52,0x12,0x92,0x17,0x13,0x12,0x0E},
{0xA5,0xF7,0x00,0x00,0x0C,0x10,0x08,0xF8,0x08,0x10,0x11,0x08,0x19,0x08,0x32,0x07,0x54,0x02,0x13,0xFC,0x10,0x84,0x10,0x84,0x10,0x84,0x11,0x04,0x11,0x04,0x12,0x38,0x14,0x10},
{0xA5,0xF8,0x00,0x00,0x01,0x80,0x02,0x80,0x02,0x40,0x04,0x20,0x08,0x18,0x10,0xC7,0x60,0x82,0x0C,0x80,0x08,0x88,0x08,0xFC,0x08,0x80,0x08,0x80,0x08,0x80,0x08,0x82,0x7F,0xFF},
{0xA5,0xF9,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x84,0x10,0x84,0x18,0x88,0x30,0x8A,0x50,0xFF,0x11,0x42,0x11,0x44,0x11,0x24,0x11,0x28,0x12,0x10,0x12,0x28,0x12,0x47,0x14,0x82},
{0xA5,0xFA,0x00,0x00,0x00,0xC0,0x00,0x80,0x20,0x8C,0x18,0x98,0x0C,0x90,0x04,0xA0,0x00,0x82,0x7F,0xFF,0x04,0x40,0x04,0x40,0x04,0x40,0x08,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA5,0xFB,0x00,0x00,0x30,0x06,0x26,0x34,0x21,0x44,0x20,0x84,0x23,0x64,0x2C,0x14,0x20,0x04,0x3F,0xFC,0x24,0x44,0x04,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA5,0xFC,0x00,0x00,0x03,0x60,0x02,0x40,0x42,0x46,0x22,0x4C,0x32,0x58,0x12,0x60,0x02,0x40,0x0A,0x60,0x12,0x58,0x62,0x4C,0x44,0x44,0x04,0x41,0x08,0x41,0x10,0x41,0x60,0x3F},
{0xA5,0xFD,0x00,0x00,0x00,0xC0,0x0C,0x80,0x08,0x88,0x1F,0xFC,0x10,0x80,0x20,0x80,0x00,0x82,0x7F,0xFF,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x22,0x08,0x22,0x10,0x23,0x60,0x1E},
{0xA5,0xFE,0x00,0x00,0x00,0x80,0x1F,0xC0,0x00,0x80,0x01,0x60,0x06,0x18,0x18,0x07,0x6F,0xFA,0x00,0x80,0x00,0x80,0x00,0x90,0x0F,0xF8,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE},
{0xA6,0x40,0x00,0x00,0x06,0x30,0x04,0x20,0x04,0x20,0x04,0x24,0x3F,0xFE,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x22,0x7F,0xFF,0x00,0x00,0x0C,0x20,0x08,0x18,0x10,0x06,0x60,0x02},
{0xA6,0x41,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x7F,0xFF,0x10,0x04,0x10,0x04,0x10,0x3C,0x10,0x08},
{0xA6,0x42,0x00,0x00,0x00,0x30,0x40,0x20,0x40,0x20,0x24,0x20,0x2B,0xA6,0x08,0xA8,0x10,0xB0,0x11,0x28,0x11,0x28,0x61,0x24,0x22,0x27,0x24,0x22,0x61,0x20,0x20,0xE0,0x00,0x40},
{0xA6,0x43,0x00,0x00,0x00,0x83,0x7F,0xC2,0x08,0x1A,0x08,0x12,0x11,0x12,0x1F,0x92,0x11,0x12,0x21,0x12,0x52,0x12,0x0A,0x12,0x04,0x02,0x04,0x02,0x08,0x12,0x10,0x0E,0x60,0x04},
{0xA6,0x44,0x00,0x00,0x00,0x83,0x7F,0xC2,0x11,0x1A,0x11,0x12,0x11,0x12,0x11,0x12,0x7F,0xD2,0x11,0x12,0x11,0x12,0x11,0x12,0x11,0x12,0x21,0x02,0x21,0x02,0x21,0x0E,0x41,0x04},
{0xA6,0x45,0x00,0x00,0x1A,0x03,0x11,0x02,0x11,0x1A,0x10,0x12,0x17,0x92,0x78,0x12,0x11,0x92,0x11,0x12,0x0A,0x12,0x0A,0x12,0x04,0x82,0x0A,0x82,0x12,0x82,0x61,0xCE,0x00,0x84},
{0xA6,0x46,0x00,0x00,0x18,0x03,0x10,0x02,0x10,0x5A,0x1F,0xD2,0x25,0x52,0x25,0x52,0x49,0x52,0x0A,0x52,0x12,0x52,0x14,0x52,0x24,0x92,0x08,0x82,0x10,0x82,0x07,0x0E,0x02,0x04},
{0xA6,0x47,0x00,0x00,0x21,0x03,0x3F,0x82,0x21,0x32,0x21,0x22,0x21,0x22,0x3F,0x22,0x21,0x22,0x21,0x22,0x21,0x22,0x3F,0x22,0x21,0x22,0x21,0x02,0x49,0x12,0x47,0x0E,0x42,0x04},
{0xA6,0x48,0x00,0x00,0x00,0xC0,0x0C,0x88,0x10,0x86,0x63,0x83,0x01,0x19,0x00,0x60,0x01,0x80,0x0E,0x00,0x70,0x84,0x0F,0xFE,0x00,0x84,0x01,0x04,0x02,0x44,0x0C,0x38,0x70,0x10},
{0xA6,0x49,0x00,0x00,0x0C,0x00,0x08,0x02,0x1F,0xFF,0x10,0x02,0x20,0x02,0x44,0xC2,0x12,0x92,0x11,0x12,0x12,0x92,0x14,0x94,0x1F,0xF4,0x10,0x14,0x00,0x04,0x00,0x38,0x00,0x10},
{0xA6,0x4A,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x40,0x08,0x5F,0xFC,0x40,0x80,0x40,0x90,0x4F,0xF8,0x40,0x80,0x40,0x88,0x5F,0xFC,0x40,0x00,0x40,0x02,0x7F,0xFF,0x40,0x00},
{0xA6,0x4B,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x44,0x78,0x47,0x80,0x44,0x00,0x44,0x08,0x47,0xFC,0x44,0x40,0x48,0x40,0x48,0x40,0x50,0x40,0x40,0x02,0x7F,0xFF,0x40,0x00},
{0xA6,0x4C,0x00,0x00,0x02,0x00,0x27,0x42,0x38,0x7F,0x20,0x42,0x22,0x42,0x3F,0x42,0x20,0x42,0x20,0x42,0x20,0x42,0x22,0x42,0x3F,0x5E,0x20,0x44,0x00,0x40,0x00,0x40,0x00,0x40},
{0xA6,0x4D,0x00,0x00,0x04,0x00,0x07,0xE0,0x0C,0x20,0x09,0xC0,0x10,0x82,0x3F,0xFF,0x50,0x00,0x12,0x10,0x13,0xF8,0x12,0x10,0x12,0x10,0x12,0x72,0x22,0x22,0x22,0x03,0x41,0xFE},
{0xA6,0x4E,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA6,0x4F,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x00,0x80,0x18,0x80,0x15,0x00,0x23,0x00,0x02,0xC0,0x0C,0x38,0x70,0x07},
{0xA6,0x50,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0x12,0x2F,0xFA,0x20,0x02,0x24,0x12,0x27,0xF2,0x24,0x12,0x24,0x12,0x27,0xF2,0x24,0x12,0x20,0x02,0x20,0x0E,0x20,0x04},
{0xA6,0x51,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x88,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x82,0x20,0x8E,0x20,0x84,0x00,0x80,0x00,0x80},
{0xA6,0x52,0x00,0x00,0x00,0x30,0x48,0x20,0x7C,0x20,0x48,0x20,0x48,0x20,0x48,0x24,0x4B,0xFE,0x48,0x20,0x48,0x20,0x78,0x20,0x48,0x20,0x40,0x20,0x00,0x22,0x0F,0xFF,0x00,0x00},
{0xA6,0x53,0x00,0x00,0x00,0x04,0x49,0xFE,0x7C,0x20,0x48,0x20,0x48,0x20,0x48,0x22,0x4B,0xFF,0x48,0x20,0x48,0x20,0x78,0x20,0x48,0x20,0x40,0x20,0x01,0x20,0x00,0xE0,0x00,0x40},
{0xA6,0x54,0x00,0x00,0x00,0x0C,0x48,0x08,0x7C,0x08,0x48,0x0A,0x4B,0xFF,0x48,0x08,0x48,0x08,0x49,0x08,0x48,0xC8,0x78,0x48,0x48,0x08,0x40,0x08,0x00,0x48,0x00,0x38,0x00,0x10},
{0xA6,0x55,0x00,0x00,0x06,0x00,0x04,0x08,0x0F,0xFC,0x14,0x10,0x63,0x20,0x00,0xC0,0x03,0x38,0x0C,0x07,0x70,0x02,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA6,0x56,0x00,0x00,0x01,0x80,0x01,0x00,0x22,0x02,0x3F,0xFF,0x20,0x02,0x24,0x22,0x27,0xF2,0x24,0x22,0x24,0x22,0x24,0x22,0x27,0xE2,0x24,0x22,0x20,0x02,0x20,0x0E,0x20,0x04},
{0xA6,0x57,0x00,0x00,0x01,0x80,0x01,0x08,0x03,0xFC,0x04,0x10,0x0A,0x20,0x31,0x40,0x01,0x80,0x02,0x04,0x07,0xFE,0x1C,0x04,0x64,0x04,0x04,0x04,0x04,0x04,0x07,0xFC,0x04,0x04},
{0xA6,0x58,0x00,0x00,0x01,0x80,0x01,0x40,0x02,0x20,0x04,0x10,0x08,0x0C,0x17,0xF7,0x60,0x02,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA6,0x59,0x00,0x00,0x00,0x60,0x48,0x40,0x7C,0x82,0x48,0xFF,0x49,0x00,0x4A,0x08,0x48,0xFC,0x48,0x08,0x48,0x10,0x78,0x20,0x48,0x42,0x40,0x82,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA6,0x5A,0x00,0x00,0x00,0x0C,0x20,0xFE,0x3F,0x80,0x20,0x00,0x20,0x02,0x3F,0xFF,0x20,0x00,0x24,0x04,0x27,0xFE,0x24,0x04,0x24,0x04,0x24,0x04,0x44,0x04,0x47,0xFC,0x44,0x04},
{0xA6,0x5B,0x00,0x00,0x00,0x60,0x48,0x40,0x7C,0x40,0x48,0x80,0x48,0x8C,0x4B,0x08,0x48,0x90,0x48,0xD0,0x48,0x20,0x78,0x48,0x48,0x44,0x40,0x86,0x01,0x3B,0x07,0xC1,0x02,0x01},
{0xA6,0x5C,0x00,0x00,0x00,0x18,0x00,0x7C,0x4B,0xC0,0x78,0x40,0x48,0x40,0x48,0x42,0x48,0x4F,0x48,0x70,0x4B,0xC0,0x48,0x40,0x78,0x40,0x48,0x42,0x40,0x42,0x00,0x43,0x00,0x3E},
{0xA6,0x5D,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0xC2,0x20,0x92,0x2F,0xFA,0x20,0x82,0x21,0x42,0x21,0x42,0x22,0x22,0x22,0x3A,0x2C,0x12,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA6,0x5E,0x00,0x00,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0x02,0x24,0x12,0x27,0xFA,0x24,0x12,0x24,0x12,0x27,0xF2,0x24,0x12,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA6,0x5F,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x27,0xF2,0x20,0x22,0x20,0x42,0x20,0x52,0x2F,0xFA,0x20,0x42,0x20,0x42,0x23,0xC2,0x20,0x82,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA6,0x60,0x00,0x00,0x18,0xC3,0x10,0x9A,0x10,0x92,0x14,0x92,0x7E,0x92,0x10,0x92,0x10,0x92,0x10,0x92,0x12,0x92,0x1C,0x92,0x70,0x92,0x20,0x92,0x01,0x02,0x01,0x02,0x02,0x02},
{0xA6,0x61,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xA0,0x11,0x24,0x7D,0x3E,0x11,0xE4,0x17,0x24,0x11,0x24,0x11,0x2C,0x11,0x24,0x1D,0x20,0x71,0x02,0x21,0x02,0x01,0x03,0x00,0xFE},
{0xA6,0x62,0x00,0x00,0x03,0x00,0x02,0x00,0x02,0x02,0x7F,0xFF,0x04,0x00,0x08,0x30,0x08,0x20,0x18,0x24,0x29,0xFE,0x48,0x20,0x08,0x20,0x08,0x20,0x08,0x22,0x0B,0xFF,0x08,0x00},
{0xA6,0x63,0x00,0x00,0x00,0xC0,0x00,0x84,0x1F,0xFE,0x00,0x80,0x00,0x82,0x3F,0xFF,0x00,0x00,0x00,0xC0,0x00,0x84,0x1F,0xFE,0x00,0x80,0x00,0x80,0x00,0x82,0x3F,0xFF,0x00,0x00},
{0xA6,0x64,0x00,0x00,0x18,0x04,0x10,0xFE,0x10,0x00,0x10,0x02,0x7D,0xFF,0x10,0x40,0x10,0x42,0x10,0x7F,0x10,0x82,0x1C,0x82,0x70,0x02,0x20,0x02,0x00,0x44,0x00,0x38,0x00,0x10},
{0xA6,0x65,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x11,0x02,0x7D,0x02,0x11,0x02,0x11,0xFE,0x11,0x02,0x11,0x00,0x15,0x00,0x19,0x00,0x71,0x02,0x21,0x02,0x01,0x03,0x00,0xFE},
{0xA6,0x66,0x00,0x00,0x18,0x04,0x11,0xFE,0x10,0x20,0x10,0x20,0x7C,0x20,0x10,0x22,0x13,0xFF,0x10,0x20,0x10,0x20,0x14,0x20,0x18,0x20,0x70,0x20,0x21,0x20,0x00,0xE0,0x00,0x40},
{0xA6,0x67,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x48,0x2F,0xE8,0x22,0x08,0x22,0x48,0x23,0xE8,0x24,0x48,0x2A,0x88,0x22,0x88,0x21,0x05,0x42,0x05,0x4C,0x03,0x40,0x01},
{0xA6,0x68,0x00,0x00,0x03,0x00,0x02,0x20,0x07,0xF0,0x08,0x40,0x36,0x80,0x01,0x00,0x06,0x60,0x18,0x42,0x60,0xFF,0x03,0x04,0x0C,0xC8,0x00,0x30,0x00,0xC0,0x03,0x00,0x1C,0x00},
{0xA6,0x69,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x3F,0xFC,0x00,0x84,0x1F,0xFC,0x10,0x80,0x3F,0xFF,0x20,0x81,0x01,0x4E,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xA6,0x6A,0x00,0x00,0x03,0x00,0x02,0x02,0x7F,0xFF,0x04,0x20,0x08,0x18,0x17,0xF7,0x60,0x02,0x1F,0xFC,0x04,0x00,0x0F,0xF8,0x08,0x08,0x00,0x08,0x00,0x10,0x01,0xE0,0x00,0x40},
{0xA6,0x6B,0x00,0x00,0x00,0xC0,0x10,0x84,0x1F,0xFE,0x10,0x00,0x10,0x00,0x0F,0xFC,0x00,0x00,0x02,0x02,0x7F,0xFF,0x02,0x10,0x04,0x20,0x0E,0x40,0x01,0xB0,0x06,0x1C,0x38,0x04},
{0xA6,0x6C,0x00,0x00,0x18,0x04,0x10,0xFE,0x12,0x10,0x7F,0x10,0x12,0x10,0x12,0x10,0x22,0x12,0x25,0xFF,0x64,0x10,0x18,0x10,0x14,0x10,0x12,0x10,0x22,0x10,0x40,0x10,0x00,0x10},
{0xA6,0x6D,0x00,0x00,0x18,0x04,0x11,0xFE,0x10,0x04,0x7F,0x04,0x12,0x04,0x12,0x04,0x22,0x84,0x22,0xFC,0x24,0x84,0x54,0x80,0x08,0x80,0x14,0x82,0x12,0x82,0x22,0x83,0x40,0x7E},
{0xA6,0x6E,0x00,0x00,0x18,0x02,0x10,0xFF,0x12,0x02,0x7F,0x04,0x12,0x18,0x12,0x10,0x22,0x12,0x25,0xFF,0x24,0x10,0x58,0x10,0x14,0x10,0x12,0x10,0x22,0x10,0x40,0x70,0x00,0x20},
{0xA6,0x6F,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0xD0,0x12,0x92,0x7E,0x97,0x12,0xBA,0x13,0xD2,0x22,0x92,0x24,0x96,0x54,0x92,0x18,0x90,0x14,0x82,0x22,0x82,0x22,0x83,0x40,0x7E},
{0xA6,0x70,0x00,0x00,0x18,0x00,0x10,0x42,0x12,0x7F,0x7F,0x42,0x12,0x42,0x12,0x42,0x22,0x42,0x22,0x42,0x24,0x42,0x54,0x42,0x08,0x42,0x14,0x42,0x12,0x7E,0x22,0x42,0x40,0x00},
{0xA6,0x71,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x42,0x12,0x7F,0x7E,0x82,0x12,0x82,0x13,0x02,0x22,0x12,0x24,0x7A,0x54,0x02,0x18,0x02,0x14,0x04,0x22,0x44,0x22,0x38,0x40,0x10},
{0xA6,0x72,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x24,0x0F,0xF0,0x00,0x20,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA6,0x73,0x00,0x00,0x06,0x00,0x04,0x02,0x7F,0xFF,0x04,0x00,0x08,0x08,0x0B,0xFC,0x10,0x08,0x30,0x30,0x50,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x11,0x20,0x10,0xE0,0x10,0x40},
{0xA6,0x74,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x12,0x1F,0xF8,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA6,0x75,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x34,0x00,0x20,0x00,0x22,0x7F,0xFF,0x00,0x20,0x10,0x20,0x0C,0x20,0x04,0x20,0x01,0x20,0x00,0xE0,0x00,0x40},
{0xA6,0x76,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x64,0x01,0xF0,0x1F,0x00,0x01,0x04,0x01,0x3E,0x07,0xC0,0x79,0x00,0x01,0x02,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA6,0x77,0x00,0x00,0x01,0x80,0x21,0x04,0x3F,0xFE,0x20,0x04,0x43,0x08,0x02,0x02,0x7F,0xFF,0x02,0x10,0x04,0x10,0x1C,0x20,0x02,0x40,0x01,0x80,0x02,0x60,0x0C,0x18,0x30,0x08},
{0xA6,0x78,0x00,0x00,0x01,0x80,0x01,0x08,0x3F,0xFC,0x01,0x00,0x01,0x02,0x7F,0xFF,0x00,0x20,0x00,0x24,0x7F,0xFE,0x10,0x20,0x0C,0x20,0x04,0x20,0x01,0x20,0x00,0xE0,0x00,0x40},
{0xA6,0x79,0x00,0x00,0x00,0xC0,0x00,0x80,0x0C,0x90,0x18,0x8C,0x12,0x86,0x21,0x82,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x01,0x60,0x02,0x18,0x0C,0x07,0x70,0x02},
{0xA6,0x7A,0x00,0x00,0x18,0x60,0x10,0x42,0x10,0xFF,0x54,0x80,0x55,0x04,0x56,0x7E,0x54,0x04,0x54,0x08,0x54,0x10,0x54,0x20,0x7C,0x42,0x44,0x42,0x40,0x82,0x00,0x83,0x00,0x7E},
{0xA6,0x7B,0x00,0x00,0x0C,0x63,0x08,0x42,0x08,0x42,0x08,0x42,0x2A,0x52,0x2A,0x52,0x49,0x4A,0x49,0x4A,0x08,0x42,0x08,0x42,0x10,0x42,0x10,0x42,0x20,0x42,0x20,0x42,0x40,0x42},
{0xA6,0x7C,0x00,0x00,0x18,0x88,0x10,0xFC,0x54,0x88,0x7E,0x88,0x54,0x88,0x54,0xC8,0x54,0xA8,0x54,0xA8,0x54,0x88,0x5C,0x88,0x54,0x88,0x11,0x0A,0x11,0x0A,0x12,0x0B,0x14,0x06},
{0xA6,0x7D,0x00,0x00,0x08,0x0C,0x1C,0x08,0x02,0x10,0x3F,0xFE,0x04,0x10,0x04,0x10,0x04,0x10,0x04,0x12,0x7F,0xFF,0x04,0x10,0x04,0x10,0x08,0x10,0x08,0x10,0x10,0x10,0x20,0x10},
{0xA6,0x7E,0x00,0x00,0x0C,0x00,0x08,0x04,0x1F,0xFE,0x10,0x40,0x20,0x40,0x48,0x48,0x0F,0xFC,0x08,0x40,0x08,0x40,0x08,0x42,0x7F,0xFF,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40},
{0xA6,0xA1,0x00,0x00,0x00,0x68,0x00,0x46,0x00,0x40,0x7F,0xFF,0x00,0x40,0x00,0x40,0x02,0x40,0x7F,0x20,0x08,0x20,0x08,0x20,0x09,0x90,0x0E,0x12,0x78,0x0A,0x20,0x07,0x00,0x02},
{0xA6,0xA2,0x00,0x00,0x04,0x18,0x7E,0x10,0x04,0xD0,0x24,0x92,0x3C,0x97,0x24,0xBA,0x21,0xD2,0x44,0x92,0x7E,0x96,0x44,0x92,0x04,0x90,0x04,0x82,0x44,0x82,0x38,0x83,0x10,0x7E},
{0xA6,0xA3,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x92,0x14,0xFF,0x52,0x80,0x52,0x80,0x50,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x7E,0x10,0x00},
{0xA6,0xA4,0x00,0x00,0x18,0x0C,0x10,0x08,0x10,0x08,0x18,0x0A,0x55,0xFF,0x54,0x08,0x51,0x08,0x10,0x88,0x10,0x88,0x10,0x48,0x10,0x08,0x10,0x08,0x10,0x48,0x10,0x38,0x10,0x10},
{0xA6,0xA5,0x00,0x00,0x00,0x68,0x00,0x46,0x00,0x40,0x7F,0xFF,0x00,0x40,0x06,0x40,0x04,0x26,0x04,0xA4,0x07,0x28,0x7C,0x10,0x24,0x10,0x08,0x29,0x08,0xC9,0x13,0x05,0x20,0x03},
{0xA6,0xA6,0x00,0x00,0x00,0x68,0x00,0x46,0x10,0x40,0x1F,0xFF,0x10,0x40,0x10,0x40,0x10,0x26,0x11,0x24,0x1F,0xA8,0x10,0x10,0x10,0x10,0x20,0x29,0x20,0xC9,0x23,0x05,0x40,0x03},
{0xA6,0xA7,0x00,0x00,0x00,0x68,0x00,0x46,0x10,0x40,0x1F,0xFF,0x10,0x40,0x10,0x40,0x14,0x26,0x12,0x24,0x13,0x28,0x11,0x10,0x10,0x10,0x20,0x29,0x20,0xC9,0x23,0x05,0x40,0x03},
{0xA6,0xA8,0x00,0x00,0x00,0x68,0x00,0x46,0x20,0x40,0x3F,0xFF,0x20,0x40,0x20,0x40,0x22,0x26,0x3F,0x24,0x22,0x28,0x22,0x28,0x22,0x10,0x22,0x2A,0x4C,0x4A,0x40,0x87,0x43,0x02},
{0xA6,0xA9,0x00,0x00,0x0C,0x00,0x08,0x82,0x08,0xFF,0x7E,0x82,0x08,0x82,0x08,0x82,0x0A,0x82,0x0C,0x82,0x78,0x82,0x28,0x82,0x08,0x82,0x08,0x82,0x48,0xFE,0x38,0x82,0x10,0x00},
{0xA6,0xAA,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x20,0x7E,0x20,0x08,0x20,0x08,0x20,0x0A,0x20,0x0C,0x20,0x78,0x20,0x28,0x20,0x08,0x20,0x08,0x20,0x48,0x22,0x3B,0xFF,0x10,0x00},
{0xA6,0xAB,0x00,0x00,0x0C,0x18,0x08,0x7C,0x09,0xC0,0x7E,0x40,0x08,0x40,0x08,0x44,0x0A,0x4E,0x0C,0x70,0x79,0xC0,0x28,0x40,0x08,0x42,0x08,0x42,0x48,0x42,0x38,0x43,0x10,0x3E},
{0xA6,0xAC,0x00,0x00,0x06,0x60,0x04,0x40,0x34,0x42,0x24,0xFF,0x24,0x84,0x24,0x84,0x25,0x44,0x26,0x48,0x24,0x28,0x3C,0x10,0x64,0x28,0x24,0x28,0x04,0x44,0x04,0x47,0x04,0x82},
{0xA6,0xAD,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x11,0x08,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA6,0xAE,0x00,0x00,0x30,0x00,0x20,0x70,0x23,0x84,0x3C,0x04,0x20,0x06,0x1F,0xFC,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA6,0xAF,0x00,0x00,0x0C,0x00,0x08,0x02,0x1F,0xFF,0x10,0x02,0x28,0x42,0x4F,0xE2,0x08,0x42,0x0F,0xC2,0x08,0x42,0x08,0x42,0x0F,0xC4,0x08,0x44,0x00,0x04,0x00,0x78,0x00,0x10},
{0xA6,0xB0,0x00,0x00,0x18,0x00,0x10,0x44,0x10,0x7E,0x12,0x44,0x7F,0x44,0x12,0x44,0x12,0x7C,0x12,0x44,0x12,0x44,0x12,0x44,0x12,0x7C,0x22,0x45,0x22,0x01,0x22,0x01,0x41,0xFE},
{0xA6,0xB1,0x00,0x00,0x03,0x30,0x02,0x20,0x22,0x22,0x3F,0xFF,0x22,0x22,0x22,0x22,0x22,0x22,0x3F,0xFE,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x3F,0xFE,0x20,0x02,0x00,0x00},
{0xA6,0xB2,0x00,0x00,0x01,0x80,0x21,0x08,0x3F,0xFC,0x21,0x08,0x21,0x08,0x3F,0xF8,0x20,0x88,0x20,0x88,0x3F,0xF8,0x20,0x80,0x00,0x58,0x00,0x62,0x01,0xA2,0x0E,0x1B,0x70,0x06},
{0xA6,0xB3,0x00,0x00,0x06,0x00,0x04,0x02,0x7F,0xFF,0x04,0x00,0x08,0x08,0x0F,0xFC,0x18,0x08,0x28,0x08,0x4F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xA6,0xB4,0x00,0x00,0x0C,0x02,0x09,0xFF,0x08,0x40,0x7E,0x40,0x08,0x42,0x18,0xFF,0x18,0x82,0x2C,0x02,0x2B,0x02,0x49,0x02,0x48,0x04,0x08,0x04,0x08,0x44,0x08,0x38,0x08,0x10},
{0xA6,0xB5,0x00,0x00,0x06,0x30,0x04,0x20,0x05,0x20,0x7F,0xA0,0x0C,0x20,0x14,0x30,0x16,0x28,0x15,0x26,0x25,0xA3,0x24,0xA1,0x44,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20},
{0xA6,0xB6,0x00,0x00,0x00,0xC0,0x0C,0x80,0x08,0x88,0x1F,0xFC,0x10,0x80,0x20,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xA6,0xB7,0x00,0x00,0x04,0x20,0x07,0xF0,0x04,0x20,0x04,0x22,0x08,0x22,0x08,0x23,0x30,0x9E,0x00,0x80,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xA6,0xB8,0x00,0x00,0x00,0xC0,0x08,0x80,0x7C,0x82,0x01,0xFF,0x01,0x02,0x02,0x34,0x04,0x20,0x00,0x20,0x02,0x20,0x0C,0x50,0x70,0x50,0x20,0x88,0x00,0x88,0x01,0x07,0x06,0x02},
{0xA6,0xB9,0x00,0x00,0x06,0x30,0x04,0x20,0x34,0x20,0x24,0x20,0x25,0x22,0x27,0xBF,0x24,0x20,0x24,0x20,0x24,0x20,0x24,0x20,0x24,0x22,0x25,0xA2,0x2E,0x22,0x70,0x23,0x20,0x1E},
{0xA6,0xBA,0x00,0x00,0x00,0x02,0x7F,0xFF,0x08,0x00,0x08,0x60,0x11,0x40,0x1F,0x40,0x11,0x44,0x11,0x7E,0x2A,0x40,0x4A,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA6,0xBB,0x00,0x00,0x10,0x08,0x1F,0xFC,0x20,0x00,0x2F,0xF0,0x40,0x00,0x1F,0xF8,0x00,0x08,0x1F,0xC8,0x04,0x88,0x04,0xE8,0x04,0xA9,0x08,0x25,0x08,0x25,0x13,0xC3,0x60,0x81},
{0xA6,0xBC,0x00,0x00,0x20,0x60,0x10,0x40,0x14,0x40,0x04,0x42,0x47,0xFF,0x28,0x84,0x28,0x84,0x09,0x04,0x11,0x08,0x11,0x08,0x62,0xD0,0x20,0x28,0x20,0x44,0x61,0x86,0x26,0x02},
{0xA6,0xBD,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x20,0x40,0x20,0x24,0x20,0x28,0x22,0x0B,0xFF,0x10,0x20,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x20,0x60,0x20,0x20,0x20,0x00,0x20},
{0xA6,0xBE,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x20,0x40,0x20,0x24,0x20,0x28,0x22,0x0B,0xFF,0x10,0x20,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x20,0x61,0x20,0x20,0xE0,0x00,0x40},
{0xA6,0xBF,0x00,0x00,0x20,0x04,0x17,0xFE,0x10,0x20,0x00,0x20,0x44,0x20,0x24,0x20,0x28,0x20,0x08,0x20,0x10,0x20,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x22,0x6F,0xFF,0x20,0x00},
{0xA6,0xC0,0x00,0x00,0x20,0x60,0x13,0x40,0x12,0x44,0x42,0x4E,0x2A,0x74,0x2B,0xC4,0x0E,0x44,0x12,0x44,0x12,0x5C,0x12,0x48,0x62,0x40,0x22,0x02,0x22,0x02,0x62,0x03,0x21,0xFE},
{0xA6,0xC1,0x00,0x00,0x20,0x60,0x10,0x40,0x10,0x42,0x02,0x7F,0x44,0x82,0x24,0x84,0x29,0x44,0x09,0x28,0x12,0x28,0x10,0x10,0x60,0x10,0x20,0x20,0x20,0x40,0x61,0x80,0x26,0x00},
{0xA6,0xC2,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x20,0x04,0x20,0x4B,0x23,0x2A,0x22,0x2A,0x22,0x12,0x22,0x12,0x22,0x12,0x22,0x62,0x22,0x22,0x22,0x23,0xFE,0x62,0x02,0x22,0x02},
{0xA6,0xC3,0x00,0x00,0x20,0x04,0x11,0xFE,0x10,0x00,0x44,0x00,0x24,0x02,0x2B,0xFF,0x08,0x80,0x10,0x82,0x11,0xFF,0x61,0x02,0x20,0x02,0x20,0x02,0x60,0x44,0x20,0x38,0x00,0x10},
{0xA6,0xC4,0x00,0x00,0x20,0x08,0x17,0xFC,0x10,0x88,0x40,0x88,0x24,0x88,0x28,0x88,0x08,0xA8,0x13,0xF8,0x10,0x88,0x60,0x88,0x20,0x89,0x21,0x05,0x61,0x05,0x22,0x03,0x04,0x02},
{0xA6,0xC5,0x00,0x00,0x20,0x60,0x10,0x40,0x10,0x48,0x03,0xFC,0x44,0x48,0x24,0x48,0x28,0x48,0x08,0x48,0x10,0x88,0x10,0xE8,0x60,0xA8,0x20,0x88,0x21,0x09,0x61,0x09,0x22,0x07},
{0xA6,0xC6,0x00,0x00,0x22,0x10,0x13,0xF8,0x12,0x10,0x42,0x10,0x26,0x10,0x2A,0x90,0x0A,0x90,0x12,0x50,0x12,0x50,0x62,0x10,0x22,0x12,0x24,0x12,0x64,0x12,0x24,0x13,0x08,0x0E},
{0xA6,0xC7,0x00,0x00,0x06,0x00,0x04,0x02,0x7F,0xFF,0x08,0x00,0x08,0x60,0x08,0x40,0x0A,0x46,0x12,0x48,0x12,0x50,0x14,0xA0,0x10,0x90,0x21,0x10,0x21,0x08,0x42,0x07,0x0C,0x02},
{0xA6,0xC8,0x00,0x00,0x03,0x00,0x02,0x10,0x04,0x0C,0x7F,0xF6,0x20,0x02,0x0C,0xC0,0x08,0x88,0x1F,0xFC,0x20,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA6,0xC9,0x00,0x00,0x06,0x60,0x34,0x40,0x24,0x40,0x3F,0x40,0x24,0x46,0x44,0x4C,0x45,0x48,0x06,0x50,0x0C,0x60,0x74,0x40,0x24,0x42,0x04,0x42,0x04,0x43,0x04,0x3E,0x04,0x00},
{0xA6,0xCA,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x12,0x04,0x1F,0xFE,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04},
{0xA6,0xCB,0x00,0x00,0x18,0x60,0x10,0x40,0x12,0x42,0x1F,0x7F,0x24,0x88,0x24,0x88,0x45,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x48,0x04,0x38,0x04,0x10},
{0xA6,0xCC,0x00,0x00,0x00,0xC0,0x10,0x8C,0x08,0x88,0x0C,0x98,0x04,0x90,0x00,0xA2,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xB0,0x04,0x88,0x18,0x87,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA6,0xCD,0x00,0x00,0x03,0x00,0x02,0x00,0x04,0x30,0x18,0x20,0x06,0x40,0x01,0x88,0x01,0x04,0x02,0x7A,0x3F,0x82,0x10,0x80,0x06,0x90,0x04,0x88,0x08,0x86,0x30,0x82,0x00,0x80},
{0xA6,0xCE,0x00,0x00,0x0C,0x00,0x08,0x08,0x1F,0xFC,0x10,0x80,0x20,0x80,0x40,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x18,0x86,0x10,0x84,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xA6,0xCF,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x24,0x3F,0xFE,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA6,0xD0,0x00,0x00,0x02,0x02,0x7F,0x7F,0x02,0x02,0x0E,0x0E,0x0A,0x0A,0x12,0x12,0x22,0x22,0x4E,0x42,0x0A,0x0E,0x12,0x0A,0x22,0x12,0x42,0x22,0x02,0x42,0x1E,0x1E,0x04,0x04},
{0xA6,0xD1,0x00,0x00,0x03,0x00,0x02,0x46,0x3F,0xE4,0x02,0x08,0x02,0x10,0x02,0x22,0x7F,0xFF,0x00,0x80,0x03,0x0C,0x0C,0x10,0x74,0x60,0x07,0x82,0x04,0x02,0x04,0x03,0x03,0xFE},
{0xA6,0xD2,0x00,0x00,0x03,0x00,0x02,0x46,0x3F,0xE4,0x02,0x08,0x02,0x32,0x7F,0xFF,0x01,0x00,0x07,0xFE,0x1A,0x00,0x63,0xF8,0x04,0x08,0x04,0x08,0x00,0x10,0x00,0xE0,0x00,0x40},
{0xA6,0xD3,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x02,0x00,0x24,0x02,0x3F,0xFF,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2E,0x20,0x04},
{0xA6,0xD4,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0xFC,0x3F,0x80,0x00,0x88,0x3F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x80,0x02,0xC0,0x04,0xB0,0x18,0x8F,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA6,0xD5,0x00,0x00,0x00,0x02,0x7F,0xFF,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x1F,0x0B,0xF0,0x7C,0x10,0x20,0x10,0x00,0x10,0x00,0x10},
{0xA6,0xD6,0x00,0x00,0x01,0x80,0x01,0x08,0x1F,0xFC,0x01,0x08,0x7F,0xFF,0x01,0x08,0x1F,0xF8,0x01,0x08,0x01,0x00,0x3F,0xFE,0x01,0x00,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA6,0xD7,0x00,0x00,0x00,0x80,0x03,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x82,0x21,0x42,0x21,0x32,0x22,0x1A,0x2C,0xCA,0x20,0x82,0x21,0x42,0x22,0x32,0x2C,0x12,0x20,0x0E,0x20,0x04},
{0xA6,0xD8,0x00,0x00,0x24,0x30,0x3E,0x20,0x24,0x20,0x24,0x22,0x3D,0xFF,0x24,0x22,0x24,0x22,0x24,0x22,0x3C,0x22,0x24,0x42,0x24,0x42,0x44,0x42,0x44,0x82,0x5C,0x9C,0x49,0x08},
{0xA6,0xD9,0x00,0x00,0x24,0x00,0x3E,0x88,0x24,0xFC,0x24,0x88,0x3C,0x88,0x24,0x88,0x24,0x88,0x24,0x88,0x3C,0x88,0x24,0x88,0x24,0x88,0x24,0x89,0x45,0x09,0x5D,0x09,0x4A,0x07},
{0xA6,0xDA,0x00,0x00,0x20,0x04,0x3F,0xFE,0x21,0x00,0x21,0x00,0x21,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x20,0x08,0x3F,0xF8,0x21,0x08,0x21,0x00,0x21,0x02,0x3F,0xFF,0x20,0x00},
{0xA6,0xDB,0x00,0x00,0x01,0x80,0x01,0x00,0x22,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xA6,0xDC,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x00,0x04,0x10,0x04,0x08,0x08,0xF4,0x7F,0x86,0x20,0x82,0x00,0x80,0x00,0x88,0x3F,0xFC,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xA6,0xDD,0x00,0x00,0x03,0x00,0x24,0x02,0x38,0x7F,0x20,0x02,0x20,0x02,0x20,0x02,0x22,0x02,0x3F,0x7E,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA6,0xDE,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x04,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04},
{0xA6,0xDF,0x00,0x00,0x18,0x0C,0x10,0x08,0x11,0x0A,0x1F,0x7F,0x11,0x08,0x21,0x68,0x32,0x48,0x2A,0x48,0x4A,0x4A,0x04,0xFF,0x04,0x08,0x08,0x08,0x10,0x08,0x20,0x08,0x00,0x08},
{0xA6,0xE0,0x00,0x00,0x00,0xC0,0x00,0x80,0x09,0x08,0x0F,0xFC,0x08,0x08,0x09,0x08,0x08,0xC8,0x08,0x0A,0x7F,0xFF,0x08,0x88,0x08,0x88,0x08,0x88,0x10,0x88,0x10,0xB8,0x20,0x10},
{0xA6,0xE1,0x00,0x00,0x10,0x10,0x1F,0xF8,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10,0x10,0x10,0x1F,0xF0,0x11,0x10,0x10,0x86,0x10,0x58,0x13,0x20,0x1C,0x18,0x70,0x07,0x20,0x02},
{0xA6,0xE2,0x00,0x00,0x06,0x00,0x04,0x20,0x0F,0xF0,0x08,0x40,0x10,0x84,0x3F,0xFE,0x50,0x84,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04,0x10,0x01,0x10,0x01,0x10,0x01,0x0F,0xFF},
{0xA6,0xE3,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x18,0x18,0x14,0x10,0x24,0x20,0x02,0x20,0x01,0x40,0x00,0x80,0x01,0x60,0x02,0x18,0x0C,0x07,0x70,0x02},
{0xA6,0xE4,0x00,0x00,0x01,0x80,0x01,0x00,0x21,0x04,0x3F,0xFE,0x21,0x04,0x21,0x04,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x01,0x08,0x01,0x04,0x01,0xFA,0x7F,0x03,0x20,0x01},
{0xA6,0xE5,0x00,0x00,0x01,0x80,0x01,0x00,0x22,0x04,0x3F,0xFE,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x22,0x44,0x7F,0xFF,0x00,0x00},
{0xA6,0xE6,0x00,0x00,0x0C,0x04,0x09,0xFE,0x10,0x00,0x26,0x00,0x44,0x02,0x09,0xFF,0x18,0x08,0x28,0x08,0x48,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x48,0x08,0x38,0x08,0x10},
{0xA6,0xE7,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0x80,0x04,0x86,0x18,0x4C,0x68,0x50,0x08,0x20,0x08,0x10,0x09,0x90,0x0E,0x0C,0x38,0x07,0x10,0x02},
{0xA6,0xE8,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x40,0x22,0x42,0x3F,0xFF,0x22,0x42,0x22,0x42,0x22,0x4A,0x24,0x4A,0x24,0x3A,0x28,0x02,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA6,0xE9,0x00,0x00,0x48,0x0C,0x7C,0x1E,0x49,0xF0,0x48,0x10,0x50,0x10,0x50,0x10,0x48,0x12,0x45,0xFF,0x44,0x10,0x44,0x10,0x78,0x10,0x50,0x10,0x40,0x10,0x40,0x10,0x40,0x10},
{0xA6,0xEA,0x00,0x00,0x00,0xC0,0x08,0x88,0x0F,0xFC,0x08,0x88,0x08,0x88,0x0F,0xF8,0x08,0x88,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x82,0x00,0x80,0x00,0x80},
{0xA6,0xEB,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x00,0x00,0x7F,0xFC,0x00,0x18,0x00,0xE0,0x00,0x80,0x00,0x80,0x07,0x80,0x01,0x00},
{0xA6,0xEC,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x22,0x13,0xFF,0x18,0x00,0x31,0x06,0x51,0x04,0x10,0x84,0x10,0x88,0x10,0x88,0x10,0x48,0x10,0x50,0x10,0x12,0x17,0xFF,0x10,0x00},
{0xA6,0xED,0x00,0x00,0x0C,0x40,0x08,0x30,0x08,0x12,0x13,0xFF,0x18,0x20,0x30,0x20,0x50,0x20,0x10,0x24,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x00},
{0xA6,0xEE,0x00,0x00,0x0C,0x30,0x09,0x22,0x09,0xFF,0x11,0x02,0x1A,0x04,0x30,0x02,0x53,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x11,0x20,0x10,0xE0,0x10,0x40},
{0xA6,0xEF,0x00,0x00,0x0C,0x30,0x09,0x22,0x09,0xFF,0x11,0x02,0x1A,0x04,0x30,0xC0,0x50,0x80,0x10,0x8C,0x10,0x90,0x10,0xE0,0x10,0x80,0x10,0x82,0x10,0x82,0x10,0x83,0x10,0x7E},
{0xA6,0xF0,0x00,0x00,0x0C,0x08,0x09,0xFC,0x08,0x00,0x10,0x04,0x1B,0xFE,0x30,0x40,0x50,0x42,0x17,0xFF,0x10,0x84,0x10,0x84,0x11,0x08,0x12,0x90,0x10,0x60,0x11,0x98,0x16,0x06},
{0xA6,0xF1,0x00,0x00,0x0C,0x30,0x08,0x20,0x09,0xA4,0x11,0x22,0x12,0x23,0x35,0xFD,0x50,0x20,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA6,0xF2,0x00,0x00,0x0C,0x90,0x08,0x94,0x0B,0xFE,0x10,0x94,0x12,0x94,0x33,0xFC,0x52,0x90,0x12,0x92,0x17,0xFF,0x14,0x92,0x10,0x92,0x10,0x9E,0x11,0x14,0x11,0x10,0x12,0x10},
{0xA6,0xF3,0x00,0x00,0x0C,0x00,0x08,0x02,0x0B,0xFF,0x10,0x04,0x1A,0x24,0x33,0xF4,0x52,0x24,0x12,0x24,0x12,0x24,0x13,0xE4,0x12,0x24,0x10,0x04,0x10,0x24,0x10,0x1C,0x10,0x08},
{0xA6,0xF4,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x22,0x17,0xFF,0x10,0x20,0x30,0x20,0x50,0x20,0x12,0x22,0x13,0xFF,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,0x13,0xFE,0x12,0x02},
{0xA6,0xF5,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x13,0xFF,0x18,0x80,0x30,0x80,0x50,0x84,0x11,0xFE,0x11,0x10,0x12,0x10,0x12,0x10,0x14,0x10,0x10,0x12,0x13,0xFF,0x10,0x00},
{0xA6,0xF6,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x17,0xFF,0x10,0x80,0x30,0x80,0x51,0x04,0x11,0xFE,0x13,0x04,0x15,0x04,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xA6,0xF7,0x00,0x00,0x0D,0x80,0x09,0x00,0x09,0x09,0x11,0x2F,0x1B,0xE9,0x31,0x29,0x51,0x29,0x11,0x29,0x11,0x29,0x11,0x29,0x11,0x29,0x11,0x29,0x12,0x29,0x12,0xEF,0x14,0x49},
{0xA6,0xF8,0x00,0x00,0x0C,0x02,0x0B,0xFF,0x08,0x02,0x10,0x12,0x1B,0xFA,0x30,0x02,0x51,0x12,0x11,0xFA,0x11,0x12,0x11,0x12,0x11,0xF2,0x11,0x12,0x10,0x02,0x10,0x0E,0x10,0x04},
{0xA6,0xF9,0x00,0x00,0x0C,0x30,0x08,0x20,0x0A,0x22,0x13,0xFF,0x1A,0x22,0x32,0x22,0x53,0xFE,0x12,0x22,0x12,0x22,0x13,0xFE,0x12,0x22,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA6,0xFA,0x00,0x00,0x0C,0x00,0x0A,0x02,0x0B,0xFF,0x12,0x22,0x1A,0x22,0x32,0x22,0x52,0x22,0x13,0xFE,0x12,0x22,0x12,0x22,0x12,0x22,0x12,0x22,0x13,0xFE,0x12,0x02,0x10,0x00},
{0xA6,0xFB,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x20,0x10,0x22,0x18,0x3F,0x30,0x20,0x50,0x20,0x12,0x22,0x13,0xFF,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,0x13,0xFE,0x12,0x02},
{0xA6,0xFC,0x00,0x00,0x0C,0x03,0x09,0x82,0x09,0x02,0x11,0x42,0x19,0x22,0x31,0x12,0x51,0x12,0x11,0x04,0x11,0x04,0x11,0x24,0x11,0x4A,0x13,0x89,0x11,0x11,0x10,0x21,0x10,0x40},
{0xA6,0xFD,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x04,0x11,0x04,0x19,0x04,0x31,0xFC,0x51,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04,0x10,0x00,0x10,0x02,0x17,0xFF,0x10,0x00},
{0xA6,0xFE,0x00,0x00,0x0A,0x02,0x0B,0xFF,0x0A,0x22,0x12,0x22,0x1A,0x22,0x33,0xFE,0x52,0x22,0x12,0x22,0x12,0x22,0x13,0xFE,0x12,0x22,0x12,0x22,0x12,0x22,0x14,0x2E,0x14,0x04},
{0xA7,0x40,0x00,0x00,0x0D,0x80,0x09,0x02,0x09,0xFF,0x11,0x40,0x1A,0x40,0x32,0x44,0x54,0x7E,0x10,0x40,0x10,0x40,0x10,0x44,0x10,0x7E,0x10,0x40,0x10,0x40,0x10,0x40,0x10,0x40},
{0xA7,0x41,0x00,0x00,0x0D,0x80,0x09,0x00,0x09,0x02,0x11,0xFF,0x1A,0x22,0x32,0x24,0x54,0x20,0x11,0xA8,0x11,0x24,0x13,0x26,0x12,0x22,0x14,0x22,0x10,0x20,0x10,0xE0,0x10,0x40},
{0xA7,0x42,0x00,0x00,0x0C,0x30,0x08,0x20,0x09,0x42,0x11,0xFF,0x19,0x02,0x31,0x02,0x51,0x02,0x11,0x02,0x11,0xFE,0x11,0x02,0x11,0x02,0x11,0x02,0x11,0x02,0x11,0xFE,0x11,0x02},
{0xA7,0x43,0x00,0x00,0x0C,0x0C,0x09,0x1E,0x09,0xF0,0x11,0x10,0x19,0x10,0x31,0x12,0x51,0xFF,0x11,0x08,0x11,0x08,0x11,0x69,0x17,0x89,0x12,0x05,0x10,0x25,0x17,0xF3,0x10,0x01},
{0xA7,0x44,0x00,0x00,0x0C,0x60,0x08,0xA0,0x08,0x90,0x11,0x0C,0x16,0xF3,0x38,0x00,0x50,0x04,0x13,0xFE,0x10,0x44,0x10,0x44,0x10,0x44,0x10,0x5C,0x10,0x48,0x10,0x40,0x10,0x40},
{0xA7,0x45,0x00,0x00,0x01,0x80,0x01,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x6F,0xFA,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0C,0x90,0x08,0x8C,0x10,0x86,0x63,0x82,0x01,0x00},
{0xA7,0x46,0x00,0x00,0x0D,0x80,0x09,0x00,0x09,0x02,0x13,0xFF,0x12,0x02,0x35,0x12,0x51,0xFA,0x11,0x12,0x11,0x12,0x11,0x12,0x11,0xF2,0x11,0x14,0x10,0x04,0x10,0x38,0x10,0x10},
{0xA7,0x47,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x17,0xFF,0x10,0x80,0x31,0x30,0x51,0x22,0x13,0xFF,0x15,0x22,0x11,0x22,0x11,0x22,0x11,0x2E,0x11,0x24,0x10,0x20,0x10,0x20},
{0xA7,0x48,0x00,0x00,0x0C,0x30,0x09,0xA0,0x09,0x24,0x11,0xFE,0x12,0x20,0x34,0x20,0x50,0x22,0x17,0xFF,0x10,0x20,0x10,0x50,0x10,0x50,0x10,0x88,0x10,0x88,0x11,0x07,0x16,0x02},
{0xA7,0x49,0x00,0x00,0x00,0x20,0x06,0xF0,0x04,0x20,0x08,0x10,0x10,0x08,0x6F,0xF7,0x08,0x12,0x08,0x10,0x08,0x10,0x0F,0xF0,0x0A,0x50,0x02,0x42,0x04,0x42,0x08,0x43,0x70,0x3E},
{0xA7,0x4A,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x01,0x00,0x11,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x12,0x48,0x02,0x42,0x04,0x42,0x08,0x43,0x70,0x3E},
{0xA7,0x4B,0x00,0x00,0x00,0x40,0x3F,0xE0,0x08,0x40,0x10,0x40,0x13,0x80,0x21,0x08,0x7F,0xFC,0x21,0x08,0x21,0x08,0x3F,0xF8,0x22,0x88,0x04,0x82,0x04,0x82,0x18,0x83,0x60,0x7E},
{0xA7,0x4C,0x00,0x00,0x00,0x18,0x08,0x7C,0x0F,0x80,0x08,0x00,0x08,0x04,0x0F,0xFE,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x22,0x7F,0xFF,0x00,0x00,0x06,0x30,0x18,0x0E,0x60,0x02},
{0xA7,0x4D,0x00,0x00,0x00,0x30,0x40,0x20,0x44,0x48,0x24,0x44,0x28,0x9A,0x0B,0xE3,0x09,0x01,0x10,0x00,0x11,0x02,0x61,0xFF,0x21,0x02,0x21,0x02,0x61,0x02,0x21,0xFE,0x01,0x02},
{0xA7,0x4E,0x00,0x00,0x00,0x60,0x40,0x50,0x40,0x90,0x20,0x88,0x29,0x14,0x0A,0xFB,0x14,0x00,0x10,0x04,0x13,0xFE,0x60,0x44,0x20,0x44,0x20,0x5C,0x60,0x48,0x20,0x40,0x00,0x40},
{0xA7,0x4F,0x00,0x00,0x20,0x83,0x3F,0xC2,0x20,0x9A,0x20,0x92,0x20,0x92,0x3F,0x92,0x28,0x92,0x08,0x12,0x0F,0xD2,0x08,0x92,0x10,0x82,0x10,0x82,0x10,0x92,0x27,0x0E,0x42,0x04},
{0xA7,0x50,0x00,0x00,0x06,0x03,0x04,0x02,0x35,0x1A,0x24,0x92,0x24,0x52,0x5F,0x52,0x04,0x12,0x04,0x12,0x07,0x92,0x7C,0x12,0x24,0x12,0x08,0x02,0x08,0x12,0x10,0x0E,0x20,0x04},
{0xA7,0x51,0x00,0x00,0x07,0x83,0x3C,0x02,0x04,0x1A,0x04,0x12,0x04,0x92,0x7F,0xD2,0x0C,0x12,0x16,0x12,0x15,0x12,0x25,0x92,0x24,0x92,0x44,0x02,0x04,0x12,0x04,0x0E,0x04,0x04},
{0xA7,0x52,0x00,0x00,0x20,0x43,0x3F,0xE2,0x2A,0x4A,0x2A,0x4A,0x2A,0x4A,0x2A,0x4A,0x7F,0xEA,0x2A,0x4A,0x2A,0x4A,0x2A,0x4A,0x2A,0x4A,0x2A,0x42,0x2A,0x42,0x21,0xCE,0x20,0x84},
{0xA7,0x53,0x00,0x00,0x18,0x03,0x10,0x82,0x1F,0xDA,0x20,0x92,0x3E,0x92,0x52,0x92,0x12,0x92,0x1E,0x92,0x10,0x92,0x13,0x12,0x10,0x52,0x10,0x42,0x10,0x62,0x0F,0xCE,0x00,0x04},
{0xA7,0x54,0x00,0x00,0x06,0x18,0x04,0x10,0x05,0x10,0x3F,0x92,0x04,0x7F,0x04,0x12,0x04,0x92,0x7F,0xD2,0x08,0x12,0x0A,0x12,0x11,0x22,0x16,0xA2,0x78,0xA2,0x20,0x4E,0x00,0x84},
{0xA7,0x55,0x00,0x00,0x00,0x30,0x22,0x20,0x3F,0x20,0x22,0x22,0x22,0xFF,0x3E,0x22,0x22,0x22,0x22,0x22,0x3E,0x22,0x22,0x22,0x22,0x22,0x27,0x42,0x78,0x42,0x20,0x9C,0x03,0x08},
{0xA7,0x56,0x00,0x00,0x18,0x00,0x12,0x04,0x7F,0x7E,0x12,0x44,0x62,0x24,0x14,0x18,0x0A,0x2C,0x32,0xC3,0x41,0x08,0x3F,0xFC,0x02,0x08,0x02,0x08,0x04,0x88,0x18,0x70,0x60,0x20},
{0xA7,0x57,0x00,0x00,0x18,0x0C,0x10,0x08,0x10,0x88,0x3F,0x89,0x20,0xBF,0x52,0x89,0x1E,0x89,0x12,0x89,0x12,0x89,0x1E,0x89,0x12,0x91,0x00,0x91,0x01,0x21,0x0E,0x2E,0x04,0x44},
{0xA7,0x58,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x4F,0xF8,0x48,0x88,0x48,0x88,0x4F,0xF8,0x48,0x88,0x48,0x88,0x4F,0xF8,0x48,0x88,0x40,0x80,0x40,0x82,0x7F,0xFF,0x40,0x00},
{0xA7,0x59,0x00,0x00,0x21,0x22,0x3F,0xBF,0x21,0x22,0x21,0x22,0x3F,0x22,0x21,0x22,0x21,0x22,0x3F,0x22,0x21,0x22,0x24,0x22,0x22,0x32,0x2D,0x2E,0x71,0x24,0x20,0x20,0x00,0x20},
{0xA7,0x5A,0x00,0x00,0x23,0x42,0x3C,0x7F,0x20,0x42,0x21,0x42,0x29,0x52,0x25,0x4A,0x25,0x4A,0x21,0x42,0x23,0x42,0x2D,0x52,0x71,0x4E,0x22,0x44,0x02,0x40,0x04,0x40,0x18,0x40},
{0xA7,0x5B,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x08,0x0C,0x10,0x33,0x20,0x01,0xC0,0x0E,0x38,0x70,0x07,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA7,0x5C,0x00,0x00,0x00,0x30,0x48,0x20,0x78,0x22,0x4B,0xFF,0x48,0x00,0x48,0x88,0x48,0xFC,0x48,0x88,0x48,0x88,0x78,0x88,0x48,0x88,0x41,0x09,0x01,0x09,0x02,0x09,0x04,0x07},
{0xA7,0x5D,0x00,0x00,0x00,0x10,0x1F,0xF8,0x02,0x00,0x02,0x02,0x7F,0xFF,0x04,0x20,0x04,0x10,0x08,0x0C,0x10,0x03,0x6F,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA7,0x5E,0x00,0x00,0x00,0x04,0x3F,0xFE,0x01,0x00,0x01,0x10,0x1F,0xF8,0x02,0x10,0x02,0x12,0x7F,0xFF,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA7,0x5F,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x80,0x02,0xA0,0x04,0x98,0x18,0x86,0x60,0x82,0x00,0x80,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA7,0x60,0x00,0x00,0x01,0x04,0x49,0xFE,0x7D,0x04,0x49,0x04,0x49,0x04,0x49,0x04,0x49,0xFC,0x49,0x24,0x79,0x20,0x49,0x10,0x42,0x10,0x02,0x08,0x04,0x0C,0x04,0x07,0x08,0x02},
{0xA7,0x61,0x00,0x00,0x01,0x04,0x49,0xFE,0x7D,0x24,0x49,0x24,0x49,0x24,0x49,0x24,0x49,0x24,0x49,0xFC,0x49,0x04,0x79,0x00,0x49,0x00,0x41,0x02,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA7,0x62,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xA7,0x63,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x00,0x4A,0x00,0x4A,0x44,0x4A,0x7E,0x4A,0x44,0x4A,0x44,0x4A,0x44,0x7A,0x5C,0x4A,0x48,0x02,0x42,0x04,0x42,0x04,0x43,0x08,0x3E},
{0xA7,0x64,0x00,0x00,0x02,0x10,0x03,0xF8,0x1A,0x10,0x13,0xF0,0x12,0x10,0x10,0x00,0x1F,0xFC,0x10,0x88,0x00,0x88,0x00,0x8A,0x7F,0xFF,0x01,0x40,0x02,0x30,0x0C,0x0F,0x30,0x02},
{0xA7,0x65,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x00,0x00,0x00,0xF8,0x1F,0x80,0x00,0x80,0x00,0x88,0x3F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xA7,0x66,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x88,0x01,0x00,0x22,0x02,0x3F,0xFF,0x20,0x02,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA7,0x67,0x00,0x00,0x00,0x08,0x3F,0xFC,0x01,0x08,0x01,0x0A,0x7F,0xFF,0x02,0x08,0x02,0x08,0x3F,0xF8,0x04,0x00,0x0F,0xFC,0x14,0x04,0x64,0x04,0x04,0x04,0x07,0xFC,0x04,0x04},
{0xA7,0x68,0x00,0x00,0x00,0x38,0x48,0x08,0x7D,0x88,0x49,0x04,0x49,0x04,0x4A,0x02,0x4D,0xFD,0x48,0x44,0x48,0x44,0x78,0x44,0x48,0x84,0x40,0x84,0x01,0x04,0x01,0x38,0x02,0x10},
{0xA7,0x69,0x00,0x00,0x00,0xC0,0x0C,0x80,0x08,0x88,0x1F,0xFC,0x20,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA7,0x6A,0x00,0x00,0x00,0xC0,0x48,0x80,0x7C,0x82,0x48,0xFF,0x49,0x02,0x49,0x34,0x4A,0x20,0x48,0x20,0x48,0x60,0x78,0x50,0x48,0x50,0x40,0x88,0x01,0x08,0x02,0x07,0x0C,0x02},
{0xA7,0x6B,0x00,0x00,0x00,0xC0,0x48,0x80,0x7C,0x82,0x48,0xFF,0x49,0x4A,0x49,0x4A,0x4A,0x4A,0x48,0x92,0x48,0x92,0x79,0x22,0x4A,0x22,0x40,0x44,0x00,0x84,0x01,0x38,0x00,0x10},
{0xA7,0x6C,0x00,0x00,0x00,0x08,0x03,0xFC,0x48,0x88,0x7C,0x88,0x48,0x90,0x48,0x92,0x48,0xFF,0x49,0x42,0x49,0x22,0x79,0x24,0x4A,0x18,0x42,0x28,0x04,0x24,0x08,0x47,0x01,0x82},
{0xA7,0x6D,0x00,0x00,0x00,0x60,0x48,0x40,0x7C,0x48,0x48,0x84,0x48,0x9E,0x4B,0xE3,0x49,0x01,0x48,0x00,0x78,0xCC,0x48,0x88,0x40,0x88,0x00,0x89,0x01,0x09,0x01,0x09,0x06,0x07},
{0xA7,0x6E,0x00,0x00,0x00,0x30,0x48,0x20,0x7C,0x20,0x49,0xA8,0x49,0x26,0x49,0x23,0x4A,0x21,0x4C,0x20,0x78,0xE6,0x48,0x44,0x40,0x08,0x00,0x10,0x00,0x60,0x01,0x80,0x0E,0x00},
{0xA7,0x6F,0x00,0x00,0x00,0x20,0x00,0xF0,0x48,0x20,0x7A,0x22,0x4B,0xFF,0x4A,0x22,0x4A,0x52,0x4A,0x52,0x4A,0x4A,0x7A,0x86,0x4A,0x02,0x42,0x02,0x02,0x02,0x02,0x0E,0x02,0x04},
{0xA7,0x70,0x00,0x00,0x00,0x34,0x48,0x22,0x7C,0x22,0x48,0x20,0x48,0x22,0x4B,0xFF,0x48,0x20,0x48,0x20,0x48,0x50,0x78,0x50,0x48,0x48,0x40,0x88,0x00,0x84,0x01,0x07,0x06,0x02},
{0xA7,0x71,0x00,0x00,0x00,0x4C,0x07,0xE8,0x50,0x48,0x78,0x88,0x50,0x88,0x50,0xA8,0x50,0xC8,0x51,0x88,0x56,0x88,0x74,0x88,0x50,0x88,0x50,0x89,0x00,0x89,0x03,0x89,0x01,0x07},
{0xA7,0x72,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x10,0x49,0x90,0x49,0x10,0x49,0x12,0x4B,0xFF,0x48,0x30,0x48,0x50,0x78,0x50,0x48,0x90,0x41,0x10,0x06,0x10,0x00,0x70,0x00,0x20},
{0xA7,0x73,0x00,0x00,0x00,0x30,0x48,0x20,0x78,0x22,0x4B,0xFF,0x48,0x20,0x48,0x20,0x48,0x24,0x4B,0xFE,0x49,0x04,0x78,0x88,0x48,0x50,0x40,0x20,0x00,0x50,0x01,0x8C,0x06,0x07},
{0xA7,0x74,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x30,0x1B,0xCC,0x60,0x03,0x00,0x10,0x3F,0xF8,0x00,0x10,0x00,0x20,0x10,0x48,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA7,0x75,0x00,0x00,0x00,0x60,0x48,0xD0,0x7C,0x88,0x49,0x04,0x4A,0x13,0x4D,0xF8,0x48,0x00,0x48,0x04,0x4B,0xFE,0x78,0x08,0x48,0x08,0x40,0x10,0x00,0x10,0x00,0x20,0x00,0x20},
{0xA7,0x76,0x00,0x00,0x00,0x0C,0x49,0x1E,0x7D,0xE0,0x49,0x00,0x49,0x00,0x49,0x02,0x49,0xFF,0x49,0x10,0x79,0x10,0x49,0x10,0x42,0x10,0x02,0x10,0x02,0x10,0x04,0x10,0x08,0x10},
{0xA7,0x77,0x00,0x00,0x03,0x00,0x24,0x02,0x3F,0xFF,0x20,0x02,0x2C,0xC2,0x22,0x9A,0x21,0x12,0x23,0x22,0x24,0xC2,0x28,0xA2,0x21,0x32,0x22,0x12,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA7,0x78,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0xC2,0x20,0x92,0x2F,0xFA,0x21,0x82,0x22,0xC2,0x22,0xA2,0x24,0xA2,0x28,0x9A,0x20,0x82,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA7,0x79,0x00,0x00,0x20,0x02,0x3F,0xFF,0x21,0x02,0x21,0x22,0x2F,0xF2,0x21,0x02,0x2D,0x32,0x29,0x22,0x2F,0xE2,0x29,0x2A,0x21,0x0A,0x20,0xFA,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA7,0x7A,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x23,0x02,0x22,0x12,0x23,0xFA,0x25,0x52,0x29,0x52,0x22,0x52,0x24,0x92,0x21,0x12,0x22,0x62,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA7,0x7B,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x10,0x80,0x7C,0x80,0x10,0x84,0x10,0xFE,0x10,0x84,0x14,0x84,0x18,0x84,0x70,0x84,0x21,0x04,0x01,0x04,0x02,0x38,0x0C,0x10},
{0xA7,0x7C,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x10,0x00,0x7C,0x00,0x10,0x88,0x10,0xFC,0x10,0x88,0x14,0x88,0x18,0x88,0x70,0x88,0x21,0x09,0x01,0x09,0x02,0x09,0x0C,0x07},
{0xA7,0x7D,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x20,0x10,0x20,0x7D,0xA0,0x11,0x24,0x11,0x3E,0x11,0x20,0x15,0x20,0x19,0x20,0x71,0x20,0x21,0x20,0x01,0x22,0x0F,0xFF,0x00,0x00},
{0xA7,0x7E,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x11,0x44,0x7D,0x34,0x11,0x14,0x11,0x04,0x17,0xFF,0x11,0x04,0x15,0x04,0x19,0x04,0x72,0x04,0x22,0x24,0x02,0x1C,0x04,0x08},
{0xA7,0xA1,0x00,0x00,0x18,0xC0,0x10,0x80,0x10,0x82,0x10,0xFF,0x7D,0x02,0x11,0x12,0x12,0xFA,0x10,0x02,0x10,0x12,0x14,0xFA,0x18,0x02,0x70,0x04,0x20,0x04,0x00,0x78,0x00,0x10},
{0xA7,0xA2,0x00,0x00,0x18,0xC0,0x10,0x80,0x10,0x82,0x10,0xFF,0x7D,0x02,0x11,0x34,0x12,0x20,0x10,0x20,0x10,0x20,0x14,0x50,0x18,0x50,0x70,0x88,0x20,0x88,0x01,0x07,0x06,0x02},
{0xA7,0xA3,0x00,0x00,0x18,0x08,0x13,0xFC,0x10,0x88,0x10,0x88,0x7C,0x90,0x10,0x92,0x10,0xFF,0x11,0x42,0x15,0x22,0x19,0x24,0x72,0x18,0x22,0x28,0x04,0x24,0x08,0x47,0x01,0x82},
{0xA7,0xA4,0x00,0x00,0x00,0xC0,0x0C,0x8C,0x08,0x88,0x08,0x88,0x14,0x94,0x12,0x92,0x22,0xA2,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA7,0xA5,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x20,0x10,0x20,0x7C,0x40,0x10,0x70,0x10,0xA4,0x10,0xA2,0x14,0xA3,0x19,0x21,0x71,0x21,0x22,0x20,0x00,0x20,0x00,0x20,0x00,0x20},
{0xA7,0xA6,0x00,0x00,0x18,0x0C,0x10,0x9E,0x10,0xE0,0x14,0x80,0x7E,0x80,0x10,0x82,0x10,0xFF,0x10,0x88,0x12,0x88,0x1C,0x88,0x70,0x88,0x21,0x08,0x01,0x08,0x02,0x08,0x04,0x08},
{0xA7,0xA7,0x00,0x00,0x06,0x18,0x34,0x10,0x24,0x10,0x24,0x10,0x3C,0x12,0x25,0xFF,0x04,0x10,0x04,0x10,0x7C,0x10,0x24,0x10,0x24,0x10,0x24,0x10,0x24,0x14,0x44,0xFE,0x44,0x00},
{0xA7,0xA8,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x18,0x86,0x10,0x84,0x28,0x8A,0x25,0x49,0x45,0x51,0x01,0x20,0x02,0x20,0x02,0x10,0x04,0x0C,0x18,0x07,0x60,0x02},
{0xA7,0xA9,0x00,0x00,0x06,0x60,0x34,0x40,0x24,0x40,0x24,0x42,0x3D,0xFF,0x24,0x44,0x04,0x44,0x04,0x84,0x7C,0x88,0x25,0x48,0x24,0x30,0x24,0x28,0x44,0x44,0x44,0x46,0x05,0x82},
{0xA7,0xAA,0x00,0x00,0x18,0x8E,0x10,0xF0,0x10,0x80,0x12,0x82,0x7E,0xFF,0x12,0x82,0x22,0x82,0x22,0x82,0x64,0xFE,0x54,0x82,0x08,0x80,0x14,0x80,0x15,0x00,0x21,0x00,0x42,0x00},
{0xA7,0xAB,0x00,0x00,0x18,0x30,0x10,0x22,0x11,0xFF,0x7E,0x40,0x12,0x40,0x12,0x44,0x22,0x7E,0x24,0x44,0x64,0x44,0x58,0x44,0x14,0x84,0x24,0x84,0x21,0x04,0x41,0x38,0x02,0x10},
{0xA7,0xAC,0x00,0x00,0x18,0x04,0x10,0xFE,0x12,0x24,0x7F,0x24,0x12,0x24,0x12,0x24,0x12,0x24,0x22,0xFF,0x64,0x44,0x54,0x44,0x08,0x44,0x14,0x44,0x14,0x44,0x21,0xFF,0x40,0x00},
{0xA7,0xAD,0x00,0x00,0x31,0x8C,0x21,0x08,0x25,0x08,0x7D,0x08,0x25,0x08,0x25,0x4A,0x25,0xEF,0x49,0x08,0x69,0x08,0x59,0x08,0x15,0x08,0x15,0x29,0x21,0xC9,0x23,0x09,0x41,0x07},
{0xA7,0xAE,0x00,0x00,0x30,0x18,0x20,0x10,0x24,0x10,0x7E,0xD4,0x24,0x93,0x24,0x91,0x25,0x10,0x44,0x73,0x68,0x22,0x58,0x04,0x14,0x08,0x12,0x10,0x22,0x20,0x40,0xC0,0x03,0x00},
{0xA7,0xAF,0x00,0x00,0x18,0x0C,0x10,0x1E,0x12,0xF0,0x7E,0x10,0x12,0x10,0x12,0x12,0x23,0xFF,0x22,0x10,0x64,0x10,0x54,0x28,0x08,0x28,0x14,0x44,0x24,0x44,0x40,0x82,0x01,0x01},
{0xA7,0xB0,0x00,0x00,0x18,0x02,0x10,0xFF,0x12,0x24,0x7F,0x24,0x12,0x24,0x12,0x24,0x22,0x24,0x24,0xFF,0x64,0x24,0x58,0x24,0x14,0x24,0x12,0x24,0x22,0x44,0x40,0x44,0x00,0x84},
{0xA7,0xB1,0x00,0x00,0x18,0x04,0x10,0xFE,0x12,0x04,0x7F,0x68,0x12,0x10,0x12,0x02,0x22,0xFF,0x24,0x12,0x64,0x14,0x58,0x10,0x14,0x10,0x12,0x10,0x22,0x90,0x40,0x70,0x00,0x20},
{0xA7,0xB2,0x00,0x00,0x30,0x30,0x20,0x20,0x24,0x22,0x7D,0xFF,0x24,0x20,0x24,0x24,0x25,0xFE,0x44,0x84,0x68,0x44,0x50,0x48,0x18,0x30,0x14,0x10,0x24,0x28,0x20,0x47,0x41,0x82},
{0xA7,0xB3,0x00,0x00,0x18,0x0C,0x10,0x1E,0x10,0xF0,0x7E,0x10,0x12,0x10,0x12,0x10,0x22,0x12,0x22,0xFF,0x64,0x10,0x54,0x10,0x08,0x10,0x14,0x10,0x12,0x14,0x22,0xFE,0x40,0x00},
{0xA7,0xB4,0x00,0x00,0x00,0x7E,0x1F,0x80,0x10,0x88,0x10,0x66,0x23,0x22,0x02,0x00,0x02,0x02,0x7F,0xFF,0x02,0x10,0x04,0x20,0x04,0x20,0x0B,0xC0,0x01,0x30,0x06,0x0C,0x38,0x04},
{0xA7,0xB5,0x00,0x00,0x03,0x00,0x02,0x46,0x1F,0xE4,0x02,0x08,0x02,0x12,0x7F,0xFF,0x00,0x80,0x1F,0xF0,0x04,0x20,0x18,0x44,0x6F,0xFE,0x00,0x40,0x00,0x40,0x03,0xC0,0x00,0x80},
{0xA7,0xB6,0x00,0x00,0x02,0x60,0x7F,0x40,0x02,0x40,0x0C,0x42,0x08,0xFF,0x0A,0x84,0x0C,0x84,0x19,0x44,0x7A,0x48,0x28,0x28,0x08,0x10,0x08,0x28,0x48,0x28,0x38,0x44,0x11,0x83},
{0xA7,0xB7,0x00,0x00,0x00,0x7E,0x1F,0x80,0x11,0x08,0x10,0xC6,0x20,0x42,0x00,0x10,0x0F,0xF8,0x00,0x20,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA7,0xB8,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x80,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x00,0x20,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA7,0xB9,0x00,0x00,0x01,0x80,0x21,0x02,0x3F,0xFF,0x20,0x02,0x40,0x24,0x1F,0xF0,0x00,0x00,0x00,0x04,0x7F,0xFE,0x04,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x08,0x43,0x30,0x3E},
{0xA7,0xBA,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0xC4,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xA7,0xBB,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x43,0x04,0x02,0x00,0x7F,0xFF,0x04,0x00,0x04,0xC0,0x08,0x80,0x09,0x10,0x11,0x08,0x22,0x74,0x47,0x86,0x02,0x02},
{0xA7,0xBC,0x00,0x00,0x18,0x30,0x10,0x28,0x14,0x48,0x7E,0x44,0x10,0x84,0x15,0x03,0x14,0x6C,0x14,0x48,0x14,0x48,0x14,0x48,0x14,0x88,0x24,0x8A,0x25,0x0A,0x24,0x03,0x43,0xFE},
{0xA7,0xBD,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x20,0x02,0x3F,0xFF,0x20,0x02,0x2F,0xC2,0x28,0x42,0x28,0x42,0x4F,0xC2,0x40,0x1C,0x40,0x08},
{0xA7,0xBE,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x26,0x30,0x24,0x20,0x25,0x24,0x27,0xBE,0x24,0x20,0x24,0x22,0x45,0xA2,0x5E,0x23,0x48,0x1E},
{0xA7,0xBF,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x60,0x22,0x40,0x2F,0x46,0x22,0x68,0x22,0x50,0x24,0x48,0x44,0x47,0x49,0xC2,0x40,0x80},
{0xA7,0xC0,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x20,0x60,0x20,0xF0,0x27,0x80,0x20,0xF8,0x2F,0x80,0x20,0xFD,0x5F,0x81,0x40,0x81,0x40,0x7F},
{0xA7,0xC1,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x55,0xFF,0x54,0x20,0x54,0x24,0x55,0xFE,0x54,0x84,0x54,0x44,0x54,0x48,0x54,0x30,0x7C,0x10,0x44,0x28,0x00,0x47,0x01,0x82},
{0xA7,0xC2,0x00,0x00,0x00,0xC0,0x30,0x86,0x20,0x84,0x3F,0xFC,0x21,0x84,0x02,0x40,0x04,0x30,0x1B,0xCC,0x60,0x03,0x0F,0xF8,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x80},
{0xA7,0xC3,0x00,0x00,0x06,0xE0,0x04,0x20,0x08,0x10,0x10,0x0C,0x6F,0xF3,0x02,0x10,0x02,0x10,0x04,0x70,0x38,0x20,0x00,0xC0,0x18,0x86,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xA7,0xC4,0x00,0x00,0x31,0x8C,0x21,0x08,0x3F,0xF8,0x20,0x08,0x00,0x40,0x7F,0xE0,0x08,0x40,0x08,0x90,0x0F,0xF8,0x0A,0x10,0x11,0x20,0x10,0xC0,0x20,0xB0,0x43,0x0F,0x0C,0x02},
{0xA7,0xC5,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x80,0x0C,0x8C,0x08,0x88,0x08,0x88,0x18,0x98,0x14,0x94,0x24,0xA4,0x22,0xA2,0x42,0xC2,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00},
{0xA7,0xC6,0x00,0x00,0x1E,0x78,0x01,0x80,0x06,0x60,0x39,0x98,0x01,0x02,0x7F,0xFF,0x02,0x00,0x04,0xC0,0x08,0x84,0x1F,0xFE,0x68,0x84,0x08,0x84,0x08,0x9C,0x08,0x88,0x00,0x80},
{0xA7,0xC7,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x00,0x27,0xF8,0x20,0x10,0x21,0xA0,0x20,0x42,0x3F,0xFF,0x20,0x42,0x20,0x44,0x20,0x40,0x42,0x40,0x41,0xC0,0x40,0x80},
{0xA7,0xC8,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x26,0x30,0x24,0x20,0x24,0x20,0x25,0x24,0x27,0xBE,0x24,0x20,0x24,0x20,0x24,0xA2,0x47,0x22,0x5C,0x23,0x48,0x1E},
{0xA7,0xC9,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0x60,0x20,0x44,0x2F,0xFE,0x20,0xC0,0x21,0x60,0x21,0x50,0x22,0x50,0x22,0x48,0x44,0x46,0x48,0x40,0x40,0x40},
{0xA7,0xCA,0x00,0x00,0x04,0x0C,0x7E,0x1E,0x04,0xF0,0x08,0x10,0x10,0x10,0x24,0x12,0x7E,0xFF,0x24,0x10,0x04,0x10,0x34,0x14,0x28,0xFE,0x48,0x00,0x54,0x00,0x13,0x03,0x20,0xFC},
{0xA7,0xCB,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x80,0x00,0x90,0x0F,0xF8,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x08,0x10,0x08,0x10,0x10,0x10},
{0xA7,0xCC,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x24,0x7F,0xFE,0x00,0x84,0x10,0x84,0x1F,0xFC,0x10,0x80,0x10,0x82,0x3F,0xFF,0x21,0x82,0x02,0x82,0x0C,0xBC,0x70,0x88,0x00,0x80},
{0xA7,0xCD,0x00,0x00,0x10,0x83,0x1F,0xC2,0x10,0x84,0x14,0x88,0x12,0xB0,0x12,0x83,0x10,0xE2,0x17,0x84,0x78,0x88,0x50,0xB3,0x10,0x82,0x10,0x84,0x20,0x88,0x23,0xB0,0x41,0x00},
{0xA7,0xCE,0x00,0x00,0x01,0x06,0x7F,0x84,0x12,0x08,0x12,0x10,0x12,0x60,0x12,0x06,0x12,0x84,0x7F,0xC8,0x12,0x10,0x12,0x63,0x12,0x02,0x22,0x04,0x22,0x08,0x22,0x10,0x42,0x60},
{0xA7,0xCF,0x00,0x00,0x0C,0x30,0x08,0x20,0x10,0x22,0x23,0xFF,0x4C,0x80,0x08,0x84,0x10,0xFE,0x30,0x84,0x50,0x84,0x10,0x84,0x11,0x04,0x11,0x04,0x11,0x04,0x12,0x78,0x14,0x10},
{0xA7,0xD0,0x00,0x00,0x0D,0x10,0x09,0xF8,0x11,0x10,0x21,0x12,0x4D,0x13,0x09,0x0E,0x12,0x00,0x30,0x04,0x57,0xFE,0x11,0x04,0x10,0x88,0x10,0x50,0x10,0x60,0x10,0x98,0x17,0x07},
{0xA7,0xD1,0x00,0x00,0x00,0xC0,0x20,0x84,0x3F,0xFE,0x20,0x00,0x20,0x00,0x20,0x00,0x1F,0xFC,0x00,0x00,0x00,0x80,0x06,0xC0,0x24,0x44,0x24,0x52,0x44,0x13,0x44,0x19,0x03,0xF0},
{0xA7,0xD2,0x00,0x00,0x00,0x08,0x3F,0xFC,0x00,0x08,0x10,0x08,0x1F,0xFA,0x10,0x0A,0x10,0x03,0x0F,0xFE,0x00,0x00,0x06,0x80,0x24,0x40,0x24,0x52,0x44,0x11,0x44,0x19,0x03,0xF0},
{0xA7,0xD3,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x00,0x00,0x80,0x06,0xC0,0x24,0x44,0x24,0x12,0x44,0x13,0x44,0x19,0x03,0xF0},
{0xA7,0xD4,0x00,0x00,0x00,0x04,0x3F,0xFE,0x01,0x04,0x31,0x04,0x0D,0x04,0x02,0x04,0x0C,0x78,0x70,0x10,0x00,0x00,0x06,0x80,0x24,0xC4,0x24,0x52,0x44,0x13,0x44,0x19,0x03,0xF0},
{0xA7,0xD5,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0xA2,0x18,0xFF,0x54,0xA2,0x55,0x24,0x50,0x20,0x10,0x20,0x10,0x58,0x10,0x50,0x10,0x50,0x10,0x92,0x10,0x92,0x11,0x13,0x12,0x0E},
{0xA7,0xD6,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x44,0x13,0xFE,0x58,0x44,0x54,0x44,0x54,0x44,0x10,0x44,0x17,0xFF,0x10,0x60,0x10,0x50,0x10,0x90,0x10,0x88,0x11,0x04,0x16,0x03},
{0xA7,0xD7,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x44,0x18,0x44,0x54,0x44,0x54,0x44,0x50,0x84,0x13,0xFF,0x10,0x88,0x10,0x88,0x10,0x88,0x11,0x08,0x11,0x0A,0x17,0xFF,0x10,0x00},
{0xA7,0xD8,0x00,0x00,0x18,0x10,0x10,0x78,0x10,0x10,0x19,0x88,0x55,0x08,0x55,0x08,0x51,0x64,0x12,0x44,0x12,0x42,0x14,0x41,0x10,0x90,0x10,0x88,0x10,0xB4,0x13,0xC6,0x11,0x02},
{0xA7,0xD9,0x00,0x00,0x00,0x68,0x00,0x46,0x00,0x40,0x7F,0xFF,0x00,0x20,0x1B,0x20,0x12,0x26,0x12,0x24,0x7F,0x94,0x12,0x14,0x12,0x08,0x22,0x09,0x22,0x15,0x42,0x25,0x00,0xC3},
{0xA7,0xDA,0x00,0x00,0x00,0x30,0x07,0x24,0x3C,0x23,0x04,0x21,0x04,0x20,0x7F,0xFF,0x04,0x20,0x04,0x26,0x05,0xA4,0x0E,0x14,0x74,0x18,0x24,0x11,0x04,0x29,0x3C,0x25,0x08,0xC3},
{0xA7,0xDB,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x10,0x7C,0xD4,0x10,0x92,0x10,0x93,0x15,0x11,0x19,0x10,0x72,0x73,0x50,0x22,0x10,0x04,0x10,0x08,0x10,0x30,0x70,0xC0,0x23,0x00},
{0xA7,0xDC,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x00,0x10,0x00,0x10,0x88,0x14,0xFC,0x18,0x88,0x70,0x88,0x50,0x88,0x10,0x88,0x10,0x89,0x11,0x09,0x71,0x09,0x22,0x07},
{0xA7,0xDD,0x00,0x00,0x18,0x0C,0x11,0x08,0x10,0xC8,0x7C,0x48,0x10,0x08,0x11,0x08,0x14,0xC8,0x18,0x4A,0x70,0x0F,0x50,0x78,0x13,0x88,0x10,0x08,0x10,0x08,0x70,0x08,0x20,0x08},
{0xA7,0xDE,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x7D,0xFF,0x10,0x20,0x10,0x24,0x15,0xFE,0x18,0x84,0x70,0x44,0x50,0x48,0x10,0x30,0x10,0x10,0x10,0x28,0x70,0x44,0x21,0x83},
{0xA7,0xDF,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x24,0x7D,0xFE,0x10,0x20,0x10,0x20,0x14,0x22,0x1B,0xFF,0x70,0x20,0x50,0x50,0x10,0x50,0x10,0x88,0x10,0x88,0x71,0x04,0x22,0x03},
{0xA7,0xE0,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x24,0x7D,0xFE,0x10,0x24,0x10,0x24,0x14,0x24,0x18,0x24,0x73,0xFF,0x50,0x50,0x10,0x50,0x10,0x88,0x10,0x88,0x71,0x04,0x26,0x03},
{0xA7,0xE1,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x44,0x7C,0x44,0x10,0x44,0x10,0x44,0x14,0x84,0x1B,0xFF,0x70,0x88,0x50,0x88,0x10,0x88,0x11,0x08,0x11,0x0A,0x77,0xFF,0x20,0x00},
{0xA7,0xE2,0x00,0x00,0x18,0x00,0x11,0x04,0x11,0xFE,0x7D,0x24,0x11,0x24,0x11,0x24,0x15,0x24,0x19,0x24,0x71,0xFC,0x51,0x04,0x11,0x00,0x11,0x02,0x11,0x02,0x71,0x03,0x20,0xFE},
{0xA7,0xE3,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x00,0x7D,0x00,0x11,0x24,0x11,0x3E,0x15,0x24,0x19,0x24,0x71,0x24,0x51,0x3C,0x11,0x28,0x11,0x22,0x12,0x22,0x72,0x23,0x24,0x1E},
{0xA7,0xE4,0x00,0x00,0x18,0x68,0x10,0x46,0x14,0x40,0x7E,0x4E,0x10,0x70,0x13,0xC0,0x10,0x46,0x14,0x44,0x18,0x28,0x70,0x28,0x50,0x10,0x10,0x29,0x10,0xC5,0x73,0x03,0x20,0x01},
{0xA7,0xE5,0x00,0x00,0x19,0x8C,0x11,0x08,0x11,0x08,0x7D,0x08,0x11,0x08,0x11,0x4A,0x15,0xEF,0x19,0x08,0x71,0x08,0x51,0x08,0x11,0x08,0x11,0x29,0x11,0x49,0x73,0x89,0x21,0x07},
{0xA7,0xE6,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x00,0x7D,0x00,0x11,0x04,0x11,0xFE,0x15,0x44,0x19,0x44,0x71,0x28,0x51,0x28,0x11,0x10,0x12,0x28,0x12,0x24,0x72,0x44,0x24,0x83},
{0xA7,0xE7,0x00,0x00,0x18,0x04,0x11,0xFE,0x14,0x04,0x7E,0x68,0x10,0x10,0x10,0x02,0x15,0xFF,0x18,0x12,0x70,0x14,0x50,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0x70,0x70,0x20,0x20},
{0xA7,0xE8,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x20,0x7C,0x20,0x11,0xA0,0x11,0x24,0x15,0x3E,0x19,0x20,0x71,0x20,0x51,0x20,0x11,0x20,0x11,0x20,0x11,0x22,0x77,0xFF,0x20,0x00},
{0xA7,0xE9,0x00,0x00,0x0C,0x04,0x08,0x8E,0x08,0xF0,0x7E,0x80,0x08,0x80,0x08,0x82,0x0A,0xFF,0x0C,0x88,0x78,0x88,0x28,0x88,0x08,0x88,0x09,0x08,0x09,0x08,0x39,0x08,0x12,0x08},
{0xA7,0xEA,0x00,0x00,0x18,0x08,0x10,0x3C,0x10,0x08,0x7C,0xC8,0x10,0x84,0x11,0x04,0x15,0x02,0x1A,0xFD,0x70,0x44,0x50,0x44,0x10,0x44,0x10,0x84,0x10,0x84,0x71,0x38,0x22,0x10},
{0xA7,0xEB,0x00,0x00,0x18,0x90,0x10,0xF8,0x14,0x90,0x7E,0x92,0x10,0x93,0x10,0x8E,0x15,0x00,0x18,0x04,0x71,0xFE,0x50,0x84,0x10,0x48,0x10,0x30,0x10,0x50,0x70,0x8C,0x23,0x03},
{0xA7,0xEC,0x00,0x00,0x18,0x0C,0x11,0x3E,0x11,0xE4,0x7D,0x24,0x11,0x24,0x11,0x24,0x15,0x24,0x19,0x24,0x71,0x24,0x51,0x24,0x11,0x24,0x12,0x22,0x12,0x22,0x72,0x21,0x24,0x21},
{0xA7,0xED,0x00,0x00,0x19,0x60,0x11,0x92,0x11,0x1F,0x7D,0x12,0x11,0x12,0x11,0x12,0x15,0x12,0x19,0x12,0x71,0x12,0x51,0x52,0x11,0x92,0x13,0x1E,0x11,0x14,0x70,0x10,0x20,0x10},
{0xA7,0xEE,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x7D,0xFF,0x10,0x84,0x10,0x84,0x14,0x4C,0x18,0x48,0x70,0x28,0x50,0x10,0x10,0x28,0x10,0x28,0x10,0x44,0x70,0x84,0x21,0x03},
{0xA7,0xEF,0x00,0x00,0x02,0x60,0x7F,0x40,0x02,0x42,0x02,0x7F,0x42,0x44,0x7E,0x44,0x42,0xC4,0x40,0xA4,0x41,0x28,0x40,0x28,0x42,0x10,0x43,0x28,0x3E,0x28,0x00,0xC4,0x03,0x03},
{0xA7,0xF0,0x00,0x00,0x00,0xC0,0x04,0x80,0x7E,0x82,0x10,0xFF,0x10,0x84,0x11,0x84,0x11,0x44,0x12,0x48,0x10,0x28,0x12,0x30,0x1C,0x10,0x70,0x28,0x20,0x48,0x00,0x84,0x03,0x03},
{0xA7,0xF1,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x10,0x7F,0x16,0x84,0x34,0x84,0x54,0x84,0x15,0x44,0x14,0x28,0x14,0x28,0x14,0x10,0x14,0x28,0x14,0x28,0x10,0x44,0x11,0x83},
{0xA7,0xF2,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x00,0x3F,0xFE,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA7,0xF3,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x80,0x1F,0xF8,0x10,0x88,0x1F,0xF8,0x10,0x88,0x1F,0xF8,0x10,0x88,0x00,0x80,0x19,0x00,0x17,0x00,0x22,0xC0,0x0C,0x38,0x70,0x07},
{0xA7,0xF4,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x11,0x84,0x02,0xC0,0x04,0xB0,0x18,0x8C,0x60,0x83,0x00,0x80},
{0xA7,0xF5,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x07,0x07,0xF0,0x00,0x20,0x00,0x42,0x7F,0xFF,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA7,0xF6,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x0C,0x98,0x70,0x87,0x00,0x80,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA7,0xF7,0x00,0x00,0x0C,0x0C,0x08,0x08,0x08,0x0A,0x7E,0xFF,0x08,0x18,0x18,0x18,0x18,0x28,0x2C,0x28,0x2A,0x48,0x4A,0x48,0x08,0x88,0x09,0x08,0x08,0x08,0x08,0x38,0x08,0x10},
{0xA7,0xF8,0x00,0x00,0x0C,0x06,0x08,0x04,0x08,0x04,0x7E,0xFF,0x08,0x04,0x18,0x04,0x18,0x84,0x2C,0x44,0x2A,0x64,0x4A,0x24,0x08,0x04,0x08,0x04,0x08,0x24,0x08,0x1C,0x08,0x08},
{0xA7,0xF9,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x10,0x7E,0x10,0x08,0x14,0x18,0xFE,0x18,0x10,0x2C,0x10,0x2B,0x10,0x49,0x10,0x08,0x10,0x08,0x10,0x08,0x12,0x09,0xFF,0x08,0x00},
{0xA7,0xFA,0x00,0x00,0x0C,0x06,0x08,0x04,0x08,0x04,0x7E,0xFF,0x08,0x04,0x18,0x04,0x1C,0xC4,0x2A,0xA8,0x29,0x28,0x48,0x10,0x08,0x10,0x08,0x28,0x08,0x28,0x08,0x44,0x09,0x83},
{0xA7,0xFB,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x04,0x7E,0x04,0x08,0x04,0x18,0x04,0x18,0x84,0x2C,0xFC,0x2A,0x84,0x4A,0x80,0x48,0x80,0x08,0x82,0x08,0x82,0x08,0x83,0x08,0x7E},
{0xA7,0xFC,0x00,0x00,0x0C,0x06,0x08,0x04,0x0A,0x08,0x7F,0x10,0x08,0x60,0x18,0x06,0x18,0x04,0x2C,0x08,0x2B,0x10,0x49,0x63,0x08,0x02,0x08,0x04,0x08,0x08,0x08,0x10,0x08,0x60},
{0xA7,0xFD,0x00,0x00,0x0C,0x04,0x08,0xFE,0x08,0x10,0x7E,0x10,0x08,0x10,0x18,0x10,0x18,0x12,0x2C,0xFF,0x2A,0x10,0x4A,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xA7,0xFE,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x20,0x7E,0x20,0x08,0x20,0x18,0x20,0x18,0x20,0x2C,0x20,0x2A,0x20,0x4A,0x20,0x08,0x20,0x08,0x20,0x08,0x22,0x09,0xFF,0x08,0x00},
{0xA8,0x40,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x7E,0xFF,0x08,0x82,0x19,0x02,0x18,0x02,0x2C,0x12,0x2A,0xFA,0x4A,0x02,0x08,0x04,0x08,0x04,0x08,0x44,0x08,0x38,0x08,0x10},
{0xA8,0x41,0x00,0x00,0x00,0xC0,0x20,0x84,0x3F,0xFE,0x20,0x00,0x20,0x00,0x1F,0xFC,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xA8,0x42,0x00,0x00,0x00,0xC0,0x18,0x88,0x10,0xFC,0x10,0x80,0x10,0x82,0x7F,0xFF,0x00,0x80,0x0C,0x80,0x08,0x8C,0x13,0x88,0x61,0x10,0x00,0x60,0x01,0x80,0x0E,0x00,0x70,0x00},
{0xA8,0x43,0x00,0x00,0x0C,0x00,0x08,0x04,0x1F,0xFE,0x20,0x00,0x4F,0xF8,0x09,0x08,0x08,0x8A,0x7F,0xFF,0x08,0x08,0x11,0x08,0x10,0x88,0x3F,0xFE,0x20,0x10,0x00,0xF0,0x00,0x20},
{0xA8,0x44,0x00,0x00,0x00,0xC8,0x00,0x86,0x00,0x80,0x7F,0xFF,0x00,0x80,0x20,0x80,0x18,0xC6,0x08,0xA4,0x01,0xA8,0x06,0x90,0x18,0x88,0x70,0x87,0x20,0x82,0x07,0x80,0x01,0x00},
{0xA8,0x45,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00,0x00,0xC0,0x04,0x8C,0x3E,0x88,0x04,0xD0,0x08,0xA0,0x10,0x98,0x60,0x87,0x03,0x82,0x01,0x00},
{0xA8,0x46,0x00,0x00,0x20,0x18,0x10,0x10,0x10,0x10,0x44,0xD4,0x24,0x92,0x28,0x93,0x09,0x11,0x12,0x10,0x60,0x76,0x20,0x24,0x20,0x08,0x60,0x10,0x60,0x60,0x21,0x80,0x0E,0x00},
{0xA8,0x47,0x00,0x00,0x20,0x40,0x10,0x20,0x10,0x30,0x45,0x90,0x25,0x00,0x29,0x00,0x09,0x04,0x11,0x02,0x15,0x02,0x65,0x0B,0x25,0x09,0x29,0x08,0x69,0x0C,0x60,0xF8,0x20,0x00},
{0xA8,0x48,0x00,0x00,0x20,0x30,0x10,0x20,0x11,0x22,0x45,0xFF,0x25,0x22,0x2A,0x24,0x08,0x20,0x10,0x38,0x10,0x50,0x60,0x50,0x20,0x50,0x20,0x92,0x60,0x92,0x61,0x13,0x26,0x0E},
{0xA8,0x49,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x02,0x44,0x04,0x20,0x00,0x29,0x10,0x09,0xF8,0x11,0x10,0x11,0x10,0x61,0x10,0x21,0x10,0x21,0x12,0x62,0x12,0x62,0x13,0x24,0x0E},
{0xA8,0x4A,0x00,0x00,0x20,0x08,0x11,0xFC,0x10,0x00,0x44,0x00,0x24,0x00,0x28,0x02,0x0B,0xFF,0x10,0x90,0x10,0x90,0x60,0x90,0x20,0x90,0x21,0x12,0x41,0x12,0x62,0x13,0x24,0x0E},
{0xA8,0x4B,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x20,0x22,0x22,0x2B,0xFF,0x0A,0x22,0x12,0x22,0x12,0x22,0x62,0x22,0x22,0x22,0x22,0x2E,0x62,0x24,0x20,0x20,0x00,0x20},
{0xA8,0x4C,0x00,0x00,0x20,0x02,0x13,0xFF,0x10,0x20,0x44,0x20,0x24,0x20,0x28,0x20,0x08,0x24,0x11,0xFE,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x20,0x60,0x22,0x67,0xFF,0x20,0x00},
{0xA8,0x4D,0x00,0x00,0x20,0x60,0x10,0x40,0x10,0x48,0x43,0xFC,0x28,0x48,0x28,0x48,0x08,0x48,0x10,0x4A,0x17,0xFF,0x60,0x40,0x20,0xA0,0x20,0x90,0x61,0x08,0x22,0x04,0x0C,0x03},
{0xA8,0x4E,0x00,0x00,0x20,0x30,0x10,0x20,0x14,0x20,0x44,0x22,0x2B,0xFF,0x28,0x60,0x08,0x70,0x10,0xA8,0x10,0xA8,0x61,0x24,0x21,0x24,0x22,0x22,0x64,0x21,0x60,0x20,0x20,0x20},
{0xA8,0x4F,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x20,0x44,0x22,0x27,0xFF,0x28,0x20,0x08,0x50,0x10,0x50,0x10,0x48,0x60,0x88,0x20,0x84,0x21,0x44,0x61,0x34,0x62,0x12,0x24,0x01},
{0xA8,0x50,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x26,0x44,0x78,0x2B,0xA0,0x28,0x20,0x0B,0x26,0x12,0x24,0x12,0x24,0x62,0x24,0x23,0xFC,0x22,0x25,0x60,0x21,0x60,0x21,0x20,0x1F},
{0xA8,0x51,0x00,0x00,0x21,0x02,0x11,0xFF,0x11,0x02,0x03,0x02,0x45,0x02,0x25,0x02,0x29,0x02,0x09,0xFE,0x11,0x02,0x71,0x02,0x11,0x02,0x11,0x02,0x31,0x02,0x31,0xFE,0x11,0x02},
{0xA8,0x52,0x00,0x00,0x20,0x30,0x10,0x20,0x14,0x20,0x44,0x22,0x2B,0xFF,0x2A,0x22,0x0A,0x22,0x12,0x22,0x12,0x22,0x63,0xFE,0x22,0x22,0x20,0x20,0x60,0x20,0x60,0x20,0x20,0x20},
{0xA8,0x53,0x00,0x00,0x20,0xC0,0x10,0x84,0x10,0xFE,0x44,0x84,0x25,0x04,0x29,0x38,0x0A,0x10,0x10,0x04,0x13,0xFE,0x61,0x04,0x20,0x98,0x20,0x60,0x60,0x50,0x61,0x8F,0x26,0x02},
{0xA8,0x54,0x00,0x00,0x23,0x00,0x12,0x00,0x13,0xFE,0x44,0x00,0x29,0xFC,0x20,0x00,0x0B,0xF8,0x10,0x08,0x10,0x08,0x60,0x08,0x20,0x09,0x20,0x09,0x60,0x05,0x60,0x03,0x20,0x01},
{0xA8,0x55,0x00,0x00,0x10,0x0C,0x08,0x3E,0x09,0xE0,0x40,0x20,0x24,0x20,0x28,0x20,0x08,0x22,0x13,0xFF,0x10,0x20,0x60,0x50,0x20,0x50,0x20,0x88,0x60,0x88,0x61,0x04,0x26,0x03},
{0xA8,0x56,0x00,0x00,0x20,0x08,0x17,0xFC,0x11,0x08,0x41,0x08,0x25,0x10,0x29,0x12,0x09,0xFF,0x11,0x42,0x11,0x24,0x62,0x24,0x22,0x18,0x22,0x28,0x64,0x24,0x24,0x44,0x09,0x83},
{0xA8,0x57,0x00,0x00,0x20,0x08,0x10,0x7C,0x10,0x08,0x45,0x88,0x25,0x04,0x29,0x04,0x0A,0x02,0x13,0xFD,0x14,0x84,0x60,0x84,0x20,0x84,0x21,0x04,0x61,0x04,0x22,0x38,0x04,0x10},
{0xA8,0x58,0x00,0x00,0x20,0x80,0x10,0x60,0x10,0x30,0x40,0x10,0x24,0x02,0x2B,0xFF,0x08,0x20,0x10,0x30,0x10,0x28,0x60,0x24,0x20,0x26,0x20,0x22,0x60,0x20,0x60,0x20,0x20,0x20},
{0xA8,0x59,0x00,0x00,0x20,0x60,0x10,0x42,0x17,0xFF,0x40,0x00,0x24,0x00,0x29,0x10,0x09,0xF8,0x11,0x10,0x11,0x10,0x61,0x10,0x21,0x12,0x21,0x12,0x62,0x12,0x22,0x13,0x0C,0x0E},
{0xA8,0x5A,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x22,0x47,0xFF,0x20,0x04,0x29,0x84,0x0A,0x88,0x12,0x48,0x10,0x50,0x10,0x20,0x60,0x50,0x20,0x50,0x20,0x88,0x61,0x04,0x22,0x03},
{0xA8,0x5B,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x80,0x40,0x80,0x24,0x84,0x29,0xFE,0x09,0x04,0x11,0x04,0x12,0x04,0x62,0x08,0x23,0xF8,0x22,0x08,0x60,0x08,0x60,0x0A,0x2F,0xFF},
{0xA8,0x5C,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x20,0x40,0x20,0x23,0x22,0x2A,0x3F,0x0A,0x22,0x12,0x22,0x13,0xFE,0x62,0x02,0x20,0x02,0x20,0x04,0x60,0x44,0x60,0x38,0x20,0x10},
{0xA8,0x5D,0x00,0x00,0x23,0x18,0x12,0x10,0x12,0x10,0x42,0x10,0x26,0x10,0x2A,0x94,0x0B,0xDE,0x12,0x10,0x12,0x10,0x62,0x10,0x22,0x10,0x22,0x51,0x63,0x91,0x2E,0x11,0x04,0x0F},
{0xA8,0x5E,0x00,0x00,0x20,0x0C,0x11,0x1E,0x11,0xE0,0x41,0x00,0x25,0x00,0x29,0x02,0x09,0xFF,0x11,0x08,0x11,0x08,0x61,0x08,0x22,0x08,0x22,0x08,0x62,0x08,0x64,0x08,0x28,0x08},
{0xA8,0x5F,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x20,0x16,0x20,0x54,0x24,0x59,0xFE,0x50,0x20,0x50,0x20,0x18,0x20,0x14,0x20,0x16,0x20,0x22,0x20,0x20,0x22,0x23,0xFF,0x40,0x00},
{0xA8,0x60,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x42,0x16,0xFF,0x54,0x82,0x59,0x02,0x52,0x02,0x50,0x12,0x18,0xFA,0x14,0x02,0x16,0x02,0x22,0x04,0x20,0x44,0x20,0x38,0x40,0x10},
{0xA8,0x61,0x00,0x00,0x18,0xCC,0x11,0x08,0x66,0x30,0x11,0x08,0x08,0x84,0x00,0x00,0x01,0x80,0x09,0x0C,0x09,0x10,0x11,0x60,0x62,0x80,0x02,0x40,0x04,0x30,0x18,0x0F,0x60,0x02},
{0xA8,0x62,0x00,0x00,0x04,0x20,0x07,0xF0,0x08,0x40,0x30,0x80,0x01,0x40,0x06,0x30,0x18,0x0F,0x61,0x82,0x09,0x18,0x09,0x60,0x31,0x00,0x02,0xC0,0x04,0x30,0x18,0x0F,0x60,0x02},
{0xA8,0x63,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0xC4,0x0C,0x80,0x08,0x88,0x1F,0xFC,0x20,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA8,0x64,0x00,0x00,0x06,0x18,0x34,0x10,0x24,0x10,0x3F,0x10,0x24,0x14,0x44,0xFE,0x44,0x10,0x05,0x10,0x0E,0x10,0x74,0x10,0x24,0x10,0x04,0x10,0x04,0x12,0x05,0xFF,0x04,0x00},
{0xA8,0x65,0x00,0x00,0x0C,0x18,0x28,0xD0,0x28,0x90,0x3E,0x92,0x48,0x97,0x48,0xBA,0x09,0xD2,0x08,0x92,0x0E,0x96,0x78,0x92,0x28,0x90,0x08,0x81,0x08,0x81,0x08,0x81,0x08,0x7F},
{0xA8,0x66,0x00,0x00,0x46,0x30,0x24,0x20,0x18,0x20,0x10,0xA3,0x28,0xA2,0x49,0x24,0x0D,0x28,0x14,0x20,0x14,0x20,0x24,0x50,0x44,0x50,0x04,0x88,0x44,0x88,0x39,0x04,0x12,0x03},
{0xA8,0x67,0x00,0x00,0x4C,0x04,0x29,0xFE,0x10,0x20,0x10,0x20,0x28,0x20,0x48,0x20,0x0C,0x24,0x15,0xFE,0x14,0x20,0x24,0x20,0x44,0x20,0x04,0x20,0x44,0x22,0x3B,0xFF,0x10,0x00},
{0xA8,0x68,0x00,0x00,0x08,0x60,0x7C,0x40,0x10,0x44,0x10,0x7E,0x10,0x84,0x7C,0x88,0x11,0x08,0x12,0x10,0x10,0x10,0x1C,0x30,0x70,0x28,0x20,0x48,0x00,0x84,0x01,0x04,0x06,0x03},
{0xA8,0x69,0x00,0x00,0x00,0x10,0x7F,0xF8,0x00,0x20,0x06,0x40,0x21,0x84,0x3F,0xFE,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x21,0x1C,0x21,0x08},
{0xA8,0x6A,0x00,0x00,0x01,0xB0,0x01,0x0A,0x7F,0xFF,0x01,0x00,0x21,0x04,0x3F,0xFE,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x21,0x1C,0x21,0x08},
{0xA8,0x6B,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x04,0x01,0x80,0x01,0x02,0x7F,0xFF,0x02,0x02,0x02,0x02,0x04,0x22,0x18,0x1C,0x60,0x08},
{0xA8,0x6C,0x00,0x00,0x0C,0x00,0x08,0x04,0x1F,0xFE,0x10,0x04,0x20,0x04,0x5F,0xC4,0x12,0x44,0x12,0x44,0x1F,0xC4,0x12,0x44,0x12,0x48,0x1F,0xC8,0x00,0x08,0x00,0x78,0x00,0x10},
{0xA8,0x6D,0x00,0x00,0x00,0xC0,0x11,0x04,0x1F,0xFE,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x06,0x00,0x04,0x08,0x3F,0xFC,0x04,0x00,0x04,0x02,0x04,0x03,0x03,0xFE},
{0xA8,0x6E,0x00,0x00,0x48,0x02,0x7B,0xFF,0x48,0x20,0x48,0x20,0x78,0x20,0x48,0x20,0x48,0x20,0x78,0x20,0x48,0x20,0x48,0x20,0x48,0x20,0x78,0x20,0x49,0x20,0x40,0xE0,0x00,0x40},
{0xA8,0x6F,0x00,0x00,0x03,0x00,0x02,0x20,0x04,0x18,0x3F,0xEC,0x10,0x04,0x08,0x10,0x0F,0xF8,0x30,0x80,0x00,0x82,0x7F,0xFF,0x01,0x40,0x01,0x20,0x02,0x10,0x0C,0x0C,0x30,0x03},
{0xA8,0x70,0x00,0x00,0x0F,0x00,0x78,0x30,0x08,0x20,0x0A,0x20,0x7F,0x20,0x18,0x20,0x18,0x40,0x2C,0x40,0x2A,0x48,0x4A,0x44,0x08,0x84,0x08,0x9A,0x0B,0xE3,0x09,0x01,0x08,0x00},
{0xA8,0x71,0x00,0x00,0x00,0xFC,0x1F,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xF0,0x18,0x8F,0x60,0x22,0x0F,0xF0,0x02,0x24,0x02,0x7E,0x04,0x44,0x04,0x04,0x08,0x78,0x30,0x10},
{0xA8,0x72,0x00,0x00,0x00,0xFC,0x1F,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xF0,0x18,0x8F,0x60,0x02,0x06,0x60,0x04,0x40,0x04,0x40,0x04,0x42,0x08,0x42,0x08,0x43,0x70,0x3E},
{0xA8,0x73,0x00,0x00,0x01,0x80,0x21,0x04,0x3F,0xFE,0x20,0x04,0x4C,0x69,0x08,0x41,0x10,0x3F,0x63,0x00,0x02,0x20,0x3F,0xF0,0x04,0x20,0x04,0x22,0x08,0x22,0x10,0x23,0x60,0x1E},
{0xA8,0x74,0x00,0x00,0x00,0xFC,0x3F,0x80,0x01,0x00,0x02,0x30,0x0E,0x40,0x01,0x80,0x01,0x20,0x02,0x18,0x1F,0xEC,0x08,0x84,0x00,0x80,0x0C,0x90,0x08,0x8C,0x10,0x86,0x20,0x82},
{0xA8,0x75,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x46,0x68,0x08,0x41,0x70,0x3F,0x00,0x00,0x1F,0xF8,0x01,0x00,0x01,0x04,0x7F,0xFE,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00},
{0xA8,0x76,0x00,0x00,0x00,0xC0,0x0C,0x90,0x18,0x8C,0x10,0x87,0x3F,0xFD,0x50,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04,0x10,0x04,0x10,0x3C,0x10,0x08},
{0xA8,0x77,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0x00,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xA8,0x78,0x00,0x00,0x24,0x04,0x3E,0xFE,0x24,0x10,0x24,0x10,0x3C,0x10,0x24,0x10,0x24,0x12,0x25,0xFF,0x3C,0x10,0x24,0x10,0x24,0x10,0x24,0x10,0x44,0x10,0x5C,0x10,0x48,0x10},
{0xA8,0x79,0x00,0x00,0x24,0x06,0x3E,0x04,0x24,0x04,0x24,0x04,0x3D,0xFF,0x24,0x04,0x24,0x84,0x24,0x44,0x3C,0x64,0x24,0x24,0x24,0x04,0x24,0x04,0x44,0x24,0x5C,0x1C,0x48,0x08},
{0xA8,0x7A,0x00,0x00,0x24,0x00,0x3C,0x04,0x25,0xFE,0x24,0x20,0x3C,0x20,0x24,0x20,0x24,0x20,0x24,0x20,0x3C,0x20,0x24,0x20,0x24,0x20,0x24,0x20,0x44,0x22,0x5D,0xFF,0x48,0x00},
{0xA8,0x7B,0x00,0x00,0x24,0x30,0x3E,0x20,0x24,0x20,0x24,0x20,0x3C,0x20,0x24,0x24,0x25,0xFE,0x24,0x20,0x3C,0x20,0x24,0x20,0x24,0x20,0x24,0x20,0x44,0x22,0x5D,0xFF,0x48,0x00},
{0xA8,0x7C,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x02,0x10,0x04,0x0C,0x3F,0xF6,0x00,0x02,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xA8,0x7D,0x00,0x00,0x01,0x80,0x11,0x10,0x1F,0xF8,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10,0x10,0x10,0x1F,0xF0,0x11,0x06,0x10,0x98,0x10,0x60,0x17,0x18,0x78,0x07,0x20,0x02},
{0xA8,0x7E,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x20,0x84,0x3F,0xFE,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x1F,0xFC,0x00,0x00},
{0xA8,0xA1,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x08,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xA8,0xA2,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x04,0x1F,0xFE,0x10,0x04,0x20,0x04,0x40,0x44,0x0F,0xE4,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0xF0,0x00,0x20},
{0xA8,0xA3,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x12,0x48,0x02,0x42,0x04,0x42,0x18,0x43,0x60,0x3E},
{0xA8,0xA4,0x00,0x00,0x02,0x00,0x07,0xF0,0x04,0x20,0x08,0x44,0x1F,0xFE,0x70,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04,0x20,0x04,0x20,0x3C,0x40,0x08},
{0xA8,0xA5,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x02,0x7F,0xFF,0x00,0x00,0x1F,0xF8,0x00,0x00,0x1F,0xF8,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA8,0xA6,0x00,0x00,0x06,0x20,0x0C,0x18,0x08,0x0C,0x11,0x84,0x21,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA8,0xA7,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x00,0x00,0x08,0x30,0x06,0x20,0x02,0x42,0x7F,0xFF},
{0xA8,0xA8,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x80,0x03,0x00,0x0C,0x86,0x31,0x84,0x02,0x58,0x0C,0x60,0x30,0xC0,0x03,0x60,0x0C,0x58,0x70,0x47,0x04,0x42,0x03,0x80,0x01,0x00},
{0xA8,0xA9,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x06,0x60,0x18,0x1C,0x60,0x04},
{0xA8,0xAA,0x00,0x00,0x00,0xC0,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x02,0x20,0x02,0x20,0x1A,0x28,0x12,0x24,0x22,0x26,0x44,0x22,0x04,0x20,0x08,0xE0,0x10,0x40},
{0xA8,0xAB,0x00,0x00,0x00,0xC0,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x18,0x88,0x10,0xFC,0x10,0x80,0x2C,0x80,0x23,0x83,0x40,0x7C},
{0xA8,0xAC,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x88,0x00,0x80,0x18,0x88,0x10,0xFC,0x10,0x80,0x2C,0x80,0x23,0x83,0x40,0x7C},
{0xA8,0xAD,0x00,0x00,0x00,0xC0,0x09,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xFB,0x08,0x0A,0x09,0xFC,0x7E,0x18,0x20,0x68,0x01,0x88,0x0E,0x08,0x70,0x78,0x00,0x10},
{0xA8,0xAE,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA8,0xAF,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x22,0x7F,0xFF,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA8,0xB0,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x00,0x20,0x08,0x2F,0xFC,0x20,0x00,0x20,0x02,0x3F,0xFF,0x24,0x40,0x24,0x26,0x24,0x28,0x24,0x10,0x45,0xC8,0x5E,0x07,0x48,0x02},
{0xA8,0xB1,0x00,0x00,0x20,0x04,0x1B,0xFE,0x00,0x20,0x40,0x20,0x30,0x22,0x07,0xFF,0x00,0x20,0x10,0x20,0x78,0x20,0x10,0x20,0x11,0x20,0x10,0xE0,0x18,0x40,0x66,0x03,0x41,0xFC},
{0xA8,0xB2,0x00,0x00,0x20,0x60,0x1B,0x40,0x02,0x48,0x42,0x7C,0x33,0xC8,0x06,0x48,0x02,0x48,0x12,0x58,0x7A,0x4A,0x12,0x02,0x12,0x03,0x11,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xA8,0xB3,0x00,0x00,0x40,0x08,0x37,0xFC,0x00,0x88,0x40,0x88,0x30,0x88,0x00,0x88,0x03,0xE8,0x10,0x88,0x78,0x8A,0x11,0x0A,0x11,0x06,0x12,0x02,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xA8,0xB4,0x00,0x00,0x21,0x80,0x19,0x04,0x01,0xFE,0x42,0x00,0x34,0x10,0x01,0xF8,0x00,0x10,0x10,0x20,0x78,0x44,0x10,0x84,0x11,0x06,0x10,0xFC,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xA8,0xB5,0x00,0x00,0x20,0x00,0x19,0xB6,0x01,0x24,0x41,0x24,0x32,0x48,0x02,0x48,0x04,0x90,0x12,0x48,0x79,0x24,0x11,0x24,0x10,0x92,0x10,0x92,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xA8,0xB6,0x00,0x00,0x08,0x20,0x0F,0xF0,0x08,0x20,0x08,0x20,0x0F,0xE0,0x08,0x20,0x20,0x08,0x3F,0xFC,0x21,0x08,0x21,0x08,0x3F,0xF8,0x20,0x0A,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xA8,0xB7,0x00,0x00,0x01,0x22,0x7F,0xBF,0x12,0x22,0x12,0x22,0x12,0x24,0x12,0x24,0x7F,0xA2,0x12,0x22,0x12,0x21,0x12,0x21,0x12,0x21,0x12,0x2E,0x22,0x24,0x22,0x20,0x42,0x20},
{0xA8,0xB8,0x00,0x00,0x01,0x22,0x7F,0xBF,0x02,0x22,0x32,0x22,0x22,0x24,0x22,0x24,0x7F,0xA2,0x46,0x22,0x0A,0x21,0x0A,0x21,0x12,0x21,0x22,0x2E,0x42,0x24,0x0E,0x20,0x04,0x20},
{0xA8,0xB9,0x00,0x00,0x06,0x22,0x04,0x3F,0x07,0xA2,0x3C,0x22,0x04,0x24,0x05,0x24,0x3F,0xA2,0x04,0x22,0x05,0x21,0x7F,0xA1,0x08,0x21,0x08,0x2E,0x10,0x24,0x10,0x20,0x20,0x20},
{0xA8,0xBA,0x00,0x00,0x02,0x22,0x7F,0x3F,0x12,0x22,0x12,0x22,0x7F,0xA4,0x12,0x24,0x12,0x22,0x12,0x22,0x7F,0xA1,0x12,0x21,0x12,0x21,0x12,0x2E,0x22,0x24,0x2E,0x20,0x44,0x20},
{0xA8,0xBB,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x40,0x22,0x44,0x3F,0xFE,0x22,0x44,0x22,0x54,0x24,0x34,0x28,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xA8,0xBC,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x8C,0x10,0x98,0x0C,0x90,0x04,0xA2,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x04,0xB0,0x18,0x8F,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA8,0xBD,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xA8,0xBE,0x00,0x00,0x48,0x30,0x7C,0x20,0x48,0x22,0x4B,0xFF,0x50,0x80,0x50,0x84,0x48,0xFE,0x48,0x84,0x44,0x84,0x44,0x84,0x78,0x84,0x51,0x04,0x41,0x04,0x42,0x38,0x44,0x10},
{0xA8,0xBF,0x00,0x00,0x48,0x04,0x7D,0xFE,0x48,0x00,0x48,0x00,0x50,0x00,0x50,0x02,0x4B,0xFF,0x48,0x48,0x44,0x48,0x44,0x48,0x44,0x48,0x78,0x89,0x50,0x89,0x41,0x09,0x46,0x07},
{0xA8,0xC0,0x00,0x00,0x48,0xCC,0x7C,0x88,0x48,0x88,0x4B,0xFE,0x50,0x88,0x50,0x88,0x48,0x88,0x48,0x8A,0x47,0xFF,0x44,0x88,0x44,0x88,0x78,0x88,0x51,0x08,0x41,0x08,0x42,0x08},
{0xA8,0xC1,0x00,0x00,0x49,0x06,0x7D,0xFF,0x49,0x00,0x49,0x00,0x51,0x04,0x51,0xFE,0x49,0x44,0x49,0x44,0x45,0x28,0x45,0x28,0x45,0x10,0x79,0x10,0x52,0x28,0x42,0x47,0x44,0x82},
{0xA8,0xC2,0x00,0x00,0x48,0x30,0x7C,0x22,0x4B,0xFF,0x48,0x00,0x50,0x00,0x50,0x88,0x48,0xFC,0x48,0x88,0x44,0x88,0x44,0x88,0x44,0x88,0x78,0x89,0x51,0x09,0x41,0x09,0x46,0x07},
{0xA8,0xC3,0x00,0x00,0x10,0x18,0x0C,0x10,0x04,0x24,0x3F,0xFE,0x02,0x40,0x02,0x40,0x22,0x46,0x12,0x44,0x12,0x4C,0x1A,0x48,0x0A,0x48,0x0A,0x50,0x02,0x40,0x02,0x42,0x7F,0xFF},
{0xA8,0xC4,0x00,0x00,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x06,0xB0,0x04,0xA0,0x7C,0xA6,0x04,0xB8,0x04,0xA1,0x1C,0xA1,0x64,0x9F,0x44,0x80,0x00,0x80,0x00,0x80},
{0xA8,0xC5,0x00,0x00,0x07,0xB0,0x39,0x20,0x24,0xA0,0x24,0xA0,0x40,0x20,0x3F,0xA0,0x01,0x20,0x06,0x20,0x04,0xA0,0x07,0x20,0x7C,0x22,0x24,0x22,0x04,0x22,0x3C,0x23,0x08,0x1E},
{0xA8,0xC6,0x00,0x00,0x00,0x82,0x7F,0xFF,0x00,0x80,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x00,0x84,0x7F,0xFF,0x00,0x84,0x1F,0xFC,0x00,0x80,0x07,0x80,0x01,0x00},
{0xA8,0xC7,0x00,0x00,0x06,0x30,0x04,0x20,0x34,0x20,0x25,0x24,0x27,0xBE,0x24,0x20,0x24,0x22,0x27,0xA3,0x78,0x1E,0x20,0x00,0x00,0x08,0x1F,0xFC,0x00,0x00,0x00,0x02,0x7F,0xFF},
{0xA8,0xC8,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x40,0x02,0x40,0x22,0x44,0x3E,0x7E,0x22,0x04,0x20,0x04,0x22,0x44,0x3E,0x7C,0x22,0x44,0x02,0x40,0x02,0x40,0x02,0x42,0x7F,0xFF},
{0xA8,0xC9,0x00,0x00,0x00,0x84,0x3F,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x00,0x1F,0xF8,0x00,0x20,0x00,0x42,0x7F,0xFF,0x00,0x80,0x00,0x80,0x07,0x80,0x01,0x00},
{0xA8,0xCA,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x00,0x80,0x0C,0x90,0x08,0x8C,0x10,0x86,0x60,0x82,0x03,0x80,0x01,0x00},
{0xA8,0xCB,0x00,0x00,0x0D,0x0C,0x08,0xC8,0x08,0x52,0x13,0xFF,0x18,0x20,0x30,0x24,0x53,0xFE,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xA8,0xCC,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x22,0x17,0xFF,0x10,0x40,0x30,0xA0,0x50,0xA3,0x11,0x92,0x12,0x94,0x14,0x88,0x10,0x88,0x10,0x84,0x10,0xE4,0x13,0x82,0x11,0x01},
{0xA8,0xCD,0x00,0x00,0x0C,0x30,0x08,0x24,0x0B,0xFE,0x10,0x20,0x10,0x22,0x37,0xFF,0x50,0x00,0x10,0x0A,0x17,0xFF,0x10,0x08,0x12,0x08,0x11,0x88,0x10,0x88,0x10,0x38,0x10,0x10},
{0xA8,0xCE,0x00,0x00,0x0C,0x30,0x08,0x24,0x09,0xFE,0x10,0x20,0x18,0x22,0x33,0xFF,0x50,0x00,0x10,0x30,0x10,0x24,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x00},
{0xA8,0xCF,0x00,0x00,0x0C,0x30,0x08,0x22,0x0B,0xFF,0x10,0x20,0x1A,0x22,0x33,0xFF,0x52,0x22,0x12,0x22,0x13,0xFE,0x10,0x42,0x13,0x40,0x12,0xC0,0x14,0xA0,0x11,0x18,0x16,0x07},
{0xA8,0xD0,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x53,0x13,0xFA,0x18,0x44,0x30,0x48,0x57,0xFF,0x10,0x30,0x10,0xC0,0x13,0x8C,0x1C,0x98,0x10,0xE2,0x10,0x82,0x10,0x83,0x10,0x7E},
{0xA8,0xD1,0x00,0x00,0x0C,0xCC,0x08,0x88,0x08,0x88,0x10,0x88,0x13,0xFE,0x30,0x88,0x50,0x88,0x10,0x88,0x10,0x8A,0x17,0xFF,0x10,0x00,0x10,0xC8,0x10,0x86,0x11,0x03,0x12,0x01},
{0xA8,0xD2,0x00,0x00,0x0C,0x21,0x0B,0xF1,0x09,0x05,0x11,0x15,0x19,0xF5,0x31,0x15,0x51,0x15,0x12,0xA5,0x12,0x65,0x14,0x25,0x10,0x45,0x10,0x41,0x10,0x81,0x11,0x07,0x12,0x02},
{0xA8,0xD3,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0C,0x8C,0x08,0x88,0x14,0x94,0x22,0xA2,0x01,0x80,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80,0x00,0x80},
{0xA8,0xD4,0x00,0x00,0x0A,0x04,0x0B,0xFE,0x0A,0x04,0x12,0x04,0x12,0x04,0x33,0xFC,0x52,0x04,0x10,0x00,0x13,0x6C,0x12,0x48,0x12,0x48,0x12,0x49,0x12,0x49,0x14,0x49,0x14,0x47},
{0xA8,0xD5,0x00,0x00,0x0C,0x02,0x0B,0xFF,0x08,0x20,0x10,0x20,0x19,0x42,0x31,0xFF,0x51,0x02,0x11,0x02,0x11,0x02,0x11,0xFE,0x11,0x02,0x11,0x02,0x11,0x02,0x11,0xFE,0x11,0x02},
{0xA8,0xD6,0x00,0x00,0x0C,0x63,0x08,0x42,0x08,0x84,0x13,0xDF,0x18,0x84,0x30,0x84,0x50,0xA4,0x10,0xC4,0x13,0x9F,0x12,0x84,0x10,0x84,0x10,0x84,0x11,0x04,0x11,0x04,0x12,0x04},
{0xA8,0xD7,0x00,0x00,0x0C,0x60,0x08,0x44,0x08,0x7E,0x10,0x84,0x1B,0x68,0x30,0x30,0x50,0xC0,0x17,0x22,0x10,0x3F,0x10,0x42,0x11,0xB4,0x10,0x08,0x10,0x30,0x10,0xC0,0x17,0x00},
{0xA8,0xD8,0x00,0x00,0x0A,0x04,0x0B,0xFE,0x0A,0x04,0x12,0x24,0x1B,0xF4,0x32,0x84,0x52,0x94,0x13,0xF4,0x12,0x94,0x12,0x94,0x12,0x95,0x12,0xB5,0x14,0x93,0x14,0x83,0x14,0x81},
{0xA8,0xD9,0x00,0x00,0x0C,0xD8,0x08,0x90,0x08,0x90,0x14,0x96,0x14,0x94,0x32,0x98,0x52,0x90,0x10,0x90,0x11,0x98,0x16,0x96,0x14,0x92,0x11,0x10,0x11,0x11,0x12,0x11,0x14,0x0F},
{0xA8,0xDA,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x20,0x08,0x10,0x17,0xEC,0x60,0x03,0x00,0x00,0x3F,0xFC,0x22,0x44,0x22,0x44,0x3F,0xFC,0x22,0x44,0x22,0x44,0x22,0x5C,0x20,0x08},
{0xA8,0xDB,0x00,0x00,0x0C,0x30,0x09,0x90,0x09,0x08,0x12,0x08,0x13,0xFC,0x35,0x0B,0x59,0x08,0x11,0xF8,0x11,0x08,0x11,0x08,0x11,0xF8,0x11,0x08,0x12,0x08,0x12,0x38,0x14,0x10},
{0xA8,0xDC,0x00,0x00,0x0C,0x30,0x09,0xA0,0x09,0x24,0x13,0xFE,0x12,0x20,0x34,0x20,0x50,0x22,0x17,0xFF,0x10,0x60,0x10,0xB0,0x10,0xA8,0x11,0x27,0x16,0x22,0x10,0x20,0x10,0x20},
{0xA8,0xDD,0x00,0x00,0x0C,0x60,0x08,0x42,0x0B,0xFF,0x10,0x80,0x19,0x04,0x31,0xFE,0x53,0x04,0x15,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0x1C,0x11,0x08},
{0xA8,0xDE,0x00,0x00,0x0C,0x20,0x09,0xF0,0x08,0x20,0x10,0x50,0x11,0x8C,0x36,0x03,0x51,0xFC,0x10,0x20,0x10,0x20,0x10,0x24,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xA8,0xDF,0x00,0x00,0x06,0x00,0x04,0x40,0x0F,0xE0,0x08,0x40,0x10,0x88,0x7F,0xFC,0x21,0x08,0x21,0x08,0x3F,0xF8,0x22,0x88,0x02,0xA0,0x04,0x9A,0x04,0x8A,0x18,0x83,0x60,0x7E},
{0xA8,0xE0,0x00,0x00,0x26,0x04,0x38,0x7E,0x20,0x04,0x24,0x04,0x3E,0x7C,0x20,0x04,0x20,0x04,0x3F,0xFC,0x24,0x44,0x04,0x40,0x04,0x40,0x08,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA8,0xE1,0x00,0x00,0x22,0x44,0x3E,0x7E,0x22,0x44,0x23,0xC4,0x22,0x44,0x20,0x04,0x20,0x04,0x3F,0xFC,0x22,0x44,0x02,0x40,0x02,0x40,0x04,0x42,0x04,0x42,0x18,0x43,0x60,0x3E},
{0xA8,0xE2,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x3C,0xF2,0x24,0x92,0x2C,0xB2,0x2A,0xAA,0x32,0xCA,0x20,0x82,0x20,0x82,0x20,0x9E,0x20,0x04},
{0xA8,0xE3,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x0A,0x7F,0xFF,0x00,0x00,0x06,0x30,0x08,0x0C,0x30,0x04},
{0xA8,0xE4,0x00,0x00,0x06,0x18,0x04,0x10,0x3F,0xFE,0x04,0x10,0x04,0x10,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x10,0x04,0x12,0x7F,0xFF,0x00,0x00,0x06,0x30,0x08,0x0C,0x30,0x04},
{0xA8,0xE5,0x00,0x00,0x03,0x30,0x02,0x20,0x12,0x24,0x1F,0xFE,0x12,0x24,0x12,0x24,0x1F,0xFC,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF,0x00,0x00,0x06,0x30,0x08,0x0C,0x30,0x04},
{0xA8,0xE6,0x00,0x00,0x00,0x23,0x4F,0xF2,0x42,0x02,0x22,0x2A,0x2B,0xEA,0x0A,0x2A,0x12,0x2A,0x15,0x4A,0x64,0xCA,0x28,0x4A,0x20,0x8A,0x60,0x82,0x61,0x02,0x22,0x0E,0x04,0x04},
{0xA8,0xE7,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x00,0x02,0x80,0x37,0xC3,0x20,0x82,0x28,0x9A,0x26,0xA2,0x20,0xC2,0x22,0xA2,0x2C,0x9A,0x29,0x8A,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA8,0xE8,0x00,0x00,0x06,0x03,0x04,0x9A,0x7F,0xD2,0x08,0x12,0x09,0x92,0x31,0x12,0x12,0x12,0x0A,0xD2,0x04,0x92,0x09,0x12,0x11,0x12,0x62,0x82,0x04,0x82,0x18,0x4E,0x60,0x44},
{0xA8,0xE9,0x00,0x00,0x01,0x80,0x19,0x08,0x11,0x04,0x2F,0xF6,0x42,0x42,0x04,0x20,0x3F,0xFE,0x08,0x10,0x10,0x0C,0x6F,0xF3,0x02,0x10,0x02,0x10,0x04,0x10,0x08,0xE0,0x30,0x40},
{0xA8,0xEA,0x00,0x00,0x20,0x43,0x3F,0xC2,0x20,0x5A,0x20,0x52,0x3F,0xD2,0x22,0x52,0x22,0x12,0x2A,0x52,0x2F,0xD2,0x2A,0x52,0x2A,0x42,0x2B,0xC2,0x4A,0x92,0x42,0x0E,0x42,0x04},
{0xA8,0xEB,0x00,0x00,0x06,0x03,0x04,0x9A,0x7F,0xD2,0x04,0x12,0x24,0x52,0x3F,0xD2,0x24,0x52,0x24,0x52,0x25,0xD2,0x0C,0x92,0x16,0x02,0x15,0x02,0x25,0x92,0x44,0x8E,0x04,0x04},
{0xA8,0xEC,0x00,0x00,0x00,0x83,0x7F,0xC2,0x08,0x1A,0x09,0x12,0x10,0x92,0x7F,0x52,0x24,0x52,0x04,0x12,0x05,0x12,0x3F,0x92,0x04,0x02,0x04,0xC2,0x07,0x12,0x7C,0x0E,0x20,0x04},
{0xA8,0xED,0x00,0x00,0x03,0x03,0x07,0x9A,0x7C,0x12,0x04,0x12,0x04,0x92,0x7F,0xD2,0x04,0x12,0x04,0x12,0x24,0x92,0x3F,0xD2,0x20,0x82,0x20,0x82,0x20,0x92,0x3F,0x8E,0x20,0x84},
{0xA8,0xEE,0x00,0x00,0x06,0x03,0x34,0x02,0x25,0x1A,0x3F,0x92,0x44,0x12,0x04,0x92,0x7F,0xD2,0x04,0x12,0x24,0x92,0x3F,0xD2,0x24,0x82,0x24,0x82,0x27,0x92,0x25,0x0E,0x04,0x04},
{0xA8,0xEF,0x00,0x00,0x11,0x03,0x1F,0x9A,0x11,0x12,0x11,0x12,0x11,0x52,0x20,0xD2,0x46,0x12,0x04,0x92,0x7F,0xD2,0x0C,0x12,0x16,0x02,0x15,0x02,0x24,0xD2,0x44,0x0E,0x04,0x04},
{0xA8,0xF0,0x00,0x00,0x0C,0x18,0x09,0x10,0x7F,0x90,0x10,0x12,0x13,0x7F,0x62,0x12,0x14,0x12,0x09,0x92,0x09,0x12,0x12,0x22,0x62,0x22,0x05,0x22,0x19,0x42,0x60,0x5C,0x00,0x88},
{0xA8,0xF1,0x00,0x00,0x41,0x18,0x7F,0x90,0x40,0x10,0x42,0x12,0x5F,0x7F,0x44,0x12,0x44,0x12,0x5F,0x12,0x44,0x12,0x44,0x22,0x5F,0x22,0x40,0x22,0x7F,0xC2,0x40,0x5C,0x00,0x88},
{0xA8,0xF2,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x00,0x06,0x18,0x04,0x10,0x0B,0x2C,0x31,0x44,0x00,0x00,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA8,0xF3,0x00,0x00,0x18,0x60,0x10,0x44,0x13,0xFE,0x10,0x44,0x7C,0x84,0x13,0x38,0x10,0x00,0x11,0x8C,0x11,0x08,0x17,0xDF,0x12,0x49,0x12,0x49,0x12,0x49,0x14,0x51,0x15,0x96},
{0xA8,0xF4,0x00,0x00,0x00,0xC0,0x00,0x84,0x00,0xFE,0x00,0x80,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA8,0xF5,0x00,0x00,0x01,0x80,0x12,0x04,0x1F,0xFE,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x11,0x04,0x02,0x60,0x04,0x42,0x7F,0xFF,0x00,0x40,0x00,0x40,0x00,0x40},
{0xA8,0xF6,0x00,0x00,0x06,0x18,0x04,0x10,0x3F,0x90,0x04,0x10,0x04,0x90,0x7F,0xD8,0x00,0x14,0x06,0x12,0x04,0x13,0x3F,0x91,0x04,0x10,0x04,0xD0,0x07,0x10,0x78,0x10,0x20,0x10},
{0xA8,0xF7,0x00,0x00,0x01,0x80,0x19,0x08,0x11,0x04,0x2F,0xF6,0x42,0x42,0x04,0x20,0x3F,0xFE,0x08,0x10,0x14,0x2C,0x67,0xF3,0x04,0x20,0x04,0xE4,0x04,0x44,0x04,0x06,0x03,0xFC},
{0xA8,0xF8,0x00,0x00,0x18,0x00,0x11,0x22,0x3F,0xBF,0x44,0x22,0x05,0x22,0x7F,0xA2,0x04,0x22,0x05,0x22,0x37,0xA2,0x24,0x22,0x24,0x22,0x27,0xAE,0x7C,0x24,0x20,0x20,0x00,0x20},
{0xA8,0xF9,0x00,0x00,0x06,0x00,0x04,0x22,0x28,0xBF,0x3F,0xA2,0x2A,0xA2,0x2A,0xA2,0x2A,0xA2,0x2A,0xA2,0x2A,0xA2,0x2A,0xA2,0x2A,0xE2,0x2F,0xAE,0x78,0x24,0x20,0x20,0x00,0x20},
{0xA8,0xFA,0x00,0x00,0x01,0x00,0x7F,0x80,0x22,0x02,0x22,0xFF,0x3E,0x42,0x22,0x42,0x22,0x24,0x3E,0x24,0x22,0x18,0x22,0x10,0x2E,0x28,0x72,0x28,0x22,0x44,0x02,0x83,0x02,0x00},
{0xA8,0xFB,0x00,0x00,0x0C,0x02,0x08,0xFF,0x0A,0x42,0x0F,0x42,0x08,0x42,0x09,0x24,0x7F,0xA4,0x08,0x28,0x2A,0x18,0x2A,0x30,0x49,0x28,0x49,0x28,0x08,0x44,0x38,0x42,0x10,0x81},
{0xA8,0xFC,0x00,0x00,0x00,0xFC,0x3F,0x00,0x11,0x0C,0x0C,0xC8,0x24,0x52,0x3F,0xFF,0x20,0x02,0x40,0x24,0x1F,0xF0,0x04,0x20,0x02,0x40,0x01,0x80,0x02,0xC0,0x0C,0x30,0x30,0x0C},
{0xA8,0xFD,0x00,0x00,0x00,0x30,0x48,0x20,0x7C,0x24,0x49,0xFE,0x48,0x20,0x48,0x22,0x4B,0xFF,0x48,0x20,0x48,0x60,0x78,0xB0,0x48,0xA8,0x41,0x27,0x06,0x22,0x00,0x20,0x00,0x20},
{0xA8,0xFE,0x00,0x00,0x00,0x02,0x03,0xFF,0x48,0x04,0x7C,0x04,0x49,0x14,0x49,0xF4,0x49,0x14,0x49,0x14,0x49,0x14,0x49,0xF4,0x79,0x14,0x48,0x04,0x00,0x04,0x00,0x1C,0x00,0x08},
{0xA9,0x40,0x00,0x00,0x01,0x80,0x01,0x00,0x49,0x09,0x79,0x2F,0x4B,0xE9,0x49,0x29,0x49,0x29,0x49,0x29,0x49,0x29,0x49,0x29,0x79,0x29,0x4A,0x29,0x02,0x29,0x04,0xEF,0x08,0x49},
{0xA9,0x41,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x20,0x48,0x40,0x48,0x40,0x48,0xB0,0x48,0xA4,0x49,0x22,0x49,0x23,0x7A,0x21,0x48,0x20,0x40,0x20,0x00,0x02,0x07,0xFF,0x00,0x00},
{0xA9,0x42,0x00,0x00,0x00,0x30,0x00,0x20,0x48,0x20,0x78,0x22,0x4B,0xFF,0x48,0x20,0x48,0x20,0x49,0x24,0x49,0xFE,0x49,0x04,0x79,0x04,0x49,0x04,0x41,0x04,0x01,0xFC,0x01,0x04},
{0xA9,0x43,0x00,0x00,0x01,0x08,0x49,0xFC,0x7D,0x08,0x49,0x08,0x49,0x08,0x49,0xF8,0x49,0x08,0x49,0x08,0x49,0x08,0x79,0xF8,0x49,0x08,0x41,0x08,0x01,0x0A,0x0F,0xFF,0x00,0x00},
{0xA9,0x44,0x00,0x00,0x00,0x30,0x48,0x20,0x7A,0x22,0x4B,0xFF,0x4A,0x22,0x4A,0x22,0x4B,0xFE,0x4A,0x22,0x4A,0x22,0x7B,0xFE,0x4A,0x22,0x40,0x20,0x00,0x20,0x00,0x20,0x00,0x20},
{0xA9,0x45,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x22,0x4A,0x22,0x4B,0xFE,0x4A,0x22,0x4A,0x22,0x4A,0x22,0x4B,0xFE,0x7A,0x22,0x48,0x20,0x40,0x20,0x00,0x20,0x00,0x20,0x00,0x20},
{0xA9,0x46,0x00,0x00,0x00,0x30,0x00,0x20,0x49,0xA6,0x7D,0x24,0x49,0x24,0x49,0x24,0x49,0xFC,0x49,0x24,0x48,0x20,0x4B,0x23,0x7A,0x22,0x4A,0x22,0x42,0x22,0x03,0xFE,0x02,0x02},
{0xA9,0x47,0x00,0x00,0x22,0x44,0x3F,0x7E,0x22,0x44,0x22,0x44,0x3E,0x7C,0x22,0x44,0x00,0x00,0x04,0x20,0x07,0xF0,0x04,0x20,0x04,0x20,0x08,0x22,0x08,0x22,0x10,0x23,0x60,0x1E},
{0xA9,0x48,0x00,0x00,0x01,0x80,0x49,0x04,0x79,0xFE,0x4A,0x04,0x4A,0x04,0x4D,0xF4,0x49,0x14,0x49,0x14,0x49,0xF4,0x79,0x04,0x49,0x38,0x41,0x12,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA9,0x49,0x00,0x00,0x00,0x0C,0x48,0x3E,0x7B,0xE0,0x48,0x26,0x4A,0x24,0x49,0xA8,0x48,0xA8,0x48,0x22,0x4B,0xFF,0x78,0x20,0x48,0x20,0x40,0x20,0x01,0x20,0x00,0xE0,0x00,0x40},
{0xA9,0x4A,0x00,0x00,0x00,0xC6,0x48,0x84,0x7C,0x84,0x49,0x04,0x49,0x7F,0x4B,0x04,0x4D,0x04,0x49,0x44,0x49,0x24,0x79,0x34,0x49,0x14,0x01,0x04,0x01,0x04,0x01,0x1C,0x01,0x08},
{0xA9,0x4B,0x00,0x00,0x00,0x0C,0x4A,0x7E,0x7B,0xC8,0x4A,0x48,0x4A,0x48,0x4A,0x48,0x4A,0x48,0x4A,0x48,0x7A,0x48,0x4A,0x44,0x42,0x44,0x04,0x52,0x04,0xEA,0x04,0x4A,0x08,0x01},
{0xA9,0x4C,0x00,0x00,0x03,0x00,0x52,0x02,0x7A,0x3F,0x52,0x12,0x57,0xD2,0x52,0x52,0x52,0x52,0x52,0x52,0x54,0x54,0x74,0x8C,0x52,0x88,0x41,0x08,0x02,0x94,0x02,0x94,0x04,0x23},
{0xA9,0x4D,0x00,0x00,0x06,0x00,0x0F,0x00,0x78,0x42,0x08,0x7F,0x0A,0x42,0x7F,0x42,0x18,0x42,0x18,0x42,0x2C,0x42,0x2B,0x42,0x49,0x42,0x08,0x42,0x08,0x7E,0x08,0x42,0x08,0x00},
{0xA9,0x4E,0x00,0x00,0x00,0xC0,0x48,0x84,0x7C,0xFE,0x49,0x84,0x4A,0x88,0x48,0x50,0x48,0x60,0x49,0x98,0x4E,0x07,0x78,0xC0,0x48,0x20,0x40,0x0C,0x00,0x70,0x03,0x80,0x01,0x00},
{0xA9,0x4F,0x00,0x00,0x02,0x04,0x4B,0xFE,0x7A,0x04,0x4A,0x04,0x4B,0xFC,0x4A,0x04,0x4A,0x60,0x4A,0x40,0x4A,0x46,0x7A,0x58,0x4A,0x60,0x42,0x42,0x04,0x42,0x04,0x43,0x08,0x3E},
{0xA9,0x50,0x00,0x00,0x08,0x02,0x0F,0xFF,0x08,0x02,0x08,0x42,0x09,0xF2,0x08,0x42,0x0B,0xFA,0x08,0x02,0x09,0xF2,0x09,0x12,0x09,0x12,0x11,0xF2,0x10,0x02,0x10,0x1E,0x20,0x04},
{0xA9,0x51,0x00,0x00,0x01,0x80,0x49,0x02,0x79,0xFF,0x4A,0x40,0x4A,0x40,0x4C,0x44,0x48,0x7E,0x48,0x40,0x48,0x40,0x78,0x44,0x48,0x7E,0x40,0x40,0x00,0x40,0x00,0x40,0x00,0x40},
{0xA9,0x52,0x00,0x00,0x01,0x80,0x03,0x40,0x04,0x30,0x18,0x0C,0x67,0xF3,0x00,0x00,0x22,0x44,0x3F,0x7E,0x22,0x44,0x22,0x44,0x22,0x44,0x3E,0x5C,0x22,0x48,0x00,0x40,0x00,0x40},
{0xA9,0x53,0x00,0x00,0x18,0x0C,0x11,0x08,0x1F,0x88,0x11,0x14,0x31,0x14,0x4A,0x22,0x06,0x42,0x19,0x80,0x60,0x7F,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xA9,0x54,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0xC2,0x20,0x92,0x2F,0xFA,0x20,0x82,0x20,0x82,0x27,0xF2,0x24,0x12,0x27,0xF2,0x24,0x12,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA9,0x55,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x13,0xFF,0x10,0x00,0x7D,0x06,0x11,0x04,0x10,0x84,0x10,0x88,0x14,0x88,0x18,0x90,0x70,0x10,0x20,0x22,0x07,0xFF,0x00,0x00},
{0xA9,0x56,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x04,0x10,0x04,0x7D,0x24,0x11,0xF4,0x11,0x24,0x11,0x24,0x15,0x24,0x19,0xE4,0x71,0x24,0x20,0x04,0x00,0x04,0x00,0x1C,0x00,0x08},
{0xA9,0x57,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x20,0x11,0xA8,0x7D,0x24,0x11,0x26,0x12,0x22,0x10,0x20,0x17,0xFF,0x10,0x20,0x1C,0x20,0x70,0x20,0x20,0x20,0x00,0x20,0x00,0x20},
{0xA9,0x58,0x00,0x00,0x18,0xC6,0x10,0x84,0x10,0x84,0x13,0xFF,0x7C,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0xFC,0x14,0x84,0x18,0x84,0x70,0x84,0x20,0x84,0x00,0xFC,0x00,0x84},
{0xA9,0x59,0x00,0x00,0x18,0x18,0x10,0x10,0x11,0x12,0x11,0xFF,0x7D,0x12,0x11,0x14,0x11,0x10,0x11,0xFE,0x15,0x42,0x19,0x24,0x72,0x28,0x22,0x10,0x04,0x28,0x04,0x44,0x09,0x83},
{0xA9,0x5A,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x7D,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x15,0x04,0x19,0xFC,0x71,0x04,0x20,0x00,0x00,0x02,0x07,0xFF,0x00,0x00},
{0xA9,0x5B,0x00,0x00,0x18,0x18,0x10,0x10,0x11,0x11,0x11,0xFF,0x7D,0x11,0x11,0x11,0x11,0xFF,0x11,0x11,0x15,0x11,0x19,0xFF,0x71,0x11,0x20,0x10,0x00,0x10,0x00,0x10,0x00,0x10},
{0xA9,0x5C,0x00,0x00,0x18,0x0C,0x11,0x1E,0x11,0xE0,0x11,0x00,0x7D,0x02,0x11,0xFF,0x11,0x10,0x11,0x10,0x15,0x50,0x19,0x30,0x72,0x1C,0x22,0x16,0x04,0x12,0x04,0x10,0x08,0x10},
{0xA9,0x5D,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0C,0xC0,0x08,0x88,0x10,0xFC,0x11,0x08,0x31,0x90,0x52,0x50,0x15,0x20,0x10,0xC0,0x10,0xB0,0x11,0x0F,0x16,0x02},
{0xA9,0x5E,0x00,0x00,0x01,0x80,0x01,0x00,0x3F,0xFE,0x01,0x00,0x1F,0xFC,0x02,0x20,0x7F,0xFF,0x04,0x10,0x08,0x88,0x17,0xF4,0x60,0x83,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x80},
{0xA9,0x5F,0x00,0x00,0x01,0x80,0x01,0x04,0x3F,0xFE,0x02,0x40,0x04,0x38,0x18,0x08,0x00,0x02,0x7F,0xFF,0x00,0x08,0x1F,0x88,0x10,0x88,0x10,0x88,0x1F,0x88,0x00,0x38,0x00,0x10},
{0xA9,0x60,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x04,0x20,0x08,0x10,0x17,0xEC,0x60,0x03,0x00,0x08,0x3F,0xFC,0x00,0x80,0x0C,0x90,0x08,0x88,0x10,0x8C,0x23,0x84,0x01,0x00},
{0xA9,0x61,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x04,0x20,0x09,0x90,0x11,0x0C,0x7F,0xFB,0x11,0x08,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x11,0x0A,0x01,0x02,0x01,0x03,0x00,0xFE},
{0xA9,0x62,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x02,0x20,0x04,0x90,0x18,0x8C,0x63,0xE3,0x00,0x80,0x06,0x98,0x04,0x12,0x7F,0xFF,0x04,0x10,0x08,0x10,0x08,0x10,0x10,0x10},
{0xA9,0x63,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x08,0x18,0x06,0x10,0x02,0x22,0x7F,0xFF,0x00,0x00,0x02,0x02,0x7F,0xFF,0x04,0x10,0x0C,0x20,0x03,0xC0,0x0C,0x3C,0x70,0x04},
{0xA9,0x64,0x00,0x00,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x0F,0xF8,0x01,0x00,0x3F,0xFE,0x02,0x10,0x0E,0x20,0x01,0xC0,0x06,0x3C,0x38,0x04},
{0xA9,0x65,0x00,0x00,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x02,0xC0,0x0C,0xB8,0x70,0x87,0x03,0x00,0x02,0x02,0x7F,0xFF,0x04,0x10,0x1C,0x20,0x03,0xC0,0x06,0x3C,0x38,0x04},
{0xA9,0x66,0x00,0x00,0x18,0x18,0x10,0x10,0x12,0x14,0x7E,0xFE,0x12,0x10,0x12,0x10,0x22,0xFF,0x24,0x30,0x64,0x58,0x58,0x54,0x08,0x94,0x14,0x92,0x25,0x11,0x40,0x10,0x00,0x10},
{0xA9,0x67,0x00,0x00,0x18,0x82,0x10,0xFF,0x12,0x82,0x7E,0x82,0x12,0xFE,0x12,0x82,0x22,0xB0,0x24,0xA0,0x64,0xA6,0x58,0xAC,0x08,0xB0,0x15,0x22,0x15,0x22,0x21,0x23,0x42,0x1E},
{0xA9,0x68,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x10,0x12,0x12,0x7E,0xFF,0x12,0x10,0x12,0x10,0x22,0x10,0x24,0x92,0x54,0xFF,0x08,0x82,0x14,0x82,0x12,0x82,0x22,0xFE,0x40,0x82},
{0xA9,0x69,0x00,0x00,0x18,0x84,0x10,0xFE,0x12,0x84,0x7E,0xA4,0x12,0x94,0x12,0x84,0x23,0xFF,0x24,0x84,0x64,0xA4,0x59,0x14,0x09,0x04,0x15,0xFF,0x15,0x04,0x20,0x38,0x40,0x10},
{0xA9,0x6A,0x00,0x00,0x18,0x84,0x10,0xFE,0x12,0x84,0x7E,0x84,0x12,0x84,0x12,0xFC,0x22,0x84,0x24,0x84,0x64,0x84,0x58,0xFC,0x08,0x84,0x14,0x84,0x14,0x84,0x23,0xFF,0x40,0x00},
{0xA9,0x6B,0x00,0x00,0x31,0x04,0x21,0xFE,0x25,0x54,0x7D,0x54,0x25,0x54,0x25,0x54,0x25,0x54,0x4B,0xFF,0x69,0x54,0x51,0x54,0x11,0x54,0x29,0x54,0x29,0x54,0x21,0x0C,0x41,0x04},
{0xA9,0x6C,0x00,0x00,0x18,0x30,0x10,0x20,0x12,0x20,0x7E,0x48,0x12,0x46,0x13,0xFB,0x22,0x81,0x24,0x00,0x64,0x82,0x58,0xFF,0x08,0x82,0x14,0x82,0x12,0x82,0x22,0xFE,0x40,0x82},
{0xA9,0x6D,0x00,0x00,0x18,0x18,0x10,0xD0,0x12,0x90,0x7E,0x94,0x12,0xFE,0x12,0x90,0x22,0x90,0x25,0x10,0x64,0x14,0x54,0xFE,0x08,0x10,0x14,0x10,0x14,0x10,0x20,0x12,0x41,0xFF},
{0xA9,0x6E,0x00,0x00,0x18,0x18,0x10,0x10,0x12,0x9E,0x7E,0xF0,0x12,0x90,0x12,0x90,0x22,0x92,0x25,0xFF,0x65,0x32,0x58,0x52,0x08,0x52,0x14,0x9E,0x24,0x94,0x41,0x10,0x00,0x10},
{0xA9,0x6F,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x10,0x12,0x92,0x7E,0xFF,0x12,0x92,0x12,0x92,0x22,0x92,0x24,0xFE,0x64,0x92,0x58,0x92,0x08,0x92,0x14,0x92,0x24,0xFE,0x40,0x82},
{0xA9,0x70,0x00,0x00,0x18,0x60,0x10,0x40,0x12,0x42,0x7E,0x7F,0x12,0x92,0x13,0x14,0x22,0x10,0x24,0x54,0x64,0x54,0x58,0x92,0x08,0x92,0x15,0x12,0x24,0x10,0x40,0x70,0x00,0x20},
{0xA9,0x71,0x00,0x00,0x18,0x06,0x10,0xC4,0x12,0x84,0x7E,0x84,0x12,0xA4,0x12,0xA4,0x22,0x94,0x24,0x94,0x64,0x84,0x58,0xA8,0x08,0xC8,0x15,0x94,0x14,0x92,0x24,0x23,0x40,0xC1},
{0xA9,0x72,0x00,0x00,0x18,0x18,0x10,0x10,0x12,0xD4,0x7E,0x92,0x12,0x93,0x13,0x11,0x22,0xFE,0x24,0x10,0x64,0x10,0x58,0x12,0x09,0xFF,0x14,0x10,0x12,0x10,0x22,0x10,0x40,0x10},
{0xA9,0x73,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x20,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x03,0x80,0x11,0x08,0x1F,0xFC,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF},
{0xA9,0x74,0x00,0x00,0x02,0x0C,0x7E,0x9E,0x02,0xE4,0x0C,0xA4,0x08,0xA4,0x0A,0xA4,0x0C,0xA4,0x18,0xA4,0x68,0xA4,0x48,0xA4,0x09,0x24,0x09,0x32,0x09,0x6A,0x39,0x29,0x12,0x01},
{0xA9,0x75,0x00,0x00,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x07,0xF0,0x00,0x20,0x00,0x42,0x7F,0xFF,0x00,0x80,0x00,0x80,0x07,0x80,0x01,0x00},
{0xA9,0x76,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x14,0x1F,0xF8,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x0C,0x90,0x08,0x8C,0x10,0x86,0x63,0x82,0x01,0x00},
{0xA9,0x77,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x04,0x1F,0xFC,0x00,0x80,0x00,0x80,0x18,0x88,0x10,0xFC,0x10,0x80,0x10,0x80,0x28,0x80,0x26,0x83,0x41,0xFC},
{0xA9,0x78,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA9,0x79,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x48,0x14,0x0F,0xF8,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x14,0x7F,0xFE},
{0xA9,0x7A,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0xC4,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xA9,0x7B,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4C,0x04,0x09,0x40,0x1F,0x7E,0x11,0x44,0x11,0x44,0x2A,0x44,0x4A,0x5C,0x04,0x48,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xA9,0x7C,0x00,0x00,0x00,0xC0,0x0C,0x90,0x18,0x8C,0x20,0x86,0x40,0x83,0x3F,0xFD,0x20,0x04,0x20,0x04,0x27,0xE4,0x24,0x24,0x24,0x24,0x27,0xE4,0x20,0x04,0x20,0x1C,0x20,0x08},
{0xA9,0x7D,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x60,0x26,0x46,0x24,0x44,0x27,0xFC,0x20,0x40,0x2C,0x43,0x48,0x42,0x4F,0xFE,0x48,0x02},
{0xA9,0x7E,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x44,0x20,0x40,0x2F,0xFF,0x20,0x40,0x24,0x44,0x27,0xFE,0x24,0x04,0x44,0x04,0x47,0xFC,0x44,0x04},
{0xA9,0xA1,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x60,0x2C,0x43,0x2B,0xFA,0x28,0x42,0x28,0x42,0x29,0xF2,0x48,0x02,0x4F,0xFE,0x48,0x02},
{0xA9,0xA2,0x00,0x00,0x19,0x02,0x11,0xFF,0x55,0x02,0x55,0x02,0x55,0xFE,0x55,0x12,0x55,0x10,0x55,0x12,0x55,0xFF,0x55,0x10,0x7D,0x09,0x45,0x09,0x01,0x65,0x07,0x83,0x02,0x01},
{0xA9,0xA3,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x26,0x1A,0x21,0x22,0x2F,0xFA,0x20,0x02,0x20,0xC2,0x26,0x9A,0x24,0x92,0x24,0x92,0x27,0xF2,0x24,0x12,0x20,0x0E,0x20,0x04},
{0xA9,0xA4,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x10,0x04,0x00,0x00,0x3F,0xFE,0x20,0x00,0x27,0xFC,0x20,0x40,0x20,0x42,0x2F,0xFF,0x20,0x40,0x40,0x40,0x40,0x40,0x40,0x40},
{0xA9,0xA5,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x10,0x04,0x00,0x00,0x7F,0xFF,0x02,0x00,0x04,0x04,0x0F,0xFE,0x18,0x04,0x68,0x04,0x08,0x04,0x0F,0xFC,0x08,0x04},
{0xA9,0xA6,0x00,0x00,0x00,0x30,0x18,0x20,0x10,0x20,0x11,0x22,0x55,0xFF,0x55,0x22,0x55,0x22,0x55,0x22,0x55,0xFE,0x55,0x22,0x55,0x22,0x7D,0x22,0x45,0x22,0x01,0xFE,0x01,0x02},
{0xA9,0xA7,0x00,0x00,0x0C,0xC8,0x08,0x86,0x10,0x80,0x30,0x7F,0x57,0xC0,0x10,0x21,0x10,0x19,0x10,0x07,0x00,0xC0,0x18,0x86,0x10,0x84,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xA9,0xA8,0x00,0x00,0x10,0x7C,0x1F,0x80,0x10,0x00,0x10,0x08,0x1F,0xFC,0x10,0x40,0x10,0x42,0x7F,0xFF,0x00,0x00,0x00,0xC0,0x30,0x86,0x20,0x84,0x20,0x84,0x3F,0xFC,0x20,0x04},
{0xA9,0xA9,0x00,0x00,0x01,0x80,0x21,0x04,0x3F,0xFE,0x42,0x44,0x0C,0x49,0x70,0x3F,0x01,0x80,0x11,0x08,0x1F,0xFC,0x11,0x08,0x11,0x08,0x11,0x08,0x11,0x38,0x11,0x10,0x01,0x00},
{0xA9,0xAA,0x00,0x00,0x0F,0xF8,0x00,0x0A,0x7F,0xFF,0x00,0x08,0x0F,0xF8,0x20,0x02,0x3F,0xFF,0x40,0x02,0x40,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x10,0x9C,0x10,0x88,0x00,0x80},
{0xA9,0xAB,0x00,0x00,0x18,0x18,0x10,0x10,0x52,0x10,0x7F,0x12,0x52,0x1F,0x52,0x10,0x52,0x10,0x52,0x92,0x52,0xFF,0x52,0x82,0x5E,0x82,0x54,0x82,0x10,0x82,0x10,0xFE,0x10,0x82},
{0xA9,0xAC,0x00,0x00,0x18,0x18,0x10,0x10,0x52,0xA2,0x7E,0xFF,0x52,0x82,0x52,0x82,0x52,0x82,0x52,0x82,0x52,0xFE,0x52,0x82,0x5E,0x82,0x54,0x82,0x10,0x82,0x10,0xFE,0x10,0x82},
{0xA9,0xAD,0x00,0x00,0x00,0xC0,0x09,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x88,0x20,0x82,0x3F,0xFF,0x20,0x82,0x20,0x82,0x20,0x8E,0x20,0x84,0x00,0x80},
{0xA9,0xAE,0x00,0x00,0x0C,0x00,0x09,0x02,0x7F,0x7F,0x11,0x22,0x12,0x14,0x2C,0x08,0x0A,0x34,0x12,0xC3,0x60,0x80,0x0F,0xFC,0x08,0x84,0x08,0x84,0x08,0x9C,0x08,0x88,0x00,0x80},
{0xA9,0xAF,0x00,0x00,0x00,0xC0,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x04,0x10,0x02,0x20,0x0F,0xF8,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80},
{0xA9,0xB0,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0x80,0x2F,0xFC,0x20,0x84,0x3F,0xFF,0x20,0x84,0x2F,0xFC,0x21,0x40,0x21,0x20,0x42,0x10,0x44,0x0C,0x58,0x03},
{0xA9,0xB1,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0xC0,0x20,0x84,0x20,0xFE,0x20,0x80,0x24,0x84,0x27,0xFE,0x24,0x04,0x24,0x04,0x44,0x04,0x47,0xFC,0x44,0x04},
{0xA9,0xB2,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x23,0x06,0x22,0x04,0x24,0xFF,0x2C,0x04,0x34,0x84,0x24,0x64,0x24,0x24,0x24,0x04,0x44,0x04,0x44,0x1C,0x44,0x08},
{0xA9,0xB3,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x24,0x3E,0x27,0xE0,0x24,0x20,0x24,0x22,0x27,0xFF,0x24,0x10,0x24,0x10,0x25,0xC9,0x4E,0x05,0x40,0x23,0x4F,0xF1},
{0xA9,0xB4,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x24,0x08,0x27,0xFC,0x28,0x08,0x37,0xC8,0x24,0x48,0x24,0x48,0x27,0xC8,0x24,0x32,0x44,0x02,0x44,0x03,0x43,0xFE},
{0xA9,0xB5,0x00,0x00,0x08,0x0C,0x7C,0x1E,0x09,0xF0,0x10,0x10,0x10,0x10,0x24,0xD4,0x7E,0x9E,0x24,0x90,0x04,0x90,0x34,0x90,0x28,0x92,0x48,0x7F,0x14,0x00,0x23,0x03,0x40,0xFC},
{0xA9,0xB6,0x00,0x00,0x04,0x18,0x7E,0x10,0x04,0x12,0x25,0xFF,0x3C,0x30,0x24,0x20,0x20,0x46,0x44,0xC4,0x7E,0x28,0x44,0x10,0x04,0x30,0x04,0x24,0x44,0x42,0x39,0xFD,0x10,0x81},
{0xA9,0xB7,0x00,0x00,0x04,0x0C,0x7E,0x9E,0x04,0xE4,0x24,0xA4,0x3C,0xA4,0x24,0xA4,0x20,0xA4,0x44,0xA4,0x7E,0xA4,0x44,0xA4,0x05,0x24,0x05,0x32,0x45,0x6A,0x3A,0x29,0x12,0x01},
{0xA9,0xB8,0x00,0x00,0x08,0x02,0x7F,0x7F,0x11,0x22,0x12,0x14,0x2C,0x08,0x0A,0x14,0x11,0x63,0x6F,0xF8,0x00,0x08,0x0F,0xF8,0x08,0x00,0x1F,0xFC,0x10,0x04,0x00,0x08,0x00,0xF0},
{0xA9,0xB9,0x00,0x00,0x18,0x40,0x10,0x30,0x20,0x12,0x2B,0xFF,0x48,0x20,0x10,0x20,0x10,0x20,0x30,0x24,0x53,0xFE,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x00},
{0xA9,0xBA,0x00,0x00,0x18,0x04,0x13,0xFE,0x20,0x20,0x2C,0x20,0x48,0x20,0x13,0x20,0x12,0x24,0x32,0x3E,0x52,0x20,0x12,0x20,0x12,0x20,0x12,0x20,0x12,0x22,0x17,0xFF,0x10,0x00},
{0xA9,0xBB,0x00,0x00,0x18,0x90,0x10,0x94,0x23,0xFE,0x28,0x94,0x4A,0x94,0x13,0xFC,0x12,0x94,0x32,0x92,0x57,0xFF,0x14,0x92,0x10,0x92,0x10,0x9E,0x11,0x14,0x11,0x10,0x12,0x10},
{0xA9,0xBC,0x00,0x00,0x18,0x18,0x10,0x10,0x21,0x12,0x2D,0xFF,0x49,0x12,0x11,0x14,0x11,0x10,0x31,0xFE,0x51,0x42,0x11,0x24,0x11,0x28,0x12,0x10,0x12,0x28,0x12,0x44,0x14,0x83},
{0xA9,0xBD,0x00,0x00,0x00,0xFC,0x1F,0x80,0x00,0x80,0x01,0x02,0x7F,0xFF,0x02,0x20,0x04,0x18,0x19,0x84,0x61,0x03,0x0D,0x48,0x09,0x24,0x11,0x12,0x21,0x12,0x07,0x00,0x02,0x00},
{0xA9,0xBE,0x00,0x00,0x00,0xC0,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x01,0x00,0x04,0x80,0x24,0xC4,0x24,0x52,0x44,0x13,0x44,0x19,0x03,0xF0},
{0xA9,0xBF,0x00,0x00,0x0C,0x00,0x08,0x04,0x0F,0xFE,0x11,0x24,0x62,0x24,0x0C,0x44,0x31,0x84,0x06,0x38,0x00,0x90,0x06,0x80,0x24,0x44,0x24,0x52,0x44,0x13,0x44,0x19,0x03,0xF0},
{0xA9,0xC0,0x00,0x00,0x01,0x80,0x01,0x40,0x02,0x20,0x04,0x18,0x1B,0xE7,0x60,0x02,0x0F,0xF8,0x00,0x08,0x00,0x10,0x05,0x20,0x14,0xC4,0x24,0x52,0x24,0x13,0x44,0x19,0x03,0xF0},
{0xA9,0xC1,0x00,0x00,0x06,0xE0,0x04,0x20,0x08,0x10,0x10,0x0C,0x6F,0xF3,0x02,0x10,0x02,0x10,0x04,0x70,0x18,0x20,0x01,0x00,0x04,0xC4,0x24,0x52,0x24,0x13,0x44,0x19,0x03,0xF0},
{0xA9,0xC2,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0x24,0x19,0xFE,0x55,0x24,0x55,0x24,0x51,0x24,0x11,0x24,0x17,0xFF,0x10,0x20,0x10,0x50,0x10,0x48,0x10,0x88,0x11,0x04,0x12,0x03},
{0xA9,0xC3,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x20,0x18,0x20,0x54,0x20,0x54,0x20,0x51,0xA4,0x11,0x3E,0x11,0x20,0x11,0x20,0x11,0x20,0x11,0x20,0x11,0x22,0x17,0xFF,0x10,0x00},
{0xA9,0xC4,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x24,0x19,0xFE,0x54,0x20,0x54,0x20,0x50,0x22,0x13,0xFF,0x10,0x40,0x10,0x40,0x10,0x88,0x10,0x84,0x11,0x3A,0x17,0xC3,0x12,0x01},
{0xA9,0xC5,0x00,0x00,0x18,0x34,0x10,0x23,0x10,0x20,0x1B,0xFF,0x54,0x20,0x54,0x20,0x51,0xAC,0x11,0x28,0x11,0x28,0x11,0x29,0x11,0x29,0x12,0x29,0x12,0x29,0x14,0x27,0x10,0x20},
{0xA9,0xC6,0x00,0x00,0x18,0x60,0x10,0x42,0x13,0xFF,0x18,0x40,0x54,0x98,0x54,0x92,0x51,0xFF,0x12,0x92,0x14,0x92,0x10,0x92,0x10,0x92,0x10,0x9E,0x10,0x94,0x10,0x10,0x10,0x10},
{0xA9,0xC7,0x00,0x00,0x18,0x04,0x13,0xFE,0x11,0x04,0x18,0x88,0x54,0x50,0x54,0x30,0x50,0xCC,0x13,0x03,0x10,0x30,0x10,0x24,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xA9,0xC8,0x00,0x00,0x18,0x18,0x10,0x10,0x11,0x22,0x19,0xFF,0x55,0x02,0x55,0x02,0x51,0x02,0x11,0x02,0x11,0xFE,0x11,0x02,0x11,0x02,0x11,0x02,0x11,0x02,0x11,0xFE,0x11,0x02},
{0xA9,0xC9,0x00,0x00,0x18,0x30,0x10,0x20,0x18,0x20,0x54,0x48,0x54,0x44,0x50,0x9A,0x13,0xE3,0x11,0x01,0x10,0x82,0x10,0xFF,0x10,0x82,0x10,0x82,0x10,0x82,0x10,0xFE,0x10,0x82},
{0xA9,0xCA,0x00,0x00,0x18,0x18,0x10,0xD0,0x10,0x90,0x18,0x94,0x54,0xFE,0x55,0x10,0x51,0x10,0x12,0x10,0x10,0x14,0x10,0xFE,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x12,0x13,0xFF},
{0xA9,0xCB,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x19,0x02,0x55,0xFE,0x55,0x02,0x51,0x30,0x11,0x20,0x11,0x26,0x11,0x38,0x11,0x20,0x12,0x22,0x12,0x22,0x12,0x23,0x14,0x1E},
{0xA9,0xCC,0x00,0x00,0x18,0x50,0x10,0x54,0x13,0xFE,0x18,0x54,0x55,0x54,0x55,0xFC,0x51,0x54,0x11,0x52,0x13,0xFF,0x12,0x52,0x10,0x52,0x10,0x5E,0x10,0x94,0x10,0x90,0x11,0x10},
{0xA9,0xCD,0x00,0x00,0x18,0x00,0x11,0x04,0x11,0xFE,0x19,0x04,0x55,0x04,0x55,0x04,0x51,0xFC,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04,0x10,0x00,0x10,0x02,0x17,0xFF},
{0xA9,0xCE,0x00,0x00,0x00,0x68,0x00,0x46,0x00,0x40,0x7F,0xFF,0x00,0x40,0x00,0x40,0x3F,0x26,0x21,0x24,0x21,0x28,0x3F,0x10,0x00,0x11,0x07,0xA9,0x78,0x25,0x20,0x43,0x01,0x81},
{0xA9,0xCF,0x00,0x00,0x06,0x34,0x34,0x22,0x24,0x22,0x24,0x20,0x3C,0x3F,0x25,0xE0,0x04,0x26,0x04,0x24,0x7C,0x28,0x24,0x10,0x24,0x11,0x24,0x29,0x44,0x25,0x44,0x43,0x04,0x81},
{0xA9,0xD0,0x00,0x00,0x10,0x7C,0x1F,0x80,0x10,0x04,0x1F,0xFE,0x10,0x04,0x1F,0xFC,0x10,0x00,0x10,0x42,0x1F,0xFF,0x11,0x00,0x11,0xFC,0x21,0x04,0x22,0x04,0x22,0x78,0x44,0x20},
{0xA9,0xD1,0x00,0x00,0x10,0x7C,0x1F,0x80,0x10,0x04,0x1F,0xFE,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x00,0x10,0x64,0x10,0x42,0x1F,0xFF,0x20,0x40,0x20,0xA0,0x23,0x18,0x4C,0x07},
{0xA9,0xD2,0x00,0x00,0x27,0x4E,0x38,0x70,0x20,0x40,0x21,0x40,0x3F,0x42,0x21,0x7F,0x21,0x44,0x21,0x44,0x3F,0x44,0x21,0x44,0x20,0x44,0x20,0x84,0x40,0x84,0x40,0x84,0x41,0x04},
{0xA9,0xD3,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x10,0x00,0x20,0x08,0xC3,0x7C,0x82,0x0B,0xEA,0x08,0x8C,0x0B,0xE8,0x10,0x84,0x17,0xF4,0x20,0x82,0x40,0x82,0x03,0x81,0x01,0x00},
{0xA9,0xD4,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x12,0x7D,0xFF,0x10,0x00,0x10,0x86,0x14,0x84,0x18,0x44,0x70,0x48,0x50,0x48,0x10,0x48,0x10,0x10,0x10,0x12,0x73,0xFF,0x20,0x00},
{0xA9,0xD5,0x00,0x00,0x18,0x18,0x10,0x10,0x14,0xD4,0x7E,0x92,0x10,0x93,0x11,0x11,0x14,0xFE,0x18,0x10,0x70,0x10,0x50,0x12,0x11,0xFF,0x10,0x10,0x10,0x10,0x70,0x10,0x20,0x10},
{0xA9,0xD6,0x00,0x00,0x18,0x40,0x10,0x20,0x10,0x04,0x7D,0xFE,0x10,0x20,0x10,0x20,0x14,0x20,0x18,0x24,0x71,0xFE,0x50,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x70,0x22,0x23,0xFF},
{0xA9,0xD7,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x7D,0x02,0x11,0xFE,0x11,0x12,0x15,0x10,0x19,0x12,0x71,0xFF,0x51,0x10,0x11,0x08,0x11,0x09,0x11,0x65,0x77,0x83,0x22,0x01},
{0xA9,0xD8,0x00,0x00,0x18,0x50,0x10,0x54,0x13,0xFE,0x7C,0x54,0x11,0x54,0x11,0xFC,0x15,0x54,0x19,0x52,0x73,0xFF,0x52,0x52,0x10,0x52,0x10,0x5E,0x10,0x94,0x70,0x90,0x21,0x10},
{0xA9,0xD9,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x12,0x7D,0xFF,0x10,0x10,0x10,0x10,0x14,0x14,0x18,0xFE,0x70,0x30,0x50,0x58,0x10,0x54,0x10,0x94,0x10,0x92,0x71,0x11,0x20,0x10},
{0xA9,0xDA,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x00,0x7D,0x00,0x11,0x04,0x11,0xFE,0x15,0x04,0x19,0x04,0x71,0x04,0x51,0xFC,0x11,0x04,0x11,0x00,0x11,0x02,0x71,0xFF,0x21,0x00},
{0xA9,0xDB,0x00,0x00,0x18,0x02,0x11,0xFF,0x14,0x42,0x7E,0x42,0x10,0x42,0x10,0x82,0x14,0x9C,0x19,0x08,0x70,0x82,0x50,0xFF,0x10,0x82,0x10,0x82,0x10,0x82,0x70,0xFE,0x20,0x82},
{0xA9,0xDC,0x00,0x00,0x18,0x18,0x10,0x10,0x11,0x12,0x7D,0xFF,0x11,0x12,0x11,0x14,0x15,0x10,0x19,0xFE,0x71,0x42,0x51,0x24,0x11,0x28,0x12,0x10,0x12,0x28,0x72,0x24,0x24,0xC3},
{0xA9,0xDD,0x00,0x00,0x18,0x00,0x10,0x02,0x13,0xFF,0x7C,0x40,0x10,0x40,0x10,0x40,0x14,0x82,0x18,0xFF,0x71,0x82,0x52,0x82,0x14,0x82,0x10,0x82,0x10,0x82,0x70,0xFE,0x20,0x82},
{0xA9,0xDE,0x00,0x00,0x18,0x68,0x10,0x46,0x10,0x40,0x7D,0xFF,0x10,0x40,0x10,0x46,0x14,0x84,0x18,0xC4,0x70,0xA8,0x51,0x28,0x11,0x10,0x12,0x18,0x12,0x28,0x74,0x44,0x21,0x83},
{0xA9,0xDF,0x00,0x00,0x19,0x80,0x11,0x18,0x11,0x10,0x7D,0x10,0x11,0x3E,0x17,0xD2,0x12,0x12,0x1A,0xD2,0x72,0x92,0x52,0x92,0x12,0x92,0x12,0xA2,0x12,0xAD,0x74,0x81,0x24,0x7F},
{0xA9,0xE0,0x00,0x00,0x18,0x30,0x10,0x20,0x14,0x20,0x7E,0x22,0x10,0x3F,0x10,0x20,0x14,0x20,0x19,0x22,0x71,0xFF,0x51,0x02,0x11,0x02,0x11,0x02,0x11,0x02,0x71,0xFE,0x21,0x02},
{0xA9,0xE1,0x00,0x00,0x18,0x04,0x10,0xFE,0x10,0x20,0x7C,0xA8,0x10,0xA4,0x11,0x26,0x15,0x22,0x18,0x20,0x73,0xFF,0x50,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x70,0x20,0x20,0x20},
{0xA9,0xE2,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x10,0x7D,0x11,0x11,0xFF,0x11,0x11,0x15,0x11,0x19,0x11,0x71,0xFF,0x51,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x71,0xFF,0x21,0x01},
{0xA9,0xE3,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x22,0x7D,0x22,0x11,0xFE,0x11,0x22,0x15,0x22,0x19,0x22,0x71,0xFE,0x51,0x22,0x10,0x20,0x10,0x20,0x10,0x20,0x70,0x20,0x20,0x20},
{0xA9,0xE4,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x7D,0x04,0x11,0x04,0x11,0xFC,0x15,0x04,0x18,0x02,0x73,0xFF,0x50,0x42,0x10,0x42,0x10,0x82,0x10,0x82,0x71,0x3C,0x22,0x08},
{0xA9,0xE5,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xA6,0x7D,0x24,0x11,0x24,0x11,0x24,0x15,0xFC,0x19,0x24,0x70,0x20,0x53,0x23,0x12,0x22,0x12,0x22,0x12,0x22,0x73,0xFE,0x22,0x02},
{0xA9,0xE6,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x7D,0x44,0x11,0x34,0x11,0x04,0x17,0xFF,0x15,0x04,0x19,0x44,0x71,0x34,0x52,0x04,0x13,0xFF,0x12,0x08,0x70,0x78,0x20,0x10},
{0xA9,0xE7,0x00,0x00,0x18,0x18,0x10,0x10,0x11,0x22,0x7D,0xFF,0x11,0x02,0x11,0x02,0x15,0x02,0x19,0x02,0x71,0xFE,0x51,0x02,0x11,0x02,0x11,0x02,0x11,0x02,0x71,0xFE,0x21,0x02},
{0xA9,0xE8,0x00,0x00,0x18,0x0C,0x11,0x1E,0x11,0xF0,0x7D,0x10,0x11,0x14,0x11,0xFE,0x15,0x10,0x19,0x10,0x71,0x08,0x51,0x69,0x17,0x85,0x12,0x03,0x10,0x09,0x77,0xFC,0x20,0x00},
{0xA9,0xE9,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x48,0x7C,0x86,0x13,0xFB,0x11,0x01,0x14,0x00,0x18,0xCC,0x70,0x88,0x57,0xFF,0x10,0x88,0x10,0x88,0x11,0x08,0x71,0x08,0x22,0x08},
{0xA9,0xEA,0x00,0x00,0x18,0xC0,0x10,0x84,0x11,0xFE,0x7D,0x04,0x12,0x04,0x15,0xE4,0x11,0x24,0x15,0x24,0x19,0xE4,0x71,0x04,0x51,0x38,0x11,0x12,0x11,0x02,0x71,0x03,0x20,0xFE},
{0xA9,0xEB,0x00,0x00,0x18,0xC0,0x10,0x82,0x10,0xFF,0x7D,0x82,0x11,0x02,0x12,0x02,0x10,0xFA,0x14,0x8A,0x18,0x8A,0x70,0xFA,0x50,0x02,0x10,0x02,0x10,0x04,0x70,0x38,0x20,0x10},
{0xA9,0xEC,0x00,0x00,0x18,0xC0,0x10,0x82,0x11,0xFF,0x7D,0x00,0x12,0x18,0x10,0xD2,0x14,0x9F,0x18,0xF2,0x71,0x92,0x50,0x96,0x10,0x92,0x10,0x90,0x10,0x81,0x70,0x81,0x20,0x7F},
{0xA9,0xED,0x00,0x00,0x18,0xCC,0x10,0x88,0x10,0x89,0x7C,0x9F,0x11,0x29,0x13,0x29,0x10,0xC9,0x14,0x49,0x18,0x89,0x70,0x89,0x51,0x29,0x13,0xD1,0x11,0x11,0x70,0x27,0x20,0x42},
{0xA9,0xEE,0x00,0x00,0x18,0x0C,0x10,0x9E,0x14,0xE0,0x7E,0x80,0x10,0x82,0x10,0xFF,0x14,0x88,0x18,0x88,0x70,0xA8,0x50,0x98,0x10,0x8E,0x11,0x0B,0x11,0x09,0x71,0x08,0x22,0x08},
{0xA9,0xEF,0x00,0x00,0x18,0x30,0x10,0x20,0x14,0x20,0x7E,0x48,0x10,0x44,0x10,0x9A,0x11,0xE3,0x1C,0x81,0x70,0x00,0x50,0xFE,0x10,0x82,0x10,0x82,0x10,0x82,0x70,0xFE,0x20,0x82},
{0xA9,0xF0,0x00,0x00,0x18,0x30,0x10,0x28,0x10,0x48,0x7C,0x44,0x10,0x82,0x13,0x7D,0x10,0x00,0x14,0x02,0x19,0xFF,0x70,0x22,0x50,0x22,0x10,0x2E,0x10,0x24,0x70,0x20,0x20,0x20},
{0xA9,0xF1,0x00,0x00,0x0C,0x30,0x08,0x20,0x0A,0x20,0x7F,0x22,0x20,0x3F,0x22,0x42,0x3E,0x42,0x22,0xA4,0x22,0x24,0x22,0x14,0x22,0x18,0x22,0x28,0x42,0x24,0x5C,0x44,0x49,0x83},
{0xA9,0xF2,0x00,0x00,0x0C,0x30,0x10,0x0E,0x66,0x32,0x09,0xC0,0x03,0x30,0x0C,0x0C,0x70,0xF3,0x0F,0x00,0x08,0x04,0x0F,0xFE,0x08,0x40,0x08,0x40,0x10,0x40,0x10,0x40,0x20,0x40},
{0xA9,0xF3,0x00,0x00,0x0C,0x10,0x08,0x30,0x0A,0x28,0x7F,0x48,0x20,0x44,0x20,0x84,0x3E,0xA2,0x23,0x11,0x22,0x18,0x22,0x08,0x22,0x00,0x22,0x20,0x42,0x10,0x5C,0x18,0x48,0x08},
{0xA9,0xF4,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x20,0x48,0x20,0x48,0x20,0x48,0x20,0x78,0x24,0x4B,0xFE,0x48,0x20,0x48,0x20,0x78,0x20,0x48,0x20,0x40,0x22,0x07,0xFF,0x00,0x00},
{0xA9,0xF5,0x00,0x00,0x03,0x30,0x02,0x20,0x02,0x24,0x3F,0xFE,0x02,0x20,0x02,0x22,0x7F,0xFF,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA9,0xF6,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x0A,0x08,0x02,0x02,0x07,0xFF,0x08,0x92,0x31,0x22,0x06,0x22,0x18,0x42,0x01,0x9C,0x06,0x08},
{0xA9,0xF7,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x20,0x02,0x3F,0xFF,0x20,0x02,0x3F,0xFE,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xA9,0xF8,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x00,0x00,0x18,0x60,0x12,0x4C,0x1F,0x50,0x10,0x62,0x17,0x42,0x78,0x43,0x20,0x3E},
{0xA9,0xF9,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x23,0x42,0x3C,0x7F,0x20,0x42,0x20,0x42,0x27,0x42,0x78,0x5E,0x20,0x44,0x00,0x40},
{0xA9,0xFA,0x00,0x00,0x22,0x42,0x3F,0x7F,0x22,0x42,0x22,0x42,0x22,0x7E,0x3E,0x42,0x22,0x42,0x22,0x42,0x22,0x7E,0x3E,0x42,0x22,0x42,0x00,0x82,0x00,0x92,0x01,0x0E,0x02,0x04},
{0xA9,0xFB,0x00,0x00,0x00,0xC0,0x48,0x80,0x7D,0x02,0x49,0xFF,0x4A,0x02,0x4C,0x12,0x79,0xFA,0x48,0x02,0x48,0x12,0x49,0xFA,0x78,0x02,0x48,0x04,0x40,0x04,0x00,0x78,0x00,0x10},
{0xA9,0xFC,0x00,0x00,0x10,0x7C,0x1F,0xC0,0x10,0x40,0x10,0x44,0x1F,0xFE,0x10,0x20,0x13,0x91,0x7C,0x09,0x20,0x05,0x0F,0xFB,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xA9,0xFD,0x00,0x00,0x00,0x0C,0x49,0x1E,0x7D,0xE0,0x49,0x00,0x49,0x00,0x49,0x02,0x79,0xFF,0x49,0x08,0x49,0x08,0x49,0x08,0x79,0x08,0x4A,0x08,0x42,0x08,0x02,0x08,0x04,0x08},
{0xA9,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x02,0x7F,0xFF,0x00,0x80,0x00,0x84,0x3F,0xFE,0x01,0x40,0x02,0x20,0x0C,0x18,0x70,0x07},
{0xAA,0x40,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x03,0x80,0x3C,0x30,0x04,0x20,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x20,0x08,0x20,0x30,0x20},
{0xAA,0x41,0x00,0x00,0x25,0x04,0x3D,0xFE,0x25,0x04,0x25,0x04,0x3D,0x3C,0x25,0x08,0x25,0x02,0x25,0xFF,0x3D,0x42,0x25,0x24,0x25,0x28,0x25,0x18,0x45,0x14,0x5D,0x24,0x49,0x43},
{0xAA,0x42,0x00,0x00,0x11,0x22,0x1F,0xBF,0x11,0x22,0x11,0x22,0x1F,0x3E,0x11,0x22,0x11,0x22,0x11,0x22,0x1F,0x3E,0x11,0x22,0x11,0x22,0x21,0x22,0x21,0x42,0x27,0x4E,0x42,0x44},
{0xAA,0x43,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x7D,0xFF,0x10,0x00,0x30,0x00,0x30,0x88,0x58,0xFC,0x54,0x88,0x54,0x88,0x10,0x88,0x10,0x89,0x11,0x09,0x11,0x09,0x12,0x07},
{0xAA,0x44,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x12,0x7D,0xFF,0x10,0x40,0x30,0x44,0x30,0x7E,0x58,0x44,0x54,0x44,0x54,0x44,0x10,0x84,0x10,0x84,0x10,0x84,0x11,0x38,0x12,0x10},
{0xAA,0x45,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0x22,0x7D,0xFF,0x11,0x22,0x32,0x24,0x30,0x20,0x58,0x40,0x54,0x58,0x54,0x50,0x10,0x52,0x10,0x92,0x10,0x92,0x11,0x13,0x16,0x0E},
{0xAA,0x46,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x01,0x80,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xAA,0x47,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xAA,0x48,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x82,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAA,0x49,0x00,0x00,0x18,0x00,0x11,0x04,0x11,0xFE,0x7D,0x24,0x11,0x24,0x31,0x24,0x31,0x24,0x59,0xFC,0x55,0x04,0x55,0x00,0x11,0x00,0x11,0x02,0x11,0x02,0x11,0x03,0x10,0xFE},
{0xAA,0x4A,0x00,0x00,0x19,0x8C,0x11,0x08,0x11,0x08,0x7D,0x08,0x11,0x08,0x31,0x4A,0x31,0xEF,0x59,0x08,0x55,0x08,0x55,0x08,0x11,0x08,0x11,0x29,0x11,0xC9,0x17,0x09,0x12,0x07},
{0xAA,0x4B,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x20,0x10,0x20,0x30,0x24,0x33,0xFE,0x58,0x84,0x54,0x88,0x54,0x48,0x10,0x50,0x10,0x20,0x10,0x50,0x10,0x8C,0x13,0x03},
{0xAA,0x4C,0x00,0x00,0x0C,0x18,0x08,0x10,0x0A,0x12,0x7F,0x7F,0x08,0x10,0x18,0x30,0x18,0x58,0x2C,0x54,0x2A,0x54,0x4A,0x92,0x08,0x91,0x09,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xAA,0x4D,0x00,0x00,0x0C,0x02,0x09,0xFF,0x08,0x10,0x7F,0x10,0x18,0x20,0x18,0x38,0x2C,0x50,0x2A,0x54,0x2A,0x92,0x48,0x93,0x09,0x11,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xAA,0x4E,0x00,0x00,0x00,0xC0,0x00,0x82,0x3F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x08,0x87,0x30,0x82,0x00,0x80,0x00,0x00,0x12,0x22,0x12,0x22,0x21,0x11,0x21,0x11},
{0xAA,0x4F,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0x80,0x7E,0x80,0x18,0x82,0x18,0xFF,0x2C,0xA2,0x2A,0xA2,0x2A,0x92,0x48,0x94,0x08,0x88,0x09,0x14,0x09,0x14,0x09,0x22,0x0A,0x41},
{0xAA,0x50,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x20,0x7C,0x20,0x10,0x20,0x30,0x20,0x30,0x24,0x59,0xFE,0x54,0x20,0x54,0x20,0x10,0x20,0x10,0x20,0x10,0x22,0x13,0xFF,0x10,0x00},
{0xAA,0x51,0x00,0x00,0x18,0x10,0x10,0x78,0x10,0x10,0x7C,0xC8,0x10,0x88,0x30,0x84,0x39,0x34,0x55,0x22,0x55,0x21,0x52,0x40,0x10,0x48,0x10,0x44,0x10,0x9A,0x13,0xE3,0x11,0x01},
{0xAA,0x52,0x00,0x00,0x0C,0x04,0x08,0x8E,0x08,0xF0,0x7E,0x80,0x08,0x80,0x18,0x82,0x18,0xFF,0x2C,0x88,0x2A,0x88,0x4A,0x88,0x08,0x88,0x09,0x08,0x09,0x08,0x09,0x08,0x0A,0x08},
{0xAA,0x53,0x00,0x00,0x0C,0xC0,0x08,0x80,0x08,0x84,0x7E,0xFE,0x08,0x90,0x19,0x10,0x19,0x10,0x28,0x12,0x2D,0xFF,0x4A,0x10,0x0A,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xAA,0x54,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x7E,0x7F,0x08,0x84,0x18,0xC4,0x19,0x44,0x2C,0x28,0x2A,0x28,0x4A,0x10,0x08,0x28,0x08,0x28,0x08,0x44,0x08,0x84,0x09,0x03},
{0xAA,0x55,0x00,0x00,0x0C,0x0C,0x08,0x88,0x08,0x68,0x7E,0x28,0x08,0x08,0x18,0x88,0x1C,0x68,0x2A,0x2A,0x2A,0x0F,0x48,0x38,0x09,0xC8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},
{0xAA,0x56,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x04,0x7E,0x68,0x08,0x10,0x18,0x02,0x19,0xFF,0x2C,0x12,0x2A,0x14,0x4A,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0xF0,0x08,0x20},
{0xAA,0x57,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x10,0x7E,0x54,0x08,0x52,0x18,0x93,0x19,0x11,0x2C,0x10,0x2A,0x73,0x4A,0x22,0x08,0x04,0x08,0x08,0x08,0x30,0x08,0xC0,0x0B,0x00},
{0xAA,0x58,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAA,0x59,0x00,0x00,0x02,0x30,0x27,0x20,0x38,0x21,0x20,0x3F,0x22,0x41,0x3F,0x5A,0x24,0x90,0x24,0x10,0x24,0x10,0x24,0x28,0x24,0x28,0x24,0x48,0x44,0x44,0x44,0x84,0x45,0x03},
{0xAA,0x5A,0x00,0x00,0x02,0x34,0x3F,0x22,0x00,0x22,0x00,0x20,0x7F,0xFF,0x00,0x20,0x06,0x20,0x34,0x20,0x25,0x20,0x27,0x90,0x24,0x12,0x24,0x0A,0x27,0xCA,0x7C,0x07,0x20,0x02},
{0xAA,0x5B,0x00,0x00,0x06,0x18,0x04,0x12,0x05,0xFF,0x34,0x10,0x27,0x90,0x24,0x12,0x24,0xFF,0x24,0x42,0x24,0x44,0x24,0x24,0x25,0xA8,0x2E,0x10,0x70,0x28,0x20,0x44,0x01,0x83},
{0xAA,0x5C,0x00,0x00,0x01,0x22,0x7F,0xBF,0x10,0x22,0x12,0x22,0x1F,0x42,0x12,0x4C,0x22,0x00,0x3A,0xFF,0x44,0x42,0x04,0x24,0x08,0x24,0x08,0x18,0x10,0x28,0x10,0x44,0x21,0x83},
{0xAA,0x5D,0x00,0x00,0x0C,0x82,0x08,0xFF,0x48,0x82,0x7E,0x82,0x40,0xFE,0x40,0x8A,0x40,0x88,0x40,0xFF,0x40,0x88,0x40,0x88,0x40,0x89,0x3C,0xA5,0x00,0xC5,0x03,0x83,0x01,0x01},
{0xAA,0x5E,0x00,0x00,0x10,0x00,0x1F,0xFC,0x10,0x00,0x27,0xF0,0x40,0x00,0x3F,0xF8,0x00,0x08,0x0D,0x88,0x10,0x68,0x6F,0xD9,0x04,0x49,0x04,0x45,0x08,0x45,0x13,0x83,0x21,0x01},
{0xAA,0x5F,0x00,0x00,0x20,0x60,0x10,0x40,0x10,0x44,0x07,0xFE,0x40,0x00,0x25,0x0C,0x29,0x08,0x09,0x08,0x10,0x90,0x10,0x90,0x60,0x90,0x20,0xA0,0x20,0x22,0x6F,0xFF,0x20,0x00},
{0xAA,0x60,0x00,0x00,0x20,0x80,0x10,0x60,0x10,0x22,0x07,0xFF,0x40,0x20,0x24,0x20,0x28,0x20,0x08,0x24,0x13,0xFE,0x10,0x20,0x60,0x20,0x20,0x20,0x20,0x22,0x67,0xFF,0x20,0x00},
{0xAA,0x61,0x00,0x00,0x21,0x80,0x10,0x60,0x10,0x00,0x41,0xE0,0x24,0x20,0x20,0x23,0x0B,0xA2,0x08,0xB4,0x10,0xA8,0x11,0x28,0x61,0x24,0x22,0x24,0x24,0x23,0x60,0xE0,0x20,0x40},
{0xAA,0x62,0x00,0x00,0x20,0x30,0x10,0x20,0x12,0x22,0x43,0xFF,0x22,0x02,0x24,0xC4,0x08,0x80,0x10,0x8C,0x10,0xB0,0x60,0xC0,0x20,0x80,0x20,0x82,0x60,0x82,0x60,0x83,0x20,0x7E},
{0xAA,0x63,0x00,0x00,0x20,0x40,0x10,0x36,0x10,0x14,0x02,0xC4,0x44,0x88,0x24,0x88,0x28,0x90,0x0A,0x94,0x12,0xA2,0x14,0xC1,0x64,0x89,0x21,0x88,0x22,0x88,0x2C,0x8C,0x00,0x78},
{0xAA,0x64,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x02,0x04,0x43,0xFC,0x26,0x04,0x2A,0xC0,0x0A,0x80,0x12,0x8C,0x12,0x90,0x62,0xE0,0x24,0x82,0x24,0x82,0x64,0x83,0x28,0x7E},
{0xAA,0x65,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x04,0x40,0x04,0x22,0x24,0x2B,0xF4,0x0A,0x24,0x12,0x24,0x12,0x24,0x63,0xE4,0x22,0x24,0x20,0x04,0x60,0x24,0x20,0x1C,0x00,0x08},
{0xAA,0x66,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x22,0x07,0xFF,0x40,0x20,0x24,0x20,0x28,0x20,0x0A,0x24,0x13,0xFE,0x12,0x04,0x62,0x04,0x22,0x04,0x22,0x04,0x63,0xFC,0x22,0x04},
{0xAA,0x67,0x00,0x00,0x20,0x60,0x10,0x40,0x12,0x40,0x44,0x42,0x24,0x7F,0x28,0x40,0x08,0x40,0x12,0x42,0x13,0xFF,0x62,0x02,0x22,0x02,0x22,0x02,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xAA,0x68,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x42,0x40,0x42,0x24,0x82,0x28,0x82,0x09,0x1C,0x12,0x08,0x10,0x02,0x63,0xFF,0x22,0x02,0x22,0x02,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xAA,0x69,0x00,0x00,0x20,0x30,0x12,0x22,0x13,0xFF,0x42,0x22,0x26,0x24,0x2A,0x20,0x0B,0xFE,0x12,0x84,0x12,0x84,0x62,0x48,0x22,0x50,0x24,0x30,0x64,0x50,0x68,0x8C,0x23,0x03},
{0xAA,0x6A,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x22,0x47,0xFF,0x20,0x20,0x28,0x24,0x0B,0xFE,0x10,0x60,0x10,0xB0,0x60,0xA8,0x21,0x28,0x21,0x24,0x66,0x23,0x20,0x20,0x00,0x20},
{0xAA,0x6B,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x24,0x43,0xFE,0x24,0x20,0x28,0x20,0x08,0x22,0x17,0xFF,0x10,0x40,0x60,0x40,0x20,0x88,0x20,0x84,0x61,0x3A,0x67,0xC3,0x22,0x01},
{0xAA,0x6C,0x00,0x00,0x20,0x4C,0x17,0xE8,0x10,0x48,0x42,0x48,0x23,0xC8,0x2A,0x08,0x0A,0x08,0x14,0x50,0x17,0xD0,0x24,0x54,0x60,0x52,0x20,0x92,0x20,0xA5,0x67,0x79,0x22,0x21},
{0xAA,0x6D,0x00,0x00,0x20,0x90,0x10,0x94,0x17,0xFE,0x40,0x94,0x22,0x94,0x2B,0xFC,0x0A,0x90,0x12,0x92,0x17,0xFF,0x14,0x92,0x64,0x92,0x21,0x1E,0x21,0x14,0x62,0x10,0x24,0x10},
{0xAA,0x6E,0x00,0x00,0x23,0x6C,0x12,0x48,0x12,0x48,0x42,0x48,0x2A,0x4A,0x2F,0xFF,0x0A,0x48,0x12,0x48,0x12,0x48,0x12,0x78,0x62,0x48,0x22,0x48,0x22,0x02,0x63,0xFF,0x22,0x00},
{0xAA,0x6F,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x20,0x42,0x22,0x2B,0xFF,0x2A,0x22,0x0A,0x22,0x12,0x22,0x13,0xFE,0x12,0x22,0x62,0x22,0x22,0x22,0x22,0x22,0x63,0xFE,0x22,0x02},
{0xAA,0x70,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x42,0x04,0x26,0x04,0x2A,0x04,0x0A,0x04,0x13,0xFC,0x12,0x94,0x60,0x90,0x20,0x92,0x21,0x12,0x61,0x12,0x62,0x13,0x2C,0x0E},
{0xAA,0x71,0x00,0x00,0x21,0x08,0x11,0xFC,0x11,0x08,0x45,0x08,0x25,0x08,0x29,0xF8,0x09,0x08,0x11,0x08,0x11,0x08,0x61,0xF8,0x21,0x08,0x21,0x08,0x61,0x0A,0x6F,0xFF,0x20,0x00},
{0xAA,0x72,0x00,0x00,0x22,0x01,0x13,0xFF,0x12,0x51,0x42,0x51,0x26,0x51,0x2A,0x51,0x0A,0x51,0x12,0x55,0x12,0x95,0x62,0x8D,0x23,0x01,0x22,0x01,0x62,0x01,0x63,0xFF,0x22,0x01},
{0xAA,0x73,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x02,0x42,0x32,0x26,0x22,0x2A,0x22,0x0A,0x62,0x12,0x52,0x12,0x52,0x62,0x8A,0x22,0x8A,0x22,0x02,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xAA,0x74,0x00,0x00,0x20,0x30,0x10,0x20,0x11,0x24,0x41,0xFE,0x25,0x24,0x29,0x24,0x09,0x24,0x11,0x24,0x17,0xFF,0x60,0x50,0x20,0x50,0x20,0x88,0x60,0x88,0x61,0x04,0x26,0x03},
{0xAA,0x75,0x00,0x00,0x20,0xD8,0x10,0x88,0x10,0x88,0x41,0x08,0x25,0x04,0x2A,0x03,0x08,0x00,0x11,0x04,0x11,0xFE,0x61,0x04,0x21,0x04,0x21,0x04,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xAA,0x76,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x48,0x44,0x44,0x24,0x8E,0x2B,0xF3,0x09,0x01,0x10,0x00,0x11,0x04,0x61,0xFE,0x21,0x04,0x21,0x04,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xAA,0x77,0x00,0x00,0x21,0x80,0x11,0x04,0x11,0xFE,0x42,0x04,0x2A,0x04,0x2D,0xF4,0x09,0x14,0x11,0x14,0x11,0xF4,0x61,0x04,0x21,0x18,0x21,0x02,0x61,0x02,0x61,0x03,0x20,0xFE},
{0xAA,0x78,0x00,0x00,0x20,0x0C,0x10,0x3E,0x17,0xC0,0x40,0x30,0x24,0x20,0x28,0x24,0x0B,0xFE,0x10,0x08,0x10,0x10,0x60,0x20,0x20,0x40,0x26,0x80,0x65,0x00,0x64,0xC3,0x28,0x3C},
{0xAA,0x79,0x00,0x00,0x20,0x30,0x10,0x20,0x12,0x42,0x43,0xFF,0x26,0x02,0x2A,0x02,0x0A,0x02,0x12,0x02,0x13,0xFE,0x62,0x02,0x22,0x02,0x22,0x02,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xAA,0x7A,0x00,0x00,0x20,0x30,0x10,0x20,0x10,0x24,0x43,0xFE,0x28,0x20,0x28,0x22,0x17,0xFF,0x10,0x60,0x10,0xB0,0x60,0xA8,0x21,0x28,0x21,0x24,0x66,0x23,0x60,0x20,0x20,0x20},
{0xAA,0x7B,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x42,0x04,0x23,0xFC,0x2A,0x14,0x0A,0x10,0x12,0x12,0x13,0xFF,0x62,0x10,0x22,0x09,0x22,0x09,0x62,0xE5,0x6F,0x03,0x24,0x01},
{0xAA,0x7C,0x00,0x00,0x20,0x0C,0x11,0x3E,0x11,0xD0,0x41,0x10,0x25,0x12,0x29,0xFF,0x09,0x10,0x11,0x08,0x11,0x08,0x61,0x69,0x27,0x85,0x22,0x05,0x60,0x13,0x67,0xF9,0x20,0x00},
{0xAA,0x7D,0x00,0x00,0x22,0xC0,0x13,0x12,0x12,0x1F,0x42,0x52,0x26,0x52,0x2A,0x52,0x0A,0x52,0x12,0x52,0x12,0xD2,0x67,0x52,0x22,0x5E,0x20,0x94,0x60,0x90,0x21,0x10,0x02,0x10},
{0xAA,0x7E,0x00,0x00,0x20,0x20,0x10,0x60,0x10,0x50,0x40,0x88,0x29,0x04,0x2E,0xFB,0x08,0x00,0x10,0x04,0x13,0xFE,0x60,0x44,0x20,0x44,0x20,0x5C,0x60,0x48,0x20,0x40,0x00,0x40},
{0xAA,0xA1,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x15,0xFF,0x54,0x00,0x58,0x88,0x50,0xFC,0x50,0x88,0x10,0x88,0x18,0x88,0x24,0x88,0x24,0x89,0x21,0x09,0x41,0x09,0x42,0x07},
{0xAA,0xA2,0x00,0x00,0x00,0xC0,0x08,0x86,0x08,0x84,0x31,0x68,0x01,0x18,0x06,0x06,0x38,0xC2,0x00,0x80,0x08,0x8C,0x08,0x88,0x31,0x50,0x01,0x20,0x02,0x18,0x0C,0x07,0x70,0x02},
{0xAA,0xA3,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x10,0x16,0xD4,0x54,0x92,0x58,0x93,0x51,0x11,0x52,0x10,0x18,0x73,0x14,0x22,0x22,0x04,0x22,0x08,0x20,0x30,0x40,0xC0,0x07,0x00},
{0xAA,0xA4,0x00,0x00,0x18,0xC0,0x10,0x80,0x10,0x82,0x16,0xFF,0x54,0x82,0x59,0x34,0x51,0x20,0x52,0x20,0x18,0x20,0x14,0x50,0x24,0x50,0x20,0x88,0x20,0x88,0x41,0x07,0x06,0x02},
{0xAA,0xA5,0x00,0x00,0x01,0x80,0x01,0x08,0x03,0xFC,0x0C,0x10,0x32,0x60,0x09,0x80,0x06,0x00,0x78,0xC0,0x04,0x8C,0x08,0x88,0x31,0x50,0x01,0x20,0x02,0x18,0x0C,0x07,0x70,0x02},
{0xAA,0xA6,0x00,0x00,0x02,0x00,0x27,0x42,0x3A,0x7F,0x2A,0x52,0x2A,0x52,0x2A,0x7E,0x2A,0x42,0x2A,0x40,0x2A,0x41,0x29,0x41,0x29,0x3E,0x28,0x80,0x48,0x60,0x48,0x18,0x48,0x07},
{0xAA,0xA7,0x00,0x00,0x00,0x7E,0x1F,0x80,0x11,0x08,0x20,0xC6,0x40,0x42,0x1F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x1F,0xF8,0x00,0x88,0x00,0x80,0x00,0x80,0x07,0x80,0x01,0x00},
{0xAA,0xA8,0x00,0x00,0x0C,0x30,0x10,0x0C,0x66,0x32,0x09,0xC0,0x03,0x20,0x0C,0x18,0x70,0x07,0x1F,0xF8,0x10,0x88,0x10,0x88,0x1F,0xF8,0x10,0x0A,0x10,0x02,0x10,0x03,0x0F,0xFE},
{0xAA,0xA9,0x00,0x00,0x36,0x82,0x24,0xFF,0x24,0x80,0x24,0x80,0x3E,0x82,0x20,0xFF,0x20,0xA2,0x24,0xA2,0x3E,0x94,0x24,0x94,0x24,0x88,0x24,0x94,0x45,0x14,0x45,0x22,0x45,0x41},
{0xAA,0xAA,0x00,0x00,0x0C,0x60,0x28,0x40,0x28,0x42,0x3E,0x7F,0x28,0x44,0x48,0x84,0x4A,0xC4,0x0C,0xA8,0x79,0x28,0x28,0x10,0x08,0x10,0x08,0x28,0x08,0x24,0x08,0x47,0x09,0x82},
{0xAA,0xAB,0x00,0x00,0x0C,0x60,0x28,0x40,0x28,0x42,0x3E,0xFF,0x28,0xAA,0x49,0x2A,0x48,0x4A,0x0A,0x52,0x0C,0x92,0x78,0xA2,0x29,0x22,0x08,0x44,0x08,0x84,0x08,0x38,0x08,0x10},
{0xAA,0xAC,0x00,0x00,0x06,0x18,0x34,0x10,0x24,0x14,0x24,0x13,0x3C,0x10,0x25,0xFF,0x04,0x10,0x04,0x30,0x7C,0x28,0x24,0x28,0x24,0x48,0x24,0x44,0x44,0x84,0x44,0x82,0x05,0x01},
{0xAA,0xAD,0x00,0x00,0x4D,0x02,0x29,0xFF,0x11,0x22,0x11,0x22,0x29,0xFE,0x49,0x22,0x0D,0x22,0x15,0x22,0x15,0xFE,0x25,0x22,0x44,0x20,0x04,0x20,0x44,0x20,0x38,0x20,0x10,0x20},
{0xAA,0xAE,0x00,0x00,0x4C,0x84,0x28,0xFE,0x10,0x84,0x10,0x84,0x28,0x84,0x48,0xFC,0x0C,0x84,0x14,0x84,0x14,0x84,0x24,0xFC,0x44,0x84,0x04,0x84,0x44,0x84,0x3B,0xFF,0x10,0x00},
{0xAA,0xAF,0x00,0x00,0x4C,0xC0,0x28,0x80,0x10,0x82,0x11,0xFF,0x29,0x02,0x4A,0x02,0x0C,0xFA,0x14,0x8A,0x14,0x8A,0x24,0xFA,0x44,0x02,0x04,0x02,0x44,0x04,0x38,0x38,0x10,0x10},
{0xAA,0xB0,0x00,0x00,0x4C,0x0C,0x29,0x3E,0x11,0xE4,0x11,0x24,0x29,0x24,0x49,0x24,0x0D,0x24,0x15,0x24,0x15,0x24,0x25,0x24,0x45,0x22,0x05,0x32,0x45,0x6A,0x3A,0x09,0x12,0x01},
{0xAA,0xB1,0x00,0x00,0x08,0x04,0x7C,0xFE,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x02,0x7D,0xFF,0x10,0x48,0x10,0x48,0x14,0x48,0x18,0x48,0x70,0x89,0x20,0x89,0x01,0x09,0x06,0x07},
{0xAA,0xB2,0x00,0x00,0x08,0x04,0x7D,0xFE,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x7C,0x24,0x11,0xFE,0x10,0x20,0x12,0x20,0x1C,0x20,0x70,0x20,0x20,0x22,0x03,0xFF,0x00,0x00},
{0xAA,0xB3,0x00,0x00,0x08,0x30,0x7C,0x20,0x10,0x22,0x13,0xFF,0x10,0x04,0x7C,0x84,0x11,0x88,0x13,0x48,0x10,0x50,0x14,0x30,0x18,0x20,0x70,0x50,0x20,0x8C,0x01,0x07,0x06,0x02},
{0xAA,0xB4,0x00,0x00,0x08,0xC0,0x7C,0x80,0x10,0x82,0x10,0xFF,0x10,0x84,0x11,0x84,0x7D,0x44,0x12,0x48,0x10,0x28,0x14,0x30,0x18,0x10,0x70,0x28,0x20,0x44,0x00,0x87,0x03,0x02},
{0xAA,0xB5,0x00,0x00,0x04,0x82,0x7E,0xFF,0x10,0x82,0x10,0x82,0x10,0xFE,0x14,0x82,0x7E,0x82,0x10,0x82,0x10,0xFE,0x12,0x82,0x1C,0x82,0x71,0x02,0x21,0x12,0x02,0x0E,0x04,0x04},
{0xAA,0xB6,0x00,0x00,0x00,0xDB,0x44,0x92,0x7E,0x92,0x54,0x92,0x54,0x92,0x54,0x92,0x7C,0x92,0x54,0x92,0x54,0x92,0x54,0x92,0x7C,0x92,0x45,0x12,0x01,0x12,0x02,0x12,0x04,0x02},
{0xAA,0xB7,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x28,0x30,0x28,0x20,0x0B,0x23,0x0A,0x22,0x1A,0x22,0x6A,0x22,0x4A,0x22,0x0A,0x22,0x13,0xFE,0x12,0x02,0x20,0x00},
{0xAA,0xB8,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x84,0x28,0xFE,0x09,0x00,0x0A,0x08,0x18,0xFC,0x68,0x10,0x48,0x20,0x08,0x42,0x10,0x82,0x10,0x83,0x20,0x7E},
{0xAA,0xB9,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0xC0,0x28,0x88,0x08,0xFC,0x09,0x10,0x19,0x10,0x6A,0x20,0x48,0x20,0x08,0x50,0x10,0x88,0x11,0x04,0x26,0x03},
{0xAA,0xBA,0x00,0x00,0x0C,0x60,0x08,0x40,0x52,0x42,0x7E,0x7F,0x42,0x82,0x42,0x82,0x43,0x02,0x7E,0x42,0x42,0x32,0x42,0x12,0x42,0x02,0x42,0x04,0x7E,0x44,0x42,0x38,0x00,0x10},
{0xAA,0xBB,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x03,0x80,0x11,0x08,0x1F,0xFC,0x12,0x48,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF},
{0xAA,0xBC,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0x00,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAA,0xBD,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x04,0x88,0x07,0xFC,0x34,0x08,0x27,0xF8,0x24,0x08,0x27,0xF8,0x24,0x08,0x27,0xF8,0x20,0x02,0x3F,0xFF,0x20,0x00},
{0xAA,0xBE,0x00,0x00,0x18,0x00,0x10,0x00,0x12,0x42,0x3F,0x7F,0x24,0x42,0x44,0x42,0x05,0x42,0x7F,0xC2,0x04,0x42,0x0A,0x42,0x0A,0x42,0x11,0x42,0x11,0x7E,0x20,0x42,0x40,0x00},
{0xAA,0xBF,0x00,0x00,0x02,0x30,0x7F,0x20,0x08,0x22,0x08,0x3F,0x12,0x42,0x1E,0x42,0x32,0xA4,0x53,0x24,0x12,0x28,0x12,0x08,0x12,0x10,0x1E,0x10,0x12,0x20,0x00,0x40,0x00,0x80},
{0xAA,0xC0,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x10,0x02,0x10,0x7F,0x10,0x08,0x14,0x08,0xFE,0x2A,0x10,0x2A,0x10,0x2A,0x10,0x2A,0x10,0x4A,0x10,0x48,0x12,0x09,0xFF,0x08,0x00},
{0xAA,0xC1,0x00,0x00,0x04,0x00,0x3E,0x42,0x00,0x7F,0x02,0x42,0x7F,0x42,0x08,0x42,0x08,0x42,0x2A,0x7E,0x2A,0x42,0x2A,0x40,0x4A,0x40,0x4A,0x42,0x4A,0x42,0x08,0x43,0x08,0x3E},
{0xAA,0xC2,0x00,0x00,0x02,0x00,0x3F,0x22,0x00,0x3F,0x01,0x22,0x7F,0xA2,0x04,0x24,0x04,0x24,0x35,0xA2,0x25,0x21,0x25,0x21,0x25,0x21,0x45,0x2E,0x45,0x24,0x04,0x20,0x04,0x20},
{0xAA,0xC3,0x00,0x00,0x00,0xF8,0x1F,0x80,0x00,0x84,0x7F,0xFE,0x00,0x80,0x1F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x1F,0xF8,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAA,0xC4,0x00,0x00,0x0E,0x18,0x78,0x10,0x08,0x10,0x08,0xD3,0x7E,0x92,0x18,0x92,0x18,0x92,0x2C,0x92,0x2A,0x92,0x2A,0x92,0x48,0x92,0x08,0x92,0x08,0xFE,0x08,0x82,0x08,0x00},
{0xAA,0xC5,0x00,0x00,0x01,0x80,0x21,0x04,0x3F,0xFE,0x20,0x04,0x46,0x68,0x04,0x42,0x08,0x43,0x70,0x3E,0x00,0x00,0x1F,0xF8,0x01,0x00,0x01,0x00,0x01,0x04,0x7F,0xFE,0x00,0x00},
{0xAA,0xC6,0x00,0x00,0x00,0xC0,0x20,0x84,0x3F,0xFE,0x26,0x44,0x44,0x41,0x18,0x3F,0x60,0x00,0x1F,0xF8,0x00,0x08,0x0F,0xF8,0x08,0x00,0x1F,0xFC,0x10,0x04,0x00,0x18,0x00,0xE0},
{0xAA,0xC7,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x28,0x50,0x26,0x4C,0x42,0x84,0x00,0x00,0x00,0x10,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x00},
{0xAA,0xC8,0x00,0x00,0x18,0x03,0x10,0x32,0x26,0x22,0x64,0x22,0x18,0x22,0x0C,0x22,0x12,0x22,0x7D,0x22,0x49,0x26,0x0C,0x3A,0x2A,0x62,0x2A,0x22,0x4A,0x02,0x08,0x02,0x08,0x02},
{0xAA,0xC9,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x24,0x32,0x22,0x22,0x2F,0xFA,0x20,0x82,0x24,0x82,0x27,0xFA,0x24,0x02,0x24,0x02,0x23,0xF2,0x20,0x02,0x20,0x0E,0x20,0x04},
{0xAA,0xCA,0x00,0x00,0x10,0x30,0x0C,0x20,0x04,0x48,0x3F,0xFC,0x01,0x00,0x1F,0xF8,0x01,0x00,0x7F,0xFE,0x04,0x40,0x04,0x40,0x04,0x40,0x08,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xAA,0xCB,0x00,0x00,0x0C,0xCC,0x08,0x88,0x78,0x8F,0x08,0x88,0x08,0x08,0x00,0xC0,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xAA,0xCC,0x00,0x00,0x01,0x80,0x01,0x06,0x1F,0xE4,0x01,0x08,0x01,0x12,0x7F,0xFF,0x00,0x80,0x03,0x20,0x0C,0x10,0x77,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08},
{0xAA,0xCD,0x00,0x00,0x24,0x18,0x3C,0x12,0x25,0xFF,0x24,0x10,0x3C,0x92,0x24,0xFF,0x24,0x92,0x24,0x92,0x3C,0x92,0x24,0x92,0x24,0x92,0x24,0x9E,0x44,0x94,0x5C,0x10,0x48,0x10},
{0xAA,0xCE,0x00,0x00,0x25,0x04,0x3D,0xFE,0x25,0x24,0x25,0x24,0x3D,0x24,0x25,0x24,0x25,0x24,0x25,0xFC,0x3D,0x04,0x25,0x00,0x25,0x00,0x25,0x02,0x45,0x02,0x5D,0x03,0x48,0xFE},
{0xAA,0xCF,0x00,0x00,0x24,0x30,0x3C,0x20,0x24,0x22,0x25,0xFF,0x3C,0x20,0x24,0x24,0x25,0xFE,0x24,0x84,0x3C,0x44,0x24,0x48,0x24,0x30,0x24,0x10,0x44,0x28,0x5C,0x47,0x49,0x82},
{0xAA,0xD0,0x00,0x00,0x24,0x30,0x3C,0x20,0x24,0x22,0x25,0xFF,0x3C,0x40,0x24,0x40,0x24,0x98,0x24,0x90,0x3C,0x90,0x25,0x20,0x25,0x24,0x26,0x44,0x44,0x4A,0x5C,0xF1,0x48,0x41},
{0xAA,0xD1,0x00,0x00,0x24,0x88,0x3C,0xFC,0x24,0x88,0x24,0x88,0x3C,0x89,0x24,0x87,0x25,0x00,0x24,0x04,0x3D,0xFE,0x24,0x84,0x24,0x48,0x24,0x30,0x44,0x28,0x5C,0x44,0x49,0x83},
{0xAA,0xD2,0x00,0x00,0x24,0x30,0x3E,0x26,0x24,0x38,0x25,0xE0,0x3C,0x20,0x24,0x20,0x25,0xA6,0x25,0x24,0x3D,0x24,0x25,0xFC,0x25,0x24,0x24,0x20,0x44,0x22,0x5C,0x23,0x48,0x1E},
{0xAA,0xD3,0x00,0x00,0x10,0x7E,0x1F,0x80,0x10,0x00,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x00,0x17,0xFC,0x14,0x04,0x17,0xFC,0x14,0x04,0x27,0xFC,0x24,0x04,0x24,0x1C,0x44,0x08},
{0xAA,0xD4,0x00,0x00,0x3C,0x78,0x03,0x80,0x04,0x60,0x39,0x98,0x01,0x02,0x7F,0xFF,0x02,0x00,0x07,0xF8,0x1C,0x08,0x67,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08,0x04,0x78,0x04,0x10},
{0xAA,0xD5,0x00,0x00,0x24,0x18,0x3E,0x10,0x24,0x12,0x25,0xFF,0x3C,0x40,0x24,0x44,0x24,0x7E,0x24,0x44,0x3C,0x44,0x24,0x44,0x24,0x44,0x24,0x84,0x44,0x84,0x5C,0xB8,0x49,0x10},
{0xAA,0xD6,0x00,0x00,0x00,0xC0,0x0C,0x90,0x08,0xF8,0x08,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x78,0x08,0x10},
{0xAA,0xD7,0x00,0x00,0x42,0x18,0x7F,0x10,0x48,0x10,0x48,0x10,0x4A,0x10,0x7F,0x10,0x42,0x10,0x42,0x30,0x7E,0x28,0x4A,0x28,0x48,0x48,0x48,0x44,0x7F,0x44,0x40,0x82,0x01,0x01},
{0xAA,0xD8,0x00,0x00,0x2D,0x80,0x31,0x04,0x21,0x3E,0x21,0x04,0x29,0x04,0x3D,0x3C,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x02,0x80,0x02,0x60,0x04,0x18,0x18,0x07,0x60,0x02},
{0xAA,0xD9,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x30,0x08,0x0C,0x17,0xF3,0x60,0x80,0x00,0x84,0x7F,0xFE,0x00,0x80,0x08,0x88,0x0F,0xFC,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAA,0xDA,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x04,0x00,0x04,0x08,0x07,0xFC,0x04,0x08,0x08,0x08,0x08,0x08,0x10,0xF0,0x60,0x20},
{0xAA,0xDB,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x80,0x01,0x08,0x3F,0xFC,0x00,0x08,0x00,0x30,0x00,0x40,0x01,0x80,0x36,0x00,0x28,0x00,0x46,0x03,0x41,0xFC},
{0xAA,0xDC,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xAA,0xDD,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x08,0x3F,0xFC,0x21,0x08,0x21,0x08,0x21,0x08,0x3F,0xF8,0x20,0x08,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xAA,0xDE,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x3F,0xFC,0x00,0x40,0x08,0x44,0x1F,0xFE,0x10,0xC0,0x03,0x40,0x0C,0x40,0x70,0x40,0x01,0xC0,0x00,0x80},
{0xAA,0xDF,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x07,0xE0,0x04,0x22,0x04,0x23,0x38,0x1E,0x00,0x00,0x1F,0xF8,0x04,0x10,0x02,0x60,0x01,0x80,0x06,0x70,0x78,0x0E},
{0xAA,0xE0,0x00,0x00,0x04,0x20,0x7F,0xFF,0x04,0x20,0x00,0x00,0x10,0x7C,0x1F,0x80,0x10,0x00,0x10,0x04,0x1F,0xFE,0x10,0x40,0x10,0x40,0x10,0x40,0x20,0x40,0x20,0x40,0x40,0x40},
{0xAA,0xE1,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x0C,0xC0,0x08,0x80,0x10,0x98,0x18,0xB0,0x30,0xC0,0x51,0x80,0x12,0x82,0x10,0x82,0x10,0x83,0x10,0x7E},
{0xAA,0xE2,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x06,0xC0,0x04,0x20,0x08,0x18,0x10,0x07,0x6F,0xF2,0x02,0x10,0x02,0x10,0x04,0x10,0x04,0x10,0x08,0xE0,0x30,0x40},
{0xAA,0xE3,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x80,0x02,0x60,0x04,0x18,0x18,0x07,0x66,0x32,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x20},
{0xAA,0xE4,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x04,0x20,0x00,0x80,0x06,0x40,0x04,0x60,0x14,0x24,0x14,0x02,0x24,0x12,0x24,0x11,0x44,0x19,0x03,0xF0,0x00,0x00},
{0xAA,0xE5,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x02,0x20,0x02,0x10,0x04,0xF8,0x3F,0x0C,0x10,0x04},
{0xAA,0xE6,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x02,0x7F,0xFF,0x00,0x80,0x01,0x80,0x02,0x90,0x04,0x8C,0x18,0x86,0x60,0x82,0x00,0x80,0x00,0x80,0x00,0x80},
{0xAA,0xE7,0x00,0x00,0x04,0x10,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x00,0x82,0x3F,0xFF,0x00,0x80,0x00,0x88,0x3F,0xFC,0x04,0x10,0x03,0x20,0x00,0xC0,0x03,0x20,0x0C,0x18,0x70,0x07},
{0xAA,0xE8,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x82,0x7F,0xFF,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x10,0xBC,0x10,0x88,0x00,0x80,0x00,0x80},
{0xAA,0xE9,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x00,0x80,0x18,0x80,0x10,0x88,0x10,0xFC,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x82,0x7F,0xFF},
{0xAA,0xEA,0x00,0x00,0x01,0x10,0x01,0xF8,0x21,0x02,0x3F,0xFF,0x20,0x02,0x21,0x04,0x21,0xF0,0x2F,0x02,0x20,0xFE,0x20,0x00,0x23,0x30,0x22,0x20,0x42,0x22,0x44,0x23,0x58,0x1E},
{0xAA,0xEB,0x00,0x00,0x00,0x10,0x7F,0xF8,0x00,0x10,0x07,0x90,0x3C,0x10,0x04,0x10,0x3F,0x90,0x24,0x90,0x24,0x88,0x3F,0x88,0x04,0x09,0x04,0x85,0x07,0x45,0x7C,0x63,0x20,0x21},
{0xAA,0xEC,0x00,0x00,0x0C,0x00,0x08,0x02,0x08,0xFF,0x7E,0x22,0x02,0x22,0x04,0x22,0x08,0x22,0x1B,0x22,0x2C,0x22,0x4A,0x42,0x0A,0x42,0x08,0x42,0x08,0x82,0x08,0x9C,0x09,0x08},
{0xAA,0xED,0x00,0x00,0x00,0xC0,0x00,0x80,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x02,0x80,0x04,0x46,0x1C,0x58,0x64,0x20,0x05,0xA0,0x06,0x18,0x38,0x07,0x10,0x02},
{0xAA,0xEE,0x00,0x00,0x0C,0x30,0x09,0x20,0x7F,0xA0,0x08,0x20,0x7F,0x20,0x49,0x20,0x7F,0x20,0x49,0x20,0x7F,0x20,0x08,0x20,0x09,0x22,0x7F,0xA2,0x08,0x22,0x08,0x23,0x08,0x1E},
{0xAA,0xEF,0x00,0x00,0x22,0xD2,0x1B,0x1F,0x02,0x12,0x42,0x12,0x32,0x12,0x02,0x12,0x02,0x12,0x12,0x52,0x7A,0x92,0x17,0x1E,0x12,0x14,0x10,0x10,0x28,0x10,0x26,0x03,0x41,0xFC},
{0xAA,0xF0,0x00,0x00,0x21,0x02,0x19,0xFF,0x01,0x00,0x41,0x04,0x31,0xFE,0x01,0x44,0x01,0x24,0x11,0x28,0x79,0x10,0x11,0x28,0x12,0x28,0x12,0x46,0x18,0x80,0x66,0x03,0x41,0xFC},
{0xAA,0xF1,0x00,0x00,0x20,0x0C,0x19,0x1E,0x01,0xE0,0x41,0x00,0x31,0x02,0x01,0xFF,0x01,0x08,0x11,0x08,0x79,0x08,0x11,0x08,0x12,0x08,0x12,0x08,0x18,0x08,0x66,0x03,0x41,0xFC},
{0xAA,0xF2,0x00,0x00,0x01,0x22,0x7F,0xBF,0x11,0x22,0x11,0x22,0x11,0x24,0x21,0x24,0x2E,0x22,0x44,0x22,0x21,0x21,0x3F,0xA1,0x21,0x21,0x21,0x2E,0x21,0x24,0x3F,0x20,0x21,0x20},
{0xAA,0xF3,0x00,0x00,0x21,0xD2,0x3E,0x1F,0x22,0x12,0x22,0x12,0x22,0x94,0x3F,0xD4,0x22,0x12,0x22,0x12,0x21,0x51,0x2D,0x51,0x71,0x51,0x20,0xDE,0x02,0x54,0x7F,0x10,0x00,0x10},
{0xAA,0xF4,0x00,0x00,0x23,0xA2,0x3C,0x3F,0x20,0x22,0x20,0x22,0x21,0x24,0x3F,0xA4,0x22,0x22,0x22,0x22,0x22,0x21,0x22,0xA1,0x27,0x21,0x78,0x2E,0x20,0x24,0x00,0x20,0x00,0x20},
{0xAA,0xF5,0x00,0x00,0x0A,0x12,0x0A,0x1F,0x0A,0x12,0x0A,0x12,0x0A,0x94,0x7B,0xD4,0x0A,0x12,0x0A,0x12,0x0A,0x11,0x1A,0x11,0x6A,0x51,0x4A,0x5E,0x0A,0x54,0x09,0xD0,0x08,0x10},
{0xAA,0xF6,0x00,0x00,0x00,0x0C,0x00,0x7E,0x1F,0x88,0x10,0x86,0x10,0x62,0x60,0xA0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xAA,0xF7,0x00,0x00,0x01,0x80,0x03,0x40,0x02,0x20,0x04,0x10,0x08,0x0C,0x17,0xF3,0x60,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x10,0x98,0x0C,0x90,0x04,0xA2,0x7F,0xFF},
{0xAA,0xF8,0x00,0x00,0x04,0x08,0x07,0xFC,0x04,0x00,0x07,0xF8,0x04,0x00,0x07,0xF8,0x04,0x02,0x7F,0xFF,0x09,0x00,0x08,0x86,0x08,0x58,0x09,0xA0,0x0E,0x18,0x78,0x07,0x20,0x02},
{0xAA,0xF9,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x21,0x42,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x1E,0x20,0x04},
{0xAA,0xFA,0x00,0x00,0x01,0x80,0x12,0x00,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x88,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xAA,0xFB,0x00,0x00,0x48,0x30,0x7C,0x20,0x49,0x22,0x49,0xFF,0x51,0x02,0x52,0x64,0x48,0x40,0x48,0x40,0x44,0x46,0x44,0x58,0x44,0x60,0x78,0x42,0x50,0x42,0x40,0x43,0x40,0x3E},
{0xAA,0xFC,0x00,0x00,0x48,0x02,0x7B,0xFF,0x48,0x04,0x48,0x04,0x51,0x24,0x51,0xF4,0x49,0x24,0x49,0x24,0x45,0x24,0x45,0xE4,0x45,0x24,0x78,0x04,0x50,0x04,0x40,0x1C,0x40,0x08},
{0xAA,0xFD,0x00,0x00,0x48,0x84,0x7C,0xFE,0x48,0x84,0x48,0x84,0x50,0x84,0x50,0xFC,0x48,0x84,0x48,0x84,0x44,0x84,0x44,0xFC,0x44,0x84,0x78,0x84,0x50,0x84,0x43,0xFF,0x40,0x00},
{0xAA,0xFE,0x00,0x00,0x48,0xC6,0x7C,0x84,0x48,0x84,0x49,0x3F,0x51,0x04,0x53,0x84,0x55,0x24,0x49,0x24,0x49,0x14,0x45,0x14,0x45,0x04,0x79,0x04,0x51,0x04,0x41,0x1C,0x41,0x08},
{0xAB,0x40,0x00,0x00,0x48,0x18,0x7C,0x10,0x49,0x12,0x49,0xFF,0x51,0x12,0x51,0x14,0x49,0x10,0x49,0xFE,0x45,0x44,0x45,0x24,0x79,0x28,0x52,0x10,0x42,0x28,0x42,0x44,0x44,0x83},
{0xAB,0x41,0x00,0x00,0x06,0x30,0x04,0x60,0x08,0x40,0x08,0x84,0x1F,0xFE,0x28,0x40,0x48,0x44,0x0F,0xFE,0x08,0x40,0x08,0x44,0x0F,0xFE,0x08,0x40,0x08,0x42,0x0F,0xFF,0x08,0x00},
{0xAB,0x42,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x82,0x28,0xA2,0x26,0x9A,0x22,0x8A,0x20,0xA2,0x28,0x9A,0x26,0x8A,0x22,0x82,0x20,0x9E,0x20,0x84},
{0xAB,0x43,0x00,0x00,0x00,0x80,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x78,0x08,0x10},
{0xAB,0x44,0x00,0x00,0x03,0x60,0x02,0x40,0x02,0x44,0x7E,0x7E,0x02,0x40,0x02,0x44,0x3E,0x7E,0x02,0x40,0x03,0x40,0x0E,0x42,0x72,0x7F,0x24,0x40,0x04,0x40,0x08,0x40,0x10,0x40},
{0xAB,0x45,0x00,0x00,0x00,0x02,0x7F,0xFF,0x08,0x00,0x08,0x00,0x1F,0x04,0x01,0x7E,0x79,0x44,0x49,0x44,0x49,0x28,0x79,0x28,0x01,0x10,0x0E,0x28,0x04,0xC6,0x00,0x00,0x7F,0xFF},
{0xAB,0x46,0x00,0x00,0x01,0x80,0x01,0x08,0x3F,0xFC,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x20,0x02,0x3F,0xFF,0x40,0x02,0x5F,0xF8,0x00,0x80,0x00,0x80,0x07,0x80,0x01,0x00},
{0xAB,0x47,0x00,0x00,0x01,0x80,0x01,0x04,0x7F,0xFE,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x20,0x04,0x3F,0xFE,0x20,0x04,0x46,0x68,0x04,0x40,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xAB,0x48,0x00,0x00,0x0C,0x08,0x09,0xFC,0x08,0x00,0x10,0x02,0x1B,0xFF,0x30,0x00,0x51,0xFC,0x10,0x00,0x11,0xFC,0x10,0x00,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAB,0x49,0x00,0x00,0x0D,0xF8,0x08,0x08,0x0B,0xFE,0x10,0x08,0x11,0xF8,0x34,0x02,0x57,0xFF,0x14,0x02,0x18,0x08,0x13,0xFC,0x11,0x08,0x10,0x90,0x10,0x60,0x11,0x98,0x16,0x07},
{0xAB,0x4A,0x00,0x00,0x0C,0x08,0x09,0xFC,0x08,0x08,0x10,0x0A,0x1B,0xFF,0x30,0x00,0x51,0x04,0x11,0xFE,0x12,0x20,0x14,0x22,0x13,0xFF,0x10,0x50,0x10,0x88,0x11,0x04,0x16,0x03},
{0xAB,0x4B,0x00,0x00,0x0C,0x04,0x0B,0xFE,0x08,0x20,0x12,0x24,0x1B,0xFE,0x32,0x24,0x53,0xFC,0x12,0x24,0x13,0xFC,0x12,0x24,0x10,0x20,0x11,0xA0,0x16,0x60,0x10,0x98,0x17,0x07},
{0xAB,0x4C,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0x22,0x13,0xFF,0x18,0x20,0x31,0xA6,0x51,0x24,0x12,0xAA,0x14,0xB1,0x10,0x20,0x10,0x50,0x10,0x50,0x10,0x88,0x11,0x04,0x16,0x03},
{0xAB,0x4D,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x04,0x10,0x68,0x1A,0x12,0x33,0xFF,0x52,0x22,0x13,0xFE,0x12,0x22,0x12,0x22,0x13,0xFE,0x12,0x22,0x12,0x22,0x12,0x2E,0x12,0x04},
{0xAB,0x4E,0x00,0x00,0x0C,0x30,0x09,0xA4,0x09,0x22,0x11,0x23,0x1A,0x21,0x31,0xFC,0x51,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0x1C,0x11,0x08},
{0xAB,0x4F,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x04,0x11,0x04,0x19,0x04,0x31,0xFC,0x51,0x24,0x10,0x20,0x13,0xFF,0x10,0x60,0x10,0xB0,0x10,0xAC,0x11,0x23,0x12,0x20,0x10,0x20},
{0xAB,0x50,0x00,0x00,0x0D,0x02,0x09,0xFF,0x09,0x02,0x11,0x02,0x19,0x02,0x31,0xFE,0x51,0x12,0x10,0x10,0x11,0x92,0x11,0x1F,0x11,0x10,0x11,0x10,0x12,0xD0,0x12,0x30,0x14,0x0F},
{0xAB,0x51,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x04,0x11,0x04,0x19,0x04,0x31,0xFC,0x51,0x24,0x10,0x20,0x12,0x42,0x13,0xFF,0x12,0x02,0x12,0x02,0x12,0x02,0x13,0xFE,0x12,0x02},
{0xAB,0x52,0x00,0x00,0x0C,0x3E,0x09,0xE4,0x09,0x12,0x11,0x12,0x1A,0x00,0x31,0xFE,0x50,0x04,0x10,0x08,0x10,0x12,0x13,0xFF,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xF0,0x10,0x20},
{0xAB,0x53,0x00,0x00,0x0C,0x60,0x08,0x48,0x08,0x84,0x13,0xFA,0x18,0x02,0x31,0x08,0x51,0xFC,0x11,0x20,0x12,0x22,0x17,0xFF,0x10,0x50,0x10,0x48,0x10,0x88,0x11,0x04,0x16,0x03},
{0xAB,0x54,0x00,0x00,0x0C,0x60,0x08,0x48,0x08,0x84,0x13,0xFA,0x18,0x90,0x31,0x11,0x56,0x0F,0x10,0x80,0x10,0xFC,0x11,0x04,0x16,0x88,0x10,0x50,0x10,0x28,0x10,0xC4,0x13,0x03},
{0xAB,0x55,0x00,0x00,0x0C,0xC8,0x08,0x84,0x09,0x26,0x11,0x32,0x1A,0x50,0x30,0x88,0x51,0x04,0x16,0x03,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAB,0x56,0x00,0x00,0x0D,0x80,0x09,0x04,0x0B,0xFE,0x12,0x00,0x15,0xFC,0x31,0x44,0x51,0x24,0x17,0xFF,0x11,0x04,0x11,0x44,0x12,0x24,0x13,0xFE,0x12,0x08,0x10,0x78,0x10,0x10},
{0xAB,0x57,0x00,0x00,0x0C,0xE1,0x0B,0x81,0x08,0x8D,0x10,0x89,0x17,0xE9,0x30,0x89,0x51,0x89,0x11,0xC9,0x12,0xA9,0x12,0xA9,0x14,0x89,0x10,0x81,0x10,0x81,0x10,0x87,0x10,0x82},
{0xAB,0x58,0x00,0x00,0x0C,0x18,0x08,0xD0,0x17,0x14,0x11,0x13,0x11,0x10,0x37,0xFF,0x51,0x10,0x11,0x56,0x11,0x94,0x17,0x14,0x15,0x08,0x11,0x09,0x11,0x15,0x17,0x63,0x12,0x01},
{0xAB,0x59,0x00,0x00,0x0C,0x1E,0x0B,0xE0,0x08,0x20,0x10,0x4C,0x19,0x88,0x30,0x50,0x50,0x24,0x10,0x42,0x13,0xFD,0x11,0x21,0x10,0x20,0x13,0x28,0x12,0x26,0x14,0x22,0x10,0x20},
{0xAB,0x5A,0x00,0x00,0x0A,0x02,0x0B,0xFF,0x0A,0x22,0x12,0x22,0x1B,0xFE,0x32,0x22,0x52,0x22,0x13,0xFE,0x12,0x22,0x10,0x20,0x13,0xFE,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x00},
{0xAB,0x5B,0x00,0x00,0x0C,0x84,0x08,0xFE,0x14,0x84,0x12,0x84,0x22,0x84,0x40,0xFC,0x00,0x84,0x0C,0x84,0x08,0x84,0x14,0xFC,0x12,0x84,0x22,0x84,0x40,0x84,0x03,0xFF,0x00,0x00},
{0xAB,0x5C,0x00,0x00,0x3F,0x80,0x00,0xC0,0x03,0x20,0x0C,0x18,0x33,0xE7,0x40,0x00,0x1F,0x06,0x11,0x34,0x1F,0x24,0x11,0x24,0x1F,0x24,0x11,0x24,0x11,0x04,0x17,0x1C,0x12,0x08},
{0xAB,0x5D,0x00,0x00,0x0A,0x04,0x0B,0xFE,0x0A,0x04,0x12,0x04,0x13,0xFC,0x32,0x00,0x53,0xFF,0x12,0x02,0x12,0xF2,0x12,0x92,0x12,0x92,0x14,0xF2,0x14,0x02,0x18,0x3C,0x10,0x08},
{0xAB,0x5E,0x00,0x00,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0C,0x38,0x08,0x08,0x1F,0xF4,0x68,0x14,0x08,0x12,0x08,0x11,0x0F,0xF0,0x02,0x40,0x02,0x42,0x04,0x42,0x08,0x43,0x70,0x3E},
{0xAB,0x5F,0x00,0x00,0x3F,0xFC,0x20,0x04,0x2F,0xF4,0x20,0x04,0x2F,0xF4,0x20,0x04,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10},
{0xAB,0x60,0x00,0x00,0x01,0x00,0x3F,0xFC,0x21,0x04,0x3F,0xFC,0x21,0x04,0x3F,0xFC,0x00,0x00,0x1F,0xF8,0x10,0x08,0x17,0xE8,0x10,0x08,0x17,0xE8,0x10,0x08,0x10,0x78,0x10,0x10},
{0xAB,0x61,0x00,0x00,0x20,0x04,0x3F,0xFE,0x40,0x04,0x44,0x08,0x3E,0x08,0x00,0x0A,0x02,0x7F,0x7F,0x08,0x14,0x48,0x14,0x28,0x14,0x08,0x14,0x3A,0x24,0x12,0x24,0x03,0x43,0xFE},
{0xAB,0x62,0x00,0x00,0x30,0xC3,0x09,0x02,0x06,0x1A,0x19,0x92,0x60,0x92,0x06,0x12,0x04,0x92,0x7F,0xD2,0x0C,0x12,0x14,0x12,0x16,0x12,0x25,0x82,0x44,0x92,0x04,0x0E,0x04,0x04},
{0xAB,0x63,0x00,0x00,0x31,0x83,0x0A,0x1A,0x7F,0x92,0x04,0x92,0x24,0x92,0x3F,0x92,0x24,0x12,0x24,0x12,0x7F,0xD2,0x4C,0x52,0x14,0x42,0x15,0xC2,0x24,0x92,0x44,0x0E,0x04,0x04},
{0xAB,0x64,0x00,0x00,0x04,0x03,0x15,0x1A,0x14,0x92,0x24,0xD2,0x44,0x52,0x3F,0x92,0x20,0x92,0x3F,0x92,0x20,0x92,0x20,0x92,0x3F,0x92,0x20,0x82,0x20,0x82,0x23,0x8E,0x21,0x04},
{0xAB,0x65,0x00,0x00,0x18,0x30,0x04,0x42,0x7F,0xFF,0x00,0x00,0x21,0x36,0x3F,0xA4,0x21,0x24,0x3F,0x24,0x21,0x24,0x3F,0x24,0x21,0x24,0x21,0x24,0x21,0x04,0x2F,0x1C,0x22,0x08},
{0xAB,0x66,0x00,0x00,0x06,0x03,0x04,0x9A,0x7F,0xD2,0x04,0x12,0x3F,0x92,0x24,0x92,0x24,0x92,0x3F,0x92,0x0C,0x12,0x16,0x12,0x15,0x02,0x24,0x82,0x44,0x92,0x04,0x0E,0x04,0x04},
{0xAB,0x67,0x00,0x00,0x06,0x06,0x04,0x34,0x7F,0xA4,0x04,0x24,0x04,0x24,0x3F,0xA4,0x20,0xA4,0x20,0xA4,0x3F,0xA4,0x12,0x24,0x12,0x04,0x12,0x1D,0x22,0x09,0x22,0x01,0x41,0xFF},
{0xAB,0x68,0x00,0x00,0x21,0x03,0x3F,0x82,0x21,0x1A,0x21,0x12,0x3F,0x12,0x21,0x12,0x3F,0x12,0x21,0x12,0x21,0x12,0x3F,0x12,0x21,0x02,0x00,0x02,0x1A,0x12,0x21,0x8E,0x40,0x84},
{0xAB,0x69,0x00,0x00,0x00,0x10,0x3F,0xF8,0x02,0x20,0x01,0x40,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x01,0x00,0x7F,0xFE,0x02,0x02,0x04,0x02,0x18,0x3C,0x60,0x10},
{0xAB,0x6A,0x00,0x00,0x18,0x18,0x12,0x10,0x1F,0x12,0x12,0x7F,0x24,0x12,0x7F,0x92,0x24,0x92,0x24,0xA2,0x3F,0xA2,0x0A,0x22,0x0A,0x44,0x12,0x5D,0x12,0x89,0x22,0x01,0x41,0xFF},
{0xAB,0x6B,0x00,0x00,0x06,0x18,0x04,0x10,0x7F,0x92,0x04,0x7F,0x3F,0x92,0x40,0x92,0x3F,0x12,0x02,0x12,0x04,0x22,0x07,0xA2,0x7C,0x22,0x24,0x42,0x04,0x42,0x1C,0x9C,0x09,0x08},
{0xAB,0x6C,0x00,0x00,0x01,0x18,0x7F,0x90,0x29,0x12,0x29,0x7F,0x52,0x12,0x29,0x12,0x29,0x12,0x00,0x12,0x7F,0x92,0x08,0x22,0x09,0xA2,0x0E,0x22,0x78,0x42,0x20,0x5C,0x00,0x88},
{0xAB,0x6D,0x00,0x00,0x0C,0x00,0x08,0x02,0x1F,0xFF,0x11,0x22,0x2F,0xF2,0x41,0x02,0x0F,0xE2,0x09,0x22,0x0F,0xE2,0x09,0x22,0x0F,0xE2,0x09,0x22,0x09,0x62,0x09,0x2E,0x00,0x04},
{0xAB,0x6E,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x20,0x82,0x3F,0xFF,0x24,0x12,0x22,0x22,0x2F,0xFA,0x20,0x82,0x27,0xF2,0x20,0x82,0x20,0x82,0x20,0x8E,0x20,0x04},
{0xAB,0x6F,0x00,0x00,0x1A,0x00,0x11,0x22,0x20,0xBF,0x4C,0xA2,0x0A,0x22,0x11,0x22,0x21,0xA2,0x40,0xA2,0x3F,0x22,0x21,0x22,0x21,0x22,0x21,0x2E,0x3F,0x24,0x21,0x20,0x00,0x20},
{0xAB,0x70,0x00,0x00,0x1F,0xFF,0x10,0x00,0x13,0xFC,0x12,0x04,0x13,0xFC,0x12,0x04,0x13,0xFC,0x10,0x00,0x17,0xFC,0x10,0x08,0x10,0x12,0x2F,0xFF,0x20,0x20,0x21,0xE0,0x40,0x40},
{0xAB,0x71,0x00,0x00,0x08,0x82,0x2C,0xFF,0x2A,0x80,0x4A,0x80,0x08,0x82,0x7E,0xFF,0x08,0xA2,0x0A,0xA2,0x0C,0x94,0x78,0x94,0x48,0x88,0x11,0x14,0x11,0x12,0x21,0x22,0x42,0x41},
{0xAB,0x72,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x00,0x48,0xCC,0x49,0x83,0x4A,0x01,0x48,0xCC,0x49,0x48,0x79,0x48,0x48,0x30,0x00,0x20,0x00,0x50,0x01,0x8C,0x06,0x03},
{0xAB,0x73,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x02,0x80,0x04,0x46,0x1C,0x58,0x64,0x20,0x07,0x98,0x3C,0x07,0x10,0x02},
{0xAB,0x74,0x00,0x00,0x00,0x60,0x08,0x42,0x7C,0xFF,0x00,0x92,0x01,0x10,0x04,0x28,0x18,0x28,0x60,0xC4,0x43,0x03,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAB,0x75,0x00,0x00,0x00,0xCC,0x48,0x88,0x7B,0xFF,0x48,0x88,0x48,0x88,0x48,0x00,0x49,0x86,0x4A,0x84,0x4A,0x48,0x78,0x48,0x48,0x30,0x00,0x28,0x00,0x48,0x00,0x84,0x03,0x03},
{0xAB,0x76,0x00,0x00,0x06,0x60,0x04,0x48,0x3F,0x46,0x04,0x42,0x04,0x40,0x7F,0xFF,0x00,0x40,0x00,0x46,0x3F,0x24,0x21,0x28,0x21,0x28,0x3F,0x12,0x00,0x2A,0x00,0xC7,0x03,0x02},
{0xAB,0x77,0x00,0x00,0x00,0x68,0x00,0x46,0x20,0x40,0x3F,0xFF,0x20,0x40,0x2F,0xA0,0x20,0x26,0x2F,0xA4,0x28,0xA8,0x28,0x90,0x2F,0x90,0x28,0x29,0x40,0xC9,0x47,0x05,0x40,0x03},
{0xAB,0x78,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x20,0x4B,0xFE,0x48,0x22,0x49,0xFE,0x49,0x20,0x7B,0xFF,0x4A,0x21,0x42,0x57,0x00,0x52,0x00,0x88,0x01,0x04,0x06,0x03},
{0xAB,0x79,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x20,0x48,0x40,0x49,0x8C,0x48,0x58,0x48,0x30,0x48,0x26,0x78,0xC4,0x4B,0x08,0x40,0x18,0x00,0x24,0x00,0xC6,0x03,0x02},
{0xAB,0x7A,0x00,0x00,0x00,0x30,0x48,0x20,0x7D,0xFE,0x48,0x20,0x48,0x22,0x4B,0xFF,0x48,0x00,0x48,0x30,0x48,0x24,0x7B,0xFE,0x48,0x20,0x40,0x20,0x00,0x22,0x07,0xFF,0x00,0x00},
{0xAB,0x7B,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x50,0x48,0x50,0x4A,0x51,0x4B,0xFF,0x4A,0x51,0x4A,0x51,0x4A,0x55,0x7A,0x95,0x4B,0x0D,0x42,0x01,0x02,0x01,0x03,0xFF,0x02,0x01},
{0xAB,0x7C,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x02,0x4A,0x32,0x4A,0x22,0x4A,0xFA,0x4A,0x22,0x4A,0x22,0x4A,0x52,0x7A,0x52,0x4A,0x4A,0x42,0x8A,0x02,0x02,0x03,0xFE,0x02,0x02},
{0xAB,0x7D,0x00,0x00,0x00,0x30,0x4A,0x26,0x79,0x24,0x49,0xA4,0x48,0xA8,0x48,0x22,0x4B,0xFF,0x48,0x60,0x48,0xB0,0x78,0xA8,0x49,0x28,0x41,0x24,0x02,0x23,0x00,0x20,0x00,0x20},
{0xAB,0x7E,0x00,0x00,0x08,0x10,0x0F,0xF8,0x08,0x10,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x10,0x42,0x42,0x7F,0x7F,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x7E,0x7E,0x42,0x42},
{0xAB,0xA1,0x00,0x00,0x00,0xCC,0x48,0x88,0x78,0x88,0x4B,0xFE,0x48,0x88,0x48,0x88,0x48,0x88,0x48,0x88,0x48,0x8A,0x7B,0xFF,0x48,0x00,0x41,0x90,0x01,0x0C,0x02,0x06,0x0C,0x02},
{0xAB,0xA2,0x00,0x00,0x00,0x60,0x00,0x50,0x48,0x90,0x7C,0x88,0x49,0x04,0x4A,0xFB,0x4C,0x00,0x48,0x00,0x49,0x04,0x49,0xFE,0x79,0x04,0x49,0x04,0x41,0x04,0x01,0xFC,0x01,0x04},
{0xAB,0xA3,0x00,0x00,0x00,0xC0,0x48,0x84,0x7C,0xFE,0x48,0x84,0x49,0x88,0x4A,0x48,0x48,0x30,0x48,0x4C,0x49,0x83,0x7A,0xFC,0x48,0x84,0x40,0x84,0x00,0x84,0x00,0xFC,0x00,0x84},
{0xAB,0xA4,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x21,0x42,0x3F,0x42,0x29,0x7E,0x28,0x00,0x28,0x34,0x24,0x22,0x24,0x23,0x22,0x41,0x21,0x00,0x20,0xC0,0x40,0x38,0x40,0x07},
{0xAB,0xA5,0x00,0x00,0x00,0x30,0x00,0x20,0x49,0x42,0x7D,0xFF,0x49,0x02,0x49,0x02,0x49,0xFE,0x49,0x02,0x49,0x02,0x79,0xFE,0x49,0x02,0x41,0x02,0x01,0x02,0x01,0xFE,0x01,0x02},
{0xAB,0xA6,0x00,0x00,0x01,0x98,0x51,0x10,0x79,0x10,0x52,0x12,0x52,0xFF,0x56,0x10,0x5A,0x30,0x52,0x38,0x52,0x54,0x72,0x54,0x52,0x92,0x43,0x11,0x02,0x10,0x02,0x10,0x02,0x10},
{0xAB,0xA7,0x00,0x00,0x01,0x0C,0x48,0x88,0x78,0x90,0x4B,0xFE,0x48,0x20,0x48,0x24,0x4B,0xFE,0x48,0x20,0x48,0x22,0x7B,0xFF,0x48,0x20,0x40,0x20,0x00,0x20,0x00,0x20,0x00,0x20},
{0xAB,0xA8,0x00,0x00,0x00,0x43,0x07,0xE2,0x52,0x0A,0x7A,0x4A,0x53,0xEA,0x52,0x4A,0x52,0x4A,0x55,0x4A,0x55,0x4A,0x58,0x8A,0x70,0x82,0x51,0x02,0x01,0x02,0x02,0x0E,0x04,0x04},
{0xAB,0xA9,0x00,0x00,0x01,0x80,0x51,0x04,0x72,0xFE,0x52,0x24,0x56,0x24,0x5A,0xFF,0x52,0x24,0x52,0x24,0x52,0xFC,0x72,0x24,0x52,0x20,0x42,0x20,0x02,0x40,0x02,0x40,0x02,0x80},
{0xAB,0xAA,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x21,0x02,0x2F,0xFA,0x22,0x02,0x23,0xF2,0x26,0x12,0x2B,0xF2,0x22,0x12,0x23,0xF2,0x22,0x12,0x22,0x32,0x20,0x02,0x3F,0xFE},
{0xAB,0xAB,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x84,0x3F,0xFE,0x08,0x88,0x08,0x8A,0x7F,0xFF,0x08,0x88,0x08,0x88,0x3F,0xFE,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xAB,0xAC,0x00,0x00,0x01,0x06,0x7F,0xB4,0x12,0x24,0x12,0x24,0x7F,0xA4,0x12,0x24,0x22,0x04,0x22,0x1C,0x42,0x08,0x00,0xC0,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xAB,0xAD,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x7D,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x15,0x20,0x19,0x23,0x71,0x12,0x21,0x14,0x01,0xC8,0x07,0x07,0x02,0x02},
{0xAB,0xAE,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x00,0x11,0x04,0x7D,0xFE,0x11,0x04,0x11,0x04,0x11,0xFC,0x15,0x04,0x19,0x04,0x71,0xFC,0x21,0x04,0x00,0x00,0x00,0x02,0x07,0xFF},
{0xAB,0xAF,0x00,0x00,0x19,0x1E,0x11,0xE0,0x11,0x00,0x11,0x02,0x7D,0xFF,0x11,0x00,0x11,0x00,0x11,0x42,0x11,0x7F,0x15,0x42,0x19,0x42,0x72,0x42,0x22,0x42,0x02,0x7E,0x04,0x42},
{0xAB,0xB0,0x00,0x00,0x30,0x1A,0x20,0x11,0x22,0x10,0x23,0xFF,0x7A,0x10,0x22,0x50,0x23,0xEB,0x22,0x4A,0x22,0x4A,0x3A,0x4C,0x63,0xC9,0x22,0x95,0x04,0x15,0x04,0x23,0x08,0x41},
{0xAB,0xB1,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x10,0x50,0x7C,0x88,0x11,0x04,0x16,0xFB,0x10,0x00,0x13,0xFE,0x14,0x40,0x18,0xFC,0x70,0x84,0x20,0x04,0x00,0x08,0x00,0x30},
{0xAB,0xB2,0x00,0x00,0x18,0x30,0x10,0x22,0x11,0xFF,0x10,0x20,0x7C,0x40,0x11,0x8C,0x10,0x58,0x10,0x30,0x14,0x26,0x18,0x44,0x71,0x88,0x20,0x18,0x00,0x24,0x00,0x46,0x01,0x82},
{0xAB,0xB3,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x02,0x20,0x1A,0x28,0x12,0x26,0x24,0xE2,0x44,0x40,0x08,0x80,0x00,0x82,0x7F,0xFF,0x01,0x40,0x02,0x30,0x0C,0x0C,0x70,0x03},
{0xAB,0xB4,0x00,0x00,0x08,0x02,0x7E,0xFF,0x08,0x22,0x7E,0x22,0x08,0x22,0x0F,0x42,0x78,0x4E,0x08,0x84,0x08,0x00,0x00,0x82,0x7F,0xFF,0x01,0x40,0x02,0x30,0x0C,0x0C,0x70,0x03},
{0xAB,0xB5,0x00,0x00,0x01,0x80,0x01,0x00,0x3F,0xFE,0x01,0x00,0x1F,0xFC,0x02,0x20,0x7F,0xFF,0x08,0x08,0x17,0xF4,0x60,0x83,0x1F,0xFC,0x01,0x40,0x02,0x30,0x0C,0x0C,0x30,0x04},
{0xAB,0xB6,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x40,0x06,0x30,0x18,0xCC,0x60,0x83,0x0F,0xF8,0x00,0x80,0x3F,0xFE,0x00,0x00,0x00,0x80,0x0F,0xF8,0x00,0x82,0x7F,0xFF},
{0xAB,0xB7,0x00,0x00,0x06,0x00,0x04,0x40,0x0F,0xE0,0x08,0x80,0x11,0x04,0x3F,0xFE,0x51,0x44,0x11,0x54,0x12,0x34,0x14,0x84,0x7F,0xFF,0x01,0x40,0x02,0x30,0x0C,0x0F,0x70,0x02},
{0xAB,0xB8,0x00,0x00,0x0C,0x30,0x02,0x44,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x00,0x80,0x3F,0xFE,0x00,0x00,0x01,0x00,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x0C,0x30,0x70,0x0E},
{0xAB,0xB9,0x00,0x00,0x30,0x33,0x20,0x22,0x24,0x44,0x7D,0xEF,0x24,0x44,0x24,0x44,0x24,0x54,0x24,0x64,0x65,0xDF,0x59,0x44,0x08,0x44,0x14,0x44,0x14,0x84,0x20,0x84,0x41,0x04},
{0xAB,0xBA,0x00,0x00,0x00,0x60,0x08,0x42,0x7C,0xFF,0x00,0x92,0x01,0x10,0x0C,0x28,0x70,0x44,0x21,0x83,0x02,0x00,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x0C,0x30,0x70,0x0E},
{0xAB,0xBB,0x00,0x00,0x30,0x30,0x20,0x22,0x25,0xFF,0x7C,0x00,0x24,0xC4,0x24,0x83,0x25,0x01,0x24,0x66,0x64,0xA4,0x58,0x28,0x08,0x18,0x14,0x10,0x14,0x28,0x20,0x44,0x41,0x83},
{0xAB,0xBC,0x00,0x00,0x30,0x18,0x20,0x12,0x25,0xFF,0x7E,0x10,0x24,0xFE,0x24,0x12,0x24,0xFE,0x24,0x90,0x65,0xFF,0x59,0x11,0x08,0x29,0x14,0x2A,0x14,0x48,0x20,0x44,0x41,0x83},
{0xAB,0xBD,0x00,0x00,0x30,0x30,0x20,0x20,0x25,0xFC,0x7C,0x20,0x24,0x24,0x27,0xFE,0x24,0x00,0x24,0x30,0x64,0x24,0x59,0xFE,0x08,0x20,0x14,0x20,0x14,0x22,0x23,0xFF,0x40,0x00},
{0xAB,0xBE,0x00,0x00,0x30,0x30,0x20,0x20,0x24,0x23,0x7E,0xFA,0x24,0x22,0x24,0x24,0x25,0xFF,0x24,0x10,0x68,0x20,0x58,0xC6,0x0B,0x58,0x14,0x60,0x14,0x42,0x20,0x43,0x40,0x3E},
{0xAB,0xBF,0x00,0x00,0x30,0x02,0x23,0xFF,0x20,0x20,0x7E,0x28,0x24,0x44,0x24,0x44,0x25,0xFA,0x24,0x82,0x64,0x30,0x58,0x24,0x09,0xFE,0x14,0x20,0x14,0x22,0x23,0xFF,0x40,0x00},
{0xAB,0xC0,0x00,0x00,0x30,0x50,0x20,0x50,0x24,0x50,0x7D,0x56,0x25,0x54,0x24,0xD8,0x24,0x50,0x24,0x50,0x64,0xD8,0x59,0x56,0x09,0x52,0x14,0x50,0x14,0x91,0x20,0x91,0x41,0x0F},
{0xAB,0xC1,0x00,0x00,0x03,0x00,0x02,0x04,0x7F,0xFE,0x04,0x10,0x1C,0x60,0x03,0x80,0x0C,0x70,0x70,0x0C,0x08,0x10,0x7F,0x7F,0x12,0x12,0x64,0x64,0x18,0x18,0x16,0x16,0x62,0x61},
{0xAB,0xC2,0x00,0x00,0x00,0x68,0x00,0x46,0x20,0x40,0x3F,0xFF,0x20,0x20,0x2F,0xA0,0x22,0x26,0x2F,0xA4,0x24,0xA8,0x2D,0x28,0x22,0x10,0x25,0x11,0x48,0xA9,0x40,0x45,0x41,0x83},
{0xAB,0xC3,0x00,0x00,0x31,0x01,0x21,0xFF,0x25,0x01,0x7D,0x19,0x25,0x11,0x25,0x7D,0x25,0x11,0x25,0x11,0x65,0x29,0x59,0x29,0x09,0x25,0x15,0x45,0x15,0x01,0x21,0xFF,0x41,0x01},
{0xAB,0xC4,0x00,0x00,0x02,0x18,0x7F,0x10,0x02,0x12,0x05,0xFF,0x0C,0x10,0x08,0x26,0x0A,0xC4,0x0C,0x28,0x18,0x10,0x68,0x66,0x49,0x84,0x08,0x08,0x48,0x14,0x38,0x63,0x11,0x81},
{0xAB,0xC5,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x04,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x02,0x7F,0xFF},
{0xAB,0xC6,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x40,0x02,0x50,0x04,0x1F,0xFC,0x10,0x80,0x10,0x88,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x88,0x10,0x80,0x1F,0xFE},
{0xAB,0xC7,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x40,0x04,0x1F,0xFC,0x02,0x00,0x04,0x10,0x1F,0xEC,0x08,0x84,0x00,0x80,0x1F,0xF8,0x00,0x80,0x00,0x84,0x7F,0xFE},
{0xAB,0xC8,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x21,0x02,0x41,0xF4,0x06,0x10,0x19,0x20,0x00,0xC0,0x03,0x30,0x0C,0x0C,0x77,0xFB,0x04,0x08,0x04,0x08,0x07,0xF8,0x04,0x08},
{0xAB,0xC9,0x00,0x00,0x00,0xC0,0x20,0x84,0x3F,0xFE,0x42,0x04,0x42,0x08,0x3F,0xFE,0x04,0x00,0x0F,0xF8,0x14,0x08,0x67,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08,0x04,0x38,0x04,0x10},
{0xAB,0xCA,0x00,0x00,0x06,0x06,0x04,0x04,0x3F,0x04,0x04,0x04,0x04,0x7F,0x7F,0x84,0x00,0x04,0x04,0x24,0x3F,0x24,0x04,0x14,0x04,0x14,0x07,0x84,0x7C,0x24,0x20,0x1C,0x00,0x08},
{0xAB,0xCB,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x60,0x24,0x4C,0x23,0x48,0x21,0x52,0x2F,0xFF,0x20,0xE0,0x21,0x58,0x42,0x47,0x4C,0x42,0x40,0x40},
{0xAB,0xCC,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x26,0x18,0x21,0x20,0x2F,0xFE,0x21,0x10,0x21,0x12,0x2F,0xFF,0x22,0x10,0x42,0x10,0x44,0x10,0x58,0x10},
{0xAB,0xCD,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x20,0x00,0x3F,0xFF,0x22,0x00,0x24,0x30,0x27,0xA4,0x28,0xBE,0x35,0x20,0x42,0x21,0x44,0x21,0x58,0x1F},
{0xAB,0xCE,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x00,0x2F,0xFE,0x21,0x10,0x22,0x08,0x2F,0xF4,0x24,0x04,0x20,0x40,0x27,0xFC,0x40,0x40,0x40,0x42,0x5F,0xFF},
{0xAB,0xCF,0x00,0x00,0x18,0x30,0x10,0x24,0x11,0xFE,0x54,0x20,0x54,0x22,0x57,0xFF,0x54,0x08,0x54,0x0A,0x57,0xFF,0x54,0x08,0x7D,0x08,0x44,0x88,0x40,0x88,0x00,0x38,0x00,0x10},
{0xAB,0xD0,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x55,0x7A,0x55,0x02,0x55,0x4A,0x55,0x7A,0x55,0x4A,0x55,0x4A,0x55,0x7A,0x7D,0x4A,0x45,0x02,0x41,0x02,0x01,0x0E,0x01,0x04},
{0xAB,0xD1,0x00,0x00,0x06,0x30,0x04,0x20,0x3F,0xFC,0x04,0x20,0x04,0x22,0x7F,0xFF,0x04,0x10,0x08,0x08,0x1F,0xF4,0x68,0x13,0x08,0x10,0x0F,0xF4,0x08,0x04,0x08,0x06,0x07,0xFC},
{0xAB,0xD2,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x04,0x10,0x22,0x22,0x3F,0xFF,0x20,0x02,0x40,0xC0,0x08,0x88,0x0F,0xFC,0x08,0x88,0x08,0x88,0x08,0xB8,0x08,0x90,0x00,0x80},
{0xAB,0xD3,0x00,0x00,0x0C,0x18,0x50,0x10,0x7E,0x92,0x42,0xFF,0x42,0x92,0x7E,0x92,0x42,0x92,0x40,0x92,0x7E,0x92,0x42,0x92,0x42,0x92,0x7E,0x9E,0x42,0x94,0x00,0x10,0x00,0x10},
{0xAB,0xD4,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x02,0x20,0x1A,0x28,0x12,0x26,0x24,0xE2,0x48,0x40,0x00,0x80,0x1F,0xFC,0x10,0x84,0x10,0x84,0x10,0x9C,0x10,0x88,0x00,0x80},
{0xAB,0xD5,0x00,0x00,0x00,0xC0,0x0C,0x98,0x68,0x93,0x48,0x92,0x50,0xA2,0x76,0xEE,0x54,0xAA,0x48,0x92,0x48,0x92,0x54,0xAA,0x5A,0xB6,0x50,0xA2,0x40,0x82,0x7F,0xFE,0x40,0x02},
{0xAB,0xD6,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x22,0x08,0x21,0x10,0x2F,0xFE,0x20,0x40,0x20,0x48,0x27,0xFC,0x20,0x40,0x20,0x42,0x2F,0xFF,0x40,0x40,0x40,0x40,0x40,0x40},
{0xAB,0xD7,0x00,0x00,0x00,0x60,0x10,0x42,0x1F,0xFF,0x10,0x00,0x11,0x0A,0x1F,0xFF,0x11,0x08,0x11,0xF8,0x10,0x00,0x17,0xFC,0x11,0x08,0x20,0x90,0x20,0x60,0x21,0x98,0x4E,0x07},
{0xAB,0xD8,0x00,0x00,0x08,0x20,0x7D,0xFC,0x08,0x24,0x0B,0xFF,0x10,0x24,0x21,0xFC,0x7C,0x20,0x45,0xFC,0x04,0x20,0x68,0x24,0x5B,0xFE,0x48,0x20,0x14,0x20,0x13,0x03,0x20,0xFC},
{0xAB,0xD9,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x02,0x20,0x1A,0x28,0x12,0x26,0x24,0xE2,0x48,0x40,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x04,0x20,0x08,0x20,0x30,0x20},
{0xAB,0xDA,0x00,0x00,0x04,0x02,0x7E,0xFF,0x04,0x44,0x24,0x44,0x3C,0x7C,0x24,0x44,0x20,0x44,0x44,0x7C,0x7E,0x44,0x44,0x47,0x04,0x5C,0x05,0xE4,0x44,0x84,0x38,0x04,0x10,0x04},
{0xAB,0xDB,0x00,0x00,0x00,0x88,0x3F,0xFC,0x04,0x20,0x03,0xC0,0x02,0x20,0x2C,0x12,0x3F,0xFF,0x20,0x00,0x20,0x38,0x21,0xC0,0x2E,0x1C,0x20,0xE0,0x4F,0x0E,0x40,0x70,0x4F,0x80},
{0xAB,0xDC,0x00,0x00,0x0D,0x04,0x09,0xFE,0x11,0x04,0x21,0x04,0x4D,0xFC,0x09,0x04,0x11,0x04,0x31,0xFC,0x51,0x24,0x11,0x20,0x11,0x13,0x11,0x14,0x11,0x68,0x17,0x87,0x12,0x02},
{0xAB,0xDD,0x00,0x00,0x0C,0x30,0x08,0x20,0x11,0xFE,0x20,0x20,0x4C,0x22,0x0B,0xFF,0x10,0x08,0x30,0x0A,0x53,0xFF,0x10,0x08,0x12,0x08,0x11,0x88,0x10,0x88,0x10,0x38,0x10,0x10},
{0xAB,0xDE,0x00,0x00,0x0C,0x00,0x09,0x02,0x11,0xFF,0x21,0x02,0x4D,0x02,0x09,0x4A,0x11,0x7A,0x31,0x4A,0x51,0x4A,0x11,0x7A,0x11,0x4A,0x11,0x02,0x11,0x02,0x11,0xFE,0x11,0x02},
{0xAB,0xDF,0x00,0x00,0x18,0x30,0x10,0x24,0x21,0xFE,0x2C,0x24,0x4B,0xFF,0x10,0x24,0x11,0xFC,0x30,0x24,0x50,0x20,0x11,0xFE,0x10,0x20,0x13,0xFF,0x10,0x20,0x10,0x20,0x10,0x20},
{0xAB,0xE0,0x00,0x00,0x18,0xC0,0x10,0x80,0x20,0x82,0x2D,0xFF,0x49,0x02,0x12,0x02,0x15,0xF2,0x31,0x12,0x51,0xF2,0x11,0x12,0x11,0xF2,0x11,0x12,0x10,0x02,0x10,0x3C,0x10,0x08},
{0xAB,0xE1,0x00,0x00,0x18,0x30,0x10,0x60,0x21,0x8C,0x2C,0x50,0x48,0x20,0x10,0x44,0x13,0xFB,0x31,0x41,0x50,0x44,0x10,0x7E,0x10,0x84,0x13,0x48,0x10,0x30,0x10,0x6C,0x13,0x83},
{0xAB,0xE2,0x00,0x00,0x19,0x06,0x10,0xC4,0x20,0x48,0x2B,0xFE,0x48,0x20,0x10,0x24,0x33,0xFE,0x50,0x20,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xAB,0xE3,0x00,0x00,0x18,0x02,0x11,0x7F,0x7F,0x42,0x11,0x22,0x12,0x14,0x2C,0x08,0x0A,0x14,0x11,0x63,0x60,0x00,0x0D,0x04,0x28,0xC2,0x28,0x53,0x48,0x11,0x48,0x18,0x07,0xF0},
{0xAB,0xE4,0x00,0x00,0x10,0x08,0x1F,0xFC,0x11,0x08,0x11,0x08,0x1F,0xF8,0x11,0x08,0x11,0x08,0x1F,0xF8,0x10,0x08,0x01,0x00,0x2C,0xC4,0x28,0x52,0x48,0x13,0x48,0x19,0x07,0xF0},
{0xAB,0xE5,0x00,0x00,0x03,0x20,0x04,0x10,0x7F,0xEC,0x20,0x04,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x01,0x00,0x2C,0xC4,0x28,0x52,0x48,0x13,0x48,0x19,0x07,0xF0},
{0xAB,0xE6,0x00,0x00,0x04,0x00,0x07,0xE0,0x08,0x40,0x10,0x88,0x6F,0xFC,0x00,0x08,0x7F,0xFE,0x00,0x08,0x1F,0xF8,0x00,0x08,0x0D,0x00,0x28,0x92,0x28,0x93,0x48,0x19,0x07,0xF0},
{0xAB,0xE7,0x00,0x00,0x0C,0x00,0x08,0x04,0x1F,0xFE,0x12,0x00,0x23,0xF8,0x42,0x00,0x03,0xFC,0x02,0x00,0x02,0x00,0x01,0x00,0x2C,0xC4,0x28,0x52,0x48,0x13,0x48,0x19,0x07,0xF0},
{0xAB,0xE8,0x00,0x00,0x0C,0x00,0x09,0x44,0x1F,0x7E,0x11,0x44,0x2A,0x44,0x4A,0x58,0x04,0x42,0x08,0x43,0x30,0x3E,0x01,0x00,0x2C,0xC4,0x28,0x52,0x48,0x13,0x48,0x19,0x07,0xF0},
{0xAB,0xE9,0x00,0x00,0x18,0x30,0x10,0x20,0x12,0x23,0x19,0x26,0x55,0xA4,0x54,0xA8,0x50,0x22,0x17,0xFF,0x10,0x90,0x10,0x90,0x10,0x90,0x11,0x12,0x11,0x12,0x12,0x13,0x14,0x0E},
{0xAB,0xEA,0x00,0x00,0x18,0x20,0x10,0x60,0x10,0x50,0x18,0x88,0x54,0x88,0x55,0x04,0x52,0xFA,0x14,0x01,0x11,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAB,0xEB,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x19,0x04,0x55,0xFC,0x55,0x04,0x51,0x04,0x11,0xFC,0x11,0x24,0x11,0x20,0x11,0x13,0x11,0x14,0x11,0x68,0x17,0x87,0x12,0x02},
{0xAB,0xEC,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x42,0x17,0xFF,0x58,0x80,0x54,0x98,0x55,0x10,0x11,0x56,0x12,0x58,0x12,0x90,0x14,0x28,0x10,0x28,0x10,0x44,0x10,0x44,0x11,0x83},
{0xAB,0xED,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x80,0x18,0x80,0x54,0x88,0x55,0xFC,0x51,0x08,0x11,0x48,0x11,0x28,0x12,0x10,0x12,0x90,0x10,0x50,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xAB,0xEE,0x00,0x00,0x18,0x30,0x10,0x20,0x19,0xFE,0x54,0x20,0x54,0x22,0x53,0xFF,0x10,0x08,0x10,0x0A,0x13,0xFF,0x10,0x08,0x12,0x08,0x11,0x88,0x10,0x88,0x10,0x38,0x10,0x10},
{0xAB,0xEF,0x00,0x00,0x18,0x0C,0x10,0x3E,0x13,0xE0,0x18,0x20,0x54,0x22,0x57,0xFF,0x54,0x20,0x10,0x20,0x11,0x24,0x11,0xFE,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAB,0xF0,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x19,0x7A,0x55,0x02,0x55,0x4A,0x51,0x7A,0x11,0x4A,0x11,0x4A,0x11,0x7A,0x11,0x4A,0x11,0x02,0x11,0x02,0x11,0x0E,0x11,0x04},
{0xAB,0xF1,0x00,0x00,0x18,0xC0,0x10,0x84,0x18,0xFE,0x54,0x84,0x55,0x88,0x52,0x50,0x10,0x30,0x10,0xCC,0x17,0x03,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAB,0xF2,0x00,0x00,0x18,0x00,0x10,0x30,0x10,0x20,0x19,0x44,0x55,0xFE,0x55,0x54,0x51,0x54,0x11,0x54,0x11,0x54,0x11,0x54,0x11,0x54,0x11,0x54,0x11,0x54,0x17,0xFF,0x10,0x00},
{0xAB,0xF3,0x00,0x00,0x20,0x7C,0x3F,0x80,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x00,0x28,0x02,0x2F,0xFF,0x29,0x22,0x2F,0xFE,0x29,0x22,0x49,0x22,0x49,0x2E,0x48,0x04},
{0xAB,0xF4,0x00,0x00,0x0E,0x04,0x78,0xFE,0x08,0x10,0x08,0x14,0x7E,0xFE,0x08,0x10,0x08,0x14,0x0A,0xFE,0x1C,0x10,0x68,0x12,0x49,0xFF,0x10,0x10,0x10,0x10,0x20,0x10,0x40,0x10},
{0xAB,0xF5,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x02,0x12,0xD8,0x10,0x91,0x15,0x0F,0x18,0x00,0x71,0xFC,0x50,0x08,0x10,0x30,0x10,0xC2,0x11,0x02,0x71,0x03,0x20,0xFE},
{0xAB,0xF6,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x02,0x12,0x64,0x10,0x40,0x13,0xFF,0x14,0x44,0x18,0x44,0x70,0x88,0x51,0x48,0x10,0x30,0x10,0x48,0x70,0x86,0x23,0x02},
{0xAB,0xF7,0x00,0x00,0x18,0x63,0x10,0x42,0x10,0x84,0x7B,0xDF,0x10,0x84,0x10,0x84,0x14,0xA4,0x18,0xC4,0x73,0x9F,0x52,0x84,0x10,0x84,0x10,0x84,0x11,0x04,0x71,0x04,0x22,0x04},
{0xAB,0xF8,0x00,0x00,0x18,0x18,0x10,0x12,0x10,0x11,0x7D,0xFF,0x10,0x08,0x10,0x08,0x15,0xE8,0x18,0x88,0x70,0x88,0x50,0xA8,0x10,0xC9,0x13,0x85,0x11,0x05,0x70,0x03,0x20,0x01},
{0xAB,0xF9,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xFE,0x7C,0x20,0x10,0x22,0x13,0xFF,0x14,0x08,0x18,0x0A,0x73,0xFF,0x50,0x08,0x12,0x08,0x11,0x88,0x10,0x88,0x70,0x38,0x20,0x10},
{0xAB,0xFA,0x00,0x00,0x18,0x30,0x10,0x20,0x10,0x22,0x7D,0xFF,0x10,0x20,0x10,0x24,0x15,0xFE,0x18,0x00,0x71,0x04,0x51,0xFE,0x11,0x04,0x11,0x04,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xAB,0xFB,0x00,0x00,0x18,0x60,0x10,0x40,0x12,0x44,0x7F,0xFE,0x12,0x44,0x13,0xFC,0x16,0x44,0x1B,0xFC,0x72,0x40,0x50,0x26,0x10,0x28,0x10,0x11,0x10,0x69,0x73,0x85,0x20,0x03},
{0xAB,0xFC,0x00,0x00,0x19,0x80,0x11,0x0C,0x11,0x30,0x7D,0xC2,0x11,0x03,0x10,0xFE,0x14,0x00,0x19,0x04,0x71,0xFE,0x51,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xAB,0xFD,0x00,0x00,0x18,0xCC,0x10,0x88,0x10,0x88,0x7C,0x88,0x13,0xFE,0x10,0x88,0x14,0x88,0x18,0x88,0x70,0x8A,0x57,0xFF,0x10,0x00,0x10,0xC8,0x10,0x84,0x71,0x06,0x22,0x02},
{0xAB,0xFE,0x00,0x00,0x18,0x60,0x10,0x40,0x11,0xF6,0x7C,0x44,0x10,0x48,0x13,0xFF,0x14,0x20,0x18,0xFE,0x71,0x80,0x56,0xFC,0x10,0x84,0x10,0x04,0x10,0x04,0x70,0x78,0x20,0x10},
{0xAC,0x40,0x00,0x00,0x18,0x08,0x11,0xFC,0x10,0x08,0x7C,0x30,0x10,0x20,0x13,0xA6,0x10,0xB4,0x1D,0x28,0x71,0x28,0x52,0x24,0x14,0xE3,0x10,0x40,0x10,0x02,0x77,0xFF,0x20,0x00},
{0xAC,0x41,0x00,0x00,0x18,0x0C,0x10,0x3E,0x13,0xE0,0x7C,0x20,0x10,0x22,0x13,0xFF,0x14,0x20,0x18,0x20,0x71,0x24,0x51,0xFE,0x11,0x04,0x11,0x04,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xAC,0x42,0x00,0x00,0x18,0x30,0x10,0x50,0x10,0x48,0x7C,0x88,0x10,0x84,0x11,0x12,0x12,0x79,0x10,0x00,0x1C,0x84,0x70,0xFE,0x50,0x84,0x10,0x84,0x10,0x84,0x70,0xFC,0x20,0x84},
{0xAC,0x43,0x00,0x00,0x18,0x20,0x13,0xF0,0x10,0x20,0x7C,0x50,0x11,0x8C,0x16,0x03,0x11,0xFC,0x14,0x20,0x18,0x20,0x70,0x24,0x53,0xFE,0x10,0x20,0x10,0x20,0x70,0x22,0x27,0xFF},
{0xAC,0x44,0x00,0x00,0x18,0x50,0x10,0x50,0x10,0x50,0x7D,0x56,0x11,0x54,0x10,0xD8,0x14,0x50,0x18,0x50,0x70,0xD8,0x53,0x56,0x12,0x52,0x10,0x50,0x10,0x91,0x70,0x91,0x21,0x0F},
{0xAC,0x45,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xFC,0x7C,0x20,0x10,0x22,0x13,0xFF,0x10,0x00,0x1C,0x30,0x70,0x24,0x51,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x73,0xFF,0x20,0x00},
{0xAC,0x46,0x00,0x00,0x02,0x60,0x7F,0x40,0x08,0x42,0x08,0x7F,0x2A,0x44,0x2F,0x44,0x28,0xC4,0x29,0x28,0x28,0x28,0x2B,0x10,0x2C,0x10,0x78,0x28,0x20,0x24,0x00,0x47,0x01,0x82},
{0xAC,0x47,0x00,0x00,0x0C,0x60,0x08,0x40,0x0A,0x42,0x7F,0x7F,0x08,0x44,0x08,0x44,0x2A,0xC4,0x3E,0xA8,0x23,0x28,0x22,0x10,0x22,0x10,0x22,0x28,0x3E,0x24,0x22,0x47,0x00,0x82},
{0xAC,0x48,0x00,0x00,0x04,0x0C,0x7E,0x8E,0x10,0xF0,0x10,0x80,0x10,0x80,0x1E,0x82,0x32,0xFF,0x52,0x88,0x12,0x88,0x12,0x88,0x1E,0x88,0x12,0x88,0x11,0x08,0x01,0x08,0x02,0x08},
{0xAC,0x49,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x7E,0xFF,0x20,0x80,0x25,0x24,0x3E,0xAE,0x24,0xF4,0x25,0xA4,0x24,0xAC,0x24,0xA4,0x24,0xA0,0x44,0x82,0x5C,0x83,0x48,0x7E},
{0xAC,0x4A,0x00,0x00,0x22,0x04,0x3E,0xFE,0x22,0x48,0x3E,0x48,0x22,0x48,0x22,0x48,0x3E,0x4A,0x22,0xFF,0x28,0x14,0x24,0x14,0x24,0x15,0x2E,0x25,0x72,0x25,0x20,0x45,0x00,0x83},
{0xAC,0x4B,0x00,0x00,0x00,0xC0,0x00,0x80,0x3F,0xFE,0x01,0x00,0x1F,0xFC,0x02,0x20,0x7F,0xFF,0x04,0x10,0x18,0x0C,0x67,0xF3,0x04,0x10,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x10},
{0xAC,0x4C,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x42,0x48,0x42,0x48,0x82,0x48,0x84,0x79,0x1C,0x4A,0x08,0x49,0x02,0x49,0xFF,0x79,0x02,0x49,0x02,0x41,0x02,0x01,0xFE,0x01,0x02},
{0xAC,0x4D,0x00,0x00,0x00,0x30,0x48,0x20,0x7D,0x24,0x49,0xFE,0x49,0x24,0x49,0x24,0x79,0x24,0x49,0x24,0x4F,0xFF,0x48,0x50,0x78,0x50,0x48,0x88,0x00,0x88,0x03,0x07,0x0C,0x02},
{0xAC,0x4E,0x00,0x00,0x00,0x30,0x48,0x20,0x7C,0x24,0x49,0xFE,0x48,0x20,0x48,0x22,0x7B,0xFF,0x48,0x60,0x48,0xB0,0x48,0xA8,0x79,0x28,0x4A,0x27,0x04,0x22,0x00,0x20,0x00,0x20},
{0xAC,0x4F,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x02,0x7F,0xFF,0x01,0x00,0x19,0x10,0x11,0xFC,0x2D,0x00,0x23,0x00,0x40,0xFF},
{0xAC,0x50,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x00,0x0C,0xC0,0x08,0x88,0x1F,0xFC,0x60,0x80,0x0F,0xF8,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xAC,0x51,0x00,0x00,0x01,0x80,0x49,0x00,0x79,0x02,0x4B,0xFF,0x4A,0x40,0x4C,0x44,0x78,0x7E,0x48,0x40,0x48,0x44,0x48,0x7E,0x78,0x40,0x48,0x40,0x40,0x40,0x00,0x40,0x00,0x40},
{0xAC,0x52,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x04,0x10,0x04,0x20,0x02,0x20,0x02,0x42,0x7F,0xFF},
{0xAC,0x53,0x00,0x00,0x00,0x30,0x48,0x50,0x7C,0x48,0x48,0x88,0x48,0x84,0x49,0x7A,0x7A,0x01,0x48,0x04,0x49,0xFE,0x48,0x44,0x78,0x44,0x48,0x5C,0x00,0x48,0x00,0x40,0x00,0x40},
{0xAC,0x54,0x00,0x00,0x10,0x10,0x1F,0xF8,0x10,0x10,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x14,0x02,0x07,0xFF,0x18,0xC2,0x60,0x82,0x09,0x42,0x0A,0x22,0x0F,0xF2,0x08,0x04,0x00,0x38},
{0xAC,0x55,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x00,0x08,0x18,0x18,0x92,0x1C,0xFF,0x2A,0x92,0x2A,0x92,0x48,0x92,0x08,0x92,0x08,0x9E,0x08,0x94,0x08,0x10,0x08,0x10},
{0xAC,0x56,0x00,0x00,0x20,0xC0,0x14,0x90,0x47,0xF8,0x28,0x92,0x09,0x12,0x71,0x13,0x12,0x0E,0x14,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAC,0x57,0x00,0x00,0x0C,0x40,0x08,0x30,0x08,0x12,0x7E,0xFF,0x08,0x10,0x18,0x10,0x18,0x10,0x2C,0x14,0x2A,0xFE,0x4A,0x10,0x08,0x10,0x08,0x10,0x08,0x12,0x09,0xFF,0x08,0x00},
{0xAC,0x58,0x00,0x00,0x00,0x10,0x1F,0xF8,0x03,0x20,0x00,0xC4,0x7F,0xFE,0x02,0x84,0x0C,0x88,0x73,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x0C,0x98,0x70,0x87,0x00,0x80},
{0xAC,0x59,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x90,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAC,0x5A,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x80,0x10,0x84,0x1F,0xFE,0x14,0x94,0x12,0xA4,0x1F,0xFC,0x11,0x84,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x82,0x00,0x80},
{0xAC,0x5B,0x00,0x00,0x0C,0x00,0x09,0x22,0x7F,0xBF,0x09,0x22,0x11,0x22,0x11,0x22,0x27,0x3E,0x42,0x22,0x00,0x80,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAC,0x5C,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x10,0x7E,0x12,0x09,0xFF,0x18,0x10,0x18,0x10,0x2C,0x92,0x2A,0xFF,0x4A,0x82,0x08,0x82,0x08,0x82,0x08,0x82,0x08,0xFE,0x08,0x82},
{0xAC,0x5D,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0xAA,0x7E,0xAA,0x08,0xAA,0x18,0xAA,0x19,0xFF,0x2C,0xAA,0x2A,0xAA,0x4A,0xAA,0x08,0xAA,0x08,0xAA,0x08,0xAA,0x08,0xAE,0x08,0x82},
{0xAC,0x5E,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0x80,0x7E,0x98,0x08,0x90,0x18,0x9E,0x18,0xA4,0x2C,0xC8,0x2A,0x88,0x4A,0x94,0x08,0xA4,0x08,0xC2,0x08,0x80,0x08,0xFF,0x08,0x80},
{0xAC,0x5F,0x00,0x00,0x0C,0x02,0x09,0xFF,0x08,0x04,0x7E,0x04,0x08,0x94,0x18,0xF4,0x18,0x94,0x2C,0x94,0x2A,0xF4,0x4A,0x94,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x1C,0x08,0x08},
{0xAC,0x60,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x20,0x7D,0x22,0x11,0xFF,0x31,0x22,0x31,0x22,0x59,0x52,0x55,0x4A,0x55,0x8A,0x11,0x02,0x11,0x02,0x11,0x02,0x11,0x0E,0x11,0x04},
{0xAC,0x61,0x00,0x00,0x0C,0xC6,0x08,0x84,0x08,0x84,0x7E,0x84,0x09,0xFF,0x18,0x84,0x18,0x84,0x2C,0x84,0x2A,0xFC,0x4A,0x84,0x08,0x84,0x08,0x84,0x08,0x84,0x08,0xFC,0x08,0x84},
{0xAC,0x62,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0x82,0x7E,0x82,0x08,0xFE,0x18,0x80,0x18,0x02,0x2C,0xFF,0x2A,0x22,0x4A,0x22,0x08,0x22,0x08,0x42,0x08,0x42,0x08,0x9C,0x09,0x08},
{0xAC,0x63,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x10,0x7E,0x92,0x08,0xFF,0x18,0x92,0x18,0x92,0x2C,0x92,0x2A,0xFE,0x4A,0x92,0x08,0x92,0x08,0x92,0x08,0x92,0x08,0xFE,0x08,0x82},
{0xAC,0x64,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x04,0x98,0x18,0x87,0x60,0x02,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x02,0x7F,0xFF},
{0xAC,0x65,0x00,0x00,0x0C,0xC0,0x08,0x82,0x08,0xFF,0x7E,0x82,0x09,0x02,0x1A,0xFA,0x18,0x8A,0x2C,0x8A,0x2A,0x8A,0x4A,0xFA,0x08,0x8A,0x08,0x02,0x08,0x04,0x08,0x38,0x08,0x10},
{0xAC,0x66,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0xA2,0x7E,0xFF,0x08,0x82,0x18,0x82,0x18,0x82,0x2C,0x82,0x2A,0xFE,0x4A,0x82,0x08,0x82,0x08,0x82,0x08,0x82,0x08,0xFE,0x08,0x82},
{0xAC,0x67,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x7E,0xFF,0x08,0xA0,0x19,0x24,0x18,0x3E,0x2C,0x20,0x2A,0x20,0x4A,0x24,0x08,0x3E,0x08,0x20,0x08,0x20,0x08,0x20,0x08,0x20},
{0xAC,0x68,0x00,0x00,0x18,0x60,0x11,0x89,0x11,0x2F,0x7D,0x29,0x11,0x29,0x39,0x29,0x35,0x29,0x55,0x29,0x51,0x69,0x53,0xA9,0x11,0x2F,0x10,0x4A,0x10,0x48,0x10,0x88,0x11,0x08},
{0xAC,0x69,0x00,0x00,0x0C,0x04,0x08,0xFE,0x08,0x10,0x7E,0x54,0x08,0x54,0x18,0x92,0x1C,0x92,0x2A,0x10,0x29,0xFF,0x48,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xAC,0x6A,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0x92,0x7E,0x92,0x08,0xFE,0x18,0x92,0x18,0x92,0x2C,0x92,0x2A,0xFE,0x4A,0x92,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xAC,0x6B,0x00,0x00,0x0C,0x04,0x08,0x9E,0x08,0xF0,0x7E,0x90,0x08,0x92,0x18,0xFF,0x18,0x88,0x2C,0x88,0x2A,0x88,0x48,0xB5,0x0B,0xC5,0x09,0x03,0x08,0x09,0x0B,0xFC,0x08,0x00},
{0xAC,0x6C,0x00,0x00,0x0C,0x0C,0x08,0x9E,0x08,0xE0,0x7E,0x80,0x08,0x82,0x18,0xFF,0x18,0x88,0x2C,0xA8,0x2A,0x98,0x4A,0x8C,0x08,0x8E,0x08,0x8A,0x09,0x08,0x09,0x08,0x0A,0x08},
{0xAC,0x6D,0x00,0x00,0x20,0x60,0x12,0x40,0x44,0x4C,0x24,0x70,0x0B,0xC2,0x70,0x43,0x10,0x3E,0x10,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAC,0x6E,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x80,0x02,0xA0,0x0C,0x98,0x70,0x86,0x00,0x82,0x00,0x00,0x3F,0xFE,0x00,0x80,0x0C,0x90,0x08,0xF8,0x08,0x80,0x08,0x82,0x7F,0xFF},
{0xAC,0x6F,0x00,0x00,0x04,0x30,0x7E,0x20,0x20,0x20,0x25,0x24,0x3D,0xFE,0x25,0x24,0x25,0x24,0x55,0x24,0x49,0x24,0x0B,0xFF,0x08,0x50,0x10,0x48,0x10,0x88,0x21,0x07,0x46,0x02},
{0xAC,0x70,0x00,0x00,0x04,0x30,0x7E,0x20,0x20,0x24,0x24,0x44,0x3E,0x42,0x24,0x87,0x25,0xF9,0x54,0x81,0x48,0x00,0x08,0xFE,0x08,0x82,0x10,0x82,0x10,0x82,0x20,0xFE,0x40,0x82},
{0xAC,0x71,0x00,0x00,0x26,0x48,0x38,0x7C,0x20,0x48,0x24,0x48,0x3E,0x49,0x20,0x47,0x24,0x80,0x3E,0x04,0x20,0xFE,0x22,0x44,0x2C,0x24,0x70,0x28,0x20,0x10,0x20,0x6C,0x21,0x83},
{0xAC,0x72,0x00,0x00,0x00,0x80,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x4A,0x7F,0xFF,0x08,0x88,0x10,0x88,0x1F,0xFE,0x10,0x10,0x00,0xE0},
{0xAC,0x73,0x00,0x00,0x01,0x8C,0x45,0x08,0x7D,0x08,0x55,0x08,0x55,0x08,0x55,0x4A,0x7D,0xEF,0x55,0x08,0x55,0x08,0x55,0x08,0x7D,0x08,0x45,0x29,0x01,0xC9,0x03,0x09,0x01,0x07},
{0xAC,0x74,0x00,0x00,0x08,0x08,0x0F,0xFC,0x10,0x00,0x6F,0xF8,0x00,0x00,0x3F,0xF8,0x04,0x88,0x3F,0xE8,0x04,0xA8,0x1F,0xE8,0x14,0x85,0x3F,0xF5,0x28,0x95,0x08,0xB3,0x10,0x81},
{0xAC,0x75,0x00,0x00,0x00,0xC0,0x09,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0xC0,0x3E,0x86,0x04,0xC8,0x08,0xB0,0x70,0x8F,0x07,0x82,0x01,0x00},
{0xAC,0x76,0x00,0x00,0x21,0x0C,0x10,0x88,0x10,0x90,0x43,0xFE,0x28,0x20,0x28,0x24,0x0B,0xFE,0x10,0x20,0x10,0x22,0x67,0xFF,0x20,0x20,0x20,0x20,0x60,0x20,0x20,0x20,0x00,0x20},
{0xAC,0x77,0x00,0x00,0x21,0x99,0x11,0x11,0x11,0x11,0x45,0x11,0x25,0x11,0x29,0x99,0x09,0x55,0x15,0x55,0x15,0x11,0x69,0x11,0x21,0x11,0x22,0x11,0x62,0x11,0x22,0x11,0x04,0x11},
{0xAC,0x78,0x00,0x00,0x20,0xCC,0x10,0x88,0x10,0x88,0x40,0x88,0x23,0xFE,0x28,0x88,0x08,0x88,0x10,0x88,0x10,0x8A,0x67,0xFF,0x20,0x00,0x20,0xC8,0x60,0x84,0x61,0x06,0x26,0x02},
{0xAC,0x79,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x40,0x20,0x88,0x2B,0xF6,0x09,0x02,0x10,0x00,0x11,0xAC,0x61,0x28,0x21,0x28,0x21,0x29,0x62,0x29,0x62,0x29,0x24,0x07},
{0xAC,0x7A,0x00,0x00,0x20,0x30,0x10,0x24,0x11,0xFE,0x40,0x24,0x27,0xFF,0x28,0x24,0x09,0xFC,0x10,0x24,0x10,0x20,0x61,0xFC,0x20,0x20,0x27,0xFF,0x60,0x20,0x60,0x20,0x20,0x20},
{0xAC,0x7B,0x00,0x00,0x20,0x43,0x17,0xE2,0x12,0x0A,0x42,0x4A,0x2B,0xEA,0x2A,0x4A,0x12,0x4A,0x15,0x4A,0x14,0x8A,0x68,0x8A,0x20,0x82,0x21,0x02,0x61,0x02,0x62,0x0E,0x24,0x04},
{0xAC,0x7C,0x00,0x00,0x20,0x02,0x17,0xFF,0x11,0x08,0x41,0x08,0x25,0xF8,0x29,0x08,0x09,0x08,0x11,0xF8,0x11,0x08,0x61,0x0E,0x21,0x38,0x27,0xC8,0x62,0x08,0x60,0x08,0x20,0x08},
{0xAC,0x7D,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x02,0x42,0xFA,0x26,0x02,0x0A,0x8A,0x0A,0xFA,0x12,0x8A,0x12,0x8A,0x62,0xFA,0x22,0x8A,0x22,0x02,0x62,0x02,0x62,0x0E,0x22,0x04},
{0xAC,0x7E,0x00,0x00,0x20,0x18,0x10,0xD0,0x10,0x90,0x45,0xFE,0x25,0x10,0x2A,0x10,0x08,0x12,0x13,0xFF,0x10,0x48,0x60,0x48,0x20,0x48,0x20,0x89,0x60,0x89,0x21,0x09,0x06,0x07},
{0xAC,0xA1,0x00,0x00,0x20,0x0C,0x10,0x3E,0x13,0xE0,0x44,0x20,0x24,0x22,0x2B,0xFF,0x08,0x20,0x10,0x20,0x11,0x22,0x61,0xFF,0x21,0x02,0x21,0x02,0x61,0x02,0x21,0xFE,0x01,0x02},
{0xAC,0xA2,0x00,0x00,0x20,0x20,0x10,0x60,0x10,0x50,0x40,0x88,0x24,0x88,0x29,0x04,0x0A,0xFA,0x14,0x01,0x11,0x04,0x61,0xFE,0x21,0x04,0x21,0x04,0x61,0x04,0x21,0xFC,0x01,0x04},
{0xAC,0xA3,0x00,0x00,0x20,0x0C,0x12,0x3E,0x13,0xC0,0x42,0x00,0x22,0x9E,0x2A,0xF0,0x0A,0x90,0x12,0x93,0x12,0x94,0x62,0x88,0x22,0x88,0x24,0x84,0x64,0xB4,0x25,0xC2,0x08,0x81},
{0xAC,0xA4,0x00,0x00,0x21,0x80,0x11,0x00,0x11,0x02,0x43,0xFF,0x22,0x02,0x2C,0x22,0x0A,0xAA,0x12,0x4A,0x12,0xAA,0x62,0x0A,0x23,0xFA,0x22,0x0A,0x60,0x02,0x20,0x3C,0x00,0x08},
{0xAC,0xA5,0x00,0x00,0x20,0xC0,0x10,0x84,0x10,0xFE,0x44,0x84,0x25,0x88,0x29,0x48,0x0A,0x30,0x10,0x4C,0x11,0x83,0x62,0xFC,0x20,0x84,0x20,0x84,0x60,0x84,0x20,0xFC,0x00,0x84},
{0xAC,0xA6,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x00,0x07,0xF8,0x1C,0x08,0x64,0x08,0x07,0xF8,0x04,0x08,0x00,0xC0,0x3E,0x86,0x04,0xC8,0x08,0xB0,0x70,0x8F,0x07,0x82,0x01,0x00},
{0xAC,0xA7,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x00,0x41,0x04,0x25,0xFE,0x29,0x04,0x09,0x04,0x11,0xFC,0x11,0x04,0x61,0x04,0x21,0xFC,0x21,0x04,0x60,0x00,0x60,0x02,0x27,0xFF},
{0xAC,0xA8,0x00,0x00,0x20,0x60,0x10,0x42,0x17,0xFF,0x40,0x80,0x24,0x84,0x29,0xFE,0x09,0x04,0x13,0xFC,0x15,0x04,0x61,0x04,0x21,0xFC,0x21,0x04,0x61,0x04,0x61,0x1C,0x21,0x08},
{0xAC,0xA9,0x00,0x00,0x20,0x30,0x10,0x20,0x12,0x26,0x41,0x24,0x25,0xA8,0x28,0xA8,0x08,0x22,0x13,0xFF,0x10,0x90,0x60,0x90,0x20,0x90,0x21,0x12,0x61,0x12,0x62,0x13,0x24,0x0E},
{0xAC,0xAA,0x00,0x00,0x20,0x60,0x10,0x40,0x12,0x44,0x43,0xFE,0x26,0x44,0x2B,0xFC,0x0A,0x44,0x13,0xFC,0x12,0x24,0x60,0x20,0x20,0x2C,0x20,0x31,0x60,0xD1,0x67,0x09,0x20,0x07},
{0xAC,0xAB,0x00,0x00,0x20,0xD8,0x10,0x90,0x14,0x90,0x42,0x96,0x2A,0x94,0x28,0x98,0x08,0x90,0x10,0x90,0x11,0x98,0x66,0x96,0x24,0x92,0x20,0x90,0x61,0x11,0x61,0x11,0x22,0x0F},
{0xAC,0xAC,0x00,0x00,0x21,0x80,0x11,0x02,0x11,0xFF,0x42,0x02,0x2A,0x02,0x2D,0xF2,0x09,0x12,0x11,0xF2,0x11,0x12,0x61,0xF2,0x21,0x12,0x20,0x02,0x60,0x04,0x60,0x38,0x20,0x10},
{0xAC,0xAD,0x00,0x00,0x20,0x18,0x10,0x10,0x11,0x22,0x41,0xFF,0x25,0x02,0x29,0x02,0x09,0xFE,0x11,0x02,0x11,0x02,0x61,0xFE,0x21,0x02,0x21,0x02,0x61,0x02,0x61,0xFE,0x21,0x02},
{0xAC,0xAE,0x00,0x00,0x20,0x30,0x10,0x20,0x12,0x44,0x43,0xFE,0x2A,0x94,0x2A,0x94,0x0A,0x94,0x12,0x94,0x12,0x94,0x62,0x94,0x22,0x94,0x22,0x94,0x62,0x94,0x6F,0xFF,0x20,0x00},
{0xAC,0xAF,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x10,0x30,0x56,0x20,0x54,0x20,0x58,0x4C,0x50,0xC8,0x10,0x28,0x18,0x10,0x14,0x30,0x24,0x28,0x20,0x44,0x21,0xFB,0x40,0x81},
{0xAC,0xB0,0x00,0x00,0x01,0xFC,0x3F,0x00,0x20,0x88,0x2F,0xE4,0x48,0x24,0x08,0x40,0x0F,0xF0,0x08,0x10,0x08,0x22,0x1F,0xFF,0x10,0x02,0x25,0x42,0x2A,0xA2,0x4A,0xAE,0x00,0x04},
{0xAC,0xB1,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x20,0x15,0x22,0x55,0xFF,0x59,0x22,0x51,0x22,0x11,0x52,0x11,0x4A,0x31,0x8A,0x29,0x02,0x25,0x02,0x25,0x02,0x41,0x0E,0x01,0x04},
{0xAC,0xB2,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x00,0x17,0x00,0x55,0x04,0x59,0xFE,0x51,0x04,0x51,0x04,0x11,0x04,0x19,0xFC,0x15,0x04,0x25,0x00,0x25,0x02,0x21,0xFF,0x41,0x00},
{0xAC,0xB3,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x17,0x02,0x55,0x4A,0x59,0x7A,0x51,0x4A,0x51,0x4A,0x11,0x4A,0x19,0x7A,0x15,0x4A,0x25,0x02,0x25,0x02,0x21,0x0E,0x41,0x04},
{0xAC,0xB4,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x00,0x00,0x3F,0xFF,0x20,0x00,0x20,0x60,0x22,0x46,0x22,0x44,0x2C,0xC8,0x20,0xB0,0x41,0x10,0x42,0x0C,0x4C,0x03},
{0xAC,0xB5,0x00,0x00,0x18,0xC0,0x10,0x82,0x10,0xFF,0x16,0xA0,0x55,0x20,0x59,0x24,0x52,0x3E,0x50,0x20,0x18,0x20,0x14,0x24,0x24,0x3E,0x24,0x20,0x20,0x20,0x40,0x20,0x00,0x20},
{0xAC,0xB6,0x00,0x00,0x18,0xC0,0x10,0x82,0x10,0xFF,0x15,0x02,0x55,0x02,0x5A,0xF2,0x50,0x92,0x10,0x92,0x18,0xF2,0x14,0x82,0x24,0x9C,0x24,0x88,0x20,0x82,0x40,0x83,0x00,0x7E},
{0xAC,0xB7,0x00,0x00,0x18,0x02,0x11,0xFF,0x10,0x42,0x16,0x42,0x54,0x42,0x58,0x84,0x50,0x9C,0x51,0x08,0x1A,0x82,0x14,0xFF,0x24,0x82,0x24,0x82,0x20,0x82,0x40,0xFE,0x00,0x82},
{0xAC,0xB8,0x00,0x00,0x00,0xFC,0x1F,0x88,0x10,0x86,0x20,0x42,0x4F,0xF8,0x02,0x02,0x3F,0xFF,0x02,0x00,0x02,0x08,0x07,0xFC,0x05,0x08,0x08,0x90,0x30,0x60,0x01,0x98,0x0E,0x07},
{0xAC,0xB9,0x00,0x00,0x0C,0x18,0x28,0x10,0x28,0xD0,0x3E,0x94,0x48,0xFE,0x49,0x10,0x09,0x10,0x08,0x14,0x0E,0xFE,0x78,0x10,0x28,0x10,0x08,0x10,0x08,0x12,0x09,0xFF,0x08,0x00},
{0xAC,0xBA,0x00,0x00,0x0C,0x18,0x28,0x10,0x28,0x10,0x3E,0x12,0x49,0xFF,0x48,0x10,0x08,0x10,0x0A,0x92,0x0C,0xFF,0x78,0x82,0x28,0x82,0x08,0x82,0x08,0x82,0x08,0xFE,0x08,0x82},
{0xAC,0xBB,0x00,0x00,0x0C,0x04,0x28,0x9E,0x28,0xF0,0x3E,0x90,0x48,0x92,0x48,0xFF,0x08,0x88,0x0A,0x88,0x0C,0x88,0x78,0xE5,0x2B,0x85,0x09,0x03,0x08,0x09,0x0B,0xFC,0x08,0x00},
{0xAC,0xBC,0x00,0x00,0x46,0x18,0x25,0x12,0x19,0xFF,0x12,0x02,0x2A,0x0C,0x48,0x08,0x0D,0xFF,0x14,0x08,0x14,0x88,0x24,0x48,0x44,0x48,0x04,0x08,0x44,0x08,0x38,0x38,0x10,0x10},
{0xAC,0xBD,0x00,0x00,0x46,0x84,0x24,0xFE,0x18,0x84,0x10,0x84,0x28,0xFC,0x48,0x84,0x08,0x84,0x14,0xFC,0x14,0xA0,0x24,0x93,0x44,0x94,0x04,0x88,0x44,0xA8,0x39,0xC4,0x10,0x83},
{0xAC,0xBE,0x00,0x00,0x46,0x30,0x24,0x22,0x19,0xFF,0x10,0x00,0x28,0xC4,0x48,0x83,0x0D,0x01,0x14,0xCC,0x14,0xA8,0x25,0x28,0x44,0x10,0x04,0x28,0x44,0x28,0x38,0x44,0x11,0x83},
{0xAC,0xBF,0x00,0x00,0x00,0x30,0x04,0x20,0x7E,0x20,0x10,0x22,0x10,0x3F,0x14,0x20,0x7E,0x20,0x10,0x22,0x11,0xFF,0x13,0x02,0x1D,0x02,0x71,0x02,0x21,0x02,0x01,0xFE,0x01,0x02},
{0xAC,0xC0,0x00,0x00,0x09,0x04,0x7D,0xFE,0x11,0x54,0x11,0x54,0x11,0x54,0x7D,0x54,0x13,0xFF,0x11,0x54,0x15,0x54,0x19,0x54,0x71,0x54,0x21,0x54,0x01,0x54,0x01,0x5C,0x01,0x04},
{0xAC,0xC1,0x00,0x00,0x08,0x18,0x7C,0x10,0x11,0x12,0x11,0xFF,0x11,0x12,0x7D,0x14,0x11,0x10,0x11,0xFE,0x15,0x44,0x19,0x24,0x71,0x28,0x22,0x10,0x02,0x28,0x02,0x44,0x04,0x83},
{0xAC,0xC2,0x00,0x00,0x08,0x30,0x7C,0x50,0x10,0x48,0x10,0x88,0x10,0x84,0x7D,0x7A,0x12,0x01,0x10,0x04,0x11,0xFE,0x1C,0x44,0x70,0x44,0x20,0x5C,0x00,0x48,0x00,0x40,0x00,0x40},
{0xAC,0xC3,0x00,0x00,0x08,0x30,0x7C,0x50,0x10,0x48,0x10,0x88,0x13,0x34,0x7C,0x23,0x10,0x40,0x11,0x98,0x10,0x10,0x1C,0x20,0x70,0xCC,0x23,0x08,0x00,0x30,0x00,0xC0,0x03,0x00},
{0xAC,0xC4,0x00,0x00,0x00,0x18,0x04,0x10,0x7E,0xA2,0x10,0xFF,0x10,0x82,0x14,0x82,0x7E,0x82,0x10,0x82,0x10,0xFE,0x12,0x82,0x1C,0x82,0x70,0x82,0x20,0x82,0x00,0xFE,0x00,0x82},
{0xAC,0xC5,0x00,0x00,0x08,0xD8,0x7C,0x92,0x10,0x92,0x10,0x91,0x11,0x90,0x7D,0xBF,0x12,0x90,0x10,0x90,0x14,0x88,0x18,0x88,0x70,0x89,0x20,0x85,0x00,0x85,0x00,0x83,0x00,0x81},
{0xAC,0xC6,0x00,0x00,0x06,0x18,0x04,0x10,0x3F,0xFE,0x04,0x10,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x12,0x7F,0xFF,0x11,0x20,0x12,0x24,0x1C,0x1C,0x10,0x00,0x1F,0xFE,0x10,0x00},
{0xAC,0xC7,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x80,0x06,0xB0,0x18,0x8E,0x60,0x82,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x20,0x9C,0x20,0x08},
{0xAC,0xC8,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x08,0x00,0x02,0x7F,0xFF,0x08,0x80,0x08,0x4C,0x09,0x50,0x0E,0x20,0x78,0x18,0x20,0x07},
{0xAC,0xC9,0x00,0x00,0x10,0x08,0x1F,0xFC,0x11,0x08,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x12,0x48,0x04,0x20,0x18,0x18,0x66,0x27,0x04,0x20,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x20},
{0xAC,0xCA,0x00,0x00,0x00,0x34,0x44,0x22,0x7E,0x22,0x54,0x20,0x57,0xFF,0x54,0x20,0x7C,0x20,0x54,0x60,0x54,0x50,0x54,0x50,0x7C,0x90,0x44,0x88,0x01,0x08,0x02,0x04,0x04,0x03},
{0xAC,0xCB,0x00,0x00,0x00,0xC0,0x44,0x80,0x7E,0x82,0x54,0xFF,0x54,0x84,0x55,0x84,0x7D,0x44,0x56,0x48,0x54,0x28,0x54,0x30,0x7C,0x10,0x44,0x28,0x00,0x44,0x00,0x87,0x07,0x02},
{0xAC,0xCC,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0xF0,0x29,0x12,0x09,0x13,0x0A,0x0E,0x18,0x00,0x6B,0xFC,0x49,0x08,0x08,0x90,0x10,0x60,0x11,0x98,0x26,0x07},
{0xAC,0xCD,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x04,0x29,0xFE,0x09,0x24,0x09,0x24,0x19,0x24,0x69,0xFC,0x49,0x04,0x09,0x01,0x11,0x01,0x11,0x01,0x20,0xFF},
{0xAC,0xCE,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x60,0x28,0x50,0x09,0x8C,0x0E,0x03,0x18,0xCC,0x68,0x88,0x48,0x88,0x08,0x88,0x11,0x08,0x11,0x08,0x22,0x08},
{0xAC,0xCF,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x30,0x28,0x20,0x09,0x26,0x09,0x24,0x1A,0x28,0x6A,0x50,0x48,0x50,0x08,0x88,0x10,0x88,0x11,0x04,0x26,0x03},
{0xAC,0xD0,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x68,0x28,0x44,0x0B,0xFE,0x08,0x40,0x18,0x58,0x68,0x50,0x48,0x90,0x08,0x92,0x11,0x12,0x11,0x13,0x22,0x0E},
{0xAC,0xD1,0x00,0x00,0x01,0x00,0x3F,0x8C,0x01,0x50,0x1A,0x23,0x04,0x14,0x18,0x0C,0x67,0xF3,0x00,0x80,0x00,0x84,0x3F,0xFE,0x01,0x40,0x01,0x20,0x02,0x18,0x0C,0x07,0x30,0x02},
{0xAC,0xD2,0x00,0x00,0x18,0x60,0x10,0x40,0x12,0x4E,0x1F,0x70,0x10,0x42,0x13,0x43,0x7C,0x3E,0x20,0xC0,0x09,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAC,0xD3,0x00,0x00,0x00,0xC0,0x09,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x00,0x00,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xAC,0xD4,0x00,0x00,0x19,0x02,0x11,0xFF,0x25,0x00,0x7D,0x04,0x45,0xFE,0x45,0x44,0x45,0x44,0x7D,0x24,0x45,0x28,0x45,0x10,0x45,0x18,0x7D,0x28,0x45,0x24,0x02,0x47,0x02,0x82},
{0xAC,0xD5,0x00,0x00,0x00,0x20,0x3F,0xF0,0x08,0x20,0x08,0x24,0x0F,0xBE,0x10,0x84,0x15,0x04,0x22,0x38,0x4D,0x90,0x00,0x00,0x1F,0xF8,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF},
{0xAC,0xD6,0x00,0x00,0x00,0x20,0x06,0xF0,0x04,0x20,0x08,0x10,0x17,0xFC,0x62,0x13,0x02,0x10,0x04,0xF0,0x08,0x20,0x30,0x00,0x1F,0xF8,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF},
{0xAC,0xD7,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x00,0x03,0x20,0x05,0x18,0x19,0x06,0x61,0x02,0x01,0x00,0x10,0x08,0x1F,0xFC,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF,0x00,0x00},
{0xAC,0xD8,0x00,0x00,0x00,0xC0,0x20,0x84,0x3F,0xFE,0x20,0x84,0x20,0x84,0x3F,0xFC,0x20,0x84,0x00,0x80,0x10,0x08,0x1F,0xFC,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF,0x00,0x00},
{0xAC,0xD9,0x00,0x00,0x00,0xC0,0x0C,0x88,0x08,0x84,0x13,0x82,0x61,0x1B,0x00,0x61,0x01,0x88,0x0F,0xFC,0x78,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAC,0xDA,0x00,0x00,0x48,0x20,0x7C,0x2E,0x48,0x70,0x4B,0xA0,0x78,0x20,0x49,0xA6,0x49,0x24,0x79,0x24,0x49,0x24,0x49,0xFC,0x79,0x24,0x48,0x21,0x40,0x21,0x00,0x21,0x00,0x1F},
{0xAC,0xDB,0x00,0x00,0x0C,0x00,0x08,0x82,0x08,0xFF,0x7E,0x82,0x08,0x82,0x18,0xFE,0x18,0x82,0x2C,0x82,0x2A,0xFE,0x4A,0x82,0x08,0x82,0x08,0x82,0x08,0xFE,0x08,0x82,0x08,0x00},
{0xAC,0xDC,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x84,0x20,0x84,0x3F,0xFC,0x20,0x04,0x20,0x00,0x27,0xFC,0x24,0x04,0x27,0xFC,0x24,0x04,0x27,0xFC,0x44,0x04,0x47,0xFC,0x44,0x04},
{0xAC,0xDD,0x00,0x00,0x01,0xF8,0x1F,0x00,0x01,0x00,0x3F,0xFC,0x02,0x00,0x7F,0xFF,0x04,0x00,0x07,0xF8,0x0C,0x08,0x17,0xF8,0x64,0x08,0x07,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08},
{0xAC,0xDE,0x00,0x00,0x20,0x7E,0x3F,0xC0,0x20,0x40,0x20,0x42,0x3F,0xFF,0x20,0x40,0x24,0x44,0x27,0xFE,0x24,0x04,0x27,0xFC,0x24,0x04,0x27,0xFC,0x44,0x04,0x47,0xFC,0x44,0x04},
{0xAC,0xDF,0x00,0x00,0x48,0x30,0x7C,0x90,0x48,0x88,0x49,0x08,0x79,0x04,0x4A,0x03,0x4D,0xFC,0x78,0x44,0x48,0x44,0x48,0x44,0x48,0x84,0x78,0x84,0x49,0x04,0x41,0x38,0x02,0x10},
{0xAC,0xE0,0x00,0x00,0x48,0x18,0x7C,0x10,0x48,0x10,0x48,0xD4,0x78,0x92,0x49,0x13,0x49,0x11,0x7A,0x10,0x48,0x73,0x48,0x22,0x48,0x04,0x78,0x08,0x48,0x30,0x40,0xC0,0x03,0x00},
{0xAC,0xE1,0x00,0x00,0x02,0x20,0x7F,0x30,0x02,0x50,0x34,0x48,0x08,0x48,0x00,0x84,0x7E,0xFA,0x09,0x02,0x19,0x09,0x2A,0xFC,0x28,0x08,0x48,0x10,0x08,0x10,0x38,0x20,0x10,0x20},
{0xAC,0xE2,0x00,0x00,0x02,0x18,0x7F,0x10,0x10,0x10,0x10,0x54,0x10,0x52,0x1E,0x93,0x32,0x91,0x53,0x10,0x12,0x73,0x12,0x22,0x1E,0x04,0x12,0x08,0x10,0x30,0x00,0xC0,0x03,0x00},
{0xAC,0xE3,0x00,0x00,0x08,0x42,0x7D,0xEF,0x10,0x44,0x10,0x44,0x10,0x44,0x24,0x44,0x3E,0x54,0x64,0x6F,0x25,0xC4,0x25,0x44,0x3C,0x44,0x24,0x44,0x20,0x84,0x00,0x84,0x01,0x04},
{0xAC,0xE4,0x00,0x00,0x04,0xC0,0x7E,0x81,0x10,0xBF,0x10,0x89,0x10,0xE9,0x13,0x89,0x3C,0x89,0x64,0x89,0x24,0xA9,0x24,0xC9,0x25,0x91,0x24,0x92,0x3C,0x22,0x24,0x2E,0x00,0x44},
{0xAC,0xE5,0x00,0x00,0x02,0x60,0x7F,0x40,0x08,0x42,0x08,0x7F,0x10,0x42,0x1E,0x94,0x12,0x90,0x33,0x10,0x52,0x10,0x12,0x30,0x12,0x28,0x1E,0x48,0x12,0x48,0x00,0x84,0x03,0x03},
{0xAC,0xE6,0x00,0x00,0x04,0x04,0x3E,0x7E,0x00,0x10,0x02,0x10,0x7F,0x10,0x08,0x12,0x08,0xFF,0x2A,0x10,0x2A,0x30,0x2A,0x28,0x2A,0x28,0x4A,0x44,0x48,0x44,0x08,0x82,0x09,0x01},
{0xAC,0xE7,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x10,0x00,0x10,0x7E,0xD0,0x08,0x94,0x08,0x9E,0x2A,0x90,0x2A,0x90,0x2A,0x90,0x2A,0x90,0x4A,0x90,0x48,0x92,0x09,0xFF,0x08,0x00},
{0xAC,0xE8,0x00,0x00,0x04,0x04,0x3E,0x4E,0x00,0x70,0x02,0x40,0x7F,0x42,0x08,0x7F,0x08,0x44,0x2A,0x44,0x2A,0x44,0x2A,0x44,0x2A,0x44,0x4A,0x84,0x48,0x84,0x08,0x84,0x09,0x04},
{0xAC,0xE9,0x00,0x00,0x04,0x0C,0x3E,0x9E,0x00,0xE8,0x00,0x88,0x7E,0x88,0x08,0x8A,0x08,0xFF,0x2A,0x88,0x2A,0x88,0x2A,0x88,0x2A,0x85,0x4A,0x85,0x48,0xB5,0x09,0xC3,0x08,0x81},
{0xAC,0xEA,0x00,0x00,0x00,0xFC,0x1F,0x80,0x00,0x88,0x0F,0xFC,0x08,0x88,0x08,0x88,0x0F,0xF8,0x08,0x88,0x20,0x82,0x7F,0xFF,0x20,0x82,0x20,0xC2,0x2F,0xA2,0x24,0x2E,0x20,0x04},
{0xAC,0xEB,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x88,0x0F,0xF8,0x08,0x88,0x08,0x88,0x0F,0xF8,0x08,0x88,0x20,0x82,0x7F,0xFF,0x20,0x82,0x20,0xC2,0x2F,0xA2,0x24,0x2E,0x20,0x04},
{0xAC,0xEC,0x00,0x00,0x0E,0x0C,0x78,0x88,0x08,0x68,0x0A,0x28,0x7F,0x08,0x08,0x08,0x18,0x88,0x1C,0x68,0x2A,0x2A,0x2A,0x0F,0x48,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},
{0xAC,0xED,0x00,0x00,0x0E,0x18,0x78,0x10,0x08,0x10,0x08,0x54,0x7E,0x52,0x08,0x93,0x19,0x11,0x1C,0x10,0x2A,0x73,0x2A,0x22,0x48,0x04,0x08,0x08,0x08,0x10,0x08,0x60,0x09,0x80},
{0xAC,0xEE,0x00,0x00,0x0E,0x30,0x78,0x20,0x08,0x20,0x08,0xA6,0x7E,0xA4,0x08,0xA4,0x19,0x28,0x1C,0x20,0x2A,0x50,0x2A,0x50,0x48,0x48,0x08,0x88,0x08,0x84,0x09,0x04,0x0A,0x03},
{0xAC,0xEF,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x26,0x22,0x48,0x25,0x30,0x1F,0x0F,0xF8,0x00,0x40,0x08,0x44,0x1F,0xFE,0x10,0xC0,0x03,0x40,0x0C,0x40,0x71,0xC0,0x00,0x80},
{0xAC,0xF0,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x46,0x64,0x04,0x41,0x08,0x3F,0x31,0x90,0x01,0x08,0x7F,0xFE,0x01,0x00,0x02,0x80,0x04,0x60,0x18,0x18,0x60,0x06},
{0xAC,0xF1,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x84,0x00,0x00,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xAC,0xF2,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x84,0x00,0x00,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xAC,0xF3,0x00,0x00,0x0C,0x04,0x08,0xFE,0x4A,0x04,0x2A,0x08,0x2C,0x18,0x08,0x10,0x7E,0x12,0x09,0xFF,0x2C,0x10,0x2A,0x10,0x4A,0x10,0x4A,0x10,0x48,0x10,0x08,0x70,0x08,0x20},
{0xAC,0xF4,0x00,0x00,0x18,0x06,0x10,0x04,0x20,0x04,0x6D,0xFF,0x18,0x04,0x10,0x04,0x2C,0x84,0x74,0x64,0x50,0x34,0x18,0x14,0x54,0x04,0x54,0x04,0x50,0x24,0x10,0x1C,0x10,0x08},
{0xAC,0xF5,0x00,0x00,0x18,0x00,0x10,0x04,0x20,0xFE,0x6C,0x10,0x18,0x10,0x10,0x10,0x2C,0x10,0x74,0x10,0x50,0x10,0x18,0x10,0x54,0x10,0x54,0x10,0x50,0x12,0x11,0xFF,0x10,0x00},
{0xAC,0xF6,0x00,0x00,0x18,0x04,0x11,0xFE,0x20,0x04,0x6C,0x04,0x18,0x04,0x10,0x84,0x2C,0xFC,0x74,0x84,0x50,0x80,0x18,0x80,0x54,0x82,0x54,0x82,0x50,0x82,0x10,0x83,0x10,0x7E},
{0xAC,0xF7,0x00,0x00,0x18,0x02,0x11,0xFF,0x20,0x22,0x6C,0x22,0x19,0x22,0x10,0xA2,0x2C,0xA2,0x74,0x62,0x50,0x22,0x18,0x42,0x54,0x42,0x54,0x42,0x50,0x82,0x10,0x9C,0x11,0x08},
{0xAC,0xF8,0x00,0x00,0x18,0x60,0x10,0x42,0x20,0xFF,0x6C,0x80,0x19,0x04,0x10,0xFE,0x2C,0x04,0x74,0x08,0x50,0x10,0x18,0x20,0x54,0x42,0x54,0x82,0x50,0x82,0x10,0x83,0x10,0x7E},
{0xAC,0xF9,0x00,0x00,0x18,0x60,0x10,0x40,0x20,0x42,0x6C,0xFF,0x18,0x82,0x11,0x02,0x2C,0x02,0x74,0x12,0x50,0xFA,0x18,0x02,0x54,0x02,0x54,0x02,0x50,0x44,0x10,0x38,0x10,0x10},
{0xAC,0xFA,0x00,0x00,0x18,0x04,0x10,0xFE,0x20,0x10,0x6C,0x10,0x18,0x10,0x10,0x12,0x2D,0xFF,0x74,0x10,0x50,0x10,0x18,0x10,0x54,0x10,0x54,0x10,0x50,0x10,0x10,0x70,0x10,0x20},
{0xAC,0xFB,0x00,0x00,0x30,0x04,0x24,0xFE,0x3E,0x10,0x48,0x10,0x48,0x10,0x0A,0x10,0x7F,0x10,0x08,0x10,0x08,0x10,0x2A,0x10,0x2A,0x10,0x2A,0x10,0x3E,0x12,0x22,0xFF,0x00,0x00},
{0xAC,0xFC,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x24,0x3F,0xFE,0x00,0x80,0x1F,0xF8,0x00,0x82,0x7F,0xFF,0x00,0x00,0x00,0x84,0x7F,0xFE,0x01,0x40,0x02,0x30,0x0C,0x0C,0x70,0x03},
{0xAC,0xFD,0x00,0x00,0x7E,0xFC,0x06,0x0C,0x1A,0x34,0x66,0xCC,0x1A,0x34,0x62,0xC4,0x00,0x04,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x20,0x08,0x20,0x10,0x20,0x20,0x20},
{0xAC,0xFE,0x00,0x00,0x02,0x00,0x1F,0xC6,0x02,0x18,0x7F,0xFE,0x04,0x00,0x0F,0xE8,0x74,0x08,0x03,0xF0,0x3E,0x00,0x03,0xF8,0x3E,0x00,0x03,0xFA,0x7E,0x02,0x02,0x03,0x01,0xFE},
{0xAD,0x40,0x00,0x00,0x01,0x06,0x7F,0x84,0x08,0x04,0x51,0x04,0x7F,0x7F,0x55,0x04,0x55,0x04,0x55,0x44,0x55,0x34,0x55,0x14,0x55,0x04,0x55,0x04,0x41,0x24,0x47,0x1C,0x42,0x08},
{0xAD,0x41,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x00,0x22,0x04,0x3F,0xFE,0x22,0x44,0x22,0x44,0x20,0x4C,0x02,0x02,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x0C,0x30,0x70,0x0E},
{0xAD,0x42,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04,0x00,0x00,0x7F,0xFF,0x00,0x80,0x11,0x04,0x1F,0xFE,0x12,0x44,0x12,0x44,0x12,0x5C,0x12,0x48},
{0xAD,0x43,0x00,0x00,0x01,0x22,0x7F,0xBF,0x11,0x22,0x11,0x22,0x1F,0x24,0x11,0x24,0x11,0x22,0x1F,0x22,0x11,0x21,0x11,0x21,0x1F,0x21,0x71,0x2E,0x21,0x24,0x01,0x20,0x01,0x20},
{0xAD,0x44,0x00,0x00,0x24,0x10,0x3E,0x54,0x24,0x92,0x24,0x92,0x3D,0x11,0x24,0x14,0x24,0xFE,0x24,0x10,0x3C,0x12,0x25,0xFF,0x24,0x10,0x24,0x10,0x44,0x10,0x5C,0x10,0x48,0x10},
{0xAD,0x45,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x04,0x0D,0x10,0x09,0xF8,0x15,0x00,0x63,0xFF,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x18},
{0xAD,0x46,0x00,0x00,0x24,0x02,0x3D,0xFF,0x24,0x10,0x24,0x30,0x3C,0x50,0x24,0x54,0x24,0x92,0x24,0x93,0x3D,0x11,0x24,0x10,0x24,0x10,0x24,0x10,0x44,0x02,0x5D,0xFF,0x48,0x00},
{0xAD,0x47,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x3F,0xFE,0x20,0x82,0x3F,0xFE,0x20,0x02,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xAD,0x48,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x82,0x3F,0xFE,0x20,0x82,0x3F,0xFE,0x20,0x02,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x18},
{0xAD,0x49,0x00,0x00,0x03,0x60,0x7E,0x46,0x02,0x78,0x0E,0x41,0x72,0x41,0x22,0x3F,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xAD,0x4A,0x00,0x00,0x0C,0x42,0x08,0x7F,0x0A,0x42,0x7F,0x42,0x08,0x7E,0x08,0x42,0x4A,0x42,0x7F,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x7E,0x82,0x42,0x82,0x00,0x9E,0x01,0x04},
{0xAD,0x4B,0x00,0x00,0x25,0x02,0x3D,0xFF,0x25,0x22,0x25,0x22,0x3D,0xFE,0x25,0x22,0x25,0x22,0x25,0x22,0x3D,0xFE,0x25,0x22,0x24,0x20,0x24,0x20,0x44,0x20,0x5C,0x20,0x48,0x20},
{0xAD,0x4C,0x00,0x00,0x24,0x30,0x3E,0x20,0x24,0x28,0x24,0x44,0x3C,0x46,0x25,0xFB,0x24,0x81,0x24,0x00,0x3C,0x82,0x24,0xFF,0x24,0x82,0x24,0x82,0x44,0x82,0x5C,0xFE,0x48,0x82},
{0xAD,0x4D,0x00,0x00,0x24,0xC0,0x3C,0x82,0x24,0xFF,0x25,0x02,0x3D,0x02,0x26,0xF2,0x24,0x92,0x24,0x92,0x3C,0xF2,0x24,0x82,0x24,0x9C,0x24,0x89,0x44,0x81,0x5C,0x81,0x48,0x7F},
{0xAD,0x4E,0x00,0x00,0x33,0x18,0x22,0x10,0x2E,0xD0,0x21,0x10,0x22,0x90,0x2F,0x50,0x20,0x10,0x27,0xD0,0x24,0x50,0x27,0xD0,0x24,0x50,0x27,0xD2,0x44,0x52,0x44,0x53,0x44,0xCE},
{0xAD,0x4F,0x00,0x00,0x24,0x04,0x3E,0x9E,0x24,0xF0,0x24,0x90,0x3C,0x92,0x24,0xFF,0x24,0x88,0x24,0x88,0x3C,0x88,0x24,0xB5,0x25,0xC5,0x24,0x83,0x44,0x09,0x5D,0xFC,0x48,0x00},
{0xAD,0x50,0x00,0x00,0x02,0x30,0x7F,0xA0,0x08,0x22,0x12,0x3F,0x12,0x22,0x7D,0x42,0x21,0x64,0x0C,0x54,0x08,0x94,0x7F,0x08,0x08,0x08,0x0B,0x14,0x7C,0x14,0x20,0x22,0x00,0xC1},
{0xAD,0x51,0x00,0x00,0x0C,0x0C,0x10,0x08,0x3E,0x08,0x22,0x69,0x32,0x49,0x2A,0x49,0x22,0x49,0x2F,0x49,0x7A,0x49,0x2A,0x49,0x2A,0x49,0x22,0x49,0x22,0x7F,0x4E,0x41,0x44,0x00},
{0xAD,0x52,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x04,0x3F,0xFE,0x20,0x04,0x40,0x08,0x3F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80,0x04,0x80,0x03,0x80,0x01,0x00},
{0xAD,0x53,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x21,0x08,0x19,0xFC,0x41,0x08,0x23,0x08,0x25,0x08,0x09,0x38,0x09,0x10,0x71,0x02,0x11,0x02,0x31,0x03,0x10,0xFE},
{0xAD,0x54,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x1F,0xF8,0x00,0x10,0x01,0xA0,0x00,0x42,0x7F,0xFF,0x01,0x42,0x02,0x44,0x0C,0x40,0x70,0x40,0x01,0xC0,0x00,0x80},
{0xAD,0x55,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x04,0x3F,0xFE,0x20,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x3F,0xF8,0x20,0x08,0x20,0x02,0x3F,0xFF,0x20,0x00},
{0xAD,0x56,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x02,0x7F,0xFF,0x00,0x08,0x1F,0x88,0x10,0x88,0x10,0x88,0x1F,0x88,0x10,0x88,0x00,0x08,0x00,0x78,0x00,0x10},
{0xAD,0x57,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x80,0x01,0x02,0x7F,0xFF,0x01,0x00,0x11,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAD,0x58,0x00,0x00,0x03,0x30,0x02,0x22,0x7F,0xFF,0x02,0x20,0x18,0x00,0x12,0x44,0x7F,0x7E,0x12,0x44,0x12,0x44,0x12,0x44,0x12,0x44,0x22,0x44,0x22,0x7C,0x2E,0x44,0x44,0x00},
{0xAD,0x59,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x03,0x00,0x02,0x02,0x7F,0xFF,0x04,0x00,0x04,0x08,0x0F,0xFC,0x14,0x08,0x64,0x08,0x04,0x08,0x07,0xF8,0x04,0x08},
{0xAD,0x5A,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xCC,0x10,0x82,0x1F,0xFF,0x10,0x80,0x10,0x4C,0x10,0x50,0x10,0x20,0x10,0xD2,0x23,0x12,0x2C,0x0B,0x40,0x06},
{0xAD,0x5B,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x84,0x3F,0xFE,0x01,0x80,0x02,0xE0,0x0C,0x98,0x70,0x87,0x00,0x80,0x00,0x80},
{0xAD,0x5C,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x80,0x11,0x08,0x1F,0xFC,0x11,0x08,0x7F,0xFE,0x11,0x08,0x7F,0xFF,0x10,0x08,0x10,0x08,0x10,0x38,0x10,0x10},
{0xAD,0x5D,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x04,0x20,0x20,0x04,0x3F,0xFE,0x21,0x04,0x21,0x04,0x3F,0xFC,0x21,0x04,0x21,0x04,0x21,0x04,0x3F,0xFC,0x20,0x04},
{0xAD,0x5E,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x08,0x88,0x0F,0xFC,0x08,0x88,0x08,0x88,0x08,0x8A,0x7F,0xFF,0x01,0x40,0x02,0x20,0x0C,0x18,0x70,0x07},
{0xAD,0x5F,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x30,0x83,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x02},
{0xAD,0x60,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x10,0x08,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAD,0x61,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x03,0x00,0x02,0x10,0x04,0x0C,0x7F,0xF6,0x20,0x02,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAD,0x62,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x18,0x00,0x11,0x44,0x1F,0x7E,0x11,0x44,0x22,0x44,0x5A,0x44,0x04,0x5C,0x04,0x49,0x08,0x41,0x10,0x41,0x20,0x3F},
{0xAD,0x63,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x10,0x04,0x1F,0xFE,0x20,0x04,0x2F,0xC4,0x48,0x44,0x08,0x44,0x0F,0xC8,0x08,0x32,0x08,0x02,0x08,0x03,0x07,0xFE},
{0xAD,0x64,0x00,0x00,0x04,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x80,0x02,0x60,0x0C,0x18,0x77,0xF7,0x00,0x00,0x1F,0xF8,0x01,0x08,0x01,0x08,0x01,0x78,0x01,0x10,0x01,0x00},
{0xAD,0x65,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x10,0x04,0x1F,0xFE,0x20,0x04,0x2F,0xC4,0x48,0x44,0x08,0x44,0x0F,0xC4,0x08,0x44,0x00,0x04,0x00,0x78,0x00,0x10},
{0xAD,0x66,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0xC0,0x02,0xA0,0x04,0x98,0x18,0x87,0x67,0xF2,0x00,0x80,0x00,0x80,0x00,0x80},
{0xAD,0x67,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x27,0x04,0x38,0x7E,0x23,0x44,0x22,0x44,0x22,0x44,0x2E,0x44,0x72,0x44,0x22,0x5C,0x04,0x48,0x04,0x40,0x08,0x40},
{0xAD,0x68,0x00,0x00,0x01,0x20,0x01,0xF0,0x21,0x04,0x3F,0xFE,0x21,0x04,0x21,0xE8,0x2F,0x02,0x20,0xFE,0x20,0x00,0x23,0xFC,0x22,0x00,0x2F,0xFF,0x42,0x00,0x43,0xFC,0x40,0x00},
{0xAD,0x69,0x00,0x00,0x18,0x02,0x10,0xFF,0x52,0x10,0x7F,0x10,0x52,0x10,0x52,0x10,0x52,0x10,0x7E,0x10,0x52,0x10,0x10,0x10,0x14,0x10,0x1A,0x10,0x72,0x12,0x21,0xFF,0x00,0x00},
{0xAD,0x6A,0x00,0x00,0x18,0x18,0x10,0x10,0x54,0x92,0x7E,0xFF,0x54,0x80,0x54,0x80,0x54,0x80,0x54,0x80,0x7C,0x80,0x54,0x80,0x10,0x80,0x14,0x80,0x7A,0x7E,0x22,0x00,0x00,0x00},
{0xAD,0x6B,0x00,0x00,0x02,0x30,0x7F,0x20,0x24,0x20,0x25,0x24,0x25,0xFE,0x25,0x24,0x25,0x24,0x25,0xFC,0x25,0x24,0x24,0x20,0x24,0x28,0x25,0xF5,0x44,0x85,0x44,0x01,0x43,0xFF},
{0xAD,0x6C,0x00,0x00,0x19,0x02,0x10,0x9F,0x20,0x80,0x4C,0x20,0x0A,0x22,0x11,0x5F,0x31,0x44,0x50,0x84,0x10,0x84,0x17,0x04,0x11,0x04,0x11,0x04,0x13,0x04,0x13,0x1C,0x11,0x08},
{0xAD,0x6D,0x00,0x00,0x18,0x06,0x12,0x04,0x7F,0x08,0x02,0x10,0x04,0x60,0x08,0x06,0x1B,0x04,0x2C,0x08,0x4A,0x10,0x0A,0x63,0x09,0x02,0x08,0x04,0x08,0x18,0x08,0x60,0x08,0x00},
{0xAD,0x6E,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x40,0x22,0x44,0x3F,0xFE,0x22,0x44,0x3F,0xFC,0x20,0x04,0x02,0x02,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x06,0x7C,0x38,0x04},
{0xAD,0x6F,0x00,0x00,0x18,0x18,0x12,0x10,0x1F,0x10,0x24,0x12,0x3F,0x7F,0x69,0x12,0x29,0x12,0x3F,0x12,0x29,0x12,0x29,0x12,0x3F,0x22,0x21,0x22,0x21,0x22,0x47,0x5C,0x42,0x48},
{0xAD,0x70,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x10,0x7F,0x10,0x00,0x10,0x3E,0x12,0x00,0xFF,0x3E,0x10,0x00,0x10,0x22,0x10,0x3F,0x10,0x22,0x10,0x22,0x10,0x3E,0x10,0x22,0x10},
{0xAD,0x71,0x00,0x00,0x04,0x00,0x3E,0x02,0x00,0xFF,0x7F,0x08,0x00,0x08,0x3E,0x08,0x00,0x08,0x3E,0x08,0x00,0x08,0x22,0x08,0x3F,0x08,0x22,0x08,0x22,0x08,0x3E,0x78,0x22,0x10},
{0xAD,0x72,0x00,0x00,0x02,0x30,0x3F,0x20,0x00,0x20,0x7F,0xA0,0x00,0x20,0x3F,0x30,0x00,0x28,0x3F,0x26,0x00,0x23,0x21,0x21,0x3F,0xA0,0x21,0x20,0x21,0x20,0x3F,0x20,0x21,0x20},
{0xAD,0x73,0x00,0x00,0x01,0x04,0x01,0xFE,0x01,0x00,0x11,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x06,0x30,0x18,0x0E,0x60,0x02},
{0xAD,0x74,0x00,0x00,0x04,0x20,0x07,0xF0,0x04,0x20,0x09,0xC0,0x10,0x88,0x3F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x04,0x10,0x18,0x0E,0x60,0x02},
{0xAD,0x75,0x00,0x00,0x06,0x18,0x04,0x10,0x3F,0x90,0x04,0x10,0x04,0x10,0x7F,0xD8,0x04,0x16,0x34,0x13,0x25,0x11,0x27,0x90,0x24,0x10,0x24,0x10,0x5C,0x10,0x46,0x03,0x41,0xFC},
{0xAD,0x76,0x00,0x00,0x06,0x06,0x04,0x04,0x3F,0x34,0x04,0x24,0x04,0x24,0x7F,0xA4,0x04,0x24,0x35,0x25,0x27,0xA6,0x24,0x2C,0x24,0x74,0x24,0x24,0x5C,0x04,0x43,0x03,0x40,0xFC},
{0xAD,0x77,0x00,0x00,0x44,0x08,0x7E,0x3C,0x44,0x08,0x44,0x68,0x44,0x48,0x7C,0x48,0x54,0x48,0x10,0x48,0x54,0x44,0x5E,0x44,0x50,0x84,0x50,0x82,0x5E,0x82,0x70,0x82,0x41,0x01},
{0xAD,0x78,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x41,0x08,0x1F,0xF8,0x01,0x00,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00},
{0xAD,0x79,0x00,0x00,0x0C,0x30,0x08,0x20,0x7F,0x24,0x08,0xFE,0x3F,0x24,0x29,0x24,0x3F,0x24,0x29,0x24,0x3F,0x24,0x29,0x24,0x08,0x24,0x7F,0x25,0x08,0x45,0x08,0x45,0x08,0x83},
{0xAD,0x7A,0x00,0x00,0x20,0x28,0x18,0x26,0x00,0x20,0x43,0xFE,0x30,0x20,0x01,0xAC,0x01,0x28,0x11,0x28,0x79,0x29,0x12,0x29,0x12,0x27,0x10,0x20,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xAD,0x7B,0x00,0x00,0x41,0x80,0x31,0x00,0x01,0x29,0x47,0xEF,0x31,0x29,0x01,0x29,0x01,0x29,0x11,0x29,0x7A,0x29,0x12,0x29,0x14,0xEF,0x10,0x49,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0x7C,0x00,0x00,0x20,0x04,0x1B,0xFE,0x00,0x44,0x40,0x44,0x30,0x84,0x01,0x38,0x06,0x00,0x11,0xFC,0x79,0x04,0x11,0x04,0x11,0xFC,0x11,0x04,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0x7D,0x00,0x00,0x20,0x30,0x18,0x20,0x02,0x22,0x43,0xFF,0x32,0x22,0x02,0x22,0x03,0xFE,0x12,0x22,0x7A,0x22,0x12,0x22,0x13,0xFE,0x12,0x02,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0x7E,0x00,0x00,0x22,0x02,0x1B,0xFF,0x02,0x02,0x42,0x8A,0x32,0xFA,0x02,0x8A,0x02,0x8A,0x12,0xFA,0x7A,0x8A,0x12,0x02,0x12,0x0E,0x12,0x04,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0xA1,0x00,0x00,0x20,0x30,0x19,0xA0,0x01,0x24,0x41,0xFE,0x32,0x20,0x04,0x22,0x03,0xFF,0x10,0x20,0x78,0x50,0x10,0x4C,0x10,0x86,0x13,0x02,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0xA2,0x00,0x00,0x20,0x60,0x1A,0x84,0x03,0xFE,0x42,0x04,0x32,0x04,0x02,0x04,0x03,0xFC,0x12,0x04,0x7A,0x04,0x12,0x04,0x13,0xFC,0x12,0x04,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0xA3,0x00,0x00,0x21,0x04,0x1B,0xFE,0x02,0x00,0x44,0x30,0x31,0xA4,0x01,0x3E,0x01,0xE4,0x13,0x24,0x79,0x29,0x11,0x21,0x11,0x01,0x10,0xFF,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0xA4,0x00,0x00,0x20,0x60,0x18,0x40,0x00,0x88,0x40,0x84,0x37,0xFA,0x02,0x02,0x00,0x00,0x11,0xFC,0x79,0x04,0x11,0x04,0x11,0xFC,0x11,0x04,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xAD,0xA5,0x00,0x00,0x0C,0x22,0x09,0x3F,0x7F,0xA2,0x00,0x24,0x32,0x24,0x21,0xA8,0x40,0xA4,0x13,0x22,0x0A,0x21,0x0A,0x21,0x04,0x21,0x0A,0x2E,0x09,0x24,0x11,0x20,0x20,0x20},
{0xAD,0xA6,0x00,0x00,0x0C,0x22,0x29,0x3F,0x3F,0xA2,0x21,0x22,0x3F,0x24,0x21,0x24,0x21,0x22,0x3F,0x22,0x21,0x21,0x24,0x21,0x22,0x21,0x22,0x2E,0x7D,0x24,0x21,0x20,0x00,0x20},
{0xAD,0xA7,0x00,0x00,0x0C,0x22,0x09,0x3F,0x7F,0xA2,0x08,0x22,0x11,0x24,0x1F,0xA4,0x31,0x22,0x5F,0x22,0x11,0x21,0x1F,0x21,0x11,0x21,0x11,0x2E,0x11,0x24,0x17,0x20,0x12,0x20},
{0xAD,0xA8,0x00,0x00,0x0C,0x22,0x0A,0x3F,0x12,0x22,0x11,0x22,0x21,0x24,0x5E,0xA4,0x00,0x22,0x21,0x22,0x3F,0xA1,0x21,0x21,0x21,0x21,0x21,0x2E,0x3F,0x24,0x21,0x20,0x00,0x20},
{0xAD,0xA9,0x00,0x00,0x06,0xE0,0x04,0x10,0x08,0x08,0x1F,0xF4,0x62,0x43,0x02,0x40,0x3F,0xFC,0x22,0x44,0x24,0x54,0x28,0x34,0x20,0x04,0x3F,0xFC,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xAD,0xAA,0x00,0x00,0x02,0x00,0x7F,0x02,0x14,0xFF,0x55,0x08,0x7F,0x88,0x55,0x08,0x55,0x08,0x55,0x08,0x67,0x08,0x41,0x08,0x7F,0x08,0x41,0x08,0x41,0x48,0x7F,0x38,0x41,0x10},
{0xAD,0xAB,0x00,0x00,0x00,0x18,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xAD,0xAC,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x21,0x42,0x20,0x02,0x20,0x02,0x20,0x22,0x27,0xF2,0x20,0x02,0x20,0x02,0x20,0x0E,0x20,0x04},
{0xAD,0xAD,0x00,0x00,0x49,0x04,0x7D,0xFE,0x49,0x04,0x49,0x04,0x51,0xFC,0x51,0x04,0x49,0x04,0x49,0xFC,0x45,0x20,0x45,0x23,0x79,0x14,0x51,0x08,0x41,0x68,0x47,0x84,0x42,0x03},
{0xAD,0xAE,0x00,0x00,0x48,0x02,0x7D,0xFF,0x48,0x10,0x4A,0x92,0x4A,0xFF,0x52,0x92,0x52,0xAA,0x4A,0xAA,0x4A,0xC6,0x4A,0x82,0x7A,0x8E,0x52,0x84,0x42,0x00,0x43,0xFF,0x42,0x00},
{0xAD,0xAF,0x00,0x00,0x48,0x02,0x7B,0xFF,0x48,0x10,0x49,0x22,0x51,0xFF,0x51,0x02,0x49,0x02,0x49,0x02,0x45,0xFE,0x45,0x02,0x79,0x02,0x51,0x02,0x41,0x02,0x41,0xFE,0x41,0x02},
{0xAD,0xB0,0x00,0x00,0x48,0x44,0x7C,0x7E,0x48,0x84,0x49,0x48,0x50,0x30,0x50,0xCC,0x4B,0x13,0x48,0x10,0x45,0xFE,0x44,0x90,0x78,0x92,0x53,0xFF,0x40,0x10,0x40,0x10,0x40,0x10},
{0xAD,0xB1,0x00,0x00,0x00,0x02,0x7F,0xFF,0x00,0x80,0x21,0x04,0x3F,0xFE,0x24,0x24,0x24,0x24,0x27,0xE4,0x24,0x24,0x24,0x24,0x27,0xE4,0x24,0x24,0x24,0x24,0x3F,0xFC,0x20,0x04},
{0xAD,0xB2,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x07,0xF0,0x04,0x90,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xAD,0xB3,0x00,0x00,0x01,0x00,0x1F,0xF8,0x02,0x0A,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x80,0x3F,0xFC,0x10,0x80,0x10,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xAD,0xB4,0x00,0x00,0x03,0x60,0x02,0x40,0x02,0x44,0x3E,0x7E,0x02,0x40,0x02,0x48,0x1E,0x7C,0x02,0x40,0x02,0x44,0x3E,0x7E,0x02,0x40,0x02,0x40,0x02,0x42,0x7F,0xFF,0x00,0x00},
{0xAD,0xB5,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x08,0x10,0x06,0x20,0x02,0x42,0x7F,0xFF,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAD,0xB6,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x80,0x11,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x06,0x30,0x18,0x0E,0x60,0x02},
{0xAD,0xB7,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x20,0x08,0x2F,0xE8,0x21,0x08,0x2F,0xE8,0x29,0x28,0x29,0x28,0x2F,0xE9,0x21,0x09,0x41,0x25,0x5F,0xD5,0x48,0x13,0x40,0x01},
{0xAD,0xB8,0x00,0x00,0x00,0x20,0x3F,0xF0,0x00,0x26,0x0D,0xA8,0x39,0x16,0x09,0x10,0x09,0x09,0x09,0x27,0x7F,0xF0,0x09,0x26,0x09,0x28,0x11,0x16,0x11,0x10,0x21,0x09,0x41,0x07},
{0xAD,0xB9,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x20,0x0B,0xD0,0x10,0x0C,0x6F,0xF3,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x86,0x08,0x58,0x0F,0x20,0x78,0x18,0x20,0x07},
{0xAD,0xBA,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x22,0x7F,0xFF,0x00,0x80,0x11,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAD,0xBB,0x00,0x00,0x00,0xFC,0x3F,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAD,0xBC,0x00,0x00,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x04,0xA6,0x7C,0xB8,0x04,0xA1,0x7C,0x9F,0x25,0xC0,0x02,0xA0,0x0C,0x98,0x70,0x87,0x00,0x80,0x00,0x80},
{0xAD,0xBD,0x00,0x00,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x20,0x02,0x3F,0xFF,0x40,0x02,0x41,0xF4,0x1F,0x00,0x01,0x02,0x3F,0xFA,0x01,0x03,0x00,0xFE},
{0xAD,0xBE,0x00,0x00,0x0C,0x30,0x0A,0x22,0x0B,0xFF,0x12,0x02,0x15,0xFC,0x31,0x08,0x51,0x08,0x11,0xF8,0x11,0x00,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAD,0xBF,0x00,0x00,0x0C,0x30,0x08,0x24,0x0B,0xFE,0x11,0x08,0x18,0x88,0x30,0x92,0x57,0xFF,0x10,0x00,0x11,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAD,0xC0,0x00,0x00,0x0C,0xD8,0x08,0x90,0x08,0x90,0x17,0xF2,0x12,0x1F,0x32,0x12,0x53,0xD2,0x12,0x6A,0x12,0x4A,0x12,0x44,0x12,0x44,0x12,0x4A,0x14,0x4A,0x15,0xC9,0x14,0x91},
{0xAD,0xC1,0x00,0x00,0x0C,0x30,0x0A,0x22,0x0B,0xFF,0x12,0x00,0x12,0x63,0x32,0x42,0x52,0x5F,0x12,0xC2,0x13,0x52,0x12,0x4A,0x12,0x4A,0x12,0x42,0x14,0x42,0x14,0x4E,0x14,0x44},
{0xAD,0xC2,0x00,0x00,0x0C,0x30,0x09,0xA4,0x09,0x22,0x12,0xFB,0x14,0x51,0x30,0x88,0x57,0xFF,0x11,0x04,0x12,0xFA,0x14,0x89,0x10,0x88,0x10,0xB2,0x10,0x82,0x10,0x83,0x10,0x7E},
{0xAD,0xC3,0x00,0x00,0x0C,0x30,0x0A,0x22,0x0B,0xFF,0x12,0x02,0x14,0xD8,0x30,0x91,0x50,0x91,0x11,0x0F,0x16,0x00,0x10,0x04,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xAD,0xC4,0x00,0x00,0x0C,0x30,0x08,0x20,0x0B,0xFE,0x10,0x20,0x19,0xFC,0x30,0x48,0x57,0xFF,0x11,0x04,0x16,0x23,0x11,0xFC,0x10,0x20,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x20},
{0xAD,0xC5,0x00,0x00,0x0C,0x20,0x0B,0xFE,0x08,0x20,0x11,0xFC,0x18,0x20,0x37,0xFF,0x50,0x00,0x11,0xFC,0x11,0x24,0x11,0x24,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0x1C,0x11,0x08},
{0xAD,0xC6,0x00,0x00,0x0C,0x30,0x08,0x24,0x0B,0xFE,0x10,0x20,0x10,0x22,0x37,0xFF,0x51,0x04,0x10,0x88,0x13,0xFE,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20},
{0xAD,0xC7,0x00,0x00,0x0C,0x02,0x0B,0xFF,0x08,0x20,0x12,0x22,0x1B,0xFF,0x32,0x22,0x53,0xBA,0x12,0xAA,0x12,0xAA,0x13,0x76,0x12,0x66,0x12,0x22,0x12,0x22,0x12,0x2E,0x12,0x04},
{0xAD,0xC8,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x10,0x10,0x18,0x52,0x30,0x7F,0x53,0x42,0x12,0x7E,0x12,0x42,0x12,0x7E,0x12,0x42,0x12,0x7E,0x12,0x00,0x13,0xFF,0x12,0x00},
{0xAD,0xC9,0x00,0x00,0x0C,0xCC,0x08,0x88,0x08,0x88,0x13,0xFE,0x18,0x88,0x30,0x8A,0x57,0xFF,0x10,0x00,0x11,0x04,0x11,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAD,0xCA,0x00,0x00,0x0C,0x30,0x08,0x24,0x0B,0xFE,0x10,0x50,0x18,0x8C,0x31,0x04,0x57,0xFF,0x10,0x04,0x13,0xE4,0x12,0x24,0x13,0xE4,0x12,0x24,0x10,0x04,0x10,0x3C,0x10,0x08},
{0xAD,0xCB,0x00,0x00,0x0C,0x21,0x0B,0xF1,0x08,0x85,0x11,0x05,0x11,0x25,0x37,0xD5,0x52,0x15,0x10,0xC5,0x10,0x85,0x17,0xF5,0x10,0x85,0x10,0xF1,0x17,0x81,0x12,0x07,0x10,0x02},
{0xAD,0xCC,0x00,0x00,0x0A,0x52,0x0B,0xDF,0x0A,0x52,0x13,0xDE,0x1A,0x52,0x33,0xDE,0x52,0x52,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x0E,0x12,0x04},
{0xAD,0xCD,0x00,0x00,0x0C,0x60,0x08,0x42,0x0B,0xFF,0x10,0x90,0x18,0xA8,0x31,0x24,0x53,0xFE,0x15,0x25,0x11,0xFC,0x11,0x24,0x11,0xFC,0x11,0x25,0x10,0x21,0x10,0x21,0x10,0x1F},
{0xAD,0xCE,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x00,0x11,0xFC,0x19,0x00,0x31,0xFC,0x51,0x00,0x17,0xFF,0x11,0x20,0x11,0x16,0x11,0x14,0x11,0x08,0x11,0xE8,0x17,0x04,0x12,0x03},
{0xAD,0xCF,0x00,0x00,0x0A,0x02,0x0B,0xFF,0x0A,0x02,0x12,0x02,0x13,0xFE,0x32,0x02,0x52,0x18,0x12,0xD3,0x12,0x92,0x12,0xFE,0x12,0x10,0x12,0xD3,0x14,0x92,0x14,0xFE,0x14,0x82},
{0xAD,0xD0,0x00,0x00,0x0A,0x02,0x0B,0xFF,0x0A,0x02,0x12,0x02,0x1B,0xFE,0x32,0x12,0x52,0x10,0x13,0xFF,0x12,0x10,0x12,0x92,0x12,0xFF,0x12,0x82,0x14,0x82,0x14,0xFE,0x14,0x82},
{0xAD,0xD1,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x04,0x11,0xFC,0x19,0x04,0x31,0xFC,0x51,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x17,0xFF,0x10,0x00,0x10,0xC8,0x11,0x06,0x16,0x02},
{0xAD,0xD2,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x04,0x11,0xFC,0x19,0x04,0x31,0xFC,0x51,0x04,0x10,0x00,0x12,0x02,0x13,0xFF,0x12,0x02,0x13,0xFE,0x12,0x02,0x13,0xFE,0x12,0x02},
{0xAD,0xD3,0x00,0x00,0x0A,0x02,0x0B,0xFF,0x0A,0x02,0x12,0x32,0x1A,0x22,0x32,0xFA,0x52,0x22,0x12,0x22,0x12,0xFA,0x12,0x8A,0x12,0xFA,0x12,0x8A,0x12,0x02,0x13,0xFE,0x12,0x02},
{0xAD,0xD4,0x00,0x00,0x0C,0x08,0x09,0xFC,0x08,0x08,0x10,0x08,0x13,0xFF,0x30,0x00,0x54,0x84,0x14,0xFE,0x15,0x10,0x14,0x12,0x15,0xFF,0x14,0x10,0x14,0x28,0x10,0x44,0x11,0x83},
{0xAD,0xD5,0x00,0x00,0x0C,0x30,0x09,0xA4,0x09,0x22,0x12,0x23,0x14,0x21,0x33,0xFE,0x52,0x02,0x12,0x02,0x12,0xFA,0x12,0x8A,0x12,0x8A,0x12,0xFA,0x12,0x02,0x12,0x0E,0x12,0x04},
{0xAD,0xD6,0x00,0x00,0x0C,0xD8,0x08,0x90,0x08,0x92,0x17,0x9F,0x10,0x90,0x30,0x94,0x57,0x9E,0x10,0x90,0x10,0xD2,0x17,0x9F,0x14,0x90,0x10,0x90,0x11,0x10,0x11,0x10,0x12,0x10},
{0xAD,0xD7,0x00,0x00,0x0C,0xC0,0x08,0x84,0x10,0xFE,0x10,0x84,0x35,0x48,0x56,0x30,0x14,0x4C,0x15,0x83,0x14,0x18,0x14,0x60,0x15,0x8C,0x14,0x30,0x10,0xC6,0x10,0x18,0x10,0xE0},
{0xAD,0xD8,0x00,0x00,0x0C,0x3C,0x0B,0xE0,0x08,0x22,0x13,0xFF,0x10,0x60,0x31,0xB8,0x56,0x27,0x10,0x40,0x17,0xFF,0x10,0x84,0x11,0x08,0x13,0x90,0x10,0x70,0x11,0x8C,0x16,0x03},
{0xAD,0xD9,0x00,0x00,0x0C,0xC4,0x0B,0x1E,0x0A,0x04,0x12,0x84,0x1B,0xDC,0x32,0x04,0x52,0x04,0x13,0xFC,0x12,0x94,0x10,0x90,0x10,0x90,0x10,0x92,0x11,0x12,0x11,0x13,0x16,0x0E},
{0xAD,0xDA,0x00,0x00,0x08,0x60,0x0A,0x82,0x0B,0xFF,0x12,0x22,0x1B,0xFE,0x32,0x22,0x53,0xFE,0x12,0x42,0x10,0x98,0x11,0x12,0x17,0xFF,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10},
{0xAD,0xDB,0x00,0x00,0x0C,0x60,0x08,0x50,0x08,0x88,0x11,0x04,0x16,0xFB,0x30,0x00,0x52,0x02,0x13,0xFF,0x12,0x52,0x12,0x52,0x13,0xFE,0x12,0x52,0x12,0x52,0x12,0x52,0x12,0x06},
{0xAD,0xDC,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x30,0x1B,0xEC,0x60,0x03,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x10,0x00,0x17,0xF8,0x14,0x08,0x27,0xF8,0x44,0x08},
{0xAD,0xDD,0x00,0x00,0x0C,0x70,0x18,0x18,0x10,0x04,0x2F,0xFB,0x42,0x40,0x1F,0xF8,0x02,0x4A,0x7F,0xFF,0x02,0x48,0x1F,0xF8,0x06,0x60,0x0A,0x58,0x32,0x46,0x02,0x40,0x02,0x40},
{0xAD,0xDE,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x5F,0xE4,0x04,0x20,0x09,0xC0,0x10,0x88,0x7F,0xFC,0x11,0x08,0x11,0x08,0x1F,0xF8,0x01,0x52,0x02,0x4A,0x0C,0x43,0x70,0x3E},
{0xAD,0xDF,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x06,0x30,0x08,0x0E,0x30,0x02},
{0xAD,0xE0,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x02,0x00,0x0D,0x0C,0x31,0x08,0x16,0xD0,0x18,0xA0,0x69,0xA0,0x06,0x90,0x18,0x8E,0x60,0x84,0x07,0x80,0x01,0x00},
{0xAD,0xE1,0x00,0x00,0x00,0x30,0x40,0x22,0x47,0xFF,0x20,0x20,0x2B,0xFE,0x0A,0x22,0x0B,0xFE,0x12,0x22,0x13,0xFE,0x62,0x62,0x20,0xB0,0x20,0xA8,0x61,0x27,0x26,0x22,0x00,0x20},
{0xAD,0xE2,0x00,0x00,0x00,0x20,0x41,0xFC,0x40,0x20,0x2B,0xFE,0x28,0x90,0x08,0x91,0x11,0x0F,0x16,0x80,0x10,0xFC,0x61,0x04,0x26,0x88,0x20,0x50,0x60,0x30,0x20,0xCC,0x07,0x03},
{0xAD,0xE3,0x00,0x00,0x01,0x98,0x41,0x10,0x41,0x22,0x29,0xFF,0x2B,0x10,0x0B,0x14,0x15,0xFE,0x11,0x10,0x11,0x14,0x61,0xFE,0x21,0x10,0x21,0x10,0x61,0x12,0x21,0xFF,0x01,0x00},
{0xAD,0xE4,0x00,0x00,0x02,0x02,0x43,0xFF,0x42,0x02,0x2A,0x22,0x2A,0xFA,0x0A,0x22,0x12,0xFA,0x12,0x02,0x12,0xFA,0x62,0x8A,0x22,0xFA,0x24,0x8A,0x64,0x02,0x24,0x0E,0x08,0x04},
{0xAD,0xE5,0x00,0x00,0x0C,0x03,0x09,0x02,0x7F,0x9A,0x00,0x12,0x23,0x12,0x12,0x12,0x14,0x12,0x7F,0x92,0x00,0x12,0x21,0x12,0x3F,0x82,0x21,0x02,0x21,0x12,0x3F,0x0E,0x21,0x04},
{0xAD,0xE6,0x00,0x00,0x06,0x03,0x24,0x42,0x3F,0xDA,0x40,0x52,0x58,0x12,0x11,0xD2,0x1D,0x52,0x25,0x52,0x25,0x52,0x59,0xD2,0x09,0x02,0x11,0x42,0x11,0x52,0x21,0x4E,0x40,0xC4},
{0xAD,0xE7,0x00,0x00,0x21,0x03,0x3F,0x82,0x21,0x1A,0x3F,0x12,0x21,0x12,0x3F,0x12,0x29,0x12,0x08,0x52,0x1F,0xD2,0x6A,0x52,0x12,0x42,0x64,0x82,0x18,0x92,0x67,0x0E,0x02,0x04},
{0xAD,0xE8,0x00,0x00,0x40,0x43,0x7F,0xC2,0x40,0x5A,0x51,0x52,0x4A,0x52,0x5F,0x52,0x44,0x52,0x55,0x52,0x55,0x52,0x5F,0x52,0x51,0x42,0x40,0x42,0x40,0x52,0x41,0xCE,0x40,0x84},
{0xAD,0xE9,0x00,0x00,0x09,0x03,0x1F,0x82,0x11,0x1A,0x3E,0x12,0x02,0x92,0x7F,0xD2,0x04,0x12,0x44,0xD2,0x36,0x92,0x05,0x12,0x1C,0x82,0x64,0xC2,0x44,0x52,0x1C,0x0E,0x08,0x04},
{0xAD,0xEA,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x41,0xB0,0x41,0x20,0x5F,0x3E,0x41,0x20,0x4F,0x3C,0x41,0xA0,0x5F,0x3E,0x42,0x20,0x44,0x20,0x40,0x02,0x7F,0xFF,0x40,0x00},
{0xAD,0xEB,0x00,0x00,0x2C,0x49,0x30,0x8F,0x25,0xE9,0x25,0x29,0x25,0xE9,0x25,0x29,0x25,0xE9,0x25,0x09,0x2D,0x09,0x75,0xE9,0x25,0x0F,0x09,0x0A,0x09,0xE8,0x11,0x08,0x20,0x08},
{0xAD,0xEC,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x40,0x24,0x88,0x27,0xFC,0x24,0x08,0x27,0xF8,0x24,0x08,0x27,0xF8,0x24,0x48,0x20,0x40,0x26,0x48,0x44,0x46,0x49,0xC2,0x40,0x80},
{0xAD,0xED,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x00,0x21,0x10,0x27,0xFC,0x21,0x10,0x21,0x14,0x2F,0xFE,0x20,0x00,0x23,0xF8,0x22,0x08,0x23,0xF8,0x42,0x08,0x43,0xF8,0x42,0x08},
{0xAD,0xEE,0x00,0x00,0x16,0xC4,0x18,0xBE,0x10,0x84,0x1E,0xBC,0x10,0x84,0x10,0x84,0x1E,0xBC,0x10,0x84,0x00,0x08,0x3F,0xFC,0x04,0x10,0x02,0x20,0x01,0xC0,0x0E,0x38,0x70,0x07},
{0xAD,0xEF,0x00,0x00,0x00,0x30,0x01,0xA4,0x49,0x22,0x7A,0x23,0x4D,0xFD,0x49,0x04,0x49,0x04,0x49,0xFC,0x49,0x04,0x79,0x04,0x49,0xFC,0x41,0x04,0x01,0x04,0x01,0x3C,0x01,0x08},
{0xAD,0xF0,0x00,0x00,0x20,0x84,0x3F,0xFE,0x20,0x00,0x20,0x80,0x27,0xF8,0x20,0x8A,0x3F,0xFF,0x20,0x88,0x27,0xF8,0x20,0x80,0x27,0xF8,0x24,0x08,0x44,0x08,0x47,0xF8,0x44,0x08},
{0xAD,0xF1,0x00,0x00,0x00,0x08,0x49,0xFC,0x7C,0x00,0x4B,0xFF,0x48,0x00,0x49,0xFC,0x48,0x00,0x49,0xFC,0x48,0x00,0x79,0x04,0x49,0xFE,0x41,0x04,0x01,0x04,0x01,0xFC,0x01,0x04},
{0xAD,0xF2,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x48,0x48,0x84,0x4B,0xFB,0x48,0x01,0x49,0xFC,0x49,0x04,0x79,0xFC,0x49,0x04,0x41,0xFC,0x01,0x04,0x01,0x1C,0x01,0x08},
{0xAD,0xF3,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x00,0x49,0xFC,0x49,0x04,0x49,0xFC,0x48,0x00,0x4B,0xFE,0x78,0x04,0x48,0x18,0x40,0x10,0x00,0x90,0x00,0x70,0x00,0x20},
{0xAD,0xF4,0x00,0x00,0x00,0x04,0x7F,0xFE,0x00,0x08,0x0F,0x88,0x08,0x88,0x0F,0xB8,0x08,0x90,0x00,0x02,0x7F,0xFF,0x00,0x08,0x1F,0x88,0x10,0x88,0x1F,0x88,0x10,0xB8,0x00,0x10},
{0xAD,0xF5,0x00,0x00,0x0C,0x46,0x08,0x78,0x7F,0x40,0x08,0x42,0x0F,0x7F,0x78,0x48,0x48,0x88,0x18,0x88,0x09,0x08,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAD,0xF6,0x00,0x00,0x00,0x60,0x48,0x48,0x78,0x86,0x4B,0xFA,0x48,0x90,0x48,0x91,0x49,0x0F,0x4A,0x80,0x48,0xFC,0x79,0x04,0x4A,0x88,0x44,0x50,0x00,0x20,0x00,0xD8,0x07,0x07},
{0xAD,0xF7,0x00,0x00,0x00,0x34,0x48,0x22,0x7B,0xFF,0x48,0x20,0x49,0x22,0x49,0xFF,0x49,0x22,0x49,0xFE,0x49,0x22,0x79,0xFE,0x49,0x22,0x41,0x22,0x01,0x22,0x01,0x2E,0x01,0x04},
{0xAD,0xF8,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x40,0x48,0x48,0x4B,0xFC,0x48,0x88,0x48,0x8A,0x4F,0xFF,0x48,0x00,0x79,0x04,0x49,0xFE,0x41,0x04,0x01,0x04,0x01,0xFC,0x01,0x04},
{0xAD,0xF9,0x00,0x00,0x01,0x04,0x49,0xFE,0x7D,0x24,0x49,0x24,0x49,0xFC,0x49,0x24,0x49,0x24,0x49,0xFC,0x49,0x24,0x78,0x20,0x48,0x24,0x43,0xFE,0x00,0x20,0x00,0x22,0x07,0xFF},
{0xAD,0xFA,0x00,0x00,0x22,0x44,0x3F,0x7E,0x22,0x44,0x22,0x44,0x22,0x44,0x3E,0x7C,0x22,0x44,0x00,0xB0,0x00,0x8A,0x7F,0xFF,0x01,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xAD,0xFB,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x00,0x00,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x06,0x20,0x08,0x1C,0x30,0x04},
{0xAD,0xFC,0x00,0x00,0x00,0x60,0x48,0x40,0x78,0x84,0x4B,0xFA,0x49,0x02,0x48,0x88,0x48,0xFC,0x49,0x20,0x4A,0x22,0x7B,0xFF,0x48,0x20,0x00,0x50,0x00,0x48,0x00,0x84,0x03,0x03},
{0xAD,0xFD,0x00,0x00,0x00,0x60,0x48,0x46,0x79,0xF4,0x48,0x48,0x4F,0xFF,0x48,0x20,0x48,0x48,0x4B,0xFC,0x49,0x08,0x7A,0x30,0x4D,0xFE,0x40,0x20,0x00,0x20,0x01,0xE0,0x00,0x40},
{0xAD,0xFE,0x00,0x00,0x00,0x52,0x4B,0xDF,0x79,0x52,0x49,0x52,0x49,0x54,0x4B,0xD4,0x49,0x52,0x49,0x52,0x7B,0xD1,0x49,0x51,0x41,0x51,0x02,0x5E,0x02,0x54,0x05,0xD0,0x08,0x90},
{0xAE,0x40,0x00,0x00,0x00,0xD0,0x4B,0x94,0x78,0x92,0x48,0x92,0x4B,0xFF,0x48,0x88,0x48,0x88,0x48,0xAB,0x48,0xCA,0x7B,0x8C,0x4A,0x88,0x40,0x95,0x00,0x95,0x03,0xA3,0x01,0x01},
{0xAE,0x41,0x00,0x00,0x49,0x92,0x7A,0x1F,0x4B,0xD2,0x4A,0x52,0x4B,0xD2,0x4A,0x52,0x4B,0xD2,0x4A,0x12,0x7A,0x12,0x4B,0xD2,0x42,0x1E,0x02,0x14,0x03,0xD0,0x02,0x10,0x00,0x10},
{0xAE,0x42,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x00,0x13,0xFC,0x10,0x00,0x1F,0xFE,0x22,0x40,0x22,0xA6,0x4F,0x18,0x00,0x07,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAE,0x43,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x20,0x4A,0x22,0x4B,0xFF,0x4A,0x22,0x4B,0xFE,0x4A,0x22,0x4B,0xFE,0x7A,0x22,0x49,0xA0,0x02,0xA0,0x00,0x40,0x01,0xB8,0x0E,0x07},
{0xAE,0x44,0x00,0x00,0x01,0xCE,0x48,0x30,0x7C,0x48,0x49,0x86,0x48,0x20,0x4B,0xFF,0x48,0x50,0x48,0x92,0x49,0xFF,0x7A,0x92,0x48,0x92,0x40,0x9E,0x00,0x94,0x00,0x10,0x00,0x10},
{0xAE,0x45,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0xA2,0x2F,0xFA,0x20,0x82,0x27,0xF2,0x24,0x92,0x27,0xF2,0x24,0x92,0x27,0xF2,0x24,0x92,0x24,0xB2,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xAE,0x46,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x2F,0xF2,0x21,0x02,0x27,0xE2,0x22,0x22,0x2F,0xFA,0x20,0x02,0x27,0xF2,0x24,0x12,0x27,0xF2,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xAE,0x47,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x20,0x11,0x22,0x7D,0xFF,0x11,0x22,0x11,0xFE,0x11,0x22,0x15,0xFE,0x19,0x22,0x70,0x20,0x23,0xA0,0x04,0x40,0x01,0xB8,0x0E,0x07},
{0xAE,0x48,0x00,0x00,0x18,0x34,0x10,0x22,0x13,0xFF,0x10,0x20,0x7D,0x22,0x11,0xFF,0x11,0x22,0x11,0xFE,0x15,0x22,0x19,0xFE,0x71,0x22,0x21,0x22,0x01,0x22,0x01,0x2E,0x01,0x04},
{0xAE,0x49,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x24,0x11,0x24,0x7D,0xFC,0x11,0x24,0x11,0x24,0x11,0xFC,0x15,0x24,0x18,0x20,0x70,0x24,0x23,0xFE,0x00,0x20,0x00,0x22,0x07,0xFF},
{0xAE,0x4A,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x84,0x13,0xFA,0x7D,0x02,0x10,0x88,0x10,0xFC,0x11,0x20,0x14,0x22,0x1B,0xFF,0x70,0x20,0x20,0x50,0x00,0x48,0x00,0x84,0x03,0x03},
{0xAE,0x4B,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x10,0x40,0x7C,0x84,0x13,0xFB,0x10,0x01,0x11,0xFC,0x15,0x04,0x19,0xFC,0x71,0x04,0x21,0xFC,0x01,0x04,0x01,0x1C,0x01,0x08},
{0xAE,0x4C,0x00,0x00,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x00,0x03,0xF8,0x06,0x10,0x19,0xE0,0x03,0x18,0x7C,0x07},
{0xAE,0x4D,0x00,0x00,0x03,0x00,0x02,0x04,0x7F,0xFF,0x04,0x08,0x0F,0xF4,0x14,0x03,0x67,0xF0,0x04,0x00,0x07,0xF0,0x04,0x02,0x7F,0xFF,0x02,0x00,0x04,0x10,0x3F,0xEC,0x10,0x04},
{0xAE,0x4E,0x00,0x00,0x36,0x18,0x24,0x12,0x3D,0xFF,0x24,0x10,0x04,0x10,0x7C,0x14,0x24,0xFE,0x24,0x00,0x44,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x40,0x02,0x30,0x0C,0x0C,0x70,0x03},
{0xAE,0x4F,0x00,0x00,0x00,0xFC,0x1F,0x40,0x10,0x34,0x11,0x93,0x21,0x01,0x0E,0x30,0x02,0xC0,0x01,0x08,0x3F,0xF4,0x10,0x04,0x00,0x80,0x7F,0xFF,0x01,0x20,0x06,0x18,0x78,0x07},
{0xAE,0x50,0x00,0x00,0x20,0x30,0x11,0xA4,0x45,0x23,0x2A,0x61,0x08,0x0C,0x70,0x70,0x17,0x80,0x10,0x00,0x02,0x02,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x06,0x30,0x38,0x0C},
{0xAE,0x51,0x00,0x00,0x18,0x18,0x10,0x92,0x12,0xFF,0x7E,0x82,0x12,0x82,0x12,0xFE,0x22,0x82,0x22,0x82,0x64,0xFE,0x54,0x90,0x08,0x93,0x14,0x8A,0x14,0xB4,0x21,0xC4,0x40,0x83},
{0xAE,0x52,0x00,0x00,0x30,0x49,0x23,0xEF,0x29,0x49,0x7D,0x49,0x29,0x49,0x2B,0xEA,0x29,0x4A,0x29,0x4A,0x6B,0xE9,0x51,0x49,0x11,0x49,0x29,0x4F,0x22,0x4A,0x42,0xC8,0x04,0x48},
{0xAE,0x53,0x00,0x00,0x18,0x84,0x10,0xFE,0x12,0x84,0x7E,0xFC,0x12,0x00,0x12,0x82,0x22,0xFF,0x22,0x82,0x64,0xFE,0x54,0x82,0x08,0xFE,0x14,0x82,0x14,0x82,0x20,0x8E,0x40,0x84},
{0xAE,0x54,0x00,0x00,0x30,0x44,0x20,0x7E,0x21,0x44,0x7D,0x7C,0x25,0x44,0x25,0x00,0x25,0xFE,0x25,0x24,0x64,0x24,0x58,0x24,0x0B,0xFF,0x14,0x50,0x14,0x48,0x20,0x84,0x43,0x03},
{0xAE,0x55,0x00,0x00,0x31,0x02,0x21,0xFF,0x25,0x02,0x7D,0x02,0x25,0xFE,0x25,0x00,0x25,0x1C,0x25,0x70,0x65,0x1E,0x59,0xF0,0x09,0x1E,0x15,0xF0,0x15,0x12,0x22,0x13,0x42,0x0E},
{0xAE,0x56,0x00,0x00,0x31,0x02,0x21,0xFF,0x25,0x10,0x7D,0x10,0x25,0x54,0x25,0x7E,0x25,0x44,0x25,0x44,0x65,0x44,0x59,0x7C,0x09,0x54,0x15,0x10,0x15,0x12,0x21,0xFF,0x41,0x00},
{0xAE,0x57,0x00,0x00,0x31,0x02,0x21,0xFF,0x25,0x00,0x7D,0x04,0x25,0x7E,0x25,0x00,0x25,0x02,0x25,0xFF,0x65,0x28,0x59,0x2B,0x09,0x24,0x15,0x24,0x15,0x3A,0x22,0xE2,0x42,0x41},
{0xAE,0x58,0x00,0x00,0x31,0x8C,0x20,0x50,0x25,0xFC,0x7C,0x24,0x24,0xA4,0x24,0xFC,0x24,0xA0,0x25,0x22,0x65,0xFF,0x59,0x22,0x08,0x62,0x14,0xAE,0x14,0xA4,0x21,0x20,0x40,0x20},
{0xAE,0x59,0x00,0x00,0x30,0x60,0x20,0x48,0x24,0xFC,0x7C,0x88,0x25,0x12,0x27,0xFF,0x25,0x22,0x25,0x22,0x65,0xFE,0x59,0x22,0x08,0x58,0x14,0x52,0x14,0x92,0x20,0x93,0x01,0x0E},
{0xAE,0x5A,0x00,0x00,0x30,0x68,0x21,0xCC,0x24,0x4A,0x7E,0x4A,0x25,0xFF,0x24,0x48,0x24,0x58,0x24,0x6B,0x64,0x4A,0x59,0xCC,0x09,0x58,0x14,0x65,0x14,0x45,0x21,0xC3,0x40,0x81},
{0xAE,0x5B,0x00,0x00,0x31,0x04,0x21,0xFE,0x25,0x24,0x7D,0x24,0x25,0xFC,0x25,0x24,0x25,0x24,0x25,0xFC,0x65,0x24,0x58,0x20,0x08,0x24,0x15,0xFE,0x14,0x20,0x20,0x22,0x43,0xFF},
{0xAE,0x5C,0x00,0x00,0x30,0x20,0x21,0xFC,0x25,0x24,0x7D,0xFC,0x25,0x24,0x25,0xFC,0x24,0x00,0x27,0xFF,0x64,0x80,0x58,0x84,0x08,0xFE,0x15,0x04,0x14,0x04,0x20,0x78,0x40,0x10},
{0xAE,0x5D,0x00,0x00,0x02,0x0E,0x7E,0xF0,0x02,0x10,0x04,0x26,0x18,0xC4,0x10,0x28,0x12,0x10,0x1C,0x22,0x71,0xFD,0x50,0x11,0x10,0xD4,0x10,0x92,0x11,0x13,0x72,0x11,0x20,0x10},
{0xAE,0x5E,0x00,0x00,0x21,0x04,0x3F,0x7E,0x21,0x04,0x21,0x08,0x3F,0x18,0x20,0x10,0x23,0x7E,0x3C,0x10,0x27,0x10,0x3C,0x10,0x27,0x90,0x3C,0x72,0x24,0x22,0x44,0x03,0x43,0xFE},
{0xAE,0x5F,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x40,0x02,0x40,0x84,0x1F,0xF8,0x04,0x10,0x02,0x22,0x7F,0xFF,0x00,0x80,0x00,0x82,0x3F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xAE,0x60,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x82,0x40,0xF4,0x0F,0x80,0x00,0x80,0x1F,0xF8,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8},
{0xAE,0x61,0x00,0x00,0x01,0x80,0x21,0x02,0x3F,0xFF,0x20,0x02,0x5F,0xF4,0x02,0x00,0x0D,0x18,0x33,0x20,0x04,0xC0,0x19,0xA0,0x62,0x98,0x0C,0x87,0x70,0x82,0x07,0x80,0x01,0x00},
{0xAE,0x62,0x00,0x00,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x02,0x02,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x06,0x30,0x38,0x0C},
{0xAE,0x63,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x08,0x10,0x0F,0xF0,0x09,0x10,0x02,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAE,0x64,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x46,0xD4,0x18,0x8C,0x60,0x83,0x0F,0xF9,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xAE,0x65,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x46,0x64,0x08,0x18,0x31,0x86,0x02,0x62,0x0C,0x18,0x70,0x07,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAE,0x66,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x40,0x02,0x5F,0xFC,0x10,0x00,0x17,0xF8,0x10,0x00,0x1F,0xFE,0x14,0x40,0x14,0x46,0x14,0x28,0x25,0x90,0x2E,0x0C,0x44,0x03},
{0xAE,0x67,0x00,0x00,0x0C,0x06,0x10,0x04,0x3E,0x04,0x22,0x04,0x3E,0xFF,0x22,0x04,0x3E,0x04,0x23,0x44,0x7E,0x24,0x26,0x34,0x0A,0x14,0x12,0x04,0x62,0x04,0x0E,0x1C,0x04,0x08},
{0xAE,0x68,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x23,0x50,0x26,0x4C,0x28,0x43,0x37,0xFD,0x24,0x04,0x27,0xFC,0x24,0x04,0x47,0xFC,0x44,0x04,0x44,0x1C},
{0xAE,0x69,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x22,0x10,0x2F,0xFC,0x22,0x10,0x22,0x12,0x3F,0xFF,0x24,0x40,0x24,0x2C,0x45,0x90,0x5E,0x0C,0x48,0x03},
{0xAE,0x6A,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x26,0x10,0x29,0xFF,0x36,0x10,0x24,0x14,0x2D,0xFE,0x34,0x44,0x24,0x28,0x44,0x30,0x44,0x48,0x45,0x87},
{0xAE,0x6B,0x00,0x00,0x18,0x10,0x10,0xD4,0x10,0x92,0x55,0x13,0x56,0x11,0x54,0xFE,0x54,0x82,0x54,0xFE,0x54,0x82,0x54,0x82,0x7C,0xFE,0x44,0x82,0x40,0x82,0x00,0x8E,0x00,0x84},
{0xAE,0x6C,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x12,0x55,0xFF,0x54,0x10,0x54,0xD3,0x54,0x92,0x55,0x55,0x55,0x55,0x56,0x28,0x7C,0x28,0x44,0x44,0x40,0x44,0x00,0x82,0x03,0x01},
{0xAE,0x6D,0x00,0x00,0x18,0x30,0x10,0x24,0x54,0x43,0x55,0xFD,0x54,0x48,0x54,0x49,0x54,0x87,0x55,0x40,0x54,0x7E,0x54,0x82,0x7D,0x44,0x46,0x28,0x40,0x30,0x00,0xCC,0x03,0x03},
{0xAE,0x6E,0x00,0x00,0x18,0x68,0x10,0x44,0x10,0x86,0x55,0x32,0x54,0x28,0x54,0x48,0x54,0x84,0x57,0x03,0x54,0xFC,0x54,0x84,0x7C,0x84,0x44,0x84,0x00,0x84,0x00,0xFC,0x00,0x84},
{0xAE,0x6F,0x00,0x00,0x18,0x68,0x11,0xCC,0x10,0x4A,0x54,0x4A,0x55,0xFF,0x54,0x48,0x54,0x58,0x54,0x6B,0x54,0x4A,0x55,0xCC,0x7D,0x48,0x44,0x75,0x40,0x45,0x01,0xC3,0x00,0x81},
{0xAE,0x70,0x00,0x00,0x18,0x60,0x10,0x44,0x10,0x7E,0x54,0x84,0x55,0x48,0x54,0x30,0x54,0xCC,0x57,0x13,0x54,0xFE,0x54,0x10,0x7C,0xFE,0x44,0x10,0x41,0xFF,0x00,0x10,0x00,0x10},
{0xAE,0x71,0x00,0x00,0x03,0x00,0x14,0x20,0x1F,0xF0,0x10,0x20,0x1F,0xE0,0x10,0x20,0x1F,0xE0,0x10,0x08,0x1F,0xFC,0x10,0x00,0x1F,0xFE,0x14,0x02,0x44,0x42,0x7F,0xDC,0x40,0x48},
{0xAE,0x72,0x00,0x00,0x30,0xC6,0x20,0x84,0x3F,0xFC,0x20,0x04,0x00,0x60,0x18,0x42,0x10,0xFF,0x7C,0x82,0x11,0x34,0x10,0x20,0x1C,0x20,0x70,0x50,0x20,0x48,0x00,0x84,0x07,0x03},
{0xAE,0x73,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x55,0xFC,0x55,0x04,0x55,0xFC,0x55,0x04,0x55,0x04,0x55,0xFC,0x55,0x54,0x7C,0x50,0x44,0x92,0x40,0x92,0x01,0x13,0x06,0x0E},
{0xAE,0x74,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x24,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x08,0x00,0x08,0x08,0x17,0xFC,0x10,0x40,0x20,0x40,0x20,0x42,0x4F,0xFF},
{0xAE,0x75,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x22,0x10,0x2F,0xFC,0x22,0x10,0x23,0xF0,0x22,0x90,0x28,0x84,0x2F,0xFE,0x28,0x84,0x28,0x84,0x48,0x9C,0x48,0x88,0x40,0x80},
{0xAE,0x76,0x00,0x00,0x18,0x02,0x21,0xFF,0x7C,0x20,0x45,0x22,0x45,0xFF,0x7D,0x22,0x45,0x22,0x41,0x22,0x7D,0x22,0x45,0x22,0x45,0x22,0x7D,0x2E,0x45,0x24,0x40,0x20,0x00,0x20},
{0xAE,0x77,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x40,0x2F,0xFE,0x20,0x40,0x27,0xFC,0x24,0x44,0x27,0xFC,0x24,0x44,0x27,0xFC,0x20,0x40,0x5F,0xFF,0x40,0x40,0x40,0x40},
{0xAE,0x78,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x20,0x1C,0x2E,0xF0,0x22,0x10,0x24,0x12,0x2E,0xFF,0x22,0x10,0x3A,0x14,0x24,0x7E,0x46,0x00,0x49,0x83,0x50,0x7C},
{0xAE,0x79,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x00,0x20,0x60,0x23,0x4C,0x22,0x48,0x25,0x54,0x25,0x52,0x29,0x62,0x20,0x40,0x2F,0xFE,0x40,0x40,0x40,0x42,0x5F,0xFF},
{0xAE,0x7A,0x00,0x00,0x02,0x02,0x7F,0x7F,0x02,0x02,0x22,0x22,0x3E,0x3E,0x22,0x20,0x20,0x21,0x7F,0x7F,0x49,0x49,0x13,0x13,0x65,0x65,0x09,0x09,0x71,0x31,0x0E,0x0E,0x04,0x04},
{0xAE,0x7B,0x00,0x00,0x18,0x30,0x10,0x20,0x21,0xFC,0x4C,0x20,0x08,0x22,0x13,0xFF,0x30,0x20,0x50,0x20,0x11,0xA4,0x11,0x3E,0x11,0x20,0x11,0x20,0x12,0xE0,0x12,0x30,0x14,0x0F},
{0xAE,0x7C,0x00,0x00,0x18,0x02,0x13,0xFF,0x20,0x00,0x4D,0xB6,0x09,0x24,0x12,0x48,0x31,0x24,0x50,0x92,0x10,0x00,0x13,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x00},
{0xAE,0x7D,0x00,0x00,0x18,0x60,0x10,0x50,0x20,0x90,0x4C,0x88,0x09,0x04,0x12,0xFB,0x34,0x20,0x50,0x24,0x13,0xFE,0x10,0x20,0x11,0xA8,0x11,0x24,0x12,0x26,0x14,0xE2,0x10,0x40},
{0xAE,0x7E,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x24,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x01,0x04,0x2C,0x82,0x28,0xD3,0x48,0x51,0x48,0x18,0x07,0xF0},
{0xAE,0xA1,0x00,0x00,0x00,0xC0,0x08,0x82,0x7C,0xFF,0x01,0x02,0x05,0x34,0x0A,0x20,0x70,0x50,0x20,0x8C,0x03,0x03,0x00,0x00,0x2D,0x04,0x28,0xD2,0x48,0x53,0x48,0x19,0x07,0xF0},
{0xAE,0xA2,0x00,0x00,0x04,0x08,0x7E,0x08,0x24,0x04,0x24,0x04,0x3C,0x30,0x24,0x20,0x24,0x22,0x3C,0xA2,0x24,0xA1,0x25,0x21,0x3D,0x20,0x64,0x22,0x24,0x23,0x04,0x1E,0x04,0x00},
{0xAE,0xA3,0x00,0x00,0x08,0x08,0x7D,0xFC,0x10,0x48,0x10,0x48,0x15,0xEA,0x18,0x4A,0x70,0x8B,0x21,0x06,0x00,0x00,0x0D,0x04,0x28,0xC2,0x28,0x53,0x48,0x11,0x48,0x18,0x07,0xF0},
{0xAE,0xA4,0x00,0x00,0x0C,0x00,0x09,0x42,0x7F,0x7F,0x11,0x42,0x32,0x42,0x4C,0x42,0x0A,0x7E,0x11,0x42,0x60,0x00,0x0D,0x04,0x28,0xC2,0x28,0x53,0x48,0x11,0x48,0x18,0x07,0xF0},
{0xAE,0xA5,0x00,0x00,0x06,0x30,0x04,0x24,0x3F,0xFE,0x04,0x20,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x10,0x11,0x8C,0x61,0x03,0x09,0x48,0x09,0x24,0x31,0x24,0x07,0x00,0x02,0x00},
{0xAE,0xA6,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x17,0xF4,0x10,0x84,0x11,0x64,0x12,0x14,0x1F,0xFC,0x10,0x04,0x01,0x00,0x2C,0xC4,0x28,0x52,0x48,0x13,0x48,0x19,0x07,0xF0},
{0xAE,0xA7,0x00,0x00,0x01,0x80,0x12,0x08,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x0D,0x00,0x28,0xD4,0x28,0x53,0x48,0x19,0x07,0xF0},
{0xAE,0xA8,0x00,0x00,0x18,0x10,0x10,0xD4,0x10,0x92,0x18,0x93,0x55,0x11,0x54,0xFE,0x50,0x82,0x10,0xFE,0x10,0x82,0x10,0x82,0x10,0xFE,0x10,0x82,0x10,0x82,0x10,0x8E,0x10,0x84},
{0xAE,0xA9,0x00,0x00,0x18,0x04,0x13,0xFE,0x10,0x40,0x18,0x44,0x55,0xFE,0x54,0x84,0x50,0x84,0x13,0xFF,0x10,0x00,0x11,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xAE,0xAA,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x18,0x20,0x55,0x22,0x55,0xFF,0x51,0x22,0x11,0x22,0x11,0xFE,0x11,0x22,0x10,0x70,0x11,0xAC,0x16,0x23,0x10,0x20,0x00,0x20},
{0xAE,0xAB,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x19,0xFC,0x55,0x04,0x55,0xFC,0x51,0x04,0x10,0x00,0x13,0xFE,0x10,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20},
{0xAE,0xAC,0x00,0x00,0x19,0x80,0x11,0x02,0x11,0xFF,0x1A,0x00,0x55,0xFC,0x55,0x44,0x51,0x24,0x17,0xFF,0x11,0x44,0x11,0x24,0x12,0x24,0x13,0xFF,0x12,0x08,0x10,0x78,0x10,0x10},
{0xAE,0xAD,0x00,0x00,0x19,0x8C,0x10,0x50,0x13,0xFC,0x18,0x24,0x55,0x24,0x55,0xFC,0x51,0x20,0x12,0x22,0x13,0xFF,0x12,0x62,0x10,0xA2,0x10,0xAE,0x11,0x24,0x16,0x20,0x10,0x20},
{0xAE,0xAE,0x00,0x00,0x18,0x30,0x10,0x88,0x18,0x88,0x55,0x04,0x55,0xFE,0x53,0x05,0x15,0x04,0x11,0x04,0x11,0xFC,0x10,0x50,0x10,0x52,0x10,0x92,0x10,0x92,0x11,0x13,0x16,0x0E},
{0xAE,0xAF,0x00,0x00,0x18,0x18,0x10,0x10,0x11,0xFF,0x18,0x10,0x55,0xFF,0x55,0x01,0x50,0xFE,0x10,0x04,0x10,0x18,0x10,0x12,0x11,0xFF,0x10,0x10,0x10,0x10,0x10,0xF0,0x10,0x20},
{0xAE,0xB0,0x00,0x00,0x20,0xFC,0x3F,0x00,0x20,0x00,0x3F,0xFC,0x20,0x04,0x3F,0xFC,0x20,0x00,0x2F,0xBE,0x22,0x8A,0x2C,0xB2,0x21,0x86,0x22,0x8A,0x4C,0xB2,0x43,0x8E,0x41,0x04},
{0xAE,0xB1,0x00,0x00,0x0C,0xD8,0x10,0x86,0x67,0xF2,0x01,0x20,0x3F,0xFF,0x04,0x10,0x18,0xEC,0x67,0x83,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFE,0x00,0x80,0x07,0x80,0x01,0x00},
{0xAE,0xB2,0x00,0x00,0x08,0x02,0x7F,0x7F,0x08,0x22,0x7F,0x22,0x08,0x42,0x0F,0x4E,0x78,0x74,0x0B,0x80,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFE,0x00,0x80,0x07,0x80,0x01,0x00},
{0xAE,0xB3,0x00,0x00,0x01,0xC0,0x02,0x20,0x05,0xD8,0x18,0x07,0x67,0xF0,0x04,0x10,0x04,0x10,0x07,0xF8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x80,0x07,0x80,0x01,0x00},
{0xAE,0xB4,0x00,0x00,0x18,0x10,0x10,0xD4,0x10,0x92,0x7D,0x13,0x12,0x11,0x10,0xFE,0x14,0x82,0x18,0xFE,0x70,0x82,0x50,0x82,0x10,0xFE,0x10,0x82,0x10,0x82,0x70,0x8E,0x20,0x84},
{0xAE,0xB5,0x00,0x00,0x18,0x18,0x10,0x12,0x11,0xFF,0x7C,0x10,0x10,0xD3,0x10,0x92,0x15,0x55,0x19,0x59,0x72,0x10,0x50,0x28,0x10,0x28,0x10,0x44,0x10,0x44,0x70,0x82,0x23,0x01},
{0xAE,0xB6,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x00,0x7D,0x04,0x11,0x7E,0x11,0x00,0x15,0x02,0x19,0xFF,0x71,0x48,0x51,0x4B,0x11,0x4A,0x11,0x44,0x12,0x74,0x72,0xC2,0x24,0x41},
{0xAE,0xB7,0x00,0x00,0x18,0x34,0x10,0x22,0x13,0xFF,0x7C,0x20,0x11,0x22,0x11,0xFF,0x15,0x22,0x19,0xFE,0x71,0x22,0x51,0xFE,0x11,0x22,0x11,0x22,0x11,0x22,0x71,0x2E,0x21,0x04},
{0xAE,0xB8,0x00,0x00,0x18,0x04,0x11,0xFE,0x10,0x20,0x7C,0x24,0x11,0xFE,0x10,0x44,0x14,0x44,0x1B,0xFF,0x70,0x00,0x51,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xAE,0xB9,0x00,0x00,0x19,0x01,0x11,0xFF,0x11,0x01,0x7D,0x19,0x11,0x11,0x11,0x7D,0x15,0x11,0x19,0x31,0x71,0x59,0x51,0x55,0x11,0x55,0x11,0x11,0x11,0x11,0x71,0xFF,0x21,0x01},
{0xAE,0xBA,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x7D,0xFE,0x11,0x02,0x11,0x02,0x15,0xFE,0x19,0x02,0x70,0x30,0x50,0x24,0x13,0xFE,0x10,0x20,0x10,0x22,0x77,0xFF,0x20,0x00},
{0xAE,0xBB,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x7D,0x04,0x11,0x04,0x11,0xFC,0x15,0x24,0x18,0x20,0x71,0xA0,0x51,0x24,0x11,0x3E,0x11,0x20,0x12,0xE0,0x72,0x30,0x24,0x0F},
{0xAE,0xBC,0x00,0x00,0x18,0x00,0x10,0x06,0x13,0xB8,0x78,0x88,0x11,0x08,0x11,0x0A,0x13,0xBF,0x18,0x88,0x70,0x88,0x56,0x88,0x15,0x3E,0x11,0x00,0x12,0xC0,0x72,0x3F,0x24,0x00},
{0xAE,0xBD,0x00,0x00,0x18,0x84,0x10,0xFE,0x10,0x84,0x7C,0xFC,0x10,0x00,0x11,0x02,0x15,0xFF,0x19,0x02,0x71,0xFE,0x51,0x02,0x11,0xFE,0x11,0x02,0x11,0x02,0x71,0x0E,0x21,0x04},
{0xAE,0xBE,0x00,0x00,0x18,0x60,0x10,0x48,0x10,0xFC,0x7C,0x88,0x11,0x12,0x13,0xFF,0x11,0x22,0x1D,0x22,0x71,0xFE,0x51,0x42,0x10,0x58,0x10,0x92,0x10,0x92,0x71,0x13,0x22,0x0E},
{0xAE,0xBF,0x00,0x00,0x18,0x49,0x13,0xEF,0x11,0x49,0x7D,0x49,0x11,0x49,0x13,0xEA,0x11,0x4A,0x1D,0x49,0x73,0xE9,0x51,0x49,0x11,0x49,0x12,0x4F,0x12,0x4A,0x72,0x48,0x24,0xC8},
{0xAE,0xC0,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xA6,0x7D,0x24,0x11,0x24,0x12,0xAA,0x12,0xAA,0x1C,0xB2,0x70,0x20,0x50,0x24,0x13,0xFE,0x10,0x20,0x10,0x22,0x77,0xFF,0x20,0x00},
{0xAE,0xC1,0x00,0x00,0x18,0x30,0x10,0x24,0x10,0x42,0x7D,0xFD,0x10,0x01,0x10,0x84,0x14,0xFE,0x19,0x10,0x72,0x12,0x51,0xFF,0x10,0x10,0x10,0x28,0x10,0x28,0x70,0x44,0x21,0x83},
{0xAE,0xC2,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x7D,0xFC,0x11,0x04,0x11,0xFC,0x15,0x04,0x18,0x00,0x73,0xFE,0x50,0x20,0x10,0x22,0x17,0xFF,0x10,0x20,0x70,0x20,0x20,0x20},
{0xAE,0xC3,0x00,0x00,0x1A,0x23,0x13,0xE2,0x12,0x2A,0x7E,0x2A,0x13,0xEA,0x11,0x2A,0x15,0x0A,0x19,0x2A,0x71,0xEA,0x51,0x2A,0x11,0x2A,0x11,0x22,0x12,0x22,0x72,0xEE,0x24,0x44},
{0xAE,0xC4,0x00,0x00,0x0C,0x30,0x09,0x20,0x7F,0xA2,0x00,0x3F,0x32,0x22,0x21,0x22,0x25,0x52,0x54,0x54,0x14,0x94,0x08,0x08,0x14,0x08,0x12,0x14,0x22,0x12,0x40,0x22,0x00,0xC1},
{0xAE,0xC5,0x00,0x00,0x0C,0x30,0x08,0x20,0x49,0x22,0x29,0x3F,0x2A,0x22,0x08,0x62,0x7F,0x52,0x18,0x94,0x28,0x14,0x2C,0x08,0x4B,0x08,0x49,0x14,0x08,0x12,0x08,0x22,0x08,0xC1},
{0xAE,0xC6,0x00,0x00,0x0C,0x0C,0x08,0x48,0x4B,0x28,0x2A,0x28,0x2C,0x08,0x08,0x08,0x7F,0x48,0x18,0x28,0x2C,0x2A,0x2A,0x0F,0x4A,0xF8,0x48,0x08,0x08,0x08,0x08,0x08,0x08,0x08},
{0xAE,0xC7,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x04,0x10,0x22,0x22,0x3F,0xFF,0x20,0x02,0x40,0x84,0x3F,0xFE,0x02,0x00,0x02,0x10,0x07,0xF8,0x04,0x10,0x08,0x90,0x30,0x60},
{0xAE,0xC8,0x00,0x00,0x0C,0x60,0x08,0x40,0x08,0x42,0x7E,0xFF,0x20,0x80,0x25,0x1C,0x3E,0x68,0x24,0x48,0x24,0x4B,0x24,0x4A,0x24,0x44,0x24,0x44,0x44,0x72,0x5D,0xC2,0x48,0x81},
{0xAE,0xC9,0x00,0x00,0x00,0x30,0x48,0x24,0x7D,0xFE,0x48,0x20,0x48,0x22,0x4B,0xFF,0x78,0x08,0x48,0x0A,0x4B,0xFF,0x49,0x08,0x78,0xC8,0x48,0x48,0x40,0x08,0x00,0x38,0x00,0x10},
{0xAE,0xCA,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x00,0x0C,0x18,0x12,0x24,0x3D,0x7A,0x00,0x00,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAE,0xCB,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x02,0x42,0x04,0x7F,0xFF,0x02,0x10,0x0C,0x20,0x03,0xC0,0x06,0x30,0x78,0x0C},
{0xAE,0xCC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x00,0x10,0xCC,0x0C,0x88,0x04,0x92,0x7F,0xFF,0x02,0x40,0x02,0x42,0x04,0x42,0x18,0x43,0x60,0x3E},
{0xAE,0xCD,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x50,0x48,0x50,0x4A,0x52,0x4B,0xFF,0x7A,0x52,0x4A,0x52,0x4A,0x52,0x4A,0x8E,0x4B,0x02,0x7A,0x02,0x4A,0x02,0x43,0xFE,0x02,0x02},
{0xAE,0xCE,0x00,0x00,0x00,0x30,0x48,0x20,0x7A,0x42,0x4B,0xFF,0x4A,0x02,0x4A,0x8A,0x7A,0xFA,0x4A,0x8A,0x4A,0x8A,0x4A,0x8A,0x7A,0xFA,0x4A,0x8A,0x42,0x02,0x02,0x0E,0x02,0x04},
{0xAE,0xCF,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x00,0x49,0x04,0x49,0xFE,0x49,0x04,0x79,0x04,0x49,0xFC,0x49,0x04,0x49,0x04,0x79,0xFC,0x49,0x04,0x40,0x00,0x00,0x02,0x07,0xFF},
{0xAE,0xD0,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x03,0x60,0x62,0x46,0x12,0x44,0x06,0x68,0x1A,0x50,0x62,0x4D,0x24,0x45,0x08,0x41,0x70,0x3F},
{0xAE,0xD1,0x00,0x00,0x00,0x80,0x0F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xAE,0xD2,0x00,0x00,0x41,0xA2,0x31,0x3F,0x12,0x22,0x7F,0xA2,0x08,0x3E,0x69,0xA2,0x49,0x22,0x49,0x3E,0x7F,0x22,0x49,0x22,0x08,0x22,0x08,0x42,0x10,0x42,0x10,0x4E,0x20,0x84},
{0xAE,0xD3,0x00,0x00,0x24,0x18,0x3C,0xC8,0x24,0x84,0x25,0x04,0x3D,0x02,0x26,0xFD,0x24,0x20,0x24,0x24,0x3D,0xFE,0x24,0x50,0x24,0x50,0x24,0x88,0x44,0x88,0x4D,0x04,0x4A,0x03},
{0xAE,0xD4,0x00,0x00,0x0C,0x42,0x29,0x7F,0x3F,0x42,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x42,0x21,0x42,0x24,0x7E,0x22,0x42,0x2D,0x42,0x71,0x42,0x20,0x92,0x00,0x8E,0x01,0x04},
{0xAE,0xD5,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x00,0x08,0xC4,0x18,0x83,0x19,0x01,0x2C,0x6C,0x2A,0xA8,0x4A,0x28,0x08,0x10,0x08,0x28,0x08,0x28,0x08,0x44,0x09,0x83},
{0xAE,0xD6,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x10,0x08,0x26,0x18,0xC4,0x18,0x28,0x2C,0x13,0x2A,0x12,0x4A,0x24,0x08,0xC4,0x08,0x0A,0x08,0x12,0x08,0x23,0x08,0xC1},
{0xAE,0xD7,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x21,0x02,0x5F,0xFC,0x02,0x20,0x0C,0x40,0x03,0xA0,0x04,0x18,0x18,0x8A,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xAE,0xD8,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x00,0x7D,0x04,0x11,0x7E,0x31,0x10,0x59,0x14,0x55,0x7E,0x55,0x10,0x11,0x14,0x11,0x7E,0x11,0x00,0x11,0x02,0x11,0xFF,0x11,0x00},
{0xAE,0xD9,0x00,0x00,0x0C,0x02,0x09,0xFF,0x08,0x00,0x7E,0x84,0x08,0xFE,0x18,0x84,0x18,0x84,0x2C,0xFC,0x2A,0x84,0x4A,0x84,0x08,0xFC,0x08,0x84,0x08,0x00,0x08,0x02,0x09,0xFF},
{0xAE,0xDA,0x00,0x00,0x0C,0x84,0x08,0xFE,0x08,0x84,0x7E,0x84,0x08,0xFC,0x18,0x84,0x18,0x84,0x2C,0xFC,0x2A,0xA4,0x4A,0x90,0x08,0x93,0x08,0x8A,0x08,0xE4,0x0B,0x84,0x09,0x03},
{0xAE,0xDB,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0xFE,0x7E,0x10,0x08,0x12,0x19,0xFF,0x18,0x00,0x2C,0x18,0x2A,0x10,0x4A,0xFE,0x08,0x10,0x08,0x10,0x08,0x12,0x09,0xFF,0x08,0x00},
{0xAE,0xDC,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0x12,0x7E,0xFF,0x08,0x10,0x18,0x14,0x18,0xFE,0x2C,0x00,0x2A,0x82,0x4A,0xFF,0x08,0x82,0x08,0x82,0x08,0x82,0x08,0xFE,0x08,0x82},
{0xAE,0xDD,0x00,0x00,0x0C,0x21,0x09,0xEF,0x08,0x21,0x7E,0x63,0x08,0xA5,0x18,0xA5,0x1D,0x29,0x2A,0x63,0x2A,0xA5,0x48,0xA5,0x09,0x29,0x08,0x21,0x08,0x21,0x08,0xE7,0x08,0x42},
{0xAE,0xDE,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x20,0x08,0x44,0x19,0xFB,0x18,0x81,0x2C,0x00,0x2A,0xAC,0x4A,0xA8,0x08,0xA8,0x08,0xA9,0x09,0x29,0x09,0x29,0x0A,0x07},
{0xAE,0xDF,0x00,0x00,0x00,0x02,0x7F,0xFF,0x02,0x20,0x1F,0xFC,0x12,0x24,0x12,0x24,0x1F,0xFC,0x10,0x84,0x00,0x80,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAE,0xE0,0x00,0x00,0x01,0x04,0x01,0xFE,0x01,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAE,0xE1,0x00,0x00,0x1F,0xF8,0x06,0x30,0x01,0xC0,0x0E,0x38,0x00,0x08,0x3F,0x7E,0x12,0x24,0x0C,0x18,0x32,0x66,0x02,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xAE,0xE2,0x00,0x00,0x06,0x30,0x04,0x24,0x3F,0xA2,0x04,0x22,0x04,0x20,0x7F,0xFF,0x00,0x20,0x04,0x26,0x7F,0xA4,0x0C,0x28,0x16,0x10,0x15,0x12,0x25,0x2A,0x44,0x27,0x04,0x42},
{0xAE,0xE3,0x00,0x00,0x0C,0x60,0x08,0x40,0x2A,0x4C,0x2F,0x70,0x28,0x42,0x2B,0x43,0x7C,0x3E,0x20,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAE,0xE4,0x00,0x00,0x0C,0x81,0x08,0xFF,0x08,0x81,0x7E,0xBD,0x18,0x81,0x18,0xA5,0x2C,0xBD,0x2A,0xA5,0x4A,0xA5,0x08,0xBD,0x08,0xA5,0x08,0x81,0x08,0x89,0x08,0x87,0x08,0x82},
{0xAE,0xE5,0x00,0x00,0x0C,0x0C,0x08,0x08,0x0F,0x7E,0x11,0x08,0x6A,0x48,0x04,0xFE,0x18,0x08,0x60,0xC8,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAE,0xE6,0x00,0x00,0x0C,0x60,0x08,0x44,0x08,0x7E,0x7E,0x44,0x18,0xC4,0x19,0x28,0x2C,0x30,0x2A,0x48,0x4A,0x84,0x09,0xFF,0x0A,0x84,0x08,0x84,0x08,0x84,0x08,0xFC,0x08,0x84},
{0xAE,0xE7,0x00,0x00,0x18,0x50,0x10,0x50,0x10,0x50,0x7D,0x56,0x11,0x54,0x30,0xD8,0x38,0x50,0x54,0x50,0x54,0xD8,0x13,0x56,0x12,0x52,0x10,0x50,0x10,0x91,0x10,0x91,0x13,0x0F},
{0xAE,0xE8,0x00,0x00,0x0C,0x18,0x08,0xD0,0x08,0x94,0x7E,0xFE,0x09,0x10,0x1A,0x10,0x18,0x12,0x2D,0xFF,0x2A,0x30,0x4A,0x58,0x08,0x54,0x08,0x94,0x08,0x92,0x09,0x11,0x08,0x10},
{0xAE,0xE9,0x00,0x00,0x18,0x60,0x10,0x48,0x10,0xFC,0x7C,0x88,0x11,0x12,0x33,0xFF,0x31,0x00,0x59,0x44,0x55,0x7E,0x55,0x44,0x11,0x5C,0x11,0x48,0x12,0x41,0x12,0x41,0x14,0x3F},
{0xAE,0xEA,0x00,0x00,0x0C,0x10,0x08,0xF8,0x08,0x10,0x7E,0x28,0x08,0xC4,0x1B,0x03,0x18,0xFE,0x2C,0x10,0x2A,0x14,0x4A,0xFE,0x08,0x10,0x08,0x10,0x08,0x12,0x09,0xFF,0x08,0x00},
{0xAE,0xEB,0x00,0x00,0x0C,0x30,0x08,0x22,0x08,0x3F,0x7E,0x42,0x09,0xB4,0x18,0x08,0x1C,0x30,0x2A,0xD2,0x2A,0x3F,0x48,0x42,0x09,0xB4,0x08,0x08,0x08,0x10,0x08,0x60,0x0B,0x80},
{0xAE,0xEC,0x00,0x00,0x18,0xC4,0x10,0x9E,0x11,0x00,0x7D,0x00,0x12,0x02,0x18,0xDF,0x34,0x84,0x55,0x84,0x52,0x84,0x54,0x84,0x10,0x84,0x10,0x84,0x10,0x84,0x10,0x9C,0x10,0x88},
{0xAE,0xED,0x00,0x00,0x04,0x18,0x7E,0xD0,0x10,0x94,0x12,0xFE,0x1F,0x10,0x12,0x12,0x33,0xFF,0x2A,0x30,0x44,0x58,0x04,0x54,0x08,0x94,0x08,0x92,0x11,0x11,0x20,0x10,0x00,0x10},
{0xAE,0xEE,0x00,0x00,0x04,0x60,0x7E,0x40,0x10,0x42,0x12,0xFF,0x1E,0x82,0x13,0x7A,0x32,0x4A,0x2A,0x7A,0x44,0x4A,0x04,0x7A,0x08,0x4A,0x08,0x02,0x10,0x04,0x20,0x3C,0x00,0x08},
{0xAE,0xEF,0x00,0x00,0x26,0x48,0x38,0x7C,0x20,0x48,0x3E,0x48,0x22,0x49,0x3E,0x47,0x22,0x80,0x3E,0x04,0x20,0xFE,0x3E,0x44,0x22,0x28,0x22,0x10,0x42,0x28,0x5C,0x24,0x48,0xC3},
{0xAE,0xF0,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF0,0x00,0x00,0x3F,0xF8,0x00,0x08,0x12,0xC8,0x0A,0x88,0x0B,0x08,0x3F,0xE9,0x06,0x05,0x1B,0x85,0x62,0x63,0x02,0x01},
{0xAE,0xF1,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF0,0x00,0x00,0x3F,0xF8,0x08,0x88,0x05,0x08,0x3F,0xE8,0x02,0x08,0x1F,0xC9,0x02,0x05,0x7F,0xF5,0x02,0x03,0x02,0x01},
{0xAE,0xF2,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF0,0x00,0x00,0x3F,0xF8,0x02,0x08,0x3F,0xE8,0x20,0x28,0x04,0x08,0x7F,0xE9,0x08,0x85,0x19,0x05,0x06,0x83,0x38,0x71},
{0xAE,0xF3,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF0,0x00,0x00,0x7F,0xF8,0x02,0x08,0x3F,0xE8,0x04,0x08,0x19,0x88,0x06,0x09,0x08,0xC5,0x33,0x05,0x04,0x83,0x38,0x61},
{0xAE,0xF4,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF0,0x00,0x00,0x3F,0xF8,0x00,0x08,0x3F,0xE8,0x22,0x28,0x2F,0xA8,0x22,0x29,0x25,0x25,0x28,0xA5,0x3F,0xE3,0x20,0x21},
{0xAE,0xF5,0x00,0x00,0x01,0x80,0x01,0x00,0x3F,0xFE,0x01,0x00,0x0F,0xF8,0x02,0x00,0x7F,0xFF,0x08,0x08,0x10,0xC4,0x68,0x9B,0x06,0xD0,0x01,0xA0,0x1E,0x9C,0x08,0x84,0x01,0x80},
{0xAE,0xF6,0x00,0x00,0x20,0x30,0x11,0x24,0x11,0xFE,0x45,0x04,0x25,0x04,0x29,0xFC,0x09,0x04,0x11,0x04,0x11,0xFC,0x61,0x20,0x21,0x13,0x21,0x14,0x61,0xC8,0x67,0x04,0x22,0x03},
{0xAE,0xF7,0x00,0x00,0x22,0x18,0x11,0x90,0x10,0xA4,0x47,0xFE,0x20,0x44,0x2A,0x44,0x0B,0xFC,0x12,0x44,0x12,0x42,0x67,0xFF,0x24,0xC2,0x21,0x42,0x62,0x5C,0x6C,0x48,0x20,0x40},
{0xAE,0xF8,0x00,0x00,0x20,0x10,0x10,0xD4,0x14,0x92,0x45,0x13,0x2A,0x11,0x28,0xFE,0x08,0x82,0x10,0xFE,0x10,0x82,0x70,0x82,0x10,0xFE,0x10,0x82,0x30,0x82,0x30,0x9E,0x10,0x84},
{0xAE,0xF9,0x00,0x00,0x20,0x02,0x13,0xFF,0x10,0x00,0x45,0xB6,0x25,0x24,0x2A,0x48,0x09,0x24,0x10,0x92,0x10,0x00,0x63,0xFE,0x20,0x20,0x20,0x20,0x60,0x20,0x60,0x22,0x27,0xFF},
{0xAE,0xFA,0x00,0x00,0x20,0x34,0x10,0x22,0x17,0xFF,0x40,0x20,0x2A,0x22,0x2B,0xFF,0x0A,0x22,0x13,0xFE,0x12,0x22,0x13,0xFE,0x62,0x22,0x22,0x22,0x62,0x22,0x62,0x2E,0x22,0x04},
{0xAE,0xFB,0x00,0x00,0x21,0xF8,0x10,0x0A,0x17,0xFF,0x40,0x08,0x29,0xF8,0x28,0x02,0x17,0xFF,0x14,0x02,0x28,0x08,0x23,0xFC,0x61,0x08,0x20,0x90,0x20,0x60,0x21,0x98,0x06,0x06},
{0xAE,0xFC,0x00,0x00,0x21,0x80,0x11,0x02,0x11,0xFF,0x4A,0x00,0x2D,0xFC,0x29,0x44,0x11,0x24,0x17,0xFF,0x61,0x44,0x21,0x24,0x22,0x24,0x63,0xFF,0x62,0x08,0x20,0x78,0x00,0x10},
{0xAE,0xFD,0x00,0x00,0x21,0x80,0x11,0x13,0x11,0x1C,0x47,0xD0,0x21,0x10,0x29,0x1F,0x09,0x52,0x11,0x92,0x17,0x12,0x65,0x12,0x21,0x12,0x21,0x12,0x61,0x22,0x67,0x22,0x22,0x42},
{0xAE,0xFE,0x00,0x00,0x21,0x04,0x11,0xFE,0x11,0x04,0x45,0xFC,0x24,0x00,0x2A,0x02,0x0B,0xFF,0x12,0x02,0x13,0xFE,0x62,0x02,0x23,0xFE,0x22,0x02,0x62,0x02,0x62,0x0E,0x22,0x04},
{0xAF,0x40,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x44,0x46,0x44,0x2B,0xFC,0x2A,0x44,0x0A,0x44,0x13,0xFC,0x12,0x44,0x60,0x40,0x20,0x48,0x23,0xFC,0x60,0x40,0x60,0x42,0x2F,0xFF},
{0xAF,0x41,0x00,0x00,0x20,0x30,0x10,0x20,0x11,0xA4,0x45,0x3E,0x25,0x20,0x29,0x22,0x0B,0xFF,0x10,0x20,0x13,0x20,0x22,0x26,0x6C,0xE4,0x20,0x48,0x20,0x30,0x21,0xC0,0x0E,0x00},
{0xAF,0x42,0x00,0x00,0x20,0x3E,0x13,0xC8,0x12,0x26,0x42,0x22,0x24,0x04,0x29,0xFE,0x08,0x04,0x10,0x08,0x10,0x32,0x67,0xFF,0x20,0x20,0x20,0x20,0x61,0x20,0x60,0xE0,0x20,0x40},
{0xAF,0x43,0x00,0x00,0x20,0x60,0x10,0x48,0x10,0x86,0x03,0xFA,0x44,0x90,0x28,0x91,0x29,0x0F,0x12,0x80,0x10,0xFC,0x61,0x04,0x26,0x88,0x20,0x50,0x60,0x20,0x60,0xD8,0x2F,0x07},
{0xAF,0x44,0x00,0x00,0x20,0xC8,0x10,0x84,0x11,0x06,0x45,0x32,0x2A,0x60,0x28,0x50,0x08,0x88,0x11,0x04,0x13,0xFE,0x65,0x05,0x21,0x04,0x21,0x04,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xAF,0x45,0x00,0x00,0x20,0x30,0x11,0xA0,0x11,0x24,0x41,0xFE,0x2A,0x20,0x2C,0x22,0x0B,0xFF,0x10,0x00,0x11,0x04,0x71,0xFE,0x11,0x04,0x11,0x04,0x31,0x04,0x31,0xFC,0x11,0x04},
{0xAF,0x46,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x08,0x40,0xD0,0x2A,0x22,0x2B,0xFF,0x0A,0x22,0x13,0xFE,0x12,0x22,0x63,0xFE,0x22,0x22,0x22,0x22,0x62,0x22,0x62,0x2E,0x22,0x04},
{0xAF,0x47,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x44,0x42,0x44,0x29,0x44,0x28,0x84,0x09,0x3C,0x12,0x08,0x10,0x20,0x61,0x90,0x21,0x14,0x25,0x03,0x65,0x09,0x69,0x0C,0x20,0xF8},
{0xAF,0x48,0x00,0x00,0x20,0x30,0x10,0x22,0x13,0xFF,0x40,0x20,0x25,0xA6,0x29,0x24,0x09,0x24,0x12,0xAA,0x12,0xA9,0x64,0x50,0x20,0x50,0x20,0x88,0x60,0x88,0x61,0x04,0x26,0x03},
{0xAF,0x49,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x43,0xFC,0x2A,0x04,0x2B,0xFC,0x0A,0x04,0x10,0x60,0x10,0x44,0x67,0xFE,0x20,0x40,0x20,0x40,0x60,0x42,0x6F,0xFF,0x20,0x00},
{0xAF,0x4A,0x00,0x00,0x21,0x04,0x11,0xFE,0x11,0x04,0x45,0xFC,0x25,0x04,0x28,0x00,0x0B,0xFE,0x12,0x22,0x12,0x22,0x63,0xFE,0x22,0x00,0x22,0x02,0x62,0x02,0x62,0x03,0x21,0xFE},
{0xAF,0x4B,0x00,0x00,0x20,0x30,0x13,0x23,0x12,0x22,0x43,0xFE,0x22,0x02,0x28,0x60,0x08,0x90,0x11,0x08,0x12,0xF4,0x6C,0x03,0x21,0xF8,0x20,0x08,0x60,0x10,0x60,0x20,0x20,0x40},
{0xAF,0x4C,0x00,0x00,0x19,0x0C,0x10,0xC8,0x16,0x52,0x55,0xFF,0x58,0x10,0x50,0x14,0x10,0xFE,0x10,0x10,0x18,0x10,0x14,0x12,0x25,0xFF,0x24,0x10,0x20,0x10,0x40,0x10,0x00,0x10},
{0xAF,0x4D,0x00,0x00,0x18,0xCC,0x10,0x88,0x10,0x88,0x16,0x88,0x55,0xFE,0x58,0x88,0x50,0x88,0x10,0x88,0x10,0x8A,0x13,0xFF,0x28,0x00,0x24,0xC8,0x24,0x84,0x41,0x06,0x02,0x02},
{0xAF,0x4E,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xFB,0x16,0x22,0x54,0x24,0x5B,0xFF,0x50,0x20,0x10,0xFE,0x11,0x80,0x1A,0xFC,0x28,0x84,0x24,0x04,0x24,0x08,0x40,0x70,0x00,0x20},
{0xAF,0x4F,0x00,0x00,0x18,0x60,0x10,0x44,0x10,0x7E,0x16,0x44,0x54,0xC4,0x59,0x28,0x50,0x30,0x50,0x48,0x18,0x84,0x15,0xFF,0x16,0x84,0x22,0x84,0x20,0x84,0x20,0xFC,0x40,0x84},
{0xAF,0x50,0x00,0x00,0x00,0x83,0x3F,0xDA,0x08,0x12,0x08,0x92,0x0F,0xD2,0x10,0x92,0x68,0x92,0x05,0x12,0x02,0x02,0x0C,0x0E,0x70,0x04,0x00,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xAF,0x51,0x00,0x00,0x01,0x80,0x12,0x10,0x1F,0xF8,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10,0x10,0x04,0x1F,0xFE,0x10,0x00,0x0F,0xFF,0x2A,0x82,0x45,0x42,0x45,0x5C,0x00,0x08},
{0xAF,0x52,0x00,0x00,0x06,0x30,0x18,0x0C,0x66,0x64,0x01,0x80,0x06,0x78,0x79,0x07,0x03,0xF0,0x0C,0x20,0x32,0xC0,0x03,0x3F,0x0C,0x42,0x71,0xA4,0x00,0x18,0x00,0xE0,0x0F,0x00},
{0xAF,0x53,0x00,0x00,0x0C,0x18,0x28,0x10,0x28,0xFE,0x3E,0x10,0x48,0x10,0x49,0xFF,0x0A,0x08,0x0C,0x0A,0x19,0xFF,0x78,0x08,0x29,0x08,0x08,0xC8,0x08,0x08,0x08,0x38,0x08,0x10},
{0xAF,0x54,0x00,0x00,0x44,0x30,0x25,0x24,0x19,0xFE,0x11,0x04,0x29,0x04,0x49,0xFC,0x0D,0x04,0x15,0x04,0x15,0xFC,0x25,0x20,0x45,0x13,0x05,0x14,0x45,0x68,0x39,0x84,0x11,0x03},
{0xAF,0x55,0x00,0x00,0x46,0x18,0x24,0x12,0x19,0xFF,0x10,0x10,0x28,0x92,0x48,0x92,0x0C,0x92,0x15,0x55,0x15,0x55,0x24,0x30,0x44,0x28,0x04,0x48,0x44,0x44,0x38,0x84,0x11,0x03},
{0xAF,0x56,0x00,0x00,0x46,0x82,0x24,0xFF,0x18,0x82,0x10,0x82,0x28,0xFE,0x48,0x82,0x0C,0x82,0x14,0xFE,0x14,0x82,0x24,0x82,0x44,0xFE,0x04,0x82,0x44,0x68,0x38,0x86,0x13,0x02},
{0xAF,0x57,0x00,0x00,0x4C,0x82,0x28,0xFF,0x10,0x92,0x10,0x92,0x28,0xFE,0x48,0x92,0x0C,0x92,0x14,0xFE,0x14,0x92,0x24,0x10,0x44,0x14,0x04,0xFE,0x44,0x10,0x38,0x12,0x11,0xFF},
{0xAF,0x58,0x00,0x00,0x46,0x84,0x24,0xFE,0x18,0x84,0x10,0xFC,0x28,0x00,0x49,0x02,0x0D,0xFF,0x15,0x02,0x15,0xFE,0x25,0x02,0x45,0xFE,0x05,0x02,0x45,0x02,0x39,0x0E,0x11,0x04},
{0xAF,0x59,0x00,0x00,0x0C,0x0C,0x08,0x08,0x0A,0x0A,0x7F,0x7F,0x08,0x08,0x10,0x10,0x13,0x13,0x62,0x62,0x14,0x14,0x0C,0x0C,0x08,0x08,0x08,0x08,0x12,0x12,0x7D,0x7D,0x21,0x21},
{0xAF,0x5A,0x00,0x00,0x00,0x60,0x08,0x42,0x7C,0x5F,0x11,0x44,0x11,0x44,0x11,0x44,0x7D,0x44,0x12,0x5F,0x12,0x44,0x10,0x44,0x1C,0x84,0x70,0x84,0x21,0x04,0x01,0x1F,0x02,0x00},
{0xAF,0x5B,0x00,0x00,0x00,0x30,0x08,0x22,0x7D,0xFF,0x10,0x20,0x10,0x48,0x10,0x44,0x7D,0xFA,0x10,0x82,0x10,0x00,0x10,0xA8,0x1C,0xA8,0x70,0xA9,0x21,0x29,0x01,0x29,0x02,0x27},
{0xAF,0x5C,0x00,0x00,0x09,0x04,0x7D,0xFE,0x11,0x04,0x11,0xF4,0x11,0x44,0x7D,0x44,0x11,0xF4,0x11,0x54,0x11,0x54,0x1D,0x54,0x71,0x75,0x22,0x55,0x02,0x45,0x02,0x43,0x04,0x41},
{0xAF,0x5D,0x00,0x00,0x00,0x18,0x08,0xD0,0x7C,0x94,0x10,0xFE,0x10,0x90,0x11,0x10,0x7C,0x12,0x11,0xFF,0x10,0x30,0x14,0x58,0x18,0x54,0x70,0x94,0x20,0x92,0x01,0x11,0x00,0x10},
{0xAF,0x5E,0x00,0x00,0x00,0x30,0x08,0x20,0x7D,0xFE,0x10,0x20,0x10,0x22,0x13,0xFF,0x7C,0x00,0x10,0x30,0x10,0x24,0x15,0xFE,0x18,0x20,0x70,0x20,0x20,0x22,0x07,0xFF,0x00,0x00},
{0xAF,0x5F,0x00,0x00,0x00,0x60,0x08,0x44,0x7C,0x7E,0x10,0x44,0x10,0xC4,0x11,0x28,0x7C,0x30,0x10,0x48,0x10,0x84,0x15,0xFF,0x1A,0x84,0x70,0x84,0x20,0x84,0x00,0xFC,0x00,0x84},
{0xAF,0x60,0x00,0x00,0x00,0x30,0x44,0x20,0x7D,0xA8,0x55,0x26,0x56,0x22,0x54,0x20,0x7D,0xFE,0x54,0x20,0x54,0x20,0x54,0x22,0x57,0xFF,0x7C,0x20,0x44,0x20,0x00,0x20,0x00,0x20},
{0xAF,0x61,0x00,0x00,0x0C,0x30,0x09,0x20,0x7F,0xA2,0x00,0x3F,0x41,0x22,0x7F,0x44,0x49,0x44,0x49,0x88,0x7F,0x08,0x49,0x14,0x49,0x14,0x7F,0x24,0x41,0x22,0x00,0x42,0x00,0x81},
{0xAF,0x62,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0x30,0x01,0x40,0x00,0x88,0x7F,0xF6,0x20,0x02,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x08},
{0xAF,0x63,0x00,0x00,0x01,0x80,0x01,0x10,0x02,0x08,0x1F,0xF4,0x08,0x04,0x01,0x00,0x7F,0xFF,0x04,0x08,0x18,0x04,0x6F,0xFB,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x08},
{0xAF,0x64,0x00,0x00,0x27,0x02,0x38,0x7F,0x20,0x12,0x22,0x12,0x22,0x22,0x7D,0x22,0x21,0x4C,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xAF,0x65,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x80,0x29,0x08,0x09,0xFC,0x0A,0x20,0x18,0x24,0x6B,0xFE,0x48,0x20,0x08,0x50,0x10,0x48,0x10,0x84,0x23,0x03},
{0xAF,0x66,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x2B,0xFE,0x28,0x20,0x0A,0x22,0x0B,0xFF,0x1A,0x22,0x6A,0x52,0x4A,0x4A,0x0A,0x8A,0x12,0x02,0x12,0x1E,0x22,0x04},
{0xAF,0x67,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x04,0x2B,0xFE,0x08,0x20,0x08,0x20,0x1B,0x24,0x6A,0x3E,0x4A,0x20,0x0A,0x20,0x12,0x22,0x17,0xFF,0x20,0x00},
{0xAF,0x68,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x20,0x2A,0x24,0x2B,0xFE,0x0A,0x24,0x0A,0x20,0x1B,0xFC,0x6A,0x84,0x4A,0x48,0x0A,0x30,0x12,0x50,0x14,0x4C,0x25,0x83},
{0xAF,0x69,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x8C,0x29,0x08,0x0F,0xFF,0x09,0x08,0x19,0x08,0x69,0xF8,0x49,0x08,0x09,0x08,0x11,0x08,0x11,0xF8,0x21,0x08},
{0xAF,0x6A,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x08,0x29,0xFC,0x09,0x08,0x09,0x08,0x19,0xF8,0x69,0x08,0x49,0x08,0x09,0xF8,0x11,0x08,0x11,0x0A,0x27,0xFF},
{0xAF,0x6B,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x80,0x28,0xFC,0x29,0x08,0x0E,0x90,0x08,0x60,0x19,0x98,0x6E,0x07,0x48,0xC0,0x08,0x20,0x10,0x1C,0x11,0xE0,0x20,0x80},
{0xAF,0x6C,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x60,0x28,0x90,0x09,0x0C,0x0E,0x33,0x18,0xC0,0x6B,0x18,0x48,0x60,0x09,0x8C,0x10,0x30,0x10,0xC0,0x23,0x00},
{0xAF,0x6D,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x80,0x29,0x09,0x0F,0xEF,0x09,0x29,0x19,0x29,0x69,0x29,0x49,0x29,0x09,0x29,0x12,0x2F,0x12,0xE9,0x24,0x40},
{0xAF,0x6E,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x04,0x29,0xFE,0x09,0x04,0x09,0x04,0x19,0xFC,0x69,0x04,0x49,0x04,0x09,0xFC,0x11,0x04,0x10,0x00,0x27,0xFF},
{0xAF,0x6F,0x00,0x00,0x00,0xC0,0x09,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x01,0x02,0x7F,0xFF,0x02,0x20,0x04,0x90,0x1B,0xEC,0x60,0x83,0x00,0x80},
{0xAF,0x70,0x00,0x00,0x06,0x30,0x04,0x20,0x25,0x22,0x3F,0x7F,0x25,0x42,0x24,0x82,0x24,0x7A,0x3F,0x4A,0x21,0x4A,0x2A,0x7A,0x24,0x42,0x26,0x4C,0x49,0x41,0x49,0x41,0x50,0x3F},
{0xAF,0x71,0x00,0x00,0x06,0xE0,0x04,0x20,0x08,0x10,0x08,0x4C,0x37,0xE3,0x00,0x00,0x0C,0x70,0x08,0x10,0x10,0x0C,0x60,0x03,0x1F,0xF8,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF},
{0xAF,0x72,0x00,0x00,0x00,0xC0,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x02,0x00,0x04,0x10,0x3F,0xEC,0x10,0x04,0x00,0x00,0x1F,0xFC,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xAF,0x73,0x00,0x00,0x01,0x80,0x01,0x00,0x11,0x08,0x1F,0xFC,0x11,0x08,0x11,0x0A,0x7F,0xFF,0x02,0x20,0x0C,0x18,0x70,0x07,0x1F,0xF8,0x12,0x48,0x12,0x48,0x12,0x4A,0x7F,0xFF},
{0xAF,0x74,0x00,0x00,0x48,0x30,0x78,0x22,0x4B,0xFF,0x48,0x40,0x78,0x40,0x48,0xCC,0x49,0x88,0x78,0x50,0x48,0x30,0x48,0x20,0x48,0x48,0x78,0x44,0x48,0x84,0x43,0xFA,0x01,0x02},
{0xAF,0x75,0x00,0x00,0x00,0x40,0x7F,0xFF,0x00,0x80,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x0A,0x7F,0xFF,0x02,0x08,0x04,0x06,0x38,0x02},
{0xAF,0x76,0x00,0x00,0x49,0x02,0x79,0xFF,0x49,0x02,0x49,0x02,0x79,0xFE,0x49,0x12,0x49,0x10,0x79,0x12,0x49,0xFF,0x49,0x10,0x49,0x09,0x79,0x09,0x49,0xE5,0x07,0x03,0x02,0x01},
{0xAF,0x77,0x00,0x00,0x48,0x0C,0x78,0x3E,0x4B,0xC0,0x48,0x30,0x78,0x24,0x4B,0xFE,0x48,0x04,0x78,0x08,0x48,0x10,0x48,0x20,0x48,0xC0,0x7B,0x00,0x4A,0x80,0x04,0x63,0x04,0x1C},
{0xAF,0x78,0x00,0x00,0x30,0x84,0x20,0xFE,0x24,0x80,0x3E,0x80,0x48,0x84,0x48,0xFE,0x08,0x84,0x7E,0x84,0x08,0x84,0x14,0xFC,0x14,0x84,0x22,0x80,0x22,0x82,0x40,0xFF,0x00,0x80},
{0xAF,0x79,0x00,0x00,0x04,0x04,0x7E,0xFE,0x10,0x10,0x10,0x54,0x10,0x54,0x24,0x92,0x3E,0x92,0x64,0x10,0x25,0xFF,0x24,0x10,0x24,0x10,0x3C,0x10,0x24,0x10,0x20,0x10,0x00,0x10},
{0xAF,0x7A,0x00,0x00,0x02,0x18,0x7F,0x10,0x08,0x12,0x08,0x1F,0x10,0x10,0x12,0x10,0x1E,0x10,0x32,0x92,0x52,0xFF,0x12,0x82,0x12,0x82,0x1E,0x82,0x12,0x82,0x10,0xFE,0x00,0x82},
{0xAF,0x7B,0x00,0x00,0x01,0x04,0x09,0xFE,0x7D,0x00,0x11,0x18,0x11,0x10,0x21,0x54,0x3D,0x7E,0x65,0x54,0x25,0x54,0x25,0x5C,0x25,0x54,0x3D,0x10,0x25,0x12,0x21,0xFF,0x01,0x00},
{0xAF,0x7C,0x00,0x00,0x02,0x18,0x7F,0x10,0x08,0x14,0x08,0xFE,0x10,0x10,0x12,0x10,0x1E,0x12,0x32,0xFF,0x52,0x10,0x12,0x10,0x12,0x24,0x1E,0x24,0x12,0x42,0x10,0xFD,0x00,0x41},
{0xAF,0x7D,0x00,0x00,0x00,0x18,0x04,0x10,0x7E,0x92,0x10,0xFF,0x10,0x92,0x24,0x94,0x3E,0x90,0x64,0xFE,0x24,0xA2,0x24,0xA4,0x24,0x94,0x3D,0x08,0x25,0x14,0x21,0x14,0x02,0x63},
{0xAF,0x7E,0x00,0x00,0x04,0x18,0x7E,0x10,0x10,0x92,0x10,0xFF,0x10,0x92,0x24,0x92,0x3E,0xFE,0x64,0x92,0x24,0x92,0x24,0xFE,0x24,0x92,0x3C,0x10,0x24,0x10,0x20,0x10,0x00,0x10},
{0xAF,0xA1,0x00,0x00,0x04,0x04,0x7E,0x9E,0x10,0xF0,0x10,0x90,0x10,0x92,0x24,0xFF,0x3E,0x88,0x64,0x88,0x24,0x88,0x24,0xB4,0x25,0xC5,0x3C,0x85,0x24,0x13,0x23,0xF9,0x00,0x01},
{0xAF,0xA2,0x00,0x00,0x04,0x0C,0x7E,0x3E,0x11,0xC0,0x10,0x30,0x10,0x24,0x25,0xFE,0x3C,0x04,0x64,0x08,0x24,0x10,0x24,0x20,0x24,0x40,0x3D,0x80,0x25,0x40,0x22,0x23,0x02,0x1C},
{0xAF,0xA3,0x00,0x00,0x04,0x84,0x7E,0xFE,0x10,0x84,0x10,0x84,0x10,0x84,0x24,0xFC,0x3E,0x84,0x64,0x84,0x24,0x84,0x24,0xFC,0x24,0x84,0x3C,0x84,0x24,0x84,0x20,0x84,0x03,0xFF},
{0xAF,0xA4,0x00,0x00,0x04,0x60,0x7E,0x42,0x10,0x7F,0x10,0xA0,0x10,0xA0,0x25,0x24,0x3C,0x3E,0x64,0x20,0x24,0x20,0x24,0x24,0x24,0x3E,0x3C,0x20,0x24,0x20,0x20,0x20,0x00,0x20},
{0xAF,0xA5,0x00,0x00,0x04,0xC0,0x7E,0x80,0x10,0x82,0x11,0xFF,0x11,0x02,0x22,0xF2,0x3C,0x92,0x64,0x92,0x24,0xF2,0x24,0x84,0x24,0x98,0x3C,0x81,0x24,0x81,0x20,0x81,0x00,0x7F},
{0xAF,0xA6,0x00,0x00,0x04,0x20,0x3E,0x10,0x00,0x16,0x02,0x44,0x7F,0x44,0x08,0x48,0x09,0x48,0x29,0x52,0x2A,0x52,0x2A,0x61,0x2A,0x45,0x48,0xC4,0x4B,0x46,0x08,0x3C,0x08,0x00},
{0xAF,0xA7,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x12,0x02,0xFF,0x7F,0x20,0x08,0x20,0x08,0x40,0x2A,0x42,0x2A,0xFF,0x2B,0x42,0x2A,0x42,0x4A,0x42,0x48,0x42,0x08,0x7E,0x08,0x42},
{0xAF,0xA8,0x00,0x00,0x04,0x02,0x3E,0xFF,0x00,0x02,0x02,0x12,0x7F,0x7A,0x08,0x02,0x08,0x7A,0x2A,0x4A,0x2A,0x4A,0x2A,0x7A,0x2A,0x4A,0x4A,0x02,0x48,0x02,0x08,0x1E,0x08,0x04},
{0xAF,0xA9,0x00,0x00,0x0C,0xCC,0x08,0x88,0x0F,0xF8,0x30,0x83,0x20,0x82,0x3F,0xFE,0x20,0x02,0x0F,0xF8,0x00,0x00,0x7F,0xFF,0x00,0x80,0x0C,0x98,0x10,0x86,0x67,0x82,0x01,0x00},
{0xAF,0xAA,0x00,0x00,0x04,0x44,0x3E,0x7E,0x00,0x44,0x02,0x44,0x7F,0x44,0x08,0x7C,0x08,0x44,0x2A,0x44,0x2A,0x44,0x2A,0x7C,0x2A,0x44,0x4A,0x44,0x48,0x44,0x09,0xFF,0x08,0x00},
{0xAF,0xAB,0x00,0x00,0x04,0x0C,0x3E,0x08,0x00,0x49,0x02,0x7F,0x7F,0x49,0x08,0x49,0x08,0x7F,0x2A,0x49,0x2A,0x49,0x2A,0x7F,0x2A,0x49,0x4A,0x08,0x48,0x08,0x08,0x08,0x08,0x08},
{0xAF,0xAC,0x00,0x00,0x04,0x82,0x3E,0xFF,0x00,0x82,0x04,0x82,0x7E,0x82,0x08,0x82,0x08,0xFE,0x2A,0xAA,0x2A,0x28,0x2A,0x28,0x2A,0x28,0x4A,0x29,0x48,0x49,0x08,0x49,0x08,0x87},
{0xAF,0xAD,0x00,0x00,0x04,0x04,0x3E,0x9E,0x00,0xF0,0x04,0x90,0x7E,0x92,0x08,0xFF,0x08,0x88,0x2A,0x88,0x2A,0x88,0x2A,0xA4,0x2A,0xC5,0x4A,0x85,0x48,0x13,0x09,0xFB,0x08,0x01},
{0xAF,0xAE,0x00,0x00,0x04,0x60,0x3E,0x40,0x00,0x42,0x04,0x7F,0x7E,0xA0,0x08,0xA4,0x09,0x3E,0x2A,0x20,0x2A,0x24,0x2A,0x3E,0x2A,0x20,0x4A,0x20,0x48,0x20,0x08,0x20,0x08,0x20},
{0xAF,0xAF,0x00,0x00,0x0E,0x04,0x78,0xFE,0x08,0x10,0x08,0x50,0x7E,0x54,0x18,0x92,0x18,0x92,0x2C,0x10,0x2B,0xFF,0x4A,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xAF,0xB0,0x00,0x00,0x0E,0x18,0x78,0x10,0x08,0x14,0x08,0xFE,0x7E,0x10,0x18,0x12,0x19,0xFF,0x2C,0x10,0x2A,0x30,0x4A,0x58,0x08,0x54,0x08,0x93,0x09,0x10,0x08,0x10,0x08,0x10},
{0xAF,0xB1,0x00,0x00,0x0E,0x18,0x78,0x10,0x08,0x92,0x08,0xFF,0x7E,0x92,0x18,0x92,0x18,0x92,0x2C,0x92,0x2B,0xFF,0x4A,0x10,0x08,0x28,0x08,0x28,0x08,0x44,0x08,0x42,0x08,0x81},
{0xAF,0xB2,0x00,0x00,0x0E,0x84,0x78,0xFE,0x08,0x84,0x08,0x84,0x7E,0x84,0x18,0xFC,0x18,0x84,0x2C,0x84,0x2A,0x84,0x4A,0xFC,0x08,0x84,0x08,0x84,0x08,0x84,0x0B,0xFF,0x08,0x00},
{0xAF,0xB3,0x00,0x00,0x00,0x80,0x3F,0xFE,0x01,0x00,0x1F,0xFC,0x02,0x20,0x7F,0xFF,0x04,0x10,0x08,0xE8,0x17,0x84,0x60,0x83,0x1F,0xFC,0x01,0x80,0x06,0xE0,0x38,0x9C,0x00,0x80},
{0xAF,0xB4,0x00,0x00,0x0E,0x18,0x78,0xD0,0x08,0x94,0x08,0xFE,0x7E,0x90,0x19,0x10,0x18,0x12,0x2D,0xFF,0x2A,0x10,0x4A,0x28,0x08,0x28,0x08,0x44,0x08,0x44,0x08,0x82,0x09,0x01},
{0xAF,0xB5,0x00,0x00,0x0E,0x20,0x78,0x10,0x08,0x16,0x08,0x44,0x7E,0x44,0x18,0x48,0x19,0x48,0x2D,0x52,0x2A,0x52,0x4A,0x61,0x08,0x45,0x08,0xC4,0x0B,0x46,0x08,0x3C,0x08,0x00},
{0xAF,0xB6,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x26,0x42,0x44,0x45,0x1B,0x3F,0x62,0x00,0x07,0xFE,0x09,0x00,0x31,0xFC,0x01,0x00,0x01,0xFC,0x01,0x00,0x01,0x00,0x01,0x00},
{0xAF,0xB7,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x26,0x42,0x48,0x45,0x10,0x3F,0x6C,0x10,0x08,0x10,0x33,0x7E,0x0A,0x12,0x04,0x22,0x0A,0x22,0x7D,0x42,0x20,0x5C,0x00,0x88},
{0xAF,0xB8,0x00,0x00,0x0C,0x18,0x08,0x10,0x0A,0x12,0x7F,0x1F,0x00,0x10,0x46,0x10,0x24,0x10,0x24,0x92,0x28,0xFF,0x08,0x82,0x12,0x82,0x0C,0x82,0x70,0x82,0x20,0xFE,0x00,0x82},
{0xAF,0xB9,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0x00,0x3F,0xFC,0x20,0x84,0x20,0x84,0x3F,0xFC,0x20,0x00,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xAF,0xBA,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0xF8,0x3F,0x80,0x00,0x80,0x00,0x82,0x7F,0xFF,0x01,0x40,0x02,0x20,0x04,0x18,0x18,0x07,0x60,0x02},
{0xAF,0xBB,0x00,0x00,0x0C,0x08,0x08,0x1C,0x4A,0x48,0x2A,0x48,0x2C,0x44,0x08,0x84,0x7E,0x82,0x19,0x7D,0x2C,0x24,0x2A,0x24,0x4A,0x24,0x48,0x44,0x08,0x44,0x08,0x9C,0x09,0x08},
{0xAF,0xBC,0x00,0x00,0x18,0x18,0x10,0x10,0x20,0x12,0x6D,0xFF,0x18,0x40,0x10,0x44,0x2C,0x7E,0x74,0x44,0x50,0x44,0x18,0x44,0x54,0x44,0x54,0x84,0x50,0x84,0x10,0xB8,0x11,0x10},
{0xAF,0xBD,0x00,0x00,0x18,0x18,0x10,0x10,0x20,0x10,0x6C,0xD4,0x18,0x92,0x10,0x93,0x2D,0x11,0x74,0x10,0x50,0x73,0x18,0x22,0x54,0x04,0x54,0x08,0x50,0x30,0x10,0xC0,0x13,0x00},
{0xAF,0xBE,0x00,0x00,0x18,0x18,0x10,0x10,0x20,0x12,0x6D,0xFF,0x18,0x04,0x10,0xC4,0x2C,0xA4,0x74,0xA8,0x51,0x28,0x18,0x10,0x54,0x10,0x54,0x28,0x50,0x24,0x10,0x44,0x11,0x83},
{0xAF,0xBF,0x00,0x00,0x00,0x82,0x7F,0xFF,0x04,0x10,0x1A,0x20,0x01,0xC0,0x06,0x38,0x79,0x87,0x01,0x00,0x06,0x60,0x01,0x88,0x3F,0xF6,0x10,0x82,0x0C,0x90,0x08,0x8C,0x10,0x84},
{0xAF,0xC0,0x00,0x00,0x00,0x80,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x01,0x00,0x06,0x30,0x01,0x40,0x00,0x88,0x3F,0xF6,0x10,0x82,0x0C,0x90,0x08,0x8C,0x10,0x84},
{0xAF,0xC1,0x00,0x00,0x00,0x80,0x7F,0xFF,0x00,0x80,0x20,0x82,0x3F,0xFF,0x20,0x02,0x41,0x84,0x06,0x30,0x01,0x40,0x00,0x88,0x3F,0xF6,0x10,0x82,0x0C,0x90,0x08,0x8C,0x10,0x84},
{0xAF,0xC2,0x00,0x00,0x18,0x10,0x10,0x17,0x20,0x38,0x6D,0xD0,0x18,0x10,0x10,0xD3,0x2C,0x92,0x74,0x92,0x50,0x92,0x18,0xFE,0x54,0x92,0x54,0x10,0x50,0x11,0x10,0x11,0x10,0x0F},
{0xAF,0xC3,0x00,0x00,0x0C,0x04,0x08,0xFE,0x13,0x24,0x72,0x24,0x1C,0x24,0x04,0x24,0x08,0xFF,0x12,0x44,0x7D,0x44,0x09,0x44,0x2C,0x44,0x2A,0x44,0x4A,0x44,0x49,0xFF,0x08,0x00},
{0xAF,0xC4,0x00,0x00,0x19,0x8C,0x11,0x08,0x21,0x08,0x6D,0x08,0x19,0x08,0x11,0x4A,0x2D,0xEF,0x75,0x08,0x51,0x08,0x19,0x08,0x55,0x09,0x55,0x09,0x51,0x69,0x13,0x89,0x11,0x07},
{0xAF,0xC5,0x00,0x00,0x18,0x88,0x10,0xFC,0x20,0x88,0x6C,0x88,0x18,0x90,0x10,0x92,0x2C,0xFF,0x74,0xC2,0x50,0xA2,0x18,0x94,0x54,0x88,0x55,0x14,0x51,0x14,0x11,0x22,0x12,0x41},
{0xAF,0xC6,0x00,0x00,0x18,0x00,0x10,0x04,0x20,0x7E,0x6C,0x00,0x18,0x00,0x10,0x02,0x2E,0xFF,0x74,0x10,0x50,0x10,0x18,0x20,0x54,0x28,0x54,0x44,0x50,0x46,0x11,0xFB,0x10,0x81},
{0xAF,0xC7,0x00,0x00,0x18,0x20,0x11,0xF0,0x20,0x20,0x6D,0x22,0x19,0xFF,0x11,0x22,0x2D,0x22,0x75,0x52,0x51,0x52,0x19,0x4A,0x55,0x86,0x55,0x02,0x51,0x02,0x11,0x0E,0x11,0x04},
{0xAF,0xC8,0x00,0x00,0x18,0x00,0x10,0x8E,0x20,0xF8,0x6C,0x88,0x18,0x88,0x10,0x8A,0x2C,0xFF,0x74,0x88,0x50,0x88,0x18,0x88,0x54,0x84,0x54,0x85,0x50,0xB5,0x13,0xC3,0x11,0x01},
{0xAF,0xC9,0x00,0x00,0x18,0x18,0x10,0x48,0x20,0x48,0x6C,0x44,0x18,0x84,0x10,0x84,0x2C,0x82,0x75,0x7D,0x50,0x24,0x18,0x24,0x54,0x24,0x54,0x44,0x50,0x44,0x10,0x5C,0x10,0x88},
{0xAF,0xCA,0x00,0x00,0x30,0x30,0x24,0x20,0x3E,0x24,0x49,0xFE,0x48,0x24,0x0A,0x24,0x7F,0x24,0x08,0x24,0x2B,0xFF,0x2A,0x20,0x2A,0x20,0x3E,0x50,0x22,0x48,0x00,0x84,0x01,0x03},
{0xAF,0xCB,0x00,0x00,0x40,0x02,0x7F,0xFF,0x44,0x22,0x44,0x22,0x7F,0xFE,0x40,0x82,0x00,0x80,0x7F,0xFF,0x00,0x80,0x10,0x88,0x1F,0xFC,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xAF,0xCC,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x24,0x3F,0xFE,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x00,0x12,0x22,0x12,0x22,0x21,0x11,0x21,0x11},
{0xAF,0xCD,0x00,0x00,0x18,0x00,0x13,0xDE,0x10,0x42,0x7C,0xC6,0x11,0x4A,0x11,0x4A,0x7C,0x42,0x44,0xC6,0x29,0x4A,0x29,0x4A,0x10,0x42,0x11,0xCE,0x28,0x84,0x26,0x00,0x41,0xFF},
{0xAF,0xCE,0x00,0x00,0x06,0x60,0x04,0x20,0x09,0x18,0x12,0x44,0x67,0xA3,0x00,0x00,0x3F,0x7E,0x01,0x02,0x07,0x0E,0x39,0x72,0x07,0x0E,0x39,0x72,0x01,0x02,0x07,0x0E,0x02,0x04},
{0xAF,0xCF,0x00,0x00,0x03,0x00,0x02,0x06,0x1F,0xE8,0x02,0x10,0x7F,0xFF,0x01,0x00,0x07,0xFA,0x1C,0x03,0x63,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8},
{0xAF,0xD0,0x00,0x00,0x0C,0x00,0x08,0x04,0x0E,0x7E,0x78,0x00,0x08,0x00,0x3E,0x02,0x08,0xFF,0x7F,0x10,0x18,0x10,0x1C,0x10,0x2A,0x24,0x2A,0x22,0x48,0xFD,0x08,0x41,0x08,0x00},
{0xAF,0xD1,0x00,0x00,0x0C,0x6C,0x08,0x48,0x0E,0x48,0x78,0x4A,0x09,0xFF,0x3E,0x48,0x08,0x48,0x7E,0x4A,0x19,0xFF,0x1C,0x48,0x2A,0x48,0x2A,0x48,0x48,0x88,0x08,0x88,0x09,0x08},
{0xAF,0xD2,0x00,0x00,0x0C,0x00,0x08,0x82,0x0E,0xFF,0x78,0x92,0x08,0x92,0x3E,0x92,0x08,0x92,0x7E,0xFE,0x18,0x82,0x1C,0x80,0x2A,0x82,0x2A,0x82,0x48,0x83,0x08,0x82,0x08,0x7E},
{0xAF,0xD3,0x00,0x00,0x0C,0x0C,0x08,0x1E,0x0E,0xF0,0x78,0x10,0x08,0x14,0x3E,0x1E,0x08,0xF0,0x7E,0x10,0x18,0x12,0x1C,0x1F,0x2A,0xF0,0x2A,0x10,0x48,0x11,0x08,0x11,0x08,0x0F},
{0xAF,0xD4,0x00,0x00,0x04,0x30,0x7E,0x20,0x24,0x20,0x25,0x22,0x3D,0xFF,0x25,0x22,0x26,0x24,0x3C,0x40,0x24,0x58,0x24,0x50,0x2C,0x52,0x74,0x92,0x24,0x92,0x04,0x93,0x05,0x0E},
{0xAF,0xD5,0x00,0x00,0x02,0x18,0x7F,0x10,0x22,0x10,0x22,0x13,0x3E,0x52,0x22,0x54,0x22,0x98,0x3E,0x90,0x22,0x10,0x22,0x28,0x2E,0x28,0x72,0x24,0x22,0x44,0x02,0x42,0x02,0x81},
{0xAF,0xD6,0x00,0x00,0x24,0x30,0x3C,0x20,0x25,0x26,0x25,0x24,0x3C,0xA8,0x24,0xA8,0x24,0x22,0x25,0xFF,0x3C,0x48,0x24,0x48,0x24,0x48,0x24,0x49,0x44,0x89,0x5C,0x89,0x49,0x07},
{0xAF,0xD7,0x00,0x00,0x25,0x80,0x3D,0x0C,0x25,0x30,0x25,0xC2,0x3D,0x03,0x24,0xFE,0x24,0x00,0x24,0x84,0x3C,0xFE,0x24,0x84,0x24,0xFC,0x24,0x84,0x44,0x84,0x5C,0xFC,0x48,0x84},
{0xAF,0xD8,0x00,0x00,0x24,0x18,0x3C,0x12,0x25,0xFF,0x24,0x10,0x3D,0xFE,0x24,0x12,0x24,0xFE,0x24,0x90,0x3D,0xFF,0x25,0x11,0x25,0x17,0x24,0x2A,0x44,0x28,0x5C,0x44,0x49,0x83},
{0xAF,0xD9,0x00,0x00,0x01,0x10,0x3F,0xF8,0x02,0x10,0x0C,0x60,0x10,0x10,0x7F,0x7E,0x11,0x22,0x26,0x4C,0x5F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x10,0x18},
{0xAF,0xDA,0x00,0x00,0x25,0x02,0x3D,0xFF,0x25,0x02,0x25,0x32,0x3D,0x22,0x25,0xFE,0x25,0x22,0x25,0x22,0x3D,0x52,0x25,0x4A,0x25,0x8A,0x25,0x02,0x45,0x02,0x5D,0xFE,0x49,0x02},
{0xAF,0xDB,0x00,0x00,0x25,0x02,0x3D,0xFF,0x25,0x02,0x25,0x12,0x3D,0x7A,0x25,0x02,0x25,0x4A,0x25,0x7A,0x3D,0x4A,0x25,0x4A,0x25,0x7A,0x25,0x4A,0x45,0x02,0x5D,0x0E,0x49,0x04},
{0xAF,0xDC,0x00,0x00,0x24,0x60,0x3C,0x48,0x24,0xFC,0x24,0x88,0x3D,0x12,0x27,0xFF,0x25,0x00,0x25,0x44,0x3D,0x7E,0x25,0x44,0x25,0x5C,0x25,0x48,0x45,0x41,0x5D,0x41,0x4A,0x3F},
{0xAF,0xDD,0x00,0x00,0x24,0xC0,0x3E,0x80,0x24,0x82,0x25,0xFF,0x3D,0x02,0x26,0x52,0x24,0x22,0x25,0x2A,0x3D,0x5A,0x25,0x0A,0x25,0xFA,0x25,0x0A,0x44,0x22,0x5C,0x1C,0x48,0x08},
{0xAF,0xDE,0x00,0x00,0x24,0x60,0x3E,0x44,0x24,0xFE,0x24,0x84,0x3D,0x88,0x26,0x48,0x24,0x30,0x24,0x4C,0x3D,0x83,0x24,0xFC,0x24,0x84,0x24,0x84,0x44,0x84,0x5C,0xFC,0x48,0x84},
{0xAF,0xDF,0x00,0x00,0x24,0x0C,0x3D,0x1E,0x25,0xE0,0x25,0x00,0x3D,0x0E,0x25,0x78,0x25,0x48,0x25,0x4B,0x3D,0x4A,0x25,0x44,0x25,0x44,0x25,0x44,0x45,0x52,0x5E,0xE2,0x4A,0x41},
{0xAF,0xE0,0x00,0x00,0x0C,0x60,0x08,0x46,0x12,0x58,0x7D,0x60,0x21,0x42,0x00,0x43,0x3E,0x3E,0x22,0x00,0x3E,0x60,0x22,0x46,0x3E,0x58,0x22,0x60,0x22,0x42,0x2E,0x43,0x24,0x3E},
{0xAF,0xE1,0x00,0x00,0x01,0x80,0x7D,0x3E,0x01,0x00,0x7A,0x9E,0x02,0x40,0x04,0x30,0x18,0x0C,0x6F,0xF3,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x70,0x08,0x20},
{0xAF,0xE2,0x00,0x00,0x24,0x33,0x3C,0x22,0x24,0x44,0x25,0xEF,0x3C,0x44,0x24,0x44,0x24,0x64,0x25,0xC4,0x3D,0x5F,0x24,0x44,0x24,0x44,0x24,0x44,0x44,0x84,0x5C,0x84,0x49,0x04},
{0xAF,0xE3,0x00,0x00,0x24,0x30,0x3C,0x22,0x27,0xFF,0x24,0x88,0x3D,0x04,0x26,0xFB,0x24,0x00,0x25,0xFE,0x3C,0x40,0x24,0xFC,0x24,0x84,0x24,0x04,0x44,0x04,0x5C,0x78,0x48,0x10},
{0xAF,0xE4,0x00,0x00,0x00,0xC0,0x01,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0xA0,0x00,0x92,0x7F,0xFF,0x02,0x20,0x0C,0x18,0x70,0x07},
{0xAF,0xE5,0x00,0x00,0x00,0xC0,0x01,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xAF,0xE6,0x00,0x00,0x00,0x18,0x01,0xFC,0x3F,0x00,0x30,0x88,0x20,0x66,0x40,0x22,0x06,0x00,0x38,0x7C,0x20,0x04,0x24,0x04,0x3E,0x7C,0x20,0x04,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xAF,0xE7,0x00,0x00,0x04,0x04,0x0E,0x4E,0x38,0x78,0x08,0x48,0x0A,0x48,0x7F,0x4A,0x08,0x7F,0x08,0x48,0x2A,0x48,0x3F,0x48,0x22,0x44,0x22,0x45,0x22,0x55,0x3E,0xE3,0x22,0x41},
{0xAF,0xE8,0x00,0x00,0x0C,0x18,0x10,0x10,0x3E,0x12,0x22,0xFF,0x32,0x00,0x2A,0x48,0x23,0x7C,0x3E,0x48,0x6A,0x48,0x2A,0x48,0x2A,0x48,0x22,0x49,0x42,0x89,0x4E,0x89,0x44,0x87},
{0xAF,0xE9,0x00,0x00,0x0C,0x18,0x10,0x10,0x3E,0x12,0x22,0xFF,0x32,0x20,0x2A,0x22,0x23,0x3F,0x3E,0x22,0x6A,0x22,0x2A,0x22,0x2A,0x22,0x22,0x42,0x42,0x42,0x4E,0x5C,0x44,0x88},
{0xAF,0xEA,0x00,0x00,0x0C,0x82,0x10,0xFF,0x3E,0x80,0x22,0x80,0x32,0x82,0x2A,0xFF,0x23,0xA2,0x3E,0xA2,0x6A,0x94,0x2A,0x94,0x2A,0x88,0x22,0x94,0x42,0x92,0x4F,0x22,0x45,0x41},
{0xAF,0xEB,0x00,0x00,0x0C,0x48,0x10,0x7C,0x3E,0x48,0x22,0x49,0x32,0x47,0x2A,0x80,0x22,0x04,0x3E,0xFE,0x6A,0x44,0x2A,0x24,0x2A,0x28,0x22,0x10,0x42,0x28,0x4E,0x24,0x44,0xC3},
{0xAF,0xEC,0x00,0x00,0x08,0x04,0x0F,0xFE,0x11,0x04,0x69,0x24,0x0F,0xE4,0x02,0x08,0x04,0x30,0x38,0x02,0x0F,0xFF,0x11,0x02,0x69,0x22,0x0F,0xE2,0x02,0x04,0x0C,0x38,0x70,0x10},
{0xAF,0xED,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x00,0x10,0x30,0x55,0x22,0x25,0xFF,0x29,0x00,0x09,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x31,0x00,0x10,0xFE},
{0xAF,0xEE,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x10,0x84,0x1F,0xFE,0x10,0x00,0x10,0x00,0x0F,0xFC,0x00,0x00,0x19,0x98,0x11,0x12,0x11,0x12,0x21,0x13,0x41,0x0E},
{0xAF,0xEF,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x00,0x1F,0xFC,0x02,0x04,0x1C,0x3C,0x08,0x08,0x7F,0x7F,0x11,0x11,0x11,0x11,0x21,0x21,0x2E,0x2E,0x44,0x44},
{0xAF,0xF0,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x83,0x3F,0xDA,0x09,0x12,0x09,0x12,0x09,0x12,0x7F,0xD2,0x09,0x12,0x09,0x02,0x11,0x02,0x11,0x0E,0x21,0x04},
{0xAF,0xF1,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x04,0x7F,0xFE,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF2,0x08,0x1C,0x09,0xF0,0x3E,0x10,0x10,0x10,0x00,0x10},
{0xAF,0xF2,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x02,0x02,0x7F,0xFF,0x04,0x00,0x08,0xFC,0x18,0x08,0x68,0x12,0x0B,0xFF,0x08,0x10,0x08,0x10,0x08,0x70,0x08,0x20},
{0xAF,0xF3,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00,0x01,0x00},
{0xAF,0xF4,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x02,0x3F,0xFF,0x20,0x02,0x20,0x92,0x2F,0xFA,0x20,0x82,0x23,0x62,0x2C,0x1A,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xAF,0xF5,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x02,0x3F,0xFF,0x20,0x02,0x24,0x12,0x27,0xFA,0x24,0x12,0x27,0xF2,0x24,0x12,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xAF,0xF6,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x0C,0x18,0x08,0x3C,0x11,0xE0,0x30,0x20,0x50,0x22,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x24,0x13,0xFE},
{0xAF,0xF7,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x0C,0x18,0x08,0x10,0x13,0x26,0x32,0x64,0x0C,0x18,0x04,0x08,0x08,0x10,0x0A,0x14,0x3D,0x7A,0x11,0x22},
{0xAF,0xF8,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x18,0x00,0x12,0x42,0x7F,0x7F,0x12,0x42,0x12,0x42,0x22,0x42,0x64,0x42,0x18,0x42,0x0C,0x42,0x12,0x7E,0x62,0x42},
{0xAF,0xF9,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xC0,0x01,0x20,0x06,0x10,0x18,0xCC,0x60,0x83,0x0F,0xF8,0x00,0x80,0x06,0xB0,0x08,0x8C,0x30,0x84,0x00,0x80},
{0xAF,0xFA,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x02,0x00,0x07,0xF8,0x08,0x10,0x76,0x60,0x01,0x80,0x02,0x04,0x0F,0xFE,0x74,0x04,0x04,0x04,0x07,0xFC,0x04,0x04},
{0xAF,0xFB,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x10,0x04,0x1F,0xFE,0x20,0x04,0x2F,0xC4,0x48,0x44,0x0F,0xC4,0x08,0x44,0x0F,0xC4,0x00,0x04,0x00,0x78,0x00,0x10},
{0xAF,0xFC,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xC0,0x08,0x88,0x0F,0xFC,0x30,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xAF,0xFD,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x40,0xC0,0x20,0x82,0x20,0xFF,0x00,0x82,0x05,0x34,0x08,0x20,0x70,0x50,0x20,0x50,0x00,0x88,0x01,0x04,0x06,0x03},
{0xAF,0xFE,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x1F,0xC0,0x00,0x80,0x03,0x60,0x0C,0x18,0x77,0xF7,0x00,0x80,0x00,0x90,0x0F,0xF8,0x00,0x80,0x00,0x84,0x3F,0xFE},
{0xB0,0x40,0x00,0x00,0x00,0x80,0x00,0xF8,0x20,0x82,0x3F,0xFF,0x21,0x02,0x2F,0xFC,0x21,0x01,0x20,0xFF,0x20,0x40,0x2F,0xFE,0x22,0x08,0x21,0x10,0x40,0xE0,0x43,0x18,0x5C,0x07},
{0xB0,0x41,0x00,0x00,0x18,0x18,0x10,0x10,0x54,0x12,0x7D,0xFF,0x54,0x04,0x54,0xC4,0x54,0xA4,0x7D,0x28,0x54,0x28,0x10,0x10,0x14,0x10,0x1A,0x28,0x72,0x44,0x20,0x86,0x03,0x03},
{0xB0,0x42,0x00,0x00,0x18,0x0C,0x10,0x48,0x54,0x28,0x7E,0x28,0x54,0x08,0x54,0x88,0x54,0x48,0x7C,0x4A,0x54,0x0F,0x11,0xF8,0x14,0x08,0x1A,0x08,0x72,0x08,0x20,0x08,0x00,0x08},
{0xB0,0x43,0x00,0x00,0x18,0x13,0x11,0xFA,0x54,0x12,0x7E,0x92,0x54,0xFA,0x54,0x92,0x54,0x82,0x7D,0x12,0x55,0xFA,0x11,0x12,0x14,0x12,0x1A,0x12,0x72,0x12,0x20,0xE2,0x00,0x42},
{0xB0,0x44,0x00,0x00,0x00,0x08,0x7F,0xFC,0x09,0x90,0x46,0x20,0x31,0xC0,0x06,0x38,0x18,0xC7,0x60,0x80,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x00,0x84,0x7F,0xFB,0x20,0x01},
{0xB0,0x45,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x11,0x04,0x02,0x00,0x7F,0xFF,0x00,0x80,0x0F,0xF8,0x08,0x88,0x08,0x88,0x0F,0xF8,0x00,0x88,0x3F,0xFE,0x10,0x02},
{0xB0,0x46,0x00,0x00,0x18,0x18,0x10,0x10,0x54,0x1E,0x7E,0xF0,0x54,0x10,0x54,0x14,0x54,0xFE,0x7C,0x10,0x54,0x12,0x11,0xFF,0x14,0x10,0x1A,0x10,0x72,0x10,0x20,0x10,0x00,0x10},
{0xB0,0x47,0x00,0x00,0x18,0x08,0x10,0x5C,0x54,0x48,0x7E,0x48,0x54,0x84,0x54,0x84,0x54,0xB2,0x7D,0x22,0x55,0x21,0x12,0x28,0x14,0x48,0x1A,0x44,0x72,0x4E,0x21,0xF2,0x00,0x82},
{0xB0,0x48,0x00,0x00,0x18,0x02,0x11,0xFF,0x54,0x08,0x7E,0xC8,0x54,0x88,0x54,0x8A,0x55,0xFF,0x7D,0x18,0x54,0x28,0x10,0x28,0x14,0x48,0x1A,0x48,0x72,0x88,0x21,0x38,0x00,0x10},
{0xB0,0x49,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x0A,0x7F,0xFF,0x08,0x08,0x0F,0xF8,0x01,0x80,0x0E,0x46,0x74,0x28,0x05,0x90,0x1E,0x0C,0x08,0x03},
{0xB0,0x4A,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x80,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x11,0x84,0x06,0x46,0x7C,0x28,0x05,0x90,0x1E,0x0C,0x08,0x03},
{0xB0,0x4B,0x00,0x00,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x01,0x80,0x0E,0x46,0x74,0x28,0x05,0x90,0x1E,0x0C,0x08,0x03},
{0xB0,0x4C,0x00,0x00,0x18,0x30,0x10,0x20,0x14,0x24,0x7E,0xFE,0x04,0x24,0x08,0x24,0x0A,0x24,0x1C,0x24,0x2B,0xFF,0x4A,0x20,0x08,0x20,0x08,0x50,0x08,0x48,0x08,0x84,0x0B,0x03},
{0xB0,0x4D,0x00,0x00,0x18,0x0C,0x10,0x1E,0x14,0xF0,0x7E,0x10,0x04,0x10,0x08,0x10,0x0A,0x12,0x1C,0xFF,0x2A,0x10,0x4A,0x10,0x08,0x10,0x08,0x10,0x08,0x14,0x08,0xFE,0x08,0x00},
{0xB0,0x4E,0x00,0x00,0x18,0x04,0x10,0x8E,0x14,0xF8,0x7E,0x88,0x04,0x88,0x08,0x8A,0x0A,0xFF,0x1C,0x88,0x2A,0x88,0x4A,0x88,0x08,0x84,0x08,0x85,0x08,0xB5,0x09,0xC3,0x08,0x81},
{0xB0,0x4F,0x00,0x00,0x04,0x00,0x3E,0x04,0x00,0xFE,0x7F,0x04,0x00,0x04,0x3E,0x04,0x00,0x44,0x3E,0x7C,0x00,0x44,0x22,0x40,0x3F,0x40,0x22,0x42,0x22,0x42,0x3E,0x43,0x22,0x3E},
{0xB0,0x50,0x00,0x00,0x04,0x00,0x3E,0x04,0x00,0x7E,0x7F,0x10,0x00,0x10,0x3E,0x10,0x00,0x12,0x3E,0xFF,0x00,0x10,0x22,0x10,0x3F,0x10,0x22,0x10,0x22,0x10,0x3E,0x10,0x22,0x10},
{0xB0,0x51,0x00,0x00,0x04,0x06,0x3E,0x04,0x00,0x04,0x7F,0x04,0x00,0xFF,0x3E,0x04,0x00,0x04,0x3E,0x44,0x00,0x24,0x22,0x34,0x3F,0x14,0x22,0x04,0x22,0x04,0x3E,0x1C,0x22,0x08},
{0xB0,0x52,0x00,0x00,0x04,0x00,0x3E,0x04,0x00,0xFE,0x7F,0x10,0x00,0x10,0x3E,0x10,0x00,0x10,0x3E,0x10,0x00,0x10,0x22,0x10,0x3F,0x10,0x22,0x10,0x22,0x12,0x3E,0xFF,0x22,0x00},
{0xB0,0x53,0x00,0x00,0x04,0x0C,0x3E,0x08,0x00,0x08,0x7F,0x08,0x00,0x69,0x3E,0x49,0x00,0x49,0x3E,0x49,0x00,0x49,0x22,0x49,0x3F,0x49,0x22,0x49,0x22,0x7F,0x3E,0x41,0x22,0x41},
{0xB0,0x54,0x00,0x00,0x04,0x04,0x3E,0xFE,0x00,0x24,0x7F,0x24,0x00,0x24,0x3E,0x24,0x00,0x24,0x3E,0xF4,0x00,0x24,0x22,0x25,0x3F,0x25,0x22,0x25,0x22,0x43,0x3E,0x43,0x22,0x81},
{0xB0,0x55,0x00,0x00,0x04,0x0C,0x3E,0x1E,0x00,0xF0,0x7F,0x10,0x00,0x10,0x3E,0x12,0x00,0x1F,0x3E,0xF0,0x00,0x10,0x22,0x10,0x3F,0x12,0x22,0x12,0x22,0x12,0x3E,0x13,0x22,0x0E},
{0xB0,0x56,0x00,0x00,0x04,0x61,0x3E,0x41,0x00,0x4D,0x7F,0x49,0x00,0x49,0x3E,0x49,0x00,0x49,0x3E,0x49,0x00,0x49,0x22,0x49,0x3F,0x49,0x22,0x49,0x22,0x89,0x3E,0x81,0x22,0x81},
{0xB0,0x57,0x00,0x00,0x04,0x60,0x3E,0x40,0x00,0x42,0x7F,0x7F,0x00,0x80,0x3E,0x84,0x01,0x7E,0x3E,0x04,0x00,0x08,0x22,0x10,0x3F,0x10,0x22,0x22,0x22,0x42,0x3E,0x43,0x22,0x3E},
{0xB0,0x58,0x00,0x00,0x04,0x00,0x3E,0x04,0x00,0xFE,0x7F,0x10,0x00,0x10,0x3E,0x12,0x00,0xFF,0x3E,0x10,0x00,0x10,0x22,0x10,0x3E,0x10,0x22,0x10,0x22,0x10,0x3E,0x70,0x22,0x20},
{0xB0,0x59,0x00,0x00,0x08,0x30,0x3C,0xA0,0x00,0xA0,0x7E,0xA4,0x00,0xAE,0x3C,0xF4,0x03,0xA4,0x3C,0xA4,0x00,0xAC,0x24,0xA4,0x3E,0xA0,0x24,0x82,0x24,0x82,0x3C,0x83,0x24,0x7E},
{0xB0,0x5A,0x00,0x00,0x01,0x80,0x31,0x0C,0x21,0x08,0x3F,0xF8,0x20,0x08,0x00,0x00,0x7F,0xFE,0x00,0x00,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x04,0x20,0x02,0x42,0x7F,0xFF},
{0xB0,0x5B,0x00,0x00,0x0C,0x0C,0x08,0x08,0x13,0x08,0x6A,0x0A,0x15,0xFF,0x18,0x18,0x64,0x18,0x06,0x28,0x1A,0x28,0x66,0x48,0x1A,0x88,0x62,0x08,0x02,0x48,0x3C,0x38,0x08,0x10},
{0xB0,0x5C,0x00,0x00,0x0C,0x60,0x08,0x40,0x13,0x42,0x6A,0xFF,0x14,0x82,0x19,0x02,0x64,0x02,0x06,0x12,0x1A,0xFA,0x66,0x02,0x1A,0x02,0x62,0x02,0x02,0x04,0x3C,0x3C,0x08,0x08},
{0xB0,0x5D,0x00,0x00,0x42,0x0C,0x7F,0x08,0x42,0x08,0x42,0x0A,0x7E,0xFF,0x42,0x18,0x7E,0x18,0x42,0x28,0x42,0x28,0x7E,0x48,0x42,0x48,0x14,0x88,0x24,0x08,0x22,0x38,0x42,0x10},
{0xB0,0x5E,0x00,0x00,0x00,0x08,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x06,0x20,0x18,0x1C,0x60,0x04},
{0xB0,0x5F,0x00,0x00,0x0C,0x00,0x08,0x44,0x0A,0x7E,0x3F,0x44,0x08,0x44,0x0A,0x44,0x7F,0x7C,0x08,0x40,0x2A,0x42,0x2F,0x42,0x28,0x43,0x28,0x3E,0x38,0x00,0x46,0x03,0x41,0xFC},
{0xB0,0x60,0x00,0x00,0x0C,0x04,0x10,0xFE,0x3E,0x04,0x22,0x44,0x3E,0x7C,0x22,0x44,0x3E,0x40,0x23,0x82,0x7E,0xFF,0x26,0x82,0x0A,0x02,0x12,0x02,0x62,0x04,0x4E,0x3C,0x04,0x08},
{0xB0,0x61,0x00,0x00,0x0C,0x00,0x08,0x02,0x7F,0x7F,0x08,0x08,0x7F,0x08,0x49,0x08,0x7F,0x0A,0x49,0x7F,0x7F,0x08,0x49,0x08,0x08,0x08,0x7F,0x88,0x08,0x08,0x08,0x08,0x08,0x08},
{0xB0,0x62,0x00,0x00,0x0C,0x00,0x08,0x02,0x7F,0x7F,0x08,0x12,0x7F,0x12,0x49,0x52,0x7F,0x52,0x49,0x32,0x7F,0x12,0x49,0x22,0x08,0x22,0x7F,0x22,0x08,0x44,0x08,0x5C,0x08,0x88},
{0xB0,0x63,0x00,0x00,0x0C,0x00,0x08,0x02,0x7F,0x7F,0x08,0x24,0x7F,0x24,0x49,0x24,0x7F,0x24,0x49,0x24,0x7F,0x24,0x49,0x24,0x08,0x25,0x7F,0x25,0x08,0x45,0x08,0x45,0x08,0x83},
{0xB0,0x64,0x00,0x00,0x10,0x00,0x1F,0xFC,0x10,0x00,0x17,0xF8,0x10,0x00,0x1F,0xFF,0x24,0x24,0x24,0xD8,0x4F,0x07,0x00,0x10,0x7F,0xFE,0x10,0x10,0x0C,0x10,0x04,0x70,0x00,0x20},
{0xB0,0x65,0x00,0x00,0x20,0x38,0x19,0x88,0x01,0x08,0x41,0x04,0x32,0x14,0x02,0xFA,0x04,0x21,0x10,0x24,0x7B,0xFE,0x10,0x50,0x10,0x48,0x10,0x84,0x19,0x04,0x66,0x03,0x41,0xFC},
{0xB0,0x66,0x00,0x00,0x21,0x0C,0x18,0xC8,0x00,0x52,0x47,0xFF,0x30,0x20,0x03,0x26,0x02,0x24,0x12,0x24,0x7B,0xFC,0x12,0x24,0x10,0x40,0x10,0x40,0x18,0x80,0x66,0x03,0x41,0xFC},
{0xB0,0x67,0x00,0x00,0x20,0x30,0x1A,0x26,0x01,0xA4,0x40,0xA8,0x30,0x20,0x07,0xFF,0x00,0x60,0x10,0xB0,0x78,0xA8,0x11,0x27,0x12,0x22,0x10,0x20,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xB0,0x68,0x00,0x00,0x21,0x04,0x19,0xFE,0x01,0x04,0x41,0xFC,0x31,0x04,0x01,0x04,0x01,0xFC,0x11,0x24,0x79,0x20,0x11,0x13,0x11,0x54,0x13,0x88,0x19,0x04,0x66,0x02,0x41,0xFF},
{0xB0,0x69,0x00,0x00,0x20,0x04,0x1B,0xFE,0x00,0xA0,0x42,0xA4,0x33,0xFE,0x02,0xA4,0x02,0xA4,0x13,0x1C,0x7A,0x04,0x12,0x04,0x13,0xFC,0x12,0x04,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB0,0x6A,0x00,0x00,0x22,0x04,0x1B,0xFE,0x02,0x04,0x42,0x94,0x32,0xF4,0x02,0x94,0x02,0x94,0x12,0xF4,0x7A,0x94,0x12,0x04,0x13,0xFC,0x12,0x04,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB0,0x6B,0x00,0x00,0x40,0x58,0x30,0x50,0x04,0x56,0x43,0x54,0x31,0x58,0x00,0x50,0x00,0xD8,0x13,0x56,0x7A,0x52,0x10,0x90,0x10,0x91,0x11,0x0F,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB0,0x6C,0x00,0x00,0x20,0x30,0x19,0x40,0x01,0xFC,0x41,0x04,0x31,0x04,0x01,0xFC,0x01,0x00,0x11,0xFE,0x79,0x02,0x11,0x02,0x11,0xFE,0x11,0x02,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB0,0x6D,0x00,0x00,0x21,0x1E,0x19,0xE0,0x01,0x00,0x41,0x02,0x31,0xFF,0x01,0x00,0x01,0x42,0x11,0x7F,0x7A,0x42,0x12,0x42,0x12,0x7E,0x12,0x42,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB0,0x6E,0x00,0x00,0x20,0x63,0x18,0x42,0x00,0x84,0x43,0xEF,0x30,0x84,0x00,0x84,0x00,0xC4,0x13,0x84,0x7A,0x9F,0x10,0x84,0x10,0x84,0x11,0x04,0x19,0x04,0x66,0x03,0x41,0xFC},
{0xB0,0x6F,0x00,0x00,0x0C,0xCC,0x33,0x30,0x08,0x88,0x1F,0xFC,0x10,0x08,0x1F,0xF8,0x00,0x00,0x3F,0xFC,0x21,0x04,0x21,0x04,0x3F,0xFC,0x20,0x02,0x20,0x02,0x20,0x03,0x1F,0xFE},
{0xB0,0x70,0x00,0x00,0x00,0x92,0x3F,0xDF,0x08,0x92,0x7F,0xF2,0x08,0x94,0x3F,0x94,0x08,0x92,0x10,0x12,0x1F,0x91,0x30,0x91,0x50,0x91,0x10,0x9E,0x1F,0x94,0x10,0x90,0x00,0x10},
{0xB0,0x71,0x00,0x00,0x06,0x12,0x04,0x1F,0x3F,0x92,0x04,0x12,0x04,0x94,0x7F,0xD4,0x0A,0x12,0x0A,0x12,0x2A,0x91,0x2A,0x91,0x4A,0x51,0x52,0x5E,0x12,0x14,0x16,0x10,0x22,0x10},
{0xB0,0x72,0x00,0x00,0x20,0x92,0x3F,0xDF,0x20,0x92,0x20,0x92,0x3F,0x94,0x20,0x94,0x07,0x92,0x3C,0x12,0x04,0x11,0x7F,0xD1,0x04,0x11,0x07,0x9E,0x7C,0x14,0x20,0x10,0x00,0x10},
{0xB0,0x73,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x50,0x42,0x52,0x23,0xFF,0x2A,0x52,0x0A,0x52,0x12,0x8E,0x13,0x02,0x62,0x02,0x23,0xFE,0x22,0x02,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xB0,0x74,0x00,0x00,0x02,0x00,0x7F,0x02,0x14,0xFF,0x54,0x02,0x7F,0x02,0x55,0x42,0x55,0x7E,0x67,0x42,0x41,0x40,0x41,0x40,0x7F,0x42,0x41,0x42,0x41,0x42,0x7F,0x43,0x41,0x3E},
{0xB0,0x75,0x00,0x00,0x01,0x30,0x7F,0xA0,0x14,0x22,0x55,0x3F,0x7F,0x42,0x55,0x42,0x55,0x82,0x67,0x12,0x41,0x7A,0x41,0x02,0x7F,0x02,0x41,0x02,0x41,0x02,0x7F,0x1C,0x41,0x08},
{0xB0,0x76,0x00,0x00,0x0C,0x00,0x14,0x02,0x12,0xFF,0x22,0x08,0x3F,0x08,0x48,0x08,0x0A,0x08,0x7F,0x08,0x08,0x08,0x4B,0x08,0x2C,0x08,0x29,0x08,0x0E,0x48,0x78,0x38,0x20,0x10},
{0xB0,0x77,0x00,0x00,0x0C,0x18,0x14,0x10,0x12,0x10,0x22,0x10,0x3F,0x10,0x48,0x12,0x0A,0xFF,0x7F,0x10,0x08,0x10,0x4B,0x10,0x2C,0x10,0x29,0x10,0x0E,0x10,0x78,0x10,0x20,0x10},
{0xB0,0x78,0x00,0x00,0x0C,0x03,0x14,0x02,0x12,0x32,0x22,0x22,0x3F,0x22,0x48,0x22,0x0A,0x22,0x7F,0x22,0x08,0x22,0x4B,0x22,0x2C,0x22,0x29,0x02,0x0E,0x12,0x78,0x0E,0x20,0x04},
{0xB0,0x79,0x00,0x00,0x06,0x60,0x08,0x18,0x10,0x16,0x66,0x62,0x19,0x80,0x06,0x70,0x18,0x0F,0x67,0xF0,0x00,0x80,0x00,0x88,0x1F,0xFC,0x00,0x90,0x0C,0x90,0x02,0xA2,0x7F,0xFF},
{0xB0,0x7A,0x00,0x00,0x0C,0x30,0x14,0x20,0x12,0x20,0x22,0x20,0x3F,0x20,0x48,0x28,0x0A,0x24,0x7F,0x26,0x08,0x23,0x4B,0x21,0x2C,0x20,0x29,0x20,0x0E,0x20,0x78,0x20,0x20,0x20},
{0xB0,0x7B,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x21,0x42,0x20,0x02,0x20,0xC2,0x20,0x82,0x21,0x42,0x21,0x22,0x26,0x12,0x20,0x0E,0x20,0x04},
{0xB0,0x7C,0x00,0x00,0x48,0x30,0x7D,0x22,0x49,0xFF,0x49,0x02,0x52,0x04,0x50,0xFC,0x48,0x00,0x44,0x02,0x45,0xFF,0x44,0x48,0x78,0x48,0x50,0x49,0x40,0x89,0x40,0x89,0x43,0x07},
{0xB0,0x7D,0x00,0x00,0x48,0x30,0x7C,0x24,0x4B,0xFE,0x48,0x20,0x51,0xFC,0x51,0x24,0x49,0xFC,0x45,0x24,0x45,0xFC,0x45,0x24,0x78,0x20,0x57,0xFF,0x40,0x20,0x40,0x20,0x40,0x20},
{0xB0,0x7E,0x00,0x00,0x48,0x30,0x7C,0x20,0x49,0xFC,0x48,0x20,0x50,0x22,0x53,0xFF,0x48,0x20,0x44,0x20,0x45,0xA4,0x45,0x3E,0x79,0x20,0x51,0x20,0x42,0xA0,0x42,0x63,0x44,0x1C},
{0xB0,0xA1,0x00,0x00,0x49,0x98,0x7D,0x10,0x49,0x16,0x49,0xD8,0x51,0x10,0x51,0x12,0x4B,0xD3,0x49,0x0E,0x44,0x30,0x44,0x24,0x7B,0xFE,0x50,0x20,0x40,0x20,0x40,0x22,0x47,0xFF},
{0xB0,0xA2,0x00,0x00,0x48,0x30,0x78,0x22,0x4B,0xFF,0x48,0x20,0x51,0xAC,0x50,0xA4,0x48,0xA4,0x45,0x6A,0x46,0x29,0x44,0x50,0x78,0x50,0x50,0x88,0x40,0x88,0x41,0x04,0x46,0x03},
{0xB0,0xA3,0x00,0x00,0x48,0x30,0x7C,0x50,0x48,0x88,0x49,0x04,0x56,0xFB,0x50,0x20,0x48,0x24,0x45,0xFE,0x44,0x20,0x45,0xA8,0x79,0x24,0x52,0x26,0x44,0x22,0x40,0xE0,0x40,0x40},
{0xB0,0xA4,0x00,0x00,0x48,0x04,0x7B,0xFE,0x48,0x00,0x49,0xB6,0x51,0x24,0x52,0x48,0x49,0x24,0x44,0x92,0x44,0x00,0x45,0xFE,0x78,0x20,0x50,0x20,0x40,0x22,0x47,0xFF,0x40,0x00},
{0xB0,0xA5,0x00,0x00,0x48,0x6C,0x7D,0xC8,0x48,0x48,0x48,0x4A,0x53,0xFF,0x50,0x88,0x48,0x88,0x45,0x08,0x45,0x28,0x44,0x20,0x7B,0xFE,0x50,0x20,0x40,0x20,0x40,0x22,0x47,0xFF},
{0xB0,0xA6,0x00,0x00,0x0C,0xC0,0x08,0x24,0x0F,0xFE,0x18,0x40,0x6F,0xFC,0x08,0x40,0x0F,0xFC,0x08,0x40,0x0F,0xFE,0x00,0x00,0x3F,0xFC,0x06,0x30,0x01,0xC0,0x06,0x38,0x78,0x07},
{0xB0,0xA7,0x00,0x00,0x0C,0x00,0x0A,0x48,0x12,0x7C,0x1D,0x48,0x20,0x48,0x7E,0x48,0x22,0x48,0x3E,0x48,0x22,0x48,0x3E,0x48,0x20,0x48,0x3E,0x49,0x20,0x89,0x3E,0x89,0x20,0x87},
{0xB0,0xA8,0x00,0x00,0x10,0x08,0x1F,0xFC,0x10,0x80,0x10,0x90,0x1F,0xF8,0x10,0x80,0x1F,0xF8,0x10,0x80,0x10,0x84,0x1F,0xFE,0x00,0x04,0x29,0x14,0x44,0x94,0x44,0xB8,0x00,0x10},
{0xB0,0xA9,0x00,0x00,0x08,0x10,0x0F,0xF8,0x08,0x10,0x09,0xF0,0x29,0x12,0x3F,0xFF,0x40,0x02,0x4F,0xF4,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x08,0x70,0x08,0x20},
{0xB0,0xAA,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x20,0x02,0x3F,0xFF,0x20,0x02,0x27,0xE2,0x24,0x22,0x27,0xE2,0x20,0x0E,0x20,0x04},
{0xB0,0xAB,0x00,0x00,0x30,0x03,0x2F,0x7A,0x24,0x12,0x2F,0x7A,0x24,0x12,0x2F,0x7A,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x02,0x20,0x0E,0x20,0x04},
{0xB0,0xAC,0x00,0x00,0x00,0x04,0x3F,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x20,0x02,0x3F,0xFF,0x22,0x42,0x24,0x3E,0x28,0x02,0x27,0xF2,0x20,0x82,0x20,0x8E,0x20,0x84},
{0xB0,0xAD,0x00,0x00,0x01,0x80,0x22,0x10,0x3F,0xF8,0x22,0x10,0x22,0x10,0x3F,0xF0,0x22,0x10,0x22,0x10,0x3F,0xF0,0x24,0x80,0x04,0x90,0x08,0xBA,0x08,0xAA,0x10,0x83,0x60,0x7E},
{0xB0,0xAE,0x00,0x00,0x0C,0x30,0x08,0x20,0x7F,0x22,0x08,0x7F,0x3E,0x40,0x22,0x84,0x3E,0x7E,0x22,0x04,0x3E,0x08,0x2A,0x10,0x08,0x20,0x7F,0x22,0x08,0x42,0x08,0x43,0x08,0x3E},
{0xB0,0xAF,0x00,0x00,0x0D,0x80,0x09,0x06,0x09,0xE4,0x12,0x24,0x15,0x2A,0x31,0x49,0x50,0x91,0x93,0x70,0x1C,0x0F,0x13,0xFC,0x12,0x04,0x13,0xFC,0x12,0x04,0x13,0xFC,0x12,0x04},
{0xB0,0xB0,0x00,0x00,0x0C,0x1E,0x0B,0xE0,0x0A,0x22,0x12,0x11,0x15,0xF9,0x31,0x08,0x51,0x10,0x13,0xFC,0x12,0x04,0x14,0x08,0x17,0xFF,0x19,0x51,0x12,0xA9,0x12,0xAA,0x10,0x0C},
{0xB0,0xB1,0x00,0x00,0x0C,0x24,0x0B,0xFE,0x08,0x00,0x10,0xF8,0x18,0x88,0x30,0xF8,0x52,0x02,0x13,0xFF,0x14,0x02,0x15,0xFC,0x10,0x20,0x10,0x20,0x11,0x20,0x10,0xE0,0x10,0x40},
{0xB0,0xB2,0x00,0x00,0x0A,0x42,0x0B,0xDF,0x0A,0x42,0x12,0x42,0x13,0xDE,0x32,0x42,0x52,0x00,0x12,0x82,0x13,0xDF,0x12,0x12,0x12,0x92,0x13,0xCC,0x12,0x0A,0x12,0x12,0x12,0x21},
{0xB0,0xB3,0x00,0x00,0x0A,0x02,0x0B,0xFF,0x0A,0x84,0x12,0xFC,0x12,0x84,0x32,0xFC,0x52,0x20,0x13,0xFF,0x12,0x24,0x12,0xC4,0x12,0x38,0x12,0x26,0x12,0x42,0x13,0xFF,0x12,0x00},
{0xB0,0xB4,0x00,0x00,0x0D,0x8C,0x09,0x08,0x0F,0xFF,0x11,0x08,0x18,0x60,0x30,0x42,0x57,0xFF,0x10,0x80,0x11,0x04,0x13,0xFE,0x15,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB0,0xB5,0x00,0x00,0x0D,0x8C,0x09,0x08,0x09,0x49,0x17,0xEF,0x11,0x09,0x31,0x11,0x55,0x51,0x17,0xEA,0x14,0x4A,0x14,0x44,0x14,0x44,0x17,0xCA,0x14,0x4A,0x10,0x11,0x10,0x21},
{0xB0,0xB6,0x00,0x00,0x0C,0x60,0x08,0x48,0x0B,0xFC,0x10,0x88,0x17,0xFF,0x30,0x00,0x53,0xFC,0x12,0x04,0x13,0xFC,0x10,0x20,0x13,0xFE,0x11,0x20,0x17,0xFF,0x10,0x20,0x10,0x20},
{0xB0,0xB7,0x00,0x00,0x0C,0x0C,0x0B,0x88,0x10,0xBE,0x10,0x8A,0x31,0x7F,0x52,0x0A,0x17,0xBE,0x10,0x88,0x10,0xBE,0x16,0x88,0x15,0x3F,0x19,0x08,0x12,0x88,0x12,0x60,0x14,0x1F},
{0xB0,0xB8,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x24,0x11,0xFC,0x19,0x24,0x31,0xFC,0x50,0x20,0x12,0x22,0x17,0xFF,0x12,0x22,0x12,0x32,0x12,0xEA,0x12,0x42,0x12,0x0E,0x12,0x04},
{0xB0,0xB9,0x00,0x00,0x0D,0x04,0x09,0xFE,0x09,0x24,0x11,0xFC,0x19,0x24,0x31,0xFC,0x51,0x04,0x10,0x02,0x17,0xFF,0x11,0x20,0x11,0x16,0x11,0x14,0x11,0x68,0x17,0x84,0x12,0x03},
{0xB0,0xBA,0x00,0x00,0x0B,0x18,0x0A,0x10,0x0A,0x96,0x13,0xD8,0x1A,0x12,0x32,0xD3,0x57,0x0E,0x12,0x30,0x11,0x44,0x11,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB0,0xBB,0x00,0x00,0x0C,0x30,0x08,0x22,0x08,0x3F,0x12,0x20,0x1B,0xFF,0x32,0x02,0x53,0xFE,0x12,0x02,0x13,0xFE,0x12,0x02,0x13,0xFE,0x12,0x02,0x10,0xD8,0x11,0x06,0x16,0x02},
{0xB0,0xBC,0x00,0x00,0x0A,0x43,0x0B,0xE2,0x0A,0x4A,0x12,0x4A,0x13,0xCA,0x32,0x4A,0x53,0xCA,0x12,0x4A,0x12,0x4A,0x13,0xCA,0x12,0x4A,0x10,0x02,0x13,0x42,0x12,0x2E,0x14,0x24},
{0xB0,0xBD,0x00,0x00,0x0C,0x60,0x08,0x50,0x08,0x88,0x11,0x04,0x1A,0xFB,0x34,0x00,0x53,0xC3,0x12,0x5A,0x13,0xD2,0x12,0x52,0x13,0xD2,0x12,0x52,0x12,0x42,0x12,0xCE,0x12,0x44},
{0xB0,0xBE,0x00,0x00,0x0A,0x3C,0x0B,0xC0,0x0A,0x04,0x13,0xFE,0x32,0x04,0x53,0xFC,0x12,0x04,0x12,0x82,0x12,0xFF,0x12,0xAA,0x12,0xAA,0x12,0xFE,0x12,0xAA,0x14,0xAE,0x14,0x82},
{0xB0,0xBF,0x00,0x00,0x0C,0x60,0x08,0x44,0x08,0x7E,0x10,0x84,0x15,0x48,0x34,0x30,0x54,0x4C,0x15,0x83,0x14,0x34,0x14,0x22,0x15,0xFF,0x14,0x20,0x10,0x50,0x10,0x8C,0x13,0x03},
{0xB0,0xC0,0x00,0x00,0x0C,0x30,0x08,0x22,0x0B,0xFF,0x10,0x00,0x19,0xFC,0x31,0x04,0x51,0x04,0x11,0xFC,0x10,0xA0,0x11,0xA6,0x12,0x94,0x14,0x88,0x10,0xE8,0x13,0x84,0x11,0x03},
{0xB0,0xC1,0x00,0x00,0x0C,0x02,0x0B,0xFF,0x08,0x20,0x12,0x42,0x1B,0xFF,0x32,0x8A,0x52,0x8A,0x12,0xFA,0x12,0x8A,0x12,0x8A,0x12,0xFA,0x12,0x8A,0x12,0x8A,0x13,0xFE,0x12,0x02},
{0xB0,0xC2,0x00,0x00,0x01,0x80,0x2D,0x04,0x33,0xDE,0x22,0x44,0x23,0xC4,0x22,0x44,0x23,0xC4,0x7A,0x5C,0x20,0x04,0x06,0x60,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xB0,0xC3,0x00,0x00,0x1F,0xF0,0x10,0x10,0x17,0xD0,0x10,0x10,0x17,0xD0,0x04,0x00,0x0F,0xE0,0x10,0x88,0x7F,0xFC,0x21,0x08,0x3F,0xF8,0x22,0x8A,0x04,0x82,0x08,0x83,0x70,0x7E},
{0xB0,0xC4,0x00,0x00,0x20,0x08,0x3F,0xFC,0x20,0x08,0x21,0x08,0x27,0xC8,0x24,0x48,0x27,0xC8,0x24,0x48,0x27,0xC8,0x20,0x09,0x2F,0xE9,0x21,0x05,0x47,0xC5,0x41,0x03,0x5F,0xF1},
{0xB0,0xC5,0x00,0x00,0x04,0x12,0x7F,0xFF,0x00,0x00,0x3E,0x66,0x22,0x44,0x3E,0x44,0x22,0x44,0x3E,0x44,0x22,0x5C,0x26,0x08,0x00,0x00,0x7F,0xFE,0x04,0x02,0x18,0x3C,0x60,0x08},
{0xB0,0xC6,0x00,0x00,0x00,0x83,0x7F,0xC2,0x00,0x1A,0x3F,0x92,0x20,0x92,0x20,0x92,0x3F,0x92,0x20,0x92,0x00,0x12,0x7F,0xD2,0x44,0x42,0x7F,0xC2,0x44,0x52,0x7F,0xCE,0x40,0x44},
{0xB0,0xC7,0x00,0x00,0x11,0x18,0x7F,0xD0,0x11,0x10,0x1F,0x12,0x15,0x7F,0x04,0x12,0x3F,0x92,0x24,0x92,0x3F,0x92,0x24,0x92,0x04,0x12,0x7F,0xA2,0x04,0x22,0x04,0x2E,0x04,0x44},
{0xB0,0xC8,0x00,0x00,0x02,0x30,0x7F,0x22,0x02,0x3F,0x34,0x42,0x09,0xA4,0x00,0x18,0x7F,0x26,0x09,0x59,0x1A,0x12,0x28,0xFF,0x28,0x12,0x48,0x22,0x08,0x22,0x38,0x4E,0x10,0x84},
{0xB0,0xC9,0x00,0x00,0x19,0x98,0x11,0x10,0x7F,0xD0,0x11,0x12,0x1F,0x7F,0x11,0x12,0x1F,0x12,0x11,0x12,0x7F,0xD2,0x25,0x12,0x38,0xD2,0x20,0x12,0x3F,0xA2,0x20,0x2E,0x00,0x44},
{0xB0,0xCA,0x00,0x00,0x07,0x98,0x3C,0x10,0x04,0x10,0x7F,0x92,0x04,0x7F,0x3F,0x92,0x24,0x92,0x3F,0x92,0x24,0x92,0x3F,0x92,0x04,0x22,0x3F,0xA2,0x04,0x42,0x7F,0x5C,0x00,0x88},
{0xB0,0xCB,0x00,0x00,0x0C,0x00,0x08,0x02,0x1F,0xFF,0x10,0x02,0x3F,0xE2,0x48,0x42,0x0F,0xC2,0x00,0x02,0x1F,0xE2,0x12,0x24,0x1F,0xE4,0x12,0x24,0x1F,0xE4,0x10,0x38,0x00,0x10},
{0xB0,0xCC,0x00,0x00,0x0C,0x30,0x08,0x20,0x7F,0x42,0x14,0x7F,0x22,0x82,0x5D,0x7A,0x00,0x4A,0x7F,0x4A,0x10,0x7A,0x12,0x42,0x3F,0x5C,0x22,0x49,0x02,0x41,0x1C,0x41,0x08,0x3F},
{0xB0,0xCD,0x00,0x00,0x21,0x30,0x3F,0xA0,0x21,0x20,0x3F,0x20,0x21,0x26,0x3F,0x28,0x21,0x30,0x00,0x20,0x7F,0xA2,0x04,0x22,0x35,0x23,0x27,0x9E,0x34,0x00,0x4C,0x03,0x43,0xFC},
{0xB0,0xCE,0x00,0x00,0x00,0x02,0x7F,0xFF,0x22,0x10,0x2F,0xFC,0x22,0x10,0x21,0x80,0x21,0x04,0x3F,0xFE,0x22,0x00,0x27,0xF8,0x3A,0x08,0x23,0xF8,0x22,0x08,0x20,0x00,0x1F,0xFE},
{0xB0,0xCF,0x00,0x00,0x00,0x04,0x7F,0xFE,0x20,0x00,0x23,0xF8,0x22,0x08,0x23,0xF8,0x22,0x08,0x20,0x00,0x2F,0xBE,0x28,0xA2,0x28,0xA2,0x2F,0xBE,0x28,0xA2,0x20,0x00,0x1F,0xFF},
{0xB0,0xD0,0x00,0x00,0x00,0x02,0x7F,0xFF,0x20,0x00,0x27,0xFC,0x24,0x00,0x27,0xFC,0x24,0x04,0x27,0xFC,0x24,0x00,0x25,0xFE,0x25,0x52,0x29,0xFE,0x29,0x52,0x29,0x06,0x1F,0xFF},
{0xB0,0xD1,0x00,0x00,0x03,0x40,0x02,0x20,0x1F,0xD0,0x08,0x10,0x12,0x24,0x7D,0x7A,0x21,0x82,0x0E,0x70,0x71,0x8F,0x06,0x30,0x38,0xC0,0x07,0x18,0x38,0x60,0x03,0x80,0x1C,0x00},
{0xB0,0xD2,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x00,0x3F,0xFE,0x22,0x22,0x3F,0xFE,0x00,0x00,0x1F,0xF8,0x06,0x30,0x01,0xC0,0x0E,0x38,0x70,0x07},
{0xB0,0xD3,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x04,0x10,0x22,0x24,0x3F,0xFE,0x22,0x44,0x24,0x44,0x38,0x3C,0x27,0xE4,0x24,0x24,0x27,0xE4,0x20,0x04,0x20,0x1C,0x20,0x08},
{0xB0,0xD4,0x00,0x00,0x01,0x8C,0x51,0x08,0x71,0x12,0x57,0xBF,0x51,0x22,0x51,0x22,0x51,0x22,0x51,0xBE,0x57,0x22,0x75,0x22,0x51,0x22,0x41,0x22,0x01,0x3E,0x07,0x22,0x02,0x00},
{0xB0,0xD5,0x00,0x00,0x01,0x86,0x51,0x04,0x71,0x04,0x57,0xDF,0x51,0x00,0x51,0x13,0x51,0x52,0x51,0x92,0x57,0x12,0x75,0x12,0x51,0x14,0x41,0x14,0x01,0x04,0x07,0x3F,0x02,0x00},
{0xB0,0xD6,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x40,0x48,0xC0,0x4B,0x20,0x48,0x76,0x49,0x54,0x48,0x98,0x4B,0x54,0x78,0x34,0x48,0xD2,0x43,0x11,0x00,0x10,0x00,0xE0,0x00,0x40},
{0xB0,0xD7,0x00,0x00,0x00,0x02,0x4B,0xFF,0x78,0x50,0x48,0x50,0x4A,0x52,0x4B,0xDF,0x4A,0x52,0x4A,0x02,0x4A,0x02,0x7A,0x52,0x4B,0xDE,0x42,0x52,0x00,0x50,0x00,0x52,0x0F,0xFF},
{0xB0,0xD8,0x00,0x00,0x00,0x50,0x48,0x50,0x78,0x52,0x4B,0xDF,0x48,0x50,0x48,0x54,0x4B,0xDE,0x48,0x50,0x78,0x50,0x48,0xD2,0x43,0x5F,0x02,0x50,0x00,0x90,0x00,0x90,0x01,0x10},
{0xB0,0xD9,0x00,0x00,0x00,0x30,0x01,0xA4,0x49,0x3E,0x79,0x20,0x4F,0xFF,0x48,0x00,0x49,0xFC,0x49,0x04,0x49,0xFC,0x79,0x04,0x49,0xFC,0x41,0x04,0x01,0x04,0x01,0x1C,0x01,0x08},
{0xB0,0xDA,0x00,0x00,0x04,0x82,0x57,0xBF,0x74,0x82,0x54,0xAA,0x54,0xBA,0x55,0x2A,0x55,0x2A,0x54,0xAA,0x54,0xAA,0x74,0xBA,0x57,0xAA,0x05,0x02,0x04,0x02,0x04,0x0E,0x04,0x04},
{0xB0,0xDB,0x00,0x00,0x01,0x04,0x49,0xFE,0x7D,0x04,0x49,0xFC,0x49,0x04,0x49,0xFC,0x49,0x04,0x4A,0x02,0x4B,0xFF,0x7A,0x02,0x4B,0xFE,0x42,0x02,0x02,0x02,0x03,0xFE,0x02,0x02},
{0xB0,0xDC,0x00,0x00,0x00,0x30,0x48,0xA6,0x78,0xA8,0x4B,0x30,0x48,0x48,0x48,0x86,0x4B,0x32,0x48,0x20,0x49,0x26,0x79,0x28,0x4A,0x50,0x40,0x50,0x00,0x88,0x01,0x04,0x06,0x03},
{0xB0,0xDD,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x21,0x42,0x20,0x02,0x27,0xE2,0x24,0x22,0x24,0x22,0x27,0xE2,0x24,0x22,0x20,0x0E,0x20,0x04},
{0xB0,0xDE,0x00,0x00,0x00,0xC0,0x48,0x82,0x7D,0xFF,0x49,0x02,0x4A,0x92,0x4C,0xFA,0x49,0x22,0x48,0x2A,0x4B,0xFE,0x78,0x22,0x49,0x2A,0x41,0xFA,0x01,0x0A,0x00,0x04,0x00,0x18},
{0xB0,0xDF,0x00,0x00,0x00,0xD8,0x00,0x90,0x49,0x22,0x79,0xFF,0x4B,0x10,0x4D,0x14,0x49,0xFE,0x49,0x10,0x49,0x14,0x49,0xFE,0x79,0x10,0x49,0x10,0x41,0x12,0x01,0xFF,0x01,0x00},
{0xB0,0xE0,0x00,0x00,0x00,0x60,0x4A,0x84,0x7B,0xFE,0x4A,0x44,0x4B,0xFC,0x4A,0x44,0x4B,0xFC,0x4A,0x44,0x78,0xB0,0x49,0x22,0x47,0xFF,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20},
{0xB0,0xE1,0x00,0x00,0x00,0x60,0x48,0x50,0x7C,0x90,0x49,0x0C,0x4A,0xF3,0x4C,0x00,0x49,0xFC,0x48,0x08,0x48,0x10,0x78,0x40,0x49,0x22,0x25,0x2A,0x05,0x09,0x09,0x0D,0x00,0xF8},
{0xB0,0xE2,0x00,0x00,0x06,0x60,0x04,0x84,0x0F,0xFE,0x08,0x40,0x1F,0xFC,0x68,0x40,0x0F,0xFC,0x08,0x40,0x0F,0xFF,0x08,0x00,0x07,0xF8,0x04,0x08,0x04,0x08,0x07,0xF8,0x04,0x08},
{0xB0,0xE3,0x00,0x00,0x00,0x82,0x57,0xDF,0x70,0x82,0x52,0x8A,0x51,0x04,0x52,0xCB,0x54,0x51,0x50,0x82,0x57,0xDF,0x70,0x82,0x52,0x8A,0x41,0x04,0x02,0xCA,0x02,0x4A,0x04,0x11},
{0xB0,0xE4,0x00,0x00,0x00,0x20,0x00,0x3E,0x4A,0x20,0x7B,0xFF,0x4A,0x22,0x4B,0xFC,0x4A,0x21,0x4A,0x1F,0x4A,0x00,0x7A,0xD8,0x4A,0x90,0x42,0x92,0x04,0x92,0x05,0x13,0x09,0x0E},
{0xB0,0xE5,0x00,0x00,0x03,0x09,0x52,0x0F,0x73,0xE9,0x54,0x89,0x58,0x89,0x57,0xE9,0x50,0x89,0x52,0x89,0x52,0xE9,0x72,0x89,0x52,0xE9,0x47,0x8F,0x02,0x0A,0x00,0x08,0x00,0x08},
{0xB0,0xE6,0x00,0x00,0x02,0x3C,0x4B,0xC0,0x7A,0x04,0x4B,0xFE,0x4A,0x04,0x4B,0xFC,0x4A,0x04,0x4A,0x28,0x4A,0x24,0x7B,0xFF,0x4A,0x20,0x44,0x50,0x04,0x48,0x08,0x84,0x01,0x03},
{0xB0,0xE7,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x02,0x4A,0x22,0x4A,0xFA,0x4A,0x22,0x4A,0xFA,0x4A,0x02,0x4A,0xFA,0x7A,0x8A,0x4A,0xFA,0x02,0x8A,0x02,0x02,0x04,0x0E,0x04,0x04},
{0xB0,0xE8,0x00,0x00,0x00,0x60,0x48,0x44,0x7C,0x7E,0x48,0x84,0x4B,0x38,0x48,0x10,0x48,0x82,0x4B,0x1F,0x4A,0x02,0x7A,0x82,0x4B,0xDE,0x42,0x02,0x02,0x02,0x03,0xFE,0x02,0x02},
{0xB0,0xE9,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x24,0x92,0x2B,0xEA,0x20,0x82,0x2F,0xFA,0x24,0x22,0x2B,0xDA,0x32,0x46,0x22,0x12,0x21,0xF2,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xB0,0xEA,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x52,0x20,0x4A,0x2F,0xFA,0x20,0x42,0x2F,0x5A,0x29,0x52,0x2F,0x22,0x20,0x2A,0x2F,0x5A,0x20,0x8A,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xB0,0xEB,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x27,0xF2,0x20,0x82,0x2F,0xFA,0x22,0x22,0x21,0x42,0x2F,0xFA,0x20,0x82,0x27,0xF2,0x20,0x82,0x20,0x82,0x3F,0xFE,0x20,0x02},
{0xB0,0xEC,0x00,0x00,0x18,0x34,0x10,0x22,0x10,0x22,0x13,0xFF,0x10,0x10,0x7D,0xD0,0x11,0x56,0x11,0x54,0x11,0xD4,0x14,0x08,0x18,0x69,0x73,0x95,0x21,0x15,0x00,0x23,0x00,0x41},
{0xB0,0xED,0x00,0x00,0x22,0x04,0x3F,0x7E,0x24,0x44,0x3F,0x24,0x21,0x28,0x3F,0x10,0x24,0x28,0x24,0x24,0x3F,0x43,0x20,0x80,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB0,0xEE,0x00,0x00,0x00,0x04,0x3F,0xFE,0x01,0x40,0x1F,0x7C,0x10,0x04,0x1F,0x7C,0x01,0x40,0x01,0x44,0x3F,0xFE,0x00,0x00,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB0,0xEF,0x00,0x00,0x18,0xCC,0x10,0x88,0x11,0x12,0x11,0xFF,0x7D,0x10,0x13,0x14,0x15,0xFE,0x11,0x10,0x11,0x14,0x1D,0xFE,0x71,0x10,0x21,0x10,0x01,0x12,0x01,0xFF,0x01,0x00},
{0xB0,0xF0,0x00,0x00,0x18,0x30,0x11,0x40,0x11,0xFC,0x11,0x04,0x7D,0xFC,0x11,0x00,0x11,0xFE,0x11,0x02,0x1D,0xFE,0x71,0x22,0x20,0x20,0x0F,0xFF,0x00,0x20,0x00,0x20,0x00,0x20},
{0xB0,0xF1,0x00,0x00,0x18,0x30,0x11,0x42,0x11,0xFF,0x11,0x22,0x7D,0xFE,0x11,0x22,0x11,0xFE,0x11,0x22,0x14,0x58,0x18,0x92,0x73,0xFF,0x20,0x10,0x00,0x10,0x00,0x10,0x00,0x10},
{0xB0,0xF2,0x00,0x00,0x06,0x18,0x04,0x10,0x1F,0xFC,0x04,0x10,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x12,0x7F,0xFF,0x04,0x10,0x18,0x8C,0x67,0xF3,0x00,0x80,0x00,0x84,0x3F,0xFE},
{0xB0,0xF3,0x00,0x00,0x08,0xCC,0x04,0x88,0x24,0x92,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x08,0x10,0x0F,0xF0,0x08,0x90,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB0,0xF4,0x00,0x00,0x18,0x60,0x10,0x40,0x11,0xF6,0x10,0x44,0x7C,0x48,0x13,0xFF,0x10,0x20,0x10,0x50,0x14,0x88,0x19,0xFC,0x76,0x84,0x20,0xFC,0x00,0x84,0x00,0xFC,0x00,0x84},
{0xB0,0xF5,0x00,0x00,0x0C,0x30,0x08,0x20,0x3E,0x20,0x08,0x24,0x08,0xFE,0x7F,0x24,0x22,0x24,0x14,0xA4,0x7F,0x64,0x08,0x34,0x08,0x2D,0x3E,0x25,0x08,0x45,0x08,0x43,0x08,0x81},
{0xB0,0xF6,0x00,0x00,0x18,0x30,0x10,0x24,0x11,0xFE,0x10,0x00,0x7C,0x8C,0x10,0x48,0x10,0x52,0x13,0xFF,0x10,0x00,0x1D,0xFC,0x71,0x04,0x21,0x04,0x01,0x04,0x01,0xFC,0x01,0x04},
{0xB0,0xF7,0x00,0x00,0x18,0x60,0x12,0x40,0x1E,0x42,0x22,0xFF,0x54,0x82,0x09,0x02,0x10,0x7A,0x69,0x4A,0x0F,0x4A,0x11,0x7A,0x6A,0x4A,0x0A,0x02,0x04,0x02,0x18,0x3C,0x60,0x08},
{0xB0,0xF8,0x00,0x00,0x01,0x80,0x01,0x02,0x7F,0xFF,0x04,0x10,0x19,0x0C,0x6F,0xDB,0x01,0x20,0x3F,0xFE,0x03,0x40,0x04,0x20,0x1F,0xF8,0x64,0x08,0x07,0xF8,0x04,0x08,0x07,0xF8},
{0xB0,0xF9,0x00,0x00,0x01,0x00,0x7F,0x84,0x11,0x7E,0x1F,0x44,0x11,0x24,0x1F,0x18,0x11,0x14,0x7F,0x63,0x01,0x00,0x7F,0xFF,0x02,0x10,0x0C,0x60,0x03,0xC0,0x06,0x38,0x38,0x0C},
{0xB0,0xFA,0x00,0x00,0x00,0x80,0x0F,0xF8,0x08,0x8A,0x7F,0xFF,0x08,0x88,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x02,0x00,0x7F,0xFF,0x04,0x20,0x03,0xC0,0x3E,0x3C},
{0xB0,0xFB,0x00,0x00,0x30,0x30,0x22,0x22,0x2B,0xFF,0x7A,0x02,0x2D,0x80,0x29,0x12,0x29,0xDF,0x2A,0x52,0x6A,0x52,0x55,0x5E,0x10,0x94,0x28,0x90,0x29,0x11,0x41,0x11,0x02,0x0F},
{0xB0,0xFC,0x00,0x00,0x30,0x04,0x20,0xFE,0x24,0x04,0x7D,0xFF,0x24,0x04,0x24,0xFC,0x24,0x00,0x25,0xFF,0x65,0x11,0x5A,0xFE,0x08,0x92,0x14,0x92,0x24,0x9E,0x40,0x94,0x00,0x10},
{0xB0,0xFD,0x00,0x00,0x0C,0x0E,0x08,0x08,0x7F,0x7F,0x18,0x18,0x2C,0x28,0x2B,0x2C,0x48,0x4B,0x0B,0x08,0x02,0x02,0x7F,0xFF,0x04,0x10,0x0C,0x20,0x03,0xC0,0x06,0x3C,0x38,0x04},
{0xB0,0xFE,0x00,0x00,0x32,0x41,0x23,0xDF,0x2A,0x41,0x7A,0x55,0x2A,0x5D,0x2A,0x95,0x2A,0x95,0x2A,0x55,0x6A,0x55,0x52,0x5D,0x13,0xD5,0x2A,0x81,0x2A,0x01,0x42,0x07,0x02,0x02},
{0xB1,0x40,0x00,0x00,0x30,0x84,0x20,0xFE,0x24,0x84,0x7E,0xFC,0x24,0x84,0x24,0xFC,0x24,0x84,0x24,0x00,0x65,0x02,0x59,0xFF,0x09,0x02,0x15,0xFE,0x25,0x02,0x21,0xFE,0x41,0x02},
{0xB1,0x41,0x00,0x00,0x30,0x30,0x21,0x42,0x25,0xFF,0x7D,0x22,0x25,0xFE,0x25,0x22,0x25,0xFE,0x25,0x22,0x64,0x58,0x58,0x92,0x0B,0xFF,0x14,0x10,0x14,0x10,0x20,0x10,0x40,0x10},
{0xB1,0x42,0x00,0x00,0x31,0x1E,0x21,0xF0,0x25,0x10,0x7D,0x12,0x25,0xFF,0x25,0x08,0x25,0x69,0x25,0x85,0x65,0x03,0x58,0xFC,0x08,0x84,0x14,0xFC,0x24,0x84,0x20,0xFC,0x40,0x84},
{0xB1,0x43,0x00,0x00,0x20,0x30,0x12,0x22,0x43,0xFF,0x2A,0x22,0x0A,0xFC,0x72,0x44,0x24,0x38,0x2A,0xC7,0x02,0x00,0x7F,0xFF,0x04,0x10,0x0C,0x60,0x03,0x80,0x0C,0x70,0x70,0x0C},
{0xB1,0x44,0x00,0x00,0x30,0x18,0x20,0x10,0x25,0xFF,0x7E,0x10,0x24,0xFE,0x24,0x10,0x25,0xFF,0x24,0x30,0x64,0x28,0x58,0x4B,0x08,0xCA,0x15,0x44,0x24,0x74,0x20,0xC2,0x40,0x41},
{0xB1,0x45,0x00,0x00,0x0C,0x30,0x08,0x20,0x7F,0xA0,0x00,0x24,0x3F,0x7E,0x21,0x24,0x3F,0x24,0x00,0xA4,0x7F,0x64,0x02,0x34,0x05,0xAD,0x7E,0x25,0x04,0x45,0x3C,0x43,0x08,0x81},
{0xB1,0x46,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x44,0x24,0x3E,0x3E,0x00,0x20,0x02,0xFC,0x7F,0x04,0x14,0x68,0x14,0x10,0x14,0x2D,0x24,0xC5,0x24,0x01,0x43,0xFE},
{0xB1,0x47,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x5F,0xFC,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x04,0x06,0x30,0x18,0x0E,0x60,0x02},
{0xB1,0x48,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x82,0x5F,0xFC,0x02,0x40,0x0C,0x30,0x00,0x02,0x7F,0xFF,0x00,0x08,0x1F,0x88,0x10,0x88,0x1F,0x88,0x00,0x38,0x00,0x10},
{0xB1,0x49,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4C,0x04,0x08,0xFE,0x0F,0x04,0x08,0x44,0x7F,0xA4,0x08,0x28,0x2A,0x10,0x49,0x28,0x49,0x28,0x38,0x44,0x11,0x83},
{0xB1,0x4A,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4C,0x04,0x0B,0xFE,0x10,0x20,0x31,0x44,0x51,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB1,0x4B,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x21,0x02,0x44,0xB4,0x14,0x40,0x65,0x92,0x06,0x19,0x1B,0xF1,0x60,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xB1,0x4C,0x00,0x00,0x20,0x86,0x3F,0xC4,0x20,0x84,0x20,0x84,0x3F,0xBF,0x20,0x84,0x2F,0x04,0x20,0x24,0x3F,0xA4,0x22,0x14,0x2A,0x94,0x2A,0x84,0x52,0x84,0x46,0x1C,0x42,0x08},
{0xB1,0x4D,0x00,0x00,0x01,0x08,0x3F,0xFC,0x01,0x00,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x01,0x04,0x3F,0xFA,0x00,0x10,0x7F,0xFF,0x08,0x10,0x06,0x10,0x02,0x30},
{0xB1,0x4E,0x00,0x00,0x06,0x22,0x34,0x3F,0x24,0x42,0x25,0xB4,0x3C,0x48,0x24,0x30,0x05,0xC6,0x04,0x04,0x7D,0xFF,0x24,0x04,0x24,0xC4,0x24,0x24,0x44,0x04,0x44,0x1C,0x04,0x08},
{0xB1,0x4F,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x80,0x27,0xEC,0x20,0x90,0x2F,0xFF,0x20,0x40,0x23,0xFC,0x26,0x04,0x5B,0xFC,0x42,0x04,0x43,0xFC,0x42,0x04},
{0xB1,0x50,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x2C,0xC0,0x28,0x94,0x36,0x94,0x25,0xFF,0x2C,0x94,0x34,0x94,0x24,0x9C,0x44,0x80,0x44,0xFF,0x44,0x80},
{0xB1,0x51,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x04,0x21,0xB0,0x21,0x24,0x2F,0x3E,0x21,0x20,0x2F,0x3E,0x21,0xA0,0x2F,0x3F,0x49,0x20,0x42,0x20,0x44,0x20},
{0xB1,0x52,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x00,0x00,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF0,0x00,0x02,0x7F,0xFF,0x00,0x80,0x0C,0x90,0x10,0x8C,0x63,0x84,0x01,0x00},
{0xB1,0x53,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x55,0x02,0x56,0x6C,0x54,0x49,0x54,0x89,0x55,0x07,0x54,0x00,0x54,0x04,0x7D,0xFE,0x44,0x20,0x40,0x20,0x00,0x22,0x03,0xFF},
{0xB1,0x54,0x00,0x00,0x18,0x30,0x10,0x24,0x13,0xFE,0x54,0x50,0x54,0x8C,0x55,0x04,0x57,0xFF,0x54,0x04,0x55,0xE4,0x55,0x24,0x7D,0x24,0x45,0xE4,0x40,0x04,0x00,0x1C,0x00,0x08},
{0xB1,0x55,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x55,0xFE,0x55,0x02,0x55,0x18,0x55,0x53,0x55,0x52,0x55,0x7E,0x7D,0x52,0x45,0x10,0x42,0xD3,0x02,0x92,0x02,0xFE,0x04,0x82},
{0xB1,0x56,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x40,0x27,0xFC,0x20,0x40,0x2F,0xFF,0x20,0x00,0x20,0x40,0x47,0xFC,0x40,0x40,0x5F,0xFF},
{0xB1,0x57,0x00,0x00,0x18,0x1E,0x11,0xE0,0x11,0x24,0x56,0x13,0x54,0x01,0x55,0xFE,0x54,0x22,0x57,0xFF,0x54,0x22,0x55,0xFE,0x7C,0x20,0x44,0x20,0x41,0x20,0x00,0xE0,0x00,0x40},
{0xB1,0x58,0x00,0x00,0x00,0xC0,0x30,0x86,0x20,0x84,0x3F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x00,0x12,0x40,0x1F,0x4C,0x10,0x70,0x13,0x42,0x7C,0x43,0x20,0x3E},
{0xB1,0x59,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x00,0x00,0x1F,0x3E,0x11,0x22,0x1F,0x3E,0x11,0x22,0x1F,0x3E,0x11,0x22,0x11,0x22,0x21,0x22,0x27,0x4E,0x42,0x44},
{0xB1,0x5A,0x00,0x00,0x00,0xC0,0x30,0x86,0x20,0x84,0x3F,0xFC,0x20,0x04,0x0C,0x60,0x08,0x84,0x1F,0xFE,0x30,0x80,0x5F,0xFC,0x10,0x80,0x1F,0xFC,0x10,0x82,0x1F,0xFF,0x10,0x00},
{0xB1,0x5B,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x10,0xC4,0x03,0x20,0x04,0x10,0x1B,0xEC,0x60,0x03,0x1F,0xFC,0x12,0x44,0x1F,0xFC,0x12,0x44,0x12,0x5C,0x10,0x08},
{0xB1,0x5C,0x00,0x00,0x19,0xCE,0x10,0x30,0x10,0x4C,0x55,0x82,0x54,0x40,0x57,0xFF,0x54,0x80,0x55,0xFC,0x56,0x84,0x54,0xFC,0x7C,0x84,0x44,0xFC,0x40,0x84,0x00,0x9C,0x00,0x88},
{0xB1,0x5D,0x00,0x00,0x00,0xC0,0x18,0x86,0x10,0x84,0x1F,0xFC,0x00,0x00,0x0C,0x0C,0x08,0x64,0x7E,0x42,0x08,0x9A,0x19,0x11,0x2C,0x20,0x2A,0x24,0x4A,0xFA,0x08,0x42,0x08,0x00},
{0xB1,0x5E,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x00,0x00,0x20,0x02,0x3F,0xFF,0x24,0x12,0x22,0x22,0x2F,0xFA,0x20,0x82,0x24,0x92,0x27,0xF2,0x24,0x12,0x20,0x0E,0x20,0x04},
{0xB1,0x5F,0x00,0x00,0x0C,0xCC,0x31,0x98,0x18,0xCC,0x08,0x44,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x02,0xC0,0x0C,0xB8,0x70,0x87,0x00,0x80},
{0xB1,0x60,0x00,0x00,0x08,0xCC,0x06,0x88,0x22,0x92,0x3F,0xFF,0x20,0x02,0x47,0xF4,0x04,0x10,0x07,0xF0,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x10,0x9C,0x10,0x88,0x00,0x80},
{0xB1,0x61,0x00,0x00,0x0A,0x50,0x0A,0x52,0x7F,0xFF,0x0A,0x50,0x13,0xD2,0x62,0x4E,0x00,0x00,0x3F,0xFE,0x20,0x82,0x4F,0xFC,0x08,0x88,0x08,0x88,0x08,0xB8,0x08,0x90,0x00,0x80},
{0xB1,0x62,0x00,0x00,0x18,0x84,0x10,0xFE,0x54,0x80,0x7E,0xFC,0x54,0x80,0x54,0xFC,0x54,0x80,0x57,0xFF,0x54,0xA0,0x5C,0x93,0x54,0x94,0x10,0x88,0x10,0xE8,0x13,0x84,0x11,0x03},
{0xB1,0x63,0x00,0x00,0x18,0x6C,0x10,0x48,0x54,0x92,0x7E,0xFF,0x54,0x88,0x55,0x88,0x56,0xFE,0x54,0x88,0x54,0x88,0x54,0xFE,0x5C,0x88,0x54,0x88,0x10,0x8A,0x10,0xFF,0x10,0x80},
{0xB1,0x64,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x40,0x27,0xF8,0x20,0x4A,0x2F,0xFF,0x20,0x48,0x27,0xF8,0x28,0x46,0x26,0x68,0x21,0x50,0x4E,0x4C,0x49,0xC3,0x40,0x80},
{0xB1,0x65,0x00,0x00,0x00,0xC0,0x20,0x84,0x3F,0xFF,0x20,0x88,0x2F,0xFF,0x20,0x88,0x27,0xF8,0x20,0x80,0x2F,0xFC,0x28,0x84,0x2F,0xFC,0x28,0x84,0x4F,0xFC,0x48,0x84,0x48,0x8C},
{0xB1,0x66,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x00,0x23,0x18,0x22,0x12,0x3F,0xFF,0x22,0x10,0x22,0x10,0x23,0xF0,0x22,0x10,0x20,0x00,0x45,0x24,0x48,0x92,0x48,0x92},
{0xB1,0x67,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x84,0x2F,0xFE,0x22,0x10,0x24,0xCC,0x38,0x83,0x27,0xF8,0x24,0x88,0x27,0xF8,0x24,0x8A,0x47,0xFA,0x40,0x83,0x40,0x7E},
{0xB1,0x68,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x00,0x25,0x44,0x26,0x5E,0x24,0x44,0x27,0x5C,0x24,0x44,0x27,0xFC,0x24,0x44,0x20,0xA0,0x40,0x90,0x43,0x0C,0x4C,0x03},
{0xB1,0x69,0x00,0x00,0x04,0x84,0x7E,0xFE,0x04,0x80,0x24,0xFC,0x3C,0x80,0x24,0xFC,0x20,0x80,0x45,0xFF,0x7E,0xA0,0x44,0x93,0x04,0x94,0x04,0x88,0x48,0xE8,0x3B,0x84,0x11,0x03},
{0xB1,0x6A,0x00,0x00,0x04,0x30,0x7E,0x24,0x04,0x43,0x25,0xFD,0x3C,0x10,0x24,0x92,0x20,0xFF,0x44,0x92,0x7E,0x92,0x44,0xFE,0x04,0x92,0x04,0x10,0x48,0x14,0x39,0xFB,0x10,0x81},
{0xB1,0x6B,0x00,0x00,0x04,0x10,0x3F,0x7E,0x04,0x10,0x3F,0x7E,0x04,0x10,0x07,0x7E,0x3C,0x10,0x14,0x10,0x00,0x00,0x0F,0xF8,0x00,0x0A,0x7F,0xFF,0x00,0x08,0x0F,0xF8,0x00,0x08},
{0xB1,0x6C,0x00,0x00,0x18,0xC3,0x10,0x82,0x10,0x84,0x7B,0xE8,0x10,0x93,0x30,0x82,0x39,0x84,0x55,0xC8,0x52,0xA3,0x52,0xA2,0x14,0x84,0x10,0x84,0x10,0x88,0x10,0x90,0x00,0x80},
{0xB1,0x6D,0x00,0x00,0x07,0x86,0x79,0x04,0x24,0x88,0x22,0x90,0x42,0x60,0x04,0x06,0x05,0x04,0x7F,0x88,0x0C,0x10,0x0E,0x63,0x15,0x02,0x15,0x04,0x24,0x18,0x44,0x60,0x04,0x00},
{0xB1,0x6E,0x00,0x00,0x20,0x46,0x3F,0xC4,0x20,0x48,0x22,0x48,0x2F,0x50,0x22,0x66,0x2F,0x44,0x20,0x48,0x2F,0x48,0x29,0x53,0x2F,0x62,0x20,0x44,0x41,0xC4,0x40,0x88,0x40,0x30},
{0xB1,0x6F,0x00,0x00,0x19,0x04,0x11,0xFE,0x21,0x04,0x4D,0xFC,0x09,0x04,0x11,0xFC,0x18,0x00,0x33,0xFE,0x50,0x08,0x17,0xFF,0x10,0x08,0x12,0x08,0x11,0x88,0x10,0x38,0x10,0x10},
{0xB1,0x70,0x00,0x00,0x18,0x30,0x10,0x20,0x21,0xA4,0x4D,0x3E,0x09,0x20,0x11,0x22,0x17,0xFF,0x30,0x20,0x50,0x20,0x11,0xA4,0x11,0x3E,0x11,0x20,0x12,0xA0,0x12,0x60,0x14,0x1F},
{0xB1,0x71,0x00,0x00,0x18,0xCC,0x10,0x88,0x20,0x88,0x4D,0x54,0x09,0x52,0x12,0x22,0x18,0x00,0x30,0x30,0x51,0xA0,0x11,0x24,0x11,0x3E,0x11,0x20,0x12,0xA0,0x12,0x60,0x14,0x1F},
{0xB1,0x72,0x00,0x00,0x18,0x50,0x10,0x50,0x20,0x52,0x4B,0xDF,0x08,0x50,0x10,0x52,0x1B,0xDF,0x30,0x50,0x50,0x50,0x10,0xD2,0x13,0x5F,0x12,0x50,0x10,0x90,0x10,0x90,0x11,0x10},
{0xB1,0x73,0x00,0x00,0x1B,0x09,0x12,0x0F,0x23,0xE9,0x44,0x89,0x18,0x89,0x17,0xE9,0x30,0x89,0x52,0x89,0x12,0xE9,0x12,0x89,0x12,0xE9,0x17,0x8F,0x12,0x0A,0x10,0x08,0x10,0x08},
{0xB1,0x74,0x00,0x00,0x18,0x30,0x10,0x24,0x23,0xFE,0x4C,0x20,0x09,0xA6,0x11,0x24,0x32,0xAA,0x54,0xB2,0x10,0x20,0x10,0x60,0x10,0xB0,0x11,0x2C,0x16,0x23,0x10,0x20,0x10,0x20},
{0xB1,0x75,0x00,0x00,0x18,0x30,0x11,0xA4,0x21,0x22,0x4A,0x23,0x0C,0x21,0x13,0xFE,0x32,0x02,0x52,0xFA,0x12,0x8A,0x12,0x8A,0x12,0xFA,0x12,0x8A,0x12,0x02,0x12,0x0E,0x10,0x04},
{0xB1,0x76,0x00,0x00,0x3F,0xFC,0x03,0x30,0x10,0xC4,0x1F,0xFE,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x11,0x0C,0x04,0x80,0x24,0x92,0x24,0x11,0x44,0x19,0x03,0xF0},
{0xB1,0x77,0x00,0x00,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x80,0x3F,0xFE,0x20,0x82,0x3F,0xFE,0x20,0x82,0x00,0x80,0x05,0x00,0x24,0xD2,0x24,0x11,0x44,0x19,0x03,0xF0},
{0xB1,0x78,0x00,0x00,0x00,0xFC,0x3F,0x80,0x08,0x98,0x04,0xA2,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x00,0x06,0x80,0x24,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB1,0x79,0x00,0x00,0x18,0x60,0x10,0x44,0x36,0x7E,0x54,0x84,0x15,0x44,0x14,0x28,0x14,0x10,0x14,0x6C,0x11,0x83,0x00,0x00,0x06,0x80,0x24,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB1,0x7A,0x00,0x00,0x0C,0xC0,0x08,0x82,0x19,0xFF,0x29,0x12,0x4A,0x10,0x08,0x94,0x0B,0x12,0x08,0x72,0x08,0x20,0x00,0x80,0x06,0x40,0x24,0x42,0x24,0x11,0x44,0x19,0x03,0xF0},
{0xB1,0x7B,0x00,0x00,0x18,0x30,0x12,0x22,0x13,0xFF,0x1A,0x02,0x55,0x80,0x55,0x12,0x51,0xDE,0x12,0x52,0x12,0x52,0x15,0x56,0x10,0x92,0x10,0x90,0x11,0x11,0x11,0x11,0x12,0x0F},
{0xB1,0x7C,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x18,0x00,0x54,0xC6,0x54,0x84,0x51,0x4A,0x12,0x51,0x10,0x20,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20},
{0xB1,0x7D,0x00,0x00,0x18,0x18,0x11,0x12,0x11,0xFF,0x19,0x00,0x55,0x18,0x55,0x12,0x51,0x1F,0x11,0x10,0x11,0x52,0x11,0x7F,0x11,0x42,0x11,0x42,0x12,0x42,0x12,0x7E,0x14,0x42},
{0xB1,0x7E,0x00,0x00,0x18,0x24,0x13,0xFE,0x10,0x20,0x19,0xFC,0x54,0x24,0x57,0xFF,0x54,0x24,0x11,0xFC,0x10,0x40,0x17,0xFF,0x10,0x44,0x11,0x88,0x10,0x70,0x10,0xCE,0x13,0x02},
{0xB1,0xA1,0x00,0x00,0x18,0x20,0x13,0xFE,0x10,0x20,0x19,0xFC,0x54,0x20,0x57,0xFF,0x50,0x00,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0x1C,0x01,0x08},
{0xB1,0xA2,0x00,0x00,0x18,0x30,0x10,0x24,0x11,0xFE,0x18,0x20,0x54,0x22,0x57,0xFF,0x50,0x84,0x10,0x48,0x11,0xFE,0x10,0x20,0x10,0x22,0x13,0xFF,0x10,0x20,0x10,0x20,0x10,0x20},
{0xB1,0xA3,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x00,0x19,0xFC,0x55,0x00,0x55,0xFC,0x51,0x00,0x17,0xFF,0x11,0x20,0x11,0x23,0x11,0x14,0x11,0x08,0x11,0xE8,0x17,0x04,0x12,0x03},
{0xB1,0xA4,0x00,0x00,0x18,0xCC,0x10,0x88,0x10,0x88,0x1B,0xFE,0x54,0x88,0x54,0x8A,0x53,0xFF,0x10,0x00,0x11,0x04,0x11,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB1,0xA5,0x00,0x00,0x18,0x24,0x10,0x3E,0x10,0x20,0x19,0x24,0x55,0xFE,0x55,0x04,0x51,0xFC,0x11,0x04,0x11,0xFC,0x11,0x24,0x10,0x20,0x17,0xFF,0x10,0x20,0x10,0x20,0x10,0x20},
{0xB1,0xA6,0x00,0x00,0x1A,0x02,0x13,0xFF,0x12,0x02,0x1A,0x8A,0x56,0x52,0x56,0xFA,0x52,0x22,0x12,0xA2,0x12,0xFA,0x12,0x82,0x12,0x82,0x12,0x7A,0x12,0x02,0x12,0x0E,0x12,0x04},
{0xB1,0xA7,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x19,0xFC,0x55,0x04,0x55,0xFC,0x51,0x04,0x10,0x80,0x11,0xFF,0x16,0x4A,0x11,0x92,0x16,0x22,0x10,0xC2,0x13,0x1C,0x10,0x08},
{0xB1,0xA8,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x19,0x22,0x55,0x7A,0x55,0x22,0x51,0x7A,0x11,0x02,0x11,0x7A,0x11,0x4A,0x11,0x7A,0x11,0x4A,0x12,0x02,0x12,0x0E,0x14,0x04},
{0xB1,0xA9,0x00,0x00,0x18,0xD8,0x10,0x90,0x10,0x90,0x19,0x22,0x55,0xFF,0x55,0x10,0x53,0x10,0x15,0xFE,0x11,0x10,0x11,0x10,0x11,0xFE,0x11,0x10,0x11,0x10,0x11,0xFF,0x11,0x00},
{0xB1,0xAA,0x00,0x00,0x18,0x1E,0x11,0xF0,0x10,0x12,0x1B,0xFF,0x54,0x58,0x54,0x94,0x53,0x13,0x10,0x00,0x10,0xFC,0x10,0x08,0x10,0x12,0x13,0xFF,0x10,0x10,0x10,0x70,0x10,0x20},
{0xB1,0xAB,0x00,0x00,0x18,0xC0,0x10,0x82,0x10,0xFF,0x11,0x2A,0x5A,0x4A,0x54,0x92,0x55,0x22,0x10,0x4C,0x10,0x00,0x10,0xA0,0x10,0x92,0x12,0x91,0x14,0x85,0x14,0x85,0x10,0x78},
{0xB1,0xAC,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x18,0x00,0x55,0xFC,0x55,0x04,0x51,0xFC,0x10,0x00,0x11,0xFC,0x10,0x08,0x10,0x12,0x17,0xFF,0x10,0x10,0x10,0xF0,0x10,0x20},
{0xB1,0xAD,0x00,0x00,0x00,0x68,0x00,0x46,0x20,0x40,0x3F,0xFF,0x20,0x40,0x24,0x40,0x27,0x26,0x24,0x24,0x3F,0xA8,0x22,0x28,0x2B,0x10,0x2A,0xAA,0x52,0xAA,0x4E,0x47,0x44,0x82},
{0xB1,0xAE,0x00,0x00,0x00,0x04,0x7F,0xFE,0x01,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x01,0x23,0x01,0xFC,0x7F,0x00,0x00,0x9D,0x00,0x61,0x03,0x99,0x3C,0x07},
{0xB1,0xAF,0x00,0x00,0x20,0xFC,0x3F,0x00,0x20,0x00,0x3F,0xFC,0x20,0x04,0x3F,0xFC,0x20,0x00,0x27,0xF8,0x24,0x08,0x2F,0xFC,0x28,0x84,0x2F,0xFD,0x48,0x01,0x48,0x01,0x47,0xFF},
{0xB1,0xB0,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x00,0x08,0xFE,0x08,0x82,0x0A,0x82,0x0C,0xFE,0x18,0x92,0x78,0x10,0x28,0xD4,0x08,0x92,0x09,0x13,0x3A,0x71,0x10,0x20},
{0xB1,0xB1,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x52,0x12,0x54,0x10,0x91,0x14,0x8F,0x19,0x00,0x70,0x04,0x51,0xFE,0x10,0x20,0x10,0x20,0x10,0x22,0x73,0xFF,0x20,0x00},
{0xB1,0xB2,0x00,0x00,0x18,0x30,0x10,0xA4,0x10,0xA2,0x7D,0x7D,0x11,0x29,0x10,0x44,0x15,0xFF,0x18,0x44,0x70,0x82,0x53,0x7D,0x10,0x44,0x10,0x5C,0x10,0x49,0x70,0x41,0x20,0x3F},
{0xB1,0xB3,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x00,0x10,0xD8,0x10,0x92,0x15,0x1F,0x19,0x22,0x73,0x2A,0x55,0x54,0x11,0x14,0x11,0x08,0x11,0x14,0x71,0x14,0x21,0x23},
{0xB1,0xB4,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x7E,0xD8,0x10,0x91,0x10,0x8F,0x15,0x30,0x18,0x22,0x73,0xFF,0x50,0x60,0x10,0xB0,0x10,0xAC,0x11,0x23,0x72,0x20,0x20,0x20},
{0xB1,0xB5,0x00,0x00,0x18,0x30,0x10,0x24,0x11,0xFE,0x7C,0x88,0x10,0x48,0x10,0x52,0x13,0xFF,0x14,0x00,0x18,0x42,0x73,0xFF,0x50,0x44,0x11,0x88,0x10,0x70,0x70,0xCC,0x23,0x02},
{0xB1,0xB6,0x00,0x00,0x18,0x24,0x13,0xFE,0x10,0x20,0x7D,0xFC,0x10,0x24,0x13,0xFF,0x14,0x24,0x19,0xFC,0x70,0x20,0x51,0xA4,0x11,0x3E,0x11,0x20,0x12,0xA0,0x72,0x60,0x24,0x1F},
{0xB1,0xB7,0x00,0x00,0x18,0x30,0x10,0x20,0x13,0xFE,0x7C,0x20,0x11,0xFC,0x10,0x48,0x17,0xFF,0x18,0x84,0x71,0x22,0x56,0xF9,0x10,0x20,0x13,0xFE,0x10,0x20,0x70,0x20,0x20,0x20},
{0xB1,0xB8,0x00,0x00,0x19,0x01,0x11,0xFF,0x11,0x01,0x7D,0x01,0x11,0xFF,0x11,0x01,0x15,0x0C,0x19,0x69,0x71,0x49,0x51,0x7F,0x11,0x08,0x11,0x69,0x12,0x49,0x72,0x7F,0x22,0x41},
{0xB1,0xB9,0x00,0x00,0x18,0xCC,0x10,0x88,0x10,0x88,0x7D,0xFE,0x10,0x88,0x10,0x8A,0x13,0xFF,0x14,0x00,0x19,0x04,0x71,0xFE,0x51,0x04,0x11,0xFC,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xB1,0xBA,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x00,0x7D,0x14,0x11,0x7E,0x11,0x10,0x15,0x12,0x19,0xFF,0x71,0x00,0x51,0x14,0x11,0x7E,0x12,0x10,0x12,0x12,0x72,0xFF,0x24,0x00},
{0xB1,0xBB,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x50,0x10,0x88,0x11,0x34,0x16,0x23,0x11,0xFC,0x1D,0x24,0x71,0xFC,0x51,0x24,0x11,0xFD,0x10,0x21,0x70,0x21,0x20,0x1F},
{0xB1,0xBC,0x00,0x00,0x18,0x24,0x10,0x3E,0x10,0x20,0x7D,0x24,0x11,0xFE,0x11,0x04,0x15,0xFC,0x19,0x04,0x71,0xFC,0x51,0x24,0x10,0x20,0x17,0xFF,0x10,0x20,0x70,0x20,0x20,0x20},
{0xB1,0xBD,0x00,0x00,0x18,0x04,0x10,0xFE,0x10,0x04,0x7D,0xFF,0x10,0x04,0x10,0xFC,0x14,0x00,0x19,0xFF,0x71,0x11,0x52,0xFE,0x10,0x92,0x10,0x92,0x10,0x9E,0x70,0x94,0x20,0x10},
{0xB1,0xBE,0x00,0x00,0x18,0xCC,0x10,0x88,0x13,0xE8,0x7C,0x88,0x10,0x88,0x13,0xE8,0x14,0x0C,0x18,0xCA,0x70,0x8B,0x53,0xE9,0x10,0x88,0x10,0xE8,0x17,0x88,0x72,0x08,0x20,0x08},
{0xB1,0xBF,0x00,0x00,0x19,0x29,0x11,0xEF,0x11,0x29,0x7D,0xEF,0x11,0x29,0x11,0xEF,0x15,0x29,0x19,0x01,0x71,0x01,0x51,0x01,0x11,0x01,0x11,0x01,0x11,0x01,0x71,0x07,0x21,0x02},
{0xB1,0xC0,0x00,0x00,0x18,0x6C,0x10,0x48,0x10,0x92,0x7C,0xFF,0x11,0x88,0x12,0x88,0x10,0xFE,0x14,0x88,0x18,0x88,0x70,0xFE,0x50,0x88,0x10,0x88,0x10,0x8A,0x70,0xFF,0x20,0x80},
{0xB1,0xC1,0x00,0x00,0x18,0x30,0x10,0x50,0x10,0x48,0x7C,0x84,0x11,0x0A,0x12,0xFD,0x10,0x00,0x15,0xFE,0x19,0x52,0x71,0x52,0x51,0xFE,0x11,0x52,0x11,0x52,0x71,0x56,0x21,0x02},
{0xB1,0xC2,0x00,0x00,0x18,0x1E,0x11,0xE0,0x11,0x23,0x7C,0x92,0x10,0x94,0x11,0xFF,0x15,0x01,0x1A,0x02,0x70,0xFC,0x50,0x44,0x10,0x48,0x10,0x30,0x10,0x28,0x70,0xC4,0x23,0x03},
{0xB1,0xC3,0x00,0x00,0x18,0x1E,0x11,0xE0,0x11,0x24,0x7D,0x13,0x12,0x11,0x11,0xFE,0x14,0x22,0x1B,0xFF,0x70,0x22,0x51,0xFE,0x10,0x22,0x10,0x20,0x10,0x20,0x70,0xE0,0x20,0x40},
{0xB1,0xC4,0x00,0x00,0x18,0x3E,0x11,0xE0,0x11,0x24,0x7D,0x12,0x12,0x12,0x10,0x00,0x14,0x30,0x18,0x22,0x73,0xFF,0x50,0x60,0x10,0xB0,0x10,0xAC,0x11,0x23,0x72,0x20,0x20,0x20},
{0xB1,0xC5,0x00,0x00,0x18,0xC0,0x10,0x82,0x11,0xFF,0x7D,0x02,0x12,0x22,0x11,0x2A,0x10,0xB2,0x15,0xFE,0x18,0x62,0x70,0xB2,0x50,0xAE,0x11,0x22,0x10,0x02,0x70,0x3C,0x20,0x08},
{0xB1,0xC6,0x00,0x00,0x18,0x28,0x10,0x28,0x10,0x2A,0x7D,0xEF,0x10,0x28,0x10,0x2A,0x15,0xEF,0x18,0x28,0x70,0x6A,0x51,0xAF,0x11,0x28,0x10,0x48,0x10,0x48,0x70,0x88,0x21,0x08},
{0xB1,0xC7,0x00,0x00,0x18,0xC0,0x10,0x82,0x11,0xFF,0x7D,0x02,0x12,0x82,0x10,0xFA,0x11,0x22,0x15,0xFA,0x18,0x22,0x71,0x2A,0x51,0xFA,0x11,0x0A,0x10,0x02,0x70,0x3C,0x20,0x08},
{0xB1,0xC8,0x00,0x00,0x1A,0xD8,0x13,0x10,0x12,0x12,0x7A,0x1F,0x13,0xD2,0x12,0xA0,0x16,0xAC,0x1A,0x88,0x72,0x88,0x52,0x88,0x12,0x98,0x12,0x94,0x14,0xA4,0x74,0x22,0x24,0x41},
{0xB1,0xC9,0x00,0x00,0x18,0x30,0x10,0x50,0x10,0x48,0x7C,0x84,0x13,0x7B,0x10,0x00,0x15,0xFE,0x18,0x04,0x70,0x08,0x50,0x08,0x10,0xA0,0x12,0x92,0x12,0x95,0x74,0x85,0x20,0x78},
{0xB1,0xCA,0x00,0x00,0x19,0x1E,0x11,0xE0,0x11,0x02,0x7D,0xFF,0x11,0x02,0x11,0xFE,0x15,0x00,0x19,0x14,0x71,0x12,0x51,0xFF,0x11,0x10,0x12,0x28,0x12,0x28,0x72,0x44,0x24,0x83},
{0xB1,0xCB,0x00,0x00,0x18,0x60,0x10,0x50,0x10,0x88,0x7D,0x04,0x12,0xFB,0x14,0x20,0x10,0x24,0x15,0xFE,0x18,0x20,0x71,0x24,0x51,0xFE,0x11,0x04,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xB1,0xCC,0x00,0x00,0x18,0x30,0x10,0x22,0x11,0xFF,0x7C,0x48,0x10,0x84,0x13,0x03,0x10,0xFC,0x14,0x00,0x1B,0xFF,0x70,0x20,0x51,0xA8,0x11,0x26,0x12,0x22,0x70,0xE0,0x20,0x40},
{0xB1,0xCD,0x00,0x00,0x04,0x18,0x15,0x10,0x14,0x92,0x24,0x9F,0x3F,0xD2,0x64,0x92,0x24,0xB2,0x2C,0xD4,0x36,0x94,0x25,0x88,0x24,0x88,0x24,0x94,0x25,0x94,0x24,0xA2,0x20,0x41},
{0xB1,0xCE,0x00,0x00,0x0C,0x18,0x08,0x10,0x7F,0x10,0x08,0x12,0x3E,0x3F,0x08,0x22,0x09,0x22,0x7F,0xA2,0x10,0x54,0x1F,0x14,0x11,0x08,0x11,0x14,0x21,0x14,0x2E,0x22,0x44,0x41},
{0xB1,0xCF,0x00,0x00,0x0A,0x30,0x09,0x20,0x09,0x20,0x7F,0xA2,0x08,0x3F,0x4B,0x22,0x2A,0x42,0x2C,0xA2,0x08,0x14,0x1C,0x14,0x6B,0x08,0x49,0x14,0x08,0x14,0x38,0x22,0x10,0xC1},
{0xB1,0xD0,0x00,0x00,0x0C,0x18,0x08,0xD0,0x3E,0x90,0x09,0x12,0x0A,0x3F,0x7F,0xA2,0x08,0x22,0x3F,0x52,0x12,0x14,0x64,0x94,0x0F,0x08,0x34,0x14,0x04,0x12,0x1C,0x22,0x08,0xC1},
{0xB1,0xD1,0x00,0x00,0x42,0x60,0x7F,0x40,0x42,0x42,0x42,0x7F,0x7E,0x84,0x42,0x84,0x7E,0xC4,0x43,0x48,0x42,0x28,0x7E,0x10,0x42,0x10,0x14,0x28,0x22,0x24,0x22,0x47,0x41,0x82},
{0xB1,0xD2,0x00,0x00,0x27,0x30,0x38,0x22,0x20,0x3F,0x3F,0x42,0x21,0xA4,0x21,0x18,0x3F,0x24,0x20,0xC3,0x48,0x08,0x4F,0xFC,0x08,0x08,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB1,0xD3,0x00,0x00,0x18,0x18,0x10,0x90,0x1F,0xD2,0x20,0x3F,0x5F,0xA2,0x14,0xA2,0x12,0xA2,0x7F,0xD4,0x10,0x94,0x24,0x88,0x22,0x88,0x3F,0xD4,0x21,0x14,0x0F,0x22,0x02,0x41},
{0xB1,0xD4,0x00,0x00,0x0C,0x18,0x1A,0x10,0x11,0x12,0x20,0xBF,0x5F,0x22,0x04,0x22,0x04,0x52,0x7F,0x94,0x04,0x14,0x35,0x08,0x24,0xC8,0x44,0x54,0x04,0x14,0x1C,0x22,0x08,0x41},
{0xB1,0xD5,0x00,0x00,0x06,0x18,0x04,0x90,0x7F,0xD0,0x04,0x12,0x3F,0xBF,0x24,0xA2,0x24,0xA2,0x3F,0xD2,0x24,0x94,0x0C,0x14,0x17,0x08,0x14,0xD4,0x24,0x12,0x04,0x22,0x04,0x41},
{0xB1,0xD6,0x00,0x00,0x01,0x18,0x7F,0x90,0x08,0x10,0x09,0x12,0x7F,0xBF,0x11,0x22,0x11,0x22,0x7F,0xD2,0x00,0x14,0x21,0x14,0x3F,0x88,0x21,0x14,0x21,0x12,0x3F,0x22,0x21,0x41},
{0xB1,0xD7,0x00,0x00,0x3C,0x06,0x0A,0x24,0x11,0x94,0x20,0x94,0x5F,0x04,0x04,0x24,0x05,0x14,0x7F,0x94,0x04,0x07,0x35,0x1C,0x25,0x64,0x44,0x84,0x04,0x84,0x1C,0x04,0x08,0x04},
{0xB1,0xD8,0x00,0x00,0x0C,0x06,0x09,0x24,0x1F,0x94,0x12,0x14,0x3F,0x84,0x64,0xA4,0x24,0x94,0x3F,0x94,0x24,0x87,0x24,0x8C,0x3F,0xB4,0x20,0x84,0x20,0x84,0x43,0x84,0x41,0x04},
{0xB1,0xD9,0x00,0x00,0x0C,0x06,0x08,0x4F,0x7F,0x70,0x08,0x40,0x7F,0x40,0x49,0x42,0x7F,0x7F,0x49,0x44,0x7F,0x44,0x49,0x44,0x08,0x44,0x7F,0x44,0x08,0x84,0x08,0x84,0x09,0x04},
{0xB1,0xDA,0x00,0x00,0x18,0x60,0x10,0x42,0x14,0xFF,0x7E,0x80,0x21,0x60,0x24,0x44,0x3E,0x7E,0x24,0x90,0x25,0x12,0x24,0xFF,0x24,0x10,0x24,0x28,0x44,0x24,0x5C,0x44,0x49,0x83},
{0xB1,0xDB,0x00,0x00,0x18,0x60,0x10,0x40,0x14,0x42,0x7E,0xFF,0x20,0x80,0x25,0x02,0x3E,0xFF,0x24,0x12,0x24,0xD0,0x24,0x94,0x24,0x9E,0x24,0x90,0x45,0x50,0x5D,0x30,0x49,0x0F},
{0xB1,0xDC,0x00,0x00,0x18,0xC0,0x10,0x82,0x14,0xFF,0x7E,0x80,0x21,0x18,0x25,0x10,0x3E,0x94,0x24,0xFE,0x24,0x90,0x25,0x14,0x24,0xFE,0x24,0x10,0x44,0x12,0x5D,0xFF,0x48,0x00},
{0xB1,0xDD,0x00,0x00,0x18,0xC0,0x10,0x82,0x14,0xFF,0x7E,0x80,0x21,0x42,0x25,0x7F,0x3E,0x42,0x24,0x7E,0x24,0x40,0x24,0xB0,0x24,0xA6,0x24,0xB8,0x44,0xA1,0x5D,0x21,0x49,0x1F},
{0xB1,0xDE,0x00,0x00,0x01,0x80,0x01,0x00,0x0F,0xF8,0x01,0x0A,0x7F,0xFF,0x01,0x08,0x1F,0xFC,0x01,0x00,0x3F,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x0A,0x7F,0xFF},
{0xB1,0xDF,0x00,0x00,0x00,0xC0,0x48,0x90,0x78,0xF8,0x49,0x10,0x49,0x22,0x4B,0xFF,0x7E,0x22,0x4A,0x22,0x4B,0xFE,0x4A,0x92,0x78,0x90,0x48,0x92,0x41,0x12,0x01,0x13,0x02,0x0E},
{0xB1,0xE0,0x00,0x00,0x00,0x04,0x4B,0xFE,0x78,0x40,0x48,0x48,0x4B,0xFC,0x48,0x88,0x78,0x8A,0x4B,0xFF,0x48,0x00,0x49,0x04,0x79,0xFE,0x49,0x04,0x01,0x04,0x01,0xFC,0x01,0x04},
{0xB1,0xE1,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x28,0x0A,0x3F,0xFF,0x20,0x00,0x27,0xF8,0x20,0x02,0x3F,0xFF,0x22,0x40,0x22,0x2C,0x22,0xD0,0x4F,0x0C,0x44,0x03},
{0xB1,0xE2,0x00,0x00,0x01,0x80,0x49,0x02,0x79,0xFF,0x4A,0x00,0x4D,0xFC,0x49,0x44,0x79,0x24,0x4F,0xFF,0x49,0x44,0x49,0x24,0x7A,0x24,0x4B,0xFF,0x42,0x08,0x00,0x78,0x00,0x10},
{0xB1,0xE3,0x00,0x00,0x03,0x8C,0x48,0x70,0x78,0x88,0x4B,0x66,0x48,0x40,0x4F,0xFF,0x78,0x80,0x49,0x30,0x4A,0x24,0x4D,0xFE,0x79,0x24,0x49,0x24,0x41,0x2C,0x01,0x24,0x00,0x20},
{0xB1,0xE4,0x00,0x00,0x02,0x42,0x7F,0xFF,0x02,0x40,0x3F,0xFC,0x22,0x44,0x3F,0xFC,0x22,0x44,0x3F,0xFC,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10},
{0xB1,0xE5,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x00,0x00,0x3E,0x30,0x22,0x22,0x3E,0xFF,0x22,0x22,0x3E,0x22,0x23,0x42,0x2C,0x42,0x70,0x9C,0x21,0x08},
{0xB1,0xE6,0x00,0x00,0x06,0x42,0x24,0x7F,0x3F,0x42,0x20,0x7E,0x20,0x42,0x20,0x7E,0x20,0x82,0x1E,0x8E,0x01,0x04,0x00,0xFC,0x3F,0x80,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB1,0xE7,0x00,0x00,0x20,0x08,0x17,0xFC,0x40,0x88,0x24,0x8C,0x0A,0x8A,0x71,0x0A,0x21,0x78,0x22,0x10,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xB1,0xE8,0x00,0x00,0x0C,0xC6,0x08,0x28,0x09,0xFE,0x7E,0x12,0x08,0x92,0x18,0xFE,0x1C,0x90,0x2A,0x91,0x29,0xFF,0x49,0x31,0x08,0x51,0x08,0x57,0x08,0x92,0x09,0x10,0x08,0x10},
{0xB1,0xE9,0x00,0x00,0x0C,0x10,0x08,0xD4,0x08,0x92,0x7E,0x93,0x09,0x11,0x1A,0xFF,0x18,0x82,0x2C,0xFE,0x2A,0x82,0x4A,0x82,0x08,0xFE,0x08,0x82,0x08,0x82,0x08,0x8E,0x08,0x84},
{0xB1,0xEA,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x00,0x08,0x86,0x18,0x44,0x18,0x48,0x2D,0xFF,0x2A,0x10,0x4A,0x14,0x08,0xFE,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xB1,0xEB,0x00,0x00,0x0C,0x18,0x08,0x10,0x7E,0xFE,0x18,0x30,0x2C,0x58,0x2A,0x54,0x48,0x93,0x00,0x00,0x08,0x20,0x0F,0xF0,0x08,0x20,0x0A,0x22,0x09,0xA2,0x10,0xA3,0x60,0x1E},
{0xB1,0xEC,0x00,0x00,0x0C,0x84,0x08,0xFE,0x08,0x84,0x7E,0xFC,0x08,0x84,0x18,0xFC,0x18,0x84,0x2C,0x00,0x2A,0xFE,0x4A,0x10,0x08,0x12,0x09,0xFF,0x08,0x10,0x08,0x10,0x08,0x10},
{0xB1,0xED,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x04,0x7E,0x68,0x08,0x91,0x18,0xFF,0x18,0x91,0x2C,0xFF,0x2A,0x91,0x4A,0xFF,0x08,0x91,0x08,0x91,0x08,0x91,0x08,0x97,0x08,0x82},
{0xB1,0xEE,0x00,0x00,0x0C,0x81,0x08,0xFF,0x08,0x81,0x7E,0x8D,0x08,0x89,0x18,0xFF,0x18,0x89,0x2C,0x99,0x2A,0xAD,0x4A,0xAB,0x08,0xC9,0x08,0x89,0x08,0x81,0x08,0xFF,0x08,0x81},
{0xB1,0xEF,0x00,0x00,0x0C,0x04,0x09,0xFE,0x08,0x20,0x7E,0x24,0x09,0xFE,0x18,0x44,0x18,0x44,0x2D,0xFF,0x2A,0x00,0x4A,0x84,0x08,0xFE,0x08,0x84,0x08,0x84,0x08,0xFC,0x08,0x84},
{0xB1,0xF0,0x00,0x00,0x0C,0x02,0x09,0xFF,0x08,0x10,0x7E,0x92,0x08,0xFF,0x18,0x92,0x18,0xFE,0x2C,0x92,0x2A,0xFE,0x4A,0x92,0x08,0x10,0x08,0xD0,0x0B,0x20,0x08,0x58,0x09,0x87},
{0xB1,0xF1,0x00,0x00,0x18,0x10,0x10,0x14,0x10,0x12,0x7D,0xFF,0x10,0x08,0x30,0xA8,0x38,0xAB,0x55,0xFA,0x54,0xAA,0x50,0xA4,0x11,0x24,0x11,0x25,0x12,0x05,0x10,0x0B,0x10,0x11},
{0xB1,0xF2,0x00,0x00,0x18,0x00,0x13,0xC7,0x10,0x5C,0x7C,0x84,0x10,0x84,0x31,0x04,0x39,0xDF,0x55,0x44,0x54,0x44,0x50,0x84,0x13,0x84,0x12,0x9F,0x14,0xC0,0x11,0x30,0x12,0x0F},
{0xB1,0xF3,0x00,0x00,0x00,0x82,0x7F,0xFF,0x04,0x08,0x3F,0xF6,0x00,0x02,0x08,0x88,0x7F,0xFF,0x08,0x88,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB1,0xF4,0x00,0x00,0x0C,0x30,0x08,0x24,0x08,0x42,0x7E,0xFD,0x08,0x28,0x18,0x49,0x19,0x87,0x2C,0x40,0x2A,0x7E,0x4A,0x42,0x08,0xC4,0x09,0x28,0x08,0x10,0x08,0x6C,0x09,0x83},
{0xB1,0xF5,0x00,0x00,0x18,0x89,0x10,0xEF,0x13,0x89,0x7C,0x89,0x10,0x89,0x33,0xEA,0x38,0x8A,0x54,0xA9,0x54,0xC9,0x53,0x89,0x12,0x8F,0x10,0x8A,0x11,0x08,0x11,0x08,0x12,0x08},
{0xB1,0xF6,0x00,0x00,0x18,0xC0,0x10,0x82,0x10,0xFF,0x7D,0x00,0x12,0xFE,0x30,0xA2,0x30,0x92,0x5B,0xFF,0x54,0xA2,0x54,0x92,0x11,0x12,0x11,0xFF,0x11,0x04,0x10,0x3C,0x10,0x08},
{0xB1,0xF7,0x00,0x00,0x19,0x0E,0x11,0xF0,0x11,0x00,0x7D,0x02,0x11,0xFF,0x31,0x00,0x31,0x42,0x59,0x7F,0x55,0x52,0x55,0x52,0x11,0x7E,0x11,0x40,0x12,0x41,0x12,0x41,0x14,0x3F},
{0xB1,0xF8,0x00,0x00,0x0C,0x60,0x08,0x42,0x08,0x7F,0x10,0x84,0x15,0x48,0x34,0x30,0x54,0x4C,0x15,0x83,0x14,0x10,0x15,0xFF,0x14,0x30,0x14,0x58,0x10,0x54,0x11,0x93,0x10,0x10},
{0xB1,0xF9,0x00,0x00,0x07,0x03,0x3C,0x32,0x04,0x22,0x7F,0xA2,0x0C,0x22,0x16,0x22,0x65,0x0E,0x04,0xC4,0x00,0x80,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xB1,0xFA,0x00,0x00,0x02,0x00,0x1F,0xE0,0x10,0x20,0x1F,0xE0,0x10,0x20,0x1F,0xFE,0x10,0x00,0x1F,0xFC,0x00,0x04,0x00,0x98,0x7F,0xFF,0x01,0x80,0x06,0xF0,0x78,0x8F,0x00,0x80},
{0xB1,0xFB,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x02,0x12,0x04,0x30,0xFC,0x30,0x00,0x58,0x02,0x55,0xFF,0x54,0x48,0x10,0x48,0x10,0x49,0x10,0x89,0x10,0x89,0x11,0x07},
{0xB1,0xFC,0x00,0x00,0x0C,0x18,0x08,0x12,0x08,0x11,0x7E,0xFF,0x08,0x10,0x18,0x93,0x1C,0x52,0x2A,0x54,0x2A,0x38,0x48,0x54,0x09,0x93,0x09,0x11,0x08,0x10,0x08,0x70,0x08,0x20},
{0xB1,0xFD,0x00,0x00,0x1A,0x30,0x11,0x20,0x21,0x22,0x40,0x3F,0x1A,0x42,0x11,0x44,0x21,0x98,0x20,0x10,0x5F,0x10,0x11,0x10,0x11,0x28,0x1F,0x24,0x11,0x44,0x00,0x42,0x00,0x81},
{0xB1,0xFE,0x00,0x00,0x63,0x48,0x12,0x7C,0x0C,0x48,0x0A,0x48,0x13,0x49,0x61,0x47,0x0C,0x80,0x08,0x02,0x7F,0x7F,0x18,0x02,0x1C,0x24,0x2B,0x14,0x29,0x08,0x48,0x34,0x08,0xC3},
{0xB2,0x40,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x04,0x10,0x07,0xF0,0x20,0x02,0x3F,0xFF,0x20,0x02,0x41,0xF4,0x0F,0x00,0x01,0xF8,0x1F,0x00,0x01,0xFD,0x3F,0x01,0x00,0xFF},
{0xB2,0x41,0x00,0x00,0x0E,0x14,0x78,0x12,0x08,0x10,0x09,0xFE,0x0E,0x10,0x78,0x96,0x08,0x54,0x08,0x38,0x0E,0x54,0x79,0x96,0x09,0x12,0x08,0x70,0x08,0x21,0x08,0x01,0x07,0xFF},
{0xB2,0x42,0x00,0x00,0x10,0x00,0x1F,0xFC,0x20,0x00,0x4F,0xF0,0x00,0x00,0x7F,0xF8,0x00,0x08,0x3F,0xE8,0x12,0x48,0x24,0x88,0x12,0x49,0x3F,0xE5,0x02,0x05,0x02,0x03,0x7F,0xF1},
{0xB2,0x43,0x00,0x00,0x20,0x04,0x17,0x8E,0x10,0xB8,0x41,0x08,0x21,0x08,0x2A,0x2A,0x0B,0xAF,0x10,0xA8,0x10,0xA8,0x61,0x28,0x2D,0x28,0x2A,0x1F,0x63,0x00,0x64,0xC0,0x28,0x3F},
{0xB2,0x44,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x00,0x25,0xFC,0x29,0x04,0x09,0x04,0x11,0xFC,0x11,0x24,0x60,0x20,0x21,0xA8,0x21,0x24,0x62,0x26,0x64,0xE2,0x20,0x40},
{0xB2,0x45,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x00,0x25,0xFC,0x29,0x04,0x09,0xFC,0x10,0x00,0x13,0xFC,0x60,0x08,0x20,0x10,0x27,0xFF,0x60,0x10,0x60,0xF0,0x20,0x20},
{0xB2,0x46,0x00,0x00,0x20,0x30,0x11,0x22,0x11,0xFF,0x41,0x02,0x2A,0x04,0x28,0xFC,0x08,0x00,0x10,0x02,0x13,0xFF,0x60,0x20,0x21,0xA8,0x21,0x24,0x62,0x26,0x64,0xE2,0x20,0x40},
{0xB2,0x47,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x00,0x25,0xB0,0x29,0x24,0x09,0x3E,0x13,0x24,0x15,0x54,0x61,0x48,0x21,0xA8,0x21,0x10,0x61,0x28,0x61,0x24,0x21,0x43},
{0xB2,0x48,0x00,0x00,0x20,0x30,0x11,0x26,0x11,0x24,0x42,0x28,0x20,0x50,0x28,0x8E,0x0B,0x02,0x10,0x30,0x11,0x26,0x61,0x24,0x26,0x28,0x20,0x50,0x60,0x48,0x61,0x84,0x26,0x03},
{0xB2,0x49,0x00,0x00,0x20,0x30,0x11,0xA4,0x11,0x24,0x42,0x22,0x2A,0x21,0x2F,0xFF,0x0A,0x02,0x12,0xFA,0x12,0x8A,0x12,0x8A,0x62,0xFA,0x22,0x8A,0x62,0x02,0x62,0x0E,0x22,0x04},
{0xB2,0x4A,0x00,0x00,0x21,0x88,0x11,0x0C,0x11,0x14,0x47,0xD2,0x22,0x12,0x2A,0x21,0x0B,0xE9,0x12,0x44,0x12,0x44,0x62,0x40,0x22,0x40,0x24,0x48,0x64,0x44,0x65,0xC4,0x28,0x80},
{0xB2,0x4B,0x00,0x00,0x20,0x7C,0x13,0xC0,0x10,0x40,0x40,0x82,0x27,0xFF,0x29,0x08,0x09,0x04,0x12,0x64,0x12,0x42,0x64,0x41,0x2B,0x54,0x22,0x4A,0x64,0x4A,0x61,0xC0,0x20,0x80},
{0xB2,0x4C,0x00,0x00,0x20,0xD0,0x10,0x88,0x13,0xFE,0x40,0x40,0x24,0x2C,0x29,0xD1,0x08,0x0D,0x10,0xD3,0x10,0x88,0x60,0x9F,0x27,0xE0,0x20,0x2C,0x60,0x11,0x60,0x6D,0x23,0x83},
{0xB2,0x4D,0x00,0x00,0x20,0x20,0x13,0xFE,0x10,0x20,0x41,0xFC,0x28,0x20,0x2F,0xFF,0x08,0x00,0x11,0xFC,0x11,0x24,0x61,0x24,0x21,0xFC,0x21,0x04,0x61,0x04,0x61,0x1C,0x21,0x08},
{0xB2,0x4E,0x00,0x00,0x21,0x8C,0x11,0x08,0x17,0xFE,0x41,0x08,0x29,0x08,0x29,0xF8,0x09,0x08,0x11,0xF8,0x11,0x08,0x61,0x0A,0x2F,0xFF,0x20,0x00,0x61,0x98,0x61,0x06,0x26,0x02},
{0xB2,0x4F,0x00,0x00,0x21,0x8C,0x11,0x08,0x11,0x0A,0x47,0xDF,0x21,0x08,0x2B,0x18,0x0B,0x98,0x15,0x6C,0x15,0x2A,0x69,0x4A,0x21,0x09,0x21,0x08,0x61,0x08,0x61,0x08,0x21,0x08},
{0xB2,0x50,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x00,0x42,0x14,0x26,0xFE,0x2A,0x10,0x0A,0x12,0x13,0xFF,0x12,0x00,0x62,0x14,0x22,0xFE,0x24,0x10,0x64,0x12,0x65,0xFF,0x28,0x00},
{0xB2,0x51,0x00,0x00,0x21,0x80,0x11,0x01,0x11,0x5F,0x45,0xE9,0x25,0x09,0x29,0x49,0x0F,0xEA,0x09,0x0A,0x11,0x04,0x15,0x44,0x65,0x2A,0x29,0x2A,0x69,0x09,0x63,0x11,0x21,0x21},
{0xB2,0x52,0x00,0x00,0x24,0x11,0x17,0xF5,0x14,0x15,0x47,0xF5,0x24,0x55,0x2C,0x45,0x0D,0x55,0x15,0xF5,0x15,0x55,0x65,0x55,0x25,0x75,0x25,0x51,0x68,0x41,0x68,0x47,0x20,0x42},
{0xB2,0x53,0x00,0x00,0x43,0x00,0x22,0x0C,0x22,0x24,0x0F,0xA4,0x42,0x24,0x2A,0x22,0x16,0x42,0x17,0x59,0x2A,0x91,0x6A,0x90,0x22,0x24,0x62,0x22,0x62,0x7D,0x22,0x21,0x02,0x00},
{0xB2,0x54,0x00,0x00,0x20,0x60,0x10,0x42,0x17,0xFF,0x40,0x90,0x21,0x08,0x29,0x64,0x0A,0x43,0x17,0xFC,0x12,0x44,0x63,0xFC,0x22,0x44,0x23,0xFD,0x60,0x41,0x60,0x41,0x20,0x3F},
{0xB2,0x55,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x02,0x42,0x32,0x26,0x22,0x2A,0xFA,0x0A,0x22,0x12,0x22,0x12,0xFA,0x62,0x8A,0x22,0x8A,0x22,0xFA,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xB2,0x56,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x43,0xFC,0x26,0x04,0x2B,0xFC,0x0A,0x04,0x10,0x00,0x13,0x18,0x62,0x10,0x23,0xD3,0x22,0x1C,0x62,0xD1,0x6F,0x11,0x24,0x0F},
{0xB2,0x57,0x00,0x00,0x23,0x6D,0x12,0x49,0x12,0x49,0x42,0x49,0x27,0xCF,0x2A,0x49,0x0A,0x01,0x13,0xFF,0x12,0x01,0x62,0x49,0x23,0xCF,0x22,0x49,0x62,0x49,0x64,0x49,0x24,0x49},
{0xB2,0x58,0x00,0x00,0x21,0x93,0x11,0x1C,0x11,0x10,0x47,0xD0,0x29,0x1F,0x29,0x12,0x0B,0x92,0x13,0x52,0x15,0x52,0x65,0x12,0x29,0x12,0x21,0x12,0x61,0x22,0x61,0x22,0x21,0x42},
{0xB2,0x59,0x00,0x00,0x20,0x22,0x17,0xFF,0x10,0x20,0x41,0xFC,0x24,0x24,0x2B,0xFF,0x08,0x24,0x11,0xFC,0x10,0x40,0x67,0xFF,0x20,0x84,0x23,0x18,0x60,0xE0,0x61,0x98,0x26,0x06},
{0xB2,0x5A,0x00,0x00,0x40,0x60,0x30,0x46,0x03,0xF4,0x40,0x48,0x30,0x52,0x07,0xFF,0x08,0x40,0x10,0xA0,0x11,0x14,0x63,0xFE,0x2D,0x04,0x21,0xFC,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xB2,0x5B,0x00,0x00,0x40,0x02,0x2F,0xFF,0x20,0x80,0x00,0x80,0x45,0xE0,0x29,0x20,0x28,0x2D,0x15,0xA9,0x14,0x71,0x65,0xAD,0x24,0x25,0x24,0xE1,0x64,0x41,0x67,0xFF,0x24,0x01},
{0xB2,0x5C,0x00,0x00,0x22,0x1E,0x13,0xE0,0x12,0x02,0x43,0xFF,0x26,0x02,0x2B,0xFE,0x0A,0x02,0x12,0x34,0x12,0x22,0x63,0xFF,0x22,0x20,0x24,0x50,0x64,0x48,0x64,0x84,0x2B,0x03},
{0xB2,0x5D,0x00,0x00,0x20,0x3E,0x13,0xC0,0x12,0x44,0x42,0x22,0x24,0x22,0x28,0x0C,0x08,0x3E,0x13,0xE0,0x10,0x20,0x60,0x22,0x27,0xFF,0x20,0x20,0x60,0x20,0x60,0x24,0x23,0xFE},
{0xB2,0x5E,0x00,0x00,0x21,0x80,0x11,0x02,0x13,0xFF,0x42,0x02,0x25,0x02,0x29,0xF2,0x0A,0x42,0x13,0xFA,0x10,0x42,0x62,0x52,0x23,0xF2,0x22,0x14,0x60,0x04,0x60,0x3C,0x20,0x08},
{0xB2,0x5F,0x00,0x00,0x20,0x60,0x10,0x50,0x10,0x90,0x44,0x88,0x29,0x04,0x2A,0xFA,0x14,0x01,0x13,0xFE,0x12,0x52,0x62,0x52,0x23,0xFE,0x22,0x52,0x62,0x52,0x62,0x56,0x22,0x02},
{0xB2,0x60,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x02,0x44,0xCC,0x20,0x89,0x28,0x89,0x09,0x07,0x12,0x30,0x10,0x22,0x67,0xFF,0x20,0x60,0x20,0xB0,0x61,0x2C,0x66,0x23,0x20,0x20},
{0xB2,0x61,0x00,0x00,0x21,0x98,0x11,0x10,0x12,0x22,0x43,0xFF,0x26,0x20,0x2A,0x24,0x0B,0xFE,0x12,0x20,0x12,0x24,0x63,0xFE,0x22,0x20,0x22,0x20,0x62,0x22,0x63,0xFF,0x22,0x00},
{0xB2,0x62,0x00,0x00,0x20,0x1E,0x17,0xE0,0x14,0x44,0x44,0x22,0x28,0x22,0x23,0xFC,0x08,0x44,0x17,0xFF,0x10,0x44,0x13,0xFC,0x60,0x44,0x20,0x40,0x62,0x40,0x61,0xC0,0x20,0x80},
{0xB2,0x63,0x00,0x00,0x23,0x9C,0x10,0x60,0x10,0x98,0x43,0x64,0x28,0x40,0x2F,0xFF,0x08,0x80,0x11,0xFC,0x13,0x04,0x65,0xFC,0x21,0x04,0x21,0xFC,0x61,0x04,0x61,0x1C,0x21,0x08},
{0xB2,0x64,0x00,0x00,0x10,0xDB,0x08,0x92,0x08,0x92,0x41,0x24,0x24,0x92,0x24,0x49,0x08,0x49,0x08,0x00,0x09,0xFF,0x71,0x11,0x11,0xFF,0x11,0x11,0x31,0x11,0x31,0xFF,0x11,0x01},
{0xB2,0x65,0x00,0x00,0x20,0x30,0x10,0x24,0x13,0xFE,0x40,0x00,0x25,0x0C,0x28,0x88,0x08,0x92,0x17,0xFF,0x10,0x00,0x61,0xFC,0x21,0x04,0x21,0x04,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xB2,0x66,0x00,0x00,0x20,0x30,0x10,0x24,0x13,0xFE,0x40,0x00,0x24,0xCC,0x28,0x88,0x09,0x54,0x11,0x52,0x12,0x22,0x60,0x20,0x27,0xFF,0x20,0x20,0x60,0x20,0x60,0x20,0x20,0x20},
{0xB2,0x67,0x00,0x00,0x20,0x04,0x17,0xFE,0x10,0x80,0x41,0x80,0x26,0x46,0x08,0x44,0x0A,0x68,0x11,0xB0,0x16,0xA8,0x60,0x68,0x21,0xA4,0x26,0x23,0x60,0x20,0x61,0xC0,0x20,0x80},
{0xB2,0x68,0x00,0x00,0x10,0x60,0x08,0x50,0x48,0x90,0x20,0x88,0x21,0x04,0x0A,0xFA,0x0C,0x21,0x10,0x24,0x13,0xFE,0x60,0x20,0x22,0x26,0x21,0x24,0x61,0x28,0x60,0xAA,0x27,0xFF},
{0xB2,0x69,0x00,0x00,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x00,0x3F,0xFC,0x00,0x10,0x00,0x60,0x00,0x40,0x03,0xC0,0x24,0xA2,0x42,0x11,0x42,0x11},
{0xB2,0x6A,0x00,0x00,0x00,0x04,0x3F,0xFE,0x01,0x00,0x09,0xF8,0x09,0x02,0x7F,0xFF,0x04,0x00,0x07,0xF8,0x08,0x00,0x0F,0xFE,0x01,0x22,0x14,0x92,0x22,0x92,0x22,0x04,0x00,0x18},
{0xB2,0x6B,0x00,0x00,0x18,0x84,0x10,0xFE,0x10,0x84,0x16,0xFC,0x54,0x84,0x58,0xFC,0x50,0x84,0x50,0x00,0x18,0xFE,0x14,0x10,0x24,0x12,0x25,0xFF,0x20,0x10,0x40,0x10,0x00,0x10},
{0xB2,0x6C,0x00,0x00,0x18,0x20,0x10,0x3E,0x10,0x42,0x15,0xA4,0x54,0x18,0x58,0x64,0x51,0x83,0x50,0x10,0x18,0xFE,0x14,0x10,0x24,0xFE,0x24,0x10,0x21,0xFF,0x40,0x10,0x00,0x10},
{0xB2,0x6D,0x00,0x00,0x19,0xCE,0x10,0x30,0x10,0x48,0x15,0x86,0x54,0x40,0x5B,0xFF,0x50,0x80,0x50,0x90,0x19,0xFE,0x16,0x92,0x24,0x92,0x24,0x9E,0x20,0x94,0x40,0x10,0x00,0x10},
{0xB2,0x6E,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x26,0xA6,0x18,0x98,0x0C,0x8C,0x32,0xB2,0x00,0x80,0x26,0xA6,0x18,0x98,0x0D,0x4C,0x33,0x52,0x02,0x20,0x0C,0x18,0x70,0x07},
{0xB2,0x6F,0x00,0x00,0x00,0x84,0x3F,0xFE,0x01,0x00,0x06,0x60,0x21,0x42,0x3F,0xFF,0x41,0x22,0x4F,0xD4,0x04,0x10,0x10,0x80,0x1F,0xFC,0x20,0x80,0x7F,0xFE,0x00,0x80,0x00,0x80},
{0xB2,0x70,0x00,0x00,0x07,0x03,0x3C,0x32,0x04,0x22,0x7F,0xA2,0x0C,0x22,0x16,0x22,0x65,0x0E,0x04,0x04,0x08,0x80,0x0F,0xFC,0x30,0x80,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xB2,0x71,0x00,0x00,0x46,0x10,0x25,0xFF,0x18,0x10,0x10,0xFE,0x28,0x10,0x49,0xFF,0x0C,0x00,0x14,0xFE,0x14,0x92,0x24,0x92,0x44,0xFE,0x04,0x82,0x44,0x82,0x38,0x8E,0x10,0x84},
{0xB2,0x72,0x00,0x00,0x46,0x04,0x24,0xFE,0x18,0x08,0x10,0x12,0x29,0xFF,0x48,0x10,0x0C,0x10,0x14,0x70,0x14,0x20,0x25,0xFE,0x45,0x4A,0x05,0x4A,0x49,0x4A,0x3B,0xFF,0x10,0x00},
{0xB2,0x73,0x00,0x00,0x46,0x84,0x24,0xFE,0x18,0x84,0x10,0xFC,0x28,0x84,0x48,0xFC,0x0C,0x84,0x14,0x00,0x15,0x02,0x25,0xFF,0x45,0x02,0x05,0xFE,0x45,0x02,0x39,0xFE,0x11,0x02},
{0xB2,0x74,0x00,0x00,0x46,0x82,0x24,0xFF,0x18,0x92,0x10,0xFE,0x28,0x92,0x48,0xFE,0x0C,0x92,0x14,0x10,0x15,0xFF,0x24,0x30,0x44,0x58,0x04,0x54,0x44,0x93,0x39,0x10,0x10,0x10},
{0xB2,0x75,0x00,0x00,0x46,0x1E,0x25,0xE0,0x19,0x12,0x11,0x11,0x2A,0x01,0x49,0xFE,0x0C,0x22,0x17,0xFF,0x14,0x22,0x25,0xFE,0x44,0x22,0x04,0x20,0x44,0x20,0x38,0xE0,0x10,0x40},
{0xB2,0x76,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x80,0x23,0x26,0x18,0xC8,0x01,0x40,0x0B,0xA8,0x30,0x26,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB2,0x77,0x00,0x00,0x08,0x30,0x7D,0x24,0x11,0xFE,0x11,0x04,0x11,0xFC,0x7D,0x04,0x11,0x04,0x11,0xFC,0x11,0x24,0x1D,0x23,0x71,0x14,0x21,0x08,0x01,0x68,0x07,0x84,0x02,0x03},
{0xB2,0x78,0x00,0x00,0x10,0x49,0x7B,0xEF,0x20,0x49,0x23,0x49,0x22,0x49,0x7A,0x4A,0x23,0xEA,0x22,0x49,0x20,0xC9,0x39,0x49,0x61,0x4F,0x42,0x4A,0x04,0x48,0x01,0xC8,0x00,0x88},
{0xB2,0x79,0x00,0x00,0x08,0x34,0x7C,0x22,0x10,0x22,0x13,0xFF,0x10,0x20,0x7D,0x26,0x10,0xA4,0x10,0xB4,0x10,0x28,0x1C,0x68,0x70,0xA4,0x23,0x24,0x02,0x23,0x00,0xE0,0x00,0x40},
{0xB2,0x7A,0x00,0x00,0x01,0x04,0x09,0xFE,0x7D,0x24,0x11,0x24,0x11,0xFC,0x11,0x24,0x7D,0x24,0x11,0xFC,0x11,0x24,0x14,0x20,0x18,0x24,0x73,0xFE,0x40,0x20,0x00,0x22,0x07,0xFF},
{0xB2,0x7B,0x00,0x00,0x09,0x04,0x7D,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x7D,0x04,0x11,0xFC,0x11,0x04,0x11,0x04,0x1D,0xFC,0x71,0x54,0x20,0x51,0x00,0x91,0x01,0x11,0x06,0x0F},
{0xB2,0x7C,0x00,0x00,0x08,0x71,0x7D,0xC1,0x10,0x45,0x10,0x45,0x13,0xF5,0x7C,0x45,0x10,0xC5,0x10,0xE5,0x15,0x55,0x19,0x55,0x72,0x45,0x20,0x41,0x00,0x41,0x00,0x47,0x00,0x42},
{0xB2,0x7D,0x00,0x00,0x0C,0x04,0x08,0x5E,0x7F,0x74,0x12,0x54,0x21,0x54,0x5E,0xD4,0x00,0x54,0x7F,0x54,0x10,0x54,0x3E,0x54,0x22,0x54,0x02,0x92,0x02,0x9A,0x1C,0xB5,0x09,0x01},
{0xB2,0x7E,0x00,0x00,0x23,0x02,0x12,0x7F,0x14,0x20,0x7F,0xA0,0x12,0x24,0x12,0x3E,0x12,0x24,0x7F,0xA4,0x12,0x54,0x12,0x54,0x12,0x45,0x12,0x4D,0x22,0x75,0x22,0xC5,0x42,0x43},
{0xB2,0xA1,0x00,0x00,0x08,0x42,0x7E,0x7F,0x00,0x42,0x0E,0x98,0x71,0x10,0x20,0x6C,0x01,0x83,0x7F,0xFE,0x04,0x00,0x07,0xE0,0x04,0x20,0x0B,0x22,0x08,0xE2,0x7F,0x23,0x20,0x1E},
{0xB2,0xA2,0x00,0x00,0x0E,0x63,0x78,0x42,0x08,0x42,0x08,0xFF,0x7F,0x42,0x08,0x42,0x08,0x42,0x2A,0x42,0x3F,0x7E,0x22,0x42,0x22,0x42,0x22,0x42,0x22,0x42,0x3E,0x7E,0x22,0x42},
{0xB2,0xA3,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x02,0x20,0x01,0xC0,0x26,0x32,0x3F,0xFF,0x20,0x00,0x24,0x40,0x27,0xFC,0x28,0x40,0x37,0xFC,0x20,0x40,0x40,0x44,0x5F,0xFF},
{0xB2,0xA4,0x00,0x00,0x00,0x60,0x44,0x44,0x7E,0x7E,0x54,0x84,0x54,0x88,0x55,0x48,0x7C,0x30,0x54,0x4C,0x57,0x83,0x54,0xFC,0x7C,0x84,0x44,0x84,0x00,0x84,0x00,0xFC,0x00,0x84},
{0xB2,0xA5,0x00,0x00,0x00,0x30,0x44,0x20,0x7D,0xFC,0x54,0x20,0x54,0x22,0x57,0xFF,0x7C,0x00,0x54,0x30,0x54,0x24,0x55,0xFE,0x7C,0x20,0x44,0x20,0x00,0x22,0x07,0xFF,0x00,0x00},
{0xB2,0xA6,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x04,0x90,0x7F,0xFF,0x04,0x90,0x04,0x90,0x7F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB2,0xA7,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x04,0x04,0x10,0x3F,0xFE,0x04,0x10,0x04,0x12,0x7F,0xFF,0x04,0x20,0x08,0x1C,0x30,0x04},
{0xB2,0xA8,0x00,0x00,0x04,0x18,0x7E,0x12,0x05,0xFF,0x08,0x20,0x08,0x42,0x09,0xFD,0x28,0x81,0x2E,0x00,0x28,0xD6,0x28,0x94,0x2A,0x94,0x2C,0x95,0x79,0x15,0x21,0x15,0x02,0x13},
{0xB2,0xA9,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x20,0x29,0xFC,0x28,0x20,0x08,0x20,0x0B,0xFF,0x18,0x04,0x68,0x04,0x4B,0xFF,0x09,0x04,0x10,0xC4,0x10,0x5C,0x20,0x08},
{0xB2,0xAA,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x29,0xFC,0x29,0x04,0x09,0xFC,0x09,0x04,0x19,0xFC,0x69,0x20,0x49,0x26,0x09,0x14,0x11,0x68,0x17,0x84,0x22,0x03},
{0xB2,0xAB,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x29,0x98,0x29,0x10,0x09,0x10,0x09,0x12,0x19,0xDF,0x69,0x10,0x49,0x10,0x09,0x11,0x11,0xD1,0x17,0x11,0x22,0x0F},
{0xB2,0xAC,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x29,0xE0,0x28,0x30,0x08,0xCC,0x0B,0x03,0x1D,0xFC,0x68,0x20,0x48,0x28,0x09,0xFC,0x10,0x20,0x10,0x24,0x23,0xFE},
{0xB2,0xAD,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x20,0x2B,0xFE,0x28,0x20,0x0B,0xFE,0x08,0x22,0x19,0xFE,0x69,0x20,0x4B,0xFF,0x0A,0x21,0x10,0x56,0x11,0x88,0x26,0x07},
{0xB2,0xAE,0x00,0x00,0x18,0x30,0x20,0x22,0x7D,0xFF,0x44,0x00,0x44,0xC4,0x44,0x83,0x7D,0x01,0x46,0xCC,0x44,0xA8,0x45,0x28,0x7C,0x10,0x44,0x10,0x40,0x28,0x00,0xC4,0x03,0x03},
{0xB2,0xAF,0x00,0x00,0x06,0x00,0x04,0x04,0x7F,0xFE,0x08,0x00,0x08,0xC0,0x12,0x8C,0x24,0xD0,0x41,0x20,0x06,0x18,0x38,0x07,0x0F,0xFC,0x09,0x24,0x09,0x24,0x09,0x24,0x3F,0xFF},
{0xB2,0xB0,0x00,0x00,0x01,0x80,0x02,0x60,0x04,0x10,0x0B,0xE8,0x10,0x04,0x6F,0xFB,0x08,0x08,0x08,0x08,0x0F,0xF8,0x00,0x00,0x1F,0xFC,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xB2,0xB1,0x00,0x00,0x00,0x68,0x10,0x44,0x1F,0xFE,0x10,0x40,0x11,0x26,0x1F,0xA4,0x11,0x19,0x27,0x11,0x22,0x2D,0x40,0x43,0x1F,0xFC,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xB2,0xB2,0x00,0x00,0x0D,0x90,0x09,0x0C,0x17,0xF6,0x62,0x42,0x04,0x20,0x7F,0xFF,0x08,0x08,0x1F,0xF4,0x68,0x13,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10},
{0xB2,0xB3,0x00,0x00,0x20,0x04,0x3F,0xFE,0x22,0x44,0x22,0x44,0x3F,0xFC,0x20,0x04,0x00,0xF0,0x1F,0x80,0x00,0x86,0x0C,0x58,0x08,0x60,0x14,0x58,0x62,0x47,0x00,0x82,0x03,0x00},
{0xB2,0xB4,0x00,0x00,0x49,0x04,0x7D,0xFE,0x49,0x04,0x49,0x04,0x79,0xFC,0x49,0x04,0x49,0x04,0x79,0xFC,0x49,0x24,0x49,0x23,0x79,0x12,0x49,0x14,0x41,0x68,0x07,0x84,0x02,0x03},
{0xB2,0xB5,0x00,0x00,0x49,0x02,0x7D,0xFF,0x49,0x00,0x49,0x04,0x79,0x7E,0x49,0x10,0x49,0x10,0x79,0x7C,0x49,0x10,0x49,0x14,0x49,0x7E,0x79,0x00,0x49,0x02,0x41,0xFF,0x01,0x00},
{0xB2,0xB6,0x00,0x00,0x48,0x60,0x7C,0x48,0x48,0x84,0x4B,0xFA,0x79,0x02,0x48,0x30,0x49,0x24,0x79,0xFE,0x4A,0x20,0x4C,0x22,0x4B,0xFF,0x78,0x20,0x48,0x20,0x40,0x20,0x00,0x20},
{0xB2,0xB7,0x00,0x00,0x48,0x50,0x7C,0x50,0x48,0x50,0x4B,0x53,0x79,0x52,0x48,0xD4,0x48,0x50,0x78,0xD8,0x49,0x54,0x49,0x56,0x4A,0x52,0x78,0x90,0x48,0x91,0x41,0x11,0x02,0x0F},
{0xB2,0xB8,0x00,0x00,0x04,0x30,0x7E,0x22,0x11,0xFF,0x10,0x20,0x10,0x48,0x20,0x44,0x3D,0xFA,0x64,0x82,0x24,0x00,0x24,0xAC,0x24,0xA8,0x3C,0xA9,0x25,0x29,0x21,0x29,0x02,0x27},
{0xB2,0xB9,0x00,0x00,0x04,0x18,0x7E,0xD0,0x10,0x94,0x10,0xFE,0x10,0x90,0x21,0x10,0x3C,0x12,0x65,0xFF,0x24,0x30,0x24,0x58,0x24,0x54,0x3C,0x94,0x24,0x92,0x21,0x11,0x00,0x10},
{0xB2,0xBA,0x00,0x00,0x08,0x21,0x7D,0xF1,0x10,0xA5,0x10,0xA5,0x10,0xA5,0x20,0xA5,0x3D,0xF5,0x64,0xA5,0x24,0xA5,0x24,0xA5,0x24,0xA1,0x3C,0xA1,0x25,0x21,0x21,0x27,0x02,0x22},
{0xB2,0xBB,0x00,0x00,0x04,0x46,0x3E,0x24,0x00,0x28,0x02,0xFE,0x7F,0x10,0x08,0x14,0x08,0xFE,0x2A,0x10,0x2A,0x10,0x2A,0x12,0x2A,0xFF,0x4A,0x10,0x48,0x10,0x08,0x10,0x08,0x10},
{0xB2,0xBC,0x00,0x00,0x00,0x04,0x7F,0xFE,0x02,0x40,0x3F,0xFC,0x22,0x44,0x22,0x44,0x3F,0xFC,0x00,0x00,0x1F,0xF8,0x00,0x02,0x7F,0xFF,0x00,0x80,0x18,0x98,0x63,0x87,0x01,0x00},
{0xB2,0xBD,0x00,0x00,0x09,0x04,0x0F,0x5E,0x09,0x44,0x15,0x28,0x6A,0x10,0x04,0x0C,0x1B,0xF3,0x60,0x00,0x00,0x02,0x3F,0xFF,0x00,0x80,0x0C,0x90,0x10,0x8C,0x63,0x83,0x01,0x00},
{0xB2,0xBE,0x00,0x00,0x0E,0x30,0x78,0x24,0x08,0x3E,0x08,0x44,0x7E,0xA8,0x08,0x10,0x18,0x60,0x1D,0x92,0x2A,0x1F,0x2A,0x22,0x48,0xD4,0x08,0x08,0x08,0x10,0x08,0x60,0x09,0x80},
{0xB2,0xBF,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x22,0x22,0x4C,0x25,0x30,0x1F,0x1F,0xF8,0x02,0x00,0x04,0x10,0x1F,0xEC,0x08,0x84,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB2,0xC0,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x22,0x22,0x4C,0x25,0x30,0x1F,0x02,0x40,0x22,0x4C,0x1A,0x50,0x02,0x60,0x0E,0x50,0x72,0x4D,0x44,0x45,0x08,0x41,0x70,0x3F},
{0xB2,0xC1,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x00,0x08,0x18,0x04,0x10,0x06,0x20,0x02,0x22,0x7F,0xFF,0x00,0x00},
{0xB2,0xC2,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x02,0xC0,0x04,0xB0,0x18,0x8C,0x63,0xE3,0x00,0x80,0x00,0x80},
{0xB2,0xC3,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0xC0,0x10,0x84,0x1F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xB2,0xC4,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x24,0x44,0x42,0x82,0x1F,0xFC,0x00,0x84,0x1F,0xFC,0x10,0x80,0x3F,0xFE,0x21,0x82,0x02,0x82,0x0C,0xBC,0x70,0x88,0x00,0x80},
{0xB2,0xC5,0x00,0x00,0x18,0x30,0x12,0x22,0x1F,0x3F,0x24,0x48,0x42,0x84,0x0C,0x08,0x08,0x0A,0x1B,0xFF,0x28,0x08,0x49,0x08,0x08,0xC8,0x08,0x48,0x08,0x08,0x08,0x38,0x08,0x10},
{0xB2,0xC6,0x00,0x00,0x18,0x30,0x10,0x22,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0x00,0x18,0xC0,0x10,0x84,0x1F,0xFE,0x20,0x80,0x40,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB2,0xC7,0x00,0x00,0x18,0x30,0x10,0x22,0x1F,0x3F,0x28,0x28,0x44,0x44,0x05,0x84,0x01,0x10,0x06,0x08,0x7F,0xF6,0x20,0x02,0x1F,0xF8,0x10,0x08,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xB2,0xC8,0x00,0x00,0x18,0x30,0x10,0x22,0x1F,0x3F,0x24,0x28,0x43,0x46,0x0C,0x00,0x08,0x04,0x0F,0xFE,0x12,0x00,0x63,0xFC,0x02,0x00,0x03,0xFC,0x02,0x00,0x02,0x00,0x02,0x00},
{0xB2,0xC9,0x00,0x00,0x0C,0x18,0x08,0x10,0x4A,0x14,0x2A,0xFE,0x2C,0x00,0x08,0x06,0x7F,0x44,0x18,0x44,0x18,0x24,0x2C,0x24,0x2A,0x28,0x4A,0x08,0x08,0x0A,0x08,0xFF,0x08,0x00},
{0xB2,0xCA,0x00,0x00,0x0C,0x84,0x08,0xFE,0x4A,0x84,0x2A,0x84,0x2C,0x84,0x08,0xFC,0x7E,0x84,0x18,0x84,0x18,0x84,0x2C,0xFC,0x2A,0x84,0x4A,0x84,0x08,0x84,0x0B,0xFF,0x08,0x00},
{0xB2,0xCB,0x00,0x00,0x0C,0x18,0x08,0x10,0x4A,0xA2,0x2A,0xFF,0x2C,0x82,0x08,0x82,0x7E,0x82,0x18,0x82,0x18,0xFE,0x2C,0x82,0x2A,0x82,0x4A,0x82,0x08,0x82,0x08,0xFE,0x08,0x82},
{0xB2,0xCC,0x00,0x00,0x18,0x10,0x10,0xD4,0x20,0x92,0x6D,0x93,0x19,0x11,0x12,0x14,0x28,0xFE,0x74,0x10,0x50,0x12,0x19,0xFF,0x54,0x10,0x54,0x10,0x50,0x10,0x10,0x10,0x10,0x10},
{0xB2,0xCD,0x00,0x00,0x0C,0x18,0x08,0x12,0x10,0xFF,0x66,0x10,0x14,0x10,0x08,0x26,0x08,0x64,0x12,0x18,0x7D,0x08,0x09,0x10,0x2C,0x14,0x2A,0x22,0x4A,0xFD,0x48,0x41,0x08,0x00},
{0xB2,0xCE,0x00,0x00,0x18,0x18,0x10,0x12,0x21,0xFF,0x6C,0x20,0x18,0x24,0x10,0x42,0x2D,0xFD,0x74,0xA9,0x50,0x28,0x18,0x28,0x54,0x28,0x54,0x49,0x50,0x49,0x10,0x89,0x11,0x07},
{0xB2,0xCF,0x00,0x00,0x04,0x30,0x7F,0xA0,0x0C,0x22,0x16,0x22,0x65,0xA3,0x04,0x1E,0x00,0xC0,0x07,0x00,0x01,0x60,0x00,0x88,0x3F,0xF6,0x10,0x82,0x0C,0x90,0x08,0x8C,0x10,0x84},
{0xB2,0xD0,0x00,0x00,0x18,0x02,0x11,0xFF,0x20,0x42,0x6C,0x42,0x18,0x42,0x10,0x8E,0x2C,0x84,0x75,0x00,0x50,0x82,0x18,0xFF,0x54,0x82,0x54,0x82,0x50,0x82,0x10,0xFE,0x10,0x82},
{0xB2,0xD1,0x00,0x00,0x18,0x28,0x10,0x28,0x21,0xFE,0x6C,0x2A,0x18,0xAA,0x10,0xFE,0x2C,0xA8,0x74,0xA9,0x51,0xFF,0x19,0x29,0x54,0x29,0x54,0x2F,0x50,0x4A,0x10,0x48,0x10,0x88},
{0xB2,0xD2,0x00,0x00,0x18,0x18,0x10,0x10,0x20,0xD3,0x6C,0x92,0x18,0x92,0x10,0x92,0x2C,0xFE,0x74,0x92,0x50,0x10,0x19,0x93,0x55,0x12,0x55,0x12,0x51,0x12,0x11,0xFE,0x11,0x02},
{0xB2,0xD3,0x00,0x00,0x0C,0x00,0x08,0x82,0x10,0xFF,0x66,0x92,0x14,0x92,0x08,0x92,0x08,0x92,0x14,0xFE,0x7A,0x92,0x08,0x92,0x2C,0x92,0x2A,0x92,0x4A,0x92,0x48,0xFE,0x08,0x82},
{0xB2,0xD4,0x00,0x00,0x0C,0x18,0x08,0x10,0x10,0x92,0x66,0xFF,0x14,0x92,0x08,0x92,0x14,0xFE,0x16,0x92,0x7A,0x92,0x08,0xFE,0x2C,0x92,0x2A,0x10,0x4A,0x10,0x48,0x10,0x08,0x10},
{0xB2,0xD5,0x00,0x00,0x0C,0x42,0x08,0x7F,0x10,0x42,0x66,0x42,0x14,0x42,0x08,0x7E,0x08,0x42,0x12,0x42,0x7D,0x42,0x08,0x7E,0x2A,0x42,0x29,0x42,0x49,0x42,0x48,0x42,0x09,0xFF},
{0xB2,0xD6,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0xC0,0x01,0x00,0x06,0x30,0x01,0x40,0x00,0x84,0x7F,0xFB,0x20,0x81,0x0C,0x98,0x08,0x86,0x30,0x82},
{0xB2,0xD7,0x00,0x00,0x0C,0x60,0x08,0x44,0x10,0x7E,0x66,0x84,0x15,0x48,0x08,0x30,0x08,0x28,0x12,0x44,0x7D,0xA3,0x08,0x18,0x2C,0x08,0x2A,0x02,0x4A,0x0C,0x48,0x70,0x08,0x20},
{0xB2,0xD8,0x00,0x00,0x18,0x00,0x11,0xB6,0x21,0x24,0x6D,0x24,0x1B,0xFF,0x11,0x24,0x2D,0x24,0x75,0x24,0x51,0x3C,0x19,0x24,0x55,0x00,0x55,0x02,0x51,0xFF,0x11,0x00,0x10,0x00},
{0xB2,0xD9,0x00,0x00,0x18,0x68,0x10,0x46,0x20,0x42,0x6C,0x40,0x19,0xFF,0x10,0x40,0x2C,0x46,0x74,0xA4,0x50,0xA8,0x18,0x98,0x54,0x90,0x55,0x28,0x51,0x28,0x12,0x44,0x10,0x83},
{0xB2,0xDA,0x00,0x00,0x30,0x18,0x20,0x10,0x3E,0x12,0x28,0xFF,0x48,0x30,0x7F,0x38,0x08,0x54,0x08,0x54,0x6A,0x92,0x4A,0x92,0x4B,0x11,0x7E,0x7C,0x42,0x10,0x00,0x10,0x00,0x10},
{0xB2,0xDB,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x20,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x08,0x00,0x0B,0xF8,0x10,0x88,0x17,0xFE,0x21,0x10,0x41,0x12,0x1F,0xFF},
{0xB2,0xDC,0x00,0x00,0x23,0x30,0x12,0x30,0x14,0x48,0x7E,0x48,0x08,0x84,0x09,0x7B,0x7E,0x00,0x08,0x02,0x0E,0xFF,0x78,0x22,0x48,0x22,0x10,0x2E,0x10,0x24,0x20,0x20,0x40,0x20},
{0xB2,0xDD,0x00,0x00,0x02,0x04,0x7F,0x7E,0x02,0x04,0x0E,0x1C,0x32,0x64,0x0E,0x1C,0x32,0x64,0x00,0x84,0x00,0x80,0x3F,0xFE,0x00,0x00,0x08,0x18,0x06,0x10,0x02,0x22,0x7F,0xFF},
{0xB2,0xDE,0x00,0x00,0x08,0x00,0x19,0xEF,0x14,0x21,0x24,0x63,0x22,0xA5,0x5C,0xA5,0x01,0x29,0x7E,0x23,0x12,0x65,0x12,0xA5,0x12,0xA9,0x1F,0x21,0x14,0x21,0x10,0xE7,0x10,0x42},
{0xB2,0xDF,0x00,0x00,0x02,0x04,0x7F,0x7E,0x02,0x04,0x0E,0x1C,0x32,0x64,0x0E,0x1C,0x32,0x64,0x01,0x84,0x02,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08},
{0xB2,0xE0,0x00,0x00,0x0C,0x84,0x08,0xFE,0x0E,0x84,0x78,0x84,0x08,0x84,0x7E,0xFC,0x08,0x84,0x7E,0x80,0x18,0x82,0x1C,0xFF,0x2A,0x82,0x2A,0x82,0x48,0x82,0x08,0xFE,0x08,0x82},
{0xB2,0xE1,0x00,0x00,0x05,0x60,0x7D,0x89,0x25,0x2F,0x25,0x29,0x3D,0x29,0x25,0x29,0x25,0x29,0x3D,0x29,0x25,0x69,0x25,0xA9,0x3D,0x2F,0x64,0x2A,0x24,0x48,0x04,0x48,0x04,0x88},
{0xB2,0xE2,0x00,0x00,0x04,0x30,0x7C,0x50,0x24,0x48,0x24,0x84,0x3D,0x04,0x26,0xFB,0x24,0x00,0x3C,0x04,0x27,0xFE,0x24,0x44,0x3C,0x44,0x64,0x5C,0x24,0x48,0x04,0x40,0x04,0x40},
{0xB2,0xE3,0x00,0x00,0x24,0x34,0x3C,0x22,0x25,0xFF,0x24,0x20,0x3D,0x22,0x25,0xFF,0x25,0x22,0x25,0xFE,0x3D,0x22,0x25,0xFE,0x25,0x22,0x25,0x22,0x45,0x22,0x5D,0x2E,0x49,0x24},
{0xB2,0xE4,0x00,0x00,0x24,0x18,0x3C,0x10,0x25,0xFF,0x24,0x10,0x3D,0xFF,0x25,0x02,0x26,0x7C,0x24,0x08,0x3C,0x12,0x25,0xFF,0x24,0x10,0x24,0x10,0x44,0x10,0x5C,0x70,0x48,0x20},
{0xB2,0xE5,0x00,0x00,0x3F,0xFE,0x20,0x00,0x27,0xF8,0x20,0x00,0x3F,0xFE,0x24,0x40,0x27,0xB6,0x5C,0x08,0x4F,0xFF,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x38},
{0xB2,0xE6,0x00,0x00,0x24,0x18,0x3E,0xC8,0x24,0x84,0x25,0x04,0x3D,0xFE,0x26,0x85,0x24,0x84,0x24,0x84,0x3C,0xFC,0x24,0x50,0x24,0x52,0x24,0x52,0x44,0x92,0x5C,0x93,0x49,0x0E},
{0xB2,0xE7,0x00,0x00,0x0C,0x60,0x08,0x42,0x08,0x7F,0x10,0x84,0x15,0x48,0x34,0x30,0x54,0xCC,0x17,0x03,0x14,0xFC,0x14,0x84,0x14,0xFC,0x14,0x84,0x10,0xFC,0x10,0x84,0x10,0x8C},
{0xB2,0xE8,0x00,0x00,0x24,0x02,0x3D,0xFF,0x24,0x00,0x24,0x84,0x3C,0xFE,0x24,0x84,0x24,0x84,0x24,0x84,0x3C,0xFC,0x24,0x84,0x24,0x00,0x25,0x06,0x44,0xC4,0x5C,0x48,0x4B,0xFF},
{0xB2,0xE9,0x00,0x00,0x25,0x02,0x3D,0xFF,0x25,0x00,0x25,0x04,0x3D,0x7E,0x25,0x00,0x25,0x02,0x25,0xFF,0x3D,0x50,0x25,0x4B,0x25,0x4A,0x25,0x44,0x45,0x54,0x5E,0xE2,0x4A,0x41},
{0xB2,0xEA,0x00,0x00,0x00,0xC0,0x00,0x80,0x3F,0xFE,0x01,0x00,0x1F,0xFC,0x02,0x20,0x7F,0xFF,0x08,0x08,0x13,0x04,0x6C,0x7B,0x08,0x08,0x0F,0x78,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB2,0xEB,0x00,0x00,0x0C,0x18,0x10,0x10,0x3E,0x92,0x22,0xFF,0x32,0x82,0x2B,0x04,0x22,0x60,0x3F,0x40,0x6A,0x46,0x2A,0x58,0x2A,0x60,0x22,0x42,0x42,0x42,0x4E,0x43,0x44,0x3E},
{0xB2,0xEC,0x00,0x00,0x0C,0x18,0x10,0x10,0x3E,0x12,0x22,0xFF,0x32,0x10,0x2A,0x20,0x23,0x26,0x3E,0xC4,0x6A,0x28,0x2A,0x18,0x2A,0x10,0x22,0x12,0x42,0x22,0x4E,0xFD,0x44,0x41},
{0xB2,0xED,0x00,0x00,0x0C,0x0C,0x10,0x08,0x3E,0x52,0x22,0x7F,0x32,0x42,0x2A,0x42,0x23,0x42,0x3E,0x42,0x6A,0x7E,0x2A,0x42,0x2A,0x42,0x22,0x42,0x42,0x42,0x4E,0x7E,0x44,0x42},
{0xB2,0xEE,0x00,0x00,0x0C,0x00,0x10,0x18,0x3E,0x08,0x22,0x64,0x32,0x44,0x2A,0x44,0x22,0x82,0x3F,0x02,0x6A,0xFD,0x2A,0x84,0x2A,0x84,0x22,0x84,0x42,0x84,0x4E,0xFC,0x44,0x84},
{0xB2,0xEF,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x00,0x10,0x30,0x45,0x24,0x29,0x23,0x2A,0x21,0x12,0xEC,0x10,0x48,0x60,0x10,0x20,0x60,0x61,0x80,0x2E,0x00},
{0xB2,0xF0,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x00,0x00,0x3F,0xFC,0x04,0x40,0x04,0x42,0x08,0x42,0x10,0x43,0x60,0x3E},
{0xB2,0xF1,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x80,0x1F,0xFC,0x04,0x10,0x02,0x22,0x7F,0xFF,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB2,0xF2,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x80,0x3F,0xFE,0x00,0x80,0x3F,0xFE,0x20,0x02,0x4F,0xF4,0x00,0x20,0x00,0x42,0x7F,0xFF,0x00,0x80,0x07,0x80,0x01,0x00},
{0xB2,0xF3,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x82,0x7F,0xFF,0x00,0x80,0x0C,0x86,0x08,0x84,0x14,0x8A,0x62,0xB1,0x01,0x40,0x02,0x20,0x0C,0x18,0x70,0x07},
{0xB2,0xF4,0x00,0x00,0x06,0x32,0x7F,0xFF,0x04,0x20,0x7F,0xFE,0x0C,0x88,0x09,0x10,0x32,0x20,0x11,0x10,0x08,0x88,0x7F,0xFE,0x01,0x00,0x01,0x00,0x01,0x02,0x7F,0xFF,0x00,0x00},
{0xB2,0xF5,0x00,0x00,0x04,0x10,0x7F,0xFF,0x04,0x14,0x01,0x02,0x7F,0xFF,0x02,0x20,0x04,0x10,0x18,0x0C,0x63,0x33,0x02,0x20,0x3F,0xFE,0x04,0x20,0x04,0x20,0x08,0x20,0x10,0x20},
{0xB2,0xF6,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x00,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x00,0x00,0x00,0x82,0x7F,0xFF,0x01,0x40,0x0E,0x38,0x70,0x07},
{0xB2,0xF7,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x88,0x21,0x02,0x3F,0xFF,0x20,0x02,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xB2,0xF8,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x36,0x18,0x24,0x10,0x24,0x12,0x3D,0xFF,0x24,0x10,0x04,0x10,0x7C,0x10,0x24,0x10,0x24,0x14,0x44,0xFE,0x04,0x00},
{0xB2,0xF9,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x08,0x04,0x0F,0xFE,0x10,0x00,0x6F,0xF8,0x09,0x08,0x08,0x8A,0x7F,0xFF,0x09,0x08,0x10,0x8A,0x1F,0xFF,0x10,0x10,0x00,0xE0},
{0xB2,0xFA,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x03,0x00,0x3C,0x06,0x04,0x34,0x05,0x24,0x7F,0xA4,0x0C,0x24,0x16,0x24,0x15,0x24,0x24,0xA4,0x44,0x84,0x04,0x1C,0x04,0x08},
{0xB2,0xFB,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xF8,0x1F,0x80,0x00,0x84,0x7F,0xFE,0x06,0xA0,0x18,0x98,0x6F,0xE7,0x04,0x20,0x04,0x7C,0x08,0x04,0x08,0x78,0x30,0x10},
{0xB2,0xFC,0x00,0x00,0x03,0x30,0x02,0x22,0x7F,0xFF,0x02,0x20,0x18,0x02,0x17,0xFF,0x10,0x04,0x33,0xE4,0x52,0x24,0x12,0x24,0x13,0xE4,0x12,0x24,0x10,0x04,0x10,0x1C,0x10,0x08},
{0xB2,0xFD,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x20,0x00,0x16,0x30,0x08,0x20,0x14,0xA6,0x64,0xA4,0x0D,0x28,0x14,0x20,0x64,0x50,0x04,0x50,0x04,0x88,0x38,0x84,0x13,0x03},
{0xB2,0xFE,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xC0,0x03,0x30,0x0C,0x0C,0x77,0xF3,0x00,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0C,0x98,0x10,0x86,0x63,0x82,0x01,0x00},
{0xB3,0x40,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x28,0x00,0x84,0x7F,0xFF,0x00,0x80,0x3F,0xFE,0x20,0x82,0x3F,0xFE,0x20,0x82,0x3F,0xFE,0x20,0x82,0x20,0x8E,0x20,0x84},
{0xB3,0x41,0x00,0x00,0x06,0x30,0x04,0x24,0x7F,0xFE,0x04,0x20,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x04,0x82,0x04,0x82,0x08,0x83,0x70,0x7E},
{0xB3,0x42,0x00,0x00,0x01,0x00,0x01,0xF0,0x21,0x04,0x3F,0xFE,0x21,0x04,0x21,0xE8,0x2F,0x02,0x20,0xFE,0x24,0x00,0x27,0xB8,0x28,0xA8,0x35,0x2A,0x42,0x46,0x45,0x80,0x58,0x7F},
{0xB3,0x43,0x00,0x00,0x04,0x06,0x07,0x84,0x24,0x08,0x3F,0xB0,0x24,0x86,0x2F,0x04,0x24,0x08,0x23,0xB0,0x20,0x06,0x2D,0x84,0x29,0x08,0x29,0x32,0x49,0x02,0x51,0x03,0x50,0xFE},
{0xB3,0x44,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x92,0x54,0xFF,0x7C,0x82,0x55,0x04,0x54,0x60,0x54,0x40,0x7C,0x4C,0x54,0x50,0x10,0x60,0x14,0x42,0x7A,0x42,0x22,0x43,0x00,0x3E},
{0xB3,0x45,0x00,0x00,0x18,0x40,0x10,0x30,0x10,0x14,0x54,0xFE,0x7E,0x10,0x54,0x10,0x54,0x10,0x54,0x14,0x7C,0xFE,0x54,0x10,0x10,0x10,0x14,0x10,0x7A,0x12,0x22,0xFF,0x00,0x00},
{0xB3,0x46,0x00,0x00,0x18,0xC6,0x10,0x84,0x10,0x84,0x54,0x84,0x7D,0xFF,0x54,0x84,0x54,0x84,0x54,0x84,0x7C,0xFC,0x54,0x84,0x10,0x84,0x14,0x84,0x7A,0x84,0x22,0xFC,0x00,0x84},
{0xB3,0x47,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0x10,0x54,0x12,0x7D,0xFF,0x54,0x10,0x54,0x10,0x54,0x92,0x7C,0xFF,0x54,0x82,0x10,0x82,0x14,0x82,0x7A,0x82,0x22,0xFE,0x00,0x82},
{0xB3,0x48,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x04,0x54,0x04,0x7D,0x14,0x55,0xF4,0x55,0x14,0x55,0x14,0x7D,0x14,0x55,0xF4,0x11,0x14,0x14,0x04,0x7A,0x24,0x22,0x1C,0x00,0x08},
{0xB3,0x49,0x00,0x00,0x18,0x84,0x10,0xFE,0x10,0x84,0x54,0x84,0x7E,0x84,0x54,0xFC,0x54,0x84,0x54,0x84,0x7C,0x84,0x54,0xFC,0x10,0x84,0x18,0x84,0x74,0x84,0x25,0xFF,0x00,0x00},
{0xB3,0x4A,0x00,0x00,0x00,0x02,0x7F,0xFF,0x01,0x02,0x0D,0x14,0x09,0xF8,0x09,0x00,0x17,0x03,0x60,0xFC,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x88,0x7F,0xF6,0x20,0x02},
{0xB3,0x4B,0x00,0x00,0x18,0x60,0x10,0x40,0x10,0x42,0x54,0xFF,0x7E,0xA0,0x55,0x24,0x54,0x3E,0x54,0x20,0x7C,0x24,0x54,0x3E,0x10,0x20,0x14,0x20,0x7A,0x20,0x22,0x20,0x00,0x20},
{0xB3,0x4C,0x00,0x00,0x18,0x04,0x10,0x8E,0x10,0xF0,0x54,0x80,0x7E,0x80,0x54,0x84,0x54,0xFE,0x54,0x88,0x7C,0x88,0x54,0x88,0x10,0x88,0x18,0x88,0x74,0x8A,0x25,0xFF,0x00,0x00},
{0xB3,0x4D,0x00,0x00,0x18,0x30,0x10,0x30,0x10,0x48,0x54,0x48,0x7C,0x84,0x55,0x7B,0x56,0x00,0x54,0x02,0x7D,0xFF,0x54,0x22,0x10,0x22,0x14,0x2E,0x7A,0x24,0x22,0x20,0x00,0x20},
{0xB3,0x4E,0x00,0x00,0x18,0x80,0x10,0xAF,0x20,0x90,0x4C,0x80,0x0B,0xEF,0x10,0x82,0x32,0xA2,0x52,0xA2,0x12,0xA2,0x12,0xAA,0x12,0xAA,0x14,0x9A,0x10,0x82,0x10,0x8E,0x10,0x84},
{0xB3,0x4F,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x08,0x08,0x1F,0xFC,0x68,0x0B,0x08,0x09,0x0F,0xF8,0x02,0x40,0x0C,0x40,0x74,0x2C,0x04,0x28,0x05,0x90,0x1E,0x0C,0x08,0x03},
{0xB3,0x50,0x00,0x00,0x18,0x00,0x12,0x42,0x7F,0x7F,0x12,0x42,0x12,0x42,0x22,0x7E,0x4E,0xC2,0x00,0x80,0x7F,0xFF,0x02,0x40,0x0C,0x46,0x74,0x28,0x05,0x90,0x1E,0x0C,0x08,0x03},
{0xB3,0x51,0x00,0x00,0x18,0x18,0x10,0x10,0x14,0x92,0x7E,0xFF,0x04,0x92,0x08,0x94,0x0A,0x90,0x1C,0xFF,0x2A,0xA2,0x4A,0x94,0x08,0x94,0x09,0x08,0x09,0x14,0x09,0x24,0x0A,0x43},
{0xB3,0x52,0x00,0x00,0x18,0x82,0x10,0xFF,0x14,0x82,0x7E,0x82,0x04,0x82,0x08,0xFE,0x0A,0x82,0x1C,0x82,0x2A,0x82,0x4A,0xFE,0x08,0x82,0x08,0x00,0x08,0x02,0x09,0xFF,0x08,0x00},
{0xB3,0x53,0x00,0x00,0x18,0x18,0x10,0x10,0x14,0x10,0x7E,0x10,0x04,0x92,0x08,0xFF,0x0A,0x92,0x1C,0x92,0x2A,0x92,0x4A,0xFE,0x08,0x92,0x08,0x92,0x08,0x92,0x08,0xFE,0x08,0x82},
{0xB3,0x54,0x00,0x00,0x18,0x60,0x10,0x40,0x14,0x42,0x7E,0xFF,0x04,0x82,0x09,0x02,0x08,0xF2,0x1A,0x92,0x2C,0x92,0x4A,0xF2,0x0A,0x84,0x08,0x99,0x08,0x81,0x08,0x81,0x08,0x7F},
{0xB3,0x55,0x00,0x00,0x0C,0x68,0x08,0x44,0x10,0x7E,0x37,0xC0,0x50,0x21,0x10,0x19,0x10,0xC7,0x00,0x80,0x7F,0xFF,0x02,0x40,0x0C,0x46,0x74,0x28,0x05,0x90,0x1E,0x0C,0x08,0x03},
{0xB3,0x56,0x00,0x00,0x01,0xFC,0x3F,0x10,0x21,0x8C,0x20,0x84,0x5F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x10,0x10,0x1F,0xF0,0x04,0x82,0x04,0x82,0x08,0x83,0x70,0x7E},
{0xB3,0x57,0x00,0x00,0x0C,0x84,0x08,0xFE,0x08,0x84,0x3E,0x84,0x08,0xFC,0x08,0x84,0x7E,0xFC,0x08,0x84,0x18,0x84,0x14,0xFC,0x16,0x50,0x22,0x52,0x20,0x52,0x40,0x93,0x03,0x0E},
{0xB3,0x58,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x12,0x7E,0xFF,0x00,0x20,0x3E,0x22,0x00,0x3F,0x3E,0x22,0x00,0x22,0x22,0x22,0x3F,0x22,0x22,0x42,0x22,0x42,0x3E,0x5C,0x22,0x88},
{0xB3,0x59,0x00,0x00,0x04,0x04,0x3E,0xFE,0x00,0x08,0x7F,0x68,0x00,0x48,0x3E,0x4A,0x00,0xFF,0x3E,0x88,0x00,0x18,0x22,0x28,0x3F,0x28,0x22,0x48,0x22,0x88,0x3E,0x38,0x22,0x10},
{0xB3,0x5A,0x00,0x00,0x08,0x30,0x3C,0x20,0x00,0x24,0x7E,0xFE,0x00,0x24,0x3C,0x24,0x00,0x24,0x3D,0xFF,0x00,0x20,0x3C,0x50,0x24,0x50,0x24,0x48,0x3C,0x88,0x24,0x84,0x01,0x02},
{0xB3,0x5B,0x00,0x00,0x08,0x10,0x3C,0xF8,0x00,0x10,0x7E,0x92,0x00,0xFF,0x3C,0x92,0x00,0x92,0x3C,0xAA,0x00,0xAA,0x24,0xC6,0x3E,0x82,0x24,0x82,0x24,0x82,0x3C,0x8E,0x24,0x84},
{0xB3,0x5C,0x00,0x00,0x04,0x30,0x3E,0x20,0x00,0x24,0x7F,0x7E,0x00,0x48,0x3E,0x48,0x00,0x88,0x3E,0x0A,0x00,0xFF,0x22,0x08,0x3E,0x08,0x22,0x08,0x22,0x08,0x3E,0x08,0x22,0x08},
{0xB3,0x5D,0x00,0x00,0x04,0x48,0x3E,0x7C,0x00,0x48,0x7F,0x49,0x00,0x47,0x3E,0x80,0x00,0x04,0x3E,0xFE,0x00,0x44,0x22,0x48,0x3F,0x28,0x22,0x10,0x22,0x28,0x3E,0x24,0x22,0x43},
{0xB3,0x5E,0x00,0x00,0x04,0x08,0x3E,0x5C,0x00,0x48,0x7F,0x48,0x00,0x44,0x3E,0x84,0x00,0x92,0x3E,0x92,0x01,0x11,0x22,0x20,0x3F,0x28,0x22,0x24,0x22,0x44,0x3E,0xFA,0x22,0x42},
{0xB3,0x5F,0x00,0x00,0x08,0x6C,0x3C,0x48,0x00,0x48,0x7E,0x88,0x00,0x8B,0x3D,0x8A,0x02,0x8C,0x3C,0x98,0x00,0xA8,0x24,0x88,0x3E,0x88,0x24,0x89,0x24,0x89,0x3C,0x89,0x24,0x87},
{0xB3,0x60,0x00,0x00,0x04,0x4E,0x3E,0x70,0x00,0x40,0x7F,0x40,0x00,0x42,0x3E,0x7F,0x00,0x44,0x3E,0x44,0x00,0x44,0x3E,0x44,0x22,0x44,0x22,0x44,0x3E,0x84,0x22,0x84,0x01,0x04},
{0xB3,0x61,0x00,0x00,0x04,0x18,0x7E,0x10,0x00,0x12,0x42,0xFF,0x7E,0x10,0x42,0x14,0x42,0xFE,0x7E,0x44,0x42,0x44,0x04,0x28,0x44,0x28,0x28,0x10,0x2E,0x28,0x70,0x47,0x21,0x82},
{0xB3,0x62,0x00,0x00,0x24,0x04,0x3D,0xFE,0x24,0x40,0x24,0x60,0x3D,0xA0,0x24,0x36,0x24,0x54,0x25,0x98,0x3C,0x34,0x24,0x54,0x25,0x92,0x24,0x11,0x44,0x10,0x5C,0xE0,0x48,0x40},
{0xB3,0x63,0x00,0x00,0x45,0x02,0x7D,0xFF,0x45,0x00,0x45,0x00,0x7D,0x04,0x45,0xFE,0x7D,0x44,0x45,0x44,0x45,0x28,0x7D,0x28,0x45,0x10,0x29,0x28,0x25,0x24,0x42,0x47,0x04,0x82},
{0xB3,0x64,0x00,0x00,0x00,0x80,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x20,0x0C,0x1C,0x30,0x04},
{0xB3,0x65,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x88,0x7F,0xFF,0x11,0x10,0x1F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x20,0x0C,0x1C,0x30,0x04},
{0xB3,0x66,0x00,0x00,0x06,0x60,0x04,0x4C,0x1C,0x58,0x64,0x62,0x04,0x43,0x0F,0xFE,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x20,0x0C,0x1C,0x30,0x04},
{0xB3,0x67,0x00,0x00,0x01,0xC0,0x06,0x30,0x1B,0xEC,0x60,0x03,0x0F,0xF0,0x00,0x20,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x06,0x30,0x38,0x0E},
{0xB3,0x68,0x00,0x00,0x0C,0xE0,0x08,0x10,0x10,0x0C,0x6F,0xF3,0x02,0x10,0x04,0x60,0x0F,0xF8,0x38,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB3,0x69,0x00,0x00,0x0C,0x42,0x08,0x7F,0x3F,0x42,0x08,0x42,0x08,0x4C,0x7F,0x40,0x14,0x7F,0x14,0x62,0x34,0x52,0x56,0x54,0x55,0x4C,0x55,0x48,0x14,0x54,0x24,0x52,0x2C,0x61},
{0xB3,0x6A,0x00,0x00,0x0C,0x30,0x08,0x20,0x3F,0x20,0x08,0x22,0x08,0x7F,0x7F,0x44,0x14,0x44,0x14,0xA4,0x36,0x24,0x55,0x28,0x55,0x18,0x55,0x14,0x14,0x24,0x24,0x22,0x2C,0x41},
{0xB3,0x6B,0x00,0x00,0x22,0x0C,0x3F,0x08,0x22,0x08,0x22,0x08,0x3E,0x68,0x2A,0x4A,0x08,0x4F,0x2A,0x48,0x2F,0x48,0x28,0x48,0x28,0x48,0x2F,0x48,0x78,0x4A,0x21,0xFF,0x00,0x00},
{0xB3,0x6C,0x00,0x00,0x22,0x18,0x3F,0x10,0x22,0x14,0x22,0xFE,0x3E,0x10,0x2A,0x10,0x08,0x12,0x28,0xFF,0x2F,0x10,0x28,0x30,0x28,0x28,0x2F,0x48,0x78,0x44,0x20,0x82,0x01,0x01},
{0xB3,0x6D,0x00,0x00,0x18,0x82,0x10,0xFF,0x7E,0x80,0x10,0x80,0x7E,0xA2,0x52,0xBF,0x7E,0xA2,0x52,0xA2,0x7E,0xA2,0x52,0xAE,0x10,0xA4,0x7E,0xA1,0x11,0x21,0x11,0x21,0x12,0x1F},
{0xB3,0x6E,0x00,0x00,0x0C,0x30,0x08,0x20,0x7F,0x22,0x08,0x3F,0x7F,0x42,0x49,0x44,0x7F,0x98,0x49,0x10,0x7F,0x10,0x49,0x10,0x08,0x28,0x7F,0x28,0x08,0x44,0x08,0x44,0x09,0x83},
{0xB3,0x6F,0x00,0x00,0x21,0xFC,0x18,0x00,0x03,0xFE,0x40,0x00,0x31,0xFC,0x00,0x00,0x01,0xFC,0x10,0x00,0x79,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x70,0x00,0x00,0x20,0x20,0x19,0xA8,0x01,0x26,0x46,0x22,0x31,0xFC,0x01,0x04,0x01,0xFC,0x11,0x04,0x79,0xFC,0x11,0x04,0x11,0x04,0x11,0x1C,0x19,0x08,0x66,0x03,0x41,0xFC},
{0xB3,0x71,0x00,0x00,0x20,0x08,0x1B,0xFC,0x00,0x08,0x40,0xD0,0x32,0x24,0x03,0xFE,0x02,0x44,0x13,0xFC,0x7A,0x44,0x13,0xFC,0x12,0x44,0x12,0x5C,0x18,0x48,0x66,0x03,0x41,0xFC},
{0xB3,0x72,0x00,0x00,0x20,0x04,0x1B,0xFE,0x00,0x00,0x41,0xFC,0x31,0x04,0x01,0x04,0x01,0xFC,0x10,0x00,0x79,0x0C,0x10,0x88,0x10,0x92,0x13,0xFF,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x73,0x00,0x00,0x20,0x24,0x1B,0xFE,0x00,0x20,0x41,0xFC,0x31,0x24,0x01,0xFC,0x01,0x24,0x11,0xFC,0x79,0x24,0x10,0x20,0x13,0xFE,0x10,0x20,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xB3,0x74,0x00,0x00,0x20,0x30,0x18,0x24,0x03,0xFE,0x40,0x20,0x31,0xFC,0x01,0x24,0x01,0x24,0x11,0xFC,0x79,0x24,0x10,0x70,0x10,0xAE,0x13,0x22,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xB3,0x75,0x00,0x00,0x20,0xD3,0x18,0x9C,0x00,0x90,0x43,0xD0,0x30,0x9F,0x00,0x92,0x00,0xD2,0x13,0x92,0x7A,0x92,0x10,0x92,0x13,0xA2,0x11,0x22,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x76,0x00,0x00,0x20,0x04,0x1B,0xFE,0x00,0x40,0x40,0xA0,0x33,0x26,0x00,0x54,0x00,0x98,0x13,0x34,0x78,0x54,0x11,0x92,0x10,0x10,0x10,0xE0,0x18,0x40,0x66,0x03,0x41,0xFC},
{0xB3,0x77,0x00,0x00,0x20,0x08,0x1B,0xFC,0x00,0x00,0x41,0x24,0x32,0x48,0x01,0x24,0x01,0x24,0x10,0x00,0x79,0xFC,0x10,0x20,0x10,0x24,0x13,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x78,0x00,0x00,0x21,0x04,0x19,0xFE,0x01,0x04,0x41,0x04,0x31,0xFC,0x01,0x04,0x00,0x38,0x11,0xE0,0x78,0x24,0x13,0xFE,0x10,0x20,0x13,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x79,0x00,0x00,0x20,0x30,0x19,0xA0,0x01,0x24,0x41,0xFE,0x32,0x20,0x04,0x22,0x03,0xFF,0x10,0x00,0x79,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x7A,0x00,0x00,0x20,0x3C,0x19,0xE0,0x00,0x22,0x47,0xFF,0x30,0xA8,0x01,0x24,0x06,0x23,0x11,0xF8,0x78,0x88,0x10,0x9E,0x11,0x02,0x12,0x1C,0x18,0x08,0x66,0x03,0x41,0xFC},
{0xB3,0x7B,0x00,0x00,0x20,0x40,0x18,0x7C,0x00,0x84,0x43,0x48,0x30,0x30,0x00,0xCC,0x03,0x23,0x11,0xFC,0x78,0x20,0x10,0xF8,0x10,0x20,0x11,0xFC,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xB3,0x7C,0x00,0x00,0x44,0xCC,0x32,0x88,0x01,0x08,0x42,0xAB,0x34,0xAA,0x00,0x4C,0x00,0xC8,0x11,0x48,0x7A,0x54,0x10,0x54,0x10,0x92,0x13,0x21,0x18,0x40,0x66,0x03,0x41,0xFC},
{0xB3,0x7D,0x00,0x00,0x44,0xC2,0x32,0x9F,0x01,0x04,0x42,0x84,0x34,0x84,0x00,0x44,0x00,0xDF,0x11,0x44,0x7A,0x44,0x10,0x44,0x10,0x84,0x13,0x1F,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB3,0x7E,0x00,0x00,0x20,0x60,0x18,0x50,0x00,0x88,0x41,0x04,0x36,0xFB,0x00,0x20,0x03,0xFE,0x10,0x20,0x79,0xA8,0x11,0x26,0x12,0x22,0x10,0xE0,0x18,0x40,0x66,0x03,0x41,0xFC},
{0xB3,0xA1,0x00,0x00,0x0C,0x22,0x09,0x3F,0x7F,0xA2,0x00,0x22,0x23,0x24,0x12,0x24,0x14,0x22,0x7F,0xA2,0x00,0x21,0x3F,0x21,0x21,0x21,0x21,0x2E,0x21,0x24,0x3F,0x20,0x21,0x20},
{0xB3,0xA2,0x00,0x00,0x0C,0x22,0x09,0x3F,0x7F,0xA2,0x00,0x22,0x3F,0x24,0x21,0x24,0x3F,0x22,0x00,0x22,0x7F,0x21,0x02,0x21,0x05,0xA1,0x7E,0x2E,0x04,0x24,0x3C,0x20,0x08,0x20},
{0xB3,0xA3,0x00,0x00,0x0C,0x12,0x08,0x1F,0x3E,0xD2,0x08,0x92,0x09,0x14,0x7F,0xD4,0x04,0x12,0x0A,0x12,0x11,0x11,0x3F,0x91,0x50,0x91,0x1F,0x9E,0x10,0x94,0x1F,0x90,0x10,0x90},
{0xB3,0xA4,0x00,0x00,0x02,0x00,0x7F,0x06,0x14,0x24,0x55,0x55,0x7F,0x55,0x55,0x49,0x55,0x49,0x55,0x55,0x63,0x55,0x41,0x55,0x7F,0x63,0x41,0x43,0x41,0x41,0x7F,0x7F,0x41,0x41},
{0xB3,0xA5,0x00,0x00,0x42,0x04,0x7F,0x7E,0x52,0x04,0x52,0x68,0x7E,0x10,0x52,0x02,0x52,0xFF,0x7E,0x12,0x52,0x14,0x10,0x10,0x7E,0x10,0x10,0x10,0x1E,0x90,0x70,0x70,0x20,0x20},
{0xB3,0xA6,0x00,0x00,0x0C,0x00,0x0A,0x02,0x12,0xFF,0x11,0x12,0x3F,0x0A,0x48,0x6A,0x08,0xA4,0x7F,0x24,0x08,0x14,0x4B,0x08,0x2C,0x08,0x29,0x14,0x0E,0x14,0x78,0x22,0x20,0xC1},
{0xB3,0xA7,0x00,0x00,0x0C,0x00,0x0A,0x42,0x12,0x7F,0x11,0x42,0x3F,0x42,0x48,0x42,0x08,0x42,0x7F,0x42,0x08,0x42,0x4B,0x42,0x2C,0x42,0x29,0x42,0x0E,0x42,0x78,0x7E,0x20,0x42},
{0xB3,0xA8,0x00,0x00,0x0C,0x30,0x0A,0x20,0x12,0x42,0x11,0x7F,0x3F,0x42,0x48,0x82,0x08,0x22,0x7F,0x22,0x08,0x12,0x4B,0x12,0x2C,0x02,0x29,0x04,0x0E,0x04,0x78,0x38,0x20,0x10},
{0xB3,0xA9,0x00,0x00,0x18,0xC3,0x14,0x9A,0x24,0x92,0x22,0x92,0x7C,0x92,0x48,0x92,0x08,0x92,0x7E,0x92,0x08,0x92,0x4A,0x92,0x2C,0x92,0x28,0x92,0x0E,0x92,0x79,0x12,0x22,0x02},
{0xB3,0xAA,0x00,0x00,0x0C,0x00,0x0A,0x04,0x12,0xFE,0x11,0x10,0x3F,0x10,0x48,0x10,0x08,0x10,0x7F,0x10,0x08,0x10,0x4B,0x10,0x2C,0x10,0x29,0x10,0x0E,0x12,0x78,0xFF,0x20,0x00},
{0xB3,0xAB,0x00,0x00,0x0C,0x88,0x0A,0xFC,0x12,0x88,0x10,0x88,0x3E,0x88,0x48,0xC8,0x08,0xA8,0x7E,0xA8,0x08,0x98,0x4A,0x88,0x2C,0x88,0x28,0x89,0x0E,0x89,0x79,0x09,0x21,0x07},
{0xB3,0xAC,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x20,0x42,0x2F,0xFA,0x20,0xC2,0x23,0x42,0x2C,0x42,0x21,0xC2,0x20,0x8E,0x20,0x04},
{0xB3,0xAD,0x00,0x00,0x48,0x30,0x7C,0x24,0x49,0xFE,0x48,0x00,0x50,0x8C,0x50,0x48,0x48,0x52,0x4B,0xFF,0x44,0x00,0x44,0xFC,0x44,0x84,0x78,0x84,0x50,0x84,0x40,0xFC,0x40,0x84},
{0xB3,0xAE,0x00,0x00,0x48,0x30,0x7C,0x20,0x49,0xFC,0x48,0x20,0x53,0xFE,0x50,0x51,0x48,0x8F,0x4B,0x40,0x44,0x7C,0x44,0x84,0x45,0x48,0x78,0x30,0x50,0x28,0x40,0xC4,0x43,0x03},
{0xB3,0xAF,0x00,0x00,0x48,0x30,0x7C,0x22,0x4B,0xFF,0x48,0x20,0x51,0xFE,0x51,0x22,0x49,0xFE,0x49,0x22,0x45,0xFE,0x44,0x60,0x44,0xB0,0x78,0xAC,0x51,0x23,0x42,0x20,0x40,0x20},
{0xB3,0xB0,0x00,0x00,0x48,0x30,0x7C,0x24,0x49,0xFE,0x48,0x20,0x50,0x22,0x53,0xFF,0x48,0x90,0x48,0x91,0x45,0x0F,0x46,0x30,0x44,0x24,0x79,0xFE,0x50,0x20,0x40,0x22,0x43,0xFF},
{0xB3,0xB1,0x00,0x00,0x48,0x30,0x7C,0x48,0x48,0x84,0x4B,0x7B,0x50,0x00,0x51,0xFC,0x48,0x08,0x48,0xFC,0x44,0x00,0x47,0xFF,0x44,0x40,0x78,0x48,0x50,0x84,0x43,0xFA,0x41,0x02},
{0xB3,0xB2,0x00,0x00,0x48,0x30,0x7D,0x42,0x49,0xFF,0x49,0x22,0x51,0xFE,0x51,0x22,0x49,0xFE,0x49,0x42,0x44,0x40,0x44,0x98,0x44,0x12,0x7B,0xFF,0x50,0x10,0x40,0x10,0x40,0x10},
{0xB3,0xB3,0x00,0x00,0x48,0xC0,0x7C,0x82,0x49,0xFF,0x49,0x02,0x52,0x82,0x50,0xFA,0x49,0x22,0x49,0xFA,0x44,0x22,0x44,0xAA,0x44,0xFA,0x78,0x8A,0x50,0x02,0x40,0x3C,0x40,0x08},
{0xB3,0xB4,0x00,0x00,0x48,0x60,0x7C,0x44,0x48,0xFE,0x48,0x84,0x51,0x38,0x52,0x10,0x48,0x42,0x49,0x8F,0x45,0x02,0x45,0x42,0x45,0xEE,0x79,0x02,0x51,0x02,0x41,0xFE,0x41,0x02},
{0xB3,0xB5,0x00,0x00,0x48,0x02,0x7B,0xFF,0x4A,0x40,0x4A,0x42,0x4B,0xFF,0x52,0x52,0x52,0x52,0x4B,0xCA,0x4A,0x4A,0x4A,0x44,0x7B,0xCA,0x56,0x4A,0x40,0x51,0x40,0x61,0x40,0x40},
{0xB3,0xB6,0x00,0x00,0x00,0xC0,0x0C,0x98,0x08,0x86,0x13,0x82,0x61,0x30,0x00,0xC0,0x03,0x04,0x0F,0xFE,0x78,0x40,0x0F,0xFC,0x08,0x40,0x0F,0xFC,0x08,0x40,0x0F,0xFF,0x08,0x00},
{0xB3,0xB7,0x00,0x00,0x00,0x10,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x5E,0xBC,0x00,0x80,0x1E,0xBC,0x00,0x00,0x1F,0xF8,0x00,0x0A,0x7F,0xFF,0x00,0x08,0x1F,0xF8,0x00,0x08},
{0xB3,0xB8,0x00,0x00,0x00,0x10,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x46,0xB4,0x18,0x8C,0x07,0xF0,0x00,0x04,0x7F,0xFE,0x04,0x00,0x0F,0xF8,0x08,0x08,0x00,0x10,0x00,0xE0},
{0xB3,0xB9,0x00,0x00,0x00,0x84,0x3F,0xFE,0x04,0x10,0x02,0x20,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xB3,0xBA,0x00,0x00,0x00,0x84,0x3F,0xFE,0x04,0x10,0x02,0x22,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x42,0x02,0x42,0x0C,0x43,0x70,0x3E},
{0xB3,0xBB,0x00,0x00,0x04,0x02,0x7E,0xFF,0x08,0x10,0x08,0xA2,0x08,0xFF,0x08,0x82,0x08,0xFE,0x08,0x82,0x08,0xFE,0x08,0x82,0x08,0xFE,0x08,0x82,0x48,0x68,0x38,0x86,0x13,0x01},
{0xB3,0xBC,0x00,0x00,0x00,0x02,0x61,0xFF,0x40,0x10,0x40,0xA2,0x4C,0xFF,0x58,0x82,0x60,0xFE,0x40,0x82,0x44,0xFE,0x44,0x82,0x46,0xFE,0x3C,0x82,0x00,0x68,0x00,0x86,0x03,0x01},
{0xB3,0xBD,0x00,0x00,0x06,0x00,0x04,0x10,0x07,0xF8,0x08,0x20,0x1F,0xFC,0x70,0x84,0x10,0x84,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x00,0x00,0x14,0x44,0x63,0x33,0x41,0x11},
{0xB3,0xBE,0x00,0x00,0x03,0x00,0x14,0x20,0x1F,0xF0,0x10,0x20,0x1F,0xE0,0x10,0x20,0x1F,0xE0,0x10,0x00,0x1F,0xF8,0x10,0x02,0x1F,0xFF,0x01,0x22,0x28,0x92,0x24,0x92,0x44,0x0C},
{0xB3,0xBF,0x00,0x00,0x00,0x82,0x00,0xFF,0x00,0x80,0x3F,0xFE,0x22,0x02,0x29,0x32,0x24,0x42,0x32,0x52,0x29,0x8A,0x21,0x42,0x22,0x32,0x2C,0x92,0x20,0x42,0x3F,0xFE,0x20,0x02},
{0xB3,0xC0,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x21,0x10,0x2F,0xFE,0x21,0x12,0x2F,0xFE,0x20,0x00,0x26,0x30,0x24,0x20,0x27,0xA6,0x24,0x38,0x45,0xA2,0x5E,0x23,0x48,0x1E},
{0xB3,0xC1,0x00,0x00,0x00,0x84,0x7F,0xFE,0x10,0x88,0x18,0x8C,0x14,0x8A,0x65,0xD2,0x02,0xB0,0x0C,0x8C,0x71,0x03,0x03,0xF8,0x1C,0x10,0x03,0x60,0x01,0x80,0x3E,0x60,0x00,0x20},
{0xB3,0xC2,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x00,0x23,0x0C,0x22,0x08,0x2F,0xBF,0x22,0x08,0x2A,0xAA,0x2A,0xAA,0x2A,0xAA,0x2A,0xAA,0x4A,0xAA,0x52,0x49,0x42,0x08},
{0xB3,0xC3,0x00,0x00,0x0C,0x30,0x09,0x22,0x09,0xFF,0x12,0x02,0x1B,0xFC,0x30,0x40,0x50,0xA0,0x13,0x36,0x10,0x54,0x11,0x98,0x12,0x34,0x10,0xD3,0x13,0x10,0x10,0x70,0x10,0x20},
{0xB3,0xC4,0x00,0x00,0x0C,0x30,0x08,0x24,0x0B,0xFE,0x10,0x88,0x1A,0x52,0x33,0xFF,0x52,0x02,0x14,0x20,0x13,0xFE,0x10,0x80,0x10,0xFC,0x10,0x84,0x11,0x04,0x11,0x38,0x12,0x10},
{0xB3,0xC5,0x00,0x00,0x0C,0x34,0x08,0x22,0x0B,0xFF,0x10,0x20,0x1B,0xFE,0x32,0x22,0x53,0xFE,0x12,0x22,0x13,0xFE,0x12,0x22,0x10,0x08,0x17,0xFF,0x11,0x08,0x10,0x88,0x10,0x38},
{0xB3,0xC6,0x00,0x00,0x0C,0xCC,0x08,0x88,0x0B,0xFE,0x10,0x88,0x18,0x8A,0x37,0xFF,0x52,0x00,0x12,0xFE,0x12,0x92,0x12,0xFE,0x12,0x92,0x12,0xFE,0x12,0x92,0x14,0x92,0x14,0x86},
{0xB3,0xC7,0x00,0x00,0x0D,0x86,0x09,0x04,0x09,0xDF,0x12,0x44,0x15,0x54,0x30,0xBF,0x51,0x04,0x16,0x34,0x10,0x20,0x17,0xFF,0x10,0x60,0x10,0xB0,0x11,0x2C,0x16,0x23,0x10,0x20},
{0xB3,0xC8,0x00,0x00,0x0C,0x30,0x0A,0x42,0x0B,0xFF,0x12,0x22,0x13,0xFE,0x32,0x22,0x52,0x22,0x13,0xFE,0x12,0xA2,0x10,0xA0,0x10,0xA8,0x11,0x2D,0x11,0x35,0x12,0x21,0x14,0x1F},
{0xB3,0xC9,0x00,0x00,0x0C,0x60,0x08,0xB0,0x09,0x08,0x12,0xF4,0x14,0x03,0x3B,0xFC,0x52,0x04,0x13,0xFC,0x12,0x04,0x13,0xFC,0x12,0x00,0x13,0xFE,0x13,0x02,0x15,0xFE,0x15,0x02},
{0xB3,0xCA,0x00,0x00,0x01,0xC0,0x03,0x20,0x04,0x18,0x18,0xC4,0x64,0x8B,0x0A,0x94,0x12,0xA4,0x04,0x88,0x0A,0x94,0x12,0xA4,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB3,0xCB,0x00,0x00,0x0C,0xCC,0x08,0x88,0x0B,0xE8,0x11,0x4F,0x12,0x2A,0x32,0x2A,0x54,0x4A,0x11,0x4A,0x11,0x54,0x10,0x84,0x11,0x44,0x11,0x4A,0x12,0x4A,0x14,0x12,0x10,0x11},
{0xB3,0xCC,0x00,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x0B,0xE8,0x08,0x0A,0x7F,0xFF,0x11,0x00,0x1F,0x7E,0x11,0x22,0x1F,0x24,0x11,0x14,0x17,0x08,0x79,0x14,0x21,0x14,0x01,0x63},
{0xB3,0xCD,0x00,0x00,0x08,0x48,0x49,0x7C,0x49,0x48,0x7F,0x48,0x00,0x48,0x7F,0x48,0x00,0x48,0x3E,0x48,0x22,0x48,0x3E,0x48,0x42,0x48,0x24,0x49,0x2E,0x89,0x70,0x89,0x21,0x07},
{0xB3,0xCE,0x00,0x00,0x06,0x03,0x24,0x42,0x3F,0xDA,0x44,0x52,0x07,0x92,0x3C,0x12,0x04,0x12,0x3F,0x92,0x04,0x12,0x7F,0xD2,0x00,0x02,0x3F,0x82,0x20,0x92,0x3F,0x8E,0x20,0x84},
{0xB3,0xCF,0x00,0x00,0x06,0x03,0x34,0xC2,0x24,0x9A,0x3F,0x92,0x00,0x12,0x7F,0xD2,0x00,0x12,0x3F,0x92,0x20,0x92,0x3F,0x92,0x40,0x82,0x31,0x02,0x12,0xD2,0x7F,0x0E,0x20,0x04},
{0xB3,0xD0,0x00,0x00,0x06,0x03,0x0D,0x02,0x10,0x9A,0x2E,0xD2,0x40,0x52,0x3F,0x92,0x20,0x92,0x3F,0x92,0x20,0x92,0x3F,0x92,0x20,0x12,0x3F,0xC2,0x50,0x52,0x5F,0xCE,0x50,0x44},
{0xB3,0xD1,0x00,0x00,0x07,0x83,0x7C,0x02,0x04,0x9A,0x7F,0xD2,0x04,0x12,0x15,0x52,0x75,0x92,0x15,0x12,0x75,0x52,0x14,0xD2,0x0E,0x02,0x15,0x02,0x24,0xD2,0x44,0x4E,0x04,0x04},
{0xB3,0xD2,0x00,0x00,0x08,0x10,0x2B,0x56,0x2A,0x54,0x4C,0x98,0x12,0x24,0x61,0x42,0x3F,0xFF,0x20,0x02,0x41,0x04,0x1F,0xF8,0x02,0x08,0x02,0x08,0x04,0x08,0x08,0xF0,0x30,0x20},
{0xB3,0xD3,0x00,0x00,0x24,0x30,0x3C,0xA4,0x25,0x22,0x25,0xFD,0x3E,0x49,0x24,0x48,0x25,0xFF,0x24,0x84,0x3D,0x22,0x26,0xFD,0x24,0x44,0x24,0x44,0x44,0x84,0x5C,0xB8,0x49,0x10},
{0xB3,0xD4,0x00,0x00,0x7E,0x18,0x42,0x10,0x42,0x10,0x7E,0x12,0x00,0xFF,0x7F,0x12,0x41,0x12,0x7F,0x12,0x41,0x12,0x7F,0x22,0x41,0x22,0x7F,0x22,0x14,0x62,0x23,0x5C,0x41,0x48},
{0xB3,0xD5,0x00,0x00,0x18,0x34,0x10,0x22,0x13,0xFF,0x10,0x20,0x7D,0xFE,0x11,0x22,0x11,0xFE,0x11,0x22,0x11,0xFE,0x11,0x22,0x10,0x04,0x13,0xFF,0x10,0x84,0x10,0x44,0x10,0x1C},
{0xB3,0xD6,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x00,0x28,0xD8,0x24,0x91,0x25,0x1F,0x3F,0xD1,0x22,0x26,0x2A,0x84,0x2A,0x84,0x2F,0x8C,0x2A,0x8A,0x42,0x0A,0x44,0x12,0x48,0x21},
{0xB3,0xD7,0x00,0x00,0x00,0x84,0x3F,0xFE,0x04,0x10,0x22,0x22,0x3F,0xFF,0x20,0x82,0x4F,0xF8,0x08,0x88,0x08,0xB8,0x00,0x80,0x1F,0xFC,0x10,0x04,0x10,0x04,0x1F,0xFC,0x10,0x04},
{0xB3,0xD8,0x00,0x00,0x00,0x30,0x49,0x22,0x7D,0xFF,0x49,0x42,0x4A,0x7C,0x48,0x84,0x49,0x48,0x48,0x30,0x48,0xCC,0x7B,0x03,0x48,0xFC,0x40,0x84,0x00,0x84,0x00,0xFC,0x00,0x84},
{0xB3,0xD9,0x00,0x00,0x00,0x30,0x49,0x22,0x79,0xFF,0x4A,0x02,0x49,0xFC,0x48,0x00,0x49,0xFC,0x49,0x04,0x49,0xFC,0x79,0x04,0x49,0xFC,0x40,0x00,0x00,0x02,0x07,0xFF,0x00,0x00},
{0xB3,0xDA,0x00,0x00,0x00,0x30,0x48,0x24,0x7B,0xFE,0x48,0x88,0x4A,0x52,0x4B,0xFF,0x4A,0x02,0x4C,0x24,0x49,0xFC,0x79,0x24,0x49,0x24,0x41,0x3C,0x01,0x28,0x00,0x20,0x00,0x20},
{0xB3,0xDB,0x00,0x00,0x00,0x18,0x00,0x12,0x4A,0x11,0x7B,0xFF,0x4A,0x08,0x4A,0xE8,0x4A,0x0B,0x4A,0xEA,0x4A,0xAA,0x7A,0xAC,0x4A,0xE8,0x44,0xA9,0x04,0x15,0x08,0x23,0x00,0x41},
{0xB3,0xDC,0x00,0x00,0x02,0x08,0x4B,0xFC,0x7A,0x08,0x4B,0xF8,0x4A,0x08,0x4B,0xF8,0x4A,0x82,0x49,0xFF,0x7A,0x22,0x4E,0x22,0x42,0x52,0x02,0x8A,0x03,0xFA,0x02,0x04,0x00,0x18},
{0xB3,0xDD,0x00,0x00,0x00,0x18,0x49,0x93,0x7D,0x12,0x49,0xFE,0x49,0x02,0x48,0x00,0x4B,0xFF,0x48,0x20,0x4A,0x42,0x7B,0xFF,0x4A,0x52,0x42,0x52,0x02,0x52,0x02,0x5E,0x02,0x04},
{0xB3,0xDE,0x00,0x00,0x01,0x02,0x49,0xFF,0x7D,0x22,0x49,0xFE,0x49,0x22,0x49,0xFE,0x49,0x02,0x48,0x00,0x4B,0xFF,0x78,0x90,0x48,0x8B,0x40,0x8A,0x00,0xE4,0x03,0x82,0x01,0x01},
{0xB3,0xDF,0x00,0x00,0x00,0x80,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x22,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB3,0xE0,0x00,0x00,0x00,0x84,0x3F,0xFE,0x00,0x80,0x1E,0xBC,0x12,0xA4,0x1E,0xBC,0x00,0x80,0x7F,0xFF,0x08,0x80,0x08,0x46,0x08,0x58,0x08,0x20,0x0F,0x90,0x78,0x0C,0x20,0x03},
{0xB3,0xE1,0x00,0x00,0x02,0x04,0x4B,0xFE,0x7A,0x04,0x4B,0xFC,0x4A,0x00,0x4A,0xFE,0x4A,0x28,0x4A,0x44,0x7A,0xFA,0x4A,0x40,0x42,0x10,0x04,0xFE,0x04,0x10,0x0C,0x12,0x09,0xFF},
{0xB3,0xE2,0x00,0x00,0x00,0xC1,0x50,0x81,0x77,0xF5,0x50,0x85,0x57,0xF5,0x54,0x95,0x54,0x95,0x57,0xF5,0x51,0x85,0x72,0xC5,0x52,0xB5,0x44,0x91,0x08,0x81,0x00,0x87,0x00,0x82},
{0xB3,0xE3,0x00,0x00,0x01,0x28,0x49,0x28,0x7B,0xFE,0x49,0x28,0x49,0x38,0x49,0x00,0x49,0xFE,0x49,0x00,0x48,0x22,0x7B,0xFF,0x48,0x60,0x40,0xB0,0x01,0x2C,0x06,0x23,0x00,0x20},
{0xB3,0xE4,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x20,0x4A,0x22,0x4B,0xFF,0x4A,0x8A,0x4A,0x52,0x4A,0xFA,0x7A,0x22,0x4A,0xFA,0x42,0x22,0x02,0x22,0x02,0x2E,0x02,0x04},
{0xB3,0xE5,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x60,0x48,0xB8,0x4B,0x27,0x48,0x00,0x49,0xFC,0x49,0x04,0x79,0xFC,0x49,0x04,0x41,0xFC,0x01,0x04,0x00,0x00,0x07,0xFF},
{0xB3,0xE6,0x00,0x00,0x1F,0x7C,0x11,0x44,0x1F,0x7C,0x00,0x00,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB3,0xE7,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x22,0x4B,0xFE,0x4A,0x22,0x4B,0xFE,0x4A,0x02,0x49,0xFC,0x49,0x04,0x79,0xFC,0x49,0x04,0x41,0xFC,0x01,0x04,0x01,0x1C,0x01,0x08},
{0xB3,0xE8,0x00,0x00,0x00,0x3E,0x4B,0xE0,0x78,0x20,0x48,0x22,0x4B,0xFF,0x49,0x24,0x49,0x24,0x4F,0xFF,0x49,0x24,0x79,0x24,0x49,0x24,0x43,0xFE,0x00,0x20,0x00,0x20,0x07,0xFF},
{0xB3,0xE9,0x00,0x00,0x01,0x98,0x51,0x11,0x72,0x1F,0x54,0xD1,0x52,0x91,0x51,0x21,0x51,0x01,0x52,0x9D,0x57,0x41,0x71,0x01,0x55,0x41,0x45,0x41,0x09,0x21,0x01,0x0E,0x01,0x04},
{0xB3,0xEA,0x00,0x00,0x00,0x40,0x00,0xF8,0x48,0x88,0x79,0x10,0x4B,0xFE,0x49,0x52,0x49,0x52,0x49,0x4E,0x49,0x82,0x49,0x32,0x78,0x20,0x4B,0xFF,0x40,0x50,0x01,0x8C,0x06,0x03},
{0xB3,0xEB,0x00,0x00,0x01,0xE0,0x48,0x20,0x78,0x50,0x49,0x8C,0x4E,0xF3,0x48,0x00,0x4B,0xC3,0x4A,0x5A,0x4B,0xD2,0x7A,0x52,0x4B,0xD2,0x42,0x52,0x02,0x42,0x02,0x4E,0x02,0xC4},
{0xB3,0xEC,0x00,0x00,0x01,0xF8,0x3F,0x00,0x01,0x02,0x7F,0xFF,0x04,0x10,0x0F,0xE8,0x14,0x24,0x67,0xE3,0x00,0x00,0x3F,0xFC,0x20,0x04,0x27,0xC4,0x24,0x44,0x27,0xDC,0x20,0x08},
{0xB3,0xED,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x00,0x4A,0xFE,0x4A,0x92,0x4A,0xFE,0x4A,0x92,0x4A,0xFE,0x4A,0x10,0x7A,0x14,0x4A,0xFE,0x42,0x10,0x04,0x12,0x05,0xFF,0x08,0x00},
{0xB3,0xEE,0x00,0x00,0x01,0xCC,0x57,0x08,0x71,0x08,0x51,0x0B,0x57,0xCA,0x51,0x2C,0x53,0x28,0x53,0x08,0x55,0x88,0x75,0x54,0x55,0x14,0x49,0x14,0x01,0x22,0x01,0x22,0x01,0x41},
{0xB3,0xEF,0x00,0x00,0x01,0x84,0x51,0x7E,0x71,0x04,0x52,0x04,0x52,0xFF,0x56,0x00,0x5A,0x44,0x52,0x7E,0x52,0x90,0x72,0x12,0x52,0xFF,0x42,0x10,0x02,0x28,0x02,0x44,0x02,0x83},
{0xB3,0xF0,0x00,0x00,0x01,0x80,0x51,0x02,0x77,0xBF,0x51,0x12,0x57,0xD2,0x51,0x12,0x51,0xD2,0x57,0x2E,0x51,0x04,0x70,0x20,0x57,0xFF,0x40,0x20,0x00,0x50,0x01,0x8C,0x06,0x03},
{0xB3,0xF1,0x00,0x00,0x00,0x20,0x48,0x7C,0x7C,0x88,0x49,0xF0,0x48,0x22,0x4B,0xFF,0x48,0x40,0x48,0xA6,0x4B,0x54,0x78,0x98,0x4B,0x34,0x40,0xD4,0x03,0x12,0x00,0xE1,0x00,0x40},
{0xB3,0xF2,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x27,0xF2,0x20,0x92,0x2F,0xFA,0x22,0x22,0x23,0xE2,0x20,0x82,0x2F,0xF2,0x24,0x82,0x2F,0xFA,0x20,0x82,0x3F,0xFE,0x20,0x02},
{0xB3,0xF3,0x00,0x00,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x04,0x10,0x3F,0x7E,0x04,0x10,0x07,0x12,0x7C,0x7F,0x20,0x00,0x7F,0xFF,0x04,0x40,0x04,0x41,0x08,0x41,0x70,0x3F},
{0xB3,0xF4,0x00,0x00,0x18,0xCC,0x10,0x88,0x13,0xFF,0x10,0x88,0x7C,0xF8,0x10,0x88,0x10,0xF8,0x10,0x8A,0x17,0xFF,0x1A,0x50,0x72,0x92,0x23,0x0E,0x02,0x00,0x03,0xFF,0x02,0x00},
{0xB3,0xF5,0x00,0x00,0x19,0xF8,0x11,0x08,0x11,0xF8,0x11,0x08,0x7D,0xF8,0x10,0x02,0x17,0xFF,0x10,0x80,0x14,0xFE,0x19,0x4A,0x76,0x4A,0x20,0x92,0x03,0x22,0x00,0xDC,0x00,0x08},
{0xB3,0xF6,0x00,0x00,0x18,0x84,0x10,0xFE,0x10,0x84,0x10,0xFC,0x7C,0x84,0x10,0xFC,0x10,0x00,0x13,0xFF,0x10,0x20,0x1D,0xA4,0x71,0x3E,0x21,0x20,0x02,0xA0,0x02,0x63,0x04,0x3C},
{0xB3,0xF7,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x44,0x11,0x7C,0x7D,0x44,0x11,0x7C,0x11,0x10,0x11,0xFF,0x11,0x22,0x1D,0x64,0x71,0x18,0x21,0x26,0x01,0x42,0x01,0xFF,0x01,0x00},
{0xB3,0xF8,0x00,0x00,0x0C,0x44,0x08,0x7E,0x7F,0x44,0x08,0x44,0x08,0x5C,0x7F,0x48,0x22,0x42,0x14,0x7F,0x7F,0x62,0x08,0x52,0x0A,0x54,0x7F,0x48,0x08,0x54,0x08,0x52,0x08,0x61},
{0xB3,0xF9,0x00,0x00,0x0D,0xFC,0x09,0x04,0x11,0x04,0x31,0xFC,0x50,0x20,0x17,0xFF,0x10,0x60,0x11,0xB8,0x16,0x27,0x10,0x20,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB3,0xFA,0x00,0x00,0x18,0x88,0x10,0xFC,0x10,0x88,0x10,0xB8,0x7C,0xA8,0x12,0xAA,0x13,0xFF,0x12,0x02,0x12,0xFA,0x1E,0x8A,0x72,0x8A,0x22,0xFA,0x02,0x02,0x02,0x0E,0x02,0x04},
{0xB3,0xFB,0x00,0x00,0x18,0xC4,0x10,0xBE,0x10,0x84,0x11,0x04,0x7D,0x7F,0x13,0x00,0x15,0x24,0x11,0x3E,0x11,0x48,0x1D,0x0A,0x71,0x7F,0x21,0x08,0x01,0x14,0x01,0x14,0x01,0x23},
{0xB3,0xFC,0x00,0x00,0x00,0x80,0x1F,0xFC,0x00,0x80,0x0F,0xF8,0x20,0x02,0x3F,0xFF,0x40,0x02,0x4F,0xF8,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x02,0x22,0x7F,0xFF},
{0xB3,0xFD,0x00,0x00,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x20,0x02,0x3F,0xFF,0x22,0x22,0x42,0x20,0x1E,0x3C,0x10,0x04,0x10,0x04,0x1E,0x3C,0x02,0x20,0x02,0x24,0x7F,0xFE},
{0xB3,0xFE,0x00,0x00,0x0D,0xE0,0x08,0x10,0x17,0xEC,0x62,0x43,0x1F,0xF8,0x12,0x48,0x1C,0x38,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x01,0x02,0x7F,0xFF,0x06,0x60,0x78,0x1E},
{0xB4,0x40,0x00,0x00,0x30,0x12,0x21,0xFF,0x24,0x00,0x7E,0x7C,0x24,0x44,0x24,0x7C,0x25,0x01,0x25,0xFF,0x65,0x01,0x5A,0xFE,0x08,0x10,0x14,0x10,0x14,0x10,0x22,0x70,0x40,0x20},
{0xB4,0x41,0x00,0x00,0x31,0x02,0x21,0xFF,0x25,0x22,0x7D,0x22,0x25,0xFE,0x25,0x00,0x25,0x42,0x25,0x7F,0x65,0x42,0x59,0x7E,0x09,0x42,0x15,0x7E,0x15,0x42,0x22,0x7E,0x42,0x42},
{0xB4,0x42,0x00,0x00,0x30,0x02,0x21,0xFF,0x24,0x12,0x7E,0xD4,0x24,0x9E,0x24,0xD0,0x25,0x3F,0x26,0x00,0x64,0xFC,0x58,0x84,0x08,0xFC,0x14,0x84,0x14,0xFC,0x22,0x84,0x40,0x8C},
{0xB4,0x43,0x00,0x00,0x30,0xCC,0x20,0x88,0x25,0xFE,0x7C,0x88,0x24,0xF8,0x24,0x88,0x24,0xF8,0x24,0xA8,0x64,0x22,0x5B,0xFF,0x10,0x60,0x28,0xB0,0x24,0xAC,0x45,0x23,0x00,0x20},
{0xB4,0x44,0x00,0x00,0x30,0x1E,0x20,0xE4,0x24,0x93,0x7D,0x09,0x25,0xFE,0x24,0x20,0x25,0xFF,0x24,0x40,0x64,0x7E,0x58,0x42,0x08,0xA4,0x14,0x94,0x15,0x18,0x20,0x24,0x40,0xC3},
{0xB4,0x45,0x00,0x00,0x30,0x88,0x20,0xFC,0x24,0x88,0x7E,0xB8,0x24,0xA8,0x24,0xAA,0x25,0xFF,0x25,0x02,0x65,0x7A,0x59,0x4A,0x09,0x4A,0x15,0x7A,0x15,0x02,0x21,0x0E,0x41,0x04},
{0xB4,0x46,0x00,0x00,0x18,0x18,0x04,0x22,0x7F,0xFF,0x08,0x10,0x33,0x66,0x0C,0x18,0x7F,0x7E,0x01,0x02,0x1F,0xF8,0x00,0x22,0x7F,0xFF,0x00,0x80,0x00,0x80,0x03,0x80,0x01,0x00},
{0xB4,0x47,0x00,0x00,0x3F,0xFC,0x20,0x04,0x3F,0xFC,0x20,0x04,0x23,0xF0,0x20,0x22,0x3F,0xFF,0x20,0x40,0x20,0xC0,0x2F,0x3E,0x22,0x04,0x3F,0xBF,0x42,0x08,0x4E,0x38,0x44,0x10},
{0xB4,0x48,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x42,0x20,0x1F,0xFC,0x02,0x20,0x1F,0xFC,0x02,0x20,0x7F,0xFF,0x04,0x10,0x1B,0x8C,0x60,0x33,0x01,0xC0,0x0E,0x00},
{0xB4,0x49,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x00,0x00,0x3F,0xFC,0x21,0x04,0x3F,0xFC,0x21,0x04,0x3F,0xFC},
{0xB4,0x4A,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x09,0x10,0x0F,0xF0,0x09,0x10,0x0F,0xF0,0x21,0x04,0x7F,0xFE,0x21,0x84,0x2F,0x44,0x24,0x5C,0x20,0x08},
{0xB4,0x4B,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x43,0x14,0x12,0x10,0x12,0x7C,0x1E,0x10,0x12,0xFE,0x02,0x30,0x3E,0x58,0x12,0x54,0x12,0x93,0x22,0x10,0x02,0x10},
{0xB4,0x4C,0x00,0x00,0x0D,0xE0,0x08,0x10,0x17,0xEC,0x62,0x43,0x1F,0xF8,0x12,0x48,0x1C,0x38,0x10,0x08,0x1F,0xF8,0x10,0x0A,0x7F,0xFF,0x08,0x10,0x06,0x10,0x02,0x70,0x00,0x20},
{0xB4,0x4D,0x00,0x00,0x0F,0xF8,0x00,0x08,0x3F,0xFE,0x00,0x08,0x0F,0xF8,0x00,0x00,0x3E,0xFC,0x08,0x84,0x3E,0xFC,0x00,0x10,0x7F,0xFF,0x08,0x10,0x06,0x10,0x02,0x70,0x00,0x20},
{0xB4,0x4E,0x00,0x00,0x0C,0x34,0x09,0x22,0x7F,0xA2,0x00,0x20,0x3E,0xFF,0x22,0x20,0x22,0x2C,0x3E,0x28,0x08,0x28,0x2A,0x28,0x29,0x2A,0x49,0x4A,0x08,0x4A,0x38,0x4B,0x10,0x86},
{0xB4,0x4F,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x10,0x04,0x23,0x30,0x22,0x22,0x7F,0x3F,0x22,0x42,0x22,0x54,0x3E,0x90,0x22,0x10,0x22,0x28,0x3E,0x28,0x22,0x44,0x21,0x83},
{0xB4,0x50,0x00,0x00,0x31,0x8C,0x21,0x08,0x3F,0xF8,0x00,0x00,0x3F,0xF8,0x20,0x08,0x20,0x48,0x2F,0xE8,0x21,0x08,0x2F,0xE8,0x29,0x28,0x2F,0xE9,0x21,0x45,0x5F,0xB5,0x48,0x13},
{0xB4,0x51,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x00,0x28,0x20,0x24,0x3F,0xFF,0x20,0x20,0x2F,0xA0,0x22,0x16,0x3F,0xD4,0x24,0x94,0x28,0x88,0x47,0x09,0x44,0x95,0x58,0xA3},
{0xB4,0x52,0x00,0x00,0x0E,0x68,0x78,0x44,0x09,0xFE,0x08,0x40,0x7E,0x58,0x08,0x92,0x18,0x93,0x19,0x0E,0x2C,0x00,0x2A,0x18,0x4A,0xD3,0x08,0x92,0x08,0x92,0x08,0xFE,0x08,0x82},
{0xB4,0x53,0x00,0x00,0x3E,0x7C,0x22,0x44,0x3E,0x7C,0x21,0x42,0x21,0x42,0x1E,0x3C,0x00,0x00,0x04,0x14,0x3F,0xFE,0x04,0x10,0x04,0x12,0x7F,0xFF,0x00,0x00,0x0C,0x38,0x70,0x06},
{0xB4,0x54,0x00,0x00,0x18,0x02,0x13,0xFF,0x50,0x00,0x7E,0xFC,0x54,0x84,0x54,0x84,0x54,0xFC,0x54,0x00,0x55,0xFF,0x55,0x11,0x5D,0xFF,0x55,0x11,0x11,0x11,0x11,0xFF,0x11,0x01},
{0xB4,0x55,0x00,0x00,0x18,0x00,0x11,0xFF,0x11,0x01,0x7D,0x7D,0x55,0x01,0x55,0x7D,0x54,0x00,0x54,0xFE,0x54,0x82,0x54,0xFE,0x5C,0x82,0x54,0xFE,0x10,0x82,0x10,0xFE,0x10,0x82},
{0xB4,0x56,0x00,0x00,0x18,0x30,0x10,0x22,0x54,0x3F,0x7E,0x20,0x55,0xFE,0x55,0x02,0x55,0xFE,0x55,0x02,0x55,0xFE,0x55,0x02,0x5D,0xFE,0x55,0x02,0x10,0xC8,0x11,0x06,0x16,0x02},
{0xB4,0x57,0x00,0x00,0x18,0x20,0x10,0xFC,0x54,0x24,0x7D,0xFF,0x54,0x00,0x54,0xFC,0x54,0x84,0x54,0xFC,0x54,0x10,0x5D,0xFE,0x54,0x90,0x10,0x92,0x13,0xFF,0x10,0x10,0x10,0x10},
{0xB4,0x58,0x00,0x00,0x0C,0xCC,0x08,0x88,0x32,0xB2,0x14,0x94,0x08,0x88,0x14,0x94,0x7A,0xBA,0x00,0x8A,0x7F,0xFF,0x08,0x80,0x14,0x46,0x12,0x28,0x22,0x11,0x40,0x69,0x03,0x87},
{0xB4,0x59,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x22,0x00,0x2F,0xBE,0x28,0xA2,0x2F,0xA4,0x28,0xA8,0x2F,0xA4,0x28,0x24,0x29,0x22,0x29,0xA2,0x5E,0xBC,0x48,0x28,0x40,0x20},
{0xB4,0x5A,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x2F,0x83,0x28,0x9A,0x2F,0x92,0x28,0x92,0x2F,0x92,0x28,0x92,0x2F,0x92,0x20,0x02,0x4D,0x12,0x48,0x8E,0x50,0x84},
{0xB4,0x5B,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x00,0x23,0x22,0x22,0x3F,0x2F,0xA2,0x22,0x22,0x27,0x3E,0x26,0xA2,0x2A,0xBE,0x2A,0x22,0x52,0x22,0x42,0x3E,0x42,0x22},
{0xB4,0x5C,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x20,0x00,0x2F,0x9C,0x28,0x95,0x2F,0x97,0x28,0xA0,0x2F,0x82,0x28,0x3F,0x2A,0x12,0x29,0x14,0x49,0x88,0x4E,0x94,0x4C,0x63},
{0xB4,0x5D,0x00,0x00,0x08,0x02,0x7D,0xDF,0x08,0x82,0x29,0xCA,0x39,0x4E,0x29,0x4A,0x21,0x48,0x25,0xC9,0x7D,0x5F,0x45,0x51,0x05,0x41,0x05,0xC1,0x49,0x52,0x38,0x0E,0x10,0x04},
{0xB4,0x5E,0x00,0x00,0x06,0x06,0x04,0x04,0x7F,0x88,0x04,0x10,0x3F,0x60,0x00,0x06,0x3F,0x04,0x21,0x08,0x21,0x10,0x3F,0x63,0x41,0x02,0x32,0x04,0x13,0x98,0x7C,0x60,0x20,0x00},
{0xB4,0x5F,0x00,0x00,0x19,0x04,0x11,0xFE,0x21,0x00,0x4A,0xFC,0x08,0x84,0x10,0xFC,0x30,0x84,0x50,0xFC,0x10,0x40,0x10,0x7E,0x11,0x84,0x16,0x48,0x10,0x30,0x10,0xC8,0x13,0x07},
{0xB4,0x60,0x00,0x00,0x18,0x0C,0x12,0x1E,0x23,0xF0,0x4E,0x10,0x0A,0x12,0x13,0xFF,0x32,0x10,0x52,0xFE,0x12,0x82,0x12,0xFE,0x12,0x82,0x12,0xFE,0x14,0x82,0x14,0xFE,0x14,0x82},
{0xB4,0x61,0x00,0x00,0x18,0x30,0x11,0x44,0x21,0xFE,0x4D,0x04,0x09,0xFC,0x11,0x04,0x31,0xFC,0x50,0x00,0x13,0xFE,0x10,0x20,0x10,0x28,0x11,0xFC,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xB4,0x62,0x00,0x00,0x00,0xD8,0x00,0x84,0x7F,0xFF,0x00,0x40,0x3F,0x4C,0x21,0x28,0x3F,0x11,0x00,0x2D,0x0F,0x23,0x70,0x40,0x0D,0x04,0x28,0xD3,0x28,0x51,0x48,0x18,0x07,0xF0},
{0xB4,0x63,0x00,0x00,0x00,0x04,0x7F,0xFE,0x02,0x40,0x3E,0x7C,0x20,0x04,0x20,0x04,0x3E,0x7C,0x02,0x40,0x7F,0xFF,0x00,0x00,0x0D,0x04,0x28,0xD3,0x28,0x51,0x48,0x18,0x07,0xF0},
{0xB4,0x64,0x00,0x00,0x03,0x60,0x02,0x40,0x7E,0x7E,0x02,0x40,0x3E,0x7C,0x02,0x40,0x7E,0x7E,0x44,0x40,0x08,0x40,0x01,0x00,0x0C,0xC4,0x28,0x53,0x28,0x11,0x48,0x18,0x07,0xF0},
{0xB4,0x65,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x20,0x82,0x22,0x42,0x2A,0x52,0x2A,0x0A,0x32,0x2A,0x21,0xE2,0x20,0x0E,0x20,0x04},
{0xB4,0x66,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x88,0x7F,0xF6,0x20,0x02,0x0D,0x00,0x28,0xD2,0x28,0x53,0x48,0x19,0x07,0xF0},
{0xB4,0x67,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x08,0x19,0x0A,0x55,0x7F,0x55,0x08,0x51,0x2A,0x11,0x2A,0x11,0x55,0x11,0x14,0x11,0x22,0x11,0x22,0x11,0x41,0x11,0xFF,0x11,0x00},
{0xB4,0x68,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x4A,0x19,0x4A,0x55,0xFE,0x55,0x02,0x50,0x20,0x13,0xFF,0x10,0x40,0x10,0x44,0x10,0xFE,0x10,0x84,0x11,0x04,0x11,0x38,0x12,0x10},
{0xB4,0x69,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x19,0xFC,0x55,0x04,0x55,0xFC,0x51,0x04,0x10,0x30,0x12,0x24,0x13,0xFE,0x12,0x20,0x15,0xFC,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xB4,0x6A,0x00,0x00,0x1B,0xDE,0x12,0x52,0x12,0x52,0x1B,0xDE,0x54,0x52,0x54,0x00,0x51,0xFC,0x10,0x00,0x17,0xFF,0x10,0x80,0x11,0xFC,0x11,0x04,0x10,0x04,0x10,0x78,0x10,0x10},
{0xB4,0x6B,0x00,0x00,0x18,0x60,0x10,0x42,0x13,0xFF,0x18,0x80,0x55,0x7C,0x55,0x10,0x52,0xFF,0x14,0x00,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0x0C},
{0xB4,0x6C,0x00,0x00,0x1A,0x21,0x13,0xF1,0x12,0x21,0x13,0xE9,0x5A,0x29,0x56,0x29,0x53,0xE9,0x12,0x29,0x12,0x29,0x13,0xE9,0x12,0x21,0x10,0x01,0x13,0x49,0x12,0x27,0x14,0x22},
{0xB4,0x6D,0x00,0x00,0x18,0x30,0x11,0xA3,0x11,0x22,0x19,0xFE,0x55,0x02,0x54,0x00,0x51,0xFF,0x10,0x10,0x11,0x22,0x11,0xFF,0x11,0x52,0x11,0x52,0x11,0x52,0x11,0x5E,0x11,0x04},
{0xB4,0x6E,0x00,0x00,0x19,0x82,0x11,0x1F,0x13,0xC4,0x12,0x54,0x5B,0xD4,0x56,0x54,0x53,0xDF,0x12,0x44,0x12,0x0C,0x13,0xCC,0x12,0x14,0x13,0xD4,0x12,0x15,0x12,0x15,0x10,0x23},
{0xB4,0x6F,0x00,0x00,0x18,0xDB,0x10,0x92,0x13,0x6C,0x19,0x24,0x54,0x92,0x54,0xB2,0x50,0x40,0x11,0xFF,0x11,0x05,0x11,0x69,0x11,0x11,0x11,0x2D,0x11,0x45,0x11,0xFF,0x11,0x01},
{0xB4,0x70,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x00,0x1A,0xFC,0x54,0x84,0x54,0xFC,0x50,0x84,0x10,0xFC,0x10,0x40,0x10,0x7E,0x10,0x84,0x13,0x48,0x10,0x30,0x10,0xC8,0x13,0x07},
{0xB4,0x71,0x00,0x00,0x18,0x30,0x11,0x44,0x11,0xFE,0x19,0x04,0x55,0xFC,0x55,0x04,0x51,0xFC,0x11,0x04,0x10,0x00,0x13,0xFE,0x10,0x20,0x11,0xFC,0x10,0x20,0x10,0x22,0x17,0xFF},
{0xB4,0x72,0x00,0x00,0x19,0xE0,0x10,0x20,0x10,0x50,0x19,0x8C,0x56,0xF3,0x54,0x00,0x53,0xC6,0x12,0x54,0x13,0xD4,0x12,0x54,0x13,0xD4,0x12,0x54,0x12,0x44,0x12,0xDC,0x12,0x48},
{0xB4,0x73,0x00,0x00,0x19,0xCC,0x17,0x08,0x11,0x08,0x59,0x0B,0x57,0xCA,0x51,0x2C,0x13,0x28,0x13,0x08,0x15,0x88,0x15,0x54,0x19,0x14,0x11,0x14,0x11,0x22,0x11,0x22,0x11,0x41},
{0xB4,0x74,0x00,0x00,0x19,0x08,0x11,0xFC,0x11,0x08,0x19,0xF8,0x55,0x08,0x55,0xF8,0x11,0x42,0x10,0xFF,0x11,0x22,0x17,0x32,0x11,0x52,0x11,0xFA,0x11,0x02,0x10,0x1C,0x10,0x08},
{0xB4,0x75,0x00,0x00,0x0C,0x34,0x08,0x24,0x7F,0x22,0x08,0x20,0x3F,0x2F,0x21,0xF0,0x3F,0x26,0x21,0x24,0x3F,0x24,0x29,0x18,0x08,0x11,0x7F,0x29,0x08,0x45,0x09,0x83,0x08,0x01},
{0xB4,0x76,0x00,0x00,0x20,0x7E,0x3F,0x80,0x20,0x00,0x3F,0xFC,0x20,0x04,0x3F,0xFC,0x20,0x00,0x21,0x20,0x2F,0x3E,0x21,0x20,0x2F,0x3E,0x21,0x20,0x5F,0x3F,0x52,0x20,0x44,0x20},
{0xB4,0x77,0x00,0x00,0x14,0x03,0x1F,0x9A,0x24,0x12,0x7F,0xD2,0x04,0x12,0x3F,0x82,0x24,0x8E,0x07,0xF4,0x00,0x80,0x3F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x80,0x03,0x80,0x01,0x00},
{0xB4,0x78,0x00,0x00,0x0C,0xCC,0x22,0x90,0x3F,0xFF,0x24,0x12,0x47,0xF4,0x00,0x00,0x00,0xF8,0x1F,0x80,0x00,0x80,0x3F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x80,0x07,0x80,0x01,0x00},
{0xB4,0x79,0x00,0x00,0x18,0xCC,0x10,0x88,0x13,0xFF,0x7C,0x88,0x10,0x88,0x12,0x02,0x17,0xFF,0x1A,0x22,0x72,0x22,0x53,0xFE,0x12,0x22,0x12,0x22,0x13,0xFE,0x72,0x02,0x20,0x00},
{0xB4,0x7A,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x20,0x11,0xFE,0x11,0xA2,0x15,0x6E,0x19,0x32,0x71,0xFE,0x50,0x60,0x10,0xB0,0x10,0xAC,0x11,0x23,0x72,0x20,0x20,0x20},
{0xB4,0x7B,0x00,0x00,0x19,0x98,0x11,0x10,0x11,0x13,0x7D,0xDC,0x11,0x11,0x13,0xD1,0x11,0x0F,0x1C,0x30,0x71,0x44,0x51,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xB4,0x7C,0x00,0x00,0x18,0x04,0x11,0xFE,0x10,0x48,0x7C,0x32,0x11,0xFF,0x10,0x32,0x10,0x54,0x15,0x90,0x18,0x70,0x70,0x22,0x53,0xFF,0x10,0x60,0x10,0xB8,0x73,0x27,0x20,0x20},
{0xB4,0x7D,0x00,0x00,0x18,0x4C,0x13,0xE8,0x10,0x53,0x7D,0x4A,0x10,0x84,0x11,0x14,0x15,0xFA,0x1A,0x21,0x74,0x24,0x53,0xFE,0x10,0x20,0x10,0x50,0x10,0x4C,0x70,0x86,0x23,0x02},
{0xB4,0x7E,0x00,0x00,0x18,0x30,0x10,0x20,0x11,0xFE,0x7C,0x20,0x10,0xFC,0x10,0x48,0x13,0xFF,0x1C,0x84,0x71,0x7A,0x51,0x22,0x16,0xFD,0x10,0x50,0x10,0x48,0x70,0x86,0x23,0x02},
{0xB4,0xA1,0x00,0x00,0x18,0x1E,0x11,0xF0,0x10,0x10,0x7C,0x12,0x11,0xFF,0x10,0x10,0x14,0x50,0x19,0x97,0x71,0x11,0x51,0x11,0x11,0xD7,0x11,0x11,0x11,0x11,0x71,0xFF,0x21,0x01},
{0xB4,0xA2,0x00,0x00,0x18,0x30,0x11,0xA3,0x11,0x22,0x7D,0xFE,0x11,0x02,0x10,0x00,0x15,0xFF,0x18,0x10,0x71,0x22,0x51,0xFF,0x11,0x52,0x11,0x52,0x11,0x52,0x71,0x5E,0x21,0x04},
{0xB4,0xA3,0x00,0x00,0x18,0x84,0x10,0xFE,0x10,0x84,0x7C,0xFC,0x10,0x84,0x10,0xFC,0x14,0x00,0x1B,0xFF,0x70,0x20,0x51,0xA4,0x11,0x3E,0x11,0x20,0x12,0xA0,0x72,0x63,0x24,0x3C},
{0xB4,0xA4,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x7D,0xFE,0x11,0x00,0x11,0x7E,0x15,0x14,0x19,0x22,0x71,0x7D,0x51,0x20,0x11,0x08,0x12,0x7E,0x12,0x08,0x72,0x0A,0x24,0xFF},
{0xB4,0xA5,0x00,0x00,0x18,0xFC,0x10,0x84,0x10,0x84,0x7C,0xFC,0x10,0x00,0x13,0xFF,0x10,0x84,0x14,0xFC,0x18,0x84,0x70,0xFC,0x50,0x87,0x10,0x9C,0x13,0xE4,0x71,0x04,0x20,0x04},
{0xB4,0xA6,0x00,0x00,0x19,0x08,0x11,0xFC,0x11,0x08,0x7D,0xF8,0x11,0x08,0x11,0xF8,0x14,0x82,0x19,0xFF,0x72,0x22,0x56,0x52,0x12,0x92,0x13,0xFA,0x12,0x02,0x70,0x1C,0x20,0x08},
{0xB4,0xA7,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x7E,0x24,0x11,0xFE,0x10,0x20,0x15,0xFE,0x19,0x22,0x71,0xFE,0x51,0x22,0x11,0xFE,0x10,0x20,0x17,0xFF,0x70,0x20,0x20,0x20},
{0xB4,0xA8,0x00,0x00,0x18,0x0C,0x10,0x3E,0x13,0xE0,0x7C,0x20,0x10,0x22,0x13,0xFF,0x11,0x24,0x15,0x24,0x1B,0xFF,0x71,0x24,0x51,0x24,0x13,0xFE,0x10,0x20,0x70,0x22,0x27,0xFF},
{0xB4,0xA9,0x00,0x00,0x18,0x1E,0x11,0xE4,0x11,0x13,0x7D,0x09,0x12,0xFE,0x10,0x40,0x11,0xFF,0x14,0x40,0x18,0x7E,0x70,0xC2,0x50,0xA4,0x11,0x28,0x12,0x18,0x70,0x64,0x21,0x83},
{0xB4,0xAA,0x00,0x00,0x18,0xE6,0x13,0x84,0x10,0x84,0x7C,0x84,0x13,0xE5,0x10,0x95,0x15,0x96,0x19,0x94,0x72,0xC4,0x52,0xAA,0x14,0x8A,0x10,0x8A,0x10,0x91,0x70,0x91,0x20,0xA1},
{0xB4,0xAB,0x00,0x00,0x18,0x40,0x10,0xF8,0x10,0x88,0x7D,0x10,0x13,0xFE,0x11,0x52,0x11,0x52,0x15,0x4E,0x19,0x82,0x71,0x32,0x50,0x20,0x13,0xFF,0x10,0x50,0x70,0x8C,0x23,0x03},
{0xB4,0xAC,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x7D,0xFE,0x11,0x00,0x11,0x11,0x15,0x22,0x19,0x77,0x71,0x22,0x51,0x2A,0x11,0x32,0x11,0x6F,0x12,0x22,0x72,0x42,0x22,0x42},
{0xB4,0xAD,0x00,0x00,0x19,0xF8,0x11,0x08,0x11,0xF8,0x7D,0x08,0x11,0xF8,0x10,0x02,0x17,0xFF,0x18,0x80,0x70,0xFE,0x51,0x4A,0x16,0x4A,0x10,0x92,0x13,0x22,0x70,0xDC,0x20,0x08},
{0xB4,0xAE,0x00,0x00,0x18,0x50,0x10,0x56,0x13,0xD8,0x7C,0x51,0x10,0xD1,0x13,0x4F,0x10,0x00,0x1D,0xFC,0x71,0x04,0x51,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x71,0x1C,0x21,0x08},
{0xB4,0xAF,0x00,0x00,0x04,0x18,0x35,0x10,0x24,0x90,0x24,0x92,0x44,0x5F,0x3F,0xA2,0x20,0xA2,0x2A,0xD2,0x2E,0x94,0x2A,0x94,0x2E,0x88,0x2A,0x94,0x20,0x94,0x23,0xA2,0x21,0x41},
{0xB4,0xB0,0x00,0x00,0x06,0x30,0x04,0x20,0x7F,0xA0,0x00,0x22,0x3F,0x3F,0x21,0x44,0x3F,0x44,0x00,0xA4,0x7F,0x28,0x02,0x18,0x05,0x90,0x7E,0x28,0x44,0x28,0x1C,0x44,0x08,0x83},
{0xB4,0xB1,0x00,0x00,0x02,0x30,0x3F,0x20,0x04,0x20,0x04,0x22,0x7F,0xBF,0x11,0x44,0x1F,0x44,0x11,0xA4,0x11,0x28,0x1F,0x18,0x11,0x10,0x13,0x28,0x7D,0x28,0x21,0x44,0x01,0x83},
{0xB4,0xB2,0x00,0x00,0x1B,0x30,0x12,0x20,0x7F,0xA0,0x12,0x22,0x12,0x3F,0x7F,0xA4,0x00,0x44,0x3F,0xA4,0x21,0x28,0x3F,0x18,0x21,0x10,0x3F,0x28,0x21,0x28,0x27,0x44,0x22,0x83},
{0xB4,0xB3,0x00,0x00,0x08,0xC2,0x7C,0x9F,0x10,0x84,0x13,0xE4,0x10,0x44,0x12,0x44,0x7D,0x44,0x10,0x9F,0x10,0x84,0x15,0x44,0x19,0x44,0x72,0x44,0x22,0x04,0x04,0x04,0x00,0x3F},
{0xB4,0xB4,0x00,0x00,0x03,0x60,0x02,0x44,0x7E,0x7E,0x02,0x40,0x3E,0x7C,0x02,0x40,0x1E,0x7E,0x64,0xC0,0x08,0x82,0x7F,0xFF,0x08,0x10,0x06,0x60,0x01,0x80,0x06,0x70,0x78,0x0F},
{0xB4,0xB5,0x00,0x00,0x19,0x82,0x11,0x27,0x3F,0xB8,0x11,0x20,0x11,0x22,0x1F,0x3F,0x11,0x24,0x1F,0x24,0x11,0x24,0x11,0x24,0x7F,0xA4,0x00,0x24,0x1A,0x44,0x21,0x44,0x40,0x84},
{0xB4,0xB6,0x00,0x00,0x18,0x18,0x04,0x20,0x3F,0xFC,0x02,0x40,0x22,0x4C,0x1A,0x48,0x0A,0x52,0x7F,0xFF,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10},
{0xB4,0xB7,0x00,0x00,0x01,0x80,0x51,0x13,0x71,0x1C,0x57,0xD0,0x51,0x12,0x53,0x1F,0x73,0x92,0x55,0x52,0x55,0x52,0x55,0x12,0x71,0x12,0x51,0x12,0x41,0x12,0x01,0x22,0x01,0x22},
{0xB4,0xB8,0x00,0x00,0x00,0x20,0x4B,0xFE,0x78,0x20,0x49,0xFC,0x48,0x20,0x4F,0xFF,0x78,0x00,0x49,0xFC,0x49,0x24,0x49,0x24,0x79,0xFC,0x49,0x04,0x41,0x04,0x01,0x1C,0x01,0x08},
{0xB4,0xB9,0x00,0x00,0x08,0x10,0x0F,0xF8,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x42,0x42,0x7F,0x7F,0x42,0x42,0x7E,0x7E,0x42,0x42,0x42,0x42,0x7E,0x7E,0x42,0x42},
{0xB4,0xBA,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x80,0x0C,0xB0,0x70,0x8E,0x01,0x80},
{0xB4,0xBB,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x01,0x00,0x3F,0xE6,0x01,0x18,0x7F,0xFF,0x01,0x20,0x07,0xF8,0x1C,0x08,0x67,0xF8,0x04,0x08,0x07,0xF8},
{0xB4,0xBC,0x00,0x00,0x18,0x00,0x11,0x22,0x1F,0xBF,0x64,0x22,0x05,0x22,0x7F,0xA2,0x0A,0x3E,0x09,0xA2,0x10,0x80,0x6F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB4,0xBD,0x00,0x00,0x00,0x30,0x48,0x22,0x7B,0xFF,0x48,0x00,0x49,0xFC,0x49,0x04,0x79,0x04,0x49,0xFC,0x49,0x24,0x48,0x20,0x79,0xA8,0x49,0x26,0x42,0x23,0x04,0xE1,0x00,0x40},
{0xB4,0xBE,0x00,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x08,0x00,0x0F,0x8C,0x11,0x08,0x6A,0x14,0x05,0xA2,0x18,0x7F,0x6F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8},
{0xB4,0xBF,0x00,0x00,0x06,0xE0,0x04,0x10,0x08,0x08,0x1F,0xFC,0x70,0x87,0x14,0x94,0x12,0xA4,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB4,0xC0,0x00,0x00,0x06,0x18,0x04,0x10,0x3F,0x7E,0x04,0x10,0x7F,0x7F,0x0A,0x28,0x09,0x24,0x11,0x43,0x68,0x08,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB4,0xC1,0x00,0x00,0x19,0xA2,0x11,0x3F,0x3F,0xA2,0x11,0x22,0x11,0x22,0x1F,0x3E,0x11,0x22,0x1F,0x22,0x11,0x22,0x11,0x3E,0x7F,0xA2,0x00,0x22,0x1A,0x42,0x11,0x4E,0x21,0x44},
{0xB4,0xC2,0x00,0x00,0x0C,0x22,0x09,0x3F,0x7F,0xA2,0x08,0x22,0x3F,0x3E,0x21,0x22,0x3F,0x22,0x21,0x22,0x3F,0x3E,0x29,0x22,0x08,0x22,0x7F,0xA2,0x08,0x42,0x08,0x4E,0x08,0x84},
{0xB4,0xC3,0x00,0x00,0x0C,0x18,0x08,0x92,0x08,0xFF,0x7E,0x82,0x09,0x7C,0x18,0x44,0x18,0x44,0x2C,0x7C,0x2A,0x44,0x4A,0x40,0x08,0x7E,0x08,0x42,0x08,0x42,0x08,0x7E,0x08,0x42},
{0xB4,0xC4,0x00,0x00,0x0C,0x18,0x08,0x92,0x08,0xFF,0x7E,0x82,0x09,0x04,0x18,0x7C,0x1C,0x00,0x2A,0x04,0x2A,0xFE,0x48,0x10,0x08,0xD4,0x08,0x93,0x09,0x11,0x08,0x70,0x08,0x20},
{0xB4,0xC5,0x00,0x00,0x08,0xD8,0x04,0x90,0x24,0xA2,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x08,0x10,0x0F,0xF0,0x01,0x04,0x7F,0xFE,0x03,0x00,0x0D,0xE0,0x71,0x1E,0x01,0x00},
{0xB4,0xC6,0x00,0x00,0x0C,0x18,0x08,0x12,0x7E,0xFF,0x08,0x10,0x4A,0x92,0x7E,0xFF,0x4A,0x92,0x4E,0x96,0x4A,0x92,0x18,0x30,0x1C,0x38,0x2A,0x54,0x2A,0x53,0x48,0x90,0x08,0x10},
{0xB4,0xC7,0x00,0x00,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x09,0x88,0x06,0xE0,0x38,0x9E,0x00,0x80,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x11,0x84,0x06,0xF0,0x78,0x8E,0x00,0x80},
{0xB4,0xC8,0x00,0x00,0x0C,0x30,0x08,0x24,0x09,0xFE,0x7E,0x50,0x08,0x4C,0x18,0x84,0x1B,0xFF,0x2C,0x04,0x2A,0xF4,0x4A,0x94,0x08,0xF4,0x08,0x94,0x08,0x04,0x08,0x1C,0x08,0x08},
{0xB4,0xC9,0x00,0x00,0x0C,0x18,0x08,0x12,0x09,0xFF,0x7E,0x10,0x08,0xFE,0x18,0x92,0x18,0xFE,0x2C,0x92,0x2A,0xFE,0x4A,0x30,0x08,0x58,0x08,0x54,0x08,0x93,0x09,0x10,0x08,0x10},
{0xB4,0xCA,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0x92,0x7E,0xFE,0x08,0x92,0x18,0xFE,0x18,0x92,0x2C,0x10,0x2B,0xFF,0x4A,0x30,0x08,0x58,0x08,0x54,0x08,0x93,0x09,0x10,0x08,0x10},
{0xB4,0xCB,0x00,0x00,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x01,0x80,0x06,0xF0,0x38,0x8E,0x00,0x80,0x0C,0x0C,0x08,0x08,0x7F,0x7F,0x18,0x18,0x2C,0x2C,0x2A,0x2A,0x4A,0x49,0x08,0x08},
{0xB4,0xCC,0x00,0x00,0x0C,0x28,0x08,0x24,0x08,0x3E,0x7E,0xE0,0x08,0x2C,0x18,0x11,0x1C,0xED,0x2A,0x0B,0x2A,0x24,0x48,0x3E,0x08,0xE0,0x08,0x2C,0x08,0x11,0x08,0x6D,0x09,0x83},
{0xB4,0xCD,0x00,0x00,0x0C,0x12,0x08,0x1F,0x08,0x10,0x7E,0x92,0x08,0xFF,0x18,0x82,0x18,0xFE,0x2C,0x82,0x2A,0xFE,0x4A,0x92,0x08,0x10,0x09,0xFF,0x08,0x10,0x08,0x10,0x08,0x10},
{0xB4,0xCE,0x00,0x00,0x0C,0x18,0x08,0x10,0x09,0xFF,0x7E,0x10,0x08,0xFE,0x18,0x28,0x1D,0xFF,0x2A,0x44,0x2A,0x92,0x49,0x7D,0x08,0x10,0x09,0xFF,0x08,0x10,0x08,0x10,0x08,0x10},
{0xB4,0xCF,0x00,0x00,0x0C,0x10,0x09,0xFF,0x08,0x10,0x7E,0xFE,0x08,0x12,0x19,0xFF,0x1C,0x12,0x2A,0xFE,0x2A,0x20,0x49,0xFF,0x08,0x24,0x08,0xC8,0x08,0x30,0x08,0x4C,0x09,0x82},
{0xB4,0xD0,0x00,0x00,0x0C,0x18,0x08,0x10,0x08,0xFE,0x7E,0x12,0x09,0xFF,0x18,0x12,0x18,0xFE,0x2C,0x10,0x2A,0xD6,0x4A,0x54,0x08,0x38,0x09,0xD4,0x09,0x13,0x08,0x70,0x08,0x20},
{0xB4,0xD1,0x00,0x00,0x0C,0x66,0x08,0x44,0x09,0xFF,0x7E,0x44,0x08,0x44,0x18,0x7C,0x18,0x44,0x2C,0x7C,0x2A,0x44,0x4A,0x44,0x09,0xFF,0x08,0x00,0x08,0x68,0x08,0x46,0x09,0x82},
{0xB4,0xD2,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0x82,0x7E,0xFE,0x08,0x82,0x18,0xFE,0x18,0x82,0x2C,0x00,0x2A,0xCC,0x4A,0x88,0x08,0xEB,0x08,0x8C,0x08,0xA9,0x09,0xC9,0x08,0x87},
{0xB4,0xD3,0x00,0x00,0x0C,0x0C,0x08,0x08,0x08,0xFF,0x7E,0x08,0x08,0x2A,0x18,0xBF,0x18,0xA2,0x2C,0xBE,0x2A,0xA2,0x4A,0xBE,0x08,0xA2,0x08,0xBE,0x08,0x80,0x08,0xFF,0x08,0x80},
{0xB4,0xD4,0x00,0x00,0x18,0xC0,0x10,0x80,0x10,0xEF,0x7C,0x89,0x10,0x89,0x33,0xE9,0x38,0x8A,0x54,0x8A,0x52,0xC4,0x52,0xA4,0x14,0xA4,0x10,0x8A,0x10,0x8A,0x13,0x91,0x11,0x21},
{0xB4,0xD5,0x00,0x00,0x0C,0x6C,0x08,0x48,0x08,0x92,0x7E,0xFF,0x09,0x90,0x1A,0x94,0x1C,0xFE,0x2A,0x90,0x2A,0x94,0x48,0xFE,0x08,0x90,0x08,0x90,0x08,0x92,0x08,0xFF,0x08,0x80},
{0xB4,0xD6,0x00,0x00,0x0C,0x18,0x08,0xA2,0x08,0xFF,0x7E,0x82,0x08,0xFE,0x18,0x82,0x1C,0xFE,0x2A,0x10,0x29,0x11,0x49,0xFF,0x09,0x11,0x09,0x11,0x09,0x17,0x09,0x12,0x08,0x10},
{0xB4,0xD7,0x00,0x00,0x19,0x29,0x11,0xEF,0x11,0x29,0x7D,0x29,0x11,0xEF,0x31,0x29,0x31,0x29,0x59,0x29,0x55,0xEF,0x55,0x29,0x11,0x29,0x11,0x29,0x12,0x29,0x12,0xD7,0x14,0x52},
{0xB4,0xD8,0x00,0x00,0x0C,0x30,0x08,0x20,0x08,0xFB,0x7E,0x22,0x08,0x24,0x19,0xFF,0x1C,0x10,0x2A,0x28,0x2A,0x44,0x48,0xFC,0x09,0x84,0x0A,0xFC,0x08,0x84,0x08,0xFC,0x08,0x84},
{0xB4,0xD9,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x06,0xE0,0x08,0x18,0x17,0xF4,0x62,0x13,0x04,0x70,0x18,0x20,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB4,0xDA,0x00,0x00,0x06,0x30,0x04,0x20,0x7F,0xA2,0x04,0x3F,0x3F,0x42,0x00,0x44,0x3E,0x98,0x00,0x10,0x7F,0x90,0x04,0x10,0x36,0x28,0x25,0x28,0x45,0x44,0x1C,0x44,0x08,0x83},
{0xB4,0xDB,0x00,0x00,0x19,0xB0,0x11,0x20,0x7F,0xA2,0x11,0x3F,0x1F,0x42,0x11,0x44,0x1F,0x98,0x11,0x10,0x11,0x10,0x7F,0x90,0x00,0x28,0x1A,0x28,0x11,0x44,0x21,0x44,0x40,0x83},
{0xB4,0xDC,0x00,0x00,0x0C,0x30,0x0A,0x20,0x13,0x22,0x11,0x3F,0x3E,0x42,0x48,0x44,0x08,0x98,0x7F,0x10,0x08,0x10,0x4A,0x30,0x2C,0x28,0x29,0x48,0x0E,0x44,0x78,0x84,0x21,0x03},
{0xB4,0xDD,0x00,0x00,0x04,0x68,0x7E,0x44,0x20,0x5E,0x25,0xE0,0x3E,0x2C,0x24,0x31,0x25,0xCD,0x54,0x13,0x48,0x48,0x08,0x5E,0x09,0xE0,0x10,0x2C,0x10,0x11,0x20,0x6D,0x41,0x83},
{0xB4,0xDE,0x00,0x00,0x02,0x0C,0x7F,0x08,0x10,0xFF,0x10,0x08,0x12,0x2A,0x1E,0xBF,0x12,0xA2,0x2A,0xBE,0x2A,0xA2,0x44,0xBE,0x04,0xA2,0x08,0xBE,0x08,0x80,0x10,0xFF,0x20,0x80},
{0xB4,0xDF,0x00,0x00,0x0C,0x24,0x08,0x3E,0x7F,0x24,0x08,0x24,0x3E,0x25,0x00,0x43,0x7F,0x40,0x41,0x02,0x3E,0x7F,0x00,0x22,0x3E,0x14,0x22,0x94,0x23,0x08,0x46,0x34,0x42,0xC3},
{0xB4,0xE0,0x00,0x00,0x0C,0x18,0x1E,0x52,0x70,0x54,0x10,0xA8,0x14,0x24,0x1E,0xC2,0x70,0x18,0x10,0x52,0x14,0x54,0x1E,0x90,0x70,0x28,0x10,0x25,0x10,0xC5,0x10,0x01,0x0F,0xFF},
{0xB4,0xE1,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF8,0x00,0x00,0x3F,0xF8,0x00,0x08,0x0A,0x68,0x32,0x88,0x05,0x08,0x38,0xE8,0x0A,0x45,0x32,0x85,0x05,0x03,0x38,0xF1},
{0xB4,0xE2,0x00,0x00,0x10,0x00,0x1F,0xFC,0x20,0x00,0x4F,0xF8,0x00,0x00,0x3F,0xF8,0x04,0x08,0x0F,0xC8,0x08,0x88,0x3F,0xE8,0x02,0x08,0x3B,0x65,0x06,0x85,0x3A,0x63,0x06,0x21},
{0xB4,0xE3,0x00,0x00,0x08,0x00,0x0F,0xFC,0x10,0x00,0x6F,0xF8,0x00,0x00,0x3F,0xF8,0x00,0x08,0x3F,0xE8,0x05,0x08,0x3D,0xE8,0x20,0x28,0x3D,0xE5,0x05,0x05,0x7F,0xF3,0x00,0x01},
{0xB4,0xE4,0x00,0x00,0x20,0xCC,0x10,0x88,0x13,0xFE,0x40,0x88,0x28,0x8A,0x2F,0xFF,0x09,0x04,0x11,0x04,0x12,0xFA,0x62,0x8A,0x24,0x89,0x28,0xF8,0x60,0x82,0x60,0x83,0x20,0x7E},
{0xB4,0xE5,0x00,0x00,0x21,0x98,0x11,0x10,0x11,0x12,0x47,0xDF,0x22,0x20,0x2A,0x22,0x0A,0x5F,0x13,0xC2,0x12,0x44,0x62,0x5F,0x22,0x44,0x22,0x44,0x64,0x44,0x65,0xDC,0x28,0x88},
{0xB4,0xE6,0x00,0x00,0x22,0x06,0x11,0x84,0x10,0x88,0x47,0xFF,0x20,0x00,0x2A,0x23,0x0B,0xEA,0x12,0x2A,0x13,0xEA,0x62,0x2A,0x23,0xEA,0x22,0x2A,0x62,0x22,0x62,0xEE,0x22,0x44},
{0xB4,0xE7,0x00,0x00,0x20,0x30,0x14,0x22,0x17,0xFF,0x44,0x88,0x27,0xFF,0x24,0x88,0x0C,0xF8,0x14,0x88,0x14,0x04,0x65,0xFE,0x24,0x84,0x24,0x48,0x64,0x30,0x68,0x4C,0x29,0x83},
{0xB4,0xE8,0x00,0x00,0x20,0x30,0x12,0x22,0x13,0xFF,0x02,0x02,0x45,0xFC,0x20,0x00,0x29,0x04,0x09,0xFE,0x11,0x04,0x11,0xFC,0x61,0x04,0x21,0xFC,0x21,0x04,0x60,0x02,0x27,0xFF},
{0xB4,0xE9,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x48,0x42,0x32,0x2B,0xFF,0x2A,0x22,0x0B,0xFE,0x12,0x22,0x13,0xFE,0x62,0x22,0x20,0x40,0x27,0xFF,0x60,0x42,0x61,0x82,0x26,0x1C},
{0xB4,0xEA,0x00,0x00,0x20,0x60,0x10,0x40,0x17,0xFE,0x40,0x40,0x23,0xFC,0x28,0x90,0x0F,0xFF,0x11,0x08,0x12,0x04,0x6D,0xFB,0x20,0x40,0x27,0xFE,0x60,0x90,0x61,0x0C,0x26,0x04},
{0xB4,0xEB,0x00,0x00,0x21,0x04,0x19,0xFE,0x41,0x00,0x25,0xFC,0x29,0x04,0x09,0xFC,0x71,0x00,0x11,0xFE,0x11,0x00,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB4,0xEC,0x00,0x00,0x24,0x04,0x17,0xFE,0x14,0x04,0x47,0xFC,0x24,0x00,0x2D,0xFE,0x0C,0x28,0x14,0x44,0x15,0xFA,0x64,0x82,0x24,0x20,0x25,0xFE,0x68,0x20,0x68,0x22,0x2B,0xFF},
{0xB4,0xED,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x60,0x28,0xB0,0x29,0x2C,0x16,0x23,0x10,0x00,0x11,0xFC,0x61,0x04,0x21,0xFC,0x21,0x04,0x61,0xFC,0x60,0x00,0x27,0xFF},
{0xB4,0xEE,0x00,0x00,0x20,0x34,0x10,0x22,0x14,0x20,0x47,0xFF,0x24,0x10,0x2D,0xD0,0x0C,0x16,0x15,0xD4,0x15,0x54,0x65,0x48,0x25,0xC8,0x24,0x15,0x64,0x25,0x68,0xC3,0x28,0x01},
{0xB4,0xEF,0x00,0x00,0x21,0x8C,0x11,0x08,0x17,0xFE,0x41,0x08,0x25,0xF8,0x29,0x08,0x09,0xF8,0x11,0x0A,0x17,0xFF,0x62,0x90,0x22,0x92,0x23,0x0E,0x62,0x00,0x63,0xFF,0x22,0x00},
{0xB4,0xF0,0x00,0x00,0x21,0x80,0x11,0x12,0x11,0x1F,0x47,0xD2,0x21,0x12,0x29,0x1E,0x0B,0x12,0x13,0x92,0x15,0x52,0x65,0x5E,0x29,0x12,0x21,0x12,0x61,0x12,0x61,0x1E,0x21,0x12},
{0xB4,0xF1,0x00,0x00,0x41,0x8C,0x21,0x08,0x2F,0xE8,0x01,0x09,0x49,0x3F,0x2F,0xE9,0x28,0x29,0x17,0xC9,0x10,0x89,0x61,0x29,0x2F,0xC9,0x25,0x11,0x61,0x11,0x67,0x17,0x22,0x22},
{0xB4,0xF2,0x00,0x00,0x21,0x92,0x11,0x1F,0x11,0x12,0x47,0xD2,0x21,0x1E,0x29,0x12,0x09,0x12,0x17,0xD2,0x14,0x5E,0x64,0x52,0x27,0xD2,0x24,0x52,0x60,0x22,0x60,0x2E,0x20,0x44},
{0xB4,0xF3,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x50,0x42,0x52,0x23,0xFF,0x2A,0x52,0x0B,0x9E,0x12,0x02,0x13,0xFE,0x62,0x02,0x20,0x24,0x23,0xFE,0x60,0x20,0x60,0x22,0x27,0xFF},
{0xB4,0xF4,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x22,0x43,0xFE,0x22,0x22,0x2B,0xFE,0x0A,0x02,0x11,0xFC,0x11,0x04,0x61,0xFC,0x21,0x04,0x21,0xFC,0x61,0x04,0x61,0x1C,0x21,0x08},
{0xB4,0xF5,0x00,0x00,0x21,0x08,0x11,0xFC,0x11,0x08,0x45,0x48,0x25,0x78,0x29,0x48,0x09,0x4A,0x17,0xFF,0x14,0x02,0x64,0xF2,0x24,0x92,0x24,0xF2,0x64,0x92,0x64,0x0E,0x24,0x04},
{0xB4,0xF6,0x00,0x00,0x21,0xF8,0x11,0x08,0x11,0xF8,0x45,0x08,0x25,0xF8,0x28,0x02,0x0F,0xFF,0x11,0x00,0x11,0xFE,0x62,0x2A,0x2C,0x4A,0x21,0x92,0x66,0x22,0x60,0xDC,0x20,0x08},
{0xB4,0xF7,0x00,0x00,0x21,0x08,0x11,0xFC,0x11,0x08,0x45,0xF8,0x25,0x08,0x29,0xF8,0x08,0x82,0x11,0xFF,0x12,0x22,0x66,0x52,0x2A,0x8A,0x23,0xFA,0x62,0x02,0x60,0x1C,0x20,0x08},
{0xB4,0xF8,0x00,0x00,0x20,0x30,0x11,0xA3,0x11,0x22,0x45,0xFE,0x25,0x02,0x28,0x00,0x0B,0xFF,0x10,0x20,0x12,0x42,0x63,0xFF,0x22,0x52,0x22,0x52,0x62,0x52,0x62,0x5E,0x22,0x04},
{0xB4,0xF9,0x00,0x00,0x24,0x8C,0x17,0x88,0x14,0x88,0x44,0xAA,0x27,0xA9,0x24,0xC9,0x0C,0x88,0x17,0xBB,0x14,0x92,0x64,0x84,0x27,0x84,0x64,0x88,0x60,0x10,0x20,0x60,0x01,0x80},
{0xB4,0xFA,0x00,0x00,0x24,0x43,0x17,0xC2,0x14,0x5A,0x44,0x52,0x27,0xD2,0x24,0x52,0x0C,0x52,0x17,0xD2,0x14,0x52,0x64,0x52,0x27,0xD2,0x24,0x42,0x62,0x82,0x64,0x4E,0x28,0x44},
{0xB4,0xFB,0x00,0x00,0x21,0xC2,0x17,0x1F,0x11,0x04,0x41,0x04,0x27,0xDF,0x29,0x04,0x09,0x04,0x11,0x5F,0x11,0x84,0x67,0x04,0x25,0x3F,0x21,0x04,0x62,0x04,0x62,0x04,0x24,0x04},
{0xB4,0xFC,0x00,0x00,0x20,0x20,0x11,0xF0,0x10,0x60,0x41,0x9C,0x26,0xF3,0x28,0x00,0x0B,0xC3,0x12,0x5A,0x13,0xD2,0x62,0x52,0x23,0xD2,0x22,0x52,0x62,0x42,0x62,0x4E,0x22,0xC4},
{0xB4,0xFD,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x02,0x44,0x24,0x21,0xFC,0x28,0x20,0x09,0xFC,0x11,0x24,0x11,0xFC,0x61,0x24,0x21,0xFC,0x20,0x20,0x67,0xFF,0x60,0x20,0x20,0x20},
{0xB4,0xFE,0x00,0x00,0x22,0x0C,0x11,0x88,0x10,0x92,0x47,0xFF,0x20,0x00,0x29,0x86,0x09,0x04,0x11,0x04,0x16,0x59,0x62,0x8A,0x21,0x04,0x21,0x04,0x62,0x8A,0x67,0x5D,0x22,0x49},
{0xB5,0x40,0x00,0x00,0x21,0x82,0x12,0x1F,0x13,0xC4,0x42,0x54,0x23,0xD4,0x22,0x54,0x0B,0xDF,0x12,0x54,0x12,0x06,0x63,0xC6,0x22,0x0E,0x23,0xCA,0x62,0x12,0x62,0x13,0x20,0x21},
{0xB5,0x41,0x00,0x00,0x20,0x40,0x10,0xF8,0x10,0x88,0x41,0x10,0x23,0xFE,0x29,0x52,0x09,0x52,0x11,0x4E,0x11,0x82,0x61,0x32,0x20,0x20,0x27,0xFF,0x60,0x50,0x60,0x8C,0x27,0x03},
{0xB5,0x42,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x20,0x42,0x42,0x23,0xFF,0x2A,0x8A,0x0A,0x8A,0x12,0xFA,0x12,0x8A,0x62,0x8A,0x22,0xFA,0x22,0x8A,0x62,0x8A,0x63,0xFE,0x22,0x02},
{0xB5,0x43,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x43,0xFC,0x26,0x10,0x2B,0xFE,0x0A,0x08,0x17,0xC5,0x12,0x03,0x11,0xFD,0x71,0x04,0x11,0xFC,0x31,0x04,0x31,0xFC,0x11,0x04},
{0xB5,0x44,0x00,0x00,0x22,0x02,0x13,0xFF,0x12,0x22,0x42,0x22,0x23,0xFE,0x2A,0x02,0x0A,0x00,0x12,0xFE,0x12,0x82,0x62,0xFE,0x22,0x82,0x24,0xFE,0x64,0x82,0x64,0xFE,0x28,0x82},
{0xB5,0x45,0x00,0x00,0x20,0x1E,0x13,0xE4,0x12,0x23,0x42,0x11,0x25,0xFE,0x28,0x40,0x0B,0xFF,0x10,0x80,0x10,0x84,0x61,0xFE,0x21,0x44,0x22,0x28,0x64,0x10,0x60,0x6C,0x23,0x83},
{0xB5,0x46,0x00,0x00,0x20,0x3C,0x17,0xE0,0x10,0x22,0x47,0xFF,0x20,0x20,0x2B,0xFE,0x0A,0x22,0x13,0xFE,0x12,0x22,0x63,0xFE,0x20,0x20,0x23,0xFE,0x60,0x20,0x60,0x22,0x27,0xFF},
{0xB5,0x47,0x00,0x00,0x20,0x30,0x12,0x44,0x13,0xFE,0x42,0x04,0x23,0xFC,0x2A,0x04,0x0B,0xFC,0x12,0x04,0x10,0x00,0x63,0xFE,0x20,0x20,0x21,0xFC,0x60,0x20,0x60,0x22,0x27,0xFF},
{0xB5,0x48,0x00,0x00,0x18,0x30,0x10,0x24,0x13,0xFE,0x10,0x00,0x56,0x8C,0x54,0x48,0x58,0x52,0x53,0xFF,0x18,0x00,0x15,0xFC,0x15,0x04,0x21,0x04,0x21,0x04,0x21,0xFC,0x41,0x04},
{0xB5,0x49,0x00,0x00,0x0C,0x0C,0x08,0x08,0x7F,0x7F,0x18,0x18,0x2C,0x2C,0x4A,0xCB,0x08,0x08,0x00,0xC0,0x06,0x8C,0x04,0x90,0x18,0xA0,0x01,0x40,0x02,0x20,0x0C,0x18,0x70,0x07},
{0xB5,0x4A,0x00,0x00,0x06,0x60,0x04,0x40,0x08,0x84,0x0F,0xFE,0x18,0x40,0x6F,0xFC,0x08,0x40,0x0F,0xFC,0x08,0x40,0x0F,0xFF,0x08,0x00,0x12,0x44,0x12,0x22,0x21,0x13,0x21,0x11},
{0xB5,0x4B,0x00,0x00,0x18,0x60,0x10,0x44,0x10,0x7E,0x16,0xC4,0x54,0x84,0x59,0x38,0x52,0x10,0x50,0x42,0x19,0x8F,0x15,0x02,0x15,0xCE,0x21,0x02,0x21,0x02,0x21,0xFE,0x41,0x02},
{0xB5,0x4C,0x00,0x00,0x18,0x00,0x10,0x04,0x1F,0xFE,0x32,0x48,0x52,0x48,0x12,0x4A,0x7F,0xFF,0x12,0x48,0x12,0x48,0x7F,0xFE,0x00,0x00,0x12,0x24,0x12,0x24,0x21,0x12,0x21,0x12},
{0xB5,0x4D,0x00,0x00,0x0C,0x10,0x08,0x14,0x09,0x12,0x0F,0x90,0x19,0x7F,0x25,0x10,0x52,0x28,0x14,0x28,0x08,0x44,0x11,0x83,0x60,0x00,0x24,0x44,0x24,0x44,0x42,0x22,0x42,0x22},
{0xB5,0x4E,0x00,0x00,0x02,0x00,0x1F,0xCC,0x02,0x18,0x02,0x22,0x7F,0xFF,0x01,0x40,0x02,0x20,0x0F,0xF0,0x18,0x10,0x6F,0xF0,0x08,0x10,0x0F,0xF0,0x24,0x44,0x22,0x22,0x42,0x22},
{0xB5,0x4F,0x00,0x00,0x18,0x82,0x10,0xFF,0x10,0x82,0x16,0xFE,0x54,0x82,0x58,0xFE,0x50,0x82,0x50,0x00,0x18,0xCC,0x14,0x88,0x14,0xEB,0x22,0x8C,0x20,0xA9,0x21,0xC9,0x40,0x87},
{0xB5,0x50,0x00,0x00,0x06,0x18,0x34,0xA2,0x24,0xFF,0x24,0x92,0x3E,0xFE,0x20,0x92,0x20,0x92,0x24,0xFE,0x3E,0xA2,0x24,0x28,0x24,0x4A,0x25,0xFF,0x44,0x08,0x44,0x08,0x44,0x08},
{0xB5,0x51,0x00,0x00,0x0C,0x30,0x28,0x24,0x29,0xFE,0x3E,0x50,0x48,0x4C,0x48,0x84,0x0B,0xFF,0x08,0x04,0x0E,0xF4,0x78,0x94,0x28,0xF4,0x08,0x94,0x08,0x04,0x08,0x1C,0x08,0x08},
{0xB5,0x52,0x00,0x00,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x20,0x00,0x2F,0x5E,0x20,0x40,0x2F,0x5E,0x20,0x00,0x24,0x40,0x27,0xFC,0x28,0x40,0x5F,0xFF,0x40,0x40,0x40,0x40},
{0xB5,0x53,0x00,0x00,0x46,0x1C,0x24,0xC4,0x18,0x82,0x11,0xFE,0x29,0x4A,0x4A,0x49,0x0D,0xFE,0x15,0x4A,0x15,0x4A,0x25,0x8E,0x45,0x02,0x05,0xFE,0x45,0x02,0x39,0xFE,0x11,0x02},
{0xB5,0x54,0x00,0x00,0x46,0x82,0x24,0xFF,0x18,0x92,0x10,0xFE,0x28,0x92,0x48,0xFE,0x0C,0x00,0x15,0xFF,0x14,0x90,0x24,0x93,0x44,0x8A,0x04,0x84,0x44,0xB4,0x39,0xC2,0x10,0x81},
{0xB5,0x55,0x00,0x00,0x4C,0xC2,0x28,0x9F,0x10,0x82,0x11,0x82,0x2A,0xBF,0x48,0x80,0x0C,0x90,0x14,0x9F,0x14,0xA4,0x24,0x84,0x44,0xBF,0x04,0x84,0x44,0x8A,0x38,0x8A,0x10,0xB1},
{0xB5,0x56,0x00,0x00,0x46,0x82,0x24,0xFF,0x18,0x82,0x10,0xFE,0x28,0x82,0x48,0xFE,0x0C,0x82,0x14,0x18,0x14,0x90,0x24,0xFE,0x44,0x90,0x05,0x7E,0x44,0x10,0x38,0x12,0x11,0xFF},
{0xB5,0x57,0x00,0x00,0x01,0x0C,0x08,0x88,0x7C,0x88,0x12,0x3E,0x11,0x08,0x11,0x48,0x7C,0x4A,0x10,0xBF,0x10,0x88,0x13,0x08,0x1D,0x14,0x71,0x12,0x23,0x7D,0x03,0x21,0x01,0x00},
{0xB5,0x58,0x00,0x00,0x08,0xCC,0x7C,0x88,0x13,0xFE,0x10,0x88,0x10,0x88,0x7C,0xF8,0x10,0x88,0x10,0xF8,0x14,0x88,0x18,0x8A,0x73,0xFF,0x20,0x00,0x01,0x88,0x02,0x06,0x0C,0x02},
{0xB5,0x59,0x00,0x00,0x08,0xC6,0x7C,0x84,0x10,0x84,0x13,0xDF,0x10,0x84,0x7D,0xC4,0x11,0xAC,0x12,0xAC,0x10,0x96,0x1C,0x95,0x70,0x84,0x20,0x84,0x00,0x84,0x00,0x84,0x00,0x84},
{0xB5,0x5A,0x00,0x00,0x08,0x04,0x7D,0xFE,0x10,0x20,0x10,0x60,0x11,0x90,0x7C,0x36,0x11,0x54,0x10,0x98,0x13,0x54,0x1C,0x34,0x70,0xD2,0x27,0x11,0x00,0x10,0x00,0xE0,0x00,0x40},
{0xB5,0x5B,0x00,0x00,0x08,0x20,0x7C,0x3C,0x11,0x22,0x11,0xFF,0x11,0x02,0x7D,0x24,0x11,0x3C,0x11,0x61,0x11,0x1F,0x1D,0x00,0x71,0x2C,0x21,0x28,0x02,0x49,0x02,0x49,0x04,0x87},
{0xB5,0x5C,0x00,0x00,0x02,0x02,0x7F,0x7F,0x08,0x08,0x7F,0x7F,0x08,0x08,0x0F,0x0A,0x78,0x7F,0x20,0x00,0x18,0x30,0x10,0x20,0x1F,0x26,0x10,0x38,0x13,0x21,0x7C,0x21,0x20,0x1F},
{0xB5,0x5D,0x00,0x00,0x02,0x02,0x7F,0x7F,0x08,0x08,0x7F,0x7F,0x08,0x08,0x0F,0x0A,0x78,0x7F,0x20,0x00,0x1F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFD,0x10,0x01,0x10,0x01,0x0F,0xFF},
{0xB5,0x5E,0x00,0x00,0x02,0x02,0x7F,0x7F,0x08,0x08,0x7F,0x7F,0x08,0x08,0x0F,0x0A,0x78,0xBF,0x23,0x60,0x0C,0x18,0x73,0xE7,0x00,0x00,0x1F,0xF8,0x00,0x10,0x00,0x20,0x00,0x40},
{0xB5,0x5F,0x00,0x00,0x00,0x30,0x09,0x22,0x7D,0xFF,0x11,0x02,0x12,0xFC,0x10,0x84,0x7C,0x84,0x10,0xFC,0x10,0x84,0x10,0x80,0x1C,0xFE,0x70,0x82,0x20,0x82,0x00,0xFE,0x00,0x82},
{0xB5,0x60,0x00,0x00,0x09,0x02,0x7D,0xFF,0x11,0x02,0x12,0x6C,0x10,0x49,0x7C,0x87,0x11,0x30,0x10,0x22,0x13,0xFF,0x1C,0x60,0x70,0xB0,0x20,0xAC,0x01,0x23,0x02,0x20,0x00,0x20},
{0xB5,0x61,0x00,0x00,0x08,0x30,0x7C,0x24,0x11,0xFE,0x10,0x50,0x10,0x8C,0x7D,0x04,0x13,0xFF,0x10,0x04,0x11,0xE4,0x1D,0x24,0x71,0xE4,0x21,0x24,0x00,0x04,0x00,0x1C,0x00,0x08},
{0xB5,0x62,0x00,0x00,0x01,0x04,0x09,0xFE,0x7D,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x7D,0x04,0x10,0x00,0x11,0x98,0x11,0x10,0x1D,0xD6,0x71,0x18,0x21,0x51,0x03,0x91,0x01,0x0F},
{0xB5,0x63,0x00,0x00,0x0C,0x82,0x28,0xFF,0x28,0x92,0x3E,0xFE,0x48,0x92,0x48,0xFE,0x08,0x92,0x3E,0x10,0x09,0xFF,0x08,0x22,0x0E,0x22,0x78,0x42,0x20,0x42,0x00,0x9C,0x01,0x08},
{0xB5,0x64,0x00,0x00,0x02,0x0C,0x7F,0x08,0x08,0x68,0x49,0x48,0x7F,0x7E,0x49,0x48,0x7F,0x88,0x49,0x7E,0x7F,0x08,0x49,0x08,0x28,0x0A,0x50,0xFF,0x58,0x00,0x26,0x03,0x41,0xFC},
{0xB5,0x65,0x00,0x00,0x01,0x80,0x01,0x00,0x1F,0xF8,0x01,0x0A,0x7F,0xFF,0x01,0x08,0x1F,0xFC,0x01,0x00,0x7F,0xFE,0x00,0x00,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x11,0x0A,0x7F,0xFF},
{0xB5,0x66,0x00,0x00,0x00,0xFC,0x3F,0x98,0x08,0x90,0x04,0xA2,0x7F,0xFF,0x01,0x80,0x02,0xE0,0x0C,0x98,0x70,0x07,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xB5,0x67,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0xE3,0x2B,0x82,0x08,0x8A,0x0F,0xEA,0x19,0x8A,0x6A,0xCA,0x4A,0xAA,0x0C,0xA2,0x10,0x82,0x10,0x8E,0x20,0x84},
{0xB5,0x68,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x2B,0xFC,0x28,0x48,0x0A,0x32,0x0B,0xFF,0x1A,0x22,0x6B,0xFE,0x4A,0x22,0x0B,0xFE,0x12,0x22,0x12,0x2E,0x22,0x04},
{0xB5,0x69,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x28,0x24,0x2B,0xFE,0x08,0x20,0x08,0x28,0x19,0xFC,0x68,0x00,0x48,0xA2,0x0A,0x91,0x12,0x95,0x14,0x85,0x20,0x78},
{0xB5,0x6A,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x2B,0xFE,0x28,0x92,0x09,0x24,0x0A,0x48,0x19,0x24,0x68,0x92,0x48,0x00,0x0B,0xFE,0x10,0x20,0x10,0x22,0x27,0xFF},
{0xB5,0x6B,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x2B,0xFE,0x28,0x00,0x09,0xFC,0x09,0x04,0x19,0x04,0x69,0xFC,0x48,0x00,0x09,0x0C,0x10,0xC8,0x10,0x52,0x27,0xFF},
{0xB5,0x6C,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x2B,0xFE,0x28,0x20,0x08,0x6C,0x08,0xA3,0x1B,0x21,0x68,0x00,0x49,0xFC,0x09,0x04,0x11,0x04,0x11,0xFC,0x21,0x04},
{0xB5,0x6D,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x40,0x28,0x88,0x2B,0xF5,0x08,0x91,0x09,0x0F,0x1A,0x40,0x68,0x7E,0x48,0x84,0x0B,0x48,0x10,0x30,0x10,0xCC,0x27,0x03},
{0xB5,0x6E,0x00,0x00,0x01,0x00,0x3F,0x98,0x01,0x50,0x32,0x26,0x04,0x14,0x1B,0xE8,0x60,0x07,0x0F,0xF0,0x08,0x10,0x08,0x10,0x0F,0xF0,0x00,0x00,0x0C,0x30,0x02,0x44,0x7F,0xFE},
{0xB5,0x6F,0x00,0x00,0x01,0x18,0x3F,0xA0,0x01,0x46,0x32,0x28,0x04,0x10,0x1E,0x7C,0x62,0x4B,0x12,0x48,0x1E,0x46,0x10,0x80,0x3F,0x7C,0x21,0x24,0x01,0x18,0x1E,0x24,0x04,0xC3},
{0xB5,0x70,0x00,0x00,0x18,0x30,0x22,0x22,0x7B,0xFF,0x4A,0x02,0x4C,0x04,0x49,0xFC,0x78,0x00,0x48,0x04,0x4B,0xFE,0x48,0x90,0x78,0x90,0x48,0x92,0x41,0x12,0x01,0x13,0x02,0x0E},
{0xB5,0x71,0x00,0x00,0x18,0x30,0x21,0xA0,0x79,0x24,0x49,0xFE,0x4A,0x20,0x4C,0x22,0x7B,0xFF,0x48,0x00,0x49,0x04,0x49,0xFE,0x79,0x04,0x49,0x04,0x41,0x04,0x01,0xFC,0x01,0x04},
{0xB5,0x72,0x00,0x00,0x18,0x0C,0x12,0x08,0x7D,0x4A,0x14,0x7F,0x15,0x4A,0x23,0x48,0x58,0x48,0x12,0x7E,0x1F,0x62,0x22,0x54,0x5A,0x54,0x04,0x48,0x0A,0x94,0x10,0x92,0x61,0x21},
{0xB5,0x73,0x00,0x00,0x20,0xC0,0x18,0x84,0x40,0xFE,0x34,0x84,0x05,0x28,0x08,0x20,0x70,0x50,0x21,0x8C,0x26,0x03,0x00,0x00,0x1F,0xFC,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xB5,0x74,0x00,0x00,0x4A,0x02,0x7B,0xFF,0x4A,0x02,0x4A,0x32,0x7A,0x22,0x4A,0xFA,0x4A,0x22,0x4A,0x62,0x7A,0xB2,0x4A,0xAA,0x4A,0x22,0x7A,0x22,0x4A,0x02,0x43,0xFE,0x02,0x02},
{0xB5,0x75,0x00,0x00,0x30,0x04,0x21,0xFF,0x24,0x00,0x3E,0x82,0x28,0xFF,0x48,0x82,0x08,0x82,0x7E,0x82,0x08,0xFE,0x14,0x82,0x14,0x00,0x12,0x86,0x22,0x44,0x20,0x48,0x43,0xFF},
{0xB5,0x76,0x00,0x00,0x04,0x10,0x7E,0x54,0x10,0x92,0x10,0x92,0x21,0x11,0x24,0xFE,0x3E,0x82,0x64,0x82,0x24,0xFE,0x24,0x82,0x24,0xFE,0x3C,0x82,0x24,0x82,0x20,0x8E,0x00,0x84},
{0xB5,0x77,0x00,0x00,0x08,0x02,0x7D,0xFF,0x10,0x10,0x10,0x92,0x24,0xFF,0x3E,0x92,0x64,0xFE,0x24,0x92,0x24,0xFE,0x24,0x92,0x3C,0x10,0x24,0xD0,0x21,0x20,0x00,0x58,0x03,0x87},
{0xB5,0x78,0x00,0x00,0x04,0x82,0x7E,0xFF,0x10,0x82,0x10,0xFE,0x20,0x82,0x24,0xFE,0x3E,0x82,0x64,0x82,0x24,0xFE,0x24,0xAA,0x24,0x28,0x3C,0x29,0x24,0x49,0x20,0x49,0x00,0x87},
{0xB5,0x79,0x00,0x00,0x0E,0x10,0x78,0x54,0x08,0x92,0x08,0x92,0x7F,0x11,0x08,0xFE,0x18,0x82,0x1C,0x82,0x2A,0xFE,0x2A,0x82,0x48,0xFE,0x08,0x82,0x08,0x82,0x08,0x8E,0x08,0x84},
{0xB5,0x7A,0x00,0x00,0x0E,0x82,0x78,0xFF,0x08,0x82,0x08,0xFE,0x7E,0x82,0x08,0xFE,0x18,0x82,0x1C,0x00,0x2A,0xFE,0x2A,0x10,0x48,0x12,0x09,0xFF,0x08,0x10,0x08,0x10,0x08,0x10},
{0xB5,0x7B,0x00,0x00,0x0E,0x82,0x78,0xFF,0x08,0x82,0x08,0x82,0x7E,0xFE,0x08,0x82,0x18,0x1E,0x1C,0xF0,0x2A,0x10,0x2A,0x14,0x48,0xFE,0x08,0x10,0x08,0x12,0x09,0xFF,0x08,0x00},
{0xB5,0x7C,0x00,0x00,0x0E,0x58,0x78,0x48,0x08,0x44,0x08,0x84,0x7E,0xFE,0x09,0x85,0x18,0x84,0x1C,0x84,0x2A,0xFC,0x2A,0x50,0x48,0x50,0x08,0x52,0x08,0x92,0x08,0x93,0x09,0x0E},
{0xB5,0x7D,0x00,0x00,0x0E,0xE6,0x78,0x18,0x08,0x26,0x08,0xC2,0x7E,0x20,0x09,0xFF,0x18,0x40,0x1C,0x92,0x2B,0xFF,0x2A,0x92,0x48,0x92,0x08,0x92,0x08,0x9E,0x08,0x94,0x08,0x10},
{0xB5,0x7E,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x44,0x22,0x18,0x25,0x6F,0xFF,0x02,0x10,0x7F,0xFE,0x02,0x10,0x1F,0xF0,0x04,0x00,0x1F,0xFC,0x64,0x04,0x07,0xFC,0x04,0x04},
{0xB5,0xA1,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x22,0x22,0x4C,0x25,0x31,0x9F,0x02,0x00,0x1F,0xFC,0x10,0x44,0x12,0x94,0x11,0xA4,0x11,0x64,0x16,0x54,0x10,0x84,0x1F,0xFC},
{0xB5,0xA2,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x22,0x22,0x4C,0x25,0x30,0xDF,0x08,0x80,0x0F,0xFC,0x10,0x80,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8},
{0xB5,0xA3,0x00,0x00,0x00,0x84,0x3F,0xFE,0x04,0x10,0x02,0x22,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB5,0xA4,0x00,0x00,0x0C,0x30,0x08,0x20,0x7E,0x44,0x01,0xFA,0x24,0x48,0x24,0x49,0x24,0x87,0x29,0x30,0x28,0x20,0x2A,0x7E,0x0C,0x42,0x71,0xA4,0x20,0x18,0x00,0x24,0x01,0xC3},
{0xB5,0xA5,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x1F,0xF8,0x00,0x80,0x00,0x82,0x7F,0xFF,0x00,0x10,0x00,0x12,0x3F,0xFF,0x08,0x10,0x06,0x10,0x02,0x70,0x00,0x20},
{0xB5,0xA6,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0x80,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x10,0x84,0x10,0x9C,0x11,0x88,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xB5,0xA7,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x0F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x3F,0xFE,0x00,0x80,0x00,0x80},
{0xB5,0xA8,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x44,0x84,0x3F,0xFE,0x20,0x00,0x27,0xFC,0x20,0x40,0x20,0x50,0x23,0xF8,0x20,0x40,0x20,0x44,0x2F,0xFE,0x20,0x00,0x3F,0xFF},
{0xB5,0xA9,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x84,0x3F,0xFE,0x20,0x02,0x2F,0xFA,0x20,0x02,0x27,0xF2,0x24,0x12,0x24,0x12,0x27,0xF2,0x24,0x12,0x20,0x0E,0x20,0x04},
{0xB5,0xAA,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x86,0x01,0x80,0x02,0x60,0x04,0x18,0x1B,0xE7,0x60,0x00,0x08,0x08,0x0F,0xFC,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB5,0xAB,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x86,0x08,0x00,0x0F,0xFC,0x10,0x04,0x6F,0xC4,0x08,0x44,0x0F,0xC4,0x08,0x44,0x0F,0xC8,0x00,0x08,0x00,0x70,0x00,0x20},
{0xB5,0xAC,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0x00,0x22,0x18,0x3F,0x12,0x22,0xFF,0x3E,0x22,0x22,0x22,0x3E,0x22,0x22,0x22,0x22,0x42,0x4E,0x5C,0x44,0x88},
{0xB5,0xAD,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0x10,0x0C,0xCC,0x08,0x84,0x1B,0xFF,0x28,0x80,0x48,0x46,0x08,0x48,0x08,0x31,0x08,0x51,0x08,0x8D,0x0B,0x03},
{0xB5,0xAE,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x86,0x00,0x00,0x04,0x88,0x7E,0xFC,0x10,0x88,0x10,0xC8,0x12,0xA8,0x1C,0xA8,0x71,0x09,0x21,0x09,0x02,0x09,0x04,0x07},
{0xB5,0xAF,0x00,0x00,0x00,0x04,0x3F,0xFE,0x02,0x20,0x1F,0xFC,0x12,0x24,0x12,0x24,0x1F,0xFC,0x00,0x00,0x0C,0xCC,0x02,0x90,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB5,0xB0,0x00,0x00,0x08,0xC2,0x78,0x9F,0x08,0x82,0x2A,0xAA,0x3A,0xCE,0x29,0x8A,0x23,0xE8,0x28,0x8A,0x79,0x9F,0x4A,0xD2,0x0A,0xA2,0x0C,0xA2,0x08,0x82,0x70,0x9C,0x20,0x88},
{0xB5,0xB1,0x00,0x00,0x18,0x18,0x10,0x12,0x21,0xFF,0x6C,0x00,0x18,0xC4,0x10,0x83,0x2D,0x01,0x74,0xCC,0x50,0xA8,0x19,0x28,0x54,0x10,0x54,0x28,0x50,0x28,0x10,0x44,0x11,0x83},
{0xB5,0xB2,0x00,0x00,0x18,0x18,0x10,0x10,0x20,0x12,0x6D,0xFF,0x18,0x10,0x10,0x14,0x2C,0xFE,0x74,0x00,0x50,0x82,0x18,0xFF,0x54,0x82,0x54,0x82,0x50,0x82,0x10,0xFE,0x10,0x82},
{0xB5,0xB3,0x00,0x00,0x18,0x1A,0x10,0x11,0x20,0x11,0x6D,0xFF,0x18,0x08,0x10,0x68,0x2C,0x48,0x74,0x6B,0x51,0xCA,0x19,0x4C,0x54,0x48,0x54,0x95,0x51,0x15,0x10,0x23,0x10,0x41},
{0xB5,0xB4,0x00,0x00,0x18,0x04,0x11,0xFE,0x20,0x44,0x6C,0x44,0x18,0x9C,0x11,0x08,0x2D,0xFE,0x75,0x22,0x51,0x22,0x19,0xFE,0x55,0x00,0x55,0x02,0x51,0x02,0x11,0x03,0x10,0xFE},
{0xB5,0xB5,0x00,0x00,0x06,0x60,0x34,0x4C,0x27,0x70,0x24,0x42,0x27,0x43,0x78,0x3E,0x20,0xC0,0x07,0x00,0x01,0x60,0x00,0x88,0x3F,0xF6,0x10,0x82,0x0C,0x90,0x08,0x8C,0x10,0x84},
{0xB5,0xB6,0x00,0x00,0x08,0x42,0x7F,0x7F,0x11,0x42,0x72,0x42,0x0C,0x7E,0x12,0x42,0x61,0x80,0x0E,0x30,0x02,0x40,0x00,0x84,0x3F,0xFA,0x10,0x82,0x0C,0xB0,0x08,0x8C,0x10,0x84},
{0xB5,0xB7,0x00,0x00,0x0C,0x0C,0x08,0x08,0x10,0x10,0x66,0x66,0x14,0x14,0x08,0x08,0x08,0x08,0x12,0x12,0x7D,0x7D,0x09,0x09,0x2A,0x2A,0x2A,0x2A,0x49,0x49,0x49,0x49,0x08,0x08},
{0xB5,0xB8,0x00,0x00,0x18,0x60,0x10,0x44,0x20,0x7E,0x6C,0xC4,0x19,0x44,0x10,0x28,0x2C,0x30,0x74,0x4C,0x50,0x83,0x1B,0xFC,0x54,0x84,0x54,0x84,0x50,0x84,0x10,0xFC,0x10,0x84},
{0xB5,0xB9,0x00,0x00,0x18,0x30,0x10,0x28,0x20,0x48,0x6C,0x44,0x18,0x82,0x13,0x7D,0x2C,0x00,0x74,0x84,0x50,0xFE,0x18,0x84,0x54,0x84,0x54,0x84,0x50,0x84,0x10,0xFC,0x10,0x84},
{0xB5,0xBA,0x00,0x00,0x18,0x60,0x10,0x40,0x20,0x82,0x6C,0xFF,0x19,0x02,0x12,0x02,0x2C,0xF2,0x74,0x92,0x50,0xF2,0x18,0x92,0x54,0xF2,0x54,0x04,0x50,0x04,0x10,0x38,0x10,0x10},
{0xB5,0xBB,0x00,0x00,0x18,0x02,0x11,0xFF,0x20,0x20,0x6C,0x28,0x18,0x44,0x10,0x46,0x2D,0xFB,0x74,0x81,0x50,0x18,0x18,0x10,0x54,0xFE,0x54,0x10,0x50,0x10,0x10,0x12,0x11,0xFF},
{0xB5,0xBC,0x00,0x00,0x18,0x20,0x10,0x3E,0x20,0x42,0x6D,0xA4,0x18,0x18,0x10,0x64,0x2D,0x83,0x74,0x08,0x50,0xFE,0x18,0x08,0x54,0x4A,0x54,0xFF,0x50,0x88,0x10,0x08,0x10,0x08},
{0xB5,0xBD,0x00,0x00,0x0C,0x18,0x02,0x20,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x00,0x84,0x3F,0xFE,0x04,0x90,0x02,0xA2,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8},
{0xB5,0xBE,0x00,0x00,0x46,0x00,0x25,0xEF,0x28,0x21,0x7E,0x63,0x10,0xA5,0x10,0xA5,0x7D,0x29,0x10,0x63,0x14,0xA5,0x78,0xA5,0x51,0x29,0x10,0x21,0x20,0x21,0x20,0xE7,0x40,0x42},
{0xB5,0xBF,0x00,0x00,0x01,0x80,0x06,0x60,0x1B,0xD8,0x60,0x07,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x00,0x00,0x7E,0xFC,0x0A,0x14,0x12,0x24,0x66,0xCC,0x1A,0x34,0x62,0xC4,0x0C,0x18},
{0xB5,0xC0,0x00,0x00,0x02,0x0C,0x1F,0xD0,0x02,0x24,0x7F,0xFE,0x01,0x00,0x0E,0x70,0x73,0x84,0x02,0x06,0x3F,0xFC,0x04,0x10,0x1F,0xE8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB5,0xC1,0x00,0x00,0x04,0x1E,0x7E,0xF0,0x24,0x10,0x24,0x10,0x3C,0x12,0x25,0xFF,0x24,0x10,0x3C,0x10,0x24,0x92,0x24,0xFF,0x2C,0x82,0x74,0x82,0x24,0x82,0x04,0xFE,0x04,0x82},
{0xB5,0xC2,0x00,0x00,0x00,0x80,0x1F,0xFC,0x00,0x84,0x7F,0xFF,0x00,0x84,0x1F,0xFC,0x00,0x80,0x24,0xA2,0x3C,0xBE,0x20,0x82,0x3F,0xFE,0x20,0x82,0x3C,0xBE,0x44,0xA2,0x44,0x22},
{0xB5,0xC3,0x00,0x00,0x24,0x30,0x3D,0x22,0x25,0xFF,0x25,0x02,0x3E,0xC4,0x24,0x80,0x24,0xEE,0x24,0xAA,0x3D,0x2A,0x25,0xAA,0x26,0x4E,0x24,0x48,0x44,0x89,0x5C,0x89,0x49,0x07},
{0xB5,0xC4,0x00,0x00,0x24,0x30,0x3D,0x22,0x25,0xFF,0x25,0x02,0x3E,0x6C,0x24,0x48,0x24,0x89,0x25,0x07,0x3C,0x00,0x24,0xFC,0x24,0x20,0x24,0x20,0x44,0x20,0x5C,0x22,0x49,0xFF},
{0xB5,0xC5,0x00,0x00,0x24,0x18,0x3C,0x12,0x25,0xFF,0x24,0x00,0x3C,0xD8,0x24,0x92,0x25,0x9F,0x26,0x92,0x3C,0xAA,0x24,0xA4,0x24,0xD4,0x24,0x88,0x44,0x94,0x5C,0x92,0x48,0xA1},
{0xB5,0xC6,0x00,0x00,0x24,0x18,0x3D,0x12,0x25,0xFF,0x25,0x00,0x3D,0x23,0x25,0x22,0x25,0x42,0x25,0xDF,0x3D,0x42,0x25,0x52,0x25,0x4A,0x25,0x4A,0x45,0x42,0x5E,0x4E,0x4A,0x44},
{0xB5,0xC7,0x00,0x00,0x3F,0x04,0x24,0x7E,0x3F,0x44,0x21,0x24,0x3F,0x18,0x24,0x14,0x3F,0x63,0x20,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x18},
{0xB5,0xC8,0x00,0x00,0x24,0x84,0x3E,0xFE,0x24,0x80,0x24,0xFC,0x3C,0x80,0x24,0xFC,0x24,0x80,0x25,0xFF,0x3C,0x90,0x24,0x93,0x24,0x8A,0x24,0x84,0x44,0xB4,0x5D,0xC2,0x48,0x81},
{0xB5,0xC9,0x00,0x00,0x24,0x50,0x3C,0x50,0x25,0x54,0x25,0xFE,0x3D,0x54,0x25,0x54,0x25,0xFC,0x25,0x54,0x3D,0x54,0x27,0xFF,0x24,0x00,0x24,0xC8,0x44,0x84,0x5D,0x06,0x4A,0x02},
{0xB5,0xCA,0x00,0x00,0x24,0x18,0x3D,0x22,0x25,0xFF,0x25,0x22,0x3D,0xFE,0x25,0x22,0x25,0x22,0x25,0xFE,0x3D,0x42,0x24,0x58,0x24,0x92,0x27,0xFF,0x44,0x10,0x5C,0x10,0x48,0x10},
{0xB5,0xCB,0x00,0x00,0x24,0x30,0x3C,0x22,0x27,0xFF,0x24,0x50,0x3C,0x88,0x25,0x34,0x26,0x23,0x25,0xFC,0x3D,0x24,0x25,0xFC,0x25,0x24,0x25,0xFD,0x44,0x21,0x5C,0x21,0x48,0x1F},
{0xB5,0xCC,0x00,0x00,0x24,0x28,0x3E,0x2A,0x25,0xEF,0x24,0x28,0x3C,0x28,0x24,0x2A,0x25,0xEF,0x24,0x28,0x3C,0x28,0x24,0x6A,0x25,0xAF,0x25,0x28,0x44,0x48,0x5C,0x48,0x48,0x88},
{0xB5,0xCD,0x00,0x00,0x24,0x18,0x3C,0x50,0x25,0x97,0x25,0x11,0x3D,0x11,0x25,0xD7,0x25,0x11,0x25,0x11,0x3D,0xFF,0x25,0x11,0x24,0x28,0x24,0x28,0x44,0x44,0x5C,0x42,0x49,0x81},
{0xB5,0xCE,0x00,0x00,0x0C,0x04,0x14,0xFE,0x12,0x04,0x21,0x68,0x3E,0x10,0x48,0x02,0x08,0xFF,0x7F,0x12,0x08,0x14,0x4A,0x10,0x7F,0x10,0x42,0x10,0x42,0x10,0x7E,0x70,0x42,0x20},
{0xB5,0xCF,0x00,0x00,0x00,0xFE,0x3F,0x84,0x08,0x48,0x24,0x52,0x3F,0xFF,0x20,0x02,0x48,0x08,0x0F,0x7E,0x09,0x08,0x11,0x28,0x6A,0x2A,0x0A,0x7F,0x04,0x48,0x18,0x08,0x60,0x08},
{0xB5,0xD0,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x84,0x3F,0xFE,0x04,0x10,0x02,0x22,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB5,0xD1,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x84,0x3F,0xFE,0x04,0x08,0x04,0x08,0x0B,0x16,0x31,0x22,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB5,0xD2,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x08,0x00,0x09,0x18,0x7F,0x94,0x10,0x24,0x1F,0x43,0x11,0xB0,0x11,0x0C,0x11,0x02,0x21,0x0C,0x2E,0x70,0x44,0x20},
{0xB5,0xD3,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x04,0x13,0xFE,0x40,0x20,0x28,0xA8,0x08,0xA4,0x11,0x24,0x67,0xFF,0x20,0x20,0x20,0x20,0x60,0x20,0x20,0x20},
{0xB5,0xD4,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x18,0x19,0x12,0x41,0xFF,0x25,0x12,0x25,0x10,0x09,0xFE,0x09,0x42,0x71,0x24,0x12,0x28,0x12,0x18,0x32,0x24,0x14,0xC3},
{0xB5,0xD5,0x00,0x00,0x06,0x18,0x04,0x12,0x7F,0xFF,0x04,0x10,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x0F,0xF0,0x08,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xB5,0xD6,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x90,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x0F,0xF8,0x01,0x02,0x7F,0xFF,0x0C,0x30,0x03,0xC0,0x3C,0x3C},
{0xB5,0xD7,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x84,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x08,0x88,0x08,0x88,0x0F,0xF8,0x08,0x08,0x08,0x08,0x08,0x38},
{0xB5,0xD8,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x00,0x00,0x3F,0xFC,0x04,0x90,0x04,0x92,0x7F,0xFF,0x04,0x90,0x04,0x94,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x00,0x80,0x00,0x80},
{0xB5,0xD9,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x04,0x10,0x1A,0x11,0x63,0xEF,0x04,0x20,0x1A,0x40,0x01,0xC0,0x06,0x38,0x78,0x07},
{0xB5,0xDA,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x01,0x02,0x7F,0xFF,0x02,0x10,0x04,0x8C,0x1F,0xFB,0x68,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xFA,0x08,0x8A,0x00,0x83,0x00,0x7E},
{0xB5,0xDB,0x00,0x00,0x04,0x10,0x7F,0xFF,0x04,0x10,0x01,0x00,0x1F,0xE6,0x01,0x0C,0x01,0x10,0x7F,0xFF,0x00,0xA0,0x03,0x10,0x1F,0xF8,0x64,0x08,0x07,0xF8,0x04,0x08,0x07,0xF8},
{0xB5,0xDC,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x00,0x84,0x3F,0xFE,0x00,0x80,0x08,0x88,0x0C,0x8C,0x32,0xB2,0x01,0x80,0x06,0xE0,0x18,0x98,0x60,0x87,0x00,0x80},
{0xB5,0xDD,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x04,0x7E,0x9E,0x04,0xF4,0x08,0x94,0x0A,0x94,0x0C,0x94,0x78,0x92,0x48,0x92,0x09,0x12,0x09,0x1A,0x79,0x75,0x12,0x25},
{0xB5,0xDE,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x22,0x44,0x3F,0x7E,0x22,0x44,0x22,0x44,0x3E,0x7C,0x22,0x44,0x22,0x44,0x3E,0x7C,0x22,0x44,0x00,0x84,0x00,0x9C,0x01,0x08},
{0xB5,0xDF,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x02,0x3F,0xFF,0x20,0x32,0x27,0xC2,0x20,0x92,0x2F,0xFA,0x21,0x82,0x22,0xE2,0x2C,0x9A,0x20,0x82,0x3F,0xFE,0x20,0x02},
{0xB5,0xE0,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x08,0x00,0x0A,0x02,0x0F,0x7F,0x08,0x22,0x09,0x22,0x7F,0x94,0x04,0x14,0x35,0x08,0x24,0x94,0x44,0x94,0x1C,0x22,0x08,0x41},
{0xB5,0xE1,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x02,0x44,0x7E,0x7E,0x02,0x40,0x02,0x48,0x3E,0x7C,0x03,0x40,0x02,0x42,0x7C,0x7F,0x24,0x40,0x08,0x40,0x10,0x40},
{0xB5,0xE2,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x02,0x0F,0xFF,0x11,0x02,0x69,0x32,0x05,0x42,0x3F,0xF2,0x03,0x02,0x05,0xC2,0x09,0x34,0x31,0x04,0x01,0x38,0x00,0x10},
{0xB5,0xE3,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x10,0xC2,0x1E,0x9F,0x10,0x82,0x1E,0x9E,0x10,0x82,0x10,0x82,0x1F,0xFE,0x11,0x42,0x02,0x20,0x04,0x10,0x18,0x0C,0x60,0x03},
{0xB5,0xE4,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x02,0x00,0x7F,0xFF,0x04,0x10,0x03,0xE0,0x7C,0x1E},
{0xB5,0xE5,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x02,0x0F,0xFF,0x14,0x02,0x67,0xE2,0x09,0x02,0x1F,0xF2,0x01,0x02,0x09,0x22,0x0F,0xE4,0x00,0x04,0x00,0x38,0x00,0x10},
{0xB5,0xE6,0x00,0x00,0x04,0x20,0x7F,0xFF,0x04,0x20,0x00,0xFE,0x1F,0x84,0x10,0x63,0x20,0x21,0x40,0xC0,0x00,0x82,0x7F,0xFF,0x01,0x80,0x06,0xE0,0x78,0x98,0x00,0x87,0x00,0x80},
{0xB5,0xE7,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x07,0xFC,0x04,0x00,0x07,0xF8,0x04,0x00,0x07,0xF8,0x04,0x02,0x7F,0xFF,0x08,0x80,0x08,0x4E,0x0B,0xB0,0x3C,0x0C,0x10,0x03},
{0xB5,0xE8,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x00,0x3E,0xFE,0x22,0x82,0x22,0x9E,0x3E,0x84,0x22,0x82,0x3E,0xFF,0x22,0xA2,0x22,0x94,0x42,0x88,0x4E,0x94,0x44,0xA3},
{0xB5,0xE9,0x00,0x00,0x02,0x12,0x7F,0xFF,0x02,0x10,0x07,0xE0,0x04,0x20,0x09,0xC0,0x10,0x80,0x7F,0xFC,0x10,0x84,0x10,0x84,0x1F,0xFC,0x01,0x51,0x02,0x49,0x0C,0x49,0x70,0x3F},
{0xB5,0xEA,0x00,0x00,0x01,0x10,0x01,0xF8,0x21,0x04,0x3F,0xFE,0x21,0x04,0x21,0xE8,0x2F,0x02,0x21,0xFE,0x20,0x00,0x21,0xB0,0x2D,0x26,0x29,0x24,0x4F,0x3C,0x41,0x20,0x5F,0xFF},
{0xB5,0xEB,0x00,0x00,0x18,0x18,0x10,0x12,0x55,0xFF,0x7C,0x00,0x54,0xC4,0x54,0x83,0x55,0x01,0x7C,0x6C,0x54,0xA8,0x10,0x28,0x14,0x10,0x1A,0x28,0x72,0x28,0x20,0x44,0x01,0x83},
{0xB5,0xEC,0x00,0x00,0x18,0x30,0x10,0x24,0x55,0xFE,0x7C,0x20,0x54,0x20,0x54,0x22,0x55,0xFF,0x7C,0x00,0x54,0x30,0x10,0x24,0x15,0xFE,0x1A,0x20,0x72,0x20,0x20,0x22,0x01,0xFF},
{0xB5,0xED,0x00,0x00,0x18,0x02,0x11,0xFF,0x54,0x20,0x7E,0x24,0x54,0x42,0x54,0x4D,0x55,0xF1,0x7C,0x80,0x54,0x18,0x10,0x10,0x14,0xFE,0x14,0x10,0x7A,0x12,0x21,0xFF,0x00,0x00},
{0xB5,0xEE,0x00,0x00,0x19,0x02,0x11,0xFF,0x55,0x02,0x7D,0x02,0x55,0x4A,0x55,0x7A,0x55,0x4A,0x7D,0x4A,0x55,0x4A,0x11,0x7A,0x11,0x4A,0x15,0x02,0x7B,0x02,0x21,0xFE,0x01,0x02},
{0xB5,0xEF,0x00,0x00,0x18,0x18,0x10,0xD0,0x54,0x94,0x7C,0xFE,0x55,0x10,0x55,0x10,0x54,0x12,0x7D,0xFF,0x54,0x30,0x10,0x58,0x18,0x54,0x74,0x94,0x24,0x93,0x01,0x10,0x00,0x10},
{0xB5,0xF0,0x00,0x00,0x18,0x30,0x10,0x28,0x54,0x48,0x7E,0x44,0x54,0x82,0x55,0x7D,0x54,0x00,0x7C,0x84,0x54,0xFE,0x10,0x84,0x14,0x84,0x1A,0x84,0x72,0x84,0x20,0xFC,0x00,0x84},
{0xB5,0xF1,0x00,0x00,0x18,0x28,0x10,0x28,0x54,0xAA,0x7E,0xFF,0x54,0xAA,0x54,0xAA,0x54,0xAA,0x7C,0xAA,0x54,0xFE,0x10,0xAA,0x14,0xAA,0x1A,0xAA,0x72,0xAA,0x20,0xFE,0x00,0x82},
{0xB5,0xF2,0x00,0x00,0x18,0x1E,0x11,0xF0,0x54,0x10,0x7E,0x10,0x54,0x12,0x55,0xFF,0x54,0x10,0x7C,0x10,0x54,0x92,0x10,0xFF,0x14,0x82,0x1A,0x82,0x72,0x82,0x20,0xFE,0x00,0x82},
{0xB5,0xF3,0x00,0x00,0x18,0xC4,0x10,0x8E,0x23,0xE0,0x4C,0x80,0x08,0x82,0x13,0xEF,0x30,0x04,0x50,0xC4,0x10,0x84,0x13,0xE4,0x10,0x84,0x10,0xE4,0x13,0x84,0x11,0x1C,0x10,0x08},
{0xB5,0xF4,0x00,0x00,0x06,0x34,0x04,0x22,0x3F,0xA2,0x04,0x20,0x7F,0xFF,0x00,0x20,0x04,0x20,0x7F,0xA6,0x08,0x14,0x12,0xD8,0x71,0x10,0x14,0xA9,0x38,0xA9,0x10,0x45,0x01,0x83},
{0xB5,0xF5,0x00,0x00,0x3F,0x83,0x08,0x32,0x0F,0xA2,0x11,0x22,0x6A,0x22,0x04,0x0E,0x08,0xC4,0x30,0x80,0x7F,0xFF,0x02,0x40,0x0C,0x26,0x74,0x28,0x05,0x90,0x1E,0x0C,0x04,0x03},
{0xB5,0xF6,0x00,0x00,0x18,0x6C,0x10,0x48,0x14,0x4A,0x7E,0x89,0x04,0x88,0x09,0xBF,0x0A,0x88,0x1A,0x88,0x2C,0x94,0x4A,0x94,0x0A,0x94,0x08,0x92,0x08,0x92,0x08,0xA1,0x08,0xA1},
{0xB5,0xF7,0x00,0x00,0x7F,0xFF,0x02,0x20,0x3F,0xFE,0x22,0x22,0x3F,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xB5,0xF8,0x00,0x00,0x04,0x82,0x3E,0xFF,0x00,0x82,0x04,0xFE,0x7E,0x82,0x08,0xFE,0x08,0x82,0x2A,0x82,0x2A,0xFE,0x2A,0xAA,0x2A,0x28,0x4A,0x29,0x48,0x49,0x08,0x49,0x08,0x87},
{0xB5,0xF9,0x00,0x00,0x04,0x40,0x3E,0x30,0x00,0x12,0x7E,0xFF,0x00,0x10,0x3E,0x10,0x00,0x10,0x3E,0x14,0x00,0xFE,0x22,0x10,0x3F,0x10,0x22,0x10,0x22,0x12,0x3E,0xFF,0x22,0x00},
{0xB5,0xFA,0x00,0x00,0x04,0xC0,0x3E,0x30,0x00,0x00,0x7F,0x70,0x00,0x10,0x3E,0x13,0x01,0xDA,0x3E,0x54,0x00,0x54,0x22,0x52,0x3E,0x92,0x23,0x11,0x22,0x10,0x3E,0x70,0x22,0x20},
{0xB5,0xFB,0x00,0x00,0x04,0x04,0x3E,0xFE,0x00,0x10,0x7F,0x10,0x00,0x54,0x3E,0x54,0x00,0x92,0x3E,0x92,0x00,0x10,0x22,0xFF,0x3F,0x10,0x22,0x10,0x22,0x10,0x3E,0x10,0x22,0x10},
{0xB5,0xFC,0x00,0x00,0x04,0x01,0x3E,0xFF,0x00,0x01,0x7F,0x09,0x00,0x7D,0x3E,0x01,0x00,0x45,0x3E,0x7D,0x00,0x45,0x22,0x45,0x3F,0x7D,0x22,0x45,0x22,0x01,0x3E,0x0F,0x22,0x02},
{0xB5,0xFD,0x00,0x00,0x04,0x02,0x3E,0xFF,0x00,0x08,0x7F,0x08,0x00,0x08,0x3E,0x68,0x00,0x4A,0x3E,0x4F,0x00,0x48,0x22,0x48,0x3F,0x48,0x22,0x48,0x22,0x4A,0x3E,0xFF,0x22,0x00},
{0xB5,0xFE,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x10,0x7F,0x12,0x00,0xFF,0x3E,0x10,0x00,0x10,0x3E,0x10,0x00,0x92,0x22,0xFF,0x3E,0x82,0x22,0x82,0x22,0x82,0x3E,0xFE,0x22,0x82},
{0xB6,0x40,0x00,0x00,0x04,0x02,0x3E,0xFF,0x00,0x22,0x7F,0x22,0x00,0x22,0x3E,0x42,0x00,0x5C,0x3E,0x88,0x00,0x02,0x22,0xFF,0x3E,0x82,0x22,0x82,0x22,0x82,0x3E,0xFE,0x22,0x82},
{0xB6,0x41,0x00,0x00,0x04,0x44,0x3E,0x7E,0x00,0x44,0x7F,0x44,0x00,0x44,0x3E,0x7C,0x00,0x44,0x3E,0x44,0x00,0x44,0x22,0x7C,0x3F,0x44,0x22,0x44,0x22,0x44,0x3E,0xFF,0x22,0x00},
{0xB6,0x42,0x00,0x00,0x04,0x60,0x3E,0x40,0x00,0x42,0x7F,0x7F,0x00,0xA0,0x3E,0xA4,0x01,0x3E,0x3E,0x20,0x00,0x20,0x22,0x24,0x3E,0x3E,0x22,0x20,0x22,0x20,0x3E,0x20,0x22,0x20},
{0xB6,0x43,0x00,0x00,0x08,0x04,0x3C,0x8E,0x00,0xF8,0x7E,0x88,0x00,0x8A,0x3C,0xFF,0x00,0x88,0x3C,0x88,0x00,0x88,0x24,0x85,0x3C,0xB5,0x25,0xC5,0x24,0x83,0x3C,0x09,0x25,0xFC},
{0xB6,0x44,0x00,0x00,0x04,0x4E,0x3E,0x70,0x00,0x40,0x7F,0x40,0x00,0x42,0x3E,0x7F,0x00,0x44,0x3E,0x54,0x00,0x4C,0x22,0x46,0x3F,0x47,0x22,0x45,0x22,0x84,0x3E,0x84,0x22,0x84},
{0xB6,0x45,0x00,0x00,0x04,0x30,0x3E,0x28,0x00,0x48,0x7F,0x44,0x00,0x84,0x3E,0x9B,0x01,0x10,0x3E,0x20,0x00,0xCC,0x22,0x08,0x3F,0x10,0x22,0x66,0x22,0x04,0x3E,0x18,0x22,0x60},
{0xB6,0x46,0x00,0x00,0x04,0x00,0x3E,0x02,0x00,0xFF,0x7F,0x04,0x00,0x04,0x3E,0x94,0x00,0xF4,0x3E,0x94,0x00,0x94,0x22,0xF4,0x3E,0x94,0x22,0x04,0x22,0x04,0x3E,0x1C,0x22,0x08},
{0xB6,0x47,0x00,0x00,0x04,0x0C,0x3E,0x08,0x00,0x4A,0x7F,0x7F,0x00,0x4A,0x3E,0x48,0x00,0x48,0x3E,0x7E,0x00,0x62,0x22,0x54,0x3F,0x54,0x22,0x48,0x22,0x94,0x3E,0x92,0x22,0xA1},
{0xB6,0x48,0x00,0x00,0x04,0x00,0x0F,0xE0,0x10,0x44,0x7F,0xFE,0x10,0x84,0x10,0x84,0x1F,0xFC,0x11,0x04,0x07,0x00,0x79,0x8C,0x06,0xC8,0x79,0xB0,0x06,0x8C,0x78,0x83,0x03,0x00},
{0xB6,0x49,0x00,0x00,0x18,0x02,0x12,0xFF,0x2A,0x22,0x54,0x22,0x08,0x22,0x14,0x42,0x66,0x5C,0x0A,0x88,0x12,0x02,0x66,0xFF,0x0A,0x82,0x72,0x82,0x04,0x82,0x38,0xFE,0x10,0x82},
{0xB6,0x4A,0x00,0x00,0x44,0x30,0x7D,0x22,0x45,0xFF,0x45,0x02,0x7E,0x04,0x44,0x02,0x45,0xFF,0x7C,0x10,0x44,0x10,0x44,0x10,0x7C,0x10,0x44,0x10,0x28,0x90,0x24,0x70,0x44,0x20},
{0xB6,0x4B,0x00,0x00,0x44,0x30,0x7E,0x20,0x44,0x20,0x44,0x22,0x7C,0x3F,0x44,0x20,0x44,0x20,0x7D,0x22,0x45,0xFF,0x45,0x02,0x7D,0x02,0x45,0x02,0x29,0x02,0x25,0xFE,0x45,0x02},
{0xB6,0x4C,0x00,0x00,0x00,0x28,0x00,0x24,0x7F,0xFF,0x00,0x20,0x3F,0x20,0x00,0x20,0x7F,0xA0,0x21,0x10,0x3F,0x10,0x21,0x10,0x3F,0x09,0x21,0x09,0x3F,0x05,0x12,0x03,0x61,0x81},
{0xB6,0x4D,0x00,0x00,0x44,0x30,0x7E,0x20,0x44,0x24,0x44,0x44,0x7C,0x42,0x45,0xFD,0x44,0x81,0x7C,0x00,0x44,0x82,0x44,0xFF,0x7C,0x82,0x44,0x82,0x28,0x82,0x24,0xFE,0x44,0x82},
{0xB6,0x4E,0x00,0x00,0x00,0x80,0x1F,0xFC,0x04,0x90,0x7F,0xFF,0x04,0x10,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x00,0x00,0x0E,0x18,0x70,0x07},
{0xB6,0x4F,0x00,0x00,0x02,0x40,0x7F,0xFC,0x02,0x44,0x1F,0xFC,0x12,0x40,0x3F,0xFF,0x24,0x41,0x08,0x07,0x1F,0xFA,0x68,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x20,0x1C,0x1C},
{0xB6,0x50,0x00,0x00,0x10,0x42,0x7F,0x7F,0x11,0x42,0x11,0x42,0x27,0x7E,0x22,0x42,0x4F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB6,0x51,0x00,0x00,0x00,0x80,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x30,0x0C,0x0C,0x30,0x04},
{0xB6,0x52,0x00,0x00,0x20,0x02,0x3F,0xFF,0x22,0x22,0x22,0x22,0x3F,0xFE,0x20,0x02,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB6,0x53,0x00,0x00,0x44,0x1E,0x7D,0xE0,0x44,0x00,0x44,0x30,0x7C,0x24,0x45,0xFE,0x44,0x04,0x7C,0x08,0x44,0x10,0x44,0x20,0x7C,0x40,0x45,0x80,0x29,0x40,0x26,0x31,0x44,0x0E},
{0xB6,0x54,0x00,0x00,0x13,0x02,0x1C,0x7F,0x10,0x22,0x13,0x22,0x7C,0x4E,0x20,0x84,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB6,0x55,0x00,0x00,0x0C,0xD0,0x08,0x88,0x10,0xFC,0x77,0x41,0x10,0x31,0x10,0x0F,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB6,0x56,0x00,0x00,0x0C,0x14,0x08,0x12,0x3E,0x90,0x08,0xFE,0x08,0x90,0x7E,0x96,0x08,0x94,0x28,0x88,0x2E,0xA8,0x28,0xC9,0x29,0x95,0x38,0x93,0x2C,0x20,0x43,0x03,0x40,0xFC},
{0xB6,0x57,0x00,0x00,0x0C,0x02,0x08,0xFF,0x3E,0x22,0x08,0x22,0x0A,0x42,0x7F,0x4E,0x08,0x80,0x28,0x42,0x2A,0x7F,0x2F,0x42,0x28,0x42,0x28,0x7E,0x58,0x42,0x46,0x00,0x41,0xFF},
{0xB6,0x58,0x00,0x00,0x0C,0x30,0x08,0x28,0x3E,0x48,0x08,0x44,0x0A,0x9A,0x7F,0x11,0x08,0x20,0x28,0xCC,0x2A,0x10,0x2F,0x20,0x28,0xC6,0x28,0x08,0x58,0x10,0x46,0x63,0x41,0xFC},
{0xB6,0x59,0x00,0x00,0x22,0x18,0x3E,0x92,0x22,0xFF,0x22,0x82,0x23,0x04,0x3E,0x60,0x2A,0x40,0x08,0x46,0x2A,0x48,0x2F,0x70,0x28,0x40,0x28,0x42,0x2F,0x42,0x78,0x43,0x20,0x3E},
{0xB6,0x5A,0x00,0x00,0x22,0x42,0x3F,0x7F,0x22,0x40,0x22,0x40,0x22,0x42,0x3E,0x7F,0x2A,0x42,0x08,0x42,0x2A,0x42,0x2F,0x7E,0x28,0x42,0x28,0x40,0x2F,0x42,0x78,0x7F,0x20,0x40},
{0xB6,0x5B,0x00,0x00,0x22,0x34,0x3F,0x22,0x22,0x22,0x22,0x20,0x22,0xFF,0x3E,0x40,0x2A,0x46,0x08,0x64,0x28,0x94,0x2E,0x94,0x28,0x88,0x29,0x14,0x2E,0x14,0x78,0x22,0x20,0xC1},
{0xB6,0x5C,0x00,0x00,0x44,0x82,0x7E,0xFF,0x44,0xAA,0x44,0xAA,0x44,0xAA,0x7C,0xAA,0x54,0xAA,0x11,0xFF,0x54,0xAA,0x5E,0xAA,0x50,0xAA,0x52,0xAA,0x5C,0xAA,0x71,0x02,0x41,0x06},
{0xB6,0x5D,0x00,0x00,0x22,0x60,0x3E,0x42,0x22,0xFF,0x22,0x82,0x23,0x02,0x3E,0xF2,0x2A,0x92,0x08,0x92,0x28,0xF2,0x2E,0x82,0x28,0x9C,0x28,0x89,0x2E,0x81,0x78,0x81,0x20,0x7E},
{0xB6,0x5E,0x00,0x00,0x22,0x0C,0x3F,0x68,0x22,0x48,0x22,0x7E,0x22,0x88,0x3E,0x88,0x2A,0x0A,0x08,0xFF,0x2A,0x08,0x2F,0x14,0x28,0x14,0x28,0x24,0x2F,0x22,0x78,0x42,0x20,0x81},
{0xB6,0x5F,0x00,0x00,0x22,0x0C,0x3F,0x49,0x22,0x7F,0x22,0x49,0x22,0x4A,0x3E,0x48,0x2A,0x7F,0x08,0x62,0x2A,0x52,0x2F,0x52,0x28,0x54,0x29,0x48,0x2E,0x94,0x78,0x92,0x21,0x21},
{0xB6,0x60,0x00,0x00,0x22,0x18,0x3F,0x10,0x22,0x10,0x22,0x24,0x22,0x22,0x3E,0xFD,0x2A,0x41,0x08,0x00,0x2A,0x42,0x2F,0x7F,0x28,0x42,0x29,0x42,0x2E,0x42,0x78,0x7E,0x20,0x42},
{0xB6,0x61,0x00,0x00,0x18,0x02,0x11,0xFF,0x7C,0x04,0x10,0x04,0x7C,0x94,0x54,0xF4,0x7C,0x94,0x54,0x94,0x7C,0x94,0x54,0xF4,0x10,0x94,0x7E,0x04,0x10,0x04,0x10,0x1C,0x10,0x08},
{0xB6,0x62,0x00,0x00,0x0C,0x18,0x08,0x10,0x7E,0x92,0x08,0xFF,0x7E,0x92,0x4A,0x92,0x7E,0x92,0x4A,0xFE,0x7E,0x92,0x4A,0x92,0x08,0x92,0x7E,0x92,0x08,0xFE,0x08,0x82,0x08,0x00},
{0xB6,0x63,0x00,0x00,0x0C,0x18,0x08,0xD0,0x7E,0x94,0x08,0xFE,0x7E,0x90,0x4B,0x10,0x7E,0x12,0x4A,0xFF,0x7E,0x10,0x4A,0x10,0x08,0x28,0x7F,0x28,0x08,0x44,0x08,0x44,0x08,0x82},
{0xB6,0x64,0x00,0x00,0x00,0x84,0x7F,0xFE,0x00,0x80,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x04,0x10,0x02,0x22,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x80},
{0xB6,0x65,0x00,0x00,0x20,0x20,0x19,0xFC,0x00,0x24,0x43,0xFF,0x30,0x24,0x01,0xFC,0x00,0x20,0x13,0x2C,0x78,0x70,0x13,0xA8,0x12,0x26,0x10,0xE0,0x18,0x40,0x66,0x03,0x41,0xFC},
{0xB6,0x66,0x00,0x00,0x20,0x20,0x19,0xFC,0x00,0x20,0x43,0xFE,0x30,0x88,0x01,0x09,0x06,0x37,0x10,0x20,0x79,0xFC,0x10,0x20,0x10,0x24,0x13,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB6,0x67,0x00,0x00,0x22,0x02,0x1B,0xFF,0x02,0x22,0x42,0xFA,0x32,0x22,0x02,0xFA,0x02,0x02,0x12,0xFA,0x7A,0x8A,0x12,0xFA,0x14,0x02,0x14,0x0E,0x18,0x04,0x66,0x03,0x41,0xFC},
{0xB6,0x68,0x00,0x00,0x20,0x80,0x18,0xF8,0x01,0x10,0x42,0x24,0x37,0xFE,0x02,0x44,0x02,0x44,0x13,0xFC,0x7A,0xA4,0x10,0xB0,0x10,0xAA,0x11,0x23,0x19,0x1E,0x66,0x00,0x41,0xFF},
{0xB6,0x69,0x00,0x00,0x20,0xCC,0x18,0x88,0x01,0x10,0x41,0xFE,0x33,0x10,0x05,0x10,0x01,0xFC,0x11,0x10,0x79,0xFC,0x11,0x10,0x11,0x10,0x11,0xFE,0x19,0x00,0x66,0x03,0x41,0xFC},
{0xB6,0x6A,0x00,0x00,0x20,0x3C,0x1B,0xE0,0x00,0x22,0x47,0xFF,0x30,0x60,0x01,0xB8,0x06,0x27,0x10,0x40,0x7B,0xFF,0x10,0x44,0x11,0x88,0x10,0x70,0x18,0x48,0x66,0x84,0x41,0xFE},
{0xB6,0x6B,0x00,0x00,0x4A,0x52,0x7B,0xDF,0x4A,0x52,0x7B,0xD2,0x4A,0x54,0x00,0x14,0x3F,0x92,0x00,0x12,0x7F,0xD1,0x10,0x11,0x3F,0x91,0x20,0x9E,0x08,0x94,0x07,0x10,0x02,0x10},
{0xB6,0x6C,0x00,0x00,0x07,0xD2,0x7C,0x1F,0x04,0x12,0x7F,0xD2,0x24,0x94,0x24,0x94,0x7F,0xD2,0x24,0x92,0x24,0x91,0x7F,0xD1,0x04,0x11,0x07,0xDE,0x7C,0x14,0x20,0x10,0x00,0x10},
{0xB6,0x6D,0x00,0x00,0x18,0xC0,0x10,0x89,0x21,0x0F,0x6D,0xE9,0x29,0x29,0x11,0xEA,0x17,0x2A,0x25,0xE9,0x79,0x29,0x29,0x09,0x09,0xEF,0x11,0x0A,0x11,0xE8,0x21,0x08,0x40,0x08},
{0xB6,0x6E,0x00,0x00,0x40,0x92,0x7F,0xDF,0x48,0x92,0x4F,0x92,0x48,0x94,0x4F,0x94,0x44,0x12,0x5F,0xD2,0x44,0x91,0x4D,0x11,0x42,0x11,0x45,0x9E,0x48,0x94,0x7F,0xD0,0x40,0x10},
{0xB6,0x6F,0x00,0x00,0x01,0x33,0x7F,0xA2,0x14,0x22,0x55,0x22,0x7F,0x7F,0x55,0x22,0x55,0x22,0x67,0x22,0x41,0x3E,0x41,0x22,0x7F,0x22,0x41,0x22,0x41,0x22,0x7F,0x3E,0x41,0x22},
{0xB6,0x70,0x00,0x00,0x02,0x0E,0x7F,0x78,0x14,0x08,0x55,0x08,0x7F,0x8A,0x55,0x7F,0x55,0x08,0x67,0x18,0x41,0x18,0x41,0x2C,0x7F,0x2A,0x41,0x49,0x41,0x08,0x7F,0x08,0x41,0x08},
{0xB6,0x71,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x02,0x7F,0xFF,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB6,0x72,0x00,0x00,0x0C,0x0C,0x0A,0x08,0x12,0x08,0x11,0x6A,0x3F,0x4A,0x48,0x49,0x08,0x89,0x7F,0x38,0x08,0x13,0x4B,0x02,0x2C,0x04,0x29,0x08,0x0E,0x10,0x78,0x60,0x21,0x80},
{0xB6,0x73,0x00,0x00,0x0C,0x04,0x0A,0xFE,0x12,0x24,0x11,0x24,0x3E,0x24,0x48,0x24,0x08,0x24,0x7E,0xFF,0x08,0x24,0x4A,0x24,0x2C,0x24,0x28,0x44,0x0E,0x44,0x78,0x44,0x21,0xFF},
{0xB6,0x74,0x00,0x00,0x0C,0x02,0x0A,0xFF,0x12,0x10,0x11,0x10,0x3E,0x54,0x48,0x5E,0x08,0x50,0x7E,0x92,0x08,0xFF,0x4A,0x82,0x2C,0x02,0x28,0x02,0x0E,0x04,0x78,0x38,0x20,0x10},
{0xB6,0x75,0x00,0x00,0x0C,0x08,0x0A,0x7C,0x12,0x08,0x11,0x49,0x3F,0x7F,0x48,0x49,0x08,0x49,0x7F,0x55,0x08,0x55,0x4B,0x63,0x2C,0x41,0x28,0x41,0x0E,0x41,0x78,0x47,0x20,0x42},
{0xB6,0x76,0x00,0x00,0x0C,0x30,0x0A,0x20,0x12,0x22,0x11,0x7F,0x3F,0x42,0x48,0x82,0x08,0x12,0x7F,0x7A,0x08,0x02,0x4B,0x12,0x2C,0x7A,0x28,0x02,0x0F,0x02,0x78,0x1C,0x20,0x08},
{0xB6,0x77,0x00,0x00,0x0C,0x18,0x0A,0x10,0x12,0x12,0x11,0xFF,0x3E,0x10,0x48,0xD3,0x08,0x92,0x7E,0x92,0x08,0x92,0x4A,0xFE,0x2C,0x92,0x28,0x10,0x0E,0x11,0x78,0x11,0x20,0x0E},
{0xB6,0x78,0x00,0x00,0x0C,0x30,0x0A,0x28,0x12,0x48,0x11,0x44,0x3E,0x84,0x48,0xBB,0x09,0x00,0x7E,0x04,0x08,0xFE,0x4A,0x04,0x2C,0x04,0x28,0x08,0x0E,0x08,0x78,0x10,0x20,0x10},
{0xB6,0x79,0x00,0x00,0x0C,0x18,0x0A,0x10,0x12,0x14,0x11,0x7E,0x3E,0x10,0x48,0x10,0x08,0x12,0x7E,0xFF,0x08,0x10,0x4A,0x28,0x2C,0x28,0x28,0x48,0x0E,0x44,0x78,0x84,0x21,0x03},
{0xB6,0x7A,0x00,0x00,0x0C,0x00,0x0A,0x82,0x12,0xFF,0x11,0x80,0x3E,0x80,0x48,0x82,0x08,0xFF,0x7E,0xA2,0x08,0xA2,0x4A,0x94,0x2C,0x88,0x28,0x94,0x0E,0x94,0x79,0x22,0x21,0x41},
{0xB6,0x7B,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x20,0x82,0x2F,0xFA,0x22,0x22,0x21,0x42,0x20,0x82,0x23,0x62,0x2C,0x1A,0x20,0x06},
{0xB6,0x7C,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x27,0xF2,0x20,0x82,0x27,0xF2,0x20,0x82,0x2F,0xFA,0x20,0x02,0x20,0x0E,0x20,0x04},
{0xB6,0x7D,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x27,0xF2,0x22,0x22,0x22,0x22,0x2F,0xFA,0x22,0x22,0x22,0x22,0x24,0x2E,0x20,0x04},
{0xB6,0x7E,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x21,0x42,0x20,0x02,0x20,0x82,0x2F,0xFA,0x21,0x82,0x22,0xE2,0x2C,0x9A,0x20,0x82,0x20,0x06},
{0xB6,0xA1,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x21,0x42,0x20,0x02,0x27,0xE2,0x24,0x22,0x27,0xE2,0x24,0x22,0x27,0xE2,0x20,0x0E,0x20,0x04},
{0xB6,0xA2,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x23,0xE2,0x22,0x22,0x23,0xE2,0x22,0x22,0x23,0xE2,0x24,0x22,0x24,0x6E,0x20,0x04},
{0xB6,0xA3,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x21,0x22,0x2F,0xF2,0x22,0x02,0x22,0x82,0x24,0xC2,0x29,0xA2,0x20,0x2E,0x20,0x04},
{0xB6,0xA4,0x00,0x00,0x44,0x08,0x7E,0x8C,0x44,0x48,0x48,0x50,0x4B,0xFE,0x50,0x40,0x48,0xA0,0x4B,0x26,0x44,0x54,0x45,0x98,0x78,0x34,0x50,0xD3,0x43,0x10,0x40,0x70,0x40,0x20},
{0xB6,0xA5,0x00,0x00,0x49,0x98,0x7D,0x10,0x49,0xD6,0x49,0x18,0x51,0x51,0x53,0x91,0x49,0x0F,0x48,0x30,0x45,0x44,0x45,0xFE,0x79,0x04,0x51,0xFC,0x41,0x04,0x41,0xFC,0x41,0x04},
{0xB6,0xA6,0x00,0x00,0x48,0x60,0x7C,0x42,0x4B,0xFF,0x48,0x80,0x51,0x7C,0x56,0x10,0x49,0xFF,0x48,0x00,0x44,0xFE,0x44,0x82,0x78,0xFE,0x50,0x82,0x40,0xFE,0x40,0x82,0x40,0x86},
{0xB6,0xA7,0x00,0x00,0x49,0xF8,0x7D,0x08,0x49,0xF8,0x49,0x08,0x51,0xF8,0x50,0x02,0x4B,0xFF,0x48,0x80,0x44,0xFE,0x45,0x2A,0x7A,0x4A,0x51,0x92,0x40,0x22,0x40,0xDC,0x40,0x08},
{0xB6,0xA8,0x00,0x00,0x48,0x82,0x7C,0xFF,0x48,0x92,0x48,0xFE,0x50,0x92,0x50,0xFE,0x48,0x92,0x49,0x11,0x47,0xFF,0x45,0x11,0x79,0x19,0x51,0x75,0x41,0x21,0x41,0x0F,0x41,0x02},
{0xB6,0xA9,0x00,0x00,0x48,0x80,0x7C,0xFE,0x48,0x84,0x49,0x48,0x52,0x30,0x50,0xCC,0x4B,0x7B,0x48,0x00,0x44,0x90,0x44,0xFC,0x79,0x10,0x52,0xFC,0x40,0x10,0x40,0x12,0x43,0xFF},
{0xB6,0xAA,0x00,0x00,0x48,0x30,0x7D,0x44,0x49,0xFE,0x49,0x04,0x51,0xFC,0x51,0x04,0x49,0xFC,0x49,0x04,0x44,0x00,0x47,0xFE,0x78,0x20,0x51,0xFC,0x40,0x20,0x40,0x22,0x47,0xFF},
{0xB6,0xAB,0x00,0x00,0x48,0x3C,0x7D,0xE0,0x48,0x20,0x48,0x20,0x53,0xFE,0x51,0x24,0x49,0x24,0x4B,0xFF,0x45,0x24,0x45,0x24,0x79,0x24,0x53,0xFE,0x40,0x20,0x40,0x22,0x47,0xFF},
{0xB6,0xAC,0x00,0x00,0x48,0x84,0x7C,0xFE,0x48,0x84,0x48,0xFC,0x50,0x84,0x50,0xFC,0x48,0x84,0x48,0x00,0x47,0xFF,0x44,0x20,0x79,0xA4,0x51,0x3E,0x41,0xA0,0x42,0x60,0x44,0x1F},
{0xB6,0xAD,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x00,0x23,0x6C,0x22,0x48,0x24,0x90,0x24,0xFE,0x2D,0x90,0x36,0xFE,0x24,0x90,0x24,0xFE,0x24,0x90,0x44,0x92,0x44,0xFF,0x44,0x80},
{0xB6,0xAE,0x00,0x00,0x04,0x6C,0x7E,0x48,0x08,0x90,0x28,0xFE,0x28,0x88,0x49,0x88,0x7E,0xFE,0x4A,0x88,0x18,0x88,0x28,0xFE,0x28,0x88,0x48,0x88,0x08,0x88,0x38,0xFF,0x10,0x80},
{0xB6,0xAF,0x00,0x00,0x18,0x6C,0x10,0x48,0x12,0x50,0x7F,0x7E,0x10,0xC8,0x10,0xC8,0x15,0x7E,0x14,0x48,0x24,0x48,0x24,0x7E,0x28,0x48,0x2A,0x48,0x5D,0x4A,0x49,0x7F,0x40,0x40},
{0xB6,0xB0,0x00,0x00,0x0C,0xC0,0x09,0x00,0x1F,0xFC,0x10,0x80,0x3F,0xF8,0x50,0x80,0x1F,0xF8,0x10,0x80,0x1F,0xFE,0x00,0x80,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB6,0xB1,0x00,0x00,0x3F,0xFE,0x20,0x00,0x3F,0xFC,0x20,0x04,0x3F,0xFC,0x23,0x10,0x22,0x20,0x27,0xFE,0x2C,0x40,0x37,0xFC,0x24,0x40,0x27,0xFC,0x44,0x40,0x47,0xFF,0x44,0x00},
{0xB6,0xB2,0x00,0x00,0x00,0x10,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x4E,0xB8,0x00,0x80,0x0E,0x38,0x00,0x82,0x7F,0xFF,0x04,0x10,0x02,0x20,0x01,0xC0,0x06,0x30,0x78,0x0E},
{0xB6,0xB3,0x00,0x00,0x00,0x10,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x4E,0xB8,0x00,0x80,0x0E,0xB8,0x00,0x00,0x0F,0xF8,0x00,0x02,0x7F,0xFF,0x02,0x10,0x1F,0xFC,0x08,0x04},
{0xB6,0xB4,0x00,0x00,0x08,0x02,0x7E,0xFF,0x12,0x12,0x7F,0x12,0x00,0x12,0x3E,0x92,0x22,0x72,0x3E,0x32,0x08,0x12,0x7E,0x22,0x28,0x22,0x7F,0x24,0x08,0x44,0x08,0x5C,0x08,0x88},
{0xB6,0xB5,0x00,0x00,0x00,0x02,0x05,0xFF,0x7E,0x10,0x10,0xA2,0x10,0xFF,0x10,0x82,0x10,0xFE,0x10,0x82,0x12,0xFE,0x1C,0x82,0x70,0xFE,0x20,0x82,0x00,0x64,0x00,0x83,0x03,0x01},
{0xB6,0xB6,0x00,0x00,0x22,0x02,0x2A,0xFF,0x2A,0x10,0x2A,0xA2,0x2A,0xFF,0x2A,0x82,0x2A,0xFE,0x2A,0x82,0x2A,0xFE,0x2A,0x82,0x2A,0xFE,0x4A,0x82,0x42,0x64,0x00,0x83,0x03,0x01},
{0xB6,0xB7,0x00,0x00,0x0C,0x02,0x09,0xFF,0x10,0x10,0x60,0xA2,0x06,0xFF,0x04,0x82,0x08,0xFE,0x10,0x82,0x60,0xFE,0x06,0x82,0x04,0xFE,0x08,0x82,0x30,0x64,0x40,0x83,0x03,0x01},
{0xB6,0xB8,0x00,0x00,0x18,0x30,0x10,0x28,0x12,0x44,0x1E,0xBA,0x13,0x01,0x22,0xFC,0x24,0x84,0x54,0xFC,0x14,0x84,0x08,0xFC,0x08,0x90,0x10,0x8B,0x10,0xEA,0x23,0x84,0x41,0x03},
{0xB6,0xB9,0x00,0x00,0x0C,0x0C,0x0A,0x1E,0x11,0x70,0x1D,0x10,0x20,0x10,0x7E,0x10,0x22,0x12,0x3E,0xFF,0x22,0x10,0x3E,0x10,0x20,0x10,0x3E,0x10,0x20,0x10,0x3E,0x14,0x20,0xFE},
{0xB6,0xBA,0x00,0x00,0x0C,0x42,0x0A,0x7F,0x11,0x40,0x1D,0x40,0x20,0x42,0x7E,0x7F,0x22,0x52,0x3E,0x52,0x22,0x54,0x3E,0x4C,0x20,0x48,0x3E,0x54,0x20,0x54,0x3E,0x92,0x20,0xA1},
{0xB6,0xBB,0x00,0x00,0x0C,0x10,0x0A,0x17,0x12,0x38,0x1D,0xD0,0x20,0x10,0x7E,0xD3,0x22,0x92,0x3E,0x92,0x22,0x92,0x3E,0xFE,0x20,0x92,0x3E,0x10,0x20,0x11,0x3E,0x11,0x20,0x0F},
{0xB6,0xBC,0x00,0x00,0x0C,0x30,0x0A,0x20,0x11,0x22,0x1D,0x3F,0x20,0x42,0x7E,0x44,0x22,0x98,0x3E,0x10,0x22,0x10,0x3E,0x28,0x20,0x28,0x3E,0x24,0x20,0x44,0x3E,0x42,0x20,0x81},
{0xB6,0xBD,0x00,0x00,0x0C,0x30,0x0A,0x20,0x12,0x42,0x1C,0x7F,0x20,0x80,0x7E,0x30,0x22,0x22,0x3E,0x7F,0x22,0x22,0x3E,0x22,0x20,0x22,0x3E,0x22,0x20,0x42,0x3E,0x5C,0x20,0x88},
{0xB6,0xBE,0x00,0x00,0x02,0x04,0x43,0xFE,0x42,0x20,0x23,0xFC,0x2A,0x20,0x0B,0xFC,0x12,0x20,0x12,0x22,0x13,0xFF,0x62,0x12,0x20,0x4A,0x25,0x2A,0x64,0xA2,0x28,0x9C,0x00,0x08},
{0xB6,0xBF,0x00,0x00,0x44,0x04,0x7E,0xFE,0x48,0x84,0x7E,0x44,0x48,0x44,0x7E,0x44,0x48,0x48,0x49,0x28,0x7F,0xA8,0x45,0x10,0x2B,0x10,0x55,0x28,0x41,0x28,0x0E,0x44,0x04,0x83},
{0xB6,0xC0,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x03,0xE0,0x00,0x02,0x7F,0xFF,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x04,0x10,0x18,0x0E,0x60,0x02},
{0xB6,0xC1,0x00,0x00,0x00,0xFC,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x04,0x90,0x18,0x8E,0x61,0xC2,0x06,0x30,0x18,0xCC,0x6E,0x8B,0x01,0xD0,0x06,0xB0,0x38,0x8C,0x13,0x84,0x01,0x00},
{0xB6,0xC2,0x00,0x00,0x10,0x04,0x1F,0xFE,0x10,0x84,0x14,0x94,0x12,0xA4,0x1F,0xFC,0x10,0x84,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xB6,0xC3,0x00,0x00,0x07,0x98,0x3C,0x90,0x44,0x50,0x3F,0x90,0x09,0x10,0x06,0x10,0x7F,0xD0,0x44,0x50,0x4A,0x50,0x5D,0x50,0x40,0x50,0x5F,0x52,0x4A,0x52,0x44,0x53,0x5A,0xCE},
{0xB6,0xC4,0x00,0x00,0x0C,0x30,0x0A,0x22,0x0B,0xFF,0x12,0x12,0x1B,0xFF,0x32,0x12,0x52,0x7E,0x12,0x10,0x12,0xFF,0x12,0x91,0x12,0xFF,0x12,0x91,0x14,0xFF,0x14,0x91,0x14,0x97},
{0xB6,0xC5,0x00,0x00,0x0C,0x30,0x08,0x20,0x0B,0xFE,0x10,0x20,0x19,0xFC,0x30,0x20,0x57,0xFF,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x10,0x88,0x13,0x06},
{0xB6,0xC6,0x00,0x00,0x0D,0x8C,0x09,0x08,0x0F,0xC8,0x11,0x08,0x19,0x1F,0x33,0x91,0x50,0x12,0x11,0x2A,0x17,0xCA,0x12,0x04,0x13,0xC4,0x12,0x4A,0x12,0x4A,0x14,0x52,0x15,0xA1},
{0xB6,0xC7,0x00,0x00,0x0C,0x20,0x0B,0xFE,0x08,0x20,0x11,0xFC,0x19,0x24,0x31,0xFC,0x51,0x24,0x11,0xFC,0x10,0x24,0x13,0xFA,0x10,0x04,0x17,0xFF,0x11,0x04,0x10,0xC4,0x10,0x0C},
{0xB6,0xC8,0x00,0x00,0x0C,0xCC,0x08,0x88,0x0B,0xFF,0x10,0x88,0x18,0xF8,0x30,0x20,0x51,0xFC,0x11,0x24,0x11,0xFC,0x10,0x20,0x13,0xFE,0x10,0x20,0x11,0xFC,0x10,0x20,0x17,0xFF},
{0xB6,0xC9,0x00,0x00,0x0C,0x02,0x08,0x7F,0x10,0x04,0x16,0x08,0x14,0x3F,0x35,0xA1,0x55,0x3F,0x16,0x21,0x14,0xBF,0x14,0xA1,0x14,0xA1,0x13,0xBF,0x10,0x12,0x10,0x21,0x10,0xC1},
{0xB6,0xCA,0x00,0x00,0x0C,0x30,0x09,0xA3,0x09,0x22,0x11,0xFE,0x19,0x02,0x30,0xC8,0x51,0x10,0x13,0xFE,0x1D,0x10,0x11,0xFE,0x11,0x10,0x11,0xFE,0x11,0x10,0x11,0xFF,0x11,0x00},
{0xB6,0xCB,0x00,0x00,0x0D,0x80,0x09,0x04,0x0B,0xFE,0x15,0x08,0x11,0xF8,0x31,0x08,0x51,0xF8,0x10,0x02,0x17,0xFF,0x10,0x80,0x11,0xFE,0x16,0x4A,0x10,0x92,0x13,0x6E,0x10,0x04},
{0xB6,0xCC,0x00,0x00,0x0C,0x60,0x08,0x80,0x0B,0xFC,0x12,0x94,0x1A,0x64,0x32,0x94,0x53,0xFC,0x10,0x91,0x11,0x11,0x16,0x8F,0x11,0xF8,0x16,0x88,0x10,0x70,0x10,0x98,0x17,0x07},
{0xB6,0xCD,0x00,0x00,0x0C,0x60,0x0A,0x84,0x0B,0xFE,0x12,0x14,0x1B,0xA4,0x32,0x6C,0x52,0x94,0x12,0x2C,0x13,0xFC,0x12,0x04,0x11,0x40,0x15,0x22,0x15,0x29,0x19,0x09,0x10,0xF0},
{0xB6,0xCE,0x00,0x00,0x0C,0x42,0x0B,0xDF,0x09,0x4A,0x12,0x52,0x18,0xC6,0x33,0x5A,0x50,0x60,0x11,0x98,0x16,0x27,0x10,0xC0,0x13,0x18,0x10,0x60,0x13,0x8C,0x10,0x30,0x11,0xC0},
{0xB6,0xCF,0x00,0x00,0x24,0x83,0x49,0x02,0x24,0x9A,0x00,0x12,0x3F,0x92,0x24,0x92,0x3F,0x92,0x24,0x92,0x3F,0x92,0x04,0x12,0x7F,0xD2,0x0D,0x02,0x14,0xC2,0x64,0x4E,0x04,0x04},
{0xB6,0xD0,0x00,0x00,0x02,0x03,0x3F,0xC2,0x09,0x1A,0x06,0x12,0x29,0x12,0x3F,0xD2,0x22,0x12,0x2A,0x12,0x2F,0xD2,0x32,0x12,0x2F,0xC2,0x22,0x02,0x43,0xD2,0x5E,0x0E,0x48,0x04},
{0xB6,0xD1,0x00,0x00,0x00,0x83,0x7F,0xC2,0x0A,0x1A,0x7F,0xD2,0x4A,0x52,0x7F,0xD2,0x00,0x12,0x3F,0x92,0x00,0x12,0x7F,0xD2,0x04,0x02,0x35,0x02,0x24,0xD2,0x5C,0x4E,0x08,0x04},
{0xB6,0xD2,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x02,0x7F,0xFF,0x09,0x08,0x17,0xF4,0x62,0x13,0x04,0x10,0x18,0xE0},
{0xB6,0xD3,0x00,0x00,0x24,0x98,0x49,0x10,0x24,0x92,0x00,0x7F,0x3F,0x92,0x24,0x92,0x3F,0x92,0x24,0x92,0x3F,0x92,0x04,0x12,0x7F,0x92,0x0D,0x12,0x14,0xA2,0x64,0xAE,0x04,0x44},
{0xB6,0xD4,0x00,0x00,0x11,0x18,0x7F,0x90,0x11,0x10,0x1F,0x12,0x04,0x7F,0x3F,0x92,0x24,0x92,0x3F,0x92,0x04,0x12,0x7F,0x92,0x04,0x12,0x3F,0xA2,0x04,0x22,0x7F,0xAE,0x20,0x44},
{0xB6,0xD5,0x00,0x00,0x08,0x30,0x3E,0x24,0x08,0xFE,0x7F,0x24,0x24,0xA4,0x4B,0x65,0x3E,0x33,0x08,0x49,0x7E,0x80,0x01,0x04,0x7F,0xFE,0x02,0x04,0x04,0x04,0x18,0x78,0x60,0x10},
{0xB6,0xD6,0x00,0x00,0x06,0x18,0x04,0x10,0x7F,0xD0,0x04,0x12,0x3F,0xBF,0x04,0x12,0x7F,0xD2,0x20,0x92,0x3F,0x92,0x20,0x92,0x3F,0x92,0x20,0x92,0x3F,0xA2,0x12,0x2E,0x61,0xA4},
{0xB6,0xD7,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x00,0x51,0x98,0x49,0x20,0x43,0xFE,0x65,0x20,0x51,0xFC,0x43,0x20,0x45,0xFC,0x59,0x20,0x49,0xFE,0x49,0x00,0x7F,0xFF,0x40,0x00},
{0xB6,0xD8,0x00,0x00,0x01,0x0C,0x00,0xC8,0x48,0x50,0x7B,0xFE,0x48,0x20,0x49,0xFC,0x48,0x20,0x4F,0xFF,0x49,0x00,0x79,0x04,0x4A,0xFE,0x42,0x10,0x04,0x10,0x08,0x12,0x01,0xFF},
{0xB6,0xD9,0x00,0x00,0x04,0x60,0x52,0x42,0x72,0xFF,0x50,0x80,0x59,0x7E,0x54,0x42,0x55,0x52,0x51,0x4A,0x72,0xFF,0x52,0x42,0x4C,0x92,0x04,0x8A,0x05,0xFF,0x04,0x04,0x04,0x1C},
{0xB6,0xDA,0x00,0x00,0x00,0xF8,0x48,0x48,0x7C,0x30,0x48,0x4C,0x48,0x84,0x4B,0xDE,0x4A,0x52,0x49,0x8C,0x79,0x4A,0x4A,0x52,0x47,0xFF,0x00,0x60,0x01,0xB8,0x06,0x27,0x00,0x20},
{0xB6,0xDB,0x00,0x00,0x00,0x22,0x4B,0xFF,0x78,0x20,0x4A,0x22,0x4B,0xFF,0x4A,0x02,0x4C,0x30,0x48,0xC0,0x48,0x58,0x78,0x22,0x4B,0xFD,0x40,0x21,0x01,0xA8,0x01,0x26,0x02,0x22},
{0xB6,0xDC,0x00,0x00,0x01,0x04,0x49,0xFE,0x7D,0x20,0x49,0xFC,0x49,0x20,0x49,0xFC,0x49,0x20,0x49,0x22,0x49,0xFF,0x79,0x12,0x48,0x4A,0x45,0x2A,0x04,0xA2,0x08,0x9C,0x00,0x08},
{0xB6,0xDD,0x00,0x00,0x00,0x40,0x49,0xF3,0x78,0x44,0x4F,0xFF,0x48,0x20,0x48,0xFD,0x49,0x81,0x4E,0x7F,0x48,0x00,0x79,0xFC,0x49,0x04,0x41,0xFC,0x01,0x04,0x01,0xFC,0x01,0x04},
{0xB6,0xDE,0x00,0x00,0x00,0x84,0x3F,0xFE,0x08,0x88,0x18,0x98,0x16,0x96,0x22,0xA2,0x7F,0xFF,0x00,0x00,0x3F,0xFC,0x20,0x04,0x27,0xE4,0x24,0x24,0x27,0xE4,0x20,0x04,0x3F,0xFC},
{0xB6,0xDF,0x00,0x00,0x00,0x30,0x48,0x20,0x79,0xFC,0x48,0x20,0x4F,0xFF,0x48,0x48,0x48,0x84,0x4B,0xFA,0x49,0x02,0x78,0x00,0x4B,0xFE,0x42,0x52,0x02,0x52,0x02,0x52,0x0F,0xFF},
{0xB6,0xE0,0x00,0x00,0x22,0x02,0x3F,0x7F,0x22,0x02,0x22,0x12,0x3E,0x7A,0x22,0x02,0x41,0x02,0x7F,0x7A,0x55,0x4A,0x55,0x4A,0x7F,0x7A,0x55,0x4A,0x55,0x02,0x55,0x0E,0x43,0x04},
{0xB6,0xE1,0x00,0x00,0x00,0x30,0x4B,0x23,0x7A,0x22,0x4B,0xFE,0x4A,0x42,0x48,0x80,0x4F,0xFF,0x48,0x20,0x4B,0xFE,0x7A,0x22,0x4B,0xFE,0x40,0x20,0x00,0x24,0x07,0xFB,0x02,0x01},
{0xB6,0xE2,0x00,0x00,0x02,0x04,0x4B,0xFE,0x7A,0x44,0x4A,0xF4,0x4A,0x44,0x4A,0xA4,0x4A,0x94,0x4B,0xFC,0x7A,0x04,0x48,0x40,0x41,0x20,0x05,0x22,0x05,0x09,0x09,0x09,0x00,0xF0},
{0xB6,0xE3,0x00,0x00,0x00,0x60,0x4A,0x88,0x7B,0xFC,0x4A,0x08,0x4A,0x08,0x4B,0xF8,0x4A,0x00,0x4B,0xFF,0x7A,0x00,0x4B,0xFE,0x40,0x12,0x0A,0x4A,0x09,0x22,0x11,0x2E,0x00,0x04},
{0xB6,0xE4,0x00,0x00,0x00,0xD8,0x48,0x88,0x7D,0x24,0x49,0x24,0x4A,0x53,0x48,0xE8,0x48,0x48,0x48,0x00,0x4B,0xDF,0x79,0x45,0x4A,0x49,0x44,0xD3,0x01,0x45,0x06,0x59,0x00,0xC3},
{0xB6,0xE5,0x00,0x00,0x00,0x30,0x49,0x44,0x7D,0xFE,0x49,0x04,0x49,0xFC,0x49,0x04,0x49,0xFC,0x49,0x04,0x49,0xFC,0x79,0x24,0x48,0x22,0x47,0xFF,0x00,0x50,0x01,0x8C,0x06,0x03},
{0xB6,0xE6,0x00,0x00,0x00,0x60,0x48,0xD0,0x7C,0x88,0x49,0x74,0x4A,0x03,0x4D,0xFC,0x49,0x04,0x49,0xFC,0x49,0x04,0x79,0xFC,0x49,0x00,0x42,0xFE,0x02,0x82,0x02,0x82,0x04,0xFE},
{0xB6,0xE7,0x00,0x00,0x00,0x30,0x49,0x44,0x7D,0xFE,0x49,0x04,0x49,0xFC,0x49,0x04,0x49,0xFC,0x49,0x04,0x48,0x40,0x7B,0xFF,0x48,0x88,0x41,0x24,0x06,0xFB,0x00,0x20,0x00,0x20},
{0xB6,0xE8,0x00,0x00,0x00,0x20,0x4B,0xFE,0x78,0x20,0x49,0xFC,0x48,0x20,0x4F,0xFF,0x48,0x20,0x48,0xC8,0x48,0x30,0x78,0x42,0x4B,0xFD,0x40,0x21,0x01,0xA8,0x01,0x26,0x02,0x22},
{0xB6,0xE9,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x27,0xF2,0x20,0x82,0x2F,0xFA,0x22,0x22,0x23,0xE2,0x21,0x02,0x23,0x9A,0x25,0x62,0x29,0x1A,0x21,0x0A,0x3F,0xFE,0x20,0x02},
{0xB6,0xEA,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x23,0xE2,0x22,0x22,0x27,0xF2,0x24,0x12,0x27,0xF2,0x24,0x12,0x27,0xF2,0x21,0x42,0x26,0x32,0x20,0x02,0x3F,0xFE,0x20,0x02},
{0xB6,0xEB,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x42,0x24,0x1F,0xF8,0x02,0x20,0x0F,0xF8,0x02,0x20,0x7F,0xFF,0x04,0x10,0x18,0x8C,0x67,0xF3,0x00,0x80,0x1F,0xFC},
{0xB6,0xEC,0x00,0x00,0x31,0xA2,0x0A,0x3F,0x7F,0xA2,0x04,0x3E,0x35,0xA2,0x25,0x3E,0x3F,0x22,0x29,0x42,0x08,0x4E,0x10,0x44,0x20,0x80,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB6,0xED,0x00,0x00,0x19,0x12,0x11,0xFF,0x11,0x00,0x11,0x10,0x7D,0x7E,0x11,0x12,0x11,0xFF,0x11,0x12,0x11,0x7E,0x1D,0x10,0x71,0x00,0x22,0x7E,0x02,0x42,0x02,0x7E,0x04,0x42},
{0xB6,0xEE,0x00,0x00,0x20,0x60,0x10,0x98,0x45,0x04,0x26,0xFB,0x08,0x20,0x0B,0xFE,0x70,0x20,0x11,0xA8,0x32,0x26,0x14,0x62,0x00,0x88,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB6,0xEF,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x12,0x04,0x7D,0xFE,0x10,0x40,0x10,0xA0,0x13,0x36,0x11,0x54,0x1C,0x8C,0x73,0x5A,0x20,0x6A,0x01,0x89,0x00,0x70,0x00,0x20},
{0xB6,0xF0,0x00,0x00,0x18,0xCC,0x10,0x88,0x17,0xFF,0x10,0x88,0x7C,0x70,0x10,0xC8,0x11,0x04,0x16,0xFB,0x10,0x00,0x15,0xFC,0x19,0x04,0x71,0x04,0x21,0x04,0x01,0xFC,0x01,0x04},
{0xB6,0xF1,0x00,0x00,0x18,0x9C,0x10,0xE1,0x10,0x81,0x10,0x7F,0x7C,0x00,0x10,0x7E,0x11,0x42,0x11,0x7E,0x15,0x42,0x19,0x7E,0x71,0x42,0x21,0xFF,0x01,0x24,0x00,0x43,0x01,0x81},
{0xB6,0xF2,0x00,0x00,0x19,0xFE,0x11,0x02,0x11,0xFE,0x11,0x02,0x7D,0xFE,0x11,0x02,0x10,0x00,0x13,0xEF,0x10,0x63,0x14,0xA5,0x1B,0x29,0x70,0x63,0x20,0xA5,0x03,0x29,0x00,0x63},
{0xB6,0xF3,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x24,0x11,0x24,0x7D,0x54,0x11,0x54,0x11,0xFC,0x11,0x04,0x14,0x00,0x1B,0xFE,0x72,0x52,0x22,0x52,0x02,0x52,0x02,0x52,0x0F,0xFF},
{0xB6,0xF4,0x00,0x00,0x18,0x30,0x11,0x44,0x11,0xFE,0x11,0x24,0x7D,0xFC,0x11,0x24,0x11,0x24,0x11,0xFC,0x11,0x54,0x14,0x50,0x18,0x54,0x70,0x96,0x20,0x9A,0x01,0x11,0x02,0x0F},
{0xB6,0xF5,0x00,0x00,0x18,0x60,0x10,0x88,0x11,0xFC,0x11,0x08,0x7D,0x08,0x11,0xF8,0x11,0x00,0x11,0xFF,0x15,0x00,0x19,0xFE,0x70,0x12,0x25,0x4A,0x04,0xA2,0x08,0xAE,0x00,0x04},
{0xB6,0xF6,0x00,0x00,0x18,0x0C,0x12,0x88,0x13,0xBE,0x12,0x88,0x7A,0x8A,0x12,0xBF,0x13,0x80,0x12,0x82,0x12,0xBF,0x1A,0x82,0x72,0xA2,0x23,0x92,0x02,0x82,0x00,0x0E,0x00,0x04},
{0xB6,0xF7,0x00,0x00,0x08,0x10,0x2B,0x56,0x2C,0x58,0x48,0x90,0x16,0x2C,0x62,0xC4,0x10,0x02,0x3F,0xFF,0x20,0x02,0x40,0xC4,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB6,0xF8,0x00,0x00,0x00,0xC0,0x11,0x04,0x1F,0xFE,0x10,0x74,0x17,0x84,0x12,0xA4,0x17,0xF4,0x11,0xA4,0x16,0x94,0x10,0x94,0x01,0x02,0x7F,0xFF,0x02,0x40,0x0C,0x30,0x70,0x0E},
{0xB6,0xF9,0x00,0x00,0x30,0x30,0x21,0x22,0x25,0xFF,0x7D,0x02,0x26,0xFC,0x24,0x40,0x24,0xA0,0x25,0x26,0x68,0x54,0x59,0x98,0x14,0x34,0x24,0x54,0x25,0x92,0x40,0x70,0x00,0x20},
{0xB6,0xFA,0x00,0x00,0x30,0x18,0x20,0x92,0x28,0xFF,0x7A,0x80,0x2A,0xB0,0x29,0xA2,0x28,0xBF,0x49,0xC8,0x6A,0x8A,0x52,0xFF,0x10,0x88,0x29,0x14,0x29,0x12,0x41,0x22,0x02,0x41},
{0xB6,0xFB,0x00,0x00,0x30,0x6C,0x21,0xD8,0x24,0x48,0x7D,0xFE,0x24,0x48,0x25,0xFE,0x24,0x4A,0x2B,0xFF,0x68,0x4A,0x59,0xFE,0x14,0x48,0x14,0xCC,0x21,0x4B,0x22,0x48,0x40,0x48},
{0xB6,0xFC,0x00,0x00,0x30,0x44,0x21,0xFF,0x24,0x44,0x7E,0xFE,0x24,0x44,0x25,0xFF,0x24,0x10,0x24,0xFE,0x64,0x92,0x59,0xFF,0x18,0x92,0x15,0xFF,0x24,0x82,0x20,0x8E,0x40,0x84},
{0xB6,0xFD,0x00,0x00,0x31,0x08,0x21,0xFC,0x25,0x20,0x7D,0xFC,0x25,0x20,0x25,0xFC,0x25,0x20,0x25,0x22,0x69,0xFF,0x58,0xAA,0x14,0x56,0x25,0x52,0x21,0x02,0x42,0x1C,0x00,0x08},
{0xB6,0xFE,0x00,0x00,0x31,0x04,0x21,0xFE,0x25,0x24,0x7D,0x24,0x25,0x54,0x25,0x54,0x25,0xFC,0x25,0x04,0x68,0x00,0x19,0xFE,0x15,0x52,0x25,0x52,0x21,0x52,0x41,0x52,0x07,0xFF},
{0xB7,0x40,0x00,0x00,0x30,0x30,0x21,0x44,0x25,0xFE,0x7D,0x04,0x25,0xFC,0x25,0x04,0x25,0xFC,0x25,0x04,0x69,0xFC,0x59,0x04,0x14,0xA0,0x22,0x92,0x22,0x95,0x44,0x85,0x00,0x7C},
{0xB7,0x41,0x00,0x00,0x30,0x50,0x21,0x97,0x25,0x11,0x7D,0xD7,0x25,0x11,0x25,0x11,0x25,0xD7,0x24,0x00,0x69,0xFE,0x58,0x82,0x14,0x44,0x12,0x28,0x22,0x30,0x20,0x4C,0x41,0x83},
{0xB7,0x42,0x00,0x00,0x30,0x18,0x21,0x22,0x25,0xFF,0x7D,0x02,0x25,0x4A,0x25,0x32,0x25,0x4A,0x25,0xFE,0x68,0x02,0x59,0x10,0x15,0xD6,0x25,0x18,0x21,0x11,0x43,0xD1,0x01,0x0F},
{0xB7,0x43,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x10,0x04,0x00,0x80,0x7F,0xFF,0x00,0x00,0x07,0xF0,0x04,0x10,0x3F,0xFE,0x20,0x02,0x23,0xE2,0x22,0x22,0x23,0xEE,0x20,0x04},
{0xB7,0x44,0x00,0x00,0x18,0x86,0x10,0x64,0x10,0x28,0x55,0xFF,0x54,0x10,0x54,0xFE,0x54,0x10,0x57,0xFF,0x54,0x80,0x54,0x84,0x7D,0x7E,0x45,0x10,0x42,0x10,0x04,0x12,0x01,0xFF},
{0xB7,0x45,0x00,0x00,0x18,0x82,0x10,0xFF,0x54,0x82,0x7E,0xFE,0x54,0x82,0x54,0xFE,0x54,0x82,0x54,0x18,0x54,0x92,0x54,0x54,0x5D,0xFF,0x54,0x28,0x10,0x49,0x10,0x49,0x11,0x87},
{0xB7,0x46,0x00,0x00,0x0C,0x30,0x08,0x28,0x7F,0x48,0x08,0x44,0x3E,0x82,0x23,0x09,0x3E,0x7C,0x22,0x10,0x3E,0x12,0x2A,0xFF,0x08,0x10,0x7F,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xB7,0x47,0x00,0x00,0x20,0x82,0x3F,0xFF,0x21,0x10,0x22,0x22,0x3F,0xFF,0x21,0x20,0x2F,0xFC,0x21,0x24,0x3F,0xFF,0x21,0x24,0x2F,0xFC,0x21,0x20,0x47,0x38,0x59,0x26,0x41,0x20},
{0xB7,0x48,0x00,0x00,0x20,0x42,0x3F,0xFF,0x20,0x00,0x2F,0xFE,0x20,0x40,0x27,0xFC,0x24,0x04,0x27,0xFC,0x24,0x04,0x27,0xFC,0x21,0x00,0x23,0xF8,0x4D,0x10,0x40,0xE0,0x4F,0x1F},
{0xB7,0x49,0x00,0x00,0x46,0x1A,0x34,0x11,0x08,0x11,0x16,0x10,0x60,0xFF,0x0A,0x08,0x09,0x08,0x7E,0x08,0x08,0xE8,0x2A,0x44,0x2A,0x44,0x2A,0x55,0x4B,0x65,0x08,0xC3,0x08,0x01},
{0xB7,0x4A,0x00,0x00,0x02,0x00,0x03,0xE0,0x04,0x42,0x7F,0xFF,0x00,0x40,0x3F,0xFF,0x20,0x02,0x4F,0xFC,0x08,0x88,0x0F,0xF8,0x08,0x88,0x7F,0xFF,0x01,0x80,0x06,0xF0,0x38,0x8E},
{0xB7,0x4B,0x00,0x00,0x18,0x30,0x10,0x24,0x23,0xFE,0x4C,0x88,0x0A,0x52,0x13,0xFF,0x32,0x02,0x54,0x44,0x17,0xFF,0x10,0x80,0x10,0xFC,0x10,0x84,0x11,0x04,0x11,0x38,0x12,0x10},
{0xB7,0x4C,0x00,0x00,0x18,0x8C,0x12,0xA8,0x22,0xA8,0x4E,0xAF,0x0B,0xE9,0x12,0x29,0x30,0x09,0x57,0xE9,0x11,0x5A,0x11,0x46,0x11,0x54,0x12,0x6A,0x12,0x4A,0x14,0x11,0x10,0x21},
{0xB7,0x4D,0x00,0x00,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x20,0x82,0x7F,0xFF,0x20,0xA2,0x27,0xD2,0x22,0x16,0x00,0x80,0x26,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB7,0x4E,0x00,0x00,0x00,0x84,0x3F,0xFE,0x04,0x10,0x7F,0xFF,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x80,0x26,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB7,0x4F,0x00,0x00,0x0C,0x18,0x02,0x22,0x7F,0xFF,0x0C,0x18,0x30,0x60,0x16,0x2C,0x08,0x10,0x14,0x24,0x7A,0xFA,0x20,0x40,0x00,0x80,0x26,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB7,0x50,0x00,0x00,0x00,0x34,0x20,0x22,0x3F,0xFF,0x20,0x20,0x2F,0xA6,0x20,0x14,0x2F,0x95,0x28,0x89,0x4F,0x95,0x40,0x23,0x06,0x80,0x24,0x42,0x24,0x49,0x44,0x0D,0x03,0xF8},
{0xB7,0x51,0x00,0x00,0x0C,0x42,0x08,0x7F,0x7F,0x42,0x18,0x7E,0x28,0x42,0x2C,0x7E,0x2B,0x42,0x49,0x7E,0x08,0x42,0x00,0x80,0x06,0x40,0x24,0x42,0x24,0x11,0x44,0x19,0x03,0xF0},
{0xB7,0x52,0x00,0x00,0x01,0xFC,0x3F,0x18,0x08,0x90,0x24,0xA2,0x3F,0xFF,0x41,0x02,0x54,0xC4,0x14,0x12,0x23,0xF2,0x02,0x00,0x07,0xF0,0x1A,0x20,0x01,0xC0,0x06,0x30,0x38,0x0E},
{0xB7,0x53,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x02,0x02,0x7F,0xFF,0x04,0x00,0x0F,0xF8,0x74,0x08,0x04,0x08,0x07,0xF8,0x00,0x80,0x26,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB7,0x54,0x00,0x00,0x0E,0x18,0x78,0x10,0x0A,0x53,0x7F,0x52,0x18,0x94,0x2C,0x28,0x2A,0x24,0x4A,0x44,0x08,0x83,0x00,0x00,0x06,0x80,0x24,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB7,0x55,0x00,0x00,0x0F,0x80,0x01,0x60,0x06,0x18,0x7D,0xE7,0x12,0x00,0x1E,0x6C,0x12,0x48,0x1E,0x48,0x12,0x48,0x16,0x18,0x00,0x80,0x06,0x42,0x24,0x51,0x24,0x19,0x43,0xF0},
{0xB7,0x56,0x00,0x00,0x18,0x08,0x11,0xFF,0x18,0x10,0x14,0xFE,0x54,0x82,0x50,0xFE,0x50,0x82,0x10,0xFE,0x10,0x82,0x10,0xFE,0x10,0x82,0x13,0xFF,0x10,0x44,0x10,0x83,0x13,0x01},
{0xB7,0x57,0x00,0x00,0x18,0xCC,0x10,0x88,0x13,0xFF,0x18,0x88,0x54,0x20,0x57,0xFF,0x51,0x00,0x11,0x00,0x10,0xFE,0x10,0x00,0x11,0xAC,0x11,0x28,0x11,0x29,0x12,0x29,0x14,0x27},
{0xB7,0x58,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x48,0x19,0xFE,0x55,0x4A,0x55,0x4A,0x51,0xFE,0x11,0x02,0x10,0x20,0x13,0xFF,0x10,0x60,0x10,0xB0,0x11,0x2C,0x16,0x23,0x10,0x20},
{0xB7,0x59,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x24,0x19,0x24,0x55,0x54,0x55,0x54,0x51,0xFC,0x11,0x04,0x12,0x02,0x13,0xFF,0x12,0x52,0x12,0x52,0x12,0x52,0x12,0x52,0x17,0xFF},
{0xB7,0x5A,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x00,0x1A,0xFC,0x54,0x00,0x55,0xFC,0x50,0x44,0x12,0x54,0x11,0x64,0x13,0xF4,0x10,0xC5,0x11,0x65,0x11,0x55,0x12,0x53,0x10,0x41},
{0xB7,0x5B,0x00,0x00,0x18,0x60,0x10,0xD0,0x10,0x88,0x11,0x74,0x5A,0x03,0x55,0xFC,0x55,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x00,0x12,0xFE,0x12,0x82,0x12,0x82,0x14,0xFE},
{0xB7,0x5C,0x00,0x00,0x18,0x30,0x11,0x44,0x11,0xFE,0x19,0x24,0x55,0xFC,0x55,0x24,0x51,0x24,0x11,0xFC,0x11,0x54,0x10,0x50,0x10,0x54,0x10,0x96,0x10,0x9A,0x11,0x11,0x12,0x0F},
{0xB7,0x5D,0x00,0x00,0x21,0x30,0x3F,0xA2,0x21,0x3F,0x3F,0x22,0x24,0x22,0x3F,0x54,0x22,0x08,0x2A,0x94,0x71,0x92,0x20,0xA1,0x05,0x00,0x24,0xC2,0x24,0x11,0x44,0x19,0x03,0xF0},
{0xB7,0x5E,0x00,0x00,0x19,0x04,0x10,0x9E,0x2C,0x00,0x4A,0x42,0x18,0x9F,0x28,0x84,0x4B,0x04,0x09,0x04,0x09,0x1C,0x08,0x08,0x06,0x80,0x24,0x42,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xB7,0x5F,0x00,0x00,0x18,0x30,0x11,0xA6,0x11,0x24,0x19,0xFC,0x55,0x04,0x54,0x02,0x53,0xFF,0x10,0x00,0x11,0xFC,0x11,0x04,0x11,0xFC,0x10,0x00,0x11,0x8C,0x10,0x50,0x17,0xFF},
{0xB7,0x60,0x00,0x00,0x12,0x34,0x7F,0xA2,0x12,0x22,0x1E,0x20,0x12,0x2F,0x1E,0xF0,0x12,0x20,0x7F,0xA6,0x2A,0x14,0x2A,0x94,0x31,0x88,0x20,0x09,0x3F,0x95,0x20,0x25,0x00,0x43},
{0xB7,0x61,0x00,0x00,0x3E,0x34,0x22,0x22,0x3E,0x22,0x22,0x20,0x00,0x2F,0x7F,0x70,0x22,0x20,0x3E,0x26,0x22,0x14,0x3E,0x14,0x22,0x08,0x3E,0x09,0x62,0x15,0x22,0x25,0x02,0x43},
{0xB7,0x62,0x00,0x00,0x18,0x86,0x10,0x64,0x10,0x28,0x7D,0xFF,0x10,0x10,0x10,0xFE,0x14,0x10,0x1B,0xFF,0x70,0x80,0x50,0x84,0x11,0x7E,0x11,0x10,0x12,0x10,0x74,0x12,0x21,0xFF},
{0xB7,0x63,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x2A,0x12,0x49,0x11,0x87,0x14,0x40,0x18,0x7F,0x70,0xA0,0x51,0x3E,0x10,0x20,0x10,0x3E,0x10,0x20,0x70,0x20,0x20,0x20},
{0xB7,0x64,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x00,0x10,0xFC,0x10,0x84,0x14,0xFC,0x1A,0x01,0x73,0xFF,0x52,0x01,0x12,0xF9,0x12,0x89,0x12,0xF9,0x72,0x07,0x22,0x02},
{0xB7,0x65,0x00,0x00,0x19,0x12,0x11,0xFF,0x11,0x00,0x7D,0x10,0x11,0x7E,0x11,0x12,0x15,0xFF,0x19,0x12,0x71,0x7E,0x51,0x10,0x11,0x00,0x12,0x7E,0x12,0x42,0x72,0x7E,0x24,0x42},
{0xB7,0x66,0x00,0x00,0x18,0xCC,0x10,0x88,0x13,0xFF,0x7C,0x88,0x10,0x60,0x10,0x50,0x14,0x88,0x19,0x74,0x76,0x03,0x51,0x04,0x11,0xFE,0x11,0x04,0x11,0x04,0x71,0xFC,0x21,0x04},
{0xB7,0x67,0x00,0x00,0x18,0xC6,0x10,0x84,0x13,0xFF,0x7C,0x84,0x10,0x30,0x10,0x68,0x14,0x84,0x1B,0x33,0x70,0x20,0x53,0xFF,0x10,0x60,0x10,0xB0,0x10,0xAC,0x73,0x23,0x20,0x20},
{0xB7,0x68,0x00,0x00,0x19,0x94,0x12,0x1E,0x13,0xD4,0x7A,0x54,0x12,0x55,0x13,0x63,0x16,0xC0,0x1A,0x7E,0x77,0xD2,0x52,0x52,0x13,0x4C,0x12,0xC4,0x14,0x4A,0x75,0xCA,0x24,0x91},
{0xB7,0x69,0x00,0x00,0x18,0x26,0x13,0xFF,0x10,0x20,0x7D,0xFE,0x11,0x22,0x11,0xFE,0x15,0x22,0x19,0xFE,0x71,0x22,0x50,0x04,0x17,0xFF,0x12,0x04,0x11,0x84,0x70,0x9C,0x20,0x08},
{0xB7,0x6A,0x00,0x00,0x18,0x50,0x11,0x97,0x11,0x11,0x7D,0xD7,0x11,0x11,0x11,0x11,0x15,0xD7,0x18,0x10,0x70,0x02,0x51,0xFF,0x10,0x84,0x10,0x68,0x10,0x30,0x70,0xCC,0x23,0x03},
{0xB7,0x6B,0x00,0x00,0x18,0x04,0x11,0xFE,0x14,0xA4,0x7E,0x48,0x11,0x30,0x10,0x4C,0x15,0xB3,0x1A,0x20,0x71,0xFC,0x51,0x24,0x11,0x24,0x11,0xFC,0x10,0x24,0x73,0xFB,0x21,0x01},
{0xB7,0x6C,0x00,0x00,0x18,0x84,0x10,0xFE,0x14,0x84,0x7E,0xFC,0x10,0x84,0x10,0x00,0x15,0xFE,0x19,0x02,0x71,0xFE,0x51,0x02,0x11,0xFE,0x11,0x02,0x11,0xFE,0x70,0x84,0x23,0x03},
{0xB7,0x6D,0x00,0x00,0x18,0x60,0x10,0xD0,0x10,0x88,0x7D,0x74,0x12,0x03,0x15,0xFC,0x11,0x04,0x15,0xFC,0x19,0x04,0x71,0xFC,0x51,0x00,0x12,0xFE,0x12,0x82,0x72,0x82,0x24,0xFE},
{0xB7,0x6E,0x00,0x00,0x18,0x60,0x10,0x44,0x10,0x7E,0x7C,0x84,0x13,0x58,0x10,0xA0,0x14,0x44,0x18,0xFE,0x73,0x10,0x50,0x12,0x13,0xFF,0x10,0x10,0x10,0x92,0x70,0xFE,0x20,0x82},
{0xB7,0x6F,0x00,0x00,0x18,0x40,0x11,0xF8,0x11,0x08,0x7D,0xF8,0x11,0x08,0x11,0xF8,0x15,0x02,0x19,0xFF,0x71,0x00,0x51,0xFF,0x10,0x41,0x12,0x49,0x13,0xF9,0x72,0x0A,0x20,0x0C},
{0xB7,0x70,0x00,0x00,0x18,0x48,0x13,0xFF,0x10,0x48,0x7D,0xFE,0x10,0x48,0x13,0xFF,0x14,0x20,0x19,0xFE,0x71,0x22,0x53,0xFF,0x11,0x22,0x13,0xFF,0x11,0x02,0x71,0x1E,0x21,0x04},
{0xB7,0x71,0x00,0x00,0x19,0x98,0x11,0x10,0x7F,0xD0,0x11,0x12,0x10,0x3F,0x3F,0xA2,0x20,0xA2,0x5E,0xD2,0x12,0x94,0x12,0x94,0x1E,0x88,0x00,0x94,0x01,0x14,0x0E,0x22,0x04,0x41},
{0xB7,0x72,0x00,0x00,0x19,0x86,0x11,0x24,0x7F,0x94,0x11,0x14,0x1F,0x04,0x11,0x24,0x1F,0x14,0x11,0x14,0x7F,0xC4,0x2A,0x07,0x2A,0xBC,0x31,0x84,0x20,0x04,0x3F,0xC4,0x20,0x04},
{0xB7,0x73,0x00,0x00,0x0C,0x06,0x08,0x4F,0x7F,0x70,0x22,0x40,0x14,0x40,0x7F,0x42,0x08,0x7F,0x0A,0x44,0x7F,0x44,0x18,0x44,0x1C,0x44,0x2A,0x84,0x2A,0x84,0x48,0x84,0x09,0x04},
{0xB7,0x74,0x00,0x00,0x00,0x30,0x48,0x24,0x7D,0xFE,0x48,0x88,0x48,0x48,0x48,0x52,0x7B,0xFF,0x48,0x00,0x48,0x84,0x48,0xFE,0x78,0x84,0x48,0xFC,0x40,0x84,0x00,0xFC,0x00,0x84},
{0xB7,0x75,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x02,0x4C,0x24,0x49,0xFC,0x48,0x20,0x79,0xFC,0x49,0x24,0x49,0xFC,0x49,0x24,0x79,0xFC,0x48,0x20,0x47,0xFF,0x00,0x20,0x00,0x20},
{0xB7,0x76,0x00,0x00,0x02,0x42,0x4B,0xDF,0x7A,0x42,0x4A,0x42,0x4B,0xDE,0x4A,0x42,0x7A,0x00,0x4A,0x82,0x4B,0xDF,0x4A,0x12,0x7A,0x8A,0x4B,0xC4,0x42,0x0A,0x02,0x0A,0x02,0x11},
{0xB7,0x77,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x28,0x0A,0x3F,0xFF,0x20,0x82,0x4F,0xF8,0x00,0x80,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x8A,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xB7,0x78,0x00,0x00,0x00,0x3E,0x4B,0xC0,0x7A,0x24,0x4A,0x13,0x4D,0xFD,0x48,0x80,0x7B,0xFF,0x48,0x80,0x48,0xFC,0x49,0x84,0x79,0x48,0x4A,0x28,0x44,0x30,0x00,0xCC,0x07,0x03},
{0xB7,0x79,0x00,0x00,0x00,0x30,0x49,0x22,0x79,0xFF,0x49,0x02,0x4A,0xFC,0x48,0x00,0x79,0x04,0x49,0xFE,0x49,0x04,0x49,0xFC,0x79,0x04,0x49,0xFC,0x41,0x04,0x00,0x00,0x07,0xFF},
{0xB7,0x7A,0x00,0x00,0x01,0xF8,0x49,0x08,0x7D,0xF8,0x49,0x08,0x49,0xF8,0x49,0x08,0x78,0x02,0x4B,0xFF,0x48,0x80,0x49,0xFE,0x7A,0x4A,0x48,0x92,0x43,0x22,0x00,0xDC,0x00,0x08},
{0xB7,0x7B,0x00,0x00,0x01,0x08,0x49,0xFC,0x7D,0x08,0x49,0xF8,0x49,0x08,0x49,0xF8,0x78,0x82,0x49,0xFF,0x4E,0x22,0x4A,0x52,0x7A,0x92,0x4B,0xFA,0x42,0x02,0x00,0x1C,0x00,0x08},
{0xB7,0x7C,0x00,0x00,0x01,0x80,0x02,0x40,0x04,0x30,0x1B,0xEC,0x60,0x03,0x1F,0xFC,0x14,0x94,0x12,0xA4,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8},
{0xB7,0x7D,0x00,0x00,0x18,0xC9,0x10,0x8F,0x11,0xE9,0x7D,0x29,0x11,0xE9,0x31,0x2A,0x31,0x2A,0x59,0xE9,0x55,0x09,0x55,0x49,0x11,0x4F,0x11,0xAA,0x13,0x28,0x11,0x08,0x10,0x08},
{0xB7,0x7E,0x00,0x00,0x11,0x4C,0x0D,0x48,0x05,0x52,0x7F,0xFF,0x04,0x10,0x02,0x20,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB7,0xA1,0x00,0x00,0x0C,0x18,0x08,0x10,0x7E,0xFE,0x18,0x30,0x2C,0x58,0x2A,0x96,0x48,0x10,0x00,0x04,0x7F,0xFE,0x01,0x04,0x19,0x20,0x11,0xF0,0x11,0x00,0x2D,0x03,0x43,0xFC},
{0xB7,0xA2,0x00,0x00,0x19,0x98,0x11,0x10,0x11,0xD3,0x7D,0x1C,0x11,0x51,0x33,0x91,0x31,0x0F,0x58,0x30,0x55,0x44,0x55,0xFE,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB7,0xA3,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x20,0x12,0x22,0x33,0xFF,0x32,0x8A,0x5A,0x52,0x56,0xFA,0x52,0x22,0x12,0xFA,0x12,0x22,0x12,0x22,0x12,0x2E,0x12,0x04},
{0xB7,0xA4,0x00,0x00,0x18,0xC0,0x10,0x81,0x11,0xEF,0x7C,0x85,0x11,0xE5,0x30,0x85,0x30,0xE9,0x59,0x8B,0x54,0x80,0x54,0x18,0x10,0x12,0x11,0xFF,0x10,0x28,0x10,0x44,0x11,0x83},
{0xB7,0xA5,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x80,0x7C,0x80,0x11,0xE2,0x30,0x2F,0x33,0xA2,0x5A,0xAA,0x56,0xAA,0x53,0xA4,0x10,0x26,0x11,0xC9,0x10,0x91,0x10,0x00,0x13,0xFF},
{0xB7,0xA6,0x00,0x00,0x18,0x29,0x13,0xEF,0x11,0x29,0x7D,0x29,0x11,0xE9,0x31,0x2A,0x31,0x2A,0x59,0xEA,0x55,0x29,0x55,0x29,0x11,0xE9,0x13,0x2F,0x11,0x2A,0x10,0x28,0x10,0x28},
{0xB7,0xA7,0x00,0x00,0x19,0x82,0x11,0x1F,0x13,0xC4,0x7A,0x54,0x13,0xD4,0x32,0x54,0x3B,0xDF,0x56,0x54,0x52,0x08,0x53,0xCC,0x12,0x14,0x13,0xD5,0x12,0x15,0x12,0x23,0x10,0x40},
{0xB7,0xA8,0x00,0x00,0x0C,0xFC,0x08,0x84,0x08,0xFC,0x7E,0x84,0x08,0xFC,0x18,0x84,0x18,0x00,0x2D,0xFF,0x2A,0x40,0x4A,0xFF,0x09,0x25,0x08,0x49,0x09,0x91,0x08,0x6E,0x08,0x04},
{0xB7,0xA9,0x00,0x00,0x0C,0x12,0x08,0x1F,0x08,0x10,0x7E,0x92,0x08,0xFF,0x18,0x82,0x18,0xFE,0x2C,0x82,0x2A,0xFE,0x4A,0x82,0x08,0xFE,0x08,0x82,0x08,0x64,0x08,0x83,0x09,0x01},
{0xB7,0xAA,0x00,0x00,0x0C,0xFC,0x08,0x84,0x08,0x84,0x7E,0xFC,0x08,0x00,0x1B,0xFF,0x18,0x84,0x2C,0xFC,0x2A,0x84,0x4A,0xFC,0x08,0x87,0x08,0xFC,0x0B,0x84,0x08,0x04,0x08,0x04},
{0xB7,0xAB,0x00,0x00,0x0C,0x82,0x08,0xFF,0x08,0xAA,0x7E,0xAA,0x08,0xFE,0x18,0x82,0x18,0x10,0x2D,0xFF,0x2A,0x40,0x4A,0x42,0x08,0x7F,0x08,0x42,0x08,0x82,0x08,0x9C,0x09,0x08},
{0xB7,0xAC,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x04,0x7D,0x24,0x11,0xF4,0x31,0x44,0x31,0xF4,0x59,0x54,0x55,0x54,0x55,0xF4,0x12,0x45,0x12,0x55,0x13,0xEB,0x12,0x89,0x14,0x01},
{0xB7,0xAD,0x00,0x00,0x18,0x08,0x11,0xFC,0x10,0x88,0x7C,0x92,0x10,0x9F,0x31,0x72,0x31,0x92,0x5A,0x62,0x54,0x94,0x55,0x08,0x13,0xFE,0x11,0x4A,0x11,0x4A,0x11,0x4A,0x13,0xFF},
{0xB7,0xAE,0x00,0x00,0x19,0xE0,0x10,0x30,0x10,0x48,0x7C,0x84,0x11,0x7B,0x36,0x00,0x31,0xE3,0x59,0x2A,0x55,0xEA,0x55,0x2A,0x11,0xEA,0x11,0x2A,0x11,0x22,0x11,0x2E,0x11,0x64},
{0xB7,0xAF,0x00,0x00,0x18,0x18,0x10,0x12,0x11,0xFF,0x7C,0x10,0x11,0x11,0x31,0xFF,0x31,0x95,0x59,0x59,0x55,0xFF,0x55,0x31,0x10,0x58,0x10,0x54,0x10,0x93,0x11,0x10,0x10,0x10},
{0xB7,0xB0,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x12,0x7D,0x12,0x11,0xFE,0x31,0x02,0x31,0x00,0x59,0x7E,0x55,0x42,0x55,0x7E,0x11,0x42,0x12,0x7E,0x12,0x42,0x12,0x7E,0x14,0x42},
{0xB7,0xB1,0x00,0x00,0x18,0xC6,0x10,0x84,0x13,0xFF,0x7C,0x84,0x10,0x30,0x30,0x22,0x33,0xFF,0x58,0x20,0x55,0x24,0x55,0xFE,0x11,0x04,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB7,0xB2,0x00,0x00,0x21,0x30,0x3F,0xA0,0x21,0x22,0x3F,0x3F,0x21,0x22,0x3F,0x4C,0x10,0x48,0x1F,0x88,0x24,0x88,0x4A,0x98,0x2A,0x94,0x3F,0x94,0x20,0xA2,0x07,0x22,0x02,0x41},
{0xB7,0xB3,0x00,0x00,0x00,0x90,0x0C,0xF8,0x08,0x82,0x7F,0xFF,0x00,0x24,0x20,0x22,0x3F,0xFF,0x20,0x20,0x2F,0xA0,0x22,0x16,0x2A,0xD4,0x2A,0x89,0x51,0x15,0x42,0x23,0x4C,0xC1},
{0xB7,0xB4,0x00,0x00,0x18,0x24,0x63,0x3E,0x41,0x24,0x77,0x24,0x41,0x25,0x41,0x23,0x7F,0x40,0x41,0x02,0x08,0x7F,0x7F,0x22,0x08,0x24,0x0F,0x14,0x78,0x08,0x20,0x34,0x01,0xC3},
{0xB7,0xB5,0x00,0x00,0x21,0x24,0x3F,0xBE,0x21,0x24,0x21,0x24,0x3F,0x25,0x21,0x23,0x2A,0x40,0x3F,0x02,0x2A,0x7F,0x2A,0x22,0x3F,0x24,0x20,0x14,0x4A,0x08,0x49,0x14,0x51,0x63},
{0xB7,0xB6,0x00,0x00,0x30,0x18,0x22,0x12,0x3F,0x7F,0x40,0x10,0x3F,0x10,0x29,0x22,0x25,0x7D,0x7F,0xA1,0x21,0x00,0x29,0x2A,0x45,0x2A,0x7F,0x2A,0x41,0x2A,0x0E,0x4B,0x04,0x41},
{0xB7,0xB7,0x00,0x00,0x1C,0x08,0x73,0xBE,0x10,0x8A,0x10,0xFF,0x1D,0x0A,0x71,0x3E,0x13,0x88,0x12,0xBE,0x10,0x88,0x1E,0xBF,0x71,0x08,0x12,0xC8,0x14,0x3E,0x10,0x01,0x0F,0xFF},
{0xB7,0xB8,0x00,0x00,0x20,0x18,0x10,0xC8,0x10,0x84,0x41,0x04,0x2A,0x7A,0x28,0x01,0x08,0xCC,0x10,0x84,0x11,0x02,0x62,0x01,0x21,0xFE,0x21,0x4A,0x61,0x4A,0x61,0x4A,0x23,0xFF},
{0xB7,0xB9,0x00,0x00,0x22,0x29,0x11,0x2F,0x11,0x49,0x47,0xE9,0x20,0x8F,0x2A,0xA9,0x0A,0xA9,0x12,0xA9,0x13,0xEF,0x62,0xA9,0x20,0x89,0x20,0x89,0x61,0x11,0x61,0x17,0x22,0x12},
{0xB7,0xBA,0x00,0x00,0x20,0x30,0x12,0x22,0x13,0xFF,0x02,0x02,0x44,0x24,0x21,0xFC,0x28,0x88,0x08,0x52,0x17,0xFF,0x10,0x20,0x60,0x24,0x23,0xFE,0x20,0x20,0x60,0x20,0x20,0x20},
{0xB7,0xBB,0x00,0x00,0x20,0x30,0x12,0x22,0x13,0xFF,0x42,0x02,0x24,0xC8,0x20,0x84,0x09,0x33,0x0A,0x49,0x10,0x84,0x11,0xFE,0x67,0x05,0x21,0x04,0x21,0x04,0x61,0xFC,0x21,0x04},
{0xB7,0xBC,0x00,0x00,0x20,0x30,0x10,0x24,0x13,0xFE,0x40,0x88,0x22,0x52,0x2B,0xFF,0x0A,0x02,0x14,0x44,0x13,0xFE,0x60,0x80,0x20,0xFC,0x20,0x84,0x61,0x04,0x61,0x38,0x22,0x10},
{0xB7,0xBD,0x00,0x00,0x24,0x02,0x17,0xFF,0x14,0x08,0x44,0x92,0x24,0xFF,0x24,0x82,0x0C,0xFE,0x14,0x82,0x14,0xFE,0x64,0x92,0x24,0x10,0x25,0x94,0x69,0x13,0x6A,0x71,0x28,0x20},
{0xB7,0xBE,0x00,0x00,0x20,0x90,0x17,0xFE,0x10,0x90,0x43,0xFC,0x28,0x90,0x2F,0xFF,0x08,0x40,0x13,0xFC,0x12,0x44,0x6F,0xFF,0x22,0x44,0x2F,0xFF,0x62,0x04,0x62,0x1C,0x22,0x08},
{0xB7,0xBF,0x00,0x00,0x21,0x18,0x11,0xE2,0x11,0x03,0x40,0xFE,0x24,0x00,0x28,0xFC,0x0A,0x84,0x12,0xFC,0x12,0x84,0x62,0xFC,0x22,0x84,0x27,0xFF,0x62,0x48,0x60,0x86,0x23,0x02},
{0xB7,0xC0,0x00,0x00,0x20,0x34,0x10,0x23,0x14,0x20,0x47,0xFF,0x24,0x10,0x25,0xD0,0x0C,0x13,0x14,0x92,0x14,0xB4,0x66,0xD4,0x24,0x88,0x25,0x49,0x69,0x55,0x6A,0x23,0x28,0x41},
{0xB7,0xC1,0x00,0x00,0x20,0x4C,0x17,0xFE,0x10,0x40,0x43,0xFC,0x22,0x44,0x2B,0xFC,0x0A,0x44,0x13,0xFC,0x12,0x44,0x60,0x08,0x2F,0xFF,0x22,0x08,0x61,0x88,0x60,0xB8,0x20,0x10},
{0xB7,0xC2,0x00,0x00,0x20,0x30,0x10,0x20,0x11,0xFC,0x44,0x20,0x24,0x22,0x2B,0xFF,0x08,0x40,0x10,0x88,0x13,0xF6,0x61,0x02,0x20,0x00,0x23,0xFE,0x62,0x52,0x62,0x52,0x2F,0xFF},
{0xB7,0xC3,0x00,0x00,0x20,0x04,0x13,0xFE,0x10,0x00,0x40,0xC6,0x23,0x18,0x29,0x4A,0x08,0x84,0x11,0x4A,0x13,0xAD,0x61,0x09,0x20,0x20,0x23,0xFE,0x60,0x20,0x60,0x22,0x27,0xFF},
{0xB7,0xC4,0x00,0x00,0x40,0x82,0x2F,0xBF,0x20,0x82,0x04,0x92,0x47,0x9E,0x24,0x92,0x2C,0x10,0x14,0x51,0x17,0xDF,0x64,0xD3,0x21,0x45,0x26,0xDB,0x61,0x45,0x66,0x59,0x21,0x86},
{0xB7,0xC5,0x00,0x00,0x21,0x04,0x11,0xFE,0x11,0x24,0x45,0x24,0x25,0x54,0x29,0x54,0x09,0xFC,0x11,0x04,0x10,0x00,0x62,0x02,0x23,0xFF,0x22,0x52,0x62,0x52,0x62,0x52,0x2F,0xFF},
{0xB7,0xC6,0x00,0x00,0x20,0x84,0x10,0xFE,0x14,0x84,0x44,0xBC,0x2A,0xA5,0x2B,0xFF,0x0A,0x01,0x14,0xFE,0x10,0x84,0x70,0xFC,0x10,0x84,0x10,0xFC,0x30,0x84,0x30,0x9C,0x10,0x88},
{0xB7,0xC7,0x00,0x00,0x20,0xCC,0x10,0x90,0x45,0xFE,0x29,0x10,0x0B,0xFE,0x15,0x10,0x71,0xFE,0x11,0x10,0x31,0xFF,0x11,0x00,0x00,0x82,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xB7,0xC8,0x00,0x00,0x24,0xC1,0x17,0x3F,0x14,0x09,0x44,0x89,0x24,0x91,0x2F,0x57,0x14,0x22,0x10,0x00,0x13,0xFE,0x62,0x22,0x23,0xFE,0x22,0x22,0x62,0x22,0x23,0xFE,0x22,0x02},
{0xB7,0xC9,0x00,0x00,0x20,0x60,0x10,0xD0,0x10,0x88,0x41,0x74,0x2A,0x03,0x2D,0xFC,0x09,0x04,0x11,0xFC,0x11,0x04,0x61,0xFC,0x21,0x00,0x22,0xFE,0x62,0x82,0x62,0x82,0x24,0xFE},
{0xB7,0xCA,0x00,0x00,0x20,0x7E,0x13,0xC0,0x12,0x04,0x42,0x43,0x24,0x31,0x28,0x10,0x0A,0xC2,0x13,0x1F,0x12,0x02,0x62,0x82,0x23,0xDE,0x22,0x02,0x62,0x02,0x63,0xFE,0x22,0x02},
{0xB7,0xCB,0x00,0x00,0x20,0x3E,0x13,0xC0,0x12,0x24,0x42,0x33,0x24,0x41,0x29,0x88,0x08,0x50,0x10,0x24,0x13,0xFB,0x61,0x01,0x20,0x20,0x27,0xFF,0x60,0x50,0x61,0x8C,0x26,0x03},
{0xB7,0xCC,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x50,0x43,0xFE,0x22,0x52,0x26,0x52,0x0B,0xFE,0x0A,0x02,0x10,0x20,0x17,0xFF,0x60,0x60,0x20,0xB0,0x61,0x2C,0x66,0x23,0x20,0x20},
{0xB7,0xCD,0x00,0x00,0x20,0x30,0x12,0x44,0x13,0xFE,0x42,0x04,0x23,0xFC,0x2A,0x04,0x0B,0xFC,0x12,0x04,0x13,0xFC,0x62,0x54,0x20,0x48,0x2F,0xFF,0x60,0xA0,0x63,0x18,0x2C,0x07},
{0xB7,0xCE,0x00,0x00,0x18,0x18,0x04,0x22,0x7F,0xFF,0x00,0x00,0x3E,0x06,0x22,0x64,0x3E,0x44,0x22,0x44,0x3E,0x44,0x22,0x1C,0x26,0x08,0x00,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xB7,0xCF,0x00,0x00,0x18,0x02,0x13,0xFF,0x10,0x50,0x15,0x52,0x55,0xFF,0x59,0x52,0x51,0x8E,0x11,0x02,0x11,0xFE,0x19,0x02,0x14,0x20,0x25,0xFE,0x20,0x20,0x20,0x22,0x43,0xFF},
{0xB7,0xD0,0x00,0x00,0x18,0x02,0x11,0xFF,0x10,0x10,0x16,0xA2,0x54,0xFF,0x58,0x82,0x50,0xFE,0x50,0x82,0x18,0xFE,0x14,0x82,0x16,0xFE,0x22,0x82,0x20,0x64,0x20,0x83,0x41,0x01},
{0xB7,0xD1,0x00,0x00,0x18,0xCC,0x10,0x88,0x13,0xFF,0x10,0x88,0x56,0xF8,0x54,0x88,0x58,0xF8,0x50,0xA8,0x10,0x22,0x1B,0xFF,0x14,0x60,0x24,0xB0,0x21,0x2C,0x46,0x23,0x00,0x20},
{0xB7,0xD2,0x00,0x00,0x18,0x18,0x10,0x12,0x11,0xFF,0x16,0x10,0x55,0x11,0x59,0xFF,0x51,0x95,0x11,0x59,0x19,0xFF,0x15,0x31,0x24,0x58,0x20,0x54,0x20,0x92,0x43,0x11,0x00,0x10},
{0xB7,0xD3,0x00,0x00,0x24,0x02,0x3D,0xFF,0x24,0x42,0x24,0x42,0x24,0x9C,0x3D,0x08,0x24,0xFE,0x24,0x82,0x24,0x82,0x3C,0xFE,0x24,0x82,0x00,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xB7,0xD4,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x15,0xFE,0x55,0x02,0x59,0xFE,0x51,0x02,0x50,0x30,0x10,0x22,0x1B,0xFF,0x14,0x00,0x25,0x06,0x20,0xC4,0x20,0x48,0x47,0xFF},
{0xB7,0xD5,0x00,0x00,0x18,0xFC,0x10,0x84,0x10,0xFC,0x16,0x84,0x54,0xFC,0x58,0x84,0x50,0x02,0x53,0xFF,0x10,0x40,0x18,0xFF,0x15,0x25,0x24,0x49,0x21,0x91,0x20,0x6E,0x40,0x04},
{0xB7,0xD6,0x00,0x00,0x24,0xC0,0x3E,0x82,0x24,0xFF,0x25,0x02,0x26,0x02,0x3C,0xF2,0x24,0x92,0x24,0x92,0x24,0xF2,0x3C,0x02,0x24,0x1C,0x00,0x08,0x24,0x44,0x22,0x22,0x42,0x22},
{0xB7,0xD7,0x00,0x00,0x18,0x30,0x11,0x44,0x11,0xFE,0x15,0x04,0x55,0xFC,0x59,0x04,0x51,0xFC,0x51,0x04,0x10,0x00,0x1B,0xFE,0x14,0x20,0x25,0xFC,0x20,0x20,0x20,0x22,0x47,0xFF},
{0xB7,0xD8,0x00,0x00,0x18,0x40,0x10,0x78,0x16,0x88,0x54,0x90,0x59,0xFE,0x53,0x52,0x51,0x52,0x11,0x4E,0x11,0x82,0x19,0x32,0x14,0x20,0x27,0xFF,0x20,0x50,0x20,0x8C,0x43,0x03},
{0xB7,0xD9,0x00,0x00,0x18,0x30,0x12,0x20,0x1F,0x22,0x22,0x3F,0x44,0x62,0x3F,0xA4,0x01,0x14,0x7F,0xC8,0x01,0x14,0x3F,0x24,0x01,0x43,0x00,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xB7,0xDA,0x00,0x00,0x1A,0x42,0x13,0xDF,0x12,0x42,0x16,0x42,0x5B,0xDE,0x52,0x42,0x52,0x00,0x12,0x82,0x13,0xDF,0x2A,0x12,0x2A,0x8A,0x23,0xC4,0x42,0x0A,0x42,0x0A,0x02,0x31},
{0xB7,0xDB,0x00,0x00,0x19,0x04,0x11,0xFE,0x11,0x24,0x11,0xFC,0x57,0x24,0x55,0xFC,0x59,0x04,0x50,0x00,0x13,0xFF,0x18,0x90,0x14,0x93,0x24,0x8C,0x20,0xE8,0x23,0x84,0x41,0x03},
{0xB7,0xDC,0x00,0x00,0x18,0x3E,0x13,0xC0,0x12,0x24,0x14,0x13,0x55,0xFD,0x58,0x40,0x53,0xFF,0x10,0x80,0x18,0x84,0x14,0xFE,0x25,0x44,0x21,0x28,0x22,0x30,0x44,0x6C,0x01,0x83},
{0xB7,0xDD,0x00,0x00,0x06,0x70,0x18,0x0C,0x66,0x33,0x09,0xC0,0x06,0x38,0x18,0x07,0x7F,0x7C,0x22,0x44,0x3E,0x48,0x22,0x48,0x3E,0x44,0x22,0x42,0x7E,0x52,0x22,0x4C,0x02,0x40},
{0xB7,0xDE,0x00,0x00,0x30,0xA4,0x26,0xA4,0x25,0xFF,0x24,0xA4,0x3E,0xBC,0x20,0x80,0x24,0xFF,0x3E,0x80,0x24,0x12,0x25,0xFF,0x24,0x30,0x24,0x58,0x44,0x54,0x45,0x93,0x44,0x10},
{0xB7,0xDF,0x00,0x00,0x1B,0x08,0x11,0x0A,0x20,0x89,0x3F,0x48,0x4A,0x3F,0x2A,0x88,0x3F,0x88,0x2A,0x88,0x33,0x98,0x20,0x94,0x3F,0x94,0x20,0x94,0x20,0xA2,0x3F,0xA2,0x20,0xC1},
{0xB7,0xE0,0x00,0x00,0x4C,0xC2,0x29,0x1F,0x13,0xC4,0x2A,0x55,0x4A,0x5F,0x0B,0xD5,0x1A,0x55,0x2A,0x15,0x2B,0xD5,0x4A,0x55,0x0A,0x57,0x0B,0xD5,0x0A,0x44,0x72,0x04,0x20,0x04},
{0xB7,0xE1,0x00,0x00,0x46,0x30,0x24,0x20,0x19,0xFE,0x10,0x20,0x2B,0xFF,0x48,0x00,0x0C,0xFC,0x14,0x84,0x14,0xFC,0x24,0x20,0x44,0xD6,0x07,0x48,0x44,0x54,0x39,0xE2,0x10,0x81},
{0xB7,0xE2,0x00,0x00,0x46,0x84,0x24,0xFE,0x18,0x84,0x10,0xBC,0x2A,0xA5,0x4B,0xFF,0x0A,0x01,0x14,0xFE,0x14,0x84,0x24,0xFC,0x44,0x84,0x04,0xFC,0x44,0x84,0x38,0x9C,0x10,0x88},
{0xB7,0xE3,0x00,0x00,0x11,0x92,0x79,0x1F,0x23,0xD2,0x22,0x52,0x23,0xD4,0x7A,0x54,0x22,0x52,0x23,0xD2,0x22,0x11,0x2A,0x91,0x72,0x91,0x23,0x5E,0x06,0x54,0x02,0x10,0x00,0x10},
{0xB7,0xE4,0x00,0x00,0x10,0xC9,0x78,0x8F,0x20,0x89,0x23,0xE9,0x20,0x8F,0x78,0x89,0x22,0xA9,0x23,0xE9,0x22,0x2F,0x2A,0x29,0x72,0x29,0x23,0xE9,0x02,0x29,0x00,0x17,0x00,0x12},
{0xB7,0xE5,0x00,0x00,0x12,0x42,0x7B,0xDF,0x22,0x42,0x22,0x42,0x23,0xDE,0x7A,0x42,0x22,0x00,0x22,0x82,0x23,0xDF,0x2A,0x12,0x72,0x8A,0x23,0xC4,0x02,0x0A,0x02,0x0A,0x02,0x31},
{0xB7,0xE6,0x00,0x00,0x02,0x02,0x7F,0x7F,0x08,0x08,0x3E,0x3E,0x08,0x08,0x0F,0x0A,0x78,0x7F,0x21,0x00,0x00,0x8C,0x06,0x90,0x24,0x20,0x24,0xC2,0x47,0x11,0x0C,0x19,0x33,0xF0},
{0xB7,0xE7,0x00,0x00,0x08,0x30,0x7D,0xA3,0x11,0x22,0x11,0xFE,0x11,0x02,0x10,0x00,0x7D,0xFF,0x10,0x20,0x11,0x42,0x15,0xFF,0x19,0x52,0x71,0x52,0x21,0x52,0x01,0x5E,0x01,0x04},
{0xB7,0xE8,0x00,0x00,0x09,0x02,0x7D,0xFF,0x11,0x02,0x11,0x7A,0x11,0x02,0x11,0x7A,0x7C,0x00,0x10,0xFC,0x10,0x84,0x14,0xFC,0x18,0x84,0x70,0xFC,0x20,0x84,0x00,0xFC,0x00,0x84},
{0xB7,0xE9,0x00,0x00,0x12,0x02,0x7B,0xFF,0x22,0x02,0x24,0x24,0x21,0xFC,0x78,0x20,0x21,0xFC,0x21,0x24,0x29,0xFC,0x31,0x24,0x61,0xFC,0x20,0x20,0x07,0xFF,0x00,0x20,0x00,0x20},
{0xB7,0xEA,0x00,0x00,0x08,0xDB,0x7C,0x92,0x11,0x24,0x11,0x24,0x10,0x92,0x10,0x9A,0x7C,0x20,0x11,0xFF,0x11,0x05,0x11,0x69,0x1D,0x11,0x71,0x2D,0x21,0x45,0x01,0xFF,0x01,0x01},
{0xB7,0xEB,0x00,0x00,0x08,0xCC,0x7C,0x88,0x13,0xFF,0x10,0x88,0x10,0x20,0x11,0x24,0x7D,0xFE,0x11,0x24,0x11,0x24,0x13,0xFF,0x1C,0x20,0x70,0x50,0x20,0x48,0x00,0x84,0x03,0x03},
{0xB7,0xEC,0x00,0x00,0x09,0xE0,0x7C,0x30,0x10,0x48,0x10,0x84,0x13,0x7B,0x10,0x00,0x7D,0xE3,0x11,0x2A,0x11,0xEA,0x15,0x2A,0x19,0xEA,0x71,0x2A,0x21,0x22,0x01,0x2E,0x01,0x64},
{0xB7,0xED,0x00,0x00,0x10,0xCC,0x0C,0x88,0x24,0x92,0x3F,0xFF,0x20,0x02,0x47,0xF4,0x04,0x10,0x07,0xF0,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xB7,0xEE,0x00,0x00,0x00,0x30,0x44,0x24,0x7D,0xFE,0x54,0x30,0x54,0x4C,0x54,0x84,0x7D,0xFF,0x54,0x02,0x54,0xF2,0x54,0x92,0x7C,0x92,0x44,0xF2,0x00,0x02,0x00,0x0E,0x00,0x04},
{0xB7,0xEF,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x0C,0x2F,0xCA,0x0A,0x12,0x0A,0x52,0x1B,0xE9,0x6A,0x44,0x4A,0x44,0x0A,0x40,0x14,0x48,0x15,0xC4,0x24,0x84},
{0xB7,0xF0,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x29,0x32,0x29,0x24,0x0A,0x50,0x08,0x8E,0x1B,0x02,0x68,0x30,0x49,0x26,0x0A,0x28,0x10,0x50,0x11,0x8C,0x26,0x03},
{0xB7,0xF1,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x24,0x2B,0xFE,0x08,0x00,0x08,0xC6,0x19,0x8C,0x6A,0x52,0x48,0x20,0x0B,0xFF,0x10,0x20,0x10,0x20,0x20,0x20},
{0xB7,0xF2,0x00,0x00,0x00,0x30,0x08,0x22,0x0F,0xFF,0x48,0x00,0x28,0xCC,0x28,0x88,0x0B,0xDF,0x08,0x88,0x1A,0xAA,0x6A,0xAA,0x4A,0xAA,0x0A,0xAA,0x12,0xCB,0x14,0x88,0x20,0x88},
{0xB7,0xF3,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0x54,0x2B,0xDE,0x08,0x50,0x08,0x54,0x1B,0xDE,0x68,0x50,0x48,0xD2,0x0B,0x5F,0x12,0x50,0x10,0x90,0x21,0x10},
{0xB7,0xF4,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x40,0x29,0xFC,0x29,0x24,0x09,0xFC,0x09,0x24,0x19,0xFC,0x68,0x40,0x48,0x92,0x0B,0xFF,0x10,0x10,0x10,0x10,0x20,0x10},
{0xB7,0xF5,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x18,0x29,0xE0,0x28,0x24,0x0B,0xFE,0x08,0xA8,0x1B,0x27,0x68,0x40,0x4B,0xFF,0x08,0x44,0x11,0x88,0x10,0x70,0x23,0x8F},
{0xB7,0xF6,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x2B,0x00,0x2A,0x12,0x0B,0xDF,0x0A,0x92,0x1C,0x92,0x6B,0xD2,0x48,0x92,0x09,0x52,0x11,0x5E,0x12,0x52,0x24,0x00},
{0xB7,0xF7,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x28,0xC6,0x28,0x84,0x0B,0xDF,0x08,0x84,0x19,0x8C,0x69,0xCE,0x4A,0xB5,0x0A,0x95,0x14,0xA4,0x10,0x84,0x20,0x84},
{0xB7,0xF8,0x00,0x00,0x02,0x08,0x3F,0xFE,0x01,0x90,0x00,0x62,0x0F,0x9A,0x04,0x26,0x7F,0xF8,0x02,0x60,0x01,0x82,0x1E,0x7A,0x00,0x06,0x1F,0xFC,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xB7,0xF9,0x00,0x00,0x22,0x42,0x3F,0x7F,0x22,0x42,0x3E,0x7E,0x22,0x42,0x3E,0x7E,0x22,0x42,0x20,0x42,0x00,0x8E,0x10,0x84,0x1F,0xFE,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xB7,0xFA,0x00,0x00,0x48,0x20,0x7B,0xFE,0x48,0x20,0x49,0xFC,0x78,0x20,0x4B,0xFF,0x48,0x00,0x79,0xFC,0x49,0x04,0x49,0xFC,0x49,0x04,0x79,0xFC,0x49,0x04,0x41,0x1C,0x01,0x08},
{0xB7,0xFB,0x00,0x00,0x48,0x30,0x78,0x24,0x4B,0xFE,0x48,0x20,0x79,0xFC,0x48,0x24,0x4B,0xFF,0x78,0x24,0x49,0xFC,0x48,0x20,0x49,0xA4,0x79,0x3E,0x49,0xA0,0x42,0x60,0x04,0x1F},
{0xB7,0xFC,0x00,0x00,0x48,0x30,0x7C,0x24,0x49,0xFE,0x48,0x20,0x78,0x22,0x4B,0xFF,0x48,0x88,0x78,0x89,0x49,0x07,0x4A,0x30,0x48,0x24,0x79,0xFE,0x48,0x20,0x40,0x22,0x03,0xFF},
{0xB7,0xFD,0x00,0x00,0x48,0x30,0x78,0x22,0x4B,0xFF,0x48,0x20,0x79,0xA6,0x49,0x24,0x49,0xA6,0x7A,0x69,0x48,0x20,0x48,0x60,0x48,0xB0,0x78,0xAC,0x49,0x23,0x42,0x20,0x00,0x20},
{0xB7,0xFE,0x00,0x00,0x08,0x02,0x0F,0x7F,0x08,0x22,0x7F,0x92,0x04,0x14,0x35,0x08,0x44,0x94,0x18,0x23,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8},
{0xB8,0x40,0x00,0x00,0x48,0x60,0x7C,0x43,0x49,0xFA,0x48,0x44,0x78,0x48,0x4B,0xFF,0x48,0x20,0x78,0x60,0x48,0x94,0x49,0xFE,0x4E,0x84,0x78,0xFC,0x48,0x84,0x40,0xFC,0x00,0x84},
{0xB8,0x41,0x00,0x00,0x20,0x02,0x3F,0xFF,0x22,0x22,0x22,0x22,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x04,0x10,0x1F,0xFC,0x00,0x80,0x3F,0xFE,0x00,0x80,0x00,0x80},
{0xB8,0x42,0x00,0x00,0x48,0x1E,0x7D,0xF0,0x49,0x24,0x49,0x13,0x7A,0x11,0x48,0x20,0x48,0x22,0x7B,0xFF,0x48,0x60,0x48,0xB0,0x48,0xA8,0x79,0x24,0x4A,0x23,0x40,0x20,0x00,0x20},
{0xB8,0x43,0x00,0x00,0x48,0x1E,0x7D,0xE0,0x49,0x24,0x49,0x13,0x7A,0x01,0x49,0xFE,0x48,0x22,0x7B,0xFF,0x48,0x22,0x49,0xFE,0x48,0x22,0x78,0x20,0x48,0x20,0x40,0xE0,0x00,0x40},
{0xB8,0x44,0x00,0x00,0x48,0x30,0x7D,0x42,0x49,0xFF,0x49,0x22,0x79,0xFE,0x49,0x22,0x49,0x22,0x79,0xFE,0x49,0x42,0x48,0x58,0x48,0x92,0x7B,0xFF,0x48,0x10,0x40,0x10,0x00,0x10},
{0xB8,0x45,0x00,0x00,0x4A,0x42,0x7B,0x9F,0x4A,0x02,0x4A,0x82,0x7B,0xDE,0x4A,0x02,0x4A,0x02,0x7B,0xFE,0x4A,0x92,0x48,0x90,0x48,0x90,0x78,0x92,0x49,0x12,0x41,0x13,0x02,0x0E},
{0xB8,0x46,0x00,0x00,0x48,0xD8,0x7C,0x90,0x49,0x22,0x49,0xFF,0x79,0x10,0x4B,0x14,0x4D,0xFE,0x79,0x10,0x49,0x14,0x49,0xFE,0x49,0x10,0x79,0x10,0x49,0x12,0x41,0xFF,0x01,0x00},
{0xB8,0x47,0x00,0x00,0x30,0x1E,0x24,0xF0,0x3E,0x12,0x29,0xFF,0x48,0x30,0x08,0x5C,0x7E,0x93,0x09,0x20,0x18,0x22,0x15,0xFF,0x14,0x44,0x24,0xC8,0x20,0x30,0x40,0xCE,0x03,0x02},
{0xB8,0x48,0x00,0x00,0x04,0x18,0x7E,0x12,0x11,0xFF,0x10,0x00,0x20,0xC6,0x24,0x84,0x3E,0xC6,0x65,0x29,0x24,0x00,0x24,0x12,0x25,0xFF,0x3C,0x10,0x24,0x10,0x20,0x10,0x00,0x10},
{0xB8,0x49,0x00,0x00,0x09,0x06,0x7C,0xC4,0x10,0x48,0x13,0xFF,0x20,0x48,0x24,0x48,0x3D,0x4B,0x65,0x4A,0x25,0x4A,0x25,0x4A,0x24,0xCC,0x3C,0x48,0x24,0x48,0x20,0x4A,0x03,0xFF},
{0xB8,0x4A,0x00,0x00,0x08,0x30,0x7D,0x22,0x11,0xFF,0x11,0x02,0x22,0xC4,0x20,0x88,0x3C,0xEE,0x64,0xAA,0x25,0x2A,0x26,0xAA,0x24,0x4E,0x3C,0x4A,0x24,0x88,0x20,0x89,0x01,0x07},
{0xB8,0x4B,0x00,0x00,0x08,0x6C,0x7C,0x48,0x11,0x4A,0x11,0xFF,0x11,0x4A,0x25,0x4A,0x3D,0xFE,0x65,0x4A,0x25,0x4A,0x27,0xFF,0x24,0x00,0x3C,0xC8,0x24,0x84,0x21,0x06,0x02,0x02},
{0xB8,0x4C,0x00,0x00,0x04,0x24,0x7E,0x3E,0x10,0x44,0x10,0xF8,0x20,0x0A,0x25,0xFF,0x3C,0x10,0x65,0x13,0x24,0x9A,0x24,0xB4,0x24,0x54,0x3D,0x92,0x25,0x11,0x20,0x70,0x00,0x20},
{0xB8,0x4D,0x00,0x00,0x04,0x82,0x7E,0xFF,0x10,0x82,0x10,0x92,0x20,0xBA,0x24,0x92,0x3E,0xBA,0x64,0x82,0x24,0xBA,0x24,0xAA,0x24,0xAA,0x3C,0xBA,0x25,0x02,0x21,0x0E,0x02,0x04},
{0xB8,0x4E,0x00,0x00,0x09,0x29,0x7D,0xEF,0x11,0x29,0x11,0x29,0x21,0xEF,0x25,0x29,0x3D,0x29,0x65,0x29,0x25,0xEF,0x25,0x29,0x25,0x29,0x3D,0x29,0x25,0x29,0x22,0xF7,0x02,0x52},
{0xB8,0x4F,0x00,0x00,0x08,0x18,0x7D,0x22,0x11,0xFF,0x11,0x22,0x21,0xFE,0x25,0x22,0x3D,0x22,0x65,0xFE,0x25,0x42,0x24,0x58,0x24,0x92,0x3D,0xFF,0x24,0x10,0x20,0x10,0x00,0x10},
{0xB8,0x50,0x00,0x00,0x04,0x6C,0x7E,0x48,0x10,0x92,0x10,0xFF,0x21,0x90,0x22,0x94,0x3C,0xFE,0x64,0x90,0x24,0x94,0x24,0xFE,0x24,0x90,0x3C,0x90,0x24,0x92,0x20,0xFF,0x00,0x80},
{0xB8,0x51,0x00,0x00,0x08,0x30,0x7D,0x22,0x11,0xFF,0x11,0x02,0x22,0x6C,0x24,0x49,0x3C,0x89,0x65,0x07,0x24,0x00,0x25,0xFE,0x24,0x20,0x3C,0x20,0x24,0x20,0x20,0x22,0x03,0xFF},
{0xB8,0x52,0x00,0x00,0x04,0x66,0x3E,0x44,0x01,0xFF,0x00,0x44,0x7F,0x44,0x08,0x7C,0x08,0x44,0x2A,0x7C,0x2A,0x44,0x2A,0x44,0x2B,0xFF,0x4A,0x00,0x48,0xC4,0x08,0x83,0x09,0x01},
{0xB8,0x53,0x00,0x00,0x04,0x24,0x3E,0x3E,0x00,0x44,0x04,0xF8,0x7E,0x0A,0x09,0xFF,0x08,0x10,0x2A,0x93,0x2A,0x5A,0x2A,0x34,0x2A,0xD4,0x4A,0x92,0x4A,0x11,0x08,0x70,0x08,0x20},
{0xB8,0x54,0x00,0x00,0x0C,0x0C,0x08,0x08,0x7F,0x7F,0x18,0x18,0x2C,0x2C,0x4B,0x4B,0x00,0x00,0x0F,0xF8,0x00,0x00,0x3F,0xFE,0x00,0x80,0x0C,0x98,0x10,0x86,0x63,0x82,0x01,0x00},
{0xB8,0x55,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x20,0x82,0x7F,0xFF,0x20,0x82,0x20,0xC2,0x27,0xA2,0x22,0x2E,0x20,0x04},
{0xB8,0x56,0x00,0x00,0x01,0x80,0x06,0x60,0x08,0x98,0x77,0xE7,0x02,0x40,0x11,0x88,0x16,0x68,0x1F,0xF8,0x01,0x00,0x21,0x04,0x7F,0xFE,0x22,0x44,0x2F,0xA4,0x24,0x24,0x20,0x0C},
{0xB8,0x57,0x00,0x00,0x0E,0x18,0x78,0x10,0x08,0xFE,0x08,0x10,0x7E,0xFF,0x08,0x48,0x18,0x49,0x1D,0x87,0x2A,0x40,0x2A,0x7E,0x48,0xC4,0x09,0x48,0x08,0x30,0x08,0xCC,0x0B,0x03},
{0xB8,0x58,0x00,0x00,0x0E,0x6C,0x78,0x48,0x08,0x92,0x08,0xFF,0x7E,0x90,0x09,0x94,0x1A,0xFE,0x18,0x90,0x2C,0x94,0x2A,0xFE,0x4A,0x90,0x08,0x90,0x08,0x92,0x08,0xFF,0x08,0x80},
{0xB8,0x59,0x00,0x00,0x0E,0x82,0x78,0xFF,0x08,0x82,0x08,0x92,0x7E,0xBA,0x08,0x92,0x18,0xBA,0x18,0x82,0x2C,0xBA,0x2A,0xAA,0x4A,0xAA,0x08,0xBA,0x09,0x02,0x09,0x0E,0x0A,0x04},
{0xB8,0x5A,0x00,0x00,0x0E,0x30,0x78,0x28,0x08,0x48,0x08,0x44,0x7E,0xBA,0x09,0x01,0x18,0xFE,0x1C,0x04,0x2A,0x08,0x2A,0x20,0x48,0x10,0x09,0x52,0x09,0x41,0x0A,0x45,0x08,0x3C},
{0xB8,0x5B,0x00,0x00,0x00,0x82,0x7F,0xFF,0x12,0x48,0x13,0xC8,0x10,0x08,0x1F,0xF8,0x00,0x00,0x00,0xF8,0x3F,0x80,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xB8,0x5C,0x00,0x00,0x0E,0x82,0x78,0xFF,0x08,0x92,0x08,0xFE,0x7E,0x92,0x08,0xFE,0x18,0x92,0x18,0x10,0x2D,0xFF,0x2A,0x30,0x4A,0x58,0x08,0x54,0x08,0x93,0x09,0x10,0x08,0x10},
{0xB8,0x5D,0x00,0x00,0x20,0x82,0x3F,0xFF,0x21,0x22,0x46,0x25,0x38,0x1F,0x00,0x00,0x1F,0xFC,0x10,0x04,0x1F,0xFC,0x10,0x40,0x14,0x44,0x17,0xFC,0x20,0x40,0x28,0x42,0x4F,0xFE},
{0xB8,0x5E,0x00,0x00,0x20,0x84,0x3F,0xFE,0x22,0x25,0x44,0x1F,0x3F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8E,0x00,0x80},
{0xB8,0x5F,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x84,0x18,0x30,0x10,0x24,0x59,0xFE,0x54,0x24,0x54,0x24,0x10,0x24,0x13,0xFF,0x10,0x50,0x10,0x48,0x10,0x84,0x13,0x03},
{0xB8,0x60,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x46,0x84,0x08,0x00,0x3F,0x22,0x21,0x3F,0x3F,0x22,0x21,0x22,0x3F,0x22,0x20,0x22,0x3F,0x22,0x20,0x3E,0x3F,0x24,0x20,0x20},
{0xB8,0x61,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x04,0x10,0xC0,0x10,0x82,0x7C,0xFF,0x11,0x02,0x12,0x7A,0x10,0x02,0x1C,0xFA,0x70,0x02,0x20,0x04,0x00,0x3C,0x00,0x08},
{0xB8,0x62,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x84,0x00,0x00,0x3F,0xFE,0x00,0x80,0x0C,0x8C,0x08,0x88,0x14,0x94,0x12,0x92,0x22,0xA2,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB8,0x63,0x00,0x00,0x10,0x20,0x1F,0x3F,0x28,0x48,0x44,0x84,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x0A,0x2A,0x02,0x22,0x04,0x23,0x38,0x1E},
{0xB8,0x64,0x00,0x00,0x20,0x04,0x13,0xFE,0x44,0x44,0x2B,0x46,0x08,0x85,0x70,0x9D,0x13,0x08,0x00,0xC0,0x18,0x8C,0x04,0x90,0x7F,0xFF,0x01,0xA0,0x06,0x9C,0x38,0x83,0x00,0x80},
{0xB8,0x65,0x00,0x00,0x0C,0x02,0x08,0xFF,0x4A,0x10,0x2A,0x92,0x2C,0xFF,0x08,0x92,0x7E,0xFE,0x08,0x92,0x18,0xFE,0x2C,0x92,0x2A,0x10,0x48,0xD0,0x09,0x20,0x08,0x58,0x09,0x87},
{0xB8,0x66,0x00,0x00,0x00,0x80,0x1F,0xFC,0x10,0x74,0x17,0x94,0x12,0xA4,0x1F,0xFC,0x12,0xA4,0x14,0x94,0x1F,0xFC,0x00,0x00,0x7F,0xFF,0x04,0x00,0x0F,0xF8,0x08,0x08,0x00,0x70},
{0xB8,0x67,0x00,0x00,0x18,0x04,0x11,0xFE,0x20,0x00,0x6C,0x92,0x18,0x92,0x11,0x24,0x2C,0x92,0x74,0x92,0x50,0x00,0x18,0xFE,0x54,0x10,0x54,0x10,0x54,0x10,0x50,0x12,0x11,0xFF},
{0xB8,0x68,0x00,0x00,0x18,0x84,0x10,0xFE,0x20,0x84,0x6C,0xFC,0x18,0x84,0x11,0x02,0x2D,0xFF,0x75,0x02,0x51,0xFE,0x19,0x02,0x55,0xFE,0x55,0x02,0x51,0x02,0x11,0x0E,0x11,0x04},
{0xB8,0x69,0x00,0x00,0x19,0x01,0x11,0xFF,0x21,0x01,0x6D,0x19,0x19,0x11,0x11,0x7D,0x2D,0x11,0x75,0x31,0x51,0x59,0x19,0x55,0x55,0x11,0x55,0x11,0x55,0x01,0x51,0xFF,0x11,0x01},
{0xB8,0x6A,0x00,0x00,0x18,0x60,0x10,0x49,0x20,0x6F,0x6D,0xC9,0x18,0x49,0x10,0x4A,0x2D,0xEA,0x74,0x4A,0x50,0x49,0x19,0xE9,0x54,0x49,0x54,0x4F,0x54,0x8A,0x50,0x88,0x11,0x08},
{0xB8,0x6B,0x00,0x00,0x18,0x0E,0x10,0xF0,0x20,0x92,0x6C,0x89,0x19,0x09,0x10,0x20,0x2C,0x22,0x75,0xFF,0x50,0x44,0x18,0x44,0x54,0xC8,0x54,0x30,0x54,0x28,0x50,0x46,0x11,0x82},
{0xB8,0x6C,0x00,0x00,0x0C,0x84,0x08,0xFE,0x08,0x88,0x13,0x48,0x10,0x30,0x34,0x4C,0x55,0xB3,0x14,0x20,0x14,0xC8,0x14,0x32,0x15,0xFD,0x14,0x11,0x10,0xD4,0x10,0x93,0x11,0x11},
{0xB8,0x6D,0x00,0x00,0x3F,0xFE,0x22,0x22,0x3F,0xFE,0x00,0x80,0x7F,0xFF,0x00,0x80,0x07,0xF8,0x34,0x08,0x27,0xF8,0x24,0x08,0x27,0xF8,0x24,0x08,0x27,0xF8,0x20,0x02,0x3F,0xFF},
{0xB8,0x6E,0x00,0x00,0x3F,0xFC,0x22,0x44,0x3F,0xFC,0x01,0x00,0x01,0xFC,0x01,0x00,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x10,0x08,0x1F,0xF8,0x01,0x02,0x7F,0xFF,0x01,0x00,0x01,0x00},
{0xB8,0x6F,0x00,0x00,0x3F,0xFC,0x22,0x44,0x22,0x44,0x3F,0xFC,0x00,0x00,0x02,0x44,0x7E,0x7E,0x02,0x40,0x02,0x48,0x3E,0x7C,0x03,0x40,0x0E,0x42,0x72,0x7F,0x04,0x40,0x08,0x40},
{0xB8,0x70,0x00,0x00,0x3F,0xFC,0x22,0x44,0x22,0x44,0x3F,0xFC,0x02,0x00,0x1F,0xE6,0x02,0x18,0x7F,0xFF,0x01,0xA0,0x06,0x10,0x1F,0xF8,0x68,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8},
{0xB8,0x71,0x00,0x00,0x04,0x10,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x00,0x3F,0x68,0x04,0x44,0x7F,0xFF,0x04,0x20,0x3F,0x2C,0x04,0x10,0x3C,0x6D,0x09,0x83},
{0xB8,0x72,0x00,0x00,0x04,0x10,0x3F,0xFE,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x10,0x00,0x08,0x84,0x42,0xFE,0x24,0x84,0x09,0x28,0x0A,0x20,0x70,0x50,0x10,0x8C,0x13,0x03},
{0xB8,0x73,0x00,0x00,0x02,0x23,0x7F,0x12,0x12,0x14,0x12,0x7F,0x7F,0x88,0x12,0x08,0x12,0x3E,0x7E,0x08,0x22,0x08,0x20,0x0A,0x5F,0x7F,0x51,0x08,0x11,0x08,0x1F,0x08,0x11,0x08},
{0xB8,0x74,0x00,0x00,0x01,0x00,0x7F,0xA2,0x11,0x3F,0x1F,0x22,0x11,0x22,0x1F,0x22,0x11,0xBE,0x7F,0x22,0x21,0x00,0x00,0xF8,0x1F,0x80,0x00,0x88,0x3F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB8,0x75,0x00,0x00,0x04,0x18,0x7E,0x10,0x24,0xFE,0x24,0x92,0x3C,0xFE,0x24,0x92,0x24,0xFE,0x3C,0x00,0x25,0xFF,0x26,0x40,0x3C,0xFE,0x64,0x82,0x24,0x02,0x04,0x1C,0x04,0x08},
{0xB8,0x76,0x00,0x00,0x12,0x18,0x1F,0x10,0x10,0x7E,0x1F,0x12,0x10,0xFF,0x1F,0x12,0x10,0x7E,0x7F,0x10,0x08,0x7E,0x08,0x10,0x12,0x12,0x7D,0x7F,0x21,0x10,0x00,0x10,0x00,0x10},
{0xB8,0x77,0x00,0x00,0x30,0x18,0x26,0x10,0x38,0x7E,0x22,0x12,0x1E,0xFF,0x20,0x12,0x3E,0x7E,0x48,0x10,0x0A,0x7E,0x7F,0x10,0x08,0x12,0x14,0xFF,0x12,0x10,0x22,0x10,0x40,0x10},
{0xB8,0x78,0x00,0x00,0x24,0x0C,0x3D,0xC8,0x24,0x5E,0x24,0x4A,0x3C,0xBF,0x24,0x8A,0x25,0x1E,0x25,0xC8,0x3C,0x5E,0x25,0x48,0x26,0xBE,0x24,0x88,0x45,0x48,0x5D,0x21,0x4A,0x1E},
{0xB8,0x79,0x00,0x00,0x24,0x02,0x3D,0xFF,0x24,0x48,0x25,0x4A,0x3D,0xFF,0x25,0x4A,0x25,0xFE,0x25,0x02,0x3C,0x40,0x27,0xFF,0x24,0x44,0x25,0x88,0x44,0x70,0x5C,0x4E,0x49,0x82},
{0xB8,0x7A,0x00,0x00,0x25,0xF8,0x3D,0x08,0x25,0xF8,0x25,0x08,0x3D,0xF8,0x25,0x08,0x24,0x02,0x27,0xFF,0x3C,0x80,0x25,0xFE,0x26,0x4A,0x24,0x92,0x45,0x22,0x5C,0x5C,0x48,0x08},
{0xB8,0x7B,0x00,0x00,0x24,0x82,0x3E,0xFF,0x24,0x82,0x24,0xFE,0x3C,0x82,0x24,0xFE,0x24,0x82,0x24,0x18,0x3C,0x90,0x24,0xFE,0x24,0x90,0x25,0x7E,0x44,0x10,0x5C,0x12,0x49,0xFF},
{0xB8,0x7C,0x00,0x00,0x24,0x82,0x3E,0xFF,0x24,0x92,0x24,0x92,0x3C,0xFE,0x24,0x92,0x24,0x92,0x24,0xFE,0x3C,0x82,0x24,0x10,0x24,0x48,0x25,0x4A,0x45,0x41,0x5D,0x45,0x48,0x3C},
{0xB8,0x7D,0x00,0x00,0x25,0x49,0x3D,0x2F,0x25,0x29,0x26,0x09,0x3C,0xC9,0x24,0xA9,0x25,0x29,0x26,0x09,0x3D,0xE9,0x25,0x29,0x25,0x2F,0x25,0x2A,0x45,0xE8,0x5D,0x28,0x48,0x08},
{0xB8,0x7E,0x00,0x00,0x24,0x1E,0x3E,0xF0,0x24,0x12,0x25,0xFF,0x3C,0x10,0x24,0xFE,0x24,0x92,0x24,0xFE,0x3C,0x92,0x24,0xFE,0x24,0x10,0x24,0xFE,0x44,0x10,0x5C,0x12,0x49,0xFF},
{0xB8,0xA1,0x00,0x00,0x24,0x82,0x3E,0xFF,0x24,0x80,0x25,0x7E,0x3C,0x42,0x24,0x7E,0x24,0x42,0x24,0x7E,0x3C,0x20,0x24,0x7F,0x24,0x42,0x25,0xA4,0x44,0x18,0x5C,0x6C,0x49,0x83},
{0xB8,0xA2,0x00,0x00,0x24,0x18,0x3E,0xA2,0x24,0xFF,0x24,0x82,0x3C,0xFE,0x24,0x82,0x24,0xFE,0x24,0x92,0x3C,0x10,0x25,0xDB,0x24,0x54,0x24,0x94,0x44,0x92,0x5D,0x71,0x48,0x20},
{0xB8,0xA3,0x00,0x00,0x24,0xDB,0x3C,0x92,0x25,0x24,0x25,0x24,0x3C,0x92,0x24,0xB2,0x24,0x40,0x25,0xFF,0x3D,0x01,0x25,0x6D,0x25,0x11,0x25,0x2D,0x45,0x45,0x5D,0xFF,0x49,0x01},
{0xB8,0xA4,0x00,0x00,0x0F,0x7C,0x10,0x04,0x1F,0x7C,0x10,0x04,0x1F,0xFC,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x02,0x00,0x7F,0xFF,0x04,0x02,0x78,0x1C},
{0xB8,0xA5,0x00,0x00,0x18,0x00,0x21,0xC7,0x3C,0x5C,0x24,0x44,0x34,0x84,0x2C,0x84,0x25,0xDF,0x7D,0x44,0x24,0x44,0x34,0x44,0x2D,0x44,0x26,0x9F,0x44,0xC0,0x5D,0x30,0x49,0x0F},
{0xB8,0xA6,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x84,0x3F,0xFE,0x04,0x10,0x22,0x22,0x3F,0xFF,0x20,0x82,0x48,0x84,0x0F,0xF8,0x08,0x88,0x08,0xB8,0x08,0x90,0x00,0x80},
{0xB8,0xA7,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x20,0x02,0x3F,0xFF,0x20,0x82,0x5F,0xFC,0x00,0x80,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x8A,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xB8,0xA8,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0x80,0x10,0xFC,0x45,0x08,0x2A,0x90,0x08,0x60,0x10,0x98,0x13,0x07,0x6D,0xFC,0x21,0x04,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xB8,0xA9,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x00,0x00,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0,0x00,0x02,0x7F,0xFF},
{0xB8,0xAA,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x00,0x00,0x3F,0xB0,0x01,0x40,0x32,0x36,0x0C,0x08,0x77,0xF7,0x00,0x80,0x00,0x84,0x3F,0xFE,0x01,0x40,0x06,0x30,0x38,0x0E},
{0xB8,0xAB,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x01,0x00,0x1F,0xE0,0x02,0x22,0x7F,0xFF,0x08,0x10,0x0F,0xF0,0x00,0x80,0x3F,0xFC,0x08,0x80,0x7F,0xFE,0x00,0x80,0x00,0x80},
{0xB8,0xAC,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x08,0x42,0x0A,0x7F,0x7F,0x42,0x08,0x42,0x08,0x7E,0x4A,0x42,0x7F,0x42,0x42,0x7E,0x42,0x42,0x7E,0x82,0x42,0x9E,0x01,0x04},
{0xB8,0xAD,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x09,0x14,0x7F,0xFE,0x09,0x10,0x09,0xF0,0x08,0x04,0x0F,0xFE,0x00,0x80,0x7F,0xFF,0x01,0x80,0x06,0xF0,0x78,0x8F,0x00,0x80},
{0xB8,0xAE,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x3F,0xFE,0x08,0x40,0x0F,0x4C,0x11,0x70,0x6A,0x42,0x04,0x43,0x38,0x3E,0x04,0x20,0x7F,0xFF,0x04,0x20,0x08,0x20,0x30,0x20},
{0xB8,0xAF,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x02,0x0F,0xFF,0x18,0x82,0x69,0x42,0x0F,0xF2,0x08,0x04,0x00,0x38},
{0xB8,0xB0,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x3E,0x7C,0x22,0x44,0x3E,0x7C,0x00,0x00,0x1F,0xF8,0x00,0x00,0x7F,0xFF,0x04,0x00,0x0F,0xF8,0x08,0x08,0x00,0x30,0x00,0xC0},
{0xB8,0xB1,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0x00,0x07,0xF0,0x04,0x10,0x04,0xF0,0x24,0x92,0x3F,0xFF,0x20,0x02,0x27,0xE2,0x24,0x22,0x27,0xE2,0x20,0x0E,0x20,0x04},
{0xB8,0xB2,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x10,0x04,0x1F,0xFE,0x22,0x44,0x5F,0xE4,0x02,0x04,0x1F,0xC4,0x12,0x44,0x1F,0xC4,0x12,0x44,0x1F,0xC4,0x12,0x44,0x12,0xD8},
{0xB8,0xB3,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x00,0xFC,0x1F,0x80,0x00,0x84,0x7F,0xFE,0x00,0x80,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x88,0x3F,0xFE,0x00,0x80,0x7F,0xFF},
{0xB8,0xB4,0x00,0x00,0x06,0x30,0x04,0x22,0x7F,0xFF,0x04,0x20,0x19,0x04,0x21,0xFE,0x7D,0x24,0x45,0x24,0x45,0x24,0x7D,0xFC,0x45,0x04,0x45,0x02,0x7D,0x02,0x45,0x03,0x00,0xFE},
{0xB8,0xB5,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x21,0x02,0x3F,0x7F,0x21,0x02,0x3F,0x7E,0x20,0x00,0x22,0x02,0x3F,0x7F,0x20,0x22,0x22,0x14,0x3F,0x18,0x20,0x24,0x20,0xC3},
{0xB8,0xB6,0x00,0x00,0x02,0x12,0x7F,0xFF,0x02,0x10,0x0D,0x04,0x09,0xFE,0x11,0x04,0x19,0x04,0x31,0xFC,0x51,0x24,0x10,0x20,0x17,0xFF,0x10,0x60,0x11,0xB8,0x16,0x27,0x10,0x20},
{0xB8,0xB7,0x00,0x00,0x00,0xF0,0x20,0x84,0x3F,0xFE,0x21,0x04,0x21,0xF8,0x2F,0x01,0x20,0xFF,0x20,0x88,0x26,0xF8,0x24,0x00,0x27,0xFC,0x20,0x44,0x5F,0xFF,0x40,0xB0,0x4F,0x0F},
{0xB8,0xB8,0x00,0x00,0x00,0xF0,0x20,0x84,0x3F,0xFE,0x20,0x84,0x2F,0xF8,0x20,0x81,0x27,0xFF,0x24,0x48,0x27,0xF8,0x24,0x48,0x27,0xF8,0x20,0x80,0x4F,0xFE,0x41,0x02,0x4E,0x1C},
{0xB8,0xB9,0x00,0x00,0x24,0x20,0x3C,0x3C,0x25,0x22,0x25,0xFF,0x3D,0x02,0x25,0x14,0x01,0x1C,0x7F,0x71,0x21,0x0F,0x3D,0x00,0x25,0x6C,0x45,0x48,0x05,0x49,0x3A,0x49,0x12,0x87},
{0xB8,0xBA,0x00,0x00,0x18,0x04,0x11,0xFE,0x10,0x04,0x54,0x68,0x7D,0x12,0x55,0xFF,0x55,0x22,0x55,0xFE,0x7D,0x22,0x55,0x22,0x11,0xFE,0x19,0x22,0x75,0x22,0x25,0x2E,0x01,0x24},
{0xB8,0xBB,0x00,0x00,0x18,0x00,0x11,0xC7,0x54,0x5C,0x7C,0x44,0x54,0x84,0x54,0x84,0x55,0x1F,0x7D,0xC4,0x54,0x44,0x10,0x44,0x13,0x44,0x1A,0x9F,0x74,0xC0,0x25,0x30,0x01,0x0F},
{0xB8,0xBC,0x00,0x00,0x18,0x48,0x10,0x7C,0x55,0x48,0x7D,0x48,0x55,0x78,0x55,0x48,0x55,0x00,0x7D,0xFC,0x55,0x24,0x10,0x24,0x13,0xFF,0x18,0x50,0x74,0x50,0x24,0x88,0x01,0x06},
{0xB8,0xBD,0x00,0x00,0x0C,0x4E,0x08,0x70,0x7F,0x42,0x08,0x7F,0x0E,0x48,0x78,0x88,0x08,0x88,0x39,0x08,0x00,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x84,0x7F,0xFB,0x20,0x01},
{0xB8,0xBE,0x00,0x00,0x20,0x04,0x3F,0xFE,0x22,0x24,0x3F,0xFC,0x28,0x04,0x08,0x02,0x1F,0xFF,0x22,0x02,0x5F,0xE2,0x12,0x22,0x1F,0xE2,0x02,0x42,0x3F,0xA4,0x10,0x24,0x00,0x18},
{0xB8,0xBF,0x00,0x00,0x18,0xEC,0x13,0x88,0x10,0x8A,0x7C,0x89,0x54,0x88,0x57,0xFF,0x54,0x88,0x7C,0xA8,0x10,0xCB,0x13,0x8A,0x1A,0x84,0x74,0x8D,0x24,0x95,0x03,0xA3,0x01,0x01},
{0xB8,0xC0,0x00,0x00,0x18,0x18,0x10,0xC8,0x54,0x84,0x7D,0x04,0x55,0xFE,0x56,0x85,0x54,0x84,0x7C,0x84,0x54,0xFC,0x10,0x48,0x14,0x48,0x1A,0x49,0x72,0x89,0x20,0x89,0x01,0x07},
{0xB8,0xC1,0x00,0x00,0x18,0x40,0x10,0x7E,0x54,0x84,0x7D,0x48,0x54,0x30,0x54,0x4C,0x55,0x93,0x7C,0xFE,0x54,0x10,0x10,0xFE,0x18,0x10,0x75,0xFF,0x24,0x10,0x00,0x10,0x00,0x10},
{0xB8,0xC2,0x00,0x00,0x1F,0xFE,0x10,0x00,0x13,0xF8,0x10,0x00,0x2F,0xFE,0x22,0x20,0x22,0xD3,0x4F,0x0C,0x02,0x83,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x88,0x3F,0xF6,0x10,0x02},
{0xB8,0xC3,0x00,0x00,0x19,0x04,0x11,0xFE,0x55,0x04,0x7D,0xFC,0x55,0x04,0x55,0x04,0x55,0xFC,0x7D,0x04,0x55,0x04,0x11,0xFC,0x11,0x54,0x18,0x50,0x74,0x92,0x24,0x93,0x01,0x0E},
{0xB8,0xC4,0x00,0x00,0x18,0x71,0x11,0xC1,0x54,0x45,0x7C,0x45,0x55,0xF5,0x54,0x45,0x54,0xC5,0x7D,0x65,0x55,0x55,0x12,0x55,0x10,0x41,0x18,0x41,0x74,0x41,0x24,0x47,0x00,0x42},
{0xB8,0xC5,0x00,0x00,0x18,0x40,0x13,0xEE,0x20,0x80,0x4C,0x80,0x0B,0xE0,0x11,0x2F,0x31,0x22,0x57,0xF2,0x10,0x02,0x13,0xE2,0x12,0x22,0x12,0x22,0x13,0xE2,0x12,0x2E,0x10,0x04},
{0xB8,0xC6,0x00,0x00,0x20,0x30,0x12,0xA4,0x44,0xA3,0x25,0x20,0x08,0x66,0x70,0x18,0x10,0xE0,0x17,0x00,0x00,0x82,0x7F,0xFF,0x06,0x40,0x1A,0x2C,0x62,0xD0,0x0F,0x0C,0x04,0x03},
{0xB8,0xC7,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x04,0x40,0x1C,0x26,0x65,0x98,0x0E,0x07,0x04,0x00,0x1F,0xFE,0x12,0x22,0x14,0x1E,0x1B,0xE2,0x12,0x22,0x13,0xEE,0x10,0x04},
{0xB8,0xC8,0x00,0x00,0x18,0x04,0x10,0xFE,0x14,0x24,0x7E,0x24,0x05,0xFF,0x08,0x24,0x0A,0x24,0x1C,0xFC,0x2A,0x44,0x4A,0x40,0x08,0xFE,0x09,0x42,0x0A,0x42,0x08,0x7E,0x08,0x42},
{0xB8,0xC9,0x00,0x00,0x18,0x14,0x10,0x12,0x14,0xFF,0x7E,0x10,0x04,0x92,0x08,0xFF,0x0A,0x92,0x1C,0xFE,0x2A,0x92,0x4A,0x92,0x08,0xFE,0x08,0x92,0x08,0x92,0x08,0x9E,0x08,0x94},
{0xB8,0xCA,0x00,0x00,0x00,0x84,0x3F,0xFE,0x10,0x80,0x0C,0x8C,0x01,0xD0,0x06,0xB0,0x38,0x8C,0x13,0x84,0x01,0x00,0x7F,0xFF,0x06,0x40,0x1A,0x2C,0x62,0xD0,0x0F,0x0C,0x04,0x03},
{0xB8,0xCB,0x00,0x00,0x33,0x18,0x22,0x12,0x3E,0xFF,0x02,0x10,0x7E,0x14,0x12,0xFE,0x62,0x00,0x00,0x82,0x7F,0xFF,0x02,0x40,0x06,0x26,0x1A,0x28,0x62,0xD0,0x0F,0x0C,0x04,0x03},
{0xB8,0xCC,0x00,0x00,0x18,0x82,0x10,0xFF,0x14,0x92,0x7E,0x92,0x04,0xFE,0x08,0x92,0x0A,0x92,0x1C,0xFE,0x2A,0x92,0x4A,0x10,0x08,0x14,0x08,0xFE,0x08,0x10,0x08,0x12,0x09,0xFF},
{0xB8,0xCD,0x00,0x00,0x02,0x00,0x1F,0xE0,0x10,0x20,0x1F,0xE0,0x10,0x20,0x1F,0xFC,0x10,0x00,0x1F,0xFE,0x00,0x02,0x00,0x8C,0x7F,0xFF,0x04,0x80,0x78,0x6C,0x0B,0x10,0x1C,0x0E},
{0xB8,0xCE,0x00,0x00,0x18,0x68,0x10,0x44,0x14,0x46,0x7E,0x82,0x04,0x30,0x08,0x28,0x0B,0x48,0x1C,0x44,0x2A,0x83,0x49,0x7C,0x08,0x44,0x08,0x44,0x08,0x44,0x08,0x7C,0x08,0x44},
{0xB8,0xCF,0x00,0x00,0x00,0x82,0x7F,0xFF,0x01,0x00,0x1E,0x7C,0x10,0x04,0x1F,0x7C,0x10,0x04,0x1F,0x7C,0x00,0x00,0x03,0x06,0x0C,0xC4,0x74,0x28,0x05,0x90,0x3E,0x0C,0x10,0x03},
{0xB8,0xD0,0x00,0x00,0x14,0x42,0x14,0x7F,0x55,0x42,0x55,0x7E,0x36,0x42,0x14,0x42,0x14,0x7E,0x36,0x42,0x55,0x42,0x55,0x7E,0x14,0x2A,0x24,0xA8,0x23,0xA9,0x40,0x49,0x00,0x87},
{0xB8,0xD1,0x00,0x00,0x10,0x02,0x1E,0xFF,0x12,0x22,0x24,0x22,0x7F,0x4E,0x29,0x44,0x29,0x80,0x3F,0x28,0x29,0x3E,0x29,0x48,0x3F,0x08,0x21,0x7F,0x21,0x08,0x47,0x08,0x42,0x08},
{0xB8,0xD2,0x00,0x00,0x08,0x18,0x3C,0x91,0x00,0xFF,0x7E,0x81,0x01,0x02,0x3C,0x38,0x00,0xE0,0x3C,0x24,0x00,0x3E,0x25,0xE0,0x3E,0x20,0x24,0x22,0x24,0x22,0x3C,0x23,0x24,0x1E},
{0xB8,0xD3,0x00,0x00,0x04,0x18,0x3E,0x12,0x00,0xFF,0x7F,0x18,0x00,0x10,0x3E,0x66,0x00,0x24,0x3E,0x18,0x00,0x10,0x22,0x26,0x3E,0xC4,0x22,0x08,0x22,0x14,0x3E,0x23,0x22,0xC1},
{0xB8,0xD4,0x00,0x00,0x08,0x86,0x3C,0x64,0x00,0x28,0x7E,0xFF,0x00,0x10,0x3C,0x14,0x00,0xFE,0x3C,0x10,0x00,0x10,0x24,0x12,0x3D,0xFF,0x24,0x10,0x24,0x10,0x3C,0x10,0x24,0x10},
{0xB8,0xD5,0x00,0x00,0x04,0x1A,0x3E,0x11,0x00,0x11,0x7F,0x10,0x00,0xFF,0x3E,0x08,0x00,0x08,0x3E,0xE8,0x00,0x48,0x22,0x49,0x3E,0x45,0x22,0x55,0x22,0xE5,0x3E,0x43,0x22,0x01},
{0xB8,0xD6,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x7E,0x7F,0x10,0x00,0x12,0x3E,0xFF,0x00,0x00,0x3E,0x04,0x00,0xFF,0x22,0x04,0x3F,0x44,0x22,0x34,0x22,0x04,0x3E,0x1C,0x22,0x08},
{0xB8,0xD7,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x12,0x7E,0xFF,0x00,0x10,0x3E,0x14,0x00,0x7E,0x3E,0x00,0x00,0x42,0x22,0x7F,0x3F,0x42,0x22,0x42,0x22,0x42,0x3E,0x7E,0x22,0x42},
{0xB8,0xD8,0x00,0x00,0x08,0x30,0x3C,0x22,0x01,0xFF,0x7E,0x48,0x00,0x44,0x3C,0x83,0x01,0x7C,0x3C,0x00,0x01,0xFF,0x24,0x20,0x3E,0x7E,0x24,0x42,0x24,0x02,0x3C,0x1C,0x24,0x08},
{0xB8,0xD9,0x00,0x00,0x08,0x60,0x3C,0x42,0x01,0xFF,0x7C,0x40,0x00,0x4C,0x3C,0x48,0x00,0x4B,0x3C,0xAA,0x00,0xAC,0x24,0xA8,0x3C,0x88,0x25,0x14,0x24,0x12,0x3C,0x22,0x24,0x41},
{0xB8,0xDA,0x00,0x00,0x04,0x60,0x3E,0x40,0x00,0x4E,0x7F,0x70,0x00,0x42,0x3E,0x43,0x00,0x3E,0x3E,0x00,0x00,0x42,0x22,0x7F,0x3F,0x42,0x22,0x7E,0x22,0x42,0x3E,0x7E,0x22,0x42},
{0xB8,0xDB,0x00,0x00,0x08,0x1A,0x3C,0x11,0x00,0x11,0x7D,0x10,0x01,0xFF,0x3D,0x08,0x01,0x08,0x3D,0x2B,0x01,0xEA,0x25,0x24,0x3D,0x24,0x25,0x25,0x25,0x4B,0x3E,0x09,0x24,0x11},
{0xB8,0xDC,0x00,0x00,0x08,0x0C,0x3C,0x1E,0x00,0xF0,0x7E,0x10,0x00,0x12,0x3D,0xFF,0x00,0x10,0x3C,0x10,0x00,0x92,0x24,0xFF,0x3E,0x82,0x24,0x82,0x24,0x82,0x3C,0xFE,0x24,0x82},
{0xB8,0xDD,0x00,0x00,0x08,0x18,0x3C,0xD0,0x00,0x94,0x7E,0xFE,0x00,0x90,0x3D,0x10,0x00,0x12,0x3D,0xFF,0x00,0x30,0x24,0x58,0x3E,0x54,0x24,0x94,0x25,0x13,0x3C,0x10,0x24,0x10},
{0xB8,0xDE,0x00,0x00,0x08,0x40,0x3C,0x7C,0x00,0x48,0x7E,0x92,0x01,0xFF,0x3C,0x80,0x00,0xA4,0x3C,0xBE,0x00,0xA4,0x24,0xA4,0x3E,0xBC,0x24,0xA8,0x25,0x21,0x3D,0x21,0x25,0x1F},
{0xB8,0xDF,0x00,0x00,0x08,0x60,0x3C,0x40,0x00,0x82,0x7E,0xFF,0x00,0x82,0x3D,0x02,0x00,0xF2,0x3C,0x92,0x00,0xF2,0x24,0x92,0x3E,0xF2,0x24,0x92,0x24,0x04,0x3C,0x3C,0x24,0x08},
{0xB8,0xE0,0x00,0x00,0x08,0x10,0x3D,0xF8,0x00,0x10,0x7E,0x28,0x00,0x44,0x3C,0x83,0x01,0x7C,0x3C,0x10,0x00,0x10,0x24,0x14,0x3E,0xFE,0x24,0x10,0x24,0x10,0x3C,0x12,0x24,0xFF},
{0xB8,0xE1,0x00,0x00,0x08,0x06,0x3C,0x8F,0x00,0xF0,0x7E,0x80,0x00,0x82,0x3C,0xFF,0x00,0x80,0x3C,0x80,0x00,0xA2,0x24,0xBF,0x3D,0x22,0x25,0x22,0x26,0x22,0x3C,0x3E,0x24,0x22},
{0xB8,0xE2,0x00,0x00,0x04,0x00,0x07,0xE0,0x08,0x42,0x1F,0xFF,0x71,0x10,0x12,0xEF,0x1C,0x00,0x17,0xFF,0x10,0x00,0x13,0xFE,0x10,0x00,0x23,0xFE,0x21,0x04,0x21,0xFC,0x41,0x04},
{0xB8,0xE3,0x00,0x00,0x08,0x60,0x3C,0x44,0x00,0x7E,0x7E,0x44,0x00,0xC4,0x3D,0x28,0x00,0x10,0x3C,0x28,0x00,0x44,0x25,0x83,0x3C,0xFC,0x24,0x84,0x24,0x84,0x3C,0xFC,0x24,0x84},
{0xB8,0xE4,0x00,0x00,0x06,0x60,0x34,0x4C,0x27,0x70,0x24,0x42,0x27,0x43,0x78,0x3E,0x27,0xE0,0x00,0x02,0x7F,0xFF,0x00,0x00,0x1F,0xFC,0x00,0x00,0x1F,0xFC,0x08,0x08,0x0F,0xF8},
{0xB8,0xE5,0x00,0x00,0x04,0x18,0x3E,0x12,0x00,0xFF,0x7F,0x00,0x00,0x64,0x3E,0x43,0x00,0x81,0x3E,0x66,0x00,0x54,0x22,0x94,0x3E,0x08,0x22,0x14,0x22,0x14,0x3E,0x22,0x22,0x41},
{0xB8,0xE6,0x00,0x00,0x19,0x90,0x11,0x0C,0x6F,0xF4,0x04,0x40,0x7F,0xFF,0x08,0x10,0x17,0xEC,0x61,0x03,0x06,0x98,0x19,0x50,0x06,0xE0,0x19,0x50,0x06,0x4C,0x18,0x44,0x03,0x80},
{0xB8,0xE7,0x00,0x00,0x18,0x02,0x11,0xFF,0x2A,0x10,0x54,0xA2,0x08,0xFF,0x14,0x82,0x66,0x82,0x0A,0x82,0x12,0xFE,0x66,0x82,0x0A,0x82,0x72,0x82,0x04,0x82,0x38,0xFE,0x10,0x82},
{0xB8,0xE8,0x00,0x00,0x0C,0x30,0x10,0x22,0x2B,0x3F,0x54,0x22,0x08,0x62,0x14,0x94,0x66,0x18,0x0A,0x24,0x12,0xC3,0x67,0x7E,0x0A,0x42,0x72,0x42,0x04,0x42,0x38,0x7E,0x10,0x42},
{0xB8,0xE9,0x00,0x00,0x44,0x18,0x7E,0x12,0x44,0x11,0x45,0xFF,0x7C,0x10,0x44,0x10,0x44,0xD6,0x7C,0x94,0x45,0xD4,0x44,0x88,0x7C,0x89,0x44,0x95,0x29,0x15,0x44,0x23,0x44,0x41},
{0xB8,0xEA,0x00,0x00,0x00,0x40,0x78,0xFF,0x02,0x92,0x0D,0x10,0x70,0x6C,0x21,0x83,0x0F,0xFC,0x08,0x04,0x0F,0xFC,0x08,0x04,0x0F,0xFC,0x08,0x04,0x0F,0xFC,0x04,0x08,0x38,0x07},
{0xB8,0xEB,0x00,0x00,0x7F,0xFF,0x02,0x20,0x3F,0xFE,0x22,0x22,0x3F,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB8,0xEC,0x00,0x00,0x44,0x30,0x7C,0x22,0x45,0xFF,0x44,0x40,0x7C,0x42,0x44,0xFF,0x44,0xC2,0x7D,0x7E,0x46,0x42,0x44,0x42,0x7C,0x7E,0x44,0x42,0x28,0x42,0x24,0x4E,0x44,0x44},
{0xB8,0xED,0x00,0x00,0x06,0x60,0x34,0x4C,0x27,0x70,0x24,0x42,0x27,0x43,0x78,0x3E,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB8,0xEE,0x00,0x00,0x0D,0xFC,0x10,0x20,0x37,0xFF,0x50,0x20,0x13,0xFE,0x10,0x00,0x0F,0xFC,0x08,0x04,0x0F,0xFC,0x08,0x04,0x0F,0xFC,0x08,0x04,0x0F,0xFC,0x04,0x08,0x38,0x06},
{0xB8,0xEF,0x00,0x00,0x44,0x60,0x7E,0x44,0x44,0x7E,0x44,0x84,0x7C,0x88,0x45,0x48,0x44,0x30,0x7C,0x4C,0x45,0x83,0x44,0xFC,0x7C,0x84,0x44,0x84,0x28,0x84,0x24,0xFC,0x44,0x84},
{0xB8,0xF0,0x00,0x00,0x44,0x18,0x7C,0x12,0x45,0xFF,0x44,0x18,0x7C,0x10,0x44,0x66,0x44,0x24,0x7C,0x18,0x44,0x10,0x44,0x26,0x7C,0xC4,0x44,0x08,0x28,0x14,0x24,0x23,0x44,0xC1},
{0xB8,0xF1,0x00,0x00,0x44,0x18,0x7E,0x10,0x44,0x12,0x45,0xFF,0x44,0x28,0x7C,0x28,0x54,0xAA,0x10,0xAA,0x50,0xAA,0x5D,0x29,0x51,0x49,0x50,0x48,0x5C,0x88,0x70,0xB8,0x41,0x10},
{0xB8,0xF2,0x00,0x00,0x44,0x84,0x7E,0xFE,0x44,0x84,0x44,0x84,0x44,0xFC,0x7C,0x84,0x54,0x84,0x10,0xFC,0x5C,0x90,0x50,0x93,0x50,0x8A,0x5C,0x84,0x70,0xB4,0x43,0xC2,0x01,0x01},
{0xB8,0xF3,0x00,0x00,0x44,0x18,0x7E,0x12,0x45,0xFF,0x44,0x28,0x44,0x44,0x7D,0x83,0x54,0x7C,0x10,0x00,0x51,0xFF,0x5C,0x40,0x50,0xFE,0x52,0x82,0x5C,0x02,0x70,0x3C,0x40,0x08},
{0xB8,0xF4,0x00,0x00,0x44,0x60,0x7E,0x44,0x44,0x7E,0x44,0x84,0x44,0x88,0x7D,0x48,0x54,0x30,0x10,0xCC,0x53,0x03,0x5C,0xFC,0x50,0x84,0x50,0x84,0x5C,0x84,0x70,0xFC,0x40,0x84},
{0xB8,0xF5,0x00,0x00,0x44,0x50,0x7C,0x50,0x45,0x56,0x45,0x54,0x44,0xD8,0x7C,0x50,0x54,0x50,0x10,0xD8,0x5D,0x54,0x51,0x54,0x50,0x50,0x5C,0x92,0x70,0x92,0x41,0x13,0x02,0x0E},
{0xB8,0xF6,0x00,0x00,0x44,0x08,0x7D,0xFC,0x44,0x48,0x44,0x49,0x44,0x5F,0x7C,0x91,0x54,0x87,0x11,0x12,0x5C,0x10,0x51,0xFF,0x50,0x30,0x5C,0x58,0x70,0x54,0x41,0x93,0x00,0x10},
{0xB8,0xF7,0x00,0x00,0x44,0x40,0x7E,0x7C,0x44,0x48,0x44,0x92,0x45,0xFF,0x7C,0x80,0x54,0xA4,0x10,0xBE,0x50,0xA4,0x5C,0xA4,0x50,0xBC,0x51,0x28,0x5D,0x21,0x71,0x21,0x42,0x1F},
{0xB8,0xF8,0x00,0x00,0x44,0x18,0x7C,0x12,0x45,0xFF,0x44,0x00,0x44,0xC4,0x7C,0x83,0x55,0x01,0x10,0xC6,0x50,0xA4,0x5D,0x28,0x50,0x18,0x50,0x28,0x5C,0x24,0x70,0x44,0x40,0x82},
{0xB8,0xF9,0x00,0x00,0x44,0x18,0x7E,0xD0,0x44,0x94,0x44,0xFE,0x44,0x90,0x7D,0x10,0x54,0x12,0x11,0xFF,0x5C,0x30,0x50,0x58,0x50,0x54,0x5C,0x94,0x71,0x13,0x40,0x10,0x00,0x10},
{0xB8,0xFA,0x00,0x00,0x0C,0x48,0x10,0x7C,0x3E,0x48,0x22,0x48,0x3E,0x48,0x22,0x89,0x3E,0x87,0x23,0x10,0x3E,0x10,0x26,0xFF,0x0A,0x30,0x12,0x58,0x62,0x56,0x0E,0x91,0x04,0x10},
{0xB8,0xFB,0x00,0x00,0x18,0x18,0x10,0x12,0x7E,0xFF,0x10,0x00,0x7E,0x64,0x52,0x42,0x7E,0x83,0x52,0x6D,0x7E,0xA8,0x52,0xA8,0x10,0x10,0x7F,0x18,0x10,0x28,0x10,0x44,0x10,0x82},
{0xB8,0xFC,0x00,0x00,0x04,0x34,0x3F,0x22,0x04,0x22,0x7F,0xFF,0x00,0x20,0x04,0x20,0x3F,0xA6,0x04,0x14,0x3F,0x94,0x24,0x94,0x3F,0x88,0x24,0x89,0x7F,0xD5,0x04,0x13,0x04,0x21},
{0xB8,0xFD,0x00,0x00,0x18,0x1A,0x10,0x11,0x7E,0x10,0x10,0xFF,0x7E,0x08,0x52,0x08,0x7E,0xE8,0x52,0x48,0x7E,0x48,0x52,0x48,0x10,0x69,0x7E,0xC5,0x10,0x05,0x10,0x03,0x10,0x01},
{0xB8,0xFE,0x00,0x00,0x18,0x02,0x10,0xFF,0x7E,0x10,0x10,0x10,0x7E,0x24,0x52,0xFB,0x7E,0x41,0x52,0x18,0x7E,0x10,0x52,0xFE,0x10,0x10,0x7E,0x10,0x10,0x12,0x11,0xFF,0x10,0x00},
{0xB9,0x40,0x00,0x00,0x22,0x0C,0x3F,0x08,0x22,0x7F,0x22,0x00,0x3E,0x22,0x22,0x12,0x20,0x14,0x29,0x7F,0x2F,0x88,0x29,0x08,0x29,0x3E,0x29,0x08,0x4F,0x08,0x49,0x08,0x40,0x08},
{0xB9,0x41,0x00,0x00,0x01,0x20,0x0F,0xFC,0x09,0x24,0x0F,0xFC,0x29,0x24,0x3F,0xFF,0x20,0x00,0x27,0xF8,0x20,0x00,0x3F,0xFF,0x24,0x40,0x24,0x2C,0x45,0x90,0x5E,0x08,0x48,0x07},
{0xB9,0x42,0x00,0x00,0x42,0x02,0x33,0xFF,0x02,0x22,0x45,0xFC,0x30,0x20,0x01,0xFC,0x01,0x24,0x11,0xFC,0x79,0x24,0x11,0xFC,0x10,0x20,0x13,0xFF,0x18,0x20,0x66,0x23,0x41,0xFC},
{0xB9,0x43,0x00,0x00,0x21,0x98,0x19,0x12,0x01,0x1F,0x47,0xD0,0x32,0x20,0x02,0x0E,0x03,0xC2,0x12,0x44,0x7A,0x5F,0x12,0x44,0x14,0x44,0x15,0xDC,0x18,0x88,0x66,0x03,0x41,0xFC},
{0xB9,0x44,0x00,0x00,0x41,0x8C,0x30,0x50,0x07,0xFF,0x40,0x20,0x31,0x44,0x01,0xFE,0x01,0x04,0x11,0xFC,0x79,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x19,0x04,0x66,0x03,0x41,0xFC},
{0xB9,0x45,0x00,0x00,0x21,0x98,0x19,0x08,0x02,0xF4,0x44,0x42,0x30,0xA0,0x03,0x26,0x00,0x54,0x11,0x98,0x7A,0x2C,0x10,0xCA,0x13,0x0A,0x10,0x70,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xB9,0x46,0x00,0x00,0x20,0x20,0x19,0xFC,0x00,0x20,0x47,0xFF,0x31,0x04,0x00,0x88,0x03,0xFE,0x10,0x20,0x79,0xFC,0x10,0x20,0x13,0xFE,0x10,0x20,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xB9,0x47,0x00,0x00,0x40,0x02,0x37,0xFF,0x00,0x00,0x41,0xFC,0x31,0x04,0x01,0xFC,0x00,0x00,0x13,0xFE,0x7A,0x22,0x13,0xFE,0x12,0x22,0x13,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB9,0x48,0x00,0x00,0x20,0x20,0x19,0xFC,0x00,0x44,0x43,0xFF,0x30,0x00,0x00,0xFC,0x00,0x84,0x10,0xFC,0x78,0x10,0x10,0xFE,0x10,0x90,0x11,0xFF,0x19,0x10,0x66,0x13,0x41,0xFC},
{0xB9,0x49,0x00,0x00,0x22,0x42,0x1B,0xDF,0x02,0x42,0x42,0x42,0x33,0xDE,0x02,0x02,0x02,0x80,0x13,0xDE,0x7A,0x02,0x12,0x8A,0x13,0xC4,0x12,0x0A,0x1A,0x32,0x66,0x00,0x41,0xFF},
{0xB9,0x4A,0x00,0x00,0x21,0xFC,0x19,0x24,0x01,0xFC,0x41,0x24,0x31,0xFC,0x00,0x20,0x02,0x22,0x13,0xFF,0x7A,0x22,0x12,0x32,0x12,0xEA,0x12,0x42,0x18,0x06,0x66,0x00,0x41,0xFF},
{0xB9,0x4B,0x00,0x00,0x21,0xF8,0x19,0x08,0x01,0xF8,0x41,0x08,0x31,0xF8,0x00,0x82,0x01,0xFF,0x16,0x22,0x79,0x52,0x11,0x52,0x11,0xFA,0x11,0x02,0x18,0x0C,0x66,0x03,0x41,0xFC},
{0xB9,0x4C,0x00,0x00,0x20,0x88,0x18,0xFC,0x00,0x88,0x40,0xB8,0x30,0xA8,0x02,0xAA,0x03,0xFF,0x12,0x02,0x7A,0xFA,0x12,0x8A,0x12,0xFA,0x12,0x06,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB9,0x4D,0x00,0x00,0x22,0x3C,0x1B,0xC0,0x02,0x00,0x43,0xFC,0x32,0x04,0x03,0xFC,0x02,0x00,0x12,0xFE,0x7A,0xAA,0x12,0xFE,0x14,0xAA,0x14,0xAA,0x18,0x86,0x66,0x00,0x41,0xFF},
{0xB9,0x4E,0x00,0x00,0x20,0x20,0x19,0xFC,0x01,0x04,0x41,0xFC,0x31,0x04,0x01,0xFC,0x00,0x00,0x13,0xFE,0x78,0x20,0x11,0xFC,0x10,0x20,0x13,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB9,0x4F,0x00,0x00,0x23,0xE0,0x18,0x50,0x00,0x8C,0x41,0x33,0x36,0x00,0x03,0xC6,0x02,0x54,0x13,0xD4,0x7A,0x54,0x13,0xD4,0x12,0x44,0x12,0xCC,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xB9,0x50,0x00,0x00,0x21,0x1E,0x19,0xF0,0x01,0x12,0x41,0xFF,0x31,0x10,0x01,0x7E,0x01,0x42,0x11,0x7E,0x79,0x42,0x11,0x7E,0x11,0x42,0x12,0x7E,0x1A,0x42,0x66,0x00,0x41,0xFF},
{0xB9,0x51,0x00,0x00,0x10,0x11,0x1F,0xDF,0x20,0x51,0x55,0x52,0x1F,0x52,0x08,0x54,0x31,0x94,0x08,0x12,0x1F,0xD2,0x60,0x51,0x15,0x51,0x1F,0x5E,0x04,0x54,0x08,0x90,0x33,0x10},
{0xB9,0x52,0x00,0x00,0x04,0x91,0x7F,0xDF,0x00,0x11,0x1F,0x12,0x11,0x12,0x1F,0x14,0x11,0x14,0x40,0x52,0x7F,0xD2,0x40,0x51,0x5E,0x51,0x52,0x5E,0x5E,0x54,0x41,0xD0,0x40,0x90},
{0xB9,0x53,0x00,0x00,0x02,0x41,0x7F,0x49,0x14,0x49,0x55,0x49,0x7F,0x49,0x55,0x6D,0x55,0xDB,0x57,0x5B,0x61,0x49,0x41,0x49,0x7F,0x49,0x41,0x49,0x41,0x49,0x7F,0x49,0x41,0x89},
{0xB9,0x54,0x00,0x00,0x02,0x30,0x7F,0x22,0x14,0x3F,0x55,0x22,0x7F,0x52,0x55,0x94,0x55,0x08,0x57,0x34,0x61,0xC3,0x41,0x3E,0x7F,0x22,0x41,0x22,0x41,0x22,0x7F,0x3E,0x41,0x22},
{0xB9,0x55,0x00,0x00,0x02,0x30,0x7F,0x24,0x14,0x3E,0x55,0x24,0x7F,0x44,0x55,0xA8,0x55,0x28,0x57,0x10,0x61,0x22,0x41,0x7F,0x7F,0xC2,0x41,0x42,0x41,0x42,0x7F,0x7E,0x41,0x42},
{0xB9,0x56,0x00,0x00,0x0E,0x18,0x78,0x10,0x0A,0x10,0x4A,0x92,0x2C,0xFF,0x28,0x92,0x7E,0x92,0x08,0x92,0x18,0xFE,0x1C,0x92,0x2A,0x92,0x2A,0x92,0x48,0x92,0x08,0xFE,0x08,0x82},
{0xB9,0x57,0x00,0x00,0x0C,0x18,0x0A,0x10,0x11,0x10,0x11,0x12,0x3E,0xFF,0x48,0x10,0x0A,0x10,0x7F,0x10,0x08,0x92,0x4A,0xFF,0x2C,0x82,0x28,0x82,0x0E,0x82,0x78,0xFE,0x20,0x82},
{0xB9,0x58,0x00,0x00,0x0C,0x66,0x0A,0x44,0x11,0x44,0x11,0x44,0x3E,0xFF,0x48,0x44,0x0A,0x44,0x7F,0x44,0x08,0x7C,0x4A,0x44,0x2C,0x44,0x28,0x44,0x0E,0x44,0x78,0x7C,0x20,0x44},
{0xB9,0x59,0x00,0x00,0x0C,0x68,0x0A,0x46,0x12,0x40,0x11,0xFF,0x3E,0x40,0x48,0x46,0x08,0x64,0x7E,0x64,0x08,0x94,0x4A,0x94,0x28,0x88,0x0E,0x94,0x79,0x12,0x21,0x22,0x02,0x41},
{0xB9,0x5A,0x00,0x00,0x0C,0x30,0x0A,0x22,0x11,0xFF,0x11,0x40,0x3E,0x58,0x48,0x52,0x08,0xFF,0x7E,0xD2,0x09,0x52,0x4A,0x52,0x2C,0x52,0x28,0x5E,0x0E,0x54,0x78,0x10,0x20,0x10},
{0xB9,0x5B,0x00,0x00,0x0C,0x00,0x0A,0x82,0x12,0xFF,0x11,0x92,0x3E,0x92,0x48,0xFE,0x08,0x92,0x7E,0x92,0x08,0x92,0x4A,0xFE,0x2C,0x92,0x28,0x10,0x0E,0x10,0x78,0x10,0x20,0x10},
{0xB9,0x5C,0x00,0x00,0x0C,0x18,0x0A,0x10,0x12,0x10,0x10,0x92,0x3E,0xFF,0x48,0x92,0x08,0x92,0x7E,0x92,0x08,0xFE,0x4A,0x92,0x2C,0x92,0x28,0x92,0x0E,0x92,0x78,0xFE,0x20,0x82},
{0xB9,0x5D,0x00,0x00,0x0C,0x04,0x0A,0x2E,0x11,0x24,0x11,0x24,0x3E,0x44,0x48,0x42,0x08,0x82,0x7E,0x01,0x08,0x44,0x4A,0x7E,0x2C,0x44,0x28,0x44,0x0E,0x44,0x78,0x7C,0x20,0x44},
{0xB9,0x5E,0x00,0x00,0x0C,0x30,0x0A,0x20,0x11,0x42,0x11,0x7F,0x3E,0x82,0x48,0xFA,0x09,0x4A,0x7E,0x4A,0x08,0x7A,0x4A,0x42,0x2C,0x4E,0x29,0x44,0x0E,0x41,0x78,0x41,0x20,0x3E},
{0xB9,0x5F,0x00,0x00,0x0C,0x30,0x0A,0x20,0x11,0x42,0x11,0x7F,0x3E,0x82,0x49,0x02,0x08,0x7A,0x7E,0x4A,0x08,0x4A,0x4A,0x7A,0x2C,0x4A,0x28,0x02,0x0E,0x04,0x78,0x3C,0x20,0x08},
{0xB9,0x60,0x00,0x00,0x0C,0x0C,0x0A,0x08,0x11,0x52,0x11,0x7F,0x3E,0x42,0x48,0x42,0x0A,0x42,0x7F,0x42,0x08,0x7E,0x4B,0x42,0x2C,0x42,0x29,0x42,0x0E,0x42,0x78,0x7E,0x20,0x42},
{0xB9,0x61,0x00,0x00,0x0C,0x30,0x0A,0x28,0x12,0x28,0x11,0x44,0x3E,0x42,0x48,0xBD,0x09,0x00,0x7E,0xFE,0x08,0x22,0x4A,0x22,0x2C,0x22,0x28,0x2E,0x0E,0x24,0x78,0x20,0x00,0x20},
{0xB9,0x62,0x00,0x00,0x0C,0x18,0x0A,0x12,0x12,0xFF,0x11,0x00,0x3E,0x18,0x48,0x10,0x08,0x20,0x7E,0xC6,0x08,0x24,0x4A,0x18,0x2C,0x10,0x28,0x14,0x0E,0x22,0x78,0xFD,0x20,0x41},
{0xB9,0x63,0x00,0x00,0x0C,0x10,0x0A,0x08,0x11,0x0B,0x11,0x22,0x3E,0x22,0x48,0x24,0x08,0x24,0x7E,0xA8,0x08,0xAA,0x4A,0xB2,0x2D,0x21,0x28,0x25,0x0E,0x64,0x78,0xA6,0x21,0x1C},
{0xB9,0x64,0x00,0x00,0x0C,0x42,0x0A,0x7F,0x12,0x40,0x11,0x40,0x3E,0x42,0x48,0x7F,0x0A,0x42,0x7F,0x42,0x08,0x42,0x4B,0x7E,0x2C,0x42,0x29,0x40,0x0E,0x42,0x78,0x7F,0x00,0x40},
{0xB9,0x65,0x00,0x00,0x0C,0x18,0x0A,0x10,0x12,0x92,0x11,0xFF,0x3E,0x92,0x48,0x90,0x08,0x92,0x7E,0xFF,0x08,0xA2,0x4A,0xA4,0x2C,0x94,0x28,0x88,0x0E,0x94,0x79,0x24,0x21,0x43},
{0xB9,0x66,0x00,0x00,0x0C,0x00,0x0A,0x82,0x12,0xFF,0x11,0x92,0x3E,0x92,0x48,0x92,0x08,0x92,0x7E,0xFE,0x08,0x92,0x4A,0x92,0x2C,0x92,0x28,0x92,0x0E,0x92,0x78,0xFE,0x20,0x82},
{0xB9,0x67,0x00,0x00,0x18,0x20,0x14,0xC9,0x14,0x8F,0x22,0xA9,0x3E,0xA9,0x48,0xA9,0x08,0xA9,0x7E,0xA9,0x08,0xA9,0x4A,0xE9,0x2D,0xAF,0x28,0x2A,0x0E,0x48,0x78,0x48,0x20,0x88},
{0xB9,0x68,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x27,0xF2,0x24,0x92,0x27,0xF2,0x24,0x92,0x27,0xF2,0x20,0x82,0x20,0x8E,0x20,0x84},
{0xB9,0x69,0x00,0x00,0x48,0x08,0x7C,0xDC,0x48,0x88,0x49,0x04,0x52,0x7B,0x50,0x00,0x48,0xD8,0x48,0x84,0x45,0x02,0x46,0x01,0x45,0xFE,0x79,0x4A,0x51,0x4A,0x41,0x4A,0x47,0xFF},
{0xB9,0x6A,0x00,0x00,0x48,0x04,0x7D,0xFE,0x48,0x00,0x48,0xFC,0x50,0x84,0x50,0xFC,0x48,0x00,0x49,0xFF,0x45,0x45,0x45,0x29,0x79,0x7D,0x51,0x11,0x41,0x11,0x41,0x17,0x41,0x02},
{0xB9,0x6B,0x00,0x00,0x48,0xFC,0x7C,0x84,0x48,0xFC,0x48,0x84,0x50,0x00,0x51,0xFE,0x49,0x02,0x49,0xFE,0x45,0x02,0x45,0xFE,0x79,0x02,0x51,0xFE,0x40,0x84,0x41,0x03,0x46,0x01},
{0xB9,0x6C,0x00,0x00,0x00,0xC0,0x00,0x82,0x7F,0xFF,0x00,0x00,0x18,0xCC,0x10,0x90,0x66,0xFE,0x15,0x90,0x08,0xFE,0x12,0x90,0x7C,0xFE,0x24,0x90,0x08,0x92,0x10,0xFF,0x60,0x80},
{0xB9,0x6D,0x00,0x00,0x0C,0x60,0x08,0x84,0x1F,0xFE,0x30,0x80,0x5F,0xFC,0x10,0x80,0x1F,0xFC,0x10,0x80,0x1F,0xFE,0x00,0x00,0x3E,0x3E,0x22,0x22,0x23,0xE2,0x20,0x0E,0x20,0x04},
{0xB9,0x6E,0x00,0x00,0x30,0x6C,0x20,0x48,0x3E,0x90,0x28,0xFE,0x29,0x90,0x4A,0x94,0x08,0xFE,0x7E,0x90,0x08,0x94,0x14,0xFE,0x14,0x90,0x22,0x90,0x22,0x92,0x40,0xFF,0x00,0x80},
{0xB9,0x6F,0x00,0x00,0x18,0x36,0x10,0x24,0x21,0x48,0x3F,0x7F,0x21,0x48,0x41,0xCA,0x3D,0x7F,0x25,0x48,0x25,0x4A,0x3D,0x7F,0x25,0x48,0x01,0x48,0x02,0x4A,0x1C,0x7F,0x08,0x40},
{0xB9,0x70,0x00,0x00,0x00,0x10,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x5E,0xBC,0x00,0x80,0x1E,0xBC,0x00,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x04},
{0xB9,0x71,0x00,0x00,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x5E,0xBC,0x00,0x80,0x1E,0xBC,0x00,0x00,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x08,0x8A,0x0F,0xFA,0x00,0x83,0x00,0x7E},
{0xB9,0x72,0x00,0x00,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x5E,0xBC,0x00,0x80,0x1E,0xBC,0x08,0x00,0x0F,0xF8,0x10,0x08,0x6F,0x88,0x08,0x8A,0x0F,0xB2,0x08,0x03,0x07,0xFE},
{0xB9,0x73,0x00,0x00,0x0F,0xF8,0x20,0x82,0x3F,0xFF,0x20,0x82,0x5E,0xBC,0x00,0x80,0x1E,0x3C,0x01,0xC0,0x06,0x30,0x19,0xCC,0x60,0x03,0x0F,0xF8,0x01,0x08,0x01,0x70,0x01,0x00},
{0xB9,0x74,0x00,0x00,0x0C,0x10,0x09,0xFF,0x7E,0x10,0x00,0xFE,0x24,0x10,0x25,0xFF,0x24,0x00,0x28,0xFE,0x28,0x92,0x2A,0x92,0x0C,0xFE,0x70,0x82,0x20,0x82,0x00,0x8E,0x00,0x84},
{0xB9,0x75,0x00,0x00,0x14,0x6C,0x14,0x48,0x7F,0x48,0x14,0x48,0x1C,0x4B,0x08,0x6A,0x3E,0xCC,0x2B,0x4C,0x3E,0x58,0x2A,0x48,0x08,0x48,0x7F,0x49,0x08,0x49,0x08,0x49,0x08,0x46},
{0xB9,0x76,0x00,0x00,0x36,0x00,0x24,0x82,0x7E,0xFF,0x24,0x92,0x3C,0x92,0x10,0x92,0x7E,0x92,0x52,0xFE,0x7E,0x82,0x52,0x80,0x10,0x80,0x7E,0x82,0x10,0x82,0x10,0x83,0x10,0x7E},
{0xB9,0x77,0x00,0x00,0x02,0x02,0x7F,0x7F,0x02,0x08,0x34,0x52,0x08,0x7F,0x01,0x42,0x7F,0x7E,0x09,0x42,0x0A,0x7E,0x08,0x42,0x08,0x42,0x08,0x7E,0x08,0x24,0x38,0x43,0x10,0x81},
{0xB9,0x78,0x00,0x00,0x04,0x02,0x3E,0xFF,0x00,0x08,0x02,0x52,0x7F,0x7F,0x14,0x42,0x14,0x7E,0x14,0x42,0x14,0x7E,0x15,0x42,0x25,0x42,0x23,0x7E,0x40,0x24,0x00,0x43,0x00,0x81},
{0xB9,0x79,0x00,0x00,0x0C,0x02,0x08,0xFF,0x0F,0x08,0x78,0x52,0x08,0x7F,0x49,0x42,0x49,0x7E,0x49,0x42,0x7F,0x7E,0x49,0x42,0x08,0x42,0x09,0x7E,0x0A,0x24,0x1C,0x43,0x08,0x81},
{0xB9,0x7A,0x00,0x00,0x00,0x02,0x05,0xFF,0x7E,0x08,0x10,0x92,0x10,0xFF,0x10,0x82,0x14,0xFE,0x7E,0x82,0x10,0xFE,0x10,0x82,0x12,0x82,0x1C,0xFE,0x70,0x44,0x20,0x83,0x01,0x01},
{0xB9,0x7B,0x00,0x00,0x16,0x02,0x12,0xFF,0x12,0x08,0x21,0x12,0x21,0x7F,0x3E,0xC2,0x52,0x7E,0x12,0x42,0x12,0x7E,0x12,0x42,0x22,0x42,0x22,0x7E,0x2E,0x24,0x44,0x43,0x01,0x81},
{0xB9,0x7C,0x00,0x00,0x16,0x02,0x12,0xFF,0x12,0x08,0x11,0x12,0x21,0x7F,0x2D,0x42,0x29,0x7E,0x48,0xC2,0x08,0x7E,0x0A,0x42,0x12,0x42,0x13,0x7E,0x7D,0x24,0x20,0x43,0x00,0x80},
{0xB9,0x7D,0x00,0x00,0x0C,0x02,0x0A,0xFF,0x12,0x02,0x1C,0x12,0x20,0xFA,0x7E,0x02,0x22,0x92,0x3E,0xFA,0x22,0x92,0x3E,0x92,0x20,0xF2,0x3E,0x92,0x20,0x02,0x3E,0x1E,0x20,0x04},
{0xB9,0x7E,0x00,0x00,0x0C,0x18,0x0A,0x10,0x11,0x10,0x1D,0x24,0x20,0x22,0x7E,0xFD,0x22,0x41,0x3E,0x00,0x22,0x42,0x3E,0x7F,0x20,0x42,0x3E,0x42,0x20,0x42,0x3E,0x7E,0x20,0x42},
{0xB9,0xA1,0x00,0x00,0x0C,0x60,0x0A,0x40,0x12,0x42,0x1C,0xFF,0x20,0x82,0x7F,0x7A,0x22,0x4A,0x3E,0x4A,0x22,0x7A,0x3E,0x4A,0x20,0x42,0x3E,0x4C,0x20,0x41,0x3E,0x41,0x20,0x3F},
{0xB9,0xA2,0x00,0x00,0x0C,0x60,0x0A,0x42,0x11,0x7F,0x1D,0x40,0x20,0x8C,0x7E,0x88,0x23,0x49,0x3E,0x7F,0x22,0x49,0x3E,0x49,0x20,0x49,0x3E,0x4F,0x20,0x4A,0x3E,0x08,0x20,0x08},
{0xB9,0xA3,0x00,0x00,0x44,0x10,0x7E,0x10,0x48,0x50,0x48,0x52,0x7E,0x57,0x48,0x5A,0x7E,0x72,0x48,0xD2,0x48,0x56,0x7F,0x52,0x29,0x50,0x55,0x51,0x55,0x41,0x42,0x41,0x0C,0x3F},
{0xB9,0xA4,0x00,0x00,0x44,0x18,0x7E,0x10,0x48,0x10,0x48,0x12,0x7E,0xFF,0x48,0x10,0x7E,0x10,0x48,0x30,0x48,0x28,0x7F,0x28,0x29,0x28,0x55,0x44,0x55,0x44,0x42,0x42,0x0C,0x81},
{0xB9,0xA5,0x00,0x00,0x42,0x41,0x7F,0x49,0x48,0x49,0x48,0x49,0x7F,0x49,0x48,0x49,0x7F,0x49,0x48,0x49,0x48,0x49,0x7F,0x49,0x29,0x49,0x55,0x49,0x55,0x49,0x42,0x89,0x0C,0x89},
{0xB9,0xA6,0x00,0x00,0x1F,0x06,0x10,0x18,0x1F,0x60,0x10,0x06,0x7F,0x98,0x12,0x63,0x7D,0x0C,0x21,0x70,0x04,0x20,0x07,0xF0,0x04,0x20,0x04,0x22,0x08,0x22,0x10,0x23,0x60,0x1E},
{0xB9,0xA7,0x00,0x00,0x30,0x20,0x20,0xFC,0x28,0x84,0x7C,0xFC,0x28,0x84,0x28,0xFC,0x28,0x80,0x2A,0xFF,0x2A,0x80,0x26,0xFF,0x20,0x15,0x41,0x4B,0x41,0x29,0x02,0x22,0x00,0x0C},
{0xB9,0xA8,0x00,0x00,0x20,0x82,0x3F,0xFF,0x22,0x10,0x2F,0xFC,0x22,0x14,0x2F,0xFC,0x24,0x20,0x27,0x3D,0x44,0x21,0x5F,0x9E,0x08,0x00,0x07,0xE2,0x04,0x22,0x08,0x23,0x70,0x1E},
{0xB9,0xA9,0x00,0x00,0x07,0xF0,0x34,0x13,0x27,0xF2,0x24,0x12,0x27,0xF2,0x24,0x12,0x27,0xF2,0x20,0x02,0x7E,0x7F,0x02,0x40,0x02,0x42,0x7E,0x7F,0x22,0x42,0x22,0x42,0x42,0x42},
{0xB9,0xAA,0x00,0x00,0x0C,0x18,0x08,0x10,0x7F,0x12,0x08,0xFF,0x3E,0x10,0x00,0x14,0x3E,0xFE,0x22,0x44,0x22,0x44,0x3E,0x28,0x42,0x28,0x24,0x10,0x27,0x28,0x78,0x24,0x20,0xC3},
{0xB9,0xAB,0x00,0x00,0x26,0x08,0x38,0x7C,0x20,0x08,0x3E,0xF8,0x20,0x08,0x3F,0xF8,0x00,0x00,0x21,0x0C,0x3D,0xE8,0x21,0x08,0x3D,0xE8,0x21,0x05,0x2D,0x75,0x73,0x83,0x21,0x01},
{0xB9,0xAC,0x00,0x00,0x0C,0xD8,0x08,0x88,0x09,0x04,0x13,0xFE,0x16,0x23,0x3B,0x2E,0x52,0xB2,0x13,0xFE,0x10,0x00,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB9,0xAD,0x00,0x00,0x0C,0x24,0x0B,0xFE,0x08,0x88,0x10,0x52,0x17,0xFF,0x30,0x00,0x51,0xFC,0x11,0x24,0x11,0xFC,0x11,0x24,0x11,0xFC,0x10,0x20,0x13,0xFE,0x10,0x20,0x17,0xFF},
{0xB9,0xAE,0x00,0x00,0x0C,0x20,0x09,0xFC,0x08,0x20,0x13,0xFE,0x18,0x88,0x33,0xDE,0x50,0x88,0x13,0xDE,0x10,0x00,0x13,0xFE,0x10,0x90,0x10,0x92,0x11,0x12,0x11,0x13,0x16,0x0E},
{0xB9,0xAF,0x00,0x00,0x0C,0x20,0x0B,0xFE,0x08,0x20,0x11,0xFC,0x18,0x00,0x31,0xFC,0x51,0x04,0x11,0xFC,0x10,0x88,0x17,0xFF,0x10,0x00,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB9,0xB0,0x00,0x00,0x0C,0x82,0x0B,0xDF,0x08,0x84,0x12,0x94,0x1B,0xDF,0x31,0x4A,0x51,0x6A,0x16,0x53,0x10,0x00,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xB9,0xB1,0x00,0x00,0x0C,0x30,0x08,0x22,0x0B,0xFF,0x10,0x50,0x16,0x8B,0x31,0xFC,0x57,0x07,0x11,0xFC,0x11,0x04,0x11,0xFC,0x10,0x20,0x13,0x28,0x12,0x26,0x14,0xE2,0x10,0x40},
{0xB9,0xB2,0x00,0x00,0x0C,0x50,0x0A,0x53,0x09,0x52,0x11,0x54,0x1B,0xFF,0x30,0x88,0x50,0x50,0x13,0xFE,0x10,0x20,0x11,0xFC,0x10,0x20,0x17,0xFF,0x10,0x50,0x10,0x88,0x17,0x07},
{0xB9,0xB3,0x00,0x00,0x0C,0x80,0x08,0xF8,0x09,0x10,0x13,0xFE,0x16,0x22,0x33,0xFE,0x50,0x40,0x11,0xA6,0x16,0x64,0x10,0x98,0x13,0x34,0x10,0xD4,0x17,0x13,0x10,0xE0,0x10,0x40},
{0xB9,0xB4,0x00,0x00,0x0C,0x3C,0x0B,0xC0,0x08,0x42,0x17,0xFF,0x10,0x88,0x31,0xFC,0x56,0x8B,0x10,0xF8,0x10,0x00,0x13,0xFF,0x12,0x01,0x12,0xF9,0x12,0x89,0x12,0xF9,0x12,0x03},
{0xB9,0xB5,0x00,0x00,0x0C,0x1E,0x0B,0xE0,0x0A,0x00,0x13,0xFE,0x1A,0x02,0x33,0xFE,0x52,0x48,0x12,0x90,0x12,0xFE,0x13,0x90,0x12,0xFE,0x12,0x90,0x12,0xFE,0x14,0x90,0x14,0xFF},
{0xB9,0xB6,0x00,0x00,0x0A,0x52,0x0B,0xDF,0x0A,0x52,0x13,0xDE,0x1A,0x10,0x32,0x51,0x51,0xCF,0x10,0x00,0x10,0x88,0x13,0xFE,0x10,0x88,0x17,0xFF,0x10,0x88,0x11,0x06,0x16,0x02},
{0xB9,0xB7,0x00,0x00,0x0A,0x49,0x0B,0xEF,0x0A,0x49,0x13,0xCF,0x1A,0x49,0x33,0xCF,0x52,0x49,0x12,0x01,0x12,0x79,0x12,0x49,0x12,0x79,0x12,0x49,0x12,0x79,0x12,0x49,0x12,0x9B},
{0xB9,0xB8,0x00,0x00,0x0C,0x18,0x08,0x12,0x7F,0x7F,0x08,0x10,0x2A,0x54,0x3F,0x7E,0x22,0x44,0x22,0x44,0x3E,0x7C,0x14,0x28,0x14,0x28,0x15,0x29,0x26,0x49,0x2C,0x49,0x44,0x86},
{0xB9,0xB9,0x00,0x00,0x00,0x8C,0x7F,0x50,0x02,0x26,0x34,0x18,0x0F,0xF4,0x10,0x03,0x67,0xF0,0x04,0x10,0x07,0xF0,0x02,0x22,0x7F,0xFF,0x00,0x00,0x07,0xE1,0x04,0x21,0x78,0x1E},
{0xB9,0xBA,0x00,0x00,0x06,0x03,0x04,0x1A,0x3F,0x92,0x04,0x92,0x7F,0xF2,0x04,0x92,0x3F,0xD2,0x04,0x12,0x7F,0xD2,0x04,0x12,0x3F,0x82,0x24,0x82,0x3F,0x92,0x24,0x8E,0x7F,0xC4},
{0xB9,0xBB,0x00,0x00,0x20,0x21,0x3F,0xF1,0x20,0x05,0x32,0xC5,0x24,0x85,0x3E,0xF5,0x28,0x95,0x29,0x25,0x2A,0x45,0x3E,0x45,0x2A,0xC5,0x28,0xA1,0x49,0x21,0x51,0x17,0x42,0x12},
{0xB9,0xBC,0x00,0x00,0x40,0x04,0x7F,0xFE,0x40,0x80,0x47,0xF0,0x44,0x90,0x5F,0xFC,0x40,0x00,0x47,0xF0,0x44,0x10,0x47,0xF0,0x44,0x10,0x47,0xF0,0x42,0x20,0x44,0x12,0x7F,0xFF},
{0xB9,0xBD,0x00,0x00,0x20,0x02,0x3F,0xFF,0x28,0x88,0x2F,0x8A,0x28,0x89,0x2F,0x88,0x20,0x7F,0x2F,0x88,0x28,0x88,0x2F,0x98,0x28,0x94,0x2F,0x94,0x48,0xA2,0x4B,0xA2,0x49,0x41},
{0xB9,0xBE,0x00,0x00,0x03,0x30,0x52,0x20,0x72,0x22,0x5F,0xBF,0x54,0x20,0x54,0x50,0x57,0x9E,0x54,0xA4,0x54,0x84,0x74,0xBF,0x54,0x84,0x44,0x8A,0x08,0x8A,0x0B,0x91,0x09,0x21},
{0xB9,0xBF,0x00,0x00,0x00,0x30,0x48,0x24,0x7B,0xFE,0x48,0x88,0x4A,0x52,0x4B,0xFF,0x4A,0x22,0x4A,0xFA,0x4A,0x22,0x7A,0xFA,0x4A,0x8A,0x42,0xFA,0x02,0x02,0x02,0x0E,0x02,0x04},
{0xB9,0xC0,0x00,0x00,0x00,0x30,0x54,0x22,0x77,0xFF,0x54,0x00,0x54,0x66,0x54,0x44,0x55,0xEF,0x54,0x44,0x55,0x55,0x75,0x55,0x55,0x55,0x45,0x55,0x0A,0x55,0x0A,0x44,0x08,0x44},
{0xB9,0xC1,0x00,0x00,0x0C,0x98,0x22,0xA2,0x3F,0xFF,0x20,0x02,0x47,0xF4,0x04,0x10,0x07,0xF0,0x10,0x00,0x1F,0xF4,0x10,0x06,0x0F,0xFC,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8},
{0xB9,0xC2,0x00,0x00,0x01,0x8C,0x51,0x08,0x77,0xD1,0x51,0x1F,0x57,0xD1,0x55,0x62,0x55,0x48,0x57,0xC8,0x51,0x08,0x73,0x08,0x55,0x94,0x45,0x54,0x09,0x24,0x01,0x22,0x01,0x41},
{0xB9,0xC3,0x00,0x00,0x04,0x02,0x07,0xFF,0x54,0x00,0x74,0x7C,0x54,0x44,0x54,0x44,0x54,0x7C,0x54,0x00,0x55,0xEF,0x55,0x29,0x75,0x29,0x55,0xEF,0x44,0x00,0x07,0xFF,0x04,0x00},
{0xB9,0xC4,0x00,0x00,0x00,0x88,0x4B,0xFF,0x78,0x88,0x48,0xF8,0x48,0x20,0x49,0xFC,0x49,0x24,0x49,0xFC,0x48,0x20,0x7B,0xFE,0x48,0x20,0x47,0xFF,0x00,0x50,0x01,0x8C,0x06,0x03},
{0xB9,0xC5,0x00,0x00,0x00,0x82,0x7F,0xFF,0x00,0x80,0x1F,0xFC,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x22,0x7F,0xFF,0x08,0x00,0x7F,0x7E,0x11,0x42,0x17,0x7E,0x22,0x42},
{0xB9,0xC6,0x00,0x00,0x00,0x20,0x49,0xFC,0x79,0x24,0x4F,0xFF,0x49,0x24,0x49,0xFC,0x48,0x20,0x49,0xFC,0x49,0x24,0x79,0xFC,0x48,0x40,0x47,0xFF,0x00,0x88,0x00,0x70,0x07,0x8F},
{0xB9,0xC7,0x00,0x00,0x03,0xFE,0x48,0x20,0x7D,0x44,0x49,0xFE,0x49,0x04,0x49,0xFC,0x49,0x04,0x49,0xFC,0x49,0x04,0x79,0xFC,0x48,0x48,0x40,0x7E,0x07,0xC8,0x00,0x31,0x0F,0xCF},
{0xB9,0xC8,0x00,0x00,0x01,0x8C,0x51,0x08,0x77,0xC8,0x51,0x0A,0x53,0x9F,0x50,0x12,0x51,0x12,0x57,0xD2,0x52,0x2A,0x73,0xC4,0x52,0x44,0x42,0x4A,0x04,0x4A,0x05,0xD2,0x08,0xA1},
{0xB9,0xC9,0x00,0x00,0x00,0x20,0x4B,0xFF,0x78,0x20,0x49,0xFE,0x48,0x20,0x4B,0xFF,0x49,0x04,0x49,0xFC,0x49,0x04,0x79,0xFC,0x49,0x04,0x41,0xFC,0x00,0x88,0x01,0x06,0x06,0x02},
{0xB9,0xCA,0x00,0x00,0x01,0x89,0x51,0x0F,0x77,0xA9,0x51,0x29,0x51,0x4A,0x57,0xEA,0x51,0x0A,0x52,0x89,0x57,0xE9,0x7A,0x29,0x53,0xE9,0x42,0x2F,0x03,0xEA,0x02,0x28,0x00,0x08},
{0xB9,0xCB,0x00,0x00,0x00,0x50,0x4B,0xFF,0x78,0x50,0x4B,0xFE,0x4A,0x52,0x4B,0xFE,0x4A,0x52,0x4B,0xFE,0x48,0x00,0x79,0xFC,0x49,0x04,0x41,0xFC,0x01,0x04,0x01,0xFC,0x01,0x04},
{0xB9,0xCC,0x00,0x00,0x03,0xDE,0x48,0xC6,0x7B,0x5A,0x48,0xC6,0x4B,0x5A,0x48,0x42,0x48,0x30,0x48,0xCC,0x4B,0x33,0x78,0x40,0x49,0x98,0x40,0x20,0x00,0xCC,0x00,0x10,0x00,0xE0},
{0xB9,0xCD,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x22,0x4B,0xFE,0x4A,0x22,0x4B,0xFE,0x4A,0x22,0x48,0xA8,0x4F,0xFF,0x78,0xA8,0x4B,0xFE,0x40,0x20,0x03,0xFE,0x00,0x20,0x00,0x20},
{0xB9,0xCE,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x82,0x2F,0xFA,0x24,0x92,0x27,0xF2,0x24,0x92,0x27,0xF2,0x20,0x8A,0x2F,0xF6,0x20,0x12,0x2F,0xFE,0x22,0x12,0x21,0x32,0x3F,0xFE},
{0xB9,0xCF,0x00,0x00,0x20,0x02,0x3F,0xFF,0x20,0x02,0x23,0xE2,0x22,0x22,0x23,0xE2,0x20,0x82,0x2F,0xFA,0x20,0x02,0x27,0xF2,0x25,0x52,0x25,0xD2,0x24,0x12,0x3F,0xFE,0x20,0x02},
{0xB9,0xD0,0x00,0x00,0x00,0x60,0x20,0x42,0x3F,0xFF,0x22,0x10,0x3F,0xFE,0x22,0x12,0x3F,0xFE,0x24,0x20,0x27,0xBD,0x24,0x21,0x2F,0x9E,0x20,0x40,0x47,0xFC,0x40,0x40,0x5F,0xFF},
{0xB9,0xD1,0x00,0x00,0x08,0x30,0x7F,0xA0,0x22,0x20,0x3E,0xFC,0x00,0x24,0x7E,0xA4,0x04,0x65,0x0B,0x25,0x7C,0x55,0x48,0x93,0x19,0x01,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB9,0xD2,0x00,0x00,0x18,0x30,0x10,0x24,0x11,0xFE,0x10,0x88,0x7C,0x52,0x13,0xFF,0x10,0x00,0x11,0xFC,0x11,0x04,0x1D,0xFC,0x71,0x04,0x21,0xFC,0x00,0x51,0x00,0x91,0x07,0x0E},
{0xB9,0xD3,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x01,0x02,0x7F,0xFF,0x04,0x10,0x18,0x8C,0x6F,0xFB,0x00,0x80,0x3F,0xFE},
{0xB9,0xD4,0x00,0x00,0x08,0x30,0x3E,0x20,0x08,0x20,0x7F,0x7C,0x14,0x24,0x7F,0xA4,0x08,0x65,0x3E,0x25,0x08,0x53,0x08,0x91,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB9,0xD5,0x00,0x00,0x04,0x26,0x3F,0xB8,0x04,0x20,0x3F,0xA2,0x24,0xBF,0x3F,0xA4,0x24,0xA4,0x3F,0xA4,0x04,0x24,0x7F,0xC4,0x04,0x44,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xB9,0xD6,0x00,0x00,0x3F,0x7F,0x29,0x02,0x3F,0x34,0x29,0x08,0x3F,0x7F,0x08,0x09,0x3F,0x0A,0x08,0x08,0x7F,0x38,0x20,0x10,0x00,0x80,0x1F,0xFC,0x00,0x80,0x00,0x82,0x7F,0xFF},
{0xB9,0xD7,0x00,0x00,0x18,0x30,0x10,0x22,0x17,0xFF,0x10,0x20,0x7A,0xAA,0x11,0x24,0x12,0xAA,0x10,0x20,0x12,0xAA,0x19,0x24,0x72,0xAA,0x20,0x50,0x00,0x48,0x00,0x84,0x03,0x03},
{0xB9,0xD8,0x00,0x00,0x01,0x00,0x3F,0xFC,0x01,0x00,0x1F,0xF8,0x00,0x02,0x7F,0xFF,0x00,0x02,0x1F,0xF8,0x00,0x80,0x3F,0xFE,0x00,0x04,0x3E,0xFF,0x22,0x44,0x3E,0x24,0x00,0x18},
{0xB9,0xD9,0x00,0x00,0x21,0x10,0x3F,0x9E,0x25,0x12,0x3F,0x22,0x25,0x54,0x3F,0x08,0x25,0x10,0x04,0x69,0x7F,0x8F,0x0C,0x09,0x16,0x11,0x15,0xAA,0x24,0x84,0x44,0x08,0x04,0x30},
{0xB9,0xDA,0x00,0x00,0x02,0x22,0x7E,0x3F,0x02,0x20,0x0F,0xF8,0x09,0x48,0x0F,0xF8,0x20,0x02,0x3F,0xFF,0x22,0x02,0x43,0xF4,0x04,0x10,0x1B,0x20,0x00,0xC0,0x07,0x00,0x78,0x00},
{0xB9,0xDB,0x00,0x00,0x04,0x00,0x07,0xE0,0x18,0x40,0x6D,0x80,0x06,0x00,0x18,0x82,0x7F,0xFF,0x20,0x02,0x5F,0xFC,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x04,0x10,0x38,0x0E},
{0xB9,0xDC,0x00,0x00,0x01,0x02,0x7F,0xFF,0x04,0x88,0x1F,0xF4,0x64,0x43,0x0F,0xF8,0x14,0x40,0x07,0xF8,0x04,0x40,0x07,0xFC,0x00,0x10,0x7F,0xFF,0x08,0x10,0x06,0x10,0x00,0x60},
{0xB9,0xDD,0x00,0x00,0x01,0x02,0x7F,0xFF,0x04,0x10,0x08,0x0C,0x1F,0xFB,0x71,0x10,0x11,0x10,0x11,0xF0,0x10,0x00,0x17,0xBC,0x14,0xA4,0x14,0xA4,0x17,0xBC,0x10,0x00,0x0F,0xFE},
{0xB9,0xDE,0x00,0x00,0x18,0x18,0x10,0x12,0x11,0xFF,0x14,0x44,0x7E,0x28,0x25,0xFF,0x25,0x01,0x25,0x11,0x65,0x7D,0x59,0x11,0x09,0x7D,0x15,0x45,0x15,0x7D,0x21,0x01,0x41,0x07},
{0xB9,0xDF,0x00,0x00,0x18,0x18,0x10,0x92,0x14,0x54,0x7E,0xFF,0x24,0x81,0x25,0x7E,0x24,0x44,0x24,0x7C,0x68,0x10,0x58,0xFE,0x14,0x92,0x14,0x92,0x24,0x9E,0x20,0x94,0x40,0x10},
{0xB9,0xE0,0x00,0x00,0x30,0xCC,0x20,0x88,0x2B,0xEA,0x78,0x8F,0x2B,0xEA,0x2A,0xBA,0x2A,0xAA,0x4B,0xEA,0x68,0x8A,0x51,0x84,0x11,0xC4,0x2A,0xAA,0x2A,0xAA,0x44,0x89,0x00,0x91},
{0xB9,0xE1,0x00,0x00,0x31,0x02,0x21,0xFF,0x25,0x00,0x7D,0x3C,0x25,0x24,0x25,0x24,0x25,0x3C,0x49,0x00,0x69,0x77,0x51,0x55,0x19,0x55,0x15,0x77,0x25,0x00,0x21,0xFF,0x41,0x00},
{0xB9,0xE2,0x00,0x00,0x30,0x02,0x23,0xFF,0x24,0x48,0x7D,0xFE,0x25,0x4A,0x25,0xFE,0x24,0x00,0x48,0xFC,0x68,0x00,0x53,0xFF,0x18,0x10,0x15,0x94,0x25,0x13,0x22,0x71,0x40,0x20},
{0xB9,0xE3,0x00,0x00,0x31,0xFE,0x21,0x22,0x25,0xFE,0x7D,0x22,0x25,0xFE,0x24,0x00,0x24,0x30,0x49,0xC0,0x68,0x58,0x50,0x22,0x1B,0xFD,0x14,0x21,0x25,0xA8,0x21,0x26,0x42,0x22},
{0xB9,0xE4,0x00,0x00,0x30,0x04,0x21,0xFE,0x24,0x20,0x7E,0xBC,0x24,0xA0,0x25,0xFF,0x24,0x40,0x48,0xFE,0x68,0x80,0x51,0xFF,0x18,0xA9,0x15,0x55,0x25,0x01,0x22,0x1E,0x40,0x04},
{0xB9,0xE5,0x00,0x00,0x18,0x0F,0x23,0xBA,0x2A,0xA9,0x2A,0xC5,0x2A,0x80,0x3B,0xBE,0x2A,0x82,0x2A,0x8C,0x2A,0x88,0x7A,0xBF,0x2B,0x88,0x0A,0x88,0x12,0x08,0x12,0x38,0x22,0x10},
{0xB9,0xE6,0x00,0x00,0x20,0x82,0x3F,0xFF,0x22,0x22,0x5F,0xFC,0x02,0x20,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x01,0x40,0x06,0x30,0x38,0x0E},
{0xB9,0xE7,0x00,0x00,0x20,0x82,0x3F,0xFF,0x21,0x02,0x44,0x88,0x14,0x24,0x23,0xE4,0x00,0x00,0x0F,0xF8,0x09,0x4A,0x7F,0xFF,0x00,0x00,0x3F,0xFE,0x00,0x80,0x03,0x80,0x01,0x00},
{0xB9,0xE8,0x00,0x00,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xF8,0x00,0x80,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x12,0x7F,0xFF,0x08,0x08,0x17,0xF4,0x62,0x13,0x04,0x10,0x18,0xE0},
{0xB9,0xE9,0x00,0x00,0x20,0x82,0x3F,0xFF,0x20,0x02,0x5F,0x7C,0x05,0x14,0x19,0x64,0x03,0x0C,0x0D,0x34,0x01,0xC0,0x0E,0x38,0x71,0x87,0x06,0x60,0x19,0x98,0x06,0x60,0x01,0x80},
{0xB9,0xEA,0x00,0x00,0x20,0x42,0x3F,0xFF,0x24,0x92,0x5F,0xFC,0x04,0x90,0x07,0xF0,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x18,0x0C},
{0xB9,0xEB,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x22,0x22,0x4F,0xFC,0x02,0x20,0x0F,0xF8,0x02,0x20,0x3F,0xFE,0x08,0x88,0x17,0xF4,0x61,0x83,0x06,0xE0,0x18,0x9C,0x00,0x80},
{0xB9,0xEC,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x52,0x7C,0x12,0x04,0x1E,0xFE,0x12,0x04,0x02,0x7C,0x3E,0x00,0x12,0xFE,0x12,0x44,0x12,0x28,0x22,0x18,0x22,0xE6},
{0xB9,0xED,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x20,0x02,0x52,0xFC,0x12,0x10,0x1E,0x7C,0x12,0x24,0x02,0xFE,0x3E,0x00,0x12,0x7C,0x12,0x44,0x12,0x44,0x22,0x7C,0x22,0x44},
{0xB9,0xEE,0x00,0x00,0x20,0x82,0x3F,0xFF,0x20,0x02,0x48,0x9C,0x0F,0x44,0x11,0x28,0x6A,0x10,0x14,0x0C,0x0B,0xF3,0x70,0x00,0x1F,0xFE,0x00,0x40,0x0C,0x58,0x31,0xC6,0x00,0x80},
{0xB9,0xEF,0x00,0x00,0x0A,0x06,0x4A,0x84,0x2B,0x04,0x0A,0x04,0x7F,0xBF,0x00,0x04,0x31,0x84,0x0A,0x24,0x7F,0xA4,0x04,0x14,0x3F,0x94,0x04,0x04,0x07,0x84,0x7C,0x1C,0x20,0x08},
{0xB9,0xF0,0x20,0x04,0x3F,0xFE,0x20,0x04,0x3F,0xFC,0x24,0x88,0x3F,0xFF,0x24,0x88,0x2F,0xFC,0x28,0x84,0x2F,0xFC,0x20,0x80,0x3F,0xFF,0x21,0x08,0x47,0x30,0x41,0xC0,0x5E,0x3C},
{0xB9,0xF1,0x00,0x00,0x18,0xC6,0x10,0x84,0x1F,0xFC,0x08,0x00,0x7F,0x4E,0x08,0x70,0x7F,0x40,0x49,0x42,0x7F,0x7F,0x49,0x48,0x7F,0x48,0x08,0x48,0x7F,0x48,0x08,0x88,0x08,0x88},
{0xB9,0xF2,0x00,0x00,0x10,0x02,0x13,0xFF,0x11,0x00,0x55,0x3C,0x55,0x24,0x55,0x24,0x55,0x3C,0x55,0x00,0x55,0x77,0x55,0x55,0x7D,0x55,0x45,0x77,0x41,0x00,0x01,0xFF,0x01,0x00},
{0xB9,0xF3,0x00,0x00,0x18,0x10,0x11,0xFF,0x54,0x44,0x7C,0x28,0x55,0xFF,0x54,0x00,0x54,0xFE,0x54,0x82,0x54,0xFE,0x54,0x82,0x5C,0xFE,0x54,0x10,0x11,0xFF,0x10,0x10,0x10,0x10},
{0xB9,0xF4,0x00,0x00,0x0A,0x30,0x29,0x22,0x28,0xBF,0x7F,0x22,0x29,0x54,0x2D,0x08,0x3B,0x14,0x29,0x63,0x23,0x00,0x00,0x80,0x1F,0xFC,0x10,0x84,0x10,0x9C,0x10,0x88,0x00,0x80},
{0xB9,0xF5,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x02,0x7F,0xFF,0x08,0x88,0x1F,0xFC,0x68,0x8B,0x08,0x98,0x00,0x80},
{0xB9,0xF6,0x00,0x00,0x19,0x01,0x11,0xFF,0x55,0x15,0x7D,0x13,0x55,0xFF,0x55,0x11,0x55,0xD5,0x55,0x55,0x55,0xC9,0x55,0x0B,0x5D,0xD7,0x55,0x13,0x11,0x21,0x11,0xFF,0x11,0x01},
{0xB9,0xF7,0x00,0x00,0x18,0x7C,0x10,0x44,0x54,0x7C,0x7E,0x44,0x54,0x7C,0x54,0x00,0x55,0xFF,0x55,0x29,0x55,0xFF,0x54,0x00,0x5C,0xFE,0x54,0x44,0x10,0x38,0x10,0x4C,0x11,0x83},
{0xB9,0xF8,0x00,0x00,0x20,0x82,0x3F,0xFF,0x21,0x00,0x2F,0xEF,0x24,0x49,0x27,0xC9,0x20,0x0A,0x2F,0xCA,0x20,0x89,0x21,0x29,0x21,0xC9,0x2F,0x0F,0x41,0x0A,0x47,0x08,0x42,0x08},
{0xB9,0xF9,0x00,0x00,0x20,0x42,0x3F,0xFF,0x20,0x00,0x2F,0xBE,0x22,0x8A,0x2C,0xB2,0x21,0x86,0x26,0x9A,0x20,0xE0,0x23,0x18,0x2C,0xC7,0x23,0x30,0x44,0xC0,0x43,0x18,0x40,0xE0},
{0xB9,0xFA,0x00,0x00,0x0A,0x30,0x29,0x22,0x28,0xBF,0x7F,0x22,0x29,0x54,0x2D,0x08,0x3B,0x14,0x29,0x63,0x23,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x08,0x10,0x08,0x10,0x10,0x10},
{0xB9,0xFB,0x00,0x00,0x0A,0x30,0x29,0x22,0x28,0xBF,0x7F,0x22,0x29,0x54,0x2D,0x08,0x3B,0x14,0x29,0x63,0x3F,0xFC,0x00,0x04,0x0F,0xFC,0x08,0x00,0x1F,0xFE,0x10,0x02,0x00,0x3C},
{0xB9,0xFC,0x00,0x00,0x04,0x06,0x7F,0x84,0x21,0x08,0x12,0x10,0x7F,0xA3,0x00,0x02,0x3F,0x04,0x21,0x08,0x3F,0x30,0x21,0x03,0x3F,0x02,0x04,0x04,0x7F,0x88,0x04,0x30,0x04,0x00},
{0xB9,0xFD,0x00,0x00,0x19,0x18,0x17,0xD0,0x22,0x10,0x4A,0x92,0x0F,0xDF,0x12,0x52,0x30,0x12,0x57,0xEA,0x14,0x4A,0x17,0xC4,0x14,0x44,0x17,0xCA,0x14,0x4A,0x15,0xC9,0x14,0x91},
{0xB9,0xFE,0x00,0x00,0x3F,0x78,0x22,0x49,0x3E,0x49,0x22,0x86,0x3E,0x00,0x20,0xFC,0x3E,0x44,0x22,0x28,0x4E,0x18,0x40,0x67,0x06,0x80,0x24,0x42,0x24,0x52,0x44,0x19,0x03,0xF0},
{0xBA,0x40,0x00,0x00,0x3F,0xFF,0x20,0x40,0x27,0xFC,0x24,0x04,0x27,0xFC,0x24,0x04,0x27,0xFC,0x20,0x40,0x46,0x58,0x58,0xC6,0x06,0x00,0x24,0x82,0x24,0x51,0x44,0x19,0x03,0xF0},
{0xBA,0x41,0x00,0x00,0x08,0x40,0x12,0x58,0x7D,0x62,0x00,0x43,0x3E,0x3E,0x22,0x00,0x3E,0x40,0x22,0x58,0x3E,0x62,0x22,0x43,0x46,0x3E,0x00,0x80,0x24,0x52,0x24,0x19,0x43,0xF1},
{0xBA,0x42,0x00,0x00,0x18,0x18,0x11,0x12,0x11,0xFF,0x19,0x10,0x55,0x7E,0x55,0x12,0x51,0xFF,0x11,0x12,0x11,0x7E,0x11,0x10,0x11,0x56,0x12,0x38,0x12,0x56,0x12,0x92,0x14,0x30},
{0xBA,0x43,0x00,0x00,0x18,0x7C,0x10,0x44,0x10,0x7C,0x18,0x44,0x54,0x7C,0x54,0x00,0x51,0xFF,0x11,0x29,0x11,0xFF,0x10,0x00,0x10,0xFE,0x10,0x44,0x10,0x38,0x10,0x4C,0x11,0x83},
{0xBA,0x44,0x00,0x00,0x18,0xFE,0x10,0x92,0x13,0xFF,0x19,0x24,0x55,0xFC,0x54,0x00,0x51,0xFE,0x11,0x02,0x11,0xFE,0x11,0x02,0x11,0xFE,0x11,0x02,0x11,0xFE,0x10,0x84,0x13,0x03},
{0xBA,0x45,0x00,0x00,0x18,0xE6,0x13,0x84,0x10,0x84,0x1B,0xE4,0x54,0x9F,0x53,0xE5,0x52,0xA5,0x13,0xE5,0x12,0xA5,0x13,0xE5,0x10,0x85,0x13,0xE5,0x10,0x89,0x13,0xE9,0x11,0x0B},
{0xBA,0x46,0x00,0x00,0x18,0xC3,0x10,0x8C,0x13,0xE8,0x10,0x88,0x5B,0xE8,0x56,0xAF,0x53,0xEA,0x12,0xAA,0x13,0xEA,0x12,0xAA,0x10,0x8A,0x13,0xEA,0x10,0x8A,0x10,0x92,0x10,0x92},
{0xBA,0x47,0x00,0x00,0x18,0x30,0x10,0x44,0x11,0xFA,0x18,0x84,0x55,0x4A,0x53,0xAD,0x50,0x30,0x11,0xCC,0x16,0x33,0x10,0xC0,0x13,0x18,0x10,0x60,0x11,0x8C,0x10,0x30,0x11,0xC0},
{0xBA,0x48,0x00,0x00,0x18,0x18,0x11,0x12,0x11,0xFF,0x19,0x12,0x55,0xFF,0x55,0x12,0x51,0x7E,0x11,0x10,0x11,0x7E,0x11,0x52,0x11,0x7E,0x11,0x52,0x12,0x7E,0x12,0x52,0x12,0x56},
{0xBA,0x49,0x00,0x00,0x06,0x34,0x04,0x22,0x3F,0xA2,0x04,0x20,0x7F,0xFF,0x09,0x20,0x12,0x26,0x3F,0x94,0x52,0x14,0x1F,0x94,0x12,0x08,0x1F,0x89,0x12,0x15,0x1F,0xD3,0x10,0x21},
{0xBA,0x4A,0x00,0x00,0x18,0xCC,0x10,0x88,0x12,0xAA,0x7A,0xAF,0x14,0x9A,0x13,0xEA,0x12,0xAA,0x1A,0xBA,0x13,0xA4,0x72,0xE4,0x52,0xA6,0x12,0xAA,0x12,0xEA,0x72,0xA9,0x22,0x11},
{0xBA,0x4B,0x00,0x00,0x18,0x18,0x10,0x12,0x11,0xFF,0x7C,0x44,0x10,0x28,0x11,0xFF,0x15,0x11,0x19,0x7D,0x71,0x11,0x51,0x7D,0x11,0x45,0x11,0x7D,0x11,0x01,0x71,0x07,0x21,0x02},
{0xBA,0x4C,0x00,0x00,0x18,0x18,0x10,0x12,0x11,0xFF,0x7C,0x00,0x11,0x11,0x10,0xAA,0x14,0x10,0x18,0xAA,0x71,0x39,0x50,0x00,0x10,0x12,0x13,0xFF,0x10,0x10,0x70,0x10,0x20,0x10},
{0xBA,0x4D,0x00,0x00,0x18,0x8C,0x13,0xE8,0x11,0x08,0x7D,0x49,0x13,0xEF,0x11,0x29,0x14,0x09,0x1B,0xF5,0x72,0x25,0x53,0xE2,0x12,0x22,0x13,0xE6,0x12,0x25,0x72,0xE5,0x22,0x49},
{0xBA,0x4E,0x00,0x00,0x18,0x48,0x13,0xFF,0x10,0x48,0x7C,0x00,0x11,0xFE,0x11,0x02,0x15,0xFE,0x19,0x02,0x71,0xFE,0x50,0x20,0x13,0xFF,0x10,0x20,0x10,0x50,0x70,0x8C,0x23,0x03},
{0xBA,0x4F,0x00,0x00,0x18,0x10,0x10,0xFE,0x10,0x92,0x7D,0xFF,0x10,0x92,0x10,0xFE,0x14,0x10,0x18,0xFE,0x70,0x92,0x50,0xFE,0x10,0x20,0x11,0xFF,0x10,0x44,0x70,0x38,0x21,0xC7},
{0xBA,0x50,0x00,0x00,0x18,0x21,0x11,0xEF,0x10,0x63,0x7D,0xAD,0x10,0x21,0x10,0x63,0x15,0xAD,0x18,0x10,0x71,0x22,0x51,0xFF,0x11,0x02,0x11,0xFE,0x11,0x02,0x71,0xFE,0x21,0x02},
{0xBA,0x51,0x00,0x00,0x19,0x01,0x11,0xFF,0x11,0x15,0x7D,0x13,0x11,0xFF,0x11,0x11,0x15,0xD5,0x19,0x55,0x71,0xC9,0x51,0x0B,0x11,0xD7,0x11,0x13,0x11,0x21,0x71,0xFF,0x21,0x01},
{0xBA,0x52,0x00,0x00,0x18,0x30,0x11,0xA3,0x11,0x22,0x7D,0xFE,0x11,0x02,0x10,0xC8,0x14,0x90,0x19,0xFF,0x73,0x10,0x55,0xFE,0x11,0x10,0x11,0xFE,0x11,0x10,0x71,0xFF,0x21,0x00},
{0xBA,0x53,0x00,0x00,0x20,0x82,0x3F,0xFF,0x42,0x22,0x5F,0xFC,0x02,0x20,0x7F,0xFF,0x04,0x10,0x18,0xEC,0x67,0x83,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x80,0x03,0x80},
{0xBA,0x54,0x00,0x00,0x18,0x18,0x11,0x12,0x11,0xFF,0x7D,0x00,0x11,0x36,0x11,0x24,0x15,0xFF,0x19,0x24,0x71,0x24,0x51,0x3C,0x11,0x24,0x11,0x00,0x12,0x2A,0x72,0x55,0x22,0x55},
{0xBA,0x55,0x00,0x00,0x18,0x30,0x10,0x44,0x11,0xFA,0x7C,0x84,0x11,0x4A,0x13,0xAD,0x14,0x30,0x19,0xCC,0x72,0x33,0x50,0xC0,0x13,0x18,0x10,0x60,0x11,0x8C,0x70,0x30,0x21,0xC0},
{0xBA,0x56,0x00,0x00,0x0C,0x18,0x08,0x10,0x7F,0x12,0x00,0x1F,0x3E,0x10,0x22,0x12,0x3E,0xFF,0x00,0x42,0x7F,0x24,0x41,0x24,0x5D,0x18,0x55,0x10,0x5D,0x28,0x41,0x24,0x43,0x43},
{0xBA,0x57,0x00,0x00,0x18,0x30,0x10,0x28,0x7E,0x44,0x10,0x44,0x7C,0x82,0x45,0x49,0x7C,0x28,0x44,0x08,0x7C,0x48,0x54,0x28,0x10,0x0F,0x7E,0xF8,0x10,0x08,0x10,0x08,0x10,0x08},
{0xBA,0x58,0x00,0x00,0x18,0x60,0x10,0x42,0x14,0xFF,0x7E,0x80,0x21,0x44,0x24,0xFE,0x3E,0x44,0x24,0x7C,0x24,0x44,0x24,0x7C,0x24,0x44,0x25,0xFF,0x44,0x24,0x5C,0x43,0x49,0x81},
{0xBA,0x59,0x00,0x00,0x18,0x60,0x10,0x42,0x14,0xFF,0x7E,0x80,0x21,0x10,0x24,0xFE,0x3C,0x28,0x24,0x44,0x25,0xFF,0x24,0x02,0x24,0xF2,0x24,0x92,0x44,0xF2,0x5C,0x0E,0x48,0x04},
{0xBA,0x5A,0x00,0x00,0x19,0xF8,0x11,0x08,0x55,0xF8,0x7D,0x08,0x55,0xF8,0x55,0x08,0x7C,0x02,0x57,0xFF,0x54,0x80,0x7D,0xFE,0x52,0x4A,0x10,0x92,0x13,0x22,0x10,0xDC,0x10,0x08},
{0xBA,0x5B,0x00,0x00,0x3F,0x04,0x21,0x7E,0x3F,0x08,0x21,0x2A,0x3F,0x7F,0x20,0x48,0x24,0x15,0x26,0x15,0x39,0x23,0x00,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x0A,0x7F,0xFF},
{0xBA,0x5C,0x00,0x00,0x02,0x02,0x4B,0xFF,0x7A,0x02,0x4D,0xFC,0x49,0x04,0x49,0xFC,0x79,0x04,0x49,0xFC,0x48,0x00,0x48,0x22,0x7B,0xFF,0x48,0x00,0x40,0xC8,0x01,0x06,0x06,0x02},
{0xBA,0x5D,0x00,0x00,0x18,0x18,0x10,0x10,0x10,0xFE,0x7C,0x44,0x11,0x29,0x31,0xFF,0x31,0x01,0x5A,0x22,0x55,0xFF,0x54,0x40,0x10,0x7C,0x10,0x44,0x10,0x84,0x10,0xB8,0x11,0x10},
{0xBA,0x5E,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x4A,0x12,0x48,0x30,0x87,0x31,0x40,0x58,0x7F,0x54,0xA0,0x55,0x3E,0x10,0x20,0x10,0x3E,0x10,0x20,0x10,0x20,0x10,0x20},
{0xBA,0x5F,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x02,0x12,0x68,0x30,0x86,0x39,0x32,0x54,0x28,0x54,0x44,0x50,0xFE,0x13,0x85,0x10,0x84,0x10,0x84,0x10,0xFC,0x10,0x84},
{0xBA,0x60,0x00,0x00,0x18,0x30,0x10,0x22,0x13,0xFF,0x7C,0x00,0x10,0xFC,0x30,0x84,0x30,0xFC,0x58,0x00,0x55,0x01,0x55,0xFF,0x11,0x01,0x11,0x7D,0x11,0x45,0x11,0x7D,0x11,0x03},
{0xBA,0x61,0x00,0x00,0x04,0x10,0x15,0x56,0x16,0x58,0x25,0x14,0x09,0x24,0x28,0x42,0x3F,0xFF,0x20,0x02,0x40,0x84,0x3F,0xFE,0x01,0x80,0x02,0xE0,0x0C,0x98,0x30,0x86,0x00,0x80},
{0xBA,0x62,0x00,0x00,0x0C,0x04,0x08,0xFE,0x08,0x10,0x7E,0xFF,0x08,0x00,0x18,0xFE,0x18,0x82,0x2C,0xFE,0x2A,0x82,0x4A,0xFE,0x08,0x82,0x08,0xFE,0x08,0x24,0x08,0x43,0x09,0x81},
{0xBA,0x63,0x00,0x00,0x0C,0x44,0x09,0xFF,0x08,0x44,0x7E,0xFE,0x08,0x44,0x19,0xFF,0x18,0x10,0x2C,0xFE,0x2A,0x92,0x4A,0xFE,0x08,0x92,0x09,0xFF,0x08,0x82,0x08,0x8E,0x08,0x84},
{0xBA,0x64,0x00,0x00,0x18,0x20,0x13,0xFF,0x10,0x20,0x7D,0xFE,0x10,0x48,0x33,0xFF,0x38,0x84,0x55,0x3A,0x55,0xE2,0x52,0x21,0x11,0xFE,0x10,0x30,0x10,0xEC,0x13,0x22,0x10,0x20},
{0xBA,0x65,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x7D,0x42,0x12,0x48,0x30,0x90,0x31,0xFE,0x5A,0x90,0x54,0xFE,0x54,0x90,0x10,0xFE,0x10,0x90,0x10,0x92,0x10,0xFF,0x00,0x80},
{0xBA,0x66,0x00,0x00,0x0C,0xFE,0x08,0x82,0x08,0xFE,0x7E,0x82,0x08,0xFE,0x18,0x00,0x1D,0xEF,0x2A,0x63,0x2A,0xA5,0x49,0x29,0x08,0x63,0x08,0xA5,0x09,0x29,0x08,0xE7,0x08,0x42},
{0xBA,0x67,0x00,0x00,0x18,0xCC,0x10,0x90,0x10,0xFF,0x7D,0x90,0x12,0xFE,0x30,0x90,0x30,0xFE,0x58,0x90,0x54,0xFF,0x54,0x80,0x10,0x12,0x13,0xFF,0x10,0x10,0x10,0x10,0x10,0x10},
{0xBA,0x68,0x00,0x00,0x18,0x60,0x11,0x9F,0x11,0x09,0x7D,0x49,0x11,0x29,0x33,0xD1,0x31,0x16,0x58,0x00,0x55,0x02,0x55,0xFF,0x11,0x22,0x11,0xFE,0x11,0x22,0x11,0xFE,0x11,0x02},
{0xBA,0x69,0x00,0x00,0x18,0x30,0x11,0x44,0x11,0xFE,0x7D,0x24,0x11,0xFC,0x31,0x24,0x31,0x24,0x59,0xFC,0x55,0x14,0x54,0x10,0x10,0xD4,0x10,0x96,0x10,0x9A,0x11,0x11,0x12,0x0F},
{0xBA,0x6A,0x00,0x00,0x18,0x60,0x10,0xD0,0x10,0x88,0x7D,0x74,0x12,0x03,0x31,0xFC,0x39,0x04,0x55,0xFC,0x55,0x04,0x51,0xFC,0x11,0x00,0x12,0xFE,0x12,0x82,0x12,0x82,0x14,0xFE},
{0xBA,0x6B,0x00,0x00,0x18,0x43,0x10,0x82,0x11,0xE2,0x7D,0x22,0x11,0xEF,0x31,0x22,0x39,0xE2,0x55,0x32,0x55,0xEA,0x51,0x6A,0x10,0xA2,0x11,0x22,0x12,0x22,0x10,0xEE,0x10,0x44},
{0xBA,0x6C,0x00,0x00,0x18,0x8C,0x10,0x50,0x10,0x5E,0x7D,0x12,0x10,0x92,0x30,0x9E,0x30,0x10,0x5B,0x9E,0x54,0x92,0x54,0x92,0x10,0x9E,0x10,0x92,0x10,0xC0,0x13,0x30,0x12,0x0F},
{0xBA,0x6D,0x00,0x00,0x18,0x30,0x10,0x28,0x7E,0x48,0x10,0x44,0x7C,0x83,0x45,0x18,0x7C,0x10,0x44,0xFE,0x7C,0x30,0x54,0x38,0x10,0x54,0x7E,0x54,0x10,0x92,0x11,0x11,0x10,0x10},
{0xBA,0x6E,0x00,0x00,0x08,0x48,0x3E,0x78,0x22,0x49,0x2B,0x47,0x3E,0x80,0x62,0x7E,0x2A,0x24,0x22,0x18,0x46,0xE7,0x00,0x80,0x7F,0xFF,0x01,0x80,0x0E,0xF0,0x70,0x8F,0x00,0x80},
{0xBA,0x6F,0x00,0x00,0x18,0x60,0x10,0x44,0x10,0x7E,0x7C,0x84,0x11,0x68,0x32,0x10,0x39,0xA4,0x54,0x7E,0x55,0x90,0x50,0x12,0x11,0xFF,0x10,0x10,0x10,0x92,0x10,0xFE,0x10,0x82},
{0xBA,0x70,0x00,0x00,0x1B,0x18,0x76,0x10,0x12,0x91,0x7F,0xDF,0x12,0x11,0x3F,0xA6,0x12,0xA4,0x7F,0xC4,0x12,0x84,0x3F,0x8C,0x12,0x0A,0x33,0x0A,0x52,0x92,0x52,0x92,0x12,0x21},
{0xBA,0x71,0x00,0x00,0x02,0x30,0x7F,0x20,0x02,0x22,0x3A,0x3F,0x2A,0x42,0x3A,0x44,0x06,0x98,0x00,0x10,0x7F,0x90,0x02,0x38,0x3A,0x28,0x2A,0x24,0x3A,0x44,0x02,0x42,0x06,0x81},
{0xBA,0x72,0x00,0x00,0x10,0x08,0x1F,0xFC,0x20,0x00,0x4F,0xF0,0x00,0x00,0x3F,0xF8,0x12,0x48,0x12,0x48,0x15,0x48,0x1F,0xC8,0x00,0x0D,0x3F,0xE5,0x25,0x25,0x25,0x23,0x7F,0xF9},
{0xBA,0x73,0x00,0x00,0x20,0x24,0x13,0xFE,0x10,0x88,0x40,0x52,0x23,0xFF,0x28,0x00,0x09,0xFC,0x11,0x04,0x11,0xFC,0x61,0x04,0x21,0xFC,0x20,0x20,0x67,0xFF,0x60,0x20,0x20,0x20},
{0xBA,0x74,0x00,0x00,0x20,0x30,0x12,0x22,0x13,0xFF,0x42,0x02,0x24,0x04,0x23,0xFE,0x08,0x20,0x0B,0xFE,0x12,0x22,0x13,0xFE,0x62,0x22,0x23,0xFE,0x60,0x88,0x61,0x06,0x26,0x02},
{0xBA,0x75,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x41,0x04,0x23,0xFE,0x25,0x05,0x09,0x04,0x09,0xFC,0x10,0x60,0x10,0x96,0x61,0x94,0x26,0x88,0x60,0xE8,0x63,0x84,0x21,0x03},
{0xBA,0x76,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x00,0x25,0x54,0x29,0x24,0x09,0x54,0x11,0xFC,0x10,0x20,0x62,0x22,0x27,0xFF,0x22,0x52,0x62,0xEA,0x62,0x42,0x22,0x06},
{0xBA,0x77,0x00,0x00,0x20,0x30,0x10,0x24,0x13,0xFE,0x40,0x88,0x22,0x52,0x2B,0xFF,0x0A,0x22,0x12,0xFA,0x12,0x22,0x62,0xFA,0x22,0x8A,0x22,0xFA,0x62,0x02,0x62,0x0E,0x22,0x04},
{0xBA,0x78,0x00,0x00,0x43,0x30,0x22,0x20,0x22,0x22,0x0F,0xBF,0x44,0x40,0x24,0x42,0x2F,0xBF,0x14,0x8A,0x14,0x88,0x14,0xA8,0x64,0xAE,0x24,0xA8,0x68,0xA8,0x6B,0xD8,0x29,0x47},
{0xBA,0x79,0x00,0x00,0x21,0x8C,0x10,0x50,0x13,0xFF,0x40,0x20,0x25,0xFE,0x28,0x20,0x0B,0xFF,0x10,0x40,0x11,0xE0,0x60,0x26,0x23,0x34,0x20,0xE8,0x67,0x24,0x62,0x23,0x20,0x60},
{0xBA,0x7A,0x00,0x00,0x20,0x48,0x13,0xFF,0x10,0x48,0x40,0x00,0x25,0xFE,0x29,0x02,0x09,0xFE,0x11,0x02,0x11,0xFE,0x60,0x20,0x27,0xFF,0x20,0x20,0x60,0x50,0x61,0x8C,0x26,0x03},
{0xBA,0x7B,0x00,0x00,0x20,0x20,0x13,0xFE,0x10,0x20,0x41,0xFC,0x28,0x20,0x2F,0xFF,0x09,0x04,0x11,0xFC,0x11,0x04,0x61,0xFC,0x21,0x04,0x21,0xFC,0x60,0x88,0x61,0x06,0x06,0x02},
{0xBA,0x7C,0x00,0x00,0x22,0x04,0x13,0xFE,0x12,0x04,0x43,0xFC,0x26,0x00,0x2A,0x02,0x0A,0xFF,0x12,0x10,0x12,0xFF,0x62,0xD9,0x22,0xB5,0x22,0x91,0x64,0xD9,0x64,0xB5,0x24,0x93},
{0xBA,0x7D,0x00,0x00,0x20,0x02,0x17,0xFF,0x10,0x50,0x43,0xFE,0x22,0x52,0x2B,0xFE,0x08,0x00,0x11,0xFC,0x10,0x00,0x67,0xFF,0x20,0x20,0x21,0xA4,0x62,0x23,0x64,0xE1,0x20,0x40},
{0xBA,0x7E,0x00,0x00,0x20,0x88,0x17,0xFF,0x10,0x88,0x40,0xF8,0x24,0x00,0x29,0xFC,0x09,0x24,0x11,0xFC,0x10,0x20,0x63,0xFE,0x20,0x20,0x27,0xFF,0x60,0x50,0x61,0x88,0x26,0x07},
{0xBA,0xA1,0x00,0x00,0x20,0xCC,0x10,0x88,0x17,0xFF,0x40,0x88,0x24,0xF8,0x28,0xA8,0x08,0x20,0x17,0xFF,0x14,0x21,0x67,0x39,0x25,0x29,0x26,0xB5,0x66,0x73,0x64,0x21,0x24,0x23},
{0xBA,0xA2,0x00,0x00,0x21,0x54,0x11,0x54,0x17,0xFF,0x41,0x54,0x21,0x75,0x2A,0x53,0x08,0x00,0x13,0xFF,0x12,0x22,0x65,0xFC,0x21,0x24,0x21,0x24,0x61,0x3C,0x61,0x28,0x20,0x20},
{0xBA,0xA3,0x00,0x00,0x20,0x30,0x10,0x22,0x17,0xFF,0x40,0x68,0x20,0xA6,0x2B,0x22,0x08,0x70,0x11,0x8C,0x16,0x33,0x60,0x20,0x23,0x36,0x20,0xE8,0x67,0x26,0x62,0x22,0x20,0x60},
{0xBA,0xA4,0x00,0x00,0x21,0x8C,0x11,0x08,0x17,0xD1,0x41,0x1F,0x27,0xD1,0x25,0x62,0x0D,0x48,0x17,0xC8,0x11,0x08,0x23,0x08,0x65,0x94,0x25,0x54,0x29,0x24,0x61,0x22,0x21,0x41},
{0xBA,0xA5,0x00,0x00,0x21,0x93,0x11,0x1C,0x17,0xD0,0x41,0x10,0x27,0xD0,0x2D,0x5F,0x17,0xD2,0x15,0x52,0x17,0xD2,0x65,0x52,0x21,0x12,0x2F,0xF2,0x61,0x12,0x61,0x22,0x21,0x22},
{0xBA,0xA6,0x00,0x00,0x20,0xA0,0x17,0xBE,0x10,0xA0,0x42,0xBE,0x23,0xA0,0x2A,0xBE,0x0A,0x20,0x14,0xFF,0x17,0xA8,0x64,0xAB,0x20,0xA4,0x20,0xA4,0x60,0xAA,0x67,0x72,0x22,0x21},
{0xBA,0xA7,0x00,0x00,0x22,0x0C,0x11,0x08,0x11,0x7F,0x40,0x08,0x22,0x3E,0x29,0x2A,0x09,0x3E,0x10,0x2A,0x17,0x3E,0x61,0x08,0x21,0x7F,0x21,0x08,0x62,0x88,0x62,0x60,0x24,0x1F},
{0xBA,0xA8,0x00,0x00,0x20,0x50,0x17,0xFF,0x10,0x50,0x43,0xFE,0x26,0x52,0x2B,0xFE,0x0A,0x52,0x13,0xFE,0x10,0x00,0x61,0xFC,0x21,0x04,0x21,0xFC,0x61,0x04,0x61,0xFC,0x21,0x04},
{0xBA,0xA9,0x00,0x00,0x20,0xFC,0x10,0x84,0x10,0xFC,0x44,0x84,0x24,0xFC,0x28,0x00,0x0B,0xFF,0x12,0x49,0x13,0xFF,0x60,0x00,0x21,0xFE,0x20,0x84,0x60,0x78,0x60,0x8C,0x27,0x03},
{0xBA,0xAA,0x00,0x00,0x23,0xFE,0x12,0x22,0x13,0xFE,0x42,0x22,0x2B,0xFE,0x2A,0x62,0x08,0x40,0x11,0x98,0x10,0x50,0x60,0x22,0x27,0xFD,0x22,0x21,0x60,0xA4,0x63,0x23,0x20,0x20},
{0xBA,0xAB,0x00,0x00,0x21,0x18,0x17,0xD0,0x12,0x10,0x42,0x92,0x27,0xDF,0x2A,0x52,0x08,0x12,0x17,0xEA,0x14,0x4A,0x67,0xC4,0x24,0x44,0x27,0xCA,0x64,0x4A,0x65,0xC9,0x24,0x91},
{0xBA,0xAC,0x00,0x00,0x49,0x8C,0x25,0x08,0x22,0x7F,0x05,0x14,0x49,0x12,0x20,0xA2,0x28,0xFF,0x09,0x82,0x12,0xBA,0x12,0xAA,0x64,0xAA,0x20,0xBA,0x21,0x02,0x67,0x0E,0x22,0x04},
{0xBA,0xAD,0x00,0x00,0x24,0x3C,0x17,0xC0,0x14,0x00,0x47,0xFE,0x24,0x02,0x27,0xFE,0x0D,0x04,0x15,0xFC,0x14,0x00,0x65,0xFC,0x25,0x24,0x25,0xFC,0x69,0x01,0x69,0x01,0x28,0xFE},
{0xBA,0xAE,0x00,0x00,0x20,0xC0,0x10,0x88,0x10,0xFC,0x41,0x10,0x2A,0x22,0x2F,0xFF,0x0A,0x22,0x13,0xFE,0x12,0x22,0x63,0xFE,0x22,0x02,0x20,0x00,0x62,0x92,0x62,0x49,0x24,0x49},
{0xBA,0xAF,0x00,0x00,0x20,0x30,0x10,0x44,0x11,0xFA,0x44,0x84,0x25,0x4A,0x2B,0xAD,0x08,0x30,0x11,0xCC,0x16,0x33,0x60,0xC0,0x23,0x18,0x20,0x60,0x61,0x8C,0x60,0x30,0x21,0xC0},
{0xBA,0xB0,0x00,0x00,0x21,0x98,0x11,0x12,0x12,0x1F,0x02,0xA2,0x46,0xD4,0x2A,0x88,0x22,0x94,0x0A,0xE3,0x12,0x88,0x12,0xBE,0x62,0x98,0x22,0x2C,0x62,0x2A,0x62,0x49,0x22,0x08},
{0xBA,0xB1,0x00,0x00,0x20,0x60,0x10,0x42,0x10,0x7F,0x44,0x40,0x27,0xFF,0x2C,0x41,0x0D,0x2D,0x14,0xD1,0x16,0x25,0x65,0x53,0x25,0x49,0x24,0xA5,0x65,0x15,0x67,0xFF,0x24,0x01},
{0xBA,0xB2,0x00,0x00,0x18,0x30,0x11,0x22,0x11,0xFF,0x15,0x02,0x16,0x68,0x58,0x86,0x51,0x32,0x50,0x68,0x10,0x84,0x1B,0xFE,0x14,0x85,0x24,0x84,0x24,0x84,0x20,0xFC,0x40,0x84},
{0xBA,0xB3,0x00,0x00,0x42,0x44,0x7F,0x7E,0x44,0x44,0x44,0x44,0x5F,0x44,0x51,0x7C,0x51,0x40,0x5F,0x42,0x44,0x42,0x44,0x43,0x7F,0x3E,0x40,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xBA,0xB4,0x00,0x00,0x1B,0xFE,0x12,0x00,0x13,0xFE,0x56,0x02,0x5B,0xFE,0x52,0x00,0x53,0xEF,0x12,0x63,0x12,0xA5,0x33,0x29,0x2A,0x63,0x2A,0xA5,0x45,0x29,0x44,0xE7,0x04,0x42},
{0xBA,0xB5,0x00,0x00,0x0C,0x20,0x11,0x2C,0x7E,0xB1,0x00,0xA1,0x3F,0x1F,0x21,0x00,0x3F,0x20,0x21,0x2C,0x3F,0x31,0x21,0x21,0x23,0x1F,0x00,0x00,0x24,0x44,0x22,0x22,0x42,0x22},
{0xBA,0xB6,0x00,0x00,0x18,0x10,0x10,0xA2,0x10,0xFF,0x16,0x82,0x54,0xFE,0x58,0x82,0x50,0xFE,0x10,0x82,0x18,0xFE,0x14,0x82,0x24,0x20,0x22,0x92,0x22,0x91,0x44,0x85,0x00,0x7C},
{0xBA,0xB7,0x00,0x00,0x04,0x10,0x15,0x56,0x16,0x58,0x25,0x14,0x09,0x24,0x28,0x42,0x3F,0xFF,0x20,0x02,0x40,0xC0,0x08,0x8C,0x08,0x90,0x31,0x40,0x02,0x20,0x0C,0x18,0x30,0x07},
{0xBA,0xB8,0x00,0x00,0x00,0x02,0x7F,0xFF,0x18,0x84,0x10,0x82,0x3F,0xFD,0x52,0x95,0x1A,0xD4,0x14,0xA4,0x1A,0xD4,0x10,0x84,0x1A,0xD4,0x14,0xA4,0x1A,0xD4,0x12,0x94,0x10,0x8C},
{0xBA,0xB9,0x00,0x00,0x0C,0x30,0x08,0x22,0x29,0xFF,0x3E,0x00,0x28,0xFC,0x48,0x84,0x48,0xFC,0x0A,0x00,0x0D,0xFF,0x39,0x01,0x29,0x79,0x09,0x49,0x09,0x79,0x09,0x07,0x09,0x02},
{0xBA,0xBA,0x00,0x00,0x04,0x10,0x15,0x56,0x26,0x58,0x05,0x14,0x09,0x24,0x10,0x42,0x3F,0xFF,0x20,0x02,0x48,0x94,0x0F,0xF8,0x30,0x80,0x00,0x84,0x3F,0xFE,0x00,0x80,0x00,0x80},
{0xBA,0xBB,0x00,0x00,0x48,0x84,0x2B,0xC5,0x10,0x05,0x17,0xE4,0x28,0x1F,0x4B,0xC4,0x08,0x04,0x1B,0xC4,0x28,0x0A,0x2B,0xCA,0x4A,0x4A,0x0A,0x4A,0x13,0xD1,0x72,0x51,0x20,0x21},
{0xBA,0xBC,0x00,0x00,0x46,0x10,0x24,0xFE,0x18,0x44,0x10,0x28,0x29,0xFF,0x48,0x00,0x0C,0xFE,0x14,0x82,0x14,0xFE,0x24,0x82,0x44,0xFE,0x04,0x10,0x45,0xFF,0x38,0x10,0x10,0x10},
{0xBA,0xBD,0x00,0x00,0x00,0x60,0x08,0x44,0x7C,0x7E,0x10,0xA4,0x13,0x28,0x10,0x90,0x7C,0xA4,0x10,0x7E,0x11,0x90,0x14,0x12,0x19,0xFF,0x70,0x10,0x20,0x92,0x00,0xFE,0x00,0x82},
{0xBA,0xBE,0x00,0x00,0x00,0x10,0x08,0xD4,0x7C,0x93,0x11,0x11,0x12,0xFE,0x10,0x82,0x7C,0xFE,0x10,0x82,0x10,0xFE,0x10,0x82,0x1C,0x82,0x70,0xFE,0x20,0x44,0x00,0x83,0x03,0x01},
{0xBA,0xBF,0x00,0x00,0x09,0x04,0x7D,0xFE,0x11,0x20,0x11,0xFC,0x11,0x20,0x7D,0xFC,0x11,0x20,0x11,0x22,0x15,0xFF,0x19,0x2A,0x70,0x96,0x22,0x52,0x02,0x42,0x04,0x1C,0x00,0x08},
{0xBA,0xC0,0x00,0x00,0x08,0x30,0x7D,0x44,0x11,0xFE,0x11,0x24,0x11,0xFC,0x11,0x24,0x7D,0x24,0x11,0xFC,0x11,0x54,0x14,0x50,0x18,0x54,0x70,0x96,0x20,0x9A,0x01,0x11,0x02,0x0F},
{0xBA,0xC1,0x00,0x00,0x08,0x18,0x7D,0x12,0x11,0xFF,0x11,0x10,0x11,0x7E,0x7D,0x12,0x11,0xFF,0x11,0x12,0x15,0x7E,0x19,0x10,0x71,0x00,0x22,0x7E,0x02,0x42,0x02,0x42,0x04,0x7E},
{0xBA,0xC2,0x00,0x00,0x02,0x02,0x7F,0x7F,0x14,0x20,0x7F,0x20,0x55,0x24,0x67,0x3E,0x41,0x24,0x7F,0x24,0x08,0x34,0x0A,0x54,0x7F,0x54,0x08,0x45,0x0F,0x45,0x78,0xE5,0x20,0x43},
{0xBA,0xC3,0x00,0x00,0x30,0x04,0x26,0xFE,0x38,0x04,0x21,0x68,0x1F,0x10,0x00,0x02,0x24,0xFF,0x3E,0x12,0x48,0x10,0x0A,0x54,0x7F,0x5E,0x14,0x50,0x12,0xB0,0x22,0x98,0x41,0x07},
{0xBA,0xC4,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x20,0x28,0x3E,0x2A,0x20,0x0B,0xFF,0x0A,0x22,0x1A,0xFC,0x6A,0x21,0x4A,0x7E,0x0A,0x40,0x15,0xFF,0x14,0x40,0x24,0x7E},
{0xBA,0xC5,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x49,0x08,0x29,0xF8,0x29,0x08,0x09,0xF8,0x08,0x02,0x1F,0xFF,0x69,0x00,0x4B,0xFE,0x0C,0x4A,0x11,0x92,0x16,0x62,0x21,0x8C},
{0xBA,0xC6,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x00,0x2B,0xFC,0x2A,0x04,0x0B,0xF4,0x0A,0x44,0x1B,0xF4,0x6A,0x54,0x4B,0xF5,0x0A,0x45,0x12,0x55,0x15,0xEB,0x24,0x89},
{0xBA,0xC7,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x20,0x28,0x50,0x29,0x8C,0x0E,0x73,0x08,0x00,0x1B,0xDB,0x6A,0x52,0x4B,0xD2,0x0A,0x52,0x13,0xC2,0x12,0x4E,0x22,0xC4},
{0xBA,0xC8,0x00,0x00,0x00,0x60,0x08,0x42,0x0F,0xFF,0x48,0x80,0x28,0xF8,0x28,0x90,0x09,0x20,0x0B,0xFC,0x19,0x24,0x69,0x54,0x49,0x24,0x0F,0xFF,0x10,0x50,0x11,0x88,0x26,0x07},
{0xBA,0xC9,0x00,0x00,0x00,0x80,0x1F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x1F,0xFE,0x00,0x80,0x7F,0xFE,0x24,0x44,0x22,0x23,0x40,0x01,0x1F,0xFC,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xBA,0xCA,0x00,0x00,0x42,0x30,0x7F,0x20,0x48,0x24,0x7F,0x3E,0x41,0x40,0x7F,0x40,0x48,0x84,0x48,0x3E,0x7F,0x00,0x40,0x00,0x1F,0xFC,0x12,0x24,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xBA,0xCB,0x00,0x00,0x00,0xCC,0x48,0x88,0x7B,0xFF,0x48,0x88,0x48,0x88,0x7A,0x02,0x4B,0xFF,0x4A,0x22,0x7A,0x22,0x4B,0xFE,0x4A,0x22,0x7A,0x22,0x4A,0x22,0x43,0xFE,0x02,0x02},
{0xBA,0xCC,0x00,0x00,0x00,0x20,0x4B,0xEC,0x7A,0x50,0x49,0x56,0x48,0x88,0x79,0x04,0x4A,0x0B,0x4D,0xFC,0x78,0x20,0x48,0x24,0x4B,0xFE,0x78,0x50,0x48,0x48,0x40,0x86,0x03,0x02},
{0xBA,0xCD,0x00,0x00,0x01,0x80,0x21,0x02,0x3F,0xFF,0x20,0x02,0x5F,0xFC,0x01,0x88,0x12,0x66,0x64,0x12,0x0F,0xF8,0x18,0x16,0x6F,0xF0,0x08,0x10,0x0F,0xF0,0x08,0x10,0x0F,0xF0},
{0xBA,0xCE,0x00,0x00,0x00,0x0C,0x48,0x3E,0x7B,0xE0,0x48,0x20,0x48,0x22,0x7B,0xFF,0x49,0x24,0x49,0x24,0x7B,0xFF,0x49,0x24,0x49,0x24,0x7B,0xFF,0x48,0x20,0x40,0x24,0x01,0xFE},
{0xBA,0xCF,0x00,0x00,0x04,0x86,0x7E,0x44,0x10,0x48,0x13,0xFF,0x10,0x00,0x20,0xC6,0x3C,0x84,0x65,0x29,0x24,0xC6,0x24,0x42,0x24,0x84,0x3C,0xC6,0x25,0xAD,0x21,0x29,0x00,0x00},
{0xBA,0xD0,0x00,0x00,0x04,0xD4,0x7E,0x94,0x11,0xFF,0x10,0x94,0x10,0x9C,0x24,0x80,0x3E,0xFF,0x64,0x80,0x24,0x12,0x25,0xFF,0x24,0x30,0x3C,0x58,0x24,0x54,0x21,0x93,0x00,0x10},
{0xBA,0xD1,0x00,0x00,0x02,0x0C,0x7F,0x10,0x08,0x7E,0x7F,0x42,0x08,0x7E,0x0F,0x42,0x78,0x7E,0x00,0x00,0x7F,0xFF,0x04,0x00,0x0F,0xFC,0x18,0x04,0x68,0x04,0x0F,0xFC,0x08,0x04},
{0xBA,0xD2,0x00,0x00,0x04,0x18,0x7E,0xD3,0x10,0x92,0x10,0xFE,0x10,0x00,0x24,0x82,0x3E,0xFF,0x64,0x80,0x24,0x88,0x24,0xAB,0x24,0xAC,0x3D,0x48,0x25,0x14,0x21,0x12,0x02,0x61},
{0xBA,0xD3,0x00,0x00,0x04,0x02,0x7E,0xFF,0x10,0x10,0x10,0xA2,0x10,0xFF,0x24,0x82,0x3E,0xFE,0x64,0x82,0x24,0xFE,0x24,0x82,0x24,0xFE,0x3C,0x82,0x24,0x34,0x20,0x43,0x01,0x81},
{0xBA,0xD4,0x00,0x00,0x09,0x08,0x7D,0xFC,0x11,0x08,0x11,0xF8,0x11,0x08,0x25,0xF8,0x3C,0x82,0x65,0xFF,0x27,0x22,0x25,0x52,0x25,0x8A,0x3D,0xFA,0x25,0x02,0x20,0x1C,0x00,0x08},
{0xBA,0xD5,0x00,0x00,0x04,0x18,0x3E,0x12,0x00,0x1F,0x04,0x10,0x7E,0xFE,0x08,0x82,0x08,0xFE,0x2A,0x82,0x2A,0xFE,0x2A,0x82,0x2A,0x82,0x4A,0xFE,0x48,0x24,0x08,0x43,0x09,0x81},
{0xBA,0xD6,0x00,0x00,0x04,0x02,0x3E,0xFF,0x00,0x00,0x02,0x7E,0x7F,0x42,0x08,0x7E,0x08,0x42,0x2A,0x00,0x2A,0xFF,0x2A,0x91,0x2A,0xFF,0x4A,0x91,0x48,0x91,0x08,0xFF,0x08,0x81},
{0xBA,0xD7,0x00,0x00,0x04,0x44,0x3E,0x7E,0x00,0x44,0x02,0x5C,0x7F,0x54,0x08,0x54,0x08,0xFF,0x2A,0x81,0x2A,0xBD,0x2A,0xA5,0x2A,0xA5,0x4A,0xBD,0x48,0xA5,0x08,0x87,0x08,0x82},
{0xBA,0xD8,0x00,0x00,0x0E,0x1E,0x78,0xF0,0x08,0x12,0x09,0xFF,0x7E,0x10,0x08,0xFE,0x18,0x92,0x1C,0xFE,0x2A,0x92,0x2A,0xFE,0x48,0x10,0x08,0xFE,0x08,0x10,0x08,0x12,0x09,0xFF},
{0xBA,0xD9,0x00,0x00,0x0E,0x1F,0x78,0xF2,0x08,0x89,0x09,0x19,0x7E,0x10,0x08,0xFE,0x18,0x92,0x1C,0xFE,0x2A,0x92,0x2A,0x92,0x49,0xFF,0x08,0x82,0x08,0x82,0x08,0x8E,0x08,0x84},
{0xBA,0xDA,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x21,0x22,0x46,0x25,0x18,0x1F,0x20,0x20,0x15,0xFC,0x44,0x20,0x2B,0xFE,0x08,0x00,0x70,0x20,0x11,0xFC,0x30,0x20,0x17,0xFF},
{0xBA,0xDB,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x22,0x12,0x4C,0x15,0x37,0xFF,0x04,0x10,0x04,0xF0,0x24,0x92,0x3F,0xFF,0x20,0x02,0x27,0xF2,0x24,0x12,0x27,0xF2,0x20,0x06},
{0xBA,0xDC,0x00,0x00,0x19,0x08,0x11,0xFC,0x11,0x08,0x7D,0xF8,0x01,0x08,0x4D,0xF8,0x48,0x82,0x49,0xFF,0x4B,0x22,0x11,0x52,0x11,0x8A,0x0D,0xFA,0x71,0x02,0x20,0x1C,0x00,0x08},
{0xBA,0xDD,0x00,0x00,0x18,0x18,0x10,0xD3,0x10,0x92,0x7C,0xFE,0x00,0x82,0x4C,0x00,0x49,0xFF,0x48,0x10,0x49,0x21,0x11,0xFF,0x11,0x29,0x0D,0x29,0x71,0x29,0x21,0x29,0x01,0x03},
{0xBA,0xDE,0x00,0x00,0x10,0x10,0x1F,0x1F,0x24,0x28,0x42,0xC6,0x20,0x80,0x3F,0xFF,0x20,0x02,0x4F,0xF4,0x08,0x10,0x0F,0xF0,0x08,0x00,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08},
{0xBA,0xDF,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x04,0x10,0x3F,0xFE,0x04,0x10,0x07,0xF0,0x04,0x10,0x07,0xF0,0x04,0x12,0x7F,0xFF,0x02,0x08,0x0C,0x06,0x30,0x02},
{0xBA,0xE0,0x00,0x00,0x10,0x10,0x1F,0x1F,0x24,0x24,0x42,0x42,0x01,0x10,0x1F,0xFC,0x00,0x8D,0x00,0x71,0x1F,0x8F,0x02,0x20,0x7F,0xFC,0x01,0x30,0x00,0xC1,0x07,0x31,0x78,0x0F},
{0xBA,0xE1,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x00,0x00,0x78,0x1E,0x09,0xF0,0x10,0x14,0x3C,0xDE,0x04,0x90,0x34,0x90,0x29,0xFE,0x48,0x00,0x16,0x03,0x61,0xFC},
{0xBA,0xE2,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x02,0x22,0x7F,0xFF,0x04,0x20,0x38,0x20},
{0xBA,0xE3,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x0C,0x44,0x08,0x44,0x7E,0xFF,0x08,0x44,0x0A,0x44,0x0C,0x7C,0x78,0x44,0x28,0x44,0x08,0x44,0x38,0x7C,0x10,0x44},
{0xBA,0xE4,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x20,0x30,0x11,0x44,0x45,0xFE,0x25,0x04,0x09,0x04,0x09,0xFC,0x71,0x04,0x11,0x04,0x31,0x04,0x31,0xFC,0x11,0x04},
{0xBA,0xE5,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x00,0xF8,0x1F,0x84,0x10,0x43,0x2F,0xF9,0x00,0x88,0x7F,0xFF,0x00,0x88,0x1F,0xF8,0x00,0x80,0x00,0x80,0x03,0x80},
{0xBA,0xE6,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x01,0x00,0x1F,0xE6,0x01,0x18,0x7F,0xFF,0x02,0x40,0x07,0xF8,0x1C,0x08,0x67,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08},
{0xBA,0xE7,0x00,0x00,0x10,0x20,0x1F,0x3F,0x24,0x48,0x42,0x86,0x20,0x00,0x3F,0xFE,0x21,0x04,0x2F,0xF4,0x21,0x04,0x27,0xE4,0x24,0x24,0x27,0xE4,0x20,0x04,0x3F,0xFC,0x20,0x04},
{0xBA,0xE8,0x00,0x00,0x10,0x10,0x1F,0x1F,0x28,0x28,0x46,0xC6,0x01,0x00,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x11,0x04,0x1F,0xFC,0x02,0x00,0x04,0x42,0x7F,0xFF,0x00,0x40,0x00,0x40},
{0xBA,0xE9,0x00,0x00,0x0C,0x18,0x08,0x12,0x4A,0xFF,0x2A,0x00,0x2C,0x66,0x08,0x44,0x7E,0xAA,0x18,0x91,0x19,0x00,0x2C,0x12,0x2B,0xFF,0x4A,0x10,0x08,0x10,0x08,0x10,0x08,0x10},
{0xBA,0xEA,0x00,0x00,0x0C,0x18,0x08,0x92,0x4A,0xFF,0x2A,0x82,0x2D,0x04,0x08,0x7C,0x7E,0x00,0x18,0x02,0x1C,0xFF,0x2A,0x10,0x2A,0xD4,0x48,0x92,0x09,0x13,0x08,0x71,0x08,0x20},
{0xBA,0xEB,0x00,0x00,0x0C,0x10,0x08,0xFE,0x4A,0x10,0x2A,0xFE,0x2C,0x10,0x09,0xFF,0x7E,0x00,0x18,0xFE,0x18,0x92,0x2C,0x92,0x2A,0xFE,0x4A,0x82,0x08,0x82,0x08,0x8E,0x08,0x84},
{0xBA,0xEC,0x00,0x00,0x18,0x18,0x10,0x92,0x20,0xFF,0x6C,0x82,0x19,0x04,0x10,0xFE,0x2C,0x10,0x74,0x10,0x50,0xD4,0x18,0x9E,0x54,0x90,0x54,0x90,0x51,0x70,0x11,0x18,0x12,0x07},
{0xBA,0xED,0x00,0x00,0x18,0x30,0x11,0x22,0x21,0xFF,0x6D,0x02,0x1A,0xFC,0x10,0x84,0x2C,0x84,0x74,0xFC,0x50,0x84,0x18,0x80,0x54,0xFE,0x54,0x82,0x50,0x82,0x10,0xFE,0x10,0x82},
{0xBA,0xEE,0x00,0x00,0x18,0x18,0x10,0x92,0x20,0xFF,0x6C,0x82,0x19,0x04,0x10,0x7C,0x2C,0x00,0x74,0x02,0x51,0xFF,0x18,0x10,0x54,0xD4,0x54,0x92,0x50,0x93,0x11,0x71,0x10,0x20},
{0xBA,0xEF,0x00,0x00,0x18,0x12,0x10,0x1F,0x20,0x10,0x6C,0x92,0x18,0xFF,0x10,0x82,0x2C,0xFE,0x74,0x82,0x50,0xFE,0x18,0x92,0x54,0x10,0x55,0xFF,0x50,0x10,0x10,0x10,0x10,0x10},
{0xBA,0xF0,0x00,0x00,0x18,0x10,0x10,0xFE,0x20,0x10,0x6D,0xFF,0x18,0x48,0x10,0x89,0x2D,0x37,0x74,0x20,0x50,0x7E,0x18,0x42,0x55,0xA4,0x54,0x28,0x50,0x18,0x10,0x64,0x13,0x83},
{0xBA,0xF1,0x00,0x00,0x18,0x24,0x10,0x3E,0x20,0x44,0x6C,0xF8,0x18,0x0A,0x11,0xFF,0x2C,0x10,0x74,0x93,0x50,0x54,0x18,0x38,0x54,0x54,0x55,0x94,0x51,0x13,0x10,0x71,0x10,0x20},
{0xBA,0xF2,0x00,0x00,0x3F,0x02,0x24,0x7F,0x3F,0x22,0x21,0x14,0x3F,0x18,0x24,0x14,0x3F,0x64,0x20,0x83,0x07,0x30,0x01,0x40,0x00,0x84,0x3F,0xFB,0x00,0x81,0x0C,0x98,0x30,0x86},
{0xBA,0xF3,0x00,0x00,0x18,0x42,0x13,0xDF,0x20,0x42,0x6D,0x4A,0x18,0x84,0x11,0x6B,0x2D,0x29,0x74,0x00,0x51,0xEF,0x18,0x21,0x54,0xAA,0x54,0x44,0x50,0xAA,0x10,0xAA,0x11,0x11},
{0xBA,0xF4,0x00,0x00,0x19,0x01,0x11,0xFF,0x21,0x01,0x6D,0x45,0x19,0x29,0x11,0x7D,0x2D,0x11,0x75,0x7D,0x51,0x21,0x19,0x21,0x55,0x21,0x55,0x1D,0x51,0x01,0x11,0x07,0x11,0x02},
{0xBA,0xF5,0x00,0x00,0x19,0x01,0x11,0xFF,0x21,0x01,0x6D,0x45,0x19,0x29,0x11,0x7D,0x2D,0x11,0x75,0x55,0x51,0x55,0x19,0x55,0x55,0x7D,0x55,0x45,0x51,0x01,0x11,0x07,0x11,0x02},
{0xBA,0xF6,0x00,0x00,0x18,0x30,0x10,0x22,0x21,0xFF,0x6C,0x50,0x18,0x4C,0x10,0x84,0x2D,0xFF,0x74,0x02,0x50,0xFA,0x18,0x8A,0x54,0xFA,0x54,0x8A,0x50,0x02,0x10,0x0E,0x10,0x04},
{0xBA,0xF7,0x00,0x00,0x19,0x02,0x11,0xFF,0x21,0x02,0x6D,0x12,0x19,0x7A,0x11,0x12,0x2D,0x7A,0x75,0x02,0x51,0x7A,0x19,0x4A,0x55,0x7A,0x55,0x4A,0x51,0x02,0x12,0x0E,0x12,0x04},
{0xBA,0xF8,0x00,0x00,0x18,0x10,0x10,0xFC,0x20,0x84,0x6C,0xFC,0x18,0x84,0x10,0xFC,0x2C,0xA4,0x75,0x22,0x51,0xFF,0x19,0x22,0x55,0x22,0x55,0x2E,0x51,0x24,0x10,0x20,0x10,0x20},
{0xBA,0xF9,0x00,0x00,0x18,0x1E,0x10,0xE0,0x20,0x92,0x6C,0x89,0x19,0x09,0x10,0x00,0x2C,0x18,0x74,0x12,0x51,0xFF,0x18,0x30,0x54,0x58,0x54,0x54,0x50,0x93,0x11,0x10,0x10,0x10},
{0xBA,0xFA,0x00,0x00,0x18,0x30,0x10,0x68,0x20,0x48,0x6C,0x84,0x19,0x7A,0x12,0x01,0x2D,0x02,0x75,0xFF,0x51,0x52,0x19,0x52,0x55,0xFE,0x55,0x52,0x51,0x52,0x11,0x5E,0x11,0x04},
{0xBA,0xFB,0x00,0x00,0x18,0x6C,0x10,0x48,0x20,0x92,0x6C,0xFF,0x19,0x88,0x12,0x88,0x2C,0xFE,0x74,0x88,0x50,0x88,0x18,0xFE,0x54,0x88,0x54,0x88,0x50,0x8A,0x10,0xFF,0x10,0x80},
{0xBA,0xFC,0x00,0x00,0x18,0x30,0x10,0x20,0x20,0xFB,0x6C,0x22,0x18,0x24,0x11,0xFF,0x2C,0x20,0x74,0x44,0x50,0xFE,0x1B,0x84,0x54,0xFC,0x54,0x84,0x50,0x84,0x10,0xFC,0x10,0x84},
{0xBA,0xFD,0x00,0x00,0x18,0xDB,0x10,0x92,0x21,0x24,0x6D,0x24,0x18,0x92,0x10,0x92,0x2C,0x00,0x74,0xFE,0x50,0x92,0x18,0x92,0x54,0xFE,0x54,0x92,0x50,0x92,0x10,0xFE,0x10,0x82},
{0xBA,0xFE,0x00,0x00,0x18,0x0E,0x10,0xF0,0x20,0xA3,0x6C,0x92,0x19,0x14,0x10,0xFF,0x2C,0x81,0x75,0x02,0x50,0xFE,0x18,0x42,0x54,0x24,0x54,0x18,0x50,0x28,0x10,0x44,0x11,0x83},
{0xBB,0x40,0x00,0x00,0x3F,0xFE,0x22,0x22,0x22,0x22,0x3F,0xFE,0x00,0x00,0x1F,0x03,0x00,0x1A,0x7F,0xD2,0x00,0x12,0x3F,0x92,0x00,0x12,0x3F,0x92,0x11,0x02,0x1F,0x0E,0x11,0x04},
{0xBB,0x41,0x00,0x00,0x3F,0x7E,0x05,0x0A,0x19,0x32,0x03,0x06,0x05,0x0A,0x18,0x32,0x00,0x80,0x3F,0xFE,0x04,0x08,0x0A,0x14,0x11,0xA2,0x7F,0xFF,0x00,0x80,0x00,0x80,0x00,0x80},
{0xBB,0x42,0x00,0x00,0x02,0x20,0x3E,0x3E,0x02,0x20,0x1E,0x3E,0x03,0x20,0x7E,0x3F,0x04,0x20,0x3F,0x7E,0x05,0x0A,0x09,0x12,0x33,0x66,0x05,0x0A,0x39,0x32,0x07,0x0E,0x02,0x04},
{0xBB,0x43,0x00,0x00,0x3F,0x7E,0x09,0x12,0x33,0x66,0x05,0x0A,0x19,0x32,0x06,0x42,0x04,0x80,0x0F,0xFE,0x18,0x40,0x6F,0xFC,0x08,0x40,0x0F,0xFC,0x08,0x40,0x0F,0xFF,0x08,0x00},
{0xBB,0x44,0x00,0x00,0x21,0x42,0x3F,0x7F,0x21,0x42,0x3F,0x7E,0x21,0x42,0x3F,0x7E,0x20,0x02,0x27,0xF2,0x22,0x22,0x23,0xE2,0x22,0x22,0x23,0xE2,0x22,0x3A,0x2F,0xE2,0x20,0x26},
{0xBB,0x45,0x00,0x00,0x02,0x00,0x7F,0x04,0x22,0x7E,0x3E,0x04,0x22,0x34,0x3E,0x08,0x22,0x16,0x7E,0x22,0x02,0xF0,0x1B,0x80,0x10,0xCC,0x26,0xB0,0x44,0x98,0x08,0x86,0x10,0x80},
{0xBB,0x46,0x00,0x00,0x3F,0x20,0x20,0x3F,0x3F,0x42,0x21,0xA4,0x3F,0x18,0x20,0xA7,0x4F,0xF8,0x00,0x8A,0x7F,0xFF,0x00,0x88,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x00,0x80,0x00,0x80},
{0xBB,0x47,0x00,0x00,0x20,0x42,0x3F,0xFF,0x22,0x04,0x22,0xFF,0x26,0x44,0x2A,0x24,0x22,0x0C,0x20,0x40,0x2F,0xFE,0x28,0xA2,0x2B,0x12,0x28,0x42,0x48,0xA2,0x4B,0x12,0x48,0x06},
{0xBB,0x48,0x00,0x00,0x24,0x18,0x3E,0x10,0x24,0xFE,0x24,0x44,0x3D,0x28,0x25,0xFF,0x26,0x01,0x24,0x22,0x3D,0xFF,0x24,0x40,0x24,0x7C,0x24,0x44,0x44,0x84,0x5C,0xB8,0x49,0x10},
{0xBB,0x49,0x00,0x00,0x00,0x82,0x7F,0xFF,0x04,0x10,0x24,0x12,0x3F,0xFF,0x40,0x02,0x47,0xF4,0x04,0x10,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x18},
{0xBB,0x4A,0x00,0x00,0x24,0x02,0x3D,0xFF,0x24,0x00,0x24,0xFC,0x3C,0x84,0x24,0xFC,0x24,0x84,0x24,0x00,0x3D,0xFF,0x25,0x45,0x25,0x29,0x25,0x7D,0x45,0x11,0x5D,0x17,0x49,0x02},
{0xBB,0x4B,0x00,0x00,0x24,0x26,0x3D,0xFF,0x24,0x20,0x25,0xFE,0x3D,0x22,0x25,0xFE,0x25,0x22,0x25,0xFE,0x3D,0x22,0x24,0x04,0x27,0xFF,0x25,0x04,0x44,0xC4,0x5C,0x1C,0x48,0x08},
{0xBB,0x4C,0x00,0x00,0x25,0x22,0x3C,0xBF,0x24,0xA2,0x24,0x3E,0x3D,0x22,0x24,0xA2,0x24,0xBE,0x24,0x28,0x3D,0xAB,0x24,0xA4,0x24,0xFA,0x24,0xA2,0x44,0xC1,0x5D,0x30,0x49,0x0F},
{0xBB,0x4D,0x00,0x00,0x08,0x40,0x7F,0x7F,0x10,0x8C,0x1F,0x70,0x11,0x4B,0x21,0x4A,0x2E,0xF4,0x44,0x42,0x0F,0xF9,0x08,0x08,0x0F,0xF8,0x08,0x08,0x0F,0xF8,0x08,0x08,0x08,0x18},
{0xBB,0x4E,0x00,0x00,0x00,0x1A,0x20,0x11,0x28,0x10,0x2F,0xFF,0x28,0x10,0x3B,0xD0,0x2A,0x90,0x0B,0xD6,0x2A,0x54,0x3B,0xD4,0x2A,0x89,0x4B,0xC9,0x50,0x15,0x10,0x63,0x21,0x81},
{0xBB,0x4F,0x00,0x00,0x00,0x84,0x3F,0xFE,0x00,0x80,0x0F,0xF8,0x04,0x10,0x24,0x12,0x3F,0xFF,0x20,0x02,0x4F,0xF8,0x02,0x10,0x0F,0xE8,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF},
{0xBB,0x50,0x00,0x00,0x2D,0x02,0x31,0xDF,0x21,0x02,0x29,0x42,0x3D,0xDE,0x20,0x42,0x29,0x42,0x3D,0x5E,0x21,0x42,0x21,0x42,0x7F,0xFF,0x00,0x00,0x06,0x18,0x18,0x06,0x60,0x02},
{0xBB,0x51,0x00,0x00,0x0E,0x1E,0x38,0xF0,0x08,0x10,0x08,0x12,0x0A,0xFF,0x7F,0x24,0x08,0x42,0x08,0x5A,0x2A,0x91,0x3F,0x10,0x22,0x5A,0x22,0x95,0x22,0x95,0x3E,0x70,0x22,0x20},
{0xBB,0x52,0x00,0x00,0x08,0x04,0x1F,0xFE,0x69,0x48,0x09,0x4A,0x7F,0xFF,0x09,0x48,0x3F,0xFE,0x08,0x00,0x09,0x08,0x1F,0x7E,0x11,0x28,0x6A,0x28,0x04,0xFF,0x18,0x08,0x60,0x08},
{0xBB,0x53,0x00,0x00,0x0C,0x04,0x10,0x7E,0x3E,0x04,0x22,0x08,0x32,0xFF,0x2A,0x08,0x2A,0x08,0x23,0x38,0x3E,0x10,0x6A,0x82,0x2A,0xFF,0x2A,0xAA,0x22,0xAA,0x4E,0xAA,0x45,0xFF},
{0xBB,0x54,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4D,0x98,0x11,0x46,0x22,0x22,0x0C,0x18,0x17,0xF7,0x64,0x10,0x04,0x10,0x07,0xF0,0x04,0x10},
{0xBB,0x55,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x82,0x7F,0xFF,0x04,0x10,0x04,0x10,0x07,0xF0,0x20,0x02,0x3F,0xFF,0x20,0x02,0x27,0xE2,0x24,0x22,0x27,0xEE,0x20,0x04},
{0xBB,0x56,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x20,0x82,0x3F,0xFF,0x21,0x10,0x2F,0xFE,0x21,0x10,0x21,0xF0,0x24,0x44,0x27,0xFE,0x24,0x44,0x44,0x5C,0x44,0x48,0x40,0x40},
{0xBB,0x57,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x80,0x3F,0xFE,0x03,0x00,0x0E,0x70,0x01,0x84,0x7F,0xFB,0x20,0x01,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x10,0x84,0x1F,0xFC},
{0xBB,0x58,0x00,0x00,0x04,0x24,0x7F,0xFF,0x04,0x20,0x3F,0xFF,0x20,0x02,0x4F,0xF8,0x00,0x00,0x3F,0xFE,0x03,0x00,0x1C,0x86,0x03,0x68,0x3C,0xD0,0x03,0x4C,0x3C,0x43,0x01,0x80},
{0xBB,0x59,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x20,0xCC,0x10,0x88,0x45,0x7F,0x29,0x00,0x0B,0x00,0x15,0x23,0x11,0x22,0x61,0x12,0x21,0x14,0x21,0x14,0x61,0x04,0x21,0x7F},
{0xBB,0x5A,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x14,0x20,0x22,0x17,0xFF,0x40,0x20,0x2B,0xFE,0x0A,0x22,0x13,0xFE,0x12,0x22,0x63,0xFE,0x22,0x22,0x22,0x22,0x62,0x2E,0x22,0x24},
{0xBB,0x5B,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x04,0x04,0x3E,0x3E,0x00,0x00,0x02,0x02,0x7F,0x7F,0x08,0x08,0x2A,0x2A,0x29,0x2A,0x49,0x49,0x48,0x49,0x38,0xB8,0x10,0x10},
{0xBB,0x5C,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0x80,0x1F,0xFC,0x00,0x80,0x7F,0xFF,0x04,0x08,0x3F,0xF4,0x10,0x04,0x00,0x00,0x1F,0xFC,0x12,0x24,0x12,0x24,0x7F,0xFF},
{0xBB,0x5D,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x1F,0xF0,0x00,0x20,0x04,0xC6,0x3E,0xA8,0x04,0x90,0x08,0x8C,0x73,0x83,0x01,0x00,0x1F,0xF8,0x24,0x44,0x22,0x22,0x42,0x22},
{0xBB,0x5E,0x00,0x00,0x04,0x22,0x7F,0xFF,0x00,0x00,0x04,0x0E,0x7E,0xF8,0x04,0x10,0x08,0x66,0x0A,0x18,0x0C,0x22,0x19,0xFD,0x68,0x11,0x48,0xD4,0x08,0x93,0x39,0x11,0x10,0x10},
{0xBB,0x5F,0x00,0x00,0x02,0x22,0x7F,0xFF,0x02,0x20,0x0C,0x10,0x0B,0xFE,0x11,0x04,0x18,0x84,0x30,0x88,0x57,0xFF,0x10,0x00,0x11,0xFC,0x11,0x04,0x11,0x04,0x11,0xFC,0x11,0x04},
{0xBB,0x60,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x00,0xC0,0x11,0x08,0x1F,0xFC,0x11,0x08,0x1F,0xF8,0x11,0x08,0x1F,0xF8,0x12,0x40,0x02,0x52,0x04,0x7A,0x18,0x43,0x60,0x3E},
{0xBB,0x61,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x10,0x01,0xC0,0x02,0x30,0x05,0xEC,0x18,0x03,0x67,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08,0x07,0xFC,0x0A,0x04,0x0A,0x04,0x13,0xFC},
{0xBB,0x62,0x00,0x00,0x04,0x12,0x7F,0xFF,0x04,0x90,0x3F,0xFE,0x00,0x00,0x0F,0xF8,0x08,0x0A,0x7F,0xFF,0x08,0x08,0x0F,0xF8,0x02,0x46,0x1C,0x28,0x65,0x90,0x0E,0x0C,0x04,0x03},
{0xBB,0x63,0x00,0x00,0x04,0x22,0x7F,0xFF,0x04,0x20,0x06,0x70,0x19,0x08,0x62,0x27,0x0F,0xD0,0x00,0x00,0x7F,0x7E,0x05,0x0A,0x09,0x12,0x33,0x66,0x0D,0x1A,0x31,0x62,0x06,0x0C},
{0xBB,0x64,0x00,0x00,0x18,0x18,0x11,0x12,0x55,0xFF,0x7D,0x02,0x56,0xC4,0x54,0x80,0x54,0xEE,0x7C,0xAA,0x55,0x2A,0x11,0xAE,0x12,0x4A,0x18,0x48,0x74,0x89,0x24,0x89,0x01,0x06},
{0xBB,0x65,0x00,0x00,0x00,0xC0,0x20,0x82,0x3F,0xFF,0x21,0x02,0x44,0xB4,0x14,0xC2,0x67,0x12,0x1B,0xF0,0x60,0x80,0x1F,0xFC,0x10,0x84,0x1F,0xFC,0x00,0x88,0x7F,0xF6,0x20,0x02},
{0xBB,0x66,0x00,0x00,0x18,0x10,0x11,0xFF,0x54,0x10,0x7E,0xFE,0x54,0x10,0x55,0xFF,0x54,0x00,0x7C,0xFE,0x54,0x92,0x10,0x92,0x14,0xFE,0x1A,0x82,0x72,0x82,0x20,0x8E,0x00,0x84},
{0xBB,0x67,0x00,0x00,0x18,0x04,0x10,0xFE,0x54,0x04,0x7E,0x18,0x54,0x12,0x55,0xFF,0x54,0x10,0x7C,0x70,0x54,0x00,0x10,0xFE,0x14,0xAA,0x1A,0xAA,0x72,0xAA,0x20,0xAA,0x01,0xFF},
{0xBB,0x68,0x00,0x00,0x18,0x63,0x10,0x4C,0x54,0x48,0x7D,0xF8,0x54,0x48,0x54,0xCF,0x54,0xCA,0x7D,0x6A,0x55,0x5A,0x11,0x4A,0x14,0x4A,0x1A,0x4A,0x72,0x4A,0x20,0x52,0x00,0x52},
{0xBB,0x69,0x00,0x00,0x19,0x08,0x11,0xFC,0x11,0x08,0x55,0xF8,0x7D,0x08,0x55,0xF8,0x55,0x48,0x54,0x82,0x7C,0xFF,0x55,0x4A,0x12,0x4A,0x18,0x92,0x75,0x22,0x24,0x5C,0x00,0x08},
{0xBB,0x6A,0x00,0x00,0x19,0x80,0x11,0x00,0x11,0x09,0x55,0xEF,0x7D,0x49,0x55,0x49,0x56,0x49,0x55,0xE9,0x7C,0x49,0x54,0x49,0x10,0xA9,0x14,0x99,0x7A,0x8F,0x21,0x09,0x02,0x00},
{0xBB,0x6B,0x00,0x00,0x0C,0x18,0x0A,0x10,0x12,0x10,0x1C,0x92,0x20,0xFF,0x7E,0x92,0x22,0x92,0x3E,0x92,0x22,0xFE,0x3E,0x92,0x20,0x10,0x3E,0x14,0x20,0x1A,0x3E,0xF2,0x20,0x42},
{0xBB,0x6C,0x00,0x00,0x18,0x30,0x10,0xA4,0x10,0xA2,0x55,0x23,0x7E,0xFD,0x54,0x48,0x57,0xFF,0x54,0x84,0x7C,0x82,0x55,0x79,0x12,0x48,0x18,0x4A,0x74,0x52,0x24,0x43,0x00,0x3E},
{0xBB,0x6D,0x00,0x00,0x19,0x02,0x11,0xFF,0x11,0x02,0x55,0x22,0x7D,0x7A,0x55,0x22,0x55,0x7A,0x55,0x02,0x7D,0x7A,0x55,0x4A,0x11,0x4A,0x19,0x7A,0x75,0x02,0x22,0x0E,0x02,0x04},
{0xBB,0x6E,0x00,0x00,0x08,0xD8,0x06,0x90,0x22,0xA2,0x3F,0xFF,0x20,0x02,0x47,0xF4,0x04,0x10,0x07,0xF0,0x00,0x82,0x7F,0xFF,0x06,0x40,0x1C,0x2C,0x64,0xD0,0x0F,0x0C,0x04,0x03},
{0xBB,0x6F,0x00,0x00,0x30,0x66,0x20,0x44,0x29,0xF4,0x7C,0x44,0x08,0x44,0x11,0xF6,0x14,0x05,0x38,0x65,0x54,0x45,0x15,0xF4,0x10,0x44,0x10,0x74,0x11,0xC4,0x10,0x84,0x10,0x04},
{0xBB,0x70,0x00,0x00,0x02,0x40,0x7E,0x7E,0x02,0x40,0x3E,0x7C,0x03,0x40,0x7E,0x7E,0x24,0x40,0x08,0x82,0x7F,0xFF,0x02,0x40,0x04,0x26,0x1C,0x28,0x64,0xD0,0x0F,0x0C,0x04,0x03},
{0xBB,0x71,0x00,0x00,0x00,0x82,0x7F,0xFF,0x08,0x88,0x0F,0xF8,0x08,0x88,0x0F,0xF8,0x00,0x82,0x7F,0xFF,0x0C,0x88,0x70,0x86,0x03,0x82,0x0C,0x58,0x74,0x20,0x0F,0x18,0x04,0x07},
{0xBB,0x72,0x00,0x00,0x18,0x82,0x10,0xFF,0x14,0x92,0x7E,0xFE,0x04,0x92,0x08,0xFE,0x0A,0x92,0x1C,0x10,0x2A,0xFF,0x4A,0x30,0x08,0x58,0x08,0x54,0x08,0x93,0x09,0x10,0x08,0x10},
{0xBB,0x73,0x00,0x00,0x28,0x03,0x3F,0x32,0x48,0x22,0x7F,0xA2,0x08,0x22,0x3F,0x22,0x29,0x0E,0x2B,0x04,0x00,0x80,0x7F,0xFF,0x04,0x80,0x1C,0x4C,0x65,0xB0,0x0E,0x0C,0x04,0x03},
{0xBB,0x74,0x00,0x00,0x18,0x18,0x10,0xA2,0x14,0xFF,0x7E,0x92,0x04,0xFE,0x08,0x92,0x0A,0xFE,0x1C,0xA2,0x2A,0x20,0x4A,0x4C,0x08,0x08,0x09,0xFF,0x08,0x08,0x08,0x08,0x08,0x08},
{0xBB,0x75,0x00,0x00,0x18,0x30,0x10,0x20,0x14,0xFB,0x7E,0x22,0x04,0x24,0x09,0xFF,0x0A,0x10,0x1C,0x28,0x2A,0x44,0x4A,0xFE,0x09,0x42,0x08,0x7E,0x08,0x42,0x08,0x7E,0x08,0x42},
{0xBB,0x76,0x00,0x00,0x18,0x82,0x10,0xFF,0x14,0x82,0x7E,0x92,0x04,0xBA,0x08,0x92,0x0A,0xBA,0x1C,0x82,0x2A,0xBA,0x4A,0xAA,0x08,0xAA,0x08,0xBA,0x09,0x02,0x09,0x0E,0x09,0x04},
{0xBB,0x77,0x00,0x00,0x04,0x04,0x3E,0xFE,0x00,0x04,0x7F,0x68,0x00,0x11,0x3E,0xFF,0x00,0x91,0x3E,0xFF,0x00,0x91,0x22,0x91,0x3E,0xFF,0x22,0x91,0x22,0x91,0x3E,0x97,0x22,0x82},
{0xBB,0x78,0x00,0x00,0x04,0x18,0x3E,0x10,0x00,0x12,0x7E,0xFF,0x00,0x10,0x3E,0x10,0x00,0x14,0x3E,0xFE,0x00,0x00,0x22,0x50,0x3E,0x4A,0x22,0xC1,0x23,0x45,0x3E,0x44,0x22,0x38},
{0xBB,0x79,0x00,0x00,0x04,0x04,0x3E,0xFE,0x00,0x20,0x7F,0x24,0x00,0xFE,0x3E,0x24,0x00,0x24,0x3E,0xFF,0x00,0x00,0x22,0x42,0x3F,0x7F,0x22,0x42,0x22,0x42,0x3E,0x7E,0x22,0x42},
{0xBB,0x7A,0x00,0x00,0x04,0x04,0x3E,0xFE,0x00,0x10,0x7F,0x10,0x00,0x52,0x3E,0x52,0x00,0x52,0x3E,0xB5,0x00,0xB5,0x22,0x94,0x3F,0x18,0x22,0x10,0x22,0x12,0x3E,0xFF,0x22,0x00},
{0xBB,0x7B,0x00,0x00,0x04,0x02,0x3E,0xFF,0x00,0x12,0x7F,0x12,0x00,0xD2,0x3E,0x22,0x00,0x2E,0x3E,0xC4,0x00,0x00,0x22,0x50,0x3E,0x4A,0x22,0xC1,0x23,0x45,0x3E,0x44,0x22,0x38},
{0xBB,0x7C,0x00,0x00,0x08,0x0A,0x3C,0x09,0x00,0x08,0x7D,0xFF,0x00,0x08,0x3C,0xA8,0x00,0xA8,0x3D,0xFB,0x00,0xAA,0x24,0xAA,0x3D,0x24,0x25,0x25,0x26,0x05,0x3C,0x0B,0x24,0x31},
{0xBB,0x7D,0x00,0x00,0x08,0x0E,0x7F,0x70,0x08,0x40,0x0F,0x7F,0x78,0x44,0x48,0x84,0x1B,0xE4,0x00,0x00,0x7F,0xFF,0x00,0x00,0x1F,0xFC,0x00,0x00,0x1F,0xFC,0x08,0x08,0x0F,0xF8},
{0xBB,0x7E,0x00,0x00,0x08,0x24,0x3C,0x3E,0x00,0x24,0x7E,0xA4,0x00,0xBC,0x3C,0xA4,0x00,0x80,0x3C,0xFE,0x00,0x92,0x24,0x12,0x3D,0xFF,0x24,0x28,0x24,0x24,0x3C,0x44,0x24,0x83},
{0xBB,0xA1,0x00,0x00,0x08,0x58,0x3C,0x48,0x00,0x84,0x7E,0x84,0x00,0xFE,0x3D,0x85,0x02,0x84,0x3C,0x84,0x00,0xFC,0x24,0x50,0x3E,0x52,0x24,0x52,0x24,0x92,0x3C,0x93,0x25,0x0E},
{0xBB,0xA2,0x00,0x00,0x04,0x0C,0x3E,0x68,0x00,0x48,0x7F,0x7E,0x00,0x48,0x3E,0x88,0x00,0x0A,0x3E,0xFF,0x00,0x00,0x22,0x42,0x3F,0x7F,0x22,0x42,0x22,0x42,0x3E,0x7E,0x22,0x42},
{0xBB,0xA3,0x00,0x00,0x04,0x60,0x3E,0x42,0x00,0x7F,0x7E,0x80,0x01,0x42,0x3E,0x7F,0x00,0x52,0x3E,0x4A,0x00,0xFF,0x22,0x52,0x3E,0x8A,0x22,0xFE,0x22,0x82,0x3E,0x1C,0x22,0x08},
{0xBB,0xA4,0x00,0x00,0x04,0x1E,0x3E,0xF0,0x00,0x12,0x7E,0xFF,0x00,0x30,0x3E,0x5C,0x01,0x93,0x3E,0x10,0x00,0xFE,0x22,0x44,0x3F,0x4F,0x22,0x49,0x22,0x41,0x3E,0x8E,0x22,0x84},
{0xBB,0xA5,0x00,0x00,0x02,0x60,0x3D,0x42,0x00,0x9F,0x7C,0x84,0x03,0x44,0x3C,0x44,0x00,0x44,0x3C,0xDF,0x01,0x44,0x25,0x44,0x3E,0x44,0x24,0x44,0x24,0x44,0x3D,0xDF,0x24,0x80},
{0xBB,0xA6,0x00,0x00,0x08,0x10,0x3C,0x54,0x00,0x52,0x7E,0x92,0x00,0x91,0x3D,0xFF,0x00,0x82,0x3C,0xFE,0x00,0x82,0x24,0x82,0x3E,0xFE,0x24,0x82,0x24,0x82,0x3C,0x8E,0x24,0x84},
{0xBB,0xA7,0x00,0x00,0x04,0x14,0x3E,0x12,0x00,0xFF,0x7F,0x10,0x00,0x92,0x3E,0xFF,0x00,0x92,0x3E,0xFE,0x00,0x92,0x22,0x92,0x3E,0xFE,0x22,0x92,0x22,0x92,0x3E,0x9E,0x22,0x84},
{0xBB,0xA8,0x00,0x00,0x00,0x82,0x7F,0xFF,0x04,0x10,0x07,0xF0,0x20,0x02,0x3F,0xFF,0x20,0x02,0x4F,0xF0,0x03,0x00,0x1C,0x98,0x03,0xA0,0x1C,0xD0,0x03,0x48,0x3C,0x46,0x01,0x80},
{0xBB,0xA9,0x00,0x00,0x18,0x82,0x12,0xFF,0x2A,0x92,0x54,0x92,0x08,0xFE,0x14,0x92,0x66,0x92,0x0A,0xFE,0x12,0x92,0x66,0x10,0x0A,0x14,0x72,0xFE,0x04,0x10,0x38,0x12,0x11,0xFF},
{0xBB,0xAA,0x00,0x00,0x18,0x18,0x12,0xA2,0x2A,0xFF,0x54,0x82,0x08,0x82,0x14,0xFE,0x66,0x82,0x0A,0x82,0x12,0xFE,0x66,0xAA,0x0A,0x28,0x72,0x29,0x04,0x49,0x38,0x49,0x11,0x86},
{0xBB,0xAB,0x00,0x00,0x20,0x82,0x3F,0xFF,0x20,0x02,0x4F,0xFC,0x00,0x80,0x0C,0x9C,0x30,0xE0,0x07,0xF8,0x1C,0x08,0x67,0xF8,0x04,0x08,0x07,0xF8,0x04,0x08,0x07,0xF8,0x0C,0x0C},
{0xBB,0xAC,0x00,0x00,0x49,0x02,0x7D,0xFF,0x49,0x00,0x49,0x04,0x79,0x7E,0x49,0x00,0x49,0x02,0x79,0xFF,0x49,0x50,0x49,0x48,0x79,0x4B,0x42,0x44,0x2A,0x54,0x2A,0xE2,0x44,0x41},
{0xBB,0xAD,0x00,0x00,0x44,0x30,0x7E,0x50,0x44,0x48,0x44,0x84,0x7D,0x03,0x46,0xFC,0x44,0x00,0x7C,0x02,0x45,0xFF,0x44,0x10,0x7C,0xD4,0x44,0x92,0x29,0x13,0x24,0x71,0x44,0x20},
{0xBB,0xAE,0x00,0x00,0x0C,0x0C,0x08,0x08,0x3E,0x3E,0x08,0x08,0x08,0x08,0x7F,0x7F,0x14,0x14,0x36,0x14,0x55,0x56,0x55,0x55,0x54,0xA5,0x24,0xA5,0x25,0x24,0x5C,0x5C,0x48,0x48},
{0xBB,0xAF,0x00,0x00,0x0C,0x10,0x08,0x54,0x08,0x52,0x3E,0x92,0x09,0x7F,0x08,0x42,0x7F,0x7E,0x08,0x42,0x2A,0x7E,0x2F,0x42,0x28,0x42,0x28,0x4E,0x58,0x44,0x46,0x00,0x41,0xFF},
{0xBB,0xB0,0x00,0x00,0x0C,0x42,0x08,0x7F,0x0A,0x42,0x3F,0x7E,0x08,0x42,0x0A,0x7E,0x7F,0x42,0x08,0x00,0x2A,0x7E,0x2F,0x10,0x28,0xFF,0x28,0x10,0x58,0x10,0x46,0x03,0x41,0xFC},
{0xBB,0xB1,0x00,0x00,0x22,0x82,0x3E,0xFF,0x22,0x82,0x22,0xFE,0x3E,0x82,0x2A,0x80,0x08,0xFF,0x28,0x81,0x2E,0xBD,0x28,0xA5,0x2A,0xBD,0x2C,0xA5,0x79,0x01,0x21,0x0F,0x02,0x02},
{0xBB,0xB2,0x00,0x00,0x0C,0x14,0x08,0x12,0x7E,0xFF,0x08,0x10,0x3E,0x92,0x2A,0xFF,0x3E,0x92,0x2A,0xFE,0x3E,0x92,0x2A,0x92,0x08,0xFE,0x7E,0x92,0x08,0x92,0x08,0x9E,0x08,0x94},
{0xBB,0xB3,0x00,0x00,0x18,0x02,0x13,0xFF,0x7D,0x28,0x11,0x28,0x7D,0xE8,0x55,0x28,0x7D,0x28,0x55,0xE8,0x7D,0x28,0x55,0x28,0x11,0x69,0x7D,0xA9,0x11,0x29,0x10,0x26,0x10,0x20},
{0xBB,0xB4,0x00,0x00,0x18,0x02,0x11,0xFF,0x7C,0x00,0x10,0xDB,0x7C,0x92,0x55,0x24,0x7C,0x92,0x54,0x92,0x7C,0x00,0x54,0xFE,0x10,0x10,0x7C,0x10,0x10,0x12,0x11,0xFF,0x10,0x00},
{0xBB,0xB5,0x00,0x00,0x18,0x60,0x10,0x40,0x7C,0xF8,0x10,0x90,0x7D,0x24,0x57,0xFE,0x7D,0x24,0x55,0x24,0x7D,0xFC,0x55,0x24,0x10,0x30,0x7C,0x52,0x10,0x52,0x10,0x93,0x13,0x0E},
{0xBB,0xB6,0x00,0x00,0x0C,0x0C,0x08,0x08,0x7F,0x7F,0x22,0x08,0x12,0x7F,0x14,0x49,0x7F,0x49,0x08,0x7F,0x08,0x49,0x7F,0x18,0x08,0x2C,0x08,0x2A,0x10,0x4A,0x10,0x89,0x20,0x08},
{0xBB,0xB7,0x00,0x00,0x20,0x20,0x19,0xFC,0x00,0x20,0x47,0xFF,0x30,0x00,0x01,0xFC,0x01,0x04,0x11,0xFC,0x78,0x60,0x10,0xB6,0x13,0x28,0x10,0x26,0x18,0x22,0x66,0x00,0x41,0xFF},
{0xBB,0xB8,0x00,0x00,0x20,0x48,0x19,0xFE,0x00,0x48,0x41,0xFE,0x30,0x48,0x03,0xFF,0x00,0x10,0x10,0xFE,0x78,0x92,0x13,0xFF,0x10,0x92,0x13,0xFF,0x18,0x82,0x66,0x86,0x41,0xFF},
{0xBB,0xB9,0x00,0x00,0x40,0x86,0x37,0xBC,0x00,0x88,0x41,0x30,0x31,0x16,0x01,0xC8,0x07,0x12,0x15,0x3D,0x79,0x08,0x11,0x2A,0x17,0x29,0x12,0x49,0x18,0x08,0x66,0x03,0x41,0xFC},
{0xBB,0xBA,0x00,0x00,0x20,0x20,0x19,0xFC,0x01,0x24,0x47,0xFF,0x30,0x00,0x01,0xFC,0x01,0x04,0x11,0xFC,0x79,0x00,0x11,0xFE,0x11,0x02,0x11,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xBB,0xBB,0x00,0x00,0x20,0xC0,0x18,0x88,0x00,0xFC,0x41,0x08,0x36,0xB0,0x01,0x40,0x00,0xFE,0x13,0x10,0x79,0xFF,0x10,0x10,0x10,0x92,0x10,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xBB,0xBC,0x00,0x00,0x21,0x1E,0x19,0xF0,0x01,0x1E,0x41,0x10,0x31,0x7F,0x01,0x49,0x01,0x4E,0x11,0x79,0x79,0x47,0x12,0x40,0x12,0x94,0x12,0x95,0x18,0xA3,0x66,0x00,0x41,0xFF},
{0xBB,0xBD,0x00,0x00,0x20,0xFC,0x18,0x84,0x00,0xFC,0x40,0x84,0x30,0xFC,0x00,0x00,0x03,0xDE,0x11,0x4A,0x7A,0x52,0x10,0xC6,0x11,0x4A,0x12,0x52,0x18,0xC6,0x66,0x00,0x41,0xFF},
{0xBB,0xBE,0x00,0x00,0x22,0x02,0x1B,0xFF,0x02,0x52,0x42,0x52,0x33,0xFE,0x02,0x02,0x00,0x20,0x11,0xAC,0x7A,0x22,0x10,0x20,0x11,0xAC,0x12,0x22,0x18,0x20,0x66,0x03,0x41,0xFC},
{0xBB,0xBF,0x00,0x00,0x22,0xC2,0x1B,0x3F,0x02,0x12,0x42,0x52,0x37,0xA2,0x02,0x2C,0x00,0x00,0x13,0xFE,0x7A,0x22,0x13,0xFE,0x12,0x22,0x13,0xFE,0x18,0x00,0x66,0x03,0x41,0xFC},
{0xBB,0xC0,0x00,0x00,0x20,0x92,0x3F,0xDF,0x20,0x92,0x3F,0x92,0x24,0x94,0x04,0x14,0x7F,0xD2,0x00,0x12,0x3F,0xD1,0x29,0x51,0x29,0x51,0x2F,0x5E,0x20,0x54,0x3F,0xD0,0x20,0x50},
{0xBB,0xC1,0x00,0x00,0x22,0x12,0x3F,0xDF,0x22,0x92,0x3F,0xF2,0x22,0x94,0x2F,0x94,0x22,0x12,0x2F,0xD2,0x2A,0x51,0x2F,0xD1,0x2A,0x51,0x2F,0xDE,0x4A,0x54,0x4B,0xD0,0x4A,0x90},
{0xBB,0xC2,0x00,0x00,0x11,0x12,0x7F,0xDF,0x11,0x12,0x1F,0x12,0x04,0x14,0x3F,0x94,0x24,0x92,0x3F,0x92,0x04,0x11,0x7F,0xD1,0x04,0x11,0x3F,0x9E,0x04,0x14,0x07,0xD0,0x7C,0x10},
{0xBB,0xC3,0x00,0x00,0x02,0x18,0x7F,0x13,0x14,0x7A,0x55,0x12,0x7F,0x14,0x55,0xFF,0x55,0x10,0x57,0x7E,0x61,0x24,0x41,0xC8,0x7F,0x3F,0x41,0x08,0x41,0x08,0x7F,0x38,0x41,0x10},
{0xBB,0xC4,0x00,0x00,0x02,0x18,0x7F,0x10,0x14,0x22,0x55,0x7D,0x7F,0x24,0x55,0x25,0x55,0x43,0x57,0x20,0x61,0x3E,0x41,0x22,0x7F,0x64,0x41,0x94,0x41,0x08,0x7F,0x14,0x41,0x63},
{0xBB,0xC5,0x00,0x00,0x02,0x0C,0x7F,0x68,0x14,0x48,0x55,0x7E,0x7F,0x48,0x55,0x8A,0x55,0x7F,0x57,0x00,0x61,0x42,0x41,0x7F,0x7F,0x42,0x41,0x42,0x41,0x42,0x7F,0x7E,0x41,0x42},
{0xBB,0xC6,0x00,0x00,0x02,0x18,0x7F,0x14,0x14,0x24,0x55,0x22,0x7F,0x41,0x55,0xBE,0x55,0x08,0x57,0x0A,0x61,0x7F,0x41,0x08,0x7F,0x6A,0x41,0x49,0x41,0x89,0x7F,0x38,0x41,0x10},
{0xBB,0xC7,0x00,0x00,0x0C,0x18,0x0A,0x12,0x12,0xFF,0x10,0x00,0x3E,0x64,0x48,0x43,0x08,0x81,0x7E,0x36,0x08,0x54,0x4A,0x54,0x2C,0x08,0x28,0x18,0x0E,0x14,0x78,0x22,0x20,0xC1},
{0xBB,0xC8,0x00,0x00,0x0C,0x42,0x0A,0x7F,0x11,0x42,0x11,0x42,0x3E,0x7E,0x48,0x42,0x0A,0x42,0x7F,0x7E,0x08,0x52,0x4A,0x48,0x2C,0x4B,0x29,0x44,0x0E,0x54,0x78,0xE2,0x20,0x41},
{0xBB,0xC9,0x00,0x00,0x0C,0x82,0x0A,0xFF,0x12,0x82,0x11,0x92,0x3E,0xBA,0x48,0x82,0x08,0xBA,0x7E,0xAA,0x08,0xAA,0x4A,0xBA,0x2C,0xAA,0x28,0x82,0x0E,0x82,0x78,0x8E,0x20,0x