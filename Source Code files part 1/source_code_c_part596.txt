ory.
 *
 * @comm
 *   At a minimum, all capture drivers support a VIDEO_EXTERNALIN
 *   and a VIDEO_IN channel.
 *   Use <f videoGetNumDevs> to determine the number of video
 *   devices present in the system.
 *
 * @xref <f videoClose>
 ****************************************************************************/
DWORD WINAPI NTvideoOpen (LPHVIDEO lphVideo, DWORD dwDeviceID, DWORD dwFlags)
{
    TCHAR szKey[MAX_PATH];  
    TCHAR szbuf[MAX_PATH];
    UINT w;
    VIDEO_OPEN_PARMS vop;       // Same as IC_OPEN struct!!!
    DWORD dwVersion = VIDEOAPIVERSION;
    DWORD dwErr;
    DWORD dwNumDevs = 0;

    if (IsBadWritePtr ((LPVOID) lphVideo, sizeof (HVIDEO)) )
        return DV_ERR_PARAM1;

    vop.dwSize = sizeof (VIDEO_OPEN_PARMS);
    vop.fccType = OPEN_TYPE_VCAP;       // "vcap"
    vop.fccComp = 0L;
    vop.dwVersion = VIDEOAPIVERSION;
    vop.dwFlags = dwFlags;      // In, Out, External In, External Out
    vop.dwError = DV_ERR_OK;

    w = (UINT)dwDeviceID;
    *lphVideo = NULL;

    dwNumDevs = NTvideoGetNumDevs();

    // No drivers installed
    if (dwNumDevs == 0) 
        return DV_ERR_BADINSTALL;

    if (w >= MAXVIDEODRIVERS)
        return DV_ERR_BADDEVICEID;

    dwErr = videoCreateDriverList ();
    if(DV_ERR_OK != dwErr)
        return dwErr;
    
    if(w < dwNumDevs) {
       lstrcpyn(szKey, aCapDriverList[w]->szDriverName, MAX_PATH);
       lstrcpyn(szbuf, aCapDriverList[w]->szDriverName, MAX_PATH);
       videoFreeDriverList ();

       dprintf("szKey %x, szDrivers %x, szbuf %x\n", szKey, szDrivers, szbuf);

#ifdef THIS_IS_ANCIENT_CODE
        // Removed for VFW1.1
        // Only early Alpha 1.0 drivers required this...

        // Check driver version number by doing a configuration open...
        // Version 1 used LPARAM = dwFlags
        // Version 2 uses LPARAM = LPVIDEO_OPEN_PARMS

        if (hVideoTemp = OpenDriver(szKey, szDrivers, (LPARAM) NULL)) {
            HVIDEO hVideoTemp;

            // Version 1 drivers had the added bug of returning
            // the version from this message, instead of in
            // lParam1
            if (NTvideoMessage (hVideoTemp, DVM_GETVIDEOAPIVER,
                        (LPARAM) (LPVOID) &dwVersion, 0L) == 1)
                dwVersion = 1;
            CloseDriver(hVideoTemp, 0L, 0L );
        }

        if (dwVersion == 1)
            *lphVideo = OpenDriver(szKey, szDrivers, dwFlags);
        else
#endif // THIS_IS_ANCIENT_CODE

        *lphVideo = (HVIDEO)OpenDriver(szKey, szDrivers, (LPARAM) (LPVOID) &vop);

	    if( ! *lphVideo ) {
            if (vop.dwError)    // if driver returned an error code...
                return vop.dwError;
            else {
#ifdef WIN32
		        if (GetFileAttributes(szbuf) == (DWORD) -1)
#else
                OFSTRUCT of;

                if (OpenFile (szbuf, &of, OF_EXIST) == HFILE_ERROR)
#endif
                    return (DV_ERR_BADINSTALL);
                else
                    return (DV_ERR_NOTDETECTED);
            }
	    }
    } else {
        videoFreeDriverList ();
        return( DV_ERR_BADINSTALL );
    }

    NTvideoAddHandle(*lphVideo);

    return DV_ERR_OK;

}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoClose | This function closes the specified video
 *   device channel.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *  If this function is successful, the handle is invalid
 *   after this call.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Specified device handle is invalid.
 *   @flag DV_ERR_NONSPECIFIC | The driver failed to close the channel.
 *
 * @comm If buffers have been sent with <f videoStreamAddBuffer> and
 *   they haven't been returned to the application,
 *   the close operation fails. You can use <f videoStreamReset> to mark all
 *   pending buffers as done.
 *
 * @xref <f videoOpen> <f videoStreamInit> <f videoStreamFini> <f videoStreamReset>
 ****************************************************************************/
DWORD WINAPI NTvideoClose (HVIDEO hVideo)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    NTvideoDelete(hVideo);

    return (CloseDriver((HDRVR)hVideo, 0L, 0L ) ? DV_ERR_OK : DV_ERR_NONSPECIFIC);
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoConfigure | This function sets or retrieves
 *      the options for a configurable driver.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm UINT | msg  | Specifies the option to set or retrieve. The
 *       following options are defined:
 *
 *   @flag DVM_PALETTE | Indicates a palette is being sent to the driver
 *         or retrieved from the driver.
 *
 *   @flag DVM_PALETTERGB555 | Indicates an RGB555 palette is being
 *         sent to the driver.
 *
 *   @flag DVM_FORMAT | Indicates format information is being sent to
 *         the driver or retrieved from the driver.
 *
 * @parm DWORD | dwFlags | Specifies flags for configuring or
 *   interrogating the device driver. The following flags are defined:
 *
 *   @flag VIDEO_CONFIGURE_SET | Indicates values are being sent to the driver.
 *
 *   @flag VIDEO_CONFIGURE_GET | Indicates values are being obtained from the driver.
 *
 *   @flag VIDEO_CONFIGURE_QUERY | Determines if the
 *      driver supports the option specified by <p msg>. This flag
 *      should be combined with either the VIDEO_CONFIGURE_SET or
 *      VIDEO_CONFIGURE_GET flag. If this flag is
 *      set, the <p lpData1>, <p dwSize1>, <p lpData2>, and <p dwSize2>
 *      parameters are ignored.
 *
 *   @flag VIDEO_CONFIGURE_QUERYSIZE | Returns the size, in bytes,
 *      of the configuration option in <p lpdwReturn>. This flag is only valid if
 *      the VIDEO_CONFIGURE_GET flag is also set.
 *
 *   @flag VIDEO_CONFIGURE_CURRENT | Requests the current value.
 *      This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.
 *   @flag VIDEO_CONFIGURE_NOMINAL | Requests the nominal value.
 *      This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.
 *   @flag VIDEO_CONFIGURE_MIN | Requests the minimum value.
 *      This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.
 *   @flag VIDEO_CONFIGURE_MAX | Get the maximum value.
 *      This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.
 *	
 * @parm LPDWORD | lpdwReturn  | Points to a DWORD used for returning information
 *      from the driver.  If
 *      the VIDEO_CONFIGURE_QUERYSIZE flag is set, <p lpdwReturn> is
 *      filled with the size of the configuration option.
 *
 * @parm LPVOID | lpData1  |Specifies a pointer to message specific data.
 *
 * @parm DWORD | dwSize1  | Specifies the size, in bytes, of the <p lpData1>
 *       buffer.
 *
 * @parm LPVOID | lpData2  | Specifies a pointer to message specific data.
 *
 * @parm DWORD | dwSize2  | Specifies the size, in bytes, of the <p lpData2>
 *       buffer.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Specified device handle is invalid.
 *   @flag DV_ERR_NOTSUPPORTED | Function is not supported.
 *
 * @xref <f videoOpen> <f videoMessage>
 *
 ****************************************************************************/
DWORD WINAPI NTvideoConfigure (HVIDEO hVideo, UINT msg, DWORD dwFlags,
		LPDWORD lpdwReturn, LPVOID lpData1, DWORD dwSize1,
                LPVOID lpData2, DWORD dwSize2)
{
    VIDEOCONFIGPARMS    vcp;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (lpData1)
        if (IsBadHugeReadPtr (lpData1, dwSize1))
            return DV_ERR_CONFIG1;

    if (lpData2)
        if (IsBadHugeReadPtr (lpData2, dwSize2))
            return DV_ERR_CONFIG2;

    if (dwFlags & VIDEO_CONFIGURE_QUERYSIZE) {
        if (!lpdwReturn)
            return DV_ERR_NONSPECIFIC;
        if (IsBadWritePtr (lpdwReturn, sizeof (*lpdwReturn)) )
            return DV_ERR_NONSPECIFIC;
    }

    vcp.lpdwReturn = lpdwReturn;
    vcp.lpData1 = lpData1;
    vcp.dwSize1 = dwSize1;
    vcp.lpData2 = lpData2;
    vcp.dwSize2 = dwSize2;

    return (DWORD)NTvideoMessage(hVideo, msg, dwFlags,
	    (LPARAM)(LPVIDEOCONFIGPARMS)&vcp );
}



/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoConfigureStorage | This function saves or loads
 *	     all configurable options for a channel.  Options
 *      can be saved and recalled for each application or each application
 *      instance.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm LPSTR | lpstrIdent  | Identifies the application or instance.
 *      Use an arbitrary string which uniquely identifies your application
 *      or instance.
 *
 * @parm DWORD | dwFlags | Specifies any flags for the function. The following
 *   flags are defined:
 *   @flag VIDEO_CONFIGURE_GET | Requests that the values be loaded.
 *   @flag VIDEO_CONFIGURE_SET | Requests that the values be saved.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Specified device handle is invalid.
 *   @flag DV_ERR_NOTSUPPORTED | Function is not supported.
 *
 * @comm The method used by a driver to save configuration options is
 *      device dependent.
 *
 * @xref <f videoOpen>
 ****************************************************************************/
#ifdef UNICODE
DWORD WINAPI NTvideoConfigureStorageA(HVIDEO hVideo,
			LPSTR lpstrIdent, DWORD dwFlags)
{
    DWORD ret;
    LPWSTR lpwstr;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;


    // Convert the input string to Unicode
    // Call the driver, free the Unicode string and return the result
    ret = strlen(lpstrIdent);
    lpwstr = LocalAlloc(LPTR, ret*sizeof(WCHAR));
    if (!lpwstr) {
        return(DV_ERR_NOMEM);
    }

    Imbstowcs(lpwstr, lpstrIdent, ret);

    ret = (DWORD)NTvideoMessage(hVideo, DVM_CONFIGURESTORAGE,
	    (LPARAM)lpwstr, dwFlags);

    LocalFree(lpwstr);
    return(ret);
}

#endif

// On NT the header file will have ensured that videoConfigureStorage is
// defined by a macro to videoConfigureStorageW
DWORD WINAPI NTvideoConfigureStorage(HVIDEO hVideo,
			LPWSTR lpstrIdent, DWORD dwFlags)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    return (DWORD)NTvideoMessage(hVideo, DVM_CONFIGURESTORAGE,
	    (LPARAM)lpstrIdent, dwFlags);
}




/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoDialog | This function displays a channel-specific
 *     dialog box used to set configuration parameters.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm HWND | hWndParent | Specifies the parent window handle.
 *
 * @parm DWORD | dwFlags | Specifies flags for the dialog box. The
 *   following flag is defined:
 *   @flag VIDEO_DLG_QUERY | If this flag is set, the driver immediately
 *	     returns zero if it supplies a dialog box for the channel,
 *           or DV_ERR_NOTSUPPORTED if it does not.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Specified device handle is invalid.
 *   @flag DV_ERR_NOTSUPPORTED | Function is not supported.
 *
 * @comm Typically, each dialog box displayed by this
 *      function lets the user select options appropriate for the channel.
 *      For example, a VIDEO_IN channel dialog box lets the user select
 *      the image dimensions and bit depth.
 *
 * @xref <f videoOpen> <f videoConfigureStorage>
 ****************************************************************************/
DWORD WINAPI NTvideoDialog (HVIDEO hVideo, HWND hWndParent, DWORD dwFlags)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if ((!hWndParent) || (!IsWindow (hWndParent)) )
        return DV_ERR_INVALHANDLE;

    return (DWORD)NTvideoMessage(hVideo, DVM_DIALOG, (LPARAM)hWndParent, dwFlags);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////


/*****************************************************************************
 * @doc INTERNAL  VIDEO
 *
 * @api DWORD | videoPrepareHeader | This function prepares the
 *	header and data
 *	by performing a <f GlobalPageLock>.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it
 *   specifies an error number.
 ****************************************************************************/
DWORD WINAPI NTvideoPrepareHeader(LPVIDEOHDR lpVideoHdr, DWORD dwSize)
{
    if (!HugePageLock(lpVideoHdr, (DWORD_PTR)sizeof(VIDEOHDR)))
        return DV_ERR_NOMEM;

    if (!HugePageLock(lpVideoHdr->lpData, lpVideoHdr->dwBufferLength)) {
        HugePageUnlock(lpVideoHdr, (DWORD_PTR)sizeof(VIDEOHDR));
        return DV_ERR_NOMEM;
    }

    lpVideoHdr->dwFlags |= VHDR_PREPARED;

    return DV_ERR_OK;
}

/*****************************************************************************
 * @doc INTERNAL  VIDEO
 *
 * @api DWORD | videoUnprepareHeader | This function unprepares the header and
 *   data if the driver returns DV_ERR_NOTSUPPORTED.
 *
 * @rdesc Currently always returns DV_ERR_OK.
 ****************************************************************************/
DWORD WINAPI NTvideoUnprepareHeader(LPVIDEOHDR lpVideoHdr, DWORD dwSize)
{

    HugePageUnlock(lpVideoHdr->lpData, lpVideoHdr->dwBufferLength);
    HugePageUnlock(lpVideoHdr, (DWORD_PTR)sizeof(VIDEOHDR));

    lpVideoHdr->dwFlags &= ~VHDR_PREPARED;

    return DV_ERR_OK;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamAllocHdrAndBuffer | This function is used to allow
 *      drivers to optionally allocate video buffers.  Normally, the client
 *      application is responsible for allocating buffer memory, but devices
 *      which have on-board memory may optionally allocate headers and buffers
 *      using this function. Generally, this will avoid an additional data copy,
 *      resulting in faster capture rates.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video
 *   device channel.
 *
 * @parm LPVIDEOHDR FAR * | plpvideoHdr | Specifies a pointer to the address of a
 *   <t VIDEOHDR> structure.  The driver saves the buffer address in this
 *   location, or NULL if it cannot allocate a buffer.
 *
 * @parm DWORD | dwSize | Specifies the size of the <t VIDEOHDR> structure
 *      and associated video buffer in bytes.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the specified device handle is invalid.
 *   @flag DV_ERR_NOMEM | Indicates the device is unable to allocate or lock memory.
 *   @flag DV_ERR_NOTSUPPORTED | Indicates the driver does not have on-board memory.
 *
 * @comm If the driver
 *   allocates buffers via this method, the <f videoStreamPrepareHeader> and
 *   <f videoStreamUnprepareHeader> functions should be used.
 *
 *   The buffer allocated must be accessible for DMA by the host.
 *
 * @xref <f videoStreamPrepareHeader>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamAllocHdrAndBuffer(HVIDEO hVideo,
		LPVIDEOHDR FAR * plpvideoHdr, DWORD dwSize)
{
#ifdef OBSOLETE
    DWORD         wRet;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (plpvideoHdr, sizeof (VIDEOHDR *)) )
        return DV_ERR_PARAM1;

    *plpvideoHdr = NULL;        // Init to NULL ptr

    wRet = (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_ALLOCHDRANDBUFFER,
            (LPARAM)plpvideoHdr, dwSize);

    if (*plpvideoHdr == NULL ||
                IsBadHugeWritePtr (*plpvideoHdr, dwSize)) {
        DebugErr(DBF_WARNING,"videoStreamAllocHdrAndBuffer: Allocation failed.");
        *plpvideoHdr = NULL;
        return wRet;
    }

    if (IsVideoHeaderPrepared(HVIDEO, *plpvideoHdr))
    {
        DebugErr(DBF_WARNING,"videoStreamAllocHdrAndBuffer: header is already prepared.");
        return DV_ERR_OK;
    }

    (*plpvideoHdr)->dwFlags = 0;

    if (wRet == DV_ERR_OK)
        MarkVideoHeaderPrepared(hVideo, *plpvideoHdr);

    return wRet;
#endif
    return DV_ERR_NOTSUPPORTED;
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamFreeHdrAndBuffer | This function is used to free
 *      buffers allocated by the driver using the <f videoStreamAllocHdrAndBuffer>
 *      function.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video
 *   device channel.
 *
 * @parm LPVIDEOHDR | lpvideoHdr | Specifies a pointer to the
 *   <t VIDEOHDR> structure and associated buffer to be freed.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the specified device handle is invalid.
 *   @flag DV_ERR_NOTSUPPORTED | Indicates the driver does not have on-board memory.
 *
 * @comm If the driver
 *   allocates buffers via this method, the <f videoStreamPrepareHeader> and
 *   <f videoStreamUnprepareHeader> functions should be used.
 *
 * @xref <f videoStreamPrepareHeader>
 ****************************************************************************/

DWORD WINAPI NTvideoStreamFreeHdrAndBuffer(HVIDEO hVideo,
		LPVIDEOHDR lpvideoHdr)
{
#ifdef OBSOLETE
    DWORD         wRet;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (lpvideoHdr, sizeof (VIDEOHDR)) )
        return DV_ERR_PARAM1;

    if (lpvideoHdr->dwFlags & VHDR_INQUEUE)
    {
        DebugErr(DBF_WARNING, "videoStreamFreeHdrAndBuffer: buffer still in queue.");
        return DV_ERR_STILLPLAYING;
    }

    if (!IsVideoHeaderPrepared(hVideo, lpvideoHdr))
    {
        DebugErr(DBF_WARNING,"videoStreamFreeHdrAndBuffer: header is not prepared.");
    }

    wRet = (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_FREEHDRANDBUFFER,
            (LPARAM)lpvideoHdr, 0);

    if (wRet != DV_ERR_OK)
    {
        DebugErr(DBF_WARNING,"videoStreamFreeHdrAndBuffer: Error freeing buffer.");
    }

    return wRet;
#endif
    return DV_ERR_NOTSUPPORTED;
}

DWORD WINAPI NTvideoStreamAllocBuffer(HVIDEO hVideo,
		LPVOID FAR * plBuffer, DWORD dwSize)
{
    DWORD         wRet;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

// as this code is internal to our dll we do not need to check access rights
//    if (IsBadWritePtr (plpvideoHdr, sizeof (VIDEOHDR *)) )
//        return DV_ERR_PARAM1;

    *plBuffer = NULL;        // Init to NULL ptr

    wRet = (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_ALLOCBUFFER,
            (LPARAM)plBuffer, dwSize);

    if (*plBuffer == NULL) {
        DebugErr(DBF_WARNING,"videoStreamAllocBuffer: Allocation failed.");
	dprintf("videoStreamAllocBuffer: Allocation failed, wRet=0x%d",wRet);
        *plBuffer = NULL;
        return wRet;
    }
    return wRet;
}

DWORD WINAPI NTvideoStreamFreeBuffer(HVIDEO hVideo,
		LPVOID lpBuffer)
{
    DWORD         wRet;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    wRet = (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_FREEBUFFER,
            (LPARAM)lpBuffer, 0);

    if (wRet != DV_ERR_OK)
    {
        DebugErr(DBF_WARNING,"videoStreamFreeBuffer: Error freeing buffer.");
	dprintf("videoStreamFreeBuffer: error %d freeing buffer", wRet);
    }

    return wRet;
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamPrepareHeader | This function prepares a buffer
 *   for video streaming.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video
 *   device channel.
 *
 * @parm LPVIDEOHDR | lpvideoHdr | Specifies a pointer to a
 *   <t VIDEOHDR> structure identifying the buffer to be prepared.
 *
 * @parm DWORD | dwSize | Specifies the size of the <t VIDEOHDR> structure in bytes.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the specified device handle is invalid.
 *   @flag DV_ERR_NOMEM | Indicates the device is unable to allocate or lock memory.
 *
 * @comm Use this function after <f videoStreamInit> or
 *   after <f videoStreamReset> to prepare the data buffers
 *   for streaming data.
 *
 *   The <t VIDEOHDR> data structure and the data block pointed to by its
 *   <e VIDEOHDR.lpData> member must be allocated with <f GlobalAlloc> using the
 *   GMEM_MOVEABLE and GMEM_SHARE flags, and locked with <f GlobalLock>.
 *   Preparing a header that has already been prepared will have no effect
 *   and the function will return zero. Typically, this function is used
 *   to ensure that the buffer will be available for use at interrupt time.
 *
 * @xref <f videoStreamUnprepareHeader>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamPrepareHeader(HVIDEO hVideo,
		LPVIDEOHDR lpvideoHdr, DWORD dwSize)
{
    DWORD         wRet;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (lpvideoHdr, sizeof (VIDEOHDR)) )
        return DV_ERR_PARAM1;

    if (IsVideoHeaderPrepared(HVIDEO, lpvideoHdr))
    {
        DebugErr(DBF_WARNING,"videoStreamPrepareHeader: header is already prepared.");
        return DV_ERR_OK;
    }

    lpvideoHdr->dwFlags = 0;

    wRet = (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_PREPAREHEADER,
            (LPARAM)lpvideoHdr, dwSize);

    if (wRet == DV_ERR_NOTSUPPORTED)
        wRet = NTvideoPrepareHeader(lpvideoHdr, dwSize);

    if (wRet == DV_ERR_OK)
        MarkVideoHeaderPrepared(hVideo, lpvideoHdr);

    return wRet;
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamUnprepareHeader | This function clears the
 *  preparation performed by <f videoStreamPrepareHeader>.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video
 *   device channel.
 *
 * @parm LPVIDEOHDR | lpvideoHdr |  Specifies a pointer to a <t VIDEOHDR>
 *   structure identifying the data buffer to be unprepared.
 *
 * @parm DWORD | dwSize | Specifies the size of the <t VIDEOHDR> structure in bytes.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the device handle specified is invalid.
 *   @flag DV_ERR_STILLPLAYING | Indicates the structure identified by <p lpvideoHdr>
 *   is still in the queue.
 *
 * @comm This function is the complementary function to <f videoStreamPrepareHeader>.
 *   You must call this function before freeing the data buffer with <f GlobalFree>.
 *   After passing a buffer to the device driver with <f videoStreamAddBuffer>, you
 *   must wait until the driver is finished with the buffer before calling
 *   <f videoStreamUnprepareHeader>. Unpreparing a buffer that has not been
 *   prepared or has been already unprepared has no effect,
 *   and the function returns zero.
 *
 * @xref <f videoStreamPrepareHeader>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamUnprepareHeader(HVIDEO hVideo, LPVIDEOHDR lpvideoHdr, DWORD dwSize)
{
    DWORD         wRet;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (lpvideoHdr, sizeof (VIDEOHDR)) )
        return DV_ERR_PARAM1;

    if (lpvideoHdr->dwFlags & VHDR_INQUEUE)
    {
        DebugErr(DBF_WARNING, "videoStreamUnprepareHeader: buffer still in queue.");
        return DV_ERR_STILLPLAYING;
    }

    if (!IsVideoHeaderPrepared(hVideo, lpvideoHdr))
    {
        DebugErr(DBF_WARNING,"videoStreamUnprepareHeader: header is not prepared.");
        return DV_ERR_OK;
    }

    wRet = (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_UNPREPAREHEADER,
            (LPARAM)lpvideoHdr, dwSize);

    if (wRet == DV_ERR_NOTSUPPORTED)
        wRet = NTvideoUnprepareHeader(lpvideoHdr, dwSize);

    if (wRet == DV_ERR_OK)
        MarkVideoHeaderUnprepared(hVideo, lpvideoHdr);

    return wRet;
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamAddBuffer | This function sends a buffer to a
 *   video-capture device. After the buffer is filled by the device,
 *   the device sends it back to the application.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm LPVIDEOHDR | lpvideoHdr | Specifies a far pointer to a <t VIDEOHDR>
 *   structure that identifies the buffer.
 *
 * @parm DWORD | dwSize | Specifies the size of the <t VIDEOHDR> structure in bytes.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the device handle specified is invalid.
 *   @flag DV_ERR_UNPREPARED | Indicates the <p lpvideoHdr> structure hasn't been prepared.
 *   @flag DV_ERR_STILLPLAYING | Indicates a buffer is still in the queue.
 *   @flag DV_ERR_PARAM1 | The <p lpvideoHdr> parameter is invalid or
 *       the <e VIDEOHDR.dwBufferLength> member of the <t VIDEOHDR>
 *       structure is not set to the proper value.
 *
 * @comm The data buffer must be prepared with <f videoStreamPrepareHeader>
 *   before it is passed to <f videoStreamAddBuffer>. The <t VIDEOHDR> data
 *   structure and the data buffer referenced by its <e VIDEOHDR.lpData>
 *   member must be allocated with <f GlobalAlloc> using the GMEM_MOVEABLE
 *   and GMEM_SHARE flags, and locked with <f GlobalLock>. Set the
 *   <e VIDEOHDR.dwBufferLength> member to the size of the header.
 *
 * @xref <f videoStreamPrepareHeader>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamAddBuffer(HVIDEO hVideo, LPVIDEOHDR lpvideoHdr, DWORD dwSize)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (lpvideoHdr, sizeof (VIDEOHDR)) )
        return DV_ERR_PARAM1;

    if (!IsVideoHeaderPrepared(hVideo, lpvideoHdr))
    {
        DebugErr(DBF_WARNING, "videoStreamAddBuffer: buffer not prepared.");
        return DV_ERR_UNPREPARED;
    }

    if (lpvideoHdr->dwFlags & VHDR_INQUEUE)
    {
        DebugErr(DBF_WARNING, "videoStreamAddBuffer: buffer already in queue.");
        return DV_ERR_STILLPLAYING;
    }

    return (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_ADDBUFFER, (LPARAM)lpvideoHdr, dwSize);
}



/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamStop | This function stops streaming on a video channel.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video
 *   device channel.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following error is defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the specified device handle is invalid.
 *
 *   @flag DV_ERR_NOTSUPPORTED | Indicates the device does not support this
 *         function.
 * @comm If there are any buffers in the queue, the current buffer will be
 *   marked as done (the <e VIDEOHDR.dwBytesRecorded> member in
 *   the <t VIDEOHDR> header will contain the actual length of data), but any
 *   empty buffers in the queue will remain there. Calling this
 *   function when the channel is not started has no effect, and the
 *   function returns zero.
 *
 * @xref <f videoStreamStart> <f videoStreamReset>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamStop(HVIDEO hVideo)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    return (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_STOP, 0L, 0L);
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamReset | This function stops streaming
 *	     on the specified video device channel and resets the current position
 *      to zero.  All pending buffers are marked as done and
 *      are returned to the application.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *
 *   @flag DV_ERR_INVALHANDLE | Indicates the device handle specified is invalid.
 *
 *   @flag DV_ERR_NOTSUPPORTED | Indicates the device does not support this
 *         function.
 *
 * @xref <f videoStreamReset> <f videoStreamStop> <f videoStreamAddBuffer> <f videoStreamClose>
/****************************************************************************/
DWORD WINAPI NTvideoStreamReset(HVIDEO hVideo)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    return (DWORD)NTvideoMessage((HVIDEO)hVideo, DVM_STREAM_RESET, 0L, 0L);
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamGetPosition | This function retrieves the current
 *   position of the specified video device channel.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm LPMMTIME | lpInfo | Specifies a far pointer to an <t MMTIME>
 *   structure.
 *
 * @parm DWORD | dwSize | Specifies the size of the <t MMTIME> structure in bytes.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *
 *   @flag DV_ERR_INVALHANDLE | Indicates the specified device handle is invalid.
 *
 * @comm Before using <f videoStreamGetPosition>, set the
 *   <e MMTIME.wType> member of the <t MMTIME> structure to indicate
 *   the time format desired. After
 *   <f videoStreamGetPosition> returns, check the <e MMTIME.wType>
 *   member to  determine if the your time format is supported. If
 *   not, <e MMTIME.wType> specifies an alternate format.
 *   Video capture drivers typically provide the millisecond time
 *   format.
 *
 *   The position is set to zero when streaming is started with
 *   <f videoStreamStart>.
 ****************************************************************************/
DWORD WINAPI NTvideoStreamGetPosition(HVIDEO hVideo, LPMMTIME lpInfo, DWORD dwSize)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (lpInfo, sizeof (MMTIME)) )
        return DV_ERR_PARAM1;

    return (DWORD)NTvideoMessage(hVideo, DVM_STREAM_GETPOSITION,
            (LPARAM)lpInfo, dwSize);
}

// ============================================

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamInit | This function initializes a video
 *     device channel for streaming.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm DWORD | dwMicroSecPerFrame | Specifies the number of microseconds
 *     between frames.
 *
 * @parm DWORD_PTR | dwCallback | Specifies the address of a callback
 *   function or a handle to a window called during video
 *   streaming. The callback function or window processes
 *  messages related to the progress of streaming.
 *
 * @parm DWORD_PTR | dwCallbackInstance | Specifies user
 *  instance data passed to the callback function. This parameter is not
 *  used with window callbacks.
 *
 * @parm DWORD | dwFlags | Specifies flags for opening the device channel.
 *   The following flags are defined:
 *   @flag CALLBACK_WINDOW | If this flag is specified, <p dwCallback> is
 *      a window handle.
 *   @flag CALLBACK_FUNCTION | If this flag is specified, <p dwCallback> is
 *      a callback procedure address.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_BADDEVICEID | Indicates the device ID specified in
 *         <p hVideo> is not valid.
 *   @flag DV_ERR_ALLOCATED | Indicates the resource specified is already allocated.
 *   @flag DV_ERR_NOMEM | Indicates the device is unable to allocate or lock memory.
 *
 * @comm If a window or function is chosen to receive callback information, the following
 *   messages are sent to it to indicate the
 *   progress of video input:
 *
 *   <m MM_DRVM_OPEN> is sent at the time of <f videoStreamInit>
 *
 *   <m MM_DRVM_CLOSE> is sent at the time of <f videoStreamFini>
 *
 *   <m MM_DRVM_DATA> is sent when a buffer of image data is available
 *
 *   <m MM_DRVM_ERROR> is sent when an error occurs
 *
 *   Callback functions must reside in a DLL.
 *   You do not have to use <f MakeProcInstance> to get
 *   a procedure-instance address for the callback function.
 *
 * @cb void CALLBACK | videoFunc | <f videoFunc> is a placeholder for an
 *   application-supplied function name. The actual name must be exported by
 *   including it in an EXPORTS statement in the DLL's module-definition file.
 *   This is used only when a callback function is specified in
 *   <f videoStreamInit>.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel
 *   associated with the callback.
 *
 * @parm DWORD | wMsg | Specifies the <m MM_DRVM_> messages. Messages indicate
 *       errors and when image data is available. For information on
 *       these messages, see <f videoStreamInit>.
 *
 * @parm DWORD | dwInstance | Specifies the user instance
 *   data specified with <f videoStreamInit>.
 *
 * @parm DWORD | dwParam1 | Specifies a parameter for the message.
 *
 * @parm DWORD | dwParam2 | Specifies a parameter for the message.
 *
 * @comm Because the callback is accessed at interrupt time, it must reside
 *   in a DLL and its code segment must be specified as FIXED in the
 *   module-definition file for the DLL. Any data the callback accesses
 *   must be in a FIXED data segment as well. The callback may not make any
 *   system calls except for <f PostMessage>, <f timeGetSystemTime>,
 *   <f timeGetTime>, <f timeSetEvent>, <f timeKillEvent>,
 *   <f midiOutShortMsg>, <f midiOutLongMsg>, and <f OutputDebugStr>.
 *
 * @xref <f videoOpen> <f videoStreamFini> <f videoClose>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamInit(HVIDEO hVideo,
              DWORD dwMicroSecPerFrame, DWORD_PTR dwCallback,
              DWORD_PTR dwCallbackInst, DWORD dwFlags)
{
    VIDEO_STREAM_INIT_PARMS vsip;

    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (dwCallback && ((dwFlags & CALLBACK_TYPEMASK) == CALLBACK_FUNCTION) ) {
        if (IsBadCodePtr ((FARPROC) dwCallback) )
            return DV_ERR_PARAM2;
        if (!dwCallbackInst)
            return DV_ERR_PARAM2;
    }

    if (dwCallback && ((dwFlags & CALLBACK_TYPEMASK) == CALLBACK_WINDOW) ) {
        if (!IsWindow((HWND)(dwCallback)) )
            return DV_ERR_PARAM2;
    }

    vsip.dwMicroSecPerFrame = dwMicroSecPerFrame;
    vsip.dwCallback = dwCallback;
    vsip.dwCallbackInst = dwCallbackInst;
    vsip.dwFlags = dwFlags;
    vsip.hVideo = hVideo;

    return (DWORD)NTvideoMessage(hVideo, DVM_STREAM_INIT,
                (LPARAM) (LPVIDEO_STREAM_INIT_PARMS) &vsip,
                sizeof (VIDEO_STREAM_INIT_PARMS));
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamFini | This function terminates streaming
 *     from the specified device channel.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the device handle specified is invalid.
 *   @flag DV_ERR_STILLPLAYING | Indicates there are still buffers in the queue.
 *
 * @comm If there are buffers that have been sent with
 *   <f videoStreamAddBuffer> that haven't been returned to the application,
 *   this operation will fail. Use <f videoStreamReset> to return all
 *   pending buffers.
 *
 *   Each call to <f videoStreamInit> must be matched with a call to
 *   <f videoStreamFini>.
 *
 *   For VIDEO_EXTERNALIN channels, this function is used to
 *   halt capturing of data to the frame buffer.
 *
 *   For VIDEO_EXTERNALOUT channels supporting overlay,
 *   this function is used to disable the overlay.
 *
 * @xref <f videoStreamInit>
 ****************************************************************************/
DWORD WINAPI NTvideoStreamFini(HVIDEO hVideo)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    return (DWORD)NTvideoMessage(hVideo, DVM_STREAM_FINI, 0L, 0L);
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamStart | This function starts streaming on the
 *   specified video device channel.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the device handle specified is invalid.
 *
 *   @flag DV_ERR_NOTSUPPORTED | Indicates the device does not support this
 *         function.
 *
 * @xref <f videoStreamReset> <f videoStreamStop> <f videoStreamAddBuffer> <f videoStreamClose>
/****************************************************************************/
DWORD WINAPI NTvideoStreamStart(HVIDEO hVideo)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    return (DWORD)NTvideoMessage(hVideo, DVM_STREAM_START, 0L, 0L);
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoStreamGetError | This function returns the error
 *   most recently encountered.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *
 * @parm LPDWORD | lpdwErrorID | Specifies a far pointer to the <t DWORD>
 *      used to return the error ID.
 *
 * @parm LPDWORD | lpdwErrorValue | Specifies a far pointer to the <t DWORD>
 *      used to return the number of frames skipped.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following error is defined:
 *   @flag DV_ERR_INVALHANDLE | Indicates the device handle specified is invalid.
 *
 * @comm While streaming video data, a capture
 *      driver can fill buffers faster than the client application can
 *      save the buffers to disk.  In this case, the
 *      DV_ERR_NO_BUFFERS error is returned in <p lpdwErrorID>
 *      and <p lpdwErrorValue> contains a count of the number of
 *      frames missed.  After
 *      receiving this message and returning the error status, a driver
 *      should reset its internal error flag to DV_ERR_OK and
 *      the count of missed frames to zero.
 *
 *      Applications should send this message frequently during capture
 *      since some drivers which do not have access to interrupts use
 *      this message to trigger buffer processing.
 *
 * @xref <f videoOpen>
/****************************************************************************/
DWORD WINAPI NTvideoStreamGetError(HVIDEO hVideo, LPDWORD lpdwError,
        LPDWORD lpdwFramesSkipped)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (IsBadWritePtr (lpdwError, sizeof (DWORD)) )
        return DV_ERR_PARAM1;

    if (IsBadWritePtr (lpdwFramesSkipped, sizeof (DWORD)) )
        return DV_ERR_PARAM2;

    return (DWORD)NTvideoMessage(hVideo, DVM_STREAM_GETERROR, (LPARAM) lpdwError,
        (LPARAM) lpdwFramesSkipped);
}

/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoFrame | This function transfers a single frame
 *   to or from a video device channel.
 *
 * @parm HVIDEO | hVideo | Specifies a handle to the video device channel.
 *      The channel must be of type VIDEO_IN or VIDEO_OUT.
 *
 * @parm LPVIDEOHDR | lpVHdr | Specifies a far pointer to an <t VIDEOHDR>
 *      structure.
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number. The following errors are defined:
 *   @flag DV_ERR_INVALHANDLE | Specified device handle is invalid.
 *   @flag DV_ERR_PARAM1 | The <p lpVDHdr> parameter is invalid or
 *       the <e VIDEOHDR.dwBufferLength> member of the <t VIDEOHDR>
 *       structure is not set to the proper value.
 *
 * @comm Use this function with a VIDEO_IN channel to transfer a single
 *      image from the frame buffer.
 *      Use this function with a VIDEO_OUT channel to transfer a single
 *      image to the frame buffer.
 *
 * @xref <f videoOpen>
/****************************************************************************/
DWORD WINAPI NTvideoFrame (HVIDEO hVideo, LPVIDEOHDR lpVHdr)
{
    if (!hVideo)
        return DV_ERR_INVALHANDLE;

    if (!lpVHdr)
        return DV_ERR_PARAM1;

    if (IsBadWritePtr (lpVHdr, sizeof (VIDEOHDR)) )
        return DV_ERR_PARAM1;

    return (DWORD)NTvideoMessage(hVideo, DVM_FRAME, (LPARAM) lpVHdr,
                        sizeof(VIDEOHDR));
}


// NEW STUFF //





typedef struct tagVS_VERSION
{
      WORD wTotLen;
      WORD wValLen;
      TCHAR szSig[16];
      VS_FIXEDFILEINFO vffInfo;
} VS_VERSION;



/*****************************************************************************
 * @doc EXTERNAL  VIDEO
 *
 * @api DWORD | videoCapDriverDescAndVer | This function gets strings
 *   for the description and version of a video capture driver
 *
 * @parm DWORD | dwDeviceID | Specifies the index of which video driver to get
 *      information about.
 *
 * @parm LPTSTR | lpszDesc | Specifies a place to return the description
 *
 * @parm UINT | cbDesc | Specifies the length of the description string
 *
 * @parm LPTSTR | lpszVer | Specifies a place to return the version
 *
 * @parm UINT | cbVer | Specifies the length of the version string
 *
 * @rdesc Returns zero if the function was successful. Otherwise, it returns
 *   an error number.
 *
 * @comm Use this function to get strings describing the driver and its version
 *
/****************************************************************************/
DWORD WINAPI NTvideoCapDriverDescAndVer(DWORD dwDeviceID, LPTSTR lpszDesc, UINT cbDesc, LPTSTR lpszVer, UINT cbVer)
{
    LPTSTR  lpVersion;
    UINT    wVersionLen;
    BOOL    bRetCode;
    TCHAR   szGetName[MAX_PATH];
    DWORD   dwVerInfoSize;
    DWORD   dwVerHnd;
    TCHAR   szBuf[MAX_PATH];
    BOOL    fGetName;
    BOOL    fGetVersion;

    const static TCHAR szNull[]        = TEXT("");
    const static TCHAR szVideo[]       = TEXT("msvideo");
    const static TCHAR szSystemIni[]   = TEXT("system.ini");
    const static TCHAR szDrivers[]     = TEXT("Drivers32");
          static TCHAR szKey[sizeof(szVideo)/sizeof(TCHAR) + 2];

    fGetName = lpszDesc != NULL && cbDesc != 0;
    fGetVersion = lpszVer != NULL && cbVer != 0;

    if (fGetName)
        lpszDesc[0] = TEXT('\0');
    if (fGetVersion)
        lpszVer [0] = TEXT('\0');

    lstrcpy(szKey, szVideo);
    szKey[sizeof(szVideo)/sizeof(TCHAR) - 1] = TEXT('\0');
    if( dwDeviceID > 0 ) {
        szKey[sizeof(szVideo)/sizeof(TCHAR)] = TEXT('\0');
        szKey[(sizeof(szVideo)/sizeof(TCHAR))-1] = (TCHAR)(TEXT('1') + (dwDeviceID-1) );  // driver ordinal
    }

    if (GetPrivateProfileString(szDrivers, szKey, szNull,
                szBuf, sizeof(szBuf)/sizeof(TCHAR), szSystemIni) < 2)
        return DV_ERR_BADDEVICEID;

    // Copy in the driver name initially, just in case the driver
    // has omitted a description field.
    if (fGetName)
        lstrcpyn(lpszDesc, szBuf, cbDesc);

    // You must find the size first before getting any file info
    dwVerInfoSize = GetFileVersionInfoSize(szBuf, &dwVerHnd);

    if (dwVerInfoSize) {
        LPTSTR   lpstrVffInfo;             // Pointer to block to hold info
        HANDLE  hMem;                     // handle to mem alloc'ed

        // Get a block big enough to hold version info
        hMem          = GlobalAlloc(GMEM_MOVEABLE, dwVerInfoSize);
        lpstrVffInfo  = GlobalLock(hMem);

        // Get the File Version first
        if (GetFileVersionInfo(szBuf, 0L, dwVerInfoSize, lpstrVffInfo)) {
             VS_VERSION FAR *pVerInfo = (VS_VERSION FAR *) lpstrVffInfo;

             // fill in the file version
             wsprintf(szBuf,
                      TEXT("Version:  %d.%d.%d.%d"),
                      HIWORD(pVerInfo->vffInfo.dwFileVersionMS),
                      LOWORD(pVerInfo->vffInfo.dwFileVersionMS),
                      HIWORD(pVerInfo->vffInfo.dwFileVersionLS),
                      LOWORD(pVerInfo->vffInfo.dwFileVersionLS));
             if (fGetVersion)
                lstrcpyn (lpszVer, szBuf, cbVer);
        }

        // Now try to get the FileDescription
        // First try this for the "Translation" entry, and then
        // try the American english translation.
        // Keep track of the string length for easy updating.
        // 040904E4 represents the language ID and the four
        // least significant digits represent the codepage for
        // which the data is formatted.  The language ID is
        // composed of two parts: the low ten bits represent
        // the major language and the high six bits represent
        // the sub language.

        lstrcpy(szGetName, TEXT("\\StringFileInfo\\040904E4\\FileDescription"));

        wVersionLen   = 0;
        lpVersion     = NULL;

        // Look for the corresponding string.
        bRetCode      =  VerQueryValue((LPVOID)lpstrVffInfo,
                        (LPTSTR)szGetName,
                        (void FAR* FAR*)&lpVersion,
                        (UINT FAR *) &wVersionLen);

        if (fGetName && bRetCode && wVersionLen && lpVersion)
           lstrcpyn (lpszDesc, lpVersion, cbDesc);

        // Let go of the memory
        GlobalUnlock(hMem);
        GlobalFree(hMem);
    }
    return DV_ERR_OK;
}



/**************************************************************************
* @doc INTERNAL VIDEO
*
* @api void | videoCleanup | clean up video stuff
*   called in MSVIDEOs WEP()
*
**************************************************************************/
void FAR PASCAL videoCleanup(HTASK hTask)
{
}

//
//  Assist with unicode conversions
//

int Iwcstombs(LPSTR lpstr, LPCWSTR lpwstr, int len)
{
    return WideCharToMultiByte(GetACP(), 0, lpwstr, -1, lpstr, len, NULL, NULL);
}

int Imbstowcs(LPWSTR lpwstr, LPCSTR lpstr, int len)
{
    return MultiByteToWideChar(GetACP(),
                               MB_PRECOMPOSED,
                               lpstr,
                               -1,
                               lpwstr,
                               len);
}




DWORD WINAPI NTvidxFrame (
   HVIDEOX       hVideo,
   //LPVIDEOHDREX lpVHdr) {
   LPVIDEOHDR lpVHdr) {
    return NTvideoFrame(hVideo, (LPVIDEOHDR) lpVHdr);
}

DWORD WINAPI NTvidxAddBuffer (
   HVIDEOX       hVideo,
   PTR32         lpVHdr,
   DWORD         cbData) {

    NTvideoStreamPrepareHeader(hVideo, lpVHdr, cbData);
    return NTvideoStreamAddBuffer(hVideo, lpVHdr, cbData);
}

DWORD WINAPI NTvideoSetRect(HVIDEO h, DWORD msg, RECT rc)
{
    return (DWORD)NTvideoMessage (h, msg, (LPARAM)(LPVOID)&rc, VIDEO_CONFIGURE_SET);
}

DWORD WINAPI NTvidxSetRect(
    HVIDEOX     hVideo,
    UINT        uMsg,
    int         left,
    int         top,
    int         right,
    int         bottom)
{
    RECT rc = {left, top, right, bottom};
    return NTvideoSetRect(hVideo, uMsg, rc);
}

#define USE_HW_BUFFERS 1
// #define USE_CONTIG_ALLOC	// can we do this in 32-bit land?


#define THKHDR(ii) ((LPTHKVIDEOHDR)((LPBYTE)ptv->paHdrs + (ii * ptv->cbAllocHdr)))

static struct _thk_local {
    THKHVIDEO *    pMruHandle;
    THKHVIDEO *    pFreeHandle;
    int            nPoolSize;
    int            nAllocCount;
    } tl;

#define V_HVIDEO(ptv) if (!ptv || ptv->Stamp != THKHVIDEO_STAMP) { \
             AuxDebugEx (-1, DEBUGLINE "V_HVIDEO failed hVideo=%08lx\r\n", ptv); \
             return MMSYSERR_INVALHANDLE; \
        }
#define V_HEADER(ptv,p32Hdr,ptvh) if (!(ptvh = NTvidxLookupHeader(ptv,p32Hdr))) { \
            AuxDebugEx(-1, DEBUGLINE "V_HEADER(%08lX,%08lX) failed!", ptv, p32Hdr); \
            return MMSYSERR_INVALPARAM; \
        }

//
LPTHKHVIDEO DATAFROMHANDLE(HVIDEOX hv)
{
    THKHVIDEO *ptv;
    PHANDLEINFO pinfo;

    EnterCriticalSection(&csHandles);

    ptv = NULL;
    pinfo = g_pHandles;
    while (pinfo) {
        if ((pinfo)->hv == hv) {
            ptv = &(pinfo)->tv;
        }
        pinfo = pinfo->pNext;
    }

    LeaveCriticalSection(&csHandles);

    return ptv;
}


DWORD WINAPI NTvidxAllocBuffer (
   HVIDEOX     hv,
   UINT        ii,
   PTR32 FAR * pp32Hdr,
   DWORD       cbData)
{

    LPTHKHVIDEO ptv = DATAFROMHANDLE(hv);
    LPTHKVIDEOHDR ptvh;
   #ifdef USE_CONTIG_ALLOC
    CPA_DATA cpad;
   #endif

    AuxDebugEx (3, DEBUGLINE "vidxAllocBuffer(%08lx,%d,%08lx,%08lx)\r\n",
                ptv, ii, p32Hdr, cbData);

    *pp32Hdr = 0;

    V_HVIDEO(ptv);
    if (ii >= ptv->nHeaders || ptv->paHdrs == NULL)
        return MMSYSERR_NOMEM;

    ptvh = THKHDR(ii);

  #ifdef USE_HW_BUFFERS
    // try to allocate a buffer on hardware
    //
    if (NTvideoMessage (ptv->hVideo, DVM_STREAM_ALLOCBUFFER,
                (LPARAM) (LPVOID)&ptvh->dwTile, cbData)
        == DV_ERR_OK)
    {
        // if we got hw buffers, dwMemHandle == 0 && dwTile != 0
        // we will depend on this to know who to free the memory to
        // (for phys mem both will be non zero, while for GlobalMem
        // both will be zero)
        //
        ptvh->dwMemHandle = 0;
        ptvh->p16Alloc = (PTR16)ULongToPtr(ptvh->dwTile);
        ptvh->p32Buff = MapSL(ptvh->p16Alloc);
        *pp32Hdr = (BYTE *) ptv->p32aHdrs + (ii * ptv->cbAllocHdr);
        return MMSYSERR_NOERROR;
    }

    // if we have more than 1 buffer, and
    // the first buffer was on hardware.  if we fail
    // to allocate a buffer on hardware, return failure
    //
    // !!! This might upset somebody who doesn't get a min # of buffers
    if ((ii > 0) &&
        (0 == THKHDR(0)->dwMemHandle) &&
        (0 != THKHDR(0)->dwTile))
        return MMSYSERR_NOMEM;
  #endif

  #ifdef USE_CONTIG_ALLOC
    cpad.dwMemHandle = 0;
    cpad.dwPhysAddr = 0;
    // first try to get contig memory
    //
    ptvh->p32Buff = capPageAllocate (PageContig | PageFixed | PageUseAlign,
                                     (cbData + 4095) >> 12,
                                     0xFFFFF,  // max phys addr mask (fffff is no max addr)
                                     &cpad);
    if (ptvh->p32Buff)
    {
        ptvh->dwMemHandle = cpad.dwMemHandle;
        ptvh->dwTile = capTileBuffer (ptvh->p32Buff, cbData);
        ptvh->p16Alloc = PTR_FROM_TILE(ptvh->dwTile);
        if ( ! ptvh->p16Alloc)
        {
            capPageFree (ptvh->dwMemHandle);
            ptvh->dwMemHandle = 0;
            ptvh->dwTile = ptvh->p32Buff = 0;
        }
        else
        {
            // put the physical address into the the header so that
            // it can be used on the 32 bit side
            //
            ptvh->vh.dwReserved[3] = cpad.dwPhysAddr;

            AuxDebugEx (4, DEBUGLINE "contig alloc phys=%lX lin=%lX ptr=%lX cb=%ld\r\n",
                        cpad.dwPhysAddr, ptvh->p32Buff, ptvh->p16Alloc, cbData);
        }
    }

    // if we failed to get contiguous memory,
    // return NOMEM if there is a sufficient number of buffers
    // otherwise use GlobalAlloc
    // !!! The ideal thing to do is only use contig memory buffers until 
    // they're all full, then fall back on more non-contig buffers
    //
    if ( ! ptvh->p32Buff)
        if (ii >= MIN_VIDEO_BUFFERS)
            return MMSYSERR_NOMEM;
        else
   #endif
        {
            ptvh->dwTile = ptvh->dwMemHandle = 0;
            ptvh->p16Alloc = GlobalAllocPtr(GMEM_FIXED | GMEM_ZEROINIT | GMEM_SHARE, cbData);
            if ( ! ptvh->p16Alloc)
               return MMSYSERR_NOMEM;

            ptvh->p32Buff = MapSL(ptvh->p16Alloc);

            AuxDebugEx (4, DEBUGLINE "global alloc lin=%lX ptr=%04X:%04X cb=%ld\r\n",
                        ptvh->p32Buff, ptvh->p16Alloc, cbData);
        }

    *pp32Hdr = (BYTE *) ptv->p32aHdrs + (ii * ptv->cbAllocHdr);

    return MMSYSERR_NOERROR;
}

DWORD WINAPI NTvidxFreePreviewBuffer (
    HVIDEOX	  hv,
    PTR32         p32)
{
    LPTHKHVIDEO ptv = DATAFROMHANDLE(hv);
    LPTHKVIDEOHDR ptvh;

    AuxDebugEx (3, DEBUGLINE "vidxFreePreviewBuffer(%08lx,%08lx)\r\n",
                ptv, p32);

    V_HVIDEO(ptv);

    ptvh = ptv->pPreviewHdr;

    if (! ptvh ) 
        return MMSYSERR_NOMEM;

    if (ptvh->p16Alloc)
        GlobalFreePtr (ptvh->p16Alloc);

    GlobalFreePtr (ptvh);

    ptv->pPreviewHdr = NULL;

    return MMSYSERR_NOERROR;
}

DWORD WINAPI NTvidxAllocPreviewBuffer (
   HVIDEOX      hVideo,
   PTR32 FAR *  p32,
   UINT         cbHdr,
   DWORD        cbData)
{
    LPTHKHVIDEO ptv = DATAFROMHANDLE(hVideo);
    LPTHKVIDEOHDR ptvh;

    AuxDebugEx (3, DEBUGLINE "vidxAllocPreviewBuffer(%08lx,%08lx,%08lx)\r\n",
                ptv, p32, cbData);

    cbHdr = max(cbHdr, sizeof(THKVIDEOHDR));

    *p32 = 0;

    V_HVIDEO(ptv);

    if (ptv->pPreviewHdr)
        NTvidxFreePreviewBuffer (hVideo, 0);

    ptvh = (LPVOID) GlobalAllocPtr(GPTR | GMEM_SHARE, cbHdr);
    if (!ptvh)
       return MMSYSERR_NOMEM;

    ptv->pPreviewHdr = ptvh;

    ptvh->dwTile = ptvh->dwMemHandle = 0;
    ptvh->p16Alloc = GlobalAllocPtr(GPTR | GMEM_SHARE, cbData);
    if ( ! ptvh->p16Alloc)
       {
       GlobalFreePtr (ptvh);
       return MMSYSERR_NOMEM;
       }

    ptvh->p32Buff = MapSL(ptvh->p16Alloc);

    AuxDebugEx (4, DEBUGLINE "global alloc lin=%lX ptr=%04X:%04X cb=%ld\r\n",
                ptvh->p32Buff, ptvh->p16Alloc, cbData);

    *p32 = ptvh->p32Buff;
    return MMSYSERR_NOERROR;
}

DWORD WINAPI NTvidxAllocHeaders(
   HVIDEOX     hVideo,
   UINT        nHeaders,
   UINT        cbAllocHdr,
   PTR32 FAR * lpHdrs)
{
    LPTHKHVIDEO ptv = DATAFROMHANDLE(hVideo);
    LPVOID      lpv;

    AuxDebugEx (3, DEBUGLINE "vidxAllocHeaders(%08lx,%d,%08lx)\r\n",
                ptv, nHeaders, lpHdrs);

    V_HVIDEO(ptv);

    if ( ! nHeaders ||
        cbAllocHdr < sizeof(THKVIDEOHDR) ||
        cbAllocHdr & 3 ||
        (cbAllocHdr * nHeaders) > 0x10000l)
        return MMSYSERR_INVALPARAM;

    assert (ptv->paHdrs == NULL);

    lpv = GlobalAllocPtr (GMEM_FIXED | GMEM_ZEROINIT | GMEM_SHARE,
                          cbAllocHdr * nHeaders);

    if (!lpv)
        return MMSYSERR_NOMEM;

    ptv->nHeaders   = nHeaders;
    ptv->cbAllocHdr = cbAllocHdr;
    //ptv->cbVidHdr   = sizeof(VIDEOHDREX);
    ptv->cbVidHdr   = sizeof(VIDEOHDR);
    ptv->p32aHdrs   = MapSL(lpv);
    ptv->paHdrs     = lpv;

    AuxDebugEx (4, DEBUGLINE "headers allocated. p16=@%lX, p32=%lX\r\n", lpv, ptv->p32aHdrs);

    *lpHdrs = ptv->p32aHdrs;

    return MMSYSERR_NOERROR;
}

STATICFN VOID PASCAL FreeBuffer (
    LPTHKHVIDEO ptv,
    LPTHKVIDEOHDR ptvh)
{
    assert (!(ptvh->vh.dwFlags & VHDR_PREPARED));

  #ifdef USE_CONTIG_ALLOC
    //
    // if this buffer was pageAllocated (as indicated by dwMemHandle
    // is non-zero)
    //
    if (ptvh->dwMemHandle)
    {
        if (ptvh->dwTile)
            capUnTileBuffer (ptvh->dwTile), ptvh->dwTile = 0;

        capPageFree (ptvh->dwMemHandle), ptvh->dwMemHandle = 0;
    }
    else
  #endif
  #ifdef USE_HW_BUFFERS
    //
    // if this buffer was allocated from capture hardware
    // (as indicated by dwMemHandle == 0 && dwTile != 0)
    //
    if (ptvh->dwTile != 0)
    {
        assert (ptvh->dwMemHandle == 0);
        NTvideoMessage (ptv->hVideo, DVM_STREAM_FREEBUFFER, 
                (LPARAM) ULongToPtr(ptvh->dwTile), 0);
        ptvh->dwTile = 0;
    }
    else
  #endif
    //
    // if this buffer was allocated from global memory
    //
    {
        if (ptvh->p16Alloc)
            GlobalFreePtr (ptvh->p16Alloc);
    }

    ptvh->p16Alloc = NULL;
    ptvh->p32Buff  = 0;
}

DWORD WINAPI NTvidxFreeHeaders(
   HVIDEOX hv)
{
    LPTHKHVIDEO ptv = DATAFROMHANDLE(hv);
    UINT          ii;
    LPTHKVIDEOHDR ptvh;

    AuxDebugEx (3, DEBUGLINE "vidxFreeHeaders(%08lx)\r\n", ptv);

    V_HVIDEO(ptv);

    if ( ! ptv->paHdrs)
        return MMSYSERR_ERROR;

    for (ptvh = THKHDR(ii = 0); ii < ptv->nHeaders; ++ii, ptvh = THKHDR(ii))
    {
        if (ptvh->vh.dwFlags & VHDR_PREPARED)
        {
            NTvideoStreamUnprepareHeader (ptv->hVideo, (LPVOID)ptvh, ptv->cbVidHdr);
            ptvh->vh.dwFlags &= ~VHDR_PREPARED;
        }
        FreeBuffer (ptv, ptvh);
    }

    GlobalFreePtr (ptv->paHdrs);
    ptv->paHdrs = NULL;
    ptv->p32aHdrs = 0;
    ptv->nHeaders = 0;

    return MMSYSERR_NOERROR;

}

STATICFN LPTHKVIDEOHDR PASCAL NTvidxLookupHeader (
    LPTHKHVIDEO ptv,
    DWORD_PTR p32Hdr)
{
    WORD ii;

    AuxDebugEx (5, DEBUGLINE "vidxLookupHeader(%08lx,%08lx)\r\n", ptv, p32Hdr);

    if ( ! p32Hdr || ! ptv->paHdrs || ! ptv->cbAllocHdr)
        return NULL;

    if ((p32Hdr - (DWORD_PTR) ptv->p32aHdrs) % ptv->cbAllocHdr)
        return NULL;

    ii = (WORD)((p32Hdr - (DWORD_PTR) ptv->p32aHdrs) / ptv->cbAllocHdr);
    if (ii > ptv->nHeaders)
        return NULL;

    return THKHDR(ii);
}
            
DWORD WINAPI NTvidxFreeBuffer (
    HVIDEOX       hv,
    DWORD_PTR         p32Hdr)
{
    LPTHKHVIDEO ptv = DATAFROMHANDLE(hv);
    LPTHKVIDEOHDR ptvh;

    AuxDebugEx (3, DEBUGLINE "vidxFreeBuffer(%08lx,%08lx)\r\n",
                ptv, p32Hdr);

    V_HVIDEO(ptv);
    V_HEADER(ptv,p32Hdr,ptvh);

    // single frame buffers are never prepared!
    //
    assert (!(ptvh->vh.dwFlags & VHDR_PREPARED));

    FreeBuffer (ptv, ptvh);
    return MMSYSERR_NOERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\capture\vidx.h ===
/*+ vidx.h
 *
 * structures and prototypes for thunkable videoXXX api's
 *
 *-================ Copyright 1995 Microsoft Corp. ======================*/

#ifndef _VIDX_H
#define _VIDX_H

// Force C declarations for C++
//
#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

#ifdef WIN32
  typedef unsigned __int64 QUADWORD;
  #define HVIDEOX HVIDEO
  #define PTR32   LPVOID
  #define PTR16   LPVOID
#else
  #define QUADWORD struct { DWORD lo; DWORD hi; }
  #undef  WINAPI
  #define WINAPI FAR PASCAL _export
  typedef struct _thk_hvideo FAR * LPTHKHVIDEO;
  #undef  HVIDEO
  #define HVIDEOX LPTHKHVIDEO
  #define PTR32   DWORD
  #define PTR16   LPVOID
#endif

// 'cooked' SMPTE timecode.  this is organized so that
// timecode values can be compared as a single QUAD operation
// so long as frame rates match.
//
// it is treated as a fixed point 48bit binary real number
// with the decimal point always at 32.16
//
// the only non-integral frame rate is 29.97 (NTSC) which is
// indicated by 0 in the frame rate field.
//
typedef union _vidxtimecode {
   struct {
      WORD  wFrameRate;  // 0 == 29.97 frame rate
      WORD  wFrameFract; // fractional frames. range 0-FFFF
      DWORD dwFrames;    // frame count.
      };
   QUADWORD qw;          // for copy/compare operations.
   } VIDXTIMECODE;

// timecode + userdata
//
typedef struct _vidxtimecodedata {
   VIDXTIMECODE time;
   DWORD    dwSMPTEFlags;
   DWORD    dwUser;
   } VIDXTIMECODEDATA;

// structure of memory shared between driver and quartz
// capture. used to allow Quartz to slave a clock to
// the vsync interrupt.
//
// This memory region will be locked down prior to being
// passed to the driver in Win95 so that it may be accessed at
// interrupt time. Because of the way the thunking layer works,
// it is not advisable for the driver to attempt to lock this
// memory. The memory will be visible in all process contexts.
//
// The driver is responsible for updating nVsyncCount on each VSYNC
// or as often as possible.  Whenever nVsyncCount is updated, qwSystemTime
// should be updated also, and if SMPTE timecode corresponding to this VSYNC
// is available, tcdata should be updated also.  If SMPTE timecode for this
// VSYNC is NOT available, dwFlags should be changed to indicate there is no
// timecode infomation (clear the VSYNCMEM_FLAGS_SMPTE bit of dwFlags)
//
// While updating, the driver should set the low bit of the dwInUse flag to 1.
// 
// The driver should set the dwFlags field to indicated the presense
// of valid nVsyncCount/qwSystemTime and tcdata.
//
// The driver is allowed to choose between setting qwSystemTime to the return
// value of QueryPerformanceCounter or the value of the Pentium tick.  It is 
// recommended to use QPC on NT as the pentium tick is not necessarily available
// to application code in that environment.
//
// When the Quartz capture wrapper reads from this shared memory, it will check
// the dwInUse flag and also read twice comparing results to insure that it reads
// valid, consistent data. 
//
typedef struct _vsyncmem {
   DWORD        dwInUse;       // low bit is non-zero when the driver is
                               // updating this struture.  other bits reserved.

   DWORD        nVsyncCount;  // VSYNC count
   QUADWORD     qwSystemTime; // QueryPerformanceCounter value at this VSYNC

   DWORD        dwFlags;      // flags indicate which fields are in use
   #define VSYNCMEM_TIME_MASK    0x0000000F // mask to get type of qwSystemTime
   #define VSYNCMEM_TIME_QPC     0x00000001 // qwSystemTime is QueryPerformanceCounter
   #define VSYNCMEM_TIME_PENTIUM 0x00000002 // qwSystemTime is pentium CPU tick

   #define VSYNCMEM_FLAG_SMPTE   0x00000010  // set if tcdata is valid

   DWORD        dwSpare;      // spare to align the next field on Quad boundary
   VIDXTIMECODEDATA tcdata;   // SMPTE timecode associated with this VSYNC
   } VSYNCMEM;

// DVM_xxx messages are defined in VFW.H
//
#ifndef DVM_CONFIGURE_START
  #define DVM_CONFIGURE_START 0x1000
#endif
#define DVM_CLOCK_BUFFER     (UINT)(DVM_CONFIGURE_START+0x10)
   //
   // dw1 = ptr to VSYNCMEM. ptr is valid until next DVM_CLOCK_BUFFER message
   //       or until driver is closed.
   // dw2 = size of VSYNCMEM buffer
   //
   // driver should return MMSYSERR_NOERROR (0) to indicate that it is
   // capable of keeping the contents of the VSYNCMEM buffer up to date.
   //


// legacy VFW capture filter will NOT make any attempt at time code/line 21
//========================================================================
#if 0
// The extended video header has extra fields that can be used to
// return CC (Line21) and SMPTE timcode information along with captured
// video frames.
//
// the first time the driver gets a DVM_STREAM_PREPAREHEADER and/or DVM_STREAM_ADDBUFFER
// message, it will contain sizeof(VIDEOHDREX) as dwParam2, if the driver fails
// this message, all subsequent messages will use sizeof(VIDEOHDR) as the videoheader size.
// drivers that do not fail this message, may still not be checking the header size 
// and responding properly to the new fields.  
//
// Drivers that do support the extra fields in VIDEOHDREX are responsible for setting
// bits in dwExtraMask to indicate which extra fields have valid data, this should be
// done BEFORE setting the 'done' bit in the VIDEOHDR
//
typedef struct _videohdrex {
  LPBYTE lpData;
  DWORD  dwBufferLength;
  DWORD  dwBytesUsed;
  DWORD  dwTimeCaptured;
  DWORD  dwUser;
  DWORD  dwFlags;
  DWORD  dwReserved[4];
  //
  // fields above this match the VIDEOHDR
  //

  // bits in this mask indicate which extra header fields
  // have data in them
  DWORD  dwExtraMask;

  // accumulated line21 info since last header. older data
  // is in smaller index'd elements.  the mask indicates
  // how many words of line21 are filled in the array.
  // if both CC and OTHER information are being captured
  // then CC data is in even elements and OTHER data is in
  // odd elements.
  //
  #define VHDR_EXTRA_LINE21     0x0000F  // count of wLine21 members that have data
  #define VHDR_EXTRA_CC         0x00010  // set when data is from CC field
  #define VHDR_EXTRA_OTHER      0x00020  // set when data is program info field
  WORD   wLine21[10]; // this needs to be a multiple of 4+2 so
                      // that the timecode field below gets aligned
                      // properly

  // primary and secondary timecode + userdata
  // timecodeA is in element [0] of the array
  //
  #define VHDR_EXTRA_TIMECODEA  0x10000
  #define VHDR_EXTRA_TIMECODEB  0x20000
  VIDXTIMECODEDATA timecode[2];

} VIDEOHDREX, FAR * LPVIDEOHDREX;
#endif
//========================================================================

// VIDEOHDR + extra fields used by the thunking layer
//
typedef struct _thk_videohdr {
    //VIDEOHDREX vh;
    VIDEOHDR vh;
    PTR32      p32Buff;
    PTR16      p16Alloc;
    DWORD      dwMemHandle;
    DWORD      dwTile;
    DWORD_PTR  dwUser;		// use this instead of dwUser in VIDEOHDR
				// because some drivers trash it! (Miro DC30)
    DWORD      dwIndex;		// which header is this in our array?
} THKVIDEOHDR, FAR *LPTHKVIDEOHDR;

DWORD WINAPI vidxAllocHeaders(
   HVIDEOX     hVideo,
   UINT        nHeaders,
   UINT        cbHeader,
   PTR32 FAR * lpHdrs);
DWORD WINAPI NTvidxAllocHeaders(
   HVIDEOX     hVideo,
   UINT        nHeaders,
   UINT        cbHeader,
   PTR32 FAR * lpHdrs);

DWORD WINAPI vidxFreeHeaders(
   HVIDEOX hv);
DWORD WINAPI NTvidxFreeHeaders(
   HVIDEOX hv);

DWORD WINAPI vidxAllocBuffer (
   HVIDEOX     hv,
   UINT        iHdr,
   PTR32 FAR * pp32Hdr,
   DWORD       dwSize);
DWORD WINAPI NTvidxAllocBuffer (
   HVIDEOX     hv,
   UINT        iHdr,
   PTR32 FAR * pp32Hdr,
   DWORD       dwSize);

DWORD WINAPI vidxFreeBuffer (
   HVIDEOX hv,
   DWORD   p32Hdr);
DWORD WINAPI NTvidxFreeBuffer (
   HVIDEOX hv,
   DWORD_PTR p32Hdr);

DWORD WINAPI vidxSetRect (
   HVIDEOX hv,
   UINT    wMsg,
   int     left,
   int     top,
   int     right,
   int     bottom);
DWORD WINAPI NTvidxSetRect (
   HVIDEOX hv,
   UINT    wMsg,
   int     left,
   int     top,
   int     right,
   int     bottom);

DWORD WINAPI vidxFrame (
   HVIDEOX       hVideo,
   //LPVIDEOHDREX lpVHdr);
   LPVIDEOHDR lpVHdr);
DWORD WINAPI NTvidxFrame (
   HVIDEOX       hVideo,
   //LPVIDEOHDREX lpVHdr);
   LPVIDEOHDR lpVHdr);

DWORD WINAPI vidxAddBuffer (
   HVIDEOX       hVideo,
   PTR32         lpVHdr,
   DWORD         cbData);
DWORD WINAPI NTvidxAddBuffer (
   HVIDEOX       hVideo,
   PTR32         lpVHdr,
   DWORD         cbData);

DWORD WINAPI vidxAllocPreviewBuffer (
   HVIDEOX      hVideo,
   PTR32 FAR *  lpBits,
   UINT         cbHdr,
   DWORD        cbData);
DWORD WINAPI NTvidxAllocPreviewBuffer (
   HVIDEOX      hVideo,
   PTR32 FAR *  lpBits,
   UINT         cbHdr,
   DWORD        cbData);

DWORD WINAPI vidxFreePreviewBuffer (
   HVIDEOX     hVideo,
   PTR32       lpBits);
DWORD WINAPI NTvidxFreePreviewBuffer (
   HVIDEOX     hVideo,
   PTR32       lpBits);

DWORD WINAPI vidxSetupVSyncMem (
    HVIDEOX     hVideo,
    PTR32 FAR * ppVsyncMem); // NULL to release VSYNC mem
DWORD WINAPI NTvidxSetupVSyncMem (
    HVIDEOX     hVideo,
    PTR32 FAR * ppVsyncMem); // NULL to release VSYNC mem


// needed for Win95 thunking
//
VOID WINAPI OpenMMDEVLDR(void);
VOID WINAPI CloseMMDEVLDR(void);

#ifdef __cplusplus
}
#endif

#endif // _VIDX_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\capture\vc50\msviddrv.h ===
/****************************************************************************/
/*                                                                          */
/*        MSVIDDRV.H - Include file for messages to video drivers           */
/*                                                                          */
/*        Note: You must include WINDOWS.H before including this file.      */
/*                                                                          */
/*        Copyright (c) 1990-1994, Microsoft Corp.  All rights reserved.    */
/*                                                                          */
/****************************************************************************/

#ifndef _INC_MSVIDDRV
#define _INC_MSVIDDRV	50	/* version number */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif	/* __cplusplus */

/****************************************************************************

                 Digital Video Messages (DVM_)

****************************************************************************/

// General messages
#define DVM_START                         DRV_USER
#define DVM_GETERRORTEXT                  (DVM_START + 0)
#define DVM_GETVIDEOAPIVER                (DVM_START + 1)

// This value increments each time the API changes
// It is passed to the driver in the DRV_OPEN message.
#define VIDEOAPIVERSION 		3

// General messages applicable to all channel types
#define DVM_DIALOG			(DVM_START + 100)
#define DVM_CONFIGURESTORAGE		(DVM_START + 101)
#define DVM_GET_CHANNEL_CAPS         	(DVM_START + 102)
#define DVM_UPDATE         		(DVM_START + 103)

// Single frame msg
#define DVM_FRAME			(DVM_START + 200)

// stream messages
#define DVM_STREAM_MSG_START            (DVM_START + 300)
#define DVM_STREAM_MSG_END              (DVM_START + 399)

#define DVM_STREAM_ADDBUFFER            (DVM_START + 300)
#define DVM_STREAM_FINI                 (DVM_START + 301)
#define DVM_STREAM_GETERROR             (DVM_START + 302)
#define DVM_STREAM_GETPOSITION          (DVM_START + 303)
#define DVM_STREAM_INIT                 (DVM_START + 304)
#define DVM_STREAM_PREPAREHEADER        (DVM_START + 305)
#define DVM_STREAM_RESET                (DVM_START + 306)
#define DVM_STREAM_START                (DVM_START + 307)
#define DVM_STREAM_STOP                 (DVM_START + 308)
#define DVM_STREAM_UNPREPAREHEADER      (DVM_START + 309)

// Following added post VFW1.1a
#define DVM_STREAM_ALLOCHDRANDBUFFER    (DVM_START + 310)
#define DVM_STREAM_FREEHDRANDBUFFER     (DVM_START + 311)

// NOTE that DVM_CONFIGURE numbers will start at 0x1000 (for configure API)


/****************************************************************************

                            Open Definitions

****************************************************************************/
#define OPEN_TYPE_VCAP mmioFOURCC('v', 'c', 'a', 'p')

// The following structure is the same as IC_OPEN
// to allow compressors and capture devices to share
// the same DriverProc.

typedef struct tag_video_open_parms {
    DWORD               dwSize;         // sizeof(VIDEO_OPEN_PARMS)
    FOURCC              fccType;        // 'vcap'
    FOURCC              fccComp;        // unused
    DWORD               dwVersion;      // version of msvideo opening you
    DWORD               dwFlags;        // channel type
    DWORD               dwError;        // if open fails, this is why
} VIDEO_OPEN_PARMS, FAR * LPVIDEO_OPEN_PARMS;

typedef struct tag_video_geterrortext_parms {
       DWORD  dwError;          // The error number to identify
#ifdef WIN32
       LPWSTR lpText;		// Text buffer to fill
#else
       LPSTR lpText;		// Text buffer to fill
#endif
       DWORD  dwLength;		// Size of text buffer in characters
} VIDEO_GETERRORTEXT_PARMS, FAR * LPVIDEO_GETERRORTEXT_PARMS;

typedef struct tag_video_stream_init_parms {
       DWORD  dwMicroSecPerFrame;
       DWORD_PTR  dwCallback;
       DWORD_PTR  dwCallbackInst;
       DWORD  dwFlags;
       HVIDEO  hVideo;
} VIDEO_STREAM_INIT_PARMS, FAR * LPVIDEO_STREAM_INIT_PARMS;

typedef struct tag_video_configure_parms {
       LPDWORD  lpdwReturn;	// Return parameter from configure MSG.
       LPVOID	lpData1;	// Pointer to data 1.
       DWORD	dwSize1;	// size of data buffer 1.
       LPVOID	lpData2;	// Pointer to data 2.
       DWORD	dwSize2;	// size of data buffer 2.
} VIDEOCONFIGPARMS, FAR * LPVIDEOCONFIGPARMS;

#ifdef __cplusplus
}                       /* End of extern "C" { */
#endif	/* __cplusplus */

#endif  /* _INC_MSVIDDRV */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\capture\thunk.h ===
/****************************************************************************
 *
 *   thunk.h
 * 
 *   macros, defines, prototypes for avicap 16:32 thunks
 *
 *   Copyright (c) 1994 - 1997  Microsoft Corporation.  All Rights Reserved.
 *
 ***************************************************************************/

#ifndef _THUNK_H
#define _THUNK_H

typedef LPVOID P16VOID;
typedef DWORD  P32VOID;
//#define P16VOID LPVOID
//#define P32VOID DWORD

#include "common.h"

// thunk helpers exported from the kernel
//
DWORD WINAPI GetCurrentProcessID(void);  // KERNEL
DWORD WINAPI SetWin32Event(DWORD hEvent); // KERNEL

P16VOID  WINAPI MapLS(P32VOID);
P16VOID  WINAPI UnMapLS(P16VOID);
P32VOID  WINAPI MapSL(P16VOID);

// thunk helpers in thunka.asm
//
DWORD FAR PASCAL capTileBuffer (
    DWORD dwLinear,
    DWORD dwSize);

#define PTR_FROM_TILE(dwTile) (LPVOID)(dwTile & 0xFFFF0000)

void  FAR PASCAL capUnTileBuffer (
    DWORD dwTileInfo);

BOOL  FAR PASCAL capPageFree (
    DWORD dwMemHandle);

typedef struct _cpa_data {
    DWORD dwMemHandle;
    DWORD dwPhysAddr;
    } CPA_DATA, FAR * LPCPA_DATA;

DWORD FAR PASCAL capPageAllocate (  // returns ptr to allocated memory
    DWORD   dwFlags,
    DWORD   dwPageCount,
    DWORD   dwMaxPhysPageMask,
    LPCPA_DATA pcpad);   // returned mem handle & phys address

// flags for capPageAllocate, same as flags from vmm.inc
//
#define PageUseAlign    0x00000002
#define PageContig      0x00000004
#define PageFixed       0x00000008

#ifdef WIN32
void NTAPI ThunkTerm(void);
BOOL NTAPI ThunkInit(void);
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\co\co.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

//
// Quartz wrapper for old video compressors - CO
//

#include <streams.h>
#ifdef FILTER_DLL
// define the GUIDs for streams and my CLSID in this file
#include <initguid.h>
#endif

#include <windowsx.h>
#include <vfw.h>
#include "..\dec\msvidkey.h"

//#include <olectl.h>
//#include <olectlid.h>
#include "co.h"

#define A_NUMBER_BIGGER_THAN_THE_KEYFRAME_RATE 1000000

// setup data now done by the class manager unless building separate DLLS
#if 0

const AMOVIESETUP_MEDIATYPE
sudAVICoType =  { &MEDIATYPE_Video      // clsMajorType
                , &MEDIASUBTYPE_NULL }; // clsMinorType

const AMOVIESETUP_PIN
psudAVICoPins[] =  { { L"Input"             // strName
                     , FALSE                // bRendered
                     , FALSE                // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Output"            // strConnectsToPin
                     , 1                    // nTypes
                     , &sudAVICoType }      // lpTypes
                   , { L"Output"            // strName
                     , FALSE                // bRendered
                     , TRUE                 // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Input"             // strConnectsToPin
                     , 1                    // nTypes
                     , &sudAVICoType } };   // lpTypes

const AMOVIESETUP_FILTER
sudAVICo  = { &CLSID_AVICo          // clsID
            , L"AVI Compressor"     // strName
            , MERIT_DO_NOT_USE      // dwMerit
            , 2                     // nPins
            , psudAVICoPins };      // lpPin

#endif


#ifdef FILTER_DLL
// list of class ids and creator functions for class factory
CFactoryTemplate g_Templates[] = {
    {L"AVI Compressor", &CLSID_AVICo, CAVICo::CreateInstance, NULL, 0},
#ifdef WANT_DIALOG
    {L"AVI Compressor Property Page", &CLSID_ICMProperties, CICMProperties::CreateInstance, NULL, NULL}
#endif
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

// exported entry points for registration and
// unregistration (in this case they only call
// through to default implmentations).
//
STDAPI DllRegisterServer()
{
  return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
  return AMovieDllRegisterServer2( FALSE );
}

#endif

// --- CAVICo ----------------------------------------

CAVICo::CAVICo(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
    : CTransformFilter(pName, pUnk, CLSID_AVICo),
      CPersistStream(pUnk, phr),
      m_hic(NULL),
      m_lpBitsPrev(NULL),
      m_lpbiPrev(NULL),
      m_fStreaming(FALSE),
      m_fDialogUp(FALSE),
      m_fCacheHic(FALSE),
      m_fOfferSetFormatOnly(FALSE),
      m_fInICCompress(FALSE),
      m_lpState(NULL),
      m_cbState(0),
      m_fCompressorInitialized(FALSE),
      m_fDecompressorInitialized(FALSE)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the CO filter")));
    _fmemset(&m_compvars, 0, sizeof(m_compvars));

    m_compvars.cbSize = sizeof(m_compvars);
    m_compvars.dwFlags = ICMF_COMPVARS_VALID;
    m_compvars.lQ = ICQUALITY_DEFAULT;
    m_compvars.lKey = -1;
}

CAVICo::~CAVICo()
{
    if(m_fStreaming) {
        ReleaseStreamingResources();
    }

    if (m_hic) {
        ICClose(m_hic);
    }

    if (m_lpState)
        QzTaskMemFree(m_lpState);
    m_lpState = NULL;

    DbgLog((LOG_TRACE,1,TEXT("*Destroying the CO filter")));
}

STDMETHODIMP CAVICo::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    DbgLog((LOG_TRACE,9,TEXT("somebody's querying my interface")));
    if (riid == IID_IAMVfwCompressDialogs) {
        DbgLog((LOG_TRACE,5,TEXT("QI for IAMVfwCompressDialogs")));
	return GetInterface((IAMVfwCompressDialogs *)this, ppv);
#ifdef WANT_DIALOG
    } else if (riid == IID_ISpecifyPropertyPages) {
        DbgLog((LOG_TRACE,5,TEXT("QI for ISpecifyPropertyPages")));
        return GetInterface((ISpecifyPropertyPages *) this, ppv);
    } else if (riid == IID_IICMOptions) {
        DbgLog((LOG_TRACE,5,TEXT("QI for IICMOptions")));
        return GetInterface((IICMOptions *) this, ppv);
#endif
    } else if (riid == IID_IPersistPropertyBag) {
        DbgLog((LOG_TRACE,3,TEXT("VfwCap::QI for IPersistPropertyBag")));
        return GetInterface((IPersistPropertyBag*)this, ppv);
    } else if(riid == IID_IPersistStream) {
        DbgLog((LOG_TRACE,3,TEXT("VfwCap::QI for IPersistStream")));
        return GetInterface((IPersistStream *) this, ppv);
    } else {
        return CTransformFilter::NonDelegatingQueryInterface(riid, ppv);
    }
}


// this goes in the factory template table to create new instances
CUnknown * CAVICo::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CAVICo(TEXT("VFW compression filter"), pUnk, phr);
}


CBasePin * CAVICo::GetPin(int n)
{
    HRESULT hr = S_OK;

    DbgLog((LOG_TRACE,9,TEXT("CAVICo::GetPin")));

    // Create an input pin if necessary

    if (n == 0 && m_pInput == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Creating an input pin")));

        m_pInput = new CTransformInputPin(NAME("Transform input pin"),
                                          this,              // Owner filter
                                          &hr,               // Result code
                                          L"Input");         // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pInput == NULL) {
            delete m_pInput;
            m_pInput = NULL;
        }
    }

    // Or alternatively create an output pin

    if (n == 1 && m_pOutput == NULL) {

        DbgLog((LOG_TRACE,2,TEXT("Creating an output pin")));

        m_pOutput = new CCoOutputPin(NAME("CO output pin"),
                                            this,            // Owner filter
                                            &hr,             // Result code
                                            L"Output");      // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pOutput == NULL) {
            delete m_pOutput;
            m_pOutput = NULL;
        }

// !!! TEST
#if 0
    WCHAR wachDesc[80];
    int cbDesc = 80;
    if (m_pOutput) {
        ((CCoOutputPin *)m_pOutput)->GetInfo(NULL, NULL, wachDesc, &cbDesc,
						NULL, NULL, NULL, NULL);
        DbgLog((LOG_TRACE,1,TEXT("Codec description: %ls"), wachDesc));
    }
#endif

    }

    // Return the appropriate pin

    if (n == 0) {
        return m_pInput;
    }
    return m_pOutput;
}

STDMETHODIMP CAVICo::Load(LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog)
{
    CAutoLock cObjectLock(&m_csFilter);
    if(m_State != State_Stopped)
    {
        return VFW_E_WRONG_STATE;
    }
    // If they don't give us a key, default to something (CINEPAK)
    if (pPropBag == NULL) {
	m_compvars.fccHandler = MKFOURCC('C','V','I','D');
	return NOERROR;
    }

    VARIANT var;
    var.vt = VT_BSTR;
    HRESULT hr = pPropBag->Read(L"FccHandler", &var,0);
    if(SUCCEEDED(hr))
    {
        char szFccHandler[5];
        WideCharToMultiByte(CP_ACP, 0, var.bstrVal, -1,
                            szFccHandler, sizeof(szFccHandler), 0, 0);
        SysFreeString(var.bstrVal);
        DbgLog((LOG_TRACE,2,TEXT("Co::Load: use %c%c%c%c"),
                szFccHandler[0], szFccHandler[1], szFccHandler[2], szFccHandler[3]));
        m_compvars.fccHandler = *(DWORD UNALIGNED *)szFccHandler;;
        if (m_pOutput && m_pOutput->IsConnected()) {
            DbgLog((LOG_TRACE,2,TEXT("Co::Load: reconnect output")));
            return ((CCoOutputPin *)m_pOutput)->Reconnect();
        }
        hr = S_OK;


    }
    else if(hr == HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND))
    {
        hr = HRESULT_FROM_WIN32(ERROR_INVALID_DATA);
    }


    return hr;
}

STDMETHODIMP CAVICo::Save(
    LPPROPERTYBAG pPropBag, BOOL fClearDirty,
    BOOL fSaveAllProperties)
{
    // E_NOTIMPL is not a valid return code as any object implementing
    // this interface must support the entire functionality of the
    // interface. !!!
    return E_NOTIMPL;
}

STDMETHODIMP CAVICo::InitNew()
{
    // fine. just call load
    return S_OK;
}

STDMETHODIMP CAVICo::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = m_clsid;
    return S_OK;
}

struct CoPersist
{
    DWORD dwSize;
    DWORD fccHandler;
};

HRESULT CAVICo::WriteToStream(IStream *pStream)
{
    CoPersist cp;
    cp.dwSize = sizeof(cp);
    cp.fccHandler = m_compvars.fccHandler;

    return pStream->Write(&cp, sizeof(cp), 0);
}

HRESULT CAVICo::ReadFromStream(IStream *pStream)
{
   if(m_compvars.fccHandler != 0)
   {
       return HRESULT_FROM_WIN32(ERROR_ALREADY_INITIALIZED);
   }

   CoPersist cp;
   HRESULT hr = pStream->Read(&cp, sizeof(cp), 0);
   if(FAILED(hr))
       return hr;

   if(cp.dwSize != sizeof(cp))
       return HRESULT_FROM_WIN32(ERROR_INVALID_DATA);

   m_compvars.fccHandler = cp.fccHandler;

   return S_OK;
}

int CAVICo::SizeMax()
{
    return sizeof(CoPersist);
}

HRESULT CAVICo::Transform(IMediaSample * pIn, IMediaSample * pOut)
{
    DWORD dwFlagsOut = 0L;
    DWORD ckid = 0L;
    BOOL  fKey;
    DWORD err;
    FOURCCMap fccOut;
    BOOL fFault = FALSE;

    DbgLog((LOG_TRACE,5,TEXT("*::Transform")));

    // codec not open ?
    if (m_hic == 0) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, no codec open")));
	return E_UNEXPECTED;
    }

    // we haven't started streaming yet?
    if (!m_fStreaming) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, not streaming")));
	return E_UNEXPECTED;
    }

    // make sure we have valid input and output pointers

    BYTE * pSrc;
    HRESULT hr = pIn->GetPointer(&pSrc);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting input sample data")));
	return hr;
    }

    BYTE * pDst;
    hr = pOut->GetPointer(&pDst);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting output sample data")));
	return hr;
    }

    // !!! Could the source filter change our mtIn too? Yes!

    // !!! We may be told on the fly to start compressing to a different format
#if 0
    MediaType *pmtOut;
    pOut->GetType(&pmtOut);
    if (pmtOut != NULL && pmtOut->pbFormat != NULL) {
	#define rcSource (((VIDEOINFOHEADER *)(pmtOut->pbFormat))->rcSource)
	#define rcTarget (((VIDEOINFOHEADER *)(pmtOut->pbFormat))->rcTarget)
        fccOut.SetFOURCC(&pmtOut->subtype);
	LONG lCompression = HEADER(pmtOut->pbFormat)->biCompression;
	LONG lBitCount = HEADER(pmtOut->pbFormat)->biBitCount;
	LONG lStride = (HEADER(pmtOut->pbFormat)->biWidth * lBitCount + 7) / 8;
	lStride = (lStride + 3) & ~3;
        DbgLog((LOG_TRACE,3,TEXT("*** Changing output type on the fly to")));
        DbgLog((LOG_TRACE,3,TEXT("*** FourCC: %lx Compression: %lx BitCount: %ld"),
		fccOut.GetFOURCC(), lCompression, lBitCount));
        DbgLog((LOG_TRACE,3,TEXT("*** biHeight: %ld rcDst: (%ld, %ld, %ld, %ld)"),
		HEADER(pmtOut->pbFormat)->biHeight,
		rcTarget.left, rcTarget.top, rcTarget.right, rcTarget.bottom));
        DbgLog((LOG_TRACE,3,TEXT("*** rcSrc: (%ld, %ld, %ld, %ld) Stride: %ld"),
		rcSource.left, rcSource.top, rcSource.right, rcSource.bottom,
		lStride));
	StopStreaming();
	m_pOutput->CurrentMediaType() = *pmtOut;
	DeleteMediaType(pmtOut);
	hr = StartStreaming();
	if (FAILED(hr)) {
	    return hr;
	}
    }
#endif

    // get the BITMAPINFOHEADER structure, and fix biSizeImage

    LPBITMAPINFOHEADER lpbiSrc = HEADER(m_pInput->CurrentMediaType().Format());
    LPBITMAPINFOHEADER lpbiDst = HEADER(m_pOutput->CurrentMediaType().Format());
    lpbiSrc->biSizeImage = pIn->GetActualDataLength();

    BOOL dwFlags = 0;

    fKey = (m_nKeyCount >= m_compvars.lKey);
    // if this is a discontinuity, using previously kept bits (by us or the
    // codec) to make a non-key would be ugly.  We must make a key
    if (pIn->IsDiscontinuity() == S_OK) {
	fKey = TRUE;
    }
    if (fKey) {
        DbgLog((LOG_TRACE,6,TEXT("I will ask for a keyframe")));
	dwFlags |= ICCOMPRESS_KEYFRAME;
    }

    // pretty please, compiler, don't optimize this away
    int cbSize = DIBSIZE(*lpbiSrc);
    __try {
	// cinepak will access one byte too many... occasionally this faults
	if (lpbiSrc->biBitCount == 24)
	    volatile int cb = *(pSrc + cbSize);
    } __except (EXCEPTION_EXECUTE_HANDLER) {
	// OK, I guess I have to copy it into a bigger buffer to avoid this
        DbgLog((LOG_ERROR,0,TEXT("Compressor faulted!  Recovering...")));
	fFault = TRUE;
	BYTE *pOld = pSrc;
	pSrc = (BYTE *)QzTaskMemAlloc(cbSize + 1);
	if (pSrc == NULL)
	    return E_OUTOFMEMORY;
	CopyMemory(pSrc, pOld, cbSize);
    }

    DbgLog((LOG_TRACE,6,TEXT("Calling ICCompress on frame %ld"),
					m_lFrameCount));
    // StopStreaming may get called while we're inside here, blowing us up
    m_fInICCompress = TRUE;

    err =  ICCompress(
	        m_hic,
	        dwFlags,
	        lpbiDst,
	        pDst,
	        lpbiSrc,
	        pSrc,
		&ckid,
		&dwFlagsOut,
		m_lFrameCount,
		m_dwSizePerFrame,
		m_compvars.lQ,
		fKey ? NULL : m_lpbiPrev,
		fKey ? NULL : m_lpBitsPrev);
    if (fFault)
	QzTaskMemFree(pSrc);
    if (ICERR_OK != err) {
        DbgLog((LOG_ERROR,1,TEXT("Error in ICCompress")));
        m_fInICCompress = FALSE;
        return E_FAIL;
    }

    // was the compressed frame a keyframe?
    fKey = dwFlagsOut & AVIIF_KEYFRAME;
    pOut->SetSyncPoint(fKey);

    // If we made a key, reset when we need the next one.
    if (fKey)
	m_nKeyCount = 0;

    // Do we want periodic key frames? If not, never make one again.
    // (The first frame is always a keyframe).
    if (m_compvars.lKey)
	m_nKeyCount++;
    else
	m_nKeyCount = -1;

    // Count how many frames we compress
    m_lFrameCount++;

    // Decompress into previous frame
    if (m_lpBitsPrev) {
        if (ICERR_OK != ICDecompress(m_hic, 0, lpbiDst, pDst, m_lpbiPrev,
								m_lpBitsPrev)){
    	    m_fInICCompress = FALSE;
	    return E_FAIL;
	}
    }
    m_fInICCompress = FALSE;

    pOut->SetActualDataLength(lpbiDst->biSizeImage);

    // Even if we receive discontinuities, once we recompress it, it's like
    // it's not discontinuous anymore.  If we don't reset this, and we
    // connect to a renderer, we'll drop almost every frame needlessly in some
    // scenarios.
    pOut->SetDiscontinuity(FALSE);

    return S_OK;
}


// check if you can support mtIn
HRESULT CAVICo::CheckInputType(const CMediaType* pmtIn)
{
    FOURCCMap fccHandlerIn;
    HIC hic;

    DbgLog((LOG_TRACE,2,TEXT("*::CheckInputType")));

    if (pmtIn == NULL || pmtIn->Format() == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: type/format is NULL")));
	return E_INVALIDARG;
    }

    // we only support MEDIATYPE_Video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: not VIDEO")));
	return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: format not VIDINFO")));
        return E_INVALIDARG;
    }

    fccHandlerIn.SetFOURCC(pmtIn->Subtype());

    DbgLog((LOG_TRACE,3,TEXT("Checking fccType: %lx biCompression: %lx"),
		fccHandlerIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression));

    //
    //  Most VFW codecs don't like upsize-down (DIRECTDRAW) style bitmaps.  If the
    //  height is negative then reject it.
    //
    if (HEADER(pmtIn->Format())->biHeight < 0 &&
        HEADER(pmtIn->Format())->biCompression <= BI_BITFIELDS) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: Negative height")));
        return E_INVALIDARG;
    }

    // look for a compressor for this format
    if (HEADER(pmtIn->Format())->biCompression != BI_BITFIELDS &&
        HEADER(pmtIn->Format())->biCompression != BI_RGB &&
    	*pmtIn->Subtype() != MEDIASUBTYPE_YV12 &&
    	*pmtIn->Subtype() != MEDIASUBTYPE_YUY2 &&
    	*pmtIn->Subtype() != MEDIASUBTYPE_UYVY &&
    	*pmtIn->Subtype() != MEDIASUBTYPE_YVYU &&
        *pmtIn->Subtype() != MEDIASUBTYPE_YVU9 &&

        // wm mpeg4 may support these as well
        HEADER(pmtIn->Format())->biCompression != MAKEFOURCC('I', '4', '2', '0') &&
        HEADER(pmtIn->Format())->biCompression != MAKEFOURCC('I', 'Y', 'U', 'V') ) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: This is compressed already!")));
	return E_INVALIDARG;
    }

    // !!! I'm only going to say I accept an input type if the default (current)
    // compressor can handle it.  I'm not going to ask every compressor.  This
    // way an app can make a choose compressor box and only show those
    // compressors that support a given input format, by making a CO filter
    // with each compressor as a default and asking them all

    // We might have a hic cached if we connected before and then broken
    if (!m_hic) {
        DbgLog((LOG_TRACE,4,TEXT("opening a compressor")));
        hic = ICOpen(ICTYPE_VIDEO, m_compvars.fccHandler, ICMODE_COMPRESS);
        if (!hic) {
            DbgLog((LOG_ERROR,1,TEXT("Error: Can't open a compressor")));
	    return E_FAIL;
        }
    } else {
        DbgLog((LOG_TRACE,4,TEXT("using a cached compressor")));
	hic = m_hic;
    }

    if (ICCompressQuery(hic, HEADER(pmtIn->Format()), NULL)) {
        DbgLog((LOG_ERROR,1,TEXT("Error: Compressor rejected format")));
	if (hic != m_hic)
	    ICClose(hic);
	return E_FAIL;
    }

    // remember this hic to save time if asked again.
    if (m_hic == NULL) {
        DbgLog((LOG_TRACE,4,TEXT("caching this compressor")));
	m_hic = hic;
    }

    return NOERROR;
}


// check if you can support the transform from this input to this output

HRESULT CAVICo::CheckTransform(const CMediaType* pmtIn,
                               const CMediaType* pmtOut)
{
    HIC hic = NULL;
    FOURCCMap fccIn;

    DbgLog((LOG_TRACE,2,TEXT("*::CheckTransform")));

    if (pmtIn == NULL || pmtOut == NULL || pmtIn->Format() == NULL ||
					pmtOut->Format() == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: type/format is NULL")));
	return E_POINTER;
    }

    // we can't convert between toplevel types.
    if (*pmtIn->Type() != *pmtOut->Type()) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: types don't match")));
	return VFW_E_INVALIDMEDIATYPE;
    }

    // and we only accept video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: type not VIDEO")));
	return VFW_E_INVALIDMEDIATYPE;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtOut->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: output format type not VIDINFO")));
        return VFW_E_INVALIDMEDIATYPE;
    }
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: input format type not VIDINFO")));
        return VFW_E_INVALIDMEDIATYPE;
    }

#ifdef PICKY_PICKY // !!!
    if (((VIDEOINFOHEADER *)(pmtOut->Format()))->AvgTimePerFrame &&
    		((VIDEOINFOHEADER *)(pmtOut->Format()))->AvgTimePerFrame !=
    		((VIDEOINFOHEADER *)(pmtIn->Format()))->AvgTimePerFrame) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: can't frame rate convert")));
        return VFW_E_INVALIDMEDIATYPE;
    }
#endif

    // check it really is a FOURCC
    fccIn.SetFOURCC(pmtIn->Subtype());

    ASSERT(pmtOut->Format());

#define rcS1 ((VIDEOINFOHEADER *)(pmtOut->Format()))->rcSource
#define rcT1 ((VIDEOINFOHEADER *)(pmtOut->Format()))->rcTarget

    DbgLog((LOG_TRACE,3,TEXT("Check fccIn: %lx biCompIn: %lx bitDepthIn: %d"),
		fccIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression,
		HEADER(pmtIn->Format())->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthIn: %ld biHeightIn: %ld"),
		HEADER(pmtIn->Format())->biWidth,
		HEADER(pmtIn->Format())->biHeight));
    DbgLog((LOG_TRACE,3,TEXT("biCompOut: %lx bitDepthOut: %d"),
		HEADER(pmtOut->Format())->biCompression,
		HEADER(pmtOut->Format())->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthOut: %ld biHeightOut: %ld"),
		HEADER(pmtOut->Format())->biWidth,
		HEADER(pmtOut->Format())->biHeight));
    DbgLog((LOG_TRACE,3,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		rcS1.left, rcS1.top, rcS1.right, rcS1.bottom));
    DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		rcT1.left, rcT1.top, rcT1.right, rcT1.bottom));

    if (!IsRectEmpty(&rcT1) && (rcT1.left != 0 || rcT1.top != 0 ||
			HEADER(pmtOut->Format())->biWidth != rcT1.right ||
			HEADER(pmtOut->Format())->biHeight != rcT1.bottom)) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: can't use funky rcTarget")));
        return VFW_E_INVALIDMEDIATYPE;
    }

    if (!IsRectEmpty(&rcS1) && (rcS1.left != 0 || rcS1.top != 0 ||
			HEADER(pmtIn->Format())->biWidth != rcS1.right ||
			HEADER(pmtIn->Format())->biHeight != rcS1.bottom)) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: can't use funky rcSource")));
        return VFW_E_INVALIDMEDIATYPE;
    }

    // find a codec for this transform

    DbgLog((LOG_TRACE,3,TEXT("Trying to find a compressor for this")));
    // If we've opened a compressor before, quickly try that one to see if it
    // will do the job (saves lots of time) before trying the whole universe of
    // compressors.
    if (!m_hic || ICCompressQuery(m_hic, HEADER(pmtIn->Format()),
				HEADER(pmtOut->Format())) != ICERR_OK) {
        hic = ICLocate(ICTYPE_VIDEO, NULL, HEADER(pmtIn->Format()),
				HEADER(pmtOut->Format()), ICMODE_COMPRESS);
        if (!hic) {
            DbgLog((LOG_ERROR,1,TEXT("all compressors reject this transform")));
	    return VFW_E_INVALIDMEDIATYPE;
        } else {

    	    DbgLog((LOG_TRACE,3,TEXT("Found somebody to accept it")));
	    // If we're not connected yet, remember this compressor so we'll
	    // use it once we are connected.  If we're already connected, then
	    // don't remember it, or we'll change the behaviour of our filter.
	    // After all, this was only a query.  (Although somebody may want
	    // us to remember it anyway)
	    if (m_fCacheHic || !m_pOutput->IsConnected()) {
	        if (m_hic)
		    ICClose(m_hic);
	        m_hic = hic;
	    } else {
		ICClose(hic);
	    }
	}
    } else {
    	DbgLog((LOG_TRACE,3,TEXT("The cached compressor accepts it")));
    }

    return NOERROR;
}


// overriden to know when the media type is actually set

HRESULT CAVICo::SetMediaType(PIN_DIRECTION direction, const CMediaType *pmt)
{

    // Set the OUTPUT type.  Looks like we're all connected!
    if (direction == PINDIR_OUTPUT) {

	// Please call me if this goes off. - DannyMi
	ASSERT(!m_fStreaming);

        DbgLog((LOG_TRACE,2,TEXT("***::SetMediaType (output)")));
        DbgLog((LOG_TRACE,2,TEXT("Output type is: biComp=%lx biBitCount=%d")
		,HEADER(pmt->Format())->biCompression
		,HEADER(pmt->Format())->biBitCount));

	// we may not be using the compressor from m_compvars, if somebody
	// did a ConnectWithMediaType on us.  We need to get info about this
	// media type and m_hic and fill in m_compvars so that from now on
	// we use the right info.
        ASSERT(m_hic);
        m_compvars.cbSize = sizeof(m_compvars);
        m_compvars.dwFlags = ICMF_COMPVARS_VALID;
        ICINFO icinfo;
	if (ICGetInfo(m_hic, &icinfo, sizeof(ICINFO)) > 0) {
	    if (m_compvars.fccHandler != icinfo.fccHandler) {
		// different compressor? don't use old state!
		m_compvars.lpState = NULL;
		m_compvars.cbState = 0;
	    }
            m_compvars.fccHandler = icinfo.fccHandler;
            DbgLog((LOG_TRACE,2,TEXT("New fccHandler = %08x"),
					icinfo.fccHandler));
	} else {
	    m_compvars.lpState = NULL;
	    m_compvars.cbState = 0;
	}
        m_compvars.lDataRate = ((VIDEOINFOHEADER *)pmt->Format())->dwBitRate /
								8192;
	// We will leave Quality and Keyframe settings as is

	// !!! If we connect 8 bit on our input and then try to connect
	// our output with a type that needs 24 bit on our input we don't
	// reconnect the input! We will FAIL!  We need to do like ACMWRAP
	// and override the output pin's CheckMediaType to accept something
	// if the input can be reconnected to allow it, and we need to do
	// that reconnect here.

	return NOERROR;
    }

    ASSERT(direction == PINDIR_INPUT);

    // Please call me if this goes off. - DannyMi
    ASSERT(!m_fStreaming);

    DbgLog((LOG_TRACE,2,TEXT("***::SetMediaType (input)")));
    DbgLog((LOG_TRACE,2,TEXT("Input type is: biComp=%lx biBitCount=%d"),
		HEADER(m_pInput->CurrentMediaType().Format())->biCompression,
		HEADER(m_pInput->CurrentMediaType().Format())->biBitCount));

    if (m_pOutput && m_pOutput->IsConnected()) {
        DbgLog((LOG_TRACE,2,TEXT("***Changing IN when OUT already connected")));
	// This might fail!
	// make sure the output sees what's changed
	return ((CCoOutputPin *)m_pOutput)->Reconnect();
    }

    return NOERROR;
}


// Return our preferred output media types (in order)
// remember that we do not need to support all of these formats -
// if one is considered potentially suitable, our CheckTransform method
// will be called to check if it is acceptable right now.
// Remember that the enumerator calling this will stop enumeration as soon as
// it receives a S_FALSE return.

HRESULT CAVICo::GetMediaType(int iPosition,CMediaType *pmt)
{
    LARGE_INTEGER li;
    CMediaType cmt;
    FOURCCMap fccHandler;

    DbgLog((LOG_TRACE,2,TEXT("*::GetMediaType #%d"), iPosition));

    if (pmt == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Media Type is NULL, no can do")));
	return E_POINTER;
    }

    // Output choices depend on the input connected
    // This is pointless!  We'll never get here if not connected
    if (!m_pInput->CurrentMediaType().IsValid()) {
        DbgLog((LOG_TRACE,2,TEXT("No input type set yet, no can do")));
	return VFW_E_NOT_CONNECTED;
    }

    if (iPosition < 0) {
        return E_INVALIDARG;
    }

    // Give our compressed format
    if (iPosition == 0) {

	// somebody told us what format to use.  We should only offer that one
 	if (m_fOfferSetFormatOnly) {
            DbgLog((LOG_TRACE,2,TEXT("Giving Media Type from ::SetFormat")));
            *pmt = m_cmt;
	    return NOERROR;
	}

	// We offer one compressed type - the same as the input type, but
 	// with the compressor chosen in the properties's default output format
        DbgLog((LOG_TRACE,2,TEXT("Giving Media Type 0: default codec out")));

        HIC hic = ICOpen(ICTYPE_VIDEO, m_compvars.fccHandler, ICMODE_COMPRESS);

	if (hic == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("UH OH! Can't open compressor!")));
	    return E_FAIL;	// uh oh, we're not connecting to anybody today
	}

	cmt = m_pInput->CurrentMediaType();

        //  Don't output negative height for YUV - YUV is always
        //  the same way up (upside down).
        if (HEADER(cmt.pbFormat)->biHeight < 0 &&
            HEADER(cmt.pbFormat)->biCompression > BI_BITFIELDS) {
            HEADER(cmt.pbFormat)->biHeight = -HEADER(cmt.pbFormat)->biHeight;
        }

        ULONG cb = (ULONG)ICCompressGetFormatSize(hic,
				HEADER(m_pInput->CurrentMediaType().Format()));
        if ((LONG)cb < (LONG)sizeof(BITMAPINFOHEADER)) {
            DbgLog((LOG_ERROR,1,TEXT("Error from ICCompressGetFormatSize")));
	    ICClose(hic);
     	    return E_FAIL;
        }

        // allocate a VIDEOINFOHEADER for the default output format
        cb += SIZE_PREHEADER;
        VIDEOINFOHEADER *pf = (VIDEOINFOHEADER *) cmt.AllocFormatBuffer(cb);
        if (pf == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Error allocating format buffer")));
	    ICClose(hic);
	    return E_OUTOFMEMORY;
        }

        ZeroMemory(pf, sizeof(BITMAPINFOHEADER) + SIZE_PREHEADER);
        DWORD_PTR dwerr = ICCompressGetFormat(hic,
				HEADER(m_pInput->CurrentMediaType().Format()),
	    			HEADER(cmt.Format()));
        if (ICERR_OK != dwerr) {
            DbgLog((LOG_ERROR,1,TEXT("Error from ICCompressGetFormat")));
	    ICClose(hic);
	    return E_FAIL;
        }

	// use the frame rate of the incoming video
        pf->AvgTimePerFrame = ((VIDEOINFOHEADER *)
		m_pInput->CurrentMediaType().pbFormat)->AvgTimePerFrame;
        li.QuadPart = pf->AvgTimePerFrame;

	// use the data rate we've been told to make.  If we aren't going to
	// make the compressor use a specific rate, find out what it's going
	// to do anyway.
	if (m_compvars.lDataRate)
            pf->dwBitRate = m_compvars.lDataRate * 8192;
	else if (li.LowPart)
            pf->dwBitRate = MulDiv(pf->bmiHeader.biSizeImage, 80000000,
								li.LowPart);
        pf->dwBitErrorRate = 0L;

        DbgLog((LOG_TRACE,3,TEXT("Returning biComp: %lx biBitCount: %d"),
		    HEADER(cmt.Format())->biCompression,
		    HEADER(cmt.Format())->biBitCount));

        const GUID SubTypeGUID = GetBitmapSubtype(HEADER(cmt.Format()));
        cmt.SetSubtype(&SubTypeGUID);
        cmt.SetTemporalCompression(m_compvars.lKey != 1);
        cmt.SetVariableSize();
        *pmt = cmt;

	ICClose(hic);

        return NOERROR;

    } else {
	return VFW_S_NO_MORE_ITEMS;
    }
}


// called from CBaseOutputPin to prepare the allocator's count
// of buffers and sizes
HRESULT CAVICo::DecideBufferSize(IMemAllocator * pAllocator,
                                 ALLOCATOR_PROPERTIES *pProperties)
{
    // David assures me this won't be called with NULL output mt.
    ASSERT(m_pOutput->CurrentMediaType().IsValid());
    ASSERT(pAllocator);
    ASSERT(pProperties);
    ASSERT(m_hic);

    // set the size of buffers based on the expected output frame size, and
    // the count of buffers to 1.

    pProperties->cBuffers = 1;
    pProperties->cbBuffer = m_pOutput->CurrentMediaType().GetSampleSize();

    // Variable sized?  Ask the compressor.
    if (pProperties->cbBuffer == 0) {
	pProperties->cbBuffer = (DWORD)ICCompressGetSize(m_hic,
				HEADER(m_pInput->CurrentMediaType().Format()),
				HEADER(m_pOutput->CurrentMediaType().Format()));
        //DbgLog((LOG_TRACE,1,TEXT("*** Compressor says %d"), pProperties->cbBuffer));
	// compressor can't tell us.  Assume decompressed size is max compressed
	// size. (Winnov PYRAMID reports a bogus negative number)
        if (pProperties->cbBuffer <= 0) {
	    pProperties->cbBuffer =
		GetBitmapSize(HEADER(m_pInput->CurrentMediaType().Format()));
	}
    }

    DbgLog((LOG_TRACE,1,TEXT("*::DecideBufferSize - size is %ld"), pProperties->cbBuffer));

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAllocator->SetProperties(pProperties, &Actual);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error in SetProperties")));
	return hr;
    }

    if (Actual.cbBuffer < pProperties->cbBuffer) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - buffer too small")));
	return E_INVALIDARG;
    }

    // we must get exactly one buffer, since the temporal compression assumes
    // that the previous decompressed frame is already present in the output
    // buffer. The alternative is to copy the bits from a saved location before
    // doing the decompression, but that is not nice.
    if (Actual.cBuffers != 1) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - need exactly 1 buffer")));
	return E_INVALIDARG;
    }

    return S_OK;
}

#include "..\..\..\filters\asf\wmsdk\inc\wmsdk.h"

HRESULT CAVICo::StartStreaming()
{
    DbgLog((LOG_TRACE,1,TEXT("*::StartStreaming")));

    // We have a driver dialog up that is about to change the capture settings.
    // Now is NOT a good time to start streaming.
    if (m_fDialogUp) {
        DbgLog((LOG_TRACE,1,TEXT("*::StartStreaming - Dialog up. SORRY!")));
	return E_UNEXPECTED;
    }

    if (!m_fStreaming) {
        if (HEADER(m_pOutput->CurrentMediaType().Format())->biCompression == 0x3334504d && m_pGraph) { // !!! MP43
            IObjectWithSite *pSite;
            HRESULT hrKey = m_pGraph->QueryInterface(IID_IObjectWithSite, (VOID **)&pSite);
            if (SUCCEEDED(hrKey)) {
                IServiceProvider *pSP;
                hrKey = pSite->GetSite(IID_IServiceProvider, (VOID **)&pSP);
                pSite->Release();

                if (SUCCEEDED(hrKey)) {
                    IUnknown *pKey;
                    hrKey = pSP->QueryService(__uuidof(IWMReader), IID_IUnknown, (void **) &pKey);
                    pSP->Release();

                    if (SUCCEEDED(hrKey)) {
                        // !!! verify key?

                        pKey->Release();
                        DbgLog((LOG_TRACE, 1, "CO: Unlocking MP43 codec"));
                        //
                        // Use GetState() to set the key into a particular
                        // instance of the codec.  While it looks odd
                        // to be using ICGetState to set values, it is correct!
                        //

                        DWORD dwSize = ICGetStateSize( m_hic );

                        if( dwSize <= 256 )
                        {
                            CHAR rgcBuf[256];
                            MSVIDUNLOCKKEY *pks;

                            pks = (MSVIDUNLOCKKEY *)rgcBuf;

                            pks->dwVersion = MSMP43KEY_VERSION;
                            pks->guidKey   = __uuidof( MSMP43KEY_V1 );

                            ICGetState( m_hic, rgcBuf, dwSize );
                        } else {
                            ASSERT(0);
                        }
                    }
                }
            }
        }

	// First prepare the compressor with the state info we've been told
	// to give it.
	if (m_lpState)
	    ICSetState(m_hic, m_lpState, m_cbState);

	// Start Streaming Compression
	ICINFO icinfo;
	DWORD_PTR err = ICCompressBegin(m_hic,
				HEADER(m_pInput->CurrentMediaType().Format()),
		    		HEADER(m_pOutput->CurrentMediaType().Format()));
	if (ICERR_OK == err) {
            m_fCompressorInitialized = TRUE;

	    // Reset streaming frame # count
	    m_lFrameCount = 0;

	    // Use defaults
	    if (m_compvars.lKey < 0)
		m_compvars.lKey = ICGetDefaultKeyFrameRate(m_hic);
	    if (m_compvars.lQ == ICQUALITY_DEFAULT)
		m_compvars.lQ = ICGetDefaultQuality(m_hic);

	    // Make sure first frame we make will be a keyframe, no matter how
	    // often key frames might be requested.
	    m_nKeyCount = A_NUMBER_BIGGER_THAN_THE_KEYFRAME_RATE;

 	    // Figure out how big each frame needs to be based on the data rate
	    // and fps of the movie.  Don't overflow!
    	    LONGLONG time = ((VIDEOINFOHEADER *)
			(m_pInput->CurrentMediaType().Format()))->AvgTimePerFrame;
    	    DWORD fps = time ? DWORD(UNITS * (LONGLONG)1000 / time) : 1000;
    	    m_dwSizePerFrame = DWORD(LONGLONG(m_compvars.lDataRate) *
				1024 * 1000 / fps);
    	    DbgLog((LOG_TRACE,2,TEXT("Making each frame %d bytes big"),
				m_dwSizePerFrame));

	    // We'll need a previous buffer for compression if not every
	    // frame is a keyframe, and the compressor does temporal
	    // compression and needs such a buffer
	    if (ICGetInfo(m_hic, &icinfo, sizeof(icinfo))) {

		if (!(icinfo.dwFlags & VIDCF_CRUNCH))
		    m_compvars.lDataRate = 0;	// we can't crunch

	        // Now prepare the decompressor for the previous bits
	        if (m_compvars.lKey != 1 &&
				(icinfo.dwFlags & VIDCF_TEMPORAL) &&
				!(icinfo.dwFlags & VIDCF_FASTTEMPORALC)) {

		    // allocate a previous header of the proper size
		    DWORD dw = ICDecompressGetFormatSize(m_hic,
			HEADER(m_pOutput->CurrentMediaType().Format()));
		    if (dw <= 0) {
                        ReleaseStreamingResources();
                        DbgLog((LOG_ERROR,1,TEXT(
				"Error %d from ICDecompressGetFormatSize"),
				 dw));
		        return E_FAIL;
		    }
		    m_lpbiPrev = (LPBITMAPINFOHEADER)GlobalAllocPtr(
							GMEM_FIXED, dw);
		    if (!m_lpbiPrev) {
                        ReleaseStreamingResources();

                        DbgLog((LOG_ERROR,1,TEXT("Error allocating previous bih")));
		        return E_OUTOFMEMORY;
		    }

		    // Ask the compressor what format to decompress back to...
		    // it's not necessarily the same as what it compressed from-
		    // the size may change
		    dw = ICDecompressGetFormat(m_hic,
			HEADER(m_pOutput->CurrentMediaType().Format()),
			m_lpbiPrev);
		    if ((LONG) dw < 0) {
                        ReleaseStreamingResources();

                        DbgLog((LOG_ERROR,1,TEXT("Error in ICDecompressGetFormat")));
		        return E_FAIL;
		    }

		    if (m_lpbiPrev->biSizeImage == 0)
	    	        m_lpbiPrev->biSizeImage = DIBSIZE(*m_lpbiPrev);

		    // allocate enough space for a decompressed image
		    m_lpBitsPrev = GlobalAllocPtr(GMEM_FIXED,
						m_lpbiPrev->biSizeImage);
		    if (m_lpBitsPrev == NULL) {
                        ReleaseStreamingResources();

                        DbgLog((LOG_ERROR,1,TEXT("Error reallocating BitsPrev")));
		        return E_OUTOFMEMORY;
		    }

		    if (ICERR_OK != ICDecompressBegin(m_hic,
			HEADER(m_pOutput->CurrentMediaType().Format()),
			m_lpbiPrev)) {

                        ReleaseStreamingResources();

                        DbgLog((LOG_ERROR,1,TEXT("Error in ICDecompressBegin")));
		        return E_FAIL;
		    }

                    m_fDecompressorInitialized = TRUE;
		}
	    } else {
                ReleaseStreamingResources();

                DbgLog((LOG_ERROR,1,TEXT("Error in ICGetInfo")));
		return E_FAIL;
	    }

	    // OK, everything worked.
	    m_fStreaming = TRUE;

	} else {
            DbgLog((LOG_ERROR,1,TEXT("Error in ICCompressBegin")));
	    return E_FAIL;
	}
    }

    return NOERROR;
}

HRESULT CAVICo::StopStreaming()
{
    DbgLog((LOG_TRACE,1,TEXT("*::StopStreaming")));

    if (m_fStreaming) {
	ASSERT(m_hic);

	if (m_fInICCompress)
    	    DbgLog((LOG_TRACE,1,TEXT("***** ACK! Still compressing!")));
	while (m_fInICCompress);	// !!!

        ReleaseStreamingResources();

        m_fStreaming = FALSE;
    }
    return NOERROR;
}

void CAVICo::ReleaseStreamingResources()
{
    // NULL is not a valid HIC handle value.  m_hic should never be NULL
    // when this function is called.  m_hic should never be NULL because
    //
    //      - ICCompressBegin() fails if m_hic is NULL.  ReleaseStreamingResources() is
    //        not called if the ICCompressBegin() call in StartStreaming() fails.
    //      
    //      - m_hic's value cannot be changed while the filter is 
    //        streaming.
    // 
    ASSERT(NULL != m_hic);

    if (m_fCompressorInitialized) {
        // ICCompressEnd() should never fail because m_hic always contains a
        // valid handle if the ICCompressBegin() call in StartStreaming()
	// succeeded.
        EXECUTE_ASSERT(ICERR_OK == ICCompressEnd(m_hic));
        m_fCompressorInitialized = FALSE;
    }

    if (m_fDecompressorInitialized) {
    
        // ICDecompressEnd() should never fail because m_hic always contains a
        // valid handle if the ICDecompressBegin() call in StartStreaming()
	// succeeded.
        EXECUTE_ASSERT(ICERR_OK == ICDecompressEnd(m_hic));
        m_fDecompressorInitialized = FALSE;
    }


    if (NULL != m_lpBitsPrev) {
        GlobalFreePtr(m_lpBitsPrev);
        m_lpBitsPrev = NULL;
    }

    if (NULL != m_lpbiPrev) {
        GlobalFreePtr(m_lpbiPrev);
        m_lpbiPrev = NULL;
    }
}


HRESULT CAVICo::BeginFlush()
{
    // Make sure first frame we make next will be a keyframe, because the
    // saved data of what the previous frame looks like is no longer valid
    // Make a key in case the codec is remembering old bits... this is the
    // only way I know to flush it for sure, is to tell it to make a key
    m_nKeyCount = A_NUMBER_BIGGER_THAN_THE_KEYFRAME_RATE;
    return CTransformFilter::BeginFlush();
}


#ifdef WANT_DIALOG

/* Return the CLSIDs for the property page we support */

STDMETHODIMP CAVICo::GetPages(CAUUID *pPages)
{
    DbgLog((LOG_TRACE,2,TEXT("ISpecifyPropertyPages::GetPages")));

    pPages->cElems = 1;
    pPages->pElems = (GUID *)QzTaskMemAlloc(sizeof(GUID));
    if (pPages->pElems == NULL) {
        return E_OUTOFMEMORY;
    }

    pPages->pElems[0] = CLSID_ICMProperties;
    return NOERROR;
}

/* Return the current compression options we're using */

STDMETHODIMP CAVICo::ICMGetOptions(PCOMPVARS pcompvars)
{
    if (pcompvars == NULL)
	return E_POINTER;

    // Did I miss something?
    pcompvars->cbSize = m_compvars.cbSize;
    pcompvars->dwFlags = m_compvars.dwFlags;
    pcompvars->fccHandler = m_compvars.fccHandler;
    pcompvars->lQ = m_compvars.lQ;
    pcompvars->lpState = m_compvars.lpState;
    pcompvars->cbState = m_compvars.cbState;
    pcompvars->lKey = m_compvars.lKey;
    pcompvars->lDataRate = m_compvars.lDataRate;

    return NOERROR;
}


/* Set the current compression options */

STDMETHODIMP CAVICo::ICMSetOptions(PCOMPVARS pcompvars)
{
    // not while streaming you don't!
    CAutoLock cLock(&m_csFilter);
    if (m_fStreaming)
	return E_UNEXPECTED;

    m_compvars.cbSize = pcompvars->cbSize;
    m_compvars.dwFlags = pcompvars->dwFlags;
    m_compvars.fccHandler = pcompvars->fccHandler;
    m_compvars.lQ = pcompvars->lQ;
    m_compvars.lpState = pcompvars->lpState;
    m_compvars.cbState = pcompvars->cbState;
    m_compvars.lKey = pcompvars->lKey;
    m_compvars.lDataRate = pcompvars->lDataRate;

    // The compression type changed, so we have to reconnect.
    // This might fail!
    // !!! Who cares, this is never called
    ((CCoOutputPin *)m_pOutput)->Reconnect();

    // Don't reconnect the output if the output is connected but the input
    // isn't, because it will happen as soon as the input is connected,
    // (if necessary)
    return NOERROR;
}


/* Bring up the ICCompressorChoose dialog */

STDMETHODIMP CAVICo::ICMChooseDialog(HWND hwnd)
{
    // Before we bring the dialog up, make sure we're not streaming, or about to
    // Then don't allow us to stream any more while the dialog is up (we can't
    // very well keep the critsect for a day and a half).
    m_csFilter.Lock();
    if (m_fStreaming) {
        DbgLog((LOG_TRACE,1,TEXT("ICMChooseDialog - no dlg, we're streaming")));
        m_csFilter.Unlock();
	return E_UNEXPECTED;
    }
    m_fDialogUp = TRUE;
    m_csFilter.Unlock();

    DWORD dwFlags = ICMF_CHOOSE_DATARATE | ICMF_CHOOSE_KEYFRAME;
    BOOL  f;

    DbgLog((LOG_TRACE,1,TEXT("ICMChooseDialog - bringing up the dialog")));

    // Only ask for compressors that can handle the input format we have
    f = ICCompressorChoose(hwnd, dwFlags,
		m_pInput->CurrentMediaType().IsValid() ?
		HEADER(m_pInput->CurrentMediaType().Format()) : NULL,
		NULL, &m_compvars, NULL);

    if (f) {
	// The compression type changed, so we have to reconnect.
	// This might fail!
	// !!! Do I care about this dialog?
	((CCoOutputPin *)m_pOutput)->Reconnect();

	// Don't reconnect the output if the output is connected but the input
	// isn't, because it will happen as soon as the input is connected,
	// (if necessary)
    }

    m_fDialogUp = FALSE;
    return (f ? S_OK : S_FALSE);
}

#endif 	// #ifdef WANT_DIALOG


//======================================================================

//IAMVfwCompressDialogs stuff

STDMETHODIMP CAVICo::ShowDialog(int iDialog, HWND hwnd)
{
    BOOL fClose = FALSE;
    HIC  hic;
    DWORD dw;

    // !!! necessary?
    if (hwnd == NULL)
	hwnd = GetDesktopWindow();

    if (iDialog != VfwCompressDialog_Config &&
				iDialog != VfwCompressDialog_About &&
				iDialog != VfwCompressDialog_QueryConfig &&
				iDialog != VfwCompressDialog_QueryAbout)
	return E_INVALIDARG;

	
    // If the compressor is open already, great.
    if (m_hic) {
	hic = m_hic;
    } else {
        hic = ICOpen(ICTYPE_VIDEO, m_compvars.fccHandler, ICMODE_COMPRESS);
        if (hic == NULL) {
	    return E_FAIL;
        }
	fClose = TRUE;
    }

    // Before we bring the dialog up, make sure we're not streaming, or about to
    // Then don't allow us to stream any more while the dialog is up (we can't
    // very well keep the critsect for a day and a half).
    if (iDialog == VfwCompressDialog_Config ||
				iDialog != VfwCompressDialog_About) {
        m_csFilter.Lock();
        if (m_fStreaming) {
            m_csFilter.Unlock();
	    if (fClose)
	        ICClose(hic);
	    return VFW_E_NOT_STOPPED;
        }
        m_fDialogUp = TRUE;
        m_csFilter.Unlock();
    }

    // bring up the configure dialog?  And after we do, remember how it was
    // configured because it will do no good to close the compressor and
    // lose this information! We'll use it from now on.
    if (iDialog == VfwCompressDialog_Config) {
	dw = (DWORD)ICConfigure(hic, hwnd);
        // To make sure two people don't touch m_lpState - DON'T HOLD THIS
	// WHILE THE DIALOG IS UP!
        CAutoLock cObjectLock(&m_csFilter);
	if (m_lpState)
	    QzTaskMemFree(m_lpState);
	m_lpState = NULL;
	m_cbState = (DWORD)ICGetStateSize(hic);
	if (m_cbState > 0)
	    m_lpState = (LPBYTE)QzTaskMemAlloc(m_cbState);
	if (m_lpState)
	    ICGetState(hic, m_lpState, m_cbState);

    // bring up the about box?
    } else if (iDialog == VfwCompressDialog_About) {
	dw = (DWORD)ICAbout(hic, hwnd);
    } else if (iDialog == VfwCompressDialog_QueryConfig) {
	if (ICQueryConfigure(hic))
	    dw = S_OK;
 	else
	    dw = S_FALSE;
    } else if (iDialog == VfwCompressDialog_QueryAbout) {
	if (ICQueryAbout(hic))
	    dw = S_OK;
 	else
	    dw = S_FALSE;
    }

    m_fDialogUp = FALSE;
    if (fClose)
	ICClose(hic);

    return dw;
}


// so the outside world get get at ICGetState
//
STDMETHODIMP CAVICo::GetState(LPVOID lpState, int *pcbState)
{
    if (pcbState == NULL)
	return E_POINTER;

    // they want to know the size of the state info
    if (lpState == NULL) {
	HIC hic;
	if (m_hic == NULL) {
            hic = ICOpen(ICTYPE_VIDEO, m_compvars.fccHandler, ICMODE_COMPRESS);
            if (hic == NULL)
	        return E_FAIL;
	    *pcbState = (DWORD)ICGetStateSize(hic);
	    ICClose(hic);
	} else {
	    *pcbState = (DWORD)ICGetStateSize(m_hic);
	}
	return NOERROR;
    }

    if (*pcbState <= 0)
	return E_INVALIDARG;

    if (m_lpState == NULL)
	return E_UNEXPECTED;	// !!! it would be the default

    CopyMemory(lpState, m_lpState, m_cbState);
    return NOERROR;
}


// so the outside world get get at ICSetState
//
STDMETHODIMP CAVICo::SetState(LPVOID lpState, int cbState)
{
    // To make sure two people don't touch m_lpState
    CAutoLock cObjectLock(&m_csFilter);

    if (lpState == NULL)
	return E_POINTER;

    if (cbState == 0)
	return E_INVALIDARG;

    if (m_lpState)
	QzTaskMemFree(m_lpState);
    m_lpState = NULL;
    m_cbState = cbState;
    m_lpState = (LPBYTE)QzTaskMemAlloc(m_cbState);
    if (m_lpState == NULL)
	return E_OUTOFMEMORY;
    CopyMemory(m_lpState, lpState, cbState);

    // !!! I assume it will work, without calling ICSetState yet
    return NOERROR;
}


STDMETHODIMP CAVICo::SendDriverMessage(int uMsg, long dw1, long dw2)
{
    HIC  hic;
    BOOL fClose = FALSE;

    // This could do anything!  Bring up a dialog, who knows.
    // Don't take any crit sect or do any kind of protection.
    // They're on their own

    // If the compressor is open already, great.
    if (m_hic) {
	hic = m_hic;
    } else {
        hic = ICOpen(ICTYPE_VIDEO, m_compvars.fccHandler, ICMODE_COMPRESS);
        if (hic == NULL) {
	    return E_FAIL;
        }
	fClose = TRUE;
    }

    DWORD_PTR dw = ICSendMessage(hic, uMsg, dw1, dw2);

    if (fClose)
	ICClose(hic);

    return (HRESULT)dw;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\co\co.h ===
// Copyright (c) 1994 - 1997  Microsoft Corporation.  All Rights Reserved.

//
// Prototype NDM wrapper for old video compressors
//

extern const AMOVIESETUP_FILTER sudAVICo;

#include "property.h"

class CAVICo : 
#ifdef WANT_DIALOG
	       public ISpecifyPropertyPages, public IICMOptions,
#endif
 	       public CTransformFilter, public IAMVfwCompressDialogs,
               public IPersistPropertyBag, public CPersistStream
{

public:

    CAVICo(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CAVICo();

    DECLARE_IUNKNOWN

    // IAMVfwCompressDialogs stuff
    STDMETHODIMP ShowDialog(int iDialog, HWND hwnd);
    STDMETHODIMP GetState(LPVOID lpState, int *pcbState);
    STDMETHODIMP SetState(LPVOID lpState, int cbState);
    STDMETHODIMP SendDriverMessage(int uMsg, long dw1, long dw2);

#ifdef WANT_DIALOG
    STDMETHODIMP GetPages(CAUUID *pPages);
#endif

    HRESULT Transform(IMediaSample * pIn, IMediaSample * pOut);

    // check if you can support mtIn
    HRESULT CheckInputType(const CMediaType* mtIn);

    // check if you can support the transform from this input to
    // this output
    HRESULT CheckTransform(
                const CMediaType* mtIn,
                const CMediaType* mtOut);

    // called from CBaseOutputPin to prepare the allocator's count
    // of buffers and sizes
    HRESULT DecideBufferSize(IMemAllocator * pAllocator,
                             ALLOCATOR_PROPERTIES *pProperties);

    // optional overrides - we want to know when streaming starts
    // and stops
    HRESULT StartStreaming();
    HRESULT StopStreaming();
    HRESULT BeginFlush();

    // overriden to know when the media type is set
    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt);

    // overriden to suggest OUTPUT pin media types
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);

    // Overridden to make a CCoOutputPin
    CBasePin * GetPin(int n);

    // IPersistPropertyBag methods
    STDMETHOD(Load)(THIS_ LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog);
    STDMETHOD(Save)(THIS_ LPPROPERTYBAG pPropBag, BOOL fClearDirty,
                    BOOL fSaveAllProperties);
    STDMETHODIMP InitNew();

    STDMETHODIMP GetClassID(CLSID *pClsid);

    // CPersistStream
    HRESULT WriteToStream(IStream *pStream);
    HRESULT ReadFromStream(IStream *pStream);
    int SizeMax();
    

private:
    void ReleaseStreamingResources();

    HIC m_hic;	// current codec

    // force CheckTransform to cache any hic it opens... we'll need it
    BOOL m_fCacheHic;

    // the fourCC used to open m_hic
    //FOURCC m_FourCCIn;

    // are we inside an ICCompress call?
    BOOL m_fInICCompress;

    // is there a dialog box up that should prevent start streaming?
    BOOL m_fDialogUp;

    // have we called ICDecompressBegin ?
    BOOL m_fStreaming;

    // how long since last keyframe
    int m_nKeyCount;

    // the frame number we're compressing
    LONG m_lFrameCount;

    // the previous decompressed frame for temporal compressors
    LPVOID m_lpBitsPrev;

    // the format it decompresses back to
    LPBITMAPINFOHEADER m_lpbiPrev;

    // the compression options being used
    COMPVARS m_compvars;

    // how big to make each frame, based on data rate and fps
    DWORD m_dwSizePerFrame;

    // Somebody called ::SetFormat and wants this media type used
    BOOL m_fOfferSetFormatOnly;
    CMediaType m_cmt;

    // send this to the codec via ICSetState when we open it
    LPBYTE m_lpState;
    int    m_cbState;

    // TRUE if ICCompressBegin() has been called and 
    // ICCompressEnd() has not been called.  Otherwise
    // FALSE.
    BOOL m_fCompressorInitialized;

    // TRUE if ICDecompressBegin() has been called and 
    // ICDecompressEnd() has not been called.  Otherwise
    // FALSE.
    BOOL m_fDecompressorInitialized;

public:

#ifdef WANT_DIALOG
    // Implement the IICMOptions interface
    STDMETHODIMP ICMGetOptions(THIS_ PCOMPVARS pcompvars);
    STDMETHODIMP ICMSetOptions(THIS_ PCOMPVARS pcompvars);
    STDMETHODIMP ICMChooseDialog(THIS_ HWND hwnd);
#endif

    friend class CCoOutputPin;
};

class CCoOutputPin : public CTransformOutputPin, public IAMStreamConfig,
		   public IAMVideoCompression
{

public:

    CCoOutputPin(
        TCHAR *pObjectName,
        CAVICo *pCapture,
        HRESULT * phr,
        LPCWSTR pName);

    virtual ~CCoOutputPin();

    DECLARE_IUNKNOWN

    // override to expose IAMStreamConfig, etc.
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void **ppv);

    // IAMStreamConfig stuff
    STDMETHODIMP SetFormat(AM_MEDIA_TYPE *pmt);
    STDMETHODIMP GetFormat(AM_MEDIA_TYPE **ppmt);
    STDMETHODIMP GetNumberOfCapabilities(int *piCount, int *piSize);
    STDMETHODIMP GetStreamCaps(int i, AM_MEDIA_TYPE **ppmt, LPBYTE pVSCC);

    /* IAMVideoCompression methods */
    STDMETHODIMP put_KeyFrameRate(long KeyFrameRate);
    STDMETHODIMP get_KeyFrameRate(long FAR* pKeyFrameRate);
    STDMETHODIMP put_PFramesPerKeyFrame(long PFramesPerKeyFrame)
			{return E_NOTIMPL;};
    STDMETHODIMP get_PFramesPerKeyFrame(long FAR* pPFramesPerKeyFrame)
			{return E_NOTIMPL;};
    STDMETHODIMP put_Quality(double Quality);
    STDMETHODIMP get_Quality(double FAR* pQuality);
    STDMETHODIMP put_WindowSize(DWORDLONG WindowSize) {return E_NOTIMPL;};
    STDMETHODIMP get_WindowSize(DWORDLONG FAR* pWindowSize);
    STDMETHODIMP OverrideKeyFrame(long FrameNumber);
    STDMETHODIMP OverrideFrameSize(long FrameNumber, long Size);
    STDMETHODIMP GetInfo(LPWSTR pstrVersion,
			int *pcbVersion,
			LPWSTR pstrDescription,
			int *pcbDescription,
			long FAR* pDefaultKeyFrameRate,
			long FAR* pDefaultPFramesPerKey,
			double FAR* pDefaultQuality,
			long FAR* pCapabilities);
 
    HRESULT Reconnect();

private:

    /*  Controlling filter */
    CAVICo *m_pFilter;

};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\co\pin.cpp ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

//
// CO - quartz wrapper for old video compressors
// pin.cpp - the output pin code
//

#include <streams.h>
#include <windowsx.h>
#include <vfw.h>
//#include <olectl.h>
//#include <olectlid.h>
#include "co.h"

// --- CCoOutputPin ----------------------------------------

/*
    CCoOutputPin constructor
*/
CCoOutputPin::CCoOutputPin(
    TCHAR              * pObjectName,
    CAVICo 	       * pFilter,
    HRESULT            * phr,
    LPCWSTR              pPinName) :

    CTransformOutputPin(pObjectName, pFilter, phr, pPinName),
    m_pFilter(pFilter)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the CCoOutputPin")));
}

CCoOutputPin::~CCoOutputPin()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying the CCoOutputPin")));
};


// overriden to expose IMediaPosition and IMediaSeeking control interfaces
// and all the capture interfaces we support
// !!! The base classes change all the time and I won't pick up their bug fixes!
STDMETHODIMP CCoOutputPin::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    if (riid == IID_IAMStreamConfig) {
	return GetInterface((LPUNKNOWN)(IAMStreamConfig *)this, ppv);
    } else if (riid == IID_IAMVideoCompression) {
	return GetInterface((LPUNKNOWN)(IAMVideoCompression *)this, ppv);
    } else {
        DbgLog((LOG_TRACE,99,TEXT("QI on CCoOutputPin")));
        return CTransformOutputPin::NonDelegatingQueryInterface(riid, ppv);
    }
}


HRESULT CCoOutputPin::Reconnect()
{
    if (IsConnected()) {
        DbgLog((LOG_TRACE,1,TEXT("Need to reconnect our output pin")));
        CMediaType cmt;
	GetMediaType(0, &cmt);
	if (S_OK == GetConnected()->QueryAccept(&cmt)) {
	    m_pFilter->m_pGraph->Reconnect(this);
	} else {
	    // !!! CAPTURE does this better - I don't care, we don't need this
	    // except for the Dialog box
	    // I better break our connections cuz we can't go on like this
            DbgLog((LOG_ERROR,1,TEXT("Can't reconnect with new MT! Disconnecting!")));
	    // !!! We need to notify applications that connections are broken !
	    GetConnected()->Disconnect();
	    Disconnect();
	    return E_UNEXPECTED;
	}
    }
    return NOERROR;
}

//=============================================================================
//=============================================================================

// IAMStreamConfig stuff

// Tell the compressor to compress to a specific format.  If it isn't connected,
// then it will use that format to connect when it does.  If already connected,
// then it will reconnect with the new format.
//
// calling this to change compressors will change what GetInfo will return
//
HRESULT CCoOutputPin::SetFormat(AM_MEDIA_TYPE *pmt)
{
    HRESULT hr;

    if (pmt == NULL)
	return E_POINTER;

    // To make sure we're not in the middle of start/stop streaming
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    DbgLog((LOG_TRACE,2,TEXT("IAMStreamConfig::SetFormat %x %dbit %dx%d"),
		HEADER(pmt->pbFormat)->biCompression,
		HEADER(pmt->pbFormat)->biBitCount,
		HEADER(pmt->pbFormat)->biWidth,
		HEADER(pmt->pbFormat)->biHeight));

    if (m_pFilter->m_fStreaming)
	return VFW_E_NOT_STOPPED;

    if (!m_pFilter->m_pInput->IsConnected())
	return VFW_E_NOT_CONNECTED;

    // If this is the same format as we already are using, don't bother
    CMediaType cmt;
    if ((hr = GetMediaType(0,&cmt)) != S_OK)
	return hr;
    if (cmt == *pmt) {
	return NOERROR;
    }

    // If we are connected to somebody, make sure they like it
    if (IsConnected()) {
	hr = GetConnected()->QueryAccept(pmt);
	if (hr != NOERROR)
	    return VFW_E_INVALIDMEDIATYPE;
    }

    // Normally we wouldn't leave the compressor we find in CheckTransform
    // open if our input is connected already, but we need to force it to
    // leave it open so that it's still open when we call SetMediaType below
    m_pFilter->m_fCacheHic = TRUE;
    hr = m_pFilter->CheckTransform(&m_pFilter->m_pInput->CurrentMediaType(),
						(CMediaType *)pmt);
    m_pFilter->m_fCacheHic = FALSE;

    if (hr != S_OK) {
        DbgLog((LOG_TRACE,1,TEXT("Nobody likes this format. Sorry.")));
 	return hr;
    }

    hr = m_pFilter->SetMediaType(PINDIR_OUTPUT, (CMediaType *)pmt);
    ASSERT(hr == S_OK);

    // from now on, this is the only media type we offer
    m_pFilter->m_cmt = *pmt;
    m_pFilter->m_fOfferSetFormatOnly = TRUE;

    // Changing the format means reconnecting if necessary
    Reconnect();

    return NOERROR;
}


// What format are we compressing to right now?
//
HRESULT CCoOutputPin::GetFormat(AM_MEDIA_TYPE **ppmt)
{
    DbgLog((LOG_TRACE,2,TEXT("IAMAudioStreamConfig::GetFormat")));

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (ppmt == NULL)
	return E_POINTER;

    // Output choices depend on the input connected
    if (!m_pFilter->m_pInput->IsConnected()) {
        DbgLog((LOG_TRACE,2,TEXT("No input type set yet, no can do")));
	return VFW_E_NOT_CONNECTED;
    }

    *ppmt = (AM_MEDIA_TYPE *)CoTaskMemAlloc(sizeof(AM_MEDIA_TYPE));
    if (*ppmt == NULL)
	return E_OUTOFMEMORY;
    ZeroMemory(*ppmt, sizeof(AM_MEDIA_TYPE));
    HRESULT hr = GetMediaType(0, (CMediaType *)*ppmt);
    if (hr != NOERROR) {
	CoTaskMemFree(*ppmt);
	*ppmt = NULL;
	return hr;
    }
    return NOERROR;
}


//
//
HRESULT CCoOutputPin::GetNumberOfCapabilities(int *piCount, int *piSize)
{
    DbgLog((LOG_TRACE,2,TEXT("IAMStreamConfig::GetNumberOfCapabilities")));

    if (piCount == NULL || piSize == NULL)
	return E_POINTER;

    *piCount = 1;
    *piSize = sizeof(VIDEO_STREAM_CONFIG_CAPS);
    return NOERROR;
}


// find out some capabilities of this compressor
//
HRESULT CCoOutputPin::GetStreamCaps(int i, AM_MEDIA_TYPE **ppmt, LPBYTE pSCC)
{
    VIDEO_STREAM_CONFIG_CAPS *pVSCC = (VIDEO_STREAM_CONFIG_CAPS *)pSCC;

    DbgLog((LOG_TRACE,2,TEXT("IAMStreamConfig::GetStreamCaps")));

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (ppmt == NULL || pSCC == NULL)
	return E_POINTER;

    // no good
    if (i < 0)
	return E_INVALIDARG;
    if (i > 0)
	return S_FALSE;

    HRESULT hr = GetFormat(ppmt);
    if (hr != NOERROR)
	return hr;

    ZeroMemory(pVSCC, sizeof(VIDEO_STREAM_CONFIG_CAPS));
    pVSCC->guid = MEDIATYPE_Video;

    // we don't do cropping
    if (m_pFilter->m_pInput->IsConnected()) {
        pVSCC->InputSize.cx =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biWidth;
        pVSCC->InputSize.cy =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biHeight;
        pVSCC->MinCroppingSize.cx =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biWidth;
        pVSCC->MinCroppingSize.cy =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biHeight;
        pVSCC->MaxCroppingSize.cx =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biWidth;
        pVSCC->MaxCroppingSize.cy =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biHeight;
    }

    return NOERROR;
}


//=============================================================================

// IAMVideoCompression stuff

// make key frames this often
//
HRESULT CCoOutputPin::put_KeyFrameRate(long KeyFrameRate)
{
    HIC hic;

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (KeyFrameRate >=0) {
        m_pFilter->m_compvars.lKey = KeyFrameRate;
	return NOERROR;
    }

    if (!m_pFilter->m_hic) {
	hic = ICOpen(ICTYPE_VIDEO, m_pFilter->m_compvars.fccHandler,
							ICMODE_COMPRESS);
        if (!hic) {
            DbgLog((LOG_ERROR,1,TEXT("Error: Can't open a compressor")));
	    return E_FAIL;
        }
    } else {
	hic = m_pFilter->m_hic;
    }
	
    m_pFilter->m_compvars.lKey = ICGetDefaultKeyFrameRate(hic);

    if (!m_pFilter->m_hic)
	ICClose(hic);

    return NOERROR;
}


// make key frames this often
//
HRESULT CCoOutputPin::get_KeyFrameRate(long FAR* pKeyFrameRate)
{
    if (pKeyFrameRate) {
	*pKeyFrameRate = m_pFilter->m_compvars.lKey;
    } else {
	return E_POINTER;
    }

    return NOERROR;
}


// compress with this quality
//
HRESULT CCoOutputPin::put_Quality(double Quality)
{
    if (Quality < 0)
	m_pFilter->m_compvars.lQ = ICQUALITY_DEFAULT;
    else if (Quality >= 0. && Quality <= 1.)
	m_pFilter->m_compvars.lQ = (long)(Quality * 10000.);
    else
	return E_INVALIDARG;

    return NOERROR;
}


// compress with this quality
//
HRESULT CCoOutputPin::get_Quality(double FAR* pQuality)
{
    // scale 0-10000 to 0-1
    if (pQuality) {
	if (m_pFilter->m_compvars.lQ == ICQUALITY_DEFAULT)
	    *pQuality = -1.;
	else
	    *pQuality = m_pFilter->m_compvars.lQ / (double)ICQUALITY_HIGH;
    } else {
	return E_POINTER;
    }

    return NOERROR;
}


// every frame must fit in the data rate... we don't do the WindowSize thing
//
HRESULT CCoOutputPin::get_WindowSize(DWORDLONG FAR* pWindowSize)
{
    if (pWindowSize == NULL)
	return E_POINTER;

    *pWindowSize = 1;	// we don't do windows
    return NOERROR;
}


// make this frame a key frame, whenever it comes by
//
HRESULT CCoOutputPin::OverrideKeyFrame(long FrameNumber)
{
    // !!! be brave?
    return E_NOTIMPL;
}


// make this frame this size, whenever it comes by
//
HRESULT CCoOutputPin::OverrideFrameSize(long FrameNumber, long Size)
{
    // !!! be brave?
    return E_NOTIMPL;
}


// Get some information about the codec
//
HRESULT CCoOutputPin::GetInfo(LPWSTR pstrVersion, int *pcbVersion, LPWSTR pstrDescription, int *pcbDescription, long FAR* pDefaultKeyFrameRate, long FAR* pDefaultPFramesPerKey, double FAR* pDefaultQuality, long FAR* pCapabilities)
{
    HIC hic;
    ICINFO icinfo;
    DbgLog((LOG_TRACE,1,TEXT("IAMVideoCompression::GetInfo")));

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (!m_pFilter->m_hic) {
	hic = ICOpen(ICTYPE_VIDEO, m_pFilter->m_compvars.fccHandler,
							ICMODE_COMPRESS);
        if (!hic) {
            DbgLog((LOG_ERROR,1,TEXT("Error: Can't open a compressor")));
	    return E_FAIL;
        }
    } else {
	hic = m_pFilter->m_hic;
    }
	
    DWORD dw = (DWORD)ICGetInfo(hic, &icinfo, sizeof(ICINFO));

    if (pDefaultKeyFrameRate)
	*pDefaultKeyFrameRate = ICGetDefaultKeyFrameRate(hic);
    if (pDefaultPFramesPerKey)
	*pDefaultPFramesPerKey = 0;
    if (pDefaultQuality)
	// scale this 0-1
	*pDefaultQuality = ICGetDefaultQuality(hic) / (double)ICQUALITY_HIGH;
    if (pCapabilities) {
	*pCapabilities = 0;
	if (dw > 0) {
	    *pCapabilities |= ((icinfo.dwFlags & VIDCF_QUALITY) ?
					CompressionCaps_CanQuality : 0);
	    *pCapabilities |= ((icinfo.dwFlags & VIDCF_CRUNCH) ?
					CompressionCaps_CanCrunch : 0);
	    *pCapabilities |= ((icinfo.dwFlags & VIDCF_TEMPORAL) ?
					CompressionCaps_CanKeyFrame : 0);
	    // we don't do b frames
	}
    }

    // We have no version string, but we have a description
    if (pstrVersion)
        *pstrVersion = 0;
    if (pcbVersion)
        *pcbVersion = 0;
    if (dw > 0) {
        if (pstrDescription && pcbDescription)
            lstrcpynW(pstrDescription, (LPCWSTR)&icinfo.szDescription,
			min(*pcbDescription / 2,
			lstrlenW((LPCWSTR)&icinfo.szDescription) + 1));
	if (pcbDescription)
	    // string length in bytes, incl. NULL
	    *pcbDescription = lstrlenW((LPCWSTR)&icinfo.szDescription) * 2 + 2;
    } else {
        if (pstrDescription) {
    	    *pstrDescription = 0;
	if (pcbDescription)
	    *pcbDescription = 0;
	}
    }

    if (hic != m_pFilter->m_hic)
	ICClose(hic);

    return NOERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\co\property.h ===
#ifdef WANT_DIALOG

// Copyright (c) 1994 - 1997  Microsoft Corporation.  All Rights Reserved.
// Implements an ICM codec property page, Danny Miller, October 1996

// CLSID for CICMProperties
// {C00B55C0-10BF-11cf-AC98-00AA004C0FA9}
DEFINE_GUID(CLSID_ICMProperties,
0xc00b55c0, 0x10bf, 0x11cf, 0xac, 0x98, 0x0, 0xaa, 0x0, 0x4c, 0xf, 0xa9);

// CLSID for IICMOptions
// {8675CC20-1234-11cf-AC98-00AA004C0FA9}
DEFINE_GUID(IID_IICMOptions,
0x8675cc20, 0x1234, 0x11cf, 0xac, 0x98, 0x0, 0xaa, 0x0, 0x4c, 0xf, 0xa9);

DECLARE_INTERFACE_(IICMOptions,IUnknown)
{
    /* IUnknown methods */

    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID *ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /* IICMOptions methods */

    STDMETHOD(ICMGetOptions)(THIS_ PCOMPVARS pcompvars) PURE;
    STDMETHOD(ICMSetOptions)(THIS_ PCOMPVARS pcompvars) PURE;
    // returns FAIL, S_OK if OK was pressed or S_FALSE if CANCEL was pressed
    STDMETHOD(ICMChooseDialog)(THIS_ HWND hwnd) PURE;
};

class CICMProperties : public CUnknown, public IPropertyPage
{
    COMPVARS m_compvars;		  // compression options structure
    LPPROPERTYPAGESITE m_pPageSite;       // Details for our property site
    HWND m_hwnd;                          // Window handle for the page
    HWND m_Dlg;                           // Actual dialog window handle
    BOOL m_bDirty;                        // Has anything been changed
    IICMOptions *m_pICM;                  // Pointer to codec interface

    static BOOL CALLBACK ICMDialogProc(HWND hwnd,
                                         UINT uMsg,
                                         WPARAM wParam,
                                         LPARAM lParam);

public:

    CICMProperties(LPUNKNOWN lpUnk,HRESULT *phr);

    static CUnknown *CreateInstance(LPUNKNOWN pUnk, HRESULT *phr);
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void **ppv);

    DECLARE_IUNKNOWN;

    STDMETHODIMP SetObjects(ULONG cObjects, LPUNKNOWN *ppUnk);
    STDMETHODIMP SetPageSite(LPPROPERTYPAGESITE pPageSite);
    STDMETHODIMP Activate(HWND hwndParent,LPCRECT prect,BOOL fModal);
    STDMETHODIMP Deactivate(void);
    STDMETHODIMP GetPageInfo(LPPROPPAGEINFO pPageInfo);
    STDMETHODIMP Show(UINT nCmdShow);
    STDMETHODIMP Move(LPCRECT prect);
    STDMETHODIMP IsPageDirty(void) { return m_bDirty ? S_OK : S_FALSE; }
    STDMETHODIMP Apply(void);
    STDMETHODIMP Help(LPCWSTR lpszHelpDir) { return E_UNEXPECTED; }
    STDMETHODIMP TranslateAccelerator(LPMSG lpMsg) { return E_NOTIMPL; }
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\dec\dec.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

//
// Prototype wrapper for old video decompressors
//

#include <streams.h>
#include <windowsx.h>

#ifdef FILTER_DLL
#include <vfw.h>
// define the GUIDs for streams and my CLSID in this file
#include <initguid.h>
#endif

#include <dynlink.h>

#include "dec.h"
#include "safeseh.h"
#include "msvidkey.h"

// you can never have too many parentheses!
#define ABS(x) (((x) > 0) ? (x) : -(x))

// how to build an explicit FOURCC
#define FCC(ch4) ((((DWORD)(ch4) & 0xFF) << 24) |     \
                  (((DWORD)(ch4) & 0xFF00) << 8) |    \
                  (((DWORD)(ch4) & 0xFF0000) >> 8) |  \
                  (((DWORD)(ch4) & 0xFF000000) >> 24))

// #define OFFER_NEGATIVE_HEIGHTS

// ***************************************************************
// here are the current bugs that without fixes, would play wrong:
    //
    // * Hooking up a YUV type to the ASF writer, without forcing the codec
    // see -biHeight on the output, will result in a flipped image being written

    // **** When Primary Surface is already taken ****
    // WINX to 16/24/32 - plays black
    // WINX to 8 bit - corrupted
    // (H.263 codec at fault for the following:)
    // I420 320x240 to 24 - corrupted
    // I420 160x120 to 24 - corrupted
    // I420 320x240 to 16 - flipped
    // I420 160x120 to 16 - flipped
    // IYUV 320x240 to 16 - flipped
    // IYUV 160x240 to 16 - flipped
    // ************************************************

    // **** When Primary Surface is not taken ****
    // WNV1 to 24 faults display
    // IYUV 320x240 to 24 is flipped
    // IYUV 160x120 to 24 is flipped
    // IYUV 320x240 to 16 is flipped
    // IYUV 160x120 to 16 is flipped
    // ********************************************
// ***************************************************************
// ***************************************************************

// setup data

const AMOVIESETUP_MEDIATYPE
sudAVIDecType = { &MEDIATYPE_Video      // clsMajorType
                , &MEDIASUBTYPE_NULL }; // clsMinorType

const AMOVIESETUP_PIN
psudAVIDecPins[] = { { L"Input"             // strName
                     , FALSE                // bRendered
                     , FALSE                // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Output"            // strConnectsToPin
                     , 1                    // nTypes
                     , &sudAVIDecType }     // lpTypes
                   , { L"Output"            // strName
                     , FALSE                // bRendered
                     , TRUE                 // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Input"             // strConnectsToPin
                     , 1                    // nTypes
                     , &sudAVIDecType } };  // lpTypes

const AMOVIESETUP_FILTER
sudAVIDec = { &CLSID_AVIDec         // clsID
            , L"AVI Decompressor"   // strName
            , MERIT_NORMAL          // dwMerit
            , 2                     // nPins
            , psudAVIDecPins };     // lpPin

#ifdef FILTER_DLL
// list of class ids and creator functions for class factory
CFactoryTemplate g_Templates[] = {
    { L"AVI Decompressor"
    , &CLSID_AVIDec
    , CAVIDec::CreateInstance
    , NULL
    , &sudAVIDec }
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

// exported entry points for registration and
// unregistration (in this case they only call
// through to default implmentations).
//
STDAPI DllRegisterServer()
{
  return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
  return AMovieDllRegisterServer2( FALSE );
}
#endif

// --- CAVICodec ----------------------------------------

CAVIDec::CAVIDec(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
    : CVideoTransformFilter(pName, pUnk, CLSID_AVIDec),
      m_hic(NULL),
      m_FourCCIn(0),
      m_fStreaming(FALSE),
      m_fPassFormatChange(FALSE),
      m_bUseEx( FALSE ),
      m_fToRenderer( false )
#ifdef _X86_
      ,
      m_hhpShared(NULL)
#endif
{
    DbgLog((LOG_TRACE,2,TEXT("*Instantiating the DEC filter")));

#ifdef PERF
    m_idSkip = MSR_REGISTER(TEXT("AVI Decoder Skip frame"));
    m_idLate = MSR_REGISTER(TEXT("AVI Decoder late"));
    m_idFrameType = MSR_REGISTER(TEXT("AVI Frame type (1=Key)"));
#endif

    m_bNoSkip = GetProfileInt(TEXT("Quartz"), TEXT("AVINoSkip"), 0);
}

CAVIDec::~CAVIDec()
{
    if (m_hic) {
	ICClose(m_hic);
    }
    DbgLog((LOG_TRACE,2,TEXT("*Destroying the DEC filter")));
}

// this goes in the factory template table to create new instances
CUnknown * CAVIDec::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CAVIDec(TEXT("VFW decompression filter"), pUnk, phr);
}

HRESULT CAVIDec::Transform(IMediaSample * pIn, IMediaSample * pOut)
{
    DWORD_PTR err = 0;
    FOURCCMap fccOut;
    CMediaType *pmtIn;

    DbgLog((LOG_TRACE,6,TEXT("*::Transform")));

    // codec not open ?
    if (m_hic == 0) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, no codec open")));
	return E_UNEXPECTED;
    }

    if (pIn == NULL || pOut == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, NULL arguments")));
	return E_UNEXPECTED;
    }

    // we haven't started streaming yet?
    if (!m_fStreaming) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, not streaming")));
	return E_UNEXPECTED;
    }

    // make sure we have valid input and output pointers

    BYTE * pSrc;
    HRESULT hr = pIn->GetPointer(&pSrc);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting input sample data")));
	return hr;
    }

    BYTE * pDst;
    hr = pOut->GetPointer(&pDst);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting output sample data")));
	return hr;
    }

    LPBITMAPINFOHEADER lpbiSrc = &InputFormat( )->bmiHeader;
    LPBITMAPINFOHEADER lpbiDst = &IntOutputFormat( )->bmiHeader; // internal

    // ICDecompress needs this to be the actual size of this frame, but
    // we can't go changing this for good, so we'll put it back later
    DWORD biSizeImageOld = lpbiSrc->biSizeImage;
    lpbiSrc->biSizeImage = pIn->GetActualDataLength();

    // we just received a format change from the source. So we better notify
    // the guy downstream of the format change
    pIn->GetMediaType((AM_MEDIA_TYPE **)&pmtIn);
    // sometimes we don't end up passing anything to the renderer (eg preroll)
    // so once we notice a format change we will keep trying to pass it to
    // the renderer until we succeed.  Don't waste time trying if we KNOW we're
    // not going to do it.
    if (pmtIn != NULL && pmtIn->Format() != NULL)
	m_fPassFormatChange = TRUE;
    DeleteMediaType(pmtIn);

    if (m_fPassFormatChange && pIn->IsPreroll() != S_OK &&
        				pIn->GetActualDataLength() > 0) {
	CMediaType cmt;
	CopyMediaType((AM_MEDIA_TYPE *)&cmt, &m_pOutput->CurrentMediaType());
        LPBITMAPINFOHEADER lpbi = HEADER(cmt.Format());
	// if we're decompressing 8 bit to 8 bit, I'm assuming this is a
	// palette change, so get the new palette
	// VFW palette changes always have the same number of colours
	if (lpbi && lpbiSrc && lpbiSrc->biBitCount == 8 &&
				lpbi->biBitCount == 8) {
	    ASSERT(lpbi->biClrUsed == lpbiSrc->biClrUsed);
	    if (lpbi->biClrUsed == lpbiSrc->biClrUsed) {
                DbgLog((LOG_TRACE,2,TEXT("Dynamic palette change suspected - doing it")));
	        CopyMemory(lpbi + 1, lpbiSrc + 1,
		   	(lpbiSrc->biClrUsed ? lpbiSrc->biClrUsed : 256) *
							sizeof(RGBQUAD));
	        pOut->SetMediaType(&cmt);
	    }
	}
    }

    // some RLE-compressed videos have the initial frame broken
    // into several separate frames. To work round this problem, avifile.dll
    // reads and decodes all of these frames into a single decompressed frame.
    // If we detect this (an RLE frame with the size of a decompressed frame)
    // then we just copy it.
    if ((lpbiSrc->biCompression == BI_RLE8) &&
        (pIn->GetActualDataLength() == (long)lpbiDst->biSizeImage)) {

        CopyMemory(pDst, pSrc, lpbiDst->biSizeImage);
    } else {

        BOOL dwFlags = 0;

        if (pIn->IsPreroll() == S_OK) {
            DbgLog((LOG_TRACE,6,TEXT("This is a preroll")));
 	    dwFlags |= ICDECOMPRESS_PREROLL;
        }

        if (pIn->GetActualDataLength() <= 0) {
            DbgLog((LOG_TRACE,6,TEXT("This is a NULL frame")));
 	    dwFlags |= ICDECOMPRESS_NULLFRAME;
        }

        if(pIn->IsSyncPoint() == S_OK) {
            DbgLog((LOG_TRACE,6,TEXT("This is a keyframe")));
        } else {
 	    dwFlags |= ICDECOMPRESS_NOTKEYFRAME;
        }

//      PLEASE don't ever send this flag to a codec! Some codecs take this as
//      a hint to speed up, unfortunately others are slightly less clever and
//      all they do when told to speed up is to send the same frame over and
//      over again! Which in turn means that bugs get raised against me for
//      random reasons such as when the window is being blown up full screen
//	!!! well, we should do this SOMETIMES, shouldn't we?
//
//        if (m_itrLate>0) {
//            dwFlags |= ICDECOMPRESS_HURRYUP;    // might help - who knows?
//        }

#ifdef _X86_
        //  Fix the exception handling for win95
        BOOL bPatchedExceptions = m_hhpShared != NULL && BeginScarySEH(m_pvShared);
#endif // _X86_

	// If we're doing something really funky, use ICDecompressEx
        // we use m_bUseEx here instead of ShoudUseEx because ICDecompressExBegin
        // has already been called, and m_bUseEx will already have been set
        if( m_bUseEx ) {

            // these rects should ALWAYS be filled in
            //
            RECT rcS, rcT;
            GetSrcTargetRects( IntOutputFormat( ), &rcS, &rcT );

            DbgLog((LOG_TRACE,4,TEXT("Calling ICDecompressEx")));

            err =  ICDecompressEx(m_hic, dwFlags, lpbiSrc, pSrc,
		    rcS.left, rcS.top,
		    rcS.right - rcS.left,
		    rcS.bottom - rcS.top,
	            lpbiDst, pDst,
		    rcT.left,
// !!! What about when the big rect is the movie size, and there's a subrect?
// Should I do this hack or not?
// !!! How should I munge the source rect?
		    (lpbiDst->biHeight > 0) ? rcT.top :
				(ABS(lpbiDst->biHeight) - rcT.bottom),
		    rcT.right - rcT.left,
		    rcT.bottom - rcT.top);
        } else {
            DbgLog((LOG_TRACE,4,TEXT("Calling ICDecompress")));
            err =  ICDecompress(m_hic, dwFlags, lpbiSrc, pSrc, lpbiDst, pDst);
        }
#ifdef _X86_
        if (bPatchedExceptions) {
            EndScarySEH(m_pvShared);
        }
#endif // _X86_
        if ((LONG_PTR)err < 0) {
	    DbgLog((LOG_ERROR,1,TEXT("Error in ICDecompress(Ex) 0x%x"), (LONG)err));
            //  Note we can get 0 size samples from capture drivers which pipeline
            //  Because buffers must be returned in the order they are got
            //  the capture driver may have to invalidate 1 buffer by making
            //  it 0 length if it gets bad data.
            err = ICERR_DONTDRAW;
        }
    }

    // now put this back, or it'll shrink until we only decode part of each frm
    lpbiSrc->biSizeImage = biSizeImageOld;

    // decompressed frames are always key
    pOut->SetSyncPoint(TRUE);

    // Check if this is preroll to get from keyframe to the current frame,
    // or a null frame, or if the decompressor doesn't want this frame drawn.
    // If so, we want to decompress it into the output buffer but not
    // deliver it.  Returning S_FALSE tells the base class not to deliver
    // this sample.
    if (pIn->IsPreroll() == S_OK || err == ICERR_DONTDRAW ||
        				pIn->GetActualDataLength() <= 0) {

        DbgLog((LOG_TRACE,5,TEXT("don't pass this to renderer")));
	return S_FALSE;
    }

    pOut->SetActualDataLength(lpbiDst->biSizeImage);

    // If there's a pending format change to pass to the renderer, we are now
    // doing it
    m_fPassFormatChange = FALSE;

    return S_OK;
}


// check if you can support mtIn
HRESULT CAVIDec::CheckInputType(const CMediaType* pmtIn)
{
    FOURCCMap fccHandlerIn;
    HIC hic;
    BOOL fOpenedHIC = FALSE;

    DbgLog((LOG_TRACE,3,TEXT("*::CheckInputType")));

    if (pmtIn == NULL || pmtIn->Format() == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: type/format is NULL")));
	return E_INVALIDARG;
    }

    // we only support MEDIATYPE_Video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: not VIDEO")));
	return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: format not VIDINFO")));
        return E_INVALIDARG;
    }

    fccHandlerIn.SetFOURCC(pmtIn->Subtype());
    if (fccHandlerIn != *pmtIn->Subtype()) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: subtype not a FOURCC")));
	return E_INVALIDARG;
    }

    DbgLog((LOG_TRACE,3,TEXT("Checking fccType: %lx biCompression: %lx"),
		fccHandlerIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression));

    // We are a decompressor only - reject anything uncompressed.
    // Conversions between RGB types is done by COLOUR.DLL
    if (HEADER(pmtIn->Format())->biCompression == BI_BITFIELDS ||
    			HEADER(pmtIn->Format())->biCompression == BI_RGB)
    {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: This is uncompressed already!")));
	return E_INVALIDARG;
    }

    // look for a decompressor for this format
    if (fccHandlerIn.GetFOURCC() != m_FourCCIn) {
        DbgLog((LOG_TRACE,4,TEXT("opening a decompressor")));
	// This won't find MSVC called CRAM or MRLE called 1
        // hic = ICOpen(ICTYPE_VIDEO, fccHandlerIn.GetFOURCC(),
	//						ICMODE_DECOMPRESS);
	// !!! This still won't find MRLE called 'RLE '
        hic = ICLocate(ICTYPE_VIDEO, fccHandlerIn.GetFOURCC(),
			HEADER(pmtIn->Format()), NULL, ICMODE_DECOMPRESS);
	if (hic)
	    fOpenedHIC = TRUE;
    } else {
        DbgLog((LOG_TRACE,4,TEXT("using a cached decompressor")));
   	hic = m_hic;
    }

    if (!hic) {
        DbgLog((LOG_ERROR,1,TEXT("Error: Can't open a decompressor")));
	if (FCC('rpza') == fccHandlerIn.GetFOURCC()) {
	    return VFW_E_RPZA;
	} else {
	    return VFW_E_NO_DECOMPRESSOR;
	}
    } else {
	if (ICDecompressQuery(hic, HEADER(pmtIn->Format()), NULL)) {
            DbgLog((LOG_ERROR,1,TEXT("Error: Decompressor rejected format")));
	    if (fOpenedHIC)
	            ICClose(hic);
	    return VFW_E_TYPE_NOT_ACCEPTED;
	}

        // IV41 crashes for Y41P -> RGB8. We have a native Indeo 4
        // filter, so we could perhaps refuse IV41 altogether.
        if(fccHandlerIn.GetFOURCC() == FCC('Y41P'))
        {
            ICINFO IcInfo;
            if(ICGetInfo( hic, &IcInfo, sizeof( IcInfo ) ) != 0) {
                if(IcInfo.fccHandler == FCC('IV41')) {
                    if(fOpenedHIC) {
                        ICClose(hic);
                    }
                    return VFW_E_TYPE_NOT_ACCEPTED;
                }
            }
        }



	// remember this hic to save time if asked again, if it won't
	// interfere with an existing connection.  If a connection is
	// broken, we will remember the next hic.
	if (!m_pInput->IsConnected()) {
            DbgLog((LOG_TRACE,4,TEXT("caching this decompressor")));
	    if (fOpenedHIC && m_hic)
		    ICClose(m_hic);

#ifdef DEBUG
            if( fOpenedHIC )
            {
                ICINFO IcInfo;
                memset( &IcInfo, 0, sizeof( IcInfo ) );
                IcInfo.dwSize = sizeof( IcInfo );
                LRESULT lr = ICGetInfo( hic, &IcInfo, sizeof( IcInfo ) );
                if( lr != 0 )
                {
                    WCHAR wszOutput[512];
                    long len = 32; // could be only 5. I'm paranoid.
                    if( IcInfo.szDriver ) len += wcslen( IcInfo.szDriver );
                    if( IcInfo.szDescription ) len += wcslen( IcInfo.szDescription );

                    wcscpy( wszOutput, L"DEC:" );
                    if( IcInfo.szDriver )
                    {
                        WCHAR drive[_MAX_PATH];
                        WCHAR path[_MAX_PATH];
                        WCHAR file[_MAX_PATH];
                        WCHAR ext[_MAX_PATH];
                        _wsplitpath( IcInfo.szDriver, drive, path, file, ext );
                        wcscat( wszOutput, file );
                        wcscat( wszOutput, ext );
                    }
                    if( IcInfo.szDescription )
                    {
                        wcscat( wszOutput, L" (" );
                        wcscat( wszOutput, IcInfo.szDescription );
                        wcscat( wszOutput, L")" );
                    }

                    DbgLog((LOG_TRACE, 1, TEXT("%ls"), wszOutput));
                }
            }
#endif

            m_hic = hic;
            m_FourCCIn = fccHandlerIn.GetFOURCC();
	} else if (fOpenedHIC) {
            DbgLog((LOG_TRACE,4,TEXT("not caching decompressor - we're connected")));
	    ICClose(hic);
	}
    }

    return NOERROR;
}


// check if you can support the transform from this input to this output

HRESULT CAVIDec::CheckTransform(const CMediaType* pmtIn,
                                const CMediaType* pmtOut)
{
    HIC hic = NULL;
    FOURCCMap fccIn;
    FOURCCMap fccOut;
    DWORD_PTR err;
    BOOL      fOpenedHIC = FALSE;

    DbgLog((LOG_TRACE,3,TEXT("*::CheckTransform")));

    if (pmtIn == NULL || pmtOut == NULL || pmtIn->Format() == NULL ||
				pmtOut->Format() == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: type/format is NULL")));
	return E_INVALIDARG;
    }

    // we can't convert between toplevel types.
    if (*pmtIn->Type() != *pmtOut->Type()) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: types don't match")));
	return E_INVALIDARG;
    }

    // and we only accept video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: type not VIDEO")));
	return E_INVALIDARG;
    }

    // no ICM codecs can decompress to ARGB.
    //
    if( *pmtOut->Subtype( ) == MEDIASUBTYPE_ARGB32 )
    {
        return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtOut->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: output format type not VIDINFO")));
        return E_INVALIDARG;
    }
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: input format type not VIDINFO")));
        return E_INVALIDARG;
    }

    fccIn.SetFOURCC(pmtIn->Subtype());
    if (fccIn != *pmtIn->Subtype()) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: input subtype not a FOURCC")));
	return E_INVALIDARG;
    }

    ASSERT(pmtOut->Format());

    // this stinks for slowness, but we've made a rule that whenever we talk
    // to a codec with YUV, we're going to force biHeight to be -. This at least
    // forces us to be consistent when talking to the ICM drivers
    //
    VIDEOINFOHEADER * pVIHin = (VIDEOINFOHEADER*) pmtIn->Format( );
    VIDEOINFOHEADER * pVIHout = (VIDEOINFOHEADER*) pmtOut->Format( );

    CMediaType cmtOutCopy(*pmtOut);
    VIDEOINFOHEADER * pVIHoutCopy = (VIDEOINFOHEADER *)cmtOutCopy.Format();

    BITMAPINFOHEADER &outBIHcopy = pVIHoutCopy->bmiHeader;
    BITMAPINFOHEADER * pBIHout = &outBIHcopy;
    BITMAPINFOHEADER * pBIHin = &pVIHin->bmiHeader;
    if( ( outBIHcopy.biHeight > 0 ) && IsYUVType( pmtOut ) )
    {
        DbgLog((LOG_TRACE,3,TEXT("  checktransform flipping output biHeight to -, since YUV")));
        outBIHcopy.biHeight *= -1;
    }

    // these rects should ALWAYS be filled in, since the commented out
    // code below just copied, then filled in anyhow
    //
    RECT rcS, rcT;
    GetSrcTargetRects( pVIHout, &rcS, &rcT );

    DbgLog((LOG_TRACE,3,TEXT("Check fccIn: %lx biCompIn: %lx bitDepthIn: %d"),
		fccIn.GetFOURCC(),
		pBIHin->biCompression,
		pBIHin->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthIn: %ld biHeightIn: %ld biSizeIn: %ld"),
		pBIHin->biWidth,
		pBIHin->biHeight,
		pBIHin->biSize));
    DbgLog((LOG_TRACE,3,TEXT("fccOut: %lx biCompOut: %lx bitDepthOut: %d"),
		fccOut.GetFOURCC(),
		pBIHout->biCompression,
		pBIHout->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthOut: %ld biHeightOut: %ld"),
		pBIHout->biWidth,
		pBIHout->biHeight));
    DbgLog((LOG_TRACE,3,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		rcS.left, rcS.top, rcS.right, rcS.bottom));
    DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		rcT.left, rcT.top, rcT.right, rcT.bottom));

    // ehr: if the output pin exists, and is NOT connected, then reject
    // transforms between matching media types. If the output pin is connected,
    // then the video renderer might suggest going from YUV to YUV in mid-stride,
    // which we should allow querying for
    //
    if( !m_fToRenderer && m_pOutput && !m_pOutput->IsConnected( ) )
    {
        if( HEADER( pVIHin )->biCompression == HEADER( pVIHout )->biCompression )
        {
            DbgLog((LOG_TRACE,3,TEXT("Rejecting: dec used as pass-thru, same compression formats")));
            return E_INVALIDARG;
        }
        else if( IsYUVType( pmtIn ) && IsYUVType( pmtOut ) )
        {
          // also don't allow yuv to yuv conversions, to avoid endless connections to ourself
          // for certain codecs that do uyvy to yuy2 conversions and back (since our merit is high)
            DbgLog((LOG_TRACE,3,TEXT("Rejecting: dec used as yuv to yuv, which we don't allow")));
            return E_INVALIDARG;
        }
    }

    // find a codec for this transform

    // I assume that we've already got a codec open
    ASSERT(m_hic);

    // the right codec better be open!
    // When reconnecting, we'll get called with a new input, but same output,
    // and better admit we can handle it
    if (m_FourCCIn != fccIn.GetFOURCC()) {
        DbgLog((LOG_TRACE,4,TEXT("Testing with a newly opened decompressor")));
        hic = ICLocate(ICTYPE_VIDEO, fccIn.GetFOURCC(),
			pBIHin, NULL, ICMODE_DECOMPRESS);
	if (hic)
	    fOpenedHIC = TRUE;
    } else {
	// We already have the right codec open to try this transform
        DbgLog((LOG_TRACE,4,TEXT("Testing with the cached decompressor")));
	hic = m_hic;
    }

    if (!hic) {
        DbgLog((LOG_ERROR,1,TEXT("Error: Can't find a decompressor")));
	return E_FAIL;
    }

    // If we are being asked to do something funky, we have to use ICDecompressEx
    // We need to call ShouldsUseEx here because m_bUseEx isn't in context, we're just
    // calling ICDecompress(Ex?)Query
    if( ShouldUseExFuncs( hic, pVIHin, pVIHout ) ) {
        DbgLog((LOG_TRACE,4,TEXT("Trying this format with ICDecompressEx")));
        err = ICDecompressExQuery(hic, 0, pBIHin, NULL,
		rcS.left, rcS.top,
		rcS.right - rcS.left,
		rcS.bottom - rcS.top,
		pBIHout, NULL,
		rcT.left, rcT.top,
		rcT.right - rcT.left,
		rcT.bottom - rcT.top);
    } else {
        DbgLog((LOG_TRACE,4,TEXT("Trying this format with ICDecompress")));
        err = ICDecompressQuery(hic, pBIHin, pBIHout);
    }

    // if we just opened it, close it.
    if (fOpenedHIC)
	ICClose(hic);

    if (err != ICERR_OK) {
        DbgLog((LOG_TRACE,3,TEXT("decompressor rejected this transform")));
        return E_FAIL;
    }

    return NOERROR;
}


// overriden to know when the media type is actually set

HRESULT CAVIDec::SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt)
{
    FOURCCMap fccHandler;

    if (direction == PINDIR_OUTPUT) {

	// Please call me if this goes off. -DannyMi
	ASSERT(!m_fStreaming);

	// OK, we've finally decided on what codec to use.  See if it
	// supports temporal compression, but can't do it without needing
	// the undisturbed previous bits.  If so, then we need to use
	// 1 read only buffer on our output pin (in DecideAllocator and
	// DecideBufferSize)
	ASSERT(m_hic);
	ICINFO icinfo;
 	DWORD dw = ICGetInfo(m_hic, &icinfo, sizeof(icinfo));
	m_fTemporal = TRUE;	// better safe than sorry?
	if (dw > 0) {
	    m_fTemporal = (icinfo.dwFlags & VIDCF_TEMPORAL) &&
				!(icinfo.dwFlags & VIDCF_FASTTEMPORALD);
	}
        DbgLog((LOG_TRACE,3,TEXT("Temporal compressor=%d"), m_fTemporal));
        DbgLog((LOG_TRACE,3,TEXT("***::SetMediaType (output)")));
        DbgLog((LOG_TRACE,3,TEXT("Output type is: biComp=%lx biBitCount=%d"),
		HEADER(OutputFormat())->biCompression,
		HEADER(OutputFormat())->biBitCount));

	return NOERROR;
    }

    ASSERT(direction == PINDIR_INPUT);

    DbgLog((LOG_TRACE,3,TEXT("***::SetMediaType (input)")));
    DbgLog((LOG_TRACE,3,TEXT("Input type is: biComp=%lx biBitCount=%d"),
		HEADER(InputFormat())->biCompression,
		HEADER(InputFormat())->biBitCount));

    // Please call me if this goes off. -DannyMi
    ASSERT(!m_fStreaming);

    // We better have one of these opened by now
    ASSERT(m_hic);

    // We better have the RIGHT one open
    FOURCCMap fccIn;
    fccIn.SetFOURCC(pmt->Subtype());

    // Please call me if this goes off. -DannyMi
    // Maybe a dynamic input format change?  But that shouldn't call
    // SetMediaType, or it will force a reconnect of the output which is bad.
    ASSERT(m_FourCCIn == fccIn.GetFOURCC());

    // !!! BUG! We won't let somebody reconnect our input from cinepak to
    // RLE if our output is 24 bit RGB because RLE can't decompress to 24 bit
    // We would have to override CheckMediaType not to call CheckTransform
    // with the current output type

    if (m_pOutput && m_pOutput->IsConnected()) {
        DbgLog((LOG_TRACE,2,TEXT("***Changing IN when OUT already connected")));
        DbgLog((LOG_TRACE,2,TEXT("Reconnecting the output pin...")));
	// This shouldn't fail, we're not changing the media type
	m_pGraph->Reconnect(m_pOutput);
    }

    return NOERROR;
}


// Return our preferred output media types (in order)
// remember that we do not need to support all of these formats -
// if one is considered potentially suitable, our CheckTransform method
// will be called to check if it is acceptable right now.
// Remember that the enumerator calling this will stop enumeration as soon as
// it receives a S_FALSE return.
//
// NOTE: We can't enumerate the codecs so we are pulling random formats out
// of our butt!

HRESULT CAVIDec::GetMediaType(int iPosition,CMediaType *pmt)
{
    LARGE_INTEGER li;
    FOURCCMap fccHandler;
    VIDEOINFOHEADER *pf;

    DbgLog((LOG_TRACE,3,TEXT("*::GetMediaType #%d"), iPosition));

    if (pmt == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("Media type is NULL, no can do")));
	return E_INVALIDARG;
    }

    // Output choices depend on the input connected
    if (!m_pInput->CurrentMediaType().IsValid()) {
        DbgLog((LOG_TRACE,3,TEXT("No input type set yet, no can do")));
	return E_FAIL;
    }

    if (iPosition < 0) {
        return E_INVALIDARG;
    }

    // Caution: These are given out of order. be careful renumbering
    // the case statements !!!

    switch (iPosition) {
	
    // Offer the compressor's favourite after all the YUV and RGB's we offer, so
    // we don't end up always using 8 bit or 24 bit over YUV just cuz it's the
    // compressor's favourite

    // cinepak crashes on win95 and osr2
//     // Offer CPLA (Cinepak's favourite and best looking)
//     case 0:
//     {

//         DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 0: CPLA")));

// 	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
//      // only offer positive heights so downstream connections aren't confused
//      HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

// 	// Can't error, can only be smaller
// 	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

// 	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
// 	lpbi->biSize = sizeof(BITMAPINFOHEADER);
// 	lpbi->biCompression = MKFOURCC('C','P','L','A');
// 	lpbi->biBitCount = 12;
// 	lpbi->biClrUsed = 0;
// 	lpbi->biClrImportant = 0;
// 	lpbi->biSizeImage = DIBSIZE(*lpbi);

//         pmt->SetSubtype(&MEDIASUBTYPE_CPLA);

//         break;
//     }




    // offer CLJR (Cinepak and Cirrus Logic can do this)
    case 0:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 1: CLJR")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = MKFOURCC('C','L','J','R');
	lpbi->biBitCount = 8;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_CLJR);

        break;
    }

    // offer UYVY (Cinepak can do this)
    case 1:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 3: UYVY")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = MKFOURCC('U','Y','V','Y');
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_UYVY);

        break;
    }

    // offer YUY2 (Cinepak can do this)
    case 2:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 4: YUY2")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = MKFOURCC('Y','U','Y','2');
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_YUY2);

        break;
    }

    // Offer 32 bpp RGB
    case 3:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 5: 32 bit RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 32;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB32);

        break;
    }

    // Offer 24 bpp RGB
    case 4:
    {
        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 6: 24 bit RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 24;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB24);

        break;
    }

    // Offer 16 bpp RGB 565 before 555
    case 5:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 7: 565 RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	if (pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER) +
							SIZE_MASKS) == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Out of memory reallocating format")));
	    return E_OUTOFMEMORY;
	}

	// update the RGB 565 bit field masks

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_BITFIELDS;
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

	DWORD *pdw = (DWORD *) (lpbi+1);
	pdw[iRED] = bits565[iRED];
	pdw[iGREEN] = bits565[iGREEN];
	pdw[iBLUE] = bits565[iBLUE];

        pmt->SetSubtype(&MEDIASUBTYPE_RGB565);

        break;
    }

    // Offer 16 bpp RGB 555
    case 6:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 8: 555 RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB555);

        break;
    }

    // Offer 8 bpp palettised
    case 7:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 9: 8 bit RGB")));


	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	if (pmt->ReallocFormatBuffer(SIZE_PREHEADER +
			sizeof(BITMAPINFOHEADER) + SIZE_PALETTE) == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Out of memory reallocating format")));
    	    return E_OUTOFMEMORY;
	}

        LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
        lpbi->biCompression = BI_RGB;
        lpbi->biBitCount = 8;
        lpbi->biSizeImage = DIBSIZE(*lpbi);

        // we need the source VIDEOINFOHEADER type to get any palette from and
        // also the number of bytes size it allocated. We copy the palette
        // from the input format in case the codec can't deliver it to us

        VIDEOINFOHEADER *pSourceInfo = InputFormat();
        int nBitDepth = pSourceInfo->bmiHeader.biBitCount;
        int nColours = pSourceInfo->bmiHeader.biClrUsed;
  	if (nColours == 0 && nBitDepth <=8)
	    nColours = 1 << nBitDepth;

        // if there is a palette present then copy the maximum number of bytes
        // available which is bounded by the memory we previously allocated

        if (nColours > 0) {
	    CopyMemory((PVOID)(lpbi + 1),
		   (PVOID) COLORS(pSourceInfo),
		   min(SIZE_PALETTE,nColours * sizeof(RGBQUAD)));
	    lpbi->biClrUsed = nColours;
	    lpbi->biClrImportant = 0;
        } else {

	    // I DON'T KNOW WHY somebody thought this was necessary, but might
	    // as well keep it, just in case.  ONLY DO IT if the source guy
	    // didn't have a palette, or we'll zero out system colours
	    // by mistake. - DannyMi 5/97

            // this is really painful, if we are running on a true colour
            // display we still want the codec to give us the correct palette
	    // colours, but some of them return garbage for the VGA colours so
	    // if we are on a device which isn't palettised then we zero fill
	    // the twenty VGA entries - some british guy 5/95

            HDC hdc = GetDC(NULL);
	    BOOL fPalette = FALSE;
	    if (hdc) {
                fPalette = GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE;
                ReleaseDC(NULL,hdc);
	    }

            if (!fPalette) {
                ZeroMemory((lpbi + 1),10 * sizeof(RGBQUAD));
                ZeroMemory((LPBYTE)(lpbi + 1) + 246 * sizeof(RGBQUAD),
							    10 * sizeof(RGBQUAD));
            }
	}

        // Read palette from codec - will write palette to output lpbi
        // ignore any error: the palette used will be from the source
        // in that case (which we have already copied)

	ICDecompressGetPalette(m_hic, HEADER(pSourceInfo), lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB8);

        break;
    }

#ifdef OFFER_NEGATIVE_HEIGHTS

    // offer CLJR (Cinepak and Cirrus Logic can do this)
    case 8:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 1: CLJR")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = MKFOURCC('C','L','J','R');
	lpbi->biBitCount = 8;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        pmt->SetSubtype(&MEDIASUBTYPE_CLJR);

        break;
    }

    // offer UYVY (Cinepak can do this)
    case 9:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 3: UYVY")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = MKFOURCC('U','Y','V','Y');
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        pmt->SetSubtype(&MEDIASUBTYPE_UYVY);

        break;
    }

    // offer YUY2 (Cinepak can do this)
    case 10:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 4: YUY2")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = MKFOURCC('Y','U','Y','2');
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        pmt->SetSubtype(&MEDIASUBTYPE_YUY2);

        break;
    }

    // Offer 32 bpp RGB
    case 11:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 5: 32 bit RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 32;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        pmt->SetSubtype(&MEDIASUBTYPE_RGB32);

        break;
    }

    // Offer 24 bpp RGB
    case 12:
    {
        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 6: 24 bit RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 24;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        pmt->SetSubtype(&MEDIASUBTYPE_RGB24);

        break;
    }

    // Offer 16 bpp RGB 565 before 555
    case 13:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 7: 565 RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	if (pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER) +
							SIZE_MASKS) == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Out of memory reallocating format")));
	    return E_OUTOFMEMORY;
	}

	// update the RGB 565 bit field masks

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_BITFIELDS;
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

	DWORD *pdw = (DWORD *) (lpbi+1);
	pdw[iRED] = bits565[iRED];
	pdw[iGREEN] = bits565[iGREEN];
	pdw[iBLUE] = bits565[iBLUE];

        pmt->SetSubtype(&MEDIASUBTYPE_RGB565);

        break;
    }

    // Offer 16 bpp RGB 555
    case 14:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 8: 555 RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        pmt->SetSubtype(&MEDIASUBTYPE_RGB555);

        break;
    }

    // Offer 8 bpp palettised
    case 15:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 9: 8 bit RGB")));


	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// now offer negative type
	HEADER(pmt->Format())->biHeight = -ABS(HEADER(pmt->Format())->biHeight);

	if (pmt->ReallocFormatBuffer(SIZE_PREHEADER +
			sizeof(BITMAPINFOHEADER) + SIZE_PALETTE) == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Out of memory reallocating format")));
    	    return E_OUTOFMEMORY;
	}

        LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
        lpbi->biCompression = BI_RGB;
        lpbi->biBitCount = 8;
        lpbi->biSizeImage = DIBSIZE(*lpbi);
        lpbi->biHeight = -abs( lpbi->biHeight );

        // we need the source VIDEOINFOHEADER type to get any palette from and
        // also the number of bytes size it allocated. We copy the palette
        // from the input format in case the codec can't deliver it to us

        VIDEOINFOHEADER *pSourceInfo = InputFormat();
        int nBitDepth = pSourceInfo->bmiHeader.biBitCount;
        int nColours = pSourceInfo->bmiHeader.biClrUsed;
  	if (nColours == 0 && nBitDepth <=8)
	    nColours = 1 << nBitDepth;

        // if there is a palette present then copy the maximum number of bytes
        // available which is bounded by the memory we previously allocated

        if (nColours > 0) {
	    CopyMemory((PVOID)(lpbi + 1),
		   (PVOID) COLORS(pSourceInfo),
		   min(SIZE_PALETTE,nColours * sizeof(RGBQUAD)));
	    lpbi->biClrUsed = nColours;
	    lpbi->biClrImportant = 0;
        } else {

	    // I DON'T KNOW WHY somebody thought this was necessary, but might
	    // as well keep it, just in case.  ONLY DO IT if the source guy
	    // didn't have a palette, or we'll zero out system colours
	    // by mistake. - DannyMi 5/97

            // this is really painful, if we are running on a true colour
            // display we still want the codec to give us the correct palette
	    // colours, but some of them return garbage for the VGA colours so
	    // if we are on a device which isn't palettised then we zero fill
	    // the twenty VGA entries - some british guy 5/95

            HDC hdc = GetDC(NULL);
	    BOOL fPalette = FALSE;
	    if (hdc) {
                fPalette = GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE;
                ReleaseDC(NULL,hdc);
	    }

            if (!fPalette) {
                ZeroMemory((lpbi + 1),10 * sizeof(RGBQUAD));
                ZeroMemory((LPBYTE)(lpbi + 1) + 246 * sizeof(RGBQUAD),
							    10 * sizeof(RGBQUAD));
            }
	}

        // Read palette from codec - will write palette to output lpbi
        // ignore any error: the palette used will be from the source
        // in that case (which we have already copied)

	ICDecompressGetPalette(m_hic, HEADER(pSourceInfo), lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB8);

        break;
    }


    // !!! This comes last because it might fail, and stop enumerating
    case 16:
#else
    case 8:
#endif
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Last Media Type: default codec out")));

        // ask the codec to recommend an output format size and add on the
        // space required by the extra members in the VIDEOINFOHEADER structure
        ULONG cb = ICDecompressGetFormatSize(m_hic,
			HEADER(InputFormat()));
        if (cb <= 0) {
            DbgLog((LOG_ERROR,1,TEXT("Error %d in ICDecompressGetFormatSize"),
									cb));
     	    return E_FAIL;
        }

        // allocate a VIDEOINFOHEADER for the default output format
        cb += SIZE_PREHEADER;
        pf = (VIDEOINFOHEADER *)pmt->AllocFormatBuffer(cb);
        if (pf == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Error allocating format buffer")));
	    return E_OUTOFMEMORY;
        }

        RESET_HEADER(pf);

        DWORD dwerr = ICDecompressGetFormat(m_hic,
			HEADER(InputFormat()),
	    		HEADER(pmt->Format()));
        if (ICERR_OK != dwerr) {
             DbgLog((LOG_ERROR,1,TEXT("Error from ICDecompressGetFormat")));
	     return E_FAIL;
        }

        DbgLog((LOG_TRACE,3,TEXT("biComp: %x biBitCount: %d"),
			HEADER(pmt->Format())->biCompression,
	 		HEADER(pmt->Format())->biBitCount));

        const GUID SubTypeGUID = GetBitmapSubtype(HEADER(pmt->Format()));
        pmt->SetSubtype(&SubTypeGUID);

        break;
    }





    default:
	return VFW_S_NO_MORE_ITEMS;

    }

    // now set the common things about the media type
    pf = (VIDEOINFOHEADER *)pmt->Format();
    pf->AvgTimePerFrame = InputFormat( )->AvgTimePerFrame;
    li.QuadPart = pf->AvgTimePerFrame;
    if (li.LowPart)
        pf->dwBitRate = MulDiv(pf->bmiHeader.biSizeImage, 80000000, li.LowPart);
    pf->dwBitErrorRate = 0L;
    pmt->SetType(&MEDIATYPE_Video);
    pmt->SetSampleSize(pf->bmiHeader.biSizeImage);
    pmt->SetFormatType(&FORMAT_VideoInfo);
    pmt->SetTemporalCompression(FALSE);

    return NOERROR;
}

HRESULT CAVIDec::CheckConnect(PIN_DIRECTION dir,IPin *pPin)
{
    m_fToRenderer = false;
    if(dir == PINDIR_OUTPUT)
    {
        PIN_INFO pi;
        HRESULT hr = pPin->QueryPinInfo(&pi);
        if(hr == S_OK && pi.pFilter) {
            CLSID clsid;
            if(pi.pFilter->GetClassID(&clsid) == S_OK &&
               clsid == CLSID_VideoMixingRenderer) {
                m_fToRenderer = true;
            }
            pi.pFilter->Release();
        }
    }
    return CVideoTransformFilter::CheckConnect(dir, pPin);
}

HRESULT CAVIDec::BreakConnect(PIN_DIRECTION dir)
{
    // probably no need to reset because we will always set before
    // checking this variable
    m_fToRenderer = false;

    return CVideoTransformFilter::BreakConnect(dir);
}


// overridden to create a CDecOutputPin
// !!! base class changes won't get picked up by me
//
CBasePin * CAVIDec::GetPin(int n)
{
    HRESULT hr = S_OK;

    // Create an input pin if necessary

    if (m_pInput == NULL) {

        m_pInput = new CTransformInputPin(NAME("Transform input pin"),
                                          this,              // Owner filter
                                          &hr,               // Result code
                                          L"XForm In");      // Pin name


        //  Can't fail
        ASSERT(SUCCEEDED(hr));
        if (m_pInput == NULL) {
            return NULL;
        }
        m_pOutput = (CTransformOutputPin *)
		   new CDecOutputPin(NAME("Transform output pin"),
                                            this,            // Owner filter
                                            &hr,             // Result code
                                            L"XForm Out");   // Pin name


        // Can't fail
        ASSERT(SUCCEEDED(hr));
        if (m_pOutput == NULL) {
            delete m_pInput;
            m_pInput = NULL;
        }
    }

    // Return the appropriate pin

    if (n == 0) {
        return m_pInput;
    } else
    if (n == 1) {
        return m_pOutput;
    } else {
        return NULL;
    }
}


// overridden to properly mark buffers read only or not in NotifyAllocator
// !!! base class changes won't get picked up by me
//
HRESULT CDecOutputPin::DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;

    // get downstream prop request
    // the derived class may modify this in DecideBufferSize, but
    // we assume that he will consistently modify it the same way,
    // so we only get it once
    ALLOCATOR_PROPERTIES prop;
    ZeroMemory(&prop, sizeof(prop));

    // whatever he returns, we assume prop is either all zeros
    // or he has filled it out.
    pPin->GetAllocatorRequirements(&prop);

    // if he doesn't care about alignment, then set it to 1
    if (prop.cbAlign == 0) {
        prop.cbAlign = 1;
    }

    /* Try the allocator provided by the input pin */

    hr = pPin->GetAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

	hr = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hr)) {
	    // temporal compression ==> read only buffers
	    hr = pPin->NotifyAllocator(*ppAlloc,
					((CAVIDec *)m_pFilter)->m_fTemporal);
	    if (SUCCEEDED(hr)) {
		return NOERROR;
	    }
	}
    }

    /* If the GetAllocator failed we may not have an interface */

    if (*ppAlloc) {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }

    /* Try the output pin's allocator by the same method */

    hr = InitAllocator(ppAlloc);
    if (SUCCEEDED(hr)) {

        // note - the properties passed here are in the same
        // structure as above and may have been modified by
        // the previous call to DecideBufferSize
	hr = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hr)) {
	    // temporal compression ==> read only buffers
	    hr = pPin->NotifyAllocator(*ppAlloc,
					((CAVIDec *)m_pFilter)->m_fTemporal);
	    if (SUCCEEDED(hr)) {
		return NOERROR;
	    }
	}
    }

    /* Likewise we may not have an interface to release */

    if (*ppAlloc) {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }
    return hr;
}


// called from CBaseOutputPin to prepare the allocator's count
// of buffers and sizes
HRESULT CAVIDec::DecideBufferSize(IMemAllocator * pAllocator,
                                  ALLOCATOR_PROPERTIES *pProperties)
{
    // David assures me this won't be called with NULL output mt.
    ASSERT(m_pOutput->CurrentMediaType().IsValid());
    ASSERT(pAllocator);
    ASSERT(pProperties);
    ASSERT(m_hic);

    // If we are doing temporal compression where we need the undisturbed
    // previous bits, we insist on 1 buffer (also our default)
    if (m_fTemporal || pProperties->cBuffers == 0)
        pProperties->cBuffers = 1;

    // set the size of buffers based on the expected output frame size
    pProperties->cbBuffer = m_pOutput->CurrentMediaType().GetSampleSize();

    ASSERT(pProperties->cbBuffer);

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAllocator->SetProperties(pProperties,&Actual);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error in SetProperties")));
	return hr;
    }

    if (Actual.cbBuffer < pProperties->cbBuffer) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - buffer too small")));
	return E_INVALIDARG;
    }

    // For temporal compressors, we MUST get exactly one buffer, since we assume
    // that the previous decompressed frame is already present in the output
    // buffer. The alternative is to copy the bits from a saved location before
    // doing the decompression, but that is not nice.
    if (m_fTemporal && Actual.cBuffers != 1) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - need exactly 1 buffer")));
	return E_INVALIDARG;
    }

    DbgLog((LOG_TRACE,2,TEXT("Using %d buffers of size %d"),
					Actual.cBuffers, Actual.cbBuffer));


    // It happens - connect me to the mux.  I don't care
    //ASSERT(Actual.cbAlign == 1);
    //ASSERT(Actual.cbPrefix == 0);
    //DbgLog((LOG_TRACE,1,TEXT("Buffer Align=%d Prefix=%d"), Actual.cbAlign, Actual.cbPrefix));

    return S_OK;
}

#include "..\..\..\filters\asf\wmsdk\inc\wmsdk.h"

HRESULT CAVIDec::StartStreaming()
{
    DWORD_PTR err;

    DbgLog((LOG_TRACE,2,TEXT("*::StartStreaming")));

    // first copy the media type to our internal one. Type changes on the output pin
    // will cause this to update, which is good.
    //
    m_mtFixedOut = m_pOutput->CurrentMediaType( );

    // see if we need to fix up biHeight on m_mtFixedOut if we output YUV
    // this will change m_mtFixedOut's biHeight if necessary
    //
    CheckNegBiHeight( );

    VIDEOINFOHEADER * pVIHout = IntOutputFormat( ); // internal
    VIDEOINFOHEADER * pVIHin = InputFormat( );
    LPBITMAPINFOHEADER lpbiSrc = HEADER(pVIHin);
    LPBITMAPINFOHEADER lpbiDst = HEADER(pVIHout);

    if (!m_fStreaming) {
        if (lpbiSrc->biCompression == 0x3334504d && m_pGraph) { // !!! MP43
            IObjectWithSite *pSite;
            HRESULT hrKey = m_pGraph->QueryInterface(IID_IObjectWithSite, (VOID **)&pSite);
            if (SUCCEEDED(hrKey)) {
                IServiceProvider *pSP;
                hrKey = pSite->GetSite(IID_IServiceProvider, (VOID **)&pSP);
                pSite->Release();

                if (SUCCEEDED(hrKey)) {
                    IUnknown *pKey;
                    hrKey = pSP->QueryService(__uuidof(IWMReader), IID_IUnknown, (void **) &pKey);
                    pSP->Release();

                    if (SUCCEEDED(hrKey)) {
                        // !!! verify key?
                        pKey->Release();

                        DbgLog((LOG_TRACE, 1, "Dec: Unlocking MP43 codec"));
                        //
                        // Use GetState() to set the key into a particular
                        // instance of the codec.  While it looks odd
                        // to be using ICGetState to set values, it is correct!
                        //

                        DWORD dwSize = ICGetStateSize( m_hic );

                        if( dwSize <= 256 )
                        {
                            CHAR rgcBuf[256];
                            MSVIDUNLOCKKEY *pks;

                            pks = (MSVIDUNLOCKKEY *)rgcBuf;

                            pks->dwVersion = MSMP43KEY_VERSION;
                            pks->guidKey   = __uuidof( MSMP43KEY_V1 );

                            ICGetState( m_hic, rgcBuf, dwSize );
                        } else {
                            ASSERT(0);
                        }
                    }
                }
            }
        }

        // indeo codec (V4.11.15.60) crashes in ICDecompressBegin with
        // the 2.0 runtime because of this call
        // cinepak blows up thinking CLJR is palettised, too
        if (lpbiSrc->biCompression != FCC('IV41') &&
        			lpbiDst->biCompression != FCC('CLJR')) {
            ICDecompressSetPalette(m_hic, lpbiDst);
        }

        // start off with it being false
        //
        m_bUseEx = FALSE;

	// Start Streaming Decompression - if we're doing something funky, use
	// ICDecompressEx
        // find out if we can set m_bUseEx by calling ShoudUseEx...
        if( ShouldUseExFuncs( m_hic, pVIHin, pVIHout ) ) {

            // these rects should ALWAYS be filled in
            //
            RECT rcS, rcT;
            GetSrcTargetRects( pVIHout, &rcS, &rcT );

            // set it here now that we've called DecompressExBegin
            //
            m_bUseEx = TRUE;

            DbgLog((LOG_TRACE,3,TEXT("Calling ICDecompressExBegin")));

	    err = ICDecompressExBegin(m_hic, 0,
			lpbiSrc, NULL,
			rcS.left, rcS.top,
			rcS.right - rcS.left,
			rcS.bottom - rcS.top,
			lpbiDst, NULL,
			rcT.left,
// !!! What about when the big rect is the movie size, and there's a subrect?
// Should I do this hack or not?
// !!! How should I munge the source rect?
			(lpbiDst->biHeight > 0) ? rcT.top :
				(ABS(lpbiDst->biHeight) - rcT.bottom),
			rcT.right - rcT.left,
			rcT.bottom - rcT.top);
	} else {
            DbgLog((LOG_TRACE,3,TEXT("Calling ICDecompressBegin")));
	    err = ICDecompressBegin(m_hic, lpbiSrc, lpbiDst);
            if( err != ICERR_OK )
            {
                DbgLog((LOG_TRACE,2,TEXT("ICDecompressBegin failed")));

                // something went wrong. If the heighth was -,
                // then we'll try again with a + height
                //
                if( lpbiDst->biHeight < 0 )
                {
                    DbgLog((LOG_TRACE,2,TEXT("trying ICDecompressBegin with flipped biHeight")));

                    lpbiDst->biHeight = abs( lpbiDst->biHeight );
                    LRESULT err2 = 0;
            	    err2 = ICDecompressBegin(m_hic, lpbiSrc, lpbiDst);

                    if( err2 == ICERR_OK )
                    {
                        DbgLog((LOG_TRACE,2,TEXT("that worked!")));

                        int erudolphsezcallmeifthisgoesoff = 0;
                        ASSERT( erudolphsezcallmeifthisgoesoff );
                        err = err2;
                    }
                    else
                    {
                        DbgLog((LOG_TRACE,2,TEXT("didn't work, so we'll fail")));

                        // put it back to - so we don't confuse anybody
                        //
                        lpbiDst->biHeight = -lpbiDst->biHeight;
                    }
                }
            }
	}

	if (ICERR_OK == err) {
	    m_fStreaming = TRUE;

#ifdef _X86_
            // Create our exception handler heap
            ASSERT(m_hhpShared == NULL);
            if (g_osInfo.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS) {
               m_hhpShared = CreateFileMapping(INVALID_HANDLE_VALUE,
                                               NULL,
                                               PAGE_READWRITE,
                                               0,
                                               20,
                                               NULL);
               if (m_hhpShared) {
                   m_pvShared = MapViewOfFile(m_hhpShared,
                                              FILE_MAP_WRITE,
                                              0,
                                              0,
                                              20);
                   if (m_pvShared == NULL) {
                       EXECUTE_ASSERT(CloseHandle(m_hhpShared));
                       m_hhpShared = NULL;
                   } else {
                       DbgLog((LOG_TRACE, 1, TEXT("Shared memory at %8.8X"),
                              m_pvShared));
                   }
               }
            }
#endif // _X86_
	} else {
            DbgLog((LOG_ERROR,1,TEXT("Error %d in ICDecompress(Ex)Begin"),err));
	    return E_FAIL;
	}	

    } // if !m_fStreaming
    return CVideoTransformFilter::StartStreaming();
}

HRESULT CAVIDec::StopStreaming()
{
    DbgLog((LOG_TRACE,2,TEXT("*::StopStreaming")));

    if (m_fStreaming) {
	ASSERT(m_hic);

	// Stop whichever one was started, m_bUseEx tells us which
        if( m_bUseEx ) {
	    ICDecompressExEnd(m_hic);
	} else {
	    ICDecompressEnd(m_hic);
	}

	m_fStreaming = FALSE;

#ifdef _X86_
        if (m_hhpShared) {
            EXECUTE_ASSERT(UnmapViewOfFile(m_pvShared));
            EXECUTE_ASSERT(CloseHandle(m_hhpShared));;
            m_hhpShared = NULL;
        }
#endif // _X86_
    }
    return NOERROR;
}

// We're now streaming - tell the codec to hurry up from now on
STDMETHODIMP CAVIDec::Run(REFERENCE_TIME tStart)
{
    if (m_State == State_Paused && m_hic) {
        DbgLog((LOG_TRACE,3,TEXT("Sending ICM_DRAW_START to the codec")));
	ICDrawStart(m_hic);
    }

    return CBaseFilter::Run(tStart);
}

// We're no longer streaming (from the codec's point of view)
STDMETHODIMP CAVIDec::Pause(void)
{
    if (m_State == State_Running && m_hic) {
        DbgLog((LOG_TRACE,3,TEXT("Sending ICM_DRAW_STOP to the codec")));
	ICDrawStop(m_hic);
    }

    return CTransformFilter::Pause();
}

// ehr: this little bit of code is a hakk for OSR4.1 bug #117296, which
// is that if you connect a YUV type to the WM (ASF) writer filter,
// since it doesn't suggest and we don't offer -biHeight YUV, the
// Cinepak codec (and possibly others) are told they are decompressing
// to a +biHeight YUV format, and for Cinepak at least, this produces
// YUV video that is inverted, which should NEVER happen. This fixes
// that by telling ALL codecs that if they are decoding to YUV, they
// are doing it to -biHeight YUV, no matter what the connected output
// mediatype is. (We are lying to the codec, but since the rule is that
// + or - biHeight YUV is always "normal", then it's okay)
// We fool the codec by keeping a copy of the media type that's connected
// on the output pin, but we switch around the sign on the biHeight on
// our private copy.

// check for YUV types that need a negative biHeight
// only called from StartStreaming, m_mtFixed(In)Out is already set
void CAVIDec::CheckNegBiHeight( )
{
    if( ( IntOutputFormat( )->bmiHeader.biHeight > 0 ) && IsYUVType( &m_mtFixedOut ) )
    {
        IntOutputFormat( )->bmiHeader.biHeight *= -1;
        DbgLog((LOG_TRACE,1,TEXT("Dec:Flipping internal output biHeight to negative")));
    }
}

BOOL CAVIDec::IsYUVType( const AM_MEDIA_TYPE * pmt)
{
    if( NULL == pmt )
    {
        return FALSE;
    }

//
// !! WARNING: If a YUV type is ever added to this list which has a biSize > sizeof(BITMAPINFOHEADER)
//             then other updates will be required, since the code which handles ensuring negative
//             biHeights are passed to ICM calls assumes biSize = BITMAPINFOHEADER size for YUV types, to
//             avoid dynamic allocations.
//

    // packed formats we care about
    const GUID * pYUVs[] =
    {
        // packed formats
        &MEDIASUBTYPE_UYVY,
        &MEDIASUBTYPE_YUY2,
        &MEDIASUBTYPE_CLJR,
        &MEDIASUBTYPE_Y211,
        &MEDIASUBTYPE_Y411,
        &MEDIASUBTYPE_YUYV,
        &MEDIASUBTYPE_Y41P,
        &MEDIASUBTYPE_YVYU,
        // planar formats
        &MEDIASUBTYPE_YVU9,
        &MEDIASUBTYPE_IF09,
        &MEDIASUBTYPE_YV12,
        &MEDIASUBTYPE_IYUV,
        &MEDIASUBTYPE_CLPL
    };
    int gTypes = sizeof(pYUVs) / sizeof(pYUVs[0]);
    for( int i = 0 ; i < gTypes ; i++ )
    {
        if( pmt->subtype == *pYUVs[i] ) return TRUE;
    }

    return FALSE;
}

// called from CheckTransform, StartStreaming, Transform
// we NEVER pass back empty rects. Anybody who calls this function is about to
// use them for ICDecompressQueryEx or ICDecompressEx, and those functions
// don't want empty rects, ever. Never call IntOutputFormat( ) from here,
// they may not be set by now.
void CAVIDec::GetSrcTargetRects( const VIDEOINFOHEADER * pVIH, RECT * pSource, RECT * pTarget )
{
    if( IsRectEmpty( &pVIH->rcSource ) ) {
        const VIDEOINFOHEADER* pvihInputFormat = InputFormat();

        pSource->left = 0;
        pSource->top = 0;
        pSource->right = pvihInputFormat->bmiHeader.biWidth;
        pSource->bottom = abs( pvihInputFormat->bmiHeader.biHeight );
    } else {
        *pSource = pVIH->rcSource;
    }

    if( IsRectEmpty( &pVIH->rcTarget ) ) {

        pTarget->left = 0;
        pTarget->top = 0;
        pTarget->right = pVIH->bmiHeader.biWidth;
        pTarget->bottom = abs( pVIH->bmiHeader.biHeight );
    } else {
        *pTarget = pVIH->rcTarget;
    }
}

// this function determines if the ICDecompresEx function is used or not.
// Unless a certain driver says it needs to, ICDecompressEx WON'T be called if
// the rects are blank, or if they match the destination width/height
// This function is called from only two places: StartStreaming, and CheckTransform.

BOOL CAVIDec::ShouldUseExFuncs( HIC hic, const VIDEOINFOHEADER * pVIHin, const VIDEOINFOHEADER * pVIHout )
{
    if( ShouldUseExFuncsByDriver( hic, &pVIHin->bmiHeader, &pVIHout->bmiHeader ) )
    {
        return TRUE;
    }

    // if the rects have something in them, and they are not just the full-size values,
    // then we know we need to call the Ex functions
    //
    const RECT * pSource = &pVIHout->rcSource;
    const RECT * pTarget = &pVIHout->rcTarget;
    if( !IsRectEmpty( pSource ) )
    {
        if( pSource->left != 0 || pSource->right != pVIHout->bmiHeader.biWidth || pSource->top != 0 || pSource->bottom != abs( pVIHout->bmiHeader.biHeight ) )
            return TRUE;
    }
    if( !IsRectEmpty( pTarget ) )
    {
        if( pTarget->left != 0 || pTarget->right != pVIHout->bmiHeader.biWidth || pTarget->top != 0 || pTarget->bottom != abs( pVIHout->bmiHeader.biHeight ) )
            return TRUE;
    }

    return FALSE; // too bad it has to check all the above to get to this point. :-(
}

/******************************************************************************

ShouldUseExFuncsByDriver

WNV1: If you don't call the Ex funcs, memory will get corrupted.

WINX: If you don't call the Ex funcs, it'll play upside down

I420, IYUV, M263, M26X:
This function was created to work around bug 257820 and bug 259129.  Both
bugs are in the Windows Bugs database.  Bug 257820's title is "B2: USB: I420
codec causes video to replay upside down.".  Bug 259129's title is "B2:USB:
IYUV codec causes upside down preview in GraphEdit".  Both bugs occur because
the MSH263.DRV codec can produce upside-down bitmaps.  The bug occurs when the
AVI Decompressor does not specify a source rectangle or target rectangle and it
asks MSH263.DRV to output top-down RGB bitmaps.

******************************************************************************/

bool CAVIDec::ShouldUseExFuncsByDriver( HIC hic, const BITMAPINFOHEADER * lpbiSrc, const BITMAPINFOHEADER * lpbiDst )
{
    // WNV1 will corrupt memory in 24 bit upside down without Ex called
    if( lpbiSrc->biCompression == '1VNW' )
    {
        return true;
    }

    // WINX will play upside down without Ex called
    if( lpbiSrc->biCompression == 'XNIW' )
    {
        return true;
    }

    // all output types serviced by MSH263.drv need fixing. But we don't
    // want to call ICGetInfo over and over again, so we need to test the
    // input types that MSH263 offers first
    if(
        lpbiSrc->biCompression == '024I' ||
        lpbiSrc->biCompression == 'VUYI' ||
        lpbiSrc->biCompression == '362M' ||
        lpbiSrc->biCompression == 'X62M' ||
        0 ) // just to make the above lines look nice.
    {
        // Is this a top-down DIBs (negative height) bitmap?
        if( lpbiDst->biHeight >= 0 ) {
            return false;
        }

        // Are we outputing non-RGB bitmaps?
        if( (BI_RGB != lpbiDst->biCompression ) && (BI_BITFIELDS != lpbiDst->biCompression ) ) {
            return false;
        }

        // Determine if we are using the MSH263.DRV decoder.
        ICINFO infoDecompressor;
        infoDecompressor.dwSize = sizeof(ICINFO);

        ASSERT( m_hic != 0 );
        LRESULT lr = ICGetInfo( hic, &infoDecompressor, sizeof(infoDecompressor) );

        // ICGetInfo() returns 0 if an error occurs.  The worst that can happen if this
        // fails is that the video may be upside-down.  Since upside-down video is better
        // than no video we will ignore the failure.  For more information see
        // CAVIDec::ShouldUseExFuncsByDriver()'s function comment.
        if( 0 == lr ) {
            return false;
        }

        const WCHAR MSH263_DRIVER_NAME[] = L"MS H.263";

        // lstrcmpiW() returns 0 if the two strings match.
        if( 0 != lstrcmpiW( infoDecompressor.szName, MSH263_DRIVER_NAME ) ) {
            return false;
        }

        DbgLog((LOG_TRACE,2,TEXT("MSH263 detected, using Ex funcs")));

        return true;
    }

    // default is no...
    //
    return false;
}

#pragma warning(disable:4514)   // inline function removed.
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\co\property.cpp ===
// Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved.

// !!!    all.reg

#include <streams.h>
#include <vfw.h>

#include <olectl.h>

#include "co.h"
#include "resource.h"


#ifdef WANT_DIALOG

CICMProperties::CICMProperties(LPUNKNOWN pUnk,HRESULT *phr) :
    CUnknown(NAME("ICM Property Page"),pUnk),
    m_hwnd(NULL),
    m_Dlg(NULL),
    m_pPageSite(NULL),
    m_bDirty(FALSE),
    m_pICM(NULL)
{
    ASSERT(phr);
    DbgLog((LOG_TRACE,1,TEXT("*** Instantiating the Property Page")));
}


/* Create a video properties object */

CUnknown *CICMProperties::CreateInstance(LPUNKNOWN lpUnk,HRESULT *phr)
{
    DbgLog((LOG_TRACE,1,TEXT("Prop::CreateInstance")));
    return new CICMProperties(lpUnk,phr);
}


/* Expose our IPropertyPage interface */

STDMETHODIMP
CICMProperties::NonDelegatingQueryInterface(REFIID riid,void **ppv)
{
    if (riid == IID_IPropertyPage) {
        DbgLog((LOG_TRACE,1,TEXT("Prop::QI for IPropertyPage")));
        return GetInterface((IPropertyPage *)this,ppv);
    } else {
        DbgLog((LOG_TRACE,1,TEXT("Prop::QI for ???")));
        return CUnknown::NonDelegatingQueryInterface(riid,ppv);
    }
}


/* Handles the messages for our property window */

BOOL CALLBACK CICMProperties::ICMDialogProc(HWND hwnd,
                                                UINT uMsg,
                                                WPARAM wParam,
                                                LPARAM lParam)
{
    static CICMProperties *pCICM;

    switch (uMsg) {

        case WM_INITDIALOG:

    	    DbgLog((LOG_TRACE,1,TEXT("Initializing the Dialog Box")));
            pCICM = (CICMProperties *) lParam;
            pCICM->m_bDirty = FALSE;
            pCICM->m_Dlg = hwnd;
            return (LRESULT) 1;

        case WM_COMMAND:

            switch (LOWORD(wParam)) {

		case ID_OPTIONS:
		    DbgLog((LOG_TRACE,1,TEXT("You pressed the magic button!")));
		    // Is m_pICM initialized for sure?
		    ASSERT(pCICM->m_pICM);
	    	    if (pCICM->m_pICM->ICMChooseDialog(pCICM->m_hwnd) == S_OK)
            		pCICM->m_bDirty = TRUE;	// so what?
	    }
            return (LRESULT) 0;
    }
    return (LRESULT) 0;
}


/* Tells us the object that should be informed of the property changes */

STDMETHODIMP CICMProperties::SetObjects(ULONG cObjects,LPUNKNOWN *ppUnk)
{
    HRESULT hr = NOERROR;

    DbgLog((LOG_TRACE,1,TEXT("Prop::SetObjects")));

    if (cObjects == 1) {
        DbgLog((LOG_TRACE,2,TEXT("Getting the IICMOptions interface")));

        if ((ppUnk == NULL) || (*ppUnk == NULL)) {
            return E_POINTER;
        }

        ASSERT(m_pICM == NULL);

        // Ask the CO filter for it's ICMOptions interface.  This is how we are
	// going to communicate what happens in the dialog box to the filter.

        HRESULT hr = (*ppUnk)->QueryInterface(IID_IICMOptions,
						(void **)&m_pICM);
        if (FAILED(hr)) {
            return E_NOINTERFACE;
        }

        ASSERT(m_pICM);

    } else if (cObjects == 0) {
        DbgLog((LOG_TRACE,2,TEXT("Releasing the IICMOptions interface")));

        /* Release the interface */

        if (m_pICM == NULL) {
            return E_UNEXPECTED;
        }

        m_pICM->Release();
        m_pICM = NULL;

    } else {
        DbgLog((LOG_TRACE,2,TEXT("No support for more than one object")));
        return E_UNEXPECTED;
    }
    return NOERROR;
}


/* Get the page info so that the page site can size itself */

STDMETHODIMP CICMProperties::GetPageInfo(LPPROPPAGEINFO pPageInfo)
{
    WCHAR szTitle[] = L"Compression";

    DbgLog((LOG_TRACE,1,TEXT("Prop::GetPageInfo")));

    /* Allocate dynamic memory for the property page title */

    LPOLESTR pszTitle = (LPOLESTR) QzTaskMemAlloc(sizeof(szTitle));
    if (pszTitle == NULL) {
        return E_OUTOFMEMORY;
    }

    memcpy(pszTitle,szTitle,sizeof(szTitle));

    pPageInfo->cb               = sizeof(PROPPAGEINFO);
    pPageInfo->pszTitle         = pszTitle;
    pPageInfo->size.cx          = 76;	// 76;	// !!! get out the measure tape
    pPageInfo->size.cy          = 155;	// 155;	// !!!
    pPageInfo->pszDocString     = NULL;
    pPageInfo->pszHelpFile      = NULL;
    pPageInfo->dwHelpContext    = 0;

    return NOERROR;
}


/* Create the window we will use to edit properties */

STDMETHODIMP CICMProperties::Activate(HWND hwndParent,
                                        LPCRECT pRect,
                                        BOOL fModal)
{
    DbgLog((LOG_TRACE,1,TEXT("Prop::Activate - creating dialog")));

    m_hwnd = CreateDialogParam(g_hInst,
                               MAKEINTRESOURCE(IDD_ICMPROPERTIES),
                               hwndParent,
                               ICMDialogProc,
                               (LPARAM)this);
    if (m_hwnd == NULL) {
        return E_OUTOFMEMORY;
    }
    DbgLog((LOG_TRACE,1,TEXT("Created window %ld"), m_hwnd));

    Move(pRect);
    Show(SW_SHOW);
    return NOERROR;
}


/* Set the position of the property page */

STDMETHODIMP CICMProperties::Move(LPCRECT pRect)
{
    DbgLog((LOG_TRACE,1,TEXT("Prop::Move")));

    if (m_hwnd == NULL) {
        return E_UNEXPECTED;
    }

    MoveWindow(m_hwnd,
               pRect->left,
               pRect->top,
               pRect->right - pRect->left,
               pRect->bottom - pRect->top,
               TRUE);

    return NOERROR;
}


/* Display the property dialog */

STDMETHODIMP CICMProperties::Show(UINT nCmdShow)
{
    DbgLog((LOG_TRACE,1,TEXT("Prop::Show")));

    if (m_hwnd == NULL) {
        return E_UNEXPECTED;
    }

    ShowWindow(m_hwnd,nCmdShow);
    InvalidateRect(m_hwnd,NULL,TRUE);

    return NOERROR;
}


/* Destroy the property page dialog */

STDMETHODIMP CICMProperties::Deactivate(void)
{
    DbgLog((LOG_TRACE,1,TEXT("Prop::Deactivate - destroy the dialog")));

    if (m_hwnd == NULL) {
        return(E_UNEXPECTED);
    }

    /* Destroy the dialog window */

    DestroyWindow(m_hwnd);
    m_hwnd = NULL;
    return NOERROR;
}


/* Tells the application property page site */

STDMETHODIMP CICMProperties::SetPageSite(LPPROPERTYPAGESITE pPageSite)
{
    DbgLog((LOG_TRACE,1,TEXT("Prop::SetPageSite - whatever")));

    if (pPageSite) {

        if (m_pPageSite) {
            return(E_UNEXPECTED);
        }

        m_pPageSite = pPageSite;
        m_pPageSite->AddRef();

    } else {

        if (m_pPageSite == NULL) {
            return(E_UNEXPECTED);
        }

        m_pPageSite->Release();
        m_pPageSite = NULL;
    }
    return NOERROR;
}


/* Apply any changes so far made */

STDMETHODIMP CICMProperties::Apply()
{
    /* Has anything changed */

    if (m_bDirty == TRUE) {
	// !!! We have nothing to do. Can we get rid of the APPLY button?
        m_bDirty = FALSE;
    }
    return NOERROR;
}
#endif	// #ifdef WANT_DIALOG
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\dec\dec.h ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

extern const AMOVIESETUP_FILTER sudAVIDec;

//
// Prototype NDM wrapper for old video codecs
//

#if 0 //-- now in uuids.h
// Class ID for CAVIDec object
// {CF49D4E0-1115-11ce-B03A-0020AF0BA770}
DEFINE_GUID(CLSID_AVIDec,
0xcf49d4e0, 0x1115, 0x11ce, 0xb0, 0x3a, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70);
#endif

class CAVIDec : public CVideoTransformFilter   DYNLINKVFW
{
public:

    CAVIDec(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CAVIDec();

    DECLARE_IUNKNOWN

    // override to create an output pin of our derived class
    CBasePin *GetPin(int n);

    HRESULT Transform(IMediaSample * pIn, IMediaSample * pOut);

    // check if you can support mtIn
    HRESULT CheckInputType(const CMediaType* mtIn);

    // check if you can support the transform from this input to
    // this output
    HRESULT CheckTransform(
                const CMediaType* mtIn,
                const CMediaType* mtOut);

    // called from CBaseOutputPin to prepare the allocator's count
    // of buffers and sizes
    HRESULT DecideBufferSize(IMemAllocator * pAllocator,
                             ALLOCATOR_PROPERTIES *pProperties);

    // optional overrides - we want to know when streaming starts
    // and stops
    HRESULT StartStreaming();
    HRESULT StopStreaming();

    // overridden to know when we're streaming to the codec
    STDMETHODIMP Run(REFERENCE_TIME tStart);
    STDMETHODIMP Pause();

    // overriden to know when the media type is set
    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt);

    // overriden to suggest OUTPUT pin media types
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // special case the VMR.
    HRESULT CheckConnect(PIN_DIRECTION dir,IPin *pPin);
    HRESULT BreakConnect(PIN_DIRECTION dir);

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);

private:

    HIC m_hic;	// current codec

    BOOL m_fTemporal;	// codec needs one read-only buffer because it
			// needs the previous frame bits undisturbed

    // the fourCC used to open m_hic
    FOURCC m_FourCCIn;

    // have we called ICDecompressBegin ?
    BOOL m_fStreaming;

    // do we need to give a format change to the renderer?
    BOOL m_fPassFormatChange;

    BOOL m_bUseEx;

    // same at the output pin's connected mt, except biHeight may be inverted.
    CMediaType m_mtFixedOut;

    VIDEOINFOHEADER * IntOutputFormat( ) { return (VIDEOINFOHEADER*) m_mtFixedOut.Format(); }
    VIDEOINFOHEADER * OutputFormat( ) { return (VIDEOINFOHEADER*) m_pOutput->CurrentMediaType().Format(); }
    VIDEOINFOHEADER * InputFormat() { return (VIDEOINFOHEADER*) m_pInput->CurrentMediaType().Format(); }

    friend class CDecOutputPin;

    // checks the output format, and if necessary, sets to -biHeight on m_mtFixedOut
    void CheckNegBiHeight(void); 

    // helper function, used by CheckTransform and CheckNegBiHeight
    BOOL IsYUVType( const AM_MEDIA_TYPE * pmt);

    // get the src/target rects, fill out with width/height if necessary
    void GetSrcTargetRects( const VIDEOINFOHEADER * pVIH, RECT * pSource, RECT * pTarget );

    // ask if we should use the ex functions or not. called by CheckTransform and StartStreaming
    BOOL ShouldUseExFuncs( HIC hic, const VIDEOINFOHEADER * pVIHin, const VIDEOINFOHEADER * pVIHout );

    // another function that takes care of exceptional drivers
    bool ShouldUseExFuncsByDriver( HIC hic, const BITMAPINFOHEADER * lpbiSrc, const BITMAPINFOHEADER * lpbiDst );

    bool m_fToRenderer;         // VMR downstream?

#ifdef _X86_
    //  HACK HACK for exception handling on win95
    HANDLE m_hhpShared;
    PVOID  m_pvShared;
#endif // _X86_
};

// override the output pin class to do our own decide allocator
class CDecOutputPin : public CTransformOutputPin
{
public:

    DECLARE_IUNKNOWN

    CDecOutputPin(TCHAR *pObjectName, CTransformFilter *pTransformFilter,
        				HRESULT * phr, LPCWSTR pName) :
        CTransformOutputPin(pObjectName, pTransformFilter, phr, pName) {};

    ~CDecOutputPin() {};

    HRESULT DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc);
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\co\resource.h ===
// Copyright (c) 1996  Microsoft Corporation.  All Rights Reserved.
#define IDD_ICMPROPERTIES	700
#define ID_OPTIONS		    701
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\dec\msvidkey.h ===
//+-------------------------------------------------------------------------
//
//  Copyright (C) Microsoft Corporation, 1999 - 1999
//
//  File:       msvidkey.h
//
//  Classes:    n/a
//
//  Contents:   MS Video Codec Keying Mechanism.
//
//  History:    04/01/99     BrianCri    Initial version.
//              05/03/99     BrianCri    Added keying for MP43
//
//--------------------------------------------------------------------------

#ifndef __MSSKEY_H__
#define __MSSKEY_H__

#define MSSKEY_VERSION        1
#define MSMP43KEY_VERSION     1

//
// Use __uuidof( MSSKEY_V1 ) to assign to guidKey!
//

struct __declspec(uuid("65218BA2-E85C-11d2-A4E0-0060976EA0C3")) MSSKEY_V1;
struct __declspec(uuid("B4C66E30-0180-11d3-BBC6-006008320064")) MSMP43KEY_V1;

struct MSVIDUNLOCKKEY
{
    DWORD   dwVersion;
    GUID    guidKey;   
};


#endif // __MSSKEY_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\dec\safeseh.h ===
// Copyright (c) 1998  Microsoft Corporation.  All Rights Reserved.
#ifdef __cplusplus
extern "C" {
#endif

extern BOOL BeginScarySEH(PVOID pvShared);
extern void EndScarySEH(PVOID pvShared);

#define HEAP_SHARED 0x04000000

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\dec\safeseh.c ===
/* Copyright (c) 1998  Microsoft Corporation.  All Rights Reserved. */
//#define STRICT
#include <windows.h>
#include <safeseh.h>

//HANDLE g_hhpShared;
#ifdef _X86_

/*
 *  The trampoline is a small stub that we put up in shared memory
 *  which merely jumps to the real exception handler.  Why do we
 *  do this?  Because on Windows 95, if you take an exception while
 *  the Win16 lock is held, Kernel32 will not dispatch to any
 *  private-arena exception handlers.  This rule is enforced because
 *  application exception handlers are not Win16-lock-aware; if we
 *  let them run, they won't release the Win16 lock and your system
 *  would hang.
 *
 *  And then DirectDraw showed up and broke all the rules by letting
 *  Win32 apps take the Win16 lock.
 *
 *  By putting our handler in the shared arena, we are basically saying,
 *  "We are Win16 lock-aware; please include me in the exception chain."
 *
 *  Code courtesy of RaymondC
 */
#pragma pack(1)
typedef struct TRAMPOLINE {
    BYTE bPush;
    DWORD dwTarget;
    BYTE bRet;
} TRAMPOLINE, LPTRAMPOLINE;
#pragma pack()

/*
 *  Warning!  This code must *NOT* be called if we are running on NT!
 */
BOOL BeginScarySEH(PVOID pvShared)
{
     BOOL bRet;

    _asm {
        mov     eax, pvShared;
	test    eax, eax;
	jz	failed;			/* Out of memory */

	xor	ecx, ecx;		/* Keep zero handy */
	mov	[eax].bPush, 0x68;	/* push immed32 */
	mov	ecx, fs:[ecx];		/* ecx -> SEH frame */
	mov	edx, [ecx][4];		/* edx = original handler */
	mov	[eax].dwTarget, edx;	/* Revector it */
	mov	[eax].bRet, 0xC3;	/* retd */
	mov	[ecx][4], eax;		/* Install the trampoline */
failed:;
        mov     bRet, eax
    }
    return bRet;
}

/*
 *  DO NOT CALL THIS IF BeginScarySEH FAILED!
 */
void EndScarySEH(PVOID pvShared)
{
    _asm {
	xor	edx, edx;		/* Keep zero handy */
	mov	ecx, fs:[edx];		/* ecx -> SEH frame */
	mov	eax, [ecx][4];		/* eax -> trampoline */
	mov	eax, [eax].dwTarget;	/* Extract original handler */
	mov	[ecx][4], eax;		/* Unvector it back */
    }
}

#if 0
void Mumble(void)
{
    if (BeginScarySEH()) {
	__try {
	    OutputDebugString("About to raise exception\r\n");
	    RaiseException(1, 0, 0, 0);
	} __except (EXCEPTION_EXECUTE_HANDLER) {
	    OutputDebugString("Inside exception handler\r\n");
	}
	EndScarySEH();
    }
}

int __cdecl main(int argc, char **argv)
{
    /* Do this once, at app startup; if it fails, abort */
    g_hhpShared = HeapCreate(HEAP_SHARED, 1, 0);
    if (g_hhpShared) {
	Mumble();

	/* Don't forget to do this, or you will leak memory */
	HeapDestroy(g_hhpShared);
    } else {
    }
    return 0;
}
#endif

#endif // _X86_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\draw\coverlay.cpp ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

/*

    Methods for COverlayOutputPin

*/

#include <streams.h>
#include <windowsx.h>

#ifdef FILTER_DLL
#include <vfw.h>
#endif

#include <dynlink.h>
#include "draw.h"

/*
    COverlayOutputPin constructor
*/
COverlayOutputPin::COverlayOutputPin(
    TCHAR              * pObjectName,
    CAVIDraw 	       * pFilter,
    HRESULT            * phr,
    LPCWSTR              pPinName) :

    CTransformOutputPin(pObjectName, pFilter, phr, pPinName),
    m_OverlayNotify(NAME("Overlay notification interface"), pFilter, NULL, phr),
    m_bAdvise(FALSE),
    m_pOverlay(NULL),
    m_pFilter(pFilter)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the Overlay pin")));
}

COverlayOutputPin::~COverlayOutputPin()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying the Overlay pin")));
};


// can we connect to this guy?
//
HRESULT COverlayOutputPin::CheckConnect(IPin *pPin)
{
    DbgLog((LOG_TRACE,3,TEXT("COverlayOutputPin::CheckConnect")));

    // we don't connect to anyone who doesn't support IOverlay.
    // after all, we're an overlay pin
    HRESULT hr = pPin->QueryInterface(IID_IOverlay, (void **)&m_pOverlay);

    if (FAILED(hr)) {
        return E_NOINTERFACE;
    } else {
	m_pOverlay->Release();
	m_pOverlay = NULL;
    }

    return CBaseOutputPin::CheckConnect(pPin);
}


/*
    Say if we're prepared to connect to a given input pin from
    this output pin
*/

STDMETHODIMP COverlayOutputPin::Connect(IPin *pReceivePin,
                                        const AM_MEDIA_TYPE *pmt)
{
    DbgLog((LOG_TRACE,3,TEXT("COverlayOutputPin::Connect")));

    /*  Call the base class to make sure the directions match! */
    HRESULT hr = CBaseOutputPin::Connect(pReceivePin,pmt);
    if (FAILED(hr)) {
        return hr;
    }
    /*  We're happy if we can get an IOverlay interface */

    hr = pReceivePin->QueryInterface(IID_IOverlay,
                                     (void **)&m_pOverlay);

    // we were promised this would work
    ASSERT(SUCCEEDED(hr));

    hr = m_pOverlay->Advise(&m_OverlayNotify,
			(m_pFilter->m_fScaryMode ? ADVISE_CLIPPING : 0) |
 			ADVISE_PALETTE | ADVISE_POSITION);

    /*
        We don't need to hold on to the IOverlay pointer
        because BreakConnect will be called before the receiving
        pin goes away.
    */


    if (FAILED(hr)) {
	// !!! not quite right, but this shouldn't happen
        Disconnect();
	pReceivePin->Disconnect();
        return hr;
    } else {
        m_bAdvise = TRUE;
    }

    return hr;
}


// !!! The base classes change all the time and I won't pick up their bug fixes!
HRESULT COverlayOutputPin::BreakConnect()
{
    DbgLog((LOG_TRACE,3,TEXT("COverlayOutputPin::BreakConnect")));

    if (m_pOverlay != NULL) {
        if (m_bAdvise) {
            m_pOverlay->Unadvise();
            m_bAdvise = FALSE;
        }
        m_pOverlay->Release();
        m_pOverlay = NULL;
    }

    // we've broken our connection, so next time we reconnect don't allow
    // repainting until we've actually drawn something in the first place
    m_pFilter->m_fOKToRepaint = FALSE;

    m_pFilter->BreakConnect(PINDIR_OUTPUT);
    return CBaseOutputPin::BreakConnect();
}


// Override this because we don't want any allocator!
HRESULT COverlayOutputPin::DecideAllocator(IMemInputPin * pPin,
                        IMemAllocator ** pAlloc) {
    /*  We just don't want one so everything's OK as it is */
    return S_OK;
}


// Return the IOverlay interface we are using (AddRef'd)

IOverlay *COverlayOutputPin::GetOverlayInterface()
{
    if (m_pOverlay) {
        m_pOverlay->AddRef();
    }
    return m_pOverlay;
}




//=========================================================================//
//***			I N T E R M I S S I O N				***//
//=========================================================================//




/*
        IOverlayNotify
*/

COverlayNotify::COverlayNotify(TCHAR              * pName,
                               CAVIDraw 	  * pFilter,
                               LPUNKNOWN            pUnk,
                               HRESULT            * phr) :
    CUnknown(pName, pUnk)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating COverlayNotify")));
    m_pFilter = pFilter;
    m_hrgn = CreateRectRgn(0, 0, 0, 0);
}


COverlayNotify::~COverlayNotify()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying COverlayNotify")));
    if (m_hrgn)
        DeleteObject(m_hrgn);
}


STDMETHODIMP COverlayNotify::NonDelegatingQueryInterface(REFIID riid,
                                                         void ** ppv)
{
    DbgLog((LOG_TRACE,99,TEXT("COverlayNotify::QueryInterface")));
    if (ppv)
	*ppv = NULL;

    /* Do we have this interface */

    if (riid == IID_IOverlayNotify) {
        return GetInterface((LPUNKNOWN) (IOverlayNotify *) this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}


STDMETHODIMP_(ULONG) COverlayNotify::NonDelegatingRelease()
{
    return m_pFilter->Release();
}


STDMETHODIMP_(ULONG) COverlayNotify::NonDelegatingAddRef()
{
    return m_pFilter->AddRef();
}


STDMETHODIMP COverlayNotify::OnColorKeyChange(
    const COLORKEY *pColorKey)          // Defines new colour key
{
    DbgLog((LOG_TRACE,3,TEXT("COverlayNotify::OnColorKeyChange")));

// We expect the draw handler to handle colour key stuff, so I'm really
// hoping that the renderer will never draw the colour key itself.

    return NOERROR;
}


// The calls to OnClipChange happen in sync with the window. So it's called
// with an empty clip list before the window moves to freeze the video, and
// then when the window has stabilised it is called again with the new clip
// list. The OnPositionChange callback is for overlay cards that don't want
// the expense of synchronous clipping updates and just want to know when
// the source or destination video positions change. They will NOT be called
// in sync with the window but at some point after the window has changed
// (basicly in time with WM_SIZE etc messages received). This is therefore
// suitable for overlay cards that don't inlay their data to the framebuffer

STDMETHODIMP COverlayNotify::OnClipChange(
    const RECT    * pSourceRect,         // Area of source video to use
    const RECT    * pDestinationRect,    // screen co-ords of window
    const RGNDATA * pRegionData)         // Header describing clipping
{
    POINT pt;
    BOOL fForceBegin = FALSE;

    // we're not even completely connected - don't waste my time!
    if (m_pFilter->m_pInput == NULL ||
			m_pFilter->m_pInput->IsConnected() == FALSE ||
            		m_pFilter->m_pOutput == NULL ||
			m_pFilter->m_pOutput->IsConnected() == FALSE) {
	return NOERROR;
    }

    // totally empty rectangles means that the window is being dragged, or
    // about to be clipped.  We'll be informed of the new position after
    // it's finished moving.  Besides, drivers will blow up with empty rects.
    if (IsRectEmpty(pSourceRect) && IsRectEmpty(pDestinationRect))
	return NOERROR;

    // I get lots of these before the window is visible, and responding to
    // them bogs the system down and kills performance
    if (m_pFilter->m_hwnd && !IsWindowVisible(m_pFilter->m_hwnd))
	return NOERROR;

    // sometimes the video renderer tells us to draw offscreen!
    if (pDestinationRect->left >= GetSystemMetrics(SM_CXSCREEN) ||
			pDestinationRect->top >= GetSystemMetrics(SM_CYSCREEN))
	return NOERROR;

    // get the hwnd as soon as possible, and as soon as it's visible, start
    // partying - we need the rectangles as soon as possible for ICDrawBegin
    // !!! Danger! This will hang if called after play is pressed. (I can't make
    // any calls on the video window during an ::OnClipChange callback)
    if (!m_pFilter->m_fStreaming && !m_pFilter->m_hwnd) {
        m_pFilter->GetRendererHwnd();
	fForceBegin = TRUE;	// give new HDC to handler on next begin
    }

    // !!!

    // I'm seeing some REPAINT ONLY's coming with new rectangles. ???

    // I get way too many of these.  I even get some CLIP CHANGES while the
    // window is invisible, but such is life.

    // If the window moves but does not need repainting, I will still repaint
    // needlessly, not knowing. I don't know how I can tell.

    // !!!

    // Don't let any other ICDraw calls be made during OnClipChange
    // We can't use the m_csReceive crit sec or we WILL deadlock
    // (if they sit in fPauseBlocked when a clip change comes thru)
    //DbgLog((LOG_TRACE,3,TEXT("OnClipChange wants the draw lock")));
    m_pFilter->m_csICDraw.Lock();

    ASSERT(m_pFilter->m_hic);

    BOOL fRectChanged = !EqualRect(&m_pFilter->m_rcTarget, pDestinationRect);
    BOOL fRepaintOnly = FALSE;

    m_pFilter->m_rcSource = *pSourceRect;
    m_pFilter->m_rcTarget = *pDestinationRect;
    m_pFilter->m_rcClient = *pDestinationRect;	// default

    HRGN hrgn;
    if (pRegionData) {
        hrgn = ExtCreateRegion(NULL, pRegionData->rdh.dwSize +
			pRegionData->rdh.nRgnSize, pRegionData);
    } else {
	hrgn = NULL;
    }

    // The image renderer doesn't distinguish between a clip change and
    // only needing to repaint (we may have invalidated ourselves), so we have
    // to figure it out. If we do anything besides repaint when there hasn't
    // been a real clip change, we could infinite loop.

    if (!hrgn || EqualRgn(hrgn, m_hrgn)) {

    	DbgLog((LOG_TRACE,3,TEXT("COverlayNotify::OnClipChange - REPAINT ONLY")));
        fRepaintOnly = TRUE;
    } else {
        DbgLog((LOG_TRACE,3,TEXT("COverlayNotify::OnClipChange - CLIP CHANGE")));
    }

    if (hrgn) {
	if (m_hrgn)
	    DeleteObject(m_hrgn);
        m_hrgn = hrgn;
    }

    // We need to repaint.  If we're running, just have us do it
    // next time we're drawing anyway, otherwise, specifically do it
    // now.  If that fails, better get the graph to send us the data
    // again.
    if (m_pFilter->m_State == State_Running) {
        m_pFilter->m_fNeedUpdate = TRUE;
    } else {
	DWORD_PTR dw;
	// If we're not streaming, we haven't called ICDrawBegin yet, and
	// we can't, because we don't have our formats yet, so we can't call
	// ICDraw().
	if (m_pFilter->m_fStreaming) {
            dw = ICDraw(m_pFilter->m_hic, ICDRAW_UPDATE, NULL, NULL, 0,
    				            m_pFilter->m_lFrame);
	} else {
	    dw = (DWORD_PTR)ICERR_ERROR;
	}

	// better not try and repaint by pushing data through the pipe if
	// we're not connected!  Better also not if we have no source rect,
	// that means we aren't showing yet (I think).
        if (dw != ICERR_OK &&
			m_pFilter->m_pOutput->CurrentMediaType().IsValid() &&
			!IsRectEmpty(pSourceRect) && m_pFilter->m_hwnd &&
	    		IsWindowVisible(m_pFilter->m_hwnd)) {
	    // We couldn't update by ourselves, better ask for a repaint
	    // !!! We have the ICDraw lock, is that OK?
	    // Use fOKToRepaint to avoid the 1 million repaints we would get
	    // before we've even drawn anything at all in the first place?
	    // !!! try even harder to avoid doing this
	    // !!! I would love to avoid unnecessary repaints, but I've done 
	    // all I can.  Unless I repaint here, apps that open up the file
	    // and don't run it will never see the first frame drawn (eg MCIQTZ)
	    if (1 || m_pFilter->m_fOKToRepaint) {
    	        DbgLog((LOG_TRACE,2,TEXT("Asking FilterGraph for a REPAINT!")));
	        m_pFilter->NotifyEvent(EC_REPAINT, 0, 0);
	    }
        }
    }

// There's no reason we should have to do this, and if we do, we're still
// broken because we need to do the GetBuffersWantedStuff after the new
// Begin
#if 0
    // Why is this necessary?
    // we appear to need a fresh DC if the rect has changed.  Don't do this
    // if we just got the DC from GetRendererHwnd a second ago.  Be sure
    // to do this after the ICDraw call above that repainted, because we
    // can't go calling DrawEnd and then Draw!
    if (!fForceBegin && fRectChanged && m_pFilter->m_hwnd) {
	if (m_pFilter->m_fStreaming) {	// we're actually inside a DrawBegin
	    ICDrawEnd(m_pFilter->m_hic);// we'll be doing a new Begin next
	}

	// We seem to need a new hdc whenever the window moves
	if (m_pFilter->m_hdc)
	    ReleaseDC(m_pFilter->m_hwnd, m_pFilter->m_hdc);
        m_pFilter->m_hdc = GetDC(m_pFilter->m_hwnd);
    	DbgLog((LOG_TRACE,4,TEXT("Time for a new DC")));
        if (!m_pFilter->m_hdc) {
    	    DbgLog((LOG_ERROR,1,TEXT("***Lost our DC!")));
    	    m_pFilter->m_csICDraw.Unlock();
	    return E_UNEXPECTED;
	}
    }
#endif

    DbgLog((LOG_TRACE,3,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		pSourceRect->left, pSourceRect->top,
		pSourceRect->right, pSourceRect->bottom));
    DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		pDestinationRect->left, pDestinationRect->top,
		pDestinationRect->right, pDestinationRect->bottom));

    // convert destination to client co-ords

    if (m_pFilter->m_hdc && GetDCOrgEx(m_pFilter->m_hdc, &pt)) {
        //DbgLog((LOG_TRACE,2,TEXT("Fixing CLIENT by %d"), pt.x));
        m_pFilter->m_rcClient.left = pDestinationRect->left - pt.x;
        m_pFilter->m_rcClient.right = pDestinationRect->right - pt.x;
        m_pFilter->m_rcClient.top = pDestinationRect->top - pt.y;
        m_pFilter->m_rcClient.bottom = pDestinationRect->bottom - pt.y;
    } else if (m_pFilter->m_hdc) {
	// !!! NT seems to fail GetDCOrgEx unless I get a fresh hdc just before
 	// calling it. Oh well.
	HDC hdc = GetDC(m_pFilter->m_hwnd);
        if (GetDCOrgEx(hdc, &pt)) {
            //DbgLog((LOG_TRACE,1,TEXT("Take 2:Fixing CLIENT by %d"), pt.x));
            m_pFilter->m_rcClient.left = pDestinationRect->left - pt.x;
            m_pFilter->m_rcClient.right = pDestinationRect->right - pt.x;
            m_pFilter->m_rcClient.top = pDestinationRect->top - pt.y;
            m_pFilter->m_rcClient.bottom = pDestinationRect->bottom - pt.y;
	} else {
	    ASSERT(FALSE);	// !!!
	}
	ReleaseDC(m_pFilter->m_hwnd, hdc);
    }

    // We gave ourselves a chance to get the renderer hwnd and repaint, all done
    // If we continue and call ICDrawWindow, we could infinite loop
    if (fRepaintOnly && !fRectChanged) {
        //DbgLog((LOG_TRACE,3,TEXT("OnClipChange wants draw lock no more")));
    	m_pFilter->m_csICDraw.Unlock();
	return NOERROR;
    }

// This got around the NT bug above, but is uglier and wrong
#if 0
    if (m_pFilter->m_fStreaming && (fRectChanged || fForceBegin)) {

	// !!! What about fullscreen?
        DbgLog((LOG_TRACE,2,TEXT("Calling ICDrawBegin with hdc %d"),
							m_pFilter->m_hdc));
	ICDrawBegin(m_pFilter->m_hic, ICDRAW_HDC, NULL, /* !!! hpal from OnPaletteChange? */
		m_pFilter->m_hwnd, m_pFilter->m_hdc,
		m_pFilter->m_rcClient.left, m_pFilter->m_rcClient.top,
		m_pFilter->m_rcClient.right - m_pFilter->m_rcClient.left,
		m_pFilter->m_rcClient.bottom - m_pFilter->m_rcClient.top,
		HEADER(m_pFilter->m_pInput->CurrentMediaType().Format()),
		m_pFilter->m_rcSource.left, m_pFilter->m_rcSource.top,
		m_pFilter->m_rcSource.right - m_pFilter->m_rcSource.left,
		m_pFilter->m_rcSource.bottom - m_pFilter->m_rcSource.top,
		m_pFilter->m_dwRate, m_pFilter->m_dwScale);
	m_pFilter->m_fNewBegin = TRUE;
	// To give the new hdc to DrawDib
	ICDrawRealize(m_pFilter->m_hic, m_pFilter->m_hdc, FALSE /* !!! */);
	// !!! What about ICDrawFlush?

    }
#endif

    DbgLog((LOG_TRACE,2,TEXT("ICDrawWindow (%d,%d,%d,%d)"),
		m_pFilter->m_rcTarget.left,
		m_pFilter->m_rcTarget.top,
		m_pFilter->m_rcTarget.right,
		m_pFilter->m_rcTarget.bottom));
    ICDrawWindow(m_pFilter->m_hic, &m_pFilter->m_rcTarget);

    // This seems to keep the palette from flipping out
    if (m_pFilter->m_fStreaming && (fRectChanged || fForceBegin)) {
	ICDrawRealize(m_pFilter->m_hic, m_pFilter->m_hdc, FALSE /* !!! */);
    }

    //DbgLog((LOG_TRACE,3,TEXT("OnClipChange wants the draw lock no longer")));
    m_pFilter->m_csICDraw.Unlock();
    return NOERROR;
}


STDMETHODIMP COverlayNotify::OnPaletteChange(
    DWORD dwColors,                     // Number of colours present
    const PALETTEENTRY *pPalette)       // Array of palette colours
{
    DbgLog((LOG_TRACE,3,TEXT("COverlayNotify::OnPaletteChange")));

    if (m_pFilter->m_hic)
        ICDrawRealize(m_pFilter->m_hic, m_pFilter->m_hdc, FALSE /* !!! */);

    return NOERROR;
}


STDMETHODIMP COverlayNotify::OnPositionChange(
    const RECT *pSourceRect,            // Area of video to play with
    const RECT *pDestinationRect)       // Area video goes
{
    DbgLog((LOG_TRACE,3,TEXT("COverlayNotify::OnPositionChange - calling OnClipChange")));
    return OnClipChange(pSourceRect, pDestinationRect, NULL);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\draw\draw.h ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

extern const AMOVIESETUP_FILTER sudAVIDraw;

//
// Wrapper for ICDraw messages
//

#if 0	// in uuids.h
// Class ID for CAVIDraw object
// {A888DF60-1E90-11cf-AC98-00AA004C0FA9}
DEFINE_GUID(CLSID_AVIDraw,
0xa888df60, 0x1e90, 0x11cf, 0xac, 0x98, 0x0, 0xaa, 0x0, 0x4c, 0xf, 0xa9);
#endif

class CAVIDraw;

class COverlayNotify : public CUnknown, public IOverlayNotify DYNLINKVFW
{
    public:
        /* Constructor and destructor */
        COverlayNotify(TCHAR              *pName,
                       CAVIDraw		  *pFilter,
                       LPUNKNOWN           pUnk,
                       HRESULT            *phr);
        ~COverlayNotify();

        /* Unknown methods */

        DECLARE_IUNKNOWN

        STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);
        STDMETHODIMP_(ULONG) NonDelegatingRelease();
        STDMETHODIMP_(ULONG) NonDelegatingAddRef();

        /* IOverlayNotify methods */

        STDMETHODIMP OnColorKeyChange(
            const COLORKEY *pColorKey);         // Defines new colour key

        STDMETHODIMP OnClipChange(
            const RECT *pSourceRect,            // Area of video to play
            const RECT *pDestinationRect,       // Area of video to play
            const RGNDATA *pRegionData);        // Header describing clipping

        STDMETHODIMP OnPaletteChange(
            DWORD dwColors,                     // Number of colours present
            const PALETTEENTRY *pPalette);      // Array of palette colours

        STDMETHODIMP OnPositionChange(
            const RECT *pSourceRect,            // Area of video to play with
            const RECT *pDestinationRect);      // Area video goes

    private:
        CAVIDraw *m_pFilter;

	// remember the last clip region given by ::OnClipChange
	HRGN m_hrgn;
} ;


class COverlayOutputPin : public CTransformOutputPin
{
    public:

        /*  Pin methods
        */

        // Return the IOverlay interface we are using (AddRef'd)
        IOverlay *GetOverlayInterface();

        //  Override connect so we can do more work if it works
        STDMETHODIMP Connect(IPin * pReceivePin,const AM_MEDIA_TYPE *pmt);

        //  Don't connect to anybody who can't do IOverlay
        HRESULT CheckConnect(IPin *pPin);

        // undo any work done in CheckConnect.
        HRESULT BreakConnect();

        // Override this because we don't want any allocator!
        HRESULT DecideAllocator(IMemInputPin * pPin,
                                IMemAllocator ** pAlloc);

        /*  Constructor and Destructor
        */
        COverlayOutputPin(
            TCHAR              * pObjectName,
            CAVIDraw	       * pFilter,
            HRESULT            * phr,
            LPCWSTR              pPinName);

        ~COverlayOutputPin();

    /*  Private members */

    private:

        /*  Controlling filter */
        CAVIDraw *m_pFilter;

        /*  Overlay window on output pin */
        IOverlay     * m_pOverlay;

        /*  Notify object */
        COverlayNotify m_OverlayNotify;

        /*  Advise id */
        BOOL           m_bAdvise;

        friend class CAVIDraw;
} ;


class CAVIDraw : public CTransformFilter   DYNLINKVFW
{

public:

    CAVIDraw(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CAVIDraw();

    DECLARE_IUNKNOWN

    // check if you can support mtIn
    HRESULT CheckInputType(const CMediaType* mtIn);

    // check if you can support the transform from this input to
    // this output
    HRESULT CheckTransform(
                const CMediaType* mtIn,
                const CMediaType* mtOut);

    // called from CBaseOutputPin to prepare the allocator's count
    // of buffers and sizes
    HRESULT DecideBufferSize(IMemAllocator * pAllocator,
                             ALLOCATOR_PROPERTIES *pProperties);

    // optional overrides - we want to know when streaming starts
    // and stops
    HRESULT StartStreaming();
    HRESULT StopStreaming();

    // overridden to handling pausing correctly
    STDMETHODIMP GetState(DWORD dwMSecs, FILTER_STATE *State);
    STDMETHODIMP Pause();
    STDMETHODIMP Run(REFERENCE_TIME tStart);
    STDMETHODIMP Stop();
    HRESULT BeginFlush();
    HRESULT EndFlush();
    HRESULT EndOfStream();

    // overriden to suggest OUTPUT pin media types
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // overriden to know when the media type is set
    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt);

    // overridden to do the ICDraw
    HRESULT Receive(IMediaSample *pSample);

    // Overridden to make an overlay output pin
    CBasePin * GetPin(int n);

    // Ask the renderer's input pin what hwnd he's using
    HRESULT GetRendererHwnd(void);

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);

    STDMETHODIMP GetClassID(CLSID *pClsid);

    // figure out if the VFW capture filter is in the graph with us
    BOOL IsVfwCapInGraph();

private:
    HIC  m_hic;	// current codec
    HWND m_hwnd;// hwnd from renderer
    HDC  m_hdc;	// hdc of that hwnd

    DWORD m_dwRate, m_dwScale;	// for frames/sec
    LONG  m_lStart, m_lStop;	// start and end frame number we're streaming
    LONG  m_lFrame;		// last ICDraw frame we sent

    DWORD m_BufWanted;		// how much to buffer ahead

    RECT  m_rcSource;		// from IOverlay - what to draw
    RECT  m_rcTarget;		// from IOverlay - where to draw
    RECT  m_rcClient;		// m_rcTarget in client co-ords

    BOOL  m_fScaryMode;		// ask renderer for clip changes and make
				// it to a WindowsHook - necessary for
				// inlay cards

    BOOL  m_fVfwCapInGraph;	// is the VFW capture filter in graph with us

    // the fourCC used to open m_hic
    FOURCC m_FourCCIn;

    // have we called ICDecompressBegin ?
    BOOL m_fStreaming;

    // are we inside ::Stop?
    BOOL m_fInStop;

    // set ICDRAW_UPDATE next time we call ICDraw().
    BOOL m_fNeedUpdate;

    // are we cuing up the draw handler?
    BOOL m_fCueing;
    BOOL m_fPauseBlocked;

    // did we just do a begin?  (we need to preroll until next key)
    BOOL m_fNewBegin;

    // Wait until we've drawn something before trying to repaint
    BOOL m_fOKToRepaint;

    // prevent deadlock
    BOOL m_fPleaseDontBlock;

    DWORD_PTR m_dwAdvise;
    CAMEvent m_EventPauseBlock;
    CAMEvent m_EventAdvise;
    CAMEvent m_EventCueing;

    // only 1 ICDrawX API should be called at a time
    CCritSec m_csICDraw;

    // prevent ::Stop from being called during parts of ::Receive
    CCritSec m_csPauseBlock;

    DWORD  m_dwTime;
    DWORD  m_dwTimeLocate;

    friend class COverlayOutputPin;
    friend class COverlayNotify;
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\decode\safeseh.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
#ifdef __cplusplus
extern "C" {
#endif

extern BOOL BeginScarySEH(PVOID pvShared);
extern void EndScarySEH(PVOID pvShared);

#define HEAP_SHARED 0x04000000

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\decode\safeseh.c ===
/* Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved. */
//#define STRICT
#include <windows.h>
#include <safeseh.h>

//HANDLE g_hhpShared;
#ifdef _X86_

/*
 *  The trampoline is a small stub that we put up in shared memory
 *  which merely jumps to the real exception handler.  Why do we
 *  do this?  Because on Windows 95, if you take an exception while
 *  the Win16 lock is held, Kernel32 will not dispatch to any
 *  private-arena exception handlers.  This rule is enforced because
 *  application exception handlers are not Win16-lock-aware; if we
 *  let them run, they won't release the Win16 lock and your system
 *  would hang.
 *
 *  And then DirectDraw showed up and broke all the rules by letting
 *  Win32 apps take the Win16 lock.
 *
 *  By putting our handler in the shared arena, we are basically saying,
 *  "We are Win16 lock-aware; please include me in the exception chain."
 *
 *  Code courtesy of RaymondC
 */
#pragma pack(1)
typedef struct TRAMPOLINE {
    BYTE bPush;
    DWORD dwTarget;
    BYTE bRet;
} TRAMPOLINE, LPTRAMPOLINE;
#pragma pack()

/*
 *  Warning!  This code must *NOT* be called if we are running on NT!
 */
BOOL BeginScarySEH(PVOID pvShared)
{
     BOOL bRet;

    _asm {
        mov     eax, pvShared;
	test    eax, eax;
	jz	failed;			/* Out of memory */

	xor	ecx, ecx;		/* Keep zero handy */
	mov	[eax].bPush, 0x68;	/* push immed32 */
	mov	ecx, fs:[ecx];		/* ecx -> SEH frame */
	mov	edx, [ecx][4];		/* edx = original handler */
	mov	[eax].dwTarget, edx;	/* Revector it */
	mov	[eax].bRet, 0xC3;	/* retd */
	mov	[ecx][4], eax;		/* Install the trampoline */
failed:;
        mov     bRet, eax
    }
    return bRet;
}

/*
 *  DO NOT CALL THIS IF BeginScarySEH FAILED!
 */
void EndScarySEH(PVOID pvShared)
{
    _asm {
	xor	edx, edx;		/* Keep zero handy */
	mov	ecx, fs:[edx];		/* ecx -> SEH frame */
	mov	eax, [ecx][4];		/* eax -> trampoline */
	mov	eax, [eax].dwTarget;	/* Extract original handler */
	mov	[ecx][4], eax;		/* Unvector it back */
    }
}

#endif // _X86_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\draw\draw.cpp ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

//
// Prototype wrapper for old video decompressors
//
// This filter is based on the transform filter, but differs in that it doesn't
// use IMemInputPin to connect to the renderer, it uses IOverlay.  So we have
// to override all of the CTransform functions that would create an
// IMemInputPin output pin (and use it) and replace it with our IOverlay pin.
//

#include <streams.h>
#include <windowsx.h>

#ifdef FILTER_DLL
// define the GUIDs for streams and my CLSID in this file
#include <initguid.h>
#include <vfw.h>
#endif

#include <dynlink.h>
#include "draw.h"

// Setup data

const AMOVIESETUP_MEDIATYPE sudPinTypesOutput =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_NULL        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput1 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_MJPG        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput2 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_TVMJ        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput3 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_WAKE        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput4 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_CFCC        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput5 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_IJPG        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput6 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_Plum        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput7 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_DVCS        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput8 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_DVSD        // Minor type
};

const AMOVIESETUP_MEDIATYPE sudPinTypesInput9 =
{
    &MEDIATYPE_Video,         // Major CLSID
    &MEDIASUBTYPE_MDVF        // Minor type
};

const AMOVIESETUP_PIN psudPins[] =
{
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",             // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput1 },   // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",             // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput2 },   // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",             // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput3 },   // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",             // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput4 },   // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",             // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput5 },   // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",            // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput6 }, // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",            // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput7 }, // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",            // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput8 }, // Pin information
    { L"Input",            // Pin's string name
      FALSE,                // Is it rendered
      FALSE,                 // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Output",            // Connects to pin
      1,                    // Number of types
      &sudPinTypesInput9 }, // Pin information
    { L"Output",             // Pin's string name
      FALSE,                // Is it rendered
      TRUE,                // Is it an output
      FALSE,                // Allowed none
      FALSE,                // Allowed many
      &CLSID_NULL,          // Connects to filter
      L"Input",             // Connects to pin
      1,                    // Number of types
      &sudPinTypesOutput }  // Pin information
};

const AMOVIESETUP_FILTER sudAVIDraw =
{
    &CLSID_AVIDraw,         // CLSID of filter
    L"AVI Draw",                // Filter's name
    MERIT_NORMAL+0x64,      // Filter merit
    sizeof(psudPins) / sizeof(AMOVIESETUP_PIN), // Number of pins
    psudPins                // Pin information
};


#ifdef FILTER_DLL
CFactoryTemplate g_Templates [1] = {
    { L"AVI Draw"
    , &CLSID_AVIDraw
    , CAVIDraw::CreateInstance
    , NULL
    , &sudAVIDraw }
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

//
// DllRegisterServer
//
// Exported entry points for registration and unregistration
//
STDAPI DllRegisterServer()
{
    return AMovieDllRegisterServer2( TRUE );

} // DllRegisterServer


//
// DllUnregisterServer
//
STDAPI DllUnregisterServer()
{
    return AMovieDllRegisterServer2( FALSE );

} // DllUnregisterServer
#endif


// List of class IDs and creator functions for the class factory. This
// provides the link between the OLE entry point in the DLL and an object
// being created. The class factory will call the static CreateInstance

// --- CAVIDraw ----------------------------------------

CAVIDraw::CAVIDraw(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
    : CTransformFilter(pName, pUnk, CLSID_AVIDraw),
      m_hic(NULL),
      m_FourCCIn(NULL),
      m_fStreaming(FALSE),
      m_fInStop(FALSE),
      m_hwnd(NULL),
      m_hdc(NULL),
      m_dwRate(0),
      m_dwScale(0),
      m_fCueing(FALSE),
      m_fPauseBlocked(FALSE),
      m_fNeedUpdate(FALSE),
      m_dwAdvise(0),
      m_fOKToRepaint(FALSE),
      m_fPleaseDontBlock(FALSE),
      m_EventCueing(TRUE),
      m_fVfwCapInGraph(-1),
      m_lStart(-1)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the ICDraw filter")));
#ifdef DEBUG
    m_dwTime = timeGetTime();
#endif
    SetRect(&m_rcTarget, 0, 0, 0, 0);

    // Shall we get the renderer to use a WindowsHook and tell us clip
    // changes? (necessary only for inlay cards like T2K using its own
    // display card)
    m_fScaryMode = GetProfileInt(TEXT("ICDraw"), TEXT("ScaryMode"), TRUE);
}


CAVIDraw::~CAVIDraw()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying the ICDraw filter")));

    if (m_hic) {

	// !!! the FAST MJPEG won't hide its overlay unless we do this!
	// closing their driver should be enough to make them hide it.
 	RECT rc;
	rc.top=0; rc.bottom=0; rc.left=0; rc.right = 0;
	ICDrawWindow(m_hic, &rc);

	ICClose(m_hic);
    }

    if (m_hdc && m_hwnd)
	ReleaseDC(m_hwnd, m_hdc);

}


STDMETHODIMP CAVIDraw::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    DbgLog((LOG_TRACE,99,TEXT("somebody's querying my interface")));

    return CTransformFilter::NonDelegatingQueryInterface(riid, ppv);
}


// this goes in the factory template table to create new instances
//
CUnknown * CAVIDraw::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CAVIDraw(TEXT("VFW ICDraw filter"), pUnk, phr);
}


#define SLASH(c)     ((c) == TEXT('/') || (c) == TEXT('\\'))

// check if you can support mtIn
//
HRESULT CAVIDraw::CheckInputType(const CMediaType* pmtIn)
{
    FOURCCMap fccHandlerIn;
    HIC hic;
    int i;
    ICINFO icinfo;
    char achDraw[_MAX_PATH];

    DbgLog((LOG_TRACE,2,TEXT("*::CheckInputType")));

    // We will refuse to connect to anything if the VFW capture filter is in
    // the graph, because we're talking to the same h/w, and we won't work!
    // The drivers don't report an error, they just draw black.
    if (m_fVfwCapInGraph == -1)
	m_fVfwCapInGraph = IsVfwCapInGraph();
    if (m_fVfwCapInGraph) {
        DbgLog((LOG_ERROR,1,TEXT("VFW Capture filter is in graph! ABORT!")));
	return E_UNEXPECTED;
    }

    if (pmtIn == NULL || pmtIn->Format() == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: NULL type/format")));
	return E_INVALIDARG;
    }

    // we only support MEDIATYPE_Video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: not VIDEO")));
	return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: format not VIDINFO")));
        return E_INVALIDARG;
    }

// This is fixed now
#if 0
    if (HEADER(pmtIn->Format())->biCompression == BI_RGB) {
	// FAST cards incorrectly say they do RGB!
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: format is uncompressed")));
        return E_INVALIDARG;
    }
#endif

    fccHandlerIn.SetFOURCC(pmtIn->Subtype());

    DbgLog((LOG_TRACE,3,TEXT("Checking fccType: %lx biCompression: %lx"),
		fccHandlerIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression));

    // Firstly try the one we may still have around from last time.  We may
    // get called several times in a row, and don't want to be inefficient.
    if (!m_hic || ICDrawQuery(m_hic, HEADER(pmtIn->Format())) != ICERR_OK) {

#ifdef DEBUG
	m_dwTimeLocate = timeGetTime();
#endif

	// Loop through all the vids handlers in the system
        for (i=0, hic=NULL; ICInfo(MKFOURCC('v','i','d','s'), i, &icinfo); i++)
        {
    	    DbgLog((LOG_TRACE,2,TEXT("Trying VIDS.%lx"), icinfo.fccHandler));

	    // We don't want to use DirectVideo (the whole purpose is to use
	    // HARDWARE handlers, so refuse to use anything that is
	    // vids.draw=x:\blah\blah\dvideo.dll
	    if (icinfo.fccHandler == 0x57415244 ||	// "DRAW"
					icinfo.fccHandler == 0x77617264) {

		// Give them an .ini switch to use DVideo
		if (!GetProfileInt(TEXT("ICDraw"), TEXT("TryDVideo"), FALSE)) {
    		    LPCSTR   lszCur;

		    // get the installed vids.draw handler path name
		    GetPrivateProfileStringA("drivers32", "VIDS.DRAW",
				"", achDraw, sizeof(achDraw), "system.ini");

		    // Now skip past the drive letter and path to get the
		    // filename part
    		    for (lszCur = achDraw + lstrlenA(achDraw);
				lszCur > achDraw && !SLASH(*lszCur) &&
					*lszCur != TEXT(':');
				lszCur--);
    		    if (lszCur != achDraw)
        		lszCur += 1;

		    if (lstrcmpiA(lszCur, "dvideo.dll") == 0) {
    	    	        DbgLog((LOG_TRACE,1,
				TEXT("****** Oops!  Don't use DVIDEO!")));
		        continue;
		    }
		}
	    }

            hic = ICOpen(MKFOURCC('v','i','d','s'), icinfo.fccHandler,
								ICMODE_DRAW);
	    if (!hic)
		// Many existing draw handlers will reject vids opens, so
		// we have to open them with vidc.
                hic = ICOpen(MKFOURCC('v','i','d','c'), icinfo.fccHandler,
								ICMODE_DRAW);

	    if (hic) {
	        if (ICDrawQuery(hic, HEADER(pmtIn->Format())) == ICERR_OK)
		    break;
		ICClose(hic);
		hic = NULL;
	    }
        }

	// well that didn't work.  I hate to do this, but some cards
	// install themselves as VIDC, so we may have to enumerate the VIDC
	// guys.  That takes way too long to do unless we have to, so we will
	// enumerate only the one we're told to (or all if it's blank)

	GetProfileStringA("ICDraw", "TryVIDC", "X", achDraw, sizeof(achDraw));

	// Try VIDC.MJPG - MIRO DC20 needs this
	if (hic == NULL) {
    	    DbgLog((LOG_TRACE,2,TEXT("Trying VIDC.MJPG")));

            hic = ICOpen(MKFOURCC('v','i','d','c'), MKFOURCC('M','J','P','G'),
								ICMODE_DRAW);
	    if (hic && ICDrawQuery(hic, HEADER(pmtIn->Format())) != ICERR_OK) {
		ICClose(hic);
		hic = NULL;
	    }
	}

	// Try VIDC.Plum - Plum needs this
	if (hic == NULL) {
    	    DbgLog((LOG_TRACE,2,TEXT("Trying VIDC.Plum")));

            hic = ICOpen(MKFOURCC('v','i','d','c'), MKFOURCC('P','l','u','m'),
								ICMODE_DRAW);
	    if (hic && ICDrawQuery(hic, HEADER(pmtIn->Format())) != ICERR_OK) {
		ICClose(hic);
		hic = NULL;
	    }
	}

// !!! Try TVMJ IJPG WAKE CFCC too?

	// Entry is blank?  Try them all
        for (i=0; achDraw[0] == 0 && hic == NULL &&
			ICInfo(MKFOURCC('v','i','d','c'), i, &icinfo); i++)
        {
    	    DbgLog((LOG_TRACE,2,TEXT("Trying VIDC.%lx"), icinfo.fccHandler));

            hic = ICOpen(MKFOURCC('v','i','d','c'), icinfo.fccHandler,
								ICMODE_DRAW);
	    if (hic) {
	        if (ICDrawQuery(hic, HEADER(pmtIn->Format())) == ICERR_OK)
		    break;
		ICClose(hic);
		hic = NULL;
	    }
        }

	// we are being told to try something specific
	if (hic == NULL && lstrcmpiA(achDraw, "X") != 0 && achDraw[0] != '\0') {
    	    DbgLog((LOG_TRACE,2,TEXT("Trying VIDC.%lx"), *(DWORD *)achDraw));

            hic = ICOpen(MKFOURCC('v','i','d','c'), *(DWORD *)achDraw,
								ICMODE_DRAW);
	    if (hic && ICDrawQuery(hic, HEADER(pmtIn->Format())) != ICERR_OK) {
		ICClose(hic);
		hic = NULL;
	    }
	}

#ifdef DEBUG
	m_dwTimeLocate = timeGetTime() - m_dwTimeLocate;
        m_dwTime = timeGetTime() - m_dwTime;
        DbgLog((LOG_ERROR,1,TEXT("*Locating a handler took %ldms"),
							m_dwTimeLocate));
        DbgLog((LOG_ERROR,1,TEXT("*This filter has been around for %ldms"),
							m_dwTime));
#endif
	if (hic == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Error: All handlers rejected it")));
	    return E_FAIL;
	} else {
    	    DbgLog((LOG_TRACE,2,TEXT("Format has been accepted")));
	    // Cache this new hic for next time, to save time.  If we're
	    // already connected, we're actually using this puppy, so don't
	    // nuke it!
	    if (!m_pInput->CurrentMediaType().IsValid()) {
	        if (m_hic)
		    ICClose(m_hic);
	        m_hic = hic;
	    } else {
		ICClose(hic);
	    }
	}
    } else {
    	DbgLog((LOG_TRACE,2,TEXT("The cached handler accepted it")));
    }

    return NOERROR;
}


// Is our Vfw Capture filter in the graph?
//
BOOL CAVIDraw::IsVfwCapInGraph()
{
    IEnumFilters *pFilters;

    if (m_pGraph == NULL) {
	DbgLog((LOG_ERROR,1,TEXT("No graph!")));
	return FALSE;
    }

    if (FAILED(m_pGraph->EnumFilters(&pFilters))) {
	DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
	return FALSE;
    }

    IBaseFilter *pFilter;
    ULONG	n;
    while (pFilters->Next(1, &pFilter, &n) == S_OK) {
	IAMVfwCaptureDialogs *pVFW;
	if (pFilter->QueryInterface(IID_IAMVfwCaptureDialogs, (void **)&pVFW)
								== NOERROR) {
	    pVFW->Release();
	    pFilter->Release();
    	    pFilters->Release();
	    return TRUE;
	}
        pFilter->Release();
    }
    pFilters->Release();
    return FALSE;
}


// check if you can support the transform from this input to this output
//
HRESULT CAVIDraw::CheckTransform(const CMediaType* pmtIn, const CMediaType* pmtOut)
{
    DbgLog((LOG_TRACE,2,TEXT("*::CheckTransform")));
    if (*pmtOut->Type() != MEDIATYPE_Video ||
				*pmtOut->Subtype() != MEDIASUBTYPE_Overlay)
	return E_INVALIDARG;
    return CheckInputType(pmtIn);
}


// overriden to know when the media type is actually set
//
HRESULT CAVIDraw::SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt)
{
    FOURCCMap fccHandler;

    if (direction == PINDIR_OUTPUT) {

        // Please call me if you hit this. - DannyMi
        ASSERT(!m_fStreaming);

        DbgLog((LOG_TRACE,2,TEXT("***::SetMediaType (output)")));
	return NOERROR;
    }

    ASSERT(direction == PINDIR_INPUT);

    // Please call me if you hit this. - DannyMi
    ASSERT(!m_fStreaming);

    DbgLog((LOG_TRACE,2,TEXT("***::SetMediaType (input)")));
    DbgLog((LOG_TRACE,2,TEXT("Input type is: biComp=%lx biBitCount=%d"),
				HEADER(m_pInput->CurrentMediaType().Format())->biCompression,
				HEADER(m_pInput->CurrentMediaType().Format())->biBitCount));

    // We better have one of these opened by now
    ASSERT(m_hic);

    // Calculate the frame rate of the movie
    LONGLONG time = ((VIDEOINFOHEADER *)
			(m_pInput->CurrentMediaType().Format()))->AvgTimePerFrame;
    m_dwScale = 1000;
    m_dwRate = DWORD(time ? UNITS * (LONGLONG)m_dwScale / time : m_dwScale);
    DbgLog((LOG_TRACE,2,TEXT("** This movie is %d.%.3d frames per second"),
			m_dwRate / m_dwScale, m_dwRate % m_dwScale));

    if (m_pOutput && m_pOutput->IsConnected()) {
        //DbgLog((LOG_TRACE,1,TEXT("***Changing IN when OUT already connected")));
        // DbgLog((LOG_TRACE,1,TEXT("Reconnecting the output pin...")));
	// not necessary because setting the input type does nothing, really
	// m_pGraph->Reconnect(m_pOutput);
    }

    return NOERROR;
}


// DecideBufferSize will be eaten by our output pin but is pure virtual so we
// must override.
//
HRESULT CAVIDraw::DecideBufferSize(IMemAllocator * pAllocator,
                                   ALLOCATOR_PROPERTIES *pProperties)
{
    return NOERROR;
}


HRESULT CAVIDraw::GetMediaType(int iPosition, CMediaType *pmt)
{
    DbgLog((LOG_TRACE,3,TEXT("*::GetMediaType #%d"), iPosition));

    if (pmt == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("NULL format, no can do")));
	return E_INVALIDARG;
    }
	
    // Output choices depend on the input connected
    if (!m_pInput->CurrentMediaType().IsValid()) {
        DbgLog((LOG_TRACE,3,TEXT("No input type set yet, no can do")));
	return E_FAIL;
    }

    if (iPosition <0) {
        return E_INVALIDARG;
    }

    if (iPosition >0) {
        return VFW_S_NO_MORE_ITEMS;
    }

    // We set the BITMAPINFOHEADER to be a really basic eight bit palettised
    // format so that the video renderer will always accept it. We have to
    // provide a valid media type as source filters can swap between the
    // IMemInputPin and IOverlay transports as and when they feel like it

    BYTE aFormat[sizeof(VIDEOINFOHEADER) + SIZE_PALETTE];
    VIDEOINFOHEADER *pFormat = (VIDEOINFOHEADER *)aFormat;
    ZeroMemory(pFormat, sizeof(VIDEOINFOHEADER) + SIZE_PALETTE);
    // same size as the input stream
    pFormat->bmiHeader.biWidth  = HEADER(m_pInput->CurrentMediaType().Format())->biWidth;
    pFormat->bmiHeader.biHeight = HEADER(m_pInput->CurrentMediaType().Format())->biHeight;
    pFormat->bmiHeader.biSize   = sizeof(BITMAPINFOHEADER);
    pFormat->bmiHeader.biPlanes = 1;
    pFormat->bmiHeader.biBitCount = 8;

    // Hack - use bitmapinfoheader for now!
    pmt->SetFormat((PBYTE)pFormat, sizeof(VIDEOINFOHEADER) + SIZE_PALETTE);
    pmt->SetFormatType(&FORMAT_VideoInfo);

    if (pmt->pbFormat == NULL) {
        return E_OUTOFMEMORY;
    }

    pmt->majortype = MEDIATYPE_Video;
    pmt->subtype   = MEDIASUBTYPE_Overlay;
    pmt->bFixedSizeSamples    = FALSE;
    pmt->bTemporalCompression = FALSE;
    pmt->lSampleSize          = 0;

    return NOERROR;
}


HRESULT CAVIDraw::GetRendererHwnd()
{
    ASSERT(m_pOutput);

    // no csReceive critsec or we'll hang
    HWND hwnd;

    DbgLog((LOG_TRACE,3,TEXT("CAVIDraw::GetRendererHwnd")));

    COverlayOutputPin *pOutput = (COverlayOutputPin *) m_pOutput;
    IOverlay *pOverlay = pOutput->GetOverlayInterface();
    if (pOverlay == NULL) {
        return E_FAIL;
    }

    // Get the window handle then release the IOverlay interface

    HRESULT hr = pOverlay->GetWindowHandle(&hwnd);
    pOverlay->Release();

    if (SUCCEEDED(hr) && hwnd != m_hwnd) {
        if (m_hdc)
            ReleaseDC(m_hwnd, m_hdc);
        m_hdc = NULL;
        m_hwnd = hwnd;
        if (m_hwnd)
            m_hdc = GetDC(m_hwnd);
       	DbgLog((LOG_TRACE,3,TEXT("Renderer gives HWND: %d  HDC: %d"),
							    m_hwnd, m_hdc));
    }
    return NOERROR;
}


HRESULT CAVIDraw::StartStreaming()
{
    CAutoLock lck(&m_csReceive);
    //DbgLog((LOG_TRACE,3,TEXT("StartStreaming wants the draw lock")));
    CAutoLock lck2(&m_csICDraw);
    DWORD_PTR err;

    DbgLog((LOG_TRACE,3,TEXT("*::StartStreaming")));

    if (!m_fStreaming) {

	ASSERT(m_hic);
	
	GetRendererHwnd();

        DbgLog((LOG_TRACE,3,TEXT("hwnd: %d  hdc: %d  rcSrc: (%ld, %ld, %ld, %ld)"),
		m_hwnd, m_hdc,
		m_rcSource.left, m_rcSource.top,
		m_rcSource.right, m_rcSource.bottom));
        DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		m_rcTarget.left, m_rcTarget.top,
		m_rcTarget.right, m_rcTarget.bottom));

	// !!! What about fullscreen?
        DbgLog((LOG_TRACE,3,TEXT("ICDrawBegin hdc=%d (%d,%d,%d,%d)"), m_hdc,
		m_rcClient.left,
		m_rcClient.top,
		m_rcClient.right,
		m_rcClient.bottom));
	err = ICDrawBegin(m_hic, ICDRAW_HDC, NULL, /* !!! hpal from ::OnPaletteChange? */
			m_hwnd, m_hdc,
			m_rcClient.left, m_rcClient.top,
			m_rcClient.right - m_rcClient.left,
			m_rcClient.bottom - m_rcClient.top,
			HEADER(m_pInput->CurrentMediaType().Format()),
			m_rcSource.left, m_rcSource.top,
			m_rcSource.right - m_rcSource.left,
			m_rcSource.bottom - m_rcSource.top,
			// !!! I know I'm passing these backwards, but MCIAVI
			// did (for the default draw handler only)
			m_dwScale, m_dwRate);
	m_fNewBegin = TRUE;

	if (err != ICERR_OK) {
            DbgLog((LOG_ERROR,1,TEXT("Error in ICDrawBegin")));
	    return E_FAIL;
	}

	ICDrawRealize(m_hic, m_hdc, FALSE /* !!! not sure */);

	// next NewSegment will have a new frame range
        m_lStart = -1;

	// If this message is supported, it means we need to send this many
	// buffers ahead of time
	if (ICGetBuffersWanted(m_hic, &m_BufWanted))
	     m_BufWanted = 0;
        DbgLog((LOG_TRACE,1,TEXT("Driver says %d buffers wanted"),m_BufWanted));

	m_fStreaming = TRUE;
    }

    //DbgLog((LOG_TRACE,3,TEXT("StartStreaming wants the draw lock no more")));
    return NOERROR;
}


HRESULT CAVIDraw::StopStreaming()
{
    CAutoLock lck(&m_csReceive);
    //DbgLog((LOG_TRACE,3,TEXT("StopStreaming wants the draw lock")));
    CAutoLock lck2(&m_csICDraw);

    DbgLog((LOG_TRACE,3,TEXT("*::StopStreaming")));

    if (m_fStreaming) {
	ASSERT(m_hic);

	// We're stopping the clock.. so the AdviseTime event won't go off and
	// we'll block forever!
	if (m_pClock && m_dwAdvise) {
    	    DbgLog((LOG_TRACE,3,TEXT("Firing the event we're blocked on")));
	    m_pClock->Unadvise(m_dwAdvise);
	    m_EventAdvise.Set();
	}

        DbgLog((LOG_TRACE,2,TEXT("ICDrawStopPlay")));
	ICDrawStopPlay(m_hic);

        DbgLog((LOG_TRACE,2,TEXT("ICDrawEnd")));
	ICDrawEnd(m_hic);

	// put this as close to the DrawEnd as possible, cuz that's what it
	// means
	m_fStreaming = FALSE;

	if (m_hdc && m_hwnd)
	    ReleaseDC(m_hwnd, m_hdc);
	m_hdc = NULL;
	m_hwnd = NULL;

    }
    //DbgLog((LOG_TRACE,3,TEXT("StopStreaming wants the draw lock no more")));
    return NOERROR;
}


CBasePin * CAVIDraw::GetPin(int n)
{
    HRESULT hr = S_OK;

    DbgLog((LOG_TRACE,5,TEXT("CAVIDraw::GetPin")));

    // Create an input pin if necessary

    if (n == 0 && m_pInput == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Creating an input pin")));

        m_pInput = new CTransformInputPin(NAME("Transform input pin"),
                                          this,              // Owner filter
                                          &hr,               // Result code
                                          L"Input");         // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pInput == NULL) {
            delete m_pInput;
            m_pInput = NULL;
        }
    }

    // Or alternatively create an output pin

    if (n == 1 && m_pOutput == NULL) {

        DbgLog((LOG_TRACE,2,TEXT("Creating an output pin")));

        m_pOutput = new COverlayOutputPin(NAME("Overlay output pin"),
                                            this,            // Owner filter
                                            &hr,             // Result code
                                            L"Output");      // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pOutput == NULL) {
            delete m_pOutput;
            m_pOutput = NULL;
        }
    }

    // Return the appropriate pin

    if (n == 0) {
        return m_pInput;
    }
    return m_pOutput;
}

// The base class should assume we can block in Receive because we're not
// using IMemInputPin.


// !!! Watch out if the base class changes and it won't be reflected here
//
HRESULT CAVIDraw::Receive(IMediaSample *pSample)
{
    // we already hold the csReceive critsec.

    CRefTime tstart, tstop;

    ASSERT(pSample);

    // we haven't started streaming yet
    if (!m_fStreaming) {
        DbgLog((LOG_ERROR,1,TEXT("Can't receive, not streaming")));
	return E_UNEXPECTED;
    }

    // Don't let Stop be called and decide we aren't blocked on pause.
    // Because as soon as this thread continues, we WILL block and never
    // unblock because Stop completed already (ditto for BeginFlush)
    m_csPauseBlock.Lock();

    // But that doesn't help us if Stop has already been called before we
    // took the lock.  This tells us that Stop has happened and we can't
    // count on it to unblock us, so we better not block in the first place.
    // This could also be set if we're flushing and supposed to ignore all
    // Receives.
    if (m_fPleaseDontBlock) {
	DbgLog((LOG_TRACE,2,TEXT("*** Oops! Another thread is stopping or flushing!")));
        m_csPauseBlock.Unlock();
	return VFW_E_WRONG_STATE;
    }

    // We can't get the range being played until we've gotten some data
    if (m_lStart < 0) {

	// get the start and stop time in units
	LONGLONG start = m_pInput->CurrentStartTime();
	LONGLONG stop = m_pInput->CurrentStopTime();
        DbgLog((LOG_TRACE,2,TEXT("** start = %d stop = %d"), (int)start, 
								(int)stop));

	// convert to the range we're playing in milliseconds
	LONGLONG msStart = LONGLONG(start / 10000);
	LONGLONG msStop = LONGLONG(stop / 10000);

	// now get the range we're playing in frames
	// to avoid rounding errors, aim for the middle of a sample
        LONGLONG time = ((VIDEOINFOHEADER *)
		(m_pInput->CurrentMediaType().Format()))->AvgTimePerFrame / 10000;
	m_lStart = LONG((msStart + time / 2) * m_dwRate / (m_dwScale * 1000));
	m_lStop = LONG((msStop + time / 2) * m_dwRate / (m_dwScale * 1000));

        DbgLog((LOG_TRACE,2,TEXT("ICDrawStartPlay")));
	ICDrawStartPlay(m_hic, m_lStart, m_lStop);

        DbgLog((LOG_TRACE,1,TEXT("** We'll be playing from frame %d to %d"),
					m_lStart, m_lStop));
    }

    // we're paused.. we must block until unpaused and then use the new m_tStart
    // and continue (that's why this comes first)
    if (m_State == State_Paused && !m_fCueing) {
	m_fPauseBlocked = TRUE;
	DbgLog((LOG_TRACE,3,TEXT("Paused: blocking until running again")));
	// now that we've set m_fPauseBlocked, we can allow Stop to happen
	// Make sure to do this before blocking!
        m_csPauseBlock.Unlock();
	m_EventPauseBlock.Wait();
	// don't test for stopped, it won't be set yet and will still say paused
	if (m_State != State_Running) {
            DbgLog((LOG_TRACE,3,TEXT("Went from PAUSED to STOPPED, abort!")));
	    return VFW_E_WRONG_STATE;
	}
    } else {
	// We don't need this anymore
        m_csPauseBlock.Unlock();
    }

    // If something went wrong getting our window and hdc, we shouldn't continue
    if (!m_hdc) {
        DbgLog((LOG_ERROR,1,TEXT("NO HDC!  Erroring out, abort!")));
	return E_UNEXPECTED;
    }

    // When is this sample supposed to be drawn? And what frame is it?
    pSample->GetTime((REFERENCE_TIME *)&tstart, (REFERENCE_TIME *)&tstop);
    LONGLONG msStart = tstart.Millisecs();
    LONGLONG msStop = tstop.Millisecs();
    // aim for the middle of the frame to avoid rounding errors
    m_lFrame = LONG((msStop + msStart)  / 2 * m_dwRate / (m_dwScale * 1000));
    m_lFrame += m_lStart;	// now offset it from the frame we started at

    //DbgLog((LOG_TRACE,3,TEXT("*** DRAW frame %d at %dms"), m_lFrame, msStart));

    // codec not open ?
    if (m_hic == 0) {
        DbgLog((LOG_ERROR,1,TEXT("Can't receive, no codec open")));
	return E_UNEXPECTED;
    }

    // make sure we have valid input pointer

    BYTE * pSrc;
    HRESULT hr = pSample->GetPointer(&pSrc);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting input sample data")));
	return hr;
    }

    // !!! Could the source filter change our mtIn? Yes.  We would need to
    // call ICDrawChangePalette.  The size, compression type, etc. might
    // conceivably change, too.  If you do add an ICDraw call in here, put
    // the critsec around it.

    // get the BITMAPINFOHEADER structure, and fix biSizeImage
    LPBITMAPINFOHEADER lpbiSrc = HEADER(m_pInput->CurrentMediaType().Format());
    // patch the format to reflect this frame
    lpbiSrc->biSizeImage = pSample->GetActualDataLength();

    // We might want to send each frame a certain number of frames ahead of time
    //
    if (m_BufWanted) {
        LONGLONG time = ((VIDEOINFOHEADER *)
		(m_pInput->CurrentMediaType().Format()))->AvgTimePerFrame;
	tstart -= time * m_BufWanted;
    }

    // Now wait until it's time to draw.
    // Ask the clock to set an event when it's time to draw this sample.
    // Then wait for that event.  If we don't have a clock, just draw it
    // now.
    //
    if (m_pClock) {

	// If it's already time for this frame (or we're behind) don't waste
	// time Advising and Waiting
	REFERENCE_TIME curtime;
	m_pClock->GetTime((REFERENCE_TIME *)&curtime);

        DbgLog((LOG_TRACE,4,TEXT("*** DRAW frame %d in %dms"),
		m_lFrame - m_lStart,
		(int)((m_tStart + tstart - curtime) / 10000)));

	if (curtime < m_tStart + tstart) {
            hr = m_pClock->AdviseTime(
		// this was the reference time when our stream started playing
            	(REFERENCE_TIME) m_tStart,
		// this is the offset from our start time when the frame goes
		// !!! ask for a few usec early? (constant overhead?)
            	(REFERENCE_TIME) tstart,
            	(HEVENT)(HANDLE) m_EventAdvise,		// event to fire
            	&m_dwAdvise);                       	// Advise cookie
	    DbgLog((LOG_TRACE,5,TEXT("Waiting until it's time to draw")));

            if (SUCCEEDED(hr)) {
	        m_EventAdvise.Wait();
            } else {
	        DbgLog((LOG_TRACE,2,TEXT("AdviseTime ERROR, drawing now...")));
            }
            m_dwAdvise = 0;
	} else {
	    DbgLog((LOG_TRACE,5,TEXT("It's already time to draw this.")));
	}
    } else {
	DbgLog((LOG_TRACE,5,TEXT("No clock - draw it now.")));
    }

    // We need to make this mutex with COverlayNotify::OnClipChange calling any
    // ICDrawX API.  We can't use the m_csReceive crit sec or we WILL deadlock
    // (if we sit in fPauseBlocked when a clip change comes thru)
    //DbgLog((LOG_TRACE,3,TEXT("::Receive wants the draw lock")));
    m_csICDraw.Lock();

    // setting the right flags goes inside the crit sect lock because somebody
    // else grabbing the lock might change our mind about what to do
    BOOL dwFlags = 0;

    if (m_fNeedUpdate) {
        DbgLog((LOG_TRACE,5,TEXT("We need an UPDATE")));
 	dwFlags |= ICDRAW_UPDATE;
    }

    if (pSample->IsPreroll() == S_OK) {
        DbgLog((LOG_TRACE,5,TEXT("This is a preroll")));
 	dwFlags |= ICDRAW_PREROLL;
    }

    if (pSample->GetActualDataLength() <= 0) {
        DbgLog((LOG_TRACE,5,TEXT("This is a NULL frame")));
 	dwFlags |= ICDRAW_NULLFRAME;
    } else {
        DbgLog((LOG_TRACE,5,TEXT("This frame is %d big"), pSample->GetActualDataLength()));
    }

    // after a DrawBegin, we preroll until the next key
    if(pSample->IsSyncPoint() == S_OK) {
        DbgLog((LOG_TRACE,5,TEXT("This is a keyframe")));
	m_fNewBegin = FALSE;
    } else {
 	dwFlags |= ICDRAW_NOTKEYFRAME;
	if (m_fNewBegin) {
	    // After each begin, we PREROLL until the next keyframe, because
	    // this is what MCIAVI appeared to do (compatability)
	    dwFlags |= ICDRAW_PREROLL;
	}
    }

    //DbgLog((LOG_TRACE,2,TEXT("ICDraw")));
    if (ICDraw(m_hic, dwFlags, HEADER(m_pInput->CurrentMediaType().Format()),
    		pSrc, pSample->GetActualDataLength(), m_lFrame - m_lStart) != ICERR_OK) {
        //DbgLog((LOG_TRACE,3,TEXT("::Receive wants the draw lock no longer")));
        m_csICDraw.Unlock();
	return E_FAIL;
    }
    //DbgLog((LOG_TRACE,2,TEXT("AFTER ICDRAW")));

    // we've drawn something.  Repainting is no longer a ridiculous concept.
    m_fOKToRepaint = TRUE;

    // only reset this if it succeeded
    if (m_fNeedUpdate)
	m_fNeedUpdate = FALSE;

    // We've given the draw handler as much cueing as it wants.
    // If we're prerolling, we get a bunch of frames stamped as frame zero,
    // so it's important we don't stop accepting frames until the last one,
    // the one not marked preroll
    if (m_fCueing && (m_lFrame >= m_lStart + (LONG)m_BufWanted) &&
				pSample->IsPreroll() != S_OK) {
	DbgLog((LOG_TRACE,3,TEXT("Finished cueing.")));
	// tell the world we're done cueing, if anybody's listening
	m_fCueing = FALSE;	// do this first
	m_EventCueing.Set();
    }

    //DbgLog((LOG_TRACE,3,TEXT("::Receive wants the draw lock no longer")));
    m_csICDraw.Unlock();

    return NOERROR;
}

// Override this if your state changes are not done synchronously

STDMETHODIMP CAVIDraw::GetState(DWORD dwMSecs, FILTER_STATE *State)
{
    DbgLog((LOG_TRACE,5,TEXT("::GetState wait for %ldms"), dwMSecs));
    CheckPointer( State, E_POINTER );

    // We are in an intermediate state.  Give ourselves dwMSecs ms to steady
    if (m_fCueing && dwMSecs) {
	m_EventCueing.Wait(dwMSecs);
    }

    DbgLog((LOG_TRACE,5,TEXT("::GetState done waiting")));

    *State = m_State;
    if (m_fCueing)
	// guess we didn't steady in time
        return VFW_S_STATE_INTERMEDIATE;
    else
        return S_OK;
}

// Overridden to set state to Intermediate, not Paused (from stop)
// Also, we need to know we paused to stop the renderer
// !!! Base class bug fixes won't be picked up by me!
//
STDMETHODIMP CAVIDraw::Pause()
{
    CAutoLock lck(&m_csFilter);
    HRESULT hr = NOERROR;

    DbgLog((LOG_TRACE,2,TEXT("CAVIDraw::Pause")));

    // this line differs from the base class
    // it's OK for Receive to block again
    m_fPleaseDontBlock = FALSE;

    if (m_State == State_Paused) {
    }

    // If we have no input pin or it isn't yet connected then when we are
    // asked to pause we deliver an end of stream to the downstream filter.
    // This makes sure that it doesn't sit there forever waiting for
    // samples which we cannot ever deliver without an input connection.

    if (m_pInput == NULL || m_pInput->IsConnected() == FALSE) {
        if (m_pOutput && m_bEOSDelivered == FALSE) {
            m_pOutput->DeliverEndOfStream();
	    m_bEOSDelivered = TRUE;
        }
        m_State = State_Paused;
    }

    // We may have an input connection but no output connection

    else if (m_pOutput == NULL || m_pOutput->IsConnected() == FALSE) {
        m_State = State_Paused;
    }

    else {
	if (m_State == State_Stopped) {
	    // allow a class derived from CTransformFilter
	    // to know about starting and stopping streaming
	    hr = StartStreaming();
	}
	if (FAILED(hr)) {
	    return hr;
	}
    }

// CBaseFilter stuff begins here

    CAutoLock cObjectLock(m_pLock);

    // notify all pins of the change to active state
    if (m_State == State_Stopped) {
	int cPins = GetPinCount();
	for (int c = 0; c < cPins; c++) {

	    CBasePin *pPin = GetPin(c);

            // Disconnected pins are not activated - this saves pins
            // worrying about this state themselves

            if (pPin->IsConnected()) {
	        HRESULT hr = pPin->Active();
		// This is different.  We don't have an allocator, so it's
		// OK to get that error.
	        if (FAILED(hr) && hr != VFW_E_NO_ALLOCATOR) {
    		    DbgLog((LOG_ERROR,1,TEXT("* Active failed!")));
		    return hr;
	        }
            }
	}
    }

    // This section of code is different
    //
    if (m_State == State_Stopped) {
	// driver may want some frames in advance.  Can't finish pausing yet
        DbgLog((LOG_TRACE,2,TEXT("Pause - need to cue up %d extra frames"),
						m_BufWanted));
	m_State = State_Paused;
	m_EventCueing.Reset();	// more than one thread can block on it
	m_fCueing = TRUE;	// reset event first
        return S_FALSE;	// not really paused yet
    } else {
        DbgLog((LOG_TRACE,3,TEXT("Pause - was running")));
	m_State = State_Paused;
        DbgLog((LOG_TRACE,2,TEXT("ICDrawStop")));
	ICDrawStop(m_hic);
	return S_OK;
    }
}


// overridden to know when we unpause, and restart the renderer
//
STDMETHODIMP CAVIDraw::Run(REFERENCE_TIME tStart)
{
    DbgLog((LOG_TRACE,2,TEXT("CAVIDraw::Run")));

    // It appears we aren't going to be able to cue data before being run.
    // !!! So how do I avoid the GetBuffersWanted frame lag?
    if (m_fCueing) {
	m_fCueing = FALSE;	// do this first
	m_EventCueing.Set();
    }

    HRESULT hr = CBaseFilter::Run(tStart);

    DbgLog((LOG_TRACE,2,TEXT("ICDrawStart")));
    ICDrawStart(m_hic);

    // Unblock the renderer, but only if he's blocked
    // Make sure to do this after the base class fixes up m_tStart
    if (m_fPauseBlocked) {
        DbgLog((LOG_TRACE,3,TEXT("Run - unblocking Receive")));
	m_fPauseBlocked = FALSE;
	m_EventPauseBlock.Set();
    }

    return hr;
}


// overridden to unblock our renderer
// !!! Base class bug fixes won't be picked up by me!
//
STDMETHODIMP CAVIDraw::Stop()
{
    CAutoLock lck1(&m_csFilter);

    DbgLog((LOG_TRACE,2,TEXT("CAVIDraw::Stop")));

    if (m_State == State_Stopped) {
        return NOERROR;
    }

    // Succeed the Stop if we are not completely connected

    if (m_pInput == NULL || m_pInput->IsConnected() == FALSE ||
            m_pOutput == NULL || m_pOutput->IsConnected() == FALSE) {
                m_State = State_Stopped;
		m_bEOSDelivered = FALSE;
                return NOERROR;
    }

    m_fInStop = TRUE;

    ASSERT(m_pInput);
    ASSERT(m_pOutput);

    // We sometimes don't get an EndOfStream, so we could still be cueing
    // We're waiting for more data that will never come.
    // So we need to stop cueing, and send a RenderBuffer so the codec will
    // know to draw whatever GetBuffersWanted preroll it has stashed
    //
    if (m_fCueing) {
        DbgLog((LOG_TRACE,3,TEXT("No more data coming-done cueing")));
        // !!!tell the draw handler no more data is coming... draw what you have
        DbgLog((LOG_TRACE,2,TEXT("ICDrawRenderBuffer")));
        ICDrawRenderBuffer(m_hic);
        // tell the world we're done cueing, if anybody's listening
        m_fCueing = FALSE;	// do this first
        m_EventCueing.Set();
    }

    // decommit the input pin before locking or we can deadlock
    m_pInput->Inactive();

    // This is the only section that is different
    // Unblock the renderer, but only if he's blocked.  Do it now, before
    // we take the Receive critsec, cuz Receive is blocked!!

    // Prevent Receive from getting
    // pre-empted between the time it decides to block and actually sets
    // m_fPauseBlocked, or we won't know that as soon as the Receive thread
    // continues, it will block after we decided it wasn't going to.
    m_csPauseBlock.Lock();

    // If another thread is currently in Receive but hasn't yet blocked
    // (but is going to) we won't unblock it below (because it isn't blocked
    // yet) and then as soon as we take the Receive crit sect a moment later,
    // the Receive thread will start up again, block, and we're dead.
    m_fPleaseDontBlock = TRUE;

    if (m_fPauseBlocked) {
        DbgLog((LOG_TRACE,3,TEXT("Stop - unblocking Receive")));
	m_fPauseBlocked = FALSE;
	m_EventPauseBlock.Set();
    }

    m_csPauseBlock.Unlock();

    // back to normal.
    // synchronize with Receive calls

    CAutoLock lck2(&m_csReceive);
    m_pOutput->Inactive();

    // allow a class derived from CTransformFilter
    // to know about starting and stopping streaming

    HRESULT hr = StopStreaming();
    if (SUCCEEDED(hr)) {
        // complete the state transition
        m_State = State_Stopped;
        m_bEOSDelivered = FALSE;
    }

    m_fInStop = FALSE;

    return hr;
}


// No more data coming.  If we're blocked waiting for more data, unblock!
HRESULT CAVIDraw::EndOfStream(void)
{
    HRESULT hr = NOERROR;

    DbgLog((LOG_TRACE,2,TEXT("CAVIDraw::EndOfStream")));

    // We're waiting for more data that will never come.  We better enter
    // our pause state for real, or we'll hang
    if (m_fCueing) {
	DbgLog((LOG_TRACE,3,TEXT("No more data coming - done cueing")));
	// !!!tell the draw handler no more data is coming... draw what you have
        DbgLog((LOG_TRACE,2,TEXT("ICDrawRenderBuffer")));
	ICDrawRenderBuffer(m_hic);
	// tell the world we're done cueing, if anybody's listening
	m_fCueing = FALSE;	// do this first
	m_EventCueing.Set();
    }

    return CTransformFilter::EndOfStream();
}

// enter flush state. Receives already blocked
// must override this if you have queued data or a worker thread
// !!! Base class bug fixes won't be picked up by me!
HRESULT CAVIDraw::BeginFlush(void)
{
    HRESULT hr = NOERROR;

    DbgLog((LOG_TRACE,2,TEXT("CAVIDraw::BeginFlush")));

    if (m_pOutput != NULL) {
	// block receives -- done by caller (CBaseInputPin::BeginFlush)

	// discard queued data -- we have no queued data

        // Prevent Receive from getting pre-empted between
        // the time it decides to block and actually sets m_fPauseBlocked,
        // or we won't know that as soon as the Receive thread
        // continues, it will block after we decided it wasn't going to.
        m_csPauseBlock.Lock();

	// free anyone blocked on receive
        if (m_fPauseBlocked) {
            DbgLog((LOG_TRACE,3,TEXT("BeginFlush - unblocking Receive")));
	    m_fPauseBlocked = FALSE;
	    m_EventPauseBlock.Set();
        }

	// Until the EndFlush, Receive should reject everything
	m_fPleaseDontBlock = TRUE;

        m_csPauseBlock.Unlock();

	// next NewSegment will hold a new frame range
        m_lStart = -1;
        DbgLog((LOG_TRACE,2,TEXT("ICDrawStopPlay")));
	ICDrawStopPlay(m_hic);
        DbgLog((LOG_TRACE,2,TEXT("ICDrawEnd")));
	ICDrawEnd(m_hic);


	// do NOT call downstream - we are not connected with IMemInputPin
	// and IMAGE will deadlock
	// NO NO NO hr = m_pOutput->DeliverBeginFlush();

 	// If this driver has a bunch of queued up frames, it should throw
	// them away instead of showing them during the next unrelated 
	// segment it's asked to play
        DbgLog((LOG_TRACE,2,TEXT("ICDrawFlush")));
	ICDrawFlush(m_hic);
    }
    return hr;
}

// leave flush state. must override this if you have queued data
// or a worker thread
// !!! Base class bug fixes won't be picked up by me!
HRESULT CAVIDraw::EndFlush(void)
{

    DbgLog((LOG_TRACE,2,TEXT("CAVIDraw::EndFlush")));

    // sync with pushing thread -- we have no worker thread

    // ensure no more data to go downstream -- we have no queued data

    // since we just flushed, anything that comes downstream from now on
    // is stuff to cue up as if we just entered Pause mode (from Stop).
    m_fPleaseDontBlock = FALSE;
    m_EventCueing.Reset();	// more than one thread can block on it

    // If we're really paused, we can expect to see more frames come our way
    // If not, none are coming, and we will HANG if we think we're cueing
    // Also, we appear to need a new DrawBegin to keep the drivers happy
    if (m_State == State_Paused && !m_fInStop) {
        m_fCueing = TRUE;		// reset event first
        DbgLog((LOG_TRACE,3,TEXT("ICDrawBegin hdc=%d (%d,%d,%d,%d)"), m_hdc,
		m_rcClient.left,
		m_rcClient.top,
		m_rcClient.right,
		m_rcClient.bottom));
	DWORD_PTR err = ICDrawBegin(m_hic, ICDRAW_HDC, NULL, /* !!! hpal */
			m_hwnd, m_hdc,
			m_rcClient.left, m_rcClient.top,
			m_rcClient.right - m_rcClient.left,
			m_rcClient.bottom - m_rcClient.top,
			HEADER(m_pInput->CurrentMediaType().Format()),
			m_rcSource.left, m_rcSource.top,
			m_rcSource.right - m_rcSource.left,
			m_rcSource.bottom - m_rcSource.top,
			// !!! I know I'm passing these backwards, but MCIAVI
			// did (for the default draw handler only)
			m_dwScale, m_dwRate);
	m_fNewBegin = TRUE;
	if (err != ICERR_OK) {
            DbgLog((LOG_ERROR,1,TEXT("Error in ICDrawBegin")));
	    return E_FAIL;
	}
    }

    // do NOT call downstream - we are not connected with IMemInputPin
    // NO NO NO return m_pOutput->DeliverEndFlush();
    return NOERROR;

    // caller (the input pin's method) will unblock Receives
}


STDMETHODIMP CAVIDraw::GetClassID(CLSID *pClsid)
{
    if (pClsid==NULL) {
        return E_POINTER;
    }
    *pClsid = CLSID_AVIDraw;
    return NOERROR;

} // GetClassID
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\encode\mjpgenc.h ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

#ifndef _MJPEGENC_H_
#define _MJPEGENC_H_

#include "..\pmjpeg32\jpeglib.h"
#include "..\pmjpeg32\MJpegLib.h"


extern const AMOVIESETUP_FILTER sudMJPGEnc;


#define AM_MJPEG_DEFAULTKEYFRAMERATE 20	    //PMatrix codec does not support ICM_GetDefaultKeyFrameRate

class CMJPGEnc : 
	public CTransformFilter
	, public CPersistStream

{

public:

    CMJPGEnc(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CMJPGEnc();

    DECLARE_IUNKNOWN

    HRESULT Transform(IMediaSample * pIn, IMediaSample * pOut);

    // check if you can support mtIn
    HRESULT CheckInputType(const CMediaType* mtIn);

    // check if you can support the transform from this input to
    // this output
    HRESULT CheckTransform(
                const CMediaType* mtIn,
                const CMediaType* mtOut);

    // called from CBaseOutputPin to prepare the allocator's count
    // of buffers and sizes
    HRESULT DecideBufferSize(IMemAllocator * pAllocator,
                             ALLOCATOR_PROPERTIES *pProperties);

    // optional overrides - we want to know when streaming starts
    // and stops
    HRESULT StartStreaming();
    HRESULT StopStreaming();

    // overriden to know when the media type is set
    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt);

    // overriden to suggest OUTPUT pin media types
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);

    // Overridden to make a CMJPGOutputPin
    CBasePin * GetPin(int n);

    // IPersistPropertyBag methods
    STDMETHOD(Load)(THIS_ LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog);
    STDMETHOD(Save)(THIS_ LPPROPERTYBAG pPropBag, BOOL fClearDirty,
                    BOOL fSaveAllProperties);
    STDMETHODIMP InitNew();

    STDMETHODIMP GetClassID(CLSID *pClsid);

    // CPersistStream
    HRESULT WriteToStream(IStream *pStream);
    HRESULT ReadFromStream(IStream *pStream);
    int SizeMax();
    
    //for output pin 
    DWORD GetICInfo (ICINFO *picinfo);

private:
    PINSTINFO m_phInstance;		// current codec

    // force CheckTransform to cache any Ins it opens... we'll need it
    BOOL m_fCacheIns;

    // are we inside an ICCompress call?
    BOOL m_fInICCompress;

    // is there a dialog box up that should prevent start streaming?
    BOOL m_fDialogUp;

    // have we called ICDecompressBegin ?
    BOOL m_fStreaming;

    // how long since last keyframe
    int m_nKeyCount;

    // the frame number we're compressing
    LONG m_lFrameCount;

    // the previous decompressed frame for temporal compressors
    LPVOID m_lpBitsPrev;

    // the format it decompresses back to
    LPBITMAPINFOHEADER m_lpbiPrev;

    // the compression options being used
    COMPVARS m_compvars;

    // how big to make each frame, based on data rate and fps
    DWORD m_dwSizePerFrame;

    // Somebody called ::SetFormat and wants this media type used
    BOOL m_fOfferSetFormatOnly;
    CMediaType m_cmt;

    // send this to the codec via ICSetState when we open it
    LPBYTE m_lpState;
    int    m_cbState;

public:


    friend class CMJPGOutputPin;
};

class CMJPGOutputPin :	public CTransformOutputPin, 
			public IAMStreamConfig,
			public IAMVideoCompression
{

public:

    CMJPGOutputPin(
        TCHAR *pObjectName,
        CMJPGEnc *pCapture,
        HRESULT * phr,
        LPCWSTR pName);

    virtual ~CMJPGOutputPin();

    DECLARE_IUNKNOWN

    // override to expose IAMStreamConfig, etc.
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void **ppv);

    // IAMStreamConfig stuff
    STDMETHODIMP SetFormat(AM_MEDIA_TYPE *pmt);
    STDMETHODIMP GetFormat(AM_MEDIA_TYPE **ppmt);
    STDMETHODIMP GetNumberOfCapabilities(int *piCount, int *piSize);
    STDMETHODIMP GetStreamCaps(int i, AM_MEDIA_TYPE **ppmt, LPBYTE pVSCC);

    /* IAMVideoCompression methods */
    STDMETHODIMP put_KeyFrameRate(long KeyFrameRate);
    STDMETHODIMP get_KeyFrameRate(long FAR* pKeyFrameRate);
    STDMETHODIMP put_PFramesPerKeyFrame(long PFramesPerKeyFrame)
			{return E_NOTIMPL;};
    STDMETHODIMP get_PFramesPerKeyFrame(long FAR* pPFramesPerKeyFrame)
			{return E_NOTIMPL;};
    STDMETHODIMP put_Quality(double Quality);
    STDMETHODIMP get_Quality(double FAR* pQuality);
    STDMETHODIMP put_WindowSize(DWORDLONG WindowSize) {return E_NOTIMPL;};
    STDMETHODIMP get_WindowSize(DWORDLONG FAR* pWindowSize);
    STDMETHODIMP OverrideKeyFrame(long FrameNumber);
    STDMETHODIMP OverrideFrameSize(long FrameNumber, long Size);
    STDMETHODIMP GetInfo(LPWSTR pstrVersion,
			int *pcbVersion,
			LPWSTR pstrDescription,
			int *pcbDescription,
			long FAR* pDefaultKeyFrameRate,
			long FAR* pDefaultPFramesPerKey,
			double FAR* pDefaultQuality,
			long FAR* pCapabilities);
 
    HRESULT Reconnect();

private:

    /*  Controlling filter */
    CMJPGEnc *m_pFilter;

};


#endif  //#ifndef _MJPEGENC_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\encode\mjpgenc.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

//
// Quartz wrapper for old video compressors - CO
//

#include <streams.h>
#ifdef FILTER_DLL
// define the GUIDs for streams and my CLSID in this file
#include <initguid.h>
#endif

#include <windowsx.h>
#include <vfw.h>

#include "MJPGEnc.h"


const AMOVIESETUP_MEDIATYPE
sudMJPGEncTypeIn =  { &MEDIATYPE_Video      // clsMajorType
                , &MEDIASUBTYPE_NULL }; // clsMinorType

const AMOVIESETUP_MEDIATYPE
sudMJPGEncTypeOut =  { &MEDIATYPE_Video      // clsMajorType
                , &MEDIASUBTYPE_MJPG }; // clsMinorType

const AMOVIESETUP_PIN
psudMJPGEncPins[] =  { { L"Input"             // strName
                     , FALSE                // bRendered
                     , FALSE                // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Output"            // strConnectsToPin
                     , 1                    // nTypes
                     , &sudMJPGEncTypeIn }      // lpTypes
                   , { L"Output"            // strName
                     , FALSE                // bRendered
                     , TRUE                 // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Input"             // strConnectsToPin
                     , 1                    // nTypes
                     , &sudMJPGEncTypeOut } };   // lpTypes

const AMOVIESETUP_FILTER
sudMJPGEnc  = { &CLSID_MJPGEnc          // clsID
            , L"MJPEG Compressor"     // strName
            , MERIT_DO_NOT_USE      // dwMerit
            , 2                     // nPins
            , psudMJPGEncPins };      // lpPin



#ifdef FILTER_DLL
// list of class ids and creator functions for class factory
CFactoryTemplate g_Templates[] = {
    {L"MJPEG Compressor", &CLSID_MJPGEnc, CMJPGEnc::CreateInstance, NULL, 0},
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

const WCHAR *g_wszUniq = L"MJPEG Video Encoder" ;

STDAPI DllRegisterServer()
{
 HRESULT hr = AMovieDllRegisterServer2( TRUE );
 if( FAILED(hr) )
     return hr;
 
 IFilterMapper2 *pFm2 = 0;

 hr = CoCreateInstance( CLSID_FilterMapper2
                         , NULL
                         , CLSCTX_INPROC_SERVER
                         , IID_IFilterMapper2
                         , (void **)&pFm2       );
    
 if(FAILED(hr))
     return hr;

 REGFILTER2 rf2;
 rf2.dwVersion = 1;
 rf2.dwMerit = MERIT_DO_NOT_USE;
 rf2.cPins = 0;
 rf2.rgPins = 0;

 hr = pFm2->RegisterFilter(
      CLSID_MJPGEnc,
      g_wszUniq,
      0,
      &CLSID_VideoCompressorCategory,
      g_wszUniq,
      &rf2);

 pFm2->Release();
 
 return hr;

}

STDAPI DllUnregisterServer()
{

 HRESULT hr = AMovieDllRegisterServer2( FALSE );
 if( FAILED(hr) )
     return hr;

 
 IFilterMapper2 *pFm2 = 0;

 hr = CoCreateInstance( CLSID_FilterMapper2
                         , NULL
                         , CLSCTX_INPROC_SERVER
                         , IID_IFilterMapper2
                         , (void **)&pFm2       );
    
 if(FAILED(hr))
     return hr;


 hr = pFm2->UnregisterFilter(
      &CLSID_VideoCompressorCategory,
      g_wszUniq,
      CLSID_MJPGEnc);

 pFm2->Release();
 
 return hr;
}

#endif


//------------------------------------------------------
// Local functions for exception handling
//------------------------------------------------------
static int
Exception_Filter(DWORD dwExceptionCode)
{
    if(dwExceptionCode == MJPEG_ERROREXIT_EXCEPTION)
    {
        DbgLog((LOG_TRACE,1,TEXT("Decode EXCEPTION:: PMJPEG32 threw a known ERROR EXIT exception")));
        return EXCEPTION_EXECUTE_HANDLER;
    }
    else
    {
        DbgLog((LOG_TRACE,1,TEXT("Decode EXCEPTION:: PMJPEG32 threw an unknown exception")));
        return EXCEPTION_CONTINUE_SEARCH;
    }
}


// --- CMJPGEnc ----------------------------------------

CMJPGEnc::CMJPGEnc(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
    : CTransformFilter(pName, pUnk, CLSID_MJPGEnc),
      CPersistStream(pUnk, phr),
      m_phInstance(NULL),
      m_lpBitsPrev(NULL),
      m_lpbiPrev(NULL),
      m_fStreaming(FALSE),
      m_fDialogUp(FALSE),
      m_fCacheIns(FALSE),
      m_fOfferSetFormatOnly(FALSE),
      m_fInICCompress(FALSE),
      m_lpState(NULL),
      m_cbState(0)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the MJPEG Encoder filter")));
    _fmemset(&m_compvars, 0, sizeof(m_compvars));

    m_compvars.cbSize	    = sizeof(m_compvars);
    m_compvars.dwFlags	    = ICMF_COMPVARS_VALID;
    m_compvars.lQ	    = ICQUALITY_DEFAULT;
    m_compvars.lKey	    = -1;   
    m_compvars.fccHandler   = MKFOURCC('M','J','P','G');
}

CMJPGEnc::~CMJPGEnc()
{
    if (m_phInstance) {
        __try
        {
	if (m_fStreaming) 
	    CompressEnd(m_phInstance);

	Close(m_phInstance);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
        }
    }

    // TODO ?
    if (m_lpState)
	QzTaskMemFree(m_lpState);
    m_lpState = NULL;

    DbgLog((LOG_TRACE,1,TEXT("*Destroying the MJPEG Encode filter")));
}

STDMETHODIMP CMJPGEnc::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    DbgLog((LOG_TRACE,9,TEXT("somebody's querying my interface")));
    if(riid == IID_IPersistStream) {
        DbgLog((LOG_TRACE,3,TEXT("VfwCap::QI for IPersistStream")));
        return GetInterface((IPersistStream *) this, ppv);
    } else {
        return CTransformFilter::NonDelegatingQueryInterface(riid, ppv);
    }
}


// this goes in the factory template table to create new instances
CUnknown * CMJPGEnc::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CMJPGEnc(TEXT("MJPEG compression filter"), pUnk, phr);
}


CBasePin * CMJPGEnc::GetPin(int n)
{
    HRESULT hr = S_OK;

    DbgLog((LOG_TRACE,9,TEXT("CMJPGEnc::GetPin")));

    // Create an input pin if necessary

    if (n == 0 && m_pInput == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Creating an input pin")));

        m_pInput = new CTransformInputPin(NAME("Transform input pin"),
                                          this,              // Owner filter
                                          &hr,               // Result code
                                          L"Input");         // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pInput == NULL) {
            delete m_pInput;
            m_pInput = NULL;
        }
    }

    // Or alternatively create an output pin

    if (n == 1 && m_pOutput == NULL) {

        DbgLog((LOG_TRACE,2,TEXT("Creating an output pin")));

        m_pOutput = new CMJPGOutputPin(NAME("MJPEG Encode Output Pin"),
                                            this,            // Owner filter
                                            &hr,             // Result code
                                            L"Output");      // Pin name

        // a failed return code should delete the object

        if (FAILED(hr) || m_pOutput == NULL) {
            delete m_pOutput;
            m_pOutput = NULL;
        }

    }

    // Return the appropriate pin

    if (n == 0) {
        return m_pInput;
    }
    return m_pOutput;
}

STDMETHODIMP CMJPGEnc::Load(LPPROPERTYBAG pPropBag, LPERRORLOG pErrorLog)
{
    CAutoLock cObjectLock(&m_csFilter);
    if(m_State != State_Stopped)
    {
        return VFW_E_WRONG_STATE;
    }
    // If they don't give us a key, default to something (CINEPAK)
    if (pPropBag == NULL) {
	m_compvars.fccHandler = MKFOURCC('C','V','I','D');
	return NOERROR;
    }

    VARIANT var;
    var.vt = VT_BSTR;
    HRESULT hr = pPropBag->Read(L"FccHandler", &var,0);
    if(SUCCEEDED(hr))
    {
        char szFccHandler[5];
        WideCharToMultiByte(CP_ACP, 0, var.bstrVal, -1,
                            szFccHandler, sizeof(szFccHandler), 0, 0);
        SysFreeString(var.bstrVal);
        DbgLog((LOG_TRACE,2,TEXT("MJPEG::Load: use %c%c%c%c"),
                szFccHandler[0], szFccHandler[1], szFccHandler[2], szFccHandler[3]));
        m_compvars.fccHandler = *(DWORD UNALIGNED *)szFccHandler;;
        if (m_pOutput && m_pOutput->IsConnected()) {
            DbgLog((LOG_TRACE,2,TEXT("MJPEG::Load: reconnect output")));
            return ((CMJPGOutputPin *)m_pOutput)->Reconnect();
        }
        hr = S_OK;
        

    }
    else if(hr == HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND))
    {
        hr = HRESULT_FROM_WIN32(ERROR_INVALID_DATA);
    }
    

    return hr;
}

STDMETHODIMP CMJPGEnc::Save(
    LPPROPERTYBAG pPropBag, BOOL fClearDirty,
    BOOL fSaveAllProperties)
{
    // E_NOTIMPL is not a valid return code as any object implementing
    // this interface must support the entire functionality of the
    // interface. !!!
    return E_NOTIMPL;
}

STDMETHODIMP CMJPGEnc::InitNew()
{
    // fine. just call load
    return S_OK;
}

STDMETHODIMP CMJPGEnc::GetClassID(CLSID *pClsid)
{
    CheckPointer(pClsid, E_POINTER);
    *pClsid = m_clsid;
    return S_OK;  
}

struct CoPersist
{
    DWORD dwSize;
    DWORD fccHandler;
};

HRESULT CMJPGEnc::WriteToStream(IStream *pStream)
{
    CoPersist cp;
    cp.dwSize = sizeof(cp);
    cp.fccHandler = m_compvars.fccHandler;
    
    return pStream->Write(&cp, sizeof(cp), 0);
}

HRESULT CMJPGEnc::ReadFromStream(IStream *pStream)
{
   if(m_compvars.fccHandler != 0)
   {
       return HRESULT_FROM_WIN32(ERROR_ALREADY_INITIALIZED);
   }

   CoPersist cp;
   HRESULT hr = pStream->Read(&cp, sizeof(cp), 0);
   if(FAILED(hr))
       return hr;

   if(cp.dwSize != sizeof(cp))
       return HRESULT_FROM_WIN32(ERROR_INVALID_DATA);

   m_compvars.fccHandler = cp.fccHandler;

   return S_OK;
}

int CMJPGEnc::SizeMax()
{
    return sizeof(CoPersist);
}

HRESULT CMJPGEnc::Transform(IMediaSample * pIn, IMediaSample * pOut)
{
    BOOL  fKey;
    DWORD err;
    FOURCCMap fccOut;
    BOOL fFault = FALSE;

    DbgLog((LOG_TRACE,5,TEXT("*::Transform")));

    // codec not open ?
    if (m_phInstance == 0) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, no codec open")));
	return E_UNEXPECTED;
    }

    // we haven't started streaming yet?
    if (!m_fStreaming) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, not streaming")));
	return E_UNEXPECTED;
    }

    // make sure we have valid input and output pointers

    BYTE * pSrc;
    HRESULT hr = pIn->GetPointer(&pSrc);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting input sample data")));
	return hr;
    }

    BYTE * pDst;
    hr = pOut->GetPointer(&pDst);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting output sample data")));
	return hr;
    }

    // !!! Could the source filter change our mtIn too? Yes!

    // get the BITMAPINFOHEADER structure, and fix biSizeImage

    LPBITMAPINFOHEADER lpbiSrc = HEADER(m_pInput->CurrentMediaType().Format());
    LPBITMAPINFOHEADER lpbiDst = HEADER(m_pOutput->CurrentMediaType().Format());

    // ICCompress will alter this value!  Which is illegal, other filters use
    // this as the connection type
    DWORD biSizeImageOld = lpbiDst->biSizeImage;

    lpbiSrc->biSizeImage = pIn->GetActualDataLength();

    BOOL dwFlags = 0;

    fKey = (m_nKeyCount >= m_compvars.lKey);
    if (fKey) {
        DbgLog((LOG_TRACE,6,TEXT("I will ask for a keyframe")));
	dwFlags |= ICCOMPRESS_KEYFRAME;
    }

    // pretty please, compiler, don't optimize this away
    int cbSize = DIBSIZE(*lpbiSrc);
    __try { 
	// cinepak will access one byte too many... occasionally this faults
	if (lpbiSrc->biBitCount == 24)
	    volatile int cb = *(pSrc + cbSize);
    } __except (EXCEPTION_EXECUTE_HANDLER) {
	// OK, I guess I have to copy it into a bigger buffer to avoid this
        DbgLog((LOG_ERROR,0,TEXT("Compressor faulted!  Recovering...")));
	fFault = TRUE;
	BYTE *pOld = pSrc;
	pSrc = (BYTE *)QzTaskMemAlloc(cbSize + 1);
	if (pSrc == NULL)
	    return E_OUTOFMEMORY;
	CopyMemory(pSrc, pOld, cbSize);
    }

    DbgLog((LOG_TRACE,6,TEXT("Calling Compress on frame %ld"),
					m_lFrameCount));
    // StopStreaming may get called while we're inside here, blowing us up
    m_fInICCompress = TRUE;

    ICCOMPRESS IcEnc;
    IcEnc.dwFlags   =dwFlags;
    IcEnc.lpbiOutput=lpbiDst;
    IcEnc.lpOutput  =pDst;
    IcEnc.lpbiInput = lpbiSrc;
    IcEnc.lpInput   = pSrc;
    
    DWORD ckid = 0L;
    IcEnc.lpckid    = &ckid;  //  address to contain the chunk identifier for data in the AVI file

    DWORD dwFlagsOut = 0L;
    IcEnc.lpdwFlags = &dwFlagsOut;  //Flags for the AVI index

    IcEnc.lFrameNum = m_lFrameCount;//number of the frames to compress
    IcEnc.dwFrameSize= m_dwSizePerFrame;//Desired Manimun size in bytes
    IcEnc.dwQuality = m_compvars.lQ;//quality set

    IcEnc.lpbiPrev  =fKey ? NULL : m_lpbiPrev;
    IcEnc.lpPrev    =fKey ? NULL : m_lpBitsPrev;
    __try
    {
    err =Compress(m_phInstance, &IcEnc, 0); //the last var is not used.
    }
    __except(Exception_Filter(GetExceptionCode()))
    {
        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
        // we may not be able to survive a compression fault
        m_fInICCompress = FALSE;
        lpbiDst->biSizeImage = biSizeImageOld;
        return E_FAIL;
    }
    
    if (fFault)
	QzTaskMemFree(pSrc);

    if (ICERR_OK != err) {
        DbgLog((LOG_ERROR,1,TEXT("Error in ICCompress")));
        m_fInICCompress = FALSE;
        lpbiDst->biSizeImage = biSizeImageOld;
        return E_FAIL;
    }

    // was the compressed frame a keyframe?
    fKey = dwFlagsOut & AVIIF_KEYFRAME;
    pOut->SetSyncPoint(fKey);

    // If we made a key, reset when we need the next one.
    if (fKey)
	m_nKeyCount = 0;

    // Do we want periodic key frames? If not, never make one again.
    // (The first frame is always a keyframe).
    if (m_compvars.lKey)
	m_nKeyCount++;
    else
	m_nKeyCount = -1;

    // Count how many frames we compress
    m_lFrameCount++;

    // Decompress into previous frame
    if (m_lpBitsPrev) {

	ICDECOMPRESS Icdec;
	Icdec.dwFlags =dwFlags;
	Icdec.lpbiInput = lpbiSrc;
	Icdec.lpInput= pSrc;
	Icdec.lpbiOutput=lpbiDst;
	Icdec.lpOutput=pDst;

        __try
        {
        if (ICERR_OK != Decompress(m_phInstance, &Icdec, 0))
	{
    	    m_fInICCompress = FALSE;
            lpbiDst->biSizeImage = biSizeImageOld;
	    return E_FAIL;
	}
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            m_fInICCompress = FALSE;
            lpbiDst->biSizeImage = biSizeImageOld;
            return E_FAIL;
        }        
    }
    m_fInICCompress = FALSE;

    // now put this back, or it'll shrink until we only decode part of each frm
    lpbiDst->biSizeImage = biSizeImageOld;

    pOut->SetActualDataLength(lpbiDst->biSizeImage);

    return S_OK;
}


// check if you can support mtIn
HRESULT CMJPGEnc::CheckInputType(const CMediaType* pmtIn)
{
    FOURCCMap fccHandlerIn;
    PINSTINFO ph;

    DbgLog((LOG_TRACE,2,TEXT("*::CheckInputType")));

    if (pmtIn == NULL || pmtIn->Format() == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: type/format is NULL")));
	return E_INVALIDARG;
    }

    // we only support MEDIATYPE_Video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: not VIDEO")));
	return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: format not VIDINFO")));
        return E_INVALIDARG;
    }

    fccHandlerIn.SetFOURCC(pmtIn->Subtype());

    DbgLog((LOG_TRACE,3,TEXT("Checking fccType: %lx biCompression: %lx"),
		fccHandlerIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression));

    //
    //  Most VFW codecs don't like upsize-down (DIRECTDRAW) style bitmaps.  If the
    //  height is negative then reject it.
    //
    if (HEADER(pmtIn->Format())->biHeight < 0) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: Negative height")));
        return E_INVALIDARG;
    }

    // look for a compressor for this format

    if (HEADER(pmtIn->Format())->biCompression != BI_BITFIELDS &&
    		HEADER(pmtIn->Format())->biCompression != BI_RGB) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: This is compressed already!")));
	return E_INVALIDARG;
    }

    // !!! I'm only going to say I accept an input type if the default (current)
    // compressor can handle it.  I'm not going to ask every compressor.  This
    // way an app can make a choose compressor box and only show those
    // compressors that support a given input format, by making a CO filter
    // with each compressor as a default and asking them all

    // We might have a instance cached if we connected before and then broken
    if (!m_phInstance) {
        DbgLog((LOG_TRACE,4,TEXT("opening a compressor")));

	ICINFO icinfo;
        __try
        {
	GetInfo (NULL, &icinfo, sizeof(ICINFO));  //first var is not used by the function
	ph=Open (&icinfo);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

        if (!ph) {
            DbgLog((LOG_ERROR,1,TEXT("Error: Can't open a compressor")));
	    return E_FAIL;
        }
    } else {
        DbgLog((LOG_TRACE,4,TEXT("using a cached compressor")));
	ph = m_phInstance;
    }

    __try
    {
    if (ICERR_BADFORMAT==CompressQuery(ph, HEADER(pmtIn->Format()), NULL)) {
        DbgLog((LOG_ERROR,1,TEXT("Error: Compressor rejected format")));
	if (ph != m_phInstance)
        {
            __try
            {
	    Close(ph);
            }
            __except(Exception_Filter(GetExceptionCode()))
            {
                DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                // handling code
                // fall through to failure
            }
        }
	return E_FAIL;
    }
    }
    __except(Exception_Filter(GetExceptionCode()))
    {
        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
        // handling code
        __try
        {
            if(ph != m_phInstance)
            {
                Close(ph);
            }
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            // fall through to failure
        }
        return E_FAIL;
    }

    // remember this instahce to save time if asked again.
    if (m_phInstance == NULL) {
        DbgLog((LOG_TRACE,4,TEXT("caching this compressor")));
	m_phInstance = ph;
    }

    return NOERROR;
}


// check if you can support the transform from this input to this output

HRESULT CMJPGEnc::CheckTransform(const CMediaType* pmtIn,
                               const CMediaType* pmtOut)
{
    FOURCCMap fccIn;

    DbgLog((LOG_TRACE,2,TEXT("*::CheckTransform")));

    if (pmtIn == NULL || pmtOut == NULL || pmtIn->Format() == NULL ||
					pmtOut->Format() == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: type/format is NULL")));
	return E_POINTER;
    }

    // we can't convert between toplevel types.
    if (*pmtIn->Type() != *pmtOut->Type()) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: types don't match")));
	return VFW_E_INVALIDMEDIATYPE;
    }

    // and we only accept video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: type not VIDEO")));
	return VFW_E_INVALIDMEDIATYPE;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtOut->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: output format type not VIDINFO")));
        return VFW_E_INVALIDMEDIATYPE;
    }
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: input format type not VIDINFO")));
        return VFW_E_INVALIDMEDIATYPE;
    }

#ifdef PICKY_PICKY // !!!
    if (((VIDEOINFOHEADER *)(pmtOut->Format()))->AvgTimePerFrame &&
    		((VIDEOINFOHEADER *)(pmtOut->Format()))->AvgTimePerFrame !=
    		((VIDEOINFOHEADER *)(pmtIn->Format()))->AvgTimePerFrame) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: can't frame rate convert")));
        return VFW_E_INVALIDMEDIATYPE;
    }
#endif

    // check it really is a FOURCC
    fccIn.SetFOURCC(pmtIn->Subtype());

    ASSERT(pmtOut->Format());

#define rcS1 ((VIDEOINFOHEADER *)(pmtOut->Format()))->rcSource
#define rcT1 ((VIDEOINFOHEADER *)(pmtOut->Format()))->rcTarget

    DbgLog((LOG_TRACE,3,TEXT("Check fccIn: %lx biCompIn: %lx bitDepthIn: %d"),
		fccIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression,
		HEADER(pmtIn->Format())->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthIn: %ld biHeightIn: %ld"),
		HEADER(pmtIn->Format())->biWidth,
		HEADER(pmtIn->Format())->biHeight));
    DbgLog((LOG_TRACE,3,TEXT("biCompOut: %lx bitDepthOut: %d"),
		HEADER(pmtOut->Format())->biCompression,
		HEADER(pmtOut->Format())->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthOut: %ld biHeightOut: %ld"),
		HEADER(pmtOut->Format())->biWidth,
		HEADER(pmtOut->Format())->biHeight));
    DbgLog((LOG_TRACE,3,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		rcS1.left, rcS1.top, rcS1.right, rcS1.bottom));
    DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		rcT1.left, rcT1.top, rcT1.right, rcT1.bottom));

    if (!IsRectEmpty(&rcT1) && (rcT1.left != 0 || rcT1.top != 0 ||
			HEADER(pmtOut->Format())->biWidth != rcT1.right ||
			HEADER(pmtOut->Format())->biHeight != rcT1.bottom)) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: can't use funky rcTarget")));
        return VFW_E_INVALIDMEDIATYPE;
    }

    if (!IsRectEmpty(&rcS1) && (rcS1.left != 0 || rcS1.top != 0 ||
			HEADER(pmtIn->Format())->biWidth != rcS1.right ||
			HEADER(pmtIn->Format())->biHeight != rcS1.bottom)) {
        DbgLog((LOG_TRACE,2,TEXT("Rejecting: can't use funky rcSource")));
        return VFW_E_INVALIDMEDIATYPE;
    }

    // find a codec for this transform

    DbgLog((LOG_TRACE,3,TEXT("Trying to find a compressor for this")));
    // If we've opened a compressor before, quickly try that one to see if it
    // will do the job (saves lots of time) before trying the whole universe of
    // compressors.
    DWORD dwQueryResult = 0;
    __try
    {
    dwQueryResult = CompressQuery(m_phInstance, HEADER(pmtIn->Format()),
				(JPEGBITMAPINFOHEADER *)HEADER(pmtOut->Format()));
    }
    __except(Exception_Filter(GetExceptionCode()))
    {
        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
        // handling code
        return E_FAIL;
    }

    // check result
    if ((!m_phInstance) || (dwQueryResult != ICERR_OK))
    {
        DbgLog((LOG_TRACE,3,TEXT("compressor rejected this transform")));
        return E_FAIL;
    } else 
    {
    	DbgLog((LOG_TRACE,3,TEXT("The cached compressor accepts it")));
    }

    return NOERROR;
}


// overriden to know when the media type is actually set

HRESULT CMJPGEnc::SetMediaType(PIN_DIRECTION direction, const CMediaType *pmt)
{

    // Set the OUTPUT type.  Looks like we're all connected!
    if (direction == PINDIR_OUTPUT) {

	// Please call me if this goes off. - DannyMi
	ASSERT(!m_fStreaming);

        DbgLog((LOG_TRACE,2,TEXT("***::SetMediaType (output)")));
        DbgLog((LOG_TRACE,2,TEXT("Output type is: biComp=%lx biBitCount=%d")
		,HEADER(pmt->Format())->biCompression
		,HEADER(pmt->Format())->biBitCount));

	// we may not be using the compressor from m_compvars, if somebody
	// did a ConnectWithMediaType on us.  We need to get info about this
	// media type and m_phInstance and fill in m_compvars so that from now on
	// we use the right info.
        ASSERT(m_phInstance);
        m_compvars.cbSize = sizeof(m_compvars);
        m_compvars.dwFlags = ICMF_COMPVARS_VALID;

        ICINFO icinfo;
        DWORD dwGetInfoResult = 0;
        __try
        {
        dwGetInfoResult = GetInfo(m_phInstance, &icinfo, sizeof(ICINFO));
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            // return failure
            return E_FAIL;
        }

        // check result
	if (dwGetInfoResult  > 0)
	{
	    if (m_compvars.fccHandler != icinfo.fccHandler) {
		// different compressor? don't use old state!
		m_compvars.lpState = NULL;
		m_compvars.cbState = 0;
	    }
            m_compvars.fccHandler = icinfo.fccHandler;
            DbgLog((LOG_TRACE,2,TEXT("New fccHandler = %08x"),
					icinfo.fccHandler));
	} else {
	    m_compvars.lpState = NULL;
	    m_compvars.cbState = 0;
	}
        m_compvars.lDataRate = ((VIDEOINFOHEADER *)pmt->Format())->dwBitRate /
								8192;
	// We will leave Quality and Keyframe settings as is

	// !!! If we connect 8 bit on our input and then try to connect 
	// our output with a type that needs 24 bit on our input we don't
	// reconnect the input! We will FAIL!  We need to do like ACMWRAP
	// and override the output pin's CheckMediaType to accept something
	// if the input can be reconnected to allow it, and we need to do
	// that reconnect here.

        LPBITMAPINFOHEADER lpbi = HEADER((VIDEOINFOHEADER *)pmt->Format());

	return NOERROR;
    }

    ASSERT(direction == PINDIR_INPUT);

    // Please call me if this goes off. - DannyMi
    ASSERT(!m_fStreaming);

    DbgLog((LOG_TRACE,2,TEXT("***::SetMediaType (input)")));
    DbgLog((LOG_TRACE,2,TEXT("Input type is: biComp=%lx biBitCount=%d"),
		HEADER(m_pInput->CurrentMediaType().Format())->biCompression,
		HEADER(m_pInput->CurrentMediaType().Format())->biBitCount));

    if (m_pOutput && m_pOutput->IsConnected()) {
        DbgLog((LOG_TRACE,2,TEXT("***Changing IN when OUT already connected")));
	// This might fail!
	// !!! only necessary if we accepted something we can't transform
	// return ((CMJPGOutputPin *)m_pOutput)->Reconnect();
    }

    return NOERROR;
}


// Return our preferred output media types (in order)
// remember that we do not need to support all of these formats -
// if one is considered potentially suitable, our CheckTransform method
// will be called to check if it is acceptable right now.
// Remember that the enumerator calling this will stop enumeration as soon as
// it receives a S_FALSE return.

HRESULT CMJPGEnc::GetMediaType(int iPosition,CMediaType *pmt)
{
    LARGE_INTEGER li;
    CMediaType cmt, Outcmt;
    FOURCCMap fccHandler;

    DbgLog((LOG_TRACE,2,TEXT("*::GetMediaType #%d"), iPosition));

    if (pmt == NULL) {
        DbgLog((LOG_TRACE,2,TEXT("Media Type is NULL, no can do")));
	return E_POINTER;
    }

    // Output choices depend on the input connected
    // This is pointless!  We'll never get here if not connected
    if (!m_pInput->CurrentMediaType().IsValid()) {
        DbgLog((LOG_TRACE,2,TEXT("No input type set yet, no can do")));
	return VFW_E_NOT_CONNECTED;
    }

    if (iPosition < 0) {
        return E_INVALIDARG;
    }

    // Give our compressed format
    if (iPosition == 0) {

	cmt = m_pInput->CurrentMediaType();

	// somebody told us what format to use.  We should only offer that one
 	if (m_fOfferSetFormatOnly) 
	{
            DbgLog((LOG_TRACE,2,TEXT("Giving Media Type from ::SetFormat")));

	    //Output formate
            *pmt = m_cmt;

	    ASSERT(m_phInstance);
            __try
            {
	    if( ICERR_OK ==CompressQuery(m_phInstance, HEADER(cmt.Format()),
				(JPEGBITMAPINFOHEADER *)HEADER(pmt->Format())) ) 
		return NOERROR;
	    else
		return E_FAIL;
            }
            __except(Exception_Filter(GetExceptionCode()))
            {
                DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                // handling code
                return E_FAIL;
            }
	}

	// We offer one compressed type - the same as the input type, but
 	// with the compressor chosen in the properties's default output format
        DbgLog((LOG_TRACE,2,TEXT("Giving Media Type 0: default codec out")));
	ASSERT(m_phInstance);

	cmt = m_pInput->CurrentMediaType();
	JPEGBITMAPINFOHEADER jpegbiOut;
	DWORD_PTR err = 0;
        __try
        {
	err=CompressGetFormat(m_phInstance, HEADER(cmt.Format()), &jpegbiOut);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	if (err != ICERR_OK) {
	    DbgLog((LOG_TRACE,3,TEXT("compressor rejected this transform")));
	    return E_FAIL;
	}

	ULONG cb = sizeof(VIDEOINFOHEADER);
	    
	// !!! this is the wrong amount of extra biSize we use, but I'm scared
        // to fix it, it could break something
        // should be cb += jpegbiOut.bitMap.biSize - sizeof(BITMAPINFOHEADER)
	cb += SIZE_PREHEADER;

	VIDEOINFOHEADER *pf = (VIDEOINFOHEADER *) Outcmt.AllocFormatBuffer(cb);

	if (pf == NULL) {
	    DbgLog((LOG_ERROR,1,TEXT("Error allocating format buffer")));
	    Close(m_phInstance);
        return E_OUTOFMEMORY;
	}

	ZeroMemory(pf, sizeof(BITMAPINFOHEADER) + SIZE_PREHEADER);
	CopyMemory(&(pf->bmiHeader),&jpegbiOut.bitMap, sizeof(BITMAPINFOHEADER));
        // this is wrong!!! biSize is 0x44 for our format, but the code breaks
        // if we tell the truth (can't connect to our own decoder)
	HEADER(pf)->biSize  = sizeof(BITMAPINFOHEADER);
	 
	// use the frame rate of the incoming video
	pf->AvgTimePerFrame = ((VIDEOINFOHEADER *)
	m_pInput->CurrentMediaType().pbFormat)->AvgTimePerFrame;

	li.QuadPart = pf->AvgTimePerFrame;
	// use the data rate we've been told to make.  If we aren't going to
	// make the compressor use a specific rate, find out what it's going
	// to do anyway.
	if (m_compvars.lDataRate)
	    pf->dwBitRate = m_compvars.lDataRate * 8192;
	else if (li.LowPart)
	    pf->dwBitRate = MulDiv(pf->bmiHeader.biSizeImage, 80000000,
								li.LowPart);
	pf->dwBitErrorRate = 0L;

	DbgLog((LOG_TRACE,3,TEXT("Returning biComp: %lx biBitCount: %d"),
		    HEADER(cmt.Format())->biCompression,
		    HEADER(cmt.Format())->biBitCount));

	Outcmt.SetType(&MEDIATYPE_Video);
	Outcmt.SetSubtype(&MEDIASUBTYPE_MJPG);
	Outcmt.SetTemporalCompression(m_compvars.lKey != 1);
	Outcmt.SetFormatType(&FORMAT_VideoInfo);
	Outcmt.SetTemporalCompression(TRUE);
	Outcmt.SetVariableSize();

	*pmt = Outcmt;

        //debug
        LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());


	return NOERROR;

    } else {
        return VFW_S_NO_MORE_ITEMS;
    }
}


// called from CBaseOutputPin to prepare the allocator's count
// of buffers and sizes
HRESULT CMJPGEnc::DecideBufferSize(IMemAllocator * pAllocator,
                                 ALLOCATOR_PROPERTIES *pProperties)
{
    // David assures me this won't be called with NULL output mt.
    ASSERT(m_pOutput->CurrentMediaType().IsValid());
    ASSERT(pAllocator);
    ASSERT(pProperties);
    ASSERT(m_phInstance);

    // set the size of buffers based on the expected output frame size, and
    // the count of buffers to 1.

    pProperties->cBuffers = 1;

    pProperties->cbBuffer = m_pOutput->CurrentMediaType().GetSampleSize();

    // Variable sized? the answer is in biSizeImage
    if (pProperties->cbBuffer == 0) {

	LPBITMAPINFOHEADER lpbi=HEADER(m_pOutput->CurrentMediaType().Format());
	pProperties->cbBuffer= lpbi->biSizeImage;
        if (pProperties->cbBuffer <= 0) {
	    DbgLog((LOG_ERROR,1,TEXT("do not have image size")));
	    return E_INVALIDARG;
	}
    }

    DbgLog((LOG_TRACE,1,TEXT("*::DecideBufferSize - size is %ld"), pProperties->cbBuffer));

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAllocator->SetProperties(pProperties, &Actual);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error in SetProperties")));
	return hr;
    }

    if (Actual.cbBuffer < pProperties->cbBuffer) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - buffer too small")));
	return E_INVALIDARG;
    }

    // we must get exactly one buffer, since the temporal compression assumes
    // that the previous decompressed frame is already present in the output
    // buffer. The alternative is to copy the bits from a saved location before
    // doing the decompression, but that is not nice.
    if (Actual.cBuffers != 1) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - need exactly 1 buffer")));
	return E_INVALIDARG;
    }

    return S_OK;
}

HRESULT CMJPGEnc::StartStreaming()
{
    DbgLog((LOG_TRACE,1,TEXT("*::StartStreaming")));

    // We have a driver dialog up that is about to change the capture settings.
    // Now is NOT a good time to start streaming.
    if (m_fDialogUp) {
        DbgLog((LOG_TRACE,1,TEXT("*::StartStreaming - Dialog up. SORRY!")));
	return E_UNEXPECTED;
    }

    if (!m_fStreaming) {

	//since MJPEG's SetState does nothing. i take it out
	// if (m_lpState)
	//    ICSetState(m_phInstance, m_lpState, m_cbState);

	// Start Streaming Compression
	ICINFO icinfo;
        DWORD_PTR err = 0;
        __try
        {
	err = CompressBegin(m_phInstance,
				HEADER(m_pInput->CurrentMediaType().Format()),
		    		HEADER(m_pOutput->CurrentMediaType().Format()));
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	if (ICERR_OK == err) {

	    // Reset streaming frame # count
	    m_lFrameCount = 0;

	    // Use defaults
	    if (m_compvars.lKey < 0)
		// *X* MJPEG codec dees not support this compression Messages
	    	//m_compvars.lKey = ICGetDefaultKeyFrameRate(m_phInstance);
		m_compvars.lKey=AM_MJPEG_DEFAULTKEYFRAMERATE;

	    // use defaults
	    //if (m_compvars.lQ == ICQUALITY_DEFAULT)
	   //	m_compvars.lQ = GetDefaultQuality(m_phInstance);

	    // Make sure first frame we make will be a keyframe, no matter how
	    // often key frames might be requested.
	    m_nKeyCount = 1000000;

 	    // Figure out how big each frame needs to be based on the data rate
	    // and fps of the movie.  Don't overflow!
    	    LONGLONG time = ((VIDEOINFOHEADER *)
			(m_pInput->CurrentMediaType().Format()))->AvgTimePerFrame;
    	    DWORD fps = time ? DWORD(UNITS * (LONGLONG)1000 / time) : 1000;
    	    m_dwSizePerFrame = DWORD(LONGLONG(m_compvars.lDataRate) *
				1024 * 1000 / fps);
    	    DbgLog((LOG_TRACE,2,TEXT("Making each frame %d bytes big"),
				m_dwSizePerFrame));

	    // We'll need a previous buffer for compression if not every
	    // frame is a keyframe, and the compressor does temporal
	    // compression and needs such a buffer
            DWORD dwGetInfoResult = 0;
            __try
            {
            dwGetInfoResult = GetInfo(m_phInstance, &icinfo, sizeof(icinfo));
            }
            __except(Exception_Filter(GetExceptionCode()))
            {
                DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                // handling code
                return E_FAIL;
            }

	    if (dwGetInfoResult) {

		if (!(icinfo.dwFlags & VIDCF_CRUNCH))
		    m_compvars.lDataRate = 0;	// we can't crunch

	        // Now prepare the decompressor for the previous bits
	        if (m_compvars.lKey != 1 &&
				(icinfo.dwFlags & VIDCF_TEMPORAL) &&
				!(icinfo.dwFlags & VIDCF_FASTTEMPORALC)) {

		    // allocate a previous header of the proper size
		    DWORD dw = sizeof(BITMAPINFOHEADER);

		    m_lpbiPrev = (LPBITMAPINFOHEADER)GlobalAllocPtr(
							GMEM_MOVEABLE, dw);
		    if (!m_lpbiPrev) {
                        DbgLog((LOG_ERROR,1,TEXT("Error allocating previous bih")));
		        return E_OUTOFMEMORY;
		    }

		    // Ask the compressor what format to decompress back to...
		    // it's not necessarily the same as what it compressed from-
		    // the size may change
                    __try
                    {
		    dw = DecompressGetFormat(m_phInstance,
			HEADER(m_pOutput->CurrentMediaType().Format()),
			m_lpbiPrev);
                    }
                    __except(Exception_Filter(GetExceptionCode()))
                    {
                        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                        // handling code
		        GlobalFreePtr(m_lpbiPrev);
		        m_lpbiPrev = NULL;
                        return E_FAIL;
                    }
		    if ((LONG) dw < 0) {
		        GlobalFreePtr(m_lpbiPrev);
		        m_lpbiPrev = NULL;
                        DbgLog((LOG_ERROR,1,TEXT("Error in ICDecompressGetFormat")));
		        return E_FAIL;
		    }

		    if (m_lpbiPrev->biSizeImage == 0)
	    	        m_lpbiPrev->biSizeImage = DIBSIZE(*m_lpbiPrev);

		    // allocate enough space for a decompressed image
		    m_lpBitsPrev = GlobalAllocPtr(GMEM_MOVEABLE,
						m_lpbiPrev->biSizeImage);
		    if (m_lpBitsPrev == NULL) {
		        GlobalFreePtr(m_lpbiPrev);
		        m_lpbiPrev = NULL;
                        DbgLog((LOG_ERROR,1,TEXT("Error reallocating BitsPrev")));
		        return E_OUTOFMEMORY;
		    }

                    __try
                    {
                        dw = DecompressBegin(m_phInstance,
			                    HEADER(m_pOutput->CurrentMediaType().Format()),
			                    m_lpbiPrev);
                    }
                    __except(Exception_Filter(GetExceptionCode()))
                    {
                        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                        // handling code
		        GlobalFreePtr(m_lpBitsPrev);
		        GlobalFreePtr(m_lpbiPrev);
		        m_lpBitsPrev = NULL;
		        m_lpbiPrev = NULL;
                        return E_FAIL;
                    }
		    if (ICERR_OK != dw) {
		        GlobalFreePtr(m_lpBitsPrev);
		        GlobalFreePtr(m_lpbiPrev);
		        m_lpBitsPrev = NULL;
		        m_lpbiPrev = NULL;
                        DbgLog((LOG_ERROR,1,TEXT("Error in ICDecompressBegin")));
		        return E_FAIL;
		    }
		}
	    } else {

		DbgLog((LOG_ERROR,1,TEXT("Error in ICGetInfo")));
		return E_FAIL;
	    }

	    // OK, everything worked.
	    m_fStreaming = TRUE;

	} else {
            DbgLog((LOG_ERROR,1,TEXT("Error in CompressBegin")));
	    return E_FAIL;
	}  //if (ICERR_OK == err)
    }  //if(!n_fStreaming

    return NOERROR;
}

HRESULT CMJPGEnc::StopStreaming()
{
    DbgLog((LOG_TRACE,1,TEXT("*::StopStreaming")));

    if (m_fStreaming) {
	ASSERT(m_phInstance);

	if (m_fInICCompress)
    	    DbgLog((LOG_TRACE,1,TEXT("***** ACK! Still compressing!")));
	while (m_fInICCompress);	// !!!

        __try
        {
	CompressEnd(m_phInstance);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	m_fStreaming = FALSE;
	if (m_lpBitsPrev) {
            __try
            {
	    DecompressEnd(m_phInstance);
            }
            __except(Exception_Filter(GetExceptionCode()))
            {
                DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                // handling code
                // clean up
                GlobalFreePtr(m_lpBitsPrev);
	        GlobalFreePtr(m_lpbiPrev);
	        m_lpbiPrev = NULL;
	        m_lpBitsPrev = NULL;
                return E_FAIL;
            }
	    GlobalFreePtr(m_lpBitsPrev);
	    GlobalFreePtr(m_lpbiPrev);
	    m_lpbiPrev = NULL;
	    m_lpBitsPrev = NULL;
	}
    }
    return NOERROR;
}

DWORD CMJPGEnc::GetICInfo (ICINFO *picinfo)
{
    CheckPointer(picinfo, E_POINTER);

    DWORD dwGetInfoResult = 0;
    __try
    {
    dwGetInfoResult = GetInfo (NULL, picinfo, sizeof(ICINFO));
    }
    __except(Exception_Filter(GetExceptionCode()))
    {
        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
        // handling code
        return E_FAIL;
    }

    return dwGetInfoResult;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\decode\mjpeg.h ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

#ifndef _MJPEG_H_
#define _MJPEG_H_

#include "..\pmjpeg32\jpeglib.h"
#include "..\pmjpeg32\MJpegLib.h"

extern const AMOVIESETUP_FILTER sudMjpegDec;

//
// Prototype NDM wrapper for old video codecs
//


class CMjpegDec : public CVideoTransformFilter  
{
public:

    CMjpegDec(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CMjpegDec();

    DECLARE_IUNKNOWN

    // override to create an output pin of our derived class
    CBasePin *GetPin(int n);

    HRESULT Transform(IMediaSample * pIn, IMediaSample * pOut);

    // check if you can support mtIn
    HRESULT CheckInputType(const CMediaType* mtIn);

    // check if you can support the transform from this input to
    // this output
    HRESULT CheckTransform(
                const CMediaType* mtIn,
                const CMediaType* mtOut);

    // called from CBaseOutputPin to prepare the allocator's count
    // of buffers and sizes
    HRESULT DecideBufferSize(IMemAllocator * pAllocator,
                             ALLOCATOR_PROPERTIES *pProperties);

    // optional overrides - we want to know when streaming starts
    // and stops
    HRESULT StartStreaming();
    HRESULT StopStreaming();

    // overriden to know when the media type is set
    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt);

    // overriden to suggest OUTPUT pin media types
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);

private:
    PINSTINFO m_phInstance;		// current codec

    BOOL m_fTemporal;	// codec needs one read-only buffer because it
			// needs the previous frame bits undisturbed

    // the fourCC used to open m_hic
    FOURCC m_FourCCIn;

    // have we called ICDecompressBegin ?
    BOOL m_fStreaming;

    // do we need to give a format change to the renderer?
    BOOL m_fPassFormatChange;
 

    friend class CMJPGDecOutputPin;

#ifdef _X86_
    //  HACK HACK for exception handling on win95
    HANDLE m_hhpShared;
    PVOID  m_pvShared;
#endif // _X86_
};

// override the output pin class to do our own decide allocator
class CMJPGDecOutputPin : public CTransformOutputPin
{
public:

    DECLARE_IUNKNOWN

    CMJPGDecOutputPin(TCHAR *pObjectName, CTransformFilter *pTransformFilter,
        				HRESULT * phr, LPCWSTR pName) :
        CTransformOutputPin(pObjectName, pTransformFilter, phr, pName) {};

    ~CMJPGDecOutputPin() {};

    HRESULT DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc);
};

#endif // #ifndef _MJPEG_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\decode\mjpeg.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

//
// Prototype wrapper for old video decompressors
//


#include <streams.h>
#include <windowsx.h>
#include <mmreg.h>
#include <vfw.h>

#ifdef FILTER_DLL
//#include <vfw.h>
// define the GUIDs for streams and my CLSID in this file
#include <initguid.h>
#endif

#include "mjpeg.h"
#include "safeseh.h"

// you can never have too many parentheses!
#define ABS(x) (((x) > 0) ? (x) : -(x))

// how to build an explicit FOURCC
#define FCC(ch4) ((((DWORD)(ch4) & 0xFF) << 24) |     \
                  (((DWORD)(ch4) & 0xFF00) << 8) |    \
                  (((DWORD)(ch4) & 0xFF0000) >> 8) |  \
                  (((DWORD)(ch4) & 0xFF000000) >> 24))

// setup data
const AMOVIESETUP_MEDIATYPE
subMjpegDecTypeIn = { &MEDIATYPE_Video      // clsMajorType
                , &MEDIASUBTYPE_MJPG }; // clsMinorType

const AMOVIESETUP_MEDIATYPE
subMjpegDecTypeOut = { &MEDIATYPE_Video      // clsMajorType
                , &MEDIASUBTYPE_NULL }; // clsMinorType

const AMOVIESETUP_PIN
psubMjpegDecPins[] = { { L"Input"             // strName
                     , FALSE                // bRendered
                     , FALSE                // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Output"            // strConnectsToPin
                     , 1                    // nTypes
                     , &subMjpegDecTypeIn }     // lpTypes
                   , { L"Output"            // strName
                     , FALSE                // bRendered
                     , TRUE                 // bOutput
                     , FALSE                // bZero
                     , FALSE                // bMany
                     , &CLSID_NULL          // clsConnectsToFilter
                     , L"Input"             // strConnectsToPin
                     , 1                    // nTypes
                     , &subMjpegDecTypeOut } };  // lpTypes

const AMOVIESETUP_FILTER
sudMjpegDec = { &CLSID_MjpegDec         // clsID
            , L"MJPEG Decompressor"   // strName
            , MERIT_NORMAL          // dwMerit
            , 2                     // nPins
            , psubMjpegDecPins };     // lpPin

#ifdef FILTER_DLL
// list of class ids and creator functions for class factory
CFactoryTemplate g_Templates[] = {
    { L"MJPEG Decompressor"
    , &CLSID_MjpegDec
    , CMjpegDec::CreateInstance
    , NULL
    , &sudMjpegDec }
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

// exported entry points for registration and
// unregistration (in this case they only call
// through to default implmentations).
//
STDAPI DllRegisterServer()
{
  return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
  return AMovieDllRegisterServer2( FALSE );
}
#endif


//------------------------------------------------------
// Local functions for exception handling
//------------------------------------------------------
static int
Exception_Filter(DWORD dwExceptionCode)
{
    if(dwExceptionCode == MJPEG_ERROREXIT_EXCEPTION)
    {
        DbgLog((LOG_TRACE,1,TEXT("Decode EXCEPTION:: PMJPEG32 threw a known ERROR EXIT exception")));
        return EXCEPTION_EXECUTE_HANDLER;
    }
    else
    {
        DbgLog((LOG_TRACE,1,TEXT("Decode EXCEPTION:: PMJPEG32 threw an unknown exception")));
        return EXCEPTION_CONTINUE_SEARCH;
    }

}


// --- CMjpegDec ----------------------------------------

CMjpegDec::CMjpegDec(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
    : CVideoTransformFilter(pName, pUnk, CLSID_MjpegDec),
      m_phInstance(NULL),
      m_FourCCIn(0),
      m_fStreaming(FALSE),
      m_fPassFormatChange(FALSE)
#ifdef _X86_
      ,
      m_hhpShared(NULL)
#endif
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the MJPEG DEC filter")));

#ifdef PERF
    m_idSkip = MSR_REGISTER(TEXT("MJPEG Decoder Skip frame"));
    m_idLate = MSR_REGISTER(TEXT("MJPEG Decoder late"));
    m_idFrameType = MSR_REGISTER(TEXT("MJPEG Frame type (1=Key)"));
#endif

    m_bNoSkip = GetProfileInt(TEXT("Quartz"), TEXT("MJPEGNoSkip"), 0);

    // return good error code
    *phr = NOERROR;
}


CMjpegDec::~CMjpegDec()
{
    if (m_phInstance)
    {
        __try
        {
	Close(m_phInstance);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
        }
    }

    DbgLog((LOG_TRACE,1,TEXT("*Destroying the MJPEG DEC filter")));
}



// this goes in the factory template table to create new instances
CUnknown * CMjpegDec::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CMjpegDec(TEXT("MJPEG decompression filter"), pUnk, phr);
}



HRESULT CMjpegDec::Transform(IMediaSample * pIn, IMediaSample * pOut)
{
    DWORD_PTR err = 0;
    FOURCCMap fccOut;
    CMediaType *pmtIn;

    DbgLog((LOG_TRACE,6,TEXT("*::Transform")));

    // codec not open ?
    if (m_phInstance==NULL) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, no codec open")));
	return E_UNEXPECTED;
    }

    if (pIn == NULL || pOut == NULL) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, NULL arguments")));
	return E_UNEXPECTED;
    }

    // we haven't started streaming yet?
    if (!m_fStreaming) {
        DbgLog((LOG_ERROR,1,TEXT("Can't transform, not streaming")));
	return E_UNEXPECTED;
    }

    // make sure we have valid input and output pointers
    BYTE * pSrc;
    HRESULT hr = pIn->GetPointer(&pSrc);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting input sample data")));
	return hr;
    }

    BYTE * pDst;
    hr = pOut->GetPointer(&pDst);
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Error getting output sample data")));
	return hr;
    }

    LPBITMAPINFOHEADER lpbiSrc = HEADER(m_pInput->CurrentMediaType().Format());
    LPBITMAPINFOHEADER lpbiDst = HEADER(m_pOutput->CurrentMediaType().Format());

    // ICDecompress needs this to be the actual size of this frame, but
    // we can't go changing this for good, so we'll put it back later
    DWORD biSizeImageOld = lpbiSrc->biSizeImage;
    lpbiSrc->biSizeImage = pIn->GetActualDataLength();

    // we just received a format change from the source. So we better notify
    // the guy downstream of the format change
    pIn->GetMediaType((AM_MEDIA_TYPE **)&pmtIn);
    // sometimes we don't end up passing anything to the renderer (eg preroll)
    // so once we notice a format change we will keep trying to pass it to
    // the renderer until we succeed.  Don't waste time trying if we KNOW we're
    // not going to do it.
    if (pmtIn != NULL && pmtIn->Format() != NULL)
	m_fPassFormatChange = TRUE;
    DeleteMediaType(pmtIn);

    if (m_fPassFormatChange && pIn->IsPreroll() != S_OK &&
        				pIn->GetActualDataLength() > 0) {
	CMediaType cmt;
	CopyMediaType((AM_MEDIA_TYPE *)&cmt, &m_pOutput->CurrentMediaType());
        LPBITMAPINFOHEADER lpbi = HEADER(cmt.Format());
	// we do not support 8 bits
    }


    BOOL dwFlags = 0;
    if (pIn->IsPreroll() == S_OK) {
	DbgLog((LOG_TRACE,6,TEXT("This is a preroll")));
	dwFlags |= ICDECOMPRESS_PREROLL;
    }

    if (pIn->GetActualDataLength() <= 0) {
	DbgLog((LOG_TRACE,6,TEXT("This is a NULL frame")));
	dwFlags |= ICDECOMPRESS_NULLFRAME;
    }

    if(pIn->IsSyncPoint() == S_OK) {
	DbgLog((LOG_TRACE,6,TEXT("This is a keyframe")));
    } else {
        dwFlags |= ICDECOMPRESS_NOTKEYFRAME;
    }

//      PLEASE don't ever send this flag to a codec! Some codecs take this as
//      a hint to speed up, unfortunately others are slightly less clever and
//      all they do when told to speed up is to send the same frame over and
//      over again! Which in turn means that bugs get raised against me for
//      random reasons such as when the window is being blown up full screen
//	!!! well, we should do this SOMETIMES, shouldn't we?
//
//        if (m_itrLate>0) {
//            dwFlags |= ICDECOMPRESS_HURRYUP;    // might help - who knows?
//        }

	RECT& rcS3 = ((VIDEOINFOHEADER *)(m_pOutput->CurrentMediaType().Format()))->rcSource;
	RECT& rcT3 = ((VIDEOINFOHEADER *)(m_pOutput->CurrentMediaType().Format()))->rcTarget;

#ifdef _X86_
        //  Fix the exception handling for win95
        BOOL bPatchedExceptions = m_hhpShared != NULL && BeginScarySEH(m_pvShared);
#endif // _X86_
__try {
            DbgLog((LOG_TRACE,5,TEXT("Calling ICDecompress")));
	    ICDECOMPRESS Icdec;
	    Icdec.dwFlags =dwFlags;
	    Icdec.lpbiInput = lpbiSrc;
	    Icdec.lpInput= pSrc;
	    Icdec.lpbiOutput=lpbiDst;
	    Icdec.lpOutput=pDst;

            err =  Decompress(m_phInstance, &Icdec, 0);

} __except(Exception_Filter(GetExceptionCode())) {
	// codecs will GPF on corrupt data.  Best to not draw it instead
        DbgLog((LOG_ERROR,1,TEXT("Decompressor faulted! Recovering...")));
        //DbgBreak("Decompressor faulted! Recovering...");
	err = ICERR_DONTDRAW;
}

    // now put this back, or it'll shrink until we only decode part of each frm
    lpbiSrc->biSizeImage = biSizeImageOld;

#ifdef _X86_
    if (bPatchedExceptions)
    {
	EndScarySEH(m_pvShared);
    }
#endif // _X86_
    if ((LONG_PTR)err < 0)
    {
        DbgLog((LOG_ERROR,1,TEXT("Error in ICDecompress(Ex)")));
        return E_FAIL;
    }


    // decompressed frames are always key
    pOut->SetSyncPoint(TRUE);

    // Check if this is preroll to get from keyframe to the current frame,
    // or a null frame, or if the decompressor doesn't want this frame drawn.
    // If so, we want to decompress it into the output buffer but not
    // deliver it.  Returning S_FALSE tells the base class not to deliver
    // this sample.
    if (pIn->IsPreroll() == S_OK || err == ICERR_DONTDRAW ||
       				pIn->GetActualDataLength() <= 0)
    {

        DbgLog((LOG_TRACE,5,TEXT("don't pass this to renderer")));
	return S_FALSE;
    }

    pOut->SetActualDataLength(lpbiDst->biSizeImage);

    // If there's a pending format change to pass to the renderer, we are now
    // doing it
    m_fPassFormatChange = FALSE;

    return S_OK;
}

// X*
// check if you can support mtIn
// X*
HRESULT CMjpegDec::CheckInputType(const CMediaType* pmtIn)
{
    FOURCCMap fccHandlerIn;
    PINSTINFO ph;
    BOOL fLoadDLL = FALSE;

    DbgLog((LOG_TRACE,3,TEXT("*::CheckInputType")));

    if (pmtIn == NULL || pmtIn->Format() == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: type/format is NULL")));
	return E_INVALIDARG;
    }

    // we only support MEDIATYPE_Video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: not VIDEO")));
	return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: format not VIDINFO")));
        return E_INVALIDARG;
    }

    // X* check FOURCC
    fccHandlerIn.SetFOURCC(pmtIn->Subtype());
    if( ( fccHandlerIn != *pmtIn->Subtype() )
    || ( MEDIASUBTYPE_MJPG !=*pmtIn->Subtype() )
	)
    {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: subtype not a FOURCC or MJPEG")));
	return E_INVALIDARG;
    }
    DbgLog((LOG_TRACE,3,TEXT("Checking fccType: %lx biCompression: %lx"),
		fccHandlerIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression));

    // We are a decompressor only - reject anything uncompressed.
    // Conversions between RGB types is done by COLOUR.DLL
    if (HEADER(pmtIn->Format())->biCompression == BI_BITFIELDS ||
    	HEADER(pmtIn->Format())->biCompression == BI_RGB)
    {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: This is uncompressed already!")));
	return E_INVALIDARG;
    }

    // look for a decompressor
    if (fccHandlerIn.GetFOURCC() != m_FourCCIn)
    {
        DbgLog((LOG_TRACE,4,TEXT("loading a MJPEG decompressor")));

	ICINFO icinfo;

        __try
        {
        // Pmjpeg32 may throw exception
	GetInfo (NULL, &icinfo, sizeof(ICINFO));
	ph=Open (&icinfo);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	if (ph)
	  fLoadDLL = TRUE;
    } else
    {
        DbgLog((LOG_TRACE,4,TEXT("using a cached MJPEG decompressor")));
   	ph = m_phInstance;
    }

    if (ph==NULL)
    {
        DbgLog((LOG_ERROR,1,TEXT("Error: Can't open a MJPEG decompressor")));
	return VFW_E_NO_DECOMPRESSOR;
    } else
    {

//*X*
        LPBITMAPINFOHEADER lpbi = HEADER((VIDEOINFOHEADER *)pmtIn->Format());

        __try
        {
	if( ICERR_BADFORMAT==DecompressQuery (ph, (JPEGBITMAPINFOHEADER *)HEADER(pmtIn->Format()), NULL) )
	{

            DbgLog((LOG_ERROR,1,TEXT("Error: MJPEG Decompressor rejected format")));
	    if (fLoadDLL)
            {
                __try
                {
	        Close(ph);
                }
                __except(Exception_Filter(GetExceptionCode()))
                {
                    DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                    return E_FAIL;
                }
            }
	    return VFW_E_TYPE_NOT_ACCEPTED;
	}
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // clean up
            __try
            {
            if(fLoadDLL)
            {
                Close(ph);
            }
            }
            __except(Exception_Filter(GetExceptionCode()))
            {
                // just fall through
            }
            // handling code
            return E_FAIL;
        }


//*X*/
	// remember this hic to save time if asked again, if it won't
	// interfere with an existing connection.  If a connection is
	// broken, we will remember the next hic.
	if (!m_pInput->IsConnected())
        {
            DbgLog((LOG_TRACE,4,TEXT("caching this decompressor")));
	    if (fLoadDLL && m_phInstance)
            {
                __try
                {
		Close(ph);
                }
                __except(Exception_Filter(GetExceptionCode()))
                {
                    DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                    return E_FAIL;
                }
            }
	    m_phInstance = ph;
	    m_FourCCIn = fccHandlerIn.GetFOURCC();
	}
        else if (fLoadDLL)
        {
            DbgLog((LOG_TRACE,4,TEXT("not caching MJPEG decompressor - we're connected")));
            __try
            {
	    Close(ph);;
            }
            __except(Exception_Filter(GetExceptionCode()))
            {
                DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
                return E_FAIL;
            }
	}
    }

    return NOERROR;
}


// check if you can support the transform from this input to this output

HRESULT CMjpegDec::CheckTransform(const CMediaType* pmtIn,
                                const CMediaType* pmtOut)
{
    PINSTINFO ph = NULL;
    FOURCCMap fccIn;
    FOURCCMap fccOut;
    DWORD_PTR err;
    BOOL      fLoadDLL = FALSE;

    DbgLog((LOG_TRACE,3,TEXT("*::CheckTransform")));

    if (pmtIn == NULL || pmtOut == NULL || pmtIn->Format() == NULL ||
				pmtOut->Format() == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: type/format is NULL")));
	return E_INVALIDARG;
    }

    // we can't convert between toplevel types.
    if (*pmtIn->Type() != *pmtOut->Type()) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: types don't match")));
	return E_INVALIDARG;
    }

    // and we only accept video
    if (*pmtIn->Type() != MEDIATYPE_Video) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: type not VIDEO")));
	return E_INVALIDARG;
    }

    // check this is a VIDEOINFOHEADER type
    if (*pmtOut->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: output format type not VIDINFO")));
        return E_INVALIDARG;
    }
    if (*pmtIn->FormatType() != FORMAT_VideoInfo) {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: input format type not VIDINFO")));
        return E_INVALIDARG;
    }

    fccIn.SetFOURCC(pmtIn->Subtype());
    if ( (fccIn != *pmtIn->Subtype())
	 ||  (MEDIASUBTYPE_MJPG !=*pmtIn->Subtype() )
	)
    {
        DbgLog((LOG_TRACE,3,TEXT("Rejecting: input subtype not a FOURCC or MJPEG")));
	return E_INVALIDARG;
    }

    ASSERT(pmtOut->Format());

    RECT& rcS1 = ((VIDEOINFOHEADER *)(pmtOut->Format()))->rcSource;
    RECT& rcT1 = ((VIDEOINFOHEADER *)(pmtOut->Format()))->rcTarget;

    LPBITMAPINFOHEADER lpbi = HEADER(pmtOut->Format());
    LPBITMAPINFOHEADER lpbii = HEADER(pmtIn->Format());

    //we only support 16,24, and 32
    if( (  (HEADER(pmtOut->Format())->biCompression == BI_RGB)
        &&(   (HEADER(pmtOut->Format())->biBitCount ==16)
	   ||(HEADER(pmtOut->Format())->biBitCount ==24)
	   ||(HEADER(pmtOut->Format())->biBitCount ==32 &&
              pmtOut->subtype == MEDIASUBTYPE_RGB32)
          )
	)   ||
        (  ( HEADER(pmtOut->Format())->biCompression == BI_BITFIELDS)
         &&(HEADER(pmtOut->Format())->biBitCount ==16)
	)
      )
    {
	;
    }
    else
    {
	DbgLog((LOG_TRACE,3,TEXT("Rejecting: Decoder can not support this output format")));
	return E_INVALIDARG;
    }


    DbgLog((LOG_TRACE,3,TEXT("Check fccIn: %lx biCompIn: %lx bitDepthIn: %d"),
		fccIn.GetFOURCC(),
		HEADER(pmtIn->Format())->biCompression,
		HEADER(pmtIn->Format())->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthIn: %ld biHeightIn: %ld biSizeIn: %ld"),
		HEADER(pmtIn->Format())->biWidth,
		HEADER(pmtIn->Format())->biHeight,
		HEADER(pmtIn->Format())->biSize));
    DbgLog((LOG_TRACE,3,TEXT("fccOut: %lx biCompOut: %lx bitDepthOut: %d"),
		fccOut.GetFOURCC(),
		HEADER(pmtOut->Format())->biCompression,
		HEADER(pmtOut->Format())->biBitCount));
    DbgLog((LOG_TRACE,3,TEXT("biWidthOut: %ld biHeightOut: %ld"),
		HEADER(pmtOut->Format())->biWidth,
		HEADER(pmtOut->Format())->biHeight));
    DbgLog((LOG_TRACE,3,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		rcS1.left, rcS1.top, rcS1.right, rcS1.bottom));
    DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		rcT1.left, rcT1.top, rcT1.right, rcT1.bottom));

    // find a codec for this transform

    // I assume that we've already got a codec open
    ASSERT(m_phInstance);

    // the right codec better be open!
    // When reconnecting, we'll get called with a new input, but same output,
    // and better admit we can handle it
    if (m_FourCCIn != fccIn.GetFOURCC()) {
        DbgLog((LOG_TRACE,4,TEXT("Can not find a MJPEG decompressor")));
        ph =NULL;
	return E_FAIL;
    } else {
	// We already have the right codec open to try this transform
        DbgLog((LOG_TRACE,4,TEXT("Testing with the cached decompressor")));
	ph = m_phInstance;
    }

    if (!ph) {
        DbgLog((LOG_ERROR,1,TEXT("Error: Can't find a decompressor")));
	return E_FAIL;
    }

    __try
    {
    //check if the decompressor likes it.
    err = DecompressQuery(ph, (JPEGBITMAPINFOHEADER *)HEADER(pmtIn->Format()),
				HEADER(pmtOut->Format()));
    }
    __except(Exception_Filter(GetExceptionCode()))
    {
        DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
        // handling code
        return E_FAIL;
    }

//XXXX
//*X8
if (err != ICERR_OK) {
        DbgLog((LOG_TRACE,3,TEXT("decompressor rejected this transform")));
        return E_FAIL;
    }
//    *X*/

    return NOERROR;
}


// overriden to know when the media type is actually set

HRESULT CMjpegDec::SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt)
{
    FOURCCMap fccHandler;

    if (direction == PINDIR_OUTPUT) {

	// Please call me if this goes off. -DannyMi
	ASSERT(!m_fStreaming);

	// OK, we've finally decided on what codec to use.  See if it
	// supports temporal compression, but can't do it without needing
	// the undisturbed previous bits.  If so, then we need to use
	// 1 read only buffer on our output pin (in DecideAllocator and
	// DecideBufferSize)
	ASSERT(m_phInstance);
	ICINFO icinfo;
 	//DWORD dw = ICGetInfo(m_hic, &icinfo, sizeof(icinfo));

        DWORD dw = 0;
        __try
        {
	dw = GetInfo(NULL, &icinfo, sizeof(icinfo));
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	m_fTemporal = TRUE;	// better safe than sorry?
	if (dw > 0) {
	    m_fTemporal = (icinfo.dwFlags & VIDCF_TEMPORAL) &&
				!(icinfo.dwFlags & VIDCF_FASTTEMPORALD);
	}
        DbgLog((LOG_TRACE,3,TEXT("Temporal compressor=%d"), m_fTemporal));
        DbgLog((LOG_TRACE,3,TEXT("***::SetMediaType (output)")));
        DbgLog((LOG_TRACE,3,TEXT("Output type is: biComp=%lx biBitCount=%d"),
		HEADER(m_pOutput->CurrentMediaType().Format())->biCompression,
		HEADER(m_pOutput->CurrentMediaType().Format())->biBitCount));
#if 0
        RECT& rcS1 = ((VIDEOINFOHEADER *)(pmt->Format()))->rcSource;
        RECT& rcT1 = ((VIDEOINFOHEADER *)(pmt->Format()))->rcTarget;
        DbgLog((LOG_TRACE,3,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		rcS1.left, rcS1.top, rcS1.right, rcS1.bottom));
        DbgLog((LOG_TRACE,3,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		rcT1.left, rcT1.top, rcT1.right, rcT1.bottom));
#endif

	return NOERROR;
    }

    ASSERT(direction == PINDIR_INPUT);

    DbgLog((LOG_TRACE,3,TEXT("***::SetMediaType (input)")));
    DbgLog((LOG_TRACE,3,TEXT("Input type is: biComp=%lx biBitCount=%d"),
		HEADER(m_pInput->CurrentMediaType().Format())->biCompression,
		HEADER(m_pInput->CurrentMediaType().Format())->biBitCount));
#if 0
    RECT& rcS1 = ((VIDEOINFOHEADER *)(pmt->Format()))->rcSource;
    RECT& rcT1 = ((VIDEOINFOHEADER *)(pmt->Format()))->rcTarget;
    DbgLog((LOG_TRACE,2,TEXT("rcSrc: (%ld, %ld, %ld, %ld)"),
		rcS1.left, rcS1.top, rcS1.right, rcS1.bottom));
    DbgLog((LOG_TRACE,2,TEXT("rcDst: (%ld, %ld, %ld, %ld)"),
		rcT1.left, rcT1.top, rcT1.right, rcT1.bottom));
#endif

    // Please call me if this goes off. -DannyMi
    ASSERT(!m_fStreaming);

    // We better have one of these opened by now
    ASSERT(m_phInstance);

    // We better have the RIGHT one open
    FOURCCMap fccIn;
    fccIn.SetFOURCC(pmt->Subtype());

    ASSERT(m_FourCCIn == fccIn.GetFOURCC());

    if (m_pOutput && m_pOutput->IsConnected()) {
        DbgLog((LOG_TRACE,2,TEXT("***Changing IN when OUT already connected")));
        DbgLog((LOG_TRACE,2,TEXT("Reconnecting the output pin...")));
	// This shouldn't fail, we're not changing the media type
	m_pGraph->Reconnect(m_pOutput);
    }

    return NOERROR;
}


// Return our preferred output media types (in order)

HRESULT CMjpegDec::GetMediaType(int iPosition,CMediaType *pmt)
{
    LARGE_INTEGER li;
    FOURCCMap fccHandler;
    VIDEOINFOHEADER *pf;

    DbgLog((LOG_TRACE,3,TEXT("*::GetMediaType #%d"), iPosition));

    if (pmt == NULL) {
        DbgLog((LOG_TRACE,3,TEXT("Media type is NULL, no can do")));
	return E_INVALIDARG;
    }

    // Output choices depend on the input connected
    if (!m_pInput->CurrentMediaType().IsValid()) {
        DbgLog((LOG_TRACE,3,TEXT("No input type set yet, no can do")));
	return E_FAIL;
    }

    if (iPosition < 0) {
        return E_INVALIDARG;
    }

    // Caution: These are given out of order. be careful renumbering
    // the case statements !!!

    //
    //  the decoder only support
    //	biCompression=BI_RGB, biBitCount == 16, 24, 32
    // or biCompression == BI_BITFIELDS,biBitCount == 16
    //
    switch (iPosition) {
	
    // Offer the compressor's favourite
    // Offer 32 bpp RGB
    case 0:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 5: 32 bit RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 32;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB32);

        break;
    }
    // Offer 24 bpp RGB
    case 1:
    {
        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 6: 24 bit RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 24;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB24);

        break;
    }
    // Offer 16 bpp RGB 565 before 555
    case 2:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 7: 565 RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	if (pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER) +
							SIZE_MASKS) == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Out of memory reallocating format")));
	    return E_OUTOFMEMORY;
	}

	// update the RGB 565 bit field masks

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_BITFIELDS;
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

	DWORD *pdw = (DWORD *) (lpbi+1);
	pdw[iRED] = bits565[iRED];
	pdw[iGREEN] = bits565[iGREEN];
	pdw[iBLUE] = bits565[iBLUE];

        pmt->SetSubtype(&MEDIASUBTYPE_RGB565);

        break;
    }

    // Offer 16 bpp RGB 555
    case 3:
    {

        DbgLog((LOG_TRACE,3,TEXT("Giving Media Type 8: 555 RGB")));

	*pmt = m_pInput->CurrentMediaType();	// gets width, height, etc.
	// only offer positive heights so downstream connections aren't confused
	HEADER(pmt->Format())->biHeight = ABS(HEADER(pmt->Format())->biHeight);

	// Can't error, can only be smaller
	pmt->ReallocFormatBuffer(SIZE_PREHEADER + sizeof(BITMAPINFOHEADER));

	LPBITMAPINFOHEADER lpbi = HEADER(pmt->Format());
	lpbi->biSize = sizeof(BITMAPINFOHEADER);
	lpbi->biCompression = BI_RGB;
	lpbi->biBitCount = 16;
	lpbi->biClrUsed = 0;
	lpbi->biClrImportant = 0;
	lpbi->biSizeImage = DIBSIZE(*lpbi);

        pmt->SetSubtype(&MEDIASUBTYPE_RGB555);

        break;
    }
    default:
	return VFW_S_NO_MORE_ITEMS;

    }

    // now set the common things about the media type
    pf = (VIDEOINFOHEADER *)pmt->Format();
    pf->AvgTimePerFrame = ((VIDEOINFOHEADER *)
		m_pInput->CurrentMediaType().pbFormat)->AvgTimePerFrame;
    li.QuadPart = pf->AvgTimePerFrame;
    if (li.LowPart)
        pf->dwBitRate = MulDiv(pf->bmiHeader.biSizeImage, 80000000, li.LowPart);
    pf->dwBitErrorRate = 0L;
    pmt->SetType(&MEDIATYPE_Video);
    pmt->SetSampleSize(pf->bmiHeader.biSizeImage);
    pmt->SetFormatType(&FORMAT_VideoInfo);
    pmt->SetTemporalCompression(FALSE);

    return NOERROR;
}


// overridden to create a CMJPGDecOutputPin
// !!! base class changes won't get picked up by me
//
CBasePin * CMjpegDec::GetPin(int n)
{
    HRESULT hr = S_OK;

    // Create an input pin if necessary

    if (m_pInput == NULL)
    {

        m_pInput = new CTransformInputPin(NAME("Transform input pin"),
                                          this,              // Owner filter
                                          &hr,               // Result code
                                          L"XForm In");      // Pin name


        //  Can't fail
        ASSERT(SUCCEEDED(hr));
        if (m_pInput == NULL)
        {
            return NULL;
        }
        m_pOutput = (CTransformOutputPin *)
		   new CMJPGDecOutputPin(NAME("Transform output pin"),
                                            this,            // Owner filter
                                            &hr,             // Result code
                                            L"XForm Out");   // Pin name


        // Can't fail
        ASSERT(SUCCEEDED(hr));
        if (m_pOutput == NULL)
        {
            delete m_pInput;
            m_pInput = NULL;
        }
    }

    // Return the appropriate pin

    if (n == 0) {
        return m_pInput;
    } else
    if (n == 1) {
        return m_pOutput;
    } else {
        return NULL;
    }
}


// overridden to properly mark buffers read only or not in NotifyAllocator
// !!! base class changes won't get picked up by me
//
HRESULT CMJPGDecOutputPin::DecideAllocator(IMemInputPin *pPin, IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;

    // get downstream prop request
    // the derived class may modify this in DecideBufferSize, but
    // we assume that he will consistently modify it the same way,
    // so we only get it once
    ALLOCATOR_PROPERTIES prop;
    ZeroMemory(&prop, sizeof(prop));

    // whatever he returns, we assume prop is either all zeros
    // or he has filled it out.
    pPin->GetAllocatorRequirements(&prop);

    // if he doesn't care about alignment, then set it to 1
    if (prop.cbAlign == 0)
    {
        prop.cbAlign = 1;
    }

    /* Try the allocator provided by the input pin */

    hr = pPin->GetAllocator(ppAlloc);
    if (SUCCEEDED(hr))
    {

	hr = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hr))
        {
	    // temporal compression ==> read only buffers
	    hr = pPin->NotifyAllocator(*ppAlloc,
					((CMjpegDec *)m_pFilter)->m_fTemporal);
	    if (SUCCEEDED(hr))
            {
		return NOERROR;
	    }
	}
    }

    /* If the GetAllocator failed we may not have an interface */

    if (*ppAlloc)
    {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }

    /* Try the output pin's allocator by the same method */

    hr = InitAllocator(ppAlloc);
    if (SUCCEEDED(hr))
    {

        // note - the properties passed here are in the same
        // structure as above and may have been modified by
        // the previous call to DecideBufferSize
	hr = DecideBufferSize(*ppAlloc, &prop);
	if (SUCCEEDED(hr))
        {
	    // temporal compression ==> read only buffers
	    hr = pPin->NotifyAllocator(*ppAlloc,
					((CMjpegDec *)m_pFilter)->m_fTemporal);
	    if (SUCCEEDED(hr))
            {
		return NOERROR;
	    }
	}
    }

    /* Likewise we may not have an interface to release */

    if (*ppAlloc)
    {
	(*ppAlloc)->Release();
	*ppAlloc = NULL;
    }
    return hr;
}


// called from CBaseOutputPin to prepare the allocator's count
// of buffers and sizes
HRESULT CMjpegDec::DecideBufferSize(IMemAllocator * pAllocator,
                                  ALLOCATOR_PROPERTIES *pProperties)
{
    // DMJPEGd assures me this won't be called with NULL output mt.
    ASSERT(m_pOutput->CurrentMediaType().IsValid());
    ASSERT(pAllocator);
    ASSERT(pProperties);
    ASSERT(m_phInstance);

    // If we are doing temporal compression where we need the undisturbed
    // previous bits, we insist on 1 buffer (also our default)
    if (m_fTemporal || pProperties->cBuffers == 0)
        pProperties->cBuffers = 1;

    // set the size of buffers based on the expected output frame size
    pProperties->cbBuffer = m_pOutput->CurrentMediaType().GetSampleSize();

    ASSERT(pProperties->cbBuffer);

    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr = pAllocator->SetProperties(pProperties,&Actual);
    if (FAILED(hr))
    {
        DbgLog((LOG_ERROR,1,TEXT("Error in SetProperties")));
	return hr;
    }

    if (Actual.cbBuffer < pProperties->cbBuffer)
    {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - buffer too small")));
	return E_INVALIDARG;
    }

    // For temporal compressors, we MUST get exactly one buffer, since we assume
    // that the previous decompressed frame is already present in the output
    // buffer. The alternative is to copy the bits from a saved location before
    // doing the decompression, but that is not nice.
    if (m_fTemporal && Actual.cBuffers != 1) {
	// can't use this allocator
        DbgLog((LOG_ERROR,1,TEXT("Can't use allocator - need exactly 1 buffer")));
	return E_INVALIDARG;
    }

    DbgLog((LOG_TRACE,1,TEXT("Using %d buffers of size %d"),
					Actual.cBuffers, Actual.cbBuffer));

    return S_OK;
}


HRESULT CMjpegDec::StartStreaming()
{
    DWORD_PTR err;
    LPBITMAPINFOHEADER lpbiSrc = HEADER(m_pInput->CurrentMediaType().Format());
    LPBITMAPINFOHEADER lpbiDst = HEADER(m_pOutput->CurrentMediaType().Format());
    RECT& rcS2 = ((VIDEOINFOHEADER *)(m_pOutput->CurrentMediaType().Format()))->rcSource;
    RECT& rcT2 = ((VIDEOINFOHEADER *)(m_pOutput->CurrentMediaType().Format()))->rcTarget;

    DbgLog((LOG_TRACE,2,TEXT("*::StartStreaming")));

    if (!m_fStreaming) {

        __try
        {
	err = DecompressBegin(m_phInstance, lpbiSrc, lpbiDst);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	if (ICERR_OK == err) {
	    m_fStreaming = TRUE;
#ifdef _X86_
            // Create our exception handler heap
            ASSERT(m_hhpShared == NULL);
            if (g_osInfo.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS)
            {
               m_hhpShared = CreateFileMapping((HANDLE)0xFFFFFFFF,
                                               NULL,
                                               PAGE_READWRITE,
                                               0,
                                               20,
                                               NULL);
               if (m_hhpShared)
               {
                   m_pvShared = MapViewOfFile(m_hhpShared,
                                              FILE_MAP_WRITE,
                                              0,
                                              0,
                                              20);
                   if (m_pvShared == NULL)
                   {
                       EXECUTE_ASSERT(CloseHandle(m_hhpShared));
                       m_hhpShared = NULL;
                   }
                   else
                   {
                       DbgLog((LOG_TRACE, 1, TEXT("Shared memory at %8.8X"),
                              m_pvShared));
                   }
               }
            }
#endif // _X86_
	}
        else
        {
            DbgLog((LOG_ERROR,1,TEXT("Error %d in ICDecompress(Ex)Begin"),err));
	    return E_FAIL;
	}	
    }
    return CVideoTransformFilter::StartStreaming();
}

HRESULT CMjpegDec::StopStreaming()
{
    DbgLog((LOG_TRACE,2,TEXT("*::StopStreaming")));
    RECT& rcS2 = ((VIDEOINFOHEADER *)(m_pOutput->CurrentMediaType().Format()))->rcSource;
    RECT& rcT2 = ((VIDEOINFOHEADER *)(m_pOutput->CurrentMediaType().Format()))->rcTarget;

    if (m_fStreaming)
    {
	ASSERT(m_phInstance);

        __try
        {
	DecompressEnd(m_phInstance);
        }
        __except(Exception_Filter(GetExceptionCode()))
        {
            DbgLog((LOG_TRACE,1,TEXT("Handling PMJPEG32 Exception")));
            // handling code
            return E_FAIL;
        }

	m_fStreaming = FALSE;

#ifdef _X86_
        if (m_hhpShared)
        {
            EXECUTE_ASSERT(UnmapViewOfFile(m_pvShared));
            EXECUTE_ASSERT(CloseHandle(m_hhpShared));;
            m_hhpShared = NULL;
        }
#endif // _X86_
    }
    return NOERROR;
}
#pragma warning(disable:4514)   // inline function removed.
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\dibtable.c ===
/* Copyright (c) 1994 Paradigm Matrix.
   All Rights Reserved.
*/

/* pixel mapping table for different DIB formats */
#include <windows.h>
DWORD shiftl16bits8[256] = {
	0x00000000, 0x00010000, 0x00020000, 0x00030000, 0x00040000, 0x00050000, 0x00060000, 0x00070000, 
	0x00080000, 0x00090000, 0x000a0000, 0x000b0000, 0x000c0000, 0x000d0000, 0x000e0000, 0x000f0000, 
	0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 
	0x00180000, 0x00190000, 0x001a0000, 0x001b0000, 0x001c0000, 0x001d0000, 0x001e0000, 0x001f0000, 
	0x00200000, 0x00210000, 0x00220000, 0x00230000, 0x00240000, 0x00250000, 0x00260000, 0x00270000, 
	0x00280000, 0x00290000, 0x002a0000, 0x002b0000, 0x002c0000, 0x002d0000, 0x002e0000, 0x002f0000, 
	0x00300000, 0x00310000, 0x00320000, 0x00330000, 0x00340000, 0x00350000, 0x00360000, 0x00370000, 
	0x00380000, 0x00390000, 0x003a0000, 0x003b0000, 0x003c0000, 0x003d0000, 0x003e0000, 0x003f0000, 
	0x00400000, 0x00410000, 0x00420000, 0x00430000, 0x00440000, 0x00450000, 0x00460000, 0x00470000, 
	0x00480000, 0x00490000, 0x004a0000, 0x004b0000, 0x004c0000, 0x004d0000, 0x004e0000, 0x004f0000, 
	0x00500000, 0x00510000, 0x00520000, 0x00530000, 0x00540000, 0x00550000, 0x00560000, 0x00570000, 
	0x00580000, 0x00590000, 0x005a0000, 0x005b0000, 0x005c0000, 0x005d0000, 0x005e0000, 0x005f0000, 
	0x00600000, 0x00610000, 0x00620000, 0x00630000, 0x00640000, 0x00650000, 0x00660000, 0x00670000, 
	0x00680000, 0x00690000, 0x006a0000, 0x006b0000, 0x006c0000, 0x006d0000, 0x006e0000, 0x006f0000, 
	0x00700000, 0x00710000, 0x00720000, 0x00730000, 0x00740000, 0x00750000, 0x00760000, 0x00770000, 
	0x00780000, 0x00790000, 0x007a0000, 0x007b0000, 0x007c0000, 0x007d0000, 0x007e0000, 0x007f0000, 
	0x00800000, 0x00810000, 0x00820000, 0x00830000, 0x00840000, 0x00850000, 0x00860000, 0x00870000, 
	0x00880000, 0x00890000, 0x008a0000, 0x008b0000, 0x008c0000, 0x008d0000, 0x008e0000, 0x008f0000, 
	0x00900000, 0x00910000, 0x00920000, 0x00930000, 0x00940000, 0x00950000, 0x00960000, 0x00970000, 
	0x00980000, 0x00990000, 0x009a0000, 0x009b0000, 0x009c0000, 0x009d0000, 0x009e0000, 0x009f0000, 
	0x00a00000, 0x00a10000, 0x00a20000, 0x00a30000, 0x00a40000, 0x00a50000, 0x00a60000, 0x00a70000, 
	0x00a80000, 0x00a90000, 0x00aa0000, 0x00ab0000, 0x00ac0000, 0x00ad0000, 0x00ae0000, 0x00af0000, 
	0x00b00000, 0x00b10000, 0x00b20000, 0x00b30000, 0x00b40000, 0x00b50000, 0x00b60000, 0x00b70000, 
	0x00b80000, 0x00b90000, 0x00ba0000, 0x00bb0000, 0x00bc0000, 0x00bd0000, 0x00be0000, 0x00bf0000, 
	0x00c00000, 0x00c10000, 0x00c20000, 0x00c30000, 0x00c40000, 0x00c50000, 0x00c60000, 0x00c70000, 
	0x00c80000, 0x00c90000, 0x00ca0000, 0x00cb0000, 0x00cc0000, 0x00cd0000, 0x00ce0000, 0x00cf0000, 
	0x00d00000, 0x00d10000, 0x00d20000, 0x00d30000, 0x00d40000, 0x00d50000, 0x00d60000, 0x00d70000, 
	0x00d80000, 0x00d90000, 0x00da0000, 0x00db0000, 0x00dc0000, 0x00dd0000, 0x00de0000, 0x00df0000, 
	0x00e00000, 0x00e10000, 0x00e20000, 0x00e30000, 0x00e40000, 0x00e50000, 0x00e60000, 0x00e70000, 
	0x00e80000, 0x00e90000, 0x00ea0000, 0x00eb0000, 0x00ec0000, 0x00ed0000, 0x00ee0000, 0x00ef0000, 
	0x00f00000, 0x00f10000, 0x00f20000, 0x00f30000, 0x00f40000, 0x00f50000, 0x00f60000, 0x00f70000, 
	0x00f80000, 0x00f90000, 0x00fa0000, 0x00fb0000, 0x00fc0000, 0x00fd0000, 0x00fe0000, 0x00ff0000
	};

DWORD shiftl8bits8[256] = {
	0x00000000, 0x00000100, 0x00000200, 0x00000300, 0x00000400, 0x00000500, 0x00000600, 0x00000700, 
	0x00000800, 0x00000900, 0x00000a00, 0x00000b00, 0x00000c00, 0x00000d00, 0x00000e00, 0x00000f00, 
	0x00001000, 0x00001100, 0x00001200, 0x00001300, 0x00001400, 0x00001500, 0x00001600, 0x00001700, 
	0x00001800, 0x00001900, 0x00001a00, 0x00001b00, 0x00001c00, 0x00001d00, 0x00001e00, 0x00001f00, 
	0x00002000, 0x00002100, 0x00002200, 0x00002300, 0x00002400, 0x00002500, 0x00002600, 0x00002700, 
	0x00002800, 0x00002900, 0x00002a00, 0x00002b00, 0x00002c00, 0x00002d00, 0x00002e00, 0x00002f00, 
	0x00003000, 0x00003100, 0x00003200, 0x00003300, 0x00003400, 0x00003500, 0x00003600, 0x00003700, 
	0x00003800, 0x00003900, 0x00003a00, 0x00003b00, 0x00003c00, 0x00003d00, 0x00003e00, 0x00003f00, 
	0x00004000, 0x00004100, 0x00004200, 0x00004300, 0x00004400, 0x00004500, 0x00004600, 0x00004700, 
	0x00004800, 0x00004900, 0x00004a00, 0x00004b00, 0x00004c00, 0x00004d00, 0x00004e00, 0x00004f00, 
	0x00005000, 0x00005100, 0x00005200, 0x00005300, 0x00005400, 0x00005500, 0x00005600, 0x00005700, 
	0x00005800, 0x00005900, 0x00005a00, 0x00005b00, 0x00005c00, 0x00005d00, 0x00005e00, 0x00005f00, 
	0x00006000, 0x00006100, 0x00006200, 0x00006300, 0x00006400, 0x00006500, 0x00006600, 0x00006700, 
	0x00006800, 0x00006900, 0x00006a00, 0x00006b00, 0x00006c00, 0x00006d00, 0x00006e00, 0x00006f00, 
	0x00007000, 0x00007100, 0x00007200, 0x00007300, 0x00007400, 0x00007500, 0x00007600, 0x00007700, 
	0x00007800, 0x00007900, 0x00007a00, 0x00007b00, 0x00007c00, 0x00007d00, 0x00007e00, 0x00007f00, 
	0x00008000, 0x00008100, 0x00008200, 0x00008300, 0x00008400, 0x00008500, 0x00008600, 0x00008700, 
	0x00008800, 0x00008900, 0x00008a00, 0x00008b00, 0x00008c00, 0x00008d00, 0x00008e00, 0x00008f00, 
	0x00009000, 0x00009100, 0x00009200, 0x00009300, 0x00009400, 0x00009500, 0x00009600, 0x00009700, 
	0x00009800, 0x00009900, 0x00009a00, 0x00009b00, 0x00009c00, 0x00009d00, 0x00009e00, 0x00009f00, 
	0x0000a000, 0x0000a100, 0x0000a200, 0x0000a300, 0x0000a400, 0x0000a500, 0x0000a600, 0x0000a700, 
	0x0000a800, 0x0000a900, 0x0000aa00, 0x0000ab00, 0x0000ac00, 0x0000ad00, 0x0000ae00, 0x0000af00, 
	0x0000b000, 0x0000b100, 0x0000b200, 0x0000b300, 0x0000b400, 0x0000b500, 0x0000b600, 0x0000b700, 
	0x0000b800, 0x0000b900, 0x0000ba00, 0x0000bb00, 0x0000bc00, 0x0000bd00, 0x0000be00, 0x0000bf00, 
	0x0000c000, 0x0000c100, 0x0000c200, 0x0000c300, 0x0000c400, 0x0000c500, 0x0000c600, 0x0000c700, 
	0x0000c800, 0x0000c900, 0x0000ca00, 0x0000cb00, 0x0000cc00, 0x0000cd00, 0x0000ce00, 0x0000cf00, 
	0x0000d000, 0x0000d100, 0x0000d200, 0x0000d300, 0x0000d400, 0x0000d500, 0x0000d600, 0x0000d700, 
	0x0000d800, 0x0000d900, 0x0000da00, 0x0000db00, 0x0000dc00, 0x0000dd00, 0x0000de00, 0x0000df00, 
	0x0000e000, 0x0000e100, 0x0000e200, 0x0000e300, 0x0000e400, 0x0000e500, 0x0000e600, 0x0000e700, 
	0x0000e800, 0x0000e900, 0x0000ea00, 0x0000eb00, 0x0000ec00, 0x0000ed00, 0x0000ee00, 0x0000ef00, 
	0x0000f000, 0x0000f100, 0x0000f200, 0x0000f300, 0x0000f400, 0x0000f500, 0x0000f600, 0x0000f700, 
	0x0000f800, 0x0000f900, 0x0000fa00, 0x0000fb00, 0x0000fc00, 0x0000fd00, 0x0000fe00, 0x0000ff00
	};

DWORD shiftl0bits8[256] = {
	0x00000000, 0x00000001, 0x00000002, 0x00000003, 0x00000004, 0x00000005, 0x00000006, 0x00000007, 
	0x00000008, 0x00000009, 0x0000000a, 0x0000000b, 0x0000000c, 0x0000000d, 0x0000000e, 0x0000000f, 
	0x00000010, 0x00000011, 0x00000012, 0x00000013, 0x00000014, 0x00000015, 0x00000016, 0x00000017, 
	0x00000018, 0x00000019, 0x0000001a, 0x0000001b, 0x0000001c, 0x0000001d, 0x0000001e, 0x0000001f, 
	0x00000020, 0x00000021, 0x00000022, 0x00000023, 0x00000024, 0x00000025, 0x00000026, 0x00000027, 
	0x00000028, 0x00000029, 0x0000002a, 0x0000002b, 0x0000002c, 0x0000002d, 0x0000002e, 0x0000002f, 
	0x00000030, 0x00000031, 0x00000032, 0x00000033, 0x00000034, 0x00000035, 0x00000036, 0x00000037, 
	0x00000038, 0x00000039, 0x0000003a, 0x0000003b, 0x0000003c, 0x0000003d, 0x0000003e, 0x0000003f, 
	0x00000040, 0x00000041, 0x00000042, 0x00000043, 0x00000044, 0x00000045, 0x00000046, 0x00000047, 
	0x00000048, 0x00000049, 0x0000004a, 0x0000004b, 0x0000004c, 0x0000004d, 0x0000004e, 0x0000004f, 
	0x00000050, 0x00000051, 0x00000052, 0x00000053, 0x00000054, 0x00000055, 0x00000056, 0x00000057, 
	0x00000058, 0x00000059, 0x0000005a, 0x0000005b, 0x0000005c, 0x0000005d, 0x0000005e, 0x0000005f, 
	0x00000060, 0x00000061, 0x00000062, 0x00000063, 0x00000064, 0x00000065, 0x00000066, 0x00000067, 
	0x00000068, 0x00000069, 0x0000006a, 0x0000006b, 0x0000006c, 0x0000006d, 0x0000006e, 0x0000006f, 
	0x00000070, 0x00000071, 0x00000072, 0x00000073, 0x00000074, 0x00000075, 0x00000076, 0x00000077, 
	0x00000078, 0x00000079, 0x0000007a, 0x0000007b, 0x0000007c, 0x0000007d, 0x0000007e, 0x0000007f, 
	0x00000080, 0x00000081, 0x00000082, 0x00000083, 0x00000084, 0x00000085, 0x00000086, 0x00000087, 
	0x00000088, 0x00000089, 0x0000008a, 0x0000008b, 0x0000008c, 0x0000008d, 0x0000008e, 0x0000008f, 
	0x00000090, 0x00000091, 0x00000092, 0x00000093, 0x00000094, 0x00000095, 0x00000096, 0x00000097, 
	0x00000098, 0x00000099, 0x0000009a, 0x0000009b, 0x0000009c, 0x0000009d, 0x0000009e, 0x0000009f, 
	0x000000a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7, 
	0x000000a8, 0x000000a9, 0x000000aa, 0x000000ab, 0x000000ac, 0x000000ad, 0x000000ae, 0x000000af, 
	0x000000b0, 0x000000b1, 0x000000b2, 0x000000b3, 0x000000b4, 0x000000b5, 0x000000b6, 0x000000b7, 
	0x000000b8, 0x000000b9, 0x000000ba, 0x000000bb, 0x000000bc, 0x000000bd, 0x000000be, 0x000000bf, 
	0x000000c0, 0x000000c1, 0x000000c2, 0x000000c3, 0x000000c4, 0x000000c5, 0x000000c6, 0x000000c7, 
	0x000000c8, 0x000000c9, 0x000000ca, 0x000000cb, 0x000000cc, 0x000000cd, 0x000000ce, 0x000000cf, 
	0x000000d0, 0x000000d1, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x000000d7, 
	0x000000d8, 0x000000d9, 0x000000da, 0x000000db, 0x000000dc, 0x000000dd, 0x000000de, 0x000000df, 
	0x000000e0, 0x000000e1, 0x000000e2, 0x000000e3, 0x000000e4, 0x000000e5, 0x000000e6, 0x000000e7, 
	0x000000e8, 0x000000e9, 0x000000ea, 0x000000eb, 0x000000ec, 0x000000ed, 0x000000ee, 0x000000ef, 
	0x000000f0, 0x000000f1, 0x000000f2, 0x000000f3, 0x000000f4, 0x000000f5, 0x000000f6, 0x000000f7, 
	0x000000f8, 0x000000f9, 0x000000fa, 0x000000fb, 0x000000fc, 0x000000fd, 0x000000fe, 0x000000ff
	};

DWORD shiftl7bits5[256] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000400, 0x00000400, 0x00000400, 
	0x00000400, 0x00000400, 0x00000400, 0x00000400, 0x00000400, 0x00000800, 0x00000800, 0x00000800, 
	0x00000800, 0x00000800, 0x00000800, 0x00000800, 0x00000800, 0x00000c00, 0x00000c00, 0x00000c00, 
	0x00000c00, 0x00000c00, 0x00000c00, 0x00000c00, 0x00000c00, 0x00001000, 0x00001000, 0x00001000, 
	0x00001000, 0x00001000, 0x00001000, 0x00001000, 0x00001000, 0x00001000, 0x00001400, 0x00001400, 
	0x00001400, 0x00001400, 0x00001400, 0x00001400, 0x00001400, 0x00001400, 0x00001800, 0x00001800, 
	0x00001800, 0x00001800, 0x00001800, 0x00001800, 0x00001800, 0x00001800, 0x00001c00, 0x00001c00, 
	0x00001c00, 0x00001c00, 0x00001c00, 0x00001c00, 0x00001c00, 0x00001c00, 0x00002000, 0x00002000, 
	0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002400, 0x00002400, 
	0x00002400, 0x00002400, 0x00002400, 0x00002400, 0x00002400, 0x00002400, 0x00002400, 0x00002800, 
	0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00002c00, 
	0x00002c00, 0x00002c00, 0x00002c00, 0x00002c00, 0x00002c00, 0x00002c00, 0x00002c00, 0x00003000, 
	0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003400, 
	0x00003400, 0x00003400, 0x00003400, 0x00003400, 0x00003400, 0x00003400, 0x00003400, 0x00003400, 
	0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00003800, 
	0x00003c00, 0x00003c00, 0x00003c00, 0x00003c00, 0x00003c00, 0x00003c00, 0x00003c00, 0x00003c00, 
	0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004000, 
	0x00004400, 0x00004400, 0x00004400, 0x00004400, 0x00004400, 0x00004400, 0x00004400, 0x00004400, 
	0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 
	0x00004800, 0x00004c00, 0x00004c00, 0x00004c00, 0x00004c00, 0x00004c00, 0x00004c00, 0x00004c00, 
	0x00004c00, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 
	0x00005000, 0x00005400, 0x00005400, 0x00005400, 0x00005400, 0x00005400, 0x00005400, 0x00005400, 
	0x00005400, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 
	0x00005800, 0x00005800, 0x00005c00, 0x00005c00, 0x00005c00, 0x00005c00, 0x00005c00, 0x00005c00, 
	0x00005c00, 0x00005c00, 0x00006000, 0x00006000, 0x00006000, 0x00006000, 0x00006000, 0x00006000, 
	0x00006000, 0x00006000, 0x00006400, 0x00006400, 0x00006400, 0x00006400, 0x00006400, 0x00006400, 
	0x00006400, 0x00006400, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 
	0x00006800, 0x00006800, 0x00006800, 0x00006c00, 0x00006c00, 0x00006c00, 0x00006c00, 0x00006c00, 
	0x00006c00, 0x00006c00, 0x00006c00, 0x00007000, 0x00007000, 0x00007000, 0x00007000, 0x00007000, 
	0x00007000, 0x00007000, 0x00007000, 0x00007400, 0x00007400, 0x00007400, 0x00007400, 0x00007400, 
	0x00007400, 0x00007400, 0x00007400, 0x00007800, 0x00007800, 0x00007800, 0x00007800, 0x00007800, 
	0x00007800, 0x00007800, 0x00007800, 0x00007c00, 0x00007c00, 0x00007c00, 0x00007c00, 0x00007c00
	};

DWORD shiftl2bits5[256] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000020, 0x00000020, 0x00000020, 
	0x00000020, 0x00000020, 0x00000020, 0x00000020, 0x00000020, 0x00000040, 0x00000040, 0x00000040, 
	0x00000040, 0x00000040, 0x00000040, 0x00000040, 0x00000040, 0x00000060, 0x00000060, 0x00000060, 
	0x00000060, 0x00000060, 0x00000060, 0x00000060, 0x00000060, 0x00000080, 0x00000080, 0x00000080, 
	0x00000080, 0x00000080, 0x00000080, 0x00000080, 0x00000080, 0x00000080, 0x000000a0, 0x000000a0, 
	0x000000a0, 0x000000a0, 0x000000a0, 0x000000a0, 0x000000a0, 0x000000a0, 0x000000c0, 0x000000c0, 
	0x000000c0, 0x000000c0, 0x000000c0, 0x000000c0, 0x000000c0, 0x000000c0, 0x000000e0, 0x000000e0, 
	0x000000e0, 0x000000e0, 0x000000e0, 0x000000e0, 0x000000e0, 0x000000e0, 0x00000100, 0x00000100, 
	0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000100, 0x00000120, 0x00000120, 
	0x00000120, 0x00000120, 0x00000120, 0x00000120, 0x00000120, 0x00000120, 0x00000120, 0x00000140, 
	0x00000140, 0x00000140, 0x00000140, 0x00000140, 0x00000140, 0x00000140, 0x00000140, 0x00000160, 
	0x00000160, 0x00000160, 0x00000160, 0x00000160, 0x00000160, 0x00000160, 0x00000160, 0x00000180, 
	0x00000180, 0x00000180, 0x00000180, 0x00000180, 0x00000180, 0x00000180, 0x00000180, 0x000001a0, 
	0x000001a0, 0x000001a0, 0x000001a0, 0x000001a0, 0x000001a0, 0x000001a0, 0x000001a0, 0x000001a0, 
	0x000001c0, 0x000001c0, 0x000001c0, 0x000001c0, 0x000001c0, 0x000001c0, 0x000001c0, 0x000001c0, 
	0x000001e0, 0x000001e0, 0x000001e0, 0x000001e0, 0x000001e0, 0x000001e0, 0x000001e0, 0x000001e0, 
	0x00000200, 0x00000200, 0x00000200, 0x00000200, 0x00000200, 0x00000200, 0x00000200, 0x00000200, 
	0x00000220, 0x00000220, 0x00000220, 0x00000220, 0x00000220, 0x00000220, 0x00000220, 0x00000220, 
	0x00000240, 0x00000240, 0x00000240, 0x00000240, 0x00000240, 0x00000240, 0x00000240, 0x00000240, 
	0x00000240, 0x00000260, 0x00000260, 0x00000260, 0x00000260, 0x00000260, 0x00000260, 0x00000260, 
	0x00000260, 0x00000280, 0x00000280, 0x00000280, 0x00000280, 0x00000280, 0x00000280, 0x00000280, 
	0x00000280, 0x000002a0, 0x000002a0, 0x000002a0, 0x000002a0, 0x000002a0, 0x000002a0, 0x000002a0, 
	0x000002a0, 0x000002c0, 0x000002c0, 0x000002c0, 0x000002c0, 0x000002c0, 0x000002c0, 0x000002c0, 
	0x000002c0, 0x000002c0, 0x000002e0, 0x000002e0, 0x000002e0, 0x000002e0, 0x000002e0, 0x000002e0, 
	0x000002e0, 0x000002e0, 0x00000300, 0x00000300, 0x00000300, 0x00000300, 0x00000300, 0x00000300, 
	0x00000300, 0x00000300, 0x00000320, 0x00000320, 0x00000320, 0x00000320, 0x00000320, 0x00000320, 
	0x00000320, 0x00000320, 0x00000340, 0x00000340, 0x00000340, 0x00000340, 0x00000340, 0x00000340, 
	0x00000340, 0x00000340, 0x00000340, 0x00000360, 0x00000360, 0x00000360, 0x00000360, 0x00000360, 
	0x00000360, 0x00000360, 0x00000360, 0x00000380, 0x00000380, 0x00000380, 0x00000380, 0x00000380, 
	0x00000380, 0x00000380, 0x00000380, 0x000003a0, 0x000003a0, 0x000003a0, 0x000003a0, 0x000003a0, 
	0x000003a0, 0x000003a0, 0x000003a0, 0x000003c0, 0x000003c0, 0x000003c0, 0x000003c0, 0x000003c0, 
	0x000003c0, 0x000003c0, 0x000003c0, 0x000003e0, 0x000003e0, 0x000003e0, 0x000003e0, 0x000003e0
	};

DWORD shiftr3bits5[256] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 
	0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000002, 0x00000002, 0x00000002, 
	0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000003, 0x00000003, 0x00000003, 
	0x00000003, 0x00000003, 0x00000003, 0x00000003, 0x00000003, 0x00000004, 0x00000004, 0x00000004, 
	0x00000004, 0x00000004, 0x00000004, 0x00000004, 0x00000004, 0x00000004, 0x00000005, 0x00000005, 
	0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000006, 0x00000006, 
	0x00000006, 0x00000006, 0x00000006, 0x00000006, 0x00000006, 0x00000006, 0x00000007, 0x00000007, 
	0x00000007, 0x00000007, 0x00000007, 0x00000007, 0x00000007, 0x00000007, 0x00000008, 0x00000008, 
	0x00000008, 0x00000008, 0x00000008, 0x00000008, 0x00000008, 0x00000008, 0x00000009, 0x00000009, 
	0x00000009, 0x00000009, 0x00000009, 0x00000009, 0x00000009, 0x00000009, 0x00000009, 0x0000000a, 
	0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000b, 
	0x0000000b, 0x0000000b, 0x0000000b, 0x0000000b, 0x0000000b, 0x0000000b, 0x0000000b, 0x0000000c, 
	0x0000000c, 0x0000000c, 0x0000000c, 0x0000000c, 0x0000000c, 0x0000000c, 0x0000000c, 0x0000000d, 
	0x0000000d, 0x0000000d, 0x0000000d, 0x0000000d, 0x0000000d, 0x0000000d, 0x0000000d, 0x0000000d, 
	0x0000000e, 0x0000000e, 0x0000000e, 0x0000000e, 0x0000000e, 0x0000000e, 0x0000000e, 0x0000000e, 
	0x0000000f, 0x0000000f, 0x0000000f, 0x0000000f, 0x0000000f, 0x0000000f, 0x0000000f, 0x0000000f, 
	0x00000010, 0x00000010, 0x00000010, 0x00000010, 0x00000010, 0x00000010, 0x00000010, 0x00000010, 
	0x00000011, 0x00000011, 0x00000011, 0x00000011, 0x00000011, 0x00000011, 0x00000011, 0x00000011, 
	0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 
	0x00000012, 0x00000013, 0x00000013, 0x00000013, 0x00000013, 0x00000013, 0x00000013, 0x00000013, 
	0x00000013, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 
	0x00000014, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 
	0x00000015, 0x00000016, 0x00000016, 0x00000016, 0x00000016, 0x00000016, 0x00000016, 0x00000016, 
	0x00000016, 0x00000016, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 
	0x00000017, 0x00000017, 0x00000018, 0x00000018, 0x00000018, 0x00000018, 0x00000018, 0x00000018, 
	0x00000018, 0x00000018, 0x00000019, 0x00000019, 0x00000019, 0x00000019, 0x00000019, 0x00000019, 
	0x00000019, 0x00000019, 0x0000001a, 0x0000001a, 0x0000001a, 0x0000001a, 0x0000001a, 0x0000001a, 
	0x0000001a, 0x0000001a, 0x0000001a, 0x0000001b, 0x0000001b, 0x0000001b, 0x0000001b, 0x0000001b, 
	0x0000001b, 0x0000001b, 0x0000001b, 0x0000001c, 0x0000001c, 0x0000001c, 0x0000001c, 0x0000001c, 
	0x0000001c, 0x0000001c, 0x0000001c, 0x0000001d, 0x0000001d, 0x0000001d, 0x0000001d, 0x0000001d, 
	0x0000001d, 0x0000001d, 0x0000001d, 0x0000001e, 0x0000001e, 0x0000001e, 0x0000001e, 0x0000001e, 
	0x0000001e, 0x0000001e, 0x0000001e, 0x0000001f, 0x0000001f, 0x0000001f, 0x0000001f, 0x0000001f
	};

DWORD shiftl8bits5[256] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000800, 0x00000800, 0x00000800, 
	0x00000800, 0x00000800, 0x00000800, 0x00000800, 0x00000800, 0x00001000, 0x00001000, 0x00001000, 
	0x00001000, 0x00001000, 0x00001000, 0x00001000, 0x00001000, 0x00001800, 0x00001800, 0x00001800, 
	0x00001800, 0x00001800, 0x00001800, 0x00001800, 0x00001800, 0x00002000, 0x00002000, 0x00002000, 
	0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002000, 0x00002800, 0x00002800, 
	0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00002800, 0x00003000, 0x00003000, 
	0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003000, 0x00003800, 0x00003800, 
	0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00003800, 0x00004000, 0x00004000, 
	0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004000, 0x00004800, 0x00004800, 
	0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00004800, 0x00005000, 
	0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005000, 0x00005800, 
	0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00005800, 0x00006000, 
	0x00006000, 0x00006000, 0x00006000, 0x00006000, 0x00006000, 0x00006000, 0x00006000, 0x00006800, 
	0x00006800, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 0x00006800, 
	0x00007000, 0x00007000, 0x00007000, 0x00007000, 0x00007000, 0x00007000, 0x00007000, 0x00007000, 
	0x00007800, 0x00007800, 0x00007800, 0x00007800, 0x00007800, 0x00007800, 0x00007800, 0x00007800, 
	0x00008000, 0x00008000, 0x00008000, 0x00008000, 0x00008000, 0x00008000, 0x00008000, 0x00008000, 
	0x00008800, 0x00008800, 0x00008800, 0x00008800, 0x00008800, 0x00008800, 0x00008800, 0x00008800, 
	0x00009000, 0x00009000, 0x00009000, 0x00009000, 0x00009000, 0x00009000, 0x00009000, 0x00009000, 
	0x00009000, 0x00009800, 0x00009800, 0x00009800, 0x00009800, 0x00009800, 0x00009800, 0x00009800, 
	0x00009800, 0x0000a000, 0x0000a000, 0x0000a000, 0x0000a000, 0x0000a000, 0x0000a000, 0x0000a000, 
	0x0000a000, 0x0000a800, 0x0000a800, 0x0000a800, 0x0000a800, 0x0000a800, 0x0000a800, 0x0000a800, 
	0x0000a800, 0x0000b000, 0x0000b000, 0x0000b000, 0x0000b000, 0x0000b000, 0x0000b000, 0x0000b000, 
	0x0000b000, 0x0000b000, 0x0000b800, 0x0000b800, 0x0000b800, 0x0000b800, 0x0000b800, 0x0000b800, 
	0x0000b800, 0x0000b800, 0x0000c000, 0x0000c000, 0x0000c000, 0x0000c000, 0x0000c000, 0x0000c000, 
	0x0000c000, 0x0000c000, 0x0000c800, 0x0000c800, 0x0000c800, 0x0000c800, 0x0000c800, 0x0000c800, 
	0x0000c800, 0x0000c800, 0x0000d000, 0x0000d000, 0x0000d000, 0x0000d000, 0x0000d000, 0x0000d000, 
	0x0000d000, 0x0000d000, 0x0000d000, 0x0000d800, 0x0000d800, 0x0000d800, 0x0000d800, 0x0000d800, 
	0x0000d800, 0x0000d800, 0x0000d800, 0x0000e000, 0x0000e000, 0x0000e000, 0x0000e000, 0x0000e000, 
	0x0000e000, 0x0000e000, 0x0000e000, 0x0000e800, 0x0000e800, 0x0000e800, 0x0000e800, 0x0000e800, 
	0x0000e800, 0x0000e800, 0x0000e800, 0x0000f000, 0x0000f000, 0x0000f000, 0x0000f000, 0x0000f000, 
	0x0000f000, 0x0000f000, 0x0000f000, 0x0000f800, 0x0000f800, 0x0000f800, 0x0000f800, 0x0000f800
	};

DWORD shiftl3bits6[256] = {
	0x00000000, 0x00000000, 0x00000000, 0x00000020, 0x00000020, 0x00000020, 0x00000020, 0x00000040, 
	0x00000040, 0x00000040, 0x00000040, 0x00000060, 0x00000060, 0x00000060, 0x00000060, 0x00000080, 
	0x00000080, 0x00000080, 0x00000080, 0x000000a0, 0x000000a0, 0x000000a0, 0x000000a0, 0x000000c0, 
	0x000000c0, 0x000000c0, 0x000000c0, 0x000000e0, 0x000000e0, 0x000000e0, 0x000000e0, 0x00000100, 
	0x00000100, 0x00000100, 0x00000100, 0x00000120, 0x00000120, 0x00000120, 0x00000120, 0x00000140, 
	0x00000140, 0x00000140, 0x00000140, 0x00000160, 0x00000160, 0x00000160, 0x00000160, 0x00000180, 
	0x00000180, 0x00000180, 0x00000180, 0x000001a0, 0x000001a0, 0x000001a0, 0x000001a0, 0x000001c0, 
	0x000001c0, 0x000001c0, 0x000001c0, 0x000001e0, 0x000001e0, 0x000001e0, 0x000001e0, 0x00000200, 
	0x00000200, 0x00000200, 0x00000200, 0x00000220, 0x00000220, 0x00000220, 0x00000220, 0x00000240, 
	0x00000240, 0x00000240, 0x00000240, 0x00000260, 0x00000260, 0x00000260, 0x00000260, 0x00000280, 
	0x00000280, 0x00000280, 0x00000280, 0x000002a0, 0x000002a0, 0x000002a0, 0x000002a0, 0x000002a0, 
	0x000002c0, 0x000002c0, 0x000002c0, 0x000002c0, 0x000002e0, 0x000002e0, 0x000002e0, 0x000002e0, 
	0x00000300, 0x00000300, 0x00000300, 0x00000300, 0x00000320, 0x00000320, 0x00000320, 0x00000320, 
	0x00000340, 0x00000340, 0x00000340, 0x00000340, 0x00000360, 0x00000360, 0x00000360, 0x00000360, 
	0x00000380, 0x00000380, 0x00000380, 0x00000380, 0x000003a0, 0x000003a0, 0x000003a0, 0x000003a0, 
	0x000003c0, 0x000003c0, 0x000003c0, 0x000003c0, 0x000003e0, 0x000003e0, 0x000003e0, 0x000003e0, 
	0x00000400, 0x00000400, 0x00000400, 0x00000400, 0x00000420, 0x00000420, 0x00000420, 0x00000420, 
	0x00000440, 0x00000440, 0x00000440, 0x00000440, 0x00000460, 0x00000460, 0x00000460, 0x00000460, 
	0x00000480, 0x00000480, 0x00000480, 0x00000480, 0x000004a0, 0x000004a0, 0x000004a0, 0x000004a0, 
	0x000004c0, 0x000004c0, 0x000004c0, 0x000004c0, 0x000004e0, 0x000004e0, 0x000004e0, 0x000004e0, 
	0x00000500, 0x00000500, 0x00000500, 0x00000500, 0x00000520, 0x00000520, 0x00000520, 0x00000520, 
	0x00000520, 0x00000540, 0x00000540, 0x00000540, 0x00000540, 0x00000560, 0x00000560, 0x00000560, 
	0x00000560, 0x00000580, 0x00000580, 0x00000580, 0x00000580, 0x000005a0, 0x000005a0, 0x000005a0, 
	0x000005a0, 0x000005c0, 0x000005c0, 0x000005c0, 0x000005c0, 0x000005e0, 0x000005e0, 0x000005e0, 
	0x000005e0, 0x00000600, 0x00000600, 0x00000600, 0x00000600, 0x00000620, 0x00000620, 0x00000620, 
	0x00000620, 0x00000640, 0x00000640, 0x00000640, 0x00000640, 0x00000660, 0x00000660, 0x00000660, 
	0x00000660, 0x00000680, 0x00000680, 0x00000680, 0x00000680, 0x000006a0, 0x000006a0, 0x000006a0, 
	0x000006a0, 0x000006c0, 0x000006c0, 0x000006c0, 0x000006c0, 0x000006e0, 0x000006e0, 0x000006e0, 
	0x000006e0, 0x00000700, 0x00000700, 0x00000700, 0x00000700, 0x00000720, 0x00000720, 0x00000720, 
	0x00000720, 0x00000740, 0x00000740, 0x00000740, 0x00000740, 0x00000760, 0x00000760, 0x00000760, 
	0x00000760, 0x00000780, 0x00000780, 0x00000780, 0x00000780, 0x000007a0, 0x000007a0, 0x000007a0, 
	0x000007a0, 0x000007c0, 0x000007c0, 0x000007c0, 0x000007c0, 0x000007c0, 0x000007e0, 0x000007e0
	};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\encode\pin.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

//
// CO - quartz wrapper for old video compressors
// pin.cpp - the output pin code
//

#include <streams.h>
#include <windowsx.h>
#include <vfw.h>

#include "MJPGEnc.h"

// --- CCoOutputPin ----------------------------------------

/*
    CMJPGOutputPin constructor
*/
CMJPGOutputPin::CMJPGOutputPin(
    TCHAR              * pObjectName,
    CMJPGEnc 	       * pFilter,
    HRESULT            * phr,
    LPCWSTR              pPinName) :

    CTransformOutputPin(pObjectName, pFilter, phr, pPinName),
    m_pFilter(pFilter)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the CMJPGOutputPin")));
}

CMJPGOutputPin::~CMJPGOutputPin()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying the CMJPGOutputPin")));
};


// overriden to expose IMediaPosition and IMediaSeeking control interfaces
// and all the capture interfaces we support
// !!! The base classes change all the time and I won't pick up their bug fixes!
STDMETHODIMP CMJPGOutputPin::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    if (riid == IID_IAMStreamConfig) {
	return GetInterface((LPUNKNOWN)(IAMStreamConfig *)this, ppv);
    } else if (riid == IID_IAMVideoCompression) {
	return GetInterface((LPUNKNOWN)(IAMVideoCompression *)this, ppv);
    } else {
        DbgLog((LOG_TRACE,99,TEXT("QI on CMJPGOutputPin")));
        return CTransformOutputPin::NonDelegatingQueryInterface(riid, ppv);
    }
}


HRESULT CMJPGOutputPin::Reconnect()
{
    if (IsConnected()) {
        DbgLog((LOG_TRACE,1,TEXT("Need to reconnect our output pin")));
        CMediaType cmt;
	GetMediaType(0, &cmt);
	if (S_OK == GetConnected()->QueryAccept(&cmt)) {
	    m_pFilter->m_pGraph->Reconnect(this);
	} else {
	    // !!! CAPTURE does this better - I don't care, we don't need this
	    // except for the Dialog box
	    // I better break our connections cuz we can't go on like this
            DbgLog((LOG_ERROR,1,TEXT("Can't reconnect with new MT! Disconnecting!")));
	    // !!! We need to notify applications that connections are broken !
	    GetConnected()->Disconnect();
	    Disconnect();
	    return E_UNEXPECTED;
	}
    }
    return NOERROR;
}

//=============================================================================
//=============================================================================

// IAMStreamConfig stuff

// Tell the compressor to compress to a specific format.  If it isn't connected,
// then it will use that format to connect when it does.  If already connected,
// then it will reconnect with the new format.
//
// calling this to change compressors will change what GetInfo will return
//
HRESULT CMJPGOutputPin::SetFormat(AM_MEDIA_TYPE *pmt)
{
    HRESULT hr;

    if (pmt == NULL)
	return E_POINTER;

    // To make sure we're not in the middle of start/stop streaming
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    DbgLog((LOG_TRACE,2,TEXT("IAMStreamConfig::SetFormat %x %dbit %dx%d"),
		HEADER(pmt->pbFormat)->biCompression,
		HEADER(pmt->pbFormat)->biBitCount,
		HEADER(pmt->pbFormat)->biWidth,
		HEADER(pmt->pbFormat)->biHeight));

    if (m_pFilter->m_fStreaming)
	return VFW_E_NOT_STOPPED;

    if (!m_pFilter->m_pInput->IsConnected())
	return VFW_E_NOT_CONNECTED;

    // If this is the same format as we already are using, don't bother
    CMediaType cmt;
    if ((hr = GetMediaType(0,&cmt)) != S_OK)
	return hr;
    if (cmt == *pmt) {
	return NOERROR;
    }

    // If we are connected to somebody, make sure they like it
    if (IsConnected()) {
	hr = GetConnected()->QueryAccept(pmt);
	if (hr != NOERROR)
	    return VFW_E_INVALIDMEDIATYPE;
    }

    // Normally we wouldn't leave the compressor we find in CheckTransform
    // open if our input is connected already, but we need to force it to
    // leave it open so that it's still open when we call SetMediaType below
    m_pFilter->m_fCacheIns = TRUE;
    hr = m_pFilter->CheckTransform(&m_pFilter->m_pInput->CurrentMediaType(),
						(CMediaType *)pmt);
    m_pFilter->m_fCacheIns = FALSE;

    if (hr != S_OK) {
        DbgLog((LOG_TRACE,1,TEXT("Nobody likes this format. Sorry.")));
 	return hr;
    }

    hr = m_pFilter->SetMediaType(PINDIR_OUTPUT, (CMediaType *)pmt);
    ASSERT(hr == S_OK);

    // from now on, this is the only media type we offer
    m_pFilter->m_cmt = *pmt;
    m_pFilter->m_fOfferSetFormatOnly = TRUE;

    // Changing the format means reconnecting if necessary
    Reconnect();

    return NOERROR;
}


// What format are we compressing to right now?
//
HRESULT CMJPGOutputPin::GetFormat(AM_MEDIA_TYPE **ppmt)
{
    DbgLog((LOG_TRACE,2,TEXT("IAMAudioStreamConfig::GetFormat")));

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (ppmt == NULL)
	return E_POINTER;

    // Output choices depend on the input connected
    if (!m_pFilter->m_pInput->IsConnected()) {
        DbgLog((LOG_TRACE,2,TEXT("No input type set yet, no can do")));
	return VFW_E_NOT_CONNECTED;
    }

    *ppmt = (AM_MEDIA_TYPE *)CoTaskMemAlloc(sizeof(AM_MEDIA_TYPE));
    if (*ppmt == NULL)
	return E_OUTOFMEMORY;
    ZeroMemory(*ppmt, sizeof(AM_MEDIA_TYPE));
    HRESULT hr = GetMediaType(0, (CMediaType *)*ppmt);
    if (hr != NOERROR) {
	CoTaskMemFree(*ppmt);
	*ppmt = NULL;
	return hr;
    }
    return NOERROR;
}


//
//
HRESULT CMJPGOutputPin::GetNumberOfCapabilities(int *piCount, int *piSize)
{
    DbgLog((LOG_TRACE,2,TEXT("IAMStreamConfig::GetNumberOfCapabilities")));

    if (piCount == NULL || piSize == NULL)
	return E_POINTER;

    *piCount = 1;
    *piSize = sizeof(VIDEO_STREAM_CONFIG_CAPS);
    return NOERROR;
}


// find out some capabilities of this compressor
//
HRESULT CMJPGOutputPin::GetStreamCaps(int i, AM_MEDIA_TYPE **ppmt, LPBYTE pSCC)
{
    VIDEO_STREAM_CONFIG_CAPS *pVSCC = (VIDEO_STREAM_CONFIG_CAPS *)pSCC;

    DbgLog((LOG_TRACE,2,TEXT("IAMStreamConfig::GetStreamCaps")));

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (ppmt == NULL || pSCC == NULL)
	return E_POINTER;

    // no good
    if (i < 0)
	return E_INVALIDARG;
    if (i > 0)
	return S_FALSE;

    HRESULT hr = GetFormat(ppmt);
    if (hr != NOERROR)
	return hr;

    ZeroMemory(pVSCC, sizeof(VIDEO_STREAM_CONFIG_CAPS));
    pVSCC->guid = MEDIATYPE_Video;

    // we don't do cropping
    if (m_pFilter->m_pInput->IsConnected()) {
        pVSCC->InputSize.cx =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biWidth;
        pVSCC->InputSize.cy =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biHeight;
        pVSCC->MinCroppingSize.cx =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biWidth;
        pVSCC->MinCroppingSize.cy =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biHeight;
        pVSCC->MaxCroppingSize.cx =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biWidth;
        pVSCC->MaxCroppingSize.cy =
	HEADER(m_pFilter->m_pInput->CurrentMediaType().Format())->biHeight;
    }

    return NOERROR;
}


//=============================================================================

// IAMVideoCompression stuff

// make key frames this often
//
HRESULT CMJPGOutputPin::put_KeyFrameRate(long KeyFrameRate)
{

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);

    if (KeyFrameRate >=0) {
        m_pFilter->m_compvars.lKey = KeyFrameRate;
	return NOERROR;
    }

    //MJPEG codec does not support ICM_GetDefaultKeyFrameRate()
    //m_pFilter->m_compvars.lKey = ICGetDefaultKeyFrameRate(ph);
    m_pFilter->m_compvars.lKey =AM_MJPEG_DEFAULTKEYFRAMERATE;
    
    return NOERROR;
}


// make key frames this often
//
HRESULT CMJPGOutputPin::get_KeyFrameRate(long FAR* pKeyFrameRate)
{
    if (pKeyFrameRate) {
	*pKeyFrameRate = m_pFilter->m_compvars.lKey;
    } else {
	return E_POINTER;
    }

    return NOERROR;
}


// compress with this quality
//
HRESULT CMJPGOutputPin::put_Quality(double Quality)
{
    if (Quality < 0)
	m_pFilter->m_compvars.lQ = ICQUALITY_DEFAULT;
    else if (Quality >= 0. && Quality <= 1.)
	m_pFilter->m_compvars.lQ = (long)(Quality * 10000.);
    else
	return E_INVALIDARG;

    return NOERROR;
}


// compress with this quality
//
HRESULT CMJPGOutputPin::get_Quality(double FAR* pQuality)
{
    // scale 0-10000 to 0-1
    if (pQuality) {
	if (m_pFilter->m_compvars.lQ == ICQUALITY_DEFAULT)
	    *pQuality = -1.;
	else
	    *pQuality = m_pFilter->m_compvars.lQ / (double)ICQUALITY_HIGH;
    } else {
	return E_POINTER;
    }

    return NOERROR;
}


// every frame must fit in the data rate... we don't do the WindowSize thing
//
HRESULT CMJPGOutputPin::get_WindowSize(DWORDLONG FAR* pWindowSize)
{
    if (pWindowSize == NULL)
	return E_POINTER;

    *pWindowSize = 1;	// we don't do windows
    return NOERROR;
}


// make this frame a key frame, whenever it comes by
//
HRESULT CMJPGOutputPin::OverrideKeyFrame(long FrameNumber)
{
    // !!! be brave?
    return E_NOTIMPL;
}


// make this frame this size, whenever it comes by
//
HRESULT CMJPGOutputPin::OverrideFrameSize(long FrameNumber, long Size)
{
    // !!! be brave?
    return E_NOTIMPL;
}


// Get some information about the codec
//
HRESULT CMJPGOutputPin::GetInfo(LPWSTR pstrVersion, int *pcbVersion, LPWSTR pstrDescription, int *pcbDescription, long FAR* pDefaultKeyFrameRate, long FAR* pDefaultPFramesPerKey, double FAR* pDefaultQuality, long FAR* pCapabilities)
{
    ICINFO icinfo;
    DbgLog((LOG_TRACE,1,TEXT("IAMVideoCompression::GetInfo")));

    // To make sure we're not in the middle of connecting
    CAutoLock cObjectLock(&m_pFilter->m_csFilter);
	
    DWORD dw = m_pFilter->GetICInfo (&icinfo);  //first var is not used by the function
    
    if (pDefaultKeyFrameRate)
	*pDefaultKeyFrameRate = AM_MJPEG_DEFAULTKEYFRAMERATE;

    if (pDefaultPFramesPerKey)
	*pDefaultPFramesPerKey = 0;

    if (pDefaultQuality)
	*pDefaultQuality = .75; // ask the driver, don't hardcode

    if (pCapabilities) {
	*pCapabilities = 0;
	if (dw > 0) {
	    *pCapabilities |= ((icinfo.dwFlags & VIDCF_QUALITY) ?
					CompressionCaps_CanQuality : 0);
	    *pCapabilities |= ((icinfo.dwFlags & VIDCF_CRUNCH) ?
					CompressionCaps_CanCrunch : 0);
	    *pCapabilities |= ((icinfo.dwFlags & VIDCF_TEMPORAL) ?
					CompressionCaps_CanKeyFrame : 0);
	    // we don't do b frames
	}
    }

    // We have no version string, but we have a description
    if (pstrVersion)
        *pstrVersion = 0;
    if (pcbVersion)
        *pcbVersion = 0;
    if (dw > 0) {
        if (pstrDescription && pcbDescription)
            lstrcpynW(pstrDescription, (LPCWSTR)&icinfo.szDescription,
			min(*pcbDescription / 2,
			lstrlenW((LPCWSTR)&icinfo.szDescription) + 1));
	if (pcbDescription)
	    // string length in bytes, incl. NULL
	    *pcbDescription = lstrlenW((LPCWSTR)&icinfo.szDescription) * 2 + 2;
    } else {
        if (pstrDescription) {
    	    *pstrDescription = 0;
	if (pcbDescription)
	    *pcbDescription = 0;
	}
    }

    
    return NOERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\draw.c ===
/*
 * Software MJPEG Codec
 *
 * Copyright (c) Paradigm Matrix 1993
 * All Rights Reserved
 *
 */

#include <windows.h>
#include <windowsx.h>
#include <mmsystem.h>
// #include <compddk.h>

#include "mjpeg.h"


/*
 * position and enable the overlay at pinst->rcDest (screen co-ords)
 */
DWORD
PlaceOverlay(PINSTINFO pinst)
{
#ifdef DRAW_SUPPORT

    DWORD mode;
    OVERLAY_RECTS or;
    RECT rc;
    COLORREF cref;
    RECT rcClient;
    HDC hdc;
    HBRUSH hbrOld;

    /*
     * check we have a device that supports overlay
     */
    if((pinst->vh == NULL) ||
       ((mode = VC_GetOverlayMode(pinst->vh)) == 0)) {
	   return((DWORD) ICERR_ERROR);
    }




    /*
     * set the destination rect. This is the screen co-ords where
     * the video should appear - and so is the overlay rect.
     */
    or.ulCount = 1;
    or.rcRects[0] = pinst->rcDest;

    if (!VC_SetOverlayRect(pinst->vh, &or)) {
	return( (DWORD) ICERR_ERROR);
    }

    /*
     * set the overlay offset. this tells the board which pixel
     * to place at the top-left of the overlay window. For us, this
     * should always be pixel(0,0) of the frame buffer, so that whatever
     * we draw to the framebuffer can go straight to the top left, and will
     * appear correctly in the top left of the window
     */
    SetRect(&rc, 0, 0, pinst->rcDest.right - pinst->rcDest.left,
		    	pinst->rcDest.bottom - pinst->rcDest.top);
    if (!VC_SetOverlayOffset(pinst->vh, &rc)) {
	return( (DWORD) ICERR_ERROR);
    }



    /* init the overlay colour and brush if we haven't yet */

    if (pinst->hKeyBrush == NULL) {


	/*
	 * this version assumes a key-colour and simple rectangle
	 * combination
	 */
	ASSERT(mode & VCO_KEYCOLOUR);
	ASSERT(mode & VCO_SIMPLE_RECT);

	if (mode & VCO_KEYCOLOUR_FIXED) {

	    /* we need to get the key colour from the driver
	     * check first if we are getting rgb or palette index
	     */
	    if (mode & VCO_KEYCOLOUR_RGB) {
		cref = VC_GetKeyColour(pinst->vh);
	    } else {
		cref = PALETTEINDEX(VC_GetKeyColour(pinst->vh));
	    }
	} else {
	    /* we can set it ourselves. Check whether we should be setting
	     * an RGB or a palette index
	     */
	    if (mode & VCO_KEYCOLOUR_RGB) {
		RGBQUAD rgbq;

		rgbq.rgbBlue = 0x7f;
		rgbq.rgbGreen = 0;
		rgbq.rgbRed = 0x7f;
		VC_SetKeyColourRGB(pinst->vh, &rgbq);

		cref = RGB(0x7f, 0, 0x7f);

    	    } else {

		VC_SetKeyColourPalIdx(pinst->vh, 5);
		cref = PALETTEINDEX(5);
	    }
	}

	pinst->hKeyBrush = CreateSolidBrush(cref);
    }


    /* convert the screen co-ords for the overlay location into
     * client window co-ords
     */
    rcClient = pinst->rcDest;
    MapWindowPoints(HWND_DESKTOP, pinst->hwnd, (PPOINT) &rcClient, 2);


    /* paint the key colour over all the overlay area */
    hdc = GetDC(pinst->hwnd);
    hbrOld = SelectObject(hdc, pinst->hKeyBrush);
    PatBlt(hdc, rcClient.left, rcClient.top,
	        rcClient.right - rcClient.left,
		rcClient.bottom - rcClient.top,
		PATCOPY);
    SelectObject(hdc, hbrOld);
    ReleaseDC(pinst->hwnd, hdc);

    /* switch on overlay */
    VC_Overlay(pinst->vh, TRUE);


    return(ICERR_OK);
#else
	return((DWORD) ICERR_UNSUPPORTED); // for now, only decompress
#endif

}


/*
 * check whether we can do this drawing or not
 */
DWORD
DrawQuery(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut)
{

#ifdef DRAW_SUPPORT

    VCUSER_HANDLE vh;

	return((DWORD) ICERR_UNSUPPORTED); // for now, only decompress
    
    /* check that the input is our format */
    if ((lpbiIn->biCompression != FOURCC_MJPEG) ||
	(lpbiIn->biBitCount != 24)) {
	    return( (DWORD) ICERR_UNSUPPORTED);
    }

    /*
     * check 1:1 - we don't stretch (if we are given a output format)
     */
    if (lpbiOut != NULL) {
	if ((lpbiIn->biWidth != lpbiOut->biWidth) ||
	    (lpbiIn->biHeight != lpbiOut->biHeight)) {
		return((DWORD) ICERR_UNSUPPORTED);
	}
    }


    /*
     * check we can open the device (if we haven't already done this)
     */
    if (pinst->vh == NULL) {

	int i;

	/* for now, since there is no easy way of telling how
	 * many devices exist (and they may not be contiguous - and
	 * we cannot distinguish failure to exist from being busy),
	 * we will try all of the first 16 devices to see if any
	 * are available for overlaying
	 */
	for (i = 0; i < 16; i++) {
	    if ((vh = VC_OpenDevice(NULL, i))  != NULL) {
		
		/* check this device can overlay */
		if ((VC_GetOverlayMode(vh) & VCO_CAN_DRAW) != 0) {

		    /* found a good device */
		    break;
		}

		// no draw support - close and try next
		VC_CloseDevice(vh);
		vh = NULL;
	    }
	}
	if (vh == NULL) {
	    // we failed to find a device
	    return((DWORD) ICERR_UNSUPPORTED);
	}

	/* that's it - we can do it */
	VC_CloseDevice(vh);
    }

    return(ICERR_OK);
#else
	return((DWORD) ICERR_UNSUPPORTED); // for now, only decompress
#endif

}


/*
 * initiate decompress&draw
 *
 * check that the input and output formats and sizes are valid, and
 * that we can access the hardware.
 *
 * enable the overlay in the correct position
 *
 * Note that draw-begin and draw-end are not necessarily issued one-for-one,
 * so the device may well still be open at this call.
 */
DWORD
DrawBegin(
    PINSTINFO pinst,
    ICDRAWBEGIN * icinfo,
    DWORD dwSize
)
{
#ifdef DRAW_SUPPORT


    /*
     * check that this is our format
     */
    if ((icinfo->lpbi->biCompression != FOURCC_MJPEG) ||
	(icinfo->lpbi->biBitCount != 16)) {
	    return((DWORD) ICERR_UNSUPPORTED);
    }


    if (icinfo->dwFlags & ICDRAW_FULLSCREEN) {
	return((DWORD) ICERR_UNSUPPORTED);
    }

    /*
     * check 1:1 (we don't stretch)
     */
    if ((icinfo->dxDst != icinfo->dxSrc) ||
	(icinfo->dyDst != icinfo->dySrc)) {
	    return((DWORD) ICERR_UNSUPPORTED);
    }


    /*
     * check we can open the device - if we haven't already done this.
     */

    if (pinst->vh == NULL) {

	int i;

	/* for now, since there is no easy way of telling how
	 * many devices exist (and they may not be contiguous - and
	 * we cannot distinguish failure to exist from being busy),
	 * we will try all of the first 16 devices to see if any
	 * are available for overlaying
	 */
	for (i = 0; i < 16; i++) {
	    if ((pinst->vh = VC_OpenDevice(NULL, i))  != NULL) {
		
		/* check this device can overlay */
		if ((VC_GetOverlayMode(pinst->vh) & VCO_CAN_DRAW) != 0) {

		    /* found a good device */
		    break;
		}

		// no draw support - close and try next
		VC_CloseDevice(pinst->vh);
		pinst->vh = NULL;
	    }
	}

	if (pinst->vh == NULL) {
	    // we failed to find a device
	    return((DWORD) ICERR_UNSUPPORTED);
	}

	/* if this was a query - that's it. remember to close the device*/
	if (icinfo->dwFlags & ICDRAW_QUERY) {
	    VC_CloseDevice(pinst->vh);
	    pinst->vh = NULL;
    	}
    }



    /*
     * we have checked all we need to check for a query. Don't close
     * the device though, unless we just opened it for this query.
     */
    if (icinfo->dwFlags & ICDRAW_QUERY) {
	return(ICERR_OK);
    }


    /*
     * remember the bits we will need later
     */

    /*
     * client window to draw into.
     *
     * Note that we also need a DC to paint the key-colour with. We should
     * not use the DC passed with this message, as it will not remain valid
     * (eg after a draw-end, we will still need a dc in processing draw-window).
     * One alternative is to store the dc passed here, and to replace it with
     * the dc passed with a draw-realize message. A cleaner solution (adopted
     * here) is to get our own dc each time we need it.
     */
    pinst->hwnd = icinfo->hwnd;

    /*
     * this is the portion of the original dib that we are to draw
     */
    SetRect(&pinst->rcSource,
	    	icinfo->xSrc,
		icinfo->ySrc,
		icinfo->dxSrc + icinfo->xSrc,
		icinfo->dySrc + icinfo->ySrc);

    /*
     * this is the location (in window co-ords) within the client window
     * where the video is to appear.
     */
    SetRect(&pinst->rcDest,
	    	icinfo->xDst,
		icinfo->yDst,
		icinfo->dxDst + icinfo->xDst,
		icinfo->dyDst + icinfo->yDst);
    /*
     * we need to convert the rcDest from window-based to screen-based before
     * writing to the hardware.
     */
    MapWindowPoints(pinst->hwnd, HWND_DESKTOP, (PPOINT) &pinst->rcDest, 2);


    /*
     * enable and position the overlay
     */
    return(PlaceOverlay(pinst));
#else
	return((DWORD)ICERR_UNSUPPORTED);
#endif


}


/*
 * decompress and render a single frame. Note that if we are pre-buffering,
 * (which we don't in this driver), we should not start rendering frames
 * until the draw-start message. As we don't pre-buffer (we don't respond
 * to the ICM_GETBUFFERSWANTED message), we can render as soon as we
 * get the draw request.
 */
DWORD
Draw(
    PINSTINFO pinst,
    ICDRAW * icinfo,
    DWORD dwSize
)
{
#ifdef DRAW_SUPPORT

    DRAWBUFFER Draw;
    LPBITMAPINFOHEADER lpbi;

    /*
     * do we have anything to do ? As we don't do inter-frame compression or
     * any form of pre-buffering, we can do nothing for any of these
     * occasions
     */
    if (icinfo->dwFlags & (ICDRAW_HURRYUP | ICDRAW_PREROLL | ICDRAW_NULLFRAME)) {
	return(ICERR_OK);
    }

    /*
     * UPDATE means draw an existing frame, rather than a new frame.
     * Sometimes we will not get data - in this case it is already in
     * the hardware and we need do nothing (a separate draw-window message
     * will have been sent to sync the overlay region).
     *
     * If, however, there is data, then we should draw it. Update in this
     * case means that the data is not a delta on a previous frame. However,
     * we may never have seen this frame before, so it may not be in the
     * frame buffer.
     */
    if ((icinfo->dwFlags & ICDRAW_UPDATE) &&
	    ((icinfo->cbData == 0) || (icinfo->lpData == NULL))) {
	return(ICERR_OK);
    }

    Draw.lpData = icinfo->lpData;
    Draw.rcSource = pinst->rcSource;
    Draw.Format = FOURCC_MJPEG;
    lpbi = (LPBITMAPINFOHEADER) icinfo->lpFormat;
    Draw.ulWidth = lpbi->biWidth;
    Draw.ulHeight = lpbi->biHeight;

    /* check that a draw-begin has happened */
    if (pinst->vh == NULL) {
	return((DWORD) ICERR_ERROR);
    }

    if (!VC_DrawFrame(pinst->vh, &Draw)) {
	return((DWORD) ICERR_ERROR);
    }

    return(ICERR_OK);
#else
	return((DWORD) ICERR_UNSUPPORTED);
#endif

}

/*
 * stop rendering, and disable overlay. In fact, this function is not
 * called in response to the ICM_DRAW_END message as this comes too early -
 * it is done in response to device close. see drvproc.c for draw message
 * handling comments.
 */
DWORD
DrawEnd(PINSTINFO pinst)
{
#ifdef DRAW_SUPPORT

    if (pinst->vh) {

	dprintf2(("close yuv hardware"));

	VC_Overlay(pinst->vh, FALSE);
	VC_CloseDevice(pinst->vh);
	pinst->vh = NULL;
    }

    if (pinst->hKeyBrush) {
	DeleteObject(pinst->hKeyBrush);
	pinst->hKeyBrush = NULL;
    }

    return(ICERR_OK);
#else
	return((DWORD)ICERR_UNSUPPORTED);
#endif
}

/*
 * window has moved.
 * we are given the new dest-rect in screen co-ords - but possibly only the
 * vis-region or z-ordering have changed.
 */
DWORD
DrawWindow(PINSTINFO pinst, PRECT prc)
{
   pinst->rcDest = *prc;

   return(PlaceOverlay(pinst));
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\drvproc.c ===
/* Copyright (c) 1994 Paradigm Matrix.
   All Rights Reserved.
*/

#include <windows.h>
#include <mmsystem.h>
#include "mjpeg.h"
#include <stdio.h>

/////////////////////////////////////////////////////////////////////////////
// added to assist unicode builds -anuragsh
const TCHAR *szSubKey_SoftwareParadigmMatrixSoftwareMJPEGCodec =
    TEXT("Software\\Paradigm Matrix\\Software M-JPEG Codec");

const TCHAR *szValue_Enabled =
    TEXT("Enabled");
//
/////////////////////////////////////////////////////////////////////////////

HMODULE ghModule;
DWORD driverEnabled = TRUE;
tErrorMessageEntry *errorMessages = NULL;

extern void ClearErrorMessages();

// for testing
volatile ICDECOMPRESSEX *decompressEx;

// not needed for filter
#if 0

/***************************************************************************
 * DriverProc  -  The entry point for an installable driver.
 *
 * PARAMETERS
 * dwDriverId:  For most messages, <dwDriverId> is the DWORD
 *     value that the driver returns in response to a <DRV_OPEN> message.
 *     Each time that the driver is opened, through the <DrvOpen> API,
 *     the driver receives a <DRV_OPEN> message and can return an
 *     arbitrary, non-zero value. The installable driver interface
 *     saves this value and returns a unique driver handle to the
 *     application. Whenever the application sends a message to the
 *     driver using the driver handle, the interface routes the message
 *     to this entry point and passes the corresponding <dwDriverId>.
 *     This mechanism allows the driver to use the same or different
 *     identifiers for multiple opens but ensures that driver handles
 *     are unique at the application interface layer.
 *
 *     The following messages are not related to a particular open
 *     instance of the driver. For these messages, the dwDriverId
 *     will always be zero.
 *
 *         DRV_LOAD, DRV_FREE, DRV_ENABLE, DRV_DISABLE, DRV_OPEN
 *
 * hDriver: This is the handle returned to the application by the
 *    driver interface.
 *
 * uiMessage: The requested action to be performed. Message
 *     values below <DRV_RESERVED> are used for globally defined messages.
 *     Message values from <DRV_RESERVED> to <DRV_USER> are used for
 *     defined driver protocols. Messages above <DRV_USER> are used
 *     for driver specific messages.
 *
 * lParam1: Data for this message.  Defined separately for
 *     each message
 *
 * lParam2: Data for this message.  Defined separately for
 *     each message
 *
 * RETURNS
 *   Defined separately for each message.
 *
 ***************************************************************************/

LRESULT  DriverProc(DWORD dwDriverID, HDRVR hDriver, UINT uiMessage, LPARAM lParam1, LPARAM lParam2)
{
    INSTINFO *pi = (INSTINFO *)(UINT)dwDriverID; 	
	
	// __asm int 3

// #ifdef zzz
	if (dwDriverID == 0) {
		if (!((uiMessage == DRV_LOAD) ||
			  (uiMessage == DRV_FREE) ||
			  (uiMessage == DRV_OPEN) ||
			  (uiMessage == DRV_DISABLE) ||
			  (uiMessage == DRV_ENABLE) ||
			  (uiMessage == DRV_INSTALL) ||
			  (uiMessage == DRV_REMOVE)))
			return ICERR_UNSUPPORTED;
	}
// #endif

    switch (uiMessage)
    {
	case DRV_LOAD:
	    return (LRESULT) 1L;

	case DRV_FREE:
	    return (LRESULT)1L;

    case DRV_OPEN:
	    // if being opened with no open struct, then return a non-zero
	    // value without actually opening
	    if (lParam2 == 0L)
                return 0xFFFF0000;

	    return (LRESULT) Open((ICOPEN FAR *) lParam2);

	case DRV_CLOSE:
#ifdef WIN32
	    if (dwDriverID != 0xFFFF0000)
#else
	    if (pi)
#endif
		Close(pi);

	    return (LRESULT)1L;

	/*********************************************************************

	    state messages

	*********************************************************************/

        case DRV_QUERYCONFIGURE:    // configuration from drivers applet
            return DRV_OK; // (LRESULT)0L;

        case DRV_CONFIGURE:
			Configure(pi, (HWND)lParam1);
            return DRV_OK;

        case ICM_CONFIGURE:
            //
            //  return ICERR_OK if you will do a configure box, error otherwise
            //
            if (lParam1 == -1)
		return QueryConfigure(pi) ? ICERR_OK : ICERR_UNSUPPORTED;
	    else
		return Configure(pi, (HWND)lParam1);

        case ICM_ABOUT:
            //
            //  return ICERR_OK if you will do a about box, error otherwise
            //
            if (lParam1 == -1)
		return QueryAbout(pi) ? ICERR_OK : ICERR_UNSUPPORTED;
	    else
		return About(pi, (HWND)lParam1);

	case ICM_GETSTATE:
	    return GetState(pi, (LPVOID)lParam1, (DWORD)lParam2);

	case ICM_SETSTATE:
	    return SetState(pi, (LPVOID)lParam1, (DWORD)lParam2);

	case ICM_GETINFO:
            return GetInfo(pi, (ICINFO FAR *)lParam1, (DWORD)lParam2);

        case ICM_GETDEFAULTQUALITY:
            if (lParam1)
            {
                *((LPDWORD)lParam1) = 7500;
                return ICERR_OK;
            }
            break;
	
	/*********************************************************************

	    compression messages

	*********************************************************************/

	case ICM_COMPRESS_QUERY:
	    return CompressQuery(pi,
			 (LPBITMAPINFOHEADER)lParam1,
			 (JPEGBITMAPINFOHEADER *)lParam2);

	case ICM_COMPRESS_BEGIN:
	    return CompressBegin(pi,
			 (LPBITMAPINFOHEADER)lParam1,
			 (LPBITMAPINFOHEADER)lParam2);

	case ICM_COMPRESS_GET_FORMAT:
	    return CompressGetFormat(pi,
			 (LPBITMAPINFOHEADER)lParam1,
			 (JPEGBITMAPINFOHEADER *)lParam2);

	case ICM_COMPRESS_GET_SIZE:
	    return CompressGetSize(pi,
			 (LPBITMAPINFOHEADER)lParam1,
			 (LPBITMAPINFOHEADER)lParam2);
	
	case ICM_COMPRESS:
	    return Compress(pi,
			    (ICCOMPRESS FAR *)lParam1, (DWORD)lParam2);

	case ICM_COMPRESS_END:
	    return CompressEnd(pi);
	
	/*********************************************************************

	    decompress messages

	*********************************************************************/

	case ICM_DECOMPRESS_QUERY:
	    return DecompressQuery(pi,
			 (JPEGBITMAPINFOHEADER *)lParam1,
			 (LPBITMAPINFOHEADER)lParam2);

	case ICM_DECOMPRESS_BEGIN:
	    return DecompressBegin(pi,
			 (LPBITMAPINFOHEADER)lParam1,
			 (LPBITMAPINFOHEADER)lParam2);

	case ICM_DECOMPRESS_GET_FORMAT:
	    return DecompressGetFormat(pi,
			 (LPBITMAPINFOHEADER)lParam1,
                         (LPBITMAPINFOHEADER)lParam2);

        case ICM_DECOMPRESS_GET_PALETTE:
            return DecompressGetPalette(pi,
			 (LPBITMAPINFOHEADER)lParam1,
			 (LPBITMAPINFOHEADER)lParam2);

	case ICM_DECOMPRESS:
	    return Decompress(pi,
			 (ICDECOMPRESS FAR *)lParam1, (DWORD)lParam2);

	case ICM_DECOMPRESS_END:
	    return DecompressEnd(pi);

	/*********************************************************************

	    DecompressEx messages

	*********************************************************************/

	case ICM_DECOMPRESSEX_QUERY:
		{
#if 0
		char buf[128];

			decompressEx = (ICDECOMPRESSEX *)lParam1;
			sprintf(buf, "width %i height %i planes %i bits %i\n compression %8x %c %c %c %c  size %i",
			   decompressEx->lpbiDst->biWidth,
			   decompressEx->lpbiDst->biHeight,
			   decompressEx->lpbiDst->biPlanes,
			   decompressEx->lpbiDst->biBitCount,
			   (DWORD)decompressEx->lpbiDst->biCompression,
			   (decompressEx->lpbiDst->biCompression) & 0xff,
			   ((decompressEx->lpbiDst->biCompression) >> 8) & 0xff,
			   ((decompressEx->lpbiDst->biCompression) >> 16) & 0xff,
			   ((decompressEx->lpbiDst->biCompression) >> 24) & 0xff,
			   decompressEx->lpbiDst->biSizeImage);
			MessageBox(0,buf,"format info",MB_OK);
#endif

		return ICERR_BADFORMAT;
		}


	case ICM_DECOMPRESSEX_BEGIN:
		return ICERR_UNSUPPORTED;

	case ICM_DECOMPRESSEX:
		return ICERR_UNSUPPORTED;

	case ICM_DECOMPRESSEX_END:
		return ICERR_UNSUPPORTED;
	
		/*********************************************************************

	    draw messages

	*********************************************************************/

	case ICM_DRAW_BEGIN:
	    /*
	     * sent when a sequence of draw calls are about to start -
	     * enable hardware.
	     */
			return ICERR_UNSUPPORTED;
            // return DrawBegin(pi,(ICDRAWBEGIN FAR *)lParam1, (DWORD)lParam2);

	case ICM_DRAW:
	    /*
	     * frame ready for decompress. Since we don't have any pre-buffering,
	     * it is ok to render the frame at this time too. If we had
	     * pre-buffer, we would queue now, and start clocking frames out
	     * on the draw-start message.
	     */
			return ICERR_UNSUPPORTED;
//            return Draw(pi,(ICDRAW FAR *)lParam1, (DWORD)lParam2);

	case ICM_DRAW_END:
	    /*
	     * this message is sent when the sequence of draw calls has finished -
	     * note that the final frame should remain rendered!! - so we can't
	     * disable the hardware yet.
	     */
	    //return DrawEnd(pi);
		return ICERR_UNSUPPORTED;

//	    return((DWORD) ICERR_OK);


	case ICM_DRAW_WINDOW:
	    /*
	     * the window has changed position or z-ordering. re-sync the
	     * hardware rendering.
	     */
		return ICERR_UNSUPPORTED;
		// return(DrawWindow(pi, (PRECT)lParam1));


	case ICM_DRAW_QUERY:
	    /*
	     * can we draw this format ? (lParam2 may (should?) be null)
	     */
		return ICERR_BADFORMAT;
		 // jcb 11-15-96
	    //return DrawQuery(pi,
		//	 (LPBITMAPINFOHEADER)lParam1,
		//	 (LPBITMAPINFOHEADER)lParam2);

	case ICM_DRAW_START:
	case ICM_DRAW_STOP:
	    /*
	     * only relevant if you have pre-buffering.
	     */
		return ICERR_UNSUPPORTED;
		// return( (DWORD) ICERR_OK);



	/*********************************************************************

	    standard driver messages

	*********************************************************************/

	case DRV_DISABLE:
	case DRV_ENABLE:
	    return (LRESULT)1L;

	case DRV_INSTALL:
	case DRV_REMOVE:
	    return (LRESULT)DRV_OK;
    }

    if (uiMessage < DRV_USER)
        return DefDriverProc(dwDriverID, hDriver, uiMessage,lParam1,lParam2);
    else
	return ICERR_UNSUPPORTED;
}

#endif // 0

#ifdef WIN32

#ifdef FILTER_DLL
BOOL DllMain(PVOID hModule, ULONG Reason, PCONTEXT pContext)
{
DWORD kind;
DWORD value;
DWORD len;
HKEY keyHandle;
DWORD disposition;

	if (Reason == DLL_PROCESS_DETACH)
		ClearErrorMessages();
	else if (Reason == DLL_PROCESS_ATTACH) {
        ghModule = (HANDLE) hModule;
	
	if (RegCreateKeyEx(HKEY_CURRENT_USER,
				   szSubKey_SoftwareParadigmMatrixSoftwareMJPEGCodec,
				   0,
				   NULL,
				   REG_OPTION_NON_VOLATILE,
				   KEY_ALL_ACCESS,
				   NULL,
				   &keyHandle,
				   &disposition) == ERROR_SUCCESS) {
		kind = REG_DWORD;
		value = 0;
		len = sizeof(value);
		if (RegQueryValueEx(keyHandle,
						   szValue_Enabled,
						   NULL,
						   &kind,
						   (unsigned char *)&value,
						   &len) == ERROR_SUCCESS) {
		  driverEnabled = value;
		  }		
		else {
			RegSetValueEx(keyHandle,
						  szValue_Enabled,
						  0,
						  REG_DWORD,
						  (unsigned char *)&driverEnabled,
						  sizeof(DWORD));
		}
	  RegCloseKey(keyHandle);
	}

		
    }
    return TRUE;
}
#endif // FILTER_DLL

#else

/****************************************************************************
 * LibMain - Library initialization code.
 *
 * PARAMETERS
 * hModule: Our module handle.
 *
 * wHeapSize: The heap size from the .def file.
 *
 * lpCmdLine: The command line.
 *
 * Returns 1 if the initialization was successful and 0 otherwise.
 ***************************************************************************/
int NEAR PASCAL LibMain(HMODULE hModule, WORD wHeapSize, LPSTR lpCmdLine)
{
    ghModule = hModule;

    return 1;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jbufdst.c ===
/*
 * jdatadst.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains compression data destination routines for the case of
 * emitting JPEG data to a file (or any stdio stream).  While these routines
 * are sufficient for most applications, some will want to use a different
 * destination manager.
 * IMPORTANT: we assume that fwrite() will correctly transcribe an array of
 * JOCTETs into 8-bit-wide elements on external storage.  If char is wider
 * than 8 bits on your machine, you may need to do some tweaking.
 */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"


/* Expanded data destination object for buffer output */

typedef struct {
  struct jpeg_destination_mgr pub; /* public fields */

  JOCTET * buffer;		/* start of buffer */
  long bufferSize;
  int * outputSizePtr;
} my_destination_mgr;

typedef my_destination_mgr * my_dest_ptr;

#define OUTPUT_BUF_SIZE  4096	/* choose an efficiently fwrite'able size */


/*
 * Initialize destination --- called by jpeg_start_compress
 * before any data is actually written.
 */

METHODDEF void
init_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

}


/*
 * Empty the output buffer --- called whenever buffer fills up.
 *
 * In typical applications, this should write the entire output buffer
 * (ignoring the current state of next_output_byte & free_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been dumped.
 *
 * In applications that need to be able to suspend compression due to output
 * overrun, a FALSE return indicates that the buffer cannot be emptied now.
 * In this situation, the compressor will return to its caller (possibly with
 * an indication that it has not accepted all the supplied scanlines).  The
 * application should resume compression after it has made more room in the
 * output buffer.  Note that there are substantial restrictions on the use of
 * suspension --- see the documentation.
 *
 * When suspending, the compressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_output_byte & free_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point will be regenerated after resumption, so do not
 * write it out when emptying the buffer externally.
 */

METHODDEF boolean
empty_output_buffer (j_compress_ptr cinfo)
{
 
 
  return TRUE;
}


/*
 * Terminate destination --- called by jpeg_finish_compress
 * after all data has been written.  Usually needs to flush buffer.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF void
term_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
  
  *(dest->outputSizePtr) = dest->bufferSize - dest->pub.free_in_buffer;

}


/*
 * Prepare for output to a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing compression.
 */

GLOBAL void
jpeg_compress_dest (j_compress_ptr cinfo, JOCTET * buf, long * sizePtr)
{
  my_dest_ptr dest;

  /* The destination object is made permanent so that multiple JPEG images
   * can be written to the same file without re-executing jpeg_stdio_dest.
   * This makes it dangerous to use this manager and a different destination
   * manager serially with the same JPEG object, because their private object
   * sizes may be different.  Caveat programmer.
   */
  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
    cinfo->dest = (struct jpeg_destination_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_destination_mgr));
  }

  dest = (my_dest_ptr) cinfo->dest;
  dest->buffer = buf;
  dest->bufferSize = *sizePtr;
  dest->outputSizePtr = sizePtr;
  dest->pub.next_output_byte = buf;
  dest->pub.free_in_buffer = *sizePtr;

  dest->pub.init_destination = init_destination;
  dest->pub.empty_output_buffer = empty_output_buffer;
  dest->pub.term_destination = term_destination;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jbufsrc.c ===
/*
 * jbufsrc.c
 *
 * This file contains decompression data source routines for the case of
 * reading JPEG data from a buffer.  While these routines
 * are sufficient for most applications, some will want to use a different
 * source manager.
 * Copyright (c) 1994 Paradigm Matrix.
 * All Rights Reserved.
 */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"



typedef struct {
  struct jpeg_source_mgr pub;	/* public fields */

  JOCTET * buffer;		/* start of buffer */
  long bufferSize;
  boolean start_of_buffer;	/* have we gotten any data yet? */
} my_source_mgr;

typedef my_source_mgr * my_src_ptr;

JOCTET eoi_filler[4] = {0xFF, JPEG_EOI, 0xFF, JPEG_EOI}; // in case we run out of data

/*
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
 */

METHODDEF void
init_source (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_buffer = TRUE;
}


/*
 * Fill the input buffer --- called whenever buffer is emptied.
 *
 * In typical applications, this should read fresh data into the buffer
 * (ignoring the current state of next_input_byte & bytes_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been reloaded.  It is not necessary to
 * fill the buffer entirely, only to obtain at least one more byte.
 *
 * There is no such thing as an EOF return.  If the end of the file has been
 * reached, the routine has a choice of ERREXIT() or inserting fake data into
 * the buffer.  In most cases, generating a warning message and inserting a
 * fake EOI marker is the best course of action --- this will allow the
 * decompressor to output however much of the image is there.  However,
 * the resulting error message is misleading if the real problem is an empty
 * input file, so we handle that case specially.
 *
 * In applications that need to be able to suspend compression due to input
 * not being available yet, a FALSE return indicates that no more data can be
 * obtained right now, but more may be forthcoming later.  In this situation,
 * the decompressor will return to its caller (with an indication of the
 * number of scanlines it has read, if any).  The application should resume
 * decompression after it has loaded more data into the input buffer.  Note
 * that there are substantial restrictions on the use of suspension --- see
 * the documentation.
 *
 * When suspending, the decompressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point must be rescanned after resumption, so move it to
 * the front of the buffer rather than discarding it.
 */

METHODDEF boolean
fill_input_buffer (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  if (src->start_of_buffer) {
    if (src->bufferSize == 0) {
	  ERREXIT(cinfo, JERR_INPUT_EMPTY);
	  }
	else {
      src->pub.next_input_byte = src->buffer;
      src->pub.bytes_in_buffer = src->bufferSize;
      src->start_of_buffer = FALSE;
	  }
	}
  else {
    src->pub.next_input_byte = eoi_filler;
    src->pub.bytes_in_buffer = sizeof(eoi_filler);
	}
     
  return TRUE;
}


/*
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
 */

METHODDEF void
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
    while (num_bytes > (long) src->pub.bytes_in_buffer) {
      num_bytes -= (long) src->pub.bytes_in_buffer;
      (void) fill_input_buffer(cinfo);
    }
    src->pub.next_input_byte += (size_t) num_bytes;
    src->pub.bytes_in_buffer -= (size_t) num_bytes;
  }
}


/*
 * An additional method that can be provided by data source modules is the
 * resync_to_restart method for error recovery in the presence of RST markers.
 * For the moment, this source module just uses the default resync method
 * provided by the JPEG library.  That method assumes that no backtracking
 * is possible.
 */


/*
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.  Often a no-op.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF void
term_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}




/*
 * Prepare for input from a memory buffer.
 */

GLOBAL void
jpeg_decompress_src (j_decompress_ptr cinfo, JOCTET * srcData, long srcSize)
{
  my_src_ptr src;

  /* The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_source_mgr));
  }

  src = (my_src_ptr) cinfo->src;
  src->buffer = srcData;
  src->bufferSize = srcSize;
  src->pub.init_source = init_source;
  src->pub.fill_input_buffer = fill_input_buffer;
  src->pub.skip_input_data = skip_input_data;
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
  src->pub.term_source = term_source;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jccoefct.c ===
/*
 * jccoefct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the coefficient buffer controller for compression.
 * This controller is the top level of the JPEG compressor proper.
 * The coefficient buffer lies between forward-DCT and entropy encoding steps.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* We use a full-image coefficient buffer when doing Huffman optimization,
 * and also for writing multiple-scan JPEG files.  In all cases, the DCT
 * step is run during the first pass, and subsequent passes need only read
 * the buffered coefficients.
 */
#ifdef ENTROPY_OPT_SUPPORTED
#define FULL_COEF_BUFFER_SUPPORTED
#else
#ifdef C_MULTISCAN_FILES_SUPPORTED
#define FULL_COEF_BUFFER_SUPPORTED
#endif
#endif


/* Private buffer controller object */

typedef struct {
  struct jpeg_c_coef_controller pub; /* public fields */

  JDIMENSION MCU_row_num;	/* keep track of MCU row # within image */

  /* For single-pass compression, it's sufficient to buffer just one MCU
   * (although this may prove a bit slow in practice).  We allocate a
   * workspace of MAX_BLOCKS_IN_MCU coefficient blocks, and reuse it for each
   * MCU constructed and sent.  (On 80x86, the workspace is FAR even though
   * it's not really very big; this is to keep the module interfaces unchanged
   * when a large coefficient buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays.
   */
  JBLOCKROW MCU_buffer[MAX_BLOCKS_IN_MCU];

  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;


/* Forward declarations */
METHODDEF void compress_data
    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION *in_mcu_ctr));
#ifdef FULL_COEF_BUFFER_SUPPORTED
METHODDEF void compress_first_pass
    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION *in_mcu_ctr));
METHODDEF void compress_output
    JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION *in_mcu_ctr));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  coef->MCU_row_num = 0;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (coef->whole_image[0] != NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_data;
    break;
#ifdef FULL_COEF_BUFFER_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_first_pass;
    break;
  case JBUF_CRANK_DEST:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.compress_data = compress_output;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data in the single-pass case.
 * Up to one MCU row is processed (less if suspension is forced).
 *
 * NB: input_buf contains a plane for each component in image.
 * For single pass, this is the same as the components in the scan.
 */

METHODDEF void
compress_data (j_compress_ptr cinfo,
	       JSAMPIMAGE input_buf, JDIMENSION *in_mcu_ctr)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_MCU_row = cinfo->MCU_rows_in_scan - 1;
  int blkn, bi, ci, yindex, blockcnt;
  JDIMENSION ypos, xpos;
  jpeg_component_info *compptr;

  /* Loop to write as much as one whole MCU row */

  for (MCU_col_num = *in_mcu_ctr; MCU_col_num <= last_MCU_col; MCU_col_num++) {
    /* Determine where data comes from in input_buf and do the DCT thing.
     * Each call on forward_DCT processes a horizontal row of DCT blocks
     * as wide as an MCU; we rely on having allocated the MCU_buffer[] blocks
     * sequentially.  Dummy blocks at the right or bottom edge are filled in
     * specially.  The data in them does not matter for image reconstruction,
     * so we fill them with values that will encode to the smallest amount of
     * data, viz: all zeroes in the AC entries, DC entries equal to previous
     * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
     */
    blkn = 0;
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
					      : compptr->last_col_width;
      xpos = MCU_col_num * compptr->MCU_sample_width;
      ypos = 0;
      for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	if (coef->MCU_row_num < last_MCU_row ||
	    yindex < compptr->last_row_height) {
	  (*cinfo->fdct->forward_DCT) (cinfo, compptr,
				       input_buf[ci], coef->MCU_buffer[blkn],
				       ypos, xpos, (JDIMENSION) blockcnt);
	  if (blockcnt < compptr->MCU_width) {
	    /* Create some dummy blocks at the right edge of the image. */
	    jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
		      (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
	    for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
	    }
	  }
	} else {
	  /* Create a whole row of dummy blocks at the bottom of the image. */
	  jzero_far((void FAR *) coef->MCU_buffer[blkn],
		    compptr->MCU_width * SIZEOF(JBLOCK));
	  for (bi = 0; bi < compptr->MCU_width; bi++) {
	    coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
	  }
	}
	blkn += compptr->MCU_width;
	ypos += DCTSIZE;
      }
    }
    /* Try to write the MCU.  In event of a suspension failure, we will
     * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
     */
    if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer))
      break;			/* suspension forced; exit loop */
  }
  if (MCU_col_num > last_MCU_col)
    coef->MCU_row_num++;	/* advance if we finished the row */
  *in_mcu_ctr = MCU_col_num;
}


#ifdef FULL_COEF_BUFFER_SUPPORTED

/*
 * Process some data in the first pass of a multi-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the image.
 * This amount of data is read from the source buffer, DCT'd and quantized,
 * and saved into the virtual arrays.  We also generate suitable dummy blocks
 * as needed at the right and lower edges.  (The dummy blocks are constructed
 * in the virtual arrays, which have been padded appropriately.)  This makes
 * it possible for subsequent passes not to worry about real vs. dummy blocks.
 *
 * We must also emit the data to the entropy encoder.  This is conveniently
 * done by calling compress_output() after we've loaded the current strip
 * of the virtual arrays.
 *
 * NB: input_buf contains a plane for each component in image.  All
 * components are DCT'd and loaded into the virtual arrays in this pass.
 * However, it may be that only a subset of the components are emitted to
 * the entropy encoder during this first pass; be careful about looking
 * at the scan-dependent variables (MCU dimensions, etc).
 */

METHODDEF void
compress_first_pass (j_compress_ptr cinfo,
		     JSAMPIMAGE input_buf, JDIMENSION *in_mcu_ctr)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_MCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION blocks_across, MCUs_across, MCUindex;
  int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
  JCOEF lastDC;
  jpeg_component_info *compptr;
  JBLOCKARRAY buffer;
  JBLOCKROW thisblockrow, lastblockrow;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       coef->MCU_row_num * compptr->v_samp_factor, TRUE);
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (coef->MCU_row_num < last_MCU_row)
      block_rows = compptr->v_samp_factor;
    else {
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
    }
    blocks_across = compptr->width_in_blocks;
    h_samp_factor = compptr->h_samp_factor;
    /* Count number of dummy blocks to be added at the right margin. */
    ndummy = (int) (blocks_across % h_samp_factor);
    if (ndummy > 0)
      ndummy = h_samp_factor - ndummy;
    /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
     * on forward_DCT processes a complete horizontal row of DCT blocks.
     */
    for (block_row = 0; block_row < block_rows; block_row++) {
      thisblockrow = buffer[block_row];
      (*cinfo->fdct->forward_DCT) (cinfo, compptr,
				   input_buf[ci], thisblockrow,
				   (JDIMENSION) (block_row * DCTSIZE),
				   (JDIMENSION) 0, blocks_across);
      if (ndummy > 0) {
	/* Create dummy blocks at the right edge of the image. */
	thisblockrow += blocks_across; /* => first dummy block */
	jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
	lastDC = thisblockrow[-1][0];
	for (bi = 0; bi < ndummy; bi++) {
	  thisblockrow[bi][0] = lastDC;
	}
      }
    }
    /* If at end of image, create dummy block rows as needed.
     * The tricky part here is that within each MCU, we want the DC values
     * of the dummy blocks to match the last real block's DC value.
     * This squeezes a few more bytes out of the resulting file...
     */
    if (coef->MCU_row_num == last_MCU_row) {
      blocks_across += ndummy;	/* include lower right corner */
      MCUs_across = blocks_across / h_samp_factor;
      for (block_row = block_rows; block_row < compptr->v_samp_factor;
	   block_row++) {
	thisblockrow = buffer[block_row];
	lastblockrow = buffer[block_row-1];
	jzero_far((void FAR *) thisblockrow,
		  (size_t) (blocks_across * SIZEOF(JBLOCK)));
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
	  lastDC = lastblockrow[h_samp_factor-1][0];
	  for (bi = 0; bi < h_samp_factor; bi++) {
	    thisblockrow[bi][0] = lastDC;
	  }
	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
	  lastblockrow += h_samp_factor;
	}
      }
    }
  }
  /* NB: compress_output will increment MCU_row_num */

  /* Emit data to the entropy encoder, sharing code with subsequent passes */
  compress_output(cinfo, input_buf, in_mcu_ctr);
}


/*
 * Process some data in subsequent passes of a multi-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the scan.
 * The data is obtained from the virtual arrays and fed to the entropy coder.
 *
 * Note that output suspension is not supported during multi-pass operation,
 * so the complete MCU row will always be emitted to the entropy encoder
 * before returning.
 *
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF void
compress_output (j_compress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION *in_mcu_ctr)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset, num_MCU_rows;
  JDIMENSION remaining_rows, start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan.
   * NB: during first pass, this is safe only because the buffers will
   * already be aligned properly, so jmemmgr.c won't need to do any I/O.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
       coef->MCU_row_num * compptr->v_samp_factor, FALSE);
  }

  /* In an interleaved scan, we process exactly one MCU row.
   * In a noninterleaved scan, we need to process v_samp_factor MCU rows,
   * each of which contains a single block row.
   */
  if (cinfo->comps_in_scan == 1) {
    compptr = cinfo->cur_comp_info[0];
    num_MCU_rows = compptr->v_samp_factor;
    /* but watch out for the bottom of the image */
    remaining_rows = cinfo->MCU_rows_in_scan -
		     coef->MCU_row_num * compptr->v_samp_factor;
    if (remaining_rows < (JDIMENSION) num_MCU_rows)
      num_MCU_rows = (int) remaining_rows;
  } else {
    num_MCU_rows = 1;
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = 0; yoffset < num_MCU_rows; yoffset++) {
    for (MCU_col_num = 0; MCU_col_num < cinfo->MCUs_per_row; MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to write the MCU. */
      if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
	ERREXIT(cinfo, JERR_CANT_SUSPEND); /* not supported */
      }
    }
  }

  coef->MCU_row_num++;		/* advance to next iMCU row */
  *in_mcu_ctr = cinfo->MCUs_per_row;
}

#endif /* FULL_COEF_BUFFER_SUPPORTED */


/*
 * Initialize coefficient buffer controller.
 */

GLOBAL void
jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;
  int ci, i;
  jpeg_component_info *compptr;
  JBLOCKROW buffer;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef;

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef FULL_COEF_BUFFER_SUPPORTED
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note memmgr implicitly pads the vertical direction. */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 compptr->height_in_blocks,
	 (JDIMENSION) compptr->v_samp_factor);
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
    /* We only need a single-MCU buffer. */
    buffer = (JBLOCKROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
    for (i = 0; i < MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcapi.c ===
/*
 * jcapi.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the compression half of
 * the JPEG library.  Most of the routines intended to be called directly by
 * an application are in this file.  But also see jcparam.c for
 * parameter-setup helper routines, and jcomapi.c for routines shared by
 * compression and decompression.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Initialization of a JPEG compression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL void
jpeg_create_compress (j_compress_ptr cinfo)
{
  int i;

  /* For debugging purposes, zero the whole master structure.
   * But error manager pointer is already there, so save and restore it.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
    cinfo->err = err;
  }
  cinfo->is_decompressor = FALSE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->dest = NULL;

  cinfo->comp_info = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
    cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  cinfo->input_gamma = 1.0;	/* in case application forgets */

  /* OK, I'm ready */
  cinfo->global_state = CSTATE_START;
}


/*
 * Destruction of a JPEG compression object
 */

GLOBAL void
jpeg_destroy_compress (j_compress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Forcibly suppress or un-suppress all quantization and Huffman tables.
 * Marks all currently defined tables as already written (if suppress)
 * or not written (if !suppress).  This will control whether they get emitted
 * by a subsequent jpeg_start_compress call.
 *
 * This routine is exported for use by applications that want to produce
 * abbreviated JPEG datastreams.  It logically belongs in jcparam.c, but
 * since it is called by jpeg_start_compress, we put it here --- otherwise
 * jcparam.o would be linked whether the application used it or not.
 */

GLOBAL void
jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
  int i;
  JQUANT_TBL * qtbl;
  JHUFF_TBL * htbl;

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
      qtbl->sent_table = suppress;
  }

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
      htbl->sent_table = suppress;
    if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
      htbl->sent_table = suppress;
  }
}


/*
 * Compression initialization.
 * Before calling this, all parameters and a data destination must be set up.
 *
 * We require a write_all_tables parameter as a failsafe check when writing
 * multiple datastreams from the same compression object.  Since prior runs
 * will have left all the tables marked sent_table=TRUE, a subsequent run
 * would emit an abbreviated stream (no tables) by default.  This may be what
 * is wanted, but for safety's sake it should not be the default behavior:
 * programmers should have to make a deliberate choice to emit abbreviated
 * images.  Therefore the documentation and examples should encourage people
 * to pass write_all_tables=TRUE; then it will take active thought to do the
 * wrong thing.
 */

GLOBAL void
jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (write_all_tables)
    jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Perform master selection of active modules */
  jinit_master_compress(cinfo);
  /* Set up for the first pass */
  (*cinfo->master->prepare_for_pass) (cinfo);
  /* Ready for application to drive first pass through jpeg_write_scanlines
   * or jpeg_write_raw_data.
   */
  cinfo->next_scanline = 0;
  cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
}


/*
 * Write some scanlines of data to the JPEG compressor.
 *
 * The return value will be the number of lines actually written.
 * This should be less than the supplied num_lines only in case that
 * the data destination module has requested suspension of the compressor,
 * or if more than image_height scanlines are passed in.
 *
 * Note: we warn about excess calls to jpeg_write_scanlines() since
 * this likely signals an application programmer error.  However,
 * excess scanlines passed in the last valid call are *silently* ignored,
 * so that the application need not adjust num_lines for end-of-image
 * when using a multiple-scanline buffer.
 */

GLOBAL JDIMENSION
jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
		      JDIMENSION num_lines)
{
  JDIMENSION row_ctr, rows_left;

  if (cinfo->global_state != CSTATE_SCANNING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline >= cinfo->image_height)
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
    cinfo->progress->pass_limit = (long) cinfo->image_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Give master control module another chance if this is first call to
   * jpeg_write_scanlines.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_scanlines.
   */
  if (cinfo->master->call_pass_startup)
    (*cinfo->master->pass_startup) (cinfo);

  /* Ignore any extra scanlines at bottom of image. */
  rows_left = cinfo->image_height - cinfo->next_scanline;
  if (num_lines > rows_left)
    num_lines = rows_left;

  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
  cinfo->next_scanline += row_ctr;
  return row_ctr;
}


/*
 * Alternate entry point to write raw data.
 * Processes exactly one iMCU row per call.
 */

GLOBAL JDIMENSION
jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
		     JDIMENSION num_lines)
{
  JDIMENSION mcu_ctr, lines_per_MCU_row;

  if (cinfo->global_state != CSTATE_RAW_OK)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline >= cinfo->image_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->next_scanline;
    cinfo->progress->pass_limit = (long) cinfo->image_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Give master control module another chance if this is first call to
   * jpeg_write_raw_data.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_raw_data.
   */
  if (cinfo->master->call_pass_startup)
    (*cinfo->master->pass_startup) (cinfo);

  /* Verify that at least one iMCU row has been passed. */
  lines_per_MCU_row = cinfo->max_v_samp_factor * DCTSIZE;
  if (num_lines < lines_per_MCU_row)
    ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Directly compress the row. */
  mcu_ctr = 0;
  (*cinfo->coef->compress_data) (cinfo, data, &mcu_ctr);
  /* If compressor did not consume the whole row, then we must need to
   * suspend processing; this is not currently supported.
   */
  if (mcu_ctr != cinfo->MCUs_per_row)
    ERREXIT(cinfo, JERR_CANT_SUSPEND);

  /* OK, we processed one iMCU row. */
  cinfo->next_scanline += lines_per_MCU_row;
  return lines_per_MCU_row;
}


/*
 * Finish JPEG compression.
 *
 * If a multipass operating mode was selected, this may do a great deal of
 * work including most of the actual output.
 */

GLOBAL void
jpeg_finish_compress (j_compress_ptr cinfo)
{
  JDIMENSION iMCU_row, mcu_ctr;

  if (cinfo->global_state != CSTATE_SCANNING && 
      cinfo->global_state != CSTATE_RAW_OK)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline < cinfo->image_height)
    ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
  /* Terminate first pass */
  (*cinfo->master->finish_pass) (cinfo);
  /* Perform any remaining passes */
  while (! cinfo->master->is_last_pass) {
    (*cinfo->master->prepare_for_pass) (cinfo);
    for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
      if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) iMCU_row;
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* We bypass the main controller and invoke coef controller directly;
       * all work is being done from the coefficient buffer.
       */
      mcu_ctr = 0;
      (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL, &mcu_ctr);
      if (mcu_ctr != cinfo->MCUs_per_row)
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
    }
    (*cinfo->master->finish_pass) (cinfo);
  }
  /* Write EOI, do final cleanup */
  (*cinfo->marker->write_file_trailer) (cinfo);
  (*cinfo->dest->term_destination) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
}


/*
 * Write a special marker.
 * This is only recommended for writing COM or APPn markers.
 * Must be called after jpeg_start_compress() and before
 * first call to jpeg_write_scanlines() or jpeg_write_raw_data().
 */

GLOBAL void
jpeg_write_marker (j_compress_ptr cinfo, int marker,
		   const JOCTET *dataptr, unsigned int datalen)
{
  if (cinfo->next_scanline != 0 ||
      (cinfo->global_state != CSTATE_SCANNING &&
       cinfo->global_state != CSTATE_RAW_OK))
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  (*cinfo->marker->write_any_marker) (cinfo, marker, dataptr, datalen);
}


/*
 * Alternate compression function: just write an abbreviated table file.
 * Before calling this, all parameters and a data destination must be set up.
 *
 * To produce a pair of files containing abbreviated tables and abbreviated
 * image data, one would proceed as follows:
 *
 *		initialize JPEG object
 *		set JPEG parameters
 *		set destination to table file
 *		jpeg_write_tables(cinfo);
 *		set destination to image file
 *		jpeg_start_compress(cinfo, FALSE);
 *		write data...
 *		jpeg_finish_compress(cinfo);
 *
 * jpeg_write_tables has the side effect of marking all tables written
 * (same as jpeg_suppress_tables(..., TRUE)).  Thus a subsequent start_compress
 * will not re-emit the tables unless it is passed write_all_tables=TRUE.
 */

GLOBAL void
jpeg_write_tables (j_compress_ptr cinfo)
{
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Initialize the marker writer ... bit of a crock to do it here. */
  jinit_marker_writer(cinfo);
  /* Write them tables! */
  (*cinfo->marker->write_tables_only) (cinfo);
  /* And clean up. */
  (*cinfo->dest->term_destination) (cinfo);
  /* We can use jpeg_abort to release memory ... is this necessary? */
  jpeg_abort((j_common_ptr) cinfo);
}


/*
 * Abort processing of a JPEG compression operation,
 * but don't destroy the object itself.
 */

GLOBAL void
jpeg_abort_compress (j_compress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jccolor.c ===
/*
 * jccolor.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains input colorspace conversion routines.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private subobject */

typedef struct {
  struct jpeg_color_converter pub; /* public fields */

  /* Private state for RGB->YCC conversion */
  INT32 * rgb_ycc_tab;		/* => table for RGB to YCbCr conversion */
} my_color_converter;

typedef my_color_converter * my_cconvert_ptr;


/**************** RGB -> YCbCr conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	Y  =  0.29900 * R + 0.58700 * G + 0.11400 * B
 *	Cb = -0.16874 * R - 0.33126 * G + 0.50000 * B  + MAXJSAMPLE/2
 *	Cr =  0.50000 * R - 0.41869 * G - 0.08131 * B  + MAXJSAMPLE/2
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times R,G,B for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The MAXJSAMPLE/2 offsets and the rounding fudge-factor of 0.5 are included
 * in the tables to save adding them separately in the inner loop.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))

/* We allocate one big table and divide it up into eight parts, instead of
 * doing eight alloc_small requests.  This lets us use a single table base
 * address, which can be held in a register in the inner loops on many
 * machines (more than can hold all eight addresses, anyway).
 */

#define R_Y_OFF		0			/* offset to R => Y section */
#define G_Y_OFF		(1*(MAXJSAMPLE+1))	/* offset to G => Y section */
#define B_Y_OFF		(2*(MAXJSAMPLE+1))	/* etc. */
#define R_CB_OFF	(3*(MAXJSAMPLE+1))
#define G_CB_OFF	(4*(MAXJSAMPLE+1))
#define B_CB_OFF	(5*(MAXJSAMPLE+1))
#define R_CR_OFF	B_CB_OFF		/* B=>Cb, R=>Cr are the same */
#define G_CR_OFF	(6*(MAXJSAMPLE+1))
#define B_CR_OFF	(7*(MAXJSAMPLE+1))
#define TABLE_SIZE	(8*(MAXJSAMPLE+1))


/*
 * Initialize for RGB->YCC colorspace conversion.
 */

METHODDEF void
rgb_ycc_start (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  INT32 * rgb_ycc_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
    rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
    rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
    rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
    rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
    rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
    rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + ONE_HALF*(MAXJSAMPLE+1);
/*  B=>Cb and R=>Cr tables are the same
    rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + ONE_HALF*(MAXJSAMPLE+1);
*/
    rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
    rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 *
 * Note that we change from the application's interleaved-pixel format
 * to our internal noninterleaved, one-plane-per-component format.
 * The input buffer is therefore three times as wide as the output buffer.
 *
 * A starting row offset is provided only for the output buffer.  The caller
 * can easily adjust the passed input_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF void
rgb_ycc_convert (j_compress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		 JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
  register UINT32 pixel;
  register int pixel_size;			/* number of bytes per pixel, 2,3,4 */
  register UINT32 pixel_mask;			/* for clearing empty byte of 32-bit pixels */
  register UINT32 red_pixel_mask;
  register int red_pixel_shift;
  register UINT32 green_pixel_mask;
  register int green_pixel_shift;
  register UINT32 blue_pixel_mask;
  register int blue_pixel_shift;

  
  /* put these someplace faster */
  pixel_size = cinfo->pixel_size;
  pixel_mask = cinfo->pixel_mask;
  red_pixel_mask = cinfo->red_pixel_mask;
  red_pixel_shift = cinfo->red_pixel_shift;
  green_pixel_mask = cinfo->green_pixel_mask;
  green_pixel_shift = cinfo->green_pixel_shift;
  blue_pixel_mask = cinfo->blue_pixel_mask;
  blue_pixel_shift = cinfo->blue_pixel_shift;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {

	  pixel = *((UINT32 *)inptr); /* get the pixel */
	  inptr += pixel_size;

      if (red_pixel_shift >= 0)	  
        r = ((pixel >> red_pixel_shift) & red_pixel_mask);
	  else
        r = ((pixel << (-red_pixel_shift)) & red_pixel_mask);
	  
      if (green_pixel_shift >= 0)	  
        g = ((pixel >> green_pixel_shift) & green_pixel_mask);
	  else
        g = ((pixel << (-green_pixel_shift)) & green_pixel_mask);
	  
      if (blue_pixel_shift >= 0)	  
        b = ((pixel >> blue_pixel_shift) & blue_pixel_mask);
	  else
        b = ((pixel << (-blue_pixel_shift)) & blue_pixel_mask);
	  
      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
       * must be too; we do not need an explicit range-limiting operation.
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
		 >> SCALEBITS);
      /* Cr */
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
    }
  }
}


/**************** Cases other than RGB -> YCbCr **************/


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles RGB->grayscale conversion, which is the same
 * as the RGB->Y portion of RGB->YCbCr.
 * We assume rgb_ycc_start has been called (we only use the Y tables).
 */

METHODDEF void
rgb_gray_convert (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		  JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr = output_buf[0][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = GETJSAMPLE(inptr[RGB_RED]);
      g = GETJSAMPLE(inptr[RGB_GREEN]);
      b = GETJSAMPLE(inptr[RGB_BLUE]);
      inptr += RGB_PIXELSIZE;
      /* Y */
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles Adobe-style CMYK->YCCK conversion,
 * where we convert R=1-C, G=1-M, and B=1-Y to YCbCr using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume rgb_ycc_start has been called.
 */

METHODDEF void
cmyk_ycck_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr0 = output_buf[0][output_row];
    outptr1 = output_buf[1][output_row];
    outptr2 = output_buf[2][output_row];
    outptr3 = output_buf[3][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
      g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
      b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
      /* K passes through as-is */
      outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
      inptr += 4;
      /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
       * must be too; we do not need an explicit range-limiting operation.
       * Hence the value being shifted is never negative, and we don't
       * need the general RIGHT_SHIFT macro.
       */
      /* Y */
      outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
      /* Cb */
      outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
		 >> SCALEBITS);
      /* Cr */
      outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
    }
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles grayscale output with no conversion.
 * The source can be either plain grayscale or YCbCr (since Y == gray).
 */

METHODDEF void
grayscale_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
  int instride = cinfo->input_components;

  while (--num_rows >= 0) {
    inptr = *input_buf++;
    outptr = output_buf[0][output_row];
    output_row++;
    for (col = 0; col < num_cols; col++) {
      outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
      inptr += instride;
    }
  }
}


/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles multi-component colorspaces without conversion.
 * We assume input_components == num_components.
 */

METHODDEF void
null_convert (j_compress_ptr cinfo,
	      JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	      JDIMENSION output_row, int num_rows)
{
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  register int ci;
  int nc = cinfo->num_components;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
    /* It seems fastest to make a separate pass for each component. */
    for (ci = 0; ci < nc; ci++) {
      inptr = *input_buf;
      outptr = output_buf[ci][output_row];
      for (col = 0; col < num_cols; col++) {
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
	inptr += nc;
      }
    }
    input_buf++;
    output_row++;
  }
}


/*
 * Empty method for start_pass.
 */

METHODDEF void
null_method (j_compress_ptr cinfo)
{
  /* no work needed */
}


/*
 * Module initialization routine for input colorspace conversion.
 */

GLOBAL void
jinit_color_converter (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_converter));
  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
  /* set start_pass to null method until we find out differently */
  cconvert->pub.start_pass = null_method;

  /* Make sure input_components agrees with in_color_space */
  switch (cinfo->in_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->input_components != 1)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  case JCS_RGB:
#if RGB_PIXELSIZE != 3
    if (cinfo->input_components != RGB_PIXELSIZE)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;
#endif /* else share code with YCbCr */

  case JCS_YCbCr:
    if (cinfo->input_components != 3)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->input_components != 4)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->input_components < 1)
      ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
    break;
  }

  /* Check num_components, set conversion method based on requested space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_GRAYSCALE)
      cconvert->pub.color_convert = grayscale_convert;
    else if (cinfo->in_color_space == JCS_RGB) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgb_gray_convert;
    } else if (cinfo->in_color_space == JCS_YCbCr)
      cconvert->pub.color_convert = grayscale_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_RGB:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_YCbCr:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_RGB) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = rgb_ycc_convert;
    } else if (cinfo->in_color_space == JCS_YCbCr)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_CMYK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_CMYK)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_YCCK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    if (cinfo->in_color_space == JCS_CMYK) {
      cconvert->pub.start_pass = rgb_ycc_start;
      cconvert->pub.color_convert = cmyk_ycck_convert;
    } else if (cinfo->in_color_space == JCS_YCCK)
      cconvert->pub.color_convert = null_convert;
    else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  default:			/* allow null conversion of JCS_UNKNOWN */
    if (cinfo->jpeg_color_space != cinfo->in_color_space ||
	cinfo->num_components != cinfo->input_components)
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    cconvert->pub.color_convert = null_convert;
    break;
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcdctmgr.c ===
/*
 * jcdctmgr.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the forward-DCT management logic.
 * This code selects a particular DCT implementation to be used,
 * and it performs related housekeeping chores including coefficient
 * quantization.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */


/* Private subobject for this module */

typedef struct {
  struct jpeg_forward_dct pub;	/* public fields */

  /* Pointer to the DCT routine actually in use */
  forward_DCT_method_ptr do_dct;

  /* The actual post-DCT divisors --- not identical to the quant table
   * entries, because of scaling (especially for an unnormalized DCT).
   * Each table is given in zigzag order.
   */
  DCTELEM * divisors[NUM_QUANT_TBLS];

#ifdef DCT_FLOAT_SUPPORTED
  /* Same as above for the floating-point case. */
  float_DCT_method_ptr do_float_dct;
  FAST_FLOAT * float_divisors[NUM_QUANT_TBLS];
#endif
} my_fdct_controller;

typedef my_fdct_controller * my_fdct_ptr;


/* ZAG[i] is the natural-order position of the i'th element of zigzag order. */

static const int ZAG[DCTSIZE2] = {
  0,  1,  8, 16,  9,  2,  3, 10,
 17, 24, 32, 25, 18, 11,  4,  5,
 12, 19, 26, 33, 40, 48, 41, 34,
 27, 20, 13,  6,  7, 14, 21, 28,
 35, 42, 49, 56, 57, 50, 43, 36,
 29, 22, 15, 23, 30, 37, 44, 51,
 58, 59, 52, 45, 38, 31, 39, 46,
 53, 60, 61, 54, 47, 55, 62, 63
};


/*
 * Initialize for a processing pass.
 * Verify that all referenced Q-tables are present, and set up
 * the divisor table for each one.
 * In the current implementation, DCT of all components is done during
 * the first pass, even if only some components will be output in the
 * first scan.  Hence all components should be examined here.
 */

METHODDEF void
start_pass_fdctmgr (j_compress_ptr cinfo)
{
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  int ci, qtblno, i;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;
  DCTELEM * dtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    qtblno = compptr->quant_tbl_no;
    /* Make sure specified quantization table is present */
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    qtbl = cinfo->quant_tbl_ptrs[qtblno];
    /* Compute divisors for this quant table */
    /* We may do this more than once for same table, but it's not a big deal */
    switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
    case JDCT_ISLOW:
      /* For LL&M IDCT method, divisors are equal to raw quantization
       * coefficients multiplied by 8 (to counteract scaling).
       */
      if (fdct->divisors[qtblno] == NULL) {
	fdct->divisors[qtblno] = (DCTELEM *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      DCTSIZE2 * SIZEOF(DCTELEM));
      }
      dtbl = fdct->divisors[qtblno];
      for (i = 0; i < DCTSIZE2; i++) {
	dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
      }
      break;
#endif
#ifdef DCT_IFAST_SUPPORTED
    case JDCT_IFAST:
      {
	/* For AA&N IDCT method, divisors are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 8.
	 */
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits: in natural order */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	if (fdct->divisors[qtblno] == NULL) {
	  fdct->divisors[qtblno] = (DCTELEM *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					DCTSIZE2 * SIZEOF(DCTELEM));
	}
	dtbl = fdct->divisors[qtblno];
	for (i = 0; i < DCTSIZE2; i++) {
	  dtbl[i] = (DCTELEM)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
				  (INT32) aanscales[ZAG[i]]),
		    CONST_BITS-3);
	}
      }
      break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
    case JDCT_FLOAT:
      {
	/* For float AA&N IDCT method, divisors are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 8.
	 * What's actually stored is 1/divisor so that the inner loop can
	 * use a multiplication rather than a division.
	 */
	FAST_FLOAT * fdtbl;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	if (fdct->float_divisors[qtblno] == NULL) {
	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					DCTSIZE2 * SIZEOF(FAST_FLOAT));
	}
	fdtbl = fdct->float_divisors[qtblno];
	for (i = 0; i < DCTSIZE2; i++) {
	  row = ZAG[i] >> 3;
	  col = ZAG[i] & 7;
	  fdtbl[i] = (FAST_FLOAT)
	    (1.0 / (((double) qtbl->quantval[i] *
		     aanscalefactor[row] * aanscalefactor[col] * 8.0)));
	}
      }
      break;
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}


/*
 * Perform forward DCT on one or more blocks of a component.
 *
 * The input samples are taken from the sample_data[] array starting at
 * position start_row/start_col, and moving to the right for any additional
 * blocks. The quantized, zigzagged coefficients are returned in coef_blocks[].
 */

METHODDEF void
forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	     JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	     JDIMENSION start_row, JDIMENSION start_col,
	     JDIMENSION num_blocks)
/* This version is used for integer DCT implementations. */
{
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  forward_DCT_method_ptr do_dct = fdct->do_dct;
  DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
  DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
    /* Load data into workspace, applying unsigned->signed conversion */
    { register DCTELEM *workspaceptr;
      register JSAMPROW elemptr;
      register int elemr;

      workspaceptr = workspace;
      for (elemr = 0; elemr < DCTSIZE; elemr++) {
	elemptr = sample_data[elemr] + start_col;
#if DCTSIZE == 8		/* unroll the inner loop */
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
#else
	{ register int elemc;
	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
	    *workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	  }
	}
#endif
      }
    }

    /* Perform the DCT */
    (*do_dct) (workspace);

    /* Quantize/descale the coefficients, and store into coef_blocks[] */
    { register DCTELEM temp, qval;
      register int i;
      register JCOEFPTR output_ptr = coef_blocks[bi];

      for (i = 0; i < DCTSIZE2; i++) {
	qval = divisors[i];
	temp = workspace[ZAG[i]];
	/* Divide the coefficient value by qval, ensuring proper rounding.
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 *
	 * In most files, at least half of the output values will be zero
	 * (at default quantization settings, more like three-quarters...)
	 * so we should ensure that this case is fast.  On many machines,
	 * a comparison is enough cheaper than a divide to make a special test
	 * a win.  Since both inputs will be nonnegative, we need only test
	 * for a < b to discover whether a/b is 0.
	 * If your machine's division is fast enough, define FAST_DIVIDE.
	 */
#ifdef FAST_DIVIDE
#define DIVIDE_BY(a,b)	a /= b
#else
#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
#endif
	if (temp < 0) {
	  temp = -temp;
	  temp += qval>>1;	/* for rounding */
	  DIVIDE_BY(temp, qval);
	  temp = -temp;
	} else {
	  temp += qval>>1;	/* for rounding */
	  DIVIDE_BY(temp, qval);
	}
	output_ptr[i] = (JCOEF) temp;
      }
    }
  }
}


#ifdef DCT_FLOAT_SUPPORTED

METHODDEF void
forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
		   JDIMENSION start_row, JDIMENSION start_col,
		   JDIMENSION num_blocks)
/* This version is used for floating-point DCT implementations. */
{
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  float_DCT_method_ptr do_dct = fdct->do_float_dct;
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
  FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
    /* Load data into workspace, applying unsigned->signed conversion */
    { register FAST_FLOAT *workspaceptr;
      register JSAMPROW elemptr;
      register int elemr;

      workspaceptr = workspace;
      for (elemr = 0; elemr < DCTSIZE; elemr++) {
	elemptr = sample_data[elemr] + start_col;
#if DCTSIZE == 8		/* unroll the inner loop */
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (float) (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
#else
	{ register int elemc;
	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
	    *workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	  }
	}
#endif
      }
    }

    /* Perform the DCT */
    (*do_dct) (workspace);

    /* Quantize/descale the coefficients, and store into coef_blocks[] */
    { register FAST_FLOAT temp;
      register int i;
      register JCOEFPTR output_ptr = coef_blocks[bi];

      for (i = 0; i < DCTSIZE2; i++) {
	/* Apply the quantization and scaling factor */
	temp = workspace[ZAG[i]] * divisors[i];
	/* Round to nearest integer.
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 * The maximum coefficient size is +-16K (for 12-bit data), so this
	 * code should work for either 16-bit or 32-bit ints.
	 */
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
      }
    }
  }
}

#endif /* DCT_FLOAT_SUPPORTED */


/*
 * Initialize FDCT manager.
 */

GLOBAL void
jinit_forward_dct (j_compress_ptr cinfo)
{
  my_fdct_ptr fdct;
  int i;

  fdct = (my_fdct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_fdct_controller));
  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
  fdct->pub.start_pass = start_pass_fdctmgr;

  switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
  case JDCT_ISLOW:
    fdct->pub.forward_DCT = forward_DCT;
    fdct->do_dct = jpeg_fdct_islow;
    break;
#endif
#ifdef DCT_IFAST_SUPPORTED
  case JDCT_IFAST:
    fdct->pub.forward_DCT = forward_DCT;
    fdct->do_dct = jpeg_fdct_ifast;
    break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
  case JDCT_FLOAT:
    fdct->pub.forward_DCT = forward_DCT_float;
    fdct->do_float_dct = jpeg_fdct_float;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
    break;
  }

  /* Mark divisor tables unallocated */
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    fdct->divisors[i] = NULL;
#ifdef DCT_FLOAT_SUPPORTED
    fdct->float_divisors[i] = NULL;
#endif
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jchuff.c ===
/*
 * jchuff.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy encoding routines.
 *
 * Much of the complexity here has to do with supporting output suspension.
 * If the data destination module demands suspension, we want to be able to
 * back up to the start of the current MCU.  To do this, we copy state
 * variables into local working storage, and update them back to the
 * permanent JPEG objects only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Derived data constructed for each Huffman table */

typedef struct {
  unsigned int ehufco[256];	/* code for each symbol */
  char ehufsi[256];		/* length of code for each symbol */
  /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
} C_DERIVED_TBL;

/* Expanded entropy encoder object for Huffman encoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  INT32 put_buffer;		/* current bit-accumulation buffer */
  int put_bits;			/* # of bits now in it */
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).put_buffer = (src).put_buffer, \
	 (dest).put_bits = (src).put_bits, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_encoder pub; /* public fields */

  savable_state saved;		/* Bit buffer & DC state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  int next_restart_num;		/* next restart number to write (0-7) */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  C_DERIVED_TBL * dc_derived_tbls[NUM_HUFF_TBLS];
  C_DERIVED_TBL * ac_derived_tbls[NUM_HUFF_TBLS];

#ifdef ENTROPY_OPT_SUPPORTED	/* Statistics tables for optimization */
  long * dc_count_ptrs[NUM_HUFF_TBLS];
  long * ac_count_ptrs[NUM_HUFF_TBLS];
#endif
} huff_entropy_encoder;

typedef huff_entropy_encoder * huff_entropy_ptr;

/* Working state while writing an MCU.
 * This struct contains all the fields that are needed by subroutines.
 */

typedef struct {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
  savable_state cur;		/* Current bit buffer & DC state */
  j_compress_ptr cinfo;		/* dump_buffer needs access to this */
} working_state;


/* Forward declarations */
METHODDEF boolean encode_mcu_huff JPP((j_compress_ptr cinfo,
				       JBLOCKROW *MCU_data));
METHODDEF void finish_pass_huff JPP((j_compress_ptr cinfo));
#ifdef ENTROPY_OPT_SUPPORTED
METHODDEF boolean encode_mcu_gather JPP((j_compress_ptr cinfo,
					 JBLOCKROW *MCU_data));
METHODDEF void finish_pass_gather JPP((j_compress_ptr cinfo));
#endif
LOCAL void fix_huff_tbl JPP((j_compress_ptr cinfo, JHUFF_TBL * htbl,
			     C_DERIVED_TBL ** pdtbl));


/*
 * Initialize for a Huffman-compressed scan.
 * If gather_statistics is TRUE, we do not output anything during the scan,
 * just count the Huffman symbols used and generate Huffman code tables.
 */

METHODDEF void
start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  if (gather_statistics) {
#ifdef ENTROPY_OPT_SUPPORTED
    entropy->pub.encode_mcu = encode_mcu_gather;
    entropy->pub.finish_pass = finish_pass_gather;
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    entropy->pub.encode_mcu = encode_mcu_huff;
    entropy->pub.finish_pass = finish_pass_huff;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    /* Make sure requested tables are present */
    /* (In gather mode, tables need not be allocated yet) */
    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
	(cinfo->dc_huff_tbl_ptrs[dctbl] == NULL && !gather_statistics))
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
	(cinfo->ac_huff_tbl_ptrs[actbl] == NULL && !gather_statistics))
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
    if (gather_statistics) {
#ifdef ENTROPY_OPT_SUPPORTED
      /* Allocate and zero the statistics tables */
      /* Note that gen_huff_coding expects 257 entries in each table! */
      if (entropy->dc_count_ptrs[dctbl] == NULL)
	entropy->dc_count_ptrs[dctbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
      MEMZERO(entropy->dc_count_ptrs[dctbl], 257 * SIZEOF(long));
      if (entropy->ac_count_ptrs[actbl] == NULL)
	entropy->ac_count_ptrs[actbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
      MEMZERO(entropy->ac_count_ptrs[actbl], 257 * SIZEOF(long));
#endif
    } else {
      /* Compute derived values for Huffman tables */
      /* We may do this more than once for a table, but it's not expensive */
      fix_huff_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
		   & entropy->dc_derived_tbls[dctbl]);
      fix_huff_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
		   & entropy->ac_derived_tbls[actbl]);
    }
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bit buffer to empty */
  entropy->saved.put_buffer = 0;
  entropy->saved.put_bits = 0;

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
  entropy->next_restart_num = 0;
}


LOCAL void
fix_huff_tbl (j_compress_ptr cinfo, JHUFF_TBL * htbl, C_DERIVED_TBL ** pdtbl)
/* Compute the derived values for a Huffman table */
{
  C_DERIVED_TBL *dtbl;
  int p, i, l, lastp, si;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
    *pdtbl = (C_DERIVED_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(C_DERIVED_TBL));
  dtbl = *pdtbl;
  
  /* Figure C.1: make table of Huffman code length for each symbol */
  /* Note that this is in code-length order. */

  p = 0;
  for (l = 1; l <= 16; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++)
      huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  lastp = p;
  
  /* Figure C.2: generate the codes themselves */
  /* Note that this is in code-length order. */
  
  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
      code++;
    }
    code <<= 1;
    si++;
  }
  
  /* Figure C.3: generate encoding tables */
  /* These are code and size indexed by symbol value */

  /* Set any codeless symbols to have code length 0;
   * this allows emit_bits to detect any attempt to emit such symbols.
   */
  MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));

  for (p = 0; p < lastp; p++) {
    dtbl->ehufco[htbl->huffval[p]] = huffcode[p];
    dtbl->ehufsi[htbl->huffval[p]] = huffsize[p];
  }
}


/* Outputting bytes to the file */

/* Emit a byte, taking 'action' if must suspend. */
#define emit_byte(state,val,action)  \
	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
	  if (--(state)->free_in_buffer == 0)  \
	    if (! dump_buffer(state))  \
	      { action; } }


LOCAL boolean
dump_buffer (working_state * state)
/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
  struct jpeg_destination_mgr * dest = state->cinfo->dest;

  if (! (*dest->empty_output_buffer) (state->cinfo))
    return FALSE;
  /* After a successful buffer dump, must reset buffer pointers */
  state->next_output_byte = dest->next_output_byte;
  state->free_in_buffer = dest->free_in_buffer;
  return TRUE;
}


/* Outputting bits to the file */

/* Only the right 24 bits of put_buffer are used; the valid bits are
 * left-justified in this part.  At most 16 bits can be passed to emit_bits
 * in one call, and we never retain more than 7 bits in put_buffer
 * between calls, so 24 bits are sufficient.
 */

INLINE
LOCAL boolean
emit_bits (working_state * state, unsigned int code, int size)
/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = state->cur.put_bits;

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
    ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */
  
  put_bits += size;		/* new number of bits in buffer */
  
  put_buffer <<= 24 - put_bits; /* align incoming bits */

  put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */
  
  while (put_bits >= 8) {
    int c = (int) ((put_buffer >> 16) & 0xFF);
    
    emit_byte(state, c, return FALSE);
    if (c == 0xFF) {		/* need to stuff a zero byte? */
      emit_byte(state, 0, return FALSE);
    }
    put_buffer <<= 8;
    put_bits -= 8;
  }

  state->cur.put_buffer = put_buffer; /* update state variables */
  state->cur.put_bits = put_bits;

  return TRUE;
}


LOCAL boolean
flush_bits (working_state * state)
{
  if (! emit_bits(state, 0x7F, 7)) /* fill any partial byte with ones */
    return FALSE;
  state->cur.put_buffer = 0;	/* and reset bit-buffer to empty */
  state->cur.put_bits = 0;
  return TRUE;
}


/* Encode a single block's worth of coefficients */

LOCAL boolean
encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
		  C_DERIVED_TBL *dctbl, C_DERIVED_TBL *actbl)
{
  register int temp, temp2;
  register int nbits;
  register int k, r, i;
  
  /* Encode the DC coefficient difference per section F.1.2.1 */
  
  temp = temp2 = block[0] - last_dc_val;

  if (temp < 0) {
    temp = -temp;		/* temp is abs value of input */
    /* For a negative input, want temp2 = bitwise complement of abs(input) */
    /* This code assumes we are on a two's complement machine */
    temp2--;
  }
  
  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
  while (temp) {
    nbits++;
    temp >>= 1;
  }
  
  /* Emit the Huffman-coded symbol for the number of bits */
  if (! emit_bits(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
    return FALSE;

  /* Emit that number of bits of the value, if positive, */
  /* or the complement of its magnitude, if negative. */
  if (nbits)			/* emit_bits rejects calls with size 0 */
    if (! emit_bits(state, (unsigned int) temp2, nbits))
      return FALSE;

  /* Encode the AC coefficients per section F.1.2.2 */
  
  r = 0;			/* r = run length of zeros */
  
  for (k = 1; k < DCTSIZE2; k++) {
    if ((temp = block[k]) == 0) {
      r++;
    } else {
      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
      while (r > 15) {
	if (! emit_bits(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
	  return FALSE;
	r -= 16;
      }

      temp2 = temp;
      if (temp < 0) {
	temp = -temp;		/* temp is abs value of input */
	/* This code assumes we are on a two's complement machine */
	temp2--;
      }
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      nbits = 1;		/* there must be at least one 1 bit */
      while ((temp >>= 1))
	nbits++;
      
      /* Emit Huffman symbol for run length / number of bits */
      i = (r << 4) + nbits;
      if (! emit_bits(state, actbl->ehufco[i], actbl->ehufsi[i]))
	return FALSE;

      /* Emit that number of bits of the value, if positive, */
      /* or the complement of its magnitude, if negative. */
      if (! emit_bits(state, (unsigned int) temp2, nbits))
	return FALSE;
      
      r = 0;
    }
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
    if (! emit_bits(state, actbl->ehufco[0], actbl->ehufsi[0]))
      return FALSE;

  return TRUE;
}


/*
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL boolean
emit_restart (working_state * state, int restart_num)
{
  int ci;

  if (! flush_bits(state))
    return FALSE;

  emit_byte(state, 0xFF, return FALSE);
  emit_byte(state, JPEG_RST0 + restart_num, return FALSE);

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
    state->cur.last_dc_val[ci] = 0;

  /* The restart counter is not updated until we successfully write the MCU. */

  return TRUE;
}


/*
 * Encode and output one MCU's worth of Huffman-compressed coefficients.
 */

METHODDEF boolean
encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  working_state state;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Load up working state */
  state.next_output_byte = cinfo->dest->next_output_byte;
  state.free_in_buffer = cinfo->dest->free_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! emit_restart(&state, entropy->next_restart_num))
	return FALSE;
  }

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    if (! encode_one_block(&state,
			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
      return FALSE;
    /* Update last_dc_val */
    state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
  }

  /* Completed MCU, so update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
  cinfo->dest->free_in_buffer = state.free_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      entropy->restarts_to_go = cinfo->restart_interval;
      entropy->next_restart_num++;
      entropy->next_restart_num &= 7;
    }
    entropy->restarts_to_go--;
  }

  return TRUE;
}


/*
 * Finish up at the end of a Huffman-compressed scan.
 */

METHODDEF void
finish_pass_huff (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  working_state state;

  /* Load up working state ... flush_bits needs it */
  state.next_output_byte = cinfo->dest->next_output_byte;
  state.free_in_buffer = cinfo->dest->free_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Flush out the last data */
  if (! flush_bits(&state))
    ERREXIT(cinfo, JERR_CANT_SUSPEND);

  /* Update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
  cinfo->dest->free_in_buffer = state.free_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);
}


/*
 * Huffman coding optimization.
 *
 * This actually is optimization, in the sense that we find the best possible
 * Huffman table(s) for the given data.  We first scan the supplied data and
 * count the number of uses of each symbol that is to be Huffman-coded.
 * (This process must agree with the code above.)  Then we build an
 * optimal Huffman coding tree for the observed counts.
 *
 * The JPEG standard requires Huffman codes to be no more than 16 bits long.
 * If some symbols have a very small but nonzero probability, the Huffman tree
 * must be adjusted to meet the code length restriction.  We currently use
 * the adjustment method suggested in the JPEG spec.  This method is *not*
 * optimal; it may not choose the best possible limited-length code.  But
 * since the symbols involved are infrequently used, it's not clear that
 * going to extra trouble is worthwhile.
 */

#ifdef ENTROPY_OPT_SUPPORTED


/* Process a single block's worth of coefficients */

LOCAL void
htest_one_block (JCOEFPTR block, int last_dc_val,
		 long dc_counts[], long ac_counts[])
{
  register int temp;
  register int nbits;
  register int k, r;
  
  /* Encode the DC coefficient difference per section F.1.2.1 */
  
  temp = block[0] - last_dc_val;
  if (temp < 0)
    temp = -temp;
  
  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
  while (temp) {
    nbits++;
    temp >>= 1;
  }

  /* Count the Huffman symbol for the number of bits */
  dc_counts[nbits]++;
  
  /* Encode the AC coefficients per section F.1.2.2 */
  
  r = 0;			/* r = run length of zeros */
  
  for (k = 1; k < DCTSIZE2; k++) {
    if ((temp = block[k]) == 0) {
      r++;
    } else {
      /* if run length > 15, must emit special run-length-16 codes (0xF0) */
      while (r > 15) {
	ac_counts[0xF0]++;
	r -= 16;
      }
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      if (temp < 0)
	temp = -temp;
      
      /* Find the number of bits needed for the magnitude of the coefficient */
      nbits = 1;		/* there must be at least one 1 bit */
      while ((temp >>= 1))
	nbits++;
      
      /* Count Huffman symbol for run length / number of bits */
      ac_counts[(r << 4) + nbits]++;
      
      r = 0;
    }
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
    ac_counts[0]++;
}


/*
 * Trial-encode one MCU's worth of Huffman-compressed coefficients.
 * No data is actually output, so no suspension return is possible.
 */

METHODDEF boolean
encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Take care of restart intervals if needed */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0) {
      /* Re-initialize DC predictions to 0 */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++)
	entropy->saved.last_dc_val[ci] = 0;
      /* Update restart state */
      entropy->restarts_to_go = cinfo->restart_interval;
    }
    entropy->restarts_to_go--;
  }

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    htest_one_block(MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
    entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
  }

  return TRUE;
}


/* Generate the optimal coding for the given counts, initialize htbl */

LOCAL void
gen_huff_coding (j_compress_ptr cinfo, JHUFF_TBL *htbl, long freq[])
{
#define MAX_CLEN 32		/* assumed maximum initial code length */
  UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
  int codesize[257];		/* codesize[k] = code length of symbol k */
  int others[257];		/* next symbol in current branch of tree */
  int c1, c2;
  int p, i, j;
  long v;

  /* This algorithm is explained in section K.2 of the JPEG standard */

  MEMZERO(bits, SIZEOF(bits));
  MEMZERO(codesize, SIZEOF(codesize));
  for (i = 0; i < 257; i++)
    others[i] = -1;		/* init links to empty */
  
  freq[256] = 1;		/* make sure there is a nonzero count */
  /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
   * that no real symbol is given code-value of all ones, because 256
   * will be placed in the largest codeword category.
   */

  /* Huffman's basic algorithm to assign optimal code lengths to symbols */

  for (;;) {
    /* Find the smallest nonzero frequency, set c1 = its symbol */
    /* In case of ties, take the larger symbol number */
    c1 = -1;
    v = 1000000000L;
    for (i = 0; i <= 256; i++) {
      if (freq[i] && freq[i] <= v) {
	v = freq[i];
	c1 = i;
      }
    }

    /* Find the next smallest nonzero frequency, set c2 = its symbol */
    /* In case of ties, take the larger symbol number */
    c2 = -1;
    v = 1000000000L;
    for (i = 0; i <= 256; i++) {
      if (freq[i] && freq[i] <= v && i != c1) {
	v = freq[i];
	c2 = i;
      }
    }

    /* Done if we've merged everything into one frequency */
    if (c2 < 0)
      break;
    
    /* Else merge the two counts/trees */
    freq[c1] += freq[c2];
    freq[c2] = 0;

    /* Increment the codesize of everything in c1's tree branch */
    codesize[c1]++;
    while (others[c1] >= 0) {
      c1 = others[c1];
      codesize[c1]++;
    }
    
    others[c1] = c2;		/* chain c2 onto c1's tree branch */
    
    /* Increment the codesize of everything in c2's tree branch */
    codesize[c2]++;
    while (others[c2] >= 0) {
      c2 = others[c2];
      codesize[c2]++;
    }
  }

  /* Now count the number of symbols of each code length */
  for (i = 0; i <= 256; i++) {
    if (codesize[i]) {
      /* The JPEG standard seems to think that this can't happen, */
      /* but I'm paranoid... */
      if (codesize[i] > MAX_CLEN)
	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);

      bits[codesize[i]]++;
    }
  }

  /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
   * Huffman procedure assigned any such lengths, we must adjust the coding.
   * Here is what the JPEG spec says about how this next bit works:
   * Since symbols are paired for the longest Huffman code, the symbols are
   * removed from this length category two at a time.  The prefix for the pair
   * (which is one bit shorter) is allocated to one of the pair; then,
   * skipping the BITS entry for that prefix length, a code word from the next
   * shortest nonzero BITS entry is converted into a prefix for two code words
   * one bit longer.
   */
  
  for (i = MAX_CLEN; i > 16; i--) {
    while (bits[i] > 0) {
      j = i - 2;		/* find length of new prefix to be used */
      while (bits[j] == 0)
	j--;
      
      bits[i] -= 2;		/* remove two symbols */
      bits[i-1]++;		/* one goes in this length */
      bits[j+1] += 2;		/* two new symbols in this length */
      bits[j]--;		/* symbol of this length is now a prefix */
    }
  }

  /* Remove the count for the pseudo-symbol 256 from the largest codelength */
  while (bits[i] == 0)		/* find largest codelength still in use */
    i--;
  bits[i]--;
  
  /* Return final symbol counts (only for lengths 0..16) */
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
  
  /* Return a list of the symbols sorted by code length */
  /* It's not real clear to me why we don't need to consider the codelength
   * changes made above, but the JPEG spec seems to think this works.
   */
  p = 0;
  for (i = 1; i <= MAX_CLEN; i++) {
    for (j = 0; j <= 255; j++) {
      if (codesize[j] == i) {
	htbl->huffval[p] = (UINT8) j;
	p++;
      }
    }
  }

  /* Set sent_table FALSE so updated table will be written to JPEG file. */
  htbl->sent_table = FALSE;
}


/*
 * Finish up a statistics-gathering pass and create the new Huffman tables.
 */

METHODDEF void
finish_pass_gather (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;
  JHUFF_TBL **htblptr;
  boolean did_dc[NUM_HUFF_TBLS];
  boolean did_ac[NUM_HUFF_TBLS];

  /* It's important not to apply gen_huff_coding more than once per table,
   * because it clobbers the input frequency counts!
   */
  MEMZERO(did_dc, SIZEOF(did_dc));
  MEMZERO(did_ac, SIZEOF(did_ac));

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    if (! did_dc[dctbl]) {
      htblptr = & cinfo->dc_huff_tbl_ptrs[dctbl];
      if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
      gen_huff_coding(cinfo, *htblptr, entropy->dc_count_ptrs[dctbl]);
      did_dc[dctbl] = TRUE;
    }
    if (! did_ac[actbl]) {
      htblptr = & cinfo->ac_huff_tbl_ptrs[actbl];
      if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
      gen_huff_coding(cinfo, *htblptr, entropy->ac_count_ptrs[actbl]);
      did_ac[actbl] = TRUE;
    }
  }
}


#endif /* ENTROPY_OPT_SUPPORTED */


/*
 * Module initialization routine for Huffman entropy encoding.
 */

GLOBAL void
jinit_huff_encoder (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass_huff;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
#ifdef ENTROPY_OPT_SUPPORTED
    entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
#endif
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcmarker.c ===
/*
 * jcmarker.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to write JPEG datastream markers.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 * All Rights Reserved.
*/

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,

  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,

  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,

  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,

  M_DHT   = 0xc4,

  M_DAC   = 0xcc,

  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,

  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,

  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,

  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,

  M_TEM   = 0x01,

  M_ERROR = 0x100
} JPEG_MARKER;


/*
 * Basic output routines.
 *
 * Note that we do not support suspension while writing a marker.
 * Therefore, an application using suspension must ensure that there is
 * enough buffer space for the initial markers (typ. 600-700 bytes) before
 * calling jpeg_start_compress, and enough space to write the trailing EOI
 * (a few bytes) before calling jpeg_finish_compress.  Multipass compression
 * modes are not supported at all with suspension, so those two are the only
 * points where markers will be written.
 */

LOCAL UINT8 *
emit_byte (j_compress_ptr cinfo, int val)
/* Emit a byte */
{
  struct jpeg_destination_mgr * dest = cinfo->dest;
  UINT8 * this_byte;

  this_byte = dest->next_output_byte;
  *(dest->next_output_byte)++ = (JOCTET) val;
  if (--dest->free_in_buffer == 0) {
    if (! (*dest->empty_output_buffer) (cinfo))
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
  }

  return this_byte;
}


LOCAL UINT8 *
emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
/* Emit a marker code */
{
UINT8 * location;
  location = emit_byte(cinfo, 0xFF);
  emit_byte(cinfo, (int) mark);

  return location;
}


LOCAL void
emit_2bytes (j_compress_ptr cinfo, int value)
/* Emit a 2-byte integer; these are always MSB first in JPEG files */
{
  emit_byte(cinfo, (value >> 8) & 0xFF);
  emit_byte(cinfo, value & 0xFF);
}


/*
 * Routines to write specific marker types.
 */

LOCAL int
emit_dqt (j_compress_ptr cinfo, int index)
/* Emit a DQT marker */
/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
  int prec;
  int i;

  if (qtbl == NULL)
    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);

  prec = 0;
  for (i = 0; i < DCTSIZE2; i++) {
    if (qtbl->quantval[i] > 255)
      prec = 1;
  }

  if (! qtbl->sent_table) {
    emit_marker(cinfo, M_DQT);

    emit_2bytes(cinfo, prec ? DCTSIZE2*2 + 1 + 2 : DCTSIZE2 + 1 + 2);

    emit_byte(cinfo, index + (prec<<4));

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	emit_byte(cinfo, qtbl->quantval[i] >> 8);
      emit_byte(cinfo, qtbl->quantval[i] & 0xFF);
    }

    qtbl->sent_table = TRUE;
  }

  return prec;
}

LOCAL int
emit_both_dqt (j_compress_ptr cinfo, int index1, int index2)
/* Emit a DQT marker */
/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index1];
  int prec;
  int i;

  if (qtbl == NULL)
    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index1);

  prec = 0;
  for (i = 0; i < DCTSIZE2; i++) {
    if (qtbl->quantval[i] > 255)
      prec = 1;
    }


  qtbl = cinfo->quant_tbl_ptrs[index2];
  if (qtbl == NULL)
    ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index2);

  for (i = 0; i < DCTSIZE2; i++) {
    if (qtbl->quantval[i] > 255)
      prec = 1;
    }

  qtbl = cinfo->quant_tbl_ptrs[index1];

  if (! qtbl->sent_table) {
    emit_marker(cinfo, M_DQT);

    emit_2bytes(cinfo, prec ? DCTSIZE2*4 + 2 + 2 : DCTSIZE2*2 + 2 + 2);

    emit_byte(cinfo, index1 + (prec<<4));

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	    emit_byte(cinfo, qtbl->quantval[i] >> 8);
      emit_byte(cinfo, qtbl->quantval[i] & 0xFF);
	  }

    qtbl->sent_table = TRUE;

  	/* emit the second table */
    qtbl = cinfo->quant_tbl_ptrs[index2];
    if (! qtbl->sent_table) {

      emit_byte(cinfo, index2 + (prec<<4));

      for (i = 0; i < DCTSIZE2; i++) {
        if (prec)
	      emit_byte(cinfo, qtbl->quantval[i] >> 8);
        emit_byte(cinfo, qtbl->quantval[i] & 0xFF);
		}

      qtbl->sent_table = TRUE;
	  }

    }

  return prec;
}



LOCAL void
emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
/* Emit a DHT marker */
{
  JHUFF_TBL * htbl;
  int length, i;

  if (is_ac) {
    htbl = cinfo->ac_huff_tbl_ptrs[index];
    index += 0x10;		/* output index has AC bit set */
  } else {
    htbl = cinfo->dc_huff_tbl_ptrs[index];
  }

  if (htbl == NULL)
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);

  if (! htbl->sent_table) {
    emit_marker(cinfo, M_DHT);

    length = 0;
    for (i = 1; i <= 16; i++)
      length += htbl->bits[i];

    emit_2bytes(cinfo, length + 2 + 1 + 16);
    emit_byte(cinfo, index);

    for (i = 1; i <= 16; i++)
      emit_byte(cinfo, htbl->bits[i]);

    for (i = 0; i < length; i++)
      emit_byte(cinfo, htbl->huffval[i]);

    htbl->sent_table = TRUE;
  }
}


LOCAL void
emit_dac (j_compress_ptr cinfo)
/* Emit a DAC marker */
/* Since the useful info is so small, we want to emit all the tables in */
/* one DAC marker.  Therefore this routine does its own scan of the table. */
{
#ifdef C_ARITH_CODING_SUPPORTED
  char dc_in_use[NUM_ARITH_TBLS];
  char ac_in_use[NUM_ARITH_TBLS];
  int length, i;
  jpeg_component_info *compptr;

  for (i = 0; i < NUM_ARITH_TBLS; i++)
    dc_in_use[i] = ac_in_use[i] = 0;

  for (i = 0; i < cinfo->comps_in_scan; i++) {
    compptr = cinfo->cur_comp_info[i];
    dc_in_use[compptr->dc_tbl_no] = 1;
    ac_in_use[compptr->ac_tbl_no] = 1;
  }

  length = 0;
  for (i = 0; i < NUM_ARITH_TBLS; i++)
    length += dc_in_use[i] + ac_in_use[i];

  emit_marker(cinfo, M_DAC);

  emit_2bytes(cinfo, length*2 + 2);

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    if (dc_in_use[i]) {
      emit_byte(cinfo, i);
      emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
    }
    if (ac_in_use[i]) {
      emit_byte(cinfo, i + 0x10);
      emit_byte(cinfo, cinfo->arith_ac_K[i]);
    }
  }
#endif /* C_ARITH_CODING_SUPPORTED */
}


LOCAL void
emit_dri (j_compress_ptr cinfo)
/* Emit a DRI marker */
{
  emit_marker(cinfo, M_DRI);

  emit_2bytes(cinfo, 4);	/* fixed length */

  emit_2bytes(cinfo, (int) cinfo->restart_interval);
}


LOCAL void
emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
/* Emit a SOF marker */
{
  int ci;
  jpeg_component_info *compptr;

  emit_marker(cinfo, code);

  emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */

  /* Make sure image isn't bigger than SOF field can handle */
  if ((long) cinfo->image_height > 65535L ||
      (long) cinfo->image_width > 65535L)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);

  emit_byte(cinfo, cinfo->data_precision);
  emit_2bytes(cinfo, (int) cinfo->image_height);
  emit_2bytes(cinfo, (int) cinfo->image_width);

  emit_byte(cinfo, cinfo->num_components);

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    emit_byte(cinfo, compptr->component_id);
    emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
    emit_byte(cinfo, compptr->quant_tbl_no);
  }
}


LOCAL void
emit_sos (j_compress_ptr cinfo)
/* Emit a SOS marker */
{
  int i;
  jpeg_component_info *compptr;

  emit_marker(cinfo, M_SOS);

  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */

  emit_byte(cinfo, cinfo->comps_in_scan);

  for (i = 0; i < cinfo->comps_in_scan; i++) {
    compptr = cinfo->cur_comp_info[i];
    emit_byte(cinfo, compptr->component_id);
    emit_byte(cinfo, (compptr->dc_tbl_no << 4) + compptr->ac_tbl_no);
  }

  emit_byte(cinfo, 0);		/* Spectral selection start */
  emit_byte(cinfo, DCTSIZE2-1);	/* Spectral selection end */
  emit_byte(cinfo, 0);		/* Successive approximation */
}


LOCAL void
emit_jfif_app0 (j_compress_ptr cinfo)
/* Emit a JFIF-compliant APP0 marker */
{
  /*
   * Length of APP0 block	(2 bytes)
   * Block ID			(4 bytes - ASCII "JFIF")
   * Zero byte			(1 byte to terminate the ID string)
   * Version Major, Minor	(2 bytes - 0x01, 0x01)
   * Units			(1 byte - 0x00 = none, 0x01 = inch, 0x02 = cm)
   * Xdpu			(2 bytes - dots per unit horizontal)
   * Ydpu			(2 bytes - dots per unit vertical)
   * Thumbnail X size		(1 byte)
   * Thumbnail Y size		(1 byte)
   */

  emit_marker(cinfo, M_APP0);

  emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */

  emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
  emit_byte(cinfo, 0x46);
  emit_byte(cinfo, 0x49);
  emit_byte(cinfo, 0x46);
  emit_byte(cinfo, 0);
  /* We currently emit version code 1.01 since we use no 1.02 features.
   * This may avoid complaints from some older decoders.
   */
  emit_byte(cinfo, 1);		/* Major version */
  emit_byte(cinfo, 1);		/* Minor version */
  emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
  emit_2bytes(cinfo, (int) cinfo->X_density);
  emit_2bytes(cinfo, (int) cinfo->Y_density);
  emit_byte(cinfo, 0);		/* No thumbnail image */
  emit_byte(cinfo, 0);
}


LOCAL void
emit_adobe_app14 (j_compress_ptr cinfo)
/* Emit an Adobe APP14 marker */
{
  /*
   * Length of APP14 block	(2 bytes)
   * Block ID			(5 bytes - ASCII "Adobe")
   * Version Number		(2 bytes - currently 100)
   * Flags0			(2 bytes - currently 0)
   * Flags1			(2 bytes - currently 0)
   * Color transform		(1 byte)
   *
   * Although Adobe TN 5116 mentions Version = 101, all the Adobe files
   * now in circulation seem to use Version = 100, so that's what we write.
   *
   * We write the color transform byte as 1 if the JPEG color space is
   * YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
   * whether the encoder performed a transformation, which is pretty useless.
   */

  emit_marker(cinfo, M_APP14);

  emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */

  emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
  emit_byte(cinfo, 0x64);
  emit_byte(cinfo, 0x6F);
  emit_byte(cinfo, 0x62);
  emit_byte(cinfo, 0x65);
  emit_2bytes(cinfo, 100);	/* Version */
  emit_2bytes(cinfo, 0);	/* Flags0 */
  emit_2bytes(cinfo, 0);	/* Flags1 */
  switch (cinfo->jpeg_color_space) {
  case JCS_YCbCr:
    emit_byte(cinfo, 1);	/* Color transform = 1 */
    break;
  case JCS_YCCK:
    emit_byte(cinfo, 2);	/* Color transform = 2 */
    break;
  default:
    emit_byte(cinfo, 0);	/* Color transform = 0 */
    break;
  }
}

LOCAL void
emit_avi1_app0 (j_compress_ptr cinfo)
/* Emit a AVI1-compliant APP0 marker */
{
  /*
   * Length of APP0 block	(2 bytes)
   * Block ID			(4 bytes - ASCII "AVI1")
   * Zero byte			(1 byte to terminate the ID string)
   * Field Interlaced   (1 byte - 0x00, 0x01, 0x02)
   *	update 0.91 to new specs
   * zero fill of one byte
   * 4 bytes data size with padding - big-endian
   * 4 bytes data size without padding - big-endian
   */

  emit_marker(cinfo, M_APP0);

  emit_2bytes(cinfo, 16); /* length */

  emit_byte(cinfo, 'A');	/* Identifier: ASCII "AVI1" */
  emit_byte(cinfo, 'V');
  emit_byte(cinfo, 'I');
  emit_byte(cinfo, '1');
  emit_byte(cinfo, cinfo->AVI1_field_id);		/* 0 for non-field interlaced, 1 for ODD field, 2 for EVEN field */

  emit_byte(cinfo, 0);

  cinfo->app0_marker_size_ptr =  (UINT8 *)emit_byte(cinfo, 0);
  emit_byte(cinfo, 0);
  emit_byte(cinfo, 0);
  emit_byte(cinfo, 0);

  emit_byte(cinfo, 0);
  emit_byte(cinfo, 0);
  emit_byte(cinfo, 0);
  emit_byte(cinfo, 0);

}


/*
 * This routine is exported for possible use by applications.
 * The intended use is to emit COM or APPn markers after calling
 * jpeg_start_compress() and before the first jpeg_write_scanlines() call
 * (hence, after write_file_header but before write_frame_header).
 * Other uses are not guaranteed to produce desirable results.
 */

METHODDEF void
write_any_marker (j_compress_ptr cinfo, int marker,
		  const JOCTET *dataptr, unsigned int datalen)
/* Emit an arbitrary marker with parameters */
{
  if (datalen <= (unsigned int) 65533) { /* safety check */
    emit_marker(cinfo, (JPEG_MARKER) marker);

    emit_2bytes(cinfo, (int) (datalen + 2)); /* total length */

    while (datalen--) {
      emit_byte(cinfo, *dataptr);
      dataptr++;
    }
  }
}


/*
 * Write datastream header.
 * This consists of an SOI and optional APPn markers.
 * We recommend use of the JFIF marker, but not the Adobe marker,
 * when using YCbCr or grayscale data.  The JFIF marker should NOT
 * be used for any other JPEG colorspace.  The Adobe marker is helpful
 * to distinguish RGB, CMYK, and YCCK colorspaces.
 * Note that an application can write additional header markers after
 * jpeg_start_decompress returns.
 */

METHODDEF void
write_file_header (j_compress_ptr cinfo)
{
  cinfo->soi_ptr = emit_marker(cinfo, M_SOI);	/* first the SOI */

  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
    emit_jfif_app0(cinfo);
  if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
    emit_adobe_app14(cinfo);
  if (cinfo->write_AVI1_marker)
    emit_avi1_app0(cinfo);
}


/*
 * Write frame header.
 * This consists of DQT and SOFn markers.
 * Note that we do not emit the SOF until we have emitted the DQT(s).
 * This avoids compatibility problems with incorrect implementations that
 * try to error-check the quant table numbers as soon as they see the SOF.
 */

METHODDEF void
write_frame_header (j_compress_ptr cinfo)
{
  int ci, prec;
  boolean is_baseline;
  jpeg_component_info *compptr;

  /* Emit DQT for each quantization table.
   * Note that emit_dqt() suppresses any duplicate tables.
   */

  emit_dri(cinfo); /* the Microsoft spec likes a DRI */

  prec = 0;
  if (!cinfo->write_AVI1_marker) { /* AVI will have one DQT, assume both chromas use the same */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;  ci++, compptr++) {
      prec += emit_dqt(cinfo, compptr->quant_tbl_no);
      }
	}
   else {
	 prec += emit_both_dqt(cinfo, 0, 1);  /* hard coded for tables 0 and 1 */
	 }

  /* now prec is nonzero iff there are any 16-bit quant tables. */

  /* Check for a non-baseline specification.
   * Note we assume that Huffman table numbers won't be changed later.
   */
  is_baseline = TRUE;
  if (cinfo->arith_code || (cinfo->data_precision != 8))
    is_baseline = FALSE;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
      is_baseline = FALSE;
  }
  if (prec && is_baseline) {
    is_baseline = FALSE;
    /* If it's baseline except for quantizer size, warn the user */
    TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
  }

  /* Emit the proper SOF marker */
  if (cinfo->arith_code)
    emit_sof(cinfo, M_SOF9);	/* SOF code for arithmetic coding */
  else if (is_baseline)
    emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
  else
    emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
}


/*
 * Write scan header.
 * This consists of DHT or DAC markers, optional DRI, and SOS.
 * Compressed data will be written following the SOS.
 */

METHODDEF void
write_scan_header (j_compress_ptr cinfo)
{
  int i;
  jpeg_component_info *compptr;

  if (cinfo->arith_code) {
    /* Emit arith conditioning info.  We may have some duplication
     * if the file has multiple scans, but it's so small it's hardly
     * worth worrying about.
     */
    emit_dac(cinfo);
  } else {
    /* Emit Huffman tables.
     * Note that emit_dht() suppresses any duplicate tables.
     */
    if (!cinfo->write_AVI1_marker) { /* AVI files have no Huffman tables */
      for (i = 0; i < cinfo->comps_in_scan; i++) {
        compptr = cinfo->cur_comp_info[i];
        emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
        emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
        }
	  }
  }

  /* Emit DRI if required --- note that DRI value could change for each scan.
   * If it doesn't, a tiny amount of space is wasted in multiple-scan files.
   * We assume DRI will never be nonzero for one scan and zero for a later one.
   */
  if (cinfo->restart_interval)
    emit_dri(cinfo);

  emit_sos(cinfo);
}


/*
 * Write datastream trailer.
 */

METHODDEF void
write_file_trailer (j_compress_ptr cinfo)
{
UINT8 * ptr;
UINT32 size;

  ptr = emit_marker(cinfo, M_EOI);
  emit_byte(cinfo, 0xFF); // Miro DC20 seems to need fill between fields
  emit_byte(cinfo, 0xFF);

  if (cinfo->app0_marker_size_ptr) {
    size =  (UINT32)(ptr - (cinfo->soi_ptr)) + 1 /* for SOI */ + 1 /* for EOI */ + 2; /* for pad */
	cinfo->app0_marker_size_ptr[0] = (UINT8)((size >> 24) & 0xFF);
	cinfo->app0_marker_size_ptr[1] = (UINT8)((size >> 16) & 0xFF);
	cinfo->app0_marker_size_ptr[2] = (UINT8)((size >> 8) & 0xFF);
	cinfo->app0_marker_size_ptr[3] = (UINT8)(size & 0xFF);

	size -= 2; // size without fill

	cinfo->app0_marker_size_ptr[4] = (UINT8)((size >> 24) & 0xFF);
	cinfo->app0_marker_size_ptr[5] = (UINT8)((size >> 16) & 0xFF);
	cinfo->app0_marker_size_ptr[6] = (UINT8)((size >> 8) & 0xFF);
	cinfo->app0_marker_size_ptr[7] = (UINT8)(size & 0xFF);
	}
}


/*
 * Write an abbreviated table-specification datastream.
 * This consists of SOI, DQT and DHT tables, and EOI.
 * Any table that is defined and not marked sent_table = TRUE will be
 * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
 */

METHODDEF void
write_tables_only (j_compress_ptr cinfo)
{
  int i;

  emit_marker(cinfo, M_SOI);

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
    if (cinfo->quant_tbl_ptrs[i] != NULL)
      (void) emit_dqt(cinfo, i);
  }

  if (! cinfo->arith_code) {
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, FALSE);
      if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, TRUE);
    }
  }

  emit_marker(cinfo, M_EOI);
}


/*
 * Initialize the marker writer module.
 */

GLOBAL void
jinit_marker_writer (j_compress_ptr cinfo)
{
  /* Create the subobject */
  cinfo->marker = (struct jpeg_marker_writer *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(struct jpeg_marker_writer));
  /* Initialize method pointers */
  cinfo->marker->write_any_marker = write_any_marker;
  cinfo->marker->write_file_header = write_file_header;
  cinfo->marker->write_frame_header = write_frame_header;
  cinfo->marker->write_scan_header = write_scan_header;
  cinfo->marker->write_file_trailer = write_file_trailer;
  cinfo->marker->write_tables_only = write_tables_only;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcmaster.c ===
/*
 * jcmaster.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains master control logic for the JPEG compressor.
 * These routines are concerned with selecting the modules to be executed
 * and with determining the number of passes and the work to be done in each
 * pass.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef struct {
  struct jpeg_comp_master pub;	/* public fields */

  int pass_number;		/* eventually need more complex state... */
} my_comp_master;

typedef my_comp_master * my_master_ptr;


/*
 * Support routines that do various essential calculations.
 */

LOCAL void
initial_setup (j_compress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Sanity check on image dimensions */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
      || cinfo->num_components <= 0 || cinfo->input_components <= 0)
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* Width of an input scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* For compression, we never do DCT scaling. */
    compptr->DCT_scaled_size = DCTSIZE;
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
    /* Mark component needed (this flag isn't actually used for compression) */
    compptr->component_needed = TRUE;
  }

  /* Compute number of fully interleaved MCU rows (number of times that
   * main controller will call coefficient controller).
   */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
}


LOCAL void
per_scan_setup (j_compress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
    compptr->MCU_height = 1;
    compptr->MCU_blocks = 1;
    compptr->MCU_sample_width = DCTSIZE;
    compptr->last_col_width = 1;
    compptr->last_row_height = 1;
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
    cinfo->MCU_membership[0] = 0;
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    
    cinfo->blocks_in_MCU = 0;
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
      compptr->MCU_height = compptr->v_samp_factor;
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
      compptr->MCU_sample_width = compptr->MCU_width * DCTSIZE;
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
      if (tmp == 0) tmp = compptr->MCU_width;
      compptr->last_col_width = tmp;
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
      if (tmp == 0) tmp = compptr->MCU_height;
      compptr->last_row_height = tmp;
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
      if (cinfo->blocks_in_MCU + mcublks > MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
      while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }

  /* Convert restart specified in rows to actual MCU count. */
  /* Note that count must fit in 16 bits, so we provide limiting. */
  if (cinfo->restart_in_rows > 0) {
    long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
    cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
  }
}


/*
 * Master selection of compression modules.
 * This is done once at the start of processing an image.  We determine
 * which modules will be used and give them appropriate initialization calls.
 */

LOCAL void
master_selection (j_compress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  initial_setup(cinfo);
  master->pass_number = 0;

  /* There's not a lot of smarts here right now, but it'll get more
   * complicated when we have multiple implementations available...
   */

  /* Preprocessing */
  if (! cinfo->raw_data_in) {
    jinit_color_converter(cinfo);
    jinit_downsampler(cinfo);
    jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
  }
  /* Forward DCT */
  jinit_forward_dct(cinfo);
  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
#ifdef C_ARITH_CODING_SUPPORTED
    jinit_arith_encoder(cinfo);
#else
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
#endif
  } else
    jinit_huff_encoder(cinfo);

  /* For now, a full buffer is needed only for Huffman optimization. */
  jinit_c_coef_controller(cinfo, cinfo->optimize_coding);
  jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);

  jinit_marker_writer(cinfo);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Write the datastream header (SOI) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
}


/*
 * Per-pass setup.
 * This is called at the beginning of each pass.  We determine which modules
 * will be active during this pass and give them appropriate start_pass calls.
 * We also set is_last_pass to indicate whether any more passes will be
 * required.
 */

METHODDEF void
prepare_for_pass (j_compress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;
  int ci;
  int npasses;

  /* ???? JUST A QUICK CROCK FOR NOW ??? */

  /* For now, handle only single interleaved output scan; */
  /* we support two passes for Huffman optimization. */

  /* Prepare for single scan containing all components */
  if (cinfo->num_components > MAX_COMPS_IN_SCAN)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPS_IN_SCAN);
  cinfo->comps_in_scan = cinfo->num_components;
  for (ci = 0; ci < cinfo->num_components; ci++) {
    cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
  }

  per_scan_setup(cinfo);

  if (! cinfo->optimize_coding) {
    /* Standard single-pass case */
    npasses = 1;
    master->pub.call_pass_startup = TRUE;
    master->pub.is_last_pass = TRUE;
    if (! cinfo->raw_data_in) {
      (*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->downsample->start_pass) (cinfo);
      (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
    }
    (*cinfo->fdct->start_pass) (cinfo);
    (*cinfo->entropy->start_pass) (cinfo, FALSE);
    (*cinfo->coef->start_pass) (cinfo, JBUF_PASS_THRU);
    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
  } else {
    npasses = 2;
    switch (master->pass_number) {
    case 0:
      /* Huffman optimization: run all modules, gather statistics */
      master->pub.call_pass_startup = FALSE;
      master->pub.is_last_pass = FALSE;
      if (! cinfo->raw_data_in) {
	(*cinfo->cconvert->start_pass) (cinfo);
	(*cinfo->downsample->start_pass) (cinfo);
	(*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
      }
      (*cinfo->fdct->start_pass) (cinfo);
      (*cinfo->entropy->start_pass) (cinfo, TRUE);
      (*cinfo->coef->start_pass) (cinfo, JBUF_SAVE_AND_PASS);
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
      break;
    case 1:
      /* Second pass: reread data from coefficient buffer */
      master->pub.is_last_pass = TRUE;
      (*cinfo->entropy->start_pass) (cinfo, FALSE);
      (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
      /* We emit frame/scan headers now */
      (*cinfo->marker->write_frame_header) (cinfo);
      (*cinfo->marker->write_scan_header) (cinfo);
      break;
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = npasses;
  }

  master->pass_number++;
}


/*
 * Special start-of-pass hook.
 * This is called by jpeg_write_scanlines if call_pass_startup is TRUE.
 * In single-pass processing, we need this hook because we don't want to
 * write frame/scan headers during jpeg_start_compress; we want to let the
 * application write COM markers etc. between jpeg_start_compress and the
 * jpeg_write_scanlines loop.
 * In multi-pass processing, this routine is not used.
 */

METHODDEF void
pass_startup (j_compress_ptr cinfo)
{
  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */

  (*cinfo->marker->write_frame_header) (cinfo);
  (*cinfo->marker->write_scan_header) (cinfo);
}


/*
 * Finish up at end of pass.
 */

METHODDEF void
finish_pass_master (j_compress_ptr cinfo)
{
  /* More complex logic later ??? */

  /* The entropy coder needs an end-of-pass call, either to analyze
   * statistics or to flush its output buffer.
   */
  (*cinfo->entropy->finish_pass) (cinfo);
}


/*
 * Initialize master compression control.
 * This creates my own subrecord and also performs the master selection phase,
 * which causes other modules to create their subrecords.
 */

GLOBAL void
jinit_master_compress (j_compress_ptr cinfo)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_comp_master));
  cinfo->master = (struct jpeg_comp_master *) master;
  master->pub.prepare_for_pass = prepare_for_pass;
  master->pub.pass_startup = pass_startup;
  master->pub.finish_pass = finish_pass_master;

  master_selection(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcmainct.c ===
/*
 * jcmainct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the main buffer controller for compression.
 * The main buffer lies between the pre-processor and the JPEG
 * compressor proper; it holds downsampled data in the JPEG colorspace.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Note: currently, there is no operating mode in which a full-image buffer
 * is needed at this step.  If there were, that mode could not be used with
 * "raw data" input, since this module is bypassed in that case.  However,
 * we've left the code here for possible use in special applications.
 */
#undef FULL_MAIN_BUFFER_SUPPORTED


/* Private buffer controller object */

typedef struct {
  struct jpeg_c_main_controller pub; /* public fields */

  JDIMENSION cur_mcu_row;	/* number of current iMCU row */
  JDIMENSION rowgroup_ctr;	/* counts row groups received in iMCU row */
  JDIMENSION mcu_ctr;		/* counts MCUs output from current row */
  boolean suspended;		/* remember if we suspended output */
  J_BUF_MODE pass_mode;		/* current operating mode */

  /* If using just a strip buffer, this points to the entire set of buffers
   * (we allocate one for each component).  In the full-image case, this
   * points to the currently accessible strips of the virtual arrays.
   */
  JSAMPARRAY buffer[MAX_COMPONENTS];

#ifdef FULL_MAIN_BUFFER_SUPPORTED
  /* If using full-image storage, this array holds pointers to virtual-array
   * control blocks for each component.  Unused if not full-image storage.
   */
  jvirt_sarray_ptr whole_image[MAX_COMPONENTS];
#endif
} my_main_controller;

typedef my_main_controller * my_main_ptr;


/* Forward declarations */
METHODDEF void process_data_simple_main
	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
#ifdef FULL_MAIN_BUFFER_SUPPORTED
METHODDEF void process_data_buffer_main
	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Do nothing in raw-data mode. */
  if (cinfo->raw_data_in)
    return;

  main->cur_mcu_row = 0;	/* initialize counters */
  main->rowgroup_ctr = 0;
  main->mcu_ctr = 0;
  main->suspended = FALSE;
  main->pass_mode = pass_mode;	/* save mode for use by process_data */

  switch (pass_mode) {
  case JBUF_PASS_THRU:
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    if (main->whole_image[0] != NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
    main->pub.process_data = process_data_simple_main;
    break;
#ifdef FULL_MAIN_BUFFER_SUPPORTED
  case JBUF_SAVE_SOURCE:
  case JBUF_CRANK_DEST:
  case JBUF_SAVE_AND_PASS:
    if (main->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    main->pub.process_data = process_data_buffer_main;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data.
 * This routine handles the simple pass-through mode,
 * where we have only a strip buffer.
 */

METHODDEF void
process_data_simple_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  while (main->cur_mcu_row < cinfo->total_iMCU_rows) {
    /* Read input data if we haven't filled the main buffer yet */
    if (main->rowgroup_ctr < DCTSIZE)
      (*cinfo->prep->pre_process_data) (cinfo,
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
					(JDIMENSION) DCTSIZE);

    /* If we don't have a full iMCU row buffered, return to application for
     * more data.  Note that preprocessor will always pad to fill the iMCU row
     * at the bottom of the image.
     */
    if (main->rowgroup_ctr != DCTSIZE)
      return;

    /* Send the completed row to the compressor */
    (*cinfo->coef->compress_data) (cinfo, main->buffer, &main->mcu_ctr);

    /* If compressor did not consume the whole row, then we must need to
     * suspend processing and return to the application.  In this situation
     * we pretend we didn't yet consume the last input row; otherwise, if
     * it happened to be the last row of the image, the application would
     * think we were done.
     */
    if (main->mcu_ctr < cinfo->MCUs_per_row) {
      if (! main->suspended) {
	(*in_row_ctr)--;
	main->suspended = TRUE;
      }
      return;
    }
    /* We did finish the row.  Undo our little suspension hack if a previous
     * call suspended; then mark the main buffer empty.
     */
    if (main->suspended) {
      (*in_row_ctr)++;
      main->suspended = FALSE;
    }
    main->mcu_ctr = 0;
    main->rowgroup_ctr = 0;
    main->cur_mcu_row++;
  }
}


#ifdef FULL_MAIN_BUFFER_SUPPORTED

/*
 * Process some data.
 * This routine handles all of the modes that use a full-size buffer.
 */

METHODDEF void
process_data_buffer_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci;
  jpeg_component_info *compptr;
  boolean writing = (main->pass_mode != JBUF_CRANK_DEST);

  while (main->cur_mcu_row < cinfo->total_iMCU_rows) {
    /* Realign the virtual buffers if at the start of an iMCU row. */
    if (main->rowgroup_ctr == 0) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	main->buffer[ci] = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, main->whole_image[ci],
	   main->cur_mcu_row * (compptr->v_samp_factor * DCTSIZE), writing);
      }
      /* In a read pass, pretend we just read some source data. */
      if (! writing) {
	*in_row_ctr += cinfo->max_v_samp_factor * DCTSIZE;
	main->rowgroup_ctr = DCTSIZE;
      }
    }

    /* If a write pass, read input data until the current iMCU row is full. */
    /* Note: preprocessor will pad if necessary to fill the last iMCU row. */
    if (writing) {
      (*cinfo->prep->pre_process_data) (cinfo,
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
					(JDIMENSION) DCTSIZE);
      /* Return to application if we need more data to fill the iMCU row. */
      if (main->rowgroup_ctr < DCTSIZE)
	return;
    }

    /* Emit data, unless this is a sink-only pass. */
    if (main->pass_mode != JBUF_SAVE_SOURCE) {
      (*cinfo->coef->compress_data) (cinfo, main->buffer, &main->mcu_ctr);
      /* If compressor did not consume the whole row, then we must need to
       * suspend processing and return to the application.  In this situation
       * we pretend we didn't yet consume the last input row; otherwise, if
       * it happened to be the last row of the image, the application would
       * think we were done.
       */
      if (main->mcu_ctr < cinfo->MCUs_per_row) {
	if (! main->suspended) {
	  (*in_row_ctr)--;
	  main->suspended = TRUE;
	}
	return;
      }
      /* We did finish the row.  Undo our little suspension hack if a previous
       * call suspended; then mark the main buffer empty.
       */
      if (main->suspended) {
	(*in_row_ctr)++;
	main->suspended = FALSE;
      }
    }

    /* If get here, we are done with this iMCU row.  Mark buffer empty. */
    main->mcu_ctr = 0;
    main->rowgroup_ctr = 0;
    main->cur_mcu_row++;
  }
}

#endif /* FULL_MAIN_BUFFER_SUPPORTED */


/*
 * Initialize main buffer controller.
 */

GLOBAL void
jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main;
  int ci;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_c_main_controller *) main;
  main->pub.start_pass = start_pass_main;

  /* We don't need to create a buffer in raw-data mode. */
  if (cinfo->raw_data_in)
    return;

  /* Create the buffer.  It holds downsampled data, so each component
   * may be of a different size.
   */
  if (need_full_buffer) {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    /* Allocate a full-image virtual array for each component */
    /* Note we implicitly pad the bottom to a multiple of the iMCU height */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      main->whole_image[ci] = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 compptr->width_in_blocks * DCTSIZE,
	 compptr->height_in_blocks * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
    main->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
    /* Allocate a strip buffer for each component */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      main->buffer[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 compptr->width_in_blocks * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcomapi.c ===
/*
 * jcomapi.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface routines that are used for both
 * compression and decompression.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Abort processing of a JPEG compression or decompression operation,
 * but don't destroy the object itself.
 *
 * For this, we merely clean up all the nonpermanent memory pools.
 * Note that temp files (virtual arrays) are not allowed to belong to
 * the permanent pool, so we will be able to close all temp files here.
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL void
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some malloc libraries.
   */
  /*  This can be called via ERREXIT1 before we have a mem ptr
   *  in jinit_memory_mgr so check pointer first
   */

  if (cinfo->mem) {
      for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
        (*cinfo->mem->free_pool) (cinfo, pool);
      }
  }

  /* Reset overall state for possible reuse of object */
  cinfo->global_state = (cinfo->is_decompressor ? DSTATE_START : CSTATE_START);
}


/*
 * Destruction of a JPEG object.
 *
 * Everything gets deallocated except the master jpeg_compress_struct itself
 * and the error manager struct.  Both of these are supplied by the application
 * and must be freed, if necessary, by the application.  (Often they are on
 * the stack and so don't need to be freed anyway.)
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL void
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
    (*cinfo->mem->self_destruct) (cinfo);
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
  cinfo->global_state = 0;	/* mark it destroyed */
}


/*
 * Convenience routines for allocating quantization and Huffman tables.
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL JQUANT_TBL *
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}


GLOBAL JHUFF_TBL *
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcparam.c ===
/*
 * jcparam.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains optional default-setting code for the JPEG compressor.
 * Applications do not have to use this file, but those that don't use it
 * must know a lot more about the innards of the JPEG code.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *   All Rights Reserved.
*/

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Quantization table setup routines
 */

GLOBAL void
jpeg_add_quant_table (j_compress_ptr cinfo, int which_tbl,
		      const unsigned int *basic_table,
		      int scale_factor, boolean force_baseline)
/* Define a quantization table equal to the basic_table times
 * a scale factor (given as a percentage).
 * If force_baseline is TRUE, the computed quantization table entries
 * are limited to 1..255 for JPEG baseline compatibility.
 */
{
  JQUANT_TBL ** qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];
  int i;
  long temp;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (*qtblptr == NULL)
    *qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);

  for (i = 0; i < DCTSIZE2; i++) {
    temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
    /* limit the values to the valid range */
    if (temp <= 0L) temp = 1L;
    if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
    if (force_baseline && temp > 255L)
      temp = 255L;		/* limit to baseline range if requested */
    (*qtblptr)->quantval[i] = (UINT16) temp;
  }

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*qtblptr)->sent_table = FALSE;
}


GLOBAL void
jpeg_set_linear_quality (j_compress_ptr cinfo, int scale_factor,
			 boolean force_baseline)
/* Set or change the 'quality' (quantization) setting, using default tables
 * and a straight percentage-scaling quality scale.  In most cases it's better
 * to use jpeg_set_quality (below); this entry point is provided for
 * applications that insist on a linear percentage scaling.
 */
{
  /* This is the sample quantization table given in the JPEG spec section K.1,
   * but expressed in zigzag order (as are all of our quant. tables).
   * The spec says that the values given produce "good" quality, and
   * when divided by 2, "very good" quality.
   */
  static const unsigned int std_luminance_quant_tbl[DCTSIZE2] = {
    16,  11,  12,  14,  12,  10,  16,  14,
    13,  14,  18,  17,  16,  19,  24,  40,
    26,  24,  22,  22,  24,  49,  35,  37,
    29,  40,  58,  51,  61,  60,  57,  51,
    56,  55,  64,  72,  92,  78,  64,  68,
    87,  69,  55,  56,  80, 109,  81,  87,
    95,  98, 103, 104, 103,  62,  77, 113,
    121, 112, 100, 120,  92, 101, 103,  99
    };
  static const unsigned int std_chrominance_quant_tbl[DCTSIZE2] = {
    17,  18,  18,  24,  21,  24,  47,  26,
    26,  47,  99,  66,  56,  66,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
    };

  /* Set up two quantization tables using the specified scaling */
  jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		       scale_factor, force_baseline);
  jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
		       scale_factor, force_baseline);
}


GLOBAL int
jpeg_quality_scaling (int quality)
/* Convert a user-specified quality rating to a percentage scaling factor
 * for an underlying quantization table, using our recommended scaling curve.
 * The input 'quality' factor should be 0 (terrible) to 100 (very good).
 */
{
  /* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
  if (quality <= 0) quality = 1;
  if (quality > 100) quality = 100;

  /* The basic table is used as-is (scaling 100) for a quality of 50.
   * Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
   * note that at Q=100 the scaling is 0, which will cause j_add_quant_table
   * to make all the table entries 1 (hence, no quantization loss).
   * Qualities 1..50 are converted to scaling percentage 5000/Q.
   */
  if (quality < 50)
    quality = 5000 / quality;
  else
    quality = 200 - quality*2;

  return quality;
}


GLOBAL void
jpeg_set_quality (j_compress_ptr cinfo, int quality, boolean force_baseline)
/* Set or change the 'quality' (quantization) setting, using default tables.
 * This is the standard quality-adjusting entry point for typical user
 * interfaces; only those who want detailed control over quantization tables
 * would use the preceding three routines directly.
 */
{
  /* Convert user 0-100 rating to percentage scaling */
  quality = jpeg_quality_scaling(quality);

  /* Set up standard quality tables */
  jpeg_set_linear_quality(cinfo, quality, force_baseline);
}


/*
 * Huffman table setup routines
 */

LOCAL void
add_huff_table (j_compress_ptr cinfo,
		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
/* Define a Huffman table */
{
  if (*htblptr == NULL)
    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
  MEMCOPY((*htblptr)->huffval, val, SIZEOF((*htblptr)->huffval));

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*htblptr)->sent_table = TRUE; /* MJPEG does not put the actual tables in the output */
}


LOCAL void
std_huff_tables (j_compress_ptr cinfo)
/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
/* IMPORTANT: these are only valid for 8-bit data precision! */
{
  static const UINT8 bits_dc_luminance[17] =
    { /* 0-base */ 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_luminance[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  
  static const UINT8 bits_dc_chrominance[17] =
    { /* 0-base */ 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_chrominance[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  
  static const UINT8 bits_ac_luminance[17] =
    { /* 0-base */ 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
  
  static const UINT8 val_ac_luminance[] =
    { 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
      0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
      0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
      0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
      0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
      0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
      0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
      0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
      0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
      0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
      0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
      0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
      0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
      0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
      0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
      0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
      0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
      0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
      0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
      0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };

  /* MSFT Table
  static const UINT8 val_ac_luminance[] =
    { 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
	  0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
 	  0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08,
 	  0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0,
 	  0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16,
 	  0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28,
 	  0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
 	  0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
 	  0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
 	  0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
 	  0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
 	  0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
 	  0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
 	  0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7,
 	  0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6,
 	  0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5,
 	  0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 
 	  0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2,
 	  0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 
 	  0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8,
 	  0xF9, 0xFA }; */

  
  static const UINT8 bits_ac_chrominance[17] =
    { /* 0-base */ 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };

  static const UINT8 val_ac_chrominance[] =
    { 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
      0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
      0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
      0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
      0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
      0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
      0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
      0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
      0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
      0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
      0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
      0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
      0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
      0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
      0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
      0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
      0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };

  /* MSFT Table
  static const UINT8 val_ac_chrominance[] =
    { 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 
      0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
 	  0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 
 	  0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0,
 	  0x15, 0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 
 	  0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26,
 	  0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 
 	  0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
 	  0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 
 	  0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
 	  0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 
 	  0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
 	  0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 
 	  0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5,
 	  0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 
 	  0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3,
 	  0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 
 	  0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA,
 	  0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 
 	  0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8,
 	  0xF9, 0xFA }; */

  
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
		 bits_dc_luminance, val_dc_luminance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
		 bits_ac_luminance, val_ac_luminance);
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
		 bits_dc_chrominance, val_dc_chrominance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
		 bits_ac_chrominance, val_ac_chrominance);
}


/*
 * Default parameter setup for compression.
 *
 * Applications that don't choose to use this routine must do their
 * own setup of all these parameters.  Alternately, you can call this
 * to establish defaults and then alter parameters selectively.  This
 * is the recommended approach since, if we add any new parameters,
 * your code will still work (they'll be set to reasonable defaults).
 */

GLOBAL void
jpeg_set_defaults (j_compress_ptr cinfo)
{
  int i;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* Allocate comp_info array large enough for maximum component count.
   * Array is made permanent in case application wants to compress
   * multiple images at same param settings.
   */
  if (cinfo->comp_info == NULL)
    cinfo->comp_info = (jpeg_component_info *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  MAX_COMPONENTS * SIZEOF(jpeg_component_info));

  /* Initialize everything not dependent on the color space */

  cinfo->data_precision = BITS_IN_JSAMPLE;
  /* Set up two quantization tables using default quality of 75 */
  jpeg_set_quality(cinfo, 75, TRUE);
  /* Set up two Huffman tables */
  std_huff_tables(cinfo);

  /* Initialize default arithmetic coding conditioning */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    cinfo->arith_dc_L[i] = 0;
    cinfo->arith_dc_U[i] = 1;
    cinfo->arith_ac_K[i] = 5;
  }

  /* Expect normal source image, not raw downsampled data */
  cinfo->raw_data_in = FALSE;

  /* Use Huffman coding, not arithmetic coding, by default */
  cinfo->arith_code = FALSE;

  /* Color images are interleaved by default */
  cinfo->interleave = TRUE;

  /* By default, don't do extra passes to optimize entropy coding */
  cinfo->optimize_coding = FALSE;
  /* The standard Huffman tables are only valid for 8-bit data precision.
   * If the precision is higher, force optimization on so that usable
   * tables will be computed.  This test can be removed if default tables
   * are supplied that are valid for the desired precision.
   */
  if (cinfo->data_precision > 8)
    cinfo->optimize_coding = TRUE;

  /* By default, use the simpler non-cosited sampling alignment */
  cinfo->CCIR601_sampling = FALSE;

  /* No input smoothing */
  cinfo->smoothing_factor = 0;

  /* DCT algorithm preference */
  cinfo->dct_method = JDCT_DEFAULT;

  /* No restart markers */
  cinfo->restart_interval = 0;
  cinfo->restart_in_rows = 0;

  /* Fill in default JFIF marker parameters.  Note that whether the marker
   * will actually be written is determined by jpeg_set_colorspace.
   */
  cinfo->density_unit = 0;	/* Pixel size is unknown by default */
  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
  cinfo->Y_density = 1;

  /* Choose JPEG colorspace based on input space, set defaults accordingly */

  jpeg_default_colorspace(cinfo);
}


/*
 * Select an appropriate JPEG colorspace for in_color_space.
 */

GLOBAL void
jpeg_default_colorspace (j_compress_ptr cinfo)
{
  switch (cinfo->in_color_space) {
  case JCS_GRAYSCALE:
    jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
    break;
  case JCS_RGB:
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
    break;
  case JCS_YCbCr:
    jpeg_set_colorspace(cinfo, JCS_YCbCr);
    break;
  case JCS_CMYK:
    jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
    break;
  case JCS_YCCK:
    jpeg_set_colorspace(cinfo, JCS_YCCK);
    break;
  case JCS_UNKNOWN:
    jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
    break;
  default:
    ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
  }
}


/*
 * Set the JPEG colorspace, and choose colorspace-dependent default values.
 */

GLOBAL void
jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
{
  jpeg_component_info * compptr;
  int ci;

#define SET_COMP(index,id,hsamp,vsamp,quant,dctbl,actbl)  \
  (compptr = &cinfo->comp_info[index], \
   compptr->component_index = (index), \
   compptr->component_id = (id), \
   compptr->h_samp_factor = (hsamp), \
   compptr->v_samp_factor = (vsamp), \
   compptr->quant_tbl_no = (quant), \
   compptr->dc_tbl_no = (dctbl), \
   compptr->ac_tbl_no = (actbl) )

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* For all colorspaces, we use Q and Huff tables 0 for luminance components,
   * tables 1 for chrominance components.
   */

  cinfo->jpeg_color_space = colorspace;

  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
  cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */
  cinfo->write_AVI1_marker = FALSE;

  switch (colorspace) {
  case JCS_GRAYSCALE:
    cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
    cinfo->num_components = 1;
    /* JFIF specifies component ID 1 */
    SET_COMP(0, 1, 1,1, 0, 0,0);
    break;
  case JCS_RGB:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
    cinfo->num_components = 3;
    SET_COMP(0, 'R', 1,1, 0, 0,0);
    SET_COMP(1, 'G', 1,1, 0, 0,0);
    SET_COMP(2, 'B', 1,1, 0, 0,0);
    break;
  case JCS_YCbCr:
    cinfo->write_AVI1_marker = TRUE; /* Write a AVI1 marker */
	cinfo->AVI1_field_id = 0;
    cinfo->num_components = 3;
    /* JFIF specifies component IDs 1,2,3 */
    /* We default to 2x2 subsamples of chrominance */
    SET_COMP(0, 1, 2,1, 0, 0,0);
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
    break;
  case JCS_CMYK:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
    cinfo->num_components = 4;
    SET_COMP(0, 'C', 1,1, 0, 0,0);
    SET_COMP(1, 'M', 1,1, 0, 0,0);
    SET_COMP(2, 'Y', 1,1, 0, 0,0);
    SET_COMP(3, 'K', 1,1, 0, 0,0);
    break;
  case JCS_YCCK:
    cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
    cinfo->num_components = 4;
    SET_COMP(0, 1, 2,2, 0, 0,0);
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
    SET_COMP(3, 4, 2,2, 0, 0,0);
    break;
  case JCS_UNKNOWN:
    cinfo->num_components = cinfo->input_components;
    if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	       MAX_COMPONENTS);
    for (ci = 0; ci < cinfo->num_components; ci++) {
      SET_COMP(ci, ci, 1,1, 0, 0,0);
    }
    break;
  default:
    ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
  }
}

/*
 * Set the JPEG subsampling.
 */

GLOBAL void
jpeg_set_subsampling (j_compress_ptr cinfo, int x, int y)
{
  jpeg_component_info * compptr;

    SET_COMP(0, 1, x,y, 0, 0,0);
    SET_COMP(1, 2, 1,1, 1, 1,1);
    SET_COMP(2, 3, 1,1, 1, 1,1);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcsample.c ===
/*
 * jcsample.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains downsampling routines.
 *
 * Downsampling input data is counted in "row groups".  A row group
 * is defined to be max_v_samp_factor pixel rows of each component,
 * from which the downsampler produces v_samp_factor sample rows.
 * A single row group is processed in each call to the downsampler module.
 *
 * The downsampler is responsible for edge-expansion of its output data
 * to fill an integral number of DCT blocks horizontally.  The source buffer
 * may be modified if it is helpful for this purpose (the source buffer is
 * allocated wide enough to correspond to the desired output width).
 * The caller (the prep controller) is responsible for vertical padding.
 *
 * The downsampler may request "context rows" by setting need_context_rows
 * during startup.  In this case, the input arrays will contain at least
 * one row group's worth of pixels above and below the passed-in data;
 * the caller will create dummy rows at image top and bottom by replicating
 * the first or last real pixel row.
 *
 * An excellent reference for image resampling is
 *   Digital Image Warping, George Wolberg, 1990.
 *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
 *
 * The downsampling algorithm used here is a simple average of the source
 * pixels covered by the output pixel.  The hi-falutin sampling literature
 * refers to this as a "box filter".  In general the characteristics of a box
 * filter are not very good, but for the specific cases we normally use (1:1
 * and 2:1 ratios) the box is equivalent to a "triangle filter" which is not
 * nearly so bad.  If you intend to use other sampling ratios, you'd be well
 * advised to improve this code.
 *
 * A simple input-smoothing capability is provided.  This is mainly intended
 * for cleaning up color-dithered GIF input files (if you find it inadequate,
 * we suggest using an external filtering program such as pnmconvol).  When
 * enabled, each input pixel P is replaced by a weighted sum of itself and its
 * eight neighbors.  P's weight is 1-8*SF and each neighbor's weight is SF,
 * where SF = (smoothing_factor / 1024).
 * Currently, smoothing is only supported for 2h2v sampling factors.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Pointer to routine to downsample a single component */
typedef JMETHOD(void, downsample1_ptr,
		(j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data));

/* Private subobject */

typedef struct {
  struct jpeg_downsampler pub;	/* public fields */

  /* Downsampling method pointers, one per component */
  downsample1_ptr methods[MAX_COMPONENTS];
} my_downsampler;

typedef my_downsampler * my_downsample_ptr;


/*
 * Initialize for a downsampling pass.
 */

METHODDEF void
start_pass_downsample (j_compress_ptr cinfo)
{
  /* no work for now */
}


/*
 * Expand a component horizontally from width input_cols to width output_cols,
 * by duplicating the rightmost samples.
 */

LOCAL void
expand_right_edge (JSAMPARRAY image_data, int num_rows,
		   JDIMENSION input_cols, JDIMENSION output_cols)
{
  register JSAMPROW ptr;
  register JSAMPLE pixval;
  register int count;
  int row;
  int numcols = (int) (output_cols - input_cols);

  if (numcols > 0) {
    for (row = 0; row < num_rows; row++) {
      ptr = image_data[row] + input_cols;
      pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
      for (count = numcols; count > 0; count--)
	*ptr++ = pixval;
    }
  }
}


/*
 * Do downsampling for a whole row group (all components).
 *
 * In this version we simply downsample each component independently.
 */

METHODDEF void
sep_downsample (j_compress_ptr cinfo,
		JSAMPIMAGE input_buf, JDIMENSION in_row_index,
		JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
  int ci;
  jpeg_component_info * compptr;
  JSAMPARRAY in_ptr, out_ptr;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    in_ptr = input_buf[ci] + in_row_index;
    out_ptr = output_buf[ci] + (out_row_group_index * compptr->v_samp_factor);
    (*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
  }
}


/*
 * Downsample pixel values of a single component.
 * One row group is processed per call.
 * This version handles arbitrary integral sampling ratios, without smoothing.
 * Note that this version is not actually used for customary sampling ratios.
 */

METHODDEF void
int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
  JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  JSAMPROW inptr, outptr;
  INT32 outvalue;

  h_expand = cinfo->max_h_samp_factor / compptr->h_samp_factor;
  v_expand = cinfo->max_v_samp_factor / compptr->v_samp_factor;
  numpix = h_expand * v_expand;
  numpix2 = numpix/2;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * h_expand);

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    for (outcol = 0, outcol_h = 0; outcol < output_cols;
	 outcol++, outcol_h += h_expand) {
      outvalue = 0;
      for (v = 0; v < v_expand; v++) {
	inptr = input_data[inrow+v] + outcol_h;
	for (h = 0; h < h_expand; h++) {
	  outvalue += (INT32) GETJSAMPLE(*inptr++);
	}
      }
      *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
    }
    inrow += v_expand;
  }
}


/*
 * Downsample pixel values of a single component.
 * This version handles the special case of a full-size component,
 * without smoothing.
 */

METHODDEF void
fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  /* Copy the data */
  jcopy_sample_rows(input_data, 0, output_data, 0,
		    cinfo->max_v_samp_factor, cinfo->image_width);
  /* Edge-expand */
  expand_right_edge(output_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, compptr->width_in_blocks * DCTSIZE);
}


/*
 * Downsample pixel values of a single component.
 * This version handles the common case of 2:1 horizontal and 1:1 vertical,
 * without smoothing.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF void
h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr, outptr;
  register int bias;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr = input_data[outrow];
    bias = 0;			/* bias = 0,1,0,1,... for successive samples */
    for (outcol = 0; outcol < output_cols; outcol++) {
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
			      + bias) >> 1);
      bias ^= 1;		/* 0=>1, 1=>0 */
      inptr += 2;
    }
  }
}


/*
 * Downsample pixel values of a single component.
 * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
 * without smoothing.
 */

METHODDEF void
h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr0, inptr1, outptr;
  register int bias;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr0 = input_data[inrow];
    inptr1 = input_data[inrow+1];
    bias = 1;			/* bias = 1,2,1,2,... for successive samples */
    for (outcol = 0; outcol < output_cols; outcol++) {
      *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
			      + bias) >> 2);
      bias ^= 3;		/* 1=>2, 2=>1 */
      inptr0 += 2; inptr1 += 2;
    }
    inrow += 2;
  }
}


#ifdef INPUT_SMOOTHING_SUPPORTED

/*
 * Downsample pixel values of a single component.
 * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
 * with smoothing.  One row of context is required.
 */

METHODDEF void
h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
			JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr0, inptr1, above_ptr, below_ptr, outptr;
  INT32 membersum, neighsum, memberscale, neighscale;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
		    cinfo->image_width, output_cols * 2);

  /* We don't bother to form the individual "smoothed" input pixel values;
   * we can directly compute the output which is the average of the four
   * smoothed values.  Each of the four member pixels contributes a fraction
   * (1-8*SF) to its own smoothed image and a fraction SF to each of the three
   * other smoothed pixels, therefore a total fraction (1-5*SF)/4 to the final
   * output.  The four corner-adjacent neighbor pixels contribute a fraction
   * SF to just one smoothed pixel, or SF/4 to the final output; while the
   * eight edge-adjacent neighbors contribute SF to each of two smoothed
   * pixels, or SF/2 overall.  In order to use integer arithmetic, these
   * factors are scaled by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr0 = input_data[inrow];
    inptr1 = input_data[inrow+1];
    above_ptr = input_data[inrow-1];
    below_ptr = input_data[inrow+2];

    /* Special case for first column: pretend column -1 is same as column 0 */
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
    neighsum += neighsum;
    neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
      /* sum of pixels directly mapped to this output element */
      membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
      /* sum of edge-neighbor pixels */
      neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
      /* The edge-neighbors count twice as much as corner-neighbors */
      neighsum += neighsum;
      /* Add in the corner-neighbors */
      neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
      /* form final output scaled up by 2^16 */
      membersum = membersum * memberscale + neighsum * neighscale;
      /* round, descale and output it */
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
      inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
    }

    /* Special case for last column */
    membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
    neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
	       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
    neighsum += neighsum;
    neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);

    inrow += 2;
  }
}


/*
 * Downsample pixel values of a single component.
 * This version handles the special case of a full-size component,
 * with smoothing.  One row of context is required.
 */

METHODDEF void
fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
			    JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr, above_ptr, below_ptr, outptr;
  INT32 membersum, neighsum, memberscale, neighscale;
  int colsum, lastcolsum, nextcolsum;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
		    cinfo->image_width, output_cols);

  /* Each of the eight neighbor pixels contributes a fraction SF to the
   * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
   * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */

  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
    outptr = output_data[outrow];
    inptr = input_data[outrow];
    above_ptr = input_data[outrow-1];
    below_ptr = input_data[outrow+1];

    /* Special case for first column */
    colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
	     GETJSAMPLE(*inptr);
    membersum = GETJSAMPLE(*inptr++);
    nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
		 GETJSAMPLE(*inptr);
    neighsum = colsum + (colsum - membersum) + nextcolsum;
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
    lastcolsum = colsum; colsum = nextcolsum;

    for (colctr = output_cols - 2; colctr > 0; colctr--) {
      membersum = GETJSAMPLE(*inptr++);
      above_ptr++; below_ptr++;
      nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
		   GETJSAMPLE(*inptr);
      neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
      membersum = membersum * memberscale + neighsum * neighscale;
      *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
      lastcolsum = colsum; colsum = nextcolsum;
    }

    /* Special case for last column */
    membersum = GETJSAMPLE(*inptr);
    neighsum = lastcolsum + (colsum - membersum) + colsum;
    membersum = membersum * memberscale + neighsum * neighscale;
    *outptr = (JSAMPLE) ((membersum + 32768) >> 16);

  }
}

#endif /* INPUT_SMOOTHING_SUPPORTED */


/*
 * Module initialization routine for downsampling.
 * Note that we must select a routine for each component.
 */

GLOBAL void
jinit_downsampler (j_compress_ptr cinfo)
{
  my_downsample_ptr downsample;
  int ci;
  jpeg_component_info * compptr;
  boolean smoothok = TRUE;

  downsample = (my_downsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_downsampler));
  cinfo->downsample = (struct jpeg_downsampler *) downsample;
  downsample->pub.start_pass = start_pass_downsample;
  downsample->pub.downsample = sep_downsample;
  downsample->pub.need_context_rows = FALSE;

  if (cinfo->CCIR601_sampling)
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* Verify we can handle the sampling factors, and set up method pointers */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor == cinfo->max_h_samp_factor &&
	compptr->v_samp_factor == cinfo->max_v_samp_factor) {
#ifdef INPUT_SMOOTHING_SUPPORTED
      if (cinfo->smoothing_factor) {
	downsample->methods[ci] = fullsize_smooth_downsample;
	downsample->pub.need_context_rows = TRUE;
      } else
#endif
	downsample->methods[ci] = fullsize_downsample;
    } else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
	       compptr->v_samp_factor == cinfo->max_v_samp_factor) {
      smoothok = FALSE;
      downsample->methods[ci] = h2v1_downsample;
    } else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
	       compptr->v_samp_factor * 2 == cinfo->max_v_samp_factor) {
#ifdef INPUT_SMOOTHING_SUPPORTED
      if (cinfo->smoothing_factor) {
	downsample->methods[ci] = h2v2_smooth_downsample;
	downsample->pub.need_context_rows = TRUE;
      } else
#endif
	downsample->methods[ci] = h2v2_downsample;
    } else if ((cinfo->max_h_samp_factor % compptr->h_samp_factor) == 0 &&
	       (cinfo->max_v_samp_factor % compptr->v_samp_factor) == 0) {
      smoothok = FALSE;
      downsample->methods[ci] = int_downsample;
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
  }

#ifdef INPUT_SMOOTHING_SUPPORTED
  if (cinfo->smoothing_factor && !smoothok)
    TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jconfig.h ===
/*
 * jconfig.doc
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file documents the configuration options that are required to
 * customize the JPEG software for a particular system.
 *
 * The actual configuration options for a particular installation are stored
 * in jconfig.h.  On many machines, jconfig.h can be generated automatically
 * or copied from one of the "canned" jconfig files that we supply.  But if
 * you need to generate a jconfig.h file by hand, this file tells you how.
 *
 * DO NOT EDIT THIS FILE --- IT WON'T ACCOMPLISH ANYTHING.
 * EDIT A COPY NAMED JCONFIG.H.
 */

/* jcb */

#define ALIGN_TYPE double

/*
 * These symbols indicate the properties of your machine or compiler.
 * #define the symbol if yes, #undef it if no.
 */

/* Does your compiler support function prototypes?
 * (If not, you also need to use ansi2knr, see install.doc)
 */
#define HAVE_PROTOTYPES

/* Does your compiler support the declaration "unsigned char" ?
 * How about "unsigned short" ?
 */
#define HAVE_UNSIGNED_CHAR
#define HAVE_UNSIGNED_SHORT

/* Define "void" as "char" if your compiler doesn't know about type void.
 * NOTE: be sure to define void such that "void *" represents the most general
 * pointer type, e.g., that returned by malloc().
 */
/* #define void char */

/* Define "const" as empty if your compiler doesn't know the "const" keyword.
 */
/* #define const */

/* Define this if an ordinary "char" type is unsigned.
 * If you're not sure, leaving it undefined will work at some cost in speed.
 * If you defined HAVE_UNSIGNED_CHAR then the speed difference is minimal.
 */
#define CHAR_IS_UNSIGNED

/* Define this if your system has an ANSI-conforming <stddef.h> file.
 */
#define HAVE_STDDEF_H

/* Define this if your system has an ANSI-conforming <stdlib.h> file.
 */
#define HAVE_STDLIB_H

/* Define this if your system does not have an ANSI/SysV <string.h>,
 * but does have a BSD-style <strings.h>.
 */
#undef NEED_BSD_STRINGS

/* Define this if your system does not provide typedef size_t in any of the
 * ANSI-standard places (stddef.h, stdlib.h, or stdio.h), but places it in
 * <sys/types.h> instead.
 */
#undef NEED_SYS_TYPES_H

/* For 80x86 machines, you need to define NEED_FAR_POINTERS,
 * unless you are using a large-data memory model or 80386 flat-memory mode.
 * On less brain-damaged CPUs this symbol must not be defined.
 * (Defining this symbol causes large data structures to be referenced through
 * "far" pointers and to be allocated with a special version of malloc.)
 */
#undef NEED_FAR_POINTERS

/* Define this if your linker needs global names to be unique in less
 * than the first 15 characters.
 */
#undef NEED_SHORT_EXTERNAL_NAMES

/* Although a real ANSI C compiler can deal perfectly well with pointers to
 * unspecified structures (see "incomplete types" in the spec), a few pre-ANSI
 * and pseudo-ANSI compilers get confused.  To keep one of these bozos happy,
 * define INCOMPLETE_TYPES_BROKEN.  This is not recommended unless you
 * actually get "missing structure definition" warnings or errors while
 * compiling the JPEG code.
 */
#undef INCOMPLETE_TYPES_BROKEN


/*
 * The following options affect code selection within the JPEG library,
 * but they don't need to be visible to applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS has been defined.
 */

#ifdef JPEG_INTERNALS

/* Define this if your compiler implements ">>" on signed values as a logical
 * (unsigned) shift; leave it undefined if ">>" is a signed (arithmetic) shift,
 * which is the normal and rational definition.
 */
#undef RIGHT_SHIFT_IS_UNSIGNED


#endif /* JPEG_INTERNALS */


/*
 * The remaining options do not affect the JPEG library proper,
 * but only the sample applications cjpeg/djpeg (see cjpeg.c, djpeg.c).
 * Other applications can ignore these.
 */

#ifdef JPEG_CJPEG_DJPEG

/* These defines indicate which image (non-JPEG) file formats are allowed. */

#define BMP_SUPPORTED		/* BMP image file format */
#define GIF_SUPPORTED		/* GIF image file format */
#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
#undef RLE_SUPPORTED		/* Utah RLE image file format */
#define TARGA_SUPPORTED		/* Targa image file format */

/* Define this if you want to name both input and output files on the command
 * line, rather than using stdout and optionally stdin.  You MUST do this if
 * your system can't cope with binary I/O to stdin/stdout.  See comments at
 * head of cjpeg.c or djpeg.c.
 */
#define TWO_FILE_COMMANDLINE

/* Define this if your system needs explicit cleanup of temporary files.
 * This is crucial under MS-DOS, where the temporary "files" may be areas
 * of extended memory; on most other systems it's not as important.
 */
#undef NEED_SIGNAL_CATCHER

/* By default, we open image files with fopen(...,"rb") or fopen(...,"wb").
 * This is necessary on systems that distinguish text files from binary files,
 * and is harmless on most systems that don't.  If you have one of the rare
 * systems that complains about the "b" spec, define this symbol.
 */
#undef DONT_USE_B_MODE

/* Define this if you want percent-done progress reports from cjpeg/djpeg.
 */
#undef PROGRESS_REPORT


#endif /* JPEG_CJPEG_DJPEG */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jcprepct.c ===
/*
 * jcprepct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the compression preprocessing controller.
 * This controller manages the color conversion, downsampling,
 * and edge expansion steps.
 *
 * Most of the complexity here is associated with buffering input rows
 * as required by the downsampler.  See the comments at the head of
 * jcsample.c for the downsampler's needs.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* At present, jcsample.c can request context rows only for smoothing.
 * In the future, we might also need context rows for CCIR601 sampling
 * or other more-complex downsampling procedures.  The code to support
 * context rows should be compiled only if needed.
 */
#ifdef INPUT_SMOOTHING_SUPPORTED
#define CONTEXT_ROWS_SUPPORTED
#endif


/*
 * For the simple (no-context-row) case, we just need to buffer one
 * row group's worth of pixels for the downsampling step.  At the bottom of
 * the image, we pad to a full row group by replicating the last pixel row.
 * The downsampler's last output row is then replicated if needed to pad
 * out to a full iMCU row.
 *
 * When providing context rows, we must buffer three row groups' worth of
 * pixels.  Three row groups are physically allocated, but the row pointer
 * arrays are made five row groups high, with the extra pointers above and
 * below "wrapping around" to point to the last and first real row groups.
 * This allows the downsampler to access the proper context rows.
 * At the top and bottom of the image, we create dummy context rows by
 * copying the first or last real pixel row.  This copying could be avoided
 * by pointer hacking as is done in jdmainct.c, but it doesn't seem worth the
 * trouble on the compression side.
 */


/* Private buffer controller object */

typedef struct {
  struct jpeg_c_prep_controller pub; /* public fields */

  /* Downsampling input buffer.  This buffer holds color-converted data
   * until we have enough to do a downsample step.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  JDIMENSION rows_to_go;	/* counts rows remaining in source image */
  int next_buf_row;		/* index of next row to store in color_buf */

#ifdef CONTEXT_ROWS_SUPPORTED	/* only needed for context case */
  int this_row_group;		/* starting row index of group to process */
  int next_buf_stop;		/* downsample when we reach this index */
#endif
} my_prep_controller;

typedef my_prep_controller * my_prep_ptr;


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;

  if (pass_mode != JBUF_PASS_THRU)
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Initialize total-height counter for detecting bottom of image */
  prep->rows_to_go = cinfo->image_height;
  /* Mark the conversion buffer empty */
  prep->next_buf_row = 0;
#ifdef CONTEXT_ROWS_SUPPORTED
  /* Preset additional state variables for context mode.
   * These aren't used in non-context mode, so we needn't test which mode.
   */
  prep->this_row_group = 0;
  /* Set next_buf_stop to stop after two row groups have been read in. */
  prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
#endif
}


/*
 * Expand an image vertically from height input_rows to height output_rows,
 * by duplicating the bottom row.
 */

LOCAL void
expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
		    int input_rows, int output_rows)
{
  register int row;

  for (row = input_rows; row < output_rows; row++) {
    jcopy_sample_rows(image_data, input_rows-1, image_data, row,
		      1, num_cols);
  }
}


/*
 * Process some data in the simple no-context case.
 *
 * Preprocessor output data is counted in "row groups".  A row group
 * is defined to be v_samp_factor sample rows of each component.
 * Downsampling will produce this much data from each max_v_samp_factor
 * input rows.
 */

METHODDEF void
pre_process_data (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		  JDIMENSION in_rows_avail,
		  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		  JDIMENSION out_row_groups_avail)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int numrows, ci;
  JDIMENSION inrows;
  jpeg_component_info * compptr;

  while (*in_row_ctr < in_rows_avail &&
	 *out_row_group_ctr < out_row_groups_avail) {
    /* Do color conversion to fill the conversion buffer. */
    inrows = in_rows_avail - *in_row_ctr;
    numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
    numrows = (int) MIN((JDIMENSION) numrows, inrows);
    (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
				       prep->color_buf,
				       (JDIMENSION) prep->next_buf_row,
				       numrows);
    *in_row_ctr += numrows;
    prep->next_buf_row += numrows;
    prep->rows_to_go -= numrows;
    /* If at bottom of image, pad to fill the conversion buffer. */
    if (prep->rows_to_go == 0 &&
	prep->next_buf_row < cinfo->max_v_samp_factor) {
      for (ci = 0; ci < cinfo->num_components; ci++) {
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
			   prep->next_buf_row, cinfo->max_v_samp_factor);
      }
      prep->next_buf_row = cinfo->max_v_samp_factor;
    }
    /* If we've filled the conversion buffer, empty it. */
    if (prep->next_buf_row == cinfo->max_v_samp_factor) {
      (*cinfo->downsample->downsample) (cinfo,
					prep->color_buf, (JDIMENSION) 0,
					output_buf, *out_row_group_ctr);
      prep->next_buf_row = 0;
      (*out_row_group_ctr)++;
    }
    /* If at bottom of image, pad the output to a full iMCU height.
     * Note we assume the caller is providing a one-iMCU-height output buffer!
     */
    if (prep->rows_to_go == 0 &&
	*out_row_group_ctr < out_row_groups_avail) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	expand_bottom_edge(output_buf[ci],
			   compptr->width_in_blocks * DCTSIZE,
			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
			   (int) (out_row_groups_avail * compptr->v_samp_factor));
      }
      *out_row_group_ctr = out_row_groups_avail;
      break;			/* can exit outer loop without test */
    }
  }
}


#ifdef CONTEXT_ROWS_SUPPORTED

/*
 * Process some data in the context case.
 */

METHODDEF void
pre_process_context (j_compress_ptr cinfo,
		     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		     JDIMENSION in_rows_avail,
		     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		     JDIMENSION out_row_groups_avail)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int numrows, ci;
  int buf_height = cinfo->max_v_samp_factor * 3;
  JDIMENSION inrows;
  jpeg_component_info * compptr;

  while (*out_row_group_ctr < out_row_groups_avail) {
    if (*in_row_ctr < in_rows_avail) {
      /* Do color conversion to fill the conversion buffer. */
      inrows = in_rows_avail - *in_row_ctr;
      numrows = prep->next_buf_stop - prep->next_buf_row;
      numrows = (int) MIN((JDIMENSION) numrows, inrows);
      (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
					 prep->color_buf,
					 (JDIMENSION) prep->next_buf_row,
					 numrows);
      /* Pad at top of image, if first time through */
      if (prep->rows_to_go == cinfo->image_height) {
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  int row;
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
	    jcopy_sample_rows(prep->color_buf[ci], 0,
			      prep->color_buf[ci], -row,
			      1, cinfo->image_width);
	  }
	}
      }
      *in_row_ctr += numrows;
      prep->next_buf_row += numrows;
      prep->rows_to_go -= numrows;
    } else {
      /* Return for more data, unless we are at the bottom of the image. */
      if (prep->rows_to_go != 0)
	break;
    }
    /* If at bottom of image, pad to fill the conversion buffer. */
    if (prep->rows_to_go == 0 &&
	prep->next_buf_row < prep->next_buf_stop) {
      for (ci = 0; ci < cinfo->num_components; ci++) {
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
			   prep->next_buf_row, prep->next_buf_stop);
      }
      prep->next_buf_row = prep->next_buf_stop;
    }
    /* If we've gotten enough data, downsample a row group. */
    if (prep->next_buf_row == prep->next_buf_stop) {
      (*cinfo->downsample->downsample) (cinfo,
					prep->color_buf,
					(JDIMENSION) prep->this_row_group,
					output_buf, *out_row_group_ctr);
      (*out_row_group_ctr)++;
      /* Advance pointers with wraparound as necessary. */
      prep->this_row_group += cinfo->max_v_samp_factor;
      if (prep->this_row_group >= buf_height)
	prep->this_row_group = 0;
      if (prep->next_buf_row >= buf_height)
	prep->next_buf_row = 0;
      prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
    }
    /* If at bottom of image, pad the output to a full iMCU height.
     * Note we assume the caller is providing a one-iMCU-height output buffer!
     */
    if (prep->rows_to_go == 0 &&
	*out_row_group_ctr < out_row_groups_avail) {
      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	expand_bottom_edge(output_buf[ci],
			   compptr->width_in_blocks * DCTSIZE,
			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
			   (int) (out_row_groups_avail * compptr->v_samp_factor));
      }
      *out_row_group_ctr = out_row_groups_avail;
      break;			/* can exit outer loop without test */
    }
  }
}


/*
 * Create the wrapped-around downsampling input buffer needed for context mode.
 */

LOCAL void
create_context_buffer (j_compress_ptr cinfo)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int rgroup_height = cinfo->max_v_samp_factor;
  int ci, i;
  jpeg_component_info * compptr;
  JSAMPARRAY true_buffer, fake_buffer;

  /* Grab enough space for fake row pointers for all the components;
   * we need five row groups' worth of pointers for each component.
   */
  fake_buffer = (JSAMPARRAY)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(cinfo->num_components * 5 * rgroup_height) *
				SIZEOF(JSAMPROW));

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Allocate the actual buffer space (3 row groups) for this component.
     * We make the buffer wide enough to allow the downsampler to edge-expand
     * horizontally within the buffer, if it so chooses.
     */
    true_buffer = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
       (JDIMENSION) (3 * rgroup_height));
    /* Copy true buffer row pointers into the middle of the fake row array */
    MEMCOPY(fake_buffer + rgroup_height, true_buffer,
	    3 * rgroup_height * SIZEOF(JSAMPROW));
    /* Fill in the above and below wraparound pointers */
    for (i = 0; i < rgroup_height; i++) {
      fake_buffer[i] = true_buffer[2 * rgroup_height + i];
      fake_buffer[4 * rgroup_height + i] = true_buffer[i];
    }
    prep->color_buf[ci] = fake_buffer + rgroup_height;
    fake_buffer += 5 * rgroup_height; /* point to space for next component */
  }
}

#endif /* CONTEXT_ROWS_SUPPORTED */


/*
 * Initialize preprocessing controller.
 */

GLOBAL void
jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_prep_ptr prep;
  int ci;
  jpeg_component_info * compptr;

  if (need_full_buffer)		/* safety check */
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  prep = (my_prep_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_prep_controller));
  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
  prep->pub.start_pass = start_pass_prep;

  /* Allocate the color conversion buffer.
   * We make the buffer wide enough to allow the downsampler to edge-expand
   * horizontally within the buffer, if it so chooses.
   */
  if (cinfo->downsample->need_context_rows) {
    /* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
    prep->pub.pre_process_data = pre_process_context;
    create_context_buffer(cinfo);
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
    /* No context, just make it tall enough for one row group */
    prep->pub.pre_process_data = pre_process_data;
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdatadst.c ===
/*
 * jdatadst.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains compression data destination routines for the case of
 * emitting JPEG data to a file (or any stdio stream).  While these routines
 * are sufficient for most applications, some will want to use a different
 * destination manager.
 * IMPORTANT: we assume that fwrite() will correctly transcribe an array of
 * JOCTETs into 8-bit-wide elements on external storage.  If char is wider
 * than 8 bits on your machine, you may need to do some tweaking.
 */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jerror.h"


/* Expanded data destination object for stdio output */

typedef struct {
  struct jpeg_destination_mgr pub; /* public fields */

  FILE * outfile;		/* target stream */
  JOCTET * buffer;		/* start of buffer */
} my_destination_mgr;

typedef my_destination_mgr * my_dest_ptr;

#define OUTPUT_BUF_SIZE  4096	/* choose an efficiently fwrite'able size */


/*
 * Initialize destination --- called by jpeg_start_compress
 * before any data is actually written.
 */

METHODDEF void
init_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  /* Allocate the output buffer --- it will be released when done with image */
  dest->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  OUTPUT_BUF_SIZE * SIZEOF(JOCTET));

  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;
}


/*
 * Empty the output buffer --- called whenever buffer fills up.
 *
 * In typical applications, this should write the entire output buffer
 * (ignoring the current state of next_output_byte & free_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been dumped.
 *
 * In applications that need to be able to suspend compression due to output
 * overrun, a FALSE return indicates that the buffer cannot be emptied now.
 * In this situation, the compressor will return to its caller (possibly with
 * an indication that it has not accepted all the supplied scanlines).  The
 * application should resume compression after it has made more room in the
 * output buffer.  Note that there are substantial restrictions on the use of
 * suspension --- see the documentation.
 *
 * When suspending, the compressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_output_byte & free_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point will be regenerated after resumption, so do not
 * write it out when emptying the buffer externally.
 */

METHODDEF boolean
empty_output_buffer (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;

  if (JFWRITE(dest->outfile, dest->buffer, OUTPUT_BUF_SIZE) !=
      (size_t) OUTPUT_BUF_SIZE)
    ERREXIT(cinfo, JERR_FILE_WRITE);

  dest->pub.next_output_byte = dest->buffer;
  dest->pub.free_in_buffer = OUTPUT_BUF_SIZE;

  return TRUE;
}


/*
 * Terminate destination --- called by jpeg_finish_compress
 * after all data has been written.  Usually needs to flush buffer.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF void
term_destination (j_compress_ptr cinfo)
{
  my_dest_ptr dest = (my_dest_ptr) cinfo->dest;
  size_t datacount = OUTPUT_BUF_SIZE - dest->pub.free_in_buffer;

  /* Write any data remaining in the buffer */
  if (datacount > 0) {
    if (JFWRITE(dest->outfile, dest->buffer, datacount) != datacount)
      ERREXIT(cinfo, JERR_FILE_WRITE);
  }
  fflush(dest->outfile);
  /* Make sure we wrote the output file OK */
  if (ferror(dest->outfile))
    ERREXIT(cinfo, JERR_FILE_WRITE);
}


/*
 * Prepare for output to a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing compression.
 */

GLOBAL void
jpeg_stdio_dest (j_compress_ptr cinfo, FILE * outfile)
{
  my_dest_ptr dest;

  /* The destination object is made permanent so that multiple JPEG images
   * can be written to the same file without re-executing jpeg_stdio_dest.
   * This makes it dangerous to use this manager and a different destination
   * manager serially with the same JPEG object, because their private object
   * sizes may be different.  Caveat programmer.
   */
  if (cinfo->dest == NULL) {	/* first time for this JPEG object? */
    cinfo->dest = (struct jpeg_destination_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_destination_mgr));
  }

  dest = (my_dest_ptr) cinfo->dest;
  dest->pub.init_destination = init_destination;
  dest->pub.empty_output_buffer = empty_output_buffer;
  dest->pub.term_destination = term_destination;
  dest->outfile = outfile;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdcolor.c ===
/*
 * jdcolor.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains output colorspace conversion routines.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private subobject */

typedef struct {
  struct jpeg_color_deconverter pub; /* public fields */

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
} my_color_deconverter;

typedef my_color_deconverter * my_uncconvert_ptr;


/**************** YCbCr -> RGB conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	R = Y                + 1.40200 * Cr
 *	G = Y - 0.34414 * Cb - 0.71414 * Cr
 *	B = Y + 1.77200 * Cb
 * where Cb and Cr represent the incoming values less MAXJSAMPLE/2.
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 * Notice that Y, being an integral input, does not contribute any fraction
 * so it need not participate in the rounding.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times Cb and Cr for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
 * values for the G calculation are left scaled up, since we must add them
 * together before rounding.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize for YCC->RGB colorspace conversion.
 */

METHODDEF void
ycc_rgb_start (j_decompress_ptr cinfo)
{
  my_uncconvert_ptr cconvert = (my_uncconvert_ptr) cinfo->cconvert;
  INT32 i, x2;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0; i <= MAXJSAMPLE; i++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - MAXJSAMPLE/2 */
    x2 = 2*i - MAXJSAMPLE;	/* twice x */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200/2) * x2 + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200/2) * x2 + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414/2)) * x2;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414/2)) * x2 + ONE_HALF;
  }
}


/*
 * Convert some rows of samples to the output colorspace.
 *
 * Note that we change from noninterleaved, one-plane-per-component format
 * to interleaved-pixel format.  The output buffer is therefore three times
 * as wide as the input buffer.
 * A starting row offset is provided only for the input buffer.  The caller
 * can easily adjust the passed output_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF void
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
  my_uncconvert_ptr cconvert = (my_uncconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  
  SHIFT_TEMPS
  DIB_TEMPS
  
  DIB_PARM_LOAD;
  
  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Note: if the inputs were computed directly from RGB values,
       * range-limiting would be unnecessary here; but due to possible
       * noise in the DCT/IDCT phase, we do need to apply range limits.
       */


      PUT_DIB(outptr,
      		  range_limit[y + Crrtab[cr]],
      		  range_limit[y + ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS))],
	          range_limit[y + Cbbtab[cb]]);

    }
  }
}


/**************** Cases other than YCbCr -> RGB **************/


/*
 * Color conversion for no colorspace change: just copy the data,
 * converting from separate-planes to interleaved representation.
 */

METHODDEF void
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->output_components;
  JDIMENSION num_cols = cinfo->output_width;
  int ci;

  while (--num_rows >= 0) {
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
      outptr = output_buf[0] + ci;
      for (count = num_cols; count > 0; count--) {
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
  }
}


/*
 * Color conversion for grayscale: just copy the data.
 * This also works for YCbCr -> grayscale conversion, in which
 * we just copy the Y (luminance) component and ignore chrominance.
 */

METHODDEF void
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
		    num_rows, cinfo->output_width);
}


/*
 * Adobe-style YCCK->CMYK conversion.
 * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume ycc_rgb_start has been called.
 */

METHODDEF void
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  my_uncconvert_ptr cconvert = (my_uncconvert_ptr) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
    inptr0 = input_buf[0][input_row];
    inptr1 = input_buf[1][input_row];
    inptr2 = input_buf[2][input_row];
    inptr3 = input_buf[3][input_row];
    input_row++;
    outptr = *output_buf++;
    for (col = 0; col < num_cols; col++) {
      y  = GETJSAMPLE(inptr0[col]);
      cb = GETJSAMPLE(inptr1[col]);
      cr = GETJSAMPLE(inptr2[col]);
      /* Note: if the inputs were computed directly from RGB values,
       * range-limiting would be unnecessary here; but due to possible
       * noise in the DCT/IDCT phase, we do need to apply range limits.
       */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}


/*
 * Empty method for start_pass.
 */

METHODDEF void
null_method (j_decompress_ptr cinfo)
{
  /* no work needed */
}


/*
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL void
jinit_color_deconverter (j_decompress_ptr cinfo)
{
  my_uncconvert_ptr cconvert;
  int ci;

  cconvert = (my_uncconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  /* set start_pass to null method until we find out differently */
  cconvert->pub.start_pass = null_method;

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  case JCS_RGB:
  case JCS_YCbCr:
    if (cinfo->num_components != 3)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;
  }

  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.start_pass = ycc_rgb_start;
      cconvert->pub.color_convert = ycc_rgb_convert;
    } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  case JCS_CMYK:
    cinfo->out_color_components = 4;
    if (cinfo->jpeg_color_space == JCS_YCCK) {
      cconvert->pub.start_pass = ycc_rgb_start;
      cconvert->pub.color_convert = ycck_cmyk_convert;
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
      cinfo->out_color_components = cinfo->num_components;
      cconvert->pub.color_convert = null_convert;
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdapi.c ===
/*
 * jdapi.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains application interface code for the decompression half of
 * the JPEG library.  Most of the routines intended to be called directly by
 * an application are in this file.  But also see jcomapi.c for routines
 * shared by compression and decompression.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * Initialization of a JPEG decompression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL void
jpeg_create_decompress (j_decompress_ptr cinfo)
{
  int i;

  /* For debugging purposes, zero the whole master structure.
   * But error manager pointer is already there, so save and restore it.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
    cinfo->err = err;
  }
  cinfo->is_decompressor = TRUE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->src = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
    cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  cinfo->sample_range_limit = NULL;

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker = NULL;
  jinit_marker_reader(cinfo);

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
}


/*
 * Destruction of a JPEG decompression object
 */

GLOBAL void
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}


/*
 * Install a special processing method for COM or APPn markers.
 */

GLOBAL void
jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
			   jpeg_marker_parser_method routine)
{
  if (marker_code == JPEG_COM)
    cinfo->marker->process_COM = routine;
  else if (marker_code >= JPEG_APP0 && marker_code <= JPEG_APP0+15)
    cinfo->marker->process_APPn[marker_code-JPEG_APP0] = routine;
  else
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
}


/*
 * Set default decompression parameters.
 */

LOCAL void
default_decompress_parms (j_decompress_ptr cinfo)
{
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
  case 1:
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
    cinfo->out_color_space = JCS_GRAYSCALE;
    break;
    
  case 3:
    if (cinfo->saw_JFIF_marker) {
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
    } else if (cinfo->saw_Adobe_marker) {
      switch (cinfo->Adobe_transform) {
      case 0:
	cinfo->jpeg_color_space = JCS_RGB;
	break;
      case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
	break;
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
	break;
      }
    } else {
      /* Saw no special markers, try to guess from the component IDs */
      int cid0 = cinfo->comp_info[0].component_id;
      int cid1 = cinfo->comp_info[1].component_id;
      int cid2 = cinfo->comp_info[2].component_id;

      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
      else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
      }
    }
    /* Always guess RGB is proper output colorspace. */
    cinfo->out_color_space = JCS_RGB;
    break;
    
  case 4:
    if (cinfo->saw_Adobe_marker) {
      switch (cinfo->Adobe_transform) {
      case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
	break;
      case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
	break;
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
	break;
      }
    } else {
      /* No special markers, assume straight CMYK. */
      cinfo->jpeg_color_space = JCS_CMYK;
    }
    cinfo->out_color_space = JCS_CMYK;
    break;
    
  default:
    cinfo->jpeg_color_space = JCS_UNKNOWN;
    cinfo->out_color_space = JCS_UNKNOWN;
    break;
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = 1;		/* 1:1 scaling */
  cinfo->scale_denom = 1;
  cinfo->output_gamma = 1.0;
  cinfo->raw_data_out = FALSE;
  cinfo->quantize_colors = FALSE;
  /* We set these in case application only sets quantize_colors. */
  cinfo->two_pass_quantize = TRUE;
  cinfo->dither_mode = JDITHER_FS;
  cinfo->desired_number_of_colors = 256;
  cinfo->colormap = NULL;
  /* DCT algorithm preference */
  cinfo->dct_method = JDCT_DEFAULT;
  cinfo->do_fancy_upsampling = TRUE;
}


/*
 * Decompression startup: read start of JPEG datastream to see what's there.
 * Need only initialize JPEG object and supply a data source before calling.
 *
 * This routine will read as far as the first SOS marker (ie, actual start of
 * compressed data), and will save all tables and parameters in the JPEG
 * object.  It will also initialize the decompression parameters to default
 * values, and finally return JPEG_HEADER_OK.  On return, the application may
 * adjust the decompression parameters and then call jpeg_start_decompress.
 * (Or, if the application only wanted to determine the image parameters,
 * the data need not be decompressed.  In that case, call jpeg_abort or
 * jpeg_destroy to release any temporary space.)
 * If an abbreviated (tables only) datastream is presented, the routine will
 * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
 * re-use the JPEG object to read the abbreviated image datastream(s).
 * It is unnecessary (but OK) to call jpeg_abort in this case.
 * The JPEG_SUSPENDED return code only occurs if the data source module
 * requests suspension of the decompressor.  In this case the application
 * should load more source data and then re-call jpeg_read_header to resume
 * processing.
 * If a non-suspending data source is used and require_image is TRUE, then the
 * return code need not be inspected since only JPEG_HEADER_OK is possible.
 */

GLOBAL int
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
  int retcode;

  if (cinfo->global_state == DSTATE_START) {
    /* First-time actions: reset appropriate modules */
    (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
    (*cinfo->marker->reset_marker_reader) (cinfo);
    (*cinfo->src->init_source) (cinfo);
    cinfo->global_state = DSTATE_INHEADER;
  } else if (cinfo->global_state != DSTATE_INHEADER) {
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }

  retcode = (*cinfo->marker->read_markers) (cinfo);

  switch (retcode) {
  case JPEG_HEADER_OK:		/* Found SOS, prepare to decompress */
    /* Set up default parameters based on header data */
    default_decompress_parms(cinfo);
    /* Set global state: ready for start_decompress */
    cinfo->global_state = DSTATE_READY;
    break;

  case JPEG_HEADER_TABLES_ONLY:	/* Found EOI before any SOS */
    if (cinfo->marker->saw_SOF)
      ERREXIT(cinfo, JERR_SOF_NO_SOS);
    if (require_image)		/* Complain if application wants an image */
      ERREXIT(cinfo, JERR_NO_IMAGE);
    /* We need not do any cleanup since only permanent storage (for DQT, DHT)
     * has been allocated.
     */
    /* Set global state: ready for a new datastream */
    cinfo->global_state = DSTATE_START;
    break;

  case JPEG_SUSPENDED:		/* Had to suspend before end of headers */
    /* no work */
    break;
  }

  return retcode;
}


/*
 * Decompression initialization.
 * jpeg_read_header must be completed before calling this.
 *
 * If a multipass operating mode was selected, this will do all but the
 * last pass, and thus may take a great deal of time.
 */

GLOBAL void
jpeg_start_decompress (j_decompress_ptr cinfo)
{
  JDIMENSION chunk_ctr, last_chunk_ctr;

  if (cinfo->global_state != DSTATE_READY)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Perform master selection of active modules */
  jinit_master_decompress(cinfo);
  /* Do all but the final (output) pass, and set up for that one. */
  for (;;) {
    (*cinfo->master->prepare_for_pass) (cinfo);
    if (cinfo->master->is_last_pass)
      break;
    chunk_ctr = 0;
    while (chunk_ctr < cinfo->main->num_chunks) {
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) chunk_ctr;
	cinfo->progress->pass_limit = (long) cinfo->main->num_chunks;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_chunk_ctr = chunk_ctr;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
				    &chunk_ctr, (JDIMENSION) 0);
      if (chunk_ctr == last_chunk_ctr) /* check for failure to make progress */
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
    }
    (*cinfo->master->finish_pass) (cinfo);
  }
  /* Ready for application to drive last pass through jpeg_read_scanlines
   * or jpeg_read_raw_data.
   */
  cinfo->output_scanline = 0;
  cinfo->global_state = (cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING);
}


/*
 * Read some scanlines of data from the JPEG decompressor.
 *
 * The return value will be the number of lines actually read.
 * This may be less than the number requested in several cases,
 * including bottom of image, data source suspension, and operating
 * modes that emit multiple scanlines at a time.
 *
 * Note: we warn about excess calls to jpeg_read_scanlines() since
 * this likely signals an application programmer error.  However,
 * an oversize buffer (max_lines > scanlines remaining) is not an error.
 */

GLOBAL JDIMENSION
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height)
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    cinfo->progress->pass_limit = (long) cinfo->output_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}


/*
 * Alternate entry point to read raw data.
 * Processes exactly one MCU row per call.
 */

GLOBAL JDIMENSION
jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
		    JDIMENSION max_lines)
{
  JDIMENSION lines_per_MCU_row;

  if (cinfo->global_state != DSTATE_RAW_OK)
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
    return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    cinfo->progress->pass_limit = (long) cinfo->output_height;
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Verify that at least one MCU row can be returned. */
  lines_per_MCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size;
  if (max_lines < lines_per_MCU_row)
    ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Decompress directly into user's buffer. */
  if (! (*cinfo->coef->decompress_data) (cinfo, data))
    return 0;			/* suspension forced, can do nothing more */

  /* OK, we processed one MCU row. */
  cinfo->output_scanline += lines_per_MCU_row;
  return lines_per_MCU_row;
}


/*
 * Finish JPEG decompression.
 *
 * This will normally just verify the file trailer and release temp storage.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL boolean
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_SCANNING ||
      cinfo->global_state == DSTATE_RAW_OK) {
    /* Terminate final pass */
    if (cinfo->output_scanline < cinfo->output_height)
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
    (*cinfo->master->finish_pass) (cinfo);
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* Repeat call after a suspension? */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Check for EOI in source file, unless master control already read it */
  if (! cinfo->master->eoi_processed) {
    switch ((*cinfo->marker->read_markers) (cinfo)) {
    case JPEG_HEADER_OK:	/* Found SOS!? */
      ERREXIT(cinfo, JERR_EOI_EXPECTED);
      break;
    case JPEG_HEADER_TABLES_ONLY: /* Found EOI, A-OK */
      break;
    case JPEG_SUSPENDED:	/* Suspend, come back later */
      return FALSE;
    }
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
  return TRUE;
}


/*
 * Abort processing of a JPEG decompression operation,
 * but don't destroy the object itself.
 */

GLOBAL void
jpeg_abort_decompress (j_decompress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdcoefct.c ===
/*
 * jdcoefct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the coefficient buffer controller for decompression.
 * This controller is the top level of the JPEG decompressor proper.
 * The coefficient buffer lies between entropy decoding and inverse-DCT steps.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_coef_controller pub; /* public fields */

  JDIMENSION MCU_col_num;	/* saves next MCU column to process */
  JDIMENSION MCU_row_num;	/* keep track of MCU row # within image */

  /* In single-pass modes without block smoothing, it's sufficient to buffer
   * just one MCU (although this may prove a bit slow in practice).
   * We allocate a workspace of MAX_BLOCKS_IN_MCU coefficient blocks,
   * and let the entropy decoder write into that workspace each time.
   * (On 80x86, the workspace is FAR even though it's not really very big;
   * this is to keep the module interfaces unchanged when a large coefficient
   * buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays.
   */
  JBLOCKROW MCU_buffer[MAX_BLOCKS_IN_MCU];

  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;


/* Forward declarations */
METHODDEF boolean decompress_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#ifdef D_MULTISCAN_FILES_SUPPORTED
METHODDEF boolean decompress_read
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
METHODDEF boolean decompress_output
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_coef (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  coef->MCU_col_num = 0;
  coef->MCU_row_num = 0;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (coef->whole_image[0] != NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.decompress_data = decompress_data;
    break;
#ifdef D_MULTISCAN_FILES_SUPPORTED
  case JBUF_SAVE_SOURCE:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.decompress_data = decompress_read;
    break;
  case JBUF_CRANK_DEST:
    if (coef->whole_image[0] == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    coef->pub.decompress_data = decompress_output;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data in the single-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Returns TRUE if it completed a row, FALSE if not (suspension).
 *
 * NB: output_buf contains a plane for each component in image.
 * For single pass, this is the same as the components in the scan.
 */

METHODDEF boolean
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_MCU_row = cinfo->MCU_rows_in_scan - 1;
  int blkn, ci, xindex, yindex, useful_width;
  JSAMPARRAY output_ptr;
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole MCU row */

  for (MCU_col_num = coef->MCU_col_num; MCU_col_num <= last_MCU_col;
       MCU_col_num++) {

    /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
    jzero_far((void FAR *) coef->MCU_buffer[0],
	      (size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
    if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
      /* Suspension forced; return with row unfinished */
      coef->MCU_col_num = MCU_col_num; /* update my state */
      return FALSE;
    }

    /* Determine where data should go in output_buf and do the IDCT thing.
     * We skip dummy blocks at the right and bottom edges (but blkn gets
     * incremented past them!).  Note the inner loop relies on having
     * allocated the MCU_buffer[] blocks sequentially.
     */
    blkn = 0;			/* index of current DCT block within MCU */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Don't bother to IDCT an uninteresting component. */
      if (! compptr->component_needed) {
	blkn += compptr->MCU_blocks;
	continue;
      }
      inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
      useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						  : compptr->last_col_width;
      output_ptr = output_buf[ci];
      start_col = MCU_col_num * compptr->MCU_sample_width;
      for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	if (coef->MCU_row_num < last_MCU_row ||
	    yindex < compptr->last_row_height) {
	  output_col = start_col;
	  for (xindex = 0; xindex < useful_width; xindex++) {
	    (*inverse_DCT) (cinfo, compptr,
			    (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
			    output_ptr, output_col);
	    output_col += compptr->DCT_scaled_size;
	  }
	}
	blkn += compptr->MCU_width;
	output_ptr += compptr->DCT_scaled_size;
      }
    }
  }

  /* We finished the row successfully */
  coef->MCU_col_num = 0;	/* prepare for next row */
  coef->MCU_row_num++;
  return TRUE;
}


#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Process some data: handle an input pass for a multiple-scan file.
 * We read the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the scan.
 * No data is returned; we just stash it in the virtual arrays.
 *
 * Returns TRUE if it completed a row, FALSE if not (suspension).
 * Currently, the suspension case is not supported.
 */

METHODDEF boolean
decompress_read (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset, num_MCU_rows;
  JDIMENSION total_width, remaining_rows, start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
       coef->MCU_row_num * compptr->v_samp_factor, TRUE);
    /* Entropy decoder expects buffer to be zeroed. */
    total_width = (JDIMENSION) jround_up((long) compptr->width_in_blocks,
					 (long) compptr->h_samp_factor);
    for (yindex = 0; yindex < compptr->v_samp_factor; yindex++) {
      jzero_far((void FAR *) buffer[ci][yindex], 
		(size_t) (total_width * SIZEOF(JBLOCK)));
    }
  }

  /* In an interleaved scan, we process exactly one MCU row.
   * In a noninterleaved scan, we need to process v_samp_factor MCU rows,
   * each of which contains a single block row.
   */
  if (cinfo->comps_in_scan == 1) {
    compptr = cinfo->cur_comp_info[0];
    num_MCU_rows = compptr->v_samp_factor;
    /* but watch out for the bottom of the image */
    remaining_rows = cinfo->MCU_rows_in_scan -
		     coef->MCU_row_num * compptr->v_samp_factor;
    if (remaining_rows < (JDIMENSION) num_MCU_rows)
      num_MCU_rows = (int) remaining_rows;
  } else {
    num_MCU_rows = 1;
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = 0; yoffset < num_MCU_rows; yoffset++) {
    for (MCU_col_num = 0; MCU_col_num < cinfo->MCUs_per_row; MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	ERREXIT(cinfo, JERR_CANT_SUSPEND); /* not supported */
      }
    }
  }

  coef->MCU_row_num++;
  return TRUE;
}


/*
 * Process some data: output from the virtual arrays after reading is done.
 * Always emits one fully interleaved MCU row ("iMCU" row).
 * Always returns TRUE --- suspension is not possible.
 *
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF boolean
decompress_output (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_MCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num;
  int ci, block_row, block_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       coef->MCU_row_num * compptr->v_samp_factor, FALSE);
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (coef->MCU_row_num < last_MCU_row)
      block_rows = compptr->v_samp_factor;
    else {
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
    }
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
    output_ptr = output_buf[ci];
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
      buffer_ptr = buffer[block_row];
      output_col = 0;
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
			output_ptr, output_col);
	buffer_ptr++;
	output_col += compptr->DCT_scaled_size;
      }
      output_ptr += compptr->DCT_scaled_size;
    }
  }

  coef->MCU_row_num++;
  return TRUE;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


/*
 * Initialize coefficient buffer controller.
 */

GLOBAL void
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;
  int ci, i;
  jpeg_component_info *compptr;
  JBLOCKROW buffer;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef;

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
    /* Allocate a full-image virtual array for each component, */
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note memmgr implicitly pads the vertical direction. */
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 compptr->height_in_blocks,
	 (JDIMENSION) compptr->v_samp_factor);
    }
#else
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
    /* We only need a single-MCU buffer. */
    buffer = (JBLOCKROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
    for (i = 0; i < MAX_BLOCKS_IN_MCU; i++) {
      coef->MCU_buffer[i] = buffer + i;
    }
    coef->whole_image[0] = NULL; /* flag for no virtual arrays */
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdct.h ===
/*
 * jdct.h
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file contains common declarations for the forward and
 * inverse DCT modules.  These declarations are private to the DCT managers
 * (jcdctmgr.c, jddctmgr.c) and the individual DCT algorithms.
 * The individual DCT algorithms are kept in separate files to ease 
 * machine-dependent tuning (e.g., assembly coding).
 */


/*
 * A forward DCT routine is given a pointer to a work area of type DCTELEM[];
 * the DCT is to be performed in-place in that buffer.  Type DCTELEM is int
 * for 8-bit samples, INT32 for 12-bit samples.  (NOTE: Floating-point DCT
 * implementations use an array of type FAST_FLOAT, instead.)
 * The DCT inputs are expected to be signed (range +-CENTERJSAMPLE).
 * The DCT outputs are returned scaled up by a factor of 8; they therefore
 * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
 * convention improves accuracy in integer implementations and saves some
 * work in floating-point ones.
 * Quantization of the output coefficients is done by jcdctmgr.c.
 */

#if BITS_IN_JSAMPLE == 8
typedef int DCTELEM;		/* 16 or 32 bits is fine */
#else
typedef INT32 DCTELEM;		/* must have 32 bits */
#endif

typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data));
typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data));


/*
 * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
 * to an output sample array.  The routine must dequantize the input data as
 * well as perform the IDCT; for dequantization, it uses the multiplier table
 * pointed to by compptr->dct_table.  The output data is to be placed into the
 * sample array starting at a specified column.  (Any row offset needed will
 * be applied to the array pointer before it is passed to the IDCT code.)
 * Note that the number of samples emitted by the IDCT routine is
 * DCT_scaled_size * DCT_scaled_size.
 */

/* typedef inverse_DCT_method_ptr is declared in jpegint.h */

/*
 * Each IDCT routine has its own ideas about the best dct_table element type.
 */

typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
#if BITS_IN_JSAMPLE == 8
typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
#else
typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
#endif
typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */


/*
 * Each IDCT routine is responsible for range-limiting its results and
 * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
 * be quite far out of range if the input data is corrupt, so a bulletproof
 * range-limiting step is required.  We use a mask-and-table-lookup method
 * to do the combined operations quickly.  See the comments with
 * prepare_range_limit_table (in jdmaster.c) for more info.
 */

#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)

#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_fdct_islow		jFDislow
#define jpeg_fdct_ifast		jFDifast
#define jpeg_fdct_float		jFDfloat
#define jpeg_idct_islow		jRDislow
#define jpeg_idct_ifast		jRDifast
#define jpeg_idct_float		jRDfloat
#define jpeg_idct_4x4		jRD4x4
#define jpeg_idct_2x2		jRD2x2
#define jpeg_idct_1x1		jRD1x1
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Extern declarations for the forward and inverse DCT routines. */

EXTERN void jpeg_fdct_islow JPP((DCTELEM * data));
EXTERN void jpeg_fdct_ifast JPP((DCTELEM * data));
EXTERN void jpeg_fdct_float JPP((FAST_FLOAT * data));

EXTERN void jpeg_idct_islow
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_ifast
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_float
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_4x4
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_2x2
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN void jpeg_idct_1x1
    JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));


/*
 * Macros for handling fixed-point arithmetic; these are used by many
 * but not all of the DCT/IDCT modules.
 *
 * All values are expected to be of type INT32.
 * Fractional constants are scaled left by CONST_BITS bits.
 * CONST_BITS is defined within each module using these macros,
 * and may differ from one module to the next.
 */

#define ONE	((INT32) 1)
#define CONST_SCALE (ONE << CONST_BITS)

/* Convert a positive real constant to an integer scaled by CONST_SCALE.
 * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
 * thus causing a lot of useless floating-point operations at run time.
 */

#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))

/* Descale and correctly round an INT32 value that's scaled by N bits.
 * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
 * the fudge factor is correct for either sign of X.
 */

#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * This macro is used only when the two inputs will actually be no more than
 * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
 * full 32x32 multiply.  This provides a useful speedup on many machines.
 * Unfortunately there is no way to specify a 16x16->32 multiply portably
 * in C, but some C compilers will do the right thing if you provide the
 * correct combination of casts.
 */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
#endif
#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
#endif

#ifndef MULTIPLY16C16		/* default definition */
#define MULTIPLY16C16(var,const)  ((var) * (const))
#endif

/* Same except both inputs are variables. */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
#endif

#ifndef MULTIPLY16V16		/* default definition */
#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jddctmgr.c ===
/*
 * jddctmgr.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the inverse-DCT management logic.
 * This code selects a particular IDCT implementation to be used,
 * and it performs related housekeeping chores.  No code in this file
 * is executed per IDCT step, only during pass setup.
 *
 * Note that the IDCT routines are responsible for performing coefficient
 * dequantization as well as the IDCT proper.  This module sets up the
 * dequantization multiplier table needed by the IDCT routine.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */


/* Private subobject for this module */

typedef struct {
  struct jpeg_inverse_dct pub;	/* public fields */

  /* Record the IDCT method type actually selected for each component */
  J_DCT_METHOD real_method[MAX_COMPONENTS];
} my_idct_controller;

typedef my_idct_controller * my_idct_ptr;


/* ZIG[i] is the zigzag-order position of the i'th element of a DCT block */
/* read in natural order (left to right, top to bottom). */
static const int ZIG[DCTSIZE2] = {
     0,  1,  5,  6, 14, 15, 27, 28,
     2,  4,  7, 13, 16, 26, 29, 42,
     3,  8, 12, 17, 25, 30, 41, 43,
     9, 11, 18, 24, 31, 40, 44, 53,
    10, 19, 23, 32, 39, 45, 52, 54,
    20, 22, 33, 38, 46, 51, 55, 60,
    21, 34, 37, 47, 50, 56, 59, 61,
    35, 36, 48, 49, 57, 58, 62, 63
};


/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
 * so be sure to compile that code if either ISLOW or SCALING is requested.
 */
#ifdef DCT_ISLOW_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#else
#ifdef IDCT_SCALING_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#endif
#endif


/*
 * Initialize for an input scan.
 *
 * Verify that all referenced Q-tables are present, and set up
 * the multiplier table for each one.
 * With a multiple-scan JPEG file, this is called during each input scan,
 * NOT during the final output pass where the IDCT is actually done.
 * The purpose is to save away the current Q-table contents just in case
 * the encoder changes tables between scans.  This decoder will dequantize
 * any component using the Q-table which was current at the start of the
 * first scan using that component.
 */

METHODDEF void
start_input_pass (j_decompress_ptr cinfo)
{
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, qtblno, i;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    qtblno = compptr->quant_tbl_no;
    /* Make sure specified quantization table is present */
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
    qtbl = cinfo->quant_tbl_ptrs[qtblno];
    /* Create multiplier table from quant table, unless we already did so. */
    if (compptr->dct_table != NULL)
      continue;
    switch (idct->real_method[compptr->component_index]) {
#ifdef PROVIDE_ISLOW_TABLES
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored in natural order as ints.
	 */
	ISLOW_MULT_TYPE * ismtbl;
	compptr->dct_table =
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      DCTSIZE2 * SIZEOF(ISLOW_MULT_TYPE));
	ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
	for (i = 0; i < DCTSIZE2; i++) {
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[ZIG[i]];
	}
      }
      break;
#endif
#ifdef DCT_IFAST_SUPPORTED
    case JDCT_IFAST:
      {
	/* For AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.  The multipliers are stored in natural order.
	 */
	IFAST_MULT_TYPE * ifmtbl;
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	compptr->dct_table =
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      DCTSIZE2 * SIZEOF(IFAST_MULT_TYPE));
	ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
	for (i = 0; i < DCTSIZE2; i++) {
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[ZIG[i]],
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
    case JDCT_FLOAT:
      {
	/* For float AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * The multipliers are stored in natural order.
	 */
	FLOAT_MULT_TYPE * fmtbl;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	compptr->dct_table =
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      DCTSIZE2 * SIZEOF(FLOAT_MULT_TYPE));
	fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[ZIG[i]] *
	       aanscalefactor[row] * aanscalefactor[col]);
	    i++;
	  }
	}
      }
      break;
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}


/*
 * Prepare for an output pass that will actually perform IDCTs.
 *
 * start_input_pass should already have been done for all components
 * of interest; we need only verify that this is true.
 * Note that uninteresting components are not required to have loaded tables.
 * This allows the master controller to stop before reading the whole file
 * if it has obtained the data for the interesting component(s).
 */

METHODDEF void
start_output_pass (j_decompress_ptr cinfo)
{
  jpeg_component_info *compptr;
  int ci;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (! compptr->component_needed)
      continue;
    if (compptr->dct_table == NULL)
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, compptr->quant_tbl_no);
  }
}


/*
 * Initialize IDCT manager.
 */

GLOBAL void
jinit_inverse_dct (j_decompress_ptr cinfo)
{
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_input_pass = start_input_pass;
  idct->pub.start_output_pass = start_output_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->dct_table = NULL;	/* initialize tables to "not prepared" */
    switch (compptr->DCT_scaled_size) {
#ifdef IDCT_SCALING_SUPPORTED
    case 1:
      idct->pub.inverse_DCT[ci] = jpeg_idct_1x1;
      idct->real_method[ci] = JDCT_ISLOW; /* jidctred uses islow-style table */
      break;
    case 2:
      idct->pub.inverse_DCT[ci] = jpeg_idct_2x2;
      idct->real_method[ci] = JDCT_ISLOW; /* jidctred uses islow-style table */
      break;
    case 4:
      idct->pub.inverse_DCT[ci] = jpeg_idct_4x4;
      idct->real_method[ci] = JDCT_ISLOW; /* jidctred uses islow-style table */
      break;
#endif
    case DCTSIZE:
      switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	idct->pub.inverse_DCT[ci] = jpeg_idct_islow;
	idct->real_method[ci] = JDCT_ISLOW;
	break;
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	idct->pub.inverse_DCT[ci] = jpeg_idct_ifast;
	idct->real_method[ci] = JDCT_IFAST;
	break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	idct->pub.inverse_DCT[ci] = jpeg_idct_float;
	idct->real_method[ci] = JDCT_FLOAT;
	break;
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
      }
      break;
    default:
      ERREXIT1(cinfo, JERR_BAD_DCTSIZE, compptr->DCT_scaled_size);
      break;
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdhuff.c ===
/*
 * jdhuff.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains Huffman entropy decoding routines.
 *
 * Much of the complexity here has to do with supporting input suspension.
 * If the data source module demands suspension, we want to be able to back
 * up to the start of the current MCU.  To do this, we copy state variables
 * into local working storage, and update them back to the permanent JPEG
 * objects only upon successful completion of an MCU.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Derived data constructed for each Huffman table */

#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */

typedef struct {
  /* Basic tables: (element [0] of each array is unused) */
  INT32 mincode[17];		/* smallest code of length k */
  INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  /* (maxcode[17] is a sentinel to ensure huff_DECODE terminates) */
  int valptr[17];		/* huffval[] index of 1st symbol of length k */

  /* Back link to public Huffman table (needed only in slow_DECODE) */
  JHUFF_TBL *pub;

  /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
   * the input data stream.  If the next Huffman code is no more
   * than HUFF_LOOKAHEAD bits long, we can obtain its length and
   * the corresponding symbol directly from these tables.
   */
  int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
} D_DERIVED_TBL;

/* Expanded entropy decoder object for Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  INT32 get_buffer;		/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).get_buffer = (src).get_buffer, \
	 (dest).bits_left = (src).bits_left, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif


typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  savable_state saved;		/* Bit buffer & DC state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  boolean printed_eod;		/* flag to suppress extra end-of-data msgs */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  D_DERIVED_TBL * dc_derived_tbls[NUM_HUFF_TBLS];
  D_DERIVED_TBL * ac_derived_tbls[NUM_HUFF_TBLS];
} huff_entropy_decoder;

typedef huff_entropy_decoder * huff_entropy_ptr;

/* Working state while scanning an MCU.
 * This struct contains all the fields that are needed by subroutines.
 */

typedef struct {
  int unread_marker;		/* nonzero if we have hit a marker */
  const JOCTET * next_input_byte; /* => next byte to read from source */
  size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  savable_state cur;		/* Current bit buffer & DC state */
  j_decompress_ptr cinfo;	/* fill_bit_buffer needs access to this */
} working_state;


/* Forward declarations */
LOCAL void fix_huff_tbl JPP((j_decompress_ptr cinfo, JHUFF_TBL * htbl,
			     D_DERIVED_TBL ** pdtbl));


/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF void
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    compptr = cinfo->cur_comp_info[ci];
    dctbl = compptr->dc_tbl_no;
    actbl = compptr->ac_tbl_no;
    /* Make sure requested tables are present */
    if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS ||
	cinfo->dc_huff_tbl_ptrs[dctbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
    if (actbl < 0 || actbl >= NUM_HUFF_TBLS ||
	cinfo->ac_huff_tbl_ptrs[actbl] == NULL)
      ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
    /* Compute derived values for Huffman tables */
    /* We may do this more than once for a table, but it's not expensive */
    fix_huff_tbl(cinfo, cinfo->dc_huff_tbl_ptrs[dctbl],
		 & entropy->dc_derived_tbls[dctbl]);
    fix_huff_tbl(cinfo, cinfo->ac_huff_tbl_ptrs[actbl],
		 & entropy->ac_derived_tbls[actbl]);
    /* Initialize DC predictions to 0 */
    entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize private state variables */
  entropy->saved.bits_left = 0;
  entropy->printed_eod = FALSE;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}


LOCAL void
fix_huff_tbl (j_decompress_ptr cinfo, JHUFF_TBL * htbl, D_DERIVED_TBL ** pdtbl)
/* Compute the derived values for a Huffman table */
{
  D_DERIVED_TBL *dtbl;
  int p, i, l, si;
  int lookbits, ctr;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
    *pdtbl = (D_DERIVED_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(D_DERIVED_TBL));
  dtbl = *pdtbl;
  dtbl->pub = htbl;		/* fill in back link */
  
  /* Figure C.1: make table of Huffman code length for each symbol */
  /* Note that this is in code-length order. */

  p = 0;
  for (l = 1; l <= 16; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++)
      huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  
  /* Figure C.2: generate the codes themselves */
  /* Note that this is in code-length order. */
  
  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
      code++;
    }
    code <<= 1;
    si++;
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
  for (l = 1; l <= 16; l++) {
    if (htbl->bits[l]) {
      dtbl->valptr[l] = p; /* huffval[] index of 1st symbol of code length l */
      dtbl->mincode[l] = huffcode[p]; /* minimum code of length l */
      p += htbl->bits[l];
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures huff_DECODE terminates */

  /* Compute lookahead tables to speed up decoding.
   * First we set all the table entries to 0, indicating "too long";
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));

  p = 0;
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
	dtbl->look_nbits[lookbits] = l;
	dtbl->look_sym[lookbits] = htbl->huffval[p];
	lookbits++;
      }
    }
  }
}


/*
 * Code for extracting the next N bits from the input stream.
 * (N never exceeds 15 for JPEG data.)
 * This needs to go as fast as possible!
 *
 * We read source bytes into get_buffer and dole out bits as needed.
 * If get_buffer already contains enough bits, they are fetched in-line
 * by the macros check_bit_buffer and get_bits.  When there aren't enough
 * bits, fill_bit_buffer is called; it will attempt to fill get_buffer to
 * the "high water mark" (not just to the number of bits needed; this reduces
 * the function-call overhead cost of entering fill_bit_buffer).
 * Note that fill_bit_buffer may return FALSE to indicate suspension.
 * On TRUE return, fill_bit_buffer guarantees that get_buffer contains
 * at least the requested number of bits --- dummy zeroes are inserted if
 * necessary.
 *
 * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 * of get_buffer to be used.  (On machines with wider words, an even larger
 * buffer could be used.)  However, on some machines 32-bit shifts are
 * quite slow and take time proportional to the number of places shifted.
 * (This is true with most PC compilers, for instance.)  In this case it may
 * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 * average shift distance at the cost of more calls to fill_bit_buffer.
 */

#ifdef SLOW_SHIFT_32
#define MIN_GET_BITS  15	/* minimum allowable value */
#else
#define MIN_GET_BITS  25	/* max value for 32-bit get_buffer */
#endif


LOCAL boolean
fill_bit_buffer (working_state * state, int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  register INT32 get_buffer = state->cur.get_buffer;
  register int bits_left = state->cur.bits_left;
  register int c;

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */

  while (bits_left < MIN_GET_BITS) {
    /* Attempt to read a byte */
    if (state->unread_marker != 0)
      goto no_more_data;	/* can't advance past a marker */

    if (bytes_in_buffer == 0) {
      if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	return FALSE;
      next_input_byte = state->cinfo->src->next_input_byte;
      bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
    }
    bytes_in_buffer--;
    c = GETJOCTET(*next_input_byte++);

    /* If it's 0xFF, check and discard stuffed zero byte */
    if (c == 0xFF) {
      do {
	if (bytes_in_buffer == 0) {
	  if (! (*state->cinfo->src->fill_input_buffer) (state->cinfo))
	    return FALSE;
	  next_input_byte = state->cinfo->src->next_input_byte;
	  bytes_in_buffer = state->cinfo->src->bytes_in_buffer;
	}
	bytes_in_buffer--;
	c = GETJOCTET(*next_input_byte++);
      } while (c == 0xFF);

      if (c == 0) {
	/* Found FF/00, which represents an FF data byte */
	c = 0xFF;
      } else {
	/* Oops, it's actually a marker indicating end of compressed data. */
	/* Better put it back for use later */
	state->unread_marker = c;

      no_more_data:
	/* There should be enough bits still left in the data segment; */
	/* if so, just break out of the outer while loop. */
	if (bits_left >= nbits)
	  break;
	/* Uh-oh.  Report corrupted data to user and stuff zeroes into
	 * the data stream, so that we can produce some kind of image.
	 * Note that this will be repeated for each byte demanded for the
	 * rest of the segment; this is slow but not unreasonably so.
	 * The main thing is to avoid getting a zillion warnings, hence
	 * we use a flag to ensure that only one warning appears.
	 */
	if (! ((huff_entropy_ptr) state->cinfo->entropy)->printed_eod) {
	  WARNMS(state->cinfo, JWRN_HIT_MARKER);
	  ((huff_entropy_ptr) state->cinfo->entropy)->printed_eod = TRUE;
	}
	c = 0;			/* insert a zero byte into bit buffer */
      }
    }

    /* OK, load c into get_buffer */
    get_buffer = (get_buffer << 8) | c;
    bits_left += 8;
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->cur.get_buffer = get_buffer;
  state->cur.bits_left = bits_left;

  return TRUE;
}


/*
 * These macros provide the in-line portion of bit fetching.
 * Use check_bit_buffer to ensure there are N bits in get_buffer
 * before using get_bits, peek_bits, or drop_bits.
 *	check_bit_buffer(state,n,action);
 *		Ensure there are N bits in get_buffer; if suspend, take action.
 *      val = get_bits(state,n);
 *		Fetch next N bits.
 *      val = peek_bits(state,n);
 *		Fetch next N bits without removing them from the buffer.
 *	drop_bits(state,n);
 *		Discard next N bits.
 * The value N should be a simple variable, not an expression, because it
 * is evaluated multiple times.
 */

#define check_bit_buffer(state,nbits,action) \
	{ if ((state).cur.bits_left < (nbits))  \
	    if (! fill_bit_buffer(&(state), nbits))  \
	      { action; } }

#define get_bits(state,nbits) \
	(((int) ((state).cur.get_buffer >> ((state).cur.bits_left -= (nbits)))) & ((1<<(nbits))-1))

#define peek_bits(state,nbits) \
	(((int) ((state).cur.get_buffer >> ((state).cur.bits_left -  (nbits)))) & ((1<<(nbits))-1))

#define drop_bits(state,nbits) \
	((state).cur.bits_left -= (nbits))


/*
 * Code for extracting next Huffman-coded symbol from input bit stream.
 * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 * without looping.  Usually, more than 95% of the Huffman codes will be 8
 * or fewer bits long.  The few overlength codes are handled with a loop.
 * The primary case is made a macro for speed reasons; the secondary
 * routine slow_DECODE is rarely entered and need not be inline code.
 *
 * Notes about the huff_DECODE macro:
 * 1. Near the end of the data segment, we may fail to get enough bits
 *    for a lookahead.  In that case, we do it the hard way.
 * 2. If the lookahead table contains no entry, the next code must be
 *    more than HUFF_LOOKAHEAD bits long.
 * 3. slow_DECODE returns -1 if forced to suspend.
 */

#define huff_DECODE(result,state,htbl,donelabel) \
{ if (state.cur.bits_left < HUFF_LOOKAHEAD) {  \
    if (! fill_bit_buffer(&state, 0)) return FALSE;  \
    if (state.cur.bits_left < HUFF_LOOKAHEAD) {  \
      if ((result = slow_DECODE(&state, htbl, 1)) < 0) return FALSE;  \
      goto donelabel;  \
    }  \
  }  \
  { register int nb, look;  \
    look = peek_bits(state, HUFF_LOOKAHEAD);  \
    if ((nb = htbl->look_nbits[look]) != 0) {  \
      drop_bits(state, nb);  \
      result = htbl->look_sym[look];  \
    } else {  \
      if ((result = slow_DECODE(&state, htbl, HUFF_LOOKAHEAD+1)) < 0)  \
	return FALSE;  \
    }  \
  }  \
donelabel:;  \
}

  
LOCAL int
slow_DECODE (working_state * state, D_DERIVED_TBL * htbl, int min_bits)
{
  register int l = min_bits;
  register INT32 code;

  /* huff_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  check_bit_buffer(*state, l, return -1);
  code = get_bits(*state, l);

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
    code <<= 1;
    check_bit_buffer(*state, 1, return -1);
    code |= get_bits(*state, 1);
    l++;
  }

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ htbl->valptr[l] +
			    ((int) (code - htbl->mincode[l])) ];
}


/* Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define huff_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define huff_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
    0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
    ((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
    ((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
    ((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */


/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL boolean
process_restart (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->saved.bits_left / 8;
  entropy->saved.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  entropy->printed_eod = FALSE; /* next segment can get another warning */

  return TRUE;
}


/* ZAG[i] is the natural-order position of the i'th element of zigzag order.
 * If the incoming data is corrupted, decode_mcu could attempt to
 * reference values beyond the end of the array.  To avoid a wild store,
 * we put some extra zeroes after the real entries.
 */

static const int ZAG[DCTSIZE2+16] = {
  0,  1,  8, 16,  9,  2,  3, 10,
 17, 24, 32, 25, 18, 11,  4,  5,
 12, 19, 26, 33, 40, 48, 41, 34,
 27, 20, 13,  6,  7, 14, 21, 28,
 35, 42, 49, 56, 57, 50, 43, 36,
 29, 22, 15, 23, 30, 37, 44, 51,
 58, 59, 52, 45, 38, 31, 39, 46,
 53, 60, 61, 54, 47, 55, 62, 63,
  0,  0,  0,  0,  0,  0,  0,  0, /* extra entries in case k>63 below */
  0,  0,  0,  0,  0,  0,  0,  0
};


/*
 * Decode and return one MCU's worth of Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
 * (Wholesale zeroing is usually a little faster than retail...)
 *
 * Returns FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * this module, but would not work for decoding progressive JPEG.)
 */

METHODDEF boolean
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  register int s, k, r;
  int blkn, ci;
  JBLOCKROW block;
  working_state state;
  D_DERIVED_TBL * dctbl;
  D_DERIVED_TBL * actbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
    if (entropy->restarts_to_go == 0)
      if (! process_restart(cinfo))
	return FALSE;
  }

  /* Load up working state */
  state.unread_marker = cinfo->unread_marker;
  state.next_input_byte = cinfo->src->next_input_byte;
  state.bytes_in_buffer = cinfo->src->bytes_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
    block = MCU_data[blkn];
    ci = cinfo->MCU_membership[blkn];
    compptr = cinfo->cur_comp_info[ci];
    dctbl = entropy->dc_derived_tbls[compptr->dc_tbl_no];
    actbl = entropy->ac_derived_tbls[compptr->ac_tbl_no];

    /* Decode a single block's worth of coefficients */

    /* Section F.2.2.1: decode the DC coefficient difference */
    huff_DECODE(s, state, dctbl, label1);
    if (s) {
      check_bit_buffer(state, s, return FALSE);
      r = get_bits(state, s);
	  s = huff_EXTEND(r, s);
	}

    /* Shortcut if component's values are not interesting */
    if (! compptr->component_needed)
      goto skip_ACs;

    /* Convert DC difference to actual value, update last_dc_val */
    s += state.cur.last_dc_val[ci];
    state.cur.last_dc_val[ci] = s;
    /* Output the DC coefficient (assumes ZAG[0] = 0) */
    (*block)[0] = (JCOEF) s;

    /* Do we need to decode the AC coefficients for this component? */
    if (compptr->DCT_scaled_size > 1) {

      /* Section F.2.2.2: decode the AC coefficients */
      /* Since zeroes are skipped, output area must be cleared beforehand */
      for (k = 1; k < DCTSIZE2; k++) {
	huff_DECODE(s, state, actbl, label2);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  if (k >= DCTSIZE2) {
	      WARNMS(state.cinfo, JWRN_HUFF_BAD_CODE);
		  break;
		}
	  check_bit_buffer(state, s, return FALSE);
	  r = get_bits(state, s);
	  s = huff_EXTEND(r, s);
	  /* Output coefficient in natural (dezigzagged) order */
	  if (k < DCTSIZE2)
		(*block)[ZAG[k]] = (JCOEF) s;
	} else {
	  if (r != 15) {
		if (r != 0)
			WARNMS(state.cinfo, JWRN_HUFF_BAD_CODE); // huffman code problem
	    break;
	    }
	  k += 15;
	  if (k >= DCTSIZE2)
	      WARNMS(state.cinfo, JWRN_HUFF_BAD_CODE);
	}
      }

    } else {
skip_ACs:

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (k = 1; k < DCTSIZE2; k++) {
	huff_DECODE(s, state, actbl, label3);
      
	r = s >> 4;
	s &= 15;
      
	if (s) {
	  k += r;
	  check_bit_buffer(state, s, return FALSE);
	  drop_bits(state, s);
	} else {
	  if (r != 15)
	    break;
	  k += 15;
	}
      }

    }
  }

  /* Completed MCU, so update state */
  cinfo->unread_marker = state.unread_marker;
  cinfo->src->next_input_byte = state.next_input_byte;
  cinfo->src->bytes_in_buffer = state.bytes_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}



/*
 * Huffman table setup routines
 */

LOCAL void
add_huff_table (j_decompress_ptr cinfo,
		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
/* Define a Huffman table */
{
  if (*htblptr == NULL)
    *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
  MEMCOPY((*htblptr)->huffval, val, SIZEOF((*htblptr)->huffval));

  (*htblptr)->sent_table = TRUE; /* MJPEG does not put the actual tables in the output */
}


LOCAL void
std_huff_tables (j_decompress_ptr cinfo)
/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
/* IMPORTANT: these are only valid for 8-bit data precision! */
{
  static const UINT8 bits_dc_luminance[17] =
    { /* 0-base */ 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_luminance[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  
  static const UINT8 bits_dc_chrominance[17] =
    { /* 0-base */ 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_chrominance[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  
  static const UINT8 bits_ac_luminance[17] =
    { /* 0-base */ 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
  
  static const UINT8 val_ac_luminance[] =
    { 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
      0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
      0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
      0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
      0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
      0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
      0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
      0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
      0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
      0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
      0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
      0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
      0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
      0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
      0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
      0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
      0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
      0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
      0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
      0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };

  static const UINT8 bits_ac_chrominance[17] =
    { /* 0-base */ 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };

  static const UINT8 val_ac_chrominance[] =
    { 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
      0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
      0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
      0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
      0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
      0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
      0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
      0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
      0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
      0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
      0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
      0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
      0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
      0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
      0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
      0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
      0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
      0xf9, 0xfa };

  
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
		 bits_dc_luminance, val_dc_luminance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
		 bits_ac_luminance, val_ac_luminance);
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
		 bits_dc_chrominance, val_dc_chrominance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
		 bits_ac_chrominance, val_ac_chrominance);
}


/*
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL void
jinit_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
  entropy->pub.decode_mcu = decode_mcu;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
    entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
  }

  if (cinfo->dc_huff_tbl_ptrs[0] == NULL)
    std_huff_tables( cinfo ); /* MJPEG does not include a Huff table, set a default */

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdmainct.c ===
/*
 * jdmainct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the main buffer controller for decompression.
 * The main buffer lies between the JPEG decompressor proper and the
 * post-processor; it holds downsampled data in the JPEG colorspace.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/*
 * In the current system design, the main buffer need never be a full-image
 * buffer; any full-height buffers will be found inside the coefficient or
 * postprocessing controllers.  Nonetheless, the main controller is not
 * trivial.  Its responsibility is to provide context rows for upsampling/
 * rescaling, and doing this in an efficient fashion is a bit tricky.
 *
 * Postprocessor input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  (We require DCT_scaled_size values to be
 * chosen such that these numbers are integers.  In practice DCT_scaled_size
 * values will likely be powers of two, so we actually have the stronger
 * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
 * Upsampling will typically produce max_v_samp_factor pixel rows from each
 * row group (times any additional scale factor that the upsampler is
 * applying).
 *
 * The coefficient controller will deliver data to us one iMCU row at a time;
 * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
 * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
 * to one row of MCUs when the image is fully interleaved.)  Note that the
 * number of sample rows varies across components, but the number of row
 * groups does not.  Some garbage sample rows may be included in the last iMCU
 * row at the bottom of the image.
 *
 * Depending on the vertical scaling algorithm used, the upsampler may need
 * access to the sample row(s) above and below its current input row group.
 * The upsampler is required to set need_context_rows TRUE at global selection
 * time if so.  When need_context_rows is FALSE, this controller can simply
 * obtain one iMCU row at a time from the coefficient controller and dole it
 * out as row groups to the postprocessor.
 *
 * When need_context_rows is TRUE, this controller guarantees that the buffer
 * passed to postprocessing contains at least one row group's worth of samples
 * above and below the row group(s) being processed.  Note that the context
 * rows "above" the first passed row group appear at negative row offsets in
 * the passed buffer.  At the top and bottom of the image, the required
 * context rows are manufactured by duplicating the first or last real sample
 * row; this avoids having special cases in the upsampling inner loops.
 *
 * The amount of context is fixed at one row group just because that's a
 * convenient number for this controller to work with.  The existing
 * upsamplers really only need one sample row of context.  An upsampler
 * supporting arbitrary output rescaling might wish for more than one row
 * group of context when shrinking the image; tough, we don't handle that.
 * (This is justified by the assumption that downsizing will be handled mostly
 * by adjusting the DCT_scaled_size values, so that the actual scale factor at
 * the upsample step needn't be much less than one.)
 *
 * To provide the desired context, we have to retain the last two row groups
 * of one iMCU row while reading in the next iMCU row.  (The last row group
 * can't be processed until we have another row group for its below-context,
 * and so we have to save the next-to-last group too for its above-context.)
 * We could do this most simply by copying data around in our buffer, but
 * that'd be very slow.  We can avoid copying any data by creating a rather
 * strange pointer structure.  Here's how it works.  We allocate a workspace
 * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
 * of row groups per iMCU row).  We create two sets of redundant pointers to
 * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
 * pointer lists look like this:
 *                   M+1                          M-1
 * master pointer --> 0         master pointer --> 0
 *                    1                            1
 *                   ...                          ...
 *                   M-3                          M-3
 *                   M-2                           M
 *                   M-1                          M+1
 *                    M                           M-2
 *                   M+1                          M-1
 *                    0                            0
 * We read alternate iMCU rows using each master pointer; thus the last two
 * row groups of the previous iMCU row remain un-overwritten in the workspace.
 * The pointer lists are set up so that the required context rows appear to
 * be adjacent to the proper places when we pass the pointer lists to the
 * upsampler.
 *
 * The above pictures describe the normal state of the pointer lists.
 * At top and bottom of the image, we diddle the pointer lists to duplicate
 * the first or last sample row as necessary (this is cheaper than copying
 * sample rows around).
 *
 * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
 * situation each iMCU row provides only one row group so the buffering logic
 * must be different (eg, we must read two iMCU rows before we can emit the
 * first row group).  For now, we simply do not support providing context
 * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
 * be worth providing --- if someone wants a 1/8th-size preview, they probably
 * want it quick and dirty, so a context-free upsampler is sufficient.
 */


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_main_controller pub; /* public fields */

  /* Pointer to allocated workspace (M or M+2 row groups). */
  JSAMPARRAY buffer[MAX_COMPONENTS];

  boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
  JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */

  /* Remaining fields are only used in the context case. */

  /* These are the master pointers to the funny-order pointer lists. */
  JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */

  int whichptr;			/* indicates which pointer set is now in use */
  int context_state;		/* process_data state machine status */
  JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
  JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
} my_main_controller;

typedef my_main_controller * my_main_ptr;

/* context_state values: */
#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */


/* Forward declarations */
METHODDEF void process_data_simple_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
METHODDEF void process_data_context_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#ifdef D_MULTISCAN_FILES_SUPPORTED
METHODDEF void process_data_input_only
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#endif
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF void process_data_crank_post
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#endif


LOCAL void
make_funny_pointers (j_decompress_ptr cinfo)
/* Create the funny pointer lists discussed in the comments above.
 * The actual workspace is already allocated (in main->buffer),
 * we just have to make the curiously ordered lists.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf0 = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
    xbuf0 += rgroup;		/* want one row group at negative offsets */
    main->xbuffer[0][ci] = xbuf0;
    xbuf1 = xbuf0 + (rgroup * (M + 4));
    main->xbuffer[1][ci] = xbuf1;
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
    for (i = 0; i < rgroup * (M + 2); i++) {
      xbuf0[i] = xbuf1[i] = buf[i];
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
    }
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[0];
    }
  }
}


LOCAL void
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    xbuf0 = main->xbuffer[0][ci];
    xbuf1 = main->xbuffer[1][ci];
    for (i = 0; i < rgroup; i++) {
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
    }
  }
}


LOCAL void
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_scaled_size;
    rgroup = iMCUheight / cinfo->min_DCT_scaled_size;
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
    if (rows_left == 0) rows_left = iMCUheight;
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
    for (i = 0; i < rgroup * 2; i++) {
      xbuf[rows_left + i] = xbuf[rows_left-1];
    }
  }
}


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Processing chunks are output rows except in JBUF_CRANK_SOURCE mode. */
  main->pub.num_chunks = cinfo->output_height;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    /* Do nothing if raw-data mode. */
    if (cinfo->raw_data_out)
      return;
    if (cinfo->upsample->need_context_rows) {
      main->pub.process_data = process_data_context_main;
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
      main->context_state = CTX_PREPARE_FOR_IMCU;
      main->iMCU_row_ctr = 0;
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
    main->rowgroup_ctr = 0;
    break;
#ifdef D_MULTISCAN_FILES_SUPPORTED
  case JBUF_CRANK_SOURCE:
    /* Reading a multi-scan file, just crank the decompressor */
    main->pub.process_data = process_data_input_only;
    /* decompressor needs to be called once for each (equivalent) iMCU row */
    main->pub.num_chunks = cinfo->total_iMCU_rows;
    break;
#endif
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
}


/*
 * Process some data.
 * This handles the simple case where no context is required.
 */

METHODDEF void
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_scaled_size;
  /* Note: at the bottom of the image, we may pass extra garbage row groups
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
    main->buffer_full = FALSE;
    main->rowgroup_ctr = 0;
  }
}


/*
 * Process some data.
 * This handles the case where context rows must be provided.
 */

METHODDEF void
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
    if (! (*cinfo->coef->decompress_data) (cinfo,
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
    main->iMCU_row_ctr++;	/* count rows received */
  }

  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
    if (*out_row_ctr >= out_rows_avail)
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size - 1);
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
    main->buffer_full = FALSE;
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_scaled_size + 1);
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size + 2);
    main->context_state = CTX_POSTPONED_ROW;
  }
}


/*
 * Process some data.
 * Initial passes in a multiple-scan file: just call the decompressor,
 * which will save data in its internal buffer, but return nothing.
 */

#ifdef D_MULTISCAN_FILES_SUPPORTED

METHODDEF void
process_data_input_only (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
  if (! (*cinfo->coef->decompress_data) (cinfo, (JSAMPIMAGE) NULL))
    return;			/* suspension forced, can do nothing more */
  *out_row_ctr += 1;		/* OK, we did one iMCU row */
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */


/*
 * Process some data.
 * Final pass of two-pass quantization: just call the postprocessor.
 * Source data will be the postprocessor controller's internal buffer.
 */

#ifdef QUANT_2PASS_SUPPORTED

METHODDEF void
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize main buffer controller.
 */

GLOBAL void
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;

  if (need_full_buffer)		/* shouldn't happen */
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* In raw-data mode, we don't need a workspace.  This module doesn't
   * do anything useful in that mode, except pass calls through to the
   * coef controller in CRANK_SOURCE mode (ie, reading a multiscan file).
   */
  if (cinfo->raw_data_out)
    return;

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
    if (cinfo->min_DCT_scaled_size < 2) /* unsupported, see comments above */
      ERREXIT(cinfo, JERR_NOTIMPL);
    ngroups = cinfo->min_DCT_scaled_size + 2;
  } else {
    ngroups = cinfo->min_DCT_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
      cinfo->min_DCT_scaled_size; /* height of a row group of component */
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdpostct.c ===
/*
 * jdpostct.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the decompression postprocessing controller.
 * This controller manages the upsampling, color conversion, and color
 * quantization/reduction steps; specifically, it controls the buffering
 * between upsample/color conversion and color quantization/reduction.
 *
 * If no color quantization/reduction is required, then this module has no
 * work to do, and it just hands off to the upsample/color conversion code.
 * An integrated upsample/convert/quantize process would replace this module
 * entirely.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private buffer controller object */

typedef struct {
  struct jpeg_d_post_controller pub; /* public fields */

  /* Color quantization source buffer: this holds output data from
   * the upsample/color conversion step to be passed to the quantizer.
   * For two-pass color quantization, we need a full-image buffer;
   * for one-pass operation, a strip buffer is sufficient.
   */
  jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
  JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
  JDIMENSION strip_height;	/* buffer size in rows */
  /* for two-pass mode only: */
  JDIMENSION starting_row;	/* row # of first row in current strip */
  JDIMENSION next_row;		/* index of next row to fill/empty in strip */
} my_post_controller;

typedef my_post_controller * my_post_ptr;


/* Forward declarations */
METHODDEF void post_process_1pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF void post_process_prepass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
METHODDEF void post_process_2pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#endif


/*
 * Initialize for a processing pass.
 */

METHODDEF void
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
    } else {
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_prepass;
    break;
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    post->pub.post_process_data = post_process_2pass;
    break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
}


/*
 * Process some data in the one-pass (strip buffer) case.
 * This is used for color precision reduction as well as one-pass quantization.
 */

METHODDEF void
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
  *out_row_ctr += num_rows;
}


#ifdef QUANT_2PASS_SUPPORTED

/*
 * Process some data in the first pass of 2-pass quantization.
 */

METHODDEF void
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image, post->starting_row, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}


/*
 * Process some data in the second pass of 2-pass quantization.
 */

METHODDEF void
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
    post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image, post->starting_row, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
  if (post->next_row >= post->strip_height) {
    post->starting_row += post->strip_height;
    post->next_row = 0;
  }
}

#endif /* QUANT_2PASS_SUPPORTED */


/*
 * Initialize postprocessing controller.
 */

GLOBAL void
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
  post->whole_image = NULL;	/* flag for no virtual arrays */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 cinfo->output_height, post->strip_height);
#else
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif /* QUANT_2PASS_SUPPORTED */
    } else {
      /* One-pass color quantization: just make a strip buffer. */
      post->buffer = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdmaster.c ===
/*
 * jdmaster.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains master control logic for the JPEG decompressor.
 * These routines are concerned with selecting the modules to be executed
 * and with determining the number of passes and the work to be done in each
 * pass.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Private state */

typedef enum {
	main_pass,		/* read and process a single-scan file */
	preread_pass,		/* read one scan of a multi-scan file */
	output_pass,		/* primary processing pass for multi-scan */
	post_pass		/* optional post-pass for 2-pass quant. */
} D_PASS_TYPE;

typedef struct {
  struct jpeg_decomp_master pub; /* public fields */

  boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */

  D_PASS_TYPE pass_type;	/* the type of the current pass */

  int pass_number;		/* # of passes completed */
  int total_passes;		/* estimated total # of passes needed */

  boolean need_post_pass;	/* are we using full two-pass quantization? */
} my_decomp_master;

typedef my_decomp_master * my_master_ptr;


/*
 * Determine whether merged upsample/color conversion should be used.
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL boolean
use_merged_upsample (j_decompress_ptr cinfo)
{
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
    return FALSE;
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
      cinfo->out_color_space != JCS_RGB ||
      cinfo->out_color_components != RGB_PIXELSIZE)
    return FALSE;
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
      cinfo->comp_info[1].h_samp_factor != 1 ||
      cinfo->comp_info[2].h_samp_factor != 1 ||
      cinfo->comp_info[0].v_samp_factor >  2 ||
      cinfo->comp_info[1].v_samp_factor != 1 ||
      cinfo->comp_info[2].v_samp_factor != 1)
    return FALSE;
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[1].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
      cinfo->comp_info[2].DCT_scaled_size != cinfo->min_DCT_scaled_size)
    return FALSE;
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  /* by golly, it'll work... */
  return TRUE;
#else
  return FALSE;
#endif
}


/*
 * Support routines that do various essential calculations.
 *
 * jpeg_calc_output_dimensions is exported for possible use by application.
 * Hence it mustn't do anything that can't be done twice.
 */

GLOBAL void
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* Compute actual output image dimensions and DCT scaling choices. */
#ifdef IDCT_SCALING_SUPPORTED
  if (cinfo->scale_num * 8 <= cinfo->scale_denom) {
    /* Provide 1/8 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 8L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 8L);
    cinfo->min_DCT_scaled_size = 1;
  } else if (cinfo->scale_num * 4 <= cinfo->scale_denom) {
    /* Provide 1/4 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 4L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 4L);
    cinfo->min_DCT_scaled_size = 2;
  } else if (cinfo->scale_num * 2 <= cinfo->scale_denom) {
    /* Provide 1/2 scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, 2L);
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, 2L);
    cinfo->min_DCT_scaled_size = 4;
  } else {
    /* Provide 1/1 scaling */
    cinfo->output_width = cinfo->image_width;
    cinfo->output_height = cinfo->image_height;
    cinfo->min_DCT_scaled_size = DCTSIZE;
  }
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code assumes that the supported DCT scalings are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    int ssize = cinfo->min_DCT_scaled_size;
    while (ssize < DCTSIZE &&
	   (compptr->h_samp_factor * ssize * 2 <=
	    cinfo->max_h_samp_factor * cinfo->min_DCT_scaled_size) &&
	   (compptr->v_samp_factor * ssize * 2 <=
	    cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size)) {
      ssize = ssize * 2;
    }
    compptr->DCT_scaled_size = ssize;
  }
#else /* !IDCT_SCALING_SUPPORTED */
  /* Hardwire it to "no scaling" */
  cinfo->output_width = cinfo->image_width;
  cinfo->output_height = cinfo->image_height;
  cinfo->min_DCT_scaled_size = DCTSIZE;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->DCT_scaled_size = DCTSIZE;
  }
#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    break;
  case JCS_RGB:
#if RGB_PIXELSIZE != 3
    cinfo->out_color_components = RGB_PIXELSIZE;
    break;
#endif /* else share code with YCbCr */
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
    break;
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
    break;
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
    break;
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
  else
    cinfo->rec_outbuf_height = 1;

  /* Compute various sampling-related dimensions.
   * Some of these are of interest to the application if it is dealing with
   * "raw" (not upsampled) output, so we do the calculations here.
   */

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
		    (long) (compptr->h_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
		    (long) (compptr->v_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
  }

  /* Compute number of fully interleaved MCU rows (number of times that
   * main controller will call coefficient controller).
   */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
}


LOCAL void
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
    compptr->MCU_height = 1;
    compptr->MCU_blocks = 1;
    compptr->MCU_sample_width = compptr->DCT_scaled_size;
    compptr->last_col_width = 1;
    compptr->last_row_height = 1;
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
    cinfo->MCU_membership[0] = 0;
    
  } else {
    
    /* Interleaved (multi-component) scan */
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    cinfo->MCU_rows_in_scan = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    
    cinfo->blocks_in_MCU = 0;
    
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      compptr = cinfo->cur_comp_info[ci];
      /* Sampling factors give # of blocks of component in each MCU */
      compptr->MCU_width = compptr->h_samp_factor;
      compptr->MCU_height = compptr->v_samp_factor;
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
      /* Figure number of non-dummy blocks in last MCU column & row */
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
      if (tmp == 0) tmp = compptr->MCU_width;
      compptr->last_col_width = tmp;
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
      if (tmp == 0) tmp = compptr->MCU_height;
      compptr->last_row_height = tmp;
      /* Prepare array describing MCU composition */
      mcublks = compptr->MCU_blocks;
      if (cinfo->blocks_in_MCU + mcublks > MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
      while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}


/*
 * Several decompression processes need to range-limit values to the range
 * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
 * due to noise introduced by quantization, roundoff error, etc.  These
 * processes are inner loops and need to be as fast as possible.  On most
 * machines, particularly CPUs with pipelines or instruction prefetch,
 * a (subscript-check-less) C table lookup
 *		x = sample_range_limit[x];
 * is faster than explicit tests
 *		if (x < 0)  x = 0;
 *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
 * These processes all use a common table prepared by the routine below.
 *
 * For most steps we can mathematically guarantee that the initial value
 * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
 * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
 * limiting step (just after the IDCT), a wildly out-of-range value is 
 * possible if the input data is corrupt.  To avoid any chance of indexing
 * off the end of memory and getting a bad-pointer trap, we perform the
 * post-IDCT limiting thus:
 *		x = range_limit[x & MASK];
 * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
 * samples.  Under normal circumstances this is more than enough range and
 * a correct output will be generated; with bogus input data the mask will
 * cause wraparound, and we will safely generate a bogus-but-in-range output.
 * For the post-IDCT step, we want to convert the data from signed to unsigned
 * representation by adding CENTERJSAMPLE at the same time that we limit it.
 * So the post-IDCT limiting table ends up looking like this:
 *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
 *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0,1,...,CENTERJSAMPLE-1
 * Negative inputs select values from the upper half of the table after
 * masking.
 *
 * We can save some space by overlapping the start of the post-IDCT table
 * with the simpler range limiting table.  The post-IDCT table begins at
 * sample_range_limit + CENTERJSAMPLE.
 *
 * Note that the table is allocated in near data space on PCs; it's small
 * enough and used often enough to justify this.
 */

LOCAL void
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
  cinfo->sample_range_limit = table;
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
    table[i] = (JSAMPLE) i;
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
    table[i] = MAXJSAMPLE;
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}


/*
 * Master selection of decompression modules.
 * This is done once at the start of processing an image.  We determine
 * which modules will be used and give them appropriate initialization calls.
 *
 * Note that this is called only after jpeg_read_header has finished.
 * We therefore know what is in the SOF and (first) SOS markers.
 */

LOCAL void
master_selection (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
  prepare_range_limit_table(cinfo);

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* Initialize my private state */
  master->pub.eoi_processed = FALSE;
  master->pass_number = 0;
  master->need_post_pass = FALSE;
  if (cinfo->comps_in_scan == cinfo->num_components) {
    master->pass_type = main_pass;
    master->total_passes = 1;
  } else {
#ifdef D_MULTISCAN_FILES_SUPPORTED
    master->pass_type = preread_pass;
    /* Assume there is a separate scan for each component; */
    /* if partially interleaved, we'll increment pass_number appropriately */
    master->total_passes = cinfo->num_components + 1;
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  }
  master->using_merged_upsample = use_merged_upsample(cinfo);

  /* There's not a lot of smarts here right now, but it'll get more
   * complicated when we have multiple implementations available...
   */

  /* Color quantizer selection */
  if (cinfo->quantize_colors) {
    if (cinfo->raw_data_out)
      ERREXIT(cinfo, JERR_NOTIMPL);
#ifdef QUANT_2PASS_SUPPORTED
    /* 2-pass quantizer only works in 3-component color space.
     * We use the "2-pass" code in a single pass if a colormap is given.
     */
    if (cinfo->out_color_components != 3)
      cinfo->two_pass_quantize = FALSE;
    else if (cinfo->colormap != NULL)
      cinfo->two_pass_quantize = TRUE;
#else
    /* Force 1-pass quantize if we don't have 2-pass code compiled. */
    cinfo->two_pass_quantize = FALSE;
#endif

    if (cinfo->two_pass_quantize) {
#ifdef QUANT_2PASS_SUPPORTED
      if (cinfo->colormap == NULL) {
	master->need_post_pass = TRUE;
	master->total_passes++;
      }
      jinit_2pass_quantizer(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
    if (master->using_merged_upsample) {
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
      jinit_upsampler(cinfo);
    }
    jinit_d_post_controller(cinfo, master->need_post_pass);
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
#ifdef D_ARITH_CODING_SUPPORTED
    jinit_arith_decoder(cinfo);
#else
    ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
#endif
  } else
    jinit_huff_decoder(cinfo);

  jinit_d_coef_controller(cinfo, (boolean)(master->pass_type == preread_pass));
  jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
  /* Note that main controller is initialized even in raw-data mode. */

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
}


/*
 * Per-pass setup.
 * This is called at the beginning of each pass.  We determine which modules
 * will be active during this pass and give them appropriate start_pass calls.
 * We also set is_last_pass to indicate whether any more passes will be
 * required.
 */

METHODDEF void
prepare_for_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  switch (master->pass_type) {
  case main_pass:
    /* Set up to read and decompress single-scan file in one pass */
    per_scan_setup(cinfo);
    master->pub.is_last_pass = ! master->need_post_pass;
    if (! cinfo->raw_data_out) {
      if (! master->using_merged_upsample)
	(*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->need_post_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->need_post_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
    }
    (*cinfo->idct->start_input_pass) (cinfo);
    (*cinfo->idct->start_output_pass) (cinfo);
    (*cinfo->entropy->start_pass) (cinfo);
    (*cinfo->coef->start_pass) (cinfo, JBUF_PASS_THRU);
    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    break;
#ifdef D_MULTISCAN_FILES_SUPPORTED
  case preread_pass:
    /* Read (another) scan of a multi-scan file */
    per_scan_setup(cinfo);
    master->pub.is_last_pass = FALSE;
    (*cinfo->idct->start_input_pass) (cinfo);
    (*cinfo->entropy->start_pass) (cinfo);
    (*cinfo->coef->start_pass) (cinfo, JBUF_SAVE_SOURCE);
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_SOURCE);
    break;
  case output_pass:
    /* All scans read, now do the IDCT and subsequent processing */
    master->pub.is_last_pass = ! master->need_post_pass;
    if (! cinfo->raw_data_out) {
      if (! master->using_merged_upsample)
	(*cinfo->cconvert->start_pass) (cinfo);
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->need_post_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->need_post_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
    }
    (*cinfo->idct->start_output_pass) (cinfo);
    (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
    (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
    break;
#endif /* D_MULTISCAN_FILES_SUPPORTED */
#ifdef QUANT_2PASS_SUPPORTED
  case post_pass:
    /* Final pass of 2-pass quantization */
    master->pub.is_last_pass = TRUE;
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
    break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->total_passes;
  }
}


/*
 * Finish up at end of pass.
 * In multi-scan mode, we must read next scan header and set the next
 * pass_type correctly for prepare_for_pass.
 */

METHODDEF void
finish_pass_master (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  switch (master->pass_type) {
  case main_pass:
  case output_pass:
    if (cinfo->quantize_colors)
      (*cinfo->cquantize->finish_pass) (cinfo);
    master->pass_number++;
    master->pass_type = post_pass; /* in case need_post_pass is true */
    break;
#ifdef D_MULTISCAN_FILES_SUPPORTED
  case preread_pass:
    /* Count one pass done for each component in this scan */
    master->pass_number += cinfo->comps_in_scan;
    switch ((*cinfo->marker->read_markers) (cinfo)) {
    case JPEG_HEADER_OK:	/* Found SOS, do another preread pass */
      break;
    case JPEG_HEADER_TABLES_ONLY: /* Found EOI, no more preread passes */
      master->pub.eoi_processed = TRUE;
      master->pass_type = output_pass;
      break;
    case JPEG_SUSPENDED:
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
    }
    break;
#endif /* D_MULTISCAN_FILES_SUPPORTED */
#ifdef QUANT_2PASS_SUPPORTED
  case post_pass:
    (*cinfo->cquantize->finish_pass) (cinfo);
    /* there will be no more passes, don't bother to change state */
    break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
  }
}


/*
 * Initialize master decompression control.
 * This creates my own subrecord and also performs the master selection phase,
 * which causes other modules to create their subrecords.
 */

GLOBAL void
jinit_master_decompress (j_decompress_ptr cinfo)
{
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_pass = prepare_for_pass;
  master->pub.finish_pass = finish_pass_master;

  master_selection(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdmarker.c ===
/*
 * jdmarker.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains routines to decode JPEG datastream markers.
 * Most of the complexity arises from our desire to support input
 * suspension: if not all of the data for a marker is available,
 * we must exit back to the application.  On resumption, we reprocess
 * the marker.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *   All Rights Reserved.
 *
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,
  
  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,
  
  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,
  
  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,
  
  M_DHT   = 0xc4,
  
  M_DAC   = 0xcc,
  
  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,
  
  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,
  
  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,
  
  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,
  
  M_TEM   = 0x01,
  
  M_ERROR = 0x100
} JPEG_MARKER;


/*
 * Macros for fetching data from the data source module.
 *
 * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
 * the current restart point; we update them only when we have reached a
 * suitable place to restart if a suspension occurs.
 */

/* Declare and initialize local copies of input pointer/count */
#define INPUT_VARS(cinfo)  \
	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
	size_t bytes_in_buffer = datasrc->bytes_in_buffer

/* Unload the local copies --- do this only at a restart boundary */
#define INPUT_SYNC(cinfo)  \
	( datasrc->next_input_byte = next_input_byte,  \
	  datasrc->bytes_in_buffer = bytes_in_buffer )

/* Reload the local copies --- seldom used except in MAKE_BYTE_AVAIL */
#define INPUT_RELOAD(cinfo)  \
	( next_input_byte = datasrc->next_input_byte,  \
	  bytes_in_buffer = datasrc->bytes_in_buffer )

/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
 * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
 * but we must reload the local copies after a successful fill.
 */
#define MAKE_BYTE_AVAIL(cinfo,action)  \
	if (bytes_in_buffer == 0) {  \
	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
	    { action; }  \
	  INPUT_RELOAD(cinfo);  \
	}  \
	bytes_in_buffer--

/* Read a byte into variable V.
 * If must suspend, take the specified action (typically "return FALSE").
 */
#define INPUT_BYTE(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = GETJOCTET(*next_input_byte++); )

/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
 * V should be declared unsigned int or perhaps INT32.
 */
#define INPUT_2BYTES(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
		  MAKE_BYTE_AVAIL(cinfo,action); \
		  V += GETJOCTET(*next_input_byte++); )


/*
 * Routines to process JPEG markers.
 *
 * Entry condition: JPEG marker itself has been read and its code saved
 *   in cinfo->unread_marker; input restart point is just after the marker.
 *
 * Exit: if return TRUE, have read and processed any parameters, and have
 *   updated the restart point to point after the parameters.
 *   If return FALSE, was forced to suspend before reaching end of
 *   marker parameters; restart point has not been moved.  Same routine
 *   will be called again after application supplies more input data.
 *
 * This approach to suspension assumes that all of a marker's parameters can
 * fit into a single input bufferload.  This should hold for "normal"
 * markers.  Some COM/APPn markers might have large parameter segments,
 * but we use skip_input_data to get past those, and thereby put the problem
 * on the source manager's shoulders.
 *
 * Note that we don't bother to avoid duplicate trace messages if a
 * suspension occurs within marker parameters.  Other side effects
 * require more care.
 */


LOCAL boolean
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);

  if (cinfo->marker->saw_SOI)
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    cinfo->arith_dc_L[i] = 0;
    cinfo->arith_dc_U[i] = 1;
    cinfo->arith_ac_K[i] = 5;
  }
  cinfo->restart_interval = 0;

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */

  cinfo->saw_JFIF_marker = FALSE;
  cinfo->density_unit = 0;	/* set default JFIF APP0 values */
  cinfo->X_density = 1;
  cinfo->Y_density = 1;
  cinfo->saw_Adobe_marker = FALSE;
  cinfo->Adobe_transform = 0;
  cinfo->saw_AVI1_marker = FALSE;
  cinfo->AVI1_field_id = 0;

  cinfo->marker->saw_SOI = TRUE;

  return TRUE;
}


LOCAL boolean
get_sof (j_decompress_ptr cinfo)
/* Process a SOFn marker */
{
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);

  length -= 8;

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
      || cinfo->num_components <= 0)
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  if (length != (cinfo->num_components * 3))
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    compptr->component_index = ci;
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    compptr->h_samp_factor = (c >> 4) & 15;
    compptr->v_samp_factor = (c     ) & 15;
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
  INT32 length;
  int i, ci, n, c, cc, ccc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  if (! cinfo->marker->saw_SOF)
    ERREXIT(cinfo, JERR_SOS_NO_SOF);

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */

  if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  TRACEMS1(cinfo, 1, JTRC_SOS, n);

  cinfo->comps_in_scan = n;

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
    INPUT_BYTE(cinfo, cc, return FALSE);
    INPUT_BYTE(cinfo, c, return FALSE);
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      if (cc == compptr->component_id)
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);

  id_found:

    cinfo->cur_comp_info[i] = compptr;
    compptr->dc_tbl_no = (c >> 4) & 15;
    compptr->ac_tbl_no = (c     ) & 15;
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al.
   * Currently we just validate that they are right for sequential JPEG.
   * This ought to be an error condition, but we make it a warning because
   * there are some baseline files out there with all zeroes in these bytes.
   * (Thank you, Logitech :-(.)
   */
  INPUT_BYTE(cinfo, c, return FALSE);
  INPUT_BYTE(cinfo, cc, return FALSE);
  INPUT_BYTE(cinfo, ccc, return FALSE);
  if (c != 0 || cc != DCTSIZE2-1 || ccc != 0)
    WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF boolean
get_app0 (j_decompress_ptr cinfo)
/* Process an APP0 marker */
{
#define JFIF_LEN 14
#define AVI1_LEN 5
  INT32 length;
  UINT8 b[JFIF_LEN];
  int buffp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  
  if (length >= AVI1_LEN) { /* minimum for Microsoft header info, be compatable with too short headers */
    
    for (buffp = 0; buffp < AVI1_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    
	if (b[0] == 'A' && b[1] == 'V' && b[2] == 'I' && b[3] == '1') { /* found AVI marker */
	  cinfo->saw_AVI1_marker = TRUE;
	  cinfo->AVI1_field_id = b[4];
	  length -= AVI1_LEN;
      }
	else if (length >= JFIF_LEN) {
      for (buffp = AVI1_LEN; buffp < JFIF_LEN; buffp++)
        INPUT_BYTE(cinfo, b[buffp], return FALSE);
      length -= JFIF_LEN;
    
      /* See if a JFIF APP0 marker is present */
      if (b[0]==0x4A && b[1]==0x46 && b[2]==0x49 && b[3]==0x46 && b[4]==0) {
        /* Found JFIF APP0 marker: check version */
        /* Major version must be 1 */
        if (b[5] != 1)
	      ERREXIT2(cinfo, JERR_JFIF_MAJOR, b[5], b[6]);
        /* Minor version should be 0..2, but try to process anyway if newer */
        if (b[6] > 2)
	      TRACEMS2(cinfo, 1, JTRC_JFIF_MINOR, b[5], b[6]);
        /* Save info */
        cinfo->saw_JFIF_marker = TRUE;
        cinfo->density_unit = b[7];
        cinfo->X_density = (b[8] << 8) + b[9];
        cinfo->Y_density = (b[10] << 8) + b[11];
        TRACEMS3(cinfo, 1, JTRC_JFIF, cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
        if (b[12] | b[13])
	      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL, b[12], b[13]);
        if (length != ((INT32) b[12] * (INT32) b[13] * (INT32) 3))
	      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) length);
		}
      } else {
      /* Start of APP0 does not match "JFIF" */   
      TRACEMS1(cinfo, 1, JTRC_APP0, (int) length + JFIF_LEN);
    }
  } else {
    /* Too short to be JFIF or AVI1 marker */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


METHODDEF boolean
get_app14 (j_decompress_ptr cinfo)
/* Process an APP14 marker */
{
#define ADOBE_LEN 12
  INT32 length;
  UINT8 b[ADOBE_LEN];
  int buffp;
  unsigned int version, flags0, flags1, transform;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* See if an Adobe APP14 marker is present */

  if (length >= ADOBE_LEN) {
    for (buffp = 0; buffp < ADOBE_LEN; buffp++)
      INPUT_BYTE(cinfo, b[buffp], return FALSE);
    length -= ADOBE_LEN;

    if (b[0]==0x41 && b[1]==0x64 && b[2]==0x6F && b[3]==0x62 && b[4]==0x65) {
      /* Found Adobe APP14 marker */
      version = (b[5] << 8) + b[6];
      flags0 = (b[7] << 8) + b[8];
      flags1 = (b[9] << 8) + b[10];
      transform = b[11];
      TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
      cinfo->saw_Adobe_marker = TRUE;
      cinfo->Adobe_transform = (UINT8) transform;
    } else {
      /* Start of APP14 does not match "Adobe" */
      TRACEMS1(cinfo, 1, JTRC_APP14, (int) length + ADOBE_LEN);
    }
  } else {
    /* Too short to be Adobe marker */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) length);
  }

  INPUT_SYNC(cinfo);
  if (length > 0)		/* skip any remaining data -- could be lots */
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}


LOCAL boolean
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);
    INPUT_BYTE(cinfo, val, return FALSE);

    length -= 2;

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
    }
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;
  
  while (length > 0) {
    INPUT_BYTE(cinfo, index, return FALSE);

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
      
    bits[0] = 0;
    count = 0;
    for (i = 1; i <= 16; i++) {
      INPUT_BYTE(cinfo, bits[i], return FALSE);
      count += bits[i];
    }

    length -= 1 + 16;

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[9], bits[10], bits[11], bits[12],
	     bits[13], bits[14], bits[15], bits[16]);

    if (count > 256 || ((INT32) count) > length)
      ERREXIT(cinfo, JERR_DHT_COUNTS);

    for (i = 0; i < count; i++)
      INPUT_BYTE(cinfo, huffval[i], return FALSE);

    length -= count;

    if (index & 0x10) {		/* AC table definition */
      index -= 0x10;
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);

    if (*htblptr == NULL)
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
  INT32 length;
  int n, i, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 0) {
    INPUT_BYTE(cinfo, n, return FALSE);
    prec = n >> 4;
    n &= 0x0F;

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);

    if (n >= NUM_QUANT_TBLS)
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
    quant_ptr = cinfo->quant_tbl_ptrs[n];

    for (i = 0; i < DCTSIZE2; i++) {
      if (prec)
	INPUT_2BYTES(cinfo, tmp, return FALSE);
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
      quant_ptr->quantval[i] = (UINT16) tmp;
    }

    for (i = 0; i < DCTSIZE2; i += 8) {
      TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
	       quant_ptr->quantval[i  ], quant_ptr->quantval[i+1],
	       quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
	       quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
	       quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
    }

    length -= DCTSIZE2+1;
    if (prec) length -= DCTSIZE2;
  }

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  if (length != 4)
    ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_2BYTES(cinfo, tmp, return FALSE);

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);

  cinfo->restart_interval = tmp;

  INPUT_SYNC(cinfo);
  return TRUE;
}


METHODDEF boolean
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
  INT32 length;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  (*cinfo->src->skip_input_data) (cinfo, (long) length - 2L);

  return TRUE;
}


/*
 * Find the next JPEG marker, save it in cinfo->unread_marker.
 * Returns FALSE if had to suspend before reaching a marker;
 * in that case cinfo->unread_marker is unchanged.
 *
 * Note that the result might not be a valid marker code,
 * but it will never be 0 or FF.
 */

LOCAL boolean
next_marker (j_decompress_ptr cinfo)
{
  int c;
  INPUT_VARS(cinfo);

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
      cinfo->marker->discarded_bytes++;
      INPUT_SYNC(cinfo);
      INPUT_BYTE(cinfo, c, return FALSE);
    }
    /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
    } while (c == 0xFF);
    if (c != 0)
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
    INPUT_SYNC(cinfo);
  }

  if (cinfo->marker->discarded_bytes != 0) {
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
    cinfo->marker->discarded_bytes = 0;
  }

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}


LOCAL boolean
first_marker (j_decompress_ptr cinfo)
/* Like next_marker, but used to obtain the initial SOI marker. */
/* For this marker, we do not allow preceding garbage; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 *
 * Preceding fill of FF FF FF FF ... is sometimes found in the second field header, like on Miro DC20 cards
 */
{
  int c, c2;
  INPUT_VARS(cinfo);

  INPUT_BYTE(cinfo, c, return FALSE);

  /* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
   * pad bytes, so don't count them in discarded_bytes.  We assume there
   * will not be so many consecutive FF bytes as to overflow a suspending
   * data source's input buffer.
   */
  do {
    INPUT_BYTE(cinfo, c2, return FALSE);
    } while (c2 == 0xFF);

  cinfo->unread_marker = c2;
  if (c != 0xFF || c2 != (int) M_SOI)
      return FALSE;


  INPUT_SYNC(cinfo);
  return TRUE;
}


/*
 * Read markers until SOS or EOI.
 *
 * Returns same codes as are defined for jpeg_read_header,
 * but HEADER_OK and HEADER_TABLES_ONLY merely indicate which marker type
 * stopped the scan --- they do not necessarily mean the file is valid.
 */

METHODDEF int
read_markers (j_decompress_ptr cinfo)
{
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
      if (! cinfo->marker->saw_SOI) {
	if (! first_marker(cinfo))
	  return JPEG_SUSPENDED;
      } else {
	if (! next_marker(cinfo))
	  return JPEG_SUSPENDED;
      }
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
    case M_SOI:
      if (! get_soi(cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_SOF0:		/* Baseline */
    case M_SOF1:		/* Extended sequential, Huffman */
      cinfo->arith_code = FALSE;
      if (! get_sof(cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      cinfo->arith_code = TRUE;
      if (! get_sof(cinfo))
	return JPEG_SUSPENDED;
      break;

    /* Currently unsupported SOFn types */
    case M_SOF2:		/* Progressive, Huffman */
    case M_SOF3:		/* Lossless, Huffman */
    case M_SOF5:		/* Differential sequential, Huffman */
    case M_SOF6:		/* Differential progressive, Huffman */
    case M_SOF7:		/* Differential lossless, Huffman */
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF10:		/* Progressive, arithmetic */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
      break;

    case M_SOS:
      if (! get_sos(cinfo))
	return JPEG_SUSPENDED;
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_HEADER_OK;	/* return value for SOS found */
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
      cinfo->unread_marker = 0;	/* processed the marker */
      return JPEG_HEADER_TABLES_ONLY; /* return value for EOI found */
      
    case M_DAC:
      if (! get_dac(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_APP0:
    case M_APP1:
    case M_APP2:
    case M_APP3:
    case M_APP4:
    case M_APP5:
    case M_APP6:
    case M_APP7:
    case M_APP8:
    case M_APP9:
    case M_APP10:
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*cinfo->marker->process_APPn[cinfo->unread_marker - (int) M_APP0]) (cinfo))
	return JPEG_SUSPENDED;
      break;
      
    case M_COM:
      if (! (*cinfo->marker->process_COM) (cinfo))
	return JPEG_SUSPENDED;
      break;

    case M_RST0:		/* these are all parameterless */
    case M_RST1:
    case M_RST2:
    case M_RST3:
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
      break;

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
	return JPEG_SUSPENDED;
      break;

    default:			/* must be DHP, EXP, JPGn, or RESn */
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
      break;
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
  } /* end loop */
}


/*
 * Read a restart marker, which is expected to appear next in the datastream;
 * if the marker is not there, take appropriate recovery action.
 * Returns FALSE if suspension is required.
 *
 * This is called by the entropy decoder after it has read an appropriate
 * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
 * has already read a marker from the data source.  Under normal conditions
 * cinfo->unread_marker will be reset to 0 before returning; if not reset,
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF boolean
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 2, JTRC_RST, cinfo->marker->next_restart_num);
    cinfo->unread_marker = 0;
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;

  return TRUE;
}


/*
 * This is the default resync_to_restart method for data source managers
 * to use if they don't have any better approach.  Some data source managers
 * may be able to back up, or may have additional knowledge about the data
 * which permits a more intelligent recovery strategy; such managers would
 * presumably supply their own resync method.
 *
 * read_restart_marker calls resync_to_restart if it finds a marker other than
 * the restart marker it was expecting.  (This code is *not* used unless
 * a nonzero restart interval has been declared.)  cinfo->unread_marker is
 * the marker code actually found (might be anything, except 0 or FF).
 * The desired restart marker is indicated by cinfo->marker->next_restart_num.
 * This routine is supposed to apply whatever error recovery strategy seems
 * appropriate in order to position the input stream to the next data segment.
 * Note that cinfo->unread_marker is treated as a marker appearing before
 * the current data-source input point; usually it should be reset to zero
 * before returning.
 * Returns FALSE if suspension is required.
 *
 * This implementation is substantially constrained by wanting to treat the
 * input as a data stream; this means we can't back up.  Therefore, we have
 * only the following actions to work with:
 *   1. Simply discard the marker and let the entropy decoder resume at next
 *      byte of file.
 *   2. Read forward until we find another marker, discarding intervening
 *      data.  (In theory we could look ahead within the current bufferload,
 *      without having to discard data if we don't find the desired marker.
 *      This idea is not implemented here, in part because it makes behavior
 *      dependent on buffer size and chance buffer-boundary positions.)
 *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
 *      This will cause the entropy decoder to process an empty data segment,
 *      inserting dummy zeroes, and then we will reprocess the marker.
 *
 * #2 is appropriate if we think the desired marker lies ahead, while #3 is
 * appropriate if the found marker is a future restart marker (indicating
 * that we have missed the desired restart marker, probably because it got
 * corrupted).
 * We apply #2 or #3 if the found marker is a restart marker no more than
 * two counts behind or ahead of the expected one.  We also apply #2 if the
 * found marker is not a legal JPEG marker code (it's certainly bogus data).
 * If the found marker is a restart marker more than 2 counts away, we do #1
 * (too much risk that the marker is erroneous; with luck we will be able to
 * resync at some future point).
 * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
 * overrunning the end of a scan.  An implementation limited to single-scan
 * files might find it better to apply #2 for markers other than EOI, since
 * any other marker would have to be bogus data in that case.
 */

GLOBAL boolean
jpeg_resync_to_restart (j_decompress_ptr cinfo)
{
  int marker = cinfo->unread_marker;
  int desired = cinfo->marker->next_restart_num;
  int action = 1;
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
      action = 2;		/* invalid marker */
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
      action = 3;		/* valid non-restart marker */
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
	action = 3;		/* one of the next two expected restarts */
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
	action = 2;		/* a prior restart, so advance */
      else
	action = 1;		/* desired restart or too far away */
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
    switch (action) {
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
      return TRUE;
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
	return FALSE;
      marker = cinfo->unread_marker;
      break;
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
    }
  } /* end loop */
}


/*
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF void
reset_marker_reader (j_decompress_ptr cinfo)
{
  cinfo->unread_marker = 0;	    /* no pending marker */
  cinfo->marker->saw_SOI = FALSE;   /* set internal state too */
  cinfo->marker->saw_SOF = FALSE;
  cinfo->marker->discarded_bytes = 0;
  cinfo->comp_info = NULL;	    /* until allocated by get_sof */
}


/*
 * Initialize the marker reader module.
 */

GLOBAL void
jinit_marker_reader (j_decompress_ptr cinfo)
{
  int i;

  /* Create subobject in permanent pool */
  if (cinfo->marker == NULL) {	/* first time for this JPEG object? */
    cinfo->marker = (struct jpeg_marker_reader *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(struct jpeg_marker_reader));
  }
  /* Initialize method pointers */
  cinfo->marker->reset_marker_reader = reset_marker_reader;
  cinfo->marker->read_markers = read_markers;
  cinfo->marker->read_restart_marker = read_restart_marker;
  cinfo->marker->process_COM = skip_variable;
  for (i = 0; i < 16; i++)
    cinfo->marker->process_APPn[i] = skip_variable;
  cinfo->marker->process_APPn[0] = get_app0;
  cinfo->marker->process_APPn[14] = get_app14;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdmerge.c ===
/*
 * jdmerge.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *  All Rights Reserved.
 *
 * This file contains code for merged upsampling/color conversion.
 *
 * This file combines functions from jdsample.c and jdcolor.c;
 * read those files first to understand what's going on.
 *
 * When the chroma components are to be upsampled by simple replication
 * (ie, box filtering), we can save some work in color conversion by
 * calculating all the output pixels corresponding to a pair of chroma
 * samples at one time.  In the conversion equations
 *	R = Y           + K1 * Cr
 *	G = Y + K2 * Cb + K3 * Cr
 *	B = Y + K4 * Cb
 * only the Y term varies among the group of pixels corresponding to a pair
 * of chroma samples, so the rest of the terms can be calculated just once.
 * At typical sampling ratios, this eliminates half or three-quarters of the
 * multiplications needed for color conversion.
 *
 * This file currently provides implementations for the following cases:
 *	YCbCr => RGB color conversion only.
 *	Sampling ratios of 2h1v or 2h2v.
 *	No scaling needed at upsample time.
 *	Corner-aligned (non-CCIR601) sampling alignment.
 * Other special cases could be added, but in most applications these are
 * the only common cases.  (For uncommon cases we fall back on the more
 * general code in jdsample.c and jdcolor.c.)
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef UPSAMPLE_MERGING_SUPPORTED


/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Pointer to routine to do actual upsampling/conversion of one row group */
  JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
			   JSAMPARRAY output_buf));

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

  /* For 2:1 vertical sampling, we produce two output rows at a time.
   * We need a "spare" row buffer to hold the second output row if the
   * application provides just a one-row buffer; we also use the spare
   * to discard the dummy last row if the image height is odd.
   */
  JSAMPROW spare_row;
  boolean spare_full;		/* T if spare buffer is occupied */

  JDIMENSION out_row_width;	/* samples per output row */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))


/*
 * Initialize for an upsampling pass.
 */

METHODDEF void
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  INT32 i, x2;
  SHIFT_TEMPS

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;

  /* Initialize the YCC=>RGB conversion tables.
   * This is taken directly from jdcolor.c; see that file for more info.
   */
  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0; i <= MAXJSAMPLE; i++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - MAXJSAMPLE/2 */
    x2 = 2*i - MAXJSAMPLE;	/* twice x */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200/2) * x2 + ONE_HALF, SCALEBITS);
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200/2) * x2 + ONE_HALF, SCALEBITS);
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414/2)) * x2;
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414/2)) * x2 + ONE_HALF;
  }
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * The control routine just handles the row buffering considerations.
 */

METHODDEF void
merged_2v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
		      1, upsample->out_row_width);
    num_rows = 1;
    upsample->spare_full = FALSE;
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
      num_rows = upsample->rows_to_go;
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
    if (num_rows > out_rows_avail)
      num_rows = out_rows_avail;
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
    if (num_rows > 1) {
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
    } else {
      work_ptrs[1] = upsample->spare_row;
      upsample->spare_full = TRUE;
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
    (*in_row_group_ctr)++;
}


METHODDEF void
merged_1v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
			 output_buf + *out_row_ctr);
  /* Adjust counts */
  (*out_row_ctr)++;
  (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by the control routines to do
 * the actual upsampling/conversion.  One row group is processed per call.
 *
 * Note: since we may be writing directly into application-supplied buffers,
 * we have to be honest about the output width; we can't assume the buffer
 * has been rounded up to an even width.
 */


/*
 * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
 */

METHODDEF void
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  JDIMENSION adjustedWidth;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS
  DIB_TEMPS
  
  DIB_PARM_LOAD;

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
  /* handle the right edge carefully, so we don't overrun memory */
  adjustedWidth = (cinfo->output_width >> 1) - 1;
  /* Loop for each pair of output pixels */
  for (col = adjustedWidth; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
	PUT_DIB(outptr,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
    y  = GETJSAMPLE(*inptr0++);
	PUT_DIB(outptr,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
  }

  /* Do the chroma part of the calculation */
  cb = GETJSAMPLE(*inptr1++);
  cr = GETJSAMPLE(*inptr2++);
  cred = Crrtab[cr];
  cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
  cblue = Cbbtab[cb];
  /* Fetch 2 Y values and emit 2 pixels */
  y  = GETJSAMPLE(*inptr0++);
  PUT_DIB(outptr,
    	  range_limit[y + cred],
    	  range_limit[y + cgreen],
    	  range_limit[y + cblue]);
  y  = GETJSAMPLE(*inptr0++);
  PUT_DIB_CAREFULLY(outptr,
    	  range_limit[y + cred],
    	  range_limit[y + cgreen],
    	  range_limit[y + cblue]);

   /* BUG BUG jcb 2/25/96 didn't do the careful handling of last colums for other formats */

  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
	PUT_DIB_CAREFULLY(outptr,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
  }
}


/*
 * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
 */

METHODDEF void
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS
  DIB_TEMPS
  
  DIB_PARM_LOAD;

  inptr00 = input_buf[0][in_row_group_ctr*2];
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
    cr = GETJSAMPLE(*inptr2++);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
	PUT_DIB(outptr0,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
    y  = GETJSAMPLE(*inptr00++);
	PUT_DIB(outptr0,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
    y  = GETJSAMPLE(*inptr01++);
	PUT_DIB(outptr1,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
    y  = GETJSAMPLE(*inptr01++);
	PUT_DIB(outptr1,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
	PUT_DIB(outptr0,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
    y  = GETJSAMPLE(*inptr01);
	PUT_DIB(outptr1,
    	range_limit[y + cred],
    	range_limit[y + cgreen],
    	range_limit[y + cblue]);
  }
}


/*
 * Module initialization routine for merged upsampling/color conversion.
 *
 * NB: this is called under the conditions determined by use_merged_upsample()
 * in jdmaster.c.  That routine MUST correspond to the actual capabilities
 * of this module; no safety checks are made here.
 */

GLOBAL void
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->pixel_size;

  if (cinfo->max_v_samp_factor == 2) {
    upsample->pub.upsample = merged_2v_upsample;
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
  } else {
    upsample->pub.upsample = merged_1v_upsample;
    upsample->upmethod = h2v1_merged_upsample;
    /* No spare row needed */
    upsample->spare_row = NULL;
  }
}

#endif /* UPSAMPLE_MERGING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jerror.c ===
/*
 * jerror.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains simple error-reporting and trace-message routines.
 * These are suitable for Unix-like systems and others where writing to
 * stderr is the right thing to do.  Many applications will want to replace
 * some or all of these routines.
 *
 * These routines are used by both the compression and decompression code.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *   All Rights Reserved.
 */

/* this is not a core library module, so it doesn't define JPEG_INTERNALS */
#include "jinclude.h"
#include "jpeglib.h"
#include "jversion.h"
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#include <winnt.h>      // supports TCHAR

#include "jerror.h"		/* get error codes */
#define JMAKE_MSG_TABLE
#include "jerror.h"		/* create message string table */

#ifndef EXIT_FAILURE		/* define exit() codes if not provided */
#define EXIT_FAILURE  1
#endif

extern void LogErrorMessage(char * txt);


// Code for Errorxit Handling (which throws exceptions, rather than exiting)
void
throw_exception(j_common_ptr cinfo)
{
    // clean up internal heap
    if(cinfo)
    {
        jpeg_abort(cinfo);
        jpeg_destroy(cinfo);
    }

    // throw exception (it is a contiuable exception, i.e prog execution may still continue)
    // no exception arguments
    RaiseException(MJPEG_ERROREXIT_EXCEPTION, 0, 0, NULL);
}

/*
 * Actual output of an error or trace message.
 * Applications may override this method to send JPEG messages somewhere
 * other than stderr.
 */

METHODDEF void
output_message (j_common_ptr cinfo)
{
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);

  LogErrorMessage(buffer);

  /* Send it to stderr, adding a newline */
//  strcat(buffer,"\n");
//  OutputDebugString(buffer);
//  OutputDebugString("\n");
  // fprintf(stderr, "%s\n", buffer);
}


/*
 * Decide whether to emit a trace or warning message.
 * msg_level is one of:
 *   -1: recoverable corrupt-data warning, may want to abort.
 *    0: important advisory messages (always display to user).
 *    1: first level of tracing detail.
 *    2,3,...: successively more detailed tracing messages.
 * An application might override this method if it wanted to abort on warnings
 * or change the policy about which messages to display.
 */

METHODDEF void
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
      (*err->output_message) (cinfo);
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}


/*
 * Format a message string for the most recent JPEG error or message.
 * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
 * characters.  Note that no '\n' character is added to the string.
 * Few applications should need to override this method.
 */

METHODDEF void
format_message (j_common_ptr cinfo, char * buffer)
{
  struct jpeg_error_mgr * err = cinfo->err;
  int msg_code = err->msg_code;
  const char * msgtext = NULL;
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
    msgtext = err->jpeg_message_table[msg_code];
  } else if (err->addon_message_table != NULL &&
	     msg_code >= err->first_addon_message &&
	     msg_code <= err->last_addon_message) {
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
    err->msg_parm.i[0] = msg_code;
    msgtext = err->jpeg_message_table[0];
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
  msgptr = msgtext;
  while ((ch = *msgptr++) != '\0') {
    if (ch == '%') {
      if (*msgptr == 's') isstring = TRUE;
      break;
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
    sprintf(buffer, msgtext, err->msg_parm.s);
  else
    sprintf(buffer, msgtext,
	    err->msg_parm.i[0], err->msg_parm.i[1],
	    err->msg_parm.i[2], err->msg_parm.i[3],
	    err->msg_parm.i[4], err->msg_parm.i[5],
	    err->msg_parm.i[6], err->msg_parm.i[7]);
}

#define JPEG_EXCEPTION		0x12345678

METHODDEF void
my_error_exception (j_common_ptr cinfo)
{
    LogErrorMessage("Fatal Error: exiting codec");
    RaiseException (JPEG_EXCEPTION, EXCEPTION_NONCONTINUABLE, 0, NULL);
}


/*
 * Reset error state variables at start of a new image.
 * This is called during compression startup to reset trace/error
 * processing to default state, without losing any application-specific
 * method pointers.  An application might possibly want to override
 * this method if it has additional error processing state.
 */

METHODDEF void
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
}


/*
 * Fill in the standard error-handling methods in a jpeg_error_mgr object.
 * Typical call is:
 *	struct jpeg_compress_struct cinfo;
 *	struct jpeg_error_mgr err;
 *
 *	cinfo.err = jpeg_std_error(&err);
 * after which the application may override some of the methods.
 */



GLOBAL struct jpeg_error_mgr *
jpeg_exception_error (struct jpeg_error_mgr * err)
{
  err->error_exit = my_error_exception;
  err->emit_message = emit_message;
  err->output_message = output_message;
  err->format_message = format_message;
  err->reset_error_mgr = reset_error_mgr;

  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_message_table;
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;

  err->addon_message_table = NULL;
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;

  return err;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jdsample.c ===
/*
 * jdsample.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains upsampling routines.
 *
 * Upsampling input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  Upsampling will normally produce
 * max_v_samp_factor pixel rows from each row group (but this could vary
 * if the upsampler is applying a scale factor of its own).
 *
 * An excellent reference for image resampling is
 *   Digital Image Warping, George Wolberg, 1990.
 *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"


/* Pointer to routine to upsample a single component */
typedef JMETHOD(void, upsample1_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));

/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Color conversion buffer.  When using separate upsampling and color
   * conversion steps, this buffer holds one upsampled row group until it
   * has been color converted and output.
   * Note: we do not allocate any storage for component(s) which are full-size,
   * ie do not need rescaling.  The corresponding entry of color_buf[] is
   * simply set to point to the input data array, thereby avoiding copying.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  /* Per-component upsampling method pointers */
  upsample1_ptr methods[MAX_COMPONENTS];

  int next_row_out;		/* counts rows emitted from color_buf */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */

  /* Height of an input row group for each component. */
  int rowgroup_height[MAX_COMPONENTS];

  /* These arrays save pixel expansion factors so that int_expand need not
   * recompute them each time.  They are unused for other upsampling methods.
   */
  UINT8 h_expand[MAX_COMPONENTS];
  UINT8 v_expand[MAX_COMPONENTS];
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;


/*
 * Initialize for an upsampling pass.
 */

METHODDEF void
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}


/*
 * Control routine to do upsampling (and color conversion).
 *
 * In this version we upsample each component independently.
 * We upsample one row group into the conversion buffer, then apply
 * color conversion a row at a time.
 */

METHODDEF void
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  upsample->next_row_out += num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
    (*in_row_group_ctr)++;
}


/*
 * These are the routines invoked by sep_upsample to upsample pixel values
 * of a single component.  One row group is processed per call.
 */


/*
 * For full-size components, we just make color_buf[ci] point at the
 * input buffer, and thus avoid copying any data.  Note that this is
 * safe only because sep_upsample doesn't declare the input row group
 * "consumed" until we are done color converting and emitting it.
 */

METHODDEF void
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
}


/*
 * This is a no-op version used for "uninteresting" components.
 * These components will not be referenced by color conversion.
 */

METHODDEF void
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
}


/*
 * This version handles any integral sampling ratios.
 * This is not used for typical JPEG files, so it need not be fast.
 * Nor, for that matter, is it particularly accurate: the algorithm is
 * simple replication of the input pixel onto the corresponding output
 * pixels.  The hi-falutin sampling literature refers to this as a
 * "box filter".  A box filter tends to introduce visible artifacts,
 * so if you are actually going to use 3:1 or 4:1 sampling ratios
 * you would be well advised to improve this code.
 */

METHODDEF void
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
  v_expand = upsample->v_expand[compptr->component_index];

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      for (h = h_expand; h > 0; h--) {
	*outptr++ = invalue;
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
			v_expand-1, cinfo->output_width);
    }
    inrow++;
    outrow += v_expand;
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
 * It's still a box filter.
 */

METHODDEF void
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}


/*
 * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
 * It's still a box filter.
 */

METHODDEF void
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    inptr = input_data[inrow];
    outptr = output_data[outrow];
    outend = outptr + cinfo->output_width;
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 1:1 vertical.
 *
 * The upsampling algorithm is linear interpolation between pixel centers,
 * also known as a "triangle filter".  This is a good compromise between
 * speed and visual quality.  The centers of the output pixels are 1/4 and 3/4
 * of the way between input pixel centers.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF void
h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register int invalue;
  register JDIMENSION colctr;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
    inptr = input_data[inrow];
    outptr = output_data[inrow];
    /* Special case for first column */
    invalue = GETJSAMPLE(*inptr++);
    *outptr++ = (JSAMPLE) invalue;
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);

    for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
      /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
      invalue = GETJSAMPLE(*inptr++) * 3;
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
      *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
    }

    /* Special case for last column */
    invalue = GETJSAMPLE(*inptr);
    *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
    *outptr++ = (JSAMPLE) invalue;
  }
}


/*
 * Fancy processing for the common case of 2:1 horizontal and 2:1 vertical.
 * Again a triangle filter; see comments for h2v1 case, above.
 *
 * It is OK for us to reference the adjacent input rows because we demanded
 * context from the main buffer controller (see initialization code).
 */

METHODDEF void
h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr0, inptr1, outptr;
#if BITS_IN_JSAMPLE == 8
  register int thiscolsum, lastcolsum, nextcolsum;
#else
  register INT32 thiscolsum, lastcolsum, nextcolsum;
#endif
  register JDIMENSION colctr;
  int inrow, outrow, v;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
    for (v = 0; v < 2; v++) {
      /* inptr0 points to nearest input row, inptr1 points to next nearest */
      inptr0 = input_data[inrow];
      if (v == 0)		/* next nearest is row above */
	inptr1 = input_data[inrow-1];
      else			/* next nearest is row below */
	inptr1 = input_data[inrow+1];
      outptr = output_data[outrow++];

      /* Special case for first column */
      thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
      lastcolsum = thiscolsum; thiscolsum = nextcolsum;

      for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
      }

      /* Special case for last column */
      *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
      *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
    }
    inrow++;
  }
}


/*
 * Module initialization routine for upsampling.
 */

GLOBAL void
jinit_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;
  int ci;
  jpeg_component_info * compptr;
  boolean need_buffer, do_fancy;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
  upsample->pub.upsample = sep_upsample;
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
   * so don't ask for it.
   */
  do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
    h_out_group = cinfo->max_h_samp_factor;
    v_out_group = cinfo->max_v_samp_factor;
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
    need_buffer = TRUE;
    if (! compptr->component_needed) {
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
      need_buffer = FALSE;
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
      need_buffer = FALSE;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group == v_out_group) {
      /* Special cases for 2h1v upsampling */
      if (do_fancy && compptr->downsampled_width > 2)
	upsample->methods[ci] = h2v1_fancy_upsample;
      else
	upsample->methods[ci] = h2v1_upsample;
    } else if (h_in_group * 2 == h_out_group &&
	       v_in_group * 2 == v_out_group) {
      /* Special cases for 2h2v upsampling */
      if (do_fancy && compptr->downsampled_width > 2) {
	upsample->methods[ci] = h2v2_fancy_upsample;
	upsample->pub.need_context_rows = TRUE;
      } else
	upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
    if (need_buffer) {
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jerror.h ===
/*
 * jerror.h
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the error and message codes for the JPEG library.
 * Edit this file to add new codes, or to translate the message strings to
 * some other language.
 * A set of error-reporting macros are defined too.  Some applications using
 * the JPEG library may wish to include this file to get the error codes
 * and/or the macros.
 */


/* To define the enum list of message codes, include this file without
 * defining JMAKE_MSG_TABLE.  To create the message string table, include it
 * again with JMAKE_MSG_TABLE defined (this should be done in just one module).
 */

#ifdef JMAKE_MSG_TABLE

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_message_table	jMsgTable
#endif

const char * const jpeg_message_table[] = {

#define JMESSAGE(code,string)	string ,

#else /* not JMAKE_MSG_TABLE */

typedef enum {

#define JMESSAGE(code,string)	code ,

#endif /* JMAKE_MSG_TABLE */

JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */

/* For maintenance convenience, list is alphabetical by message code name */
JMESSAGE(JERR_ARITH_NOTIMPL,
	 "Sorry, there are legal restrictions on arithmetic coding")
JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
JMESSAGE(JERR_DHT_COUNTS, "Bogus DHT counts")
JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
JMESSAGE(JERR_FILE_READ, "Input file read error")
JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
JMESSAGE(JERR_JFIF_MAJOR, "Unsupported JFIF revision number %d.%02d")
JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
JMESSAGE(JERR_QUANT_COMPONENTS,
	 "Cannot quantize more than %d color components")
JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
JMESSAGE(JERR_TFILE_WRITE,
	 "Write failed on temporary file --- out of disk space?")
JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
JMESSAGE(JMSG_VERSION, JVERSION)
JMESSAGE(JTRC_16BIT_TABLES,
	 "Caution: quantization tables are too coarse for baseline JPEG")
JMESSAGE(JTRC_ADOBE,
	 "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
JMESSAGE(JTRC_EOI, "End Of Image")
JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
JMESSAGE(JTRC_JFIF, "JFIF APP0 marker, density %dx%d  %d")
JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
	 "Warning: thumbnail image size does not match data length %u")
JMESSAGE(JTRC_JFIF_MINOR, "Warning: unknown JFIF revision number %d.%02d")
JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
JMESSAGE(JTRC_MISC_MARKER, "Skipping marker 0x%02x, length %u")
JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
JMESSAGE(JTRC_RST, "RST%d")
JMESSAGE(JTRC_SMOOTH_NOTIMPL,
	 "Smoothing not supported with nonstandard sampling ratios")
JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
JMESSAGE(JTRC_SOI, "Start of Image")
JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
JMESSAGE(JTRC_UNKNOWN_IDS,
	 "Unrecognized component IDs %d %d %d, assuming YCbCr")
JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
JMESSAGE(JWRN_EXTRANEOUS_DATA,
	 "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
JMESSAGE(JWRN_MUST_RESYNC,
	 "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")

#ifdef JMAKE_MSG_TABLE

  NULL
};

#else /* not JMAKE_MSG_TABLE */

  JMSG_LASTMSGCODE
} J_MESSAGE_CODE;

#endif /* JMAKE_MSG_TABLE */

#undef JMESSAGE


#ifndef JMAKE_MSG_TABLE

// routine for cleanup and raising exception (defined in jerror.c)
void throw_exception(j_common_ptr cinfo);

// common to both retail and debug
#define MAKESTMT(stuff)		do { stuff } while (0)

#ifdef DEBUG
// DEBUG VERSION (this is how PMJPEG32 actually works

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */


/* OLD BEHAVIOR: Fatal errors (print message and exit), */
/* NEW BEHAVIOR: Fatal errors (print message, clean up, and throw exception) */
#define ERREXIT(cinfo,code)  \
  { (((j_common_ptr)cinfo)->err->msg_code = (code)); \
     (*(((j_common_ptr)cinfo)->err->output_message)) ((j_common_ptr) (cinfo)); \
     throw_exception((j_common_ptr) (cinfo)); }
//   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define ERREXIT1(cinfo,code,p1)  \
  { (((j_common_ptr)cinfo)->err->msg_code = (code), \
     ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1)); \
     (*(((j_common_ptr)cinfo)->err->output_message)) ((j_common_ptr) (cinfo)); \
     throw_exception((j_common_ptr) (cinfo)); }
//   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define ERREXIT2(cinfo,code,p1,p2)  \
  { (((j_common_ptr)cinfo)->err->msg_code = (code), \
     ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
     ((j_common_ptr)cinfo)->err->msg_parm.i[1] = (p2)); \
     (*(((j_common_ptr)cinfo)->err->output_message)) ((j_common_ptr) (cinfo)); \
     throw_exception((j_common_ptr) (cinfo)); }
//   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define ERREXIT3(cinfo,code,p1,p2,p3)  \
  { (((j_common_ptr)cinfo)->err->msg_code = (code), \
     ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
     ((j_common_ptr)cinfo)->err->msg_parm.i[1] = (p2), \
     ((j_common_ptr)cinfo)->err->msg_parm.i[2] = (p3)); \
     (*(((j_common_ptr)cinfo)->err->output_message)) ((j_common_ptr) (cinfo)); \
     throw_exception((j_common_ptr) (cinfo)); }
//   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
  { (((j_common_ptr)cinfo)->err->msg_code = (code), \
    ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
    ((j_common_ptr)cinfo)->err->msg_parm.i[1] = (p2), \
    ((j_common_ptr)cinfo)->err->msg_parm.i[2] = (p3), \
    ((j_common_ptr)cinfo)->err->msg_parm.i[3] = (p4)); \
     (*(((j_common_ptr)cinfo)->err->output_message)) ((j_common_ptr) (cinfo)); \
     throw_exception((j_common_ptr) (cinfo)); }
//   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define ERREXITS(cinfo,code,str)  \
  { (((j_common_ptr)cinfo)->err->msg_code = (code), \
     strncpy(((j_common_ptr)cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX)); \
     (*(((j_common_ptr)cinfo)->err->output_message)) ((j_common_ptr) (cinfo)); \
     throw_exception((j_common_ptr) (cinfo)); }
//   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))


/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS1(cinfo,code,p1)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS2(cinfo,code,p1,p2)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
   ((j_common_ptr)cinfo)->err->msg_parm.i[1] = (p2), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS1(cinfo,lvl,code,p1)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   ((j_common_ptr)cinfo)->err->msg_parm.i[0] = (p1), \
   ((j_common_ptr)cinfo)->err->msg_parm.i[1] = (p2), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
  MAKESTMT(int * _mp = ((j_common_ptr)cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
	   ((j_common_ptr)cinfo)->err->msg_code = (code); \
	   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
  MAKESTMT(int * _mp = ((j_common_ptr)cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   ((j_common_ptr)cinfo)->err->msg_code = (code); \
	   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
  MAKESTMT(int * _mp = ((j_common_ptr)cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
	   ((j_common_ptr)cinfo)->err->msg_code = (code); \
	   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMSS(cinfo,lvl,code,str)  \
  (((j_common_ptr)cinfo)->err->msg_code = (code), \
   strncpy(((j_common_ptr)cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*((j_common_ptr)cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))

#else

// RETAIL VERSION, modified so error_exits(), and trace code doesn't run with retail bits

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */

/* Fatal errors (print message and exit) */
// we abort/destroy to destroy the codec's private heap and then throw and exception to the top level
#define ERREXIT(cinfo,code)             throw_exception((j_common_ptr) cinfo);

#define ERREXIT1(cinfo,code,p1)         throw_exception((j_common_ptr) cinfo);

#define ERREXIT2(cinfo,code,p1,p2)      throw_exception((j_common_ptr) cinfo);

#define ERREXIT3(cinfo,code,p1,p2,p3)   throw_exception((j_common_ptr) cinfo);

#define ERREXIT4(cinfo,code,p1,p2,p3,p4) throw_exception((j_common_ptr) cinfo);

#define ERREXITS(cinfo,code,str)        throw_exception((j_common_ptr) cinfo);


/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)                                  0
#define WARNMS1(cinfo,code,p1)                              0
#define WARNMS2(cinfo,code,p1,p2)                           0

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)                             0
#define TRACEMS1(cinfo,lvl,code,p1)                         0
#define TRACEMS2(cinfo,lvl,code,p1,p2)                      0
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)                   0
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)                0
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)    0
#define TRACEMSS(cinfo,lvl,code,str)                        0

#endif // #ifdef DEBUG (for macros)

#endif /* JMAKE_MSG_TABLE */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jfdctflt.c ===
/*
 * jfdctflt.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * This implementation should be more accurate than either of the integer
 * DCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL void
jpeg_fdct_float (FAST_FLOAT * data)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z1, z2, z3, z4, z5, z11, z13;
  FAST_FLOAT *dataptr;
  int ctr;

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = tmp10 + tmp11; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;
    
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[5] = z13 + z2;	/* phase 6 */
    dataptr[3] = z13 - z2;
    dataptr[1] = z11 + z4;
    dataptr[7] = z11 - z4;

    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
    z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
    dataptr[DCTSIZE*6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
    z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
    z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
    z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jfdctfst.c ===
/*
 * jfdctfst.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jfdctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * Again to save a few shifts, the intermediate results between pass 1 and
 * pass 2 are not upscaled, but are represented only to integral precision.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#define CONST_BITS  8


/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_0_382683433  ((INT32)   98)		/* FIX(0.382683433) */
#define FIX_0_541196100  ((INT32)  139)		/* FIX(0.541196100) */
#define FIX_0_707106781  ((INT32)  181)		/* FIX(0.707106781) */
#define FIX_1_306562965  ((INT32)  334)		/* FIX(1.306562965) */
#else
#define FIX_0_382683433  FIX(0.382683433)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_707106781  FIX(0.707106781)
#define FIX_1_306562965  FIX(1.306562965)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL void
jpeg_fdct_ifast (DCTELEM * data)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z1, z2, z3, z4, z5, z11, z13;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = tmp10 + tmp11; /* phase 3 */
    dataptr[4] = tmp10 - tmp11;
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
    dataptr[2] = tmp13 + z1;	/* phase 5 */
    dataptr[6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[5] = z13 + z2;	/* phase 6 */
    dataptr[3] = z13 - z2;
    dataptr[1] = z11 + z4;
    dataptr[7] = z11 - z4;

    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part */
    
    tmp10 = tmp0 + tmp3;	/* phase 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
    dataptr[DCTSIZE*4] = tmp10 - tmp11;
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
    dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
    dataptr[DCTSIZE*6] = tmp13 - z1;
    
    /* Odd part */

    tmp10 = tmp4 + tmp5;	/* phase 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* The rotator is modified from fig 4-8 to avoid extra negations. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

    z11 = tmp7 + z3;		/* phase 5 */
    z13 = tmp7 - z3;

    dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
    dataptr[DCTSIZE*3] = z13 - z2;
    dataptr[DCTSIZE*1] = z11 + z4;
    dataptr[DCTSIZE*7] = z11 - z4;

    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jidctflt.c ===
/*
 * jidctflt.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a floating-point implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * This implementation should be more accurate than either of the integer
 * IDCT implementations.  However, it may not give the same results on all
 * machines because of differences in roundoff behavior.  Speed will depend
 * on the hardware's floating point capacity.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with a fixed-point
 * implementation, accuracy is lost due to imprecise representation of the
 * scaled quantization values.  However, that problem does not arise if
 * we use floating point arithmetic.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_FLOAT_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a float result.
 */

#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL void
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
    wsptr[DCTSIZE*4] = tmp3 + tmp4;
    wsptr[DCTSIZE*3] = tmp3 - tmp4;

    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * And testing floats for zero is relatively expensive, so we don't bother.
     */
    
    /* Even part */

    tmp10 = wsptr[0] + wsptr[4];
    tmp11 = wsptr[0] - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
    z10 = wsptr[5] - wsptr[3];
    z11 = wsptr[1] + wsptr[7];
    z12 = wsptr[1] - wsptr[7];

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
    tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jidctfst.c ===
/*
 * jidctfst.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a fast, not so accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on Arai, Agui, and Nakajima's algorithm for
 * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
 * Japanese, but the algorithm is described in the Pennebaker & Mitchell
 * JPEG textbook (see REFERENCES section in file README).  The following code
 * is based directly on figure 4-8 in P&M.
 * While an 8-point DCT cannot be done in less than 11 multiplies, it is
 * possible to arrange the computation so that many of the multiplies are
 * simple scalings of the final outputs.  These multiplies can then be
 * folded into the multiplications or divisions by the JPEG quantization
 * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
 * to be done in the DCT itself.
 * The primary disadvantage of this method is that with fixed-point math,
 * accuracy is lost due to imprecise representation of the scaled
 * quantization values.  The smaller the quantization table entry, the less
 * precise the scaled value, so this implementation does worse with high-
 * quality-setting files than with low-quality ones.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_IFAST_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif


/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif


/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif


/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#define IRIGHT_SHIFT(x,shft)  \
	((ishift_temp = (x)) < 0 ? \
	 (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (32-(shft))) : \
	 (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL void
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  IFAST_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */

    tmp0 = tmp10 + tmp13;	/* phase 2 */
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    z13 = tmp6 + tmp5;		/* phase 6 */
    z10 = tmp6 - tmp5;
    z11 = tmp4 + tmp7;
    z12 = tmp4 - tmp7;

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);

    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * On machines with very fast multiplication, it's possible that the
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      outptr[4] = dcval;
      outptr[5] = dcval;
      outptr[6] = dcval;
      outptr[7] = dcval;

      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */

    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);

    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
	    - tmp13;

    tmp0 = tmp10 + tmp13;
    tmp3 = tmp10 - tmp13;
    tmp1 = tmp11 + tmp12;
    tmp2 = tmp11 - tmp12;

    /* Odd part */

    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

    tmp6 = tmp12 - tmp7;	/* phase 2 */
    tmp5 = tmp11 - tmp6;
    tmp4 = tmp10 + tmp5;

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_IFAST_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jidctint.c ===
/*
 * jidctint.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
 * must also perform dequantization of the input coefficients.
 *
 * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
 * on each row (or vice versa, but it's more convenient to emit a row at
 * a time).  Direct algorithms are also available, but they are much more
 * complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The low-down on this scaling stuff is as follows:
 *
 * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
 * larger than the true IDCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D IDCT,
 * because the y0 and y4 inputs need not be divided by sqrt(N).
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (To scale up 12-bit sample data further, an
 * intermediate INT32 array would be needed.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL void
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp1, tmp2, tmp3;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
    /* Due to quantization, we will usually find that many of the input
     * coefficients are zero, especially the AC terms.  We can exploit this
     * by short-circuiting the IDCT calculation for any column in which all
     * the AC terms are zero.  In that case each output is equal to the
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*4] | inptr[DCTSIZE*5] | inptr[DCTSIZE*6] |
	 inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      wsptr[DCTSIZE*4] = dcval;
      wsptr[DCTSIZE*5] = dcval;
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
      continue;
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);

    tmp0 = (z2 + z3) << CONST_BITS;
    tmp1 = (z2 - z3) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*7] = (int) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*6] = (int) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*5] = (int) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[DCTSIZE*4] = (int) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
    
    inptr++;			/* advance pointers to next column */
    quantptr++;
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* Rows of zeroes can be exploited in the same way as we did with columns.
     * However, the column calculation has created many nonzero AC terms, so
     * the simplification applies less often (typically 5% to 10% of the time).
     * On machines with very fast multiplication, it's possible that the
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[4] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      outptr[4] = dcval;
      outptr[5] = dcval;
      outptr[6] = dcval;
      outptr[7] = dcval;

      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
    tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
    tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
    
    tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
    tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
    tmp1 = (INT32) wsptr[5];
    tmp2 = (INT32) wsptr[3];
    tmp3 = (INT32) wsptr[1];
    
    z1 = tmp0 + tmp3;
    z2 = tmp1 + tmp2;
    z3 = tmp0 + tmp2;
    z4 = tmp1 + tmp3;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    tmp0 += z1 + z3;
    tmp1 += z2 + z4;
    tmp2 += z2 + z3;
    tmp3 += z1 + z4;
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[7] = range_limit[(int) DESCALE(tmp10 - tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp11 + tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[6] = range_limit[(int) DESCALE(tmp11 - tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 + tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) DESCALE(tmp12 - tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp13 + tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) DESCALE(tmp13 - tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jidctred.c ===
/*
 * jidctred.c
 *
 * Copyright (C) 1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains inverse-DCT routines that produce reduced-size output:
 * either 4x4, 2x2, or 1x1 pixels from an 8x8 DCT block.
 *
 * The implementation is based on the Loeffler, Ligtenberg and Moschytz (LL&M)
 * algorithm used in jidctint.c.  We simply replace each 8-to-8 1-D IDCT step
 * with an 8-to-4 step that produces the four averages of two adjacent outputs
 * (or an 8-to-2 step producing two averages of four outputs, for 2x2 output).
 * These steps were derived by computing the corresponding values at the end
 * of the normal LL&M code, then simplifying as much as possible.
 *
 * 1x1 is trivial: just take the DC coefficient divided by 8.
 *
 * See jidctint.c for additional comments.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef IDCT_SCALING_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/* Scaling is the same as in jidctint.c. */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_211164243  ((INT32)  1730)	/* FIX(0.211164243) */
#define FIX_0_509795579  ((INT32)  4176)	/* FIX(0.509795579) */
#define FIX_0_601344887  ((INT32)  4926)	/* FIX(0.601344887) */
#define FIX_0_720959822  ((INT32)  5906)	/* FIX(0.720959822) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_850430095  ((INT32)  6967)	/* FIX(0.850430095) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_061594337  ((INT32)  8697)	/* FIX(1.061594337) */
#define FIX_1_272758580  ((INT32)  10426)	/* FIX(1.272758580) */
#define FIX_1_451774981  ((INT32)  11893)	/* FIX(1.451774981) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_2_172734803  ((INT32)  17799)	/* FIX(2.172734803) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_624509785  ((INT32)  29692)	/* FIX(3.624509785) */
#else
#define FIX_0_211164243  FIX(0.211164243)
#define FIX_0_509795579  FIX(0.509795579)
#define FIX_0_601344887  FIX(0.601344887)
#define FIX_0_720959822  FIX(0.720959822)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_850430095  FIX(0.850430095)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_061594337  FIX(1.061594337)
#define FIX_1_272758580  FIX(1.272758580)
#define FIX_1_451774981  FIX(1.451774981)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_172734803  FIX(2.172734803)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_624509785  FIX(3.624509785)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 4x4 output block.
 */

GLOBAL void
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp2, tmp10, tmp12;
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process column 4, because second pass won't use it */
    if (ctr == DCTSIZE-4)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*2] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*6] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine term 4 for 4x4 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      wsptr[DCTSIZE*2] = dcval;
      wsptr[DCTSIZE*3] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= (CONST_BITS+1);
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
  }
  
  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[2] | wsptr[3] | wsptr[5] | wsptr[6] |
	 wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      outptr[2] = dcval;
      outptr[3] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);
    
    tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);
    
    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;
    
    /* Odd part */
    
    z1 = (INT32) wsptr[7];
    z2 = (INT32) wsptr[5];
    z3 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[1];
    
    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */
    
    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) DESCALE(tmp10 - tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp12 + tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) DESCALE(tmp12 - tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 2x2 output block.
 */

GLOBAL void
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp10, z1;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
    /* Don't bother to process columns 2,4,6 */
    if (ctr == DCTSIZE-2 || ctr == DCTSIZE-4 || ctr == DCTSIZE-6)
      continue;
    if ((inptr[DCTSIZE*1] | inptr[DCTSIZE*3] |
	 inptr[DCTSIZE*5] | inptr[DCTSIZE*7]) == 0) {
      /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
      
      wsptr[DCTSIZE*0] = dcval;
      wsptr[DCTSIZE*1] = dcval;
      
      continue;
    }
    
    /* Even part */
    
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp10 = z1 << (CONST_BITS+2);
    
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (c7-c5+c3-c1) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-c1+c3+c5+c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-c1+c3-c5-c7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
  }
  
  /* Pass 2: process 2 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 2; ctr++) {
    outptr = output_buf[ctr] + output_col;
    /* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
    if ((wsptr[1] | wsptr[3] | wsptr[5] | wsptr[7]) == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
      
      outptr[0] = dcval;
      outptr[1] = dcval;
      
      wsptr += DCTSIZE;		/* advance pointer to next row */
      continue;
    }
#endif
    
    /* Even part */
    
    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);
    
    /* Odd part */

    tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */
	 + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-c1+c3+c5+c7) */
	 + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */
	 + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

    /* Final output stage */
    
    outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) DESCALE(tmp10 - tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}


/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 1x1 output block.
 */

GLOBAL void
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* We hardly need an inverse DCT routine for this: just take the
   * average pixel value, which is one-eighth of the DC coefficient.
   */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
}

#endif /* IDCT_SCALING_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jfdctint.c ===
/*
 * jfdctint.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jdct.h"		/* Private declarations for DCT subsystem */

#ifdef DCT_ISLOW_SUPPORTED


/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif


/*
 * The low-down on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif


/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif


/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL void
jpeg_fdct_islow (DCTELEM * data)
{
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[0] + dataptr[7];
    tmp7 = dataptr[0] - dataptr[7];
    tmp1 = dataptr[1] + dataptr[6];
    tmp6 = dataptr[1] - dataptr[6];
    tmp2 = dataptr[2] + dataptr[5];
    tmp5 = dataptr[2] - dataptr[5];
    tmp3 = dataptr[3] + dataptr[4];
    tmp4 = dataptr[3] - dataptr[4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
    dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
				   CONST_BITS-PASS1_BITS);
    dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
				   CONST_BITS-PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
    dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
    dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
    dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);
    
    dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
    tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;
    
    dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
    dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);
    
    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
					   CONST_BITS+PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
    
    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
    
    z3 += z5;
    z4 += z5;
    
    dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
					   CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
					   CONST_BITS+PASS1_BITS);
    
    dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jinclude.h ===
/*
 * jinclude.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file exists to provide a single place to fix any problems with
 * including the wrong system include files.  (Common problems are taken
 * care of by the standard jconfig symbols, but on really weird systems
 * you may have to edit this file.)
 *
 * NOTE: this file is NOT intended to be included by applications using the
 * JPEG library.  Most applications need only include jpeglib.h.
 */


/* Include auto-config file to find out which system include files we need. */

#include "jconfig.h"		/* auto configuration options */
#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */

/*
 * We need the NULL macro and size_t typedef.
 * On an ANSI-conforming system it is sufficient to include <stddef.h>.
 * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
 * pull in <sys/types.h> as well.
 * Note that the core JPEG library does not require <stdio.h>;
 * only the default error handler and data source/destination modules do.
 * But we must pull it in because of the references to FILE in jpeglib.h.
 * You can remove those references if you want to compile without <stdio.h>.
 */

#ifdef HAVE_STDDEF_H
#include <stddef.h>
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifdef NEED_SYS_TYPES_H
#include <sys/types.h>
#endif

#include <stdio.h>

/*
 * We need memory copying and zeroing functions, plus strncpy().
 * ANSI and System V implementations declare these in <string.h>.
 * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
 * Some systems may declare memset and memcpy in <memory.h>.
 *
 * NOTE: we assume the size parameters to these functions are of type size_t.
 * Change the casts in these macros if not!
 */

#ifdef NEED_BSD_STRINGS

#include <strings.h>
#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))

#else /* not BSD, assume ANSI/SysV string lib */

#include <string.h>
#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))

#endif

/*
 * In ANSI C, and indeed any rational implementation, size_t is also the
 * type returned by sizeof().  However, it seems there are some irrational
 * implementations out there, in which sizeof() returns an int even though
 * size_t is defined as long or unsigned long.  To ensure consistent results
 * we always use this SIZEOF() macro in place of using sizeof() directly.
 */

#define SIZEOF(object)	((size_t) sizeof(object))

/*
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */

#define JFREAD(file,buf,sizeofbuf)  \
  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
#define JFWRITE(file,buf,sizeofbuf)  \
  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jmemmgr.c ===
/*
 * jmemmgr.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the JPEG system-independent memory management
 * routines.  This code is usable across a wide variety of machines; most
 * of the system dependencies have been isolated in a separate file.
 * The major functions provided here are:
 *   * pool-based allocation and freeing of memory;
 *   * policy decisions about how to divide available memory among the
 *     virtual arrays;
 *   * control logic for swapping virtual arrays between main memory and
 *     backing storage.
 * The separate system-dependent file provides the actual backing-storage
 * access code, and it contains the policy decision about how much total
 * main memory to use.
 * This file is system-dependent in the sense that some of its functions
 * are unnecessary in some systems.  For example, if there is enough virtual
 * memory so that backing storage will never be used, much of the virtual
 * array control logic could be removed.  (Of course, if you have that much
 * memory then you shouldn't care about a little bit of unused code...)
 */

#define JPEG_INTERNALS
#define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef NO_GETENV
#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
extern char * getenv JPP((const char * name));
#endif
#endif


/*
 * Some important notes:
 *   The allocation routines provided here must never return NULL.
 *   They should exit to error_exit if unsuccessful.
 *
 *   It's not a good idea to try to merge the sarray and barray routines,
 *   even though they are textually almost the same, because samples are
 *   usually stored as bytes while coefficients are shorts or ints.  Thus,
 *   in machines where byte pointers have a different representation from
 *   word pointers, the resulting machine code could not be the same.
 */


/*
 * Many machines require storage alignment: longs must start on 4-byte
 * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
 * always returns pointers that are multiples of the worst-case alignment
 * requirement, and we had better do so too.
 * There isn't any really portable way to determine the worst-case alignment
 * requirement.  This module assumes that the alignment requirement is
 * multiples of sizeof(ALIGN_TYPE).
 * By default, we define ALIGN_TYPE as double.  This is necessary on some
 * workstations (where doubles really do need 8-byte alignment) and will work
 * fine on nearly everything.  If your machine has lesser alignment needs,
 * you can save a few bytes by making ALIGN_TYPE smaller.
 * The only place I know of where this will NOT work is certain Macintosh
 * 680x0 compilers that define double as a 10-byte IEEE extended float.
 * Doing 10-byte alignment is counterproductive because longwords won't be
 * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
 * such a compiler.
 */

#ifndef ALIGN_TYPE		/* so can override from jconfig.h */
#define ALIGN_TYPE  double
#endif


/*
 * We allocate objects from "pools", where each pool is gotten with a single
 * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
 * overhead within a pool, except for alignment padding.  Each pool has a
 * header with a link to the next pool of the same class.
 * Small and large pool headers are identical except that the latter's
 * link pointer must be FAR on 80x86 machines.
 * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
 * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
 * of the alignment requirement of ALIGN_TYPE.
 */

typedef union small_pool_struct * small_pool_ptr;

typedef union small_pool_struct {
  struct {
    small_pool_ptr next;	/* next in list of pools */
    size_t bytes_used;		/* how many bytes already used within pool */
    size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} small_pool_hdr;

typedef union large_pool_struct FAR * large_pool_ptr;

typedef union large_pool_struct {
  struct {
    large_pool_ptr next;	/* next in list of pools */
    size_t bytes_used;		/* how many bytes already used within pool */
    size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} large_pool_hdr;


/*
 * Here is the full definition of a memory manager object.
 */

typedef struct {
  struct jpeg_memory_mgr pub;	/* public fields */

  /* Each pool identifier (lifetime class) names a linked list of pools. */
  small_pool_ptr small_list[JPOOL_NUMPOOLS];
  large_pool_ptr large_list[JPOOL_NUMPOOLS];

  /* Since we only have one lifetime class of virtual arrays, only one
   * linked list is necessary (for each datatype).  Note that the virtual
   * array control blocks being linked together are actually stored somewhere
   * in the small-pool list.
   */
  jvirt_sarray_ptr virt_sarray_list;
  jvirt_barray_ptr virt_barray_list;

  /* This counts total space obtained from jpeg_get_small/large */
  long total_space_allocated;

  /* alloc_sarray and alloc_barray set this value for use by virtual
   * array routines.
   */
  JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
} my_memory_mgr;

typedef my_memory_mgr * my_mem_ptr;


/*
 * The control blocks for virtual arrays.
 * Note that these blocks are allocated in the "small" pool area.
 * System-dependent info for the associated backing store (if any) is hidden
 * inside the backing_store_info struct.
 */

struct jvirt_sarray_control {
  JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
  JDIMENSION unitheight;	/* # of rows accessed by access_virt_sarray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};

struct jvirt_barray_control {
  JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
  JDIMENSION unitheight;	/* # of rows accessed by access_virt_barray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_barray_ptr next;	/* link to next virtual barray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};


#ifdef MEM_STATS		/* optional extra stuff for statistics */

LOCAL void
print_mem_stats (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;

  /* Since this is only a debugging stub, we can cheat a little by using
   * fprintf directly rather than going through the trace message code.
   * This is helpful because message parm array can't handle longs.
   */
/*    fprintf(stderr, "Freeing pool %d, total space = %ld\n", */
/*  	  pool_id, mem->total_space_allocated); */

  for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
       lhdr_ptr = lhdr_ptr->hdr.next) {
/*      fprintf(stderr, "  Large chunk used %ld\n", */
/*  	    (long) lhdr_ptr->hdr.bytes_used); */
  }

  for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
       shdr_ptr = shdr_ptr->hdr.next) {
/*      fprintf(stderr, "  Small chunk used %ld free %ld\n", */
/*  	    (long) shdr_ptr->hdr.bytes_used, */
/*  	    (long) shdr_ptr->hdr.bytes_left); */
  }
}

#endif /* MEM_STATS */


LOCAL void
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
}


/*
 * Allocation of "small" objects.
 *
 * For these, we use pooled storage.  When a new pool must be created,
 * we try to get enough space for the current request plus a "slop" factor,
 * where the slop will be the amount of leftover space in the new pool.
 * The speed vs. space tradeoff is largely determined by the slop values.
 * A different slop value is provided for each pool class (lifetime),
 * and we also distinguish the first pool of a class from later ones.
 * NOTE: the values given work fairly well on both 16- and 32-bit-int
 * machines, but may be too small if longs are 64 bits or more.
 */

static const size_t first_pool_slop[JPOOL_NUMPOOLS] = 
{
	1600,			/* first PERMANENT pool */
	16000			/* first IMAGE pool */
};

static const size_t extra_pool_slop[JPOOL_NUMPOOLS] = 
{
	0,			/* additional PERMANENT pools */
	5000			/* additional IMAGE pools */
};

#define MIN_SLOP  50		/* greater than 0 to avoid futile looping */


METHODDEF void *
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
  prev_hdr_ptr = NULL;
  hdr_ptr = mem->small_list[pool_id];
  while (hdr_ptr != NULL) {
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
    hdr_ptr = hdr_ptr->hdr.next;
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
      slop = first_pool_slop[pool_id];
    else
      slop = extra_pool_slop[pool_id];
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
      if (hdr_ptr != NULL)
	break;
      slop /= 2;
      if (slop < MIN_SLOP)	/* give up when it gets real small */
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
    }
    mem->total_space_allocated += min_request + slop;
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
    hdr_ptr->hdr.bytes_used = 0;
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
      mem->small_list[pool_id] = hdr_ptr;
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
  hdr_ptr->hdr.bytes_used += sizeofobject;
  hdr_ptr->hdr.bytes_left -= sizeofobject;

  return (void *) data_ptr;
}


/*
 * Allocation of "large" objects.
 *
 * The external semantics of these are the same as "small" objects,
 * except that FAR pointers are used on 80x86.  However the pool
 * management heuristics are quite different.  We assume that each
 * request is large enough that it may as well be passed directly to
 * jpeg_get_large; the pool management just links everything together
 * so that we can free it all on demand.
 * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 * structures.  The routines that create these structures (see below)
 * deliberately bunch rows together to ensure a large request size.
 */

METHODDEF void FAR *
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
  hdr_ptr->hdr.bytes_left = 0;
  mem->large_list[pool_id] = hdr_ptr;

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
}


/*
 * Creation of 2-D sample arrays.
 * The pointers are in near heap, the samples themselves in FAR heap.
 *
 * To minimize allocation overhead and to allow I/O of large contiguous
 * blocks, we allocate the sample rows in groups of as many rows as possible
 * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 * NB: the virtual array control routines, later in this file, know about
 * this chunking of rows.  The rowsperchunk value is left in the mem manager
 * object so that it can be saved away if this sarray is the workspace for
 * a virtual array.
 */

METHODDEF JSAMPARRAY
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JSAMPARRAY result;
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += samplesperrow;
    }
  }

  return result;
}


/*
 * Creation of 2-D coefficient-block arrays.
 * This is essentially the same as the code for sample arrays, above.
 */

METHODDEF JBLOCKARRAY
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JBLOCKARRAY result;
  JBLOCKROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
  if (ltemp <= 0)
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
    rowsperchunk = (JDIMENSION) ltemp;
  else
    rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
      result[currow++] = workspace;
      workspace += blocksperrow;
    }
  }

  return result;
}


/*
 * About virtual array management:
 *
 * To allow machines with limited memory to handle large images, all
 * processing in the JPEG system is done a few pixel or block rows at a time.
 * The above "normal" array routines are only used to allocate strip buffers
 * (as wide as the image, but just a few rows high).
 * In some cases multiple passes must be made over the data.  In these
 * cases the virtual array routines are used.  The array is still accessed
 * a strip at a time, but the memory manager must save the whole array
 * for repeated accesses.  The intended implementation is that there is
 * a strip buffer in memory (as high as is possible given the desired memory
 * limit), plus a backing file that holds the rest of the array.
 *
 * The request_virt_array routines are told the total size of the image and
 * the unit height, which is the number of rows that will be accessed at once;
 * the in-memory buffer should be made a multiple of this height for best
 * efficiency.
 *
 * The request routines create control blocks but not the in-memory buffers.
 * That is postponed until realize_virt_arrays is called.  At that time the
 * total amount of space needed is known (approximately, anyway), so free
 * memory can be divided up fairly.
 *
 * The access_virt_array routines are responsible for making a specific strip
 * area accessible (after reading or writing the backing file, if necessary).
 * Note that the access routines are told whether the caller intends to modify
 * the accessed strip; during a read-only pass this saves having to rewrite
 * data to disk.
 *
 * The typical access pattern is one top-to-bottom pass to write the data,
 * followed by one or more read-only top-to-bottom passes.  However, other
 * access patterns may occur while reading.  For example, translation of image
 * formats that use bottom-to-top scan order will require bottom-to-top read
 * passes.  The memory manager need not support multiple write passes nor
 * funny write orders (meaning that rearranging rows must be handled while
 * reading data out of the virtual array, not while putting it in).  THIS WILL
 * PROBABLY NEED TO CHANGE ... will need multiple write passes for progressive
 * JPEG decoding.
 *
 * In current usage, the access requests are always for nonoverlapping strips;
 * that is, successive access start_row numbers always differ by exactly the
 * unitheight.  This allows fairly simple buffer dump/reload logic if the
 * in-memory buffer is made a multiple of the unitheight.  The code below
 * would work with overlapping access requests, but not very efficiently.
 */


METHODDEF jvirt_sarray_ptr
request_virt_sarray (j_common_ptr cinfo, int pool_id,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION unitheight)
/* Request a virtual 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* Round array size up to a multiple of unitheight */
  numrows = (JDIMENSION) jround_up((long) numrows, (long) unitheight);

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->samplesperrow = samplesperrow;
  result->unitheight = unitheight;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
  mem->virt_sarray_list = result;

  return result;
}


METHODDEF jvirt_barray_ptr
request_virt_barray (j_common_ptr cinfo, int pool_id,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION unitheight)
/* Request a virtual 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* Round array size up to a multiple of unitheight */
  numrows = (JDIMENSION) jround_up((long) numrows, (long) unitheight);

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->blocksperrow = blocksperrow;
  result->unitheight = unitheight;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
  mem->virt_barray_list = result;

  return result;
}


METHODDEF void
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  long space_per_unitheight, maximum_space, avail_mem;
  long unitheights, max_unitheights;
  jvirt_sarray_ptr sptr;
  jvirt_barray_ptr bptr;

  /* Compute the minimum space needed (unitheight rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_unitheight = 0;
  maximum_space = 0;
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_unitheight += (long) sptr->unitheight *
			      (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
      maximum_space += (long) sptr->rows_in_array *
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      space_per_unitheight += (long) bptr->unitheight *
			      (long) bptr->blocksperrow * SIZEOF(JBLOCK);
      maximum_space += (long) bptr->rows_in_array *
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
    }
  }

  if (space_per_unitheight <= 0)
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_unitheight, maximum_space,
				 mem->total_space_allocated);

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of unitheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
    max_unitheights = 1000000000L;
  else {
    max_unitheights = avail_mem / space_per_unitheight;
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_unitheights <= 0)
      max_unitheights = 1;
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
      unitheights = ((long) sptr->rows_in_array - 1L) / sptr->unitheight + 1L;
      if (unitheights <= max_unitheights) {
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_unitheights * sptr->unitheight);
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
				(long) sptr->rows_in_array *
				(long) sptr->samplesperrow *
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
      sptr->cur_start_row = 0;
      sptr->dirty = FALSE;
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
      unitheights = ((long) bptr->rows_in_array - 1L) / bptr->unitheight + 1L;
      if (unitheights <= max_unitheights) {
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_unitheights * bptr->unitheight);
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
				(long) bptr->rows_in_array *
				(long) bptr->blocksperrow *
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
      bptr->cur_start_row = 0;
      bptr->dirty = FALSE;
    }
  }
}


LOCAL void
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
  long bytesperrow, file_offset, byte_count, rows, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array -
		    ((long) ptr->cur_start_row + i));
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}


LOCAL void
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array -
		    ((long) ptr->cur_start_row + i));
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}


METHODDEF JSAMPARRAY
access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
		    JDIMENSION start_row, boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for ptr->unitheight rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  /* debugging check */
  if (start_row >= ptr->rows_in_array || ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      start_row+ptr->unitheight > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_sarray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) start_row + (long) ptr->unitheight -
	      (long) ptr->rows_in_mem;
      if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* If reading, read in the selected part of the array. 
     * If we are writing, we need not pre-read the selected portion,
     * since the access sequence constraints ensure it would be garbage.
     */
    if (! writable) {
      do_sarray_io(cinfo, ptr, FALSE);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


METHODDEF JBLOCKARRAY
access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
		    JDIMENSION start_row, boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for ptr->unitheight rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  /* debugging check */
  if (start_row >= ptr->rows_in_array || ptr->mem_buffer == NULL)
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
      start_row+ptr->unitheight > ptr->cur_start_row+ptr->rows_in_mem) {
    if (! ptr->b_s_open)
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
      do_barray_io(cinfo, ptr, TRUE);
      ptr->dirty = FALSE;
    }
    /* Decide what part of virtual array to access.
     * Algorithm: if target address > current window, assume forward scan,
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
      ptr->cur_start_row = start_row;
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) start_row + (long) ptr->unitheight -
	      (long) ptr->rows_in_mem;
      if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
      ptr->cur_start_row = (JDIMENSION) ltemp;
    }
    /* If reading, read in the selected part of the array. 
     * If we are writing, we need not pre-read the selected portion,
     * since the access sequence constraints ensure it would be garbage.
     */
    if (! writable) {
      do_barray_io(cinfo, ptr, FALSE);
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
    ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}


/*
 * Release all objects belonging to a specified pool.
 */

METHODDEF void
free_pool (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

#ifdef MEM_STATS
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
      if (sptr->b_s_open) {	/* there may be no backing store */
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
      }
    }
    mem->virt_sarray_list = NULL;
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
      if (bptr->b_s_open) {	/* there may be no backing store */
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
      }
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
  mem->large_list[pool_id] = NULL;

  while (lhdr_ptr != NULL) {
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
    space_freed = lhdr_ptr->hdr.bytes_used +
		  lhdr_ptr->hdr.bytes_left +
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
  mem->small_list[pool_id] = NULL;

  while (shdr_ptr != NULL) {
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
    space_freed = shdr_ptr->hdr.bytes_used +
		  shdr_ptr->hdr.bytes_left +
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}


/*
 * Close up shop entirely.
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF void
self_destruct (j_common_ptr cinfo)
{
  int pool;

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
  cinfo->mem = NULL;		/* ensures I will be called only once */

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
}


/*
 * Memory manager initialization.
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL void
jinit_memory_mgr (j_common_ptr cinfo)
{
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */

  /* Check for configuration errors.
   * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
   * doesn't reflect any real hardware alignment requirement.
   * The test is a little tricky: for X>0, X and X-1 have no one-bits
   * in common if and only if X is a power of 2, ie has only one one-bit.
   * Some compilers may give an "unreachable code" warning here; ignore it.
   */
  if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));

  if (mem == NULL) {
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
  mem->pub.alloc_large = alloc_large;
  mem->pub.alloc_sarray = alloc_sarray;
  mem->pub.alloc_barray = alloc_barray;
  mem->pub.request_virt_sarray = request_virt_sarray;
  mem->pub.request_virt_barray = request_virt_barray;
  mem->pub.realize_virt_arrays = realize_virt_arrays;
  mem->pub.access_virt_sarray = access_virt_sarray;
  mem->pub.access_virt_barray = access_virt_barray;
  mem->pub.free_pool = free_pool;
  mem->pub.self_destruct = self_destruct;

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
    mem->large_list[pool] = NULL;
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;

  mem->total_space_allocated = SIZEOF(my_memory_mgr);

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;

  /* Check for an environment variable JPEGMEM; if found, override the
   * default max_memory setting from jpeg_mem_init.  Note that the
   * surrounding application may again override this value.
   * If your system doesn't support getenv(), define NO_GETENV to disable
   * this feature.
   */
#ifndef NO_GETENV
  { char * memenv;

    if ((memenv = getenv("JPEGMEM")) != NULL) {
      char ch = 'x';

      if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
	if (ch == 'm' || ch == 'M')
	  max_to_use *= 1000L;
	mem->pub.max_memory_to_use = max_to_use * 1000L;
      }
    }
  }		
#endif

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jmemnobs.c ===
/*
 * jmemnobs.c
 *
 * Copyright (c) 1994 Paradigm Matrix.
 *  All Rights Reserved.
 *
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"
#include "jmemsys.h"		/* import the system-dependent declarations */

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif

#define WIN32_LEAN_AND_MEAN
#include <windows.h>


/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL void *
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) HeapAlloc(GetProcessHeap(),HEAP_ZERO_MEMORY, sizeofobject);
}

GLOBAL void
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  HeapFree(GetProcessHeap(),0,object);
}


/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL void FAR *
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void FAR *) HeapAlloc(GetProcessHeap(),HEAP_ZERO_MEMORY, sizeofobject);
}

GLOBAL void
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
  HeapFree(GetProcessHeap(),0,object);
}


/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL long
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}


/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */

GLOBAL void
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL long
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL void
jpeg_mem_term (j_common_ptr cinfo)
{
  /* no work */
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jmorecfg.h ===
/*
 * jmorecfg.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains additional configuration options that customize the
 * JPEG software for special applications or support machine-dependent
 * optimizations.  Most users will not need to touch this file.
 */

#ifndef JMORECFG_H_ // added by -anuragsh
#define JMORECFG_H_

#include <windef.h>     // added to include FAR keyword -anuragsh


/*
 * Define BITS_IN_JSAMPLE as either
 *   8   for 8-bit sample values (the usual setting)
 *   12  for 12-bit sample values
 * Only 8 and 12 are legal data precisions for lossy JPEG according to the
 * JPEG standard, and the IJG code does not support anything else!
 * We do not support run-time selection of data precision, sorry.
 */

#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */


/*
 * Maximum number of components (color channels) allowed in JPEG image.
 * To meet the letter of the JPEG spec, set this to 255.  However, darn
 * few applications need more than 4 channels (maybe 5 for CMYK + alpha
 * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
 * really short on memory.  (Each allowed component costs a hundred or so
 * bytes of storage, whether actually used in an image or not.)
 */

#define MAX_COMPONENTS  10	/* maximum number of image components */


/*
 * Basic data types.
 * You may need to change these if you have a machine with unusual data
 * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
 * but it had better be at least 16.
 */

/* Representation of a single sample (pixel element value).
 * We frequently allocate large arrays of these, so it's important to keep
 * them small.  But if you have memory to burn and access to char or short
 * arrays is very slow on your hardware, you might want to change these.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should be the smallest type that will hold the values 0..255.
 * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JSAMPLE;
#ifdef CHAR_IS_UNSIGNED
#define GETJSAMPLE(value)  ((int) (value))
#else
#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */

#define MAXJSAMPLE	255
#define CENTERJSAMPLE	128

#endif /* BITS_IN_JSAMPLE == 8 */


#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should be the smallest type that will hold the values 0..4095.
 * On nearly all machines "short" will do nicely.
 */

typedef short JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#define MAXJSAMPLE	4095
#define CENTERJSAMPLE	2048

#endif /* BITS_IN_JSAMPLE == 12 */


/* Representation of a DCT frequency coefficient.
 * This should be a signed value of at least 16 bits; "short" is usually OK.
 * Again, we allocate large arrays of these, but you can change to int
 * if you have memory to burn and "short" is really slow.
 */

typedef short JCOEF;


/* Compressed datastreams are represented as arrays of JOCTET.
 * These must be EXACTLY 8 bits wide, at least once they are written to
 * external storage.  Note that when using the stdio data source/destination
 * managers, this is also the data type passed to fread/fwrite.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JOCTET;
#define GETJOCTET(value)  (value)

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JOCTET;
#ifdef CHAR_IS_UNSIGNED
#define GETJOCTET(value)  (value)
#else
#define GETJOCTET(value)  ((value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */


/* These typedefs are used for various table entries and so forth.
 * They must be at least as wide as specified; but making them too big
 * won't cost a huge amount of memory, so we don't provide special
 * extraction code like we did for JSAMPLE.  (In other words, these
 * typedefs live at a different point on the speed/space tradeoff curve.)
 */
#ifndef _BASETSD_H_

/* UINT8 must hold at least the values 0..255. */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char UINT8;
#else /* not HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char UINT8;
#else /* not CHAR_IS_UNSIGNED */
typedef short UINT8;
#endif /* CHAR_IS_UNSIGNED */
#endif /* HAVE_UNSIGNED_CHAR */

/* UINT16 must hold at least the values 0..65535. */

#ifdef HAVE_UNSIGNED_SHORT
typedef unsigned short UINT16;
#else /* not HAVE_UNSIGNED_SHORT */
typedef unsigned int UINT16;
#endif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold at least the values -32768..32767. */

#ifndef XMD_H			/* X11/xmd.h correctly defines INT16 */
typedef short INT16;
#endif

/* INT32 must hold at least signed 32-bit values. */

// REDONE: modified to suppress benign warnings on Win32 platform -anuragsh

#ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
// !!! Not right for Win64?
typedef int INT32;
typedef unsigned int UINT32;
#endif
#endif

/* Datatype used for image dimensions.  The JPEG standard only supports
 * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
 * "unsigned int" is sufficient on all machines.  However, if you need to
 * handle larger images and you don't mind deviating from the spec, you
 * can change this datatype.
 */

typedef unsigned int JDIMENSION;

#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */


/* These defines are used in all function definitions and extern declarations.
 * You could modify them if you need to change function linkage conventions.
 * Another application is to make all functions global for use with debuggers
 * or code profilers that require it.
 */

#define METHODDEF  static	    /* a function called through method pointers */
// REDONE: to suppress macro redefinition warning -anuragsh
#define LOCAL	   static NEAR	/* a function used only in its module */

#define GLOBAL			        /* a function referenced thru EXTERNs */
#define EXTERN	  extern	    /* a reference to a GLOBAL function */


/* Here is the pseudo-keyword for declaring pointers that must be "far"
 * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
 * by just saying "FAR *" where such a pointer is needed.  In a few places
 * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
 */

// REDONE: commented out, windef.h already has FAR macros, -anuragsh

//#ifdef NEED_FAR_POINTERS
//#define FAR  far
//#else
//#define FAR
//#endif


/*
 * On a few systems, type boolean and/or its values FALSE, TRUE may appear
 * in standard header files.  Or you may have conflicts with application-
 * specific header files that you want to include together with these files.
 * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
 */

// REDONE: boolean typedef'd as "unsigned char" to suppress redefinition error -anuragsh
#ifndef HAVE_BOOLEAN
typedef unsigned char boolean;
#endif
#ifndef FALSE			/* in case these macros already exist */
#define FALSE	0		/* values of boolean */
#endif
#ifndef TRUE
#define TRUE	1
#endif


/*
 * The remaining options affect code selection within the JPEG library,
 * but they don't need to be visible to most applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
 */

#ifdef JPEG_INTERNALS
#define JPEG_INTERNAL_OPTIONS
#endif

#ifdef JPEG_INTERNAL_OPTIONS


/*
 * These defines indicate whether to include various optional functions.
 * Undefining some of these symbols will produce a smaller but less capable
 * library.  Note that you can leave certain source files out of the
 * compilation/linking process if you've #undef'd the corresponding symbols.
 * (You may HAVE to do that if your compiler doesn't like null source files.)
 */

/* Arithmetic coding is unsupported for legal reasons.  Complaints to IBM. */

/* Capability options common to encoder and decoder: */

#define DCT_ISLOW_SUPPORTED	/* slow but accurate integer algorithm */
#define DCT_IFAST_SUPPORTED	/* faster, less accurate integer method */
#define DCT_FLOAT_SUPPORTED	/* floating-point: accurate, fast on fast HW */

/* Encoder capability options: */

#undef  C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#undef  C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files?  (NYI) */
#define ENTROPY_OPT_SUPPORTED	    /* Optimization of entropy coding parms? */
/* Note: if you selected 12-bit data precision, it is dangerous to turn off
 * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
 * precision, so jchuff.c normally uses entropy optimization to compute
 * usable tables for higher precision.  If you don't want to do optimization,
 * you'll have to supply different default Huffman tables.
 */
#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */

/* Decoder capability options: */

#undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
#define QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
#define QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */

/* more capability options later, no doubt */


/*
 * Ordering of RGB data in scanlines passed to or from the application.
 * If your application wants to deal with data in the order B,G,R, just
 * change these macros.  You can also deal with formats such as R,G,B,X
 * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
 * the offsets will also change the order in which colormap data is organized.
 * RESTRICTIONS:
 * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
 * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
 *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
 * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
 *    is not 3 (they don't understand about dummy color components!).  So you
 *    can't use color quantization if you change that value.
 */

#define RGB_RED		2	/* Offset of Red in an RGB scanline element */
#define RGB_GREEN	1	/* Offset of Green */
#define RGB_BLUE	0	/* Offset of Blue */
#define RGB_PIXELSIZE	3	/* JSAMPLEs per RGB scanline element */


/* Definitions for speed-related optimizations. */


/* If your compiler supports inline functions, define INLINE
 * as the inline keyword; otherwise define it as empty.
 */

#ifndef INLINE
#ifdef __GNUC__			/* for instance, GNU C knows about inline */
#define INLINE __inline__
#endif
#ifndef INLINE
#define INLINE			/* default is to define it as empty */
#endif
#endif


/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
 * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
 * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
 */

#ifndef MULTIPLIER
#define MULTIPLIER  int		/* type for fastest integer multiply */
#endif


/* FAST_FLOAT should be either float or double, whichever is done faster
 * by your compiler.  (Note that this type is only used in the floating point
 * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
 * Typically, float is faster in ANSI C compilers, while double is faster in
 * pre-ANSI compilers (because they insist on converting to double anyway).
 * The code below therefore chooses float if we have ANSI-style prototypes.
 */

#ifndef FAST_FLOAT
#ifdef HAVE_PROTOTYPES
#define FAST_FLOAT  float
#else
#define FAST_FLOAT  double
#endif
#endif

#endif /* JPEG_INTERNAL_OPTIONS */

#endif // #ifndef JMORECFG_H_ // added by -anuragsh
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jmemsys.h ===
/*
 * jmemsys.h
 *
 * Copyright (C) 1992-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This include file defines the interface between the system-independent
 * and system-dependent portions of the JPEG memory manager.  No other
 * modules need include it.  (The system-independent portion is jmemmgr.c;
 * there are several different versions of the system-dependent portion.)
 *
 * This file works as-is for the system-dependent memory managers supplied
 * in the IJG distribution.  You may need to modify it if you write a
 * custom memory manager.  If system-dependent changes are needed in
 * this file, the best method is to #ifdef them based on a configuration
 * symbol supplied in jconfig.h, as we have done with USE_MSDOS_MEMMGR.
 */


/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_get_small		jGetSmall
#define jpeg_free_small		jFreeSmall
#define jpeg_get_large		jGetLarge
#define jpeg_free_large		jFreeLarge
#define jpeg_mem_available	jMemAvail
#define jpeg_open_backing_store	jOpenBackStore
#define jpeg_mem_init		jMemInit
#define jpeg_mem_term		jMemTerm
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/*
 * These two functions are used to allocate and release small chunks of
 * memory.  (Typically the total amount requested through jpeg_get_small is
 * no more than 20K or so; this will be requested in chunks of a few K each.)
 * Behavior should be the same as for the standard library functions malloc
 * and free; in particular, jpeg_get_small must return NULL on failure.
 * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
 * size of the object being freed, just in case it's needed.
 * On an 80x86 machine using small-data memory model, these manage near heap.
 */

EXTERN void * jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
EXTERN void jpeg_free_small JPP((j_common_ptr cinfo, void * object,
				 size_t sizeofobject));

/*
 * These two functions are used to allocate and release large chunks of
 * memory (up to the total free space designated by jpeg_mem_available).
 * The interface is the same as above, except that on an 80x86 machine,
 * far pointers are used.  On most other machines these are identical to
 * the jpeg_get/free_small routines; but we keep them separate anyway,
 * in case a different allocation strategy is desirable for large chunks.
 */

EXTERN void FAR * jpeg_get_large JPP((j_common_ptr cinfo,size_t sizeofobject));
EXTERN void jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
				 size_t sizeofobject));

/*
 * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
 * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
 * matter, but that case should never come into play).  This macro is needed
 * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
 * On those machines, we expect that jconfig.h will provide a proper value.
 * On machines with 32-bit flat address spaces, any large constant may be used.
 *
 * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
 * size_t and will be a multiple of sizeof(align_type).
 */

#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
#define MAX_ALLOC_CHUNK  1000000000L
#endif

/*
 * This routine computes the total space still available for allocation by
 * jpeg_get_large.  If more space than this is needed, backing store will be
 * used.  NOTE: any memory already allocated must not be counted.
 *
 * There is a minimum space requirement, corresponding to the minimum
 * feasible buffer sizes; jmemmgr.c will request that much space even if
 * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
 * all working storage in memory, is also passed in case it is useful.
 * Finally, the total space already allocated is passed.  If no better
 * method is available, cinfo->mem->max_memory_to_use - already_allocated
 * is often a suitable calculation.
 *
 * It is OK for jpeg_mem_available to underestimate the space available
 * (that'll just lead to more backing-store access than is really necessary).
 * However, an overestimate will lead to failure.  Hence it's wise to subtract
 * a slop factor from the true available space.  5% should be enough.
 *
 * On machines with lots of virtual memory, any large constant may be returned.
 * Conversely, zero may be returned to always use the minimum amount of memory.
 */

EXTERN long jpeg_mem_available JPP((j_common_ptr cinfo,
				    long min_bytes_needed,
				    long max_bytes_needed,
				    long already_allocated));


/*
 * This structure holds whatever state is needed to access a single
 * backing-store object.  The read/write/close method pointers are called
 * by jmemmgr.c to manipulate the backing-store object; all other fields
 * are private to the system-dependent backing store routines.
 */

#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */

#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */

typedef unsigned short XMSH;	/* type of extended-memory handles */
typedef unsigned short EMSH;	/* type of expanded-memory handles */

typedef union {
  short file_handle;		/* DOS file handle if it's a temp file */
  XMSH xms_handle;		/* handle if it's a chunk of XMS */
  EMSH ems_handle;		/* handle if it's a chunk of EMS */
} handle_union;

#endif /* USE_MSDOS_MEMMGR */

typedef struct backing_store_struct * backing_store_ptr;

typedef struct backing_store_struct {
  /* Methods for reading/writing/closing this backing-store object */
  JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
				     backing_store_ptr info,
				     void FAR * buffer_address,
				     long file_offset, long byte_count));
  JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info,
				      void FAR * buffer_address,
				      long file_offset, long byte_count));
  JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
				      backing_store_ptr info));

  /* Private fields for system-dependent backing-store management */
#ifdef USE_MSDOS_MEMMGR
  /* For the MS-DOS manager (jmemdos.c), we need: */
  handle_union handle;		/* reference to backing-store storage object */
  char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
#else
  /* For a typical implementation with temp files, we need: */
  FILE * temp_file;		/* stdio reference to temp file */
  char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
#endif
} backing_store_info;

/*
 * Initial opening of a backing-store object.  This must fill in the
 * read/write/close pointers in the object.  The read/write routines
 * may take an error exit if the specified maximum file size is exceeded.
 * (If jpeg_mem_available always returns a large value, this routine can
 * just take an error exit.)
 */

EXTERN void jpeg_open_backing_store JPP((j_common_ptr cinfo,
					 backing_store_ptr info,
					 long total_bytes_needed));


/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  jpeg_mem_init will be called before anything is
 * allocated (and, therefore, nothing in cinfo is of use except the error
 * manager pointer).  It should return a suitable default value for
 * max_memory_to_use; this may subsequently be overridden by the surrounding
 * application.  (Note that max_memory_to_use is only important if
 * jpeg_mem_available chooses to consult it ... no one else will.)
 * jpeg_mem_term may assume that all requested memory has been freed and that
 * all opened backing-store objects have been closed.
 */

EXTERN long jpeg_mem_init JPP((j_common_ptr cinfo));
EXTERN void jpeg_mem_term JPP((j_common_ptr cinfo));
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jpegint.h ===
/*
 * jpegint.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file provides common declarations for the various JPEG modules.
 * These declarations are considered internal to the JPEG library; most
 * applications using the library shouldn't need to include this file.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *   All Rights Reserved.
 */


/* Declarations for both compression & decompression */

typedef enum {			/* Operating modes for buffer controllers */
	JBUF_PASS_THRU,		/* Plain stripwise operation */
	JBUF_CRANK_SOURCE,	/* Run source subobject, no output expected */
	/* Remaining modes require a full-image buffer to have been created */
	JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
	JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
	JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
} J_BUF_MODE;

/* Values of global_state field */
#define CSTATE_START	100	/* after create_compress */
#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
#define DSTATE_START	200	/* after create_decompress */
#define DSTATE_INHEADER	201	/* read_header initialized but not done */
#define DSTATE_READY	202	/* read_header done, found image */
#define DSTATE_SCANNING	203	/* start_decompress done, read_scanlines OK */
#define DSTATE_RAW_OK	204	/* start_decompress done, read_raw_data OK */
#define DSTATE_STOPPING	205	/* done reading data, looking for EOI */


/* Declarations for compression modules */

/* Master control module */
struct jpeg_comp_master {
  JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
  JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean call_pass_startup;	/* True if pass_startup must be called */
  boolean is_last_pass;		/* True during last pass */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_c_main_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_compress_ptr cinfo,
			       JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			       JDIMENSION in_rows_avail));
};

/* Compression preprocessing (downsampling input buffer control) */
struct jpeg_c_prep_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
				   JSAMPARRAY input_buf,
				   JDIMENSION *in_row_ctr,
				   JDIMENSION in_rows_avail,
				   JSAMPIMAGE output_buf,
				   JDIMENSION *out_row_group_ctr,
				   JDIMENSION out_row_groups_avail));
};

/* Coefficient buffer control */
struct jpeg_c_coef_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, compress_data, (j_compress_ptr cinfo,
				JSAMPIMAGE input_buf,
				JDIMENSION *in_mcu_ctr));
};

/* Colorspace conversion */
struct jpeg_color_converter {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, color_convert, (j_compress_ptr cinfo,
				JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
				JDIMENSION output_row, int num_rows));
};

/* Downsampling */
struct jpeg_downsampler {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, downsample, (j_compress_ptr cinfo,
			     JSAMPIMAGE input_buf, JDIMENSION in_row_index,
			     JSAMPIMAGE output_buf,
			     JDIMENSION out_row_group_index));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Forward DCT (also controls coefficient quantization) */
struct jpeg_forward_dct {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  /* perhaps this should be an array??? */
  JMETHOD(void, forward_DCT, (j_compress_ptr cinfo,
			      jpeg_component_info * compptr,
			      JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
			      JDIMENSION start_row, JDIMENSION start_col,
			      JDIMENSION num_blocks));
};

/* Entropy encoding */
struct jpeg_entropy_encoder {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
  JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
};

/* Marker writing */
struct jpeg_marker_writer {
  /* write_any_marker is exported for use by applications */
  /* Probably only COM and APPn markers should be written */
  JMETHOD(void, write_any_marker, (j_compress_ptr cinfo, int marker,
				   const JOCTET *dataptr, unsigned int datalen));
  JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
  JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
};


/* Declarations for decompression modules */

/* Master control module */
struct jpeg_decomp_master {
  JMETHOD(void, prepare_for_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean is_last_pass;		/* True during last pass */
  boolean eoi_processed;	/* True if EOI marker already read */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_d_main_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_decompress_ptr cinfo,
			       JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			       JDIMENSION out_rows_avail));
  /* During input-only passes, output_buf and out_rows_avail are ignored.
   * out_row_ctr is incremented towards the limit num_chunks.
   */
  JDIMENSION num_chunks;	/* number of chunks to be processed in pass */
};

/* Coefficient buffer control */
struct jpeg_d_coef_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(boolean, decompress_data, (j_decompress_ptr cinfo,
				     JSAMPIMAGE output_buf));
};

/* Decompression postprocessing (color quantization buffer control) */
struct jpeg_d_post_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
				    JSAMPIMAGE input_buf,
				    JDIMENSION *in_row_group_ctr,
				    JDIMENSION in_row_groups_avail,
				    JSAMPARRAY output_buf,
				    JDIMENSION *out_row_ctr,
				    JDIMENSION out_rows_avail));
};

/* Marker reading & parsing */
struct jpeg_marker_reader {
  JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
  /* Read markers until SOS or EOI.
   * Returns same codes as are defined for jpeg_read_header,
   * but HEADER_OK and HEADER_TABLES_ONLY merely indicate which marker type
   * stopped the scan --- further validation is needed to declare file OK.
   */
  JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
  /* Read a restart marker --- exported for use by entropy decoder only */
  jpeg_marker_parser_method read_restart_marker;
  /* Application-overridable marker processing methods */
  jpeg_marker_parser_method process_COM;
  jpeg_marker_parser_method process_APPn[16];

  /* State of marker reader --- nominally internal, but applications
   * supplying COM or APPn handlers might like to know the state.
   */
  boolean saw_SOI;		/* found SOI? */
  boolean saw_SOF;		/* found SOF? */
  int next_restart_num;		/* next restart number expected (0-7) */
  unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
};

/* Entropy decoding */
struct jpeg_entropy_decoder {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(boolean, decode_mcu, (j_decompress_ptr cinfo,
				JBLOCKROW *MCU_data));
};

/* Inverse DCT (also performs dequantization) */
typedef JMETHOD(void, inverse_DCT_method_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col));

struct jpeg_inverse_dct {
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
  /* It is useful to allow each component to have a separate IDCT method. */
  inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
};

/* Upsampling (note that upsampler must also call color converter) */
struct jpeg_upsampler {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, upsample, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf,
			   JDIMENSION *in_row_group_ctr,
			   JDIMENSION in_row_groups_avail,
			   JSAMPARRAY output_buf,
			   JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Colorspace conversion */
struct jpeg_color_deconverter {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
				JSAMPIMAGE input_buf, JDIMENSION input_row,
				JSAMPARRAY output_buf, int num_rows));
};

/* Color quantization or color precision reduction */
struct jpeg_color_quantizer {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
  JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
				 JSAMPARRAY input_buf, JSAMPARRAY output_buf,
				 int num_rows));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
};


/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)	((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)	((a) < (b) ? (a) : (b))


/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS	INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
	((shift_temp = (x)) < 0 ? \
	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
	 (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#define DIB_TEMPS \
  register UINT8 pixel_size;			/* number of bytes per pixel, 2,3,4 */ \
  register UINT32 pixel_mask;			/* for clearing empty byte of 32-bit pixels */ \
  register UINT32 * red_table; \
  register UINT32 * green_table; \
  register UINT32 * blue_table;

#define DIB_PARM_LOAD \
  /* put these someplace faster */ \
  /* REDONE: modified to suppress type-check warning -anuragsh */ \
  pixel_size = (UINT8) cinfo->pixel_size; \
  pixel_mask = cinfo->pixel_mask; \
  red_table = cinfo->red_table; \
  green_table = cinfo->green_table; \
  blue_table = cinfo->blue_table;

#define PUT_DIB(outptr,r,g,b) \
      *((UINT32 *)outptr) = \
        red_table[(r)] | \
        green_table[(g)] | \
        blue_table[(b)] | \
        (*((UINT32 *)outptr) & pixel_mask); /* get the pixel */ \
	  outptr += pixel_size

/* we use to following on the last column to prevent overstepping non-existing memory */
#define PUT_DIB_CAREFULLY(outptr,r,g,b) \
{ UINT32 pixel; \
      pixel = red_table[(r)];\
      pixel |= (green_table[(g)] | blue_table[(b)]); \
	  *((UINT16*)outptr) = (UINT16) pixel; \
	  outptr += 2; \
	  switch (pixel_size) { \
		case 2: \
		  break; \
		case 3: \
		  *((UINT8*)outptr) = (UINT8)(pixel >> 16); \
		  outptr += 1; \
		  break; \
		case 4: \
		  *((UINT16*)outptr) = (UINT16)(pixel >> 16); \
		  outptr += 2; \
		  break; \
		} \
	  }




/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jinit_master_compress	jICMaster
#define jinit_c_main_controller	jICMainC
#define jinit_c_prep_controller	jICPrepC
#define jinit_c_coef_controller	jICCoefC
#define jinit_color_converter	jICColor
#define jinit_downsampler	jIDownsampler
#define jinit_forward_dct	jIFDCT
#define jinit_huff_encoder	jIHEncoder
#define jinit_marker_writer	jIMWriter
#define jinit_master_decompress	jIDMaster
#define jinit_d_main_controller	jIDMainC
#define jinit_d_coef_controller	jIDCoefC
#define jinit_d_post_controller	jIDPostC
#define jinit_marker_reader	jIMReader
#define jinit_huff_decoder	jIHDecoder
#define jinit_inverse_dct	jIIDCT
#define jinit_upsampler		jIUpsampler
#define jinit_color_deconverter	jIDColor
#define jinit_1pass_quantizer	jI1Quant
#define jinit_2pass_quantizer	jI2Quant
#define jinit_merged_upsampler	jIMUpsampler
#define jinit_memory_mgr	jIMemMgr
#define jdiv_round_up		jDivRound
#define jround_up		jRound
#define jcopy_sample_rows	jCopySamples
#define jcopy_block_row		jCopyBlocks
#define jzero_far		jZeroFar
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Compression module initialization routines */
EXTERN void jinit_master_compress JPP((j_compress_ptr cinfo));
EXTERN void jinit_c_main_controller JPP((j_compress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_c_prep_controller JPP((j_compress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_c_coef_controller JPP((j_compress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_color_converter JPP((j_compress_ptr cinfo));
EXTERN void jinit_downsampler JPP((j_compress_ptr cinfo));
EXTERN void jinit_forward_dct JPP((j_compress_ptr cinfo));
EXTERN void jinit_huff_encoder JPP((j_compress_ptr cinfo));
EXTERN void jinit_marker_writer JPP((j_compress_ptr cinfo));
/* Decompression module initialization routines */
EXTERN void jinit_master_decompress JPP((j_decompress_ptr cinfo));
EXTERN void jinit_d_main_controller JPP((j_decompress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_d_post_controller JPP((j_decompress_ptr cinfo,
					 boolean need_full_buffer));
EXTERN void jinit_marker_reader JPP((j_decompress_ptr cinfo));
EXTERN void jinit_huff_decoder JPP((j_decompress_ptr cinfo));
EXTERN void jinit_inverse_dct JPP((j_decompress_ptr cinfo));
EXTERN void jinit_upsampler JPP((j_decompress_ptr cinfo));
EXTERN void jinit_color_deconverter JPP((j_decompress_ptr cinfo));
EXTERN void jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN void jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN void jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
/* Memory manager initialization */
EXTERN void jinit_memory_mgr JPP((j_common_ptr cinfo));

/* Utility routines in jutils.c */
EXTERN long jdiv_round_up JPP((long a, long b));
EXTERN long jround_up JPP((long a, long b));
EXTERN void jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
				   JSAMPARRAY output_array, int dest_row,
				   int num_rows, JDIMENSION num_cols));
EXTERN void jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
				 JDIMENSION num_blocks));
EXTERN void jzero_far JPP((void FAR * target, size_t bytestozero));


/* Suppress undefined-structure complaints if necessary. */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
#endif
#endif /* INCOMPLETE_TYPES_BROKEN */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jquant1.c ===
/*
 * jquant1.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 1-pass color quantization (color mapping) routines.
 * These routines provide mapping to a fixed color map using equally spaced
 * color values.  Optional Floyd-Steinberg or ordered dithering is available.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef QUANT_1PASS_SUPPORTED


/*
 * The main purpose of 1-pass quantization is to provide a fast, if not very
 * high quality, colormapped output capability.  A 2-pass quantizer usually
 * gives better visual quality; however, for quantized grayscale output this
 * quantizer is perfectly adequate.  Dithering is highly recommended with this
 * quantizer, though you can turn it off if you really want to.
 *
 * In 1-pass quantization the colormap must be chosen in advance of seeing the
 * image.  We use a map consisting of all combinations of Ncolors[i] color
 * values for the i'th component.  The Ncolors[] values are chosen so that
 * their product, the total number of colors, is no more than that requested.
 * (In most cases, the product will be somewhat less.)
 *
 * Since the colormap is orthogonal, the representative value for each color
 * component can be determined without considering the other components;
 * then these indexes can be combined into a colormap index by a standard
 * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
 * can be precalculated and stored in the lookup table colorindex[].
 * colorindex[i][j] maps pixel value j in component i to the nearest
 * representative value (grid plane) for that component; this index is
 * multiplied by the array stride for component i, so that the
 * index of the colormap entry closest to a given pixel value is just
 *    sum( colorindex[component-number][pixel-component-value] )
 * Aside from being fast, this scheme allows for variable spacing between
 * representative values with no additional lookup cost.
 *
 * If gamma correction has been applied in color conversion, it might be wise
 * to adjust the color grid spacing so that the representative colors are
 * equidistant in linear space.  At this writing, gamma correction is not
 * implemented by jdcolor, so nothing is done here.
 */


/* Declarations for ordered dithering.
 *
 * We use a standard 4x4 ordered dither array.  The basic concept of ordered
 * dithering is described in many references, for instance Dale Schumacher's
 * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
 * In place of Schumacher's comparisons against a "threshold" value, we add a
 * "dither" value to the input pixel and then round the result to the nearest
 * output value.  The dither value is equivalent to (0.5 - threshold) times
 * the distance between output values.  For ordered dithering, we assume that
 * the output colors are equally spaced; if not, results will probably be
 * worse, since the dither may be too much or too little at a given point.
 *
 * The normal calculation would be to form pixel value + dither, range-limit
 * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
 * We can skip the separate range-limiting step by extending the colorindex
 * table in both directions.
 */

#define ODITHER_SIZE  4		/* dimension of dither matrix */
#define ODITHER_CELLS (4*4)	/* number of cells in dither matrix */
#define ODITHER_MASK  3		/* mask for wrapping around dither counters */

typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array is indexed [component#][position].
 * We provide (#columns + 2) entries per component; the extra entry at each
 * end saves us from special-casing the first and last pixels.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

#define MAX_Q_COMPS 4		/* max components I can handle */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
  /* colorindex[i][j] = index of color closest to pixel value j in component i,
   * premultiplied as described above.  Since colormap indexes must fit into
   * JSAMPLEs, the entries of this array will too.
   */

  /* Variables for ordered dithering */
  int row_index;		/* cur row's vertical index in dither matrix */
  ODITHER_MATRIX *odither;	/* one dither array per component */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Policy-making subroutines for create_colormap: these routines determine
 * the colormap to be used.  The rest of the module only assumes that the
 * colormap is orthogonal.
 *
 *  * select_ncolors decides how to divvy up the available colors
 *    among the components.
 *  * output_value defines the set of representative values for a component.
 *  * largest_input_value defines the mapping from input values to
 *    representative values for a component.
 * Note that the latter two routines may impose different policies for
 * different components, though this is not currently done.
 */


LOCAL int
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
  int nc = cinfo->out_color_components; /* number of color components */
  int max_colors = cinfo->desired_number_of_colors;
  int total_colors, iroot, i, j;
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
  do {
    iroot++;
    temp = iroot;		/* set temp = iroot ** nc */
    for (i = 1; i < nc; i++)
      temp *= iroot;
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
  iroot--;			/* now iroot = floor(root) */

  /* Must have at least 2 color values per component */
  if (iroot < 2)
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

  /* Initialize to iroot color values for each component */
  total_colors = 1;
  for (i = 0; i < nc; i++) {
    Ncolors[i] = iroot;
    total_colors *= iroot;
  }
  /* We may be able to increment the count for one or more components without
   * exceeding max_colors, though we know not all can be incremented.
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  for (i = 0; i < nc; i++) {
    j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
    /* calculate new total_colors if Ncolors[j] is incremented */
    temp = total_colors / Ncolors[j];
    temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
    if (temp > (long) max_colors)
      break;			/* won't fit, done */
    Ncolors[j]++;		/* OK, apply the increment */
    total_colors = (int) temp;
  }

  return total_colors;
}


LOCAL int
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
}


LOCAL int
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
}


/*
 * Create the colormap and color index table.
 * Also creates the ordered-dither tables, if required.
 */

LOCAL void
create_colormap (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colormap;		/* Created colormap */
  JSAMPROW indexptr;
  int total_colors;		/* Number of distinct output colors */
  int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */
  ODITHER_MATRIX *odither;
  int i,j,k, nci, blksize, blkdist, ptr, val, pad;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, Ncolors);

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
	     total_colors, Ncolors[0], Ncolors[1], Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);

  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.
   */
  pad = (cinfo->dither_mode == JDITHER_ORDERED) ? MAXJSAMPLE*2 : 0;

  /* Allocate and fill in the colormap and color index. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;

  for (i = 0; i < cinfo->out_color_components; i++) {
    /* fill in colormap entries for i'th color component */
    nci = Ncolors[i];		/* # of distinct values for this color */
    blksize = blkdist / nci;
    for (j = 0; j < nci; j++) {
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
	  colormap[i][ptr+k] = (JSAMPLE) val;
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
      cquantize->colorindex[i] += MAXJSAMPLE;

    /* fill in colorindex entries for i'th color component */
    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
    val = 0;
    k = largest_input_value(cinfo, i, 0, nci-1);
    for (j = 0; j <= MAXJSAMPLE; j++) {
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
    }
    /* Pad at both ends if necessary */
    if (pad)
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }

  /* Make the colormap available to the application. */
  cinfo->colormap = colormap;
  cinfo->actual_number_of_colors = total_colors;

  if (cinfo->dither_mode == JDITHER_ORDERED) {
    /* Allocate and fill in the ordered-dither tables. */
    odither = (ODITHER_MATRIX *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
			cinfo->out_color_components * SIZEOF(ODITHER_MATRIX));
    cquantize->odither = odither;
    for (i = 0; i < cinfo->out_color_components; i++) {
      nci = Ncolors[i];		/* # of distinct values for this color */
      /* The inter-value distance for this color is MAXJSAMPLE/(nci-1).
       * Hence the dither value for the matrix cell with fill order j
       * (j=1..N) should be (N+1-2*j)/(2*(N+1)) * MAXJSAMPLE/(nci-1).
       */
      val = 2 * (ODITHER_CELLS + 1) * (nci - 1); /* denominator */
      /* Macro is coded to ensure round towards zero despite C's
       * lack of consistency in integer division...
       */
#define ODITHER_DIV(num,den)  ((num)<0 ? -((-(num))/(den)) : (num)/(den))
#define ODITHER_VAL(j)  ODITHER_DIV((ODITHER_CELLS+1-2*j)*MAXJSAMPLE, val)
      /* Traditional fill order for 4x4 dither; see Schumacher's figure 4. */
      odither[0][0][0] = ODITHER_VAL(1);
      odither[0][0][1] = ODITHER_VAL(9);
      odither[0][0][2] = ODITHER_VAL(3);
      odither[0][0][3] = ODITHER_VAL(11);
      odither[0][1][0] = ODITHER_VAL(13);
      odither[0][1][1] = ODITHER_VAL(5);
      odither[0][1][2] = ODITHER_VAL(15);
      odither[0][1][3] = ODITHER_VAL(7);
      odither[0][2][0] = ODITHER_VAL(4);
      odither[0][2][1] = ODITHER_VAL(12);
      odither[0][2][2] = ODITHER_VAL(2);
      odither[0][2][3] = ODITHER_VAL(10);
      odither[0][3][0] = ODITHER_VAL(16);
      odither[0][3][1] = ODITHER_VAL(8);
      odither[0][3][2] = ODITHER_VAL(14);
      odither[0][3][3] = ODITHER_VAL(6);
      odither++;		/* advance to next matrix */
    }
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF void
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colorindex = cquantize->colorindex;
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode = 0;
      for (ci = 0; ci < nc; ci++) {
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF void
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptrin = input_buf[row];
    ptrout = output_buf[row];
    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}


METHODDEF void
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      colorindex_ci = cquantize->colorindex[ci];
      dither = cquantize->odither[ci][row_index];
      col_index = 0;

      for (col = width; col > 0; col--) {
	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
	 * select output value, accumulate into output code for this pixel.
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
	input_ptr += nc;
	output_ptr++;
	col_index = (col_index + 1) & ODITHER_MASK;
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF void
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int * dither0;		/* points to active row of dither matrix */
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    row_index = cquantize->row_index;
    input_ptr = input_buf[row];
    output_ptr = output_buf[row];
    dither0 = cquantize->odither[0][row_index];
    dither1 = cquantize->odither[1][row_index];
    dither2 = cquantize->odither[2][row_index];
    col_index = 0;

    for (col = width; col > 0; col--) {
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}


METHODDEF void
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register LOCFSERROR cur;	/* current error or pixel value */
  LOCFSERROR belowerr;		/* error for pixel below cur */
  LOCFSERROR bpreverr;		/* error for below/prev col */
  LOCFSERROR bnexterr;		/* error for below/next col */
  LOCFSERROR delta;
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    /* Initialize output values to 0 so can process components separately */
    jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
      input_ptr = input_buf[row] + ci;
      output_ptr = output_buf[row];
      if (cquantize->on_odd_row) {
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
	output_ptr += width-1;
	dir = -1;
	dirnc = -nc;
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
      } else {
	/* work left to right in this row */
	dir = 1;
	dirnc = nc;
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
      }
      colorindex_ci = cquantize->colorindex[ci];
      colormap_ci = cinfo->colormap[ci];
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;

      for (col = width; col > 0; col--) {
	/* cur holds the error propagated from the previous pixel on the
	 * current line.  Add the error propagated from the previous line
	 * to form the complete error correction term for this pixel, and
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
	cur = GETJSAMPLE(range_limit[cur]);
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
	*output_ptr += (JSAMPLE) pixcode;
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
	delta = cur * 2;
	cur += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr + cur);
	cur += delta;		/* form error * 5 */
	bpreverr = belowerr + cur;
	belowerr = bnexterr;
	cur += delta;		/* form error * 7 */
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
	output_ptr += dir;	/* advance output ptr to next column */
	errorptr += dir;	/* advance errorptr to current column */
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
  }
}


/*
 * Initialize for one-pass color quantization.
 */

METHODDEF void
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  /* no work in 1-pass case */
}


/*
 * Finish up at the end of the pass.
 */

METHODDEF void
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}


/*
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL void
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;
  size_t arraysize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
  cquantize->pub.finish_pass = finish_pass_1_quant;

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = color_quantize3;
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
      cquantize->pub.color_quantize = quantize3_ord_dither;
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
    cquantize->row_index = 0;	/* initialize state for ordered dither */
    break;
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
    /* Allocate Floyd-Steinberg workspace if necessary. */
    /* We do this now since it is FAR storage and may affect the memory */
    /* manager's space calculations. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
    for (i = 0; i < cinfo->out_color_components; i++) {
      cquantize->fserrors[i] = (FSERRPTR) (*cinfo->mem->alloc_large)
	((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
      /* Initialize the propagated errors to zero. */
      jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
    }
    break;
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
    break;
  }

  /* Create the colormap. */
  create_colormap(cinfo);
}

#endif /* QUANT_1PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jpeglib.h ===
/*
 * jpeglib.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file defines the application interface for the JPEG library.
 * Most applications using the library need only include this file,
 * and perhaps jerror.h if they want to know the exact error codes.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *   All Rights Reserved.
 */

/*
 * First we include the configuration files that record how this
 * installation of the JPEG library is set up.  jconfig.h can be
 * generated automatically for many systems.  jmorecfg.h contains
 * manual configuration options that most people need not worry about.
 */

#ifndef JPEGLIB_H_
#define JPEGLIB_H_

#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
#include "jconfig.h"		/* widely used configuration options */
#endif
#include "jmorecfg.h"		/* seldom changed options */


/* Version ID for the JPEG library.
 * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
 */

#define JPEG_LIB_VERSION  50	/* Version 5.0 */


/* Constants defining exception that MJPEG can throw */
// this is unique such that it's not something that the standard winnt structured exception-handling will throw
#define MJPEG_ERROREXIT_EXCEPTION   0xFF00FF

/* Various constants determining the sizes of things.
 * All of these are specified by the JPEG standard, so don't change them
 * if you want to be compatible.
 */

#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
#define MAX_BLOCKS_IN_MCU   10	/* JPEG limit on # of blocks in an MCU */


/* This macro is used to declare a "method", that is, a function pointer.
 * We want to supply prototype parameters if the compiler can cope.
 * Note that the arglist parameter must be parenthesized!
 */

#ifdef HAVE_PROTOTYPES
#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
#else
#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
#endif


/* Data structures for images (arrays of samples and of DCT coefficients).
 * On 80x86 machines, the image arrays are too big for near pointers,
 * but the pointer arrays can fit in near memory.
 */

typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */

typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */

typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */


/* Types for JPEG compression parameters and working tables. */


/* DCT coefficient quantization tables. */

typedef struct {
  /* This field directly represents the contents of a JPEG DQT marker.
   * Note: the values are always given in zigzag order.
   */
  UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JQUANT_TBL;


/* Huffman coding tables. */

typedef struct {
  /* These two fields directly represent the contents of a JPEG DHT marker */
  UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
				/* length k bits; bits[0] is unused */
  UINT8 huffval[256];		/* The symbols, in order of incr code length */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JHUFF_TBL;


/* Basic info about one component (color channel). */

typedef struct {
  /* These values are fixed over the whole image. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOF marker. */
  int component_id;		/* identifier for this component (0..255) */
  int component_index;		/* its index in SOF or cinfo->comp_info[] */
  int h_samp_factor;		/* horizontal sampling factor (1..4) */
  int v_samp_factor;		/* vertical sampling factor (1..4) */
  int quant_tbl_no;		/* quantization table selector (0..3) */
  /* These values may vary between scans. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOS marker. */
  int dc_tbl_no;		/* DC entropy table selector (0..3) */
  int ac_tbl_no;		/* AC entropy table selector (0..3) */
  
  /* Remaining fields should be treated as private by applications. */
  
  /* These values are computed during compression or decompression startup: */
  /* Component's size in DCT blocks.
   * Any dummy blocks added to complete an MCU are not counted; therefore
   * these values do not depend on whether a scan is interleaved or not.
   */
  JDIMENSION width_in_blocks;
  JDIMENSION height_in_blocks;
  /* Size of a DCT block in samples.  Always DCTSIZE for compression.
   * For decompression this is the size of the output from one DCT block,
   * reflecting any scaling we choose to apply during the IDCT step.
   * Values of 1,2,4,8 are likely to be supported.  Note that different
   * components may receive different IDCT scalings.
   */
  int DCT_scaled_size;
  /* The downsampled dimensions are the component's actual, unpadded number
   * of samples at the main buffer (preprocessing/compression interface), thus
   * downsampled_width = ceil(image_width * Hi/Hmax)
   * and similarly for height.  For decompression, IDCT scaling is included, so
   * downsampled_width = ceil(image_width * Hi/Hmax * DCT_scaled_size/DCTSIZE)
   */
  JDIMENSION downsampled_width;	 /* actual width in samples */
  JDIMENSION downsampled_height; /* actual height in samples */
  /* This flag is used only for decompression.  In cases where some of the
   * components will be ignored (eg grayscale output from YCbCr image),
   * we can skip most computations for the unused components.
   */
  boolean component_needed;	/* do we need the value of this component? */

  /* These values are computed before starting a scan of the component: */
  int MCU_width;		/* number of blocks per MCU, horizontally */
  int MCU_height;		/* number of blocks per MCU, vertically */
  int MCU_blocks;		/* MCU_width * MCU_height */
  int MCU_sample_width;		/* MCU width in samples, MCU_width*DCT_scaled_size */
  int last_col_width;		/* # of non-dummy blocks across in last MCU */
  int last_row_height;		/* # of non-dummy blocks down in last MCU */

  /* Private per-component storage for DCT or IDCT subsystem. */
  void * dct_table;
} jpeg_component_info;


/* Known color spaces. */

typedef enum {
	JCS_UNKNOWN,		/* error/unspecified */
	JCS_GRAYSCALE,		/* monochrome */
	JCS_RGB,		/* red/green/blue */
	JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
	JCS_CMYK,		/* C/M/Y/K */
	JCS_YCCK		/* Y/Cb/Cr/K */
} J_COLOR_SPACE;

/* DCT/IDCT algorithm options. */

typedef enum {
	JDCT_ISLOW,		/* slow but accurate integer algorithm */
	JDCT_IFAST,		/* faster, less accurate integer method */
	JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
} J_DCT_METHOD;

#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
#define JDCT_DEFAULT  JDCT_ISLOW
#endif
#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
#define JDCT_FASTEST  JDCT_IFAST
#endif

/* Dithering options for decompression. */

typedef enum {
	JDITHER_NONE,		/* no dithering */
	JDITHER_ORDERED,	/* simple ordered dither */
	JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
} J_DITHER_MODE;


/* Common fields between JPEG compression and decompression master structs. */

#define jpeg_common_fields \
  struct jpeg_error_mgr * err;	/* Error handler module */\
  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
  boolean is_decompressor;	/* so common code can tell which is which */\
  int global_state		/* for checking call sequence validity */

/* Routines that are to be used by both halves of the library are declared
 * to receive a pointer to this structure.  There are no actual instances of
 * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
 */
struct jpeg_common_struct {
  jpeg_common_fields;		/* Fields common to both master struct types */
  /* Additional fields follow in an actual jpeg_compress_struct or
   * jpeg_decompress_struct.  All three structs must agree on these
   * initial fields!  (This would be a lot cleaner in C++.)
   */
};


typedef struct jpeg_common_struct * j_common_ptr;
typedef struct jpeg_compress_struct * j_compress_ptr;
typedef struct jpeg_decompress_struct * j_decompress_ptr;


/* Master record for a compression instance */

struct jpeg_compress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */

  /* Destination for compressed data */
  struct jpeg_destination_mgr * dest;

  /* Description of source image --- these fields must be filled in by
   * outer application before starting compression.  in_color_space must
   * be correct before you can even call jpeg_set_defaults().
   */

  JDIMENSION image_width;	/* input image width */
  JDIMENSION image_height;	/* input image height */
  int input_components;		/* # of color components in input image */
  J_COLOR_SPACE in_color_space;	/* colorspace of input image */

  int pixel_size;			/* number of bytes per pixel, 2,3,4 */
  UINT32 pixel_mask;		/* for clearing empty byte of 32-bit pixels */
  UINT32 red_pixel_mask;
  int red_pixel_shift;
  UINT32 green_pixel_mask;
  int green_pixel_shift;
  UINT32 blue_pixel_mask;
  int blue_pixel_shift;

  double input_gamma;		/* image gamma of input image */

  /* Compression parameters --- these fields must be set before calling
   * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
   * initialize everything to reasonable defaults, then changing anything
   * the application specifically wants to change.  That way you won't get
   * burnt when new parameters are added.  Also note that there are several
   * helper routines to simplify changing parameters.
   */

  int data_precision;		/* bits of precision in image data */

  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */
  
  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */
  
  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */
  
  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
  boolean interleave;		/* TRUE=interleaved output, FALSE=not */
  boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
  int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
  J_DCT_METHOD dct_method;	/* DCT algorithm selector */

  /* The restart interval can be specified in absolute MCUs by setting
   * restart_interval, or in MCU rows by setting restart_in_rows
   * (in which case the correct restart_interval will be figured
   * for each scan).
   */
  unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
  int restart_in_rows;		/* if > 0, MCU rows per restart interval */

  /* Parameters controlling emission of special markers. */

  boolean write_JFIF_header;	/* should a JFIF marker be written? */
  /* These three values are not used by the JPEG code, merely copied */
  /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
  /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
  /* ratio is defined by X_density/Y_density even when density_unit=0. */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean write_Adobe_marker;	/* should an Adobe marker be written? */
  boolean write_AVI1_marker;    /* write marker as defined by AVI MJPEG spec */
  UINT8 AVI1_field_id;				/* 0 for non-interlaced, 1 for odd frame, 2 for even frame */

  UINT8 * app0_marker_size_ptr;
  UINT8 * soi_ptr;					/* used to measure field and set app0 size values */

  /* State variable: index of next scanline to be written to
   * jpeg_write_scanlines().  Application may use this to control its
   * processing loop, e.g., "while (next_scanline < image_height)".
   */

  JDIMENSION next_scanline;	/* 0 .. image_height-1  */

  /* Remaining fields are known throughout compressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during compression startup
   */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
  /* The coefficient controller receives data in units of MCU rows as defined
   * for fully interleaved scans (whether the JPEG file is interleaved or not).
   * There are v_samp_factor * DCTSIZE sample rows of each component in an
   * "iMCU" (interleaved MCU) row.
   */
  
  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */
  
  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */
  
  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  /*
   * Links to compression subobjects (methods and private variables of modules)
   */
  struct jpeg_comp_master * master;
  struct jpeg_c_main_controller * main;
  struct jpeg_c_prep_controller * prep;
  struct jpeg_c_coef_controller * coef;
  struct jpeg_marker_writer * marker;
  struct jpeg_color_converter * cconvert;
  struct jpeg_downsampler * downsample;
  struct jpeg_forward_dct * fdct;
  struct jpeg_entropy_encoder * entropy;
};


/* Master record for a decompression instance */

struct jpeg_decompress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */

  /* Source of compressed data */
  struct jpeg_source_mgr * src;

  /* Basic description of image --- filled in by jpeg_read_header(). */
  /* Application may inspect these values to decide how to process image. */

  JDIMENSION image_width;	/* nominal image width (from SOF marker) */
  JDIMENSION image_height;	/* nominal image height */
  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  /* Decompression processing parameters --- these fields must be set before
   * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
   * them to default values.
   */

  J_COLOR_SPACE out_color_space; /* colorspace for output */
  
  int pixel_size;			/* number of bytes per pixel, 2,3,4 */
  UINT32 pixel_mask;			/* for clearing empty byte of 32-bit pixels */
  UINT32 red_pixel_mask;
  int red_pixel_shift;
  UINT32 green_pixel_mask;
  int green_pixel_shift;
  UINT32 blue_pixel_mask;
  int blue_pixel_shift;
  UINT32 * red_table; 		/* pixel mapping tables */
  UINT32 * green_table;
  UINT32 * blue_table;
  
  unsigned int scale_num, scale_denom; /* fraction by which to scale image */

  double output_gamma;		/* image gamma wanted in output */

  boolean raw_data_out;		/* TRUE=downsampled data wanted */

  boolean quantize_colors;	/* TRUE=colormapped output wanted */
  /* the following are ignored if not quantize_colors: */
  boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
  J_DITHER_MODE dither_mode;	/* type of color dithering to use */
  int desired_number_of_colors;	/* max number of colors to use */

  J_DCT_METHOD dct_method;	/* DCT algorithm selector */
  boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */

  /* Description of actual output image that will be returned to application.
   * These fields are computed by jpeg_start_decompress().
   * You can also use jpeg_calc_output_dimensions() to determine these values
   * in advance of calling jpeg_start_decompress().
   */

  JDIMENSION output_width;	/* scaled image width */
  JDIMENSION output_height;	/* scaled image height */
  int out_color_components;	/* # of color components in out_color_space */
  int output_components;	/* # of color components returned */
  /* output_components is 1 (a colormap index) when quantizing colors;
   * otherwise it equals out_color_components.
   */
  int rec_outbuf_height;	/* min recommended height of scanline buffer */
  /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
   * high, space and time will be wasted due to unnecessary data copying.
   * Usually rec_outbuf_height will be 1 or 2, at most 4.
   */

  /* When quantizing colors, the output colormap is described by these fields.
   * The application can supply a colormap by setting colormap non-NULL before
   * calling jpeg_start_decompress; otherwise a colormap is created during
   * jpeg_start_decompress.
   * The map has out_color_components rows and actual_number_of_colors columns.
   */
  int actual_number_of_colors;	/* number of entries in use */
  JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */

  /* State variable: index of next scaled scanline to be read from
   * jpeg_read_scanlines().  Application may use this to control its
   * processing loop, e.g., "while (output_scanline < output_height)".
   */

  JDIMENSION output_scanline;	/* 0 .. output_height-1  */

  /* Internal JPEG parameters --- the application usually need not look at
   * these fields.
   */

  /* Quantization and Huffman tables are carried forward across input
   * datastreams when processing abbreviated JPEG datastreams.
   */

  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */

  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */

  /* These parameters are never carried across datastreams, since they
   * are given in SOF/SOS markers or defined to be reset by SOI.
   */

  int data_precision;		/* bits of precision in image data */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */

  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */

  unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */

  /* These fields record data obtained from optional markers recognized by
   * the JPEG library.
   */
  boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
  /* Data copied from JFIF marker: */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
  UINT8 Adobe_transform;	/* Color transform code from Adobe marker */
  boolean saw_AVI1_marker;
  UINT8 AVI1_field_id;				/* 0 for non-interlaced, 1 for odd frame, 2 for even frame */

  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */

  /* Remaining fields are known throughout decompressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during decompression startup
   */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  int min_DCT_scaled_size;	/* smallest DCT_scaled_size of any component */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be output by coef ctlr */
  /* The coefficient controller outputs data in units of MCU rows as defined
   * for fully interleaved scans (whether the JPEG file is interleaved or not).
   * There are v_samp_factor * DCT_scaled_size sample rows of each component
   * in an "iMCU" (interleaved MCU) row.
   */

  JSAMPLE * sample_range_limit; /* table for fast range-limiting */

  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */

  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */

  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  /* This field is shared between entropy decoder and marker parser.
   * It is either zero or the code of a JPEG marker that has been
   * read from the data source, but has not yet been processed.
   */
  int unread_marker;

  /*
   * Links to decompression subobjects (methods, private variables of modules)
   */
  struct jpeg_decomp_master * master;
  struct jpeg_d_main_controller * main;
  struct jpeg_d_coef_controller * coef;
  struct jpeg_d_post_controller * post;
  struct jpeg_marker_reader * marker;
  struct jpeg_entropy_decoder * entropy;
  struct jpeg_inverse_dct * idct;
  struct jpeg_upsampler * upsample;
  struct jpeg_color_deconverter * cconvert;
  struct jpeg_color_quantizer * cquantize;
};


/* "Object" declarations for JPEG modules that may be supplied or called
 * directly by the surrounding application.
 * As with all objects in the JPEG library, these structs only define the
 * publicly visible methods and state variables of a module.  Additional
 * private fields may exist after the public ones.
 */


/* Error handler object */

struct jpeg_error_mgr {
  /* Error exit handler: does not return to caller */
  JMETHOD(void, error_exit, (j_common_ptr cinfo));
  /* Conditionally emit a trace or warning message */
  JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
  /* Routine that actually outputs a trace or error message */
  JMETHOD(void, output_message, (j_common_ptr cinfo));
  /* Format a message string for the most recent JPEG error or message */
  JMETHOD(void, format_message, (j_common_ptr cinfo, char* buffer));
#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
  /* Reset error state variables at start of a new image */
  JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));
  
  /* The message ID code and any parameters are saved here.
   * A message can have one string parameter or up to 8 int parameters.
   */
  int msg_code;
#define JMSG_STR_PARM_MAX  80
  union {
    int i[8];
    char s[JMSG_STR_PARM_MAX];
  } msg_parm;
  
  /* Standard state variables for error facility */
  
  int trace_level;		/* max msg_level that will be displayed */
  
  /* For recoverable corrupt-data errors, we emit a warning message,
   * but keep going unless emit_message chooses to abort.  emit_message
   * should count warnings in num_warnings.  The surrounding application
   * can check for bad data by seeing if num_warnings is nonzero at the
   * end of processing.
   */
  long num_warnings;		/* number of corrupt-data warnings */

  /* These fields point to the table(s) of error message strings.
   * An application can change the table pointer to switch to a different
   * message list (typically, to change the language in which errors are
   * reported).  Some applications may wish to add additional error codes
   * that will be handled by the JPEG library error mechanism; the second
   * table pointer is used for this purpose.
   *
   * First table includes all errors generated by JPEG library itself.
   * Error code 0 is reserved for a "no such error string" message.
   */
  const char * const * jpeg_message_table; /* Library errors */
  int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
  /* Second table can be added by application (see cjpeg/djpeg for example).
   * It contains strings numbered first_addon_message..last_addon_message.
   */
  const char * const * addon_message_table; /* Non-library errors */
  int first_addon_message;	/* code for first string in addon table */
  int last_addon_message;	/* code for last string in addon table */
};


/* Progress monitor object */

struct jpeg_progress_mgr {
  JMETHOD(void, progress_monitor, (j_common_ptr cinfo));

  long pass_counter;		/* work units completed in this pass */
  long pass_limit;		/* total number of work units in this pass */
  int completed_passes;		/* passes completed so far */
  int total_passes;		/* total number of passes expected */
};


/* Data destination object for compression */

struct jpeg_destination_mgr {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */

  JMETHOD(void, init_destination, (j_compress_ptr cinfo));
  JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
  JMETHOD(void, term_destination, (j_compress_ptr cinfo));
};


/* Data source object for decompression */

struct jpeg_source_mgr {
  const JOCTET * next_input_byte; /* => next byte to read from buffer */
  size_t bytes_in_buffer;	/* # of bytes remaining in buffer */

  JMETHOD(void, init_source, (j_decompress_ptr cinfo));
  JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
  JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
  JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo));
  JMETHOD(void, term_source, (j_decompress_ptr cinfo));
};


/* Memory manager object.
 * Allocates "small" objects (a few K total), "large" objects (tens of K),
 * and "really big" objects (virtual arrays with backing store if needed).
 * The memory manager does not allow individual objects to be freed; rather,
 * each created object is assigned to a pool, and whole pools can be freed
 * at once.  This is faster and more convenient than remembering exactly what
 * to free, especially where malloc()/free() are not too speedy.
 * NB: alloc routines never return NULL.  They exit to error_exit if not
 * successful.
 */

#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
#define JPOOL_NUMPOOLS	2

typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
typedef struct jvirt_barray_control * jvirt_barray_ptr;


struct jpeg_memory_mgr {
  /* Method pointers */
  JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
				size_t sizeofobject));
  JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
				     size_t sizeofobject));
  JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
				     JDIMENSION samplesperrow,
				     JDIMENSION numrows));
  JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
				      JDIMENSION blocksperrow,
				      JDIMENSION numrows));
  JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
						  int pool_id,
						  JDIMENSION samplesperrow,
						  JDIMENSION numrows,
						  JDIMENSION unitheight));
  JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
						  int pool_id,
						  JDIMENSION blocksperrow,
						  JDIMENSION numrows,
						  JDIMENSION unitheight));
  JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
  JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
					   jvirt_sarray_ptr ptr,
					   JDIMENSION start_row,
					   boolean writable));
  JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
					    jvirt_barray_ptr ptr,
					    JDIMENSION start_row,
					    boolean writable));
  JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
  JMETHOD(void, self_destruct, (j_common_ptr cinfo));

  /* Limit on memory allocation for this JPEG object.  (Note that this is
   * merely advisory, not a guaranteed maximum; it only affects the space
   * used for virtual-array buffers.)  May be changed by outer application
   * after creating the JPEG object.
   */
  long max_memory_to_use;
};


/* Routine signature for application-supplied marker processing methods.
 * Need not pass marker code since it is stored in cinfo->unread_marker.
 */
typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));


/* Declarations for routines called by application.
 * The JPP macro hides prototype parameters from compilers that can't cope.
 * Note JPP requires double parentheses.
 */

#ifdef HAVE_PROTOTYPES
#define JPP(arglist)	arglist
#else
#define JPP(arglist)	()
#endif


/* Short forms of external names for systems with brain-damaged linkers.
 * We shorten external names to be unique in the first six letters, which
 * is good enough for all known systems.
 * (If your compiler itself needs names to be unique in less than 15 
 * characters, you are out of luck.  Get a better compiler.)
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_error		jStdError
#define jpeg_create_compress	jCreaCompress
#define jpeg_create_decompress	jCreaDecompress
#define jpeg_destroy_compress	jDestCompress
#define jpeg_destroy_decompress	jDestDecompress
#define jpeg_stdio_dest		jStdDest
#define jpeg_stdio_src		jStdSrc
#define jpeg_set_defaults	jSetDefaults
#define jpeg_set_colorspace	jSetColorspace
#define jpeg_default_colorspace	jDefColorspace
#define jpeg_set_quality	jSetQuality
#define jpeg_set_linear_quality	jSetLQuality
#define jpeg_add_quant_table	jAddQuantTable
#define jpeg_quality_scaling	jQualityScaling
#define jpeg_suppress_tables	jSuppressTables
#define jpeg_alloc_quant_table	jAlcQTable
#define jpeg_alloc_huff_table	jAlcHTable
#define jpeg_start_compress	jStrtCompress
#define jpeg_write_scanlines	jWrtScanlines
#define jpeg_finish_compress	jFinCompress
#define jpeg_write_raw_data	jWrtRawData
#define jpeg_write_marker	jWrtMarker
#define jpeg_write_tables	jWrtTables
#define jpeg_read_header	jReadHeader
#define jpeg_start_decompress	jStrtDecompress
#define jpeg_read_scanlines	jReadScanlines
#define jpeg_finish_decompress	jFinDecompress
#define jpeg_read_raw_data	jReadRawData
#define jpeg_calc_output_dimensions	jCalcDimensions
#define jpeg_set_marker_processor	jSetMarker
#define jpeg_abort_compress	jAbrtCompress
#define jpeg_abort_decompress	jAbrtDecompress
#define jpeg_abort		jAbort
#define jpeg_destroy		jDestroy
#define jpeg_resync_to_restart	jResyncRestart
#endif /* NEED_SHORT_EXTERNAL_NAMES */


/* Default error-management setup */
EXTERN struct jpeg_error_mgr *jpeg_std_error JPP((struct jpeg_error_mgr *err));

/* Initialization and destruction of JPEG compression objects */
/* NB: you must set up the error-manager BEFORE calling jpeg_create_xxx */
EXTERN void jpeg_create_compress JPP((j_compress_ptr cinfo));
EXTERN void jpeg_create_decompress JPP((j_decompress_ptr cinfo));
EXTERN void jpeg_destroy_compress JPP((j_compress_ptr cinfo));
EXTERN void jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));

/* Standard data source and destination managers: stdio streams. */
/* Caller is responsible for opening the file before and closing after. */
// EXTERN void jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
// EXTERN void jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));

EXTERN void jpeg_compress_dest JPP((j_compress_ptr cinfo, JOCTET * destData, long * destSizePtr));
EXTERN void jpeg_decompress_src JPP((j_decompress_ptr cinfo, JOCTET * srcData, long srcSize));


/* Default parameter setup for compression */
EXTERN void jpeg_set_defaults JPP((j_compress_ptr cinfo));
/* Compression parameter setup aids */
EXTERN void jpeg_set_colorspace JPP((j_compress_ptr cinfo,
				     J_COLOR_SPACE colorspace));
EXTERN void jpeg_default_colorspace JPP((j_compress_ptr cinfo));
EXTERN void jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
				  boolean force_baseline));
EXTERN void jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
					 int scale_factor,
					 boolean force_baseline));
EXTERN void jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
				      const unsigned int *basic_table,
				      int scale_factor,
				      boolean force_baseline));
EXTERN int jpeg_quality_scaling JPP((int quality));
EXTERN void jpeg_suppress_tables JPP((j_compress_ptr cinfo,
				      boolean suppress));
EXTERN JQUANT_TBL * jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
EXTERN JHUFF_TBL * jpeg_alloc_huff_table JPP((j_common_ptr cinfo));
EXTERN void	jpeg_set_subsampling (j_compress_ptr cinfo, int x, int y);

/* Main entry points for compression */
EXTERN void jpeg_start_compress JPP((j_compress_ptr cinfo,
				     boolean write_all_tables));
EXTERN JDIMENSION jpeg_write_scanlines JPP((j_compress_ptr cinfo,
					    JSAMPARRAY scanlines,
					    JDIMENSION num_lines));
EXTERN void jpeg_finish_compress JPP((j_compress_ptr cinfo));

/* Replaces jpeg_write_scanlines when writing raw downsampled data. */
EXTERN JDIMENSION jpeg_write_raw_data JPP((j_compress_ptr cinfo,
					   JSAMPIMAGE data,
					   JDIMENSION num_lines));

/* Write a special marker.  See libjpeg.doc concerning safe usage. */
EXTERN void jpeg_write_marker JPP((j_compress_ptr cinfo, int marker,
				   const JOCTET *dataptr, unsigned int datalen));

/* Alternate compression function: just write an abbreviated table file */
EXTERN void jpeg_write_tables JPP((j_compress_ptr cinfo));

/* Decompression startup: read start of JPEG datastream to see what's there */
EXTERN int jpeg_read_header JPP((j_decompress_ptr cinfo,
				 boolean require_image));
/* Return value is one of: */
#define JPEG_HEADER_OK		0 /* Found valid image datastream */
#define JPEG_HEADER_TABLES_ONLY	1 /* Found valid table-specs-only datastream */
#define JPEG_SUSPENDED		2 /* Had to suspend before end of headers */
/* If you pass require_image = TRUE (normal case), you need not check for
 * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
 * JPEG_SUSPENDED is only possible if you use a data source module that can
 * give a suspension return (the stdio source module doesn't).
 */

/* Main entry points for decompression */
EXTERN void jpeg_start_decompress JPP((j_decompress_ptr cinfo));
EXTERN JDIMENSION jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
					   JSAMPARRAY scanlines,
					   JDIMENSION max_lines));
EXTERN boolean jpeg_finish_decompress JPP((j_decompress_ptr cinfo));

/* Replaces jpeg_read_scanlines when reading raw downsampled data. */
EXTERN JDIMENSION jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
					  JSAMPIMAGE data,
					  JDIMENSION max_lines));

/* Precalculate output dimensions for current decompression parameters. */
EXTERN void jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));

/* Install a special processing method for COM or APPn markers. */
EXTERN void jpeg_set_marker_processor JPP((j_decompress_ptr cinfo,
					   int marker_code,
					   jpeg_marker_parser_method routine));

/* If you choose to abort compression or decompression before completing
 * jpeg_finish_(de)compress, then you need to clean up to release memory,
 * temporary files, etc.  You can just call jpeg_destroy_(de)compress
 * if you're done with the JPEG object, but if you want to clean it up and
 * reuse it, call this:
 */
EXTERN void jpeg_abort_compress JPP((j_compress_ptr cinfo));
EXTERN void jpeg_abort_decompress JPP((j_decompress_ptr cinfo));

/* Generic versions of jpeg_abort and jpeg_destroy that work on either
 * flavor of JPEG object.  These may be more convenient in some places.
 */
EXTERN void jpeg_abort JPP((j_common_ptr cinfo));
EXTERN void jpeg_destroy JPP((j_common_ptr cinfo));

/* Default restart-marker-resync procedure for use by data source modules */
EXTERN boolean jpeg_resync_to_restart JPP((j_decompress_ptr cinfo));


/* These marker codes are exported since applications and data source modules
 * are likely to want to use them.
 */

#define JPEG_SOI    0xD8	/* SOI marker code */
#define JPEG_RST0	0xD0	/* RST0 marker code */
#define JPEG_EOI	0xD9	/* EOI marker code */
#define JPEG_APP0	0xE0	/* APP0 marker code */
#define JPEG_COM	0xFE	/* COM marker code */


/* If we have a brain-damaged compiler that emits warnings (or worse, errors)
 * for structure definitions that are never filled in, keep it quiet by
 * supplying dummy definitions for the various substructures.
 */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
struct jpeg_comp_master { long dummy; };
struct jpeg_c_main_controller { long dummy; };
struct jpeg_c_prep_controller { long dummy; };
struct jpeg_c_coef_controller { long dummy; };
struct jpeg_marker_writer { long dummy; };
struct jpeg_color_converter { long dummy; };
struct jpeg_downsampler { long dummy; };
struct jpeg_forward_dct { long dummy; };
struct jpeg_entropy_encoder { long dummy; };
struct jpeg_decomp_master { long dummy; };
struct jpeg_d_main_controller { long dummy; };
struct jpeg_d_coef_controller { long dummy; };
struct jpeg_d_post_controller { long dummy; };
struct jpeg_marker_reader { long dummy; };
struct jpeg_entropy_decoder { long dummy; };
struct jpeg_inverse_dct { long dummy; };
struct jpeg_upsampler { long dummy; };
struct jpeg_color_deconverter { long dummy; };
struct jpeg_color_quantizer { long dummy; };
#endif /* JPEG_INTERNALS */
#endif /* INCOMPLETE_TYPES_BROKEN */


/*
 * The JPEG library modules define JPEG_INTERNALS before including this file.
 * The internal structure declarations are read only when that is true.
 * Applications using the library should not include jpegint.h, but may wish
 * to include jerror.h.
 */

#ifdef JPEG_INTERNALS
#include "jpegint.h"		/* fetch private declarations */
#include "jerror.h"		/* fetch error codes too */
#endif


#endif  // #ifndef JPEGLIB_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jutils.c ===
/*
 * jutils.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains miscellaneous utility routines needed for both
 * compression and decompression.
 * Note we prefix all global names with "j" to minimize conflicts with
 * a surrounding application.
 *
 * Portions Copyright (c) 1994 Paradigm Matrix.
 *   All Rights Reserved.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

/*
UINT8 AVIHuffTable[0x1a0] = {	  
 0xFF,0xC4,	// DHT marker
 0x01,0xA2,	// size


 0x00,	0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,
 			
 0x01,  0x00,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
 			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,
 			
 0x10,	0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7D,
 			0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
 			0x22,0x71,0x14,0x32,0x81,0x91,0xA1,0x08,0x23,0x42,0xB1,0xC1,0x15,0x52,0xD1,0xF0,
 			0x24,0x33,0x62,0x72,0x82,0x09,0x0A,0x16,0x17,0x18,0x19,0x1A,0x25,0x26,0x27,0x28,
 			0x29,0x2A,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
 			0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
 			0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
 			0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,
 			0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,
 			0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xE1,0xE2,
 			0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,
 			0xF9,0xFA,
 			
 0x11,	0x00,0x02,0x01,0x02,0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,0x01,0x02,0x77,
 			0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
 			0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,0xA1,0xB1,0xC1,0x09,0x23,0x33,0x52,0xF0,
 			0x15,0x62,0x72,0xD1,0x0A,0x16,0x24,0x34,0xE1,0x25,0xF1,0x17,0x18,0x19,0x1A,0x26,
 			0x27,0x28,0x29,0x2A,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,
 			0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,
 			0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x82,0x83,0x84,0x85,0x86,0x87,
 			0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,
 			0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,
 			0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,
 			0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,
 			0xF9,0xFA};

*/




/*
 * Arithmetic utilities
 */

GLOBAL long
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
}


GLOBAL long
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
  return a - (a % b);
}


/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 * are FAR and we're assuming a small-pointer memory model.  However, some
 * DOS compilers provide far-pointer versions of memcpy() and memset() even
 * in the small-model libraries.  These will be used if USE_FMEM is defined.
 * Otherwise, the routines below do it the hard way.  (The performance cost
 * is not all that great, because these routines aren't very heavily used.)
 */

#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
#define FMEMZERO(target,size)	MEMZERO(target,size)
#else				/* 80x86 case, define if we can */
#ifdef USE_FMEM
#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
#endif
#endif


GLOBAL void
jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
		   JSAMPARRAY output_array, int dest_row,
		   int num_rows, JDIMENSION num_cols)
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
  output_array += dest_row;

  for (row = num_rows; row > 0; row--) {
    inptr = *input_array++;
    outptr = *output_array++;
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}


GLOBAL void
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
#else
  register JCOEFPTR inptr, outptr;
  register long count;

  inptr = (JCOEFPTR) input_row;
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}


GLOBAL void
jzero_far (void FAR * target, size_t bytestozero)
/* Zero out a chunk of FAR memory. */
/* This might be sample-array data, block-array data, or alloc_medium data. */
{
#ifdef FMEMZERO
  FMEMZERO(target, bytestozero);
#else
  register char FAR * ptr = (char FAR *) target;
  register size_t count;

  for (count = bytestozero; count > 0; count--) {
    *ptr++ = 0;
  }
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jversion.h ===
/*
 * jversion.h
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains software version identification.
 */


#define JVERSION	"5  24-Sep-94"

#define JCOPYRIGHT	"Copyright (C) 1994, Thomas G. Lane, Portions Copyright (c) Paradigm Matrix 1994"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\jquant2.c ===
/*
 * jquant2.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains 2-pass color quantization (color mapping) routines.
 * These routines provide selection of a custom color map for an image,
 * followed by mapping of the image to that color map, with optional
 * Floyd-Steinberg dithering.
 * It is also possible to use just the second pass to map to an arbitrary
 * externally-given color map.
 *
 * Note: ordered dithering is not supported, since there isn't any fast
 * way to compute intercolor distances; it's unclear that ordered dither's
 * fundamental assumptions even hold with an irregularly spaced color map.
 */

#define JPEG_INTERNALS
#include "jinclude.h"
#include "jpeglib.h"

#ifdef QUANT_2PASS_SUPPORTED


/*
 * This module implements the well-known Heckbert paradigm for color
 * quantization.  Most of the ideas used here can be traced back to
 * Heckbert's seminal paper
 *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
 *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
 *
 * In the first pass over the image, we accumulate a histogram showing the
 * usage count of each possible color.  To keep the histogram to a reasonable
 * size, we reduce the precision of the input; typical practice is to retain
 * 5 or 6 bits per color, so that 8 or 4 different input values are counted
 * in the same histogram cell.
 *
 * Next, the color-selection step begins with a box representing the whole
 * color space, and repeatedly splits the "largest" remaining box until we
 * have as many boxes as desired colors.  Then the mean color in each
 * remaining box becomes one of the possible output colors.
 * 
 * The second pass over the image maps each input pixel to the closest output
 * color (optionally after applying a Floyd-Steinberg dithering correction).
 * This mapping is logically trivial, but making it go fast enough requires
 * considerable care.
 *
 * Heckbert-style quantizers vary a good deal in their policies for choosing
 * the "largest" box and deciding where to cut it.  The particular policies
 * used here have proved out well in experimental comparisons, but better ones
 * may yet be found.
 *
 * In earlier versions of the IJG code, this module quantized in YCbCr color
 * space, processing the raw upsampled data without a color conversion step.
 * This allowed the color conversion math to be done only once per colormap
 * entry, not once per pixel.  However, that optimization precluded other
 * useful optimizations (such as merging color conversion with upsampling)
 * and it also interfered with desired capabilities such as quantizing to an
 * externally-supplied colormap.  We have therefore abandoned that approach.
 * The present code works in the post-conversion color space, typically RGB.
 *
 * To improve the visual quality of the results, we actually work in scaled
 * RGB space, giving G distances more weight than R, and R in turn more than
 * B.  To do everything in integer math, we must use integer scale factors.
 * The 2/3/1 scale factors used here correspond loosely to the relative
 * weights of the colors in the NTSC grayscale equation.
 * If you want to use this code to quantize a non-RGB color space, you'll
 * probably need to change these scale factors.
 */

#define R_SCALE 2		/* scale R distances by this much */
#define G_SCALE 3		/* scale G distances by this much */
#define B_SCALE 1		/* and B by this much */

/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
 * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
 * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
 * you'll get compile errors until you extend this logic.  In that case
 * you'll probably want to tweak the histogram sizes too.
 */

#if RGB_RED == 0
#define C0_SCALE R_SCALE
#endif
#if RGB_BLUE == 0
#define C0_SCALE B_SCALE
#endif
#if RGB_GREEN == 1
#define C1_SCALE G_SCALE
#endif
#if RGB_RED == 2
#define C2_SCALE R_SCALE
#endif
#if RGB_BLUE == 2
#define C2_SCALE B_SCALE
#endif


/*
 * First we have the histogram data structure and routines for creating it.
 *
 * The number of bits of precision can be adjusted by changing these symbols.
 * We recommend keeping 6 bits for G and 5 each for R and B.
 * If you have plenty of memory and cycles, 6 bits all around gives marginally
 * better results; if you are short of memory, 5 bits all around will save
 * some space but degrade the results.
 * To maintain a fully accurate histogram, we'd need to allocate a "long"
 * (preferably unsigned long) for each cell.  In practice this is overkill;
 * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 * and clamping those that do overflow to the maximum value will give close-
 * enough results.  This reduces the recommended histogram size from 256Kb
 * to 128Kb, which is a useful savings on PC-class machines.
 * (In the second pass the histogram space is re-used for pixel mapping data;
 * in that capacity, each cell must be able to store zero to the number of
 * desired colors.  16 bits/cell is plenty for that too.)
 * Since the JPEG code is intended to run in small memory model on 80x86
 * machines, we can't just allocate the histogram in one chunk.  Instead
 * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 * on 80x86 machines, the pointer row is in near memory but the actual
 * arrays are in far memory (same arrangement as we use for image arrays).
 */

#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */

/* These will do the right thing for either R,G,B or B,G,R color order,
 * but you may not like the results for other color orders.
 */
#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
#define HIST_C1_BITS  6		/* bits of precision in G histogram */
#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */

/* Number of elements along histogram axes. */
#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)

/* These are the amounts to shift an input value to get a histogram index. */
#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)


typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */

typedef histcell FAR * histptr;	/* for pointers to histogram cells */

typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
typedef hist2d * hist3d;	/* type for top-level pointer */


/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array has (#columns + 2) entries; the extra entry at
 * each end saves us from special-casing the first and last pixels.
 * Each entry is three values long, one value for each color component.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */


/* Private subobject */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Variables for accumulating image statistics */
  hist3d histogram;		/* pointer to the histogram */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors;		/* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
  int * error_limiter;		/* table for clamping the applied error */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;


/*
 * Prescan some rows of pixels.
 * In this module the prescan simply updates the histogram, which has been
 * initialized to zeroes by start_pass.
 * An output_buf parameter is required by the method signature, but no data
 * is actually output (in fact the buffer controller is probably passing a
 * NULL pointer).
 */

METHODDEF void
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    ptr = input_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}


/*
 * Next we have the really interesting routines: selection of a colormap
 * given the completed histogram.
 * These routines work with a list of "boxes", each representing a rectangular
 * subset of the input color space (to histogram precision).
 */

typedef struct {
  /* The bounds of the box (inclusive); expressed as histogram indexes */
  int c0min, c0max;
  int c1min, c1max;
  int c2min, c2max;
  /* The volume (actually 2-norm) of the box */
  INT32 volume;
  /* The number of nonzero histogram cells within this box */
  long colorcount;
} box;

typedef box * boxptr;


LOCAL boxptr
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register long maxc = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->colorcount > maxc && boxp->volume > 0) {
      which = boxp;
      maxc = boxp->colorcount;
    }
  }
  return which;
}


LOCAL boxptr
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
  boxptr which = NULL;
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
    if (boxp->volume > maxv) {
      which = boxp;
      maxv = boxp->volume;
    }
  }
  return which;
}


LOCAL void
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  if (c0max > c0min)
    for (c0 = c0min; c0 <= c0max; c0++)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0min = c0min = c0;
	    goto have_c0min;
	  }
      }
 have_c0min:
  if (c0max > c0min)
    for (c0 = c0max; c0 >= c0min; c0--)
      for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0max = c0max = c0;
	    goto have_c0max;
	  }
      }
 have_c0max:
  if (c1max > c1min)
    for (c1 = c1min; c1 <= c1max; c1++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1min = c1min = c1;
	    goto have_c1min;
	  }
      }
 have_c1min:
  if (c1max > c1min)
    for (c1 = c1max; c1 >= c1min; c1--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1max = c1max = c1;
	    goto have_c1max;
	  }
      }
 have_c1max:
  if (c2max > c2min)
    for (c2 = c2min; c2 <= c2max; c2++)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2min = c2min = c2;
	    goto have_c2min;
	  }
      }
 have_c2min:
  if (c2max > c2min)
    for (c2 = c2max; c2 >= c2min; c2--)
      for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2max = c2max = c2;
	    goto have_c2max;
	  }
      }
 have_c2max:

  /* Update box volume.
   * We use 2-norm rather than real volume here; this biases the method
   * against making long narrow boxes, and it has the side benefit that
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
	if (*histp != 0) {
	  ccount++;
	}
    }
  boxp->colorcount = ccount;
}


LOCAL int
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
      b1 = find_biggest_color_pop(boxlist, numboxes);
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
    }
    if (b1 == NULL)		/* no splittable boxes left! */
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
    if (c0 > cmax) { cmax = c0; n = 0; }
    if (c2 > cmax) { n = 2; }
#else
    cmax = c1; n = 1;
    if (c2 > cmax) { cmax = c2; n = 2; }
    if (c0 > cmax) { n = 0; }
#endif
    /* Choose split point along selected axis, and update box bounds.
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
      b1->c0max = lb;
      b2->c0min = lb+1;
      break;
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
      b1->c1max = lb;
      b2->c1min = lb+1;
      break;
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
      b1->c2max = lb;
      b2->c2min = lb+1;
      break;
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
    update_box(cinfo, b2);
    numboxes++;
  }
  return numboxes;
}


LOCAL void
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
  long c0total = 0;
  long c1total = 0;
  long c2total = 0;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;
  
  for (c0 = c0min; c0 <= c0max; c0++)
    for (c1 = c1min; c1 <= c1max; c1++) {
      histp = & histogram[c0][c1][c2min];
      for (c2 = c2min; c2 <= c2max; c2++) {
	if ((count = *histp++) != 0) {
	  total += count;
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
}


LOCAL void
select_colors (j_decompress_ptr cinfo)
/* Master routine for color selection */
{
  boxptr boxlist;
  int numboxes;
  int desired = cinfo->desired_number_of_colors;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
  boxlist[0].c0min = 0;
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
  boxlist[0].c1min = 0;
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
  boxlist[0].c2min = 0;
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired);
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
    compute_color(cinfo, & boxlist[i], i);
  cinfo->actual_number_of_colors = numboxes;
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
}


/*
 * These routines are concerned with the time-critical task of mapping input
 * colors to the nearest color in the selected colormap.
 *
 * We re-use the histogram space as an "inverse color map", essentially a
 * cache for the results of nearest-color searches.  All colors within a
 * histogram cell will be mapped to the same colormap entry, namely the one
 * closest to the cell's center.  This may not be quite the closest entry to
 * the actual input color, but it's almost as good.  A zero in the cache
 * indicates we haven't found the nearest color for that cell yet; the array
 * is cleared to zeroes before starting the mapping pass.  When we find the
 * nearest color for a cell, its colormap index plus one is recorded in the
 * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 * when they need to use an unfilled entry in the cache.
 *
 * Our method of efficiently finding nearest colors is based on the "locally
 * sorted search" idea described by Heckbert and on the incremental distance
 * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 * the distances from a given colormap entry to each cell of the histogram can
 * be computed quickly using an incremental method: the differences between
 * distances to adjacent cells themselves differ by a constant.  This allows a
 * fairly fast implementation of the "brute force" approach of computing the
 * distance from every colormap entry to every histogram cell.  Unfortunately,
 * it needs a work array to hold the best-distance-so-far for each histogram
 * cell (because the inner loop has to be over cells, not colormap entries).
 * The work array elements have to be INT32s, so the work array would need
 * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 *
 * To get around these problems, we apply Thomas' method to compute the
 * nearest colors for only the cells within a small subbox of the histogram.
 * The work array need be only as big as the subbox, so the memory usage
 * problem is solved.  Furthermore, we need not fill subboxes that are never
 * referenced in pass2; many images use only part of the color gamut, so a
 * fair amount of work is saved.  An additional advantage of this
 * approach is that we can apply Heckbert's locality criterion to quickly
 * eliminate colormap entries that are far away from the subbox; typically
 * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 * and we need not compute their distances to individual cells in the subbox.
 * The speed of this approach is heavily influenced by the subbox size: too
 * small means too much overhead, too big loses because Heckbert's criterion
 * can't eliminate as many colormap entries.  Empirically the best subbox
 * size seems to be about 1/512th of the histogram (1/8th in each direction).
 *
 * Thomas' article also describes a refined method which is asymptotically
 * faster than the brute-force method, but it is also far more complex and
 * cannot efficiently be applied to small subboxes.  It is therefore not
 * useful for programs intended to be portable to DOS machines.  On machines
 * with plenty of memory, filling the whole histogram in one shot with Thomas'
 * refined method might be faster than the present code --- but then again,
 * it might not be any faster, and it's certainly more complicated.
 */


/* log2(histogram cells in update box) for each axis; this can be adjusted */
#define BOX_C0_LOG  (HIST_C0_BITS-3)
#define BOX_C1_LOG  (HIST_C1_BITS-3)
#define BOX_C2_LOG  (HIST_C2_BITS-3)

#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)

#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)


/*
 * The next three routines implement inverse colormap filling.  They could
 * all be folded into one big routine, but splitting them up this way saves
 * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 * and may allow some compilers to produce better code by registerizing more
 * inner-loop variables.
 */

LOCAL int
find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		    JSAMPLE colorlist[])
/* Locate the colormap entries close enough to an update box to be candidates
 * for the nearest entry to some cell(s) in the update box.  The update box
 * is specified by the center coordinates of its first cell.  The number of
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
  int numcolors = cinfo->actual_number_of_colors;
  int maxc0, maxc1, maxc2;
  int centerc0, centerc1, centerc2;
  int i, x, ncolors;
  INT32 minmaxdist, min_dist, max_dist, tdist;
  INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */

  /* Compute true coordinates of update box's upper corner and center.
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
  centerc0 = (minc0 + maxc0) >> 1;
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
  centerc1 = (minc1 + maxc1) >> 1;
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
  centerc2 = (minc2 + maxc2) >> 1;

  /* For each color in colormap, find:
   *  1. its minimum squared-distance to any point in the update box
   *     (zero if color is within update box);
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;

  for (i = 0; i < numcolors; i++) {
    /* We compute the squared-c0-distance term, then add in the other two. */
    x = GETJSAMPLE(cinfo->colormap[0][i]);
    if (x < minc0) {
      tdist = (x - minc0) * C0_SCALE;
      min_dist = tdist*tdist;
      tdist = (x - maxc0) * C0_SCALE;
      max_dist = tdist*tdist;
    } else if (x > maxc0) {
      tdist = (x - maxc0) * C0_SCALE;
      min_dist = tdist*tdist;
      tdist = (x - minc0) * C0_SCALE;
      max_dist = tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      min_dist = 0;
      if (x <= centerc0) {
	tdist = (x - maxc0) * C0_SCALE;
	max_dist = tdist*tdist;
      } else {
	tdist = (x - minc0) * C0_SCALE;
	max_dist = tdist*tdist;
      }
    }

    x = GETJSAMPLE(cinfo->colormap[1][i]);
    if (x < minc1) {
      tdist = (x - minc1) * C1_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - maxc1) * C1_SCALE;
      max_dist += tdist*tdist;
    } else if (x > maxc1) {
      tdist = (x - maxc1) * C1_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - minc1) * C1_SCALE;
      max_dist += tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc1) {
	tdist = (x - maxc1) * C1_SCALE;
	max_dist += tdist*tdist;
      } else {
	tdist = (x - minc1) * C1_SCALE;
	max_dist += tdist*tdist;
      }
    }

    x = GETJSAMPLE(cinfo->colormap[2][i]);
    if (x < minc2) {
      tdist = (x - minc2) * C2_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - maxc2) * C2_SCALE;
      max_dist += tdist*tdist;
    } else if (x > maxc2) {
      tdist = (x - maxc2) * C2_SCALE;
      min_dist += tdist*tdist;
      tdist = (x - minc2) * C2_SCALE;
      max_dist += tdist*tdist;
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc2) {
	tdist = (x - maxc2) * C2_SCALE;
	max_dist += tdist*tdist;
      } else {
	tdist = (x - minc2) * C2_SCALE;
	max_dist += tdist*tdist;
      }
    }

    mindist[i] = min_dist;	/* save away the results */
    if (max_dist < minmaxdist)
      minmaxdist = max_dist;
  }

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
  for (i = 0; i < numcolors; i++) {
    if (mindist[i] <= minmaxdist)
      colorlist[ncolors++] = (JSAMPLE) i;
  }
  return ncolors;
}


LOCAL void
find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
/* Find the closest colormap entry for each cell in the update box,
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
  int ic0, ic1, ic2;
  int i, icolor;
  register INT32 * bptr;	/* pointer into bestdist[] array */
  JSAMPLE * cptr;		/* pointer into bestcolor[] array */
  INT32 dist0, dist1;		/* initial distance values */
  register INT32 dist2;		/* current distance in inner loop */
  INT32 xx0, xx1;		/* distance increments */
  register INT32 xx2;
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
    *bptr++ = 0x7FFFFFFFL;
  
  /* For each color selected by find_nearby_colors,
   * compute its distance to the center of each cell in the box.
   * If that's less than best-so-far, update best distance and color number.
   */
  
  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
  
  for (i = 0; i < numcolors; i++) {
    icolor = GETJSAMPLE(colorlist[i]);
    /* Compute (square of) distance from minc0/c1/c2 to this color */
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
    dist0 = inc0*inc0;
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
    dist0 += inc1*inc1;
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
    dist0 += inc2*inc2;
    /* Form the initial difference increments */
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
    /* Now loop over all cells in box, updating distance per Thomas method */
    bptr = bestdist;
    cptr = bestcolor;
    xx0 = inc0;
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
      dist1 = dist0;
      xx1 = inc1;
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
	dist2 = dist1;
	xx2 = inc2;
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
	  if (dist2 < *bptr) {
	    *bptr = dist2;
	    *cptr = (JSAMPLE) icolor;
	  }
	  dist2 += xx2;
	  xx2 += 2 * STEP_C2 * STEP_C2;
	  bptr++;
	  cptr++;
	}
	dist1 += xx1;
	xx1 += 2 * STEP_C1 * STEP_C1;
      }
      dist0 += xx0;
      xx0 += 2 * STEP_C0 * STEP_C0;
    }
  }
}


LOCAL void
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int minc0, minc1, minc2;	/* lower left corner of update box */
  int ic0, ic1, ic2;
  register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
  register histptr cachep;	/* pointer into main cache array */
  /* This array lists the candidate colormap indexes. */
  JSAMPLE colorlist[MAXNUMCOLORS];
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
  c2 >>= BOX_C2_LOG;

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
  
  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
      }
    }
  }
}


/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF void
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    for (col = width; col > 0; col--) {
      /* get pixel value and index into the cache */
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
      cachep = & histogram[c0][c1][c2];
      /* If we have not seen this color before, find nearest colormap entry */
      /* and update the cache */
      if (*cachep == 0)
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}


METHODDEF void
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
  LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
  LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  JSAMPROW inptr;		/* => current input pixel */
  JSAMPROW outptr;		/* => current output pixel */
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  int *error_limit = cquantize->error_limiter;
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
      cquantize->on_odd_row = FALSE; /* flip for next time */
    } else {
      /* work left to right in this row */
      dir = 1;
      dir3 = 3;
      errorptr = cquantize->fserrors; /* => entry before first real column */
      cquantize->on_odd_row = TRUE; /* flip for next time */
    }
    /* Preset error values: no error propagated to first pixel from left */
    cur0 = cur1 = cur2 = 0;
    /* and no error propagated to row below yet */
    belowerr0 = belowerr1 = belowerr2 = 0;
    bpreverr0 = bpreverr1 = bpreverr2 = 0;

    for (col = width; col > 0; col--) {
      /* curN holds the error propagated from the previous pixel on the
       * current line.  Add the error propagated from the previous line
       * to form the complete error correction term for this pixel, and
       * round the error term (which is expressed * 16) to an integer.
       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
       * for either sign of the error value.
       * Note: errorptr points to *previous* column's array entry.
       */
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
      /* Limit the error using transfer function set by init_error_limit.
       * See comments with init_error_limit for rationale.
       */
      cur0 = error_limit[cur0];
      cur1 = error_limit[cur1];
      cur2 = error_limit[cur2];
      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
       * this sets the required size of the range_limit array.
       */
      cur0 += GETJSAMPLE(inptr[0]);
      cur1 += GETJSAMPLE(inptr[1]);
      cur2 += GETJSAMPLE(inptr[2]);
      cur0 = GETJSAMPLE(range_limit[cur0]);
      cur1 = GETJSAMPLE(range_limit[cur1]);
      cur2 = GETJSAMPLE(range_limit[cur2]);
      /* Index into the cache with adjusted pixel value */
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
      /* If we have not seen this color before, find nearest colormap */
      /* entry and update the cache */
      if (*cachep == 0)
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
      /* Now emit the colormap index for this cell */
      { register int pixcode = *cachep - 1;
	*outptr = (JSAMPLE) pixcode;
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
      }
      /* Compute error fractions to be propagated to adjacent pixels.
       * Add these into the running sums, and simultaneously shift the
       * next-line error sums left by 1 column.
       */
      { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
	delta = cur0 * 2;
	cur0 += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
	cur0 += delta;		/* form error * 5 */
	bpreverr0 = belowerr0 + cur0;
	belowerr0 = bnexterr;
	cur0 += delta;		/* form error * 7 */
	bnexterr = cur1;	/* Process component 1 */
	delta = cur1 * 2;
	cur1 += delta;		/* form error * 3 */
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
	cur1 += delta;		/* form error * 5 */
	bpreverr1 = belowerr1 + cur1;
	belowerr1 = bnexterr;
	cur1 += delta;		/* form error * 7 */
	bnexterr = cur2;	/* Process component 2 */
	delta = cur2 * 2;
	cur2 += delta;		/* form error * 3 */
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
	cur2 += delta;		/* form error * 5 */
	bpreverr2 = belowerr2 + cur2;
	belowerr2 = bnexterr;
	cur2 += delta;		/* form error * 7 */
      }
      /* At this point curN contains the 7/16 error value to be propagated
       * to the next pixel on the current line, and all the errors for the
       * next line have been shifted over.  We are therefore ready to move on.
       */
      inptr += dir3;		/* Advance pixel pointers to next column */
      outptr += dir;
      errorptr += dir3;		/* advance errorptr to current column */
    }
    /* Post-loop cleanup: we must unload the final error values into the
     * final fserrors[] entry.  Note we need not unload belowerrN because
     * it is for the dummy column before or after the actual array.
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}


/*
 * Initialize the error-limiting transfer function (lookup table).
 * The raw F-S error computation can potentially compute error values of up to
 * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
 * much less, otherwise obviously wrong pixels will be created.  (Typical
 * effects include weird fringes at color-area boundaries, isolated bright
 * pixels in a dark area, etc.)  The standard advice for avoiding this problem
 * is to ensure that the "corners" of the color cube are allocated as output
 * colors; then repeated errors in the same direction cannot cause cascading
 * error buildup.  However, that only prevents the error from getting
 * completely out of hand; Aaron Giles reports that error limiting improves
 * the results even with corner colors allocated.
 * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
 * well, but the smoother transfer function used below is even better.  Thanks
 * to Aaron Giles for this idea.
 */

LOCAL void
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
  cquantize->error_limiter = table;

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
    table[in] = out; table[-in] = -out;
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
  }
#undef STEPSIZE
}


/*
 * Finish up at the end of each pass.
 */

METHODDEF void
finish_pass1 (j_decompress_ptr cinfo)
{
  /* Select the representative colors and fill in cinfo->colormap */
  select_colors(cinfo);
}


METHODDEF void
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}


/*
 * Initialize for each processing pass.
 */

METHODDEF void
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int i;

  if (is_pre_scan) {
    /* Set up method pointers */
    cquantize->pub.color_quantize = prescan_quantize;
    cquantize->pub.finish_pass = finish_pass1;
  } else {
    /* Set up method pointers */
    if (cinfo->dither_mode == JDITHER_FS)
      cquantize->pub.color_quantize = pass2_fs_dither;
    else
      cquantize->pub.color_quantize = pass2_no_dither;
    cquantize->pub.finish_pass = finish_pass2;
  }
  /* Zero the histogram or inverse color map */
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    jzero_far((void FAR *) histogram[i],
	      HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
}


/*
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL void
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
    ERREXIT(cinfo, JERR_NOTIMPL);

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
    cinfo->dither_mode = JDITHER_FS;

  /* Make sure color count is acceptable */
  i = (cinfo->colormap != NULL) ? cinfo->actual_number_of_colors
				: cinfo->desired_number_of_colors;
  /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
  if (i < 8)
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (i > MAXNUMCOLORS)
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }

  /* Allocate storage for the completed colormap,
   * unless it has been supplied by the application.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->colormap == NULL) {
    cinfo->colormap = (*cinfo->mem->alloc_sarray)
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (JDIMENSION) cinfo->desired_number_of_colors, (JDIMENSION) 3);
  }

  /* Allocate Floyd-Steinberg workspace if necessary. */
  /* This isn't needed until pass 2, but again it is FAR storage. */
  if (cinfo->dither_mode == JDITHER_FS) {
    size_t arraysize = (size_t) ((cinfo->output_width + 2) *
				 (3 * SIZEOF(FSERROR)));

    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
      ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
    /* Initialize the propagated errors to zero. */
    jzero_far((void FAR *) cquantize->fserrors, arraysize);
    cquantize->on_odd_row = FALSE;
    init_error_limit(cinfo);
  }
}

#endif /* QUANT_2PASS_SUPPORTED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by mjpeg.rc
//
#define MJPEG_CONFIGURE                 101
#define IDD_INFO                        103
#define IDC_INFOTEXT                    1015
#define IDC_ENABLE                      1019
#define IDC_ABOUT                       1025
#define IDC_ERRORLIST                   1026

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        104
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1027
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\mjpeglib.h ===
// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.

#ifndef _MJPEGLIB_H_
#define _MJPEGLIB_H_

typedef struct {
    DWORD   dwFlags;    // flags from ICOPEN
    DWORD   dwFormat;
    struct jpeg_error_mgr error_mgr;
    struct jpeg_compress_struct   cinfo;
    struct jpeg_decompress_struct dinfo;
    BOOLEAN compress_active;
    BOOLEAN decompress_active;
    BOOLEAN draw_active;
    int xSubSample;
    int ySubSample;
    int smoothingFactor;
    BOOLEAN fancyUpsampling;
    BOOLEAN reportNonStandard;
    BOOLEAN fasterAlgorithm;
    BOOLEAN enabled;
	

    int destSize;  // some programs seem not to remember
	
    HWND	hwnd;
    RECT 	rcSource;
    RECT	rcDest;
    HBRUSH	hKeyBrush;

} INSTINFO, *PINSTINFO;

typedef struct tagJPEGEXBMINFOHEADER {
    BITMAPINFOHEADER bitMap;
    /* extended BITMAPINFOHEADER fields */
    DWORD   biExtDataOffset;
    JPEGINFOHEADER JbitMap;	
} JPEGBITMAPINFOHEADER;

extern "C" INSTINFO * __stdcall Open(ICINFO *icinfo);
extern "C" DWORD __stdcall Close(INSTINFO *pinst);
extern "C" DWORD __stdcall GetInfo(INSTINFO * pinst, ICINFO *icinfo, DWORD dwSize);
extern "C" DWORD __stdcall DecompressQuery(INSTINFO * pinst, JPEGBITMAPINFOHEADER * lpbiIn, LPBITMAPINFOHEADER lpbiOut);
extern "C" DWORD __stdcall DecompressGetFormat(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
extern "C" DWORD __stdcall DecompressBegin(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
extern "C" DWORD __stdcall Decompress(INSTINFO * pinst, ICDECOMPRESS  *icinfo, DWORD dwSize);
extern "C" DWORD __stdcall DecompressEnd(INSTINFO * pinst);
extern "C" DWORD __stdcall CompressQuery(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, JPEGBITMAPINFOHEADER * lpbiOut);
extern "C" DWORD __stdcall CompressGetFormat(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, JPEGBITMAPINFOHEADER * lpbiOut);
extern "C" DWORD __stdcall CompressBegin(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
extern "C" DWORD __stdcall CompressGetSize(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
extern "C" DWORD __stdcall Compress(INSTINFO * pinst, ICCOMPRESS  *icinfo, DWORD dwSize);
extern "C" DWORD __stdcall CompressEnd(INSTINFO * pinst);

#endif // #ifndef _MJPEGLIB_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\mjpeg.c ===
/*----mjpeg.c - Software MJPEG Codec----------------------------------------------------
| Copyright (c) 1994 Paradigm Matrix.							
| All Rights Reserved.									
|											
|  0.91 update
|    - conform data stream to November 13, 1995 OpenDML File Format Workgroup
|		* APP0 header has two size fields, also now 2 bytes longer
|		* use height >= 288 for break between non-interlaced and interlaced
|    - bug fix, data may expand under very high quality, enlarge
|		output buffer estimate
|  
|  0.92 update 2/25/96 jcb
|	- fixed bug when interlaced frames have even field first, corrupts memory
|	- fixed bug where memory was accessed past rgb destination size, memory fault
|	- 288 for height, should be non-interlaced
|
| 0.93 update 3/1/96
|	- finally fixed the corruption at 500k bytes bug
|	- changed frame size to be frame size limit, not target
|	- fixed last pixel on scan line bug, again
|   - fixed reading two odd field data produced by Miro DC20's
|   - added two bytes of 0xFF padding after EOI marker, DC20 seemed to need it
|
| 0.93b
|   - update timebomb to Aug 1, 1996
|
| 0.94
|	- changed app0 size fields to correctly match soi->eoi not sos->eoi
| 1.00
|   - assorted cleanups
|   - changed timebomb to 1/1/97 with 1 month grace period
|	- tuned 16-bit color conversion tables
|	- fixed bug in interlaced playback, modes got reset on second field
|	- added performance measurement
|	- removed unused junk from configure dialog
|	- added error/status logging to configure dialog
|
| 1.01 1/12/97 jcb
|	- changed timebomb to 8/1/97
|	- fixed bug printing performance stats if no frames compressed/decompressed
|   
|
|	todo
|		- performance counters for NT, frames/sec, time in huff, dct, color space
|		- add DecompressEx support
|		- add Internet auto update 
+-------------------------------------------------------------------------------------*/

#include <windows.h>
#include <windowsx.h>
#include <mmsystem.h>
#include "tools16_inc\compddk.h"
#include <string.h>		// for wcscpy()
#include <mmreg.h>
#include "resource.h"
#include <stdlib.h>
#include <stdio.h>

#ifndef WIN32
#include "stdarg.h"
#endif

#ifdef WIN32
#include <memory.h>		/* for memcpy */
#endif

#include "mjpeg.h"

WCHAR szDescription[] = L"Paradigm Matrix M-JPEG Codec 1.01";
WCHAR szName[] = L"Software M-JPEG";
BOOLEAN expired = FALSE;

__int64 performanceCounterFrequency;
__int64 accumulatedPerformanceTime;
__int64 minPerformanceTime;
__int64 maxPerformanceTime;
DWORD performanceSamples;

extern DWORD driverEnabled;
extern tErrorMessageEntry *errorMessages;

EXTERN struct jpeg_error_mgr *jpeg_exception_error JPP((struct jpeg_error_mgr *err));

#define VERSION         0x00010001	// 1.01
#define MAX_WIDTH (2048)        /* internal limitation */

struct my_error_mgr
  {
    struct jpeg_error_mgr pub;	/* "public" fields */
  };

typedef struct my_error_mgr *my_error_ptr;

INT_PTR CALLBACK InfoDialogProc (  HWND hwndDlg,	// handle of dialog box
                                   UINT uMsg,      // message
	                           WPARAM wParam,  // first message parameter
	                           LPARAM lParam   // second message parameter
);

void LogErrorMessage(char * txt)
{
tErrorMessageEntry *errorEntry;

	errorEntry = malloc(sizeof(tErrorMessageEntry));
	if (errorEntry) {
		errorEntry->next = errorMessages;
		errorEntry->msg = _strdup(txt);
		errorMessages = errorEntry;
	}
}

void ClearErrorMessages()
{
tErrorMessageEntry *currentErrorEntry;
tErrorMessageEntry *nextErrorEntry;

  currentErrorEntry = errorMessages;
  while (currentErrorEntry) {
	nextErrorEntry = currentErrorEntry->next;
	if (currentErrorEntry->msg)
		free(currentErrorEntry->msg);
	free(currentErrorEntry);
	currentErrorEntry = nextErrorEntry;
  }
  errorMessages = NULL;
}




/*****************************************************************************
 ****************************************************************************/
INSTINFO *NEAR PASCAL 
Open (ICOPEN FAR * icinfo)
{
  INSTINFO *pinst;
  SYSTEMTIME now;


  //
  // refuse to open if we are not being opened as a Video compressor
  //
  if (icinfo->fccType != ICTYPE_VIDEO)
    return NULL;

  pinst = (INSTINFO *) LocalAlloc (LPTR, sizeof (INSTINFO));

  if (!pinst)
    {
      icinfo->dwError = (DWORD) ICERR_MEMORY;
      return NULL;
    }

#ifdef TIMEBOMB
#pragma message ("Timebomb active")
  if (expired)
    return NULL;

  GetSystemTime (&now);
  if (  (now.wYear >= 1998) ||
      ( (now.wYear == 1997) && (now.wMonth > 7)) ||
        (now.wYear < 1997))
    {
	  if ( (now.wYear == 1997) && (now.wMonth == 8)) {
		MessageBox (0, &TEXT ("The trial period for this software has expired,\nplease contact Paradigm Matrix at http://www.pmatrix.com for purchase."
								"... A grace period until 9/1/97 will be in effect."),
		  &TEXT ("MJPEG Codec Trial Expired"), MB_OK);
	  }
	  else {
		MessageBox (0, &TEXT ("The trial period for this software has expired,\n please contact Paradigm Matrix at http://www.pmatrix.com for purchase."),
		  &TEXT ("MJPEG Codec Trial Expired"), MB_OK);
	  expired = TRUE;
      return NULL;
      }
}
#else
#pragma message ("Timebomb NOT active")
#endif

  //
  // init structure
  //
  pinst->dwFlags = icinfo->dwFlags;
  pinst->compress_active = FALSE;
  pinst->decompress_active = FALSE;
  pinst->draw_active = FALSE;
  pinst->xSubSample = 2;
  pinst->ySubSample = 1;
  pinst->smoothingFactor = 0;
  pinst->fancyUpsampling = FALSE;
  pinst->reportNonStandard = FALSE;
  pinst->fasterAlgorithm = TRUE;
  pinst->enabled = TRUE;

  //
  // return success.
  //
  icinfo->dwError = ICERR_OK;

  return pinst;
}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
Close (INSTINFO * pinst)
{
  if (pinst->compress_active)
    CompressEnd (pinst);
  if (pinst->decompress_active)
    DecompressEnd (pinst);
  if (pinst->draw_active)
    DrawEnd (pinst);

  LocalFree ((HLOCAL) pinst);

  return 1;
}

/*****************************************************************************
 ****************************************************************************/
INT_PTR CALLBACK
ConfigureDialogProc (  HWND hwndDlg,	// handle of dialog box
		       UINT uMsg,	// message
		       WPARAM wParam,	// first message parameter
		       LPARAM lParam	// second message parameter
)

{
  HWND hwndCtl;
  WORD wID;
  WORD wNotifyCode;
  static INSTINFO *pinst;
  HKEY keyHandle;
  DWORD disposition;
  tErrorMessageEntry *currentErrorEntry;


// __asm int 3
  switch (uMsg)
    {
    case WM_INITDIALOG:
      pinst = (INSTINFO *) lParam;
      CheckDlgButton (hwndDlg, IDC_ENABLE, driverEnabled);

	  currentErrorEntry = errorMessages;
	  while (currentErrorEntry) {
	    if (currentErrorEntry->msg)
			SendMessage(GetDlgItem(hwndDlg, IDC_ERRORLIST), LB_ADDSTRING, 0,(LPARAM)currentErrorEntry->msg); 
		currentErrorEntry = currentErrorEntry->next;
		}

	  
      return TRUE;
      break;

    case WM_COMMAND:
      wNotifyCode = HIWORD (wParam);	// notification code                         

      wID = LOWORD (wParam);	// item, control, or accelerator identifier  

      hwndCtl = (HWND) lParam;	// handle of control                         

      switch (wID)
	{
	case IDOK:
	  driverEnabled = IsDlgButtonChecked (hwndDlg, IDC_ENABLE);
	  if (RegCreateKeyEx (HKEY_CURRENT_USER,
			      szSubKey_SoftwareParadigmMatrixSoftwareMJPEGCodec,
			      0,
			      NULL,
			      REG_OPTION_NON_VOLATILE,
			      KEY_ALL_ACCESS,
			      NULL,
			      &keyHandle,
			      &disposition) == ERROR_SUCCESS)
	    {
	      RegSetValueEx (keyHandle,
			     szValue_Enabled,
			     0,
			     REG_DWORD,
			     (unsigned char *)&driverEnabled,
			     sizeof (DWORD));
	      RegCloseKey (keyHandle);
	    }

	  EndDialog (hwndDlg, 1);
	  break;
	case IDCANCEL:
	  EndDialog (hwndDlg, 0);
	  break;
	case IDC_ABOUT:
	  DialogBoxParam (ghModule,
			  MAKEINTRESOURCE (IDD_INFO),
			  hwndDlg,
			  InfoDialogProc,
			  (LPARAM)pinst);

	  break;
	}
      break;
    }

  return FALSE;			// did not process message

}


INT_PTR CALLBACK
InfoDialogProc (  HWND hwndDlg,		// handle of dialog box
		  UINT uMsg,		// message
		  WPARAM wParam,	// first message parameter
		  LPARAM lParam		// second message parameter
)

{
  HWND hwndCtl;
  WORD wID;
  WORD wNotifyCode;

  switch (uMsg)
    {
    case WM_INITDIALOG:
      SendDlgItemMessage (hwndDlg, IDC_INFOTEXT, WM_SETTEXT, 0,
	    (LPARAM)&(TEXT ("Paradigm Matrix M-JPEG Codec 1.01 for Windows NT/95\n")
	      TEXT ("Copyright 1995-1997 Paradigm Matrix\n")
	      TEXT ("written by Jan Bottorff\n\n")
      TEXT ("THIS SOFTWARE WILL STOP FUNCTIONING ON 8/1/97\n\n")
	      TEXT ("Send feedback and commercial license requests to: mjpeg@pmatrix.com\n\n")
	      TEXT ("Visit our Web site at http://www.pmatrix.com\n\n")
	      TEXT ("Commercial users must license this software after a 60 day trial period\n\n")
	      TEXT ("Portions of this software are based on work of the Independent JPEG Group")));
      return TRUE;
      break;

    case WM_COMMAND:
      wNotifyCode = HIWORD (wParam);	// notification code                         

      wID = LOWORD (wParam);	// item, control, or accelerator identifier  

      hwndCtl = (HWND) lParam;	// handle of control                         

      switch (wID)
	{
	case IDOK:
	  EndDialog (hwndDlg, 1);
	  break;
	}
      break;
    }

  return FALSE;			// did not process message

}


/*****************************************************************************
 ****************************************************************************/

BOOL NEAR PASCAL 
QueryAbout (INSTINFO * pinst)
{
  return TRUE;
}

DWORD NEAR PASCAL 
About (INSTINFO * pinst, HWND hwnd)
{
  DialogBoxParam (ghModule,
		  MAKEINTRESOURCE (IDD_INFO),
		  hwnd,
		  InfoDialogProc,
		  (LPARAM)pinst);


//    MessageBox(hwnd,szLongDescription,szAbout,MB_OK|MB_ICONINFORMATION);
  return ICERR_OK;
}

/*****************************************************************************
 ****************************************************************************/
BOOL NEAR PASCAL 
QueryConfigure (INSTINFO * pinst)
{
  return TRUE;			// set to true to enable configure

}

DWORD NEAR PASCAL 
Configure (INSTINFO * pinst, HWND hwnd)
{

  DialogBoxParam (ghModule,
		  MAKEINTRESOURCE (MJPEG_CONFIGURE),
		  hwnd,
		  ConfigureDialogProc,
		  (LPARAM)pinst);

  return ICERR_OK;

}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
GetState (INSTINFO * pinst, LPVOID pv, DWORD dwSize)
{
  return 0;

}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
SetState (INSTINFO * pinst, LPVOID pv, DWORD dwSize)
{
  return (0);
}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
GetInfo (INSTINFO * pinst, ICINFO FAR * icinfo, DWORD dwSize)
{
  if (icinfo == NULL)
    return sizeof (ICINFO);

  if (dwSize < sizeof (ICINFO))
    return 0;

  icinfo->dwSize = sizeof (ICINFO);
  icinfo->fccType = ICTYPE_VIDEO;
  icinfo->fccHandler = FOURCC_MJPEG;
  icinfo->dwFlags = VIDCF_QUALITY | VIDCF_CRUNCH;

  icinfo->dwVersion = VERSION;
  icinfo->dwVersionICM = ICVERSION;
  wcscpy (icinfo->szDescription, szDescription);
  wcscpy (icinfo->szName, szName);

  return sizeof (ICINFO);
}

/*****************************************************************************
 ****************************************************************************/
DWORD FAR PASCAL 
CompressQuery (INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, JPEGBITMAPINFOHEADER * lpbiOut)
{

  if (driverEnabled == FALSE)
    return (DWORD) ICERR_BADFORMAT;

  // check input format to make sure we can convert to this

  // must be full dib
  if (((lpbiIn->biCompression == BI_RGB) && (lpbiIn->biBitCount == 16)) ||
      ((lpbiIn->biCompression == BI_RGB) && (lpbiIn->biBitCount == 24)) ||
      ((lpbiIn->biCompression == BI_RGB) && (lpbiIn->biBitCount == 32)))
    {
    }
  else if ((lpbiIn->biCompression == BI_BITFIELDS) &&
	   (lpbiIn->biBitCount == 16) &&
	   (((LPDWORD) (lpbiIn + 1))[0] == 0x00f800) &&
	   (((LPDWORD) (lpbiIn + 1))[1] == 0x0007e0) &&
	   (((LPDWORD) (lpbiIn + 1))[2] == 0x00001f))
    {
    }
  else
    {
      return (DWORD) ICERR_BADFORMAT;
    }

  //
  //  are we being asked to query just the input format?
  //
  if (lpbiOut == NULL)
    {
      return ICERR_OK;
    }


  //
  // determine if the output DIB data is in a format we like.
  //
  if (lpbiOut == NULL ||
      (lpbiOut->biBitCount != 24) ||
      (lpbiOut->biCompression != FOURCC_MJPEG)
    )
    {
      return (DWORD) ICERR_BADFORMAT;
    }


  /* must be 1:1 (no stretching) */
  if ((lpbiOut->biWidth != lpbiIn->biWidth) ||
      (lpbiOut->biHeight != lpbiIn->biHeight))
    {


      return ((DWORD) ICERR_BADFORMAT);
    }


  return ICERR_OK;
}

/*****************************************************************************
 ****************************************************************************/
DWORD FAR PASCAL 
CompressGetFormat (INSTINFO * pinst,
		   LPBITMAPINFOHEADER lpbiIn,
		   JPEGBITMAPINFOHEADER * lpbiOut)
{

  DWORD dw;
  int dx, dy;

  dw = CompressQuery (pinst, lpbiIn, NULL);
  if (dw != ICERR_OK)
    {
      return dw;
    }

  //
  // if lpbiOut == NULL then, return the size required to hold a output
  // format
  //
  if (lpbiOut == NULL)
    {
      return (sizeof (JPEGBITMAPINFOHEADER));
    }

  dx = (int) lpbiIn->biWidth;
  dy = (int) lpbiIn->biHeight;

  lpbiOut->biSize = sizeof (JPEGBITMAPINFOHEADER);
  lpbiOut->biWidth = dx;
  lpbiOut->biHeight = dy;
  lpbiOut->biPlanes = 1;
  lpbiOut->biBitCount = 24;
  lpbiOut->biCompression = FOURCC_MJPEG;
  lpbiOut->biSizeImage = (((dx * 3) + 3) & ~3) * dy;	// MAXIMUM!

  lpbiOut->biXPelsPerMeter = 0;
  lpbiOut->biYPelsPerMeter = 0;
  lpbiOut->biClrUsed = 0;
  lpbiOut->biClrImportant = 0;
  lpbiOut->biExtDataOffset = (DWORD)((char *) &(lpbiOut->JPEGSize) - (char *) lpbiOut);
  lpbiOut->JPEGSize = sizeof (JPEGINFOHEADER);
  lpbiOut->JPEGProcess = JPEG_PROCESS_BASELINE;
  lpbiOut->JPEGColorSpaceID = JPEG_YCbCr;
  lpbiOut->JPEGBitsPerSample = 8;
  lpbiOut->JPEGHSubSampling = 2;
  lpbiOut->JPEGVSubSampling = 1;

  return ICERR_OK;

}

/*****************************************************************************
 ****************************************************************************/


DWORD FAR PASCAL 
CompressBegin (INSTINFO * pinst,
	       LPBITMAPINFOHEADER lpbiIn,
	       LPBITMAPINFOHEADER lpbiOut)
{
  DWORD dw;

//   __asm int 3

  if (pinst->compress_active)
    {
      CompressEnd (pinst);
      pinst->compress_active = FALSE;
    }

  QueryPerformanceFrequency((LARGE_INTEGER *)&performanceCounterFrequency);
  performanceSamples = 0;
  minPerformanceTime = 0x7fffffffffffffff;
  maxPerformanceTime = 0;
  accumulatedPerformanceTime = 0;

  pinst->destSize = lpbiOut->biSizeImage;
  /* check that the conversion formats are valid */
  dw = CompressQuery (pinst, lpbiIn, (JPEGBITMAPINFOHEADER *)lpbiOut);
  if (dw != ICERR_OK)
    {
      return dw;
    }

  /* Step 1: allocate and initialize JPEG decompression object */

  pinst->cinfo.err = jpeg_exception_error (&(pinst->error_mgr));

  __try
  {
    /* Now we can initialize the JPEG decompression object. */
    jpeg_create_compress (&(pinst->cinfo));
    pinst->compress_active = TRUE;


    if (lpbiIn->biCompression == BI_RGB)
      {
	switch (lpbiIn->biBitCount)
	  {
	  case 16:
	    pinst->cinfo.pixel_size = 2;
	    pinst->cinfo.pixel_mask = 0xFFFF0000;
	    pinst->cinfo.red_pixel_mask = 0xF8;		/* high 5 bits */
	    pinst->cinfo.red_pixel_shift = 7;
	    pinst->cinfo.green_pixel_mask = 0xF8;	/* high 5 bits */
	    pinst->cinfo.green_pixel_shift = 2;
	    pinst->cinfo.blue_pixel_mask = 0xF8;	/* high 5 bits */
	    pinst->cinfo.blue_pixel_shift = -3;
	    break;
	  case 24:
	    pinst->cinfo.pixel_size = 3;
	    pinst->cinfo.pixel_mask = 0xFF000000;
	    pinst->cinfo.red_pixel_mask = 0xFF;		/* high 8 bits */
	    pinst->cinfo.red_pixel_shift = 16;
	    pinst->cinfo.green_pixel_mask = 0xFF;	/* high 8 bits */
	    pinst->cinfo.green_pixel_shift = 8;
	    pinst->cinfo.blue_pixel_mask = 0xFF;	/* high 8 bits */
	    pinst->cinfo.blue_pixel_shift = 0;
	    break;
	  case 32:
	    pinst->cinfo.pixel_size = 4;
	    pinst->cinfo.pixel_mask = 0x00000000;
	    pinst->cinfo.red_pixel_mask = 0xFF;		/* high 8 bits */
	    pinst->cinfo.red_pixel_shift = 16;
	    pinst->cinfo.green_pixel_mask = 0xFF;	/* high 8 bits */
	    pinst->cinfo.green_pixel_shift = 8;
	    pinst->cinfo.blue_pixel_mask = 0xFF;	/* high 8 bits */
	    pinst->cinfo.blue_pixel_shift = 0;
	    break;
	  default:
	    break;
	  }
      }
    else if ((lpbiIn->biCompression == BI_BITFIELDS) &&
	     (lpbiIn->biBitCount == 16) &&
	     (((LPDWORD) (lpbiIn + 1))[0] == 0x00f800) &&
	     (((LPDWORD) (lpbiIn + 1))[1] == 0x0007e0) &&
	     (((LPDWORD) (lpbiIn + 1))[2] == 0x00001f))
      {
	pinst->cinfo.pixel_size = 2;
	pinst->cinfo.pixel_mask = 0xFFFF0000;
	pinst->cinfo.red_pixel_mask = 0xF8;	/* high 5 bits */
	pinst->cinfo.red_pixel_shift = 8;
	pinst->cinfo.green_pixel_mask = 0xFC;	/* high 6 bits */
	pinst->cinfo.green_pixel_shift = 3;
	pinst->cinfo.blue_pixel_mask = 0xF8;	/* high 5 bits */
	pinst->cinfo.blue_pixel_shift = -3;
      }

  }
  __except (EXCEPTION_EXECUTE_HANDLER)
  {
    return ((DWORD) ICERR_MEMORY);
  }

  pinst->dwFormat = lpbiOut->biCompression;

  return (ICERR_OK);

}

/*****************************************************************************
 ****************************************************************************/
DWORD FAR PASCAL 
CompressGetSize (INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut)
{
  int dx, dy;
  DWORD size;

  dx = (int) lpbiIn->biWidth;
  dy = (int) lpbiIn->biHeight;


  size = ((((dx * 3) + 3) & ~3) * dy);	// MAXIMUM! Image may expand if
  // no compression, remember headers
  // possibly two sets for interlaced

  size = size + (size / 10);	// extra in the rare case of the output bigger that input

  return size;
}

/*****************************************************************************
 ****************************************************************************/
DWORD FAR PASCAL 
DoCompress (INSTINFO * pinst, ICCOMPRESS FAR * icinfo, DWORD dwSize)
{

  int row_stride;
  char *buffer;

  __try
  {
    /* set destination info */
    icinfo->lpbiOutput->biSizeImage = pinst->destSize;	// fixup some programs, dangerous!

    *(icinfo->lpdwFlags) = AVIIF_KEYFRAME;
    jpeg_compress_dest (&(pinst->cinfo),
			icinfo->lpOutput,
			&(icinfo->lpbiOutput->biSizeImage));

    /* set parameters for compression */

    /* First we supply a description of the input image.
     * Four fields of the cinfo struct must be filled in:
     */

    if (icinfo->lpbiOutput->biHeight <= 288)	/* update 0.91 as per spec */
      pinst->cinfo.image_height = icinfo->lpbiOutput->biHeight;
    else			/* make odd scans one larger than even if odd height */
      pinst->cinfo.image_height = ((icinfo->lpbiOutput->biHeight + 1) / 2);	/* field interlaced */

    pinst->cinfo.image_width = icinfo->lpbiOutput->biWidth;	/* image width and height, in pixels */
    pinst->cinfo.input_components = 3;	/* # of color components per pixel */
    pinst->cinfo.in_color_space = JCS_RGB;	/* colorspace of input image */

    jpeg_set_defaults (&(pinst->cinfo));

    if (pinst->fasterAlgorithm)
      pinst->cinfo.dct_method = JDCT_IFAST;
    else
      pinst->cinfo.dct_method = JDCT_ISLOW;
    jpeg_set_subsampling (&(pinst->cinfo), pinst->xSubSample, pinst->ySubSample);

    pinst->cinfo.smoothing_factor = pinst->smoothingFactor;

    jpeg_set_quality (&(pinst->cinfo),
		      icinfo->dwQuality / 100,
		      TRUE /* limit to baseline-JPEG values */ );
    // pinst->cinfo.restart_in_rows = 16; /* force DRI marker as per MSFT spec */

    if (icinfo->lpbiOutput->biHeight <= 288)
      {				/* update 0.91 as per spec */
	/* non-frame interlaced */
	pinst->cinfo.AVI1_field_id = 0;
	row_stride = ((icinfo->lpbiInput->biWidth * pinst->cinfo.pixel_size) + 3) & ~3;		//align on 32-bits

	// start at bottom and work up scan lines, DIBS go bottom to top
	buffer = ((char *) icinfo->lpInput) + (row_stride *
					   (pinst->cinfo.image_height - 1));
      }
    else
      {				/* frame interlaced, do odd lines first */
	pinst->cinfo.AVI1_field_id = 1;
	row_stride = 2 * (((icinfo->lpbiInput->biWidth * pinst->cinfo.pixel_size) + 3) & ~3);	//align on 32-bits

	buffer = ((char *) icinfo->lpInput) + (row_stride *
					   (pinst->cinfo.image_height - 1));
      }

    jpeg_start_compress (&(pinst->cinfo), TRUE);

    while (pinst->cinfo.next_scanline < pinst->cinfo.image_height)
      {
	(void) jpeg_write_scanlines (&(pinst->cinfo), &buffer, 1);
	buffer -= row_stride;
      }
    jpeg_finish_compress (&(pinst->cinfo));

    if (icinfo->lpbiOutput->biHeight > 288)
      {				/* update 0.91 as per new spec */
	/* field interlaced, do even lines */
	// janb - these next two lines caused th nasty corruption bug
	// pinst->destSize -= icinfo->lpbiOutput->biSizeImage; /* subtract space used for first field */
	// icinfo->lpbiOutput->biSizeImage = pinst->destSize; // fixup endpoint, dangerous!
	/* even scans get truncated if odd height */
	pinst->cinfo.image_height = (icinfo->lpbiOutput->biHeight / 2);		/* field interlaced */

	pinst->cinfo.image_width = icinfo->lpbiOutput->biWidth;		/* image width and height, in pixels */
	pinst->cinfo.input_components = 3;	/* # of color components per pixel */
	pinst->cinfo.in_color_space = JCS_RGB;	/* colorspace of input image */

	jpeg_set_defaults (&(pinst->cinfo));

	jpeg_set_quality (&(pinst->cinfo),
			  icinfo->dwQuality / 100,
			  TRUE /* limit to baseline-JPEG values */ );
	// pinst->cinfo.restart_in_rows = 16; /* force DRI marker as per MSFT spec */

	pinst->cinfo.AVI1_field_id = 2;
	row_stride = (((icinfo->lpbiInput->biWidth * pinst->cinfo.pixel_size) + 3) & ~3);	//align on 32-bits

	buffer = ((char *) icinfo->lpInput) + (row_stride *
			((pinst->cinfo.image_height - 1) * 2)) + row_stride;
	row_stride *= 2;

	jpeg_start_compress (&(pinst->cinfo), TRUE);

	while (pinst->cinfo.next_scanline < pinst->cinfo.image_height)
	  {
	    (void) jpeg_write_scanlines (&(pinst->cinfo), &buffer, 1);
	    buffer -= row_stride;
	  }
	jpeg_finish_compress (&(pinst->cinfo));
      }
  }
  __except (EXCEPTION_EXECUTE_HANDLER)
  {
    return ((DWORD) ICERR_INTERNAL);
  }



  return ((DWORD) ICERR_OK);

}

DWORD FAR PASCAL 
Compress (INSTINFO * pinst, ICCOMPRESS FAR * icinfo, DWORD dwSize)
{
  DWORD status;
  DWORD delta;
  DWORD tries;
  DWORD baseQuality=0;
  __int64 startTime;
  __int64 endTime;


// __asm int 3
  if (pinst->compress_active == FALSE)
    return ((DWORD) ICERR_BADFORMAT);

  QueryPerformanceCounter((LARGE_INTEGER *)&startTime);

  if (icinfo->dwFrameSize == 0)
    status = DoCompress (pinst, icinfo, dwSize);
  else
    {
      baseQuality = icinfo->dwQuality;
      delta = (baseQuality / 2);
      tries = 0;
      status = ICERR_OK;
      while (((delta > 25) ||
	      (icinfo->lpbiOutput->biSizeImage > icinfo->dwFrameSize)) &&
	     (tries < 11) &&
	     (status == ICERR_OK))
	{
	  status = DoCompress (pinst, icinfo, dwSize);
	  if (icinfo->dwFrameSize < icinfo->lpbiOutput->biSizeImage)
	    icinfo->dwQuality -= delta;
	  else
	    {
	      if (icinfo->dwQuality <= baseQuality)
		break;
	      else
		icinfo->dwQuality += delta;
	    }
	  if (icinfo->dwQuality > baseQuality)
	    icinfo->dwQuality = baseQuality;
	  tries++;
	  delta = delta / 2;
	}
    }
  // Does the algorithm call for the following assignment here or should it be inside the else clause? icinfo->dwQuality will
  // be set to zero if (pinst->compress_active = TRUE) AND (icinfo->dwFrameSize ==0).
    icinfo->dwQuality = baseQuality;

  QueryPerformanceCounter((LARGE_INTEGER *)&endTime);
  endTime -= startTime;
  
  if (endTime > maxPerformanceTime)
	  maxPerformanceTime = endTime;
  if (endTime < minPerformanceTime)
	  minPerformanceTime = endTime;

  accumulatedPerformanceTime += endTime;
  performanceSamples++;

  return status;
}

/*****************************************************************************
 ****************************************************************************/
DWORD FAR PASCAL 
CompressEnd (INSTINFO * pinst)
{
	char buf[128];

  if (pinst->compress_active == TRUE)
    {
      /* This is an important step since it will release a good deal of memory. */
      jpeg_destroy_compress (&(pinst->cinfo));
      pinst->compress_active = FALSE;
	  if (performanceSamples > 0) {
		  sprintf(buf,"   %f average",
				  (double)((double)accumulatedPerformanceTime / (double)performanceSamples / (double)performanceCounterFrequency));
		  LogErrorMessage(buf);
		  sprintf(buf,"   %f maximum",
				  (double)minPerformanceTime / (double)performanceCounterFrequency);
		  LogErrorMessage(buf);
		  sprintf(buf,"   %f minimum",
				  (double)maxPerformanceTime / (double)performanceCounterFrequency);
		  LogErrorMessage(buf);
		  sprintf(buf,"   %i cycles",
				  (unsigned long)performanceSamples);
		  LogErrorMessage(buf);
		  LogErrorMessage("Compression performance seconds/cycle");
	  }
}

  return (DWORD) ICERR_OK;

}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
DecompressQuery (INSTINFO * pinst,
		 JPEGBITMAPINFOHEADER * lpbiIn,
		 LPBITMAPINFOHEADER lpbiOut)
{
char buf[256];

  if (driverEnabled == FALSE)
    return (DWORD) ICERR_BADFORMAT;

  //
  // determine if the input DIB data is in a format we like.
  //
  if ((lpbiIn == NULL) ||
      (lpbiIn->biBitCount != 24) ||
      ((lpbiIn->biCompression != FOURCC_MJPEG) &&
       (lpbiIn->biCompression != FOURCC_GEPJ)))
    {
      return (DWORD) ICERR_BADFORMAT;
    }
  else if (lpbiIn->biSize == sizeof (JPEGBITMAPINFOHEADER))
    {
      if ((lpbiIn->JPEGProcess != JPEG_PROCESS_BASELINE) ||
	  (lpbiIn->JPEGColorSpaceID != JPEG_YCbCr) ||
	  (lpbiIn->JPEGBitsPerSample != 8))
	{
	  return (DWORD) ICERR_BADFORMAT;
	}
    }

  //
  //  are we being asked to query just the input format?
  //
  if (lpbiOut == NULL)
    {
      return ICERR_OK;
    }


  // check output format to make sure we can convert to this

  // must be full dib
  if (((lpbiOut->biCompression == BI_RGB) && (lpbiOut->biBitCount == 16)) ||
      ((lpbiOut->biCompression == BI_RGB) && (lpbiOut->biBitCount == 24)) ||
      ((lpbiOut->biCompression == BI_RGB) && (lpbiOut->biBitCount == 32)))
    {
	  // log what format we are asked about
	  sprintf(buf,"Decompress query: RGB%i supported",lpbiOut->biBitCount);
	  LogErrorMessage(buf);
    }
  else if ((lpbiOut->biCompression == BI_BITFIELDS) &&
	   (lpbiOut->biBitCount == 16) &&
	   (((LPDWORD) (lpbiOut + 1))[0] == 0x00f800) &&
	   (((LPDWORD) (lpbiOut + 1))[1] == 0x0007e0) &&
	   (((LPDWORD) (lpbiOut + 1))[2] == 0x00001f))
    {
	  // log what format we are asked about
	  sprintf(buf,"Decompress query: BITFIELD %8x  %8x  %8x supported",
		  ((LPDWORD) (lpbiOut + 1))[0],
		  ((LPDWORD) (lpbiOut + 1))[1],
		  ((LPDWORD) (lpbiOut + 1))[2]);
	  LogErrorMessage(buf);
    }
  else
    {
   	  sprintf(buf,"Decompress query: OTHER:%8x unsupported",lpbiOut->biCompression);
	  LogErrorMessage(buf);
	  return (DWORD) ICERR_BADFORMAT;
    }


  /* must be 1:1 (no stretching) */
  if ((lpbiOut->biWidth != lpbiIn->biWidth) ||
      (lpbiOut->biHeight != lpbiIn->biHeight))
    {
	  LogErrorMessage("Decompress query: non 1:1 unsupported");
      return ((DWORD) ICERR_BADFORMAT);
    }

  if(lpbiOut->biWidth > MAX_WIDTH) {
      return ((DWORD) ICERR_BADFORMAT);
  }

  return ICERR_OK;
}

/*****************************************************************************
 ****************************************************************************/
DWORD 
DecompressGetFormat (INSTINFO * pinst,
		     LPBITMAPINFOHEADER lpbiIn,
		     LPBITMAPINFOHEADER lpbiOut)
{
  DWORD dw;
  int dx, dy;

  // see if the format is ok
  dw = DecompressQuery (pinst, (JPEGBITMAPINFOHEADER *)lpbiIn, NULL);
  if (dw != ICERR_OK)
    {
      return dw;
    }

  //
  // if lpbiOut == NULL then, return the size required to hold a output
  // format
  //
  if (lpbiOut == NULL)
    {
      return sizeof (BITMAPINFOHEADER);
    }

  dx = (int) lpbiIn->biWidth;
  dy = (int) lpbiIn->biHeight;

  /* prefer 24-bit dib */
  lpbiOut->biSize = sizeof (BITMAPINFOHEADER);
  lpbiOut->biWidth = dx;
  lpbiOut->biHeight = dy;
  lpbiOut->biPlanes = 1;
  lpbiOut->biBitCount = 24;
  lpbiOut->biCompression = BI_RGB;
  lpbiOut->biXPelsPerMeter = 0;
  lpbiOut->biYPelsPerMeter = 0;
  lpbiOut->biClrUsed = 0;
  lpbiOut->biClrImportant = 0;
  lpbiOut->biSizeImage = (((dx * 3) + 3) & ~3) * dy;

  return ICERR_OK;
}


/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
DecompressBegin (INSTINFO * pinst,
		 LPBITMAPINFOHEADER lpbiIn,
		 LPBITMAPINFOHEADER lpbiOut)
{
  DWORD dw;

//      __asm int 3

  QueryPerformanceFrequency((LARGE_INTEGER *)&performanceCounterFrequency);
  performanceSamples = 0;
  minPerformanceTime = 0x7fffffffffffffff;
  maxPerformanceTime = 0;
  accumulatedPerformanceTime = 0;

  __try
  {
    if (pinst->decompress_active == TRUE)
      {
	DecompressEnd (pinst);
	pinst->decompress_active = FALSE;
      }

    /* check that the conversion formats are valid */
    dw = DecompressQuery (pinst, (JPEGBITMAPINFOHEADER *)lpbiIn, lpbiOut);
    if (dw != ICERR_OK)
      {
	return dw;
      }

    /* Step 1: allocate and initialize JPEG decompression object */

    pinst->dinfo.err = jpeg_exception_error (&(pinst->error_mgr));

    /* Now we can initialize the JPEG decompression object. */
    jpeg_create_decompress (&(pinst->dinfo));
    pinst->decompress_active = TRUE;

    if (lpbiOut->biCompression == BI_RGB)
      {
	switch (lpbiOut->biBitCount)
	  {
	  case 16:
	    pinst->dinfo.pixel_size = 2;
	    pinst->dinfo.pixel_mask = 0xFFFF0000;
	    pinst->dinfo.red_table = shiftl7bits5;
	    pinst->dinfo.green_table = shiftl2bits5;
	    pinst->dinfo.blue_table = shiftr3bits5;
	    break;
	  case 24:
	    pinst->dinfo.pixel_size = 3;
	    pinst->dinfo.pixel_mask = 0xFF000000;
	    pinst->dinfo.red_table = shiftl16bits8;
	    pinst->dinfo.green_table = shiftl8bits8;
	    pinst->dinfo.blue_table = shiftl0bits8;
	    break;
	  case 32:
	    pinst->dinfo.pixel_size = 4;
	    pinst->dinfo.pixel_mask = 0x00000000;
	    pinst->dinfo.red_table = shiftl16bits8;
	    pinst->dinfo.green_table = shiftl8bits8;
	    pinst->dinfo.blue_table = shiftl0bits8;
	    break;
	  default:
	    break;
	  }
      }
    else if ((lpbiOut->biCompression == BI_BITFIELDS) &&
	     (lpbiOut->biBitCount == 16) &&
	     (((LPDWORD) (lpbiOut + 1))[0] == 0x00f800) &&
	     (((LPDWORD) (lpbiOut + 1))[1] == 0x0007e0) &&
	     (((LPDWORD) (lpbiOut + 1))[2] == 0x00001f))
      {
	pinst->dinfo.pixel_size = 2;
	pinst->dinfo.pixel_mask = 0xFFFF0000;
	pinst->dinfo.red_table = shiftl8bits5;
	pinst->dinfo.green_table = shiftl3bits6;
	pinst->dinfo.blue_table = shiftr3bits5;
      }
  }
  __except (EXCEPTION_EXECUTE_HANDLER)
  {
    return ((DWORD) ICERR_MEMORY);
  }

  pinst->dwFormat = lpbiIn->biCompression;

  return (ICERR_OK);

}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
Decompress (INSTINFO * pinst, ICDECOMPRESS FAR * icinfo, DWORD dwSize)
{
  long row_stride;
  char *buffer;
  long row;
  BOOL firstFieldWasOdd = FALSE;
  __int64 startTime;
  __int64 endTime;
  char dummyBuffer[4 * MAX_WIDTH]; /* (4Bpp) * (width) */
  char * dummyBufferPtr = dummyBuffer;


// __asm int 3

  if (pinst->decompress_active == FALSE)
    return ((DWORD) ICERR_BADFORMAT);

  QueryPerformanceCounter((LARGE_INTEGER *)&startTime);

  __try
  {
    jpeg_decompress_src (&(pinst->dinfo),
			 icinfo->lpInput,
			 icinfo->lpbiInput->biSizeImage);

    (void) jpeg_read_header (&(pinst->dinfo), TRUE);

    if (pinst->fasterAlgorithm)
      pinst->dinfo.dct_method = JDCT_IFAST;
    else
      pinst->dinfo.dct_method = JDCT_ISLOW;

    pinst->dinfo.do_fancy_upsampling = pinst->fancyUpsampling;

    jpeg_start_decompress (&(pinst->dinfo));

    /* the Fast MMPro has incorrect parms in the DIB header, fix them */
    // icinfo->lpbiOutput->biHeight = pinst->dinfo.image_height;
    // icinfo->lpbiOutput->biWidth = pinst->dinfo.image_width;

    if (pinst->dinfo.AVI1_field_id == 0)
      {				/* non-interlaced */
	row_stride = ((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3;	//align on 32-bits

	// start at bottom and work up scan lines, DIBS go bottom to top
	buffer = ((char *) icinfo->lpOutput) + (row_stride * (icinfo->lpbiOutput->biHeight - 1));
      }
    else if (pinst->dinfo.AVI1_field_id == 1)
      {				/* field interlaced odd frame */
	firstFieldWasOdd = TRUE;
	row_stride = 2 * (((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3);	//align on 32-bits

	// start at bottom and work up scan lines, DIBS go bottom to top
	buffer = ((char *) icinfo->lpOutput) + (row_stride *
				  ((icinfo->lpbiOutput->biHeight - 1) / 2));
      }
    else if (pinst->dinfo.AVI1_field_id == 2)
      {				/* field interlaced even frame */
	row_stride = (((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3);	//align on 32-bits

        buffer = ((char *) icinfo->lpOutput) + (
            row_stride * (icinfo->lpbiOutput->biHeight - 1));
        
	row_stride *= 2;
      }

	// do calculations to fix up captured data tha has a different BMP size and
	// internal jpeg size, this is NOT OpenDML conforming, (Miro DC20's make this)


    while (pinst->dinfo.output_scanline < pinst->dinfo.output_height) {
		if (buffer > (char *) icinfo->lpOutput) {
			(void) jpeg_read_scanlines (&(pinst->dinfo), &buffer, 1);
			buffer -= row_stride;
			}
		else 
			(void) jpeg_read_scanlines (&(pinst->dinfo), &dummyBufferPtr, 1);
      }

    (void) jpeg_finish_decompress (&(pinst->dinfo));

    if (pinst->dinfo.AVI1_field_id != 0)
      {				/* field interlaced, get other field */

	if (jpeg_read_header (&(pinst->dinfo), TRUE) != JPEG_HEADER_OK)
	  {			/* no other field */
	    /* the spec says duplicate the odd lines */
	    row_stride = (((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3);	//align on 32-bits

	    buffer = ((char *) icinfo->lpOutput);
	    for (row = 0; row < icinfo->lpbiOutput->biHeight; row += 2)
	      {
		memcpy (buffer + row_stride, buffer, row_stride);
		buffer += (row_stride + row_stride);	/* next odd line */
	      }
	  }
	else
	  {
	  if (pinst->fasterAlgorithm)
      pinst->dinfo.dct_method = JDCT_IFAST;
    else
      pinst->dinfo.dct_method = JDCT_ISLOW;

    pinst->dinfo.do_fancy_upsampling = pinst->fancyUpsampling;

		jpeg_start_decompress (&(pinst->dinfo));

	    if (pinst->dinfo.AVI1_field_id == 0)
	      {			/* non-interlaced, DATA IS WRONG */
		row_stride = ((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3;	//align on 32-bits

		// start at bottom and work up scan lines, DIBS go bottom to top
		buffer = ((char *) icinfo->lpOutput) + (row_stride * (icinfo->lpbiOutput->biHeight - 1));
	      }
	    else if ((pinst->dinfo.AVI1_field_id == 1) && (firstFieldWasOdd == FALSE))
	      {			/* field interlaced odd frame */
		row_stride = 2 * (((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3);	//align on 32-bits

		// start at bottom and work up scan lines, DIBS go bottom to top
		buffer = ((char *) icinfo->lpOutput) + (row_stride *
				  ((icinfo->lpbiOutput->biHeight - 1) / 2));
	      }
	    else if ((pinst->dinfo.AVI1_field_id == 2) || (firstFieldWasOdd == TRUE))
	      {			/* field interlaced even frame */
		row_stride = (((icinfo->lpbiOutput->biWidth * pinst->dinfo.pixel_size) + 3) & ~3);	//align on 32-bits

		buffer = ((char *) icinfo->lpOutput) + (
                    row_stride * (icinfo->lpbiOutput->biHeight - 1));
		row_stride *= 2;
	      }

	    while (pinst->dinfo.output_scanline < pinst->dinfo.output_height) {
			if (buffer > (char *) icinfo->lpOutput) {
				(void) jpeg_read_scanlines (&(pinst->dinfo), &buffer, 1);
				buffer -= row_stride;
				}
			else
				(void) jpeg_read_scanlines (&(pinst->dinfo), &dummyBufferPtr, 1);
	      }

	    (void) jpeg_finish_decompress (&(pinst->dinfo));
	  }
      }
  }
  __except (EXCEPTION_EXECUTE_HANDLER)
  {
    return ((DWORD) ICERR_INTERNAL);
  }

  QueryPerformanceCounter((LARGE_INTEGER *)&endTime);
  endTime -= startTime;
  
  if (endTime > maxPerformanceTime)
	  maxPerformanceTime = endTime;
  if (endTime < minPerformanceTime)
	  minPerformanceTime = endTime;

  accumulatedPerformanceTime += endTime;
  performanceSamples++;

  return ICERR_OK;
}

/*****************************************************************************
 *
 * DecompressGetPalette() implements ICM_GET_PALETTE
 *
 * This function has no Compress...() equivalent
 *
 * It is used to pull the palette from a frame in order to possibly do
 * a palette change.
 *
 ****************************************************************************/
DWORD NEAR PASCAL 
DecompressGetPalette (INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut)
{

  /*
   * only applies to 8-bit output formats. We only decompress to 16/24/32 bits
   */
  return ((DWORD) ICERR_BADFORMAT);

}

/*****************************************************************************
 ****************************************************************************/
DWORD NEAR PASCAL 
DecompressEnd (INSTINFO * pinst)
{
char buf[256];

  if (pinst->decompress_active == TRUE)
    {
      /* Step 8: Release JPEG decompression object */
      /* This is an important step since it will release a good deal of memory. */
      jpeg_destroy_decompress (&(pinst->dinfo));
      pinst->dwFormat = 0;
      pinst->decompress_active = FALSE;
	  if (performanceSamples > 0) {
		  sprintf(buf,"   %f average",
				  (double)((double)accumulatedPerformanceTime / (double)performanceSamples / (double)performanceCounterFrequency));
		  LogErrorMessage(buf);
		  sprintf(buf,"   %f maximum",
				  (double)minPerformanceTime / (double)performanceCounterFrequency);
		  LogErrorMessage(buf);
		  sprintf(buf,"   %f minimum",
				  (double)maxPerformanceTime / (double)performanceCounterFrequency);
		  LogErrorMessage(buf);
		  sprintf(buf,"   %i cycles",
				  (unsigned long)performanceSamples);
		  LogErrorMessage(buf);
		  LogErrorMessage("Decompression performance seconds/cycle");
	  }

    }

  return ICERR_OK;
}


/*****************************************************************************
 ****************************************************************************/

#ifdef DEBUG

void FAR CDECL 
debugprintf (LPSTR szFormat,...)
{
  char ach[128];
  va_list va;

  static BOOL fDebug = -1;

  if (fDebug == -1)
    fDebug = GetProfileIntA ("Debug", "MJPEG", FALSE);

  if (!fDebug)
    return;

  lstrcpyA (ach, "MJPEG: ");

  va_start (va, szFormat);
  wvsprintfA (ach + 7, szFormat, va);
  va_end (va);
  lstrcatA (ach, "\r\n");

  OutputDebugStringA (ach);
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\mjpeg.h ===
/*
 * mjpeg.h   Software MJPEG Codec
 *
 * Copyright (c) Paradigm Matrix 1994.
 */

#ifndef MJPEG_H_
#define MJPEG_H_

#include "tools16_inc\msvideo.h"
#include <msviddrv.h>
#include <mmreg.h>
#include <winnt.h>      // for TCHAR
#include "tools16_inc\compddk.h"

#ifdef DRAW_SUPPORT
//#include <vcstruct.h>
//#include <vcuser.h>
#endif

#include "jpeglib.h"


// externs supporting TCHAR reg key and values      -anuragsh
extern const TCHAR *szSubKey_SoftwareParadigmMatrixSoftwareMJPEGCodec;
extern const TCHAR *szValue_Enabled;




#define FOURCC_MJPEG		mmioFOURCC('M', 'J', 'P', 'G')

// the Mac seems to make frames with this tag and JFIF header, with DHT
#define FOURCC_GEPJ			mmioFOURCC('g', 'e', 'p', 'j')

typedef struct {
    DWORD   dwFlags;    // flags from ICOPEN
	DWORD   dwFormat;
    struct jpeg_error_mgr error_mgr;
    struct jpeg_compress_struct   cinfo;
    struct jpeg_decompress_struct dinfo;
	BOOLEAN compress_active;
	BOOLEAN decompress_active;
	BOOLEAN draw_active;
	int xSubSample;
	int ySubSample;
	int smoothingFactor;
	BOOLEAN fancyUpsampling;
	BOOLEAN reportNonStandard;
	BOOLEAN fasterAlgorithm;
	BOOLEAN enabled;
	

	int destSize;  // some programs seem not to remember
	
    /* support for drawing */
#ifdef DRAW_SUPPORT
    VCUSER_HANDLE vh;
#endif
    HWND	hwnd;
    RECT 	rcSource;
    RECT	rcDest;
    HBRUSH	hKeyBrush;


} INSTINFO, *PINSTINFO;


typedef struct tagJPEGEXBMINFOHEADER {
	BITMAPINFOHEADER;
	/* extended BITMAPINFOHEADER fields */
	DWORD   biExtDataOffset;
    JPEGINFOHEADER;	
} JPEGBITMAPINFOHEADER;


typedef struct ErrorMessageEntry {
	struct ErrorMessageEntry *next;
	char * msg;
} tErrorMessageEntry;
	
/*
 * message processing functions in mjpeg.c
 */
INSTINFO * NEAR PASCAL Open(ICOPEN FAR * icinfo);
DWORD NEAR PASCAL Close(INSTINFO * pinst);
BOOL NEAR PASCAL QueryAbout(INSTINFO * pinst);
DWORD NEAR PASCAL About(INSTINFO * pinst, HWND hwnd);
BOOL NEAR PASCAL QueryConfigure(INSTINFO * pinst);
DWORD NEAR PASCAL Configure(INSTINFO * pinst, HWND hwnd);
DWORD NEAR PASCAL GetState(INSTINFO * pinst, LPVOID pv, DWORD dwSize);
DWORD NEAR PASCAL SetState(INSTINFO * pinst, LPVOID pv, DWORD dwSize);
DWORD NEAR PASCAL GetInfo(INSTINFO * pinst, ICINFO FAR *icinfo, DWORD dwSize);
DWORD FAR PASCAL CompressQuery(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, JPEGBITMAPINFOHEADER * lpbiOut);
DWORD FAR PASCAL CompressGetFormat(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, JPEGBITMAPINFOHEADER * lpbiOut);
DWORD FAR PASCAL CompressBegin(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD FAR PASCAL CompressGetSize(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD FAR PASCAL Compress(INSTINFO * pinst, ICCOMPRESS FAR *icinfo, DWORD dwSize);
DWORD FAR PASCAL CompressEnd(INSTINFO * pinst);
DWORD NEAR PASCAL DecompressQuery(INSTINFO * pinst, JPEGBITMAPINFOHEADER * lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD NEAR PASCAL DecompressGetFormat(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD NEAR PASCAL DecompressBegin(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD NEAR PASCAL Decompress(INSTINFO * pinst, ICDECOMPRESS FAR *icinfo, DWORD dwSize);
DWORD NEAR PASCAL DecompressGetPalette(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD NEAR PASCAL DecompressEnd(INSTINFO * pinst);


DWORD DrawQuery(INSTINFO * pinst, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut);
DWORD DrawBegin(INSTINFO * pinst,ICDRAWBEGIN FAR *icinfo, DWORD dwSize);
DWORD Draw(INSTINFO * pinst, ICDRAW FAR *icinfo, DWORD dwSize);
DWORD DrawEnd(INSTINFO * pinst);
DWORD DrawWindow(PINSTINFO pinst, PRECT prc);


extern DWORD shiftl16bits8[256];
extern DWORD shiftl8bits8[256];
extern DWORD shiftl0bits8[256];
extern DWORD shiftl7bits5[256];
extern DWORD shiftl2bits5[256];
extern DWORD shiftr3bits5[256];
extern DWORD shiftl8bits5[256];
extern DWORD shiftl3bits6[256];

extern HMODULE ghModule;

#endif // #ifndef MJPEG_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\tools16_inc\compddk.h ===
/**************************************************************************
 *
 *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
 *  PURPOSE.
 *
 *
 *
 *  Compddk.h - include file for implementing installable compressors
 *
 *  Copyright (c) 1990-1995, Microsoft Corp.  All rights reserved.
 *
 **********************************************************************
 *
 * To register FOURCC's for codec types please obtain a
 * copy of the Multimedia Developer Registration Kit from:
 *
 *  Microsoft Corporation
 *  Multimedia Systems Group
 *  Product Marketing
 *  One Microsoft Way
 *  Redmond, WA 98052-6399
 *
 *
*/

#ifndef _INC_COMPDDK
#define _INC_COMPDDK	50	/* version number */

#ifndef RC_INVOKED
#ifndef _WIN32
#pragma pack(1)         /* Assume byte packing throughout */
#endif
#endif  /* RC_INVOKED */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif	/* __cplusplus */

// begin_vfw32

#define ICVERSION       0x0104

DECLARE_HANDLE(HIC);     /* Handle to a Installable Compressor */

//
// this code in biCompression means the DIB must be accesed via
// 48 bit pointers! using *ONLY* the selector given.
//
#define BI_1632  0x32333631     // '1632'

#ifndef mmioFOURCC
#define mmioFOURCC( ch0, ch1, ch2, ch3 )				\
		( (DWORD)(BYTE)(ch0) | ( (DWORD)(BYTE)(ch1) << 8 ) |	\
		( (DWORD)(BYTE)(ch2) << 16 ) | ( (DWORD)(BYTE)(ch3) << 24 ) )
#endif

#ifndef aviTWOCC
#define aviTWOCC(ch0, ch1) ((WORD)(BYTE)(ch0) | ((WORD)(BYTE)(ch1) << 8))
#endif

#ifndef ICTYPE_VIDEO
#define ICTYPE_VIDEO    mmioFOURCC('v', 'i', 'd', 'c')
#define ICTYPE_AUDIO    mmioFOURCC('a', 'u', 'd', 'c')
#endif

#ifndef ICERR_OK
#define ICERR_OK                0L
#define ICERR_DONTDRAW          1L
#define ICERR_NEWPALETTE        2L
#define ICERR_GOTOKEYFRAME	3L
#define ICERR_STOPDRAWING 	4L

#define ICERR_UNSUPPORTED      -1L
#define ICERR_BADFORMAT        -2L
#define ICERR_MEMORY           -3L
#define ICERR_INTERNAL         -4L
#define ICERR_BADFLAGS         -5L
#define ICERR_BADPARAM         -6L
#define ICERR_BADSIZE          -7L
#define ICERR_BADHANDLE        -8L
#define ICERR_CANTUPDATE       -9L
#define ICERR_ABORT	       -10L
#define ICERR_ERROR            -100L
#define ICERR_BADBITDEPTH      -200L
#define ICERR_BADIMAGESIZE     -201L

#define ICERR_CUSTOM           -400L    // errors less than ICERR_CUSTOM...
#endif

/* Values for dwFlags of ICOpen() */
#ifndef ICMODE_COMPRESS
#define ICMODE_COMPRESS		1
#define ICMODE_DECOMPRESS	2
#define ICMODE_FASTDECOMPRESS   3
#define ICMODE_QUERY            4
#define ICMODE_FASTCOMPRESS     5
#define ICMODE_DRAW             8
#endif
#ifndef _WIN32					// ;Internal
#define ICMODE_INTERNALF_FUNCTION32	0x8000	// ;Internal
#define ICMODE_INTERNALF_MASK		0x8000	// ;Internal
#endif						// ;Internal

/* Flags for AVI file index */
#define AVIIF_LIST	0x00000001L
#define AVIIF_TWOCC	0x00000002L
#define AVIIF_KEYFRAME	0x00000010L

/* quality flags */
#define ICQUALITY_LOW       0
#define ICQUALITY_HIGH      10000
#define ICQUALITY_DEFAULT   -1

/************************************************************************
************************************************************************/

#define ICM_USER          (DRV_USER+0x0000)

#define ICM_RESERVED      ICM_RESERVED_LOW
#define ICM_RESERVED_LOW  (DRV_USER+0x1000)
#define ICM_RESERVED_HIGH (DRV_USER+0x2000)

/************************************************************************

    messages.

************************************************************************/

#define ICM_GETSTATE                (ICM_RESERVED+0)    // Get compressor state
#define ICM_SETSTATE                (ICM_RESERVED+1)    // Set compressor state
#define ICM_GETINFO                 (ICM_RESERVED+2)    // Query info about the compressor

#define ICM_CONFIGURE               (ICM_RESERVED+10)   // show the configure dialog
#define ICM_ABOUT                   (ICM_RESERVED+11)   // show the about box

#define ICM_GETERRORTEXT            (ICM_RESERVED+12)   // get error text TBD ;Internal
#define ICM_GETFORMATNAME	    (ICM_RESERVED+20)	// get a name for a format ;Internal
#define ICM_ENUMFORMATS		    (ICM_RESERVED+21)	// cycle through formats ;Internal

#define ICM_GETDEFAULTQUALITY       (ICM_RESERVED+30)   // get the default value for quality
#define ICM_GETQUALITY              (ICM_RESERVED+31)   // get the current value for quality
#define ICM_SETQUALITY              (ICM_RESERVED+32)   // set the default value for quality

#define ICM_SET			    (ICM_RESERVED+40)	// Tell the driver something
#define ICM_GET			    (ICM_RESERVED+41)	// Ask the driver something

// Constants for ICM_SET:
#define ICM_FRAMERATE       mmioFOURCC('F','r','m','R')
#define ICM_KEYFRAMERATE    mmioFOURCC('K','e','y','R')

/************************************************************************

    ICM specific messages.

************************************************************************/

#define ICM_COMPRESS_GET_FORMAT     (ICM_USER+4)    // get compress format or size
#define ICM_COMPRESS_GET_SIZE       (ICM_USER+5)    // get output size
#define ICM_COMPRESS_QUERY          (ICM_USER+6)    // query support for compress
#define ICM_COMPRESS_BEGIN          (ICM_USER+7)    // begin a series of compress calls.
#define ICM_COMPRESS                (ICM_USER+8)    // compress a frame
#define ICM_COMPRESS_END            (ICM_USER+9)    // end of a series of compress calls.

#define ICM_DECOMPRESS_GET_FORMAT   (ICM_USER+10)   // get decompress format or size
#define ICM_DECOMPRESS_QUERY        (ICM_USER+11)   // query support for dempress
#define ICM_DECOMPRESS_BEGIN        (ICM_USER+12)   // start a series of decompress calls
#define ICM_DECOMPRESS              (ICM_USER+13)   // decompress a frame
#define ICM_DECOMPRESS_END          (ICM_USER+14)   // end a series of decompress calls
#define ICM_DECOMPRESS_SET_PALETTE  (ICM_USER+29)   // fill in the DIB color table
#define ICM_DECOMPRESS_GET_PALETTE  (ICM_USER+30)   // fill in the DIB color table

#define ICM_DRAW_QUERY              (ICM_USER+31)   // query support for dempress
#define ICM_DRAW_BEGIN              (ICM_USER+15)   // start a series of draw calls
#define ICM_DRAW_GET_PALETTE        (ICM_USER+16)   // get the palette needed for drawing
#define ICM_DRAW_UPDATE             (ICM_USER+17)   // update screen with current frame ;Internal
#define ICM_DRAW_START              (ICM_USER+18)   // start decompress clock
#define ICM_DRAW_STOP               (ICM_USER+19)   // stop decompress clock
#define ICM_DRAW_BITS               (ICM_USER+20)   // decompress a frame to screen ;Internal
#define ICM_DRAW_END                (ICM_USER+21)   // end a series of draw calls
#define ICM_DRAW_GETTIME            (ICM_USER+32)   // get value of decompress clock
#define ICM_DRAW                    (ICM_USER+33)   // generalized "render" message
#define ICM_DRAW_WINDOW             (ICM_USER+34)   // drawing window has moved or hidden
#define ICM_DRAW_SETTIME            (ICM_USER+35)   // set correct value for decompress clock
#define ICM_DRAW_REALIZE            (ICM_USER+36)   // realize palette for drawing
#define ICM_DRAW_FLUSH	            (ICM_USER+37)   // clear out buffered frames
#define ICM_DRAW_RENDERBUFFER       (ICM_USER+38)   // draw undrawn things in queue

#define ICM_DRAW_START_PLAY         (ICM_USER+39)   // start of a play
#define ICM_DRAW_STOP_PLAY          (ICM_USER+40)   // end of a play

#define ICM_DRAW_SUGGESTFORMAT      (ICM_USER+50)   // Like ICGetDisplayFormat
#define ICM_DRAW_CHANGEPALETTE      (ICM_USER+51)   // for animating palette

#define ICM_DRAW_IDLE               (ICM_USER+52)   // send each frame time ;Internal

#define ICM_GETBUFFERSWANTED        (ICM_USER+41)   // ask about prebuffering

#define ICM_GETDEFAULTKEYFRAMERATE  (ICM_USER+42)   // get the default value for key frames


#define ICM_DECOMPRESSEX_BEGIN      (ICM_USER+60)   // start a series of decompress calls
#define ICM_DECOMPRESSEX_QUERY      (ICM_USER+61)   // start a series of decompress calls
#define ICM_DECOMPRESSEX            (ICM_USER+62)   // decompress a frame
#define ICM_DECOMPRESSEX_END        (ICM_USER+63)   // end a series of decompress calls

#define ICM_COMPRESS_FRAMES_INFO    (ICM_USER+70)   // tell about compress to come
#define ICM_COMPRESS_FRAMES         (ICM_USER+71)   // compress a bunch of frames ;Internal
#define ICM_SET_STATUS_PROC	        (ICM_USER+72)   // set status callback

/************************************************************************
************************************************************************/

typedef struct {
    DWORD               dwSize;         // sizeof(ICOPEN)
    DWORD               fccType;        // 'vidc'
    DWORD               fccHandler;     //
    DWORD               dwVersion;      // version of compman opening you
    DWORD               dwFlags;        // LOWORD is type specific
    LRESULT             dwError;        // error return.
    LPVOID              pV1Reserved;    // Reserved
    LPVOID              pV2Reserved;    // Reserved
    DWORD               dnDevNode;      // Devnode for PnP devices
} ICOPEN;

/************************************************************************
************************************************************************/

typedef struct {
    DWORD   dwSize;                 // sizeof(ICINFO)
    DWORD   fccType;                // compressor type     'vidc' 'audc'
    DWORD   fccHandler;             // compressor sub-type 'rle ' 'jpeg' 'pcm '
    DWORD   dwFlags;                // flags LOWORD is type specific
    DWORD   dwVersion;              // version of the driver
    DWORD   dwVersionICM;           // version of the ICM used
// end_vfw32
#ifdef _WIN32
// begin_vfw32
    //
    // under Win32, the driver always returns UNICODE strings.
    //
    WCHAR   szName[16];             // short name
    WCHAR   szDescription[128];     // long name
    WCHAR   szDriver[128];          // driver that contains compressor
// end_vfw32
#else
    char    szName[16];             // short name
    char    szDescription[128];     // long name
    char    szDriver[128];          // driver that contains compressor
#endif
// begin_vfw32
}   ICINFO;

/* Flags for the <dwFlags> field of the <ICINFO> structure. */
#define VIDCF_QUALITY        0x0001  // supports quality
#define VIDCF_CRUNCH         0x0002  // supports crunching to a frame size
#define VIDCF_TEMPORAL       0x0004  // supports inter-frame compress
#define VIDCF_COMPRESSFRAMES 0x0008  // wants the compress all frames message
#define VIDCF_DRAW           0x0010  // supports drawing
#define VIDCF_FASTTEMPORALC  0x0020  // does not need prev frame on compress
#define VIDCF_FASTTEMPORALD  0x0080  // does not need prev frame on decompress
//#define VIDCF_QUALITYTIME    0x0040  // supports temporal quality

//#define VIDCF_FASTTEMPORAL   (VIDCF_FASTTEMPORALC|VIDCF_FASTTEMPORALD)

/************************************************************************
************************************************************************/

#define ICCOMPRESS_KEYFRAME	0x00000001L

typedef struct {
    DWORD               dwFlags;        // flags

    LPBITMAPINFOHEADER  lpbiOutput;     // output format
    LPVOID              lpOutput;       // output data

    LPBITMAPINFOHEADER  lpbiInput;      // format of frame to compress
    LPVOID              lpInput;        // frame data to compress

    LPDWORD             lpckid;         // ckid for data in AVI file
    LPDWORD             lpdwFlags;      // flags in the AVI index.
    LONG                lFrameNum;      // frame number of seq.
    DWORD               dwFrameSize;    // reqested size in bytes. (if non zero)

    DWORD               dwQuality;      // quality

    // these are new fields
    LPBITMAPINFOHEADER  lpbiPrev;       // format of previous frame
    LPVOID              lpPrev;         // previous frame

} ICCOMPRESS;

/************************************************************************
************************************************************************/

#define ICCOMPRESSFRAMES_PADDING	0x00000001

typedef struct {
    DWORD               dwFlags;        // flags

    LPBITMAPINFOHEADER  lpbiOutput;     // output format
    LPARAM              lOutput;        // output identifier

    LPBITMAPINFOHEADER  lpbiInput;      // format of frame to compress
    LPARAM              lInput;         // input identifier

    LONG                lStartFrame;    // start frame
    LONG                lFrameCount;    // # of frames

    LONG                lQuality;       // quality
    LONG                lDataRate;      // data rate
    LONG                lKeyRate;       // key frame rate

    DWORD		dwRate;		// frame rate, as always
    DWORD		dwScale;

    DWORD		dwOverheadPerFrame;
    DWORD		dwReserved2;

    LONG (CALLBACK *GetData)(LPARAM lInput, LONG lFrame, LPVOID lpBits, LONG len);
    LONG (CALLBACK *PutData)(LPARAM lOutput, LONG lFrame, LPVOID lpBits, LONG len);
} ICCOMPRESSFRAMES;

typedef struct {
    DWORD		dwFlags;
    LPARAM		lParam;

    // messages for Status callback
    #define ICSTATUS_START	    0
    #define ICSTATUS_STATUS	    1	    // l == % done
    #define ICSTATUS_END	    2
    #define ICSTATUS_ERROR	    3	    // l == error string (LPSTR)
    #define ICSTATUS_YIELD	    4
    // return nonzero means abort operation in progress

    LONG (CALLBACK *Status) (LPARAM lParam, UINT message, LONG l);
} ICSETSTATUSPROC;

/************************************************************************
************************************************************************/

#define ICDECOMPRESS_HURRYUP      0x80000000L   // don't draw just buffer (hurry up!)
#define ICDECOMPRESS_UPDATE       0x40000000L   // don't draw just update screen
#define ICDECOMPRESS_PREROLL      0x20000000L   // this frame is before real start
#define ICDECOMPRESS_NULLFRAME    0x10000000L   // repeat last frame
#define ICDECOMPRESS_NOTKEYFRAME  0x08000000L   // this frame is not a key frame

typedef struct {
    DWORD               dwFlags;    // flags (from AVI index...)

    LPBITMAPINFOHEADER  lpbiInput;  // BITMAPINFO of compressed data
                                    // biSizeImage has the chunk size
    LPVOID              lpInput;    // compressed data

    LPBITMAPINFOHEADER  lpbiOutput; // DIB to decompress to
    LPVOID              lpOutput;
    DWORD		ckid;	    // ckid from AVI file
} ICDECOMPRESS;

typedef struct {
    //
    // same as ICM_DECOMPRESS
    //
    DWORD               dwFlags;

    LPBITMAPINFOHEADER  lpbiSrc;    // BITMAPINFO of compressed data
    LPVOID              lpSrc;      // compressed data

    LPBITMAPINFOHEADER  lpbiDst;    // DIB to decompress to
    LPVOID              lpDst;      // output data

    //
    // new for ICM_DECOMPRESSEX
    //
    int                 xDst;       // destination rectangle
    int                 yDst;
    int                 dxDst;
    int                 dyDst;

    int                 xSrc;       // source rectangle
    int                 ySrc;
    int                 dxSrc;
    int                 dySrc;

} ICDECOMPRESSEX;

/************************************************************************
************************************************************************/

#define ICDRAW_QUERY        0x00000001L   // test for support
#define ICDRAW_FULLSCREEN   0x00000002L   // draw to full screen
#define ICDRAW_HDC          0x00000004L   // draw to a HDC/HWND
#define ICDRAW_ANIMATE	    0x00000008L	  // expect palette animation
#define ICDRAW_CONTINUE	    0x00000010L	  // draw is a continuation of previous draw
#define ICDRAW_MEMORYDC	    0x00000020L	  // DC is offscreen, by the way
#define ICDRAW_UPDATING	    0x00000040L	  // We're updating, as opposed to playing
#define ICDRAW_RENDER       0x00000080L   // used to render data not draw it
#define ICDRAW_BUFFER       0x00000100L   // please buffer this data offscreen, we will need to update it

typedef struct {
    DWORD               dwFlags;        // flags

    HPALETTE            hpal;           // palette to draw with
    HWND                hwnd;           // window to draw to
    HDC                 hdc;            // HDC to draw to

    int                 xDst;           // destination rectangle
    int                 yDst;
    int                 dxDst;
    int                 dyDst;

    LPBITMAPINFOHEADER  lpbi;           // format of frame to draw

    int                 xSrc;           // source rectangle
    int                 ySrc;
    int                 dxSrc;
    int                 dySrc;

    DWORD               dwRate;         // frames/second = (dwRate/dwScale)
    DWORD               dwScale;

} ICDRAWBEGIN;

/************************************************************************
************************************************************************/

#define ICDRAW_HURRYUP      0x80000000L   // don't draw just buffer (hurry up!)
#define ICDRAW_UPDATE       0x40000000L   // don't draw just update screen
#define ICDRAW_PREROLL	    0x20000000L	  // this frame is before real start
#define ICDRAW_NULLFRAME    0x10000000L	  // repeat last frame
#define ICDRAW_NOTKEYFRAME  0x08000000L   // this frame is not a key frame

typedef struct {
    DWORD               dwFlags;        // flags
    LPVOID		lpFormat;       // format of frame to decompress
    LPVOID              lpData;         // frame data to decompress
    DWORD               cbData;
    LONG                lTime;          // time in drawbegin units (see dwRate and dwScale)
} ICDRAW;

typedef struct {
    LPBITMAPINFOHEADER	lpbiIn;		// format to be drawn
    LPBITMAPINFOHEADER	lpbiSuggest;	// location for suggested format (or NULL to get size)
    int			dxSrc;		// source extent or 0
    int			dySrc;
    int			dxDst;		// dest extent or 0
    int			dyDst;
    HIC			hicDecompressor;// decompressor you can talk to
} ICDRAWSUGGEST;

/************************************************************************
************************************************************************/

typedef struct {
    DWORD               dwFlags;    // flags (from AVI index...)
    int                 iStart;     // first palette to change
    int                 iLen;       // count of entries to change.
    LPPALETTEENTRY      lppe;       // palette
} ICPALETTE;

// end_vfw32

#ifndef RC_INVOKED
#ifndef _WIN32
#pragma pack()          /* Revert to default packing */
#endif
#endif  /* RC_INVOKED */

#ifdef __cplusplus
}                       /* End of extern "C" { */
#endif	/* __cplusplus */

#endif  /* _INC_COMPDDK */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\code\asyncio.cpp ===
// Copyright (c) 1996 - 1999  Microsoft Corporation.  All Rights Reserved.


#include <streams.h>
#include <asyncio.h>
#include <malloc.h>

// --- CAsyncRequest ---


// implementation of CAsyncRequest representing a single
// outstanding request. All the i/o for this object is done
// in the Complete method.


// init the params for this request.
// Read is not issued until the complete call
HRESULT
CAsyncRequest::Request(
    HANDLE hFile,
    CCritSec* pcsFile,
    LONGLONG llPos,
    LONG lLength,
    BYTE* pBuffer,
    LPVOID pContext,	// filter's context
    DWORD_PTR dwUser)	// downstream filter's context
{
    m_liPos.QuadPart = llPos;
    m_lLength = lLength;
    m_pBuffer = pBuffer;
    m_pContext = pContext;
    m_dwUser = dwUser;
    m_hr = VFW_E_TIMEOUT;   // not done yet

    return S_OK;
}


// issue the i/o if not overlapped, and block until i/o complete.
// returns error code of file i/o
//
//
HRESULT
CAsyncRequest::Complete(
    HANDLE hFile,
    CCritSec* pcsFile)
{

    CAutoLock lock(pcsFile);

    DWORD dw = SetFilePointer(
        hFile,
        m_liPos.LowPart,
        &m_liPos.HighPart,
        FILE_BEGIN);

    // can't tell anything from SetFilePointer return code as a -1 could be
    // an error or the low 32-bits of a successful >4Gb seek pos.
    if ((DWORD) -1 == dw) {
        DWORD dwErr = GetLastError();
        if (NO_ERROR != dwErr) {
            m_hr = AmHresultFromWin32(dwErr);
            ASSERT(FAILED(m_hr));
            return m_hr;
        }
    }


    DWORD dwActual;
    if (!ReadFile(
            hFile,
            m_pBuffer,
            m_lLength,
            &dwActual,
            NULL)) {
	DWORD dwErr = GetLastError();
        m_hr = AmHresultFromWin32(dwErr);
        ASSERT(FAILED(m_hr));
    } else if (dwActual != (DWORD)m_lLength) {
        // tell caller size changed - probably because of EOF
        m_lLength = (LONG) dwActual;
        m_hr = S_FALSE;
    } else {
        m_hr = S_OK;
    }

    return m_hr;
}



// --- CAsyncFile ---

// note - all events created manual reset

CAsyncFile::CAsyncFile()
 : m_hFile(INVALID_HANDLE_VALUE),
   m_hFileUnbuffered(INVALID_HANDLE_VALUE),
   m_hThread(NULL),
   m_evWork(TRUE),
   m_evDone(TRUE),
   m_evStop(TRUE),
   m_lAlign(0),
   m_listWork(NAME("Work list")),
   m_listDone(NAME("Done list")),
   m_bFlushing(FALSE),
   m_cItemsOut(0),
   m_bWaiting(FALSE)
{

}


CAsyncFile::~CAsyncFile()
{
    // move everything to the done list
    BeginFlush();

    // shutdown worker thread
    CloseThread();

    // empty the done list
    POSITION pos = m_listDone.GetHeadPosition();
    while (pos) {
        CAsyncRequest* pRequest = m_listDone.GetNext(pos);
        delete pRequest;
    }
    m_listDone.RemoveAll();

    // close the file
    if (m_hFile != INVALID_HANDLE_VALUE) {
        EXECUTE_ASSERT(CloseHandle(m_hFile));
    }
    if (m_hFileUnbuffered != INVALID_HANDLE_VALUE) {
        EXECUTE_ASSERT(CloseHandle(m_hFileUnbuffered));
    }
}

// calculate the alignment on this file, based on drive type
// and sector size
void
CAsyncFile::CalcAlignment(
    LPCTSTR pFileName,
    LONG& lAlign,
    DWORD& dwType)
{
    // find the bytes per sector that we have to round to for this file
    // -requires finding the 'root path' for this file.
    // allow for very long file names by getting the length first
    LPTSTR ptmp;    //required arg

    lAlign = 1;
    dwType = DRIVE_UNKNOWN;

    DWORD cb = GetFullPathName(pFileName, 0, NULL, &ptmp);
    cb += 1;    // for terminating null

    TCHAR *ch = (TCHAR *)_alloca(cb * sizeof(TCHAR));

    DWORD cb1 = GetFullPathName(pFileName, cb, ch, &ptmp);
    if (0 == cb1 || cb1 >= cb) {
        return;
    }

    // truncate this to the name of the root directory
    if ((ch[0] == TEXT('\\')) && (ch[1] == TEXT('\\'))) {

        // path begins with  \\server\share\path so skip the first
        // three backslashes
        ptmp = &ch[2];
        while (*ptmp && (*ptmp != TEXT('\\'))) {
            ptmp = CharNext(ptmp);
        }
        if (*ptmp) {
            // advance past the third backslash
            ptmp = CharNext(ptmp);
        }
    } else {
        // path must be drv:\path
        ptmp = ch;
    }

    // find next backslash and put a null after it
    while (*ptmp && (*ptmp != TEXT('\\'))) {
        ptmp = CharNext(ptmp);
    }
    // found a backslash ?
    if (*ptmp) {
        // skip it and insert null
        ptmp = CharNext(ptmp);
        *ptmp = TEXT('\0');
    }


    /*  Don't do unbuffered IO for network drives */
    dwType = GetDriveType(ch);
    DbgLog((LOG_TRACE, 2, TEXT("Drive type was %s"),
                          dwType == DRIVE_UNKNOWN ? TEXT("DRIVE_UNKNOWN") :
                          dwType == DRIVE_NO_ROOT_DIR ? TEXT("DRIVE_NO_ROOT_DIR") :
                          dwType == DRIVE_CDROM ? TEXT("DRIVE_CDROM") :
                          dwType == DRIVE_REMOTE ? TEXT("DRIVE_REMOTE") :
                          dwType == DRIVE_REMOVABLE ? TEXT("DRIVE_REMOVABLE") :
                          dwType == DRIVE_FIXED ? TEXT("DRIVE_FIXED") :
                          dwType == DRIVE_RAMDISK ? TEXT("DRIVE_RAMDISK") :
                                                    TEXT("DRIVE_????")));

    if (dwType != DRIVE_REMOTE) {
        /*  This doesn't work on win95 for UNC names - so how can we read
            unbuffered correctly?
        */
        DWORD dwtmp1, dwtmp2, dwtmp3;
        DWORD dwAlign;

        if (!GetDiskFreeSpace(ch,
                              &dwtmp1,
                              &dwAlign,
                              &dwtmp2,
                              &dwtmp3)) {
            /*  Choose 4096 because although network drives seem to return 512
                it doesn't matter if we guess too big
            */
            DbgLog((LOG_ERROR, 2, TEXT("GetDiskFreeSpace failed! - using sector size of 4096 bytes")));
            dwAlign = 4096;
        }
        lAlign = (LONG) dwAlign;
    } else {
        lAlign = 1;
    }

    //  Check alignment is a power of 2
    if ((lAlign & -lAlign) != lAlign) {
        DbgLog((LOG_ERROR, 1, TEXT("Alignment 0x%x not a power of 2!"),
               lAlign));
    }
}

// open the file unbuffered and remember the file handle
// (also want to calculate alignment).
HRESULT
CAsyncFile::Open(LPCTSTR pFileName)
{
    // error if previous open without close
    if (m_hFile != INVALID_HANDLE_VALUE) {
	return E_UNEXPECTED;
    }

    DWORD dwType;
    CalcAlignment(pFileName, m_lAlign, dwType);

    // open the file, unbuffered if not network
    DWORD dwShareMode = FILE_SHARE_READ;
    if (g_osInfo.dwPlatformId == VER_PLATFORM_WIN32_NT) {
        dwShareMode |= FILE_SHARE_DELETE;
    }
    m_hFile = CreateFile(pFileName,
                               GENERIC_READ,
                               dwShareMode,
                               NULL,
                               OPEN_EXISTING,
                               dwType == DRIVE_REMOTE ?
                                   FILE_FLAG_SEQUENTIAL_SCAN :
                                   FILE_FLAG_NO_BUFFERING,
                               NULL);

    if (m_hFile == INVALID_HANDLE_VALUE) {
        DWORD dwErr = GetLastError();
        DbgLog((LOG_ERROR, 2, TEXT("Failed to open file for unbuffered IO %s - code %d"),
               pFileName, dwErr));
	return AmHresultFromWin32(dwErr);
    }

    // if we need alignment for m_hFile, then open another file
    // handle that is unbuffered
    if (m_lAlign > 1) {
        // open the file, unbuffered if not network
        DWORD dwShareMode = FILE_SHARE_READ;
        if (g_osInfo.dwPlatformId == VER_PLATFORM_WIN32_NT) {
            dwShareMode |= FILE_SHARE_DELETE;
        }
        m_hFileUnbuffered = CreateFile(
                                pFileName,
                                GENERIC_READ,
                                dwShareMode,
                                NULL,
                                OPEN_EXISTING,
                                FILE_FLAG_SEQUENTIAL_SCAN,
                                NULL);
        if (m_hFileUnbuffered == INVALID_HANDLE_VALUE) {
            CloseHandle(m_hFile);
            m_hFile = INVALID_HANDLE_VALUE;
            return AmGetLastErrorToHResult();
        }
    }



    // pick up the file size
    ULARGE_INTEGER li;
    li.LowPart = GetFileSize(m_hFile, &li.HighPart);
    if (li.LowPart == INVALID_FILE_SIZE) {
        DWORD dwErr = GetLastError();
        if (dwErr != NOERROR) {

            CloseHandle(m_hFile);
            m_hFile = INVALID_HANDLE_VALUE;
            if (m_hFileUnbuffered != INVALID_HANDLE_VALUE) {
                CloseHandle(m_hFileUnbuffered);
                m_hFileUnbuffered = INVALID_HANDLE_VALUE;
            }
            return AmHresultFromWin32(dwErr);
        }
    }
    m_llFileSize = (LONGLONG)li.QuadPart;
    DbgLog((LOG_TRACE, 2, TEXT("File %s opened.  Size = %d, alignment = %d"),
           pFileName, (DWORD)m_llFileSize, m_lAlign));

    return S_OK;
}

// ready for async activity - call this before
// calling Request.
//
// start the worker thread if we need to
//
// !!! use overlapped i/o if possible
HRESULT
CAsyncFile::AsyncActive(void)
{
    return StartThread();
}

// call this when no more async activity will happen before
// the next AsyncActive call
//
// stop the worker thread if active
HRESULT
CAsyncFile::AsyncInactive(void)
{
    return CloseThread();
}


// add a request to the queue.
HRESULT
CAsyncFile::Request(
            LONGLONG llPos,
            LONG lLength,
            BYTE* pBuffer,
            LPVOID pContext,
            DWORD_PTR dwUser)
{
    if (!IsAligned(llPos) ||
	!IsAligned(lLength) ||
	!IsAligned((LONG_PTR) pBuffer)) {
            return VFW_E_BADALIGN;
    }

    CAsyncRequest* pRequest = new CAsyncRequest;
    if (!pRequest) {
	return E_OUTOFMEMORY;
    }

    HRESULT hr = pRequest->Request(
                            m_hFile,
                            &m_csFile,
                            llPos,
                            lLength,
                            pBuffer,
                            pContext,
                            dwUser);
    if (SUCCEEDED(hr)) {
        // might fail if flushing
        hr = PutWorkItem(pRequest);
    }

    if (FAILED(hr)) {
        delete pRequest;
    }
    return hr;
}


// wait for the next request to complete
HRESULT
CAsyncFile::WaitForNext(
    DWORD dwTimeout,
    LPVOID *ppContext,
    DWORD_PTR * pdwUser,
    LONG* pcbActual)
{
    // some errors find a sample, others don't. Ensure that
    // *ppContext is NULL if no sample found
    *ppContext = NULL;

    // wait until the event is set, but since we are not
    // holding the critsec when waiting, we may need to re-wait
    while(1) {

        if (!m_evDone.Wait(dwTimeout)) {
            // timeout occurred
            return VFW_E_TIMEOUT;
        }

        // get next event from list
        CAsyncRequest* pRequest = GetDoneItem();
        if (pRequest) {
            // found a completed request

            // check if ok
            HRESULT hr = pRequest->GetHResult();
            if (hr == S_FALSE) {

                // this means the actual length was less than
                // requested - may be ok if he aligned the end of file
                if ((pRequest->GetActualLength() +
                     pRequest->GetStart()) == m_llFileSize) {
                        hr = S_OK;
                } else {
                    // it was an actual read error
                    hr = E_FAIL;
                }
            }

            // return actual bytes read
            *pcbActual = pRequest->GetActualLength();

            // return his context
            *ppContext = pRequest->GetContext();
            *pdwUser = pRequest->GetUser();
            delete pRequest;
            return hr;
        } else {
            //  Hold the critical section while checking the
            //  list state
            CAutoLock lck(&m_csLists);
            if (m_bFlushing && !m_bWaiting) {

                // can't block as we are between BeginFlush and EndFlush

                // but note that if m_bWaiting is set, then there are some
                // items not yet complete that we should block for.

                return VFW_E_WRONG_STATE;
            }
        }

        // done item was grabbed between completion and
        // us locking m_csLists.
    }
}

// perform a synchronous read request on this thread.
// Need to hold m_csFile while doing this (done in
// request object)
HRESULT
CAsyncFile::SyncReadAligned(
            LONGLONG llPos,
            LONG lLength,
            BYTE* pBuffer,
            LONG* pcbActual
            )
{
    if (!IsAligned(llPos) ||
	!IsAligned(lLength) ||
	!IsAligned((LONG_PTR) pBuffer)) {
            return VFW_E_BADALIGN;
    }

    CAsyncRequest request;

    HRESULT hr = request.Request(
                    m_hFile,
                    &m_csFile,
                    llPos,
                    lLength,
                    pBuffer,
                    NULL,
                    0);

    if (FAILED(hr)) {
        return hr;
    }

    hr = request.Complete(m_hFile, &m_csFile);

    // return actual data length
    *pcbActual = request.GetActualLength();
    return hr;
}


// this object supports only fixed length for now
HRESULT
CAsyncFile::Length(LONGLONG* pll)
{
    if (m_hFile == INVALID_HANDLE_VALUE) {
        *pll = 0;
        return E_UNEXPECTED;
    } else {
        *pll = m_llFileSize;
        return S_OK;
    }
}

HRESULT
CAsyncFile::Alignment(LONG* pl)
{
    if (m_hFile == INVALID_HANDLE_VALUE) {
        *pl = 1;
        return E_UNEXPECTED;
    } else {
        *pl = m_lAlign;
        return S_OK;
    }
}

// cancel all items on the worklist onto the done list
// and refuse further requests or further WaitForNext calls
// until the end flush
//
// WaitForNext must return with NULL only if there are no successful requests.
// So Flush does the following:
// 1. set m_bFlushing ensures no more requests succeed
// 2. move all items from work list to the done list.
// 3. If there are any outstanding requests, then we need to release the
//    critsec to allow them to complete. The m_bWaiting as well as ensuring
//    that we are signalled when they are all done is also used to indicate
//    to WaitForNext that it should continue to block.
// 4. Once all outstanding requests are complete, we force m_evDone set and
//    m_bFlushing set and m_bWaiting false. This ensures that WaitForNext will
//    not block when the done list is empty.
HRESULT
CAsyncFile::BeginFlush()
{
    // hold the lock while emptying the work list
    {
        CAutoLock lock(&m_csLists);

        // prevent further requests being queued.
        // Also WaitForNext will refuse to block if this is set
        // unless m_bWaiting is also set which it will be when we release
        // the critsec if there are any outstanding).
        m_bFlushing = TRUE;

        CAsyncRequest * preq;
        while(preq = GetWorkItem()) {
            preq->Cancel();
            PutDoneItem(preq);
        }


        // now wait for any outstanding requests to complete
        if (m_cItemsOut > 0) {

            // can be only one person waiting
            ASSERT(!m_bWaiting);

            // this tells the completion routine that we need to be
            // signalled via m_evAllDone when all outstanding items are
            // done. It also tells WaitForNext to continue blocking.
            m_bWaiting = TRUE;
        } else {
            // all done

            // force m_evDone set so that even if list is empty,
            // WaitForNext will not block
            // don't do this until we are sure that all
            // requests are on the done list.
            m_evDone.Set();
            return S_OK;
        }
    }

    ASSERT(m_bWaiting);

    // wait without holding critsec
    for (;;) {
        m_evAllDone.Wait();
        {
            // hold critsec to check
            CAutoLock lock(&m_csLists);

            if (m_cItemsOut == 0) {

                // now we are sure that all outstanding requests are on
                // the done list and no more will be accepted
                m_bWaiting = FALSE;

                // force m_evDone set so that even if list is empty,
                // WaitForNext will not block
                // don't do this until we are sure that all
                // requests are on the done list.
                m_evDone.Set();

                return S_OK;
            }
        }
    }
}

// end a flushing state
HRESULT
CAsyncFile::EndFlush()
{
    CAutoLock lock(&m_csLists);

    m_bFlushing = FALSE;

    ASSERT(!m_bWaiting);

    // m_evDone might have been set by BeginFlush - ensure it is
    // set IFF m_listDone is non-empty
    if (m_listDone.GetCount() > 0) {
        m_evDone.Set();
    } else {
        m_evDone.Reset();
    }

    return S_OK;
}

// start the thread
HRESULT
CAsyncFile::StartThread(void)
{
    if (m_hThread) {
        return S_OK;
    }

    // clear the stop event before starting
    m_evStop.Reset();

    DWORD dwThreadID;
    m_hThread = CreateThread(
                    NULL,
                    0,
                    InitialThreadProc,
                    this,
                    0,
                    &dwThreadID);
    if (!m_hThread) {
	DWORD dwErr = GetLastError();
        return AmHresultFromWin32(dwErr);
    }
    return S_OK;
}

// stop the thread and close the handle
HRESULT
CAsyncFile::CloseThread(void)
{
    // signal the thread-exit object
    m_evStop.Set();

    if (m_hThread) {

        WaitForSingleObject(m_hThread, INFINITE);
        CloseHandle(m_hThread);
        m_hThread = NULL;
    }
    return S_OK;
}


// manage the list of requests. hold m_csLists and ensure
// that the (manual reset) event m_evWork is set when things on
// the list but reset when the list is empty.
// returns null if list empty
CAsyncRequest*
CAsyncFile::GetWorkItem()
{
    ASSERT(CritCheckIn(&m_csLists));

    CAsyncRequest * preq  = m_listWork.RemoveHead();

    // force event set correctly
    if (m_listWork.GetCount() == 0) {
        m_evWork.Reset();
    } // else ASSERT that m_evWork is SET
    return preq;
}

// get an item from the done list
CAsyncRequest*
CAsyncFile::GetDoneItem()
{
    CAutoLock lock(&m_csLists);

    CAsyncRequest * preq  = m_listDone.RemoveHead();

    // force event set correctly if list now empty
    // or we're in the final stages of flushing
    // Note that during flushing the way it's supposed to work is that
    // everything is shoved on the Done list then the application is
    // supposed to pull until it gets nothing more
    //
    // Thus we should not set m_evDone unconditionally until everything
    // has moved to the done list which means we must wait until
    // cItemsOut is 0 (which is guaranteed by m_bWaiting being TRUE).

    if (m_listDone.GetCount() == 0 &&
        (!m_bFlushing || m_bWaiting)) {
        m_evDone.Reset();
    }

    return preq;
}

// put an item on the work list - fail if bFlushing
HRESULT
CAsyncFile::PutWorkItem(CAsyncRequest* pRequest)
{
    CAutoLock lock(&m_csLists);
    HRESULT hr;

    if (m_bFlushing) {
        hr = VFW_E_WRONG_STATE;
    }
    else if (m_listWork.AddTail(pRequest)) {

        // event should now be in a set state - force this
        m_evWork.Set();

        // start the thread now if not already started
        hr = StartThread();

        if(FAILED(hr)) {
            m_listWork.RemoveTail();
        }

    } else {
        hr = E_OUTOFMEMORY;
    }
    return(hr);
}

// put an item on the done list - ok to do this when
// flushing.  We must hold the lock while touching the list
HRESULT
CAsyncFile::PutDoneItem(CAsyncRequest* pRequest)
{
    ASSERT(CritCheckIn(&m_csLists));

    if (m_listDone.AddTail(pRequest)) {

        // event should now be in a set state - force this
        m_evDone.Set();
        return S_OK;
    } else {
        return E_OUTOFMEMORY;
    }
}

// called on thread to process any active requests
void
CAsyncFile::ProcessRequests(void)
{
    // lock to get the item and increment the outstanding count
    CAsyncRequest * preq = NULL;
    for (;;) {
        {
            CAutoLock lock(&m_csLists);

            preq = GetWorkItem();
            if (preq == NULL) {
                // done
                return;
            }

            // one more item not on the done or work list
            m_cItemsOut++;

            // release critsec
        }

        preq->Complete(m_hFile, &m_csFile);

        // regain critsec to replace on done list
        {
            CAutoLock l(&m_csLists);

            PutDoneItem(preq);

            if (--m_cItemsOut == 0) {
                if (m_bWaiting) {
                    m_evAllDone.Set();
                }
            }
        }
    }
}

// the thread proc - assumes that DWORD thread param is the
// this pointer
DWORD
CAsyncFile::ThreadProc(void)
{
    HANDLE ahev[] = {m_evStop, m_evWork};

    while(1) {
	DWORD dw = WaitForMultipleObjects(
    		    2,
	    	    ahev,
		    FALSE,
		    INFINITE);
	if (dw == WAIT_OBJECT_0+1) {

	    // requests need processing
	    ProcessRequests();
	} else {
	    // any error or stop event - we should exit
	    return 0;
	}
    }
}



// perform a synchronous read request on this thread.
// may not be aligned - so we will have to buffer.
HRESULT
CAsyncFile::SyncRead(
            LONGLONG llPos,
            LONG lLength,
            BYTE* pBuffer)
{
    if (IsAligned(llPos) &&
	IsAligned(lLength) &&
	IsAligned((LONG_PTR) pBuffer)) {
            LONG cbUnused;
	    return SyncReadAligned(llPos, lLength, pBuffer, &cbUnused);
    }

    // not aligned with requirements - use buffered file handle.
    //!!! might want to fix this to buffer the data ourselves?

    ASSERT(m_hFileUnbuffered != INVALID_HANDLE_VALUE);

    CAsyncRequest request;

    HRESULT hr = request.Request(
                    m_hFileUnbuffered,
                    &m_csFile,
                    llPos,
                    lLength,
                    pBuffer,
                    NULL,
                    0);

    if (FAILED(hr)) {
        return hr;
    }

    return request.Complete(m_hFileUnbuffered, &m_csFile);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\avi\mjpeg\pmjpeg32\tools16_inc\msvideo.h ===
/****************************************************************************/
/*                                                                          */
/*  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY   */
/*  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE     */
/*  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR   */
/*  PURPOSE.								    */
/*        MSVIDEO.H - Include file for Video APIs                           */
/*                                                                          */
/*        Note: You must include WINDOWS.H before including this file.      */
/*                                                                          */
/*        Copyright (c) 1990-1995, Microsoft Corp.  All rights reserved.    */
/*                                                                          */
/****************************************************************************/

#ifndef _INC_MSVIDEO
#define _INC_MSVIDEO    50      /* version number */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif	/* __cplusplus */

#ifndef _RCINVOKED

#ifdef BUILDDLL                         /* ;Internal */
#undef WINAPI                           /* ;Internal */
#define WINAPI FAR PASCAL _loadds       /* ;Internal */
#endif                                  /* ;Internal */

/* video data types */
DECLARE_HANDLE(HVIDEO);                 // generic handle
typedef HVIDEO FAR * LPHVIDEO;
#endif                                  // ifndef RCINVOKED

/****************************************************************************

                        version api

****************************************************************************/

DWORD FAR PASCAL VideoForWindowsVersion(void);

/****************************************************************************

                            Error Return Values

****************************************************************************/
#define DV_ERR_OK               (0)                  /* No error */
#define DV_ERR_BASE             (1)                  /* Error Base */
#define DV_ERR_NONSPECIFIC      (DV_ERR_BASE)
#define DV_ERR_BADFORMAT        (DV_ERR_BASE + 1)
				/* unsupported video format */
#define DV_ERR_STILLPLAYING     (DV_ERR_BASE + 2)
				/* still something playing */
#define DV_ERR_UNPREPARED       (DV_ERR_BASE + 3)
				/* header not prepared */
#define DV_ERR_SYNC             (DV_ERR_BASE + 4)
				/* device is synchronous */
#define DV_ERR_TOOMANYCHANNELS  (DV_ERR_BASE + 5)
				/* number of channels exceeded */
#define DV_ERR_NOTDETECTED	(DV_ERR_BASE + 6)    /* HW not detected */
#define DV_ERR_BADINSTALL	(DV_ERR_BASE + 7)    /* Can not get Profile */
#define DV_ERR_CREATEPALETTE	(DV_ERR_BASE + 8)
#define DV_ERR_SIZEFIELD	(DV_ERR_BASE + 9)
#define DV_ERR_PARAM1		(DV_ERR_BASE + 10)
#define DV_ERR_PARAM2		(DV_ERR_BASE + 11)
#define DV_ERR_CONFIG1		(DV_ERR_BASE + 12)
#define DV_ERR_CONFIG2		(DV_ERR_BASE + 13)
#define DV_ERR_FLAGS		(DV_ERR_BASE + 14)
#define DV_ERR_13		(DV_ERR_BASE + 15)

#define DV_ERR_NOTSUPPORTED     (DV_ERR_BASE + 16)   /* function not suported */
#define DV_ERR_NOMEM            (DV_ERR_BASE + 17)   /* out of memory */
#define DV_ERR_ALLOCATED        (DV_ERR_BASE + 18)   /* device is allocated */
#define DV_ERR_BADDEVICEID      (DV_ERR_BASE + 19)
#define DV_ERR_INVALHANDLE      (DV_ERR_BASE + 20)
#define DV_ERR_BADERRNUM        (DV_ERR_BASE + 21)
#define DV_ERR_NO_BUFFERS       (DV_ERR_BASE + 22)   /* out of buffers */

#define DV_ERR_MEM_CONFLICT     (DV_ERR_BASE + 23)   /* Mem conflict detected */
#define DV_ERR_IO_CONFLICT      (DV_ERR_BASE + 24)   /* I/O conflict detected */
#define DV_ERR_DMA_CONFLICT     (DV_ERR_BASE + 25)   /* DMA conflict detected */
#define DV_ERR_INT_CONFLICT     (DV_ERR_BASE + 26)   /* Interrupt conflict detected */
#define DV_ERR_PROTECT_ONLY     (DV_ERR_BASE + 27)   /* Can not run in standard mode */
#define DV_ERR_LASTERROR        (DV_ERR_BASE + 27)

//#define DV_IDS_PROFILING        (DV_ERR_BASE + 900)
//#define DV_IDS_LISTBOX          (DV_ERR_BASE + 901)

#define DV_ERR_USER_MSG         (DV_ERR_BASE + 1000) /* Hardware specific errors */

/****************************************************************************

                         Callback Messages

Note that the values for all installable driver callback messages are
identical, (ie. MM_DRVM_DATA has the same value for capture drivers,
installable video codecs, and the audio compression manager).
****************************************************************************/
#ifndef _RCINVOKED

#ifndef MM_DRVM_OPEN
#define MM_DRVM_OPEN       0x3D0
#define MM_DRVM_CLOSE      0x3D1
#define MM_DRVM_DATA       0x3D2
#define MM_DRVM_ERROR      0x3D3
#endif

#define DV_VM_OPEN         MM_DRVM_OPEN         // Obsolete messages
#define DV_VM_CLOSE        MM_DRVM_CLOSE
#define DV_VM_DATA         MM_DRVM_DATA
#define DV_VM_ERROR        MM_DRVM_ERROR

/****************************************************************************

                         Structures

****************************************************************************/
/* video data block header */
typedef struct videohdr_tag {
    LPBYTE      lpData;                 /* pointer to locked data buffer */
    DWORD       dwBufferLength;         /* Length of data buffer */
    DWORD       dwBytesUsed;            /* Bytes actually used */
    DWORD       dwTimeCaptured;         /* Milliseconds from start of stream */
    DWORD       dwUser;                 /* for client's use */
    DWORD       dwFlags;                /* assorted flags (see defines) */
    DWORD       dwReserved[4];          /* reserved for driver */
} VIDEOHDR, NEAR *PVIDEOHDR, FAR * LPVIDEOHDR;

/* dwFlags field of VIDEOHDR */
#define VHDR_DONE       0x00000001  /* Done bit */
#define VHDR_PREPARED   0x00000002  /* Set if this header has been prepared */
#define VHDR_INQUEUE    0x00000004  /* Reserved for driver */
#define VHDR_KEYFRAME   0x00000008  /* Key Frame */
#define VHDR_VALID      0x0000000F  /* valid flags */     /* ;Internal */

/* Channel capabilities structure */
typedef struct channel_caps_tag {
    DWORD       dwFlags;                /* Capability flags*/
    DWORD       dwSrcRectXMod;          /* Granularity of src rect in x */
    DWORD       dwSrcRectYMod;          /* Granularity of src rect in y */
    DWORD       dwSrcRectWidthMod;      /* Granularity of src rect width */
    DWORD       dwSrcRectHeightMod;     /* Granularity of src rect height */
    DWORD       dwDstRectXMod;          /* Granularity of dst rect in x */
    DWORD       dwDstRectYMod;          /* Granularity of dst rect in y */
    DWORD       dwDstRectWidthMod;      /* Granularity of dst rect width */
    DWORD       dwDstRectHeightMod;     /* Granularity of dst rect height */
} CHANNEL_CAPS, NEAR *PCHANNEL_CAPS, FAR * LPCHANNEL_CAPS;

/* dwFlags of CHANNEL_CAPS */
#define VCAPS_OVERLAY       0x00000001      /* overlay channel */
#define VCAPS_SRC_CAN_CLIP  0x00000002      /* src rect can clip */
#define VCAPS_DST_CAN_CLIP  0x00000004      /* dst rect can clip */
#define VCAPS_CAN_SCALE     0x00000008      /* allows src != dst */

/****************************************************************************

   videoXXXX API's are only available on Win 3.x!  they are Not in Win32

****************************************************************************/

#if !defined _WIN32

/****************************************************************************

                        video APIs

****************************************************************************/


DWORD WINAPI videoGetNumDevs(void);

DWORD WINAPI videoOpen  (LPHVIDEO lphVideo,
              DWORD dwDevice, DWORD dwFlags);
DWORD WINAPI videoClose (HVIDEO hVideo);
DWORD WINAPI videoDialog(HVIDEO hVideo, HWND hWndParent, DWORD dwFlags);
DWORD WINAPI videoGetChannelCaps(HVIDEO hVideo, LPCHANNEL_CAPS lpChannelCaps,
                DWORD dwSize);
DWORD WINAPI videoUpdate (HVIDEO hVideo, HWND hWnd, HDC hDC);
DWORD WINAPI videoConfigure (HVIDEO hVideo, UINT msg, DWORD dwFlags,
		LPDWORD lpdwReturn, LPVOID lpData1, DWORD dwSize1,
                LPVOID lpData2, DWORD dwSize2);

DWORD WINAPI videoConfigureStorage (HVIDEO hVideo,
                      LPSTR lpstrIdent, DWORD dwFlags);

DWORD WINAPI videoFrame(HVIDEO hVideo, LPVIDEOHDR lpVHdr);
DWORD WINAPI videoMessage(HVIDEO hVideo, UINT msg, DWORD dwP1, DWORD dwP2);

/* streaming APIs */
DWORD WINAPI videoStreamAddBuffer(HVIDEO hVideo,
              LPVIDEOHDR lpVHdr, DWORD dwSize);
DWORD WINAPI videoStreamGetError(HVIDEO hVideo, LPDWORD lpdwErrorFirst,
        LPDWORD lpdwErrorLast);

DWORD WINAPI videoGetErrorText(HVIDEO hVideo, UINT wError,
              LPSTR lpText, UINT wSize);

DWORD WINAPI videoStreamGetPosition(HVIDEO hVideo, MMTIME FAR* lpInfo,
              DWORD dwSize);
DWORD WINAPI videoStreamInit(HVIDEO hVideo,
              DWORD dwMicroSecPerFrame, DWORD dwCallback,
              DWORD dwCallbackInst, DWORD dwFlags);
DWORD WINAPI videoStreamFini(HVIDEO hVideo);
DWORD WINAPI videoStreamPrepareHeader(HVIDEO hVideo,
              LPVIDEOHDR lpVHdr, DWORD dwSize);
DWORD WINAPI videoStreamReset(HVIDEO hVideo);
DWORD WINAPI videoStreamStart(HVIDEO hVideo);
DWORD WINAPI videoStreamStop(HVIDEO hVideo);
DWORD WINAPI videoStreamUnprepareHeader(HVIDEO hVideo,
              LPVIDEOHDR lpVHdr, DWORD dwSize);

// Added post VFW1.1a, but now obsolete
// DWORD WINAPI videoStreamAllocHdrAndBuffer(HVIDEO hVideo,
//              LPVIDEOHDR FAR * plpVHdr, DWORD dwSize);
// DWORD WINAPI videoStreamFreeHdrAndBuffer(HVIDEO hVideo,
//              LPVIDEOHDR lpVHdr);

#endif // ! _WIN32


/****************************************************************************

			API Flags

****************************************************************************/

// Types of channels to open with the videoOpen function
#define VIDEO_EXTERNALIN		0x0001
#define VIDEO_EXTERNALOUT		0x0002
#define VIDEO_IN			0x0004
#define VIDEO_OUT			0x0008

// Is a driver dialog available for this channel?
#define VIDEO_DLG_QUERY			0x0010

// videoConfigure (both GET and SET)
#define VIDEO_CONFIGURE_QUERY   	0x8000

// videoConfigure (SET only)
#define VIDEO_CONFIGURE_SET		0x1000

// videoConfigure (GET only)
#define VIDEO_CONFIGURE_GET		0x2000
#define VIDEO_CONFIGURE_QUERYSIZE	0x0001

#define VIDEO_CONFIGURE_CURRENT		0x0010
#define VIDEO_CONFIGURE_NOMINAL		0x0020
#define VIDEO_CONFIGURE_MIN		0x0040
#define VIDEO_CONFIGURE_MAX		0x0080

/****************************************************************************

			CONFIGURE MESSAGES

****************************************************************************/
#define DVM_USER                        0X4000

#define DVM_CONFIGURE_START		0x1000
#define DVM_CONFIGURE_END		0x1FFF

#define DVM_PALETTE			(DVM_CONFIGURE_START + 1)
#define DVM_FORMAT			(DVM_CONFIGURE_START + 2)
#define DVM_PALETTERGB555		(DVM_CONFIGURE_START + 3)
#define DVM_SRC_RECT    		(DVM_CONFIGURE_START + 4)
#define DVM_DST_RECT    		(DVM_CONFIGURE_START + 5)

#endif  /* ifndef _RCINVOKED */

#ifdef __cplusplus
}                       /* End of extern "C" { */
#endif	/* __cplusplus */

#endif  /* _INC_MSVIDEO */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\code\asyncio.h ===
// Copyright (c) 1996 - 1998  Microsoft Corporation.  All Rights Reserved.

#ifndef __ASYNCIO_H__
#define __ASYNCIO_H__
//
// definition of CAsyncFile object that performs file access. It provides
// asynchronous, unbuffered, aligned reads from a file, using a worker thread
// on win95 and potentially overlapped i/o if available.

// !!! Need to use real overlapped i/o if available
// currently only uses worker thread, not overlapped i/o



// represents a single request and performs the i/o. Can be called on either
// worker thread or app thread, but must hold pcsFile across file accesses.
// (ie across SetFilePointer/ReadFile pairs)
class CAsyncRequest
{

    LARGE_INTEGER	m_liPos;
    LONG 	m_lLength;
    BYTE* 	m_pBuffer;
    LPVOID 	m_pContext;
    DWORD_PTR   m_dwUser;
    HRESULT     m_hr;

public:
    // init the params for this request. Issue the i/o
    // if overlapped i/o is possible.
    HRESULT Request(
    	HANDLE hFile,
        CCritSec* pcsFile,
    	LONGLONG llPos,
	LONG lLength,
	BYTE* pBuffer,
	LPVOID pContext,	// filter's context
	DWORD_PTR dwUser);		// downstream filter's context

    // issue the i/o if not overlapped, and block until i/o complete.
    // returns error code of file i/o
    HRESULT Complete(
                HANDLE hFile,
                CCritSec* pcsFile);

    // cancels the i/o. blocks until i/o is no longer pending
    HRESULT Cancel()
    {
	return S_OK;
    };

    // accessor functions
    LPVOID GetContext()
    {
    	return m_pContext;
    };

    DWORD_PTR GetUser()
    {
	return m_dwUser;
    };

    HRESULT GetHResult() {
        return m_hr;
    };

    // we set m_lLength to the actual length
    LONG GetActualLength() {
        return m_lLength;
    };

    LONGLONG GetStart() {
        return m_liPos.QuadPart;
    };
};


typedef CGenericList<CAsyncRequest> CRequestList;

// this class needs a worker thread, but the ones defined in classes\base
// are not suitable (they assume you have one message sent or posted per
// request, whereas here for efficiency we want just to set an event when
// there is work on the queue).
//
// we create CAsyncRequest objects and queue them on m_listWork. The worker
// thread pulls them off, completes them and puts them on m_listDone.
// The events m_evWork and m_evDone are set when the corresponding lists are
// not empty.
//
// Synchronous requests are done on the caller thread. These should be
// synchronised by the caller, but to make sure we hold m_csFile across
// the SetFilePointer/ReadFile code.
//
// Flush by calling BeginFlush. This rejects all further requests (by
// setting m_bFlushing within m_csLists), cancels all requests and moves them
// to the done list, and sets m_evDone to ensure that no WaitForNext operations
// will block. Call EndFlush to cancel this state.
//
// we support unaligned calls to SyncRead. This is done by opening the file
// twice if we are using unbuffered i/o (m_dwAlign > 1).
// !!!fix this to buffer on top of existing file handle?
class CAsyncFile
{

    CCritSec m_csFile;
    HANDLE m_hFile;
    HANDLE m_hFileUnbuffered;
    LONGLONG m_llFileSize;
    LONG m_lAlign;

    CCritSec m_csLists;      // locks access to the list and events
    BOOL m_bFlushing;        // true if between BeginFlush/EndFlush
    CRequestList m_listWork;
    CRequestList m_listDone;
    CAMEvent m_evWork;         // set when list is not empty
    CAMEvent m_evDone;

    // for correct flush behaviour: all protected by m_csLists
    LONG    m_cItemsOut;    // nr of items not on listDone or listWork
    BOOL    m_bWaiting;     // TRUE if someone waiting for m_evAllDone
    CAMEvent m_evAllDone;   // signal when m_cItemsOut goes to 0 if m_cWaiting


    CAMEvent m_evStop;         // set when thread should exit
    HANDLE m_hThread;


    // start the thread
    HRESULT StartThread(void);

    // stop the thread and close the handle
    HRESULT CloseThread(void);

    // manage the list of requests. hold m_csLists and ensure
    // that the (manual reset) event hevList is set when things on
    // the list but reset when the list is empty.
    // returns null if list empty
    CAsyncRequest* GetWorkItem();

    // get an item from the done list
    CAsyncRequest* GetDoneItem();

    // put an item on the work list
    HRESULT PutWorkItem(CAsyncRequest* pRequest);

    // put an item on the done list
    HRESULT PutDoneItem(CAsyncRequest* pRequest);

    // called on thread to process any active requests
    void ProcessRequests(void);

    // initial static thread proc calls ThreadProc with DWORD
    // param as this
    static DWORD InitialThreadProc(LPVOID pv) {
	CAsyncFile * pThis = (CAsyncFile*) pv;
	return pThis->ThreadProc();
    };

    DWORD ThreadProc(void);

    void CalcAlignment(
            LPCTSTR pFileName,
            LONG& lAlign,
            DWORD& dwType);


public:

    CAsyncFile();
    ~CAsyncFile();

    // open the file
    HRESULT Open(LPCTSTR pName);

    // ready for async activity - call this before
    // calling Request
    HRESULT AsyncActive(void);

    // call this when no more async activity will happen before
    // the next AsyncActive call
    HRESULT AsyncInactive(void);

    // queue a requested read. must be aligned.
    HRESULT Request(
	    	LONGLONG llPos,
		LONG lLength,
		BYTE* pBuffer,
		LPVOID pContext,
		DWORD_PTR dwUser);

    // wait for the next read to complete
    HRESULT WaitForNext(
	    	DWORD dwTimeout,
		LPVOID *ppContext,
		DWORD_PTR * pdwUser,
                LONG * pcbActual
                );

    // perform a read of an already aligned buffer
    HRESULT SyncReadAligned(
	    	LONGLONG llPos,
		LONG lLength,
		BYTE* pBuffer,
                LONG* pcbActual
                );

    // perform a synchronous read. will be buffered
    // if not aligned.
    HRESULT SyncRead(
                LONGLONG llPos,
                LONG lLength,
                BYTE* pBuffer);

    // this object supports only fixed length for now
    HRESULT Length(LONGLONG* pll);

    // all file positions, read lengths and memory locations must
    // be aligned to this.
    HRESULT Alignment(LONG* pdw);

    HRESULT BeginFlush();
    HRESULT EndFlush();

    BOOL IsAligned(LONG l) {
	if ((l & (m_lAlign -1)) == 0) {
	    return TRUE;
	} else {
	    return FALSE;
	}
    };

    BOOL IsAligned(LONGLONG ll) {
	return IsAligned( (LONG) (ll & 0xffffffff));
    };
};

#endif // __ASYNCIO_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\url\pmkrpid.cpp ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1998  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

#include <streams.h>
#include <urlmon.h>
#include "dynlink.h"
#include "..\..\filgraph\filgraph\distrib.h"
#include "..\..\filgraph\filgraph\rlist.h"
#include "..\..\filgraph\filgraph\filgraph.h"
#include "urlrdr.h"
#include <wininet.h>

CPersistMoniker::~CPersistMoniker()
{ /* nothing to do */ }

CPersistMoniker::CPersistMoniker(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr)
: CUnknown( pName, pUnk )
, pGB(0)
{
    if (!pUnk) *phr = VFW_E_NEED_OWNER;
    else if SUCCEEDED(*phr)
    {
        *phr = pUnk->QueryInterface( IID_IGraphBuilder, reinterpret_cast<void**>(&pGB) );
        if SUCCEEDED(*phr)
        {
            pGB->Release();
        }
    }
}

CUnknown * CPersistMoniker::CreateInstance(LPUNKNOWN pUnk, HRESULT *phr)
{
    CUnknown * result = 0;
    result = new CPersistMoniker( NAME("IPersistMoniker Class"), pUnk, phr );
    if ( !result ) *phr = E_OUTOFMEMORY;
    return result;
}

STDMETHODIMP CPersistMoniker::NonDelegatingQueryInterface(REFIID iid, void ** ppv)
{
    if ( iid == IID_IPersistMoniker )
    {
        return GetInterface(static_cast<IPersistMoniker *>(this), ppv );
    }
    else
    {
	return CUnknown::NonDelegatingQueryInterface(iid, ppv);
    }
}

extern "C" {
typedef BOOL (*InetCanUrlW_t)(LPCWSTR, LPWSTR, LPDWORD, DWORD);
typedef BOOL (*InetCanUrlA_t)(LPCSTR, LPSTR, LPDWORD, DWORD);
}

extern HRESULT // grab from ftype.cpp
GetURLSource(
    LPCTSTR lpszURL,        // full name
    int cch,                // character count of the protocol up to the colon
    CLSID* clsidSource      // [out] param for clsid.
);


// Return TRUE if there's a non-standard filter 
TCHAR UseFilename(LPCTSTR lpszFile)
{
    // search for a protocol name at the beginning of the filename
    // this will be any string (not including a \) that preceeds a :
    const TCHAR* p = lpszFile;
    while(*p && (*p != '\\') && (*p != ':')) {
	p++;
    }
    
    if (*p == ':') {
	CLSID clsid;

	// from lpszFile to p is potentially a protocol name.
	// see if we can find a registry entry for this protocol

	// make a copy of the protocol name string
	INT_PTR cch = (int)(p - lpszFile);

#ifdef _WIN64
        if (cch != (INT_PTR)(int)cch) {
            return FALSE;
        }
#endif

	HRESULT hrTmp = GetURLSource(lpszFile, (int)cch, &clsid);


	return (SUCCEEDED(hrTmp) && clsid != CLSID_URLReader);
    }

    return FALSE;
}

HRESULT CPersistMoniker::GetCanonicalizedURL(IMoniker *pimkName, LPBC lpbc, LPOLESTR *ppwstr, BOOL *pfUseFilename)
{
    *pfUseFilename = FALSE;
    
#ifndef UNICODE

    HRESULT hr = NOERROR;
    *ppwstr=NULL;
    UINT uOldErrorMode = SetErrorMode (SEM_NOOPENFILEERRORBOX);
    HINSTANCE hWininetDLL = LoadLibrary (TEXT("WININET.DLL"));
    SetErrorMode (uOldErrorMode);

    if (NULL == hWininetDLL) {
        hr = E_ABORT;
        goto CLEANUP;
    }

    LPINTERNET_CACHE_ENTRY_INFOA lpicei;
    lpicei = NULL;
    InetCanUrlA_t pfnInetCanUrlA;
    pfnInetCanUrlA=(InetCanUrlA_t)GetProcAddress (hWininetDLL, "InternetCanonicalizeUrlA");

    if (NULL == pfnInetCanUrlA)
    {
        hr = E_ABORT;
        goto CLEANUP;
    }    
    hr = pimkName->GetDisplayName(lpbc, NULL, ppwstr);
    if (FAILED(hr))
        goto CLEANUP;

    DWORD cb;
    cb = INTERNET_MAX_URL_LENGTH;
    char strSource[INTERNET_MAX_URL_LENGTH];
    char strTarget[INTERNET_MAX_URL_LENGTH];
    if (!WideCharToMultiByte (CP_ACP, 0, *ppwstr, -1, strSource, 
            INTERNET_MAX_URL_LENGTH, 0, 0)) {
        hr = HRESULT_FROM_WIN32(ERROR_INTERNET_INVALID_URL);
        goto CLEANUP;
    }

    if (!(*pfnInetCanUrlA)(strSource, strTarget, &cb,
            ICU_DECODE | ICU_NO_ENCODE )) {
        hr = HRESULT_FROM_WIN32(ERROR_INTERNET_INVALID_URL);
        goto CLEANUP;
    }

    cb = strlen(strTarget) + 1;

    //
    // HACK: check if this URL is handled by a different source filter
    //
    *pfUseFilename = UseFilename(strTarget);
    
    CoTaskMemFree(*ppwstr);
    
    if ((*ppwstr=(WCHAR *)CoTaskMemAlloc(cb*2)) == NULL) {
        hr = E_OUTOFMEMORY;
        goto CLEANUP;
    }
        	            
    if (!MultiByteToWideChar (CP_ACP, 0, strTarget, -1, *ppwstr, cb*2)) {   
        hr = HRESULT_FROM_WIN32(ERROR_INTERNET_INVALID_URL);
        goto CLEANUP;
    }

CLEANUP:

    if ((FAILED(hr)) && (*ppwstr!=NULL))
        CoTaskMemFree(*ppwstr);
    return hr;
#else

    HRESULT hr = NOERROR;
    *ppwstr=NULL;
    UINT uOldErrorMode = SetErrorMode (SEM_NOOPENFILEERRORBOX);
    HINSTANCE hWininetDLL = LoadLibrary (TEXT("WININET.DLL"));
    SetErrorMode (uOldErrorMode);

    if (NULL == hWininetDLL) {
        hr = E_ABORT;
        goto CLEANUP;
    }

    LPINTERNET_CACHE_ENTRY_INFOW lpicei;
    lpicei = NULL;
    InetCanUrlW_t pfnInetCanUrlW;
    pfnInetCanUrlW=(InetCanUrlW_t)GetProcAddress (hWininetDLL, "InternetCanonicalizeUrlW");
    if (NULL == pfnInetCanUrlW)
    {
        hr = E_ABORT;
        goto CLEANUP;
    }
    hr = pimkName->GetDisplayName(lpbc, NULL, ppwstr);
    if (FAILED(hr))
        goto CLEANUP;

    DWORD cch;
    cch = INTERNET_MAX_URL_LENGTH;
    WCHAR wstrSource[INTERNET_MAX_URL_LENGTH];
    WCHAR wstrTarget[INTERNET_MAX_URL_LENGTH];
    lstrcpyW(wstrSource, *ppwstr);
    if (!(*pfnInetCanUrlW)(wstrSource, wstrTarget, &cch,
            ICU_DECODE | ICU_NO_ENCODE )) {
        hr = HRESULT_FROM_WIN32(ERROR_INTERNET_INVALID_URL);
        goto CLEANUP;
    }
    lstrcpyW(*ppwstr, wstrTarget);

    //
    // HACK: check if this URL is handled by a different source filter
    //
    *pfUseFilename = UseFilename(wstrTarget);
    
CLEANUP:

    if ((FAILED(hr)) && (*ppwstr!=NULL))
        CoTaskMemFree(*ppwstr);
    return hr;

#endif
}


// IPersistMoniker functions....
HRESULT CPersistMoniker::Load(BOOL fFullyAvailable,
			    IMoniker *pimkName,
			    LPBC pibc,
			    DWORD grfMode)
{
    LPOLESTR pwstr = NULL;
    HRESULT hr;
    BOOL fUseFilename = FALSE;
    hr=GetCanonicalizedURL(pimkName, pibc, &pwstr, &fUseFilename);

    if (SUCCEEDED(hr)) {
	if (fUseFilename ||
	    ((pwstr[0] == L'F' || pwstr[0] == L'f') &&
	     (pwstr[1] == L'I' || pwstr[1] == L'i') &&
	     (pwstr[2] == L'L' || pwstr[2] == L'l') &&
	     (pwstr[3] == L'E' || pwstr[3] == L'e') &&
	     (pwstr[4] == L':'))) {

	    // !!! only for file: URLs
	    hr = Load(pwstr, grfMode);

	    CoTaskMemFree((void *)pwstr);
	} else {

	    CoTaskMemFree((void *)pwstr);
	
	    // outline of correct code:
	    // look at moniker, figure out if it's a file: moniker.
	    // if so, call RenderFile.
	    // Otherwise, find URLRdr source filter (should this be hardcoded?)
	    // instantiate it, use IPersistMoniker to give it the moniker to load
	    // find its output pin
	    // render that output pin

	    IBaseFilter * pFilter;

	    // instantiate the source filter using hardwired clsid
	    hr = CoCreateInstance(CLSID_URLReader,
				  NULL,
				  CLSCTX_INPROC,
				  IID_IBaseFilter,
				  (void **) &pFilter);

	    ASSERT(SUCCEEDED(hr));

	    if (!pFilter) {
		return E_FAIL;
	    }

	    hr = pGB->AddFilter(pFilter, L"URL Source");

	    pFilter->Release();		// graph will hold refcount for us
	
	    if (FAILED(hr))
		return hr;

	    // Get an IPersistMoniker interface onto the URLReader filter
	    // and tell it to load from the moniker
	    IPersistMoniker *ppmk;

	    hr = pFilter->QueryInterface(IID_IPersistMoniker, (void**) &ppmk);

	    if (FAILED(hr))
		return hr;

	    hr = ppmk->Load(fFullyAvailable, pimkName, pibc, grfMode);

	    ppmk->Release();
	
	    if (FAILED(hr))
		return hr;

	    IEnumPins * pEnum;
	
	    // find the output pin of the URL filter
	    hr = pFilter->EnumPins(&pEnum);
	    if (FAILED(hr))
		return hr;

	    IPin * pPin;
	    ULONG ulActual;
	    hr = pEnum->Next(1, &pPin, &ulActual);
		
	    pEnum->Release();

	    if (SUCCEEDED(hr) && (ulActual != 1))
		hr = E_FAIL;

	    if (FAILED(hr))
		return hr;

#ifdef DEBUG
	    // had better be output....
	    PIN_DIRECTION pd;
	    hr = pPin->QueryDirection(&pd);
	    ASSERT(pd == PINDIR_OUTPUT);
#endif

	    hr = pGB->Render(pPin);

	    pPin->Release();
	}
    }

    return hr;
}

// IPersistFile support
HRESULT CPersistMoniker::Load(LPCOLESTR pszFileName, DWORD dwMode)
{
    HRESULT hr = pGB->RenderFile(pszFileName, NULL);

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\builder2\build.cpp ===
// Copyright (c) Microsoft Corporation 1994-1996. All Rights Reserved

#include <streams.h>
#include <windowsx.h>

#ifdef FILTER_DLL
// define the GUIDs for streams and my CLSID in this file
#include <initguid.h>
#endif

#include "stdafx.h"
#include "ks.h"
#include "ksproxy.h"
//#include "kspin.h"
#include "build.h"

// !!! Allow other people's MUX, FW, Renderer and DECs?

// setup data

#ifdef FILTER_DLL
// list of class ids and creator functions for class factory
CFactoryTemplate g_Templates[] = {
    { L"Capture Graph Builder"
    , &CLSID_CaptureGraphBuilder
    , CBuilder2::CreateInstance
    , NULL
    , NULL },	// self-registering crap
    { L"Capture Graph Builder2"
    , &CLSID_CaptureGraphBuilder2
    , CBuilder2_2::CreateInstance
    , NULL
    , NULL }	// self-registering crap
};
int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

// exported entry points for registration and
// unregistration (in this case they only call
// through to default implmentations).
//
STDAPI DllRegisterServer()
{
  return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
  return AMovieDllRegisterServer2( FALSE );
}
#endif



// **************** ICaptureGraphBuilder  (Original) ***************



CBuilder2::CBuilder2(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
	: CUnknown(pName, pUnk),
          m_pBuilder2_2(NULL)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the capture graph builder")));

    CBuilder2_2 *pC2;
    pC2 = new CBuilder2_2(TEXT("Capture graph builder2_2"), pUnk, phr);
    if (pC2 == NULL) {
	if (phr)
	    *phr = E_OUTOFMEMORY;
    } else {
        HRESULT hr = pC2->NonDelegatingQueryInterface(IID_ICaptureGraphBuilder2,
						(void **)&m_pBuilder2_2);
	if (FAILED(hr) && phr)
	    *phr = E_OUTOFMEMORY;
    }
}


CBuilder2::~CBuilder2()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying the capture graph builder")));
    if (m_pBuilder2_2)
        m_pBuilder2_2->Release();
}


STDMETHODIMP CBuilder2::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    if (riid == IID_ICaptureGraphBuilder) {
    	DbgLog((LOG_TRACE,9,TEXT("QI for ICaptureGraphBuilder")));
        return GetInterface((ICaptureGraphBuilder*)this, ppv);
    } else {
	return E_NOTIMPL;
    }
}


// this goes in the factory template table to create new instances
CUnknown * CBuilder2::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CBuilder2(TEXT("Capture graph builder2"), pUnk, phr);
}




// Use this filtergraph for graph building
//
HRESULT CBuilder2::SetFiltergraph(IGraphBuilder *pfg)
{
    return m_pBuilder2_2->SetFiltergraph(pfg);
}


// What filtergraph is graph building being done in?
//
HRESULT CBuilder2::GetFiltergraph(IGraphBuilder **ppfg)
{
    return m_pBuilder2_2->GetFiltergraph(ppfg);
}


HRESULT CBuilder2::SetOutputFileName(const GUID *pType, LPCOLESTR lpwstrFile,
				IBaseFilter **ppf, IFileSinkFilter **pSink)
{
    return m_pBuilder2_2->SetOutputFileName(pType, lpwstrFile, ppf, pSink);
}



HRESULT CBuilder2::FindInterface(const GUID *pCategory, IBaseFilter *pf, REFIID riid, void **ppint)
{
    return m_pBuilder2_2->FindInterface(pCategory, NULL, pf, riid, ppint);
}


HRESULT CBuilder2::RenderStream(const GUID *pCategory, IUnknown *pSource, IBaseFilter *pfCompressor, IBaseFilter *pfRenderer)
{
    return m_pBuilder2_2->RenderStream(pCategory, NULL, pSource, pfCompressor,
					pfRenderer);
}


HRESULT CBuilder2::ControlStream(const GUID *pCategory, IBaseFilter *pFilter, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie)
{
    return m_pBuilder2_2->ControlStream(pCategory, NULL, pFilter, pstart,
					pstop, wStartCookie, wStopCookie);
}


// Pre-alloc this file to this size in bytes
//
HRESULT CBuilder2::AllocCapFile(LPCOLESTR lpwstr, DWORDLONG dwlNewSize)
{
    return m_pBuilder2_2->AllocCapFile(lpwstr, dwlNewSize);
}


HRESULT CBuilder2::CopyCaptureFile(LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *lpCallback)
{
    return m_pBuilder2_2->CopyCaptureFile(lpwstrOld, lpwstrNew, fAllowEscAbort,
				lpCallback);
}



// **************** ICaptureGraphBuilder2  (new)  *********************

#define DONT_KNOW_YET 64

CBuilder2_2::CBuilder2_2(TCHAR *pName, LPUNKNOWN pUnk, HRESULT * phr)
	: CUnknown(pName, pUnk),
	m_FG(NULL)
{
    DbgLog((LOG_TRACE,1,TEXT("*Instantiating the capture graph builder 2")));
    m_fVMRExists = DONT_KNOW_YET;       // are we on an OS with the new VMR?
}


CBuilder2_2::~CBuilder2_2()
{
    DbgLog((LOG_TRACE,1,TEXT("*Destroying the capture graph builder 2")));
    if (m_FG)
        m_FG->Release();
}


STDMETHODIMP CBuilder2_2::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    if (ppv)
        *ppv = NULL;

    if (riid == IID_ICaptureGraphBuilder2) {
    	DbgLog((LOG_TRACE,9,TEXT("QI for ICaptureGraphBuilder2")));
        return GetInterface((ICaptureGraphBuilder2 *)this, ppv);
    } else {
	return E_NOTIMPL;
    }
}


// this goes in the factory template table to create new instances
CUnknown * CBuilder2_2::CreateInstance(LPUNKNOWN pUnk, HRESULT * phr)
{
    return new CBuilder2_2(TEXT("Capture graph builder 2"), pUnk, phr);
}


// Is this pin of the given category and type?
// S_OK    yes
//
HRESULT CBuilder2_2::DoesCategoryAndTypeMatch(IPin *pP, const GUID *pCategory, const GUID *pType)
{
    HRESULT hrRet = E_FAIL;
    IKsPropertySet *pKs;
    GUID guid;
    DWORD dw;
    HRESULT hr;

    //DbgLog((LOG_TRACE,1,TEXT("DoesCategoryAndTypeMatch?")));

#if 1
    // !!!!!! Hack for broken VBISurf filter that blows up
    if (pCategory) {
        PIN_INFO pininfo;
        FILTER_INFO filterinfo;
        hr = pP->QueryPinInfo(&pininfo);
        if (hr == NOERROR) {
	    hr = pininfo.pFilter->QueryFilterInfo(&filterinfo);
	    pininfo.pFilter->Release();
	    if (hr == NOERROR) {
	        if (filterinfo.pGraph)
	            filterinfo.pGraph->Release();
	        if (lstrcmpiW(filterinfo.achName, L"VBI Surface Allocator")==0){
        	    DbgLog((LOG_TRACE,1,TEXT("Avoiding VBISurf GPF")));
		    return E_FAIL;	// it wouldn't support this anyway
	        }
	    }
        }
    }
#endif

    if (pCategory == NULL)
	hrRet = S_OK;
    if (pCategory && pP->QueryInterface(IID_IKsPropertySet,
						(void **)&pKs) == S_OK) {
        //DbgLog((LOG_TRACE,1,TEXT("QI OK")));
	if (pKs->Get(AMPROPSETID_Pin, AMPROPERTY_PIN_CATEGORY, NULL, 0,
			&guid, sizeof(GUID), &dw) == S_OK) {
            //DbgLog((LOG_TRACE,1,TEXT("Get OK")));
	    if (guid == *pCategory) {
		hrRet = S_OK;
	    }
	} else {
            DbgLog((LOG_ERROR,1,TEXT("CATEGORYs not supported")));
	}
	pKs->Release();
    } else {
        //DbgLog((LOG_ERROR,1,TEXT("no category/can't find IKsPropertySet")));
    }

    if (hrRet == S_OK && pType) {
	hrRet = E_FAIL;
        IEnumMediaTypes *pEnum;
	AM_MEDIA_TYPE *pmtTest;
        hr = pP->EnumMediaTypes(&pEnum);
        if (hr == NOERROR) {
            ULONG u;
            pEnum->Reset();
            hr = pEnum->Next(1, &pmtTest, &u);
            pEnum->Release();
	    if (hr == S_OK && u == 1) {
		if (pmtTest->majortype == *pType) {
		    hrRet = S_OK;
            	    //DbgLog((LOG_TRACE,1,TEXT("type matches")));
		}
		DeleteMediaType(pmtTest);
	    }
        }
    }

    return hrRet;

// This dead broken code used to allow multiple categories per pin, but KS
// Proxy will never support this
#if 0
    HRESULT hrRet;
    IKsPropertySet *pKs;
    GUID *pGuid;
    DWORD dw;

    if (pP->QueryInterface(IID_IKsPropertySet, (void **)&pKs) == S_OK) {
	hrRet = pKs->Get(AMPROPSETID_Pin, AMPROPERTY_PIN_CATEGORY, NULL, 0,
			NULL, 0, &dw);
	if (hrRet != S_OK) {
            DbgLog((LOG_ERROR,1,TEXT("CATEGORY not supported")));
	    pKs->Release();
	    return hrRet;
	}
	pGuid = (GUID *)CoTaskMemAlloc(dw);
	if (pGuid == NULL) {
	    pKs->Release();
	    return E_OUTOFMEMORY;
	}
	if (pKs->Get(AMPROPSETID_Pin, AMPROPERTY_PIN_CATEGORY, NULL, 0,
			pGuid, dw, &dw) == S_OK) {
	    hrRet = S_FALSE;
	    DWORD i;
	    for (i = 0; i < dw / sizeof(GUID); i++) {
	        if (*(pGuid + i) == *pCategory) {
		    hrRet = S_OK;
		    break;
	        }
	    }
	} else {
            DbgLog((LOG_ERROR,1,TEXT("??? CATEGORY not supported")));
	}
	pKs->Release();
	CoTaskMemFree(pGuid);
	return hrRet;
    } else {
        DbgLog((LOG_ERROR,1,TEXT("can't find IKsPropertySet")));
	return E_NOINTERFACE;
    }
#endif
}


// Starting with this filter, walk downstream looking for an interface
//
HRESULT CBuilder2_2::FindInterfaceDownstream(IBaseFilter *pFilter, REFIID riid, void **ppint)
{
    IPin *pPinIn, *pPinOut;
    IBaseFilter *pNewFilter;
    PIN_INFO pininfo;
    HRESULT hr;
    int zz = 0;

    if (pFilter == NULL || ppint == NULL)
	return E_POINTER;

    DbgLog((LOG_TRACE,1,TEXT("FindInterfaceDownstream")));

    // Try all our output pins, their connected pins, and connected filters
    while (1) {
        hr = FindAPin(pFilter, PINDIR_OUTPUT, NULL, NULL, FALSE, zz++,&pPinOut);
	if (hr != NOERROR)
	    break;	// ran out of pins
	hr = pPinOut->QueryInterface(riid, ppint);
	if (hr == S_OK) {
            DbgLog((LOG_TRACE,1,TEXT("Found it an output pin")));
	    pPinOut->Release();
	    break;
	}
	pPinOut->ConnectedTo(&pPinIn);
	pPinOut->Release();
        if (pPinIn == NULL) {
	    continue;
	}
	hr = pPinIn->QueryInterface(riid, ppint);
	if (hr == NOERROR) {
	    pPinIn->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found it on an input pin")));
	    break;
  	}
	hr = pPinIn->QueryPinInfo(&pininfo);
	pPinIn->Release();
        if (hr != NOERROR || pininfo.pFilter == NULL) {
	    continue;
	}
 	pNewFilter = pininfo.pFilter;
	hr = pNewFilter->QueryInterface(riid, ppint);
	if (hr == NOERROR) {
	    pNewFilter->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found it on another filter")));
	    break;
  	}
	// recurse on this filter
	hr = FindInterfaceDownstream(pNewFilter, riid, ppint);
	pNewFilter->Release();
        if (hr == NOERROR) {
	    break;
        }
    }	// back to the drawing board
    return hr;
}


// Starting with this filter, walk upstream looking for an interface
//
HRESULT CBuilder2_2::FindInterfaceUpstream(IBaseFilter *pFilter, REFIID riid, void **ppint)
{
    IPin *pPinIn, *pPinOut;
    IBaseFilter *pNewFilter;
    PIN_INFO pininfo;
    HRESULT hr;
    int zz = 0;

    if (pFilter == NULL || ppint == NULL)
	return E_POINTER;

    DbgLog((LOG_TRACE,1,TEXT("FindInterfaceUpstream")));

    // Try all our input pins, their connected pins, and connected filters
    while (1) {
        hr = FindAPin(pFilter, PINDIR_INPUT, NULL, NULL, FALSE, zz++, &pPinIn);
	if (hr != NOERROR)
	    break;	// ran out of pins
	hr = pPinIn->QueryInterface(riid, ppint);
	if (hr == S_OK) {
            DbgLog((LOG_TRACE,1,TEXT("Found it an input pin")));
	    pPinIn->Release();
	    break;
	}
	pPinIn->ConnectedTo(&pPinOut);
	pPinIn->Release();
        if (pPinOut == NULL) {
	    continue;
	}
	hr = pPinOut->QueryInterface(riid, ppint);
	if (hr == NOERROR) {
	    pPinOut->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found it on an output pin")));
	    break;
  	}
	hr = pPinOut->QueryPinInfo(&pininfo);
	pPinOut->Release();
        if (hr != NOERROR || pininfo.pFilter == NULL) {
	    continue;
	}
 	pNewFilter = pininfo.pFilter;
	hr = pNewFilter->QueryInterface(riid, ppint);
	if (hr == NOERROR) {
	    pNewFilter->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found it on another filter")));
	    break;
  	}
	// recurse on this filter
	hr = FindInterfaceUpstream(pNewFilter, riid, ppint);
	pNewFilter->Release();
        if (hr == NOERROR) {
	    break;
        }
    }	// back to the drawing board
    return hr;
}

// Follow this output pin downstream through every normal single input pin and
// single outpin transform filter and report back the last guy who handles
// IAMStreamControl.  Don't go past any filter with more than one input or
// output pin.  That will stream control more or less streams than we wanted.
//
HRESULT CBuilder2_2::FindDownstreamStreamControl(const GUID *pCat, IPin *pPinOut, IAMStreamControl **ppSC)
{
    IPin *pPinIn;
    IBaseFilter *pFilter;
    IAMStreamControl *pSCSave;
    PIN_INFO pininfo;
    HRESULT hr;

    if (pPinOut == NULL || ppSC == NULL)
	return E_POINTER;

    // haven't found it yet
    *ppSC = NULL;

    DbgLog((LOG_TRACE,1,TEXT("FindDownstreamStreamControl")));

    pPinOut->AddRef();	// don't end up releasing it

    // Now go downstream until we find it or die trying
    while (1) {

	// get the pin we're connected to
	pPinOut->ConnectedTo(&pPinIn);
	pPinOut->Release();
        if (pPinIn == NULL) {
    	    DbgLog((LOG_TRACE,1,TEXT("Ran out of filters")));
	    return (*ppSC ? NOERROR : E_NOINTERFACE);
	}

	// see if this input pin supports IAMStreamControl
	hr = pPinIn->QueryInterface(IID_IAMStreamControl, (void **)&pSCSave);
	if (hr == NOERROR) {
    	    DbgLog((LOG_TRACE,1,TEXT("Somebody supports IAMStreamControl")));
	    if (*ppSC)
		(*ppSC)->Release();
	    *ppSC = pSCSave;
	}

	// get the filter the new pin belongs to
	hr = pPinIn->QueryPinInfo(&pininfo);
	pPinIn->Release();
        if (hr != NOERROR || pininfo.pFilter == NULL) {
            DbgLog((LOG_TRACE,1,TEXT("Failure getting filter")));
	    return (*ppSC ? NOERROR : E_NOINTERFACE);
	}
 	pFilter = pininfo.pFilter;

	// if this filter has more than one input pin or more than
	// one output pin, stop here.  If we are looking for stream control 
	// downstream of a capture pin, it's OK to go past the smart tee to
	// find the MUX.
	hr = FindAPin(pFilter, PINDIR_INPUT, NULL, NULL, FALSE, 1, &pPinIn);
	if (hr == NOERROR) {
	    pPinIn->Release();
	    pFilter->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found >1 input pin")));
	    return (*ppSC ? NOERROR : E_NOINTERFACE);
	}
	hr = FindAPin(pFilter, PINDIR_OUTPUT, NULL, NULL, FALSE, 1, &pPinOut);
	if (hr == NOERROR) {
	    BOOL fBail = TRUE;
	    FILTER_INFO finfo;
	    pPinOut->Release();
	    if (pCat != NULL && *pCat == PIN_CATEGORY_CAPTURE &&
			pFilter->QueryFilterInfo(&finfo) == S_OK) {
		finfo.pGraph->Release();
		// the name may have been suffixed with a number
		WCHAR wch[10];
		lstrcpynW(wch, finfo.achName, 10);
		if (lstrcmpW(wch, L"Smart Tee") == 0) {
		    fBail = FALSE;
            	    DbgLog((LOG_TRACE,1,TEXT("OK to look past the SMART TEE")));
		}
	    }
	    if (fBail) {
	    	pFilter->Release();
            	DbgLog((LOG_TRACE,1,TEXT("Found >1 output pin")));
	    	return (*ppSC ? NOERROR : E_NOINTERFACE);
	    }
	}

	// get the output pin of the filter and continue the search
	hr = FindAPin(pFilter, PINDIR_OUTPUT, NULL, NULL, FALSE, 0, &pPinOut);
	pFilter->Release();
        if (hr != NOERROR) {
            DbgLog((LOG_TRACE,1,TEXT("search ended at renderer")));
	    return (*ppSC ? NOERROR : E_NOINTERFACE);
        }
    }	// back to the drawing board
}


// Find all capture filters in the graph
// First, call this with *ppEnum == NULL, from then on call it with whatever
// it returns in ppEnum to finish enumerating all the capture filters, until
// it fails.  If you don't finish enumerating until it fails, you are
// responsible for releasing the Enum.
//
HRESULT CBuilder2_2::FindCaptureFilters(IEnumFilters **ppEnumF, IBaseFilter **ppf, const GUID *pType)
{
    HRESULT hrRet = E_FAIL;
    IBaseFilter *pFilter;

    if (m_FG == NULL)
	return E_UNEXPECTED;
    if (ppf == NULL || ppEnumF == NULL)
	return E_POINTER;

    DbgLog((LOG_TRACE,1,TEXT("FindCaptureFilters")));


    // this is the first time we've been called
    if (*ppEnumF == NULL) {
        if (FAILED(m_FG->EnumFilters(ppEnumF))) {
	    DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
	    return E_FAIL;
        }
	(*ppEnumF)->Reset();
    } else {
	(*ppf)->Release();
    }

    *ppf = NULL;

    ULONG n;
    while ((*ppEnumF)->Next(1, &pFilter, &n) == S_OK) {
        IPin *pPinT;
        hrRet = FindSourcePin(pFilter, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE,
                                        pType, FALSE, 0, &pPinT);
	if (hrRet == S_OK) {
            pPinT->Release();
            *ppf = pFilter;
	    break;
        }
	pFilter->Release();
    }
    if (hrRet != S_OK) {
        DbgLog((LOG_TRACE,1,TEXT("No more capture filters")));
	(*ppEnumF)->Release();
    }
    return hrRet;
}


// find the "iIndex"'th (0-based) pin that meets the following criteria:
// has direction "dir", category "pCategory" (NULL means don't care), media
// type, and if "fUnconnected" is set, it must be unconnected.
// Increment "iIndex" each time you call to get all of them that meet a certain
// criteria.
//
HRESULT CBuilder2_2::FindAPin(IBaseFilter *pf, PIN_DIRECTION dir, const GUID *pCategory, const GUID *pType, BOOL fUnconnected, int iIndex, IPin **ppPin)
{
    IPin *pP, *pTo = NULL;
    DWORD dw;
    IEnumPins *pins = NULL;
    PIN_DIRECTION pindir;
    BOOL fFound = FALSE;
    HRESULT hr = pf->EnumPins(&pins);
    while (hr == NOERROR) {
        hr = pins->Next(1, &pP, &dw);
	if (hr == S_OK && dw == 1) {
	    hr = pP->QueryDirection(&pindir);
	    pP->ConnectedTo(&pTo);
	    if (pTo)
		pTo->Release();
	    if (hr == S_OK && pindir == dir && DoesCategoryAndTypeMatch(pP,
				pCategory, pType) == S_OK &&
				(!fUnconnected || pTo == NULL) &&
				(iIndex-- == 0)) {
		fFound = TRUE;
		break;
	    } else  {
		pP->Release();
	    }
	} else {
	    break;
	}
    }
    if (pins)
        pins->Release();

    if (fFound) {
	*ppPin = pP;
	return NOERROR;
    } else {
	return E_FAIL;
    }
}


// we need a filtergraph?
//
HRESULT CBuilder2_2::MakeFG()
{
    HRESULT hr = NOERROR;
    IMediaEvent *pME;
    if (m_FG == NULL) {
        hr = QzCreateFilterObject(CLSID_FilterGraph, NULL, CLSCTX_INPROC,
                               IID_IGraphBuilder, (LPVOID *)&m_FG);
	if (hr == NOERROR) {
	    hr = m_FG->QueryInterface(IID_IMediaEvent, (void **)&pME);
	    if (hr == NOERROR) {
		// we can't have the renderer pausing capture graphs
		// behind our back
		hr = pME->CancelDefaultHandling(EC_REPAINT);
		if (hr != NOERROR)
    		    DbgLog((LOG_ERROR,1,TEXT("*Can't cancel default handling of EC_REPAINT!")));
		pME->Release();
		hr = NOERROR;
	    } else {
    		DbgLog((LOG_ERROR,1,TEXT("*Can't cancel default handling of EC_REPAINT!")));
		hr = NOERROR;
	    }
	}
    }
    return hr;
}


// Is there a preview pin of this mediatype?
//
BOOL CBuilder2_2::IsThereAnyPreviewPin(const GUID *pType, IUnknown *pSource)
{
    BOOL fPreviewPin = TRUE;
    IPin *pPinT;

    if (FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_PREVIEW, pType,
						FALSE, 0, &pPinT) != S_OK) {
	// If we want video, a VIDEOPORT pin counts
	if ((pType != NULL && *pType != MEDIATYPE_Video) ||
		FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_VIDEOPORT,
					NULL, FALSE, 0, &pPinT) != S_OK) {
	    fPreviewPin = FALSE;
	} else {
	    pPinT->Release();
	}
    } else {
	pPinT->Release();
    }
    DbgLog((LOG_TRACE,1,TEXT("fPreviewPin=%d"), fPreviewPin));
    return fPreviewPin;
}


// Use this filtergraph for graph building
//
HRESULT CBuilder2_2::SetFiltergraph(IGraphBuilder *pfg)
{
    // We already have one, thank you
    if (m_FG != NULL)
	return E_UNEXPECTED;

    if (pfg == NULL)
	return E_POINTER;

    m_FG = pfg;
    m_FG->AddRef();
    IMediaEvent *pME;
    HRESULT hr = m_FG->QueryInterface(IID_IMediaEvent, (void **)&pME);
    if (hr == NOERROR) {
	hr = pME->CancelDefaultHandling(EC_REPAINT);
	if (hr != NOERROR)
    	    DbgLog((LOG_ERROR,1,TEXT("*Can't cancel default handling of EC_REPAINT!")));
	pME->Release();
    } else {
        DbgLog((LOG_ERROR,1,TEXT("*Can't cancel default handling of EC_REPAINT!")));
    }

    return NOERROR;
}


// What filtergraph is graph building being done in?
//
HRESULT CBuilder2_2::GetFiltergraph(IGraphBuilder **ppfg)
{
    if (ppfg == NULL)
	return E_POINTER;
    *ppfg = m_FG;
    if (m_FG == NULL) {
	return E_UNEXPECTED;
    } else {
	m_FG->AddRef();	// app owns a copy now
        return NOERROR;
    }
}

// !!!
EXTERN_GUID(CLSID_AsfWriter, 0x7c23220e, 0x55bb, 0x11d3, 0x8b, 0x16, 0x0, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d);

HRESULT CBuilder2_2::SetOutputFileName(const GUID *pType, LPCOLESTR lpwstrFile,
				IBaseFilter **ppf, IFileSinkFilter **pSink)
{
    IBaseFilter *pMux;
    IBaseFilter *pFW = NULL;
    IPin *pMuxOutput = NULL, *pFWInput = NULL;
    IFileSinkFilter *pfsink;

    if (pType == NULL || lpwstrFile == NULL || lpwstrFile[0] == 0 ||
								ppf == NULL)
	return E_POINTER;

    // if we called pDeviceMoniker->BindToObject, we could name the
    // filter properly, we'll just CoCreate the filter for now.
    const CLSID *pclsidMux;
    if(*pType == MEDIASUBTYPE_Avi)
    {
        pclsidMux = &CLSID_AviDest;
    }
    else if(*pType == MEDIASUBTYPE_Asf)
    {
        pclsidMux = &CLSID_AsfWriter;
    }
    else
    {
        // assume they are giving us the CLSID of the mux to use
        pclsidMux = pType;
    }

    // this is optional
    if (pSink != NULL)
	*pSink = NULL;

    DbgLog((LOG_TRACE,1,TEXT("SetOutputFileName")));

    // we need a MUX
    HRESULT hr = CoCreateInstance(*pclsidMux, NULL, CLSCTX_INPROC,
			(REFIID)IID_IBaseFilter, (void **)&pMux);
    if (hr != NOERROR) {
        DbgLog((LOG_ERROR,1,TEXT("Can't instantiate mux: %x"), hr));
	return hr;
    }

    // does the mux support IFileSinkFilter?
    hr = pMux->QueryInterface(IID_IFileSinkFilter, (void **)&pfsink);
    if (hr != NOERROR) {
        // nope, guess we need a file writer
        hr = CoCreateInstance((REFCLSID)CLSID_FileWriter, NULL,
                            CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pFW);
        if (hr != NOERROR) {
            pMux->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't instantiate FW: %x"), hr));
            return hr;
        }

        hr = pFW->QueryInterface(IID_IFileSinkFilter, (void **)&pfsink);
        if (hr != NOERROR) {
            pMux->Release();
            pFW->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't get FW IFileSinkFilter: %x"), hr));
            return hr;
        }
    }
    
    hr = pfsink->SetFileName(lpwstrFile, NULL);
    if (hr != NOERROR) {
	pfsink->Release();
	pMux->Release();
        if (pFW)
            pFW->Release();
        DbgLog((LOG_ERROR,1,TEXT("Can't set FW filename: %x"), hr));
	return hr;
    }

    // we need a filtergraph
    if (m_FG == NULL) {
        hr = MakeFG();
	if (hr != NOERROR) {
	    pfsink->Release();
	    pMux->Release();
	    if (pFW)
                pFW->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't instantiate FGraph: %x"), hr));
	    return hr;
	}
    }

    hr = m_FG->AddFilter(pMux, L"Mux");
    if (FAILED(hr)) {
	pfsink->Release();
	pMux->Release();
	if (pFW)
            pFW->Release();
        DbgLog((LOG_ERROR,1,TEXT("Can't add mux to FG: %x"), hr));
	return hr;
    }

    if (pFW) {
        hr = m_FG->AddFilter(pFW, L"File Writer");
        if (FAILED(hr)) {
            pfsink->Release();
            pMux->Release();
            pFW->Release();
            m_FG->RemoveFilter(pMux);
            DbgLog((LOG_ERROR,1,TEXT("Can't add FW to FG: %x"), hr));
            return hr;
        }
        FindAPin(pMux, PINDIR_OUTPUT, NULL, NULL, FALSE, 0, &pMuxOutput);
        FindAPin(pFW, PINDIR_INPUT, NULL, NULL, FALSE, 0, &pFWInput);

        if (pMuxOutput && pFWInput && (hr = m_FG->ConnectDirect(pMuxOutput,
                                                    pFWInput, NULL)) == NOERROR) {
            DbgLog((LOG_TRACE,1,TEXT("Created renderer section of graph")));
        } else {
            if (pMuxOutput == NULL)
                DbgLog((LOG_ERROR,1,TEXT("Can't find MUX output pin")));
            if (pFWInput == NULL)
                DbgLog((LOG_ERROR,1,TEXT("Can't find FW input pin")));
            if (pMuxOutput && pFWInput)
                DbgLog((LOG_ERROR,1,TEXT("Can't connect MUX to FW: %x"), hr));
            if (pMuxOutput)
                pMuxOutput->Release();
            if (pFWInput)
                pFWInput->Release();
            m_FG->RemoveFilter(pMux);
            m_FG->RemoveFilter(pFW);
            pfsink->Release();
            pMux->Release();
            pFW->Release();
            return E_FAIL;
        }

        if (pMuxOutput)
            pMuxOutput->Release();
        if (pFWInput)
            pFWInput->Release();
        pFW->Release();
    }
    
    *ppf = pMux;	// app now has reference to it
    if (pSink)		// app wants a reference to this too
	*pSink = pfsink;
    else
        pfsink->Release();
    return hr;
}


HRESULT CBuilder2_2::FindInterface(const GUID *pCategory, const GUID *pType, IBaseFilter *pf, REFIID riid, void **ppint)
{
    IPin *pPin, *pPinIn;
    IBaseFilter *pDF;

    if (pf == NULL || ppint == NULL)
	return E_POINTER;

    DbgLog((LOG_TRACE,1,TEXT("FindInterface")));

    // The interface they want might be on a WDM capture filter not created yet,
    // so it's time to build the left hand side of the graph for them.
    if (pCategory && m_FG)
	AddSupportingFilters(pf);

    if (pCategory && *pCategory == LOOK_UPSTREAM_ONLY) {
	return FindInterfaceUpstream(pf, riid, ppint);
    }

    if (pCategory && *pCategory == LOOK_DOWNSTREAM_ONLY) {
	return FindInterfaceDownstream(pf, riid, ppint);
    }

    HRESULT hr = pf->QueryInterface(riid, ppint);
    if (hr == NOERROR) {
        DbgLog((LOG_TRACE,1,TEXT("Found the interface on the filter")));
	return hr;
    }
	
    // No category?  Try all the pins!
    if (pCategory == NULL) {
	hr = FindInterfaceDownstream(pf, riid, ppint);
	if (hr != NOERROR)
	    hr = FindInterfaceUpstream(pf, riid, ppint);
	return hr;
    }

    // Try downstream of only a particular pin

    hr = FindAPin(pf, PINDIR_OUTPUT, pCategory, pType, FALSE, 0, &pPin);

    if (hr == NOERROR) {
	hr = pPin->QueryInterface(riid, ppint);
	if (hr == NOERROR) {
	    pPin->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found the interface on the pin")));
	    return hr;
	}
    } else {
	// What the app thinks is a preview pin, may actually be a VIDEOPORT
	// pin, so we have to try that before giving up.
	if (pCategory && *pCategory == PIN_CATEGORY_PREVIEW && 
			(pType == NULL || *pType == MEDIATYPE_Video)) {
            DbgLog((LOG_TRACE,1,TEXT("PREVIEW failed - trying VIDEOPORT")));
	    hr = FindInterface(&PIN_CATEGORY_VIDEOPORT, pType, pf, riid, ppint);
	    if (hr == S_OK)
		return hr;
	}
        DbgLog((LOG_TRACE,1,TEXT("Can't find the interface anywhere!")));
	return E_NOINTERFACE;
    }

    // Now go downstream FROM THIS PIN ONLY until we find it or fall off the
    // edge of the earth.

    pPin->ConnectedTo(&pPinIn);
    pPin->Release();
    if (pPinIn) {
	hr = pPinIn->QueryInterface(riid, ppint);
	if (hr == NOERROR) {
	    pPin->Release();
            DbgLog((LOG_TRACE,1,TEXT("Found the interface on the input pin")));
	    return hr;
	}
	PIN_INFO pininfo;
	hr = pPinIn->QueryPinInfo(&pininfo);
	pPinIn->Release();
	if (hr == NOERROR) {
 	    pDF = pininfo.pFilter;
	    hr = pDF->QueryInterface(riid, ppint);
	    if (hr == NOERROR) {
	        pDF->Release();
                DbgLog((LOG_TRACE,1,TEXT("Found interface downstream filter")));
	        return hr;
	    }
            hr = FindInterfaceDownstream(pDF, riid, ppint);
            pDF->Release();
            if (SUCCEEDED(hr)) {
	        return hr;
            }
	}
    }

    // Now go upstream until we find it or fall off the edge of the earth
    hr = FindInterfaceUpstream(pf, riid, ppint);
    return hr;
}


// Make a CC Decoder...
// !!! This is ridiculous
HRESULT CBuilder2_2::MakeCCDecoder(IBaseFilter **ppf)
{
    DbgLog((LOG_TRACE,1,TEXT("Make a CC Decoder")));

    if (ppf == NULL)
	return E_POINTER;

    // Enumerate all the "WDM Streaming VBI codecs"
    ICreateDevEnum *pCreateDevEnum;
    HRESULT hr = CoCreateInstance(CLSID_SystemDeviceEnum, NULL,
				CLSCTX_INPROC_SERVER,
			  	IID_ICreateDevEnum, (void**)&pCreateDevEnum);
    if (hr != NOERROR)
	return E_FAIL;
    IEnumMoniker *pEm;
    hr = pCreateDevEnum->CreateClassEnumerator(AM_KSCATEGORY_VBICODEC, &pEm, 0);
    pCreateDevEnum->Release();
    if (hr != NOERROR) {
        DbgLog((LOG_TRACE,1,TEXT("Can't enumerate WDM Streaming VBI Codecs")));
	return E_FAIL;
    }
    pEm->Reset();
    ULONG cFetched;
    IMoniker *pM;
    *ppf = NULL;
    while(hr = pEm->Next(1, &pM, &cFetched), hr==S_OK)
    {
	IPropertyBag *pBag;
	hr = pM->BindToStorage(0, 0, IID_IPropertyBag, (void **)&pBag);
	if(SUCCEEDED(hr)) {
	    VARIANT var;
	    var.vt = VT_BSTR;
	    hr = pBag->Read(L"FriendlyName", &var, NULL);
	    if (hr == NOERROR) {
		if (lstrcmpiW(var.bstrVal, L"CC Decoder") == 0) {
	    	    hr = pM->BindToObject(0, 0, IID_IBaseFilter, (void**)ppf);
		    SysFreeString(var.bstrVal);
		    pBag->Release();
	    	    pM->Release();
	    	    break;
		}
		SysFreeString(var.bstrVal);
	    }
	    pBag->Release();
	}
	pM->Release();
    }
    pEm->Release();

    if (SUCCEEDED(hr) && *ppf) {
        DbgLog((LOG_TRACE,1,TEXT("Believe it or not, made a CC Decoder.")));
	return S_OK;
    } else {
        DbgLog((LOG_TRACE,1,TEXT("No filter with name CC Decoder.")));
	return E_FAIL;
    }
}


// Insert the OVMixer given into the preview stream
HRESULT CBuilder2_2::InsertOVIntoPreview(IUnknown *pSource, IBaseFilter *pOV)
{
    DbgLog((LOG_TRACE,1,TEXT("Inserting OVMixer into preview stream")));

    IPin *pPinOut, *pPinIn, *pNewOut;
    IBaseFilter *pf;
    // Find the capture filter's preview pin - (this is not needed for VPE)
    HRESULT hr = FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_PREVIEW,
					&MEDIATYPE_Video, FALSE, 0, &pPinOut);
    // there is none.  We're done!
    if (hr != S_OK)
	return S_OK;

    IPin *pOVIn, *pOVOut;
    hr = FindSourcePin(pOV, PINDIR_INPUT, NULL, NULL, TRUE, 0, &pOVIn);
    if (FAILED(hr)) {
	pPinOut->Release();
	return E_FAIL;
    }
    hr = FindSourcePin(pOV, PINDIR_OUTPUT, NULL, NULL, TRUE, 0, &pOVOut);
    if (FAILED(hr)) {
	pPinOut->Release();
	pOVIn->Release();
	return E_FAIL;
    }

    while (1) {
	pPinOut->ConnectedTo(&pPinIn);
        if (pPinIn == NULL) {
	    pPinOut->Release();
	    pOVIn->Release();
	    pOVOut->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't find connected pin")));
	    return E_FAIL;
	}
	PIN_INFO pininfo;
	hr = pPinIn->QueryPinInfo(&pininfo);
        if (hr != NOERROR || pininfo.pFilter == NULL) {
	    pPinIn->Release();
	    pPinOut->Release();
	    pOVIn->Release();
	    pOVOut->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't find filter from pin")));
	    return E_FAIL;
	}
 	pf = pininfo.pFilter;
        hr = FindSourcePin(pf, PINDIR_OUTPUT, NULL, NULL, FALSE, 0, &pNewOut);
	// no output pins - this is the renderer
	if (hr != S_OK) {
	    if (SUCCEEDED(m_FG->Disconnect(pPinIn))) {
	        if (SUCCEEDED(m_FG->Disconnect(pPinOut))) {
	            if (SUCCEEDED(m_FG->Connect(pPinOut, pOVIn))) {
	                if (SUCCEEDED(m_FG->Connect(pOVOut, pPinIn))) {
			    pPinIn->Release();
        		    pf->Release();
			    pPinOut->Release();
	    		    pOVIn->Release();
	    		    pOVOut->Release();
    			    DbgLog((LOG_TRACE,1,TEXT("OVMixer inserted")));
			    return S_OK;
			}
		    }
		}
	    }
	    // error, oh well, we tried
	    pPinIn->Release();
            pf->Release();
	    pPinOut->Release();
	    pOVIn->Release();
	    pOVOut->Release();
    	    DbgLog((LOG_ERROR,1,TEXT("OV insertion ERROR!")));
	    return E_FAIL;
	}
	pPinOut->Release();
	pPinOut = pNewOut;
	pPinIn->Release();
        pf->Release();
    }
}


// Make a Tee/Sink-to-Sink Converter
// !!! This is ridiculous too
HRESULT CBuilder2_2::MakeKernelTee(IBaseFilter **ppf)
{
    DbgLog((LOG_TRACE,1,TEXT("Make a Kernel Tee")));

    if (ppf == NULL)
	return E_POINTER;

    // Enumerate all the "WDM Streaming Splitter Thingys"
    ICreateDevEnum *pCreateDevEnum;
    HRESULT hr = CoCreateInstance(CLSID_SystemDeviceEnum, NULL,
				CLSCTX_INPROC_SERVER,
			  	IID_ICreateDevEnum, (void**)&pCreateDevEnum);
    if (hr != NOERROR)
	return E_FAIL;
    IEnumMoniker *pEm;
    hr = pCreateDevEnum->CreateClassEnumerator(AM_KSCATEGORY_SPLITTER, &pEm, 0);
    pCreateDevEnum->Release();
    if (hr != NOERROR) {
        DbgLog((LOG_TRACE,1,TEXT("Can't enumerate WDM Streaming Splitters")));
	return E_FAIL;
    }
    pEm->Reset();
    ULONG cFetched;
    IMoniker *pM;
    *ppf = NULL;
    while(hr = pEm->Next(1, &pM, &cFetched), hr==S_OK)
    {
	IPropertyBag *pBag;
	hr = pM->BindToStorage(0, 0, IID_IPropertyBag, (void **)&pBag);
	if(SUCCEEDED(hr)) {
	    VARIANT var;
	    var.vt = VT_BSTR;
	    hr = pBag->Read(L"FriendlyName", &var, NULL);
	    if (hr == NOERROR) {
		if (lstrcmpiW(var.bstrVal,L"Tee/Sink-to-Sink Converter") == 0) {
	    	    hr = pM->BindToObject(0, 0, IID_IBaseFilter, (void**)ppf);
		    SysFreeString(var.bstrVal);
		    pBag->Release();
	    	    pM->Release();
	    	    break;
		}
		SysFreeString(var.bstrVal);
	    }
	    pBag->Release();
	}
	pM->Release();
    }
    pEm->Release();

    if (SUCCEEDED(hr) && *ppf) {
        DbgLog((LOG_TRACE,1,TEXT("Believe it or not, made a Kernel Tee.")));
	return S_OK;
    } else {
        DbgLog((LOG_TRACE,1,TEXT("No filter with name Kernel Tee.")));
	return E_FAIL;
    }
}



//========================================================================
//
// GetAMediaType
//
// Enumerate the media types of *ppin.  If they all have the same majortype
// then set MajorType to that, else set it to CLSID_NULL.  If they all have
// the same subtype then set SubType to that, else set it to CLSID_NULL.
// If something goes wrong, set both to CLSID_NULL and return the error.
//========================================================================
HRESULT GetAMediaType( IPin * ppin, CLSID & MajorType, CLSID & SubType)
{

    HRESULT hr;
    IEnumMediaTypes *pEnumMediaTypes;

    /* Set defaults */
    MajorType = CLSID_NULL;
    SubType = CLSID_NULL;

    hr = ppin->EnumMediaTypes(&pEnumMediaTypes);

    if (FAILED(hr)) {
        return hr;    // Dumb or broken filters don't get connected.
    }

    ASSERT (pEnumMediaTypes!=NULL);

    /* Put the first major type and sub type we see into the structure.
       Thereafter if we see a different major type or subtype then set
       the major type or sub type to CLSID_NULL, meaning "dunno".
       If we get so that both are dunno, then we might as well return (NYI).
    */

    BOOL bFirst = TRUE;

    for ( ; ; ) {

        AM_MEDIA_TYPE *pMediaType = NULL;
        ULONG ulMediaCount = 0;

        /* Retrieve the next media type
           Need to delete it when we've done.
        */
        hr = pEnumMediaTypes->Next(1, &pMediaType, &ulMediaCount);
        ASSERT(SUCCEEDED(hr));
        if (FAILED(hr)) {
            MajorType = CLSID_NULL;
            SubType = CLSID_NULL;
            pEnumMediaTypes->Release();
            return NOERROR;    // we can still plough on
        }

        if (ulMediaCount==0) {
            pEnumMediaTypes->Release();
            return NOERROR;       // normal return
        }

        if (bFirst) {
            MajorType = pMediaType[0].majortype;
            SubType = pMediaType[0].subtype;
            bFirst = FALSE;
        } else {
            if (SubType != pMediaType[0].subtype) {
                SubType = CLSID_NULL;
            }
            if (MajorType != pMediaType[0].majortype) {
                MajorType = CLSID_NULL;
            }
        }
        DeleteMediaType(pMediaType);
    }
} // GetAMediaType



// if there isn't one yet, make else, else use the existing one
//
HRESULT CBuilder2_2::MakeVMR(void **pf)
{
    IEnumFilters *pFilters = NULL;
    IBaseFilter *pFilter = NULL;
    FILTER_INFO FI;
    ULONG n;
    HRESULT hr;

    if (FAILED(hr = m_FG->EnumFilters(&pFilters))) {
        DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
        return hr;
    }

    while (pFilters->Next(1, &pFilter, &n) == S_OK) {

        if (FAILED(pFilter->QueryFilterInfo(&FI))) {
            DbgLog((LOG_ERROR,1,TEXT("QueryFilterInfo failed!")));
        } else {
            FI.pGraph->Release();
            if (lstrcmpiW(FI.achName, L"Video Renderer") == 0) {
                *pf = (void *)pFilter;
                pFilters->Release();
                return S_OK;
            }
        }
        pFilter->Release();
    }
    pFilters->Release();

    hr = CoCreateInstance((REFCLSID)CLSID_VideoMixingRenderer, NULL,
        CLSCTX_INPROC,(REFIID)IID_IBaseFilter, pf);
    return hr;
}


#if 0
// if there isn't one yet, make else, else use the existing one
//
HRESULT CBuilder2_2::MakeVPM(void **pf)
{
    IEnumFilters *pFilters = NULL;
    IBaseFilter *pFilter = NULL;
    FILTER_INFO FI;
    ULONG n;
    HRESULT hr;

    if (FAILED(hr = m_FG->EnumFilters(&pFilters))) {
        DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
        return hr;
    }

    while (pFilters->Next(1, &pFilter, &n) == S_OK) {

        if (FAILED(pFilter->QueryFilterInfo(&FI))) {
            DbgLog((LOG_ERROR,1,TEXT("QueryFilterInfo failed!")));
        } else {
            FI.pGraph->Release();
            if (lstrcmpiW(FI.achName, L"Overlay Mixer") == 0) {
                *pf = (void *)pFilter;
                pFilters->Release();
                return S_OK;
            }
        }
        pFilter->Release();
    }
    pFilters->Release();

    hr = CoCreateInstance((REFCLSID)CLSID_VideoPortManager, NULL,
        CLSCTX_INPROC,(REFIID)IID_IBaseFilter, pf);
    return hr;
}
#endif


HRESULT CBuilder2_2::RenderStream(const GUID *pCategory, const GUID *pType, IUnknown *pSource, IBaseFilter *pfCompressor, IBaseFilter *pfRenderer)
{
    HRESULT hr;
    IPin *pPinOut = NULL, *pPinIn, *pPinT;
    BOOL fFreeRenderer = FALSE;
    BOOL fFakedPreview = FALSE;
    BOOL fNeedOV, fCapturePin, fNoPreviewPin;

    if (pSource == NULL)
	return E_POINTER;

    DbgLog((LOG_TRACE,1,TEXT("RenderStream")));

    if (pCategory && *pCategory == PIN_CATEGORY_VIDEOPORT &&
						(pfCompressor || pfRenderer)) {
        DbgLog((LOG_TRACE,1,TEXT("VPE can't have compressor or renderer")));
	return E_INVALIDARG;
    }

    if (pCategory && *pCategory == PIN_CATEGORY_VIDEOPORT_VBI &&
						(pfCompressor || pfRenderer)) {
        DbgLog((LOG_TRACE,1,TEXT("VPVBI can't have compressor or renderer")));
	return E_INVALIDARG;
    }

    // if we're rendering VBI/CC the default way (OVMixer) we need video preview
    // rendered first so we can make it go through OVMixer too
    if (pCategory && (*pCategory == PIN_CATEGORY_VBI ||
                *pCategory == PIN_CATEGORY_CC) && pfCompressor == NULL &&
                pfRenderer == NULL) {
        DbgLog((LOG_TRACE,1,TEXT("Render VBI/CC needs PREVIEW rendered 1st")));
	RenderStream(&PIN_CATEGORY_PREVIEW, &MEDIATYPE_Video, pSource,
								NULL, NULL);
    }

    // we need a filtergraph
    if (m_FG == NULL) {
        hr = MakeFG();
	if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't instantiate FGraph: %x"), hr));
	    return hr;
	}
    }

    // figure out if we're on an OS that has the new VideoMixingRenderer
    if (m_fVMRExists == DONT_KNOW_YET) {
        IBaseFilter *pF = NULL;
        hr = CoCreateInstance((REFCLSID)CLSID_VideoMixingRenderer, NULL,
		CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pF);
        if (SUCCEEDED(hr)) {
            m_fVMRExists = FALSE;   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            pF->Release();
        } else {
            m_fVMRExists = FALSE;
        }
    }

    // used when making renderer
    BOOL fUnc = TRUE;   // we'll be looking for the 0'th unconnected in pin
    BOOL nNum = 0;

    // Find a proper unconnected source pin
    hr = FindSourcePin(pSource, PINDIR_OUTPUT, pCategory, pType, TRUE, 0,
								&pPinOut);

    // maybe the VP pin was already connected to an OVMIXER/VPM by rendering
    // the capture pin.  If so, now make sure the OVMIXER/VPM pin is rendered.
    if (FAILED(hr) && pCategory && *pCategory == PIN_CATEGORY_VIDEOPORT) {

        // is there a connected VP pin?
        hr = FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_VIDEOPORT,
                                            pType, FALSE, 0, &pPinT);
        if (hr == S_OK) {
            pPinT->Release();	// not the last ref count, relax
            IPin *pTT;
            hr = pPinT->ConnectedTo(&pTT);
            if (hr == S_OK) {
                DbgLog((LOG_TRACE,1,TEXT("No Preview-VPE rendered-RenderOV")));
                pTT->Release();
                PIN_INFO pi;
                pTT->QueryPinInfo(&pi);
                if (pi.pFilter) pi.pFilter->Release();
                hr = FindAPin(pi.pFilter, PINDIR_OUTPUT, NULL, NULL, TRUE,
                                            0, &pPinOut);
                if (hr == S_OK)
                    goto RenderIt;
            }
        }
    }

    // if we're being asked to render the preview pin, but there is none,
    // but there IS a VP pin, then that's the one we're supposed to render.
    if (hr != S_OK && pCategory && *pCategory == PIN_CATEGORY_PREVIEW) {
        hr = FindSourcePin(pSource, PINDIR_OUTPUT, pCategory, pType, FALSE, 0,
									&pPinT);
	if (hr != S_OK && (pType == NULL || *pType == MEDIATYPE_Video)) {
            hr = FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_VIDEOPORT,
						NULL, FALSE, 0, &pPinT);
	    if (hr == S_OK) {
		pPinT->Release();	// not the last ref count, relax
		IPin *pTT;
		hr = pPinT->ConnectedTo(&pTT);
		// If the VPE pin is rendererd already, maybe it was because
		// rendering the capture pin rendered it to an OVMIXER/VPM.  Now
		// we must make sure the OVMIXER/VPM is rendered.
		if (hr == S_OK) {
                    DbgLog((LOG_TRACE,1,TEXT("No Preview-VPE rendered-NOP")));
		    pTT->Release();
                    PIN_INFO pi;
                    pTT->QueryPinInfo(&pi);
                    if (pi.pFilter) pi.pFilter->Release();
	            hr = FindAPin(pi.pFilter, PINDIR_OUTPUT, NULL, NULL, TRUE,
                                                0, &pPinOut);
                    if (hr == S_OK)
                        goto RenderIt;


                    // We may have hidden the video window because they didn't
                    // want preview but we had to make a renderer.  Now we know
                    // we want preview, so show it.
                    IVideoWindow *pVW = NULL;
                    hr = m_FG->QueryInterface(IID_IVideoWindow, (void **)&pVW);
                    if (hr != NOERROR) {
                        DbgLog((LOG_ERROR,1,TEXT("Can't find IVideoWindow")));
                        return hr;
                    }
                    pVW->put_AutoShow(OATRUE);
                    pVW->Release();
		    return S_OK;
		}
                DbgLog((LOG_TRACE,1,TEXT("No Preview - render VPE instead")));
	        // !!! this won't work if pSource is a pin
	        return RenderStream(&PIN_CATEGORY_VIDEOPORT, NULL, pSource,
						pfCompressor, pfRenderer);
	    }
	} else if (hr == S_OK) {
	    pPinT->Release();
	    return E_FAIL;	// already rendered
	}
    }
    
    // There is none.  We'll have to grovel for a parser after it and find
    // one of its unconnected output pins (assuming no category was given, this
    // is probably a file source filter)
    if (hr != NOERROR && pCategory == NULL) {
        hr = FindSourcePin(pSource, PINDIR_OUTPUT, NULL, NULL,FALSE,0,&pPinOut);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find source output")));
	    return hr;
	}
	pPinOut->ConnectedTo(&pPinIn);
	pPinOut->Release();
        if (pPinIn == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find parser input")));
	    return hr;
	}
	PIN_INFO pininfo;
	hr = pPinIn->QueryPinInfo(&pininfo);
	pPinIn->Release();
        if (hr != NOERROR || pininfo.pFilter == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find parser filter")));
	    return hr;
	}
 	IBaseFilter *pfParser = pininfo.pFilter;
	// !!! This only works for files with 1 video and 1 audio stream.
	// Anything more complicated, and this code won't do the right thing.
  	// If one stream isn't being recompressed, you need to render the stream
	// that's going through a compressor first, because an operation like
 	// connecting a source filter to the AVI MUX will work on the first 
	// stream it finds
	hr = FindAPin(pfParser, PINDIR_OUTPUT, NULL, pType, TRUE, 0, &pPinOut);
        if (hr != NOERROR) {
            DbgLog((LOG_TRACE,1,TEXT("Can't find another parser output pin")));
            DbgLog((LOG_TRACE,1,TEXT("Maybe there's a DV splitter next?")));
            hr = FindAPin(pfParser, PINDIR_OUTPUT, NULL, pType, FALSE, 0,
								&pPinOut);
	    pfParser->Release();
            if (hr != NOERROR) {
                DbgLog((LOG_ERROR,1,TEXT("Can't find parser output")));
	        return hr;
	    }
	    hr = pPinOut->ConnectedTo(&pPinIn);
	    pPinOut->Release();
            if (pPinIn == NULL) {
                DbgLog((LOG_ERROR,1,TEXT("Can't find parser input")));
	        return hr;
	    }
	    PIN_INFO pininfo;
	    hr = pPinIn->QueryPinInfo(&pininfo);
	    pPinIn->Release();
            if (hr != NOERROR || pininfo.pFilter == NULL) {
                DbgLog((LOG_ERROR,1,TEXT("Can't find parser filter")));
	        return hr;
	    }
 	    pfParser = pininfo.pFilter;
	    hr = FindAPin(pfParser, PINDIR_OUTPUT, NULL, pType,TRUE,0,&pPinOut);
	    pfParser->Release();
            if (hr != NOERROR) {
                DbgLog((LOG_TRACE,1,TEXT("Can't find another parser output")));
		return hr;
	    }
        } else {
	    pfParser->Release();
	}
    }

    // Some capture filters don't have both a capture and preview pin, they
    // only have a capture pin.  In this case we have to put a smart tee filter
    // after the capture filter to provide both capture and preview.

    // figure out if this filter has a capture pin but no preview pin
    IBaseFilter *pSmartT;
    fCapturePin = FindSourcePin(pSource, PINDIR_OUTPUT,
			&PIN_CATEGORY_CAPTURE, pType, FALSE, 0, &pPinT) == S_OK;
    DbgLog((LOG_TRACE,1,TEXT("fCapturePin=%d"), fCapturePin));
    if (fCapturePin)
	pPinT->Release();
    fNoPreviewPin = !IsThereAnyPreviewPin(pType, pSource);

    // if so, we need to figure out if we have/need a smart tee filter
    if (fCapturePin && fNoPreviewPin &&
			((pCategory && *pCategory == PIN_CATEGORY_CAPTURE) ||
    			(pCategory && *pCategory == PIN_CATEGORY_PREVIEW))) {

        DbgLog((LOG_TRACE,1,TEXT("Rendering a filter with only CAPTURE pin")));

	// close the pin we got above... we're doing something different now
	if (pPinOut) {
	    pPinOut->Release();
	    pPinOut = NULL;
	}

	// Is the capture pin unconnected thus far?
	if (FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE, pType,
						TRUE, 0, &pPinT) == S_OK) {

            DbgLog((LOG_TRACE,1,TEXT("CAPTURE pin is unconnected so far")));

	    // If so, make a smart TEE
            hr = CoCreateInstance((REFCLSID)CLSID_SmartTee, NULL,
		CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pSmartT);
	    if (hr == S_OK) {
                DbgLog((LOG_TRACE,1,TEXT("Made a Smart Tee")));
		// add it to the graph !!! don't change this name
                hr = m_FG->AddFilter(pSmartT, L"Smart Tee");
	 	if (SUCCEEDED(hr)) {	// can return S_ codes
                    DbgLog((LOG_TRACE,1,TEXT("Added it to graph %x"),hr));
		    // connect our output to its input
        	    hr = FindAPin(pSmartT, PINDIR_INPUT, NULL, NULL, TRUE, 0,
								&pPinIn);
		    if (hr == S_OK) {
        	        hr = m_FG->Connect(pPinT, pPinIn);
			if (hr == S_OK) {
                            DbgLog((LOG_TRACE,1,TEXT("Connected it")));
			    pPinIn->Release();
			    pPinT->Release();
			} else {
                            DbgLog((LOG_ERROR,1,TEXT("Connect failed %x"),hr));
			    pPinIn->Release();
			    pPinT->Release();
			    m_FG->RemoveFilter(pSmartT);
			    pSmartT->Release();
			}
		    } else {
                        DbgLog((LOG_ERROR,1,TEXT("Find input failed %x"),hr));
			pPinT->Release();
			m_FG->RemoveFilter(pSmartT);
			pSmartT->Release();
		    }
		} else {
		    pPinT->Release();
		    pSmartT->Release();
		}
	    } else {
		pPinT->Release();
	    }

	    // now use the T
	    if (hr == S_OK && *pCategory == PIN_CATEGORY_CAPTURE) {
                DbgLog((LOG_TRACE,1,TEXT("Use T to render capture")));
		// use the first pin
        	hr = FindAPin(pSmartT, PINDIR_OUTPUT, NULL, NULL, TRUE, 0,
								&pPinOut);
		ASSERT(hr == S_OK);	// what could go wrong?
		pSmartT->Release();
	    } else if (hr == S_OK) {
                DbgLog((LOG_TRACE,1,TEXT("Use T to render preview")));
		// use the second pin
        	hr = FindAPin(pSmartT, PINDIR_OUTPUT, NULL, NULL, TRUE, 1,
								&pPinOut);
		ASSERT(hr == S_OK);	// what could go wrong?
		pSmartT->Release();
		fFakedPreview = TRUE;	// we didn't really render preview pin
	    }

	} else {

            DbgLog((LOG_TRACE,1,TEXT("CAPTURE pin is connected already")));

	    // Maybe there's already a Smart Tee in the graph we can use
	    hr = FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE,
					pType, FALSE, 0, &pPinT);
            if (hr == S_OK) {
		pPinT->ConnectedTo(&pPinIn);
	 	ASSERT(pPinIn);
		pPinT->Release();
		if (pPinIn) {
		    PIN_INFO pininfo;
		    hr = pPinIn->QueryPinInfo(&pininfo);
		    pPinIn->Release();
		    if (hr == S_OK) {
 		        pSmartT = pininfo.pFilter;
			FILTER_INFO filterinfo;
			hr = pSmartT->QueryFilterInfo(&filterinfo);
			if (hr == S_OK) {
			    filterinfo.pGraph->Release();
			    // !!! don't change this name
			    // the name may have been suffixed with a number
			    WCHAR wch[10];
			    lstrcpynW(wch, filterinfo.achName, 10);
			    if (lstrcmpW(wch, L"Smart Tee") !=0) {
				hr = E_FAIL;
				pSmartT->Release();
            		        DbgLog((LOG_TRACE,1,TEXT("but NOT to Tee")));
			    }
            		    DbgLog((LOG_TRACE,1,TEXT("Found Smart Tee")));
			} else {
			    pSmartT->Release();
			}
		    }
		}
	    }

	    // get the proper Tee output to use
	    if (hr == S_OK && *pCategory == PIN_CATEGORY_CAPTURE) {
                DbgLog((LOG_TRACE,1,TEXT("Render Tee capture pin")));
		hr = E_FAIL;
        	if (FindAPin(pSmartT, PINDIR_OUTPUT, NULL, NULL, TRUE,0,&pPinT) 
								== S_OK) { 
        	    if (FindAPin(pSmartT, PINDIR_OUTPUT, NULL, NULL, FALSE, 0,
							&pPinOut) == S_OK) { 
			if (pPinT == pPinOut) {
            		    DbgLog((LOG_TRACE,1,TEXT("It is free!")));
			    pPinT->Release();
			    hr = NOERROR;
			} else {
            		    DbgLog((LOG_TRACE,1,TEXT("It is NOT free!")));
			    pPinT->Release();
			    pPinOut->Release();
			}
		    } else {
            		DbgLog((LOG_TRACE,1,TEXT("It is NOT free!")));
			pPinT->Release();
		    }
		}
		pSmartT->Release();

	    // find the second T pin
	    } else if (hr == S_OK) {
                DbgLog((LOG_TRACE,1,TEXT("Render Tee preview pin")));
		hr = E_FAIL;
        	if (FindAPin(pSmartT, PINDIR_OUTPUT, NULL, NULL,TRUE,0, &pPinT) 
								== S_OK) { 
        	    if (FindAPin(pSmartT, PINDIR_OUTPUT, NULL, NULL, FALSE, 1,
							&pPinOut) == S_OK) { 
			if (pPinT == pPinOut) {
            		    DbgLog((LOG_TRACE,1,TEXT("It is free!")));
			    pPinT->Release();
			    hr = NOERROR;
			    // we didn't really render preview pin
			    fFakedPreview = TRUE;
			} else {
            		    DbgLog((LOG_TRACE,1,TEXT("It is NOT free!")));
			    pPinT->Release();
			    pPinOut->Release();
			}
		    } else {
            		DbgLog((LOG_TRACE,1,TEXT("It is NOT free!")));
			pPinT->Release();
		    }
		}
		pSmartT->Release();
	    }

	}
    }

    // by the time we get here, pPinOut is the pin we want to render if hr==S_OK
    DbgLog((LOG_TRACE,1,TEXT("So here we are...")));

    // Are we being told to render the VBI pin? Let's put the Kernel TEE and
    // CC filters in unless they specified rendering filters to use.. that will
    // be our default way to render them

// !!!!!! This is kind of random... if they supply a compressor, I'll assume
// they may not want to turn VBI to CC.. otherwise I will.  Other choices:
// 1:  Render(CC) will render(VBI) through cc decoder automagically (random too)
// I do want people to be able specify what filters come after VBI pin, though,
// yet automatically connect to a MUX if they specify a renderer.

    IBaseFilter *pTEE, *pCC;
    if (hr == NOERROR && pCategory && *pCategory == PIN_CATEGORY_VBI &&
							pfCompressor == NULL) {
        DbgLog((LOG_TRACE,1,TEXT("Render VBI: need Kernel TEE")));

	// make a Tee/Sink-to-Sink Converter, necessary for efficient ring 0
        // VBI magic
        hr = MakeKernelTee(&pTEE);
        if (hr != NOERROR) {
	    pPinOut->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't instantiate TEE: %x"), hr));
	    return hr;
        }

	// put it in the graph
        hr = m_FG->AddFilter(pTEE, L"Tee/Sink-to-Sink Converter");
        if (FAILED(hr)) {
	    pPinOut->Release();
	    pTEE->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't add TEE to graph:%x"), hr));
	    return hr;
        }

	// connect our output to its input
        hr = FindAPin(pTEE, PINDIR_INPUT, NULL, NULL, TRUE, 0, &pPinIn);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find TEE input")));
	    pPinOut->Release();
	    pTEE->Release();
	    return hr;
        }
        hr = m_FG->Connect(pPinOut, pPinIn);
        pPinOut->Release();
        pPinIn->Release();
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("Can't connect filter to TEE: %x"),hr));
	    pTEE->Release();
	    return E_FAIL;
        }

	// get its output which will be connected to the renderer
        hr = FindAPin(pTEE, PINDIR_OUTPUT, NULL, NULL, TRUE, 0, &pPinOut);
	pTEE->Release();
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't get TEE output pin: %x"),hr));
	    return E_FAIL;
        }

        DbgLog((LOG_TRACE,1,TEXT("Render VBI: now comes a CC decoder")));

	// make a CC Decoder
        hr = MakeCCDecoder(&pCC);
        if (hr != NOERROR) {
	    pPinOut->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't instantiate CC: %x"), hr));
	    return hr;
        }

	// put it in the graph
        hr = m_FG->AddFilter(pCC, L"CC Decoder");
        if (FAILED(hr)) {
	    pPinOut->Release();
	    pCC->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't add CC to graph:%x"), hr));
	    return hr;
        }

	// connect our output to its input
        hr = FindAPin(pCC, PINDIR_INPUT, NULL, NULL, TRUE, 0, &pPinIn);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find CC input")));
	    pPinOut->Release();
	    pCC->Release();
	    return hr;
        }
        hr = m_FG->Connect(pPinOut, pPinIn);
        pPinOut->Release();
        pPinIn->Release();
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("Can't connect TEE to CC: %x"),hr));
	    pCC->Release();
	    return E_FAIL;
        }

	// get its output which will be connected to the renderer
        hr = FindAPin(pCC, PINDIR_OUTPUT, NULL, NULL, TRUE, 0, &pPinOut);
	pCC->Release();
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't get CC output pin: %x"),hr));
	    return E_FAIL;
        }
    }

    // Somebody might render a VBI pin twice, once to a mux, and again to
    // preview it while capturing.  If so, we won't find the unconnected pin 
    // the second time around.  Let's get the unconnected CC output and use
    // that

    IEnumFilters *pFilters;
    IBaseFilter *pFilter;
    ULONG	n;
    FILTER_INFO FI;
    if (hr != NOERROR && pCategory && *pCategory == PIN_CATEGORY_VBI) {
        hr = FindSourcePin(pSource, PINDIR_OUTPUT, pCategory, NULL, FALSE, 0,
								&pPinOut);
	// There is a *connected* VBI pin, though
	if (hr == NOERROR) {
	    pPinOut->Release();

            DbgLog((LOG_TRACE,1,TEXT("Rendering VBI a second time")));
            BOOL fFoundCC = FALSE;

            if (FAILED(m_FG->EnumFilters(&pFilters))) {
	        DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
	        return E_INVALIDARG;
            }

            while (pFilters->Next(1, &pFilter, &n) == S_OK) {

	        if (FAILED(pFilter->QueryFilterInfo(&FI))) {
		    DbgLog((LOG_ERROR,1,TEXT("QueryFilterInfo failed!")));
	        } else {
 	            FI.pGraph->Release();
                    if (lstrcmpiW(FI.achName, L"CC Decoder") == 0) {
                        fFoundCC = TRUE;
                        break;
                    }
	        }
                pFilter->Release();
            }
            pFilters->Release();
	    if (fFoundCC) {
                DbgLog((LOG_TRACE,1,TEXT("Found CC decoder attached to it")));
        	hr = FindSourcePin(pFilter, PINDIR_OUTPUT, NULL, NULL, TRUE, 0,
								&pPinOut);
		pFilter->Release();
	    } else {
                DbgLog((LOG_TRACE,1,TEXT("Couldn't find attached CC Decoder")));
	    }
	}
    }

    if (hr != NOERROR) {
        DbgLog((LOG_ERROR,1,TEXT("Can't find proper unconnected source pin")));
	return E_INVALIDARG;
    }

    // At this point, pPinOut is the pin we want to render.

    fNeedOV = FALSE;    // figure out if we need OVMixer/VPM

    // Are we being told to render the VPVBI pin?
    IBaseFilter *pVBI;
    if (pCategory && *pCategory == PIN_CATEGORY_VIDEOPORT_VBI) {
        DbgLog((LOG_TRACE,1,TEXT("Render VPVBI")));

        // In the new world, this pin goes to a VPM
        if (m_fVMRExists) {
            fNeedOV = TRUE;
            goto VP_VBIDone;
        }

	// make a VBI surface allocator, which is the only thing this thing
        // connects to
        hr = CoCreateInstance((REFCLSID)CLSID_VBISurfaces, NULL,
		CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pVBI);
        if (hr != NOERROR) {
	    pPinOut->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't instantiate VBISurfaces: %x"), hr));
	    return hr;
        }

	// put it in the graph
        hr = m_FG->AddFilter(pVBI, L"VBI Surface Allocator");
        if (FAILED(hr)) {
	    pPinOut->Release();
	    pVBI->Release();
            DbgLog((LOG_ERROR,1,TEXT("Can't add VBISurfaces to graph:%x"), hr));
	    return hr;
        }

	// connect our output to its input
        hr = FindAPin(pVBI, PINDIR_INPUT, NULL, NULL, TRUE, 0, &pPinIn);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find VBISurfaces input")));
	    pPinOut->Release();
	    pVBI->Release();
	    return hr;
        }
        hr = m_FG->Connect(pPinOut, pPinIn);
        pPinOut->Release();
        pPinIn->Release();
        pVBI->Release();
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("Can't connect to VBISurfaces: %x"),hr));
	    return E_FAIL;
        }

        DbgLog((LOG_TRACE,1,TEXT("VPVBI pin rendered")));
        return S_OK;
    }

VP_VBIDone:

    // To render a videoport pin, we need to put an OVMIXER/VPM in by hand

    // To render a preview pin that prefers VIDEOINFOHEADER2, we need to
    // put an overlay mixer in by hand, because by default VIDEOINFOHEADER2 and
    // and overlay mixer are NOT used...  however, if they supply a renderer
    // then they probably know what they are doing and we won't give them an
    // OVMIXER... we'll only do it for default renders
    // But if we have the new VMRenderer, that CAN accept VIDEOINFOHEADER2

    // VBI pins needs the OVMixer or the new VMR, assuming they didn't give us
    // any rendering filters they'd rather us use.

    // Ditto for CC pins (same as VBI without needing the CC decoder first)

    if (!m_fVMRExists && pfCompressor == NULL && pfRenderer == NULL &&
                    pCategory != NULL && *pCategory == PIN_CATEGORY_PREVIEW) {
        IEnumMediaTypes *pEnum;
	AM_MEDIA_TYPE *pmtTest;
        hr = pPinOut->EnumMediaTypes(&pEnum);
        if (hr == NOERROR) {
            ULONG u;
            pEnum->Reset();
            hr = pEnum->Next(1, &pmtTest, &u);
            pEnum->Release();
	    if (hr == S_OK && u == 1) {
		if (pmtTest->formattype == FORMAT_VideoInfo2) {
		    fNeedOV = TRUE;
            	    DbgLog((LOG_TRACE,1,TEXT("VideoInfo2 PREVIEW needs OVMixer")));
		}
		DeleteMediaType(pmtTest);
	    }
        }
    }
    if (pCategory && *pCategory == PIN_CATEGORY_VIDEOPORT) {
        DbgLog((LOG_TRACE,1,TEXT("VP pin needs OVMixer")));
	fNeedOV = TRUE;
    }
    if (!m_fVMRExists && pCategory && *pCategory == PIN_CATEGORY_VBI &&
                                pfRenderer == NULL && pfCompressor == NULL) {
        DbgLog((LOG_TRACE,1,TEXT("VBI pin needs OVMixer")));
	fNeedOV = TRUE;
    }
    if (!m_fVMRExists && pCategory && *pCategory == PIN_CATEGORY_CC &&
                                pfRenderer == NULL && pfCompressor == NULL) {
        DbgLog((LOG_TRACE,1,TEXT("CC pin needs OVMixer")));
	fNeedOV = TRUE;
    }


    IBaseFilter *pOV;
    if (fNeedOV) {

        DbgLog((LOG_TRACE,1,TEXT("We need an OVMixer now")));

        // maybe we already have an OVMixer... in which case it's vital to use
        // that one

        // note that the preview/vp pin must use the first pin, and vbi must
        // use the second pin

        DbgLog((LOG_TRACE,1,TEXT("Maybe we have one already?")));
        BOOL fMakeMixer = TRUE;

        if (FAILED(m_FG->EnumFilters(&pFilters))) {
	    DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
	    goto MakeMixer;     // warn caller we can't tell for sure?
        }

        while (pFilters->Next(1, &pFilter, &n) == S_OK) {

	    if (FAILED(pFilter->QueryFilterInfo(&FI))) {
		DbgLog((LOG_ERROR,1,TEXT("QueryFilterInfo failed!")));
	    } else {
 	        FI.pGraph->Release();
                if (lstrcmpiW(FI.achName, L"Overlay Mixer") == 0) {
                    fMakeMixer = FALSE;
                    pOV = pFilter;
                    break;
                }
	    }
            pFilter->Release();
        }
        pFilters->Release();

MakeMixer:

	// make an OV Mixer if we didn't find one already
	BOOL fOVRendered = FALSE;
        if (fMakeMixer) {
            if (m_fVMRExists) {
                hr = CoCreateInstance((REFCLSID)CLSID_VideoPortManager, NULL,
		    CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pOV);
            } else {
                hr = CoCreateInstance((REFCLSID)CLSID_OverlayMixer, NULL,
		    CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pOV);
            }
            if (hr != NOERROR) {
	        pPinOut->Release();
                DbgLog((LOG_ERROR,1,TEXT("Can't instantiate OVMixer: %x"), hr));
	        return hr;
            }

	    // put it in the graph
            hr = m_FG->AddFilter(pOV, L"Overlay Mixer"); // DON'T CHANGE NAME!
            if (FAILED(hr)) {
	        pPinOut->Release();
	        pOV->Release();
                DbgLog((LOG_ERROR,1,TEXT("Can't add OVMixer to graph:%x"), hr));
	        return hr;
            }

	    // If we're rendering VBI/CC through the OV Mixer, it will only
	    // work if the preview pin also goes through OV Mixer.  This is for
	    // the case where we DON'T have VPE for preview.. preview might be
	    // hooked directly to the renderer right now.
	    if (!m_fVMRExists && (*pCategory == PIN_CATEGORY_VBI ||
                                        *pCategory == PIN_CATEGORY_CC)) {
		InsertOVIntoPreview(pSource, pOV);
		fOVRendered = TRUE;
	    }

        }

        // PREVIEW or VIDEOPORT pins connect to the first pin (0)
        // VBI or CC pins connect to the second pin (1)
        int pin;
        if (*pCategory == PIN_CATEGORY_VIDEOPORT ||
                                        *pCategory == PIN_CATEGORY_PREVIEW) {
            pin = 0;
        } else if (!m_fVMRExists && (*pCategory == PIN_CATEGORY_VBI ||
                                        *pCategory == PIN_CATEGORY_CC)) {
            pin = 1;
        } else if (*pCategory == PIN_CATEGORY_VIDEOPORT_VBI && m_fVMRExists) {
            pin = 1;
        } else {
            ASSERT(FALSE);
        }

        DbgLog((LOG_TRACE,1,TEXT("We should connect to OV pin %d"), pin));

	// connect our output to its input
        hr = FindAPin(pOV, PINDIR_INPUT, NULL, NULL, FALSE, pin, &pPinIn);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find proper OVMix input %d"), pin));
	    pPinOut->Release();
	    pOV->Release();
	    return hr;
        }
        hr = m_FG->Connect(pPinOut, pPinIn);
        pPinOut->Release();
        pPinIn->Release();
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("Can't connect filter to OVMix: %x"),hr));
	    pOV->Release();
	    return E_FAIL;
        }

        // if we used an existing OVMixer, or made one but just connected its
	// output pin above in InsertOVIntoPreview, then its output is already
	// rendered, so we're done
        if (fMakeMixer && !fOVRendered) {
	    // get its output which will be connected to the renderer
            hr = FindAPin(pOV, PINDIR_OUTPUT, NULL, NULL, TRUE, 0, &pPinOut);
	    pOV->Release();
            if (hr != NOERROR) {
                DbgLog((LOG_ERROR,1,TEXT("Can't get OVMixer out pin: %x"),hr));
	        return E_FAIL;
            }
        } else {
	    pOV->Release();
            goto AllDone;
        }
    }

RenderIt:

    // they didn't give a renderer, so use a default video renderer.
    // Just calling Render on the pin could connect it to the mux!
    if (pfRenderer == NULL) {

	if (pType == NULL || *pType == MEDIATYPE_Video ||
					*pType == MEDIATYPE_Interleaved) {
            if (m_fVMRExists) {
                hr = MakeVMR((void **)&pfRenderer);
            } else {
                hr = CoCreateInstance((REFCLSID)CLSID_VideoRenderer, NULL,
		    CLSCTX_INPROC,(REFIID)IID_IBaseFilter,(void **)&pfRenderer);
            }
            if (hr != NOERROR) {
	        pPinOut->Release();
                DbgLog((LOG_ERROR,1,TEXT("Can't instantiate VidRenderer: %x"),hr));
	        return hr;
            }
	    fFreeRenderer = TRUE;

            hr = m_FG->AddFilter(pfRenderer, L"Video Renderer"); // DONT CHANGE
            if (FAILED(hr)) {
	        pPinOut->Release();
	        pfRenderer->Release();
                DbgLog((LOG_ERROR,1,TEXT("Can't add VidRenderer to graph:%x"),hr));
	        return hr;
            }
	} else if (*pType == MEDIATYPE_Audio) {
            hr = CoCreateInstance((REFCLSID)CLSID_DSoundRender, NULL,
		CLSCTX_INPROC, (REFIID)IID_IBaseFilter, (void **)&pfRenderer);
            if (hr != NOERROR) {
	        pPinOut->Release();
                DbgLog((LOG_ERROR,1,TEXT("Can't instantiate AudRenderer: %x"),hr));
	        return hr;
            }
	    fFreeRenderer = TRUE;

            hr = m_FG->AddFilter(pfRenderer, L"Audio Renderer");
            if (FAILED(hr)) {
	        pPinOut->Release();
	        pfRenderer->Release();
                DbgLog((LOG_ERROR,1,TEXT("Can't add AudRenderer to graph:%x"),hr));
	        return hr;
            }
	} else {
            DbgLog((LOG_ERROR,1,TEXT("ERROR!  Can't render non A/V MediaType without a renderer")));
	    pPinOut->Release();
	    return E_INVALIDARG;
	}
    }

    // in the new world, CC connects to a secret pin on the VMR
    if (m_fVMRExists && fFreeRenderer && pCategory &&
            (*pCategory == PIN_CATEGORY_VBI || *pCategory == PIN_CATEGORY_CC)) {
        IVMRFilterConfig *pVMR = NULL;
        hr = pfRenderer->QueryInterface(IID_IVMRFilterConfig, (void **)&pVMR);
        if (pVMR == NULL) {
            DbgLog((LOG_ERROR,1,TEXT("QI for IVMRFilterConfig FAILED")));
            pfRenderer->Release();
            return hr;
        }
        hr = pVMR->SetNumberOfStreams(2);
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("SetNumberOfStream(2) FAILED")));
            pfRenderer->Release();
            return hr;
        }
        fUnc = FALSE;   // use the secret input pin
        nNum = 1;
    }

    {
        GUID majorType, subType;
        GUID *pPinType = NULL;
        hr = GetAMediaType(pPinOut, majorType, subType);
        if (SUCCEEDED(hr) && majorType != CLSID_NULL) {
            pPinType = &majorType;
        }


        hr = FindAPin(pfRenderer, PINDIR_INPUT, NULL, pPinType, fUnc, nNum, &pPinIn);
        if (hr != NOERROR && pPinType) {
            hr = FindAPin(pfRenderer, PINDIR_INPUT, NULL, NULL, fUnc, nNum, &pPinIn);
        }
            
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find unconnected renderer input pin")));
            pPinOut->Release();
            if (fFreeRenderer)
                pfRenderer->Release();
            return hr;
        }
    }
    
    if (pfCompressor) {
	IPin *pXIn;
        hr = FindAPin(pfCompressor, PINDIR_INPUT, NULL, NULL, TRUE, 0, &pXIn);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find unconnected compressor input pin")));
	    pPinOut->Release();
	    pPinIn->Release();
	    if (fFreeRenderer)
	        pfRenderer->Release();
	    return E_FAIL;
        }

        hr = m_FG->Connect(pPinOut, pXIn);
        pPinOut->Release();
        pXIn->Release();
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("Can't connect source and compressor: %x"),
								    hr));
	    pPinIn->Release();
	    if (fFreeRenderer)
	        pfRenderer->Release();
	    return E_FAIL;
        }

        // !!! Break above connection if something fails now?

        hr = FindAPin(pfCompressor, PINDIR_OUTPUT, NULL, NULL, TRUE,0,&pPinOut);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find unconnected compressor output pin")));
	    pPinIn->Release();
	    if (fFreeRenderer)
	        pfRenderer->Release();
	    return E_FAIL;
        }
    }

    hr = m_FG->Connect(pPinOut, pPinIn);
    pPinOut->Release();
    pPinIn->Release();
    if (fFreeRenderer) {
	pfRenderer->Release();
	if (pType && *pType == MEDIATYPE_Interleaved) {
            DbgLog((LOG_TRACE,1,TEXT("*Render Interleave needs to render AUDIO now, too")));
	    HRESULT hr2 = RenderStream(NULL, &MEDIATYPE_Audio, pPinOut,
								NULL, NULL);
	    // !!! WHO CARES if it fails?  They might not have audio h/w!
	    hr2 = S_OK;
	    if (FAILED(hr2))
	        return hr2;
	}
    }
    if (FAILED(hr)) {
        DbgLog((LOG_ERROR,1,TEXT("Can't connect filter to renderer: %x"),hr));
	return hr;
    }

AllDone:

    DbgLog((LOG_TRACE,1,TEXT("Source pin rendered")));

    // We may need to insert other capture related filters at this point
    // upstream of the capture filter, like TVTuners, and Crossbars

    // !!! we do this for rendering any category, OK?

    // nothing to do
    if (!pCategory) {
	return NOERROR;
    }

    // If we just successfully rendered the capture pin, we better render
    // the video port pin too, because if there is one, it MUST be rendered
    // for capture to work!
    while (*pCategory == PIN_CATEGORY_CAPTURE &&
			(pType == NULL || *pType == MEDIATYPE_Video)) {
        DbgLog((LOG_TRACE,1,TEXT("Capture done - render VPE too")));

        // get the unconnected VIDEOPORT PIN
        hr = FindSourcePin(pSource, PINDIR_OUTPUT, &PIN_CATEGORY_VIDEOPORT,
                                                pType, TRUE, 0, &pPinOut);
        if (FAILED(hr))
            break;      // there isn't one, or it's already connected
        pPinOut->Release();

        DbgLog((LOG_TRACE,1,TEXT("Capture done - render VPE too")));
        RenderStream(&PIN_CATEGORY_VIDEOPORT, pType, pSource, NULL, NULL);

        // The problem is, making a video renderer gives a preview window
        // whether they want it or not.
        // Now hide the video window until somebody actually asks for preview
        IVideoWindow *pVW = NULL;
        hr = m_FG->QueryInterface(IID_IVideoWindow, (void **)&pVW);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find IVideoWindow")));
            return hr;
        }
        pVW->put_AutoShow(OAFALSE);
        pVW->Release();
        break;
    }

    if (*pCategory == PIN_CATEGORY_VIDEOPORT) {
        // We may have hidden the video window because they didn't want preview
        // but we had to make a renderer.  Now we know we want preview, so show
        // it.
        IVideoWindow *pVW = NULL;
        hr = m_FG->QueryInterface(IID_IVideoWindow, (void **)&pVW);
        if (hr != NOERROR) {
            DbgLog((LOG_ERROR,1,TEXT("Can't find IVideoWindow")));
            return hr;
        }
        pVW->put_AutoShow(OATRUE);
        pVW->Release();
    }

    // If we just successfully rendered the VBI pin, we better render
    // the VPVBI pin too, because if there is one, it MUST be rendered
    // for VBI to work!
    if (*pCategory == PIN_CATEGORY_VBI) {
        DbgLog((LOG_TRACE,1,TEXT("VBI rendered - render VPVBI too")));
        // !!! fail if it doesn't work but there was a VPVBI pin
        // !!! (succeed if already renderered)
	RenderStream(&PIN_CATEGORY_VIDEOPORT_VBI, NULL, pSource, NULL, NULL);
    }

    hr = pSource->QueryInterface(IID_IBaseFilter, (void **)&pFilter);
    if (hr == S_OK) {
        AddSupportingFilters(pFilter);
	pFilter->Release();
    }

    // warn the app if preview was faked up... it might care
    return fFakedPreview ? VFW_S_NOPREVIEWPIN : NOERROR;
}



// We may need to insert other capture related filters at this point
// upstream of the capture filter, like TVTuners, and Crossbars
//
HRESULT CBuilder2_2::AddSupportingFilters(IBaseFilter *pFilter)
{
    HRESULT hr = NOERROR;
    FILTER_STATE filterstate;
    IMediaFilter * pMediaFilter;

    if (pFilter == NULL) {
       return E_POINTER;
    }

    //
    // Don't reconstruct the graph if we're running
    //
    hr = pFilter->QueryInterface(IID_IMediaFilter, (void **)&pMediaFilter);
    if (SUCCEEDED (hr)) {
       hr = pMediaFilter->GetState(0, &filterstate);       
       pMediaFilter->Release();
       if ((hr != S_OK) || (filterstate != State_Stopped)) {
          return NOERROR;
       }
    }

    // Don't waste time trying the unconnected input pins that didn't work
    // last time.  If any input pins are connected, we've obviously done this
    // already
    int zz = 0;
    IPin *pPinIn, *pOut = NULL;
    while (1) {
        hr = FindAPin(pFilter, PINDIR_INPUT, NULL, NULL, FALSE, zz++, &pPinIn);
	if (hr != NOERROR)
	    break;	// ran out of pins
	pPinIn->Release();
	if (pPinIn->ConnectedTo(&pOut) == S_OK && pOut) {
	    pOut->Release();
	    return NOERROR;
	}
	zz++;
    }

    DbgLog((LOG_TRACE,1,TEXT("Searching for other necessary capture filters")));

    // Connect each pin that supports a medium

    DbgLog((LOG_TRACE,1,TEXT("Searching for pins that support mediums")));

    zz = 0;
    IKsPin *pKsPin;
    BOOL fFound = FALSE;
    PKSMULTIPLE_ITEM pmi;
    IPin *pPinOut;

    while (1) {
	// enumerate ALL PINS, not just unconnected ones because we're
	// connecting them in this loop and will get unpredictable results out
	// of zz otherwise
        hr = FindAPin(pFilter, PINDIR_INPUT, NULL, NULL, FALSE, zz++, &pPinIn);
	if (hr != NOERROR)
	    break;	// ran out of pins
	// we don't care about connected pins
	pPinIn->ConnectedTo(&pPinOut);
	if (pPinOut) {
	    pPinOut->Release();
	    pPinIn->Release();
	    continue;
	}
	hr = pPinIn->QueryInterface(IID_IKsPin, (void **)&pKsPin);
	if (hr != NOERROR) {
            DbgLog((LOG_TRACE,1,TEXT("This pin doesn't support IKsPin")));
	    pPinIn->Release();
	    continue;	// this pin doesn't support mediums
	}
	// S_FALSE is OK!
	hr = pKsPin->KsQueryMediums(&pmi);
	pKsPin->Release();
	if (FAILED(hr)) {
            DbgLog((LOG_TRACE,1,TEXT("This pin's KsQueryMediums failed: %x"),
									hr));
	    pPinIn->Release();
	    continue;	// this pin doesn't support mediums
	}
	if (pmi->Count == 0) {
            DbgLog((LOG_TRACE,1,TEXT("This pin has 0 mediums")));
	    pPinIn->Release();
	    CoTaskMemFree(pmi);
	    continue;	// this pin doesn't support mediums
	}

        DbgLog((LOG_TRACE,1,TEXT("Found a Pin with Mediums!")));

	// !!! pmi->Count and pmi->Size worry?

        REGPINMEDIUM *pMedium = (REGPINMEDIUM *)(pmi + 1);

	// GUID_NULL means no medium support. DO NOT ATTEMPT TO CONNECT
        // ONE or you will get into an infinite loop with millions of filters
	// KSMEDIUMSETID_Standard also means no medium support
	if (pMedium->clsMedium == GUID_NULL ||
			pMedium->clsMedium == KSMEDIUMSETID_Standard) {
            DbgLog((LOG_TRACE,1,TEXT("ONLY SUPPORTS GUID_NULL!")));
	    pPinIn->Release();
	    CoTaskMemFree(pmi);
	    continue;
	}

    
        // ONLY connect pins who say they have 1 necessary instance to be
        // connected... WDM audio pins have every pin in the world support the
        // same medium, and the only way not to hang it to notice they aren't
        // supposed to be connected up.

        IKsPinFactory *pPinFact;
        IKsControl *pKsControl;
        ULONG ulPinFact;
        KSP_PIN ksPin;
        KSPROPERTY ksProp;
        ULONG ulInstances, bytes;
        hr = pPinIn->QueryInterface(IID_IKsPinFactory, (void **)&pPinFact);
        if (hr == S_OK) {
            hr = pPinFact->KsPinFactory(&ulPinFact);
            pPinFact->Release();
            if (hr == S_OK) {
                hr = pFilter->QueryInterface(IID_IKsControl,
                                                        (void **)&pKsControl);
                if (hr == S_OK) {
                    ksPin.Property.Set = KSPROPSETID_Pin;
                    ksPin.Property.Id = KSPROPERTY_PIN_NECESSARYINSTANCES;
                    ksPin.Property.Flags = KSPROPERTY_TYPE_GET;
                    ksPin.PinId = ulPinFact;
                    ksPin.Reserved = 0; 
                    hr = pKsControl->KsProperty((PKSPROPERTY)&ksPin,
                        sizeof(ksPin), &ulInstances, sizeof(ULONG), &bytes);
                    pKsControl->Release();
                    if (hr == S_OK && bytes == sizeof(ULONG)) {
                        if (ulInstances != 1) {
                            DbgLog((LOG_TRACE,1,
                                        TEXT("Ack! Supports %d instances!"),
                                        ulInstances));
	                    pPinIn->Release();
	                    CoTaskMemFree(pmi);
	                    continue;
                        } else {
                            DbgLog((LOG_TRACE,1,TEXT("1 instance supported!")));
                        }
                    } else {
                        DbgLog((LOG_TRACE,1,
                                TEXT("%x: Can't get necessary instances"), hr));
                    }
                } else {
                    DbgLog((LOG_TRACE,1,
                                TEXT("Filter doesn't support IKsControl")));
                }
            } else {
                DbgLog((LOG_TRACE,1,TEXT("Can't get pin factory")));
            }
        } else {
            DbgLog((LOG_TRACE,1,TEXT("Pin doesn't support IKsPinFactory")));
        }

	// try connecting this pin to an existing filter, otherwise try to find
	// a new filter to connect it to
	if (FindExistingMediumMatch(pPinIn, pMedium) == FALSE)
	    AddSupportingFilters2(pPinIn, pMedium);
	
	CoTaskMemFree(pmi);
	pPinIn->Release();
    }

    DbgLog((LOG_TRACE,1,TEXT("All out of pins")));

    return NOERROR;
}



HRESULT CBuilder2_2::AddSupportingFilters2(IPin *pPinIn, REGPINMEDIUM *pMedium)
{
        DbgLog((LOG_TRACE,1,TEXT("Looking for matching filter...")));

	IFilterMapper2 *pFM2;
	HRESULT hr = m_FG->QueryInterface(IID_IFilterMapper2, (void **)&pFM2);
	if (FAILED(hr)) {
            DbgLog((LOG_ERROR,1,TEXT("IFilterMapper2 not supported!")));
	    return S_FALSE;
	}

	IEnumMoniker *pEnum;
        hr = pFM2->EnumMatchingFilters(&pEnum, 0 /*flags*/,
		//TRUE /*bExactMatch*/, 0, TRUE /*bInputNeeded*/,
		TRUE /*bExactMatch*/, 0, FALSE /*bInputNeeded*/,
		//NULL, NULL, pMedium /*pMedIn*/, NULL, FALSE /*bRender*/,
		NULL, NULL, NULL /*pMedIn*/, NULL, FALSE /*bRender*/,
		//FALSE /*bOutputNeeded*/, NULL, NULL,
		TRUE /*bOutputNeeded*/, NULL, NULL,
		//NULL /*pMedOut*/, NULL);
		pMedium /*pMedOut*/, NULL);
	pFM2->Release();
	if (FAILED(hr) || pEnum == NULL) {
            DbgLog((LOG_TRACE,1,TEXT("EnumMatchingFilters failed")));
	    return S_OK;
	}

	IMoniker *pMoniker;
	IBaseFilter *pFilter;
	ULONG u;

    while (1) {
	hr = pEnum->Next(1, &pMoniker, &u);
	if (FAILED(hr) || pMoniker == NULL || u != 1) {
            DbgLog((LOG_TRACE,1,TEXT("Ran out of matching filters")));
	    break;
	}
	hr = pMoniker->BindToObject(0, 0, IID_IBaseFilter, (void **)&pFilter);
	if (FAILED(hr) || pFilter == NULL) {
            DbgLog((LOG_TRACE,1,TEXT("BindToObject failed")));
	    pMoniker->Release();
	    continue;
	}

#ifdef DEBUG
	FILTER_INFO info;
	pFilter->QueryFilterInfo(&info);
	QueryFilterInfoReleaseGraph(info);
        DbgLog((LOG_TRACE,1,TEXT("Found supporting filter: %S"), info.achName));
        DbgLog((LOG_TRACE,1,TEXT("Connecting...")));
#endif

	// Add the filter to the graph
	IPropertyBag *pBag;
	hr = pMoniker->BindToStorage(0, 0, IID_IPropertyBag, (void **)&pBag);
	if (hr == S_OK) {
	    VARIANT var;
	    var.vt = VT_BSTR;
	    hr = pBag->Read(L"FriendlyName", &var, NULL);
	    if (hr == NOERROR) {
                hr = m_FG->AddFilter(pFilter, var.bstrVal);
		SysFreeString(var.bstrVal);
	    } else {
                hr = m_FG->AddFilter(pFilter, NULL);
	    }
	    pBag->Release();
	} else {
            hr = m_FG->AddFilter(pFilter, NULL);
	}

	// now connect the new filter's output to our input
	IPin *pPinOut;
	int zz=0;
        while (1) {
            hr = FindAPin(pFilter, PINDIR_OUTPUT, NULL, NULL, TRUE, zz++,
								&pPinOut);
	    if (hr != S_OK)
		break;
            DbgLog((LOG_TRACE,1,TEXT("Trying unconnected output pin %d"), zz));
	    hr = m_FG->Connect(pPinOut, pPinIn);
	    pPinOut->Release();
	    if (hr == S_OK) {
        	DbgLog((LOG_TRACE,1,TEXT("Connected!")));
		// Now recurse with this filter
		AddSupportingFilters(pFilter);
		pMoniker->Release();
		pFilter->Release();
		pEnum->Release();
		return S_OK;
	    }
	}

      	DbgLog((LOG_TRACE,1,TEXT("Could not connect the filters!")));

	m_FG->RemoveFilter(pFilter);
	pMoniker->Release();
	pFilter->Release();
    }

    pEnum->Release();
    return S_OK;
}


// Everytime we find a pin that supports mediums and needs to be connected, we
// should try connecting it to a filter already in the graph before we go
// looking for new filters
//
// Returns TRUE if it connected the pin to an existing filter, FALSE if not
//
BOOL CBuilder2_2::FindExistingMediumMatch(IPin *pPinIn, REGPINMEDIUM *pMedium)
{
    IEnumFilters *pFilters;
    PKSMULTIPLE_ITEM pmi;
    IBaseFilter *pFilter;
    ULONG	n;
    IEnumPins *pins;
    IPin *pPin;
    IKsPin *pKsPin;
    HRESULT hr;

    if (m_FG == NULL)
	return FALSE;

    DbgLog((LOG_TRACE,1,TEXT("Trying to connect to existing pin...")));

    if (FAILED(m_FG->EnumFilters(&pFilters))) {
	DbgLog((LOG_ERROR,1,TEXT("EnumFilters failed!")));
	return FALSE;
    }

    while (pFilters->Next(1, &pFilter, &n) == S_OK) {

	if (FAILED(pFilter->EnumPins(&pins))) {
		DbgLog((LOG_ERROR,1,TEXT("EnumPins failed!")));
	} else {

	    while (pins->Next(1, &pPin, &n) == S_OK) {

		hr = pPin->QueryInterface(IID_IKsPin, (void **)&pKsPin);
		if (hr != NOERROR) {
            	    //DbgLog((LOG_TRACE,1,TEXT("doesn't support IKsPin")));
	    	    pPin->Release();
	    	    continue;	// this pin doesn't support mediums
		}
		// S_FALSE is OK!
		hr = pKsPin->KsQueryMediums(&pmi);
		pKsPin->Release();
		if (FAILED(hr)) {
            	    //DbgLog((LOG_TRACE,1,TEXT("KsQueryMediums failed:%x"),hr));
	    	    pPin->Release();
	    	    continue;	// this pin doesn't support mediums
		}
		if (pmi->Count == 0) {
            	    //DbgLog((LOG_TRACE,1,TEXT("This pin has 0 mediums")));
	    	    pPin->Release();
	    	    CoTaskMemFree(pmi);
	    	    continue;	// this pin doesn't support mediums
		}
        	//DbgLog((LOG_TRACE,1,TEXT("Found a Pin with Mediums!")));
        	REGPINMEDIUM *pMediumOut = (REGPINMEDIUM *)(pmi + 1);

		// they match (and are not the same pin): connect them
		if (pPin != pPinIn && pMediumOut->clsMedium ==
							pMedium->clsMedium) {
            	    DbgLog((LOG_TRACE,1,TEXT("found a match! - connecting")));
		    hr = m_FG->Connect(pPin, pPinIn);
		    if (hr != S_OK)
            	    	DbgLog((LOG_ERROR,1,TEXT("Couldn't connect!")));
		    else {
			CoTaskMemFree(pmi);
			pPin->Release();
	    		pins->Release();
			pFilter->Release();
    			pFilters->Release();
			return TRUE;
		    }
		}

		CoTaskMemFree(pmi);
		pPin->Release();
	    }
	    pins->Release();
	}
	pFilter->Release();
    }
    pFilters->Release();

    return FALSE;
}


// Given an IBaseFilter, return an IPin of that filter which is the num'th
// (possibly unconnected) in/output pin of the (possibly) right category
// Given an IPin, verify that it is a (possibly unconnected) in/output pin of
// the (possibly) right category
//
HRESULT CBuilder2_2::FindSourcePin(IUnknown *pUnk, PIN_DIRECTION dir, const GUID *pCategory, const GUID *pType, BOOL fUnconnected, int num, IPin **ppPin)
{
    HRESULT hr;
    IPin *pPin;
    *ppPin = NULL;
    hr = pUnk->QueryInterface(IID_IPin, (void **)&pPin);
    if (hr == NOERROR) {
        PIN_DIRECTION pindir;
        IPin *pTo = NULL;
        hr = pPin->QueryDirection(&pindir);
	pPin->ConnectedTo(&pTo);
        if (pTo) {
            pTo->Release();
        }
	if (hr == NOERROR && pindir == dir && DoesCategoryAndTypeMatch(pPin,
			pCategory, pType) == S_OK &&
            		(!fUnconnected || pTo == NULL)) {
            *ppPin = pPin;
        } else {
            pPin->Release();
            hr = E_FAIL;
        }
    } else {
        IBaseFilter *pFilter;
        hr = pUnk->QueryInterface(IID_IBaseFilter, (void **)&pFilter);
        if (hr == S_OK) {
            hr = FindAPin(pFilter, dir, pCategory, pType, fUnconnected, num,
									ppPin);
            pFilter->Release();
        }
    }
    return hr;
}


HRESULT CBuilder2_2::ControlFilter(IBaseFilter *pFilter, const GUID *pCat, const GUID *pType, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie)
{
    HRESULT hr;
    CComPtr <IAMStreamControl> pCapSC, pRenSC;
    CComPtr <IPin> pCapPin, pPinT;

    BOOL fPreviewPin = IsThereAnyPreviewPin(pType, pFilter);

    // if pType is not specified we have to try all the pins of the category
    // to find the connected one we care about
    for (int xx = 0; 1; xx++) {

        // there's no preview pin, and we're controlling capture or preview.
        //  We're using a smart tee.  Find it, and use one of its pins
        if (!fPreviewPin && pCat && (*pCat == PIN_CATEGORY_CAPTURE ||
                                     *pCat == PIN_CATEGORY_PREVIEW)) {
            hr = FindSourcePin(pFilter, PINDIR_OUTPUT, &PIN_CATEGORY_CAPTURE,
                                                 pType, FALSE, xx, &pCapPin);
            ASSERT(xx > 0 || hr == S_OK);   // better be at least 1 pin
            if (pCapPin) {
                hr = pCapPin->ConnectedTo(&pPinT);
                pCapPin.Release();
                // looks like we got the wrong pin, try the next one
                if (hr != S_OK && pType == NULL) {
                    continue;
                }
                if (hr != S_OK) {
                    return S_OK;    // nothing to control
                }
                PIN_INFO pi;
                hr = pPinT->QueryPinInfo(&pi);
                if (pi.pFilter) pi.pFilter->Release();
                pPinT.Release();
                if (hr == S_OK) {
                    int i = 0;
                    if (*pCat == PIN_CATEGORY_PREVIEW) i = 1;
                    hr = FindAPin(pi.pFilter, PINDIR_OUTPUT, NULL, NULL, FALSE,
                                                         i, &pCapPin);
                }
            } else if (xx > 0) {
                return S_OK;    // ran out of pins, nothing to control
            }
        } else {
            hr = FindSourcePin(pFilter, PINDIR_OUTPUT, pCat, pType, FALSE, xx,
                                                                    &pCapPin);
            if (pCapPin) {
                HRESULT hrT = pCapPin->ConnectedTo(&pPinT);
                if (pPinT) {
                    pPinT.Release();
                }
                // looks like we got the wrong pin, try the next one
                if (hrT != S_OK && pType == NULL) {
                    pCapPin.Release();
                    continue;
                }
            }
        }
        break;
    }
    
    if (FAILED(hr))
        return hr;

    hr = FindDownstreamStreamControl(pCat, pCapPin, &pRenSC);
    if (FAILED(hr)) {
        DbgLog((LOG_TRACE,1,TEXT("No stream control for Renderer")));
    } else {
        ASSERT(pRenSC);
    }

    hr = pCapPin->QueryInterface(IID_IAMStreamControl, (void **)&pCapSC);
    if (FAILED(hr)) {
        DbgLog((LOG_TRACE,1,TEXT("No stream control on capture filter")));
    }

    // if the capture filter doesn't support stream control, that's OK, as
    // long as the renderer it's connected to does.

    if (pCapSC && pRenSC) {
        DbgLog((LOG_TRACE,1,TEXT("Stream controlling both pins")));
	// capture filter sends the real Start Cookie, and an extra frame
	// renderer filter sends the real Stop Cookie
        hr = pRenSC->StartAt(pstart, wStartCookie + 1000000);
	if (FAILED(hr))
	    return hr;
        hr = pRenSC->StopAt(pstop, FALSE, wStopCookie);
	if (FAILED(hr)) {
	    // !!! undo start?
	    return hr;
	}
        hr = pCapSC->StartAt(pstart, wStartCookie);
        hr = pCapSC->StopAt(pstop, TRUE, wStopCookie + 1000000);
    } else if (pRenSC) {
        DbgLog((LOG_TRACE,1,TEXT("Stream controlling only renderer")));
	// renderer filter does everything - capture can't
        hr = pRenSC->StartAt(pstart, wStartCookie);
	if (FAILED(hr))
	    return hr;
        hr = pRenSC->StopAt(pstop, FALSE, wStopCookie);
	if (FAILED(hr)) {
	    // !!! undo start?
	    return hr;
	}
    } else if (pCapSC) {
        DbgLog((LOG_TRACE,1,TEXT("Stream controlling only capture filter")));
	// capture filter does everything - no renderer
        hr = pCapSC->StartAt(pstart, wStartCookie);
	if (FAILED(hr))
	    return hr;
        hr = pCapSC->StopAt(pstop, FALSE, wStopCookie);
	if (FAILED(hr)) {
	    // !!! undo start?
	    return hr;
	}
	hr = S_FALSE;	// no renderer to guarentee the last sample is
			// rendered before stop is signalled
    }

    return hr;
}


HRESULT CBuilder2_2::ControlStream(const GUID *pCategory, const GUID *pType, IBaseFilter *pFilter, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie)
{
    HRESULT hr;
    IBaseFilter *pCap;
    IEnumFilters *pEnumF = NULL;
    BOOL fSFalse = FALSE;

    DbgLog((LOG_TRACE,1,TEXT("ControlStream")));

    // we need a category... capture or preview?
    if (pCategory == NULL)
	return E_POINTER;

    // they gave us a specific filter to control
    if (pFilter) {
        return ControlFilter(pFilter, pCategory, pType, pstart, pstop,
                                            wStartCookie, wStopCookie);
    }

    // we need to control all the capture filters in the graph
    BOOL fFoundOne = FALSE;
    while ((hr = FindCaptureFilters(&pEnumF, &pCap, pType)) == S_OK) {
	fFoundOne = TRUE;

        hr = ControlFilter(pCap, pCategory, pType, pstart, pstop,
					wStartCookie, wStopCookie);
	if (FAILED(hr)) {
            pCap->Release();
	    pEnumF->Release();	// quitting the loop early
	    return hr;
        }
	if (hr == S_FALSE)
	    fSFalse = TRUE;
    }

    // !!! If some filters supported it, but not all, we fail, but don't cancel
    // the commands that worked!

    // If any of the ControlFilter's returned S_FALSE, then we can't
    // guarentee the last sample will be written when the STOP is signalled
    return (fSFalse ? S_FALSE : S_OK);
}


// Pre-alloc this file to this size in bytes
//
HRESULT CBuilder2_2::AllocCapFile(LPCOLESTR lpwstr, DWORDLONG dwlNewSize)
{
    USES_CONVERSION;
    BOOL        fOK = FALSE;
    HCURSOR     hOldCursor, hWaitCursor;

    HANDLE hFile = CreateFile(W2CT(lpwstr), GENERIC_WRITE, FILE_SHARE_WRITE, 0,
				CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

    if (hFile == INVALID_HANDLE_VALUE) {
	return AmHresultFromWin32(GetLastError());
    }

    hWaitCursor = LoadCursor(NULL, IDC_WAIT);
    hOldCursor = SetCursor(hWaitCursor);

    HRESULT hr = S_OK;

    LONG lLow = (LONG) dwlNewSize;
    LONG lHigh = (LONG) (dwlNewSize >> 32);

    DWORD dwRes = SetFilePointer(hFile, lLow, &lHigh, FILE_BEGIN);

    if (dwRes == 0xffffffff && GetLastError() != 0) {
	hr = AmHresultFromWin32(GetLastError());
    } else {
        // For NT, you have to write something there or it isn't really
	// preallocated (and you must write at least 8 characters)
        // For Win9x, writing something there only wastes alot of time, simply
	// set this as the new end of file
        if (g_amPlatform == VER_PLATFORM_WIN32_NT) {
	    DWORD dwRet;
	    if (!WriteFile(hFile, "Hello World", 11, &dwRet, NULL)) {
	        hr = AmHresultFromWin32(GetLastError());
	    }
        } else {
	    if (!SetEndOfFile(hFile)) {
	        hr = AmHresultFromWin32(GetLastError());
	    }
	}
    }

    if (!CloseHandle(hFile)) {
	if (hr == S_OK) {
	    hr = AmHresultFromWin32(GetLastError());
	}
    }

    SetCursor(hOldCursor);

    return hr;
}


// return S_OK if successful
// return S_FALSE if the user aborts, or the callback aborts
// return E_ if something goes wrong
//
HRESULT CBuilder2_2::CopyCaptureFile(LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *lpCallback)
{
    if (lpwstrOld == NULL || lpwstrNew == NULL)
	return E_POINTER;

    if (0 == lstrcmpiW(lpwstrOld, lpwstrNew)) {
        // IF the source and destination names are the same, then there
        // is nothing to do
        return S_OK;
    }

    CComPtr <IGraphBuilder> pGraph;
    HRESULT hr = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER,
			  IID_IGraphBuilder, (void **)&pGraph);

    CComPtr <IBaseFilter> pMux, pWriter;
    hr = CoCreateInstance(CLSID_AviDest, NULL, CLSCTX_INPROC_SERVER,
			  IID_IBaseFilter, (void **)&pMux);
    hr = CoCreateInstance(CLSID_FileWriter, NULL, CLSCTX_INPROC_SERVER,
			  IID_IBaseFilter, (void **)&pWriter);

    if (pGraph == NULL || pMux == NULL || pWriter == NULL) {
        return E_OUTOFMEMORY;
    }

    CComQIPtr<IFileSinkFilter, &IID_IFileSinkFilter> pFS = pWriter;
    if (pFS) {
        hr = pFS->SetFileName(lpwstrNew, NULL);
        if (FAILED(hr)) {
            return hr;
        }
    }
    
    hr = pGraph->AddFilter(pMux, L"Mux");
    if (FAILED(hr)) {
        return hr;
    }

    // fully interleave the file so it's ready to play efficiently
    CComQIPtr<IConfigInterleaving, &IID_IConfigInterleaving> pConfigInterleaving
                                                        = pMux;
    if (pConfigInterleaving) {
	hr = pConfigInterleaving->put_Mode(INTERLEAVE_FULL);
        if (FAILED(hr)) {
            return hr;
        }
    }

    CComQIPtr<IConfigAviMux, &IID_IConfigAviMux> pCfgMux = pMux;
    CComQIPtr<IFileSinkFilter2, &IID_IFileSinkFilter2> pCfgFw = pWriter;

    if(pCfgMux) {
        // waste less space. The Compatiblity Index is for VFW
        // playback support. We only care about DShow
        hr = pCfgMux->SetOutputCompatibilityIndex(FALSE);
        if (FAILED(hr)) {
            return hr;
        }
    }

    // create new files each time
    if(pCfgFw) {
        hr = pCfgFw->SetMode(AM_FILE_OVERWRITE);
        if (FAILED(hr)) {
            return hr;
        }
    }
    
    hr = pGraph->AddFilter(pWriter, L"Writer");
    if (FAILED(hr)) {
        return hr;
    }

    // Keep a useless clock from being instantiated....
    CComQIPtr <IMediaFilter, &IID_IMediaFilter> pGraphF = pGraph;
    if (pGraphF) {
	hr = pGraphF->SetSyncSource(NULL);
        if (FAILED(hr)) {
            return hr;
        }
    }

    CComPtr <IPin> pMuxOut, pWriterIn;
    hr = FindAPin(pMux, PINDIR_OUTPUT, NULL, NULL, TRUE, 0, &pMuxOut);
    hr = FindAPin(pWriter, PINDIR_INPUT, NULL, NULL, TRUE, 0, &pWriterIn);
    if (pMuxOut == NULL || pWriterIn == NULL) {
        return E_UNEXPECTED;
    }

    hr = pGraph->ConnectDirect(pMuxOut, pWriterIn, NULL);
    if (FAILED(hr)) {
        return hr;
    }
	
    hr = pGraph->RenderFile(lpwstrOld, NULL);
    if (FAILED(hr)) {
        return hr;
    }

    CComQIPtr <IMediaControl, &IID_IMediaControl> pGraphC = pGraph;
    if (pGraphC == NULL) {
        return E_UNEXPECTED;
    }
    
    hr = pGraphC->Run();
    if (FAILED(hr)) {
        return hr;
    }

    // now wait for completion....
    CComQIPtr <IMediaEvent, &IID_IMediaEvent> pEvent = pGraph;
    if (pEvent == NULL) {
        return E_UNEXPECTED;
    }

    CComQIPtr <IMediaSeeking, &IID_IMediaSeeking> pSeek = pMux;
    if (lpCallback && pSeek == NULL) {
        return E_NOINTERFACE;
    }

    LONG lEvCode = 0;
    HRESULT hrProgress = S_OK;
    do {
        MSG Message;

        while (PeekMessage(&Message, NULL, 0, 0, TRUE))
        {
            TranslateMessage(&Message);
            DispatchMessage(&Message);
        }

	hr = pEvent->WaitForCompletion(100, &lEvCode);

	// call their callback
	if (lpCallback) {
            REFERENCE_TIME rtCur, rtStop;
            hr = pSeek->GetCurrentPosition(&rtCur);
            // GetStopPosition isn't implemented
            HRESULT hr2 = pSeek->GetDuration(&rtStop);
            if (hr == S_OK && hr2 == S_OK && rtStop != 0) {
                int lTemp = (int)((double)rtCur / rtStop * 100.);
	        hrProgress = lpCallback->Progress(lTemp);
            }
        }

        // Let the user hit escape to get out and let the callback get out
        if ((fAllowEscAbort && GetAsyncKeyState(VK_ESCAPE) & 0x0001) ||
						hrProgress == S_FALSE) {
            hrProgress = S_FALSE;
            break;
        }

    } while (lEvCode == 0);
	
    hr = pGraphC->Stop();
    if (FAILED(hr)) {
        return hr;
    }
	
    return hrProgress;
}


HRESULT CBuilder2_2::FindPin(IUnknown *pSource, PIN_DIRECTION pindir, const GUID *pCategory, const GUID *pType, BOOL fUnconnected, int num, IPin **ppPin)
{
    return FindSourcePin(pSource, pindir, pCategory, pType, fUnconnected, num,
							ppPin);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\builder2\build.h ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

class CBuilder2 : public CUnknown, public ICaptureGraphBuilder
{
public:

    CBuilder2(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CBuilder2();

    DECLARE_IUNKNOWN

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);

    // ICaptureGraphBuilder stuff
    STDMETHODIMP SetFiltergraph(IGraphBuilder *pfg);
    STDMETHODIMP GetFiltergraph(IGraphBuilder **ppfg);
    STDMETHODIMP SetOutputFileName(const GUID *pType, LPCOLESTR lpwstrFile,
			IBaseFilter **ppf, IFileSinkFilter **pSink);
    STDMETHODIMP FindInterface(const GUID *pCategory, IBaseFilter *pf, REFIID,
			void **ppint);
    STDMETHODIMP RenderStream(const GUID *pCategory,
			IUnknown *pSource, IBaseFilter *pfCompressor,
			IBaseFilter *pfRenderer);
    STDMETHODIMP ControlStream(const GUID *pCategory, IBaseFilter *pFilter, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie);
    STDMETHODIMP AllocCapFile(LPCOLESTR lpwstr, DWORDLONG dwlSize);
    STDMETHODIMP CopyCaptureFile(LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *pCallback);

    ICaptureGraphBuilder2 *m_pBuilder2_2;	// pointer to parent
};


class CBuilder2_2 : public CUnknown, public ICaptureGraphBuilder2
{
public:

    CBuilder2_2(TCHAR *, LPUNKNOWN, HRESULT *);
    ~CBuilder2_2();

    DECLARE_IUNKNOWN

    // this goes in the factory template table to create new instances
    static CUnknown * CreateInstance(LPUNKNOWN, HRESULT *);
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);

    // ICaptureGraphBuilder2 stuff
    STDMETHODIMP AllocCapFile(LPCOLESTR lpwstr, DWORDLONG dwlSize);
    STDMETHODIMP CopyCaptureFile(LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *pCallback);
    STDMETHODIMP SetFiltergraph(IGraphBuilder *pfg);
    STDMETHODIMP GetFiltergraph(IGraphBuilder **ppfg);
    STDMETHODIMP SetOutputFileName(const GUID *pType, LPCOLESTR lpwstrFile,
			IBaseFilter **ppf, IFileSinkFilter **pSink);
    STDMETHODIMP FindInterface(const GUID *pCategory, const GUID *pType,
			IBaseFilter *pf, REFIID, void **ppint);
    STDMETHODIMP RenderStream(const GUID *pCategory, const GUID *pType,
			IUnknown *pSource, IBaseFilter *pfCompressor,
			IBaseFilter *pfRenderer);
    STDMETHODIMP ControlStream(const GUID *pCategory, const GUID *pType,
			IBaseFilter *pFilter, REFERENCE_TIME *pstart,
			REFERENCE_TIME *pstop, WORD wStartCookie,
			WORD wStopCookie);
    STDMETHODIMP FindPin(IUnknown *pSource, PIN_DIRECTION pindir,
			const GUID *pCategory, const GUID *pType,
			BOOL fUnconnected, int num, IPin **ppPin);

private:

    // Insert this OVMixer into the preview stream of this filter
    HRESULT InsertOVIntoPreview(IUnknown *pSource, IBaseFilter *pOV);
    // Is there a PREVIEW pin of this type (or a VIDEOPORT pin for video)?
    BOOL IsThereAnyPreviewPin(const GUID *pType, IUnknown *pUnk);
    // Make a CCDecoder filter
    HRESULT MakeCCDecoder(IBaseFilter **ppf);
    // Make a Tee/Sink-to-Sink Converter filter
    HRESULT MakeKernelTee(IBaseFilter **ppf);
    // Make a VMR, or use an existing one
    HRESULT MakeVMR(void **);
    // Make a VPM, or use an existing one
    //HRESULT MakeVPM(void **);
    // is this pin of the given category?
    HRESULT DoesCategoryAndTypeMatch(IPin *pP, const GUID *pCategory, const GUID *pType);
    // look downstream from here for an interface
    HRESULT FindInterfaceDownstream(IBaseFilter *pFilter, REFIID riid, void **ppint);
    // look upstream from here for an interface
    HRESULT FindInterfaceUpstream(IBaseFilter *pFilter, REFIID riid, void **ppint);
    // find the furthest legal person downstream who does stream control
    HRESULT FindDownstreamStreamControl(const GUID *pCat, IPin *pPinOut, IAMStreamControl **ppSC);
    // enumerates the capture filters
    HRESULT FindCaptureFilters(IEnumFilters **ppEnumF, IBaseFilter **ppf, const GUID *pType);
    // find a pin of that direction and optional name on that filter
    STDMETHODIMP FindAPin(IBaseFilter *pf, PIN_DIRECTION dir, const GUID *pCategory, const GUID *pType, BOOL fUnconnected, int iIndex, IPin **ppPin);
    // do stream control for a pin
    STDMETHODIMP ControlFilter(IBaseFilter *pFilter, const GUID *pCat, const GUID *pType, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie);
    // make us a filtergraph
    STDMETHODIMP MakeFG();
    HRESULT AddSupportingFilters(IBaseFilter *pFilter);
    HRESULT AddSupportingFilters2(IPin *pPin, REGPINMEDIUM *pMedium);
    BOOL FindExistingMediumMatch(IPin *pPin, REGPINMEDIUM *pMedium);

    // the filter graph we are using
    IGraphBuilder *m_FG;

    HRESULT FindSourcePin(IUnknown *pUnk, PIN_DIRECTION dir, const GUID *pCategory, const GUID *pType, BOOL fUnconnected, int num, IPin **ppPin);

    BOOL m_fVMRExists;  // are we on an OS where the new Video Renderer exists?
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\builder2\ks.h ===
/*++

Copyright (c) 1996 - 1998  Microsoft Corporation.  All Rights Reserved.

Module Name:

    ks.h

Abstract:

    Windows Driver Model/Connection and Streaming Architecture (WDM-CSA)
    core definitions.

--*/

#if !defined(_KS_)
#define _KS_

#if !defined(_NTRTL_)
    #ifndef DEFINE_GUIDEX
        #define DEFINE_GUIDEX(name) EXTERN_C const CDECL GUID name
    #endif // !defined(DEFINE_GUIDEX)

    #ifndef STATICGUIDOF
        #define STATICGUIDOF(guid) STATIC_##guid
    #endif // !defined(STATICGUIDOF)
#endif // !defined(_NTRTL_)

#ifndef SIZEOF_ARRAY
    #define SIZEOF_ARRAY(ar)        (sizeof(ar)/sizeof((ar)[0]))
#endif // !defined(SIZEOF_ARRAY)

#if defined(__cplusplus) && _MSC_VER >= 1100
#define DEFINE_GUIDSTRUCT(g, n) struct __declspec(uuid(g)) n
#define DEFINE_GUIDNAMED(n) __uuidof(struct n)
#else // !defined(__cplusplus)
#define DEFINE_GUIDSTRUCT(g, n) DEFINE_GUIDEX(n)
#define DEFINE_GUIDNAMED(n) n
#endif // !defined(__cplusplus)

//===========================================================================

#define STATIC_GUID_NULL \
    0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

DEFINE_GUIDSTRUCT("00000000-0000-0000-0000-000000000000", GUID_NULL);
#define GUID_NULL DEFINE_GUIDNAMED(GUID_NULL)

//===========================================================================

#define IOCTL_KS_PROPERTY              CTL_CODE(FILE_DEVICE_KS, 0x000, METHOD_NEITHER, FILE_ANY_ACCESS)
#define IOCTL_KS_ENABLE_EVENT          CTL_CODE(FILE_DEVICE_KS, 0x001, METHOD_NEITHER, FILE_ANY_ACCESS)
#define IOCTL_KS_DISABLE_EVENT         CTL_CODE(FILE_DEVICE_KS, 0x002, METHOD_NEITHER, FILE_ANY_ACCESS)
#define IOCTL_KS_METHOD                CTL_CODE(FILE_DEVICE_KS, 0x003, METHOD_NEITHER, FILE_ANY_ACCESS)
#define IOCTL_KS_WRITE_STREAM          CTL_CODE(FILE_DEVICE_KS, 0x004, METHOD_NEITHER, FILE_WRITE_ACCESS)
#define IOCTL_KS_READ_STREAM           CTL_CODE(FILE_DEVICE_KS, 0x005, METHOD_NEITHER, FILE_READ_ACCESS)
#define IOCTL_KS_RESET_STATE           CTL_CODE(FILE_DEVICE_KS, 0x006, METHOD_NEITHER, FILE_ANY_ACCESS)

//===========================================================================

typedef enum {
    KSRESET_BEGIN,
    KSRESET_END
} KSRESET;

typedef enum {
    KSSTATE_STOP,
    KSSTATE_ACQUIRE,
    KSSTATE_PAUSE,
    KSSTATE_RUN
} KSSTATE, *PKSSTATE;

#define KSPRIORITY_LOW        0x00000001
#define KSPRIORITY_NORMAL     0x40000000
#define KSPRIORITY_HIGH       0x80000000
#define KSPRIORITY_EXCLUSIVE  0xFFFFFFFF

typedef struct {
    ULONG   PriorityClass;
    ULONG   PrioritySubClass;
} KSPRIORITY, *PKSPRIORITY;

typedef struct {
    union {
        struct {
            GUID    Set;
            ULONG   Id;
            ULONG   Flags;
        };
        LONGLONG    Alignment;
    };
} KSIDENTIFIER, *PKSIDENTIFIER;

typedef KSIDENTIFIER KSPROPERTY, *PKSPROPERTY, KSMETHOD, *PKSMETHOD, KSEVENT, *PKSEVENT;

#define KSMETHOD_TYPE_NONE                  0x00000000
#define KSMETHOD_TYPE_READ                  0x00000001
#define KSMETHOD_TYPE_WRITE                 0x00000002
#define KSMETHOD_TYPE_MODIFY                0x00000003
#define KSMETHOD_TYPE_SOURCE                0x00000004

#define KSMETHOD_TYPE_SEND                  0x00000001
#define KSMETHOD_TYPE_SETSUPPORT            0x00000100
#define KSMETHOD_TYPE_BASICSUPPORT          0x00000200

#define KSPROPERTY_TYPE_GET                 0x00000001
#define KSPROPERTY_TYPE_SET                 0x00000002
#define KSPROPERTY_TYPE_SETSUPPORT          0x00000100
#define KSPROPERTY_TYPE_BASICSUPPORT        0x00000200
#define KSPROPERTY_TYPE_RELATIONS           0x00000400
#define KSPROPERTY_TYPE_SERIALIZESET        0x00000800
#define KSPROPERTY_TYPE_UNSERIALIZESET      0x00001000
#define KSPROPERTY_TYPE_SERIALIZERAW        0x00002000
#define KSPROPERTY_TYPE_UNSERIALIZERAW      0x00004000
#define KSPROPERTY_TYPE_SERIALIZESIZE       0x00008000
#define KSPROPERTY_TYPE_DEFAULTVALUES       0x00010000

#define KSPROPERTY_TYPE_TOPOLOGY            0x10000000

#define STATIC_KSPROPTYPESETID_General \
    0x97E99BA0L, 0xBDEA, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("97E99BA0-BDEA-11CF-A5D6-28DB04C10000", KSPROPTYPESETID_General);
#define KSPROPTYPESETID_General DEFINE_GUIDNAMED(KSPROPTYPESETID_General)

#if defined(_NTDDK_) && !defined(__wtypes_h__)
enum VARENUM {
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT  = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
};
#endif // _NTDDK_ && !__wtypes_h__

typedef struct {
    ULONG    Size;
    ULONG    Count;
} KSMULTIPLE_ITEM, *PKSMULTIPLE_ITEM;

typedef struct {
    ULONG           AccessFlags;
    ULONG           DescriptionSize;
    KSIDENTIFIER    PropTypeSet;
    ULONG           MembersListCount;
    ULONG           Reserved;
} KSPROPERTY_DESCRIPTION, *PKSPROPERTY_DESCRIPTION;

#define KSPROPERTY_MEMBER_RANGES            0x00000001
#define KSPROPERTY_MEMBER_STEPPEDRANGES     0x00000002
#define KSPROPERTY_MEMBER_VALUES            0x00000003

#define KSPROPERTY_MEMBER_FLAG_DEFAULT      0x00000001

typedef struct {
    ULONG   MembersFlags;
    ULONG   MembersSize;
    ULONG   MembersCount;
    ULONG   Flags;
} KSPROPERTY_MEMBERSHEADER, *PKSPROPERTY_MEMBERSHEADER;

typedef union {
    struct {
        LONG    SignedMinimum;
        LONG    SignedMaximum;
    };
    struct {
        ULONG   UnsignedMinimum;
        ULONG   UnsignedMaximum;
    };
} KSPROPERTY_BOUNDS_LONG, *PKSPROPERTY_BOUNDS_LONG;

typedef union {
    struct {
        LONGLONG    SignedMinimum;
        LONGLONG    SignedMaximum;
    };
    struct {
#if defined(_NTDDK_)
        ULONGLONG   UnsignedMinimum;
        ULONGLONG   UnsignedMaximum;
#else // !_NTDDK_
        DWORDLONG   UnsignedMinimum;
        DWORDLONG   UnsignedMaximum;
#endif // !_NTDDK_
    };
} KSPROPERTY_BOUNDS_LONGLONG, *PKSPROPERTY_BOUNDS_LONGLONG;

typedef struct {
    ULONG                       SteppingDelta;
    ULONG                       Reserved;
    KSPROPERTY_BOUNDS_LONG      Bounds;
} KSPROPERTY_STEPPING_LONG, *PKSPROPERTY_STEPPING_LONG;

typedef struct {
#if defined(_NTDDK_)
    ULONGLONG                   SteppingDelta;
#else // !_NTDDK_
    DWORDLONG                   SteppingDelta;
#endif // !_NTDDK_
    KSPROPERTY_BOUNDS_LONGLONG  Bounds;
} KSPROPERTY_STEPPING_LONGLONG, *PKSPROPERTY_STEPPING_LONGLONG;

//===========================================================================

typedef PVOID PKSWORKER;

typedef struct {
    ULONG       NotificationType;
    union {
        struct {
            HANDLE              Event;
            ULONG               Reserved[2];
        } EventHandle;
        struct {
            HANDLE              Semaphore;
            ULONG               Reserved;
            LONG                Adjustment;
        } SemaphoreHandle;
#if defined(_NTDDK_)
        struct {
            PVOID               Event;
            KPRIORITY           Increment;
            ULONG               Reserved;
        } EventObject;
        struct {
            PVOID               Semaphore;
            KPRIORITY           Increment;
            LONG                Adjustment;
        } SemaphoreObject;
        struct {
            PKDPC               Dpc;
            ULONG               ReferenceCount;
            ULONG               Reserved;
        } Dpc;
        struct {
            PWORK_QUEUE_ITEM    WorkQueueItem;
            WORK_QUEUE_TYPE     WorkQueueType;
            ULONG               Reserved;
        } WorkItem;
        struct {
            PWORK_QUEUE_ITEM    WorkQueueItem;
            PKSWORKER           KsWorkerObject;
            ULONG               Reserved;
        } KsWorkItem;
#endif // defined(_NTDDK_)
        struct {
            PVOID               Unused;
            LONG                Alignment[2];
        } Alignment;
    };
} KSEVENTDATA, *PKSEVENTDATA;

#define KSEVENTF_EVENT_HANDLE       0x00000001
#define KSEVENTF_SEMAPHORE_HANDLE   0x00000002
#if defined(_NTDDK_)
#define KSEVENTF_EVENT_OBJECT       0x00000004
#define KSEVENTF_SEMAPHORE_OBJECT   0x00000008
#define KSEVENTF_DPC                0x00000010
#define KSEVENTF_WORKITEM           0x00000020
#define KSEVENTF_KSWORKITEM         0x00000080
#endif // defined(_NTDDK_)

#define KSEVENT_TYPE_ENABLE         0x00000001
#define KSEVENT_TYPE_ONESHOT        0x00000002
#define KSEVENT_TYPE_ENABLEBUFFERED 0x00000004
#define KSEVENT_TYPE_SETSUPPORT     0x00000100
#define KSEVENT_TYPE_BASICSUPPORT   0x00000200
#define KSEVENT_TYPE_QUERYBUFFER    0x00000400

typedef struct {
    KSEVENT         Event;
    PKSEVENTDATA    EventData;
    PVOID           Reserved;
} KSQUERYBUFFER, *PKSQUERYBUFFER;

//===========================================================================

typedef struct {
    KSEVENTDATA     EventData;
    LONGLONG        MarkTime;
} KSEVENT_TIME_MARK, *PKSEVENT_TIME_MARK;

typedef struct {
    KSEVENTDATA     EventData;
    LONGLONG        TimeBase;
    LONGLONG        Interval;
} KSEVENT_TIME_INTERVAL, *PKSEVENT_TIME_INTERVAL;

typedef struct {
    LONGLONG        TimeBase;
    LONGLONG        Interval;
} KSINTERVAL, *PKSINTERVAL;

//===========================================================================

#define STATIC_KSPROPSETID_General\
    0x1464EDA5L, 0x6A8F, 0x11D1, 0x9A, 0xA7, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("1464EDA5-6A8F-11D1-9AA7-00A0C9223196", KSPROPSETID_General);
#define KSPROPSETID_General DEFINE_GUIDNAMED(KSPROPSETID_General)

typedef enum {
    KSPROPERTY_GENERAL_COMPONENTID
} KSPROPERTY_GENERAL;

typedef struct {
    GUID    Manufacturer;
    GUID    Product;
    GUID    Component;
    GUID    Name;
    ULONG   Version;
    ULONG   Revision;
} KSCOMPONENTID, *PKSCOMPONENTID;

#define DEFINE_KSPROPERTY_ITEM_GENERAL_COMPONENTID(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_GENERAL_COMPONENTID,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSCOMPONENTID),\
        NULL, NULL, 0, NULL, NULL, 0)

#define STATIC_KSPROPSETID_MediaSeeking\
    0xEE904F0CL, 0xD09B, 0x11D0, 0xAB, 0xE9, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("EE904F0C-D09B-11D0-ABE9-00A0C9223196", KSPROPSETID_MediaSeeking);
#define KSPROPSETID_MediaSeeking DEFINE_GUIDNAMED(KSPROPSETID_MediaSeeking)

typedef enum {
    KSPROPERTY_MEDIASEEKING_CAPABILITIES,
    KSPROPERTY_MEDIASEEKING_FORMATS,
    KSPROPERTY_MEDIASEEKING_TIMEFORMAT,
    KSPROPERTY_MEDIASEEKING_POSITION,
    KSPROPERTY_MEDIASEEKING_STOPPOSITION,
    KSPROPERTY_MEDIASEEKING_POSITIONS,
    KSPROPERTY_MEDIASEEKING_DURATION,
    KSPROPERTY_MEDIASEEKING_AVAILABLE,
    KSPROPERTY_MEDIASEEKING_PREROLL,
    KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT
} KSPROPERTY_MEDIASEEKING;

typedef enum {
    KS_SEEKING_NoPositioning,
    KS_SEEKING_AbsolutePositioning,
    KS_SEEKING_RelativePositioning,
    KS_SEEKING_IncrementalPositioning,
    KS_SEEKING_PositioningBitsMask = 0x3,
    KS_SEEKING_SeekToKeyFrame,
    KS_SEEKING_ReturnTime = 0x8
} KS_SEEKING_FLAGS;

typedef enum {
    KS_SEEKING_CanSeekAbsolute = 0x1,
    KS_SEEKING_CanSeekForwards = 0x2,
    KS_SEEKING_CanSeekBackwards = 0x4,
    KS_SEEKING_CanGetCurrentPos = 0x8,
    KS_SEEKING_CanGetStopPos = 0x10,
    KS_SEEKING_CanGetDuration = 0x20,
    KS_SEEKING_CanPlayBackwards = 0x40
} KS_SEEKING_CAPABILITIES;

typedef struct {
    LONGLONG            Current;
    LONGLONG            Stop;
    KS_SEEKING_FLAGS    CurrentFlags;
    KS_SEEKING_FLAGS    StopFlags;
} KSPROPERTY_POSITIONS, *PKSPROPERTY_POSITIONS;

typedef struct {
    LONGLONG    Earliest;
    LONGLONG    Latest;
} KSPROPERTY_MEDIAAVAILABLE, *PKSPROPERTY_MEDIAAVAILABLE;

typedef struct {
    KSPROPERTY  Property;
    GUID        SourceFormat;
    GUID        TargetFormat;
    LONGLONG    Time;
} KSP_TIMEFORMAT, *PKSP_TIMEFORMAT;

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_CAPABILITIES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_CAPABILITIES,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KS_SEEKING_CAPABILITIES),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_FORMATS(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_FORMATS,\
        (Handler),\
        sizeof(KSPROPERTY),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_TIMEFORMAT(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_TIMEFORMAT,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(GUID),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_POSITION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_POSITION,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_STOPPOSITION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_STOPPOSITION,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_POSITIONS(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_POSITIONS,\
        NULL,\
        sizeof(KSPROPERTY),\
        sizeof(KSPROPERTY_POSITIONS),\
        (Handler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_DURATION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_DURATION,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_AVAILABLE(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_AVAILABLE,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSPROPERTY_MEDIAAVAILABLE),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_PREROLL(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_PREROLL,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_MEDIASEEKING_CONVERTTIMEFORMAT(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT,\
        (Handler),\
        sizeof(KSP_TIMEFORMAT),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

//===========================================================================

#define STATIC_KSPROPSETID_Topology\
    0x720D4AC0L, 0x7533, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("720D4AC0-7533-11D0-A5D6-28DB04C10000", KSPROPSETID_Topology);
#define KSPROPSETID_Topology DEFINE_GUIDNAMED(KSPROPSETID_Topology)

typedef enum {
    KSPROPERTY_TOPOLOGY_CATEGORIES,
    KSPROPERTY_TOPOLOGY_NODES,
    KSPROPERTY_TOPOLOGY_CONNECTIONS,
    KSPROPERTY_TOPOLOGY_NAME
} KSPROPERTY_TOPOLOGY;

typedef struct {
    KSPROPERTY      Property;
    ULONG           NodeId;
    ULONG           Reserved;
} KSP_NODE, *PKSP_NODE;

#define DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CATEGORIES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_TOPOLOGY_CATEGORIES,\
        (Handler),\
        sizeof(KSPROPERTY),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NODES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_TOPOLOGY_NODES,\
        (Handler),\
        sizeof(KSPROPERTY),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CONNECTIONS(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_TOPOLOGY_CONNECTIONS,\
        (Handler),\
        sizeof(KSPROPERTY),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NAME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_TOPOLOGY_NAME,\
        (Handler),\
        sizeof(KSP_NODE),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_TOPOLOGYSET(TopologySet, Handler)\
DEFINE_KSPROPERTY_TABLE(TopologySet) {\
    DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CATEGORIES(Handler),\
    DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NODES(Handler),\
    DEFINE_KSPROPERTY_ITEM_TOPOLOGY_CONNECTIONS(Handler),\
    DEFINE_KSPROPERTY_ITEM_TOPOLOGY_NAME(Handler)\
}

#define STATIC_KSCATEGORY_BRIDGE \
    0x085AFF00L, 0x62CE, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("085AFF00-62CE-11CF-A5D6-28DB04C10000", KSCATEGORY_BRIDGE);
#define KSCATEGORY_BRIDGE DEFINE_GUIDNAMED(KSCATEGORY_BRIDGE)

#define STATIC_KSCATEGORY_CAPTURE \
    0x65E8773DL, 0x8F56, 0x11D0, 0xA3, 0xB9, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("65E8773D-8F56-11D0-A3B9-00A0C9223196", KSCATEGORY_CAPTURE);
#define KSCATEGORY_CAPTURE DEFINE_GUIDNAMED(KSCATEGORY_CAPTURE)

#define STATIC_KSCATEGORY_RENDER \
    0x65E8773EL, 0x8F56, 0x11D0, 0xA3, 0xB9, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("65E8773E-8F56-11D0-A3B9-00A0C9223196", KSCATEGORY_RENDER);
#define KSCATEGORY_RENDER DEFINE_GUIDNAMED(KSCATEGORY_RENDER)

#define STATIC_KSCATEGORY_MIXER \
    0xAD809C00L, 0x7B88, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("AD809C00-7B88-11D0-A5D6-28DB04C10000", KSCATEGORY_MIXER);
#define KSCATEGORY_MIXER DEFINE_GUIDNAMED(KSCATEGORY_MIXER)

#define STATIC_KSCATEGORY_SPLITTER \
    0x0A4252A0L, 0x7E70, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("0A4252A0-7E70-11D0-A5D6-28DB04C10000", KSCATEGORY_SPLITTER);
#define KSCATEGORY_SPLITTER DEFINE_GUIDNAMED(KSCATEGORY_SPLITTER)

#define STATIC_KSCATEGORY_DATACOMPRESSOR \
    0x1E84C900L, 0x7E70, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("1E84C900-7E70-11D0-A5D6-28DB04C10000", KSCATEGORY_DATACOMPRESSOR);
#define KSCATEGORY_DATACOMPRESSOR DEFINE_GUIDNAMED(KSCATEGORY_DATACOMPRESSOR)

#define STATIC_KSCATEGORY_DATADECOMPRESSOR \
    0x2721AE20L, 0x7E70, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("2721AE20-7E70-11D0-A5D6-28DB04C10000", KSCATEGORY_DATADECOMPRESSOR);
#define KSCATEGORY_DATADECOMPRESSOR DEFINE_GUIDNAMED(KSCATEGORY_DATADECOMPRESSOR)

#define STATIC_KSCATEGORY_DATATRANSFORM \
    0x2EB07EA0L, 0x7E70, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("2EB07EA0-7E70-11D0-A5D6-28DB04C10000", KSCATEGORY_DATATRANSFORM);
#define KSCATEGORY_DATATRANSFORM DEFINE_GUIDNAMED(KSCATEGORY_DATATRANSFORM)

#define STATIC_KSCATEGORY_COMMUNICATIONSTRANSFORM \
    0xCF1DDA2CL, 0x9743, 0x11D0, 0xA3, 0xEE, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("CF1DDA2C-9743-11D0-A3EE-00A0C9223196", KSCATEGORY_COMMUNICATIONSTRANSFORM);
#define KSCATEGORY_COMMUNICATIONSTRANSFORM DEFINE_GUIDNAMED(KSCATEGORY_COMMUNICATIONSTRANSFORM)

#define STATIC_KSCATEGORY_INTERFACETRANSFORM \
    0xCF1DDA2DL, 0x9743, 0x11D0, 0xA3, 0xEE, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("CF1DDA2D-9743-11D0-A3EE-00A0C9223196", KSCATEGORY_INTERFACETRANSFORM);
#define KSCATEGORY_INTERFACETRANSFORM DEFINE_GUIDNAMED(KSCATEGORY_INTERFACETRANSFORM)

#define STATIC_KSCATEGORY_MEDIUMTRANSFORM \
    0xCF1DDA2EL, 0x9743, 0x11D0, 0xA3, 0xEE, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("CF1DDA2E-9743-11D0-A3EE-00A0C9223196", KSCATEGORY_MEDIUMTRANSFORM);
#define KSCATEGORY_MEDIUMTRANSFORM DEFINE_GUIDNAMED(KSCATEGORY_MEDIUMTRANSFORM)

#define STATIC_KSCATEGORY_FILESYSTEM \
    0x760FED5EL, 0x9357, 0x11D0, 0xA3, 0xCC, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("760FED5E-9357-11D0-A3CC-00A0C9223196", KSCATEGORY_FILESYSTEM);
#define KSCATEGORY_FILESYSTEM DEFINE_GUIDNAMED(KSCATEGORY_FILESYSTEM)

// KSNAME_Clock
#define STATIC_KSCATEGORY_CLOCK \
    0x53172480L, 0x4791, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("53172480-4791-11D0-A5D6-28DB04C10000", KSCATEGORY_CLOCK);
#define KSCATEGORY_CLOCK DEFINE_GUIDNAMED(KSCATEGORY_CLOCK)

#define STATIC_KSCATEGORY_PROXY \
    0x97EBAACAL, 0x95BD, 0x11D0, 0xA3, 0xEA, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("97EBAACA-95BD-11D0-A3EA-00A0C9223196", KSCATEGORY_PROXY);
#define KSCATEGORY_PROXY DEFINE_GUIDNAMED(KSCATEGORY_PROXY)

#define STATIC_KSCATEGORY_QUALITY \
    0x97EBAACBL, 0x95BD, 0x11D0, 0xA3, 0xEA, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("97EBAACB-95BD-11D0-A3EA-00A0C9223196", KSCATEGORY_QUALITY);
#define KSCATEGORY_QUALITY DEFINE_GUIDNAMED(KSCATEGORY_QUALITY)

typedef struct {
    ULONG   FromNode;
    ULONG   FromNodePin;
    ULONG   ToNode;
    ULONG   ToNodePin;
} KSTOPOLOGY_CONNECTION, *PKSTOPOLOGY_CONNECTION;

typedef struct {
    ULONG                           CategoriesCount;
    const GUID*                     Categories;
    ULONG                           TopologyNodesCount;
    const GUID*                     TopologyNodes;
    ULONG                           TopologyConnectionsCount;
    const KSTOPOLOGY_CONNECTION*    TopologyConnections;
    const GUID*                     TopologyNodesNames;
    ULONG                           Reserved;
} KSTOPOLOGY, *PKSTOPOLOGY;

#define KSFILTER_NODE   ((ULONG)-1)
#define KSALL_NODES     ((ULONG)-1)

typedef struct {
    ULONG       CreateFlags;
    ULONG       Node;
} KSNODE_CREATE, *PKSNODE_CREATE;

//===========================================================================

// TIME_FORMAT_NONE
#define STATIC_KSTIME_FORMAT_NONE       STATIC_GUID_NULL
#define KSTIME_FORMAT_NONE              GUID_NULL

// TIME_FORMAT_FRAME
#define STATIC_KSTIME_FORMAT_FRAME\
    0x7b785570L, 0x8c82, 0x11cf, 0xbc, 0x0c, 0x00, 0xaa, 0x00, 0xac, 0x74, 0xf6
DEFINE_GUIDSTRUCT("7b785570-8c82-11cf-bc0c-00aa00ac74f6", KSTIME_FORMAT_FRAME);
#define KSTIME_FORMAT_FRAME DEFINE_GUIDNAMED(KSTIME_FORMAT_FRAME)

// TIME_FORMAT_BYTE             
#define STATIC_KSTIME_FORMAT_BYTE\
    0x7b785571L, 0x8c82, 0x11cf, 0xbc, 0x0c, 0x00, 0xaa, 0x00, 0xac, 0x74, 0xf6
DEFINE_GUIDSTRUCT("7b785571-8c82-11cf-bc0c-00aa00ac74f6", KSTIME_FORMAT_BYTE);
#define KSTIME_FORMAT_BYTE DEFINE_GUIDNAMED(KSTIME_FORMAT_BYTE)

// TIME_FORMAT_SAMPLE
#define STATIC_KSTIME_FORMAT_SAMPLE\
    0x7b785572L, 0x8c82, 0x11cf, 0xbc, 0x0c, 0x00, 0xaa, 0x00, 0xac, 0x74, 0xf6
DEFINE_GUIDSTRUCT("7b785572-8c82-11cf-bc0c-00aa00ac74f6", KSTIME_FORMAT_SAMPLE);
#define KSTIME_FORMAT_SAMPLE DEFINE_GUIDNAMED(KSTIME_FORMAT_SAMPLE)

// TIME_FORMAT_FIELD
#define STATIC_KSTIME_FORMAT_FIELD\
    0x7b785573L, 0x8c82, 0x11cf, 0xbc, 0x0c, 0x00, 0xaa, 0x00, 0xac, 0x74, 0xf6
DEFINE_GUIDSTRUCT("7b785573-8c82-11cf-bc0c-00aa00ac74f6", KSTIME_FORMAT_FIELD);
#define KSTIME_FORMAT_FIELD DEFINE_GUIDNAMED(KSTIME_FORMAT_FIELD)

// TIME_FORMAT_MEDIA_TIME
#define STATIC_KSTIME_FORMAT_MEDIA_TIME\
    0x7b785574L, 0x8c82, 0x11cf, 0xbc, 0x0c, 0x00, 0xaa, 0x00, 0xac, 0x74, 0xf6
DEFINE_GUIDSTRUCT("7b785574-8c82-11cf-bc0c-00aa00ac74f6", KSTIME_FORMAT_MEDIA_TIME);
#define KSTIME_FORMAT_MEDIA_TIME DEFINE_GUIDNAMED(KSTIME_FORMAT_MEDIA_TIME)

//===========================================================================

typedef KSIDENTIFIER KSPIN_INTERFACE, *PKSPIN_INTERFACE;

#define STATIC_KSINTERFACESETID_Standard \
    0x1A8766A0L, 0x62CE, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("1A8766A0-62CE-11CF-A5D6-28DB04C10000", KSINTERFACESETID_Standard);
#define KSINTERFACESETID_Standard DEFINE_GUIDNAMED(KSINTERFACESETID_Standard)

typedef enum {
    KSINTERFACE_STANDARD_STREAMING,
    KSINTERFACE_STANDARD_LOOPED_STREAMING,
    KSINTERFACE_STANDARD_CONTROL
} KSINTERFACE_STANDARD;

//===========================================================================

#define KSMEDIUM_TYPE_ANYINSTANCE       0
#define KSMEDIUM_TYPE_SPECIFICINSTANCE  1

#define STATIC_KSMEDIUMSETID_Standard \
    0x4747B320L, 0x62CE, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("4747B320-62CE-11CF-A5D6-28DB04C10000", KSMEDIUMSETID_Standard);
#define KSMEDIUMSETID_Standard DEFINE_GUIDNAMED(KSMEDIUMSETID_Standard)

//For compatibility only
#define KSMEDIUM_STANDARD_DEVIO     KSMEDIUM_TYPE_ANYINSTANCE

#define STATIC_KSMEDIUMSETID_FileIo \
    0x8C6F932CL, 0xE771, 0x11D0, 0xB8, 0xFF, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("8C6F932C-E771-11D0-B8FF-00A0C9223196", KSMEDIUMSETID_FileIo);
#define KSMEDIUMSETID_FileIo DEFINE_GUIDNAMED(KSMEDIUMSETID_FileIo)

//===========================================================================

#define STATIC_KSPROPSETID_Pin\
    0x8C134960L, 0x51AD, 0x11CF, 0x87, 0x8A, 0x94, 0xF8, 0x01, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("8C134960-51AD-11CF-878A-94F801C10000", KSPROPSETID_Pin);
#define KSPROPSETID_Pin DEFINE_GUIDNAMED(KSPROPSETID_Pin)

typedef enum {
    KSPROPERTY_PIN_CINSTANCES,
    KSPROPERTY_PIN_CTYPES,
    KSPROPERTY_PIN_DATAFLOW,
    KSPROPERTY_PIN_DATARANGES,
    KSPROPERTY_PIN_DATAINTERSECTION,
    KSPROPERTY_PIN_INTERFACES,
    KSPROPERTY_PIN_MEDIUMS,
    KSPROPERTY_PIN_COMMUNICATION,
    KSPROPERTY_PIN_GLOBALCINSTANCES,
    KSPROPERTY_PIN_NECESSARYINSTANCES,
    KSPROPERTY_PIN_PHYSICALCONNECTION,
    KSPROPERTY_PIN_CATEGORY,
    KSPROPERTY_PIN_NAME,
    KSPROPERTY_PIN_CONSTRAINEDDATARANGES,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT,
    KSPROPERTY_PIN_COMPLETEDATAFORMAT
} KSPROPERTY_PIN;

typedef struct {
    KSPROPERTY      Property;
    ULONG           PinId;
    ULONG           Reserved;
} KSP_PIN, *PKSP_PIN;

#define KSINSTANCE_INDETERMINATE    ((ULONG)-1)

typedef struct {
    ULONG  PossibleCount;
    ULONG  CurrentCount;
} KSPIN_CINSTANCES, *PKSPIN_CINSTANCES;

typedef enum {
    KSPIN_DATAFLOW_IN = 1,
    KSPIN_DATAFLOW_OUT
} KSPIN_DATAFLOW, *PKSPIN_DATAFLOW;

#define KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION   0
#define KSDATAFORMAT_TEMPORAL_COMPRESSION       (1 << KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION)

typedef union {
    struct {
        ULONG   FormatSize;
        ULONG   Flags;
        ULONG   SampleSize;
        ULONG   Reserved;
        GUID    MajorFormat;
        GUID    SubFormat;
        GUID    Specifier;
    };
    LONGLONG    Alignment;
} KSDATAFORMAT, *PKSDATAFORMAT, KSDATARANGE, *PKSDATARANGE;

typedef enum {
    KSPIN_COMMUNICATION_NONE,
    KSPIN_COMMUNICATION_SINK,
    KSPIN_COMMUNICATION_SOURCE,
    KSPIN_COMMUNICATION_BOTH,
    KSPIN_COMMUNICATION_BRIDGE
} KSPIN_COMMUNICATION, *PKSPIN_COMMUNICATION;

typedef KSIDENTIFIER KSPIN_MEDIUM, *PKSPIN_MEDIUM;

#define STATIC_IID_IMediumValidation \
    0x40DC0EAEL, 0x5FAB, 0x11D1, 0x9A, 0xA6, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("40DC0EAE-5FAB-11D1-9AA6-00A0C9223196", IID_IMediumValidation);
#define IID_IMediumValidation DEFINE_GUIDNAMED(IID_IMediumValidation)

#if defined(_NTDDK_)
typedef
NTSTATUS
(*PFNCHECKCLIENTMEDIUM)( 
    IN PVOID Context,
    IN PDEVICE_OBJECT DeviceObject,
    IN PKSPIN_MEDIUM Medium
    );

typedef struct {
    INTERFACE               Interface;
    PFNCHECKCLIENTMEDIUM    CheckClient;
} IMediumValidation;
#endif // _NTDDK_

typedef struct {
    KSPIN_INTERFACE Interface;
    KSPIN_MEDIUM    Medium;
    ULONG           PinId;
    HANDLE          PinToHandle;
    KSPRIORITY      Priority;
} KSPIN_CONNECT, *PKSPIN_CONNECT;

typedef struct {
    ULONG   Size;
    ULONG   Pin;
    WCHAR   SymbolicLinkName[1];
} KSPIN_PHYSICALCONNECTION, *PKSPIN_PHYSICALCONNECTION;

#if defined(_NTDDK_)
typedef
NTSTATUS
(*PFNKSINTERSECTHANDLER)(
    IN PIRP Irp,
    IN PKSP_PIN Pin,
    IN PKSDATARANGE DataRange,
    OUT PVOID Data OPTIONAL
    );
#endif // _NTDDK_

#define DEFINE_KSPIN_INTERFACE_TABLE(tablename)\
    const KSPIN_INTERFACE tablename[] =

#define DEFINE_KSPIN_INTERFACE_ITEM(guid, interface)\
    {\
        STATICGUIDOF(guid),\
        (interface),\
        0\
    }

#define DEFINE_KSPIN_MEDIUM_TABLE( tablename )\
    const KSPIN_MEDIUM tablename[] =

#define DEFINE_KSPIN_MEDIUM_ITEM(guid, medium)\
    DEFINE_KSPIN_INTERFACE_ITEM(guid, medium)

#define DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_CINSTANCES,\
        (Handler),\
        sizeof(KSP_PIN),\
        sizeof(KSPIN_CINSTANCES),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_CTYPES,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(ULONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_DATAFLOW,\
        (Handler),\
        sizeof(KSP_PIN),\
        sizeof(KSPIN_DATAFLOW),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_DATARANGES,\
        (Handler),\
        sizeof(KSP_PIN),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_DATAINTERSECTION,\
        (Handler),\
        sizeof(KSP_PIN) + sizeof(KSMULTIPLE_ITEM),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_INTERFACES,\
        (Handler),\
        sizeof(KSP_PIN),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_MEDIUMS,\
        (Handler),\
        sizeof(KSP_PIN),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_COMMUNICATION,\
        (Handler),\
        sizeof(KSP_PIN),\
        sizeof(KSPIN_COMMUNICATION),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_GLOBALCINSTANCES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_GLOBALCINSTANCES,\
        (Handler),\
        sizeof(KSP_PIN),\
        sizeof(KSPIN_CINSTANCES),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_NECESSARYINSTANCES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_NECESSARYINSTANCES,\
        (Handler),\
        sizeof(KSP_PIN),\
        sizeof(ULONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_PHYSICALCONNECTION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_PHYSICALCONNECTION,\
        (Handler),\
        sizeof(KSP_PIN),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_CATEGORY,\
        (Handler),\
        sizeof(KSP_PIN),\
        sizeof(GUID),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_NAME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_NAME,\
        (Handler),\
        sizeof(KSP_PIN),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_CONSTRAINEDDATARANGES(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_CONSTRAINEDDATARANGES,\
        (Handler),\
        sizeof(KSP_PIN),\
        0,\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_PROPOSEDATAFORMAT(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_PROPOSEDATAFORMAT,\
        NULL,\
        sizeof(KSP_PIN),\
        sizeof(KSDATAFORMAT),\
        (Handler), NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_PIN_COMPLETEDATAFORMAT(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_PIN_COMPLETEDATAFORMAT,\
        (GetHandler),\
        sizeof(KSP_PIN),\
        0,\
        (SetHandler), NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_PINSET(PinSet,\
    PropGeneral, PropInstances, PropIntersection)\
DEFINE_KSPROPERTY_TABLE(PinSet) {\
    DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(PropInstances),\
    DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(PropIntersection),\
    DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_NAME(PropGeneral)\
}

#define DEFINE_KSPROPERTY_PINSETCONSTRAINED(PinSet,\
    PropGeneral, PropInstances, PropIntersection)\
DEFINE_KSPROPERTY_TABLE(PinSet) {\
    DEFINE_KSPROPERTY_ITEM_PIN_CINSTANCES(PropInstances),\
    DEFINE_KSPROPERTY_ITEM_PIN_CTYPES(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_DATAFLOW(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_DATARANGES(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_DATAINTERSECTION(PropIntersection),\
    DEFINE_KSPROPERTY_ITEM_PIN_INTERFACES(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_MEDIUMS(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_COMMUNICATION(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_CATEGORY(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_NAME(PropGeneral),\
    DEFINE_KSPROPERTY_ITEM_PIN_CONSTRAINEDDATARANGES(PropGeneral)\
}

#define STATIC_KSNAME_Filter\
    0x9b365890L, 0x165f, 0x11d0, 0xa1, 0x95, 0x00, 0x20, 0xaf, 0xd1, 0x56, 0xe4
DEFINE_GUIDSTRUCT("9b365890-165f-11d0-a195-0020afd156e4", KSNAME_Filter);
#define KSNAME_Filter DEFINE_GUIDNAMED(KSNAME_Filter)

#define KSSTRING_Filter L"{9B365890-165F-11D0-A195-0020AFD156E4}"

#define STATIC_KSNAME_Pin\
    0x146F1A80L, 0x4791, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("146F1A80-4791-11D0-A5D6-28DB04C10000", KSNAME_Pin);
#define KSNAME_Pin DEFINE_GUIDNAMED(KSNAME_Pin)

#define KSSTRING_Pin L"{146F1A80-4791-11D0-A5D6-28DB04C10000}"

#define STATIC_KSNAME_Clock\
    0x53172480L, 0x4791, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("53172480-4791-11D0-A5D6-28DB04C10000", KSNAME_Clock);
#define KSNAME_Clock DEFINE_GUIDNAMED(KSNAME_Clock)

#define KSSTRING_Clock L"{53172480-4791-11D0-A5D6-28DB04C10000}"

#define STATIC_KSNAME_Allocator\
    0x642F5D00L, 0x4791, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("642F5D00-4791-11D0-A5D6-28DB04C10000", KSNAME_Allocator);
#define KSNAME_Allocator DEFINE_GUIDNAMED(KSNAME_Allocator)

#define KSSTRING_Allocator L"{642F5D00-4791-11D0-A5D6-28DB04C10000}"

#define KSSTRING_AllocatorEx L"{091BB63B-603F-11D1-B067-00A0C9062802}"

#define STATIC_KSNAME_TopologyNode\
    0x0621061AL, 0xEE75, 0x11D0, 0xB9, 0x15, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("0621061A-EE75-11D0-B915-00A0C9223196", KSNAME_TopologyNode);
#define KSNAME_TopologyNode DEFINE_GUIDNAMED(KSNAME_TopologyNode)

#define KSSTRING_TopologyNode L"{0621061A-EE75-11D0-B915-00A0C9223196}"

#if defined(_NTDDK_)

typedef struct {
    ULONG                   InterfacesCount;
    const KSPIN_INTERFACE*  Interfaces;
    ULONG                   MediumsCount;
    const KSPIN_MEDIUM*     Mediums;
    ULONG                   DataRangesCount;
    const PKSDATARANGE*     DataRanges;
    KSPIN_DATAFLOW          DataFlow;
    KSPIN_COMMUNICATION     Communication;
    const GUID*             Category;
    const GUID*             Name;
    union {
        LONGLONG            Reserved;
        struct {
            ULONG           ConstrainedDataRangesCount;
            PKSDATARANGE*   ConstrainedDataRanges;
        };
    };
} KSPIN_DESCRIPTOR, *PKSPIN_DESCRIPTOR;
typedef const KSPIN_DESCRIPTOR *PCKSPIN_DESCRIPTOR;

#define DEFINE_KSPIN_DESCRIPTOR_TABLE(tablename)\
    const KSPIN_DESCRIPTOR tablename[] =

#define DEFINE_KSPIN_DESCRIPTOR_ITEM(\
    InterfacesCount, Interfaces,\
    MediumsCount, Mediums,\
    DataRangesCount, DataRanges,\
    DataFlow, Communication)\
{\
    InterfacesCount, Interfaces, MediumsCount, Mediums,\
    DataRangesCount, DataRanges, DataFlow, Communication,\
    NULL, NULL, 0\
}
#define DEFINE_KSPIN_DESCRIPTOR_ITEMEX(\
    InterfacesCount, Interfaces,\
    MediumsCount, Mediums,\
    DataRangesCount, DataRanges,\
    DataFlow, Communication,\
    Category, Name)\
{\
    InterfacesCount, Interfaces, MediumsCount, Mediums,\
    DataRangesCount, DataRanges, DataFlow, Communication,\
    Category, Name, 0\
}

#endif // defined(_NTDDK_)

//===========================================================================

// MEDIATYPE_NULL
#define STATIC_KSDATAFORMAT_TYPE_WILDCARD       STATIC_GUID_NULL
#define KSDATAFORMAT_TYPE_WILDCARD              GUID_NULL

// MEDIASUBTYPE_NULL
#define STATIC_KSDATAFORMAT_SUBTYPE_WILDCARD    STATIC_GUID_NULL
#define KSDATAFORMAT_SUBTYPE_WILDCARD           GUID_NULL

// MEDIATYPE_Stream
#define STATIC_KSDATAFORMAT_TYPE_STREAM\
    0xE436EB83L, 0x524F, 0x11CE, 0x9F, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70
DEFINE_GUIDSTRUCT("E436EB83-524F-11CE-9F53-0020AF0BA770", KSDATAFORMAT_TYPE_STREAM);
#define KSDATAFORMAT_TYPE_STREAM DEFINE_GUIDNAMED(KSDATAFORMAT_TYPE_STREAM)

// MEDIASUBTYPE_None
#define STATIC_KSDATAFORMAT_SUBTYPE_NONE\
    0xE436EB8EL, 0x524F, 0x11CE, 0x9F, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70
DEFINE_GUIDSTRUCT("E436EB8E-524F-11CE-9F53-0020AF0BA770", KSDATAFORMAT_SUBTYPE_NONE);
#define KSDATAFORMAT_SUBTYPE_NONE DEFINE_GUIDNAMED(KSDATAFORMAT_SUBTYPE_NONE)

#define STATIC_KSDATAFORMAT_SPECIFIER_WILDCARD  STATIC_GUID_NULL
#define KSDATAFORMAT_SPECIFIER_WILDCARD         GUID_NULL

#define STATIC_KSDATAFORMAT_SPECIFIER_FILENAME\
    0xAA797B40L, 0xE974, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("AA797B40-E974-11CF-A5D6-28DB04C10000", KSDATAFORMAT_SPECIFIER_FILENAME);
#define KSDATAFORMAT_SPECIFIER_FILENAME DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_FILENAME)

#define STATIC_KSDATAFORMAT_SPECIFIER_FILEHANDLE\
    0x65E8773CL, 0x8F56, 0x11D0, 0xA3, 0xB9, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("65E8773C-8F56-11D0-A3B9-00A0C9223196", KSDATAFORMAT_SPECIFIER_FILEHANDLE);
#define KSDATAFORMAT_SPECIFIER_FILEHANDLE DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_FILEHANDLE)

// FORMAT_None
#define STATIC_KSDATAFORMAT_SPECIFIER_NONE\
    0x0F6417D6L, 0xC318, 0x11D0, 0xA4, 0x3F, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
DEFINE_GUIDSTRUCT("0F6417D6-C318-11D0-A43F-00A0C9223196", KSDATAFORMAT_SPECIFIER_NONE);
#define KSDATAFORMAT_SPECIFIER_NONE DEFINE_GUIDNAMED(KSDATAFORMAT_SPECIFIER_NONE)

//===========================================================================

#define STATIC_KSPROPSETID_Quality \
    0xD16AD380L, 0xAC1A, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("D16AD380-AC1A-11CF-A5D6-28DB04C10000", KSPROPSETID_Quality);
#define KSPROPSETID_Quality DEFINE_GUIDNAMED(KSPROPSETID_Quality)

typedef enum {
    KSPROPERTY_QUALITY_REPORT
} KSPROPERTY_QUALITY;

#define DEFINE_KSPROPERTY_ITEM_QUALITY_REPORT(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_QUALITY_REPORT,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(KSQUALITY),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

//===========================================================================

#define STATIC_KSPROPSETID_Connection \
    0x1D58C920L, 0xAC9B, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("1D58C920-AC9B-11CF-A5D6-28DB04C10000", KSPROPSETID_Connection);
#define KSPROPSETID_Connection DEFINE_GUIDNAMED(KSPROPSETID_Connection)

typedef enum {
    KSPROPERTY_CONNECTION_STATE,
    KSPROPERTY_CONNECTION_PRIORITY,
    KSPROPERTY_CONNECTION_DATAFORMAT,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING,
    KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT,
    KSPROPERTY_CONNECTION_ACQUIREORDERING,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX
} KSPROPERTY_CONNECTION;

#define DEFINE_KSPROPERTY_ITEM_CONNECTION_STATE(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_STATE,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(KSSTATE),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CONNECTION_PRIORITY(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_PRIORITY,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(KSPRIORITY),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CONNECTION_DATAFORMAT(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_DATAFORMAT,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        0,\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CONNECTION_ALLOCATORFRAMING(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_ALLOCATORFRAMING,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSALLOCATOR_FRAMING),\
        NULL, NULL, 0, NULL, NULL, 0)
        
#define DEFINE_KSPROPERTY_ITEM_CONNECTION_ALLOCATORFRAMING_EX(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(KSALLOCATOR_FRAMING_EX),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CONNECTION_PROPOSEDATAFORMAT(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT,\
        NULL,\
        sizeof(KSPROPERTY),\
        sizeof(KSDATAFORMAT),\
        (Handler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CONNECTION_ACQUIREORDERING(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CONNECTION_ACQUIREORDERING,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(BOOL),\
        NULL, NULL, 0, NULL, NULL, 0)

//===========================================================================
//
// pins flags
//
#define KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER   0x00000001
#define KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY      0x00000002
#define KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY    0x00000004
#define KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE      0x00000008
#define KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY   0x80000000

#define KSALLOCATOR_OPTIONF_COMPATIBLE              0x00000001
#define KSALLOCATOR_OPTIONF_SYSTEM_MEMORY           0x00000002
#define KSALLOCATOR_OPTIONF_VALID                   0x00000003
// 
// pins extended framing flags
//
#define KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT       0x00000010
#define KSALLOCATOR_FLAG_DEVICE_SPECIFIC            0x00000020
#define KSALLOCATOR_FLAG_CAN_ALLOCATE               0x00000040
//
// allocator pipes flags
//
// there is at least one data modification in a pipe
#define KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY         0x00000100
#define KSALLOCATOR_FLAG_MULTIPLE_OUTPUT            0x00000200
#define KSALLOCATOR_FLAG_CYCLE                      0x00000400
#define KSALLOCATOR_FLAG_ALLOCATOR_EXISTS           0x00000800
// there is no framing dependency between neighbouring pipes.
#define KSALLOCATOR_FLAG_INDEPENDENT_RANGES         0x00001000


//
// old Framing structure
//
typedef struct {
    union {
        ULONG       OptionsFlags;       // allocator options (create)
        ULONG       RequirementsFlags;  // allocation requirements (query)
    };
#if defined(_NTDDK_)
    POOL_TYPE   PoolType;
#else // !_NTDDK_
    ULONG       PoolType;
#endif // !_NTDDK_
    ULONG       Frames;     // total number of allowable outstanding frames
    ULONG       FrameSize;  // total size of frame
    ULONG       FileAlignment;
    ULONG       Reserved;
} KSALLOCATOR_FRAMING, *PKSALLOCATOR_FRAMING;


//
// new Framing structure, eventually will replace KSALLOCATOR_FRAMING.
// 
typedef struct {
    ULONG   MinFrameSize;
    ULONG   MaxFrameSize;
    ULONG   Stepping;
} KS_FRAMING_RANGE, *PKS_FRAMING_RANGE;


typedef struct {
    KS_FRAMING_RANGE  Range;
    ULONG             InPlaceWeight;
    ULONG             NotInPlaceWeight;
} KS_FRAMING_RANGE_WEIGHTED, *PKS_FRAMING_RANGE_WEIGHTED;


typedef struct {
    ULONG   RatioNumerator;      // compression/expansion ratio
    ULONG   RatioDenominator; 
    ULONG   RatioConstantMargin;
} KS_COMPRESSION, *PKS_COMPRESSION;


//
// Memory Types and Buses are repeated in each entry.
// Easiest to use but takes a little more memory than the varsize layout Pin\Memories\Buses\Ranges.
//
typedef struct {
    GUID                        MemoryType;
    GUID                        BusType;
    ULONG                       MemoryFlags;
    ULONG                       BusFlags;   
    ULONG                       Flags;   
    ULONG                       Frames;              // total number of allowable outstanding frames
    ULONG                       FileAlignment;
    ULONG                       MemoryTypeWeight;    // this memory type Weight pin-wide
    KS_FRAMING_RANGE            PhysicalRange;
    KS_COMPRESSION              OutputCompression;
    KS_FRAMING_RANGE_WEIGHTED   FramingRange; 
} KS_FRAMING_ITEM, *PKS_FRAMING_ITEM;


typedef struct {
    ULONG               PinFlags;
    ULONG               PinWeight;     // this pin framing's Weight graph-wide
    ULONG               CountItems;    // determines the entire buffer size.
    ULONG               Reserved;
    KS_FRAMING_ITEM     FramingItem[1]; 
} KSALLOCATOR_FRAMING_EX, *PKSALLOCATOR_FRAMING_EX;



//
// define memory type GUIDs
//
#define KSMEMORY_TYPE_WILDCARD      GUID_NULL
#define KSMEMORY_TYPE_DONT_CARE     GUID_NULL
     
#define STATIC_KSMEMORY_TYPE_SYSTEM \
    0x091bb638L, 0x603f, 0x11d1, 0xb0, 0x67, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02
DEFINE_GUIDSTRUCT("091bb638-603f-11d1-b067-00a0c9062802", KSMEMORY_TYPE_SYSTEM);
#define KSMEMORY_TYPE_SYSTEM  DEFINE_GUIDNAMED(KSMEMORY_TYPE_SYSTEM)

#define STATIC_KSMEMORY_TYPE_USER \
    0x8cb0fc28L, 0x7893, 0x11d1, 0xb0, 0x69, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02
DEFINE_GUIDSTRUCT("8cb0fc28-7893-11d1-b069-00a0c9062802", KSMEMORY_TYPE_USER);
#define KSMEMORY_TYPE_USER  DEFINE_GUIDNAMED(KSMEMORY_TYPE_USER)

#define STATIC_KSMEMORY_TYPE_KERNEL_PAGED \
    0xd833f8f8L, 0x7894, 0x11d1, 0xb0, 0x69, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02
DEFINE_GUIDSTRUCT("d833f8f8-7894-11d1-b069-00a0c9062802", KSMEMORY_TYPE_KERNEL_PAGED);
#define KSMEMORY_TYPE_KERNEL_PAGED  DEFINE_GUIDNAMED(KSMEMORY_TYPE_KERNEL_PAGED)

#define STATIC_KSMEMORY_TYPE_KERNEL_NONPAGED \
    0x4a6d5fc4L, 0x7895, 0x11d1, 0xb0, 0x69, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02
DEFINE_GUIDSTRUCT("4a6d5fc4-7895-11d1-b069-00a0c9062802", KSMEMORY_TYPE_KERNEL_NONPAGED);
#define KSMEMORY_TYPE_KERNEL_NONPAGED  DEFINE_GUIDNAMED(KSMEMORY_TYPE_KERNEL_NONPAGED)

// old KS clients did not specify the device memory type
#define STATIC_KSMEMORY_TYPE_DEVICE_UNKNOWN \
    0x091bb639L, 0x603f, 0x11d1, 0xb0, 0x67, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02
DEFINE_GUIDSTRUCT("091bb639-603f-11d1-b067-00a0c9062802", KSMEMORY_TYPE_DEVICE_UNKNOWN);
#define KSMEMORY_TYPE_DEVICE_UNKNOWN DEFINE_GUIDNAMED(KSMEMORY_TYPE_DEVICE_UNKNOWN)



// KSEVENTSETID_StreamAllocator: {75D95571-073C-11d0-A161-0020AFD156E4}

#define STATIC_KSEVENTSETID_StreamAllocator\
    0x75d95571L, 0x073c, 0x11d0, 0xa1, 0x61, 0x00, 0x20, 0xaf, 0xd1, 0x56, 0xe4
DEFINE_GUIDSTRUCT("75d95571-073c-11d0-a161-0020afd156e4", KSEVENTSETID_StreamAllocator);
#define KSEVENTSETID_StreamAllocator DEFINE_GUIDNAMED(KSEVENTSETID_StreamAllocator)

typedef enum {
    KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME,
    KSEVENT_STREAMALLOCATOR_FREEFRAME
} KSEVENT_STREAMALLOCATOR;

#define STATIC_KSMETHODSETID_StreamAllocator\
    0xcf6e4341L, 0xec87, 0x11cf, 0xa1, 0x30, 0x00, 0x20, 0xaf, 0xd1, 0x56, 0xe4
DEFINE_GUIDSTRUCT("cf6e4341-ec87-11cf-a130-0020afd156e4", KSMETHODSETID_StreamAllocator);
#define KSMETHODSETID_StreamAllocator DEFINE_GUIDNAMED(KSMETHODSETID_StreamAllocator)

typedef enum {
    KSMETHOD_STREAMALLOCATOR_ALLOC,
    KSMETHOD_STREAMALLOCATOR_FREE
} KSMETHOD_STREAMALLOCATOR;

#define DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_ALLOC(Handler)\
    DEFINE_KSMETHOD_ITEM(\
        KSMETHOD_STREAMALLOCATOR_ALLOC,\
        KSMETHOD_TYPE_WRITE,\
        (Handler),\
        sizeof(KSMETHOD),\
        sizeof(PVOID),\
        NULL)

#define DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_FREE(Handler)\
    DEFINE_KSMETHOD_ITEM(\
        KSMETHOD_STREAMALLOCATOR_FREE,\
        KSMETHOD_TYPE_READ,\
        (Handler),\
        sizeof(KSMETHOD),\
        sizeof(PVOID),\
        NULL)

#define DEFINE_KSMETHOD_ALLOCATORSET(AllocatorSet, MethodAlloc, MethodFree)\
DEFINE_KSMETHOD_TABLE(AllocatorSet) {\
    DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_ALLOC(MethodAlloc),\
    DEFINE_KSMETHOD_ITEM_STREAMALLOCATOR_FREE(MethodFree)\
}

#define STATIC_KSPROPSETID_StreamAllocator\
    0xcf6e4342L, 0xec87, 0x11cf, 0xa1, 0x30, 0x00, 0x20, 0xaf, 0xd1, 0x56, 0xe4
DEFINE_GUIDSTRUCT("cf6e4342-ec87-11cf-a130-0020afd156e4", KSPROPSETID_StreamAllocator);
#define KSPROPSETID_StreamAllocator DEFINE_GUIDNAMED(KSPROPSETID_StreamAllocator)

#if defined(_NTDDK_)
typedef enum {
    KSPROPERTY_STREAMALLOCATOR_FUNCTIONTABLE,
    KSPROPERTY_STREAMALLOCATOR_STATUS
} KSPROPERTY_STREAMALLOCATOR;

#define DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_FUNCTIONTABLE(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAMALLOCATOR_FUNCTIONTABLE,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSSTREAMALLOCATOR_FUNCTIONTABLE),\
        NULL, NULL, 0, NULL, NULL, 0)
        
#define DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_STATUS(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAMALLOCATOR_STATUS,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSSTREAMALLOCATOR_STATUS),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ALLOCATORSET(AllocatorSet, PropFunctionTable, PropStatus)\
DEFINE_KSPROPERTY_TABLE(AllocatorSet) {\
    DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_STATUS(PropStatus),\
    DEFINE_KSPROPERTY_ITEM_STREAMALLOCATOR_FUNCTIONTABLE(PropFunctionTable)\
}

typedef
NTSTATUS
(*PFNALLOCATOR_ALLOCATEFRAME)(
    IN PFILE_OBJECT FileObject,
    PVOID *Frame
    );

typedef
VOID
(*PFNALLOCATOR_FREEFRAME)(
    IN PFILE_OBJECT FileObject,
    IN PVOID Frame
    );

typedef struct {
    PFNALLOCATOR_ALLOCATEFRAME  AllocateFrame;
    PFNALLOCATOR_FREEFRAME      FreeFrame;
} KSSTREAMALLOCATOR_FUNCTIONTABLE, *PKSSTREAMALLOCATOR_FUNCTIONTABLE;
#endif // defined(_NTDDK_)

typedef struct {
    KSALLOCATOR_FRAMING Framing;
    ULONG               AllocatedFrames;
    ULONG               Reserved;
} KSSTREAMALLOCATOR_STATUS, *PKSSTREAMALLOCATOR_STATUS;

typedef struct {
    KSALLOCATOR_FRAMING_EX Framing;
    ULONG                  AllocatedFrames;
    ULONG                  Reserved;
} KSSTREAMALLOCATOR_STATUS_EX, *PKSSTREAMALLOCATOR_STATUS_EX;


#define KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT        0x00000001
#define KSSTREAM_HEADER_OPTIONSF_PREROLL            0x00000002
#define KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY  0x00000004
#define KSSTREAM_HEADER_OPTIONSF_TYPECHANGED        0x00000008
#define KSSTREAM_HEADER_OPTIONSF_TIMEVALID          0x00000010
#define KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY  0x00000040
#define KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE       0x00000080
#define KSSTREAM_HEADER_OPTIONSF_DURATIONVALID      0x00000100
#define KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM        0x00000200
#define KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA         0x80000000

typedef struct {
    LONGLONG    Time;
    ULONG       Numerator;
    ULONG       Denominator;
} KSTIME, *PKSTIME;

typedef struct {
    ULONG       Size;
    ULONG       TypeSpecificFlags;
    KSTIME      PresentationTime;
    LONGLONG    Duration;
    ULONG       FrameExtent;
    ULONG       DataUsed;
    PVOID       Data;
    ULONG       OptionsFlags;
} KSSTREAM_HEADER, *PKSSTREAM_HEADER;

#define STATIC_KSPROPSETID_StreamInterface\
    0x1fdd8ee1L, 0x9cd3, 0x11d0, 0x82, 0xaa, 0x00, 0x00, 0xf8, 0x22, 0xfe, 0x8a
DEFINE_GUIDSTRUCT("1fdd8ee1-9cd3-11d0-82aa-0000f822fe8a", KSPROPSETID_StreamInterface);
#define KSPROPSETID_StreamInterface DEFINE_GUIDNAMED(KSPROPSETID_StreamInterface)

typedef enum {
    KSPROPERTY_STREAMINTERFACE_HEADERSIZE
} KSPROPERTY_STREAMINTERFACE;

#define DEFINE_KSPROPERTY_ITEM_STREAMINTERFACE_HEADERSIZE( GetHandler )\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAMINTERFACE_HEADERSIZE,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(ULONG),\
        NULL, NULL, 0, NULL, NULL, 0)
        
#define DEFINE_KSPROPERTY_STREAMINTERFACESET(StreamInterfaceSet,\
    HeaderSizeHandler)\
DEFINE_KSPROPERTY_TABLE(StreamInterfaceSet) {\
    DEFINE_KSPROPERTY_ITEM_STREAMINTERFACE_HEADERSIZE( HeaderSizeHandler )\
}

#define STATIC_KSPROPSETID_Stream\
    0x65aaba60L, 0x98ae, 0x11cf, 0xa1, 0x0d, 0x00, 0x20, 0xaf, 0xd1, 0x56, 0xe4
DEFINE_GUIDSTRUCT("65aaba60-98ae-11cf-a10d-0020afd156e4", KSPROPSETID_Stream);
#define KSPROPSETID_Stream DEFINE_GUIDNAMED(KSPROPSETID_Stream)

typedef enum {
    KSPROPERTY_STREAM_ALLOCATOR,
    KSPROPERTY_STREAM_QUALITY,
    KSPROPERTY_STREAM_DEGRADATION,
    KSPROPERTY_STREAM_MASTERCLOCK,
    KSPROPERTY_STREAM_TIMEFORMAT,
    KSPROPERTY_STREAM_PRESENTATIONTIME,
    KSPROPERTY_STREAM_PRESENTATIONEXTENT,
    KSPROPERTY_STREAM_FRAMETIME,
    KSPROPERTY_STREAM_RATECAPABILITY,
    KSPROPERTY_STREAM_RATE,
    KSPROPERTY_STREAM_PIPE_ID
} KSPROPERTY_STREAM;

#define DEFINE_KSPROPERTY_ITEM_STREAM_ALLOCATOR(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_ALLOCATOR,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(HANDLE),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_QUALITY(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_QUALITY,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSQUALITY_MANAGER),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_DEGRADATION(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_DEGRADATION,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        0,\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_MASTERCLOCK(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_MASTERCLOCK,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(HANDLE),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_TIMEFORMAT(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_TIMEFORMAT,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(GUID),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_PRESENTATIONTIME(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_PRESENTATIONTIME,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(KSTIME),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_PRESENTATIONEXTENT(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_PRESENTATIONEXTENT,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_FRAMETIME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_FRAMETIME,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSFRAMETIME),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_RATECAPABILITY(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_RATECAPABILITY,\
        (Handler),\
        sizeof(KSRATE_CAPABILITY),\
        sizeof(KSRATE),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_RATE(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_RATE,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(KSRATE),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_STREAM_PIPE_ID(GetHandler, SetHandler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_STREAM_PIPE_ID,\
        (GetHandler),\
        sizeof(KSPROPERTY),\
        sizeof(HANDLE),\
        (SetHandler),\
        NULL, 0, NULL, NULL, 0)

typedef struct {
    HANDLE      QualityManager;
    PVOID       Context;
} KSQUALITY_MANAGER, *PKSQUALITY_MANAGER;

typedef struct {
    LONGLONG    Duration;
    ULONG       FrameFlags;
    ULONG       Reserved;
} KSFRAMETIME, *PKSFRAMETIME;

#define KSFRAMETIME_VARIABLESIZE    0x00000001

typedef struct {
    LONGLONG        PresentationStart;
    LONGLONG        Duration;
    KSPIN_INTERFACE Interface;
    LONG            Rate;
    ULONG           Flags;
} KSRATE, *PKSRATE;

#define KSRATE_NOPRESENTATIONSTART      0x00000001
#define KSRATE_NOPRESENTATIONDURATION   0x00000002

typedef struct {
    KSPROPERTY      Property;
    KSRATE          Rate;
} KSRATE_CAPABILITY, *PKSRATE_CAPABILITY;

#define STATIC_KSPROPSETID_Clock \
    0xDF12A4C0L, 0xAC17, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("DF12A4C0-AC17-11CF-A5D6-28DB04C10000", KSPROPSETID_Clock);
#define KSPROPSETID_Clock DEFINE_GUIDNAMED(KSPROPSETID_Clock)

//
// Performs a x*y/z operation on 64 bit quantities by splitting the operation. The equation
// is simplified with respect to adding in the remainder for the upper 32 bits.
//
// (xh * 10000000 / Frequency) * 2^32 + ((((xh * 10000000) % Frequency) * 2^32 + (xl * 10000000)) / Frequency)
//
#define NANOSECONDS 10000000
#define KSCONVERT_PERFORMANCE_TIME(Frequency, PerformanceTime) \
    ((((ULONGLONG)(ULONG)(PerformanceTime).HighPart * NANOSECONDS / (Frequency)) << 32) + \
    ((((((ULONGLONG)(ULONG)(PerformanceTime).HighPart * NANOSECONDS) % (Frequency)) << 32) + \
    ((ULONGLONG)(PerformanceTime).LowPart * NANOSECONDS)) / (Frequency)))

typedef struct {
    ULONG       CreateFlags;
} KSCLOCK_CREATE, *PKSCLOCK_CREATE;

typedef struct {
    LONGLONG    Time;
    LONGLONG    SystemTime;
} KSCORRELATED_TIME, *PKSCORRELATED_TIME;

typedef struct {
    LONGLONG    Granularity;
    LONGLONG    Error;
} KSRESOLUTION, *PKSRESOLUTION;

typedef enum {
    KSPROPERTY_CLOCK_TIME,
    KSPROPERTY_CLOCK_PHYSICALTIME,
    KSPROPERTY_CLOCK_CORRELATEDTIME,
    KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME,
    KSPROPERTY_CLOCK_RESOLUTION,
    KSPROPERTY_CLOCK_STATE,
#if defined(_NTDDK_)
    KSPROPERTY_CLOCK_FUNCTIONTABLE
#endif // defined(_NTDDK_)
} KSPROPERTY_CLOCK;

#if defined(_NTDDK_)

typedef
LONGLONG
(FASTCALL *PFNKSCLOCK_GETTIME)(
    IN PFILE_OBJECT FileObject
    );
typedef
LONGLONG
(FASTCALL *PFNKSCLOCK_CORRELATEDTIME)(
    IN PFILE_OBJECT FileObject,
    OUT PLONGLONG SystemTime);

typedef struct {
    PFNKSCLOCK_GETTIME          GetTime;
    PFNKSCLOCK_GETTIME          GetPhysicalTime;
    PFNKSCLOCK_CORRELATEDTIME   GetCorrelatedTime;
    PFNKSCLOCK_CORRELATEDTIME   GetCorrelatedPhysicalTime;
} KSCLOCK_FUNCTIONTABLE, *PKSCLOCK_FUNCTIONTABLE;

typedef PVOID   PKSDEFAULTCLOCK;

#define DEFINE_KSPROPERTY_ITEM_CLOCK_TIME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_TIME,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CLOCK_PHYSICALTIME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_PHYSICALTIME,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(LONGLONG),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDTIME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_CORRELATEDTIME,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSCORRELATED_TIME),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDPHYSICALTIME(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSCORRELATED_TIME),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CLOCK_RESOLUTION(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_RESOLUTION,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSRESOLUTION),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CLOCK_STATE(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_STATE,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSSTATE),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_ITEM_CLOCK_FUNCTIONTABLE(Handler)\
    DEFINE_KSPROPERTY_ITEM(\
        KSPROPERTY_CLOCK_FUNCTIONTABLE,\
        (Handler),\
        sizeof(KSPROPERTY),\
        sizeof(KSCLOCK_FUNCTIONTABLE),\
        NULL, NULL, 0, NULL, NULL, 0)

#define DEFINE_KSPROPERTY_CLOCKSET(ClockSet,\
    PropTime, PropPhysicalTime,\
    PropCorrelatedTime, PropCorrelatedPhysicalTime,\
    PropResolution, PropState, PropFunctionTable)\
DEFINE_KSPROPERTY_TABLE(ClockSet) {\
    DEFINE_KSPROPERTY_ITEM_CLOCK_TIME(PropTime),\
    DEFINE_KSPROPERTY_ITEM_CLOCK_PHYSICALTIME(PropPhysicalTime),\
    DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDTIME(PropCorrelatedTime),\
    DEFINE_KSPROPERTY_ITEM_CLOCK_CORRELATEDPHYSICALTIME(PropCorrelatedPhysicalTime),\
    DEFINE_KSPROPERTY_ITEM_CLOCK_RESOLUTION(PropResolution),\
    DEFINE_KSPROPERTY_ITEM_CLOCK_STATE(PropState),\
    DEFINE_KSPROPERTY_ITEM_CLOCK_FUNCTIONTABLE(PropFunctionTable),\
}

#endif // defined(_NTDDK_)

#define STATIC_KSEVENTSETID_Clock \
    0x364D8E20L, 0x62C7, 0x11CF, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("364D8E20-62C7-11CF-A5D6-28DB04C10000", KSEVENTSETID_Clock);
#define KSEVENTSETID_Clock DEFINE_GUIDNAMED(KSEVENTSETID_Clock)

typedef enum {
    KSEVENT_CLOCK_INTERVAL_MARK,
    KSEVENT_CLOCK_POSITION_MARK
} KSEVENT_CLOCK_POSITION;

#define STATIC_KSEVENTSETID_Connection\
    0x7f4bcbe0L, 0x9ea5, 0x11cf, 0xa5, 0xd6, 0x28, 0xdb, 0x04, 0xc1, 0x00, 0x00
DEFINE_GUIDSTRUCT("7f4bcbe0-9ea5-11cf-a5d6-28db04c10000", KSEVENTSETID_Connection);
#define KSEVENTSETID_Connection DEFINE_GUIDNAMED(KSEVENTSETID_Connection)

typedef enum {
    KSEVENT_CONNECTION_POSITIONUPDATE,
    KSEVENT_CONNECTION_DATADISCONTINUITY,
    KSEVENT_CONNECTION_TIMEDISCONTINUITY,
    KSEVENT_CONNECTION_PRIORITY,
    KSEVENT_CONNECTION_ENDOFSTREAM
} KSEVENT_CONNECTION;

typedef struct {
    PVOID       Context;
    ULONG       Proportion;
    LONGLONG    DeltaTime;
} KSQUALITY, *PKSQUALITY;

typedef KSIDENTIFIER KSDEGRADE, *PKSDEGRADE;

#define STATIC_KSDEGRADESETID_Standard\
    0x9F564180L, 0x704C, 0x11D0, 0xA5, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00
DEFINE_GUIDSTRUCT("9F564180-704C-11D0-A5D6-28DB04C10000", KSDEGRADESETID_Standard);
#define KSDEGRADESETID_Standard DEFINE_GUIDNAMED(KSDEGRADESETID_Standard)

typedef enum {
    KSDEGRADE_STANDARD_SAMPLE,
    KSDEGRADE_STANDARD_QUALITY,
    KSDEGRADE_STANDARD_COMPUTATION,
    KSDEGRADE_STANDARD_SKIP
} KSDEGRADE_STANDARD;

#if defined(_NTDDK_)

#define KSPROBE_STREAMREAD      0x00000000
#define KSPROBE_STREAMWRITE     0x00000001
#define KSPROBE_ALLOCATEMDL     0x00000010
#define KSPROBE_PROBEANDLOCK    0x00000020
#define KSPROBE_SYSTEMADDRESS   0x00000040
#define KSPROBE_ALLOWFORMATCHANGE   0x00000080

#define KSSTREAM_READ           KSPROBE_STREAMREAD
#define KSSTREAM_WRITE          KSPROBE_STREAMWRITE
#define KSSTREAM_PAGED_DATA     0x00000000
#define KSSTREAM_NONPAGED_DATA  0x00000100
#define KSSTREAM_SYNCHRONOUS    0x00001000

typedef
NTSTATUS
(*PFNKSCONTEXT_DISPATCH)(
    IN PVOID Context,
    IN PIRP Irp
    );

typedef
NTSTATUS
(*PFNKSHANDLER)(
    IN PIRP Irp,
    IN PKSIDENTIFIER Request,
    IN OUT PVOID Data
    );

typedef
BOOLEAN
(*PFNKSFASTHANDLER)(
    IN PFILE_OBJECT FileObject,
    IN PKSIDENTIFIER UNALIGNED Request,
    IN ULONG RequestLength,
    IN OUT PVOID UNALIGNED Data,
    IN ULONG DataLength,
    OUT PIO_STATUS_BLOCK IoStatus
    );

typedef
NTSTATUS
(*PFNKSALLOCATOR)(
    IN PIRP Irp,
    IN ULONG BufferSize,
    IN BOOL InputOperation
    );

typedef struct {
    KSPROPERTY_MEMBERSHEADER    MembersHeader;
    const VOID*                 Members;
} KSPROPERTY_MEMBERSLIST, *PKSPROPERTY_MEMBERSLIST;

typedef struct {
    KSIDENTIFIER                    PropTypeSet;
    ULONG                           MembersListCount;
    const KSPROPERTY_MEMBERSLIST*   MembersList;
} KSPROPERTY_VALUES, *PKSPROPERTY_VALUES;

#define DEFINE_KSPROPERTY_TABLE(tablename)\
    const KSPROPERTY_ITEM tablename[] =

#define DEFINE_KSPROPERTY_ITEM(PropertyId, GetHandler,\
                               MinProperty,\
                               MinData,\
                               SetHandler,\
                               Values, RelationsCount, Relations, SupportHandler,\
                               SerializedSize)\
{\
    PropertyId, (PFNKSHANDLER)GetHandler, MinProperty, MinData,\
    (PFNKSHANDLER)SetHandler,\
    (PKSPROPERTY_VALUES)Values, RelationsCount, (PKSPROPERTY)Relations,\
    SupportHandler, (ULONG)SerializedSize\
}

typedef struct {
    ULONG                   PropertyId;
    union {
        PFNKSHANDLER            GetPropertyHandler;
        BOOLEAN                 GetSupported;
    };
    ULONG                   MinProperty;
    ULONG                   MinData;
    union {
        PFNKSHANDLER            SetPropertyHandler;
        BOOLEAN                 SetSupported;
    };
    const KSPROPERTY_VALUES*Values;
    ULONG                   RelationsCount;
    const KSPROPERTY*       Relations;
    PFNKSHANDLER            SupportHandler;
    ULONG                   SerializedSize;
} KSPROPERTY_ITEM, *PKSPROPERTY_ITEM;

#define DEFINE_KSFASTPROPERTY_ITEM(PropertyId, GetHandler, SetHandler)\
{\
    PropertyId, (PFNKSFASTHANDLER)GetHandler, (PFNKSFASTHANDLER)SetHandler, 0\
}

typedef struct {
    ULONG                       PropertyId;
    union {
        PFNKSFASTHANDLER            GetPropertyHandler;
        BOOLEAN                     GetSupported;
    };
    union {
        PFNKSFASTHANDLER            SetPropertyHandler;
        BOOLEAN                     SetSupported;
    };
    ULONG                       Reserved;
} KSFASTPROPERTY_ITEM, *PKSFASTPROPERTY_ITEM;

#define DEFINE_KSPROPERTY_SET(Set,\
                              PropertiesCount,\
                              PropertyItem,\
                              FastIoCount,\
                              FastIoTable)\
{\
    Set,\
    PropertiesCount,\
    PropertyItem,\
    FastIoCount,\
    FastIoTable\
}

#define DEFINE_KSPROPERTY_SET_TABLE(tablename)\
    const KSPROPERTY_SET tablename[] =

typedef struct {
    const GUID*                 Set;
    ULONG                       PropertiesCount;
    const KSPROPERTY_ITEM*      PropertyItem;
    ULONG                       FastIoCount;
    const KSFASTPROPERTY_ITEM*  FastIoTable;
} KSPROPERTY_SET, *PKSPROPERTY_SET;

#define DEFINE_KSMETHOD_TABLE(tablename)\
    const KSMETHOD_ITEM tablename[] =

#define DEFINE_KSMETHOD_ITEM(MethodId, Flags,\
                             MethodHandler,\
                             MinMethod, MinData, SupportHandler)\
{\
    MethodId, (PFNKSHANDLER)MethodHandler, MinMethod, MinData,\
    SupportHandler, Flags\
}

typedef struct {
    ULONG                   MethodId;
    union {
        PFNKSHANDLER            MethodHandler;
        BOOLEAN                 MethodSupported;
    };
    ULONG                   MinMethod;
    ULONG                   MinData;
    PFNKSHANDLER            SupportHandler;
    ULONG                   Flags;
} KSMETHOD_ITEM, *PKSMETHOD_ITEM;

#define DEFINE_KSFASTMETHOD_ITEM(MethodId, MethodHandler)\
{\
    MethodId, (PFNKSFASTHANDLER)MethodHandler\
}

typedef struct {
    ULONG                   MethodId;
    union {
        PFNKSFASTHANDLER        MethodHandler;
        BOOLEAN                 MethodSupported;
    };
} KSFASTMETHOD_ITEM, *PKSFASTMETHOD_ITEM;

#define DEFINE_KSMETHOD_SET(Set,\
                            MethodsCount,\
                            MethodItem,\
                            FastIoCount,\
                            FastIoTable)\
{\
    Set,\
    MethodsCount,\
    MethodItem,\
    FastIoCount,\
    FastIoTable\
}

#define DEFINE_KSMETHOD_SET_TABLE(tablename)\
    const KSMETHOD_SET tablename[] =

typedef struct {
    const GUID*             Set;
    ULONG                   MethodsCount;
    const KSMETHOD_ITEM*    MethodItem;
    ULONG                   FastIoCount;
    const KSFASTMETHOD_ITEM*FastIoTable;
} KSMETHOD_SET, *PKSMETHOD_SET;

typedef _KSEVENT_ENTRY;

typedef
NTSTATUS
(*PFNKSADDEVENT)(
    IN PIRP Irp,
    IN PKSEVENTDATA EventData,
    IN struct _KSEVENT_ENTRY* EventEntry
    );

typedef
VOID
(*PFNKSREMOVEEVENT)(
    IN PFILE_OBJECT FileObject,
    IN struct _KSEVENT_ENTRY* EventEntry
    );
    
#define DEFINE_KSEVENT_TABLE(tablename)\
    const KSEVENT_ITEM tablename[] =

#define DEFINE_KSEVENT_ITEM(EventId, DataInput, ExtraEntryData,\
                            AddHandler, RemoveHandler, SupportHandler)\
{\
    EventId,\
    DataInput,\
    ExtraEntryData,\
    AddHandler,\
    RemoveHandler,\
    SupportHandler\
}

typedef struct {
    ULONG               EventId;
    ULONG               DataInput;
    ULONG               ExtraEntryData;
    PFNKSADDEVENT       AddHandler;
    PFNKSREMOVEEVENT    RemoveHandler;
    PFNKSHANDLER        SupportHandler;
} KSEVENT_ITEM, *PKSEVENT_ITEM;

#define DEFINE_KSEVENT_SET(Set,\
                           EventsCount,\
                           EventItem)\
{\
    Set, EventsCount, EventItem\
}

#define DEFINE_KSEVENT_SET_TABLE(tablename)\
    const KSEVENT_SET tablename[] =

typedef struct {
    const GUID*         Set;
    ULONG               EventsCount;
    const KSEVENT_ITEM* EventItem;
} KSEVENT_SET, *PKSEVENT_SET;

typedef struct {
    KDPC            Dpc;
    ULONG           ReferenceCount;
    KSPIN_LOCK      AccessLock;
} KSDPC_ITEM, *PKSDPC_ITEM;

typedef struct {
    KSDPC_ITEM          DpcItem;
    LIST_ENTRY          BufferList;
} KSBUFFER_ITEM, *PKSBUFFER_ITEM;

#define KSEVENT_ENTRY_DELETED   1
#define KSEVENT_ENTRY_ONESHOT   2
#define KSEVENT_ENTRY_BUFFERED  4

typedef struct _KSEVENT_ENTRY {
    LIST_ENTRY      ListEntry;
    PVOID           Object;
    union {
        PKSDPC_ITEM         DpcItem;
        PKSBUFFER_ITEM      BufferItem;
    };
    PKSEVENTDATA        EventData;
    ULONG               NotificationType;
    const KSEVENT_SET*  EventSet;
    const KSEVENT_ITEM* EventItem;
    PFILE_OBJECT        FileObject;
    ULONG               SemaphoreAdjustment;
    ULONG               Reserved;
    ULONG               Flags;
} KSEVENT_ENTRY, *PKSEVENT_ENTRY;

typedef enum {
    KSEVENTS_NONE,
    KSEVENTS_SPINLOCK,
    KSEVENTS_MUTEX,
    KSEVENTS_FMUTEX,
    KSEVENTS_FMUTEXUNSAFE,
    KSEVENTS_INTERRUPT,
    KSEVENTS_ERESOURCE
} KSEVENTS_LOCKTYPE;

#define KSDISPATCH_FASTIO       0x80000000

typedef struct {
    PDRIVER_DISPATCH        Create;
    PVOID                   Context;
    UNICODE_STRING          ObjectClass;
    PSECURITY_DESCRIPTOR    SecurityDescriptor;
    ULONG                   Flags;
} KSOBJECT_CREATE_ITEM, *PKSOBJECT_CREATE_ITEM;

typedef
VOID
(*PFNKSITEMFREECALLBACK)(
    IN PKSOBJECT_CREATE_ITEM CreateItem
    );

#define KSCREATE_ITEM_SECURITYCHANGED       0x00000001
#define KSCREATE_ITEM_WILDCARD              0x00000002
#define KSCREATE_ITEM_NOPARAMETERS          0x00000004

#define DEFINE_KSCREATE_DISPATCH_TABLE( tablename )\
    KSOBJECT_CREATE_ITEM tablename[] =

#define DEFINE_KSCREATE_ITEM(DispatchCreate, TypeName, Context)\
{\
    (DispatchCreate),\
    (PVOID)(Context),\
    {\
        sizeof(TypeName) - sizeof(UNICODE_NULL),\
        sizeof(TypeName),\
        (PWCHAR)(TypeName)\
    },\
    NULL, 0\
}

#define DEFINE_KSCREATE_ITEMEX(DispatchCreate, TypeName, Context, Flags)\
{\
    (DispatchCreate),\
    (PVOID)(Context),\
    {\
        sizeof(TypeName) - sizeof(UNICODE_NULL),\
        sizeof(TypeName),\
        (PWCHAR)(TypeName)\
    },\
    NULL, (Flags)\
}

#define DEFINE_KSCREATE_ITEMNULL( DispatchCreate, Context )\
{\
    DispatchCreate,\
    Context,\
    {\
        0,\
        0,\
        NULL,\
    },\
    NULL, 0\
}

typedef struct {
    ULONG                    CreateItemsCount;
    PKSOBJECT_CREATE_ITEM    CreateItemsList;
} KSOBJECT_CREATE, *PKSOBJECT_CREATE;

typedef struct {
    PDRIVER_DISPATCH        DeviceIoControl;
    PDRIVER_DISPATCH        Read;
    PDRIVER_DISPATCH        Write;
    PDRIVER_DISPATCH        Flush;
    PDRIVER_DISPATCH        Close;
    PDRIVER_DISPATCH        QuerySecurity;
    PDRIVER_DISPATCH        SetSecurity;
    PFAST_IO_DEVICE_CONTROL FastDeviceIoControl;
    PFAST_IO_READ           FastRead;
    PFAST_IO_WRITE          FastWrite;
} KSDISPATCH_TABLE, *PKSDISPATCH_TABLE;

#define DEFINE_KSDISPATCH_TABLE( tablename, DeviceIoControl, Read, Write,\
                                 Flush, Close, QuerySecurity, SetSecurity,\
                                 FastDeviceIoControl, FastRead, FastWrite  )\
    const KSDISPATCH_TABLE tablename = \
    {\
        DeviceIoControl,        \
        Read,                   \
        Write,                  \
        Flush,                  \
        Close,                  \
        QuerySecurity,          \
        SetSecurity,            \
        FastDeviceIoControl,    \
        FastRead,               \
        FastWrite,              \
    }

#define KSCREATE_ITEM_IRP_STORAGE(Irp)      ((PKSOBJECT_CREATE_ITEM)(Irp)->Tail.Overlay.DriverContext[0])
#define KSEVENT_SET_IRP_STORAGE(Irp)        ((const KSEVENT_SET*)(Irp)->Tail.Overlay.DriverContext[0])
#define KSEVENT_ITEM_IRP_STORAGE(Irp)       ((const KSEVENT_ITEM*)(Irp)->Tail.Overlay.DriverContext[3])
#define KSEVENT_ENTRY_IRP_STORAGE(Irp)      ((PKSEVENT_ENTRY)(Irp)->Tail.Overlay.DriverContext[0])
#define KSMETHOD_SET_IRP_STORAGE(Irp)       ((const KSMETHOD_SET*)(Irp)->Tail.Overlay.DriverContext[0])
#define KSMETHOD_ITEM_IRP_STORAGE(Irp)      ((const KSMETHOD_ITEM*)(Irp)->Tail.Overlay.DriverContext[3])
#define KSMETHOD_TYPE_IRP_STORAGE(Irp)      ((ULONG_PTR)((Irp)->Tail.Overlay.DriverContext[2]))
#define KSQUEUE_SPINLOCK_IRP_STORAGE(Irp)   ((PKSPIN_LOCK)(Irp)->Tail.Overlay.DriverContext[1])
#define KSPROPERTY_SET_IRP_STORAGE(Irp)     ((const KSPROPERTY_SET*)(Irp)->Tail.Overlay.DriverContext[0])
#define KSPROPERTY_ITEM_IRP_STORAGE(Irp)    ((const KSPROPERTY_ITEM*)(Irp)->Tail.Overlay.DriverContext[3])

typedef PVOID   KSDEVICE_HEADER, KSOBJECT_HEADER;

typedef enum {
    KsInvokeOnSuccess = 1,
    KsInvokeOnError = 2,
    KsInvokeOnCancel = 4
} KSCOMPLETION_INVOCATION;

typedef enum {
    KsListEntryTail,
    KsListEntryHead
} KSLIST_ENTRY_LOCATION;

typedef enum {
    KsAcquireOnly,
    KsAcquireAndRemove,
    KsAcquireOnlySingleItem,
    KsAcquireAndRemoveOnlySingleItem
} KSIRP_REMOVAL_OPERATION;

typedef enum {
    KsStackCopyToNewLocation,
    KsStackReuseCurrentLocation,
    KsStackUseNewLocation
} KSSTACK_USE;

typedef enum {
    KSTARGET_STATE_DISABLED,
    KSTARGET_STATE_ENABLED
} KSTARGET_STATE;

typedef
NTSTATUS
(*PFNKSIRPLISTCALLBACK)(
    IN PIRP Irp,
    IN PVOID Context
    );

typedef 
VOID 
(*PFNREFERENCEDEVICEOBJECT)( 
    IN PVOID Context
    );
    
typedef 
VOID 
(*PFNDEREFERENCEDEVICEOBJECT)( 
    IN PVOID Context
    );
    
typedef
NTSTATUS
(*PFNQUERYREFERENCESTRING)( 
    IN PVOID Context,
    IN OUT PWCHAR *String
    );

#define BUS_INTERFACE_REFERENCE_VERSION    0x100
    
typedef struct {
    //
    // Standard interface header
    //
    
    INTERFACE                   Interface;
    
    //
    // Standard bus interfaces
    //
    
    PFNREFERENCEDEVICEOBJECT    ReferenceDeviceObject;
    PFNDEREFERENCEDEVICEOBJECT  DereferenceDeviceObject;
    PFNQUERYREFERENCESTRING     QueryReferenceString;
    
} BUS_INTERFACE_REFERENCE, *PBUS_INTERFACE_REFERENCE;

#define STATIC_REFERENCE_BUS_INTERFACE STATIC_KSMEDIUMSETID_Standard
#define REFERENCE_BUS_INTERFACE KSMEDIUMSETID_Standard

#endif // defined(_NTDDK_)

#include <pshpack1.h>
typedef struct {
    GUID            PropertySet;
    ULONG           Count;
} KSPROPERTY_SERIALHDR, *PKSPROPERTY_SERIALHDR;
#include <poppack.h>

typedef struct {
    KSIDENTIFIER    PropTypeSet;
    ULONG           Id;
    ULONG           PropertyLength;
} KSPROPERTY_SERIAL, *PKSPROPERTY_SERIAL;

//===========================================================================

#if defined(__cplusplus)
extern "C" {
#endif // defined(__cplusplus)

//
// exported prototypes
//

#ifdef _KSDDK_
#define KSDDKAPI
#else // !_KSDDK_
#define KSDDKAPI DECLSPEC_IMPORT
#endif // _KSDDK_

#if defined(_NTDDK_)

KSDDKAPI
NTSTATUS
NTAPI
KsEnableEvent(
    IN PIRP Irp,
    IN ULONG EventSetsCount,
    IN const KSEVENT_SET* EventSet,
    IN OUT PLIST_ENTRY EventsList OPTIONAL,
    IN KSEVENTS_LOCKTYPE EventsFlags OPTIONAL,
    IN PVOID EventsLock OPTIONAL
    );

KSDDKAPI
NTSTATUS
NTAPI
KsEnableEventWithAllocator(
    IN PIRP Irp,
    IN ULONG EventSetsCount,
    IN const KSEVENT_SET* EventSet,
    IN OUT PLIST_ENTRY EventsList OPTIONAL,
    IN KSEVENTS_LOCKTYPE EventsFlags OPTIONAL,
    IN PVOID EventsLock OPTIONAL,
    IN PFNKSALLOCATOR Allocator OPTIONAL,
    IN ULONG EventItemSize OPTIONAL
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDisableEvent(
    IN PIRP Irp,
    IN OUT PLIST_ENTRY EventsList,
    IN KSEVENTS_LOCKTYPE EventsFlags,
    IN PVOID EventsLock
    );

KSDDKAPI
VOID
NTAPI
KsDiscardEvent(
    IN PKSEVENT_ENTRY EventEntry
    );

KSDDKAPI
VOID
NTAPI
KsFreeEventList(
    IN PFILE_OBJECT FileObject,
    IN OUT PLIST_ENTRY EventsList,
    IN KSEVENTS_LOCKTYPE EventsFlags,
    IN PVOID EventsLock
    );

KSDDKAPI
NTSTATUS
NTAPI
KsGenerateEvent(
    IN PKSEVENT_ENTRY EventEntry
    );

KSDDKAPI
NTSTATUS
NTAPI
KsGenerateDataEvent(
    IN PKSEVENT_ENTRY EventEntry,
    IN ULONG DataSize,
    IN PVOID Data
    );

KSDDKAPI
VOID
NTAPI
KsGenerateEventList(
    IN GUID* Set OPTIONAL,
    IN ULONG EventId,
    IN PLIST_ENTRY EventsList,
    IN KSEVENTS_LOCKTYPE EventsFlags,
    IN PVOID EventsLock
    );

// property.c:

KSDDKAPI
NTSTATUS
NTAPI
KsPropertyHandler(
    IN PIRP Irp,
    IN ULONG PropertySetsCount,
    IN const KSPROPERTY_SET* PropertySet
    );

KSDDKAPI
NTSTATUS
NTAPI
KsPropertyHandlerWithAllocator(
    IN PIRP Irp,
    IN ULONG PropertySetsCount,
    IN const KSPROPERTY_SET* PropertySet,
    IN PFNKSALLOCATOR Allocator OPTIONAL,
    IN ULONG PropertyItemSize OPTIONAL
    );

KSDDKAPI
BOOLEAN
NTAPI
KsFastPropertyHandler(
    IN PFILE_OBJECT FileObject,
    IN PKSPROPERTY UNALIGNED Property,
    IN ULONG PropertyLength,
    IN OUT PVOID UNALIGNED Data,
    IN ULONG DataLength,
    OUT PIO_STATUS_BLOCK IoStatus,
    IN ULONG PropertySetsCount,
    IN const KSPROPERTY_SET* PropertySet
    );

// method.c:

KSDDKAPI
NTSTATUS
NTAPI
KsMethodHandler(
    IN PIRP Irp,
    IN ULONG MethodSetsCount,
    IN const KSMETHOD_SET* MethodSet
    );

KSDDKAPI
NTSTATUS
NTAPI
KsMethodHandlerWithAllocator(
    IN PIRP Irp,
    IN ULONG MethodSetsCount,
    IN const KSMETHOD_SET* MethodSet,
    IN PFNKSALLOCATOR Allocator OPTIONAL,
    IN ULONG MethodItemSize OPTIONAL
    );

KSDDKAPI
BOOLEAN
NTAPI
KsFastMethodHandler(
    IN PFILE_OBJECT FileObject,
    IN PKSMETHOD UNALIGNED Method,
    IN ULONG MethodLength,
    IN OUT PVOID UNALIGNED Data,
    IN ULONG DataLength,
    OUT PIO_STATUS_BLOCK IoStatus,
    IN ULONG MethodSetsCount,
    IN const KSMETHOD_SET* MethodSet
    );

// alloc.c:

KSDDKAPI
NTSTATUS
NTAPI
KsCreateDefaultAllocator(
    IN PIRP Irp
    );

KSDDKAPI
NTSTATUS
NTAPI
KsCreateAllocator(
    IN HANDLE ConnectionHandle,
    IN PKSALLOCATOR_FRAMING AllocatorFraming,
    OUT PHANDLE AllocatorHandle
    );

KSDDKAPI
NTSTATUS
NTAPI
KsValidateAllocatorCreateRequest(
    IN PIRP Irp,
    OUT PKSALLOCATOR_FRAMING* AllocatorFraming
    );

// clock.c:

KSDDKAPI
NTSTATUS
NTAPI
KsAllocateDefaultClock(
    OUT PKSDEFAULTCLOCK* DefaultClock
    );

KSDDKAPI
VOID
NTAPI
KsFreeDefaultClock(
    IN PKSDEFAULTCLOCK DefaultClock
    );

KSDDKAPI
NTSTATUS
NTAPI
KsCreateDefaultClock(
    IN PIRP Irp,
    IN PKSDEFAULTCLOCK DefaultClock
    );

KSDDKAPI
NTSTATUS
NTAPI
KsCreateClock(
    IN HANDLE ConnectionHandle,
    IN PKSCLOCK_CREATE ClockCreate,
    OUT PHANDLE ClockHandle
    );

KSDDKAPI
NTSTATUS
NTAPI
KsValidateClockCreateRequest(
    IN PIRP Irp,
    OUT PKSCLOCK_CREATE* ClockCreate
    );

KSDDKAPI
KSSTATE
NTAPI
KsGetDefaultClockState(
    IN PKSDEFAULTCLOCK DefaultClock
    );

KSDDKAPI
VOID
NTAPI
KsSetDefaultClockState(
    IN PKSDEFAULTCLOCK DefaultClock,
    IN KSSTATE State
    );

KSDDKAPI
LONGLONG
NTAPI
KsGetDefaultClockTime(
    IN PKSDEFAULTCLOCK DefaultClock
    );

KSDDKAPI
VOID
NTAPI
KsSetDefaultClockTime(
    IN PKSDEFAULTCLOCK DefaultClock,
    IN LONGLONG Time
    );

// connect.c:

KSDDKAPI
NTSTATUS
NTAPI
KsCreatePin(
    IN HANDLE FilterHandle,
    IN PKSPIN_CONNECT Connect,
    IN ACCESS_MASK DesiredAccess,
    OUT PHANDLE ConnectionHandle
    );

KSDDKAPI
NTSTATUS
NTAPI
KsValidateConnectRequest(
    IN PIRP Irp,
    IN ULONG DescriptorsCount,
    IN const KSPIN_DESCRIPTOR* Descriptor,
    OUT PKSPIN_CONNECT* Connect
    );

KSDDKAPI
NTSTATUS
NTAPI
KsPinPropertyHandler(
    IN PIRP Irp,
    IN PKSPROPERTY Property,
    IN OUT PVOID Data,
    IN ULONG DescriptorsCount,
    IN const KSPIN_DESCRIPTOR* Descriptor
    );

KSDDKAPI
NTSTATUS
NTAPI
KsPinDataIntersection(
    IN PIRP Irp,
    IN PKSP_PIN Pin,
    OUT PVOID Data,
    IN ULONG DescriptorsCount,
    IN const KSPIN_DESCRIPTOR* Descriptor,
    IN PFNKSINTERSECTHANDLER IntersectHandler
    );


KSDDKAPI
NTSTATUS
NTAPI
KsHandleSizedListQuery(
    IN PIRP Irp,
    IN ULONG DataItemsCount,
    IN ULONG DataItemSize,
    IN const VOID* DataItems
    );

// irp.c:

KSDDKAPI
NTSTATUS
NTAPI
KsReferenceBusObject(
    IN KSDEVICE_HEADER  Header
    );

KSDDKAPI
VOID
NTAPI
KsDereferenceBusObject(
    IN KSDEVICE_HEADER  Header
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDispatchQuerySecurity(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDispatchSetSecurity(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDispatchSpecificProperty(
    IN PIRP Irp,
    IN PFNKSHANDLER Handler
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDispatchSpecificMethod(
    IN PIRP Irp,
    IN PFNKSHANDLER Handler
    );

KSDDKAPI
NTSTATUS
NTAPI
KsReadFile(
    IN PFILE_OBJECT FileObject,
    IN PKEVENT Event OPTIONAL,
    IN PVOID PortContext OPTIONAL,
    OUT PIO_STATUS_BLOCK IoStatusBlock,
    OUT PVOID Buffer,
    IN ULONG Length,
    IN ULONG Key OPTIONAL,
    IN KPROCESSOR_MODE RequestorMode
    );

KSDDKAPI
NTSTATUS
NTAPI
KsWriteFile(
    IN PFILE_OBJECT FileObject,
    IN PKEVENT Event OPTIONAL,
    IN PVOID PortContext OPTIONAL,
    OUT PIO_STATUS_BLOCK IoStatusBlock,
    IN PVOID Buffer,
    IN ULONG Length,
    IN ULONG Key OPTIONAL,
    IN KPROCESSOR_MODE RequestorMode
    );

KSDDKAPI
NTSTATUS
NTAPI
KsQueryInformationFile(
    IN PFILE_OBJECT FileObject,
    OUT PVOID FileInformation,
    IN ULONG Length,
    IN FILE_INFORMATION_CLASS FileInformationClass
    );

KSDDKAPI
NTSTATUS
NTAPI
KsSetInformationFile(
    IN PFILE_OBJECT FileObject,
    IN PVOID FileInformation,
    IN ULONG Length,
    IN FILE_INFORMATION_CLASS FileInformationClass
    );

KSDDKAPI
NTSTATUS
NTAPI
KsStreamIo(
    IN PFILE_OBJECT FileObject,
    IN PKEVENT Event OPTIONAL,
    IN PVOID PortContext OPTIONAL,
    IN PIO_COMPLETION_ROUTINE CompletionRoutine OPTIONAL,
    IN PVOID CompletionContext OPTIONAL,
    IN KSCOMPLETION_INVOCATION CompletionInvocationFlags OPTIONAL,
    OUT PIO_STATUS_BLOCK IoStatusBlock,
    IN OUT PVOID StreamHeaders,
    IN ULONG Length,
    IN ULONG Flags,
    IN KPROCESSOR_MODE RequestorMode
    );

KSDDKAPI
NTSTATUS
NTAPI
KsProbeStreamIrp(
    IN OUT PIRP Irp,
    IN ULONG ProbeFlags,
    IN ULONG HeaderSize OPTIONAL
    );

KSDDKAPI
NTSTATUS
NTAPI
KsAllocateExtraData(
    IN OUT PIRP Irp,
    IN ULONG ExtraSize,
    OUT PVOID* ExtraBuffer
    );

KSDDKAPI
VOID
NTAPI
KsNullDriverUnload(
    IN PDRIVER_OBJECT DriverObject
    );

KSDDKAPI
NTSTATUS
NTAPI
KsSetMajorFunctionHandler(
    IN PDRIVER_OBJECT DriverObject,
    IN ULONG MajorFunction
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDispatchInvalidDeviceRequest(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDefaultDeviceIoCompletion(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDispatchIrp(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
BOOLEAN
NTAPI
KsDispatchFastIoDeviceControlFailure(
    IN PFILE_OBJECT FileObject,
    IN BOOLEAN Wait,
    IN PVOID InputBuffer OPTIONAL,
    IN ULONG InputBufferLength,
    OUT PVOID OutputBuffer OPTIONAL,
    IN ULONG OutputBufferLength,
    IN ULONG IoControlCode,
    OUT PIO_STATUS_BLOCK IoStatus,
    IN PDEVICE_OBJECT DeviceObject
    );

KSDDKAPI
BOOLEAN
NTAPI
KsDispatchFastReadFailure(
    IN PFILE_OBJECT FileObject,
    IN PLARGE_INTEGER FileOffset,
    IN ULONG Length,
    IN BOOLEAN Wait,
    IN ULONG LockKey,
    OUT PVOID Buffer,
    OUT PIO_STATUS_BLOCK IoStatus,
    IN PDEVICE_OBJECT DeviceObject
    );

#define KsDispatchFastWriteFailure KsDispatchFastReadFailure

KSDDKAPI
NTSTATUS
NTAPI
KsGetChildCreateParameter(
    IN PIRP Irp,
    OUT PVOID* CreateParameter
    );

KSDDKAPI
VOID
NTAPI
KsCancelRoutine(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
VOID
NTAPI
KsCancelIo(   
    IN OUT PLIST_ENTRY  QueueHead,
    IN PKSPIN_LOCK SpinLock
    );

KSDDKAPI
VOID
NTAPI
KsReleaseIrpOnCancelableQueue(
    IN PIRP Irp,
    IN PDRIVER_CANCEL DriverCancel OPTIONAL
    );

KSDDKAPI
PIRP
NTAPI
KsRemoveIrpFromCancelableQueue(
    IN OUT PLIST_ENTRY QueueHead,
    IN PKSPIN_LOCK SpinLock,
    IN KSLIST_ENTRY_LOCATION ListLocation,
    IN KSIRP_REMOVAL_OPERATION RemovalOperation
    );

KSDDKAPI
NTSTATUS
NTAPI
KsMoveIrpsOnCancelableQueue(
    IN OUT PLIST_ENTRY SourceList,
    IN PKSPIN_LOCK SourceLock,
    IN OUT PLIST_ENTRY DestinationList,
    IN PKSPIN_LOCK DestinationLock OPTIONAL,
    IN KSLIST_ENTRY_LOCATION ListLocation,
    IN PFNKSIRPLISTCALLBACK ListCallback,
    IN PVOID Context
    );

KSDDKAPI
VOID
NTAPI
KsRemoveSpecificIrpFromCancelableQueue(
    IN PIRP Irp
    );

KSDDKAPI
VOID
NTAPI
KsAddIrpToCancelableQueue(
    IN OUT PLIST_ENTRY QueueHead,
    IN PKSPIN_LOCK SpinLock,
    IN PIRP Irp,
    IN KSLIST_ENTRY_LOCATION ListLocation,
    IN PDRIVER_CANCEL DriverCancel OPTIONAL
    );

// api.c:

KSDDKAPI
NTSTATUS
NTAPI
KsAcquireResetValue(
    IN PIRP Irp,
    OUT KSRESET* ResetValue
    );

KSDDKAPI
NTSTATUS
NTAPI
KsTopologyPropertyHandler(
    IN PIRP Irp,
    IN PKSPROPERTY Property,
    IN OUT PVOID Data,
    IN const KSTOPOLOGY* Topology
    );

KSDDKAPI
VOID
NTAPI
KsAcquireDeviceSecurityLock(
    IN KSDEVICE_HEADER Header,
    IN BOOLEAN Exclusive
    );

KSDDKAPI
VOID
NTAPI
KsReleaseDeviceSecurityLock(
    IN KSDEVICE_HEADER Header
    );
    
KSDDKAPI
NTSTATUS
NTAPI
KsDefaultDispatchPnp(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
NTSTATUS
NTAPI
KsDefaultDispatchPower(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );
    
KSDDKAPI
NTSTATUS
NTAPI
KsDefaultForwardIrp(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

KSDDKAPI
VOID
NTAPI
KsSetDevicePnpAndBaseObject(
    IN KSDEVICE_HEADER Header,
    IN PDEVICE_OBJECT PnpDeviceObject,
    IN PDEVICE_OBJECT BaseObject
    );

KSDDKAPI
PDEVICE_OBJECT
NTAPI
KsQueryDevicePnpObject(
    IN KSDEVICE_HEADER Header
    );

KSDDKAPI
ACCESS_MASK
NTAPI
KsQueryObjectAccessMask(
    IN KSOBJECT_HEADER Header
    );

KSDDKAPI
VOID
NTAPI
KsRecalculateStackDepth(
    IN KSDEVICE_HEADER Header,
    IN BOOLEAN ReuseStackLocation
    );

KSDDKAPI
VOID
NTAPI
KsSetTargetState(
    IN KSOBJECT_HEADER Header,
    IN KSTARGET_STATE TargetState
    );

KSDDKAPI
VOID
NTAPI
KsSetTargetDeviceObject(
    IN KSOBJECT_HEADER Header,
    IN PDEVICE_OBJECT TargetDevice OPTIONAL
    );

KSDDKAPI
VOID
NTAPI
KsSetPowerDispatch(
    IN KSOBJECT_HEADER Header,
    IN PFNKSCONTEXT_DISPATCH PowerDispatch OPTIONAL,
    IN PVOID PowerContext OPTIONAL
    );

KSDDKAPI
PKSOBJECT_CREATE_ITEM
NTAPI
KsQueryObjectCreateItem(
    IN KSOBJECT_HEADER Header
    );

KSDDKAPI
NTSTATUS
NTAPI
KsAllocateDeviceHeader(
    OUT KSDEVICE_HEADER* Header,
    IN ULONG ItemsCount,
    IN PKSOBJECT_CREATE_ITEM ItemsList OPTIONAL
    );

KSDDKAPI
VOID
NTAPI
KsFreeDeviceHeader(
    IN KSDEVICE_HEADER Header
    );

KSDDKAPI
NTSTATUS
NTAPI
KsAllocateObjectHeader(
    OUT KSOBJECT_HEADER* Header,
    IN ULONG ItemsCount,
    IN PKSOBJECT_CREATE_ITEM ItemsList OPTIONAL,
    IN PIRP Irp,
    IN const KSDISPATCH_TABLE* Table
    );

KSDDKAPI
VOID
NTAPI
KsFreeObjectHeader(
    IN KSOBJECT_HEADER Header
    );

KSDDKAPI
NTSTATUS
NTAPI
KsAddObjectCreateItemToDeviceHeader(
    IN KSDEVICE_HEADER Header,
    IN PDRIVER_DISPATCH Create,
    IN PVOID Context,
    IN PWCHAR ObjectClass,
    IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL
    );

KSDDKAPI
NTSTATUS
NTAPI
KsAddObjectCreateItemToObjectHeader(
    IN KSOBJECT_HEADER Header,
    IN PDRIVER_DISPATCH Create,
    IN PVOID Context,
    IN PWCHAR ObjectClass,
    IN PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL
    );

KSDDKAPI
NTSTATUS
NTAPI
KsAllocateObjectCreateItem(
    IN KSDEVICE_HEADER Header,
    IN PKSOBJECT_CREATE_ITEM CreateItem,
    IN BOOL AllocateEntry,
    IN PFNKSITEMFREECALLBACK ItemFreeCallback OPTIONAL
    );

KSDDKAPI
NTSTATUS
NTAPI
KsFreeObjectCreateItem(
    IN KSDEVICE_HEADER Header,
    IN PUNICODE_STRING CreateItem
    );

KSDDKAPI
NTSTATUS
NTAPI
KsCreateDefaultSecurity(
    IN PSECURITY_DESCRIPTOR ParentSecurity OPTIONAL,
    OUT PSECURITY_DESCRIPTOR* DefaultSecurity
    );

KSDDKAPI
NTSTATUS
NTAPI
KsForwardIrp(
    IN PIRP Irp,
    IN PFILE_OBJECT FileObject,
    IN BOOLEAN ReuseStackLocation
    );

KSDDKAPI
NTSTATUS
NTAPI
KsForwardAndCatchIrp(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PFILE_OBJECT FileObject,
    IN KSSTACK_USE StackUse
    );

KSDDKAPI
NTSTATUS
NTAPI
KsSynchronousIoControlDevice(
    IN PFILE_OBJECT FileObject,
    IN KPROCESSOR_MODE RequestorMode,
    IN ULONG IoControl,
    IN PVOID InBuffer,
    IN ULONG InSize,
    OUT PVOID OutBuffer,
    IN ULONG OutSize,
    OUT PULONG BytesReturned
    );

KSDDKAPI
NTSTATUS
NTAPI
KsUnserializeObjectPropertiesFromRegistry(
    IN PFILE_OBJECT FileObject,
    IN HANDLE ParentKey OPTIONAL,
    IN PUNICODE_STRING RegistryPath OPTIONAL
    );

// thread.c:

KSDDKAPI
NTSTATUS
NTAPI
KsRegisterWorker(
    IN WORK_QUEUE_TYPE WorkQueueType,
    OUT PKSWORKER* Worker
    );
KSDDKAPI
VOID
NTAPI
KsUnregisterWorker(
    IN PKSWORKER Worker
    );
KSDDKAPI
NTSTATUS
NTAPI
KsQueueWorkItem(
    IN PKSWORKER Worker,
    IN PWORK_QUEUE_ITEM WorkItem
    );

// topology.c:

KSDDKAPI
NTSTATUS
NTAPI
KsCreateTopologyNode(
    IN HANDLE ParentHandle,
    IN PKSNODE_CREATE NodeCreate,
    IN ACCESS_MASK DesiredAccess,
    OUT PHANDLE NodeHandle
    );

KSDDKAPI
NTSTATUS
NTAPI
KsValidateTopologyNodeCreateRequest(
    IN PIRP Irp,
    IN PKSTOPOLOGY Topology,
    OUT PKSNODE_CREATE* NodeCreate
    );

#else // !defined(_NTDDK_)

KSDDKAPI
DWORD
WINAPI
KsCreateAllocator(
    IN HANDLE ConnectionHandle,
    IN PKSALLOCATOR_FRAMING AllocatorFraming,
    OUT PHANDLE AllocatorHandle
    );

KSDDKAPI
DWORD
NTAPI
KsCreateClock(
    IN HANDLE ConnectionHandle,
    IN PKSCLOCK_CREATE ClockCreate,
    OUT PHANDLE ClockHandle
    );

KSDDKAPI
DWORD
WINAPI
KsCreatePin(
    IN HANDLE FilterHandle,
    IN PKSPIN_CONNECT Connect,
    IN ACCESS_MASK DesiredAccess,
    OUT PHANDLE ConnectionHandle
    );

KSDDKAPI
DWORD
WINAPI
KsCreateTopologyNode(
    IN HANDLE ParentHandle,
    IN PKSNODE_CREATE NodeCreate,
    IN ACCESS_MASK DesiredAccess,
    OUT PHANDLE NodeHandle
    );

#endif // !defined(_NTDDK_)

#if defined(__cplusplus)
}
#endif // defined(__cplusplus)

#endif // !_KS_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\code\asyncrdr.h ===
// Copyright (c) 1996 - 1998  Microsoft Corporation.  All Rights Reserved.

#ifndef __ASYNCRDR_H__
#define __ASYNCRDR_H__

extern const AMOVIESETUP_FILTER sudAsyncRdr;

//
// AsyncRdr
//
// Defines a file source filter.
//
// This filter (CAsyncReader) supports IBaseFilter and IFileSourceFilter interfaces from the
// filter object itself. It has a single output pin (CAsyncOutputPin)
// which supports IPin and IAsyncReader.
//
// This filter is essentially a wrapper for the CAsyncFile class that does
// all the work.
//


// the filter class (defined below)
class CAsyncReader;


// the output pin class
class CAsyncOutputPin
  : public IAsyncReader,
    public CBasePin
{
protected:
    CAsyncReader* m_pReader;
    CAsyncFile * m_pFile;

    //  This is set every time we're asked to return an IAsyncReader
    //  interface
    //  This allows us to know if the downstream pin can use
    //  this transport, otherwise we can hook up to things like the
    //  dump filter and nothing happens
    BOOL         m_bQueriedForAsyncReader;

    HRESULT InitAllocator(IMemAllocator **ppAlloc);

public:
    // constructor and destructor
    CAsyncOutputPin(
        HRESULT * phr,
	CAsyncReader *pReader,
	CAsyncFile *pFile,
        CCritSec * pLock);

    ~CAsyncOutputPin();

    // --- CUnknown ---

    // need to expose IAsyncReader
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void**);

    // --- CBasePin methods ---

    // return the types we prefer - this will return the known
    // file type
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // can we support this type?
    HRESULT CheckMediaType(const CMediaType* pType);

    // Clear the flag so we see if IAsyncReader is queried for
    HRESULT CheckConnect(IPin *pPin)
    {
        m_bQueriedForAsyncReader = FALSE;
        return CBasePin::CheckConnect(pPin);
    }

    // See if it was asked for
    HRESULT CompleteConnect(IPin *pReceivePin)
    {
        if (m_bQueriedForAsyncReader) {
            return CBasePin::CompleteConnect(pReceivePin);
        } else {
            return VFW_E_NO_TRANSPORT;
        }
    }

    // --- IAsyncReader methods ---
    // pass in your preferred allocator and your preferred properties.
    // method returns the actual allocator to be used. Call GetProperties
    // on returned allocator to learn alignment and prefix etc chosen.
    // this allocator will be not be committed and decommitted by
    // the async reader, only by the consumer.
    STDMETHODIMP RequestAllocator(
                      IMemAllocator* pPreferred,
                      ALLOCATOR_PROPERTIES* pProps,
                      IMemAllocator ** ppActual);

    // queue a request for data.
    // media sample start and stop times contain the requested absolute
    // byte position (start inclusive, stop exclusive).
    // may fail if sample not obtained from agreed allocator.
    // may fail if start/stop position does not match agreed alignment.
    // samples allocated from source pin's allocator may fail
    // GetPointer until after returning from WaitForNext.
    STDMETHODIMP Request(
                     IMediaSample* pSample,
                     DWORD_PTR dwUser);	        // user context

    // block until the next sample is completed or the timeout occurs.
    // timeout (millisecs) may be 0 or INFINITE. Samples may not
    // be delivered in order. If there is a read error of any sort, a
    // notification will already have been sent by the source filter,
    // and STDMETHODIMP will be an error.
    STDMETHODIMP WaitForNext(
                      DWORD dwTimeout,
                      IMediaSample** ppSample,  // completed sample
                      DWORD_PTR * pdwUser);		// user context

    // sync read of data. Sample passed in must have been acquired from
    // the agreed allocator. Start and stop position must be aligned.
    // equivalent to a Request/WaitForNext pair, but may avoid the
    // need for a thread on the source filter.
    STDMETHODIMP SyncReadAligned(
                      IMediaSample* pSample);


    // sync read. works in stopped state as well as run state.
    // need not be aligned. Will fail if read is beyond actual total
    // length.
    STDMETHODIMP SyncRead(
                      LONGLONG llPosition,	// absolute file position
                      LONG lLength,		// nr bytes required
                      BYTE* pBuffer);		// write data here

    // return total length of stream, and currently available length.
    // reads for beyond the available length but within the total length will
    // normally succeed but may block for a long period.
    STDMETHODIMP Length(
                      LONGLONG* pTotal,
                      LONGLONG* pAvailable);

    // cause all outstanding reads to return, possibly with a failure code
    // (VFW_E_TIMEOUT) indicating they were cancelled.
    // these are defined on IAsyncReader and IPin
    STDMETHODIMP BeginFlush(void);
    STDMETHODIMP EndFlush(void);

};


//
// The filter object itself. Supports IBaseFilter through
// CBaseFilter and also IFileSourceFilter directly in this object

class CAsyncReader : public CBaseFilter, public IFileSourceFilter
{
    // filter-wide lock
    CCritSec m_csFilter;

    // all i/o done here
    CAsyncFile m_file;

    // our output pin
    CAsyncOutputPin m_OutputPin;

    LPOLESTR   	          m_pFileName; // null until loaded
    CMediaType            m_mt;        // type loaded with

public:
		
    // construction / destruction

    static CUnknown *CreateInstance(LPUNKNOWN, HRESULT *);
    CAsyncReader(
        TCHAR *pName,
        LPUNKNOWN pUnk,
        HRESULT *phr);
    ~CAsyncReader();



    // -- CUnknown methods --

    // we export IFileSourceFilter plus whatever is in CBaseFilter
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void **);

    // -- IFileSourceFilter methods ---

    STDMETHODIMP Load(LPCOLESTR pszFileName, const AM_MEDIA_TYPE *mt);
    STDMETHODIMP GetCurFile(LPOLESTR * ppszFileName, AM_MEDIA_TYPE *mt);

    // --- CBaseFilter methods ---
    int GetPinCount();
    CBasePin *GetPin(int n);

    // --- Access our media type
    const CMediaType *LoadType() const
    {
        return &m_mt;
    }
};



#endif //__ASYNCRDR_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\url\urlrdr.h ===
// Copyright (c) 1996 - 1999  Microsoft Corporation.  All Rights Reserved.

#ifndef __URLRDR_H__
#define __URLRDR_H__

extern const AMOVIESETUP_FILTER sudURLRdr;

//
// AsyncRdr
//
// Defines a file source filter.
//
// This filter (CURLReader) supports IBaseFilter and IFileSourceFilter interfaces from the
// filter object itself. It has a single output pin (CURLOutputPin)
// which supports IPin and IAsyncReader.
//



// the filter class (defined below)
class CURLReader;


class CURLCallback : public IBindStatusCallback, public CUnknown, public IAuthenticate, public IWindowForBindingUI
{
public:
    CURLCallback(HRESULT *phr, CURLReader *pReader);

    // need to expose IBindStatusCallback
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void**);

    // --- IBindStatusCallback methods ---

    STDMETHODIMP    OnStartBinding(DWORD grfBSCOption, IBinding* pbinding);
    STDMETHODIMP    GetPriority(LONG* pnPriority);
    STDMETHODIMP    OnLowResource(DWORD dwReserved);
    STDMETHODIMP    OnProgress(ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode,
                        LPCWSTR pwzStatusText);
    STDMETHODIMP    OnStopBinding(HRESULT hrResult, LPCWSTR szError);
    STDMETHODIMP    GetBindInfo(DWORD* pgrfBINDF, BINDINFO* pbindinfo);
    STDMETHODIMP    OnDataAvailable(DWORD grfBSCF, DWORD dwSize, FORMATETC *pfmtetc,
                        STGMEDIUM* pstgmed);
    STDMETHODIMP    OnObjectAvailable(REFIID riid, IUnknown* punk);

    // --- IAuthenticate methods ---
    STDMETHODIMP    Authenticate(HWND *phwnd, LPWSTR *pszUserName, LPWSTR *pszPassword);

    // --- IWindowForBindingUI methods ---
    STDMETHODIMP    GetWindow(REFGUID guidReason, HWND *phwnd);


    CURLReader *m_pReader;
};

// the output pin class
class CURLOutputPin
  : public IAsyncReader,
    public CBasePin
{
protected:
    CURLReader* m_pReader;

    //  This is set every time we're asked to return an IAsyncReader
    //  interface
    //  This allows us to know if the downstream pin can use
    //  this transport, otherwise we can hook up to thinks like the
    //  dump filter and nothing happens
    BOOL         m_bQueriedForAsyncReader;

    HRESULT InitAllocator(IMemAllocator **ppAlloc);

public:
    // constructor and destructor
    CURLOutputPin(
        HRESULT * phr,
        CURLReader *pReader,
        CCritSec * pLock);

    ~CURLOutputPin();

    // --- CUnknown ---

    // need to expose IAsyncReader
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void**);

    // --- CBasePin methods ---

    // return the types we prefer - this will return the known
    // file type
    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);

    // can we support this type?
    HRESULT CheckMediaType(const CMediaType* pType);

    // Clear the flag so we see if IAsyncReader is queried for
    HRESULT CheckConnect(IPin *pPin)
    {
        m_bQueriedForAsyncReader = FALSE;
        return CBasePin::CheckConnect(pPin);
    }

    // See if it was asked for
    HRESULT CompleteConnect(IPin *pReceivePin)
    {
        if (m_bQueriedForAsyncReader) {
            return CBasePin::CompleteConnect(pReceivePin);
        } else {
            return VFW_E_NO_TRANSPORT;
        }
    }

    // --- IAsyncReader methods ---
    // pass in your preferred allocator and your preferred properties.
    // method returns the actual allocator to be used. Call GetProperties
    // on returned allocator to learn alignment and prefix etc chosen.
    // this allocator will be not be committed and decommitted by
    // the async reader, only by the consumer.
    STDMETHODIMP RequestAllocator(
                      IMemAllocator* pPreferred,
                      ALLOCATOR_PROPERTIES* pProps,
                      IMemAllocator ** ppActual);

    // queue a request for data.
    // media sample start and stop times contain the requested absolute
    // byte position (start inclusive, stop exclusive).
    // may fail if sample not obtained from agreed allocator.
    // may fail if start/stop position does not match agreed alignment.
    // samples allocated from source pin's allocator may fail
    // GetPointer until after returning from WaitForNext.
    STDMETHODIMP Request(
                     IMediaSample* pSample,
                     DWORD_PTR dwUser);             // user context

    // block until the next sample is completed or the timeout occurs.
    // timeout (millisecs) may be 0 or INFINITE. Samples may not
    // be delivered in order. If there is a read error of any sort, a
    // notification will already have been sent by the source filter,
    // and STDMETHODIMP will be an error.
    STDMETHODIMP WaitForNext(
                      DWORD dwTimeout,
                      IMediaSample** ppSample,  // completed sample
                      DWORD_PTR * pdwUser);         // user context

    // sync read of data. Sample passed in must have been acquired from
    // the agreed allocator. Start and stop position must be aligned.
    // equivalent to a Request/WaitForNext pair, but may avoid the
    // need for a thread on the source filter.
    STDMETHODIMP SyncReadAligned(
                      IMediaSample* pSample);


    // sync read. works in stopped state as well as run state.
    // need not be aligned. Will fail if read is beyond actual total
    // length.
    STDMETHODIMP SyncRead(
                      LONGLONG llPosition,      // absolute file position
                      LONG lLength,             // nr bytes required
                      BYTE* pBuffer);           // write data here

    // return total length of stream, and currently available length.
    // reads for beyond the available length but within the total length will
    // normally succeed but may block for a long period.
    STDMETHODIMP Length(
                      LONGLONG* pTotal,
                      LONGLONG* pAvailable);

    // cause all outstanding reads to return, possibly with a failure code
    // (VFW_E_TIMEOUT) indicating they were cancelled.
    // these are defined on IAsyncReader and IPin
    STDMETHODIMP BeginFlush(void);
    STDMETHODIMP EndFlush(void);

};


class CReadRequest
{
public:
    IMediaSample *      m_pSample;
    DWORD_PTR           m_dwUser;
};


//
// The filter object itself. Supports IBaseFilter through
// CBaseFilter and also IFileSourceFilter directly in this object

class CURLReader : public CBaseFilter,
		public IFileSourceFilter,
		public IPersistMoniker,
		public IAMOpenProgress
	        DYNLINKURLMON
{
    friend class CURLCallback;

    // filter-wide lock
    CCritSec m_csFilter;

    // all i/o done here
    IMoniker*            m_pmk;
    IBindCtx*            m_pbc;
    HRESULT              m_hrBinding;
    BOOL                 m_fRegisteredCallback;
    IBinding            *m_pbinding;
    BOOL                 m_bAbort; // abort has been requested (via IAMOpenProgress)
                                   // reset by ResetAbort at start of read loop

    CURLCallback        *m_pCallback;
    IBindStatusCallback* m_pbsc;


    IMoniker*            m_pmkPassedIn;
    IBindCtx*            m_pbcPassedIn;

    DWORD                m_dwCodePage;
    
public:
    BOOL                 m_fBindingFinished;
    ULONG                m_totalLengthGuess;
    ULONG                m_totalSoFar;
    BOOL                 m_bFlushing;
    BOOL                 m_bWaiting;

    IStream*             m_pstm;
    CCritSec             m_csLists;
    CGenericList<CReadRequest>  m_pending;
    CAMEvent             m_evRequests;
    CAMEvent             m_evDataAvailable;
    CAMEvent             m_evClose;

    IGraphBuilder*       m_pGB;

private:
    // our output pin
    CURLOutputPin m_OutputPin;

    LPOLESTR              m_pFileName; // null until loaded
    CMediaType            m_mt;        // type loaded with


    CAMEvent m_evKillThread;       // set when thread should exit
    CAMEvent m_evThreadReady;      // set when thread has opened stream
    HANDLE m_hThread;


    // start the thread
    HRESULT StartThread(void);

    // stop the thread and close the handle
    HRESULT CloseThread(void);

    // initial static thread proc calls ThreadProc with DWORD
    // param as this
    static DWORD InitialThreadProc(LPVOID pv) {
        CURLReader * pThis = (CURLReader*) pv;
        return pThis->ThreadProc();
    };

    // initial static thread proc calls ThreadProc with DWORD
    // param as this
    static DWORD FinalThreadProc(LPVOID pv) {
        CURLReader * pThis = (CURLReader*) pv;
        return pThis->ThreadProcEnd();
    };

    DWORD ThreadProc(void);

    DWORD ThreadProcEnd(void);

    IAMMainThread *m_pMainThread;

public:

    // construction / destruction

    static CUnknown *CreateInstance(LPUNKNOWN, HRESULT *);
    CURLReader(
        TCHAR *pName,
        LPUNKNOWN pUnk,
        HRESULT *phr);
    ~CURLReader();



    // -- CUnknown methods --

    // we export IFileSourceFilter plus whatever is in CBaseFilter
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void **);

    // -- IFileSourceFilter methods ---

    STDMETHODIMP Load(LPCOLESTR pszFileName, const AM_MEDIA_TYPE *mt);
    STDMETHODIMP GetCurFile(LPOLESTR * ppszFileName, AM_MEDIA_TYPE *mt);

    // --- CBaseFilter methods ---
    int GetPinCount();
    CBasePin *GetPin(int n);

    DWORD       m_cbOld;

    HRESULT LoadInternal(const AM_MEDIA_TYPE *pmt);

    HRESULT StartDownload();

    // IPersistMoniker methods....
    STDMETHOD(GetClassID)(CLSID *pClassID)
            { return CBaseFilter::GetClassID(pClassID); };

    STDMETHOD(IsDirty)() {return S_FALSE; };

    STDMETHOD(Load)(BOOL fFullyAvailable,
                   IMoniker *pimkName,
                   LPBC pibc,
                   DWORD grfMode);

    STDMETHOD(Save)(IMoniker *pimkName,
                     LPBC pbc,
                     BOOL fRemember) { return E_NOTIMPL; };

    STDMETHOD(SaveCompleted)(IMoniker *pimkName,
                             LPBC pibc) { return E_NOTIMPL; };

    STDMETHOD(GetCurMoniker)(IMoniker **ppimkName) { return E_NOTIMPL; };

    // --- IAMOpenProgress method ---

    STDMETHODIMP QueryProgress(LONGLONG* pllTotal, LONGLONG* pllCurrent);
    STDMETHODIMP AbortOperation();
    void ResetAbort();
    BOOL CURLReader::Aborting();

    // --- Access our media type
    const CMediaType *LoadType() const
    {
        return &m_mt;
    }
};


class CPersistMoniker : public CUnknown,
			public IPersistMoniker,
			public IPersistFile
{
private:
    IGraphBuilder   *   pGB;    // kept without owning a refcount

protected:
    ~CPersistMoniker();
    CPersistMoniker(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr);

public:
        DECLARE_IUNKNOWN

    static CUnknown *CreateInstance(LPUNKNOWN pUnk, HRESULT *phr);

    STDMETHODIMP NonDelegatingQueryInterface(REFIID iid, void ** ppv);

    STDMETHOD(GetClassID)(CLSID *pClassID) // !!!
            { *pClassID = CLSID_PersistMonikerPID; return S_OK; };

    STDMETHOD(IsDirty)() {return S_FALSE; };

    STDMETHOD(Load)(BOOL fFullyAvailable,
                   IMoniker *pimkName,
                   LPBC pibc,
                   DWORD grfMode);

    STDMETHOD(Save)(IMoniker *pimkName,
                     LPBC pbc,
                     BOOL fRemember) { return E_NOTIMPL; };

    STDMETHOD(SaveCompleted)(IMoniker *pimkName,
                             LPBC pibc) { return E_NOTIMPL; };

    STDMETHOD(GetCurMoniker)(IMoniker **ppimkName) { return E_NOTIMPL; };

    // IPersistFile methods
    STDMETHOD(Load) (LPCOLESTR pszFileName, DWORD dwMode);

    STDMETHOD(Save) (LPCOLESTR pszFileName, BOOL fRemember) { return E_NOTIMPL; };

    STDMETHOD(SaveCompleted) (LPCOLESTR pszFileName) { return E_NOTIMPL; };

    STDMETHOD(GetCurFile) (LPOLESTR __RPC_FAR *ppszFileName) { return E_NOTIMPL; };

private:
    HRESULT GetCanonicalizedURL(IMoniker *pimkName, LPBC, LPOLESTR *ppwstr, BOOL *pfUseFilename);


};

#endif //__URLRDR_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\code\asyncrdr.cpp ===
// Copyright (c) 1996 - 1999  Microsoft Corporation.  All Rights Reserved.


//
// Implementation of file source filter methods and output pin methods for
// CAsyncReader and CAsyncOutputPin
//

#include <streams.h>
#include "asyncio.h"
#include "asyncrdr.h"
#include <ftype.h>

//
// setup data
//

const AMOVIESETUP_MEDIATYPE
sudAsyncOpTypes = { &MEDIATYPE_Stream     // clsMajorType
                  , &MEDIASUBTYPE_NULL }; // clsMinorType

const AMOVIESETUP_PIN
sudAsyncOp = { L"Output"          // strName
             , FALSE              // bRendered
             , TRUE               // bOutput
             , FALSE              // bZero
             , FALSE              // bMany
             , &CLSID_NULL        // clsConnectsToFilter
             , NULL               // strConnectsToPin
             , 1                  // nTypes
             , &sudAsyncOpTypes };  // lpTypes

const AMOVIESETUP_FILTER
sudAsyncRdr = { &CLSID_AsyncReader      // clsID
              , L"File Source (Async.)" // strName
              , MERIT_UNLIKELY          // dwMerit
              , 1                       // nPins
              , &sudAsyncOp };            // lpPin

#ifdef FILTER_DLL
/* List of class IDs and creator functions for the class factory. This
   provides the link between the OLE entry point in the DLL and an object
   being created. The class factory will call the static CreateInstance
   function when it is asked to create a CLSID_FileSource object */

CFactoryTemplate g_Templates[1] = {
    { L"File Source (Async.)"
    , &CLSID_AsyncReader
    , CAsyncReader::CreateInstance
    , NULL
    , &sudAsyncRdr }
};

int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

// exported entry points for registration and
// unregistration (in this case they only call
// through to default implmentations).
//
STDAPI DllRegisterServer()
{
  return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
  return AMovieDllRegisterServer2( FALSE );
}
#endif

/* Create a new instance of this class */

CUnknown *CAsyncReader::CreateInstance(LPUNKNOWN pUnk, HRESULT *phr)
{
    /*  DLLEntry does the right thing with the return code and
        returned value on failure
    */
    return new CAsyncReader(NAME("Async Reader"), pUnk, phr);
}





// --- CAsyncOutputPin implementation ---

CAsyncOutputPin::CAsyncOutputPin(
    HRESULT * phr,
    CAsyncReader *pReader,
    CAsyncFile *pFile,
    CCritSec * pLock)
  : CBasePin(
	NAME("Async output pin"),
	pReader,
	pLock,
	phr,
	L"Output",
	PINDIR_OUTPUT),
    m_pReader(pReader),
    m_pFile(pFile)
{
    m_bTryMyTypesFirst = true;
}

CAsyncOutputPin::~CAsyncOutputPin()
{
}

STDMETHODIMP
CAsyncOutputPin::NonDelegatingQueryInterface(REFIID riid, void** ppv)
{
    if (riid == IID_IAsyncReader) {
        m_bQueriedForAsyncReader = TRUE;
	return GetInterface((IAsyncReader*) this, ppv);
    } else {
	return CBasePin::NonDelegatingQueryInterface(riid, ppv);
    }
}

HRESULT
CAsyncOutputPin::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    if (iPosition == 0) {
        *pMediaType = *m_pReader->LoadType();
    } else if (iPosition == 1) {
        pMediaType->majortype = MEDIATYPE_Stream;
        ASSERT(pMediaType->subtype == GUID_NULL);
    } else {
	return VFW_S_NO_MORE_ITEMS;
    }
    return S_OK;
}

HRESULT
CAsyncOutputPin::CheckMediaType(const CMediaType* pType)
{
    CAutoLock lck(m_pLock);

    /*  We treat MEDIASUBTYPE_NULL subtype as a wild card */
    /*  Also we accept any subtype except our bogus wild card subtype */
    if (m_pReader->LoadType()->majortype == pType->majortype &&
        (pType->subtype != GUID_NULL || m_pReader->LoadType()->subtype == GUID_NULL)) {
	return S_OK;
    }
    return S_FALSE;
}

HRESULT
CAsyncOutputPin::InitAllocator(IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;
    CMemAllocator *pMemObject = NULL;

    /* Create a default memory allocator */

    pMemObject = new CMemAllocator(NAME("Base memory allocator"),NULL, &hr);
    if (pMemObject == NULL) {
	return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
	delete pMemObject;
	return hr;
    }

    /* Get a reference counted IID_IMemAllocator interface */

    hr = pMemObject->QueryInterface(IID_IMemAllocator,(void **)ppAlloc);
    if (FAILED(hr)) {
	delete pMemObject;
	return E_NOINTERFACE;
    }
    ASSERT(*ppAlloc != NULL);
    return NOERROR;
}

// we need to return an addrefed allocator, even if it is the preferred
// one, since he doesn't know whether it is the preferred one or not.
STDMETHODIMP
CAsyncOutputPin::RequestAllocator(
    IMemAllocator* pPreferred,
    ALLOCATOR_PROPERTIES* pProps,
    IMemAllocator ** ppActual)
{
    // we care about alignment but nothing else
    if (!pProps->cbAlign || !m_pFile->IsAligned(pProps->cbAlign)) {
       m_pFile->Alignment(&pProps->cbAlign);
    }
    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr;
    if (pPreferred) {
	hr = pPreferred->SetProperties(pProps, &Actual);
	if (SUCCEEDED(hr) && m_pFile->IsAligned(Actual.cbAlign)) {
            pPreferred->AddRef();
	    *ppActual = pPreferred;
            return S_OK;
        }
    }

    // create our own allocator
    IMemAllocator* pAlloc;
    hr = InitAllocator(&pAlloc);
    if (FAILED(hr)) {
        return hr;
    }

    //...and see if we can make it suitable
    hr = pAlloc->SetProperties(pProps, &Actual);
    if (SUCCEEDED(hr) && m_pFile->IsAligned(Actual.cbAlign)) {
        // we need to release our refcount on pAlloc, and addref
        // it to pass a refcount to the caller - this is a net nothing.
        *ppActual = pAlloc;
        return S_OK;
    }

    // failed to find a suitable allocator
    pAlloc->Release();

    // if we failed because of the IsAligned test, the error code will
    // not be failure
    if (SUCCEEDED(hr)) {
        hr = VFW_E_BADALIGN;
    }
    return hr;
}


// queue an aligned read request. call WaitForNext to get
// completion.
STDMETHODIMP
CAsyncOutputPin::Request(
    IMediaSample* pSample,
    DWORD_PTR dwUser)	        // user context
{
    REFERENCE_TIME tStart, tStop;
    HRESULT hr = pSample->GetTime(&tStart, &tStop);
    if (FAILED(hr)) {
	return hr;
    }

    LONGLONG llPos = tStart / UNITS;
    LONG lLength = (LONG) ((tStop - tStart) / UNITS);

    LONGLONG llTotal;
    hr = m_pFile->Length(&llTotal);
    if (llPos >= llTotal)
    {
	DbgLog((LOG_ERROR, 1, TEXT("asyncrdr: reading past eof")));
	return HRESULT_FROM_WIN32(ERROR_HANDLE_EOF);
    }
    if (llPos + lLength > llTotal) {

        // the end needs to be aligned, but may have been aligned
        // on a coarser alignment.
        LONG lAlign;
        m_pFile->Alignment(&lAlign);
        llTotal = (llTotal + lAlign -1) & ~(lAlign-1);

        if (llPos + lLength > llTotal) {
            lLength = (LONG) (llTotal - llPos);

            // must be reducing this!
            ASSERT((llTotal * UNITS) <= tStop);
            tStop = llTotal * UNITS;
            pSample->SetTime(&tStart, &tStop);
        }
    }




    BYTE* pBuffer;
    hr = pSample->GetPointer(&pBuffer);
    if (FAILED(hr)) {
	return hr;
    }

    return m_pFile->Request(
			llPos,
			lLength,
			pBuffer,
			(LPVOID)pSample,
			dwUser);
}

// sync-aligned request. just like a request/waitfornext pair.
STDMETHODIMP
CAsyncOutputPin::SyncReadAligned(
                  IMediaSample* pSample)
{
    REFERENCE_TIME tStart, tStop;
    HRESULT hr = pSample->GetTime(&tStart, &tStop);
    if (FAILED(hr)) {
	return hr;
    }

    LONGLONG llPos = tStart / UNITS;
    LONG lLength = (LONG) ((tStop - tStart) / UNITS);

    LONGLONG llTotal;
    hr = m_pFile->Length(&llTotal);
    if (llPos + lLength > llTotal) {

        // the end needs to be aligned, but may have been aligned
        // on a coarser alignment.
        LONG lAlign;
        m_pFile->Alignment(&lAlign);
        llTotal = (llTotal + lAlign -1) & ~(lAlign-1);

        if (llPos + lLength > llTotal) {
            lLength = (LONG) (llTotal - llPos);

            // must be reducing this!
            ASSERT((llTotal * UNITS) <= tStop);
            tStop = llTotal * UNITS;
            pSample->SetTime(&tStart, &tStop);
        }
    }




    BYTE* pBuffer;
    hr = pSample->GetPointer(&pBuffer);
    if (FAILED(hr)) {
	return hr;
    }

    LONG cbActual;
    hr = m_pFile->SyncReadAligned(
			llPos,
			lLength,
			pBuffer,
                        &cbActual
                        );

    if (SUCCEEDED(hr)) {
        pSample->SetActualDataLength(cbActual);
    }

    return hr;
}


//
// collect the next ready sample
STDMETHODIMP
CAsyncOutputPin::WaitForNext(
    DWORD dwTimeout,
    IMediaSample** ppSample,  // completed sample
    DWORD_PTR * pdwUser)		// user context
{
    LONG cbActual;

    IMediaSample* pSample = NULL;
    HRESULT hr =  m_pFile->WaitForNext(
			    dwTimeout,
			    (LPVOID*) &pSample,
			    pdwUser,
                            &cbActual
                            );
    if (SUCCEEDED(hr)) {
        // this function should return an error code or S_OK or S_FALSE.
        // Sometimes in low-memory conditions the underlying filesystem code will
        // return success codes that should be errors.
        if ((S_OK != hr) && (S_FALSE != hr)) {
            ASSERT(FAILED(hr));
            hr = E_FAIL;
        } else {
            pSample->SetActualDataLength(cbActual);
        }
    }
    *ppSample = pSample;


    return hr;
}


//
// synchronous read that need not be aligned.
STDMETHODIMP
CAsyncOutputPin::SyncRead(
    LONGLONG llPosition,	// absolute file position
    LONG lLength,		// nr bytes required
    BYTE* pBuffer)		// write data here
{
    return m_pFile->SyncRead(llPosition, lLength, pBuffer);
}

// return the length of the file, and the length currently
// available locally. We only support locally accessible files,
// so they are always the same
STDMETHODIMP
CAsyncOutputPin::Length(
    LONGLONG* pTotal,
    LONGLONG* pAvailable)
{
    HRESULT hr = m_pFile->Length(pTotal);
    *pAvailable = *pTotal;
    return hr;
}

STDMETHODIMP
CAsyncOutputPin::BeginFlush(void)
{
    return m_pFile->BeginFlush();
}

STDMETHODIMP
CAsyncOutputPin::EndFlush(void)
{
    return m_pFile->EndFlush();
}




// --- CAsyncReader implementation ---

#pragma warning(disable:4355)

CAsyncReader::CAsyncReader(
    TCHAR *pName,
    LPUNKNOWN pUnk,
    HRESULT *phr)
  : CBaseFilter(
      	pName,
	pUnk,
	&m_csFilter,
	CLSID_AsyncReader
    ),
    m_OutputPin(
	phr,
	this,
	&m_file,
	&m_csFilter),
    m_pFileName(NULL)
{

}

CAsyncReader::~CAsyncReader()
{
    if (m_pFileName) {
	delete [] m_pFileName;
    }
}

STDMETHODIMP
CAsyncReader::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IFileSourceFilter) {
	return GetInterface((IFileSourceFilter*) this, ppv);
    } else {
	return CBaseFilter::NonDelegatingQueryInterface(riid, ppv);
    }
}


//  Load a (new) file

HRESULT
CAsyncReader::Load(
LPCOLESTR lpwszFileName, const AM_MEDIA_TYPE *pmt)
{
    CheckPointer(lpwszFileName, E_POINTER);

    // lstrlenW is one of the few Unicode functions that works on win95
    int cch = lstrlenW(lpwszFileName) + 1;
    TCHAR *lpszFileName;
#ifndef UNICODE
    lpszFileName = new char[cch * 2];
    if (!lpszFileName) {
	return E_OUTOFMEMORY;
    }
    WideCharToMultiByte(GetACP(), 0, lpwszFileName, -1,
			lpszFileName, cch * 2, NULL, NULL);
#else
    lpszFileName = (TCHAR *) lpwszFileName;
#endif
    CAutoLock lck(&m_csFilter);

    /*  Check the file type */
    CMediaType cmt;
    if (NULL == pmt) {
        GUID Type, Subtype, clsid;
        /*  If no media type given find out what it is */
        HRESULT hr = GetMediaTypeFile(lpszFileName, &Type, &Subtype, &clsid);

        /*  We ignore the issue that we may not be the preferred source
            filter for this content so we dont' look at clsid
        */
        if (FAILED(hr)) {
#ifndef UNICODE
	    delete [] lpszFileName;
#endif
            return hr;
        }
        cmt.SetType(&Type);
        cmt.SetSubtype(&Subtype);
    } else {
        cmt = *pmt;
    }

    HRESULT hr = m_file.Open(lpszFileName);

#ifndef UNICODE
    delete [] lpszFileName;
#endif

    if (SUCCEEDED(hr)) {
        m_pFileName = new WCHAR[cch];
        if (m_pFileName!=NULL) {
	    CopyMemory(m_pFileName, lpwszFileName, cch*sizeof(WCHAR));
        }
        // this is not a simple assignment... pointers and format
        // block (if any) are intelligently copied
	m_mt = cmt;

        /*  Work out file type */
        cmt.bTemporalCompression = TRUE;	       //???
        LONG lAlign;
        m_file.Alignment(&lAlign);
        cmt.lSampleSize = lAlign;

        /*  Create the output pin types, supporting 2 types */
        m_OutputPin.SetMediaType(&cmt);
	hr = S_OK;
    }

    return hr;
}

// Modelled on IPersistFile::Load
// Caller needs to CoTaskMemFree or equivalent.

STDMETHODIMP
CAsyncReader::GetCurFile(
    LPOLESTR * ppszFileName,
    AM_MEDIA_TYPE *pmt)
{
    CheckPointer(ppszFileName, E_POINTER);
    *ppszFileName = NULL;
    if (m_pFileName!=NULL) {
	DWORD n = sizeof(WCHAR)*(1+lstrlenW(m_pFileName));

        *ppszFileName = (LPOLESTR) CoTaskMemAlloc( n );
        if (*ppszFileName!=NULL) {
              CopyMemory(*ppszFileName, m_pFileName, n);
        }
    }

    if (pmt!=NULL) {
        CopyMediaType(pmt, &m_mt);
    }

    return NOERROR;
}

int
CAsyncReader::GetPinCount()
{
    // we have no pins unless we have been successfully opened with a
    // file name
    if (m_pFileName) {
	return 1;
    } else {
	return 0;
    }
}

CBasePin *
CAsyncReader::GetPin(int n)
{
    if ((GetPinCount() > 0) &&
	(n == 0)) {
	return &m_OutputPin;
    } else {
	return NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\asyncrdr\url\urlrdr.cpp ===
// Copyright (c) 1996 - 1999  Microsoft Corporation.  All Rights Reserved.


//
// Implementation of file source filter methods and output pin methods for
// CURLReader and CURLOutputPin
//

#include <streams.h>

#ifdef FILTER_DLL
#include <initguid.h>
#endif

#include "urlmon.h"
#if _MSC_VER < 1100 && !defined(NT_BUILD)
#undef E_PENDING
#define E_PENDING 0x8000000AL   // messed up in our vc41 copy
#include "datapath.h"
#endif // vc5

#include "dynlink.h"
#include <ftype.h>
#include "..\..\filgraph\filgraph\distrib.h"
#include "..\..\filgraph\filgraph\rlist.h"
#include "..\..\filgraph\filgraph\filgraph.h"
#include "urlrdr.h"

#include <docobj.h> // SID_SContainerDispatch

//
// setup data
//

const AMOVIESETUP_MEDIATYPE
sudURLOpTypes = { &MEDIATYPE_Stream     // clsMajorType
                , &MEDIASUBTYPE_NULL }; // clsMinorType

const AMOVIESETUP_PIN
sudURLOp = { L"Output"          // strName
           , FALSE              // bRendered
           , TRUE               // bOutput
           , FALSE              // bZero
           , FALSE              // bMany
           , &CLSID_NULL        // clsConnectsToFilter
           , NULL               // strConnectsToPin
           , 1                  // nTypes
           , &sudURLOpTypes };  // lpTypes

const AMOVIESETUP_FILTER
sudURLRdr = { &CLSID_URLReader     // clsID
            , L"File Source (URL)" // strName
            , MERIT_UNLIKELY       // dwMerit
            , 1                    // nPins
            , &sudURLOp };         // lpPin

#ifdef FILTER_DLL
/* List of class IDs and creator functions for the class factory. This
   provides the link between the OLE entry point in the DLL and an object
   being created. The class factory will call the static CreateInstance
   function when it is asked to create a CLSID_FileSource object */

CFactoryTemplate g_Templates[] = {
    { L""
    , &CLSID_URLReader
    , CURLReader::CreateInstance
    , NULL
    , &sudURLRdr }
  ,
    { L"ActiveMovie IPersistMoniker PID"
    , &CLSID_PersistMonikerPID
    ,   CPersistMoniker::CreateInstance }
};

int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);

//
// exported entry points for registration and
// unregistration (in this case they only call
// through to default implmentations).
//

//
// needs to handle
// [HKEY_CLASSES_ROOT\http]
// "Source Filter"="{e436ebb6-524f-11ce-9f53-0020af0ba770}"
// .. somehow? --> think!
// (need a function that can be patched into
// Quartz.dll's DllRegisterServer - but factr put
// common stuff into a lib so Quartz.dll doesn;t
// end up with tonnes of setup junk in it!
//
// HRESULT
// URLSetup( BOOL bSetup )
// {
//    if( bSetup )
//    {
//      // setup!
//    }
//    else
//    {
//      // uninstall!
//    }
//

STDAPI DllRegisterServer()
{
  // HRESULT hr;
  // hr = ULRLSetup( TRUE );
  // if( SUCCESS(hr) )
  // etc...

  return AMovieDllRegisterServer2( TRUE );
}

STDAPI DllUnregisterServer()
{
  // HRESULT hr;
  // hr = ULRLSetup( TRUE );
  // if( SUCCESS(hr) )
  // etc...

  return AMovieDllRegisterServer2( FALSE );
}
#endif

/* Create a new instance of this class */

CUnknown *CURLReader::CreateInstance(LPUNKNOWN pUnk, HRESULT *phr)
{
    /*  DLLEntry does the right thing with the return code and
        returned value on failure
    */
    return new CURLReader(NAME("URL Reader"), pUnk, phr);
}



// --- CURLOutputPin implementation ---

CURLOutputPin::CURLOutputPin(
    HRESULT * phr,
    CURLReader *pReader,
    CCritSec * pLock)
  : CBasePin(
        NAME("Async output pin"),
        pReader,
        pLock,
        phr,
        L"Output",
        PINDIR_OUTPUT),
    m_pReader(pReader)
{

}

CURLOutputPin::~CURLOutputPin()
{
}


STDMETHODIMP
CURLOutputPin::NonDelegatingQueryInterface(REFIID riid, void** ppv)
{
    if (riid == IID_IAsyncReader) {
        m_bQueriedForAsyncReader = TRUE;
        return GetInterface((IAsyncReader*) this, ppv);
    } else {
        return CBasePin::NonDelegatingQueryInterface(riid, ppv);
    }
}

HRESULT
CURLOutputPin::GetMediaType(int iPosition, CMediaType *pMediaType)
{
    if (iPosition < 0) {
        return E_INVALIDARG;
    }
    if (iPosition > 0) {
        return VFW_S_NO_MORE_ITEMS;
    }
    *pMediaType = *m_pReader->LoadType();
    return S_OK;
}

HRESULT
CURLOutputPin::CheckMediaType(const CMediaType* pType)
{
    CAutoLock lck(m_pLock);

    /*  We treat MEDIASUBTYPE_NULL subtype as a wild card */
    if ((m_pReader->LoadType()->majortype == pType->majortype) &&
        (m_pReader->LoadType()->subtype == MEDIASUBTYPE_NULL ||
         m_pReader->LoadType()->subtype == pType->subtype)) {
            return S_OK;
    }
    return S_FALSE;
}

HRESULT
CURLOutputPin::InitAllocator(IMemAllocator **ppAlloc)
{
    HRESULT hr = NOERROR;
    *ppAlloc = NULL;
    CMemAllocator *pMemObject = NULL;

    /* Create a default memory allocator */

    pMemObject = new CMemAllocator(NAME("Base memory allocator"),NULL, &hr);
    if (pMemObject == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pMemObject;
        return hr;
    }

    /* Get a reference counted IID_IMemAllocator interface */

    hr = pMemObject->QueryInterface(IID_IMemAllocator,(void **)ppAlloc);
    if (FAILED(hr)) {
        delete pMemObject;
        return E_NOINTERFACE;
    }
    ASSERT(*ppAlloc != NULL);
    return NOERROR;
}

// we need to return an addrefed allocator, even if it is the preferred
// one, since he doesn't know whether it is the preferred one or not.
STDMETHODIMP
CURLOutputPin::RequestAllocator(
    IMemAllocator* pPreferred,
    ALLOCATOR_PROPERTIES* pProps,
    IMemAllocator ** ppActual)
{
    ALLOCATOR_PROPERTIES Actual;
    HRESULT hr;

    // this needs to be set otherwise MPEG splitter isn't happy
    if (pProps->cbAlign == 0)
        pProps->cbAlign = 1;

    if (pPreferred) {
        hr = pPreferred->SetProperties(pProps, &Actual);
        if (SUCCEEDED(hr)) {
            pPreferred->AddRef();
            *ppActual = pPreferred;
            return S_OK;
        }
    }

    // create our own allocator
    IMemAllocator* pAlloc;
    hr = InitAllocator(&pAlloc);
    if (FAILED(hr)) {
        return hr;
    }

    //...and see if we can make it suitable
    hr = pAlloc->SetProperties(pProps, &Actual);
    if (SUCCEEDED(hr)) {
        // we need to release our refcount on pAlloc, and addref
        // it to pass a refcount to the caller - this is a net nothing.
        *ppActual = pAlloc;
        return S_OK;
    }

    // failed to find a suitable allocator
    pAlloc->Release();

    return hr;
}


// queue an aligned read request. call WaitForNext to get
// completion.
STDMETHODIMP
CURLOutputPin::Request(
    IMediaSample* pSample,
    DWORD_PTR dwUser)               // user context
{
    REFERENCE_TIME tStart, tStop;
    HRESULT hr = pSample->GetTime(&tStart, &tStop);
    if (FAILED(hr)) {
        return hr;
    }

    LONGLONG llPos = tStart / UNITS;
    LONG lLength = (LONG) ((tStop - tStart) / UNITS);

    DbgLog((LOG_TRACE, 5, TEXT("URLOutput::Request(%x at %x)"),
            lLength, (DWORD) llPos));

    LONGLONG llTotal, llNow;
    hr = Length(&llTotal, &llNow);

    if ((llTotal >= llNow) && (llPos > llTotal)) {
        // are they reading past the end?
        // if so, fail.  This insures llPos fits in a LONG, by the way.
        return HRESULT_FROM_WIN32(ERROR_HANDLE_EOF);
    }

    if ((llTotal >= llNow) && (llPos + lLength > llTotal)) {
        lLength = (LONG) (llTotal - llPos);

        // must be reducing this!
        ASSERT((llTotal * UNITS) <= tStop);
        tStop = llTotal * UNITS;
        pSample->SetTime(&tStart, &tStop);
    }

    CAutoLock l(&m_pReader->m_csLists);

    if (m_pReader->m_bFlushing) {
        // If flushing, can't start any new requests.
        return VFW_E_WRONG_STATE;
    }

    CReadRequest *preq = new CReadRequest;

    if (NULL == preq ||
        NULL == m_pReader->m_pending.AddTail(preq)) {
        delete preq;
        return E_OUTOFMEMORY;
    }
    preq->m_dwUser = dwUser;
    preq->m_pSample = pSample;

    m_pReader->m_evRequests.Set();

    return S_OK;
}

// sync-aligned request. just like a request/waitfornext pair.
STDMETHODIMP
CURLOutputPin::SyncReadAligned(
                  IMediaSample* pSample)
{
    REFERENCE_TIME tStart, tStop;
    HRESULT hr = pSample->GetTime(&tStart, &tStop);
    if (FAILED(hr)) {
        return hr;
    }

    LONGLONG llPos = tStart / UNITS;
    LONG lLength = (LONG) ((tStop - tStart) / UNITS);

    LONGLONG llTotal, llNow;

    while (1) {
        if (m_pReader->m_bFlushing) {
            // !!!
            return VFW_E_WRONG_STATE;
        }

        if ((m_pReader->m_pGB &&
               m_pReader->m_pGB->ShouldOperationContinue() == S_FALSE))
            return E_ABORT;

        hr = Length(&llTotal, &llNow);
        if ((llTotal >= llNow) && (llPos + lLength > llTotal)) {
            lLength = (LONG) (llTotal - llPos);

            // must be reducing this!
            ASSERT((llTotal * UNITS) <= tStop);
            tStop = llTotal * UNITS;
            pSample->SetTime(&tStart, &tStop);
        }

        if (llPos + lLength <= llNow) {
            break;
        }

	// if download has been aborted, don't wait for new data, but
	// continue to return old data.
        if (m_pReader->Aborting())
            return E_ABORT;

        m_pReader->m_evDataAvailable.Wait(100);
        DbgLog((LOG_TRACE, 3, TEXT("Waiting, want to read up to %x but only at %x"),
                (DWORD) (llPos) + lLength, (DWORD) llNow));
    }

    BYTE* pBuffer;
    hr = pSample->GetPointer(&pBuffer);
    if (FAILED(hr)) {
        return hr;
    }

    LARGE_INTEGER li;
    li.QuadPart = llPos;
    hr = m_pReader->m_pstm->Seek(li, STREAM_SEEK_SET, NULL);

    ULONG lRead;
    if (SUCCEEDED(hr)) {
        hr = m_pReader->m_pstm->Read(pBuffer, lLength, &lRead);
    } else {
        lRead = 0;
    }

    DbgLog((LOG_TRACE, 5, TEXT("URLOutput::SyncReadAligned(%x at %x) returns %x, %x bytes read"),
            lLength, (DWORD) llPos, hr, lRead));

    pSample->SetActualDataLength(lRead);

    return hr;
}


//
// collect the next ready sample
//
// this is flawed now, in the sense that we always complete requests in order,
// which isn't really great--we should take requests in order as the data is ready....
STDMETHODIMP
CURLOutputPin::WaitForNext(
    DWORD dwTimeout,
    IMediaSample** ppSample,  // completed sample
    DWORD_PTR * pdwUser)            // user context
{
    HRESULT hr;

    CReadRequest* preq;

    *ppSample = NULL;
    *pdwUser = 0;

    m_pReader->m_evRequests.Wait(dwTimeout);

    {
        CAutoLock l(&m_pReader->m_csLists);

        preq = m_pReader->m_pending.RemoveHead();

        // force event set correctly if list now empty
        // or we're in the final stages of flushing
        // Note that during flushing the way it's supposed to work is that
        // everything is shoved on the Done list then the application is
        // supposed to pull until it gets nothing more
        //
        // Thus we should not set m_evDone unconditionally until everything
        // has moved to the done list which means we must wait until
        // cItemsOut is 0 (which is guaranteed by m_bWaiting being TRUE).

        if (m_pReader->m_pending.GetCount() == 0 &&
            (!m_pReader->m_bFlushing || m_pReader->m_bWaiting)) {
            m_pReader->m_evRequests.Reset();
        }
    }
    if (preq == NULL) {
        DbgLog((LOG_TRACE, 5, TEXT("URLOutput::WaitForNext [no requests yet]")));

        hr = VFW_E_TIMEOUT;
    } else {
        DbgLog((LOG_TRACE, 5, TEXT("URLOutput::WaitForNext [got request]")));

        hr = SyncReadAligned(preq->m_pSample);

        if (hr == E_PENDING)
            hr = VFW_E_TIMEOUT;

        // we have a request and we need to return it, even if we got an error.
        *pdwUser = preq->m_dwUser;
        *ppSample = preq->m_pSample;
        delete preq;
    }

    return hr;
}


//
// synchronous read that need not be aligned.
STDMETHODIMP
CURLOutputPin::SyncRead(
    LONGLONG llPos,             // absolute file position
    LONG lLength,               // nr bytes required
    BYTE* pBuffer)              // write data here
{
    CAutoLock l(&m_pReader->m_csLists);

    LONGLONG llTotal, llNow;

    if( lLength < 0 ) {
        return E_INVALIDARG;
    }

    while (1) {
        if (m_pReader->m_bFlushing) {
            // !!!
            return VFW_E_WRONG_STATE;
        }

        if ((m_pReader->m_pGB &&
               m_pReader->m_pGB->ShouldOperationContinue() == S_FALSE))
            return E_ABORT;

        HRESULT hr = Length(&llTotal, &llNow);
        if ((llTotal >= llNow) && (llPos + lLength > llTotal)) {
            if (llPos > llTotal) {
                return E_INVALIDARG;
            }
            lLength = (LONG) (llTotal - llPos);
        }

        if (llPos + lLength <= llNow)
            break;

	// if download has been aborted, don't wait for new data, but
	// continue to return old data.
        if (m_pReader->Aborting())
            return E_ABORT;

        {
            MSG Message;

            while (PeekMessage(&Message, NULL, 0, 0, TRUE))
            {
                TranslateMessage(&Message);
                DispatchMessage(&Message);
            }
        }

        m_pReader->m_evDataAvailable.Wait(50);
        DbgLog((LOG_TRACE, 3, TEXT("Waiting, want to (sync) read up to %x but only at %x"),
                (DWORD) (llPos) + lLength, (DWORD) llNow));
    }

    LARGE_INTEGER li;

    DbgLog((LOG_TRACE, 5, TEXT("URLOutput::SyncRead(%x at %x)"),
            lLength, (DWORD) llPos));

    li.QuadPart = llPos;
    HRESULT hr = m_pReader->m_pstm->Seek(li, STREAM_SEEK_SET, NULL);

    ULONG lRead = 0;
    if (SUCCEEDED(hr)) {

        hr = m_pReader->m_pstm->Read(pBuffer, lLength, &lRead);

        // ISequentialStream::Read() returns S_FALSE if "[t]he data could not 
        // be read from the stream object." (MSDN January 2002)
        if ((S_FALSE == hr) || (SUCCEEDED(hr) && (0 == lRead))) {
            hr = E_FAIL;
        }

        // We already reject negative lengths.
        ASSERT( lLength >= 0 );

        // IAsyncReader::SyncRead() returns S_FALSE if it "[r]etrieved fewer 
        // bytes than requested." (MSDN January 2002)
        if (lRead < (ULONG)lLength) {
            hr = S_FALSE;
        }
    }

    DbgLog((LOG_ERROR, 3, TEXT("URLOutput::SyncRead(%x at %x) returns %x, %x bytes read"),
            lLength, (DWORD) llPos, hr, lRead));

    return hr;
}

// return the length of the file, and the length currently available
// locally, based on the last IBindStatusCallback::OnDataAvailable() call.
STDMETHODIMP
CURLOutputPin::Length(
    LONGLONG* pTotal,
    LONGLONG* pAvailable)
{
    HRESULT hr = S_OK;
    *pTotal = m_pReader->m_totalLengthGuess;
    *pAvailable = m_pReader->m_totalSoFar;

    if (!m_pReader->m_fBindingFinished)
	hr = VFW_S_ESTIMATED;		// indicate to caller that we're not done yet

    DbgLog((LOG_TRACE, 1, TEXT("URLOutput::Length is %x, %x avail"), (DWORD) *pTotal, (DWORD) *pAvailable));

    return hr;
}

STDMETHODIMP
CURLOutputPin::BeginFlush(void)
{
    {
        m_pReader->m_bFlushing = TRUE;

        CAutoLock l(&m_pReader->m_csLists);

        m_pReader->m_evRequests.Set();

        m_pReader->m_bWaiting = m_pReader->m_pending.GetCount() != 0;
    }

    // !!!

    // !!! need to wait here for things to actually flush....
    // wait without holding critsec
    for (;;) {
        // hold critsec to check - but NOT during Sleep()
        {
            CAutoLock lock(&m_pReader->m_csLists);

            if (m_pReader->m_pending.GetCount() == 0) {

                // now we are sure that all outstanding requests are on
                // the done list and no more will be accepted
                m_pReader->m_bWaiting = FALSE;

                return S_OK;
            }
        }
        Sleep(1);
    }

    return S_OK;
}

STDMETHODIMP
CURLOutputPin::EndFlush(void)
{
    m_pReader->m_bFlushing = FALSE;

    if (m_pReader->m_pending.GetCount() > 0) {
        m_pReader->m_evRequests.Set();
    } else {
        m_pReader->m_evRequests.Reset();
    }

    return S_OK;
}




// --- CURLReader implementation ---

#pragma warning(disable:4355)

CURLReader::CURLReader(
    TCHAR *pName,
    LPUNKNOWN pUnk,
    HRESULT *phr)
  : CBaseFilter(
        pName,
        pUnk,
        &m_csFilter,
        CLSID_URLReader
    ),
    m_OutputPin(
        phr,
        this,
        &m_csFilter),
    m_pFileName(NULL),
    m_pmk(NULL),
    m_pbc(NULL),
    m_pmkPassedIn(NULL),
    m_pbcPassedIn(NULL),
    m_pbsc(NULL),
    m_pCallback(NULL),
    m_pstm(NULL),
    m_pending(NAME("sample list")),
    m_cbOld(0),
    m_pbinding(NULL),
    m_fBindingFinished(FALSE),
    m_hrBinding(S_OK),
    m_totalSoFar(0),
    m_totalLengthGuess(0),
    m_bFlushing(FALSE),
    m_bWaiting(FALSE),
    m_bAbort(FALSE),
    m_evRequests(TRUE),         // manual reset
    m_evDataAvailable(FALSE),   // auto-reset
    m_evThreadReady(TRUE),
    m_evKillThread(TRUE),
    m_hThread(NULL),
    m_fRegisteredCallback(FALSE),
    m_pMainThread(NULL)
{

}

CURLReader::~CURLReader()
{
    CloseThread();

    if (m_pFileName) {
        delete [] m_pFileName;
    }
}

STDMETHODIMP
CURLReader::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IFileSourceFilter) {
        return GetInterface((IFileSourceFilter*) this, ppv);
    } else if (riid == IID_IPersistMoniker) {
        return GetInterface((IPersistMoniker*) this, ppv);
    } else if (riid == IID_IAMOpenProgress) {
        return GetInterface((IAMOpenProgress*) this, ppv);
    } else {
        HRESULT hr = CBaseFilter::NonDelegatingQueryInterface(riid, ppv);

        if (FAILED(hr)) {
            DbgLog((LOG_TRACE, 3, TEXT("QI(something) failed")));
        }

        return hr;
    }
}


#include <tchar.h>
#include <winreg.h>
#include <creg.h>

/*  Sort out class ids */
#ifdef UNICODE
#define CLSIDFromText CLSIDFromString
#define TextFromGUID2 StringFromGUID2
#else

#ifdef FILTER_DLL
HRESULT CLSIDFromText(LPCSTR lpsz, LPCLSID pclsid)
{
    WCHAR sz[100];
    if (MultiByteToWideChar(GetACP(), 0, lpsz, -1, sz, 100) == 0) {
        return E_INVALIDARG;
    }
    return QzCLSIDFromString(sz, pclsid);
}
HRESULT TextFromGUID2(REFGUID refguid, LPSTR lpsz, int cbMax)
{
    WCHAR sz[100];

    HRESULT hr = QzStringFromGUID2(refguid, sz, 100);
    if (FAILED(hr)) {
        return hr;
    }
    if (WideCharToMultiByte(GetACP(), 0, sz, -1, lpsz, cbMax, NULL, NULL) == 0) {
        return E_INVALIDARG;
    }
    return S_OK;
}
#else
extern HRESULT CLSIDFromText(LPCSTR lpsz, LPCLSID pclsid);
#endif

#endif

/*  Mini class for extracting quadruplets from a string */

// A quadruplet appears to be of the form <offset><length><mask><data>
// with the four fields delimited by a space or a comma with as many extra spaces
// as you please, before or after any comma.
// offset and length appear to be decimal numbers.
// mask and data appear to be hexadecimal numbers.  The number of hex digits in
// mask and data must be double the value of length (so length is bytes).
// mask appears to be allowed to be missing (in which case it must have a comma
// before and after e.g. 0, 4, , 000001B3) A missing mask appear to represent
// a mask which is all FF i.e. 0, 4, FFFFFFFF, 000001B3

class CExtractQuadruplets
{
public:
    CExtractQuadruplets(LPCTSTR lpsz) : m_psz(lpsz), m_pMask(NULL), m_pData(NULL)
    {};
    ~CExtractQuadruplets() { delete [] m_pMask; delete [] m_pData; };

    inline int ReadInt(const TCHAR * &sz)
    {
	int i = 0;

	while (*sz && *sz >= TEXT('0') && *sz <= TEXT('9'))
	    i = i*10 + *sz++ - TEXT('0');

	return i;    	
    }


    // This appears to
    BOOL Next()
    {
        StripWhite();
        if (*m_psz == TEXT('\0')) {
            return FALSE;
        }
        /*  Convert offset and length from base 10 tchar */
        m_Offset = ReadInt(m_psz);
        SkipToNext();
        m_Len = ReadInt(m_psz);
        if (m_Len <= 0) {
            return FALSE;
        }
        SkipToNext();

        /*  Allocate space for the mask and data */
        if (m_pMask != NULL) {
            delete [] m_pMask;
            delete [] m_pData;
        }

        m_pMask = new BYTE[m_Len];
        m_pData = new BYTE[m_Len];
        if (m_pMask == NULL || m_pData == NULL) {
            delete [] m_pMask;
	    m_pMask = NULL;
            delete [] m_pData;
	    m_pData = NULL;
            return FALSE;
        }


        /*  Get the mask */
        for (int i = 0; i < m_Len; i++) {
            m_pMask[i] = ToHex();
        }
        SkipToNext();
        /*  Get the data */
        for (i = 0; i < m_Len; i++) {
            m_pData[i] = ToHex();
        }
        SkipToNext();
        return TRUE;
    };
    PBYTE   m_pMask;
    PBYTE   m_pData;
    LONG    m_Len;
    LONG    m_Offset;
private:

    // move m_psz to next non-space
    void StripWhite() { while (*m_psz == TEXT(' ')) m_psz++; };

    // move m_psz past any spaces and up to one comma
    void SkipToNext() { StripWhite();
                        if (*m_psz == TEXT(',')) {
                            m_psz++;
                            StripWhite();
                        }
                      };


    BOOL my_isdigit(TCHAR ch) { return (ch >= TEXT('0') && ch <= TEXT('9')); };
    BOOL my_isxdigit(TCHAR ch) { return my_isdigit(ch) ||
			    (ch >= TEXT('A') && ch <= TEXT('F')) ||
			    (ch >= TEXT('a') && ch <= TEXT('f')); };

    // very limited toupper: we know we're only going to call it on letters
    TCHAR my_toupper(TCHAR ch) { return ch & ~0x20; };

    // This appears to translate FROM hexadecimal characters TO packed binary !!!!!
    // It appears to operate on m_psz which it side-effects past characters it recognises
    // as hexadecimal.  It consumes up to two characters.
    // If it recognises no characters then it returns 0xFF.
    BYTE ToHex()
    {
        BYTE bMask = 0xFF;

        if (my_isxdigit(*m_psz))
        {
            bMask = my_isdigit(*m_psz) ? *m_psz - '0' : my_toupper(*m_psz) - 'A' + 10;

            m_psz++;
            if (my_isxdigit(*m_psz))
            {
                bMask *= 16;
                bMask += my_isdigit(*m_psz) ? *m_psz - '0' : my_toupper(*m_psz) - 'A' + 10;
                m_psz++;
            }
        }
        return bMask;
    }

    LPCTSTR m_psz;
};


/* Compare pExtract->m_Len bytes of hFile at position pExtract->m_Offset
   with the data pExtract->m_Data.
   If the bits which correspond the mask pExtract->m_pMask differ
   then return FALSE else return TRUE
*/

BOOL CompareUnderMask(IStream * pstm, const CExtractQuadruplets *pExtract)
{
    /*  Read the relevant bytes from the file */
    PBYTE pbFileData = new BYTE[pExtract->m_Len];
    if (pbFileData == NULL) {
        return FALSE;
    }

    /*  Seek the file and read it */
    LARGE_INTEGER li;
    li.QuadPart = pExtract->m_Offset;
    if (FAILED(pstm->Seek(li,
                          pExtract->m_Offset >= 0 ?
                                STREAM_SEEK_SET : STREAM_SEEK_END,
                          NULL))) {
        delete [] pbFileData;
        return FALSE;
    }

    /*  Read the file */
    DWORD cbRead;
    if (FAILED(pstm->Read(pbFileData, (DWORD)pExtract->m_Len, &cbRead)) ||
            (LONG)cbRead != pExtract->m_Len) {
        delete [] pbFileData;
        return FALSE;
    }

    /*  Now do the comparison */
    for (int i = 0; i < pExtract->m_Len; i++) {
        if (0 != ((pExtract->m_pData[i] ^ pbFileData[i]) &
                  pExtract->m_pMask[i])) {
            delete [] pbFileData;
            return FALSE;
        }
    }

    delete [] pbFileData;
    return TRUE;
}

/*
    See if a file conforms to a byte string

    hk is an open registry key
    lpszSubKey is the name of a sub key of hk which must hold REG_SZ data of the form
    <offset, length, mask, data>...
    offset and length are decimal numbers, mask and data are hexadecimal.
    a missing mask represents a mask of FF...
    (I'll call this a line of data).
    If there are several quadruplets in the line then the file must match all of them.

    There can be several lines of data, typically with registry names 0, 1 etc
    and the file can match any line.

    The same lpsSubKey should also have a value "Source Filter" giving the
    class id of the source filter.  If there is a match, this is returned in clsid.
    If there is a match but no clsid then clsid is set to CLSID_NULL
*/
BOOL CheckBytes(IStream *pstm, HKEY hk, LPCTSTR lpszSubkey, CLSID& clsid)
{
    HRESULT hr;
    CEnumValue EnumV(hk, lpszSubkey, &hr);
    if (FAILED(hr)) {
        return FALSE;
    }

    // for each line of data
    while (EnumV.Next(REG_SZ)) {
        /*  The source filter clsid is not a list of compare values */
        if (lstrcmpi(EnumV.ValueName(), SOURCE_VALUE) != 0) {
            DbgLog((LOG_TRACE, 4, TEXT("CheckBytes trying %s"), EnumV.ValueName()));

            /*  Check every quadruplet */
            CExtractQuadruplets Extract = CExtractQuadruplets((LPCTSTR)EnumV.Data());
            BOOL bFound = TRUE;

            // for each quadruplet in the line
            while (Extract.Next()) {
                /*  Compare a particular offset */
                if (!CompareUnderMask(pstm, &Extract)) {
                    bFound = FALSE;
                    break;
                }
            }
            if (bFound) {
                /*  Get the source */
                if (EnumV.Read(REG_SZ, SOURCE_VALUE)) {
                    return SUCCEEDED(CLSIDFromText((LPTSTR)EnumV.Data(),
                                                   &clsid));
                } else {
                    clsid = GUID_NULL;
                    return TRUE;
                }
            }
        }
    }
    return FALSE;
}

/* Get the media type and source filter clsid for a file
   Return S_OK if it succeeds else return an hr such that FAILED(hr)
   in which case the outputs are meaningless.
*/
STDAPI GetMediaTypeStream(IStream *pstm,       // [in] stream to look at
                        GUID   *Type,        // [out] type
                        GUID   *Subtype,     // [out] subtype
                        CLSID  *clsidSource) // [out] clsid
{
    HRESULT hr;
    CLSID clsid;

    /*  Now scan the registry looking for a match */
    // The registry looks like
    // ---KEY-----------------  value name    value (<offset, length, mask, data> or filter_clsid )
    // Media Type
    //    {clsid type}
    //        {clsid sub type}  0             4, 4,  , 6d646174
    //                          1             4, 8, FFF0F0F000001FFF , F2F0300000000274
    //                          Source Filter {clsid}
    //        {clsid sub type}  0             4, 4,  , 12345678
    //                          Source Filter {clsid}
    //    {clsid type}
    //        {clsid sub type}  0             0, 4,  , fedcba98
    //                          Source Filter {clsid}


    /*  Step through the types ... */

    CEnumKey EnumType(HKEY_CLASSES_ROOT, MEDIATYPE_KEY, &hr);
    if (FAILED(hr)) {
        if (hr==HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)) {
            hr = VFW_E_BAD_KEY;  // distinguish key from file
        }
        return hr;
    }

    // for each type
    while (EnumType.Next()) {

        /*  Step through the subtypes ... */
        CEnumKey EnumSubtype(EnumType.KeyHandle(), EnumType.KeyName(), &hr);
        if (FAILED(hr)) {
            return hr;
        }

        // for each subtype
        while (EnumSubtype.Next()) {
            if (CheckBytes(pstm,
                           EnumSubtype.KeyHandle(),
                           EnumSubtype.KeyName(),
                           clsid)) {
                if (SUCCEEDED(CLSIDFromText((LPTSTR) EnumType.KeyName(),
                                            (CLSID *)Type)) &&
                    SUCCEEDED(CLSIDFromText((LPTSTR) EnumSubtype.KeyName(),
                                            (CLSID *)Subtype))) {
                    if (clsidSource != NULL) {
                        *clsidSource = clsid;
                    }
                    return S_OK;
                }
            }
        }
    }

    /*  If we haven't found out the type return a wild card MEDIASUBTYPE_NULL
        and default the async reader as the file source

        The effect of this is that every parser of MEDIATYPE_Stream data
        will get a chance to connect to the output of the async reader
        if it detects its type in the file
    */

    *Type = MEDIATYPE_Stream;
    *Subtype = MEDIASUBTYPE_NULL;
    return S_OK;
}




// !!!!!!!!!!!!!!!!!!!!!!!!! end stolen


// IPersistMoniker support..........
HRESULT CURLReader::Load(BOOL fFullyAvailable,
                            IMoniker *pimkName,
                            LPBC pibc,
                            DWORD grfMode)
{
    if (!pimkName)
        return E_FAIL;

    m_pmkPassedIn = pimkName;
    m_pbcPassedIn = pibc;

    return LoadInternal(NULL);
}

//  Load a (new) file

HRESULT
CURLReader::Load(LPCOLESTR lpwszFileName, const AM_MEDIA_TYPE *pmt)
{
    CheckPointer(lpwszFileName, E_POINTER);

    m_pFileName = new WCHAR[1+lstrlenW(lpwszFileName)];
    if (m_pFileName!=NULL) {
        lstrcpyW(m_pFileName, lpwszFileName);
    }

    return LoadInternal(pmt);
}


HRESULT
CURLReader::LoadInternal(const AM_MEDIA_TYPE *pmt)
{
    CAutoLock lck(&m_csFilter);

    HRESULT hr = S_OK;

    m_pGB = NULL;

    if (m_pGraph) {
	hr = m_pGraph->QueryInterface(IID_IGraphBuilder,
				      (void**) &m_pGB);
	if (FAILED(hr)) {
	    m_pGB = NULL;
	} else
	    m_pGB->Release();	// don't hold refcount
    }

    m_pCallback = new CURLCallback(&hr, this);

    if (!m_pCallback)
	hr = E_OUTOFMEMORY;

    if (FAILED(hr))
	return hr;

    hr = m_pCallback->QueryInterface(IID_IBindStatusCallback, (void **) &m_pbsc);

    if (FAILED(hr) || m_pbsc == NULL) {
	DbgLog((LOG_ERROR, 1, TEXT("QI(IBindStatusCallback) failed, hr = %x"), hr));
	return hr;
    }

    hr = StartThread();

    if (SUCCEEDED(hr) && FAILED(m_hrBinding)) {
	DbgLog((LOG_TRACE, 1, TEXT("Bind eventually failed, hr = %x"), m_hrBinding));
	hr = m_hrBinding;
    }

    if (SUCCEEDED(hr) && m_pstm == 0) {
	// this shouldn't happen, indicates a URLMon bug.
	DbgLog((LOG_TRACE, 1, TEXT("Didn't get a stream back?")));
	hr = E_FAIL;
    }

    if (FAILED(hr)) {
	return hr;
    }

    /*  Check the file type */
    if (NULL == pmt) {
        GUID Type, Subtype;
        /*  If no media type given find out what it is */
        HRESULT hr = GetMediaTypeStream(m_pstm, &Type, &Subtype, NULL);
        if (FAILED(hr)) {
            if (m_pbinding) {
                HRESULT hrAbort = m_pbinding->Abort();
                DbgLog((LOG_TRACE, 1, TEXT("IBinding::Abort() returned %x"), hrAbort));
            }

            DbgLog((LOG_TRACE, 1, TEXT("GetMediaTypeStream failed, hr = %x"), hr));
            return hr;
        }
        m_mt.SetType(&Type);
        m_mt.SetSubtype(&Subtype);
    } else {
        m_mt = *pmt;
    }

    /*  Create the output pin type */
    m_OutputPin.SetMediaType(&m_mt);

    return S_OK;
}

// Caller needs to QzTaskMemFree or equivalent.

STDMETHODIMP
CURLReader::GetCurFile(
    LPOLESTR * ppszFileName,
    AM_MEDIA_TYPE *pmt)
{
    CheckPointer(ppszFileName, E_POINTER);
    *ppszFileName = NULL;
    if (m_pFileName!=NULL) {
        *ppszFileName = (LPOLESTR) QzTaskMemAlloc( sizeof(WCHAR)
                                                 * (1+lstrlenW(m_pFileName)));
        if (*ppszFileName!=NULL) {
              lstrcpyW(*ppszFileName, m_pFileName);
        }
    }

    if (pmt!=NULL) {
        CopyMediaType(pmt, &m_mt);
    }

    return NOERROR;
}

int
CURLReader::GetPinCount()
{
    // we have no pins unless we have been successfully opened with a
    // file name
    return (m_pFileName || m_pmk) ? 1 : 0;
}

CBasePin *
CURLReader::GetPin(int n)
{
    if ((GetPinCount() > 0) &&
        (n == 0)) {
        return &m_OutputPin;
    } else {
        return NULL;
    }
}


STDMETHODIMP
CURLCallback::OnStartBinding(DWORD grfBSCOption, IBinding* pbinding)
{
    DbgLog((LOG_TRACE, 1, TEXT("OnStartBinding, pbinding=%x"), pbinding));

    if (!m_pReader) {
        DbgLog((LOG_TRACE, 1, TEXT("We're not owned!")));
        return S_OK;
    }

    if (m_pReader->m_pbinding != NULL) {
        DbgLog((LOG_TRACE, 1, TEXT("Releasing old binding=%x"), m_pReader->m_pbinding));
        m_pReader->m_pbinding->Release();
    }
    m_pReader->m_pbinding = pbinding;
    if (m_pReader->m_pbinding != NULL) {
        m_pReader->m_pbinding->AddRef();
        //SetStatus(L"Status: Starting to bind...");
    }
    return S_OK;
}  // CURLCallback::OnStartBinding

STDMETHODIMP
CURLCallback::GetPriority(LONG* pnPriority)
{
    DbgLog((LOG_TRACE, 1, TEXT("GetPriority")));

    // !!! is this right?
    // we're more important than most downloads....
    *pnPriority = THREAD_PRIORITY_ABOVE_NORMAL;

    return E_NOTIMPL;
}  // CURLCallback::GetPriority

STDMETHODIMP
CURLCallback::OnLowResource(DWORD dwReserved)
{
    DbgLog((LOG_TRACE, 1, TEXT("OnLowResource %d"), dwReserved));

    return E_NOTIMPL;
}  // CURLCallback::OnLowResource

STDMETHODIMP
CURLCallback::OnProgress(ULONG ulProgress, ULONG ulProgressMax,
                       ULONG ulStatusCode, LPCWSTR szStatusText)
{

    DbgLog((LOG_TRACE, 1, TEXT("Progress: %ls (%d) %d of %d "),
            szStatusText ? szStatusText : L"[no text]",
            ulStatusCode, ulProgress, ulProgressMax));

    if (!m_pReader) {
        DbgLog((LOG_TRACE, 1, TEXT("We're not owned!")));
        return S_OK;
    }

    // !!! this isn't reliably equal to a number of bytes
    m_pReader->m_totalLengthGuess = ulProgressMax;
    m_pReader->m_totalSoFar = ulProgress;

    return(NOERROR);
}  // CURLCallback::OnProgress

STDMETHODIMP
CURLCallback::OnStopBinding(HRESULT hrStatus, LPCWSTR pszError)
{
    DbgLog((LOG_TRACE, 1, TEXT("StopBinding: hr = %x '%ls'"),
            hrStatus, pszError ? pszError : L"[no text]"));

    if (!m_pReader) {
        DbgLog((LOG_TRACE, 1, TEXT("We're not owned!")));
        return S_OK;
    }

    m_pReader->m_fBindingFinished = TRUE;
    if (m_pReader->m_totalLengthGuess == 0)
	m_pReader->m_totalLengthGuess = m_pReader->m_totalSoFar;

    m_pReader->m_hrBinding = hrStatus;

    // if we're still waiting for the thread, stop waiting
    m_pReader->m_evThreadReady.Set();
    m_pReader->m_evDataAvailable.Set();

    // !!! should I release m_pReader->m_pBinding here?
    return S_OK;
}  // CURLCallback::OnStopBinding

STDMETHODIMP
CURLCallback::GetBindInfo(DWORD* pgrfBINDF, BINDINFO* pbindInfo)
{
    DbgLog((LOG_TRACE, 1, TEXT("GetBindInfo")));

    // !!! are these the right flags?

    *pgrfBINDF = BINDF_ASYNCHRONOUS | BINDF_ASYNCSTORAGE;
    // *pgrfBINDF |= BINDF_DONTUSECACHE | BINDF_DONTPUTINCACHE;
    pbindInfo->cbSize = sizeof(BINDINFO);
    pbindInfo->szExtraInfo = NULL;
    memset(&pbindInfo->stgmedData, 0, sizeof(STGMEDIUM));
    pbindInfo->grfBindInfoF = 0;
    pbindInfo->dwBindVerb = BINDVERB_GET;
    pbindInfo->szCustomVerb = NULL;

    if (m_pReader) {
        if (pbindInfo->cbSize >= offsetof(BINDINFO, dwReserved)) {
            // use the codepage we've retrieved from the host
            pbindInfo->dwCodePage = m_pReader->m_dwCodePage; // !!!

            if (CP_UTF8 == m_pReader->m_dwCodePage) {
                pbindInfo->dwOptions = BINDINFO_OPTIONS_ENABLE_UTF8;
            }
        }
    }
    return S_OK;
}  // CURLCallback::GetBindInfo

STDMETHODIMP
CURLCallback::OnDataAvailable(DWORD grfBSCF, DWORD dwSize, FORMATETC* pfmtetc, STGMEDIUM* pstgmed)
{
    DbgLog((LOG_TRACE, 1, TEXT("OnDataAvailable, dwSize = %x"), dwSize));

//    m_pReader->m_totalSoFar = dwSize;

    if (!m_pReader) {
        DbgLog((LOG_TRACE, 1, TEXT("We're not owned!")));
        return S_OK;
    }

    if (m_pReader->m_pstm == 0) {
        DbgLog((LOG_TRACE, 1, TEXT("OnDataAvailable: got pstm = %x"), pstgmed->pstm));

        pstgmed->pstm->AddRef();
        m_pReader->m_pstm = pstgmed->pstm;
        m_pReader->m_evThreadReady.Set();
    }

    m_pReader->m_evDataAvailable.Set();

    return S_OK;
}  // CURLCallback::OnDataAvailable

STDMETHODIMP
CURLCallback::OnObjectAvailable(REFIID riid, IUnknown* punk)
{
    DbgLog((LOG_TRACE, 1, TEXT("OnObjectAvailable")));

    // should only be used in BindToObject case, which we don't use?

    return E_NOTIMPL;
}  // CURLCallback::OnObjectAvailable

// start the thread
HRESULT
CURLReader::StartThread(void)
{
    HRESULT hr;

    //      Internet Explorer (IE)'s implememtation of IObjectWithSite expects to be 
    // called on IE's application thread.  IE's IObjectWithSite interface is used
    // in CURLReader::StartDownload().  Interfaces queried from IE's IObjectWithSite 
    // interface are used in StartDownload(), CURLReader::ThreadProc() and 
    // CURLReader::ThreadProcEnd().  All of these interfaces must be used on IE's 
    // application thread because they are not thread safe.  
    //    StartDownload(), ThreadProc() and ThreadProcEnd() are called on the filter
    // graph's thread because the URL Reader uses the IAMMainThread::PostCallBack() 
    // function to call them.  IE ensures its' application thread is the filter graph 
    // thread by using CLSID_FilterGraphNoThread to create the filter graph.  IE's 
    // implememtation of IObjectWithSite will always be called on IE's application 
    // thread because IE's application thread is the filter graph thread and 
    // StartDownload(), ThreadProc() and ThreadProcEnd() are always called on the 
    // filter graph thread. 
    if (m_pGraph) {
	hr = m_pGraph->QueryInterface(IID_IAMMainThread,(void**) &m_pMainThread);
	if (FAILED(hr))
	    m_pMainThread = NULL;
    }

    m_evThreadReady.Reset();

    if (m_pMainThread) {
	hr = m_pMainThread->PostCallBack((LPVOID) InitialThreadProc, (LPVOID) this);

	m_pMainThread->Release();
    } else {
	InitialThreadProc((LPVOID) this);
    }

    DbgLog((LOG_TRACE, 1, TEXT("About to wait for evThreadReady")));

    // we must dispatch messages here, because we might be on the main
    // application thread.
    while (1) {
        HANDLE ahev[] = {m_evThreadReady};

        DWORD dw = MsgWaitForMultipleObjects(
                        1,
                        ahev,
                        FALSE,
                        INFINITE,
                        QS_ALLINPUT);
        if (dw == WAIT_OBJECT_0) {
            // thread ready
            break;
        }

        MSG Message;

        while (PeekMessage(&Message, NULL, 0, 0, TRUE))
        {
            TranslateMessage(&Message);
            DispatchMessage(&Message);
        }
    }

    DbgLog((LOG_TRACE, 1, TEXT("Done waiting for evThreadReady")));

    return S_OK;
}

HRESULT
CURLReader::CloseThread(void)
{
    HRESULT hr;

    if (m_pMainThread && m_pMainThread->IsMainThread() == S_FALSE) {
	hr = m_pMainThread->PostCallBack((LPVOID) FinalThreadProc, (LPVOID) this);

        DbgLog((LOG_TRACE, 1, TEXT("About to wait for evThreadReady")));

        // we must dispatch messages here, because we might be on the main
        // application thread.
        while (1) {
            HANDLE hEvent = m_evClose;
            DWORD dw = MsgWaitForMultipleObjects(
                            1,
                            &hEvent,
                            FALSE,
                            INFINITE,
                            QS_ALLINPUT);
            if (dw == WAIT_OBJECT_0) {
                // thread ready
                break;
            }

            MSG Message;

            while (PeekMessage(&Message, NULL, 0, 0, TRUE))
            {
                TranslateMessage(&Message);
                DispatchMessage(&Message);
            }
        }

        DbgLog((LOG_TRACE, 1, TEXT("Done waiting for evThreadReady")));

    } else {
	FinalThreadProc((LPVOID) this);
    }

    return S_OK;
}

// the thread proc - assumes that DWORD thread param is the
// this pointer
DWORD
CURLReader::ThreadProc(void)
{
    DbgLog((LOG_TRACE, 1, TEXT("About to call StartDownload")));

    HRESULT hr = StartDownload();

    DbgLog((LOG_TRACE, 1, TEXT("StartDownload returned hr = %x, pstm = %x"), hr, m_pstm));

    if (FAILED(hr)) {
	// unblock any unfortunates waiting for us.
	m_hrBinding = hr;
	m_evThreadReady.Set();
	m_evDataAvailable.Set();
    }

    return 0;
}

DWORD
CURLReader::ThreadProcEnd(void)
{

    // we don't want to hear anything from the callback any more
    if (m_pCallback)
        m_pCallback->m_pReader = NULL;

    // !!! if binding in progress, must kill it!
    if (m_pbinding && !m_fBindingFinished) {
        HRESULT hr = m_pbinding->Abort();
        DbgLog((LOG_TRACE, 1, TEXT("IBinding::Abort() returned %x"), hr));

        // !!! wait for it to finish?
    }

    if (m_pbinding) {
        DbgLog((LOG_TRACE, 1, TEXT("Releasing our refcount on binding %x"), m_pbinding));
        m_pbinding->Release();
        m_pbinding = 0;
    }

    if (m_fRegisteredCallback && m_pbc && m_pbsc) {
        HRESULT hr = RevokeBindStatusCallback(m_pbc, m_pbsc);
        DbgLog((LOG_TRACE, 1, TEXT("RevokeBindStatusCallback returned %x"), hr));
    }


    if (m_pmk)
        m_pmk->Release();

    if (m_pbc)
        m_pbc->Release();

    if (m_pbsc)
        m_pbsc->Release();

    // !!! do we need a RevokeBindStatusCallback here?
    // done in OnStopBinding now, is that right?

    if (m_pstm)
        m_pstm->Release();


    m_evClose.Set();

    return 0;
}

HRESULT GetCodePage2(IUnknown *punk, DWORD *pdwcp)
{
    HRESULT hr;

    // use IDispatch to get the current code page.
    IDispatch *pdisp;
    hr = punk->QueryInterface(IID_IDispatch, (void **)&pdisp);

    if (SUCCEEDED(hr))
    {
        DISPPARAMS dispparamsNoArgs = {NULL, NULL, 0, 0};
        VARIANT result;
        VariantInit(&result);
        V_UI4(&result) = 0;     // VB (msvbvm60) leaves this uninitialized

        hr = pdisp->Invoke(DISPID_AMBIENT_CODEPAGE, IID_NULL,
                           LOCALE_USER_DEFAULT, DISPATCH_PROPERTYGET,
                           &dispparamsNoArgs, &result, NULL, NULL);
        pdisp->Release();

        if (SUCCEEDED(hr))
        {
            // VariantChangeType(&result, &result, 0, VT_UI4);
            ASSERT(V_VT(&result) == VT_UI4);
            *pdwcp = V_UI4(&result);
            // VariantClear.
        }
    }

    return hr;
}

DWORD GetCodePage(IObjectWithSite *pows)
{
    // we're going to try to get the code page of the enclosing page
    // from IE.  if we can't, default to CP_ACP encoding.
    DWORD dwCodePage = CP_ACP;

    // get the control which is hosting us....
    IOleObject *pOO;
    HRESULT hr = pows->GetSite(IID_IOleObject, (void **) &pOO);
    if (SUCCEEDED(hr))
    {
        // look for IDispatch on the container itself, in case we're
        // directly hosted in IE, say.

        hr = GetCodePage2(pOO, &dwCodePage);

        // else try its site.
        if(FAILED(hr))
        {
            IOleClientSite *pOCS;
            hr = pOO->GetClientSite(&pOCS);
            if (SUCCEEDED(hr))
            {
                hr= GetCodePage2(pOCS, &dwCodePage);
                pOCS->Release();
            }
        }

        pOO->Release();
    }

    if(FAILED(hr)) {
        ASSERT(dwCodePage == CP_ACP);
    }

    return dwCodePage;
}

// the thread proc - assumes that DWORD thread param is the
// this pointer
HRESULT CURLReader::StartDownload(void)
{
    HRESULT hr;

    IObjectWithSite * pows = NULL;

    if (m_pmkPassedIn) {
	m_pmk = m_pmkPassedIn;
	m_pmk->AddRef();
    }

    if (m_pbcPassedIn) {
	m_pbc = m_pbcPassedIn;
	m_pbc->AddRef();
    }

    if (!m_pbc) {
        hr = CreateBindCtx(0, &m_pbc);
        if (FAILED(hr)) {
            DbgLog((LOG_ERROR, 1, TEXT("CreateBindCtx failed, hr = %x"), hr));
            return hr;
        }
    }

    if (!m_pGraph)
	hr = E_NOINTERFACE;
    else
        //      Internet Explorer (IE)'s implememtation of IObjectWithSite expects to be 
        // called on IE's application thread.  IE's IObjectWithSite interface is used
        // in CURLReader::StartDownload().  Interfaces queried from IE's IObjectWithSite 
        // interface are used in StartDownload(), CURLReader::ThreadProc() and 
        // CURLReader::ThreadProcEnd().  All of these interfaces must be used on IE's 
        // application thread because they are not thread safe.  
        //    StartDownload(), ThreadProc() and ThreadProcEnd() are called on the filter
        // graph's thread because the URL Reader uses the IAMMainThread::PostCallBack() 
        // function to call them.  IE ensures its' application thread is the filter graph 
        // thread by using CLSID_FilterGraphNoThread to create the filter graph.  IE's 
        // implememtation of IObjectWithSite will always be called on IE's application 
        // thread because IE's application thread is the filter graph thread and 
        // StartDownload(), ThreadProc() and ThreadProcEnd() are always called on the 
        // filter graph thread. 
        hr = m_pGraph->QueryInterface(IID_IObjectWithSite, (void **) &pows);

    if (FAILED(hr))  {
        DbgLog((LOG_TRACE, 1, TEXT("Couldn't get IObjectWithSite from host")));
    } else {
        DbgLog((LOG_TRACE, 1, TEXT("Got IObjectWithSite %x"), pows));

        IServiceProvider *psp;
        hr = pows->GetSite(IID_IServiceProvider, (void **) &psp);

        IBindHost * pBindHost = 0;

        if (FAILED(hr)) {
            DbgLog((LOG_TRACE, 1, TEXT("Couldn't get IServiceProvider from host")));

        } else {
            DbgLog((LOG_TRACE, 1, TEXT("Got IServiceProvider %x"), psp));

            // Ok, we have a service provider, let's see if BindHost is
            // available.
            hr = psp->QueryService(SID_SBindHost, IID_IBindHost,
                                   (void**)&pBindHost );

            psp->Release();

            if (SUCCEEDED(hr)) {
                DbgLog((LOG_TRACE, 1, TEXT("Got IBindHost %x"), pBindHost));
            }
        }

        // we're going to try to get the code page of the enclosing
        // page from IE.
        //
        // supporing IUrlReaderCodePageAware in filgraph.cpp is
        // contract to do some stuff.
        //
        m_dwCodePage = GetCodePage(pows);

        pows->Release();

	IStream *pstm = NULL;
        if (pBindHost) {
            if (!m_pmk) {
                // Get the host to interpret the filename string for us
                hr = pBindHost->CreateMoniker((LPOLESTR) m_pFileName, NULL, &m_pmk, 0);

                if (FAILED(hr)) {
                    pBindHost->Release();
                    DbgLog((LOG_TRACE, 1, TEXT("Couldn't get a moniker from %ls from host"),
                            m_pFileName));
                    return hr;
                }
            }

            DbgLog((LOG_TRACE, 1, TEXT("Got IMoniker %x"), m_pmk));
            // got a moniker, now lets get a name

            hr = pBindHost->MonikerBindToStorage(m_pmk, m_pbc,
                                                m_pbsc, IID_IStream,
                                                (void**)&pstm);

            pBindHost->Release();
        } else {
            DbgLog((LOG_TRACE, 1, TEXT("Couldn't get IBindHost from host")));

            if (!m_pmk) {
                DbgLog((LOG_TRACE, 1, TEXT("Creating our own moniker")));

                hr = CreateURLMoniker(NULL, m_pFileName, &m_pmk);
                if (FAILED(hr)) {
                    DbgLog((LOG_ERROR, 1, TEXT("CreateURLMoniker failed, hr = %x"), hr));
                    return hr;
                }

                DbgLog((LOG_TRACE, 1, TEXT("CreateURLMoniker returned %x"), m_pmk));
            } else {
                DbgLog((LOG_TRACE, 1, TEXT("Using moniker %x"), m_pmk));
            }

            hr = RegisterBindStatusCallback(m_pbc,
                    m_pbsc,
                    NULL,               // should remember previous callback?
                    NULL);
            if (FAILED(hr)) {
                DbgLog((LOG_ERROR, 1, TEXT("RegisterBindStatusCallback failed, hr = %x"), hr));
                return hr;
            }
            m_fRegisteredCallback = TRUE;

            DbgLog((LOG_TRACE, 1, TEXT("About to BindToStorage")));

            hr = m_pmk->BindToStorage(m_pbc, 0, IID_IStream, (void**)&pstm);
            if (FAILED(hr)) {
                DbgLog((LOG_ERROR, 1, TEXT("BindToStorage failed, hr = %x"), hr));
                return hr;
            }
        }

	if (m_pstm == NULL)
	    m_pstm = pstm;
	else
	    pstm->Release();	// we already got it via OnDataAvailable

    }

    return hr;
}


CURLCallback::CURLCallback(HRESULT *phr, CURLReader *pReader)
    : CUnknown(NAME("URL Callback"), NULL),
      m_pReader(pReader)
{
}

STDMETHODIMP
CURLCallback::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IBindStatusCallback) {
        return GetInterface((IBindStatusCallback*) this, ppv);
    }

    if (riid == IID_IAuthenticate) {
        return GetInterface((IAuthenticate*) this, ppv);
    }

    if (riid == IID_IWindowForBindingUI) {
        return GetInterface((IWindowForBindingUI*) this, ppv);
    }

    return CUnknown::NonDelegatingQueryInterface(riid, ppv);
}

STDMETHODIMP
CURLCallback::Authenticate(HWND *phwnd, LPWSTR *pszUserName, LPWSTR *pszPassword)
{
    *phwnd = GetDesktopWindow();
    *pszUserName = NULL;
    *pszPassword = NULL;
    return (S_OK);
}

STDMETHODIMP
CURLCallback::GetWindow(REFGUID  guidReason, HWND  *phwnd)
{
    *phwnd = GetDesktopWindow();
    return (S_OK);
}

STDMETHODIMP
CURLReader::QueryProgress(LONGLONG* pllTotal, LONGLONG* pllCurrent)
{
    if (GetPinCount() > 0) {
        return m_OutputPin.Length(pllTotal, pllCurrent);
    } else {
        return E_UNEXPECTED;
    }
}


// IAMOpenProgress method.
// Request that downloading stop.
STDMETHODIMP
CURLReader::AbortOperation()
{
    m_bAbort = TRUE;

    if (m_pbinding && !m_fBindingFinished) {
        DbgLog((LOG_TRACE, 1, TEXT("aborting binding from IAMOpenProgress::Abort")));
	
        HRESULT hr = m_pbinding->Abort();
        DbgLog((LOG_TRACE, 1, TEXT("IBinding::Abort() returned %x"), hr));
    }

    return NOERROR;
}

// Clear the abort flag (do this before starting download)
void
CURLReader::ResetAbort()
{
    m_bAbort = FALSE;
}

// Allow the pin method to see the aborting flag (test during download)
BOOL
CURLReader::Aborting()
{
    return m_bAbort;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\builder2\stdafx.cpp ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.cpp : source file that includes just the standard includes
//  stdafx.pch will be the pre-compiled header
//  stdafx.obj will contain the pre-compiled type information

#include <streams.h>
#include "stdafx.h"

#ifdef FILTER_DLL
    #ifdef _ATL_STATIC_REGISTRY
        #include <statreg.h>
        #include <statreg.cpp>
    #endif
    #include <atlimpl.cpp>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\builder2\stdafx.h ===
// Copyright (c) 1998 - 1999  Microsoft Corporation.  All Rights Reserved.
// stdafx.h : include file for standard system include files,
//      or project specific include files that are used frequently,
//      but are changed infrequently

#if !defined(AFX_STDAFX_H__08E7CDC6_7F58_11D2_8CF1_00A0C9441E20__INCLUDED_)
#define AFX_STDAFX_H__08E7CDC6_7F58_11D2_8CF1_00A0C9441E20__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#define _ATL_APARTMENT_THREADED
#define WIN32_LEAN_AND_MEAN		// Exclude rarely-used stuff from Windows headers

#include <atlbase.h>
extern CComModule _Module;
#include <atlcom.h>

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__08E7CDC6_7F58_11D2_8CF1_00A0C9441E20__INCLUDED)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\collect.h ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

//
// collect.h
//
// Classes supporting the OLE Automation collection class declared
// in control.odl.
//
// Classes here support the following set of interfaces as wrappers on
// top of the existing filtergraph, filter pin and mediatype objects
//      IAMCollection
//      IEnumVariant
//      IFilterInfo
//      IPinInfo
//      IMediaTypeInfo
//      IRegFilterInfo
//
// plus collection classes
//      CFilterCollection
//      CRegFilterCollection
//      CMediaTypeCollection
//      CPinCollection


//
// CEnumVariant
//
// standard implementation of IEnumVARIANT on top of an IAMCollection
// interface. Returned by the _NewEnum method of IAMCollection
class CEnumVariant : public IEnumVARIANT, public CUnknown
{

    IAMCollection* m_pCollection;
    long m_index;

public:

    // we will addref IAMCollection* in our constructor
    CEnumVariant(
        TCHAR * pName,
        LPUNKNOWN pUnk,
        HRESULT * phr,
        IAMCollection* pCollection,
        long index);

    ~CEnumVariant();

    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void**);

    STDMETHODIMP Next(
                    unsigned long celt,
                    VARIANT  *rgvar,
                    unsigned long  *pceltFetched);

    STDMETHODIMP Skip(
                    unsigned long celt);

    STDMETHODIMP Reset(void);

    STDMETHODIMP Clone(
                    IEnumVARIANT** ppenum);
};


// abstract base class from which all our collections are derived
// -- supports dual IDispatch methods and _NewEnum methods.
//
// The derived class constructor should cItems to the count of items,
// and m_rpDispatch to point to an array of IDispatch*. Our destructor
// will release these.

class CBaseCollection : public IAMCollection, public CUnknown
{
protected:
    CBaseDispatch m_dispatch;

    // list of addrefed IDispatch* for the *Info items in the collection
    IDispatch ** m_rpDispatch;

    // count of items in m_rpDispatch
    long m_cItems;


public:
    CBaseCollection(
        TCHAR* pName,
        LPUNKNOWN pUnk,
        HRESULT * phr);
    virtual ~CBaseCollection();

    // --- CUnknown methods ---
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // --- IDispatch methods ---
    STDMETHODIMP GetTypeInfoCount(UINT * pctinfo);

    STDMETHODIMP GetTypeInfo(
      UINT itinfo,
      LCID lcid,
      ITypeInfo ** pptinfo);

    STDMETHODIMP GetIDsOfNames(
      REFIID riid,
      OLECHAR  ** rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID * rgdispid);

    STDMETHODIMP Invoke(
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS * pdispparams,
      VARIANT * pvarResult,
      EXCEPINFO * pexcepinfo,
      UINT * puArgErr);

    // --- IAMCollection methods ---

    STDMETHODIMP get_Count(long* plCount) {
        *plCount = m_cItems;
        return S_OK;
    };

    STDMETHODIMP Item(long lItem, IUnknown** ppUnk);

    // return an IEnumVARIANT implementation
    STDMETHODIMP get__NewEnum(IUnknown** ppUnk);
};




//
// Implements a collection of CFilterInfo objects based on the
// filters in the filtergraph
//
// we simply fill in m_rpDispatch and m_cItems. base class handles
// the rest.
class CFilterCollection : public CBaseCollection
{

public:
    CFilterCollection(
        IEnumFilters* pgraph,
        IUnknown* pUnk,
        HRESULT* phr);

};


//
// provides an OLE-Automatable wrapper for IBaseFilter, implementing
// IFilterInfo
class CFilterInfo : public IFilterInfo, public CUnknown
{
    CBaseDispatch m_dispatch;
    IBaseFilter* m_pFilter;

public:
    CFilterInfo(
        IBaseFilter* pFilter,
        TCHAR* pName,
        LPUNKNOWN pUnk,
        HRESULT * phr);
    ~CFilterInfo();

    // --- CUnknown methods ---
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // --- IDispatch methods ---
    STDMETHODIMP GetTypeInfoCount(UINT * pctinfo);

    STDMETHODIMP GetTypeInfo(
      UINT itinfo,
      LCID lcid,
      ITypeInfo ** pptinfo);

    STDMETHODIMP GetIDsOfNames(
      REFIID riid,
      OLECHAR  ** rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID * rgdispid);

    STDMETHODIMP Invoke(
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS * pdispparams,
      VARIANT * pvarResult,
      EXCEPINFO * pexcepinfo,
      UINT * puArgErr);

    // -- IFilterInfo methods --

    // find a pin given an id - returns an object supporting
    // IPinInfo
    STDMETHODIMP FindPin(
                    BSTR strPinID,
                    IDispatch** ppUnk);

    // filter name
    STDMETHODIMP get_Name(
                    BSTR* strName);

    // Vendor info string
    STDMETHODIMP get_VendorInfo(
                    BSTR* strVendorInfo);

    // returns the actual filter object (supports IBaseFilter)
    STDMETHODIMP get_Filter(
                    IUnknown **ppUnk);

    // returns an IAMCollection object containing the PinInfo objects
    // for this filter
    STDMETHODIMP get_Pins(
                    IDispatch ** ppUnk);

    STDMETHODIMP get_IsFileSource(
		    long * pbIsSource);

    STDMETHODIMP get_Filename(
		    BSTR* pstrFilename);

    STDMETHODIMP put_Filename(
		    BSTR strFilename);



    // creates a CFilterInfo and writes an addref-ed IDispatch pointer
    // to the ppDisp parameter. IBaseFilter will be addrefed by the
    // CFilterInfo constructor
    static HRESULT CreateFilterInfo(IDispatch**ppdisp, IBaseFilter* pFilter);
};


//
// wrapper for a media type - supports GUIDs in string form for
// type and subtype
//
class CMediaTypeInfo : public IMediaTypeInfo, public CUnknown
{
    CBaseDispatch m_dispatch;
    CMediaType m_mt;

public:
    CMediaTypeInfo(
        AM_MEDIA_TYPE& rmt,
        TCHAR* pName,
        LPUNKNOWN pUnk,
        HRESULT * phr);
    ~CMediaTypeInfo();

    // --- CUnknown methods ---
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // --- IDispatch methods ---
    STDMETHODIMP GetTypeInfoCount(UINT * pctinfo);

    STDMETHODIMP GetTypeInfo(
      UINT itinfo,
      LCID lcid,
      ITypeInfo ** pptinfo);

    STDMETHODIMP GetIDsOfNames(
      REFIID riid,
      OLECHAR  ** rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID * rgdispid);

    STDMETHODIMP Invoke(
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS * pdispparams,
      VARIANT * pvarResult,
      EXCEPINFO * pexcepinfo,
      UINT * puArgErr);

    // -- IMediaTypeInfo methods --

    STDMETHODIMP get_Type(
                    BSTR* strType);

    STDMETHODIMP get_Subtype(
                    BSTR* strType);

    // create a CMediaTypeInfo object and return IDispatch
    static HRESULT CreateMediaTypeInfo(IDispatch**ppdisp, AM_MEDIA_TYPE& rmt);
};

//
// support IPinInfo automatable properties and methods on top
// of an IPin interface passed in.
//
class CPinInfo : public IPinInfo, public CUnknown
{
    CBaseDispatch m_dispatch;
    IPin* m_pPin;

public:
    CPinInfo(
        IPin* pPin,
        TCHAR* pName,
        LPUNKNOWN pUnk,
        HRESULT * phr);
    ~CPinInfo();

    // --- CUnknown methods ---
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // --- IDispatch methods ---
    STDMETHODIMP GetTypeInfoCount(UINT * pctinfo);

    STDMETHODIMP GetTypeInfo(
      UINT itinfo,
      LCID lcid,
      ITypeInfo ** pptinfo);

    STDMETHODIMP GetIDsOfNames(
      REFIID riid,
      OLECHAR  ** rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID * rgdispid);

    STDMETHODIMP Invoke(
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS * pdispparams,
      VARIANT * pvarResult,
      EXCEPINFO * pexcepinfo,
      UINT * puArgErr);

    // --- IPinInfo Methods ---
    STDMETHODIMP get_Pin(
                    IUnknown** ppUnk);

    // get the PinInfo object for the pin we are connected to
    STDMETHODIMP get_ConnectedTo(
                    IDispatch** ppUnk);

    // get the media type on this connection - returns an
    // object supporting IMediaTypeInfo
    STDMETHODIMP get_ConnectionMediaType(
                    IDispatch** ppUnk);


    // return the FilterInfo object for the filter this pin
    // is part of
    STDMETHODIMP get_FilterInfo(
                    IDispatch** ppUnk);

    // get the name of this pin
    STDMETHODIMP get_Name(
                    BSTR* pstr);

    // pin direction
    STDMETHODIMP get_Direction(
                    LONG *ppDirection);

    // PinID - can pass to IFilterInfo::FindPin
    STDMETHODIMP get_PinID(
                    BSTR* strPinID);

    // collection of preferred media types (IAMCollection)
    STDMETHODIMP get_MediaTypes(
                    IDispatch** ppUnk);

    // Connect to the following pin, using other transform
    // filters as necessary. pPin can support either IPin or IPinInfo
    STDMETHODIMP Connect(
                    IUnknown* pPin);

    // Connect directly to the following pin, not using any intermediate
    // filters
    STDMETHODIMP ConnectDirect(
                    IUnknown* pPin);

    // Connect directly to the following pin, using the specified
    // media type only. pPin is an object that must support either
    // IPin or IPinInfo, and pMediaType must support IMediaTypeInfo.
    STDMETHODIMP ConnectWithType(
                    IUnknown * pPin,
                    IDispatch * pMediaType);

    // disconnect this pin and the corresponding connected pin from
    // each other. (Calls IPin::Disconnect on both pins).
    STDMETHODIMP Disconnect(void);

    // render this pin using any necessary transform and rendering filters
    STDMETHODIMP Render(void);

    // -- helper methods ---

    // creates a CPinInfo and writes an addref-ed IDispatch pointer
    // to the ppDisp parameter. IPin will be addrefed by the
    // CPinInfo constructor
    static HRESULT CreatePinInfo(IDispatch**ppdisp, IPin* pPin);

    // return an addrefed IPin* pointer from an IUnknown that
    // may support either IPin* or IPinInfo*
    HRESULT GetIPin(IPin** ppPin, IUnknown * punk);

    // return an addrefed IGraphBuilder* pointer from an IPin*
    // (get the filter and from that the filtergraph).
    HRESULT GetGraph(IGraphBuilder** ppGraph, IPin* pPin);
};

//
// collection of CPinInfo objects
//
// Implements a collection of CPinInfo objects based on the
// Pins in the Pingraph
//
// constructor fills in m_rpDispatch and m_cItems and
// base class does the rest
class CPinCollection : public CBaseCollection
{

public:
    CPinCollection(
        IEnumPins* pgraph,
        IUnknown* pUnk,
        HRESULT* phr);
};


//
// collection of CMediaTypeInfo objects
//
// Implements a collection of CMediaTypeInfo objects based on the
// AM_MEDIA_TYPE enumerator
//
// constructor fills in m_rpDispatch and m_cItems and
// base class does the rest
class CMediaTypeCollection : public CBaseCollection
{
public:
    CMediaTypeCollection(
        IEnumMediaTypes* penum,
        IUnknown* pUnk,
        HRESULT* phr);
};


//
// support IRegFilterInfo on top of a REGFILTER obtained from the mapper.
//
class CRegFilterInfo : public IRegFilterInfo, public CUnknown
{
    CBaseDispatch m_dispatch;
    IMoniker *m_pmon;
    IGraphBuilder* m_pgraph;

public:
    CRegFilterInfo(
        IMoniker *pmon,
        IGraphBuilder* pgraph,
        TCHAR* pName,
        LPUNKNOWN pUnk,
        HRESULT * phr);
    ~CRegFilterInfo();

    // --- CUnknown methods ---
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // --- IDispatch methods ---
    STDMETHODIMP GetTypeInfoCount(UINT * pctinfo);

    STDMETHODIMP GetTypeInfo(
      UINT itinfo,
      LCID lcid,
      ITypeInfo ** pptinfo);

    STDMETHODIMP GetIDsOfNames(
      REFIID riid,
      OLECHAR  ** rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID * rgdispid);

    STDMETHODIMP Invoke(
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS * pdispparams,
      VARIANT * pvarResult,
      EXCEPINFO * pexcepinfo,
      UINT * puArgErr);

    // --- IRegFilterInfo methods ---

    // get the name of this filter
    STDMETHODIMP get_Name(
                    BSTR* strName);


    // make an instance of this filter, add it to the graph and
    // return an IFilterInfo for it.
    STDMETHODIMP Filter(
                    IDispatch** ppUnk);

    static HRESULT CreateRegFilterInfo(
                    IDispatch**ppdisp,
                    IMoniker *pmon,
                    IGraphBuilder* pgraph);
};


//
// a collection of CRegFilterInfo objects
//
class CRegFilterCollection : public CBaseCollection
{
public:
    CRegFilterCollection(
        IGraphBuilder* pgraph,
	IFilterMapper2* pmapper,
        IUnknown* pUnk,
        HRESULT* phr);
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\fgctl.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

// This is a plug-in distributor. It is a separate object that supports
// multiple control interfaces. They are combined into a single object
// because:
//  -- IMediaPosition needs current position, and needs to reset
//     the stream time offset when paused. This means it needs internal
//     access to the IMediaControl implementation.
//  -- IQueueCommand, IMediaEvent and IMediaControl share a single worker
//     thread.
//  -- All of them need to traverse the list of filters looking for their
//     interface. This is combined into a single list traversal.
//
// One of the most important things to remember when changing this code is
// that GetState(INFINITE) calls should not be executed on an application
// thread. This is because we cannot guarantee that paused state transitions
// will always complete (as is the case for badly authored files or Internet
// downloading). We avoid this in the main by having posting a message to
// the worker thread to do the work. While it is waiting it sits without any
// critical sections locked so that the application can cancel the change.
//
// The worker thread is in fact a window/UI thread, we do this rather than
// having a pure worker thread so that we can always catch top level window
// messages. When renderers are child windows (perhaps embedded in a VB form)
// they will not be sent messages such as WM_PALETTECHANGED etc. We pass
// notification of messages onto the renderers by calling NotifyOwnerMessage


#include <streams.h>
#include <measure.h>
#include <evcodei.h>
#include "fgctl.h"
#include "Collect.h"
#include <SeekPrxy.h>
#include <wmsdk.h>

#include <malloc.h>

const int METHOD_TRACE_LOGGING_LEVEL = 7;
#define TRACE_CUE_LEVEL 2
const int TRACE_EC_COMPLETE_LEVEL = 5;

template<class T1, class T2> static inline BOOL __fastcall BothOrNeither( T1 a, T2 b )
{
//  return ( a && b ) || ( !a && !b );
//  return ( a ? BOOL(b) : !b );
    return ( !!a ^ !b );        // !! Will make the value 0 or 1
}

template<class I> static void ReleaseAndRemoveAll( CGenericList<I> & list )
{
    for( ; ; )
    {
        I *const pI = list.RemoveHead();
        if (pI == NULL) {
            break;
        }
        pI->Release();
    }
}

#pragma warning(disable:4355)

static const TCHAR * pName = NAME("CFGControl");

CFGControl::CFGControl( CFilterGraph * pFilterGraph, HRESULT * phr ) :
      m_pFG( pFilterGraph ),
      m_pOwner( m_pFG->GetOwner() ),
      // Doing this cast is expensive (because of null testing)
      // so we do it one here and keep the result to pass to
      // others.
      m_pFGCritSec( &m_pFG->m_CritSec ),

      m_implMediaFilter(pName,this),
      m_implMediaControl(pName,this),
      m_implMediaEvent(pName,this),
      m_implMediaSeeking(pName,this),
      m_implMediaPosition(pName, this),
      m_implVideoWindow(pName,this),
      m_implBasicVideo(pName,this),
      m_implBasicAudio(pName,this),
      m_qcmd(pName,this),

      m_listSeeking(NAME("listSeeking")),
      m_listAudio(NAME("listAudio")),
      m_listWindow(NAME("listWindow")),

      m_listRenderersFinishedRendering(NAME("Renderers Finished Renderering List")),

      m_pFirstVW(NULL),
      m_pFirstBV(NULL),

      m_dwCountOfRenderers(0),
      m_nStillRunning(0),
      m_pClock(NULL),
      m_LieState(State_Stopped),
      m_dwStateVersion(0),
      m_bRestartRequired(FALSE),
      m_bShuttingDown(FALSE),
      m_pFocusObject(NULL),
      m_GraphWindow(this),
      m_iVersion(0),
      m_bCued(FALSE),
      m_eAction(0),
      m_PreHibernateState(State_Stopped),
      m_ResourceManager(NAME("resource mgr"), m_pOwner, phr),
      m_pRegisterDeviceNotification(NULL),
      m_pUnregisterDeviceNotification(NULL),
      m_dwStepVersion(0)
#ifdef FG_DEVICE_REMOVAL
      ,m_lLostDevices(NAME("m_lLostDevices"), 4)
#endif
{
    //
    //  Don't go calling our methods if some part of our construction failed
    //
    if (FAILED(*phr)) {
        return;
    }

    HRESULT hr = m_GraphWindow.PrepareWindow();
    if (FAILED(hr)) {
        *phr = hr;
        return;
    }

    //  All part of the big hack because ReplyMessage doesn't work on
    //  Windows 95 and we can't call CoCreateInstance inside SendMessage
    //  so we can't create filters on a SendMessage
    m_pFG->m_CritSec.SetWindow(m_GraphWindow.GetWindowHWND(), AWM_CREATEFILTER);

#ifdef FG_DEVICE_REMOVAL
    // dynload device removal APIs
    {
        HMODULE hmodUser = GetModuleHandle(TEXT("user32.dll"));
        ASSERT(hmodUser);       // we link to user32
        m_pUnregisterDeviceNotification = (PUnregisterDeviceNotification)
            GetProcAddress(hmodUser, "UnregisterDeviceNotification");

        // m_pRegisterDeviceNotification is prototyped differently in unicode
        m_pRegisterDeviceNotification = (PRegisterDeviceNotification)
            GetProcAddress(hmodUser,
#ifdef UNICODE
                           "RegisterDeviceNotificationW"
#else
                           "RegisterDeviceNotificationA"
#endif
                           );
        // failures expected on older platforms.
        ASSERT(m_pRegisterDeviceNotification && m_pUnregisterDeviceNotification ||
               !m_pRegisterDeviceNotification && !m_pUnregisterDeviceNotification);
    }
#endif
}

CFGControl::~CFGControl()
{
    // we need to clean up all our lists
    EmptyLists();

    // tell the resource manager to release the focus object if it is still
    // ours
    if (m_pFocusObject) {
        ReleaseFocus(m_pFocusObject);
    }

    // Close down the worker window
    m_GraphWindow.DoneWithWindow();

    // release any clock we have
    if (m_pClock!=NULL) {
        m_pClock->Release();
        m_pClock = NULL;
    }
    //  Apparently there can be some
    //  ASSERT(m_implMediaEvent.NumberOfEventsInStore() == 0);

#ifdef FG_DEVICE_REMOVAL
    ASSERT(m_lLostDevices.GetCount() == 0);
#endif
}

HRESULT CFGControl::ReleaseFocus(IUnknown* pUnk)
{
    m_ResourceManager.ReleaseFocus(pUnk);
    if (m_pFocusObject == pUnk) {
        m_pFocusObject = NULL;
    }

    return S_OK;
}


HRESULT
CFGControl::SetFocus(IBaseFilter* pFilter) {

    HRESULT hr;

    if (!pFilter) {
        m_pFocusObject = NULL;
        hr = m_ResourceManager.SetFocus(NULL);
    } else {
        IUnknown* pUnk;
        hr = pFilter->QueryInterface(IID_IUnknown, (void**)&pUnk);
        if (SUCCEEDED(hr)) {
            hr = m_ResourceManager.SetFocus(pUnk);
            m_pFocusObject = pUnk;
            pUnk->Release();
        }
    }

    return hr;
}


void
CFGControl::InitializeEC_COMPLETEState(void)
{
    // The caller MUST hold the filter graph lock.
    ASSERT(CritCheckIn(GetFilterGraphCritSec()));

    CAutoLock alEventStoreLock(m_implMediaEvent.GetEventStoreLock());

    // reset the current count of renderers running
    m_nStillRunning = m_dwCountOfRenderers;

    ReleaseAndRemoveAll(m_listRenderersFinishedRendering);

    DbgLog(( LOG_TRACE,
             TRACE_EC_COMPLETE_LEVEL,
             TEXT("Initializing the number of renderers running.  %03d rendererers are running."),
             OutstandingEC_COMPLETEs() ));
}


CGenericList<IBaseFilter>&
CFGControl::GetRenderersFinsihedRenderingList(void)
{
    // The caller MUST hold the event store lock.
    ASSERT(CritCheckIn(m_implMediaEvent.GetEventStoreLock()));

    return m_listRenderersFinishedRendering;
}


// decrement the count of renderers still running, and return
// zero if it reaches zero.
long
CFGControl::DecrementRenderers(void)
{
    // The caller MUST hold the event store lock.
    ASSERT(CritCheckIn(m_implMediaEvent.GetEventStoreLock()));

    m_nStillRunning--;

    return m_nStillRunning;
}


void
CFGControl::IncrementRenderers(void)
{
    // The caller MUST hold the event store lock.
    ASSERT(CritCheckIn(m_implMediaEvent.GetEventStoreLock()));

    m_nStillRunning++;
}


void
CFGControl::ResetEC_COMPLETEState(void)
{
    CAutoLock alEventStoreLock(m_implMediaEvent.GetEventStoreLock());

    m_nStillRunning = 0;
    ReleaseAndRemoveAll(m_listRenderersFinishedRendering);

    DbgLog(( LOG_TRACE,
             TRACE_EC_COMPLETE_LEVEL,
             TEXT("Reseting the number of renderers running.") ));
}


// Set up the m_nStillRunning variable for this run.
// Any error from UpdateLists() is returned intact.
// We use the count of rendering filters.
// Each of them should also send EC_COMPLETE notifications.
HRESULT
CFGControl::CountRenderers(void)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    // build new lists if necessary
    HRESULT hr = UpdateLists();
    if (SUCCEEDED(hr)) {
        InitializeEC_COMPLETEState();
    }

    return hr;
}


HRESULT
CFGControl::RecordEC_COMPLETE(IBaseFilter* pRendererFilter, bool* pfRenderersStillRenderering)
{
    // The caller MUST hold the event store lock.
    ASSERT(CritCheckIn(m_implMediaEvent.GetEventStoreLock()));

    if (NULL != pRendererFilter)
    {
        CGenericList<IBaseFilter>& listRenderersFinishedRendering = GetRenderersFinsihedRenderingList();

        // CGenericList::AddHead() returns NULL if an error occurs.
        if (NULL == listRenderersFinishedRendering.AddHead(pRendererFilter))
        {
            return E_FAIL;
        }

        pRendererFilter->AddRef();

    }
    else
    {
        DbgLog(( LOG_TRACE,
                 TRACE_EC_COMPLETE_LEVEL,
                 TEXT("WARNING in CFGControl::RecordEC_COMPLETE(): An EC_COMPLETE event's lParam2")
                 TEXT(" parameter did not contain an IBaseFilter pointer.  The filter graph manager")
                 TEXT(" will prematurely send an EC_COMPLETE event to the application if the")
                 TEXT(" renderer which sent the EC_COMPLETE is removed from the filter graph.") ));
    }

    // DecrementRenderers() returns the number of renderers which have not sent an EC_COMPLETE.
    *pfRenderersStillRenderering = !(0 == DecrementRenderers());

    #ifdef DEBUG
    if (NULL != pRendererFilter)
    {
        DbgLog((LOG_TRACE,
                TRACE_EC_COMPLETE_LEVEL,
                TEXT("%25s sent an EC_COMPLETE Message.  %03d Renderers Still Rendering."),
                (LPCTSTR)CDisp(pRendererFilter),
                OutstandingEC_COMPLETEs()));
    }
    else
    {
        DbgLog((LOG_TRACE,
                TRACE_EC_COMPLETE_LEVEL,
                TEXT("An unknown renderer sent an EC_COMPLETE Message.  %03d Renderers Still Rendering."),
                OutstandingEC_COMPLETEs()));
    }
    #endif // DEBUG

    return S_OK;
}

HRESULT
CFGControl::UpdateEC_COMPLETEState(IBaseFilter* pRenderer, FILTER_STATE fsNewFilterState)
{
    // This function should only be called to notify the filter graph manager that a running
    // filter stopped or a stopped filter started running.  This function should only be called
    // when the filter graph is running.
    ASSERT( (State_Running == m_pFG->GetStateInternal()) && ((State_Running == fsNewFilterState) || (State_Stopped == fsNewFilterState)) );

    EC_COMPLETE_STATE ecsChange;

    if (State_Running == fsNewFilterState)
    {
        ecsChange = ECS_FILTER_STARTS_SENDING;
    }
    else
    {
        ecsChange = ECS_FILTER_STOPS_SENDING;
    }

    return UpdateEC_COMPLETEState(pRenderer, ecsChange);
}

HRESULT
CFGControl::UpdateEC_COMPLETEState(IBaseFilter* pRenderer, EC_COMPLETE_STATE ecsChange)
{
    // The caller MUST pass in a valid filter pointer.
    ASSERT(NULL != pRenderer);

    // The EC_COMPLETE state should only be updated when the filter graph is running.
    ASSERT(State_Running == m_pFG->GetStateInternal());

    // Only renderers send EC_COMPLETE events.
    ASSERT(S_OK == IsRenderer(pRenderer)); 

    CAutoLock alEventStoreLock(m_implMediaEvent.GetEventStoreLock());

    if (ECS_FILTER_STARTS_SENDING == ecsChange)
    {
        IncrementRenderers();

        DbgLog((LOG_TRACE,
                TRACE_EC_COMPLETE_LEVEL,
                TEXT("%25s will start sending EC_COMPLETE events.  %03d Renderers Still Rendering."),
                (LPCTSTR)CDisp(pRenderer),
                OutstandingEC_COMPLETEs()));
    }
    else
    {
        CGenericList<IBaseFilter>& listRenderersFinishedRendering  = GetRenderersFinsihedRenderingList();

        // Determine if the renderer already sent an EC_COMPLETE.event.
        POSITION posRenderer = listRenderersFinishedRendering.Find(pRenderer);

        // CGenericList::Find() returns NULL if the renderer is not on the list.
        if( NULL != posRenderer )
        {
            DbgLog((LOG_TRACE,
                    TRACE_EC_COMPLETE_LEVEL,
                    TEXT("%25s already sent an EC_COMPLETE message.  %03d Renderers Still Rendering."),
                    (LPCTSTR)CDisp(pRenderer),
                    OutstandingEC_COMPLETEs()));

            // The renderer already sent the EC_COMPLETE event.
            listRenderersFinishedRendering.Remove(posRenderer);
            pRenderer->Release();
        }
        else
        {
            // The renderer has not sent the EC_COMPLETE event.
            bool fRenderersFinishedRenderering = (0 == DecrementRenderers());

            DbgLog((LOG_TRACE,
                    TRACE_EC_COMPLETE_LEVEL,
                    TEXT("%25s will not be sending any more EC_COMPLETE events.  %03d Renderers Still Rendering."),
                    (LPCTSTR)CDisp(pRenderer),
                    OutstandingEC_COMPLETEs()));

            bool fDefaultEC_COMPLETEProcessingCanceled = !m_implMediaEvent.DontForwardEvent(EC_COMPLETE);

            if (!fDefaultEC_COMPLETEProcessingCanceled && fRenderersFinishedRenderering)
            {

                HRESULT hr = m_implMediaEvent.Deliver(EC_COMPLETE, S_OK,0);
                if (FAILED(hr) )
                {
                    return hr;
                }
            }
        }
    }

    return S_OK;
}


//  Helper to get the misc flags
HRESULT GetFilterMiscFlags(IUnknown *pFilter, DWORD *pdwFlags)
{
    //
    // A filter can optionally support this interface in order
    // to explicitly indicate that this filter renders at least
    // one of the streams, and will be generating an EC_COMPLETE.
    //
    IAMFilterMiscFlags *pMisc;
    HRESULT hr = pFilter->QueryInterface(IID_IAMFilterMiscFlags, (void**)&pMisc);
    if (SUCCEEDED(hr)) {
        *pdwFlags = pMisc->GetMiscFlags();
        pMisc->Release();
    }
    return hr;
}


// is this a rendering filter?
// we use IPin::QueryInternalConnections to decide if it is a renderer.
// If any input pin provides a list of pins, then that pin is not
// a renderer. If there are input pins and they don't support
// QueryInternalConnections then the interface rules say we must assume
// that all inputs go to all outputs.
//
// returns S_OK for yes, S_FALSE for no and errors otherwise.
HRESULT
CFGControl::IsRenderer(IBaseFilter* pFilter)
{
    // are there any output pins?
    BOOL bHaveOutputs = FALSE;

    // are there input pins that 'connect to all and any outputs'
    BOOL bHaveUnmappedInputs = FALSE;

    // are there actually any pins at all?
    BOOL bHavePins = FALSE;

    DWORD dwMiscFilterFlags;

    // Filters which have the AM_FILTER_MISC_FLAGS_IS_RENDERER flag are always renderers.
    HRESULT hr = GetFilterMiscFlags(pFilter, &dwMiscFilterFlags);
    if (SUCCEEDED(hr) && (dwMiscFilterFlags & AM_FILTER_MISC_FLAGS_IS_RENDERER) ) {
        return S_OK;
    }

    {
        // Make sure the renderer supports IMediaSeeking or IMediaPosition.
        IMediaSeeking* pMediaSeeking;
        hr = pFilter->QueryInterface(IID_IMediaSeeking, (void**)&pMediaSeeking);
        if (SUCCEEDED(hr)) {
            pMediaSeeking->Release();
        } else {
            // IUnknown::QueryInteface() sets its' ppvObject parameter to NULL if the object does not support an interface.
            ASSERT( (E_NOINTERFACE != hr) || (NULL == pMediaSeeking) );

            if (E_NOINTERFACE != hr) {
                return hr;
            }

            IMediaPosition* pMediaPosition;

            hr = pFilter->QueryInterface(IID_IMediaPosition, (void**)&pMediaPosition);
            if (SUCCEEDED(hr)) {
                pMediaPosition->Release();
            } else {
                // IUnknown::QueryInteface() sets its' ppvObject parameter to NULL if the object does not support an interface.
                ASSERT( (E_NOINTERFACE != hr) || (NULL == pMediaPosition) );

                if (E_NOINTERFACE != hr) {
                    return hr;
                }

                return S_FALSE;
            }
        }
    }

    // enumerate all pins
    IEnumPins* pEnum;
    hr = pFilter->EnumPins(&pEnum);
    if (FAILED(hr)) {
        return hr;
    }

    for (;;) {

        IPin* pPin;
        ULONG ulFetched;
        hr = pEnum->Next(1, &pPin, &ulFetched);
        if (FAILED(hr)) {
            pEnum->Release();
            return hr;
        }

        if (ulFetched == 0) {
            break;
        }

        // have at least one pin
        bHavePins = TRUE;

        // is it input or output?
        PIN_DIRECTION pd;
        hr = pPin->QueryDirection(&pd);
        if (FAILED(hr)) {
            pPin->Release();
            pEnum->Release();
            return hr;
        }

        if (pd == PINDIR_OUTPUT) {
            bHaveOutputs = TRUE;
        } else {

            // does this pin get rendered ?
            // S_FALSE means not enough slots so this pin
            // appears on >0 output pins. S_OK means 0 pins connect
            // so it is rendered. any error means appears on all
            // output pins (if any)
            ULONG ulPins = 0;
            hr = pPin->QueryInternalConnections(NULL, &ulPins);

            if (hr == S_OK) {
                // 0 pins connect to this output - so it is rendered
                pPin->Release();
                pEnum->Release();
                return S_OK;
            } else if (FAILED(hr)) {
                // this pin connects to any outputs
                bHaveUnmappedInputs = TRUE;
            }
        }
        pPin->Release();
    }


    pEnum->Release();

    // if no pins at all then it must be a renderer.
    if (!bHavePins) {
        return S_OK;
    }

    // if we've got this far, then we are only a renderer
    // if we have unmapped inputs and no outputs.
    if (bHaveUnmappedInputs && !bHaveOutputs) {
        return S_OK;
    } else {
        return S_FALSE;
    }
}


// clear out our cached lists of filters. Called from our destructor,
// and from UpdateLists when preparing a more uptodate list.
void
CFGControl::EmptyLists()
{
    // Clear out renderer count
    m_dwCountOfRenderers = 0;

    ReleaseAndRemoveAll(m_listSeeking);
    ReleaseAndRemoveAll(m_listAudio);
    ReleaseAndRemoveAll(m_listWindow);

    SetFirstVW(NULL);
    if (m_pFirstBV)
    {
        m_pFirstBV->Release();
        m_pFirstBV = NULL;
    }
}


// call this to ensure the lists are uptodate - caller must hold the
// filtergraph critical section if you want to ensure that the list is
// still uptodate when we return.
//
// checks the version number of the filgraph lists (via IGraphVersion
// provided by the filtergraph). If they differ, empty all lists and
// rebuild them by traversing the filter graph list and asking each filter
// for IBasicAudio, IBasicVideo, IVideoWindow and IMediaPosition. We addref
// the filters by doing the QI, so when emptying the list we need to Release
// each one.
HRESULT
CFGControl::UpdateLists()
{
    // caller should hold this, but it does no harm to be sure
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    if (IsShutdown()) {
        return S_OK;
    }


    if (CheckVersion() != S_OK) // We're out of sync
    {

        HRESULT hr, hrQuery;
        m_implMediaSeeking.m_dwSeekCaps = 0;

        // empty the lists and Release all the interfaces held
        EmptyLists();

        // enumerate all the filters in the graph
        IEnumFilters *penum;
        hr = m_pFG->EnumFilters(&penum);
        if( FAILED( hr ) ) {
            return hr;
        }

        IBaseFilter * pFilter;
        for(;;) {
            hr = penum->Next(1, &pFilter, 0);
            // We're also locking the filter graph, so it should be
            // impossible for the enumerator to get out of sync.
            ASSERT(SUCCEEDED(hr));
            if (hr != S_OK) break;

            // for each filter, look for IBasicAudio, IBasicVideo
            // IVideoWindow and IMediaPosition
            {

                // For IMediaSeeking we need to count renderers too
                IMediaSeeking *const pms = CMediaSeekingProxy::CreateIMediaSeeking( pFilter, &hrQuery );

                //
                // A filter can optionally support this interface in order
                // to explicitly indicate that this filter renders at least
                // one of the streams, and will be generating an EC_COMPLETE.
                //
                DWORD dwFlags;
                if (SUCCEEDED(GetFilterMiscFlags(pFilter, &dwFlags))) {
                    if (dwFlags & AM_FILTER_MISC_FLAGS_IS_RENDERER) ++m_dwCountOfRenderers;
                } else {
                    //  If the interface is not supported use the legacy
                    //  method for determining if it's a renderer
                    if (SUCCEEDED(hrQuery) && IsRenderer(pFilter) == S_OK) ++m_dwCountOfRenderers;
                }

                if (SUCCEEDED(hrQuery))
                {
                    ASSERT(pms);
                    m_listSeeking.AddTail(pms);

                    /*  Get the caps here */
                    DWORD dwCaps;
                    HRESULT hr = pms->GetCapabilities(&dwCaps);
                    if (SUCCEEDED(hr)) {
                        if (m_listSeeking.GetCount() == 1) {
                            m_implMediaSeeking.m_dwSeekCaps = dwCaps;
                        } else {
                            m_implMediaSeeking.m_dwSeekCaps &= dwCaps;
                        }
                    } else {
                        /*  CanDoSegments wasn't part of the original deal
                        */
                        m_implMediaSeeking.m_dwSeekCaps &=
                            ~(AM_SEEKING_CanDoSegments);
                    }
                }
                else ASSERT(!pms);
            }

            IBasicVideo * pbv = NULL;
            // If we have a VW at this stage, then we have a BV too, and they point to
            // interfaces on the same underlying filter.  No need to look further.
            if (!m_pFirstVW)
            {
                hrQuery = pFilter->QueryInterface(IID_IBasicVideo, (void**)&pbv);
                // Assert that either we succeeded, or (if we failed) that pbv is null
                ASSERT( BothOrNeither( SUCCEEDED(hrQuery), pbv ) );
                if (m_pFirstBV == NULL) m_pFirstBV = pbv;
            }

            IVideoWindow * pvw;
            hrQuery = pFilter->QueryInterface(IID_IVideoWindow, (void**)&pvw);
            ASSERT( BothOrNeither( SUCCEEDED(hrQuery), pvw ) );
            if (SUCCEEDED(hrQuery)) m_listWindow.AddTail(pvw);

            if (m_pFirstVW == NULL && pbv && pvw)
            {
                SetFirstVW(pvw);
                if (m_pFirstBV != pbv)
                {
                    m_pFirstBV->Release();
                    m_pFirstBV = pbv;
                }
            }
            else if (pbv && pbv != m_pFirstBV) pbv->Release();

            IBasicAudio * pa;
            hrQuery = pFilter->QueryInterface(IID_IBasicAudio, (void**)&pa);
            if (SUCCEEDED(hrQuery)) {
                m_listAudio.AddTail(pa);
            }

            //
            // if any of the list AddTail calls fail then we are going
            // to have dangling interface pointers
            //

            pFilter->Release();
        } // end for

        penum->Release();

        if (m_pFirstVW == NULL) // If we coudn't find an interface that supported both
                                // use the first of each.
        {
            SetFirstVW(m_listWindow.GetHead());
        }

    }
    return S_OK;
}


// IDistributorNotify methods reporting graph state changes

HRESULT
CFGControl::SetSyncSource(IReferenceClock *pClock)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    // addref the clock before releasing the old one in case
    // they are the same
    if (pClock) {
        pClock->AddRef();
    }

    if (m_pClock) {
        m_pClock->Release();
    }
    m_pClock = pClock;


    // change times on subobjects
    m_qcmd.SetSyncSource(pClock);

    return S_OK;
}


HRESULT
CFGControl::Stop()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::Stop()" ));

    CAutoMsgMutex lock(GetFilterGraphCritSec());

    m_tBase = TimeZero;

    m_qcmd.EndRun();

    ResetEC_COMPLETEState();

    m_bCued = FALSE;

    return S_OK;
}


HRESULT
CFGControl::Pause()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::Pause()" ));

    CAutoMsgMutex lock(GetFilterGraphCritSec());

    if (GetFilterGraphState() != State_Paused) {
        // remember when we paused, for restart time
        if (m_pClock) {
            m_pClock->GetTime((REFERENCE_TIME*)&m_tPausedAt);
        }

        m_qcmd.EndRun();
    }

    return S_OK;
}


HRESULT
CFGControl::Run(REFERENCE_TIME tBase)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::Run()" ));

    CAutoMsgMutex lock(GetFilterGraphCritSec());

    // Clear out any un-got EC_COMPLETEs.  Unfortunately, we'll end up doing this
    // twice if the user app does IMediaControl::Run() from State_Stopped.
    m_implMediaEvent.ClearEvents( EC_COMPLETE );

    // reset the count of expected EC_COMPLETEs
    CountRenderers();

    // This is just so IMediaSeeking can set its m_rtStopTime
    LONGLONG llStop;
    m_implMediaSeeking.GetStopPosition(&llStop);

    // remember base time for restart time
    m_tBase = tBase;

    m_qcmd.Run(tBase);

    m_bCued = TRUE;

    return S_OK;
}

HRESULT
CFGControl::GetListSeeking(CGenericList<IMediaSeeking>** pplist)
{
    HRESULT hr = UpdateLists();
    if (FAILED(hr)) {
        return hr;
    }
    *pplist = &m_listSeeking;
    return S_OK;
}


HRESULT
CFGControl::GetListAudio(CGenericList<IBasicAudio>** pplist)
{
    HRESULT hr = UpdateLists();
    if (FAILED(hr)) {
        return hr;
    }
    *pplist = &m_listAudio;
    return S_OK;
}


HRESULT
CFGControl::GetListWindow(CGenericList<IVideoWindow>** pplist)
{
    HRESULT hr = UpdateLists();
    if (FAILED(hr)) {
        return hr;
    }
    *pplist = &m_listWindow;
    return S_OK;
}


// provide the current stream time. In stopped mode, this is always 0
// (we always restart with stream time 0). In paused mode, supply the
// stream time on pausing.
HRESULT
CFGControl::GetStreamTime(REFERENCE_TIME * pTime)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    REFERENCE_TIME rtCurrent;

    // don't use the clock in stopped state
    if (State_Stopped == m_pFG->m_State) {
        // stopped position is always the beginning
        rtCurrent = 0;
    } else {
        if (!m_pClock) return VFW_E_NO_CLOCK;

        if (State_Paused == m_pFG->m_State) {
            // time does not advance in paused state!

            // have we run at all yet?
            if (m_tBase == TimeZero) {
                rtCurrent = 0;
            } else {
                // yes - report how far we got before pausing
                rtCurrent = m_tPausedAt - m_tBase;
            }
        } else {
            HRESULT hr = m_pClock->GetTime(&rtCurrent);
            ASSERT(SUCCEEDED(hr));
            if (FAILED(hr)) return hr;

            // subtract the stream offset to get stream time
            rtCurrent -= m_tBase;
        }
    }

    // we may possibly have a time < 0 if we have eg paused before reaching
    // the base start time
    if (rtCurrent < 0) {
        rtCurrent = 0;
    }

    *pTime = rtCurrent;
    return S_OK;
}


// reset the current position to 0 - used
// when changing the start time in pause mode to put the stream time
// offset back to ensure that the first sample played from the
// new position is played at run time
HRESULT
CFGControl::ResetStreamTime(void)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    // need to ensure that we restart after the pause as if
    // starting from stream time 0. see IssueRun().
    m_tBase = 0;

    return S_OK;
}


// Cue: Pauses the graph and returns S_OK if the graph is pausED
// or S_FALSE if pausING (i.e. pause has not completed, we'd get
// VWF_S_STATE_INTERMEDIATE from GetState).
HRESULT CFGControl::Cue()
{
    ASSERT( CritCheckIn(GetFilterGraphCritSec()) );

    HRESULT hr = E_FAIL;

    // If paused, check for VFW_S_STATE_INTERMEDIATE.
    if ( GetFilterGraphState() == State_Paused )
    {
        FILTER_STATE fs;
        hr = (m_pFG->GetState(0,&fs) == VFW_S_STATE_INTERMEDIATE) ? S_FALSE : S_OK;
        ASSERT( fs == State_Paused );
    } else {
        hr = m_pFG->CFilterGraph::Pause();
    }

    return hr;
}


HRESULT
CFGControl::CueThenStop()
{
    ASSERT( CritCheckIn(GetFilterGraphCritSec()) );

    HRESULT hr = Cue();
    if (SUCCEEDED(hr)) {
        hr = DeferCued(AWM_CUETHENSTOP, State_Stopped);
    } else {
        Stop();
    }
    return hr;
}


HRESULT
CFGControl::CueThenRun()
{
    ASSERT( CritCheckIn(GetFilterGraphCritSec()) );

    HRESULT hr = m_bCued ? S_OK : Cue();

    // Set the lie state
    // We had a bug where we called CueThenRun with calling Run() and
    // the lie state could get left at Paused which meant that
    // WaitForCompete() never completed (because it checked the lie state)
    m_LieState = State_Running;

    // hr == S_FALSE implies transition in progress, so delegate stop to worker thread.
    if ( hr == S_FALSE )
    {
        DbgLog((LOG_TRACE, TRACE_CUE_LEVEL, TEXT("CueThenRun Async")));
        // Clear out any un-got EC_COMPLETEs.  Unfortunately, we'll end up doing this
        // twice if the user app does Run() from State_Stopped, but we HAVE to ensure
        // that the clean out of EC_COMPLETEs is done synchronously with their call to
        // Run() on either IMediaFilter OR IMediaControl, and not defered and done
        // asynchronously.
        m_implMediaEvent.ClearEvents( EC_COMPLETE );
        // reset the count of expected EC_COMPLETEs
        CountRenderers();

        DeferCued(AWM_CUETHENRUN, State_Running);
    } else if (SUCCEEDED(hr)) {
        DbgLog((LOG_TRACE, TRACE_CUE_LEVEL, TEXT("CueThenRun Sync")));
        hr = IssueRun();
    }

    return hr;
}


// When issuing a Run command, we need to give a stream time offset.
// We could leave it up to the filtergraph, but that would prevent us being
// able to reset it on put_CurrentPosition, so we set it ourselves.
//
// The stream time offset is the time at which a sample marked with stream
// time 0 should be presented. That is, it is the offset between stream time
// and presentation time. A filter adds the stream time offset to the stream
// time to get its presentation time.
//
// If we are starting from cold, then the stream time offset will normally
// be the time now plus a small allowance for startup. This says that the
// first sample should appear now. If we have paused and then are restarting,
// we have to continue from where we left off, so we set the stream time offset
// to be what it was before we paused plus the length of time
// we have been paused.
//
// Using IMediaControl, we never Run from Stopped, since we always go to Paused
// first. So when going to Run state, we are always Paused, and may or may not be
// at the beginning. m_tBase (the stream time offset) is set when we run and
// is always set to 0 when we are stopped. So if we are continuing after a
// pause, we can adjust m_tBase by the length of time we have been paused. If
// on the other hand, in Run() we find that m_tBase is still 0, we know that we
// have not been running yet, and we set the stream time offset to Now.
//
// In both cases, we ask for the next sample to appear immediately, rather than
// 100ms in the future. This gives more rapid startup since we guarantee we
// are paused and cued already, at the cost that the first frame may be
// very slightly late.
//
// This method calculates the stream time offset to be used for a Run command.
// It assumes that we are running from paused.

HRESULT
CFGControl::IssueRun()
{
    ASSERT(CritCheckIn(GetFilterGraphCritSec()));
    HRESULT hr = NOERROR;

    // We should either have a genuine State_Paused, or a lie of State_Running.
    ASSERT( m_LieState != State_Stopped ); // Should also be a consistent state,
                                           // but we don't police this.

    // Don't run twice otherwise we accumlate bogus paused time since
    // m_tPaused is not valid after we come through here
    if (GetFilterGraphState() == State_Running) {
        return S_OK;
    }

    // if no clock, then just use TimeZero for immediately
    if (!m_pClock) {
        hr = m_pFG->Run(TimeZero);
    } else {

        REFERENCE_TIME tNow;
        hr = m_pClock->GetTime((REFERENCE_TIME*)&tNow);
        if (SUCCEEDED(hr)) {

            if (m_tBase == TimeZero) {
                // not run before - base is set to immediate
                m_tBase = tNow;
            } else {
                // restarting after pause - offset base time by length paused
                m_tBase += (tNow - m_tPausedAt);
            }

            // add on 10 milliseconds for the start-from-paused time
            // !!! shouldnt be this long!
#ifdef DEBUG
            DWORD dwNow = timeGetTime();
#endif
            m_tBase += 10 * (UNITS / MILLISECONDS);

            LONGLONG llPreroll;
            HRESULT hrTmp = m_implMediaSeeking.GetPreroll( &llPreroll );
            if (SUCCEEDED(hrTmp))
            {
                hrTmp = m_implMediaSeeking.ConvertTimeFormat( &llPreroll, &TIME_FORMAT_MEDIA_TIME, llPreroll, 0 );
                if (SUCCEEDED(hrTmp)) m_tBase += llPreroll;
            }

            hr = m_pFG->Run(m_tBase);
#ifdef DEBUG
            DbgLog((LOG_TRACE, 2, TEXT("Run took %d ms"), timeGetTime() - dwNow));
#endif
        }
    }
    return hr;
}

HRESULT CFGControl::HibernateSuspendGraph()
{
    m_PreHibernateState = m_LieState;
    if(m_PreHibernateState == State_Running) {
        m_implMediaControl.Pause();
    }

    return S_OK;
}

HRESULT CFGControl::HibernateResumeGraph()
{
    if(m_PreHibernateState == State_Running) {
        m_implMediaControl.Run();
    }

    return S_OK;
}


// stop any async events (repaints or deferred commands) from happening
// wait for the activity to cease without holding the critsec.
HRESULT
CFGControl::Shutdown(void)
{
    ASSERT(!m_bShuttingDown);
    m_bShuttingDown = TRUE;

    m_dwStateVersion++;

    // Since the thread may be stuck in a pause issue a Stop first
    // We only want the filter graph stop so don't call the control
    // stop
    // This call used to be made by the filter graph but then the
    // critical sections were grabbed in the wrong order
    {
        CAutoMsgMutex lck(GetFilterGraphCritSec());
        m_pFG->CancelStep();
        CancelAction();
        m_pFG->CFilterGraph::Stop();
    }

    // We need to make sure that all async activity has completed so that
    // the filter graph can start deleting filters. We don't want to exit
    // the thread yet, particularly so that it can handle the resource
    // management cleanup during and after filter exit.
    //
    // must not hold critsec while doing this.

    m_GraphWindow.SendMessage((UINT) AWM_SHUTDOWN,0,0);
    return S_OK;
}


// --- CImplMediaFilter methods -----------------

CFGControl::CImplMediaFilter::CImplMediaFilter(const TCHAR * pName,CFGControl * pFGC)
    : CUnknown(pName, pFGC->GetOwner()),
      m_pFGControl(pFGC)
{

}

// --- IPersist method ---
STDMETHODIMP CFGControl::CImplMediaFilter::GetClassID(CLSID *pClsID)
{
    return m_pFGControl->GetFG()->GetClassID(pClsID);
}

// --- IMediaFilter methods ---
STDMETHODIMP CFGControl::CImplMediaFilter::GetState(DWORD dwMSecs, FILTER_STATE *State)
{
    return m_pFGControl->m_implMediaControl.GetState(dwMSecs, (OAFilterState *)State);
}
STDMETHODIMP CFGControl::CImplMediaFilter::SetSyncSource(IReferenceClock *pClock)
{
    return m_pFGControl->GetFG()->SetSyncSource(pClock);
}
STDMETHODIMP CFGControl::CImplMediaFilter::GetSyncSource(IReferenceClock **pClock)
{
    return m_pFGControl->GetFG()->GetSyncSource(pClock);
}
STDMETHODIMP CFGControl::CImplMediaFilter::Stop()
{
    return m_pFGControl->m_implMediaControl.Stop();
}
STDMETHODIMP CFGControl::CImplMediaFilter::Pause()
{
    return m_pFGControl->m_implMediaControl.Pause();
}
STDMETHODIMP CFGControl::CImplMediaFilter::Run(REFERENCE_TIME tStart)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::Run()" ));
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());
    m_pFGControl->SetRequestedApplicationState(State_Running);
    const HRESULT hr = m_pFGControl->GetFG()->Run(tStart);
    if (FAILED(hr)) {
        Stop();
    }
#ifdef DEBUG
    m_pFGControl->CheckLieState();
#endif
    return hr;
}



// --- CImplMediaControl methods ----------------

CFGControl::CImplMediaControl::CImplMediaControl(const TCHAR * pName,CFGControl * pFGC)
    : CMediaControl(pName, pFGC->GetOwner()),
      m_pFGControl(pFGC)
{

}


// IMediaControl methods
STDMETHODIMP
CFGControl::CImplMediaControl::Run()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::Run()" ));
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CFilterGraph* pFG = m_pFGControl->GetFG();
    pFG->CancelStep();

    return StepRun();
}

// IMediaControl methods
STDMETHODIMP
CFGControl::CImplMediaControl::StepRun()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::StepRun()" ));
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    // reset events seen on external transitions from stop -> run/pause
    if(m_pFGControl->m_LieState == State_Stopped) {
        m_pFGControl->m_implMediaEvent.ResetSeenEvents();
    }

    //  Flush the registry on Windows 9x to stop getting glitches
    //  in the playback when the OS decides to flush the registry
    //  (seems that this flushing holds the win16 lock for in excess
    //  of 100ms)
    if (m_pFGControl->m_pFirstVW && g_osInfo.dwPlatformId != VER_PLATFORM_WIN32_NT &&
        m_pFGControl->GetFilterGraphState() != State_Running) {
        DbgLog((LOG_TRACE, 2, TEXT("Flushing registry")));
        RegFlushKey(HKEY_CLASSES_ROOT);
        RegFlushKey(HKEY_LOCAL_MACHINE);
        RegFlushKey(HKEY_CURRENT_USER);
        RegFlushKey(HKEY_USERS);
    }
    SetRequestedApplicationState(State_Running);
    const HRESULT hr = m_pFGControl->CueThenRun();
    if (FAILED(hr)) {
        CImplMediaControl::Stop();
    }

	if (SUCCEEDED(hr))
		m_pFGControl->Notify(EC_STATE_CHANGE, State_Running, 0);
#ifdef DEBUG
    m_pFGControl->CheckLieState();
#endif
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaControl::Pause()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::Pause()" ));
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CFilterGraph* pFG = m_pFGControl->GetFG();
    pFG->CancelStep();

    return StepPause();
}

STDMETHODIMP
CFGControl::CImplMediaControl::StepPause()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::StepPause()" ));
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    // reset events seen on external transitions from stop -> run/pause
    if(m_pFGControl->m_LieState == State_Stopped) {
        m_pFGControl->m_implMediaEvent.ResetSeenEvents();
    }

    SetRequestedApplicationState(State_Paused);
    const HRESULT hr = m_pFGControl->Cue();
    if ( hr == S_FALSE )
    // hr == S_FALSE implies transition in progress, so worker thread will fire an event when complete.
    {
        // We knock forward our state, this is where we're heading
        m_pFGControl->m_LieState = State_Paused;
        m_pFGControl->DeferCued(AWM_CUE, State_Paused);
    }
    else
    {
        if (FAILED(hr)) {
            CImplMediaControl::Stop();
        }

        //
        // Provide notification that the pause has completed.
        //
		if (SUCCEEDED(hr))
		{
			m_pFGControl->Notify(EC_PAUSED, hr, 0);
			m_pFGControl->Notify(EC_STATE_CHANGE, State_Paused, 0);
		}
    }

#ifdef DEBUG
    m_pFGControl->CheckLieState();
#endif
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaControl::Stop()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::Stop()" ));

    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CFilterGraph* pFG = m_pFGControl->GetFG();
    pFG->CancelStep();

    //  Don't kill a repaint or we can end up not repainting
    if (m_pFGControl->m_eAction == AWM_REPAINT) {
#ifdef DEBUG
         ASSERT(m_pFGControl->m_LieState == State_Stopped);
         m_pFGControl->CheckLieState();
#endif
         return S_OK;
    }
    SetRequestedApplicationState(State_Stopped);
    m_pFGControl->m_bRestartRequired = FALSE;

    // ask the state we've been told - don't need to query the state
    // of each filter, since we are not interested in intermediate states
    const FILTER_STATE state = m_pFGControl->GetFilterGraphState();
    if (state == State_Running) {
        m_pFGControl->GetFG()->CFilterGraph::Pause();
    }

    //  If we're already stopped don't do anything
    //  This is important because we don't want to go changing the
    //  filtergraph's real state if we're doing a repaint for example
    //  because that would actually abort the repaint
    if (state == State_Stopped) {
#ifdef DEBUG
        m_pFGControl->CheckLieState();
#endif
        return S_OK;
    }

    // Clear any segments - application will have to seek again to
    // reinstate them
    m_pFGControl->m_implMediaSeeking.ClearSegments();

    // IMediaPosition implementation wants control now (to get the
    // current position) and also after all filters are stopped (to set the
    // new start position).

    m_pFGControl->BeforeStop();
    const HRESULT hr = m_pFGControl->GetFG()->CFilterGraph::Stop();
    m_pFGControl->AfterStop();

	if (SUCCEEDED(hr))
	{
		m_pFGControl->Notify(EC_STATE_CHANGE, State_Stopped, 0);
	}

#ifdef DEBUG
    m_pFGControl->CheckLieState();
#endif
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaControl::StopWhenReady()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaControl::StopWhenReady()" ));
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());
    SetRequestedApplicationState(State_Stopped);
    const HRESULT hr =  m_pFGControl->CueThenStop();
	if (SUCCEEDED(hr))
	{
		m_pFGControl->Notify(EC_STATE_CHANGE, State_Stopped, 0);
	}
#ifdef DEBUG
    m_pFGControl->CheckLieState();
#endif
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaControl::GetState(
    LONG msTimeout,
    OAFilterState* pfs)
{
    CheckPointer( pfs, E_POINTER );

    // before taking the graph lock see if we are being called to
    // return the target state.  If so,
    // we cannot lock the filter graph as we are called from the
    // resource manager while it holds its lock.  As we sometimes
    // call the resource manager holding the filter graph lock this
    // could result in deadlock.
    if (0x80000000 == msTimeout) {

        *pfs = GetTargetState();
        return S_OK;
    }


    {
        // Make sure we let the filter graph complete something ...
        CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());
#ifdef DEBUG
        m_pFGControl->CheckLieState();
#endif
    }
    // The internal state of m_pFGControl is more reliable than that returned
    // by IMediaFilter, since we know much more about the state of async activities.
    const FILTER_STATE FGstate = m_pFGControl->GetLieState();

    // getting the state to return to an app means handling incomplete
    // transitions correctly - so ask the filtergraph as well
    FILTER_STATE state;
    HRESULT hr = m_pFGControl->GetFG()->CFilterGraph::GetState(msTimeout, &state);

    if (SUCCEEDED(hr) && FGstate != state)
    {
        DbgLog(( LOG_TRACE, 1, "CFGControl::CImplMediaControl::GetState()   IMediaFilter::GetState()"
                " returned %d, but we return %d", int(state), int(FGstate) ));
        // There's a minor problem here regarding VFW_S_STATE_INTERMEDIATE and waiting msTimeout
        // milliseconds for a consistent state, but we're gonna ignore the problem for now...

        hr = VFW_S_STATE_INTERMEDIATE;
    }
    *pfs = OAFilterState(FGstate);

    return hr;
}


// this provides VB access to filtergraph building
STDMETHODIMP
CFGControl::CImplMediaControl::RenderFile(BSTR strFileName)
{
    return m_pFGControl->GetFG()->RenderFile(strFileName, NULL);
}


STDMETHODIMP
CFGControl::CImplMediaControl::AddSourceFilter(
    BSTR strFilename,
    IDispatch**ppUnk)
{
    IBaseFilter* pFilter;
    HRESULT hr = m_pFGControl->GetFG()->AddSourceFilter(strFilename, strFilename, &pFilter);
    if (VFW_E_DUPLICATE_NAME == hr) {

        // try appending %d a few times
        LPWSTR w = new WCHAR[lstrlenW(strFilename) + 10];
        if (NULL == w) {
            return E_OUTOFMEMORY;
        }

        lstrcpyW(w, strFilename);
        LPWSTR pwEnd = &w[lstrlenW(w)];
        for (int i = 0; i < 10; i++) {
            pwEnd[0] = '0' + i;
            pwEnd[1] = L'\0';
            hr = m_pFGControl->GetFG()->AddSourceFilter(strFilename, w, &pFilter);
            if (SUCCEEDED(hr)) {
                break;
            }
        }
        delete [] w;
    }

    if (FAILED(hr)) {
        return hr;
    }

    // wrap this filter in an IFilterInfo
    hr= CFilterInfo::CreateFilterInfo(ppUnk, pFilter);
    pFilter->Release();

    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaControl::get_FilterCollection(
    IDispatch** ppUnk)
{
    HRESULT hr = NOERROR;

    // get an enumerator for the filters in the graph
    IEnumFilters * penum;
    hr = m_pFGControl->GetFG()->EnumFilters(&penum);
    if( FAILED( hr ) ) {
        return hr;
    }

    CFilterCollection * pCollection =
        new CFilterCollection(
                penum,
                NULL,           // not aggregated
                &hr);

    // need to release this - he will addref it first if he
    // holds onto it
    penum->Release();

    if (pCollection == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pCollection;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pCollection->QueryInterface(IID_IDispatch, (void**)ppUnk);

    if (FAILED(hr)) {
        delete pCollection;
    }

    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaControl::get_RegFilterCollection(
    IDispatch** ppUnk)
{
    // create an instance of the mapper
    IFilterMapper2 * pMapper;
    HRESULT hr = CoCreateInstance(
        CLSID_FilterMapper2,
        NULL,
        CLSCTX_INPROC,
        IID_IFilterMapper2,
        (void**) &pMapper);

    if (FAILED(hr)) {
        return hr;
    }

    CRegFilterCollection * pCollection =
        new CRegFilterCollection(
                m_pFGControl->GetFG(),
                pMapper,
                NULL,           // not aggregated
                &hr);

    // need to release this - he will addref it first if he
    // holds onto it
    pMapper->Release();

    if (pCollection == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pCollection;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pCollection->QueryInterface(IID_IDispatch, (void**)ppUnk);

    if (FAILED(hr)) {
        delete pCollection;
    }

    return hr;
}


// --- CImplMediaEvent methods ----------------

//
// Changed IntSmallSet to always use __int64 data type regardless of RM
// because EC_STEP_COMPLETE is defined as 0x23.
//
// StEstrop Oct-21st-99
//

// These definitions have to be added to other dlls that include
// intset.h. Currently, only quartz.dll includes this file.
// Now that IntSmallSet always uses __int64, we should get rid off this.

const __int64 IntSmallSet::One = 1I64;

CImplMediaEvent::CImplMediaEvent(const TCHAR * pName,CFGControl * pFGC)
    : CMediaEvent(pName, pFGC->GetOwner()),
      m_pFGControl(pFGC),
      m_InternalEventsSet( IntSmallSet::One << EC_SHUTTING_DOWN
                         | IntSmallSet::One << EC_SEGMENT_STARTED
                         | IntSmallSet::One << EC_END_OF_SEGMENT
                         | IntSmallSet::One << EC_NOTIFY_WINDOW
                          | IntSmallSet::One << EC_SKIP_FRAMES ),
      m_DefaultedEventsSet( IntSmallSet::One << EC_COMPLETE
                          | IntSmallSet::One << EC_REPAINT
                          | IntSmallSet::One << EC_NEED_RESTART
                          | IntSmallSet::One << EC_STARVATION
                          | IntSmallSet::One << EC_ACTIVATE
                          | IntSmallSet::One << EC_WINDOW_DESTROYED
                          | IntSmallSet::One << EC_DISPLAY_CHANGED
                          | IntSmallSet::One << EC_STEP_COMPLETE
                          | IntSmallSet::One << EC_STATE_CHANGE
                          ),
      m_fMediaEventQId(FALSE)
{
    // EC_STATE_CHANGE is off by default to keep apps from crashing on
    // the event when the graph stops, and the application processes
    // it asynchronously after releasing the graph (Hard Truck 2)
}



STDMETHODIMP
CImplMediaEvent::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if(riid == IID_IMediaEvent || riid == IID_IMediaEventEx) {
        m_fMediaEventQId = TRUE;
    }

    if (riid == IID_IMediaEventSink) {
        return GetInterface( (IMediaEventSink*)this, ppv);
    } else {
        return CMediaEvent::NonDelegatingQueryInterface(riid, ppv);
    }
}


// called by filters to notify the app of events.
// we should simply pass them on to the event store/delivery object
//
// -- however, some of the events are for us and must be handled here.

STDMETHODIMP
CImplMediaEvent::Notify(long EventCode, LONG_PTR lParam1, LONG_PTR lParam2)
{
    HRESULT hr = S_OK;

    if((EventCode == EC_ERRORABORT || EventCode == EC_STREAM_ERROR_STOPPED) &&
       m_SeenEventsSet[EventCode])
    {
        // this is done to keep repaints and such recuing the graph
        // and signalling the same error repeatedly
        DbgLog((LOG_ERROR, 2, TEXT("supressing duplicate error %d"), EventCode));
        return S_OK;
    }

    if(EventCode >= m_SeenEventsSet.Min() &&
       EventCode <= m_SeenEventsSet.Max())
    {
        m_SeenEventsSet += EventCode;
    }

    // handle EC_ACTIVATE, EC _COMPLETE, EC_REPAINT, EC_SHUTTING_DOWN, EC_NEEDRESTART

    const BOOL bDontForward = DontForwardEvent(EventCode);

    // EC_WINDOW_DESTROYED must be handled even if the graph is shutting down.
    // Hence an up-front test.
    if (EventCode == EC_WINDOW_DESTROYED)
    {
        // make sure the resource manager is not still holding this
        // guy as the current focus object
        IUnknown* pUnk;
        IBaseFilter* pFilter = (IBaseFilter*)lParam1;
        hr = pFilter->QueryInterface(IID_IUnknown, (void**)&pUnk);
        ASSERT(SUCCEEDED(hr));
        // If we're not shutting down, and the event has been cancelled,
        // deliver it.  (The QI will have AddRef()'ed the object for us,
        // which we want.  It will be Release()'ed in FreeEventParams().)
        if (!m_pFGControl->IsShutdown() && !bDontForward) goto Deliver;
        hr = m_pFGControl->ReleaseFocus(pUnk);
        // Done synchronously, release params now
        pUnk->Release();
    }
    // EC_COMPLETE needs some handling even if the default handling
    // has been cancelled.  Hence the special case-ing.
    else if (EventCode == EC_COMPLETE)
    {
        hr = ProcessEC_COMPLETE(lParam1, lParam2);
    }
    else // Handle the bulk of the events in a standard fashion.
    {
        // AddRef any stuff that may be needed.
        switch (EventCode)
        {
        case EC_DISPLAY_CHANGED:
            if (lParam2 > 0) {

                DWORD dwPinCount = (DWORD)lParam2;
                IUnknown** ppIUnk = (IUnknown**)lParam1;

                while (dwPinCount--) {

                    IUnknown* pIUnk;

                    pIUnk = *ppIUnk++;
                    if (pIUnk) pIUnk->AddRef();
                }
                break;
            }

            // fall thru to original code

        case EC_REPAINT:
        case EC_WINDOW_DESTROYED:
        case EC_DEVICE_LOST:
        case EC_STREAM_CONTROL_STARTED:
        case EC_STREAM_CONTROL_STOPPED:
            {
                IUnknown * const pIUnk = reinterpret_cast<IUnknown *>(lParam1);
                if (pIUnk) pIUnk->AddRef();
            }
            break;

        case EC_FULLSCREEN_LOST:
        case EC_ACTIVATE:
        case EC_SKIP_FRAMES:
            {
                IUnknown * const pIUnk = reinterpret_cast<IUnknown *>(lParam2);
                if (pIUnk) pIUnk->AddRef();
            }
            break;

        case EC_LENGTH_CHANGED:
            // This is just so IMediaSeeking can fix its m_rtStopTime
            LONGLONG llStop;
            m_pFGControl->m_implMediaSeeking.GetStopPosition(&llStop);
            break;

        case EC_CLOCK_UNSET:
            CFilterGraph* pFG = m_pFGControl->GetFG();
            if( !pFG->mFG_bNoSync )
            {
                // if we're currently using a graph clock, unset it
                pFG->SetSyncSource( NULL );
                pFG->mFG_bNoSync = FALSE; // turn the graph clock back on after clearing the clock
            }
            break;
        }



        if (m_pFGControl->IsShutdown())
        {
            //  Caller doesn't allocate EC_END_OF_SEGMENT stuff
            if (EventCode != EC_END_OF_SEGMENT) {
                RealFreeEventParams( EventCode, lParam1, lParam2 );
            }
            hr = S_FALSE;
        }
        else if (bDontForward)
        {
            switch (EventCode)
            {
            case EC_STARVATION:
                // need to re-cue the graph
                m_pFGControl->m_GraphWindow.PostMessage
                    ( (UINT) AWM_RECUE,
                      (WPARAM) m_pFGControl->m_dwStateVersion,
                      (LPARAM) NULL
                    );
                break;

            case EC_ACTIVATE:
                // do this on a worker thread
                DbgLog((LOG_TRACE, 2, TEXT("Posting AWM_ONACTIVATE")));
                m_pFGControl->m_GraphWindow.PostMessage
                    (   (UINT) AWM_ONACTIVATE,
                        (WPARAM) lParam1,
                        (LPARAM) lParam2
                    );
                break;

            case EC_DISPLAY_CHANGED:
                // reconnect filters on worker thread
                m_pFGControl->m_GraphWindow.PostMessage
                    (   (UINT) AWM_ONDISPLAYCHANGED,
                        (WPARAM) lParam1,
                        (LPARAM) lParam2
                    );
                break;


            case EC_SHUTTING_DOWN:
                // filter graph is being destroyed. after this is completed, we
                // must ensure that no more async events are processed (EC_REPAINT,
                // deferred commands, etc).
                // NB: this will result in a SendMessage, not a PostMessage.
                m_pFGControl->Shutdown();
                break;

            case EC_REPAINT:
                // ask the CFGControl object to do the repaint
                // so that we can share a worker thread
                m_pFGControl->m_GraphWindow.PostMessage
                    (
                        (UINT) AWM_REPAINT,
                        (WPARAM) m_pFGControl->m_dwStateVersion,
                        (LPARAM) lParam1
                    );
                break;

            case EC_NEED_RESTART:
                // do this on a worker thread
                m_pFGControl->SetRestartRequired();
                m_pFGControl->m_GraphWindow.PostMessage
                    (
                        (UINT) AWM_NEEDRESTART,
                        (WPARAM) lParam1,
                        (LPARAM) NULL
                    );
                break;

            case EC_SEGMENT_STARTED:
                m_pFGControl->m_implMediaSeeking.StartSegment(
                    (const REFERENCE_TIME *)lParam1,
                    (DWORD)lParam2);
                break;

            case EC_END_OF_SEGMENT:
                m_pFGControl->m_implMediaSeeking.EndSegment(
                    (const REFERENCE_TIME *)lParam1,
                    (DWORD)lParam2);
                break;

            case EC_STEP_COMPLETE:
                // EC_STEP_COMPLETE's documentation states that lParam1
                // and lParam2 should always be 0.
                ASSERT((0 == lParam1) && (0 == lParam2));

                // We need to be able to cancel this so set a version
                m_pFGControl->m_GraphWindow.PostMessage
                    (
                        (UINT) AWM_STEPPED,
                        (WPARAM) lParam1,
                        (LPARAM) (++m_pFGControl->m_dwStepVersion)

                    );
                break;

            case EC_SKIP_FRAMES:
                // EC_SKIP_FRAMES's lParam1 parameter should not equal 0
                // because it does not make sense to skip 0 frames.
                ASSERT(0 != lParam1);

                // EC_SKIP_FRAMES's lParam2 parameter must be a pointer to 
                // an object which supports the IFrameSkipResultCallback
                // interface.
                ASSERT(NULL != lParam2);

                m_pFGControl->m_GraphWindow.PostMessage(
                        (UINT) AWM_SKIPFRAMES,
                        (WPARAM) lParam1,
                        (LPARAM) lParam2);
                break;

            default:
                RealFreeEventParams( EventCode, lParam1, lParam2 );

            }
        }
        else
        {
Deliver:
            ASSERT(!bDontForward);
            ASSERT(m_fMediaEventQId);
            hr = m_EventStore.Deliver(EventCode, lParam1, lParam2);
        }
    }
    return hr;
}


bool
CImplMediaEvent::DontForwardEvent( long EventCode )
{
    // We handle internally if the event is an internal event, if it
    // is defaulted event that has not been canceled, or if the app is
    // not listening for external events.
    return (m_InternalEventsSet | (m_DefaultedEventsSet & ~m_CancelledEventsSet))[EventCode] ||
           !m_fMediaEventQId;
}


HRESULT
CImplMediaEvent::ProcessEC_COMPLETE(LONG_PTR lParam1, LONG_PTR lParam2)
{
    // Make sure HRESULTs and IBaseFilter pointers can be stored in LONG_PTRs.
    ASSERT( sizeof(HRESULT) <= sizeof(LONG_PTR) );
    ASSERT( sizeof(IBaseFilter*) <= sizeof(LONG_PTR) );

    // Decode lParam2.  This parameter can be NULL or an IBaseFilter pointer.
    // See the DShow documentation for more information on EC_COMPLETE parameters.
    IBaseFilter* pRendererFilter = (IBaseFilter*)lParam2;

    #ifdef DEBUG
    // make sure they sent us a filter or a null
    {
        if(pRendererFilter)
        {
            IBaseFilter *pbfTmp2;
            if(pRendererFilter->QueryInterface(IID_IBaseFilter, (void **)&pbfTmp2) == S_OK)
            {
                ASSERT( ::IsEqualObject( pbfTmp2, pRendererFilter ) );
                EXECUTE_ASSERT(pbfTmp2->Release() > 0);

                // Only filters which meet the filter graph manager's definition of a renderer
                // should send an EC_COMPLETE message.

                // Each renderer supports IMediaSeeking, IMediaPosition or IAMFilterMiscFlags.  A 
                // renderer can also support more than one interface.  A renderer must set the 
                // AM_FILTER_MISC_FLAGS_IS_RENDERER flag if it supports the IAMFilterMiscFlags 
                // interface.
                bool fSupportsIMediaSeeking = false;
                bool fSupportsIMediaPosition = false;
                bool fSetAM_FILTER_MISC_FLAGS_IS_RENDERER = false;
    
                IMediaSeeking* pMediaSeeking;
                IMediaPosition* pMediaPosition;
                IAMFilterMiscFlags* pFilterMiscFlags;

                HRESULT hr = pRendererFilter->QueryInterface(IID_IMediaSeeking, (void **)&pMediaSeeking);
                if(SUCCEEDED(hr)) {
                    pMediaSeeking->Release();
                    fSupportsIMediaSeeking = true;
                }

                hr = pRendererFilter->QueryInterface(IID_IMediaPosition, (void **)&pMediaPosition);
                if(SUCCEEDED(hr)) {
                    pMediaPosition->Release();
                    fSupportsIMediaPosition = true;
                }
            
                hr = pRendererFilter->QueryInterface(IID_IAMFilterMiscFlags, (void **)&pFilterMiscFlags);
                if(SUCCEEDED(hr)) {
                    DWORD dwFlags = pFilterMiscFlags->GetMiscFlags();

                    // A renderer must set the AM_FILTER_MISC_FLAGS_IS_RENDERER flag if it supports 
                    // IAMFilterMiscFlags.
                    ASSERT(AM_FILTER_MISC_FLAGS_IS_RENDERER & dwFlags);

                    if(AM_FILTER_MISC_FLAGS_IS_RENDERER & dwFlags) {
                        fSetAM_FILTER_MISC_FLAGS_IS_RENDERER = true;
                    }

                    pFilterMiscFlags->Release();
                }

                // A renderer must support IMediaSeeking, IMediaPosition or IAMFilterMiscFlags.  Also
                // a renderer must set the AM_FILTER_MISC_FLAGS_IS_RENDERER flag if it supports 
                // IAMFilterMiscFlags.
                ASSERT(fSupportsIMediaSeeking ||
                       fSupportsIMediaPosition ||
                       fSetAM_FILTER_MISC_FLAGS_IS_RENDERER);

                // This ASSERT is commented out because it could cause a deadlock.  It could 
                // cause a deadlock because IsRenderer() calls IEnumPins::Next() and Next() can
                // hold the filter lock.  For more information on Direct Show filter locking, 
                // see the "Threads and Critical Sections" article in the DirectX 8 documentation.
//                ASSERT(S_OK == m_pFGControl->IsRenderer(pRendererFilter));
            }
            else
            {
                DbgBreak("EC_COMPLETE: bogus filter argument");
            }
        }
    }
    #endif

    const bool bDontForward = DontForwardEvent( EC_COMPLETE );

    if (m_pFGControl->IsShutdown())
    {
        return S_FALSE;
    }

    CAutoLock alEventStoreLock( GetEventStoreLock() );

    bool fRenderersStillRenderering;

    HRESULT hr = m_pFGControl->RecordEC_COMPLETE(pRendererFilter, &fRenderersStillRenderering);
    if (FAILED( hr )) {
        return hr;
    }

    // WaitForCompletion wants EC_COMPLETE and wants above default
    // handling. Individual filter EC_COMPLETEs are sent with an
    // optional filter pointer. the final EC_COMPLETE is sent with
    // a null filter pointer.
    if( !bDontForward )
    {
        // must have used IMediaEvent to cancel default handler
        ASSERT(m_fMediaEventQId);

        if( NULL != pRendererFilter )
        {
            pRendererFilter->AddRef();
        }

        hr= m_EventStore.Deliver(EC_COMPLETE, lParam1, (LONG_PTR)pRendererFilter);
        if (FAILED(hr)) {
            // Deliver() releases pRendererFilter if a failure occurs.  It releases
            // pRendererFilter when it calls CImplMediaEvent::RealFreeEventParams().
            return hr;
        }
    }
    else
    {
        if (!fRenderersStillRenderering)
        {
            // This is the special case where we must ensure that the
            // lock on m_Lock is maintained over both the RecordEC_COMPLETE()
            // call AND the delivery of the event to the event store.
            // WaitForCompletion takes the same lock and checks both
            // the renderer count and the number of items in the event queue -
            // both being zero will imply that there are no more EC_COMPLETEs
            // to come from the filters, nor is there one "in-flight"
            // from here.

            hr= m_EventStore.Deliver(EC_COMPLETE, lParam1,0);
            if (FAILED(hr)) {
                return hr;
            }
        }
    }

    return S_OK;
}


// IMediaEvent methods

STDMETHODIMP
CImplMediaEvent::GetEventHandle(OAEVENT* lhEvent)
{
    HANDLE hEvent;
    HRESULT hr;
    hr = m_EventStore.GetEventHandle(&hEvent);
    *lhEvent = (OAEVENT)hEvent;
    return hr;
}


STDMETHODIMP
CImplMediaEvent::GetEvent(
    long * lEventCode,
    LONG_PTR * lParam1,
    LONG_PTR * lParam2,
    long msTimeout
    )
{
    *lParam1 = 0;
    *lParam2 = 0;
    *lEventCode = 0;
    return m_EventStore.Collect(lEventCode, lParam1, lParam2, msTimeout);
}


// waits up to dwTimeout millisecs for an EC_COMPLETE or an
// abort code. Other events will be discarded.
STDMETHODIMP
CImplMediaEvent::WaitForCompletion(
    long msTimeout,
    long * pEvCode)
{
    // evcode should be 0 if we abort
    *pEvCode = 0;

    // Don't allow this in the nothread case - it's too complicated
    // to work out which messages to allow
    if (GetWindowThreadProcessId(m_pFGControl->GetWorkerHWND(), NULL) != g_dwObjectThreadId) {
        return E_NOTIMPL;
    }

    HRESULT hr;

    const HRESULT hrTIMEOUT = E_ABORT;

    LONG lEvCode;
    LONG_PTR lParam1,lParam2;

    // We initially use a  time out of zero as we can clear out the event list
    // THEN check we're in the right state, THEN start the main waiting.
    long msOurTimeout = 0;

    LONG msTimeStart;

    for(;;) {
        //  Don't allow if stopped or paused by the application - otherwise
        //  it's never going to complete
        if (m_pFGControl->m_LieState != State_Running) {
            return VFW_E_WRONG_STATE;
        }

        // need to wait for timeout TOTAL not per call
        // so remember the time now and subtract this (if not INFINITE)
        msTimeStart = GetTickCount();

        HANDLE hEvent;
        m_EventStore.GetEventHandle(&hEvent);

        DWORD dwResult = WaitDispatchingMessages(hEvent, msOurTimeout);

        if (!(m_EventStore.m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY)) {
            hr = GetEvent( &lEvCode, &lParam1, &lParam2, 0);
        } else {
            hr = dwResult == WAIT_TIMEOUT ? hrTIMEOUT : S_OK;
        }

        // So, if we've just been cleaning out the list and it's now empty...
        if ( hr == hrTIMEOUT )
        {
            // Check we stand a cat in hells chance of seeing completion

            // Check both the renderer count and the number of items in the event queue -
            // both being zero will imply that there are no more EC_COMPLETEs
            // to come from the filters, nor is there one "in-flight"
            // from the event sink.
            BOOL bStateOK;
            {
                // Although outstanding EC_COMPLETEs will take a lock on the filter graph,
                // we need to have it taken BEFORE we lock the event store,
                // otherwise deadlock can ensue.
                CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());
                LockEventStore();
                bStateOK = (m_pFGControl->OutstandingEC_COMPLETEs() > 0 || NumberOfEventsInStore() > 0) ;
                UnlockEventStore();
            }

            if (!bStateOK) return VFW_E_WRONG_STATE;

            if ( msOurTimeout == 0 ) {
                msOurTimeout = msTimeout;
            }
        }
        else if (SUCCEEDED(hr))
        {
            if (m_EventStore.m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY) {
                return S_OK;
            }
            // Free anything that needs to be freed or Release()'ed
            RealFreeEventParams( lEvCode, lParam1, lParam2 );

            switch(lEvCode) {

            case EC_COMPLETE:
            case EC_USERABORT:
            case EC_ERRORABORT:
                *pEvCode = lEvCode;
                return S_OK;
            }
        }
        else break; // A non-timeout error! Give up.

        if (msTimeout == INFINITE) continue;

        msTimeout -= GetTickCount() - msTimeStart;
        if (msTimeout <= 0) {
            // hr might be S_OK if we just got an event code we
            // weren't interested in
            hr = hrTIMEOUT;
            break;
        }
    }

    return hr;
}


// cancels any system handling of the specified event code
// and ensures that the events are passed straight to the application
// (via GetEvent) and not handled. A good example of this is
// EC_REPAINT: default handling for this ensures the painting of the
// window and does not get posted to the app.
STDMETHODIMP
CImplMediaEvent::CancelDefaultHandling(long lEvCode)
{
    // Note: if lEvCode is out of bounds, [] will return
    // false, it gets !'ed to true, and we return E_INVALIDARG.
    if ( !m_DefaultedEventsSet[lEvCode]) return E_INVALIDARG;
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    // The following check may be a nice idea, but isn't
    // really needed.  Let's just save the byte count.
    // if ( m_CancelledEventsSet[lEvCode] ) return S_FALSE;
    m_CancelledEventsSet += lEvCode;
    return S_OK;
}


// restore the normal system default handling that may have been
// cancelled by CancelDefaultHandling().
STDMETHODIMP
CImplMediaEvent::RestoreDefaultHandling(long lEvCode)
{
    // Note: if lEvCode is out of bounds, [] will return
    // false, it gets !'ed to true, and we return E_INVALIDARG.
    if ( !m_DefaultedEventsSet[lEvCode] ) return E_INVALIDARG;
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    // The following check may be a nice idea, but isn't
    // really needed.  Let's just save the byte count.
    // if ( !m_CancelledEventsSet[lEvCode] ) return S_FALSE;
    m_CancelledEventsSet -= lEvCode;
    return S_OK;
}


// Free any resources associated with the parameters to an event.
// Event parameters may be LONGs, IUnknown* or BSTR. No action
// is taken with LONGs. IUnknown are passed addrefed and need a
// Release call. BSTR are allocated by the task allocator and will be
// freed by calling the task allocator.

// Functional version.  There was NEVER any need to make this a method!
HRESULT
CImplMediaEvent::RealFreeEventParams(long lEvCode,LONG_PTR lParam1,LONG_PTR lParam2)
{
    switch (lEvCode)
    {
    case EC_DISPLAY_CHANGED:
        {
            DWORD dwNumPins = (DWORD)lParam2;
            if (dwNumPins == 0) {
                IUnknown * const pIUnk = reinterpret_cast<IUnknown *>(lParam1);
                if (pIUnk) pIUnk->Release();
            }
            else {

                IUnknown **ppPin = reinterpret_cast<IUnknown **>(lParam1);
                while (dwNumPins--) {
                    (*ppPin)->Release();
                    ppPin++;
                }
                CoTaskMemFree((IPin **)lParam1);
            }
        }
        break;

    case EC_REPAINT:
    case EC_WINDOW_DESTROYED:
    case EC_DEVICE_LOST:
    case EC_STREAM_CONTROL_STARTED:
    case EC_STREAM_CONTROL_STOPPED:
        {
            IUnknown * const pIUnk = reinterpret_cast<IUnknown *>(lParam1);
            if (pIUnk) pIUnk->Release();
        }
        break;

    case EC_FULLSCREEN_LOST:
    case EC_ACTIVATE:
    case EC_SKIP_FRAMES:
        {
            IUnknown * const pIUnk = reinterpret_cast<IUnknown *>(lParam2);
            if (pIUnk) pIUnk->Release();
        }
        break;

    case EC_OLE_EVENT:
    case EC_STATUS:
        {
            FreeBSTR(reinterpret_cast<BSTR *>(&lParam1));
            FreeBSTR(reinterpret_cast<BSTR *>(&lParam2));
        }
        break;

    case EC_END_OF_SEGMENT:
        CoTaskMemFree((PVOID)lParam1);
        break;

    case EC_ERRORABORTEX:
        {
            FreeBSTR(reinterpret_cast<BSTR *>(&lParam2));
        }
        break;

    case EC_COMPLETE:
        {
            IBaseFilter * const pbf = reinterpret_cast<IBaseFilter *>(lParam2);
            if (pbf) pbf->Release();
        }
        break;

    case EC_WMT_EVENT:
        {
            WM_GET_LICENSE_DATA *pLicense = NULL;
            WM_INDIVIDUALIZE_STATUS *pIndStatus = NULL;
        
            // free any memory allocated for WindowsMedia events
            if( lParam2 )
            {
                switch( lParam1 )
                {
                    case WMT_NO_RIGHTS:
                        CoTaskMemFree( (PVOID) ((AM_WMT_EVENT_DATA*)lParam2)->pData);
                        CoTaskMemFree( (PVOID) lParam2);
                        break;

                    case WMT_ACQUIRE_LICENSE:
                    case WMT_NO_RIGHTS_EX:
                        pLicense = (WM_GET_LICENSE_DATA *)((AM_WMT_EVENT_DATA *)lParam2)->pData;
                        if( pLicense )
                        {
                            CoTaskMemFree( pLicense->wszURL );
                            CoTaskMemFree( pLicense->wszLocalFilename );
                            CoTaskMemFree( pLicense->pbPostData );
                            CoTaskMemFree( pLicense );
                        }
                        CoTaskMemFree( (PVOID) lParam2);
                        break;
                        
                    case WMT_NEEDS_INDIVIDUALIZATION:
                        // no memory allocated for this
                        break;
                        
                    case WMT_INDIVIDUALIZE:
                        pIndStatus = (WM_INDIVIDUALIZE_STATUS *)((AM_WMT_EVENT_DATA *)lParam2)->pData;
                        if( pIndStatus )
                        {
                            CoTaskMemFree( pIndStatus->pszIndiRespUrl );
                            CoTaskMemFree( pIndStatus );
                        }
                        CoTaskMemFree( (PVOID) lParam2);
                        break;
                    
                }
            }
        }
        break;


    }


    return S_OK;
}

STDMETHODIMP
CImplMediaEvent::FreeEventParams(long lEvCode,LONG_PTR lParam1,LONG_PTR lParam2)
{
    return RealFreeEventParams(lEvCode, lParam1, lParam2);
}

// Register a window to send messages to when events occur
// Parameters:
//
//    hwnd - handle of window to notify -
//           pass NULL to stop notification
//    lMsg - Message id to pass messages with
//
STDMETHODIMP
CImplMediaEvent::SetNotifyWindow( OAHWND hwnd, long lMsg, LONG_PTR lInstanceData )
{
    if (hwnd != NULL && !IsWindow((HWND)hwnd)) {
        return E_INVALIDARG;
    } else {
        m_EventStore.SetNotifyWindow((HWND)hwnd, (UINT)lMsg, lInstanceData);
        return S_OK;
    }
}


STDMETHODIMP CImplMediaEvent::SetNotifyFlags(long lNotifyFlags)
{
    if (lNotifyFlags & ~AM_MEDIAEVENT_NONOTIFY) {
        return E_INVALIDARG;
    }

    CAutoLock lck(&m_EventStore.m_Lock);
    if (lNotifyFlags & AM_MEDIAEVENT_NONOTIFY) {

        if (!(m_EventStore.m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY)) {
           //  Remove all events
           long lEvent;
           LONG_PTR lParam1, lParam2;
           while (S_OK == m_EventStore.Collect(&lEvent, &lParam1, &lParam2, 0)) {
               FreeEventParams(lEvent, lParam1, lParam2);
           }

           //  Set the state of the event
           m_EventStore.m_dwNotifyFlags = (DWORD)lNotifyFlags;
        }
    } else {
        if (m_EventStore.m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY) {
            ASSERT(NumberOfEventsInStore() == 0);
        }
        ResetEvent(m_EventStore.m_hEvent);
        m_EventStore.m_dwNotifyFlags = lNotifyFlags;
    }
    return S_OK;
}
STDMETHODIMP CImplMediaEvent::GetNotifyFlags(long *plNotifyFlags)
{
    if (plNotifyFlags == NULL) {
        return E_POINTER;
    }
    *plNotifyFlags = (long)m_EventStore.m_dwNotifyFlags;
    return S_OK;
}

// ---  event store methods ---


CImplMediaEvent::CEventStore::CEventStore()
    : m_list(NAME("Event list")),
      m_dwNotifyFlags(0),
      m_hwndNotify(NULL)
{
    // we no longer allow apps to pass us their event handle.
    // We create a manual-reset event, and will pass it to them
    // on request
    m_hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
}


CImplMediaEvent::CEventStore::~CEventStore()
{
    for(;;) {
        CNotifyItem *pItem = m_list.RemoveHead();

        if (pItem == NULL) {
            break;
        }
        RealFreeEventParams( pItem->m_Code, pItem->m_Param1, pItem->m_Param2 );
        delete pItem;
    }

    // we own the event handle and so must delete it
    CloseHandle(m_hEvent);
}


HRESULT
CImplMediaEvent::CEventStore::Deliver(long lCode, LONG_PTR l1, LONG_PTR l2)
{
    // hold critsec around access to list, and around
    // set/reset of event
    CAutoLock lock(&m_Lock);

    if (!(m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY)) {
        CNotifyItem * pItem = new CNotifyItem(lCode, l1, l2);
        if (NULL == pItem || NULL == m_list.AddTail(pItem)) {
            delete pItem;
            RealFreeEventParams( lCode, l1, l2);
            return E_OUTOFMEMORY;
        }


        ASSERT(m_hEvent);

        // this event must be set whenever there are events in the queue
        SetEvent(m_hEvent);

        // Notify the application via a window message if a notify window is
        // set
        if (m_hwndNotify != NULL) {
            PostMessage(m_hwndNotify, m_uMsgId, 0, m_lInstanceData);
        }
    } else {
        if (lCode == EC_COMPLETE) {
            SetEvent(m_hEvent);
        }

        RealFreeEventParams( lCode, l1, l2 );
    }


    return S_OK;
}


HRESULT
CImplMediaEvent::CEventStore::Collect(
    long *plCode, LONG_PTR* pl1, LONG_PTR*pl2, long msTimeout)
{

    CNotifyItem * pItem = NULL;
    for (;;) {

        HANDLE hEvent;

        // hold the lock when querying, but not
        // when waiting
        {
            CAutoLock lock(&m_Lock);

            // remember that while we are not holding the critsec the
            // event may change or go away
            hEvent = m_hEvent;
            if (!hEvent) {
                return E_INVALIDARG;
            }

            pItem = m_list.RemoveHead();

            // if the list is now empty, reset the event (whether or
            // not we got an item)
            if (!m_list.GetCount()) {
                ResetEvent(m_hEvent);
            }
        }

        // if there is an item, then we can return it.
        if (pItem) {
            break;
        }

        // use the cached private hEvent since we no longer
        // hold the lock protecting m_hEvent
        if (msTimeout == 0 ||
            WaitForSingleObject(hEvent, msTimeout) == WAIT_TIMEOUT) {
            return E_ABORT;
        }
    }

    ASSERT(pItem);

    pItem->Collect(plCode, pl1, pl2);

    // pItem was allocated by the new in CEventStore::Deliver
    delete pItem;
    pItem = NULL;

    // handle auto-reset events by ensuring that the event is still set
    // on exit if there are still events
    {
        CAutoLock lock(&m_Lock);

        if (m_list.GetCount()) {
            SetEvent(m_hEvent);
        }
    }

    return S_OK;
}


// return the event handle used by this event collection.
HRESULT
CImplMediaEvent::CEventStore::GetEventHandle(HANDLE * phEvent)
{

    // we create the event so there must be one
    ASSERT(m_hEvent);

    *phEvent = m_hEvent;

    return S_OK;
}


void CImplMediaEvent::CEventStore::ClearEvents( long ev_code )
{
    // This is (currently) only intended for
    // removing EC_COMPLETEs before a Run().
    ASSERT( ev_code == EC_STEP_COMPLETE || ev_code == EC_COMPLETE || ev_code == EC_END_OF_SEGMENT );

    CAutoLock lock(&m_Lock);

    POSITION pos = m_list.GetHeadPosition();
    while (pos)
    {
        ASSERT(!(m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY));
        // "NextPos" has got to be one of the worst misdenomas in the product!
        // It means "give me a pointer to the data stored at current pos and increment
        // pos to represent the next element in the list"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        const POSITION thispos = pos;
        CNotifyItem * p = m_list.GetNext(pos);
        if ( p->m_Code == ev_code ) {
            m_list.Remove(thispos);
            RealFreeEventParams(p->m_Code, p->m_Param1, p->m_Param2);
            delete p;
        }
    }
    if ((m_dwNotifyFlags & AM_MEDIAEVENT_NONOTIFY) && ev_code == EC_COMPLETE) {
        ResetEvent(m_hEvent);
    }
}

void CImplMediaEvent::CEventStore::SetNotifyWindow( HWND hwnd, UINT uMsg, LONG_PTR lInstanceData)
{
    CAutoLock lock(&m_Lock);

    //  Save input parameters
    m_hwndNotify = hwnd;
    m_uMsgId     = uMsg;
    m_lInstanceData = lInstanceData;

    //  Notify the application straight away if there are any messages
    if (m_list.GetCount() != 0) {
        PostMessage(hwnd, uMsg, 0, lInstanceData);
    }
}


// !!! ProcessCmdDue will never get called right now, but I think that's
// okay, since nothing is ever added to the queue!


// Called by our repaint handling, we look to see if the pin we are passed is
// connected and of so, if the connector supports EC_REPAINT handling through
// an IMediaEventSink interface. If all goes to plan the connector pin will
// handle the EC_REPAINT so we won't need to touch the entire filtergraph. We
// do this to improve performance and also to support low frame rate video in
// Internet playback where the decoder can keep a copy of the last image sent

LRESULT CFGControl::WorkerPinRepaint(IPin *pPin)
{
    IMediaEventSink *pSink;
    IPin *pSourcePin;
    HRESULT hr;

    // Do we have a pin to work with
    if (pPin == NULL) {
        NOTE("No pin given");
        return (LRESULT) 0;
    }

    // Check the filter is connected

    hr = pPin->ConnectedTo(&pSourcePin);
    if (FAILED(hr)) {
        NOTE("Not connected");
        return (LRESULT) 0;
    }

    // Does the pin support IMediaEventSink

    hr = pSourcePin->QueryInterface(IID_IMediaEventSink,(void **)&pSink);
    if (FAILED(hr)) {
        NOTE("No IMediaEventSink");
        pSourcePin->Release();
        return (LRESULT) 0;
    }

    // Can the attached pin handle the repaint

    hr = pSink->Notify(EC_REPAINT,0,0);
    if (SUCCEEDED(hr)) {
        NOTE("Pin handled EC_REPAINT");
    }

    pSourcePin->Release();
    pSink->Release();
    return (hr == S_OK ? 1 : 0);
}


// Sent by renderers when they need another image to draw. The normal action
// for this is if we're paused we just put_CurrentPosition of the current
// position to generate a flush and resend. If we're stopped then we pause
// the graph and afterwards stop it again. However we may optionally be sent
// the pin that is needing the repaint - in which case we query the pin for
// the attached output pin and then try and get an IMediaEventSink from it.
// If successful we pass the EC_REPAINT to it first - and if that succeeds
// then we know the pin has processed it. If any of this should fail then we
// do the normal repaint handling - except if running when we just ignore it

LRESULT
CFGControl::WorkerRepaint(DWORD dwStateVersion, IPin *pPin)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    if (IsShutdown()) {
        NOTE("In shutdown");

    } else if (m_dwStateVersion != dwStateVersion) {
        NOTE("m_dwStateVersion has changed");

    } else {

        // Ask the CFGControl object what state it has been told

        const FILTER_STATE fs_start = m_LieState;

        // Can the attached pin handle the repaint first

        if (fs_start == State_Running || fs_start == State_Paused) {
            if (WorkerPinRepaint(pPin) == (LRESULT) 1) {
                NOTE("Pin repainted");
                return (LRESULT) 0;
            }
        }

        // Otherwise ignore EC_REPAINTs while running

        if (fs_start == State_Running) {
            NOTE("Running ignored");
            return (LRESULT) 0;
        }

        // Get the current position and seek back to it.
        if (fs_start == State_Paused) {

            // If the graph is not seekable, forget it

            IMediaPosition * pMP = &m_implMediaPosition;
            {
                REFTIME tNow;

                /*  Note -  this is NOT accurate and could seek to
                    a different position because the position we
                    get is calculated by the clock but the position
                    we seek to is calculate by the parser and both
                    may have inaccuracies
                */
                HRESULT hr = pMP->get_CurrentPosition(&tNow);
                if (SUCCEEDED(hr)) {
                    // Wait until paused again for new data to arrive
                    pMP->put_CurrentPosition(tNow);
                }
            }
            return (LRESULT) 0;
        }

        ASSERT(fs_start == State_Stopped);

        // From stopped, we pause and then stop again
        // S_FALSE from state transition means async completion
        CFilterGraph * const pFG = GetFG();

        HRESULT hr = pFG->CFilterGraph::Pause();

        if(SUCCEEDED(hr))
        {
            //  Pass on for processing when the pause completes
            return DeferCued(AWM_REPAINT, State_Stopped);
        }
    }
    return (LRESULT) 0;
}


// Handle a recue request after data starvation

LRESULT
CFGControl::WorkerRecue( DWORD dwStateVersion )
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());
    HRESULT hr;

    if (IsShutdown()) {
        NOTE("In shutdown");
        return (LRESULT) 0;
    }

    if (m_dwStateVersion!= dwStateVersion) {
        NOTE("m_dwStateVersion has changed");
        return (LRESULT) 0;
    }

    if (m_LieState != State_Running) {
        // recue only makes sense when running
        return (LRESULT) 0;
    }

    // pause everyone
    hr = GetFG()->CFilterGraph::Pause();
    // whether or not that failed, continue with the play

    // wait for pause to complete
    // (S_FALSE from state transition means async completion)
    return DeferCued(AWM_RECUE, State_Running);
}


// The user is allowed now to change display modes without rebooting, when a
// renderer connects it typically picks a format that can be drawn well. The
// user changing modes may cause the format to become bad. Video renderers
// will send us an EC_DISPLAY_CHANGED message with an optional pin when this
// happens - we use the pin to reconnect it, the process of reconnecting the
// pin gives the renderer a chance to pick another format. Note we connect
// indirectly if necessary and also manage the graph state changes as we can
// only connect filters while a graph is stopped (this may change in future)

LRESULT
CFGControl::WorkerDisplayChanged(IPin **ppPin, DWORD dwPinCount)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    IPin *pConnected = NULL;    // Other connected
    IPin *ppinIn;               // The input pin
    IPin *ppinOut;              // The output pin
    REFTIME tNow;               // Current time
    HRESULT hrTNow;             // is time valid

    // Is the graph shutting down

    if (IsShutdown()) {
        NOTE("In shutdown");
        return (LRESULT) 0;
    }


    // Did the renderer pass us a pin

    if (*ppPin == NULL && dwPinCount == 1) {
        NOTE("No pin passed");
        return (LRESULT) 0;
    }


    // Save the current state and position and stop the graph

    IMediaPosition* const pMP = &m_implMediaPosition;
    hrTNow = pMP->get_CurrentPosition(&tNow);
    CFilterGraph * const pFG = GetFG();
    const FILTER_STATE State = m_LieState;

    pFG->CFilterGraph::Stop();

    CFilterGraph * const m_pGraph = GetFG();

    while (dwPinCount--) {

        // Disconnect and reconnect the filters

        // Find who it's connected to

        (*ppPin)->ConnectedTo(&pConnected);
        if (pConnected == NULL) {
            NOTE("No peer pin");
            return (LRESULT) 0;
        }

        // Find which pin is which, set ppIn, ppinOut

        PIN_DIRECTION pd;
        HRESULT hr = (*ppPin)->QueryDirection(&pd);
        ASSERT(SUCCEEDED(hr));

        if (pd == PINDIR_INPUT) {
            ppinIn = *ppPin;
            ppinOut = pConnected;
        } else {
            ppinIn = pConnected;
            ppinOut = *ppPin;
        }

        m_pGraph->CFilterGraph::Disconnect(ppinOut);
        m_pGraph->CFilterGraph::Disconnect(ppinIn);
        hr = m_pGraph->CFilterGraph::Connect(ppinOut,ppinIn);
        pConnected->Release();

        // If it failed then send an EC_ERROR_ABORT

        if (FAILED(hr)) {
            NOTE("Could not reconnect the rendering filter");
            Notify(EC_ERRORABORT,VFW_E_CANNOT_CONNECT,0);
        }

        // Advance to the next pin
        ppPin++;
    }

    if (State != State_Stopped) {

        if (hrTNow == S_OK) {
            pMP->put_CurrentPosition(tNow);
        }

        NOTE("Pausing graph...");
        pFG->CFilterGraph::Pause();

        // Was the graph originally running

        if (State == State_Running) {
            // If not complete - we need to wait
            DeferCued(AWM_ONDISPLAYCHANGED, State_Running);
        }
    }

    return (LRESULT) 0;
}

// Looks after processing EC_ACTIVATE event codes

LRESULT
CFGControl::WorkerActivate(IBaseFilter *pFilter,BOOL bActive)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());
    if (IsShutdown()) {
        NOTE("In shutdown");
    } else {

        m_implVideoWindow.OnActivate(bActive, pFilter);

        // tell the resource manager that focus has changed
        // -- focus object should be the IUnknown of the filter.

        // only interested in activation, not deactivation
        if (bActive == TRUE) {
            SetFocus(pFilter);
        }
    }
    return (LRESULT) 0;
}


LRESULT
CFGControl::WorkerSkipFrames(DWORD dwNumFramesToSkip, IFrameSkipResultCallback* pFSRCB)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());
    CFilterGraph* pFG = GetFG();

    HRESULT hr = pFG->SkipFrames(dwNumFramesToSkip, NULL, pFSRCB);

    pFSRCB->FrameSkipStarted(hr);
    pFSRCB->Release();

    return (LRESULT) 0;
}


LRESULT
CFGControl::WorkerFrameStepFinished(DWORD dwStepVersion)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    if (m_dwStepVersion == dwStepVersion) {
        CFilterGraph* pFG = GetFG();

        //  We're still on!
        //  Pause the graph because the frame we want
        // has already gone thru the gate.
        if (pFG->BlockAfterFrameSkip()) {
            m_implMediaControl.StepPause();
            //  Deliver to the app
            m_implMediaEvent.Deliver(EC_STEP_COMPLETE, 0, 0);
        } else if (pFG->DontBlockAfterFrameSkip()) {
            IFrameSkipResultCallback* pFSRCB = pFG->GetIFrameSkipResultCallbackObject();
            pFG->CancelStepInternal(FSN_DO_NOT_NOTIFY_FILTER_IF_FRAME_SKIP_CANCELED);
            pFSRCB->FrameSkipFinished(S_OK);
            pFSRCB->Release();
        } else {
            // This case should never occur.
            DbgBreak("ERROR: An illegal case occurred  in CFGControl::WorkerFrameStepFinished()");
        }
    }

    return (LRESULT) 0;
}


// Restart the graph when resource is re-acquired - this means a
// pause/put_Current(get_Current)/Run cycle.
// If bStop is TRUE always stop the graph first if it's not stopped

LRESULT
CFGControl::WorkerRestart(BOOL bStop)
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());

    if (IsShutdown()) {
        NOTE("In shutdown");
        return (LRESULT) 0;
    }

    //  Check if we've already been stopped or restarted
    if (!CheckRestartRequired()) {
        DbgLog((LOG_TRACE, 1, TEXT("Blowing off WorkerRestart")));
        return (LRESULT) 0;
    }

    //  Aim to preserve the current graph state
    const FILTER_STATE fs_start = GetFilterGraphState();

    if (fs_start != State_Stopped) {

        HRESULT hr;
        if (!bStop) {
            GetFG()->CFilterGraph::Pause();
            IMediaPosition * const pMP = &m_implMediaPosition;
            {
                REFTIME tNow;
                hr = pMP->get_CurrentPosition(&tNow);
                if (SUCCEEDED(hr)) {
                    hr = pMP->put_CurrentPosition(tNow);
                }
                if (FAILED(hr)) {
                    bStop = TRUE;
                }
            }
        }
        if (bStop) {

            GetFG()->CFilterGraph::Stop();
        }


        if (fs_start == State_Running) {
            IssueRun();
        } else {
            if (bStop) {
                GetFG()->CFilterGraph::Pause();
            }
        }
    }
    return (LRESULT) 0;
}


// Stops any more async events from being started

LRESULT
CFGControl::WorkerShutdown()
{
    CAutoMsgMutex lock(GetFilterGraphCritSec());
    ASSERT(IsShutdown());
    return (LRESULT) 1;
}


// Pass top level window messages onto the graph. The plug in distributor has
// a worker thread which also keeps a window. The worker thread is sent and
// posted messages to get it to do things. It also keeps an eye out for some
// top level only messages such as WM_PALETTECHANGED so that we can send them
// on to any video renderer we made a child window. So a renderer sitting in
// a VB form would not normally receive these messages which it needs to work

LRESULT
CFGControl::WorkerPassMessageOn(HWND hwnd, UINT uMsg,WPARAM wParam,LPARAM lParam)
{
    // Are we currently shutting down
    if (IsShutdown()) {
        NOTE("In shutdown");
        return (LRESULT) 0;
    }

    m_implVideoWindow.NotifyOwnerMessage((OAHWND) hwnd,
                                                 (UINT) uMsg,
                                                 (WPARAM) wParam,
                                                 (LPARAM) lParam);
    return (LRESULT) 0;
}


// Constructor for worker window object

CFGControl::CGraphWindow::CGraphWindow(CFGControl *pFGControl) :
    CBaseWindow(FALSE, true),     // ask the base class NOT to get a DC
                                  // but use PostMessage on destroy
    m_pfgc(pFGControl),
    m_bThreadExitCalled(FALSE)
{
    ASSERT(m_pfgc);
}

	
// When we call PrepareWindow in our constructor it will call this method as
// it is going to create the window to get our window and class styles. The
// return code is the class's name and must be allocated in static storage

LPTSTR CFGControl::CGraphWindow::GetClassWindowStyles(DWORD *pClassStyles,
                                                      DWORD *pWindowStyles,
                                                      DWORD *pWindowStylesEx)
{
    *pClassStyles = (DWORD) 0;
    *pWindowStyles = WS_OVERLAPPEDWINDOW;
    *pWindowStylesEx = (DWORD) 0;
    return TEXT("FilterGraphWindow");
}


// Called first for each message posted or sent to the window

LRESULT CFGControl::CGraphWindow::OnReceiveMessage(
                                     HWND hwnd,          // Window handle
                                     UINT uMsg,          // Message ID
                                     WPARAM wParam,      // First parameter
                                     LPARAM lParam)      // Other parameter
{
    // Hook this to prepare our thread
    if (uMsg == WM_NCCREATE) {
        m_pfgc->OnThreadInit(hwnd);
    }

    switch(uMsg) {

        // Pass these onto the filtergraph
        case WM_SYSCOLORCHANGE:
        case WM_PALETTECHANGED:
        case WM_DEVMODECHANGE:
        case WM_DISPLAYCHANGE:
        {
            NOTE("Message received");
            if (InSendMessage()) {
                PostMessage(uMsg, wParam, lParam);
            } else {
                m_pfgc->WorkerPassMessageOn(m_hwnd, uMsg,wParam,lParam);
            }
            return (LRESULT) 0;
        }

#ifdef FG_DEVICE_REMOVAL
      case WM_DEVICECHANGE:
      {
          PDEV_BROADCAST_DEVICEINTERFACE  pbdi;

          if (DBT_DEVICEARRIVAL != wParam && DBT_DEVICEREMOVECOMPLETE != wParam)
          {
              break;
          }

          pbdi = (PDEV_BROADCAST_DEVICEINTERFACE)lParam;

          if ( pbdi->dbcc_devicetype != DBT_DEVTYP_DEVICEINTERFACE )
          {
              break;
          }

          ASSERT(pbdi->dbcc_name[0]);
          m_pfgc->DeviceChangeMsg((DWORD)wParam, pbdi);

          break;
      }
#endif

        case WM_TIMER:
        {
            NOTE("Timer message");
            if (wParam == TimerId) {
                CAutoMsgMutex lock(m_pfgc->GetFilterGraphCritSec());
                ::KillTimer(hwnd, TimerId);
                DbgLog((LOG_TRACE, 2, TEXT("CheckCued on timer")));
                m_pfgc->CheckCued();
                return (LRESULT) 0;
            } else {
                DbgBreak("Unexpected timer message");
            }
            break;
        }

        // Make sure no more async events are started
        case AWM_SHUTDOWN:
        {
            NOTE("AWM_SHUTDOWN");
            //  Flush the queue
            MSG msg;

            //  Flush the queue - we must do this before
            //  we destroy the window otherwise we might lose
            //  messages that actually contain refcounts (
            //  like AWM_DISPLAYCHANGED, and AWM_ACTIVATE)
            //
            //  Note that we have to be careful not to get into
            //  a loop here because AWM_SHUTDOWN is sent via SendMessage
            //  but OnReceiveMessage reposts messages to ourselves if
            //  InSendMessage() returns TRUE, so only process our
            //  special messages here
            while (PeekMessage(&msg, hwnd, AWM_RESOURCE_CALLBACK, AWM_LAST, PM_REMOVE)) {
                //  For some reason we get WM_QUIT here with a 0
                //  window handle
                if (msg.hwnd != NULL) {
                    OnReceiveMessage(msg.hwnd, msg.message, msg.wParam, msg.lParam);
                } else {
                    ASSERT(msg.message == WM_QUIT);
                }
            }
            //  This call doesn't do anything except grab the crit sec
            //  m_pfgc->WorkerShutdown();

            return (LRESULT) 0;
        }

        // Handle EC_DISPLAY_CHANGED messages
        case AWM_ONDISPLAYCHANGED:
        {
            NOTE("AWM_ONDISPLAYCHANGED");

            DWORD dwNumPins = (DWORD)lParam;

            if (dwNumPins == 0) {
                IPin *pPin = (IPin *) wParam;
                m_pfgc->WorkerDisplayChanged(&pPin, 1);
                if (pPin) pPin->Release();
            }
            else {
                IPin **ppPin = (IPin **)wParam;
                ASSERT(ppPin);
                m_pfgc->WorkerDisplayChanged(ppPin, dwNumPins);
                while (dwNumPins--) {
                    (*ppPin)->Release();
                    ppPin++;
                }
                CoTaskMemFree((IPin **)wParam);
            }

            return (LRESULT) 0;
        }

        // Handle EC_REPAINT event codes
        case AWM_REPAINT:
        {
            NOTE("AWM_REPAINT");
            IPin *pPin = (IPin *) lParam;
            m_pfgc->WorkerRepaint((DWORD)wParam,pPin);
            if (pPin) pPin->Release();
            return (LRESULT) 0;
        }

        case AWM_RECUE:
            NOTE("AWM_RECUE");
            m_pfgc->WorkerRecue((DWORD)wParam);
            return (LRESULT) 0;

        // Handle EC_ACTIVATE event codes
        case AWM_ONACTIVATE:
        {
            DbgLog((LOG_TRACE, 2, TEXT("Got AWM_ONACTIVATE")));
            NOTE("AWM_ONACTIVATE");
            IBaseFilter *pFilter = (IBaseFilter*) lParam;
            BOOL bActive = (BOOL) wParam;
            m_pfgc->WorkerActivate(pFilter,bActive);
            if (pFilter) pFilter->Release();
            return (LRESULT) 0;
        }

        // Restart the graph when resource is re-acquired
        case AWM_NEEDRESTART:
        {
            NOTE("AWM_NEEDRESTART");
            m_pfgc->WorkerRestart((BOOL)wParam);
            return (LRESULT) 0;
        }

        case AWM_RESOURCE_CALLBACK:
        {
            NOTE("AWM_RESOURCE_CALLBACK");
            m_pfgc->OnThreadMessage();
            break;
        }

        // Notify hangers on that thread is exiting
        case WM_DESTROY:
        {
            NOTE("Final WM_DESTROY received");
            if (m_bThreadExitCalled == FALSE) {
                m_bThreadExitCalled = TRUE;
                m_pfgc->OnThreadExit(hwnd);
            }
            break;
        }
        case AWM_POSTTOMAINTHREAD:
        {
            DbgLog((LOG_TRACE, 1, TEXT("Got WM_USER")));

            LPTHREAD_START_ROUTINE pfn = (LPTHREAD_START_ROUTINE) wParam;

            return (*pfn)((PVOID) lParam);
        }
        case AWM_CREATEFILTER:
        {
            AwmCreateFilterArg *pcfa = (AwmCreateFilterArg *) wParam;
            if (pcfa->creationType == AwmCreateFilterArg::USER_CALLBACK) {
                LRESULT res = (*(pcfa->pfn)) (pcfa->pvParam);
                delete pcfa;
                return res;
            }

            m_pfgc->GetFG()->OnCreateFilter(pcfa, (IBaseFilter**)lParam);

            return 0;
        }
        case AWM_DELETESPARELIST:
        {
            m_pfgc->GetFG()->OnDeleteSpareList(wParam);
            return 0;
        }
        case WM_POWERBROADCAST:
        {
            DbgLog((LOG_TRACE, 1, TEXT("power mgmt: %d %d %d"),
                    uMsg, wParam, lParam ));
            if(wParam == PBT_APMRESUMECRITICAL ||
               wParam == PBT_APMRESUMESUSPEND  ||
               wParam == PBT_APMRESUMESTANDBY ||
               wParam == PBT_APMRESUMEAUTOMATIC ||
               wParam == PBT_APMQUERYSUSPENDFAILED)
            {
                m_pfgc->HibernateResumeGraph();
                return 0;
            }

            if(wParam == PBT_APMSUSPEND ||
               wParam == PBT_APMSTANDBY)
            {
                m_pfgc->HibernateSuspendGraph();
                return 0;
            }
            break;
        }

        //
        // wParam contains the number of frame to skip.  We do this
        // by getting the filter graph to step that many frames for us.
        //
        // I am assuming that someone else has already checked that there
        // is a "step'able" filter in the filter graph before the
        // EC_SKIPFRAMES event was generated.
        //
        case AWM_SKIPFRAMES:
            {
                DWORD dwNumFramesToSkip = (DWORD)wParam;
                IFrameSkipResultCallback* pFSRCB = (IFrameSkipResultCallback*)lParam;
                return m_pfgc->WorkerSkipFrames(dwNumFramesToSkip, pFSRCB);
            }
            break;

        case AWM_STEPPED:
            {
                DWORD dwFrameStepVersion = (DWORD)lParam;
                return m_pfgc->WorkerFrameStepFinished(dwFrameStepVersion);
            }
            break;
    }
    return CBaseWindow::OnReceiveMessage(hwnd,uMsg,wParam,lParam);
}

HRESULT CFGControl::DeferCued(UINT Action, FILTER_STATE TargetState)
{
    DbgLog((LOG_TRACE, TRACE_CUE_LEVEL, TEXT("DeferCued %d %d"),
            Action, TargetState));
    //  Dont supercede a CueThenStopped if that's what we're
    //  still trying to do
    if (m_LieState == State_Stopped && m_eAction == AWM_CUETHENSTOP) {
        ASSERT(TargetState == State_Stopped);
        ASSERT(m_dwDeferredStateVersion == m_dwStateVersion);
        return S_FALSE;
    }
    CancelAction();
    m_TargetState = TargetState;
    m_eAction = Action;
    m_dwDeferredStateVersion = m_dwStateVersion;
    return CheckCued();
}
//
//  Check if we're cued
//  If not schedule a timer and try again
HRESULT CFGControl::CheckCued()
{
    ASSERT( CritCheckIn(GetFilterGraphCritSec()) );
    if (IsShutdown() || m_dwDeferredStateVersion != m_dwStateVersion) {
        m_eAction = 0;
        DbgLog((LOG_TRACE, TRACE_CUE_LEVEL, TEXT("CheckCued abort")));
        return S_OK;
    }
    if (m_eAction == 0) {
        //  Bogus timer firing
        return S_OK;
    }
    FILTER_STATE fs;
    HRESULT hr = (m_pFG->GetState(0,&fs) == VFW_S_STATE_INTERMEDIATE) ? S_FALSE : S_OK;
    ASSERT( fs == State_Paused );
    if (hr == S_FALSE) {
        UINT_PTR id = m_GraphWindow.SetTimer(TimerId, 10);
        if (id != 0) {
            ASSERT(id == TimerId);
            DbgLog((LOG_TRACE, TRACE_CUE_LEVEL, TEXT("CheckCued recue")));
            return S_FALSE;
        }
        DbgLog((LOG_TRACE, TRACE_CUE_LEVEL, TEXT("SetTimer failed")));
    }

    //  Finish off the operation
    switch (m_eAction) {
    case AWM_REPAINT:
        //  The only reason we actually wait for the Pause to
        //  complete is if we were originally stopped
        //  (if we were running we don't schedule repaints)
        ASSERT(m_TargetState == State_Stopped);

        //  Check the actual state is not stopped
        ASSERT(GetFilterGraphState() != State_Stopped);
        BeforeStop();
        GetFG()->CFilterGraph::Stop();
        AfterStop();
        break;

    case AWM_ONDISPLAYCHANGED:
    case AWM_CUETHENRUN:
    case AWM_RECUE:
    case AWM_CUE:
    {
        //
        // Provide notification that the PAUSE has completed
        //
        Notify(EC_PAUSED, S_OK, 0);

        ASSERT((m_TargetState == State_Running) ||
               ((m_TargetState == State_Paused) && (m_eAction == AWM_CUE)));

        if (m_TargetState == State_Running)
        {
            ASSERT(GetFilterGraphState() != State_Running);

            // still in business after all that - go for it
            const HRESULT hrRun = IssueRun();

            if (FAILED(hrRun)) {
                // one of the operations failed - send a error notification
                // but leave it up to the app to decide whether to stop the
                // graph
                Notify(EC_ERRORABORT, hr, 0);
            }
        }
    }
    break;

    case AWM_CUETHENSTOP:
    {
        // There's no point calling out CImplMediaControl::Stop, he'll see
        // we're in State_Stopped and immediately return OK!
        BeforeStop();
        GetFG()->CFilterGraph::Stop();
        AfterStop();
    }
    break;

    default:
        DbgBreak("Invalid action");
        break;
    }

    //  We've finished
    m_eAction = 0;
    return S_OK;
}

//
//  Cancel any previous Cue
//
void CFGControl::CancelAction()
{
    ASSERT( CritCheckIn(GetFilterGraphCritSec()) );
    if (m_eAction != 0) {
        EXECUTE_ASSERT(m_GraphWindow.KillTimer(TimerId));
        m_eAction = 0;
    }
}


//  Cancels any pending repaint so Stop will really stop
void CFGControl::CancelRepaint()
{
    ASSERT( CritCheckIn(GetFilterGraphCritSec()) );
    if (AWM_REPAINT == m_eAction) {
        ASSERT(State_Stopped == m_LieState);
        CancelAction();
    }
}

// --- Queued Command support --------------------------------------

CFGControl::CImplQueueCommand::CImplQueueCommand(
    const TCHAR* pName,
    CFGControl * pFGControl) :
        m_pFGControl(pFGControl),
        CUnknown(pName, pFGControl->GetOwner()),
        m_hThread(NULL),
        m_bStopThread(FALSE)
{
}

CFGControl::CImplQueueCommand::~CImplQueueCommand()
{
    if (m_hThread) {
        m_bStopThread = TRUE;
        m_evDue.Set();
        WaitForSingleObject(m_hThread, INFINITE);
        CloseHandle(m_hThread);
    }
}

void CFGControl::CImplQueueCommand::ThreadProc()
{
    while (!m_bStopThread) {
        m_evDue.Wait();
        Process();
    }
}

DWORD CFGControl::CImplQueueCommand::InitialThreadProc(LPVOID pv)
{
    CoInitialize(NULL);
    CImplQueueCommand *pCmd = (CImplQueueCommand *)pv;
    pCmd->ThreadProc();
    CoUninitialize();
    return 0;
}

STDMETHODIMP
CFGControl::CImplQueueCommand::NonDelegatingQueryInterface(
    REFIID riid, void ** ppv)
{
    if (riid == IID_IQueueCommand) {
        return GetInterface( (IQueueCommand*) this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}


// IQueueCommand  methods
STDMETHODIMP
CFGControl::CImplQueueCommand::InvokeAtStreamTime(
    IDeferredCommand** pCmd,
    REFTIME time,            // at this streamtime
    GUID* iid,                   // call this interface
    long dispidMethod,         // ..and this method
    short wFlags,              // method/property
    long cArgs,                // count of args
    VARIANT* pDispParams,      // actual args
    VARIANT* pvarResult,  // return value
    short* puArgErr           // which arg in error
)
{
    return InvokeAt(
                pCmd,
                time,
                iid,
                dispidMethod,
                wFlags,
                cArgs,
                pDispParams,
                pvarResult,
                puArgErr,
                TRUE
                );
}

STDMETHODIMP
CFGControl::CImplQueueCommand::InvokeAtPresentationTime(
    IDeferredCommand** pCmd,
    REFTIME time,            // at this presentation time
    GUID* iid,                   // call this interface
    long dispidMethod,         // ..and this method
    short wFlags,              // method/property
    long cArgs,                // count of args
    VARIANT* pDispParams,      // actual args
    VARIANT* pvarResult,  // return value
    short* puArgErr           // which arg in error
)
{
    return InvokeAt(
                pCmd,
                time,
                iid,
                dispidMethod,
                wFlags,
                cArgs,
                pDispParams,
                pvarResult,
                puArgErr,
                FALSE
                );
}


// common function from both Invoke methods
HRESULT
CFGControl::CImplQueueCommand::InvokeAt(
            IDeferredCommand** pCmd,
            REFTIME time,                 // at this presentation time
            GUID* iid,                    // call this interface
            long dispidMethod,            // ..and this method
            short wFlags,                 // method/property
            long cArgs,                   // count of args
            VARIANT* pDispParams,         // actual args
            VARIANT* pvarResult,          // return value
            short* puArgErr,              // which arg in error
            BOOL bStream                  // true if stream time
)
{
    // !!! try filters in the graph for IQueueCommand !!!

    // Start our thread if we didn't already
    if (m_hThread == NULL) {
        CAutoLock lck(&m_Lock);
        if (m_hThread == NULL) {
            DWORD dwThreadId;
            m_hThread = CreateThread(
                            NULL,
                            0,
                            InitialThreadProc,
                            this,
                            0,
                            &dwThreadId);
        }
    }
    if (m_hThread == NULL) {
        return E_OUTOFMEMORY;
    }

    // not supported by any filter - do it ourselves
    // create a CDeferredCommand object for this command
    CDeferredCommand* pCmdObject;
    HRESULT hr =  New (
               &pCmdObject,
               m_pFGControl->GetOwner(),    // outer unknown is executor
               time,
               iid,
               dispidMethod,
               wFlags,
               cArgs,
               pDispParams,
               pvarResult,
               puArgErr,
               TRUE);

    if (FAILED(hr)) {
        return hr;
    }

    // returns an object that is on the list. The list holds the
    // only refcount on the object so we need to QI for the correct
    // interface and thus correctly return a refcounted interface pointer.

    return pCmdObject->QueryInterface(IID_IDeferredCommand, (void**) pCmd);
}


// worker thread calls this to check and execute commands
// when the handle is signalled
void
CFGControl::CImplQueueCommand::Process(void)
{
    // loop as long as there are due commands
    for (;;) {

        if (m_pFGControl->IsShutdown()) {
            return;
        }

        CDeferredCommand* pCmd;
        HRESULT hr;
        hr = GetDueCommand(&pCmd, 0);
        if (hr == S_OK) {
            pCmd->Invoke();
            pCmd->Release();
        } else {
            return;
        }
    }
}

#define NORESEEK

HaltGraph::HaltGraph( CFGControl * pfgc, FILTER_STATE TypeOfHalt )
: m_eAlive(Alive)
, m_pfgc(pfgc)
{
    ASSERT( pfgc );
    ASSERT(CritCheckIn( m_pfgc ->GetFilterGraphCritSec()));

    //  Get the real filter graph state - we'll Stop then restore the
    //  state based on that
    //  Note that we may be in the middle of some graph initiated state
    //  change such as CueThenRun so the lie state needn't match
    //  the actual graph state.
    m_fsInitialState = m_pfgc->GetFilterGraphState();

    switch (TypeOfHalt)
    {
    default:                DbgBreak("HaltGraph called with invalid TypeOfHalt");
                            m_eAlive = NoOp;
                            break;

    case State_Stopped:     if ( m_fsInitialState == State_Stopped )
                            {
                                m_eAlive = NoOp;
                            }
                            else
                            {
                                pfgc->BeforeStop();
                                m_pfgc->GetFG()->CFilterGraph::Stop();
                                pfgc->AfterStop();
                            }
                            break;

    case State_Paused:      if ( m_fsInitialState != State_Running )
                            {
                                m_eAlive = NoOp;
                            }
                            else
                            {
                                m_pfgc->GetFG()->CFilterGraph::Pause();
                            }
                            break;
    }
#ifndef NORESEEK
    if (m_eAlive == Alive) m_pfgc->m_implMediaSeeking.GetCurrentMediaTime( &m_rtHaltTime );
#endif
}


HRESULT HaltGraph::Resume()
{
    HRESULT hr = S_OK;

    switch ( m_eAlive )
    {
    case Dead:  DbgBreak("HaltGraph:  Tried to resume when already dead.");
                break;
    case Alive:
#ifndef NORESEEK
                LONGLONG llTime;
                hr = m_pfgc->m_implMediaSeeking.ConvertTimeFormat( &llTime, 0, m_rtHaltTime, &TIME_FORMAT_MEDIA_TIME );
                if (SUCCEEDED(hr))
                {
                   hr = m_pfgc->m_implMediaSeeking.SetPositions( &llTime, AM_SEEKING_AbsolutePositioning, 0, 0 );
                }
#endif
                hr = S_OK;

                switch ( m_fsInitialState )
                {
                case State_Running: m_pfgc->GetFG()->CFilterGraph::Pause();
                                    m_pfgc->IssueRun();
                                    break;
                case State_Paused:  m_pfgc->GetFG()->CFilterGraph::Pause();
                                    break;
                }
                // Deliberate fall through

    case NoOp:  m_eAlive = Dead;
                break;
    }

    return hr;
}


void HaltGraph::Abort()
{
    ASSERT( m_eAlive != Dead );
    m_eAlive = Dead;
}

#ifdef FG_DEVICE_REMOVAL

HRESULT CFGControl::AddDeviceRemovalReg(IAMDeviceRemoval *pdr)
{
    HRESULT hr = S_OK;

    // have to skip this on downlevel platforms.
    if(!m_pRegisterDeviceNotification) {
        return hr;
    }

    CAutoLock ll(&m_csLostDevice);

#ifdef DEBUG
    {
        POSITION pos;
        if(FindLostDevice(pdr, &pos) == S_OK)
        {
            DbgBreak((TEXT("Duplicate notification requested.")));
        }
    }
#endif

    CLSID clsidCategory;
    WCHAR *wszSymbolic;
    hr = pdr->DeviceInfo(&clsidCategory, &wszSymbolic);
    if(SUCCEEDED(hr))
    {
        HDEVNOTIFY hdn;
        hr = RegisterInterfaceClass(clsidCategory, wszSymbolic, &hdn);
        if(SUCCEEDED(hr))
        {
            CDevNotify *pDevNotify = new CDevNotify( pdr, hdn );
            if(pDevNotify)
            {
                if(m_lLostDevices.AddTail(pDevNotify))
                {
                    // success
                    hr = S_OK;
                }
                else
                {
                    hr = E_OUTOFMEMORY;
                    delete pDevNotify;
                }
            }
            else
            {
                hr= E_OUTOFMEMORY;
            }

            if(FAILED(hr)) {
                EXECUTE_ASSERT(m_pUnregisterDeviceNotification(hdn));
            }
        }

        CoTaskMemFree(wszSymbolic);
    }

    return hr;
}

void CFGControl::DeviceChangeMsg(
    DWORD dwfArrival,
    PDEV_BROADCAST_DEVICEINTERFACE pbdi)
{
    IAMDeviceRemoval *pdr = 0;
    bool fFound = false;
    CAutoLock cs(&m_csLostDevice);

    for(POSITION pos = m_lLostDevices.GetHeadPosition();
        pos;
        pos = m_lLostDevices.Next(pos))
    {
        PDevNotify p = m_lLostDevices.Get(pos);
        HRESULT hr = p->m_pDevice->QueryInterface(IID_IAMDeviceRemoval, (void **)&pdr);
        if(SUCCEEDED(hr))
        {

            WCHAR *wszName;
            CLSID clsidInterface;
            hr = pdr->DeviceInfo(&clsidInterface, &wszName);
            if(SUCCEEDED(hr))
            {
#ifndef UNICODE
                int cch = lstrlenW(wszName) + 1;
                // !!! alloca in a loop
                char *szName = (char *)_alloca(cch * sizeof(char));
                WideCharToMultiByte(CP_ACP, 0, wszName, -1, szName, cch, 0, 0);
#endif
                    if(pbdi->dbcc_classguid == clsidInterface &&
#ifdef UNICODE
                       lstrcmpi(wszName, pbdi->dbcc_name) == 0
#else
                       lstrcmpi(szName,  pbdi->dbcc_name) == 0
#endif
                   )
                {
                    fFound = true;
                }

                CoTaskMemFree(wszName);
            }

            if(!fFound) {
                pdr->Release();
                pdr = 0;
            }
        }

        if(FAILED(hr))
        {
            DbgLog((LOG_ERROR, 0, TEXT("unexpected failure.")));
            break;
        }

        if(fFound) {
            ASSERT(pdr);
            break;
        } else {
            ASSERT(!pdr);
        }

    } // for

    if(pdr)
    {
        HRESULT hr;
        // hr = pdr->Reassociate();
        // WorkerDeviceReacquired(pdr);

        ASSERT(DBT_DEVICEARRIVAL == dwfArrival || DBT_DEVICEREMOVECOMPLETE == dwfArrival);

        Notify(EC_DEVICE_LOST, (DWORD_PTR)(IUnknown *)pdr,
               dwfArrival == DBT_DEVICEREMOVECOMPLETE ? 0 : 1);

        pdr->Release();
    }
}

HRESULT CFGControl::RegisterInterfaceClass(
    REFCLSID rclsid, WCHAR *wszSymbolic, HDEVNOTIFY *phdn)
{
    HRESULT hr = S_OK;
    *phdn = 0;

    ASSERT(CritCheckIn(&m_csLostDevice));
    UINT cch = lstrlenW(wszSymbolic) + 1;

    // register the new class.
    DEV_BROADCAST_DEVICEINTERFACE *pbdi = (DEV_BROADCAST_DEVICEINTERFACE *)new BYTE[
        sizeof(DEV_BROADCAST_DEVICEINTERFACE) +
        cch * sizeof(TCHAR)];
    if(pbdi)
    {

        pbdi->dbcc_size        = sizeof(*pbdi);
        pbdi->dbcc_devicetype  = DBT_DEVTYP_DEVICEINTERFACE;
        pbdi->dbcc_reserved    = 0;
        pbdi->dbcc_classguid   = rclsid;

#ifdef UNICODE
        lstrcpyW(pbdi->dbcc_name, wszSymbolic);
#else
        WideCharToMultiByte(CP_ACP, 0, wszSymbolic, -1, pbdi->dbcc_name, cch, 0, 0);
#endif
    }
    else
    {
        hr = E_OUTOFMEMORY;
    }

    if(SUCCEEDED(hr))
    {
        ASSERT(m_pRegisterDeviceNotification); // caller verified
        HDEVNOTIFY hDevNotify = m_pRegisterDeviceNotification(
            m_GraphWindow.GetWindowHWND(),
            pbdi, DEVICE_NOTIFY_WINDOW_HANDLE);
        if(hDevNotify)
        {

            hr = S_OK;
            *phdn = hDevNotify;
        }
        else
        {
            DWORD dwErr = GetLastError();
            hr= AmHresultFromWin32(dwErr);
        }
    }

    delete[] (BYTE *)pbdi;

    return hr;
}

HRESULT CFGControl::FindLostDevice(
    IUnknown *punk,
    POSITION *pPos)
{
    ASSERT(CritCheckIn(&m_csLostDevice));
    HRESULT hr = S_FALSE;

    IUnknown *punk2;
    punk->QueryInterface(IID_IUnknown, (void **)&punk2);

    for(POSITION pos = m_lLostDevices.GetHeadPosition();
        pos;
        pos = m_lLostDevices.Next(pos))
    {
        PDevNotify p = m_lLostDevices.Get(pos);
        if(p->m_pDevice == punk2) {
            *pPos = pos;
            hr = S_OK;
            break;
        }
    }

    punk2->Release();

    return hr;
}

HRESULT CFGControl::RemoveDeviceRemovalRegistration(
    IUnknown *punk)
{
    if(!m_pUnregisterDeviceNotification) {
        return S_OK;
    }

    CAutoLock l(&m_csLostDevice);

    POSITION pos;
    HRESULT hr = FindLostDevice(punk, &pos);
    if(hr == S_OK)
    {
        PDevNotify p = m_lLostDevices.Get(pos);
        EXECUTE_ASSERT(m_pUnregisterDeviceNotification(p->m_hdevnotify));
        delete m_lLostDevices.Remove(pos);
    }

    return hr;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\audctl.cpp ===
// Copyright (c) 1994 - 1997  Microsoft Corporation.  All Rights Reserved.
// Implements the IBasicAudio plug in distributor, July 1996

#include <streams.h>
#include <measure.h>
#include "fgctl.h"

// Constructor

CFGControl::CImplBasicAudio::CImplBasicAudio(const TCHAR *pName,CFGControl *pFG) :
    CBasicAudio(pName, pFG->GetOwner()),
    m_pFGControl(pFG)
{
    ASSERT(m_pFGControl);
}


STDMETHODIMP
CFGControl::CImplBasicAudio::put_Volume(long lVolume)
{
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CGenericList<IBasicAudio> *pList;

    HRESULT hr = m_pFGControl->GetListAudio(&pList);
    if (!FAILED(hr)) {

        if (pList->GetCount() < 1) {
	    hr = E_NOTIMPL;
        } else {

	    POSITION pos = pList->GetHeadPosition();
	    hr = S_OK;
	    while (pos) {
		IBasicAudio * pA = pList->GetNext(pos);

		HRESULT hr2 = pA->put_Volume(lVolume);
		// save the first failure code
		// we believe that it would normally work (optimise for success)
		if ((S_OK != hr2) && (S_OK == hr)) {
		    hr = hr2;
		}		
	    }
        }
    }
    return hr;
}


// what to do if multiple renderers ?
// return the volume of the first

STDMETHODIMP
CFGControl::CImplBasicAudio::get_Volume(long* plVolume)
{
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CGenericList<IBasicAudio> *pList;

    HRESULT hr = m_pFGControl->GetListAudio(&pList);
    if (!FAILED(hr)) {

	if (pList->GetCount() < 1) {
	    hr = E_NOTIMPL;
	} else {

	    // however many filters support IBasicAudio, return
	    // the volume from the first filter
	    POSITION pos = pList->GetHeadPosition();
	    IBasicAudio * pA = pList->GetNext(pos);

	    hr = pA->get_Volume(plVolume);
	}
    }
    return hr;
}


STDMETHODIMP
CFGControl::CImplBasicAudio::put_Balance(long lBalance)
{
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CGenericList<IBasicAudio> *pList;

    HRESULT hr = m_pFGControl->GetListAudio(&pList);
    if (!FAILED(hr)) {

        if (pList->GetCount() < 1) {
	    hr = E_NOTIMPL;
        } else {

	    POSITION pos = pList->GetHeadPosition();
	    hr = S_OK;
	    while (pos) {
		IBasicAudio * pA = pList->GetNext(pos);

		HRESULT hr2 = pA->put_Balance(lBalance);
		// save the first failure code
		// we believe that it would normally work (optimise for success)
		if ((S_OK != hr2) && (S_OK == hr)) {
		    hr = hr2;
		}		
	    }
        }
    }

    return hr;
}


// what to do if multiple renderers ?
// return the Balance of the first

STDMETHODIMP
CFGControl::CImplBasicAudio::get_Balance(long* plBalance)
{
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    CGenericList<IBasicAudio> *pList;

    HRESULT hr = m_pFGControl->GetListAudio(&pList);
    if (!FAILED(hr)) {

	if (pList->GetCount() < 1) {
	    hr = E_NOTIMPL;
	} else {

	    // however many filters support IBasicAudio, return
	    // the Balance from the first filter
	    POSITION pos = pList->GetHeadPosition();
	    IBasicAudio * pA = pList->GetNext(pos);

	    hr = pA->get_Balance(plBalance);
	}
    }
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\builder2\ksproxy.h ===
/*++

    Copyright (c) 1997-1998 Microsoft Corporation

Module Name:

    ksproxy.h

Abstract:

    Interface definitions for WDM-CSA proxy filters.

--*/

#ifndef __KSPROXY__
#define __KSPROXY__

#ifdef __cplusplus
extern "C" {
#endif

#undef KSDDKAPI
#ifdef _KSDDK_
#define KSDDKAPI
#else // !_KSDDK_
#define KSDDKAPI DECLSPEC_IMPORT
#endif // _KSDDK_

#define STATIC_IID_IKsObject\
    0x423c13a2L, 0x2070, 0x11d0, 0x9e, 0xf7, 0x00, 0xaa, 0x00, 0xa2, 0x16, 0xa1

#define STATIC_IID_IKsPin\
    0xb61178d1L, 0xa2d9, 0x11cf, 0x9e, 0x53, 0x00, 0xaa, 0x00, 0xa2, 0x16, 0xa1

#define STATIC_IID_IKsPinPipe\
    0xe539cd90L, 0xa8b4, 0x11d1, 0x81, 0x89, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02

#define STATIC_IID_IKsDataTypeHandler\
    0x5ffbaa02L, 0x49a3, 0x11d0, 0x9f, 0x36, 0x00, 0xaa, 0x00, 0xa2, 0x16, 0xa1

#define STATIC_IID_IKsInterfaceHandler\
    0xD3ABC7E0L, 0x9A61, 0x11D0, 0xA4, 0x0D, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96

#define STATIC_IID_IKsClockPropertySet\
    0x5C5CBD84L, 0xE755, 0x11D0, 0xAC, 0x18, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96

#define STATIC_IID_IKsAllocator\
    0x8da64899L, 0xc0d9, 0x11d0, 0x84, 0x13, 0x00, 0x00, 0xf8, 0x22, 0xfe, 0x8a
    
#define STATIC_IID_IKsAllocatorEx\
    0x091bb63aL, 0x603f, 0x11d1, 0xb0, 0x67, 0x00, 0xa0, 0xc9, 0x06, 0x28, 0x02
    

#ifndef STATIC_IID_IKsPropertySet
#define STATIC_IID_IKsPropertySet\
    0x31EFAC30L, 0x515C, 0x11d0, 0xA9, 0xAA, 0x00, 0xAA, 0x00, 0x61, 0xBE, 0x93
#endif // STATIC_IID_IKsPropertySet

#define STATIC_IID_IKsTopology\
    0x28F54683L, 0x06FD, 0x11D2, 0xB2, 0x7A, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
//28F54683-06FD-11D2-B27A-00A0C9223196

#ifndef STATIC_IID_IKsControl
#define STATIC_IID_IKsControl\
    0x28F54685L, 0x06FD, 0x11D2, 0xB2, 0x7A, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96
#endif // STATIC_IID_IKsControl
//28F54685-06FD-11D2-B27A-00A0C9223196

#define STATIC_CLSID_Proxy \
    0x17CCA71BL, 0xECD7, 0x11D0, 0xB9, 0x08, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96

#ifdef _KS_

#if !defined(__cplusplus) || _MSC_VER < 1100
DEFINE_GUIDEX(IID_IKsObject);

DEFINE_GUIDEX(IID_IKsPin);

DEFINE_GUIDEX(IID_IKsPinPipe);

DEFINE_GUIDEX(IID_IKsDataTypeHandler);

DEFINE_GUIDEX(IID_IKsInterfaceHandler);

DEFINE_GUIDEX(IID_IKsClockPropertySet);

DEFINE_GUIDEX(IID_IKsAllocator);

DEFINE_GUIDEX(IID_IKsAllocatorEx);

#define IID_IKsQualityForwarder KSCATEGORY_QUALITY
#endif // !defined(__cplusplus) || _MSC_VER < 1100

#define STATIC_IID_IKsQualityForwarder STATIC_KSCATEGORY_QUALITY

typedef enum {
    KsAllocatorMode_User,
    KsAllocatorMode_Kernel
} KSALLOCATORMODE;


typedef enum {
    FramingProp_Uninitialized,
    FramingProp_None,
    FramingProp_Old,
    FramingProp_Ex
} FRAMING_PROP;

typedef FRAMING_PROP *PFRAMING_PROP;


typedef enum {
    Framing_Cache_Update,     // request to bypass cache when read/write
    Framing_Cache_ReadLast,
    Framing_Cache_ReadOrig,
    Framing_Cache_Write
} FRAMING_CACHE_OPS;


typedef struct {
    LONGLONG     MinTotalNominator;  
    LONGLONG     MaxTotalNominator;
    LONGLONG     TotalDenominator;
} OPTIMAL_WEIGHT_TOTALS;

// forward declaration
typedef struct IPin IPin;
typedef struct IKsPin IKsPin;
typedef struct IKsAllocator IKsAllocator;
typedef struct IKsAllocatorEx IKsAllocatorEx;

                      
//
// allocators strategy is defined by graph manager
//
#define AllocatorStrategy_DontCare                      0

//
// what to optimize
//
#define AllocatorStrategy_MinimizeNumberOfFrames        0x00000001
#define AllocatorStrategy_MinimizeFrameSize             0x00000002
#define AllocatorStrategy_MinimizeNumberOfAllocators    0x00000004
#define AllocatorStrategy_MaximizeSpeed                 0x00000008 

//
// factors (flags) defining the Pipes properties
//
#define PipeFactor_None                   0
#define PipeFactor_UserModeUpstream       0x00000001
#define PipeFactor_UserModeDownstream     0x00000002
#define PipeFactor_MemoryTypes            0x00000004
#define PipeFactor_Flags                  0x00000008
#define PipeFactor_PhysicalRanges         0x00000010
#define PipeFactor_OptimalRanges          0x00000020
#define PipeFactor_FixedCompression       0x00000040
#define PipeFactor_UnknownCompression     0x00000080

#define PipeFactor_Buffers                0x00000100
#define PipeFactor_Align                  0x00000200

#define PipeFactor_PhysicalEnd            0x00000400
#define PipeFactor_LogicalEnd             0x00000800



typedef enum {
    PipeState_DontCare,
    PipeState_RangeNotFixed,
    PipeState_RangeFixed,
    PipeState_CompressionUnknown,
    PipeState_Finalized
} PIPE_STATE;


//
// pipe dimensions relative to BeginPin.
//

typedef struct _PIPE_DIMENSIONS {
    KS_COMPRESSION    AllocatorPin;
    KS_COMPRESSION    MaxExpansionPin;
    KS_COMPRESSION    EndPin;
} PIPE_DIMENSIONS, *PPIPE_DIMENSIONS;


typedef enum {
    Pipe_Allocator_None,
    Pipe_Allocator_FirstPin,
    Pipe_Allocator_LastPin,
    Pipe_Allocator_MiddlePin
} PIPE_ALLOCATOR_PLACE;

typedef PIPE_ALLOCATOR_PLACE  *PPIPE_ALLOCATOR_PLACE;


typedef enum {
    KS_MemoryTypeDontCare = 0,
    KS_MemoryTypeKernelPaged,
    KS_MemoryTypeKernelNonPaged,
    KS_MemoryTypeDeviceHostMapped,
    KS_MemoryTypeDeviceSpecific,
    KS_MemoryTypeUser,
    KS_MemoryTypeAnyHost
} KS_LogicalMemoryType;

typedef KS_LogicalMemoryType  *PKS_LogicalMemoryType;



typedef struct _PIPE_TERMINATION {
    ULONG                       Flags;
    ULONG                       OutsideFactors;
    ULONG                       Weigth;            // outside weight
    KS_FRAMING_RANGE            PhysicalRange;
    KS_FRAMING_RANGE_WEIGHTED   OptimalRange;      
    KS_COMPRESSION              Compression;       // relative to the connected pin on a neighboring filter.
} PIPE_TERMINATION;


//
// extended allocator properties 
//
typedef struct _ALLOCATOR_PROPERTIES_EX
    {
    long cBuffers;
    long cbBuffer;
    long cbAlign;
    long cbPrefix;
// new part
    GUID                       MemoryType;         
    GUID                       BusType;            // one of the buses this pipe is using
    PIPE_STATE                 State;                        
    PIPE_TERMINATION           Input;                        
    PIPE_TERMINATION           Output;                       
    ULONG                      Strategy;
    ULONG                      Flags;              
    ULONG                      Weight;
    KS_LogicalMemoryType       LogicalMemoryType;
    PIPE_ALLOCATOR_PLACE       AllocatorPlace;
    PIPE_DIMENSIONS            Dimensions;
    KS_FRAMING_RANGE           PhysicalRange;      // on allocator pin
    IKsAllocatorEx*            PrevSegment;        // doubly-linked list of KS allocators
    ULONG                      CountNextSegments;  // possible multiple dependent pipes
    IKsAllocatorEx**           NextSegments;
    ULONG                      InsideFactors;      // existing factors (different from "don't care")
    ULONG                      NumberPins;                   
} ALLOCATOR_PROPERTIES_EX;

typedef ALLOCATOR_PROPERTIES_EX *PALLOCATOR_PROPERTIES_EX;


#ifdef __STREAMS__

struct DECLSPEC_UUID("5C5CBD84-E755-11D0-AC18-00A0C9223196") IKsClockPropertySet;
#undef INTERFACE
#define INTERFACE IKsClockPropertySet
DECLARE_INTERFACE_(IKsClockPropertySet, IUnknown)
{
    STDMETHOD(KsGetTime)(
        THIS_
        LONGLONG* Time
    ) PURE;
    STDMETHOD(KsSetTime)(
        THIS_
        LONGLONG Time
    ) PURE;
    STDMETHOD(KsGetPhysicalTime)(
        THIS_
        LONGLONG* Time
    ) PURE;
    STDMETHOD(KsSetPhysicalTime)(
        THIS_
        LONGLONG Time
    ) PURE;
    STDMETHOD(KsGetCorrelatedTime)(
        THIS_
        KSCORRELATED_TIME* CorrelatedTime
    ) PURE;
    STDMETHOD(KsSetCorrelatedTime)(
        THIS_
        KSCORRELATED_TIME* CorrelatedTime
    ) PURE;
    STDMETHOD(KsGetCorrelatedPhysicalTime)(
        THIS_
        KSCORRELATED_TIME* CorrelatedTime
    ) PURE;
    STDMETHOD(KsSetCorrelatedPhysicalTime)(
        THIS_
        KSCORRELATED_TIME* CorrelatedTime
    ) PURE;
    STDMETHOD(KsGetResolution)(
        THIS_
        KSRESOLUTION* Resolution
    ) PURE;
    STDMETHOD(KsGetState)(
        THIS_
        KSSTATE* State
    ) PURE;
};


interface DECLSPEC_UUID("8da64899-c0d9-11d0-8413-0000f822fe8a") IKsAllocator;
#undef INTERFACE
#define INTERFACE IKsAllocator
DECLARE_INTERFACE_(IKsAllocator, IUnknown)
{
    STDMETHOD_(HANDLE, KsGetAllocatorHandle)(
        THIS
    ) PURE;
    STDMETHOD_(KSALLOCATORMODE, KsGetAllocatorMode)(
        THIS
    ) PURE;
    STDMETHOD(KsGetAllocatorStatus)(
        THIS_
        PKSSTREAMALLOCATOR_STATUS AllocatorStatus
    ) PURE;
    STDMETHOD_(VOID, KsSetAllocatorMode)(
        THIS_
        KSALLOCATORMODE Mode
    ) PURE;
};

interface DECLSPEC_UUID("091bb63a-603f-11d1-b067-00a0c9062802") IKsAllocatorEx;
#undef INTERFACE
#define INTERFACE IKsAllocatorEx
DECLARE_INTERFACE_(IKsAllocatorEx, IKsAllocator)
{
    STDMETHOD_(PALLOCATOR_PROPERTIES_EX, KsGetProperties)(
        THIS
    ) PURE;
    STDMETHOD_(VOID, KsSetProperties)(
        THIS_
        PALLOCATOR_PROPERTIES_EX 
    ) PURE;
    STDMETHOD_(VOID, KsSetAllocatorHandle)(
        THIS_
        HANDLE AllocatorHandle
    ) PURE;
    STDMETHOD_(HANDLE, KsCreateAllocatorAndGetHandle)(
        THIS_
        IKsPin*   KsPin
    ) PURE;
};  

typedef enum {
    KsPeekOperation_PeekOnly,
    KsPeekOperation_AddRef
} KSPEEKOPERATION;

typedef struct _KSSTREAM_SEGMENT *PKSSTREAM_SEGMENT;

interface DECLSPEC_UUID("b61178d1-a2d9-11cf-9e53-00aa00a216a1") IKsPin;
#undef INTERFACE
#define INTERFACE IKsPin
DECLARE_INTERFACE_(IKsPin, IUnknown)
{
    STDMETHOD(KsQueryMediums)(
        THIS_
        PKSMULTIPLE_ITEM* MediumList
    ) PURE;
    STDMETHOD(KsQueryInterfaces)(
        THIS_
        PKSMULTIPLE_ITEM* InterfaceList
    ) PURE;
    STDMETHOD(KsCreateSinkPinHandle)(
        THIS_
        KSPIN_INTERFACE& Interface,
        KSPIN_MEDIUM& Medium
    ) PURE;
    STDMETHOD(KsGetCurrentCommunication)(
        THIS_
        KSPIN_COMMUNICATION *Communication,
        KSPIN_INTERFACE *Interface,
        KSPIN_MEDIUM *Medium
    ) PURE;
    STDMETHOD(KsPropagateAcquire)(
        THIS
    ) PURE;
    STDMETHOD(KsDeliver)(
        THIS_
        IMediaSample* Sample,
        ULONG Flags
    ) PURE;
    STDMETHOD(KsMediaSamplesCompleted)(
        THIS_
        PKSSTREAM_SEGMENT StreamSegment
    ) PURE;
    STDMETHOD_(IMemAllocator *, KsPeekAllocator)(
        THIS_
        KSPEEKOPERATION Operation
    ) PURE;
    STDMETHOD(KsReceiveAllocator)(
        THIS_
        IMemAllocator *MemAllocator
    ) PURE;
    STDMETHOD(KsRenegotiateAllocator)(
        THIS
    ) PURE;
    STDMETHOD_(LONG, KsIncrementPendingIoCount)(
        THIS
    ) PURE;
    STDMETHOD_(LONG, KsDecrementPendingIoCount)(
        THIS
    ) PURE;
    STDMETHOD(KsQualityNotify)(
        THIS_
        ULONG Proportion,
        REFERENCE_TIME TimeDelta
    ) PURE;
};

                         
interface DECLSPEC_UUID("e539cd90-a8b4-11d1-8189-00a0c9062802") IKsPinPipe;
#undef INTERFACE
#define INTERFACE IKsPinPipe
DECLARE_INTERFACE_(IKsPinPipe, IUnknown)
{
    STDMETHOD(KsGetPinFramingCache)(
        THIS_
        PKSALLOCATOR_FRAMING_EX *FramingEx,
        PFRAMING_PROP FramingProp,
        FRAMING_CACHE_OPS Option
    ) PURE;
    STDMETHOD(KsSetPinFramingCache)(
        THIS_
        PKSALLOCATOR_FRAMING_EX FramingEx,
        PFRAMING_PROP FramingProp,
        FRAMING_CACHE_OPS Option
    ) PURE;
    STDMETHOD_(IPin*, KsGetConnectedPin)(
        THIS
    ) PURE;
    STDMETHOD_(IKsAllocatorEx*, KsGetPipe)(
        THIS_
        KSPEEKOPERATION Operation
    ) PURE;
    STDMETHOD(KsSetPipe)(
        THIS_
        IKsAllocatorEx *KsAllocator
    ) PURE;
    STDMETHOD_(ULONG, KsGetPipeAllocatorFlag)(
        THIS
    ) PURE;
    STDMETHOD(KsSetPipeAllocatorFlag)(
        THIS_
        ULONG Flag
    ) PURE;
    STDMETHOD_(GUID, KsGetPinBusCache)(
        THIS
    ) PURE;
    STDMETHOD(KsSetPinBusCache)(
        THIS_
        GUID Bus
    ) PURE;
//
// very useful methods for tracing.
//
    STDMETHOD_(PWCHAR, KsGetPinName)(
        THIS
    ) PURE;
    STDMETHOD_(PWCHAR, KsGetFilterName)(
        THIS
    ) PURE;
};


interface DECLSPEC_UUID("CD5EBE6B-8B6E-11D1-8AE0-00A0C9223196") IKsPinFactory;
#undef INTERFACE
#define INTERFACE IKsPinFactory
DECLARE_INTERFACE_(IKsPinFactory, IUnknown)
{
    STDMETHOD(KsPinFactory)(
        THIS_
        ULONG* PinFactory
    ) PURE;
};

typedef enum {
    KsIoOperation_Write,
    KsIoOperation_Read
} KSIOOPERATION;

interface DECLSPEC_UUID("5ffbaa02-49a3-11d0-9f36-00aa00a216a1") IKsDataTypeHandler;
#undef INTERFACE
#define INTERFACE IKsDataTypeHandler
DECLARE_INTERFACE_(IKsDataTypeHandler, IUnknown)
{
    STDMETHOD(KsCompleteIoOperation)(
        THIS_
        IMediaSample *Sample,
        PVOID StreamHeader,
        KSIOOPERATION IoOperation,
        BOOL Cancelled
    ) PURE;
    STDMETHOD(KsIsMediaTypeInRanges)(
        THIS_
        PVOID DataRanges
        ) PURE;
    STDMETHOD(KsPrepareIoOperation)(
        THIS_
        IMediaSample *Sample,
        PVOID StreamHeader,
        KSIOOPERATION IoOperation
    ) PURE;
    STDMETHOD(KsQueryExtendedSize)(
        THIS_
        ULONG* ExtendedSize
    ) PURE;
    STDMETHOD(KsSetMediaType)(
        THIS_
        const CMediaType *MediaType
    ) PURE;
};

interface DECLSPEC_UUID("D3ABC7E0-9A61-11d0-A40D-00A0C9223196") IKsInterfaceHandler;
#undef INTERFACE
#define INTERFACE IKsInterfaceHandler
DECLARE_INTERFACE_(IKsInterfaceHandler, IUnknown)
{
    STDMETHOD(KsSetPin)(
        THIS_
        IKsPin *KsPin
    ) PURE;
    STDMETHOD(KsProcessMediaSamples)(
        THIS_
        IKsDataTypeHandler *KsDataTypeHandler,
        IMediaSample** SampleList,
        PLONG SampleCount,
        KSIOOPERATION IoOperation,
        PKSSTREAM_SEGMENT *StreamSegment
    ) PURE;
    STDMETHOD(KsCompleteIo)(
        THIS_
        PKSSTREAM_SEGMENT StreamSegment
    ) PURE;
};


//
// This structure definition is the common header required by the proxy to 
// dispatch the stream segment to the interface handler.  Interface handlers 
// will create extended structures to include other information such as 
// media samples, extended header size and so on.
//

typedef struct _KSSTREAM_SEGMENT {
    IKsInterfaceHandler     *KsInterfaceHandler;
    IKsDataTypeHandler      *KsDataTypeHandler;
    KSIOOPERATION           IoOperation;
    HANDLE                  CompletionEvent;
    
} KSSTREAM_SEGMENT;

interface DECLSPEC_UUID("423c13a2-2070-11d0-9ef7-00aa00a216a1") IKsObject;
#undef INTERFACE
#define INTERFACE IKsObject
DECLARE_INTERFACE_(IKsObject, IUnknown)
{
    STDMETHOD_(HANDLE, KsGetObjectHandle)(
        THIS
    ) PURE;
};

interface DECLSPEC_UUID("97ebaacb-95bd-11d0-a3ea-00a0c9223196") IKsQualityForwarder;
#undef INTERFACE
#define INTERFACE IKsQualityForwarder
DECLARE_INTERFACE_(IKsQualityForwarder, IKsObject)
{
    STDMETHOD_(VOID, KsFlushClient)(
        THIS_
        IKsPin* Pin
    ) PURE;
};

KSDDKAPI
HRESULT
WINAPI
KsOpenDefaultDevice(
    REFGUID Category,
    ACCESS_MASK Access,
    PHANDLE DeviceHandle
    );
KSDDKAPI
HRESULT
WINAPI
KsSynchronousDeviceControl(
    HANDLE      Handle,
    ULONG       IoControl,
    PVOID       InBuffer,
    ULONG       InLength,
    PVOID       OutBuffer,
    ULONG       OutLength,
    PULONG      BytesReturned
    );
KSDDKAPI
HRESULT
WINAPI
KsGetMultiplePinFactoryItems(
    HANDLE  FilterHandle,
    ULONG   PinFactoryId,
    ULONG   PropertyId,
    PVOID*  Items
    );
KSDDKAPI
HRESULT
WINAPI
KsGetMediaTypeCount(
    HANDLE      FilterHandle,
    ULONG       PinFactoryId,
    ULONG*      MediaTypeCount
    );
KSDDKAPI
HRESULT
WINAPI
KsGetMediaType(
    int         Position,
    CMediaType* MediaType,
    HANDLE      FilterHandle,
    ULONG       PinFactoryId
    );

#endif // __STREAMS__

#ifndef _IKsPropertySet_
#if !defined(__cplusplus) || _MSC_VER < 1100
DEFINE_GUIDEX(IID_IKsPropertySet);
#endif // !defined(__cplusplus) || _MSC_VER < 1100
#endif // _IKsPropertySet_

#ifndef _IKsControl_
#if !defined(__cplusplus) || _MSC_VER < 1100
DEFINE_GUIDEX(IID_IKsControl);
#endif // !defined(__cplusplus) || _MSC_VER < 1100
#endif // _IKsControl_

#ifndef _IKsTopology_
#if !defined(__cplusplus) || _MSC_VER < 1100
DEFINE_GUIDEX(IID_IKsTopology);
#endif // !defined(__cplusplus) || _MSC_VER < 1100
#endif // _IKsTopology_

DEFINE_GUIDSTRUCT("17CCA71B-ECD7-11D0-B908-00A0C9223196", CLSID_Proxy);
#define CLSID_Proxy DEFINE_GUIDNAMED(CLSID_Proxy)

#else // !_KS_

#ifndef _IKsPropertySet_
#if !defined(__cplusplus) || _MSC_VER < 1100
DEFINE_GUID(IID_IKsPropertySet, STATIC_IID_IKsPropertySet);
#endif // !defined(__cplusplus) || _MSC_VER < 1100
#endif // _IKsPropertySet_

#if !defined(__cplusplus) || _MSC_VER < 1100
DEFINE_GUID(CLSID_Proxy, STATIC_CLSID_Proxy);
#else  // defined(__cplusplus) && _MSC_VER >= 1100
DECLSPEC_UUID("17CCA71B-ECD7-11D0-B908-00A0C9223196") CLSID_Proxy;
#endif  // defined(__cplusplus) && _MSC_VER >= 1100

#endif // !_KS_

#ifndef _IKsPropertySet_
#define _IKsPropertySet_

#define KSPROPERTY_SUPPORT_GET 1
#define KSPROPERTY_SUPPORT_SET 2

#ifdef DECLARE_INTERFACE_

interface DECLSPEC_UUID("31EFAC30-515C-11d0-A9AA-00aa0061be93") IKsPropertySet;
#undef INTERFACE
#define INTERFACE IKsPropertySet
DECLARE_INTERFACE_(IKsPropertySet, IUnknown)
{
    STDMETHOD(Set)(
        THIS_
        IN REFGUID PropSet,
        IN ULONG Id,
        IN LPVOID InstanceData,
        IN ULONG InstanceLength,
        IN LPVOID PropertyData,
        IN ULONG DataLength
    ) PURE;

    STDMETHOD(Get)(
        THIS_
        IN REFGUID PropSet,
        IN ULONG Id,
        IN LPVOID InstanceData,
        IN ULONG InstanceLength,
        OUT LPVOID PropertyData,
        IN ULONG DataLength,
        OUT ULONG* BytesReturned
    ) PURE;

    STDMETHOD(QuerySupported)(
        THIS_
        IN REFGUID PropSet,
        IN ULONG Id,
        OUT ULONG* TypeSupport
    ) PURE;
};

#endif // DECLARE_INTERFACE_

#endif // _IKsPropertySet_

#ifndef _IKsControl_
#define _IKsControl_

#ifdef DECLARE_INTERFACE_

interface DECLSPEC_UUID("28F54685-06FD-11D2-B27A-00A0C9223196") IKsControl;
#undef INTERFACE
#define INTERFACE IKsControl
DECLARE_INTERFACE_(IKsControl, IUnknown)
{
    STDMETHOD(KsProperty)(
        THIS_
        IN PKSPROPERTY Property,
        IN ULONG PropertyLength,
        IN OUT LPVOID PropertyData,
        IN ULONG DataLength,
        OUT ULONG* BytesReturned
    ) PURE;
    STDMETHOD(KsMethod)(
        THIS_
        IN PKSMETHOD Method,
        IN ULONG MethodLength,
        IN OUT LPVOID MethodData,
        IN ULONG DataLength,
        OUT ULONG* BytesReturned
    ) PURE;
    STDMETHOD(KsEvent)(
        THIS_
        IN PKSEVENT Event OPTIONAL,
        IN ULONG EventLength,
        IN OUT LPVOID EventData,
        IN ULONG DataLength,
        OUT ULONG* BytesReturned
    ) PURE;
};

#endif // DECLARE_INTERFACE_

#endif // _IKsControl_

#ifndef _IKsTopology_
#define _IKsTopology_

#ifdef DECLARE_INTERFACE_

interface DECLSPEC_UUID("28F54683-06FD-11D2-B27A-00A0C9223196") IKsTopology;
#undef INTERFACE
#define INTERFACE IKsTopology
DECLARE_INTERFACE_(IKsTopology, IUnknown)
{
    STDMETHOD(CreateNodeInstance)(
        THIS_
        IN ULONG NodeId,
        IN ULONG Flags,
        IN ACCESS_MASK DesiredAccess,
        IN IUnknown* UnkOuter OPTIONAL,
        IN REFGUID InterfaceId,
        OUT LPVOID* Interface
    ) PURE;
};

#endif // DECLARE_INTERFACE_

#endif // _IKsTopology_

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __KSPROXY__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\collect.cpp ===
// Copyright (c) 1994 - 1998  Microsoft Corporation.  All Rights Reserved.

//
// implementation of classes supporting the OLE Automation
// collection classes declared
// in control.odl.

// essentially designed to support ole-automatable graph browsing and
// building based on IFilterInfo wrappers for filters and IPinInfo
// wrappers for pins.

#include <streams.h>
#include "collect.h"
#include "fgctlrc.h"


CEnumVariant::CEnumVariant(
    TCHAR * pName,
    LPUNKNOWN pUnk,
    HRESULT * phr,
    IAMCollection* pCollection,
    long index)
  : CUnknown(pName, pUnk),
    m_pCollection(pCollection),
    m_index(index)
{
    ASSERT(m_pCollection);

    // need to addref this here since we hold it
    m_pCollection->AddRef();
}


CEnumVariant::~CEnumVariant()
{
    // constructor may have failed
    if (m_pCollection) {
        m_pCollection->Release();
    }
}

STDMETHODIMP
CEnumVariant::NonDelegatingQueryInterface(REFIID riid, void** ppv)
{
    if (riid == IID_IEnumVARIANT) {
        return GetInterface((IEnumVARIANT*) this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}

STDMETHODIMP
CEnumVariant::Next(
    unsigned long celt,
    VARIANT  *rgvar,
    unsigned long  *pcFetched)
{

    CheckPointer(rgvar,E_POINTER);
    ValidateReadWritePtr(rgvar,celt * sizeof(VARIANT *));

    if (pcFetched) {
	*pcFetched = 0;	
    } else {
	if (celt > 1) {
	    return E_POINTER;
	}
    }


    // check the actual number of remaining items
    long cItems;
    HRESULT hr = m_pCollection->get_Count(&cItems);
    if (FAILED(hr)) {
        return hr;
    }
    cItems = min(cItems - m_index, (int) celt);

    if (cItems == 0) {
	return S_FALSE;
    }

    long iPut;
    for (iPut = 0; iPut < cItems; iPut++) {


        // return the item (IUnknown) wrapped as a VARIANT

        // get back an addrefed interface
        IUnknown* pUnk;
        hr = m_pCollection->Item(m_index, &pUnk);
        if (FAILED(hr)) {
            return hr;
        }

        VARIANT * pv = &rgvar[iPut];
        ASSERT(pv->vt == VT_EMPTY);

        // VARIANTs can contain IUnknown or IDispatch - check
        // which we actually have
        IDispatch* pDispatch;
        hr = pUnk->QueryInterface(IID_IDispatch, (void**)&pDispatch);
        if (SUCCEEDED(hr)) {
            // we can release the pUnk
            pUnk->Release();

            // make the variant an IDispatch
            pv->vt = VT_DISPATCH;
            pv->pdispVal = pDispatch;
        } else {
            // make it an IUnknown
            pv->vt = VT_UNKNOWN;
            pv->punkVal = pUnk;
        }

        m_index++;
    }
    if (pcFetched) {
	*pcFetched = iPut;
    }
    return ((long)celt == iPut ? S_OK : S_FALSE);
}



STDMETHODIMP
CEnumVariant::Skip(
    unsigned long celt)
{
    long cItems;
     HRESULT hr = m_pCollection->get_Count(&cItems);
     if (FAILED(hr)) {
         return hr;
     }
    m_index += celt;
    if (m_index > cItems) {
        m_index = cItems;
    }
    return S_OK;
}

STDMETHODIMP
CEnumVariant::Reset(void)
{
    m_index = 0;
    return S_OK;
}

STDMETHODIMP
CEnumVariant::Clone(
    IEnumVARIANT** ppenum)
{
    HRESULT hr = S_OK;

    CEnumVariant* pEnumVariant =
        new CEnumVariant(
                NAME("CEnumVariant"),
                NULL,
                &hr,
                m_pCollection,
                m_index
            );

    if (pEnumVariant == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pEnumVariant;
        return hr;
    }

    hr = pEnumVariant->QueryInterface(IID_IEnumVARIANT, (void**)ppenum);
    if (FAILED(hr)) {
        delete pEnumVariant;
    }
    return hr;
}


// --- CBaseCollection methods ---

CBaseCollection::CBaseCollection(
    TCHAR* pName,
    LPUNKNOWN pUnk,
    HRESULT * phr)
  : CUnknown(pName, pUnk),
    m_cItems(0),
    m_rpDispatch(NULL)
{

}

CBaseCollection::~CBaseCollection()
{
    if (m_rpDispatch) {
        for (int i = 0; i < m_cItems; i++) {
            if (m_rpDispatch[i]) {
                m_rpDispatch[i]->Release();
            }
        }
    }
    delete [] m_rpDispatch;
}

STDMETHODIMP
CBaseCollection::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IAMCollection) {
        return GetInterface((IAMCollection*) this, ppv);
    } else if (riid == IID_IDispatch) {
        return GetInterface((IDispatch*) this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}

// return 1 if we support GetTypeInfo
STDMETHODIMP
CBaseCollection::GetTypeInfoCount(UINT * pctinfo)
{
    return m_dispatch.GetTypeInfoCount(pctinfo);
}


// attempt to find our type library
STDMETHODIMP
CBaseCollection::GetTypeInfo(
  UINT itinfo,
  LCID lcid,
  ITypeInfo ** pptinfo)
{
    return m_dispatch.GetTypeInfo(
                IID_IAMCollection,
                itinfo,
                lcid,
                pptinfo);
}

STDMETHODIMP
CBaseCollection::GetIDsOfNames(
  REFIID riid,
  OLECHAR  ** rgszNames,
  UINT cNames,
  LCID lcid,
  DISPID * rgdispid)
{
    return m_dispatch.GetIDsOfNames(
                        IID_IAMCollection,
                        rgszNames,
                        cNames,
                        lcid,
                        rgdispid);
}


STDMETHODIMP
CBaseCollection::Invoke(
  DISPID dispidMember,
  REFIID riid,
  LCID lcid,
  WORD wFlags,
  DISPPARAMS * pdispparams,
  VARIANT * pvarResult,
  EXCEPINFO * pexcepinfo,
  UINT * puArgErr)
{
    // this parameter is a dead leftover from an earlier interface
    if (IID_NULL != riid) {
        return DISP_E_UNKNOWNINTERFACE;
    }

    // special-case NEWENUM as the type library doesn't
    // seem to map this to the _NewEnum member
    if (dispidMember == DISPID_NEWENUM) {
	if ((wFlags & DISPATCH_METHOD) ||
	    (wFlags & DISPATCH_PROPERTYGET)) {
	    LPUNKNOWN pUnk;
	    HRESULT hr = get__NewEnum(&pUnk);
	    if (FAILED(hr)){
		return hr;
	    }
	    pvarResult->vt = VT_UNKNOWN;
	    pvarResult->punkVal = pUnk;
	    return S_OK;
	}
    }

    ITypeInfo * pti;
    HRESULT hr = GetTypeInfo(0, lcid, &pti);

    if (FAILED(hr)) {
        return hr;
    }

    hr = pti->Invoke(
            (IAMCollection *)this,
            dispidMember,
            wFlags,
            pdispparams,
            pvarResult,
            pexcepinfo,
            puArgErr);

    pti->Release();

    return hr;
}

STDMETHODIMP
CBaseCollection::get__NewEnum(IUnknown** ppUnk)
{
    CheckPointer(ppUnk,E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IUnknown *));

    HRESULT hr = S_OK;

    CEnumVariant* pEnumVariant =
        new CEnumVariant(
                NAME("CEnumVariant"),
                NULL,
                &hr,
                (IAMCollection*) this,
                0
            );

    if (pEnumVariant == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pEnumVariant;
        return hr;
    }

    hr = pEnumVariant->QueryInterface(IID_IEnumVARIANT, (void**)ppUnk);
    if (FAILED(hr)) {
        delete pEnumVariant;
    }

    return hr;
}


STDMETHODIMP
CBaseCollection::Item(long lItem, IUnknown** ppUnk)
{
    if ((lItem >= m_cItems) ||
        (lItem < 0)) {
            return E_INVALIDARG;
    }
    CheckPointer(ppUnk,E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IUnknown *));

    *ppUnk = m_rpDispatch[lItem];
    m_rpDispatch[lItem]->AddRef();

    return S_OK;
}


// --- CFilterCollection implementation ----


CFilterCollection:: CFilterCollection(
    IEnumFilters* penum,
    IUnknown* pUnk,
    HRESULT* phr)
  : CBaseCollection(
        NAME("CFilterCollection base"),
        pUnk,
        phr)
{
    ASSERT(penum);

    // first count the elements
    ULONG ulItem = 1;
    ULONG ulItemActual;
    IBaseFilter* pFilter;
    penum->Reset();
    while (penum->Next(ulItem, &pFilter, &ulItemActual) == S_OK) {
        ASSERT(ulItemActual == 1);
        m_cItems++;
        pFilter->Release();
    }

    // allocate enough space to hold them all
    m_rpDispatch = new IDispatch*[m_cItems];
    if (!m_rpDispatch) {
        *phr = E_OUTOFMEMORY;
        return;
    }

    // now go round again storing them away
    penum->Reset();
    HRESULT hr;
    for (int i = 0; i< m_cItems; i++) {
        hr = penum->Next(ulItem, &pFilter, &ulItemActual);
        ASSERT(hr == S_OK);

	// create a CFilterInfo wrapper for this and get the IDispatch
        // for it
        hr = CFilterInfo::CreateFilterInfo(&m_rpDispatch[i], pFilter);
        if (FAILED(hr)) {
            *phr = hr;
	    ASSERT(m_rpDispatch[i] == NULL); // otherwise we will try and Release() it later
        }

	// can release the filter -addrefed in CFilterInfo constructor
	pFilter->Release();
    }
}



// --- IFilterInfo implementation ---

CFilterInfo::CFilterInfo(
    IBaseFilter* pFilter,
    TCHAR* pName,
    LPUNKNOWN pUnk,
    HRESULT * phr)
  : CUnknown(pName, pUnk),
    m_pFilter(pFilter)
{
    ASSERT(m_pFilter);
    m_pFilter->AddRef();
}

CFilterInfo::~CFilterInfo()
{
    if (m_pFilter) {
        m_pFilter->Release();
    }
}

STDMETHODIMP
CFilterInfo::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IFilterInfo) {
        return GetInterface((IFilterInfo*)this, ppv);
    } else if (riid == IID_IDispatch) {
        return GetInterface((IDispatch*)this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}

// return 1 if we support GetTypeInfo
STDMETHODIMP
CFilterInfo::GetTypeInfoCount(UINT * pctinfo)
{
    return m_dispatch.GetTypeInfoCount(pctinfo);
}


// attempt to find our type library
STDMETHODIMP
CFilterInfo::GetTypeInfo(
  UINT itinfo,
  LCID lcid,
  ITypeInfo ** pptinfo)
{
    return m_dispatch.GetTypeInfo(
                IID_IFilterInfo,
                itinfo,
                lcid,
                pptinfo);
}

STDMETHODIMP
CFilterInfo::GetIDsOfNames(
  REFIID riid,
  OLECHAR  ** rgszNames,
  UINT cNames,
  LCID lcid,
  DISPID * rgdispid)
{
    return m_dispatch.GetIDsOfNames(
                        IID_IFilterInfo,
                        rgszNames,
                        cNames,
                        lcid,
                        rgdispid);
}


STDMETHODIMP
CFilterInfo::Invoke(
  DISPID dispidMember,
  REFIID riid,
  LCID lcid,
  WORD wFlags,
  DISPPARAMS * pdispparams,
  VARIANT * pvarResult,
  EXCEPINFO * pexcepinfo,
  UINT * puArgErr)
{
    // this parameter is a dead leftover from an earlier interface
    if (IID_NULL != riid) {
        return DISP_E_UNKNOWNINTERFACE;
    }

    ITypeInfo * pti;
    HRESULT hr = GetTypeInfo(0, lcid, &pti);

    if (FAILED(hr)) {
        return hr;
    }

    hr = pti->Invoke(
            (IFilterInfo *)this,
            dispidMember,
            wFlags,
            pdispparams,
            pvarResult,
            pexcepinfo,
            puArgErr);

    pti->Release();

    return hr;
}

// find a pin given an id - returns an object supporting
// IPinInfo
STDMETHODIMP
CFilterInfo::FindPin(
                BSTR strPinID,
                IDispatch** ppUnk)
{
    CheckPointer(ppUnk,E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch *));

    IPin * pPin;
    HRESULT hr = m_pFilter->FindPin(strPinID, &pPin);
    if (FAILED(hr)) {
	return hr;
    }

    hr = CPinInfo::CreatePinInfo(ppUnk, pPin);
    pPin->Release();
    return hr;
}

// filter name
STDMETHODIMP
CFilterInfo::get_Name(
                BSTR* strName)
{
    CheckPointer(strName,E_POINTER);
    ValidateReadWritePtr(strName, sizeof(BSTR));

    FILTER_INFO fi;
    m_pFilter->QueryFilterInfo(&fi);
    QueryFilterInfoReleaseGraph(fi);

    // Allocate and return a copied BSTR version
    return WriteBSTR(strName, fi.achName);
}

// Vendor info string
STDMETHODIMP
CFilterInfo::get_VendorInfo(
                BSTR* strVendorInfo)
{
    CheckPointer(strVendorInfo,E_POINTER);
    ValidateReadWritePtr(strVendorInfo, sizeof(BSTR));

    LPWSTR lpsz;

    HRESULT hr = m_pFilter->QueryVendorInfo(&lpsz);

    if (hr == E_NOTIMPL) {
	WCHAR buffer[80];
	WideStringFromResource(buffer, IDS_NOVENDORINFO);
        return WriteBSTR(strVendorInfo, buffer);
    }
    hr = WriteBSTR(strVendorInfo, lpsz);
    QzTaskMemFree(lpsz);
    return hr;
}

// returns the actual filter object (supports IBaseFilter)
STDMETHODIMP
CFilterInfo::get_Filter(
                IUnknown **ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IUnknown *));

    *ppUnk = m_pFilter;
    m_pFilter->AddRef();
    return S_OK;
}

// returns an IAMCollection object containing the PinInfo objects
// for this filter
STDMETHODIMP
CFilterInfo::get_Pins(
                IDispatch ** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch *));

    // get an enumerator for the pins on this filters
    IEnumPins * penum;
    HRESULT hr = m_pFilter->EnumPins(&penum);
    if (FAILED(hr)) {
        return hr;
    }

    CPinCollection * pCollection =
        new CPinCollection(
                penum,
                NULL,           // not aggregated
                &hr);

    // need to release this - he will addref it first if he
    // holds onto it
    penum->Release();

    if (pCollection == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pCollection;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pCollection->QueryInterface(IID_IDispatch, (void**)ppUnk);

    if (FAILED(hr)) {
        delete pCollection;
    }

    return hr;
}

//
// return OLE-Automation BOOLEAN which is -1 for TRUE and 0 for false.
// TRUE if the filter supports IFileSourceFilter
STDMETHODIMP
CFilterInfo::get_IsFileSource(
    long * pbIsSource)
{
    CheckPointer(pbIsSource, E_POINTER);
    ValidateReadWritePtr(pbIsSource, sizeof(long));

    IFileSourceFilter* p;

    HRESULT hr = m_pFilter->QueryInterface(IID_IFileSourceFilter, (void**)&p);
    if (FAILED(hr)) {
	*pbIsSource = FALSE;
    } else {
    	*pbIsSource = -1;
	p->Release();
    }
    return S_OK;
}


// wrapper for IFileSourceFilter::GetCurFile
STDMETHODIMP
CFilterInfo::get_Filename(
    BSTR* pstrFilename)
{
    CheckPointer(pstrFilename, E_POINTER);
    ValidateReadWritePtr(pstrFilename, sizeof(BSTR));
    IFileSourceFilter* p;

    HRESULT hr = m_pFilter->QueryInterface(IID_IFileSourceFilter, (void**)&p);
    if (FAILED(hr)) {
	return hr;
    }
    LPWSTR pname;
    hr = p->GetCurFile(&pname, NULL);
    p->Release();

    if (FAILED(hr)) {
	return hr;
    }

    if (pname) {
	hr = WriteBSTR(pstrFilename, pname);
	QzTaskMemFree(pname);
    } else {
	hr = WriteBSTR(pstrFilename, L"");
    }

    return hr;

}

// wrapper for IFileSourceFilter::Load
STDMETHODIMP
CFilterInfo::put_Filename(
    BSTR strFilename)
{
    IFileSourceFilter* p;

    // if the passed in string is NULL, simply return NOERROR. We will not
    // try to set the name in this case. 
    if ('\0' == *strFilename)
        return NOERROR ;

    HRESULT hr = m_pFilter->QueryInterface(IID_IFileSourceFilter, (void**)&p);
    if (FAILED(hr)) {
	return hr;
    }
    hr = p->Load(strFilename, NULL);

    p->Release();

    return hr;
}


// creates a CFilterInfo and writes an addref-ed IDispatch pointer
// to the ppDisp parameter. IBaseFilter will be addrefed by the
// CFilterInfo constructor
// static
HRESULT
CFilterInfo::CreateFilterInfo(IDispatch**ppdisp, IBaseFilter* pFilter)
{
    HRESULT hr = S_OK;
    CFilterInfo *pfi = new CFilterInfo(
                            pFilter,
                            NAME("filterinfo"),
                            NULL,
                            &hr);
    if (!pfi) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pfi->QueryInterface(IID_IDispatch, (void**)ppdisp);
    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }
    return S_OK;
}

// --- CMediaTypeInfo implementation ---

CMediaTypeInfo::CMediaTypeInfo(
    AM_MEDIA_TYPE& mt,
    TCHAR* pName,
    LPUNKNOWN pUnk,
    HRESULT * phr)
  : CUnknown(pName, pUnk),
    m_mt(mt)
{
}

CMediaTypeInfo::~CMediaTypeInfo()
{
}

STDMETHODIMP
CMediaTypeInfo::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IMediaTypeInfo) {
        return GetInterface((IMediaTypeInfo*)this, ppv);
    } else if (riid == IID_IDispatch) {
        return GetInterface((IDispatch*)this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}

// return 1 if we support GetTypeInfo
STDMETHODIMP
CMediaTypeInfo::GetTypeInfoCount(UINT * pctinfo)
{
    return m_dispatch.GetTypeInfoCount(pctinfo);
}


// attempt to find our type library
STDMETHODIMP
CMediaTypeInfo::GetTypeInfo(
  UINT itinfo,
  LCID lcid,
  ITypeInfo ** pptinfo)
{
    return m_dispatch.GetTypeInfo(
                IID_IMediaTypeInfo,
                itinfo,
                lcid,
                pptinfo);
}

STDMETHODIMP
CMediaTypeInfo::GetIDsOfNames(
  REFIID riid,
  OLECHAR  ** rgszNames,
  UINT cNames,
  LCID lcid,
  DISPID * rgdispid)
{
    return m_dispatch.GetIDsOfNames(
                        IID_IMediaTypeInfo,
                        rgszNames,
                        cNames,
                        lcid,
                        rgdispid);
}


STDMETHODIMP
CMediaTypeInfo::Invoke(
  DISPID dispidMember,
  REFIID riid,
  LCID lcid,
  WORD wFlags,
  DISPPARAMS * pdispparams,
  VARIANT * pvarResult,
  EXCEPINFO * pexcepinfo,
  UINT * puArgErr)
{
    // this parameter is a dead leftover from an earlier interface
    if (IID_NULL != riid) {
        return DISP_E_UNKNOWNINTERFACE;
    }

    ITypeInfo * pti;
    HRESULT hr = GetTypeInfo(0, lcid, &pti);

    if (FAILED(hr)) {
        return hr;
    }

    hr = pti->Invoke(
            (IMediaTypeInfo *)this,
            dispidMember,
            wFlags,
            pdispparams,
            pvarResult,
            pexcepinfo,
            puArgErr);

    pti->Release();

    return hr;
}


STDMETHODIMP
CMediaTypeInfo::get_Type(BSTR* strType)
{
    CheckPointer(strType, E_POINTER);
    ValidateReadWritePtr(strType, sizeof(BSTR));

    // room for slop
    WCHAR sz[CHARS_IN_GUID+10];

    // convert type guid to a string
    HRESULT hr = QzStringFromGUID2(*m_mt.Type(), sz, CHARS_IN_GUID+10);
    if (FAILED(hr)) {
        return hr;
    }
    return WriteBSTR(strType, sz);
}

STDMETHODIMP
CMediaTypeInfo::get_Subtype(
    BSTR* strType)
{
    CheckPointer(strType, E_POINTER);
    ValidateReadWritePtr(strType, sizeof(BSTR));

    // room for slop
    WCHAR sz[CHARS_IN_GUID+10];

    // convert type guid to a string
    HRESULT hr = QzStringFromGUID2(*m_mt.Subtype(), sz, CHARS_IN_GUID+10);
    if (FAILED(hr)) {
        return hr;
    }
    return WriteBSTR(strType, sz);

}

// create a CMediaTypeInfo object and return IDispatch
//static
HRESULT
CMediaTypeInfo::CreateMediaTypeInfo(IDispatch**ppdisp, AM_MEDIA_TYPE& rmt)
{
    HRESULT hr = S_OK;
    *ppdisp = NULL;  // in case of error
    CMediaTypeInfo *pfi = new CMediaTypeInfo(
                            rmt,
                            NAME("MediaTypeinfo"),
                            NULL,
                            &hr);
    if (!pfi) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pfi->QueryInterface(IID_IDispatch, (void**)ppdisp);
    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }
    return S_OK;
}

// --- IPinInfo implementation ---

CPinInfo::CPinInfo(
    IPin* pPin,
    TCHAR* pName,
    LPUNKNOWN pUnk,
    HRESULT * phr)
  : CUnknown(pName, pUnk),
    m_pPin(pPin)
{
    ASSERT(m_pPin);
    m_pPin->AddRef();
}

CPinInfo::~CPinInfo()
{
    if (m_pPin) {
        m_pPin->Release();
    }
}

STDMETHODIMP
CPinInfo::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IPinInfo) {
        return GetInterface((IPinInfo*)this, ppv);
    } else if (riid == IID_IDispatch) {
        return GetInterface((IDispatch*)this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}

// return 1 if we support GetTypeInfo
STDMETHODIMP
CPinInfo::GetTypeInfoCount(UINT * pctinfo)
{
    return m_dispatch.GetTypeInfoCount(pctinfo);
}


// attempt to find our type library
STDMETHODIMP
CPinInfo::GetTypeInfo(
  UINT itinfo,
  LCID lcid,
  ITypeInfo ** pptinfo)
{
    return m_dispatch.GetTypeInfo(
                IID_IPinInfo,
                itinfo,
                lcid,
                pptinfo);
}

STDMETHODIMP
CPinInfo::GetIDsOfNames(
  REFIID riid,
  OLECHAR  ** rgszNames,
  UINT cNames,
  LCID lcid,
  DISPID * rgdispid)
{
    return m_dispatch.GetIDsOfNames(
                        IID_IPinInfo,
                        rgszNames,
                        cNames,
                        lcid,
                        rgdispid);
}


STDMETHODIMP
CPinInfo::Invoke(
  DISPID dispidMember,
  REFIID riid,
  LCID lcid,
  WORD wFlags,
  DISPPARAMS * pdispparams,
  VARIANT * pvarResult,
  EXCEPINFO * pexcepinfo,
  UINT * puArgErr)
{
    // this parameter is a dead leftover from an earlier interface
    if (IID_NULL != riid) {
        return DISP_E_UNKNOWNINTERFACE;
    }

    ITypeInfo * pti;
    HRESULT hr = GetTypeInfo(0, lcid, &pti);

    if (FAILED(hr)) {
        return hr;
    }

    hr = pti->Invoke(
            (IPinInfo *)this,
            dispidMember,
            wFlags,
            pdispparams,
            pvarResult,
            pexcepinfo,
            puArgErr);

    pti->Release();

    return hr;
}

STDMETHODIMP
CPinInfo::get_Pin(
    IUnknown** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IUnknown*));

    *ppUnk = m_pPin;
    m_pPin->AddRef();
    return S_OK;

}

// get the PinInfo object for the pin we are connected to
STDMETHODIMP
CPinInfo::get_ConnectedTo(
                IDispatch** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch*));

    IPin* pPin;
    HRESULT hr = m_pPin->ConnectedTo(&pPin);
    if (FAILED(hr)) {
        return hr;
    };

    hr = CreatePinInfo(ppUnk, pPin);
    pPin->Release();
    return hr;
}

// get the media type on this connection - returns an
// object supporting IMediaTypeInfo
STDMETHODIMP
CPinInfo::get_ConnectionMediaType(
                IDispatch** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch*));

    CMediaType mt;
    HRESULT hr = m_pPin->ConnectionMediaType(&mt);
    if (FAILED(hr)) {
        return hr;
    }

    return CMediaTypeInfo::CreateMediaTypeInfo(ppUnk, mt);
}


// return the FilterInfo object for the filter this pin
// is part of
STDMETHODIMP
CPinInfo::get_FilterInfo(
                IDispatch** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch*));

    PIN_INFO pi;
    HRESULT hr = m_pPin->QueryPinInfo(&pi);
    if (FAILED(hr)) {
        return hr;
    }

    hr = CFilterInfo::CreateFilterInfo(ppUnk, pi.pFilter);
    QueryPinInfoReleaseFilter(pi);

    return hr;
}

// get the name of this pin
STDMETHODIMP
CPinInfo::get_Name(
                BSTR* pstr)
{
    CheckPointer(pstr, E_POINTER);
    ValidateReadWritePtr(pstr, sizeof(BSTR));

    PIN_INFO pi;
    HRESULT hr = m_pPin->QueryPinInfo(&pi);
    if (FAILED(hr)) {
        return hr;
    }
    QueryPinInfoReleaseFilter(pi);

    hr = WriteBSTR(pstr, pi.achName);

    return hr;
}

// pin direction
STDMETHODIMP
CPinInfo::get_Direction(
                LONG *ppDirection)
{
    CheckPointer(ppDirection, E_POINTER);
    ValidateReadWritePtr(ppDirection, sizeof(long));
    PIN_DIRECTION pd;
    HRESULT hr = m_pPin->QueryDirection(&pd);
    if (FAILED(hr)) {
        return hr;
    }
    *ppDirection = pd;

    return hr;
}

// PinID - can pass to IFilterInfo::FindPin
STDMETHODIMP
CPinInfo::get_PinID(
                BSTR* strPinID)
{
    CheckPointer(strPinID, E_POINTER);
    ValidateReadWritePtr(strPinID, sizeof(BSTR));
    LPWSTR pID;
    HRESULT hr = m_pPin->QueryId(&pID);
    if (FAILED(hr)) {
	return hr;
    }
    hr = WriteBSTR(strPinID, pID);
    QzTaskMemFree(pID);

    return hr;
}

// collection of preferred media types (IAMCollection)
STDMETHODIMP
CPinInfo::get_MediaTypes(
                IDispatch** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch*));

    // get an enumerator for the media types on this pin
    IEnumMediaTypes * penum;
    HRESULT hr = m_pPin->EnumMediaTypes(&penum);
    if (FAILED(hr)) {
        return hr;
    }

    CMediaTypeCollection * pCollection =
        new CMediaTypeCollection(
                penum,
                NULL,           // not aggregated
                &hr);

    // need to release this - he will addref it first if he
    // holds onto it
    penum->Release();

    if (pCollection == NULL) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pCollection;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pCollection->QueryInterface(IID_IDispatch, (void**)ppUnk);

    if (FAILED(hr)) {
        delete pCollection;
    }

    return hr;
}

// Connect to the following pin, using other transform
// filters as necessary. pPin can support either IPin or IPinInfo
STDMETHODIMP
CPinInfo::Connect(
                IUnknown* pPin)
{
    // get the real IPin - pPin may be IPin or IPinInfo
    // - will be addrefed
    IPin* pThePin;
    HRESULT hr = GetIPin(&pThePin, pPin);
    if (FAILED(hr)) {
        return hr;
    }

    // get the filtergraph from the filter that this pin belongs to
    // - will be addrefed
    IGraphBuilder* pGraph;
    hr = GetGraph(&pGraph, pThePin);
    if (FAILED(hr)) {
        pThePin->Release();
        return hr;
    }

    hr = pGraph->Connect(m_pPin, pThePin);

    pThePin->Release();
    pGraph->Release();
    return hr;

}

// Connect directly to the following pin, not using any intermediate
// filters
STDMETHODIMP
CPinInfo::ConnectDirect(
                IUnknown* pPin)
{
    // get the real IPin - pPin may be IPin or IPinInfo
    // - will be addrefed
    IPin* pThePin;
    HRESULT hr = GetIPin(&pThePin, pPin);
    if (FAILED(hr)) {
        return hr;
    }

    // get the filtergraph from the filter that this pin belongs to
    // - will be addrefed
    IGraphBuilder* pGraph;
    hr = GetGraph(&pGraph, pThePin);
    if (FAILED(hr)) {
        pThePin->Release();
        return hr;
    }

    hr = pGraph->ConnectDirect(m_pPin, pThePin, NULL);

    pThePin->Release();
    pGraph->Release();
    return hr;
}

// Connect directly to the following pin, using the specified
// media type only. pPin is an object that must support either
// IPin or IPinInfo, and pMediaType must support IMediaTypeInfo.
STDMETHODIMP
CPinInfo::ConnectWithType(
                IUnknown * pPin,
                IDispatch * pMediaType)
{
    // get the real IPin - pPin may be IPin or IPinInfo
    // - will be addrefed
    IPin* pThePin;
    HRESULT hr = GetIPin(&pThePin, pPin);
    if (FAILED(hr)) {
        return hr;
    }

    // get the filtergraph from the filter that this pin belongs to
    // - will be addrefed
    IGraphBuilder* pGraph;
    hr = GetGraph(&pGraph, pThePin);
    if (FAILED(hr)) {
        pThePin->Release();
        return hr;
    }

    // create a media type from IMediaTypeInfo
    IMediaTypeInfo* pInfo;
    hr = pMediaType->QueryInterface(IID_IMediaTypeInfo, (void**)&pInfo);
    if (FAILED(hr)) {
        pThePin->Release();
        pGraph->Release();
        return hr;
    }

    CMediaType mt;

    BSTR str;
    GUID guidType;
    hr = pInfo->get_Type(&str);
    if (SUCCEEDED(hr)) {
        hr = QzCLSIDFromString(str, &guidType);
        FreeBSTR(&str);
    }
    if (SUCCEEDED(hr)) {
        mt.SetType(&guidType);

        hr = pInfo->get_Subtype(&str);
    }
    if (SUCCEEDED(hr)) {
        hr = QzCLSIDFromString(str, &guidType);
        FreeBSTR(&str);
    }
    if (SUCCEEDED(hr)) {
        mt.SetSubtype(&guidType);
        hr = pGraph->ConnectDirect(m_pPin, pThePin, &mt);
    }

    pInfo->Release();
    pThePin->Release();
    pGraph->Release();
    return hr;
}

// disconnect this pin and the corresponding connected pin from
// each other. (Calls IPin::Disconnect on both pins).
STDMETHODIMP
CPinInfo::Disconnect(void)
{
    // get the filtergraph from the filter that this pin belongs to
    // - will be addrefed
    IGraphBuilder* pGraph;
    HRESULT hr = GetGraph(&pGraph, m_pPin);
    if (FAILED(hr)) {
        return hr;
    }

    // here we disconnect both pins
    IPin* pPin;
    hr = m_pPin->ConnectedTo(&pPin);
    if (SUCCEEDED(hr)) {
        hr = pGraph->Disconnect(pPin);
    }
    pPin->Release();
    if (FAILED(hr)) {
        pGraph->Release();
        return hr;
    }

    hr = pGraph->Disconnect(m_pPin);

    pGraph->Release();
    return hr;
}

// render this pin using any necessary transform and rendering filters
STDMETHODIMP
CPinInfo::Render(void)
{
    // get the filtergraph from the filter that this pin belongs to
    // - will be addrefed
    IGraphBuilder* pGraph;
    HRESULT hr = GetGraph(&pGraph, m_pPin);
    if (FAILED(hr)) {
        return hr;
    }

    hr = pGraph->Render(m_pPin);

    pGraph->Release();
    return hr;
}

// static
// creates a CPinInfo object for this pin,
// and writes its (addref-ed) IDispatch to ppdisp
HRESULT
CPinInfo::CreatePinInfo(IDispatch**ppdisp, IPin* pPin)
{
    HRESULT hr = S_OK;
    *ppdisp = NULL;
    CPinInfo *pfi = new CPinInfo(
                            pPin,
                            NAME("Pininfo"),
                            NULL,
                            &hr);
    if (!pfi) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pfi->QueryInterface(IID_IDispatch, (void**)ppdisp);
    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }
    return S_OK;
}


// return an addrefed IPin* pointer from an IUnknown that
// may support either IPin* or IPinInfo*
HRESULT
CPinInfo::GetIPin(IPin** ppPin, IUnknown * punk)
{
    // try for IPin itself
    IPin* pPin;
    HRESULT hr = punk->QueryInterface(IID_IPin, (void**)&pPin);
    if (SUCCEEDED(hr)) {
        *ppPin = pPin;
        return hr;
    }

    // no - look for IPinInfo
    IPinInfo* pPinInfo;
    hr = punk->QueryInterface(IID_IPinInfo, (void**)&pPinInfo);
    if (FAILED(hr)) {
        return hr;
    }

    // get the IUnknown of the pin itself
    IUnknown* pPinUnk;
    hr = pPinInfo->get_Pin(&pPinUnk);
    pPinInfo->Release();
    if (FAILED(hr)) {
        return hr;
    }

    // now try again for IPin
    hr = pPinUnk->QueryInterface(IID_IPin, (void**)&pPin);
    if (SUCCEEDED(hr)) {
        *ppPin = pPin;
    }
    pPinUnk->Release();
    return hr;
}

// return an addrefed IGraphBuilder* pointer from an IPin*
// (get the filter and from that the filtergraph).
HRESULT
CPinInfo::GetGraph(IGraphBuilder** ppGraph, IPin* pPin)
{
    // get the filter from the pin
    PIN_INFO pi;
    HRESULT hr = pPin->QueryPinInfo(&pi);
    if (FAILED(hr)) {
        return hr;
    }

    // get the IFilterGraph from the filter
    FILTER_INFO fi;
    hr = pi.pFilter->QueryFilterInfo(&fi);
    QueryPinInfoReleaseFilter(pi);
    if (FAILED(hr)) {
        return hr;
    }

    // get IGraphBuilder from IFilterGraph
    hr = fi.pGraph->QueryInterface(IID_IGraphBuilder, (void**)ppGraph);

    QueryFilterInfoReleaseGraph(fi);
    // pGraph was addref-ed, now released; ppGraph is addref-ed

    return hr;
}


// --- CPinCollection implementation ---



CPinCollection:: CPinCollection(
    IEnumPins* penum,
    IUnknown* pUnk,
    HRESULT* phr)
  : CBaseCollection(
        NAME("CPinCollection base"),
        pUnk,
        phr)
{
    ASSERT(penum);

    // first count the elements
    ULONG ulItem = 1;
    ULONG ulItemActual;
    IPin* pPin;
    penum->Reset();
    while (penum->Next(ulItem, &pPin, &ulItemActual) == S_OK) {
        ASSERT(ulItemActual == 1);
        m_cItems++;
        pPin->Release();
    }

    // allocate enough space to hold them all
    m_rpDispatch = new IDispatch*[m_cItems];
    if (!m_rpDispatch) {
        *phr = E_OUTOFMEMORY;
        return;
    }

    // now go round again storing them away
    penum->Reset();
    HRESULT hr;
    for (int i = 0; i< m_cItems; i++) {
        hr = penum->Next(ulItem, &pPin, &ulItemActual);
        ASSERT(hr == S_OK);

	// create a CPinInfo wrapper for this and get the IDispatch
        // for it
        hr = CPinInfo::CreatePinInfo(&m_rpDispatch[i], pPin);
        if (FAILED(hr)) {
            *phr = hr;
	    ASSERT(m_rpDispatch[i] == NULL);
        }

	// can release the Pin -addrefed in CPinInfo constructor
	pPin->Release();
    }
}


// --- implementation of CMediaTypeInfo collection

CMediaTypeCollection:: CMediaTypeCollection(
    IEnumMediaTypes* penum,
    IUnknown* pUnk,
    HRESULT* phr)
  : CBaseCollection(
        NAME("CMediaTypeCollection base"),
        pUnk,
        phr)
{
    ASSERT(penum);

    // first count the elements
    ULONG ulItem = 1;
    ULONG ulItemActual;
    AM_MEDIA_TYPE * pmt;
    penum->Reset();
    while (penum->Next(ulItem, &pmt, &ulItemActual) == S_OK) {
        ASSERT(ulItemActual == 1);
        m_cItems++;

        DeleteMediaType(pmt);
    }

    // allocate enough space to hold them all
    m_rpDispatch = new IDispatch*[m_cItems];
    if (!m_rpDispatch) {
        *phr = E_OUTOFMEMORY;
        return;
    }

    // now go round again storing them away
    penum->Reset();
    HRESULT hr;
    for (int i = 0; i< m_cItems; i++) {
        hr = penum->Next(ulItem, &pmt, &ulItemActual);
        ASSERT(hr == S_OK);

	// create a CMediaTypeInfo wrapper for this and get the IDispatch
        // for it
        hr = CMediaTypeInfo::CreateMediaTypeInfo(&m_rpDispatch[i], *pmt);
        if (FAILED(hr)) {
            *phr = hr;
	    ASSERT(m_rpDispatch[i] == NULL);
        }
        DeleteMediaType(pmt);
    }
}


// --- CRegFilterInfo methods ---

CRegFilterInfo::CRegFilterInfo(
    IMoniker *pmon,
    IGraphBuilder* pgraph,
    TCHAR* pName,
    LPUNKNOWN pUnk,
    HRESULT * phr)
  : CUnknown(pName, pUnk),
    m_pgraph(pgraph)
{
    ASSERT(pmon);               // caller's responsibility
    ASSERT(pgraph);

    m_pmon = pmon;
    pmon->AddRef();
}

CRegFilterInfo::~CRegFilterInfo()
{
    m_pmon->Release();
}

STDMETHODIMP
CRegFilterInfo::NonDelegatingQueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IRegFilterInfo) {
        return GetInterface((IRegFilterInfo*)this, ppv);
    } else if (riid == IID_IDispatch) {
        return GetInterface((IDispatch*)this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}

// return 1 if we support GetTypeInfo
STDMETHODIMP
CRegFilterInfo::GetTypeInfoCount(UINT * pctinfo)
{
    return m_dispatch.GetTypeInfoCount(pctinfo);
}


// attempt to find our type library
STDMETHODIMP
CRegFilterInfo::GetTypeInfo(
  UINT itinfo,
  LCID lcid,
  ITypeInfo ** pptinfo)
{
    return m_dispatch.GetTypeInfo(
                IID_IRegFilterInfo,
                itinfo,
                lcid,
                pptinfo);
}

STDMETHODIMP
CRegFilterInfo::GetIDsOfNames(
  REFIID riid,
  OLECHAR  ** rgszNames,
  UINT cNames,
  LCID lcid,
  DISPID * rgdispid)
{
    return m_dispatch.GetIDsOfNames(
                        IID_IRegFilterInfo,
                        rgszNames,
                        cNames,
                        lcid,
                        rgdispid);
}


STDMETHODIMP
CRegFilterInfo::Invoke(
  DISPID dispidMember,
  REFIID riid,
  LCID lcid,
  WORD wFlags,
  DISPPARAMS * pdispparams,
  VARIANT * pvarResult,
  EXCEPINFO * pexcepinfo,
  UINT * puArgErr)
{
    // this parameter is a dead leftover from an earlier interface
    if (IID_NULL != riid) {
        return DISP_E_UNKNOWNINTERFACE;
    }

    ITypeInfo * pti;
    HRESULT hr = GetTypeInfo(0, lcid, &pti);

    if (FAILED(hr)) {
        return hr;
    }

    hr = pti->Invoke(
            (IRegFilterInfo *)this,
            dispidMember,
            wFlags,
            pdispparams,
            pvarResult,
            pexcepinfo,
            puArgErr);

    pti->Release();

    return hr;
}


// get the name of this filter
STDMETHODIMP
CRegFilterInfo::get_Name(
    BSTR* strName)
{
    CheckPointer(strName, E_POINTER);
    ValidateReadWritePtr(strName, sizeof(BSTR));
    ASSERT(m_pmon != 0);        // from construction

    IPropertyBag *ppb;
    HRESULT hr = m_pmon->BindToStorage(0, 0, IID_IPropertyBag, (void **)&ppb);
    if(SUCCEEDED(hr))
    {
        VARIANT varname;
        varname.vt = VT_BSTR;
        varname.bstrVal = 0;
        hr = ppb->Read(L"FriendlyName", &varname, 0);
        if(SUCCEEDED(hr))
        {
            ASSERT(varname.vt == VT_BSTR);
            *strName = varname.bstrVal;
        }
        ppb->Release();
    }

    return hr;
}


// make an instance of this filter, add it to the graph and
// return an IFilterInfo for it.
STDMETHODIMP
CRegFilterInfo::Filter(
    IDispatch** ppUnk)
{
    CheckPointer(ppUnk, E_POINTER);
    ValidateReadWritePtr(ppUnk, sizeof(IDispatch*));
    ASSERT(m_pmon != 0);

    // create the filter
    IBaseFilter* pFilter;

    
    HRESULT hr = m_pmon->BindToObject(
        0, 0, 
        IID_IBaseFilter,
        (void**) &pFilter);
    if(SUCCEEDED(hr))
    {
        BSTR bstrName;
        hr = get_Name(&bstrName);
        if(SUCCEEDED(hr))
        {
            
            hr = m_pgraph->AddFilter(pFilter, bstrName);
            SysFreeString(bstrName);

            if(SUCCEEDED(hr))
            {
                // make an IFilterInfo and return that
                hr = CFilterInfo::CreateFilterInfo(ppUnk, pFilter);
            }
        }
        
        pFilter->Release();
    }

    return hr;
}

// create a
// static
HRESULT
CRegFilterInfo::CreateRegFilterInfo(
    IDispatch**ppdisp,
    IMoniker *pmon,
    IGraphBuilder* pgraph)
{
    HRESULT hr = S_OK;
    CRegFilterInfo *pfi = new CRegFilterInfo(
                                pmon,
                                pgraph,
                                NAME("RegFilterinfo"),
                                NULL,
                                &hr);
    if (!pfi) {
        return E_OUTOFMEMORY;
    }

    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }

    // return an addref-ed IDispatch pointer
    hr = pfi->QueryInterface(IID_IDispatch, (void**)ppdisp);
    if (FAILED(hr)) {
        delete pfi;
        return hr;
    }
    return S_OK;
}


// --- CRegFilterCollection implementation ---

CRegFilterCollection:: CRegFilterCollection(
    IGraphBuilder* pgraph,
    IFilterMapper2 * pmapper,
    IUnknown* pUnk,
    HRESULT* phr)
  : CBaseCollection(
        NAME("CRegFilterCollection base"),
        pUnk,
        phr)
{
    ASSERT(pmapper);
    ASSERT(pgraph);

    // get an enumerator for the filters in the registry - make sure we
    // get all of them
    IEnumMoniker * penum;
    HRESULT hr = pmapper->EnumMatchingFilters(
                    &penum,
                    0,          // dwFlags
                    FALSE,      // bExactMatch
                    0,          // Merit
                    FALSE,      // bInputNeeded
                    0,          // cInputTypes
                    0,0,0,      // input type, medium, pin category
                    FALSE,      // bRender
                    FALSE,      // bOutput,
                    0,          // cOutputTypes,
                    0,0,0       // output type, medium, category
                    );

    if (FAILED(hr)) {
	*phr = hr;
    } else {

        // first count the elements onto a list
        CGenericList<IDispatch> list(NAME("list"));
        IDispatch*pdisp;

        ULONG ulItem = 1;
        ULONG ulItemActual;
        IMoniker *pmon;
        while (SUCCEEDED(*phr) && penum->Next(ulItem, &pmon, &ulItemActual) == S_OK)
        {
            ASSERT(ulItemActual == 1);
	    hr = CRegFilterInfo::CreateRegFilterInfo(&pdisp, pmon, pgraph);
	    if(FAILED(hr)) {
		*phr = hr;
	    } else {
		list.AddTail(pdisp);
	    }
	    pmon->Release();
	}

        // allocate enough space to hold them all
        m_rpDispatch = new IDispatch*[list.GetCount()];
        if (!m_rpDispatch) {
            *phr = E_OUTOFMEMORY;
        } else {

            // now go round again storing them away
            POSITION pos = list.GetHeadPosition();
            int i = 0;
            while(pos) {
		m_rpDispatch[i] = list.GetNext(pos);
		i++;
            }
            m_cItems = i;
        }
        list.RemoveAll();
	penum->Release();
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\fgctlrc.h ===
// resource ids
#ifndef __CONTROL_RESOURCE__
#define __CONTROL_RESOURCE__

#define IDS_NOVENDORINFO     2999

#endif // __CONTROL_RESOURCE__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\fgctl.h ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

//
// FilterGraph control object. This is a plug-in distributor. It will be
// listed in the registry as supporting the control interfaces IMediaControl,
// IMediaEvent, IMediaPosition etc. The filtergraph will load it aggregated
// and ask it for these interfaces.

// The fgctl object will obtain IMediaFilter and IFilterGraph from its outer
// unknown and use these to implement its methods. It will also expose
// IDistributorNotify itself so that it gets told about state, graph and
// clock changes.
//

// The CFGControl object has member objects of embedded classes that do the
// bulk of its work. The CEventStore class can store and forward a list of
// notification events. The IMediaEventSink implementation (CFGControl::Notify)
// uses methods on the event store to deliver events as appropriate. The
// IMediaEvent implementation (CImplMediaEvent) tells the event store
// about event handle changes and asks it for events to deliver.
//
// The CImplMediaPosition class maintains a list of filters that support the
// IMediaPosition interface, and it supports setting and getting the
// duration and start/stop time properties for the whole list, making
// decisions such as that the duration is the longest duration of any filter.
// The CFGControl object exposes IMediaPosition using CImplMediaPosition.

// Some events have default handling in fgctl (EC_REPAINT,
// EC_COMPLETE). The app can override this and force the events to be passed
// unprocessed to the app. Since this only applies to a specific set of events,
// this state (Default Handling or not) is not held in a generic table, but
// as a set of boolean flags at the CFGControl object level (m_bRepaint,
// m_bCountCompletes).

#ifndef _FGCTL_H
#define _FGCTL_H

#include "rsrcmgr.h"
#include <filgraph.h>
#include <IntSet.h>

#define FG_DEVICE_REMOVAL 1
#include <dbt.h>
#include <skipfrm.h>

#ifdef FG_DEVICE_REMOVAL

#if (WINVER < 0x0500)

#define DBT_DEVTYP_DEVICEINTERFACE      0x00000005  // device interface class
#define DEVICE_NOTIFY_WINDOW_HANDLE     0x00000000
typedef  PVOID           HDEVNOTIFY;

#endif

extern "C"
{
    typedef BOOL (/* WINUSERAPI */ WINAPI *PUnregisterDeviceNotification)(
        IN HDEVNOTIFY Handle
        );

    typedef HDEVNOTIFY (/* WINUSERAPI */ WINAPI *PRegisterDeviceNotificationA)(
        IN HANDLE hRecipient,
        IN LPVOID NotificationFilter,
        IN DWORD Flags
        );

    typedef HDEVNOTIFY (/* WINUSERAPI */ WINAPI *PRegisterDeviceNotificationW)(
        IN HANDLE hRecipient,
        IN LPVOID NotificationFilter,
        IN DWORD Flags
        );
}
#ifdef UNICODE
#define PRegisterDeviceNotification  PRegisterDeviceNotificationW
#else
#define PRegisterDeviceNotification  PRegisterDeviceNotificationA
#endif // !UNICODE

#if (WINVER < 0x0500)

typedef struct _DEV_BROADCAST_DEVICEINTERFACE_A {
    DWORD       dbcc_size;
    DWORD       dbcc_devicetype;
    DWORD       dbcc_reserved;
    GUID        dbcc_classguid;
    char        dbcc_name[1];
} DEV_BROADCAST_DEVICEINTERFACE_A, *PDEV_BROADCAST_DEVICEINTERFACE_A;

typedef struct _DEV_BROADCAST_DEVICEINTERFACE_W {
    DWORD       dbcc_size;
    DWORD       dbcc_devicetype;
    DWORD       dbcc_reserved;
    GUID        dbcc_classguid;
    wchar_t     dbcc_name[1];
} DEV_BROADCAST_DEVICEINTERFACE_W, *PDEV_BROADCAST_DEVICEINTERFACE_W;

#ifdef UNICODE
typedef DEV_BROADCAST_DEVICEINTERFACE_W   DEV_BROADCAST_DEVICEINTERFACE;
typedef PDEV_BROADCAST_DEVICEINTERFACE_W  PDEV_BROADCAST_DEVICEINTERFACE;
#else
typedef DEV_BROADCAST_DEVICEINTERFACE_A   DEV_BROADCAST_DEVICEINTERFACE;
typedef PDEV_BROADCAST_DEVICEINTERFACE_A  PDEV_BROADCAST_DEVICEINTERFACE;
#endif // UNICODE
#endif // WINVER

#endif // FG_DEVICE_REMOVAL

// Message codes for filtergraph worker thread

enum WindowMessages {
    AWM_RESOURCE_CALLBACK = (WM_USER + 0),
    AWM_REPAINT 	  = (WM_USER + 1),
    AWM_CUETHENRUN	  = (WM_USER + 2),
    AWM_ONACTIVATE	  = (WM_USER + 3),
    AWM_NEEDRESTART	  = (WM_USER + 4),
    AWM_RECUE		  = (WM_USER + 5),
    AWM_SHUTDOWN	  = (WM_USER + 6),
    AWM_ONDISPLAYCHANGED  = (WM_USER + 7),
    AWM_CUETHENSTOP	  = (WM_USER + 8),
    AWM_POSTTOMAINTHREAD  = (WM_USER + 9),
    AWM_CREATEFILTER      = (WM_USER + 10),
    AWM_DELETESPARELIST   = (WM_USER + 11),
    AWM_CUE               = (WM_USER + 12),
    AWM_STEPPED           = (WM_USER + 13),
    AWM_SKIPFRAMES        = (WM_USER + 14),
    AWM_LAST              = (WM_USER + 14)
};

// need to distinguish between filter clsid and IMoniker pointers:
struct AwmCreateFilterArg
{
    union
    {
        IMoniker *pMoniker;
        const CLSID *pclsid;
	struct {
	    PVOID pvParam;
	    LPTHREAD_START_ROUTINE pfn;
	};
    };

    enum CreationType {
        BIND_MONIKER,
        COCREATE_FILTER,
	USER_CALLBACK
    } creationType;
};

class CFilterGraph;

typedef CGenericList<IVideoWindow> CWindowList;

// forward ref - this is the main object
class CFGControl;

// Globals - filter graph object owning thread id
extern DWORD g_dwObjectThreadId;

// created embedded within CFGControl, this object supports
// IMediaEvent and IMediaEventSink. It calls the Repaint and
// RecordEC_COMPLETE methods on the CFGControl object.
// event interface implementation (uses CEventStore to store the
// events - this object provides the application interface to it)

class CImplMediaEvent
	: public CMediaEvent,
	  public IMediaEventSink
{
    CFGControl * m_pFGControl;

public:
    CImplMediaEvent(const TCHAR*, CFGControl*);

    // Unknown handling
    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

    // IMediaEvent methods

    // get back the current event handle.
    STDMETHODIMP GetEventHandle(OAEVENT * hEvent);

    // retrieve the next event. Waits up to msTimeout millisecs
    // if there are no events.
    STDMETHODIMP GetEvent(
		    long * lEventCode,
		    LONG_PTR * lParam1,
		    LONG_PTR * lParam2,
		    long msTimeout
		    );

    // waits up to dwTimeout millisecs for an EC_COMPLETE or an
    // abort code. Other events will be discarded.
    STDMETHODIMP WaitForCompletion(
		    long msTimeout,
		    long * pEvCode);

    // cancels any system handling of the specified event code
    // and ensures that the events are passed straight to the application
    // (via GetEvent) and not handled. A good example of this is
    // EC_REPAINT: default handling for this ensures the painting of the
    // window and does not get posted to the app.
    STDMETHODIMP CancelDefaultHandling(
		    long lEvCode);

    // restore the normal system default handling that may have been
    // cancelled by CancelDefaultHandling().
    STDMETHODIMP RestoreDefaultHandling(long lEvCode);

    // IMediaEventSink methods
    STDMETHODIMP Notify(long EventCode, LONG_PTR lParam1, LONG_PTR lParam2);

    // Free any resources associated with the parameters to an event.
    // Event parameters may be LONGs, IUnknown* or BSTR. No action
    // is taken with LONGs. IUnknown are passed addrefed and need a
    // Release call. BSTR are allocated by the task allocator and will be
    // freed by calling the task allocator.
    static HRESULT RealFreeEventParams(
		    long lEvCode,
		    LONG_PTR lParam1,
		    LONG_PTR lParam2);

    STDMETHODIMP FreeEventParams(
		    long lEvCode,
		    LONG_PTR lParam1,
		    LONG_PTR lParam2);

    // Register a window to send messages to when events occur
    // Parameters:
    //
    //	  hwnd - handle of window to notify -
    //		 pass NULL to stop notification
    //	  lMsg - Message id to pass messages with
    //
    STDMETHODIMP SetNotifyWindow(
		    OAHWND hwnd,
		    long lMsg,
		    LONG_PTR lInstanceData);

    //  Set and get notify flags (AM_MEDIAEVENT_...)
    STDMETHODIMP SetNotifyFlags(long lNotifyFlags);
    STDMETHODIMP GetNotifyFlags(long *plNotifyFlags);

    void ClearEvents( long ev_code ) { m_EventStore.ClearEvents( ev_code ); }
    void LockEventStore() { m_EventStore.m_Lock.Lock(); }
    void UnlockEventStore() { m_EventStore.m_Lock.Unlock(); }
    long NumberOfEventsInStore() const
	{ return m_EventStore.m_list.GetCount(); }

    HRESULT Deliver(long evCode, LONG_PTR lParam1, LONG_PTR lParam2)
    {
        return m_EventStore.Deliver(evCode, lParam1, lParam2);
    }

    void ResetSeenEvents() { m_SeenEventsSet = 0; }
    bool DontForwardEvent( long EventCode );
    HRESULT ProcessEC_COMPLETE(LONG_PTR lParam1, LONG_PTR lParam2);
    CCritSec* GetEventStoreLock(void);

private:

    // event store object - events are put into this store by the
    // Deliver method, and collected (for the GetEvent implementation)
    // by the Collect method.
    class CEventStore {
	class CNotifyItem {
	public:
	    long m_Code;
	    LONG_PTR m_Param1;
	    LONG_PTR m_Param2;

	    CNotifyItem(long lCode, LONG_PTR l1, LONG_PTR l2) {
		m_Code = lCode;
		m_Param1 = l1;
		m_Param2 = l2;
	    };

	    void Collect(long * plCode, LONG_PTR * pl1, LONG_PTR * pl2) const {
		*plCode = m_Code;
		*pl1 = m_Param1;
		*pl2 = m_Param2;
	    };

	};
	typedef CGenericList<CNotifyItem> CItemList;

	// Window to post messages to and message id to use
	HWND m_hwndNotify;
	UINT m_uMsgId;
	LONG_PTR m_lInstanceData;

    public:
	HANDLE m_hEvent;

        // Modal flags
        DWORD m_dwNotifyFlags;

	CEventStore();
	~CEventStore();

	// can q events even if SetEvent not called
	HRESULT Deliver(long, LONG_PTR, LONG_PTR);

	HRESULT GetEventHandle(HANDLE * phEvent);
	HRESULT Collect(long *, LONG_PTR*, LONG_PTR*, long);

	void ClearEvents( long ev_code );

	void SetNotifyWindow(
		    HWND hwnd,
		    UINT uMsg,
		    LONG_PTR lInstanceData);

	CItemList m_list;
	CCritSec m_Lock;
    }; //CEventStore

    CEventStore m_EventStore;

    // This set has an entry for each event that has had its default
    // handling cancelled.  It can only cope with events numbered
    // [0..31].  If this becomes insufficient, switch to the IntSet
    // class instead (but there'll be some extra tweeks to do too).
    IntSmallSet m_CancelledEventsSet;

    // A set representing the pure internal events.
    const IntSmallSet m_InternalEventsSet;

    // This set details those events which _can_ have their default
    // handling cancelled (i.e. they're not pure internal and they have
    // some form of default handling procedure.)
    const IntSmallSet m_DefaultedEventsSet;

    // List of events seen since graph was last paused
    IntSmallSet m_SeenEventsSet;

    // don't store events handled by the app if the app has never QId
    // for IMediaEvent(,Ex)
    BOOL m_fMediaEventQId;


};

// this is the distributor object. it implements IMediaFilter itself to
// track state, and uses embedded objects to support the control
// interfaces.

class CFGControl
{
    ~CFGControl();
    CFGControl( CFilterGraph * pFilterGraph, HRESULT * phr );

    CFilterGraph *const 	m_pFG;
    IUnknown *const		m_pOwner;
    CMsgMutex *const		m_pFGCritSec;

    friend class CFilterGraph;
    friend class CImplMediaEvent;

public:

    //  timer id
    enum { TimerId = 1 };

    IUnknown * GetOwner() { return m_pOwner; }
    CMsgMutex * GetFilterGraphCritSec() const { return m_pFGCritSec; }

    // IDistributorNotify methods - not really, anymore, but CFilterGraph
    // does still call them (for now).
    //
    // we don't distribute these methods to the graph - we are told this
    // for our own information.
    HRESULT SetSyncSource(IReferenceClock *pClock);
    HRESULT Stop();
    HRESULT Pause();
    HRESULT Run(REFERENCE_TIME tBase);

    HRESULT Shutdown(void);

    // used by other parts of the distributor to find out the
    // real state - non-blocking and never intermediate
    FILTER_STATE GetLieState()
    { CAutoMsgMutex lock(GetFilterGraphCritSec()); return m_LieState; }

    FILTER_STATE GetFilterGraphState() const
    { return m_pFG->m_State; }

    // Methods called back from the worker's window procedure
    LRESULT WorkerPinRepaint(IPin *pPin);
    LRESULT WorkerRepaint(DWORD dwStateVersion, IPin *pPin );
    LRESULT WorkerActivate(IBaseFilter *pFilter,BOOL bActive);
    LRESULT WorkerDisplayChanged(IPin **ppPin, DWORD dwPinCount);
    LRESULT WorkerRestart(BOOL bStop);
    LRESULT WorkerShutdown();
    LRESULT WorkerCueThenRun( DWORD dwStateVersion );
    LRESULT WorkerCueThenStop( DWORD dwStateVersion );
    LRESULT WorkerRecue( DWORD dwStateVersion );
    LRESULT WorkerPassMessageOn(HWND hwnd, UINT uMsg,WPARAM wParam,LPARAM lParam);
    LRESULT WorkerSkipFrames(DWORD dwNumFramesToSkip, IFrameSkipResultCallback* pFSRCB);
    LRESULT WorkerFrameStepFinished(DWORD dwStepVersion);

    // Defer cued action
    HRESULT DeferCued(UINT eAction, FILTER_STATE fs);
    // Handle stuff after a wait for the graph to cue
    HRESULT CheckCued();
    // Cancel stuff after cue
    void CancelAction();

    // Cancel any repaint - this allows us to stop reliably
    void CancelRepaint();

    // other public methods that embedded interface implementors can call

    // get lists of filters supporting a given interface.
    // should lock CFGControl critsec while traversing these
    // lists.

    HRESULT GetListSeeking(CGenericList<IMediaSeeking>** pplist);
    HRESULT GetListAudio(CGenericList<IBasicAudio>** pplist);
    HRESULT GetListWindow(CGenericList<IVideoWindow>** pplist);

    // NB: Even if UpdateLists fails, the pointers will still be NULLed out
    //	   So we don't need to test the return code from UpdateLists.
    IVideoWindow *FirstVW()
    {
        CAutoLock lck(&m_csFirstVW);
        if (m_pFirstVW) {
            m_pFirstVW->AddRef();
        }
        return m_pFirstVW;
    }
    void SetFirstVW(IVideoWindow *pVW)
    {
        CAutoLock lck(&m_csFirstVW);
        m_pFirstVW = pVW;
    }
    IVideoWindow * GetFirstVW() { UpdateLists(); return m_pFirstVW; }
    IBasicVideo  * GetFirstBV() { UpdateLists(); return m_pFirstBV; }

    // reset the count of running renderers to the total number
    // in the graph that will provide EC_COMPLETE
    HRESULT CountRenderers(void);

    void InitializeEC_COMPLETEState(void);

    // Used in processing EC_COMPLETES. This method decrements and returns the
    // number of renderers remaining.
    long DecrementRenderers(void);
    void IncrementRenderers(void);

    void ResetEC_COMPLETEState(void);

    // reset the current position to 0 - used
    // when changing the start time in pause mode to put the stream time
    // offset back to ensure that the first sample played from the
    // new position is played at run time
    HRESULT ResetStreamTime(void);

    HRESULT GetStreamTime( REFERENCE_TIME * pTime );

    // issue a Run command to m_pMF with the correct base time
    HRESULT IssueRun(void);

    // accessor methods for the CImplQueueCommand object
    HANDLE GetCmdDueHandle() {
	return m_qcmd.GetDueHandle();
    };

    void ProcessCmdDue() {
	m_qcmd.Process();
    }

    CFilterGraph * GetFG() const { return m_pFG; }
    HRESULT HibernateSuspendGraph();
    HRESULT HibernateResumeGraph();

    // Return S_FALSE if our version is out of sync with FG version,
    // else S_OK.  (The implication is we need to update our lists.)
    HRESULT CheckVersion()
    {
	ASSERT(CritCheckIn(GetFilterGraphCritSec()));
	const LONG lFGVer = m_pFG->mFG_iVersion;
	const HRESULT hr = lFGVer == m_iVersion ? S_OK : S_FALSE;
	m_iVersion = lFGVer;
        return hr;
    }

    // pass a notification on to the IMediaEventSink handler
    HRESULT Notify(long EventCode, LONG_PTR lParam1, LONG_PTR lParam2)
    {
	return m_implMediaEvent.Notify(EventCode, lParam1, lParam2);
    };

    // are we shutting down?
    BOOL IsShutdown(void) const
    { return m_bShuttingDown; }

    // we are about to stop - get current position now
    void BeforeStop() {
	m_implMediaSeeking.BeforeStop();
    };

    // all filters now notified about stop - can set new current position
    void AfterStop() {
	m_implMediaSeeking.AfterStop();
    };

    // let other parts of this PID piggy-back on the worker thread.
    // these methods are called on the worker thread

    void OnThreadInit(HWND hwnd) {		// on thread startup
	m_ResourceManager.OnThreadInit(hwnd);
    };
    void OnThreadExit(HWND hwnd) {		// on thread shutdown
	m_ResourceManager.OnThreadExit(hwnd);
    };
    void OnThreadMessage(void) {	// when there is a PostThreadMessage
	m_ResourceManager.OnThreadMessage();
    };

    // forward a focus message to the resource manager
    HRESULT SetFocus(IBaseFilter* pFocusObject);
    HRESULT ReleaseFocus(IUnknown* pUnk);

    void SetRequestedApplicationState(FILTER_STATE state) {
        CancelAction();
        m_LieState = state;
        m_dwStateVersion++;
    }

    // call this to ensure the lists are uptodate.
    HRESULT UpdateLists();

protected:
    // clear out our cached lists of filters. Called from our destructor,
    // and from UpdateLists when preparing a more uptodate list.
    // Also called from NotifyGraphChange.
    void EmptyLists();

    // given a filter, see if it is a renderer for any input pins
    // returns S_OK for renderer, S_FALSE for not and errors otherwise
    HRESULT IsRenderer(IBaseFilter* pFilter);

    enum EC_COMPLETE_STATE
    {
        // A filter will send an EC_COMPLETE event to the filter
        // graph because it has started running.
        ECS_FILTER_STARTS_SENDING,

        // A filter will not send any more EC_COMPLETE events to the filter
        // graph because it's stopping or it's leaving the filter graph.
        ECS_FILTER_STOPS_SENDING
    };

    HRESULT UpdateEC_COMPLETEState(IBaseFilter* pRenderer, FILTER_STATE fsFilter);
    HRESULT UpdateEC_COMPLETEState(IBaseFilter* pRenderer, EC_COMPLETE_STATE ecsChange);
    HRESULT RecordEC_COMPLETE(IBaseFilter* pRendererFilter, bool* pfRenderersStillRenderering);
    CGenericList<IBaseFilter>& GetRenderersFinsihedRenderingList(void);

     // Count of renderers in the graph
    DWORD m_dwCountOfRenderers;

    LONG m_iVersion;

// embedded classes - interface implementation

public:


#ifdef FG_DEVICE_REMOVAL

    struct CDevNotify
    {
        CDevNotify(IUnknown *pDev, HDEVNOTIFY hdn) {
            m_hdevnotify = hdn;
            pDev->QueryInterface(IID_IUnknown, (void **)&m_pDevice);
        }
        ~CDevNotify() {m_pDevice->Release(); }

        IUnknown *m_pDevice;
        HDEVNOTIFY m_hdevnotify;
    };
    typedef CDevNotify * PDevNotify;

    // list of devices that signaled EC_DEVICE_LOST
    CGenericList<CDevNotify> m_lLostDevices;

    HRESULT AddDeviceRemovalReg(IAMDeviceRemoval *pdr);
    HRESULT RemoveDeviceRemovalRegistration(IUnknown *punk);
    void DeviceChangeMsg(DWORD dwfArrival, PDEV_BROADCAST_DEVICEINTERFACE pbdi);
    HRESULT RegisterInterfaceClass(REFCLSID rclsid, WCHAR *wszName, HDEVNOTIFY *phdn);
    HRESULT FindLostDevice(IUnknown *punk, POSITION *pPos);
    CCritSec m_csLostDevice;

    PUnregisterDeviceNotification m_pUnregisterDeviceNotification;
    PRegisterDeviceNotification m_pRegisterDeviceNotification;

#endif // FG_DEVICE_REMOVAL

    // implementation of IMediaFilter
    class CImplMediaFilter : public CUnknown, public IMediaFilter
    {
	CFGControl * m_pFGControl;

    public:
	CImplMediaFilter(const TCHAR *, CFGControl *);
        DECLARE_IUNKNOWN

        // --- IPersist method ---
        STDMETHODIMP GetClassID(CLSID *pClsID);

        // --- IMediaFilter methods ---
        STDMETHODIMP GetState(DWORD dwMSecs, FILTER_STATE *State);
        STDMETHODIMP SetSyncSource(IReferenceClock *pClock);
        STDMETHODIMP GetSyncSource(IReferenceClock **pClock);
        STDMETHODIMP Stop();
        STDMETHODIMP Pause();
        STDMETHODIMP Run(REFERENCE_TIME tStart);

    };

    // implementation of IMediaControl
    class CImplMediaControl : public CMediaControl
    {
	CFGControl * m_pFGControl;

    public:
	CImplMediaControl(const TCHAR *, CFGControl *);

	// IMediaControl methods
	STDMETHODIMP Run();
	STDMETHODIMP Pause();
	STDMETHODIMP Stop();
	STDMETHODIMP StopWhenReady();
	STDMETHODIMP GetState(
			LONG msTimeout,
			OAFilterState* pfs);
	STDMETHODIMP RenderFile(BSTR strFileName);

	STDMETHODIMP AddSourceFilter(
			BSTR strFilename,
			IDispatch**ppUnk);

	STDMETHODIMP get_FilterCollection(
			IDispatch** ppUnk);

	STDMETHODIMP get_RegFilterCollection(
			IDispatch** ppUnk);

	STDMETHODIMP StepRun();
	STDMETHODIMP StepPause();
    private:

	// The target state of the filter graph, updated by calls to RUN, PAUSE, STOP
	volatile FILTER_STATE m_RequestedApplicationState;

	void inline SetRequestedApplicationState(FILTER_STATE state) {
            m_pFGControl->SetRequestedApplicationState(state);
        }

	FILTER_STATE GetTargetState() const
	    { return m_pFGControl->m_LieState; }

    }; // CImplMediaControl

    // implementation of  IMediaPosition
    class CImplMediaPosition : public CMediaPosition
    {
	CFGControl *const m_pFGControl;

    public:
	CImplMediaPosition(const TCHAR *, CFGControl *);
	void Init();

	// IMediaPosition methods
	STDMETHODIMP get_Duration(REFTIME * plength);
	STDMETHODIMP get_StopTime(REFTIME * pllTime);
	STDMETHODIMP put_StopTime(REFTIME llTime);
	STDMETHODIMP get_PrerollTime(REFTIME * pllTime);
	STDMETHODIMP put_PrerollTime(REFTIME llTime);
	STDMETHODIMP get_Rate(double * pdRate);
	STDMETHODIMP put_Rate(double dRate);
	STDMETHODIMP put_CurrentPosition(REFTIME llTime);
	STDMETHODIMP get_CurrentPosition(REFTIME * pllTime);
	STDMETHODIMP CanSeekForward(LONG *pCanSeekForward);
	STDMETHODIMP CanSeekBackward(LONG *pCanSeekBackward);

    };

    // Implementation of IMediaSeeking
    class CImplMediaSeeking : public IMediaSeeking, public CUnknown
    {
	CFGControl *	m_pFGControl;

	GUID		m_CurrentFormat;

	// If this pointer is non-NULL, then this is the pointer to the filter
	// that is supporting our specific format.  If this IS NULL, then
	// m_CurrentFormat had better be TIME_FORMAT_MEDIA_TIME.
	IMediaSeeking * m_pMediaSeeking;

	HRESULT ReleaseCurrentSelection();

	double m_dblRate;
	REFERENCE_TIME m_rtStartTime;
	REFERENCE_TIME m_rtStopTime;
	// set start to this at next stop
	LONGLONG m_llNextStart;

        // Source seeking variables
    public:
        DWORD    m_dwSeekCaps;
        DWORD    m_dwCurrentSegment;
    private:
        bool     m_bSegmentMode;
        LONG     m_lSegmentStarts;
        LONG     m_lSegmentEnds;
        REFERENCE_TIME m_rtAccumulated;

        struct SEGMENT {
            REFERENCE_TIME rtStreamStart;
            REFERENCE_TIME rtStreamStop;
            REFERENCE_TIME rtMediaStart;
            REFERENCE_TIME rtMediaStop;
            double         dRate;
            DWORD          dwSegmentNumber;
            SEGMENT      * pNext;
        } *      m_pSegment;

    public:

	CImplMediaSeeking(const TCHAR *pName,CFGControl *pControl);
	~CImplMediaSeeking();
	DECLARE_IUNKNOWN;

	STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv);

	// Returns the capability flags
	STDMETHODIMP GetCapabilities( DWORD * pCapabilities );

	// And's the capabilities flag with the capabilities requested.
	// Returns S_OK if all are present, S_FALSE if some are present, E_FAIL if none.
	// *pCababilities is always updated with the result of the 'and'ing and can be
	// checked in the case of an S_FALSE return code.
	STDMETHODIMP CheckCapabilities( DWORD * pCapabilities );

	// The default must be TIME_FORMAT_MEDIA_TIME
	STDMETHODIMP GetTimeFormat(GUID * pFormat);
	STDMETHODIMP IsUsingTimeFormat(const GUID * pFormat);

	// can only change the mode when stopped (I'd like to relax this?? v-dslone)
	// (returns VFE_E_NOT_STOPPED otherwise)
	STDMETHODIMP SetTimeFormat(const GUID * pFormat);

	// returns S_OK if mode is supported, S_FALSE otherwise
	STDMETHODIMP IsFormatSupported(const GUID * pFormat);
	STDMETHODIMP QueryPreferredFormat(GUID *pFormat);

	// Convert time from one format to another.
	// We must be able to convert between all of the formats that we say we support.
	// (However, we can use intermediate formats (e.g. REFERECE_TIME).)
	// If a pointer to a format is null, it implies the currently selected format.
	STDMETHODIMP ConvertTimeFormat(LONGLONG * pTarget, const GUID * pTargetFormat,
				       LONGLONG    Source, const GUID * pSourceFormat );

	// return current properties
	STDMETHODIMP GetDuration(LONGLONG *pDuration);
	STDMETHODIMP GetStopPosition(LONGLONG *pStop);
	STDMETHODIMP GetCurrentPosition(LONGLONG *pCurrent);

	// Set current and end positions in one operation
	STDMETHODIMP SetPositions( LONGLONG * pCurrent, DWORD CurrentFlags
				 , LONGLONG * pStop, DWORD StopFlags );

	// Get CurrentPosition & StopTime
	// Either pointer may be null, implying not interested
	STDMETHODIMP GetPositions( LONGLONG * pCurrent, LONGLONG * pStop );

	// Rate stuff
	STDMETHODIMP SetRate(double dRate);
	STDMETHODIMP GetRate(double * pdRate);

	STDMETHODIMP GetAvailable( LONGLONG * pEarliest, LONGLONG * pLatest );

	STDMETHODIMP GetPreroll(LONGLONG * pllPreroll);

        HRESULT SetMediaTime(LONGLONG *pCurrent, DWORD CurrentFlags,
                             LONGLONG *pStop,  DWORD StopFlags);

	HRESULT GetMax( HRESULT (__stdcall IMediaSeeking::*pMethod)( LONGLONG * ), LONGLONG * pll );


	HRESULT GetCurrentMediaTime(REFERENCE_TIME *pCurrent);

	HRESULT SetVideoRenderer(IBaseFilter *pNext,IBaseFilter *pCurrent);

	// we are about to stop - get current position now
	void BeforeStop();

	// all filters now notified about stop - can set new current position
	void AfterStop();

        // Source seeking methods
        void StartSegment(REFERENCE_TIME const *rtStart, DWORD dwSegmentNumber);
        void EndSegment(REFERENCE_TIME const *rtEnd, DWORD dwSegmentNumber);
        void ClearSegments();
        HRESULT NewSegment(REFERENCE_TIME const *rtStart,
                           REFERENCE_TIME const *rtEnd
                          );
        void CheckEndOfSegment();
        REFERENCE_TIME AdjustRate(REFERENCE_TIME rtRef)
        {
            return (REFERENCE_TIME)(rtRef / m_dblRate);
        }
        void KillDeadSegments(REFERENCE_TIME rtTime);
    };

    // Implementation of IBasicAudio
    class CImplBasicAudio : public CBasicAudio
    {
	CFGControl * m_pFGControl;

    public:
	CImplBasicAudio(const TCHAR *, CFGControl *);

	// IBasicAudio methods
	STDMETHODIMP put_Volume(long lVolume);
	STDMETHODIMP get_Volume(long* plVolume);
	STDMETHODIMP put_Balance(long lBalance);
	STDMETHODIMP get_Balance(long* plBalance);
    };

    // Implementation of IVideoWindow
    class CImplVideoWindow : public CBaseVideoWindow
    {
	CFGControl* m_pFGControl;	   // Distributor control object
	HWND m_hwndOwner;		   // Actual owning video window
	HWND m_hwndDrain;		   // Window to pass messages to
	BOOL m_bFullScreen;		   // Which mode are we currently in
	IVideoWindow *m_pFullDirect;	   // Fullscreen filter we're using
	IVideoWindow *m_pFullIndirect;	   // Filter with window to stretch
	IBaseFilter *m_pModexFilter;	   // Modex filter we will switch to
	IPin *m_pModexPin;		   // Input pin on Modex renderer
	IBaseFilter *m_pNormalFilter;	   // The renderer replaced by Modex
	IPin *m_pNormalPin;		   // And switched out renderer pin
	BOOL m_bAddedToGraph;		   // Have we added the Modex filter
	BOOL m_bGlobalOwner;		   // Is the owning window subclassed

	// These are the properties we store when in fullscreen mode

	OAHWND m_FullOwner;		   // Any owning application window
	LONG m_FullStyle;		   // Standard Win32 window styles
	LONG m_FullStyleEx;		   // And likewise extended styles
	RECT m_FullPosition;		   // Original window position
	OAHWND m_FullDrain;		   // Message sink before fullscreen
	HRESULT m_FullDefSource;	   // Were we using a default source
	HRESULT m_FullDefTarget;	   // And likewise for destination
	RECT m_FullSource;		   // The original source rectangle
	RECT m_FullTarget;		   // And same for the destination
	LONG m_CursorHidden;		   // Is the cursor currently hidden
	RECT m_ScaledRect;		   // Stretch window to this size

    private:

	// Initialisation for fullscreen playback

	LONG PauseRenderer(IVideoWindow *pWindow);
	BOOL StopRenderer(IVideoWindow *pWindow,LONG AutoShow);
	BOOL CheckRenderer(IVideoWindow *pWindow);
	IVideoWindow *FindFullScreenDirect();
	IVideoWindow *FindFullScreenIndirect();
	HRESULT FindModexFilter();
	HRESULT InitFullScreenOptions();
	HRESULT InitNormalRenderer();

	// Called when things go wrong
	void ReleaseFullScreen();
	void FailFullScreenModex();

	// Handle the start and end of fullscreen mode

	HRESULT StartFullScreenMode();
	HRESULT CueFullScreen();
	HRESULT ConnectNormalFilter();
	HRESULT ConnectModexFilter();
	HRESULT StoreVideoProperties(IVideoWindow *pWindow);
	HRESULT RestoreVideoProperties(IVideoWindow *pWindow);
	HRESULT RestoreProperties(IVideoWindow *pWindow);
	HRESULT StretchWindow(IVideoWindow *pWindow);
	HRESULT StopFullScreenMode();

    public:
	CFGControl * GetFGControl() const { return m_pFGControl; }

	CImplVideoWindow(const TCHAR*, CFGControl*);
	~CImplVideoWindow();

	HRESULT OnActivate(LONG bActivate,IBaseFilter *pFilter);

	// IVideoWindow properties

	STDMETHODIMP put_Caption(BSTR strCaption);
	STDMETHODIMP get_Caption(BSTR* strCaption);
	STDMETHODIMP put_AutoShow(long AutoShow);
	STDMETHODIMP get_AutoShow(long *AutoShow);
	STDMETHODIMP put_WindowStyle(long WindowStyle);
	STDMETHODIMP get_WindowStyle(long* WindowStyle);
	STDMETHODIMP put_WindowStyleEx(long WindowStyleEx);
	STDMETHODIMP get_WindowStyleEx(long *WindowStyleEx);
	STDMETHODIMP put_WindowState(long WindowState);
	STDMETHODIMP get_WindowState(long* WindowState);
	STDMETHODIMP put_BackgroundPalette(long BackgroundPalette);
	STDMETHODIMP get_BackgroundPalette(long* pBackgroundPalette);
	STDMETHODIMP put_Visible(long Visible);
	STDMETHODIMP get_Visible(long* pVisible);
	STDMETHODIMP put_Left(long Left);
	STDMETHODIMP get_Left(long* pLeft);
	STDMETHODIMP put_Width(long Width);
	STDMETHODIMP get_Width(long* pWidth);
	STDMETHODIMP put_Top(long Top);
	STDMETHODIMP get_Top(long* pTop);
	STDMETHODIMP put_Height(long Height);
	STDMETHODIMP get_Height(long* pHeight);
	STDMETHODIMP put_Owner(OAHWND Owner);
	STDMETHODIMP get_Owner(OAHWND* Owner);
	STDMETHODIMP put_MessageDrain(OAHWND Drain);
	STDMETHODIMP get_MessageDrain(OAHWND *Drain);
	STDMETHODIMP get_BorderColor(long* Color);
	STDMETHODIMP put_BorderColor(long Color);
	STDMETHODIMP get_FullScreenMode(long *FullScreenMode);
	STDMETHODIMP put_FullScreenMode(long FullScreenMode);

	// IVideoWindow methods

	STDMETHODIMP SetWindowForeground(long Focus);
	STDMETHODIMP NotifyOwnerMessage(OAHWND hwnd,long uMsg,LONG_PTR wParam,LONG_PTR lParam);
	STDMETHODIMP GetMinIdealImageSize(long *Width,long *Height);
	STDMETHODIMP GetMaxIdealImageSize(long *Width,long *Height);
	STDMETHODIMP SetWindowPosition(long Left, long Top, long Width, long Height);
	STDMETHODIMP GetWindowPosition(long* pLeft, long* pTop, long* pWidth, long* pHeight);
	STDMETHODIMP GetRestorePosition(long *pLeft,long *pTop,long *pWidth,long *pHeight);
	STDMETHODIMP HideCursor(long HideCursor);
	STDMETHODIMP IsCursorHidden(long *CursorHidden);

	HRESULT GetFirstVW(IVideoWindow*& pVW);
    };

    // Implementation of IBasicVideo
    class CImplBasicVideo : public CBaseBasicVideo
    {
	CFGControl* m_pFGControl;

    public:
	CFGControl * GetFGControl() const { return m_pFGControl; }

	CImplBasicVideo(const TCHAR*, CFGControl*);

	// IBasicVideo properties

	STDMETHODIMP get_AvgTimePerFrame(REFTIME *pAvgTimePerFrame);
	STDMETHODIMP get_BitRate(long *pBitRate);
	STDMETHODIMP get_BitErrorRate(long *pBitErrorRate);
	STDMETHODIMP get_VideoWidth(long* pVideoWidth);
	STDMETHODIMP get_VideoHeight(long* pVideoHeight);
	STDMETHODIMP put_SourceLeft(long SourceLeft);
	STDMETHODIMP get_SourceLeft(long* pSourceLeft);
	STDMETHODIMP put_SourceWidth(long SourceWidth);
	STDMETHODIMP get_SourceWidth(long* pSourceWidth);
	STDMETHODIMP put_SourceTop(long SourceTop);
	STDMETHODIMP get_SourceTop(long* pSourceTop);
	STDMETHODIMP put_SourceHeight(long SourceHeight);
	STDMETHODIMP get_SourceHeight(long* pSourceHeight);
	STDMETHODIMP put_DestinationLeft(long DestinationLeft);
	STDMETHODIMP get_DestinationLeft(long* pDestinationLeft);
	STDMETHODIMP put_DestinationWidth(long DestinationWidth);
	STDMETHODIMP get_DestinationWidth(long* pDestinationWidth);
	STDMETHODIMP put_DestinationTop(long DestinationTop);
	STDMETHODIMP get_DestinationTop(long* pDestinationTop);
	STDMETHODIMP put_DestinationHeight(long DestinationHeight);
	STDMETHODIMP get_DestinationHeight(long* pDestinationHeight);

	// IBasicVideo methods

	STDMETHODIMP SetSourcePosition(long Left, long Top, long Width, long Height);
	STDMETHODIMP GetSourcePosition(long* pLeft, long* pTop, long* pWidth, long* pHeight);
	STDMETHODIMP GetVideoSize(long* pWidth, long* pHeight);
	STDMETHODIMP GetVideoPaletteEntries(long StartIndex,long Entries,long* Retrieved, long* pPalette);
	STDMETHODIMP SetDefaultSourcePosition();
	STDMETHODIMP IsUsingDefaultSource();
	STDMETHODIMP SetDestinationPosition(long Left, long Top, long Width, long Height);
	STDMETHODIMP GetDestinationPosition(long* pLeft, long* pTop, long* pWidth, long* pHeight);
	STDMETHODIMP SetDefaultDestinationPosition();
	STDMETHODIMP IsUsingDefaultDestination();
	STDMETHODIMP GetCurrentImage(long *pSize,long *pImage);
        STDMETHODIMP GetPreferredAspectRatio(long *plAspectX, long *plAspectY);

	HRESULT GetFirstBV(IBasicVideo*& pBV);
    private:
	// Store the state before and after the graph changes

	typedef struct {
	    IBasicVideo *pVideo;    // The renderer interface
	    LONG AutoShow;	    // is AutoShow enabled now
	    LONG Visible;	    // Was the window visible
	    REFTIME Position;	    // Original starting position
	    OAFilterState State;    // State of graph at start
	} WINDOWSTATE;

	// These help with returning a current image

	HRESULT PrepareGraph(WINDOWSTATE *pState);
	HRESULT FinishWithGraph(WINDOWSTATE *pState);
	HRESULT RestoreGraph(OAFilterState State);
    };

    // deferred command implementation
    class CImplQueueCommand
	: public IQueueCommand,
	  public CUnknown,
	  public CCmdQueue
    {
	CFGControl* m_pFGControl;
	IReferenceClock * m_pClock;
        HANDLE m_hThread;
        volatile BOOL m_bStopThread;

    public:
	CImplQueueCommand(const TCHAR*, CFGControl*);
        ~CImplQueueCommand();

	// Unknown handling
	DECLARE_IUNKNOWN
	STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv);

	// IQueueCommand  methods
	STDMETHODIMP InvokeAtStreamTime(
			IDeferredCommand** pCmd,
			REFTIME time,		  // at this streamtime
			GUID* iid,		  // call this interface
			long dispidMethod,	  // ..and this method
			short wFlags,		  // method/property
			long cArgs,		  // count of args
			VARIANT* pDispParams,	  // actual args
			VARIANT* pvarResult,	  // return value
			short* puArgErr 	  // which arg in error
	);

	STDMETHODIMP InvokeAtPresentationTime(
			IDeferredCommand** pCmd,
			REFTIME time,		  // at this presentation time
			GUID* iid,		  // call this interface
			long dispidMethod,	  // ..and this method
			short wFlags,		  // method/property
			long cArgs,		  // count of args
			VARIANT* pDispParams,	  // actual args
			VARIANT* pvarResult,	  // return value
			short* puArgErr 	  // which arg in error
	);


	// worker thread calls this to check and execute commands
	// when the handle is signalled
	void Process(void);

    protected:
	// common function from both Invoke methods
	HRESULT InvokeAt(
		    IDeferredCommand** pCmd,
		    REFTIME time,		  // at this presentation time
		    GUID* iid,			  // call this interface
		    long dispidMethod,		  // ..and this method
		    short wFlags,		  // method/property
		    long cArgs, 		  // count of args
		    VARIANT* pDispParams,	  // actual args
		    VARIANT* pvarResult,	  // return value
		    short* puArgErr,		  // which arg in error
		    BOOL bStream		  // true if stream time
	);
        static DWORD WINAPI InitialThreadProc(LPVOID pv);
        void ThreadProc();
    };

    // Rather than have a worker thread we use a window (which also has a separate
    // thread). When we want the worker thread to execute commands we can post it
    // custom messages. The advantage of using a window is that we will be sent
    // all top level window messages (such as WM_DISPLAYCHANGED) which can then be
    // sent onto the renderer window if it has been made a child of some control

    class CGraphWindow : public CBaseWindow
    {

        CFGControl *m_pfgc;
        BOOL m_bThreadExitCalled;

    public:

        CGraphWindow(CFGControl *pFGControl);

        // Completion will not be waited for
        BOOL PostMessage(UINT uMsg,WPARAM wParam,LPARAM lParam) {
            return ::PostMessage(m_hwnd,uMsg,wParam,lParam);
        };

        // Will not return until call is processed
        LRESULT SendMessage(UINT uMsg,WPARAM wParam,LPARAM lParam) {
            return ::SendMessage(m_hwnd,uMsg,wParam,lParam);
        };

        // Worker thread message handling routine
        LRESULT OnReceiveMessage(HWND hwnd,          // Window handle
                                 UINT uMsg,          // Message ID
                                 WPARAM wParam,      // First parameter
                                 LPARAM lParam);     // Other parameter

        // Return the window class styles
        LPTSTR GetClassWindowStyles(DWORD *pClassStyles,
                                    DWORD *pWindowStyles,
                                    DWORD *pWindowStylesEx);

        // Timer stuff
        UINT_PTR SetTimer(UINT_PTR idTimer, UINT uiTimeout)
        {
            return ::SetTimer(m_hwnd, idTimer, uiTimeout, NULL);
        }
        BOOL KillTimer(UINT_PTR idTimer)
        {
            return ::KillTimer(m_hwnd, idTimer);
        }
    };


public:

    HRESULT Cue();
    HRESULT CueThenRun();
    HRESULT CueThenStop();

    BOOL    m_bCued;	// Data cued in graph (i.e. we've been run
			// and not seeked nor stopped since)

    //  Get window handle so filter graph can use it too
    HWND GetWorkerHWND()
    {
        return m_GraphWindow.GetWindowHWND();
    }
#ifdef DEBUG
    void CheckLieState() {
        ASSERT(m_LieState == GetFilterGraphState() || m_eAction != 0);
    }
#endif
private:

    // and this is the number of renderers when we issued the Run command
    // we should receive this many EC_COMPLETEs. We decrement
    // this in each call to DecrementRenderers (on an EC_COMPLETE), and
    // pass the EC_COMPLETE to the app when it reaches 0.
    volatile long	m_nStillRunning;

    // The state of CFGControl.  Where CFGControl does transitions asynchronously,
    // this state may be "ahead" of the state you'd get from GetMF->GetState().
    volatile FILTER_STATE m_LieState;

    FILTER_STATE m_PreHibernateState;

    // Version number of the above state.  Only application calls should result in
    // this value being incremented (by one).  Either via our IMediaControl interface,
    // or via IMediaFilter on the filter graph manager distributing a state transition
    // to us.  During an async. operation that involves the state of the graph, the
    // value of this variable should be cached when we decide to do the operation.
    // During the operation we should compare the cached value with the current.  If
    // the current is greated than the cached value, then the application has attempted
    // a state change, which probably means we should abort our operation.
    volatile DWORD m_dwStateVersion;

public:
    volatile DWORD m_dwStepVersion;

private:

    // Remember if we were supposed to be doing a restart
    volatile BOOL m_bRestartRequired;

    // Deferred stuff after internal Pauses
    // One of the AWM_... values or 0 if no action pending
    UINT m_eAction;

    FILTER_STATE m_TargetState;
    DWORD m_dwDeferredStateVersion;

    CRefTime m_tBase;
    CRefTime m_tPausedAt;
    IReferenceClock* m_pClock;
    BOOL m_bShuttingDown;

    // this is the focus object that we last passed to the Resource Manager
    IUnknown* m_pFocusObject;

    // These point to the interfaces which will be used by VidCtl when it
    // distributes calls to these methods.  IF we can find a filter which
    // supports BOTH of these interfaces, then we will store matching pointers.
    // If no such filter exists, then each will store the first instance of that
    // interface that we find when enumerating the filters.  Either could be NULL,
    // indicating that such interfaces could not be found at all.
    // Note: m_pFirstBV has to have to ref-counting baggage following it around,
    // m_pFirstVW does not, since we will rely on the ref-counting being done
    // by IVideoWindow list.
    CCritSec m_csFirstVW;
    IVideoWindow * m_pFirstVW;
private:
    IBasicVideo  * m_pFirstBV;

protected:
    // list of filters that export IMediaSeeking
    CGenericList<IMediaSeeking> m_listSeeking;

    // list of filters that export IBasicAudio
    CGenericList<IBasicAudio> m_listAudio;

    // list of filters that export IVideoWindow
    CGenericList<IVideoWindow> m_listWindow;

    // Each filters on this list sent an EC_COMPLETE event to the filter graph.
    // The filter graph lock should be held when accessing this list.
    CGenericList<IBaseFilter> m_listRenderersFinishedRendering;

private:
    CResourceManager	m_ResourceManager;
    CGraphWindow	m_GraphWindow;

    friend HRESULT CImplMediaSeeking::GetCurrentMediaTime(LONGLONG * pTime);
    friend class LockCFGControlState;

public:
    CImplMediaControl	m_implMediaControl;
    CImplMediaEvent	m_implMediaEvent;
    CImplMediaSeeking	m_implMediaSeeking;
    CImplMediaPosition	m_implMediaPosition;
    CImplVideoWindow	m_implVideoWindow;
    CImplBasicVideo	m_implBasicVideo;
    CImplBasicAudio	m_implBasicAudio;
    CImplMediaFilter    m_implMediaFilter;
    CImplQueueCommand	m_qcmd;

    long OutstandingEC_COMPLETEs()
    {
	CAutoLock alEventStoreLock(m_implMediaEvent.GetEventStoreLock());
	return m_nStillRunning;
    }

    //  Expose restart required state - this is reset on Stop
    //  and in WorkerRestart
    void SetRestartRequired() {
        m_bRestartRequired = TRUE;
    }
    BOOL CheckRestartRequired()
    {
        //  No need for InterlockedExchange - if someone is about
        //  to set it it's OK because we only clear if it we're
        //  going to go ahead and restart anyway
        const BOOL bRestartRequired = m_bRestartRequired;
        m_bRestartRequired = FALSE;
        return bRestartRequired;
    }

    friend class CImplMediaControl;

};  // CFGControl




// There are several instances where methods can only be applied to filters if the filter
// is stopped.	In the PID, it's nice to be able to remove this restriction.  This class
// will halt the graph when it is constructed.	It then expects a call to it Resume method
// to restart the graph, or to its Abort method (in which case it wont attempt to restart
// the graph.  Creating this object for a Stopped graph is effectivly
// a no-op.  The constructor requires a CFGControl pointer and, optionally, a state.  The state
// can be State_Paused or State_Stopped (default) which indicates how halted the graph needs to
// be.
class HaltGraph
{
public:
    ~HaltGraph()
    {
	ASSERT( m_eAlive == Dead );
    }

    HaltGraph( CFGControl * pfgc, FILTER_STATE TypeOfHalt = State_Paused );

    HRESULT Resume();
    void    Abort();

private:
    CFGControl	*const	m_pfgc;
    FILTER_STATE	m_fsInitialState;
    enum { NoOp, Alive, Dead } m_eAlive;    // Goes to Dead once Resume(At) or Abort called
    REFERENCE_TIME	m_rtHaltTime;
};

inline CCritSec* CImplMediaEvent::GetEventStoreLock(void)
{
    return &m_EventStore.m_Lock;
}

#endif // _FGCTL_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\pos2seek.cpp ===
// Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved.

// Maps the PIDs IMediaPosition interface onto IMediaSeeking

#include <streams.h>
#include "FGCtl.h"
#include <float.h>

static
const double dblUNITS = 1e7;        // Multipliaction factor for converting
                                    // 100ns units (REFERENCE_TIMEs) into seconds.
                                    // (Casting UNITS to a dbl wasn't good enough
                                    //  - static initialization 'n' all that.)
static
const double dblINF   = DBL_MAX;    // As near infinite as is reasonable.


static int METHOD_TRACE_LOGGING_LEVEL = 7;

// --- IMediaPosition methods ----------------------

CFGControl::CImplMediaPosition::CImplMediaPosition(const TCHAR * pName,CFGControl * pFGC)
    : CMediaPosition(pName, pFGC->GetOwner())
    , m_pFGControl(pFGC)
{}


//=================================================================
// get_Duration
//
// return in *pLength the longest duration from all the IMediaPositions
// exported when BuildList was first called.  Call it now in case it
// hasn't been called before.
// if no filters exported it then return 0 and error E_NOTIMPL
//=================================================================
STDMETHODIMP
CFGControl::CImplMediaPosition::get_Duration(REFTIME * plength)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::get_Duration()" ));

    *plength = 0;
    // Need to lock to ensure that the current time format does not change between the Get and the ConverTime calls
    CAutoMsgMutex lck(m_pFGControl->GetFilterGraphCritSec());

    LONGLONG llTime;
    HRESULT hr = m_pFGControl->m_implMediaSeeking.GetDuration( &llTime );
    if (SUCCEEDED(hr))
    {
        REFERENCE_TIME rtDuration;
        hr = m_pFGControl->m_implMediaSeeking.ConvertTimeFormat( &rtDuration, &TIME_FORMAT_MEDIA_TIME, llTime, 0 );
        if (SUCCEEDED(hr))
        {
            *plength = double(rtDuration) / dblUNITS;
        }
    }
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaPosition::get_CurrentPosition(REFTIME * pTime)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::get_CurrentPosition()" ));

    LONGLONG llTime;
    HRESULT hr = m_pFGControl->m_implMediaSeeking.GetCurrentMediaTime( &llTime );
    if (FAILED(hr)) llTime = 0;
    *pTime = double(llTime) / dblUNITS;
    return hr;
} // get_CurrentPosition



STDMETHODIMP
CFGControl::CImplMediaPosition::put_CurrentPosition(REFTIME dblTime)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::put_CurrentPosition()" ));

    HRESULT hr;
    LONGLONG llTime;
    hr = m_pFGControl->m_implMediaSeeking.ConvertTimeFormat( &llTime, 0,
        LONGLONG(dblTime * dblUNITS + 0.5), &TIME_FORMAT_MEDIA_TIME );
    if (SUCCEEDED(hr))
    {
        hr = m_pFGControl->m_implMediaSeeking.SetPositions( &llTime, AM_SEEKING_AbsolutePositioning, 0, 0 );
    }
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaPosition::get_StopTime(REFTIME * pdblTime)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::get_StopTime()" ));

    *pdblTime = 0;
    // Need to lock to ensure that the current time format does not change between the Get and the ConverTime calls
    CAutoMsgMutex lck(m_pFGControl->GetFilterGraphCritSec());

    LONGLONG llStopTime;
    HRESULT hr = m_pFGControl->m_implMediaSeeking.GetStopPosition( &llStopTime );
    if (SUCCEEDED(hr))
    {
        REFERENCE_TIME rtStopTime;
        hr = m_pFGControl->m_implMediaSeeking.ConvertTimeFormat( &rtStopTime, &TIME_FORMAT_MEDIA_TIME, llStopTime, 0 );
        if (SUCCEEDED(hr))
        {
            *pdblTime = double(rtStopTime) / dblUNITS;
        }
    }
    return hr;
}

STDMETHODIMP
CFGControl::CImplMediaPosition::put_StopTime(REFTIME dblTime)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::put_StopTime()" ));

    HRESULT hr;
    LONGLONG llTime;
    hr = m_pFGControl->m_implMediaSeeking.ConvertTimeFormat( &llTime, 0,
        LONGLONG(dblTime * dblUNITS + 0.5), &TIME_FORMAT_MEDIA_TIME );
    if (SUCCEEDED(hr))
    {
        hr = m_pFGControl->m_implMediaSeeking.SetPositions( 0, 0, &llTime, AM_SEEKING_AbsolutePositioning );
    }
    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaPosition::get_Rate(double * pdRate)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::get_Rate()" ));
    return m_pFGControl->m_implMediaSeeking.GetRate(pdRate);
}

STDMETHODIMP
CFGControl::CImplMediaPosition::put_Rate(double dRate)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::put_Rate()" ));
    return m_pFGControl->m_implMediaSeeking.SetRate(dRate);
}


STDMETHODIMP
CFGControl::CImplMediaPosition::get_PrerollTime(REFTIME * pllTime)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::get_PrerollTime()" ));

    *pllTime = 0;
    // Need to lock to ensure that the current time format does not change between the Get and the ConverTime calls
    CAutoMsgMutex lck(m_pFGControl->GetFilterGraphCritSec());

    LONGLONG llPreroll;
    HRESULT hr = m_pFGControl->m_implMediaSeeking.GetPreroll( &llPreroll );
    if (SUCCEEDED(hr))
    {
        REFERENCE_TIME rtPreroll;
        hr = m_pFGControl->m_implMediaSeeking.ConvertTimeFormat( &rtPreroll, &TIME_FORMAT_MEDIA_TIME, llPreroll, 0 );
        if (SUCCEEDED(hr)) *pllTime = double(rtPreroll) / dblUNITS;
    }
    else if ( E_NOTIMPL == hr ) hr = NOERROR;
    return hr;
}

STDMETHODIMP
CFGControl::CImplMediaPosition::put_PrerollTime(REFTIME llTime)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::put_PrerollTime()" ));
    return E_NOTIMPL;
}


STDMETHODIMP
CFGControl::CImplMediaPosition::CanSeekForward(LONG *pCanSeekForward)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::CanSeekForward()" ));

    CheckPointer(pCanSeekForward,E_POINTER);
    DWORD test = AM_SEEKING_CanSeekForwards;
    const HRESULT hr = m_pFGControl->m_implMediaSeeking.CheckCapabilities( &test );
    *pCanSeekForward = hr == S_OK ? OATRUE : OAFALSE;
    return S_OK;
}


STDMETHODIMP
CFGControl::CImplMediaPosition::CanSeekBackward(LONG *pCanSeekBackward)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaPosition::CanSeekBackward()" ));

    CheckPointer(pCanSeekBackward,E_POINTER);
    DWORD test = AM_SEEKING_CanSeekBackwards;
    const HRESULT hr = m_pFGControl->m_implMediaSeeking.CheckCapabilities( &test );
    *pCanSeekBackward = hr == S_OK ? OATRUE : OAFALSE;
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\rsrcmgr.cpp ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.
// Implementation of Resource Manager plug-in distributor, January 1996

#include <streams.h>
#include "fgctl.h"
#include "fgenum.h"
#include "rsrcmgr.h"

// static pointer to global shared memory set up on process attach
DWORD CResourceManager::m_dwLoadCount = 0;
CResourceData* CResourceManager::m_pData = NULL;
HANDLE CResourceManager::m_hData = NULL;

CAMMutex CResourceManager::m_Mutex( strResourceMutex );

// per process offsets for dynamic shared data elements
DWORD_PTR CResourceManager::m_aoffsetAllocBase[MAX_ELEM_SIZES] = { 0, 0 }; 

DWORD g_dwPageSize = 0;

const DWORD DYNAMIC_LIST_DETAILS_LOG_LEVEL = 15;

// array of element sizes for the separate linked lists of offsets
// currently we use 2 sizes: the max of CRequestor and CProcess for one (which is 24 bytes)
// and the size of CResourceItem for the 2nd (which is 296 bytes currently)
const DWORD g_aElemSize[] = 
{
    __max( sizeof( CRequestor ), sizeof( CProcess ) ),
    sizeof( CResourceItem )
};

const DWORD g_aMaxPages[] =
{
    MAX_PAGES_ELEM_ID_SMALL,
    MAX_PAGES_ELEM_ID_LARGE
};    

DWORD g_aMaxAllocations[MAX_ELEM_SIZES];

#ifdef DEBUG
    static int g_ResourceManagerTraceLevel = 2;
    #define DbgTraceItem( pItem ) \
        DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel, \
        TEXT("pItem = 0x%08X {State = %i, Process = 0x%02X, Name = '%ls'} (This proc id = 0x%02X)"), \
        (pItem), (pItem)->GetState(), (pItem)->GetProcess(), (pItem)->GetName(), GetCurrentProcessId() ))

    void CResourceItem::SetState(ResourceState s)
    {
        DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
            TEXT("CResourceItem{Current State = %d}::SetState(ResourceState %d)"),
            m_State, s));
        m_State = s;
    }
#else
    #define DbgTraceItem( pItem )
#endif

// process load/unload
// static
void
CResourceManager::ProcessAttach(BOOL bLoad)
{
    if (!m_Mutex.Exists()) {
        return;
    }

    CAutoMutex lck(&m_Mutex);

    if (bLoad)
    {
        if (++m_dwLoadCount == 1)
        {
            // store this cpu's page size, must be always be initialized so do it here
            SYSTEM_INFO sysinfo;
    
            GetSystemInfo( &sysinfo );
            g_dwPageSize = sysinfo.dwPageSize;
    
            g_aMaxAllocations[ELEM_ID_SMALL] = ( ( g_aMaxPages[ELEM_ID_SMALL] * g_dwPageSize ) / g_aElemSize[ELEM_ID_SMALL] ) - 1; // account for last elem size
            g_aMaxAllocations[ELEM_ID_LARGE] = ( ( g_aMaxPages[ELEM_ID_LARGE] * g_dwPageSize ) / g_aElemSize[ELEM_ID_LARGE] ) - 1; // account for last elem size

            // We only want to share memory between two instances of Quartz.DLL
            // if they were compiled for the same architecture and if they were 
            // compiled with the same compiler.  This is the only way to 
            // guarantee that both instances of Quartz will correctly 
            // interpret the shared data.  For more information, see bug 342953 -
            // IA64: MSTime: Crash in Quartz when playing midi file in both Wow 
            // and 64-bit IE.  This bug is in the Windows bugs database.
            const DWORD MAX_RESOURCE_MAPPING_NAME_LENGTH = 48;
            TCHAR szResourceMappingName[MAX_RESOURCE_MAPPING_NAME_LENGTH];
            wsprintf( szResourceMappingName,
                      TEXT("%s-%#04x-%#08x"),
                      strResourceMappingPrefix,
                      sysinfo.wProcessorArchitecture,
                      _MSC_VER );

            // The size of szResourceMappingName should be increased if this ASSERT fires.  The 
            // purpose of this ASSERT is to make sure that wsprintf() does not overflow 
            // szResourceMappingName.
            ASSERT( lstrlen(szResourceMappingName) < NUMELMS(szResourceMappingName) );

            // create and init the shared memory
            // Create a named shared memory block
            // just reserve it first

            // We do not create a named file mapping if we cannot create a named
            // mutex.  We do not create a named file mapping because there is no way 
            // to synchronize access to it.
            if (m_Mutex.IsMutexNamed()) {
                m_hData = CreateFileMapping(
                                    hMEMORY,                // Memory block
                                    NULL,                   // Security flags
                                    PAGE_READWRITE |
                                        SEC_RESERVE,        // Page protection
                                    (DWORD) 0,              // High size
                                    ( g_aMaxPages[ELEM_ID_SMALL] + g_aMaxPages[ELEM_ID_LARGE] )
                                        * g_dwPageSize,     // Low order size
                                    szResourceMappingName);    // Mapping name
            }

            // SECURITY: We try to create an unnamed file mapping if the named 
            // file mapping cannot be created.  We cannot create a named file 
            // mapping if another user has already created a named object with 
            // the same name as our file mapping.  There are several reasons 
            // why this can occur.  First, this occurs if two different users
            // start Direct Show applications in the same session.  For 
            // example, this case occurs if a user starts GraphEdit.exe and
            // then uses the Run As command to start GraphEdt.exe as a 
            // different user.  This also occurs if a Windows service uses 
            // Direct Show and the console user starts a Direct Show 
            // application (this may change for Longhorn).  The second reason
            // an object with the same name already exists is an attacker is 
            // squatting on it.  An attacker squats on an object by creating an
            // object with the same name as our object and then he prevents us from 
            // using the object he created.  The attacker does this because he wants
            // to cause an application to malfunction or he wants to degrade an 
            // applications functionality.

            // CreateFileMapping() returns NULL if an error occurs.
            if (!m_Mutex.IsMutexNamed() || !m_hData) {
                m_hData = CreateFileMapping(
                                    hMEMORY,                // Memory block
                                    NULL,                   // Security flags
                                    PAGE_READWRITE |
                                        SEC_RESERVE,        // Page protection
                                    (DWORD) 0,              // High size
                                    ( g_aMaxPages[ELEM_ID_SMALL] + g_aMaxPages[ELEM_ID_LARGE] )
                                        * g_dwPageSize,     // Low order size
                                    NULL);                  // Mapping name                    
            }

            // We must now map the shared memory block into this process address space
            // The CreateFileMapping call sets the last thread error code to zero if
            // we actually created the memory block, if someone else got in first and
            // created it GetLastError returns ERROR_ALREADY_EXISTS. We are ensured
            // that nobody can get to the uninitialised memory block because we use
            // a cross process mutex critical section.

            DWORD Status = GetLastError();

            if (m_hData) 
            {
                m_pData = (CResourceData *) MapViewOfFile(
                                                m_hData,
                                                FILE_MAP_ALL_ACCESS,
                                                (DWORD) 0,
                                                (DWORD) 0,
                                                (DWORD) 0);
                if (m_pData) 
                {
                    m_aoffsetAllocBase[ELEM_ID_SMALL] = (DWORD_PTR) m_pData + sizeof(CResourceData);
                    
                    // if we grow to greater > 2 different element sizes than just do this 
                    // process based allocation base address per-element a little smarter
                    // but for now this is fine
                    ASSERT( MAX_ELEM_SIZES < 3 );
                    m_aoffsetAllocBase[ELEM_ID_LARGE] = (DWORD_PTR) m_pData + g_aMaxPages[ELEM_ID_SMALL] * g_dwPageSize;
                    
                    
                    DbgLog( ( LOG_TRACE
                            , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                            , TEXT("CResourceManager: Per-process shared memory block address = 0x%08lx. Reserved size = 0x%08lx")
                            , m_pData
                            , ( g_aMaxPages[ELEM_ID_SMALL] + g_aMaxPages[ELEM_ID_LARGE] ) 
                                * g_dwPageSize ) );

                    DbgLog( ( LOG_TRACE
                            , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                            , TEXT("CResourceManager: Maximum small element dynamic allocations supported = %ld, Page size = %ld, Element size = %ld")
                            , g_aMaxAllocations[ELEM_ID_SMALL]
                            , g_dwPageSize
                            , g_aElemSize[ELEM_ID_SMALL] ) );

                    DbgLog( ( LOG_TRACE
                            , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                            , TEXT("CResourceManager: Maximum large element dynamic allocations supported = %ld, Page size = %ld, Element size = %ld")
                            , g_aMaxAllocations[ELEM_ID_LARGE]
                            , g_dwPageSize
                            , g_aElemSize[ELEM_ID_LARGE] ) );

                    DbgLog( ( LOG_TRACE
                            , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                            , TEXT("CResourceManager: Per-process small element allocation start address = 0x%08lx.")
                            , m_aoffsetAllocBase[ELEM_ID_SMALL] ) );

                    DbgLog( ( LOG_TRACE
                            , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                            , TEXT("CResourceManager: Per-process large element allocation start address = 0x%08lx.")
                            , m_aoffsetAllocBase[ELEM_ID_LARGE] ) );

                    if (Status == ERROR_SUCCESS) 
                    {
                        //
                        // commit the initial pages for the shared data
                        // note that the non-dynamic shared resource data is included in the
                        // 1st element's page data
                        // note that we commit the same number of pages for each element size
                        //
                        DbgLog( ( LOG_TRACE
                                , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                                , TEXT("CResourceManager: Attempting to commiting initial small element resource data at address 0x%08lx...") 
                                , m_pData ) );
                        PVOID pv1 = VirtualAlloc( m_pData
                                                , PAGES_PER_ALLOC * g_dwPageSize
                                                , MEM_COMMIT
                                                , PAGE_READWRITE );
    #ifdef DEBUG
                        if( pv1 )
                        {
                            DbgLog( ( LOG_TRACE
                                    , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                                    , TEXT("CResourceManager: Successfully commited 1st %ld page(s) for static data plus small element data. Static CResourceData size = %ld bytes"), PAGES_PER_ALLOC, sizeof(CResourceData) ) );
                        }

    #endif
                        
                        DbgLog( ( LOG_TRACE
                                , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                                , TEXT("CResourceManager: Attempting to commiting initial large element resource data at address 0x%08lx") 
                                , m_aoffsetAllocBase[ELEM_ID_LARGE] ) );

                        // commit the initial pages for the next sized element list
                        PVOID pv2 = VirtualAlloc( (PVOID) m_aoffsetAllocBase[ELEM_ID_LARGE]
                                                , PAGES_PER_ALLOC * g_dwPageSize
                                                , MEM_COMMIT
                                                , PAGE_READWRITE );
    #ifdef DEBUG
                        if( pv2 )
                        {
                            DbgLog( ( LOG_TRACE
                                    , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                                    , TEXT("CResourceManager: Successfully commited initial %ld page(s) for large element data"), PAGES_PER_ALLOC ) );
                        }

                        
    #endif
                        if( !pv1 || !pv2 )
                        {
                            // ******* HANDLE OUT OF MEM CONDITION ************* 
                            // let the normal exit handle the closure of the handle
                            // but here we need to at least unmap the file and zero
                            // out m_pData as a way to propagate the error.
                            if (m_pData) 
                            {
                                UnmapViewOfFile((PVOID)m_pData);
                                m_pData = NULL;
                            }
                    
                            DWORD Status = GetLastError();
                            DbgLog( ( LOG_ERROR
                                    , 1
                                    , TEXT("CResourceManager: VirtualAlloc failed to commit initial resource data (0x%08lx)")
                                    , Status));
                        
                            return; // exit
                        }
                        
                        // prepare the commited static data
                        ZeroMemory( pv1, sizeof(CResourceData) );
                        m_pData->Init();
                        
                        // dynamic allocation index starts at zero
                        for( int i = 0; i < MAX_ELEM_SIZES; i ++ )
                        {
                            m_pData->SetNextAllocIndex( i, 0 ); // this starts for zero since we haven't 
                                                                // added an element yet, only a page
                            m_pData->SetNextPageIndex( i, 1 );  // since we've allocated first page
                        }
                                        
                        DbgLog( ( LOG_TRACE
                                , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                                , TEXT( "CResourceManager: Size of dynamic list elems - CRequestor:0x%08lx, CProcess:0x%08lx, CResourceItem:0x%08lx")
                                , sizeof(CRequestor)
                                , sizeof(CProcess)
                                , sizeof(CResourceItem) ) );
                    }    
                }
            }
        }
    } else {
       
        if (--m_dwLoadCount == 0)
        {
            // close our handle to it - when the last handle is closed
            // the memory is freed
            if (m_pData) {
            
                // Special Note: 
                // We can't use VirtualFree to decommit memory from
                // memory mapped files. We're stuck with whatever memory 
                // we commit for the life of the mapping.
                
                UnmapViewOfFile((PVOID)m_pData);
                m_pData = NULL;
            }
            if (m_hData) {
                CloseHandle(m_hData);
                m_hData = NULL;
            }
        }
    }
}

CResourceManager::CResourceManager(
    TCHAR* pName,
    LPUNKNOWN pUnk,
    HRESULT * phr)
  : CUnknown(pName, pUnk)
  , m_procid (GetCurrentProcessId())  // find out who we are
{
    ProcessAttach(TRUE);
    if (!m_pData) {
        *phr = E_OUTOFMEMORY;
    }
}

CResourceManager::~CResourceManager()
{
    ProcessAttach(FALSE);
}

STDMETHODIMP
CResourceManager::NonDelegatingQueryInterface(REFIID riid, void**ppv)
{
    if (riid == IID_IResourceManager) {
        return GetInterface( (IResourceManager*)this, ppv);
    } else {
        return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}



// --- methods for CResourceData and contained objects ----

void
CResourceItem::Init(const char * pName, LONG id)
{
    ASSERT(lstrlenA(pName) < Max_Resource_Name);

    lstrcpyA(m_chName, pName);
    m_id = id;
    m_State = RS_Free;
    m_Holder = m_GoingTo = m_AttentionBy = 0;
    m_Requestors.Init(ELEM_ID_SMALL);
}


HRESULT
CResourceList::Add(const char *pName, ResourceID* pID)
{
    if (lstrlenA(pName) >= Max_Resource_Name) {
        return E_OUTOFMEMORY;
    }

    CResourceItem * pElem = NULL;

    // search the list for this name
    for (long i = 0; i < m_lCount; i++)
    {
        pElem = (CResourceItem *) GetListElem( i );
        ASSERT( NULL != pElem );
        if( pElem && ( lstrcmpiA(pElem->GetName(), pName ) == 0 ) )
        {
            *pID = pElem->GetID();
            return S_FALSE;
        }
    }

    // didn't find it - need to create a new entry
    DbgLog( ( LOG_TRACE
          , DYNAMIC_LIST_DETAILS_LOG_LEVEL
          , TEXT("CResourceManager: Adding CResourceItem list element")));
    pElem = (CResourceItem *) AddElemToList( );
    if( !pElem )
         return E_OUTOFMEMORY;
         
    ResourceID newid = m_MaxID++;
    *pID = newid;
    pElem->Init(pName, newid);
    
    return S_OK;
}

CResourceItem* 
CResourceList::GetByID(ResourceID id) 
{
    CResourceItem* pItem = (CResourceItem *) OffsetToProcAddress( m_idElemSize, m_offsetHead );
    for (long i = 0; pItem && ( i < m_lCount ); i++) 
    {
        if( pItem->GetID() == id )
        {
            return pItem;
        }
        pItem = (CResourceItem *) OffsetToProcAddress( m_idElemSize, pItem->m_offsetNext );
    }
    return NULL;
    
}

#if 0
HRESULT
CResourceList::Remove(ResourceID id)
{
    for (long i = 0; i < m_lCount; i++) {
        if (m_aItems[i].GetID() == id) {
            // remove from list - easy if at end
            m_lCount--;
            if (i < m_lCount) {
                // there are more entries after this one - copy up last
                CopyMemory(
                    (BYTE *) &m_aItems[i],
                    (BYTE *) &m_aItems[m_lCount],
                    sizeof(CResourceItem));
            }
            return S_OK;
        }
    }
    return E_INVALIDARG;
}
#endif

// init the ref count on this object to 1
void
CRequestor::Init(
    IResourceConsumer* pConsumer,
    IUnknown* pFocus,
    ProcessID procid,
    RequestorID id
    )
{
    m_pConsumer = pConsumer;
    m_pFocusObject = pFocus;
    m_procid = procid;
    m_id = id;

    m_cRef = 1;
}

#ifdef CHECK_APPLICATION_STATE

// return the state that the graph for this requestor is moving towards.

LONG CRequestor::GetFilterGraphApplicationState()
{
    IMediaControl* pMC = NULL;

    // NOTE: if we cannot get the filter graph state from IMediaControl
    // (because there is no pid present?) then we return -1.  This will
    // be handled above.  We do not know which way our caller wants to
    // jump in terms of defaulting to RUNNING or PAUSED/STOPPED.
    LONG FGState = -1;

    HRESULT hr = GetFocusObject()->QueryInterface(IID_IMediaControl, (void**)&pMC);
    if (FAILED(hr)) {
        
        IBaseFilter *      pIF;
        ASSERT(pMC == NULL);

        // sigh... we probably have a filter.  Get an IBaseFilter interface,
        // then get the filter graph from IBaseFilter, then get IMediaControl.

        if (SUCCEEDED(GetFocusObject()->QueryInterface(IID_IBaseFilter, (void**)&pIF))) {

            FILTER_INFO fi;
            hr = pIF->QueryFilterInfo(&fi);

            if (SUCCEEDED(hr) && fi.pGraph) {
                hr = fi.pGraph->QueryInterface(IID_IMediaControl, (void**)&pMC);
                fi.pGraph->Release();
            }
            pIF->Release();
        }
    }

    if (SUCCEEDED(hr)) {
        ASSERT(pMC);
        pMC->GetState(0x80000000, &FGState);
        pMC->Release();
    } else {
        ASSERT(!pMC);
    }

    DbgLog((LOG_TRACE, g_ResourceManagerTraceLevel, TEXT("FG_ApplicationState %d"), FGState));
    return FGState;

}
#endif

// try to find this combination of procid and pConsumer
// in the requestor list. if found addref and return its index. Otherwise
// create an entry with a 1 refcount.
//
// we assume that all requests with a given pConsumer have the
// same focus object (within a process). We reject attempts to add
// requestors with different focus objects.
HRESULT
CRequestorList::Add(
    IResourceConsumer* pConsumer,
    IUnknown* pFocusObject,
    ProcessID procid,
    RequestorID* pri)
{
    CRequestor * pElem = NULL;

    // search the list for this name
    for (long i = 0; i < m_lCount; i++)
    {
        pElem = (CRequestor *) GetListElem( i );
        ASSERT( NULL != pElem );
        
        if( pElem && (pElem->GetProcID() == procid) && (pElem->GetConsumer() == pConsumer)) 
        {
            // must have the same focus object
            if (pElem->GetFocusObject() != pFocusObject) 
            {
                return E_INVALIDARG;
            }

            // found an identical entry
            pElem->AddRef();

            // return a one-based index
            *pri = pElem->GetID();
            //return S_OK;
            return S_FALSE; // check this!! 
        }
    }

    // didn't find it - need to create a new entry

    DbgLog( ( LOG_TRACE
          , DYNAMIC_LIST_DETAILS_LOG_LEVEL
          , TEXT("CRequestorList: Adding CRequestorItem list element")));
    pElem = (CRequestor *) AddElemToList( );
    if( !pElem )
        return E_OUTOFMEMORY;
        
    // return 1-based count, so the post-increment we did is ok
    *pri = m_MaxID++;
    
    pElem->Init(pConsumer, pFocusObject, procid, *pri);
    
    return S_OK;
}
        
HRESULT
CRequestorList::Release(RequestorID ri)
{       
    CRequestor * pElem = NULL;
    // search the list for this name
    for (long i = 0; i < m_lCount; i++)
    {
        pElem = (CRequestor *) GetListElem( i );
        ASSERT( NULL != pElem );
        if (pElem && ( pElem->GetID() == ri) )
        {
            // found it!

            if (pElem->Release() == 0) 
            {
                DbgLog( ( LOG_TRACE
                      , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                      , TEXT("CRequestorList: CRequestorList::Release is calling RemoveListElem for elem %ld")
                      , i ) );
                      
                // refcount on this object has dropped to zero, so remove and recycle it
                RemoveListElem( i, TRUE ); 
        
                return S_OK;
            }
            return S_FALSE;
        }
    }
    return E_INVALIDARG;
}

CRequestor* 
CRequestorList::GetByID(RequestorID id) 
{
    CRequestor* pItem = (CRequestor *) OffsetToProcAddress( m_idElemSize, m_offsetHead );
    for (long i = 0; pItem && ( i < m_lCount ); i++) 
    {
        if( pItem->GetID() == id )
        {
            return pItem;
        }
        pItem = (CRequestor *) OffsetToProcAddress( m_idElemSize, pItem->m_offsetNext );
    }
    return NULL;
}


// find by pConsumer and procid
CRequestor*
CRequestorList::GetByPointer(IResourceConsumer* pConsumer, ProcessID procid)
{
    for (long i = 0; i < m_lCount; i++) 
    {
        CRequestor* pItem = (CRequestor*)GetListElem( i );
        ASSERT( NULL != pItem );
        if( pItem && 
            pItem->GetProcID() == procid &&
            pItem->GetConsumer() == pConsumer) 
        {
            return pItem;
        }
    }

    // 0 is an invalid index (for consistency with procids and the other
    // types of index/id values we use)
    return 0;
}

void
CProcess::Init(
    ProcessID procid,
    IResourceManager* pmgr,
    HWND hwnd)
{
    m_procid = procid;
    m_pManager = pmgr;
    m_hwnd = hwnd;
}

HRESULT
CProcess::Signal(void)
{
    if (PostMessage(m_hwnd, AWM_RESOURCE_CALLBACK, 0, 0)) {
        return S_OK;
    }
    return E_FAIL;
}

HRESULT
CProcessList::Add(
    ProcessID procid,
    IResourceManager* pmgr,
    HWND hwnd)
{
    DbgLog( ( LOG_TRACE
          , DYNAMIC_LIST_DETAILS_LOG_LEVEL
          , TEXT("CProcessList: Adding CProcessList list element")));
    CProcess * pElem = (CProcess *) AddElemToList( );
    if( !pElem )
        return E_OUTOFMEMORY;
        
    pElem->Init(procid, pmgr, hwnd);

    return S_OK;
}


HRESULT
CProcessList::Remove(HWND hwnd)
{
    for (long i = 0; i < m_lCount; i++) 
    {
        CProcess * pElem = (CProcess *) GetListElem( i );
        ASSERT( NULL != pElem );
        if (pElem && ( pElem->GetHWND() == hwnd) )
        {
            
            DbgLog( ( LOG_TRACE
                  , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                  , TEXT("CProcessList::Remove is calling RemoveListElem for elem %ld (pElem = 0x%08lx, hwnd = %d))")
                  , i
                  , pElem
                  , pElem->GetHWND() ) );
        
            RemoveListElem( i, TRUE ); // remove and recycle this element

            return S_OK;
        }
    }

    return E_INVALIDARG;

}

CProcess*
CProcessList::GetByID(ProcessID procid)
{
    CProcess* pItem = (CProcess *) OffsetToProcAddress( m_idElemSize, m_offsetHead );
    for (long i = 0; pItem && ( i < m_lCount ); i++) 
    {
        if( pItem->GetProcID() == procid )
        {
            return pItem;
        }
        pItem = (CProcess *) OffsetToProcAddress( m_idElemSize, pItem->m_offsetNext );
    }
    return NULL;
}


HRESULT
CProcessList::SignalProcess(ProcessID procid)
{
    CProcess* proc = (CProcess *) GetByID((DWORD)procid);
    if (proc == NULL) {
        return E_INVALIDARG;
    }
    return proc->Signal();
}

void
CResourceData::Init(void)
{
    m_Processes.Init(ELEM_ID_SMALL);
    m_Resources.Init(ELEM_ID_LARGE);
    
    // initialize the ids for the corresponding element sizes for the hole lists here
    m_Holes[ELEM_ID_SMALL].m_idElemSize = ELEM_ID_SMALL;
    m_Holes[ELEM_ID_LARGE].m_idElemSize = ELEM_ID_LARGE;

    m_FocusProc = 0;
    m_pFocusObject = 0;
}


// --- Resource Manager methods ---

HRESULT
CResourceManager::SignalProcess(ProcessID procid)
{
    // must hold mutex at this point!

    return m_pData->m_Processes.SignalProcess(procid);
}


// register a resource. ok if already exists.
STDMETHODIMP
CResourceManager::Register(
    LPCWSTR pName,         // this named resource
    LONG   cResource,      // has this many instances
    LONG* plResourceID        // resource ID token placed here on return
)
{
    CAutoMutex mtx(&m_Mutex);

    // we only allow single resources for now
    if (cResource > 1) {
        return E_NOTIMPL;
    }

    if (cResource == 0) {

        // !!!deallocate and release!!!
        // !!! but when will this be called? not on process exit
        // since it can't be sure that it is the last process?
        // addref and release on register?
        return E_NOTIMPL;
    }
    
    // convert to multibyte to conserve space on non-unicode
    if (lstrlenW(pName) >= Max_Resource_Name) {
        return E_OUTOFMEMORY;
    }
    
    char str[Max_Resource_Name];
    WideCharToMultiByte(GetACP(), 0, pName, lstrlenW( pName ) + 1, str, Max_Resource_Name, NULL, NULL);
    
    return m_pData->m_Resources.Add( str
                                   , plResourceID );
}


// register a group of related resources that you can request any of
STDMETHODIMP
CResourceManager::RegisterGroup(
         LPCWSTR pName,         // this named resource group
         LONG cResource,        // has this many resources
         LONG* palContainedIDs,      // these are the contained resources
         LONG* plGroupID        // group resource id goes here
    )
{
    return E_NOTIMPL;
}

// request the use of a given, registered resource.
// possible return values:
//      S_OK == yes you can use it now
//      S_FALSE == you will be called back when the resource is available
//      other - there is an error.
//
STDMETHODIMP
CResourceManager::RequestResource(
    LONG idResource,
    IUnknown* pFocusObject,
    IResourceConsumer* pConsumer
)
{
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::RequestResource(LONG idResource(%i), IUnknown* pFocusObject(0x%08X),IResourceConsumer* 0x%08X)"),
        idResource, pFocusObject, pConsumer ));
    CAutoMutex mtx(&m_Mutex);

    CResourceItem * const pItem = (CResourceItem *) m_pData->m_Resources.GetByID((DWORD)idResource);
    if (pItem == NULL) return E_INVALIDARG;
    DbgTraceItem( pItem );

    // make/addref a CRequestorList entry for our caller
    // he's in our process in the sense that pConsumer points to an
    // address in this process
    RequestorID reqid;

    // add this guy to the requestor list for this resource
    // note that all requestors are on the list, including the current
    // holder
    HRESULT hr = pItem->m_Requestors.Add(
                            pConsumer,
                            pFocusObject,
                            m_procid,
                            &reqid);
    
    if (S_FALSE == hr) {
        DbgLog(( LOG_ERROR, 0, TEXT("CResourceManager::RequestResource: Request already on list!")));
        // he was there already so we now have too many refcounts
        pItem->m_Requestors.Release(reqid);

        // he may even already be the holder
        if (pItem->GetHolder() == reqid) {
            if ((pItem->GetState() == RS_Held) ||
                (pItem->GetState() == RS_Acquiring)) {
                    return S_OK;
            }
        }
        // if he is the next-holder we should still go through this
    } else if (FAILED(hr)) {
        DbgLog(( LOG_ERROR, 0, TEXT("CResourceManager::RequestResource: Failed to add request to list!")));
        // since we failed to add him to the resource, we need to
        // release the refcount on him
        //
        // now that we've removed the rendundant requestor list this isn't necessary
        // since we wouldn't have done an addref in the first place
        // pItem->m_Requestors.Release(reqid);
        return hr;
    }

    // now, can he get it?

    // RS_Error means the last attempt to acquire it failed - treat this as
    // free and try again
    if ((pItem->GetState() == RS_Error) ||
        (pItem->GetState() == RS_Free)) {

        // acquire it straightaway
        pItem->SetHolder(reqid);

        // need him to tell us if he got it ok
        pItem->SetState(RS_Acquiring);
        return S_OK;
    }

    // contention resolution. Need to compare priority against holder.
    // if in transition, compare against next holder not current.
    RequestorID idCurrent = pItem->GetHolder();
    BOOL bGetsResource = FALSE;
    if ((pItem->GetState() == RS_NeedRelease) ||
        (pItem->GetState() == RS_ReleaseDone) ||
        (pItem->GetState() == RS_Releasing)) {

            idCurrent = pItem->GetNextHolder();
            if (idCurrent == 0) {
                // transfering it to no-one - let's take it
                bGetsResource = TRUE;
            }
    }

    if (!bGetsResource) {
        if (!ComparePriority(idCurrent, reqid, idResource)) {

            // sorry mate, but you might get it eventually
            return S_FALSE;
        }
    }

    // need to reacquire this - depends on state
    return SwitchTo(pItem, reqid);
}

// notify the resource manager that an acquisition attempt completed.
// Call this method after an AcquireResource method returned
// S_FALSE to indicate asynchronous acquisition.
// HR should be S_OK if the resource was successfully acquired, or a
// failure code if the resource could not be acquired.
STDMETHODIMP
CResourceManager::NotifyAcquire(
    LONG idResource,
    IResourceConsumer* pConsumer,
    HRESULT hrParam)
{
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::NotifyAcquire(LONG idResource(%i), IResourceConsumer* 0x%08X, HRESULT 0x%08X)"),
        idResource, pConsumer, hrParam ));

    CAutoMutex mtx(&m_Mutex);

    CResourceItem * const pItem = (CResourceItem *) m_pData->m_Resources.GetByID((DWORD)idResource);
    if (!pItem) {
        // que? how was it deleted while he was acquiring it?
        DbgLog((LOG_ERROR, 0, TEXT("NotifyAcquire called on a deleted resource")));
        return E_UNEXPECTED;
    }
    DbgTraceItem( pItem );

    CRequestor* pCaller = pItem->m_Requestors.GetByPointer(pConsumer, m_procid);
    ASSERT(pCaller != NULL);
    if( !pCaller ) {
        // ??
        DbgLog((LOG_ERROR, 0, TEXT("NotifyAcquire called on a deleted requestor")));
        return E_UNEXPECTED;
    }
    
    if ((pItem->GetState() != RS_Acquiring) ||
        (pItem->GetHolder() != pCaller->GetID())) {

            // you can't have acquired it - you don't own it
            return E_UNEXPECTED;

            // except this will only be called when someone thinks they
            // do have it... this really is UNEXPECTED.
    }

    if (FAILED(hrParam)) {
        // failed to acquire it. place in error state, not held by anyone
        // and try again on next focus switch or next request
        pItem->SetState(RS_Error);
        pItem->SetHolder(0);
        pItem->SetNextHolder(0);
        return S_OK;
    }

    // successfully acquired - did we want to reassign it in the meantime?
    if (pItem->GetNextHolder() != 0) {

        // flag our process to release this asynchronously (don't
        // call back during this call!
        FlagRelease(pItem);
    } else {
        // now held
        pItem->SetState(RS_Held);
    }

    return S_OK;
}

// a holder has released a resource, either voluntarily or at our demand.
// he may want it back when he goes back up in priority (bStillWant is
// TRUE if he released it on sufferance and wants it back).
STDMETHODIMP
CResourceManager::NotifyRelease(
    LONG idResource,
    IResourceConsumer* pConsumer,
    BOOL bStillWant)
{
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::NotifyRelease(LONG idResource(%i), IResourceConsumer* 0x%08X, BOOL bStillWant(%i))"),
        idResource, pConsumer, bStillWant ));

    CAutoMutex mtx(&m_Mutex);

    CResourceItem * const pItem = (CResourceItem *) m_pData->m_Resources.GetByID(idResource);
    if( !pItem )
    {    
        return E_INVALIDARG;
    }
        
    CRequestor* pReq = pItem->m_Requestors.GetByPointer(pConsumer, m_procid);
    if (!pReq || (pItem->GetHolder() != pReq->GetID())) {
        return E_INVALIDARG;
    }
    DbgTraceItem( pItem );

    // if he doesn't want it, take him off the list
    pItem->SetHolder(0);
    if (!bStillWant) {
        // remove from list of requestors for this resource

        // release one refcount on this requestor
        // pReq no longer valid
   
        pItem->m_Requestors.Release(pReq->GetID());
    }

    if (pItem->GetNextHolder() == 0) {
        // no assigned next holder, so pick one
        SelectNextHolder(pItem);
    }

    // still no holder?
    if (pItem->GetNextHolder() == 0) {
        ASSERT(pItem->GetRequestCount() == 0);
        pItem->SetState(RS_Free);
        return S_OK;
    }

    // start the transition to next-holder
    pItem->SetState(RS_ReleaseDone);
    Transfer(pItem);

    return S_OK;
}

// I don't currently have the resource, and I no longer need it.
STDMETHODIMP
CResourceManager::CancelRequest(
    LONG idResource,
    IResourceConsumer* pConsumer)
{
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::CancelRequest(LONG idResource(%i), IResourceConsumer* 0x%08X"),
        idResource, pConsumer ));

    CAutoMutex mtx(&m_Mutex);

    CResourceItem* const pItem = (CResourceItem *) m_pData->m_Resources.GetByID( idResource ); 
    if( NULL == pItem ) 
    {
        // possibly graph building was aborted?
        return E_INVALIDARG;
    }

    CRequestor* pReq = pItem->m_Requestors.GetByPointer(pConsumer, m_procid);
    if ( NULL == pReq ) {
        return E_INVALIDARG;
    }

    DbgTraceItem( pItem );
    
    if (pItem->GetHolder() == pReq->GetID()) {

        // actually he does hold it - this is the same a forced
        // release with bStillWant false
        return NotifyRelease(idResource, pConsumer, FALSE);
    }

    // pReq will be invalid after the Release
    RequestorID reqid = pReq->GetID();

    // remove from list of requestors for this resource
    HRESULT hr = pItem->m_Requestors.Release(pReq->GetID());
    if (FAILED(hr)) {
        // he has already cancelled this?
        return hr;
    }

    // he may be the next-holder
    if (pItem->GetNextHolder() == reqid) {

        // select a new next-holder
        SelectNextHolder(pItem);
        
        // can we avoid an unnecessary forced-release
        if ((pItem->GetNextHolder() == 0) &&
            (pItem->GetState() == RS_NeedRelease)) {

            pItem->SetState(RS_Held);
            // remember to clear attention-by process since it
            // probably points to us
            pItem->SetProcess(0);

            ASSERT(pItem->GetHolder() != 0);
        } else if (pItem->GetState() == RS_ReleaseDone) {
            Transfer(pItem);
        }
    }

    ASSERT(pItem->GetNextHolder() != reqid);

    return S_OK;
}


// switch all contended resources to the new highest priority owner
STDMETHODIMP
CResourceManager::SetFocus(IUnknown* pFocusObject)
{
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::SetFocus(IUnknown* pFocusObject(0x%08X))"),
        pFocusObject ));

    CAutoMutex mtx(&m_Mutex);

    // set the focus object in the table
    m_pData->m_pFocusObject = pFocusObject;
    if (pFocusObject) {
        m_pData->m_FocusProc = m_procid;
        DbgLog((LOG_TRACE, g_ResourceManagerTraceLevel, TEXT("Setting focus proc id to 0x%02X"), m_procid));
    } else {
        // null focus object so null focus proc
        DbgLog((LOG_TRACE, g_ResourceManagerTraceLevel, TEXT("Clearing focus proc id")));
        m_pData->m_FocusProc = 0;
    }

    // for each contended resource
    for (long i = 0; i < m_pData->m_Resources.Count(); i++) {
        CResourceItem* pItem = (CResourceItem *) m_pData->m_Resources.GetListElem(i);
        ASSERT( NULL != pItem );
        if (pItem && ( pItem->GetRequestCount() > 1) ) {

            // choose a new holder
            SelectNextHolder(pItem);

            // is there a new holder requested?
            if (pItem->GetNextHolder() != 0) {
                HRESULT hr = SwitchTo(pItem, pItem->GetNextHolder());

                if (S_OK == hr) {
                   // completed ok - but ForceRelease will think
                   // we're actually now acquiring - need to set state correctly
                   // this indicates that someone needs to do the Acquire
                   // call
                   pItem->SetState(RS_ReleaseDone);

                   // ForceRelease has set the holder- but this is actually the
                   // next holder
                   pItem->SetNextHolder(pItem->GetHolder());
                   pItem->SetHolder(0);

                   // has been released, and now needs assigning to next holder
                   hr = Transfer(pItem);
                }
            }
        }
    }
    return S_OK;
}

// release the focus object if it is still this one
STDMETHODIMP
CResourceManager::ReleaseFocus(
    IUnknown* pFocusObject)
{
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::ReleaseFocus(IUnknown* pFocusObject(0x%08X))"),
        pFocusObject ));

    CAutoMutex mtx(&m_Mutex);

    // if it is currently the focus object, then
    // do a SetFocus(NULL). Otherwise do nothing since someone has
    // already released it or set a new focus object
    if ((m_pData->m_pFocusObject == pFocusObject) &&
        (m_pData->m_FocusProc == m_procid)) {
        return SetFocus(NULL);
    } else {
        return S_OK;
    }
}

// worker thread has been signalled - look for all work assigned to
// this process
HRESULT
CResourceManager::OnThreadMessage(void)
{
    CAutoMutex mtx(&m_Mutex);

    // work items for us are resources labelled with our
    // procid that are either RS_NeedRelease (we release them and pass
    // them on) or RS_ReleaseDone (they are destined for a new holder
    // in our process).
    HRESULT hr;
    for (long i = 0; i < m_pData->m_Resources.Count(); i++) {
        CResourceItem* pItem = (CResourceItem *) m_pData->m_Resources.GetListElem(i);
        ASSERT( NULL != pItem );
        if (pItem && ( pItem->GetProcess() == m_procid) ) {

            if (pItem->GetState() == RS_NeedRelease) {
                hr = ForceRelease(pItem);

                if (hr == S_OK) {
                    // the release is done, but as we are not returning
                    // direct to the requestor, there is another stage
                    // required

                    // this indicates that someone needs to do the Acquire
                    // call
                    pItem->SetState(RS_ReleaseDone);

                    // ForceRelease has set the holder- but this is actually the
                    // next holder
                    RequestorID idNewHolder = pItem->GetHolder();
                    pItem->SetNextHolder(idNewHolder);
                    pItem->SetHolder(0);

                    // signal the other process if it's not us
                    CRequestor *pNew = pItem->m_Requestors.GetByID(idNewHolder);

                    if (pNew) {
                        pItem->SetProcess(pNew->GetProcID());
                        if (pNew->GetProcID() != m_procid) {
                            SignalProcess(pNew->GetProcID());

                            // don't call Transfer since we have already
                            // signalled remote proc
                            // - skip to next resource
                            continue;
                        }
                    }
                }
            }

            if (pItem->GetState() == RS_ReleaseDone) {

                // has been released, and now needs assigning to next holder
                Transfer(pItem);
            }
        }
    }
    return S_OK;
}

// worker thread is starting up
HRESULT
CResourceManager::OnThreadInit(HWND hwnd)
{
    CAutoMutex mtx(&m_Mutex);
    
    // create an entry in the process table for this instance
    HRESULT hr = m_pData->m_Processes.Add(
                    m_procid,
                    (IResourceManager*) this,
                    hwnd);
    if (FAILED(hr)) {
    ASSERT(SUCCEEDED( hr ) );
        return hr;
    }

    // starting a new graph is a good place to look for
    // dead processes
    CheckProcessTable();


    // it is possible that work could have been assigned to us on another
    // thread anytime after construction before now, so act as though
    // we have been signalled.
    return OnThreadMessage();
}

// worker thread is shutting down
HRESULT
CResourceManager::OnThreadExit(HWND hwnd)
{
    // remove our instance from the process table
    CAutoMutex mtx(&m_Mutex);

    // thread id should be unique so we can search on that
    HRESULT hr = m_pData->m_Processes.Remove(hwnd);
    ASSERT(SUCCEEDED(hr));

    if (FAILED(hr)) {
        return hr;
    }

    // if there are no more instances for this process, then
    // do some checking
    if (m_pData->m_Processes.GetByID((DWORD)m_procid) == NULL) {

        // if we are the focus proc, release it
        if (m_pData->m_FocusProc == m_procid) {
            SetFocus(NULL);
        }

        for (long i = 0; i < m_pData->m_Resources.Count(); i++) {
            CResourceItem* pItem = (CResourceItem *) m_pData->m_Resources.GetListElem(i);
            ASSERT( NULL != pItem );                                    
            if (pItem && ( pItem->GetProcess() == m_procid) ) {

                // the holder had better not be in our process
                RequestorID idHolder = pItem->GetHolder();
                
                CRequestor *pHolder = NULL;
                pHolder = pItem->m_Requestors.GetByID((DWORD)idHolder);
                
                if (idHolder && pHolder) {
                    ASSERT(pHolder->GetProcID() != m_procid);

                    // reassign to someone else
                    pItem->SetState(RS_ReleaseDone);
                    SelectNextHolder(pItem);
                    Transfer(pItem);
                }
            }
        }

        // check there are no requestors on this procid
        
        CResourceItem *pResItem = NULL;
        for( i = 0; i < m_pData->m_Resources.Count() && (NULL == pResItem) ; i ++ )
        {
            pResItem = (CResourceItem *) m_pData->m_Resources.GetListElem( i ); 
            ASSERT( NULL != pResItem );
            if( !pResItem )
                continue;
                
            for( int j = 0; j < pResItem->m_Requestors.Count(); j ++ )
            {
                CRequestor* pRequestor = (CRequestor *) pResItem->m_Requestors.GetListElem( j ); 

                // shouldn't happen
                ASSERT( ( NULL != pRequestor ) && ( pRequestor->GetProcID() != m_procid ) );
            }                
        }
    }
    return S_OK;
}


// arrange to switch the resource to the given requestor id.
// action depends on the state of the device - if it is
// in some form of transitional state we will not call it but wait
// for it to call back at the end of the transition
HRESULT
CResourceManager::SwitchTo(CResourceItem *pItem, RequestorID idNew)
{
    ASSERT( pItem );
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::SwitchTo(CResourceItem *pItem, RequestorID idNew(%i))"), idNew ));
    DbgTraceItem( pItem );

    HRESULT hr = E_UNEXPECTED;
    switch(pItem->GetState()) {
    case RS_Held:
        // force a release from current owner
        pItem->SetNextHolder(idNew);
        hr = ForceRelease(pItem);
        break;


    case RS_NeedRelease:
        // a process has been flagged to force a release, but hasn't made
        // the release call yet. If that process is us, then we can do it here

        // override the next-holder so it will come to use when released
        pItem->SetNextHolder(idNew);

        if (pItem->GetProcess() == m_procid) {
            hr = ForceRelease(pItem);
        } else{
            // you have to wait
            hr = S_FALSE;
        }
        break;

    case RS_Releasing:
        // in the process of being released in favour of the next-holder.
        // We just override the next-holder field
        // and our process will be signalled when the release is done.

        pItem->SetNextHolder(idNew);
        hr = S_FALSE;
        break;

    case RS_Error:
        // treat this like ReleaseDone and Free, and assign it to ourselves
    // drop through ...
    case RS_ReleaseDone:
        // simple: one process has done a forced release for
        // a different process to acquire, but the acquiring process
        // has not got in, so we can take over.
        pItem->SetHolder(idNew);

        // make sure we don't think it is in transition to someone else
        pItem->SetNextHolder(0);
        pItem->SetState(RS_Acquiring);
        hr = S_OK;
        break;

    case RS_Acquiring:
        // tricky:
        // have just given it to someone, who is yet to call back confirming
        // that it has happened. Likely to deadlock I think if we call
        // release during this gap.
        // Set the next holder to us, and when he calls back, we will
        // get our thread to call him back and release it.

        // note we know we are higher priority that the holder, but
        // we need to be higher than the next-owner if there is one already
        if (ComparePriority(pItem->GetNextHolder(), idNew, pItem->GetID())) {
            pItem->SetNextHolder(idNew);
        }
        hr = S_FALSE;
        break;

    default:
        ASSERT(0);
        hr = E_UNEXPECTED;
        break;
    }
    return hr;
}


// this is the key to focus switching: in this method we determine which of
// two contenders should get the resource, based on how 'close' they are to
// a focus object. If they are in the same process and all are quartz filters,
// we start using relationships within the filtergraph to find commonality
// (essentially this will be between audio and video renderers).
//
// return TRUE if idxNew has a better right to the resource
// than idxCurrent
// return FALSE if current is better or if there is no difference.
// (ie we only switch away if there is a distinctly better claim)
BOOL
CResourceManager::ComparePriority(
    RequestorID idCurrent,
    RequestorID idNew,
    LONG        idResource

)
{
    CRequestor* pCurrent = NULL;    
    
    CResourceItem * const pResItem = (CResourceItem *) m_pData->m_Resources.GetByID((DWORD)idResource);
    if( NULL == pResItem )
        return FALSE;

    // new requestor must be on requestor list for same resource
    CRequestor* pNew = pResItem->m_Requestors.GetByID((DWORD)idNew);
    if( NULL == pNew )
        return FALSE;

    pCurrent = pResItem->m_Requestors.GetByID((DWORD)idCurrent);
    if( NULL == pCurrent )
        return TRUE;
    
    // idCurrent has a better right to the resource then idNew if
    // there is no focus object.

    // are they in the same process as the focus object?
    if (pNew->GetProcID() != m_pData->m_FocusProc) {

        // new one is not in same process so cannot be closer
        return FALSE;

    } else if (pCurrent->GetProcID() != m_pData->m_FocusProc) {
        // new one is same proc, old one not so switch

#ifdef CHECK_APPLICATION_STATE
        // Before we return TRUE make another check.  If the new is
        // PAUSED (rather than running) then we do not want to take
        // the device away - yet.

        // we can only make this check if the focus object is in our process.
        // if it is not our process, then give the device to the
        // new one.
        if (m_pData->m_FocusProc != m_procid) {
            return TRUE;
        }

        LONG FGState = pNew->GetFilterGraphApplicationState();
        if (FGState == State_Running) {
            return TRUE;
        }

        // if FGState == -1 it means that we could not get the state
        // and we default to NO CHANGE.
        return FALSE;
#else
        return TRUE;
#endif
    }

    // all 3 are in the same process

    // We may need to get the states of both requestors and only
    // pass the resource if the new one is playing.  For the moment
    // leave this code alone.  The use of GetState() on the requestor above
    // handles the case when we have 2 instances of the OCX in different
    // process address spaces.  We are still likely to get it slightly
    // wrong if we have two instances of the OCX in a single process
    // address space (e.g. two videos on one html page).

    // are they actually the same object as the focus?
    // or the same as each other?
    if ((pCurrent->GetFocusObject() == m_pData->m_pFocusObject) ||
        (pCurrent->GetFocusObject() == pNew->GetFocusObject())) {

        // current object is still focus object -
        // you can't get closer than this whatever the
        // other one is.
        // -- or they are the same in which case the new one can't
        // be closer.
        return FALSE;
    }

    if (pNew->GetFocusObject() == m_pData->m_pFocusObject) {
        // new object is identical to focus object same and current isn't.
        return TRUE;
    }

    // ok we have two objects in the same process as the
    // focus object.
    // if they are not in our process, we cannot progress
    if (pCurrent->GetProcID() != m_procid) {
        return FALSE;
    }


    // at this point the focus object must be non-null - if it is null, the
    // focus procid will be 0 and hence will not match the current procid.
    ASSERT(m_pData->m_FocusProc);

    // can we get a filtergraph for the focus object? It might be either
    // a filter graph or a filter.


    BOOL bRet = FALSE;
    IFilterGraph* pFGFocus;
    HRESULT hr = m_pData->m_pFocusObject->QueryInterface(IID_IFilterGraph, (void**)&pFGFocus);
    if (SUCCEEDED(hr)) {

        // check if either requestor is (this graph or) a filter within this
        // graph. We only switch if the new one is closer than the old - this
        // is only true if new is in graph and old isn't in this graph.
        if (IsWithinGraph(pFGFocus, pNew->GetFocusObject()) &&
            !IsWithinGraph(pFGFocus, pCurrent->GetFocusObject())) {
                bRet = TRUE;
        }
        // else can't check any further - so leave status quo.
        pFGFocus->Release();
    } else {

        IBaseFilter* pFilterFocus;
        hr = m_pData->m_pFocusObject->QueryInterface(IID_IBaseFilter, (void**)&pFilterFocus);
        if (SUCCEEDED(hr)) {

            // focus object is a filter within a graph. If we can get
            // IBaseFilter* interfaces from the two requestors then we can
            // proceed to compare them more closely

            IBaseFilter* pFilterCurrent;
            hr = pCurrent->GetFocusObject()->QueryInterface(IID_IBaseFilter, (void**)&pFilterCurrent);
            if (SUCCEEDED(hr)){
                IBaseFilter* pFilterNew;
                hr = pNew->GetFocusObject()->QueryInterface(IID_IBaseFilter, (void**)&pFilterNew);
                if (SUCCEEDED(hr)) {

                    // all three are quartz filters - are they in the same
                    // graph?
                    if (!IsSameGraph(pFilterNew, pFilterFocus)) {
                        // new one is not in the same graph as focus and thus can't be
                        // closer
                        bRet = FALSE;
                    } else if (!IsSameGraph(pFilterCurrent, pFilterFocus)) {
                        // new one is, old one isn't - switch
                        bRet = TRUE;
                    } else {

                        // close relation within a graph?
                        bRet = IsFilterRelated(pFilterFocus, pFilterCurrent, pFilterNew);
                    }

                    pFilterNew->Release();
                }
                pFilterCurrent->Release();
            }
            pFilterFocus->Release();
        }
    }
    return bRet;
}

// returns TRUE if pUnk is a filter within pGraph (or is the same graph
// as pGraph).
BOOL
IsWithinGraph(IFilterGraph* pGraph, IUnknown* pUnk)
{
    ASSERT(pGraph);
    ASSERT(pUnk);

    IBaseFilter *pF;
    BOOL bIsWithin = FALSE;
    if (IsEqualObject(pGraph, pUnk)) {
        bIsWithin = TRUE;
    } else {
        HRESULT hr = pUnk->QueryInterface(IID_IBaseFilter, (void**)&pF);
        if (SUCCEEDED(hr)) {
            FILTER_INFO fi;
            hr = pF->QueryFilterInfo(&fi);
            if (SUCCEEDED(hr)) {
                if (IsEqualObject(pGraph, fi.pGraph)) {
                    bIsWithin = TRUE;
                }
                QueryFilterInfoReleaseGraph(fi);
            }
            pF->Release();
        }
    }
    return bIsWithin;
}

// return TRUE if both filters are in the same filtergraph
// returns FALSE unless we can say for certain that they are.
BOOL
IsSameGraph(IBaseFilter* p1, IBaseFilter* p2)
{
    FILTER_INFO fi1, fi2;
    BOOL bIsSame = FALSE;
    HRESULT hr = p1->QueryFilterInfo(&fi1);
    if (SUCCEEDED(hr) && fi1.pGraph) {
        hr = p2->QueryFilterInfo(&fi2);
        if (SUCCEEDED(hr) && fi2.pGraph) {
            if (IsEqualObject(fi1.pGraph, fi2.pGraph)) {
                bIsSame = TRUE;
            }
            QueryFilterInfoReleaseGraph(fi2);
        }
        QueryFilterInfoReleaseGraph(fi1);
    }
    return bIsSame;
}

// pin enumeration wrapper to simplify the graph traversal code
class CPinEnumerator {
private:
    IEnumPins* m_pEnum;
public:
    CPinEnumerator(IBaseFilter* pFilter) {
        HRESULT hr = pFilter->EnumPins(&m_pEnum);
        if (FAILED(hr)) {
            ASSERT(!m_pEnum);
        }
    }

    ~CPinEnumerator() {
        if (m_pEnum) {
            m_pEnum->Release();
        }
    }

    // return the next pin of any direction
    IPin* Next() {
        if (!m_pEnum) {
            return NULL;
        }
        IPin* pPin;
        ULONG ulActual;
        HRESULT hr = m_pEnum->Next(1, &pPin, &ulActual);
        if (FAILED(hr) || (ulActual != 1)) {
            ASSERT(ulActual < 1);
            return NULL;
        } else {
            return pPin;
        }
    };

    // return the next pin of a specific direction
    IPin* Next(PIN_DIRECTION dir)
    {
        IPin* pPin;
        for (;;) {
            pPin = Next();
            if (!pPin) {
                // no more pins
                return NULL;
            }

            // check direction
            PIN_DIRECTION dirThis;
            HRESULT hr = pPin->QueryDirection(&dirThis);
            if (SUCCEEDED(hr) && (dir == dirThis)) {
                return pPin;
            }
            pPin->Release();
        }
    };
    void Reset(void) {
        if (m_pEnum) {
            m_pEnum->Reset();
        }
    };
};

// given a pin, give me the corresponding filter that it connects to.
// Returns NULL if not connected or error, or an addrefed IBaseFilter* otherwise.
IBaseFilter* PinToConnectedFilter(IPin* pPin)
{
    // get the peer pin that we connect to
    IPin * ppinPeer;
    HRESULT hr = pPin->ConnectedTo(&ppinPeer);
    if (FAILED(hr)) {
        // not connected
        return NULL;
    }

    // get the filter that this peer pin lives on
    ASSERT(ppinPeer);
    PIN_INFO piPeer;
    hr = ppinPeer->QueryPinInfo(&piPeer);

    // now we are done with ppinPeer
    ppinPeer->Release();

    if (FAILED(hr)) {
        // hard to see how QueryPinInfo could fail?
        ASSERT(SUCCEEDED(hr));
        return NULL;
    } else {
        ASSERT(piPeer.pFilter);
        return piPeer.pFilter;
    }
}



// searches other branches of the graph going upstream of the input pin
// pInput looking for the filters pCurrent or pNew. Returns S_OK if it finds
// pNew soonest (ie closest to pInput) or S_FALSE if it finds pCurrent at
// least as close, or E_FAIL if it finds neither.
HRESULT
SearchUpstream(
    IPin* pInput,
    IBaseFilter* pCurrent,
    IBaseFilter* pNew)
{
    // trace pInput to a corresponding peer output pin on an upstream filter

    IPin* ppinPeerOutput;
    HRESULT hr = pInput->ConnectedTo(&ppinPeerOutput);
    if (FAILED(hr)) {
        return E_FAIL;
    }
    ASSERT(ppinPeerOutput);

    PIN_INFO pi;
    hr = ppinPeerOutput->QueryPinInfo(&pi);
    ASSERT(SUCCEEDED(hr));
    ASSERT(pi.pFilter != NULL);


    // haven't found the filters yet
    HRESULT hrReturn = E_FAIL;

    // starting at this filter, look for pCurrent and pNew down
    // any of the output pins. If we find pCurrent anywhere downstream of
    // us then it is at least as close, so return S_FALSE.
    if (SearchDownstream(pi.pFilter, pCurrent)) {
        hrReturn = S_FALSE;
    } else if (SearchDownstream(pi.pFilter, pNew)) {
        hrReturn = S_OK;
    }


    //for each input pin on peer filter

    // if we haven't found either yet, keep looking upstream
    if (FAILED(hrReturn)) {
        // enumerate all the pins on the filter
        CEnumConnectedPins pins(ppinPeerOutput, &hr);
        while (SUCCEEDED(hr)) {

            IPin* ppeerInput = pins();

            if (!ppeerInput) {
                // no more input pins
                break;
            }

            hrReturn = SearchUpstream(ppeerInput, pCurrent, pNew);

            ppeerInput->Release();

            if (SUCCEEDED(hrReturn)) {
                break;
            }
        }
    }

    ppinPeerOutput->Release();
    pi.pFilter->Release();

    return hrReturn;
}

// search for pFilter anywhere on the graph starting at filter pStart and
// going down all its output pins.
// Returns TRUE if found or FALSE otherwise.
BOOL
SearchDownstream(
    IBaseFilter* pStart,
    IBaseFilter* pFilter)
{
    if (pStart == pFilter) {
        return TRUE;
    }

    CPinEnumerator pins(pStart);

    // for each input pin on pStart
    for (;;) {
        IPin* pInput = pins.Next(PINDIR_INPUT);
        if (!pInput) {
            return FALSE;
        }

        BOOL bOK = FALSE;

	// look downstream of that pin (following QueryInternalConnections)
	HRESULT hr;
        CEnumConnectedPins conpins(pInput, &hr);

	while (SUCCEEDED(hr)) {

            IPin* pOutput = conpins();
	    if (pOutput == NULL)
		break;

            // get from an output pin to the downstream filter if any
            IBaseFilter* pfDownstream = PinToConnectedFilter(pOutput);
            if (pfDownstream) {
                bOK = SearchDownstream(pfDownstream, pFilter);
                pfDownstream->Release();
            }
            pOutput->Release();

            // did we find it anywhere?
            if (bOK) {
		pInput->Release();
                return bOK;
            }
	}

	pInput->Release();
    }
    return FALSE;
}

//
// returns TRUE if pFilterNew is more closely related to pFilterFocus
// than pFilterCurrent is. Returns false if same or if current is closer.
//
// tracks each filter back to a source filter and looks for commonality.

BOOL
IsFilterRelated(
    IBaseFilter* pFilterFocus,
    IBaseFilter* pFilterCurrent,
    IBaseFilter* pFilterNew)
{
    // first check downstream of focus filter
    if (SearchDownstream(pFilterFocus, pFilterCurrent)) {
        // new one can't be closer
        return FALSE;
    } else if (SearchDownstream(pFilterFocus, pFilterNew)) {
        // new one is closer than old one
        return TRUE;
    }

    // try other branches from common source
    CPinEnumerator pins(pFilterFocus);

    //for each input pin to pFilterFocus {
    for (;;) {
        IPin* pInput = pins.Next(PINDIR_INPUT);

        if (!pInput) {
            // didn't find either, so new cannot be shown to be higher priority than
            // current
            return FALSE;
        }

        HRESULT hr = SearchUpstream(pInput, pFilterCurrent, pFilterNew);
        pInput->Release();

        if (S_OK == hr) {
            return TRUE;
        } else if (S_FALSE == hr) {
            return FALSE;
        }
    }
}


// force the release of an item current held, next-holder has
// already been set. Return S_OK if the release is done (state set to
// acquiring), else S_FALSE and some transitioning state.
HRESULT
CResourceManager::ForceRelease(CResourceItem* pItem)
{
    ASSERT(pItem->GetState() != RS_Releasing);
    ASSERT(pItem->GetState() != RS_Acquiring);

    CRequestor* pHolder = pItem->m_Requestors.GetByID((DWORD)pItem->GetHolder());

    if (pHolder) {
        // it is held by someone

        // if they are out of proc, signal them
        if (pHolder->GetProcID() != m_procid) {
            FlagRelease(pItem);

            // need to wait for it
            return S_FALSE;
        }

        // come in number 22; your time is up!
        HRESULT hr = pHolder->GetConsumer()->ReleaseResource(pItem->GetID());

        if (S_FALSE == hr) {
            // he needs time to release and will call back
            pItem->SetState(RS_Releasing);
            return S_FALSE;
        }
        if (hr != S_OK) {

            // he hasn't got it or failed to get it - switch to error
            // state and let the new guy have a go
            pItem->SetState(RS_Error);
            pItem->SetHolder(0);
            pItem->SetNextHolder(0);
        }
    }

    // no holder, or holder has completed the release

    // switch over to new holder, who needs to call us back
    // to say if he succeeded in acquiring it.

    pItem->SetHolder(pItem->GetNextHolder());
    pItem->SetNextHolder(0);
    pItem->SetProcess(0);
    pItem->SetState(RS_Acquiring);

    return S_OK;
}


// signal that this resource should be released by the worker thread
// in that process. Set the process attention, set the state to indicate
// that release is needed, and signal that process. Note that the remote
// process could be us (where we need to do the release async.
HRESULT
CResourceManager::FlagRelease(CResourceItem* pItem)
{
    if( !pItem )
        return E_UNEXPECTED;
        
    CRequestor* pHolder = pItem->m_Requestors.GetByID((DWORD)pItem->GetHolder());

    if (pHolder) {
        pItem->SetState(RS_NeedRelease);
        pItem->SetProcess(pHolder->GetProcID());

        return SignalProcess(pHolder->GetProcID());
    } else {
        return E_UNEXPECTED;
    }
}

// transfer a released resource to a requestor who may be out of proc
HRESULT
CResourceManager::Transfer(CResourceItem * pItem)
{
    ASSERT( pItem );
    DbgLog(( LOG_TRACE, g_ResourceManagerTraceLevel,
        TEXT("CResourceManager::Transfer(CResourceItem *pItem)") ));
    DbgTraceItem( pItem );

    ASSERT( pItem->GetState() == RS_ReleaseDone );  // DNS961114 My suspicion.  I want it proved.

    // if next holder not set, then set it
    if (pItem && ( pItem->GetNextHolder() == 0) ) {
        SelectNextHolder(pItem);
        if (pItem->GetNextHolder() == 0) {
            pItem->SetState(RS_Free);
            return S_OK;
        }
    }

    CRequestor * const pNewHolder = pItem->m_Requestors.GetByID((DWORD)pItem->GetNextHolder() );
    ASSERT( NULL != pNewHolder );

    // in this process?
    if (pNewHolder && ( pNewHolder->GetProcID() != m_procid) ) {
        // out of proc - signal owning process
        pItem->SetState(RS_ReleaseDone);
        pItem->SetProcess(pNewHolder->GetProcID());
        return SignalProcess(pNewHolder->GetProcID());
    } else if( pNewHolder ) {
        // in our process - call him
        HRESULT hr = pNewHolder->GetConsumer()->AcquireResource(pItem->GetID());
        if (FAILED(hr)) {
            pItem->SetState(RS_Error);
            pItem->SetHolder(0);
            pItem->SetNextHolder(0);
            return S_FALSE;
        }

        // he has it but may not have completed transition
        pItem->SetHolder(pNewHolder->GetID());
        pItem->SetNextHolder(0);
        pItem->SetProcess(0);

        if (VFW_S_RESOURCE_NOT_NEEDED == hr) {

            // he doesn't want the resource.
            // we think he has acquired it, so pretend he has just
            // released it
            NotifyRelease(pItem->GetID(), pNewHolder->GetConsumer(), FALSE);

        } else if (hr == S_FALSE) {

            // acquisition not yet complete
            pItem->SetState(RS_Acquiring);
        } else {
            // should be S_OK
            ASSERT(hr == S_OK);
            pItem->SetState(RS_Held);
        }
    }
    return S_OK;
}


// set the next holder to the highest priority of the current holders.
// if the actual holder is the highest, then set the next-holder to null.
HRESULT
CResourceManager::SelectNextHolder(CResourceItem* pItem)
{
    if (pItem->GetRequestCount() == 0) {
        pItem->SetHolder(0);
        pItem->SetNextHolder(0);
        return S_OK;
    }


    // need to compare everyone. Pick out the first and search for a
    // later one that is higher
    //
    // we want to only switch if the new one is higher, so we need to
    // avoid switching if they are indistinguishable - hence we should start
    // with the owner if there is one.

    RequestorID idHigh = pItem->GetHolder();
    if (idHigh == 0) {
        CRequestor * pReq = pItem->GetRequestor(0);
        ASSERT( NULL != pReq );
        idHigh = pReq->GetID();
    }

    // see if there is a later one with higher priority
    for (long i = 0; i < pItem->GetRequestCount(); i++) 
    {
        CRequestor * pRequestor = pItem->m_Requestors.Get(i);
        ASSERT( NULL != pRequestor );
        if( NULL == pRequestor )
            continue;
            
        RequestorID idNext = pRequestor->GetID();

        if ((idHigh != idNext) && ComparePriority(idHigh, idNext, pItem->GetID())) 
        {
            idHigh = idNext;
        }
    }

    // have picked a requestor - may be the only one, and may already
    // be the holder
    // exactly one requestor- must be highest but may already be holder
    if ((pItem->GetHolder() == 0) ||
        (pItem->GetHolder() != idHigh)) {

            pItem->SetNextHolder(idHigh);
    } else {
        // else highest must already be holder
        pItem->SetNextHolder(0);
    }

    return S_OK;
}

// returns TRUE if there is still a process with this id
BOOL
CResourceManager::CheckProcessExists(ProcessID procid)
{
    HANDLE hProc;
    hProc = OpenProcess(
                PROCESS_QUERY_INFORMATION,
                FALSE,
                procid);
    if (hProc == NULL) {
        if( ERROR_ACCESS_DENIED == GetLastError() ) {
            return TRUE; // this could happen if the other process is running 
                         // within a service and we don't have access rights.
                         // But this means that the process must still be alive, 
                         // so don't clean up its resources.
        }         
        else {
            return FALSE;
        }            
    }

    DWORD dwProc;
    BOOL bRet = TRUE;
    if (!GetExitCodeProcess(hProc, &dwProc)) {
        bRet = FALSE;
    } else if (dwProc != STILL_ACTIVE) {
        bRet = FALSE;
    }
    CloseHandle(hProc);

    return bRet;
}

// check the list of processes for any that have exited without cleanup and
// then clean them up. Returns TRUE if any dead processes were cleaned up.
BOOL
CResourceManager::CheckProcessTable(void)
{
    BOOL bChanges = FALSE;
    BOOL bRepeat;

    // repeat this from the start if we hit a bad process
    do {

        bRepeat = FALSE;
        for (long i = 0; i < m_pData->m_Processes.Count(); i++) {
            CProcess* pProc = (CProcess *) m_pData->m_Processes.GetListElem(i);
            ASSERT( NULL != pProc );
            if( pProc && ( !CheckProcessExists( pProc->GetProcID() ) ) ) {
            
                bChanges = TRUE;
                CleanupProcess(pProc->GetProcID());
                
                // now we need to start again since the list has changed
                bRepeat = TRUE;
                break;
            }
        }

    } while (bRepeat);

    // did we cleanup anything?
    return bChanges;
}


// remove a dead process
void
CResourceManager::CleanupProcess(ProcessID procid)
{
    // for each requestor in this process, check each resource
    BOOL bRepeat;
    // repeat from start if we remove an entry
    do {
        bRepeat = FALSE;
        
        for (long i = 0; i < m_pData->m_Resources.Count(); i++) 
        {
            CResourceItem * pItem = (CResourceItem *) m_pData->m_Resources.GetListElem( i );
            ASSERT( NULL != pItem );
            if( !pItem )
                continue;
                
            for( int j = 0; j < pItem->m_Requestors.Count(); j ++ )
            {
                CRequestor* preq = (CRequestor *) pItem->m_Requestors.GetListElem( j );
                ASSERT( NULL != preq );
                if( preq && preq->GetProcID() == procid )
                {
                    CleanupRequestor(preq, pItem->GetID()); // resource item specific
                    bRepeat = TRUE;
                    break;
                }
            }                
        }
               
    } while (bRepeat);


    // remove the process table entries
    do {
        bRepeat = FALSE;
        for (long i = 0; i < m_pData->m_Processes.Count(); i++) {
            CProcess* pProc = (CProcess *) m_pData->m_Processes.GetListElem(i);
            ASSERT( NULL != pProc );
            if( !pProc )
                continue;
                
            if (pProc && ( pProc->GetProcID() == procid ) ) {
                m_pData->m_Processes.Remove(pProc->GetHWND());
                bRepeat = TRUE;
                break;
            }
        }
    } while (bRepeat);
}

// remove a requestor that is part of a dead process and cancel
// its requests and any resources it holds
void
CResourceManager::CleanupRequestor(CRequestor* preq, LONG idResource)
{
    RequestorID reqid = preq->GetID();

    // check each resource to see if we have a request on it
    CResourceItem* pItem = (CResourceItem *) m_pData->m_Resources.GetByID(idResource);
    if( !pItem )
    {
        return;
    }
        
    for (long j = 0; j < pItem->GetRequestCount(); j++) 
    {
        CRequestor * pReq = pItem->GetRequestor(0);
        if( !pReq )
            continue;
        
        if (pReq->GetID() == reqid) 
        {
            // at this point the requestor must still be valid
            // since there is still an outstanding refcount in the
            // form of a requestid in the list

            // this will cancel his request and release a refcount
            // on the requestor

            // following is similar to calling
            // CancelRequest, but does not assume that the
            // pConsumer is valid in this process (since it is not!).


            // remove from list of requestors for this resource

            // release one refcount on this requestor
            pItem->m_Requestors.Release( reqid ); 

            // is he the current holder
            if (pItem->GetHolder() == reqid) {
                pItem->SetHolder(0);
                SelectNextHolder(pItem);
                pItem->SetState(RS_ReleaseDone);
            }


            // he may be the next-holder
            if (pItem->GetNextHolder() == reqid) {

                // select a new next-holder
                SelectNextHolder(pItem);
            }

            // re-signal the process if it needs transfering
            RequestorID tfrto = pItem->GetNextHolder();
            if (tfrto != 0) 
            {
                CRequestor* pnew = pItem->m_Requestors.GetByID((DWORD)tfrto);

                if( pnew )
                {
                    pItem->SetProcess(pnew->GetProcID());
                    SignalProcess(pnew->GetProcID());
                }
            }

            // there can be only one entry in the RequestorID list for
            // this id.
            break;
        }
    }

#ifdef DEBUG
    // should have released Requestor now in CancelRequest
    CResourceItem * pResItem = (CResourceItem *) m_pData->m_Resources.GetListElem( idResource ); 
    if( pResItem )
    {
        CRequestor* pRequestor = pResItem->m_Requestors.GetByID((DWORD)reqid);
        ASSERT( NULL == pRequestor );
    }        
#endif
}

//////////////////////////////////////
//
// COffsetList methods

//
// AddElemToList
// 
COffsetListElem * COffsetList::AddElemToList( )
{
    HRESULT hr = S_OK;
    DWORD   offsetNewElem = 0;

    //
    // first check the recycle list
    //
    COffsetList * pRecycle = CResourceManager::m_pData->GetRecycleList(m_idElemSize);
    ASSERT( pRecycle );
    if( pRecycle && ( 0 < pRecycle->m_lCount ) )
    {
        //
        // we've got already commited memory we can use, recycle the tail element
        // we pass FALSE here to indicate that we don't want this element recycled
        //
        COffsetListElem * pNewElem = pRecycle->RemoveListElem( pRecycle->m_lCount-1, FALSE );
        offsetNewElem = ProcAddressToOffset( m_idElemSize, pNewElem );
        
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: Recycling element at offset 0x%08lx. LIST ID = %ld")
              , offsetNewElem
              , m_idElemSize ) );
    }   
    else 
    {
        //
        // else we must commit a new item
        //
        hr = CommitNewElem( &offsetNewElem );
    }
    
    if( SUCCEEDED( hr ) )
    {
        if( 0 == m_lCount )
        {
            DbgLog( ( LOG_TRACE
                  , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                  , TEXT("COffsetListElem: AddElemToList is adding 1st elem to list (offset = 0x%08lx). LIST ID = %ld.")
                  , offsetNewElem
                  , m_idElemSize ) );
                  
            ASSERT( 0 == m_offsetHead );
            m_offsetHead = offsetNewElem;
        }
        else
        {
            COffsetListElem * pElem = GetListElem( m_lCount-1 );
            ASSERT( pElem );
            pElem->m_offsetNext = offsetNewElem;
                
            DbgLog( ( LOG_TRACE
                  , DYNAMIC_LIST_DETAILS_LOG_LEVEL
                  , TEXT("COffsetListElem: AddElemToList is linking old tail at = 0x%08lx to new tail at offset = 0x%08lx.(LIST ID = %ld)")
                  , pElem
                  , offsetNewElem
                  , m_idElemSize ) );
        }
        m_lCount++;
    }

    if( FAILED( hr ) )
        return NULL;
    else
        return OffsetToProcAddress( m_idElemSize, offsetNewElem );
}

//
// AddExistingElemToList - Used for building our recycle list.
//
COffsetListElem * COffsetList::AddExistingElemToList( DWORD offsetNewElem  )
{
    DbgLog( ( LOG_TRACE
          , DYNAMIC_LIST_DETAILS_LOG_LEVEL
          , TEXT("COffsetListElem: Entering AddElemToList for existing elem (no alloc case) LIST ID = %ld")
          , m_idElemSize ) );
          
    // first clear the next pointer
    COffsetListElem * pNewElem = OffsetToProcAddress( m_idElemSize, offsetNewElem );
    ASSERT( pNewElem );
    
    pNewElem->m_offsetNext = 0; // set end of list value, -1?
    
    // don't allocate/commit a new item, just add the new offset element to this list
    if( 0 == m_lCount )
    {
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("CResourceManager: AddElemToList (no alloc version) adding head element at offset 0x%08lx (LIST ID = %ld)")
              , offsetNewElem
              , m_idElemSize ) );
        ASSERT( 0 == m_offsetHead );
        //ASSERT( 0 != offsetNewElem ); only if we disallow a 0 offset for 1st elem
        m_offsetHead = offsetNewElem;
    }
    else
    {
        COffsetListElem * pElem = GetListElem( m_lCount-1 );

        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: AddElemToList (no alloc version) adding new tail element at offset 0x%08lx (previous tail offset 0x%08lx). LIST ID = %ld")
              , offsetNewElem
              , pElem
              , m_idElemSize ) );
              
        pElem->m_offsetNext = offsetNewElem;
    }
    m_lCount++;

    // return the actual compensated address for this process
    return OffsetToProcAddress( m_idElemSize, offsetNewElem );
}

//
// GetListElem - get the i-th list elem
//
COffsetListElem * COffsetList::GetListElem( long lElem )
{
    ASSERT( lElem < m_lCount && lElem >= 0 );
    
    if ((lElem < 0) || (lElem >= m_lCount)) 
    {
        return NULL;
    } 
    
    // how do we tell if offsetHead is bogus?
    COffsetListElem * pElem = OffsetToProcAddress( m_idElemSize, m_offsetHead );
    for( int i = 0; i < lElem && pElem; i ++ )
    {
         pElem = OffsetToProcAddress( m_idElemSize, pElem->m_offsetNext );
    }
    return pElem;
}

HRESULT COffsetList::CommitNewElem( DWORD * poffsetNewElem )
{
    ASSERT( poffsetNewElem );
    
    *poffsetNewElem = 0;
    
    DbgLog( ( LOG_TRACE
          , DYNAMIC_LIST_DETAILS_LOG_LEVEL
          , TEXT( "COffsetList: Entering CommitNewElem for element #%ld, LIST ID = %ld")
          , CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize)
          , m_idElemSize ) );

    if( CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize) > ( g_aMaxAllocations[m_idElemSize] ) )
    {
        DbgLog( ( LOG_ERROR
              , 3
              , TEXT( "COffsetList: Failed to commit new element. LIST ID = %ld")
              , m_idElemSize ) );
        return E_OUTOFMEMORY;
    }
    //
    // determine the start and end offsets (from the page boundary!!) for the next allocation
    // to see whether we need to commit a new page(s) or not
    // Note that these offsets all relative to the start allocation address for that element
    // size id, since we initially allocate space for each element type.
    //
    DWORD offsetAllocStart = 0;
    if( 0 == m_idElemSize )
    {
        // first elem id must account for initial static data offset
        offsetAllocStart = CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize) * g_aElemSize[m_idElemSize]
                            + sizeof(CResourceData);
    }
    else
    {                            
        // else just use allocation current allocation index for this element's size
        offsetAllocStart = CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize) * g_aElemSize[m_idElemSize];
    }
                            
    DWORD offsetAllocEnd = offsetAllocStart + g_aElemSize[m_idElemSize];
    
    PVOID pCommit = (PVOID) OffsetToProcAddress( m_idElemSize
                                               , CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize) * g_aElemSize[m_idElemSize] );

    //
    // get overlap for end page allocation
    //
    DWORD dwPageOverlap = offsetAllocEnd % ( g_dwPageSize * PAGES_PER_ALLOC );
    HRESULT hr = S_OK;
        
    // no need to commit unless...
    //      a) we're beyond the page(s) commited on 1st load for this process
    // and  b) we're about to allocate from an uncommitted page
    if( ( offsetAllocEnd > ( g_dwPageSize * PAGES_PER_ALLOC ) ) &&
        ( 0 < dwPageOverlap ) &&
        ( dwPageOverlap <= g_aElemSize[m_idElemSize] ) )
    {
        // we need to commit                
        DWORD dwNextPageIndex = CResourceManager::m_pData->GetNextPageIndex(m_idElemSize);
        
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT( "COffsetList: ELEM ID %ld. Commiting new page (commitment #%ld) of size %ld page(s) at address 0x%p (rounded up to next page)")
              , m_idElemSize
              , dwNextPageIndex
              , PAGES_PER_ALLOC
              , pCommit ) );
              
              
        // VirtualAlloc will do the work of rounding down to a page boundary and
        // commiting up through the end page              
        PVOID pv = VirtualAlloc( (PVOID) pCommit
                               , PAGES_PER_ALLOC * g_dwPageSize
                               , MEM_COMMIT
                               , PAGE_READWRITE );
        if( pv )
        {
            dwNextPageIndex++;
            CResourceManager::m_pData->SetNextPageIndex(m_idElemSize, dwNextPageIndex);
        }
        else
        {
            //ASSERT( pv ); don't assert on out of memory conditions, right??
            DWORD dwError = GetLastError();
            DbgLog( ( LOG_ERROR
                  , 1
                  , TEXT( "COffsetList: ERROR VirtualAlloc failed 0x%08lx. ELEM TYPE = %ld")
                  , dwError
                  , m_idElemSize ) );
            hr = E_OUTOFMEMORY;
        }
    }
    if( SUCCEEDED( hr ) )
    {
        // init elem's next offset member
        ( ( COffsetListElem * ) ( pCommit ) )->m_offsetNext = 0;
    
        // save off the offset for this element to return
        DWORD offsetElem = CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize) * g_aElemSize[m_idElemSize];
        *poffsetNewElem = offsetElem;

        // update the next allocation index    
        DWORD dwIndex = CResourceManager::m_pData->GetNextAllocIndex(m_idElemSize);
        dwIndex++;
        CResourceManager::m_pData->SetNextAllocIndex (m_idElemSize, dwIndex) ;
    }
    return hr;
}

COffsetListElem * COffsetList::RemoveListElem( long i, BOOL bRecycle )
{
    COffsetListElem * pElem = GetListElem( i );

    COffsetList * pRecycle = CResourceManager::m_pData->GetRecycleList(m_idElemSize);

    DWORD offsetElem = ProcAddressToOffset( m_idElemSize, pElem );

    ASSERT( 0 < m_lCount );
    if( 0 == m_lCount )
        return 0;
        
    // remove from current list - easy if at end
    if( 1 == m_lCount )
    {
        ASSERT( 0 == i );
        m_offsetHead = 0; // remove last element ... set to default end of list value?
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetList: RemoveListElem removing first element. ELEM ID = %ld")
              , m_idElemSize));
    }
    else if (i < ( m_lCount - 1 ) ) 
    {
        // list length must be > 1 but we're not removing the last element
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: RemoveListElem removing element %d from %d element list. ELEM ID = %ld")
              , i
              , m_lCount
              , m_idElemSize ) );
        //
        // in this case we've got a list size > 1, and we're not the last element
        // so we just copy the last into this position and update links
        //
        
        // get tail item        
        COffsetListElem * pLastElem = GetListElem( m_lCount - 1 );
        ASSERT( pLastElem );
        
        // get item before tail, to be new tail
        COffsetListElem * pNewLastElem = GetListElem( m_lCount - 2);
        ASSERT( pNewLastElem );
        
#ifdef DEBUG        
        DWORD offsetLastElem = ProcAddressToOffset( m_idElemSize, pLastElem );        
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: RemoveListElem current tail offset = 0x%08lx. ELEM ID = %ld")
              , (DWORD) offsetLastElem
              , m_idElemSize ) );

        DWORD offsetNewLastElem = ProcAddressToOffset( m_idElemSize, pNewLastElem );        
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: RemoveListElem new tail offset = 0x%08lx. ELEM ID = %ld")
              , (DWORD) offsetNewLastElem
              , m_idElemSize ) );
#endif  
            
        DWORD offsetNext = 0;
        if( 2 < m_lCount )
        {
            // 
            // if this won't be the last element save the offset for the next
            //
            offsetNext = pElem->m_offsetNext;  // save before we overwrite
        }
        
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: RemoveListElem new next offset = 0x%08lx. ELEM ID = %ld")
              , offsetNext
              , m_idElemSize ) );
        
                
        // there are more entries after this one - copy them up
        CopyMemory(
            (BYTE *) pElem,
            (BYTE *) pLastElem,
            g_aElemSize[m_idElemSize]);
        
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: RemoveListElem copying elem address = 0x%08lx to address 0x%08lx. ELEM ID = %ld")
              , pLastElem
              , pElem
              , m_idElemSize ) );
            
        pNewLastElem->m_offsetNext = 0; // is there a better end of list value?
        pElem->m_offsetNext = offsetNext;

        if( bRecycle )
        {
            // pass the Recycle list the old tail element offset for reuse
            offsetElem = ProcAddressToOffset( m_idElemSize, pLastElem );
        }             
    }
    else 
    {
        // list length is > 1 and we're removing the last item
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: RemoveListElem removing last element (%ld) from %ld element list. ELEM ID = %ld")
              , i
              , m_lCount
              , m_idElemSize ) );

        // this is the tail item. set previous as new tail and send to recycle list
        COffsetListElem * pPrevElem = GetListElem( i - 1 );
        pPrevElem->m_offsetNext = 0; // set to default end of list value
    }
    
    //
    // update list length now that we've removed the item
    //
    m_lCount--;
               
    if( bRecycle )
    {  
        DbgLog( ( LOG_TRACE
              , DYNAMIC_LIST_DETAILS_LOG_LEVEL
              , TEXT("COffsetListElem: Adding element at offset 0x%08lx to Recycle list.")
              , offsetElem) );
              
        // now add this element to our recycle list
        pRecycle->AddExistingElemToList( offsetElem );
    }
     
    return OffsetToProcAddress( m_idElemSize, offsetElem );
}

//
// Convert an element offset to the corresponding process address based on the 
// memory map load address
//
COffsetListElem * OffsetToProcAddress( DWORD idElemSize, DWORD offsetElem )
{
    DWORD_PTR dwProcAddress = CResourceManager::m_aoffsetAllocBase[idElemSize];
    dwProcAddress += offsetElem;
    
    return (COffsetListElem * ) dwProcAddress;
}

DWORD ProcAddressToOffset( DWORD idElemSize, COffsetListElem * pElem )
{
    DWORD_PTR offset = (DWORD_PTR) pElem;
    offset -= CResourceManager::m_aoffsetAllocBase[idElemSize];
    
    return (DWORD)offset;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\seekprxy.cpp ===
// Copyright (c) 1996 - 1998  Microsoft Corporation.  All Rights Reserved.

// Proxy that looks like an IMediaSeeking, but uses an IMediaPosition
// (and possibly an IMediaSeeking in places) to provide the bulk of
// the functionality.

#include <streams.h>
#include "SeekPrxy.h"

CMediaSeekingProxy::CMediaSeekingProxy( IBaseFilter * pF, IMediaPosition * pMP, IMediaSeeking * pMS, HRESULT *phr )
: CUnknown( NAME("CMediaSeekingProxy"), 0 )
, m_TimeFormat( TIME_FORMAT_MEDIA_TIME )
, m_pFilter(pF)
, m_pMediaSeeking(pMS)
, m_pMediaPosition(pMP)
, m_bUsingPosition(pMP != 0)
{
    // ASSERT( if we have pMS, it had better be the same object as pMP )
    ASSERT( !pMS || IsEqualObject( pMS, pMP ) );
    ASSERT( m_pMediaPosition );
    m_pFilter->AddRef();
}

CMediaSeekingProxy::~CMediaSeekingProxy()
{
    if (m_pFilter) m_pFilter->Release();
}

IMediaSeeking *
CMediaSeekingProxy::CreateIMediaSeeking( IBaseFilter * pF, HRESULT *phr )
{
    // Internal function: ASSERT the conditions rather than checking them.
    ASSERT( pF );

    HRESULT hr;
    IMediaSeeking  * pResult = 0;

    IMediaSeeking  * pMS     = 0;
    IMediaPosition * pMP     = 0;

    hr = pF->QueryInterface( IID_IMediaSeeking, (void**) &pMS );
    if (SUCCEEDED(hr) && pMS->IsFormatSupported( &TIME_FORMAT_MEDIA_TIME ) == S_OK )
    {
        pResult = pMS;
    }
    else
    {
        ASSERT( SUCCEEDED(hr) || (hr == E_NOINTERFACE && pMS == 0) );

        hr = pF->QueryInterface( IID_IMediaPosition, (void**) &pMP );
        ASSERT( hr == S_OK || pMP == 0 );

        // This is a protection from CPosPassThru, which will return
        // an interface pointer from QI even if the thing at the other
        // end doesn't support IMediaPosition.  CPosPassThru will return
        // E_NOINTERFACE in such circumstances.
        if (SUCCEEDED(hr))
        {
            double d;
            HRESULT hrTmp = pMP->get_Rate(&d);
            if (hrTmp == E_NOINTERFACE) hr = hrTmp;
            else { ASSERT(SUCCEEDED(hrTmp) || hrTmp == E_NOTIMPL); }
        }

        if (SUCCEEDED(hr))
        {
            pResult = new CMediaSeekingProxy( pF, pMP, pMS, &hr );
            if (FAILED(hr))
            {
                if (pResult)
                {
                    delete pResult;
                    pResult = 0;
                }
            }
            else if (!pResult)
            {
                hr = E_OUTOFMEMORY;
            }
        }
    }

    if (SUCCEEDED(hr))
    {
        const DWORD count = pResult->AddRef();
    }

    if (pMS) pMS->Release();
    if (pMP) pMP->Release();

    *phr = hr;

    return pResult;
}

STDMETHODIMP CMediaSeekingProxy::GetCapabilities( DWORD * pCapabilities )
{
    HRESULT hr;

    if (m_bUsingPosition)
    {
        DWORD dwCaps = 0;
        LONG l;

        // instead of determining whether the stream can seek by using
        // CanSeekBackward/Forward, just assume it can if it can
        // return a duration because get_Duration is a better tested
        // code path.
        //
        // the videomixer base class and CMultiPinPosPassThru crash on
        // any IMediaPosition method if anything fails (through
        // ::SetPins). But the Merlin help thing shipped on NEC OEM
        // machines does not crash on get_Duration because they return
        // E_NOTIMPL if only one pin is connected. better than
        // crashing
        REFTIME rtDur;
        if ( m_pMediaPosition->get_Duration(&rtDur) == S_OK) {
            dwCaps |= (AM_SEEKING_CanSeekForwards | AM_SEEKING_CanSeekBackwards);
        }
//         if ( m_pMediaPosition->CanSeekForward(&l) == S_OK && l == OATRUE) dwCaps |= AM_SEEKING_CanSeekForwards;
//         if ( m_pMediaPosition->CanSeekBackward(&l) == S_OK && l == OATRUE) dwCaps |= AM_SEEKING_CanSeekBackwards;

        if (dwCaps) dwCaps |= AM_SEEKING_CanSeekAbsolute;
        dwCaps |= AM_SEEKING_CanGetStopPos;    // Assumption
        dwCaps |= AM_SEEKING_CanGetDuration;   // Assumption
        *pCapabilities = dwCaps;
        hr = S_OK;
    }
    else
    {
        ASSERT( m_pMediaSeeking );
        hr = m_pMediaSeeking->GetCapabilities(pCapabilities);
    }

    return hr;
}


STDMETHODIMP CMediaSeekingProxy::CheckCapabilities( DWORD * pCapabilities )
{
    DWORD dwCaps;
    HRESULT hr = GetCapabilities( &dwCaps );
    if (SUCCEEDED(hr))
    {
        dwCaps &= *pCapabilities;
        hr =  dwCaps ? ( dwCaps == *pCapabilities ? S_OK : S_FALSE ) : E_FAIL;
        *pCapabilities = dwCaps;
    }
    else *pCapabilities = 0;

    return hr;
}


STDMETHODIMP CMediaSeekingProxy::GetTimeFormat( GUID * pFormat )
{
    ValidateWritePtr( pFormat, sizeof(GUID) );
    CheckPointer( pFormat, E_POINTER );
    HRESULT hr = NOERROR;

    if (m_pMediaSeeking
        && SUCCEEDED(m_pMediaSeeking->GetTimeFormat( pFormat ))
       )
    {
        // If we are trying to use Positioning, then our
        // Seeking had better be in time format none or
        // media time.
        if (m_bUsingPosition)
        {
            if (*pFormat == TIME_FORMAT_NONE)
            {
                *pFormat = TIME_FORMAT_MEDIA_TIME;
            }
            else if (*pFormat != TIME_FORMAT_MEDIA_TIME)
            {
                // I can't really seek in this state!
                DbgBreak("Dilemma! Supposed to be using IMediaPosition, but IMediaSeeking format is not NONE");
                *pFormat = TIME_FORMAT_NONE;
                hr = E_UNEXPECTED;
            }
        }
    }
    else
    {
        *pFormat = m_TimeFormat;
    }

    return hr;
}

STDMETHODIMP CMediaSeekingProxy::SetTimeFormat( const GUID * pFormat )
{
    HRESULT hr;

    if (IsStopped() != S_OK) hr = VFW_E_NOT_STOPPED;
    else if ( *pFormat == TIME_FORMAT_MEDIA_TIME || *pFormat == TIME_FORMAT_NONE )
    {
        if (m_pMediaSeeking) m_pMediaSeeking->SetTimeFormat( &TIME_FORMAT_NONE );
	m_bUsingPosition = TRUE;
        m_TimeFormat = TIME_FORMAT_MEDIA_TIME;
        hr = NOERROR;
    }
    else if (m_pMediaSeeking)
    {
        hr = m_pMediaSeeking->SetTimeFormat( pFormat );
        if (SUCCEEDED(hr))
	{
	    m_bUsingPosition = FALSE;
	    m_TimeFormat = *pFormat;
	}
    }
    else hr = E_INVALIDARG;

    return hr;
}

// returns S_OK if mode is supported, S_FALSE otherwise
STDMETHODIMP CMediaSeekingProxy::IsFormatSupported(const GUID * pFormat)
{
    ASSERT( m_pMediaPosition );
    return /* m_pMediaPosition && */ IsFormatMediaTime(pFormat)
           ? S_OK
           : m_pMediaSeeking
             ? m_pMediaSeeking->IsFormatSupported(pFormat)
             : S_FALSE;
}

// returns S_OK if mode is supported, S_FALSE otherwise
STDMETHODIMP CMediaSeekingProxy::IsUsingTimeFormat(const GUID * pFormat)
{
    GUID LclFormat;
    HRESULT hr = GetTimeFormat( &LclFormat );
    return (SUCCEEDED(hr) && *pFormat == LclFormat) ? S_OK : S_FALSE;
}

// Is there a prefered format?
STDMETHODIMP CMediaSeekingProxy::QueryPreferredFormat(GUID *pFormat)
{
    *pFormat = TIME_FORMAT_MEDIA_TIME;
    return NOERROR;
}

STDMETHODIMP CMediaSeekingProxy::ConvertTimeFormat
(
   LONGLONG * pTarget, const GUID * pTargetFormat,
   LONGLONG    Source, const GUID * pSourceFormat
)
{
    HRESULT hr;

    if (!pTargetFormat) pTargetFormat = &m_TimeFormat;
    if (!pSourceFormat) pSourceFormat = &m_TimeFormat;

    // We want to say if target format == source format then just copy the value.
    // But either format pointer may be null, implying use the current format.
    // Hence the conditional operators which WILL return a pointer to a format,
    // which can then be compared.
    if ( *pTargetFormat == *pSourceFormat )
    {
        *pTarget = Source;
        hr = NOERROR;
    }
    else if (m_pMediaSeeking) hr = m_pMediaSeeking->ConvertTimeFormat( pTarget, pTargetFormat, Source, pSourceFormat );
    else hr = E_NOTIMPL;

    return hr;
}

STDMETHODIMP CMediaSeekingProxy::SetPositions
( LONGLONG * pCurrent, DWORD CurrentFlags
, LONGLONG * pStop, DWORD StopFlags )
{
    HRESULT hr;

    BOOL bCurrent = FALSE, bStop = FALSE;
    LONGLONG llCurrent = 0, llStop = 0;
    int PosBits;

    if (m_bUsingPosition)
    {
        REFTIME dblCurrent, dblStop;

        PosBits = CurrentFlags & AM_SEEKING_PositioningBitsMask;
        if (PosBits)
        {
            bCurrent = TRUE;
            if (PosBits == AM_SEEKING_RelativePositioning)
            {
                hr = m_pMediaPosition->get_CurrentPosition( &dblCurrent );
                if (FAILED(hr)) goto fail;
                llCurrent = REFERENCE_TIME( 1e7 * dblCurrent + 0.5 ) + *pCurrent;
                dblCurrent += double(*pCurrent) / 1e7;
            }
            else
            {
                llCurrent = *pCurrent;
                dblCurrent = double(llCurrent) / 1e7;
            }
        }

        PosBits = StopFlags & AM_SEEKING_PositioningBitsMask;
        if (PosBits)
        {
            bStop = TRUE;
            if (PosBits == AM_SEEKING_IncrementalPositioning)
            {
                if (!bCurrent)
                {
                    hr = m_pMediaPosition->get_CurrentPosition( &dblCurrent );
                    if (FAILED(hr)) goto fail;
                    llCurrent = REFERENCE_TIME( 1e7 * dblCurrent + 0.5 ) + *pCurrent;
                    dblStop = dblCurrent + double(*pCurrent) / 1e7;
                }
                else
                {
                    llCurrent = *pCurrent;
                    dblStop = double(llCurrent) / 1e7;
                }
            }
            else
            {
                if (PosBits == AM_SEEKING_RelativePositioning)
                {
                    hr = m_pMediaPosition->get_StopTime( &dblStop );
                    if (FAILED(hr)) goto fail;
                    llStop = REFERENCE_TIME( 1e7 * dblStop + 0.5 ) + *pStop;
                    dblStop += double(*pStop) / 1e7;
                }
                else
                {
                    llStop = *pStop;
                    dblStop = double(llStop) / 1e7;
                }
            }
        }

        if (bStop)
        {
            hr = m_pMediaPosition->put_StopTime( dblStop );
        }
        else hr = NOERROR;

        if (bCurrent)
        {
            HRESULT hr2;
            hr2 = m_pMediaPosition->put_CurrentPosition( dblCurrent );
            if (SUCCEEDED(hr) && FAILED(hr2)) hr = hr2;
        }

        if (FAILED(hr)) goto fail;

        if (bStop && (StopFlags & AM_SEEKING_ReturnTime))
        {
            *pStop = llStop;
        }

        if (bCurrent && (CurrentFlags & AM_SEEKING_ReturnTime))
        {
            *pCurrent = llCurrent;
        }

    }
    else
    {
        ASSERT(m_pMediaSeeking);
        hr = m_pMediaSeeking->SetPositions( pCurrent, CurrentFlags, pStop, StopFlags );
    }

fail:
    return hr;
}

// Get CurrentPosition & StopTime
// Either pointer may be null, implying not interested
STDMETHODIMP CMediaSeekingProxy::GetPositions( LONGLONG * pCurrent, LONGLONG * pStop )
{
    ASSERT( pCurrent || pStop );    // Sanity check

    HRESULT hrResult;

    if (m_bUsingPosition)
    {
        HRESULT hrCurrent, hrStop;

        if (pCurrent)
        {
            hrCurrent = GetCurrentPosition( pCurrent );
        }
        else hrCurrent = NOERROR;

        if (pStop)
        {
            hrStop = GetStopPosition( pStop );
        }
        else hrStop = NOERROR;


        if (SUCCEEDED(hrCurrent))
        {
            if (SUCCEEDED(hrStop))  hrResult = S_OK;
            else                    hrResult = hrStop;
        }
        else
        {
            if (SUCCEEDED(hrStop))  hrResult = hrCurrent;
            else                    hrResult = hrCurrent == hrStop ? hrCurrent : E_FAIL;
        }
    }
    else
    {
        ASSERT(m_pMediaSeeking);
        hrResult = m_pMediaSeeking->GetPositions( pCurrent, pStop );
    }

    return hrResult;
}

STDMETHODIMP CMediaSeekingProxy::GetCurrentPosition( LONGLONG * pCurrent )
{
    HRESULT hr;

    if (m_bUsingPosition)
    {
        double dCurrent;
        hr = m_pMediaPosition->get_CurrentPosition( &dCurrent );
        if (SUCCEEDED(hr))
        {
            *pCurrent = LONGLONG(1e7 * dCurrent + 0.5);
        }
    }
    else
    {
        ASSERT(m_pMediaSeeking);
        hr = m_pMediaSeeking->GetCurrentPosition( pCurrent );
    }

    return hr;
}

STDMETHODIMP CMediaSeekingProxy::GetStopPosition( LONGLONG * pStop )
{
    HRESULT hr;

    if (m_bUsingPosition)
    {
	double dStop;
	hr = m_pMediaPosition->get_StopTime( &dStop );
	if (SUCCEEDED(hr))
	{
	    *pStop = LONGLONG(1e7 * dStop + 0.5);
	}
    }
    else
    {
        ASSERT(m_pMediaSeeking);
        hr = m_pMediaSeeking->GetStopPosition( pStop );
    }

    return hr;
}

// GetDuration
// NB: This is NOT the Duration of the selection, this is the "maximum
// possible playing time"
STDMETHODIMP CMediaSeekingProxy::GetDuration(LONGLONG *pDuration)
{
    HRESULT hr;

    if (m_bUsingPosition)
    {
	double dDuration;
	hr = m_pMediaPosition->get_Duration( &dDuration );

	if (SUCCEEDED(hr))
	{
	    *pDuration = LONGLONG(1e7 * dDuration + 0.5);
	}
    }
    else
    {
        ASSERT(m_pMediaSeeking);
        hr = m_pMediaSeeking->GetDuration(pDuration);
    }

    return hr;
}

STDMETHODIMP CMediaSeekingProxy::GetAvailable( LONGLONG * pEarliest, LONGLONG * pLatest )
{
    if (m_bUsingPosition)
    {
	*pEarliest = 0;
	return GetDuration(pLatest);
    } else {
	return m_pMediaSeeking->GetAvailable(pEarliest, pLatest);
    }
}

STDMETHODIMP CMediaSeekingProxy::GetPreroll(LONGLONG *pllPreroll)
{
    HRESULT hr;
    if (m_bUsingPosition)
    {
        double dPreroll;
        hr = m_pMediaPosition->get_PrerollTime(&dPreroll);
        if (SUCCEEDED(hr)) *pllPreroll = LONGLONG(dPreroll * 1e7 + 0.5);
    }
    else hr = m_pMediaSeeking->GetPreroll(pllPreroll);

    return hr;
}

// Rate stuff
STDMETHODIMP CMediaSeekingProxy::SetRate(double dRate)
{
    return m_bUsingPosition ? m_pMediaPosition->put_Rate(dRate) : m_pMediaSeeking->SetRate(dRate);
}

STDMETHODIMP CMediaSeekingProxy::GetRate(double * pdRate)
{
    return m_bUsingPosition ? m_pMediaPosition->get_Rate(pdRate) : m_pMediaSeeking->GetRate(pdRate);
}

/* Internal stuff */

HRESULT CMediaSeekingProxy::IsStopped()
{
    HRESULT hr = S_FALSE; // Assume the worst

    FILTER_STATE fs;
    if SUCCEEDED(m_pFilter->GetState(0, &fs) )
    {
        if ( fs == State_Stopped ) hr = S_OK;
    }
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\rsrcmgr.h ===
// Copyright (c) 1994 - 1999  Microsoft Corporation.  All Rights Reserved.

#ifndef _RSRCMGR_H
#define _RSRCMGR_H


//
// Definition of a Resource Manager implemented as part of the plug-in
// distributor.
//
// We are part of the existing plug-in rather than a new object so as to
// share a worker thread.
//

//
// All of the interesting data is held in a shared memory segment protected
// by a mutex. The data structure in the shared memory block is a CResourceData.
// Static methods on CResourceManager are called via the class factory
// template on DLL load and unload to init the shared memory.
//
// For each requestor we store his process id. Each instance of the resource
// manager enters itself in the table, even if there is already one for
// that process (saves worries about what happens when some go away). If
// we need to give or take a resource to/from a requestor that is out of
// our process, we signal (any) one of the manager instances in that process,
// using SignalProcess(). The signals are picked up on the PID worker thread
// and (in OnThreadMessage) we look for any resource that needs our attention.
//
// Process signalling mechanism is PostThreadMessage.
//
//
// Update to support dynamic shared memory commitment...
//
// The shared memory mechanism has been updated to commit shared
// memory on an as needed basis rather than statically, up to the
// maximum size reserved for the mapped file. For each of the
// (3) dynamic lists, we use a linked list of offsets from the 
// process-specific shared memory load address. Deleted list items are put 
// int a recycle list for reuse. List element memory is commited on a 
// per-page basis. Because of the much larger size of the CResourceItem list
// we use 2 separate lists, a large item list for CResourceItem elements currently
// 168 bytes) and a small item list for the larger of a CRequestor or CProcess item (currently
// at 24 bytes).
// 


// Mutex name that all instances use for sync (not localisable)
#define strResourceMutex          TEXT("AMResourceMutex2")
#define strResourceMappingPrefix  TEXT("AMResourceMapping2")


// currently the size for small elems is 24 bytes and 168 bytes for large items
#define PAGES_PER_ALLOC 1	// how many pages to commit at a time, same value used for all elem types
#define MAX_ELEM_SIZES  2   // how many different element sizes are we dealing with?
#define ELEM_ID_SMALL   0	// ids for determing which elem size we're dealing with
#define ELEM_ID_LARGE   1

// NOTE: MAX_PAGES_xxx should be a multiple of PAGES_PER_ALLOC
#define MAX_PAGES_ELEM_ID_SMALL ( 3 * PAGES_PER_ALLOC )  // allows 511 small elems
#define MAX_PAGES_ELEM_ID_LARGE ( 11 * PAGES_PER_ALLOC ) // allows 267 large elements


// forward definitions
class COffsetList;
class COffsetListElem;
class CResourceData;

// assume same size list elements to simplify allocation/deallocations
extern DWORD g_dwElemSize;

// Mutex object. Construtor opens/creates the mutex and
// destructor close the handle. Use Lock/Unlock to Wait and Release
// the mutex (or CAutoMutex)
class CAMMutex
{
    HANDLE m_hMutex;
    bool m_fMutexNamed;

public:
    CAMMutex(LPCTSTR pName) {

        m_fMutexNamed = true;

        // Create a NAMED unowed mutex with the default security descriptor.
        m_hMutex = CreateMutex(NULL, FALSE, pName);

        // CreateMutex() returns NULL if an error occurs.
        if (!m_hMutex) {
            m_fMutexNamed = false;

            // SECURITY: We try to create an unnamed mutex if the named 
            // mutex cannot be created.  We cannot create a named mutex
            // if another user has already created a named object with 
            // the same name as our mutex.  There are several reasons 
            // why this can occur.  First, this occurs if two different users
            // start Direct Show applications in the same session.  For 
            // example, this case occurs if a user starts GraphEdt.exe and
            // then uses the Run As command to start GraphEdt.exe as a 
            // different user.  This also occurs if a Windows service uses 
            // Direct Show and the console user starts a Direct Show 
            // application (this may change for Longhorn).  The second reason
            // an object with the same name already exists is an attacker is 
            // squatting on it.  An attacker squats on an object by creating an
            // object with the same name as our object and then he prevents us from 
            // using the object he created.  The attacker does this because he wants
            // to cause an application to malfunction or he wants to degrade an 
            // applications functionality.

            // Create an UNNAMED unowed mutex with the default security descriptor.
            m_hMutex = CreateMutex(NULL, FALSE, NULL);
        }
    }

    ~CAMMutex() {
        if (m_hMutex) {
            CloseHandle(m_hMutex);
        }
    }

    void Lock() {
        WaitForSingleObject(m_hMutex, INFINITE);
    }

    void Unlock() {
        ReleaseMutex(m_hMutex);
    }

    bool Exists() const
    {
        return (NULL != m_hMutex);
    }

    bool IsMutexNamed() const 
    {
        return m_fMutexNamed;
    }
};


// equivalent of CAutoLock for mutex objects. Will lock the object
// in the constructor and unlock in the destructor, thus ensuring that
// you don't accidentally hold the lock through an error exit path.
class CAutoMutex {
    CAMMutex* m_pMutex;
public:
    CAutoMutex(CAMMutex* pMutex)
      : m_pMutex(pMutex)
    {
        m_pMutex->Lock();
    }

    ~CAutoMutex() {
        m_pMutex->Unlock();
    }
};


// --- begin shared memory classes ---

// All of the following classes are instantiated in a global shared memory
// block. This means
// -- no virtual functions
// -- no internal pointers (local process addresses change)
// -- fixed size
// -- no constructor or destructor called
// -- Init method used to initialise.
// The shared memory is a CResourceData. It contains the following
// objects
//      CResourceList
//      CResourceItem
//      CRequestorList
//      CRequestor
//      CProcessList
//      CProcess


// for all three IDs here, 0 is an invalid value

// 1-based id for a given requesting object
typedef long RequestorID;

// 1-based id identifying the resource
typedef long ResourceID;

// process id returned from GetCurrentProcessID
typedef DWORD ProcessID;

//
// we use a static array for the resource name string and always treat the string as ANSI
// 
const int Max_Resource_Name             = 128;

//
// COffsetListElem is a base class for an element in our linked list of
// offsets. 
//
class COffsetListElem
{
    friend class CResourceList;
    friend class CProcessList;
    friend class CRequestorList;
    friend class COffsetList;

private:

    DWORD      m_offsetNext; 
};

//
// COffsetList is a base class for a linked list of offsets, contains 
// standard list processing stuff.
//
class COffsetList
{
    friend class CResourceList;
    friend class CProcessList;
    friend class CRequestorList;
    friend class CResourceData;

private:

    DWORD   m_idElemSize;
    DWORD   m_offsetHead;
    long    m_lCount;

public:

    HRESULT CommitNewElem( DWORD * poffsetNewElem ); 
    COffsetListElem* GetListElem( long i );
    COffsetListElem* AddElemToList( ); 
    COffsetListElem* AddExistingElemToList( DWORD offsetNewElem ); 
    COffsetListElem* RemoveListElem( long i, BOOL bRecycle = TRUE );
    long Count(void) const {
        return m_lCount;
    };
};

class CRequestor :
    public COffsetListElem
{
    IResourceConsumer* m_pConsumer;
    IUnknown* m_pFocusObject;
    ProcessID m_procid;
    long m_cRef;
    RequestorID m_id;

public:
    void Init(IResourceConsumer*, IUnknown*, ProcessID, RequestorID);

    long AddRef() {
        return ++m_cRef;
    };
    long Release() {
        return --m_cRef;
    };

    RequestorID GetID(){
        return m_id;
    };

    IResourceConsumer* GetConsumer(void) {
        return m_pConsumer;
    };
    IUnknown* GetFocusObject(void) {
        return m_pFocusObject;
    };
    ProcessID GetProcID(void) {
        return m_procid;
    };


#ifdef CHECK_APPLICATION_STATE
    // Get the state of the filter graph within which this requestor lives
    LONG GetFilterGraphApplicationState(void);
#endif
};

class CRequestorList :
    public COffsetList
{
    RequestorID m_MaxID;
public:
    void Init(DWORD idElemSize) {
        m_lCount = 0;
        m_MaxID = 1;
        m_idElemSize = idElemSize;
    };

    // find by pConsumer and procid
    CRequestor* GetByPointer(IResourceConsumer*, ProcessID);

    CRequestor* GetByID(RequestorID id);

    // add (a ref count to) this consumer/focus object.
    // creates an entry with a refcount of 1 if it does not exist.
    // If an entry is found, uses that and increments the refcount.
    // returns the RequestorID for the entry used.
    HRESULT Add(IResourceConsumer*, IUnknown*, ProcessID, RequestorID*);

    CRequestor * Get( long i ) {
        return (CRequestor *) GetListElem(i);
    }

    // releases a refcount on the specified resource index. When this refcount
    // drops to 0, the object is freed.
    HRESULT Release(RequestorID);
};



// states that a resource can be in
enum ResourceState {
    RS_Free,            // unallocated
    RS_NeedRelease,     // a remote process needs us to release this
    RS_Releasing,       // requestor is currently releasing
    RS_ReleaseDone,     // released by remote process for us to allocate
    RS_Acquiring,       // requestor is currently acquiring
    RS_Held,            // allocated and acquired       
    RS_Error            // acquisition failed   
};

//
// Represents a specific single resource and maintains its state, and
// the RequestorID of the owner and all the requestors.
//
class CResourceItem :
    public COffsetListElem
{
    friend class CResourceManager;    // give this class access to m_Requestors this way for now only

private:
    ResourceID m_id;

    ResourceState m_State;
    RequestorID m_Holder;
    RequestorID m_GoingTo;
    ProcessID m_AttentionBy;
    char m_chName[Max_Resource_Name];

    // each resource item element contains a sublist of requestors for this resource
    CRequestorList m_Requestors;

public:

    void Init(const char * pName, ResourceID id);

    const char* GetName(void) const {
        return m_chName;
    }

    ResourceID GetID(void) const {
        return m_id;
    }

    ResourceState GetState(void) {
        return m_State;
    }
    void SetState(ResourceState s)
#ifndef DEBUG
    { m_State = s; }
#else
    ;
#endif
    RequestorID GetHolder(void) const {
        return m_Holder;
    }
    void SetHolder(RequestorID ri) {
        m_Holder = ri;
    }
    RequestorID GetNextHolder(void) const {
        return m_GoingTo;
    }
    void SetNextHolder(RequestorID ri) {
        m_GoingTo = ri;
    }
    ProcessID GetProcess(void) const {
        return m_AttentionBy;
    }
    void SetProcess(ProcessID pi) {
        m_AttentionBy = pi;
    }

    long GetRequestCount() const {
        return m_Requestors.Count();
    }
    CRequestor * GetRequestor(long i) 
    {
        return m_Requestors.Get(i);
    }
};


class CResourceList :
    public COffsetList
{
private:
    ResourceID m_MaxID;

public:

    void Init(DWORD idElemSize) {
        m_lCount = 0;
        m_MaxID = 1;
        m_idElemSize = idElemSize;
 		m_offsetHead = 0;
    }

    CResourceItem* GetByID(ResourceID id);

    // add a resource to the list. S_OK if new. S_FALSE if already there.
    HRESULT Add(const char * pName, ResourceID* pID);

    // unconditionally removes a resource from the list. No attempt at this
    // level to deallocate it.
    // HRESULT Remove(ResourceID id);
};



// each of these contains the global data for a particular instance of
// the resource manager. There may be multiple in the same process, but we
// always deal with the first entry for a given process
class CProcess :
    public COffsetListElem
{
    ProcessID m_procid;
    IResourceManager* m_pManager;
    HWND m_hwnd;
public:
    void Init(ProcessID, IResourceManager*, HWND);
    ProcessID GetProcID(void) const {
        return m_procid;
    };
    HRESULT Signal(void);
    HWND GetHWND(void) const {
        return m_hwnd;
    };
};

class CProcessList :
    public COffsetList
{
public:
    void Init(DWORD idElemSize) {
        m_lCount = 0;
        m_idElemSize = idElemSize;
    };

    HRESULT Add(ProcessID, IResourceManager*, HWND);
    HRESULT Remove(HWND hwnd);

    CProcess* GetByID(ProcessID);
    HRESULT SignalProcess(ProcessID);
};

class CResourceData {
public:
    CProcessList m_Processes;
    CResourceList m_Resources;
    COffsetList m_Holes[MAX_ELEM_SIZES]; // recycle list, use a separate one for each element size

    ProcessID m_FocusProc;
    IUnknown* m_pFocusObject;
    DWORD m_dwNextAllocIndex[MAX_ELEM_SIZES];
    DWORD m_dwNextPageIndex[MAX_ELEM_SIZES];

    void Init(void);


    DWORD GetNextAllocIndex(DWORD idElemSize) 
    { 
        return m_dwNextAllocIndex[idElemSize]; 
    }
    void  SetNextAllocIndex(DWORD idElemSize, const DWORD dwNextIndex) 
    { 
        m_dwNextAllocIndex[idElemSize] = dwNextIndex; 
    }
    DWORD GetNextPageIndex(DWORD idElemSize) 
    { 
        return m_dwNextPageIndex[idElemSize]; 
    }
    void  SetNextPageIndex(DWORD idElemSize, const DWORD dwNextPageIndex) 
    {          
        m_dwNextPageIndex[idElemSize] = dwNextPageIndex; 
    }

    COffsetList * GetRecycleList(DWORD idElemSize) 
    { 
        return &m_Holes[idElemSize]; 
    }

};



// --- end shared memory classes ---

// Batch of functions that had been stuck on CResourceManager as methods.


// returns TRUE if pFilterNew is more closely related to pFilterFocus
// than pFilterCurrent is. Returns false if same or if current is closer.
BOOL IsFilterRelated(
            IBaseFilter* pFilterFocus,
            IBaseFilter* pFilterCurrent,
            IBaseFilter* pFilterNew);

// searches other branches of the graph going upstream of the input pin
// pInput looking for the filters pCurrent or pNew. Returns S_OK if it finds
// pNew soonest (ie closest to pInput) or S_FALSE if it finds pCurrent at
// least as close, or E_FAIL if it finds neither.
HRESULT SearchUpstream(
            IPin* pInput,
            IBaseFilter* pCurrent,
            IBaseFilter* pNew);

// search for pFilter anywhere on the graph downstream of pOutput. Returns TRUE
// if found or FALSE otherwise.
BOOL SearchDownstream(IBaseFilter* pStart, IBaseFilter* pFilter);

// return TRUE if both filters are in the same filtergraph
BOOL IsSameGraph(IBaseFilter* p1, IBaseFilter* p2);

// returns TRUE if pUnk is a filter within pGraph (or is the same graph
// as pGraph).
BOOL IsWithinGraph(IFilterGraph* pGraph, IUnknown* pUnk);

// these functions are used to map an offset from our dynamic linked lists to a 
// process-specific address (and vice versa)
COffsetListElem * OffsetToProcAddress( DWORD idElemSize, DWORD offset );
DWORD ProcAddressToOffset( DWORD idElemSize, COffsetListElem * pElem );

class CResourceManager
  : public IResourceManager,
    public CUnknown
{
    friend class CRequestorList; // give the linked offset lists access to m_pData
    friend class CProcessList;

public:
    static CResourceData *  m_pData;  

private:
    static HANDLE           m_hData;
    static DWORD            m_dwLoadCount;
    static CAMMutex         m_Mutex;


    //processid for this instance
    ProcessID m_procid;

    // signal a given procid
    HRESULT SignalProcess(ProcessID);

    // return TRUE if idxNew has a better right to the resource
    // than idxCurrent
    BOOL ComparePriority(
        RequestorID idxCurrent,
        RequestorID idxNew,
        LONG        idResource // need this now since id's are resource item specific
    );


    // force the release of an item current held, next-holder has
    // already been set. Return S_OK if the release is done (state set to
    // acquiring), else S_FALSE and some transitioning state.
    HRESULT ForceRelease(CResourceItem* pItem);

    // signal that this resource should be released by the worker thread
    // in that process. Set the process attention, set the state to indicate
    // that release is needed, and signal that process. Note that the remote
    // process could be us (where we need to do the release async.
    HRESULT FlagRelease(CResourceItem* pItem);

    // transfer a released resource to a requestor who may be out of proc
    HRESULT Transfer(CResourceItem * pItem);


    // set the next holder to the highest priority of the current holders.
    // if the actual holder is the highest, then set the next-holder to null.
    HRESULT SelectNextHolder(CResourceItem* pItem);

    // returns TRUE if there is still a process with this id
    BOOL CheckProcessExists(ProcessID procid);

    // check the list of processes for any that have exited without cleanup and
    // then clean them up. Returns TRUE if any dead processes were cleaned up.
    BOOL CheckProcessTable(void);

    // remove a dead process
    void CleanupProcess(ProcessID procid);

    // remove a requestor that is part of a dead process and cancel
    // its requests and any resources it holds
    void CleanupRequestor(CRequestor* preq, LONG idResource);

    HRESULT SwitchTo(CResourceItem* pItem, RequestorID idNew);

public:
    static DWORD_PTR        m_aoffsetAllocBase[MAX_ELEM_SIZES];
    
    // CUnknown etc
    CResourceManager(TCHAR*, LPUNKNOWN, HRESULT * phr);
    ~CResourceManager();

    DECLARE_IUNKNOWN
    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void**);

    // process load/unload
    static void ProcessAttach(BOOL bLoad);

    // -- IResourceManager --

    // tell the manager how many there are of a resource.
    // ok if already registered. will take new count. if new count
    // is lower, will de-allocate resources to new count.
    //
    // You get back a token that will be used in further calls.
    //
    // Passing a count of 0 will eliminate this resource. There is currently
    // no defined way to find the id without knowing the count.
    //
    STDMETHODIMP
    Register(
             LPCWSTR pName,         // this named resource
             LONG   cResource,      // has this many instances
             LONG* plResourceID        // cookie placed here
        );

    STDMETHODIMP
    RegisterGroup(
             LPCWSTR pName,         // this named resource group
             LONG cResource,        // has this many resources
             LONG* palContainedIDs,      // these are the contained resources
             LONG* plGroupID        // group resource id goes here
        );

    // request the use of a given, registered resource.
    // possible return values:
    //      S_OK == yes you can use it now
    //      S_FALSE == you will be called back when the resource is available
    //      other - there is an error.
    //
    // The priority of this request should be affected by the associated
    // focus object -- that is, when SetFocus is called for that focus
    // object (or a 'related' object) then my request should be put through.
    //
    // A renderer should pass the filter's IUnknown here. The filtergraph
    // will match filters to the filtergraph, and will trace filters to
    // common source filters when checking focus objects.
    STDMETHODIMP
    RequestResource(
             LONG idResource,
             IUnknown* pFocusObject,
             IResourceConsumer* pConsumer
        );


    // notify the resource manager that an acquisition attempt completed.
    // Call this method after an AcquireResource method returned
    // S_FALSE to indicate asynchronous acquisition.
    // HR should be S_OK if the resource was successfully acquired, or a
    // failure code if the resource could not be acquired.
    STDMETHODIMP
    NotifyAcquire(
             LONG idResource,
             IResourceConsumer* pConsumer,
             HRESULT hr);

    // Notify the resource manager that you have released a resource. Call
    // this in response to a ReleaseResource method, or when you have finished
    // with the resource. bStillWant should be TRUE if you still want the
    // resource when it is next available, or FALSE if you no longer want
    // the resource.
    STDMETHODIMP
    NotifyRelease(
             LONG idResource,
             IResourceConsumer* pConsumer,
             BOOL bStillWant);

    // I don't currently have the resource, and I no longer need it.
    STDMETHODIMP
    CancelRequest(
             LONG idResource,
             IResourceConsumer* pConsumer);

    // Notify the resource manager that a given object has been given the
    // user's focus. In ActiveMovie, this will normally be a video renderer
    // whose window has received the focus. The filter graph will switch
    // contended resources to (in order):
    //      requests made with this same focus object
    //      requests whose focus object shares a common source with this
    //      requests whose focus object shares a common filter graph
    // After calling this, you *must* call ReleaseFocus before the IUnknown
    // becomes invalid, unless you can guarantee that another SetFocus
    // of a different object is done in the meantime. No addref is held.
    STDMETHODIMP
    SetFocus(
             IUnknown* pFocusObject);

    // Sets the focus to NULL if the current focus object is still
    // pFocusObject. Call this when
    // the focus object is about to be destroyed to ensure that no-one is
    // still referencing the object.
    STDMETHODIMP
    ReleaseFocus(
             IUnknown* pFocusObject);


    // -- worker thread functions

    // we share a worker thread with other parts of this plug-in distributor
    // so these functions are called on a worker thread created in
    // CFGControl.

    // worker thread has been signalled - look for all work assigned to
    // this process
    HRESULT OnThreadMessage(void);

    // worker thread is starting up
    HRESULT OnThreadInit(HWND hwnd);

    // worker thread is shutting down
    HRESULT OnThreadExit(HWND hwnd);

};

#endif // _RSRCMGR_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\seekprxy.h ===
// Copyright (c) 1996  Microsoft Corporation.  All Rights Reserved.
#ifndef __CMediaSeekingProxy__
#define __CMediaSeekingProxy__


class CMediaSeekingProxy : public CUnknown, public IMediaSeeking
{
public:
    static IMediaSeeking * CreateIMediaSeeking( IBaseFilter * pF, HRESULT *phr );

    STDMETHODIMP QueryInterface(REFIID riid, void **ppv) {
        // We lie.  We need to look like we're part of the REAL filter.
        return m_pMediaPosition->QueryInterface(riid,ppv);
    };
    STDMETHODIMP_(ULONG) AddRef() {
        return CUnknown::NonDelegatingAddRef();
    };
    STDMETHODIMP_(ULONG) Release() {
        return CUnknown::NonDelegatingRelease();
    };


    // Returns the capability flags
    STDMETHODIMP GetCapabilities( DWORD * pCapabilities );

    // And's the capabilities flag with the capabilities requested.
    // Returns S_OK if all are present, S_FALSE if some are present, E_FAIL if none.
    // *pCababilities is always updated with the result of the 'and'ing and can be
    // checked in the case of an S_FALSE return code.
    STDMETHODIMP CheckCapabilities( DWORD * pCapabilities );

    // The default must be TIME_FORMAT_MEDIA_TIME
    STDMETHODIMP GetTimeFormat(GUID * pFormat);
    STDMETHODIMP IsUsingTimeFormat(const GUID * pFormat);

    // can only change the mode when stopped (I'd like to relax this?? v-dslone)
    // (returns VFE_E_NOT_STOPPED otherwise)
    STDMETHODIMP SetTimeFormat(const GUID * pFormat);

    // returns S_OK if mode is supported, S_FALSE otherwise
    STDMETHODIMP IsFormatSupported(const GUID * pFormat);

    // Is there a prefered format?
    STDMETHODIMP QueryPreferredFormat(GUID *pFormat);

    // Convert time from one format to another.
    // We must be able to convert between all of the formats that we say we support.
    // (However, we can use intermediate formats (e.g. REFERECE_TIME).)
    // If a pointer to a format is null, it implies the currently selected format.
    STDMETHODIMP ConvertTimeFormat(LONGLONG * pTarget, const GUID * pTargetFormat,
                                   LONGLONG    Source, const GUID * pSourceFormat );


    // Set current and end positions in one operation
    STDMETHODIMP SetPositions( LONGLONG * pCurrent, DWORD CurrentFlags
                             , LONGLONG * pStop, DWORD StopFlags );


    // Get CurrentPosition & StopTime
    // Either pointer may be null, implying not interested
    STDMETHODIMP GetPositions( LONGLONG * pCurrent, LONGLONG * pStop );

    // or get them individually
    STDMETHODIMP GetCurrentPosition( LONGLONG * pCurrent );

    STDMETHODIMP GetStopPosition( LONGLONG * pStop );

    // Rate stuff
    STDMETHODIMP SetRate(double dRate);
    STDMETHODIMP GetRate(double * pdRate);

    // GetDuration
    // NB: This is NOT the Duration of the selection, this is the "maximum
    // possible playing time"
    STDMETHODIMP GetDuration(LONGLONG *pDuration);
    STDMETHODIMP GetAvailable( LONGLONG * pEarliest, LONGLONG * pLatest );

    STDMETHODIMP GetPreroll(LONGLONG *pDuration);

    static BOOL IsFormatMediaTime( const GUID * pFormat )
    { return *pFormat == TIME_FORMAT_MEDIA_TIME; }

protected:
    // And some helpers
    HRESULT IsStopped();

    const GUID & GetFormat() const
    { return m_TimeFormat; }

    BOOL UsingMediaTime() const
    { return IsFormatMediaTime(&GetFormat()); }

private:
    CMediaSeekingProxy( IBaseFilter * pF, IMediaPosition * pMP, IMediaSeeking * pMS, HRESULT *phr );
    ~CMediaSeekingProxy();

    GUID                    m_TimeFormat;

    // If we have both of these pointers, then the seeking pointer
    // can't handle time format, we'll have to use position if we
    // are asked for media time format.
    BOOL                    m_bUsingPosition;
    IMediaPosition  *const  m_pMediaPosition;
    IMediaSeeking   *const  m_pMediaSeeking;
    IBaseFilter         *   m_pFilter;

};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\control\seeking.cpp ===
// Copyright (c) 1996 - 1999  Microsoft Corporation.  All Rights Reserved.

// PID implementation of IMediaSeeking

#include <streams.h>
#include "fgctl.h"


static int METHOD_TRACE_LOGGING_LEVEL = 7;


// --- IMediaSeeking methods ----------------------

CFGControl::CImplMediaSeeking::CImplMediaSeeking
(   const TCHAR * pName
,   CFGControl * pFGC
)
: CUnknown(pName, pFGC->GetOwner())
, m_pMediaSeeking(NULL)
, m_pFGControl(pFGC)
, m_CurrentFormat(TIME_FORMAT_MEDIA_TIME)
, m_llNextStart(0)
, m_dwSeekCaps(0)
, m_pSegment(NULL)
, m_dwCurrentSegment(0)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::CImplMediaSeeking()" ));

    ASSERT(m_pFGControl);

    // it's hard to know how to report the rate when they don't match.
    // to handle this, we report a rate of 1.0 if none has been set and
    // there is more than one filter. When SetRate is called, we set this
    // value so we will report correctly afterwards.
    m_dblRate = 1.0;

    // we need to know the start time so we can do current position
    // calculations. By assuming a default of 0, we make no adjustment unless
    // we have been told the start time
    m_rtStartTime = 0;
    m_rtStopTime  = MAX_TIME;

    // Make sure segment mode is off
    ClearSegments();
}


// Destructor

CFGControl::CImplMediaSeeking::~CImplMediaSeeking()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::~CImplMediaSeeking()" ));
    if (m_pMediaSeeking) {
	NOTE("Releasing filter");
	m_pMediaSeeking->Release();
	m_pMediaSeeking = NULL;
    }

    ClearSegments();
}


// Expose our IMediaSeeking interface

STDMETHODIMP
CFGControl::CImplMediaSeeking::NonDelegatingQueryInterface(REFIID riid,void **ppv)
{
    CheckPointer(ppv,E_POINTER);
    *ppv = NULL;

    if (riid == IID_IMediaSeeking) {
	NOTE("Returning IMediaSeeking interface");
	return GetInterface((IMediaSeeking *)this,ppv);
    }
    return CUnknown::NonDelegatingQueryInterface(riid,ppv);
}

// Unfortunately, we can't afford to distribute this directly, the filters will
// lie about their current positions and will report their last "start" time.
STDMETHODIMP
CFGControl::CImplMediaSeeking::GetPositions(LONGLONG * pCurrent, LONGLONG * pStop)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetPositions()" ));

    HRESULT hr;
    REFERENCE_TIME rtCurrent;

    CAutoMsgMutex lck(m_pFGControl->GetFilterGraphCritSec());

    hr = GetCurrentMediaTime( &rtCurrent );

    if (SUCCEEDED(hr))
    {
	if (m_pMediaSeeking)
	{
	    if (pCurrent)
	    {
		hr = m_pMediaSeeking->ConvertTimeFormat( pCurrent, 0, rtCurrent, &TIME_FORMAT_MEDIA_TIME );
	    }
	    if (pStop && SUCCEEDED(hr))
	    {
		hr = m_pMediaSeeking->GetStopPosition( pStop );
	    }
	}
	else
	{
	    ASSERT( m_CurrentFormat == TIME_FORMAT_MEDIA_TIME );
	    if (pCurrent) *pCurrent = rtCurrent;
	    if (pStop)	  hr = GetMax( &IMediaSeeking::GetStopPosition, pStop );
	}
    }

    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaSeeking::ConvertTimeFormat
(   LONGLONG * pTarget, const GUID * pTargetFormat
,   LONGLONG	Source, const GUID * pSourceFormat
)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::ConvertTimeFormat()" ));

    CAutoMsgMutex lck(m_pFGControl->GetFilterGraphCritSec());

    HRESULT hr;

    // We want to say if target format == source format then just copy the value.
    // But either format pointer may be null, implying use the current format.
    // Hence the conditional operators which WILL return a pointer to a format,
    // which can then be compared.
    if ( *( pTargetFormat ? pTargetFormat : &m_CurrentFormat ) == *( pSourceFormat ?  pSourceFormat : &m_CurrentFormat) )
    {
	*pTarget = Source;
	hr = NOERROR;
    }
    else if (m_pMediaSeeking)
    {
	hr = m_pMediaSeeking->ConvertTimeFormat( pTarget, pTargetFormat, Source, pSourceFormat );
    }
    else hr = E_NOTIMPL;

    return hr;
}

// Returns the capability flags
STDMETHODIMP
CFGControl::CImplMediaSeeking::GetCapabilities
( DWORD * pCapabilities )
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetCapabilities()" ));
    HRESULT hr = m_pFGControl->UpdateLists();
    if( FAILED( hr ) ) {
        return hr;
    }

    *pCapabilities = m_dwSeekCaps;
    return S_OK;
}

// And's the capabilities flag with the capabilities requested.
// Returns S_OK if all are present, S_FALSE if some are present, E_FAIL if none.
// *pCababilities is always updated with the result of the 'and'ing and can be
// checked in the case of an S_FALSE return code.
STDMETHODIMP
CFGControl::CImplMediaSeeking::CheckCapabilities
( DWORD * pCapabilities )
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::CheckCapabilities()" ));
    HRESULT hr = m_pFGControl->UpdateLists();
    if( FAILED( hr ) ) {
        return hr;
    }

    DWORD dwCaps = m_dwSeekCaps;
    dwCaps &= *pCapabilities;
    hr =  dwCaps ? ( dwCaps == *pCapabilities ? S_OK : S_FALSE ) : E_FAIL;
    *pCapabilities = dwCaps;

    return hr;
}



// To support a given media time format we only need one renderer to say yes
// When that time format is subsequently selected we find the renderer and
// hold it internally reference counted. All subsequent calls to us will be
// routed through that interface. There is little point aggregating calls

STDMETHODIMP
CFGControl::CImplMediaSeeking::IsFormatSupported(const GUID * pFormat)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::IsFormatSupported()" ));

    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());
    CGenericList<IMediaSeeking> *pList;

    HRESULT hr = m_pFGControl->GetListSeeking(&pList);

    if (FAILED(hr))
    {
	NOTE("No list from m_pFGControl->GetListSeeking(&pList);");
	DbgBreak("m_pFGControl->GetListSeeking(&pList) failed");
    }
    else
    {
	if (pList->GetCount() < 1)
	{
	    NOTE("No filters from m_pFGControl->GetListSeeking(&pList);");
	    hr = E_NOTIMPL;
	}
	else
	{
	    POSITION pos;
	    for ( hr = S_FALSE, pos = pList->GetHeadPosition(); pos && hr != S_OK; )
	    {
		IMediaSeeking *const pMS = pList->GetNext(pos);
		hr = pMS->IsFormatSupported(pFormat);
	    }
	}
    }

    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaSeeking::QueryPreferredFormat(GUID *pFormat)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::QueryPreferredFormat()" ));

    CheckPointer(pFormat,E_POINTER);

    *pFormat = TIME_FORMAT_MEDIA_TIME;

    return NOERROR;
}


// Release the current IMediaSeeking interface

HRESULT CFGControl::CImplMediaSeeking::ReleaseCurrentSelection()
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::ReleaseCurrentSelection()" ));

    ASSERT( m_pMediaSeeking || m_CurrentFormat == TIME_FORMAT_MEDIA_TIME );

    if (m_pMediaSeeking) {
	HRESULT hr = m_pMediaSeeking->SetTimeFormat(&TIME_FORMAT_MEDIA_TIME);
	if (FAILED(hr)) hr = m_pMediaSeeking->SetTimeFormat(&TIME_FORMAT_NONE);
	ASSERT(SUCCEEDED(hr));
	m_pMediaSeeking->Release();
	m_pMediaSeeking = NULL;
    }
    return S_OK;
}


// When we select a time format we find the first filter in the graph that
// will accept the format. We then store the filter's IMediaSeeking with
// a reference count (which is dropped when either we are reset or we are
// destroyed). All subsequent calls to IMediaSeeking will be routed with
// this interface. This works well for simple graphs although if there are
// multiple streams in the graph the application will have to get involved

STDMETHODIMP
CFGControl::CImplMediaSeeking::SetTimeFormat(const GUID * pFormat)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::SetTimeFormat()" ));

    HRESULT hr = NOERROR;

    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());
    CGenericList<IMediaSeeking> *pList;

    // Are we being asked to reset the state

    if (*pFormat == TIME_FORMAT_NONE || *pFormat == TIME_FORMAT_MEDIA_TIME)
    {
	if (m_pMediaSeeking)
	{
	    HaltGraph halt(m_pFGControl, State_Stopped);
	    hr = ReleaseCurrentSelection();
	    halt.Resume();
	}
	m_CurrentFormat = TIME_FORMAT_MEDIA_TIME;
	return hr;
    }

    // Should always succeed

    hr = m_pFGControl->GetListSeeking(&pList);
    if (FAILED(hr)) {
	NOTE("No list");
	return hr;
    }

    // Is there anyone to aggregate IMediaSeeking

    if (pList->GetCount() < 1) {
	NOTE("No filters");
	return E_NOTIMPL;
    }

    // Find and store the first filter to agree

    IMediaSeeking *pMS;
    POSITION pos;

    // Assume the worst..
    hr = E_FAIL;

    // Must be stopped to change time formats
    HaltGraph halt(m_pFGControl, State_Stopped);

    // Try and find a filter for whome this is the preferred format.
    for ( pos = pList->GetHeadPosition(); pos; )
    {
	pMS = pList->GetNext(pos);
	GUID PreferredFormat;
	if ( pMS->QueryPreferredFormat(&PreferredFormat) == S_OK && *pFormat == PreferredFormat )
	{
	    EXECUTE_ASSERT(SUCCEEDED( pMS->SetTimeFormat(pFormat) ));
	    goto FormatSet;
	}
    }

    // Failing that, does anyone support it at all?
    for ( pos = pList->GetHeadPosition(); pos; )
    {
	pMS = pList->GetNext(pos);
	if (SUCCEEDED( pMS->SetTimeFormat(pFormat) )) goto FormatSet;
    }

    goto End;

FormatSet:
    // AddRef and store the replacement

    hr = S_OK;

    if (m_pMediaSeeking != pMS) {
	ReleaseCurrentSelection();
	m_pMediaSeeking = pMS;
	m_pMediaSeeking->AddRef();
    }
    m_CurrentFormat = *pFormat;

End:
    halt.Resume();
    return hr;
}


// Return the currently selected time format

STDMETHODIMP
CFGControl::CImplMediaSeeking::GetTimeFormat(GUID *pFormat)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetTimeFormat()" ));

    CheckPointer(pFormat,E_POINTER);
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    *pFormat = m_CurrentFormat;
    ASSERT( (m_pMediaSeeking != 0 && m_pMediaSeeking->IsUsingTimeFormat(&m_CurrentFormat) == S_OK )
	    || m_CurrentFormat == TIME_FORMAT_MEDIA_TIME );


    return S_OK;
}

STDMETHODIMP
CFGControl::CImplMediaSeeking::IsUsingTimeFormat(const GUID * pFormat)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetTimeFormat()" ));

    CheckPointer(pFormat,E_POINTER);
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    return *pFormat == m_CurrentFormat ? S_OK : S_FALSE;
}

// Return the current stream duration in media time

STDMETHODIMP

CFGControl::CImplMediaSeeking::GetDuration(LONGLONG *pDuration)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetDuration()" ));

    CheckPointer(pDuration,E_POINTER);
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    return m_pMediaSeeking
	   ? m_pMediaSeeking->GetDuration(pDuration)
	   : GetMax( &IMediaSeeking::GetDuration, pDuration );
}

HRESULT
CFGControl::CImplMediaSeeking::GetCurrentMediaTime(LONGLONG *pCurrent)
{
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    HRESULT hr = NOERROR;
    LONGLONG rtTime;
#ifdef DEBUG
    REFERENCE_TIME rtStreamTime = 0;
#endif

    // Check to see if the graph hasn't been run
    // This will also catch the fact that we're paused but not yet run
    if (m_pFGControl->m_tBase == TimeZero)
    {
	// This should only be true if were stopped or if we went to
	// pause having been previously stopped.  (Or if we have no
	// clock.)  However, we could also be in the process of an async. Run()...
	rtTime = m_rtStartTime;
    }
    else
    {
	ASSERT( m_pFGControl->GetFilterGraphState() != State_Stopped );
	// We're either running, or have gone to paused from running

	// If we've received all our EC_COMPLETE's
	if (!m_pFGControl->OutstandingEC_COMPLETEs())
	{   // We must be at the end
	    // If we don't have a genuine stop time, use 0
	    rtTime = m_rtStopTime == MAX_TIME ? 0 : m_rtStopTime;
	}
	else
	{   // We're in the middle, got to do some sums
	    hr = m_pFGControl->GetStreamTime( &rtTime );
#ifdef DEBUG
            rtStreamTime = rtTime;
#endif
	    if SUCCEEDED(hr)
	    {
                if (m_pSegment) {
                    ASSERT(m_pSegment);

                    //  Remove the dead segments
                    KillDeadSegments(rtTime);
                    rtTime -= m_pSegment->rtStreamStart;
                    rtTime = LONGLONG( double(rtTime) * m_pSegment->dRate + 0.5 );
                    rtTime += m_pSegment->rtMediaStart;

                    if ( rtTime > m_pSegment->rtMediaStop)
                        rtTime = m_pSegment->rtMediaStop;
                } else {
                    rtTime = LONGLONG( double(rtTime) * m_dblRate + 0.5 );
                }
	    }
	    else
	    {
		// We don't expect any other errors
		ASSERT( hr == VFW_E_NO_CLOCK );

		// No clock, so ask the filters.
		IMediaSeeking * pMS = m_pMediaSeeking;
		if (pMS)
		{
		    hr = m_pMediaSeeking->GetCurrentPosition( &rtTime );
		    if (SUCCEEDED(hr))
		    {
			hr = ConvertTimeFormat( &rtTime, &TIME_FORMAT_MEDIA_TIME, rtTime, 0 );
		    }
		}
		else
		{
		    CGenericList<IMediaSeeking>* plist;
		    hr = m_pFGControl->GetListSeeking(&plist);
		    if (FAILED(hr)) return hr;
		    for ( POSITION pos = plist->GetHeadPosition(); pos; )
		    {
			pMS = plist->GetNext(pos);
			hr = pMS->GetCurrentPosition( &rtTime );
			if ( hr == S_OK ) break;
			pMS = 0;
		    }
		    if (!pMS && SUCCEEDED(hr)) hr = E_NOINTERFACE;
		}
	    }
            if (!m_bSegmentMode) {
        	if (SUCCEEDED(hr)) rtTime += m_rtStartTime;
        	if ( rtTime > m_rtStopTime ) rtTime = m_rtStopTime;
            }
            if ( rtTime < 0 ) rtTime = 0;
	}
    }

    ASSERT( rtTime >= 0 );
    // We can't specify an upper bound easily.  StopTime can be less than start time
    // since they can be set independantly, in any order, before play commences.
    // Duration may not be accessible.	So.... nothing to reasonably ASSERT here.

    *pCurrent = rtTime;
    DbgLog((LOG_TRACE, 3, TEXT("GetCurrentMediaTime returned %d(st %d)"),
           (LONG)(rtTime / 10000), (LONG)(rtStreamTime / 10000)));
    return hr;
}

// Return the current position in media time

STDMETHODIMP
CFGControl::CImplMediaSeeking::GetCurrentPosition(LONGLONG *pCurrent)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetCurrentPosition()" ));

    CheckPointer(pCurrent,E_POINTER);

    HRESULT hr;

    REFERENCE_TIME rtCurrent;

    hr = GetCurrentMediaTime(&rtCurrent);
    if (SUCCEEDED(hr))
    {
	if (m_pMediaSeeking)
	{
	    // Make sure we get to the end, whatever the units.
	    if ( rtCurrent == m_rtStopTime )
	    {
		m_pMediaSeeking->GetStopPosition( pCurrent );
	    }
	    else hr = ConvertTimeFormat( pCurrent, 0, rtCurrent, &TIME_FORMAT_MEDIA_TIME );
	}
	else *pCurrent = rtCurrent;
    }

    return hr;
}


// Return the current stop position in media time

STDMETHODIMP
CFGControl::CImplMediaSeeking::GetStopPosition(LONGLONG *pStop)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetStopPosition()" ));

    CheckPointer(pStop,E_POINTER);
    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    HRESULT hr;

    if (m_pMediaSeeking)
    {
	hr = m_pMediaSeeking->GetStopPosition(pStop);
	if (SUCCEEDED(hr))
	{
	    EXECUTE_ASSERT(SUCCEEDED(
		m_pMediaSeeking->ConvertTimeFormat( &m_rtStopTime, &TIME_FORMAT_MEDIA_TIME, *pStop, 0 )
	    ));
	}
    }
    else
    {
	hr = GetMax( &IMediaSeeking::GetStopPosition, pStop );
	if (SUCCEEDED(hr)) m_rtStopTime = *pStop;
    }

    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaSeeking::GetRate(double * pdRate)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetRate()" ));

    HRESULT hr;

    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    if (m_pMediaSeeking)
    {
	hr = m_pMediaSeeking->GetRate( pdRate );
	if (SUCCEEDED(hr))
	{
	    m_dblRate = *pdRate;
	    goto End;
	}
    }

    CGenericList<IMediaSeeking> *pList;
    hr = m_pFGControl->GetListSeeking(&pList);
    if (FAILED(hr)) {
	return hr;
    }

    // how do we handle multiple filters exposing different rates?
    // - if there is only one filter in the list, default to him.
    // if more than one, report whatever rate was set last via
    // SetRate (defaults to 1.0).

    if (pList->GetCount() != 1) {
	*pdRate = m_dblRate;
	hr = S_OK;
    } else {
	IMediaSeeking *pMP = pList->Get(pList->GetHeadPosition());
	hr = pMP->GetRate(pdRate);
	if SUCCEEDED(hr) m_dblRate = *pdRate;
    }
End:
    return hr;
}



STDMETHODIMP
CFGControl::CImplMediaSeeking::SetRate(double dRate)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::SetRate()" ));

    HRESULT hr;

    if (0.0 == dRate) {
	return E_INVALIDARG;
    }

    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    //
    //	Don't penalize people who just set the same rate as before
    //
    if (m_dblRate == dRate) {
	return S_OK;
    }

    // Might be over-the-top to stop, but it saves having to
    // distribute the current position!
    HaltGraph halt(m_pFGControl, State_Stopped);

    CGenericList<IMediaSeeking> *pList;
    hr = m_pFGControl->GetListSeeking(&pList);
    if (FAILED(hr)) {
	return hr;
    }

    // traverse the list
    hr = S_OK;
    BOOL bIsImpl = FALSE;
    for ( POSITION pos = pList->GetHeadPosition(); pos; )
    {
	IMediaSeeking * pMS = pList->GetNext(pos);
	HRESULT hrTmp = pMS->SetRate( dRate );
	if (SUCCEEDED(hrTmp))
	{
	    bIsImpl = TRUE;
	}
	else
	{
	    if (hr == S_OK && hrTmp != E_NOTIMPL) hr = hrTmp;
	}
    }
    if ( hr == S_OK && bIsImpl == FALSE ) hr = E_NOTIMPL;

    if (SUCCEEDED(hr)) {
	m_dblRate = dRate;
    } else {
	if (hr != E_NOTIMPL) {
	    //	Probably not a good idea to have people running at different
	    //	rates so try to go back to the old one
	    //	Traverse the list
	    for ( POSITION pos = pList->GetHeadPosition(); pos; )
	    {
		pList->GetNext(pos)->SetRate( m_dblRate );
	    }
	}
    }

    halt.Resume();

    return hr;
}


// When we go fullscreen we swap renderers temporarily, this means that any
// application using IMediaSeeking needs to be routed through a different
// filter. We will be called as we go fullscreen with the fullscreen filter
// and then at the end as we come out with the original renderer. We always
// get IMediaSeeking from the fullscreen filter and the filter to replace

HRESULT
CFGControl::CImplMediaSeeking::SetVideoRenderer(IBaseFilter *pNext,IBaseFilter *pCurrent)
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::SetVideoRenderer()" ));

    IMediaSeeking *pSelNext, *pSelCurrent;

    // All renderers should support IMediaSeeking

    pCurrent->QueryInterface(IID_IMediaSeeking,(void **) &pSelCurrent);
    if (pSelCurrent == NULL) {
	ASSERT(pSelCurrent);
	return E_UNEXPECTED;
    }

    // Were we selecting with this renderer

    if (pSelCurrent != m_pMediaSeeking) {
	pSelCurrent->Release();
	NOTE("Not selected");
	return NOERROR;
    }

    pSelCurrent->Release();

    // All renderers should support IMediaSeeking

    pNext->QueryInterface(IID_IMediaSeeking,(void **) &pSelNext);
    if (pSelNext == NULL) {
	ASSERT(pSelNext);
	return E_UNEXPECTED;
    }

    // The new interface is AddRef'd by the QueryInterface

    NOTE("Replacing renderer");
    m_pMediaSeeking->Release();
    m_pMediaSeeking = pSelNext;
    return NOERROR;
}

// Internal method to set the current position. We separate this out so that
// the media selection implementation can also call us. When it does a seek
// it gets back a media time where it has been positioned, that media time
// is passed in here so that all other renderers can be synchronised with it
// To avoid unecessary seeks on a filter already seeked it will also in the
// IMediaPosition for that filter (it may be NULL) to which we should avoid

STDMETHODIMP
CFGControl::CImplMediaSeeking::SetPositions
( LONGLONG * pCurrent, DWORD CurrentFlags
, LONGLONG * pStop, DWORD StopFlags )
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::SetPositions()" ));

    HRESULT hr = NOERROR;

    //  Segments don't work if we don't support them
    //  or if we are't actually specifying a start time
    //  (actually this could be made to work by using the previous
    //  stop time)
    if (CurrentFlags & (AM_SEEKING_Segment | AM_SEEKING_NoFlush)) {
        if (~m_dwSeekCaps & (AM_SEEKING_Segment | AM_SEEKING_NoFlush) ||
            ((CurrentFlags & AM_SEEKING_PositioningBitsMask) !=
               AM_SEEKING_AbsolutePositioning)) {

            //  Make it easier to write apps that loop etc
            CurrentFlags &= ~(AM_SEEKING_Segment | AM_SEEKING_NoFlush);
        }
    }

    if (CurrentFlags & AM_SEEKING_PositioningBitsMask)
    {
	if (!pCurrent)	hr = E_POINTER;
	else if (*pCurrent < 0) hr = E_INVALIDARG;
    }
    if (StopFlags & AM_SEEKING_PositioningBitsMask)
    {
	if (!pStop)  hr = E_POINTER;
	else if (*pStop < 0) hr = E_INVALIDARG;
    }
    if (FAILED(hr))
	return hr;

    CAutoMsgMutex lock(m_pFGControl->GetFilterGraphCritSec());

    BOOL bRunning = FALSE;
    const FILTER_STATE state = m_pFGControl->GetFilterGraphState();

    //  If we're not in segment mode or the last segment isn't
    //  finished flush anyway
    if (!m_bSegmentMode || m_lSegmentStarts != m_lSegmentEnds) {
        CurrentFlags &= ~AM_SEEKING_NoFlush;
    }
    //  Clear any old segments
    if (!(CurrentFlags & AM_SEEKING_NoFlush)) {
        ClearSegments();

        // Can't do this while running - so we have to pause the
        // graph and then make sure we run it again afterwards
        // Need to do this here or deferred commands will not work
        bRunning = (state == State_Running);
        if (bRunning) m_pFGControl->GetFG()->CFilterGraph::Pause();
    }
    if (CurrentFlags & AM_SEEKING_Segment) {
        m_dwCurrentSegment++;
        m_lSegmentStarts = 0;

        //  Don't signal while we're in the middle of this stuff
        m_lSegmentEnds   = 1;
        m_bSegmentMode = true;
        DbgLog((LOG_TRACE, 3, TEXT("SetPositions(new seg) %d, %d"),
                (*pCurrent) / 10000, (*pStop) / 10000));
    } else {
        m_dwCurrentSegment = 0;
    }


    if (m_pMediaSeeking)
    {
        LONGLONG llCurrent, llStop;
	DWORD dwOurCurrentFlags = CurrentFlags;
	DWORD dwOurStopFlags	= StopFlags;

	if (dwOurCurrentFlags & AM_SEEKING_PositioningBitsMask)
	{
            ASSERT(pCurrent);
	    dwOurCurrentFlags |= AM_SEEKING_ReturnTime;
	    llCurrent = *pCurrent;
	}
	if (dwOurStopFlags & AM_SEEKING_PositioningBitsMask)
	{
            ASSERT(pStop);
	    dwOurStopFlags    |= AM_SEEKING_ReturnTime;
	    llStop = *pStop;
	}

	hr = m_pMediaSeeking->SetPositions( &llCurrent, dwOurCurrentFlags, &llStop, dwOurStopFlags );
	if (FAILED(hr))
	    return hr;

	// Redistribute in time format
	{
	    HRESULT hrTime;

	    dwOurCurrentFlags = (dwOurCurrentFlags & AM_SEEKING_PositioningBitsMask)
				? AM_SEEKING_AbsolutePositioning : 0;
	    dwOurStopFlags    = (dwOurStopFlags    & AM_SEEKING_PositioningBitsMask)
				? AM_SEEKING_AbsolutePositioning : 0;

	    hrTime = SetMediaTime( &llCurrent, dwOurCurrentFlags, &llStop, dwOurStopFlags );
	    if (hrTime == E_NOTIMPL) hrTime = NOERROR;
	    if (SUCCEEDED(hrTime))
	    {
		if (CurrentFlags & AM_SEEKING_PositioningBitsMask) m_rtStartTime = llCurrent;
	    }
	    else hr = hrTime;

	}
	if ( CurrentFlags & AM_SEEKING_ReturnTime ) *pCurrent = llCurrent;
	if ( StopFlags	  & AM_SEEKING_ReturnTime ) *pStop    = llStop;
    }
    else
    {
        hr = SetMediaTime(pCurrent, CurrentFlags, pStop, StopFlags);
    }

    // If the graph is paused and we flushed, then we need to reset stream
    // time to 0 so that this start time will appear next
    if (SUCCEEDED(hr) && state != State_Stopped &&
        (CurrentFlags & AM_SEEKING_PositioningBitsMask) &&
        !(CurrentFlags & AM_SEEKING_NoFlush))
    {
	m_pFGControl->ResetStreamTime();
	m_pFGControl->m_bCued = FALSE;
    }

    if (m_bSegmentMode) {
        LONGLONG llStop;
        GetStopPosition(&llStop);
        hr = NewSegment(pCurrent, &llStop);
        if (CurrentFlags & AM_SEEKING_Segment) {
            InterlockedDecrement(&m_lSegmentEnds);
            CheckEndOfSegment();
        }

        //  Clear segment mode here so we turn off flushing above if
        //  we get another seek
        if (!(CurrentFlags & AM_SEEKING_Segment)) {
            m_bSegmentMode = false;
        }
    }

    // If we had to pause, then go back to running
    if (bRunning)
    {
	const HRESULT hr2 = m_pFGControl->CueThenRun();
	if (SUCCEEDED(hr)) { hr = hr2; }
    }

    return hr;
}

//
//  Distribute the seek in media time
//
HRESULT CFGControl::CImplMediaSeeking::SetMediaTime(
    LONGLONG *pCurrent, DWORD CurrentFlags,
    LONGLONG *pStop,  DWORD StopFlags
)
{
    // Doing time format media time

    CGenericList<IMediaSeeking> *pList;
    HRESULT hr = m_pFGControl->GetListSeeking(&pList);
    if (FAILED(hr)) {
        return hr;
    }

    hr = S_OK;
    BOOL bIsImpl = FALSE;
    POSITION pos = pList->GetHeadPosition();
    while (pos)
    {
        LONGLONG llCurrent, llStop;
        IMediaSeeking * pMS = pList->GetNext(pos);
        if ( pMS->IsUsingTimeFormat(&TIME_FORMAT_MEDIA_TIME) != S_OK ) continue;

        llCurrent = pCurrent ? *pCurrent : 0;
        llStop    = pStop    ? *pStop    : 0;

        HRESULT hrTmp;
        hrTmp = pMS->SetPositions(
                      &llCurrent,
                      CurrentFlags & AM_SEEKING_PositioningBitsMask ?
                          CurrentFlags | AM_SEEKING_ReturnTime : 0,
                      &llStop,
                      StopFlags);
        if (SUCCEEDED(hrTmp))
        {
            if (!bIsImpl)
            {
                bIsImpl = TRUE;
                if (CurrentFlags & AM_SEEKING_PositioningBitsMask) {
                    m_rtStartTime = llCurrent;
                }
                if (pCurrent && (CurrentFlags & AM_SEEKING_ReturnTime) ) {
                    *pCurrent = llCurrent;
                }
                if (pStop && (StopFlags & AM_SEEKING_ReturnTime) ) {
                   *pStop = llStop;
                }
            }
        }
        else
        {
            if (hr == S_OK && hrTmp != E_NOTIMPL) hr = hrTmp;
        }
    }
    if ( hr == S_OK && bIsImpl == FALSE ) hr = E_NOTIMPL;
    return hr;
}

// We return the intersection over all of the IMediaSeeking's
// (i.e. the worst case scenario).  HOWEVER, if all Latest's
// are at their stream's Duration, then we'll return the max
// duration as our Latest.

STDMETHODIMP
CFGControl::CImplMediaSeeking::GetAvailable
( LONGLONG * pEarliest, LONGLONG * pLatest )
{
    DbgLog(( LOG_TRACE, METHOD_TRACE_LOGGING_LEVEL, "CFGControl::CImplMediaSeeking::GetAvailable()" ));

    HRESULT hr = NOERROR;

    CAutoMsgMutex lck(m_pFGControl->GetFilterGraphCritSec());

    CGenericList<IMediaSeeking> *pList;
    hr = m_pFGControl->GetListSeeking(&pList);
    if (FAILED(hr)) {
	return hr;
    }

    LONGLONG Earliest	    = -1;
    LONGLONG Latest	    = MAX_TIME;
    LONGLONG MaxDuration    = -1;

    hr = S_OK;
    BOOL bIsImpl = FALSE;
    POSITION pos = pList->GetHeadPosition();
    while (pos)
    {
	IMediaSeeking * pMS = pList->GetNext(pos);

	GUID Format;
	HRESULT hrTmp = pMS->GetTimeFormat( &Format );
	if (FAILED(hrTmp))
	{
	    DbgBreak("MediaSeeking interface failed GetTimeFormat.");
	    continue;
	}

	if ( Format == TIME_FORMAT_NONE ) continue;

	LONGLONG e, l;
	hrTmp = pMS->GetAvailable( pEarliest ? &e : 0, pLatest ? &l : 0 );
	if (SUCCEEDED(hrTmp))
	{
	    // Check formats, convert if different
	    const LONGLONG llUnconvertedLatest = l;
	    const BOOL bNeedConversion = (Format != m_CurrentFormat);
	    if ( bNeedConversion )
	    {
		// Can our current m_pMediaSeeking convert from their format?
		ASSERT( m_pMediaSeeking );
		ASSERT( Format == TIME_FORMAT_MEDIA_TIME );
		if (!m_pMediaSeeking) continue;
		if (pEarliest)
		{
		    hrTmp = m_pMediaSeeking->ConvertTimeFormat( &e, 0, e, &Format );
		    if (FAILED(hrTmp)) continue;
		}
		if (pLatest)
		{
		    hrTmp = m_pMediaSeeking->ConvertTimeFormat( &l, 0, l, &Format );
		    if (FAILED(hrTmp)) continue;
		}
	    }
	    bIsImpl = TRUE;
	    if (pEarliest && e > Earliest) Earliest = e;

	    // We have to have special case logic for streams that are of different but
	    // maximal length.	So we'll only take their latest (l) if its earlier than
	    // ours AND its less than their own duration.

	    if (pLatest   && l < Latest) // OK they're a candidate
	    {
		LONGLONG llDuration;
		hrTmp = pMS->GetDuration( &llDuration );
		if (FAILED(hrTmp))
		{
		    DbgBreak("CFGControl::CImplMediaSeeking::GetAvailable: GetDuration failed.");
		    continue;
		}

		if ( llUnconvertedLatest < llDuration )
		{
		    Latest   = l;
		}
		else
		{
		    if ( bNeedConversion )
		    {
			hrTmp = m_pMediaSeeking->ConvertTimeFormat( &llDuration, 0, llDuration, &Format );
			if (FAILED(hrTmp))
			{
			    DbgBreak("Failed to convert time format.");
			    Latest = l;
			    continue;
			}
		    }
		    if ( llDuration > MaxDuration )
		    {
			MaxDuration = llDuration;
		    }
		}
	    }
	}
	else
	{
	    if (hr == S_OK && hrTmp != E_NOTIMPL) hr = hrTmp;
	}
    }


    if (bIsImpl)
    {
	if (pEarliest)	*pEarliest = Earliest;
	// If we still have Latest == MAX_TIME, then all stream's were at their
	// duration, so we'll use the MaxDuration.
	if (pLatest  )	*pLatest   = (Latest == MAX_TIME) ? MaxDuration : Latest;
    }
    else if (SUCCEEDED(hr)) hr = E_NOTIMPL;

    return hr;
}


STDMETHODIMP
CFGControl::CImplMediaSeeking::GetPreroll(LONGLONG * pllPreroll)
{
    return GetMax( &IMediaSeeking::GetPreroll, pllPreroll );
}


// we are about to stop - get current position now
void
CFGControl::CImplMediaSeeking::BeforeStop(void)
{
    // get the current position now before we stop since we
    // have no real notion of it once we have stopped.
    const HRESULT hr = GetCurrentPosition(&m_llNextStart);
    ASSERT( SUCCEEDED(hr) || hr == E_NOTIMPL );
}

// all filters now notified about stop - can set new current position
void
CFGControl::CImplMediaSeeking::AfterStop(void)
{
    // now that all the filters are stopped, we can tell them the new
    // current position. This ensures that we all start from where we stopped.
    // we have to wait until they are all stopped or they might start playing
    // from this position and then reset to a different position when the
    // actual stop comes in
    HRESULT hr;
    if (m_bSegmentMode) {
        //  If we're not in the last segment put us at the start of it
        if (m_pSegment && m_pSegment->pNext) {
            m_llNextStart = m_pSegment->rtMediaStart;
        }

        m_dwCurrentSegment = 0;

        //  We have to do all this because the filters don't know why
        //  they're being asked to stop so they just clear their
        //  segments anyway.
        //  This call will clear out the current segments
        hr = SetPositions(&m_llNextStart,
                          AM_SEEKING_AbsolutePositioning | AM_SEEKING_Segment,
                          &m_rtStopTime,
                          AM_SEEKING_AbsolutePositioning);
    } else {
        hr = SetPositions( &m_llNextStart, AM_SEEKING_AbsolutePositioning, 0, 0 );
        if FAILED(hr)
        {
            // Bengal will return E_FAIL
            ASSERT( hr == E_NOTIMPL || hr == E_FAIL );
            // If there was any failure, try rewinding instead
            m_llNextStart = 0;
            hr = SetPositions( &m_llNextStart, AM_SEEKING_AbsolutePositioning, NULL, 0 );
        }
    }
}


// The distribution of get_X and put_X methods across interfaces is to be done
// under the guidance of the following heuristics: (especially IMediaPosition)
// 1.  We will attempt to distribute the call to all interfaces, even if one fails
// 2.  In the event of an interface returning an ERROR code other than E_NOTIMPL,
//     the return code for the first such occurance shall be kept and used as the
//     return code for the call.
// 3.  If an interface returns E_NOTIMPL this is not deemed an error unless ALL of
//     the interfaces return E_NOTIMPL.  Under these circumstances, we will normally
//     return E_NOTIMPL to the caller indicating that NO FILTERS could support the
//     request.
// 4.  In the case of get_X methods where a sensible default can be provided, 3 can
//     be overriden to provide a sensible default (e.g. if no filters are interested
//     in pre-roll, it's reasonable to return a vaule of 0).

// Pass a pointer to the IMediaPosition get_X method, and a pointer to where you want
// the maximum result dumping, and we'll do the distribution of the calls for you.
HRESULT CFGControl::CImplMediaSeeking::GetMax
( HRESULT (__stdcall IMediaSeeking::*pMethod)( LONGLONG * )
, LONGLONG * pll
)
{
    CritCheckIn(m_pFGControl->GetFilterGraphCritSec());
    BOOL bIsImpl = FALSE;

    LONGLONG llMax = 0;
    *pll = llMax;

    CGenericList<IMediaSeeking> *pList;
    HRESULT hr = m_pFGControl->GetListSeeking(&pList);
    if (FAILED(hr)) {
	return hr;
    }

    // traverse the list, updating durations and remember the max
    hr = S_OK;
    POSITION pos = pList->GetHeadPosition();
    while (pos)
    {
	IMediaSeeking * pMS = pList->GetNext(pos);
	if (pMS->IsUsingTimeFormat(&m_CurrentFormat) != S_OK) continue;

	LONGLONG llThis;
	HRESULT hrTmp = (pMS->*pMethod)(&llThis);
	if (SUCCEEDED(hrTmp))
	{
	    bIsImpl = TRUE;
	    if (llThis > llMax) llMax = llThis;
	}
	else
	{
	    if (hr == S_OK && hrTmp != E_NOTIMPL) hr = hrTmp;
	}
    }
    *pll = llMax;
    if ( hr == S_OK && bIsImpl == FALSE ) hr = E_NOTIMPL;
    return hr;
}


void CFGControl::CImplMediaSeeking::StartSegment(REFERENCE_TIME const *rtStart, DWORD dwSegmentNumber)
{
    ASSERT(dwSegmentNumber == m_dwCurrentSegment);
    m_lSegmentStarts++;
}
void CFGControl::CImplMediaSeeking::EndSegment(REFERENCE_TIME const *rtEnd, DWORD dwSegmentNumber)
{
    if (dwSegmentNumber == m_dwCurrentSegment) {
        InterlockedIncrement(&m_lSegmentEnds);
        CheckEndOfSegment();
    }
}
void CFGControl::CImplMediaSeeking::ClearSegments()
{
    DbgLog((LOG_TRACE, 3, TEXT("Clearing Segments")));
    m_bSegmentMode = false;
    m_rtAccumulated = 0;
    while (m_pSegment != NULL) {
        SEGMENT *pSegment = m_pSegment;
        m_pSegment = pSegment->pNext;
        delete pSegment;
    }

    //  Make sure no old notifications are lying around on the list
    m_pFGControl->m_implMediaEvent.ClearEvents( EC_END_OF_SEGMENT );
}
HRESULT CFGControl::CImplMediaSeeking::NewSegment(
    REFERENCE_TIME const *prtStart,
    REFERENCE_TIME const *prtEnd
)
{
    ASSERT(m_dwSeekCaps & AM_SEEKING_CanDoSegments);

    //  To be on the safe side just check for any dead segments
    //  - someone might just loop forever and never query the time
    REFERENCE_TIME rtTime = 0;
    m_pFGControl->GetStreamTime( &rtTime );
    KillDeadSegments(rtTime);

    //  Don't start a new one until we've finished the last or we could
    //  deadlock
    SEGMENT *pSegment = new SEGMENT;
    if (pSegment == NULL) {
        return E_OUTOFMEMORY;
    }
    pSegment->pNext = NULL;

    //  NOTE - we have to be in segment mode to put segments ON the list,
    //  however, the list remains valid for the final segment even if
    //  we go out of segment mode (ie we get a seek without a segment flag
    //  but with noflush)
    ASSERT(m_bSegmentMode);

    pSegment->rtMediaStart = *prtStart;
    pSegment->rtMediaStop  = *prtEnd;
    pSegment->dRate = m_dblRate;
    pSegment->rtStreamStart = m_rtAccumulated;
    pSegment->rtStreamStop  = m_rtAccumulated + AdjustRate(*prtEnd - *prtStart);
    m_rtAccumulated = pSegment->rtStreamStop;
    pSegment->dwSegmentNumber = m_dwCurrentSegment;
    SEGMENT **ppSearch;
    for (ppSearch = &m_pSegment; *ppSearch != NULL;
         ppSearch = &(*ppSearch)->pNext) {
    }
    DbgLog((LOG_TRACE, 3, TEXT("Added Segment for %d to %d"),
           (LONG)(pSegment->rtStreamStart / 10000),
           (LONG)(pSegment->rtStreamStop / 10000)));
    *ppSearch = pSegment;
    return S_OK;
}

void CFGControl::CImplMediaSeeking::CheckEndOfSegment()
{
    if (m_lSegmentEnds == m_lSegmentStarts) {
        REFERENCE_TIME *prt =
            (REFERENCE_TIME *)CoTaskMemAlloc(sizeof(REFERENCE_TIME));
        if (prt) {
            *prt = m_rtStopTime;
        }
        DbgLog((LOG_TRACE, 3, TEXT("Delivering EC_END_OF_SEGMENT")));
        m_pFGControl->m_implMediaEvent.Deliver(EC_END_OF_SEGMENT,
                                               (LONG_PTR)prt,
                                               (LONG_PTR)m_dwCurrentSegment);
    }
}

void CFGControl::CImplMediaSeeking::KillDeadSegments(REFERENCE_TIME rtTime)
{
    if (m_pSegment == NULL) {
        return;
    }
    ASSERT(rtTime >= m_pSegment->rtStreamStart);
    ASSERT(m_pSegment);
    while (rtTime > m_pSegment->rtStreamStop &&
           m_pSegment->pNext) {
        SEGMENT *pSegment = m_pSegment;
        m_pSegment = pSegment->pNext;
        delete pSegment;
    }
    ASSERT(rtTime >= m_pSegment->rtStreamStart);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\dshow\filters\core\decibels\decibels.cpp ===
//--------------------------------------------------------------------------;
//
//  File: decibels.cpp
//
//  Copyright (c) 1995 - 1996 Microsoft Corporation.  All Rights Reserved.
//
//  Abstract:
//
//  Contents:
//
//  History:
//      06/15/95	SteveDav    plagiarised from Direct Sound
//
//--------------------------------------------------------------------------;

#include <windows.h>
#include <math.h>

#define _AMOVIE_DB_      // we implement the routines here
#include "decibels.h"

#if 1 	// the table is included for reference but the module uses math
	// routines to do the conversions.  Time is never of the essence
	// when doing these conversions in Quartz.
//
// This table covers -96.4 dB to -0.1 dB in 0.1 dB units
//
const WORD tblDBTenthsToAmpFactor[] = {
    0x0000, // (-964/10)dB = 0.000015 * amplitude
    0x0001, // (-963/10)dB = 0.000015 * amplitude
    0x0001, // (-962/10)dB = 0.000015 * amplitude
    0x0001, // (-961/10)dB = 0.000016 * amplitude
    0x0001, // (-960/10)dB = 0.000016 * amplitude
    0x0001, // (-959/10)dB = 0.000016 * amplitude
    0x0001, // (-958/10)dB = 0.000016 * amplitude
    0x0001, // (-957/10)dB = 0.000016 * amplitude
    0x0001, // (-956/10)dB = 0.000017 * amplitude
    0x0001, // (-955/10)dB = 0.000017 * amplitude
    0x0001, // (-954/10)dB = 0.000017 * amplitude
    0x0001, // (-953/10)dB = 0.000017 * amplitude
    0x0001, // (-952/10)dB = 0.000017 * amplitude
    0x0001, // (-951/10)dB = 0.000018 * amplitude
    0x0001, // (-950/10)dB = 0.000018 * amplitude
    0x0001, // (-949/10)dB = 0.000018 * amplitude
    0x0001, // (-948/10)dB = 0.000018 * amplitude
    0x0001, // (-947/10)dB = 0.000018 * amplitude
    0x0001, // (-946/10)dB = 0.000019 * amplitude
    0x0001, // (-945/10)dB = 0.000019 * amplitude
    0x0001, // (-944/10)dB = 0.000019 * amplitude
    0x0001, // (-943/10)dB = 0.000019 * amplitude
    0x0001, // (-942/10)dB = 0.000019 * amplitude
    0x0001, // (-941/10)dB = 0.000020 * amplitude
    0x0001, // (-940/10)dB = 0.000020 * amplitude
    0x0001, // (-939/10)dB = 0.000020 * amplitude
    0x0001, // (-938/10)dB = 0.000020 * amplitude
    0x0001, // (-937/10)dB = 0.000021 * amplitude
    0x0001, // (-936/10)dB = 0.000021 * amplitude
    0x0001, // (-935/10)dB = 0.000021 * amplitude
    0x0001, // (-934/10)dB = 0.000021 * amplitude
    0x0001, // (-933/10)dB = 0.000022 * amplitude
    0x0001, // (-932/10)dB = 0.000022 * amplitude
    0x0001, // (-931/10)dB = 0.000022 * amplitude
    0x0001, // (-930/10)dB = 0.000022 * amplitude
    0x0001, // (-929/10)dB = 0.000023 * amplitude
    0x0001, // (-928/10)dB = 0.000023 * amplitude
    0x0001, // (-927/10)dB = 0.000023 * amplitude
    0x0001, // (-926/10)dB = 0.000023 * amplitude
    0x0001, // (-925/10)dB = 0.000024 * amplitude
    0x0001, // (-924/10)dB = 0.000024 * amplitude
    0x0001, // (-923/10)dB = 0.000024 * amplitude
    0x0001, // (-922/10)dB = 0.000025 * amplitude
    0x0001, // (-921/10)dB = 0.000025 * amplitude
    0x0001, // (-920/10)dB = 0.000025 * amplitude
    0x0001, // (-919/10)dB = 0.000025 * amplitude
    0x0001, // (-918/10)dB = 0.000026 * amplitude
    0x0001, // (-917/10)dB = 0.000026 * amplitude
    0x0001, // (-916/10)dB = 0.000026 * amplitude
    0x0001, // (-915/10)dB = 0.000027 * amplitude
    0x0001, // (-914/10)dB = 0.000027 * amplitude
    0x0001, // (-913/10)dB = 0.000027 * amplitude
    0x0001, // (-912/10)dB = 0.000028 * amplitude
    0x0001, // (-911/10)dB = 0.000028 * amplitude
    0x0001, // (-910/10)dB = 0.000028 * amplitude
    0x0001, // (-909/10)dB = 0.000029 * amplitude
    0x0001, // (-908/10)dB = 0.000029 * amplitude
    0x0001, // (-907/10)dB = 0.000029 * amplitude
    0x0001, // (-906/10)dB = 0.000030 * amplitude
    0x0001, // (-905/10)dB = 0.000030 * amplitude
    0x0001, // (-904/10)dB = 0.000030 * amplitude
    0x0002, // (-903/10)dB = 0.000031 * amplitude
    0x0002, // (-902/10)dB = 0.000031 * amplitude
    0x0002, // (-901/10)dB = 0.000031 * amplitude
    0x0002, // (-900/10)dB = 0.000032 * amplitude
    0x0002, // (-899/10)dB = 0.000032 * amplitude
    0x0002, // (-898/10)dB = 0.000032 * amplitude
    0x0002, // (-897/10)dB = 0.000033 * amplitude
    0x0002, // (-896/10)dB = 0.000033 * amplitude
    0x0002, // (-895/10)dB = 0.000033 * amplitude
    0x0002, // (-894/10)dB = 0.000034 * amplitude
    0x0002, // (-893/10)dB = 0.000034 * amplitude
    0x0002, // (-892/10)dB = 0.000035 * amplitude
    0x0002, // (-891/10)dB = 0.000035 * amplitude
    0x0002, // (-890/10)dB = 0.000035 * amplitude
    0x0002, // (-889/10)dB = 0.000036 * amplitude
    0x0002, // (-888/10)dB = 0.000036 * amplitude
    0x0002, // (-887/10)dB = 0.000037 * amplitude
    0x0002, // (-886/10)dB = 0.000037 * amplitude
    0x0002, // (-885/10)dB = 0.000038 * amplitude
    0x0002, // (-884/10)dB = 0.000038 * amplitude
    0x0002, // (-883/10)dB = 0.000038 * amplitude
    0x0002, // (-882/10)dB = 0.000039 * amplitude
    0x0002, // (-881/10)dB = 0.000039 * amplitude
    0x0002, // (-880/10)dB = 0.000040 * amplitude
    0x0002, // (-879/10)dB = 0.000040 * amplitude
    0x0002, // (-878/10)dB = 0.000041 * amplitude
    0x0002, // (-877/10)dB = 0.000041 * amplitude
    0x0002, // (-876/10)dB = 0.000042 * amplitude
    0x0002, // (-875/10)dB = 0.000042 * amplitude
    0x0002, // (-874/10)dB = 0.000043 * amplitude
    0x0002, // (-873/10)dB = 0.000043 * amplitude
    0x0002, // (-872/10)dB = 0.000044 * amplitude
    0x0002, // (-871/10)dB = 0.000044 * amplitude
    0x0002, // (-870/10)dB = 0.000045 * amplitude
    0x0002, // (-869/10)dB = 0.000045 * amplitude
    0x0002, // (-868/10)dB = 0.000046 * amplitude
    0x0003, // (-867/10)dB = 0.000046 * amplitude
    0x0003, // (-866/10)dB = 0.000047 * amplitude
    0x0003, // (-865/10)dB = 0.000047 * amplitude
    0x0003, // (-864/10)dB = 0.000048 * amplitude
    0x0003, // (-863/10)dB = 0.000048 * amplitude
    0x0003, // (-862/10)dB = 0.000049 * amplitude
    0x0003, // (-861/10)dB = 0.000050 * amplitude
    0x0003, // (-860/10)dB = 0.000050 * amplitude
    0x0003, // (-859/10)dB = 0.000051 * amplitude
    0x0003, // (-858/10)dB = 0.000051 * amplitude
    0x0003, // (-857/10)dB = 0.000052 * amplitude
    0x0003, // (-856/10)dB = 0.000052 * amplitude
    0x0003, // (-855/10)dB = 0.000053 * amplitude
    0x0003, // (-854/10)dB = 0.000054 * amplitude
    0x0003, // (-853/10)dB = 0.000054 * amplitude
    0x0003, // (-852/10)dB = 0.000055 * amplitude
    0x0003, // (-851/10)dB = 0.000056 * amplitude
    0x0003, // (-850/10)dB = 0.000056 * amplitude
    0x0003, // (-849/10)dB = 0.000057 * amplitude
    0x0003, // (-848/10)dB = 0.000058 * amplitude
    0x0003, // (-847/10)dB = 0.000058 * amplitude
    0x0003, // (-846/10)dB = 0.000059 * amplitude
    0x0003, // (-845/10)dB = 0.000060 * amplitude
    0x0003, // (-844/10)dB = 0.000060 * amplitude
    0x0003, // (-843/10)dB = 0.000061 * amplitude
    0x0004, // (-842/10)dB = 0.000062 * amplitude
    0x0004, // (-841/10)dB = 0.000062 * amplitude
    0x0004, // (-840/10)dB = 0.000063 * amplitude
    0x0004, // (-839/10)dB = 0.000064 * amplitude
    0x0004, // (-838/10)dB = 0.000065 * amplitude
    0x0004, // (-837/10)dB = 0.000065 * amplitude
    0x0004, // (-836/10)dB = 0.000066 * amplitude
    0x0004, // (-835/10)dB = 0.000067 * amplitude
    0x0004, // (-834/10)dB = 0.000068 * amplitude
    0x0004, // (-833/10)dB = 0.000068 * amplitude
    0x0004, // (-832/10)dB = 0.000069 * amplitude
    0x0004, // (-831/10)dB = 0.000070 * amplitude
    0x0004, // (-830/10)dB = 0.000071 * amplitude
    0x0004, // (-829/10)dB = 0.000072 * amplitude
    0x0004, // (-828/10)dB = 0.000072 * amplitude
    0x0004, // (-827/10)dB = 0.000073 * amplitude
    0x0004, // (-826/10)dB = 0.000074 * amplitude
    0x0004, // (-825/10)dB = 0.000075 * amplitude
    0x0004, // (-824/10)dB = 0.000076 * amplitude
    0x0005, // (-823/10)dB = 0.000077 * amplitude
    0x0005, // (-822/10)dB = 0.000078 * amplitude
    0x0005, // (-821/10)dB = 0.000079 * amplitude
    0x0005, // (-820/10)dB = 0.000079 * amplitude
    0x0005, // (-819/10)dB = 0.000080 * amplitude
    0x0005, // (-818/10)dB = 0.000081 * amplitude
    0x0005, // (-817/10)dB = 0.000082 * amplitude
    0x0005, // (-816/10)dB = 0.000083 * amplitude
    0x0005, // (-815/10)dB = 0.000084 * amplitude
    0x0005, // (-814/10)dB = 0.000085 * amplitude
    0x0005, // (-813/10)dB = 0.000086 * amplitude
    0x0005, // (-812/10)dB = 0.000087 * amplitude
    0x0005, // (-811/10)dB = 0.000088 * amplitude
    0x0005, // (-810/10)dB = 0.000089 * amplitude
    0x0005, // (-809/10)dB = 0.000090 * amplitude
    0x0005, // (-808/10)dB = 0.000091 * amplitude
    0x0006, // (-807/10)dB = 0.000092 * amplitude
    0x0006, // (-806/10)dB = 0.000093 * amplitude
    0x0006, // (-805/10)dB = 0.000094 * amplitude
    0x0006, // (-804/10)dB = 0.000095 * amplitude
    0x0006, // (-803/10)dB = 0.000097 * amplitude
    0x0006, // (-802/10)dB = 0.000098 * amplitude
    0x0006, // (-801/10)dB = 0.000099 * amplitude
    0x0006, // (-800/10)dB = 0.000100 * amplitude
    0x0006, // (-799/10)dB = 0.000101 * amplitude
    0x0006, // (-798/10)dB = 0.000102 * amplitude
    0x0006, // (-797/10)dB = 0.000104 * amplitude
    0x0006, // (-796/10)dB = 0.000105 * amplitude
    0x0006, // (-795/10)dB = 0.000106 * amplitude
    0x0007, // (-794/10)dB = 0.000107 * amplitude
    0x0007, // (-793/10)dB = 0.000108 * amplitude
    0x0007, // (-792/10)dB = 0.000110 * amplitude
    0x0007, // (-791/10)dB = 0.000111 * amplitude
    0x0007, // (-790/10)dB = 0.000112 * amplitude
    0x0007, // (-789/10)dB = 0.000114 * amplitude
    0x0007, // (-788/10)dB = 0.000115 * amplitude
    0x0007, // (-787/10)dB = 0.000116 * amplitude
    0x0007, // (-786/10)dB = 0.000117 * amplitude
    0x0007, // (-785/10)dB = 0.000119 * amplitude
    0x0007, // (-784/10)dB = 0.000120 * amplitude
    0x0007, // (-783/10)dB = 0.000122 * amplitude
    0x0008, // (-782/10)dB = 0.000123 * amplitude
    0x0008, // (-781/10)dB = 0.000124 * amplitude
    0x0008, // (-780/10)dB = 0.000126 * amplitude
    0x0008, // (-779/10)dB = 0.000127 * amplitude
    0x0008, // (-778/10)dB = 0.000129 * amplitude
    0x0008, // (-777/10)dB = 0.000130 * amplitude
    0x0008, // (-776/10)dB = 0.000132 * amplitude
    0x0008, // (-775/10)dB = 0.000133 * amplitude
    0x0008, // (-774/10)dB = 0.000135 * amplitude
    0x0008, // (-773/10)dB = 0.000136 * amplitude
    0x0009, // (-772/10)dB = 0.000138 * amplitude
    0x0009, // (-771/10)dB = 0.000140 * amplitude
    0x0009, // (-770/10)dB = 0.000141 * amplitude
    0x0009, // (-769/10)dB = 0.000143 * amplitude
    0x0009, // (-768/10)dB = 0.000145 * amplitude
    0x0009, // (-767/10)dB = 0.000146 * amplitude
    0x0009, // (-766/10)dB = 0.000148 * amplitude
    0x0009, // (-765/10)dB = 0.000150 * amplitude
    0x0009, // (-764/10)dB = 0.000151 * amplitude
    0x000A, // (-763/10)dB = 0.000153 * amplitude
    0x000A, // (-762/10)dB = 0.000155 * amplitude
    0x000A, // (-761/10)dB = 0.000157 * amplitude
    0x000A, // (-760/10)dB = 0.000158 * amplitude
    0x000A, // (-759/10)dB = 0.000160 * amplitude
    0x000A, // (-758/10)dB = 0.000162 * amplitude
    0x000A, // (-757/10)dB = 0.000164 * amplitude
    0x000A, // (-756/10)dB = 0.000166 * amplitude
    0x000B, // (-755/10)dB = 0.000168 * amplitude
    0x000B, // (-754/10)dB = 0.000170 * amplitude
    0x000B, // (-753/10)dB = 0.000172 * amplitude
    0x000B, // (-752/10)dB = 0.000174 * amplitude
    0x000B, // (-751/10)dB = 0.000176 * amplitude
    0x000B, // (-750/10)dB = 0.000178 * amplitude
    0x000B, // (-749/10)dB = 0.000180 * amplitude
    0x000B, // (-748/10)dB = 0.000182 * amplitude
    0x000C, // (-747/10)dB = 0.000184 * amplitude
    0x000C, // (-746/10)dB = 0.000186 * amplitude
    0x000C, // (-745/10)dB = 0.000188 * amplitude
    0x000C, // (-744/10)dB = 0.000191 * amplitude
    0x000C, // (-743/10)dB = 0.000193 * amplitude
    0x000C, // (-742/10)dB = 0.000195 * amplitude
    0x000C, // (-741/10)dB = 0.000197 * amplitude
    0x000D, // (-740/10)dB = 0.000200 * amplitude
    0x000D, // (-739/10)dB = 0.000202 * amplitude
    0x000D, // (-738/10)dB = 0.000204 * amplitude
    0x000D, // (-737/10)dB = 0.000207 * amplitude
    0x000D, // (-736/10)dB = 0.000209 * amplitude
    0x000D, // (-735/10)dB = 0.000211 * amplitude
    0x000E, // (-734/10)dB = 0.000214 * amplitude
    0x000E, // (-733/10)dB = 0.000216 * amplitude
    0x000E, // (-732/10)dB = 0.000219 * amplitude
    0x000E, // (-731/10)dB = 0.000221 * amplitude
    0x000E, // (-730/10)dB = 0.000224 * amplitude
    0x000E, // (-729/10)dB = 0.000226 * amplitude
    0x000F, // (-728/10)dB = 0.000229 * amplitude
    0x000F, // (-727/10)dB = 0.000232 * amplitude
    0x000F, // (-726/10)dB = 0.000234 * amplitude
    0x000F, // (-725/10)dB = 0.000237 * amplitude
    0x000F, // (-724/10)dB = 0.000240 * amplitude
    0x000F, // (-723/10)dB = 0.000243 * amplitude
    0x0010, // (-722/10)dB = 0.000245 * amplitude
    0x0010, // (-721/10)dB = 0.000248 * amplitude
    0x0010, // (-720/10)dB = 0.000251 * amplitude
    0x0010, // (-719/10)dB = 0.000254 * amplitude
    0x0010, // (-718/10)dB = 0.000257 * amplitude
    0x0011, // (-717/10)dB = 0.000260 * amplitude
    0x0011, // (-716/10)dB = 0.000263 * amplitude
    0x0011, // (-715/10)dB = 0.000266 * amplitude
    0x0011, // (-714/10)dB = 0.000269 * amplitude
    0x0011, // (-713/10)dB = 0.000272 * amplitude
    0x0012, // (-712/10)dB = 0.000275 * amplitude
    0x0012, // (-711/10)dB = 0.000279 * amplitude
    0x0012, // (-710/10)dB = 0.000282 * amplitude
    0x0012, // (-709/10)dB = 0.000285 * amplitude
    0x0012, // (-708/10)dB = 0.000288 * amplitude
    0x0013, // (-707/10)dB = 0.000292 * amplitude
    0x0013, // (-706/10)dB = 0.000295 * amplitude
    0x0013, // (-705/10)dB = 0.000299 * amplitude
    0x0013, // (-704/10)dB = 0.000302 * amplitude
    0x0014, // (-703/10)dB = 0.000305 * amplitude
    0x0014, // (-702/10)dB = 0.000309 * amplitude
    0x0014, // (-701/10)dB = 0.000313 * amplitude
    0x0014, // (-700/10)dB = 0.000316 * amplitude
    0x0014, // (-699/10)dB = 0.000320 * amplitude
    0x0015, // (-698/10)dB = 0.000324 * amplitude
    0x0015, // (-697/10)dB = 0.000327 * amplitude
    0x0015, // (-696/10)dB = 0.000331 * amplitude
    0x0015, // (-695/10)dB = 0.000335 * amplitude
    0x0016, // (-694/10)dB = 0.000339 * amplitude
    0x0016, // (-693/10)dB = 0.000343 * amplitude
    0x0016, // (-692/10)dB = 0.000347 * amplitude
    0x0016, // (-691/10)dB = 0.000351 * amplitude
    0x0017, // (-690/10)dB = 0.000355 * amplitude
    0x0017, // (-689/10)dB = 0.000359 * amplitude
    0x0017, // (-688/10)dB = 0.000363 * amplitude
    0x0018, // (-687/10)dB = 0.000367 * amplitude
    0x0018, // (-686/10)dB = 0.000372 * amplitude
    0x0018, // (-685/10)dB = 0.000376 * amplitude
    0x0018, // (-684/10)dB = 0.000380 * amplitude
    0x0019, // (-683/10)dB = 0.000385 * amplitude
    0x0019, // (-682/10)dB = 0.000389 * amplitude
    0x0019, // (-681/10)dB = 0.000394 * amplitude
    0x001A, // (-680/10)dB = 0.000398 * amplitude
    0x001A, // (-679/10)dB = 0.000403 * amplitude
    0x001A, // (-678/10)dB = 0.000407 * amplitude
    0x001B, // (-677/10)dB = 0.000412 * amplitude
    0x001B, // (-676/10)dB = 0.000417 * amplitude
    0x001B, // (-675/10)dB = 0.000422 * amplitude
    0x001B, // (-674/10)dB = 0.000427 * amplitude
    0x001C, // (-673/10)dB = 0.000432 * amplitude
    0x001C, // (-672/10)dB = 0.000437 * amplitude
    0x001C, // (-671/10)dB = 0.000442 * amplitude
    0x001D, // (-670/10)dB = 0.000447 * amplitude
    0x001D, // (-669/10)dB = 0.000452 * amplitude
    0x001D, // (-668/10)dB = 0.000457 * amplitude
    0x001E, // (-667/10)dB = 0.000462 * amplitude
    0x001E, // (-666/10)dB = 0.000468 * amplitude
    0x001F, // (-665/10)dB = 0.000473 * amplitude
    0x001F, // (-664/10)dB = 0.000479 * amplitude
    0x001F, // (-663/10)dB = 0.000484 * amplitude
    0x0020, // (-662/10)dB = 0.000490 * amplitude
    0x0020, // (-661/10)dB = 0.000495 * amplitude
    0x0020, // (-660/10)dB = 0.000501 * amplitude
    0x0021, // (-659/10)dB = 0.000507 * amplitude
    0x0021, // (-658/10)dB = 0.000513 * amplitude
    0x0022, // (-657/10)dB = 0.000519 * amplitude
    0x0022, // (-656/10)dB = 0.000525 * amplitude
    0x0022, // (-655/10)dB = 0.000531 * amplitude
    0x0023, // (-654/10)dB = 0.000537 * amplitude
    0x0023, // (-653/10)dB = 0.000543 * amplitude
    0x0024, // (-652/10)dB = 0.000550 * amplitude
    0x0024, // (-651/10)dB = 0.000556 * amplitude
    0x0024, // (-650/10)dB = 0.000562 * amplitude
    0x0025, // (-649/10)dB = 0.000569 * amplitude
    0x0025, // (-648/10)dB = 0.000575 * amplitude
    0x0026, // (-647/10)dB = 0.000582 * amplitude
    0x0026, // (-646/10)dB = 0.000589 * amplitude
    0x0027, // (-645/10)dB = 0.000596 * amplitude
    0x0027, // (-644/10)dB = 0.000603 * amplitude
    0x0027, // (-643/10)dB = 0.000610 * amplitude
    0x0028, // (-642/10)dB = 0.000617 * amplitude
    0x0028, // (-641/10)dB = 0.000624 * amplitude
    0x0029, // (-640/10)dB = 0.000631 * amplitude
    0x0029, // (-639/10)dB = 0.000638 * amplitude
    0x002A, // (-638/10)dB = 0.000646 * amplitude
    0x002A, // (-637/10)dB = 0.000653 * amplitude
    0x002B, // (-636/10)dB = 0.000661 * amplitude
    0x002B, // (-635/10)dB = 0.000668 * amplitude
    0x002C, // (-634/10)dB = 0.000676 * amplitude
    0x002C, // (-633/10)dB = 0.000684 * amplitude
    0x002D, // (-632/10)dB = 0.000692 * amplitude
    0x002D, // (-631/10)dB = 0.000700 * amplitude
    0x002E, // (-630/10)dB = 0.000708 * amplitude
    0x002E, // (-629/10)dB = 0.000716 * amplitude
    0x002F, // (-628/10)dB = 0.000724 * amplitude
    0x0030, // (-627/10)dB = 0.000733 * amplitude
    0x0030, // (-626/10)dB = 0.000741 * amplitude
    0x0031, // (-625/10)dB = 0.000750 * amplitude
    0x0031, // (-624/10)dB = 0.000759 * amplitude
    0x0032, // (-623/10)dB = 0.000767 * amplitude
    0x0032, // (-622/10)dB = 0.000776 * amplitude
    0x0033, // (-621/10)dB = 0.000785 * amplitude
    0x0034, // (-620/10)dB = 0.000794 * amplitude
    0x0034, // (-619/10)dB = 0.000804 * amplitude
    0x0035, // (-618/10)dB = 0.000813 * amplitude
    0x0035, // (-617/10)dB = 0.000822 * amplitude
    0x0036, // (-616/10)dB = 0.000832 * amplitude
    0x0037, // (-615/10)dB = 0.000841 * amplitude
    0x0037, // (-614/10)dB = 0.000851 * amplitude
    0x0038, // (-613/10)dB = 0.000861 * amplitude
    0x0039, // (-612/10)dB = 0.000871 * amplitude
    0x0039, // (-611/10)dB = 0.000881 * amplitude
    0x003A, // (-610/10)dB = 0.000891 * amplitude
    0x003B, // (-609/10)dB = 0.000902 * amplitude
    0x003B, // (-608/10)dB = 0.000912 * amplitude
    0x003C, // (-607/10)dB = 0.000923 * amplitude
    0x003D, // (-606/10)dB = 0.000933 * amplitude
    0x003D, // (-605/10)dB = 0.000944 * amplitude
    0x003E, // (-604/10)dB = 0.000955 * amplitude
    0x003F, // (-603/10)dB = 0.000966 * amplitude
    0x0040, // (-602/10)dB = 0.000977 * amplitude
    0x0040, // (-601/10)dB = 0.000989 * amplitude
    0x0041, // (-600/10)dB = 0.001000 * amplitude
    0x0042, // (-599/10)dB = 0.001012 * amplitude
    0x0043, // (-598/10)dB = 0.001023 * amplitude
    0x0043, // (-597/10)dB = 0.001035 * amplitude
    0x0044, // (-596/10)dB = 0.001047 * amplitude
    0x0045, // (-595/10)dB = 0.001059 * amplitude
    0x0046, // (-594/10)dB = 0.001072 * amplitude
    0x0047, // (-593/10)dB = 0.001084 * amplitude
    0x0047, // (-592/10)dB = 0.001096 * amplitude
    0x0048, // (-591/10)dB = 0.001109 * amplitude
    0x0049, // (-590/10)dB = 0.001122 * amplitude
    0x004A, // (-589/10)dB = 0.001135 * amplitude
    0x004B, // (-588/10)dB = 0.001148 * amplitude
    0x004C, // (-587/10)dB = 0.001161 * amplitude
    0x004C, // (-586/10)dB = 0.001175 * amplitude
    0x004D, // (-585/10)dB = 0.001189 * amplitude
    0x004E, // (-584/10)dB = 0.001202 * amplitude
    0x004F, // (-583/10)dB = 0.001216 * amplitude
    0x0050, // (-582/10)dB = 0.001230 * amplitude
    0x0051, // (-581/10)dB = 0.001245 * amplitude
    0x0052, // (-580/10)dB = 0.001259 * amplitude
    0x0053, // (-579/10)dB = 0.001274 * amplitude
    0x0054, // (-578/10)dB = 0.001288 * amplitude
    0x0055, // (-577/10)dB = 0.001303 * amplitude
    0x0056, // (-576/10)dB = 0.001318 * amplitude
    0x0057, // (-575/10)dB = 0.001334 * amplitude
    0x0058, // (-574/10)dB = 0.001349 * amplitude
    0x0059, // (-573/10)dB = 0.001365 * amplitude
    0x005A, // (-572/10)dB = 0.001380 * amplitude
    0x005B, // (-571/10)dB = 0.001396 * amplitude
    0x005C, // (-570/10)dB = 0.001413 * amplitude
    0x005D, // (-569/10)dB = 0.001429 * amplitude
    0x005E, // (-568/10)dB = 0.001445 * amplitude
    0x005F, // (-567/10)dB = 0.001462 * amplitude
    0x0060, // (-566/10)dB = 0.001479 * amplitude
    0x0062, // (-565/10)dB = 0.001496 * amplitude
    0x0063, // (-564/10)dB = 0.001514 * amplitude
    0x0064, // (-563/10)dB = 0.001531 * amplitude
    0x0065, // (-562/10)dB = 0.001549 * amplitude
    0x0066, // (-561/10)dB = 0.001567 * amplitude
    0x0067, // (-560/10)dB = 0.001585 * amplitude
    0x0069, // (-559/10)dB = 0.001603 * amplitude
    0x006A, // (-558/10)dB = 0.001622 * amplitude
    0x006B, // (-557/10)dB = 0.001641 * amplitude
    0x006C, // (-556/10)dB = 0.001660 * amplitude
    0x006E, // (-555/10)dB = 0.001679 * amplitude
    0x006F, // (-554/10)dB = 0.001698 * amplitude
    0x0070, // (-553/10)dB = 0.001718 * amplitude
    0x0071, // (-552/10)dB = 0.001738 * amplitude
    0x0073, // (-551/10)dB = 0.001758 * amplitude
    0x0074, // (-550/10)dB = 0.001778 * amplitude
    0x0075, // (-549/10)dB = 0.001799 * amplitude
    0x0077, // (-548/10)dB = 0.001820 * amplitude
    0x0078, // (-547/10)dB = 0.001841 * amplitude
    0x007A, // (-546/10)dB = 0.001862 * amplitude
    0x007B, // (-545/10)dB = 0.001884 * amplitude
    0x007C, // (-544/10)dB = 0.001905 * amplitude
    0x007E, // (-543/10)dB = 0.001928 * amplitude
    0x007F, // (-542/10)dB = 0.001950 * amplitude
    0x0081, // (-541/10)dB = 0.001972 * amplitude
    0x0082, // (-540/10)dB = 0.001995 * amplitude
    0x0084, // (-539/10)dB = 0.002018 * amplitude
    0x0085, // (-538/10)dB = 0.002042 * amplitude
    0x0087, // (-537/10)dB = 0.002065 * amplitude
    0x0088, // (-536/10)dB = 0.002089 * amplitude
    0x008A, // (-535/10)dB = 0.002113 * amplitude
    0x008C, // (-534/10)dB = 0.002138 * amplitude
    0x008D, // (-533/10)dB = 0.002163 * amplitude
    0x008F, // (-532/10)dB = 0.002188 * amplitude
    0x0091, // (-531/10)dB = 0.002213 * amplitude
    0x0092, // (-530/10)dB = 0.002239 * amplitude
    0x0094, // (-529/10)dB = 0.002265 * amplitude
    0x0096, // (-528/10)dB = 0.002291 * amplitude
    0x0097, // (-527/10)dB = 0.002317 * amplitude
    0x0099, // (-526/10)dB = 0.002344 * amplitude
    0x009B, // (-525/10)dB = 0.002371 * amplitude
    0x009D, // (-524/10)dB = 0.002399 * amplitude
    0x009F, // (-523/10)dB = 0.002427 * amplitude
    0x00A0, // (-522/10)dB = 0.002455 * amplitude
    0x00A2, // (-521/10)dB = 0.002483 * amplitude
    0x00A4, // (-520/10)dB = 0.002512 * amplitude
    0x00A6, // (-519/10)dB = 0.002541 * amplitude
    0x00A8, // (-518/10)dB = 0.002570 * amplitude
    0x00AA, // (-517/10)dB = 0.002600 * amplitude
    0x00AC, // (-516/10)dB = 0.002630 * amplitude
    0x00AE, // (-515/10)dB = 0.002661 * amplitude
    0x00B0, // (-514/10)dB = 0.002692 * amplitude
    0x00B2, // (-513/10)dB = 0.002723 * amplitude
    0x00B4, // (-512/10)dB = 0.002754 * amplitude
    0x00B6, // (-511/10)dB = 0.002786 * amplitude
    0x00B8, // (-510/10)dB = 0.002818 * amplitude
    0x00BA, // (-509/10)dB = 0.002851 * amplitude
    0x00BD, // (-508/10)dB = 0.002884 * amplitude
    0x00BF, // (-507/10)dB = 0.002917 * amplitude
    0x00C1, // (-506/10)dB = 0.002951 * amplitude
    0x00C3, // (-505/10)dB = 0.002985 * amplitude
    0x00C5, // (-504/10)dB = 0.003020 * amplitude
    0x00C8, // (-503/10)dB = 0.003055 * amplitude
    0x00CA, // (-502/10)dB = 0.003090 * amplitude
    0x00CC, // (-501/10)dB = 0.003126 * amplitude
    0x00CF, // (-500/10)dB = 0.003162 * amplitude
    0x00D1, // (-499/10)dB = 0.003199 * amplitude
    0x00D4, // (-498/10)dB = 0.003236 * amplitude
    0x00D6, // (-497/10)dB = 0.003273 * amplitude
    0x00D9, // (-496/10)dB = 0.003311 * amplitude
    0x00DB, // (-495/10)dB = 0.003350 * amplitude
    0x00DE, // (-494/10)dB = 0.003388 * amplitude
    0x00E0, // (-493/10)dB = 0.003428 * amplitude
    0x00E3, // (-492/10)dB = 0.003467 * amplitude
    0x00E5, // (-491/10)dB = 0.003508 * amplitude
    0x00E8, // (-490/10)dB = 0.003548 * amplitude
    0x00EB, // (-489/10)dB = 0.003589 * amplitude
    0x00ED, // (-488/10)dB = 0.003631 * amplitude
    0x00F0, // (-487/10)dB = 0.003673 * amplitude
    0x00F3, // (-486/10)dB = 0.003715 * amplitude
    0x00F6, // (-485/10)dB = 0.003758 * amplitude
    0x00F9, // (-484/10)dB = 0.003802 * amplitude
    0x00FC, // (-483/10)dB = 0.003846 * amplitude
    0x00FE, // (-482/10)dB = 0.003890 * amplitude
    0x0101, // (-481/10)dB = 0.003936 * amplitude
    0x0104, // (-480/10)dB = 0.003981 * amplitude
    0x0107, // (-479/10)dB = 0.004027 * amplitude
    0x010A, // (-478/10)dB = 0.004074 * amplitude
    0x010E, // (-477/10)dB = 0.004121 * amplitude
    0x0111, // (-476/10)dB = 0.004169 * amplitude
    0x0114, // (-475/10)dB = 0.004217 * amplitude
    0x0117, // (-474/10)dB = 0.004266 * amplitude
    0x011A, // (-473/10)dB = 0.004315 * amplitude
    0x011E, // (-472/10)dB = 0.004365 * amplitude
    0x0121, // (-471/10)dB = 0.004416 * amplitude
    0x0124, // (-470/10)dB = 0.004467 * amplitude
    0x0128, // (-469/10)dB = 0.004519 * amplitude
    0x012B, // (-468/10)dB = 0.004571 * amplitude
    0x012F, // (-467/10)dB = 0.004624 * amplitude
    0x0132, // (-466/10)dB = 0.004677 * amplitude
    0x0136, // (-465/10)dB = 0.004732 * amplitude
    0x0139, // (-464/10)dB = 0.004786 * amplitude
    0x013D, // (-463/10)dB = 0.004842 * amplitude
    0x0140, // (-462/10)dB = 0.004898 * amplitude
    0x0144, // (-461/10)dB = 0.004955 * amplitude
    0x0148, // (-460/10)dB = 0.005012 * amplitude
    0x014C, // (-459/10)dB = 0.005070 * amplitude
    0x0150, // (-458/10)dB = 0.005129 * amplitude
    0x0154, // (-457/10)dB = 0.005188 * amplitude
    0x0157, // (-456/10)dB = 0.005248 * amplitude
    0x015B, // (-455/10)dB = 0.005309 * amplitude
    0x015F, // (-454/10)dB = 0.005370 * amplitude
    0x0164, // (-453/10)dB = 0.005433 * amplitude
    0x0168, // (-452/10)dB = 0.005495 * amplitude
    0x016C, // (-451/10)dB = 0.005559 * amplitude
    0x0170, // (-450/10)dB = 0.005623 * amplitude
    0x0174, // (-449/10)dB = 0.005689 * amplitude
    0x0179, // (-448/10)dB = 0.005754 * amplitude
    0x017D, // (-447/10)dB = 0.005821 * amplitude
    0x0181, // (-446/10)dB = 0.005888 * amplitude
    0x0186, // (-445/10)dB = 0.005957 * amplitude
    0x018A, // (-444/10)dB = 0.006026 * amplitude
    0x018F, // (-443/10)dB = 0.006095 * amplitude
    0x0194, // (-442/10)dB = 0.006166 * amplitude
    0x0198, // (-441/10)dB = 0.006237 * amplitude
    0x019D, // (-440/10)dB = 0.006310 * amplitude
    0x01A2, // (-439/10)dB = 0.006383 * amplitude
    0x01A7, // (-438/10)dB = 0.006457 * amplitude
    0x01AC, // (-437/10)dB = 0.006531 * amplitude
    0x01B0, // (-436/10)dB = 0.006607 * amplitude
    0x01B6, // (-435/10)dB = 0.006683 * amplitude
    0x01BB, // (-434/10)dB = 0.006761 * amplitude
    0x01C0, // (-433/10)dB = 0.006839 * amplitude
    0x01C5, // (-432/10)dB = 0.006918 * amplitude
    0x01CA, // (-431/10)dB = 0.006998 * amplitude
    0x01CF, // (-430/10)dB = 0.007079 * amplitude
    0x01D5, // (-429/10)dB = 0.007161 * amplitude
    0x01DA, // (-428/10)dB = 0.007244 * amplitude
    0x01E0, // (-427/10)dB = 0.007328 * amplitude
    0x01E5, // (-426/10)dB = 0.007413 * amplitude
    0x01EB, // (-425/10)dB = 0.007499 * amplitude
    0x01F1, // (-424/10)dB = 0.007586 * amplitude
    0x01F6, // (-423/10)dB = 0.007674 * amplitude
    0x01FC, // (-422/10)dB = 0.007762 * amplitude
    0x0202, // (-421/10)dB = 0.007852 * amplitude
    0x0208, // (-420/10)dB = 0.007943 * amplitude
    0x020E, // (-419/10)dB = 0.008035 * amplitude
    0x0214, // (-418/10)dB = 0.008128 * amplitude
    0x021A, // (-417/10)dB = 0.008222 * amplitude
    0x0221, // (-416/10)dB = 0.008318 * amplitude
    0x0227, // (-415/10)dB = 0.008414 * amplitude
    0x022D, // (-414/10)dB = 0.008511 * amplitude
    0x0234, // (-413/10)dB = 0.008610 * amplitude
    0x023A, // (-412/10)dB = 0.008710 * amplitude
    0x0241, // (-411/10)dB = 0.008810 * amplitude
    0x0248, // (-410/10)dB = 0.008913 * amplitude
    0x024E, // (-409/10)dB = 0.009016 * amplitude
    0x0255, // (-408/10)dB = 0.009120 * amplitude
    0x025C, // (-407/10)dB = 0.009226 * amplitude
    0x0263, // (-406/10)dB = 0.009333 * amplitude
    0x026A, // (-405/10)dB = 0.009441 * amplitude
    0x0271, // (-404/10)dB = 0.009550 * amplitude
    0x0279, // (-403/10)dB = 0.009661 * amplitude
    0x0280, // (-402/10)dB = 0.009772 * amplitude
    0x0287, // (-401/10)dB = 0.009886 * amplitude
    0x028F, // (-400/10)dB = 0.010000 * amplitude
    0x0296, // (-399/10)dB = 0.010116 * amplitude
    0x029E, // (-398/10)dB = 0.010233 * amplitude
    0x02A6, // (-397/10)dB = 0.010351 * amplitude
    0x02AE, // (-396/10)dB = 0.010471 * amplitude
    0x02B6, // (-395/10)dB = 0.010593 * amplitude
    0x02BE, // (-394/10)dB = 0.010715 * amplitude
    0x02C6, // (-393/10)dB = 0.010839 * amplitude
    0x02CE, // (-392/10)dB = 0.010965 * amplitude
    0x02D6, // (-391/10)dB = 0.011092 * amplitude
    0x02DF, // (-390/10)dB = 0.011220 * amplitude
    0x02E7, // (-389/10)dB = 0.011350 * amplitude
    0x02F0, // (-388/10)dB = 0.011482 * amplitude
    0x02F9, // (-387/10)dB = 0.011614 * amplitude
    0x0301, // (-386/10)dB = 0.011749 * amplitude
    0x030A, // (-385/10)dB = 0.011885 * amplitude
    0x0313, // (-384/10)dB = 0.012023 * amplitude
    0x031D, // (-383/10)dB = 0.012162 * amplitude
    0x0326, // (-382/10)dB = 0.012303 * amplitude
    0x032F, // (-381/10)dB = 0.012445 * amplitude
    0x0339, // (-380/10)dB = 0.012589 * amplitude
    0x0342, // (-379/10)dB = 0.012735 * amplitude
    0x034C, // (-378/10)dB = 0.012882 * amplitude
    0x0356, // (-377/10)dB = 0.013032 * amplitude
    0x035F, // (-376/10)dB = 0.013183 * amplitude
    0x0369, // (-375/10)dB = 0.013335 * amplitude
    0x0374, // (-374/10)dB = 0.013490 * amplitude
    0x037E, // (-373/10)dB = 0.013646 * amplitude
    0x0388, // (-372/10)dB = 0.013804 * amplitude
    0x0393, // (-371/10)dB = 0.013964 * amplitude
    0x039D, // (-370/10)dB = 0.014125 * amplitude
    0x03A8, // (-369/10)dB = 0.014289 * amplitude
    0x03B3, // (-368/10)dB = 0.014454 * amplitude
    0x03BE, // (-367/10)dB = 0.014622 * amplitude
    0x03C9, // (-366/10)dB = 0.014791 * amplitude
    0x03D4, // (-365/10)dB = 0.014962 * amplitude
    0x03DF, // (-364/10)dB = 0.015136 * amplitude
    0x03EB, // (-363/10)dB = 0.015311 * amplitude
    0x03F7, // (-362/10)dB = 0.015488 * amplitude
    0x0402, // (-361/10)dB = 0.015668 * amplitude
    0x040E, // (-360/10)dB = 0.015849 * amplitude
    0x041A, // (-359/10)dB = 0.016032 * amplitude
    0x0426, // (-358/10)dB = 0.016218 * amplitude
    0x0433, // (-357/10)dB = 0.016406 * amplitude
    0x043F, // (-356/10)dB = 0.016596 * amplitude
    0x044C, // (-355/10)dB = 0.016788 * amplitude
    0x0458, // (-354/10)dB = 0.016982 * amplitude
    0x0465, // (-353/10)dB = 0.017179 * amplitude
    0x0472, // (-352/10)dB = 0.017378 * amplitude
    0x0480, // (-351/10)dB = 0.017579 * amplitude
    0x048D, // (-350/10)dB = 0.017783 * amplitude
    0x049A, // (-349/10)dB = 0.017989 * amplitude
    0x04A8, // (-348/10)dB = 0.018197 * amplitude
    0x04B6, // (-347/10)dB = 0.018408 * amplitude
    0x04C4, // (-346/10)dB = 0.018621 * amplitude
    0x04D2, // (-345/10)dB = 0.018836 * amplitude
    0x04E0, // (-344/10)dB = 0.019055 * amplitude
    0x04EF, // (-343/10)dB = 0.019275 * amplitude
    0x04FD, // (-342/10)dB = 0.019498 * amplitude
    0x050C, // (-341/10)dB = 0.019724 * amplitude
    0x051B, // (-340/10)dB = 0.019953 * amplitude
    0x052A, // (-339/10)dB = 0.020184 * amplitude
    0x053A, // (-338/10)dB = 0.020417 * amplitude
    0x0549, // (-337/10)dB = 0.020654 * amplitude
    0x0559, // (-336/10)dB = 0.020893 * amplitude
    0x0569, // (-335/10)dB = 0.021135 * amplitude
    0x0579, // (-334/10)dB = 0.021380 * amplitude
    0x0589, // (-333/10)dB = 0.021627 * amplitude
    0x0599, // (-332/10)dB = 0.021878 * amplitude
    0x05AA, // (-331/10)dB = 0.022131 * amplitude
    0x05BB, // (-330/10)dB = 0.022387 * amplitude
    0x05CC, // (-329/10)dB = 0.022646 * amplitude
    0x05DD, // (-328/10)dB = 0.022909 * amplitude
    0x05EE, // (-327/10)dB = 0.023174 * amplitude
    0x0600, // (-326/10)dB = 0.023442 * amplitude
    0x0612, // (-325/10)dB = 0.023714 * amplitude
    0x0624, // (-324/10)dB = 0.023988 * amplitude
    0x0636, // (-323/10)dB = 0.024266 * amplitude
    0x0648, // (-322/10)dB = 0.024547 * amplitude
    0x065B, // (-321/10)dB = 0.024831 * amplitude
    0x066E, // (-320/10)dB = 0.025119 * amplitude
    0x0681, // (-319/10)dB = 0.025410 * amplitude
    0x0694, // (-318/10)dB = 0.025704 * amplitude
    0x06A8, // (-317/10)dB = 0.026002 * amplitude
    0x06BB, // (-316/10)dB = 0.026303 * amplitude
    0x06CF, // (-315/10)dB = 0.026607 * amplitude
    0x06E3, // (-314/10)dB = 0.026915 * amplitude
    0x06F8, // (-313/10)dB = 0.027227 * amplitude
    0x070D, // (-312/10)dB = 0.027542 * amplitude
    0x0721, // (-311/10)dB = 0.027861 * amplitude
    0x0737, // (-310/10)dB = 0.028184 * amplitude
    0x074C, // (-309/10)dB = 0.028510 * amplitude
    0x0762, // (-308/10)dB = 0.028840 * amplitude
    0x0777, // (-307/10)dB = 0.029174 * amplitude
    0x078E, // (-306/10)dB = 0.029512 * amplitude
    0x07A4, // (-305/10)dB = 0.029854 * amplitude
    0x07BB, // (-304/10)dB = 0.030200 * amplitude
    0x07D2, // (-303/10)dB = 0.030549 * amplitude
    0x07E9, // (-302/10)dB = 0.030903 * amplitude
    0x0800, // (-301/10)dB = 0.031261 * amplitude
    0x0818, // (-300/10)dB = 0.031623 * amplitude
    0x0830, // (-299/10)dB = 0.031989 * amplitude
    0x0848, // (-298/10)dB = 0.032359 * amplitude
    0x0861, // (-297/10)dB = 0.032734 * amplitude
    0x087A, // (-296/10)dB = 0.033113 * amplitude
    0x0893, // (-295/10)dB = 0.033497 * amplitude
    0x08AC, // (-294/10)dB = 0.033884 * amplitude
    0x08C6, // (-293/10)dB = 0.034277 * amplitude
    0x08E0, // (-292/10)dB = 0.034674 * amplitude
    0x08FA, // (-291/10)dB = 0.035075 * amplitude
    0x0915, // (-290/10)dB = 0.035481 * amplitude
    0x0930, // (-289/10)dB = 0.035892 * amplitude
    0x094B, // (-288/10)dB = 0.036308 * amplitude
    0x0967, // (-287/10)dB = 0.036728 * amplitude
    0x0982, // (-286/10)dB = 0.037154 * amplitude
    0x099F, // (-285/10)dB = 0.037584 * amplitude
    0x09BB, // (-284/10)dB = 0.038019 * amplitude
    0x09D8, // (-283/10)dB = 0.038459 * amplitude
    0x09F5, // (-282/10)dB = 0.038905 * amplitude
    0x0A13, // (-281/10)dB = 0.039355 * amplitude
    0x0A31, // (-280/10)dB = 0.039811 * amplitude
    0x0A4F, // (-279/10)dB = 0.040272 * amplitude
    0x0A6D, // (-278/10)dB = 0.040738 * amplitude
    0x0A8C, // (-277/10)dB = 0.041210 * amplitude
    0x0AAB, // (-276/10)dB = 0.041687 * amplitude
    0x0ACB, // (-275/10)dB = 0.042170 * amplitude
    0x0AEB, // (-274/10)dB = 0.042658 * amplitude
    0x0B0C, // (-273/10)dB = 0.043152 * amplitude
    0x0B2C, // (-272/10)dB = 0.043652 * amplitude
    0x0B4D, // (-271/10)dB = 0.044157 * amplitude
    0x0B6F, // (-270/10)dB = 0.044668 * amplitude
    0x0B91, // (-269/10)dB = 0.045186 * amplitude
    0x0BB3, // (-268/10)dB = 0.045709 * amplitude
    0x0BD6, // (-267/10)dB = 0.046238 * amplitude
    0x0BF9, // (-266/10)dB = 0.046774 * amplitude
    0x0C1C, // (-265/10)dB = 0.047315 * amplitude
    0x0C40, // (-264/10)dB = 0.047863 * amplitude
    0x0C65, // (-263/10)dB = 0.048417 * amplitude
    0x0C89, // (-262/10)dB = 0.048978 * amplitude
    0x0CAE, // (-261/10)dB = 0.049545 * amplitude
    0x0CD4, // (-260/10)dB = 0.050119 * amplitude
    0x0CFA, // (-259/10)dB = 0.050699 * amplitude
    0x0D21, // (-258/10)dB = 0.051286 * amplitude
    0x0D48, // (-257/10)dB = 0.051880 * amplitude
    0x0D6F, // (-256/10)dB = 0.052481 * amplitude
    0x0D97, // (-255/10)dB = 0.053088 * amplitude
    0x0DBF, // (-254/10)dB = 0.053703 * amplitude
    0x0DE8, // (-253/10)dB = 0.054325 * amplitude
    0x0E11, // (-252/10)dB = 0.054954 * amplitude
    0x0E3B, // (-251/10)dB = 0.055590 * amplitude
    0x0E65, // (-250/10)dB = 0.056234 * amplitude
    0x0E90, // (-249/10)dB = 0.056885 * amplitude
    0x0EBB, // (-248/10)dB = 0.057544 * amplitude
    0x0EE6, // (-247/10)dB = 0.058210 * amplitude
    0x0F13, // (-246/10)dB = 0.058884 * amplitude
    0x0F3F, // (-245/10)dB = 0.059566 * amplitude
    0x0F6C, // (-244/10)dB = 0.060256 * amplitude
    0x0F9A, // (-243/10)dB = 0.060954 * amplitude
    0x0FC8, // (-242/10)dB = 0.061660 * amplitude
    0x0FF7, // (-241/10)dB = 0.062373 * amplitude
    0x1027, // (-240/10)dB = 0.063096 * amplitude
    0x1056, // (-239/10)dB = 0.063826 * amplitude
    0x1087, // (-238/10)dB = 0.064565 * amplitude
    0x10B8, // (-237/10)dB = 0.065313 * amplitude
    0x10E9, // (-236/10)dB = 0.066069 * amplitude
    0x111C, // (-235/10)dB = 0.066834 * amplitude
    0x114E, // (-234/10)dB = 0.067608 * amplitude
    0x1182, // (-233/10)dB = 0.068391 * amplitude
    0x11B5, // (-232/10)dB = 0.069183 * amplitude
    0x11EA, // (-231/10)dB = 0.069984 * amplitude
    0x121F, // (-230/10)dB = 0.070795 * amplitude
    0x1255, // (-229/10)dB = 0.071614 * amplitude
    0x128B, // (-228/10)dB = 0.072444 * amplitude
    0x12C2, // (-227/10)dB = 0.073282 * amplitude
    0x12FA, // (-226/10)dB = 0.074131 * amplitude
    0x1332, // (-225/10)dB = 0.074989 * amplitude
    0x136B, // (-224/10)dB = 0.075858 * amplitude
    0x13A4, // (-223/10)dB = 0.076736 * amplitude
    0x13DF, // (-222/10)dB = 0.077625 * amplitude
    0x141A, // (-221/10)dB = 0.078524 * amplitude
    0x1455, // (-220/10)dB = 0.079433 * amplitude
    0x1491, // (-219/10)dB = 0.080353 * amplitude
    0x14CE, // (-218/10)dB = 0.081283 * amplitude
    0x150C, // (-217/10)dB = 0.082224 * amplitude
    0x154B, // (-216/10)dB = 0.083176 * amplitude
    0x158A, // (-215/10)dB = 0.084140 * amplitude
    0x15CA, // (-214/10)dB = 0.085114 * amplitude
    0x160A, // (-213/10)dB = 0.086099 * amplitude
    0x164B, // (-212/10)dB = 0.087096 * amplitude
    0x168E, // (-211/10)dB = 0.088105 * amplitude
    0x16D0, // (-210/10)dB = 0.089125 * amplitude
    0x1714, // (-209/10)dB = 0.090157 * amplitude
    0x1758, // (-208/10)dB = 0.091201 * amplitude
    0x179E, // (-207/10)dB = 0.092257 * amplitude
    0x17E4, // (-206/10)dB = 0.093325 * amplitude
    0x182A, // (-205/10)dB = 0.094406 * amplitude
    0x1872, // (-204/10)dB = 0.095499 * amplitude
    0x18BB, // (-203/10)dB = 0.096605 * amplitude
    0x1904, // (-202/10)dB = 0.097724 * amplitude
    0x194E, // (-201/10)dB = 0.098855 * amplitude
    0x1999, // (-200/10)dB = 0.100000 * amplitude
    0x19E5, // (-199/10)dB = 0.101158 * amplitude
    0x1A32, // (-198/10)dB = 0.102329 * amplitude
    0x1A7F, // (-197/10)dB = 0.103514 * amplitude
    0x1ACE, // (-196/10)dB = 0.104713 * amplitude
    0x1B1D, // (-195/10)dB = 0.105925 * amplitude
    0x1B6E, // (-194/10)dB = 0.107152 * amplitude
    0x1BBF, // (-193/10)dB = 0.108393 * amplitude
    0x1C11, // (-192/10)dB = 0.109648 * amplitude
    0x1C65, // (-191/10)dB = 0.110917 * amplitude
    0x1CB9, // (-190/10)dB = 0.112202 * amplitude
    0x1D0E, // (-189/10)dB = 0.113501 * amplitude
    0x1D64, // (-188/10)dB = 0.114815 * amplitude
    0x1DBB, // (-187/10)dB = 0.116145 * amplitude
    0x1E13, // (-186/10)dB = 0.117490 * amplitude
    0x1E6C, // (-185/10)dB = 0.118850 * amplitude
    0x1EC7, // (-184/10)dB = 0.120226 * amplitude
    0x1F22, // (-183/10)dB = 0.121619 * amplitude
    0x1F7E, // (-182/10)dB = 0.123027 * amplitude
    0x1FDC, // (-181/10)dB = 0.124451 * amplitude
    0x203A, // (-180/10)dB = 0.125893 * amplitude
    0x209A, // (-179/10)dB = 0.127350 * amplitude
    0x20FA, // (-178/10)dB = 0.128825 * amplitude
    0x215C, // (-177/10)dB = 0.130317 * amplitude
    0x21BF, // (-176/10)dB = 0.131826 * amplitude
    0x2223, // (-175/10)dB = 0.133352 * amplitude
    0x2288, // (-174/10)dB = 0.134896 * amplitude
    0x22EE, // (-173/10)dB = 0.136458 * amplitude
    0x2356, // (-172/10)dB = 0.138038 * amplitude
    0x23BF, // (-171/10)dB = 0.139637 * amplitude
    0x2429, // (-170/10)dB = 0.141254 * amplitude
    0x2494, // (-169/10)dB = 0.142889 * amplitude
    0x2500, // (-168/10)dB = 0.144544 * amplitude
    0x256E, // (-167/10)dB = 0.146218 * amplitude
    0x25DD, // (-166/10)dB = 0.147911 * amplitude
    0x264D, // (-165/10)dB = 0.149624 * amplitude
    0x26BF, // (-164/10)dB = 0.151356 * amplitude
    0x2732, // (-163/10)dB = 0.153109 * amplitude
    0x27A6, // (-162/10)dB = 0.154882 * amplitude
    0x281B, // (-161/10)dB = 0.156675 * amplitude
    0x2892, // (-160/10)dB = 0.158489 * amplitude
    0x290B, // (-159/10)dB = 0.160325 * amplitude
    0x2984, // (-158/10)dB = 0.162181 * amplitude
    0x29FF, // (-157/10)dB = 0.164059 * amplitude
    0x2A7C, // (-156/10)dB = 0.165959 * amplitude
    0x2AFA, // (-155/10)dB = 0.167880 * amplitude
    0x2B79, // (-154/10)dB = 0.169824 * amplitude
    0x2BFA, // (-153/10)dB = 0.171791 * amplitude
    0x2C7C, // (-152/10)dB = 0.173780 * amplitude
    0x2D00, // (-151/10)dB = 0.175792 * amplitude
    0x2D86, // (-150/10)dB = 0.177828 * amplitude
    0x2E0D, // (-149/10)dB = 0.179887 * amplitude
    0x2E95, // (-148/10)dB = 0.181970 * amplitude
    0x2F1F, // (-147/10)dB = 0.184077 * amplitude
    0x2FAB, // (-146/10)dB = 0.186209 * amplitude
    0x3038, // (-145/10)dB = 0.188365 * amplitude
    0x30C7, // (-144/10)dB = 0.190546 * amplitude
    0x3158, // (-143/10)dB = 0.192752 * amplitude
    0x31EA, // (-142/10)dB = 0.194984 * amplitude
    0x327E, // (-141/10)dB = 0.197242 * amplitude
    0x3314, // (-140/10)dB = 0.199526 * amplitude
    0x33AB, // (-139/10)dB = 0.201837 * amplitude
    0x3444, // (-138/10)dB = 0.204174 * amplitude
    0x34DF, // (-137/10)dB = 0.206538 * amplitude
    0x357C, // (-136/10)dB = 0.208930 * amplitude
    0x361A, // (-135/10)dB = 0.211349 * amplitude
    0x36BB, // (-134/10)dB = 0.213796 * amplitude
    0x375D, // (-133/10)dB = 0.216272 * amplitude
    0x3801, // (-132/10)dB = 0.218776 * amplitude
    0x38A7, // (-131/10)dB = 0.221309 * amplitude
    0x394F, // (-130/10)dB = 0.223872 * amplitude
    0x39F9, // (-129/10)dB = 0.226464 * amplitude
    0x3AA5, // (-128/10)dB = 0.229087 * amplitude
    0x3B53, // (-127/10)dB = 0.231739 * amplitude
    0x3C03, // (-126/10)dB = 0.234423 * amplitude
    0x3CB5, // (-125/10)dB = 0.237137 * amplitude
    0x3D68, // (-124/10)dB = 0.239883 * amplitude
    0x3E1F, // (-123/10)dB = 0.242661 * amplitude
    0x3ED7, // (-122/10)dB = 0.245471 * amplitude
    0x3F91, // (-121/10)dB = 0.248313 * amplitude
    0x404D, // (-120/10)dB = 0.251189 * amplitude
    0x410C, // (-119/10)dB = 0.254097 * amplitude
    0x41CD, // (-118/10)dB = 0.257040 * amplitude
    0x4290, // (-117/10)dB = 0.260016 * amplitude
    0x4355, // (-116/10)dB = 0.263027 * amplitude
    0x441D, // (-115/10)dB = 0.266073 * amplitude
    0x44E7, // (-114/10)dB = 0.269153 * amplitude
    0x45B3, // (-113/10)dB = 0.272270 * amplitude
    0x4682, // (-112/10)dB = 0.275423 * amplitude
    0x4753, // (-111/10)dB = 0.278612 * amplitude
    0x4826, // (-110/10)dB = 0.281838 * amplitude
    0x48FC, // (-109/10)dB = 0.285102 * amplitude
    0x49D4, // (-108/10)dB = 0.288403 * amplitude
    0x4AAF, // (-107/10)dB = 0.291743 * amplitude
    0x4B8D, // (-106/10)dB = 0.295121 * amplitude
    0x4C6D, // (-105/10)dB = 0.298538 * amplitude
    0x4D4F, // (-104/10)dB = 0.301995 * amplitude
    0x4E34, // (-103/10)dB = 0.305492 * amplitude
    0x4F1C, // (-102/10)dB = 0.309030 * amplitude
    0x5007, // (-101/10)dB = 0.312608 * amplitude
    0x50F4, // (-100/10)dB = 0.316228 * amplitude
    0x51E4, // (-99/10)dB = 0.319890 * amplitude
    0x52D7, // (-98/10)dB = 0.323594 * amplitude
    0x53CC, // (-97/10)dB = 0.327341 * amplitude
    0x54C5, // (-96/10)dB = 0.331131 * amplitude
    0x55C0, // (-95/10)dB = 0.334965 * amplitude
    0x56BE, // (-94/10)dB = 0.338844 * amplitude
    0x57BF, // (-93/10)dB = 0.342768 * amplitude
    0x58C3, // (-92/10)dB = 0.346737 * amplitude
    0x59CA, // (-91/10)dB = 0.350752 * amplitude
    0x5AD5, // (-90/10)dB = 0.354813 * amplitude
    0x5BE2, // (-89/10)dB = 0.358922 * amplitude
    0x5CF2, // (-88/10)dB = 0.363078 * amplitude
    0x5E06, // (-87/10)dB = 0.367282 * amplitude
    0x5F1C, // (-86/10)dB = 0.371535 * amplitude
    0x6036, // (-85/10)dB = 0.375837 * amplitude
    0x6154, // (-84/10)dB = 0.380189 * amplitude
    0x6274, // (-83/10)dB = 0.384592 * amplitude
    0x6398, // (-82/10)dB = 0.389045 * amplitude
    0x64BF, // (-81/10)dB = 0.393550 * amplitude
    0x65EA, // (-80/10)dB = 0.398107 * amplitude
    0x6718, // (-79/10)dB = 0.402717 * amplitude
    0x684A, // (-78/10)dB = 0.407380 * amplitude
    0x697F, // (-77/10)dB = 0.412098 * amplitude
    0x6AB7, // (-76/10)dB = 0.416869 * amplitude
    0x6BF4, // (-75/10)dB = 0.421697 * amplitude
    0x6D34, // (-74/10)dB = 0.426580 * amplitude
    0x6E78, // (-73/10)dB = 0.431519 * amplitude
    0x6FBF, // (-72/10)dB = 0.436516 * amplitude
    0x710A, // (-71/10)dB = 0.441570 * amplitude
    0x7259, // (-70/10)dB = 0.446684 * amplitude
    0x73AC, // (-69/10)dB = 0.451856 * amplitude
    0x7503, // (-68/10)dB = 0.457088 * amplitude
    0x765E, // (-67/10)dB = 0.462381 * amplitude
    0x77BD, // (-66/10)dB = 0.467735 * amplitude
    0x7920, // (-65/10)dB = 0.473151 * amplitude
    0x7A87, // (-64/10)dB = 0.478630 * amplitude
    0x7BF2, // (-63/10)dB = 0.484172 * amplitude
    0x7D62, // (-62/10)dB = 0.489779 * amplitude
    0x7ED5, // (-61/10)dB = 0.495450 * amplitude
    0x804D, // (-60/10)dB = 0.501187 * amplitude
    0x81CA, // (-59/10)dB = 0.506991 * amplitude
    0x834A, // (-58/10)dB = 0.512861 * amplitude
    0x84D0, // (-57/10)dB = 0.518800 * amplitude
    0x8659, // (-56/10)dB = 0.524807 * amplitude
    0x87E8, // (-55/10)dB = 0.530884 * amplitude
    0x897A, // (-54/10)dB = 0.537032 * amplitude
    0x8B12, // (-53/10)dB = 0.543250 * amplitude
    0x8CAE, // (-52/10)dB = 0.549541 * amplitude
    0x8E4F, // (-51/10)dB = 0.555904 * amplitude
    0x8FF5, // (-50/10)dB = 0.562341 * amplitude
    0x91A0, // (-49/10)dB = 0.568853 * amplitude
    0x9350, // (-48/10)dB = 0.575440 * amplitude
    0x9504, // (-47/10)dB = 0.582103 * amplitude
    0x96BE, // (-46/10)dB = 0.588844 * amplitude
    0x987D, // (-45/10)dB = 0.595662 * amplitude
    0x9A41, // (-44/10)dB = 0.602560 * amplitude
    0x9C0A, // (-43/10)dB = 0.609537 * amplitude
    0x9DD9, // (-42/10)dB = 0.616595 * amplitude
    0x9FAD, // (-41/10)dB = 0.623735 * amplitude
    0xA186, // (-40/10)dB = 0.630957 * amplitude
    0xA365, // (-39/10)dB = 0.638263 * amplitude
    0xA549, // (-38/10)dB = 0.645654 * amplitude
    0xA733, // (-37/10)dB = 0.653131 * amplitude
    0xA923, // (-36/10)dB = 0.660693 * amplitude
    0xAB18, // (-35/10)dB = 0.668344 * amplitude
    0xAD13, // (-34/10)dB = 0.676083 * amplitude
    0xAF14, // (-33/10)dB = 0.683912 * amplitude
    0xB11B, // (-32/10)dB = 0.691831 * amplitude
    0xB328, // (-31/10)dB = 0.699842 * amplitude
    0xB53B, // (-30/10)dB = 0.707946 * amplitude
    0xB755, // (-29/10)dB = 0.716143 * amplitude
    0xB974, // (-28/10)dB = 0.724436 * amplitude
    0xBB9A, // (-27/10)dB = 0.732825 * amplitude
    0xBDC6, // (-26/10)dB = 0.741310 * amplitude
    0xBFF9, // (-25/10)dB = 0.749894 * amplitude
    0xC232, // (-24/10)dB = 0.758578 * amplitude
    0xC471, // (-23/10)dB = 0.767361 * amplitude
    0xC6B8, // (-22/10)dB = 0.776247 * amplitude
    0xC905, // (-21/10)dB = 0.785236 * amplitude
    0xCB59, // (-20/10)dB = 0.794328 * amplitude
    0xCDB3, // (-19/10)dB = 0.803526 * amplitude
    0xD015, // (-18/10)dB = 0.812831 * amplitude
    0xD27E, // (-17/10)dB = 0.822243 * amplitude
    0xD4EE, // (-16/10)dB = 0.831764 * amplitude
    0xD765, // (-15/10)dB = 0.841395 * amplitude
    0xD9E4, // (-14/10)dB = 0.851138 * amplitude
    0xDC6A, // (-13/10)dB = 0.860994 * amplitude
    0xDEF7, // (-12/10)dB = 0.870964 * amplitude
    0xE18C, // (-11/10)dB = 0.881049 * amplitude
    0xE429, // (-10/10)dB = 0.891251 * amplitude
    0xE6CD, // (-9/10)dB = 0.901571 * amplitude
    0xE979, // (-8/10)dB = 0.912011 * amplitude
    0xEC2D, // (-7/10)dB = 0.922571 * amplitude
    0xEEE9, // (-6/10)dB = 0.933254 * amplitude
    0xF1AD, // (-5/10)dB = 0.944061 * amplitude
    0xF47A, // (-4/10)dB = 0.954993 * amplitude
    0xF74F, // (-3/10)dB = 0.966051 * amplitude
    0xFA2C, // (-2/10)dB = 0.977237 * amplitude
    0xFD11, // (-1/10)dB = 0.98855