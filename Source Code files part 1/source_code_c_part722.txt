>HIGHSHIFT))
#define VR1V0   (VR1|(V0>>HIGHSHIFT))
#define VR2V0   (VR2|(V0>>HIGHSHIFT))
#define VR3V0   (VR3|(V0>>HIGHSHIFT))
#define PV0     (P|(V0>>HIGHSHIFT))

State MMRStates[9] = {
/*    0 : no bits       */ {  1,     0,  2,   V0,  3,    0,  0, V0V0},
/*    1 : 00            */ {  4,     0,  0,   H0,  0,    P,  0,   H1},
/*    2 : 0             */ {  5,     0,  0,  VL1,  0,    H,  0,  VR1},
/*    3 : 01            */ {  2,   VL1,  2,  VR1,  0,VL1V0,  0,VR1V0},
/*    4 : 0000          */ {  0, EOFB6,  0,  VL2,  6,    0,  0,  VR2},
/*    5 : 000           */ {  7,     0,  2,    P,  8,    0,  0,  PV0},
/*    6 : 000001        */ {  2,   VL3,  2,  VR3,  0,VL3V0,  0,VR3V0},
/*    7 : 00000         */ {  0, EOFB7,  0,  VL3,  0,  ERR,  0,  VR3},
/*    8 : 00001         */ {  2,   VL2,  2,  VR2,  0,VL2V0,  0,VR2V0}
};

//==============================================================================
const BYTE whitespace[256] =
{
    8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,
    5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0
};

void RawToChange(LPT4STATE lpt4s)
{
	LPWORD outptr = (LPWORD)lpt4s->lpbOut;
	LPBYTE inptr = lpt4s->lpbIn;
	LPBYTE inend = inptr + lpt4s->cbIn;
	WORD bitwidth = lpt4s->cbLine * 8;
	WORD currcolumn = lpt4s->wColumn;
	WORD currcolor = lpt4s->wColor;
	WORD currbit = lpt4s->wBit;
	BYTE currbyte;
	WORD space;
	
  if (inptr >= inend)
		goto inempty;
	if (currcolor)
		goto black;

white:
	if (currbyte = *inptr >> currbit)
	{
		space = whitespace[currbyte];
		currbit += space;
		currcolumn += space;
		if (currcolumn >= bitwidth)
		{
	    currbit -= (currcolumn-bitwidth);
	    goto eol;
		}

		*outptr++ = currcolumn;
	}

  else if ((currcolumn += (8-currbit)) >= bitwidth)
  {
  	currbit = 8 - (currcolumn - bitwidth);
		goto eol;
  }

  else
  {
		currbit = 0;
		while ((++inptr < inend) && (!*inptr))
		{
	    currcolumn += 8;
	    if (currcolumn >= bitwidth)
	    {
				currbit = 8-(currcolumn-bitwidth);
				goto eol;
	    }
		}
		if (inptr >= inend)
	    goto inempty;
		space = whitespace[*inptr];
		currbit += space;
		currcolumn += space;
		if (currcolumn >= bitwidth)
		{
	    currbit -= (currcolumn-bitwidth);
	    goto eol;
		}
		*outptr++ = currcolumn;
	}
  currcolor = 1;

black:

	if ((currbyte = ((signed char)*inptr) >> currbit) != 0xff)
	{
		space = whitespace[255-currbyte];
		currbit += space;
		currcolumn += space;
		if (currcolumn >= bitwidth)
		{
	  	currbit -= (currcolumn-bitwidth);
	    goto eol;
		}
		*outptr++ = currcolumn;
  }

  else if ((currcolumn += (8-currbit)) >= bitwidth)
  {
		currbit = 8 - (currcolumn - bitwidth);
		goto eol;
  }

  else
  {
		currbit = 0;
		while ((++inptr < inend) && (*inptr==0xff))
		{
			currcolumn += 8;
			if (currcolumn >= bitwidth)
			{
				currbit = 8-(currcolumn-bitwidth);
				goto eol;
			}
		}

		if (inptr >= inend)
			goto inempty;
		space = whitespace[255 - *inptr];
		currbit += space;
		currcolumn += space;
		if (currcolumn >= bitwidth)
		{
			currbit -= (currcolumn-bitwidth);
			goto eol;
		}
		*outptr++ = currcolumn;
	}

	currcolor = 0;
	goto white;

eol:
	*outptr++ = bitwidth;
	*outptr++ = bitwidth;
	*outptr++ = bitwidth;
	*outptr++ = bitwidth;
	*outptr++ = (WORD)-1;
	*outptr++ = (WORD)-1;
	
	lpt4s->wBit = currbit;
	lpt4s->cbIn = (WORD)(((LPBYTE)inend) - ((LPBYTE)inptr));
	lpt4s->lpbIn = inptr;
	lpt4s->lpbOut = (LPBYTE)outptr;
	lpt4s->wColor = 0;
	lpt4s->wColumn = 0;
	lpt4s->wRet = RET_END_OF_LINE;
	return;

inempty:

	lpt4s->wBit = 0;
	lpt4s->cbIn = 0;
	lpt4s->lpbIn = inend;
	lpt4s->lpbOut = (LPBYTE)outptr;
	lpt4s->wColor = currcolor;
	lpt4s->wColumn = currcolumn;
	lpt4s->wRet = RET_INPUT_EMPTY1;
	return;
}

//==============================================================================
__inline void EncodeRun(LPRUNINFO ptr, LPWORD FAR *outptr, LPWORD currbit)
{
	WORD bits = ptr->bitsused;
  WORD data = ptr->data;

  if (!*currbit)
  {
		**outptr = data;
		*currbit = bits;
  }

  else
  {
		**outptr |= (data << *currbit);
		*currbit += bits;
		if (*currbit > 15)
		{
	    *++*outptr = data >> ((16 - (*currbit - bits)));
	    *currbit &= 15;
		}
	}
}

//==============================================================================
void MMRToChange(LPT4STATE lpt4s)
{
	nextinfo_t FAR *nextptr;
	BYTE currbyte;
	WORD size;
	short b1,b2;
	LPWORD x;

	// Load context
	LPBYTE inptr    =          lpt4s->lpbIn;
	LPWORD outptr   = (LPWORD) lpt4s->lpbOut;
	LPWORD refline  = (LPWORD) lpt4s->lpbRef;
	LPBYTE inend    =          lpt4s->lpbIn + lpt4s->cbIn;
	WORD state      =          lpt4s->wToggle;
	WORD bitwidth   =          lpt4s->cbLine * 8;
	WORD currbit    =          lpt4s->wBit;
	WORD currstate  =          lpt4s->wWord;
	WORD currcolumn =          lpt4s->wColumn;
	WORD currcolor  =          lpt4s->wColor;

	DEBUGMSG(dbg && lpt4s->wRet == RET_INPUT_EMPTY1,
		("IN:  Column %d, color %d, state %d, currstate %d, *ref = %d\n\r",
			currcolumn,currcolor,state,currstate,*refline));
			
	if (inptr >= inend)
	{
		switch (lpt4s->wRet)
		{
			case RET_END_OF_LINE:
			case RET_BEG_OF_PAGE:
				lpt4s->wRet = RET_INPUT_EMPTY2;
				break;
				
			default:
				lpt4s->wRet = RET_INPUT_EMPTY1;
				break;
		}
		DEBUGMSG(dbg,("Bailing 1 %d\n\r",lpt4s->wRet));
		return;
	}

	switch (lpt4s->wRet)
	{
		case RET_END_OF_LINE:
		case RET_BEG_OF_PAGE:
			state = 0; // yes, fall through
		case RET_INPUT_EMPTY2:
			b1 = *refline;
			b2 = *(refline + 1);
			break;

		default:
			x = refline + currcolor;
			if ((b1 = *x++) <= (short)currcolumn)
			{
	    	x++;
	    	while ((b1 = *x++) <= (short)currcolumn)
	    	{
					x++;
					refline += 2;
				}
			}
			b2 = *x++;
			break;
	}
		
	if (currbit & 1)
	{
		currbit++;
		state = 0;
		currstate = 0;
		currcolor ^= 1;
		currcolumn = *outptr++ = b1;

		if (currcolumn < bitwidth)
		{
	  	x = refline+currcolor;
	  	if ((b1 = *x++) <= (short)currcolumn)
	  	{
				x++;
				while ((b1 = *x++) <= (short)currcolumn)
					{ x++; refline += 2; }
	    }
	    b2 = *x++;
		}

		else
		{
	  	currbit-=2;
	    goto eol;
		}
	} // end if (currbit & 1)
	
  if (currbit == 8)
  {
		currbit = 0;
		if (++inptr == inend)
		{
	    DEBUGMSG(dbg,("Bailing 2\n\r"));
	    currbit = (WORD)(-2); //adjusted +2 below
	    lpt4s->wRet = RET_INPUT_EMPTY1;
	    goto out;
		}
	}

	do // fetch bytes
	{
		currbyte = *inptr >> currbit;

		do // fetch bits
		{
	    if (!state)
	    {
				DEBUGMSG(dbg,("Currstate = %d\n\r",currstate));
				nextptr = &MMRStates[currstate].nextinf[currbyte & 3];
				currstate = nextptr->nextstate;
				DEBUGMSG(dbg,("Currstate set to %d\n\r",currstate));

				if (size = nextptr->size)
				{
		    	if (size & HIGHSET)
		    	{
						DEBUGMSG(dbg,("Taking high: %4.4x\n\r",size & HIGHSET));

						switch (size & HIGHSET)
						{
							case VL3:
							case VL2:
							case VL1:
							case V0:
							case VR1:
							case VR2:
							case VR3:
								currcolumn = b1+(size>>HIGHSHIFT)- (V0>>HIGHSHIFT);
								*outptr++ = currcolumn;
								currcolor^=1;
								break;
								
							case P:
								currcolumn = b2;
								break;
								
							case H:
								state = 1;
								currstate = (currcolor? B:W);
								break;
								
							case H0:
								state = 1;
								currstate = (currcolor? B0:W0);
								break;
								
							case H1:
								state = 1;
								currstate = (currcolor?B1:W1);
								break;
								
							case ERR:
								DEBUGMSG(dbg,("Bailing 3\n\r"));
								lpt4s->wRet = RET_DECODE_ERR;
								goto out;
								
							case EOFB6:
								state = 3;
								currstate = 6;
								break;
								
							case EOFB7:
								state = 3;
								currstate = 7;
								break;
								
						} // end switch (size & HIGHSET)
						
						size &= ~HIGHSET;

						if (currcolumn < bitwidth)
						{
			    		x = refline + currcolor;
			    		if ((b1 = *x++) <= (short)currcolumn)
			    		{
								x++;
								while ((b1 = *x++) <= (short)currcolumn)
								{
				    			x++;
				    			refline += 2;
								}
			    		}
			    		b2 = *x++;
						}

						else if (size & LOWSET)
						{
							currbit--;
							DEBUGMSG(dbg,("Bailing 4\n\r"));
							goto eol;
						}
		    	} // end if (size & HIGHSET)
		    	
		    	if (size & LOWSET)
		    	{
		    		DEBUGMSG(dbg,("Taking low : %4.4x\n\r", (size & LOWSET)<<HIGHSHIFT));

		    		switch ((size & LOWSET) << HIGHSHIFT)
		    		{
							case V0:
								currcolumn = *outptr++ = b1;
								currcolor^=1;
								break;
						}

						if (currcolumn >= bitwidth)
						{
							DEBUGMSG(dbg,("Taking new escape!\n\r"));
							goto eol;
						}
						
						size &= ~HIGHSET;
						x = refline + currcolor;
						DEBUGMSG(dbg,("Current column = %d, bitwidth = %d\n\r",
							currcolumn,bitwidth));

						if ((b1 = *x++) <= (short)currcolumn)
						{
			    		DEBUGMSG(dbg,("Looping, b1 = %d, *x = %d\n\r", b1,*x));
			   			x++;
			    		while ((b1 = *x++) <= (short)currcolumn)
			    		{
			    			DEBUGMSG(dbg,("Looping, b1 = %d, *x = %d\n\r", b1,*x));
								x++;
								refline += 2;
			    		}
						}
						b2 = *x++;
						
		    	} // end if (size & LOWSET)

				}
			}

			else if (state < 3)
			{
				DEBUGMSG(dbg,("MHCurrstate = %d (%d)\n\r",currstate,state));
				nextptr = &MHStates[currstate].nextinf[currbyte & 3];
				currstate = nextptr->nextstate;

				DEBUGMSG(dbg,("MHCurrstate set to %d\n\r",currstate));

				if (size = nextptr->size)
				{
					switch (size & ~SIZE_MASK)
		  		{
						case 0:
							currcolumn += size;
							if ((state == 2) || (currcolumn != bitwidth))
								*outptr++ = currcolumn;
							currcolor ^= 1;
							state = (state+1)%3;
							break;
					
						case SIZE_SPEC:
						  if (size == SIZE_SPEC)
						  {
								if ((state == 2) || (currcolumn != bitwidth))
							  	*outptr++ = currcolumn;
								currcolor ^= 1;
								state = (state+1)%3;
								break;
							}
							else
							{
								lpt4s->wRet = RET_SPURIOUS_EOL;
								goto out;
							}

						default:
					    currcolumn += size & SIZE_MASK;
					    break;
					    
		    	} 
				} // end if (size = nextptr->size)
		
				if (!state)
				{
		    	if (currcolumn < bitwidth)
		    	{
						x = refline + currcolor;
						b1 = *x++;
						while (b1 <= (short)currcolumn)
							{ x++; b1 = *x++; }
						b2 = *x++;
		   		}

		    	switch (currstate)
		    	{
						case W:
						case B:
					    currstate = W;
					    break;
					    
						case W0:
						case B0:
					    currstate = 2;
					    break;
					    
						case W1:
						case B1:
			    		currstate = 0;
					    if (currcolumn < bitwidth)
					    {
								currcolumn = *outptr++ = b1;
								currcolor^=1;
								if (currcolumn < bitwidth)
								{
							    x = refline + currcolor;
							    b1 = *x++;
							    while (b1 <= (short)currcolumn)
							    	{ x++; b1 = *x++; }
				    			b2 = *x++;
								}
			    		}

			    		else
			    		{
								currbit--;
								goto eol;
							}
		    		} // end switch (currstate)

					}
	    }

	    else 
	    {
				switch (currbyte & 3)
				{
		    	case 0:
		    		break;
		    		
		    	case 1:
						if ((currstate != 11) && (currstate != 23))
						{
			    		lpt4s->wRet = RET_DECODE_ERR;
			    		DEBUGMSG(dbg,("Bailing 7\n\r"));
			   			goto out;
						}
						break;

		    	case 2:
						if ((currstate != 10) && (currstate != 22))
						{
			    		lpt4s->wRet = RET_DECODE_ERR;
			    		DEBUGMSG(dbg,("Bailing 8\n\r"));
			    		goto out;
						}
						break;

		    	case 3:
						if (currstate != 23)
						{
			    		lpt4s->wRet = RET_DECODE_ERR;
			    		DEBUGMSG(dbg,("Bailing 9\n\r"));
			    		goto out;
						}
						break;
				}

				currstate += 2;

				if (currstate >= 24)
				{
		    	DEBUGMSG(dbg,("Bailing 10\n\r"));
		    	inptr++; // consume last byte
		    	lpt4s->wRet = RET_END_OF_PAGE;
		    	goto out;
				}
	    }
eol:
		if (!state && (currcolumn == bitwidth))
		{
			DEBUGMSG(dbg,("Bailing 11\n\r"));
			lpt4s->wRet = RET_END_OF_LINE;
			*outptr++ = bitwidth;
			*outptr++ = bitwidth;
			*outptr++ = bitwidth;
			*outptr++ = (WORD)-1;
			*outptr++ = (WORD)-1;
			goto out;
    }

    else if (currcolumn > bitwidth)
    {
			DEBUGMSG(dbg,("Bailing 12\n\r"));
			lpt4s->wRet = RET_DECODE_ERR;
			goto out;
 	  }
	  currbyte >>= 2;

	} while ((currbit += 2) < 8); // fetch bits

	currbit = 0;

	} while (++inptr < inend); // fetch bytes
		
  currbit = (WORD) -2;
  lpt4s->wRet = RET_INPUT_EMPTY1;
  DEBUGMSG(dbg,("Bailing 13\n\r"));

out:

  if (currcolumn==bitwidth && lpt4s->wRet != RET_END_OF_LINE)
  	lpt4s->wRet = RET_INPUT_EMPTY2;

	if ((currcolumn == 0) && (currcolor == 0) && (lpt4s->wRet == RET_INPUT_EMPTY1))
		lpt4s->wRet = RET_INPUT_EMPTY2;

	lpt4s->cbIn -= (WORD)(inptr - lpt4s->lpbIn);
	lpt4s->lpbIn = inptr;
	lpt4s->lpbOut = (LPBYTE)outptr;
	lpt4s->lpbRef = (LPBYTE)refline;
	lpt4s->wBit = currbit+2;
	lpt4s->wWord = currstate;
	lpt4s->wColumn = currcolumn;
	lpt4s->wToggle = state;
	lpt4s->wColor = currcolor;
}

//==============================================================================
void MHToChange(LPT4STATE lpt4s)
{
	WORD size;
	BYTE currbyte;
	nextinfo_t FAR *nextptr;

  // Load context.
	LPBYTE inptr    =          lpt4s->lpbIn;
	LPWORD outptr   = (LPWORD) lpt4s->lpbOut;
	LPBYTE inend    =          lpt4s->lpbIn + lpt4s->cbIn;
	WORD bitwidth   =          lpt4s->cbLine * 8;
	WORD currbit    =          lpt4s->wBit;
	WORD currstate  =          lpt4s->wWord;
	WORD currcolumn =          lpt4s->wColumn;
	WORD ismkup     =          lpt4s->wColor;
	
  if (inptr >= inend)
  {
  	switch (lpt4s->wRet)
  	{
  		case RET_END_OF_LINE:
  		case RET_BEG_OF_PAGE:
  			lpt4s->wRet = RET_INPUT_EMPTY2;
  			break;
  			
  		default:
  			lpt4s->wRet = RET_INPUT_EMPTY1;
  			break;
  	}
  	return;
  }

  switch (lpt4s->wRet)
  {
  	case RET_END_OF_LINE:
  	case RET_BEG_OF_PAGE:
  	case RET_INPUT_EMPTY2:
  		switch (currstate)
  		{
  			case B0:
  			case W0:
  				currstate = 218;
  				break;
  				
  			default:
  				currstate = 217;
  				break;
  		}
  }
  
  if (currstate == 216)
		currstate = 217;

  if (currbit == 8)
  {
		currbit = 0;
		if (++inptr == inend)
		{
	    lpt4s->wRet = RET_INPUT_EMPTY1;
	    goto out;
		}
  }

  
  do // fetch bytes
  {
		currbyte = *inptr >> currbit;
		DEBUGMSG(dbg,("MH currbyte = %4.4x, currbit %d, cc %d\n\r",*inptr,currbit,currcolumn));

		do // fetch bits
		{
	    nextptr = &MHStates[currstate].nextinf[currbyte & 3];
	    currstate = nextptr->nextstate;
	    if (size = nextptr->size)
	    {
				switch (size & ~SIZE_MASK)
				{
					case 0:
						ismkup = 0;
						currcolumn += size;
						*outptr++ = currcolumn;
						break;

					case SIZE_MKUP:
						ismkup = 1;
						currcolumn += size & SIZE_MASK;
						break;

				  case SIZE_SPEC:
						switch (size)
						{
							case S_ZERO:
								if (*(outptr-1) != currcolumn || LOWORD(outptr) == lpt4s->wOffset)
									*outptr++ = currcolumn;
                else outptr--; // Back up one change on bogus zero runs. -RajeevD
								ismkup = 0;
								break;
									
							case S_ERR:
								lpt4s->wRet = RET_DECODE_ERR;
								goto out;
								
							case S_EOL:
								if (!currcolumn)
								{
									DEBUGMSG(dbg,("SPURIOUS EOL!\n\r"));
									lpt4s->wRet = RET_SPURIOUS_EOL;
								}
								else
								{
									currstate = 216;
									lpt4s->wRet = RET_DECODE_ERR;
								}
								goto out;

							default: DEBUGCHK (FALSE);
						}
						break;

					default: DEBUGCHK (FALSE);
					
				} // switch (size & ~SIZE_MASK)
	    }

			if ((currcolumn == bitwidth) && (*(outptr-1) == bitwidth))
			{
				*outptr++ = bitwidth;
				*outptr++ = bitwidth;
				*outptr++ = bitwidth;
				*outptr++ = (WORD)-1;
				*outptr++ = (WORD)-1;
			  lpt4s->wRet = RET_END_OF_LINE;
				goto out;
			}
			
	    currbyte >>= 2;

		} while ((currbit += 2) < 8); // fetch bits

		currbit = 0;

	} while (++inptr < inend); // fetch bytes


	 currbit = (WORD)-2; /* Since already done above */
	 lpt4s->wRet = RET_INPUT_EMPTY1;

out: // Save context.
	lpt4s->wBit    = currbit+2;
	lpt4s->cbIn   -= (WORD)(inptr - lpt4s->lpbIn);
	lpt4s->lpbIn   = inptr;
	lpt4s->lpbOut  = (LPBYTE)outptr;
	lpt4s->wWord   = currstate;
	lpt4s->wColumn = currcolumn;
	lpt4s->wColor  = ismkup;
}

//==============================================================================
#define MRMODE_INIT    0
#define MRMODE_GETEOL  1
#define MRMODE_1D      2
#define MRMODE_2D      3
#define MRMODE_GOTEOL  4
#define MRMODE_PENDERR 5

void MRToChange(LPT4STATE lpt4s)
{
	WORD mode = lpt4s->wMode;
	LPBYTE inptr, inend;
	WORD currbit, currbyte, count;
	
  if (!lpt4s->cbIn)
  {
		lpt4s->wRet = RET_INPUT_EMPTY1;
		return;
  }

	if (mode == MRMODE_PENDERR)
	{
    lpt4s->wMode = MRMODE_INIT;
    lpt4s->wRet = RET_DECODE_ERR;
    return;
	}
	
  if (mode == MRMODE_INIT || mode == MRMODE_GETEOL)
  {
	  inptr = lpt4s->lpbIn;
		inend = inptr + lpt4s->cbIn;
		currbit = lpt4s->wBit;
		count = lpt4s->wWord;

		do // fetch bytes
		{
	  	currbyte = *inptr >> currbit;

	    do // fetch bits
	    {    
				switch (currbyte & 3)
				{
		    	case 0:
						count+=2;
						break;
						
			    case 1:
						if (count >= 11)
						{
							mode = MRMODE_2D;
							lpt4s->wWord = 0;
							lpt4s->wRet = RET_END_OF_LINE;
							goto processmr;
						}
						else if (mode == MRMODE_GETEOL)
						{
							lpt4s->wMode = MRMODE_INIT;
							lpt4s->wWord = 1;
							goto eolseekerr;
						}
						else count = 1;
						break;
						
		    	case 2:
						if (count >= 10)
						{
			    		mode = MRMODE_GOTEOL;
			    		goto processmr;
						}
						else if (mode == MRMODE_GETEOL)
						{
					    lpt4s->wMode = MRMODE_INIT;
					    lpt4s->wWord = 0;
			    		goto eolseekerr;
						}
						else count = 0;
						break;
						
		    	case 3:
						if (count >= 11)
						{
					    mode = MRMODE_1D;
					    lpt4s->wRet = RET_INPUT_EMPTY1;
					    lpt4s->wWord = 0;
					    goto processmr;
						}
						else if (mode == MRMODE_GETEOL)
						{
					    lpt4s->wMode = MRMODE_INIT;
					    lpt4s->wWord = 0;
					    goto eolseekerr;
						}
						else count = 0;
						break;
						
					} // switch (currbyte & 3)
					
					currbyte >>= 2;

	    } while ((currbit += 2) < 8); // fetch bits

	    currbit = 0;

		} while (++inptr < inend); // fetch bytes

		lpt4s->wBit = 0;
		lpt4s->wMode = mode;
		lpt4s->wWord = count;
		lpt4s->cbIn -= (WORD)(inptr - lpt4s->lpbIn);
		lpt4s->lpbIn = inptr;
		lpt4s->wRet = RET_INPUT_EMPTY1;
		return;

eolseekerr:

		if ((lpt4s->wBit = currbit+2)==8)
		{
		    lpt4s->wBit = 0;
		    inptr++;
		}
		lpt4s->cbIn -= (WORD)(inptr - lpt4s->lpbIn);
		lpt4s->lpbIn = inptr;
		lpt4s->wRet = RET_DECODE_ERR;
		return;
	
processmr:

		if ((lpt4s->wBit = currbit+2)==8)
		{
	    lpt4s->wBit = 0;
	    inptr++;
		}
		lpt4s->cbIn -= (WORD)(inptr - lpt4s->lpbIn);
		lpt4s->lpbIn = inptr;
  }

  if (mode == MRMODE_GOTEOL)
  {
		BYTE bits = *lpt4s->lpbIn >> lpt4s->wBit;

		if (bits & 1)
		{
	    mode = MRMODE_1D;
	    lpt4s->wWord = (bits & 2 ? W1 : W0);
	    lpt4s->wRet = RET_INPUT_EMPTY1;
		} 
		else
		{
	    mode = MRMODE_2D;
	    if (bits & 2)
				lpt4s->wBit--;
	    else
				lpt4s->wWord = 2;
	    lpt4s->wRet = RET_END_OF_LINE;
		}
		
		if ((lpt4s->wBit += 2) == 8)
		{
	    lpt4s->wBit = 0;
	    lpt4s->lpbIn++;
	    lpt4s->cbIn--;
		}
  } // if (mode == 4)

  if (mode == MRMODE_1D)
  {
		MHToChange(lpt4s);
		if ((lpt4s->wRet == RET_END_OF_LINE)
		 || (lpt4s->wRet == RET_SPURIOUS_EOL))
    {
    	switch (lpt4s->wWord)
    	{
    		case W:
    		case B:
    			mode = MRMODE_GETEOL;
    			lpt4s->wWord = 0;
    			break;
    			
    		case W0:
    		case B0:
					mode = MRMODE_GETEOL;
					lpt4s->wWord = 1;
					break;
					
    		case W1:
    		case B1:
    		  mode = MRMODE_PENDERR;
    		  lpt4s->wWord = 0;
  				break;

  			default: DEBUGCHK (FALSE);
  		}		
		}
  }
  
	else if (mode == MRMODE_2D)
	{
		MMRToChange(lpt4s);
		if (lpt4s->wRet == RET_END_OF_LINE)
		{
	    if (lpt4s->wBit & 1)
	    {
	      // Found extra 1 bit.
				lpt4s->wBit++;
				lpt4s->wWord = 0;
				mode = MRMODE_PENDERR;
	    }
	    else 
	    {
    		switch (lpt4s->wWord)
    		{
    			case 0: lpt4s->wWord = 0; break;
    			case 2: lpt4s->wWord = 1; break;
    			default: DEBUGCHK (FALSE);
    		}
    		mode = MRMODE_GETEOL;
    	}
		}
  }
  
	if (lpt4s->wRet == RET_DECODE_ERR)
		mode = MRMODE_INIT;
	lpt4s->wMode = mode;
}

//==============================================================================
const BYTE blackstart[8] = {0x00,0xfe,0xfc,0xf8,0xf0,0xe0,0xc0,0x80};
const BYTE blackend[8]   = {0x00,0x01,0x03,0x07,0x0f,0x1f,0x3f,0x7f};

void ChangeToRaw(LPT4STATE lpt4s)
{
	WORD sbyte,ebyte,start,end;

	WORD    width =          lpt4s->cbLine;
	LPBYTE outptr =          lpt4s->lpbOut;
	LPWORD  inptr = (LPWORD) lpt4s->lpbIn;

	if (width>lpt4s->cbOut)
	{
		lpt4s->wRet = RET_OUTPUT_FULL;
		return;
	}

  lpt4s->wRet = RET_END_OF_LINE;
  lpt4s->cbOut -= width;
  _fmemset(outptr,0,width);
  width *= 8;

  while (*inptr != width)
  {
		start = *inptr & 7;
		sbyte = *inptr++ >>3;
		end   = *inptr & 7;
		ebyte = *inptr++ >>3;

		if (start)
		{
	    if (sbyte == ebyte)
	    {
				outptr[sbyte] |= blackstart[start] & blackend[end];
				continue;
	    }
	    else
				outptr[sbyte++] |= blackstart[start];
		}
		if (ebyte!=sbyte)
	    _fmemset(outptr + sbyte, 0xff, ebyte - sbyte);
		outptr[ebyte] |= blackend[end];
   }
}

//==============================================================================
void ChangeToMMR(LPT4STATE lpt4s)
{
	LPWORD refline, inptr, outptr, eoout;
	WORD bitwidth, currbit, currcolor, runsize;
	short a0,a1,a2,b1,b2;
	LPWORD x;
	
	a0 = lpt4s->a0;
	refline = (LPWORD)lpt4s->lpbRef;
	inptr = (LPWORD)lpt4s->lpbIn;
	outptr = (LPWORD)lpt4s->lpbOut;
	bitwidth = lpt4s->cbLine * 8;
	currbit = lpt4s->wBit;
	currcolor = lpt4s->wColor;
	*outptr = lpt4s->wWord;
	eoout = outptr + (lpt4s->cbOut/2)-(MMR_OUTPUT_SLACK/2);

	if (lpt4s->wRet == RET_END_OF_PAGE)
	{
		EncodeRun(&EOFB,&outptr,&currbit);
		EncodeRun(&EOFB,&outptr,&currbit);
		
		if (currbit)
		{
	    currbit = 0;
	    outptr++;
		}
		goto end;
	}

  a1 = *inptr;
  a2 = *(inptr+1);

	switch (lpt4s->wRet)
	{
		case RET_END_OF_LINE:
		case RET_BEG_OF_PAGE:
			a0 = 0;
			b1 = *refline;
			b2 = *(refline+1);
			goto top2;

		default:
	 		a0 = lpt4s->a0;
		  if (a0 == (short)bitwidth)
		  {
				lpt4s->wRet = RET_END_OF_LINE;
				goto end;
		  }
			break;
	}

top:

  x = refline + currcolor;
  if ((b1 = *x++) <= a0)
  {
		x++;
		while ((b1 = *x++) <= a0)
		{
	    x++;
	    refline += 2;
		}
  }

  b2 = *x++;

top2:

  if (b2 < a1) // pass mode
  {
		EncodeRun (&PASS,&outptr,&currbit);
		a0 = b2;
  }

  else if ((a1+3>=b1) && (a1-3)<=b1) // vertical mode
  {
		EncodeRun (&VERT[b1-a1+3],&outptr,&currbit);
		currcolor ^= 1;
		a0 = a1;
		a1 = *++inptr;
		a2 = *(inptr+1);
  }

  else // horizontal mode
  {
		EncodeRun(&HORIZ, &outptr, &currbit);

		if (!currcolor)
		{
		  // Encode white run.
	    runsize = a1 - a0;
	    while (runsize >= 2560)
	    {
				EncodeRun(&WhiteMkup[39],&outptr,&currbit);
				runsize -= 2560;
	    }
	    if (runsize >= 64)
	    {
				EncodeRun(&WhiteMkup[runsize/64-1],&outptr,&currbit);
				runsize &= 63;
	    }
	    EncodeRun(&WhiteTCode[runsize],&outptr,&currbit);

      // Encode black run.
	    runsize = a2 - a1;
	    while (runsize >= 2560)
	    {
				EncodeRun(&BlackMkup[39],&outptr,&currbit);
				runsize -= 2560;
	    }
	    if (runsize >= 64)
	    {
				EncodeRun(&BlackMkup[runsize/64-1],&outptr,&currbit);
				runsize &= 63;
	    }
			EncodeRun(&BlackTCode[runsize],&outptr,&currbit);
		}

		else
		{
			// Encode black run.
			runsize = a1 - a0;

	    while (runsize >= 2560)
	    {
				EncodeRun(&BlackMkup[39],&outptr,&currbit);
				runsize -= 2560;
			}
	    if (runsize >= 64)
	    {
				EncodeRun(&BlackMkup[runsize/64-1],&outptr,&currbit);
				runsize &= 63;
	    }
	    EncodeRun(&BlackTCode[runsize],&outptr,&currbit);

      // Encode white run.
	    runsize = a2 - a1;
	    while (runsize >= 2560)
	    {
				EncodeRun(&WhiteMkup[39],&outptr,&currbit);
				runsize -= 2560;
	    }
	    if (runsize >= 64)
	    {
				EncodeRun(&WhiteMkup[runsize/64-1],&outptr,&currbit);
				runsize &= 63;
	    }
	    EncodeRun(&WhiteTCode[runsize],&outptr,&currbit);
		}

		a0 = a2;
		inptr += 2;
		a1 = *inptr;
		a2 = *(inptr+1);
  }

  if (outptr >= eoout)
  {
		lpt4s->wRet = RET_OUTPUT_FULL;
		goto end;
  }
  
  if (a0 < (short)bitwidth)
		goto top;
  lpt4s->wRet = RET_END_OF_LINE;

end:
	lpt4s->a0 = a0;
	lpt4s->wColor = currcolor;
	lpt4s->wWord = currbit ? *outptr : 0;
	lpt4s->wBit = currbit;
	lpt4s->lpbIn = (LPBYTE)inptr;
	lpt4s->cbOut -= (WORD)((LPBYTE)outptr - lpt4s->lpbOut);
	lpt4s->lpbOut = (LPBYTE)outptr;
	lpt4s->lpbRef = (LPBYTE)refline;
	return;
}

//==============================================================================
void ChangeToMH (LPT4STATE lpt4s)
{
	LPWORD inptr = (LPWORD)lpt4s->lpbIn;
	LPWORD outptr = (LPWORD)lpt4s->lpbOut;
	LPWORD eoout;
	WORD bitwidth = lpt4s->cbLine * 8;
	WORD currbit, currcolor, currcolumn, runsize;
	currbit = lpt4s->wBit;
	currcolumn = lpt4s->wColumn;
	currcolor = lpt4s->wColor;
	eoout = outptr + (lpt4s->cbOut/2)-(MH_OUTPUT_SLACK/2);
	*outptr = lpt4s->wWord;

	switch (lpt4s->wRet)
	{
		case RET_END_OF_PAGE:
	    if (currbit)
		    lpt4s->lpbOut+=2;
			*((LPWORD)lpt4s->lpbOut) = 0x8000;
			lpt4s->lpbOut += 2;
	    return;

		case RET_END_OF_LINE:
		case RET_BEG_OF_PAGE:

	    if (lpt4s->nType == MH_DATA)
	    {
				if (currbit)
				{
		    	currbit = 0;
		    	outptr++;
				}
				*outptr++ = 0x8000;
	    }
	    break;
  }

  if (outptr > eoout)
		goto eooutput;

  if (currcolor)
		goto black;

white:

	currcolor = 1;
	runsize = *inptr - currcolumn;
	currcolumn = *inptr;
  while (runsize >= 2560)
  {
		EncodeRun(&WhiteMkup[39],&outptr,&currbit);
		runsize -= 2560;
  }
  if (runsize >= 64)
  {
		EncodeRun(&WhiteMkup[runsize/64-1],&outptr,&currbit);
		runsize &= 63;
  }
  EncodeRun(&WhiteTCode[runsize],&outptr,&currbit);

  if (*inptr++ == bitwidth)
		goto eoln;
  if (outptr > eoout)
		goto eooutput;

black:

	currcolor = 0;
	runsize = *inptr - currcolumn;
	currcolumn = *inptr;

	while (runsize >= 2560)
	{
		EncodeRun(&BlackMkup[39],&outptr,&currbit);
		runsize -= 2560;
	}
	if (runsize >= 64)
	{
		EncodeRun(&BlackMkup[runsize/64-1],&outptr,&currbit);
		runsize &= 63;
  }
  EncodeRun(&BlackTCode[runsize],&outptr,&currbit);

  if (*inptr++ == bitwidth)
		goto eoln;
  if (outptr > eoout)
		goto eooutput;
  goto white;

eoln:
    lpt4s->wColumn = 0;
    lpt4s->wColor = 0;
    lpt4s->wWord = currbit ? *outptr : 0;
    lpt4s->wBit = currbit;
    lpt4s->lpbIn = (LPBYTE)inptr;
    lpt4s->cbOut -= (WORD)((LPBYTE)outptr - lpt4s->lpbOut);
    lpt4s->lpbOut = (LPBYTE)outptr;
    lpt4s->wRet = RET_END_OF_LINE;
    return;

eooutput:

    lpt4s->wColumn = currcolumn;
    lpt4s->wColor = currcolor;
    lpt4s->wWord = currbit ? *outptr : 0;
    lpt4s->wBit = currbit;
    lpt4s->lpbIn = (LPBYTE)inptr;
    lpt4s->cbOut -= (WORD)((LPBYTE)outptr - lpt4s->lpbOut);
    lpt4s->lpbOut = (LPBYTE)outptr;
    lpt4s->wRet = RET_OUTPUT_FULL;
    return;
}

//==============================================================================
void ChangeToMR(LPT4STATE lpt4s)
{
	switch (lpt4s->wRet)
	{
		case RET_END_OF_PAGE:
		
	  	if (lpt4s->wBit)
	    {
				*((LPWORD)lpt4s->lpbOut) = lpt4s->wWord;
        lpt4s->lpbOut += 2;
			}
			*((LPWORD)lpt4s->lpbOut) = 0x8000;
			lpt4s->lpbOut += 2;
	    return;

		case RET_BEG_OF_PAGE:
		case RET_END_OF_LINE:
	    if (lpt4s->wBit)
	    {
				lpt4s->wBit = 0;
				*((LPWORD)lpt4s->lpbOut)++ = lpt4s->wWord;
				lpt4s->cbOut-=2;
	    }
	    *((LPWORD)lpt4s->lpbOut)++ = lpt4s->iKFactor ? 0x4000 : 0xc000;
	    lpt4s->cbOut -= 2;
	    lpt4s->wWord = 0;
	    break;
	}

  if (lpt4s->iKFactor)
		ChangeToMMR(lpt4s);
  else
		ChangeToMH(lpt4s);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\constant.h ===
// constants defined
// History: 9/28/93 mslin
//             RES_DIR_SIZE changed to 2048 for Acorn printer
//          10/22/93  mslin         
//             change expand brush to only 16 lines instead 
//             of 32 for saving memory because currently the 
//             repeat pattern is 16x16
//             BYTESPERSACNLINE enlarge to 616 for 600 dpi.
//
#define SUCCESS   1
#define FAILURE   0
#define EXTERN
#define PRIVATE

#ifdef DEBUG
#define  MAXBAND  24   
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\brushpat.c ===
/*==============================================================================
This file defines 8x8 pixel monochrome patterns for standard GDI brushes.  
The patterns are for 6 hatched brushes and 65 gray levels of solid brushes.

05-30-93     RajeevD     Created.
02-15-94     RajeevD     Integrated into unified resource executor.
05-12-94     RajeevD     Ported to C for Win32.
==============================================================================*/

#define DB(b7,b6,b5,b4,b3,b2,b1,b0)\
  ((b7<<7)|(b6<<6)|(b5<<5)|(b4<<4)|(b3<<3)|(b2<<2)|(b1<<1)|b0)

const unsigned char BrushPat[71][8] = 
{
	// HS_HORIZONTAL
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),

	// HS_VERTICAL
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),

	// HS_FDIAGONAL
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,0,1,1,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,1,1),
	DB(1,0,0,0,0,0,0,1),
	DB(1,1,0,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,1,1,0,0,0,0),

	// HS_BDIAGONAL
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,1,1,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(1,1,0,0,0,0,0,0),
	DB(1,0,0,0,0,0,0,1),
	DB(0,0,0,0,0,0,1,1),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,1,1,0,0),

	// HS_CROSS
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,0,1,1,0,0,0),

	// HS_DIAGCROSS 
	DB(0,0,0,1,1,0,0,0),
	DB(0,0,1,1,1,1,0,0),
	DB(0,1,1,0,0,1,1,0),
	DB(1,1,0,0,0,0,1,1),
	DB(1,0,0,0,0,0,0,1),
	DB(1,1,0,0,0,0,1,1),
	DB(0,1,1,0,0,1,1,0),
	DB(0,0,1,1,1,1,0,0),

	// BS_SOLID[0,0h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[0,1,h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,1,0,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[02h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,1,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,1,0,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[03h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,1,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[04h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[05h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,1,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[06h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,1,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[07h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[08h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[09h]
	DB(0,0,0,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[0Ah]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[0Bh]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[0Ch]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,0,0,0),

	// BS_SOLID[0Dh]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,1,0,0),

	// BS_SOLID[0Eh]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,1,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,1,0,0),

	// BS_SOLID[0Fh]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,1,0,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,1,1,0),

	// BS_SOLID[1,0h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,0,1,1,0),

	// BS_SOLID[1,1,h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,2h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,3h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,4h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,5h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,6h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,7h]
	DB(0,0,0,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,1,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,8h]
	DB(0,1,0,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,1,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,9h]
	DB(0,1,0,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,Ah]
	DB(0,1,1,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,0,1,1,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,Bh]
	DB(0,1,1,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,Ch]
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,0),

	// BS_SOLID[1,Dh]
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,0,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),

	// BS_SOLID[1,Eh]
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(0,0,0,0,1,1,1,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),

	// BS_SOLID[1,Fh]
	DB(1,1,1,0,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),

	// BS_SOLID[20h]
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),

	// BS_SOLID[21,h]
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),

	// BS_SOLID[22h]
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),

	// BS_SOLID[23h]
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[24h]
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[25h]
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,0,0,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[26h]
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,0,0,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[27h]
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,0,1,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[28h]
	DB(1,1,1,1,1,0,1,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,0,1,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[29h]
	DB(1,1,1,1,1,0,1,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[2Ah]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[2Bh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[2Ch]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,0,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[2Dh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,0),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[2Eh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),

	// BS_SOLID[2Fh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),

	// BS_SOLID[30h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),

	// BS_SOLID[31,h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,0,1,1,1,1,1,1),

	// BS_SOLID[32h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,0,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,0,1,1,1,1,1,1),

	// BS_SOLID[33h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,0,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[34h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[35h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[36h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(0,0,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[37h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,0,0,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[38h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[39h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[3Ah]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,0,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[3Bh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,0,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[3Ch]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,0,0,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[3Dh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,0,0,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,0,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[3Eh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,0,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,0,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[3Fh]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,0,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),

	// BS_SOLID[40h]
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
	DB(1,1,1,1,1,1,1,1),
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\ddbitblt.h ===
/*==============================================================================
Structures and prototypes for display driver interface.

09-Jun-93     RajeevD     Created.
==============================================================================*/
#ifndef _INC_DDBITBLT
#define _INC_DDBITBLT

// Logical Brush 
typedef struct
{
	WORD lbStyle;
  WORD lbColor; 
  WORD lbHatch;
  WORD lbBkColor;
}
	DD_BRUSH;

// Physical Bitmap
typedef struct
{ 
	WORD   bmType;
  WORD   bmWidth;
  WORD   bmHeight;
  WORD   bmWidthBytes;
  BYTE   bmPlanes;
  BYTE   bmBitsPixel;
  LPVOID bmBits;
  DWORD  bmWidthPlanes;
  LPVOID bmlpPDevice;
  WORD   bmSegmentIndex;
  WORD   bmScanSegment;
	WORD bmFillBytes;
}
	DD_BITMAP, FAR* LPDD_BITMAP;

// Draw Mode
typedef struct
{
	short Rop2;
	short bkMode;
	DWORD dwbgColor;
	DWORD dwfgColor;
}
	DD_DRAWMODE;

// API Prototypes
BOOL FAR PASCAL ddBitBlt
	(LPVOID, WORD, WORD, LPVOID, WORD, WORD,
	WORD, WORD, DWORD, LPVOID, LPVOID);

BOOL FAR PASCAL ddRealize
	(LPVOID, short, LPVOID, LPVOID, LPVOID);

DWORD FAR PASCAL ddColorInfo
  (LPVOID, DWORD, LPDWORD);

#endif // _INC_DDBITBLT
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\ddbitblt.c ===
/*==============================================================================
These routines are wrappers for the display driver BitBlt interface.

05-30-93     RajeevD     Created.
02-15-94     RajeevD     Integrated into unified resource executor.
==============================================================================*/

#include <windows.h>
#include <windowsx.h>
#include "constant.h"
#include "frame.h"      // driver header file, resource block format
#include "jtypes.h"     // type definition used in cartridge
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"
#include "hreext.h"

#include "ddbitblt.h"

USHORT usBrushWidth; // just a dummy

//==============================================================================
BOOL OpenBlt (LPRESTATE lpRE, UINT yBrush)
{ 
	LPDD_BITMAP lpbmPat;
	LPBITMAP lpbmBand;
 
	// Initialize source.
	lpRE->bmSrc.bmPlanes = 1;
	lpRE->bmSrc.bmBitsPixel = 1;
	
	// Initialize destination.
	lpbmBand = lpRE->lpBandBuffer;
	lpRE->bmDst.bmPlanes = 1;
	lpRE->bmDst.bmBitsPixel = 1;
	lpRE->bmDst.bmWidth = lpbmBand->bmWidth;
	lpRE->bmDst.bmHeight = lpbmBand->bmHeight;
	lpRE->bmDst.bmWidthBytes = lpbmBand->bmWidthBytes;
	lpRE->bmDst.bmWidthPlanes = lpRE->bmDst.bmWidthBytes * lpRE->bmDst.bmHeight;
	lpRE->bmDst.bmBits = lpbmBand->bmBits;

	// Initialize DRAWMODE.
	ddColorInfo (&lpRE->bmDst, 0xFFFFFF, &lpRE->DrawMode.dwbgColor);
	ddColorInfo (&lpRE->bmDst, 0x000000, &lpRE->DrawMode.dwfgColor);
	lpRE->DrawMode.bkMode = 1; // transparent
	
	// Initialize LOGBRUSH.
	lpRE->lb.lbStyle = BS_PATTERN;
	lpRE->lb.lbHatch = GlobalAlloc (GMEM_ZEROINIT, sizeof(DD_BITMAP));
	if (!lpRE->lb.lbHatch)
		return FALSE;
	lpbmPat = (LPDD_BITMAP) GlobalLock (lpRE->lb.lbHatch);

  // Set brush origin.
  lpRE->wPoint[0] = 0;
  lpRE->wPoint[1] = yBrush;
  
	// Initialize pattern bitmap.
	lpbmPat->bmPlanes = 1;
	lpbmPat->bmBitsPixel = 1;
	lpbmPat->bmWidth = 32;
	lpbmPat->bmHeight = 32;
	lpbmPat->bmWidthBytes = 4;
	lpbmPat->bmWidthPlanes = 128;
	lpbmPat->bmBits = lpRE->TiledPat;
	GlobalUnlock (lpRE->lb.lbHatch);

  // Set physical brush.
	lpRE->lpBrush = NULL;

	return TRUE;
}

//==============================================================================
void CloseBlt (LPRESTATE lpRE)
{
	GlobalFree (lpRE->lb.lbHatch);
	if (lpRE->lpBrush)
		GlobalFreePtr (lpRE->lpBrush);
}

//==============================================================================
BOOL SetBrush (LPRESTATE lpRE)
{
 	LPDD_BITMAP lpbmPat = (LPDD_BITMAP) GlobalLock (lpRE->lb.lbHatch);
	UINT cbBrush;
	
  // Delete previous brush, if any.
	if (lpRE->lpBrush)
	{
		ddRealize (&lpRE->bmDst, -OBJ_BRUSH, &lpRE->lb, lpRE->lpBrush, lpRE->wPoint);
		GlobalFreePtr (lpRE->lpBrush);
	}

	// Realize new physical brush.
	lpbmPat->bmBits = lpRE->lpCurBrush;
	cbBrush = ddRealize (&lpRE->bmDst, OBJ_BRUSH, &lpRE->lb, NULL, lpRE->wPoint);
	lpRE->lpBrush = GlobalAllocPtr (GMEM_FIXED, cbBrush);
	ddRealize (&lpRE->bmDst, OBJ_BRUSH, &lpRE->lb, lpRE->lpBrush, lpRE->wPoint);

	GlobalUnlock (lpRE->lb.lbHatch);
	return TRUE;
}

//==============================================================================
// Clipping to top and bottom of band is performed, but
// ideally should be handled by caller as needed.

DWORD FAR PASCAL RP_BITMAP1TO1
(
	LPRESTATE lpRE,
	WORD    xSrc,   // Left padding
	short   yDst,	  // Top row of destination.
	short   xDst,	  // Left column of destination.
	WORD    clLine, // Longs per scan line
	WORD    yExt,   // Height in pixels
	WORD    xExt,   // Width in pixels 
	LPDWORD lpSrc,  // Far pointer to source
	LPDWORD lpPat,  // Far pointer to pattern
	DWORD   dwRop		// Raster operation
)
{
	LPBITMAP lpbmBand;
	WORD ySrc;
			
	// Record parameters.
	lpRE->bmSrc.bmWidth = xExt + xSrc;
	lpRE->bmSrc.bmHeight = yExt;
	lpRE->bmSrc.bmWidthBytes = 4 * clLine;
	lpRE->bmSrc.bmWidthPlanes = lpRE->bmSrc.bmWidthBytes * lpRE->bmSrc.bmHeight;
	lpRE->bmSrc.bmBits = lpSrc;
	
	// Clip to top of band.
	if (yDst >= 0)
		ySrc = 0;
	else
	{
		ySrc = -yDst;
		yExt -= ySrc;
		yDst = 0;
	}

	// Clip to bottom of band.
	lpbmBand = lpRE->lpBandBuffer;
	if (yExt > (WORD) lpbmBand->bmHeight - yDst)
		yExt = lpbmBand->bmHeight - yDst;

	ddBitBlt
	(
		&lpRE->bmDst, xDst, yDst, &lpRE->bmSrc, xSrc, ySrc,
		xExt, yExt, lpRE->dwRop, lpRE->lpBrush, &lpRE->DrawMode
	);

	return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\dorpl.c ===
/*
**  Copyright (c) 1991 Microsoft Corporation
*/
//===========================================================================
// FILE                         DORPL.C
//
// MODULE                       Host Resource Executor
//
// PURPOSE                      Convert A-form to B-form for jumbo driver
//
// DESCRIBED IN                 Resource Executor design spec.
//
// MNEMONICS                    n/a
//
// HISTORY  1/17/92 mslin       extracted functions from cartrige JUMBO.C
//                              and then modified.
//				03/09/92 dstseng	  RP_FillScanRow -> RP_FILLSCANROW (.asm)
//				03/10/92 dssteng	  add one parameter SrcxOrg to RP_BITMAP1TO1()
//										  to handle the case xOffset <> 0
//				03/11/92 dstseng	  <3> optimize fill rect. by calling RP_FILLSCANROW()	
//              05/21/92 mslin  Add DUMBO compiled switch for Fixed memory
//                              because real time interrupt routine will call
//                              hre when printing in real-time rendering mode
//          08/18/92 dstseng    @1 fix bug that trashed the value of usPosOff
//          08/21/92 dstseng    @2 fix a inadvertent bug in BitMapHI
//          10/12/92 dstseng    @3 fix "Glyph range checking" bug
//          11/12/92 dstseng    @4 special treatment for hollow brush
//          11/12/92 dstseng    @5 fix bug in command ShowText & ShowField
//          09/27/93 mslin      add BuildPcrDirectory600() for Spicewood 6.
//
//
//===========================================================================

// Include files
//
#include <ifaxos.h>
#include <resexec.h>

#include "constant.h"
#include "jtypes.h"     // type definition used in cartridge
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"    // define data structure used by hre.c and rpgen.c
#include "hreext.h"     // declaration extern global var. and extern func.
#include "multbyte.h"   // define macros to take care of byte ordering
#include "stllnent.h"   // declare style line functions.

#ifdef DEBUG
DBGPARAM dpCurSettings = {"RESEXEC"};
#endif

#define Brush40Gray (ULONG)0x8140     /* all black */

extern const WORD wRopTable[256];
extern BYTE BrushPat[72][8];

#define ASSERT(cond,mesg) if (cond) {DEBUGMSG (1, mesg); goto EndRPL;}

// functions prototypes
static   void  RP_NewRop (LPRESTATE lpRE, UBYTE ubRop);
static   int   SelectResource(LPHRESTATE lpHREState, UINT uid);
extern   void  GetTotalPixels (RP_SLICE_DESC FAR* psdSlice);
extern   BOOL  OpenBlt     (LPRESTATE, UINT);
extern   BOOL  SetBrush    (LPRESTATE);
extern   void  CloseBlt    (LPRESTATE);

//---------------------------------------------------------------------------
void

DoRPL
(
   LPHRESTATE lpHREState,       // far pointer to current job context
                                // corresponding to the job HANDLE
   LPRPLLIST lpRPLList          // pointer to RPL list
)
// PURPOSE                      Execute a Render Primitive List (RPL)
//                              which is a list of RPL block.
//                              
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          None visible outside of HRE.
//
// UNRESOLVED ISSUES            programmer development notes
//
//---------------------------------------------------------------------------       
{
   LPBITMAP          lpbmBand;
   LPRESTATE         lpRE;
   UBYTE      FAR*   lpub;
   USHORT     FAR*   lpus;
   ULONG      FAR*   lpul;
   UBYTE      FAR*   lpubLimit;
   LPJG_RPL_HDR      lpRPL;
   USHORT            usTop;
   USHORT            yBrush;
   USHORT            iGlyph;
   LPFRAME           lpFrame;
   LPRESDIR          lpResDir;
   SHORT             sLoopCount;
   RP_SLICE_DESC     slice;

   lpRPL = (LPJG_RPL_HDR)lpRPLList->lpFrame->lpData;
   usTop = GETUSHORT(&lpRPL->usTopRow);
   yBrush = usTop & 0x001F;
   // 08/06/92 dstseng, Because band is not always 32x, 
   // We have difficulty to paint our brush with correct offset
   // Unless We have a variable to keep the offset of usTop.
   
   lpRE = lpHREState->lpREState;
   lpbmBand = lpRE->lpBandBuffer;

   if (!OpenBlt (lpRE, yBrush))
   	return;

#ifdef MARSHAL

      lpFrame = lpRPLList->lpFrame;

      /* interpret the RPL, get parm list ptrs */
      lpul = (ULONG FAR*)((++lpFrame)->lpData);
      lpus = (USHORT FAR*)((++lpFrame)->lpData);
      lpub = (UBYTE FAR*)((++lpFrame)->lpData); 
      /* get resource limit address */
      lpubLimit = (UBYTE FAR*)(lpub + lpFrame->wSize);

#else
 
      /* interpret the RPL, get parm list ptrs */
      lpul = (ULONG FAR*)(lpRPL->ulParm);
      lpus = (USHORT FAR*) (GETUSHORT(&lpRPL->usLongs) * 4 +
                      (UBYTE FAR*)(lpul));
      lpub = (UBYTE FAR*) (GETUSHORT(&lpRPL->usShorts) * 2 +
                      (UBYTE FAR*)(lpus));
      /* get resource limit address */
      lpubLimit = (UBYTE FAR*)lpRPL + lpRPLList->lpFrame->wSize + 1;

#endif

      // if first time call then initialize state variables ???
      /* state variables */
      /* Set to default value at beginning of each RPL. */
      /* The order of RPL execution is not specified and there must not be */
      /* any dependency on the previous RPL. */
      lpRE->sRow = 0 - usTop;    //mslin 3/14/92 ccteng
      lpRE->sCol = lpRE->sCol2 = 0;
      lpRE->ubPenStyle = 0;  /* set solid line */
      lpRE->usPenPhase = 0;  /* restart the pattern */

      /* no current glyph set */
      lpRE->lpCurGS = NULL;
      SelectResource(lpHREState, Brush40Gray);
      lpRE->lpCurBitmap = NULL;

      /* set default ROP */
      RP_NewRop(lpRE, 0x88);

      while (1)
      {
      	if (lpub > lpubLimit)
      	{
         	DEBUGMSG (1, ("HRE: Execution past end of RPL."));
					goto EndRPL;
		}
				
         switch ( *lpub++ )
         {
         /* 0x00 - 0x05 */
         case JG_RP_SetRowAbsS:
            /* long row setting */
            lpRE->sRow = GETUSHORTINC(lpus);
            lpRE->sRow -= usTop;
            break;

         case JG_RP_SetRowRelB:
            lpRE->sRow += (SBYTE)*lpub++;
            break;

         case JG_RP_SetColAbsS:
            /* short column setting */
            lpRE->sCol = GETUSHORTINC(lpus);
            break;

         case JG_RP_SetColRelB:
            lpRE->sCol += (SBYTE)*lpub++;
            break;

         case JG_RP_SetExtAbsS:
            lpRE->sCol2 = GETUSHORTINC(lpus);
               break;

         case JG_RP_SetExtRelB:
            lpRE->sCol2 += (SBYTE)*lpub++;
               break;

         /* 0x10 - 0x1A */

         case JG_RP_SelectS:
            /* make resource current */
            if (!SelectResource(lpHREState, GETUSHORT(lpus)))
               goto EndRPL;   // select resource failure
            lpus++;
            break;

         case JG_RP_SelectB:
            /* make resource current */
            if (!SelectResource(lpHREState, *lpub))
               goto EndRPL;   // select resource failure
            lpub += 1;
            break;

         case JG_RP_Null:
         case JG_RP_End:
            goto EndRPL;

         case JG_RP_SetRop:
            /* raster op setting */
            RP_NewRop(lpRE, *lpub++);
            break;

         case JG_RP_SetPenStyle:
            // if (lpREState->ubPenStyle != *lpub)
            //   lpREState->usPenPhase = 0;  /* restart the pattern */
            lpRE->ubPenStyle = *lpub++;
            break;

#if 0
         case JG_RP_ShowText:   
            {
            UBYTE ubCount;
            lpub++;             // ubFontCode  @5
            ubCount = *lpub++;   // ubNChars
            lpub += ubCount;    // ubCharCode ...  @5
            break;
            }

         case JG_RP_ShowField:
            lpub++;             // ubFontCode  @5
            lpus++;             // usFieldCode @5
            break;
#endif

         case JG_RP_SetRopAndBrush :
            RP_NewRop (lpRE, *lpub++);
            /* make resource current */
            if (!SelectResource(lpHREState, GETUSHORT(lpus)))
               goto EndRPL;   // select resource failure
            lpus++;
            break;

         case JG_RP_SetPatternPhase :
            lpRE->usPenPhase = GETUSHORTINC(lpus);
            break;

         /* 0x20 - 0x23 */
         case JG_RP_LineAbsS1:
         {
            USHORT   usX, usY;

            /* draw line */
            usY = GETUSHORTINC(lpus);     // absolute row
            usY -= usTop;
            usX = GETUSHORTINC(lpus);     // absolute col
            
            ASSERT ((lpRE->sRow < 0) || (lpRE->sRow >= (SHORT)lpbmBand->bmHeight),
              ("HRE: LineAbsS1 y1 = %d\r\n", lpRE->sRow));
            ASSERT ((usY >= (WORD) lpbmBand->bmHeight),
              ("HRE: LineAbsS1 y2 = %d\r\n", usY));

            RP_SliceLine (lpRE->sCol, lpRE->sRow, usX , usY, &slice, lpRE->ubPenStyle);
            if (!StyleLineDraw(lpRE, &slice, lpRE->ubPenStyle,(SHORT)lpRE->ubRop, lpRE->wColor))
                RP_LineEE_Draw(&slice, lpbmBand);
            /* update current position */
            lpRE->sRow = usY;
            lpRE->sCol = usX;
            break;
         }
         
         case JG_RP_LineRelB1:
         {
            SHORT sX, sY;

            /* draw line */
            sY = lpRE->sRow + (SBYTE)*lpub++;    // delta row
            sX = lpRE->sCol + (SBYTE)*lpub++;    // delta col
            
            ASSERT ((lpRE->sRow < 0 || lpRE->sRow >= (SHORT)lpbmBand->bmHeight),
            	("HRE: LineRelB1 y1 = %d\r\n", lpRE->sRow));
            ASSERT ((sY < 0 || sY >= (SHORT)lpbmBand->bmHeight),
            	("HRE: LineRelB1 y2 = %d\r\n", sY));
            
            RP_SliceLine (lpRE->sCol, lpRE->sRow, sX , sY, &slice, lpRE->ubPenStyle);
            if (!StyleLineDraw(lpRE, &slice, lpRE->ubPenStyle,(SHORT)lpRE->ubRop, lpRE->wColor))
                RP_LineEE_Draw(&slice, lpbmBand);
            /* update current position */
            lpRE->sRow = sY;
            lpRE->sCol = sX;
            break;
         }
     
         case JG_RP_LineSlice:
            {
            USHORT us_trow, us_tcol;
            us_trow = *lpub++;
            slice.us_n_slices = *lpub++;
            us_tcol = us_trow; us_trow >>= 2; us_tcol &= 3; us_tcol -= 1;
            slice.s_dy_skip = us_tcol;
            us_tcol = us_trow; us_trow >>= 2; us_tcol &= 3; us_tcol -= 1;
            slice.s_dx_skip = us_tcol;
            us_tcol = us_trow; us_trow >>= 2; us_tcol &= 3; us_tcol -= 1;
            slice.s_dy_draw = us_tcol;
            us_tcol = us_trow;                us_tcol &= 3; us_tcol -= 1;
            slice.s_dx_draw = us_tcol;
            slice.s_dis    = GETUSHORTINC(lpus);
            slice.s_dis_lg = GETUSHORTINC(lpus);
            slice.s_dis_sm = GETUSHORTINC(lpus);
            slice.us_first = GETUSHORTINC(lpus);
            slice.us_last  = GETUSHORTINC(lpus);
            slice.us_small = GETUSHORTINC(lpus);
            slice.us_x1 = lpRE->sCol;
            slice.us_y1 = lpRE->sRow;
            slice.us_x2 = lpRE->sCol;
            slice.us_y2 = lpRE->sRow;
            GetTotalPixels(&slice);
            if (!StyleLineDraw(lpRE, &slice, lpRE->ubPenStyle,(SHORT)lpRE->ubRop, lpRE->wColor))
               RP_LineEE_Draw(&slice, lpbmBand);
            break;
            }

         case JG_RP_FillRowD:

            lpRE->sCol  += (SBYTE)*lpub++; 
            lpRE->sCol2 += (SBYTE)*lpub++;
           
            // Yes, this should fall through!

         case JG_RP_FillRow1:

            ASSERT ((lpRE->sRow < 0 || lpRE->sRow >= (SHORT)lpbmBand->bmHeight),
          		("HRE: FillRow1 y1 = %d\r\n", lpRE->sRow));
          	ASSERT ((lpRE->sCol2 - lpRE->sCol <= 0),
            	("HRE: FillRow1 Width <= 0"));

            RP_FILLSCANROW
            (
            	lpRE, lpRE->sCol, lpRE->sRow, (USHORT)(lpRE->sCol2 - lpRE->sCol), 1,
              (LPBYTE) lpRE->lpCurBrush, lpRE->ulRop,
              lpbmBand->bmBits, lpbmBand->bmWidthBytes, yBrush
            );
            lpRE->sRow++;
            break;

         /* 0x40 - 0x41 */
         case JG_RP_RectB:
         {
            UBYTE ubHeight = *lpub++;
            UBYTE ubWidth  = *lpub++;

            ASSERT ((lpRE->sRow < 0 || lpRE->sRow >= (SHORT)lpbmBand->bmHeight),
            	("HRE: RectB y1 = %d\r\n", lpRE->sRow));
            ASSERT ((lpRE->sRow + ubHeight > (SHORT)lpbmBand->bmHeight),
                ("HRE: RectB y2 = %d\r\n", lpRE->sRow + ubHeight));

            RP_FILLSCANROW
            (
            	lpRE, lpRE->sCol, lpRE->sRow, ubWidth, ubHeight,
            	(LPBYTE) lpRE->lpCurBrush, lpRE->ulRop,
              lpbmBand->bmBits, lpbmBand->bmWidthBytes, yBrush
            );
            break;
         }

         case JG_RP_RectS:
         {
            USHORT   usHeight = *lpus++;
            USHORT   usWidth  = *lpus++;            

            ASSERT ((lpRE->sCol < 0 || lpRE->sCol >= (SHORT) lpbmBand->bmWidth),
                ("HRE: RectS xLeft = %d\r\n", lpRE->sCol));
            ASSERT ((lpRE->sCol + (SHORT)usWidth> (SHORT) lpbmBand->bmWidth),
                ("HRE: RectS xRight = %d\r\n", lpRE->sCol + usWidth));
            ASSERT ((lpRE->sRow < 0 || lpRE->sRow >= (SHORT)lpbmBand->bmHeight),
                ("HRE: RectS yTop = %d\r\n", lpRE->sRow));
            ASSERT ((lpRE->sRow + (SHORT)usHeight > (SHORT)lpbmBand->bmHeight),
                ("HRE: RectS yBottom = %d\r\n", lpRE->sRow + usHeight));

            RP_FILLSCANROW
						(
							lpRE, lpRE->sCol,	lpRE->sRow, usWidth, usHeight,
							(LPBYTE) lpRE->lpCurBrush, lpRE->ulRop,
              lpbmBand->bmBits, lpbmBand->bmWidthBytes, yBrush
            );
            break;
         }

         case JG_RP_BitMapHI:
         {
            UBYTE    ubCompress;
            UBYTE    ubLeft;
            USHORT   usHeight;
            USHORT   usWidth;
            ULONG FAR *ulBitMap;

            ubCompress = *lpub++;
            ubLeft = *lpub++;
            usHeight = GETUSHORTINC(lpus);
            usWidth = GETUSHORTINC(lpus);
            // ulBitMap = (ULONG FAR *)GETULONGINC(lpul);
            ulBitMap = lpul;

            RP_BITMAP1TO1
            ( 
              lpRE,
              (USHORT) ubLeft,
              (USHORT) lpRE->sRow,
              (USHORT) (lpRE->sCol + ubLeft),
              (USHORT) ((usWidth+ubLeft+0x1f) >>5),
              (USHORT) usHeight,
              (USHORT) usWidth,
              (ULONG FAR *) ulBitMap,
              (ULONG FAR *) lpRE->lpCurBrush,
              lpRE->ulRop
            );
            lpul += usHeight * ((usWidth + ubLeft + 0x1F) >> 5);  // @2
            break;

         }

         case JG_RP_BitMapHR:
         {
            LPJG_BM_HDR lpBmp;
            UBYTE    ubCompress;
            UBYTE    ubLeft;
            USHORT   usHeight;
            USHORT   usWidth;
            ULONG FAR *ulBitMap;

            lpBmp = lpRE->lpCurBitmap;
			if (NULL == lpBmp)
			{
				// this is unexpected case.
				// the automatic tools warn us against this option
				// check windows bug# 333678 for details.
				// the simple cure: exit the function!
				goto EndRPL;
			}

            ubCompress = lpBmp->ubCompress;
            ubLeft = lpBmp->ubLeft;
            usHeight = GETUSHORT(&lpBmp->usHeight);
            usWidth = GETUSHORT(&lpBmp->usWidth);
            ulBitMap = lpRE->lpCurBitmapPtr;

            // Special case band bitmap.
            if (ulBitMap == (ULONG FAR*) lpbmBand->bmBits)
            	break;

            // Call bitblt.
            RP_BITMAP1TO1
            (
              lpRE,
              (USHORT) ubLeft,
              (USHORT) lpRE->sRow,
              (USHORT) (lpRE->sCol + ubLeft),
              (USHORT) ((usWidth+ubLeft+0x1f) >>5),
              (USHORT) usHeight,
              (USHORT) usWidth,
              (ULONG FAR *) ulBitMap,
              (ULONG FAR *) lpRE->lpCurBrush,
              lpRE->ulRop
            );
            break;

         }
         case JG_RP_BitMapV:
         {
            UBYTE      ubTopPad;
            USHORT     usHeight;

            ubTopPad = *lpub++;
            usHeight = GETUSHORTINC(lpus);

            ASSERT ((lpRE->sRow - (SHORT)usHeight + 1 < 0 ||
                lpRE->sRow - (SHORT)usHeight + 1 >= (SHORT)lpbmBand->bmHeight),
                ("HRE: BitmapV y1 = %d\r\n", lpRE->sRow + usHeight));
            ASSERT ((lpRE->sRow < 0 || lpRE->sRow >= (SHORT)lpbmBand->bmHeight),
              ("HRE: BitmapV y2 = %d\r\n", lpRE->sRow));

            lpub += RP_BITMAPV (lpRE->sRow, lpRE->sCol, ubTopPad, 
              usHeight, lpub, lpbmBand->bmBits, lpbmBand->bmWidthBytes);
            lpRE->sCol--;
            break;
         }

         /* 0x60 - 0x63 */
         case JG_RP_GlyphB1:
            iGlyph = (USHORT)*lpub++;
            sLoopCount = 1;
            goto  PlaceGlyph;

         case JG_RP_GlyphBD:
            lpRE->sRow += (SBYTE)*lpub++;
            lpRE->sCol += (SBYTE)*lpub++;
            iGlyph = (USHORT)*lpub++;
            sLoopCount = 1;
            goto PlaceGlyph;

         case JG_RP_GlyphBDN:
            sLoopCount = *lpub++;
            lpRE->sRow += (SBYTE)*lpub++;
            lpRE->sCol += (SBYTE)*lpub++;
            iGlyph = (USHORT)*lpub++;
            goto PlaceGlyph;

      PlaceGlyph:
      {
         SHORT       i;

         /* render the glyph */
         lpResDir = (LPRESDIR)(lpRE->lpCurGS);
         ASSERT ((!lpResDir), ("No selected glyph set!"));
         lpFrame = (LPFRAME)(lpResDir->lpFrameArray);

         for (i = 1; i <= sLoopCount; i++)
         {
            LPJG_GLYPH lpGlyph;
            ULONG FAR *lpSrc;

						
#ifndef MARSHAL
                LPJG_GS_HDR lpGh  = (LPJG_GS_HDR) (lpFrame->lpData);

                // Check that glyph index is within bounds.
                if (iGlyph >= lpGh->usGlyphs)
                {
                	RETAILMSG(("WPSFAXRE DoRpl glyph index out of range!\n"));
                	iGlyph = 0;
                }
             
                lpGlyph = (LPJG_GLYPH) (((UBYTE FAR*) &lpGh->ResHdr.ulUid)
                      + GETUSHORT(&(lpGh->ausOffset[iGlyph])));
                lpSrc = (ULONG FAR *)&lpGlyph->aulPels[0];
#else
                lpGlyph = (LPJG_GLYPH)(lpFrame[(iGlyph+1) << 1].lpData);
                lpSrc = (ULONG FAR*)(lpFrame[((iGlyph+1) << 1) + 1].lpData);
#endif

             RP_BITMAP1TO1
             (
               lpRE,
               (USHORT)0,
               (USHORT)lpRE->sRow,
               (USHORT)lpRE->sCol,
               (USHORT) ((lpGlyph->usWidth + 31) / 32),
               (USHORT) lpGlyph->usHeight,
               (USHORT) lpGlyph->usWidth,
               (ULONG FAR *) lpSrc,
               (ULONG FAR *)lpRE->lpCurBrush,
               (ULONG)lpRE->ulRop
             );

             if (i != sLoopCount)
             {
                // only GlyphBDN comes here 
                lpRE->sRow += (SBYTE)*lpub++;
                lpRE->sCol += (SBYTE)*lpub++;
                iGlyph = (USHORT)*lpub++;
             }
         }
         break;
      }

      default:

      	ASSERT ((TRUE), ("Unsupported RPL command."));
      }
   }

EndRPL:

	CloseBlt (lpRE);
}

// PRIVATE FUNCTIONS
//---------------------------------------------------------------------------
static
void                        
RP_NewRop
(
	LPRESTATE lpRE,  
	UBYTE ubRop                  // one byte ROP code from driver, this
                               // ROP should be convert to printer ROP code
                               // in this routine
)
// PURPOSE                      set new ROP value, also do conversion
//                              since value 1 is black in printer
//                              while value 0 is black in display
//                              
//---------------------------------------------------------------------------       
{
   lpRE->usBrushWidth = 0; // reset pattern width

   lpRE->ubRop = ubRop;         // save old Rop code

   ubRop = (UBYTE) (
           (ubRop>>7&0x01) | (ubRop<<7&0x80) |
           (ubRop>>5&0x02) | (ubRop<<5&0x40) |
           (ubRop>>3&0x04) | (ubRop<<3&0x20) |
           (ubRop>>1&0x08) | (ubRop<<1&0x10)
           );
   ubRop = (UBYTE)~ubRop;

   lpRE->ulRop = ((ULONG) ubRop) << 16;
   
#ifdef WIN32
   lpRE->dwRop = lpRE->ulRop | wRopTable[lpRE->ubRop];
#endif

}
	 
//==============================================================================
void TileBrush (LPBYTE lpbPat8, LPDWORD lpdwPat32)
{
	UINT iRow;
	
	for (iRow = 0; iRow < 8; iRow++)
	{
		DWORD dwRow = *lpbPat8++;
		dwRow |= dwRow << 8;
		dwRow |= dwRow << 16;

		lpdwPat32[iRow]      = dwRow;
		lpdwPat32[iRow + 8]  = dwRow;
		lpdwPat32[iRow + 16] = dwRow;
		lpdwPat32[iRow + 24] = dwRow;
	}
}

//---------------------------------------------------------------------------
static
int
SelectResource
(
   LPHRESTATE lpHREState,      // far pointer to current job context
                               // corresponding to the job HANDLE
   UINT uid                     // specified resource uid.
)
// PURPOSE                      given a resource block pointer
//                              set this resource as current resource
//                              only glyph, brush and bitmap can be
//                              selected.
//---------------------------------------------------------------------------       
{
   LPRESDIR          lprh;
   LPRESDIR          lpResDir;
   LPJG_RES_HDR      lprh1;
   ULONG FAR         *lpBrSrc;
   LPFRAME           lpFrame;
   USHORT            usClass;
   LPRESTATE         lpRE = lpHREState->lpREState;
   
   lpRE->wColor = (uid == 0x8100)? 0x0000 : 0xFFFF;
   
   // Trap stock brushes.
   if ( uid & 0x8000 )
   {
     UINT iBrush = (uid < 0x8100)? uid - 0x8000 : uid - 0x8100 + 6;
		 if (lpRE->lpBrushPat)
       lpRE->lpCurBrush = (LPDWORD) (lpRE->lpBrushPat + 128*iBrush);
		 else
		 {
       lpRE->lpCurBrush = (LPDWORD) lpRE->TiledPat;
       TileBrush (BrushPat[iBrush], lpRE->lpCurBrush);
     }

     SetBrush (lpRE);
	   return SUCCESS;
   }
   
   /* must be downloaded resource */
   lprh = (&lpHREState->lpDlResDir[uid]);

   if ((lpResDir = (LPRESDIR)lprh) == NULL)
      return(FAILURE);

   lprh1 = (LPJG_RES_HDR)lpResDir->lpFrameArray->lpData;

   usClass = GETUSHORT(&lprh1->usClass);
   switch (usClass)
   {

   case JG_RS_GLYPH:
      lpRE->lpCurGS = (LPJG_GS_HDR)lprh;
      break;

   case JG_RS_BRUSH:
      lpFrame = (LPFRAME)(lpResDir->lpFrameArray);

#ifdef MARSHAL
      lpBrSrc = (ULONG FAR *)((++lpFrame)->lpData);
#else
      {
         LPJG_BRUSH  lpBr = (LPJG_BRUSH)(lpFrame->lpData);
         lpBrSrc = (ULONG FAR *)(lpBr->aulPels);
      }
#endif
     
      lpRE->lpCurBrush = (ULONG FAR *)lpBrSrc;
      SetBrush (lpRE);
      break;

   case JG_RS_BITMAP:
      lpFrame = (LPFRAME)(lpResDir->lpFrameArray);
      lpRE->lpCurBitmap = (LPJG_BM_HDR)(lpFrame->lpData);
      lpFrame++;

#ifdef MARSHAL      
         lpRE->lpCurBitmapPtr = (ULONG FAR *)(lpFrame->lpData);
#else
         lpRE->lpCurBitmapPtr = (ULONG FAR *)lpRE->lpCurBitmap->aulPels;
#endif

   default:
      break;
    }
    return(SUCCESS);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\devconst.inc ===
;----------------------------Module-Header------------------------------;
; Module Name: DEVCONST.BLT
;
; Device-specific constants.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;

;	MAX_BLT_SIZE is the maximum stack space required for the BITBLT
;	code.  This is a hard number to compute.  It must be based on
;	the worst case situation:
;
;		worst phase alignment
;		worst color conversions
;		first byte present
;		last byte present
;		full inner loop
;		jump into the inner loop
;
;	and any other factor which could increase the size of the code.


MAX_BLT_SIZE	=	452		;Max stack space a BLT will require


ifdef	GEN_COLOR_BLT
;	The following flags are used in the inner loops to both control
;	the EGA read/write enable registers, and the plane loop count.
;
;	They are based on a simple relationship of the EGA's Map Mask
;	register and Read Map Select Register when used as a three plane
;	system:
;
;	Map Mask:     D3 D2 D1 D0	   Read Map: D2 D1 D0
;
;	  C0 plane     0  0  0	1		      0  0  0
;	  C1 plane     0  0  1	0		      0  0  1
;	  C2 plane     0  1  0	0		      0  1  0
;
;
;	Note that to convert the map mask into a read mask for the
;	same plane only requires a "SHR x,1" instruction.  This trick
;	would not work if all four planes were used.
;
;	In four plane mode, when the above mapping occurs becomes:
;
;	  C3 plane     1  0  0	0		      1  0  0
;
;	  To map this into the correct read map register of 11b:
;
;		cmp	mask,100b	;Set 'C' if not C3
;		adc	mask,-1 	;sub -1 only if C3
;
;
;
;	The "loop counter" will consist of a bit shifted left every
;	interation of the loop, which will be used as stated above.
;	When this bit mask reaches a predetermined value, the loop
;	will terminate.


COLOR_OP	equ	C0_BIT		;Color operations start with C0
MONO_OP		equ	MONO_BIT 	;Mono operations start with mono bit

ifdef	FOUR_PLANE
END_OP		equ	(C3_BIT+MONO_BIT) SHL 1	;Loop terminating bits
else
END_OP		equ	(C2_BIT+MONO_BIT) SHL 1	;Loop terminating bits
endif





;	dl_moore_flags
;
;	dl_moore_flags pertain to color conversion only.  If color
;	conversion doesn't apply to the BLT, these flags will not
;	be defined.
;
;
;	F1_REP_OK		When F1_REP_OK is set, then the innerloop code can
;			use a REP MOVSx instruction.  This will be the
;			case if:
;
;			a)  The source is the EGA and the color compare
;			    register can be used to do the conversion
;			    from color to monochrome.
;
;			b)  The source is monochrome, the background
;			    color white, and the foreground color black,
;			    in which case color converison of the source
;			    would just give the source.
;
;	F1_NO_MUNGE 	Set under the same conditions as "b" above.


F1_REP_OK	equ	10000000b	;Using REP is ok (when F0_GAG_CHOKE)
F1_NO_MUNGE 	equ	01000000b	;No mono ==> color conversion table
;		equ	00100000b
;		equ	00010000b
;		equ	00001000b
;		equ	00000100b
;		equ	00000010b
;		equ	00000001b

endif	;GEN_COLOR_BLT


	page

;	The DEV structure contains all the information taken from the
;	PDevices passed in.  PDevices are copied to the frame to reduce
;	the number of long pointer loads required.  Having the data
;	contained in the structure allows MOVSW to be used when copying
;	the data.
;
;	width_bits	The number of pixels wide the device is.
;
;	height		The number of scans high the device is.
;
;	width_b		The width of a scan in bytes.
;
;	lp_bits		The pointer to the actual bits of the device.
;			It will be adjusted as necessary to point to the
;			first byte to be modified by the BLT operation.
;
;	plane_w		Width of one plane of data.  Only used if the
;			device is a small color bitmap.
;
;	seg_index	Index to get to the next segment of the bitmap.
;			Only defined if the bitmap is a huge bitmap.
;
;	scans_seg	Number of scan lines per 64K segment.  Only
;			defined if the bitmap is a huge bitmap.
;
;	fill_bytes	Number of unused bytes per 64K segment.  Only
;			defined if the bitmap is a huge bitmap.
;
;	dev_flags	Device Specific Flags
;			SPANS_SEG   - BLT will span 64K segment of the device
;			IS_DEVICE   - This is the physical device
;			COLOR_UP    - Generate color scan line update
;			IS_COLOR    - Device is a color device
;
;	comp_test	JC or JNC opcode, used in the huge bitmap scan line
;			update code.  This opcode is based on whether the
;			BLT is Y+, or Y-.
;
;	comp_value	Range of addresses to compare the offset against
;			to determine if overflow occured.  comp_test is the
;			conditional jump to use for no overflow after doing
;			a compare with the offset register and this value.
;
;	next_scan	Bias to get to the next (previous) scan line.


DEV		struc

  width_bits	dw	?		;Width in bits
  height	dw	?		;Height in scans
  width_b	dw	?		;Width in bytes
  lp_bits	dd	?		;Pointer to the bits
  plane_w	dw	?		;Increment to next plane
  seg_index	dw	?		;Index to next segment if huge bitmap
  scans_seg	dw	?		;Scans per segment if huge
  fill_bytes	dw	?		;Filler bytes per segment if huge
  dev_flags	db	?		;Device flags as given above
  comp_test	db	?		;JC or JNC opcode
  comp_value	dw	?		;Huge bitmap overflow range
  next_scan	dw	?		;Index to next scan

DEV		ends


;	Constants for use in dev_flags field of DEV structure:

IS_COLOR 	equ	00000001b	;Device is color
IS_DEVICE	equ	00000010b	;Physical Device
COLOR_UP 	equ	00000100b	;Color scan line update
SPANS_SEG	equ	10000000b	;BLT spans a segment boundary

OFF_LP_BITS	equ	wptr lp_bits	;Offset  portion of lp_bits
SEG_LP_BITS	equ	wptr lp_bits+2	;Segment portion of lp_bits
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\frame.h ===
/*
**  Copyright (c) 1991 Microsoft Corporation
*/
//==============================================================================
// FILE                         FRAME.H
//
// MODULE                       JUMBO Printer Driver, Queue Processor,
//                              Resource Executor, & Comm Module
//
// PURPOSE                      FRAME structure format
//
// DESCRIBED IN                 Jumbo Device Driver Design Description
//
// EXTERNAL INTERFACES
//
// INTERNAL INTERFACES
//
// MNEMONICS
//
// HISTORY  07/12/91 o-rflagg   Created
//          01/15/92 steveflu   bring up to coding conventions,
//                              change for QP interface
//
//==============================================================================


#ifndef _FRAME_
#define _FRAME_

// Don't change FRAME unless you also change the COMM driver and
// the Queue Processor, and the Resource Executor, and ....
typedef struct FRAMEtag
{
    WORD wReserved;
    WORD wSize;             // size of this block
    LPBYTE lpData;          // pointer to frame data
} FRAME;
typedef FRAME FAR *LPFRAME;
typedef FRAME NEAR *PFRAME;

#endif // _FRAME_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\genconst.inc ===
;----------------------------Module-Header------------------------------;
; Module Name: GENCONST.BLT
;
; Constants for general use in BitBLT.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; This file is a catchall for constants for use in BitBLT.
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;

;	The following equates are for stuffing into the generated BLT.
;	For full 16-bit values, the two bytes are reversed so that they
;	come out correctly when stored in memory (i.e. the 8088 stores
;	the LSB first).


I_ADD_AL_BYTE_I		equ	004h	;ADD	al,byte immediate
I_ADD_AX_WORD_I		equ	005h	;ADD	ax,word immediate
I_ADD_DI_WORD_I		equ	0C781h	;ADD	di,immediate
I_ADD_SI_WORD_I		equ	0C681h	;ADD	si,immediate
I_AND_AL_MEM		equ	00622h	;AND	al,[addr]
I_AND_AL_BYTE_I		equ	024h	;AND	al,byte immediate

I_CMP_AL_BYTE_I		equ	03Ch	;CMP	al,byte immediate
I_CMP_AX_WORD_I		equ	03Dh	;CMP	ax,word immediate
I_CMP_CX_2		equ	0F983h	;CMP	cx,2
I_CS_OVERRIDE		equ	02Eh	;CS:

I_DEC_SI_DEC_DI		equ	04F4Eh	;DEC	si
					;DEC	di
I_ES_OVERRIDE		equ	026h	;ES:
I_FS_OVERRIDE		equ	064h	;FS:
I_GS_OVERRIDE		equ	065h	;GS:

I_INC_SI_INC_DI		equ	04746h	;INC	si
					;INC	di
I_JC_P5H		equ	00372h	;JC	$+5
I_JC_P0DH		equ	00B72h	;JC	$+0Dh
I_JC_P12H		equ	01072h	;JC	$+12h
I_JMP_NEAR		equ	0E9h	;JMP	near
I_JNC			equ	073h	;JNC	short
I_JNC_P12H		equ	01073h	;JNC	$+12h
I_JNS_P6		equ	00479H	;JNS	$+6
I_JLE_P2                equ     0007EH  ;JLE    $+2     mslin

I_LEA_AX_SI_DISP16	equ	0848Dh	;lea	ax,WordDisp[si]
I_LEA_AX_DI_DISP16	equ	0858Dh	;lea	ax,WordDisp[di]
I_LODSB			equ	0ACh	;LODSB
I_LOOP			equ	0E2h	;LOOP

I_MOV_AH_AL		equ	0E08Ah	;MOV	ah,al
I_MOV_AH_DEST		equ	0258Ah	;MOV	ah,[di]
I_MOV_AH_SI_DISP16	equ	0A48Ah	;MOV	ah,WordDisp[si]
I_MOV_AL_0FFH		equ	0FFB0h	;MOV	al,0FFH
I_MOV_AL_AH		equ	0C48Ah	;MOV	al,ah
I_MOV_AL_DL		equ	0C28Ah	;MOV	al,dl
I_MOV_AL_DH		equ	0C68Ah	;MOV	al,dh
I_MOV_AL_DEST		equ	0058Ah	;MOV	al,[di]
I_MOV_AL_MEM		equ	0A0h	;MOV	al,[addr]
I_MOV_AL_SI_DISP16	equ	0848Ah	;MOV	al,WordDisp[si]
I_MOV_AX_DS		equ	0D88Ch	;MOV	ax,ds
I_MOV_AX_DI		equ	0C78Bh	;MOV	ax,di
I_MOV_AX_ES		equ	0C08Ch	;MOV	ax,es
I_MOV_AX_SI		equ	0C68Bh	;MOV	ax,si
I_MOV_AX_WORD_I		equ	0B8h	;MOV	ax,immediate
I_MOV_BL_AL		equ	0D88Ah	;MOV	bl,al
I_MOV_AL_BYTE_I		equ	0B0h	;MOV	al,immediate    mslin
I_MOV_BL_BYTE_I		equ	0B3h	;MOV	bl,immediate
I_MOV_BP_WORD_I		equ	0BDh	;MOV	bp,immediate
I_MOV_BX_WORD_I		equ	0BBh	;MOV	bx,word immediate
I_MOV_CX_DS		equ	0D98Ch	;MOV	cx,ds
I_MOV_CX_WORD_I		equ	0B9h	;MOV	cx,immediate
I_MOV_DH_BX_DISP8	equ	0778Ah	;MOV	dh,ByteDisp[si]
I_MOV_DI_AX		equ	0F88Bh	;MOV	di,ax
I_MOV_DL_AL		equ	0D08Ah	;MOV	dl,al
I_MOV_DS_AX		equ	0D88Eh	;MOV	ds,ax
I_MOV_DS_CX		equ	0D98Eh	;MOV	ds,cx
I_MOV_ES_AX		equ	0C08Eh	;MOV	es,ax
I_MOV_MEM_AL		equ	0A2h	;MOV	[addr],al
I_MOV_SI_AX		equ	0F08Bh	;MOV	si,ax
I_MOVSB			equ	0A4h	;MOVSB
I_MOVSW			equ	0A5h	;MOVSW
I_MOV_MEM_AX		equ	0A2h	;MOV	[addr],ax       ;mslin

I_MOV_BL_BYTE_I         equ     0B3h    ;MOV    bl, byte immediate

I_NOT_AL		equ	0D0F6h	;NOT	al
I_NOT_AX		equ	0D0F7h	;NOT	ax

I_OR_AL_AH		equ	0C40Ah	;OR	al,ah
I_OR_AH_AL		equ	0E00Ah	;OR	ah,al

I_POP_BX		equ	05Bh	;POP	bx
I_POP_SI		equ	05Eh	;POP	si
I_POP_DI_POP_CX		equ	0595Fh	;POP	di
					;POP	cx
I_PUSH_BX		equ	053h	;PUSH	bx
I_PUSH_SI		equ	056h	;PUSH	si
I_PUSH_CX_PUSH_DI	equ	05751h	;PUSH	cx
					;PUSH	di
I_REP			equ	0F3h	;REP
I_RET_NEAR		equ	0C3h	;RET	near
I_RET_FAR		equ	0CBh	;RET	far
I_ROL_AL_1		equ	0C0D0h	;ROL	al,1
I_ROR_AL_1		equ	0C8D0h	;ROR	al,1
I_ROL_AL_N		equ	0C0C0h	;ROL	al,N  -- next byte is N
I_ROR_AL_N		equ	0C8C0h	;ROR	al,N  -- next byte is N

I_SHL_BL_1		equ	0E3D0h	;SHL	bl,1
I_SS_OVERRIDE		equ	036h	;SS:
I_STOSB			equ	0AAh	;STOSB
I_STOSW			equ	0ABh	;STOSW

I_XOR_AL_MEM		equ	00632h	;XOR	al,[addr]
I_XOR_AL_BYTE_I		equ	034h	;XOR	al,byte immediate
I_XOR_AX_WORD_I		equ	035h	;XOR	ax,word immediate
I_XOR_BH_BH		equ	0FF32h	;XOR	BH,BH
I_XOR_MEM_WORD_I	equ	03681H	;XOR	[addr],word immediate

;mslin added
I_MOV_DX_WORD_I		equ	0BAh	;MOV	dx,immediate
I_POP_DX		equ	05Ah	;POP	dx
I_MOV_DX_DS		equ	0DA8Ch	;MOV	dx,ds
I_MOV_AL_000H		equ	000B0h	;MOV	al,000H


	page

;	INCREASE is the flag used to show that the BLT operation will be
;	increasing in Y (Y+).
;
;	DECREASE is the flag used to show that the BLT operation will be
;	decreasing in Y (Y-).
;
;	STEPLEFT is the flag used to show that the BLT will be stepping
;	left (i.e. start at the right hand corner of the source, stepping
;	left, or X-).
;
;	STEPRIGHT is the flag used to show that the BLT will be stepping
;	right (i.e. start at the left hand corner of the source, stepping
;	right, or X+).


INCREASE	equ	1		;Incrementing
DECREASE	equ	-1		;Decrementing
STEPLEFT	equ	0		;Stepping to the left
STEPRIGHT	equ	1		;Stepping to the right

	page

;	gl_the_flags
;
;	F0_GAG_CHOKE	Set if the source and destination are of different
;			color formats.	When set, some form of color
;			conversion will be required.
;
;			Once you see what all is involved with color
;			conversion, you'll understand why this flag is
;			called this.
;
;	F0_COLOR_PAT	Set if color pattern fetch code will be used.  If
;			clear, then mono pattern fetch code will be used.
;			Mono/color pattern fetch is always based on the
;			destination being mono/color (it is the same).
;
;	F0_PAT_PRESENT	Set if a pattern is involved in the BLT.
;
;	F0_SRC_PRESENT	Set if a source  is involved in the BLT.
;
;	F0_SRC_IS_DEV	Set if the source is the physical device.  Clear if
;			the source is a memory bitmap.
;
;	F0_SRC_IS_COLOR	Set if the source is color, clear if monochrome.
;
;	F0_DEST_IS_DEV	Set if the destination is the physical device.
;			Clear if the destination is a memory bitmap.
;
;	F0_DEST_IS_COLOR
;			Set if the destination is color, clear if
;			monochrome.


F0_GAG_CHOKE		equ	10000000b	;Going mono <==> color
F0_COLOR_PAT		equ	01000000b	;Use color pattern fetch code
F0_PAT_PRESENT		equ	00100000b	;Pattern is involved in blt
F0_SRC_PRESENT		equ	00010000b	;Source is involved in blt
F0_SRC_IS_DEV		equ	00001000b	;Source is the device
F0_SRC_IS_COLOR		equ	00000100b	;Source is color
F0_DEST_IS_DEV		equ	00000010b	;Destination is the device
F0_DEST_IS_COLOR	equ	00000001b	;Destination is color

;-----------------------------------------------------------------------;
; Definitions for fbFetch
;-----------------------------------------------------------------------;

FF_NO_LAST_FETCH	equ	00000010b	;Final fetch might GP
FF_TWO_INIT_FETCHES	equ	00000001b	;Two initial fetches needed
FF_ONE_INIT_FETCH	equ	       0	;One initial fetche  needed
FF_ONLY_1_DEST_BYTE	equ	00000100b	;Only one destination byte
FF_ONLY_1_SRC_BYTE	equ	00001000b	;Only one source byte


;-----------------------------------------------------------------------;
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\gdi32blt.c ===
#include <windows.h>
#include "constant.h"
#include "frame.h"      // driver header file, resource block format
#include "jtypes.h"         /* Jumbo type definitions.                */
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"          /* Slice Descriptor defs.                 */
#include "hreext.h"

//==============================================================================
BOOL OpenBlt (LPRESTATE lpRE, UINT yBrush)
{
	HDC hdcScreen;
	HBITMAP hbmDst;
  LPBITMAP lpbmBand = lpRE->lpBandBuffer;
 	UINT cbBand = lpbmBand->bmHeight * lpbmBand->bmWidthBytes;
 	LPVOID lpBits;
 	
	struct
	{
		BITMAPINFOHEADER bmih;
    DWORD dwPal[2];
	}
		bmiDst;

  // Create memory device contexts.
  hdcScreen = CreateIC ("DISPLAY", NULL, NULL, NULL);
  lpRE->hdcDst = CreateCompatibleDC (hdcScreen);
  lpRE->hdcSrc = CreateCompatibleDC (hdcScreen);
  DeleteDC (hdcScreen);

 	// Initialize destination bitmap.
  bmiDst.bmih.biSize = sizeof(BITMAPINFOHEADER);
  bmiDst.bmih.biWidth = lpbmBand->bmWidth;
  bmiDst.bmih.biHeight = -lpbmBand->bmHeight; // top-down
  bmiDst.bmih.biPlanes = 1;
  bmiDst.bmih.biBitCount = 1;
  bmiDst.bmih.biCompression = BI_RGB;
  bmiDst.bmih.biSizeImage = 0;
  bmiDst.bmih.biClrUsed = 0;
  bmiDst.bmih.biClrImportant = 0;
  bmiDst.dwPal[0] = RGB (  0,   0,   0);
  bmiDst.dwPal[1] = RGB (255, 255, 255);

  // Create DIB section.
	hbmDst = CreateDIBSection
	 	(lpRE->hdcDst, (LPBITMAPINFO) &bmiDst, DIB_RGB_COLORS, &lpBits, NULL, 0);
	if (!hbmDst)
		return FALSE;
	lpRE->hbmDef = SelectObject (lpRE->hdcDst, hbmDst);
  lpRE->hbrDef = NULL;
  		
  // Swap frame buffers.
  lpRE->lpBandSave = lpbmBand->bmBits;
  lpbmBand->bmBits = lpBits;

  // Disable GDI batching.
  GdiSetBatchLimit (1);

	return TRUE;
}

//==============================================================================
void CloseBlt (LPRESTATE lpRE)
{
	// Restore frame buffer.
	LPBITMAP lpbmBand = lpRE->lpBandBuffer;
 	UINT cbBand = lpbmBand->bmHeight * lpbmBand->bmWidthBytes;
  memcpy (lpRE->lpBandSave, lpbmBand->bmBits, cbBand);
	lpbmBand->bmBits = lpRE->lpBandSave;

  // Restore default objects.
  DeleteObject (SelectObject (lpRE->hdcDst, lpRE->hbmDef));
  DeleteObject (SelectObject (lpRE->hdcDst, lpRE->hbrDef));

  // Destroy memory device contexts.
 	DeleteDC (lpRE->hdcDst);
 	DeleteDC (lpRE->hdcSrc);

 	// Restore GDI batching.
  GdiSetBatchLimit (0);
}

//==============================================================================
DWORD FAR PASCAL RP_BITMAP1TO1
(
	LPRESTATE lpRE,
	WORD    xSrc,    // Left padding
	short   yDst,	   // Top row of destination.
	short   xDst,	   // Left column of destination.
	WORD    clLine,  // Longs per scan line
	WORD    yExt,    // Height in pixels
	WORD    xExt,    // Width in pixels 
	LPDWORD lpSrc,   // Far pointer to source
	LPDWORD lpPat,   // Far pointer to pattern
	DWORD   dwRop		 // Raster operation
)
{
	HBITMAP hbmSrc, hbmOld;
	
  // Create source bitmap.
	hbmSrc = CreateCompatibleBitmap (lpRE->hdcSrc, 32*clLine, yExt);
	SetBitmapBits (hbmSrc, 4*clLine*yExt, lpSrc);
	hbmOld = SelectObject (lpRE->hdcSrc, hbmSrc);

  // Call GDI BitBlt.
	BitBlt (lpRE->hdcDst, xDst, yDst, xExt, yExt, lpRE->hdcSrc, xSrc, 0, lpRE->dwRop);

  // Destroy source bitmap.
  SelectObject (lpRE->hdcSrc, hbmOld);
  DeleteObject (hbmSrc);
	return 0;	
}

//==============================================================================
BOOL SetBrush (LPRESTATE lpRE)
{
	HBITMAP hbmPat;
	HBRUSH hbrPat, hbrOld;

  // Create pattern brush.
  hbmPat = CreateBitmap (32, 32, 1, 1, lpRE->lpCurBrush);
	hbrPat = CreatePatternBrush (hbmPat);
	DeleteObject (hbmPat);

	// Replace previous brush.
	hbrOld = SelectObject (lpRE->hdcDst, hbrPat);
	if (lpRE->hbrDef)
		DeleteObject (hbrOld);  // delete old brush
	else
		lpRE->hbrDef = hbrOld;  // save default brush

	return TRUE;
}

//==============================================================================
ULONG FAR PASCAL RP_FILLSCANROW
(
	LPRESTATE  lpRE,       // resource executor context
	USHORT     xDst,       // rectangle left
	USHORT     yDst,       // rectangle right
	USHORT     xExt,       // rectangle width
	USHORT     yExt,       // rectangle height
	UBYTE FAR* lpPat,      // 32x32 pattern bitmap
	DWORD      dwRop,      // raster operation
	LPVOID     lpBand,     // output band buffer
	UINT       cbLine,     // band width in bytes
	WORD       yBrush      // brush position offset
)
{
	return PatBlt (lpRE->hdcDst, xDst, yDst, xExt, yExt, lpRE->dwRop);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\glyph.cpp ===
/*==============================================================================
This source file contains routines for chaingon decompression of glyphs.

29-Dec-93    RajeevD    Integrated into unified resource executor.
==============================================================================*/
#include <ifaxos.h>
#include <memory.h>
#include "resexec.h"

#include "constant.h"
#include "jtypes.h"     // type definition used in cartridge
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"    // define data structure used by hre.c and rpgen.c

#define CEIL32(val) (((val) + 31) & ~31)

#define RUN_FLAG ((short) 0x8000)

// Bit Stream Object
typedef class FAR BITIO
{
private:
	UINT uBit;
public:
	LPBYTE lpb;

	BITIO (LPBYTE lpbInit) {lpb = lpbInit, uBit = 0;}
	BITIO () {uBit = 0;}

	short Read2  (void);
	short Read4  (void);
	short Read6  (void);
	short Read8  (void);
	WORD  Read8U (void);
	short Read16 (void);
	WORD  ReadU  (void);

	short DecodeDelta (void);
}
	FAR *LPBITIO;

//==============================================================================
short BITIO::Read2 (void)
{
	short s;

	// Mask and shift 2-bit field.
	s = (*lpb >> (6 - uBit)) & 0x03;

	// Advance stream pointer.
	uBit += 2;
	if (uBit == 8)
		{lpb++; uBit = 0;}

#ifndef BITIO_NOSIGNEXT
	if (s >= 2)
		s -= 4;	// Sign extend into short.
#endif
	return s;
}

//========================================================================
short BITIO::Read4 (void)
{
	LPBYTE lpbVal;
	short s;
	
	if (uBit == 6)
	{
		lpbVal = (LPBYTE) &s;
		lpbVal[1] = *lpb++;
		lpbVal[0] = *lpb;
		s >>= 6;
		s &= 0x000F;
		uBit = 2;
	}

	else
	{
		s = (*lpb >> (4 - uBit)) & 0x0F;
		uBit += 4;
		if (uBit == 8)
			{ lpb++; uBit = 0; }
	}

#ifndef BITIO_NOSIGNEXT
	if (s >= 8)
		s -= 16; // Sign extend into short.
#endif

	return s;
}

//========================================================================
short BITIO::Read6 (void)
{
	LPBYTE lpbVal;
	short s;
	
	switch (uBit/2)
	{
		case 0:
			s = (short) (*lpb >> 2);
			uBit = 6;
			break;
				
		case 1:
			s = (short) *lpb++;
			uBit = 0;
			break;
			
		case 2:
			lpbVal = (LPBYTE) &s;
			lpbVal[1] = *lpb++;
			lpbVal[0] = *lpb;
			s >>= 6;
			uBit = 2;
			break;
			
		case 3:
			lpbVal = (BYTE *) &s;
			lpbVal[1] = *lpb++;
			lpbVal[0] = *lpb;
			s >>= 4;
			uBit = 4;
			break;
	}

	s &= 0x003F;
	
#ifndef BITIO_NOSIGNEXT
	if (s >= 32)
		s -= 64; // Sign extend into short.
#endif
	return s;
}

//========================================================================
short BITIO::Read8 (void)
{
	short s;
	LPBYTE lpbVal;

	if (uBit == 0)
		s = (short) *lpb++;

	else
	{
		lpbVal = (LPBYTE) &s;
		lpbVal[1] = *lpb++;
		lpbVal[0] = *lpb;
		s >>= (8 - uBit);
		s &= 0x00FF;
	}

#ifndef BITIO_NOSIGNEXT
	if (s >= 128)
		s -= 256;	// Sign extend into short.
#endif

	return s;
}

//========================================================================
WORD BITIO::Read8U (void)
{
	short s;
	LPBYTE lpbVal;

	if (uBit == 0)
		s = (short) *lpb++;

	else
	{
		lpbVal = (LPBYTE) &s;
		lpbVal[1] = *lpb++;
		lpbVal[0] = *lpb;
		s >>= (8 - uBit);
		s &= 0x00FF;
	}

	return s;
}

//========================================================================
short BITIO::Read16 (void)
{
	short s;
	LPBYTE lpbVal = (LPBYTE) &s;

	lpbVal[1] = *lpb++;
	lpbVal[0] = *lpb++;

	switch (uBit/2)
	{
		case 0:
			break;
			
		case 1:
			s <<= 2;
			s |= (*lpb >> 6) & 0x03;
			break;
			
		case 2:
			s <<= 4;
			s |= (*lpb >> 4) & 0x0F;
			break;
			
		case 3:
			s <<= 6;
			s |= (*lpb >> 2) & 0x3F;
			break;
	}

	return s;
}

//==============================================================================
WORD BITIO::ReadU (void)
{
	WORD w = Read8U();
	if (w == 0xFF)
		w = Read16();
	return w;
}


/*==============================================================================
This utility procedure uses an OR operation to fill runs in a scan buffer.
==============================================================================*/
LPBYTE FillRun     // Returns next scan line
(
	LPBYTE lpbLine,   // first output scan line
	UINT   cbLine,    // width of a scan line
 	UINT   xLeft,     // left column, inclusive
	UINT   xRight,    // right column, exclusive
	UINT   cLines = 1 // number of scan lines
)
{
	const static WORD wFill[16] =
	{
		0xFFFF, 0xFF7F, 0xFF3F, 0xFF1F,
		0xFF0F, 0xFF07, 0xFF03, 0xFF01,
		0xFF00, 0x7F00, 0x3F00, 0x1F00,
		0x0F00, 0x0700, 0x0300, 0x0100,
	};

	UINT iwLeft, iwRight;
	WORD wLeft,  wRight; // masks
	LPWORD lpwLine = (LPWORD) lpbLine;
	UINT cwLine = cbLine / 2;

	iwLeft  = xLeft  / 16;
	iwRight = xRight / 16;
	wLeft  =  wFill [xLeft  & 15];
	wRight = ~wFill [xRight & 15];
	
	if (iwLeft == iwRight)
	{
		while (cLines--)
		{
			// Run is within a single WORD.
			lpwLine[iwLeft] |= wLeft & wRight;
			lpwLine += cwLine;
		}
	}
	
	else
	{
		UINT cbMiddle = 2 * (iwRight - iwLeft - 1);

		while (cLines--)
		{
			// Run spans more than one WORD.
			lpwLine[iwLeft] |= wLeft;
			_fmemset (lpwLine + iwLeft + 1, 0xFF, cbMiddle);
			if (wRight) // Don't access beyond output!
				lpwLine[iwRight] |= wRight;
			lpwLine += cwLine;
		}	
	}

	return (LPBYTE) lpwLine;
}

//==============================================================================
UINT              // unpacked size
UnpackGlyph  
(	
	LPBYTE lpbIn,   // packed glyph
	LPBYTE lpbOut   // output buffer
)
{
	BITIO bitio (lpbIn); // input bit stream
	LPWORD lpwOut;       // alias for lpbOut
	WORD xExt, yExt;     // glyph dimensions
	UINT cbLine;         // scan line width

	// Decode glyph header.
	xExt = bitio.ReadU();
	yExt = bitio.ReadU();
	cbLine = CEIL32(xExt) / 8;
	
	// Write glyph dimensions.
	lpwOut = (LPWORD) lpbOut;
	*lpwOut++ = yExt;
	*lpwOut++ = xExt;
	lpbOut = (LPBYTE) lpwOut;

	// Clear output buffer.
	_fmemset (lpbOut, 0x00, cbLine * yExt);

	// Unpack each chain.
	while (1)	
	{
		LPBYTE lpbScan;         // output buffer
		UINT yTop;              // top of chaingon
		UINT xLeft, xRight;     // left and right bound
		short dxLeft, dxRight;  // left and right delta
		UINT cLine, cRun;       // line counters

		// Decode chain header.
		xRight = bitio.ReadU();
		if (!xRight) // termination
			goto done;
		cLine  = bitio.ReadU();
		xLeft  = bitio.ReadU();
    yTop   = bitio.ReadU();
		lpbScan = lpbOut + yTop * cbLine;
		xRight += xLeft;
	
		// Fill first row.
		lpbScan = FillRun (lpbScan, cbLine, xLeft, xRight);
		cLine--;

		// Fill remaining rows.
		while (cLine)
		{
			dxLeft = bitio.DecodeDelta ();

			if (dxLeft == RUN_FLAG) 
			{
				// Decode run of repeated lines.
 				cRun = (bitio.Read4() & 0xF) + 3;
				lpbScan = FillRun (lpbScan, cbLine, xLeft, xRight, cRun);
				cLine -= cRun;
			}
			
			else 
			{
				// Adjust by deltas.
				dxRight = bitio.DecodeDelta();
				xLeft  += dxLeft;
				xRight += dxRight;
				lpbScan = FillRun (lpbScan, cbLine, xLeft, xRight);
				cLine--;
   		}

	 	} // while (cLine--)

	} // while (1)

done:
	return 2 * sizeof(WORD) + yExt * cbLine;
}
	
//==============================================================================
void WINAPI UnpackGlyphSet (LPVOID lpIn, LPVOID lpOut)
{
	LPJG_GS_HDR lpSetIn  = (LPJG_GS_HDR) lpIn;
	LPJG_GS_HDR lpSetOut = (LPJG_GS_HDR) lpOut;
	LPBYTE lpbOut;
	WORD iGlyph;

	// Copy header.
	_fmemcpy (lpSetOut, lpSetIn, sizeof(JG_RES_HDR) + sizeof(WORD));

	// Create pointer to end of offset tables.
	lpbOut = ((LPBYTE) lpSetOut) + lpSetIn->ausOffset[0];

	// Unpack the glyphs.	
	for (iGlyph=0; iGlyph<lpSetIn->usGlyphs; iGlyph++)
 	{
		lpSetOut->ausOffset[iGlyph] = (USHORT)(lpbOut - (LPBYTE) lpSetOut);
		lpbOut += UnpackGlyph
			((LPBYTE) lpSetIn + lpSetIn->ausOffset[iGlyph], lpbOut);
 	}
}

//==============================================================================
short  // Returns delta (or RUN_FLAG)
BITIO::DecodeDelta (void)
{
	short s;

	s = Read2();	     
	if (s != -2)       // Trap -1, 0, +1.
		return s;

	s = Read4();	     // Get 4-bit prefix.
	switch (s)
	{
		case 0: // run of zeros
			return RUN_FLAG;

		case 1: // 6-bit literal
			s = Read6();
			return (s >= 0? s + 8  : s - 7);

		case -1: // 8-bit literal
			s = Read8();
			return (s >= 0? s + 40 : s - 39);

		case -8: // 16-bit literal
			return Read16();

		default: // 4-bit literal
			return s;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\gendata.inc ===
;----------------------------Module-Header------------------------------;
; Module Name: GENDATA.BLT
;
; Data definitions for BitBLT.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; This file is a catchall for data definitions other that code templates
; for BitBLT.
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
; 03/06/92  dstseng change bitmask_tbl1/bitmask_tbl2 to private
;-----------------------------------------------------------------------;

;	The following two bitmask tables are used for fetching
;	the first and last byte used-bits bitmask.


;	public bitmask_tbl1
;	public _bitmask_tbl1
bitmask_tbl1	label	byte
_bitmask_tbl1	label	byte
	db	11111111b		;Masks for leftmost byte
	db	01111111b
	db	00111111b
	db	00011111b
	db	00001111b
	db	00000111b
	db	00000011b
	db	00000001b


;	public bitmask_tbl2
;	public _bitmask_tbl2
bitmask_tbl2	label	byte
_bitmask_tbl2	label	byte
	db	10000000b		;Masks for rightmost byte
	db	11000000b
	db	11100000b
	db	11110000b
	db	11111000b
	db	11111100b
	db	11111110b
	db	11111111b



;	phase_tbl1 is used for loading the "used" bits and "saved" bits
;	bitmasks for cases 1,2,3 where the step direction is left to
;	right.	If it weren't for the case of zero, this could be done
;	with a simple rotate of 00FF.	For cases 4,5,6, a simple rotate
;	can create the mask needed.


;	public	phase_tbl1
phase_tbl1	label	word
	db	11111111b,00000000b		;Used bits, saved bits
	db	00000001b,11111110b
	db	00000011b,11111100b
	db	00000111b,11111000b
	db	00001111b,11110000b
	db	00011111b,11100000b
	db	00111111b,11000000b
	db	01111111b,10000000b
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\genlocal.inc ===
;----------------------------Module-Header------------------------------;
; Module Name: GENLOCAL.BLT
;
; Parameters and generic local variables for BitBLT.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; This file contains the parameters passed to BitBLT, as well as local
; variables that all of its code expects.
;
; The prefix "gl_" stands for "generic local". Other prefixes are "cl_"
; for "color-related local" and "dl_" for "device-related local".
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;

        parmD   _PRT_FrameStart      ;Get pointer to destination
        parmD   _lpgBrush
        parmW   _PRT_BytesPerScanline
        parmW   _usBrushWidth
        parmW   _PRT_Max_X
        parmW   _PRT_Max_Y
        parmW   _usgPosOff      ; dstseng 08/06/92 To get correct Brush Offset
        parmW   SrcxOrg                 ;Source      origin - x coordinate
        parmW   DestyOrg                ;Destination origin - y coordinate
        parmW   DestxOrg                ;Destination origin - x coordinate
        parmW   DestWarp                ;Destination # of DWord per scanline
        parmW   yExt                    ;y extent of the BLT
        parmW   xExt                    ;x extent of the BLT
        parmD   lpSrcDev                ;--> to source bitmap descriptor
        parmD   lpPBrush                ;--> to a physical brush (pattern)
        parmD   Rop                     ;Raster operation descriptor

;       Generic locals (i.e. used by all BitBLT code)

ifdef   THIS_IS_DOS_3_STUFF
else
;        localW  ScreenSelector
endif
        localB  gl_phase_h              ;Horizontal phase (rotate count)
        localW  gl_pat_row              ;Current row for patterns [0..31]
;mslin        localB  gl_direction            ;Increment/decrement flag

        localB  local_enable_flag       ;Local copy of the enable flag
;       localB  mask_flags              ;Number of first fetches needed
;
;MF_PHASE               equ     00000111b
;MF_PHASE_POSITIVE      equ     00001000b
;MF_STEP_RIGHT          equ     00010000b
;MF_WORD_FETCH          equ     00100000b
;MF_BIG_PHASE           equ     01000000b ; phase > 4
;MF_UN_USED             equ     10000000b

        localB  gl_the_flags
        localB  gl_first_fetch          ;Number of first fetches needed
        localB  gl_step_direction       ;Direction of move (left right)
        localW  gl_start_mask           ;Mask for first dest byte
        localW  gl_last_mask            ;Mask for last  dest byte
        localW  gl_mask_p               ;Horizontal phase mask
        localW  gl_inner_loop_count     ;# of entire bytes to BLT in innerloop
        localW  gl_operands             ;Operand string
        localW  gl_start_fl             ;Start of fetch/logic operation
        localW  gl_end_fl               ;End   of fetch/logic operation
        localW  gl_end_fls              ;End   of fetch/logic/store operation
        localD  gl_blt_addr             ;BLT offset address
        localW  WorkSelector            ; selector to use
        localW  cFetchCode              ;size of the fetch code alone


        localW  SrcxOrg                 ;Source origin - x coordinate
        localW  SrcyOrg                 ;Source origin - y coordinate
        localW  gl_pattern_ptr          ;next fetch byte pattern address
        localW  destOffset
        localW  gl_pat_col              ;Current row for patterns [0..3]
        localW  gl_brush_width          ;Current brush width in byte
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\hreblt.c ===
#include <ifaxos.h>
#include <resexec.h>
#include "constant.h"
#include "jtypes.h"     // type definition used in cartridge
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"    // define data structure used by hre.c and rpgen.c

//==============================================================================
BOOL OpenBlt (LPRESTATE lpRE, UINT yBrush)
{
	lpRE->usBrushWidth = 0;
	return TRUE;
}

//==============================================================================
void CloseBlt (LPRESTATE lpRE)
{

}

//==============================================================================
BOOL SetBrush (LPRESTATE lpRE)
{
	lpRE->usBrushWidth = 0;
	return TRUE;
}

//==============================================================================
DWORD FAR PASCAL HREBitBlt
(
	LPVOID  PRT_FrameStart,
	LPVOID  lpgBrush,
	WORD    PRT_BytesPerScanLine,
	WORD    usBrushWidth,
	WORD    PRT_Max_X,
	WORD    PRT_Max_Y,
	WORD    usgPosOff,
	WORD    xSrc,    // Left padding
	short   yDst,	   // Top row of destination.
	short   xDst,	   // Left column of destination.
	WORD    clLine,  // Longs per scan line
	WORD    yExt,    // Height in pixels
	WORD    xExt,    // Width in pixels 
	LPDWORD lpSrc,   // Far pointer to source
	LPDWORD lpPat,   // Far pointer to pattern
	DWORD   dwRop	 // Raster operation
);

DWORD FAR PASCAL RP_BITMAP1TO1
(
	LPRESTATE lpRE,
	WORD    xSrc,    // Left padding
	short   yDst,	   // Top row of destination.
	short   xDst,	   // Left column of destination.
	WORD    clLine,  // Longs per scan line
	WORD    yExt,    // Height in pixels
	WORD    xExt,    // Width in pixels 
	LPDWORD lpSrc,   // Far pointer to source
	LPDWORD lpPat,   // Far pointer to pattern
	DWORD   dwRop		 // Raster operation
)
{
	LPBITMAP lpbmBand = lpRE->lpBandBuffer;

	return HREBitBlt
		(
			lpbmBand->bmBits, lpRE->lpBrushBuf, lpbmBand->bmWidthBytes,
			lpRE->usBrushWidth, lpbmBand->bmWidth, lpbmBand->bmHeight, lpRE->yPat,
			xSrc, yDst, xDst, clLine, yExt, xExt, lpSrc, lpPat, dwRop
		);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\hreext.h ===
// Extern functions declaration

#ifndef _HREEXT_
#define _HREEXT_

// Execute an RPL
void DoRPL (LPHRESTATE lpHREState, LPRPLLIST lpRPL);

BOOL InitDisplay (LPRESTATE, UINT);

// BitBlt: source is aligned, destination is not aligned
ULONG FAR PASCAL RP_BITMAP1TO1
(
	 LPVOID   lpContext,          // resource executor context
   USHORT   us_xoffset,         /* left offset of source bitmap */
   short    ul_row,             /* top row position */
   short    ul_col,             /* left column position */
   USHORT   ul_warp,            /* longs per scan line */
   USHORT   ul_height,          /* num of dot rows */
   USHORT   ul_width,           /* num of significant dot columns */
   ULONG FAR *pul_src,          /* bit map data to be copied */
   ULONG FAR *pul_pat,          /* pattern pointer */
   ULONG    ul_rop
);

// PatBlt
ULONG FAR PASCAL RP_FILLSCANROW
(
	LPRESTATE  lpRE,       // resource executor context
	USHORT     xDst,       // rectangle left
	USHORT     yDst,       // rectangle right
	USHORT     xExt,       // rectangle width
	USHORT     yExt,       // rectangle height
	UBYTE FAR* lpPat,      // 32x32 pattern bitmap
	DWORD      dwRop,      // raster operation
	LPVOID     lpBand,     // output band buffer
	UINT       cbLine,     // band width in bytes
	WORD       yBrush      // brush position offset
);

// Vertical Bitmaps
USHORT FAR PASCAL RP_BITMAPV
(
   USHORT  usRow,             /* Row to start Bitmap             */
   USHORT  usCol,             /* Column to Start Bitmap          */
   UBYTE   ubTopPadBits,      /* Bits to skip in the data stream */
   USHORT  usHeight,          /* Number of bits to draw          */
   UBYTE FAR  *ubBitmapData,  /* Data to draw                    */
   LPVOID  lpBits,            // output band buffer
   UINT    cbLine             // bytes per scan line
);

UINT RP_LineEE_Draw
(
	RP_SLICE_DESC FAR *slice,
	LPBITMAP lpbmBand
);
 
// Convert a line from endpoint form to slice form
void RP_SliceLine
(
   SHORT s_x1, SHORT s_y1,  // endpoint 1
   SHORT s_x2, SHORT s_y2,  // endpoint 2
   RP_SLICE_DESC FAR* lpsd, // output slice form of line
   UBYTE fb_keep_order      // keep drawing order on styled lines/
);

#endif // _HREEXT_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\hre.c ===
/*
**  Copyright (c) 1991 Microsoft Corporation
*/
//===========================================================================
// FILE                         HRE.C
//
// MODULE                       Host Resource Executor
//
// PURPOSE                      Convert A-form to B-form for jumbo driver
//
// DESCRIBED IN                 Resource Executor design spec.
//
// MNEMONICS                    n/a
// 
// HISTORY  1/17/92 mslin       created
//          3/30/92 mslin       Pre-compiled brush generated for each job.
//                              ideal case would be initialize PcrBrush in
//                              HRE.DLL loading, and free up when HRE 
//                              terminate. but we had problem in Dumbo, ???
//                              Expanded Brush Buffer allocated for each job.
//                              lpgBrush will be set to lpREState->lpBrushBuf
//                              in DoRpl().
//          4/15/92 mslin       added uiHREExecuteRPL() for dumbo.
//          9/27/93 mslin       added a new bit of wFlags in hHREOpen() for
//                              300/600 dpi:
//                                  bit2: 0 -- 300 dpi
//                                  bit2: 1 -- 600 dpi
//                              also remove DUMBO compiler switch. 
//          2/09/94 rajeevd     Undid all of the above changes.
//===========================================================================

// include file
#include <windows.h>
#include <windowsx.h>
#include <resexec.h>

#include "constant.h"
#include "jtypes.h"     // type definition used in cartridge
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"    // define data structure used by hre.c and rpgen.c

#include "hreext.h"
#include "multbyte.h"   // define macros to take care of byte ordering

#define HRE_SUCCESS             0x0     // successful return from HRE
#define HRE_EXECUTED_RPL        0x01    // Executed the final RP in an RPL
#define HRE_EXECUTED_ONE        0x02    // Executed only one RP from an RPL
                                        // (not the last one)
#define HRE_ERROR               0x03    // General HRE failure

// PRIVATE functions
static   UINT        PutRPL(LPHRESTATE lpHREState, LPFRAME lpFrameArray,
                     UINT uiCount);
static   UINT        FreeRPL(LPRPLLIST lpRPL);

#ifdef DEBUG
DWORD    dwrgTime[MAXBAND];
SHORT    sCurrentLine;
ULONG    ulgPageId = 0;
ULONG    ulgTimes[1000] = {0};
#endif

#include "windows.h"

//==============================================================================

#ifndef WIN32

BOOL WINAPI LibMain
    (HANDLE hInst, WORD wSeg, WORD wHeap, LPSTR lpszCmd)
{ return 1; }

int WINAPI WEP (int nParam);
#pragma alloc_text(INIT_TEXT,WEP)
int WINAPI WEP (int nParam)
{ return 1; }

#endif

//==============================================================================
HANDLE                 // context handle (NULL on failure)
WINAPI hHREOpen
(
    LPVOID lpBrushPat,   // array of 32x32 brush patterns
    UINT   cbLine,       // maximum page width in bytes
    UINT   cResDir       // entries in resource directory
)
{
   HANDLE      hHREState;
   LPHRESTATE  lpHREState;
   LPRESTATE   lpREState;
   LPRESDIR    lpDlResDir;

   // create a handle for the new session 
   if (!(hHREState = GlobalAlloc(GMEM_MOVEABLE, sizeof(HRESTATE))))
      return (NULL);
   lpHREState = (LPHRESTATE) GlobalLock (hHREState);

   // allocate Download ResDir Table
   if (!(lpDlResDir = (LPRESDIR) GlobalAllocPtr (GMEM_ZEROINIT, sizeof(RESDIR) * cResDir)))
   {
      // unlock and free HRESTATE
      GlobalUnlock(hHREState);
      GlobalFree(hHREState);
      return(NULL);
   }
   
   // allocate RESTATE data structure and Initialize it
   // this is graphic state of rendering 
   if (!(lpREState = (LPRESTATE) GlobalAllocPtr (GMEM_ZEROINIT, sizeof(RESTATE))))
   {
      GlobalUnlock(hHREState);
      GlobalFree(hHREState);
      GlobalFreePtr (lpDlResDir);
      return (NULL);
   }

#ifdef WIN32

  lpREState->lpBrushBuf = NULL;

#else

   if (!(lpREState->lpBrushBuf = (LPSTR) GlobalAllocPtr(GMEM_MOVEABLE, (cbLine + 4) * 16)))
   {
      GlobalUnlock(hHREState);
      GlobalFree(hHREState);
      GlobalFreePtr (lpDlResDir);
      GlobalFreePtr (lpREState);
      return (NULL);
   }

#endif
      
   // Initialize RESTATE
   lpREState->lpBrushPat = lpBrushPat;
                                            
   // Initialize HRESTATE
   lpHREState->hHREState = hHREState;
   lpHREState->scDlResDir = (USHORT)cResDir;
   lpHREState->lpDlResDir = lpDlResDir;
   lpHREState->lpRPLHead= NULL;
   lpHREState->lpRPLTail= NULL;
   lpHREState->lpREState = lpREState;

   GlobalUnlock(hHREState);
   return(hHREState);
}

//---------------------------------------------------------------------------
UINT                            // will be zero (0) if resource is processed
                                // succesfully, otherwise it will be an error
                                // code as defined above.
WINAPI uiHREWrite
(
    HANDLE      hHREState,      // handle returned previously by hREOpen
    LPFRAME     lpFrameArray,   // FAR pointer to an array of FRAME structs
    UINT        uiCount         // Number of FRAME structs pointed to by 
                                // lpFrameArray
)

// PURPOSE                      To add a resource block (RPLK) to the
//                              HRE state hash table for the context
//                              identified by hHREState.
//
// ASSUMPTIONS & ASSERTIONS     The memory for the RBLK has allready been
//                              Allocated and locked.  HRE will not copy the
//                              data, just the pointers.
//                              The lpFrameArray does not point to an SPL.
//                              All SPL's will be handled externally to HRE.
//
// INTERNAL STRUCTURES          
//
// UNRESOLVED ISSUES            
//
//---------------------------------------------------------------------------       
{
   LPHRESTATE     lpHREState;
   LPJG_RES_HDR   lpResHdr;
   LPRESDIR       lpResDir;
   ULONG          ulUID;
   USHORT         usClass;
   HANDLE         hFrame;
   LPFRAME        lpFrameArrayDup, lpFrame;
   UINT           uiLoopCount;

   lpHREState = (LPHRESTATE) GlobalLock (hHREState);

   // get resource class                                            
   lpResHdr = (LPJG_RES_HDR )lpFrameArray->lpData;
   usClass = GETUSHORT(&lpResHdr->usClass);
   switch(usClass)
   {
      case JG_RS_RPL: /*0x4*/
         // store into RPL list
         if( PutRPL(lpHREState, lpFrameArray, uiCount) != HRE_SUCCESS )
         {
            GlobalUnlock(hHREState);
            return(HRE_ERROR);   // out of memory
         }
         break;

      case JG_RS_GLYPH: /*0x1*/
      case JG_RS_BRUSH: /*0x2*/
      case JG_RS_BITMAP: /*0x3*/
         // check to see if uid >= size of hash table then reallocate
         ulUID = GETULONG(&lpResHdr->ulUid);
         lpResDir = lpHREState->lpDlResDir;
         if (ulUID >= lpHREState->scDlResDir)
         {
               return(HRE_ERROR);
         }

         // Free frame array of previous resource block
         lpFrameArrayDup = lpResDir[ulUID].lpFrameArray;
         if(lpFrameArrayDup)
           GlobalFreePtr (lpFrameArrayDup);
          
         // copy frame array
         if (!(hFrame = GlobalAlloc(GMEM_MOVEABLE, uiCount * sizeof(FRAME))))
            return (HRE_ERROR);
         if (!(lpFrameArrayDup = (LPFRAME)GlobalLock(hFrame)))
         {
            GlobalFree(hFrame);
            return (HRE_ERROR);
         }
         lpFrame = lpFrameArrayDup;
         for(uiLoopCount=0; uiLoopCount<uiCount; uiLoopCount++)
         {
            *lpFrame++ = *lpFrameArray++;
         }

         // put into hash table
         lpResDir[ulUID].lpFrameArray = lpFrameArrayDup;
         lpResDir[ulUID].uiCount = uiCount;
         break;
         
      default:
         // error return 
         break;

   }

   GlobalUnlock(hHREState);
   return(HRE_SUCCESS);

}


//---------------------------------------------------------------------------
UINT   WINAPI uiHREExecute
(
    HANDLE   hHREState,  // resource executor context
  LPBITMAP lpbmBand,   // output band buffer
  LPVOID   lpBrushPat  // array of 32x32 brush patterns
)
{
   LPHRESTATE  lpHREState;
   LPRESTATE   lpRE;
   LPRPLLIST   lpRPL, lpRPLSave;

   lpHREState = (LPHRESTATE) GlobalLock (hHREState);
   
   // Record parameters in RESTATE.
   lpRE = lpHREState->lpREState;
   lpRE->lpBandBuffer = lpbmBand;
   lpRE->lpBrushPat   = lpBrushPat;

   lpRPL = lpHREState->lpRPLHead;
   do
   {
     DoRPL(lpHREState, lpRPL);
      lpRPLSave = lpRPL;
      lpRPL=lpRPL->lpNextRPL;
      FreeRPL(lpRPLSave);
   }
   while(lpRPL);
   // if last RP executed then update lpRPLHead
   lpHREState->lpRPLHead = lpRPL;
   
   GlobalUnlock(hHREState);
   return(HRE_EXECUTED_RPL);

}

//---------------------------------------------------------------------------
UINT                            // will be zero (0) if HRE context is closed
                                // succesfully, otherwise it will be an error
                                // code as defined above.
WINAPI uiHREClose
(
    HANDLE      hHREState       // handle returned previously by hREOpen
)

// PURPOSE                      To close a previously opened context in the
//                              HRE.  All memory and state information 
//                              associated with the context will be freed.
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          None.
//
// UNRESOLVED ISSUES            programmer development notes
//
// --------------------------------------------------------------------------
{
   LPHRESTATE  lpHREState;
   LPRESTATE   lpRE;
   LPRESDIR    lpDlResDir;
   SCOUNT      scDlResDir;
   SCOUNT      sc;
   LPFRAME     lpFrameArray;
    
   if (!(lpHREState = (LPHRESTATE) GlobalLock (hHREState)))
     return HRE_ERROR;

   lpDlResDir = lpHREState->lpDlResDir;
   if(lpDlResDir != NULL)                 // mslin, 4/15/92 for dumbo
   {
      scDlResDir = lpHREState->scDlResDir;
      // free frame array of DlResDir
      for(sc = 0; sc < scDlResDir; sc++)
      {
         if( (lpFrameArray = lpDlResDir[sc].lpFrameArray) != NULL)
           GlobalFreePtr (lpFrameArray);
      }

      // unlock and free DlResDir
      GlobalFreePtr(lpDlResDir);
   }

     lpRE = lpHREState->lpREState;

#ifndef WIN32
   GlobalFreePtr (lpRE->lpBrushBuf);
#endif   
   GlobalFreePtr (lpRE);
   
   GlobalUnlock(hHREState);
   GlobalFree(hHREState);
   
   return(HRE_SUCCESS);
}
 
// ------------------------------------------------------------------------
static
UINT                         // HRE_SUCCESS if allocate memory OK
                             // HRE_ERROR if allocate memory failure
PutRPL
(
   LPHRESTATE lpHREState,
   LPFRAME lpFrameArray,
   UINT uiCount
)
// PURPOSE
//                            Allocate a RPL entry and then put RPL into 
//                            tail of RPL list.
//
//           
// ------------------------------------------------------------------------
{
   HANDLE      hRPL;
   LPRPLLIST   lpRPL;
   HANDLE      hFrame;
   LPFRAME     lpFrameArrayDup, lpFrame;
   UINT        uiLoopCount;

   BOOL        fAllocMemory = FALSE;
   if (hRPL = GlobalAlloc(GMEM_MOVEABLE, sizeof(RPLLIST)))
   {
        if (lpRPL = (LPRPLLIST)GlobalLock(hRPL))
        {
            if (hFrame = GlobalAlloc(GMEM_MOVEABLE, uiCount * sizeof(FRAME)))
            {
                if (lpFrameArrayDup = (LPFRAME)GlobalLock(hFrame))
                {
                    // all allocations are ok:
                    fAllocMemory = TRUE;
                }
                else
                {
                    GlobalFree(hFrame);
                    GlobalUnlock(hRPL);
                    GlobalFree(hRPL);     
                }
            }
            else
            {
                GlobalUnlock(hRPL);
                GlobalFree(hRPL);     
            }
        }
        else
        {
            GlobalFree(hRPL);
        }

   }
   
   if (!fAllocMemory)
   {
       return (HRE_ERROR);
   }


   lpFrame = lpFrameArrayDup;
   for(uiLoopCount=0; uiLoopCount<uiCount; uiLoopCount++)
   {
      *lpFrame++ = *lpFrameArray++;
   }

   lpRPL->uiCount = uiCount;
   lpRPL->lpFrame = lpFrameArrayDup;
   lpRPL->lpNextRPL = NULL;
   if(lpHREState->lpRPLHead == NULL)
   {
      // first RPL
      lpHREState->lpRPLHead = lpHREState->lpRPLTail = lpRPL;
   }
   else
   {
      lpHREState->lpRPLTail->lpNextRPL = lpRPL;
      lpHREState->lpRPLTail = lpRPL;
   }
   return(HRE_SUCCESS);
}

// ------------------------------------------------------------------------
static
UINT                            // HRE_SUCCESS if allocate memory OK
                                // HRE_ERROR if allocate memory failure
FreeRPL
(
   LPRPLLIST lpRPL
)
// PURPOSE
//                               Free a RPL entry and its frame array
//
// ------------------------------------------------------------------------
{
    GlobalFreePtr (lpRPL->lpFrame);
    GlobalFreePtr (lpRPL);
    return HRE_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\hretype.h ===
/*
**  Copyright (c) 1992 Microsoft Corporation
*/
//===========================================================================
// FILE                         HRETYPE.h
//
// MODULE                       HRE (Host Resource Executor Interface)
//
// PURPOSE                      provide specification of HRE interface
//
// DESCRIBED IN                 Resource Executor design spec
//                              Host resource executor interface design spec
//
// EXTERNAL INTERFACES          This file defines the interface exported by
//                              the HPRS for use by the D'Jumbo Driver and
//                              sleek product queue processors.
//
// INTERNAL INTERFACES          
//
// MNEMONICS                    
//
// HISTORY  01/18/92 mslin     created it.
//          04/15/92 mslin     added uiStatus in _RESDIR structure for dumbo
//
//===========================================================================

// --------------------------------------------------------------------------
// Data Type definition
// --------------------------------------------------------------------------

// Host Resource Store hash table
typedef struct _RESDIR
{
  UINT      uiStatus;           // Resource status, RS_RELEASE/RS_AVAILABLE
                                 //mslin, 4/15/92 for dumbo
  UINT      uiCount;
  LPFRAME   lpFrameArray;
}
	RESDIR, *PRESDIR, FAR *LPRESDIR;

// RPL link list, it will be executed in the sequence of store
typedef struct _RPLLIST
{
   struct _RPLLIST   FAR *lpNextRPL;
   LPFRAME           lpFrame;
   UINT              uiCount;
}
	RPLLIST, FAR *LPRPLLIST;

// state of Resource Executor
typedef struct
{
   LPSTR          lpBrushBuf;   // expanded brush buffer, 3/30/92 mslin
   LPBYTE         lpBrushPat;   // pointer to custom stock brush patterns
   BYTE           TiledPat[128];// buffer for 8x8 pattern tiled into 32x32
   LPJG_BM_HDR    lpCurBitmap;  // current bitmap resource
   ULONG FAR*     lpCurBitmapPtr;   // current bitmap resource
   ULONG FAR*     lpCurBrush;   // current brush resource
   LPJG_GS_HDR    lpCurGS;      // current glyph set
   LPJG_RES_HDR   lpCurRPL;     // current RPL
   SHORT          sCol;         // current column position
   SHORT          sRow;         // current row position
   LPBITMAP       lpBandBuffer; // band buffer ??? should we save ???
   SHORT          sCol2;        // 2nd current column position
   UBYTE          ubPenStyle;   // current pen style
   USHORT         usPenPhase;   // current pen phase
   WORD           wColor;       // pen color

   // BitBlt
   ULONG          ulRop;        // shifted ropcode
   UBYTE          ubRop;        // original ropcode
	 USHORT         usBrushWidth; // brush buffer
   UINT           yPat;         // brush offset
   
#ifdef WIN32
	 // GDI32 BitBlt
   LPVOID  lpBandSave;
   HDC     hdcDst, hdcSrc;
   HBITMAP hbmDef;
   HBRUSH  hbrDef;
   DWORD   dwRop;
#endif
   
}
	RESTATE, FAR *LPRESTATE;

typedef struct
{
   HANDLE      hHREState;     // handle
   SCOUNT      scDlResDir;    // size of download resource directory
   LPRESDIR    lpDlResDir;    // download resource directory
   LPRPLLIST   lpRPLHead;     // RPL list head
   LPRPLLIST   lpRPLTail;     // RPL list tail
   LPRESTATE   lpREState;     // RE rendering state

} HRESTATE, FAR *LPHRESTATE;

// Slice descriptor, line in slice form
typedef struct
{
   USHORT us_x1,us_y1;          /* location of first dot drawn in line */
   USHORT us_x2,us_y2;          /* location of last dot drawn in line */
   SHORT  s_dx_draw,s_dy_draw;  /* direction of slice drawing */
   SHORT  s_dx_skip,s_dy_skip;  /* direction of skip between slices */
   SHORT  s_dis;                /* slice discriminant, >=0 large, <0 small */
   SHORT  s_dis_lg,s_dis_sm;    /* large/small slice discriminant adjust */
   USHORT us_first,us_last;     /* length of first and last slice in pels */
   USHORT us_n_slices;          /* number of intermediate slices */
   USHORT us_small;             /* length small slice (large is implicit) */
}
   RP_SLICE_DESC;               /* prefix "sd" */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\jtypes.h ===
/*---------------------------------------------------------------------------
 JTYPES.H -- Jumbo basic type definitions

 Chia-Chi Teng 5/23/91    Created (for use in Jasm assembler)
 Bert Douglas  6/10/91    Adapted for use in printer
*/

#ifndef jtypes_h
#define jtypes_h

#ifndef FAR
#define FAR far
#endif
#ifndef NEAR
#define NEAR near
#endif
#ifndef WINAPI
#define WINAPI 
#endif

/*---------------------------------------------------------------------------
 Variable naming conventions

   -------   ------   ----------------------------------------------------
   Typedef   Prefix   Description
   -------   ------   ----------------------------------------------------
   SBYTE     b        8 bit signed integer
   SHORT     s        16 bit signed integer
   SLONG     l        32 bit signed integer

   UBYTE     ub       8 bit unsigned integer
   USHORT    us       16 bit unsigned integer
   ULONG     ul       32 bit unsigned integer

   BFIX      bfx      8 bit (4.4) signed fixed point number
   SFIX      sfx      16 bit (12.4) signed fixed point number
   LFIX      lfx      32 bit (28.4) signed fixed point number

   UBFIX     ubfx     8 bit (4.4) unsigned fixed point number
   USFIX     usfx     16 bit (12.4) unsigned fixed point number
   ULFIX     ulfx     32 bit (28.4) unsigned fixed point number

   FBYTE     fb       set of 8 bit flags
   FSHORT    fs       set of 16 bit flags

   BPOINT    bpt      byte index into the point table (UBYTE)
   SPOINT    spt      short index into the point table (USHORT)

   BCOUNT    bc       8 bit "count" of objects
   SCOUNT    sc       16 bit "count" of objects
   LCOUNT    lc       32 bit "count" of objects
                      The number of objects is one more than the "count".
                      There must be at least one object.

   UID       uid      32 bit unique identifier
   -------   ------   ----------------------------------------------------
*/

typedef char                SBYTE, BFIX;
typedef unsigned char       FBYTE, UBYTE, BPOINT, BCOUNT, UBFIX;
typedef short               SFIX, SHORT;
typedef unsigned short      USHORT, FSHORT, SPOINT, SCOUNT, USFIX;
typedef long                LFIX, SLONG;
typedef unsigned long       ULONG, LCOUNT, ULFIX, UID;

#endif /* jtypes_h */

/* End --------------------------------------------------------------------*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\mflags.inc ===
;--------------------------------------------------
;MASMFLAGS definitions
;--------------------------------------------------
   EGA    =  0001h		;Build the EGA driver.
   VGA    =  0002h		;Build the VGA driver.
   SVGA   =  0004h		;Build the SuperVGA driver.
   ROM    =  0008h		;Build A ROMable driver.
   PENWIN =  0010h		;Build A PenWin compliant driver.
   PUBDEFS=  4000h		;Make symbols public.
   DEBUG  =  8000h		;Build a debug driver.
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\jres.h ===
/*---------------------------------------------------------------------------
 JRES.H -- Jumbo Resource definitions

 Bert Douglas  6/10/91    Adapted for use in printer
 mslin         2/15/92    Adapted for use in Host Resource Executor
                          Baseline 3.0
*/

/*---------------------------------------------------------------------------
 Resource Section
/*---------------------------------------------------------------------------
*/

#include <pshpack2.h>		// BKD 1997-7-9: added

/* Resource Header */
typedef struct 
{
      UID         ulUid;        /* shortened version of uid */
      USHORT      usClass;      /* shortened version of class */
} 
   JG_RES_HDR, *PJG_RES_HDR, FAR *LPJG_RES_HDR;

/* resource state codes */

#define JG_RES_STATE_DEFAULT ((UBYTE) 0x00)
#define JG_RES_STATE_RELEASE ((UBYTE) 0x01)
#define JG_RES_STATE_RETAIN  ((UBYTE) 0x02)
#define JG_RES_STATE_MAX     ((UBYTE) 0x03)


/* usClass Resource Description */

#define JG_RS_NULL   ( (UBYTE) 0x00 )   /* Null                       */
#define JG_RS_GLYPH  ( (UBYTE) 0x01 )   /* Glyph Set                  */
#define JG_RS_BRUSH  ( (UBYTE) 0x02 )   /* Brush                      */
#define JG_RS_BITMAP ( (UBYTE) 0x03 )   /* Horizontal Bitmap          */
#define JG_RS_RPL    ( (UBYTE) 0x04 )   /* Redner Primitive List      */
#define JG_RS_SPL    ( (UBYTE) 0x05 )   /* Supervisory Primitive List */
#define JG_RS_MAX    ( (UBYTE) 0x06 )   /* Non-inclusive limit        */

/*---------------------------------------------------------------------------
 JG_RS_GS (Glyph Set) Resource Definitions
*/

typedef struct 
{
   JG_RES_HDR  ResHdr;              /* resource header             */
   USHORT      usGlyphs;         /* count of glyphs in resource */
   USHORT      ausOffset[1];     /* table of offsets to the glyphs */
} *PJG_GS_HDR, FAR *LPJG_GS_HDR, JG_GS_HDR;

   
typedef struct 
{
   USHORT      usHeight;
   USHORT      usWidth;
   ULONG       aulPels[1];       /* start of pixel array */
} *PJG_GLYPH, FAR *LPJG_GLYPH, G_GLYPH;


/*---------------------------------------------------------------------------
 Brush Resource Definitions
*/

typedef struct 
{
   JG_RES_HDR  ResHdr;              /* resource header */
   ULONG       aulPels[32];      /* bitmap array */
} *PJG_BRUSH, FAR *LPJG_BRUSH, JG_BRUSH;

typedef struct
{
   JG_RES_HDR  ResHdr;
   UBYTE       ubCompress;
   UBYTE       ubLeft;
   USHORT      usHeight;
   USHORT      usWidth;
   ULONG       aulPels[1];
} *PJG_BM_HDR, FAR *LPJG_BM_HDR, JG_BM_HDR;


/*---------------------------------------------------------------------------
 Render Primitives Section
/*---------------------------------------------------------------------------
*/

/* RPL (Render Primitive List) Header */
typedef struct 
{
   JG_RES_HDR  ResHdr;           //resource header
   USHORT      usTopRow;         //top row, banding
   USHORT      usBotomRow;       //bottom row, banding
   USHORT      usLongs;          //number of long parm
   USHORT      usShorts;         //number of short parm
   USHORT      usBytes;          //number of byte parm
   ULONG       ulParm[1];      //start of long parm
} *PJG_RPL_HDR, FAR *LPJG_RPL_HDR, JG_RPL_HDR;


/* RP Opcode Definition */

#define JG_RP_SetRowAbsS       ( (UBYTE) 0x00 )
#define JG_RP_SetRowRelB       ( (UBYTE) 0x01 )
#define JG_RP_SetColAbsS       ( (UBYTE) 0x02 )
#define JG_RP_SetColRelB       ( (UBYTE) 0x03 )
#define JG_RP_SetExtAbsS       ( (UBYTE) 0x04 )
#define JG_RP_SetExtRelB       ( (UBYTE) 0x05 )

#define JG_RP_SelectL          ( (UBYTE) 0x10 )
#define JG_RP_SelectS          ( (UBYTE) 0x11 )
#define JG_RP_SelectB          ( (UBYTE) 0x12 )
#define JG_RP_Null             ( (UBYTE) 0x13 )
#define JG_RP_End              ( (UBYTE) 0x14 )
#define JG_RP_SetRop           ( (UBYTE) 0x15 )
#define JG_RP_SetPenStyle      ( (UBYTE) 0x16 )
#define JG_RP_ShowText         ( (UBYTE) 0x17 )
#define JG_RP_ShowField        ( (UBYTE) 0x18 )
#define JG_RP_SetRopAndBrush   ( (UBYTE) 0x19 )
#define JG_RP_SetPatternPhase  ( (UBYTE) 0x1A )

#define JG_RP_LineAbsS1        ( (UBYTE) 0x20 )
#define JG_RP_LineAbsSN        ( (UBYTE) 0x21 )
#define JG_RP_LineRelB1        ( (UBYTE) 0x22 )
#define JG_RP_LineRelBN        ( (UBYTE) 0x23 )
#define JG_RP_LineSlice        ( (UBYTE) 0x24 )
#define JG_RP_StylePos         ( (UBYTE) 0x25 )


#define JG_RP_FillRow1         ( (UBYTE) 0x30 )
#define JG_RP_FillRowD         ( (UBYTE) 0x31 )

#define JG_RP_RectB            ( (UBYTE) 0x40 )
#define JG_RP_RectS            ( (UBYTE) 0x41 )

#define JG_RP_BitMapHI         ( (UBYTE) 0x50 )
#define JG_RP_BitMapHR         ( (UBYTE) 0x51 )
#define JG_RP_BitMapV          ( (UBYTE) 0x52 )

#define JG_RP_GlyphB1          ( (UBYTE) 0x60 )
#define JG_RP_GlyphS1          ( (UBYTE) 0x61 )
#define JG_RP_GlyphBD          ( (UBYTE) 0x62 )
#define JG_RP_GlyphSD          ( (UBYTE) 0x63 )
#define JG_RP_GlyphBDN         ( (UBYTE) 0x64 )

#define JG_RP_WedgeB           ( (UBYTE) 0x70 )
#define JG_RP_WedgeS           ( (UBYTE) 0x71 )

/* fbEnds */
#define JG_NO_FIRST_PEL  ( (UBYTE) (1<<0) )   /* first pel excluded      */
#define JG_NO_LAST_PEL   ( (UBYTE) (1<<1) )   /* last pel excluded       */

#include <poppack.h>		// BKD 1997-7-9: added
/* End --------------------------------------------------------------------*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\multbyte.h ===
/*
**  Copyright (c) 1991 Microsoft Corporation
*/
//===========================================================================
// FILE                         multbyte.h
//
// MODULE                       Host Resource Executor
//
// PURPOSE                      
//    This file defines macros to allow processor independent 
//    manipulation of (possibly "foreign") multibyte records.
//
//
// DESCRIBED IN                 Resource Executor design spec.
//
// MNEMONICS                    n/a
// 
// HISTORY  1/17/92 mslin       created
//
//===========================================================================
    
#define GETUSHORT(p) (*p)
#define GETULONG(p) (*p)
#define GETUSHORTINC(a)   GETUSHORT((a)); a++  /* Do NOT parenthesize! */
#define GETULONGINC(a)    GETULONG((a)); a++  /* Do NOT parenthesize! */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\roptable.c ===
/*==============================================================================
This table generates the low word of a 32-bit ROP from an 8-bit ROP.

11-Jun-93    RajeevD    Created
==============================================================================*/

const unsigned short wRopTable[256] = 
{
	0x0042, // 0 (BLACKNESS)
	0x0289, // DPSoon
	0x0C89, // DPSona
	0x00AA, // PSon
	0x0C88, // SDPona
	0x00A9, // DPon
	0x0865, // PDSxnon
	0x02C5, // PDSaon
	0x0F08, // SDPnaa
	0x0245, // PDSxon
	0x0329, // DPna
	0x0B2A, // PSDnaon
	0x0324, // SPna
	0x0B25, // PDSnaon
	0x08A5, // PDSonon
	0x0001, // Pn
	0x0C85, // PDSona
	0x00A6, // DSon (NOTSRCERASE)
	0x0868, // SDPxnon
	0x02C8, // SDPaon
	0x0869, // DPSxnon
	0x02C9, // DPSaon
	0x5CCA, // PSDPSanaxx
	0x1D54, // SSPxDSxaxn
	0x0D59, // SPxPDxa
	0x1CC8, // SDPSanaxn
	0x06C5, // PDSPaox
	0x0768, // SDPSxaxn
	0x06CA, // PSDPaox
	0x0766, // DSPDxaxn
	0x01A5, // PDSox
	0x0385, // PDSoan
	0x0F09, // DPSnaa
	0x0248, // SDPxon
	0x0326, // DSna
	0x0B24, // SPDnaon
	0x0D55, // SPxDSxa
	0x1CC5, // PDSPanaxn
	0x06C8, // SDPSaox
	0x1868, // SDPSxnox
	0x0369, // DPSxa
	0x16CA, // PSDPSaoxxn
	0x0CC9, // DPSana
	0x1D58, // SSPxPDxaxn
	0x0784, // SPDSoax
	0x060A, // PSDnox
	0x064A, // PSDPxox
	0x0E2A, // PSDnoan
	0x032A, // PSna
	0x0B28, // SDPnaon
	0x0688, // SDPSoox
	0x0008, // Sn (NOTSRCCOPY)
	0x06C4, // SPDSaox
	0x1864, // SPDSxnox
	0x01A8, // SDPox
	0x0388, // SDPoan
	0x078A, // PSDPoax
	0x0604, // SPDnox
	0x0644, // SPDSxox
	0x0E24, // SPDnoan
	0x004A, // PSx
	0x18A4, // SPDSonox
	0x1B24, // SPDSnaox
	0x00EA, // PSan
	0x0F0A, // PSDnaa
	0x0249, // DPSxon
	0x0D5D, // SDxPDxa
	0x1CC4, // SPDSanaxn
	0x0328, // SDna (SRCERASE)
	0x0B29, // DPSnaon
	0x06C6, // DSPDaox
	0x076A, // PSDPxaxn
	0x0368, // SDPxa
	0x16C5, // PDSPDaoxxn
	0x0789, // DPSDoax
	0x0605, // PDSnox
	0x0CC8, // SDPana
	0x1954, // SSPxDSxoxn
	0x0645, // PDSPxox
	0x0E25, // PDSnoan
	0x0325, // PDna
	0x0B26, // DSPnaon
	0x06C9, // DPSDaox
	0x0764, // SPDSxaxn
	0x08A9, // DPSonon
	0x0009, // Dn, // DSTINVERT
	0x01A9, // DPSox
	0x0389, // DPSoan
	0x0785, // PDSPoax
	0x0609, // DPSnox
	0x0049, // DPx (PATINVERT)
	0x18A9, // DPSDonox
	0x0649, // DPSDxox
	0x0E29, // DPSnoan
	0x1B29, // DPSDnaox
	0x00E9, // DPan
	0x0365, // PDSxa
	0x16C6, // DSPDSaoxxn
	0x0786, // DSPDoax
	0x0608, // SDPnox
	0x0788, // SDPSoax
	0x0606, // DSPnox
	0x0046, // DSx (SRCINVERT)
	0x18A8, // SDPSonox
	0x58A6, // DSPDSonoxxn
	0x0145, // PDSxxn
	0x01E9, // DPSax
	0x178A, // PSDPSoaxxn
	0x01E8, // SDPax
	0x1785, // PDSPDoaxxn
	0x1E28, // SDPSnoax
	0x0C65, // PDSxnan
	0x0CC5, // PDSana
	0x1D5C, // SSDxPDxaxn
	0x0648, // SDPSxox
	0x0E28, // SDPnoan
	0x0646, // DSPDxox
	0x0E26, // DSPnoan
	0x1B28, // SDPSnaox
	0x00E6, // DSan
	0x01E5, // PDSax
	0x1786, // DSPDSoaxxn
	0x1E29, // DPSDnoax
	0x0C68, // SDPxnan
	0x1E24, // SPDSnoax
	0x0C69, // DPSxnan
	0x0955, // SPxDSxo
	0x03C9, // DPSaan
	0x03E9, // DPSaa
	0x0975, // SPxDSxon
	0x0C49, // DPSxna
	0x1E04, // SPDSnoaxn
	0x0C48, // SDPxna
	0x1E05, // PDSPnoaxn
	0x17A6, // DSPDSoaxx
	0x01C5, // PDSaxn
	0x00C6, // DSa (SRCAND)
	0x1B08, // SDPSnaoxn
	0x0E06, // DSPnoa
	0x0666, // DSPDxoxn
	0x0E08, // SDPnoa
	0x0668, // SDPSxoxn
	0x1D7C, // SSDxPDxax
	0x0CE5, // PDSanan
	0x0C45, // PDSxna
	0x1E08, // SDPSnoaxn
	0x17A9, // DPSDPoaxx
	0x01C4, // SPDaxn
	0x17AA, // PSDPSoaxx
	0x01C9, // DPSaxn
	0x0169, // DPSxx
	0x588A, // PSDPSonoxx
	0x1888, // SDPSonoxn
	0x0066, // DSxn
	0x0709, // DPSnax
	0x07A8, // SDPSoaxn
	0x0704, // SPDnax
	0x07A6, // DSPDoaxn
	0x16E6, // DSPDSaoxx
	0x0345, // PDSxan
	0x00C9, // DPa
	0x1B05, // PDSPnaoxn
	0x0E09, // DPSnoa
	0x0669, // DPSDxoxn
	0x1885, // PDSPonoxn
	0x0065, // PDxn
	0x0706, // DSPnax
	0x07A5, // PDSPoaxn
	0x03A9, // DPSoa
	0x0189, // DPSoxn
	0x0029, // D
	0x0889, // DPSono
	0x0744, // SPDSxax
	0x06E9, // DPSDaoxn
	0x0B06, // DSPnao
	0x0229, // DPno
	0x0E05, // PDSnoa
	0x0665, // PDSPxoxn
	0x1974, // SSPxDSxox
	0x0CE8, // SDPanan
	0x070A, // PSDnax
	0x07A9, // DPSDoaxn
	0x16E9, // DPSDPaoxx
	0x0348, // SDPxan
	0x074A, // PSDPxax
	0x06E6, // DSPDaoxn
	0x0B09, // DPSnao
	0x0226, // DSno (MERGEPAINT)
	0x1CE4, // SPDSanax
	0x0D7D, // SDxPDxan
	0x0269, // DPSxo
	0x08C9, // DPSano
	0x00CA, // PSa (MERGECOPY)
	0x1B04, // SPDSnaoxn
	0x1884, // SPDSonoxn
	0x006A, // PSxn
	0x0E04, // SPDnoa
	0x0664, // SPDSxoxn
	0x0708, // SDPnax
	0x07AA, // PSDPoaxn
	0x03A8, // SDPoa
	0x0184, // SPDoxn
	0x0749, // DPSDxax
	0x06E4, // SPDSaoxn
	0x0020, // S (SRCCOPY)
	0x0888, // SDPono
	0x0B08, // SDPnao
	0x0224, // SPno
	0x0E0A, // PSDnoa
	0x066A, // PSDPxoxn
	0x0705, // PDSnax
	0x07A4, // SPDSoaxn
	0x1D78, // SSPxPDxax
	0x0CE9, // DPSanan
	0x16EA, // PSDPSaoxx
	0x0349, // DPSxan
	0x0745, // PDSPxax
	0x06E8, // SDPSaoxn
	0x1CE9, // DPSDanax
	0x0D75, // SPxDSxan
	0x0B04, // SPDnao
	0x0228, // SDno
	0x0268, // SDPxo
	0x08C8, // SDPano
	0x03A5, // PDSoa
	0x0185, // PDSoxn
	0x0746, // DSPDxax
	0x06EA, // PSDPaoxn
	0x0748, // SDPSxax
	0x06E5, // PDSPaoxn
	0x1CE8, // SDPSanax
	0x0D79, // SPxPDxan
	0x1D74, // SSPxDSxax
	0x5CE6, // DSPDSanaxxn
	0x02E9, // DPSao
	0x0849, // DPSxno
	0x02E8, // SDPao
	0x0848, // SDPxno
	0x0086, // DSo (SRCPAINT)
	0x0A08, // SDPnoo
	0x0021, // P (PATCOPY)
	0x0885, // PDSono
	0x0B05, // PDSnao
	0x022A, // PSno
	0x0B0A, // PSDnao
	0x0225, // PDno
	0x0265, // PDSxo
	0x08C5, // PDSano
	0x02E5, // PDSao
	0x0845, // PDSxno
	0x0089, // DPo
	0x0A09, // DPSnoo (PATPAINT)
	0x008A, // PSo
	0x0A0A, // PSDnoo
	0x02A9, // DPSoo
	0x0062, // 1 (WHITENESS)
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\macros.inc ===
page	,132
;-----------------------------Module-Header-----------------------------;
; Module Name:	MACROS.MAC
;
; This file contains macros definitions for all display drivers to use.
;
; Created: 06-Jan-1987
; Author:  Walt Moore [waltm]
;
; Copyright (c) 1987 Microsoft Corporation
;
; Exported Functions:	none
;
; Public Functions:	none
;
; Public Data:		none
;
; General Description:
;
;	Two text equates are given as short hand for WORD PTR
;	and BYTE PTR.
;
;	A Macro is defined for performing 16-bit output on machines
;	which cannot correctly do so.
;
;	The macro which is invoked by CMACROS for private stack
;	checking is defined.
;
; Restrictions:
;	The use of the ?CHKSTKPROC macro requires it to be defined
;	before CMACROS is included.  If CMACROS is included before
;	the include file, a ?CHKSTKPROC macro should be defined
;	with a null macro body.  This macro will then redefine the
;	earlier macro.
;
;	The out16 macro is intended as documentation for anyone
;	converting a driver to a machine which cannot do 16-bit
;	outputs correctly.  There is no guarantee that any code
;	will have been tested (only one machine is known to have
;	the problem).
;
;-----------------------------------------------------------------------;




;	The following two equates are just used as shorthand
;	for the "word ptr" and "byte ptr" overrides.

wptr	equ	word ptr
bptr	equ	byte ptr
		
		.286

;---------------------------------Macro---------------------------------;
; out16
;
; out16 is a macro used wherever any 16-bit output is performed.
; The macro is intended to serve as documentation for those machines
; which do not perform 16-bit outputs correctly (where correctly is
; defined as the way the IBM AT does it).
;
; usage
;
;     out16   d,a
;
; where
;
;     d   -   I/O address register. Included as documentation
;	      only.  Must always be DX (lower case).
;
;     a   -   Register to output.  Included as documentation
;	      only.  Must always be AX (lower case).
;
; Entry:
;	AX	= data to output
;	DX	= I/O port address
; Returns:
;	none
; Error Returns:
;	none
; Registers Destroyed:
;	FLAGS
; Registers Preserved:
;	AX,BX,CX,DX,SI,DI,BP,DS,ES
; Calls:
;       none
; History:
;	Fri 16-Jan-1987 16:49:03 -by-  Walt Moore [waltm]
;	Initial version
;-----------------------------------------------------------------------;


ifndef	IO8				;;If normal 16 bit outputs
  out16   equ	  out
else					;;If 8-bit outputs
  out16 macro d,a
	ifdif <a>,<ax>
	%out out16 - invalid register, must be ax
	.err
	endif
	ifdif	<d>,<dx>
	%out	out16 - invalid register, must be dx
	.err
	endif
	ifdif <is>,<cli>		;;  If interrupts not off
	cli				;;    then turn them off
	endif				;;
	out	dx,al			;;  Output LSB portion
	inc	dx			;;  --> next address
	xchg	al,ah			;;  Get MSB of output value
	out	dx,al			;;  Output MSB portion
	ifdif <ie>,<cli>		;;  If not explicitly told to leave
	sti				;;    interrupts off, turn them on
	endif				;;
	ifdif <rd>,<dont_save_DL>	;;  If not explicitly told to trash DX,
	dec	dx			;;    restore it.
	xchg	al,ah
	endif
	endm
endif



;---------------------------------Macro---------------------------------;
; ?CHKSTKPROC
;
; Private Stack Checking Macro
;
; ?CHKSTKPROC will be invoked by the CMACROS for any procedure
; with local variables if both ?CHKSTK and ?CHKSTKPROC were
; defined prior to including the CMACROS.
;
; The macro has one parameter, which is the number of bytes
; to allocate, which is supplied by the CMACROS.
;
; The usage of this macro is defined by the CMACROS.  There is no
; user control over the macro.	Register usage will be as defined
; by the routine my_check_stack.
;
; Calls:
;	my_check_stack
; History:
;	Fri 16-Jan-1987 16:49:03 -by-  Walt Moore [waltm]
;	Initial version
;-----------------------------------------------------------------------;


ifdef	?CHKSTK 			;;Only define macro if
ifdef	?CHKSTKPROC			;;  private stack checking
ifndef	?CHKSTKNAME			;;If user name differs from default
extrn	my_check_stack:near		;;Procedure to do the checking
endif
?CHKSTKPROC macro s			;;Actual macro text
	mov	ax,s			;;my_check_stack takes requested space
ifdef	?CHKSTKNAME
	?CHKSTKNAME
else
	call	my_check_stack		;;  in AX
endif
endm
endif
endif



;-----------------------------------------------------------------------;
; odd	--- macro for odd alignment, counterpart for masm's "even".
;
; Arguments:
;	none
; Returns:
;	nothing
; Alters:
;	nothing
; Calls:
;	nothing
; History:
;
;  Sun Mar 01, 1987 07:48:01p	-by-	Wesley O. Rupel   [wesleyr]
; Wrote it!
;-----------------------------------------------------------------------;


odd	macro
	ife (offset $) AND 1
	nop
	endif
	endm



;-----------------------------------------------------------------------;
; pushem
; popem
;
; Allows giving a list of registers to push/pop on a single line.
; Also allows easy verificaton that pushes and pops are balanced
; because arguements are given in the same order:
;
;	pushem	ax,bx,cx   goes with
;	popem	ax,bx,cx
;
; Arguments:
;	registers to push/pop
; Returns:
;	nothing
; Alters:
;	nothing
; Calls:
;	nothing
; History:
;
;  Mon Mar 09, 1987 06:12:32p	-by-	Wesley O. Rupel   [wesleyr]
; Wrote it!
;-----------------------------------------------------------------------;


pushem	macro	r1,r2,r3,r4,r5,r6,r7,r8,r9,rA,rB,rC,rD,rE,rF,r10,r11,r12
	irp	x,<r1,r2,r3,r4,r5,r6,r7,r8,r9,rA,rB,rC,rD,rE,rF,r10,r11,r12>
	ifnb	<x>
	push	x
	endif
	endm
	endm

popem	macro	r1,r2,r3,r4,r5,r6,r7,r8,r9,rA,rB,rC,rD,rE,rF,r10,r11,r12
	irp	x,<r12,r11,r10,rF,rE,rD,rC,rB,rA,r9,r8,r7,r6,r5,r4,r3,r2,r1>
	ifnb	<x>
	pop	x
	endif
	endm
	endm



;-----------------------------------------------------------------------;
; smov
;
; smove moves the contents of one segment register into another
; segment register.
;
; usage
;
;	smov	x,y
;
; where
;
;	x is the destination register
;	y is the source register
;
; Arguments:
;	y is source segment register
; Returns:
;	x segment register = y segment register
; Alters:
;	x segment register
; Calls:
;	nothing
; History:
;
;  Mon Mar 09, 1987 06:12:32p	-by-	Wesley O. Rupel   [wesleyr]
; Wrote it!
;-----------------------------------------------------------------------;


smov	macro	x,y
	push	y
	pop	x
	endm



;--------------------------------------------------------------------------;
; abs_ax
;	takes absolute value of AX
; Entry:
;	AX	= integer
; Returns:
;	AX	= abs(AX)
; Error Returns:
;	none
; Registers Destroyed:
;	DX,FLAGS
; Registers Preserved:
;	BX,CX,SI,DI,DS,ES,BP
; Calls:
;	none
; History:
;  Thu Mar 05, 1987 06:15:46p	-by-  Tony Pisculli	[tonyp]
; wrote it
;--------------------------------------------------------------------------;


abs_ax	macro
	cwd
	xor	ax,dx
	sub	ax,dx
	endm



;--------------------------------------------------------------------------;
; min_ax
;	returns min of AX and REG
; Entry:
;	AX	= integer
;	REG	= general purpose register containing an integer
; Returns:
;	AX	= min(AX,REG)
; Error Returns:
;	none
; Registers Destroyed:
;	DX,FLAGS
; Registers Preserved:
;	BX,CX,SI,DI,DS,ES,BP
; Calls:
;	none
; History:
;  Sat Mar 07, 1987 08:39:04p	-by-  Tony Pisculli	[tonyp]
; wrote it
;--------------------------------------------------------------------------;


min_ax	macro	REG
	sub	ax,REG
	cwd
	and	ax,dx
	add	ax,REG
	endm



;--------------------------------------------------------------------------;
; max_ax
;	returns max of AX and REG
; Entry:
;	AX	= integer
;	REG	= general purpose register containing an integer
; Returns:
;	AX	= max(AX, REG)
; Error Returns:
;	none
; Registers Destroyed:
;	DX,FLAGS
; Registers Preserved:
;	BX,CX,SI,DI,DS,ES,BP
; Calls:
;	none
; History:
;  Sat Mar 07, 1987 08:41:38p	-by-  Tony Pisculli	[tonyp]
; wrote it
;--------------------------------------------------------------------------;


max_ax	macro	REG
	sub	ax,REG
	cwd
	not	dx
	and	ax,dx
	add	ax,REG
	endm



;	The following equates are used for defining the target
;	processor to the shift macros.


GENERIC	equ	0

CPU	equ	GENERIC
;CPU	equ	88
;CPU	equ	86
;CPU	equ	186
;CPU	equ	286
;CPU	equ	386



;--------------------------------------------------------------------------;
; shiftl
;
; shiftl is used to implement the advanced shift left immediate
; (SHL dest,count) functionality of the 286 and 386.
;
; Entry:
;	DEST	= var to shift
;	COUNT	= number to shift by
; Returns:
;	DEST	= DEST shl COUNT
; Error Returns:
;	none
; Registers Destroyed:
;	none
; Registers Preserved:
;	all
; Calls:
;	none
; History:
;  Sat Mar 07, 1987 08:44:30p	-by-  Tony Pisculli	[tonyp]
; wrote it
;--------------------------------------------------------------------------;


shiftl	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	shl	DEST,COUNT
else
	REPT	COUNT
	shl	DEST,1
	ENDM
endif
	endm



;--------------------------------------------------------------------------;
; shiftr
;
; shiftr is used to implement the advanced shift right immediate
; (SHR dest,count) functionality of the 286 and 386.
;
; Entry:
;	DEST	= var to shift
;	COUNT	= number to shift by
; Returns:
;	DEST	= DEST shr COUNT
; Error Returns:
;	none
; Registers Destroyed:
;	none
; Registers Preserved:
;	all
; Calls:
;	none
; History:
;  Sat Mar 07, 1987 08:44:52p	-by-  Tony Pisculli	[tonyp]
; wrote it
;--------------------------------------------------------------------------;


shiftr	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	shr	DEST,COUNT
else
	REPT	COUNT
	shr	DEST,1
	ENDM
endif
	endm


;--------------------------------------------------------------------------;
; rotcr, rotcl
; rotr, rotl
;
; Use just like you would rcr (or rcl, rol, ror) immediate in 286 specific
; code.  If the processor does not support the immediate count (>1 on 808[68])
; then the macro generates multiple rcr (...) by one statements.
;
; Entry:
;	DEST	= var to rotate
;	COUNT	= number to rotate by
; Returns:
;	DEST	= DEST shr COUNT
; Error Returns:
;	none
; Registers Destroyed:
;	none
; Registers Preserved:
;	all
; Calls:
;	none
; History:
; 
;  Fri Apr 17, 1987 08:39:39p	-by-	Wesley O. Rupel	  [wesleyr]
; added rotl and rotr
;
;  Sun Apr 12, 1987 07:34:37p	-by-	Wesley O. Rupel	  [wesleyr]
; wrote it
;--------------------------------------------------------------------------;


rotcr	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	rcr	DEST,COUNT
else
	REPT	COUNT
	rcr	DEST,1
	ENDM
endif
	endm

rotcl	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	rcl	DEST,COUNT
else
	REPT	COUNT
	rcl	DEST,1
	ENDM
endif
	endm



rotl	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	rol	DEST,COUNT
else
	REPT	COUNT
	rol	DEST,1
	ENDM
endif
	endm


rotr	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	ror	DEST,COUNT
else
	REPT	COUNT
	ror	DEST,1
	ENDM
endif
	endm


;--------------------------------------------------------------------------;
; ashiftr
;
; ashiftr is used to implement the advanced shift arithmetic right immediate
; (SAR dest,count) functionality of the 286 and 386.
;
; Entry:
;	DEST	= var to shift
;	COUNT	= number to shift by
; Returns:
;	DEST	= DEST sar COUNT
; Error Returns:
;	none
; Registers Destroyed:
;	none
; Registers Preserved:
;	all
; Calls:
;	none
; History:
;  Sat Mar 07, 1987 08:45:06p	-by-  Tony Pisculli	[tonyp]
; wrote it
;--------------------------------------------------------------------------;


ashiftr	macro	DEST,COUNT
if (CPU eq 286) or (CPU eq 386)
	sar	DEST,COUNT
else
	REPT	COUNT
	sar	DEST,1
	ENDM
endif
	endm



;---------------------------------Macro---------------------------------;
; jmpnext
; jmpnext stop
;
; jmpnext is used in the generation of fall through chains.  It
; generates the opcode used to swallow the next two bytes of object
; code (cmp ax,immediate word), and performs error checking to
; ensure that only two bytes of object code exist between any
; use of jmpnext.
;
; The chain is terminated by use of an optional parameter to jmpnext.
; If this optional field is non-blank, the chain is terminated.
;
; usage
;
;	dog:
;	      mov    al,34
;	     jmpnext
;
;	foo:
;	     mov     al,0
;	     jmpnext
;
;	bar:
;	     mov     al,1
;	     jmpnext stop			;End of the chain
;
; Entry:
;	none
; Returns:
;	none
; Error Returns:
;	none
; Registers Destroyed:
;	FLAGS
; Registers Preserved:
;	AX,BX,CX,DX,SI,DI,BP,DS,ES
; Calls:
;       none
; History:
;	Fri 13-Mar-1987 12:03:16 -by-  Walt Moore [waltm]
;	Initial version
;-----------------------------------------------------------------------;


??ji	=	0			;;Initial index value

jmpnext macro e
jn %??ji,%(??ji+1),e			;;Set next label
endm

jn macro i,j,e
.sall
??ji&i:
.xall
ifb <e> 				;;If not the end of the chain
	db	03Dh			;;cmp ax, next two bytes
errn$	??ji&j,+2			;;next lable must be two bytes away
endif
??ji=j					;;increment counter
endm



;---------------------------------Macro---------------------------------;
; missing_code
;
; missing_code is a macro which will display a message on the screen
; at assembly time.  It is used to flag code sequences which have not
; been completed.
;
; usage
;
;	missing_code	<text>
;
; Entry:
;	none
; Returns:
;	none
; Error Returns:
;	none
; Registers Destroyed:
;	none
; Registers Preserved:
;	ALL
; Calls:
;       none
; History:
;	Sun 22-Mar-1987 18:21:34 -by-  Walt Moore [waltm]
;	Initial version
;-----------------------------------------------------------------------;

missing_code	macro	x
	if1
	??_out	<&! Missing Code &!  x>
	endif
	endm

;---------------------------Macro---------------------------------------;
; LMHtoP
;
; Converts a Local Memory Handle to a local pointer.
;
; Entry:
; 	reg1[,reg2]
; Returns:
; 	reg1 = pointer
; Error Returns:
; 	
; Registers Destroyed:
; 	none
; History:
;  Mon Mar 23, 1987 06:54:26a  -by-  Charles Whitmer [chuckwh]
; Imported from GDI.
;-----------------------------------------------------------------------;

LMHtoP macro r1,r2		;; Local Movable Handle to pointer
ifnb <r2>
	mov	r1,[r2]
else
	mov	r1,[r1]
endif
endm


;-------------------------Macro-----------------------------------------;
; REPSTOSB Dst
;
; store <cx> copies of al at Dst, aliging destination on WORD writes
;
;   Dst 	destination, must be of the form SEL:[di] (default is es:[di])
;
; Entry:
;   Dst 	-> points to dest buffer
;   al		byte to write
;   cx		count bytes
;
; NOTE a dest segment other than ES is handled by generating a loop
; all other cases generate a rep mov
;
; NOTE this code assumes the direction flag is set to FORWARD
;
; NOTE cx must be non-zero
;
; Returns:
;
; History:
;	Sun 31-Jul-1989  -by-  ToddLa
;	Wrote it.
;
;-----------------------------------------------------------------------;

?REPSTOSB macro Dst
	local	l1
	local	l2
	local	l3
	local	localdest

IFIDNI <Dst>, <NOAHLOAD>
	localdest EQU es:[di]
ELSE
	localdest EQU Dst
	mov	ah,al		    ; make sure ah == al
ENDIF

	test	di,1
	jz	l1
	stos	byte ptr localdest
	dec	cx
l1:
	shr	cx,1
	rep	stos word ptr localdest
	adc	cl,cl
	rep	stos byte ptr localdest

	endm

REPSTOSB macro Dst
ifb <Dst>
	?REPSTOSB es:[di]
else
	?REPSTOSB Dst
endif
	endm

;-------------------------Macro-----------------------------------------;
; REPMOVSB Dst, Src, alignR
;
; copy <cx> bytes from Src to Dst, aliging destination or source
; on WORD writes
;
;   Dst 	destination, must be of the form SEL:[di] (default is es:[di])
;   Src 	source,      must be of the form SEL:[si] (default is ds:[si])
;   alignR	register to align   si or di (default is di)
;
; Entry:
;   Src 	-> points to source buffer
;   Dst 	-> points to dest buffer
;   cx		count bytes
;
; NOTE this code assumes the direction flag is set to FORWARD
;
; NOTE cx must be non-zero
;
; Returns:
;
; History:
;	Sun 31-Jul-1989  -by-  ToddLa
;	Wrote it.
;-----------------------------------------------------------------------;

?REPMOVSB  macro Dst, Src, alignR
	local	l1
	local	l2
	local	l3

	test	alignR,1
	jz	l1
	movs	byte ptr Dst, byte ptr Src
	dec	cx
l1:	shr	cx,1
	rep	movs	word ptr Dst, word ptr Src
	adc	cl,cl
	rep	movs	byte ptr Dst, byte ptr Src

	endm

REPMOVSB  macro Dst, Src, alignR

ifb <Dst>
	?REPMOVSB es:[di],ds:[si],di
	exitm
endif

ifb <Src>
	?REPMOVSB Dst,ds:[si],di
	exitm
endif

ifb <alignR>
	?REPMOVSB Dst,Src,di
	exitm
endif
	?REPMOVSB Dst,Src,alignR

	endm
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\roptable.inc ===
;----------------------------Module-Header------------------------------;
; Module Name: ROPTABLE.BLT
;
; Raster operation code templates for BitBLT.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; This file defines the code templates for all raster operations which
; BitBLT supports.
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;

if	MASMFLAGS and PUBDEFS
	public	Sn
	public	DDx
	public	DPna
	public	Pn
	public	PDSanon
	public	PSnon
	public	DPSona
	public	PSon
	public	PDSnaon
	public	PDSaon
	public	DPon
	public	PDSonon
	public	DPSnoon
	public	DPSoon
	public	DSon
	public	PDSona
	public	SDPxnon
	public	SSPxDSxaxn
	public	SPxDSxa
	public	PSDPSanaxx
	public	SDPSanaxn
	public	DSna
	public	PDSPanaxn
	public	DPSana
	public	PDSnaxn
	public	DPSaon
	public	PDSPaox
	public	PDSox
	public	SDPSxaxn
	public	DPSxa
	public	DSPDxaxn
	public	DPSnaa
	public	PSna
	public	DPSaan
	public	PSDnaon
	public	SPDnaon
	public	PDSPxaxn
	public	SDPSaox
	public	PSDPSaoxxn
	public	SSPxPDxaxn
	public	SPxPDxa
	public	DSPDSoaxxn
	public	SPDSoax
	public	PDSoan
	public	PSDPxox
	public	SDPxon
	public	PSDnoan
	public	PSan
	public	SDPnaon
	public	SDPaon
	public	PSDPaox
	public	SDPSoox
	public	SPDSaox
	public	DPSDxaxn
	public	SDPox
	public	PSDPoax
	public	SDPoan
	public	PSx
	public	SPDnox
	public	SPDSxox
	public	PDSxon
	public	SPDnoan
	public	SPDSonox
	public	DPSxnan
	public	SPDSnaox
	public	SPDSanaxn
	public	PDSana
	public	DSan
	public	PSDPxaxn
	public	SDPxa
	public	DSPDaox
	public	PDSPDaoxxn
	public	DPSDoax
	public	DPSanon
	public	PDSnox
	public	DSnon
	public	SDPana
	public	SSPxDSxoxn
	public	SPxDSxo
	public	PDSPxox
	public	DPSxon
	public	PDna
	public	Dn
	public	DPSDaox
	public	SPDSxaxn
	public	PDSxa
	public	DPx
	public	PDSxnon
	public	DPSnoan
	public	PDSPoax
	public	DPSoan
	public	PDSax
	public	DPSnox
	public	DPSox
	public	PDSxnan
	public	DPSDonox
	public	DPSDxox
	public	DSPnaon
	public	PDSPnaox
	public	DPan
	public	DSPDSaoxxn
	public	SDPnox
	public	DPSnaxn
	public	DPSax
	public	DSx
	public	PDSxxn
	public	SDPSonox
	public	PSDPSonoxxn
	public	DPSonon
	public	SDPSoax
	public	PSDPSoaxxn
	public	SDPax
	public	DSPDoax
	public	PDSPDoaxxn
	public	SDPSnoax
	public	SSDxPDxaxn
	public	SDxPDxa
	public	SDPSxox
	public	SDPnoan
	public	DSPDxox
	public	SDPSnaox
	public	DPSnaon
	public	DSPnoan
	public	PDSPnoax
	public	DPSxnon
	public	PDSnoan
	public	SPDSnoax
	public	SDPxnan
endif

ROPDEF macro lbl,ne,whocares
if1
if MASMFLAGS and DEBUG
public lbl
endif
ROP&ne=(offset lbl)-(offset roptable)	;;Start with offset
irpc x,lbl
ROP&ne = ROP&ne AND (NOT NEGATE_NEEDED)
ifidn <n>,<&&x>
ROP&ne = ROP&ne OR NEGATE_NEEDED 	;;Show negate needed
endif
ifidn <P>,<&&x>
ROP&ne = ROP&ne OR PATTERN_PRESENT	;;Show pattern present
endif
ifidn <S>,<&&x>
ROP&ne = ROP&ne OR SOURCE_PRESENT	;;Show source needed
endif
endm
ROPDEF1 ROP&ne,%((offset $)-(offset lbl))
endif
endm


ROPDEF1 macro lbl,len
if len					;;Skip 0
lbl = lbl OR (ROPLen&len SHL 10)	;;Set size index
endif
endm



	public	roptable
roptable	label	word

	errn$	roptable			;Must be at offset 0
Sn:
	ROPDEF	Sn,0033,0008


	errn$	roptable			;Must be at offset 0

	dw	ROP0000,ROP0001,ROP0002,ROP0003
	dw	ROP0004,ROP0005,ROP0006,ROP0007
	dw	ROP0008,ROP0009,ROP000A,ROP000B
	dw	ROP000C,ROP000D,ROP000E,ROP000F
	dw	ROP0010,ROP0011,ROP0012,ROP0013
	dw	ROP0014,ROP0015,ROP0016,ROP0017
	dw	ROP0018,ROP0019,ROP001A,ROP001B
	dw	ROP001C,ROP001D,ROP001E,ROP001F
	dw	ROP0020,ROP0021,ROP0022,ROP0023
	dw	ROP0024,ROP0025,ROP0026,ROP0027
	dw	ROP0028,ROP0029,ROP002A,ROP002B
	dw	ROP002C,ROP002D,ROP002E,ROP002F
	dw	ROP0030,ROP0031,ROP0032,ROP0033
	dw	ROP0034,ROP0035,ROP0036,ROP0037
	dw	ROP0038,ROP0039,ROP003A,ROP003B
	dw	ROP003C,ROP003D,ROP003E,ROP003F
	dw	ROP0040,ROP0041,ROP0042,ROP0043
	dw	ROP0044,ROP0045,ROP0046,ROP0047
	dw	ROP0048,ROP0049,ROP004A,ROP004B
	dw	ROP004C,ROP004D,ROP004E,ROP004F
	dw	ROP0050,ROP0051,ROP0052,ROP0053
	dw	ROP0054,ROP0055,ROP0056,ROP0057
	dw	ROP0058,ROP0059,ROP005A,ROP005B
	dw	ROP005C,ROP005D,ROP005E,ROP005F
	dw	ROP0060,ROP0061,ROP0062,ROP0063
	dw	ROP0064,ROP0065,ROP0066,ROP0067
	dw	ROP0068,ROP0069,ROP006A,ROP006B
	dw	ROP006C,ROP006D,ROP006E,ROP006F
	dw	ROP0070,ROP0071,ROP0072,ROP0073
	dw	ROP0074,ROP0075,ROP0076,ROP0077
	dw	ROP0078,ROP0079,ROP007A,ROP007B
	dw	ROP007C,ROP007D,ROP007E,ROP007F



	errn$	roptable,-256			;Must be 256 bytes afterwards
	db	2,3,4,5,7,9,11,13





;	The actual raster operation templates follow.
;
;	Entry:	AL     =  Source byte
;		DH     =  Pattern Bytes
;		ES:DI --> Destination byte
;
;	Exit:	AL     =  Result
;		DH     =  Pattern Bytes
;		ES:DI --> Destination byte
;		AH	  IS possibly the destination byte
;
;	Uses:	AL,AH,DH,DL


;-----------------------------------------------------------------
; In Wes' World:
;	The actual raster operation templates follow.
;
;	Entry:	AX     =  Source word
;		DX     =  Pattern Word
;		ES:DI --> Destination word
;
;	Exit:	AX     =  Result
;		DX     =  Pattern Word
;		ES:DI --> Destination word
;		BP,BX??	  IS possibly the destination word
;
;	Uses:	AL,AH,DH,DL
;-----------------------------------------------------------------


DDx:
	xor	al,al
	ROPDEF	DDx,0000,0042


DPna:
Pn:
	mov	al,dh
	ROPDEF	Pn,000F,0001
	not	al
PDSanon:
	and	al,es:[di]
	ROPDEF	DPna,000A,0329
PSnon:
	not	al
DPSona:
PSon:
	or	al,dh
	ROPDEF	PDSanon,0008,0F08
	ROPDEF	PSon,0003,00AA
	ROPDEF	PSnon,000C,0324
PDSnaon:
	not	al
PDSaon:
	and	al,es:[di]
	ROPDEF	DPSona,0002,0C89
	or	al,dh
	ROPDEF	PDSnaon,000D,0B25
	ROPDEF	PDSaon,0007,02C5


DPon:
	mov	al,dh
PDSonon:
	or	al,es:[di]
	ROPDEF	DPon,0005,00A9
DPSnoon:
	not	al
DPSoon:
	or	al,dh
	ROPDEF	PDSonon,000E,08A5
DSon:
PDSona:
	or	al,es:[di]
	ROPDEF	DPSnoon,0004,0C88
	ROPDEF	DPSoon,0001,0289
	ROPDEF	DSon,0011,00A6
	not	al
	and	al,dh
	ROPDEF	PDSona,0010,0C85


SDPxnon:
	mov	ah,es:[di]
	xor	ah,dh
	not	ah
	or	al,ah
	ROPDEF	SDPxnon,0012,0868


SSPxDSxaxn:
	mov	dl,al
SPxDSxa:
	mov	ah,dh
	xor	ah,al
	xor	al,es:[di]
	and	al,ah
	ROPDEF	SPxDSxa,0024,0D55
	xor	al,dl
	ROPDEF	SSPxDSxaxn,0017,1D54


PSDPSanaxx:
SDPSanaxn:
	mov	dl,al
	and	al,dh
DSna:
	not	al
	and	al,es:[di]
	ROPDEF	DSna,0022,0326
	xor	al,dl
	ROPDEF	SDPSanaxn,0019,1CC8
	xor	al,dh
	ROPDEF	PSDPSanaxx,0016,5CCA


PDSPanaxn:
DPSana:
	and	al,dh
PDSnaxn:
	not	al
	and	al,es:[di]
	ROPDEF	DPSana,002A,0CC9
	xor	al,dh
	ROPDEF	PDSnaxn,002D,060A
	ROPDEF	PDSPanaxn,0025,1CC5




DPSaon:
PDSPaox:
	and	al,dh
PDSox:
	or	al,es:[di]
	ROPDEF	DPSaon,0015,02C9
	xor	al,dh
	ROPDEF	PDSox,001E,01A5
	ROPDEF	PDSPaox,001A,06C5


SDPSxaxn:
	mov	dl,al
DPSxa:
	xor	al,dh
	and	al,es:[di]
	ROPDEF	DPSxa,0028,0369
	xor	al,dl
	ROPDEF	SDPSxaxn,001B,0768


DSPDxaxn:
	mov	ah,es:[di]
	mov	dl,ah
	xor	dl,dh
	and	al,dl
	xor	al,ah
	ROPDEF	DSPDxaxn,001D,0766


DPSnaa:
PSna:
	not	al
DPSaan:
	and	al,dh
	ROPDEF	PSna,0030,032A
	and	al,es:[di]
	ROPDEF	DPSnaa,0020,0F09
	ROPDEF	DPSaan,007F,03C9


PSDnaon:
	mov	ah,es:[di]
	not	ah
	and	al,ah
	or	al,dh
	ROPDEF	PSDnaon,000B,0B2A


SPDnaon:
	mov	ah,es:[di]
	not	ah
	and	ah,dh
	or	al,ah
	ROPDEF	SPDnaon,0023,0B24


PDSPxaxn:
	xor	al,dh
	and	al,es:[di]
	xor	al,dh
	ROPDEF	PDSPxaxn,0027,1868


SDPSaox:
PSDPSaoxxn:
	mov	dl,al
	and	al,dh
	or	al,es:[di]
	xor	al,dl
	ROPDEF	SDPSaox,0026,06C8
	xor	al,dh
	ROPDEF	PSDPSaoxxn,0029,16CA


SSPxPDxaxn:
	mov	dl,al
SPxPDxa:
	mov	ah,es:[di]
	xor	ah,dh
	xor	al,dh
	and	al,ah
	ROPDEF	SPxPDxa,0018,0D59
	xor	al,dl
	ROPDEF	SSPxPDxaxn,002B,1D58


DSPDSoaxxn:
SPDSoax:
	mov	dl,al
PDSoan:
	mov	ah,es:[di]
	or	al,ah
	and	al,dh
	ROPDEF	PDSoan,001F,0385
	xor	al,dl
	ROPDEF	SPDSoax,002C,0784
	xor	al,ah
	ROPDEF	DSPDSoaxxn,0079,1786




PSDPxox:
SDPxon:
	mov	ah,es:[di]
	xor	ah,dh
	or	al,ah
	ROPDEF	SDPxon,0021,0248
	xor	al,dh
	ROPDEF	PSDPxox,002E,064A


PSDnoan:
	mov	ah,es:[di]
	not	ah
	or	al,ah
PSan:
	and	al,dh
	ROPDEF	PSan,003F,00EA
	ROPDEF	PSDnoan,002F,0E2A


SDPnaon:
	mov	ah,dh
	not	ah
	and	ah,es:[di]
	or	al,ah
	ROPDEF	SDPnaon,0031,0B28


SDPaon:
PSDPaox:
	mov	ah,es:[di]
	and	ah,dh
	or	al,ah
	ROPDEF	SDPaon,0013,02C8
	xor	al,dh
	ROPDEF	PSDPaox,001C,06CA



SDPSoox:
	mov	dl,al
	or	al,dh
	or	al,es:[di]
	xor	al,dl
	ROPDEF	SDPSoox,0032,0688


SPDSaox:
	mov	dl,al
	and	al,es:[di]
	or	al,dh
	xor	al,dl
	ROPDEF	SPDSaox,0034,06C4


DPSDxaxn:
	mov	ah,es:[di]
	xor	al,ah
	and	al,dh
	xor	al,ah
	ROPDEF	DPSDxaxn,0035,1864


SDPox:
	mov	ah,es:[di]
	or	ah,dh
	xor	al,ah
	ROPDEF	SDPox,0036,01A8


PSDPoax:
SDPoan:
	mov	ah,es:[di]
	or	ah,dh
	and	al,ah
	ROPDEF	SDPoan,0037,0388
PSx:
	xor	al,dh
	ROPDEF	PSx,003C,004A
	ROPDEF	PSDPoax,0038,078A


SPDnox:
	mov	ah,es:[di]
	not	ah
	or	ah,dh
	xor	al,ah
	ROPDEF	SPDnox,0039,0604


SPDSxox:
	mov	dl,al
PDSxon:
	xor	al,es:[di]
	or	al,dh
	ROPDEF	PDSxon,0009,0245
	xor	al,dl
	ROPDEF	SPDSxox,003A,0644


SPDnoan:
	mov	ah,es:[di]
	not	ah
	or	ah,dh
	and	al,ah
	ROPDEF	SPDnoan,003B,0E24


SPDSonox:
	mov	dl,al
	or	al,es:[di]
	not	al
	or	al,dh
	xor	al,dl
	ROPDEF	SPDSonox,003D,18A4


DPSxnan:
	xor	al,dh
SPDSnaox:
	mov	dl,al			;(wasted for DPSxnan)
	not	al
	and	al,es:[di]
	ROPDEF	DPSxnan,007D,0C69
	or	al,dh
	xor	al,dl
	ROPDEF	SPDSnaox,003E,1B24


SPDSanaxn:
	mov	dl,al
PDSana:
DSan:
	and	al,es:[di]
	ROPDEF	DSan,0077,00E6
	not	al
	and	al,dh
	ROPDEF	PDSana,0070,0CC5
	xor	al,dl
	ROPDEF	SPDSanaxn,0043,1CC4


PSDPxaxn:
SDPxa:
	mov	ah,es:[di]
	xor	ah,dh
	and	al,ah
	ROPDEF	SDPxa,0048,0368
	xor	al,dh
	ROPDEF	PSDPxaxn,0047,076A


DSPDaox:
PDSPDaoxxn:
	mov	ah,es:[di]
	mov	dl,ah
	and	dl,dh
	or	al,dl
	xor	al,ah
	ROPDEF	DSPDaox,0046,06C6
	xor	al,dh
	ROPDEF	PDSPDaoxxn,0049,16C5

DPSDoax:
	mov	ah,es:[di]
	or	al,ah
	and	al,dh
	xor	al,ah
	ROPDEF	DPSDoax,004A,0789


DPSanon:
	and	al,dh
PDSnox:
DSnon:
	not	al
	or	al,es:[di]
	ROPDEF	DPSanon,0040,0F0A
	ROPDEF	DSnon,0044,0328
	xor	al,dh
	ROPDEF	PDSnox,004B,0605


SDPana:
	mov	ah,es:[di]
	and	ah,dh
	not	ah
	and	al,ah
	ROPDEF	SDPana,004C,0CC8


SSPxDSxoxn:
	mov	dl,al
SPxDSxo:
	mov	ah,al
	xor	ah,dh
	xor	al,es:[di]
	or	al,ah
	ROPDEF	SPxDSxo,007E,0955
	xor	al,dl
	ROPDEF	SSPxDSxoxn,004D,1954


PDSPxox:
DPSxon:
	xor	al,dh
	or	al,es:[di]
	ROPDEF	DPSxon,0041,0249
	xor	al,dh
	ROPDEF	PDSPxox,004E,0645


PDna:
Dn:
	mov	al,es:[di]
	ROPDEF	Dn,0055,0009
	not	al
	and	al,dh
	ROPDEF	PDna,0050,0325


DPSDaox:
	mov	ah,es:[di]
	and	al,ah
	or	al,dh
	xor	al,ah
	ROPDEF	DPSDaox,0052,06C9


SPDSxaxn:
	mov	dl,al
PDSxa:
	xor	al,es:[di]
	and	al,dh
	ROPDEF	PDSxa,0060,0365
	xor	al,dl
	ROPDEF	SPDSxaxn,0053,0764


DPx:
	mov	al,dh
PDSxnon:
	xor	al,es:[di]
	ROPDEF	DPx,005A,0049
DPSnoan:
	not	al
PDSPoax:
DPSoan:
	or	al,dh
	ROPDEF	PDSxnon,0006,0865
PDSax:
	and	al,es:[di]
	ROPDEF	DPSnoan,005D,0E29
	ROPDEF	DPSoan,0057,0389
	xor	al,dh
	ROPDEF	PDSPoax,0058,0785
	ROPDEF	PDSax,0078,01E5


DPSnox:
	not	al
DPSox:
	or	al,dh
PDSxnan:
	xor	al,es:[di]
	ROPDEF	DPSox,0056,01A9
	ROPDEF	DPSnox,0059,0609
	not	al
	and	al,dh
	ROPDEF	PDSxnan,006F,0C65


DPSDonox:
	mov	ah,es:[di]
	or	al,ah
	not	al
	or	al,dh
	xor	al,ah
	ROPDEF	DPSDonox,005B,18A9


DPSDxox:
	mov	ah,es:[di]
	xor	al,ah
	or	al,dh
	xor	al,ah
	ROPDEF	DPSDxox,005C,0649


DSPnaon:
PDSPnaox:
	mov	ah,dh
	not	ah
	and	al,ah
	or	al,es:[di]
	ROPDEF	DSPnaon,0051,0B26
	xor	al,dh
	ROPDEF	PDSPnaox,005E,1B29


DPan:
	mov	al,dh
	and	al,es:[di]
	ROPDEF	DPan,005F,00E9


DSPDSaoxxn:
	mov	dl,al
	mov	ah,es:[di]
	and	al,ah
	or	al,dh
	xor	al,dl
	xor	al,ah
	ROPDEF	DSPDSaoxxn,0061,16C6


SDPnox:
	mov	ah,dh
	not	ah
	or	ah,es:[di]
	xor	al,ah
	ROPDEF	SDPnox,0063,0608


DPSnaxn:
	not	al
DPSax:
	and	al,dh
DSx:
PDSxxn:
	xor	al,es:[di]
	ROPDEF	DSx,0066,0046
	ROPDEF	DPSax,006A,01E9
	ROPDEF	DPSnaxn,0065,0606
	xor	al,dh
	ROPDEF	PDSxxn,0069,0145


SDPSonox:
PSDPSonoxxn:
	mov	dl,al
DPSonon:
	or	al,dh
	not	al
	or	al,es:[di]
	ROPDEF	DPSonon,0054,08A9
	xor	al,dl
	ROPDEF	SDPSonox,0067,18A8
	xor	al,dh
	ROPDEF	PSDPSonoxxn,0068,58A6


SDPSoax:
PSDPSoaxxn:
	mov	dl,al
	or	al,dh
	and	al,es:[di]
	xor	al,dl
	ROPDEF	SDPSoax,0064,0788
	xor	al,dh
	ROPDEF	PSDPSoaxxn,006B,178A


SDPax:
	mov	ah,es:[di]
	and	ah,dh
	xor	al,ah
	ROPDEF	SDPax,006C,01E8


DSPDoax:
PDSPDoaxxn:
	mov	ah,es:[di]
	mov	dl,ah
	or	ah,dh
	and	al,ah
	xor	al,dl
	ROPDEF	DSPDoax,0062,0786
	xor	al,dh
	ROPDEF	PDSPDoaxxn,006D,1785


SDPSnoax:
	mov	dl,al
	not	al
	or	al,dh
	and	al,es:[di]
	xor	al,dl
	ROPDEF	SDPSnoax,006E,1E28


SSDxPDxaxn:
	mov	dl,al
SDxPDxa:
	mov	ah,es:[di]
	xor	al,ah
	xor	ah,dh
	and	al,ah
	ROPDEF	SDxPDxa,0042,0D5D
	xor	al,dl
	ROPDEF	SSDxPDxaxn,0071,1D5C


SDPSxox:
	mov	dl,al
	xor	al,dh
	or	al,es:[di]
	xor	al,dl
	ROPDEF	SDPSxox,0072,0648


SDPnoan:
	mov	ah,dh
	not	ah
	or	ah,es:[di]
	and	al,ah
	ROPDEF	SDPnoan,0073,0E28


DSPDxox:
	mov	ah,es:[di]
	mov	dl,ah
	xor	ah,dh
	or	al,ah
	xor	al,dl
	ROPDEF	DSPDxox,0074,0646


SDPSnaox:
	mov	dl,al
DPSnaon:
	not	al
	and	al,dh
	or	al,es:[di]
	ROPDEF	DPSnaon,0045,0B29
	xor	al,dl
	ROPDEF	SDPSnaox,0076,1B28


DSPnoan:
PDSPnoax:
	mov	ah,dh
	not	ah
	or	al,ah
	and	al,es:[di]
	ROPDEF	DSPnoan,0075,0E26
DPSxnon:
	xor	al,dh
	ROPDEF	PDSPnoax,007A,1E29
PDSnoan:
SPDSnoax:
	mov	dl,al			;(wasted for DPSxnon)
	not	al
	or	al,es:[di]
	ROPDEF	DPSxnon,0014,0869
	and	al,dh
	ROPDEF	PDSnoan,004F,0E25
	xor	al,dl
	ROPDEF	SPDSnoax,007C,1E24

SDPxnan:
	mov	ah,es:[di]
	xor	ah,dh
	not	ah
	and	al,ah
	ROPDEF	SDPxnan,007B,0C68



foobar	macro	y
if @Version LT 600
if2
  %out	Size of the table is y.
endif
else
  %out	Size of the table is y.
endif
endm

foobar	%(offset $)-(offset roptable)-256-8
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\rpgen.c ===
/*
**  Copyright (c) 1991 Microsoft Corporation
*/
//===========================================================================
// FILE                         RPGEN.C
//
// MODULE                       Host Resource Executor
//
// PURPOSE                      Rendering primitives, generic,
//
// DESCRIBED IN                 Resource Executor design spec.
//
//
// MNEMONICS                    n/a
//
// HISTORY                      Bert Douglas  5/1/91 Initial coding started
//                              mslin/dstseng 01/17/92 revise for HRE
//                              dstseng       03/06/92 <1> RP_FillScanRow 
//															 ->RP_FILLSCANROW for asm. version.
//										  dstseng		 03/19/92 <2> comment out unnecessary code.
//															 which was implemented for frac. version of
//															 slicing algorithm.
//
//===========================================================================
#include <windows.h>
#include "constant.h"
#include "jtypes.h"
#include "jres.h"
#include "frame.h"      // driver header file, resource block format
#include "hretype.h"    // define data structure used by hre.c and rpgen.c

//---------------------------------------------------------------------------
void RP_SliceLine
(
   SHORT s_x1, SHORT s_y1,  // endpoint 1
   SHORT s_x2, SHORT s_y2,  // endpoint 2
   RP_SLICE_DESC FAR* psd, // output slice form of line
   UBYTE fb_keep_order      // keep drawing order on styled lines/
)

// PURPOSE
//    Convert a line from endpoint form to slice form
//
//    Slices will run from left to right
//
//    The generated slices are of maximal length and are in a horizontal,
//    vertical or diagonal direction.  Most frame buffer hardware can be
//    accessed with particular efficiency in these directions.  All slices
//    of a line are in the same direction.
//
//    Clipping must be performed by caller.  All coordinates will be non-negative.
//
//    Basic algorithm is taken from :
//      Bresenham, J. E. Run length slice algorithms for incremental lines.
//      In "Fundamental Algorithms for Computer Graphics", R. A. Earnshaw, Ed.
//      NATO ASI Series, Springer Verlag, New York, 1985, 59-104.
//
//    Modifications have been made to the above algorithm for:
//      - sub-pixel endpoint coordinates
//      - equal error rounding rules
//      - GIQ (grid intersect quantization) rules
//      - first/last pixel exclusion
//
//    The line is sliced in four steps:
//
//    STEP 1:  Find the pixel center cooridnates of the first and
//    last pixels in the line.  This is done according to the GIQ conventions.
//
//    STEP 2:  Use these integer pixel center endpoint coordinates
//    to produce the Bresenham slices for the line.  The equal error rounding
//    rule is used, when the first and last slices are not of equal length, to
//    decide which end gets the short slice.
//
//    STEP 3:  Adjust the length of the first and last slices for the
//    effect of the sub-pixel endpoint coordinates.  Note that the sub-pixel
//    part of the coordinates can only effect the first and last slices and
//    has no effect on the intermediate slices.
//
//    STEP 4:  Perform the conditional exclusion of the first and
//    last pixels from the line.
//
//
// ASSUMPTIONS & ASSERTIONS     none.
//
// INTERNAL STRUCTURES          none.
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
   SHORT  s_q,s_r;               /* defined in Bresenhams paper            */
   SHORT  s_m,s_n;               /* "                                      */
   SHORT  s_dx,s_dy;             /* "                                      */
   SHORT  s_da,s_db;             /* "                                      */
   SHORT  s_del_b;               /* "                                      */
   SHORT  s_abs_dy;              /* absolute value of s_dy                 */

   SHORT  s_sy;                  /* 1 or -1 , sign of s_dy                 */
   SHORT  s_dx_oct,s_dy_oct;     /* octant dir  xy= 0/1 1/1 1/0 1/-1 0/-1  */
   SHORT  s_dx_axial,s_dy_axial; /* 1/2 octant axial dir xy= 0/1 1/0 -1/0  */
   SHORT  s_dx_diag, s_dy_diag;  /* 1/2 octant diagonal dir xy= 1/1 1/-1   */
   SHORT  s_t;                   /* temporary                              */
   FBYTE  fb_short_end_last;     /* 0=first end short, 1=last end short    */
   UBYTE  fb_unswap;             /* need to un-swap endpoints at return    */

   fb_unswap = FALSE;


   /*------------------------------------------------------------*/
   /* STEP 1: Find pixel center coordinates of first/last pixels */
   /*------------------------------------------------------------*/

   /* always draw left to right, normalize to semicircle with x >= 0 */
   s_dx = s_x2 - s_x1;
   if ( s_dx < 0 )
   {
      fb_unswap = fb_keep_order;
      s_dx  = -s_dx;
      s_t     = s_x2;
      s_x2 = s_x1;
      s_x1 = s_t;
      s_t     = s_y2;
      s_y2 = s_y1;
      s_y1 = s_t;
   }
   s_dy = s_y2 - s_y1;


   /*------------------------------------------------------------*/
   /* STEP 2: Produce slices using the Bresenham algorithm       */
   /*------------------------------------------------------------*/

   if ( s_dy < 0 )
   {
      s_abs_dy = -s_dy;
      s_sy = -1;
      fb_short_end_last = 1;
    }
   else
   {
      s_abs_dy = s_dy;
      s_sy = 1;
      fb_short_end_last = 0;
   }

   /* normalize to octant */
   if ( s_dx >= s_abs_dy )
   {
      s_da = s_dx;
      s_db = s_abs_dy;
      s_dx_oct = 1;
      s_dy_oct = 0;
   }
   else
   {
      s_da = s_abs_dy;
      s_db = s_dx;
      s_dx_oct = 0;
      s_dy_oct = s_sy;
      fb_short_end_last = 1;
   }

   /* normalize to half octant */
   s_del_b = s_db;
   s_t = s_da - s_db;
   if ( s_del_b > s_t )
   {
      s_del_b = s_t;
      fb_short_end_last ^= 1;
   }

   /* handle special case of slope of 2 */
   s_dx_axial = s_dx_oct;
   s_dy_axial = s_dy_oct;
   s_dx_diag = 1;
   s_dy_diag = s_sy;
   if (  ( s_da == (2 * s_del_b) )
      && ( s_dy < 0 )
      )
   {  s_dx_axial = 1;
      s_dy_axial = s_sy;
      s_dx_diag = s_dx_oct;
      s_dy_diag = s_dy_oct;
      fb_short_end_last ^= 1;
   }

   /* determine slice movement and skip directions */
   if ( s_db == s_del_b )
   {
      /* slice direction is axial, skip direction is diagonal */
      psd->s_dx_draw = s_dx_axial;
      psd->s_dy_draw = s_dy_axial;
      psd->s_dx_skip = s_dx_diag - s_dx_axial;
      psd->s_dy_skip = s_dy_diag - s_dy_axial;
   }
   else
   {
      /* slice direction is diagonal, skip direction is axial */
      psd->s_dx_draw = s_dx_diag;
      psd->s_dy_draw = s_dy_diag;
      psd->s_dx_skip = s_dx_axial - s_dx_diag;
      psd->s_dy_skip = s_dy_axial - s_dy_diag;
   }

   /* handle zero slope lines with special case */
   if ( s_del_b == 0 )
   {
      psd->us_first = s_da + 1;
      psd->us_n_slices = 0;
      psd->us_last = 0;
   }
   else
   /* general case, non-zero slope lines */
   {
      /* basic Bresenham parameters */
      s_q = s_da / s_del_b;
      s_r = s_da % s_del_b;
      s_m = s_q / 2;
      s_n = s_r;
      if ( s_q & 1 ) s_n += s_del_b;

      /* first and last slice length */
      psd->us_first = psd->us_last = s_m + 1;
      if ( s_n == 0 )
      {
         if ( fb_short_end_last )
            psd->us_last -= 1;
         else
            psd->us_first -= 1;
      }

      /* remaining line slice parameters */
      psd->us_small = s_q;
      psd->s_dis_sm = 2*s_r;
      psd->s_dis_lg = psd->s_dis_sm - (2*s_del_b);
      psd->s_dis = s_n + psd->s_dis_lg;
      if ( s_dy < 0 ) psd->s_dis -= 1;
      psd->us_n_slices = s_del_b - 1;

   }

   /* output endpoints */
   psd->us_x1 = s_x1;
   psd->us_y1 = s_y1;
   psd->us_x2 = s_x2;
   psd->us_y2 = s_y2;

   if ( fb_unswap )
   {
      psd->us_x1 = s_x2;
      psd->us_y1 = s_y2;
      psd->us_x2 = s_x1;
      psd->us_y2 = s_y1;
      psd->s_dx_draw = -psd->s_dx_draw;
      psd->s_dy_draw = -psd->s_dy_draw;
      psd->s_dx_skip = -psd->s_dx_skip;
      psd->s_dy_skip = -psd->s_dy_skip;
      s_t = psd->us_first;
      psd->us_first = psd->us_last;
      psd->us_last = s_t;
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\ropdefs.inc ===
;----------------------------Module-Header------------------------------;
; Module Name: ROPDEFS.BLT
;
; Constants relating to raster operation definitions.
;
; Created: In Windows' distant past (c. 1983)
;
; Copyright (c) 1983 - 1987  Microsoft Corporation
;
; These constants are used mainly in the file ROPTABLE.BLT, in which
; the raster operation code templates are defined.
;
; This file is part of a set that makes up the Windows BitBLT function
; at driver-level.
;-----------------------------------------------------------------------;

	subttl	Raster Operation Definitions
	page


;	Raster Op Definitions
;
;
;	The include file COMMENT.BLT contains a good description
;	of the encoding of the raster operations.  It should be
;	read before examining the definitions that follow.
;
;	The sixteen-bit number indicating which raster Op is to be
;	performed is encoded in the following manner:


EPS_OFF	=	0000000000000011b	;Offset within parse string
EPS_INDEX =	0000000000011100b	;Parse string index
LogPar	=	0000000000100000b	;(1 indicates implied NOT as Logop6)
LogOp1	=	0000000011000000b	;Logical Operation #1
LogOp2	=	0000001100000000b	;Logical Operation #2
LogOp3	=	0000110000000000b	;Logical Operation #3
LogOp4	=	0011000000000000b	;Logical Operation #4
LogOp5	=	1100000000000000b	;Logical Operation #5


;	The parity bit is used to encode an optional sixth logical operation
;	which will always be a "NOT".  In most cases this is used to get an
;	even number of "NOT"s so that reduction can take place (two sequential
;	trailing "NOT"s cancel each other out and thus are eliminated).



;	Each LogOp (Logical Operation) is encoded as follows:

LogNOT	=	00b			;NOT result
LogXOR	=	01b			;XOR result with next operand
LogOR	=	10b			;OR  result with next operand
LogAND	=	11b			;AND result with next operand



;	The parse string is a string which contains the operands for
;	the logical operation sequences (source, destination, pattern).
;	The logic opcodes are applied to the current result and the next
;	element of the given string (unless the LogOp is a NOT which only
;	affects the result).
;
;	The string is encoded as eight two-bit numbers indicating which
;	operand is to be used

opDefs		struc
  OpSpec	db	?		  ;Special Operand as noted below
  OpSrc 	db	?		  ;Operand is source field
  OpDest	db	?		  ;Operand is destination field
  OpPat 	db	?		  ;Operand is pattern field
opDefs		ends



;	The special operand is used for a few rops that would not fit into
;	an RPN format.	On the first occurance of an OpSpec, the current result
;	is "PUSHED", and the next operand is loaded.  On the second occurance
;	of the OpSpec, the given logic operation is performed between the
;	current result and the "PUSHED" value.
;
;	**NOTE**  Since there can be no guarantee that the client will call
;	the BLT routine with one of the 256 published raster ops, it is
;	possible that a value might be "PUSHED" and then never "POPPED".
;	If these "PUSHES" are made to the stack, then care must be made to
;	remove the "PUSHED" value.
;
;	In any case, since the raster op was not one of the published
;	"magic numbers", the BLT can be aborted or the result can be
;	computed to the extent possible.  The only restriction is that it
;	must not crash the system (i.e. don't leave extra stuff on the stack).
;
;		Simply: Compute garbage, but don't crash!




;	Define the parse strings to be allocated later.
;
;	An example parse string for the pattern "SDPSDPSD" would be
;	"0110110110110110b"


parseStr0	=	07AAAh		;src,pat,dest,dest,dest,dest,dest,dest
parseStr1	=	079E7h		;src,pat,dest,src,pat,dest,src,pat
parseStr2	=	06DB6h		;src,dest,pat,src,dest,pat,src,dest
parseStr3	=	0AAAAh		;dest,dest,dest,dest,dest,dest,dest,dest
parseStr4	=	0AAAAh		;dest,dest,dest,dest,dest,dest,dest,dest
parseStr5	=	04725h		;src,spec,src,pat,spec,dest,src,src
parseStr6	=	04739h		;src,spec,src,pat,spec,pat,dest,src
parseStr7	=	04639h		;src,spec,src,dest,spec,pat,dest,src



;	The following equates are for certain special functions that are
;	derived from the very first string (index of SpecParseStrIndex).
;
;	These strings will have their innerloops special cased for
;	speed enhancements (i.e MOVSx and STOSx for pattern copys and
;	white/black fill, and MOVSx for source copy if possible)

PAT_COPY 	equ	0021h		;P    - dest = Pattern
NOTPAT_COPY	equ	0001h		;Pn   - dest = NOT Pattern
FILL_BLACK	equ	0042h		;DDx  - dest = 0 (black)
FILL_WHITE	equ	0062h		;DDxn - dest = 1
SOURCE_COPY	equ	0020h		;S    - dest = source


	errnz	LogXOR-01b		;These must hold true for above equates
	errnz	LogOp1-0000000011000000b
	errnz	LogPar-0000000000100000b
	errnz	parseStr0-7AAAh 	;  plus the string must be SPDD


SPEC_PARSE_STR_INDEX equ	0	;Special cased strings index


if @Version LT 600
if2
  %out	Static Raster Operations
endif
else
  %out	Static Raster Operations
endif



;	The raster operation table consists of a word for each of
;	the first 128 raster operations (00 through 7F).  The second
;	half of the raster operations (FF through 80) are the inverse
;	of the first half.
;
;	The table is encoded as follows:
;
;	    N S P LLL OOOOOOOOOO
;	    | | |  |	  |
;	    | | |  |	  |_____  Offset of code from roptable.
;	    | | |  |
;	    | | |  |____________  Length index
;	    | | |
;	    | | |_______________  Pattern is present
;	    | |
;	    | |_________________  Source is present
;	    |
;	    |___________________  Generate trailing NOT
;
;
;	To map the ROPS 80h through FFh to 00h through 7Fh, take the
;	1's complement of the ROP, and invert 'N' above.
;
;
;	Notes:
;
;	    1)	An offset of 0 is reserved for source copy.  This
;		was done to reduce the number of LLLs to 8, so that
;		the above encoding could fit into a 16-bit integer.
;
;
;	    2)	LLL only allows a maximum of 8 different template sizes!
;		Actual length is at roptable+256+LLL.
;
;
;
;
;	ROP is the macro that generates the equates which will be
;	stored into the roptable as specified above.
;
;	Usage:
;
;	    ROPDEF	Pattern,Number
;
;	Where
;
;	    Pattern	Is the RPN definition of the raster operation.
;			It is used as the label of the first byte of
;			the template.  It also is used to determine
;			is there is a (S)ource, (P)attern, and if the
;			final result is to be (n)egated.
;
;	    Number	is the boolean result of the raster operation
;			based on a P=F0, S=CC, and D=AA.  These labels
;			and indexes can be found in the file COMMENT.BLT
;
;			Since there are many equivelent boolean expresions,
;			some of the rops will not match the label given.
;			The label is for reference only.  The final result
;			is what counts.



ROPOffset	equ	0000001111111111b
ROPLength	equ	0001110000000000b
SOURCE_PRESENT	equ	0010000000000000b
PATTERN_PRESENT	equ	0100000000000000b
NEGATE_NEEDED	equ	1000000000000000b


;	Define the eight template length indices.

ROPLen2  	equ	0
ROPLen3  	equ	1
ROPLen4  	equ	2
ROPLen5  	equ	3
ROPLen7  	equ	4
ROPLen9  	equ	5
ROPLen11 	equ	6
ROPLen13 	equ	7
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\rplnee.c ===
/*
**  Copyright (c) 1991 Microsoft Corporation
*/
//===========================================================================
// FILE                         RPLNEE.C
//
// MODULE                       Host Resource Executor
//
// PURPOSE                      Using Bresenham run slice algorithm to
//                              draw single pixel line.
//
// DESCRIBED IN                 Resource Executor design spec.
//
// The drawing sectors are also described in the following diagram.
// Y is shown increasing down the page as do the printer physical
// coordinates.  The program code handles separately sectors 0/7, 6/1, 5/2
// and 4/3.
//
//
//             |        x         x
//             |                 x
//             |       x        x
//             |               x
//             |  0   x   1   x
//             |             x
//             |     x      x
//             |           x
//             |    x     x
//             |         x   2
//             |   x    x         x
//             |       x        x
//             |  x   x       x
//             |     x      x
//             | x  x     x
//             |   x    x
//             |x x   x      3
//             | x  x
//             |x x
//             |-------------------            --> X
//             |x x
//             | x  x
//             |x x   x      4
//             |   x    x
//             | x  x     x
//             |     x      x
//             |  x   x       x
//             |       x        x
//             |   x    x         x
//             |         x   5
//             |    x     x
//             |           x
//             |     x      x
//             |             x
//             |  7   x   6   x
//             |               x
//             |       x        x
//             |                 x
//             |        x         x
//
//
//             |
//             |
//            \|/
//
//             Y
//
//
// MNEMONICS                    n/a
//
// HISTORY  1/17/92 dstseng     created
//
//===========================================================================

// include file
#include <windows.h>

#include "constant.h"
#include "frame.h"      // driver header file, resource block format
#include "jtypes.h"     // type definition used in cartridge
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"    // define data structure used by hre.c and rpgen.c
#include "rplnee.h"

static
void ShortSlice07(RP_SLICE_DESC FAR* line,
                  drawInfoStructType FAR *drawInfo,
                  uint16  firstOrLast);
static
void ShortSlice16(RP_SLICE_DESC FAR* line,
                  drawInfoStructType FAR *drawInfo,
                  uint16  firstOrLast);
static
void ShortSlice25(RP_SLICE_DESC FAR* line,
                  drawInfoStructType FAR *drawInfo,
                  uint16  firstOrLast);
static
void DisplaySlice34(RP_SLICE_DESC FAR* line,
                  drawInfoStructType FAR *drawInfo,
                  uint16  firstOrLast);

//---------------------------------------------------------------------------
UINT                            //always return 0 to upper level
RP_LineEE_Draw
(
    RP_SLICE_DESC FAR FAR* line,        /* output slice form of line */
    LPBITMAP      lpbm
)

// PURPOSE                      input RP_SLICE_DESC is prepared by RP_SliceLine
//                              according to different sector (0-7),
//                              this routine will call different functions
//                              to draw the slices with the length recorded
//                              in FAR* line.
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 func;

    /* Get function address according to drawing & skipping direction */
    func = (line->s_dx_draw << 3) + (line->s_dy_draw << 2) +
           (line->s_dx_skip << 1) + line->s_dy_skip + 2;

    /* Call corresponding function to render line */
    (*sector_function[func])(line, lpbm);
    return(0);
}

//---------------------------------------------------------------------------
static void
Sector07
(
    RP_SLICE_DESC FAR* line,        /* output slice form of line */
    LPBITMAP lpbm
)

// PURPOSE                      input RP_SLICE_DESC is prepared by RP_SliceLine
//                              prepare drawinfo and call ShortSlice07()
//                              to draw the line located in sector 0/7
//                              dy/dx > 2
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 func;
uint16 bitShift;
drawInfoStructType drawInfo;

    drawInfo.bytePosition = (uint16 FAR *)((UINT_PTR)lpbm->bmBits +
                             line->us_y1 * lpbm->bmWidthBytes);
    drawInfo.bytePosition += line->us_x1 >> 4;
    func = (line->s_dx_draw << 3) + (line->s_dy_draw << 2) +
           (line->s_dx_skip << 1) + line->s_dy_skip + 2;
    if (func == SECTOR0)
        drawInfo.nextY = -1 * lpbm->bmWidthBytes; /* sector 0 */
    else
        drawInfo.nextY = lpbm->bmWidthBytes;  /* sector 7 */
    bitShift = line->us_x1 & 0x000F;
    drawInfo.bitPosition = 0x8000 >> bitShift;
    /* Now rendering the first slice */
    if (line->us_first > 0) {
            ShortSlice07(line, &drawInfo, FIRST);
    }
    /* Rendering intermediate slices */
    if (line->us_n_slices > 0) {
            ShortSlice07(line, &drawInfo, (uint16)0);
    }
    /* Now rendering the last slice */
    if (line->us_last > 0) {
            ShortSlice07(line, &drawInfo, LAST);
    }
    return;
}

//---------------------------------------------------------------------------
static void
Sector16
(
    RP_SLICE_DESC FAR* line,         /* output slice form of line */
    LPBITMAP lpbm
)

// PURPOSE                      input RP_SLICE_DESC is prepared by RP_SliceLine
//                              prepare drawinfo and call ShortSlice16()
//                              to draw the line located in sector 1/6
//                              2 > dy/dx > 1
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 func;
uint16 bitShift;
drawInfoStructType drawInfo;

    drawInfo.bytePosition = (uint16 FAR *)((UINT_PTR)lpbm->bmBits +
                             line->us_y1 * lpbm->bmWidthBytes);
    drawInfo.bytePosition += line->us_x1 >> 4;
    func = (line->s_dx_draw << 3) + (line->s_dy_draw << 2) +
           (line->s_dx_skip << 1) + line->s_dy_skip + 2;
    if (func == SECTOR1)
        drawInfo.nextY = -1 * lpbm->bmWidthBytes; /* sector 1 */
    else
        drawInfo.nextY = lpbm->bmWidthBytes;  /* sector 6 */
    bitShift = line->us_x1 & 0x000F;
    drawInfo.bitPosition = 0x8000 >> bitShift;
    /* Now rendering the first slice */
    if (line->us_first > 0) {
            ShortSlice16(line, &drawInfo, FIRST);
    }
    /* Rendering intermediate slices */
    if (line->us_n_slices > 0) {
            ShortSlice16(line, &drawInfo, (uint16)0);
    }
    /* Now rendering the last slice */
    if (line->us_last > 0) {
            ShortSlice16(line, &drawInfo, LAST);
    }
    return;
}

//---------------------------------------------------------------------------
static void
Sector25
(
    RP_SLICE_DESC FAR* line,         /* output slice form of line */
    LPBITMAP lpbm
)

// PURPOSE                      input RP_SLICE_DESC is prepared by RP_SliceLine
//                              prepare drawinfo and call ShortSlice25()
//                              to draw the line located in sector 2/5
//                              1 < dx/dy < 2
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 func;
uint16 bitShift;
drawInfoStructType drawInfo;

    drawInfo.bytePosition = (uint16 FAR *)((UINT_PTR)lpbm->bmBits +
                             line->us_y1 * lpbm->bmWidthBytes);
    drawInfo.bytePosition += line->us_x1 >> 4;
    func = (line->s_dx_draw << 3) + (line->s_dy_draw << 2) +
           (line->s_dx_skip << 1) + line->s_dy_skip + 2;
    if (func == SECTOR2)
        drawInfo.nextY = -1 * lpbm->bmWidthBytes; /* sector 2 */
    else
        drawInfo.nextY = lpbm->bmWidthBytes;  /* sector 5 */
    bitShift = line->us_x1 & 0x000F;
    drawInfo.bitPosition = 0x8000 >> bitShift;
    /* Now rendering the first slice */
    if (line->us_first > 0) {
            ShortSlice25(line, &drawInfo, FIRST);
    }
    /* Rendering intermediate slices */
    if (line->us_n_slices > 0) {
            ShortSlice25(line, &drawInfo, (uint16)0);
    }
    /* Now rendering the last slice */
    if (line->us_last > 0) {
            ShortSlice25(line, &drawInfo, LAST);
    }
    return;
}

//---------------------------------------------------------------------------
static void
Sector34
(
    RP_SLICE_DESC FAR* line,         /* output slice form of line */
    LPBITMAP lpbm
)

// PURPOSE                      input RP_SLICE_DESC is prepared by RP_SliceLine
//                              prepare drawinfo and call DisplaySlice34()
//                              to draw the line located in sector 3/4
//                              dx/dy > 2
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 func;
uint16 bitShift;
drawInfoStructType drawInfo;

    drawInfo.bytePosition = (uint16 FAR *)((UINT_PTR)lpbm->bmBits +
                             line->us_y1 * lpbm->bmWidthBytes);
    drawInfo.bytePosition += line->us_x1 >> 4;
    func = (line->s_dx_draw << 3) + (line->s_dy_draw << 2) +
           (line->s_dx_skip << 1) + line->s_dy_skip + 2;
    if (func == SECTOR3)
        drawInfo.nextY = -1 * lpbm->bmWidthBytes; /* sector 3 */
    else
        drawInfo.nextY = lpbm->bmWidthBytes;  /* sector 4 */
    bitShift = line->us_x1 & 0x000F;
    drawInfo.bitPosition = bitShift;
    /* Now rendering the first slice */
    if (line->us_first > 0) {
        DisplaySlice34(line, &drawInfo, FIRST);
    }
    /* Rendering intermediate slices */
    if (line->us_n_slices > 0) {
        DisplaySlice34(line, &drawInfo, 0);
    }
    /* Now rendering the last slice */
    if (line->us_last > 0) {
        DisplaySlice34(line, &drawInfo, LAST);
    }
    return;
}

//---------------------------------------------------------------------------
static void
ShortSlice07
(
    RP_SLICE_DESC          FAR* line,           /* output slice form of line */
    drawInfoStructType FAR *drawInfo,       // position to put pixel on it
    uint16                 firstOrLast      // is this first/last slice?
)
// PURPOSE                      drawing the line located in sector 0/7
//                              dy/dx > 2
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 loop1st, loop2nd, loop3rd;
int32  ddaValue, ddaDiff;
uint16 i, j;

    if (firstOrLast) {
        if (firstOrLast == FIRST)
            loop1st = line->us_first;
        else
            loop1st = line->us_last;
        loop2nd = 1;
        loop3rd = 0;
        ddaValue = -1;
        ddaDiff = 0;
    } else {
        loop1st = line->us_small;
        loop2nd = line->us_n_slices & 0x03;
        loop3rd = line->us_n_slices >> 2;
        ddaValue = line->s_dis - line->s_dis_sm;
        ddaDiff = line->s_dis_lg - line->s_dis_sm;
    }
    for (i = 0; i <= loop3rd; i++) {
        while(loop2nd--) {
            if (firstOrLast)
                ddaValue += 0;
            else
                ddaValue += line->s_dis_sm;
            if (ddaValue >= 0) {
                ddaValue  += ddaDiff;
                *drawInfo->bytePosition |=
                (drawInfo->bitPosition >> 8) | (drawInfo->bitPosition << 8);
                drawInfo->bytePosition +=  drawInfo->nextY >> 1;
            }
            for (j = 0; j < loop1st; j++) {
                *drawInfo->bytePosition |=
                (drawInfo->bitPosition >> 8) | (drawInfo->bitPosition << 8);
                drawInfo->bytePosition +=  drawInfo->nextY >> 1;
            }
            if ((drawInfo->bitPosition >>= 1) == 0) {
                drawInfo->bytePosition++;
                drawInfo->bitPosition = 0x8000;
            }
        }
        loop2nd = 4;
    }
    return;
}


//---------------------------------------------------------------------------
static void
ShortSlice16
(
    RP_SLICE_DESC          FAR* line,           /* output slice form of line */
    drawInfoStructType FAR *drawInfo,       // position to put pixel on it
    uint16                 firstOrLast      // is this first/last slice?
)
// PURPOSE                      drawing the line located in sector 1/6
//                              2> dy/dx > 1
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 loop1st, loop2nd, loop3rd;
int32  ddaValue, ddaDiff;
uint16  i, j;

    if (firstOrLast) {
        if (firstOrLast == FIRST)
            loop1st = line->us_first;
        else
            loop1st = line->us_last;
        loop2nd = 1;
        loop3rd = 0;
        ddaValue = -1;
        ddaDiff = 0;
    } else {
        loop1st = line->us_small;
        loop2nd = line->us_n_slices & 0x03;
        loop3rd = line->us_n_slices >> 2;
        ddaValue = line->s_dis - line->s_dis_sm;
        ddaDiff = line->s_dis_lg - line->s_dis_sm;
    }
    for (i = 0; i <= loop3rd; i++) {
        while(loop2nd--) {
            if (firstOrLast)
                ddaValue += 0;
            else
                ddaValue += line->s_dis_sm;
            if (ddaValue >= 0) {
                ddaValue  += ddaDiff;
                *drawInfo->bytePosition |=
                (drawInfo->bitPosition >> 8) | (drawInfo->bitPosition << 8);
                drawInfo->bytePosition += drawInfo->nextY >> 1;
                if ((drawInfo->bitPosition >>= 1) == 0) {
                    drawInfo->bytePosition++;
                    drawInfo->bitPosition = 0x8000;
                }
            }
            for (j = 0; j < loop1st; j++) {
                *drawInfo->bytePosition |=
                (drawInfo->bitPosition >> 8) | (drawInfo->bitPosition << 8);
                drawInfo->bytePosition += drawInfo->nextY >> 1;
                if ((drawInfo->bitPosition >>= 1) == 0) {
                    drawInfo->bytePosition++;
                    drawInfo->bitPosition = 0x8000;
                }
            }
            /* Adjust skip direction by backword 1 bit */
            if ((drawInfo->bitPosition <<= 1) == 0) {
                drawInfo->bytePosition--;
                drawInfo->bitPosition = 0x0001;
            }
        }
        loop2nd = 4;
    }
    return;
}


//---------------------------------------------------------------------------
static void
ShortSlice25
(
    RP_SLICE_DESC          FAR* line,           /* output slice form of line */
    drawInfoStructType FAR *drawInfo,       // position to put pixel on it
    uint16                 firstOrLast      // is this first/last slice?
)
// PURPOSE                      drawing the line located in sector 2/5
//                              2> dx/dy > 1
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 loop1st, loop2nd, loop3rd;
int32  ddaValue, ddaDiff;
uint16 i, j;

    if (firstOrLast) {
        if (firstOrLast == FIRST)
            loop1st = line->us_first;
        else
            loop1st = line->us_last;
        loop2nd = 1;
        loop3rd = 0;
        ddaValue = -1;
        ddaDiff = 0;
    } else {
        loop1st = line->us_small;
        loop2nd = line->us_n_slices & 0x03;
        loop3rd = line->us_n_slices >> 2;
        ddaValue = line->s_dis - line->s_dis_sm;
        ddaDiff = line->s_dis_lg - line->s_dis_sm;
    }
    for (i = 0; i <= loop3rd; i++) {
        while(loop2nd--) {
            if (firstOrLast)
                ddaValue += 0;
            else
                ddaValue += line->s_dis_sm;
            if (ddaValue >= 0) {
                ddaValue  += ddaDiff;
                *drawInfo->bytePosition |=
                (drawInfo->bitPosition >> 8) | (drawInfo->bitPosition << 8);
                drawInfo->bytePosition += drawInfo->nextY >> 1;
                if ((drawInfo->bitPosition >>= 1) == 0) {
                    drawInfo->bytePosition++;
                    drawInfo->bitPosition = 0x8000;
                }
            }
            for (j = 0; j < loop1st; j++) {
                *drawInfo->bytePosition |=
                (drawInfo->bitPosition >> 8) | (drawInfo->bitPosition << 8);
                drawInfo->bytePosition += drawInfo->nextY >> 1;
                if ((drawInfo->bitPosition >>= 1) == 0) {
                    drawInfo->bytePosition++;
                    drawInfo->bitPosition = 0x8000;
                }
            }
            /* Adjust skip direction by backword 1 column */
            drawInfo->bytePosition -= drawInfo->nextY >> 1;
        }
        loop2nd = 4;
    }
    return;
}

//---------------------------------------------------------------------------
static void
DisplaySlice34
(
    RP_SLICE_DESC          FAR* line,           /* output slice form of line */
    drawInfoStructType FAR *drawInfo,       // position to put pixel on it
    uint16                 firstOrLast      // is this first/last slice?
)
// PURPOSE                      drawing the line located in sector 3/4
//                              dx/dy > 2
//
//
// ASSUMPTIONS & ASSERTIONS     None.
//
// INTERNAL STRUCTURES          RP_SLICE_DESC is defined in hretype.h
//                              drawInfoStructType is defined in rplnee.h
//
// UNRESOLVED ISSUES            programmer development notes
//---------------------------------------------------------------------------
{
uint16 nSlice, sliceLength;
uint16 wordNumber, lShiftInLastWord;
int32  ddaValue, ddaDiff;
uint16  i;
uint16 tmp;

    if (firstOrLast) {
        nSlice = 1;
        ddaValue = -1;
        ddaDiff = 0;
    } else {
        nSlice = line->us_n_slices;
        ddaValue = line->s_dis - line->s_dis_sm;
        ddaDiff = (line->s_dis_lg - line->s_dis_sm);
    }
    while (nSlice--) {
        if (!firstOrLast) {
            sliceLength = line->us_small;
            ddaValue += line->s_dis_sm;
        } else if (firstOrLast == FIRST) {
            sliceLength = line->us_first;
            ddaValue += 0;
        } else {
            sliceLength = line->us_last;
            ddaValue += 0;
        }
        if (ddaValue >= 0) {
            ddaValue  += ddaDiff;
            sliceLength += 1;
        }
        wordNumber = (drawInfo->bitPosition + sliceLength) >> 4;
        lShiftInLastWord = 16 -
                         ((drawInfo->bitPosition + sliceLength) & 0x0F);
        if (!wordNumber) { /* slice < 16 bits */
            /*
            *drawInfo->bytePosition |=
                ((uint16)ALLONE >> drawInfo->bitPosition) << lShiftInLastWord;
             */
            tmp = (uint16)ALLONE >> (16 - sliceLength);
            tmp <<= lShiftInLastWord;
            *drawInfo->bytePosition |= (tmp >> 8) | (tmp << 8);
        } else {
            tmp = (uint16)ALLONE >> drawInfo->bitPosition;
            *drawInfo->bytePosition++ |= (tmp >> 8) | (tmp << 8);
            for (i = 1; i < wordNumber; i++) {
                *drawInfo->bytePosition++ = (uint16)ALLONE;
            }
            if (lShiftInLastWord != 16) {
                tmp =  (uint16)ALLONE << lShiftInLastWord;
                *drawInfo->bytePosition |= (tmp >> 8) | (tmp << 8);
            }

        }
        /* Adjust skip direction by backword 1 column */
        drawInfo->bytePosition += drawInfo->nextY >> 1;
        drawInfo->bitPosition += sliceLength;
        wordNumber = drawInfo->bitPosition >> 4;
        if (wordNumber) {
            drawInfo->bitPosition &= 0x0F;
        }
    }
    return;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\rplnee.h ===
typedef char             int8;           /* signed byte: -128..127          */
typedef unsigned char    uint8;          /* unsigned byte: 0..255           */
typedef unsigned short   uint16;         /* unsigned integer: 0..65535      */
typedef short            int16;          /* signed integer: -32768..32767   */
typedef unsigned long    uint32;         /* unsigned long integer: 0..2^32-1*/
typedef long             int32;          /* signed long integer: -2^31..2^31*/

#define FIRST    (uint16)1
#define LAST     (uint16)2
#define ALLONE   (uint16)0xFFFF
#define SECTOR0  0
#define SECTOR1  4
#define SECTOR2  7
#define SECTOR3  9
#define SECTOR4  11
#define SECTOR5  13
#define SECTOR6  12
#define SECTOR7  8

struct DRAWINFO
{
    uint16 FAR *bytePosition;
    int    nextY;
    uint16 bitPosition;
};

typedef struct DRAWINFO drawInfoStructType;

static void Sector07(RP_SLICE_DESC FAR* line, LPBITMAP lpbm);
static void Sector16(RP_SLICE_DESC FAR* line, LPBITMAP lpbm);
static void Sector25(RP_SLICE_DESC FAR* line, LPBITMAP lpbm);
static void Sector34(RP_SLICE_DESC FAR* line, LPBITMAP lpbm);

void (*sector_function[14])(RP_SLICE_DESC FAR*, LPBITMAP lpbm) =
{
	Sector07,
	     0,
	     0,
	     0,
	Sector16,
	     0,
	     0,
	Sector25,
	Sector07,
	Sector34,
	     0,
	Sector34,
	Sector16,
	Sector25
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\viewrend\genfile.hpp ===
/*==============================================================================
This C++ object provides a generic layer over various stream types.

	#define		Stream
	WINFILE   Windows file 
	SECFILE   IFAX secure file
  OLEFILE   OLE2 IStream

01-Nov-93   RajeevD    Created.
03-Mar-94   RajeevD    Added IStream support.
==============================================================================*/
#ifndef _INC_GENFILE
#define _INC_GENFILE

#include <ifaxos.h>

#ifdef SECFILE
#include <awfile.h>
#endif

#ifdef OLEFILE
#ifdef WIN32
#include <objerror.h>
#endif
#include <memory.h>
#include <objbase.h>
#endif

// seek origins
#define SEEK_BEG 0
#define SEEK_CUR 1 
#define SEEK_END 2

typedef struct FAR GENFILE
{
	GENFILE (void) {fOpen = FALSE;}

#ifdef WINFILE

	HFILE hf;
	
	BOOL Open  (LPVOID lpFilePath, WORD wMode)
		{ return (fOpen = (hf = _lopen ((LPSTR) lpFilePath, wMode)) != HFILE_ERROR); }
	
 	BOOL Read  (LPVOID lpRead, UINT cbRead)
		{ return _lread  (hf, (char FAR*) lpRead,  cbRead) == cbRead; }

	BOOL Write (LPVOID lpWrite, UINT cbWrite)
		{ return _lwrite (hf, (char FAR*) lpWrite, cbWrite) == cbWrite; }
		
	BOOL Seek  (long lOffset, WORD wOrigin = 0)
		{ return _llseek (hf, lOffset, wOrigin) != -1L; }

	DWORD Tell (void)
		{ return _llseek (hf, 0, SEEK_CUR); }

	~GENFILE ()
		{ if (fOpen) _lclose (hf); }

#endif // WINFILE

#ifdef SECFILE

	hOpenSecureFile hosf;

	BOOL Open  (LPVOID lpFilePath, WORD wMode)
		{ return (fOpen = !SecOpenFile ((LPhSecureFile) lpFilePath, &hosf, wMode)); }

 	BOOL Read  (LPVOID lpRead, UINT cbRead)
		{ return SecReadFile  (&hosf, lpRead, cbRead) == cbRead; }

	BOOL Write (LPVOID lpWrite, UINT cbWrite)
		{ return SecWriteFile (&hosf, lpWrite, cbWrite) == cbWrite; }
		
	BOOL Seek  (long lOffset, WORD wOrigin = 0)
		{ return SecSeekFile  (&hosf, lOffset, wOrigin) != -1L; }

	DWORD Tell (void)
		{ return SecSeekFile (&hosf, 0, SEEK_CUR);}

	~GENFILE ()
		{ if (fOpen) SecCloseFile (&hosf); }

#endif // SECFILE

#ifdef OLEFILE

	LPSTREAM lpStream;
	
	BOOL Open  (LPVOID lpFilePath, WORD wMode)
	{
		lpStream = (LPSTREAM) lpFilePath;
		Seek (0, STREAM_SEEK_SET); // BKD: changed to STREAM_SEEK_SET
		return TRUE;
	}
	
 	BOOL Read  (LPVOID lpRead, UINT cbRead)
	{ 
		DWORD cbActual;
		lpStream->Read (lpRead, cbRead, &cbActual);
		return (cbRead == cbActual);
	}

	BOOL Write (LPVOID lpWrite, UINT cbWrite)
	  { return (lpStream->Write (lpWrite, cbWrite, NULL) == S_OK); }
		
	BOOL Seek  (long lOffset, WORD wOrigin = 0)
	{
		LARGE_INTEGER dlOffset;		
		ULARGE_INTEGER dlNewOffset;

		LISet32 (dlOffset, lOffset);
		return (lpStream->Seek (dlOffset, wOrigin, &dlNewOffset) == S_OK);
	}

	DWORD Tell (void)
	{
		LARGE_INTEGER dlOffset;
		ULARGE_INTEGER dlNewOffset;

		LISet32 (dlOffset, 0);
		lpStream->Seek (dlOffset, SEEK_CUR, &dlNewOffset);
		return dlNewOffset.LowPart;
	}
		
	~GENFILE () { }
  
#endif // OLEFILE

	BOOL fOpen;
}
	FAR *LPGENFILE;

#endif // _INC_GENFILE
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\stllnent.h ===
/*
**  Copyright (c) 1992 Microsoft Corporation
*/

/*============================================================================
// FILE                     STLLNENT.H
//
// MODULE                   Jumbo Cartridge Public Information
//
// PURPOSE                  This file contains the function to draw styled
//
// DESCRIBED IN             This module has not been documented at this time.
//
// EXTERNAL INTERFACES      StyleLineDraw
//
// MNEMONICS                Standard Hungarian
//
// HISTORY
//
// 04/02/92  Rodneyk     WPG Coding Conventions.
//
//==========================================================================*/



BYTE StyleLineDraw
(
	 LPRESTATE lpREState,    // resource executor context
   RP_SLICE_DESC FAR *s,       /* Line Slice descriptor */
   UBYTE ubLineStyle,         /* Line style pointer    */
   SHORT sRop,             /* Current Raster operation number */
   SHORT wColor             /* Pen color to use White = 0, Black = 0xffff */
);
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\resexec\stllnent.c ===
// Copyright (c) 1992-1993 Microsoft Corporation

/*============================================================================
This code module implements styled lines in the NT format.

05/29/81  v-BertD    Initial code (used in RP_LineEE_Draw)
02/20/92  RodneyK    Converted to Styled line code.
02/21/92  RodneyK    Each bit in the Mask is used for two pixels.
03/20/92  RodneyK    Converted to NT style format.
06/01/93  RajeevD    Collapsed ROP handling from StyleLine* to Draw*.
                     (Reduces code size by 8K with no loss in speed.)
============================================================================*/
#include <windows.h>
#include "constant.h"
#include "frame.h"      // driver header file, resource block format
#include "jtypes.h"         /* Jumbo type definitions.                */
#include "jres.h"       // cartridge resource data type definition
#include "hretype.h"          /* Slice Descriptor defs.                 */

// Table data for the predefined pen styles
ULONG ulWinStyles[] =
{
   0x00000002, 0x00ffffff, 0x00000000, /* solid */
   0x00000002, 0x00000028, 0x00000010, /* dash  */ /* 28 */
   0x00000002, 0x00000008, 0x00000008, /* dot   */
   0x00000004, 0x0000001c, 0x0000000f, 0x00000008, 0x0000000f, /* dash dot */
   0x00000006, 0x0000001c, 0x0000000f, 0x00000008, 0x00000008,0x00000008, 0x0000000f,
   0x00000002, 0x00000000, 0x00ffffff, /* NULL  */
   0x00000002, 0x00ffffff, 0x00000000  /* Inside border */
};

const BYTE ulStyleLookUp[7] =
	{ 0x00, 0x03, 0x06, 0x09, 0x0e, 0x15, 0x18};

const USHORT usStyleSize[7] =
	{0x0000, 0x0038, 0x0010, 0x0042, 0x0052, 0x0000, 0x0000 };

typedef void (*ROPPROC)(LPBYTE, WORD, BYTE);

//==============================================================================
void DrawANDDNR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	if (~(*lpbFrame & wColor) & bPos)
		*lpbFrame |=  bPos;
	else
		*lpbFrame &= ~bPos;
}

//==============================================================================
void DrawANDDR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	*lpbFrame &= ~bPos;
}

//==============================================================================
void DrawANDNDR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	if (((~*lpbFrame) & wColor) & bPos)
		*lpbFrame |=  bPos;
	else
		*lpbFrame &= ~bPos;
}

//==============================================================================
void DrawCOPY0 (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	*lpbFrame &= ~bPos;
}

//==============================================================================
void DrawCOPY1 (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
  *lpbFrame |= bPos;
}

//==============================================================================
void DrawORDNR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	if ((~(*lpbFrame | wColor)) & bPos)
  	*lpbFrame |=  bPos;
	else 
  	*lpbFrame &= ~bPos;
}

//==============================================================================
void DrawORDR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	*lpbFrame |= bPos;
}

//==============================================================================
void DrawORNDR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	if (((~*lpbFrame) | wColor) & bPos)
  	*lpbFrame |=  bPos;
  else
  	*lpbFrame &= ~bPos;
}

//==============================================================================
void DrawXOR (LPBYTE lpbFrame, WORD wColor, BYTE bPos)
{
	if ((~*lpbFrame) & bPos)
		*lpbFrame |=  bPos;
	else
  	*lpbFrame &= ~bPos;
}

//==============================================================================
void StyleLine
(
	LPRESTATE lpREState,         // resource executor context
	RP_SLICE_DESC FAR*psdSlice,     /* Line Slice descriptor */
	ULONG *pulStyle,             /* Line style pointer    */
	WORD wColor,
	ROPPROC RopProc
)
/*==============================================================================
 PURPOSE               This function handle the OR Raster operations for
                       the styled line code.  It draws a line based on the
                       Slice descriptor, current color, current ROP, and
                       the current linestyle.

                       The function runs through the slice and determine
                       whether a point is to drawn or not.  The raster
                       operation is applied only the points which need to
                       be drawn.

ASSUMPTIONS &          This code assumes that the slice descriptor and the
ASSERTIONS             pointer to the style table are valid and correct.
                       No checks are performed to validate this data.
==============================================================================*/
{
   LPBITMAP lpbm;
   register UBYTE FAR *pbFrame;                       /* frame pointer               */
   SLONG lSlice_x, lSlice_y;            /* Slice Run variables         */
   SLONG lSkip_x, lSkip_y;              /* Slice skip variables        */
   register UBYTE usfPos;                        /* Bit in frame to modify      */
   register SHORT i;                             /* Slice variable              */
   ULONG *pulStyleTmp;                  /* Pointer to style data       */
   register ULONG ulDrawCount;                   /* Number of pixels to draw on */
   ULONG ulStyleCount;                  /* Count of data in line style */
   register BYTE bDraw;                         /* To draw or Not to draw      */

   pulStyleTmp = pulStyle + 1;          /* Point to style data         */
   ulDrawCount = *pulStyleTmp++;        /* Get the first count         */
   ulStyleCount = *(pulStyle) - 1;      /* Pattern longs remaining     */
   bDraw = 0xFF;                        /* Start by drawing            */

   for ( i = 0 ; i < (SHORT)lpREState->usPenPhase; i++)
   {
      if(!ulDrawCount)                  /* Flip draw mask */
      {
         bDraw = (BYTE)~bDraw;
         if (!ulStyleCount--)           /* recycle the pattern? */
         {
            ulStyleCount = *(pulStyle) - 1;
            pulStyleTmp = pulStyle + 1;
         }
         ulDrawCount = *pulStyleTmp++;  /* Get next style count */
      }
      ulDrawCount--;
   }

   lpbm = lpREState->lpBandBuffer;
   pbFrame = (UBYTE FAR*) lpbm->bmBits;
   pbFrame += psdSlice->us_y1 * lpbm->bmWidthBytes;
   pbFrame += psdSlice->us_x1 >> 3;
   usfPos = (UBYTE)(0x80 >> (psdSlice->us_x1 & 0x7));     /* Calculate the bit mask */

   lSlice_x = psdSlice->s_dx_draw;
   lSlice_y = psdSlice->s_dy_draw * lpbm->bmWidthBytes;
   lSkip_x = psdSlice->s_dx_skip;
   lSkip_y = psdSlice->s_dy_skip * lpbm->bmWidthBytes;

   // Do the first slice...

   if (psdSlice->us_first)
   {
      for ( i = psdSlice->us_first ; i > 0 ; --i )
      {
         if(!ulDrawCount)                  /* Flip draw mask */
         {
            bDraw = (BYTE)~bDraw;
            if (!ulStyleCount--)           /* recycle the pattern? */
            {
               ulStyleCount = *(pulStyle) - 1;
               pulStyleTmp = pulStyle + 1;
            }
            ulDrawCount = *pulStyleTmp++;  /* Get next style count */
         }
         ulDrawCount--;

         if (bDraw)
					(*RopProc)(pbFrame, wColor, usfPos);

         if (lSlice_x < 0)
         {
            usfPos <<= 1;
            if ( usfPos == 0 )                 /* Check mask underflow and adjust */
            {
               usfPos = 0x01;                /* Reset the bit mask */
               pbFrame -= 1;                  /* move to next UBYTE */
            }
         }
         else
         {
            usfPos >>= lSlice_x;
            if ( usfPos == 0 )                 /* Check mask underflow and adjust */
            {
               usfPos = 0x80;                /* Reset the bit mask */
               pbFrame += 1;                  /* move to next UBYTE */
            }
         }
         pbFrame += lSlice_y;              /* advance to next row */
      }

      if ( lSkip_x < 0 )                   /* going to the left? */
      {
         usfPos <<= 1;                      /* shift the mask */
         if ( usfPos == 0 )                 /* Check for over/under flow */
         {
            usfPos = 0x01;                /* Reset Mask */
            pbFrame -= 1;                  /* point to the next UBYTE */
         }
      }
      else                                 /* moving to the right */
      {
         usfPos >>= lSkip_x;
         if ( usfPos == 0 )
         {
            usfPos = 0x80;
            pbFrame += 1;
         }
      }
      pbFrame += lSkip_y;
   }

   // Do the intermediate slices...
   
   for ( ; psdSlice->us_n_slices > 0 ; --psdSlice->us_n_slices )
   {
      if ( psdSlice->s_dis < 0 )
      {
         i = psdSlice->us_small;
         psdSlice->s_dis += psdSlice->s_dis_sm;
      }
      else
      {
         i = psdSlice->us_small + 1;
         psdSlice->s_dis += psdSlice->s_dis_lg;
      }

      for ( ; i > 0 ; --i )
      {
         if(!ulDrawCount)               /* Is it time to flip the draw state */
         {
            bDraw = (BYTE)~bDraw;             /* Yes, Change it   */
            if (!ulStyleCount--)        /* Recycle pattern? */
            {
               ulStyleCount = *(pulStyle) - 1;
               pulStyleTmp = pulStyle + 1;
            }
            ulDrawCount = *pulStyleTmp++;   /* Advance the pattern */
         }
         ulDrawCount--;

         if (bDraw)
					(*RopProc)(pbFrame, wColor, usfPos);
         	
         if (lSlice_x < 0)
         {
            usfPos <<= 1;
            if ( usfPos == 0 )                 /* Check mask underflow and adjust */
            {
               usfPos = 0x01;                /* Reset the bit mask */
               pbFrame -= 1;                  /* move to next UBYTE */
            }
         }
         else
         {
            usfPos >>= lSlice_x;
            if ( usfPos == 0 )                 /* Check mask underflow and adjust */
            {
               usfPos = 0x80;                /* Reset the bit mask */
               pbFrame += 1;                  /* move to next UBYTE */
            }
         }
         pbFrame += lSlice_y;
      }

      if ( lSkip_x < 0 )                /* Check for negative movement */
      {
         usfPos <<= 1;
         if ( usfPos == 0 )
         {
            usfPos = 0x01;
            pbFrame -= 1;
         }
      }
      else
      {
         usfPos >>= lSkip_x;             /* Do positive case */
         if ( usfPos == 0 )
         {
            usfPos = 0x80;
            pbFrame += 1;
         }
      }
      pbFrame += lSkip_y;
   }

   // Do the last slice...

   for ( i = psdSlice->us_last ; i > 0 ; --i )
   {
      if(!ulDrawCount)                  /* Check to see if draw status needs */
      {                                 /* to be changed                     */
         bDraw = (BYTE)~bDraw;
         if (!ulStyleCount--)
         {                              /* update the style pointer */
            ulStyleCount = *(pulStyle) - 1;
            pulStyleTmp = pulStyle + 1;
         }
         ulDrawCount = *pulStyleTmp++;
      }
      ulDrawCount--;                    /* count down the style count */

      if (bDraw)
      	(*RopProc)(pbFrame, wColor, usfPos);

      if (lSlice_x < 0)
      {
         usfPos <<= 1;
         if ( usfPos == 0 )                 /* Check mask underflow and adjust */
         {
            usfPos = 0x01;                /* Reset the bit mask */
            pbFrame -= 1;                  /* move to next UBYTE */
         }
      }
      else
      {
         usfPos >>= lSlice_x;
         if ( usfPos == 0 )                 /* Check mask underflow and adjust */
         {
            usfPos = 0x80;                /* Reset the bit mask */
            pbFrame += 1;                  /* move to next UBYTE */
         }
      }
      pbFrame += lSlice_y;
   }

  // AdjustPhase(psdSlice);
	{
		SHORT    sDx, sDy;
		USHORT   usLength;

		sDx = psdSlice->us_x2 - psdSlice->us_x1;
		sDy = psdSlice->us_y2 - psdSlice->us_y1;
		if (sDx < 0) sDx = -sDx;
		if (sDy < 0) sDy = -sDy;

		usLength = usStyleSize[lpREState->ubPenStyle];
		if (usLength != 0)
		{
		  if (sDx < sDy)
		     lpREState->usPenPhase += (USHORT)sDy + 1;
		  else
		     lpREState->usPenPhase += (USHORT)sDx + 1;
		  lpREState->usPenPhase %= usLength;
		}
  }
}

//==============================================================================
void GetTotalPixels
(
   RP_SLICE_DESC FAR *psdSlice    /* Line Slice descriptor */
)
//
//  PURPOSE               Caculate how many pixel are going to be drawn.
//                        Put the result in us_y2 = us_y1 + Total Pixels
//                        This function is called only in JG_RP_LineSlice
//
// ASSUMPTIONS &          This code assumes that the slice descriptor and the
// ASSERTIONS             pointer to the style table are valid and correct.
//                        No checks are performed to validate this data.
//                        If an unsupported ROP is sent ROP(0) BLACKNESS is
//                        used.
//
// INTERNAL STRUCTURES    No complex internal data structure are used
//
//--------------------------------------------------------------------------*/
{
   USHORT usTotalPixels;
   SHORT  sDis;
   SHORT  i;

   usTotalPixels = psdSlice->us_first + psdSlice->us_last;
   sDis = psdSlice->s_dis;
   for (i = 0; i <  (SHORT)psdSlice->us_n_slices; i++) {
      if ( sDis < 0 )
      {
         usTotalPixels += psdSlice->us_small;
         sDis += psdSlice->s_dis_sm;
      }
      else
      {
         usTotalPixels += psdSlice->us_small + 1;
         sDis += psdSlice->s_dis_lg;
      }
   }
   psdSlice->us_y2 = psdSlice->us_y1 + usTotalPixels - 1;
   return;
}

//==============================================================================
BYTE StyleLineDraw
(
	 LPRESTATE lpREState,        // resource executor context
   RP_SLICE_DESC FAR *psdSlice,    /* Line Slice descriptor */
   UBYTE ubLineStyle, /* Line style pointer    */
   SHORT sRop,
   SHORT usColor
)

/*
//
//  PURPOSE               This function calls the correct function to draw
//                        a single pixel styled line using the correct
//                        ROP, Linestyle, and color (pen).
//
// ASSUMPTIONS &          This code assumes that the slice descriptor and the
// ASSERTIONS             pointer to the style table are valid and correct.
//                        No checks are performed to validate this data.
//                        If an unsupported ROP is sent ROP(0) BLACKNESS is
//                        used.
//
// INTERNAL STRUCTURES    No complex internal data structure are used
//
// UNRESOLVED ISSUES      Banding problems???
//
// RETURNS                0 - use fast line, 1 - don't draw, 2 - style drawn
//
//--------------------------------------------------------------------------*/
{
   BYTE bRetVal;    /* Return value for optimizing certain cases             */
   ULONG *pulStyle; /* Line style pointer    */
   BYTE bSolid;

   if (!ubLineStyle && ((psdSlice->s_dx_draw < 0) || (psdSlice->s_dx_skip <0)))
      {
        // JG_WARNING("Neg X with Solid Line");
        ubLineStyle = 6; /* for style line code to do it */
      }
   if (ubLineStyle == 5)
      bRetVal = 1;
   else
   {
      /* Note style 6 will not be considered solid to simplify things */
      bSolid = (BYTE)(ubLineStyle == 0);
      pulStyle = &ulWinStyles[ulStyleLookUp[ubLineStyle]];
      bRetVal = 2;

      if (usStyleSize[ubLineStyle])
         lpREState->usPenPhase %= usStyleSize[ubLineStyle];

      switch (sRop)
      {
         case  0x00 :                                        /* ROP BLACK */
            if(bSolid) bRetVal = 0;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY1);
            break;
         case  0x05 :                                             /* DPon */
            StyleLine (lpREState, psdSlice, pulStyle, usColor, DrawORDNR);
            break;
         case  0x0a :                                             /* DPna */
            if(!usColor) bRetVal = 1;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawANDDR);
            break;
         case  0x0f :                                             /* Pn */
            if(bSolid && !usColor)
               bRetVal = 0;
            else
               if (usColor)
               	StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY0);
               else
               	StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY1);
            break;
         case  0x50 :                                             /* PDna */
            StyleLine (lpREState, psdSlice, pulStyle, usColor, DrawANDNDR);
            break;
         case  0x55 :                                            /* Dn */
            usColor   = 0x0000;
            StyleLine (lpREState, psdSlice, pulStyle, usColor, DrawORNDR);
            break;
         case  0x5a :                                           /* DPx */
            if(!usColor) bRetVal = 1;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawXOR);
            break;
         case  0x5f :                                           /* DPan */
            if(bSolid && !usColor) bRetVal = 0;
            else StyleLine (lpREState, psdSlice, pulStyle, usColor, DrawANDDNR);
            break;
         case  0xa0 :                                           /* DPa */
            if(usColor) bRetVal = 1;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawANDDR);
            break;
         case  0xa5 :                                           /* PDxn */
            if(usColor) bRetVal = 1;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawXOR);
            break;
         case  0xaa :                                           /* D */
            bRetVal = 1;
            break;
         case  0xaf :                                           /* DPno */
            if (usColor) bRetVal = 1;
            else if(bSolid) bRetVal = 0;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawORDR);
            break;
         case  0xf0 :                                           /* P */
            if(bSolid && usColor) bRetVal = 0;
            else if (usColor)
            	StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY1);
            else
            	StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY0);
            break;
         case  0xf5 :                                           /* PDno */
            if(bSolid && usColor) bRetVal = 0;
            else StyleLine (lpREState, psdSlice, pulStyle, usColor, DrawORNDR);
            break;
         case  0xfa :                                           /* PDo */
            if (!usColor) bRetVal = 1;
            else if(bSolid) bRetVal = 0;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawORDR);
            break;
         case  0xFF :                                           /* WHITENESS */
            StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY0);
            break;
         default:                                               /* BLACKNESS */
            if(bSolid) bRetVal = 0;
            else StyleLine (lpREState, psdSlice, pulStyle, 0, DrawCOPY1);
      }
   }
   return (bRetVal);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\viewrend\dcxview.cpp ===
/*==============================================================================
This module provides DCX rendering support for viewing faxes.

19-Jan-94   RajeevD    Integrated into IFAX viewer.
==============================================================================*/
#ifdef VIEWDCX

#include <memory.h>
#include "viewrend.hpp"
#include "dcxcodec.h"

//==============================================================================
DCXVIEW::DCXVIEW (DWORD nType)
{
	nTypeOut = nType;
	lpCodec = NULL;
	bufIn.wLengthBuf = 8000;
	bufIn.lpbBegBuf = (LPBYTE) GlobalAllocPtr (0, bufIn.wLengthBuf);
}

//==============================================================================
DCXVIEW::~DCXVIEW ()
{
	if (lpCodec)
		GlobalFreePtr (lpCodec);
	if (bufIn.lpbBegBuf)
		GlobalFreePtr (bufIn.lpbBegBuf);
}
		
//==============================================================================
BOOL DCXVIEW::Init (LPVOID lpFilePath, LPVIEWINFO lpvi, LPWORD lpwBandSize)
{
	DWORD dwOffset;
	PCX_HDR pcx;
	UINT cbCodec;

	if (!this || !bufIn.lpbBegBuf)
		return_error (("VIEWREND could not allocate context!\r\n"));

	if (!Open (lpFilePath, 0))
		return_error (("VIEWREND could not open spool file!\r\n"));

	if (!Seek (sizeof(DWORD), SEEK_BEG))
		return_error (("VIEWREND could not seek to first page offset!\r\n"));

	if (!Read (&dwOffset, sizeof(dwOffset)))
		return_error (("VIEWREND could not read first page offset\r\n"));
		
	if (!Seek (dwOffset, SEEK_BEG))
		return_error (("VIEWREND could not seek to first page!\r\n"));

	if (!Read (&pcx, sizeof(pcx)))
		return_error (("VIEWREND could read header of first page!\r\n"));


	// Fill VIEWINFO.
	lpvi->cPage = 0;
	while (SetPage(lpvi->cPage))
		lpvi->cPage++;
	switch (pcx.xRes)
	{
		case 640:
			// Assume square aspect ratio 
			lpvi->xRes = 200;
			lpvi->yRes = 200;
			break;

		default:
			lpvi->xRes = pcx.xRes;
			lpvi->yRes = pcx.yRes;
			break;
	}		
	lpvi->yMax = pcx.yMax - pcx.yMin;
	
	// Set up codec.
	fcp.nTypeIn  = DCX_DATA;
	fcp.nTypeOut = HRAW_DATA;
	fcp.cbLine = (pcx.xMax - pcx.xMin + 1) / 8;
	
	// Query codec.
	cbCodec = DcxCodecInit (NULL, &fcp);
	if (!cbCodec)
		return_error (("VIEWREND could not init codec!\r\n"));

	// Initialize codec.
	lpCodec = GlobalAllocPtr (0, cbCodec);
	if (!lpCodec)
		return_error (("VIEWREND could not allocate codec!\r\n"));

	cbBand = *lpwBandSize;
	return SetPage (0);
}

//==============================================================================
BOOL DCXVIEW::SetPage (UINT iPage)
{
	DWORD dwOffset[2];
	DEBUGCHK (iPage < 1024);

  // Get offset of current and next page.
	Seek (sizeof(DWORD) * (iPage + 1), SEEK_BEG);
	Read (dwOffset, sizeof(dwOffset));
	if (!dwOffset[0])
		return FALSE;
	if (!dwOffset[1])
	{	
		Seek (0, SEEK_END);
		dwOffset[1] = Tell();
	}

  // Seek to page.
	dwOffset[0] += sizeof(PCX_HDR);
	if (!Seek (dwOffset[0], SEEK_BEG))
		return_error (("VIEWREND could not seek to page %d!",iPage));
	cbPage = dwOffset[1] - dwOffset[0];

  // Initialize codec.
	DcxCodecInit (lpCodec, &fcp);
	bufIn.Reset();

	fEndPage = FALSE;
	return TRUE;
}
	
//==============================================================================
BOOL DCXVIEW::GetBand (LPBITMAP lpbmBand)
{
	FC_STATUS fcs;
	BUFFER bufOut;
	
	DEBUGCHK (lpbmBand && lpbmBand->bmBits);

	// Fill descriptor.
	lpbmBand->bmType = 0;
	lpbmBand->bmWidth = 8 * fcp.cbLine;
	lpbmBand->bmWidthBytes = fcp.cbLine;
	lpbmBand->bmPlanes = 1;
	lpbmBand->bmBitsPixel = 1;

	// Trap end of page.
	if (fEndPage)
	{
		lpbmBand->bmHeight = 0;
		return TRUE;
	}
	
	// Set up output buffer.
	bufOut.lpbBegBuf  = (LPBYTE) lpbmBand->bmBits;
	bufOut.wLengthBuf = cbBand;
	bufOut.Reset();
	bufOut.dwMetaData = LRAW_DATA;
	
	do
	{
	  // Fetch input buffer?
		if (!bufIn.wLengthData)
		{
			// Reset buffer.
			bufIn.lpbBegData = bufIn.lpbBegBuf;
			if ((DWORD) bufIn.wLengthBuf < cbPage)
				bufIn.wLengthData = bufIn.wLengthBuf;
			else
				bufIn.wLengthData = (WORD) cbPage;
				
      // Read DCX data.
			if (!Read (bufIn.lpbBegData, bufIn.wLengthData))
				return_error (("VIEWREND could not read DCX buffer!\r\n"));
			cbPage -= bufIn.wLengthData;
		}

	  // Decode the DCX data.
		fcs = DcxCodecConvert (lpCodec, &bufIn, &bufOut);

		// Check for end of page.
		if (!cbPage)
		{
			fEndPage = TRUE;
			break;
		}
	}
		while (fcs == FC_INPUT_EMPTY);

  // Bit reverse if needed.
	if (nTypeOut == LRAW_DATA)
		BitReverseBuf (&bufOut);

  // Calculate output height.
	lpbmBand->bmHeight = bufOut.wLengthData / fcp.cbLine;
	return TRUE;
}

#endif // VIEWDCX
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\viewrend\rbaview.cpp ===
/*==============================================================================
This module provides RBA rendering support for viewing faxes.

03-Mar-94   RajeevD    Created.
==============================================================================*/
#ifdef VIEWRBA

#include <memory.h>
#include "viewrend.hpp"
#include "resexec.h"


#define COMMON_SIZE 6

//==============================================================================
RBAVIEW::RBAVIEW (DWORD nType)
{
	_fmemset ((LPBYTE) this + sizeof(LPVOID), 0, sizeof(RBAVIEW) - sizeof(LPVOID));
	nTypeOut = nType;
}

//==============================================================================
RBAVIEW::~RBAVIEW ()
{
	if (hHRE)
		uiHREClose (hHRE);
		
	for (UINT iRes = 0; iRes < 256; iRes++)
		if (ResDir[iRes])
			GlobalFreePtr (ResDir[iRes]);

	if (lpCodec)
		GlobalFreePtr (lpCodec);

	if (bufIn.lpbBegBuf)
		GlobalFreePtr (bufIn.lpbBegBuf);
}
		
//==============================================================================
BOOL RBAVIEW::Init (LPVOID lpFilePath, LPVIEWINFO lpvi, LPWORD lpwBandSize)
{
	ENDJOB EndJob;
	
	if (!Open (lpFilePath, 0))
		return_error (("VIEWREND could not reopen spool file!\r\n"));

	if (!Read((LPBYTE) &BegJob, sizeof(BegJob)))
		return_error (("VIEWREND could not read spool header!\r\n"));

	dwOffset[0] = Tell();

	DEBUGCHK (lpwBandSize);
	*lpwBandSize = (WORD) BegJob.xBand/8 * (WORD) BegJob.yBand + OUTBUF_SLACK;

  if (BegJob.cResDir)
  {
		hHRE = hHREOpen (NULL, (UINT) BegJob.xBand/8, (UINT) BegJob.cResDir);
		if (!hHRE)
			return_error (("VIEWREND could not initialize resource executor!\r\n"));
	}
	
	if (1)
	{
		FC_PARAM fcp;
		UINT cbCodec;
		
		// Query for codec size.
		fcp.nTypeIn  = MMR_DATA;
		fcp.nTypeOut = LRAW_DATA;
		fcp.cbLine   = (UINT) BegJob.xBand / 8;
		cbCodec = FaxCodecInit (NULL, &fcp);
		DEBUGCHK (cbCodec);

    // Allocate codec context.
		lpCodec = GlobalAllocPtr (0, cbCodec);
		if (!lpCodec)
			return_error (("VIEWREND could allocate codec context!\r\n"));
		FaxCodecInit (lpCodec, &fcp);

		bufIn.wLengthBuf = 2000;
		bufIn.lpbBegBuf  = (LPBYTE) GlobalAllocPtr (0, bufIn.wLengthBuf);
		if (!bufIn.lpbBegBuf)
			return_error (("VIEWREND could not allocate input buffer!\r\n"));
	}

	// Fill VIEWINFO.
	lpvi->xRes = BegJob.xRes;
	lpvi->yRes = BegJob.yRes;

	if
	(    Seek (- (long) sizeof(ENDJOB), SEEK_END)
		&& Read (&EndJob, sizeof(ENDJOB))
		&& EndJob.dwID == ID_ENDJOB
	)
	{
		lpvi->cPage = EndJob.cPage;
		lpvi->yMax  = EndJob.yMax;
	}
	else
	{
		lpvi->cPage = 0;
		while (SetPage (lpvi->cPage))
			lpvi->cPage++;
		lpvi->yMax = 0;
	}
			 
	return SetPage (0);
}

//==============================================================================
BOOL RBAVIEW::SetPage (UINT iPage)
{
	if (iPage < iMaxPage)
	{
		Seek (dwOffset[iPage], STREAM_SEEK_SET); // BKD: changed to STREAM_SEEK_SET
		return TRUE;
	}

  Seek (dwOffset[iMaxPage], STREAM_SEEK_SET); // BKD: changed to STREAM_SEEK_SET

	while (1)
	{
		RESHDR Header;
		FRAME Frame;
		
		if (!Read ((LPBYTE) &Header, sizeof(Header)))
			return_error (("VIEWREND could not read RBA resource header!"));

		switch (Header.wClass)
		{
			case ID_GLYPH:			
			case ID_BRUSH:
			{
				UINT cbRaw;

				// Allocate mmeory from cache.
				Frame.lpData = (LPBYTE) GlobalAllocPtr (0, Header.cbRest);
				if (!Frame.lpData)
					return_error (("VIEWREND could not allocate memory!\r\n"));

				// Read resource from stream.
				if (!Read (Frame.lpData + COMMON_SIZE, Header.cbRest - COMMON_SIZE))
					return_error (("VIEWREND could not read resource!\r\n"));

				// Trap chaingon compressed glyph sets.
				cbRaw = HIWORD (Header.dwID);
				if (cbRaw)
				{
					LPVOID lpRaw;
					
					DEBUGCHK (Header.wClass == ID_GLYPH);
					if (!(lpRaw = GlobalAllocPtr (0, cbRaw)))
						return_error (("VIEWREND could not allocate decompression buffer!\r\n"));
					UnpackGlyphSet (Frame.lpData, lpRaw);
					GlobalFreePtr (Frame.lpData);

					Header.cbRest = (USHORT)cbRaw;
					Header.dwID   = LOWORD (Header.dwID);

					Frame.lpData = (LPBYTE) lpRaw;
				}

				// Past common header.
				_fmemcpy (Frame.lpData, &Header.dwID, COMMON_SIZE);
				Frame.wSize = Header.cbRest;

        // Add resource to directory.
				uiHREWrite (hHRE, &Frame, 1);
			  ResDir[Header.dwID] = Frame.lpData;
			  break;
			}
			  
			case ID_CONTROL:
			
				if (Header.dwID == ID_ENDPAGE)
				{
					iMaxPage++;
					dwOffset [iMaxPage] = Tell ();
					if (iPage < iMaxPage)
					{
					    // BKD: changed to STREAM_SEEK_SET
						Seek (dwOffset[iPage], STREAM_SEEK_SET); 
						return TRUE;
					}
				}

      // Yes, fall through to default case!
      
			default:

				// Skip everything else.
				if (!Seek (Header.cbRest - COMMON_SIZE, SEEK_CUR))
					return_error (("VIEWREND could not skip unknown RBA resource"));

		} // switch (Header.wClass)

	} // while (1)

}
	
//==============================================================================
BOOL RBAVIEW::GetBand (LPBITMAP lpbmBand)
{
	DEBUGCHK (lpbmBand && lpbmBand->bmBits);
	
	lpbmBand->bmType = 0;
	lpbmBand->bmWidth = (WORD) BegJob.xBand;
	lpbmBand->bmWidthBytes = lpbmBand->bmWidth / 8;
	lpbmBand->bmPlanes = 1;
	lpbmBand->bmBitsPixel = 1;

	while (1)
	{
		RESHDR Header;

		if (!Read ((LPBYTE) &Header, sizeof(Header)))
			return FALSE;

  	switch (Header.wClass)
  	{
  		case ID_RPL:
  			return ExecuteRPL  (lpbmBand, &Header);

  		case ID_BAND:
  		  return ExecuteBand (lpbmBand, &Header);
	  
  		case ID_CONTROL:

				// Trap page breaks.
  			if (Header.dwID == ID_ENDPAGE)
  			{
					Seek (-8, SEEK_CUR);
					lpbmBand->bmHeight = 0;
					return TRUE;
  			}

  			// Yes, fall through to default case!

  		default:

  			// Skip everything else.
				if (!Seek (Header.cbRest - COMMON_SIZE, SEEK_CUR))
					return FALSE;
  	} // switch (Header.wClass)
		
	} // while (1)
	
}

//==============================================================================
BOOL RBAVIEW::ExecuteRPL (LPBITMAP lpbmBand, LPRESHDR lpHeader)
{
 	FRAME Frame;

  // Clear band.
	lpbmBand->bmHeight = (WORD) BegJob.yBand;
	_fmemset (lpbmBand->bmBits, 0, lpbmBand->bmHeight * lpbmBand->bmWidthBytes);

  // Trap blank bands.
	if (lpHeader->cbRest == COMMON_SIZE)
		return TRUE;

  // Allocate RPL.
	Frame.lpData = (LPBYTE) GlobalAllocPtr (0, lpHeader->cbRest);
	if (!Frame.lpData)
		return_error (("VIEWREND could not allocate RPL!\r\n"));

  // Load RPL.
	Frame.wSize = lpHeader->cbRest;
	_fmemcpy (Frame.lpData, &lpHeader->dwID, COMMON_SIZE);
	Read (Frame.lpData + COMMON_SIZE, Frame.wSize - COMMON_SIZE);

  // Execute RPL.
	uiHREWrite (hHRE, &Frame, 1);
	uiHREExecute (hHRE, lpbmBand, NULL);

	// Free RPL.
	GlobalFreePtr (Frame.lpData);
	return TRUE;
}

//==============================================================================
BOOL RBAVIEW::ExecuteBand (LPBITMAP lpbmBand, LPRESHDR lpHeader)
{
	BMPHDR bmh;
	UINT cbIn;
	FC_PARAM fcp;
	BUFFER bufOut;

	// Read bitmap header.
	if (!Read ((LPBYTE) &bmh, sizeof(bmh)))
		return FALSE;
	lpbmBand->bmHeight = bmh.wHeight;
	cbIn = lpHeader->cbRest - COMMON_SIZE - sizeof(bmh);
	
  // Trap uncompressed bands.
	if (!bmh.bComp)
	{
		if (!Read (lpbmBand->bmBits, cbIn))
			return FALSE;
		if (nTypeOut == LRAW_DATA)
		{
			BUFFER bufOut2;
			bufOut2.lpbBegData  = (LPBYTE) lpbmBand->bmBits;
			bufOut2.wLengthData = (USHORT)cbIn;
			bufOut2.dwMetaData  = HRAW_DATA;
			BitReverseBuf (&bufOut2);
		}

		return TRUE;
	}
		
	// Initialize codec.
	fcp.nTypeIn  = bmh.bComp >> 2;
	fcp.nTypeOut = LRAW_DATA;
	fcp.cbLine   = (WORD) BegJob.xBand / 8;
	FaxCodecInit (lpCodec, &fcp);

	// Initialize input.
	bufIn.dwMetaData = fcp.nTypeIn;

	// Initialize output.
	bufOut.lpbBegBuf   = (LPBYTE) lpbmBand->bmBits;
	bufOut.wLengthBuf  = fcp.cbLine * bmh.wHeight;
	bufOut.lpbBegData  = bufOut.lpbBegBuf;
	bufOut.wLengthData = 0;
	bufOut.dwMetaData  = fcp.nTypeOut;

  // Convert.
	while (cbIn)
	{
		bufIn.lpbBegData = bufIn.lpbBegBuf;
		bufIn.wLengthData = min (cbIn, bufIn.wLengthBuf);
				
		if (!Read (bufIn.lpbBegData, bufIn.wLengthData))
			return FALSE;
		cbIn -= bufIn.wLengthData;

	 	if (FaxCodecConvert (lpCodec, &bufIn, &bufOut) == FC_DECODE_ERR)
	 		return_error (("VIEWREND MMR decode error!\r\n"));
	
	} // while (cbIn)

	if (nTypeOut == HRAW_DATA)
		BitReverseBuf (&bufOut);

	return TRUE;
}

#endif // VIEWRBA
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\viewrend\mmrview.cpp ===
/*==============================================================================
This module provides MMR rendering support for viewing faxes.

19-Jan-94   RajeevD    Integrated into IFAX viewer.
==============================================================================*/
#ifdef VIEWMMR

#include <memory.h>
#include "viewrend.hpp"

//==============================================================================
MMRVIEW::MMRVIEW (DWORD nType)
{
	_fmemset ((LPBYTE) this + sizeof(LPVOID), 0, sizeof(MMRVIEW) - sizeof(LPVOID));

	DEBUGCHK (lpSpool == NULL);
	DEBUGCHK (lpCodec == NULL);
	DEBUGCHK (lpbufIn == NULL);
	nTypeOut = nType;
}

//==============================================================================
MMRVIEW::~MMRVIEW ()
{
	if (lpSpool) SpoolReadClose (lpSpool);
	if (lpCodec) GlobalFreePtr (lpCodec);
	if (lpbufIn) SpoolFreeBuf (lpbufIn);
}
		
//==============================================================================
BOOL MMRVIEW::Init (LPVOID lpFilePath, LPVIEWINFO lpvi, LPWORD lpwBandSize)
{
	UINT cbCodec;
	
	if (!this)
		return_error (("VIEWREND could not allocate context!\r\n"));

	// Open spool file.
	lpSpool = SpoolReadOpen (lpFilePath, &sh);
	if (!lpSpool)
		return_error (("VIEWREND could not open spool file!\r\n"));

	// Fill VIEWINFO.
	lpvi->cPage = SpoolReadCountPages (lpSpool);
	lpvi->xRes = sh.xRes;
	lpvi->yRes = sh.yRes;
	lpvi->yMax = 0;

	// Set band size.
	DEBUGCHK (lpwBandSize);
	cbBand = *lpwBandSize;
  if (cbBand < 2 * sh.cbLine)
 	{
		cbBand = 2 * sh.cbLine;
		*lpwBandSize = cbBand;
	}
	
	// Set up codec.
	fcp.nTypeIn  = MMR_DATA;
	fcp.nTypeOut = LRAW_DATA;
	fcp.cbLine = sh.cbLine;
	DEBUGCHK (fcp.nKFactor == 0);

	// Query codec.
	cbCodec = FaxCodecInit (NULL, &fcp);
	if (!cbCodec)
		return_error (("VIEWREND could not init codec!\r\n"));

	// Initialize codec.
	lpCodec = GlobalAllocPtr (0, cbCodec);
	if (!lpCodec)
		return_error (("VIEWREND could not allocate codec!\r\n"));

	return SetPage (0);
}

//==============================================================================
BOOL MMRVIEW::SetPage (UINT iPage)
{
	if (!SpoolReadSetPage (lpSpool, iPage))
		return FALSE;
	fEOP = FALSE;
	if (lpbufIn)
	{
		SpoolFreeBuf (lpbufIn);
		lpbufIn = NULL;
	}
	FaxCodecInit (lpCodec, &fcp);
	return TRUE;
}
	
//==============================================================================
BOOL MMRVIEW::GetBand (LPBITMAP lpbmBand)
{
	DEBUGCHK (lpbmBand && lpbmBand->bmBits);

	// Fill descriptor.
	lpbmBand->bmType = 0;
	lpbmBand->bmWidth = 8 * fcp.cbLine;
	lpbmBand->bmWidthBytes = fcp.cbLine;
	lpbmBand->bmPlanes = 1;
	lpbmBand->bmBitsPixel = 1;

	// Trap end of page.
	if (fEOP)
	{
		lpbmBand->bmHeight = 0;
		return TRUE;
	}
	
	// Set up output buffer.
	bufOut.lpbBegBuf  = (LPBYTE) lpbmBand->bmBits;
	bufOut.wLengthBuf = cbBand;
	bufOut.Reset();
	bufOut.dwMetaData = LRAW_DATA;
	
	while (1)
	{
		// Fetch input buffer?
		if (!lpbufIn)
		{
			if (!(lpbufIn = SpoolReadGetBuf (lpSpool)))
				return_error (("VIEWREND could not fetch input buffer.\r\n"));

			switch (lpbufIn->dwMetaData)
			{
				case END_OF_PAGE:
				case END_OF_JOB:
				  // metabuffers will be freed in SetPage or destructor.
					fEOP = TRUE;
					goto done;
			
				case MMR_DATA:
					break;

				default:
					continue;
			}
		}

		switch (FaxCodecConvert (lpCodec, lpbufIn, &bufOut))
		{
			case FC_DECODE_ERR:	
				return_error (("VIEWREND fatal MMR decode error!\r\n"));

			case FC_INPUT_EMPTY:
				SpoolFreeBuf (lpbufIn);
				lpbufIn = NULL;
				continue;			

			case FC_OUTPUT_FULL:
				goto done;
		}

	} // while (1)

done:

	if (nTypeOut == HRAW_DATA)	
		BitReverseBuf (&bufOut);
	lpbmBand->bmHeight = bufOut.wLengthData / fcp.cbLine;
	return TRUE;
}

#endif // VIEWMMR
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\viewrend\viewrend.cpp ===
/*==============================================================================
This module provides MMR rendering support for viewing faxes.

19-Jan-94   RajeevD    Integrated into IFAX viewer.
==============================================================================*/
#include <ifaxos.h>
#include <viewrend.h>
#include <dcxcodec.h>
#include "viewrend.hpp"

#ifdef DEBUG
DBGPARAM dpCurSettings = {"VIEWREND"};
#endif

// file signatures
#define MMR_SIG 0x53465542 // "BUFS"
#define RBA_SIG 0x53505741 // "AWPS"

//==============================================================================
// C Export Wrappers
//==============================================================================

#ifndef WIN32

EXPORT_DLL BOOL WINAPI LibMain
	(HANDLE hInst, WORD wSeg, WORD wHeap, LPSTR lpszCmd)
{ return 1; }

extern "C" {int WINAPI WEP (int nParam);}
#pragma alloc_text(INIT_TEXT,WEP)
int WINAPI WEP (int nParam)
{ return 1; }

#endif

//==============================================================================
LPVOID
WINAPI
ViewerOpen
(
	LPVOID     lpFile,      // IFAX key or Win3.1 path or OLE2 IStream
	DWORD      nType,       // data type: HRAW_DATA or LRAW_DATA
	LPWORD     lpwResoln,   // output pointer to x, y dpi array
	LPWORD     lpwBandSize, // input/output pointer to output band size
	LPVIEWINFO lpViewInfo   // output pointer to VIEWINFO struct
)
{
	GENFILE gf;
	DWORD dwSig;
	LPVIEWREND lpvr;
	VIEWINFO ViewInfo;
	
 	DEBUGMSG (1, ("VIEWREND ViewerOpen entry\r\n"));
 	 
  // Read DWORD signature.
  if (!(gf.Open (lpFile, 0)))
  	return_error (("VIEWREND could not open spool file!\r\n"));

#ifdef VIEWDCX
	if (!gf.Read (&dwSig, sizeof(dwSig)))
  	return_error (("VIEWREND could not read signature!\r\n"));
#else
	dwSig = 0;  	
#endif

	if (dwSig != DCX_SIG)
	{
   	if (!gf.Seek (2, 0) || !gf.Read (&dwSig, sizeof(dwSig)))
  		return_error (("VIEWREND could not read signature!\r\n"));
  }
	
	// Determine file type.
  switch (dwSig)
  {

#ifdef VIEWMMR
  	case MMR_SIG:
  	  lpvr = new MMRVIEW (nType);
 		  break;
#endif

#ifdef VIEWDCX
		case DCX_SIG:
			lpvr = new DCXVIEW (nType);
			break;
#endif		

#ifdef VIEWRBA
 		case RBA_SIG:
	 	case ID_BEGJOB:
			lpvr = new RBAVIEW (nType);
			break;
#endif
			
  	default:
  		return_error (("VIEWREND could not recognize signature!\r\n"));
  }

	if (!lpViewInfo)
		lpViewInfo = &ViewInfo;
	
	// Initialize context.
	if (!lpvr->Init (lpFile, lpViewInfo, lpwBandSize))
		{ delete lpvr; lpvr = NULL;}

	if (lpwResoln)
	{
		lpwResoln[0] = lpViewInfo->xRes;
		lpwResoln[1] = lpViewInfo->yRes;
	}
	
	return lpvr;
}

//==============================================================================
BOOL WINAPI ViewerSetPage (LPVOID lpContext, UINT iPage)
{
	return ((LPVIEWREND) lpContext)->SetPage (iPage);
}

//==============================================================================
BOOL WINAPI ViewerGetBand (LPVOID lpContext, LPBITMAP lpbmBand)
{
	return ((LPVIEWREND) lpContext)->GetBand (lpbmBand);
}

//==============================================================================
BOOL WINAPI ViewerClose (LPVOID lpContext)
{
	delete (LPVIEWREND) lpContext;
	return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\buffers.h ===
/*==============================================================================
This file includes the BUFFER typedef and standard meta-data values.

23-Feb-93    RajeevD    Moved from ifaxos.h
17-Jul-93    KGallo     Added STORED_BUF_DATA metadata type for buffers containing 
                        the stored info for another buffer.
28-Sep-93    ArulM      Added RES_ ENCODE_ WIDTH_ and LENGTH_ typedefs
==============================================================================*/
#ifndef _INC_BUFFERS
#define _INC_BUFFERS

//----------------------------- BUFFERS -------------------------
/****
	@doc    EXTERNAL        IFAXOS    DATATYPES

	@types  BUFFER  |   The Buffer structure defines the buffer header
			structures which processes manipulate.

	@field  WORD	|   fReadOnly   | Specifies whether the buffer
			is readonly or not. It is the applications responsibility to
			check this flag and not violate it. <f IFBufMakeWritable> should
			be used if a process needs to write on a buffer which is
			marked readonly. This field should not be modified by the
			process itself.

	@field  LPBYTE  |   lpbBegBuf   | A far ptr pointing to the physical
			start of the buffer. This ptr has meaning only in the calling
			process's address space and should not be stored for any
			reason. It should not be modified either.

	@field  WORD    |   wLengthBuf  | Physical length of the buffer. Should
			not be modified by the process. Should be used in conjunction
			with <e BUFFER.lpbBegBuf> to know the physical boundaries of the buffer.

	@field  DWORD    |   dwMetaData   | Indicates the kind of data stored in
			the buffer. See <t STD_DATA_TYPES> for all the possible values
	    of this field.

	@field  LPBYTE  |   lpbBegData  | Far ptr to the start of valid data in the
			buffer. The process is responsible for maintaining the integrity
			of this as it consumes or produces data in the buffer. The ptr should
			not be passed to any other process as it will not be valid. At buffer
			allocation time this field is initialized to point to the physical
			beginning of the buffer.

	@field  LPBYTE  |   lpbCurPtr   | One of the fields of a union containing
	    lpbfNext and dwTemp as its other members.
	    A general purpose far ptr which can be
			used to mark an interesting place in the buffer. Should be used as
			a temporary variable while processing the buffer. Should not be directly
	    passed to any other process. Initialized
			to point to the beginning of the buffer at allocation time.
	    Remember that this is a UNION !!

	@field  LPBUFFER  |   lpbfNext | One of the fields of a union containing
	    lpbCurPtr and dwTemp as its other members. This should be used
	    when a module wants to internally link a list of buffers together.
	    Remember that this is a UNION !!

	@field  DWORD |   dwTemp | One of the fields of a union containing
	    lpbfNext and lpbCurPtr as its other members. This should be used when
	    the module wants to store some random information in the header.
	    Remember that this is a UNION !!

	@field  WORD    |   wLengthData | Gives the length of valid contiguous data
			present in the buffer starting at <e BUFFER.lpbBegData>. The process is
			responsible for maintaining the integrity of this. Initialized to
			zero at allocation time.

	@comm   There are other reserved fields in the structure which have not been
			mentioned here.

	@tagname _BUFFER

	@xref   <f IFBufAlloc>
****/

typedef struct _BUFFER
{       
	// Private portion
	struct _BUFFERDATA  FAR *lpbdBufData;
	struct _BUFFER FAR *lpbfNextBuf;
    WORD    wResFlags;

	// Read Only portion
	WORD	fReadOnly;      // Is the buffer readonly ??
	LPBYTE  lpbBegBuf;      // Physical start of buffer
	WORD    wLengthBuf;     // Length of buffer

	// Read write public portion
	WORD    wLengthData;    // length of valid data
	DWORD   dwMetaData;      // Used to store metadata information
	LPBYTE  lpbBegData;     // Ptr to start of data
	union
	{
		struct _BUFFER FAR*     lpbfNext;       // for linking buffers
		LPBYTE  lpbCurPtr;      // for local current position use
		DWORD   dwTemp;    // for general use
	};

#ifdef VALIDATE
	// Dont touch this !!
	WORD    sentinel;       // debug sentinel
#endif

// C++ Extensions
#ifdef __cplusplus

	LPBYTE EndBuf  (void) FAR {return lpbBegBuf  + wLengthBuf; }
	LPBYTE EndData (void) FAR {return lpbBegData + wLengthData;}
	void   Reset   (void) FAR {lpbBegData = lpbBegBuf; wLengthData = 0;}
  
#endif // __cplusplus

} BUFFER, FAR *LPBUFFER , FAR * FAR * LPLPBUFFER ;

/********
    @doc    EXTERNAL IFAXOS DATATYPES SRVRDLL OEMNSF

    @type   DWORD | STD_DATA_TYPES | Standard data types used for
	    specifying the format of data in the system.

    @emem   MH_DATA     | Modified Huffman (T.4 1-dimensional).
    @emem   MR_DATA     | Modified READ (T.4 2-dimensional).
    @emem   MMR_DATA| Modified Modified READ (T.6).
    @emem   LRAW_DATA | Raw bitmap data, Least Significant Bit to the left.
    @emem   HRAW_DATA | Raw Bitmap data, Most Significant Bit to the left.
    @emem   DCX_DATA | Industry standard DCX specification (collection of PCX pages).
    @emem   ENCRYPTED_DATA | Data encrypted - original format unspecified.
    @emem   SIGNED_DATA | Data along with a digital signature. 
    @emem   BINFILE_DATA | Arbitrary binary data.
    @emem   STORED_BUF_DATA | Contains a BUFFER header & data.
    @emem   DCP_TEMPLATE_DATA | Digital Cover Page template data.
    @emem   DCP_DATA | Digital Cover Page processed template data.
    @emem   SPOOL_DATA | Spool data type - same as MMR for now.
    @emem   PRINTMODE_DATA | Printer Mode structure.
    @emem   ASCII_DATA | Ascii text.
    @emem   OLE_DATA   | Ole object.
    @emem   OLE_PICTURE | Ole Rendering Data.
    @emem   END_OF_PAGE | End of page marker.
    @emem   END_OF_JOB  | End of job marker.
    @emem   CUSTOM_METADATA_TYPE  | Beyond this value custom data types can be
	    defined.

    @comm   This should be used to specify data type of any data stream in the
	    system - from BUFFERS to Linearized Messages.  All data types which 
	    need to be used in bit fields (i.e. the Format Resolution) must have
	    a value which is a power of 2.  Other data types which do not need to used
	    in a bit field context may be assigned the other values.
********/

#define MH_DATA           0x00000001L
#define MR_DATA           0x00000002L
#define MMR_DATA          0x00000004L
#define LRAW_DATA         0x00000008L
#define HRAW_DATA         0x00000010L
#define DCX_DATA          0x00000020L
#define ENCRYPTED_DATA    0x00000040L
#define BINFILE_DATA      0x00000080L
#define DCP_TEMPLATE_DATA 0x00000100L
#define ASCII_DATA        0x00000200L
#define RAMBO_DATA        0x00000400L
#define LINEARIZED_DATA   0x00000800L
#define DCP_DATA          0x00001000L
#define PCL_DATA          0x00002000L
#define ADDR_BOOK_DATA    0x00004000L
#define OLE_BIT_DATA      0x00008000L    // So we can use fmtres on OLE_DATA
#define OLE_BIT_PICTURE   0x00010000L    // So we can use fntres on OLE_BIT_PICTURE

// Make spool data be MMR
#define SPOOL_DATA        MMR_DATA

// Standard Non-Bit Valued MetaData values
#define NULL_DATA         0x00000000L
#define SIGNED_DATA       0x00000003L
#define STORED_BUF_DATA   0x00000005L
#define PRINTMODE_DATA    0x00000006L
#define OLE_DATA          0x0000001EL    // DONT CHANGE THIS VALUE - Needs to be Snowball Compatible
#define OLE_PICTURE       0x0000001FL    // DONT CHANGE THIS VALUE - Needs to be Snowball Compatible
#define END_OF_PAGE       0x00000021L
#define END_OF_JOB        0x00000022L
#define PARADEV_DATA      0x00000031L    // parallel device data
#define PARADEV_EOF       0x00000032L    // parallel device end of file


#define ISVIEWATT(e)  (((e) == MMR_DATA) || ((e) == RAMBO_DATA))
#define ISOLEATT(e)   (((e) == OLE_DATA) || ((e) == OLE_PICTURE))
#define ISPAGEDATT(e) (((e)==MMR_DATA) || ((e)==MR_DATA) || \
                        ((e)==MH_DATA)|| ((e)==LRAW_DATA)|| ((e)==HRAW_DATA))


// Allow for 24 standard bit valued MetaData values
#define CUSTOM_METADATA_TYPE  0x00800001L

/********
    @doc    EXTERNAL IFAXOS DATATYPES SRVRDLL OEMNSF

    @type   DWORD | STD_RESOLUTIONS | Standard Page Resolutions

    @emem   AWRES_UNUSED      | Resolution is unused or irrelevant
    @emem   AWRES_UNKNOWN     | Resolution is unknown
    @emem   AWRES_CUSTOM      | Custom resolution
    @emem   AWRES_mm080_038   | 8 lines/mm x 3.85 lines/mm
    @emem   AWRES_mm080_077   | 8 lines/mm x 7.7 lines/mm
    @emem   AWRES_mm080_154   | 8 lines/mm x 15.4 lines/mm
    @emem   AWRES_mm160_154   | 16 lines/mm x 15.4 lines/mm
    @emem   AWRES_200_100     | 200 dpi x 100 dpi
    @emem   AWRES_200_200     | 200 dpi x 200 dpi
    @emem   AWRES_200_400     | 200 dpi x 400 dpi
    @emem   AWRES_300_300     | 300 dpi x 300 dpi
    @emem   AWRES_400_400     | 400 dpi x 400 dpi
********/   

#define AWRES_UNUSED            0xFFFFFFFFL
#define	AWRES_UNKNOWN		0x00000000L
#define AWRES_CUSTOM            0x00000001L
#define AWRES_mm080_038         0x00000002L
#define AWRES_mm080_077         0x00000004L
#define AWRES_mm080_154         0x00000008L
#define AWRES_mm160_154         0x00000010L
#define AWRES_200_100           0x00000020L
#define AWRES_200_200           0x00000040L
#define AWRES_200_400           0x00000080L
#define AWRES_300_300           0x00000100L
#define AWRES_400_400           0x00000200L
#define AWRES_600_600           0x00000400L
#define AWRES_600_300           0x00000800L

// Keep old names for a while
#define AWRES_NORMAL            AWRES_mm080_038
#define AWRES_FINE              AWRES_mm080_077
#define AWRES_SUPER             AWRES_mm080_154
#define AWRES_SUPER_SUPER       AWRES_mm160_154
#define AWRES_SUPER_FINE        AWRES_SUPER_SUPER

/********
    @doc    EXTERNAL    IFAXOS  DATATYPES  SRVRDLL

    @type   DWORD |  STD_PAGE_LENLIMITS | Standard Page Length Limits

    @emem   AWLENLIMIT_UNUSED    | Page Length Limit unused
    @emem   AWLENLIMIT_STD       | Page Length Limit defined by Standard Paper Size
    @emem   AWLENLIMIT_UNLIMITED | unlimited page length
********/

#define AWLENLIMIT_UNUSED    0xFFFFFFFFL
#define AWLENLIMIT_STD       0x00000001L
#define AWLENLIMIT_UNLIMITED 0x00000002L


/********
    @doc    EXTERNAL IFAXOS DATATYPES SRVRDLL 

    @typee  STD_PAGE_SIZES | Standard Page Sizes

    @emem   AWPAPER_UNUSED         |  Paper size is unused
    @emem   AWPAPER_UNKNOWN         |  Unknown size
    @emem   AWPAPER_CUSTOM          |  Custom Paper size
    @emem   AWPAPER_A3_PORTRAIT     |  A3 Portrait
    @emem   AWPAPER_A3_LANDSCAPE    | A3 landscape
    @emem	AWPAPER_B4_PORTRAIT     | B4 portrait
	@emem	AWPAPER_B4_LANDSCAPE    | B4 landscape
	@emem	AWPAPER_A4_PORTRAIT     | A4 portrait
	@emem	AWPAPER_A4_LANDSCAPE    | A4 landscape
	@emem	AWPAPER_B5_PORTRAIT     | B5 portrait
	@emem	AWPAPER_B5_LANDSCAPE    | B5 landscape
	@emem	AWPAPER_A5_PORTRAIT     | A5 portrait
	@emem	AWPAPER_A5_LANDSCAPE    | A5 landscape
	@emem	AWPAPER_A6_PORTRAIT     | A6 portrait
	@emem	AWPAPER_A6_LANDSCAPE    | A6 landscape
	@emem	AWPAPER_LETTER_PORTRAIT | Letter portrait
	@emem	AWPAPER_LETTER_LANDSCAPE | Letter landscape
	@emem	AWPAPER_LEGAL_PORTRAIT   | Legal portrait
	@emem	AWPAPER_LEGAL_LANDSCAPE  | Legal landscape
	@emem	AWPAPER_WIN31_DEFAULT   | ????


	@comm   Page width in pixels must be exactly correct for MH/MR/MMR
			decoding and to interoperate with Group-3 fax machines.
			The table in the example below gives the bits/bytes required at each width
			and resolution combination

    @ex     Table for Page Width vs Resolution  |

                         A4        B4        A3        A5        A6
    200dpi / 8li/mm   1728/216  2048/256  2432/304  1216/152   864/108
    300               2592/324  3072/384  3648/456  1824/228  1296/162
    400dpi / 16li/mm  3456/432  4096/512  4864/608  2432/304  1728/216

********/

#define         AWPAPER_UNUSED                  0xFFFFFFFFL
#define         AWPAPER_UNKNOWN                 0x00000000L
#define         AWPAPER_CUSTOM                  0x00000001L
#define         AWPAPER_A3_PORTRAIT             0x00000002L
#define         AWPAPER_A3_LANDSCAPE            0x00000004L
#define         AWPAPER_B4_PORTRAIT             0x00000008L
#define         AWPAPER_B4_LANDSCAPE            0x00000010L
#define         AWPAPER_A4_PORTRAIT             0x00000020L
#define         AWPAPER_A4_LANDSCAPE            0x00000040L
#define         AWPAPER_B5_PORTRAIT             0x00000080L
#define         AWPAPER_B5_LANDSCAPE            0x00000100L
#define         AWPAPER_A5_PORTRAIT             0x00000200L
#define         AWPAPER_A5_LANDSCAPE            0x00000400L
#define         AWPAPER_A6_PORTRAIT             0x00000800L
#define         AWPAPER_A6_LANDSCAPE            0x00001000L
#define         AWPAPER_LETTER_PORTRAIT         0x00002000L
#define         AWPAPER_LETTER_LANDSCAPE        0x00004000L
#define         AWPAPER_LEGAL_PORTRAIT          0x00008000L
#define         AWPAPER_LEGAL_LANDSCAPE         0x00010000L
#define         AWPAPER_WIN31_DEFAULT           0x00020000L





#endif // _INC_BUFFERS
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\awdlib.h ===
#ifndef _AWDLIB_H
#define _AWDLIB_H
/*++
  awdlib.h

  header file for the AWD library.

  Copyright (c) 1997  Microsoft Corporation

  Author:
       Brian Dewey (t-briand)  1997-7-2

--*/

// needed includes for the AWD file format
#include <ole2.h>		// AWD is an OLE compound document.

// ------------------------------------------------------------
// Defines
#define MAX_AWD_NAME	(32)

// ------------------------------------------------------------
// Data types

// This structure holds the primary storages used in an AWD file.
typedef struct awd_file {
    IStorage *psAWDFile;	// The root storage of the file.
    IStorage *psDocuments;	// Storage holding the document data.
    IStorage *psPersistInfo;	// Persistent information storage.
    IStorage *psDocInfo;	// Document information stream.
    IStorage *psPageInfo;	// Page information storage.
    IStorage *psGlobalInfo;	// Global information storage.
} AWD_FILE;

// An AWD_DOC_PROCESSOR is a function that does something with an document
// contained in an AWD file.  Used in the EnumDocuments() function.  The
// function should return TRUE on success and FALSE on an error that requires
// the enumeration process to abort.
typedef BOOL (*AWD_DOC_PROCESSOR)(AWD_FILE *psStorages, const WCHAR *pwcsDocName);

#include "oleutils.h"		// Use the elliott fax viewer definitions.


// ------------------------------------------------------------
// Prototypes
BOOL      ConvertAWDToTiff(const WCHAR *pwcsAwdFile, WCHAR *pwcsTiffFile);
BOOL      OpenAWDFile(const WCHAR *pwcsFilename, AWD_FILE *psStorages);
BOOL      CloseAWDFile(AWD_FILE *psStorages);
IStorage *OpenAWDSubStorage(IStorage *psParent, const WCHAR *pwcsStorageName);
IStream  *OpenAWDStream(IStorage *psStorage, const WCHAR *pwcsStreamName);
BOOL      AWDViewed(AWD_FILE *psStorages);
void      DumpAWDDocuments(AWD_FILE *psStorages);
BOOL      EnumDocuments(AWD_FILE *psStorages, AWD_DOC_PROCESSOR pfnDocProc);
BOOL      DisplayDocNames(AWD_FILE *psStorages, const WCHAR *pwcsDocName);
BOOL      DetailedDocDump(AWD_FILE *psStorages, const WCHAR *pwcsDocName);
void      PrintPageInfo(PAGE_INFORMATION *psPageInfo);
void      DumpData(LPTSTR pszFileName, LPBYTE pbData, DWORD cbCount);



#endif // _AWDLIB_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\dcxcodec.h ===
// Copyright (C) Microsoft Corp. 1994
/*==============================================================================
The prototypes in this header file define an API for the Dcx Codec DLL.

DATE				NAME			COMMENTS
13-Jan-94   RajeevD   Parallel to faxcodec.h
==============================================================================*/
#ifndef _INC_DCXCODEC
#define _INC_DCXCODEC

#include <faxcodec.h>

#ifdef __cplusplus
extern "C" {
#endif

/*==============================================================================
DcxCodecInit() initializes a context for a conversion.  The client may pass a 
NULL context pointer to query for the exact size of the context, allocate the
context memory, and call a second time to initialize.
==============================================================================*/
UINT                     // returns size of context (0 on failure)
WINAPI DcxCodecInit
(
	LPVOID     lpContext,  // context pointer (or NULL on query)
	LPFC_PARAM lpParam	   // initialization parameters
);

/*==============================================================================
DcxCodecConvert() executes the conversion specified in DcxCodecInit().

In the input buffer, lpbBegData is advanced and uLengthData is decremented as 
data is consumed.  If the caller wants to retain the input data, both must be 
saved and restored.

In the output buffer, uLengthData is incremented as data is appended.  If the
output type is HRAW_DATA, an integral number of scan lines are produced.

To flush any output data at the end of apage, pass a NULL input buffer.

Returns when the input buffer is empty or the output buffer full.
==============================================================================*/
FC_STATUS             // returns status
WINAPI DcxCodecConvert
(
	LPVOID   lpContext, // context pointer
	LPBUFFER lpbufIn,   // input buffer (NULL at end of page)
	LPBUFFER lpbufOut   // output buffer
);


#ifdef __cplusplus
} // extern "C" {
#endif

// DCX file header
typedef struct
{
	DWORD   dwSignature;    // always set to DCX_SIG
	DWORD   dwOffset[1024]; // array of page offsets
}
	DCX_HDR;

#define DCX_SIG 987654321L

// PCX file header
typedef struct
{
	BYTE    bSig;          // signature: always  0Ah
	BYTE    bVer;          // version: at least 2 
	BYTE    bEnc;          // encoding: always 1
	BYTE    bBPP;          // color depth [bpp]
	short   xMin;          // x minimum, inclusive
	short   yMin;          // y minimum, inclusive
	short   xMax;          // x maximum, inclusive
	short   yMax;          // y maximum, inclusive
	WORD    xRes;          // x resolution [dpi]
	WORD    yRes;          // y resolution [dpi]
	BYTE    bPalette[48];  // color palette
	BYTE    bReserved;
	BYTE    bPlanes;       // number of color planes
	WORD    wHoriz; 
  WORD    wPalInfo;      // palette info: always 1
	char    bFill[58];
}
	PCX_HDR;

#endif // _INC_DCXCODEC
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\awd\viewrend\viewrend.hpp ===
#ifndef _VIEWHPP_
#define _VIEWHPP_

#include <ifaxos.h>
#include <viewrend.h>
#include <rambo.h>
#include <faxspool.h>
#include <faxcodec.h>
#include "genfile.hpp"

#define return_error(mesg) do {DEBUGMSG (1, mesg); return FALSE;} while(0)

// global memory
#ifdef IFBGPROC
#define GlobalAllocPtr(f,cb) IFMemAlloc(f,cb,NULL)
#define GlobalFreePtr(lp) IFMemFree(lp)
#else
#include <windowsx.h>
#endif

// base viewer context
typedef struct FAR VIEWREND : public GENFILE
{
	virtual BOOL Init (LPVOID, LPVIEWINFO, LPWORD) = 0;
  virtual BOOL SetPage (UINT iPage) = 0;
  virtual BOOL GetBand (LPBITMAP) = 0;
  virtual ~VIEWREND() {}
}
	FAR* LPVIEWREND;

// MMR viewer context
typedef struct FAR MMRVIEW : public VIEWREND
{
	LPVOID lpSpool;
	SPOOL_HEADER sh;
	BOOL fEOP;
	
	LPVOID lpCodec;
	FC_PARAM fcp;
		
	LPBUFFER lpbufIn;
	BUFFER bufOut;
	DWORD nTypeOut;
	WORD  cbBand;

  MMRVIEW (DWORD nTypeOut);
	virtual BOOL Init (LPVOID, LPVIEWINFO, LPWORD);
  virtual BOOL SetPage (UINT iPage);
  virtual BOOL GetBand (LPBITMAP);
  virtual ~MMRVIEW();
}
	FAR *LPMMRVIEW;

#define MAX_PAGE 1024

// RBA viewer context
typedef struct FAR RBAVIEW : public VIEWREND
{
	DWORD    dwOffset[MAX_PAGE];
	BEGJOB   BegJob;
	LPVOID   ResDir[256];
	LPVOID   lpCodec;
	BUFFER   bufIn;
	DWORD    nTypeOut;
	UINT     iMaxPage;
	HANDLE   hHRE;
	
  RBAVIEW (DWORD nTypeOut);
	virtual BOOL Init (LPVOID, LPVIEWINFO, LPWORD);
  virtual BOOL SetPage (UINT iPage);
  virtual BOOL GetBand (LPBITMAP);
  virtual ~RBAVIEW();

  BOOL ExecuteRPL  (LPBITMAP, LPRESHDR);
  BOOL ExecuteBand (LPBITMAP, LPRESHDR);
}
	FAR *LPRBAVIEW;

// DCX viewer context
typedef struct FAR DCXVIEW : public VIEWREND
{
	LPVOID   lpCodec;
	FC_PARAM fcp;
	DWORD    nTypeOut;
	BUFFER   bufIn;
	DWORD    cbPage;
	BOOL     fEndPage;
	WORD     cbBand;
			
  DCXVIEW (DWORD nTypeOut);
	virtual BOOL Init (LPVOID, LPVIEWINFO, LPWORD);
  virtual BOOL SetPage (UINT iPage);
  virtual BOOL GetBand (LPBITMAP);
  virtual ~DCXVIEW();
}
	FAR *LPDCXVIEW;
		
#endif // _VIEWHPP_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\errormod.h ===
#ifndef _ERRORMOD_H
#define _ERRORMOD_H


// IFKERNEL API's
#define API_IFK_ALLOCBUF	         0x0040
#define API_IFK_FREEBUF	            0x0080
#define API_IFK_MAKEBUFWRITABLE	   0x00c0
#define API_IFK_SHAREBUF	         0x0100
#define API_IFK_SPLITBUF	         0x0140

#define API_IFK_IFGLOBALALLOC       0x1000
#define API_IFK_IFGLOBALFREE        0x1040

#define API_IFK_CREATEIFPIPE	      0x2000
#define API_IFK_DELETEIFPIPE	      0x2040
#define API_IFK_OPENIFPIPE	         0x2080
#define API_IFK_CLOSEIFPIPE	      0x20c0
#define API_IFK_REQREADFROMIFPIPE	0x2100
#define API_IFK_REQWRITETOIFPIPE	   0x2140

#define API_IFK_NEWMEMUNIT	         0x3040

#define API_IFK_POSTMESSAGE	      0x4000
#define API_IFK_GETMESSAGE		      0x4040
#define API_IFK_PEEKMESSAGE	      0x4080
#define API_IFK_BROADCASTMESSAGE	   0x40c0

#define API_IFK_CREATEPROCESS       0x5000
#define API_IFK_TERMINATEAPP            0x5040
#define API_IFK_GETIFPROCWINDOW         0x5080
#define API_IFK_SETIFPROCPRIORITY       0x50C0
#define API_IFK_GETIFPROCPRIORITY       0x5100

#define API_IFK_CREATEMUTEX	            0x6000
#define API_IFK_RELEASEMUTEX	        0x6040
#define API_IFK_CREATEEVENT	            0x6080
#define API_IFK_SETEVENT		        0x60c0   
#define API_IFK_WAITFORSINGLEOBJECT	    0x6100
#define API_IFK_FREESYNCOBJECT	        0x6140
#define API_IFK_GETSETEVENTPARAM        0x6180

#define API_IFK_IFSETTIMER             0x7000


//IFSCAN APIs (High level scanner driver: error codes in prnscn.h)
#define	API_OPENSCANNER				0x0040
#define	API_CLOSESCANNER			0x0080
#define	API_STARTSCANJOB			0x00c0
#define	API_ENDSCANJOB				0x0100
#define	API_CONTINUESCANJOB			0x0200
#define	API_ABORTSCANJOB			0x0300
#define	API_GETSCANNERSTATUS		0x0400
#define API_GETSCANNERPAPERINFO	  	0x0500
#define	API_GETSCANIMAGEINFO		0x0600
#define	API_GETSCANNERCAPS			0x0700
#define	API_GETSCANNERCUSTOMCAPS	0x0800
#define	API_COMPLETESCANPAGE		0x0900
#define	API_GETSCANDEVICEINFO		0x0a00
#define	API_SELECTSCANDEVICE		0x0b00
#define	API_SCANDEVICEMODE			0x0c00
#define	API_INITIFSCAN				0x0d00
#define	API_SCANDIAGNOSTICJOB		0x0e00
#define	API_GETDEVINFOFROMID		0x0f00
#define	API_GETDEVINFOFROMSTR		0x1000
#define	API_GETDEVDEFAULTMODE		0x1100
#define API_SCANNERPREFEED			0x1200
#define API_STARTCOPYJOB			0x1300
#define API_ENDCOPYJOB				0x1400

//IFPRINT (high level printer drivers api: error codes in prnscn.h)
#define	API_SELECTPRINTDEVICE		0x0a00
#define	API_GETPRINTDEVICEINFO		0x0900
#define	API_PRINTDEVICEMODE			0x0b00
#define	API_PRINTDIAGNOSTICJOB		0x0c00
#define API_CHECKPRINTERSTATUS		0x0d00

//Awreport(the report engine)
#define	API_AWREPORTMESSAGE			0x0a00


//Remote Access APIs (Remote Access Apis)
//IPX
#define	API_PSINIT				0x0040
#define	API_INITIATEBIND		0x0080

//MAC
#define	API_MACINIT				0x0040


//Renderer APIs

#define	API_RENDEROPEN				0x0040
#define	API_RENDEREXECUTE			0x0080
#define	API_RENDERCLOSE				0x00c0


//  Message pump events disguised as APIs

                                       // APICODE BITS | ERRCODE BITS
#define API_JOBMESSAGE        0x0040   // 0000 0000 01 | 00 0000
#define API_JOBCOMPLETE       0x0080   // 0000 0000 10 | 00 0000
#define API_JOBERRCOMPLETE    0x00C0   // 0000 0000 11 | 00 0000

#define API_MPJOBCANCEL       0x0100   
#define API_MPREJECTMSG       0x0140   
#define API_MPANSWER          0x0180   
#define API_MPTRANSPORT       0x01C0   
#define API_MPPOLLRETRIEVE    0x0200   
#define API_MPDEST            0x0240   




// WINDOWS MODULE API's 
#define WERR_OK  0x0
#define WERR_GETVERSION 0x40
#define WERR_GETFREESPACE 0x80
#define WERR_GETCURRENTPDB 0xC0
#define WERR_GETWINDOWSDIRECTORY 0x100
#define WERR_GETSYSTEMDIRECTORY 0x140
#define WERR_GETFREESYSTEMRESOURCES 0x180
#define WERR_GETWINFLAGS 0x1C0
#define WERR_GETDOSENVIRONMENT 0x200
#define WERR_GETCURRENTTIME 0x240
#define WERR_GETTICKCOUNT 0x280
#define WERR_GETTIMERRESOLUTION 0x2C0
#define WERR_LOGERROR 0x300
#define WERR_LOGPARAMERROR 0x340
#define WERR_GETWINDEBUGINFO 0x380
#define WERR_SETWINDEBUGINFO 0x3C0
#define WERR_FATALEXIT 0x400
#define WERR_FATALAPPEXIT 0x440
#define WERR_EXITWINDOWS 0x480
#define WERR_EXITWINDOWSEXEC 0x4C0
#define WERR_DEBUGBREAK 0x500
#define WERR_OUTPUTDEBUGSTRING 0x540
#define WERR_SETERRORMODE 0x580
#define WERR_ISBADREADPTR 0x5C0
#define WERR_ISBADWRITEPTR 0x600
#define WERR_ISBADHUGEREADPTR 0x640
#define WERR_ISBADHUGEWRITEPTR 0x680
#define WERR_ISBADCODEPTR 0x6C0
#define WERR_ISBADSTRINGPTR 0x700
#define WERR_PROFINSCHK 0x740
#define WERR_PROFSETUP 0x780
#define WERR_PROFSAMPRATE 0x7C0
#define WERR_PROFSTART 0x800
#define WERR_PROFSTOP 0x840
#define WERR_PROFCLEAR 0x880
#define WERR_PROFFLUSH 0x8C0
#define WERR_PROFFINISH 0x900
#define WERR_CATCH 0x940
#define WERR_THROW 0x980
#define WERR_SWITCHSTACKBACK 0x9C0
#define WERR_SWITCHSTACKTO 0xA00
#define WERR_LOADMODULE 0xA40
#define WERR_FREEMODULE 0xA80
#define WERR_LOADLIBRARY 0xAC0
#define WERR_FREELIBRARY 0xB00
#define WERR_WINEXEC 0xB40
#define WERR_GETMODULEHANDLE 0xB80
#define WERR_GETMODULEUSAGE 0xBC0
#define WERR_GETMODULEFILENAME 0xC00
#define WERR_GETPROCADDRESS 0xC40
#define WERR_GETINSTANCEDATA 0xC80
#define WERR_GETCODEHANDLE 0xCC0
#define WERR_GETCODEINFO 0xD00
#define WERR_MAKEPROCINSTANCE 0xD40
#define WERR_FREEPROCINSTANCE 0xD80
#define WERR_SETSWAPAREASIZE 0xDC0
#define WERR_SWAPRECORDING 0xE00
#define WERR_VALIDATECODESEGMENTS 0xE40
#define WERR_GETNUMTASKS 0xE80
#define WERR_ISTASK 0xEC0
#define WERR_GETCURRENTTASK 0xF00
#define WERR_YIELD 0xF40
#define WERR_DIRECTEDYIELD 0xF80
#define WERR_GLOBALALLOC 0xFC0
#define WERR_GLOBALREALLOC 0x1000
#define WERR_GLOBALFREE 0x1040
#define WERR_GLOBALDOSALLOC 0x1080
#define WERR_GLOBALDOSFREE 0x10C0
#define WERR_GLOBALLOCK 0x1100
//#define WERR_GLOBALLOCK 0x1140
#define WERR_GLOBALUNLOCK 0x1180
#define WERR_GLOBALSIZE 0x11C0
#define WERR_GLOBALHANDLE 0x1200
#define WERR_GLOBALFLAGS 0x1240
#define WERR_GLOBALWIRE 0x1280
//#define WERR_GLOBALWIRE 0x12C0
#define WERR_GLOBALUNWIRE 0x1300
#define WERR_GLOBALPAGELOCK 0x1340
#define WERR_GLOBALPAGEUNLOCK 0x1380
#define WERR_GLOBALFIX 0x13C0
#define WERR_GLOBALUNFIX 0x1400
#define WERR_GLOBALLRUNEWEST 0x1440
#define WERR_GLOBALLRUOLDEST 0x1480
#define WERR_GLOBALCOMPACT 0x14C0
#define WERR_GLOBALNOTIFY 0x1500
#define WERR_LOCKSEGMENT 0x1540
#define WERR_UNLOCKSEGMENT 0x1580
#define WERR_ALLOCSELECTOR 0x15C0
#define WERR_FREESELECTOR 0x1600
#define WERR_ALLOCDSTOCSALIAS 0x1640
#define WERR_PRESTOCHANGOSELECTOR 0x1680
#define WERR_GETSELECTORBASE 0x16C0
#define WERR_SETSELECTORBASE 0x1700
#define WERR_GETSELECTORLIMIT 0x1740
#define WERR_SETSELECTORLIMIT 0x1780
#define WERR_LIMITEMSPAGES 0x17C0
#define WERR_VALIDATEFREESPACES 0x1800
#define WERR_LOCALALLOC 0x1840
#define WERR_LOCALREALLOC 0x1880
#define WERR_LOCALFREE 0x18C0
#define WERR_LOCALLOCK 0x1900
//#define WERR_LOCALLOCK 0x1940
#define WERR_LOCALUNLOCK 0x1980
#define WERR_LOCALSIZE 0x19C0
#define WERR_LOCALHANDLE 0x1A00
//#define WERR_LOCALHANDLE 0x1A40
#define WERR_LOCALFLAGS 0x1A80
#define WERR_LOCALINIT 0x1AC0
#define WERR_LOCALCOMPACT 0x1B00
#define WERR_LOCALSHRINK 0x1B40
#define WERR_OPENFILE 0x1B80
#define WERR__LOPEN 0x1BC0
#define WERR__LCREAT 0x1C00
#define WERR__LCLOSE 0x1C40
#define WERR__LLSEEK 0x1C80
#define WERR__LREAD 0x1CC0
#define WERR__LWRITE 0x1D00
#define WERR__HREAD 0x1D40
#define WERR__HWRITE 0x1D80
#define WERR_GETTEMPFILENAME 0x1DC0
#define WERR_GETTEMPDRIVE 0x1E00
#define WERR_GETDRIVETYPE 0x1E40
#define WERR_SETHANDLECOUNT 0x1E80
#define WERR_WNETADDCONNECTION 0x1EC0
#define WERR_WNETGETCONNECTION 0x1F00
#define WERR_WNETCANCELCONNECTION 0x1F40
#define WERR_FINDRESOURCE 0x1F80
#define WERR_LOADRESOURCE 0x1FC0
#define WERR_FREERESOURCE 0x2000
#define WERR_LOCKRESOURCE 0x2040
//#define WERR_LOCKRESOURCE 0x2080
#define WERR_SIZEOFRESOURCE 0x20C0
#define WERR_ACCESSRESOURCE 0x2100
#define WERR_ALLOCRESOURCE 0x2140
#define WERR_SETRESOURCEHANDLER 0x2180
#define WERR_INITATOMTABLE 0x21C0
#define WERR_ADDATOM 0x2200
#define WERR_DELETEATOM 0x2240
#define WERR_FINDATOM 0x2280
#define WERR_GETATOMNAME 0x22C0
#define WERR_GLOBALADDATOM 0x2300
#define WERR_GLOBALDELETEATOM 0x2340
#define WERR_GLOBALFINDATOM 0x2380
#define WERR_GLOBALGETATOMNAME 0x23C0
#define WERR_GETATOMHANDLE 0x2400
#define WERR_GETPROFILEINT 0x2440
#define WERR_GETPROFILESTRING 0x2480
#define WERR_WRITEPROFILESTRING 0x24C0
#define WERR_GETPRIVATEPROFILEINT 0x2500
#define WERR_GETPRIVATEPROFILESTRING 0x2540
#define WERR_WRITEPRIVATEPROFILESTRING 0x2580
#define WERR_ANSITOOEM 0x25C0
#define WERR_OEMTOANSI 0x2600
#define WERR_ANSITOOEMBUFF 0x2640
#define WERR_OEMTOANSIBUFF 0x2680
#define WERR_ANSINEXT 0x26C0
#define WERR_ANSIPREV 0x2700
#define WERR_ANSIUPPER 0x2740
#define WERR_ANSILOWER 0x2780
#define WERR_ANSIUPPERBUFF 0x27C0
#define WERR_ANSILOWERBUFF 0x2800
#define WERR_ISCHARALPHA 0x2840
#define WERR_ISCHARALPHANUMERIC 0x2880
#define WERR_ISCHARUPPER 0x28C0
#define WERR_ISCHARLOWER 0x2900
#define WERR_LSTRCMP 0x2940
#define WERR_LSTRCMPI 0x2980
#define WERR_LSTRCPY 0x29C0
#define WERR_LSTRCAT 0x2A00
#define WERR_LSTRLEN 0x2A40
#define WERR_LSTRCPYN 0x2A80
#define WERR_HMEMCPY 0x2AC0
#define WERR_ISDBCSLEADBYTE 0x2B00
#define WERR_LOADSTRING 0x2B40
#define WERR_OEMKEYSCAN 0x2B80
#define WERR_VKKEYSCAN 0x2BC0
#define WERR_GETKEYBOARDTYPE 0x2C00
#define WERR_MAPVIRTUALKEY 0x2C40
#define WERR_GETKBCODEPAGE 0x2C80
#define WERR_GETKEYNAMETEXT 0x2CC0
#define WERR_TOASCII 0x2D00
#define WERR_CREATEDC 0x2D40
#define WERR_CREATEIC 0x2D80
#define WERR_CREATECOMPATIBLEDC 0x2DC0
#define WERR_DELETEDC 0x2E00
#define WERR_GETDCORG 0x2E40
#define WERR_SAVEDC 0x2E80
#define WERR_RESTOREDC 0x2EC0
#define WERR_SETENVIRONMENT 0x2F00
#define WERR_GETENVIRONMENT 0x2F40
#define WERR_MULDIV 0x2F80
#define WERR_SETBOUNDSRECT 0x2FC0
#define WERR_GETBOUNDSRECT 0x3000
#define WERR_GETDEVICECAPS 0x3040
#define WERR_SETMAPMODE 0x3080
#define WERR_GETMAPMODE 0x30C0
#define WERR_SETWINDOWORG 0x3100
#define WERR_GETWINDOWORG 0x3140
#define WERR_SETWINDOWEXT 0x3180
#define WERR_GETWINDOWEXT 0x31C0
#define WERR_OFFSETWINDOWORG 0x3200
#define WERR_SCALEWINDOWEXT 0x3240
#define WERR_SETVIEWPORTORG 0x3280
#define WERR_GETVIEWPORTORG 0x32C0
#define WERR_SETVIEWPORTEXT 0x3300
#define WERR_GETVIEWPORTEXT 0x3340
#define WERR_OFFSETVIEWPORTORG 0x3380
#define WERR_SCALEVIEWPORTEXT 0x33C0
#define WERR_SETWINDOWORGEX 0x3400
#define WERR_GETWINDOWORGEX 0x3440
#define WERR_SETWINDOWEXTEX 0x3480
#define WERR_GETWINDOWEXTEX 0x34C0
#define WERR_OFFSETWINDOWORGEX 0x3500
#define WERR_SCALEWINDOWEXTEX 0x3540
#define WERR_SETVIEWPORTEXTEX 0x3580
#define WERR_GETVIEWPORTEXTEX 0x35C0
#define WERR_SETVIEWPORTORGEX 0x3600
#define WERR_GETVIEWPORTORGEX 0x3640
#define WERR_OFFSETVIEWPORTORGEX 0x3680
#define WERR_SCALEVIEWPORTEXTEX 0x36C0
#define WERR_DPTOLP 0x3700
#define WERR_LPTODP 0x3740
#define WERR_GETNEARESTCOLOR 0x3780
#define WERR_GETSYSCOLOR 0x37C0
#define WERR_SETSYSCOLORS 0x3800
#define WERR_GETSTOCKOBJECT 0x3840
#define WERR_ISGDIOBJECT 0x3880
#define WERR_DELETEOBJECT 0x38C0
#define WERR_SELECTOBJECT 0x3900
#define WERR_GETOBJECT 0x3940
#define WERR_UNREALIZEOBJECT 0x3980
#define WERR_ENUMOBJECTS 0x39C0
//#define WERR_ENUMOBJECTS 0x3A00
#define WERR_CREATEPEN 0x3A40
#define WERR_CREATEPENINDIRECT 0x3A80
#define WERR_CREATESOLIDBRUSH 0x3AC0
#define WERR_CREATEHATCHBRUSH 0x3B00
#define WERR_CREATEPATTERNBRUSH 0x3B40
#define WERR_CREATEDIBPATTERNBRUSH 0x3B80
#define WERR_CREATEBRUSHINDIRECT 0x3BC0
#define WERR_SETBRUSHORG 0x3C00
#define WERR_GETBRUSHORG 0x3C40
#define WERR_GETBRUSHORGEX 0x3C80
#define WERR_CREATERECTRGN 0x3CC0
#define WERR_CREATERECTRGNINDIRECT 0x3D00
#define WERR_CREATEELLIPTICRGNINDIRECT 0x3D40
#define WERR_CREATEELLIPTICRGN 0x3D80
#define WERR_CREATEPOLYGONRGN 0x3DC0
#define WERR_CREATEPOLYPOLYGONRGN 0x3E00
#define WERR_CREATEROUNDRECTRGN 0x3E40
#define WERR_SETRECTRGN 0x3E80
#define WERR_COMBINERGN 0x3EC0
#define WERR_EQUALRGN 0x3F00
#define WERR_OFFSETRGN 0x3F40
#define WERR_GETRGNBOX 0x3F80
#define WERR_RECTINREGION 0x3FC0
#define WERR_PTINREGION 0x4000
#define WERR_CREATEPALETTE 0x4040
#define WERR_SELECTPALETTE 0x4080
#define WERR_REALIZEPALETTE 0x40C0
#define WERR_UPDATECOLORS 0x4100
#define WERR_ANIMATEPALETTE 0x4140
#define WERR_SETPALETTEENTRIES 0x4180
#define WERR_GETPALETTEENTRIES 0x41C0
#define WERR_GETNEARESTPALETTEINDEX 0x4200
#define WERR_RESIZEPALETTE 0x4240
#define WERR_GETSYSTEMPALETTEENTRIES 0x4280
#define WERR_GETSYSTEMPALETTEUSE 0x42C0
#define WERR_SETSYSTEMPALETTEUSE 0x4300
#define WERR_SELECTCLIPRGN 0x4340
#define WERR_GETCLIPBOX 0x4380
#define WERR_INTERSECTCLIPRECT 0x43C0
#define WERR_OFFSETCLIPRGN 0x4400
#define WERR_EXCLUDECLIPRECT 0x4440
#define WERR_PTVISIBLE 0x4480
#define WERR_RECTVISIBLE 0x44C0
#define WERR_MOVETO 0x4500
#define WERR_GETCURRENTPOSITION 0x4540
#define WERR_MOVETOEX 0x4580
#define WERR_GETCURRENTPOSITIONEX 0x45C0
#define WERR_LINETO 0x4600
#define WERR_POLYLINE 0x4640
#define WERR_LINEDDA 0x4680
#define WERR_RECTANGLE 0x46C0
#define WERR_ROUNDRECT 0x4700
#define WERR_ELLIPSE 0x4740
#define WERR_ARC 0x4780
#define WERR_CHORD 0x47C0
#define WERR_PIE 0x4800
#define WERR_POLYGON 0x4840
#define WERR_POLYPOLYGON 0x4880
#define WERR_SETPOLYFILLMODE 0x48C0
#define WERR_GETPOLYFILLMODE 0x4900
#define WERR_FLOODFILL 0x4940
#define WERR_EXTFLOODFILL 0x4980
#define WERR_FILLRGN 0x49C0
#define WERR_FRAMERGN 0x4A00
#define WERR_INVERTRGN 0x4A40
#define WERR_PAINTRGN 0x4A80
#define WERR_FILLRECT 0x4AC0
#define WERR_FRAMERECT 0x4B00
#define WERR_INVERTRECT 0x4B40
#define WERR_DRAWFOCUSRECT 0x4B80
#define WERR_TEXTOUT 0x4BC0
#define WERR_TABBEDTEXTOUT 0x4C00
#define WERR_EXTTEXTOUT 0x4C40
#define WERR_GETTEXTEXTENT 0x4C80
#define WERR_GETTABBEDTEXTEXTENT 0x4CC0
#define WERR_GETTEXTEXTENTPOINT 0x4D00
#define WERR_DRAWTEXT 0x4D40
#define WERR_GRAYSTRING 0x4D80
#define WERR_GETCHARWIDTH 0x4DC0
#define WERR_SETTEXTCOLOR 0x4E00
#define WERR_GETTEXTCOLOR 0x4E40
#define WERR_SETBKCOLOR 0x4E80
#define WERR_GETBKCOLOR 0x4EC0
#define WERR_SETBKMODE 0x4F00
#define WERR_GETBKMODE 0x4F40
#define WERR_SETTEXTALIGN 0x4F80
#define WERR_GETTEXTALIGN 0x4FC0
#define WERR_SETTEXTCHARACTEREXTRA 0x5000
#define WERR_GETTEXTCHARACTEREXTRA 0x5040
#define WERR_SETTEXTJUSTIFICATION 0x5080
#define WERR_CREATEFONT 0x50C0
#define WERR_CREATEFONTINDIRECT 0x5100
#define WERR_SETMAPPERFLAGS 0x5140
#define WERR_ADDFONTRESOURCE 0x5180
#define WERR_REMOVEFONTRESOURCE 0x51C0
#define WERR_GETTEXTFACE 0x5200
#define WERR_GETASPECTRATIOFILTER 0x5240
#define WERR_GETASPECTRATIOFILTEREX 0x5280
#define WERR_GETTEXTMETRICS 0x52C0
#define WERR_GETOUTLINETEXTMETRICS 0x5300
#define WERR_ENUMFONTFAMILIES 0x5340
#define WERR_ENUMFONTS 0x5380
//#define WERR_ENUMFONTS 0x53C0
//#define WERR_ENUMFONTFAMILIES 0x5400
#define WERR_GETFONTDATA 0x5440
#define WERR_CREATESCALABLEFONTRESOURCE 0x5480
#define WERR_GETGLYPHOUTLINE 0x54C0
#define WERR_GETCHARABCWIDTHS 0x5500
#define WERR_GETKERNINGPAIRS 0x5540
#define WERR_GETRASTERIZERCAPS 0x5580
#define WERR_CREATEBITMAP 0x55C0
#define WERR_CREATEBITMAPINDIRECT 0x5600
#define WERR_CREATECOMPATIBLEBITMAP 0x5640
#define WERR_CREATEDISCARDABLEBITMAP 0x5680
#define WERR_CREATEDIBITMAP 0x56C0
#define WERR_LOADBITMAP 0x5700
#define WERR_BITBLT 0x5740
#define WERR_PATBLT 0x5780
#define WERR_STRETCHBLT 0x57C0
#define WERR_STRETCHDIBITS 0x5800
#define WERR_SETPIXEL 0x5840
#define WERR_GETPIXEL 0x5880
#define WERR_SETSTRETCHBLTMODE 0x58C0
#define WERR_GETSTRETCHBLTMODE 0x5900
#define WERR_SETBITMAPDIMENSION 0x5940
#define WERR_GETBITMAPDIMENSION 0x5980
#define WERR_SETBITMAPDIMENSIONEX 0x59C0
#define WERR_GETBITMAPDIMENSIONEX 0x5A00
#define WERR_SETROP2 0x5A40
#define WERR_GETROP2 0x5A80
#define WERR_SETBITMAPBITS 0x5AC0
#define WERR_GETBITMAPBITS 0x5B00
#define WERR_SETDIBITS 0x5B40
#define WERR_GETDIBITS 0x5B80
#define WERR_SETDIBITSTODEVICE 0x5BC0
#define WERR_CREATEMETAFILE 0x5C00
#define WERR_CLOSEMETAFILE 0x5C40
#define WERR_GETMETAFILE 0x5C80
#define WERR_DELETEMETAFILE 0x5CC0
#define WERR_COPYMETAFILE 0x5D00
#define WERR_PLAYMETAFILE 0x5D40
#define WERR_GETMETAFILEBITS 0x5D80
#define WERR_SETMETAFILEBITS 0x5DC0
#define WERR_SETMETAFILEBITSBETTER 0x5E00
#define WERR_PLAYMETAFILERECORD 0x5E40
#define WERR_ENUMMETAFILE 0x5E80
#define WERR_STARTDOC 0x5EC0
#define WERR_STARTPAGE 0x5F00
#define WERR_ENDPAGE 0x5F40
#define WERR_ENDDOC 0x5F80
#define WERR_ABORTDOC 0x5FC0
#define WERR_SETABORTPROC 0x6000
#define WERR_SPOOLFILE 0x6040
#define WERR_QUERYABORT 0x6080
#define WERR_ESCAPE 0x60C0
#define WERR_GETSYSTEMMETRICS 0x6100
#define WERR_GETDOUBLECLICKTIME 0x6140
#define WERR_SETDOUBLECLICKTIME 0x6180
#define WERR_SYSTEMPARAMETERSINFO 0x61C0
#define WERR_SETRECT 0x6200
#define WERR_SETRECTEMPTY 0x6240
#define WERR_COPYRECT 0x6280
#define WERR_ISRECTEMPTY 0x62C0
#define WERR_EQUALRECT 0x6300
#define WERR_INTERSECTRECT 0x6340
#define WERR_UNIONRECT 0x6380
#define WERR_SUBTRACTRECT 0x63C0
#define WERR_OFFSETRECT 0x6400
#define WERR_INFLATERECT 0x6440
#define WERR_PTINRECT 0x6480
#define WERR_REGISTERWINDOWMESSAGE 0x64C0
#define WERR_GETMESSAGE 0x6500
#define WERR_PEEKMESSAGE 0x6540
#define WERR_WAITMESSAGE 0x6580
#define WERR_GETMESSAGEPOS 0x65C0
#define WERR_GETMESSAGETIME 0x6600
#define WERR_GETMESSAGEEXTRAINFO 0x6640
#define WERR_TRANSLATEMESSAGE 0x6680
#define WERR_DISPATCHMESSAGE 0x66C0
#define WERR_SETMESSAGEQUEUE 0x6700
#define WERR_GETINPUTSTATE 0x6740
#define WERR_GETQUEUESTATUS 0x6780
#define WERR_POSTMESSAGE 0x67C0
#define WERR_SENDMESSAGE 0x6800
#define WERR_POSTAPPMESSAGE 0x6840
#define WERR_REPLYMESSAGE 0x6880
#define WERR_INSENDMESSAGE 0x68C0
#define WERR_CALLMSGFILTER 0x6900
#define WERR_POSTQUITMESSAGE 0x6940
#define WERR_REGISTERCLASS 0x6980
#define WERR_UNREGISTERCLASS 0x69C0
#define WERR_GETCLASSINFO 0x6A00
#define WERR_GETCLASSNAME 0x6A40
#define WERR_GETCLASSWORD 0x6A80
#define WERR_SETCLASSWORD 0x6AC0
#define WERR_GETCLASSLONG 0x6B00
#define WERR_SETCLASSLONG 0x6B40
#define WERR_ISWINDOW 0x6B80
#define WERR_CREATEWINDOWEX 0x6BC0
#define WERR_CREATEWINDOW 0x6C00
#define WERR_DESTROYWINDOW 0x6C40
#define WERR_GETWINDOWTASK 0x6C80
#define WERR_ISCHILD 0x6CC0
#define WERR_GETPARENT 0x6D00
#define WERR_SETPARENT 0x6D40
#define WERR_ISWINDOWVISIBLE 0x6D80
#define WERR_SHOWWINDOW 0x6DC0
#define WERR_ENABLEWINDOW 0x6E00
#define WERR_ISWINDOWENABLED 0x6E40
#define WERR_SETWINDOWTEXT 0x6E80
#define WERR_GETWINDOWTEXT 0x6EC0
#define WERR_GETWINDOWTEXTLENGTH 0x6F00
#define WERR_GETWINDOWWORD 0x6F40
#define WERR_SETWINDOWWORD 0x6F80
#define WERR_GETWINDOWLONG 0x6FC0
#define WERR_SETWINDOWLONG 0x7000
#define WERR_GETCLIENTRECT 0x7040
#define WERR_GETWINDOWRECT 0x7080
#define WERR_GETWINDOWPLACEMENT 0x70C0
#define WERR_SETWINDOWPLACEMENT 0x7100
#define WERR_SETWINDOWPOS 0x7140
#define WERR_BEGINDEFERWINDOWPOS 0x7180
#define WERR_DEFERWINDOWPOS 0x71C0
#define WERR_ENDDEFERWINDOWPOS 0x7200
#define WERR_MOVEWINDOW 0x7240
#define WERR_BRINGWINDOWTOTOP 0x7280
#define WERR_DEFWINDOWPROC 0x72C0
#define WERR_CALLWINDOWPROC 0x7300
//#define WERR_CALLWINDOWPROC 0x7340
#define WERR_ADJUSTWINDOWRECT 0x7380
#define WERR_ADJUSTWINDOWRECTEX 0x73C0
#define WERR_FLASHWINDOW 0x7400
#define WERR_SHOWOWNEDPOPUPS 0x7440
#define WERR_OPENICON 0x7480
#define WERR_CLOSEWINDOW 0x74C0
#define WERR_ANYPOPUP 0x7500
#define WERR_ISICONIC 0x7540
#define WERR_ISZOOMED 0x7580
#define WERR_CLIENTTOSCREEN 0x75C0
#define WERR_SCREENTOCLIENT 0x7600
#define WERR_MAPWINDOWPOINTS 0x7640
#define WERR_WINDOWFROMPOINT 0x7680
#define WERR_CHILDWINDOWFROMPOINT 0x76C0
#define WERR_GETDESKTOPWINDOW 0x7700
#define WERR_FINDWINDOW 0x7740
#define WERR_ENUMWINDOWS 0x7780
#define WERR_ENUMCHILDWINDOWS 0x77C0
#define WERR_ENUMTASKWINDOWS 0x7800
#define WERR_GETTOPWINDOW 0x7840
#define WERR_GETWINDOW 0x7880
#define WERR_GETNEXTWINDOW 0x78C0
#define WERR_SETPROP 0x7900
#define WERR_GETPROP 0x7940
#define WERR_REMOVEPROP 0x7980
#define WERR_ENUMPROPS 0x79C0
#define WERR_GETDC 0x7A00
#define WERR_RELEASEDC 0x7A40
#define WERR_GETWINDOWDC 0x7A80
#define WERR_GETDCEX 0x7AC0
#define WERR_BEGINPAINT 0x7B00
#define WERR_ENDPAINT 0x7B40
#define WERR_UPDATEWINDOW 0x7B80
#define WERR_EXCLUDEUPDATERGN 0x7BC0
#define WERR_LOCKWINDOWUPDATE 0x7C00
#define WERR_GETUPDATERECT 0x7C40
#define WERR_GETUPDATERGN 0x7C80
#define WERR_INVALIDATERECT 0x7CC0
#define WERR_VALIDATERECT 0x7D00
#define WERR_INVALIDATERGN 0x7D40
#define WERR_VALIDATERGN 0x7D80
#define WERR_REDRAWWINDOW 0x7DC0
#define WERR_SCROLLWINDOW 0x7E00
#define WERR_SCROLLDC 0x7E40
#define WERR_SCROLLWINDOWEX 0x7E80
#define WERR_SETACTIVEWINDOW 0x7EC0
#define WERR_GETACTIVEWINDOW 0x7F00
#define WERR_GETLASTACTIVEPOPUP 0x7F40
#define WERR_SETFOCUS 0x7F80
#define WERR_GETFOCUS 0x7FC0
#define WERR_GETKEYSTATE 0x8000
#define WERR_GETASYNCKEYSTATE 0x8040
#define WERR_GETKEYBOARDSTATE 0x8080
#define WERR_SETKEYBOARDSTATE 0x80C0
#define WERR_SETCAPTURE 0x8100
#define WERR_RELEASECAPTURE 0x8140
#define WERR_GETCAPTURE 0x8180
#define WERR_SWAPMOUSEBUTTON 0x81C0
#define WERR_GETSYSMODALWINDOW 0x8200
#define WERR_SETSYSMODALWINDOW 0x8240
#define WERR_SETTIMER 0x8280
#define WERR_KILLTIMER 0x82C0
#define WERR_LOADACCELERATORS 0x8300
#define WERR_TRANSLATEACCELERATOR 0x8340
#define WERR_ISMENU 0x8380
#define WERR_CREATEMENU 0x83C0
#define WERR_CREATEPOPUPMENU 0x8400
#define WERR_LOADMENU 0x8440
#define WERR_LOADMENUINDIRECT 0x8480
#define WERR_DESTROYMENU 0x84C0
#define WERR_GETMENU 0x8500
#define WERR_SETMENU 0x8540
#define WERR_GETSYSTEMMENU 0x8580
#define WERR_DRAWMENUBAR 0x85C0
#define WERR_HILITEMENUITEM 0x8600
#define WERR_INSERTMENU 0x8640
#define WERR_APPENDMENU 0x8680
#define WERR_MODIFYMENU 0x86C0
#define WERR_REMOVEMENU 0x8700
#define WERR_DELETEMENU 0x8740
#define WERR_CHANGEMENU 0x8780
#define WERR_ENABLEMENUITEM 0x87C0
#define WERR_CHECKMENUITEM 0x8800
#define WERR_GETSUBMENU 0x8840
#define WERR_GETMENUITEMCOUNT 0x8880
#define WERR_GETMENUITEMID 0x88C0
#define WERR_GETMENUSTRING 0x8900
#define WERR_GETMENUSTATE 0x8940
#define WERR_SETMENUITEMBITMAPS 0x8980
#define WERR_GETMENUCHECKMARKDIMENSIONS 0x89C0
#define WERR_TRACKPOPUPMENU 0x8A00
#define WERR_SETSCROLLPOS 0x8A40
#define WERR_GETSCROLLPOS 0x8A80
#define WERR_SETSCROLLRANGE 0x8AC0
#define WERR_GETSCROLLRANGE 0x8B00
#define WERR_SHOWSCROLLBAR 0x8B40
#define WERR_ENABLESCROLLBAR 0x8B80
#define WERR_OPENCLIPBOARD 0x8BC0
#define WERR_CLOSECLIPBOARD 0x8C00
#define WERR_EMPTYCLIPBOARD 0x8C40
#define WERR_GETOPENCLIPBOARDWINDOW 0x8C80
#define WERR_GETCLIPBOARDOWNER 0x8CC0
#define WERR_SETCLIPBOARDVIEWER 0x8D00
#define WERR_GETCLIPBOARDVIEWER 0x8D40
#define WERR_SETCLIPBOARDDATA 0x8D80
#define WERR_GETCLIPBOARDDATA 0x8DC0
#define WERR_ISCLIPBOARDFORMATAVAILABLE 0x8E00
#define WERR_GETPRIORITYCLIPBOARDFORMAT 0x8E40
#define WERR_REGISTERCLIPBOARDFORMAT 0x8E80
#define WERR_COUNTCLIPBOARDFORMATS 0x8EC0
#define WERR_ENUMCLIPBOARDFORMATS 0x8F00
#define WERR_GETCLIPBOARDFORMATNAME 0x8F40
#define WERR_CHANGECLIPBOARDCHAIN 0x8F80
#define WERR_LOADCURSOR 0x8FC0
#define WERR_CREATECURSOR 0x9000
#define WERR_DESTROYCURSOR 0x9040
#define WERR_COPYCURSOR 0x9080
#define WERR_SHOWCURSOR 0x90C0
#define WERR_SETCURSORPOS 0x9100
#define WERR_GETCURSORPOS 0x9140
#define WERR_SETCURSOR 0x9180
#define WERR_GETCURSOR 0x91C0
#define WERR_CLIPCURSOR 0x9200
#define WERR_GETCLIPCURSOR 0x9240
#define WERR_LOADICON 0x9280
#define WERR_CREATEICON 0x92C0
#define WERR_DESTROYICON 0x9300
#define WERR_COPYICON 0x9340
#define WERR_DRAWICON 0x9380
#define WERR_MESSAGEBOX 0x93C0
#define WERR_MESSAGEBEEP 0x9400
#define WERR_CREATECARET 0x9440
#define WERR_DESTROYCARET 0x9480
#define WERR_SETCARETPOS 0x94C0
#define WERR_GETCARETPOS 0x9500
#define WERR_HIDECARET 0x9540
#define WERR_SHOWCARET 0x9580
#define WERR_GETCARETBLINKTIME 0x95C0
#define WERR_SETCARETBLINKTIME 0x9600
#define WERR_DEFFRAMEPROC 0x9640
#define WERR_DEFMDICHILDPROC 0x9680
#define WERR_TRANSLATEMDISYSACCEL 0x96C0
#define WERR_ARRANGEICONICWINDOWS 0x9700
#define WERR_ISDIALOGMESSAGE 0x9740
#define WERR_DEFDLGPROC 0x9780
#define WERR_CREATEDIALOG 0x97C0
#define WERR_CREATEDIALOGINDIRECT 0x9800
#define WERR_CREATEDIALOGPARAM 0x9840
#define WERR_CREATEDIALOGINDIRECTPARAM 0x9880
#define WERR_DIALOGBOX 0x98C0
#define WERR_DIALOGBOXINDIRECT 0x9900
#define WERR_DIALOGBOXPARAM 0x9940
#define WERR_DIALOGBOXINDIRECTPARAM 0x9980
#define WERR_ENDDIALOG 0x99C0
#define WERR_GETDLGCTRLID 0x9A00
#define WERR_GETDLGITEM 0x9A40
#define WERR_SENDDLGITEMMESSAGE 0x9A80
#define WERR_SETDLGITEMINT 0x9AC0
#define WERR_GETDLGITEMINT 0x9B00
#define WERR_SETDLGITEMTEXT 0x9B40
#define WERR_GETDLGITEMTEXT 0x9B80
#define WERR_CHECKDLGBUTTON 0x9BC0
#define WERR_CHECKRADIOBUTTON 0x9C00
#define WERR_ISDLGBUTTONCHECKED 0x9C40
#define WERR_GETNEXTDLGGROUPITEM 0x9C80
#define WERR_GETNEXTDLGTABITEM 0x9CC0
#define WERR_MAPDIALOGRECT 0x9D00
#define WERR_GETDIALOGBASEUNITS 0x9D40
#define WERR_DLGDIRLIST 0x9D80
#define WERR_DLGDIRSELECT 0x9DC0
#define WERR_DLGDIRLISTCOMBOBOX 0x9E00
#define WERR_DLGDIRSELECTCOMBOBOX 0x9E40
#define WERR_DLGDIRSELECTEX 0x9E80
#define WERR_DLGDIRSELECTCOMBOBOXEX 0x9EC0
#define WERR_SETWINDOWSHOOK 0x9F00
#define WERR_DEFHOOKPROC 0x9F40
//#define WERR_SETWINDOWSHOOK 0x9F80
//#define WERR_DEFHOOKPROC 0x9FC0
#define WERR_UNHOOKWINDOWSHOOK 0xA000
#define WERR_SETWINDOWSHOOKEX 0xA040
#define WERR_UNHOOKWINDOWSHOOKEX 0xA080
#define WERR_CALLNEXTHOOKEX 0xA0C0
#define WERR_ENABLEHARDWAREINPUT 0xA100
#define WERR_QUERYSENDMESSAGE 0xA140
#define WERR_LOCKINPUT 0xA180
#define WERR_GETSYSTEMDEBUGSTATE 0xA1C0
#define WERR_WINHELP 0xA200
#define WERR_OPENSOUND 0xA240
#define WERR_CLOSESOUND 0xA280
#define WERR_STARTSOUND 0xA2C0
#define WERR_STOPSOUND 0xA300
#define WERR_SETVOICEQUEUESIZE 0xA340
#define WERR_SETVOICENOTE 0xA380
#define WERR_SETVOICEACCENT 0xA3C0
#define WERR_SETVOICEENVELOPE 0xA400
#define WERR_SETVOICESOUND 0xA440
#define WERR_SETVOICETHRESHOLD 0xA480
#define WERR_GETTHRESHOLDEVENT 0xA4C0
#define WERR_GETTHRESHOLDSTATUS 0xA500
#define WERR_SETSOUNDNOISE 0xA540
#define WERR_WAITSOUNDSTATE 0xA580
#define WERR_SYNCALLVOICES 0xA5C0
#define WERR_COUNTVOICENOTES 0xA600
#define WERR_BUILDCOMMDCB 0xA640
#define WERR_OPENCOMM 0xA680
#define WERR_CLOSECOMM 0xA6C0
#define WERR_READCOMM 0xA700
#define WERR_WRITECOMM 0xA740
#define WERR_UNGETCOMMCHAR 0xA780
#define WERR_FLUSHCOMM 0xA7C0
#define WERR_TRANSMITCOMMCHAR 0xA800
#define WERR_SETCOMMSTATE 0xA840
#define WERR_GETCOMMSTATE 0xA880
#define WERR_GETCOMMERROR 0xA8C0
#define WERR_SETCOMMBREAK 0xA900
#define WERR_CLEARCOMMBREAK 0xA940
#define WERR_SETCOMMEVENTMASK 0xA980
#define WERR_GETCOMMEVENTMASK 0xA9C0
#define WERR_ESCAPECOMMFUNCTION 0xAA00
#define WERR_ENABLECOMMNOTIFICATION 0xAA40
#define WERR_WVSPRINTF 0xAA80
#define WERR_DEFDRIVERPROC 0xAAC0
#define WERR_OPENDRIVER 0xAB00
#define WERR_CLOSEDRIVER 0xAB40
#define WERR_SENDDRIVERMESSAGE 0xAB80
#define WERR_GETDRIVERMODULEHANDLE 0xABC0
#define WERR_GETNEXTDRIVER 0xAC00
#define WERR_GETDRIVERINFO 0xAC40

#endif // _ERRORMOD_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\faxcodec.h ===
// Copyright (c) Microsoft Corp. 1992-94
/*==============================================================================
The prototypes in this header file define an API for the Fax Codec DLL.

DATE				NAME			COMMENTS
25-Nov-92		RajeevD   Created.
13-Apr-93		RajeevD		Changed to Bring Your Own Memory (BYOM :=) API.
01-Nov-93   RajeevD   Defined structure for initialization parameters.
21-Jan-94   RajeevD   Split FaxCodecRevBuf into BitReverseBuf and InvertBuf.
19-Jul-94   RajeevD   Added nTypeOut=NULL_DATA and FaxCodecCount.
==============================================================================*/
#ifndef _FAXCODEC_
#define _FAXCODEC_

#include <windows.h>
#include <buffers.h>

/*==============================================================================
The FC_PARAM structure specifies the conversion to be initialized.
This matrix indicates the valid combinations of nTypeIn and nTypeOut.

                             nTypeOut
                             
                 MH     MR     MMR    LRAW    NULL
                 
        MH               *      *       *      *

        MR       *              *       *      *
nTypeIn
        MMR      *       *              *

        LRAW     *       *      * 
        
==============================================================================*/
typedef struct
#ifdef __cplusplus
  FAR FC_PARAM
#endif
{
	DWORD nTypeIn;      // input data type:  {MH|MR|MMR|LRAW}_DATA
	DWORD nTypeOut;     // output type type: {MH|MR|MMR|LRAW|NULL}_DATA
	UINT  cbLine;       // scan line byte width (must be multiple of 4)
	UINT  nKFactor;     // K factor (significant for nTypeOut==MR_DATA)
}
	FC_PARAM, FAR *LPFC_PARAM;

#ifdef __cplusplus
extern "C" {
#endif

/*==============================================================================
FaxCodecInit() initializes a context for a conversion.  The client may pass a 
NULL context pointer to query for the exact size of the context, allocate the
context memory, and call a second time to initialize.
==============================================================================*/
UINT                     // size of context (0 on failure)
WINAPI FaxCodecInit
(
	LPVOID     lpContext,  // context pointer (or NULL on query)
	LPFC_PARAM lpParam	   // initialization parameters
);

typedef UINT (WINAPI *LPFN_FAXCODECINIT)
	(LPVOID, LPFC_PARAM);

// Return codes for FaxCodecConvert
typedef UINT FC_STATUS;
#define FC_INPUT_EMPTY 0
#define FC_OUTPUT_FULL 1
#define FC_DECODE_ERR  4 // only for nTypeIn==MMR_DATA

/*==============================================================================
FaxCodecConvert() executes the conversion specified in FaxCodecInit().

In the input buffer, lpbBegData is advanced and wLengthData is decremented as 
data is consumed.  If the caller wants to retain the input data, both must be 
saved and restored.  If the input type is LRAW_DATA, wLengthData must be a
multiple of 4.

In the output buffer, wLengthData is incremented as data is appended.  If the
output type is LRAW_DATA, an whole number of scan lines are produced.

To flush any output data at the end of a page, pass a NULL input buffer or a
zero length buffer with dwMetaData set to END_OF_PAGE.

Returns when the input buffer is empty or the output buffer full.
==============================================================================*/
FC_STATUS             // status
WINAPI FaxCodecConvert
(
	LPVOID   lpContext, // context pointer
	LPBUFFER lpbufIn,   // input buffer (NULL at end of page)
	LPBUFFER lpbufOut   // output buffer
);

typedef UINT (WINAPI *LPFN_FAXCODECCONVERT)
	(LPVOID, LPBUFFER, LPBUFFER);

/*==============================================================================
The FC_COUNT structure accumulates various counters during FaxCodecConvert.
==============================================================================*/
typedef struct
{
	DWORD cTotalGood;    // total good scan lines
	DWORD cTotalBad;     // total bad scan lines
	DWORD cMaxRunBad;    // maximum consecutive bad
}
	FC_COUNT, FAR *LPFC_COUNT;

/*==============================================================================
FaxCodecCount() reports and resets the internal counters.
==============================================================================*/
void WINAPI FaxCodecCount
(
	LPVOID     lpContext,
	LPFC_COUNT lpCount
);

typedef void (WINAPI *LPFN_FAXCODECCOUNT)
	(LPVOID, LPFC_COUNT);

/*==============================================================================
BitReverseBuf() performs a bit reversal of buffer data.  The dwMetaData field is
toggled between LRAW_DATA and HRAW_DATA.  As with all scan lines, the length 
of data (wLengthData) must be a 32-bit multiple.  For best performance the start
of the data (lpbBegData) should be 32-bit aligned and the data predominantly 0.
==============================================================================*/
void WINAPI BitReverseBuf (LPBUFFER lpbuf);

/*==============================================================================
InvertBuf() inverts buffer data.  As with all scan lines, the length of data 
(wLengthData) must be a 32-bit multiple.  For best performance, the start of 
data (lpbBegData) should be 32-bit aligned.
==============================================================================*/
void WINAPI InvertBuf (LPBUFFER lpbuf);

/*==============================================================================
FaxCodecChange() produces a change vector for an LRAW scan line.
==============================================================================*/
typedef short FAR* LPSHORT;

// Slack Parameters.
#define RAWBUF_SLACK 2
#define CHANGE_SLACK 12
#define OUTBUF_SLACK 16

extern void WINAPI FaxCodecChange
(
	LPBYTE  lpbLine,  // LRAW scan line
	UINT    cbLine,   // scan line width
  LPSHORT lpsChange // change vector
);

#ifdef __cplusplus
} // extern "C" {
#endif

#endif // _FAXCODEC_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\faxspool.h ===
// Copyright (c) Microsoft Corp. 1993-94
/*==============================================================================
The Spool API is a file layer for buffers which supports random access to pages.
This module is compiled to use secure files on IFAX and plain files on Windows.

27-Oct-93    RajeevD    Created.
06-Dec-93    RajeevD    Integrated with render server.
22-Dec-93    RajeevD    Added SpoolReadSetPage.
06-Sep-94    RajeevD    Added SpoolRepairFile.
09-Sep-94    RajeevD    Added SpoolReadCountPages
==============================================================================*/
#ifndef _FAXSPOOL_
#define _FAXSPOOL_

#include <ifaxos.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct      // spool file header
{
	WORD  xRes;       // X resolution [dpi]
	WORD  yRes;       // Y resolution [dpi]
	WORD  cbLine;     // X extent [bytes]
}
	SPOOL_HEADER, FAR *LPSPOOL_HEADER;

/*==============================================================================
SpoolWriteOpen creates a context for writing buffers to a spool file.
==============================================================================*/
LPVOID                       // context pointer (NULL on failure)
WINAPI
SpoolWriteOpen
(
	LPVOID lpFilePath,         // IFAX file key or Windows file name
	LPSPOOL_HEADER lpHeader    // image attributes to record in file
);

/*==============================================================================
SpoolWriteBuf dumps buffers to the spool file.  The buffers are not freed or
modified.  Each page is terminated by passing a buffer with dwMetaData set to
END_OF_PAGE, except the last page, which is terminated by END_OF_JOB.  IFAX
files are flushed at the end of each page.  This call may fail if the disk
becomes full, in which case the caller is responsible for deleting the file and
destroying the context.
==============================================================================*/
BOOL                         // TRUE (success) or FALSE (failure)
WINAPI
SpoolWritePutBuf
(
	LPVOID lpContext,          // context returned from SpoolWriteOpen
	LPBUFFER lpbuf             // buffer to be written to spool file
);

/*==============================================================================
SpoolWriteClose destroys a context returned from SpoolWriteOpen.
==============================================================================*/
void
WINAPI
SpoolWriteClose
(
	LPVOID lpContext           // context returned from SpoolWriteOpen
);

/*==============================================================================
SpoolRepairFile repairs a truncated file created by SpoolWriteOpen but not
flushed by SpoolWriteClose due to a system failure.
==============================================================================*/
WORD                         // number of complete pages recovered
WINAPI
SpoolRepairFile
(
	LPVOID lpFileIn,           // damaged file 
	LPVOID lpFileOut           // repaired file
);

/*==============================================================================
SpoolReadOpen creates a context for reading buffers from a completed spool file.
==============================================================================*/
LPVOID                       // context pointer (NULL on failure)
WINAPI
SpoolReadOpen
(
	LPVOID lpFilePath,         // IFAX file key or Windows file name
	LPSPOOL_HEADER lpHeader    // image attributes to fill (or NULL)
);

/*==============================================================================
SpoolReadCountPage returns the number of pages in a spool file.
==============================================================================*/
WORD                         // number of pages
WINAPI
SpoolReadCountPages
(
	LPVOID lpContext           // context returned from SpoolReadOpen
);

/*==============================================================================
SpoolReadSetPage sets the spool file to the start of the specified page.
==============================================================================*/
BOOL                         // TRUE (success) or FALSE (failure)
WINAPI
SpoolReadSetPage
(
	LPVOID lpContext,          // context returned from SpoolReadOpen
	WORD   iPage               // page index (first page has index 0)
);

/*==============================================================================
SpoolReadGetBuf to retrieves the next buffer from the spool file.  Each page is
terminated by an END_OF_PAGE buffer, except the last page, which is terminated
by END_OF_JOB.  The call may fail if a buffer cannot be allocated.
==============================================================================*/
LPBUFFER                     // returns filled buffer (NULL on failure)
WINAPI
SpoolReadGetBuf
(
	LPVOID lpContext           // context returned from SpoolReadOpen
);

/*==============================================================================
SpoolFreeBuf can free buffers returned from SpoolReadGetBuf.
==============================================================================*/
BOOL                         // TRUE  (success) or FALSE (failure)
WINAPI
SpoolFreeBuf
(
	LPBUFFER lpbuf             // buffer returned from SpoolReadGetBuf
);

/*==============================================================================
SpoolReadClose destroys a context returned from SpoolReadOpen.
==============================================================================*/
void
WINAPI
SpoolReadClose 
(
	LPVOID lpContext           // context returned from SpoolReadOpen
);


#ifdef __cplusplus
} // extern "C"
#endif

#endif // _FAXSPOOL_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\oleutils.h ===
/*
   Microsoft Corp. (C) Copyright 1994
   Developed under contract by Numbers & Co.
----------------------------------------------------------------------------

        name:   Elliot Viewer - Chicago Viewer Utility
        						Cloned from the IFAX Message Viewing Utility

        file:   oleutils.h

    comments:   Functions to support OLE2 interactions
            
        
		NOTE: This header must be used with the LARGE memory model
		
----------------------------------------------------------------------------
   Microsoft Corp. (C) Copyright 1994
   Developed under contract by Numbers & Co.
*/
       
#ifndef OLEUTILS_H
#define OLEUTILS_H
    
    
#include <ole2.h>


/*
	Version constants
 */
#define AWD_SIGNATURE		0
#define AWD_SIGNATURE_STR  "0"

/*
	This has the "current" version. As new ones come along shift this
	down to a new AWD_VERxx... set and add a check to 
	CViewer::get_awd_version. Add a new version check and any code
	needed to handle whatever is different with the new version to 
	appropriate places in oleutils.cpp, etc...
 */
#define AWD_VERSION			1
#define AWD_VERSION_STR	   "1"

// this is same as AWD_VERSION, used by the transport
#define AWD_VER1A			1
#define AWD_VER1A_STR	   "1.0 (pages = docs)"


/*
	Recognized extensions
 */
#define BMP_EXT			_T("bmp")
#define DIB_EXT			_T("dib")
#define DCX_EXT			_T("dcx")
#define RBA_EXT			_T("rba")
#define RMF_EXT			_T("rmf")
#define AWD_EXT			_T("awd")


/*
	AWD flags
 */
#define AWD_FIT_WIDTH	0x00000001
#define AWD_FIT_HEIGHT	0x00000002
#define AWD_INVERT		0x00000010
#define AWD_WASINVERTED	0x40000000
#define AWD_IGNORE		0x80000000

       
/*
	AWD file structures
 */
#pragma pack( 1 ) // THESE STRUCTS MUST BE BYTE ALIGNED
typedef struct
	{
	WORD  Signature;
	WORD  Version;
	DATE  dtLastChange;
	DWORD awdFlags;
	WORD  Rotation;
	WORD  ScaleX;
	WORD  ScaleY;
	}
	PAGE_INFORMATION;
	
	
typedef struct
	{
	WORD  Signature;
	WORD  Version;
	PAGE_INFORMATION PageInformation;
	}
	DOCUMENT_INFORMATION;
		
	
	
typedef struct
	{
	WORD  Signature;
	WORD  Version;
	DATE  dtLastChange;
	DWORD awdFlags;
	WORD  Author_bufferlen; // includes the UNICODE '\0' terminator
	WCHAR Author[1];		// UNICODE !!!
	}
	OVERLAY_INFORMATION;



// defs for summary stream- must be 32bit aligned
#pragma pack( 4 )


#define SUMMARY_FMTID( fmtid )                                          \
	CLSID fmtid =														\
	{0xF29F85E0, 0x4FF9, 0x1068, {0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9}}
				 
				 

#define PID_TITLE	        0x00000002
#define PID_SUBJECT         0x00000003
#define PID_AUTHOR          0x00000004
#define PID_KEYWORDS        0x00000005
#define PID_COMMENTS        0x00000006
#define PID_TEMPLATE        0x00000007
#define PID_LASTAUTHOR      0x00000008
#define PID_REVNUMBER       0x00000009
#define PID_EDITTIME        0x0000000a
#define PID_LASTPRINTED     0x0000000b
#define PID_CREATE_DTM      0x0000000c
#define PID_LASTSAVE_DTM	0x0000000d
#define PID_PAGECOUNT       0x0000000e
#define PID_WORDCOUNT       0x0000000f
#define PID_CHARCOUNT       0x00000010
#define PID_THUMBNAIL       0x00000011
#define PID_APPNAME         0x00000012

// BKD 1997-7-9: done to disable warning message.  This is probably bad that the oleutils
// uses a macro that's now been reserved and probably should be changed.
// FIXBKD
#ifdef PID_SECURITY
#undef PID_SECURITY
#endif // PID_SECURITY

#define PID_SECURITY        0x00000013


typedef struct
	{
	DWORD dwType;
	DATE  date;
	}
	date_prop_t;
	

typedef struct
	{
	DWORD dwType;
	DWORD wval;
	}
	wval_prop_t;


typedef struct
	{
	DWORD dwType;
	DWORD numbytes;
	char  string[80]; 
	}
	string_prop_t;
	

typedef struct
	{
	DWORD PropertyID;
	DWORD dwOffset;
	}
	PROPERTYIDOFFSET;


typedef struct
	{
	DWORD cbSection;
	DWORD cProperties;
	
	PROPERTYIDOFFSET revnum_pair;
	PROPERTYIDOFFSET lastprt_pair;
	PROPERTYIDOFFSET create_dtm_pair;
	PROPERTYIDOFFSET lastsaved_dtm_pair;
	PROPERTYIDOFFSET numpages_pair;
	PROPERTYIDOFFSET appname_pair;
	PROPERTYIDOFFSET security_pair;
	PROPERTYIDOFFSET author_pair;

	string_prop_t 	 revnum;
	date_prop_t 	 lastprt;
	date_prop_t 	 create_dtm;
	date_prop_t 	 lastsaved_dtm;
	wval_prop_t 	 numpages;
	string_prop_t 	 appname;
	wval_prop_t 	 security;
	string_prop_t 	 author;
	}
	summaryPROPERTYSECTION;	
	

typedef struct
	{
	GUID FormatID;
	DWORD dwOffset;
	}
	FORMATIDOFFSET;
	
           
// quick and dirty summary stream. Not all properties are used           
typedef struct
	{
	WORD  wByteOrder;
	WORD  wFormat;
	DWORD dwOSVer;
	CLSID clsID;
	DWORD cSections;
	FORMATIDOFFSET section1_pair;
	summaryPROPERTYSECTION section1;
	}
	summaryPROPERTYSET;



#define NUM_USED_PROPS  8

/*
	The def for summary_info_t was moved to viewerob.h so that 
	every module doesn't have to pull in oleutils.h because of the
	summary_info_t variable that is in CViewer.
 */
//typedef struct
//	{
//	:
//	:
//	}
//	summary_info_t;


// structs for reading summary stream
typedef struct
	{
	WORD  wByteOrder;
	WORD  wFormat;
	DWORD dwOSVer;
	CLSID clsID;
	DWORD cSections;
	}
	summary_header_t;


typedef struct
	{
	DWORD cbSection;
	DWORD cProperties;
	}
	summary_section_t;
	

#pragma pack() // go back to default packing
	
// BKD:  I snipped the prototypes, since they're not used
// in the awd converter.


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\ifaxos.h ===
#ifndef _INC_IFAXOS
#define _INC_IFAXOS

#ifdef __cplusplus
extern "C" {
#endif

// add SHIP_BUILD from Win95fax retail builds
#ifndef DEBUG
#ifdef WIN32
#define SHIP_BUILD
#endif
#endif

// -------------------------- Include Files ------------------------------------

#ifdef IFBGPROC
// Remove appropriate parts of windows.h
// #define NOKERNEL
#ifndef WANTGDI
#define NOGDI
#endif
// #define  NOUSER
#define NOSOUND
// #define  NOCOMM
// #define  NODRIVERS
// #define  NOMINMAX
// #define  NOLOGERROR
// #define  NOPROFILER
// #define  NOMEMMGR
// #define  NOLFILEIO
// #define  NOOPENFILE
// #define  NORESOURCE
// #define  NOATOM
// #define  NOLANGUAGE
// #define  NOLSTRING
// #define  NODBCS
#define NOKEYBOARDINFO
#define NOGDICAPMASKS
#define NOCOLOR
#ifndef WANTGDI
#define NOGDIOBJ
#define NOBITMAP
#endif
#define NODRAWTEXT
#define NOTEXTMETRIC
#define NOSCALABLEFONT
#define NORASTEROPS
#define NOMETAFILE
#define NOSYSMETRICS
#define NOSYSTEMPARAMSINFO
// #define NOMSG
#define NOWINSTYLES
#define NOWINOFFSETS
// #define  NOSHOWWINDOW
#define NODEFERWINDOWPOS
#define NOVIRTUALKEYCODES
#define NOKEYSTATES
#define NOWH
#define NOMENUS
#define NOSCROLL
#define NOCLIPBOARD
#define NOICONS
#define NOMB
#define NOSYSCOMMANDS
#define NOMDI
#define NOCTLMGR
#define NOWINMESSAGES
#define NOHELP
#endif

// put strict type checking on ... and get rid of multiple define warnings
#ifndef STRICT
#define STRICT
#endif

#ifndef WINDRV
#   ifdef WIN32
#       define _INC_OLE
#   endif
#   include <windows.h>
#  ifdef   WIN32
#      include <windowsx.h>
#  endif
#endif

#ifdef WIN32
#define DECLSPEC_IMPORT __declspec(dllimport)
#endif

#ifndef WIN32
// Define WINBASE to avoid mapi including some duplicate definitions
#define _WINBASE_
#endif

//-------------------------- General Defines ---------------------

#ifndef WIN32
#define STATIC  static
#define CONST   const
#define CHAR    char
#define UCHAR   BYTE
#define INT     int

typedef short    SHORT;
typedef unsigned long ULONG;
typedef unsigned short USHORT;
typedef CHAR    *PCHAR;
typedef VOID    *PVOID;
#endif

typedef CHAR    FAR *LPCHAR;
typedef CHAR    NEAR *NPCHAR;

#define CARRAIGE_RETURN 0x0D
#define LINEFEED 0x0A
#define BACKSPACE 0x08
#define CNULL   0x00

#ifndef WIN32
#ifndef MAKEWORD
#  define MAKEWORD(low, high) ((WORD)(((BYTE)(low)) | (((WORD)((BYTE)(high))) << 8)))
#endif
#  define EXPORT_DLL
#  define IMPORT_DLL
#else
#  ifndef HTASK
#     define HTASK HANDLE
#  endif
#  define __export __declspec( dllexport )
#  define _export  __declspec( dllexport )
#  define IMPORT_DLL __declspec( dllimport )
#  define EXPORT_DLL __declspec( dllexport )
#endif

// --------------- RESOURCE management -------------------------------

// Always define this for now ...
#ifndef SHIP_BUILD
// #if defined(VALIDATE) || defined(DEBUGAPI) || defined(DEBUG)

/********
    @doc    EXTERNAL    RESOURCE IFAXOS

    @type   VOID |  RESOURCE_ALLOC_FLAGS | Lists the resource management options
            for OS resource accounting.

    @emem   RES_ALLOC_TASK  |  This flag indicates that the resource in question
            is being allocated on behalf of the current process. The resource
            should not be directly passed on to any other process context. It
            should be freed by this process before termination - else the kernel
            will free it when the process dies (if running in debug).
            Ownership automatically gets transferred between tasks when standard
            IPC methods like pipes are used to transfer resources like Buffers.

    @emem   RES_ALLOC_NONE  | This flag is used to allocate resources which should
            not be accounted to any system module. The calling party essentially
            undertakes full responsibility for freeing this object. This is mainly
            to be used for resource allocated on behalf of messages in the store
            since their ownership is transferred to the current process which has
            the message open.

    @emem   HINSTANCE_DLL   | If the allocated resource is to be assigned to the
            calling DLL, the hinstance of the DLL should be passed in as the value
            of the ResourceFlags Word. These resources will be freed (in the debug
            version) when the DLL terminates. They will not be assigned to any
            particular process context.

    @xref   <f IFBufAlloc> <f IFMemAlloc> <f CreateMutex> <f CreateEvent>
            <f IFPipeCreate> <f IFProcSetResFlags>
********/

#define RES_ALLOC_TASK  0x0000
#define RES_ALLOC_NONE  0x0001
#define RES_ALLOC_INTERNAL  0x0002
#define RES_ALLOC_CRITSEC  0x0003

#if defined(WFW) || defined(WIN32)

#define IFProcSetResFlags(wResFlags)  (0)

#else

extern EXPORT_DLL VOID WINAPI IFProcSetResFlags(WORD wResFlags);

#endif

#else

#define IFProcSetResFlags(p1) (0)

#endif

// --------------- ERROR Handling ------------------------------------

#include <errormod.h>

/********
    @doc    EXTERNAL    ERROR   IFAXOS

    @api    DWORD    | IFErrAssemble   | Forms an IFAX Error dword out of its components.

    @parm   BYTE    | bProcessID    | Identifies the process in whose context the error
            occured. Must be one of the predefined system process ID's - see <t SYSTEM_PROCESSES>
            for the list. This field does not need to be filled in until an error is
            propagated across a process boundary. If not being set to a valid PROCID, this
            should be initilialized to one of the following values:
            @flag  PROCID_WIN32 | if <p bModuleID> is set to MODID_WIN32.
            @flag  PROCID_NONE | for all other cases.

    @parm   BYTE    | bModuleID | Identifies the module reporting the error. MUST be
            one of the predefined system module ID's - see <t SYSTEM_MODULES> for the
            list.

    @parm   WORD    | wApiCode  | Identifies the API code for the error in the module indicated
            by <p bModuleID>. All Api codes should be defined in the file errormod.h. Api codes should
            be defined so that the low 6 bits are zero. This allows both the <p wApiCode> and the
            <p wErrorCode> to be logical OR'ed together and stored as a single word.

    @parm   WORD    | wErrorCode    | Identifies the error code. The format
            of this is module dependent. For uniformity however, it is highly
            encouraged that all IFAX modules use a standard format for this error word.
            This standard format reserves the first 6 bits for an error code,
            and the high 10 bits for an API identifier.

            If the IFAX format is being used, the <p wApiCode>
            parameter should be used to pass in the high 10 bits, and the <p wErrorCode> (This
            parameter!) should be used to pass in the 6 bit error code. Values upto ERR_FUNCTION_START
            are reserved for standard system errors - see <t SYSTEM_ERROR_VALUES> for the list.
            Error values should be positive and less than 64.

            Other modules like the filesystem conform completely to the Win32 Error space. These
            should set <p wErrorCode> to standard Win32 errors (use all 16 bits) and leave
            the <p wApiCode> as API_WIN32.

            Still others need to use all 16 bits in a custom manner - like the Printer Drivers.
            These *must* set the <p bModuleID> correctly so that the error can be interpreted
            appropriately. Standard processes like the UI have to understand these error codes,
            so only inbuilt system modules which they have knowledge about can use custom codes.
            These should set the wApiCode to API_NONE.

    @rdesc  Returns the DWORD representation for this error. This allows this to be directly
            passed in as input to <f SetLastError>.

    @ex     Example usage |

            SetLastError(IFErrAssemble(PROCID_NONE,MODID_IFKERNEL,API_IFK_POSTMESSAGE,ERR_INVALID_PARAM));

    @xref   <f IFErrGetModule> <f IFErrGetProcess> <f GetIFErrorErrcode> <f SetLastError>
            <f GetIFErrorApicode> <t SYSTEM_MODULES> <t SYSTEM_PROCESSES> <t SYSTEM_ERROR_VALUES>
            <f GetLastError> <f IFNVRamSetError> <f GetIFErrorCustomErrcode>
********/

#define IFErrAssemble(process,module,call,error) \
    MAKELONG((WORD)call|(WORD)error, MAKEWORD((BYTE)module, (BYTE)process))

/*********
    @doc    EXTERNAL ERROR  IFAXOS

    @api    BYTE    | IFErrGetModule  | Retrieves the module ID from an IFAX Error.

    @parm   DWORD   | errvar    | The error value.

    @rdesc  Returns the module ID. This will be from the list specified in <t SYSTEM_MODULES>.

    @xref   <f IFErrAssemble> <t SYSTEM_MODULES> <f IFErrSetModule>

    @api    BYTE    | IFErrGetProcess  | Retrieves the process ID from an IFAX Error.

    @parm   DWORD   | errvar    | The error value.

    @rdesc  Returns the process ID. This will be from the list specified in <t SYSTEM_PROCESSES>.

    @xref   <f IFErrAssemble> <t SYSTEM_PROCESSES> <f IFErrSetProcess>

    @api    WORD    | GetIFErrorErrcode  | Retrieves the error code from an IFAX Error.

    @parm   DWORD   | errvar    | The error value.

    @rdesc  Returns the error code. If less than ERR_FUNCTION_START, this is from the list
            in <t SYSTEM_ERROR_VALUES>.

    @xref   <f IFErrAssemble> <t SYSTEM_ERROR_VALUES>

    @api    WORD    | GetIFErrorCustomErrcode  | Retrieves a custom 16 bit error code from an IFAX Error.

    @parm   DWORD   | errvar    | The error value.

    @rdesc  Returns the error code. This might be a Win32 error code if the module ID was
            MODID_WIN32, or a custom error code.

    @xref   <f IFErrAssemble> <t SYSTEM_ERROR_VALUES>

    @api    WORD    | GetIFErrorApicode  | Retrieves the API code from an IFAX Error.

    @parm   DWORD   | errvar    | The error value.

    @rdesc  Returns the API code. API codes for all the system modules are documented in
            the file errormod.h

    @xref   <f IFErrAssemble> <t SYSTEM_MODULES>

    @api    DWORD    | IFErrSetModule  | Sets the module ID in an IFAX Error.

    @parm   DWORD   | errvar    | The error value. It's value is not changed by the call.

    @parm   BYTE    | bModule   | The module ID to be set from the list in <t SYSTEM_MODULES>.

    @rdesc  Returns the DWORD representation of the new error code.

    @xref   <f IFErrAssemble> <t SYSTEM_MODULES> <f IFErrGetModule>

    @api    DWORD    | IFErrSetProcess  | Sets the Process ID in an IFAX Error.

    @parm   DWORD   | errvar    | The error value. Its value is not changed by the call.

    @parm   BYTE    | bProcess   | The Process ID to be set from the list in <t SYSTEM_PROCESSES>.

    @rdesc  Returns the DWORD representation of the new error code.

    @xref   <f IFErrAssemble> <t SYSTEM_PROCESSES> <f IFErrGetProcess>

********/
#define IFErrSetModule(errvar,module)  \
    MAKELONG(LOWORD((DWORD)errvar),MAKEWORD((BYTE)module, HIBYTE(HIWORD((DWORD)errvar))))
#define IFErrSetProcess(errvar,process)    \
    MAKELONG(LOWORD((DWORD)errvar),MAKEWORD(LOBYTE(HIWORD((DWORD)errvar)), (BYTE)process))
#define IFErrGetModule(errvar)    LOBYTE(HIWORD((DWORD)errvar))
#define IFErrGetProcess(errvar)   HIBYTE(HIWORD((DWORD)errvar))
#define GetIFErrorErrcode(errvar)   (LOWORD((DWORD)errvar) & 0x003F)
#define GetIFErrorApicode(errvar)   (LOWORD((DWORD)errvar) & 0xFFC0)
#define GetIFErrorCustomErrcode(errvar) LOWORD((DWORD)errvar)

/********
   @doc    EXTERNAL    DEFINES     ERROR   IFAXOS

    @type   VOID | SYSTEM_MODULES  | Identifiers for all the standard system modules.

    @emem   MODID_NONE          | Use this if you are not setting the module ID. DONT USE ZERO !!
    @emem   MODID_WIN32         | Set for modules returning standard Win32 system error codes
    @emem   MODID_BOSS          | ID = 1    Error in BOSS
    @emem   MODID_WINMODULE     | ID = 2    All windows modules including UER/GDI/KERNEL
    @emem   MODID_IFKERNEL      | ID = 3
    @emem   MODID_IFFILESYS     | ID = 4
    @emem   MODID_MSGSTORE      | ID = 5
    @emem   MODID_LINEARIZER    | ID = 6
    @emem   MODID_SECURITY      | ID = 7
    @emem   MODID_IFPRINT       | ID = 8    High level Printer Driver
    @emem   MODID_IFSCAN        | ID = 9    High level Scanner Driver
    @emem   MODID_IFSIPX        | ID = 10   SPX/IPX Stack
    @emem   MODID_REND_SERVER   | ID = 11   Rendering Server
    @emem   MODID_FORMAT_RES    | ID = 12   Format Resolution
    @emem   MODID_IFFILE        | ID = 13   IFFiles
    @emem   MODID_TEXTRENDERER  | ID = 14   Ascii Renderer
    @emem   MODID_DIGCOVPAGE    | ID = 15   Digital Coverpage
    @emem   MODID_AWBRANDER     | ID = 16   Fax Brander
    @emem   MODID_MSGSVR        | ID = 17   Message Server
    @emem   MODID_MSGHNDLR      | ID = 18  Per-Connection message handler
    @emem   MODID_MODEMDRV      | ID = 19  Modem driver
    @emem   MODID_PSIFAX       | ID = 20   PSI Fax protocol
    @emem   MODID_AWT30            | ID = 21   
    @emem   MODID_PSIFAXBG     | ID = 22
    @emem   MODID_AWNSF            | ID = 23
    @emem   MODID_FAXCODEC      | ID = 24
    @emem   MODID_MSGPUMP       | ID = 25
    @emem   MODID_AWREPORT      | ID = 26
    @emem   MODID_MSGSVRD		| ID = 27


    @emem   MODID_CUSTOM        | ID = 160  Beyond this are custom/installable modules

    @xref   <f IFErrAssemble> <f IFErrGetModule>
********/
// System Module IDs
#define MODID_WIN32         0
#define MODID_BOSS          1
#define MODID_WINMODULE     2
#define MODID_IFKERNEL      3
#define MODID_IFFILESYS     4
#define MODID_MSGSTORE      5
#define MODID_LINEARIZER    6
#define MODID_SECURITY      7
#define MODID_IFPRINT       8
#define MODID_IFSCAN        9
#define MODID_IFSIPX        10
#define MODID_REND_SERVER   11
#define MODID_FORMAT_RES    12
#define MODID_IFFILE        13
#define MODID_TEXTRENDERER  14
#define MODID_DIGCOVPAGE    15
#define MODID_AWBRANDER     16
#define MODID_MSGSVR        17
#define MODID_MSGHNDLR      18
#define MODID_MODEMDRV     19
#define MODID_PSIFAX       20
#define MODID_AWT30            21  
#define MODID_PSIFAXBG     22
#define MODID_AWNSF            23
#define MODID_FAXCODEC      24
#define MODID_MSGPUMP       25
#define MODID_AWREPORT      26
#define MODID_MSGSVRD		27

#define MAXMODID              26

#define MODID_NONE          159

// Special module ID's
#define MODID_CUSTOM        160

// Strings used in debug version for friendly display
#define SYSMODULESTRINGS   \
    { "Win32", "Boss", "Windows", "IFKernel", "FileSystem", "Msg Store", "Linearizer",    \
      "Security", "HLPrintDriver", "HLScanDriver", "IPX/SPX", "RendServer", \
      "Format Res", "IFFile", "AsciiRenderer","DigCovPage","AWBrander", \
      "Msg Server", "Msg Handler", "Modem Driver", "PSIFAX", "AWT30",  \
     "PSIFAXBG", "AWNSF", "Fax Codec", "Msg Pump" , "Awreport" \
    }

/********
   @doc    EXTERNAL    DEFINES     ERROR   IFAXOS

    @type   VOID | SYSTEM_PROCESSES  | Identifiers for all the standard system processes.

    @emem   PROCID_WIN32        | Used to initialize for Win32 modules.
    @emem   PROCID_NONE         | Used when process context does not need to be set.
    @emem   PROCID_MSGSCHED     | ID = 0x21
    @emem   PROCID_JOBPROCESS   | ID = 0x22
    @emem   PROCID_UI           | ID = 0x23
    @emem   PROCID_PRINTER      | ID = 0x24
    @emem   PROCID_SCANNER      | ID = 0x25
    @emem   PROCID_MSGSVR       | ID = 0x26
    @emem   PROCID_GRRENDER     | ID = 0x27
    @emem   PROCID_MSGHNDLR     | ID = 0x28
    @emem   PROCID_PARADEV 		| ID = 0x29
    @emem   PROCID_UIBGPROC 	| ID = 0x30

    @comm   All Process ID's need to have the 6th bit set to be compatible with the
            standard Win32 error definitions.

    @xref   <f IFErrAssemble> <f IFErrGetProcess>
********/
// System Process IDs
#define PROCID_WIN32           0x00
#define PROCID_NONE            0x20
#define PROCID_MSGSCHED        0x21
#define PROCID_JOBPROCESS      0x22
#define PROCID_UI              0x23
#define PROCID_PRINTER         0x24
#define PROCID_SCANNER         0x25
#define PROCID_MSGSVR          0x26
#define PROCID_GRRENDER        0x27
#define PROCID_MSGHNDLR        0x28
#define PROCID_PARADEV         0x29
#define PROCID_UIBGPROC		   0x30	

// Strings used in debug version for friendly display
#define MAXPROCID  11
#define SYSPROCESSSTRINGS       \
    {"None", "Msg Scheduler", "Job Process", "UI Process", "Printer", "Scanner", \
     "Msg Transport", "GR Renderer", "Msg Handler", "Para Dev", "UIBGProc"  }

/********
   @doc    EXTERNAL    DEFINES     ERROR   IFAXOS

   @type   VOID | SYSTEM_ERROR_VALUES | This defines all the standard
           system error values.

   @emem   ERR_NOT_ENOUGH_MEM | Value = 0x0001 : Indicates an out of memory
           condition.

   @emem   ERR_INVALID_PARAM | Value = 0x0002 : Indicates that any one of
           the parameters passed to the function was invalid.

   @emem   ERR_FUNCTION_START | Value = 0x0010 : Any error value above this
           had been custom defined by the called function. If you need
           a custom error value, you can define it starting from this
           value.

   @xref   <f IFErrAssemble>
********/

// System Error values
#define ERR_NOT_ENOUGH_MEM  0x0001
#define ERR_INVALID_PARAM   0x0002
#define ERR_FUNCTION_START  0x0010

// Strings used in debug version for friendly display
#define SYSERRORSTRINGS \
    {"None", "Out Of Memory", "Invalid Param", "Unused", "Unused", "Unused",  \
    "Unused", "Unused", "Unused", "Unused", "Unused", "Unused", \
    "Unused", "Unused", "Unused", "Unused" }

// Functions

#if !defined(SHIP_BUILD) && !defined(WIN32)
VOID WINAPI RestoreLastError (DWORD dwErrVal);
#else
#define RestoreLastError(dw) SetLastError(dw)
#endif

#ifndef WIN32
VOID WINAPI SetLastError (DWORD dwErrVal);
DWORD WINAPI GetLastError (VOID);
#endif


//----------------------------- MESSAGING -------------------------

// Message type definitions  - below 0x0400 is reserved by windows,
// between 0x0400 and 0x0800 is reserved by the IFAX OS

#define IF_START        WM_USER+0x0300

#define IF_TASK_START   IF_START+0x0001
#define IF_TASK_END     IF_START+0x0020
#define IF_DEBUG_START  IF_START+0x0021
#define IF_DEBUG_END    IF_START+0x0040
#define IF_PIPES_START  IF_START+0x0041
#define IF_PIPES_END    IF_START+0x0060
#define IF_TIMER_START  IF_START+0x0081
#define IF_TIMER_END    IF_START+0x0090
#define IF_USER         IF_START+0x0400
//messages for printer and scanner
#define IF_SCANNER_START IF_START+0x0200
#define IF_SCANNER_END   IF_START+0x0220
//messages for the graphics renderer
#define    IF_GRRENDER_START   IF_START+0x0221
#define    IF_GRRENDER_END     IF_START+0x0230
//messages for the faxcodec renderer
#define    IF_FAXREND_START    IF_START+0x0231
#define    IF_FAXREND_END      IF_START+0x0235
//messages for the message pump
#define IF_MSGPUMP_START (IF_START+0x0250)
#define IF_MSGPUMP_END   (IF_START+0x029F)
//messages for devices
#define IF_DEVICE_START (IF_START+0x02B0)
#define IF_DEVICE_END   (IF_START+0x02CF)
// Message for UI Init
#define IF_UI_START        (IF_START+0x2F0)
#define IF_UI_END      (IF_START+0x300)
// Status
#define IF_STATUS_START    (IF_START+0x301)
#define IF_STATUS_END   (IF_START+0x310)
// Config
#define IF_CONFIG_START    (IF_START+0x311)
#define IF_CONFIG_END   (IF_START+0x320)
// Modem
#define IF_MODEM_START (IF_START+0x321)
#define IF_MODEM_END   (IF_START+0x325)
// PSIBG
#define IF_PSIBG_START (IF_START+0x330)
#define IF_PSIBG_END   (IF_START+0x339)
// PSIFAX
#define IF_PSIFAX_START    (IF_START+0x340)
#define IF_PSIFAX_END      (IF_START+0x349)
// MSGSVR
#define IF_MSGSVR_START  (IF_START+0x350)
#define IF_MSGSVR_END    (IF_START+0x369)
// OEM
#define IF_OEM_START    (IF_START+0x370)
#define IF_OEM_END      (IF_START+0x379)
// SOS
#define IF_SOS_START    (IF_START+0x380)
#define IF_SOS_END      (IF_START+0x38F)
// uiutil
#define IF_UU_START     (IF_START+0x390)
#define IF_UU_END       (IF_START+0x39F)
// parallel device
#define IF_PD_START     (IF_START+0x3A0)
#define IF_PD_END       (IF_START+0x3BF)
// RPC layer
#define IF_RPC_START     (IF_START+0x3C0)
#define IF_RPC_END       (IF_START+0x3CF)
//UIBGProc
#define IF_UIBGPROC_START (IF_START+0x3D0)
#define IF_UIBGPROC_END	  (IF_START+0x3DF)	
// services
#define IF_SERVICE_START  (IF_START+0x3E0)
#define IF_SERVICE_END    (IF_START+0x3EF)


/********
   @doc    EXTERNAL    MESSAGES    PROCESS IFAXOS

   @msg    IF_INIT_STATUS |   This message should be posted by all devices
           after initialization is complete to indicate success/failure.
           Typically, the device process will send an IF_INIT_STATUS
          message for every device it initializes and one for its own
          initilization. This message should be posted to the UISHELL
          process. Use <f IFProcGetInfo> to obtain the appropriate window handle.

   @parm   WPARAM  | wParam    | 16 bit device error.
   @parm   LPARAM  | lParam    | Is formed as MAKELPARAM(MAKEWORD
       (ucInitStatus,ucMinorDevId),MAKEWORD(ucMajorDevId,ucProcId))    
   @flag   INIT_NO_ERROR   |   There was no error.
   @flag   INIT_FATAL_ERROR|   There was a fatal error. System should reboot.
   @flag   INIT_WARNING_ERROR  | There were some errors, but the system doesnt need
           to reboot.

   @parm   LPARAM  | lParam    | Contains a standard IFAX Error code. See
           <f IFErrAssemble> for details.

   @xref   <f IFProcGetInfo> <f IFErrAssemble>
********/
#define INIT_NO_ERROR      0x00
#define INIT_FATAL_ERROR   0x01
#define INIT_WARNING_ERROR 0x02

#define IF_INIT_STATUS     IF_UI_START
/********
   @doc    EXTERNAL    MESSAGES    PROCESS IFAXOS
   @msg    IF_DEVREINIT |   This message will be posted by the uishell to
           device process that handle user errors if the initialization
           fails due to user errors.

   @parm   WPARAM  | wParam    | MAKEWORD(ucMinorDevId,ucMajorDevId)

   @xref   <f IFProcGetInfo> <f IFErrAssemble>
********/

#define    IF_DEVREINIT    IF_UI_START+1

// Functions --------
BOOL WINAPI BroadcastMessage (UINT uMsg, WPARAM wParam, LPARAM lParam);
BOOL WINAPI BroadcastMessageEx (UINT uMsg, WPARAM wParam, LPARAM lParam);

// Dispatch message for BG Procs
/********
   @doc    EXTERNAL    MESSAGE     MACROS  IFAXOS

   @api    VOID    |   DispatchMessage | Dispatches a message to your
           windows procedure.

   @parm   LPMSG   | lpMsg |   Ptr to a message struct which is to be
           dispatched. This parameter *must* be &msg for all IFAX
           background processes - i.e you must have a declared variable
           called "msg" into which you have previsouly retrieved the
           message using <f GetMessage>.

   @comm   This function dispatches a message to your windows procedure.
           For foreground processes this works exactly the way the standard
           Windows DispatchMessage works. For background processes
           (which dont have any explicit windows) the message is sent to
           a procedure called BGWindowProc. You *must* have a callback
           defined as this - see BGWindowProc for details.

   @cb     LRESULT  BGCALLBACK |   BGWindowProc    | This is the window procedure
           for all IFAX background processes. The functions *must* be called
           by this exact name. This callback is not relevant for foreground
           processes.

   @parm   HWND    | hwnd  | contains the handle of the window to which the
           message is being dispatched. For Background processes this will always
           be the same as that returned from <f IFProcGetInfo>.

   @parm   UINT    | message | the message id

   @parm   WPARAM  | wParam | the first parameter associated with the message

   @parm   LPARAM  | lParam    | The second parameter associated with the message

   @rdesc  The return value depends on the message being processed.

   @comm   A protoype for this is already declared in ifaxos.h. You should
           process all your messages inside this window procedure. Your
           main application loop should thus look like

           while (GetMessage(&msg,NULL,0,0))
           {
               DispatchMessage(&msg);
           }
           return;

           You should *not* export this procedure in your .def file.

   @xref   <f GetMessage>
********/

#ifdef IFBGPROC
#define DispatchMessage(pmsg)   BGWindowProc((pmsg)->hwnd,(pmsg)->message,(pmsg)->wParam,(pmsg)->lParam)
#define BGCALLBACK PASCAL
LRESULT BGCALLBACK BGWindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
#endif

//----------------------------- TASK MANAGEMENT--------------------
/********
   @doc    EXTERNAL    PROCESS     MACROS  IFAXOS

   @api    VOID    |   ENTER_INT_CRIT_SECTION  | Macro to enter
           an interrupt critical section.

   @comm   This is an inline assembly macro which turns interrupts
           off. Needless to say, this must be used with extreme
           caution. There must be a matching call to
           <f EXIT_INT_CRIT_SECTION>. Nested pairs of calls
           to these are permitted as long as they are not within the
          same invocation of the function. The function relies on
          being able to save the previous state of the flags in a
          unique local variable called __wIntFlags.
           This might affect some optimization options in your
           function due to being inline assembly. You might want to
           declare a local function which calls this macro internally.
           This way you can get global optimzations in the calling
           functions.

   @xref   <f EXIT_INT_CRIT_SECTION>  <f IFProcEnterCritSec>
           <f IFProcExitCritSec>
********/


// Macros --------
#define ENTER_INT_CRIT_SECTION  \
   {   \
   _asm pushf  \
   _asm cli    \
   _asm pop __wIntFlags    \
   }

/********
   @doc    EXTERNAL    PROCESS     MACROS  IFAXOS

   @api    VOID    |   EXIT_INT_CRIT_SECTION   | Macro to exit
           an interrupt critical section.

   @comm   This is an inline assembly macro which sets the interrupt
           flag state back to its state before the last call to
           <f ENTER_INT_CRIT_SECTION>. This function relies    on the
          appropriate flags to have been saved in a local variable
          with the name __wIntFlags.

   @xref   <f ENTER_INT_CRIT_SECTION> <f IFProcEnterCritSec>
           <f IFProcExitCritSec>
********/

// defined this way so that it works with windows enhanced mode
// refer guide to programming pg 14-15
#define EXIT_INT_CRIT_SECTION   \
   {   \
   _asm mov ax, __wIntFlags    \
   _asm test ah,2      \
   _asm jz $+3     \
   _asm sti            \
   _asm NOP            \
   }

/********
    @doc    EXTERNAL    DEFINES     ERROR   IFAXOS

    @type   VOID | PRIORITY DEFINES  | System defined priority levels
    @emem   PROC_PRIORITY_CRITICALRT | This should be used very sparingly
            for tasks which have very critical real time constraints (less
            than 200ms). These processes should typically be very low bandwidth
            since they can easily starve other processes. 
    @emem   PROC_PRIORITY_HIGHRT | Tasks with latency requirements of less than
            a second. Should not be high bandwidth to avoid starvation of processes.
    @emem   PROC_PRIORITY_MEDRT | Tasks with latency requirements of 1-3 secs.
            Should not be high bandwidth to avoid starvation of processes.
    @emem   PROC_PRIORITY_LOWRT | Tasks with latencies of 3-30secs. Should not
            be high bandwidth. 
    @emem   PROC_PRIORITY_DEFAULT | The default priority tasks start out at. These
            processes have none or very low real time requirements. They should
            in general not have high bandwidth. 
    @emem   PROC_PRIORITY_NONRT_USERVISIBLE | Non real time tasks which have visibility
            at the user level. Can be high bandwidth. An example on a fax machine is
            a copy job.
    @emem   PROC_PRIORITY_NONRT_USERHIDDEN | Non real time tasks which have very little
            visibility at the user level. Examples on a fax machine are local jobs 
            not involving devices. Can be high bandwidth.
    @comm   Processes should be VERY careful in setting their priorities. The way the 
            current scheduling works it is very easy to cause starvation of low 
            priority processes. In particular, processes which are "high bandwidth" - ie
            those which can consume huge amounts of CPU time if given, should be very
            careful - and should in general be at a priority level lower than the default.
            Processes higher than the default should have some sontrols on how much cpu
            time they can use up. On the fax machine, such controls are mostly in the form
            of device througputs - like the phone line.
    @xref   <f IFProcSetPriority> <f IFProcGetPriority>
********/
#define PROC_PRIORITY_MIN               31
#define PROC_PRIORITY_MAX               1
#define PROC_PRIORITY_CRITICALRT        3
#define PROC_PRIORITY_HIGHRT            6
#define PROC_PRIORITY_MEDRT             9
#define PROC_PRIORITY_LOWRT             12
#define PROC_PRIORITY_DEFAULT           15
#define PROC_PRIORITY_NONRT_USERVISIBLE   18
#define PROC_PRIORITY_NONRT_USERHIDDEN    21

#define UAE_BOX                 0
#define NO_UAE_BOX              1

///// Specific priorities used by standard processes 	   ////
//
// We want the following relations to hold
// 	PSIFAXBG > everything else, cause it's low-latency, low-bandwidth
//	ModemJob related (med bandwidth) > all other high/med bandwith jobs
//  DeviceJob related (high bandwidth, NO latency reqs) < all other jobs except Spool jobs
//  SpoolJobs (high bandwidth NO latency reqs, not user-visible) < everything
//  MSCHED is as high as ModemJob prio when it is on critical path, otherwise
//		it stays at default. Higher than Dev & Spool jobs, lower than all else
//  COMMSRV (pretty low latency reqs, high bandwidth) is slightly higher than
//		default (Higher than MSCHED & Dev/Spool jobs, lower than modem jobs)
//  RPCHNDLR (pretty lax latency reqs, high bandwidth) dynamic
//		Same prio as MSCHED while working, same as COMMSRV during accept
//  MSGSVR & RPCSRV (lowish latency reqs, very low bandwidth) roundrobin
//		with ModemJob, higher than all else
//  REPORT bg proc slightly lower than default.

// PSIFAXBG prio is highest
#define PRIO_PSIFAXBG_ACTIVE    PROC_PRIORITY_CRITICALRT
#define PRIO_PSIFAXBG_IDLE      PROC_PRIORITY_DEFAULT
// ModemJob is 2nd highest
#define PRIO_MODEMJOB           PROC_PRIORITY_MEDRT
// Spooljob is LOWEST, Device jobs are second lowest 
#define PRIO_SPOOLJOB           PROC_PRIORITY_NONRT_USERHIDDEN
#define PRIO_DEVICEJOB          PROC_PRIORITY_NONRT_USERVISIBLE
// PSINET jobs are same prio as SPOOL jobs
#define PRIO_PSINETJOB          PRIO_SPOOLJOB
// MSCHED's prio when it is NOT on a MODEMJOB critical path
#define PRIO_MSCHED         	PROC_PRIORITY_DEFAULT
// COMMSRV is between MODEMJOB & MSCHED
#define PRIO_COMMSRV            PROC_PRIORITY_LOWRT
// RPCHNDLR is same as MSCHED while working
#define PRIO_RPCHNDLR_ACCEPT    PROC_PRIORITY_LOWRT
#define PRIO_RPCHNDLR_WORKING   PROC_PRIORITY_DEFAULT
// RPCSRV is same as MODEMJOB. It should NOT consume much CPU at this level!
#define PRIO_RPCSRV             PROC_PRIORITY_MEDRT
// MSGSVR is same as MODEMJOB, except when processing recovery msgs
#define PRIO_MSGSVR_WAITMSG     PROC_PRIORITY_MEDRT
#define PRIO_MSGSVR_RECOVERY    PROC_PRIORITY_NONRT_USERVISIBLE
// Report process is real low prio when doing background info assimilation
// slightly higher when doing work on user request.
#define PRIO_UIBGPROC			PROC_PRIORITY_NONRT_USERHIDDEN
#define PRIO_UIBGPROC_USERREQUEST PROC_PRIORITY_NONRT_USERVISIBLE

/********
   @doc    EXTERNAL    MESSAGES    PROCESS IFAXOS

   @msg    IF_QUIT |   This is the message which forces <f GetMessage>
           to return FALSE causing the process to exit its main message
           processing loop and terminate. Typically a process should
           post itself this message in response to a <m IF_EXIT> message.

   @parm   WPARAM  | wParam    | NULL

   @parm   LPARAM  | lParam    | NULL

   @rdesc  none

   @xref   <m IF_EXIT>

   @msg    IF_EXIT | This message is sent to a process to request it
           to terminate. An application should clean up any resources
           it has allocated and then post itself a <m IF_QUIT> message
           directly.

   @parm   WPARAM  | wParam    | NULL

   @parm   LPARAM  | lParam    | NULL

   @rdesc  none

   @xref   <m IF_QUIT>
********/

// Messages
#define IF_QUIT     IF_TASK_START
#define IF_EXIT     IF_TASK_START+1

// Functions -----------
#ifndef WIN32
HTASK   WINAPI GetWindowTask(HWND hwnd);
#ifndef SHIP_BUILD
DWORD   WINAPI IFProcProfile(HTASK hTask, BOOL fStart);
#else
#define IFProcProfile(HTASK,FSTART) (0)
#endif
#else
// Remove calls to Profile ..
#define IFProcProfile(x,y)    (DWORD)(0)
#endif

HTASK WINAPI IFProcCreate (LPSTR lpszAppName, UINT fuCmdShow);
VOID WINAPI IFProcTerminate (HTASK hTask, WORD wFlags);
VOID WINAPI IFProcEnterCritSec(VOID);
VOID WINAPI IFProcExitCritSec(VOID);
BOOL WINAPI IFProcChangeToFG(VOID);
BOOL WINAPI IFProcChangeToBG(VOID);
HWND    WINAPI IFProcGetInfo (HTASK FAR *lphTask, LPSTR lpszModule, HINSTANCE FAR *lphInst);
BOOL    WINAPI IFProcRegisterWindow (HWND hwnd);
WORD    WINAPI IFProcGetPriority (HTASK hTask);
BOOL    WINAPI IFProcSetPriority (HTASK hTask, WORD wPriority);

#ifndef NOBUFFERS
//----------------------------- BUFFERS -------------------------

// Moved BUFFER typedef and standard meta-data values to buffers.h! -RajeevD
#include <buffers.h>

#ifdef VALIDATE
#define BUF_SENTINELPOS 30
#endif

// Error values
#define ERR_DATA_SMALL      ERR_FUNCTION_START

// Functions
extern EXPORT_DLL LPBUFFER WINAPI IFBufAlloc (LONG lBufSize);
extern EXPORT_DLL BOOL WINAPI IFBufFree (LPBUFFER lpbf);
extern EXPORT_DLL LPBUFFER WINAPI IFBufMakeWritable (LPBUFFER lpbf);
extern EXPORT_DLL LPBUFFER WINAPI IFBufShare (LPBUFFER lpbf);
extern EXPORT_DLL LPBUFFER WINAPI IFBufSplit (LPBUFFER lpbf, LPBYTE lpb);


//----------------------------- PIPES ----------------------------

#ifndef WIN32

// types
typedef  struct _PIPE NEAR *HPIPE;

// Parameter
#define IFPIPE_READ_MODE    0x0001
#define IFPIPE_WRITE_MODE   0x0002
#define REQREAD_REMOVE_DATA 0x0003
#define REQREAD_NOREMOVE_DATA   0x0004

// Error values
#define ERR_TOO_MANY_OPENS          ERR_FUNCTION_START
#define ERR_TOO_MANY_PENDING_WRITES ERR_FUNCTION_START+1
#define ERR_PIPE_STILL_OPEN         ERR_FUNCTION_START+2

/********
   @doc    EXTERNAL    MESSAGES    IFPIPES IFAXOS

   @msg    IF_PIPE_DATA_WRITTEN | This message is sent to notify a process
           that a previous write request using <f IFPipeReqWrite> has
           been successfully concluded. On reciept of this message the
           process can issue another write request on the same pipe.

   @parm   WPARAM  | wParam    | The <p wContext> parameter passed to the
            <f IFPipeOpen> call.

   @parm   LPARAM  | lParam    | NULL

   @rdesc  none

   @xref   <f IFPipeReqWrite>

   @msg    IF_PIPE_DATA_ARRIVED | This message is sent to a process which
           previsouly issued a read request to a pipe, intimating it that
           the buffer it requested is now available.

   @parm   WPARAM  | wParam    | The <p wContext> parameter passed to the
            <f IFPipeOpen> call.

   @parm   LPARAM  | lParam    | Contains a far ptr to a <t BUFFER> structure
           which has the requested data. On receipt of this message the process
           can issue another read request on the same pipe.

   @rdesc  none

   @xref   <f IFPipeReqRead>
********/

// Messages
#define IF_PIPE_DATA_WRITTEN    IF_PIPES_START
#define IF_PIPE_DATA_ARRIVED    IF_PIPES_START+1

// Functions
HPIPE WINAPI IFPipeCreate (WORD wSize);
BOOL WINAPI IFPipeDelete (HPIPE hpipe);
BOOL WINAPI IFPipeOpen (HPIPE hPipe, HWND hwnd, WORD wMode, WPARAM wContext);
BOOL WINAPI IFPipeClose (HPIPE hPipe, WORD wMode);
BOOL WINAPI IFPipeReqRead (HPIPE hPipe, WORD fwRemove);
BOOL WINAPI IFPipeReqWrite (HPIPE hPipe, LPBUFFER lpbf);
BOOL WINAPI IFPipeGetInfo (HPIPE hPipe, LPWORD lpwSize, LPWORD lpwcBufs);

#else // !WIN32

DECLARE_HANDLE32(HPIPE);

#endif // !WIN32

#endif // NOBUFFERS

//----------------------------- DEBUG SERVICES -------------------------

// Debug typedefs. These dont do any harm to anyone. Define them if there is
// anyone who might need them.

#if defined(DEBUG) || defined(IFKINTERNAL)

/********
   @doc    EXTERNAL    DATATYPES   DEBUG   IFAXOS

   @types  DBGPARAM    |   Structure containing the debug
           settings for any module in the system.

   @field  CHAR[32]    |   lpszName    | Specifies the name of the module.
           This is how your module will appear in the IFAX controller. Must
           be less than 32 characters long, and NULL terminated.

   @field  HWND    |   hwnd    | Specifies the primary window handle associated with
           this module IF the module is a process. For DLL's this value should
           always be NULL. Background processes should set it to their own ID using
           <f IFProcGetInfo> and <f GetCurrentTask> at initialization time.
           Foreground processes should set it to the window handle of their client
           window.

   @field  CHAR[16][32]    | rglpszZones   |   Stores a list of 16 strings
           which describe the zones associated with the lower 16 bits of
           zone mask. The module must decide and define its own zones for these
           bits - any bits not used should be left as "Not Used". These strings
           will be displayed by the IFAX controller to assist users in choosing
           the zones to be set for your module. Each string should not be more
           than 32 characters long, and should be NULL terminated.

   @field  ULONG   |   ulZoneMask  |   This is the mask which stores the
           current zone settings for the module. The IFAX controller will
           set this field according to what the user specifies. This field
           should be initialized to something which makes sense for your module
           - as that will be the default till the user changes it.

   @comm   This structure should be passed to <f IFDbgSetParams> at
           intialization time to enable the user to control the trace options.

           **VERY IMPORTANT NOTE** This structure MUST be declared with a
           variable  name of dpCurSettings to allow the system zones to
           function correctly.

   @tagname _DBGPARAM

   @xref   <f IFDbgSetParams>

********/

typedef struct _DBGPARAM {
   CHAR    lpszName[32];           // name of module
   HWND    hwnd;                   // Primary window Handle if task, NULL otherwise
   CHAR    rglpszZones[16][32];    // names of zones for first 16 bits
   ULONG   ulZoneMask;             // Zone Mask
}   DBGPARAM, FAR *LPDBGPARAM;

// Debug functions
BOOL WINAPI IFDbgOut (LPSTR lpszStatus);
WORD WINAPI IFDbgIn (LPSTR lpszPrompt, LPSTR lpszReply, WORD wBufSize);
extern EXPORT_DLL VOID WINAPI IFDbgSetParams (LPDBGPARAM lpdpParam, BOOL fEntry);
extern EXPORT_DLL VOID FAR CDECL  IFDbgPrintf(LPSTR lpszFmt, ...);
extern EXPORT_DLL BOOL WINAPI IFDbgCheck(VOID);

// Encourage people to use the correct variable
extern EXPORT_DLL DBGPARAM dpCurSettings;


// Special UI communication stuff

// Functions
DWORD WINAPI DebugUIMessage (UINT wMsg, WPARAM wParam, DWORD lParam);

// Messages to the UI proc
#define IF_DISP_STRING  IF_DEBUG_START
#define IF_INP_REQUEST  IF_DEBUG_START+1
#define IF_NEW_SETTING  IF_DEBUG_START+2
#define IF_DEL_SETTING  IF_DEBUG_START+3
#define IF_NEW_TASK     IF_DEBUG_START+4
#define IF_DEL_TASK     IF_DEBUG_START+5
#define IF_FILELOG_POLL IF_DEBUG_START+6

// Messages from the UI proc
#define REGISTER_UI_TASK    1
#define SET_LOG_MODE       2
#define DEBUG_OUT_DONE      3
#define DEBUG_IN_DONE       4
#define DEREGISTER_UI_TASK  5


#endif

// Debug Macros. These should be defined only if the module is being compiled
// in debug

#ifdef DEBUG

/********
   @doc    EXTERNAL    IFAXOS    DEBUG   MACROS

   @api    BOOL    |   DEBUGMSG    |   Prints a trace message on the debug
           console depending on enable flags set by the user.

   @parm   <lt>c_expression<gt>    |   cond    |   Boolean condition which is
           evaluated to decide whether or not to print the message.

   @parm   <lt>printfexp<gt>   | printf_exp    |  Printf parameters for the
           message to be displayed. Must be enclosed in a single pair of
           parentheses.

   @rdesc  TRUE if the message is printed, and FALSE if it is not.

   @comm   The condition should consist of a boolean expression testing whether
           the relevant zones are on or off.  Each module has a current zone
           mask which identifies which of the possible 32 zones is currently on.
           The top 16 bits of these are reserved for use for system defined
           zones - like ZONE_FUNC_ENTRY which is defined as

           #define ZONE_FUNC_ENTRY (0x00010000&dpCurSettings.ulZoneMask)

            Modules should take care to see
           that they print out trace messages which are meaningful and conform
           to some pattern - remember that other people than you have to see
           and make sense of your messages. The general format I have been
           following is :

           <lt>Task ID<gt> :
           <lt>ModuleName<gt>:<lt>SubModule<gt>:<lt>Function<gt>:<lt>msg<gt>

           The task ID is useful to sort out the output of multiple tasks
           running in the system.  The example call above yields this kind of
           output.

           The various predefined system zones are:
               ZONE_FUNC_ENTRY : To be used for all function entry and exit
                   messages. By convention, the parameters should be printed
                   on entry, and the return value should be printed on exit.
                   Any values printed in hexadecimal should be preceded by a 0x
               ZONE_INT_FUNC : To be used for any other traces at interesting
                   points within a function.

           All trace messages are disabled in a non debug build.

   @ex     Example Definition & Use |

           #define ZONE_CUSTOM (0x00000001&dpCurSettings.ulZoneMask)

           DEBUGMSG (ZONE_FUNC_ENTRY && ZONE_CUSTOM,
                       ("0x%04X:IFK:Buffers:GenericFunction:Entry\r\n",
                       GetCurrentTask()));

           This will print a trace message only if the user has turned the
           function entry zone and the custom zone on.

   @xref   <f IFDbgPrintf>
********/

#define DEBUGMSG(cond,printf_exp)   
//#define DEBUGMSG(cond,printf_exp)   \
//  ((cond)?(IFDbgPrintf printf_exp),1:0)

// Standard Debug zones
#define ZONE_FUNC_ENTRY (0x00010000&dpCurSettings.ulZoneMask)
#define ZONE_INT_FUNC   (0x00020000&dpCurSettings.ulZoneMask)

/********
   @doc    EXTERNAL    IFAXOS    DEBUG   MACROS

   @api    BOOL    |   ERRORMSG    |   Prints an error message on the debug
           console.

   @parm   <lt>printfexp<gt>   | printf_exp    |  Printf parameters for the
           message to be displayed. Must be enclosed in a single pair of
           parentheses.

   @comm   Should be used to display Error messages.

   @ex     Example Definition & Use |

           ERRORMSG (("0x%04X:JOB Failed !!\r\n", GetCurrentTask()));

           This will print a trace message like:

           ERROR: Job Process: 0x2346: JOB Failed !!

   @xref   <f IFDbgPrintf>
********/
#ifndef WIN32
#define ERRORMSG(printf_exp)   \
   (IFProcEnterCritSec(), \
    IFDbgPrintf("ERROR:(0x%04X):%s:",GetCurrentTask(),(LPSTR)(dpCurSettings.lpszName)), \
    IFDbgPrintf printf_exp ,\
    IFProcExitCritSec(), \
    1)
#else
#define ERRORMSG(printf_exp)   \
   (IFDbgPrintf("ERROR:(0x%08lX):%s:",GetCurrentProcessId(),(LPSTR)(dpCurSettings.lpszName)), \
    IFDbgPrintf printf_exp ,\
    1)
#endif

/********
   @doc    EXTERNAL    IFAXOS    DEBUG   MACROS

   @api    BOOL    |   RETAILMSG    |   Prints a message on the debug
           console even for retail builds.

   @parm   <lt>printfexp<gt>   | printf_exp    |  Printf parameters for the
           message to be displayed. Must be enclosed in a single pair of
           parentheses.

   @comm   Should be used to display debugging messages which are desired
           in the retail build. For obvious reasons this should be used
          sparingly. The benefit is that all such messages can be turned off
           for the shipping build by simply changing the macro in ifaxos.h

   @ex     Example Definition & Use |

           RETAILMSG (("0x%04X:Scanner Opened !!\r\n", GetCurrentTask()));

           This will print a trace message like:

           0x4567:Scanner Opened !!

   @xref   <f IFDbgPrintf>
********/
#define RETAILMSG(printf_exp)   (IFDbgPrintf printf_exp)

/********
   @doc    EXTERNAL    IFAXOS    DEBUG   MACROS

   @api    BOOL    |   WARNINGMSG    |   Prints a warning message on the debug
           console even for retail builds.

   @parm   <lt>printfexp<gt>   | printf_exp    |  Printf parameters for the
           message to be displayed. Must be enclosed in a single pair of
           parentheses.

   @comm   Should be used to display debugging messages which are desired
           in the retail build. For obvious reasons this should be used
          sparingly. The benefit is that all such messages can be turned off
           for the shipping build by simply changing the macro in ifaxos.h

   @ex     Example Definition & Use |

           WARNINGMSG (("0x%04X:Scanner Opened !!\r\n", GetCurrentTask()));

           This will print a trace message like:

           WARNING: 0x4567:Scanner Opened !!

   @xref   <f IFDbgPrintf> <f ERRORMSG>
********/
#ifndef WIN32
#define WARNINGMSG(printf_exp)   \
   (IFProcEnterCritSec(), \
    IFDbgPrintf("WARNING:(0x%04X):%s:",GetCurrentTask(),(LPSTR)(dpCurSettings.lpszName)), \
    IFDbgPrintf printf_exp ,\
    IFProcExitCritSec(), \
    1)
#else
#define WARNINGMSG(printf_exp)   \
   (IFDbgPrintf("WARNING:(0x%08lX):%s:",GetCurrentProcessId(),(LPSTR)(dpCurSettings.lpszName)), \
    IFDbgPrintf printf_exp ,\
    1)
#endif


/********
   @doc    EXTERNAL    IFAXOS    DEBUG   MACROS

   @api    BOOL    |   DEBUGCHK    |   Macro implementing an assert.

   @parm   <lt>c_exp<gt>   | exp   |  Expression to be checked.

   @rdesc  Returns TRUE if the expression was non zero, and FALSE if not.

   @comm   This is a macro which implements functionality similar to the assert
           statement in C.  The expression argument is evaluated, and no action
           is taken if it evaluates to true. If false, a debug message is
           printed out  giving the  File name and line number where the check
           failed, along with the module name which was registered
           in the <t DBGPARAM> structure. Because of this, you *must* register
           your debug settings using <f IFDbgSetParams> before you can use the 
           DEBUGCHK macro.  After this the function <f IFDbgCheck> is called
           to generate an assert.

           This statement disappears when the DEBUG option is turned off.

    @xref   <f IFDbgCheck>           
********/

#define BG_CHK(exp)    \
   ((exp)?1:(              \
       IFDbgPrintf ("DEBUGCHK failed in file %s at line %d \r\n",  \
                 (LPSTR) __FILE__ , __LINE__ ), 1  \
            ))

#ifndef DEBUGCHK_UNSAFE_IN_WFWBG

#define DBGCHK(module,exp) 
/*
#define DBGCHK(module,exp) \
   ((exp)?1:(          \
       IFDbgPrintf ("%s: DEBUGCHK failed in file %s at line %d \r\n", \
                 (LPSTR) module, (LPSTR) __FILE__ , __LINE__ ),    \
       IFDbgCheck() \
            ))*/

#define DEBUGCHK(exp) DBGCHK(dpCurSettings.lpszName, exp)

#endif

/********
   @doc    EXTERNAL    IFAXOS    DEBUG   MACROS

   @api    BOOL    |   DEBUGSTMT   |   Evaluates the expression in debug mode.

   @parm   <lt>c_exp<gt>   | exp   |  Expression to be evaluated.

   @rdesc  Returns the value returned by the expression.

   @comm   This macro is provided for convenience and code readability purposes
           to replace a construct of the form

               #ifdef DEBUG
               exp;
               #endif

           It evaluates to zero in a non debug build.

********/

#define DEBUGSTMT(exp) exp

#else // NOT DEBUG

// Let debugmsg's through currently
#ifndef SHIP_BUILD
//#ifndef FOOBAR

// Non DEBUG MODE
extern EXPORT_DLL VOID FAR CDECL  IFDbgPrintf(LPSTR lpszFmt, ...);
extern EXPORT_DLL BOOL WINAPI IFDbgCheck(VOID);

#ifndef WIN32
#define ERRORMSG(printf_exp)   \
   (IFProcEnterCritSec(), \
    IFDbgPrintf("ERROR:(0x%04X):",GetCurrentTask()), \
    IFDbgPrintf printf_exp ,\
    IFProcExitCritSec(), \
    1)
#define WARNINGMSG(printf_exp)   \
   (IFProcEnterCritSec(), \
    IFDbgPrintf("WARNING:(0x%04X):",GetCurrentTask()), \
    IFDbgPrintf printf_exp ,\
    IFProcExitCritSec(), \
    1)
#define RETAILMSG(printf_exp)   (IFDbgPrintf printf_exp)
#else  //Win32 -- NO MESSAGES OF ANY SORT IN NON-DEBUG WIN32

#define RETAILMSG(printf_exp) (0)
#define ERRORMSG(printf_exp) (0)
#define WARNINGMSG(printf_exp) (0)
 
#endif


#else

#define RETAILMSG(printf_exp) (0)
#define ERRORMSG(printf_exp) (0)
#define WARNINGMSG(printf_exp) (0)

#endif

// These are to macro out all debug stuff in retail/ship builds
#define DEBUGMSG(cond,expr)  (0)
#define DBGCHK(module,exp) (0)
#define DEBUGCHK(exp) (0)
#define BG_CHK(exp) (0)
#define DEBUGSTMT(exp) (0)

// Macros for direct function calls made ..
#ifndef IFKINTERNAL
#define IFDbgOut(lpszStatus) (0)
#define IFDbgIn(lpszPrompt,lpszReply,wBufSize) (0)
#define IFDbgSetParams(lpdpParam,fEntry) (0)
#define DebugUIMessage(wMsg,wParam,lParam) (0)
#endif

#endif

/********
   @doc    EXTERNAL    IFAXOS    MACROS

   @api    BOOL    |   UIEVENT |   Prints a status string in the UI

   @parm   LPSTR | string |  String to be printed.

   @comm   This macro is provided in both the retail & debug builds to
            allow some limited set of status strings to be printed in
            the UI. You must format a string yourself - you can
            use wsprintf() to create a complex one if desired. The
            maximum string length allowed is 64 bytes.
********/
#define IF_SYS_EVENT     IF_UI_START+1
// UI Event messages
#define UIEVENT(string)   \
{       \
    CHAR    szUIShell[] = "UISHELL";  \
    DEBUGCHK(lstrlen(string) < 64); \
    PostMessage (IFProcGetInfo(NULL, szUIShell, NULL), IF_SYS_EVENT,   \
                 NULL, MAKELPARAM(GlobalAddAtom(string),0));    \
}

// --------------- Synchronization services --------------------------------------
// Dont provide any for win32.
#ifndef WIN32

typedef  struct _SYNC NEAR *HSYNC;

// Error returns
#define ERR_MUTEX_NOT_FREE  ERR_FUNCTION_START
#define ERR_EVENT_NOT_FREE  ERR_FUNCTION_START+1
#define ERR_TOO_MANY_EVENTWAITS ERR_FUNCTION_START+2

// generic functions
DWORD WINAPI WaitForSingleObject (HSYNC hsc, DWORD dwTime);

// Mutex functions
HSYNC WINAPI CreateMutex (LPVOID lpvAttribs, BOOL fInitial,LPSTR lpszName);
BOOL WINAPI ReleaseMutex (HSYNC hsc);

// Event Functions
HSYNC   WINAPI  CreateEvent (LPVOID lpvAttribs, BOOL bManualReset,
                            BOOL bInitialState, LPSTR lpszName);

BOOL    WINAPI  SetEvent (HSYNC hsc);
BOOL    WINAPI  ResetEvent (HSYNC hsc);
BOOL WINAPI FreeSyncObject (HSYNC hsc);
BOOL WINAPI  GetSetEventParam (HSYNC hsc, BOOL fSetParam, LPDWORD lpdwParam);

#else // !WIN32

DECLARE_HANDLE32(HSYNC);

#endif // !WIN32

/********
   @doc    EXTERNAL    DEFINES     ERROR   IFAXOS

    @type   VOID | SYSTEM_MODULE_NAMES  | Strings to be passed to IFProcGetInfo to get handles to standard IFAX modules

    @emem   MODNAME_UISHELL  | UI Shell
    @emem   MODNAME_MSCHED   | Message Scheduler
    @emem   MODNAME_MSGSVR   | Message Server a.k.a. Message Transport

    @xref   <f IFProcGetInfo>
********/

// IFAX Module names
#define MODNAME_UISHELL        "UISHELL"
#define MODNAME_MSCHED     "MSCHED"
#define MODNAME_MSGSVR     "MSGSVR"


// --------------- Timer Services -----------------------------------------

#ifndef WIN32

/********
   @doc    EXTERNAL    IFAXOS    MESSAGES    TIMER

   @msg    IF_TIMER | This message is sent to notify a process
           of the expiration of a timer set using <f IFTimerSet>.

   @parm   WPARAM  | wParam    | Contains the timer id set int he
           <f IFTimerSet> call.

   @parm   LPARAM  | lParam    | Contains the lParam passed into
           the IFTimerSet call.

   @rdesc  none

   @xref   <f IFTimerSet>
********/

// messages
#define IF_TIMER    IF_TIMER_START

// flags
#define TIME_ONESHOT    0
#define TIME_PERIODIC   1

// functions
VOID WINAPI IFProcSleep (WORD wSleepPeriod);
WORD WINAPI IFTimerSet (HWND hwnd, WORD idTimer, WORD wTimeout,
                         TIMERPROC tmprc, WORD wFlags, LPARAM lContext);
BOOL WINAPI    IFTimerKill (HWND hwnd, UINT idTimer);

#endif

// --------------- Global Pool Management ----------------------------------


/********
   @doc    EXTERNAL    IFAXOS    DEFINES     GLOBMEM

   @type   VOID | STANDARD_BLOCK_SIZES | This defines all the standard global
           memory block sizes. As far as possible all memory allocations
           should be for one of these sizes. Any other size will be much
           more inefficient and couls cause fragmentation of system
           memory.

   @emem   ONLY_HEADER_SIZE| This will allocate a buffer with no data
           associated with it. This can be used to pass metadata between
           processes - eg an END_OF_JOB buffer marker.

   @emem   SMALL_HEADER_SIZE| This currently defines a 32 byte memory
           block. It is used for all buffer headers, and can be used
           for things like protocol headers, structure headers etc.

   @emem   COMPRESS_DATA_SIZE | This defines a 1Kb memory block which
           should be used to store any compressed data form. This is
           the general purpose data storage size. Any buffer which
           could be around for a long time should contain compressed
           data in this size of buffer.

   @emem   RAW_DATA_SIZE | This defines a large buffer size (currently
           8Kb) for use by renderers as frame buffers. They should be
           used only to store raw bitmap data which is being sent
           directly to a consumer device like the printer. There are
           very few of these - so they should be used only for this
           short lived purpose.

   @emem   BAND_BUFFER_SIZE| This defines a jumbo buffer of 64K for use
           by the resource-based renderer.  There may be only one such
           buffer in the global pool. (NOT IMPLEMENTED YET)

   @xref   <f IFMemAlloc> <f IFBufAlloc>
********/

// Std block sizes
#define ONLY_HEADER_SIZE   0       // No data
#define SMALL_HEADER_SIZE  -1       // 32b
#define COMPRESS_DATA_SIZE  -2      // 1Kb

//
#define RAW_DATA_SIZE       -3      // 8Kb

// Special size for modem ECM frame
#define BYTE_265_SIZE       -4      // 265 bytes
#define BYTE_265_ACTUALSIZE 265

// Number of sizes
#define MAX_POOL_INDEX  -4          // For parameter validation

// Not available yet!
#define BAND_BUFFER_SIZE    30720      // 64Kb

// Flag to force global alloc. Uses a windows flag which is ignored/defunct in
// the 3.1 kernel (and the boss kernel)
#define IFMEM_USEGLOBALALLOC GMEM_NOT_BANKED

// Functions
extern EXPORT_DLL LPVOID  WINAPI  IFMemAlloc (UINT fuAlloc, LONG lAllocSize,
                                  LPWORD lpwActualSize);
extern EXPORT_DLL BOOL WINAPI IFMemFree (LPVOID lpvMem);


/********
    @doc    EXTERNAL   IFAXOS

    @api    HIPCMEM | IFMemGetIPCHandle | Returns an opaque 32 bit handle
            which is portable across process contexts.

    @parm   LPVOID  | lpvMem    | A ptr to global memory allocated using
            <f IFMemAlloc>.

    @rdesc  Opaque 32 bit none zero handle if succesfull. 0 if the memory
            ptr passed in is invalid.

    @comm   This function should be used by any DLL or process before trying
            to pass this memory to another process context. Only handles
            returned by this API should cross context boundaries, and the
            receiving context should call <f IFMemMapIPCHandle> to get back
            a valid memory ptr in its new context.

            This applies even for DLL's which might allocate a piece of
            global memory and access it in different process contexts. They
            should use these functions to map them so that they are portable.

            For Win16/IFAX implementations, this is essentially a NOP.

    @xref   <f IFMemAlloc> <f IFMemMapIPCHandle>

    @type   DWORD | HIPCMEM | Opaque 32 bit handle to global memory block.

    @xref   <f IFMemMapIPCHandle> <f IFMemGetIPCHandle>
*********/
typedef DWORD HIPCMEM;
#define IFMemGetIPCHandle(par1) ((HIPCMEM)par1)

/********
    @doc    EXTERNAL   IFAXOS

    @api    DWORD | IFMemMapIPCHandle | Maps a piece of memory into the
            current tasks address space.

    @parm   HIPCMEM | hMemHandle    | A memory handle returned from a call
            to <f IFMemGetIPCHandle> previously.

    @rdesc  Valid ptr to memory in the context of the calling process if
            succesful. NULL if it fails.

    @comm   See comments in <f IFMemMapIPCHandle>.

    @xref   <f IFMemAlloc> <f IFMemMapIPCHandle>
*********/
#define IFMemMapIPCHandle(par1) ((LPVOID)par1)


// --------------- Time API's ----------------------------------------------

/********
    @doc    EXTERNAL IFAXOS SRVRDLL

    @types  SYSTEMTIME  | Structure describing the time in terms of roman
            calendar.

    @field  WORD    | wYear | The year
    @field  WORD    | wMonth | The month from 1-12
    @field  WORD    | wDayOfWeek | Day of week with Sunday = 0
    @field  WORD    | wDay | The day of the month, from 1-31
    @field  WORD    | wHour | The hour from 0-23
    @field  WORD    | wMinute | Minutes from 0-59
    @field  WORD    | wSecond | Seconds from 0-50
    @field  WORD    | wMilliseconds | Milliseconds from 0-99

    @comm   This is the format used for dislaying time to the user etc.

    @xref   <f SystemTimeToFileTime> <t FILETIME> <f FileTimeToSystemTime>
********/
#ifndef WIN32

typedef struct _SYSTEMTIME {
   WORD wYear;
   WORD wMonth;
   WORD wDayOfWeek;
   WORD wDay;
   WORD wHour;
   WORD wMinute;
   WORD wSecond;
   WORD wMilliseconds;
} SYSTEMTIME, FAR *LPSYSTEMTIME;

#endif

/********
    @doc    EXTERNAL  IFAXOS

    @types  FILETIME    | Structure used to store time internally and for
            mathematical operations.

    @field  DWORD   | dwLowDateTime | Low 32 bits of the time.

    @field  DWORD   | dwHighDateTime | High 32 bits of the time.

    @comm   Absolute time in IFAX is represented by a 64-bit large integer accurate
            to 100ns resolution.  The smallest time resolution used by this package
            is One millisecond.  The basis for this time is the start of 1601 which
            was chosen because it is the start of a new quadricentury.  Some facts
            to note are:

            o At 100ns resolution 32 bits is good for about 429 seconds (or 7 minutes)

            o At 100ns resolution a large integer (i.e., 63 bits) is good for
            about 29,247 years, or around 10,682,247 days.

            o At 1 second resolution 31 bits is good for about 68 years

            o At 1 second resolution 32 bits is good for about 136 years

            o 100ns Time (ignoring time less than a millisecond) can be expressed
            as two values, Days and Milliseconds.  Where Days is the number of
            whole days and Milliseconds is the number of milliseconds for the
            partial day.  Both of these values are ULONG.

    @xref   <f SystemTimeToFileTime> <t SYSTEMTIME> <f FileTimeToSystemTime>
********/
#ifndef WIN32
// If sos property.h has been included this will cause a redefinition
#ifndef PROPERTY_H

#ifndef _FILETIME_
#define _FILETIME_

typedef struct _FILETIME {
   DWORD dwLowDateTime;
   DWORD dwHighDateTime;
} FILETIME, FAR *LPFILETIME;

#endif // _FILETIME_

#endif // Property_H

BOOL WINAPI FileTimeToSystemTime(LPFILETIME lpTime,LPSYSTEMTIME lpTimeFields);

BOOL WINAPI SystemTimeToFileTime(LPSYSTEMTIME lpTimeFields,LPFILETIME lpTime);

BOOL WINAPI FileTimeToLocalFileTime(LPFILETIME lpft, LPFILETIME lpftLocal);

BOOL WINAPI LocalFileTimeToFileTime(LPFILETIME lpftLocal, LPFILETIME lpft);

BOOL WINAPI SetLocalTime(LPSYSTEMTIME lpstLocal);

VOID WINAPI GetLocalTime(LPSYSTEMTIME lpstLocal);
#endif // Win32

// --------------- NVRAM  API's ----------------------------------------------

typedef struct ERRORLOGPOINTER {
    WORD wNextEntryPtr ;
    WORD wNumEntries ;
} ERRORLOGPOINTER , FAR * LPERRORLOGPOINTER ;

#define MAX_ERRORLOG_ENTRIES       30
#define MAX_OEMERRBUF_SIZE         16

/********
    @doc    EXTERNAL  IFAXOS

    @types  ERRORLOGENTRY    | Used to store Log Entries.

    @field  DWORD   | dwErrorCode | This is the IFAX error code
           corresponding to the error being retrieved. See <f IFErrAssemble>
           for details of the format of this dword.

    @field  DWORD   | dwTimeStamp | The time at which this error was
           logged into NVRam. The various fields are:
           @flag  Bits 0-4 | Second divided by 2
           @flag  Bits 5-10|   Minute (0-59)
           @flag  Bits 11-15 | Hour (0-23 on a 24 hour clock)
           @flag  Bits 16-20 | Day of the month (1-31)
           @flag  Bits 21-24 | Month (1 = January, 2 = February, etc.)
           @flag  Bits 25-31 | Year offset from COUNTER_YEAR_OFFSET (add COUNTER_YEAR_OFFSET to get actual year)

    @field CHAR    | oemErrBuf  | The buffer in which the application
           specific custom data/extended error corresponding to this
           error is retrieved.

    @comm   Used as a parameter to IFNvramGetError. This will typically be
           used for diagnostic functions.

    @xref   <f IFNvramGetError>
********/

#define COUNTER_YEAR_OFFSET  (1970)

typedef struct tagERRORLOGENTRY {
   DWORD dwErrorCode;
   DWORD dwTimeStamp;
   char oemErrBuf[MAX_OEMERRBUF_SIZE];
} ERRORLOGENTRY, FAR *LPERRORLOGENTRY;

typedef DWORD ERRORLOGSENTINEL , FAR * LPERRORLOGSENTINEL ;

// Set to the current version number (12.19)
#define SENTINEL_SET              0x00000C13UL

#define MAX_COUNTERS 30
#define OEM_NVRAM_COUNTER_START 12

// Special system counter which indicates the # of times the machine has rebooted
// It is a 4 byte counter with a timestamp
// If this value is 1 then this is the first time the machine has ever been rebooted.
// - This value cannot be set by any user application!

#define BOOT_COUNTER           0

// specific counter numbers assigned for various logical counters

#define TXCALL_COUNTER         1
#define RXCALL_COUNTER         2

// ****************************************************************************
//
// An HHSOS owned counter.
// This is the number of bad boots we have suffered (meaning the HHSOS could not
// successfully init).  When this number gets too big, we stop trying to init.  
// This will cause AWCHKSOS to alert the user of the problem.
//

#define BAD_BOOTS_COUNTER      3

//
// ****************************************************************************


// These values for wFlags (in IFSetCounterValue) - some are mutually exclusive

// If CLEARSET is set the value is cleared before being added - otherwise it is just added
// Currently you cannot request a double long and a timestamp

// For now the interrupt has no context but in the future it might be useful

#define COUNTER_CLEARSET          0x0001
#define COUNTER_DOUBLE_LONG       0x0002
#define COUNTER_UPDATE_TIMESTAMP  0x0004
#define COUNTER_INTERRUPT_CONTEXT 0x1000

// Only here temporarily until everything gets moved to new values

#define COUNTER_VALUESET     (COUNTER_CLEARSET | COUNTER_UPDATE_TIMESTAMP)
#define COUNTER_ADDVALUE     0x0100
#define COUNTER_TIMESTAMP    0x0200
#define COUNTER_NOTIMESTAMP  COUNTER_DOUBLE_LONG
#define PROCESS_CONTEXT      0x0300
#define INTERRUPT_CONTEXT    COUNTER_INTERRUPT_CONTEXT

/********
    @doc    EXTERNAL  IFAXOS

    @types  COUNTERENTRY    | Used to store 4 and 8 byte Counters.

    @field  DWORD   | dwCounterVal1 | For a 4 byte counter, the value of the
           counter. For an 8 byte counter, the low order
           4 bytes of the value of the counter.

    @field  DWORD   | dwTimeStamp | For a 4 byte counter, the time at
           which the counter was last reset. The fields in the timestamp are:
           @flag  Bits 0-4 | Second divided by 2
           @flag  Bits 5-10|   Minute (0-59)
           @flag  Bits 11-15 | Hour (0-23 on a 24 hour clock)
           @flag  Bits 16-20 | Day of the month (1-31)
           @flag  Bits 21-24 | Month (1 = January, 2 = February, etc.)
           @flag  Bits 25-31 | Year offset from 1980 (add 1980 to get actual year)

           For an 8 byte counter, dwTimeStamp is the high order 4 bytes of the
           counter value.

    @comm   Used by the IFNvramGetCounterValue function.

    @xref   <f IFNvramGetCounterValue>
********/
typedef struct tagCOUNTERENTRY {
   DWORD dwCounterVal1;
   DWORD dwTimeStamp;
} COUNTERENTRY, FAR *LPCOUNTERENTRY;

//-------------------------- Prototypes ----------------------------------

#if defined(WFW) || defined(WIN32)

#define IFNvramSetError(dw,lpb,w)              (0)
#define IFNvramSetErrorInterrupt(dw,lpb,w)         (0)
#define IFNvramGetError(lperrlog,lpwMaxEntries) (0)
#define IFNvramSetCounterValue(p1,p2,p3,p4)    (0)
#define IFNvramGetCounterValue(w1,lpentry)         (0)
#define IFNvramAllocScratchBuf(wSize)          (NULL)

#else

BOOL WINAPI     IFNvramSetError(DWORD, LPBYTE, WORD);
BOOL WINAPI     IFNvramSetErrorInterrupt(DWORD, LPBYTE, WORD);
BOOL FAR CDECL  IFNvramvSetError(DWORD dwError,WORD nErrs,...) ;
BOOL WINAPI     IFNvramGetError(LPERRORLOGENTRY lperrlog,LPWORD lpwMaxEntries) ;
BOOL WINAPI     IFNvramSetCounterValue(WORD, DWORD, DWORD, WORD);
BOOL WINAPI     IFNvramGetCounterValue(WORD, LPCOUNTERENTRY);
BOOL WINAPI     IFNvramFlushToFileLog(VOID) ;
BOOL WINAPI     IFNvramInitFileLog(VOID) ;
LPBYTE WINAPI   IFNvramAllocScratchBuf(WORD wSize);

#endif

/********
    @doc    EXTERNAL   IFAXOS

    @api    BOOL | _lflush | Flushes all pending writes to a file handle.

    @parm   HFILE  | hf    | A file handle obtained from _lopen or OpenFile

    @rdesc  Returns TRUE for success, FALSE for failure.

    @comm   This function will flush all pending writes to disk.

            For Win16 implementations, this currently always fails.
*********/

BOOL WINAPI _lflush(HFILE hf);


// the following is for service messages
#define IF_ST_END_SOSBK        (IF_SERVICE_START+0)
#define IF_ST_END_SOSRST       (IF_SERVICE_START+1)


#ifdef __cplusplus
} // extern "C" {
#endif

#endif  // _INC_IFAXOS
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\version.h ===
/****************************************************************************
 *                                                                          *
 *      VERSION.H        -- Version information for internal builds         *
 *                                                                          *
 *      This file is only modified by the official builder to update the    *
 *      VERSION, VER_PRODUCTVERSION and VER_PRODUCTVERSION_STR values       *
 *                                                                          *
 ****************************************************************************/

#ifndef VS_FF_DEBUG
/* ver.h defines constants needed by the VS_VERSION_INFO structure */
#ifdef WIN32
#include <winver.h>
#else
#include <ver.h>
#endif
#endif

/*--------------------------------------------------------------*/
/* the following entry should be phased out in favor of         */
/* VER_PRODUCTVERSION_STR, but is used in the shell today.      */
/*--------------------------------------------------------------*/


/*--------------------------------------------------------------*/
/* the following values should be modified by the official      */
/* builder for each build                                       */
/*--------------------------------------------------------------*/

#define VERSION                     "0.0.0"
#define VER_FILEVERSION_STR         "0.0.0\0"
#define VER_FILEVERSION             0,0,0,0
#define VER_PRODUCTVERSION_STR      "0.0.0\0"
#define VER_PRODUCTVERSION          0,0,0,0

// #define OFFICIAL
// #define FINAL

/*--------------------------------------------------------------*/
/* the following section defines values used in the version     */
/* data structure for all files, and which do not change.       */
/*--------------------------------------------------------------*/

/* default is nodebug */
#ifndef DEBUG
#define VER_DEBUG                   0
#else
#define VER_DEBUG                   VS_FF_DEBUG
#endif

/* default is privatebuild */
#ifndef OFFICIAL
#define VER_PRIVATEBUILD            VS_FF_PRIVATEBUILD
#else
#define VER_PRIVATEBUILD            0
#endif

/* default is prerelease */
#ifndef FINAL
#define VER_PRERELEASE              VS_FF_PRERELEASE
#else
#define VER_PRERELEASE              0
#endif

#define VER_FILEFLAGSMASK           VS_FFI_FILEFLAGSMASK
#define VER_FILEOS                  VOS_DOS_WINDOWS16
#define VER_FILEFLAGS               (VER_PRIVATEBUILD|VER_PRERELEASE|VER_DEBUG)

#define VER_COMPANYNAME_STR         "Microsoft Corporation\0"
#define VER_PRODUCTNAME_STR         "Microsoft\256 Windows(TM) Operating System\0"
#define VER_LEGALTRADEMARKS_STR     \
"Microsoft\256 is a registered trademark of Microsoft Corporation. Windows(TM) is a trademark of Microsoft Corporation.\0"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\rambo.h ===
// Copyright (c) Microsoft Corp. 1994-95

#ifndef _RAMBO_
#define _RAMBO_

#include <windows.h>
#include <pshpack2.h>		// The structures in this file need to be word-aligned.

// common header
typedef struct
{
	WORD  cbRest;
	DWORD dwID;
	WORD  wClass;
}
	RESHDR, FAR *LPRESHDR;

// resource classes
#define ID_GLYPH   1
#define ID_BRUSH   2
#define ID_BITMAP  3
#define ID_RPL     4
#define ID_CONTROL 8
#define ID_BAND   10

// control IDs
#define ID_BEGJOB  0x49505741 // "AWPI"
#define ID_ENDPAGE 0x45474150 // "PAGE"
#define ID_ENDJOB  0x4a444e45 // "ENDJ"

// job header
typedef struct BEGJOB
{ 
	// common header
	WORD  cbRest;     // sizeof(BEGJOB) - sizeof(WORD)
	DWORD dwID;       // ID_BEGJOB
	WORD  wClass;     // ID_CONTROL

	// image attributes
	DWORD xBand;      // page width  [pixels]
	DWORD yBand;      // band height [pixels]
	WORD  xRes;       // horizontal resolution [dpi]
	WORD  yRes;       // vertical resolution [dpi]

	// memory attributes
	DWORD cbCache;    // cache size [KB]
	WORD  cResDir;    // directory size
	BYTE  bBitmap;    // bitmap compression
	BYTE  bGlyph;     // glyph compression
	BYTE  bBrush;     // stock brush set
	BYTE  bPad[3];    // reserved, must be 0
}
	BEGJOB, FAR *LPBEGJOB;

// job tailer
typedef struct ENDJOB
{
	// common header
	WORD  cbRest;      // sizeof(ENDJOB) - sizeof(WORD)
	DWORD dwID;        // ID_ENDJOB
	WORD  wClass;      // ID_CONTROL

	// job attributes
	WORD  cPage;       // number of pages
	WORD  yMax;        // maximum height
}
	ENDJOB, FAR *LPENDJOB;

// bitmap header
typedef	struct
{
	BYTE  bComp;
	BYTE  bLeftPad;
	WORD  wHeight;
	WORD  wWidth;
}
	BMPHDR, FAR* LPBMPHDR;

#include <poppack.h>

#endif // _RAMBO_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\migrate.h ===
#ifndef __MIGRATE_H
#define __MIGRATE_H
/*++
  migrate.h

  Copyright (c) 1997  Microsoft Corporation


  This file contains prototypes & definitions for the Win95->XP Fax
  migration DLL.

  Author:

  Brian Dewey (t-briand) 1997-7-14

--*/


//
//  Vendor Info Stucture
//
typedef struct {
    CHAR    CompanyName[256];
    CHAR    SupportNumber[256];
    CHAR    SupportUrl[256];
    CHAR    InstructionsToUser[1024];
} VENDORINFO, *PVENDORINFO;


// ------------------------------------------------------------
// Prototypes

// All of these functions are required in a migration DLL.
LONG
CALLBACK 
QueryVersion (
	OUT LPCSTR  *ProductID,	    // Unique identifier string.
	OUT LPUINT  DllVersion,	    // Version number.  Cannot be zero.
	OUT LPINT   *CodePageArray, // OPTIONAL.  Language dependencies.
	OUT LPCSTR  *ExeNamesBuf,   // OPTIONAL.  Executables to look for.
	PVENDORINFO  *VendorInfo    //  Vendor Info
	);

LONG
CALLBACK
Initialize9x(
    IN  LPCSTR WorkingDirectory,  // Place to store files.
    IN  LPCSTR SourceDirectories, // Location of the Windows XP source. MULTI-SZ.
    IN  LPCSTR MediaDirectory     // Path to the original media directory
    );

LONG
CALLBACK
MigrateUser9x(
    IN  HWND ParentWnd,		  // Parent (if need a UI)
    IN  LPCSTR UnattendFile,	  // Name of unattend file
    IN  HKEY UserRegKey,	  // Key to this user's registry settings.
    IN  LPCSTR UserName,	  // Account name of user.
    LPVOID Reserved
    );

LONG
CALLBACK
MigrateSystem9x(
    IN  HWND ParentWnd,		  // Parent for UI.
    IN  LPCSTR UnattendFile,	  // Name of unattend file
    LPVOID Reserved
    );

LONG
CALLBACK
InitializeNT(
    IN  LPCWSTR WorkingDirectory, // Working directory for temporary files.
    IN  LPCWSTR SourceDirectory,  // Directory of winNT source.
    LPVOID Reserved		  // It's reserved.
    );

LONG
CALLBACK
MigrateUserNT(
    IN  HINF UnattendInfHandle,	  // Access to the unattend.txt file.
    IN  HKEY UserRegHandle,	  // Handle to registry settings for user.
    IN  LPCWSTR UserName,	  // Name of the user.
    LPVOID Reserved
    );

LONG
CALLBACK
MigrateSystemNT(
    IN  HINF UnattendInfHandle,	  // Access to the unattend.txt file.
    LPVOID Reserved
    );

// ------------------------------------------------------------
// defines
#define FAX_MIGRATION_VERSION	(1)

// ------------------------------------------------------------
// global data
extern LPCTSTR lpLogonUser;	  // Holds the logon user name for faxuser.ini
extern TCHAR   szInfFileName[MAX_PATH];	  // Name of the generated INF file.
extern HINSTANCE hinstMigDll;	  // Handle to the migration DLL instance.

#define INF_RULE_LOCAL_ID           _T("LocalID")
#define INF_RULE_NUM_RINGS          _T("NumRings")
#define INF_RULE_ANSWER_MODE        _T("AnswerMode")


#endif // __MIGRATE_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\property.h ===
//
// MAPI Properties
//
//
// Mail user generic properties =                       0x3a00 - 0x3aff

//  4000    57FF    Transport-defined envelope property
//  5800    5FFF    Transport-defined per-recipient property
//  6000    65FF    User-defined non-transmittable property
//  6600    67FF    Provider-defined internal non-transmittable property
//  6800    7BFF    Message class-defined content property
//  7C00    7FFF    Message class-defined non-transmittable
//                  property


// Transport-defined message envelope properties =      0x4000 - 0x57ff
// Transport-defined recipient properties =             0x5800 - 0x5fff
// User-defined non-transmittable message props =       0x6000 - 0x65ff
// Provider-defined internal non-transmittable props =  0x6600 - 0x67ff
// Message class-defined message content properties =   0x6800 - 0x7bff
// Message class-defined non-transmittable message
//  props =                                             0x7c00 - 0x7fff
// User-defined properties identified only by name,
//  through the property name to ID mapping facility
//  of the IMAPIProp interface =                        0x8000 - 0xfffe
//

#define TRANSPORT_ENVELOPE_BASE             0x4000
#define TRANSPORT_RECIP_BASE                0x5800
#define USER_NON_TRANSMIT_BASE              0x6000
#define PROVIDER_INTERNAL_NON_TRANSMIT_BASE 0x6600
#define MESSAGE_CLASS_CONTENT_BASE          0x6800
#define MESSAGE_CLASS_NON_TRANSMIT_BASE     0x7C00

#define EFAX_MESSAGE_BASE                   TRANSPORT_ENVELOPE_BASE + 0x500
#define EFAX_RECIPIENT_BASE                 TRANSPORT_RECIP_BASE + 0x100
#define EFAX_PR_OPTIONS_BASE                PROVIDER_INTERNAL_NON_TRANSMIT_BASE + 0x100

#define EFAX_ADDR_TYPE                      "FAX"

//
// LOGON Properties
//
// Properties we store in the Profile.
//
// The following is used to access the properties in the logon array.
// If you add a property to the profile, you should increment this number!
#define MAX_LOGON_PROPERTIES                10

// Other logon properties:
//  PR_SENDER_NAME                          - in mapitags.h
//  PR_SENDER_EMAIL_ADDRESS                 - in mapitags.h (this file)
// Fax Product name
#define PR_FAX_PRODUCT_NAME                 PROP_TAG(PT_TSTRING, (EFAX_PR_OPTIONS_BASE + 0x0))

// Active fax device name
#define PR_FAX_ACTIVE_MODEM_NAME            PROP_TAG(PT_TSTRING, (EFAX_PR_OPTIONS_BASE + 0x1))

// If value is TRUE, work offline
#define PR_FAX_WORK_OFF_LINE                PROP_TAG(PT_BOOLEAN, (EFAX_PR_OPTIONS_BASE + 0x2))

// If true, you want to share the active fax device
#define PR_FAX_SHARE_DEVICE                 PROP_TAG(PT_BOOLEAN, (EFAX_PR_OPTIONS_BASE + 0x3))

// The share name
#define PR_FAX_SHARE_NAME                   PROP_TAG(PT_TSTRING, (EFAX_PR_OPTIONS_BASE + 0x4))

// Sender Country code ID - used internally by fax config
#define PR_FAX_SENDER_COUNTRY_ID            PROP_TAG(PT_LONG,    (EFAX_PR_OPTIONS_BASE + 0x5))

// multi-value proerty to hold the names of the netfax devices the user added
#define PR_FAX_NETFAX_DEVICES               PROP_TAG(PT_MV_STRING8, (EFAX_PR_OPTIONS_BASE + 0x6))

// The share pathname on the sharing machine
#define PR_FAX_SHARE_PATHNAME               PROP_TAG(PT_TSTRING, (EFAX_PR_OPTIONS_BASE + 0x7))

// Profile section version
#define PR_FAX_PROFILE_VERSION              PROP_TAG(PT_LONG, (EFAX_PR_OPTIONS_BASE + 0x8))

//
// Non-Transmittable message properties
//

#define PR_FAX_CHEAP_BEGIN_HOUR             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x1))
#define PR_FAX_CHEAP_BEGIN_MINUTE           PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x2))
#define PR_FAX_CHEAP_END_HOUR               PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x3))
#define PR_FAX_CHEAP_END_MINUTE             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x4))
#define PR_FAX_NOT_EARLIER_HOUR             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x5))
#define PR_FAX_NOT_EARLIER_MINUTE           PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x6))
#define PR_FAX_NOT_EARLIER_DATE             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x7))
#define PR_FAX_NUMBER_RETRIES               PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x8))
#define PR_FAX_MINUTES_BETWEEN_RETRIES      PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x9))
// Should a cover page be sent with this message
#define PR_FAX_INCLUDE_COVER_PAGE           PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0xA))
#define PR_FAX_COVER_PAGE_BODY              PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0xB))
#define PR_FAX_LOGO_STRING                  PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0xC))
// Should this message be send as text, in printed format, or best available
#define PR_FAX_DELIVERY_FORMAT              PROP_TAG(PT_LONG,    (EFAX_MESSAGE_BASE + 0xD))
#define PR_FAX_PRINT_ORIENTATION            PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0xE))
#define PR_FAX_PAPER_SIZE                   PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0xF))
#define PR_FAX_IMAGE_QUALITY                PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x10))
// These should be set by transport so Linearizer can see them.
#define PR_FAX_SENDER_NAME                  PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0x11))
#define PR_FAX_SENDER_EMAIL_ADDRESS         PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0x12))
#define PR_FAX_LMI_CUSTOM_OPTION            PROP_TAG(PT_BINARY,  (EFAX_MESSAGE_BASE + 0x13))
#define PR_FAX_PREVIOUS_STATE               PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x14))
#define PR_FAX_FAXJOB                       PROP_TAG(PT_BINARY,  (EFAX_MESSAGE_BASE + 0x15))
// The billing code to bill for the transmission of this message
#define PR_FAX_BILLING_CODE                 PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0x16))
// Previous billing codes used
#define PR_FAX_PREV_BILLING_CODES           PROP_TAG(PT_MV_STRING8, (EFAX_MESSAGE_BASE + 0x17))
// Is Fax message to begin (or fully included, if short) on the cover page
#define PR_FAX_BGN_MSG_ON_COVER             PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0x18))
// Should the message be sent immediately, at cheap rates or at a specific time
#define PR_FAX_SEND_WHEN_TYPE               PROP_TAG(PT_LONG,    (EFAX_MESSAGE_BASE + 0x19))
// Absolute pathname of default coverpage file
#define PR_FAX_DEFAULT_COVER_PAGE           PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0x1A))
// Maximum Time to wait for connection (seconds)
#define PR_FAX_MAX_TIME_TO_WAIT             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x1B))
// Enable/Disable logging calls
#define PR_FAX_LOG_ENABLE                   PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0x1C))
// Number of calls to keep log of
#define PR_FAX_LOG_NUM_OF_CALLS             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x1D))
// Display call progress
#define PR_FAX_DISPLAY_PROGRESS             PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0x1E))
// Embed Linked objects before sending
#define PR_FAX_EMBED_LINKED_OBJECTS         PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0x1F))
// TAPI Location ID
#define PR_FAX_TAPI_LOC_ID                  PROP_TAG(PT_LONG,    (EFAX_MESSAGE_BASE + 0x20))
// Must render ALL attachments before sending
#define PR_FAX_MUST_RENDER_ALL_ATTACH       PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0x21))
// Enable per-recipient options
#define PR_FAX_ENABLE_RECIPIENT_OPTIONS     PROP_TAG(PT_BOOLEAN, (EFAX_MESSAGE_BASE + 0x22))
// Calling Card Name
#define PR_FAX_CALL_CARD_NAME               PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0x24))
// Print to fax rba stream filename
#define PR_FAX_PRINT_TO_NAME                PROP_TAG(PT_STRING8, (EFAX_MESSAGE_BASE + 0x25))
#define PR_FAX_SECURITY_SEND                PROP_TAG(PT_BINARY,  (EFAX_MESSAGE_BASE + 0x26))
#define PR_FAX_SECURITY_RECEIVED            PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x27))
// RBA data property (print-to-fax)
#define PR_FAX_RBA_DATA                     PROP_TAG(PT_BINARY,  (EFAX_MESSAGE_BASE + 0x28))

// Poll retrieval
#define PR_POLL_RETRIEVE_SENDME             PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x29))
#define PR_POLL_RETRIEVE_TITLE              PROP_TAG(PT_TSTRING, (EFAX_MESSAGE_BASE + 0x30))
#define PR_POLL_RETRIEVE_PASSWORD           PROP_TAG(PT_TSTRING, (EFAX_MESSAGE_BASE + 0x31))
#define PR_POLLTYPE                         PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x32))

// Poll server
#define PR_MESSAGE_TYPE                     PROP_TAG(PT_I2,      (EFAX_MESSAGE_BASE + 0x33))

// Digital signature for an attachment
#define PR_ATTACH_SIGNATURE                 PROP_TAG(PT_BINARY,  (EFAX_MESSAGE_BASE + 0x34))

// (print-to-fax # of pages)
#define PR_FAX_PRINT_TO_PAGES               PROP_TAG(PT_LONG,    (EFAX_MESSAGE_BASE + 0x35))

// On incoming message attachment, this contains image data requiring render conversion.
#define PR_FAX_IMAGE                        PROP_TAG(PT_BINARY,  (EFAX_MESSAGE_BASE + 0x36))

// Print a header line on the top of every G3 fax page (branding)
#define PR_FAX_PRINT_HEADER                 PROP_TAG(PT_BOOLEAN,  (EFAX_MESSAGE_BASE + 0x37))

// Billing code DWORD representation
#define PR_FAX_BILLING_CODE_DWORD           PROP_TAG(PT_LONG, (EFAX_MESSAGE_BASE + 0x38))


//
// Non-Transmittable mail-user properties
//
#define PR_FAX_RECIP_CAPABILITIES           PROP_TAG(PT_I2,      (EFAX_RECIPIENT_BASE + 0x0))
// Name of the recipient to put on the cover page
#define PR_FAX_CP_NAME                      PROP_TAG(PT_TSTRING, (EFAX_RECIPIENT_BASE + 0x1))
#define PR_FAX_CP_NAME_W                    PROP_TAG(PT_UNICODE, (EFAX_RECIPIENT_BASE + 0x1))
#define PR_FAX_CP_NAME_A                    PROP_TAG(PT_STRING8, (EFAX_RECIPIENT_BASE + 0x1))
#define PR_RECIP_INDEX                      PROP_TAG(PT_I2,      (EFAX_RECIPIENT_BASE + 0x2))
#define PR_HOP_INDEX                        PROP_TAG(PT_I2,      (EFAX_RECIPIENT_BASE + 0x3))

// Moved here from chicago\ui\faxab\faxab.h
#define PR_COUNTRY_ID                       PROP_TAG(PT_LONG,0x6607)
#define PR_AREA_CODE                        PROP_TAG(PT_STRING8,0x6608)
#define PR_TEL_NUMBER                       PROP_TAG(PT_STRING8,0x6609)
#define PR_MAILBOX                          PROP_TAG(PT_STRING8,0x660a)


#define ArrayIndex(PROP, ARRAY)(ARRAY)[(PROP_ID(PROP) - EFAX_XP_MESSAGE_BASE - 1)]


/**********************************************************************************

   Property Values Section

***********************************************************************************/

#define NUM_SENDER_PROPS            3       // How many sender ID properties?

// Send As
// PR_FAX_DELIVERY_FORMAT
#define SEND_BEST                  0
#define SEND_EDITABLE              1
#define SEND_PRINTED               2
#define DEFAULT_SEND_AS                SEND_BEST

// Send At
// PR_FAX_SEND_WHEN_TYPE
#define SEND_ASAP                  0
#define SEND_CHEAP                 1
#define SEND_AT_TIME               2
#define DEFAULT_SEND_AT            SEND_ASAP

// Paper Size
// PR_FAX_PAPER_SIZE
#define PAPER_US_LETTER            0       // US Letter page size
#define PAPER_US_LEGAL             1
#define PAPER_A4                   2
#define PAPER_B4                   3
#define PAPER_A3                   4
// "real" default page size is in a resource string depending on U.S. vs metric
#define DEFAULT_PAPER_SIZE      PAPER_US_LETTER     // Default page size

// Print Orientation
// PR_FAX_PRINT_ORIENTATION
#define PRINT_PORTRAIT             0       // Protrait printing
#define PRINT_LANDSCAPE            1
#define DEFAULT_PRINT_ORIENTATION  PRINT_PORTRAIT

// Image Quality
// PR_FAX_IMAGE_QUALITY
#define IMAGE_QUALITY_BEST         0
#define IMAGE_QUALITY_STANDARD     1
#define IMAGE_QUALITY_FINE         2
#define IMAGE_QUALITY_300DPI       3
#define IMAGE_QUALITY_400DPI       4
#define DEFAULT_IMAGE_QUALITY      IMAGE_QUALITY_BEST

// Speaker
// PR_FAX_SPEAKER_VOLUME
#define NUM_OF_SPEAKER_VOL_LEVELS  4   // Number of speaker volume levels
#define DEFAULT_SPEAKER_VOLUME     2   // Default speaker volume level
#define SPEAKER_ALWAYS_ON          2   // Speaker mode: always on
#define SPEAKER_ON_UNTIL_CONNECT   1   // speaker on unitl connected
#define SPEAKER_ALWAYS_OFF         0   // Speaker off
#define DEFAULT_SPEAKER_MODE       SPEAKER_ON_UNTIL_CONNECT   // Default speaker mode

// Answer
// PR_FAX_ANSWER_MODE
#define NUM_OF_RINGS                3
#define ANSWER_NO                  0
#define ANSWER_MANUAL               1
#define ANSWER_AUTO                 2
#define DEFAULT_ANSWER_MODE         ANSWER_NO

// Blind Dial
#define DEFAULT_BLIND_DIAL         3
// Comma Delay
#define DEFAULT_COMMA_DELAY            2
// Dial Tone Wait
#define DEFAULT_DIAL_TONE_WAIT     30
// Hangup Delay
#define DEFAULT_HANGUP_DELAY       60

// Poll retrieval
// PR_POLL_RETRIEVE_SENDME
#define SENDME_DEFAULT              0
#define SENDME_DOCUMENT             1

// PR_POLLTYPE
#define POLLTYPE_REQUEST            1
#define POLLTYPE_STORE              2

// Type of fax devices (line IDs)
// PR_FAX_ACTIVE_MODEM_TYPE
/*
   defined in ifaxdev\h\filet30.h

#define LINEID_NONE        (0x0)
#define LINEID_COMM_PORTNUM        (0x1)
#define LINEID_COMM_HANDLE     (0x2)
#define LINEID_TAPI_DEVICEID       (0x3)
#define LINEID_TAPI_PERMANENT_DEVICEID (0x4)
#define LINEID_NETFAX_DEVICE   (0x10)

*/

// Line ID (depends on the value in PR_FAX_ACTIVE_MODEM_TYPE)
// PR_FAX_ACTIVE_MODEM
#define    NO_MODEM                    0xffffffff  // To show no modem is selected

// PR_FAX_TAPI_LOC_ID
#define    NO_LOCATION                 0xffffffff  // No TAPI location

// Values for PR_FAX_FLAGS
// #define EFAX_FLAG_PEER_TO_PEER              ((ULONG)0x00000001)
#define EFAX_FLAG_UI_ALWAYS                 ((ULONG)0x00000002)
// #define EFAX_FLAG_LOG_EVENTS                ((ULONG)0x00000004)
#define EFAX_FLAG_SAVE_DATA                 ((ULONG)0x00000008)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\migrate\makefile.inc ===
$(NTTARGETFILE0): msg00001.bin

msg.mc: $(BASEDIR)\private\genx\setup\win95upg\vendinfo.mc
        copy $(BASEDIR)\private\genx\setup\win95upg\vendinfo.mc msg.mc

msg.h msg00001.bin msg.rc:msg.mc
        mc -v msg.mc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\resexec.h ===
// Copyright (c) Microsoft Corp. 1994

// Resource Executor API

#ifndef _RESEXEC_
#define _RESEXEC_

#ifdef __cplusplus
extern "C" {
#endif

#ifdef IFBGPROC
#ifndef _BITMAP_
#define _BITMAP_

// Win 3.1 Bitmap
typedef struct
{
	int     bmType;
	int     bmWidth;
	int     bmHeight;
	int     bmWidthBytes;
	BYTE    bmPlanes;
	BYTE    bmBitsPixel;
	void FAR* bmBits;
}
	BITMAP, FAR *LPBITMAP;

#endif // _BITMAP_	
#endif // IFBGPROC

typedef struct
{
	WORD wReserved;
	WORD wSize;             // size of this block
	LPBYTE lpData;          // pointer to frame data
}
	FRAME, FAR *LPFRAME;

HANDLE                 // context handle (NULL on failure)
WINAPI hHREOpen
(
	LPVOID lpReserved,   // reserved: set to NULL
	UINT   cbLine,       // maximum page width in bytes
	UINT   cResDir       // entries in resource directory
);

UINT   WINAPI uiHREWrite (HANDLE, LPFRAME, UINT);

UINT   WINAPI uiHREExecute
(
	HANDLE   hRE,        // resource executor context
  LPBITMAP lpbmBand,   // output band buffer
  LPVOID   lpBrushPat  // array of 32x32 brush patterns
);

UINT   WINAPI uiHREClose (HANDLE);

void   WINAPI UnpackGlyphSet (LPVOID, LPVOID);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // _RESEXEC_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\viewrend.h ===
// Copyright (c) Microsoft Corp. 1993-94
/*==============================================================================
This header file defines the viewer rendering support API.

17-Oct-93    RajeevD    Created.
25-Oct-93    RajeevD    Updated to support random access to bands.
==============================================================================*/
#ifndef _INC_VIEWREND
#define _INC_VIEWREND

#include <ifaxos.h>

#ifdef IFBGPROC
#ifndef _BITMAP_
#define _BITMAP_

// Win 3.1 Bitmap
typedef struct
{
	int     bmType;
	int     bmWidth;
	int     bmHeight;
	int     bmWidthBytes;
	BYTE    bmPlanes;
	BYTE    bmBitsPixel;
	void FAR* bmBits;
}
	BITMAP, FAR *LPBITMAP;

#endif // _BITMAP_	
#endif // IFBGPROC
	
#ifdef __cplusplus
extern "C" {
#endif

typedef struct
{
	WORD cPage;  // number of pages
	WORD xRes;   // horizontal resolution [dpi]
	WORD yRes;   // vertical resolution [dpi]
	WORD yMax;   // maximum page height [pixels]
}
	VIEWINFO, FAR* LPVIEWINFO;
	
/*==============================================================================
This initialization procedure creates a context for use in all subsequent calls.
Upon call, the lpwBandSize parameter point to the preferred output band buffer 
size.  Upon return, it may be filled with a larger value if required.
==============================================================================*/
LPVOID                // returns context (NULL on failure)
WINAPI
ViewerOpen
(
	LPVOID     lpFile,      // IFAX key or Win3.1 path or OLE2 IStream
	DWORD      nType,       // data type: HRAW_DATA or LRAW_DATA
	LPWORD     lpwResoln,   // output pointer to x, y dpi array
	LPWORD     lpwBandSize, // input/output pointer to output band size
	LPVIEWINFO lpViewInfo   // output pointer to VIEWINFO struct
);

/*==============================================================================
This procedure sets the current page.  The first page has index 0.
==============================================================================*/
BOOL                   // returns success/failure
WINAPI      
ViewerSetPage
(
	LPVOID lpContext,    // context pointer
	UINT   iPage         // page index
);

/*==============================================================================
This procedure may be called repeatedly to fetch successive bands of a page.  
Upon call, lpbmBand->bmBits must point to an output band buffer.  Upon return, 
the remaining fields of lpbmBand will be filled.  The lpbmBand->bmHeight will 
be set to 0 to indicate end of page.
==============================================================================*/
BOOL                  // returns success/failure
WINAPI
ViewerGetBand
(
	LPVOID   lpContext, // context pointer
	LPBITMAP lpbmBand 
);

/*==============================================================================
This termination call releases the context.
==============================================================================*/
BOOL WINAPI ViewerClose
(
	LPVOID lpContext
);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // _INC_VIEWREND
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\tiff.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tiff.h

Abstract:

    This file the data structures and constant
    definitions for the TIFF file format.
    See the TIFF specification Revision 6.0,
    dated 6-3-92, from Adobe for specific details.

Environment:

        WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/


#ifndef _TIFF_
#define _TIFF_

#define TIFF_VERSION    42

#define TIFF_BIGENDIAN          0x4d4d
#define TIFF_LITTLEENDIAN       0x4949

#pragma pack(1)

typedef struct _TIFF_HEADER {
    WORD        Identifier;
    WORD        Version;
    DWORD       IFDOffset;
} TIFF_HEADER, *PTIFF_HEADER;

//
// TIFF Image File Directories are comprised of
// a table of field descriptors of the form shown
// below.  The table is sorted in ascending order
// by tag.  The values associated with each entry
// are disjoint and may appear anywhere in the file
// (so long as they are placed on a word boundary).
//
// If the value is 4 bytes or less, then it is placed
// in the offset field to save space.  If the value
// is less than 4 bytes, it is left-justified in the
// offset field.
//
typedef struct _TIFF_TAG {
    WORD        TagId;
    WORD        DataType;
    DWORD       DataCount;
    DWORD       DataOffset;
} TIFF_TAG, *PTIFF_TAG;

#pragma pack()


//
// NB: In the comments below,
//  - items marked with a + are obsoleted by revision 5.0,
//  - items marked with a ! are introduced in revision 6.0.
//  - items marked with a % are introduced post revision 6.0.
//  - items marked with a $ are obsoleted by revision 6.0.
//

//
// Tag data type information.
//
#define TIFF_NOTYPE                     0       // placeholder
#define TIFF_BYTE                       1       // 8-bit unsigned integer
#define TIFF_ASCII                      2       // 8-bit bytes w/ last byte null
#define TIFF_SHORT                      3       // 16-bit unsigned integer
#define TIFF_LONG                       4       // 32-bit unsigned integer
#define TIFF_RATIONAL                   5       // 64-bit unsigned fraction
#define TIFF_SBYTE                      6       // !8-bit signed integer
#define TIFF_UNDEFINED                  7       // !8-bit untyped data
#define TIFF_SSHORT                     8       // !16-bit signed integer
#define TIFF_SLONG                      9       // !32-bit signed integer
#define TIFF_SRATIONAL                  10      // !64-bit signed fraction
#define TIFF_FLOAT                      11      // !32-bit IEEE floating point
#define TIFF_DOUBLE                     12      // !64-bit IEEE floating point

//
// TIFF Tag Definitions.
//
#define TIFFTAG_SUBFILETYPE             254     // subfile data descriptor
#define     FILETYPE_REDUCEDIMAGE       0x1     // reduced resolution version
#define     FILETYPE_PAGE               0x2     // one page of many
#define     FILETYPE_MASK               0x4     // transparency mask
#define TIFFTAG_OSUBFILETYPE            255     // +kind of data in subfile
#define     OFILETYPE_IMAGE             1       // full resolution image data
#define     OFILETYPE_REDUCEDIMAGE      2       // reduced size image data
#define     OFILETYPE_PAGE              3       // one page of many
#define TIFFTAG_IMAGEWIDTH              256     // image width in pixels
#define TIFFTAG_IMAGELENGTH             257     // image height in pixels
#define TIFFTAG_BITSPERSAMPLE           258     // bits per channel (sample)
#define TIFFTAG_COMPRESSION             259     // data compression technique
#define     COMPRESSION_NONE            1       // dump mode
#define     COMPRESSION_CCITTRLE        2       // CCITT modified Huffman RLE
#define     COMPRESSION_CCITTFAX3       3       // CCITT Group 3 fax encoding
#define     COMPRESSION_CCITTFAX4       4       // CCITT Group 4 fax encoding
#define     COMPRESSION_LZW             5       // Lempel-Ziv  & Welch
#define     COMPRESSION_OJPEG           6       // !6.0 JPEG
#define     COMPRESSION_JPEG            7       // %JPEG DCT compression
#define     COMPRESSION_NEXT            32766   // NeXT 2-bit RLE
#define     COMPRESSION_CCITTRLEW       32771   // #1 w/ word alignment
#define     COMPRESSION_PACKBITS        32773   // Macintosh RLE
#define     COMPRESSION_THUNDERSCAN     32809   // ThunderScan RLE
//
// compression codes 32908-32911 are reserved for Pixar
//
#define     COMPRESSION_PIXARFILM       32908   // Pixar companded 10bit LZW
#define     COMPRESSION_DEFLATE         32946   // Deflate compression
#define     COMPRESSION_JBIG            34661   // ISO JBIG
#define TIFFTAG_PHOTOMETRIC             262     // photometric interpretation
#define     PHOTOMETRIC_MINISWHITE      0       // min value is white
#define     PHOTOMETRIC_MINISBLACK      1       // min value is black
#define     PHOTOMETRIC_RGB             2       // RGB color model
#define     PHOTOMETRIC_PALETTE         3       // color map indexed
#define     PHOTOMETRIC_MASK            4       // $holdout mask
#define     PHOTOMETRIC_SEPARATED       5       // !color separations
#define     PHOTOMETRIC_YCBCR           6       // !CCIR 601
#define     PHOTOMETRIC_CIELAB          8       // !1976 CIE L*a*b*
#define TIFFTAG_THRESHHOLDING           263     // +thresholding used on data
#define     THRESHHOLD_BILEVEL          1       // b&w art scan
#define     THRESHHOLD_HALFTONE         2       // or dithered scan
#define     THRESHHOLD_ERRORDIFFUSE     3       // usually floyd-steinberg
#define TIFFTAG_CELLWIDTH               264     // +dithering matrix width
#define TIFFTAG_CELLLENGTH              265     // +dithering matrix height
#define TIFFTAG_FILLORDER               266     // data order within a byte
#define     FILLORDER_MSB2LSB           1       // most significant -> least
#define     FILLORDER_LSB2MSB           2       // least significant -> most
#define TIFFTAG_DOCUMENTNAME            269     // name of doc. image is from
#define TIFFTAG_IMAGEDESCRIPTION        270     // info about image
#define TIFFTAG_MAKE                    271     // scanner manufacturer name
#define TIFFTAG_MODEL                   272     // scanner model name/number
#define TIFFTAG_STRIPOFFSETS            273     // offsets to data strips
#define TIFFTAG_ORIENTATION             274     // +image orientation
#define     ORIENTATION_TOPLEFT         1       // row 0 top, col 0 lhs
#define     ORIENTATION_TOPRIGHT        2       // row 0 top, col 0 rhs
#define     ORIENTATION_BOTRIGHT        3       // row 0 bottom, col 0 rhs
#define     ORIENTATION_BOTLEFT         4       // row 0 bottom, col 0 lhs
#define     ORIENTATION_LEFTTOP         5       // row 0 lhs, col 0 top
#define     ORIENTATION_RIGHTTOP        6       // row 0 rhs, col 0 top
#define     ORIENTATION_RIGHTBOT        7       // row 0 rhs, col 0 bottom
#define     ORIENTATION_LEFTBOT         8       // row 0 lhs, col 0 bottom
#define TIFFTAG_SAMPLESPERPIXEL         277     // samples per pixel
#define TIFFTAG_ROWSPERSTRIP            278     // rows per strip of data
#define TIFFTAG_STRIPBYTECOUNTS         279     // bytes counts for strips
#define TIFFTAG_MINSAMPLEVALUE          280     // +minimum sample value
#define TIFFTAG_MAXSAMPLEVALUE          281     // +maximum sample value
#define TIFFTAG_XRESOLUTION             282     // pixels/resolution in x
#define TIFFTAG_YRESOLUTION             283     // pixels/resolution in y
#define TIFFTAG_PLANARCONFIG            284     // storage organization
#define     PLANARCONFIG_CONTIG         1       // single image plane
#define     PLANARCONFIG_SEPARATE       2       // separate planes of data
#define TIFFTAG_PAGENAME                285     // page name image is from
#define TIFFTAG_XPOSITION               286     // x page offset of image lhs
#define TIFFTAG_YPOSITION               287     // y page offset of image lhs
#define TIFFTAG_FREEOFFSETS             288     // +byte offset to free block
#define TIFFTAG_FREEBYTECOUNTS          289     // +sizes of free blocks
#define TIFFTAG_GRAYRESPONSEUNIT        290     // $gray scale curve accuracy
#define     GRAYRESPONSEUNIT_10S        1       // tenths of a unit
#define     GRAYRESPONSEUNIT_100S       2       // hundredths of a unit
#define     GRAYRESPONSEUNIT_1000S      3       // thousandths of a unit
#define     GRAYRESPONSEUNIT_10000S     4       // ten-thousandths of a unit
#define     GRAYRESPONSEUNIT_100000S    5       // hundred-thousandths
#define TIFFTAG_GRAYRESPONSECURVE       291     // $gray scale response curve
#define TIFFTAG_GROUP3OPTIONS           292     // 32 flag bits
#define     GROUP3OPT_2DENCODING        0x1     // 2-dimensional coding
#define     GROUP3OPT_UNCOMPRESSED      0x2     // data not compressed
#define     GROUP3OPT_FILLBITS          0x4     // fill to byte boundary
#define TIFFTAG_GROUP4OPTIONS           293     // 32 flag bits
#define     GROUP4OPT_UNCOMPRESSED      0x2     // data not compressed
#define TIFFTAG_RESOLUTIONUNIT          296     // units of resolutions
#define     RESUNIT_NONE                1       // no meaningful units
#define     RESUNIT_INCH                2       // english
#define     RESUNIT_CENTIMETER          3       // metric
#define TIFFTAG_PAGENUMBER              297     // page numbers of multi-page
#define TIFFTAG_COLORRESPONSEUNIT       300     // $color curve accuracy
#define     COLORRESPONSEUNIT_10S       1       // tenths of a unit
#define     COLORRESPONSEUNIT_100S      2       // hundredths of a unit
#define     COLORRESPONSEUNIT_1000S     3       // thousandths of a unit
#define     COLORRESPONSEUNIT_10000S    4       // ten-thousandths of a unit
#define     COLORRESPONSEUNIT_100000S   5       // hundred-thousandths
#define TIFFTAG_TRANSFERFUNCTION        301     // !colorimetry info
#define TIFFTAG_SOFTWARE                305     // name & release
#define TIFFTAG_DATETIME                306     // creation date and time
#define TIFFTAG_ARTIST                  315     // creator of image
#define TIFFTAG_HOSTCOMPUTER            316     // machine where created
#define TIFFTAG_PREDICTOR               317     // prediction scheme w/ LZW
#define TIFFTAG_WHITEPOINT              318     // image white point
#define TIFFTAG_PRIMARYCHROMATICITIES   319     // !primary chromaticities
#define TIFFTAG_COLORMAP                320     // RGB map for pallette image
#define TIFFTAG_HALFTONEHINTS           321     // !highlight+shadow info
#define TIFFTAG_TILEWIDTH               322     // !rows/data tile
#define TIFFTAG_TILELENGTH              323     // !cols/data tile
#define TIFFTAG_TILEOFFSETS             324     // !offsets to data tiles
#define TIFFTAG_TILEBYTECOUNTS          325     // !byte counts for tiles
#define TIFFTAG_BADFAXLINES             326     // lines w/ wrong pixel count
#define TIFFTAG_CLEANFAXDATA            327     // regenerated line info
#define     CLEANFAXDATA_CLEAN          0       // no errors detected
#define     CLEANFAXDATA_REGENERATED    1       // receiver regenerated lines
#define     CLEANFAXDATA_UNCLEAN        2       // uncorrected errors exist
#define TIFFTAG_CONSECUTIVEBADFAXLINES  328     // max consecutive bad lines
#define TIFFTAG_SUBIFD                  330     // subimage descriptors
#define TIFFTAG_INKSET                  332     // !inks in separated image
#define     INKSET_CMYK                 1       // !cyan-magenta-yellow-black
#define TIFFTAG_INKNAMES                333     // !ascii names of inks
#define TIFFTAG_DOTRANGE                336     // !0% and 100% dot codes
#define TIFFTAG_TARGETPRINTER           337     // !separation target
#define TIFFTAG_EXTRASAMPLES            338     // !info about extra samples
#define     EXTRASAMPLE_UNSPECIFIED     0       // !unspecified data
#define     EXTRASAMPLE_ASSOCALPHA      1       // !associated alpha data
#define     EXTRASAMPLE_UNASSALPHA      2       // !unassociated alpha data
#define TIFFTAG_SAMPLEFORMAT            339     // !data sample format
#define     SAMPLEFORMAT_UINT           1       // !unsigned integer data
#define     SAMPLEFORMAT_INT            2       // !signed integer data
#define     SAMPLEFORMAT_IEEEFP         3       // !IEEE floating point data
#define     SAMPLEFORMAT_VOID           4       // !untyped data
#define TIFFTAG_SMINSAMPLEVALUE         340     // !variable MinSampleValue
#define TIFFTAG_SMAXSAMPLEVALUE         341     // !variable MaxSampleValue
#define TIFFTAG_JPEGTABLES              347     // %JPEG table stream
//
// Tags 512-521 are obsoleted by Technical Note #2
// which specifies a revised JPEG-in-TIFF scheme.
//
#define TIFFTAG_JPEGPROC                512     // !JPEG processing algorithm
#define     JPEGPROC_BASELINE           1       // !baseline sequential
#define     JPEGPROC_LOSSLESS           14      // !Huffman coded lossless
#define TIFFTAG_JPEGIFOFFSET            513     // !pointer to SOI marker
#define TIFFTAG_JPEGIFBYTECOUNT         514     // !JFIF stream length
#define TIFFTAG_JPEGRESTARTINTERVAL     515     // !restart interval length
#define TIFFTAG_JPEGLOSSLESSPREDICTORS  517     // !lossless proc predictor
#define TIFFTAG_JPEGPOINTTRANSFORM      518     // !lossless point transform
#define TIFFTAG_JPEGQTABLES             519     // !Q matrice offsets
#define TIFFTAG_JPEGDCTABLES            520     // !DCT table offsets
#define TIFFTAG_JPEGACTABLES            521     // !AC coefficient offsets
#define TIFFTAG_YCBCRCOEFFICIENTS       529     // !RGB -> YCbCr transform
#define TIFFTAG_YCBCRSUBSAMPLING        530     // !YCbCr subsampling factors
#define TIFFTAG_YCBCRPOSITIONING        531     // !subsample positioning
#define     YCBCRPOSITION_CENTERED      1       // !as in PostScript Level 2
#define     YCBCRPOSITION_COSITED       2       // !as in CCIR 601-1
#define TIFFTAG_REFERENCEBLACKWHITE     532     // !colorimetry info
//
// tags 32952-32956 are private tags registered to Island Graphics
//
#define TIFFTAG_REFPTS                  32953   // image reference points
#define TIFFTAG_REGIONTACKPOINT         32954   // region-xform tack point
#define TIFFTAG_REGIONWARPCORNERS       32955   // warp quadrilateral
#define TIFFTAG_REGIONAFFINE            32956   // affine transformation mat
//
// tags 32995-32999 are private tags registered to SGI
//
#define TIFFTAG_MATTEING                32995   // $use ExtraSamples
#define TIFFTAG_DATATYPE                32996   // $use SampleFormat
#define TIFFTAG_IMAGEDEPTH              32997   // z depth of image
#define TIFFTAG_TILEDEPTH               32998   // z depth/data tile
//
// tags 33300-33309 are private tags registered to Pixar
//
// TIFFTAG_PIXAR_IMAGEFULLWIDTH and TIFFTAG_PIXAR_IMAGEFULLLENGTH
// are set when an image has been cropped out of a larger image.
// They reflect the size of the original uncropped image.
// The TIFFTAG_XPOSITION and TIFFTAG_YPOSITION can be used
// to determine the position of the smaller image in the larger one.
//
#define TIFFTAG_PIXAR_IMAGEFULLWIDTH    33300   // full image size in x
#define TIFFTAG_PIXAR_IMAGEFULLLENGTH   33301   // full image size in y
//
// tag 33432 is listed in the 6.0 spec w/ unknown ownership
//
#define TIFFTAG_COPYRIGHT               33432   // copyright string
//
// tags 34232-34236 are private tags registered to Texas Instruments
//
#define TIFFTAG_FRAMECOUNT              34232   // Sequence Frame Count
//
// tag 34750 is a private tag registered to Pixel Magic
//
#define TIFFTAG_JBIGOPTIONS             34750   // JBIG options
//
// tags 34908-34914 are private tags registered to SGI
//
#define TIFFTAG_FAXRECVPARAMS           34908   // encoded Class 2 ses. parms
#define TIFFTAG_FAXSUBADDRESS           34909   // received SubAddr string
#define TIFFTAG_FAXRECVTIME             34910   // receive time (secs)
//
// tags 40001-40100 are private tags registered to ms
//
#define TIFFTAG_RECIP_NAME              40001
#define TIFFTAG_RECIP_NUMBER            40002
#define TIFFTAG_SENDER_NAME             40003
#define TIFFTAG_ROUTING                 40004
#define TIFFTAG_CALLERID                40005
#define TIFFTAG_TSID                    40006
#define TIFFTAG_CSID                    40007
#define TIFFTAG_FAX_TIME                40008
//
// The following are ``pseudo tags'' that can be
// used to control codec-specific functionality.
// These tags are not written to file.  Note that
// these values start at 0xffff+1 so that they'll
// never collide with Aldus-assigned tags.
//
// If you want your private pseudo tags ``registered''
// (i.e. added to this file), send mail to sam@sgi.com
// with the appropriate C definitions to add.
//
#define TIFFTAG_FAXMODE                 65536   // Group 3/4 format control
#define     FAXMODE_CLASSIC     0x0000          // default, include RTC
#define     FAXMODE_NORTC       0x0001          // no RTC at end of data
#define     FAXMODE_NOEOL       0x0002          // no EOL code at end of row
#define     FAXMODE_BYTEALIGN   0x0004          // byte align row
#define     FAXMODE_WORDALIGN   0x0008          // word align row
#define     FAXMODE_CLASSF      FAXMODE_NORTC   // TIFF Class F
#define TIFFTAG_JPEGQUALITY             65537   // Compression quality level
//
// Note: quality level is on the IJG 0-100 scale.  Default value is 75
//
#define TIFFTAG_JPEGCOLORMODE           65538   // Auto RGB<=>YCbCr convert?
#define     JPEGCOLORMODE_RAW   0x0000          // no conversion (default)
#define     JPEGCOLORMODE_RGB   0x0001          // do auto conversion
#define TIFFTAG_JPEGTABLESMODE          65539   // What to put in JPEGTables
#define     JPEGTABLESMODE_QUANT 0x0001         // include quantization tbls
#define     JPEGTABLESMODE_HUFF 0x0002          // include Huffman tbls
//
// Note: default is JPEGTABLESMODE_QUANT | JPEGTABLESMODE_HUFF
//
#define TIFFTAG_FAXFILLFUNC             65540   // G3/G4 fill function
#define TIFFTAG_PIXARLOGDATAFMT         65549   // PixarLogCodec I/O data sz
#define     PIXARLOGDATAFMT_8BIT        0       // regular u_char samples
#define     PIXARLOGDATAFMT_8BITABGR    1       // ABGR-order u_chars
#define     PIXARLOGDATAFMT_10BITLOG    2       // 10-bit log-encoded (raw)
#define     PIXARLOGDATAFMT_12BITPICIO  3       // as per PICIO (1.0==2048)
#define     PIXARLOGDATAFMT_16BIT       4       // signed short samples
#define     PIXARLOGDATAFMT_FLOAT       5       // IEEE float samples

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\inc\viewerob.h ===
/*
   Microsoft Corp. (C) Copyright 1994
   Developed under contract by Numbers & Co.
----------------------------------------------------------------------------

        name:   Elliot Viewer - Chicago Viewer Utility
        						Cloned from the IFAX Message Viewing Utility

	 	file:	viewerob.h

    comments:	Class definitions for Viewer and ViewPage Objects.
    
	These objects are interface wrappers for the original IFAX viewer
	C code. All of the viewer's static variables and whatnot are collected
	here so that multiple independant viewers can be created to support 
	multiple open documents/pages. The innards of the viewer objects are 
	essentially the same as the original except for necessary fiddles to 
	allow functions to get at things that used to be static but are now
	private object data. The original innards just scream to be converted
	to C++ but time constraints didn't allow that...
 			
 	If a struct or occasional whatnot seems a bit clumsy it is probably
 	a relic leftover from the above original clone code. It works...
     	
		NOTE: This header must be used with the LARGE memory model
		
----------------------------------------------------------------------------
   Microsoft Corp. (C) Copyright 1994
   Developed under contract by Numbers & Co.
*/



#ifndef VIEWEROB_H
#define VIEWEROB_H


//#include <ole2.h>

/*
	Specials for WIN32 and WIN16 coexistance
 */
#ifdef WIN32
#define huge
#endif
   

/*
	Unicode spasms
 */
#ifndef WIN32
#ifndef TCHAR
typedef char TCHAR;
#endif
 
#ifndef _T
#define _T(x)	x
#endif

#ifndef LPTSTR
typedef TCHAR FAR *LPTSTR;
#endif

#ifndef LPTCH
typedef TCHAR FAR *LPTCH;
#endif
#endif   
   
   

/*
	Constants and defs
 */

#define OK		0
#define FAIL   -1

#define TRUE	1
#define FALSE	0

#define RESET   2
#define RESET2  3

                

#define MAX_INI_STR			256
#define MAX_STR_LEN			80
#define MAX_MEDIUMSTR_LEN	40
#define MAX_SHORTSTR_LEN	20
#define MAX_EXTSTR_LEN		3
#define MAX_COORD			32767
#define MIN_COORD  		   -32768


#define BORDER_SCROLL_SCALE	2
#define MAX_FILENAME_LEN 	13      

#ifdef WIN32
#define MAX_PATHNAME_LEN	MAX_PATH
#else
#define MAX_PATHNAME_LEN	256
#endif

#define MAX_BANDBUFFER		65536
#define MAX_VOPENBUF		65000
#define MAX_STREAM_BUF		32000
#define PAGESIZE_GUESS		(4*MAX_BANDBUFFER)


#define TEXT_FOREGROUND		RGB( 255,255,255 )
#define TEXT_BACKGROUND		RGB( 128,128,128 )



/*
	Zoom factors
 */
#define MAX_ZOOM					  100
#define INITIAL_ZOOM				  100
#define THUMBNAIL_ZOOM					5										  
#define DEFAULT_DPI					   80 // 800 pixels, 10 inch screen, used 
										  //  for demo bitmaps.


/*
	Rotation "angles"
 */
#define RA_0				0
#define RA_90               90
#define RA_180              180
#define RA_270              270
#define RA_360              360




// BKD 1997-7-9: commented out.  Already defined in buffers.h
// Standard Bit Valued MetaData values
//#define LRAW_DATA         0x00000008
//#define HRAW_DATA         0x00000010
#ifndef LRAW_DATA
#include "buffers.h"
#endif

          
          
/*
	BitBlt display defaults
 */
#define PRIMARY_BLTOP	  SRCCOPY
#define ALTERNATE_BLTOP	  NOTSRCCOPY


/*
	Timer ids
 */
#define DELAYED_OPEN_TIMER 1          
#define DRAG_TIMER		   2          
#define THUMB_FLAME_TIMER  3
          


/*
	Misc types
 */ 
typedef unsigned char 	uchar;
typedef unsigned int 	uint;
typedef unsigned short 	ushort;
typedef unsigned long 	ulong;

   
/*  
	My version of RECT
 */
typedef struct
	{
	int x_ul, y_ul;		// Upper left xy loc
	int x_lr, y_lr;		// Lower left xy loc
	int width, height;
	}
	winrect_type;
	

/*
	The "attachment" table. This is used to save the header info in a
	Chicago style viewer-message file, slightly processed.
 */	
typedef struct 
	{
	char	 *atchname;	// stream name for attachment (document)
	LONG	  numpages; // number of pages in atchname
	short     binfile;  // TRUE -> something we can't look at.
	short	  isademo;	// TRUE -> use demo version of viewrend (vrdemo)
	
	// document state (this section is 32bit aligned at this point)
	DATE  dtLastChange;
	DWORD awdFlags;
	WORD  Rotation;
	WORD  ScaleX;
	WORD  ScaleY;
	} 
	attachment_table_type;


/*
	Struct for keeping track of whats in the attachment table,
	whats viewable and what isn't, etc.
 */
typedef struct
	{              
	short				  is_displayable;   // TRUE -> viewable
	HBITMAP				  hbmp;				// "icon" for non viewable attachments
	uint    			  page_offset; 		// From first displayable attachment.
	attachment_table_type *at;				// ptr to attachment table.
	}
	attachment_type;
	


/*
	Struct for keeping track of viewrend bands
 */	
typedef struct
	{
	long height_bytes;
	long first_scanline;
	}
	band_height_type;	


/*	
	Struct defining a "viewdata" object. This should be a converted to be
	a real c++ object but time constaints dictated I use it as is.
 */
typedef struct
	{
	BITMAP		 bmp;			// Raw bitmap data (NOT a GDI bitmap)
								//	NOTE: This data is NEVER rotated
								//		  (always RA_0) but can be
								//		  scaled.
								
	HBITMAP 	 hbmp;			// Handle for in memory bitmap
	HDC			 mem_hdc;		// DC for blting it to a window
	RECT 		 isa_edge;		// Flags for bitmap/file edge correspondance
	winrect_type bmp_wrc;		// Loc and size of bitmap rel to file bitmap
	
	short		 dragging;		// Bitmap is being dragged if TRUE
	
	short		 copying;		// Bitmap is being select/copied to clipboard
	RECT 		 copy_rect;		// Area to copy
	short		 copy_rect_valid; // copy_rect has valid data
	short        first_copy_rect; // flag to init focus rect
	POINT		 copyanchor_pt;
	POINT		 viewanchor_pt;
	
	winrect_type viewwin_wrc;	// Loc and size of window to drag in	                 
	winrect_type view_wrc;		// Loc and size of view window rel to bitmap
	POINT		 last_file_wrc_offset; // used for adjusting view_wrc before
									   //  rotations 
	POINT		 last_cursor;	// Last cursor loc during a drag
	int			 bdrscrl_scale;	// Scale factor for border scroll increments
	
	RECT		 left_erase;	// Rects for erasing the bitmap's
	RECT		 top_erase;		//   previous position during a drag.
	RECT		 right_erase;	
	RECT		 bottom_erase;	
	
	short		 left_iserased; // Draw corespnding erase rect if TRUE
	short		 top_iserased;	//	 during a drag.
	short		 right_iserased;
	short		 bottom_iserased;
	

	/*
		If hfile != HFILE_ERROR then the band parameters are undefined. Otherwise
		they are defined only if hbmp does not contain the entire page bmp
	 */	                                                              
	HFILE 		 hfile;			// Handle for file bitmap   
	band_height_type *band_heights;  // Array of Rajeev band heights
	short		 num_bands;		// Number of bands
	short		 current_band;	// Currently selected band
	TCHAR		 filename[MAX_FILENAME_LEN+1];
	winrect_type file_wrc;		// Loc (always=0) and size of file bitmap;
	winrect_type prescale_file_wrc;	// file_wrc / x,y_prescale
	int		 	 x_dpi;			// x dots per inch
	int		 	 y_dpi;			// y dots per inch
    uint		 linebytes;  	// Total bytes per scanline
    uint		 num_planes;	// Number of planes
    uint		 bits_per_pix;  // Bits per pixel in a plane
    
    short		 has_data;		// Bitmap and/or bmBits contains data.
    short		 in_mem; 		// All data fits in memory.
	}
	viewdata_type;



typedef int
	(WINAPI *IFMESSPROC)( char *, int );
 
 

	
/*
	This struct is for reading/writing SummaryStreams. It was
	in oleutils.h but I moved it here so every module in the 
	Viewer doesn't have to pull in oleutils.h because of the 
	summary_info_t variable in CViewer.
 */
typedef struct
	{
	LPSTR revnum;
	DATE  last_printed;
	DATE  when_created;
	DATE  last_saved;
	DWORD num_pages;
	LPSTR appname;
	DWORD security;
	LPSTR author;
	}
	summary_info_t;






/*
	Macros
 */		
#define WIDTHSHORTS( width, bits_per_pix )									\
		((((long)width)*bits_per_pix + 15)/16)



#define V_WIDTHBYTES( width, bits_per_pix )									\
		(WIDTHSHORTS( width, bits_per_pix )*2)


#define BITMAPSTRIDE( widthbytes, height )									\
		(((long)widthbytes) * height)



#define BITMAPWIDTHBYTES( widthbytes, height, planes )						\
		(BITMAPSTRIDE( widthbytes, height )*planes)


#define BITMAPBYTES( width, bits_per_pix, height, planes )					\
		(BITMAPWIDTHBYTES( V_WIDTHBYTES( width, bits_per_pix ), 				\
						   height, 											\
						   planes ))



#define SWAP_SHORT_BYTES( short_to_swap )									\
		__asm                                                               \
		{                                                                   \
		__asm mov	ax, short_to_swap                                       \
		__asm xchg	ah, al                                                  \
		__asm mov	short_to_swap, ax                                       \
		}



#define SWAP_LONG_BYTES( long_to_swap )										\
		__asm																\
		{                                                                   \
		__asm mov	ax, word ptr long_to_swap[2]                            \
		__asm xchg	ah, al                                                  \
		__asm xchg	word ptr long_to_swap[0], ax                            \
		__asm xchg	ah, al                                                  \
		__asm mov	word ptr long_to_swap[2], ax                            \
		}





















/*
	Global data
 */
extern /*IFMSGBOXPROC*/IFMESSPROC IfMessageBox_lpfn;
extern TCHAR    viewer_homedir[MAX_PATHNAME_LEN+1];
extern short    ra360_bugfix;
extern DWORD	cshelp_map[];


/*
	Non object viewer functions
 */
extern short
	InitializeViewer( void );


/* WARNING * WARNING * WARNING * HACKHACKHACKHACKHACKHACKHACKHACK */
/*   hack so CViewerPage::print_viewdata can call AbortProc       */
typedef BOOL (CALLBACK *utils_prtabortproc_type)(HDC, int);
extern utils_prtabortproc_type utils_prtabortproc;
/******************************************************************/


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\migrate\resource.h ===
// resource.h
//
// Copyright (c) 1997  Microsoft Corporation
//
// Resource IDs for the fax migration DLL.
//
// Author:
// 	Brian Dewey (t-briand)	1997-8-19

#define MSG_VI_COMPANY_NAME     203
#define MSG_VI_SUPPORT_NUMBER   204
#define MSG_VI_SUPPORT_URL      205
#define MSG_VI_INSTRUCTIONS     206
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\migrate\migrate.c ===
/*++
  migrate.c

  Copyright (c) 1997  Microsoft Corporation


  This module performs Windows 95 to Windows XP fax migration.
  Specifically, this file contains the Windows XP side of migration...

  Author:

  Brian Dewey (t-briand) 1997-7-14
  Mooly Beery (moolyb)   2000-12-20

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <setupapi.h>
#include <shellapi.h>
#include <shlwapi.h>
#include <wchar.h>
#include <tchar.h>
#include "migrate.h"              // Contains prototypes & version information.
#include "resource.h"             // Resources.
#include <faxutil.h>
#include <faxreg.h>

// ------------------------------------------------------------
// Global data

// Wide names of the working & source directories.
static WCHAR lpWorkingDir[MAX_PATH];
HINSTANCE hinstMigDll;

static LPCTSTR REG_KEY_AWF = TEXT("SOFTWARE\\Microsoft\\At Work Fax");
// ------------------------------------------------------------
// Prototypes
static DWORD MigrateDevicesNT(IN HINF UnattendFile);
static DWORD CopyCoverPageFilesNT();

#define prv_DEBUG_FILE_NAME         _T("%windir%\\FaxSetup.log")

extern "C"
BOOL WINAPI
DllMain(HINSTANCE hinstDll, DWORD dwReason, LPVOID lpReserved)
{
    SET_DEBUG_PROPERTIES(DEBUG_ALL_MSG,DBG_PRNT_ALL_TO_FILE,DEBUG_CONTEXT_ALL);
    OPEN_DEBUG_FILE(prv_DEBUG_FILE_NAME);
    {
        DEBUG_FUNCTION_NAME(_T("DllMain"));
        if (dwReason == DLL_PROCESS_ATTACH) 
        {
            DebugPrintEx(DEBUG_MSG,"Migration DLL attached.");
            if (!DisableThreadLibraryCalls(hinstDll))
            {
                DebugPrintEx(DEBUG_ERR,"DisableThreadLibraryCalls failed (ec=%d)",GetLastError());
            }
            hinstMigDll = hinstDll;
        }
        return TRUE;
    }
}

// InitializeNT
//
// This routine performs NT-side initialization.
//
// Parameters:
//      Documented below.
//
// Returns:
//      ERROR_SUCCESS.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-14
LONG
CALLBACK
InitializeNT
(
    IN  LPCWSTR WorkingDirectory, // Working directory for temporary files.
    IN  LPCWSTR SourceDirectory,  // Directory of winNT source.
    LPVOID Reserved               // It's reserved.
)
{
    int iErr = 0;

    DEBUG_FUNCTION_NAME(_T("InitializeNT"));

    DebugPrintEx(DEBUG_MSG,"Working directory is %s",WorkingDirectory);
    DebugPrintEx(DEBUG_MSG,"Source directory is %s",SourceDirectory);

    wcscpy(lpWorkingDir, WorkingDirectory);
    return ERROR_SUCCESS;         // A very confused return value.
}


// MigrateUserNT
//
// Sets up user information.
//
// Parameters:
//      Documented below.
//
// Returns:
//      ERROR_SUCCESS.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-14
LONG
CALLBACK
MigrateUserNT
(
    IN  HINF UnattendInfHandle,   // Access to the unattend.txt file.
    IN  HKEY UserRegHandle,       // Handle to registry settings for user.
    IN  LPCWSTR UserName,         // Name of the user.
    LPVOID Reserved
)
{
        // our task:  copy entries from szInfFileName to the registry.
    LPTSTR lpNTOptions = TEXT("Software\\Microsoft\\Fax\\UserInfo");
    HKEY   hReg;                  // Registry key for user.
    LPCTSTR alpKeys[] = 
    {                               // This array defines what keys will be
        TEXT("Address"),            // copied from faxuser.ini into the registry.
        TEXT("Company"),
        TEXT("Department"),
        TEXT("FaxNumber"),
        TEXT("FullName"),
        TEXT("HomePhone"),
        TEXT("Mailbox"),
        TEXT("Office"),
        TEXT("OfficePhone"),
        TEXT("Title")
    };
    INT iErr = 0;
    UINT iCount, iMax;            // used for looping through all the sections.
    UINT i;                       // Used for converting doubled ';' to CR/LF pairs.
    TCHAR szValue[MAX_PATH];
    TCHAR szInfFileNameRes[MAX_PATH];
    TCHAR szWorkingDirectory[MAX_PATH];
    TCHAR szUser[MAX_PATH];       // TCHAR representation of the user name.
    LONG  lError;                 // Holds a returned error code.

    DEBUG_FUNCTION_NAME(_T("MigrateUserNT"));

    if(UserName == NULL) 
    {
            // NULL means the logon user.
        _tcscpy(szUser, lpLogonUser);// Get the logon user name for faxuser.ini
    } 
    else 
    {
    // We need to convert the wide UserName to the narrow szUser.
    WideCharToMultiByte(
        CP_ACP,         // Convert to ANSI.
        0,              // No flags.
        UserName,       // The wide char set.
        -1,             // Null-terminated string.
        szUser,         // Holds the converted string.
        sizeof(szUser), // Size of this buffer...
        NULL,           // Use default unmappable character.
        NULL            // I don't need to know if I used the default.
        );
    }

    DebugPrintEx(DEBUG_MSG,"Migrating user '%s'.",szUser);

    if (RegCreateKeyEx( UserRegHandle,
                        lpNTOptions,
                        0,
                        NULL,
                        REG_OPTION_NON_VOLATILE,
                        KEY_ALL_ACCESS,
                        NULL,
                        &hReg,
                        NULL)!=ERROR_SUCCESS)
    {
       // All I'm allowed to do is return obscure error codes...
        // However, unless there's a hardware failure, I'm supposed to say
        // everything's OK.
        DebugPrintEx(DEBUG_ERR,"RegCreateKeyEx %s failed (ec=%d)",lpNTOptions,GetLastError());
        return ERROR_SUCCESS;
    }

    iMax = sizeof(alpKeys) / sizeof(LPCTSTR);

    iErr = WideCharToMultiByte( CP_ACP,                     // Convert to ANSI.
                                0,                          // No flags.
                                lpWorkingDir,               // The wide char set.
                                -1,                         // Null-terminated string.
                                szWorkingDirectory,         // Holds the converted string.
                                sizeof(szWorkingDirectory), //  Size of this buffer...
                                NULL,                       // Use default unmappable character.
                                NULL);                      // I don't need to know if I used the default.
    if (iErr==0)
    {
        DebugPrintEx(DEBUG_ERR,"WideCharToMultiByte failed (ec=%d)",iErr);
    }
    _stprintf(szInfFileNameRes, TEXT("%s\\migrate.inf"), szWorkingDirectory);
    
    ExpandEnvironmentStrings(szInfFileNameRes, szInfFileName, ARR_SIZE(szInfFileName));

    DebugPrintEx(DEBUG_MSG,"Reading from file %s.",szInfFileName);
    for (iCount = 0; iCount < iMax; iCount++) 
    {
        GetPrivateProfileString(szUser,
                                alpKeys[iCount],
                                TEXT(""),
                                szValue,
                                sizeof(szValue),
                                szInfFileName);
        // If there was a CR/LF pair, the w95 side of things converted it
        // to a doubled semicolon.  So I'm going to look for doubled semicolons
        // and convert them to CR/LF pairs.
        i = 0;
        while (szValue[i] != _T('\0')) 
        {
            if ((szValue[i] == _T(';')) && (szValue[i+1] == _T(';'))) 
            {
                // Found a doubled semicolon.
                szValue[i] = '\r';
                szValue[i+1] = '\n';
                DebugPrintEx(DEBUG_MSG,"Doing newline translation.");
            }
            i++;
        }
        lError = RegSetValueEx(hReg,
                               alpKeys[iCount],
                               0,
                               REG_SZ,
                               LPBYTE(szValue),
                               _tcslen(szValue)+1);
        if (lError!=ERROR_SUCCESS) 
        {
            DebugPrintEx(DEBUG_ERR,"RegSetValueEx %s failed (ec=%d)",alpKeys[iCount],GetLastError());
            return lError;
        }
        DebugPrintEx(DEBUG_MSG,"%s = %s", alpKeys[iCount], szValue);
    }
    RegCloseKey(hReg);

    return ERROR_SUCCESS;         // A very confused return value.
}


// MigrateSystemNT
//
// Updates the system registry to associate 'awdvstub.exe' with the
// AWD extension.
//
// Parameters:
//      Documented below.
//
// Returns:
//      ERROR_SUCCESS.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-14
LONG
CALLBACK
MigrateSystemNT
(
    IN  HINF UnattendInfHandle,   // Access to the unattend.txt file.
    LPVOID Reserved
)
{
    DWORD dwErr = ERROR_SUCCESS;
    WCHAR szExeFileName[MAX_PATH];
    WCHAR szWindowsDir[MAX_PATH];
    WCHAR szDestFile[MAX_PATH];

    DEBUG_FUNCTION_NAME(_T("MigrateSystemNT"));

    // first, copy 'awdvstub.exe' to %SystemRoot%\system32.
    if (!GetWindowsDirectoryW(szWindowsDir, MAX_PATH))
    {
        DebugPrintEx(DEBUG_ERR, "GetWindowsDirectoryW failed (ec=%d)", GetLastError());
        return GetLastError ();
    }
    swprintf(szExeFileName, L"%s\\%s", lpWorkingDir, L"awdvstub.exe");
    swprintf(szDestFile, L"%s\\system32\\%s", szWindowsDir, L"awdvstub.exe");
    if (!CopyFileW( szExeFileName,
                    szDestFile,
                    FALSE)) 
    {
        DebugPrintEx(DEBUG_ERR,"CopyFileW failed (ec=%d)",GetLastError());
    } 
    else 
    {
        DebugPrintEx(DEBUG_MSG,"CopyFileW success");
    }

    if (MigrateDevicesNT(UnattendInfHandle)!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"MigrateDevicesNT failed (ec=%d)",GetLastError());
    }

    if (CopyCoverPageFilesNT()!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"CopyCoverPageFilesNT failed (ec=%d)",GetLastError());
    }

    return ERROR_SUCCESS;         // A very confused return value.
}


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  MigrateDevicesNT
//
//  Purpose:        Get the active device's settings from the INF
//                  Set the device info into the FAX key under HKLM
//                  verify there's only one device, otherwise do not migrate settings
//
//  Params:
//                  IN HINF UnattendFile - handle to the answer file
//
//  Return Value:
//                  Win32 Error code
//
//  Author:
//                  Mooly Beery (MoolyB) 13-dec-2000
///////////////////////////////////////////////////////////////////////////////////////
typedef WINFAXAPI BOOL (WINAPI *FUNC_FAXCONNECTFAXSERVERW)      (LPCWSTR MachineName,LPHANDLE FaxHandle);
typedef WINFAXAPI BOOL (WINAPI *FUNC_FAXENUMPORTSEXW)           (HANDLE hFaxHandle,PFAX_PORT_INFO_EXW* ppPorts,PDWORD lpdwNumPorts);
typedef WINFAXAPI BOOL (WINAPI *FUNC_FAXSETPORTEXW)             (HANDLE hFaxHandle,DWORD dwDeviceId,PFAX_PORT_INFO_EXW pPortInfo);
typedef WINFAXAPI BOOL (WINAPI *FUNC_FAXCLOSE)                  (HANDLE FaxHandle);
typedef WINFAXAPI VOID (WINAPI *FUNC_FAXFREEBUFFER)             (LPVOID Buffer);
typedef WINFAXAPI BOOL (WINAPI *FUNC_FAXGETOUTBOXCONFIGURATION) (HANDLE hFaxHandle,PFAX_OUTBOX_CONFIG *ppOutboxCfg);
typedef WINFAXAPI BOOL (WINAPI *FUNC_FAXSETOUTBOXCONFIGURATION) (HANDLE hFaxHandle,CONST PFAX_OUTBOX_CONFIG pOutboxCfg);



static DWORD MigrateDevicesNT(IN HINF UnattendFile)
{
    DWORD                           dwErr                           = ERROR_SUCCESS;
    HMODULE                         hModule                         = 0;
    HANDLE                          hFaxHandle                      = NULL;
    CHAR                            szLocalID[MAX_PATH]             = {0};
    WCHAR                           wszLocalID[MAX_PATH]            = {0};
    CHAR                            szAnswerMode[32]                = {0};
    CHAR                            szRetries[32]                   = {0};
    CHAR                            szRetriesDelay[32]              = {0};
    CHAR                            szNumRings[32]                  = {0};
    FUNC_FAXCONNECTFAXSERVERW       pfFaxConnectFaxServerW          = NULL;
    FUNC_FAXENUMPORTSEXW            pfFaxEnumPortsExW               = NULL;
    FUNC_FAXSETPORTEXW              pfFaxSetPortExW                 = NULL;
    FUNC_FAXCLOSE                   pfFaxClose                      = NULL;
    FUNC_FAXFREEBUFFER              pfFaxFreeBuffer                 = NULL;
    FUNC_FAXGETOUTBOXCONFIGURATION  pfFaxGetOutboxConfiguration     = NULL;
    FUNC_FAXSETOUTBOXCONFIGURATION  pfFaxSetOutboxConfiguration     = NULL;
    PFAX_PORT_INFO_EXW              pFaxPortInfoExW                 = NULL;
    PFAX_OUTBOX_CONFIG              pFaxOutboxConfig                = NULL;
    DWORD                           dwNumPorts                      = 0;
    INT                             iNumRings                       = 0;
    INT                             iAnswerMode                     = 0;

    DEBUG_FUNCTION_NAME(_T("MigrateDevicesNT"));

    // load the FXSAPI.DLL
    hModule = LoadLibrary(FAX_API_MODULE_NAME);
    if (hModule==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"LoadLibrary failed (ec=%d)",GetLastError());
        goto exit;
    }
    // get the following functions:
    // 1. FaxConnectFaxServer
    // 2. FaxEnumPortsEx
    // 3. FaxSetPortEx
    // 4. FaxClose
    // 5. FaxFreeBuffer
    // 6. FaxGetOutboxConfiguration
    // 7. FaxSetOutboxConfiguration
    pfFaxConnectFaxServerW = (FUNC_FAXCONNECTFAXSERVERW)GetProcAddress(hModule,"FaxConnectFaxServerW");
    if (pfFaxConnectFaxServerW==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxConnectFaxServerW failed (ec=%d)",GetLastError());
        goto exit;
    }
    pfFaxEnumPortsExW = (FUNC_FAXENUMPORTSEXW)GetProcAddress(hModule,"FaxEnumPortsExW");
    if (pfFaxEnumPortsExW==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxEnumPortsExW failed (ec=%d)",GetLastError());
        goto exit;
    }
    pfFaxSetPortExW = (FUNC_FAXSETPORTEXW)GetProcAddress(hModule,"FaxSetPortExW");
    if (pfFaxSetPortExW==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxSetPortExW failed (ec=%d)",GetLastError());
        goto exit;
    }
    pfFaxClose = (FUNC_FAXCLOSE)GetProcAddress(hModule,"FaxClose");
    if (pfFaxClose==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxClose failed (ec=%d)",GetLastError());
        goto exit;
    }
    pfFaxFreeBuffer = (FUNC_FAXFREEBUFFER)GetProcAddress(hModule,"FaxFreeBuffer");
    if (pfFaxFreeBuffer==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxFreeBuffer failed (ec=%d)",GetLastError());
        goto exit;
    }
    pfFaxGetOutboxConfiguration = (FUNC_FAXGETOUTBOXCONFIGURATION)GetProcAddress(hModule,"FaxGetOutboxConfiguration");
    if (pfFaxGetOutboxConfiguration==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxGetOutboxConfiguration failed (ec=%d)",GetLastError());
        goto exit;
    }
    pfFaxSetOutboxConfiguration = (FUNC_FAXSETOUTBOXCONFIGURATION)GetProcAddress(hModule,"FaxSetOutboxConfiguration");
    if (pfFaxSetOutboxConfiguration==NULL)
    {
        DebugPrintEx(DEBUG_ERR,"GetProcAddress FaxSetOutboxConfiguration failed (ec=%d)",GetLastError());
        goto exit;
    }

    // try to connect to the fax server
    if (!(*pfFaxConnectFaxServerW)(NULL,&hFaxHandle))
    {
        DebugPrintEx(DEBUG_ERR,"pfFaxConnectFaxServerW failed (ec=%d)",GetLastError());
        goto exit;
    }

    // call EnumPortsEx
    if (!(*pfFaxEnumPortsExW)(hFaxHandle,&pFaxPortInfoExW,&dwNumPorts))
    {
        DebugPrintEx(DEBUG_ERR,"pfFaxConnectFaxServerW failed (ec=%d)",GetLastError());
        goto exit;
    }

    if (dwNumPorts==0)
    {
        DebugPrintEx(DEBUG_MSG,"No devices are installed, no migration");
        goto next;
    } 
    else if (dwNumPorts>1)
    {
        DebugPrintEx(DEBUG_MSG,"%d devices are installed, no migration",dwNumPorts);
        goto next;
    }

    // we have one device, get its FAX_PORT_INFOW, modify it and call FaxSetPortW
    // TSID
    if (SetupGetLineText(   NULL,
                            UnattendFile,
                            "FAX",
                            INF_RULE_LOCAL_ID,
                            szLocalID,
                            sizeof(szLocalID),
                            NULL))
    {
        if (MultiByteToWideChar(CP_ACP,
                                MB_PRECOMPOSED,
                                szLocalID,
                                -1,
                                wszLocalID,
                                sizeof(wszLocalID)/sizeof(WCHAR)
                                ))
        {
            pFaxPortInfoExW[0].lptstrTsid = wszLocalID;
            pFaxPortInfoExW[0].lptstrCsid = wszLocalID;
            DebugPrintEx(DEBUG_MSG,"new TSID & CSID is %s",szLocalID);
        }
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"SetupGetLineText TSID failed (ec=%d)",GetLastError());
    }
    // Rings
    if (SetupGetLineText(   NULL,
                            UnattendFile,
                            "FAX",
                            INF_RULE_NUM_RINGS,
                            szNumRings,
                            sizeof(szNumRings),
                            NULL))
    {
        iNumRings = atoi(szNumRings);
        if (iNumRings)
        {
            pFaxPortInfoExW[0].dwRings = iNumRings;
            DebugPrintEx(DEBUG_MSG,"new Rings is %d",iNumRings);
        }
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"GetPrivateProfileString NumRings failed (ec=%d)",GetLastError());
    }

    // Answer mode
    pFaxPortInfoExW[0].bSend = TRUE;
    if (SetupGetLineText(   NULL,
                            UnattendFile,
                            "FAX",
                            INF_RULE_ANSWER_MODE,
                            szAnswerMode,
                            sizeof(szAnswerMode),
                            NULL))
    {
        iAnswerMode = atoi(szAnswerMode);
        switch (iAnswerMode)
        {
        case 0:     break;
        case 1:     pFaxPortInfoExW[0].ReceiveMode = FAX_DEVICE_RECEIVE_MODE_MANUAL;
                    DebugPrintEx(DEBUG_MSG,"setting flags to manual Receive");
                    break;
        case 2:     pFaxPortInfoExW[0].ReceiveMode = FAX_DEVICE_RECEIVE_MODE_AUTO;
                    DebugPrintEx(DEBUG_MSG,"setting flags to auto Receive");
                    break;
        default:    pFaxPortInfoExW[0].ReceiveMode = FAX_DEVICE_RECEIVE_MODE_OFF;
                    DebugPrintEx(DEBUG_MSG,"strange AnswerMode, just send enabled");
                    break;
        }
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"GetPrivateProfileString AnswerMode failed (ec=%d)",GetLastError());
    }

    // call FaxSetPort
    if (!(*pfFaxSetPortExW)(hFaxHandle,pFaxPortInfoExW[0].dwDeviceID,&(pFaxPortInfoExW[0])))
    {
        DebugPrintEx(DEBUG_ERR,"pfFaxSetPortExW failed (ec=%d)",GetLastError());
        goto exit;
    }

next:
    // get the Outbox configuration
    if (!(*pfFaxGetOutboxConfiguration)(hFaxHandle,&pFaxOutboxConfig))
    {
        DebugPrintEx(DEBUG_ERR,"pfFaxGetOutboxConfiguration failed (ec=%d)",GetLastError());
        goto exit;
    }

    // get the retries and retry delay from INF
    if (SetupGetLineText(   NULL,
                            UnattendFile,
                            "FAX",
                            "NumberOfRetries",
                            szRetries,
                            sizeof(szRetries),
                            NULL))
    {
        pFaxOutboxConfig->dwRetries = atoi(szRetries);
    }

    if (SetupGetLineText(   NULL,
                            UnattendFile,
                            "FAX",
                            "TimeBetweenRetries",
                            szRetriesDelay,
                            sizeof(szRetriesDelay),
                            NULL))
    {
        pFaxOutboxConfig->dwRetryDelay = atoi(szRetriesDelay);
    }

    // now set the outbox configuration 
    if (!(*pfFaxSetOutboxConfiguration)(hFaxHandle,pFaxOutboxConfig))
    {
        DebugPrintEx(DEBUG_ERR,"pfFaxSetOutboxConfiguration failed (ec=%d)",GetLastError());
        goto exit;
    }

exit:
    if (hFaxHandle)
    {
        if (pfFaxClose)
        {
            (*pfFaxClose)(hFaxHandle);
        }
        if (pFaxPortInfoExW)
        {
            if(pfFaxFreeBuffer)
            {
                (*pfFaxFreeBuffer)(pFaxPortInfoExW);
            }
        }
        if (pFaxOutboxConfig)
        {
            if(pfFaxFreeBuffer)
            {
                (*pfFaxFreeBuffer)(pFaxOutboxConfig);
            }
        }
    }
    if (hModule)
    {
        FreeLibrary(hModule);
    }

    return dwErr;
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  CopyCoverPageFilesNT
//
//  Purpose:        Copy all of the *.CPE files from the temporary 
//                  directory to the server cover pages dir
//
//  Params:
//                  None
//
//  Return Value:
//                  Win32 Error code
//
//  Author:
//                  Mooly Beery (MoolyB) 13-dec-2000
///////////////////////////////////////////////////////////////////////////////////////
DWORD CopyCoverPageFilesNT()
{
    DWORD           dwErr                           = ERROR_SUCCESS;
    INT             iErr                            = 0;
    CHAR            szServerCpDir[MAX_PATH]         = {0};
    CHAR            szWorkingDirectory[MAX_PATH]    = {0};
    SHFILEOPSTRUCT  fileOpStruct;

    DEBUG_FUNCTION_NAME(_T("CopyCoverPageFiles9X"));

    ZeroMemory(&fileOpStruct, sizeof(SHFILEOPSTRUCT));

    // Get the server cover pages directory
    if (!GetServerCpDir(NULL,szServerCpDir,sizeof(szServerCpDir)))
    {
        dwErr = GetLastError();
        DebugPrintEx(DEBUG_ERR,"GetServerCpDir failed (ec=%d)",dwErr);
        goto exit;
    }

    iErr = WideCharToMultiByte( CP_ACP,                     // Convert to ANSI.
                            0,                          // No flags.
                            lpWorkingDir,               // The wide char set.
                            -1,                         // Null-terminated string.
                            szWorkingDirectory,         // Holds the converted string.
                            sizeof(szWorkingDirectory), // Size of this buffer...
                            NULL,                       // Use default unmappable character.
                            NULL);                      // I don't need to know if I used the default.
    if (iErr==0)
    {
        DebugPrintEx(DEBUG_ERR,"WideCharToMultiByte failed (ec=%d)",iErr);
        goto exit;
    }

    strcat(szWorkingDirectory,"\\*.cpe");

    fileOpStruct.hwnd =                     NULL; 
    fileOpStruct.wFunc =                    FO_MOVE;
    fileOpStruct.pFrom =                    szWorkingDirectory; 
    fileOpStruct.pTo =                      szServerCpDir;
    fileOpStruct.fFlags =                   

        FOF_FILESONLY       |   // Perform the operation on files only if a wildcard file name (*.*) is specified. 
        FOF_NOCONFIRMMKDIR  |   // Do not confirm the creation of a new directory if the operation requires one to be created. 
        FOF_NOCONFIRMATION  |   // Respond with "Yes to All" for any dialog box that is displayed. 
        FOF_NORECURSION     |   // Only operate in the local directory. Don't operate recursively into subdirectories.
        FOF_SILENT          |   // Do not display a progress dialog box. 
        FOF_NOERRORUI;          // Do not display a user interface if an error occurs. 

    fileOpStruct.fAnyOperationsAborted =    FALSE;
    fileOpStruct.hNameMappings =            NULL;
    fileOpStruct.lpszProgressTitle =        NULL; 

    DebugPrintEx(DEBUG_MSG, 
             TEXT("Calling to SHFileOperation from %s to %s."),
             fileOpStruct.pFrom,
             fileOpStruct.pTo);
    if (SHFileOperation(&fileOpStruct))
    {
        dwErr = GetLastError();
        DebugPrintEx(DEBUG_ERR,"SHFileOperation failed (ec: %ld)",dwErr);
        goto exit;
    }


exit:
    return dwErr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\win9xupg\migrate\w95mig.c ===
/*++
  w95mig.c

  Copyright (c) 1997  Microsoft Corporation


  This module contains the win95 side of the migration code.

  Author:

  Brian Dewey (t-briand) 1997-7-18
  Mooly Beery (moolyb)   2000-12-20

--*/

#include <windows.h>
#include <setupapi.h>
#include <shellapi.h>
#include <mapidefs.h>
#include <mapitags.h>           // To get the property definitions.
#include <stdio.h>
#include <tchar.h>
#include "migrate.h"            // Contains prototypes & version information.
#include "property.h"           // Stolen from Elliott -- contains their fax properties
#include "resource.h"           // Migration resources.
#include "faxutil.h"
#include "FaxSetup.h"
#include "FaxReg.h"


// ------------------------------------------------------------
// Defines & macros
#define     SWAPWORD(x)                 (((x) << 16) | ((x) >> 16))


//
//  Fax Applications will be blocked by the Upgrade and required to be removed.
//  Save them in the Registry before that.
//
#define     REGKEYUPG_INSTALLEDFAX      _T("Software\\Microsoft\\FaxUpgrade")


// ------------------------------------------------------------
// Internal data

// First, this is the name of the INF file that we generate.
static TCHAR szInfFileBase[]    = TEXT("migrate.inf");
TCHAR szInfFileName[MAX_PATH];  // This will be the fully qualified path of the above.

static char  lpWorkingDir[MAX_PATH];     // This is our working directory.
static TCHAR szDoInstall[4];             // Will be either "No" or "Yes".
static TCHAR szFaxAreaCode[16];          // Contains the fax modem area code.
static TCHAR szFaxNumber[9];             // Fax # w/o area or country code.
static TCHAR szNTProfileName[MAX_PATH];  // Profile to use for routing.
static TCHAR szFaxStoreDir[MAX_PATH];    // Folder to use for routing.
static TCHAR szUserName[MAX_PATH];       // This will be the user's name who owns the fax service.
static TCHAR szUserID[MAX_PATH];         // This is the login name of the user who owns the fax.

static LPCTSTR REG_KEY_AWF_LOCAL_MODEMS     = TEXT("SOFTWARE\\Microsoft\\At Work Fax\\Local Modems");
static LPCTSTR REG_KEY_AWF_INSTALLED        = TEXT("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\MSAWFax");

// The following are section names from the Microsoft registry.
// They're used to find the fax profile for a user.
static const LPTSTR LPUSERPROF  = TEXT("Software\\Microsoft\\Windows Messaging Subsystem\\Profiles");
static const LPTSTR LPPROFNAME  = TEXT("DefaultProfile");

// The following's part of the path to the Exchange profile in question.
static const LPTSTR LPPROFILES  = TEXT("Software\\Microsoft\\Windows Messaging Subsystem\\Profiles");

// This is how we get the root UID.
static const LPTSTR LPPROFUID   = TEXT("Profile UID");

// This is the name we use for the logon user section of 'faxuser.ini'
LPCTSTR lpLogonUser             = TEXT("Logon User");

// This keeps track of the number of users migrated.  Used to make annotations
// in the INF file.
static DWORD dwUserCount = 0;

// ------------------------------------------------------------
// Internal function prototypes
static BOOL GetUserProfileName(HKEY hUser, LPTSTR lpProfName, DWORD cbSize);
static BOOL GetRegProfileKey(HKEY hUser, LPTSTR lpProfName, PHKEY phRegProfileKey);
static void DumpUserInfo(HKEY hUserInfo, LPCSTR UserName, LPTSTR szProfileName,IN LPCSTR UnattendFile);
static void SetGlobalFaxNumberInfo(LPCTSTR szPhone);
static BOOL InitializeInfFile(LPCTSTR WorkingDirectory);
static BOOL IsAWFInstalled();
static DWORD MigrateDevices9X(IN LPCSTR UnattendFile);
static DWORD CopyCoverPageFiles9X();
static DWORD RememberInstalledFax(IN DWORD dwFaxInstalled);
static DWORD MigrateUninstalledFax(IN LPCTSTR lpctstrUnattendFile, OUT bool *pbFaxWasInstalled);

VENDORINFO VendorInfo;

// QueryVersion
//
// This routine returns version information about the migration DLL.
//
// Parameters:
//      Commented below.
//
// Returns:
//      ERROR_SUCCESS.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-23
LONG
CALLBACK 
QueryVersion 
(
    OUT LPCSTR  *ProductID,   // Unique identifier string.
    OUT LPUINT DllVersion,    // Version number.  Cannot be zero.
    OUT LPINT *CodePageArray, // OPTIONAL.  Language dependencies.
    OUT LPCSTR  *ExeNamesBuf, // OPTIONAL.  Executables to look for.
    OUT PVENDORINFO *ppVendorInfo
)
{
    int     iRes    = 0;
    DWORD   dwErr   = ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(_T("QueryVersion"));

    if (ProductID)
    {
        *ProductID = "Microsoft Fax";
    }
    if (DllVersion)
    {
        *DllVersion = FAX_MIGRATION_VERSION;
    }
    if (CodePageArray)
    {
        *CodePageArray = NULL;        // No language dependencies
    }
    if (ExeNamesBuf)
    {
        *ExeNamesBuf = NULL;
    }
    if (ppVendorInfo)
    {
        *ppVendorInfo = &VendorInfo;
    }

    iRes = LoadString(  hinstMigDll,
                        MSG_VI_COMPANY_NAME,
                        &VendorInfo.CompanyName[0],
                        sizeof(VendorInfo.CompanyName));
    if ((iRes==0) && (dwErr=GetLastError()))
    {
        DebugPrintEx(DEBUG_ERR,"LoadString MSG_VI_COMPANY_NAME failed (ec=%d)",dwErr);
    }
    
    iRes = LoadString(  hinstMigDll,
                        MSG_VI_SUPPORT_NUMBER,
                        &VendorInfo.SupportNumber[0],
                        sizeof(VendorInfo.SupportNumber));
    if ((iRes==0) && (dwErr=GetLastError()))
    {
        DebugPrintEx(DEBUG_ERR,"LoadString MSG_VI_SUPPORT_NUMBER failed (ec=%d)",dwErr);
    }
    
    iRes = LoadString(  hinstMigDll,
                        MSG_VI_SUPPORT_URL,
                        &VendorInfo.SupportUrl[0],
                        sizeof(VendorInfo.SupportUrl));
    if ((iRes==0) && (dwErr=GetLastError()))
    {
        DebugPrintEx(DEBUG_ERR,"LoadString MSG_VI_SUPPORT_URL failed (ec=%d)",dwErr);
    }
    
    iRes = LoadString(  hinstMigDll,
                        MSG_VI_INSTRUCTIONS,
                        &VendorInfo.InstructionsToUser[0],
                        sizeof(VendorInfo.InstructionsToUser));
    if ((iRes==0) && (dwErr=GetLastError()))
    {
        DebugPrintEx(DEBUG_ERR,"LoadString MSG_VI_INSTRUCTIONS failed (ec=%d)",dwErr);
    }
    
    return ERROR_SUCCESS;
}

// Initialize9x
//
// This is called to initialize the migration process.  See the migration dll
// spec for more details.
//
// Parameters:
//      Commented below.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-14
LONG
CALLBACK
Initialize9x
(
    IN  LPCSTR WorkingDirectory,    // Place to store files.
    IN  LPCSTR SourceDirectories,   // Location of the Windows NT source.
    IN  LPCSTR MediaDirectory       // Path to the original media directory
)
{
    DEBUG_FUNCTION_NAME(_T("Initialize9x"));

    DebugPrintEx(DEBUG_MSG, "Working directory is %s", WorkingDirectory);
    DebugPrintEx(DEBUG_MSG, "Source directories is %s", SourceDirectories); //  will show only first ?
    DebugPrintEx(DEBUG_MSG, "Media directory is %s", MediaDirectory);

    InitializeInfFile(WorkingDirectory);
    strncpy(lpWorkingDir, WorkingDirectory, MAX_PATH);
    return ERROR_SUCCESS;         // A very confused return value.
}


// MigrateUser9x
//
// This routine records the fax information specific to a user.
//
// Parameters:
//      Documented below.
//
// Returns:
//      ERROR_SUCCESS.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-14
LONG
CALLBACK
MigrateUser9x
(
    IN  HWND ParentWnd,           // Parent (if need a UI)
    IN  LPCSTR UnattendFile,      // Name of unattend file
    IN  HKEY UserRegKey,          // Key to this user's registry settings.
    IN  LPCSTR UserName,          // Account name of user.
    LPVOID Reserved
)
{
    TCHAR szProfileName[MAX_PATH]; // Holds the name of this user's profile.
    HKEY  hRegProfileKey;       // The fax profile key in the registry.
    DWORD dwExceptCode;         // Exception error code
    
    DEBUG_FUNCTION_NAME(_T("MigrateUser9x"));

    DebugPrintEx(DEBUG_MSG,"Unattend File is %s",UnattendFile);
    DebugPrintEx(DEBUG_MSG,"User Name is %s",UserName);

    __try 
    {
        // @@@ This function gets the name of the default MAPI profile for a user.
        if (GetUserProfileName(UserRegKey, szProfileName, sizeof(szProfileName))) 
        {
            DebugPrintEx(DEBUG_MSG,"Profile name = %s",szProfileName);
            // @@@ Given a key to a user, and the name of that user's MAPI profile
            // @@@ it will get a key to FAX service section of the MAPI profile in the registry
            if (GetRegProfileKey(UserRegKey, szProfileName, &hRegProfileKey)) 
            {
                // We now know we want to do an installation.
                DebugPrintEx(DEBUG_MSG,"Successfully got profile information.");
                _tcscpy(szNTProfileName, szProfileName); // Remember this name for NT.
                
                // NULL means the logon user...
                if (UserName != NULL)
                {
                    _tcscpy(szUserID, UserName); // Remember the ID for the unattend.txt file.
                }
                else
                {
                    _tcscpy(szUserID, lpLogonUser); // Use the logon user name.
                }
                
                // @@@ Writes user information out to the INF
                DumpUserInfo(hRegProfileKey, szUserID, szProfileName,UnattendFile);
                RegCloseKey(hRegProfileKey);
            } 
            else 
            {
                DebugPrintEx(DEBUG_WRN,"Could not get profile information.");
                return ERROR_NOT_INSTALLED;
            }
        } 
        else 
        {
            DebugPrintEx(DEBUG_WRN,"Could not find profile name.");
            return ERROR_NOT_INSTALLED;
        }
        return ERROR_SUCCESS;     // A very confused return value.
    }
    __except(EXCEPTION_EXECUTE_HANDLER) 
    {
        dwExceptCode = GetExceptionCode();
        switch(dwExceptCode) 
        {
          case EXCEPTION_ACCESS_VIOLATION:      DebugPrintEx(DEBUG_ERR,"Access violation.");
                                                break;
          case EXCEPTION_INT_DIVIDE_BY_ZERO:
          case EXCEPTION_FLT_DIVIDE_BY_ZERO:    DebugPrintEx(DEBUG_ERR,"Divide by zero.");
                                                break;
          default:                              DebugPrintEx(DEBUG_ERR,"Unhandled exception.");
                                                break;
        }
        return ERROR_SUCCESS;
    }
}


// MigrateSystem9x
//
// This routine copies system-wide settings.
// It also takes care of writing the [Fax] section of the unattend file.
//
// Parameters:
//      Documented below.
//
// Returns:
//      ERROR_SUCCESS.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-14
LONG
CALLBACK
MigrateSystem9x
(
    IN  HWND ParentWnd,           // Parent for UI.
    IN  LPCSTR UnattendFile,      // Name of unattend file
    LPVOID Reserved
)
{
    DWORD   dwReturn        = NO_ERROR;
	DWORD	dwFaxInstalled	= 0;

    DEBUG_FUNCTION_NAME(_T("MigrateSystem9x"));

    //
    //  Check if SBS 5.0 / .NET SB3 / .NET RC1 Fax Client are present
    //
    dwReturn = CheckInstalledFax((FXSTATE_SBS5_CLIENT | FXSTATE_BETA3_CLIENT | FXSTATE_DOTNET_CLIENT), &dwFaxInstalled);
    if (dwReturn != NO_ERROR)
    {
        DebugPrintEx(DEBUG_WRN, _T("CheckInstalledFaxClient() failed, ec=%ld. Suppose that nothing is installed."), dwReturn);
    }

    //
    //  if any of these applications are found on the machine, 
    //      the upgrade will be blocked through MigDB.inf
    //      and the user will be required to uninstall them.
    //
    //  but we want to remember the fact that they were present on the machine.
    //      we do it by writting to the registry.
    //      after the upgrade will be restarted, we put this data into the unattended file,
    //      and by this FaxOcm gets this data.
    //
    if (dwFaxInstalled != FXSTATE_NONE)
    {
        dwReturn = RememberInstalledFax(dwFaxInstalled);
        if (dwReturn != NO_ERROR)
        {
            DebugPrintEx(DEBUG_WRN, _T("RememberInstalledFax() failed, ec=%ld."), dwReturn);
        }
        else
        {
            DebugPrintEx(DEBUG_MSG, _T("RememberInstalledFax() succeded."));
        }

        //
        //  we can go out ==> Upgrade will be blocked anyway.
        //
        return ERROR_SUCCESS;
    }

    //
    //  Any of the applications is not installed. 
    //  Check if they were here before. If yes, then write this fact to the unattended file.
    //
    bool    bFaxWasInstalled = false;
    dwReturn = MigrateUninstalledFax(UnattendFile, &bFaxWasInstalled);
    if (dwReturn != NO_ERROR)
    {
        DebugPrintEx(DEBUG_WRN, _T("MigrateUninstalledFax() failed, ec=%ld."), dwReturn);
    }

    //
    // If SBS 5.0 Client or AWF is installed, we need to set FAX=ON in Unattended.txt
    //
    BOOL    bAWFInstalled = IsAWFInstalled();

    if (bFaxWasInstalled || bAWFInstalled)
    {
        //
        // force installation of the Fax component in Whistler.
        //
        if (!WritePrivateProfileString("Components", UNATTEND_FAX_SECTION, "ON", UnattendFile))
        {
            DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString Components failed (ec=%d)",GetLastError());
        }
        else
        {
            DebugPrintEx(DEBUG_MSG, _T("Set FAX=ON in UnattendFile."));
        }
    }
    else
    {
        DebugPrintEx(DEBUG_WRN, _T("Neither AWF not SBS 50 or XP DL Client is installed."));
        return ERROR_NOT_INSTALLED;
    }

    if (bAWFInstalled)
    {
        //
        //  Continue Migration of AWF
        //
        if (MigrateDevices9X(UnattendFile)!=ERROR_SUCCESS)
        {
            DebugPrintEx(DEBUG_ERR,"MigrateDevices9X failed (ec=%d)",GetLastError());
        }

        if (CopyCoverPageFiles9X()!=ERROR_SUCCESS)
        {
            DebugPrintEx(DEBUG_ERR,"CopyCoverPageFiles9X failed (ec=%d)",GetLastError());
        }
    }

    return ERROR_SUCCESS;         // A very confused return value.
}


// ------------------------------------------------------------
// Auxiliary functions

// GetUserProfileName
//
// This function gets the name of the default MAPI profile for a user.
//
// Parameters:
//      hUser                   Pointer to the HKCU equivalent in setup.
//      lpProfName              Pointer to buffer that will hold the profile name.
//      cbSize                  Size of said buffer.
//
// Returns:
//      TRUE on success, FALSE on failure.
//
// Author:
//      Brian Dewey (t-briand)  1997-8-6
static
BOOL
GetUserProfileName(HKEY hUser, LPTSTR lpProfName, DWORD cbSize)
{
    LONG lResult;               // Result of API calls.
    HKEY hUserProf;             // Key to the user profile section.
    DWORD dwType;               // Holds the type of the data.

    DEBUG_FUNCTION_NAME(_T("GetUserProfileName"));

    lResult = RegOpenKeyEx( hUser,                  // Opening a user key...
                            LPUSERPROF,             // This section of the registry...
                            0,                      // Reserved; must be 0.
                            KEY_READ,               // Read permission,
                            &hUserProf);            // Store the key here.
    if (lResult!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx %s failed (ec=%d)",LPUSERPROF,GetLastError());
        return FALSE; // We failed.
    }
    lResult = RegQueryValueEx(  hUserProf,              // The key to the registry.
                                LPPROFNAME,             // Name of the value I want.
                                NULL,                   // Reserved.
                                &dwType,                // Holds the type.
                                LPBYTE(lpProfName),     // Holds the profile name.
                                &cbSize);               // Size of the buffer.
    if (lResult!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"RegQueryValueEx %s failed (ec=%d)",LPPROFNAME,GetLastError());
    }
                                
    RegCloseKey(hUserProf);     // Remember to close the key!!
    return (lResult==ERROR_SUCCESS);
}


// GetRegProfileKey
//
// OK, this is a horrible routine.  Given a key to a user, and the name of
// that user's MAPI profile, it will get a key to FAX service section of the
// MAPI profile in the registry.  The advantage of this is I can get MAPI properties
// (such as user name, fax number, etc.) without using MAPI routines --
// they come straight from the registry.  But still, it seems like an awful
// hack.  I cringe.  You can see me cringe in the comments below.
//
// Parameters:
//      hUser                   The HKCU equivalent for setup.
//      lpProfName              Name of the user's default profile.
//      phRegProfileKey         (OUT) Pointer to the FAX section of the MAPI profile.
//
// Returns:
//      TRUE on success, FALSE on failure.
//
// Author:
//      Brian Dewey (t-briand)  1997-8-6
static BOOL
GetRegProfileKey(HKEY hUser, LPTSTR lpProfName, PHKEY phRegProfileKey)
{
    HKEY    hProfiles                   = NULL;
    HKEY    hUserProf                   = NULL;
    UINT    iIndex                      = 0;           
    DWORD   dwErr                       = ERROR_SUCCESS;
    TCHAR   szProfileName[MAX_PATH+1]   = {0};
    DWORD   dwType                      = 0;
    BYTE    abData[MAX_PATH]            = {0};
    DWORD   cbData                      = 0;     

    DEBUG_FUNCTION_NAME(_T("GetRegProfileKey"));

    dwErr = RegOpenKeyEx(   hUser,                  // Opening a user key...
                            LPPROFILES,             // This section of the registry...
                            0,                      // Reserved; must be 0.
                            KEY_READ,               // Read permission,
                            &hProfiles);
    if (dwErr!=ERROR_SUCCESS) 
    {
        DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx %s failed (ec=%d)",LPPROFILES,dwErr);
        goto exit;
    }

    dwErr = RegOpenKeyEx(   hProfiles,              // Opening a user key...
                            lpProfName,             // This section of the registry...
                            0,                      // Reserved; must be 0.
                            KEY_READ,               // Read permission,
                            &hUserProf);
    if (dwErr!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx %s failed (ec=%d)",lpProfName,dwErr);
        goto exit;
    }

    // enumerate all subkeys and find the one that belongs to our transport provider
    while (dwErr!=ERROR_NO_MORE_ITEMS)
    {
        // get one subkey
        dwErr = RegEnumKey(hUserProf,iIndex++,szProfileName,MAX_PATH+1);
        if (dwErr!=ERROR_SUCCESS)
        {
            DebugPrintEx(DEBUG_ERR,"RegEnumKey failed (ec=%d)",dwErr);
            goto exit;
        }
        // open it
        dwErr = RegOpenKeyEx(hUserProf,szProfileName,0,KEY_READ,phRegProfileKey);
        if (dwErr!=ERROR_SUCCESS)
        {
            DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx %s failed (ec=%d)",szProfileName,dwErr);
            goto exit;
        }

        cbData = sizeof(abData); // Reset the size.
        dwErr = RegQueryValueEx((*phRegProfileKey),            
                                "001E300A",          
                                NULL,               
                                &dwType,            
                                abData,             
                                &cbData);           

        if (dwErr==ERROR_SUCCESS)
        {
            if (strcmp((char*)abData,"awfaxp.dll")==0)
            {
                // found it
                DebugPrintEx(DEBUG_MSG,"Found our Transport provider");
                goto exit;
            }
        }
        else if (dwErr!=ERROR_FILE_NOT_FOUND)
        {
            DebugPrintEx(DEBUG_ERR,"RegQueryValueEx failed (ec=%d)",dwErr);
            RegCloseKey((*phRegProfileKey));
            goto exit;
        }

        dwErr = ERROR_SUCCESS;

        RegCloseKey((*phRegProfileKey));
    }

exit:
    if (hUserProf)
    {
        RegCloseKey(hUserProf);
    }
    if (hProfiles)
    {
        RegCloseKey(hProfiles); 
    }
    return (dwErr==ERROR_SUCCESS);
}

#define PR_NUMBER_OF_RETRIES        0x45080002
#define PR_TIME_BETWEEN_RETRIES     0x45090002

// DumpUserInfo
//
// Writes user information out to 'faxuser.ini'.
//
// Parameters:
//      hUserInfo               Pointer to the fax section of the user's profile.
//      UserName                the user ID of this user.
//      szProfileName           The MAPI profile name the user uses.
//
// Returns:
//      Nothing.
//
// Author:
//      Brian Dewey (t-briand)  1997-8-6
static void
DumpUserInfo(HKEY hUserInfo, LPCSTR UserName, LPTSTR szProfileName,IN LPCSTR UnattendFile)
{
        // Types
    typedef struct tagUSERINFO {
        DWORD dwPropID;         // Property ID
        LPTSTR szDescription;
    } USERINFO;

        // Data
    USERINFO auiProperties[] = 
    {
        { PR_POSTAL_ADDRESS,            TEXT("Address")             },
        { PR_COMPANY_NAME,              TEXT("Company")             },
        { PR_DEPARTMENT_NAME,           TEXT("Department")          },
        { PR_SENDER_EMAIL_ADDRESS,      TEXT("FaxNumber")           },
        { PR_SENDER_NAME,               TEXT("FullName")            },
        { PR_HOME_TELEPHONE_NUMBER,     TEXT("HomePhone")           },
        { PR_OFFICE_LOCATION,           TEXT("Office")              },
        { PR_OFFICE_TELEPHONE_NUMBER,   TEXT("OfficePhone")         },
        { PR_TITLE,                     TEXT("Title")               },
        { PR_NUMBER_OF_RETRIES,         TEXT("NumberOfRetries")     },
        { PR_TIME_BETWEEN_RETRIES,      TEXT("TimeBetweenRetries")  },
    };
    TCHAR szPropStr[9];         // DWORD == 32 bits == 4 bytes == 8 hex digits + 1 null
    UINT  iCount;               // Loop counter.
    UINT  iMax;                 // Largest property number.
    DWORD dwType;               // Type of registry data
    DWORD dwCount;
    BYTE  abData[256];          // Data buffer.
    DWORD cbData;               // Size of the data buffer.
    LONG  lResult;              // Result of API call.
    INT  i;                     // Loop counter.
    TCHAR szUserBuf[9];         // used for annotating INF file.
    TCHAR szBinaryBuf[MAX_PATH];
    TCHAR* pszSeperator = NULL;

    DEBUG_FUNCTION_NAME(_T("DumpUserInfo"));

    // Note that we're dumping this user's information.
    _stprintf(szUserBuf, "USER%04d", dwUserCount++);
    if (!WritePrivateProfileString( TEXT("Users"),
                                    szUserBuf,
                                    UserName,
                                    szInfFileName))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
    }

        // Write the MAPI profile name.
    if (!WritePrivateProfileString( TEXT(UserName),         // this works???
                                    TEXT("MAPI"),
                                    szProfileName,
                                    szInfFileName))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
    }
        
    iMax = sizeof(auiProperties) / sizeof(USERINFO);
    DebugPrintEx(DEBUG_MSG,"There are %d properties.",iMax);
    for (iCount = 0; iCount < iMax; iCount++) 
    {
        _stprintf(szPropStr, TEXT("%0*x"), 8, SWAPWORD(auiProperties[iCount].dwPropID));
        cbData = sizeof(abData); // Reset the size.
        lResult = RegQueryValueEx(  hUserInfo,          // Get info from this key...
                                    szPropStr,          // using this name.
                                    NULL,               // reserved.
                                    &dwType,            // Will store the data type.
                                    abData,             // Data buffer.
                                    &cbData);           // Size of data buffer.
        if (lResult==ERROR_SUCCESS) 
        {
            // TODO: handle more data types!
            if (_tcscmp(auiProperties[iCount].szDescription, TEXT("FullName")) == 0) 
            {
                // We've got the full name.  Remember this for the unattend.txt
                // file.
                _tcscpy(szUserName, LPTSTR(abData));
            }
            switch(dwType) 
            {
              case REG_SZ:
                if (_tcscmp(auiProperties[iCount].szDescription, TEXT("FaxNumber")) == 0) 
                {
                    if (pszSeperator = _tcsrchr(LPTSTR(abData),_T('@')))
                    {
                        // found a '@', treat everything after it as the phone number
                        // everything before it is the mailbox.
                        *pszSeperator = _T('\0');
                        if (!WritePrivateProfileString( TEXT(UserName),
                                                        TEXT("Mailbox"),
                                                        LPCSTR(abData),
                                                        szInfFileName)) 
                        {
                            DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
                        }
                        if (!WritePrivateProfileString( TEXT(UserName),
                                                        TEXT("FaxNumber"),
                                                        _tcsinc(pszSeperator), // Print what was after the '@'.
                                                        szInfFileName
                                                        )) 
                        {
                            DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
                        }
                        break;
                    }
                    else
                    {
                        // no '@' found, which means everything is the phone number.
                        DebugPrintEx(DEBUG_MSG,"No mailbox was found in this profile");
                        // fallthrough will write the fax number to the INF...
                    }
                }// if
                // Replace '\n' characters in the string with semicolons.
                i = 0;
                while(abData[i] != _T('\0')) 
                {
                    if((abData[i] == _T('\n')) || (abData[i] == _T('\r')))
                    {
                        abData[i] = _T(';');
                    }
                    i++;
                }
                if (!WritePrivateProfileString( TEXT(UserName),
                                                auiProperties[iCount].szDescription,
                                                LPCSTR(abData),
                                                szInfFileName
                                                )) 
                {
                    DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
                }
                DebugPrintEx(DEBUG_MSG,"%s = %s",auiProperties[iCount].szDescription,abData);
                break;

              case REG_BINARY:
                // The data is just free-form binary.  Print it one byte at a time.
                DebugPrintEx(DEBUG_MSG,"%s = ",auiProperties[iCount].szDescription);
                memset(szBinaryBuf,0,sizeof(szBinaryBuf));
                dwCount = 0;
                for (i=cbData-1;i>=0;i--)
                {
                    DebugPrintEx(DEBUG_MSG,"%0*d",2,abData[i]);
                    dwCount += sprintf(szBinaryBuf+dwCount,"%0*d",2,abData[i]);
                }
                // write to INF
                if (!WritePrivateProfileString( UNATTEND_FAX_SECTION,
                                                auiProperties[iCount].szDescription,
                                                szBinaryBuf,
                                                UnattendFile
                                                )) 
                {
                    DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
                }
                break;

              default:
                DebugPrintEx(   DEBUG_WRN,
                                "Unknown data type (%d) for property '%s'.",
                                 dwType,
                                 auiProperties[iCount].szDescription);
            }
        } 
        else 
        {
            DebugPrintEx(DEBUG_ERR,"Could not get property '%s'.",auiProperties[iCount].szDescription);
        }
    }
}

// SetGlobalFaxNumberInfo
//
// This routine sets the global variables 'szFaxAreaCode' and 'szFaxNumber' based on
// the value in szPhone.  It expects szPhone to be in the following format:
//
//      [[<country code>] '(' <area code> ')'] <phone number>
//
// (Brackets denote something optional.  Literals are in single quotes, non-terminals are
// in angle brackets.  Note that if there's a country code, there must be an area code.)
//
// Parameters:
//      szPhone                 Described above.
//
// Returns:
//      Nothing.
//
// Side effects:
//      Sets the values of szFaxAreaCode and szFaxNumber.
//
// Author:
//      Brian Dewey (t-briand)  1997-7-24
static void
SetGlobalFaxNumberInfo(LPCTSTR szPhone)
{
    UINT i;                     // Loop index.
    UINT j;                     // Loop index.

    // First, look through the string for an area code.
    i = 0;
    while ((szPhone[i] != _T('\0')) && (szPhone[i] != _T('(')))
    {
        i++;
    }
    if(szPhone[i] == _T('(')) 
    {
            // We've found an area code!
            // are all area codes at most 3 digits??  I sized the buffer to 16, but this will
            // still AV on a badly-formed #.
        i++;
        j=0;
        while(szPhone[i] != _T(')')) 
        {
            szFaxAreaCode[j] = szPhone[i];
            i++;
            j++;
        }
        i++;
            // szPhone[i] should now immediately after the ')' at the end
            // of the area code.  Everything from here on out is a phone number.
        while(_istspace(szPhone[i])) 
        {
            i++;
        }
    } 
    else 
    {
            // If we're here, there was no area code.  We need to rewind either to
            // the beginning of the string or to the first whitespace.
        while(!_istspace(szPhone[i]))
        {
            i--;
        }
        i++;                    // The loop always rewinds one too far.
    }

    // ASSERT:  We're now ready to begin copying from szPhone to
    // szFaxNumber.
    j = 0;
    while(szPhone[i] != '\0') 
    {
        szFaxNumber[j] = szPhone[i];
        i++;
        j++;
    }
}


// InitializeInfFile
//
// This routine writes out the [Version] section of the inf file.
//
// Parameters:
//      None.
//
// Returns:
//      TRUE on success, FALSE on failure.
//
// Side effects:
//      Generates a fully-qualified file name in szInfFileName.  Currently, that's
//      given by <windows dir>\<base file name>.
//
// Author:
//      Brian Dewey (t-briand)  1997-8-5
static BOOL
InitializeInfFile(LPCTSTR WorkingDirectory)
{
    TCHAR szWindowsPath[MAX_PATH]; // This will hold the path to the windows directory.
    DWORD cbPathSize = sizeof(szWindowsPath);
    TCHAR szDriveLetter[2];      // Will hold the drive letter.
    
    DEBUG_FUNCTION_NAME(_T("InitializeInfFile"));

    // First, fully qualify the file name.
    if (!GetWindowsDirectory(szWindowsPath, cbPathSize)) 
    {
        DebugPrintEx(DEBUG_ERR,"GetWindowsDirectory failed (ec=%d)",GetLastError());
        return FALSE;           // It must be serious if that system call failed.
    }
    szDriveLetter[0] = szWindowsPath[0];
    szDriveLetter[1] = 0;
    _stprintf(szInfFileName, TEXT("%s\\%s"), WorkingDirectory, szInfFileBase);

    DebugPrintEx(DEBUG_MSG,"Will store all information in INF file = '%s'",szInfFileName);

        // Now, put the version header on the inf file.
    if (!WritePrivateProfileString( TEXT("Version"),
                                    TEXT("Signature"),
                                    TEXT("\"$WINDOWS NT$\""),
                                    szInfFileName))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
    }
       // now, write out the amount of space we'll need.  Currently, we
       // just put the awdvstub.exe program in the SystemRoot directory.
       // Even w/ symbols, that's under 500K.  Report that.
    if (!WritePrivateProfileString( TEXT("NT Disk Space Requirements"),
                                    szDriveLetter,
                                    TEXT("500000"),
                                    szInfFileName))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString failed (ec=%d)",GetLastError());
    }

    return TRUE;
}


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  MigrateDevices9X
//
//  Purpose:        Save the active device's settings in the INF
//                  Get the device info from the AWF key under HKLM
//
//  Params:
//                  IN LPCSTR UnattendFile - name of the answer file
//
//  Return Value:
//                  Win32 Error code
//
//  Author:
//                  Mooly Beery (MoolyB) 13-dec-2000
///////////////////////////////////////////////////////////////////////////////////////
static DWORD MigrateDevices9X(IN LPCSTR UnattendFile)
{
    DWORD       dwErr                           = ERROR_SUCCESS;
    HKEY        hKeyLocalModems                 = NULL;
    HKEY        hKeyGeneral                     = NULL;
    HKEY        hKeyActiveDevice                = NULL;
    CHAR        szActiveDeviceSection[MAX_PATH] = {0};
    CHAR        szLocalID[MAX_PATH]             = {0};
    CHAR        szAnswerMode[32]                = {0};
    CHAR        szNumRings[32]                  = {0};
    DWORD       cbSize                          = 0;
    DWORD       dwType                          = 0;

    DEBUG_FUNCTION_NAME(_T("MigrateDevices9X"));

    // get the active device's settings
    // open HLKM\Software\Microsoft\At Work Fax\Local Modems
    dwErr = RegOpenKeyEx(   HKEY_LOCAL_MACHINE,
                            REG_KEY_AWF_LOCAL_MODEMS,
                            0,
                            KEY_READ,
                            &hKeyLocalModems);
    if (dwErr!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx %s failed (ec=%d)",REG_KEY_AWF_LOCAL_MODEMS,dwErr);
        goto exit;
    }
    // open the 'general' sub key
    dwErr = RegOpenKeyEx(   hKeyLocalModems,
                            "General",
                            0,
                            KEY_READ,
                            &hKeyGeneral);
    if (dwErr!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx General failed (ec=%d)",dwErr);
        goto exit;
    }
    // get the LocalID REG_SZ, this will be used as the TSID and CSID
    cbSize = sizeof(szLocalID);
    dwErr = RegQueryValueEx(    hKeyGeneral,              
                                INF_RULE_LOCAL_ID, 
                                NULL,                  
                                &dwType,               
                                LPBYTE(szLocalID),            
                                &cbSize);              
    if (dwErr==ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_MSG,"RegQueryValueEx LocalID returned %s",szLocalID);
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"RegQueryValueEx LocalID failed (ec=%d)",dwErr);
        goto exit;
    }
    // write the TSID & CSID entry in the Fax section of unattended.txt
    if (!WritePrivateProfileString( UNATTEND_FAX_SECTION,
                                    INF_RULE_LOCAL_ID,
                                    szLocalID,
                                    UnattendFile))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString TSID failed (ec=%d)",GetLastError());
    }
    // get the ActiveDeviceSection REG_SZ
    cbSize = sizeof(szActiveDeviceSection);
    dwErr = RegQueryValueEx(    hKeyGeneral,              
                                "ActiveDeviceSection", 
                                NULL,                  
                                &dwType,               
                                LPBYTE(szActiveDeviceSection),            
                                &cbSize);              
    if (dwErr==ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_MSG,"RegQueryValueEx ActiveDeviceSection returned %s",szActiveDeviceSection);
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"RegQueryValueEx ActiveDeviceSection failed (ec=%d)",dwErr);
        goto exit;
    }
    // open HLKM\Software\Microsoft\At Work Fax\Local Modems\ "ActiveDeviceSection"
    dwErr = RegOpenKeyEx(   hKeyLocalModems,
                            szActiveDeviceSection,
                            0,
                            KEY_READ,
                            &hKeyActiveDevice);
    if (dwErr!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR,"RegOpenKeyEx %s failed (ec=%d)",szActiveDeviceSection,dwErr);
        goto exit;
    }
    // get the AnswerMode REG_SZ value,
    // 0 - Don't answer
    // 1 - Manual
    // 2 - Answer after x rings.
    cbSize = sizeof(szAnswerMode);
    dwErr = RegQueryValueEx(    hKeyActiveDevice,              
                                INF_RULE_ANSWER_MODE, 
                                NULL,                  
                                &dwType,               
                                LPBYTE(szAnswerMode),            
                                &cbSize);              
    if (dwErr==ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_MSG,"RegQueryValueEx AnswerMode returned %s",szAnswerMode);
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"RegQueryValueEx AnswerMode failed (ec=%d)",dwErr);
        goto exit;
    }
    if (!WritePrivateProfileString( UNATTEND_FAX_SECTION,
                                    INF_RULE_ANSWER_MODE,
                                    szAnswerMode,
                                    UnattendFile))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString Receive failed (ec=%d)",GetLastError());
    }
    // get the NumRings REG_SZ value,
    cbSize = sizeof(szNumRings);
    dwErr = RegQueryValueEx(    hKeyActiveDevice,              
                                INF_RULE_NUM_RINGS, 
                                NULL,                  
                                &dwType,               
                                LPBYTE(szNumRings),            
                                &cbSize);              
    if (dwErr==ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_MSG,"RegQueryValueEx NumRings returned %s",szNumRings);
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,"RegQueryValueEx NumRings failed (ec=%d)",dwErr);
        goto exit;
    }
    if (!WritePrivateProfileString( UNATTEND_FAX_SECTION,
                                    INF_RULE_NUM_RINGS,
                                    szNumRings,
                                    UnattendFile))
    {
        DebugPrintEx(DEBUG_ERR,"WritePrivateProfileString NumRings failed (ec=%d)",GetLastError());
    }

exit:
    if (hKeyLocalModems)
    {
        RegCloseKey(hKeyLocalModems);
    }
    if (hKeyActiveDevice)
    {
        RegCloseKey(hKeyActiveDevice);
    }
    if (hKeyGeneral)
    {
        RegCloseKey(hKeyGeneral);
    }

    return dwErr;
}


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  CopyCoverPageFiles9X
//
//  Purpose:        Copy all of the *.CPE files from %windir% to the temporary 
//                  directory for our migration
//
//  Params:
//                  None
//
//  Return Value:
//                  Win32 Error code
//
//  Author:
//                  Mooly Beery (MoolyB) 13-dec-2000
///////////////////////////////////////////////////////////////////////////////////////
DWORD CopyCoverPageFiles9X()
{
    DWORD           dwErr                   = ERROR_SUCCESS;
    CHAR            szWindowsDir[MAX_PATH]  = {0};
    SHFILEOPSTRUCT  fileOpStruct;

    DEBUG_FUNCTION_NAME(_T("CopyCoverPageFiles9X"));

    ZeroMemory(&fileOpStruct, sizeof(SHFILEOPSTRUCT));

    // Get the windows directory
    if (!GetWindowsDirectory(szWindowsDir, MAX_PATH))
    {
        dwErr = GetLastError();
        DebugPrintEx(DEBUG_ERR,"GetWindowsDirectory failed (ec=%d)",dwErr);
        goto exit;
    }

    //
    // Copy *.cpe from windows-dir to temp-dir
    //
    strcat(szWindowsDir,"\\*.cpe");

    fileOpStruct.hwnd =                     NULL; 
    fileOpStruct.wFunc =                    FO_COPY;
    fileOpStruct.pFrom =                    szWindowsDir; 
    fileOpStruct.pTo =                      lpWorkingDir;
    fileOpStruct.fFlags =                   

        FOF_FILESONLY       |   // Perform the operation on files only if a wildcard file name (*.*) is specified. 
        FOF_NOCONFIRMMKDIR  |   // Do not confirm the creation of a new directory if the operation requires one to be created. 
        FOF_NOCONFIRMATION  |   // Respond with "Yes to All" for any dialog box that is displayed. 
        FOF_NORECURSION     |   // Only operate in the local directory. Don't operate recursively into subdirectories.
        FOF_SILENT          |   // Do not display a progress dialog box. 
        FOF_NOERRORUI;          // Do not display a user interface if an error occurs. 

    fileOpStruct.fAnyOperationsAborted =    FALSE;
    fileOpStruct.hNameMappings =            NULL;
    fileOpStruct.lpszProgressTitle =        NULL; 

    DebugPrintEx(DEBUG_MSG, 
             TEXT("Calling to SHFileOperation from %s to %s."),
             fileOpStruct.pFrom,
             fileOpStruct.pTo);
    if (SHFileOperation(&fileOpStruct))
    {
        dwErr = GetLastError();
        DebugPrintEx(DEBUG_ERR,"SHFileOperation failed (ec: %ld)",dwErr);
        goto exit;
    }


exit:
    return dwErr;
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsAWFInstalled
//
//  Purpose:        
//                  Check if AWF is installed
//
//  Params:
//                  None
//
//  Return Value:
//                  TRUE    - AWF is installed
//                  FALSE   - AWF not installed or an error occured error
//
//  Author:
//                  Mooly Beery (MoolyB) 13-dec-2000
///////////////////////////////////////////////////////////////////////////////////////
static BOOL IsAWFInstalled()
{
    HKEY    hKey    = NULL;
    DWORD   dwErr   = ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(_T("IsAWFInstalled"));

    dwErr = RegOpenKeyEx(   HKEY_LOCAL_MACHINE,
                            REG_KEY_AWF_INSTALLED,
                            0,
                            KEY_READ,
                            &hKey);
    if (dwErr!=ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_MSG,"RegOpenKeyEx %s failed (ec=%d), assume AWF is not installed",REG_KEY_AWF_LOCAL_MODEMS,dwErr);
        return FALSE;
    }

    RegCloseKey(hKey);
    DebugPrintEx(DEBUG_MSG,"AWF is installed");

    return TRUE;
}

static DWORD RememberInstalledFax(
	IN DWORD	dwFaxInstalled
)
/*++

Routine name : RememberInstalledFax

Routine description:

    for each installed Fax Client application, write to the registry that this app is installed.

Arguments :

    IN DWORD dwFaxInstalled	-	input bit-wise combination of fxState_UpgradeApp_e values that defines which 
								fax client appications are present of the machine.

Author:

	Iv Garber (IvG),	May, 2002

Return Value:

    Success or Failure code.

--*/
{
    DWORD   dwReturn    = NO_ERROR;
    HKEY    hKey        = NULL;        

    DEBUG_FUNCTION_NAME(_T("RememberInstalledFax"));

    //
    //  check parameters 
    //
    if (dwFaxInstalled == FXSTATE_NONE)
    {
        DebugPrintEx(DEBUG_MSG, _T("No Fax application is installed -> Upgrade will not be blocked."));
        return dwReturn;
    }

    //
    //  Create Registry Key
    //
    hKey = OpenRegistryKey(HKEY_LOCAL_MACHINE, REGKEYUPG_INSTALLEDFAX, TRUE, KEY_SET_VALUE);
    if (!hKey)
    {
        dwReturn = GetLastError();
        DebugPrintEx(
            DEBUG_WRN, 
            _T("OpenRegistryKey( ' %s ' ) failed, ec = %ld. Cannot remember installed fax apps."), 
            REGKEYUPG_INSTALLEDFAX, 
            dwReturn);
        return dwReturn;
    }

    //
    //  store the value in the Registry
    //
    if (!SetRegistryDword(hKey, NULL, dwFaxInstalled))
    {
        dwReturn = GetLastError();
        DebugPrintEx(DEBUG_WRN, _T("SetRegistryDword( ' %ld ' ) failed, ec = %ld."), dwFaxInstalled, dwReturn);
    }

    RegCloseKey(hKey);
    return dwReturn;

}

static DWORD MigrateUninstalledFax(
    IN  LPCTSTR lpctstrUnattendFile,
    OUT bool    *pbFaxWasInstalled
)
/*++

Routine name : MigrateUninstalledFax

Routine description:

    Put the data about Fax Applications that were installed on the machine before upgrade,
        from the Registry to the Unattended file, to be used by FaxOCM.

Author:

	Iv Garber (IvG),	May, 2001

Arguments:

	lpctstrUnattendFile [in]    - name of the answer file to write the data to
    pbFaxWasInstalled   [out]   - address of a bool variable to receive True if SBS 5.0 /XPDL Client was installed
                                        on the machine before the upgrade, otherwise False.

Return Value:

    Success or Failure code.

--*/
{
    DWORD   dwReturn    = NO_ERROR;
    HKEY    hKey        = NULL;
    DWORD   dwValue     = FXSTATE_NONE;
    TCHAR   szValue[10] = {0};

    DEBUG_FUNCTION_NAME(_T("MigrateUninstalledFax"));

    if (pbFaxWasInstalled)
    {
        *pbFaxWasInstalled = false;
    }

    //
    //  Open a key
    //
    hKey = OpenRegistryKey(HKEY_LOCAL_MACHINE, REGKEYUPG_INSTALLEDFAX, FALSE, KEY_QUERY_VALUE);
    if (!hKey)
    {
        dwReturn = GetLastError();
        DebugPrintEx(
            DEBUG_MSG, 
            _T("OpenRegistryKey( ' %s ' ) failed, ec = %ld. No Fax was installed before the upgrade."),
            REGKEYUPG_INSTALLEDFAX, 
            dwReturn);

        if (dwReturn == ERROR_FILE_NOT_FOUND)
        {
            //
            //  This is not real error
            //
            dwReturn = NO_ERROR;
        }
        return dwReturn;
    }

    //
    //  Read the data 
    //
    dwReturn = GetRegistryDwordEx(hKey, NULL, &dwValue);
    if (dwReturn != ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_WRN, _T("GetRegistryDwordEx() failed, ec = %ld."), dwReturn);
        goto CloseRegistry;
    }

    if (pbFaxWasInstalled)
    {
        *pbFaxWasInstalled = true;
    }

    DebugPrintEx(DEBUG_MSG, _T("Found uninstalled fax apps : %ld"), dwValue);

    //
    //  Convert dwValue to String
    //
    _itot(dwValue, szValue, 10);

    //
    //  write szValue to the unattended file
    //
    if (!WritePrivateProfileString(
        UNATTEND_FAX_SECTION, 
        UNINSTALLEDFAX_INFKEY,
        szValue,
        lpctstrUnattendFile))
    {
        dwReturn = GetLastError();
        DebugPrintEx(
            DEBUG_ERR, 
            _T("WritePrivateProfileString(FaxApps = ' %s ') failed (ec=%d)"), 
            szValue,
            dwReturn);
    }
    else
    {
        DebugPrintEx(
            DEBUG_ERR, 
            _T("WritePrivateProfileString(FaxApps = ' %s ') OK."), 
            szValue);
    }

CloseRegistry:

    RegCloseKey(hKey);
    return dwReturn;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\winntmig\resource.h ===
// resource.h
//
// Copyright (c) 1997  Microsoft Corporation
//
// Resource IDs for the fax migration DLL.
//
// Author:
// 	Brian Dewey (t-briand)	1997-8-19

#define MSG_VI_COMPANY_NAME     203
#define MSG_VI_SUPPORT_NUMBER   204
#define MSG_VI_SUPPORT_URL      205
#define MSG_VI_INSTRUCTIONS     206
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\inc\tifflib.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifflib.h

Abstract:

    This file contains the interfaces for the
    Windows XP FAX Server TIFF I/O Library.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/


#ifndef _TIFFLIB_
#define _TIFFLIB_

#ifdef __cplusplus
extern "C" {
#endif

#include <tiff.h>

#define TIFF_COMPRESSION_NONE     1
#define TIFF_COMPRESSION_MH       2
#define TIFF_COMPRESSION_MR       3
#define TIFF_COMPRESSION_MMR      4


#define     TIFFF_RES_Y             196
#define     TIFFF_RES_Y_DRAFT       98

//
// The value of the TIFFTAG_FAX_VERSION TIF tag
// The current fax tif version
//
#define FAX_TIFF_XP_VERSION        2
#define FAX_TIFF_CURRENT_VERSION   FAX_TIFF_XP_VERSION

typedef struct _TIFF_INFO {
    DWORD   ImageWidth;
    DWORD   ImageHeight;
    DWORD   PageCount;
    DWORD   PhotometricInterpretation;
    DWORD   ImageSize;
    DWORD   CompressionType;
    DWORD   FillOrder;
    DWORD   YResolution;
} UNALIGNED TIFF_INFO, *PTIFF_INFO;

typedef struct _MS_TAG_INFO {
    LPTSTR      RecipName;
    LPTSTR      RecipNumber;
    LPTSTR      SenderName;
    LPTSTR      Routing;
    LPTSTR      CallerId;
    LPTSTR      Csid;
    LPTSTR      Tsid;
    DWORDLONG   StartTime;
    DWORDLONG   EndTime;
    DWORDLONG   SubmissionTime;
    DWORDLONG   OriginalScheduledTime;
    DWORD       Type;
    LPTSTR      Port;
    DWORD       Pages;
    DWORD       Retries;
    LPTSTR      RecipCompany;
    LPTSTR      RecipStreet;
    LPTSTR      RecipCity;
    LPTSTR      RecipState;
    LPTSTR      RecipZip;
    LPTSTR      RecipCountry;
    LPTSTR      RecipTitle;
    LPTSTR      RecipDepartment;
    LPTSTR      RecipOfficeLocation;
    LPTSTR      RecipHomePhone;
    LPTSTR      RecipOfficePhone;
    LPTSTR      RecipEMail;
    LPTSTR      SenderNumber;
    LPTSTR      SenderCompany;
    LPTSTR      SenderStreet;
    LPTSTR      SenderCity;
    LPTSTR      SenderState;
    LPTSTR      SenderZip;
    LPTSTR      SenderCountry;
    LPTSTR      SenderTitle;
    LPTSTR      SenderDepartment;
    LPTSTR      SenderOfficeLocation;
    LPTSTR      SenderHomePhone;
    LPTSTR      SenderOfficePhone;
    LPTSTR      SenderEMail;
    LPTSTR      SenderBilling;
    LPTSTR      Document;
    LPTSTR      Subject;
    LPTSTR      SenderUserName;
    LPTSTR      SenderTsid;
    DWORD       Priority;
    DWORD       dwStatus;
    DWORD       dwExtendedStatus;
    LPTSTR      lptstrExtendedStatus;
    DWORDLONG   dwlBroadcastId;
} MS_TAG_INFO, *PMS_TAG_INFO;

BOOL
FXSTIFFInitialize(
	VOID
	);

HANDLE
TiffCreate(
    LPTSTR FileName,
    DWORD  CompressionType,
    DWORD  ImageWidth,
    DWORD  FillOrder,
    DWORD  HiRes
    );

HANDLE
TiffOpen(
    LPCTSTR FileName,
    PTIFF_INFO TiffInfo,
    BOOL ReadOnly,
    DWORD RequestedFillOrder
    );

BOOL
TiffClose(
    HANDLE hTiff
    );

BOOL
TiffStartPage(
    HANDLE hTiff
    );

BOOL
TiffEndPage(
    HANDLE hTiff
    );


BOOL
TiffWriteRaw(
    HANDLE hTiff,
    LPBYTE TiffData,
    DWORD Size
    );

BOOL
TiffRead(
    HANDLE hTiff,
    LPBYTE TiffData,
	DWORD	dwTiffDataSize,
    DWORD PadLength
    );

BOOL
TiffSeekToPage(
    HANDLE hTiff,
    DWORD PageNumber,
    DWORD FillOrder
    );


BOOL
TiffRecoverGoodPages(
    LPTSTR SrcFileName,
    LPDWORD RecoveredPages,
    LPDWORD TotalPages
    );

// fast tiff



void
BuildLookupTables(
    DWORD TableLength
    );


BOOL
DecodeMrPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    BOOL                HiRes
    );


BOOL
DecodeMhPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer
    );


BOOL
DecodeMmrPage(
    HANDLE              hTiff,
    LPBYTE              OutputBuffer,
    BOOL                SingleLineBuffer,
    BOOL                HiRes
    );





BOOL
ConvMmrPageToMrSameRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes
    );


BOOL
ConvMmrPageHiResToMrLoRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer
    );



BOOL
ConvMmrPageToMh(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes,
    BOOL                SrcHiRes
    );


BOOL
ConvFileMhToMmr(
    LPTSTR              SrcFileName,
    LPTSTR              DestFileName
    );


BOOL
OutputMmrLine(
    LPDWORD     lpdwOut,
    BYTE        BitOut,
    WORD       *pCurLine,
    WORD       *pRefLine,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    LPDWORD     lpdwOutLimit,
    DWORD       lineWidth
    );


BOOL
TiffPostProcessFast(
    LPTSTR SrcFileName,
    LPTSTR DstFileName          // can be null for generated name
    );



BOOL
MmrAddBranding(
    LPCTSTR              SrcFileName,
    LPTSTR              Branding,
    LPTSTR              BrandingOf,
    INT                 BrandingHeight
    );


int
ScanMhSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    DWORD                lineWidth
    );

BOOL
ScanMrSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    BOOL                *f1D,
    DWORD                lineWidth
    );


BOOL
TiffGetCurrentPageData(
    HANDLE      hTiff,
    LPDWORD     Lines,
    LPDWORD     StripDataSize,
    LPDWORD     ImageWidth,
    LPDWORD     ImageHeight
    );


BOOL
TiffGetCurrentPageResolution(
    HANDLE  hTiff,
    LPDWORD lpdwYResolution,
    LPDWORD lpdwXResolution
);

BOOL
TiffPrint (
    LPCTSTR lpctstrTiffFileName,
    LPTSTR  lptstrPrinterName
    );

BOOL
TiffPrintDC (
    LPCTSTR lpctstrTiffFileName,
    HDC     hdcPrinterDC
    );

BOOL
TiffUncompressMmrPage(
    HANDLE      hTiff,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     Lines
    );

BOOL
TiffUncompressMmrPageRaw(
    LPBYTE      StripData,
    DWORD       StripDataSize,
    DWORD       ImageWidth,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     LinesOut
    );

BOOL
TiffExtractFirstPage(
    LPTSTR FileName,
    LPBYTE *Buffer,
    LPDWORD BufferSize,
    LPDWORD ImageWidth,
    LPDWORD ImageHeight
    );

BOOL
TiffAddMsTags(
    LPTSTR          FileName,
    PMS_TAG_INFO    MsTagInfo,
    BOOL            fSendJob
    );

BOOL
TiffLimitTagNumber(
    LPCTSTR         FileName,
    DWORD           dwMaxTags
    );

BOOL
PrintTiffFile(
    HDC PrinterDC,
    LPTSTR FileName
    );

#define TIFFCF_ORIGINAL_FILE_GOOD       0x00000001
#define TIFFCF_UNCOMPRESSED_BITS        0x00000002
#define TIFFCF_NOT_TIFF_FILE            0x00000004

BOOL
ConvertTiffFileToValidFaxFormat(
    LPTSTR TiffFileName,
    LPTSTR NewFileName,
    LPDWORD Flags
    );

BOOL
MergeTiffFiles(
    LPCTSTR BaseTiffFile,
    LPCTSTR NewTiffFile
    );


BOOL
TiffSetCurrentPageWidth(
    HANDLE hTiff,
    DWORD ImageWidth
    );

BOOL
TiffSetCurrentPageParams(
    HANDLE hTiff,
    DWORD  CompressionType,
    DWORD  ImageWidth,
    DWORD  FillOrder,
    DWORD  HiRes
    );

BOOL
PrintRandomDocument(
    LPCTSTR FaxPrinterName,
    LPCTSTR DocName,
    LPTSTR OutputFile
    );

BOOL
MemoryMapTiffFile(
    LPCTSTR                 lpctstrFileName,
    LPDWORD                 lpdwFileSize,
    LPBYTE*                 lppbfPtr,
    HANDLE*                 phFile,
    HANDLE*                 phMap,
    LPDWORD                 lpdwIfdOffset
    );

LPWSTR
GetMsTagString(
    LPBYTE          RefPointer,
    DWORD           dwFileSize,
    PTIFF_TAG       pTiffTag
);

BOOL
GetMsTagDwordLong(
    LPBYTE          pbBegin,    
    DWORD           dwFileSize,
    PTIFF_TAG       pTiffTag,
    DWORDLONG*      pdwlOut
);

BOOL
GetMsTagFileTime(
    LPBYTE          pbBegin,    
    DWORD           dwFileSize,
    PTIFF_TAG       pTiffTag,
    FILETIME*       pftOut
);

void
FreeMsTagInfo(
    PMS_TAG_INFO pMsTags
);


//
// DO NOT CHANGE
// It's W2K MS Fax TIFFTAG_SOFTWARE tif file tag value
//
#define W2K_FAX_SOFTWARE_TIF_TAG  "Windows NT Fax Server"

#define ERROR_XP_TIF_FILE_FORMAT                20001L
//
// A TIF file has XP format and its type do not match required archive type
//
#define ERROR_XP_TIF_WITH_WRONG_ARCHIVE_TYPE    20002L

#ifdef UNICODE

DWORD
GetW2kMsTiffTags(
    LPCWSTR      cszFileName,
    PMS_TAG_INFO pMsTags,
    BOOL         bSentArchive
);

#endif // UNICODE

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\decode.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    decode.c

Abstract:

    This file contains functions for decoding (de-compressing)
    compressed 1 bit per pel data from a TIFF data
    stream.  The supported compression algorithms are
    as follows:

        o  Uncompressed (raw)
        o  One dimensional - MH or Modified Huffman
        o  Two dimensional - MR or Modified Read

Environment:

        WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include "tifflibp.h"
#pragma hdrstop



BOOL
DecodeUnCompressedFaxData(
    IN OUT  PTIFF_INSTANCE_DATA TiffInstance,
    OUT     LPBYTE              OutputBuffer,
    IN      DWORD               dwOutputBuffSize
    )

/*++

Routine Description:

    Decode a single page of uncompressed TIFF data.

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    OutputBuffer    - Output buffer where the uncompressed data
                      is written.  This buffer must be allocated
                      by the caller and must be large enough for
                      a single page of data.
    dwOutputBuffSize    -   Size in BYTES of the Output Buffer.

Return Value:

    TRUE if succeded, FALSE otherwise.

--*/

{
    DWORD   dwImageSize = TiffInstance->ImageHeight * (TiffInstance->ImageWidth / 8);

    if ((dwOutputBuffSize < dwImageSize) || (dwOutputBuffSize < TiffInstance->StripDataSize))
    {
		ASSERT_FALSE;
        return FALSE;
    }

    TiffInstance->Lines = TiffInstance->StripDataSize / (TiffInstance->ImageWidth / 8);

	ZeroMemory(OutputBuffer, dwImageSize);
    CopyMemory(OutputBuffer, TiffInstance->StripData, TiffInstance->StripDataSize);

    return TRUE;
}


BOOL
DecodeMHFaxData(
    IN  OUT PTIFF_INSTANCE_DATA TiffInstance,
    OUT     LPBYTE              OutputBuffer,
    IN      DWORD               dwOutputBuffSize,
    IN      BOOL                SingleLineBuffer,
    IN      DWORD               PadLength
    )

/*++

Routine Description:

    Decode a single page of 1 dimensionaly compressed
    TIFF data.

Arguments:

    TiffInstance        -   Pointer to the TIFF instance data
    OutputBuffer        -   Output buffer where the uncompressed data
                            is written.  This buffer must be allocated
                            by the caller and must be large enough for
                            a single page of data.
    dwOutputBuffSize    -   Size in Bytes of the OutputBuffer

Return Value:

    TRUE if succeded, FALSE otherwise

--*/

{
    DWORD               i;
    DWORD               j;
    BYTE                octet;
    PDECODE_TREE        Tree;
    INT                 code;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    BOOL                LastLineBad;
    DWORD               dwImageSize;

    dwImageSize = TiffInstance->ImageHeight * (TiffInstance->ImageWidth / 8);

    if ( (dwOutputBuffSize < dwImageSize) || (dwOutputBuffSize < TiffInstance->StripDataSize) )
    {
		ASSERT_FALSE;
        return FALSE;
    }

	if (!SingleLineBuffer)
	{
        ZeroMemory(OutputBuffer, dwImageSize);
	}

    Tree = WhiteDecodeTree;
    code = 0;
    Lines = 0;
    EolCount = 1;
    BadFaxLines = 0;
    LastLineBad = FALSE;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->bitdata = 0;
    TiffInstance->bitcnt = DWORDBITS;
    TiffInstance->bitbuf = OutputBuffer;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;


    for (i=0; i<TiffInstance->StripDataSize; i++) {
        if (plinebuf[i] == 0) {
            break;
        }
    }

    //
    // loop thru each byte in the file
    //

    for (; i<TiffInstance->StripDataSize; i++) 
    {
        octet = plinebuf[i];
#ifdef RDEBUG
    if (2147 == i)
        {
            DebugBreak ();
        }
#endif
        //
        // loop thru each bit in the byte
        //
        for (j=0; j<8; j++,octet<<=1) 
        {
            if (code == DECODEEOL) 
            {
                if (!(octet&0x80)) 
                {
                    //
                    // here we skip all bits until we hit a 1 bit
                    // this happens when the first octet in a line
                    // is all zeroes and we detect that we are
                    // searching for an EOL
                    //
                    continue;
                }

                if (TiffInstance->RunLength && TiffInstance->RunLength != lineWidth) {

                    if (TiffInstance->RunLength < lineWidth) {
                        TiffInstance->Color = 0;
                        OutputCodeBits( TiffInstance, lineWidth - TiffInstance->RunLength );
                    }

                    if (LastLineBad) {

                        BadFaxLines += 1;

                    } else {

                        if (BadFaxLines > TiffInstance->BadFaxLines) {
                            TiffInstance->BadFaxLines = BadFaxLines;
                        }
                        BadFaxLines = 1;
                        LastLineBad = TRUE;

                    }

                } else {

                    LastLineBad = FALSE;

                }

                if (!TiffInstance->StartGood) {
                    TiffInstance->StartGood = i - 1;
                }

                //
                // we hit the eol marker
                //
                Tree = WhiteDecodeTree;
                TiffInstance->Color = 0;
                code = 0;

                if (SingleLineBuffer) {
                    TiffInstance->bitbuf = OutputBuffer;
                }

                if (TiffInstance->RunLength) {

                    FlushLine(TiffInstance,PadLength);
                    TiffInstance->RunLength = 0;
                    Lines += 1;
                    EolCount = 1;

                } else {

                    //
                    // the eol count is maintained to that
                    // an rtc sequence is detected.
                    //

                    EolCount += 1;

                    if (EolCount == 6) {

                        //
                        // this is an rtc sequence, so any
                        // data that follows in the file
                        // is garbage.
                        //

                        goto good_exit;

                    }

                }

                continue;
            }

            code = ((octet&0x80)>>7) ? Tree[code].Right : Tree[code].Left;

            if (code == BADRUN) {
                return FALSE;
            }

            if (code < 1) {

                code = (-code);

                OutputCodeBits( TiffInstance, code );

                if (code < 64) {
                    //
                    // terminating code
                    //
                    TiffInstance->Color = !TiffInstance->Color;
                    Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;
                }
                code = 0;
            }

        }
    }

good_exit:

    TiffInstance->EndGood = i;
    if (BadFaxLines > TiffInstance->BadFaxLines) {
        TiffInstance->BadFaxLines = BadFaxLines;
    }

    FlushBits( TiffInstance );
    TiffInstance->Lines = Lines;

    return TRUE;
}


BOOL
DecodeMRFaxData(
    IN OUT	PTIFF_INSTANCE_DATA	TiffInstance,
    OUT		LPBYTE              OutputBuffer,
    IN      DWORD               dwOutputBuffSize,
    IN		BOOL                SingleLineBuffer,
    IN		DWORD               PadLength
    )

/*++

Routine Description:

    Decode a single page of 2 dimensionaly compressed
    TIFF data.

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    OutputBuffer    - Output buffer where the uncompressed data
                      is written.  This buffer must be allocated
                      by the caller and must be large enough for
                      a single page of data.

    dwOutputBuffSize    -   Size in Bytes of the OutputBuffer

Return Value:

    NONE

--*/

{
    DWORD               i;
    DWORD               j;
    BYTE                octet;
    PDECODE_TREE        Tree;
    INT                 code;
    LPBYTE              prefline;
    LPBYTE              pcurrline;
    DWORD               HorzRuns;
    BOOL                OneDimensional;
    DWORD               a0;
    DWORD               a1;
    DWORD               b1;
    DWORD               b2;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    BOOL                LastLineBad;
	DWORD				dwImageSize;

    dwImageSize = TiffInstance->ImageHeight * (TiffInstance->ImageWidth / 8);

    if ( (dwOutputBuffSize < dwImageSize) || (dwOutputBuffSize < TiffInstance->StripDataSize) )
    {
		ASSERT_FALSE;
        return FALSE;
    }

	if (!SingleLineBuffer)
	{
        ZeroMemory(OutputBuffer, dwImageSize);
	}

    Tree = WhiteDecodeTree;
    code = 0;
    HorzRuns = 0;
    EolCount = 1;
    BadFaxLines = 0;
    LastLineBad = FALSE;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->bitdata = 0;
    TiffInstance->bitcnt = DWORDBITS;
    TiffInstance->bitbuf = OutputBuffer;
    OneDimensional = TRUE;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;
    pcurrline = OutputBuffer;
    prefline = OutputBuffer;
    a0 = 0;
    a1 = 0;
    b1 = 0;
    b2 = 0;
    Lines = 0;


    //
    // loop thru each byte in the file
    //

    for (j=0; j<TiffInstance->StripDataSize; j++) {


        octet = *plinebuf++;

        //
        // loop thru each bit in the byte
        //

        for (i=0; i<8; i++,octet<<=1) {

            if (code == DECODEEOL2) {

                //
                // we hit the final eol marker
                //

                if (TiffInstance->RunLength && TiffInstance->RunLength != lineWidth) {

                    if (TiffInstance->RunLength < lineWidth) {
                        TiffInstance->Color = 0;
                        OutputCodeBits( TiffInstance, lineWidth - TiffInstance->RunLength );
                    }

                    if (LastLineBad) {

                        BadFaxLines += 1;

                    } else {

                        if (BadFaxLines > TiffInstance->BadFaxLines) {
                            TiffInstance->BadFaxLines = BadFaxLines;
                        }
                        BadFaxLines = 1;
                        LastLineBad = TRUE;

                    }

                } else {

                    LastLineBad = FALSE;

                }

                if (!TiffInstance->StartGood) {
                    TiffInstance->StartGood = i - 1;
                }

                //
                // set the decoding tree
                //

                OneDimensional = (octet & 0x80) == 0x80;
                Tree = OneDimensional ? WhiteDecodeTree : TwoDecodeTree;

                //
                // reset the control variables
                //

                TiffInstance->Color = 0;
                code = 0;
                a0 = 0;
                a1 = 0;
                b1 = 0;
                b2 = 0;

                //
                // if there is a non-zero runlength then
                // spaw the reference & current line pointers
                // and count this line.  the runlength can be
                // zero when there is just an empty eol in
                // the stream.
                //

                if (SingleLineBuffer) {
                    TiffInstance->bitbuf = OutputBuffer;
                }

                if (TiffInstance->RunLength) {
                    TiffInstance->RunLength = 0;
                    Lines += 1;
                    prefline = pcurrline;
                    pcurrline = TiffInstance->bitbuf;

                } else {

                    //
                    // the eol count is maintained to that
                    // an rtc sequence is detected.
                    //

                    EolCount += 1;

                    if (EolCount == 6) {

                        //
                        // this is an rtc sequence, so any
                        // data that follows in the file
                        // is garbage.
                        //

                        goto good_exit;

                    }

                }

                continue;
            }

            if (code == DECODEEOL) {

                if (!(octet&0x80)) {
                    //
                    // here we skip all bits until we hit a 1 bit
                    // this happens when the first octet in a line
                    // is all zeroes and we detect that we are
                    // searching for an EOL
                    //
                    continue;
                }

                //
                // this forces the code to pickup the next
                // bit in the stream, which tells whether
                // the next line is encoded in MH or MR compression
                //
                code = DECODEEOL2;
                continue;

            }

            if (code == BADRUN) {

                code = 0;
                continue;

            }

            code = ((octet&0x80)>>7) ? Tree[code].Right : Tree[code].Left;

            b1 = NextChangingElement( prefline, a0, lineWidth, !TiffInstance->Color );
            b1 = NextChangingElement( prefline, b1, lineWidth,  TiffInstance->Color );

            b2 = NextChangingElement( prefline, b1, lineWidth, GetBit(prefline, b1 ) );

            if (OneDimensional) {

                if (code < 1) {

                    code = (-code);

                    OutputCodeBits( TiffInstance, code );

                    //
                    // the affect of this is to accumulate the runlengths
                    // into a0, causing a0 to be placed on a2 when horizontal
                    // mode is completed/
                    //

                    a0 += code;

                    if (code < 64) {

                        //
                        // terminating code
                        //
                        TiffInstance->Color = !TiffInstance->Color;
                        Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;

                        if (HorzRuns) {

                            HorzRuns -= 1;

                            if (!HorzRuns) {

                                Tree = TwoDecodeTree;
                                OneDimensional = FALSE;

                            }

                        }

                    }

                    code = 0;

                }

                continue;

            }

            if (code == HORZMODE) {

                //
                // horizontal mode occurs when b1-a1 greater than 3
                //

                code= 0;
                HorzRuns = 2;
                OneDimensional = TRUE;
                Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;

            } else if (code == PASSMODE) {

                //
                // pass mode occurs when the position of b2 lies
                // to the left of a1, but a1 cannot be equal to b2.
                //

                code = b2 - a0;
                OutputCodeBits( TiffInstance, code );
                code = 0;
                a0 = b2;

            } else if (code >= VTMODE3N && code <= VTMODE3P) {

                //
                // vertical mode occurs when b1-a1 <= 3
                //

                a1 = b1 - (VTMODE0 - code);
                code = a1 - a0;

                OutputCodeBits( TiffInstance, code );

                code = 0;
                a0 = a1;

                TiffInstance->Color = !TiffInstance->Color;

            }


        }
    }

good_exit:

    TiffInstance->EndGood = i;
    if (BadFaxLines > TiffInstance->BadFaxLines) {
        TiffInstance->BadFaxLines = BadFaxLines;
    }

    FlushBits( TiffInstance );
    TiffInstance->Lines = Lines;

    return TRUE;
}


BOOL
DecodeMMRFaxData(
    IN OUT	PTIFF_INSTANCE_DATA	TiffInstance,
    OUT		LPBYTE              OutputBuffer,
    IN      DWORD               dwOutputBuffSize,
    IN		BOOL                SingleLineBuffer,
    IN		DWORD               PadLength
    )

/*++

Routine Description:

    Decode a single page of 2 dimensionaly compressed
    TIFF data.

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    OutputBuffer    - Output buffer where the uncompressed data
                      is written.  This buffer must be allocated
                      by the caller and must be large enough for
                      a single page of data.

    dwOutputBuffSize    -   Size in Bytes of the OutputBuffer

Return Value:

    NONE

--*/

{
    DWORD               i;
    DWORD               j;
    BYTE                octet;
    PDECODE_TREE        Tree;
    INT                 code;
    LPBYTE              prefline;
    LPBYTE              pcurrline;
    DWORD               HorzRuns;
    BOOL                OneDimensional;
    DWORD               a0;
    DWORD               a1;
    DWORD               b1;
    DWORD               b2;
    PBYTE               plinebuf;
    DWORD               lineWidth;
    DWORD               Lines;
    DWORD               EolCount;
	DWORD				dwImageSize;

    dwImageSize = TiffInstance->ImageHeight * (TiffInstance->ImageWidth / 8);

    if ( (dwOutputBuffSize < dwImageSize) || (dwOutputBuffSize < TiffInstance->StripDataSize) )
    {
		ASSERT_FALSE;
        return FALSE;
    }

    if ( !SingleLineBuffer )
	{
        ZeroMemory(OutputBuffer, dwImageSize);
	}

    Tree = TwoDecodeTree;
    code = 0;
    HorzRuns = 0;
    EolCount = 0;
    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->bitdata = 0;
    TiffInstance->bitcnt = DWORDBITS;
    TiffInstance->bitbuf = OutputBuffer;
    OneDimensional = FALSE;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;
    pcurrline = OutputBuffer;
    prefline = OutputBuffer;
    a0 = 0;
    a1 = 0;
    b1 = 0;
    b2 = 0;
    Lines = 0;


    //
    // loop thru each byte in the file
    //

    for (j=0; j<TiffInstance->StripDataSize; j++) {


        octet = *plinebuf++;

        //
        // loop thru each bit in the byte
        //

        for (i=0; i<8; i++,octet<<=1) {

            if (Lines + 1 == TiffInstance->ImageHeight && TiffInstance->RunLength == lineWidth)
            {
                goto good_exit;
            }

            //
            // if the OneDimensional flag is set and the RunLength == lineWidth
            // then it means that the last run length was horizontal mode
            // and it was not a terminating code.  in this case we must go
            // process the remaining termination code before ending the line.
            //
            // if the OneDimensional flag is NOT set and the RunLength == lineWidth
            // then we are at the end of a line.  for mmr compression there are
            // no eols, so this is the pseudo eol.
            //

            if ((TiffInstance->RunLength == lineWidth) && (!OneDimensional)) {
                //
                // set the decoding tree
                //

                Tree = TwoDecodeTree;

                //
                // reset the control variables
                //

                TiffInstance->Color = 0;
                code = 0;
                a0 = 0;
                a1 = 0;
                b1 = 0;
                b2 = 0;
                Tree = TwoDecodeTree;
                OneDimensional = FALSE;

                //
                // if there is a non-zero runlength then
                // spaw the reference & current line pointers
                // and count this line.  the runlength can be
                // zero when there is just an empty eol in
                // the stream.
                //

                if (SingleLineBuffer) {
                    TiffInstance->bitbuf = OutputBuffer;
                }

                TiffInstance->RunLength = 0;
                Lines += 1;
                prefline = pcurrline;
                pcurrline = TiffInstance->bitbuf;
                b1 = GetBit(prefline, 0) ? 0 : NextChangingElement(prefline, 0, lineWidth, 0);
            } else if (code == DECODEEOL2) {

                //
                // the eol count is maintained to that
                // an rtc sequence is detected.
                //

                EolCount += 1;

                if (EolCount == 2) {

                    //
                    // this is an rtc sequence, so any
                    // data that follows in the file
                    // is garbage.
                    //

                    goto good_exit;

                }

                continue;
            } else if (code == DECODEEOL) {

                if (!(octet&0x80)) {
                    //
                    // here we skip all bits until we hit a 1 bit
                    // this happens when the first octet in a line
                    // is all zeroes and we detect that we are
                    // searching for an EOL
                    //
                    continue;
                }

                //
                // this forces the code to pickup the next
                // bit in the stream, which tells whether
                // the next line is encoded in MH or MR compression
                //
                code = DECODEEOL2;
                continue;

            } else if (code == BADRUN) {

                code = 0;
                continue;

            } else {
                b1 = NextChangingElement( prefline, a0, lineWidth, !TiffInstance->Color );
                b1 = NextChangingElement( prefline, b1, lineWidth,  TiffInstance->Color );
            }

            b2 = NextChangingElement( prefline, b1, lineWidth, GetBit(prefline, b1 ) );

            code = ((octet&0x80)>>7) ? Tree[code].Right : Tree[code].Left;

            if (OneDimensional) {

                if (code < 1) {

                    code = (-code);

                    OutputCodeBits( TiffInstance, code );

                    //
                    // the affect of this is to accumulate the runlengths
                    // into a0, causing a0 to be placed on a2 when horizontal
                    // mode is completed/
                    //

                    a0 += code;

                    if (code < 64) {

                        //
                        // terminating code
                        //
                        TiffInstance->Color = !TiffInstance->Color;
                        Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;

                        if (HorzRuns) {

                            HorzRuns -= 1;

                            if (!HorzRuns) {

                                Tree = TwoDecodeTree;
                                OneDimensional = FALSE;

                            }

                        }

                    }

                    code = 0;

                }

                continue;

            }

            if (code == HORZMODE) {

                //
                // horizontal mode occurs when b1-a1 greater than 3
                //

                code= 0;
                HorzRuns = 2;
                OneDimensional = TRUE;
                Tree = TiffInstance->Color ? BlackDecodeTree : WhiteDecodeTree;

            } else if (code == PASSMODE) {

                //
                // pass mode occurs when the position of b2 lies
                // to the left of a1, but a1 cannot be equal to b2.
                //

                code = b2 - a0;
                OutputCodeBits( TiffInstance, code );
                code = 0;
                a0 = b2;

            } else if (code >= VTMODE3N && code <= VTMODE3P) {

                //
                // vertical mode occurs when b1-a1 <= 3
                //

                a1 = b1 - (VTMODE0 - code);
                code = a1 - a0;

                OutputCodeBits( TiffInstance, code );

                code = 0;
                a0 = a1;

                TiffInstance->Color = !TiffInstance->Color;

            }

        }
    }

good_exit:
    FlushBits( TiffInstance );
    TiffInstance->Lines = Lines;

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\winntmig\winntmig.h ===
/*++

  winntmig.h

  Copyright (c) 2001 Microsoft Corporation

  This header file contains definitions and typedefs used for NT->Windows XP Fax Migration.

  Author:
	Jonathan Barner, Dec. 2001

--*/

#ifndef __WINNTMIG_H__
#define __WINNTMIG_H__


#include <windows.h>
#include <setupapi.h>

//
//  Defines
//

typedef enum {
    OS_WINDOWS9X = 0,
    OS_WINDOWSNT4X = 1,
    OS_WINDOWS2000 = 2,
    OS_WINDOWSWHISTLER = 3
} OS_TYPES, *POS_TYPES;


typedef struct {
    CHAR CompanyName[256];
    CHAR SupportNumber[256];
    CHAR SupportUrl[256];
    CHAR InstructionsToUser[1024];
} VENDORINFO, *PVENDORINFO; 

//
//  Migration Info Stuctures
//

typedef struct {
    SIZE_T      Size;
    PCWSTR      StaticProductIdentifier;
    UINT        DllVersion;
    PINT        CodePageArray;
    UINT        SourceOs;
    UINT        TargetOs;
    PCWSTR*     NeededFileList;
    PVENDORINFO VendorInfo;
} MIGRATIONINFOW, *PMIGRATIONINFOW;


LONG 
CALLBACK
QueryMigrationInfoW(
    OUT PMIGRATIONINFOW *ppMigrationInfo
);


LONG
CALLBACK
InitializeSrcW(
    IN PCWSTR WorkingDirectory,
    IN PCWSTR SourceDirectories,
    IN PCWSTR MediaDirectory,
    PVOID     Reserved
);

LONG
CALLBACK
InitializeDstW(
    IN PCWSTR WorkingDirectory,
    IN PCWSTR SourceDirectories,
    PVOID     Reserved
);


LONG 
CALLBACK
GatherUserSettingsW(
    IN PCWSTR AnswerFile,
    IN HKEY   UserRegKey,
    IN PCWSTR UserName,
    PVOID     Reserved
);


LONG 
CALLBACK
GatherSystemSettingsW(
    IN PCWSTR AnswerFile,
    PVOID     Reserved
);

LONG 
CALLBACK
ApplyUserSettingsW(
    IN HINF   UnattendInfHandle,
    IN HKEY   UserRegHandle,
    IN PCWSTR UserName,
    IN PCWSTR UserDomain,
    IN PCWSTR FixedUserName,
    PVOID     Reserved
);

LONG 
CALLBACK
ApplySystemSettingsW(
    IN HINF   UnattendInfHandle,
    PVOID     Reserved
);


#endif  //  __WINNTMIG_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\setup\winntmig\winntmig.cpp ===
/*++
  winntmig.c

  Copyright (c) 2001 Microsoft Corporation

  This module implements an NT migration DLL.

  Author:

    Jonathan Barner, Dec. 2001

--*/

#include "winntmig.h"
#include <faxutil.h>
#include "cvernum.h"
#include "faxsetup.h"
#include "setuputil.h"

//
// Globals
//

VENDORINFO g_VendorInfo = {FAX_VER_COMPANYNAME_STR, NULL, NULL, NULL};

MIGRATIONINFOW g_MigInfoW = {
    sizeof(MIGRATIONINFOW),                 // SIZE_T      Size;
    _T(FAX_VER_PRODUCTNAME_STR),            // PCWSTR      StaticProductIdentifier;
    BUILD,                                  // UINT        DllVersion;
    NULL,                                   // PINT        CodePageArray;
    OS_WINDOWS2000, // SOURCEOS_WINNT,      // UINT        SourceOs;
    OS_WINDOWSWHISTLER, // SOURCEOS_WINNT,  // UINT        TargetOs;
    NULL,                                   // PCWSTR*     NeededFileList;
    &g_VendorInfo                           // PVENDORINFO VendorInfo;
};


LONG 
CALLBACK
QueryMigrationInfoW(
    OUT PMIGRATIONINFOW *ppMigrationInfo
)
/*++
Routine description:
    Provide winnt32 migration information
    
Author:
    Jonathan Barner, Dec. 2001

Arguments:
    ppMigrationInfo         [out]    - Pointer to the structure to return

Return Value:
    ERROR_SUCCESS, ERROR_NOT_INSTALLED, or Win32 error code
--*/
{
    DEBUG_FUNCTION_NAME(_T("QueryMigrationInfoW"));

    if (!ppMigrationInfo)
    {
        DebugPrintEx(DEBUG_ERR, _T("ppMigrationInfo == NULL"));
        return ERROR_INVALID_PARAMETER;
    }
    *ppMigrationInfo = &g_MigInfoW;
    return ERROR_SUCCESS;
}


LONG
CALLBACK
InitializeSrcW(
    IN PCWSTR WorkingDirectory,
    IN PCWSTR SourceDirectories,
    IN PCWSTR MediaDirectory,
    PVOID     Reserved
)
/*++
Routine description:
    Initialize migration DLL. Currently, does nothing.

Author:
    Jonathan Barner, Dec. 2001

Arguments:
    WorkingDirectory    [in]    - Win32 path to the directory that DLL can use to store temporary data.
    SourceDirectories   [in]    - Win32 path to the Destination Windows OS installation files
    MediaDirectory      [in]    - Win32 path to the original media directory
    Reserved            [tbd]   - reserved for future use

Return Value:
    ERROR_SUCCESS, ERROR_NOT_INSTALLED, or Win32 error code
--*/
{
    DEBUG_FUNCTION_NAME(_T("InitializeSrcW"));
    
    return ERROR_SUCCESS;
}


LONG
CALLBACK
InitializeDstW(
    IN PCWSTR WorkingDirectory,
    IN PCWSTR SourceDirectories,
    PVOID     Reserved
)
/*++
Routine description:
    This function is called during Destination Windows OS GUI Mode Setup, 
    right before the upgrade is ready to start. Currently, does nothing.

Author:
    Jonathan Barner, Dec. 2001

Arguments:
    WorkingDirectory    [in] - Win32 path of Setup-supplied working directory available for temporary file storage.
    SourceDirectories   [in] - Win32 path of Destination Windows distribution source directory.
    Reserved            [tbd]- Reserved for future use

Return Value:
    ERROR_SUCCESS or Win32 error code.
--*/
{
    DEBUG_FUNCTION_NAME(_T("InitializeDst"));

    return ERROR_SUCCESS;
}


LONG 
CALLBACK
GatherUserSettingsW(
    IN PCWSTR AnswerFile,
    IN HKEY   UserRegKey,
    IN PCWSTR UserName,
    PVOID     Reserved
)
/*++
Routine description:
    Perform per-user pre-setup tasks, currently nothing.

Author:
    Jonathan Barner, Dec. 2001

Arguments:
    AnswerFile  [in]    - Win32 path to the unattended file
    UserRegKey  [in]    - Registry handle to the private registry settings for the current user
    UserName    [in]    - user name of the current user 
    Reserved    [tbd]   - reserved for future use

Return Value:
    ERROR_SUCCESS, ERROR_NOT_INSTALLED, ERROR_CANCELED or Win32 error code
--*/
{
    DEBUG_FUNCTION_NAME(_T("GatherUserSettingsW"));

    return ERROR_SUCCESS;
}


LONG 
CALLBACK
GatherSystemSettingsW(
    IN PCWSTR AnswerFile,
    PVOID     Reserved
)
/*++
Routine description:
    Checks whether BOS fax server is installed. If so, saves its registry in HKLM/sw/ms/SharedFaxBackup

Author:
    Jonathan Barner, Dec. 2001

Arguments:
    AnswerFile  [in]    - Win32 path to the unattended answer file.
    Reserved    [tbd]   - reserved for future use

Return Value:
    ERROR_SUCCESS, ERROR_NOT_INSTALLED or Win32 error code.
--*/
{
    DWORD	dwRes = ERROR_SUCCESS;
	DWORD	dwFaxInstalled = FXSTATE_NONE;
    
    DEBUG_FUNCTION_NAME(_T("GatherSystemSettingsW"));

    dwRes = CheckInstalledFax(FXSTATE_SBS5_SERVER, &dwFaxInstalled);
    if (dwRes != ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_ERR, _T("CheckInstalledFax() failed, ec=%d"), dwRes);
        return dwRes;
    }

    if (dwFaxInstalled == FXSTATE_NONE)
    {
        DebugPrintEx(DEBUG_MSG, _T("SBS 5.0 Server is not installed, nothing to do"));
        return ERROR_NOT_INSTALLED;
    }
    
    dwRes = CopyRegistrySubkeys(REGKEY_SBS2000_FAX_BACKUP, REGKEY_SBS2000_FAX,TRUE);
    if (dwRes != ERROR_SUCCESS)
    {
        DebugPrintEx(DEBUG_MSG, _T("CopyRegistrySubkeys failed, ec=%d"), dwRes);
        return dwRes;
    }

    return ERROR_SUCCESS;
}


LONG 
CALLBACK
ApplyUserSettingsW(
    IN HINF   UnattendInfHandle,
    IN HKEY   UserRegHandle,
    IN PCWSTR UserName,
    IN PCWSTR UserDomain,
    IN PCWSTR FixedUserName,
    PVOID     Reserved
)
/*++
Routine description:
    This function is called near the end of Destination Windows OS Setup.
    It migrates user-specific data. Currently, does nothing.

Author:
    Jonathan Barner, Dec. 2001

Arguments:
    UnattendInfHandle   [in]    -   Handle to the INF answer file being used for the Upgrade process
    UserRegHandle       [in]    -   Handle to the private registry settings of the User specified in the UserName
    UserName            [in]    -   Name of the User who is in process
    UserDomain          [in]    -   User's Domain
    FixedUserName       [in]    -   Fixed User's Name
    Reserved            [tbd]   -   reserved for future use

Return Value:
    ERROR_SUCCESS or Win32 error code.
--*/
{
    DEBUG_FUNCTION_NAME(_T("ApplyUserSettings"));

    return ERROR_SUCCESS;
}

LONG 
CALLBACK
ApplySystemSettingsW(
    IN HINF   UnattendInfHandle,
    PVOID     Reserved
)
/*++
Routine description:
    This function is called near the end of Destination Windows OS Setup. 
    It migrates system-wide settings of fax. Currently, does nothing.

Author:
    Jonathan Barner, Dec. 2001

Arguments:
    UnattendInfHandle   [in]    - valid INF handle to the Answer File
    Reserved            [tbd]   - reserved for future use

Return Value:
    ERROR_SUCCESS or Win32 error code.
--*/
{
    DEBUG_FUNCTION_NAME(_T("ApplySystemSettings"));

    return ERROR_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\fasttiff.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    fasttiff.h

Abstract:

    This module defines and exposes Fast TIFF structures.

Author:

    Rafael Lisitsa (RafaelL) 14-Aug-1996

Revision History:

--*/



#define  LINE_LENGTH   1728
#define  MAX_COLOR_TRANS_PER_LINE (LINE_LENGTH + 3)


#define  DO_NOT_TEST_LENGTH  0
#define  DO_TEST_LENGTH      1

//  this makes BLACK_COLOR = 1
#define  WHITE_COLOR   0

#define  EOL_FOUND     99

// makeup/terminate
#define  MAKEUP_CODE      1
#define  TERMINATE_CODE   0

// additional useful codes

#define  MAX_TIFF_MAKEUP        40  // The max make-up code for White and Black is 40*(2^6) = 2560.

#define  ERROR_CODE             50
#define  LOOK_FOR_EOL_CODE      51
#define  EOL_FOUND_CODE         52
#define  NO_MORE_RECORDS        53

#define  ERROR_PREFIX            7
#define  LOOK_FOR_EOL_PREFIX     6
#define  PASS_PREFIX             5
#define  HORIZ_PREFIX            4

#define TIFF_SCAN_SEG_END        1
#define TIFF_SCAN_FAILURE        2
#define TIFF_SCAN_SUCCESS        3

#define MINUS_ONE_DWORD          ( (DWORD) 0xffffffff )
#define MINUS_ONE_BYTE           ( (BYTE) 0xff )


typedef struct {
    char        Tail          :4;
    char        Value         :4;
} PREF_BYTE;






BOOL
FindNextEol(
    LPDWORD     lpdwStartPtr,
    BYTE        dwStartBit,
    LPDWORD     lpdwEndPtr,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    BOOL        fTestlength,
    BOOL       *fError
    );
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\encode.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    encode.c

Abstract:

    This file contains functions for encoding (compressing)
    uncompressed 1 bit per pel data into a TIFF data
    stream.  The supported compression algorithms are
    as follows:

        o  Uncompressed (raw)
        o  One dimensional - MH or Modified Huffman
        o  Two dimensional - MR or Modified Read

Environment:

        WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include "tifflibp.h"
#pragma hdrstop




#if TIFFDBG
VOID
PrintRunInfo(
    INT     Mode,
    INT     Run,
    INT     BitLen,
    WORD    Code
    )

/*++

Routine Description:

    Prints run information to standard out.  This
    function is available only if TIFFDBG is TRUE.

Arguments:

    Mode    - Encoding mode: vertical, horizontal, pass, or raw
    Run     - Run length
    BitLen  - Number of bits
    Code    - The actual bits

Return Value:

    None.

--*/

{
    TCHAR BitBuf[16];
    INT i;
    WORD j;


    _tprintf( TEXT("\t") );

    if (Mode) {
        switch( Mode ) {
            case 1:
                _tprintf( TEXT("pass mode ") );
                break;

            case 2:
                _tprintf( TEXT("vertical mode run=%d, "), Run );
                break;

            case 3:
                _tprintf( TEXT("horizontal mode ") );
                break;
        }
    } else {
        _tprintf( TEXT("run=%d, bitlen=%d, "), Run, BitLen );
    }

    j = Code << (16 - BitLen);

    for (i=0; i<BitLen; i++,j<<=1) {
        if (j & 0x8000) {
            BitBuf[i] = TEXT('1');
        } else {
            BitBuf[i] = TEXT('0');
        }
    }
    BitBuf[i] = 0;

    _tprintf( TEXT("value=%04x, bits=%s\n"), Code << (16 - BitLen), BitBuf );
}
#endif


VOID
OutputEOL(
    PTIFF_INSTANCE_DATA TiffInstance,
    BOOL                OneDimensional
    )

/*++

Routine Description:

    Output EOL code at the beginning of each scanline

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    OneDimensional  - TRUE for MH encoding

Return Value:

    None.

--*/

{
    DWORD   length, code;

    //
    // EOL code word always ends on a byte boundary
    //
    code = EOL_CODE;
    length = EOL_LENGTH + ((TiffInstance->bitcnt - EOL_LENGTH) & 7);
    OutputBits( TiffInstance, (WORD) length, (WORD) code );

    //
    // When using MR encoding, append a 1 or 0 depending whether
    // we're the line should be MH or MR encoded.
    //
    if (TiffInstance->CompressionType == TIFF_COMPRESSION_MR) {
        OutputBits( TiffInstance, (WORD) 1, (WORD) (OneDimensional ? 1 : 0) );
    }
}


VOID
OutputRun(
    PTIFF_INSTANCE_DATA TiffInstance,
    INT                 run,
    PCODETABLE          pCodeTable
    )

/*++

Routine Description:

    Output a single run (black or white) using the specified code table

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    run             - Specifies the length of the run
    pCodeTable      - Specifies the code table to use

Return Value:

    None.

--*/

{
    PCODETABLE  pTableEntry;

    //
    // Use make-up code word for 2560 for any runs of at least 2624 pixels
    // This is currently not necessary for us since our scanlines always
    // have 1728 pixels.
    //

    while (run >= 2624) {

        pTableEntry = pCodeTable + (63 + (2560 >> 6));
        OutputBits( TiffInstance, pTableEntry->length, pTableEntry->code );
#if TIFFDBG
        PrintRunInfo( 0, run, pTableEntry->length, pTableEntry->code );
#endif
        run -= 2560;
    }

    //
    // Use appropriate make-up code word if the run is longer than 63 pixels
    //

    if (run >= 64) {

        pTableEntry = pCodeTable + (63 + (run >> 6));
        OutputBits( TiffInstance, pTableEntry->length, pTableEntry->code );
#if TIFFDBG
        PrintRunInfo( 0, run, pTableEntry->length, pTableEntry->code );
#endif
        run &= 0x3f;
    }

    //
    // Output terminating code word
    //

    OutputBits( TiffInstance, pCodeTable[run].length, pCodeTable[run].code );
#if TIFFDBG
        PrintRunInfo( 0, run, pCodeTable[run].length, pCodeTable[run].code );
#endif
}


BOOL
EncodeFaxPageMmrCompression(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth,
    DWORD               ImageHeight,
    DWORD               *DestSize
    )

/*++

Routine Description:

    Encodes a page of TIFF data using 2 dimensional
    TIFF compression.

Arguments:

    TiffInstance    - Pointer to the TIFF instance data
    plinebuf        - Pointer to the input data
    lineWidth       - Width of the line in pixels

Return Value:

    TRUE for success, FALSE for failure

--*/

{
    INT a0, a1, a2, b1, b2, distance;
    LPBYTE prefline;
    BYTE pZeroline[1728/8];
    DWORD Lines=0;
    LPBYTE StartBitbuf = TiffInstance->bitbuf;


    // set first all white reference line

    prefline = pZeroline;

    ZeroMemory( pZeroline, sizeof(pZeroline) );

    // loop til end

    do {


        //
        // Use 2-dimensional encoding scheme
        //


        a0 = 0;
        a1 = GetBit( plinebuf, 0) ? 0 : NextChangingElement(plinebuf, 0, lineWidth, 0 );
        b1 = GetBit( prefline, 0) ? 0 : NextChangingElement(prefline, 0, lineWidth, 0 );

        while (TRUE) {

            b2 = (b1 >= lineWidth) ? lineWidth :
                    NextChangingElement( prefline, b1, lineWidth, GetBit(prefline, b1 ));

            if (b2 < a1) {

                //
                // Pass mode
                //

                OutputBits( TiffInstance, PASSCODE_LENGTH, PASSCODE );
#if TIFFDBG
                PrintRunInfo( 1, 0, PASSCODE_LENGTH, PASSCODE );
                _tprintf( TEXT("\t\ta0=%d, a1=%d, a2=%d, b1=%d, b2=%d\n"), a0, a1, a2, b1, b2 );
#endif
                a0 = b2;

            } else if ((distance = a1 - b1) <= 3 && distance >= -3) {

                //
                // Vertical mode
                //

                OutputBits( TiffInstance, VertCodes[distance+3].length, VertCodes[distance+3].code );
#if TIFFDBG
                PrintRunInfo( 2, a1-a0, VertCodes[distance+3].length, VertCodes[distance+3].code );
                _tprintf( TEXT("\t\ta0=%d, a1=%d, a2=%d, b1=%d, b2=%d\n"), a0, a1, a2, b1, b2 );
#endif
                a0 = a1;

            } else {

                //
                // Horizontal mode
                //

                a2 = (a1 >= lineWidth) ? lineWidth :
                        NextChangingElement( plinebuf, a1, lineWidth, GetBit( plinebuf, a1 ) );

                OutputBits( TiffInstance, HORZCODE_LENGTH, HORZCODE );
#if TIFFDBG
                PrintRunInfo( 3, 0, HORZCODE_LENGTH, HORZCODE );
                _tprintf( TEXT("\t\ta0=%d, a1=%d, a2=%d, b1=%d, b2=%d\n"), a0, a1, a2, b1, b2 );
#endif

                if (a1 != 0 && GetBit( plinebuf, a0 )) {

                    OutputRun( TiffInstance, a1-a0, BlackRunCodes );
                    OutputRun( TiffInstance, a2-a1, WhiteRunCodes );

                } else {

                    OutputRun( TiffInstance, a1-a0, WhiteRunCodes );
                    OutputRun( TiffInstance, a2-a1, BlackRunCodes );
                }

                a0 = a2;
            }

            if (a0 >= lineWidth) {
                Lines++;
                break;
            }

            a1 = NextChangingElement( plinebuf, a0, lineWidth, GetBit( plinebuf, a0 ) );
            b1 = NextChangingElement( prefline, a0, lineWidth, !GetBit( plinebuf, a0 ) );
            b1 = NextChangingElement( prefline, b1, lineWidth, GetBit( plinebuf, a0 ) );
        }

        prefline = plinebuf;
        plinebuf += TiffInstance->BytesPerLine;

    } while (Lines < ImageHeight);

    OutputEOL( TiffInstance, FALSE );

    *DestSize = (DWORD)(TiffInstance->bitbuf - StartBitbuf);
    TiffInstance->Lines = Lines;

    return TRUE;
}


BOOL
EncodeMmrBranding(
    PBYTE               pBrandBits,
    LPDWORD             pMmrBrandBits,
    INT                 BrandHeight,
    INT                 BrandWidth,
    DWORD              *DwordsOut,
    DWORD              *BitsOut
    )

/*++

Routine Description:

   Encode an MMR branding from uncompressed branding bits.
   I don't have enough time to write an optimized
   Uncompressed -> MMR convertor, so the compromise is
   to use the existing Uncompressed Decoder (fast enough)
   and use the optimized MMR Encoder.
   Since we only convert few lines for Branding, it's OK.

--*/

{
    INT         a0, a1, a2, b1, b2, distance;
    LPBYTE      prefline = NULL,pMemAlloc = NULL;
    INT         Lines = 0;
    LPDWORD     lpdwOut = pMmrBrandBits;
    BYTE        BitOut = 0;


    // set first all white reference line
    pMemAlloc  = VirtualAlloc(   NULL,
                                BrandWidth/8,
                                MEM_COMMIT,
                                PAGE_READWRITE );
    if (pMemAlloc == NULL) 
    {
        return FALSE;
    }

    ZeroMemory(pMemAlloc , BrandWidth/8);

    prefline = pMemAlloc;

    // loop til all lines done

    do {

        a0 = 0;
        a1 = GetBit( pBrandBits, 0) ? 0 : NextChangingElement(pBrandBits, 0, BrandWidth, 0 );
        b1 = GetBit( prefline, 0) ? 0 : NextChangingElement(prefline, 0, BrandWidth, 0 );

        while (TRUE) {

            b2 = (b1 >= BrandWidth) ? BrandWidth :
                    NextChangingElement( prefline, b1, BrandWidth, GetBit(prefline, b1 ));

            if (b2 < a1) {

                //
                // Pass mode
                //

                //OutputBits( TiffInstance, PASSCODE_LENGTH, PASSCODE );
                (*lpdwOut) += ( ((DWORD) (PASSCODE_REVERSED)) << BitOut);
                if ( (BitOut = BitOut + PASSCODE_LENGTH ) > 31 ) {
                    BitOut -= 32;
                    *(++lpdwOut) = ( (DWORD) (PASSCODE_REVERSED) ) >> (PASSCODE_LENGTH - BitOut);
                }


#if TIFFDBG
                PrintRunInfo( 1, 0, PASSCODE_LENGTH, PASSCODE );
                _tprintf( TEXT("\t\ta0=%d, a1=%d, a2=%d, b1=%d, b2=%d\n"), a0, a1, a2, b1, b2 );
#endif
                a0 = b2;

            } else if ((distance = a1 - b1) <= 3 && distance >= -3) {

                //
                // Vertical mode
                //

                // OutputBits( TiffInstance, VertCodes[distance+3].length, VertCodes[distance+3].code );
                (*lpdwOut) += ( ( (DWORD) VertCodesReversed[distance+3].code) << BitOut);
                if ( (BitOut = BitOut + VertCodesReversed[distance+3].length ) > 31 ) {
                    BitOut -= 32;
                    *(++lpdwOut) = ( (DWORD) (VertCodesReversed[distance+3].code) ) >> (VertCodesReversed[distance+3].length - BitOut);
                }

#if TIFFDBG
                PrintRunInfo( 2, a1-a0, VertCodes[distance+3].length, VertCodes[distance+3].code );
                _tprintf( TEXT("\t\ta0=%d, a1=%d, a2=%d, b1=%d, b2=%d\n"), a0, a1, a2, b1, b2 );
#endif
                a0 = a1;

            } else {

                //
                // Horizontal mode
                //

                a2 = (a1 >= BrandWidth) ? BrandWidth :
                        NextChangingElement( pBrandBits, a1, BrandWidth, GetBit( pBrandBits, a1 ) );

                // OutputBits( TiffInstance, HORZCODE_LENGTH, HORZCODE );
                (*lpdwOut) += ( ((DWORD) (HORZCODE_REVERSED)) << BitOut);
                if ( (BitOut = BitOut + HORZCODE_LENGTH ) > 31 ) {
                    BitOut -= 32;
                    *(++lpdwOut) = ( (DWORD) (HORZCODE_REVERSED) ) >> (HORZCODE_LENGTH - BitOut);
                }



#if TIFFDBG
                PrintRunInfo( 3, 0, HORZCODE_LENGTH, HORZCODE );
                _tprintf( TEXT("\t\ta0=%d, a1=%d, a2=%d, b1=%d, b2=%d\n"), a0, a1, a2, b1, b2 );
#endif

                if (a1 != 0 && GetBit( pBrandBits, a0 )) {

                    //OutputRun( TiffInstance, a1-a0, BlackRunCodes );
                    //OutputRun( TiffInstance, a2-a1, WhiteRunCodes );
                    OutputRunFastReversed(a1-a0, BLACK, &lpdwOut, &BitOut);
                    OutputRunFastReversed(a2-a1, WHITE, &lpdwOut, &BitOut);

                } else {

                    //OutputRun( TiffInstance, a1-a0, WhiteRunCodes );
                    //OutputRun( TiffInstance, a2-a1, BlackRunCodes );
                    OutputRunFastReversed(a1-a0, WHITE, &lpdwOut, &BitOut);
                    OutputRunFastReversed(a2-a1, BLACK, &lpdwOut, &BitOut);

                }

                a0 = a2;
            }

            if (a0 >= BrandWidth) {
                Lines++;
                break;
            }

            a1 = NextChangingElement( pBrandBits, a0, BrandWidth, GetBit( pBrandBits, a0 ) );
            b1 = NextChangingElement( prefline, a0, BrandWidth, !GetBit( pBrandBits, a0 ) );
            b1 = NextChangingElement( prefline, b1, BrandWidth, GetBit( pBrandBits, a0 ) );
        }

        prefline = pBrandBits;
        pBrandBits += (BrandWidth / 8);

    } while (Lines < BrandHeight);

    *DwordsOut = (DWORD)(lpdwOut - pMmrBrandBits);
    *BitsOut  = BitOut;

    if (!VirtualFree(pMemAlloc,0,MEM_RELEASE))
    {
        return FALSE;
    }
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\fasttiff.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    fasttiff.c

Abstract:

    This module implements fast MMR/MR/MH encoder/decoder/conversion

Author:

    Rafael Lisitsa (RafaelL) 14-Aug-1996

Revision History:

--*/


#include "tifflibp.h"
#pragma hdrstop

#include "fasttiff.h"


#include "math.h"

//#define RDEBUG  1
#ifdef RDEBUG
    // Debugging
    extern BOOL g_fDebGlobOut;
    extern BOOL g_fDebGlobOutColors;
    extern BOOL g_fDebGlobOutPrefix;
#endif

//#define RDEBUGS  1

#ifdef RDEBUGS
    // Debugging
    extern BOOL g_fDebGlobOutS;
#endif


// min code length is 2; max index length is 20
#define  MAX_ENTRIES   10

#define  MAX_CODE_LENGTH 13

#define MIN_EOL_REQUIRED 2

#pragma pack(1)

typedef struct
{
    BYTE        Tail          :4;
    BYTE        TwoColorsSize :4;
} RES_BYTE_LAST;

typedef struct
{
    BYTE        Code          :6;
    BYTE        OneColorSize  :1;
    BYTE        Makeup        :1;
} RES_CODE;


typedef struct
{
    RES_CODE         Record[4];
    RES_BYTE_LAST    Result;
} RES_RECORD;


#pragma pack()

typedef struct
{
    BYTE         ByteRecord[5];
} READ_RECORD;



//
// Read the global (read-only) lookup tables
// from a file.
//
#include "TiffTables.inc"

/*

    I'm keeping the function that builds the tables (now hard-coded in TiffTables.inc) and the function that dumps
    the tables to a file (which created TiffTables.inc) in case there's some need in the future to modify the tables.

void DumpTables ()
{
    int a[1][2] = {{0,0}};
    char sz[MAX_PATH];
    DWORD i;
    DWORD dwBytesWritten;
    HANDLE hFile = CreateFileA ("C:\\tifftables.inc",
                               GENERIC_WRITE,
                               0,
                               NULL,
                               CREATE_NEW,
                               FILE_ATTRIBUTE_NORMAL,
                               NULL);
    if (INVALID_HANDLE_VALUE == hFile)
    {
        return;
    }
    strcpy (sz, "BYTE        gc_GlobTableWhite[32768][5] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 32768; i++)
    {
        sprintf (sz, "{0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x},\n",
                   gc_GlobTableWhite[i][0],
                   gc_GlobTableWhite[i][1],
                   gc_GlobTableWhite[i][2],
                   gc_GlobTableWhite[i][3],
                   gc_GlobTableWhite[i][4]);
        WriteFile (hFile, sz, strlen (sz) , &dwBytesWritten, NULL);
    }

    strcpy (sz, "BYTE        GlobTableBlack[32768][5] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 32768; i++)
    {
        sprintf (sz, "{0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x},\n",
                   GlobTableBlack[i][0],
                   GlobTableBlack[i][1],
                   GlobTableBlack[i][2],
                   GlobTableBlack[i][3],
                   GlobTableBlack[i][4]);
        WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    }

    strcpy (sz, "BYTE        gc_AlignEolTable[32] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 32; i++)
    {
        sprintf (sz, "0x%02x,\n", gc_AlignEolTable[i]);
        WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    }

    strcpy (sz, "PREF_BYTE   gc_PrefTable[128] = {\n");
    WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    for (i=0 ; i < 128; i++)
    {
        sprintf (sz, "{0x%d, 0x%d},\n", (gc_PrefTable[i].Tail), (gc_PrefTable[i].Value));
        WriteFile (hFile, sz, strlen (sz), &dwBytesWritten, NULL);
    }
    CloseHandle (hFile);
}

void
BuildLookupTables(
    DWORD TableLength
    )
{


    PDECODE_TREE   Tree;
    DWORD          CurrentOffsetStart, CurrentOffsetEnd;
    DWORD          CodeLength;


    DWORD          TotalWhiteErrorCodes=0;
    DWORD          TotalWhiteGood=0;
    DWORD          TotalWhiteGoodNoEnd=0;
    DWORD          TotalWhiteGoodPosEOL=0;


    DWORD          TotalBlackErrorCodes=0;
    DWORD          TotalBlackGood=0;
    DWORD          TotalBlackGoodNoEnd=0;
    DWORD          TotalBlackGoodPosEOL=0;


    DWORD          TotalEntries[2][MAX_ENTRIES];

    DWORD          CurrentEntries;



    typedef struct _ENTRY {
        DWORD       Color;
        DWORD       CodeLength;
        DWORD       RunLength;
    } ENTRY;

    ENTRY          Entry[MAX_ENTRIES];

    RES_RECORD     *pRes_Record;
    RES_RECORD     *ResTableWhite = (RES_RECORD *) gc_GlobTableWhite;
    RES_RECORD     *ResTableBlack = (RES_RECORD *) GlobTableBlack;

    DWORD          i, j;
    DWORD          delta;




    DWORD          N, N0;
    DWORD          Color;
    INT            code;

    DWORD          TableSize;
    BYTE           Color1Change;
    BYTE           Color2Change;

    WORD           w1, w2, w3;
    BYTE           b1, b2;



    // build gc_PrefTable

    gc_PrefTable[Prime(0)].Value = LOOK_FOR_EOL_PREFIX;
    gc_PrefTable[Prime(0)].Tail  = 0;
    gc_PrefTable[Prime(1)].Value = ERROR_PREFIX;
    gc_PrefTable[Prime(1)].Tail  = 0;

    gc_PrefTable[Prime(2)].Value = -3;
    gc_PrefTable[Prime(2)].Tail  = 7;
    gc_PrefTable[Prime(3)].Value = 3;
    gc_PrefTable[Prime(3)].Tail  = 7;

    gc_PrefTable[Prime(4)].Value = -2;
    gc_PrefTable[Prime(4)].Tail  = 6;
    gc_PrefTable[Prime(5)].Value = -2;
    gc_PrefTable[Prime(5)].Tail  = 6;

    gc_PrefTable[Prime(6)].Value = 2;
    gc_PrefTable[Prime(6)].Tail  = 6;
    gc_PrefTable[Prime(7)].Value = 2;
    gc_PrefTable[Prime(7)].Tail  = 6;

    for (i=8; i<=15; i++) {
        gc_PrefTable[Prime(i)].Value = PASS_PREFIX;
        gc_PrefTable[Prime(i)].Tail  = 4;
    }

    for (i=16; i<=31; i++) {
        gc_PrefTable[Prime(i)].Value = HORIZ_PREFIX;
        gc_PrefTable[Prime(i)].Tail  = 3;
    }

    for (i=32; i<=47; i++) {
        gc_PrefTable[Prime(i)].Value = -1;
        gc_PrefTable[Prime(i)].Tail  = 3;
    }

    for (i=48; i<=63; i++) {
        gc_PrefTable[Prime(i)].Value = 1;
        gc_PrefTable[Prime(i)].Tail  = 3;
    }

    for (i=64; i<=127; i++) {
        gc_PrefTable[Prime(i)].Value = 0;
        gc_PrefTable[Prime(i)].Tail  = 1;
    }


    // Build Align EOL Table

    for (i=0; i<=4; i++) {
        gc_AlignEolTable[i] = 15;
    }

    for (i=5; i<=12; i++) {
        gc_AlignEolTable[i] = 23;
    }

    for (i=13; i<=20; i++) {
        gc_AlignEolTable[i] = 31;
    }

    for (i=21; i<=28; i++) {
        gc_AlignEolTable[i] = 7;
    }

    for (i=29; i<=31; i++) {
        gc_AlignEolTable[i] = 15;
    }




    // build MH tables


    TableSize = (DWORD) (1<<TableLength);


    for (i=0; i<2; i++) {
        for (j=0; j<MAX_ENTRIES; j++ ) {
            TotalEntries[i][j]=0;
        }
    }

    delta = sizeof(N)*8 - TableLength;


    for (N0=0; N0 < TableSize; N0++)  {

        CurrentEntries = 0;
        Color = WHITE_COLOR;
        N = N0;
        code = 0;

        // endians... 15 bits -> 7+8

        w1 = (WORD) N0;
        b1 = (BYTE) w1;
        b2 = (BYTE) (w1>>8);
        b1 = BitReverseTable[b1];
        b2 = BitReverseTable[b2];
        w2 = ((WORD) b1 ) << 8;
        w3 = (WORD) b2;

        w1 = w3 + w2;
        w1 >>= 1;
        w1 &= 0x7fff;

        pRes_Record = &(ResTableWhite[w1]);

        N <<= delta;

        Tree = WhiteDecodeTree;
        CurrentOffsetStart = 0;
        CurrentOffsetEnd = 0;
        CodeLength = 0;
        Color1Change = 0;
        Color2Change = 0;

        for (j=0; j<TableLength; j++,N<<=1) {

            code = (N & 0x80000000)  ? Tree[code].Right : Tree[code].Left;

            CodeLength++;
            CurrentOffsetEnd++;

            if (CurrentOffsetEnd > TableLength) {
                break;
            }

            if (CodeLength > MAX_CODE_LENGTH) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                TotalWhiteErrorCodes++;
                goto lDoBlack;
            }

            if (code < 1) {

                code = (-code);


                Entry[CurrentEntries].Color = Color;
                Entry[CurrentEntries].CodeLength = CodeLength;
                Entry[CurrentEntries].RunLength = code;

                if (code < 64) {
                    //
                    // terminating code
                    //
                    pRes_Record->Record[CurrentEntries].Makeup = TERMINATE_CODE;
                    pRes_Record->Record[CurrentEntries].Code = (BYTE)code;

                    if (Color1Change) {
                        if (!Color2Change) {
                            Color2Change =  (BYTE) CurrentOffsetEnd;
                        }
                    }
                    else {
                        Color1Change = (BYTE) CurrentOffsetEnd;
                    }

                    Color = 1 - Color;
                    Tree = Color ? BlackDecodeTree : WhiteDecodeTree;
                }
                else {
                    pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                    pRes_Record->Record[CurrentEntries].Code = code >> 6;
                }

                code = 0;
                CodeLength = 0;
                CurrentOffsetStart = CurrentOffsetEnd;

                CurrentEntries++;
                if (CurrentEntries >= 4) {
                    goto lDoBlack;
                }

            }


            if (code == BADRUN) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;
                TotalWhiteErrorCodes++;

                goto lDoBlack;
            }


            if (code == DECODEEOL) {                                          // means if any valid ==> must be EOL
                if (TableLength - CurrentOffsetStart < 12) {
                    if (N != 0)  {
                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                        TotalWhiteErrorCodes++;

                        goto lDoBlack;
                    }
                    else {
                        // should return EOL_AHEAD
                        TotalWhiteGoodPosEOL++;
                        TotalWhiteGood++;
                        TotalEntries[0][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoBlack;
                    }
                }
                else {
                    if (N == 0)  {
                        // should return EOL_AHEAD. Must be FILLER - any length.
                        TotalWhiteGoodPosEOL++;
                        TotalWhiteGood++;
                        TotalEntries[0][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoBlack;
                    }
                    else {
                        while (1) {
                            N <<= 1;
                            CurrentOffsetEnd++;
                            if (N & 0x80000000) {
                                Entry[CurrentEntries].Color = Color;
                                Entry[CurrentEntries].CodeLength = CurrentOffsetEnd - CurrentOffsetStart;
                                Entry[CurrentEntries].RunLength = EOL_FOUND;

                                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                                pRes_Record->Record[CurrentEntries].Code   = EOL_FOUND_CODE;

                                Color = WHITE_COLOR;
                                Tree = WhiteDecodeTree;

                                code = 0;
                                CodeLength = 0;
                                CurrentOffsetStart = CurrentOffsetEnd;

                                CurrentEntries++;
                                if (CurrentEntries >= 4) {
                                    goto lDoBlack;
                                }

                                break;
                            }
                        }
                    }
                }
            }
        }

        if (CurrentEntries < 4) {
            pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
            pRes_Record->Record[CurrentEntries].Code   = NO_MORE_RECORDS;
        }

        TotalWhiteGood++;
        TotalEntries[0][CurrentEntries]++;


lDoBlack:

        // finish the White tails

        pRes_Record->Result.Tail = (BYTE) (CurrentOffsetStart);
        pRes_Record->Result.TwoColorsSize = Color2Change;

        pRes_Record->Record[0].OneColorSize = (Color1Change&0x08) ? 1:0 ;
        pRes_Record->Record[1].OneColorSize = (Color1Change&0x04) ? 1:0 ;
        pRes_Record->Record[2].OneColorSize = (Color1Change&0x02) ? 1:0 ;
        pRes_Record->Record[3].OneColorSize = (Color1Change&0x01) ? 1:0 ;




        // blacks


        CurrentEntries = 0;
        Color = 1 - WHITE_COLOR;
        N = N0;
        code = 0;

        pRes_Record = &(ResTableBlack[w1]);

        N <<= delta;

        Tree = BlackDecodeTree;
        CurrentOffsetStart = 0;
        CurrentOffsetEnd = 0;
        CodeLength = 0;
        Color1Change = 0;
        Color2Change = 0;

        for (j=0; j<TableLength; j++,N<<=1) {

            code = (N & 0x80000000)  ? Tree[code].Right : Tree[code].Left;

            CodeLength++;
            CurrentOffsetEnd++;

            if (CurrentOffsetEnd > TableLength) {
                break;
            }

            if (CodeLength > MAX_CODE_LENGTH) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                TotalBlackErrorCodes++;
                goto lDoLoop;
            }

            if (code < 1) {

                code = (-code);

                Entry[CurrentEntries].Color = Color;
                Entry[CurrentEntries].CodeLength = CodeLength;
                Entry[CurrentEntries].RunLength = code;

                if (code < 64) {
                    //
                    // terminating code
                    //
                    pRes_Record->Record[CurrentEntries].Makeup = TERMINATE_CODE;
                    pRes_Record->Record[CurrentEntries].Code = (BYTE)code;

                    if (Color1Change) {
                        if (!Color2Change) {
                            Color2Change = (BYTE) CurrentOffsetEnd;
                        }
                    }
                    else {
                        Color1Change = (BYTE) CurrentOffsetEnd;
                    }

                    Color = 1 - Color;
                    Tree = Color ? BlackDecodeTree : WhiteDecodeTree;
                }
                else {
                    pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                    pRes_Record->Record[CurrentEntries].Code = code >> 6;
                }

                code = 0;
                CodeLength = 0;
                CurrentOffsetStart = CurrentOffsetEnd;

                CurrentEntries++;
                if (CurrentEntries >= 4) {
                    goto lDoLoop;
                }

            }


            if (code == BADRUN) {
                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;
                TotalBlackErrorCodes++;

                goto lDoLoop;
            }


            if (code == DECODEEOL) {                                          // means if any valid ==> must be EOL
                if (TableLength - CurrentOffsetStart < 12) {
                    if (N != 0)  {
                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = ERROR_CODE;

                        TotalBlackErrorCodes++;

                        goto lDoLoop;
                    }
                    else {
                        // should return EOL_AHEAD
                        TotalBlackGoodPosEOL++;
                        TotalBlackGood++;
                        TotalEntries[1][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoLoop;
                    }
                }
                else {
                    if (N == 0)  {
                        // should return EOL_AHEAD. Must be FILLER - any length.
                        TotalBlackGoodPosEOL++;
                        TotalBlackGood++;
                        TotalEntries[1][CurrentEntries]++;

                        pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                        pRes_Record->Record[CurrentEntries].Code   = LOOK_FOR_EOL_CODE;

                        goto lDoLoop;
                    }
                    else {
                        while (1) {
                            N <<= 1;
                            CurrentOffsetEnd++;
                            if (N & 0x80000000) {
                                Entry[CurrentEntries].Color = Color;
                                Entry[CurrentEntries].CodeLength = CurrentOffsetEnd - CurrentOffsetStart;
                                Entry[CurrentEntries].RunLength = EOL_FOUND;

                                pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
                                pRes_Record->Record[CurrentEntries].Code   = EOL_FOUND_CODE;

                                Color = WHITE_COLOR;
                                Tree = WhiteDecodeTree;

                                code = 0;
                                CodeLength = 0;
                                CurrentOffsetStart = CurrentOffsetEnd;

                                CurrentEntries++;
                                if (CurrentEntries >= 4) {
                                    goto lDoLoop;
                                }

                                break;
                            }
                        }
                    }
                }
            }
        }


        if (CurrentEntries < 4) {
            pRes_Record->Record[CurrentEntries].Makeup = MAKEUP_CODE;
            pRes_Record->Record[CurrentEntries].Code   = NO_MORE_RECORDS;
        }

        TotalBlackGood++;
        TotalEntries[1][CurrentEntries]++;


lDoLoop:

        pRes_Record->Result.Tail = (BYTE) (CurrentOffsetStart);

        pRes_Record->Result.TwoColorsSize = Color2Change;

        pRes_Record->Record[0].OneColorSize = (Color1Change&0x08) ? 1:0 ;
        pRes_Record->Record[1].OneColorSize = (Color1Change&0x04) ? 1:0 ;
        pRes_Record->Record[2].OneColorSize = (Color1Change&0x02) ? 1:0 ;
        pRes_Record->Record[3].OneColorSize = (Color1Change&0x01) ? 1:0 ;

    }


}

WORD Prime(DWORD i)
{
    BYTE  b1 = (BYTE) i;
    BYTE  b2;
    WORD  w1;

    b2 = BitReverseTable[b1];
    b1 = (b2 >> 1)  & 0x7f;

    w1 = (WORD) b1;
    return (w1);
}
*/



/*++
Routine Description:
    Deletes 0-length runs in a color transitions array

Arguments:
    lpwLine [IN][OUT] - pointer to color transitions array
    dwLineWidth       - line width in pixels

Return Value: none
--*/
void DeleteZeroRuns(WORD *lpwLine, DWORD dwLineWidth)
{
    int iRead, iWrite;
    for (iRead=0,iWrite=0; (iRead<MAX_COLOR_TRANS_PER_LINE-1 && lpwLine[iRead]<dwLineWidth) ;)
    {
        // If 2 consecutive entries are identical, they represent a 0-length run.
        // In this case, we want to skip both of them, and thus concatenate the
        // previous and next run.
        if (lpwLine[iRead]==lpwLine[iRead+1])
        {
            iRead += 2;
        }
        else
        {
            _ASSERT(lpwLine[iRead]<lpwLine[iRead+1]);
            lpwLine[iWrite++] = lpwLine[iRead++];
        }
    }
    _ASSERT(iWrite<MAX_COLOR_TRANS_PER_LINE-1);
    // Since we don't copy the last entry, we need to terminate the line explicitly
    lpwLine[iWrite] = (WORD)dwLineWidth;
}

// Add bad lines, add consecutive bad line if needed
// Return value: TRUE if bad line/consec. bad line count is beyond the allowed limits.
__inline BOOL AddBadLine(
    DWORD *BadFaxLines,
    DWORD *ConsecBadLines,
    DWORD LastLineBad,
    DWORD AllowedBadFaxLines,
    DWORD AllowedConsecBadLines)
{
// hack: Don't want "Entering: AddBadLine" message
#ifdef ENABLE_LOGGING
    LPCTSTR faxDbgFunction=_T("AddBadLine");
#endif // ENABLE_LOGGING

    (*BadFaxLines)++;
    if (LastLineBad)
    {
        (*ConsecBadLines)++;
    }
    if (*BadFaxLines > AllowedBadFaxLines ||
        *ConsecBadLines > AllowedConsecBadLines)
    {
        DebugPrintEx(DEBUG_ERR, _T("Too many bad lines. BadFaxLines=%d ConsecBadLines=%d"),
                     *BadFaxLines, *ConsecBadLines);
        return FALSE;
    }
    return TRUE;
}

// Increases ResBit by amount. IF ResBit overflows beyond DWORD limit,
// Increases lpdwResPtr accordingly.
// Note: Limited to 0 <= amount <= 32 only.
__inline void AdvancePointerBit(LPDWORD *lplpdwResPtr, BYTE *ResBit, BYTE amount)
{
    _ASSERT((0<=amount) && (amount<=32));
    (*ResBit) += amount;
    if ((*ResBit) > 31)
    {
        (*lplpdwResPtr)++;
        (*ResBit) -= 32;
    }
}

typedef enum {
    TIFF_LINE_OK,               // MMR: finished scanning line (saw dwLineWidth pixels)
                                // MR: saw exactly dwLineWidth pixels, then EOL
    TIFF_LINE_ERROR,            // encountered error in line
    TIFF_LINE_END_BUFFER,       // error: passed lpEndPtr
    TIFF_LINE_TOO_MANY_RUNS,    // error: passed pRefLine/pCurLine size limit
    TIFF_LINE_EOL               // MMR only: saw EOL
} TIFF_LINE_STATUS;

/*++
Routine Description:
    Reads an MR/MMR-encoded line into color trans. array

Arguments:
    lplpdwResPtr    [in/out] pointer to MR-encoded line. Updated to point to start of next line.
    lpResBit        [in/out] bit inside DWORD pointed by *lplpdwResPtr.
    pRefLine        [in]     Reference line, in color transition array format Maximum
                             array size is MAX_COLOR_TRANS_PER_LINE.
    pCurLine        [out]    Current line, in color transition array format Maximum
                             array size is MAX_COLOR_TRANS_PER_LINE.
    lpEndPtr        [in]     End of buffer
    fMMR            [in]     Specifies whether we're reading MR or MMR data:
    dwLineWidth     [in]     Line width in pixels.

Return Value:
    One of TIFF_LINE_* constants, see above for description
--*/


TIFF_LINE_STATUS ReadMrLine(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    WORD                *pRefLine,
    WORD                *pCurLine,
    LPDWORD              lpEndPtr,
    BOOL                 fMMR,
    DWORD                dwLineWidth
)
{
    LPDWORD             lpdwResPtr = *lplpdwResPtr;
    BYTE                ResBit = *lpResBit;

    BYTE                CColor, RColor, RColor1;
    WORD                RIndex, CIndex;
    DWORD               dwIndex;
    WORD                a0;
    WORD                RValue, RValue1;
    WORD                RunLength;

    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable;
    short               iCode;
    BYTE                bShift;

    // for horiz mode only
    BYTE                CountHoriz;
    BOOL                fFirstResult;
    PBYTE               pByteTail;
    PBYTE               pByteTable0;
    BYTE                MakeupT;
    WORD                CodeT;
    BOOL                Color;
    DWORD               i;

    TIFF_LINE_STATUS    RetVal = TIFF_LINE_ERROR;

// hack: Don't want "Entering: ReadMrLine" message
#ifdef ENABLE_LOGGING
    LPCTSTR faxDbgFunction=_T("ReadMrLine");
#endif // ENABLE_LOGGING

    RIndex   =  0;
    RValue   =  *pRefLine;
    RColor   =  0;

    a0        = 0;
    CIndex    = 0;
    CColor    = 0;
    RunLength = 0;

    do
    {
        if (ResBit <= 25 )
        {
            dwIndex = (*lpdwResPtr) >> ResBit;
        }
        else
        {
            dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
        }

        dwIndex &= 0x0000007f;

        pByteTable = (BYTE *) (&gc_PrefTable[dwIndex]);
        // work-around of a PPC compiler bug: incorrect CMP with signed char. NT 1381. 8/31/96. RafaelL
        iCode = ( (short) ((char) (*pByteTable)) ) >> 4;
        bShift = (*pByteTable) & 0x0f;

        if (iCode < 4)
        {
            // VERTICAL -3...+3
            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MAX_COLOR_TRANS_PER_LINE)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        goto lFound;
                    }
                }
                RetVal = TIFF_LINE_TOO_MANY_RUNS;
                goto exit;
lFound:
                RColor = RIndex & 1;
            }

            if (CColor == RColor)
            {
                a0 = RValue + iCode;
            }
            else
            {
                if (RValue == dwLineWidth)
                {
                    a0 = RValue + iCode;
                }
                else
                {
                    a0 = *(pRefLine + RIndex + 1) + iCode;
                }
            }

            // sanity check
            if ( ((a0 <= RunLength) && (RunLength!=0)) || (a0 > dwLineWidth) )
            {
                RetVal = TIFF_LINE_ERROR;
                goto exit;
            }

            *(pCurLine + (CIndex++) ) = a0;
            if ( CIndex >= MAX_COLOR_TRANS_PER_LINE)
            {
                RetVal = TIFF_LINE_TOO_MANY_RUNS;
                goto exit;
            }

            RunLength = a0;
            CColor = 1 - CColor;
        }
        else if (iCode == HORIZ_PREFIX)
        {
            AdvancePointerBit(&lpdwResPtr, &ResBit, bShift);
            Table = CColor ? TableBlack : TableWhite;
            Color = CColor;
            CountHoriz = 0;
            fFirstResult = 1;

            // 1-D Table look-up loop
            do
            {
                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }
                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;
                pByteTable0 = pByteTable;

                // All bytes

                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT <= MAX_TIFF_MAKEUP)
                        {
                            RunLength += (CodeT << 6);
                            // sanity check
                            if (RunLength > dwLineWidth)
                            {
                                RetVal = TIFF_LINE_ERROR;
                                goto exit;
                            }
                        }

                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndexHoriz;
                        }

                        else
                        {
                            // ERROR: LOOK_FOR_EOL_CODE, EOL_FOUND_CODE, ERROR_CODE
                            RetVal = TIFF_LINE_ERROR;
                            goto exit;
                        }
                    }
                    else
                    {
                        //
                        // terminating code
                        //
                        RunLength += CodeT;
                        if (RunLength > dwLineWidth)
                        {
                            RetVal = TIFF_LINE_ERROR;
                            goto exit;
                        }

                        *(pCurLine + (CIndex++) ) = RunLength;

                        if ( CIndex >= MAX_COLOR_TRANS_PER_LINE )
                        {
                            RetVal = TIFF_LINE_TOO_MANY_RUNS;
                            goto exit;
                        }

                        Color = 1 - Color;
                        if (++CountHoriz >= 2)
                        {
                            if (fFirstResult)
                            {
                                bShift =  (*pByteTail & 0xf0) >> 4;
                            }
                            else
                            {
                                // rare case will take time
                                bShift =   ( ( (BYTE) (*pByteTable0++) & 0x40) >> 3 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 4 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 5 );
                                bShift +=  ( ( (BYTE) (*pByteTable0++) & 0x40) >> 6 );
                            }
                            goto lNextPrefix;
                        }
                    }
                    pByteTable++;
                }
lNextIndexHoriz:
                if (Color != CColor)
                {
                    fFirstResult = 0;
                }

                Table = Color ? TableBlack : TableWhite;
                AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
            } while (lpdwResPtr <= lpEndPtr);
            RetVal = TIFF_LINE_END_BUFFER;
            goto exit;
        }

        else if (iCode == PASS_PREFIX)
        {
            if ( (RunLength >= RValue) && (RunLength != 0) )
            {
                while (++RIndex < MAX_COLOR_TRANS_PER_LINE)
                {
                    if ( (RValue = *(pRefLine + RIndex) ) > RunLength )
                    {
                        goto lFound2;
                    }
                }
                RetVal = TIFF_LINE_TOO_MANY_RUNS;
                goto exit;
            }
lFound2:
            RColor = RIndex & 1;

            if (RValue != dwLineWidth)
            {
                RValue1 = *(pRefLine + RIndex + 1 );

                RColor1 = 1 - RColor;

                if ( (RValue1 != dwLineWidth) && (RColor1 == CColor) )
                {
                    a0 = *(pRefLine + RIndex + 2);
                }
                else
                {
                    a0 = RValue1;
                }
            }
            else
            {
                a0 = (WORD)dwLineWidth;
            }

            // sanity check
            if ( ((a0 <= RunLength) && (RunLength!=0)) || (a0 > dwLineWidth) )
            {
                RetVal = TIFF_LINE_ERROR;
                goto exit;
            }
            RunLength = a0;
        }
        else if (iCode == LOOK_FOR_EOL_PREFIX)
        {
            if (fMMR)
            {   // for MMR, allow EOL after any number of pixels
                RetVal = TIFF_LINE_EOL;
            }
            else
            {   // for MR files, EOL must come after exactly dwLineWidth pixels
                if (RunLength == dwLineWidth)
                {
                    RetVal = TIFF_LINE_OK;
                }
                else
                {
                    RetVal = TIFF_LINE_ERROR;
                }
            }
            goto exit;
        }
        else
        {
            RetVal = TIFF_LINE_ERROR;
            goto exit;
        }

lNextPrefix:
        AdvancePointerBit(&lpdwResPtr, &ResBit, bShift);

        // for MMR files, if we saw dwLineWidth pixels, it's the end of the line
        if (fMMR && (RunLength == dwLineWidth))
        {
            RetVal = TIFF_LINE_OK;
            goto exit;

        }
    } while (lpdwResPtr <= lpEndPtr);
    RetVal = TIFF_LINE_END_BUFFER;

exit:
    if (RetVal!=TIFF_LINE_OK && RetVal!=TIFF_LINE_EOL)
    {
        DebugPrintEx(DEBUG_WRN, _T("Returning %d, RunLength=%d"), RetVal, RunLength);
        SetLastError (ERROR_FILE_CORRUPT);
    }
    *lpResBit = ResBit;
    *lplpdwResPtr = lpdwResPtr;
    return RetVal;
}


int
ScanMhSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    DWORD                lineWidth
    )
{
    LPDWORD             lpdwResPtr = *lplpdwResPtr;
    BYTE                ResBit = *lpResBit;

    DWORD               dwIndex;
    PBYTE               pByteTable,  pByteTail;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    WORD                CodeT;
    BYTE                MakeupT;
    WORD                RunLength=0;
    BOOL                Color;
    DWORD               i;
    BOOL                fTestLength;
    DWORD               EolCount = 0; // The caller has already found the first EOL
                                      // But this counter counts pairs (two EOL's consecutive)
    BOOL                LastLineBad = FALSE;
    BOOL                fError;
    BOOL                RetCode;
    BOOL                fAfterMakeupCode = FALSE;

    DEBUG_FUNCTION_NAME(TEXT("ScanMhSegment"));

    Table = TableWhite;
    Color = WHITE_COLOR;


    //
    // EOL loop
    //
    do
    {
        // Table look-up loop
        do
        {
            if (ResBit <= 17)
            {
                dwIndex = (*lpdwResPtr) >> ResBit;
            }
            else
            {
                dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
            }

            dwIndex &= 0x00007fff;

            pByteTable = Table + (5*dwIndex);
            pByteTail  = pByteTable+4;

            for (i=0; i<4; i++)
            {
                // We are handling 4 bytes (32 bits in this loop)

                MakeupT = *pByteTable & 0x80;        // 0000100000000000
                CodeT   = (WORD) *pByteTable & 0x3f; // 0000011111111111

                if (MakeupT)
                {
                    if (CodeT <= MAX_TIFF_MAKEUP)
                    {
                        // This is normal makeup code, just multiply it by 64
                        RunLength += (CodeT << 6);

                        if (RunLength > lineWidth)
                        {  // The line is too long
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        EolCount=0;
                        fAfterMakeupCode = TRUE;
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                        }
#endif
                    }

                    else if (CodeT == NO_MORE_RECORDS)
                    {
                        goto lNextIndex;
                    }

                    else if (CodeT == LOOK_FOR_EOL_CODE)
                    {
                        fTestLength =  DO_TEST_LENGTH;
                        AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
                        goto lFindNextEOL;
                    }

                    else if (CodeT == EOL_FOUND_CODE)
                    {
#ifdef RDEBUG
                        _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif
                        if ((RunLength != lineWidth) || fAfterMakeupCode)
                        {
                            if (RunLength != 0)
                            {
                                if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                                {
                                    goto bad_exit;
                                }
                            }
                            else
                            {
                                // RunLength is 0
                                EolCount++;
                                if (EolCount >= MIN_EOL_REQUIRED)
                                {
                                    goto good_exit;
                                }
                            }
                        }
                        else
                        {
                            LastLineBad = FALSE;
                            *ConsecBadLines = 0;
                        }

                        (*Lines)++;
                        RunLength = 0;
                        fAfterMakeupCode = FALSE;
                        // Check whether we've gone past the watermark
                        if (lpdwResPtr > EndPtr)
                        {   // lpdwResPtr/ResBit point exactly to the EOL. Good time to stop scanning!
                            goto scan_seg_end;
                        }
                        Table = TableWhite; // The next line will start in White color
                        Color = WHITE_COLOR;
                    }
                    else if (CodeT == ERROR_CODE)
                    {
                        if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                        {
                            goto bad_exit;
                        }

                        fTestLength =  DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;
                    }
                    else
                    {
                        DebugPrintEx(
                            DEBUG_ERR,
                            TEXT("ERROR: WRONG code: index=%04x"),
                            dwIndex);
                        goto bad_exit;
                    }
                } // end of case "MakeupT"
                else
                {
                    // terminating code
                    RunLength += CodeT;
                    if (RunLength > lineWidth)
                    {
                        // If the line is too much long, then we look for next line (EOL), it's waste of time
                        // to continue with the scanning of the current line.
                        fTestLength =  DO_NOT_TEST_LENGTH;
                        goto lFindNextEOL;
                    }

                    EolCount=0;
                    fAfterMakeupCode = FALSE;

#ifdef RDEBUG
                    if (Color)
                    {
                        _tprintf( TEXT ("b%d "), (CodeT)  );
                    }
                    else
                    {
                        _tprintf( TEXT ("w%d "), (CodeT)  );
                    }
#endif
                    Color = 1 - Color;
                }
                pByteTable++; // Move to the next 'Record'
            } // End of the for loop

lNextIndex:

            Table = Color ? TableBlack : TableWhite;
            AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
        } while (lpdwResPtr <= EndBuffer);  // End of table lookup loop
        // if we got here it means that line is longer than 4K.
        goto bad_exit;

lFindNextEOL:

#ifdef RDEBUG
        _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif

        if ((RunLength != lineWidth) || fAfterMakeupCode)
        {
            if (RunLength != 0)
            {
                if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                {
                    goto bad_exit;
                }
            }
            else
            {
                // RunLength is 0
                EolCount++;

                if (EolCount >= MIN_EOL_REQUIRED)
                {
                    goto good_exit; // This mean End-of-page
                }

            }
        }
        else
        {
            (*Lines)++;
            *ConsecBadLines=0;
        }

        RunLength = 0;
        fAfterMakeupCode = FALSE;

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) )
        {
            goto bad_exit;
        }

        if (fTestLength == DO_TEST_LENGTH && fError)
        {
            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
            {
                goto bad_exit;
            }
        }

        Table = TableWhite;
        Color = WHITE_COLOR;

    } while (lpdwResPtr <= EndPtr);   // End of EOL loop

scan_seg_end:
    RetCode = TIFF_SCAN_SEG_END;
    goto l_exit;

bad_exit:
    RetCode = TIFF_SCAN_FAILURE;
    goto l_exit;


good_exit:
    RetCode = TIFF_SCAN_SUCCESS;
    goto l_exit;

l_exit:

    *lplpdwResPtr = lpdwResPtr;
    *lpResBit = ResBit;

    return (RetCode);
}   // ScanMhSegment

//
//  We want to stop scanning if either:
//      1. we reached EOP
//      2. we reached last 1D line before EndPtr
//


BOOL
ScanMrSegment(
    LPDWORD             *lplpdwResPtr,
    BYTE                *lpResBit,
    LPDWORD              EndPtr,
    LPDWORD              EndBuffer,
    DWORD               *Lines,
    DWORD               *BadFaxLines,
    DWORD               *ConsecBadLines,
    DWORD                AllowedBadFaxLines,
    DWORD                AllowedConsecBadLines,
    BOOL                *f1D,
    DWORD                lineWidth

    )
{
    LPDWORD             lpdwResPtr = *lplpdwResPtr;
    BYTE                ResBit = *lpResBit;

    DWORD               i;
    DWORD               dwTemp;
    DWORD               EolCount=0; // The caller has already found the first EOL
                                    // But this counter counts pairs (two EOL's consecutive)
    BOOL                Color;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    PBYTE               Table;
    PBYTE               pByteTable,  pByteTail;
    BYTE                MakeupT;
    WORD                CodeT;
    WORD                RunLength=0;

    DWORD               dwIndex;
    BOOL                fTestLength;
    BOOL                fError;

    WORD                Line1Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                Line2Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                *pRefLine = Line1Array;
    WORD                *pCurLine = Line2Array;

    WORD                RIndex;
    BYTE                Num2DLines = 0;
    BYTE                Count2D = 0;
    WORD                *pTmpSwap;
    BOOL                LastLineBad = FALSE;
    BOOL                RetCode;
    LPDWORD             lpdwResPtrLast1D = *lplpdwResPtr;
    BYTE                ResBitLast1D = *lpResBit;
    BOOL                fAfterMakeupCode = FALSE;
    
    TIFF_LINE_STATUS    RetVal = TIFF_LINE_ERROR;

    DEBUG_FUNCTION_NAME(TEXT("ScanMrSegment"));

    Table = TableWhite;
    Color = WHITE_COLOR;

    //
    // EOL-loop
    //

    do
    {
        dwTemp = (*lpdwResPtr) & (0x00000001 << ResBit );

        if (*f1D || dwTemp)
        {
//l1Dline:

#ifdef RDEBUG
            _tprintf( TEXT (" Start 1D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
            if (! dwTemp)
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ERROR f1D dwResPtr=%lx bit=%d"),
                    lpdwResPtr,
                    ResBit);

                if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                {
                    goto bad_exit;
                }

                AdvancePointerBit(&lpdwResPtr, &ResBit, 1);

                fTestLength = DO_NOT_TEST_LENGTH;
                *f1D = 1;
                goto lFindNextEOL;
            }
            //
            // Remember
            //
            lpdwResPtrLast1D = lpdwResPtr;
            ResBitLast1D = ResBit;


            // decode 1D line starting ResBit+1

            AdvancePointerBit(&lpdwResPtr, &ResBit, 1);

            RIndex = 0;
            RunLength = 0;
            fAfterMakeupCode = FALSE;
            
            Table = TableWhite;
            Color = WHITE_COLOR;

            // 1-D Table look-up loop
            do
            {
                if (ResBit <= 17)
                {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else
                {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;

                // All bytes

                for (i=0; i<4; i++)
                {
                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT)
                    {
                        if (CodeT <= MAX_TIFF_MAKEUP)
                        {
                            RunLength += (CodeT << 6);

                            if (RunLength > lineWidth)
                            {
                                if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            EolCount=0;
                            fAfterMakeupCode = TRUE;
#ifdef RDEBUG
                            if (Color)
                            {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else
                            {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS)
                        {
                            goto lNextIndex1D;
                        }

                        else if (CodeT == LOOK_FOR_EOL_CODE)
                        {
                            // end of our line AHEAD
                            if ((RunLength == lineWidth) && !fAfterMakeupCode)
                            {
                                EolCount = 0; // we are in the middle of a line
                                *f1D = 0;
                                Count2D = 0;
                                (*Lines)++;

                                fTestLength = DO_TEST_LENGTH;
                                AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);

                                goto lFindNextEOL;

                            }
                            else if (RunLength != 0)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 1D RunLength=%ld"),
                                    RunLength);

                                if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;

                            }
                            else
                            {
                                // zero RunLength
                                EolCount++;

                                if (EolCount >= MIN_EOL_REQUIRED)
                                {
                                    goto good_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_TEST_LENGTH;
                                AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);

                                goto lFindNextEOL;
                            }
                        } // end of "LOOK_FOR_EOL_CODE"

                        else if (CodeT == EOL_FOUND_CODE)
                        {
#ifdef RDEBUG
                            _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif
                            AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);

                            if ((RunLength == lineWidth) && !fAfterMakeupCode)
                            {
                                EolCount = 0;
                                *f1D = 0;
                                Count2D = 0;
                                (*Lines)++;

                                goto lAfterEOL;

                            }
                            else if (RunLength != 0)
                            {
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("ERROR 1D Runlength EOLFOUND"));
                                if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                                {
                                    goto bad_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;
                                goto lAfterEOL;
                            }
                            else
                            {
                                // zero RunLength
                                EolCount++;
                                if (EolCount >= MIN_EOL_REQUIRED)
                                {
                                    goto good_exit;
                                }

                                *f1D = 1;
                                Count2D = 0;
                                goto lAfterEOL;
                            }

                        } // end of "EOL_FOUND_CODE"

                        else if (CodeT == ERROR_CODE)
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR CODE 1D dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);
                            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                            {
                                goto bad_exit;
                            }

                            *f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
                        else
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR: WRONG code: index=%04x"),
                                dwIndex);
                            goto bad_exit;
                        }
                    }

                    else
                    {
                        //
                        // terminating code
                        //
                        RunLength += CodeT;

                        if (RunLength > lineWidth)
                        {
                            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                            {
                                goto bad_exit;
                            }

                            *f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        *(pRefLine + (RIndex++)) = RunLength;
                        fAfterMakeupCode = FALSE;

                        if (RIndex >= MAX_COLOR_TRANS_PER_LINE )
                        {
                            DebugPrintEx(
                                DEBUG_ERR,
                                TEXT("ERROR 1D TOO MANY COLORS dwResPtr=%lx bit=%d"),
                                lpdwResPtr,
                                ResBit);

                            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
                            {
                                goto bad_exit;
                            }

                            *f1D = 1;
                            Count2D = 0;

                            fTestLength = DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
#ifdef RDEBUG
                        if (Color)
                        {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else
                        {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                    }
                    pByteTable++;
                 } // end of FOR

lNextIndex1D:
                Table = Color ? TableBlack : TableWhite;
                AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
            } while (lpdwResPtr <= EndBuffer);
            goto bad_exit;
        }


//l2Dline:
        // should be 2D

#ifdef RDEBUG
        _tprintf( TEXT ("\n Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

        if ( (*lpdwResPtr) & (0x00000001 << ResBit) )
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ERROR Start 2D dwResPtr=%lx bit=%d"),
                lpdwResPtr,
                ResBit);
            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
            {
                goto bad_exit;
            }

            *f1D =  1;
            Count2D = 0;
            goto lAfterEOL;
        }
        AdvancePointerBit(&lpdwResPtr, &ResBit, 1);

        RetVal = ReadMrLine(&lpdwResPtr, &ResBit, pRefLine, pCurLine, EndBuffer-1, FALSE, lineWidth);
        switch (RetVal)
        {
        case TIFF_LINE_ERROR:
        case TIFF_LINE_TOO_MANY_RUNS:
            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
            {
                goto bad_exit;
            }

            *f1D = 1;
            Count2D = 0;

            fTestLength = DO_NOT_TEST_LENGTH;
            break;

        case TIFF_LINE_END_BUFFER:
            // This means a single line went after EndBuffer, meaning it's longer than 4KB
            // (otherwise, we would've quit after passing EndPtr)
            goto bad_exit;

        case TIFF_LINE_OK:
            if (++Count2D >= Num2DLines)
            {
                Count2D = 0;
                *f1D = 0;   // relax HiRes/LoRes 2D lines per 1D rules - HP Fax does 3 2D-lines per 1 1D-line in LoRes.
            }

            pTmpSwap = pRefLine;
            pRefLine = pCurLine;
            pCurLine = pTmpSwap;

            fTestLength = DO_TEST_LENGTH;
            *f1D = 0;
            (*Lines)++;
            break;
        default:   // This includes TIFF_LINE_EOL - should happen on fMMR=TRUE only
            _ASSERT(FALSE);
            goto bad_exit;
        } // switch (RetVal)

lFindNextEOL:

        RunLength = 0;

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) )
        {
            goto bad_exit;
        }

        if ( (fTestLength == DO_TEST_LENGTH) && fError )
        {
            if (!AddBadLine(BadFaxLines, ConsecBadLines, LastLineBad, AllowedBadFaxLines, AllowedConsecBadLines))
            {
                goto bad_exit;
            }
        }


lAfterEOL:
        ;

#ifdef RDEBUG
        _tprintf( TEXT ("\n After EOL RIndex=%d dwResPtr=%lx bit=%d Ref= \n "), RIndex, lpdwResPtr, ResBit);
        for (i=0; i<RIndex; i++)
        {
            _tprintf( TEXT ("%d, "), *(pRefLine+i) );
        }
#endif
    } while (lpdwResPtr <= EndPtr);    // Enf of EOL loop

    RetCode = TIFF_SCAN_SEG_END;
    goto l_exit;

bad_exit:

    RetCode = TIFF_SCAN_FAILURE;
    goto l_exit;

good_exit:

    RetCode = TIFF_SCAN_SUCCESS;
    goto l_exit;

l_exit:

    *lplpdwResPtr = lpdwResPtrLast1D;
    *lpResBit = ResBitLast1D;

    return (RetCode);
}   // ScanMrSegment


// Write a byte-aligned EOL at lpdwOut/BitOut.
__inline void OutputAlignedEOL(
    LPDWORD *lpdwOut,
    BYTE    *BitOut )
{
    if (*BitOut <= 4)
    {
        **lpdwOut = **lpdwOut + 0x00008000;
        *BitOut = 16;
    }
    else if (*BitOut <= 12)
    {
        **lpdwOut = **lpdwOut + 0x00800000;
        *BitOut = 24;
    }
    else if (*BitOut <= 20)
    {
        **lpdwOut = **lpdwOut + 0x80000000;
        *BitOut = 0;
        (*lpdwOut)++;
    }
    else if (*BitOut <= 28)
    {
        *(++(*lpdwOut)) = 0x00000080;
        *BitOut = 8;
    }
    else
    {
        *(++(*lpdwOut)) = 0x00008000;
        *BitOut = 16;
    }
}

/*++
Routine Description:
    Write an MH-encoded line from color trans. array

Arguments:
    pCurLine        [in]     Line, in color transition array format. Maximum
                             array size is MAX_COLOR_TRANS_PER_LINE.
    lplpdwOut       [in/out] pointer to out MH-encoded line to. Updated to
                             point to start of next line.
    lpResBit        [in/out] bit inside DWORD pointed by *lplpdwOut.
    lpdwOutLimit    [in]     pointer to end of output buffer.
    dwLineWidth     [in]     Line width in pixels.

Return Value:
    TRUE - success, *pBitOut and *lplpdwOut are updated
    FALSE - failure, *pBitOut and *lplpdwOut are unchanged
 --*/

BOOL OutputMhLine(
    WORD       *pCurLine,
    DWORD     **lplpdwOut,
    BYTE       *pBitOut,
    LPDWORD     lpdwOutLimit,
    DWORD       dwLineWidth
)
{
    WORD            PrevValue  = 0;
    BOOL            CurColor = WHITE_COLOR;
    WORD            CurPos;
    WORD            CurValue;
    WORD            CurRun;
    PCODETABLE      pCodeTable;
    PCODETABLE      pTableEntry;
    DWORD          *lpdwOut = *lplpdwOut;
    BYTE            BitOut = *pBitOut;

    for (CurPos=0;  CurPos < MAX_COLOR_TRANS_PER_LINE; CurPos++)
    {
        if (lpdwOut >= lpdwOutLimit)
        {
            SetLastError(ERROR_INSUFFICIENT_BUFFER);
            return FALSE;
        }

        CurValue = *(pCurLine + CurPos);
        CurRun   = CurValue - PrevValue;

        pCodeTable = CurColor ? BlackRunCodesReversed : WhiteRunCodesReversed;

        // output makeup code if exists
        if (CurRun >= 64)
        {
            pTableEntry = pCodeTable + (63 + (CurRun >> 6));

            *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

            if (BitOut + pTableEntry->length > 31)
            {
                *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
            }

            BitOut += pTableEntry->length;
            if (BitOut > 31)
            {
                BitOut -= 32;
            }

            CurRun &= 0x3f;
        }

        // output terminating code always
        pTableEntry = pCodeTable + CurRun;

        *lpdwOut = *lpdwOut + (((DWORD) (pTableEntry->code)) << BitOut);

        if (BitOut + pTableEntry->length > 31)
        {
            *(++lpdwOut) = (((DWORD) (pTableEntry->code)) >> (32 - BitOut) );
        }

        BitOut += pTableEntry->length;
        if (BitOut > 31)
        {
            BitOut -= 32;
        }

        if ( CurValue == dwLineWidth)
        {
            break;
        }

        PrevValue = CurValue;
        CurColor  = 1 - CurColor;
    }
    *pBitOut = BitOut;
    *lplpdwOut = lpdwOut;
    return TRUE;
}


/*++
Routine Description:
    Converts a page fom MMR to MH/MR, optionally reducing resolution by
    removing every other line

Arguments:
    hTiff                [in/out]  TIFF handle
    lpdwOutputBuffer     [out]     buffer for converted image
    lpdwSizeOutputBuffer [in/out]  in: size of buffer
                                   out: size of image
    dwCompressionType    [in]      destination compression, either
                                   TIFF_COMPRESSION_MH or TIFF_COMPRESSION_MR
    Num2DLines           [in]      (TIFF_COMPRESSION_MR only) number of consecutive 2D
                                   lines allowed in output
    fReduceTwice         [in]      Whether to skip every other line or not

Return Value:
    TRUE - success. *lpdwSizeOutputBuffer contains image size
    FALSE - failure. To get extended error information, call GetLastError.
--*/

BOOL ConvMmrPage(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    DWORD               dwCompressionType,
    BYTE                Num2DLines,
    BOOL                fReduceTwice
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    PBYTE               plinebuf;
    DWORD               lineWidth;

    LPDWORD             EndPtr;

    WORD                Line1Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                Line2Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;

    BYTE                BitOut;
    DWORD               *lpdwOut;
    DWORD               Lines=0;

    LPDWORD             lpdwOutLimit;

    // for TIFF_COMPRESSION_MR, fReduceTwice=FALSE
    BYTE                dwNewBitOut;
    BYTE                dwPrevResBit;
    BYTE                dw1,
                        dw2;
    BOOL                f1D = 1;

    BYTE                Count2D;
    DWORD               dwTmp;
    DWORD               *lpdwPrevResPtr;

    // for TIFF_COMPRESSION_MR, fReduceTwice=TRUE
    DWORD               State;
    WORD                LineMhArray[MAX_COLOR_TRANS_PER_LINE];
    WORD                *pMhLine = LineMhArray;

    TIFF_LINE_STATUS    RetVal = TIFF_LINE_ERROR;

    DEBUG_FUNCTION_NAME(TEXT("ConvMmrPage"));
    DebugPrintEx(DEBUG_MSG, TEXT("Compression=%s, Num2DLines=%d, fReduceTwice=%d"),
        (dwCompressionType==TIFF_COMPRESSION_MH) ? TEXT("MH"):TEXT("MR"),
        Num2DLines, fReduceTwice);

    // start Pointers
    lpdwOutLimit = lpdwOutputBuffer + ((*lpdwSizeOutputBuffer) / sizeof(DWORD));

    pRefLine = Line1Array;
    if ((dwCompressionType==TIFF_COMPRESSION_MR) && fReduceTwice)
    {
        pCurLine = LineMhArray;
    }
    else
    {
        pCurLine = Line2Array;
    }

    lpdwOut = lpdwOutputBuffer;
    BitOut = 0;

    ZeroMemory( (BYTE *) lpdwOutputBuffer, *lpdwSizeOutputBuffer);

    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;
    plinebuf = TiffInstance->StripData;
    lineWidth = TiffInstance->ImageWidth;

    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+TiffInstance->StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3) );
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;

    // first REF line is all white
    *pRefLine = (WORD)lineWidth;

    // for TIFF_COMPRESSION_MR same res only
    lpdwPrevResPtr = lpdwResPtr;
    dwPrevResBit   = ResBit;
    f1D       = 1;
    Count2D   = 0;

    // line loop
    do
    {
        // Check whether passed end of buffer
        if (lpdwOut >= lpdwOutLimit)
        {
            SetLastError(ERROR_INSUFFICIENT_BUFFER);
            return FALSE;
        }

        RetVal = ReadMrLine(&lpdwResPtr, &ResBit, pRefLine, pCurLine, EndPtr, TRUE, lineWidth);
        switch (RetVal)
        {
        case TIFF_LINE_OK:
            Lines++;

            if (dwCompressionType == TIFF_COMPRESSION_MH)
            {
                //
                // Compression = MH
                //

                if (fReduceTwice && (Lines%2 == 0))
                {
                    goto lSkipLoResMh;
                }

                // Output Dest Line
                OutputAlignedEOL(&lpdwOut, &BitOut);
                if (!OutputMhLine(pCurLine, &lpdwOut, &BitOut, lpdwOutLimit, LINE_LENGTH))
                {
                    SetLastError(ERROR_INSUFFICIENT_BUFFER);
                    return FALSE;
                }

lSkipLoResMh:
                // Next Src Line
                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;
            }
            else if (!fReduceTwice)
            {
                //
                // Compression = MR, don't reduce resolution
                //

                // 1. Output Dest EOL byte aligned followed by a 1D/2D tag.
                dwNewBitOut = gc_AlignEolTable[ BitOut ];
                if (dwNewBitOut < BitOut) {
                    lpdwOut++;
                }
                BitOut = dwNewBitOut;

                *lpdwOut += (0x00000001 << (BitOut++) );
                if (BitOut == 32) {
                    BitOut = 0;
                    lpdwOut++;
                }


                if (f1D) {
                    // 2. Output MH line based on Color Trans. Array
                    *lpdwOut += (0x00000001 << (BitOut++));

                    if (!OutputMhLine(pCurLine, &lpdwOut, &BitOut, lpdwOutLimit, LINE_LENGTH))
                    {
                        SetLastError(ERROR_INSUFFICIENT_BUFFER);
                        return FALSE;
                    }

                    f1D = 0;
                    Count2D = 0;

                }
                else {
                    // 2. Output 2D line - exact copy of an MMR corresponding 2D segment
                    BitOut++;  // no need to test < 32 : never happens.

                    if (lpdwResPtr == lpdwPrevResPtr) {
                        // insertion is a part of a DWORD

                        dwTmp = *lpdwPrevResPtr & (MINUS_ONE_DWORD << dwPrevResBit);
                        dwTmp &=  (MINUS_ONE_DWORD >> (32 - ResBit) );

                        if (BitOut >= dwPrevResBit) {
                            dw1 = (32 - BitOut);
                            dw2 =  ResBit - dwPrevResBit;

                            *lpdwOut += ( dwTmp << (BitOut - dwPrevResBit) );

                            if ( dw1 < dw2 ) {
                                *(++lpdwOut) = dwTmp >> (dwPrevResBit + dw1) ;
                                BitOut =  dw2 - dw1;
                            }
                            else {
                                if ( (BitOut = BitOut + dw2) > 31 )  {
                                    BitOut -= 32;
                                    lpdwOut++;
                                }
                            }

                        }
                        else {
                            *lpdwOut += ( dwTmp >> (dwPrevResBit - BitOut) );
                            BitOut += (ResBit - dwPrevResBit);
                        }
                    }
                    else {
                        // copy first left-justified part of a DWORD

                        dwTmp = *(lpdwPrevResPtr++) & (MINUS_ONE_DWORD << dwPrevResBit);

                        if (BitOut > dwPrevResBit) {
                            dw1 = BitOut - dwPrevResBit;

                            *lpdwOut += ( dwTmp << dw1 );
                            *(++lpdwOut) = dwTmp >> (32 - dw1) ;
                            BitOut = dw1;
                        }
                        else {
                            *lpdwOut += ( dwTmp >> (dwPrevResBit - BitOut) );
                            if ( (BitOut = BitOut + 32 - dwPrevResBit) > 31 )  {
                                BitOut -= 32;
                                lpdwOut++;
                            }
                        }

                        // copy entire DWORDs in a middle

                        while (lpdwPrevResPtr < lpdwResPtr) {
                            // Check whether passed end of buffer
                            if (lpdwOut >= lpdwOutLimit)
                            {
                                SetLastError(ERROR_INSUFFICIENT_BUFFER);
                                return FALSE;
                            }
                            if (BitOut == 0) {
                                *(lpdwOut++) = *(lpdwPrevResPtr++);
                            }
                            else {
                                *lpdwOut += ( *lpdwPrevResPtr << BitOut );
                                *(++lpdwOut) = *(lpdwPrevResPtr++) >> (32 - BitOut);
                            }
                        }

                        // copy last right-justified part of a DWORD

                        if (ResBit != 0) {
                            dwTmp = *lpdwPrevResPtr & (MINUS_ONE_DWORD >> (32 - ResBit) );

                            dw1 = (32 - BitOut);
                            *lpdwOut += ( dwTmp << BitOut );

                            if (dw1 < ResBit) {
                                *(++lpdwOut) = dwTmp >> dw1;
                                BitOut = ResBit - dw1;
                            }
                            else {
                                if ( (BitOut = BitOut + ResBit) > 31 )  {
                                    BitOut -= 32;
                                    lpdwOut++;
                                }
                            }
                        }
                    }

                    if (++Count2D >= Num2DLines) {
                        Count2D = 0;
                        f1D = 1;
                    }
                }

                // Remember Prev. line coordinates
                dwPrevResBit   = ResBit;
                lpdwPrevResPtr = lpdwResPtr;

                // Next Src Line
                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;
            }
            else
            {
                //
                // Compression = MR, do reduce resolution
                //
                // since we need to decode every src MMR line and encode to MR
                // dropping every other line, we will use 3 buffers to hold data
                // and we will NOT copy memory; just re-point to a right location.
                //
                // Action per (Lines%4) :
                //
                // 1 -> MH
                // 2 -> skip
                // 3 -> MR as a delta between last MH and Current lines.
                // 0 -> skip

                State = Lines % 4;

                if (State == 2) {
                    pRefLine = Line1Array;
                    pCurLine = Line2Array;
                    goto lSkipLoResMr;
                }
                else if (State == 0) {
                    pRefLine = Line1Array;
                    pCurLine = LineMhArray;
                    goto lSkipLoResMr;
                }

                // 1. Output Dest EOL byte aligned followed by a 1D/2D tag.
                dwNewBitOut = gc_AlignEolTable[ BitOut ];
                if (dwNewBitOut < BitOut) {
                    lpdwOut++;
                }
                BitOut = dwNewBitOut;

                *lpdwOut += (0x00000001 << (BitOut++) );
                if (BitOut == 32) {
                    BitOut = 0;
                    lpdwOut++;
                }

                if (State == 1) {
                    // 2. Output MH line based on Color Trans. Array
                    *lpdwOut += (0x00000001 << (BitOut++));

                    if (!OutputMhLine(pCurLine, &lpdwOut, &BitOut, lpdwOutLimit, LINE_LENGTH))
                    {
                        SetLastError(ERROR_INSUFFICIENT_BUFFER);
                        return FALSE;
                    }

                    pRefLine = LineMhArray;
                    pCurLine = Line1Array;

                }
                else {
                    // 2. Output 2D line - MR(MhRefLine, CurLine)
                    BitOut++;  // no need to test < 32 : never happens.

                    if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pMhLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) )
                    {
                        SetLastError(ERROR_INSUFFICIENT_BUFFER);
                        return FALSE;
                    }

                    pRefLine = Line2Array;
                    pCurLine = Line1Array;
                }
lSkipLoResMr:   ;
            }
            break;

        case TIFF_LINE_ERROR:
        case TIFF_LINE_END_BUFFER:
        case TIFF_LINE_TOO_MANY_RUNS:
            // We dont allow any errors in TIFFs received from service
            SetLastError(ERROR_FILE_CORRUPT);
            return FALSE;
        case TIFF_LINE_EOL:     // EOL - end of MMR page
#if 0
            // EOL for the last line
            (*lpdwOut) += ( ((DWORD) (EOL_REVERSED_CODE)) << BitOut);
            if ( (BitOut = BitOut + EOL_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (EOL_REVERSED_CODE) ) >> (EOL_LENGTH - BitOut);
            }

            // 6 1D-eols
            for (i=0; i<6; i++) {

                (*lpdwOut) += ( ((DWORD) (TAG_1D_EOL_REVERSED_CODE)) << BitOut);
                if ( (BitOut = BitOut + TAG_1D_EOL_LENGTH ) > 31 ) {
                    BitOut -= 32;
                    *(++lpdwOut) = ( (DWORD) (TAG_1D_EOL_REVERSED_CODE) ) >> (TAG_1D_EOL_LENGTH - BitOut);
                }
            }
            *(++lpdwOut) = 0;
#endif
            // Output EOL byte aligned for the last line.
            OutputAlignedEOL(&lpdwOut, &BitOut);

            *lpdwSizeOutputBuffer =
                (DWORD)((lpdwOut - lpdwOutputBuffer) * sizeof (DWORD) + ( BitOut >> 3));

            SetLastError(ERROR_SUCCESS);
            return TRUE;
        } // switch (RetVal)

    } while (lpdwResPtr <= EndPtr);
    // Reached end of buffer, but didn't find EOL
    SetLastError(ERROR_FILE_CORRUPT);
    return FALSE;
}  //ConvMmrPage


BOOL
ConvMmrPageToMh(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes,
    BOOL                SrcHiRes
    )
{
    return ConvMmrPage(
        hTiff,
        lpdwOutputBuffer,
        lpdwSizeOutputBuffer,
        TIFF_COMPRESSION_MH,
        0,
        (NegotHiRes < SrcHiRes));
}


BOOL
ConvMmrPageToMrSameRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer,
    BOOL                NegotHiRes
    )
{
    return ConvMmrPage(
        hTiff,
        lpdwOutputBuffer,
        lpdwSizeOutputBuffer,
        TIFF_COMPRESSION_MR,
        NegotHiRes ? 3 : 1,
        FALSE);
}


BOOL
ConvMmrPageHiResToMrLoRes(
    HANDLE              hTiff,
    LPDWORD             lpdwOutputBuffer,
    DWORD               *lpdwSizeOutputBuffer
    )
{
    return ConvMmrPage(
        hTiff,
        lpdwOutputBuffer,
        lpdwSizeOutputBuffer,
        TIFF_COMPRESSION_MR,
        1,
        TRUE);
}


/*++
Routine Description:
    Finds the next EOL in a buffer

Arguments:
    lpdwStartPtr    [in]     Pointer to the buffer
    StartBitInDword [in]     bit inside DWORD pointed by lpdwStartPtr
    lpdwEndPtr      [in]     Pointer to end of buffer (first DWORD that's not in the buffer)
    lpdwResPtr      [out]    Pointer to pointer that will point to the first bit after the EOL
    ResBit          [out]    Pointer to DWORD that will receive the bit inside *lpdwResPtr
    fTestLength     [in]     See fError
    fError          [out]    if fTestLength==DO_TEST_LENGTH, *fError will be set if an invalid EOL
                             (with <11 zeros) is found before the good EOL
Return Value:
    TRUE - found EOL
    FALSE - didn't find EOL
--*/

BOOL
FindNextEol(
    LPDWORD     lpdwStartPtr,
    BYTE        StartBitInDword,
    LPDWORD     lpdwEndPtr,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    BOOL        fTestLength,
    BOOL       *fError
    )
{


    DWORD       *pdwCur;
    LPBYTE      lpbCur;
    LPBYTE      BegPtr;
    BYTE        BegFirst1;
    DWORD       deltaBytes;

    BYTE        temp;
    BYTE        StartBit;
    LPBYTE      StartPtr;


    *fError  = 0;
    temp     = StartBitInDword >> 3;
    StartBit = StartBitInDword - (temp << 3);
    StartPtr = ((BYTE *) lpdwStartPtr) + temp;
    lpbCur   = StartPtr+1;                  // EOL can't be at Start: it takes more than 1 byte.
    BegPtr   = StartPtr;


    BegFirst1 = First1[*StartPtr];
    if (BegFirst1 > StartBit) {
        if (fTestLength == DO_TEST_LENGTH) {
            // should not be "1" in same byte
            *fError = 1;
        }
    }
    else {
        BegFirst1 = StartBit;
    }

    // very often there are lots of zeroes, take care of them first.
    // 1. before actual start of encoded bitstream
    // 2. fills

    do {
        if ( *lpbCur == 0 ) {

            // align to DWORD
            while ( ((ULONG_PTR) lpbCur) & 3)  {
                if ( *lpbCur != 0  ||  ++lpbCur >= (BYTE *) lpdwEndPtr )   {
                    goto lNext;
                }
            }

            // DWORD stretch
            pdwCur = (DWORD *) lpbCur;

            do  {
                if ( *pdwCur != 0) {
                    lpbCur = (LPBYTE) pdwCur;

                    // find exactly first non-zero byte
                    while (*lpbCur == 0) {
                        lpbCur++;
                    }

                    goto lNext;
                }
                pdwCur++;
            }  while (pdwCur < lpdwEndPtr);
            goto bad_exit;
        }

lNext:
        if (lpbCur >= (BYTE *) lpdwEndPtr)
        {
            goto bad_exit;
        }

        deltaBytes = (DWORD)(lpbCur - BegPtr);

        *ResBit = Last1[*lpbCur];
        if ( (deltaBytes<<3) + (*ResBit - BegFirst1 ) >= 11 ) {
            *lpdwResPtr = (LPDWORD) ( ((ULONG_PTR) lpbCur) & ~(0x3) );
            *ResBit += ( (BYTE) (( ((ULONG_PTR) lpbCur) & 0x3) << 3 ) );

            // return Byte/Bit right after EOL bitstream
            if (++*ResBit > 31) {
                *ResBit -= 32;
                (*lpdwResPtr)++;
            }
            return TRUE;
        }
        // error for DO_TEST_LENGTH case
        else if (fTestLength == DO_TEST_LENGTH)  {
            *fError = 1;
        }

        BegPtr = lpbCur;
        BegFirst1 = First1[*lpbCur];

    } while ( (++lpbCur) < (BYTE *) lpdwEndPtr);

bad_exit:
    return FALSE;
}



BOOL
OutputMmrLine(
    LPDWORD     lpdwOut,
    BYTE        BitOut,
    WORD       *pCurLine,
    WORD       *pRefLine,
    LPDWORD    *lpdwResPtr,
    BYTE       *ResBit,
    LPDWORD     lpdwOutLimit,
    DWORD       dwLineWidth
    )
{


    INT    a0, a1, a2, b1, b2, distance;
    INT    i;
    INT    IsA0Black;
    INT    a0Index = 0;
    INT    b1Index = 0;
    INT    lineWidth = (INT) dwLineWidth;

#ifdef RDEBUG
    if ( g_fDebGlobOut )
    if (g_fDebGlobOutColors == 1) {
        for (i=0; ;i++) {
            _tprintf( TEXT("%03d> %04d; "), i, *(pCurLine+i) );
            if ( *(pCurLine+i) >= lineWidth ) {
                break;
            }
        }
    }
#endif

    DeleteZeroRuns(pCurLine, dwLineWidth);

    a0 = 0;

    // a1, b1 - 1st black
    a1 = *pCurLine;
    b1 = *pRefLine;



    while (TRUE) {

        if (lpdwOut >= lpdwOutLimit)
        {
            SetLastError(ERROR_INSUFFICIENT_BUFFER);
            return FALSE;
        }

        b2 = (b1 >= lineWidth) ? lineWidth :  *(pRefLine + b1Index + 1);

        if (b2 < a1) {

            // Pass mode
            //OutputBits( TiffInstance, PASSCODE_LENGTH, PASSCODE );

#ifdef RDEBUG
            if ( g_fDebGlobOut )
            if (g_fDebGlobOutPrefix) {
                _tprintf( TEXT (" P ") );
                if (a0Index & 1) {
                    _tprintf( TEXT ("b%d "), (b2 - a0) );
                }
                else {
                    _tprintf( TEXT ("w%d "), (b2 - a0) );
                }
            }
#endif


            (*lpdwOut) += ( ((DWORD) (PASSCODE_REVERSED)) << BitOut);
            if ( (BitOut = BitOut + PASSCODE_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (PASSCODE_REVERSED) ) >> (PASSCODE_LENGTH - BitOut);
            }

            a0 = b2;

        } else if ((distance = a1 - b1) <= 3 && distance >= -3) {

            // Vertical mode
            //OutputBits( TiffInstance, VertCodes[distance+3].length, VertCodes[distance+3].code );

#ifdef RDEBUG
            if ( g_fDebGlobOut )
            if (g_fDebGlobOutPrefix) {
                _tprintf( TEXT (" V%2d "), distance );
                if (a0Index & 1) {
                    _tprintf( TEXT ("b%d "), (a1 - a0) );
                }
                else {
                    _tprintf( TEXT ("w%d "), (a1 - a0) );
                }
            }

#endif

            (*lpdwOut) += ( ( (DWORD) VertCodesReversed[distance+3].code) << BitOut);
            if ( (BitOut = BitOut + VertCodesReversed[distance+3].length ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (VertCodesReversed[distance+3].code) ) >> (VertCodesReversed[distance+3].length - BitOut);
            }

            a0 = a1;

        } else {

            // Horizontal mode

            a2 = (a1 >= lineWidth) ? lineWidth :  *(pCurLine + a0Index + 1);

            //OutputBits( TiffInstance, HORZCODE_LENGTH, HORZCODE );

            (*lpdwOut) += ( ((DWORD) (HORZCODE_REVERSED)) << BitOut);
            if ( (BitOut = BitOut + HORZCODE_LENGTH ) > 31 ) {
                BitOut -= 32;
                *(++lpdwOut) = ( (DWORD) (HORZCODE_REVERSED) ) >> (HORZCODE_LENGTH - BitOut);
            }


            for (i=a0Index; i<MAX_COLOR_TRANS_PER_LINE; i++) {
                if ( *(pCurLine + i) > a0 ) {
                    a0Index = i;
                    IsA0Black = i & 1;
                    break;
                }
            }


#ifdef RDEBUG

            if ( g_fDebGlobOut )
            if (g_fDebGlobOutPrefix) {
                _tprintf( TEXT (" H ") );
            }


#endif

            if ( (a1 != 0) && IsA0Black ) {
                OutputRunFastReversed(a1-a0, BLACK, &lpdwOut, &BitOut);
                OutputRunFastReversed(a2-a1, WHITE, &lpdwOut, &BitOut);
            } else {
                OutputRunFastReversed(a1-a0, WHITE, &lpdwOut, &BitOut);
                OutputRunFastReversed(a2-a1, BLACK, &lpdwOut, &BitOut);
            }

            a0 = a2;
        }

        if (a0 >= lineWidth) {
            break;
        }



        // a1 = NextChangingElement( plinebuf, a0, lineWidth, GetBit( plinebuf, a0 ) );

        if (a0 == lineWidth) {
            a1 = a0;
        }
        else {
            while ( *(pCurLine + a0Index) <= a0 ) {
                a0Index++;
            }

            a1 =  *(pCurLine + a0Index);
        }


        // b1 = NextChangingElement( prefline, a0, lineWidth, !GetBit( plinebuf, a0 ) );
        // b1 = NextChangingElement( prefline, b1, lineWidth, GetBit( plinebuf, a0 ) );
        // another words - b1 should be a color trans. after a0 with opposite from SrcLine(a0) color.

        if (a0 == lineWidth) {
            b1 = a0;
        }
        else {
            // b1 can go one index backwards due to color change
            if (b1Index > 0) {
                b1Index--;
            }

            while ( *(pRefLine + b1Index) <= a0 ) {
                b1Index++;
            }

            b1 =  *(pRefLine + b1Index);

            if ( ( b1Index & 1 ) != (a0Index & 1) ) {
                if (b1 < lineWidth) {
                    b1 =  *(pRefLine + (++b1Index));
                }
            }

        }

    }
    *lpdwResPtr = lpdwOut;
    *ResBit = BitOut;
    return TRUE;
}


BOOL
TiffPostProcessFast(
    LPTSTR SrcFileName,
    LPTSTR DstFileName
    )

/*++

Routine Description:

    Opens an existing TIFF file for reading.
    And call the proper process function according the compression type

Arguments:

    FileName            - Full or partial path/file name

Return Value:

    TRUE for success, FALSE for failure.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance;
    TIFF_INFO TiffInfo;


    // Open SrcFileName and set it on the first page. TiffInfo will have information about the page.
    TiffInstance = (PTIFF_INSTANCE_DATA) TiffOpen(
        SrcFileName,
        &TiffInfo,
        FALSE,
        FILLORDER_LSB2MSB
        );

    if (!TiffInstance) {
        return FALSE;
    }

    if (TiffInstance->ImageHeight) {
        TiffClose( (HANDLE) TiffInstance );
        return TRUE;
    }

    switch( TiffInstance->CompressionType )
    {
        case TIFF_COMPRESSION_MH:

            if (!PostProcessMhToMmr( (HANDLE) TiffInstance, TiffInfo, DstFileName ))
            {
                // beware! PostProcessMhToMmr closes TiffInstance
                return FALSE;
            }
            break;

        case TIFF_COMPRESSION_MR:
            if (!PostProcessMrToMmr( (HANDLE) TiffInstance, TiffInfo, DstFileName ))
            {
                // beware! PostProcessMhToMmr closes TiffInstance
                return FALSE;
            }
            break;

        case TIFF_COMPRESSION_MMR:
            TiffClose( (HANDLE) TiffInstance );
            break;

        default:
            ASSERT_FALSE;
            TiffClose( (HANDLE) TiffInstance );
            return FALSE;
    }
    return TRUE;
}



#define ADD_BAD_LINE_AND_CHECK_BAD_EXIT             \
    BadFaxLines++;                                  \
    if (LastLineBad) {                              \
        ConsecBadLines++;                           \
    }

//    if (BadFaxLines > AllowedBadFaxLines ||         \
//        ConsecBadLines > AllowedConsecBadLines) {   \
//            goto bad_exit;                          \
//    }


BOOL
PostProcessMhToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO   TiffInfoSrc,
    LPTSTR      NewFileName
    )

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiffSrc;

    TCHAR       DestFileName[MAX_PATH] = {0};
	TCHAR		DestFilePath[MAX_PATH] = {0};
    TCHAR       SrcFileName[MAX_PATH] = {0};
    DWORD       CurrPage;
    LPBYTE      pSrcBits = NULL;

    HANDLE      hTiffDest;
    DWORD       DestSize;
    LPBYTE      pDestBits = NULL;

    DWORD       PageCnt;

    BOOL        bRet = FALSE;

    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    LPDWORD             EndBuffer;
    BOOL                fTestLength;
    BOOL                fError;

    DWORD               *lpdwOutStart;
    DWORD               *lpdwOut;
    BYTE                BitOut;
    WORD                Line1Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                Line2Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;

    DWORD               BufferSize;
    DWORD               BufferUsedSize;

    DWORD               DestBufferSize;

    WORD                RIndex;
    WORD                CIndex;
    WORD                RValue;
    WORD                RunLength=0;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines=0;
    BOOL                LastLineBad;
    DWORD               lineWidth = TiffInfoSrc.ImageWidth; // This could change from page to page.
    PBYTE               Table;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    BOOL                Color;
    DWORD               dwIndex;
    PBYTE               pByteTable;
    PBYTE               pByteTail;
    WORD                CodeT;
    BYTE                MakeupT;
    DWORD               i;
    DWORD               ConsecBadLines=0;
    PTIFF_INSTANCE_DATA TiffInstanceDest;
    DWORD               MaxImageHeight=2400;
    DWORD               DestHiRes;
    LPDWORD             lpdwOutLimit;
    BOOL                fAfterMakeupCode;

    if (NewFileName == NULL) 
	{
		//
		//	Use temporary file
		//
		if (!GetTempPath((ARR_SIZE(DestFilePath) -1), DestFilePath)) 
		{
			return FALSE;
		}

		if (!GetTempFileName(DestFilePath, _T("Fxs"), 0, DestFileName))
		{
			return FALSE;
		}   
	}
	else 
	{
        _tcsncpy(DestFileName, NewFileName, ARR_SIZE(DestFileName) - 1);
    }

    _tcsncpy(SrcFileName, TiffInstance->FileName, ARR_SIZE(SrcFileName) - 1);

    CurrPage = 1;

    if (TiffInfoSrc.YResolution == 196) {
        DestHiRes = 1;
    }
    else {
        DestHiRes = 0;
    }

    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        lineWidth,
        FILLORDER_LSB2MSB,
        DestHiRes
        );
    if (! hTiffDest) {
		goto bad_exit;
    }

    TiffInstanceDest = (PTIFF_INSTANCE_DATA) hTiffDest;
    BufferSize = MaxImageHeight * (TiffInfoSrc.ImageWidth / 8);
    DestBufferSize = BufferSize + 200000;

    pSrcBits = (LPBYTE) VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pSrcBits) {
		goto bad_exit;
    }

    pDestBits = (LPBYTE) VirtualAlloc(
        NULL,
        DestBufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pDestBits) {
		goto bad_exit;
    }

    // Iterate all the pages
    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++) {

        // Also read the strip data to memory (TiffInstance->StripData)
        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) ) {
            goto bad_exit;
        }

        // TiffInstance is the same pointer as hTiffSrc
        lineWidth = TiffInstance->ImageWidth;

        if (! TiffStartPage(hTiffDest) ) {
            goto bad_exit;
        }

        // here we decode MH page line by line into Color Trans. Array
        // fix all the errors
        // and encode clean data into MMR page

        lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );
        BufferUsedSize = BufferSize;

        if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {

            if (BufferUsedSize > BufferSize) {
                VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
                VirtualFree ( pDestBits, 0 , MEM_RELEASE );

                BufferSize = BufferUsedSize;
                DestBufferSize = BufferSize + 200000;

                pSrcBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    BufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pSrcBits) {
					goto bad_exit;
                }

                pDestBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    DestBufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pDestBits) {
					goto bad_exit;
                }

                lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

                if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {
                    goto bad_exit;
                }
            }
            else {
                goto bad_exit;
            }
        }

        ResBit = 0;
        EndBuffer = lpdwResPtr + (BufferUsedSize / sizeof(DWORD) );

        pRefLine = Line1Array;
        pCurLine = Line2Array;
        lpdwOutStart = lpdwOut = (LPDWORD) ( (ULONG_PTR) pDestBits & ~(0x3) );
        lpdwOutLimit = lpdwOutStart + ( DestBufferSize >> 2 );

        BitOut = 0;
        ZeroMemory( (BYTE *) lpdwOut, DestBufferSize );

        CIndex    = 0;
        RunLength = 0;
        fAfterMakeupCode = FALSE;

        // first REF line is all white
        RIndex    = 1;
        *pRefLine = (WORD) lineWidth;
        RValue    = (WORD) lineWidth;

        Lines = 0;
        EolCount = 1;
        BadFaxLines = 0;
        LastLineBad = FALSE;
        fTestLength = DO_NOT_TEST_LENGTH;

        //
        // find first EOL in a block
        //
        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {
            goto bad_exit;
        }

        // output first "all white" line
        CIndex    = 1;
        *pCurLine = (WORD) lineWidth;

        if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
            goto bad_exit;
        }

        RIndex = CIndex;
        CIndex = 0;
        Lines++;

        Table = TableWhite;
        Color = WHITE_COLOR;

        //
        // EOL loop
        //
        do {

            // Table look-up loop
            do {

                if (ResBit <= 17) {
                    dwIndex = (*lpdwResPtr) >> ResBit;
                }
                else {
                    dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                }

                dwIndex &= 0x00007fff;

                pByteTable = Table + (5*dwIndex);
                pByteTail  = pByteTable+4;

                for (i=0; i<4; i++) {

                    MakeupT = *pByteTable & 0x80;
                    CodeT   = (WORD) *pByteTable & 0x3f;

                    if (MakeupT) {

                        if (CodeT <= MAX_TIFF_MAKEUP) {
                            RunLength += (CodeT << 6);

                            if (RunLength > lineWidth) {
                                fTestLength =  DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            EolCount=0;
                            fAfterMakeupCode = TRUE;
#ifdef RDEBUGS

                            if (g_fDebGlobOutS)
                            if (Color) {
                                _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                            }
                            else {
                                _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                            }
#endif
                        }

                        else if (CodeT == NO_MORE_RECORDS) {
                            goto lNextIndex;
                        }

                        else if (CodeT == LOOK_FOR_EOL_CODE)  {
                            fTestLength =  DO_TEST_LENGTH;
                            AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);

                            goto lFindNextEOL;
                        }

                        else if (CodeT == EOL_FOUND_CODE) {
#ifdef RDEBUG
                            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif
                            if ((RunLength != lineWidth) || fAfterMakeupCode ) {
                                if (RunLength != 0) {
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                                }
                                else {
                                    // RunLength is 0
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                }
                            }
                            else {
                                LastLineBad = FALSE;
                                ConsecBadLines = 0;

                                // end of a good line.
                                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                                    goto bad_exit;
                                }

                                pTmpSwap = pRefLine;
                                pRefLine = pCurLine;
                                pCurLine = pTmpSwap;
                                RIndex = CIndex;
                                Lines++;

                            }

                            CIndex = 0;
                            RunLength = 0;
                            fAfterMakeupCode = FALSE;

                            Table = TableWhite;
                            Color = WHITE_COLOR;
                        }

                        else if (CodeT == ERROR_CODE) {
                            ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }
                        else {
#ifdef RDEBUG
                            _tprintf( TEXT("ERROR: WRONG code: index=%04x\n"), dwIndex);
#endif

                            goto bad_exit;
                        }
                    }

                    else {  // terminating code
                        RunLength += CodeT;
                        if (RunLength > lineWidth) {
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        *(pCurLine + (CIndex++) ) = RunLength;

                        if (CIndex >= MAX_COLOR_TRANS_PER_LINE ) {
                            fTestLength =  DO_NOT_TEST_LENGTH;
                            goto lFindNextEOL;
                        }

                        EolCount=0;
                        fAfterMakeupCode = FALSE;
#ifdef RDEBUGS
                        if (g_fDebGlobOutS)

                        if (Color) {
                            _tprintf( TEXT ("b%d "), (CodeT)  );
                        }
                        else {
                            _tprintf( TEXT ("w%d "), (CodeT)  );
                        }
#endif
                        Color = 1 - Color;
                    }

                    pByteTable++;
                }

lNextIndex:
                Table = Color ? TableBlack : TableWhite;
                AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
            } while (lpdwResPtr <= EndBuffer);

            // if we got here it means that line is longer than 4K  OR
            // we missed EOF while decoding a BAD line.
            ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

            goto good_exit;

lFindNextEOL:

#ifdef RDEBUG
            _tprintf( TEXT(" EOL Line=%d\n\n"), Lines );
#endif

            if ((RunLength != lineWidth) || fAfterMakeupCode) {
                if (RunLength != 0) {
                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                }
                else {
                    // RunLength is 0
                    EolCount++;

                    if (EolCount >= 5)  {

                        goto good_exit;
                    }
                }
            }
            else{
                Lines++;
                ConsecBadLines=0;

                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                    goto bad_exit;
                }

                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;
                RIndex = CIndex;

            }

            CIndex = 0;
            RunLength = 0;
            fAfterMakeupCode = FALSE;

            if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                goto good_exit;
            }

            if (fTestLength == DO_TEST_LENGTH && fError) {
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
            }

            Table = TableWhite;
            Color = WHITE_COLOR;

        } while (lpdwResPtr <= EndBuffer);

        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

        // Reached the end of a PAGE - close it and proceed to the next page
good_exit:

        *(++lpdwOut) = 0x80000000;
        *(++lpdwOut) = 0x80000000;
        Lines--;

        DestSize = (DWORD)((lpdwOut - lpdwOutStart) * sizeof (DWORD));
        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwOutStart, DestSize) ) { // This fun always return true
            goto bad_exit;
        }

        TiffInstanceDest->Lines        = Lines;
        TiffInstanceDest->ImageWidth   = lineWidth;
        TiffInstanceDest->YResolution  = TiffInstance->YResolution;

        if (! TiffEndPage(hTiffDest) ) {
            goto bad_exit;
        }

    }  // End of FOR loop that run on all the pages.

    bRet = TRUE;

    // Finished the DOCUMENT - either successfully or not.
bad_exit:

    if (pSrcBits)
	{
		VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
	}
	if (pDestBits)
	{
        VirtualFree ( pDestBits, 0 , MEM_RELEASE );
	}
	if (hTiffSrc)
	{
        TiffClose(hTiffSrc);
	}
	if (hTiffDest)
	{
        TiffClose(hTiffDest);
	}

    if (TRUE == bRet)
    {
		//
		//	Almost Success
		//
		if (NULL == NewFileName)
		{
			//	replace the original MH file by the new clean MMR file
			DeleteFile(SrcFileName);
			bRet = MoveFile(DestFileName, SrcFileName);
		}
	}

	if (FALSE == bRet)
	{
        DeleteFile(DestFileName);
	}
    return bRet;
}


BOOL
PostProcessMrToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO   TiffInfoSrc,
    LPTSTR      NewFileName
    )

{

    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiffSrc;

    TCHAR       DestFileName[MAX_PATH] = {0};
	TCHAR		DestFilePath[MAX_PATH] = {0};
    TCHAR       SrcFileName[MAX_PATH] = {0};
    DWORD       CurrPage;
    LPBYTE      pSrcBits = NULL;
    HANDLE      hTiffDest;
    DWORD       DestSize;
    LPBYTE      pDestBits = NULL;
    DWORD       PageCnt;
    BOOL        bRet = FALSE;

    LPDWORD             lpdwResPtr;
    BYTE                ResBit;
    LPDWORD             EndBuffer;
    BOOL                fTestLength;
    BOOL                fError;

    DWORD               *lpdwOutStart;
    DWORD               *lpdwOut;
    BYTE                BitOut;
    WORD                Line1Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                Line2Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;

    DWORD               BufferSize;
    DWORD               BufferUsedSize;

    DWORD               DestBufferSize;

    WORD                RIndex;
    WORD                CIndex;
    WORD                RValue;
    WORD                RunLength=0;
    DWORD               Lines;
    DWORD               EolCount;
    DWORD               BadFaxLines;
    BOOL                LastLineBad;
    DWORD               lineWidth = TiffInfoSrc.ImageWidth;
    PBYTE               Table;
    PBYTE               TableWhite = (PBYTE) gc_GlobTableWhite;
    PBYTE               TableBlack = (PBYTE) GlobTableBlack;
    BOOL                Color;
    DWORD               dwIndex;
    PBYTE               pByteTable;
    PBYTE               pByteTail;
    WORD                CodeT;
    BYTE                MakeupT;
    DWORD               i;
    DWORD               ConsecBadLines=0;
    PTIFF_INSTANCE_DATA TiffInstanceDest;

    DWORD               dwTemp;
    BOOL                f1D=1;
    BYTE                Count2D;
    BYTE                Num2DLines=0;
    DWORD               MaxImageHeight=2400;
    DWORD               DestHiRes;
    LPDWORD             lpdwOutLimit;
    BOOL                fAfterMakeupCode;

    TIFF_LINE_STATUS    RetVal = TIFF_LINE_ERROR;

    if (NewFileName == NULL) 
	{
		//
		//	Use temporary file
		//
		if (!GetTempPath((ARR_SIZE(DestFilePath) -1), DestFilePath)) 
		{
			return FALSE;
		}

		if (!GetTempFileName(DestFilePath, _T("Fxs"), 0, DestFileName))
		{
			return FALSE;
		}   
	}
	else 
	{
        _tcsncpy(DestFileName, NewFileName, ARR_SIZE(DestFileName) - 1);
    }

    _tcsncpy(SrcFileName, TiffInstance->FileName, ARR_SIZE(SrcFileName) - 1);

    CurrPage = 1;

    if (TiffInfoSrc.YResolution == 196) {
        DestHiRes = 1;
    }
    else {
        DestHiRes = 0;
    }

    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        lineWidth,
        FILLORDER_LSB2MSB,
        DestHiRes);

    if (! hTiffDest) {
		goto bad_exit;
    }

    TiffInstanceDest = (PTIFF_INSTANCE_DATA) hTiffDest;


    BufferSize = MaxImageHeight * (TiffInfoSrc.ImageWidth / 8);

    DestBufferSize = BufferSize + 200000;

    pSrcBits = (LPBYTE) VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pSrcBits) {
		goto bad_exit;
    }


    pDestBits = (LPBYTE) VirtualAlloc(
        NULL,
        DestBufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!pDestBits) {
		goto bad_exit;
    }

    // Iterate all the pages
    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++) {

        // Also read the strip data to memory (TiffInstance->StripData)
        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) ) {
            goto bad_exit;
        }

        // TiffInstance is the same pointer as hTiffSrc
        lineWidth = TiffInstance->ImageWidth;

        if (! TiffStartPage(hTiffDest) ) {
            goto bad_exit;
        }

        // here we decode MR page line by line into Color Trans. Array
        // fix all the errors
        // and encode clean data into MMR page

        lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

        BufferUsedSize = BufferSize;

        if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {

            if (BufferUsedSize > BufferSize) {
                VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
                VirtualFree ( pDestBits, 0 , MEM_RELEASE );

                BufferSize = BufferUsedSize;
                DestBufferSize = BufferSize + 200000;

                pSrcBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    BufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pSrcBits) {
					goto bad_exit;
                }

                pDestBits = (LPBYTE) VirtualAlloc(
                    NULL,
                    DestBufferSize,
                    MEM_COMMIT,
                    PAGE_READWRITE
                    );

                if (! pDestBits) {
					goto bad_exit;
                }

                lpdwResPtr = (LPDWORD) ( (ULONG_PTR) pSrcBits & ~(0x3) );

                if (!GetTiffBits(hTiffSrc, (LPBYTE)lpdwResPtr, &BufferUsedSize, FILLORDER_LSB2MSB) ) {
                    goto bad_exit;
                }
            }
            else {
                goto bad_exit;
            }
        }

        ResBit = 0;
        EndBuffer = lpdwResPtr + (BufferUsedSize / sizeof(DWORD) );

        pRefLine = Line1Array;
        pCurLine = Line2Array;
        lpdwOutStart = lpdwOut = (LPDWORD) ( (ULONG_PTR) pDestBits & ~(0x3) );
        lpdwOutLimit = lpdwOutStart + ( DestBufferSize >> 2 );


        BitOut = 0;
        ZeroMemory( (BYTE *) lpdwOut, DestBufferSize );

        CIndex    = 0;
        RunLength = 0;
        fAfterMakeupCode = FALSE;

        // first REF line is all white
        RIndex    = 1;
        *pRefLine = (WORD) lineWidth;
        RValue    = (WORD) lineWidth;

        Lines = 0;
        EolCount = 1;
        BadFaxLines = 0;
        LastLineBad = FALSE;
        fTestLength = DO_NOT_TEST_LENGTH;

        //
        // find first EOL in a block
        //

        if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {

            goto bad_exit;
        }

        // output first "all white" line
        CIndex    = 1;
        *pCurLine = (WORD) lineWidth;

        if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
            goto bad_exit;
        }

        RIndex = 0;
        CIndex = 0;
        Lines++;

#ifdef RDEBUG
        if ( g_fDebGlobOut )
        _tprintf( TEXT (" EOL Line=%d\n\n"), Lines );
#endif

        Table = TableWhite;
        Color = WHITE_COLOR;


        // EOL-loop

        do {

            dwTemp = (*lpdwResPtr) & (0x00000001 << ResBit );

            if (f1D || dwTemp) {
//l1Dline:

#ifdef RDEBUG
                // _tprintf( TEXT (" Start 1D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

                if (! dwTemp) {

#ifdef RDEBUG
                    _tprintf( TEXT ("\n ERROR f1D dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif
                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                    AdvancePointerBit(&lpdwResPtr, &ResBit, 1);

                    fTestLength = DO_NOT_TEST_LENGTH;
                    f1D = 1;
                    goto lFindNextEOL;
                }

                // decode 1D line starting ResBit+1

                AdvancePointerBit(&lpdwResPtr, &ResBit, 1);

                RIndex = 0;
                RunLength = 0;
                fAfterMakeupCode = FALSE;

                Table = TableWhite;
                Color = WHITE_COLOR;



                // 1-D Table look-up loop
                do {

                    if (ResBit <= 17) {
                        dwIndex = (*lpdwResPtr) >> ResBit;
                    }
                    else {
                        dwIndex = ( (*lpdwResPtr) >> ResBit ) + ( (*(lpdwResPtr+1)) << (32-ResBit) ) ;
                    }

                    dwIndex &= 0x00007fff;

                    pByteTable = Table + (5*dwIndex);
                    pByteTail  = pByteTable+4;

                    // All bytes

                    for (i=0; i<4; i++)  {

                        MakeupT = *pByteTable & 0x80;
                        CodeT   = (WORD) *pByteTable & 0x3f;

                        if (MakeupT) {

                            if (CodeT <= MAX_TIFF_MAKEUP) {
                                RunLength += (CodeT << 6);

                                if (RunLength > lineWidth) {
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;
                                }

                                EolCount=0;
                                fAfterMakeupCode = TRUE;
#ifdef RDEBUG
                                if ( g_fDebGlobOut ) {
                                    if (Color) {
                                        _tprintf( TEXT ("b%d "), (CodeT << 6)  );
                                    }
                                    else {
                                        _tprintf( TEXT ("w%d "), (CodeT << 6)  );
                                    }
                                }
#endif
                            }

                            else if (CodeT == NO_MORE_RECORDS) {
                                goto lNextIndex1D;
                            }

                            else if (CodeT == LOOK_FOR_EOL_CODE)  {
                                // end of our line AHEAD
                                if ((RunLength == lineWidth) && !fAfterMakeupCode) {
                                    EolCount = 0;
                                    f1D = 0;
                                    Count2D = 0;
                                    Lines++;

                                    fTestLength = DO_TEST_LENGTH;
                                    AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
#ifdef RDEBUG
                                    if ( g_fDebGlobOut )
                                        _tprintf( TEXT (" 1D ") );
#endif

                                    goto lFindNextEOL;

                                }
                                else if (RunLength != 0) {
#ifdef RDEBUG
                                    _tprintf( TEXT ("\n!!! ERROR 1D RunLength\n"), RunLength  );
#endif
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_NOT_TEST_LENGTH;
                                    goto lFindNextEOL;

                                }
                                else {
                                    // zero RunLength
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                    f1D = 1;
                                    Count2D = 0;

                                    fTestLength = DO_TEST_LENGTH;
                                    AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);

                                    goto lFindNextEOL;
                                }
                            }

                            else if (CodeT == EOL_FOUND_CODE) {
#ifdef RDEBUG
                                // _tprintf( TEXT ("   Res=%d\n"), RunLength  );
#endif
                                AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);

                                if ((RunLength == lineWidth) && !fAfterMakeupCode) {
                                    EolCount = 0;
                                    f1D = 0;
                                    Count2D = 0;
                                    Lines++;

                                    // end of a good line.
                                    if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                                        goto bad_exit;
                                    }

#ifdef RDEBUG
                                    if ( g_fDebGlobOut )
                                        _tprintf( TEXT (" E 1D EOL Line=%d\n\n"), Lines );
#endif
                                    pTmpSwap = pRefLine;
                                    pRefLine = pCurLine;
                                    pCurLine = pTmpSwap;
                                    RIndex = 0; //CIndex;
                                    CIndex = 0;

                                    goto lAfterEOL;

                                }
                                else if (RunLength != 0) {
#ifdef RDEBUG
                                    _tprintf( TEXT ("!!! ERROR 1D Runlength EOLFOUND \n")  );
#endif
                                    ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                    f1D = 1;
                                    Count2D = 0;
                                    CIndex = 0;
                                    goto lAfterEOL;
                                }
                                else {
                                    // zero RunLength
                                    EolCount++;

                                    if (EolCount >= 5)  {

                                        goto good_exit;
                                    }

                                    f1D = 1;
                                    Count2D = 0;
                                    CIndex = 0;
                                    goto lAfterEOL;
                                }

                            }

                            else if (CodeT == ERROR_CODE) {
#ifdef RDEBUG
                                _tprintf( TEXT (" ERROR CODE 1D dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif
                                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            else {
#ifdef RDEBUG
                                _tprintf( TEXT("ERROR: WRONG code: index=%04x\n"), dwIndex);
#endif

                                goto bad_exit;
                            }
                        }

                        else {  // terminating code
                            RunLength += CodeT;

                            if (RunLength > lineWidth) {
                                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                                f1D = 1;
                                Count2D = 0;

                                fTestLength = DO_NOT_TEST_LENGTH;
                                goto lFindNextEOL;
                            }

                            //RSL was error
                            *(pCurLine + (CIndex++)) = RunLength;
                            fAfterMakeupCode = FALSE;

                            if (CIndex >= MAX_COLOR_TRANS_PER_LINE ) {
#ifdef RDEBUG
                                _tprintf( TEXT (" ERROR 1D TOO MANY COLORS dwResPtr=%lx bit=%d "), lpdwResPtr, ResBit);
#endif
                                goto bad_exit;
                            }

#ifdef RDEBUG
                            if ( g_fDebGlobOut ) {

                                if (Color) {
                                    _tprintf( TEXT ("b%d "), (CodeT)  );
                                }
                                else {
                                    _tprintf( TEXT ("w%d "), (CodeT)  );
                                }
                            }
#endif
                            Color = 1 - Color;
                        }

                        pByteTable++;

                     }



lNextIndex1D:
                    Table = Color ? TableBlack : TableWhite;
                    AdvancePointerBit(&lpdwResPtr, &ResBit, *pByteTail & 0x0f);
                } while (lpdwResPtr <= EndBuffer);

                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                goto good_exit;

            }

//l2Dline:
            // should be 2D

#ifdef RDEBUG
            // _tprintf( TEXT ("\n Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif

            if ( (*lpdwResPtr) & (0x00000001 << ResBit) )  {
#ifdef RDEBUG
                _tprintf( TEXT ("\n!!! ERROR Start 2D dwResPtr=%lx bit=%d \n"), lpdwResPtr, ResBit);
#endif
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                f1D =  1;
                Count2D = 0;
                CIndex = 0;
                goto lAfterEOL;
            }

            AdvancePointerBit(&lpdwResPtr, &ResBit, 1);
            fAfterMakeupCode = FALSE;  // This flag is irrelevant for 2D lines
            
            RetVal = ReadMrLine(&lpdwResPtr, &ResBit, pRefLine, pCurLine, EndBuffer-1, FALSE, lineWidth);
            switch (RetVal)
            {
            case TIFF_LINE_ERROR:
            case TIFF_LINE_TOO_MANY_RUNS:
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                f1D = 1;
                Count2D = 0;

                fTestLength = DO_NOT_TEST_LENGTH;
                RunLength = 0; // hack - so the line doesn't gets written
                break;

            case TIFF_LINE_END_BUFFER:
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
                goto good_exit;

            case TIFF_LINE_OK:
                if (++Count2D >= Num2DLines)
                {
                    Count2D = 0;
                    f1D = 0;   // relax HiRes/LoRes 2D lines per 1D rules - HP Fax does 3 2D-lines per 1 1D-line in LoRes.
                }

                fTestLength = DO_TEST_LENGTH;
                f1D = 0;
                Lines++;
                RunLength = (WORD)lineWidth;  // hack - so the line gets written
                break;

            default:   // This includes TIFF_LINE_EOL - should happen on fMMR=TRUE only
                _ASSERT(FALSE);
                goto bad_exit;
            } // switch (RetVal)

lFindNextEOL:

            if ((RunLength == lineWidth) && !fAfterMakeupCode) {
                ConsecBadLines=0;

                if (! OutputMmrLine(lpdwOut, BitOut, pCurLine, pRefLine, &lpdwOut, &BitOut, lpdwOutLimit, lineWidth) ) {
                    goto bad_exit;
                }

#ifdef RDEBUG
                 if ( g_fDebGlobOut ) {
                    _tprintf( TEXT (" EOL Line=%d "), Lines );

                    _tprintf( TEXT (" RIndex=%d, CIndex=%d:  "), RIndex, CIndex);

                    for (i=0; i<CIndex; i++) {
                       _tprintf( TEXT ("%04d>%04d, "), i, *(pCurLine+i) );
                        if ( *(pCurLine+i) >= lineWidth ) {
                            break;
                        }
                    }
                    _tprintf( TEXT ("\n\n"));
                 }

#endif

                pTmpSwap = pRefLine;
                pRefLine = pCurLine;
                pCurLine = pTmpSwap;

            }

            RIndex = 0;
            CIndex = 0;
            RunLength = 0;
            fAfterMakeupCode = FALSE;

            if (! FindNextEol (lpdwResPtr, ResBit, EndBuffer, &lpdwResPtr, &ResBit, fTestLength, &fError) ) {

                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

                goto good_exit;

            }

            if ( (fTestLength == DO_TEST_LENGTH) && fError ) {
                ADD_BAD_LINE_AND_CHECK_BAD_EXIT;
            }

lAfterEOL:
            ;


        } while (lpdwResPtr <= EndBuffer);

        ADD_BAD_LINE_AND_CHECK_BAD_EXIT;

        // Reached the end of a PAGE - close it and proceed to the next page
good_exit:
        *(++lpdwOut) = 0x80000000;
        *(++lpdwOut) = 0x80000000;
        Lines--;

        DestSize = (DWORD)((lpdwOut - lpdwOutStart) * sizeof (DWORD));
        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwOutStart, DestSize) ) {
            goto bad_exit;
        }

        TiffInstanceDest->Lines        = Lines;
        TiffInstanceDest->ImageWidth   = lineWidth;
        TiffInstanceDest->YResolution  = TiffInstance->YResolution;

        if (! TiffEndPage(hTiffDest) ) {
            goto bad_exit;
        }

    }  // End of FOR loop that run on all the pages.

    bRet = TRUE;

    // Finished the DOCUMENT - either successfully or not.
bad_exit:

	if (pSrcBits)
	{
		VirtualFree ( pSrcBits, 0 , MEM_RELEASE );
	}
	if (pDestBits)
	{
        VirtualFree ( pDestBits, 0 , MEM_RELEASE );
	}
	if (hTiffSrc)
	{
        TiffClose(hTiffSrc);
	}
	if (hTiffDest)
	{
        TiffClose(hTiffDest);
	}

    if (TRUE == bRet)
    {
        //
        // Almost Success
        //
        if (NULL == NewFileName)
        {
            //replace the original MH file by the new clean MMR file
            DeleteFile(SrcFileName);
            bRet = MoveFile(DestFileName, SrcFileName);
        }
    }

    if (FALSE == bRet)
    {
        DeleteFile(DestFileName);
    }
    return bRet;
}


BOOL
TiffUncompressMmrPageRaw(
    LPBYTE      StripData,
    DWORD       StripDataSize,
    DWORD       ImageWidth,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     LinesOut
    )

{
    DWORD               i;
    DWORD               j;
    PBYTE               plinebuf;
    DWORD               lineWidth;

    LPDWORD             EndPtr;

    WORD                Line1Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                Line2Array[MAX_COLOR_TRANS_PER_LINE];
    WORD                *pRefLine;
    WORD                *pCurLine;
    WORD                *pTmpSwap;
    LPDWORD             lpdwResPtr;
    BYTE                ResBit;

    WORD                PrevValue;
    WORD                CurValue;
    WORD                CurPos;
    WORD                CurRun;
    WORD                NumBytes;
    WORD                NumDwords;
    BYTE                BitOut;
    LPDWORD             lpdwOut;
    LPBYTE              lpbOut;
    LPBYTE              lpbLineStart;
    BOOL                fOutputLine = 0;
    BOOL                fDoneDwords=0;
    LPBYTE              lpbMaxOutputBuffer = (LPBYTE)lpdwOutputBuffer + dwOutputBufferSize - 1;

    TIFF_LINE_STATUS    RetVal = TIFF_LINE_ERROR;

    DEBUG_FUNCTION_NAME(TEXT("TiffUncompressMmrPageRaw"));

    // start Pointers

    pRefLine = Line1Array;
    pCurLine = Line2Array;

    BitOut = 0;

    ZeroMemory( (BYTE *) lpdwOutputBuffer, dwOutputBufferSize);

    plinebuf = StripData;
    lineWidth = ImageWidth;

    EndPtr = (LPDWORD) ( (ULONG_PTR) (plinebuf+StripDataSize-1) & ~(0x3) ) ;
    lpdwResPtr = (LPDWORD) (((ULONG_PTR) plinebuf) & ~(0x3));
    ResBit =   (BYTE) (( ( (ULONG_PTR) plinebuf) & 0x3) << 3) ;

    lpbLineStart = (LPBYTE) lpdwOutputBuffer;

    // first REF line is all white
    *pRefLine = (WORD)lineWidth;

    // line loop
    do
    {
        RetVal = ReadMrLine(&lpdwResPtr, &ResBit, pRefLine, pCurLine, EndPtr, TRUE, lineWidth);
        switch (RetVal)
        {
        case TIFF_LINE_OK:

            //
            // Output Uncompressed line based on Color Trans. Array
            //

            for (CurPos=0;  CurPos < MAX_COLOR_TRANS_PER_LINE; CurPos+=2)
            {
                PrevValue = *(pCurLine + CurPos);

                if ( PrevValue == lineWidth )
                {
                    break;
                }

                CurValue = *(pCurLine + CurPos + 1);
                CurRun   = CurValue - PrevValue;

                lpbOut  = lpbLineStart + (PrevValue >> 3);
                BitOut   = PrevValue % 8;
                //
                // black color
                //
                if (lpbOut > lpbMaxOutputBuffer)
                {
                    //
                    // Tiff is corrupt
                    //
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                    return TRUE;
                }

                *lpbOut = (*lpbOut) | (MINUS_ONE_BYTE >> BitOut);

                if (BitOut + CurRun <= 7 )
                {
                    //
                    // Just a part of the same BYTE.
                    //
                    *lpbOut = (*lpbOut) & All1[BitOut + CurRun];
                    BitOut += CurRun;
                }
                else
                {
                    //
                    // We crossed the BYTE boundary.
                    //
                    CurRun -= (8 - BitOut);
                    BitOut = 0;
                    lpbOut++;
                    //
                    // Walk the entire DWORDs in a middle of a run.
                    //
                    NumBytes = CurRun >> 3;
                    CurRun  -= (NumBytes << 3);
                    if (NumBytes >= 7)
                    {
                        //
                        // makes sense process DWORDs
                        //
                        fDoneDwords = 0;
                        do
                        {
                            if ( ! (  (((ULONG_PTR) lpbOut) & 3)  ||  fDoneDwords )   )
                            {
                                //
                                // DWORD stretch
                                //
                                NumDwords = NumBytes >> 2;
                                lpdwOut = (LPDWORD) lpbOut;
                                for (j=0; j<NumDwords; j++)
                                {
                                    if (((LPBYTE)lpdwOut) > (lpbMaxOutputBuffer - sizeof(DWORD) + 1))
                                    {
                                        //
                                        // Tiff is corrupt
                                        //
                                        DebugPrintEx(
                                            DEBUG_ERR,
                                            TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                                        return TRUE;
                                    }
                                    *lpdwOut++ = MINUS_ONE_DWORD;
                                }
                                NumBytes -= (NumDwords << 2);
                                lpbOut = (LPBYTE) lpdwOut;
                                fDoneDwords = 1;
                            }
                            else
                            {
                                //
                                // either lead or tail BYTE stretch
                                //
                                if (lpbOut > lpbMaxOutputBuffer)
                                {
                                    //
                                    // Tiff is corrupt
                                    //
                                    DebugPrintEx(
                                        DEBUG_ERR,
                                        TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                                    return TRUE;
                                }
                                *lpbOut++ = MINUS_ONE_BYTE;
                                NumBytes--;
                            }
                        } while (NumBytes > 0);
                    }
                    else
                    {
                        //
                        // process BYTEs
                        //
                        for (i=0; i<NumBytes; i++)
                        {
                            if (lpbOut > lpbMaxOutputBuffer)
                            {
                                //
                                // Tiff is corrupt
                                //
                                DebugPrintEx(
                                    DEBUG_ERR,
                                    TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                                return TRUE;
                            }
                            *lpbOut++ = MINUS_ONE_BYTE;
                        }
                    }
                    //
                    // Last part of a BYTE.
                    //
                    if (lpbOut > lpbMaxOutputBuffer)
                    {
                        //
                        // Tiff is corrupt
                        //
                        DebugPrintEx(
                            DEBUG_ERR,
                            TEXT("Tiff is corrupt!!! Buffer overrun - stopping uncompression and returning what we have so far"));
                        return TRUE;
                    }
                    *lpbOut = All1[CurRun];
                    BitOut = (BYTE) CurRun;
                }
                if ( CurValue == lineWidth )
                {
                    break;
                }
            }
            lpbLineStart += (lineWidth >> 3);
            //
            // Next Src Line
            //
            pTmpSwap = pRefLine;
            pRefLine = pCurLine;
            pCurLine = pTmpSwap;
            break;

        case TIFF_LINE_ERROR:
        case TIFF_LINE_END_BUFFER:
        case TIFF_LINE_TOO_MANY_RUNS:
            // We dont allow any errors in TIFFs received from service
            return FALSE;
        case TIFF_LINE_EOL:     // EOL - end of MMR page
            return TRUE;
        } // switch (RetVal)

    } while (lpdwResPtr <= EndPtr);

    DebugPrintEx(
        DEBUG_ERR,
        TEXT("Tiff is corrupt!!!"));
    return FALSE;
}   // TiffUncompressMmrPageRaw


BOOL
TiffUncompressMmrPage(
    HANDLE      hTiff,
    LPDWORD     lpdwOutputBuffer,
    DWORD       dwOutputBufferSize,
    LPDWORD     LinesOut
    )

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    DEBUG_FUNCTION_NAME(TEXT("TiffUncompressMmrPage"));
    //
    // check if enough memory
    //

    if (TiffInstance->ImageHeight > *LinesOut)
    {
        *LinesOut = TiffInstance->ImageHeight;
        SetLastError (ERROR_BUFFER_OVERFLOW);
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("buffer is too small"));
        return FALSE;
    }

    TiffInstance->Color = 0;
    TiffInstance->RunLength = 0;
    TiffInstance->StartGood = 0;
    TiffInstance->EndGood = 0;

    return TiffUncompressMmrPageRaw(
        TiffInstance->StripData,
        TiffInstance->StripDataSize,
        TiffInstance->ImageWidth,
        lpdwOutputBuffer,
        dwOutputBufferSize,
        LinesOut
        );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\tifftabl.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifftabl.h

Abstract:

    Tables used for Group3 fax compression and decompression.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/


#ifndef _FAXTABLE_H_
#define _FAXTABLE_H_

//
// Data structure for representing code table entries
//

typedef struct _CODETABLE {

    WORD    length;     // code length
    WORD    code;       // code word itself

} CODETABLE;

typedef const CODETABLE *PCODETABLE;

//
// Code word for end-of-line (EOL)
//  000000000001
//

#define EOL_CODE                   1
#define EOL_REVERSED_CODE          0x0800
#define EOL_LENGTH                 12

#define TAG_1D_EOL_REVERSED_CODE   0x1001
#define TAG_1D_EOL_LENGTH          13

//
// Code word for 2D encoding - pass mode
//  0001
//

#define PASSCODE        1
#define PASSCODE_REVERSED  0x08
#define PASSCODE_LENGTH 4

//
// Code word for 2D encoding - horizontal mode prefix
//  001
//

#define HORZCODE        1
#define HORZCODE_REVERSED  0x04
#define HORZCODE_LENGTH 3

//
// Code word for 2D encoding - vertical mode
//

static const CODETABLE VertCodes[] = {

    {  7, 0x02 },       // 0000010     VTMODE3N
    {  6, 0x02 },       // 000010      VTMODE2N
    {  3, 0x02 },       // 010         VTMODE1N
    {  1, 0x01 },       // 1           VTMODE0
    {  3, 0x03 },       // 011         VTMODE1P
    {  6, 0x03 },       // 000011      VTMODE2P
    {  7, 0x03 },       // 0000011     VTMODE3P
};


static const CODETABLE VertCodesReversed[] = {

    {  7, 0x20 },       // 010 0000    VTMODE3N
    {  6, 0x10 },       // 01 0000     VTMODE2N
    {  3, 0x02 },       // 010         VTMODE1N
    {  1, 0x01 },       // 1           VTMODE0
    {  3, 0x06 },       // 110         VTMODE1P
    {  6, 0x30 },       // 11 0000     VTMODE2P
    {  7, 0x60 },       // 110 0000    VTMODE3P
};




//
// Code table for white runs
//

static const CODETABLE WhiteRunCodes[] = {

    {  8, 0x35 },       // 00110101            0         0
    {  6, 0x07 },       // 000111              1         1
    {  4, 0x07 },       // 0111                2         2
    {  4, 0x08 },       // 1000                3         3
    {  4, 0x0b },       // 1011                4         4
    {  4, 0x0c },       // 1100                5         5
    {  4, 0x0e },       // 1110                6         6
    {  4, 0x0f },       // 1111                7         7
    {  5, 0x13 },       // 10011               8         8
    {  5, 0x14 },       // 10100               9         9
    {  5, 0x07 },       // 00111              10        10
    {  5, 0x08 },       // 01000              11        11
    {  6, 0x08 },       // 001000             12        12
    {  6, 0x03 },       // 000011             13        13
    {  6, 0x34 },       // 110100             14        14
    {  6, 0x35 },       // 110101             15        15
    {  6, 0x2a },       // 101010             16        16
    {  6, 0x2b },       // 101011             17        17
    {  7, 0x27 },       // 0100111            18        18
    {  7, 0x0c },       // 0001100            19        19
    {  7, 0x08 },       // 0001000            20        20
    {  7, 0x17 },       // 0010111            21        21
    {  7, 0x03 },       // 0000011            22        22
    {  7, 0x04 },       // 0000100            23        23
    {  7, 0x28 },       // 0101000            24        24
    {  7, 0x2b },       // 0101011            25        25
    {  7, 0x13 },       // 0010011            26        26
    {  7, 0x24 },       // 0100100            27        27
    {  7, 0x18 },       // 0011000            28        28
    {  8, 0x02 },       // 00000010           29        29
    {  8, 0x03 },       // 00000011           30        30
    {  8, 0x1a },       // 00011010           31        31
    {  8, 0x1b },       // 00011011           32        32
    {  8, 0x12 },       // 00010010           33        33
    {  8, 0x13 },       // 00010011           34        34
    {  8, 0x14 },       // 00010100           35        35
    {  8, 0x15 },       // 00010101           36        36
    {  8, 0x16 },       // 00010110           37        37
    {  8, 0x17 },       // 00010111           38        38
    {  8, 0x28 },       // 00101000           39        39
    {  8, 0x29 },       // 00101001           40        40
    {  8, 0x2a },       // 00101010           41        41
    {  8, 0x2b },       // 00101011           42        42
    {  8, 0x2c },       // 00101100           43        43
    {  8, 0x2d },       // 00101101           44        44
    {  8, 0x04 },       // 00000100           45        45
    {  8, 0x05 },       // 00000101           46        46
    {  8, 0x0a },       // 00001010           47        47
    {  8, 0x0b },       // 00001011           48        48
    {  8, 0x52 },       // 01010010           49        49
    {  8, 0x53 },       // 01010011           50        50
    {  8, 0x54 },       // 01010100           51        51
    {  8, 0x55 },       // 01010101           52        52
    {  8, 0x24 },       // 00100100           53        53
    {  8, 0x25 },       // 00100101           54        54
    {  8, 0x58 },       // 01011000           55        55
    {  8, 0x59 },       // 01011001           56        56
    {  8, 0x5a },       // 01011010           57        57
    {  8, 0x5b },       // 01011011           58        58
    {  8, 0x4a },       // 01001010           59        59
    {  8, 0x4b },       // 01001011           50        60
    {  8, 0x32 },       // 00110010           51        61
    {  8, 0x33 },       // 00110011           52        62
    {  8, 0x34 },       // 00110100           53        63
    {  5, 0x1b },       // 11011              54        64
    {  5, 0x12 },       // 10010              55       128
    {  6, 0x17 },       // 010111             56       192
    {  7, 0x37 },       // 0110111            57       256
    {  8, 0x36 },       // 00110110           58       320
    {  8, 0x37 },       // 00110111           59       384
    {  8, 0x64 },       // 01100100           60       448
    {  8, 0x65 },       // 01100101           61       512
    {  8, 0x68 },       // 01101000           62       576
    {  8, 0x67 },       // 01100111           63       640
    {  9, 0xcc },       // 011001100          64       704
    {  9, 0xcd },       // 011001101          65       768
    {  9, 0xd2 },       // 011010010          66       832
    {  9, 0xd3 },       // 011010011          67       896
    {  9, 0xd4 },       // 011010100          68       960
    {  9, 0xd5 },       // 011010101          69      1024
    {  9, 0xd6 },       // 011010110          70      1088
    {  9, 0xd7 },       // 011010111          71      1152
    {  9, 0xd8 },       // 011011000          72      1216
    {  9, 0xd9 },       // 011011001          73      1280
    {  9, 0xda },       // 011011010          74      1344
    {  9, 0xdb },       // 011011011          75      1408
    {  9, 0x98 },       // 010011000          76      1472
    {  9, 0x99 },       // 010011001          77      1536
    {  9, 0x9a },       // 010011010          78      1600
    {  6, 0x18 },       // 011000             79      1664
    {  9, 0x9b },       // 010011011          80      1728
    { 11, 0x08 },       // 00000001000        81      1792
    { 11, 0x0c },       // 00000001100        82      1856
    { 11, 0x0d },       // 00000001101        83      1920
    { 12, 0x12 },       // 000000010010       84      1984
    { 12, 0x13 },       // 000000010011       85      2048
    { 12, 0x14 },       // 000000010100       86      2112
    { 12, 0x15 },       // 000000010101       87      2176
    { 12, 0x16 },       // 000000010110       88      2240
    { 12, 0x17 },       // 000000010111       89      2304
    { 12, 0x1c },       // 000000011100       90      2368
    { 12, 0x1d },       // 000000011101       91      2432
    { 12, 0x1e },       // 000000011110       92      2496
    { 12, 0x1f },       // 000000011111       93      2560
};

static const CODETABLE WhiteRunCodesReversed[] = {

    {  8, 0x00ac },       // 00110101            0         0
    {  6, 0x0038 },       // 000111              1         1
    {  4, 0x000e },       // 0111                2         2
    {  4, 0x0001 },       // 1000                3         3
    {  4, 0x000d },       // 1011                4         4
    {  4, 0x0003 },       // 1100                5         5
    {  4, 0x0007 },       // 1110                6         6
    {  4, 0x000f },       // 1111                7         7
    {  5, 0x0019 },       // 10011               8         8
    {  5, 0x0005 },       // 10100               9         9
    {  5, 0x001c },       // 00111              10        10
    {  5, 0x0002 },       // 01000              11        11
    {  6, 0x0004 },       // 001000             12        12
    {  6, 0x0030 },       // 000011             13        13
    {  6, 0x000b },       // 110100             14        14
    {  6, 0x002b },       // 110101             15        15
    {  6, 0x0015 },       // 101010             16        16
    {  6, 0x0035 },       // 101011             17        17
    {  7, 0x0072 },       // 0100111            18        18
    {  7, 0x0018 },       // 0001100            19        19
    {  7, 0x0008 },       // 0001000            20        20
    {  7, 0x0074 },       // 0010111            21        21
    {  7, 0x0060 },       // 0000011            22        22
    {  7, 0x0010 },       // 0000100            23        23
    {  7, 0x000a },       // 0101000            24        24
    {  7, 0x006a },       // 0101011            25        25
    {  7, 0x0064 },       // 0010011            26        26
    {  7, 0x0012 },       // 0100100            27        27
    {  7, 0x000c },       // 0011000            28        28
    {  8, 0x0040 },       // 00000010           29        29
    {  8, 0x00c0 },       // 00000011           30        30
    {  8, 0x0058 },       // 00011010           31        31
    {  8, 0x00d8 },       // 00011011           32        32
    {  8, 0x0048 },       // 00010010           33        33
    {  8, 0x00c8 },       // 00010011           34        34
    {  8, 0x0028 },       // 00010100           35        35
    {  8, 0x00a8 },       // 00010101           36        36
    {  8, 0x0068 },       // 00010110           37        37
    {  8, 0x00e8 },       // 00010111           38        38
    {  8, 0x0014 },       // 00101000           39        39
    {  8, 0x0094 },       // 00101001           40        40
    {  8, 0x0054 },       // 00101010           41        41
    {  8, 0x00d4 },       // 00101011           42        42
    {  8, 0x0034 },       // 00101100           43        43
    {  8, 0x00b4 },       // 00101101           44        44
    {  8, 0x0020 },       // 00000100           45        45
    {  8, 0x00a0 },       // 00000101           46        46
    {  8, 0x0050 },       // 00001010           47        47
    {  8, 0x00d0 },       // 00001011           48        48
    {  8, 0x004a },       // 01010010           49        49
    {  8, 0x00ca },       // 01010011           50        50
    {  8, 0x002a },       // 01010100           51        51
    {  8, 0x00aa },       // 01010101           52        52
    {  8, 0x0024 },       // 00100100           53        53
    {  8, 0x00a4 },       // 00100101           54        54
    {  8, 0x001a },       // 01011000           55        55
    {  8, 0x009a },       // 01011001           56        56
    {  8, 0x005a },       // 01011010           57        57
    {  8, 0x00da },       // 01011011           58        58
    {  8, 0x0052 },       // 01001010           59        59
    {  8, 0x00d2 },       // 01001011           50        60
    {  8, 0x004c },       // 00110010           51        61
    {  8, 0x00cc },       // 00110011           52        62
    {  8, 0x002c },       // 00110100           53        63
    {  5, 0x001b },       // 11011              54        64
    {  5, 0x0009 },       // 10010              55       128
    {  6, 0x003a },       // 010111             56       192
    {  7, 0x0076 },       // 0110111            57       256
    {  8, 0x006c },       // 00110110           58       320
    {  8, 0x00ec },       // 00110111           59       384
    {  8, 0x0026 },       // 01100100           60       448
    {  8, 0x00a6 },       // 01100101           61       512
    {  8, 0x0016 },       // 01101000           62       576
    {  8, 0x00e6 },       // 01100111           63       640
    {  9, 0x0066 },       // 011001100          64       704
    {  9, 0x0166 },       // 011001101          65       768
    {  9, 0x0096 },       // 011010010          66       832
    {  9, 0x0196 },       // 011010011          67       896
    {  9, 0x0056 },       // 011010100          68       960
    {  9, 0x0156 },       // 011010101          69      1024
    {  9, 0x00d6 },       // 011010110          70      1088
    {  9, 0x01d6 },       // 011010111          71      1152
    {  9, 0x0036 },       // 011011000          72      1216
    {  9, 0x0136 },       // 011011001          73      1280
    {  9, 0x00b6 },       // 011011010          74      1344
    {  9, 0x01b6 },       // 011011011          75      1408
    {  9, 0x0032 },       // 010011000          76      1472
    {  9, 0x0132 },       // 010011001          77      1536
    {  9, 0x00b2 },       // 010011010          78      1600
    {  6, 0x0006 },       // 011000             79      1664
    {  9, 0x01b2 },       // 010011011          80      1728
    { 11, 0x0080 },       // 00000001000        81      1792
    { 11, 0x0180 },       // 00000001100        82      1856
    { 11, 0x0580 },       // 00000001101        83      1920
    { 12, 0x0480 },       // 000000010010       84      1984
    { 12, 0x0c80 },       // 000000010011       85      2048
    { 12, 0x0280 },       // 000000010100       86      2112
    { 12, 0x0a80 },       // 000000010101       87      2176
    { 12, 0x0680 },       // 000000010110       88      2240
    { 12, 0x0e80 },       // 000000010111       89      2304
    { 12, 0x0380 },       // 000000011100       90      2368
    { 12, 0x0b80 },       // 000000011101       91      2432
    { 12, 0x0780 },       // 000000011110       92      2496
    { 12, 0x0f80 },       // 000000011111       93      2560
};

#define WhiteRunCodeEntries  (sizeof(WhiteRunCodes)/sizeof(CODETABLE))

//
// Code table for black runs
//

static const CODETABLE BlackRunCodes[] = {

    { 10, 0x37 },       // 0000110111          0       0
    {  3, 0x02 },       // 010                 1       1
    {  2, 0x03 },       // 11                  2       2
    {  2, 0x02 },       // 10                  3       3
    {  3, 0x03 },       // 011                 4       4
    {  4, 0x03 },       // 0011                5       5
    {  4, 0x02 },       // 0010                6       6
    {  5, 0x03 },       // 00011               7       7
    {  6, 0x05 },       // 000101              8       8
    {  6, 0x04 },       // 000100              9       9
    {  7, 0x04 },       // 0000100            10      10
    {  7, 0x05 },       // 0000101            11      11
    {  7, 0x07 },       // 0000111            12      12
    {  8, 0x04 },       // 00000100           13      13
    {  8, 0x07 },       // 00000111           14      14
    {  9, 0x18 },       // 000011000          15      15
    { 10, 0x17 },       // 0000010111         16      16
    { 10, 0x18 },       // 0000011000         17      17
    { 10, 0x08 },       // 0000001000         18      18
    { 11, 0x67 },       // 00001100111        19      19
    { 11, 0x68 },       // 00001101000        20      20
    { 11, 0x6c },       // 00001101100        21      21
    { 11, 0x37 },       // 00000110111        22      22
    { 11, 0x28 },       // 00000101000        23      23
    { 11, 0x17 },       // 00000010111        24      24
    { 11, 0x18 },       // 00000011000        25      25
    { 12, 0xca },       // 000011001010       26      26
    { 12, 0xcb },       // 000011001011       27      27
    { 12, 0xcc },       // 000011001100       28      28
    { 12, 0xcd },       // 000011001101       29      29
    { 12, 0x68 },       // 000001101000       30      30
    { 12, 0x69 },       // 000001101001       31      31
    { 12, 0x6a },       // 000001101010       32      32
    { 12, 0x6b },       // 000001101011       33      33
    { 12, 0xd2 },       // 000011010010       34      34
    { 12, 0xd3 },       // 000011010011       35      35
    { 12, 0xd4 },       // 000011010100       36      36
    { 12, 0xd5 },       // 000011010101       37      37
    { 12, 0xd6 },       // 000011010110       38      38
    { 12, 0xd7 },       // 000011010111       39      39
    { 12, 0x6c },       // 000001101100       40      40
    { 12, 0x6d },       // 000001101101       41      41
    { 12, 0xda },       // 000011011010       42      42
    { 12, 0xdb },       // 000011011011       43      43
    { 12, 0x54 },       // 000001010100       44      44
    { 12, 0x55 },       // 000001010101       45      45
    { 12, 0x56 },       // 000001010110       46      46
    { 12, 0x57 },       // 000001010111       47      47
    { 12, 0x64 },       // 000001100100       48      48
    { 12, 0x65 },       // 000001100101       49      49
    { 12, 0x52 },       // 000001010010       50      50
    { 12, 0x53 },       // 000001010011       51      51
    { 12, 0x24 },       // 000000100100       52      52
    { 12, 0x37 },       // 000000110111       53      53
    { 12, 0x38 },       // 000000111000       54      54
    { 12, 0x27 },       // 000000100111       55      55
    { 12, 0x28 },       // 000000101000       56      56
    { 12, 0x58 },       // 000001011000       57      57
    { 12, 0x59 },       // 000001011001       58      58
    { 12, 0x2b },       // 000000101011       59      59
    { 12, 0x2c },       // 000000101100       50      60
    { 12, 0x5a },       // 000001011010       51      61
    { 12, 0x66 },       // 000001100110       52      62
    { 12, 0x67 },       // 000001100111       53      63
    { 10, 0x0f },       // 0000001111         54      64
    { 12, 0xc8 },       // 000011001000       55     128
    { 12, 0xc9 },       // 000011001001       56     192
    { 12, 0x5b },       // 000001011011       57     256
    { 12, 0x33 },       // 000000110011       58     320
    { 12, 0x34 },       // 000000110100       59     384
    { 12, 0x35 },       // 000000110101       60     448
    { 13, 0x6c },       // 0000001101100      61     512
    { 13, 0x6d },       // 0000001101101      62     576
    { 13, 0x4a },       // 0000001001010      63     640
    { 13, 0x4b },       // 0000001001011      64     704
    { 13, 0x4c },       // 0000001001100      65     768
    { 13, 0x4d },       // 0000001001101      66     832
    { 13, 0x72 },       // 0000001110010      67     896
    { 13, 0x73 },       // 0000001110011      68     960
    { 13, 0x74 },       // 0000001110100      69    1024
    { 13, 0x75 },       // 0000001110101      70    1088
    { 13, 0x76 },       // 0000001110110      71    1152
    { 13, 0x77 },       // 0000001110111      72    1216
    { 13, 0x52 },       // 0000001010010      73    1280
    { 13, 0x53 },       // 0000001010011      74    1344
    { 13, 0x54 },       // 0000001010100      75    1408
    { 13, 0x55 },       // 0000001010101      76    1472
    { 13, 0x5a },       // 0000001011010      77    1536
    { 13, 0x5b },       // 0000001011011      78    1600
    { 13, 0x64 },       // 0000001100100      79    1664
    { 13, 0x65 },       // 0000001100101      80    1728
    { 11, 0x08 },       // 00000001000        81    1792
    { 11, 0x0c },       // 00000001100        82    1856
    { 11, 0x0d },       // 00000001101        83    1920
    { 12, 0x12 },       // 000000010010       84    1984
    { 12, 0x13 },       // 000000010011       85    2048
    { 12, 0x14 },       // 000000010100       86    2112
    { 12, 0x15 },       // 000000010101       87    2176
    { 12, 0x16 },       // 000000010110       88    2240
    { 12, 0x17 },       // 000000010111       89    2304
    { 12, 0x1c },       // 000000011100       90    2368
    { 12, 0x1d },       // 000000011101       91    2432
    { 12, 0x1e },       // 000000011110       92    2496
    { 12, 0x1f },       // 000000011111       93    2560
};

static const CODETABLE BlackRunCodesReversed[] = {

    { 10, 0x03b0 },       // 0000110111          0       0
    {  3, 0x0002 },       // 010                 1       1
    {  2, 0x0003 },       // 11                  2       2
    {  2, 0x0001 },       // 10                  3       3
    {  3, 0x0006 },       // 011                 4       4
    {  4, 0x000c },       // 0011                5       5
    {  4, 0x0004 },       // 0010                6       6
    {  5, 0x0018 },       // 00011               7       7
    {  6, 0x0028 },       // 000101              8       8
    {  6, 0x0008 },       // 000100              9       9
    {  7, 0x0010 },       // 0000100            10      10
    {  7, 0x0050 },       // 0000101            11      11
    {  7, 0x0070 },       // 0000111            12      12
    {  8, 0x0020 },       // 00000100           13      13
    {  8, 0x00e0 },       // 00000111           14      14
    {  9, 0x0030 },       // 000011000          15      15
    { 10, 0x03a0 },       // 0000010111         16      16
    { 10, 0x0060 },       // 0000011000         17      17
    { 10, 0x0040 },       // 0000001000         18      18
    { 11, 0x0730 },       // 00001100111        19      19
    { 11, 0x00b0 },       // 00001101000        20      20
    { 11, 0x01b0 },       // 00001101100        21      21
    { 11, 0x0760 },       // 00000110111        22      22
    { 11, 0x00a0 },       // 00000101000        23      23
    { 11, 0x0740 },       // 00000010111        24      24
    { 11, 0x00c0 },       // 00000011000        25      25
    { 12, 0x0530 },       // 000011001010       26      26
    { 12, 0x0d30 },       // 000011001011       27      27
    { 12, 0x0330 },       // 000011001100       28      28
    { 12, 0x0b30 },       // 000011001101       29      29
    { 12, 0x0160 },       // 000001101000       30      30
    { 12, 0x0960 },       // 000001101001       31      31
    { 12, 0x0560 },       // 000001101010       32      32
    { 12, 0x0d60 },       // 000001101011       33      33
    { 12, 0x04b0 },       // 000011010010       34      34
    { 12, 0x0cb0 },       // 000011010011       35      35
    { 12, 0x02b0 },       // 000011010100       36      36
    { 12, 0x0ab0 },       // 000011010101       37      37
    { 12, 0x06b0 },       // 000011010110       38      38
    { 12, 0x0eb0 },       // 000011010111       39      39
    { 12, 0x0360 },       // 000001101100       40      40
    { 12, 0x0b60 },       // 000001101101       41      41
    { 12, 0x05b0 },       // 000011011010       42      42
    { 12, 0x0db0 },       // 000011011011       43      43
    { 12, 0x02a0 },       // 000001010100       44      44
    { 12, 0x0aa0 },       // 000001010101       45      45
    { 12, 0x06a0 },       // 000001010110       46      46
    { 12, 0x0ea0 },       // 000001010111       47      47
    { 12, 0x0260 },       // 000001100100       48      48
    { 12, 0x0a60 },       // 000001100101       49      49
    { 12, 0x04a0 },       // 000001010010       50      50
    { 12, 0x0ca0 },       // 000001010011       51      51
    { 12, 0x0240 },       // 000000100100       52      52
    { 12, 0x0ec0 },       // 000000110111       53      53
    { 12, 0x01c0 },       // 000000111000       54      54
    { 12, 0x0e40 },       // 000000100111       55      55
    { 12, 0x0140 },       // 000000101000       56      56
    { 12, 0x01a0 },       // 000001011000       57      57
    { 12, 0x09a0 },       // 000001011001       58      58
    { 12, 0x0d40 },       // 000000101011       59      59
    { 12, 0x0340 },       // 000000101100       50      60
    { 12, 0x05a0 },       // 000001011010       51      61
    { 12, 0x0660 },       // 000001100110       52      62
    { 12, 0x0e60 },       // 000001100111       53      63
    { 10, 0x03c0 },       // 0000001111         54      64
    { 12, 0x0130 },       // 000011001000       55     128
    { 12, 0x0930 },       // 000011001001       56     192
    { 12, 0x0da0 },       // 000001011011       57     256
    { 12, 0x0cc0 },       // 000000110011       58     320
    { 12, 0x02c0 },       // 000000110100       59     384
    { 12, 0x0ac0 },       // 000000110101       60     448
    { 13, 0x06c0 },       // 0000001101100      61     512
    { 13, 0x16c0 },       // 0000001101101      62     576
    { 13, 0x0a40 },       // 0000001001010      63     640
    { 13, 0x1a40 },       // 0000001001011      64     704
    { 13, 0x0640 },       // 0000001001100      65     768
    { 13, 0x1640 },       // 0000001001101      66     832
    { 13, 0x09c0 },       // 0000001110010      67     896
    { 13, 0x19c0 },       // 0000001110011      68     960
    { 13, 0x05c0 },       // 0000001110100      69    1024
    { 13, 0x15c0 },       // 0000001110101      70    1088
    { 13, 0x0dc0 },       // 0000001110110      71    1152
    { 13, 0x1dc0 },       // 0000001110111      72    1216
    { 13, 0x0940 },       // 0000001010010      73    1280
    { 13, 0x1940 },       // 0000001010011      74    1344
    { 13, 0x0540 },       // 0000001010100      75    1408
    { 13, 0x1540 },       // 0000001010101      76    1472
    { 13, 0x0b40 },       // 0000001011010      77    1536
    { 13, 0x1b40 },       // 0000001011011      78    1600
    { 13, 0x04c0 },       // 0000001100100      79    1664
    { 13, 0x14c0 },       // 0000001100101      80    1728
    { 11, 0x0080 },       // 00000001000        81    1792
    { 11, 0x0180 },       // 00000001100        82    1856
    { 11, 0x0580 },       // 00000001101        83    1920
    { 12, 0x0480 },       // 000000010010       84    1984
    { 12, 0x0c80 },       // 000000010011       85    2048
    { 12, 0x0280 },       // 000000010100       86    2112
    { 12, 0x0a80 },       // 000000010101       87    2176
    { 12, 0x0680 },       // 000000010110       88    2240
    { 12, 0x0e80 },       // 000000010111       89    2304
    { 12, 0x0380 },       // 000000011100       90    2368
    { 12, 0x0b80 },       // 000000011101       91    2432
    { 12, 0x0780 },       // 000000011110       92    2496
    { 12, 0x0f80 },       // 000000011111       93    2560
};


#define BlackRunCodeEntries  (sizeof(BlackRunCodes)/sizeof(CODETABLE))


#define BADRUN      3000
#define DECODEEOL   3001
#define DECODEEOL2  3002
#define HORZMODE    3003
#define VTMODE3N    3004
#define VTMODE2N    3005
#define VTMODE1N    3006
#define VTMODE0     3007
#define VTMODE1P    3008
#define VTMODE2P    3009
#define VTMODE3P    3010
#define PASSMODE    3011


typedef struct _DECODE_TREE {
    INT     Left;
    INT     Right;
} DECODE_TREE;

typedef CONST DECODE_TREE *PDECODE_TREE;


static const DECODE_TREE WhiteDecodeTree[] =
{
    {         1,                 80  },                   // 0
    {        40,                  2  },                   // 1
    {        21,                  3  },                   // 2
    {         4,                 -2  },                   // 3
    {        16,                  5  },                   // 4
    {        10,                  6  },                   // 5
    {         7,               -256  },                   // 6
    {         9,                  8  },                   // 7
    {     -1344,              -1408  },                   // 8
    {     -1216,              -1280  },                   // 9
    {        11,                 13  },                   // 10
    {      -576,                 12  },                   // 11
    {      -832,               -896  },                   // 12
    {        14,                 15  },                   // 13
    {      -960,              -1024  },                   // 14
    {     -1088,              -1152  },                   // 15
    {     -1664,                 17  },                   // 16
    {        18,                 19  },                   // 17
    {      -448,               -512  },                   // 18
    {        20,               -640  },                   // 19
    {      -704,               -768  },                   // 20
    {        32,                 22  },                   // 21
    {        23,                 28  },                   // 22
    {        24,                 26  },                   // 23
    {       -24,                 25  },                   // 24
    {       -49,                -50  },                   // 25
    {        27,                -25  },                   // 26
    {       -51,                -52  },                   // 27
    {        29,               -192  },                   // 28
    {        30,                 31  },                   // 29
    {       -55,                -56  },                   // 30
    {       -57,                -58  },                   // 31
    {       -11,                 33  },                   // 32
    {        34,                 36  },                   // 33
    {       -27,                 35  },                   // 34
    {       -59,                -60  },                   // 35
    {        37,                -18  },                   // 36
    {        38,                 39  },                   // 37
    {     -1472,              -1536  },                   // 38
    {     -1600,              -1728  },                   // 39
    {        59,                 41  },                   // 40
    {        49,                 42  },                   // 41
    {        43,                -10  },                   // 42
    {        47,                 44  },                   // 43
    {        46,                 45  },                   // 44
    {      -320,               -384  },                   // 45
    {       -63,                  0  },                   // 46
    {       -28,                 48  },                   // 47
    {       -61,                -62  },                   // 48
    {        56,                 50  },                   // 49
    {        53,                 51  },                   // 50
    {        52,                -21  },                   // 51
    {       -43,                -44  },                   // 52
    {        55,                 54  },                   // 53
    {       -41,                -42  },                   // 54
    {       -39,                -40  },                   // 55
    {       -12,                 57  },                   // 56
    {        58,                -26  },                   // 57
    {       -53,                -54  },                   // 58
    {        70,                 60  },                   // 59
    {        64,                 61  },                   // 60
    {        62,                 -1  },                   // 61
    {       -19,                 63  },                   // 62
    {       -31,                -32  },                   // 63
    {        68,                 65  },                   // 64
    {        67,                 66  },                   // 65
    {       -37,                -38  },                   // 66
    {       -35,                -36  },                   // 67
    {       -20,                 69  },                   // 68
    {       -33,                -34  },                   // 69
    {        74,                 71  },                   // 70
    {        72,                -13  },                   // 71
    {       -23,                 73  },                   // 72
    {       -47,                -48  },                   // 73
    {        77,                 75  },                   // 74
    {        76,                -22  },                   // 75
    {       -45,                -46  },                   // 76
    {        79,                 78  },                   // 77
    {       -29,                -30  },                   // 78
    { DECODEEOL,                 92  },                   // 79 
    {        86,                 81  },                   // 80
    {        83,                 82  },                   // 81
    {        -6,                 -7  },                   // 82
    {        -5,                 84  },                   // 83
    {        85,                -64  },                   // 84
    {       -14,                -15  },                   // 85
    {        90,                 87  },                   // 86
    {        88,                 -4  },                   // 87
    {        -9,                 89  },                   // 88
    {       -16,                -17  },                   // 89
    {        -3,                 91  },                   // 90
    {      -128,                 -8  },                   // 91
//  From here we use long run-length
    {        93,                 94  },                   // 92
    {        95,                 96  },                   // 93
    {        97,                 98  },                   // 94
    {     -1792,                 99  },                   // 95
    {       100,                101  },                   // 96
    {     -1856,              -1920  },                   // 97
    {       102,                103  },                   // 98
    {     -1984,              -2048  },                   // 99
    {     -2112,              -2176  },                   // 100
    {     -2240,              -2304  },                   // 101
    {     -2368,              -2432  },                   // 102
    {     -2496,              -2560  }                   // 103
    
};

#define WhiteDecodeEntries  (sizeof(WhiteDecodeTree)/sizeof(DECODE_TREE))


static const DECODE_TREE BlackDecodeTree[] =
{
    {         2,                  1  },                   // 0
    {        -3,                 -2  },                   // 1
    {         4,                  3  },                   // 2
    {        -1,                 -4  },                   // 3
    {         6,                  5  },                   // 4
    {        -6,                 -5  },                   // 5
    {         9,                  7  },                   // 6
    {         8,                 -7  },                   // 7
    {        -9,                 -8  },                   // 8
    {        31,                 10  },                   // 9
    {        30,                 11  },                   // 10
    {        12,                -12  },                   // 11
    {        23,                 13  },                   // 12
    {        17,                 14  },                   // 13
    {        15,                  0  },                   // 14
    {       -21,                 16  },                   // 15
    {       -42,                -43  },                   // 16
    {        21,                 18  },                   // 17
    {        20,                 19  },                   // 18
    {       -38,                -39  },                   // 19
    {       -36,                -37  },                   // 20
    {       -20,                 22  },                   // 21
    {       -34,                -35  },                   // 22
    {       -15,                 24  },                   // 23
    {        27,                 25  },                   // 24
    {        26,                -19  },                   // 25
    {       -28,                -29  },                   // 26
    {        29,                 28  },                   // 27
    {       -26,                -27  },                   // 28
    {      -128,               -192  },                   // 29
    {       -10,                -11  },                   // 30
    {        57,                 32  },                   // 31
    {        45,                 33  },                   // 32
    {        34,                -14  },                   // 33
    {        41,                 35  },                   // 34
    {        38,                 36  },                   // 35
    {        37,                -22  },                   // 36
    {       -40,                -41  },                   // 37
    {        40,                 39  },                   // 38
    {       -32,                -33  },                   // 39
    {       -30,                -31  },                   // 40
    {       -17,                 42  },                   // 41
    {        44,                 43  },                   // 42
    {       -62,                -63  },                   // 43
    {       -48,                -49  },                   // 44
    {       -13,                 46  },                   // 45
    {        51,                 47  },                   // 46
    {        48,                -16  },                   // 47
    {        50,                 49  },                   // 48
    {       -61,               -256  },                   // 49
    {       -57,                -58  },                   // 50
    {        55,                 52  },                   // 51
    {        54,                 53  },                   // 52
    {       -46,                -47  },                   // 53
    {       -44,                -45  },                   // 54
    {       -23,                 56  },                   // 55
    {       -50,                -51  },                   // 56
    {        91,                 58  },                   // 57 
    {        75,                 59  },                   // 58
    {        67,                 60  },                   // 59
    {        61,                -64  },                   // 60
    {        65,                 62  },                   // 61
    {        64,                 63  },                   // 62
    {     -1152,              -1216  },                   // 63
    {     -1024,              -1088  },                   // 64
    {       -54,                 66  },                   // 65
    {      -896,               -960  },                   // 66
    {        72,                 68  },                   // 67
    {        71,                 69  },                   // 68
    {        70,                -53  },                   // 69
    {      -512,               -576  },                   // 70
    {      -384,               -448  },                   // 71
    {       -25,                 73  },                   // 72
    {        74,               -320  },                   // 73
    {     -1664,              -1728  },                   // 74
    {        85,                 76  },                   // 75
    {        80,                 77  },                   // 76
    {        78,                -24  },                   // 77
    {       -60,                 79  },                   // 78
    {     -1536,              -1600  },                   // 79
    {        83,                 81  },                   // 80
    {        82,                -59  },                   // 81
    {     -1408,              -1472  },                   // 82
    {       -56,                 84  },                   // 83
    {     -1280,              -1344  },                   // 84
    {       -18,                 86  },                   // 85
    {        89,                 87  },                   // 86
    {        88,                -55  },                   // 87
    {      -768,               -832  },                   // 88
    {       -52,                 90  },                   // 89
    {      -640,               -704  },                   // 90

    //  From here we use long run-length
    { DECODEEOL,                 92  },                   // 91

    //  Exact copy from WhiteDecodeTree
    {        93,                 94  },                   // 92
    {        95,                 96  },                   // 93
    {        97,                 98  },                   // 94
    {     -1792,                 99  },                   // 95
    {       100,                101  },                   // 96
    {     -1856,              -1920  },                   // 97
    {       102,                103  },                   // 98
    {     -1984,              -2048  },                   // 99
    {     -2112,              -2176  },                   // 100
    {     -2240,              -2304  },                   // 101
    {     -2368,              -2432  },                   // 102
    {     -2496,              -2560  }                    // 103


};

#define BlackDecodeEntries  (sizeof(BlackDecodeTree)/sizeof(DECODE_TREE))


static const DECODE_TREE TwoDecodeTree[] =
{
    {         1,            VTMODE0  },                   // 0
    {         2,                  3  },                   // 1
    {         4,           HORZMODE  },                   // 2
    {  VTMODE1N,           VTMODE1P  },                   // 3
    {         5,           PASSMODE  },                   // 4
    {         6,                  7  },                   // 5
    {         8,                  9  },                   // 6
    {  VTMODE2N,           VTMODE2P  },                   // 7
    { DECODEEOL,             BADRUN  },                   // 8
    {  VTMODE3N,           VTMODE3P  }                    // 9
};


static const BYTE BitReverseTable[256] =
{
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
};



static const BYTE First1[256] = {
    0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
};



static const BYTE Last1[256] = {
    0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0
};


static const BYTE All1[8] = {
    0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe
};


#endif  // !_FAXTABLE_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\tifflibp.h ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifflibp.h

Abstract:

    This file is the private header file for the
    TIFF support library.  All source files in this
    library include this header only.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tchar.h>

#include "faxutil.h"
#include "tifflib.h"
#include "tiff.h"
#include "tifftabl.h"


#define TIFFDBG 0

//
// Find the next pixel on the scanline whose color is opposite of
// the specified color, starting from the specified starting point
//

#define NextChangingElement( pbuf, startBit, stopBit, isBlack ) \
        ((startBit) + ((isBlack) ? FindBlackRun((pbuf), (startBit), (stopBit)) : \
                                   FindWhiteRun((pbuf), (startBit), (stopBit))))

//
// Check if the specified pixel on the scanline is black or white
//  1 - the specified pixel is black
//  0 - the specified pixel is white
//
#define GetBit( pbuf, bit )   (((pbuf)[(bit) >> 3] >> (((bit) ^ 7) & 7)) & 1)


#define Align(p, x)  (((x) & ((p)-1)) ? (((x) & ~((p)-1)) + p) : (x))

#define WHITE       0
#define BLACK       0xff
#define BYTEBITS    8
#define WORDBITS    (sizeof(WORD)  * BYTEBITS)
#define DWORDBITS   (sizeof(DWORD) * BYTEBITS)

//
// IFD entries we generate for each page
//
// ******************************************************
// *->
// *-> WARNING:    these constants must be sorted by
// *->             the ifd values.  it is a T.4
// *->             requirement that all TIFF IFDs be
// *->             sorted.
// *->
// *->             if you change these constants then
// *->             don't forget to go change the
// *->             IFD template in tifflib.c
// *->
// ******************************************************
//

#define IFD_NEWSUBFILETYPE       0               // 254
#define IFD_IMAGEWIDTH           1               // 256
#define IFD_IMAGEHEIGHT          2               // 257
#define IFD_BITSPERSAMPLE        3               // 258
#define IFD_COMPRESSION          4               // 259
#define IFD_PHOTOMETRIC          5               // 262
#define IFD_FILLORDER            6               // 266
#define IFD_STRIPOFFSETS         7               // 273
#define IFD_SAMPLESPERPIXEL      8               // 277
#define IFD_ROWSPERSTRIP         9               // 278
#define IFD_STRIPBYTECOUNTS     10               // 279
#define IFD_XRESOLUTION         11               // 281
#define IFD_YRESOLUTION         12               // 282
#define IFD_G3OPTIONS           13               // 292
#define IFD_RESUNIT             14               // 296
#define IFD_PAGENUMBER          15               // 297
#define IFD_SOFTWARE            16               // 305
#define IFD_CLEANFAXDATA        17               // 327
#define IFD_BADFAXLINES         18               // 328

#define NUM_IFD_ENTRIES         19



#pragma pack(1)
//
// Data structure for representing a single IFD entry
//
typedef struct {
    WORD    tag;        // field tag
    WORD    type;       // field type
    DWORD   count;      // number of values
    DWORD   value;      // value or value offset
} IFDENTRY, *PIFDENTRY;

typedef struct {
    WORD        wIFDEntries;
    IFDENTRY    ifd[NUM_IFD_ENTRIES];
    DWORD       nextIFDOffset;
    DWORD       filler;
    DWORD       xresNum;
    DWORD       xresDenom;
    DWORD       yresNum;
    DWORD       yresDenom;
    CHAR        software[32];
} FAXIFD, *PFAXIFD;
#pragma pack()


typedef struct _STRIP_INFO {
    DWORD           Offset;
    DWORD           Bytes;
    LPBYTE          Data;
} STRIP_INFO, *PSTRIP_INFO;

typedef struct TIFF_INSTANCE_DATA {
    HANDLE          hFile;                          // file handle for TIFF file
    HANDLE          hMap;                           // file mapping handle
    LPBYTE          fPtr;                           // mapped file pointer
    TCHAR           FileName[MAX_PATH];             // tiff file name
    TIFF_HEADER     TiffHdr;                        // TIFF header
    FAXIFD          TiffIfd;                        // ifd
    DWORD           PageCount;                      // number of pages written to the TIFF file
    DWORD           DataOffset;                     // offset to the beginning of current data block
    DWORD           IfdOffset;                      // offset to the current ifd pointer
    DWORD           Lines;                          // number of lines written to the TIFF file
    DWORD           CompressionType;
    DWORD           Bytes;
    BYTE            Buffer[FAXBYTES*3];
    LPBYTE          CurrLine;
    LPBYTE          RefLine;
    DWORD           CurrPage;
    LPVOID          StripData;
    LPBYTE          CurrPtr;
    DWORD           StripDataSize;
    DWORD           RowsPerStrip;
    DWORD           StripOffset;
    DWORD           ImageWidth;
    DWORD           ImageHeight;
    DWORD           Color;
    DWORD           RunLength;
    DWORD           bitdata;
    DWORD           bitcnt;
    PBYTE           bitbuf;
    DWORD           PhotometricInterpretation;
    DWORD           FillOrder;
    PTIFF_TAG       TagImageLength;
    PTIFF_TAG       TagRowsPerStrip;
    PTIFF_TAG       TagStripByteCounts;
    PTIFF_TAG       TagFillOrder;
    PTIFF_TAG       TagCleanFaxData;
    PTIFF_TAG       TagBadFaxLines;
    DWORD           FileSize;
    DWORD           StartGood;
    DWORD           EndGood;
    DWORD           BadFaxLines;
    DWORD           CleanFaxData;
    DWORD           YResolution;
    DWORD           XResolution;
    DWORD           BytesPerLine;
} TIFF_INSTANCE_DATA, *PTIFF_INSTANCE_DATA;


typedef struct _IFD_ENTRY
{
    LIST_ENTRY          ListEntry;                  // linked list pointers
    DWORD               dwIFDOffset;                    // Offset of IFD from the begining of the file
} IFD_ENTRY, *PIFD_ENTRY;

#define SOFTWARE_STR            "Windows NT Fax Server\0         "
#define SOFTWARE_STR_LEN        32
#define SERVICE_SIGNATURE       'xafS'
#define TIFFF_RES_X             204
#define TIFFF_RES_Y             196

//
// Output a sequence of compressed bits
//

__inline void
OutputBits(
    PTIFF_INSTANCE_DATA TiffInstance,
    WORD                Length,
    WORD                Code
    )
{
    TiffInstance->bitdata |= Code << (TiffInstance->bitcnt - Length);
    if ( (TiffInstance->bitcnt -= Length) <= 2*BYTEBITS) {
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 3*BYTEBITS);
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 2*BYTEBITS);
        TiffInstance->bitdata <<= 2*BYTEBITS;
        TiffInstance->bitcnt += 2*BYTEBITS;
    }
}

//
// Flush any leftover bits into the compressed bitmap buffer
//

__inline void
FlushBits(
    PTIFF_INSTANCE_DATA TiffInstance
    )
{
    while (TiffInstance->bitcnt < DWORDBITS) {
        TiffInstance->bitcnt += BYTEBITS;
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 3*BYTEBITS);
        TiffInstance->bitdata <<= BYTEBITS;
    }
    TiffInstance->bitdata = 0;
    TiffInstance->bitcnt = DWORDBITS;
}

__inline void
FlushLine(
    PTIFF_INSTANCE_DATA TiffInstance,
    DWORD PadLength
    )
{
    if (TiffInstance->bitcnt < DWORDBITS) {
        TiffInstance->bitcnt += BYTEBITS;
        *TiffInstance->bitbuf++ = (BYTE) (TiffInstance->bitdata >> 3*BYTEBITS);
        TiffInstance->bitdata = 0;
        TiffInstance->bitcnt = DWORDBITS;
    }
    if (PadLength) {
        TiffInstance->bitbuf += ((PadLength / 8) - TiffInstance->BytesPerLine);
    }
}

//
// Output a runlength of white or black bits
//

__inline void
OutputCodeBits(
    PTIFF_INSTANCE_DATA TiffInstance,
    INT                 RunLength
    )
{
    INT i;
    if (RunLength > 0) {

        TiffInstance->RunLength += RunLength;

        if (TiffInstance->Color) {

            //
            // black run
            //

            for (i=0; i<RunLength/BYTEBITS; i++) {
                OutputBits( TiffInstance, BYTEBITS, BLACK );
            }
            if (RunLength%BYTEBITS) {
                OutputBits( TiffInstance, (WORD)(RunLength%BYTEBITS), (WORD)((1<<(RunLength%BYTEBITS))-1) );
            }

        } else {

            //
            // white run
            //

            for (i=0; i<RunLength/BYTEBITS; i++) {
                OutputBits( TiffInstance, BYTEBITS, WHITE );
            }
            if (RunLength%BYTEBITS) {
                OutputBits( TiffInstance, (WORD)(RunLength%BYTEBITS), WHITE );
            }

        }
    }
}


__inline BOOL
GetTagData(
    PTIFF_INSTANCE_DATA pTiffInstance,
    DWORD Index,
    PTIFF_TAG TiffTag,
    OUT LPDWORD lpdwResult
    )

/*++
Routine Description:

    Gets the data associated with a given IFD tag

Arguments:

    RefPointer  -  Beginning of the data block
    Index       -  The index for data values that have an
                   array of values greater than zero
    TiffTag     -  Pointer to valid TIFF IFD tag
    lpdwResult  -  Pointer to return buffer

Return Value:
    TRUE for success, FALSE for failure
--*/

{
    DWORD dwOffset;
    BOOL RetVal = TRUE;

    switch (TiffTag->DataType)
    {
    case TIFF_SHORT:
        if (TiffTag->DataCount == 1) 
        {
            *lpdwResult = (DWORD) TiffTag->DataOffset;
        }
        else
        {
            dwOffset = TiffTag->DataOffset + (sizeof(WORD) * Index);
            if (dwOffset > pTiffInstance->FileSize - sizeof(WORD))
            {
                RetVal = FALSE;
            }
            else
            {
                *lpdwResult = (DWORD)(*(WORD UNALIGNED *)(pTiffInstance->fPtr + dwOffset));
            }
        }
        break;

    case TIFF_RATIONAL:
        dwOffset = TiffTag->DataOffset + (sizeof(DWORD) * Index);
        if (dwOffset > pTiffInstance->FileSize - sizeof(DWORD))
        {
            RetVal = FALSE;
        }
        else
        {
            *lpdwResult = *(DWORD UNALIGNED *)(pTiffInstance->fPtr + dwOffset);
        }
        break;

    case TIFF_ASCII:
        if (TiffTag->DataCount < 4 ) 
        {
            *lpdwResult = (DWORD) TiffTag->DataOffset;
        }
        else 
        {
            dwOffset = TiffTag->DataOffset + (sizeof(DWORD) * Index);
            if (dwOffset > pTiffInstance->FileSize - sizeof(DWORD))
            {
                RetVal = FALSE;
            }
            else
            {
                *lpdwResult = *(DWORD UNALIGNED *)(pTiffInstance->fPtr + dwOffset);
            }
        }
        break;

    default:  // Assuming it's a 32-bit value
        if (TiffTag->DataCount == 1)
        {
            *lpdwResult = (DWORD) TiffTag->DataOffset;
        }
        else
        {
            dwOffset = TiffTag->DataOffset + (sizeof(DWORD) * Index);
            if (dwOffset > pTiffInstance->FileSize - sizeof(DWORD))
            {
                RetVal = FALSE;
            }
            else
            {
                *lpdwResult = *(DWORD UNALIGNED *)(pTiffInstance->fPtr + dwOffset);
            }
        }
        break;
    }

    return RetVal;
}

//
// prototypes
//

INT
FindWhiteRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    );

INT
FindBlackRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    );

BOOL
DecodeUnCompressedFaxData(
    IN OUT PTIFF_INSTANCE_DATA	TiffInstance,
    OUT LPBYTE					OutputBuffer,
	IN DWORD					dwOutputBuffSize
    );

BOOL
DecodeMHFaxData(
    IN OUT	PTIFF_INSTANCE_DATA	TiffInstance,
    OUT		LPBYTE              OutputBuffer,
    IN		DWORD				dwOutputBuffSize,
	IN		BOOL                SingleLineBuffer,
    IN		DWORD               PadLength
    );

BOOL
DecodeMRFaxData(
    IN OUT	PTIFF_INSTANCE_DATA	TiffInstance,
    OUT		LPBYTE              OutputBuffer,
    IN		DWORD				dwOutputBuffSize,
	IN		BOOL                SingleLineBuffer,
    IN		DWORD               PadLength
    );

BOOL
DecodeMMRFaxData(
    IN OUT	PTIFF_INSTANCE_DATA	TiffInstance,
    OUT		LPBYTE              OutputBuffer,
    IN		DWORD				dwOutputBuffSize,
	IN		BOOL                SingleLineBuffer,
    IN		DWORD               PadLength
    );


BOOL
EncodeFaxPageMmrCompression(
    PTIFF_INSTANCE_DATA TiffInstance,
    PBYTE               plinebuf,
    INT                 lineWidth,
    DWORD               ImageHeight,
    DWORD               *DestSize
    );


BOOL
PostProcessMhToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO TiffInfo,
    LPTSTR      SrcFileName
    );

BOOL
PostProcessMrToMmr(
    HANDLE      hTiffSrc,
    TIFF_INFO TiffInfo,
    LPTSTR      SrcFileName
    );

BOOL
GetTiffBits(
    HANDLE  hTiff,
    LPBYTE Buffer,
    LPDWORD BufferSize,
    DWORD FillOrder
    );

BOOL
EncodeMmrBranding(
    PBYTE               pBrandBits,
    LPDWORD             pMmrBrandBits,
    INT                 BrandHeight,
    INT                 BrandWidth,
    DWORD              *DwordsOut,
    DWORD              *BitsOut
    );




__inline
VOID
OutputRunFastReversed(
    INT                 run,
    INT                 color,
    LPDWORD            *lpdwOut,
    BYTE               *BitOut
    )


{
    PCODETABLE          pCodeTable;
    PCODETABLE          pTableEntry;

    pCodeTable = (color == BLACK) ? BlackRunCodesReversed : WhiteRunCodesReversed;

    // output makeup code if exists
    if (run >= 64) {

#ifdef RDEBUG
        if ( g_fDebGlobOut )
        if (g_fDebGlobOutPrefix) {
            if (color == BLACK) {
                _tprintf( TEXT ("b%d "), (run & 0xffc0) );
            }
            else {
                _tprintf( TEXT ("w%d "), (run & 0xffc0) );
            }
        }
#endif



        pTableEntry = pCodeTable + (63 + (run >> 6));

        **lpdwOut = **lpdwOut + (((DWORD) (pTableEntry->code)) << (*BitOut));

        if ( ( (*BitOut) = (*BitOut) + pTableEntry->length ) > 31)  {
            (*BitOut) -= 32;
            *(++(*lpdwOut)) = (((DWORD) (pTableEntry->code)) >> (pTableEntry->length - (*BitOut)) );
        }


        run &= 0x3f;
    }

    // output terminating code always

#ifdef RDEBUG

    if ( g_fDebGlobOut )
    if (g_fDebGlobOutPrefix) {

        if (color == BLACK) {
            _tprintf( TEXT ("b%d "), run );
        }
        else {
            _tprintf( TEXT ("w%d "), run );
        }
    }
#endif


    pTableEntry = pCodeTable + run;

    **lpdwOut = **lpdwOut + (((DWORD) (pTableEntry->code)) << (*BitOut));

    if ( ( (*BitOut) = (*BitOut) + pTableEntry->length ) > 31)  {
        (*BitOut) -= 32;
        *(++(*lpdwOut)) = (((DWORD) (pTableEntry->code)) >> (pTableEntry->length - (*BitOut)) );
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\tifflib.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    tifflib.c

Abstract:

    This file contains all of the public TIFF library functions.
    The following functions are available from this library:

        o TiffCreate            Creates a new TIFF file
        o TiffOpen              Opens an existing TIFF file
        o TiffClose             Closes a previously open or created TIFF file
        o TiffStartPage         Starts a new page for writing
        o TiffEndPage           Ends a page for writing
        o TiffWriteRaw          Writes a line of TIFF data with no-encoding
        o TiffRead              Reads a page of TIFF data
        o TiffSeekToPage        Positions to a page for reading

	The following functions are removed because unused and can be added later using SourceDepot History:

        o TiffWrite             Writes a line of TIFF data

    This library can be used anywhere in user mode and is thread
    safe for multithreaded apps.

    The encoding methods implemented in this library are coded
    to the ITU specification labeled T.4 03/93.


Environment:

        WIN32 User Mode


Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include <windows.h>
#include <shellapi.h>
#include <faxreg.h>
#include <mbstring.h>

#include "tifflibp.h"
#pragma hdrstop

#include "fasttiff.h"

#define TIFF_DEBUG_LOG_FILE  _T("FXSTIFFDebugLogFile.txt")

//
// IFD template for creating a new TIFF data page
//

FAXIFD const gc_FaxIFDTemplate = {

    NUM_IFD_ENTRIES,

    {
        { TIFFTAG_SUBFILETYPE,     TIFF_LONG,                    1, FILETYPE_PAGE          },   // 254
        { TIFFTAG_IMAGEWIDTH,      TIFF_LONG,                    1, 0                      },   // 256
        { TIFFTAG_IMAGELENGTH,     TIFF_LONG,                    1, 0                      },   // 257
        { TIFFTAG_BITSPERSAMPLE,   TIFF_SHORT,                   1, 1                      },   // 258
        { TIFFTAG_COMPRESSION,     TIFF_SHORT,                   1, 0                      },   // 259
        { TIFFTAG_PHOTOMETRIC,     TIFF_SHORT,                   1, PHOTOMETRIC_MINISWHITE },   // 262
        { TIFFTAG_FILLORDER,       TIFF_SHORT,                   1, FILLORDER_LSB2MSB      },   // 266
        { TIFFTAG_STRIPOFFSETS,    TIFF_LONG,                    1, 0                      },   // 273
        { TIFFTAG_SAMPLESPERPIXEL, TIFF_SHORT,                   1, 1                      },   // 277
        { TIFFTAG_ROWSPERSTRIP,    TIFF_LONG,                    1, 0                      },   // 278
        { TIFFTAG_STRIPBYTECOUNTS, TIFF_LONG,                    1, 0                      },   // 279
        { TIFFTAG_XRESOLUTION,     TIFF_RATIONAL,                1, 0                      },   // 281
        { TIFFTAG_YRESOLUTION,     TIFF_RATIONAL,                1, 0                      },   // 282
        { TIFFTAG_GROUP3OPTIONS,   TIFF_LONG,                    1, 0                      },   // 292
        { TIFFTAG_RESOLUTIONUNIT,  TIFF_SHORT,                   1, RESUNIT_INCH           },   // 296
        { TIFFTAG_PAGENUMBER,      TIFF_SHORT,                   2, 0                      },   // 297
        { TIFFTAG_SOFTWARE,        TIFF_ASCII,    SOFTWARE_STR_LEN, 0                      },   // 305
        { TIFFTAG_CLEANFAXDATA,    TIFF_SHORT,                   1, 0                      },   // 327
        { TIFFTAG_CONSECUTIVEBADFAXLINES, TIFF_SHORT,            1, 0                      }    // 328
    },

    0,
    SERVICE_SIGNATURE,
    TIFFF_RES_X,
    1,
    TIFFF_RES_Y,
    1,
    SOFTWARE_STR
};

//#define RDEBUG  1
#ifdef RDEBUG
    // Debugging
    BOOL g_fDebGlobOut;
    BOOL g_fDebGlobOutColors;
    BOOL g_fDebGlobOutPrefix;
#endif

//#define RDEBUGS  1

#ifdef RDEBUGS
    // Debugging
    BOOL g_fDebGlobOutS;
#endif


#ifndef FAX_TIFF_LIB_P
//
// DllMain is in the DLL only
//

DWORD
DllMain(
    HINSTANCE hInstance,
    DWORD     Reason,
    LPVOID    Context
    )

/*++

Routine Description:

    DLL initialization function.

Arguments:

    hInstance   - Instance handle
    Reason      - Reason for the entrypoint being called
    Context     - Context record

Return Value:

    TRUE        - Initialization succeeded
    FALSE       - Initialization failed

--*/

{
    if (DLL_PROCESS_ATTACH == Reason)
    {
        DisableThreadLibraryCalls(hInstance);
        OPEN_DEBUG_FILE(TIFF_DEBUG_LOG_FILE);
        return FXSTIFFInitialize();
    }
    if (DLL_PROCESS_DETACH == Reason)
    {
        HeapCleanup();
        CLOSE_DEBUG_FILE;
    }
    return TRUE;
}

#endif //FAX_TIFF_LIB_P

BOOL
FXSTIFFInitialize(
    VOID
    )
{
    //
    // Becuase the process is not always terminated when the service is stopped,
    // We must not have any staticly initialized global variables.
    // Initialize FXSTIFF global variables before starting the service
    //

//#define RDEBUG  1
#ifdef RDEBUG
    // Debugging
    BOOL g_fDebGlobOut=0;
    BOOL g_fDebGlobOutColors=1;
    BOOL g_fDebGlobOutPrefix=1;
#endif

//#define RDEBUGS  1

#ifdef RDEBUGS
    // Debugging
    BOOL g_fDebGlobOutS=0;
#endif
    return TRUE;
}




// Each Tiff we create have ImageWidth, and this tag is written right away.
HANDLE
TiffCreate(
    LPTSTR FileName,
    DWORD  CompressionType,
    DWORD  ImageWidth,
    DWORD  FillOrder,
    DWORD  HiRes
    )

/*++

Routine Description:

    Creates a new TIFF file.  The act of creating a new
    file requires more than just opening the file.  The
    TIFF header is written and instance data is initialized
    for further operations on the new file.

    If FileName is NULL, no file is created.  This is used to
    to in memory decoding/encoding.

Arguments:

    FileName            - Full or partial path/file name
    CompressionType     - Requested compression type, see tifflib.h
    ImageWidth          - Width of the image in pixels

Return Value:

    Handle to the new TIFF file or NULL on error.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance;
    DWORD               Bytes;



    TiffInstance = MemAlloc( sizeof(TIFF_INSTANCE_DATA) );
    if (!TiffInstance) {
        return NULL;
    }
    ZeroMemory(TiffInstance, sizeof(TIFF_INSTANCE_DATA));

    if (FileName != NULL) {

        TiffInstance->hFile = SafeCreateFile(
            FileName,
            GENERIC_READ | GENERIC_WRITE,
            0,
            NULL,
            CREATE_ALWAYS,
            0,
            NULL);
        if (TiffInstance->hFile == INVALID_HANDLE_VALUE) {
            return NULL;
        }

    } else {

        TiffInstance->hFile = INVALID_HANDLE_VALUE;

    }

    if (FileName) {
        _tcsncpy( TiffInstance->FileName, FileName, ARR_SIZE(TiffInstance->FileName) - 1 );
    }

    TiffInstance->TiffHdr.Identifier = 0x4949;
    TiffInstance->TiffHdr.Version    = 0x2a;
    TiffInstance->TiffHdr.IFDOffset  = 0;
    TiffInstance->PageCount          = 0;
    TiffInstance->DataOffset         = 0;
    TiffInstance->IfdOffset          = FIELD_OFFSET( TIFF_HEADER, IFDOffset );
    TiffInstance->CompressionType    = CompressionType;
    TiffInstance->bitdata            = 0;
    TiffInstance->bitcnt             = DWORDBITS;
    TiffInstance->ImageWidth         = ImageWidth;
    TiffInstance->FillOrder          = FillOrder;

    if (HiRes) {
        TiffInstance->YResolution = 196;
    }
    else {
        TiffInstance->YResolution = 98;
    }

    FillMemory( TiffInstance->Buffer, sizeof(TiffInstance->Buffer), WHITE );

    TiffInstance->RefLine  = &TiffInstance->Buffer[0];
    TiffInstance->CurrLine = &TiffInstance->Buffer[FAXBYTES];
    TiffInstance->bitbuf   = &TiffInstance->Buffer[FAXBYTES];

    CopyMemory( &TiffInstance->TiffIfd, &gc_FaxIFDTemplate, sizeof(gc_FaxIFDTemplate) );

    if (TiffInstance->hFile != INVALID_HANDLE_VALUE) {
        if (!WriteFile(
            TiffInstance->hFile,
            &TiffInstance->TiffHdr,
            sizeof(TIFF_HEADER),
            &Bytes,
            NULL
            )) {
                CloseHandle( TiffInstance->hFile );
                DeleteFile( FileName );
                MemFree( TiffInstance );
                return NULL;
        }
    }

    return TiffInstance;
}

__inline
DWORD
IFDTagsSize(
    WORD NumDirEntries
    )
/*++
Routine Description:

    Returns the size of IFD Tags (in bytes) without the terminating offset field
    (For more info look at TIFF(tm) Specification Rev. 6.0 Final)

Arguments:

    NumDirEntries          - The offset to check
--*/
{
    return  sizeof(WORD) +                      // Number of Directory Entries field size
            NumDirEntries*sizeof(TIFF_TAG);     // Total Directory Entries size
}   // IFDTagsSize


static
BOOL
IsValidIFDOffset(
    DWORD               dwIFDOffset,
    PTIFF_INSTANCE_DATA pTiffInstance
    )
/*++
Routine Description:

    Checks the validity of an IFD offset in a TIFF file.

Arguments:

    dwIFDOffset            - The offset to check
    pTiffInstance          - pointer to TIFF_INSTANCE_DATA that contains
                             the TIFF file data.
Return Value:

    TRUE - is the offset is valid
    FALSE- otherwise

Remarks:

    This function should be called only when using Mapped file to walk over the TIFF file.
    MapViewOfFile should be called on pTiffInstance before calling this function.

--*/
{
    WORD    NumDirEntries=0;
    DWORD   dwSizeOfIFD = 0;

    //
    //  The last IFD Offset is 0
    //
    if (0 == dwIFDOffset)
    {
        return TRUE;
    }
    
    //
    //  The directory may be at any location in the file after the header,
    //  but must begin on a word boundary.
    //
    if (dwIFDOffset > pTiffInstance->FileSize - sizeof(WORD)    ||
        dwIFDOffset < sizeof(TIFF_HEADER))
    {
        return FALSE;
    }

    NumDirEntries = *(LPWORD)(pTiffInstance->fPtr + dwIFDOffset);
    
    //
    //  Each IFD must have at least one entry
    //
    if ( 0 == NumDirEntries )
    {
        return FALSE;
    }

    //
    //  calculate the size of the IFD
    //
    dwSizeOfIFD =   IFDTagsSize(NumDirEntries) +    // size of Tags
                    sizeof(DWORD);                  // size of offset field
    if ( dwIFDOffset + dwSizeOfIFD > pTiffInstance->FileSize )
    {
        return FALSE;
    }

    return TRUE;
}   // IsValidIFDOffset


HANDLE
TiffOpen(
    LPCTSTR FileName,
    PTIFF_INFO TiffInfo,
    BOOL ReadOnly,
    DWORD RequestedFillOrder
    )

/*++

Routine Description:

    Opens an existing TIFF file for reading.

Arguments:

    FileName            - Full or partial path/file name
    ImageWidth          - Optionaly receives the image width in pixels
    ImageLength         - Optionaly receives the image height in lines
    PageCount           - Optionaly receives the page count

Return Value:

    Handle to the open TIFF file or NULL on error.
    Also, the TiffInfo will have the info on the opened tiff file.

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    WORD                NumDirEntries;
    DWORD               IFDOffset;
    LIST_ENTRY          IFDValidationListHead;
    DWORD               ec = ERROR_SUCCESS;
    PIFD_ENTRY pIFDEntry;
    PLIST_ENTRY pNext;
    DEBUG_FUNCTION_NAME(TEXT("TiffOpen"));


    InitializeListHead(&IFDValidationListHead);

    TiffInstance = MemAlloc( sizeof(TIFF_INSTANCE_DATA) );
    if (!TiffInstance)
    {
        ec = GetLastError();
        goto error_exit;
    }
    ZeroMemory(TiffInstance, sizeof(TIFF_INSTANCE_DATA));

    TiffInstance->hFile = SafeCreateFile(
        FileName,
        ReadOnly ? GENERIC_READ : (GENERIC_READ | GENERIC_WRITE),
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);
    if (TiffInstance->hFile == INVALID_HANDLE_VALUE)
    {
        ec = GetLastError();
        goto error_exit;
    }

    TiffInstance->FileSize = GetFileSize(TiffInstance->hFile,NULL);
    if (TiffInstance->FileSize == INVALID_FILE_SIZE )
    {
        ec = GetLastError();
        goto error_exit;
    }
    if (TiffInstance->FileSize <= sizeof(TIFF_HEADER))
    {
        ec = ERROR_INVALID_PARAMETER;
        goto error_exit;
    }

    TiffInstance->hMap = CreateFileMapping(
        TiffInstance->hFile,
        NULL,
        ReadOnly ? (PAGE_READONLY | SEC_COMMIT) : (PAGE_READWRITE | SEC_COMMIT),
        0,
        0,
        NULL
        );
    if (!TiffInstance->hMap)
    {
        ec = GetLastError();
        goto error_exit;
    }

    TiffInstance->fPtr = MapViewOfFile(
        TiffInstance->hMap,
        ReadOnly ? FILE_MAP_READ : (FILE_MAP_READ | FILE_MAP_WRITE),
        0,
        0,
        0
        );
    if (!TiffInstance->fPtr)
    {
        ec = GetLastError();
        goto error_exit;
    }

    _tcsncpy( TiffInstance->FileName, FileName, ARR_SIZE(TiffInstance->FileName) - 1 );

    //
    // read in the TIFF header
    //
    CopyMemory(
        &TiffInstance->TiffHdr,
        TiffInstance->fPtr,
        sizeof(TIFF_HEADER)
        );

    //
    // validate that the file is really a TIFF file
    //
    if ((TiffInstance->TiffHdr.Identifier != TIFF_LITTLEENDIAN) ||
        (TiffInstance->TiffHdr.Version != TIFF_VERSION))
    {
        ec = ERROR_BAD_FORMAT;
        goto error_exit;
    }

    //
    //  The offset (in bytes) of the first IFD. The directory may be at any location
    //  in the file after the header but must begin on a word boundary.
    //  There must be at least 1 IFD so first IFD offset can't be 0.
    //
    IFDOffset = TiffInstance->TiffHdr.IFDOffset;
    if (    0 == IFDOffset ||
            !IsValidIFDOffset(IFDOffset,TiffInstance))
    {
        ec = ERROR_BAD_FORMAT;
        goto error_exit;
    }

    //
    // walk the IFD list to count the number of pages
    //

    while ( IFDOffset )
    {
        //
        // We use a linked list to make sure the tiff IFD linked list does not loop
        //
        pNext = IFDValidationListHead.Flink;
        while ((ULONG_PTR)pNext != (ULONG_PTR)&IFDValidationListHead)
        {
            pIFDEntry = CONTAINING_RECORD( pNext, IFD_ENTRY, ListEntry );
            pNext = pIFDEntry->ListEntry.Flink;

            if (pIFDEntry->dwIFDOffset == IFDOffset)
            {
                //
                // We found a loop in the IFD offsets linked list
                //
                ec = ERROR_BAD_FORMAT;
                DebugPrintEx(
                    DEBUG_ERR,
                    _T("Found a loop in the IFD offsets linked list"));
                goto error_exit;
            }
        }

        //
        // Get the new IFD offset into the validation list
        //
        pIFDEntry= MemAlloc(sizeof(IFD_ENTRY));
        if (NULL == pIFDEntry)
        {
            ec = GetLastError();
            DebugPrintEx(
                DEBUG_ERR,
                _T("Failed to allocate IFD entry"));
            goto error_exit;
        }
        
        pIFDEntry->dwIFDOffset = IFDOffset;
        InsertTailList(&IFDValidationListHead, &pIFDEntry->ListEntry);


        //
        // get the count of tags in this IFD
        //
        NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IFDOffset);
        //
        // get the next IFD offset
        //
        IFDOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + IFDOffset + IFDTagsSize(NumDirEntries));
        if (!IsValidIFDOffset(IFDOffset,TiffInstance))
        {
            ec = ERROR_BAD_FORMAT;
            goto error_exit;
        }
        //
        // increment the page counter
        //
        TiffInstance->PageCount += 1;
    }
    TiffInstance->IfdOffset             = TiffInstance->TiffHdr.IFDOffset;
    TiffInstance->FillOrder             = RequestedFillOrder;
    // This call will find out more information about the first page in the tiff file,
    // and will store it in the TiffInstance. All the page info + page itself will be read.
    if (!TiffSeekToPage( TiffInstance, 1, RequestedFillOrder ))
    {
        ec = ERROR_BAD_FORMAT;
        goto error_exit;
    }
    TiffInfo->PageCount                 = TiffInstance->PageCount;
    TiffInfo->ImageWidth                = TiffInstance->ImageWidth;
    TiffInfo->ImageHeight               = TiffInstance->ImageHeight;
    TiffInfo->PhotometricInterpretation = TiffInstance->PhotometricInterpretation;
    TiffInfo->FillOrder                 = TiffInstance->FillOrder;
    TiffInfo->YResolution               = TiffInstance->YResolution;
    TiffInfo->CompressionType           = TiffInstance->CompressionType;
    TiffInstance->RefLine               = &TiffInstance->Buffer[0];
    TiffInstance->CurrLine              = &TiffInstance->Buffer[FAXBYTES];
    TiffInstance->CurrPage              = 1;
    FillMemory( TiffInstance->Buffer, sizeof(TiffInstance->Buffer), WHITE );

    Assert (ERROR_SUCCESS == ec);

error_exit:

    if (ERROR_SUCCESS != ec)
    {
        if (TiffInstance && TiffInstance->hFile && TiffInstance->hFile != INVALID_HANDLE_VALUE)
        {
            if (TiffInstance->fPtr)
            {
                UnmapViewOfFile( TiffInstance->fPtr );
                TiffInstance->fPtr = NULL;
            }
            if (TiffInstance->hMap)
            {
                CloseHandle( TiffInstance->hMap );
                TiffInstance->hMap = NULL;
            }
            CloseHandle( TiffInstance->hFile );
        TiffInstance->hFile = NULL;
        }
        if (TiffInstance)
        {
            MemFree( TiffInstance );
            TiffInstance = NULL;
        }
    }

    pNext = IFDValidationListHead.Flink;
    while ((ULONG_PTR)pNext != (ULONG_PTR)&IFDValidationListHead)
    {
        pIFDEntry = CONTAINING_RECORD( pNext, IFD_ENTRY, ListEntry );
        pNext = pIFDEntry->ListEntry.Flink;
        RemoveEntryList(&pIFDEntry->ListEntry);
        MemFree(pIFDEntry);
    }

    if (ERROR_SUCCESS != ec)
    {
        SetLastError(ec);
    }
    return TiffInstance;
}


BOOL
TiffClose(
    HANDLE hTiff
    )

/*++

Routine Description:

    Closes a TIFF file and frees all allocated resources.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;


    Assert(TiffInstance);

    if (TiffInstance->StripData) {

        VirtualFree(
            TiffInstance->StripData,
            0,
            MEM_RELEASE
            );

    }

    if (TiffInstance->hMap) {

        UnmapViewOfFile( TiffInstance->fPtr );
        CloseHandle( TiffInstance->hMap );
        CloseHandle( TiffInstance->hFile );

    } else {

        if (TiffInstance->hFile != INVALID_HANDLE_VALUE)
            CloseHandle( TiffInstance->hFile );

    }

    MemFree( TiffInstance );

    return TRUE;
}


BOOL
TiffStartPage(
    HANDLE hTiff
    )

/*++

Routine Description:

    Set the file to be ready to write TIFF data to a new page.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;


    Assert(TiffInstance);

    TiffInstance->DataOffset = SetFilePointer(
        TiffInstance->hFile,
        0,
        NULL,
        FILE_CURRENT
        );
    if (TiffInstance->DataOffset == 0xffffffff) {
        TiffInstance->DataOffset = 0;
        return FALSE;
    }

    return TRUE;
}


/*++
Routine Description:
    Sets the tiff info. These params will be used during subsequent calls to TiffEndPage().

Arguments:
    hTiff               - TIFF handle returned by TiffCreate or TiffOpen
    CompressionType     - One of TIFF_COMPRESSION_NONE, TIFF_COMPRESSION_MH, TIFF_COMPRESSION_MR, TIFF_COMPRESSION_MMR
    ImageWidth          - ImageWidth in pixels
    FillOrder           - One of FILLORDER_MSB2LSB, FILLORDER_LSB2MSB
    YResolution         - Y resolution in DPI. Normal TIFFs are either TIFFF_RES_Y (196) or TIFFF_RES_Y_DRAFT (98)

Return Value:
    TRUE for success, FALSE on error
--*/
BOOL
TiffSetCurrentPageParams(
    HANDLE hTiff,
    DWORD  CompressionType,
    DWORD  ImageWidth,
    DWORD  FillOrder,
    DWORD  YResolution
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    if (TiffInstance == NULL)
    {
        return FALSE;
    }

    if ((CompressionType!=TIFF_COMPRESSION_NONE) && (CompressionType!=TIFF_COMPRESSION_MH) &&
        (CompressionType!=TIFF_COMPRESSION_MR)   && (CompressionType!=TIFF_COMPRESSION_MMR))
    {
        return FALSE;
    }
    if ((FillOrder!=FILLORDER_MSB2LSB) && (FillOrder!=FILLORDER_LSB2MSB))
    {
        return FALSE;
    }
    if ((ImageWidth==0) || (YResolution==0))
    {
        return FALSE;
    }

    TiffInstance->CompressionType    = CompressionType;
    TiffInstance->ImageWidth         = ImageWidth;
    TiffInstance->FillOrder          = FillOrder;
    TiffInstance->YResolution        = YResolution;
    return TRUE;
}


BOOL
TiffEndPage(
    HANDLE hTiff
    )

/*++

Routine Description:

    Ends a TIFF page in progress.  This causes the IFDs to be written.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    PFAXIFD             TiffIfd;
    DWORD               Bytes;
    DWORD               CurrOffset;


    Assert(TiffInstance);
    TiffIfd  = &TiffInstance->TiffIfd;

    // Find current location
    CurrOffset = SetFilePointer(
        TiffInstance->hFile,
        0,
        NULL,
        FILE_CURRENT
        );

    CurrOffset = Align( 8, CurrOffset );

    // Go to next IfdOffset
    SetFilePointer(
        TiffInstance->hFile,
        TiffInstance->IfdOffset,
        NULL,
        FILE_BEGIN
        );

    // Write the place of the next IFD
    WriteFile(
        TiffInstance->hFile,
        &CurrOffset,
        sizeof(CurrOffset),
        &Bytes,
        NULL
        );

    SetFilePointer(
        TiffInstance->hFile,
        CurrOffset,
        NULL,
        FILE_BEGIN
        );

    TiffInstance->PageCount += 1;

    // Prepare all the fields in the IFD struct.
    TiffIfd->yresNum = TiffInstance->YResolution;

    TiffIfd->ifd[IFD_PAGENUMBER].value      = MAKELONG( TiffInstance->PageCount-1, 0);
    TiffIfd->ifd[IFD_IMAGEWIDTH].value      = TiffInstance->ImageWidth;
    TiffIfd->ifd[IFD_IMAGEHEIGHT].value     = TiffInstance->Lines;
    TiffIfd->ifd[IFD_ROWSPERSTRIP].value    = TiffInstance->Lines;
    TiffIfd->ifd[IFD_STRIPBYTECOUNTS].value = TiffInstance->Bytes;
    TiffIfd->ifd[IFD_STRIPOFFSETS].value    = TiffInstance->DataOffset;
    TiffIfd->ifd[IFD_XRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, xresNum );
    TiffIfd->ifd[IFD_YRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, yresNum );
    TiffIfd->ifd[IFD_SOFTWARE].value        = CurrOffset + FIELD_OFFSET( FAXIFD, software );
    TiffIfd->ifd[IFD_FILLORDER].value       = TiffInstance->FillOrder;

    if (TiffInstance->CompressionType == TIFF_COMPRESSION_NONE) {
        TiffIfd->ifd[IFD_COMPRESSION].value = COMPRESSION_NONE;
        TiffIfd->ifd[IFD_G3OPTIONS].value   = GROUP3OPT_FILLBITS;
    }
    else if (TiffInstance->CompressionType == TIFF_COMPRESSION_MMR) {
        TiffIfd->ifd[IFD_COMPRESSION].value = TIFF_COMPRESSION_MMR;
        TiffIfd->ifd[IFD_G3OPTIONS].value   = GROUP3OPT_FILLBITS |
            (TiffInstance->CompressionType == TIFF_COMPRESSION_MH ? 0 : GROUP3OPT_2DENCODING);
    }
    else {
        TiffIfd->ifd[IFD_COMPRESSION].value = COMPRESSION_CCITTFAX3;
        TiffIfd->ifd[IFD_G3OPTIONS].value   = GROUP3OPT_FILLBITS |
            (TiffInstance->CompressionType == TIFF_COMPRESSION_MH ? 0 : GROUP3OPT_2DENCODING);
    }

    if (!WriteFile(
        TiffInstance->hFile,
        TiffIfd,
        sizeof(FAXIFD),
        &Bytes,
        NULL
        )) {
            return FALSE;
    }

    TiffInstance->IfdOffset = CurrOffset + FIELD_OFFSET( FAXIFD, nextIFDOffset );
    TiffInstance->Bytes = 0;

    return TRUE;
}


BOOL
TiffWriteRaw(
    HANDLE hTiff,
    LPBYTE TiffData,
    DWORD Size
    )

/*++

Routine Description:

    Writes a new line of data to a TIFF file.  The data
    is encoded according to the compression type specified
    when TiffCreate was called.

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD               Bytes;


    Assert(TiffInstance);
    WriteFile(
        TiffInstance->hFile,
        TiffData,
        Size,
        &Bytes,
        NULL
        );

    TiffInstance->Bytes += Bytes;

    if (Size == FAXBYTES) {
        TiffInstance->Lines += 1;
    }

    return TRUE;
}


BOOL
GetTiffBits(
    HANDLE  hTiff,
    LPBYTE Buffer,
    LPDWORD BufferSize,
    DWORD FillOrder
    )
{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    DWORD i;
    LPBYTE TmpBuffer;


    if (TiffInstance->StripDataSize > *BufferSize) {
        *BufferSize = TiffInstance->StripDataSize;
        return FALSE;
    }

    CopyMemory( Buffer, TiffInstance->StripData, TiffInstance->StripDataSize );

    if (FillOrder != TiffInstance->FillOrder) {
        for (i = 0, TmpBuffer = Buffer; i < TiffInstance->StripDataSize; i++) {
            TmpBuffer[i] = BitReverseTable[TmpBuffer[i]];
        }
    }

    *BufferSize = TiffInstance->StripDataSize;
    return TRUE;
}


BOOL
TiffRead(
    HANDLE hTiff,
    LPBYTE TiffData,
	DWORD dwTiffDataSize,
    DWORD PadLength
    )

/*++

Routine Description:

    Reads in a page of TIFF data starting at the current
    page.  The current page is set by calling TiffSeekToPage.
    This always returns the data with FillOrder FILLORDER_LSB2MSB

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen

Return Value:

    TRUE for success, FALSE on error

--*/

{
    switch( ((PTIFF_INSTANCE_DATA) hTiff)->CompressionType ) {
        case TIFF_COMPRESSION_NONE:
            return DecodeUnCompressedFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, dwTiffDataSize );

        case TIFF_COMPRESSION_MH:
            return DecodeMHFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, dwTiffDataSize, FALSE, PadLength );

        case TIFF_COMPRESSION_MR:
            return DecodeMRFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, dwTiffDataSize, FALSE, PadLength );

        case TIFF_COMPRESSION_MMR:
            return DecodeMMRFaxData( (PTIFF_INSTANCE_DATA) hTiff, TiffData, dwTiffDataSize, FALSE, PadLength );
    }

    return FALSE;
}


BOOL
TiffSeekToPage(
    HANDLE hTiff,
    DWORD PageNumber,
    DWORD FillOrder
    )

/*++

Routine Description:

    Positions the TIFF file to the requested page.  The next
    TiffRead call gets this page's data (The bitmap data is also read to TiffInstance struct)

Arguments:

    hTiff               - TIFF handle returned by TiffCreate or TiffOpen
    PageNumber          - Requested page number

Return Value:

    TRUE for success, FALSE on error

--*/

{
    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;
    WORD                NumDirEntries = 0;
    DWORD               IfdOffset = 0;
    DWORD               PageCount = 0;
    DWORD               i = 0;
    DWORD               j = 0;
    LPBYTE              dataPtr = NULL;
    WORD                PrevTagId = 0;
    PSTRIP_INFO         StripInfo = NULL;
    DWORD               StripCount = 0;
    PTIFF_TAG           TiffTags = 0;
    DWORD               CompressionType = 0;

    DEBUG_FUNCTION_NAME(TEXT("TiffSeekToPage"));
    Assert(TiffInstance);

    if (PageNumber > TiffInstance->PageCount) {
        return FALSE;
    }

    PageCount = 0;

    if (PageNumber == TiffInstance->CurrPage + 1) {

        //
        // get the count of tags in this IFD
        //

        IfdOffset = TiffInstance->IfdOffset;

        NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IfdOffset);

    } else {

        IfdOffset = TiffInstance->TiffHdr.IFDOffset;


        // Find the IFD of the requested page.
        while ( IfdOffset ) {

            //
            // get the count of tags in this IFD
            //
            NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IfdOffset);

            //
            // increment the page counter and bail if ready
            //
            PageCount += 1;
            if (PageCount == PageNumber) {
                break;
            }

            //
            // get the next IFD offset
            //
            IfdOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + (NumDirEntries * sizeof(TIFF_TAG)) + IfdOffset + sizeof(WORD));

        }

    }

    if (!IfdOffset) 
    {
        goto error_exit;
    }
    //
    // set the tag pointer
    //
    TiffTags = (PTIFF_TAG)(TiffInstance->fPtr + IfdOffset + sizeof(WORD));

    //
    // get the next IFD offset
    //
    TiffInstance->IfdOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + (NumDirEntries * sizeof(TIFF_TAG)) + IfdOffset + sizeof(WORD));

    //
    // walk the tags and pick out the info we need
    //
    for (i=0,PrevTagId=0; i<NumDirEntries; i++) 
    {
        //
        // verify that the tags are in ascending order
        //
        if (TiffTags[i].TagId < PrevTagId) 
        {
            goto error_exit;
        }

        PrevTagId = TiffTags[i].TagId;

        switch( TiffTags[i].TagId ) 
        {
            case TIFFTAG_STRIPOFFSETS:
                StripCount = TiffTags[i].DataCount;
                // A malicious user could send a malformed file with a large DataCount,
                // causing us to allocate large amounts of memory. So, limit the number
                // of strips so we don't allocate more than 50MB (arbitrary).
                if (StripCount > (50000000/sizeof(STRIP_INFO)))
                {
                    goto error_exit;
                }

                StripInfo = (PSTRIP_INFO) MemAlloc(StripCount * sizeof(STRIP_INFO));
                if (!StripInfo) 
                {
                    goto error_exit;
                }

                for (j=0; j<TiffTags[i].DataCount; j++) {

                    if (!GetTagData( TiffInstance, j, &TiffTags[i] , &(StripInfo[j].Offset)))
                    {
                        goto error_exit;
                    }
                    StripInfo[j].Data = TiffInstance->fPtr + StripInfo[j].Offset;

                    TiffInstance->StripOffset = StripInfo[j].Offset;
                    // Validity of offsets will be checked after reading StripByteCount
                }
                break;

            case TIFFTAG_ROWSPERSTRIP:
                TiffInstance->TagRowsPerStrip = &TiffTags[i];
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->RowsPerStrip)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_STRIPBYTECOUNTS:
                if (!StripInfo)
                {
                    DebugPrintEx(DEBUG_ERR, _T("(TiffTag == TIFFTAG_STRIPBYTECOUNTS) && (StripInfo == NULL)"));
                    goto error_exit;
                }
                if (StripCount != TiffTags[i].DataCount)
                {
                    DebugPrintEx(DEBUG_ERR, _T("Different number of strips in StripOffsets(%d) and StripByteCount(%d)"),
                        StripCount, TiffTags[i].DataCount);
                    goto error_exit;
                }

                TiffInstance->TagStripByteCounts = &TiffTags[i];

                for (j=0; j<TiffTags[i].DataCount; j++) {

                    if (!GetTagData( TiffInstance, j, &TiffTags[i], &(StripInfo[j].Bytes)))
                    {
                        goto error_exit;
                    }

                    if (StripInfo[j].Offset+StripInfo[j].Bytes > TiffInstance->FileSize) {

                        //
                        // the creator of this tiff file is a liar, trim the bytes
                        //

                        DWORD Delta;

                        Delta = (StripInfo[j].Offset + StripInfo[j].Bytes) - TiffInstance->FileSize;
                        if (Delta >= StripInfo[j].Bytes) 
                        {
                            //
                            // the offset lies beyond the end of the file
                            //
                            goto error_exit;
                        }

                        StripInfo[j].Bytes -= Delta;
                    }
                }
                break;

            case TIFFTAG_COMPRESSION:
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &CompressionType))
                {
                    goto error_exit;
                }

                switch ( CompressionType ) {

                    case COMPRESSION_NONE:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_NONE;
                        break;

                    case COMPRESSION_CCITTRLE:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MH;
                        break;

                    case COMPRESSION_CCITTFAX3:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MH;
                        break;

                    case COMPRESSION_CCITTFAX4:
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MMR;
                        break;

                    case COMPRESSION_LZW:
                    case COMPRESSION_OJPEG:
                    case COMPRESSION_JPEG:
                    case COMPRESSION_NEXT:
                    case COMPRESSION_CCITTRLEW:
                    case COMPRESSION_PACKBITS:
                    case COMPRESSION_THUNDERSCAN:
                        //
                        // unsupported compression type
                        //
                        goto error_exit;

                    default:
                        //
                        // unknown compression type
                        //
                        goto error_exit;

                }

                break;

            case TIFFTAG_GROUP3OPTIONS:
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &CompressionType))
                {
                    goto error_exit;
                }

                if (CompressionType & GROUP3OPT_2DENCODING) {
                    if (TiffInstance->CompressionType != TIFF_COMPRESSION_MMR) {
                        TiffInstance->CompressionType = TIFF_COMPRESSION_MR;
                    }

                } else if (CompressionType & GROUP3OPT_UNCOMPRESSED) {

                    TiffInstance->CompressionType = TIFF_COMPRESSION_NONE;
                }

                break;

            case TIFFTAG_IMAGEWIDTH:
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->ImageWidth)))
                {
                    goto error_exit;
                }
                TiffInstance->BytesPerLine = (TiffInstance->ImageWidth/8)+(TiffInstance->ImageWidth%8?1:0);
                break;

            case TIFFTAG_IMAGELENGTH:
                TiffInstance->TagImageLength = &TiffTags[i];
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->ImageHeight)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_XRESOLUTION:
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->XResolution)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_YRESOLUTION:
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->YResolution)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_PHOTOMETRIC:
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->PhotometricInterpretation)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_FILLORDER:
                TiffInstance->TagFillOrder = &TiffTags[i];
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->FillOrder)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_CLEANFAXDATA:
                TiffInstance->TagCleanFaxData = &TiffTags[i];
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->CleanFaxData)))
                {
                    goto error_exit;
                }
                break;

            case TIFFTAG_CONSECUTIVEBADFAXLINES:
                TiffInstance->TagBadFaxLines = &TiffTags[i];
                if (!GetTagData( TiffInstance, 0, &TiffTags[i], &(TiffInstance->BadFaxLines)))
                {
                    goto error_exit;
                }
                break;
            default:
                ;
                // There was an unknown tag (and it's ok, cause we do not have to handle all the possible tags)

        }
    }
    //
    // now go read the strip data
    //
    for (i=0,j=0; i<StripCount; i++) 
    {
        j += StripInfo[i].Bytes;

    }

    if (j >= TiffInstance->StripDataSize) 
    {
        if (TiffInstance->StripData) 
        {
            VirtualFree(
                TiffInstance->StripData,
                0,
                MEM_RELEASE
                );

        }

        TiffInstance->StripDataSize = j;

        TiffInstance->StripData = VirtualAlloc(
            NULL,
            TiffInstance->StripDataSize,
            MEM_COMMIT,
            PAGE_READWRITE
            );

        if (!TiffInstance->StripData) 
        {
            goto error_exit;
        }

    } 
    else 
    {
        if (TiffInstance->StripData) 
        {
            ZeroMemory(
                TiffInstance->StripData,
                TiffInstance->StripDataSize
                );
        }

    }

    for (i=0,dataPtr=TiffInstance->StripData; i<StripCount; i++) 
    {
        if (0 == StripInfo[i].Bytes)
        {
            //
            // Goto next strip
            //
            continue;
        }
        if ((StripInfo[i].Data + StripInfo[i].Bytes - 1 < TiffInstance->fPtr)  ||  // Bad offset
            ((DWORD)(StripInfo[i].Data + StripInfo[i].Bytes - 1 - TiffInstance->fPtr) > TiffInstance->FileSize)
           )
        {  
            goto error_exit;                     
        }
        CopyMemory(
            dataPtr,
            StripInfo[i].Data,
            StripInfo[i].Bytes
            );
        dataPtr += StripInfo[i].Bytes;
    }

    if (TiffInstance->FillOrder != FillOrder) 
    {
        for (i=0,dataPtr=TiffInstance->StripData; i<TiffInstance->StripDataSize; i++) 
        {
            dataPtr[i] = BitReverseTable[dataPtr[i]];
        }
    }

    TiffInstance->CurrPtr = TiffInstance->StripData;
    TiffInstance->CurrPage = PageNumber;

    MemFree( StripInfo );

    return TRUE;

error_exit:

    if (StripInfo) 
    {
        MemFree( StripInfo );
    }
    return FALSE;
}


BOOL
DrawBannerBitmap(
    LPTSTR  pBannerString,
    INT     width,
    INT     height,
    HBITMAP *phBitmap,
    PVOID   *ppBits
    )

/*++

Routine Description:

    Draw the specified banner string into a memory bitmap

Arguments:

    pBannerString - Specifies the banner string to be drawn
    width, height - Specifies the width and height of the banner bitmap (in pixels)
    phBitmap - Returns a handle to the banner bitmap
    ppBits - Returns a pointer to the banner bitmap data

Return Value:

    TRUE if successful, FALSE if there is an error

Note:

    When this function returns successful, you must call DeleteObject
    on the returned bitmap handle after you're done with the bitmap.

    Scanlines of the bitmap data always start on DWORD boundary.

--*/

{
    //
    // Information about the bitmap which is passed to CreateDIBSection
    //

    struct  {

        BITMAPINFOHEADER bmiHeader;
        RGBQUAD          bmiColors[2];

    } bitmapInfo = {

        {
            sizeof(BITMAPINFOHEADER),
            width,
            -height,
            1,
            1,
            BI_RGB,
            0,
            7874,
            7874,
            0,
            0,
        },

        //
        // Colors used in the bitmap: 0 = white, 1 = black
        //

        {
            { 255, 255, 255 },
            {   0,   0,   0 },
        }
    };

    HDC     hdcMem = NULL;
    HBITMAP hBitmap = NULL, hOldBitmap = NULL;
    PVOID   pBits = NULL;
    HFONT   hFont = NULL, hOldFont = NULL;
    RECT    rect = { 0, 0, width, height };
    LOGFONT logFont;

    //
    // Create a memory DC and a DIBSection and
    // select the bitmap into the memory DC and
    // select an appropriate sized monospace font
    //

    ZeroMemory(&logFont, sizeof(logFont));
    logFont.lfHeight = -(height-2);
    logFont.lfWeight = FW_NORMAL;
    logFont.lfCharSet = DEFAULT_CHARSET;
    logFont.lfOutPrecision = OUT_DEFAULT_PRECIS;
    logFont.lfClipPrecision = CLIP_DEFAULT_PRECIS;
    logFont.lfQuality = DEFAULT_QUALITY;
    logFont.lfPitchAndFamily = FIXED_PITCH | FF_DONTCARE;

    if ((pBannerString != NULL && width > 0 && height > 0) &&
        (hdcMem = CreateCompatibleDC(NULL)) &&
        (hBitmap = CreateDIBSection(NULL,
                                    (LPBITMAPINFO) &bitmapInfo,
                                    DIB_RGB_COLORS,
                                    &pBits,
                                    NULL,
                                    0)) &&
        (hOldBitmap = SelectObject(hdcMem, hBitmap)) &&
        (hFont = CreateFontIndirect(&logFont)) &&
        (hOldFont = SelectObject(hdcMem, hFont)))
    {
        //
        // Use monospace system font to draw the banner string
        //

        DrawText(hdcMem,
                 pBannerString,
                 -1,
                 &rect,
                 DT_CENTER | DT_VCENTER | DT_SINGLELINE);

        //
        // Return a handle to the bitmap and a pointer to the bitmap data
        //

        *phBitmap = hBitmap;
        *ppBits = pBits;
    }
    else
    {
        *phBitmap = NULL;
        *ppBits = NULL;
    }

    //
    // Perform any necessary clean up before returning
    //

    if (hOldFont != NULL)
        SelectObject(hdcMem, hOldFont);

    if (hFont != NULL)
        DeleteObject(hFont);

    if (hOldBitmap != NULL)
        SelectObject(hdcMem, hOldBitmap);

    if (pBits == NULL && hBitmap != NULL)
        DeleteObject(hBitmap);

    if (hdcMem != NULL)
        DeleteDC(hdcMem);

    return (*ppBits != NULL);
}


BOOL
MmrAddBranding(
    LPCTSTR             SrcFileName,
    LPTSTR              Branding,
    LPTSTR              BrandingEnd,
    INT                 BrandingHeight
    )

{
    // If there are different page width that we send , then this function must be changed
    // so for each different page width we set new brand that will be in the right width.
    INT         BrandingWidth;
    LPTSTR      DestFileName;
    TIFF_INFO   TiffInfoSrc;
    HANDLE      hTiffSrc;
    DWORD       CurrPage;
    BYTE       *pBrandBits = NULL;
    BYTE       *pMmrBrandBitsAlloc = NULL;
    DWORD      *lpdwMmrBrandBits;

    BYTE        pCleanBeforeBrandBits[4] = {0xff, 0xff, 0xff, 0xff};   // 32 blank lines at the beginning

    HANDLE      hTiffDest;
    LPDWORD     lpdwSrcBits;
    LPDWORD     lpdwSrc;
    LPDWORD     lpdwSrcEnd;

    DWORD       PageCnt;
    DWORD       DestHiRes;
    DWORD       BrandingLen = _tcslen(Branding);  // without Page#
    BOOL        bRet = FALSE;
    DWORD       DwordsOut;
    DWORD       BytesOut;
    DWORD       BitsOut;
    DWORD       BufferSize;
    DWORD       BufferUsedSize;
    DWORD       StripDataSize;
    HBITMAP     hBitmap;
    PVOID       pBannerBits;
    DWORD       TotalSrcBytes;
    DWORD       NumSrcDwords;
    LPTSTR      lptstrBranding = NULL;

    DEBUG_FUNCTION_NAME(TEXT("MmrAddBranding"));

    hTiffSrc = TiffOpen(
        SrcFileName,
        &TiffInfoSrc,
        TRUE,
        FILLORDER_LSB2MSB
        );

    if (! hTiffSrc)
    {
        SetLastError(ERROR_FUNCTION_FAILED);
        return FALSE;
    }

    BrandingWidth = TiffInfoSrc.ImageWidth;


    //
    // Build Dest. file name from Src. file name
    //


    if ( (DestFileName = MemAlloc( (_tcslen(SrcFileName)+1) * sizeof (TCHAR) ) ) == NULL )
    {
        TiffClose(hTiffSrc);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    _tcscpy(DestFileName, SrcFileName);
    // sorry about that, this puts a $ instead of the last character of DestFileName
    _tcsnset(_tcsdec(DestFileName,_tcsrchr(DestFileName,TEXT('\0'))),TEXT('$'),1);



    pBrandBits = MemAlloc((BrandingHeight+1) * (BrandingWidth / 8));
    if (!pBrandBits)
    {
        TiffClose(hTiffSrc);
        MemFree(DestFileName);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    pMmrBrandBitsAlloc = MemAlloc( sizeof(DWORD) * (BrandingHeight+1) * (BrandingWidth / 8));
    if (!pMmrBrandBitsAlloc)
    {
        TiffClose(hTiffSrc);
        MemFree(DestFileName);
        MemFree(pBrandBits);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    // align
    lpdwMmrBrandBits = (LPDWORD) ( ((ULONG_PTR) pMmrBrandBitsAlloc) & ~(3) );

    BufferSize = TiffInfoSrc.ImageHeight * (TiffInfoSrc.ImageWidth / 8);

    lpdwSrcBits = (LPDWORD) VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );

    if (!lpdwSrcBits)
    {
        MemFree(DestFileName);
        MemFree(pBrandBits);
        MemFree(pMmrBrandBitsAlloc);
        TiffClose(hTiffSrc);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }


    if (TiffInfoSrc.YResolution == 196)
    {
        DestHiRes = 1;
    }
    else
    {
        DestHiRes = 0;
    }


    hTiffDest = TiffCreate(
        DestFileName,
        TIFF_COMPRESSION_MMR,
        TiffInfoSrc.ImageWidth,
        FILLORDER_LSB2MSB,
        DestHiRes);

    if (! hTiffDest)
    {
        MemFree(DestFileName);
        MemFree(pBrandBits);
        MemFree(pMmrBrandBitsAlloc);
        VirtualFree ( lpdwSrcBits, 0 , MEM_RELEASE );
        TiffClose(hTiffSrc);
        SetLastError(ERROR_FUNCTION_FAILED);
        return FALSE;
    }

    CurrPage = 1;

    for (PageCnt=0; PageCnt<TiffInfoSrc.PageCount; PageCnt++)
    {
        DWORD dwImageHeight;

        if ( ! TiffSeekToPage( hTiffSrc, PageCnt+1, FILLORDER_LSB2MSB) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        if (! TiffStartPage(hTiffDest) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        //
        //      Create branding for every page.
        //
        //      Last scan line - all white:
        //  1. to isolate branding from the real image.
        //  2. to avoid an MMR-merge with the real image.
        //

        ZeroMemory(pBrandBits, (BrandingHeight+1) * (BrandingWidth / 8) );

        lptstrBranding=MemAlloc(sizeof(TCHAR)*(BrandingLen+_tcslen(BrandingEnd)+4+4+1)); // branding + space to 4 digits num of pages *2
        if (!lptstrBranding)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("MemAlloc() failed for branding string. (ec: %ld)"),
                GetLastError());
            goto l_exit;
        }
        _tcscpy(lptstrBranding,Branding);

        _stprintf( &lptstrBranding[BrandingLen], TEXT("%03d %s %03d"),
                                PageCnt+1,
                                BrandingEnd,
                                TiffInfoSrc.PageCount);

        if ( ! DrawBannerBitmap(lptstrBranding,   // banner string
                             BrandingWidth,   // width in pixels
                             BrandingHeight,   // height in pixels,
                             &hBitmap,
                             &pBannerBits))
        {
            // Handle error case here
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        CopyMemory(pBrandBits, pBannerBits, BrandingHeight * (BrandingWidth / 8) );

        //
        // Convert uncompressed branding to an MMR
        //

        ZeroMemory(pMmrBrandBitsAlloc, sizeof(DWORD) * (BrandingHeight+1) * (BrandingWidth / 8) );

        EncodeMmrBranding(pBrandBits, lpdwMmrBrandBits, BrandingHeight+1, BrandingWidth, &DwordsOut, &BitsOut);

        BytesOut = (DwordsOut << 2);

        DeleteObject(hBitmap);

        //
        // write Spaces 4 bytes = 32 bits = 32 blank lines.
        //

        if (! TiffWriteRaw( hTiffDest, pCleanBeforeBrandBits, 4) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        //
        // write branding without the last DWORD
        //


        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwMmrBrandBits, BytesOut) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }

        //
        // check the current page dimensions. Add memory if needed.
        //

        TiffGetCurrentPageData( hTiffSrc,
                                NULL,
                                &StripDataSize,
                                NULL,
                                &dwImageHeight
                                );

        if (StripDataSize > BufferSize)
        {
            VirtualFree ( lpdwSrcBits, 0 , MEM_RELEASE );

            BufferSize = StripDataSize;

            lpdwSrcBits = (LPDWORD) VirtualAlloc(
                NULL,
                BufferSize,
                MEM_COMMIT,
                PAGE_READWRITE
                );

            if (!lpdwSrcBits)
            {
                SetLastError(ERROR_NOT_ENOUGH_MEMORY);
                goto l_exit;
            }
        }

        BufferUsedSize = BufferSize;


        if (BitsOut == 0)
        {
            //
            // Simple merge
            //
            if (!GetTiffBits( hTiffSrc, (LPBYTE) lpdwSrcBits, &BufferUsedSize, FILLORDER_LSB2MSB))
            {
                SetLastError(ERROR_FUNCTION_FAILED);
                goto l_exit;
            }

            // add EOLs at the end of each page

            NumSrcDwords = ( ((PTIFF_INSTANCE_DATA) hTiffSrc)->StripDataSize) >> 2;
            lpdwSrc = lpdwSrcBits + NumSrcDwords;

            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;

            TotalSrcBytes = (DWORD)((lpdwSrc - lpdwSrcBits) << 2);

        }
        else
        {
            //
            // Read current page of the Src MMR Image.
            // Save the 1st slot for the bit-shifting merge with the Branding.
            //
            if (!GetTiffBits( hTiffSrc, (LPBYTE) (lpdwSrcBits+1), &BufferUsedSize, FILLORDER_LSB2MSB ))
            {
                SetLastError(ERROR_FUNCTION_FAILED);
                goto l_exit;
            }


            NumSrcDwords =  ( ( ((PTIFF_INSTANCE_DATA) hTiffSrc)->StripDataSize) >> 2) + 1;
            lpdwSrc = lpdwSrcBits;
            lpdwSrcEnd = lpdwSrcBits + NumSrcDwords;

            //
            // Get the last DWORD of lpdwBrandBits
            //

            *lpdwSrcBits = *(lpdwMmrBrandBits + DwordsOut);


            // copy entire DWORDs in a middle


            while (lpdwSrc < lpdwSrcEnd)
            {
                *lpdwSrc += ( *(lpdwSrc+1) << BitsOut );
                lpdwSrc++;
                *lpdwSrc = *lpdwSrc >> (32 - BitsOut);
            }

            // add EOLs at the end of each page

            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;
            *(++lpdwSrc) = 0x80000000;

            TotalSrcBytes = (DWORD)((lpdwSrc - lpdwSrcBits) << 2);
        }


        //
        // write src image
        //

        if (! TiffWriteRaw( hTiffDest, (LPBYTE) lpdwSrcBits, TotalSrcBytes ))
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }


        //
        //  prepare Lines TAG. Same for all pages; min avail. lines
        //

       ((PTIFF_INSTANCE_DATA) hTiffDest)->Lines = 32 + dwImageHeight + BrandingHeight + 1 ;


        if (! TiffEndPage(hTiffDest) )
        {
            SetLastError(ERROR_FUNCTION_FAILED);
            goto l_exit;
        }
        MemFree (lptstrBranding);
        lptstrBranding = NULL;
    }

    bRet = TRUE;

l_exit:
    MemFree(lptstrBranding);
    MemFree(pBrandBits);
    MemFree(pMmrBrandBitsAlloc);

    VirtualFree ( lpdwSrcBits, 0 , MEM_RELEASE );

    TiffClose(hTiffSrc);
    TiffClose(hTiffDest);

    if (TRUE == bRet)
    {
        // replace the original MH file by the new clean MMR file
        DeleteFile(SrcFileName);
        bRet = MoveFile(DestFileName, SrcFileName);
    }

    if (FALSE == bRet)
    {
        DeleteFile(DestFileName);
    }
    MemFree(DestFileName);

    return bRet;
}

BOOL
TiffGetCurrentPageResolution(
    HANDLE  hTiff,
    LPDWORD lpdwYResolution,
    LPDWORD lpdwXResolution
)
/*++

Routine name : TiffGetCurrentPageResolution

Routine description:

    Returns the current's page X,Y resolution of the TIFF instance

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    hTiff              [in]     - Handle to TIFF image
    lpdwYResolution    [out]    - Y resolution
    lpdwYResolution    [out]    - X resolution

Return Value:

    TRUE if successful, FALSE otherwise.

--*/
{
    PTIFF_INSTANCE_DATA pTiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    Assert(pTiffInstance);
    Assert(lpdwYResolution);
    Assert(lpdwXResolution);

    *lpdwYResolution = pTiffInstance->YResolution;
    *lpdwXResolution = pTiffInstance->XResolution;
    return TRUE;
}   // TiffGetCurrentPageResolution

BOOL
TiffGetCurrentPageData(
    HANDLE      hTiff,
    LPDWORD     Lines,
    LPDWORD     StripDataSize,
    LPDWORD     ImageWidth,
    LPDWORD     ImageHeight
    )
{

    PTIFF_INSTANCE_DATA TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;


    Assert(TiffInstance);

    if (Lines) {
        *Lines          = TiffInstance->Lines;
    }

    if (StripDataSize) {
        *StripDataSize  = TiffInstance->StripDataSize;
    }

    if (ImageWidth) {
        *ImageWidth     = TiffInstance->ImageWidth;
    }

    if (ImageHeight) {
        *ImageHeight    = TiffInstance->ImageHeight;
    }

    return TRUE;
}


//*****************************************************************************
//* Name:   AddStringTag
//* Author:
//*****************************************************************************
//* DESCRIPTION:
//*     Returns a TIFF_TAG structure with valid string tag information that points
//*     to the provided string. Writes the string to the file if it does not fit
//*     into DataOffset field of TIFF_TAG.
//*     The function:
//*         Sets the tag id to TagId.
//*         Sets the data type to ASCII
//*         Sets the count to the length of the string (+ terminating 0)
//*         Sets the data location according to the length of the string.
//*          if the string is less than 4 bytes (not including the termianting 0)
//*          it is copied directly into MsTags->DataOffset.
//*          if it is 4 bytes or more is is written to the current file location
//*          and the file offset is placed int MsTags->DataOffset.
//*         Note that the file pointer must be positioned to a place where it is
//*         OK to write the string before calling this function.
//* PARAMETERS:
//*     [IN] HANDLE hFile:
//*             A handle to the file where the tag will be eventually placed.
//*             The file pointer must be positioned to a location where it is OK
//*             to write the string in case it does not fit into TIFF_TAG::DataOffset.
//*             The file must be opened for write operations.
//*     [IN] LPTSTR String,
//*             The string value of the tag.
//*     [IN] WORD TagId,
//              The tag id for the tag.
//*     [IN] PTIFF_TAG MsTags
//*             Pointer to a TIFF_TAG structure. The structure fields will be filled as follows:
//*             TagId : The valud of the TagId parameter
//*             DataType: TIFF_ASCII
//*             DataCount: The char length of the String parameter + 1 (for terminating NULL)
//*             DataOffset: If the string is less than 4 bytes the string will be copied into here. Otherwise
//*                         it will contain the file offset to where the string was written.

//* RETURN VALUE:
//*         FALSE if the operation failed.
//*         TRUE is succeeded.
//* Comments:
//*         The string is converted into ASCII before being written to file or placed in DataOffset.
//*         Note that the function does not write the TAG itself to the file, just the string.
//*         It provides the tag information and this information should be written to the file
//*         separately.
//*****************************************************************************
BOOL
AddStringTag(
    HANDLE hFile,
    LPTSTR String,
    WORD TagId,
    PTIFF_TAG MsTags
    )
{
    BOOL Rval = FALSE;
    LPSTR s;
    DWORD BytesRead;


#ifdef  UNICODE
    s = UnicodeStringToAnsiString( String );
#else   // !UNICODE
    s = StringDup (String);
#endif  // UNICODE
    if (!s) {
        return FALSE;
    }
    MsTags->TagId = TagId;
    MsTags->DataType = TIFF_ASCII;
    MsTags->DataCount = strlen(s) + 1;
    if (strlen(s) < 4) {
        _mbscpy( (PUCHAR)&MsTags->DataOffset, s );
        Rval = TRUE;
    } else {
        MsTags->DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags->DataOffset != 0xffffffff) {
            if (WriteFile( hFile, (LPVOID) s, strlen(s)+1, &BytesRead, NULL )) {
                Rval = TRUE;
            }
        }
    }
    MemFree( s );
    return Rval;
}


BOOL
TiffExtractFirstPage(
    LPTSTR FileName,
    LPBYTE *Buffer,
    LPDWORD BufferSize,
    LPDWORD ImageWidth,
    LPDWORD ImageHeight
    )
{
    PTIFF_INSTANCE_DATA TiffInstance;
    TIFF_INFO TiffInfo;


    TiffInstance = TiffOpen( FileName, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (!TiffInstance) {
        return FALSE;
    }

    *Buffer = VirtualAlloc(
        NULL,
        TiffInstance->StripDataSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!*Buffer) {
        TiffClose( TiffInstance );
        return FALSE;
    }

    CopyMemory( *Buffer, TiffInstance->StripData, TiffInstance->StripDataSize );
    *BufferSize = TiffInstance->StripDataSize;
    *ImageWidth = TiffInstance->ImageWidth;
    *ImageHeight = TiffInstance->ImageHeight;

    TiffClose( TiffInstance );

    return TRUE;
}

//*********************************************************************************
//* Name:   IsMSTiffTag()
//*********************************************************************************
//* DESCRIPTION:
//*     Determine whether the dwTagId if one of the Microsoft Tags.
//*
//* PARAMETERS:
//*     [IN ]   DWORD   dwTagId - tag ID
//*
//* RETURN VALUE:
//*     TRUE
//*         If the MS tag
//*     FALSE
//*         otherwise
//*********************************************************************************
BOOL
IsMSTiffTag(
    DWORD dwTagId
)
{
    return (dwTagId >= MS_TIFFTAG_START && dwTagId <= MS_TIFFTAG_END);
}


//*********************************************************************************
//* Name:   TiffOpenFile()
//*********************************************************************************
//* DESCRIPTION:
//*     Opens a TIFF file for reading/writing. The file is left at the beginning 
//*     of the first IFD (after the tag count).
//*
//* PARAMETERS:
//*     [IN ]   LPCTSTR      FileName             pointer to the file name.
//*     [OUT]   LPHANDLE     lphFile              pointer to HANDLE that will receive
//*                                               an open handle to the file
//*     [OUT]   LPDWORD      lpdwFileSize         pointer to DWORD that will receive 
//*                                               file size
//*     [OUT]   PTIFF_HEADER pTiffHeader          pointer to TIFF_HEADER that will receive 
//*                                               the header
//*     [OUT]   LPWORD       lpwNumDirEntries     pointer to WORD that will receive
//*                                               number of tags in first IFD
//*
//* RETURN VALUE:
//*     TRUE         If no error occured.
//*     FALSE        If an error occured, also sets LastError.
//*********************************************************************************
BOOL TiffOpenFile(
    LPCTSTR         FileName,
    LPHANDLE        lphFile,
    LPDWORD         lpdwFileSize,
    PTIFF_HEADER    pTiffHeader,
    LPWORD          lpwNumDirEntries
    )
{
    DWORD BytesRead;
    DWORD ec;
    BOOL RetVal = FALSE;
    DEBUG_FUNCTION_NAME(TEXT("TiffOpenFile"));
    Assert(lphFile && lpdwFileSize && pTiffHeader && lpwNumDirEntries);

    *lphFile = SafeCreateFile(
        FileName,
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);
    if (*lphFile == INVALID_HANDLE_VALUE) {
        DebugPrintEx( DEBUG_ERR,TEXT("CreateFile failed, err: %d"), GetLastError());
        return FALSE;
    }

    //
    // Get and verify file size
    //
    *lpdwFileSize = GetFileSize(*lphFile, NULL);
    if (*lpdwFileSize == INVALID_FILE_SIZE ) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("GetFileSize failed, err: %d"), ec);
        goto exit;
    }
    if (*lpdwFileSize <= sizeof(TIFF_HEADER)) {
        ec = ERROR_FILE_CORRUPT;
        DebugPrintEx( DEBUG_ERR,TEXT("Invalid TIFF Format"));
        goto exit;
    }

    //
    // read the tiff header
    //
    if (!ReadFile( *lphFile, (LPVOID) pTiffHeader, sizeof(TIFF_HEADER), &BytesRead, NULL )) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err: %d"), ec);
        goto exit;
    }
    //
    // validate that the file is really a tiff file
    //
    if ((pTiffHeader->Identifier != TIFF_LITTLEENDIAN) || (pTiffHeader->Version != TIFF_VERSION) ||
        (pTiffHeader->IFDOffset < sizeof(TIFF_HEADER)) || (pTiffHeader->IFDOffset > *lpdwFileSize))   {
        ec = ERROR_FILE_CORRUPT;
        DebugPrintEx( DEBUG_ERR,TEXT("Invalid TIFF Format"));
        goto exit;
    }

    //
    // position the file to read the ifd's tag count
    //
    if (SetFilePointer( *lphFile, pTiffHeader->IFDOffset, NULL, FILE_BEGIN ) == 0xffffffff) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err: %d"), ec);
        goto exit;
    }

    //
    // read the tag count for the first ifd
    //
    if (!ReadFile( *lphFile, (LPVOID) lpwNumDirEntries, sizeof(WORD), &BytesRead, NULL )) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err: %d"), ec);
        goto exit;
    }
    RetVal = TRUE;
    
exit:
    if (!RetVal)
    {
        if (*lphFile != INVALID_HANDLE_VALUE) {
            CloseHandle(*lphFile);
            *lphFile = INVALID_HANDLE_VALUE;
        }
        *lpdwFileSize = 0;
        lpwNumDirEntries = 0;
        SetLastError(ec);
    }
    return RetVal;
}

//*********************************************************************************
//* Name:   TiffAddMsTags()
//* Author: Oded Sacher
//* Date:   Nov 8, 1999
//*********************************************************************************
//* DESCRIPTION:
//*     Adds Microsoft Tags to a Tiff file.
//*
//* PARAMETERS:
//*     [IN ]   LPTSTR          FileName
//*                 pointer to the file name.
//*
//*     [IN ]   PMS_TAG_INFO    MsTagInfo
//*                 pointer to a structure containing all info to be written.
//*
//*
//*     [IN ]   BOOL            fSendJob
//*                 Flag that indicates an outbound job.
//*
//*
//* RETURN VALUE:
//*     TRUE
//*         If no error occured.
//*     FALSE
//*         If an error occured.
//*********************************************************************************
BOOL
TiffAddMsTags(
    LPTSTR          FileName,
    PMS_TAG_INFO    MsTagInfo,
    BOOL            fSendJob
    )
{
    HANDLE hFile;
    DWORD FileSize;
    TIFF_HEADER TiffHeader;
    WORD NumDirEntries;
    DWORD BytesRead;
    BOOL rVal = FALSE;
    PTIFF_TAG TiffTags = NULL;
    DWORD IfdSize;
    DWORD NextIFDOffset;
    DWORD NewIFDOffset;
    TIFF_TAG MsTags[MAX_MS_TIFFTAGS] = {0};
    DWORD MsTagCnt = 0;
    DWORD i;
    DWORD MsTagsIndex;
    DWORD TiffTagsIndex;
    DWORD dwWrittenTagsNum = 0;
    DEBUG_FUNCTION_NAME(TEXT("TiffAddMsTags"));

    if (!TiffOpenFile(FileName, &hFile, &FileSize, &TiffHeader, &NumDirEntries)) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err: %d"), GetLastError());
        return FALSE;        
    }

    //
    // allocate memory for the first ifd's tags
    //
    IfdSize = NumDirEntries * sizeof(TIFF_TAG);
    TiffTags = (PTIFF_TAG) MemAlloc( IfdSize );
    if (!TiffTags) {
        DebugPrintEx( DEBUG_ERR,TEXT("Failed to allolcate memory"));
        goto exit;
    }

    //
    // read the the first ifd's tags
    //

    if (!ReadFile( hFile, (LPVOID) TiffTags, IfdSize, &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // read the next pointer
    //
    if (!ReadFile( hFile, (LPVOID) &NextIFDOffset, sizeof(DWORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // position the file to the end
    //
    if (SetFilePointer( hFile, 0, NULL, FILE_END ) == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // write out the strings
    //
    MsTagCnt = 0;
    //[RB]
    //[RB] Get a filled TIFF_TAG structure for this string tag in MsTags[MsTagCnt].
    //[RB] Write the string to file at the current file location if it does not fit
    //[RB] into TIFF_TAG::DataOffset.
    //[RB]
    if (MsTagInfo->Csid) {
        if (AddStringTag( hFile, MsTagInfo->Csid, TIFFTAG_CSID, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    if (MsTagInfo->Tsid) {
        if (AddStringTag( hFile, MsTagInfo->Tsid, TIFFTAG_TSID, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    if (MsTagInfo->Port) {
        if (AddStringTag( hFile, MsTagInfo->Port, TIFFTAG_PORT, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    if (fSendJob == FALSE)
    {
        // Receive job
        if (MsTagInfo->Routing) {
            if (AddStringTag( hFile, MsTagInfo->Routing, TIFFTAG_ROUTING, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->CallerId) {
            if (AddStringTag( hFile, MsTagInfo->CallerId, TIFFTAG_CALLERID, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }
    }
    else
    {
        // Send job
        if (MsTagInfo->RecipName) {
            if (AddStringTag( hFile, MsTagInfo->RecipName, TIFFTAG_RECIP_NAME, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipNumber) {
            if (AddStringTag( hFile, MsTagInfo->RecipNumber, TIFFTAG_RECIP_NUMBER, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipCompany) {
            if (AddStringTag( hFile, MsTagInfo->RecipCompany, TIFFTAG_RECIP_COMPANY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipStreet) {
            if (AddStringTag( hFile, MsTagInfo->RecipStreet, TIFFTAG_RECIP_STREET, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipCity) {
            if (AddStringTag( hFile, MsTagInfo->RecipCity, TIFFTAG_RECIP_CITY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipState) {
            if (AddStringTag( hFile, MsTagInfo->RecipState, TIFFTAG_RECIP_STATE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipZip) {
            if (AddStringTag( hFile, MsTagInfo->RecipZip, TIFFTAG_RECIP_ZIP, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipCountry) {
            if (AddStringTag( hFile, MsTagInfo->RecipCountry, TIFFTAG_RECIP_COUNTRY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipTitle) {
            if (AddStringTag( hFile, MsTagInfo->RecipTitle, TIFFTAG_RECIP_TITLE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipDepartment) {
            if (AddStringTag( hFile, MsTagInfo->RecipDepartment, TIFFTAG_RECIP_DEPARTMENT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipOfficeLocation) {
            if (AddStringTag( hFile, MsTagInfo->RecipOfficeLocation, TIFFTAG_RECIP_OFFICE_LOCATION, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipHomePhone) {
            if (AddStringTag( hFile, MsTagInfo->RecipHomePhone, TIFFTAG_RECIP_HOME_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipOfficePhone) {
            if (AddStringTag( hFile, MsTagInfo->RecipOfficePhone, TIFFTAG_RECIP_OFFICE_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->RecipEMail) {
            if (AddStringTag( hFile, MsTagInfo->RecipEMail, TIFFTAG_RECIP_EMAIL, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderName) {
            if (AddStringTag( hFile, MsTagInfo->SenderName, TIFFTAG_SENDER_NAME, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderNumber) {
            if (AddStringTag( hFile, MsTagInfo->SenderNumber, TIFFTAG_SENDER_NUMBER, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderCompany) {
            if (AddStringTag( hFile, MsTagInfo->SenderCompany, TIFFTAG_SENDER_COMPANY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderStreet) {
            if (AddStringTag( hFile, MsTagInfo->SenderStreet, TIFFTAG_SENDER_STREET, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderCity) {
            if (AddStringTag( hFile, MsTagInfo->SenderCity, TIFFTAG_SENDER_CITY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderState) {
            if (AddStringTag( hFile, MsTagInfo->SenderState, TIFFTAG_SENDER_STATE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderZip) {
            if (AddStringTag( hFile, MsTagInfo->SenderZip, TIFFTAG_SENDER_ZIP, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderCountry) {
            if (AddStringTag( hFile, MsTagInfo->SenderCountry, TIFFTAG_SENDER_COUNTRY, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderTitle) {
            if (AddStringTag( hFile, MsTagInfo->SenderTitle, TIFFTAG_SENDER_TITLE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderDepartment) {
            if (AddStringTag( hFile, MsTagInfo->SenderDepartment, TIFFTAG_SENDER_DEPARTMENT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderOfficeLocation) {
            if (AddStringTag( hFile, MsTagInfo->SenderOfficeLocation, TIFFTAG_SENDER_OFFICE_LOCATION, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderHomePhone) {
            if (AddStringTag( hFile, MsTagInfo->SenderHomePhone, TIFFTAG_SENDER_HOME_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderOfficePhone) {
            if (AddStringTag( hFile, MsTagInfo->SenderOfficePhone, TIFFTAG_SENDER_OFFICE_PHONE, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderEMail) {
            if (AddStringTag( hFile, MsTagInfo->SenderEMail, TIFFTAG_SENDER_EMAIL, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderBilling) {
            if (AddStringTag( hFile, MsTagInfo->SenderBilling, TIFFTAG_SENDER_BILLING, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderUserName) {
            if (AddStringTag( hFile, MsTagInfo->SenderUserName, TIFFTAG_SENDER_USER_NAME, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->SenderTsid) {
            if (AddStringTag( hFile, MsTagInfo->SenderTsid, TIFFTAG_SENDER_TSID, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->Document) {
            if (AddStringTag( hFile, MsTagInfo->Document, TIFFTAG_DOCUMENT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        if (MsTagInfo->Subject) {
            if (AddStringTag( hFile, MsTagInfo->Subject, TIFFTAG_SUBJECT, &MsTags[MsTagCnt] )) {
                MsTagCnt += 1;
            }
        }

        // Deal with Retries
        MsTags[MsTagCnt].TagId = TIFFTAG_RETRIES;
        MsTags[MsTagCnt].DataType = TIFF_LONG;
        MsTags[MsTagCnt].DataOffset = MsTagInfo->Retries;
        MsTags[MsTagCnt++].DataCount = 1;

        // Deal with Priority
        MsTags[MsTagCnt].TagId = TIFFTAG_PRIORITY;
        MsTags[MsTagCnt].DataType = TIFF_LONG;
        MsTags[MsTagCnt].DataOffset = MsTagInfo->Priority;
        MsTags[MsTagCnt++].DataCount = 1;

        // Deal with Broadcast Id
        MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
            goto exit;
        }
        if (!WriteFile( hFile, (LPVOID) &MsTagInfo->dwlBroadcastId, 8, &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
        MsTags[MsTagCnt].TagId = TIFFTAG_BROADCAST_ID;
        MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
        MsTags[MsTagCnt++].DataCount = 1;

        // Deal with submission Time
        MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
            goto exit;
        }
        if (!WriteFile( hFile, (LPVOID) &MsTagInfo->SubmissionTime, 8, &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
        MsTags[MsTagCnt].TagId = TIFFTAG_FAX_SUBMISSION_TIME;
        MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
        MsTags[MsTagCnt++].DataCount = 1;

        // Deal with Originally scheduled time
        MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
        if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
            goto exit;
        }
        if (!WriteFile( hFile, (LPVOID) &MsTagInfo->OriginalScheduledTime, 8, &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
        MsTags[MsTagCnt].TagId = TIFFTAG_FAX_SCHEDULED_TIME;
        MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
        MsTags[MsTagCnt++].DataCount = 1;

    }

    // Deal with Pages
    MsTags[MsTagCnt].TagId = TIFFTAG_PAGES;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->Pages;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Type
    MsTags[MsTagCnt].TagId = TIFFTAG_TYPE;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->Type;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Status
    MsTags[MsTagCnt].TagId = TIFFTAG_STATUS;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->dwStatus;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Extened status
    MsTags[MsTagCnt].TagId = TIFFTAG_EXTENDED_STATUS;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = MsTagInfo->dwExtendedStatus;
    MsTags[MsTagCnt++].DataCount = 1;

    // Deal with Extened status string
    if (MsTagInfo->lptstrExtendedStatus) {
        if (AddStringTag( hFile, MsTagInfo->lptstrExtendedStatus, TIFFTAG_EXTENDED_STATUS_TEXT, &MsTags[MsTagCnt] )) {
            MsTagCnt += 1;
        }
    }

    // Deal with Fax Times
    MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
    if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
        goto exit;
    }
    if (!WriteFile( hFile, (LPVOID) &MsTagInfo->StartTime, 8, &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }
    MsTags[MsTagCnt].TagId = TIFFTAG_FAX_START_TIME;
    MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
    MsTags[MsTagCnt++].DataCount = 1;

    MsTags[MsTagCnt].DataOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
    if (MsTags[MsTagCnt].DataOffset == 0xffffffff) {
        goto exit;
    }
    if (!WriteFile( hFile, (LPVOID) &MsTagInfo->EndTime, 8, &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }
    MsTags[MsTagCnt].TagId = TIFFTAG_FAX_END_TIME;
    MsTags[MsTagCnt].DataType = TIFF_SRATIONAL;
    MsTags[MsTagCnt++].DataCount = 1;

    //
    // Deal with fax tif version
    // Add current fax tif version
    //
    MsTags[MsTagCnt].TagId = TIFFTAG_FAX_VERSION;
    MsTags[MsTagCnt].DataType = TIFF_LONG;
    MsTags[MsTagCnt].DataOffset = FAX_TIFF_CURRENT_VERSION;
    MsTags[MsTagCnt++].DataCount = 1;

    //
    // get the current file position - this is used to set the linked list pointer
    //

    NewIFDOffset = SetFilePointer( hFile, 0, NULL, FILE_CURRENT );
    if (NewIFDOffset == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // write the tag count for the first ifd
    //
    //[RB] write our new IFD to file. The strings have just been written just before the IFD header.
    //[RB] The new IFD includes the tags of the original first IFD followed by the MsTags that we
    //[RB] add.

    NumDirEntries += (WORD) MsTagCnt;
    if (!WriteFile( hFile, (LPVOID) &NumDirEntries, sizeof(WORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }

    //
    // Write the tags in ascending order
    //
    TiffTagsIndex = 0;
    MsTagsIndex = 0;
    dwWrittenTagsNum = 0;
    for (i = 0; i < NumDirEntries; i++)
    {
        if (TiffTags[TiffTagsIndex].TagId >= MsTags[MsTagsIndex].TagId)
        {
            if (!WriteFile( hFile, (LPVOID)&MsTags[MsTagsIndex], (sizeof(TIFF_TAG)), &BytesRead, NULL ))
            {
                DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                goto exit;
            }

            if (TiffTags[TiffTagsIndex].TagId == MsTags[MsTagsIndex].TagId)
            {
                TiffTagsIndex++;
                i++;
            }

            MsTagsIndex++;
            dwWrittenTagsNum++;
        }
        else
        {
            //
            // Skip existing MS tags
            // We can find MS tags in upgrade scenario
            //
            if (!IsMSTiffTag (TiffTags[TiffTagsIndex].TagId))
            {
                if (!WriteFile( hFile, (LPVOID)&TiffTags[TiffTagsIndex], (sizeof(TIFF_TAG)), &BytesRead, NULL ))
                {
                    DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                    goto exit;
                }
                ++dwWrittenTagsNum;
            }
            TiffTagsIndex++;
        }

        //
        // Check if we reahced end of on of the tag list
        //
        if (TiffTagsIndex >= (DWORD)NumDirEntries - MsTagCnt)
        {
            if (!WriteFile( hFile, (LPVOID)&MsTags[MsTagsIndex], (MsTagCnt - MsTagsIndex)*(sizeof(TIFF_TAG)), &BytesRead, NULL ))
            {
                DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                goto exit;
            }
            dwWrittenTagsNum += MsTagCnt - MsTagsIndex;
            break;
        }


        if (MsTagsIndex >= MsTagCnt)
        {
            if (!WriteFile( hFile, (LPVOID)&TiffTags[TiffTagsIndex], ((DWORD)NumDirEntries - MsTagCnt - TiffTagsIndex)*(sizeof(TIFF_TAG)), &BytesRead, NULL ))
            {
                DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
                goto exit;
            }
            dwWrittenTagsNum += NumDirEntries - MsTagCnt - TiffTagsIndex;
            break;
        }
    }

    //
    // write the next pointer
    //
    //[RB] NewIFDOffset was taken from the original first IFD.
    //[RB] We make our new IFD point to the IFD that followed the original first IFD.
    if (!WriteFile( hFile, (LPVOID) &NextIFDOffset, sizeof(DWORD), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }


    if(dwWrittenTagsNum != NumDirEntries)
    {
        //
        // The number of the written tags less then the total tags number due to MS skipped tags.
        // Adjust the tags number.
        //
        if (SetFilePointer( hFile, NewIFDOffset, NULL, FILE_BEGIN ) == 0xffffffff) {
            DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
            goto exit;
        }

        if (!WriteFile( hFile, (LPVOID) &dwWrittenTagsNum, sizeof(WORD), &BytesRead, NULL )) {
            DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
            goto exit;
        }
    }


    //
    // re-write the tiff header
    //

    //
    // position the file to the beginning
    //

    if (SetFilePointer( hFile, 0, NULL, FILE_BEGIN ) == 0xffffffff) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err :"), GetLastError());
        goto exit;
    }

    //
    // write the tiff header
    //
    //[RB] Make the new IFD that we just created into the first IFD by writting
    //[RB] its offset at the header.
    //[RB] This basically cuts off the original first IFD from the link list of IFDs.
    //[RB] It is no longer accessible from the TIFF header.
    TiffHeader.IFDOffset = NewIFDOffset;

    if (!WriteFile( hFile, (LPVOID) &TiffHeader, sizeof(TIFF_HEADER), &BytesRead, NULL )) {
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err :"), GetLastError());
        goto exit;
    }

    rVal = TRUE;

exit:
    MemFree( TiffTags );
    CloseHandle( hFile );
    return rVal;
}

//*********************************************************************************
//* Name:   TiffLimitTagNumber()
//*********************************************************************************
//* DESCRIPTION:
//*     If TIFF file has more than dwMaxTags tags in the first page, removes
//*     tags so it has exactly dwMaxTags tags.
//*
//* PARAMETERS:
//*     [IN ]   LPCTSTR     FileName        pointer to the file name.
//*     [IN ]   DWORD       dwMaxTags       desired maximum number of tags
//*
//*
//* RETURN VALUE:
//*     TRUE         If no error occured.
//*     FALSE        If an error occured. LastError is set. The file may not be valid.
//*********************************************************************************
BOOL
TiffLimitTagNumber(
    LPCTSTR          FileName,
    DWORD           dwMaxTags
    )
{
    HANDLE hFile = INVALID_HANDLE_VALUE;
    TIFF_HEADER TiffHeader;
    DWORD FileSize;
    WORD NumDirEntries;
    DWORD BytesRead;
    DWORD NextIFDPtr;
    DWORD NewNextIFDPtr;
    DWORD NextIFDOffset;
    DWORD ec;
    BOOL RetVal = FALSE;
    
    DEBUG_FUNCTION_NAME(TEXT("TiffLimitTagNumber"));

    if (!TiffOpenFile(FileName, &hFile, &FileSize, &TiffHeader, &NumDirEntries)) {
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err: %d"), GetLastError());
        return FALSE;        
    }

    NextIFDPtr = TiffHeader.IFDOffset + NumDirEntries*sizeof(TIFF_TAG);
    if (NextIFDPtr > FileSize-sizeof(DWORD)) {
        ec = ERROR_FILE_CORRUPT;
        DebugPrintEx( DEBUG_ERR,TEXT("Invalid TIFF Format"));
        goto exit;
    }
    
    //
    // Check whether tag count is below max
    //
    if (NumDirEntries <= dwMaxTags)
    {
        DebugPrintEx( DEBUG_MSG,TEXT("No need to change file  NumDirEntries=%d MaxTags=%d"),
            NumDirEntries, dwMaxTags);
        RetVal = TRUE;
        goto exit;
    }
   

    //
    // position the file to read the ifd's next IFD pointer
    //
    if (SetFilePointer( hFile, NextIFDPtr, NULL, FILE_BEGIN ) == 0xffffffff) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err: %d"), ec);
        goto exit;
    }
    //
    // read the next pointer
    //
    if (!ReadFile( hFile, (LPVOID) &NextIFDOffset, sizeof(DWORD), &BytesRead, NULL )) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("ReadFile failed, err: %d"), ec);
        goto exit;
    }


    //
    // position the file to write the ifd's new tag count
    //
    if (SetFilePointer( hFile, TiffHeader.IFDOffset, NULL, FILE_BEGIN ) == 0xffffffff) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err: %d"), ec);
        goto exit;
    }
    //
    // write the new tag count
    //
    if (!WriteFile( hFile, (LPVOID) &dwMaxTags, sizeof(WORD), &BytesRead, NULL )) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err: %d"), ec);
        goto exit;
    }

    
    NewNextIFDPtr = TiffHeader.IFDOffset + dwMaxTags*sizeof(TIFF_TAG);
    //
    // position the file to write the ifd's next IFD pointer
    //
    if (SetFilePointer( hFile, NewNextIFDPtr, NULL, FILE_BEGIN ) == 0xffffffff) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("SetFilePointer failed, err: %d"), ec);
        goto exit;
    }
    //
    // write the next pointer
    //
    if (!WriteFile( hFile, (LPVOID) &NextIFDOffset, sizeof(DWORD), &BytesRead, NULL )) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,TEXT("WriteFile failed, err: %d"), ec);
        goto exit;
    }

    RetVal = TRUE;

exit:
    if (hFile != INVALID_HANDLE_VALUE)
    {
        CloseHandle( hFile );
    }
    if (!RetVal)
    {
        SetLastError(ec);
    }
    return RetVal;
}


BOOL
PrintTiffFile(
    HDC PrinterDC,
    LPTSTR FileName
)
// This function is used by the client dll (FxsApi.dll) only, to print uncompressed TIFFs to
// our fax printer driver (to file) so they get saved in the proper fax
// format before send to the server for faxing.
//
{
    BOOL                bRes = TRUE;
    TIFF_INFO           TiffInfo;
    HANDLE              hTiff = NULL;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    DWORD               i;
    INT                 HorzRes;
    INT                 VertRes;
    DWORD               VertResFactor = 1;
    PTIFF_TAG           TiffTags = NULL;
    DWORD               XRes = 0;
    DWORD               YRes = 0;
    LPBYTE              Bitmap = NULL;
    INT                 DestWidth;
    INT                 DestHeight;
    FLOAT               ScaleX;
    FLOAT               ScaleY;
    FLOAT               Scale;
    DWORD               LineSize;
    DWORD               dwBitmapSize;

#define ORIG_BIYPELSPERMETER            7874    // Pixels per meter at 200dpi

    struct
    {
        BITMAPINFOHEADER bmiHeader;
        RGBQUAD bmiColors[2];
    }
    SrcBitmapInfo =
    {

        {
            sizeof(BITMAPINFOHEADER),                        //  biSize
            0,                                               //  biWidth
            0,                                               //  biHeight
            1,                                               //  biPlanes
            1,                                               //  biBitCount
            BI_RGB,                                          //  biCompression
            0,                                               //  biSizeImage
            7874,                                            //  biXPelsPerMeter     - 200dpi
            ORIG_BIYPELSPERMETER,                            //  biYPelsPerMeter
            0,                                               //  biClrUsed
            0,                                               //  biClrImportant
        },
        {
            {
              0,                                             //  rgbBlue
              0,                                             //  rgbGreen
              0,                                             //  rgbRed
              0                                              //  rgbReserved
            },
            {
              255,                                           //  rgbBlue
              255,                                           //  rgbGreen
              255,                                           //  rgbRed
              0                                              //  rgbReserved
            }
        }
    };

    DOCINFO docInfo = {0};
    docInfo.cbSize = sizeof(docInfo);
    docInfo.lpszDocName = FileName;

    if (!(GetDeviceCaps(PrinterDC, RASTERCAPS) & RC_BITBLT))
    {
        //
        // Printer cannot display bitmaps
        //
        bRes = FALSE;
        return bRes;
    }


    //
    // open the tiff file
    //

    hTiff = TiffOpen( FileName, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (hTiff == NULL)
    {
        bRes = FALSE;
        goto exit;
    }

    TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    if (!TiffInfo.PhotometricInterpretation)
    {
        //
        // white is zero
        //
        SrcBitmapInfo.bmiColors[1].rgbBlue         = 0;
        SrcBitmapInfo.bmiColors[1].rgbGreen        = 0;
        SrcBitmapInfo.bmiColors[1].rgbRed          = 0;
        SrcBitmapInfo.bmiColors[1].rgbReserved     = 0;
        SrcBitmapInfo.bmiColors[0].rgbBlue         = 0xFF;
        SrcBitmapInfo.bmiColors[0].rgbGreen        = 0xFF;
        SrcBitmapInfo.bmiColors[0].rgbRed          = 0xFF;
        SrcBitmapInfo.bmiColors[0].rgbReserved     = 0;
    }

    HorzRes = GetDeviceCaps( PrinterDC, HORZRES );
    VertRes = GetDeviceCaps( PrinterDC, VERTRES );

    for (i=0; i<TiffInfo.PageCount; i++)
    {
        if (!TiffSeekToPage( hTiff, i+1, FILLORDER_MSB2LSB ))
        {
            bRes = FALSE;
            break;
        }

        if (TiffInstance->YResolution < 100)
        {
            SrcBitmapInfo.bmiHeader.biYPelsPerMeter /= 2;
            VertResFactor = 2;
        }
        else
        {
            SrcBitmapInfo.bmiHeader.biYPelsPerMeter = ORIG_BIYPELSPERMETER;
            VertResFactor = 1;
        }
        LineSize = TiffInstance->ImageWidth / 8;
        LineSize += (TiffInstance->ImageWidth % 8) ? 1 : 0;

        dwBitmapSize = TiffInstance->ImageHeight * LineSize;
        Bitmap = (LPBYTE) VirtualAlloc( NULL, dwBitmapSize, MEM_COMMIT, PAGE_READWRITE );
        if(NULL == Bitmap)
        {
            bRes = FALSE;
            break;
        }

        if(!TiffRead(hTiff, Bitmap, dwBitmapSize, 0))
        {
            bRes = FALSE;
            break;
        }
        if(StartPage( PrinterDC ) <= 0)
        {
            bRes = FALSE;
            break;
        }

        ScaleX = (FLOAT) TiffInstance->ImageWidth / (FLOAT) HorzRes;
        ScaleY = ((FLOAT) TiffInstance->ImageHeight * VertResFactor) / (FLOAT) VertRes;
        Scale = ScaleX > ScaleY ? ScaleX : ScaleY;
        DestWidth = (int) ((FLOAT) TiffInstance->ImageWidth / Scale);
        DestHeight = (int) (((FLOAT) TiffInstance->ImageHeight * VertResFactor) / Scale);
        SrcBitmapInfo.bmiHeader.biWidth = TiffInstance->ImageWidth;
        SrcBitmapInfo.bmiHeader.biHeight = -(INT) TiffInstance->ImageHeight;

        if(GDI_ERROR == StretchDIBits(
                                    PrinterDC,
                                    0,
                                    0,
                                    DestWidth,
                                    DestHeight,
                                    0,
                                    0,
                                    TiffInstance->ImageWidth,
                                    TiffInstance->ImageHeight,
                                    Bitmap,
                                    (BITMAPINFO *) &SrcBitmapInfo,
                                    DIB_RGB_COLORS,
                                    SRCCOPY ))
        {
            bRes = FALSE;
            break;
        }

        if(EndPage( PrinterDC ) <= 0)
        {
            bRes = FALSE;
            break;
        }

        if(!VirtualFree( Bitmap, 0, MEM_RELEASE ))
        {
            bRes = FALSE;
            break;
        }
        Bitmap = NULL;
    }


exit:

    if(EndDoc(PrinterDC) <= 0)
    {
        bRes = FALSE;
    }

    if(Bitmap)
    {
        if(!VirtualFree( Bitmap, 0, MEM_RELEASE ))
        {
            bRes = FALSE;
        }
        Bitmap = NULL;
    }

    if (hTiff)
    {
        TiffClose( hTiff );
    }

    return bRes;

}


BOOL
ConvertTiffFileToValidFaxFormat(
    LPTSTR TiffFileName,
    LPTSTR NewFileName,
    LPDWORD Flags
    )
{
    BOOL Rval = FALSE;
    DWORD i;
    TIFF_INFO TiffInfo;
    HANDLE hTiff = NULL;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    PTIFF_INSTANCE_DATA TiffInstanceMmr = NULL;
    LPBYTE Buffer = NULL;
    DWORD BufferSize;
    DWORD ResultSize;
    LPBYTE CompBuffer = NULL;
    FILE_MAPPING fmTemp = {0};
    PTIFF_HEADER TiffHdr;
    LPBYTE p;
    DWORD CurrOffset=0;
    LPDWORD LastIfdOffset;
    PFAXIFD TiffIfd;
    DWORD CompressionType;
    DWORD G3Options;
    DWORD XResolution;
    DWORD YResolution;
    DWORD YResolutionFirstPage;
    DWORD dwPage = 0;
    DWORD PageWidth;
    DWORD PageBytes;
    BOOL ValidFaxTiff;
    PTIFF_TAG TiffTags;
    DWORD IfdOffset;
    WORD NumDirEntries;
    BOOL ProduceUncompressedBits = FALSE;
    DWORD NewFileSize;


    *Flags = 0;

    //
    // open the tiff file
    //

    hTiff = TiffOpen( TiffFileName, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (hTiff == NULL)
    {
        *Flags |= TIFFCF_NOT_TIFF_FILE;
        goto exit;
    }

    TiffInstance = (PTIFF_INSTANCE_DATA) hTiff;

    //
    // check to see if the if good
    //

    IfdOffset = TiffInstance->TiffHdr.IFDOffset;
    ValidFaxTiff = TRUE;

    while ( IfdOffset )
    {

        dwPage++;
        //
        // get the count of tags in this IFD
        //

        NumDirEntries = *(LPWORD)(TiffInstance->fPtr + IfdOffset);

        //
        // set the tag pointer
        //

        TiffTags = (PTIFF_TAG)(TiffInstance->fPtr + IfdOffset + sizeof(WORD));

        //
        // get the tiff information
        //

        CompressionType = 0;
        G3Options = 0;
        PageWidth = 0;
        XResolution = 0;
        YResolution = 0;

        for (i=0; i<NumDirEntries; i++)
        {
            switch( TiffTags[i].TagId )
            {
                case TIFFTAG_COMPRESSION:
                    if (!GetTagData( TiffInstance, 0, &TiffTags[i], &CompressionType ))
                    {
                        *Flags |= TIFFCF_NOT_TIFF_FILE;
                        goto exit;
                    }
                    break;

                case TIFFTAG_GROUP3OPTIONS:
                    if (!GetTagData( TiffInstance, 0, &TiffTags[i], &G3Options))
                    {
                        *Flags |= TIFFCF_NOT_TIFF_FILE;
                        goto exit;
                    }
                    break;

                case TIFFTAG_XRESOLUTION:
                    if (!GetTagData( TiffInstance, 0, &TiffTags[i], &XResolution))
                    {
                        *Flags |= TIFFCF_NOT_TIFF_FILE;
                        goto exit;
                    }
                    break;

                case TIFFTAG_YRESOLUTION:
                    if (!GetTagData( TiffInstance, 0, &TiffTags[i], &YResolution))
                    {
                        *Flags |= TIFFCF_NOT_TIFF_FILE;
                        goto exit;
                    }
                    if (1 == dwPage)
                    {
                        YResolutionFirstPage = YResolution;
                    }
                    break;

                case TIFFTAG_IMAGEWIDTH:
                    if (!GetTagData( TiffInstance, 0, &TiffTags[i], &PageWidth))
                    {
                        *Flags |= TIFFCF_NOT_TIFF_FILE;
                        goto exit;
                    }
                    break;
            }
        }

        if (CompressionType == COMPRESSION_NONE)
        {
            *Flags |= TIFFCF_UNCOMPRESSED_BITS;
        } else if (CompressionType == COMPRESSION_CCITTFAX4 && PageWidth == FAXBITS)
        {
            //
            // TIFF files must have the Modified Modified READ (MMR) two-dimensional encoding data compression format.
            // This format is defined by CCITT (The International Telegraph and Telephone Consultative Committee) Group 4.
            //
            ValidFaxTiff = TRUE;
        }
        else
        {
            //
            // unsupported compression type
            // try to use imaging program to print the tiff file,it might understand the compression scheme
            //
            ValidFaxTiff = FALSE;
            *Flags = TIFFCF_NOT_TIFF_FILE;
            goto exit;
        }

        //
        // the resolution check must account for offical Class F tiff
        // documents and pseudo fax documents created by scanners and
        // imaging applications.
        //
        // |-------------|----------|----------|---------|
        // |  scan width |  pels    |  xres    |  yres   |
        // |-------------|----------|----------|---------|
        // |             |          |          |         |
        // |   8.46/215  |  1728    |  204     |  98/196 |
        // |             |          |          |         |
        // |   8.50/216  |  1700    |  200     |  200    |
        // |             |          |          |         |
        // |-------------|----------|----------|---------|
        //

        if (XResolution > 204       ||
            YResolution > 200       ||
            PageWidth > FAXBITS     ||
            YResolutionFirstPage != YResolution)
        {
            //
            // the file cannot be converted to valid fax bits
            // so we produce a tiff file that has uncompressed bits
            // the caller can then render the uncompressed bits
            // using the fax print driver to get good fax bits
            //
            ProduceUncompressedBits = TRUE;
            *Flags |= TIFFCF_UNCOMPRESSED_BITS;
            ValidFaxTiff = FALSE;
        }

        //
        // get the next IFD offset
        //

        IfdOffset = *(UNALIGNED DWORD *)(TiffInstance->fPtr + (NumDirEntries * sizeof(TIFF_TAG)) + IfdOffset + sizeof(WORD));
    }

    if (ValidFaxTiff)
    {
        *Flags |= TIFFCF_ORIGINAL_FILE_GOOD;
        Rval = TRUE;
        goto exit;
    }

    PageWidth = max( TiffInstance->ImageWidth, FAXBITS );
    PageBytes = (PageWidth/8)+(PageWidth%8?1:0);

    //
    // open the temporary file to hold the new mmr tiff data
    //

    if (ProduceUncompressedBits)
    {
        NewFileSize = sizeof(TIFF_HEADER) + (TiffInstance->PageCount * (sizeof(FAXIFD) + (TiffInfo.ImageHeight * PageWidth)));
    }
    else
    {
        NewFileSize = GetFileSize( TiffInstance->hFile, NULL );
    }

    if (!MapFileOpen( NewFileName, FALSE, NewFileSize, &fmTemp ))
    {
        goto exit;
    }

    //
    // allocate a temporary buffer big enough to hold an uncompressed image
    //

    BufferSize = TiffInfo.ImageHeight * PageWidth;

    Buffer = VirtualAlloc(
        NULL,
        BufferSize,
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!Buffer)
    {
        goto exit;
    }

    CompBuffer = VirtualAlloc(
        NULL,
        GetFileSize(TiffInstance->hFile,NULL),
        MEM_COMMIT,
        PAGE_READWRITE
        );
    if (!CompBuffer)
    {
        goto exit;
    }

    //
    // convert the tiff data to mmr
    //

    TiffHdr = (PTIFF_HEADER) fmTemp.fPtr;

    TiffHdr->Identifier = TIFF_LITTLEENDIAN;
    TiffHdr->Version = TIFF_VERSION;
    TiffHdr->IFDOffset = 0;

    p = fmTemp.fPtr + sizeof(TIFF_HEADER);
    CurrOffset = sizeof(TIFF_HEADER);
    LastIfdOffset = (LPDWORD) (p - sizeof(DWORD));

    TiffInstanceMmr = TiffCreate( NULL, TIFF_COMPRESSION_MMR, PageWidth, FILLORDER_MSB2LSB, 1 );
    if (TiffInstanceMmr == NULL)
    {
        goto exit;
    }

    for (i=0; i<TiffInfo.PageCount; i++)
    {
        //
        // position the file pointers and read the raw data
        //

        if (!TiffSeekToPage( hTiff, i+1, FILLORDER_MSB2LSB ))
        {
            goto exit;
        }

        //
        // get the uncompressed bits
        //

        if (!TiffRead( hTiff, Buffer, BufferSize, ProduceUncompressedBits ? 0 : FAXBITS ))
        {
            goto exit;
        }

        if (ProduceUncompressedBits)
        {
            ResultSize = PageBytes * TiffInstance->ImageHeight;
            CopyMemory( p, Buffer, ResultSize );

        }
        else
        {
            //
            // compress the bits
            //

            TiffInstanceMmr->bitbuf = CompBuffer;
            TiffInstanceMmr->bitcnt = DWORDBITS;
            TiffInstanceMmr->bitdata = 0;
            TiffInstanceMmr->BytesPerLine = PageBytes;

            EncodeFaxPageMmrCompression(
                TiffInstanceMmr,
                Buffer,
                PageWidth,
                TiffInstance->ImageHeight,
                &ResultSize
                );

            CopyMemory( p, CompBuffer, ResultSize );
        }

        CurrOffset += ResultSize;
        p += ResultSize;

        *LastIfdOffset = (DWORD)(p - fmTemp.fPtr);

        //
        // write the ifd
        //

        TiffIfd = (PFAXIFD) p;

        CopyMemory( TiffIfd, &gc_FaxIFDTemplate, sizeof(gc_FaxIFDTemplate) );

        TiffIfd->xresNum                        = TiffInstance->XResolution;
        TiffIfd->yresNum                        = TiffInstance->YResolution;
        TiffIfd->ifd[IFD_PAGENUMBER].value      = MAKELONG( i+1, 0);
        TiffIfd->ifd[IFD_IMAGEWIDTH].value      = PageWidth;
        TiffIfd->ifd[IFD_IMAGEHEIGHT].value     = TiffInstance->ImageHeight;
        TiffIfd->ifd[IFD_ROWSPERSTRIP].value    = TiffInstance->ImageHeight;
        TiffIfd->ifd[IFD_STRIPBYTECOUNTS].value = ResultSize;
        TiffIfd->ifd[IFD_STRIPOFFSETS].value    = CurrOffset - ResultSize;
        TiffIfd->ifd[IFD_XRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, xresNum );
        TiffIfd->ifd[IFD_YRESOLUTION].value     = CurrOffset + FIELD_OFFSET( FAXIFD, yresNum );
        TiffIfd->ifd[IFD_SOFTWARE].value        = CurrOffset + FIELD_OFFSET( FAXIFD, software );
        TiffIfd->ifd[IFD_FILLORDER].value       = FILLORDER_MSB2LSB;
        TiffIfd->ifd[IFD_COMPRESSION].value     = ProduceUncompressedBits ? COMPRESSION_NONE : TIFF_COMPRESSION_MMR;
        TiffIfd->ifd[IFD_G3OPTIONS].value       = ProduceUncompressedBits ? 0 : GROUP3OPT_FILLBITS | GROUP3OPT_2DENCODING;

        //
        // update the page pointers
        //

        LastIfdOffset = (LPDWORD) (p + FIELD_OFFSET(FAXIFD,nextIFDOffset));
        CurrOffset += sizeof(FAXIFD);
        p += sizeof(FAXIFD);
    }

    Rval = TRUE;

exit:
    if (fmTemp.hFile)
    {
        MapFileClose( &fmTemp, CurrOffset );
    }
    if (hTiff)
    {
        TiffClose( hTiff );
    }
    if (TiffInstanceMmr)
    {
        TiffClose( TiffInstanceMmr );
    }
    if (Buffer)
    {
        VirtualFree( Buffer, 0, MEM_RELEASE);
    }
    if (CompBuffer)
    {
        VirtualFree( CompBuffer, 0, MEM_RELEASE);
    }

    return Rval;
}

// We use this function when we send a cover page and body.
BOOL
MergeTiffFiles(
    LPCTSTR BaseTiffFile,
    LPCTSTR NewTiffFile
    )
{
    BOOL Rval = TRUE;
    FILE_MAPPING fmBase;
    FILE_MAPPING fmNew;
    LPBYTE p;
    DWORD NextIfdOffset;
    WORD TagCount;
    PTIFF_TAG TiffTag;
    DWORD i;
    DWORD j;
    LPBYTE StripOffsets;
    DWORD DataSize;
    DWORD Delta;
    DWORD Space;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    TIFF_INFO TiffInfo;

    DWORD TiffDataWidth[] = {
        0,  // nothing
        1,  // TIFF_BYTE
        1,  // TIFF_ASCII
        2,  // TIFF_SHORT
        4,  // TIFF_LONG
        8,  // TIFF_RATIONAL
        1,  // TIFF_SBYTE
        1,  // TIFF_UNDEFINED
        2,  // TIFF_SSHORT
        4,  // TIFF_SLONG
        8,  // TIFF_SRATIONAL
        4,  // TIFF_FLOAT
        8   // TIFF_DOUBLE
    };

    // verify that BaseTiffFile is a valid tiff file...
    TiffInstance = TiffOpen( BaseTiffFile, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (TiffInstance == NULL)
    {
        return FALSE;
    }
    if (!TiffClose (TiffInstance))
    {
        //
        // We can still merge the files, but we will have problems to delete it.
        //
        ASSERT_FALSE;
    }

    // verify that NewTiffFile is a valid tiff file...
    TiffInstance = TiffOpen( NewTiffFile, &TiffInfo, TRUE, FILLORDER_MSB2LSB );
    if (TiffInstance == NULL)
    {
        return FALSE;
    }
    if (!TiffClose (TiffInstance))
    {
        //
        // We can still merge the files, but we will have problems to delete it.
        //
        ASSERT_FALSE;
    }

    //
    // open the files
    //

    if (!MapFileOpen( NewTiffFile, TRUE, 0, &fmNew )) {
        return FALSE;
    }

    if (!MapFileOpen( BaseTiffFile, FALSE, fmNew.fSize, &fmBase )) {
        MapFileClose( &fmNew, 0 );
        return FALSE;
    }

    //
    // append the new file to the end of the base file
    //

    p = fmNew.fPtr + sizeof(TIFF_HEADER);
    CopyMemory( fmBase.fPtr+fmBase.fSize, p, fmNew.fSize-sizeof(TIFF_HEADER) );

    //
    // fix up the ifd pointers in the appended tiff data
    //

    Delta = fmBase.fSize - sizeof(TIFF_HEADER);

    NextIfdOffset = ((PTIFF_HEADER)fmNew.fPtr)->IFDOffset;
    while (NextIfdOffset) {
        p = fmBase.fPtr + NextIfdOffset + Delta;
        TagCount = *((LPWORD)p);
        //
        // fixup the data offsets in the tiff tags
        //
        TiffTag = (PTIFF_TAG) (p + sizeof(WORD));
        for (i=0; i<TagCount; i++) {
            DataSize = TiffDataWidth[TiffTag[i].DataType];
            Space = TiffTag[i].DataCount * DataSize;
            if (Space > 4) {
                TiffTag[i].DataOffset += Delta;
            }
            if (TiffTag[i].TagId == TIFFTAG_STRIPOFFSETS) {
                if (Space > 4) {
                    StripOffsets = (LPBYTE) (fmBase.fPtr + TiffTag[i].DataOffset);
                    for (j=0; j<TiffTag[i].DataCount; j++) {
                        if (TiffTag[i].DataType == TIFF_SHORT) {
                            *((LPWORD)StripOffsets) += (WORD)Delta;
                        } else {
                            *((LPDWORD)StripOffsets) += Delta;
                        }
                        StripOffsets += DataSize;
                    }
                } else {
                    if (TiffTag[i].DataCount > 1) {
                        Rval = FALSE;
                        goto exit;
                    }
                    TiffTag[i].DataOffset += Delta;
                }
            }
        }
        p = p + sizeof(WORD) + (TagCount * sizeof(TIFF_TAG));
        NextIfdOffset = *((LPDWORD)p);
        if (NextIfdOffset) {
            *((LPDWORD)p) = NextIfdOffset + Delta;
        }
    }

    //
    // find the last ifd offset in the chain for the base
    // file and change it to point to the first ifd in the
    // data that was appended
    //

    NextIfdOffset = ((PTIFF_HEADER)fmBase.fPtr)->IFDOffset;
    while (NextIfdOffset) {
        p = fmBase.fPtr + NextIfdOffset;
        TagCount = *((LPWORD)p);
        p = p + sizeof(WORD) + (TagCount * sizeof(TIFF_TAG));
        NextIfdOffset = *((LPDWORD)p);
    }

    *((LPDWORD)p) = (DWORD)(Delta + ((PTIFF_HEADER)fmNew.fPtr)->IFDOffset);

exit:
    //
    // close the files
    //

    MapFileClose( &fmBase, fmBase.fSize+fmNew.fSize-sizeof(TIFF_HEADER) );
    MapFileClose( &fmNew, 0 );

    return Rval;
}

BOOL
TiffRecoverGoodPages(
    LPTSTR SrcFileName,
    LPDWORD RecoveredPages,
    LPDWORD TotalPages
    )

/*++

Routine Description:

    Try to recover the good data out of the source and put it into the destination file

Arguments:

    SrcFileName            - source file name
    RecoveredPages         - number of pages we were able to recover
    TotalPages             - total pages in the tiff file

Return Value:

    TRUE for success, FALSE for failure. In case of failure, out params are set to zero.

--*/

{

    TIFF_INFO           TiffInfo;
    PTIFF_INSTANCE_DATA TiffInstance = NULL;
    BOOL                bSuccess = FALSE;
    BOOL                fCloseTiff;


    if (!SrcFileName || !RecoveredPages || !TotalPages)
    {
        return FALSE;
    }

    *RecoveredPages = 0;
    *TotalPages = 0;

    TiffInstance = (PTIFF_INSTANCE_DATA) TiffOpen(SrcFileName,&TiffInfo,FALSE,FILLORDER_LSB2MSB);

    if (!TiffInstance)
    {
        *TotalPages = 0;
        return FALSE;
    }
    fCloseTiff = TRUE;

    *TotalPages = TiffInfo.PageCount;


    if (TiffInstance->ImageHeight)
    {
        //
        // should be view-able
        //
        bSuccess = TRUE;
        goto exit;
    }

    if (*TotalPages < 1)
    {
        //
        // no data to recover
        //
        goto exit;
    }

    switch (TiffInstance->CompressionType)
    {
        case TIFF_COMPRESSION_MH:

            if (!PostProcessMhToMmr( (HANDLE) TiffInstance, TiffInfo, NULL ))
            {
                // beware! PostProcessMhToMmr closes TiffInstance
                return FALSE;
            }
            fCloseTiff = FALSE;
            break;

        case TIFF_COMPRESSION_MR:

            if (!PostProcessMrToMmr( (HANDLE) TiffInstance, TiffInfo, NULL ))
            {
                // beware! PostProcessMrToMmr closes TiffInstance
                return FALSE;
            }
            fCloseTiff = FALSE;
            break;

        case TIFF_COMPRESSION_MMR:
            bSuccess = TRUE;
            break;
        default:
        //
        // unexpected compression type
        //
        DebugPrint((TEXT("TiffRecoverGoodPages: %s: Unexpected Compression type %d\n"),
                   TiffInstance->FileName,
                   TiffInstance->CompressionType));
        goto exit;
    }

    *RecoveredPages = TiffInfo.PageCount;
    *TotalPages    += 1;

    bSuccess = TRUE;

exit:
    if (TRUE == fCloseTiff)
    {
        TiffClose( (HANDLE) TiffInstance );
    }
    return bSuccess;

}


BOOL
PrintRandomDocument(
    LPCTSTR FaxPrinterName,
    LPCTSTR DocName,
    LPTSTR OutputFile
    )

/*++

Routine Description:

    Prints a document that is attached to a message

Arguments:

    FaxPrinterName  - name of the printer to print the attachment on
    DocName         - name of the attachment document

Return Value:

    Print job id or zero for failure.

--*/

{
    SHELLEXECUTEINFO sei;
    TCHAR Args[2 * MAX_PATH];
    TCHAR TempPath[MAX_PATH];
    TCHAR FullPath[MAX_PATH];
    HANDLE hMap = NULL;
    HANDLE hProcessMutex = NULL;
    HANDLE hMutexAttach = NULL;
    HANDLE hEvent[2] = {0}; // EndDocEvent , AbortEvent
    LPTSTR EventName[2] = {0};
    LPTSTR szEndDocEventName = NULL;
    LPTSTR szAbortEventName  = NULL;
    LPDWORD pJobId = NULL;
    BOOL bSuccess = FALSE;
    TCHAR  szExtension[_MAX_EXT] = {0};
    TCHAR szTmpInputFile[_MAX_FNAME] = {0};
    LPTSTR lptstrExtension;
    LPTSTR lptstrEndStr;
    DWORD dwFailedDelete = 0;
    DWORD i;
    DWORD dwWaitRes;
    DWORD dwRes = ERROR_SUCCESS;
#ifdef  UNICODE // No security on created objects for Win9X
    SECURITY_ATTRIBUTES *pSA = NULL;
#endif

    DEBUG_FUNCTION_NAME(TEXT("PrintRandomDocument"));

    Assert (FaxPrinterName && DocName && OutputFile);

    //
    // Create the EndDoc and Abort Events names
    //
    szEndDocEventName = (LPTSTR) MemAlloc( SizeOfString(OutputFile) + SizeOfString(FAXXP_ATTACH_END_DOC_EVENT) );
    szAbortEventName  = (LPTSTR) MemAlloc( SizeOfString(OutputFile) + SizeOfString(FAXXP_ATTACH_ABORT_EVENT) );

    if ( !szEndDocEventName || !szAbortEventName )
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("Memory allocation for szEndDocEventName or szAbortEventName failed.\n")
                );

        MemFree(szEndDocEventName);
        MemFree(szAbortEventName);
        return FALSE;
    }

    _tcscpy (szEndDocEventName, OutputFile);
    _tcscat (szEndDocEventName, FAXXP_ATTACH_END_DOC_EVENT);
    EventName[0] = _tcsrchr(szEndDocEventName, TEXT('\\'));
    EventName[0] = _tcsinc(EventName[0]);

    _tcscpy (szAbortEventName, OutputFile);
    _tcscat (szAbortEventName, FAXXP_ATTACH_ABORT_EVENT);
    EventName[1] = _tcsrchr(szAbortEventName, TEXT('\\'));
    EventName[1] = _tcsinc(EventName[1]);

    //
    // get the temp path name and use it for the
    // working dir of the launched app
    //
    if (!GetTempPath( sizeof(TempPath)/sizeof(TCHAR), TempPath ))
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetTempPath() failed. (ec: %ld)"),
                GetLastError());
        MemFree(szEndDocEventName);
        MemFree(szAbortEventName);
        return FALSE;
    }

    _tsplitpath( DocName, NULL, NULL, NULL, szExtension );
    lptstrExtension =  szExtension;
    if (0 == _tcsncmp(lptstrExtension, TEXT("."), 1))
    {
        lptstrExtension = _tcsinc(lptstrExtension);
    }
    if (0 == GenerateUniqueFileName( TempPath,
                                     lptstrExtension,
                                     FullPath,
                                     sizeof(FullPath) / sizeof(FullPath[0])
                                    ))
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("GenerateUniqueFileName() failed. (ec: %ld)"),
                GetLastError());
        MemFree(szEndDocEventName);
        MemFree(szAbortEventName);
        return FALSE;
    }

    if (!CopyFile (DocName, FullPath, FALSE)) // FALSE - File already exist
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CopyFile() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
    _tsplitpath( FullPath, NULL, NULL, szTmpInputFile, NULL );


    //
    // serialize access to this function.
    // this is necessary because we have to
    // control access to the global shared memory region and mutex
    //
    hMutexAttach = OpenMutex(MUTEX_ALL_ACCESS, FALSE, FAXXP_ATTACH_MUTEX_NAME);
    if (!hMutexAttach)
    {
        //
        //  Since mapispooler might be running under a different security context,
        //  we create a security attribute buffer with us as owners (full access)
        //  and MUTEX_ALL_ACCESS rights to authenticated users.
        //
#ifdef  UNICODE // No security on created objects for Win9X
        pSA = CreateSecurityAttributesWithThreadAsOwner (MUTEX_ALL_ACCESS, MUTEX_ALL_ACCESS, 0); 
        if (!pSA)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                    dwRes);
            goto exit;
        }
#endif
        hMutexAttach = CreateMutex(
#ifdef  UNICODE // No security on created objects for Win9X
                         pSA,
#else
                         NULL,
#endif
                         TRUE,
                         FAXXP_ATTACH_MUTEX_NAME
                        );

        if (!hMutexAttach)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateMutex() failed. (ec: %ld)"),
                dwRes);
#ifdef  UNICODE // No security on created objects for Win9X
            DestroySecurityAttributes (pSA);
#endif
            goto exit;
        }
#ifdef  UNICODE // No security on created objects for Win9X
        DestroySecurityAttributes (pSA);
#endif
    }
    else
    {
        dwWaitRes = WaitForSingleObject( hMutexAttach, 1000 * 60 * 5);

        if (WAIT_FAILED == dwWaitRes)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("WaitForSingleObject() failed, (LastErorr: %ld)"),
                dwRes);
            CloseHandle( hMutexAttach );
            hMutexAttach = NULL;
            goto exit;
        }

        if (WAIT_TIMEOUT == dwWaitRes)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("WaitForSingleObject failed on timeout"));
            dwRes = WAIT_TIMEOUT;
            CloseHandle( hMutexAttach );
            hMutexAttach = NULL;
            goto exit;
        }

        if (WAIT_ABANDONED == dwWaitRes)
        {
            //
            // Just debug print and continue
            //
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("WaitForSingleObject() returned WAIT_ABANDONED"));
        }
    }

    //
    // Create EndDocEvent and AbortEvent so the printer driver can signal the printing process is terminated.
    // Create a security attribute with us as owners.
    //
#ifdef  UNICODE // No security on created objects for Win9X
    pSA = CreateSecurityAttributesWithThreadAsOwner (EVENT_ALL_ACCESS, 0, 0);
    if (!pSA)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
#endif
    for (i = 0; i < 2; i++)
    {
        if (!hEvent[i])
        {
            hEvent[i] = CreateEvent(
#ifdef  UNICODE // No security on created objects for Win9X
                                    pSA,
#else
                                    NULL,
#endif
                                    FALSE,
                                    FALSE,
                                    EventName[i]
                                    );

            if (!hEvent[i])
            {
                dwRes = GetLastError ();
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateEvent() failed. (ec: %ld)"),
                    dwRes);
#ifdef  UNICODE // No security on created objects for Win9X 
                DestroySecurityAttributes (pSA);
#endif
                goto exit;
            }
        }
    }
#ifdef  UNICODE // No security on created objects for Win9X 
    DestroySecurityAttributes (pSA);
#endif
    //
    // note that this is serialized using mutex.
    // we can only have one application setting this at a time or
    // we'll stomp on ourselves.
    //
    if (!SetEnvironmentVariable( FAX_ENVVAR_PRINT_FILE, OutputFile ))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("SetEnvironmentVariable() failed. (ec: %ld)"),
            dwRes);
        goto exit;
    }
    //
    // Create a security attribute with us as owners.
    //
#ifdef  UNICODE // No security on created objects for Win9X
    pSA = CreateSecurityAttributesWithThreadAsOwner (FILE_MAP_WRITE | FILE_MAP_READ, 0, 0);
    if (!pSA)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
#endif
    hMap = CreateFileMapping(
        INVALID_HANDLE_VALUE,
#ifdef  UNICODE // No security on created objects for Win9X
        pSA,
#else
        NULL,
#endif
        PAGE_READWRITE | SEC_COMMIT,
        0,
        4096,
        FAXXP_MEM_NAME
        );
    if (!hMap)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateFileMapping() failed. (ec: %ld)"),
            dwRes);
#ifdef  UNICODE // No security on created objects for Win9X 
        DestroySecurityAttributes (pSA);
#endif
        goto exit;
    }
#ifdef  UNICODE // No security on created objects for Win9X
    DestroySecurityAttributes (pSA);
#endif
    pJobId = (LPDWORD) MapViewOfFile(
        hMap,
        FILE_MAP_WRITE,
        0,
        0,
        0
        );
    if (!pJobId)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("MapViewOfFile() failed. (ec: %ld)"),
            dwRes);
        goto exit;
    }


    _tcscpy((LPTSTR) pJobId, OutputFile);
    lptstrEndStr = _tcschr((LPTSTR) pJobId, TEXT('\0'));
    lptstrEndStr = _tcsinc(lptstrEndStr);
    _tcscpy(lptstrEndStr, szTmpInputFile);

    //
    // set the arguments to the app.
    // these arguments are either passed on
    // the command line with the /pt switch or
    // use as variables for substitution in the
    // ddeexec value in the registry.
    //
    // the values are as follows:
    //      %1 = file name
    //      %2 = printer name
    //      %3 = driver name
    //      %4 = port name
    //
    // the first argument does not need to be
    // supplied in the args array because it is implied,
    // shellexecuteex gets it from the lpFile field.
    // arguments 3 & 4 are left blank because they
    // are win31 artifacts that are not necessary
    // any more.  each argument must be enclosed
    // in double quotes.
    //

    wsprintf( Args, _T("\"%s\""), FaxPrinterName );

    //
    // fill in the SHELLEXECUTEINFO structure
    //

    sei.cbSize       = sizeof(sei);
    sei.fMask        = SEE_MASK_FLAG_NO_UI | SEE_MASK_FLAG_DDEWAIT;
    sei.hwnd         = NULL;
    sei.lpVerb       = _T("printto");
    sei.lpFile       = FullPath;
    sei.lpParameters = Args;
    sei.lpDirectory  = TempPath;
    sei.nShow        = SW_SHOWMINNOACTIVE;
    sei.hInstApp     = NULL;
    sei.lpIDList     = NULL;
    sei.lpClass      = NULL;
    sei.hkeyClass    = NULL;
    sei.dwHotKey     = 0;
    sei.hIcon        = NULL;
    sei.hProcess     = NULL;

    //
    // create the named mutex for the print driver.
    // this is initially unclaimed, and is claimed by the first instance
    // of the print driver invoked after this. We do this last in order to
    // avoid a situation where we catch the incorrect instance of the print driver
    // printing
    //

    //
    // Create a security attribute with us as owners.
    //
#ifdef  UNICODE // No security on created objects for Win9X
    pSA = CreateSecurityAttributesWithThreadAsOwner (MUTEX_ALL_ACCESS, 0, 0);
    if (!pSA)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("CreateSecurityAttributesWithThreadAsOwner() failed. (ec: %ld)"),
                dwRes);
        goto exit;
    }
#endif

    hProcessMutex = CreateMutex(
#ifdef  UNICODE // No security on created objects for Win9X
                                 pSA,
#else
                                 NULL,
#endif
                                 FALSE,
                                 FAXXP_MEM_MUTEX_NAME
                               );
    if (!hProcessMutex)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateMutex() failed. (ec: %ld)"),
            dwRes);
#ifdef  UNICODE // No security on created objects for Win9X 
        DestroySecurityAttributes (pSA);
#endif
        goto exit;
    }
#ifdef  UNICODE // No security on created objects for Win9X
    DestroySecurityAttributes (pSA);
#endif

    //
    // launch the app
    //

    if (!ShellExecuteEx( &sei ))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ShellExecuteEx() failed. (ec: %ld)"),
            dwRes);
        goto exit;
    }

    //
    // wait for the app to finish printing
    //
    dwWaitRes = WaitForMultipleObjects(2,               // number of handles in array
                                       hEvent,          // object-handle array
                                       FALSE,           // wait option
                                       1000 * 60 * 5    // time-out interval
                                       );

    if (WAIT_FAILED == dwWaitRes)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("WaitForMultipleObjects() failed, (LastErorr: %ld)"),
            dwRes);
        goto exit;
    }

    if (WAIT_TIMEOUT == dwWaitRes)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("WaitForMultipleObjects failed on timeout"));
        dwRes = WAIT_TIMEOUT;
        goto exit;
    }

    if ((dwWaitRes - WAIT_OBJECT_0) == 1)
    {
        //
        // We got the AbortDocEvent
        //
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("AbortDocEvent was set"));
        dwRes = ERROR_REQUEST_ABORTED;
        goto exit;
    }

    Assert ((dwWaitRes - WAIT_OBJECT_0) == 0); // Assert EndDocEvent

    if (!CloseHandle( hProcessMutex ))
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("CloseHandle() failed. (ec: %ld)"),
            GetLastError());
    }
    hProcessMutex = NULL;
    bSuccess = TRUE;
    Assert (ERROR_SUCCESS == dwRes);

exit:
    //
    // clean up and leave...
    //
    if (!SetEnvironmentVariable( FAX_ENVVAR_PRINT_FILE, NULL ))
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("SetEnvironmentVariable() failed. (ec: %ld)"),
            GetLastError());
    }

    for (i = 0; i < 2; i++)
    {
        if (hEvent[i])
        {
            if (!CloseHandle( hEvent[i] ))
            {
                DebugPrintEx(
                    DEBUG_WRN,
                    TEXT("CloseHandle() failed. (ec: %ld)"),
                    GetLastError());
            }
        }
    }

    if (hProcessMutex)
    {
        if (!CloseHandle( hProcessMutex ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("CloseHandle() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (pJobId)
    {
        if (!UnmapViewOfFile( pJobId ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("UnmapViewOfFile() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (hMap)
    {
        if (!CloseHandle( hMap ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("CloseHandle() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (hMutexAttach)
    {
        if (!ReleaseMutex( hMutexAttach ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("ReleaseMutex() failed. (ec: %ld)"),
                GetLastError());
        }

        if (!CloseHandle( hMutexAttach ))
        {
            DebugPrintEx(
                DEBUG_WRN,
                TEXT("CloseHandle() failed. (ec: %ld)"),
                GetLastError());
        }
    }

    if (!bSuccess)
    {
        Assert (ERROR_SUCCESS != dwRes);
        SetLastError(dwRes);
    }

    while (dwFailedDelete < 5 &&
           !DeleteFile (FullPath))
    {
        //
        // Since we are waiting on an event that is set by the driver at EndDoc,
        // the file might still be in use.
        //
        DebugPrintEx(
                DEBUG_WRN,
                TEXT("DeleteFile() failed. (ec: %ld)"),
                GetLastError());
        Sleep ( 1000 * 2 );
        dwFailedDelete++;
    }

    MemFree(szEndDocEventName);
    MemFree(szAbortEventName);

    return bSuccess;
}   // PrintRandomDocument


//*********************************************************************************
//* Name:   MemoryMapTiffFile()
//* Author: Oded Sacher
//* Date:   Nov 8, 1999
//*********************************************************************************
//* DESCRIPTION:
//*     Maps Tiff file to memory.
//*     The caller must close all handles in case of success.
//*
//* PARAMETERS:
//*     [IN ]    LPCTSTR    lpctstrFileName
//*         pointer to file name to be mapped.
//*
//*     [OUT]    LPDWORD    lpdwFileSize
//*         Returns the file size.
//*
//*     [OUT]    LPBYTE*     lppbfPtr
//*         Returns pointer to the memory mapped file.
//*
//*     [OUT]    HANDLE*    phFile
//*         Returns the file handle.
//*
//*     [OUT ]   HANDLE*    phMap
//*         Returns the map handle.
//*
//*     [OUT]    LPDWORD    lpdwIfdOffset
//*         Returns the first IFD offset.
//*
//*
//*
//* RETURN VALUE:
//*     TRUE
//*         If no error occured.
//*     FALSE
//*         If an error occured.
//*********************************************************************************
BOOL MemoryMapTiffFile(
    LPCTSTR                 lpctstrFileName,
    LPDWORD                 lpdwFileSize,
    LPBYTE*                 lppbfPtr,
    HANDLE*                 phFile,
    HANDLE*                 phMap,
    LPDWORD                 lpdwIfdOffset
    )
{
    HANDLE hfile = INVALID_HANDLE_VALUE;
    DWORD ec = ERROR_SUCCESS;
    PTIFF_HEADER  pTiffHdr;
    DEBUG_FUNCTION_NAME(TEXT("MemoryMapTiffFile"));

    *phFile = SafeCreateFile(
        lpctstrFileName,
        GENERIC_READ,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);

    if (*phFile == INVALID_HANDLE_VALUE) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("CreateFile Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    *lpdwFileSize = GetFileSize(*phFile, NULL);
    if (*lpdwFileSize == 0xFFFFFFFF)
    {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("GetFileSize Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    if (*lpdwFileSize < sizeof(TIFF_HEADER))
    {
        ec = ERROR_BAD_FORMAT;
        DebugPrintEx( DEBUG_ERR,
                  TEXT("Invalid Tiff format"),
                  ec);
        goto error_exit;
    }

    *phMap = CreateFileMapping(
        *phFile,
        NULL,
        (PAGE_READONLY | SEC_COMMIT),
        0,
        0,
        NULL
        );
    if (*phMap == NULL) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("CreateFileMapping Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    *lppbfPtr = (LPBYTE)MapViewOfFile(
        *phMap,
        FILE_MAP_READ,
        0,
        0,
        0
        );
    if (*lppbfPtr == NULL) {
        ec = GetLastError();
        DebugPrintEx( DEBUG_ERR,
                  TEXT("MapViewOfFile Failed, error: %ld"),
                  ec);
        goto error_exit;
    }

    //
    // read in the TIFF header
    //
    pTiffHdr = (PTIFF_HEADER) *lppbfPtr;

    //
    // validate that the file is really a TIFF file
    //
    if ((pTiffHdr->Identifier != TIFF_LITTLEENDIAN) ||
        (pTiffHdr->Version != TIFF_VERSION)) {
            ec = ERROR_BAD_FORMAT;
            DebugPrintEx( DEBUG_ERR, TEXT("File %s, Invalid TIFF format"), lpctstrFileName);
            goto error_exit;
    }

    *lpdwIfdOffset = pTiffHdr->IFDOffset;
    if (*lpdwIfdOffset > *lpdwFileSize) {
        ec = ERROR_BAD_FORMAT;
        DebugPrintEx( DEBUG_ERR, TEXT("File %s, Invalid TIFF format"), lpctstrFileName);
        goto error_exit;
    }

    Assert (ec == ERROR_SUCCESS);
error_exit:
    if (ec != ERROR_SUCCESS)
    {

        if (*lppbfPtr != NULL)
        {
            if (!UnmapViewOfFile( *lppbfPtr))
            {
                DebugPrintEx( DEBUG_ERR,
                      TEXT("UnMapViewOfFile Failed, error: %d"),
                      GetLastError());
            }
        }

        if (*phMap != NULL)
        {
            CloseHandle( *phMap );
        }

        if (*phFile != INVALID_HANDLE_VALUE)
        {

            CloseHandle( *phFile );
        }

        *lppbfPtr = NULL;
        *phMap = NULL;
        *phFile = INVALID_HANDLE_VALUE;

        SetLastError(ec);
        Assert (FALSE);
        return FALSE;

    }
    return TRUE;
}


BOOL
validMsTagString(
    LPCSTR pStrBegin,
    LPCSTR pStrEnd,
    LPBYTE pbBegin,
    LPBYTE pbEnd)
/*++

Routine name : validMsTagString

Routine description:

  Check whether a string is valid MS Tag string within pbBegin and pbEnd boundaries.

Arguments:

  pStrBegin - pointer to start of string
  pStrEnd   - pointer to end of string (points one char pass the last string character (NULL))
  pbBegin   - pointer to start of Tiff file
  pbEnd     - pointer to end of Tiff file (points one byte pass the last Tiff byte )

Return Value:

    TRUE if pStrBegin pointes to a valid string within pbBegin and pbEnd boundaries.

--*/

{
    Assert (pStrBegin <= pStrEnd && pbBegin <= pbEnd);

    //
    //  Check that the string is within file boundaries
    //
    if (pStrBegin <= pbBegin ||
        pStrBegin >= pbEnd   ||
        pStrEnd   >= pbEnd )
    {
        return FALSE;
    }
    
    //
    // Check that the string is '\0' terminated
    //
    if (   *(pStrEnd - 1) != '\0' )
    {
        return FALSE;
    }

    return TRUE;
}

LPWSTR
GetMsTagString(
    LPBYTE          pbBegin,    
    DWORD           dwFileSize,
    PTIFF_TAG       pTiffTag
)
/*++

Routine name : GetMsTagString

Routine description:

  extract ANSI Ms Tag string from Tiff file

Arguments:

  pbBegin         - [in] pointer to the beggining of TIFF map file
  dwFileSize      - [in] the size of the TIFF map file
  pTiffTag        - [in] points to the Tiff Tag

Return Value:

    Pointer to unicode string.

    the function will return NULL in case of invalid string.

--*/
{
    LPCSTR  pStrBegin = NULL;
    LPCSTR  pStrEnd = NULL;

    Assert (pTiffTag->DataType == TIFF_ASCII);
    if (pTiffTag->DataType != TIFF_ASCII)
    {
        SetLastError (ERROR_BAD_FORMAT);
        return NULL;
    }

    if (pTiffTag->DataCount <= 4)
    {
        //
        //  The string will be held in the DataOffset section itself
        //
        pStrBegin = (LPCSTR)&pTiffTag->DataOffset;
    }
    else
    {
        //
        //  The string located at pTiffTag->DataOffset from the beginning of file
        //
        pStrBegin = (LPCSTR)(pbBegin + pTiffTag->DataOffset);
    }

    //
    //  pStrEnd points 1 byte past the end of the string
    //
    pStrEnd = pStrBegin + pTiffTag->DataCount;

    if (!validMsTagString(pStrBegin,pStrEnd,pbBegin,pbBegin + dwFileSize))
    {
        //
        //  We got invalid string or offset - probably a corrupted TIFF
        //
        SetLastError (ERROR_BAD_FORMAT);
        return NULL;
    }

    //
    //  The string was validated successfully
    //

    return (AnsiStringToUnicodeString( pStrBegin ));
}

BOOL
GetMsTagDwordLong(
    LPBYTE          pbBegin,    
    DWORD           dwFileSize,
    PTIFF_TAG       pTiffTag,
    DWORDLONG*      pdwlOut
    )
/*++

Routine name : GetMsTagDwordLong

Routine description:

  extract DWORDLONG from Tiff file

Arguments:

  pbBegin         - [in] pointer to the beggining of TIFF map file
  dwFileSize      - [in] the size of the TIFF map file
  pTiffTag        - [in] points to the Tiff Tag
  pdwlOut         - [out] the extracted DWORDLONG
Return Value:

    BOOL indicating success or failure.
    The function set last error in case of failure.

--*/
{
    if ( pTiffTag->DataOffset > dwFileSize - sizeof(DWORDLONG))
    {
        SetLastError (ERROR_BAD_FORMAT);
        return FALSE;
    }

    *pdwlOut = *(DWORDLONG*)(pbBegin + pTiffTag->DataOffset);
    return TRUE;
}   // GetMsTagDwordLong

BOOL
GetMsTagFileTime(
    LPBYTE          pbBegin,    
    DWORD           dwFileSize,
    PTIFF_TAG       pTiffTag,
    FILETIME*       pftOut
    )
/*++

Routine name : GetMsTagFileTime

Routine description:

  extract FILETIME from Tiff file

Arguments:

  pbBegin         - [in] pointer to the beggining of TIFF map file
  dwFileSize      - [in] the size of the TIFF map file
  pTiffTag        - [in] points to the Tiff Tag
  pftOut          - [out] the extracted FILETIME

Return Value:

    BOOL indicating success or failure.
    The function set last error in case of failure.

--*/
{
    if ( pTiffTag->DataOffset > dwFileSize - sizeof(FILETIME))
    {
        SetLastError (ERROR_BAD_FORMAT);
        return FALSE;
    }

    *pftOut = *(FILETIME*)(pbBegin + pTiffTag->DataOffset);
    return TRUE;
}   // GetMsTagFileTime

void
FreeMsTagInfo(
    PMS_TAG_INFO pMsTags
)
/*++

Routine name : FreeMsTagInfo

Routine description:

  Free MS_TAG_INFO fields

Arguments:

  pMsTags - [in] pointer to the MS_TAG_INFO structure

Return Value:

    none

--*/
{
    if(!pMsTags)
    {
        Assert (FALSE);
        return;
    }

    MemFree(pMsTags->RecipName);
    MemFree(pMsTags->RecipNumber);
    MemFree(pMsTags->SenderName);
    MemFree(pMsTags->Routing);
    MemFree(pMsTags->CallerId);
    MemFree(pMsTags->Csid);
    MemFree(pMsTags->Tsid);
    MemFree(pMsTags->Port);
    MemFree(pMsTags->RecipCompany);
    MemFree(pMsTags->RecipStreet);
    MemFree(pMsTags->RecipCity);
    MemFree(pMsTags->RecipState);
    MemFree(pMsTags->RecipZip);
    MemFree(pMsTags->RecipCountry);
    MemFree(pMsTags->RecipTitle);
    MemFree(pMsTags->RecipDepartment);
    MemFree(pMsTags->RecipOfficeLocation);
    MemFree(pMsTags->RecipHomePhone);
    MemFree(pMsTags->RecipOfficePhone);
    MemFree(pMsTags->RecipEMail);
    MemFree(pMsTags->SenderNumber);
    MemFree(pMsTags->SenderCompany);
    MemFree(pMsTags->SenderStreet);
    MemFree(pMsTags->SenderCity);
    MemFree(pMsTags->SenderState);
    MemFree(pMsTags->SenderZip);
    MemFree(pMsTags->SenderCountry);
    MemFree(pMsTags->SenderTitle);
    MemFree(pMsTags->SenderDepartment);
    MemFree(pMsTags->SenderOfficeLocation);
    MemFree(pMsTags->SenderHomePhone);
    MemFree(pMsTags->SenderOfficePhone);
    MemFree(pMsTags->SenderEMail);
    MemFree(pMsTags->SenderBilling);
    MemFree(pMsTags->Document);
    MemFree(pMsTags->Subject);
    MemFree(pMsTags->SenderUserName);
    MemFree(pMsTags->SenderTsid);
    MemFree(pMsTags->lptstrExtendedStatus);

    ZeroMemory(pMsTags, sizeof(MS_TAG_INFO));
}

#ifdef UNICODE

DWORD
GetW2kMsTiffTags(
    LPCWSTR      cszFileName,
    PMS_TAG_INFO pMsTags,
    BOOL         bSentArchive
)
/*++

Routine name : GetW2kMsTiffTags

Routine description:

  Fills in MS_TAG_INFO structure with W2K tags values.

  If the file was not created by MS fax ERROR_BAD_FORMAT error is returned.

  If the file has new (BOS/XP) tif tags (so, it has not W2K tags) ERROR_XP_TIF_FILE_FORMAT error is returned.
  In this case MS_TAG_INFO structure is not filled in.

  The caler should free the members of MS_TAG_INFO with MemFree()

Arguments:

    LPCWSTR      cszFileName,    - [in]  full tiff file name
    PMS_TAG_INFO pMsTags,        - [out] pointer to MS_TAG_INFO structure
    BOOL         bSentArchive,   - [in]  TRUE if the file from the sent archive, FALSE if it from receive one

Return Value:

    Standard Win32 error code

--*/
{
    DWORD      dwRes = ERROR_SUCCESS;
    DWORD      dwSize = 0;
    HANDLE     hFile = INVALID_HANDLE_VALUE;
    HANDLE     hMap = NULL;
    LPBYTE     fPtr = NULL;
    DWORD      dwIfdOffset = 0;
    WORD       dwNumDirEntries = 0;
    PTIFF_TAG  pTiffTags = NULL;
    DWORD      dw = 0;
    HANDLE  hTiff;
    TIFF_INFO TiffInfo;
    DEBUG_FUNCTION_NAME(TEXT("GetW2kMsTiffTags()"));

    ZeroMemory(pMsTags, sizeof(MS_TAG_INFO));

    //
    // Validate tiff format, and get number of pages
    //
    hTiff = TiffOpen( cszFileName, &TiffInfo, FALSE, FILLORDER_MSB2LSB );
    if (!hTiff)
    {
        dwRes = GetLastError();
        Assert (ERROR_SUCCESS != dwRes);
        DebugPrintEx( DEBUG_ERR, TEXT("TiffOpen Failed, error: %ld"), dwRes);
        goto exit;
    }
    pMsTags->Pages = TiffInfo.PageCount;
    TiffClose( hTiff );

    if (!MemoryMapTiffFile (cszFileName, &dwSize, &fPtr, &hFile, &hMap, &dwIfdOffset))
    {
        dwRes = GetLastError();
        DebugPrintEx( DEBUG_ERR, TEXT("MemoryMapTiffFile Failed, error: %ld"), dwRes);
        goto exit;
    }

    //
    // get the count of tags in this IFD
    //
    dwNumDirEntries = *(LPWORD)(fPtr + dwIfdOffset);
    pTiffTags = (PTIFF_TAG)(fPtr + dwIfdOffset + sizeof(WORD));

    //
    // Check if the file was generated by W2K MS fax
    //
    for (dw = 0; dw < dwNumDirEntries; ++dw)
    {
        switch( pTiffTags[dw].TagId )
        {
            case TIFFTAG_SOFTWARE:
                
                if( !validMsTagString(  fPtr + pTiffTags[dw].DataOffset,                            // start of string
                                        fPtr + pTiffTags[dw].DataOffset +  pTiffTags[dw].DataCount, // end of string
                                        fPtr,                                                       // start of file
                                        fPtr + dwSize                                               // end of file
                                        )                      ||
                    0 != strcmp((LPCSTR)(fPtr + pTiffTags[dw].DataOffset), W2K_FAX_SOFTWARE_TIF_TAG))
                {
                    //
                    // The tiff file was not created by MS fax
                    //
                    dwRes = ERROR_BAD_FORMAT;
                    goto exit;
                }
                break;

            case TIFFTAG_TYPE:
                //
                // The tiff file was created by BOS/XP fax
                // So, it has no W2K tags
                //
               if((JT_SEND    == pTiffTags[dw].DataOffset &&  bSentArchive) ||
                  (JT_RECEIVE == pTiffTags[dw].DataOffset && !bSentArchive))
               {
                    dwRes = ERROR_XP_TIF_FILE_FORMAT;
               }
               else
               {
                   //
                   // The file type do not correspond to the archive type
                   //
                   dwRes = ERROR_XP_TIF_WITH_WRONG_ARCHIVE_TYPE;
               }

               goto exit;

            default:
                break;
        }
    }

    //
    // walk the tags and pick out W2K tiff tags
    //
    for (dw = 0; dw < dwNumDirEntries; ++dw)
    {
        switch( pTiffTags[dw].TagId )
        {
            case TIFFTAG_W2K_RECIP_NAME:
                pMsTags->RecipName = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->RecipName)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_RECIP_NUMBER:
                pMsTags->RecipNumber = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->RecipNumber)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_SENDER_NAME:
                pMsTags->SenderName = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->SenderName)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_ROUTING:
                pMsTags->Routing = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->Routing)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_CALLERID:
                pMsTags->CallerId = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->CallerId)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_TSID:
                pMsTags->Tsid = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->Tsid)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_CSID:
                pMsTags->Csid = GetMsTagString( fPtr, dwSize, &pTiffTags[dw]);
                if(!pMsTags->Csid)
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;

            case TIFFTAG_W2K_FAX_TIME:
                if (!GetMsTagDwordLong(fPtr, dwSize, &pTiffTags[dw], &pMsTags->StartTime))
                {
                    dwRes = GetLastError();
                    goto exit;
                }
                break;
        }
    }

    //
    // Set the archive type
    //
    pMsTags->Type = bSentArchive ? JT_SEND : JT_RECEIVE;

exit:

    if(ERROR_SUCCESS != dwRes)
    {
        FreeMsTagInfo(pMsTags);
    }

    if (fPtr)
    {
        UnmapViewOfFile( fPtr);
    }

    if (hMap)
    {
        CloseHandle( hMap );
    }

    if (hFile != INVALID_HANDLE_VALUE)
    {
        CloseHandle( hFile );
    }

    return dwRes;

} // GetW2kMsTiffTags

#endif // UNICODE
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\util.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    util.c

Abstract:

    This file contains utilitarian functions for
    the FAX TIFF library.

Environment:

    WIN32 User Mode

Author:

    Wesley Witt (wesw) 17-Feb-1996

--*/

#include "tifflibp.h"
#pragma hdrstop

static
BOOL
PrintTiffPage(
    HANDLE    hTiff,
    DWORD     dwPageNumber,
    HDC       hdcPrinterDC,
    BOOL      bPhotometricInterpretation
);

static
LPBYTE
ReadTiffData(
    HANDLE  hTiff,
    DWORD   dwPageNumber,
    LPDWORD lpdwPageWidth,
    LPDWORD lpdwPageHeight,
    LPDWORD lpdwPageYResolution,
    LPDWORD lpdwPageXResolution
    );


INT
FindWhiteRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    )

/*++

Routine Description:

    Find the next span of white pixels on the specified line

Arguments:

    pbuf        - Points to uncompressed pixel data for the current line
    startBit    - Starting bit index
    stopBit     - Last bit index

Return Value:

    Length of the next run of white pixels

--*/

{
    static const BYTE WhiteRuns[256] = {

        8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    INT run, bits, n;

    pbuf += (startBit >> 3);
    if ((bits = stopBit-startBit) <= 0)
        return 0;

    //
    // Take care of the case where starting bit index is not a multiple of 8
    //

    if (n = (startBit & 7)) {

        run = WhiteRuns[(*pbuf << n) & 0xff];
        if (run > BYTEBITS-n)
            run = BYTEBITS-n;
        if (n+run < BYTEBITS)
            return run;
        bits -= run;
        pbuf++;

    } else
        run = 0;

    //
    // Look for consecutive DWORD value = 0
    //

    if (bits >= DWORDBITS * 2) {

        PDWORD  pdw;

        //
        // Align to a DWORD boundary first
        //

        while ((ULONG_PTR) pbuf & 3) {

            if (*pbuf != 0)
                return run + WhiteRuns[*pbuf];

            run += BYTEBITS;
            bits -= BYTEBITS;
            pbuf++;
        }

        pdw = (PDWORD) pbuf;

        while (bits >= DWORDBITS && *pdw == 0) {

            pdw++;
            run += DWORDBITS;
            bits -= DWORDBITS;
        }

        pbuf = (PBYTE) pdw;
    }

    //
    // Look for consecutive BYTE value = 0
    //

    while (bits >= BYTEBITS) {

        if (*pbuf != 0)
            return run + WhiteRuns[*pbuf];

        pbuf++;
        run += BYTEBITS;
        bits -= BYTEBITS;
    }

    //
    // Count the number of white pixels in the last byte
    //

    if (bits > 0)
        run += WhiteRuns[*pbuf];

    return run;
}


INT
FindBlackRun(
    PBYTE       pbuf,
    INT         startBit,
    INT         stopBit
    )

/*++

Routine Description:

    Find the next span of black pixels on the specified line

Arguments:

    pbuf        - Points to uncompressed pixel data for the current line
    startBit    - Starting bit index
    stopBit     - Last bit index

Return Value:

    Length of the next run of black pixels

--*/

{
    static const BYTE BlackRuns[256] = {

        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8
    };

    INT run, bits, n;

    pbuf += (startBit >> 3);
    if ((bits = stopBit-startBit) <= 0)
        return 0;

    //
    // Take care of the case where starting bit index is not a multiple of 8
    //

    if (n = (startBit & 7)) {

        run = BlackRuns[(*pbuf << n) & 0xff];
        if (run > BYTEBITS-n)
            run = BYTEBITS-n;
        if (n+run < BYTEBITS)
            return run;
        bits -= run;
        pbuf++;

    } else
        run = 0;

    //
    // Look for consecutive DWORD value = 0xffffffff
    //

    if (bits >= DWORDBITS * 2) {

        PDWORD  pdw;

        //
        // Align to a DWORD boundary first
        //

        while ((ULONG_PTR) pbuf & 3) {

            if (*pbuf != 0xff)
                return run + BlackRuns[*pbuf];

            run += BYTEBITS;
            bits -= BYTEBITS;
            pbuf++;
        }

        pdw = (PDWORD) pbuf;

        while (bits >= DWORDBITS && *pdw == 0xffffffff) {

            pdw++;
            run += DWORDBITS;
            bits -= DWORDBITS;
        }

        pbuf = (PBYTE) pdw;
    }

    //
    // Look for consecutive BYTE value = 0xff
    //

    while (bits >= BYTEBITS) {

        if (*pbuf != 0xff)
            return run + BlackRuns[*pbuf];

        pbuf++;
        run += BYTEBITS;
        bits -= BYTEBITS;
    }

    //
    // Count the number of white pixels in the last byte
    //

    if (bits > 0)
        run += BlackRuns[*pbuf];

    return run;
}

#define PIXELS_TO_BYTES(x)  (((x) + 7)/8)   // Calculates the number of bytes required to store x pixels (bits)

static
LPBYTE
ReadTiffData(
    HANDLE  hTiff,
    DWORD   dwPageNumber,
    LPDWORD lpdwPageWidth,
    LPDWORD lpdwPageHeight,
    LPDWORD lpdwPageYResolution,
    LPDWORD lpdwPageXResolution
    )
/*++

Routine name : ReadTiffData

Routine description:

    Reads a TIFF image page into a bytes buffer

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    hTiff                   [in]     - Handle to TIFF image
    dwPageNumber            [in]     - 1-Based page number
    lpdwPageWidth           [out]    - Width (in pixels) of page (optional)
    lpdwPageHeight          [out]    - Height (in pixels) of page (optional)
    lpdwPageYResolution     [out]    - Y resolution (in DPI) of page (optional)
    lpdwPageXResolution     [out]    - X resolution (in DPI) of page (optional)

Return Value:

    Pointer to allocated pixels buffer of TIFF page.
    Call should MemFree the returned buffer.
    NULL on failure (sets thread's last error).

--*/
{
    DWORD  dwLines = 0;
    DWORD  dwStripDataSize;
    DWORD  dwTiffPageWidth;
    DWORD  dwTiffPageHeight;
    DWORD  dwTiffPageYRes;
    DWORD  dwTiffPageXRes;
    DWORD  dwPageWidthInBytes;
    DWORD  dwAllocatedMemSize;
    LPBYTE lpbReturnVal = NULL;
    LPBYTE lpbSwappedLine = NULL;
    LPBYTE lpbSwapTop;
    LPBYTE lpbSwapBottom;

    DEBUG_FUNCTION_NAME(TEXT("ReadTiffData"));

    Assert (hTiff && dwPageNumber);

    if (!TiffSeekToPage( hTiff, dwPageNumber, FILLORDER_LSB2MSB ))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffSeekToPage failed with %ld"),
            GetLastError ());
        return NULL;
    }

    if (!TiffGetCurrentPageData(
        hTiff,
        &dwLines,
        &dwStripDataSize,
        &dwTiffPageWidth,
        &dwTiffPageHeight
        ))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffGetCurrentPageData failed with %ld"),
            GetLastError ());
        return NULL;
    }

    if (!TiffGetCurrentPageResolution (hTiff, &dwTiffPageYRes, &dwTiffPageXRes))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffGetCurrentPageResolution failed with %ld"),
            GetLastError ());
        return NULL;
    }
    //
    // Allocate return buffer
    //
    dwPageWidthInBytes = PIXELS_TO_BYTES(dwTiffPageWidth);
    dwAllocatedMemSize = dwTiffPageHeight * dwPageWidthInBytes;
    lpbReturnVal = (LPBYTE) MemAlloc (dwAllocatedMemSize);
    if (!lpbReturnVal)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Failed to allocate %ld bytes"),
            dwTiffPageHeight * dwPageWidthInBytes);
        return NULL;
    }
    dwLines = dwTiffPageHeight;
    if (!TiffUncompressMmrPage( hTiff, 
                                (LPDWORD) lpbReturnVal, 
                                dwAllocatedMemSize,
                                &dwLines ))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffUncompressMmrPage failed with %ld"),
            GetLastError ());
        MemFree (lpbReturnVal);
        return NULL;
    }
    //
    // Because there's a known issue on some platforms (read: Win9x) to print top-down DIBs
    // (specifically, wich HP printer drivers), we now convert our DIB to bottom-up.
    //
    lpbSwappedLine = (LPBYTE) MemAlloc (dwPageWidthInBytes);
    if (!lpbSwappedLine)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Failed to allocate %ld bytes"),
            dwPageWidthInBytes);
        MemFree (lpbReturnVal);
        return NULL;
    }
    lpbSwapTop = lpbReturnVal;
    lpbSwapBottom = &(lpbReturnVal[(dwTiffPageHeight - 1) * dwPageWidthInBytes]);
    for (dwLines = 0; dwLines < (dwTiffPageHeight / 2); dwLines++)
    {
        //
        // Swap every n'th line with the (dwTiffPageHeight-n-1)'th line
        //
        memcpy (lpbSwappedLine, lpbSwapTop, dwPageWidthInBytes);
        memcpy (lpbSwapTop, lpbSwapBottom, dwPageWidthInBytes);
        memcpy (lpbSwapBottom, lpbSwappedLine, dwPageWidthInBytes);
        lpbSwapTop += dwPageWidthInBytes;
        lpbSwapBottom -= dwPageWidthInBytes;
    }
    MemFree (lpbSwappedLine);

    if (lpdwPageWidth)
    {
        *lpdwPageWidth = dwTiffPageWidth;
    }
    if (lpdwPageHeight)
    {
        *lpdwPageHeight = dwTiffPageHeight;
    }
    if (lpdwPageYResolution)
    {
        *lpdwPageYResolution = dwTiffPageYRes;
    }
    if (lpdwPageXResolution)
    {
        *lpdwPageXResolution = dwTiffPageXRes;
    }
    return lpbReturnVal;
}   // ReadTiffData

BOOL
TiffPrintDC (
    LPCTSTR lpctstrTiffFileName,
    HDC     hdcPrinterDC
    )
/*++

Routine name : TiffPrintDC

Routine description:

    Prints a TIFF file to a printer's DC

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    lpctstrTiffFileName    [in]  - Full path to the TIFF file
    hdcPrinterDC           [in]  - The printer's DC. The called should create / destry it.

Return Value:

    TRUE if successful, FALSE otherwise (sets thread's last error).

--*/
{
    BOOL        bResult = FALSE;
    HANDLE      hTiff;
    TIFF_INFO   TiffInfo;
    INT         iPrintJobId = 0;
    DWORD       dwTiffPage;
    DOCINFO     DocInfo;

    DEBUG_FUNCTION_NAME(TEXT("TiffPrintDC"));

    Assert (hdcPrinterDC && lpctstrTiffFileName);

    //
    // Prepare document information
    //
    DocInfo.cbSize = sizeof(DOCINFO);
    DocInfo.lpszDocName = lpctstrTiffFileName;
    DocInfo.lpszOutput = NULL;
    DocInfo.lpszDatatype = NULL;
    DocInfo.fwType = 0;

    hTiff = TiffOpen(
        (LPTSTR) lpctstrTiffFileName,
        &TiffInfo,
        TRUE,
        FILLORDER_LSB2MSB
        );

    if ( !hTiff ) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("TiffOpen failed with %ld"),
            GetLastError ());
        return FALSE;
    }

    if (!(GetDeviceCaps(hdcPrinterDC, RASTERCAPS) & RC_STRETCHDIB)) 
    { 
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Printer does not support StretchDIBits"));
        SetLastError (ERROR_INVALID_PRINTER_COMMAND); 
        goto exit;
    } 
    //
    // Create print document
    //
    iPrintJobId = StartDoc( hdcPrinterDC, &DocInfo );

    if (iPrintJobId <= 0) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("StartDoc failed with %ld"),
            GetLastError ());
        goto exit;
    }

    for (dwTiffPage = 1; dwTiffPage <= TiffInfo.PageCount; dwTiffPage++)
    {
        //
        // Iterate the TIFF pages
        //
        if (!PrintTiffPage (hTiff, dwTiffPage, hdcPrinterDC, TiffInfo.PhotometricInterpretation))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("PrintTiffPage failed with %ld"),
                GetLastError ());
            goto exit;
        }
    }

    bResult = TRUE;

exit:
    if (hTiff) 
    {
        TiffClose( hTiff );
    }

    if (iPrintJobId > 0) 
    {
        if (EndDoc(hdcPrinterDC) <= 0)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("EndDoc failed with %ld"),
                GetLastError ());
        }
    }
    return bResult;
}   // TiffPrintDC

BOOL
TiffPrint (
    LPCTSTR lpctstrTiffFileName,
    LPTSTR  lptstrPrinterName
    )
/*++

Routine name : TiffPrint

Routine description:

    Prints a TIFF file to a printer

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    lpctstrTiffFileName    [in]  - Full path to the TIFF file
    lptstrPrinterName      [in]  - Printer name

Return Value:

    TRUE if successful, FALSE otherwise (sets thread's last error).

--*/
{
    BOOL        bResult = FALSE;
    LPCTSTR     lpctstrDevice;
    HDC         hdcPrinterDC = NULL;

    DEBUG_FUNCTION_NAME(TEXT("TiffPrint"));

    Assert (lptstrPrinterName && lpctstrTiffFileName);
    //
    // Get 1st token in comman delimited printer name string
    //
    lpctstrDevice = _tcstok( lptstrPrinterName, TEXT(","));
    //
    // Create printer DC
    //
    hdcPrinterDC = CreateDC( TEXT("WINSPOOL"), lpctstrDevice, NULL, NULL );
    if ( !hdcPrinterDC ) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateDC failed with %ld"),
            GetLastError ());
        return FALSE;
    }
    bResult = TiffPrintDC (lpctstrTiffFileName, hdcPrinterDC);
    DeleteDC( hdcPrinterDC );
    return bResult;
}   // TiffPrint



static
BOOL
PrintTiffPage(
    HANDLE    hTiff,
    DWORD     dwPageNumber,
    HDC       hdcPrinterDC,
    BOOL      bPhotometricInterpretation
)
/*++

Routine name : PrintTiffPage

Routine description:

    Prints a single TIFF page to one or more printer's page(s)

Author:

    Eran Yariv (EranY), Sep, 2000

Arguments:

    hTiff                       [in]   - Handle to open TIFF file
    dwPageNumber                [in]   - 1-based TIFF page number
    hdcPrinterDC                [in]   - The printer device context
    bPhotometricInterpretation  [in]   - If FALSE, white is zero. Else, white is one.

Return Value:

    TRUE if successful, FALSE otherwise (sets thread's last error).

--*/
{
    SIZE            szPrinterPage;              // Size (in pixels) of physical printer page
    SIZE            szTiffPage;                 // Size (in pixels) of the TIFF page
    SIZE            szScaledTiffPage;           // Size (in pixels) of the scaled TIFF page

    LPBYTE          lpbPageData;                // Pixels data of TIFF page
    DWORD           dwPageYRes;                 // Y resolution of the page (DPI)
    DWORD           dwPageXRes;                 // X resolution of the page (DPI)
    DWORD           dwTiffPageWidthInBytes;     // Non-scaled TIFF page width (line) in bytes

    DWORD           dwPrinterXRes;              // X resolution of the printer page (DPI)
    BOOL            bDoubleVert;                // If Y resolution of TIFF page <= 100 DPI, we need to double the height
    DWORD           dwRequiredPrinterWidth;     // The required printer page width (pixels) to contain the entire TIFF width 
    double          dScaleFactor;               // TIFF image scale factor (always 0 < factor <= 1.0)

    DWORD           dwSubPages;                 // Number of printer pages required to print the TIFF page
    DWORD           dwCurSubPage;               // Current printer page (in this TIFF page)
    DWORD           dwTiffLinesPerPage;         // Number of non-scaled TIFF lines to print in one printer page

    DWORD           dwCurrentTiffY = 0;         // The 0-based Y position of the line to print from the non-scaled TIFF page
    DWORD           dwCurrentScaledTiffY = 0;   // The 0-based Y position of the line to print from the scaled TIFF page

    LPBYTE          lpbDataToPrint;             // Points to start line to print from
    BOOL            bRes = FALSE;               // Function return value

    double          dTiffWidthInInches;         // Width (in inches) of the non-scaled TIFF image

#define ORIG_BIYPELSPERMETER            7874    // Pixels per meter at 200dpi
#define FIT_TO_SINGLE_PAGE_MARGIN       (double)(1.15)   // See remarks in usage.

    struct 
    {
        BITMAPINFOHEADER bmiHeader;
        RGBQUAD bmiColors[2];
    } SrcBitmapInfo = 
        {
            {
                sizeof(BITMAPINFOHEADER),                        //  biSize
                0,                                               //  biWidth
                0,                                               //  biHeight
                1,                                               //  biPlanes
                1,                                               //  biBitCount
                BI_RGB,                                          //  biCompression
                0,                                               //  biSizeImage
                7874,                                            //  biXPelsPerMeter     - 200dpi
                ORIG_BIYPELSPERMETER,                            //  biYPelsPerMeter
                0,                                               //  biClrUsed
                0,                                               //  biClrImportant
            },
            {
                {
                  bPhotometricInterpretation ? 0 : 255,          //  rgbBlue
                  bPhotometricInterpretation ? 0 : 255,          //  rgbGreen
                  bPhotometricInterpretation ? 0 : 255,          //  rgbRed
                  0                                              //  rgbReserved
                },
                {
                  bPhotometricInterpretation ? 255 : 0,          //  rgbBlue
                  bPhotometricInterpretation ? 255 : 0,          //  rgbGreen
                  bPhotometricInterpretation ? 255 : 0,          //  rgbRed
                  0                                              //  rgbReserved
                }
            }
        };

    DEBUG_FUNCTION_NAME(TEXT("PrintTiffPage"));

    Assert (dwPageNumber && hdcPrinterDC && hTiff);
    //
    // Get printer's page dimensions
    //
    szPrinterPage.cx = GetDeviceCaps( hdcPrinterDC, HORZRES );
    szPrinterPage.cy = GetDeviceCaps( hdcPrinterDC, VERTRES );
    dwPrinterXRes    = GetDeviceCaps( hdcPrinterDC, LOGPIXELSX);
    if (0 == dwPrinterXRes)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    //
    // Allocate and read the TIFF page into a buffer.
    //    
    lpbPageData = ReadTiffData(hTiff, 
                               dwPageNumber,
                               &szTiffPage.cx,
                               &szTiffPage.cy,
                               &dwPageYRes,
                               &dwPageXRes);
    if (!lpbPageData) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ReadTiffData failed with %ld"),
            GetLastError ());
        goto exit;
    }
    //
    // Calculate scaling ratio.
    //
    // If the TIFF's Y resultion is 100 DPI (or les), this is a low resultion TIFF and we must double every line
    // (i.e. scale by the factor of 2).
    //
    if (dwPageYRes <= 100) 
    {
        SrcBitmapInfo.bmiHeader.biYPelsPerMeter = ORIG_BIYPELSPERMETER / 2;
        bDoubleVert = TRUE;
    }
    else
    {
        SrcBitmapInfo.bmiHeader.biYPelsPerMeter = ORIG_BIYPELSPERMETER;
        bDoubleVert = FALSE;
    }
    if (0 == dwPageXRes)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    dTiffWidthInInches = (double)(szTiffPage.cx) / (double)dwPageXRes;
    if (0.0 == dTiffWidthInInches)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    //
    // Now that we have the TIFF width in inches, let's calculate the number of 
    // pixels required on the printer to get the same width.
    //
    dwRequiredPrinterWidth = (DWORD)(dTiffWidthInInches * (double)dwPrinterXRes);
    if (dwRequiredPrinterWidth > (DWORD)szPrinterPage.cx)
    {
        //
        // The printer does not support the required page width.
        // We will print as wide as we can (shrinked-down image).
        //
        dwRequiredPrinterWidth = szPrinterPage.cx;
    }
    //
    // We scale  to make the image fit the page.
    // If the TIFF image (in inches) is wider than the printable page width (in inches) than we scale down.
    // Otherwise, we scale up to print the TIFF in the right width. 
    //
    // Once we find the scale factor, we must also scale the height to keep the image's aspect ratio intact.
    //
    dScaleFactor = (double)dwRequiredPrinterWidth / (double)szTiffPage.cx;
    if (0.0 == dScaleFactor)
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PRINTER_COMMAND);
        return FALSE;
    }
    //
    // Now we can have the scaled TIFF size
    //
    szScaledTiffPage.cx = (DWORD)(dScaleFactor * ((double)(szTiffPage.cx)));
    szScaledTiffPage.cy = (DWORD)(dScaleFactor * ((double)(szTiffPage.cy)));
    if (bDoubleVert)
    {
        szScaledTiffPage.cy *= 2;
    }
    //
    // Let's find how many printer pages are required to print the current (scaled) tiff page (by height only)
    //
    if (szScaledTiffPage.cy <= szPrinterPage.cy)
    {
        //
        // Page fits nicely into one printer page
        //
        dwSubPages = 1;
        //
        // All the TIFF lines fit into one page
        //
        dwTiffLinesPerPage = szTiffPage.cy;
    }
    else
    {
        //
        // Tiff page (scaled) is longer than printer page.
        // We will have to print the TIFF page in parts
        //
        dwSubPages = szScaledTiffPage.cy / szPrinterPage.cy;
        if (dwSubPages * (DWORD)szPrinterPage.cy < (DWORD)szScaledTiffPage.cy)
        {
            //
            // Fix off-by-one
            //
            dwSubPages++;
        }
        if ((2 == dwSubPages) &&
           ((double)(szScaledTiffPage.cy) / (double)(szPrinterPage.cy) < FIT_TO_SINGLE_PAGE_MARGIN))
        {
            //
            // This is a special case.
            // We're dealing with a single TIFF page that almost fits into a single printer page.
            // The 'almost' part is less that 15% so we take the liberty of scaling down the
            // TIFF page to perfectly fit into a single printer page.
            //
            dwSubPages = 1; // Fit to single printer page
            dScaleFactor = (double)(szPrinterPage.cy) / (double)(szScaledTiffPage.cy);
            szScaledTiffPage.cx = (DWORD)(dScaleFactor * ((double)(szScaledTiffPage.cx)));
            szScaledTiffPage.cy = szPrinterPage.cy;
            //
            // All the TIFF lines fit into one page
            //
            dwTiffLinesPerPage = szTiffPage.cy;
        }
        else
        {
            //
            // Find how many non-scaled TIFF lines fit into one printer page
            //
            dwTiffLinesPerPage = (DWORD)((double)(szPrinterPage.cy) / dScaleFactor);
            if (bDoubleVert)
            {
                dwTiffLinesPerPage /= 2;
            }
        }
    }
    //
    // Since the DIB is bottom-up, we start our pointer at the bottom-most page.
    //
    dwTiffPageWidthInBytes = PIXELS_TO_BYTES(szTiffPage.cx);
    Assert ((DWORD)(szTiffPage.cy) >= dwTiffLinesPerPage);
    lpbDataToPrint = &(lpbPageData[(szTiffPage.cy - dwTiffLinesPerPage) * dwTiffPageWidthInBytes]);
    for (dwCurSubPage = 1; dwCurSubPage <= dwSubPages; dwCurSubPage++)
    {
        //
        // Iterate printer pages (same TIFF page)
        //
        SIZE szDestination; // Size (in pixels) of the image on the current printer page
        SIZE szSource;      // Size (in pixels) of the sub-image from the non-scaled TIFF page

        //
        // Calculate size of destination (printer) image
        //
        szDestination.cx = szScaledTiffPage.cx;
        if (dwCurSubPage < dwSubPages)
        {
            //
            // Still not at the last print page - printing full page length
            //
            szDestination.cy = szPrinterPage.cy;
        }
        else
        {
            //
            // At last print page - print only the left over lines
            //
            szDestination.cy = szScaledTiffPage.cy - dwCurrentScaledTiffY;
        }        
        //
        // Calculate size of source (non-scaled TIFF page) image
        //
        szSource.cx = szTiffPage.cx;    // Always print full line width
        szSource.cy = dwTiffLinesPerPage;
        if (dwCurrentTiffY + dwTiffLinesPerPage > (DWORD)szTiffPage.cy)
        {
            //
            // Reduce lines count to left over lines only
            //
            szSource.cy = szTiffPage.cy - dwCurrentTiffY;
        }
        //
        // Prepare DIB header
        //
        SrcBitmapInfo.bmiHeader.biWidth          = (LONG) szSource.cx;
        //
        // Build a bottom-up DIB
        //
        SrcBitmapInfo.bmiHeader.biHeight         = (LONG) szSource.cy;

        if (0 >= StartPage( hdcPrinterDC ))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("StartPage failed with %ld"),
                GetLastError ());
            goto exit;
        }
        //
        // do the bitmap streching now
        //
        if (GDI_ERROR == StretchDIBits(
                hdcPrinterDC,                   // Printer DC
                0,                              // Destination start x
                0,                              // Destination start y
                szDestination.cx,               // Destination (printer page) width
                szDestination.cy,               // Destination (printer page) height
                0,                              // Source start x   
                0,                              // Source start y
                szSource.cx,                    // Source (non-scaled TIFF image) width
                szSource.cy,                    // Source (non-scaled TIFF image) height
                lpbDataToPrint,                 // Pixels buffer source
                (BITMAPINFO *) &SrcBitmapInfo,  // Bitmap information
                DIB_RGB_COLORS,                 // Bitmap type
                SRCCOPY                         // Simple pixles copy
                ))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("StretchDIBits failed with %ld"),
                GetLastError ());
            EndPage ( hdcPrinterDC ) ;
            goto exit;
        }
        //
        // End current page
        //
        if (0 >= EndPage ( hdcPrinterDC ))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("EndPage failed with %ld"),
                GetLastError ());
            goto exit;
        }
        //
        // Advance counters / pointers
        //
        dwCurrentTiffY += szSource.cy;
        dwCurrentScaledTiffY += szDestination.cy;
        //
        // Move pointer up since this is a bottom-up DIB.
        //
        lpbDataToPrint -= dwTiffPageWidthInBytes * szSource.cy;
        if (lpbDataToPrint < lpbPageData)
        {
            //
            // On page before last or at last page
            //
            Assert (dwCurSubPage + 1 >= dwSubPages);
            lpbDataToPrint = lpbPageData;
        }
    }   // End of printer pages loop
    Assert (dwCurrentTiffY == (DWORD)szTiffPage.cy);
    Assert (dwCurrentScaledTiffY == (DWORD)szScaledTiffPage.cy);
    Assert (lpbDataToPrint == lpbPageData);
    bRes = TRUE;

exit:

    MemFree (lpbPageData);
    return bRes;
}   // PrintTiffPage
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\critsec.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

    CritSec.cpp

Abstract:

    This file provides implementation of the service
    critical section wrapper.

Author:

    Oded Sacher (OdedS)  Nov, 2000

Revision History:

--*/

#include "CritSec.h"


/***********************************
*                                  *
*  CFaxCriticalSection  Methodes   *
*                                  *
***********************************/

extern long
StatusNoMemoryExceptionFilter (DWORD dwExceptionCode);  // Implemented in mem.c

BOOL
CFaxCriticalSection::Initialize()
/*++

Routine name : CFaxCriticalSection::Initialize

Routine description:

    Initialize a critical section object

Author:

    Oded Sacher (OdedS),    Nov, 2000

Arguments:

Return Value:
    BOOL.

--*/
{
    Assert (FALSE == m_bInit);
    __try
    {
        InitializeCriticalSection (&m_CritSec);
    }
    __except (StatusNoMemoryExceptionFilter(GetExceptionCode()))
    {
        SetLastError(GetExceptionCode());
        return FALSE;
    }
    m_bInit = TRUE;
    return TRUE;
} // CFaxCriticalSection::Initialize

#if (_WIN32_WINNT >= 0x0403)
BOOL
CFaxCriticalSection::InitializeAndSpinCount(DWORD dwSpinCount)
/*++

Routine name : CFaxCriticalSection::InitializeAndSpinCount

Routine description:

    Initialize a critical section object with spin count

Author:

    Oded Sacher (OdedS),    Nov, 2000

Arguments:

Return Value:
    BOOL

--*/
{
    Assert (FALSE == m_bInit);

    if (!InitializeCriticalSectionAndSpinCount (&m_CritSec, dwSpinCount))
    {
        return FALSE;
    }
    m_bInit = TRUE;
    return TRUE;
} // CFaxCriticalSection::InitializeAndSpinCount
#endif

VOID
CFaxCriticalSection::SafeDelete()
/*++

Routine name : CFaxCriticalSection::SafeDelete

Routine description:

    Deletes a critical section object if it is initialized

Author:

    Oded Sacher (OdedS),    Nov, 2000

Arguments:

Return Value:


--*/
{
    if (TRUE == m_bInit)
    {
        DeleteCriticalSection(&m_CritSec);
        m_bInit = FALSE;
    }
    return;
} // CFaxCriticalSection::SafeDelete
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\apiutil.cpp ===
#include <faxutil.h>


//*********************************************************************************
//*                         Personal Profile Functions
//*********************************************************************************

//*********************************************************************************
//* Name:   CopyPersonalProfile()
//* Author: Ronen Barenboim
//* Date:
//*********************************************************************************
//* DESCRIPTION:
//*     Creates a new copy of a FAX_PERSONAL_PROFILEW structure.
//*     It duplicates all the strings.
//*
//* PARAMETERS:
//*     [IN]    PFAX_PERSONAL_PROFILE lpDstProfile
//*                 A pointer to destination personal profile structure.
//*
//*     [OUT]   LPCFAX_PERSONAL_PROFILE lpcSrcProfile.
//*                 A pointer to the source personal profile to copy.
//*
//* RETURN VALUE:
//*     TRUE
//*         If the operation succeeded.
//*     FALSE
//*         If the operation failed.
//*********************************************************************************
BOOL CopyPersonalProfile(
    PFAX_PERSONAL_PROFILE lpDstProfile,
    LPCFAX_PERSONAL_PROFILE lpcSrcProfile
    )
{
    STRING_PAIR pairs[] =
    {
        { lpcSrcProfile->lptstrName, &lpDstProfile->lptstrName},
        { lpcSrcProfile->lptstrFaxNumber, &lpDstProfile->lptstrFaxNumber},
        { lpcSrcProfile->lptstrCompany, &lpDstProfile->lptstrCompany},
        { lpcSrcProfile->lptstrStreetAddress, &lpDstProfile->lptstrStreetAddress},
        { lpcSrcProfile->lptstrCity, &lpDstProfile->lptstrCity},
        { lpcSrcProfile->lptstrState, &lpDstProfile->lptstrState},
        { lpcSrcProfile->lptstrZip, &lpDstProfile->lptstrZip},
        { lpcSrcProfile->lptstrCountry, &lpDstProfile->lptstrCountry},
        { lpcSrcProfile->lptstrTitle, &lpDstProfile->lptstrTitle},
        { lpcSrcProfile->lptstrDepartment, &lpDstProfile->lptstrDepartment},
        { lpcSrcProfile->lptstrOfficeLocation, &lpDstProfile->lptstrOfficeLocation},
        { lpcSrcProfile->lptstrHomePhone, &lpDstProfile->lptstrHomePhone},
        { lpcSrcProfile->lptstrOfficePhone, &lpDstProfile->lptstrOfficePhone},
        { lpcSrcProfile->lptstrEmail, &lpDstProfile->lptstrEmail},
        { lpcSrcProfile->lptstrBillingCode, &lpDstProfile->lptstrBillingCode},
        { lpcSrcProfile->lptstrTSID,    &lpDstProfile->lptstrTSID}
    };

    int nRes;


    DEBUG_FUNCTION_NAME(TEXT("CopyPersonalProfile"));
    Assert(lpDstProfile);
    Assert(lpcSrcProfile);

    nRes=MultiStringDup(pairs, sizeof(pairs)/sizeof(STRING_PAIR));
    if (nRes!=0) {
        // MultiStringDup takes care of freeing the memory for the pairs for which the copy succeeded
        DebugPrintEx(DEBUG_ERR,TEXT("Failed to copy string with index %d"),nRes-1);
        return FALSE;
    }

    lpDstProfile->dwSizeOfStruct=lpcSrcProfile->dwSizeOfStruct;
    return TRUE;
}


//*********************************************************************************
//* Name:   FreePersonalProfile()
//* Author: Ronen Barenboim
//* Date:
//*********************************************************************************
//* DESCRIPTION:
//*     Frees the contents of a FAX_PERSONAL_PROFILEW structure.
//*     Deallocates the strucutre itself if required.
//* PARAMETERS:
//*     [IN]    PFAX_PERSONAL_PROFILE  lpProfile
//*                 The structure whose content is to be freed.
//*
//*     [IN]    BOOL bDestroy
//*                 If this parameter is TRUE the function will
//*                 deallocate the structure itself.
//*
//* RETURN VALUE:
//*     VOID
//*********************************************************************************
void FreePersonalProfile (
    PFAX_PERSONAL_PROFILE  lpProfile,
    BOOL bDestroy
    )
{
    DEBUG_FUNCTION_NAME(TEXT("FreePersonalProfile"));
    Assert(lpProfile);

    MemFree(lpProfile->lptstrName);
    MemFree(lpProfile->lptstrFaxNumber);
    MemFree(lpProfile->lptstrCompany);
    MemFree(lpProfile->lptstrStreetAddress);
    MemFree(lpProfile->lptstrCity);
    MemFree(lpProfile->lptstrState);
    MemFree(lpProfile->lptstrZip);
    MemFree(lpProfile->lptstrCountry);
    MemFree(lpProfile->lptstrTitle);
    MemFree(lpProfile->lptstrDepartment);
    MemFree(lpProfile->lptstrOfficeLocation);
    MemFree(lpProfile->lptstrHomePhone);
    MemFree(lpProfile->lptstrOfficePhone);
    MemFree(lpProfile->lptstrEmail);
    MemFree(lpProfile->lptstrBillingCode);
    MemFree(lpProfile->lptstrTSID);
    if (bDestroy) {
        MemFree(lpProfile);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\tiff\src\tifftables.inc ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

	tifftables.inc

Abstract:

	Global read-only lookup tables used by the tiff library

Author:

	Eran Yariv (EranY)	Aug, 2000

Revision History:

--*/

#ifndef _TIFF_TABLES_INC_
#define _TIFF_TABLES_INC_

//
// Share the following Tables amongst all the processes that use FxsTiff.DLL (as read only)
// Since this 'Shared' data is weighing over 320Kb, we don't want every app that prints
// to get the impact of it.
// By specifying the global variables as CONST, the compiler marks them as read-only
// and the linker merges the data segment (.LOOKUP_TABLES) with the code segment (.text).
// Hence, the tables are shared amongst all processes.
//
#pragma data_seg(".LOOKUP_TABLES")

CONST BYTE gc_GlobTableWhite[32768][5] = 
{
    {0xb3, 0x00, 0x00, 0x00, 0x00},
    {0x03, 0xf3, 0x00, 0x00, 0x04},
    {0x0b, 0xf3, 0x00, 0x40, 0x05},
    {0x05, 0xf3, 0x00, 0x00, 0x04},
    {0x0c, 0xf3, 0x40, 0x00, 0x06},
    {0x09, 0xf3, 0x00, 0x40, 0x05},
    {0x9a, 0xb3, 0x00, 0x00, 0x06},
    {0x06, 0xf3, 0x00, 0x00, 0x04},
    {0x14, 0xf3, 0x40, 0x40, 0x07},
    {0x82, 0xb3, 0x00, 0x00, 0x05},
    {0x18, 0xf3, 0x40, 0x40, 0x07},
    {0x0e, 0xf3, 0x40, 0x00, 0x06},
    {0x1c, 0xf3, 0x40, 0x40, 0x07},
    {0x04, 0xf3, 0x00, 0x00, 0x04},
    {0x02, 0xf3, 0x00, 0x00, 0x04},
    {0x07, 0xf3, 0x00, 0x00, 0x04},
    {0x17, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb3, 0x00, 0x66},
    {0x1b, 0xf3, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb3, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf3, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0xb3, 0x00, 0x66},
    {0x13, 0xf3, 0x40, 0x40, 0x07},
    {0x08, 0xf3, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb3, 0x00, 0x00, 0x05},
    {0x0a, 0xf3, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb3, 0x00, 0x66},
    {0x02, 0x43, 0xb3, 0x00, 0x66},
    {0x07, 0x43, 0xb3, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0xb3, 0x00, 0x77},
    {0x0b, 0x43, 0xb3, 0x40, 0x77},
    {0x05, 0x41, 0xb3, 0x00, 0x77},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0xb3, 0x40, 0x77},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0xb3, 0x00, 0x77},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf3, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0xb3, 0x00, 0x77},
    {0x02, 0x41, 0xb3, 0x00, 0x77},
    {0x07, 0x41, 0xb3, 0x00, 0x77},
    {0x0d, 0xf3, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb3, 0x00, 0x66},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0xb3, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf3, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0xb3, 0x00, 0x66},
    {0x01, 0xf3, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0xb3, 0x40, 0x77},
    {0x83, 0xb3, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0xb3, 0x40, 0x77},
    {0x04, 0x42, 0xb3, 0x00, 0x66},
    {0x02, 0x42, 0xb3, 0x00, 0x66},
    {0x07, 0x42, 0xb3, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0xf5, 0x00, 0x0a},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0xb5, 0x6a},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0xb5, 0x6a},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0xb5, 0x6a},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0xf5, 0x00, 0x0a},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0xb5, 0x6a},
    {0x02, 0x43, 0x03, 0xb5, 0x6a},
    {0x07, 0x43, 0x03, 0xb5, 0x6a},
    {0x16, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0xb3, 0x00, 0x77},
    {0x0b, 0x42, 0xb3, 0x40, 0x77},
    {0x05, 0x44, 0xb3, 0x00, 0x77},
    {0x1a, 0xf3, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0xb3, 0x40, 0x77},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb3, 0x00, 0x77},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf3, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0xb3, 0x00, 0x77},
    {0x02, 0x44, 0xb3, 0x00, 0x77},
    {0x07, 0x44, 0xb3, 0x00, 0x77},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0xb5, 0x6a},
    {0x12, 0xf3, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0xb5, 0x6a},
    {0x15, 0xf3, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0x84, 0xb3, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x03, 0xb5, 0x6a},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0xb3, 0x40, 0x77},
    {0xc3, 0x03, 0xf5, 0x00, 0x0a},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0xb3, 0x40, 0x77},
    {0x04, 0x42, 0x03, 0xb5, 0x6a},
    {0x02, 0x42, 0x03, 0xb5, 0x6a},
    {0x07, 0x42, 0x03, 0xb5, 0x6a},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0xf5, 0x40, 0x0b},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0xf5, 0x40, 0x0b},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0xb5, 0x6b},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0xb5, 0x6b},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0xb5, 0x6b},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0xf5, 0x40, 0x0b},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0xb5, 0x6b},
    {0x02, 0x43, 0x0b, 0xb5, 0x6b},
    {0x07, 0x43, 0x0b, 0xb5, 0x6b},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0xb5, 0x7b},
    {0x0b, 0x43, 0x03, 0xf5, 0x7b},
    {0x05, 0x41, 0x03, 0xb5, 0x7b},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0xf5, 0x7b},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0xb5, 0x7b},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0xf5, 0x00, 0x0a},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0xb5, 0x7b},
    {0x02, 0x41, 0x03, 0xb5, 0x7b},
    {0x07, 0x41, 0x03, 0xb5, 0x7b},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0xb5, 0x6b},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0xb5, 0x6b},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0xb5, 0x6b},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0xf5, 0x7b},
    {0xc3, 0x0b, 0xf5, 0x40, 0x0b},
    {0xc1, 0x09, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x0b, 0xb5, 0x6b},
    {0x02, 0x42, 0x0b, 0xb5, 0x6b},
    {0x07, 0x42, 0x0b, 0xb5, 0x6b},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0xb5, 0x6a},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x6a},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0xb5, 0x6a},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0xb5, 0x6a},
    {0x02, 0x43, 0x05, 0xb5, 0x6a},
    {0x07, 0x43, 0x05, 0xb5, 0x6a},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0xb5, 0x7b},
    {0x0b, 0x42, 0x03, 0xf5, 0x7b},
    {0x05, 0x44, 0x03, 0xb5, 0x7b},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0xf5, 0x7b},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0xb5, 0x7b},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0xb5, 0x7b},
    {0x02, 0x44, 0x03, 0xb5, 0x7b},
    {0x07, 0x44, 0x03, 0xb5, 0x7b},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0xb5, 0x6a},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0xb5, 0x6a},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x05, 0xb5, 0x6a},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0xf5, 0x7b},
    {0xc3, 0x05, 0xf5, 0x00, 0x0a},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x05, 0xb5, 0x6a},
    {0x02, 0x42, 0x05, 0xb5, 0x6a},
    {0x07, 0x42, 0x05, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0xb5, 0x00, 0x0c},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0xb5, 0x00, 0x0c},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0xb5, 0x6c},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0xb5, 0x6c},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0c, 0xb5, 0x6c},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0xb5, 0x00, 0x0c},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0xb5, 0x6c},
    {0x02, 0x43, 0x0c, 0xb5, 0x6c},
    {0x07, 0x43, 0x0c, 0xb5, 0x6c},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0b, 0xf5, 0x7c},
    {0x05, 0x41, 0x0b, 0xb5, 0x7c},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc7, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0b, 0xb5, 0x7c},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0xb5, 0x7c},
    {0x02, 0x41, 0x0b, 0xb5, 0x7c},
    {0x07, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0xb5, 0x6c},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0xb5, 0x6c},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0xb5, 0x6c},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x4c, 0xb5, 0x00, 0x0c},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x0c, 0xb5, 0x6c},
    {0x02, 0x42, 0x0c, 0xb5, 0x6c},
    {0x07, 0x42, 0x0c, 0xb5, 0x6c},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0xb5, 0x8c},
    {0x0b, 0x41, 0x03, 0xf5, 0x8c},
    {0x05, 0x46, 0x03, 0xb5, 0x8c},
    {0x0c, 0x43, 0x43, 0xb5, 0x8c},
    {0x09, 0x41, 0x03, 0xf5, 0x8c},
    {0xda, 0x09, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x03, 0xb5, 0x8c},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0xb5, 0x8c},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0xb5, 0x8c},
    {0x02, 0x46, 0x03, 0xb5, 0x8c},
    {0x07, 0x46, 0x03, 0xb5, 0x8c},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0xb5, 0x6b},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0xb5, 0x6b},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0xb5, 0x8c},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0xb5, 0x6b},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0xf5, 0x8c},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x09, 0xb5, 0x6b},
    {0x02, 0x43, 0x09, 0xb5, 0x6b},
    {0x07, 0x43, 0x09, 0xb5, 0x6b},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0b, 0xf5, 0x7c},
    {0x05, 0x44, 0x0b, 0xb5, 0x7c},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0xf5, 0x7c},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0xb5, 0x7c},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0xb5, 0x8c},
    {0xc5, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0b, 0xb5, 0x7c},
    {0x02, 0x44, 0x0b, 0xb5, 0x7c},
    {0x07, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x43, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x09, 0xb5, 0x6b},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0xb5, 0x6b},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0xb5, 0x8c},
    {0xc4, 0x4b, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x09, 0xb5, 0x6b},
    {0x01, 0x43, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x09, 0xf5, 0x40, 0x0b},
    {0xc1, 0x0e, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x09, 0xb5, 0x6b},
    {0x02, 0x42, 0x09, 0xb5, 0x6b},
    {0x07, 0x42, 0x09, 0xb5, 0x6b},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0xb5, 0x00, 0x0c},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0xb5, 0x00, 0x0c},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0xb5, 0x7b},
    {0x0b, 0x43, 0x05, 0xf5, 0x7b},
    {0x05, 0x41, 0x05, 0xb5, 0x7b},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0xf5, 0x7b},
    {0xc8, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x05, 0xb5, 0x7b},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0xb5, 0x7b},
    {0x02, 0x41, 0x05, 0xb5, 0x7b},
    {0x07, 0x41, 0x05, 0xb5, 0x7b},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0xf5, 0x7b},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0xb5, 0x8c},
    {0x0b, 0x44, 0x03, 0xf5, 0x8c},
    {0x05, 0x45, 0x03, 0xb5, 0x8c},
    {0x0c, 0x42, 0x43, 0xb5, 0x8c},
    {0x09, 0x44, 0x03, 0xf5, 0x8c},
    {0xda, 0x06, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x03, 0xb5, 0x8c},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0xb5, 0x8c},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0xb5, 0x8c},
    {0x02, 0x45, 0x03, 0xb5, 0x8c},
    {0x07, 0x45, 0x03, 0xb5, 0x8c},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0xb5, 0x6a},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0xb5, 0x6a},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0xb5, 0x8c},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0xb5, 0x6a},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0xf5, 0x8c},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0xb5, 0x6a},
    {0x02, 0x43, 0x06, 0xb5, 0x6a},
    {0x07, 0x43, 0x06, 0xb5, 0x6a},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0xb5, 0x7b},
    {0x0b, 0x42, 0x05, 0xf5, 0x7b},
    {0x05, 0x44, 0x05, 0xb5, 0x7b},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0xf5, 0x7b},
    {0xca, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x05, 0xb5, 0x7b},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0xb5, 0x8c},
    {0xc6, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x05, 0xb5, 0x7b},
    {0x02, 0x44, 0x05, 0xb5, 0x7b},
    {0x07, 0x44, 0x05, 0xb5, 0x7b},
    {0x0d, 0x42, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0xb5, 0x6a},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0xb5, 0x6a},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0xb5, 0x8c},
    {0xc4, 0x05, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x06, 0xb5, 0x6a},
    {0x01, 0x42, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x05, 0xf5, 0x7b},
    {0xc3, 0x06, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x06, 0xb5, 0x6a},
    {0x02, 0x42, 0x06, 0xb5, 0x6a},
    {0x07, 0x42, 0x06, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0xb5, 0x40, 0x0d},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0xb5, 0x00, 0x0c},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0xb5, 0x6d},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0xb5, 0x6d},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x14, 0xb5, 0x6d},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0xb5, 0x00, 0x0c},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0xb5, 0x6d},
    {0x02, 0x43, 0x14, 0xb5, 0x6d},
    {0x07, 0x43, 0x14, 0xb5, 0x6d},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0c, 0xf5, 0x7d},
    {0x05, 0x41, 0x0c, 0xb5, 0x7d},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc7, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0c, 0xb5, 0x7d},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0xb5, 0x7d},
    {0x02, 0x41, 0x0c, 0xb5, 0x7d},
    {0x07, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0xb5, 0x6d},
    {0xd7, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x14, 0xb5, 0x6d},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x14, 0xb5, 0x6d},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc3, 0x54, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x14, 0xb5, 0x6d},
    {0x02, 0x42, 0x14, 0xb5, 0x6d},
    {0x07, 0x42, 0x14, 0xb5, 0x6d},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0b, 0xf5, 0x8d},
    {0x05, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4b, 0xb5, 0x8d},
    {0x09, 0x41, 0x0b, 0xf5, 0x8d},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0xb5, 0x8d},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0xb5, 0x00, 0x0c},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0xb5, 0x8d},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0xb5, 0x8d},
    {0x02, 0x46, 0x0b, 0xb5, 0x8d},
    {0x07, 0x46, 0x0b, 0xb5, 0x8d},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0xb5, 0x8d},
    {0xcf, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0xf5, 0x8d},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0c, 0xf5, 0x7d},
    {0x05, 0x44, 0x0c, 0xb5, 0x7d},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0xf5, 0x7d},
    {0xcb, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0c, 0xb5, 0x7d},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc5, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0c, 0xb5, 0x7d},
    {0x02, 0x44, 0x0c, 0xb5, 0x7d},
    {0x07, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x4c, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x0c, 0xf5, 0x7d},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0xb5, 0x9d},
    {0x09, 0x46, 0x03, 0xf5, 0x9d},
    {0xda, 0x58, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0xf5, 0x9d},
    {0xc2, 0x67, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x43, 0xf5, 0x9d},
    {0x0e, 0x41, 0x43, 0xb5, 0x9d},
    {0x1c, 0x43, 0x43, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x18, 0xb5, 0x6d},
    {0x1b, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x18, 0xb5, 0x6d},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0xb5, 0x9d},
    {0xcd, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x18, 0xb5, 0x6d},
    {0x13, 0x43, 0x43, 0xf5, 0x9d},
    {0x08, 0x46, 0x03, 0xf5, 0x9d},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x18, 0xb5, 0x6d},
    {0x02, 0x43, 0x18, 0xb5, 0x6d},
    {0x07, 0x43, 0x18, 0xb5, 0x6d},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0xb5, 0x7c},
    {0x0b, 0x43, 0x09, 0xf5, 0x7c},
    {0x05, 0x41, 0x09, 0xb5, 0x7c},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0xf5, 0x7c},
    {0xc8, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x09, 0xb5, 0x7c},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0xf5, 0x40, 0x0b},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0xb5, 0x9d},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0xb5, 0x7c},
    {0x02, 0x41, 0x09, 0xb5, 0x7c},
    {0x07, 0x41, 0x09, 0xb5, 0x7c},
    {0x0d, 0x41, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x18, 0xb5, 0x6d},
    {0xd9, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x18, 0xb5, 0x6d},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0xb5, 0x9d},
    {0xd5, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x18, 0xb5, 0x6d},
    {0x01, 0x41, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x09, 0xf5, 0x7c},
    {0xc3, 0x58, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x18, 0xb5, 0x6d},
    {0x02, 0x42, 0x18, 0xb5, 0x6d},
    {0x07, 0x42, 0x18, 0xb5, 0x6d},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0b, 0xf5, 0x8d},
    {0x05, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4b, 0xb5, 0x8d},
    {0x09, 0x44, 0x0b, 0xf5, 0x8d},
    {0xda, 0x4e, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0x0b, 0xb5, 0x8d},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0xb5, 0x8d},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0xb5, 0x8d},
    {0x02, 0x45, 0x0b, 0xb5, 0x8d},
    {0x07, 0x45, 0x0b, 0xb5, 0x8d},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0xb5, 0x6c},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0xb5, 0x6c},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0xb5, 0x8d},
    {0xd1, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0e, 0xb5, 0x6c},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0xf5, 0x8d},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x0e, 0xb5, 0x6c},
    {0x02, 0x43, 0x0e, 0xb5, 0x6c},
    {0x07, 0x43, 0x0e, 0xb5, 0x6c},
    {0x16, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x09, 0xb5, 0x7c},
    {0x0b, 0x42, 0x09, 0xf5, 0x7c},
    {0x05, 0x44, 0x09, 0xb5, 0x7c},
    {0x1a, 0x43, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x09, 0xf5, 0x7c},
    {0xca, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x09, 0xb5, 0x7c},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc6, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x09, 0xb5, 0x7c},
    {0x02, 0x44, 0x09, 0xb5, 0x7c},
    {0x07, 0x44, 0x09, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x0e, 0xb5, 0x6c},
    {0x12, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x0e, 0xb5, 0x6c},
    {0x15, 0x43, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x49, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x0e, 0xb5, 0x6c},
    {0x01, 0x42, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x09, 0xf5, 0x7c},
    {0xc3, 0x4e, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x0e, 0xb5, 0x6c},
    {0x02, 0x42, 0x0e, 0xb5, 0x6c},
    {0x07, 0x42, 0x0e, 0xb5, 0x6c},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0xb5, 0x40, 0x0d},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0xb5, 0x00, 0x0c},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0xb5, 0x6d},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0xb5, 0x6d},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x1c, 0xb5, 0x6d},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0xb5, 0x00, 0x0c},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0xb5, 0x6d},
    {0x02, 0x43, 0x1c, 0xb5, 0x6d},
    {0x07, 0x43, 0x1c, 0xb5, 0x6d},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0xf5, 0x00, 0x0a},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0xb5, 0x6d},
    {0xd8, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x1c, 0xb5, 0x6d},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x1c, 0xb5, 0x6d},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0xb5, 0x40, 0x0d},
    {0xc1, 0x08, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0xb5, 0x6d},
    {0x02, 0x42, 0x1c, 0xb5, 0x6d},
    {0x07, 0x42, 0x1c, 0xb5, 0x6d},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0xb5, 0x8c},
    {0x0b, 0x41, 0x05, 0xf5, 0x8c},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x0c, 0x43, 0x45, 0xb5, 0x8c},
    {0x09, 0x41, 0x05, 0xf5, 0x8c},
    {0xda, 0x04, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0xb5, 0x8c},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0xb5, 0x8c},
    {0x02, 0x46, 0x05, 0xb5, 0x8c},
    {0x07, 0x46, 0x05, 0xb5, 0x8c},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0xb5, 0x6a},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0xb5, 0x6a},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0xb5, 0x8c},
    {0xd0, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0xb5, 0x6a},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0xf5, 0x8c},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0xb5, 0x6a},
    {0x02, 0x43, 0x04, 0xb5, 0x6a},
    {0x07, 0x43, 0x04, 0xb5, 0x6a},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0xb5, 0x8c},
    {0xc5, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0xb5, 0x6a},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0xb5, 0x6a},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0xb5, 0x8c},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0xb5, 0x6a},
    {0x01, 0x43, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0xf5, 0x00, 0x0a},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0xb5, 0x6a},
    {0x02, 0x42, 0x04, 0xb5, 0x6a},
    {0x07, 0x42, 0x04, 0xb5, 0x6a},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0xb5, 0x9d},
    {0x0b, 0x45, 0x03, 0xf5, 0x9d},
    {0x05, 0x47, 0x03, 0xb5, 0x9d},
    {0x0c, 0x44, 0x43, 0xb5, 0x9d},
    {0x09, 0x45, 0x03, 0xf5, 0x9d},
    {0xda, 0x02, 0xf5, 0x00, 0x0a},
    {0x06, 0x47, 0x03, 0xb5, 0x9d},
    {0x14, 0x42, 0x43, 0xf5, 0x9d},
    {0xc2, 0x0a, 0xf5, 0x00, 0x0a},
    {0x18, 0x42, 0x43, 0xf5, 0x9d},
    {0x0e, 0x44, 0x43, 0xb5, 0x9d},
    {0x1c, 0x42, 0x43, 0xf5, 0x9d},
    {0x04, 0x47, 0x03, 0xb5, 0x9d},
    {0x02, 0x47, 0x03, 0xb5, 0x9d},
    {0x07, 0x47, 0x03, 0xb5, 0x9d},
    {0x17, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0xb5, 0x6a},
    {0x1b, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0xb5, 0x6a},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0xb5, 0x9d},
    {0xce, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0xb5, 0x6a},
    {0x13, 0x42, 0x43, 0xf5, 0x9d},
    {0x08, 0x45, 0x03, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0xf5, 0x00, 0x0a},
    {0x0a, 0x45, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0xb5, 0x6a},
    {0x02, 0x43, 0x02, 0xb5, 0x6a},
    {0x07, 0x43, 0x02, 0xb5, 0x6a},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0xb5, 0x7b},
    {0x0b, 0x43, 0x06, 0xf5, 0x7b},
    {0x05, 0x41, 0x06, 0xb5, 0x7b},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0xf5, 0x7b},
    {0xc8, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x06, 0xb5, 0x7b},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0xb5, 0x7b},
    {0x02, 0x41, 0x06, 0xb5, 0x7b},
    {0x07, 0x41, 0x06, 0xb5, 0x7b},
    {0x0d, 0x44, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0xb5, 0x6a},
    {0xdb, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x6a},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0xb5, 0x9d},
    {0xd6, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0xb5, 0x6a},
    {0x01, 0x44, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0xf5, 0x7b},
    {0xc3, 0x02, 0xf5, 0x00, 0x0a},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0xb5, 0x6a},
    {0x02, 0x42, 0x02, 0xb5, 0x6a},
    {0x07, 0x42, 0x02, 0xb5, 0x6a},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0xb5, 0x8c},
    {0x0b, 0x44, 0x05, 0xf5, 0x8c},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x0c, 0x42, 0x45, 0xb5, 0x8c},
    {0x09, 0x44, 0x05, 0xf5, 0x8c},
    {0xda, 0x07, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0xb5, 0x8c},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0xb5, 0x8c},
    {0x02, 0x45, 0x05, 0xb5, 0x8c},
    {0x07, 0x45, 0x05, 0xb5, 0x8c},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0xb5, 0x6a},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0xb5, 0x6a},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0xb5, 0x8c},
    {0xd2, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0xb5, 0x6a},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0xf5, 0x8c},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0xb5, 0x6a},
    {0x02, 0x43, 0x07, 0xb5, 0x6a},
    {0x07, 0x43, 0x07, 0xb5, 0x6a},
    {0x16, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0xb5, 0x7b},
    {0x0b, 0x42, 0x06, 0xf5, 0x7b},
    {0x05, 0x44, 0x06, 0xb5, 0x7b},
    {0x1a, 0x42, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0xf5, 0x7b},
    {0xca, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x06, 0xb5, 0x7b},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x45, 0xb5, 0x8c},
    {0xc6, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x06, 0xb5, 0x7b},
    {0x02, 0x44, 0x06, 0xb5, 0x7b},
    {0x07, 0x44, 0x06, 0xb5, 0x7b},
    {0x0d, 0x42, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0xb5, 0x6a},
    {0x12, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0xb5, 0x6a},
    {0x15, 0x42, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x45, 0xb5, 0x8c},
    {0xc4, 0x06, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0xb5, 0x6a},
    {0x01, 0x42, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x06, 0xf5, 0x7b},
    {0xc3, 0x07, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0xb5, 0x6a},
    {0x02, 0x42, 0x07, 0xb5, 0x6a},
    {0x07, 0x42, 0x07, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x52, 0xb5, 0x00, 0xee},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0x52, 0xb5, 0x00, 0xee},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0xb5, 0x40, 0x0d},
    {0x06, 0x52, 0xb5, 0x00, 0xee},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0xb5, 0x40, 0x0d},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0x52, 0xb5, 0x00, 0xee},
    {0x02, 0x52, 0xb5, 0x00, 0xee},
    {0x07, 0x52, 0xb5, 0x00, 0xee},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0xb5, 0x6d},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0xb5, 0x6d},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x17, 0xb5, 0x6d},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0xb5, 0x6d},
    {0x02, 0x43, 0x17, 0xb5, 0x6d},
    {0x07, 0x43, 0x17, 0xb5, 0x6d},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x14, 0xb5, 0x7e},
    {0x0b, 0x43, 0x14, 0xf5, 0x7e},
    {0x05, 0x41, 0x14, 0xb5, 0x7e},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x14, 0xf5, 0x7e},
    {0xc7, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x14, 0xb5, 0x7e},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x14, 0xb5, 0x7e},
    {0x02, 0x41, 0x14, 0xb5, 0x7e},
    {0x07, 0x41, 0x14, 0xb5, 0x7e},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0xb5, 0x6d},
    {0xd7, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x17, 0xb5, 0x6d},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0xd3, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x17, 0xb5, 0x6d},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x14, 0xf5, 0x7e},
    {0xc3, 0x57, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x17, 0xb5, 0x6d},
    {0x02, 0x42, 0x17, 0xb5, 0x6d},
    {0x07, 0x42, 0x17, 0xb5, 0x6d},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0c, 0xf5, 0x8e},
    {0x05, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4c, 0xb5, 0x8e},
    {0x09, 0x41, 0x0c, 0xf5, 0x8e},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x0c, 0xb5, 0x8e},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4c, 0xb5, 0x8e},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0c, 0xb5, 0x8e},
    {0x02, 0x46, 0x0c, 0xb5, 0x8e},
    {0x07, 0x46, 0x0c, 0xb5, 0x8e},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4c, 0xb5, 0x8e},
    {0xcf, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0c, 0xf5, 0x8e},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x14, 0xb5, 0x7e},
    {0x0b, 0x42, 0x14, 0xf5, 0x7e},
    {0x05, 0x44, 0x14, 0xb5, 0x7e},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x14, 0xf5, 0x7e},
    {0xcb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x14, 0xb5, 0x7e},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc5, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x14, 0xb5, 0x7e},
    {0x02, 0x44, 0x14, 0xb5, 0x7e},
    {0x07, 0x44, 0x14, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc4, 0x54, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x14, 0xf5, 0x7e},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x0b, 0xf5, 0x9e},
    {0x05, 0x49, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x4b, 0xb5, 0x9e},
    {0x09, 0x46, 0x0b, 0xf5, 0x9e},
    {0xda, 0x5b, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x75, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4b, 0xf5, 0x9e},
    {0x04, 0x49, 0x03, 0xb5, 0xae},
    {0x02, 0x49, 0x03, 0xb5, 0xae},
    {0x07, 0x49, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x1b, 0xb5, 0x6d},
    {0x1b, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x1b, 0xb5, 0x6d},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x4b, 0xb5, 0x9e},
    {0xcd, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1b, 0xb5, 0x6d},
    {0x13, 0x43, 0x4b, 0xf5, 0x9e},
    {0x08, 0x46, 0x0b, 0xf5, 0x9e},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x1b, 0xb5, 0x6d},
    {0x02, 0x43, 0x1b, 0xb5, 0x6d},
    {0x07, 0x43, 0x1b, 0xb5, 0x6d},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x4b, 0xb5, 0x9e},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x1b, 0xb5, 0x6d},
    {0xd9, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1b, 0xb5, 0x6d},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x4b, 0xb5, 0x9e},
    {0xd5, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1b, 0xb5, 0x6d},
    {0x01, 0x41, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0xb5, 0x6d},
    {0x02, 0x42, 0x1b, 0xb5, 0x6d},
    {0x07, 0x42, 0x1b, 0xb5, 0x6d},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0c, 0xf5, 0x8e},
    {0x05, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4c, 0xb5, 0x8e},
    {0x09, 0x44, 0x0c, 0xf5, 0x8e},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x0c, 0xb5, 0x8e},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4c, 0xb5, 0x8e},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0c, 0xb5, 0x8e},
    {0x02, 0x45, 0x0c, 0xb5, 0x8e},
    {0x07, 0x45, 0x0c, 0xb5, 0x8e},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4c, 0xb5, 0x8e},
    {0xd1, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0c, 0xf5, 0x8e},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4c, 0xb5, 0x8e},
    {0xc6, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x4c, 0xb5, 0x8e},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x43, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x67, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x43, 0xf5, 0xae},
    {0xc2, 0x63, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x43, 0xf5, 0xae},
    {0x0e, 0x46, 0x43, 0xb5, 0xae},
    {0x1c, 0x41, 0x43, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x27, 0xb5, 0x6e},
    {0x1b, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x27, 0xb5, 0x6e},
    {0x67, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x46, 0x43, 0xb5, 0xae},
    {0xc9, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x27, 0xb5, 0x6e},
    {0x13, 0x41, 0x43, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x63, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x27, 0xb5, 0x6e},
    {0x02, 0x43, 0x27, 0xb5, 0x6e},
    {0x07, 0x43, 0x27, 0xb5, 0x6e},
    {0x6d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x18, 0xb5, 0x7e},
    {0x0b, 0x43, 0x18, 0xf5, 0x7e},
    {0x05, 0x41, 0x18, 0xb5, 0x7e},
    {0x75, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x18, 0xf5, 0x7e},
    {0xc7, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x18, 0xb5, 0x7e},
    {0x63, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0xc2, 0x43, 0xb5, 0x0e},
    {0x73, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x46, 0x43, 0xb5, 0xae},
    {0x7f, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x18, 0xb5, 0x7e},
    {0x02, 0x41, 0x18, 0xb5, 0x7e},
    {0x07, 0x41, 0x18, 0xb5, 0x7e},
    {0x0d, 0x46, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x27, 0xb5, 0x6e},
    {0xd8, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x27, 0xb5, 0x6e},
    {0x6b, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x46, 0x43, 0xb5, 0xae},
    {0xd4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x27, 0xb5, 0x6e},
    {0x01, 0x46, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x18, 0xf5, 0x7e},
    {0xc3, 0x67, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x43, 0xb5, 0x0e},
    {0x0a, 0x43, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x27, 0xb5, 0x6e},
    {0x02, 0x42, 0x27, 0xb5, 0x6e},
    {0x07, 0x42, 0x27, 0xb5, 0x6e},
    {0x5d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x09, 0xb5, 0x8d},
    {0x0b, 0x41, 0x09, 0xf5, 0x8d},
    {0x05, 0x46, 0x09, 0xb5, 0x8d},
    {0x0c, 0x43, 0x49, 0xb5, 0x8d},
    {0x09, 0x41, 0x09, 0xf5, 0x8d},
    {0xda, 0x50, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x09, 0xb5, 0x8d},
    {0x61, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x73, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x49, 0xb5, 0x8d},
    {0x7d, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x09, 0xb5, 0x8d},
    {0x02, 0x46, 0x09, 0xb5, 0x8d},
    {0x07, 0x46, 0x09, 0xb5, 0x8d},
    {0x6f, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0xb5, 0x6c},
    {0x7b, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0xb5, 0x6c},
    {0x69, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x49, 0xb5, 0x8d},
    {0xd0, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x10, 0xb5, 0x6c},
    {0x5f, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x09, 0xf5, 0x8d},
    {0x79, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x73, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x10, 0xb5, 0x6c},
    {0x02, 0x43, 0x10, 0xb5, 0x6c},
    {0x07, 0x43, 0x10, 0xb5, 0x6c},
    {0x16, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x18, 0xb5, 0x7e},
    {0x0b, 0x42, 0x18, 0xf5, 0x7e},
    {0x05, 0x44, 0x18, 0xb5, 0x7e},
    {0x1a, 0x41, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x18, 0xf5, 0x7e},
    {0xcc, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x18, 0xb5, 0x7e},
    {0x65, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x0f, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x49, 0xb5, 0x8d},
    {0xc5, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x18, 0xb5, 0x7e},
    {0x02, 0x44, 0x18, 0xb5, 0x7e},
    {0x07, 0x44, 0x18, 0xb5, 0x7e},
    {0x0d, 0x43, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x10, 0xb5, 0x6c},
    {0x12, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0xb5, 0x6c},
    {0x15, 0x41, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x49, 0xb5, 0x8d},
    {0xc4, 0x58, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0xb5, 0x6c},
    {0x01, 0x43, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x18, 0xf5, 0x7e},
    {0xc3, 0x50, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0xb5, 0x6c},
    {0x02, 0x42, 0x10, 0xb5, 0x6c},
    {0x07, 0x42, 0x10, 0xb5, 0x6c},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0b, 0xf5, 0x9e},
    {0x05, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4b, 0xb5, 0x9e},
    {0x09, 0x45, 0x0b, 0xf5, 0x9e},
    {0x9a, 0x89, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0b, 0xb5, 0x9e},
    {0x14, 0x42, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x7f, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4b, 0xf5, 0x9e},
    {0x04, 0x47, 0x0b, 0xb5, 0x9e},
    {0x02, 0x47, 0x0b, 0xb5, 0x9e},
    {0x07, 0x47, 0x0b, 0xb5, 0x9e},
    {0x17, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x89, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x89, 0xb5, 0x6e},
    {0x68, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x4b, 0xb5, 0x9e},
    {0xce, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x89, 0xb5, 0x6e},
    {0x13, 0x42, 0x4b, 0xf5, 0x9e},
    {0x08, 0x45, 0x0b, 0xf5, 0x9e},
    {0x78, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x7f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x89, 0xb5, 0x6e},
    {0x02, 0x43, 0x89, 0xb5, 0x6e},
    {0x07, 0x43, 0x89, 0xb5, 0x6e},
    {0x6e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0e, 0xf5, 0x7d},
    {0x05, 0x41, 0x0e, 0xb5, 0x7d},
    {0x76, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x0e, 0xf5, 0x7d},
    {0xc8, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0e, 0xb5, 0x7d},
    {0x64, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x4b, 0xb5, 0x9e},
    {0x40, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x0e, 0xb5, 0x7d},
    {0x02, 0x41, 0x0e, 0xb5, 0x7d},
    {0x07, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x44, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x89, 0xb5, 0x6e},
    {0xdb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x89, 0xb5, 0x6e},
    {0x6c, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x4b, 0xb5, 0x9e},
    {0xd6, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x89, 0xb5, 0x6e},
    {0x01, 0x44, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x0e, 0xf5, 0x7d},
    {0x83, 0x89, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x89, 0xb5, 0x6e},
    {0x02, 0x42, 0x89, 0xb5, 0x6e},
    {0x07, 0x42, 0x89, 0xb5, 0x6e},
    {0x5e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x09, 0xb5, 0x8d},
    {0x0b, 0x44, 0x09, 0xf5, 0x8d},
    {0x05, 0x45, 0x09, 0xb5, 0x8d},
    {0x0c, 0x42, 0x49, 0xb5, 0x8d},
    {0x09, 0x44, 0x09, 0xf5, 0x8d},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0xb5, 0x8d},
    {0x62, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x49, 0xb5, 0x8d},
    {0x7e, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x09, 0xb5, 0x8d},
    {0x02, 0x45, 0x09, 0xb5, 0x8d},
    {0x07, 0x45, 0x09, 0xb5, 0x8d},
    {0x70, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x49, 0xb5, 0x8d},
    {0xd2, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x09, 0xf5, 0x8d},
    {0x7a, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0e, 0xf5, 0x7d},
    {0x05, 0x44, 0x0e, 0xb5, 0x7d},
    {0x1a, 0x42, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x0e, 0xf5, 0x7d},
    {0xca, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0e, 0xb5, 0x7d},
    {0x66, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x49, 0xb5, 0x8d},
    {0xc6, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0e, 0xb5, 0x7d},
    {0x02, 0x44, 0x0e, 0xb5, 0x7d},
    {0x07, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x42, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x49, 0xb5, 0x8d},
    {0xc4, 0x4e, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x0e, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x51, 0xb5, 0x00, 0xee},
    {0x0b, 0x4f, 0xb5, 0x40, 0xee},
    {0x05, 0x51, 0xb5, 0x00, 0xee},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4f, 0xb5, 0x40, 0xee},
    {0xda, 0x53, 0xb5, 0x40, 0x0d},
    {0x06, 0x51, 0xb5, 0x00, 0xee},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0xf5, 0x40, 0x0b},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x51, 0xb5, 0x00, 0xee},
    {0x02, 0x51, 0xb5, 0x00, 0xee},
    {0x07, 0x51, 0xb5, 0x00, 0xee},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0xb5, 0x6d},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0xb5, 0x6d},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x13, 0xb5, 0x6d},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4f, 0xb5, 0x40, 0xee},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0xf5, 0x40, 0x0b},
    {0x0a, 0x4f, 0xb5, 0x40, 0xee},
    {0x04, 0x43, 0x13, 0xb5, 0x6d},
    {0x02, 0x43, 0x13, 0xb5, 0x6d},
    {0x07, 0x43, 0x13, 0xb5, 0x6d},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1c, 0xf5, 0x7e},
    {0x05, 0x41, 0x1c, 0xb5, 0x7e},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x1c, 0xf5, 0x7e},
    {0x87, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x1c, 0xb5, 0x7e},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x1c, 0xb5, 0x7e},
    {0x02, 0x41, 0x1c, 0xb5, 0x7e},
    {0x07, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0xb5, 0x6d},
    {0xd7, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x13, 0xb5, 0x6d},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x13, 0xb5, 0x6d},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x53, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x13, 0xb5, 0x6d},
    {0x02, 0x42, 0x13, 0xb5, 0x6d},
    {0x07, 0x42, 0x13, 0xb5, 0x6d},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x41, 0x9a, 0xf5, 0x8e},
    {0x05, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x43, 0xda, 0xb5, 0x8e},
    {0x09, 0x41, 0x9a, 0xf5, 0x8e},
    {0xda, 0x08, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x9a, 0xb5, 0x8e},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x97, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xda, 0xb5, 0x8e},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x9a, 0xb5, 0x8e},
    {0x02, 0x46, 0x9a, 0xb5, 0x8e},
    {0x07, 0x46, 0x9a, 0xb5, 0x8e},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0xb5, 0x6b},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0xb5, 0x6b},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xda, 0xb5, 0x8e},
    {0xcf, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0xb5, 0x6b},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x9a, 0xf5, 0x8e},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x97, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x08, 0xb5, 0x6b},
    {0x02, 0x43, 0x08, 0xb5, 0x6b},
    {0x07, 0x43, 0x08, 0xb5, 0x6b},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1c, 0xf5, 0x7e},
    {0x05, 0x44, 0x1c, 0xb5, 0x7e},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x1c, 0xf5, 0x7e},
    {0xcb, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x1c, 0xb5, 0x7e},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xda, 0xb5, 0x8e},
    {0x85, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x1c, 0xb5, 0x7e},
    {0x02, 0x44, 0x1c, 0xb5, 0x7e},
    {0x07, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x43, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x08, 0xb5, 0x6b},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0xb5, 0x6b},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xda, 0xb5, 0x8e},
    {0xc4, 0x5c, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x08, 0xb5, 0x6b},
    {0x01, 0x43, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x08, 0xf5, 0x40, 0x0b},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x08, 0xb5, 0x6b},
    {0x02, 0x42, 0x08, 0xb5, 0x6b},
    {0x07, 0x42, 0x08, 0xb5, 0x6b},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x05, 0xf5, 0x9d},
    {0x05, 0x48, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x45, 0xb5, 0x9d},
    {0x09, 0x46, 0x05, 0xf5, 0x9d},
    {0xda, 0x77, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x45, 0xf5, 0x9d},
    {0xc2, 0x6b, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x45, 0xf5, 0x9d},
    {0x0e, 0x41, 0x45, 0xb5, 0x9d},
    {0x1c, 0x43, 0x45, 0xf5, 0x9d},
    {0x04, 0x48, 0x03, 0xb5, 0xae},
    {0x02, 0x48, 0x03, 0xb5, 0xae},
    {0x07, 0x48, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x37, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x37, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0xb5, 0x9d},
    {0xcd, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x37, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0xf5, 0x9d},
    {0x08, 0x46, 0x05, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x37, 0xb5, 0x6e},
    {0x02, 0x43, 0x37, 0xb5, 0x6e},
    {0x07, 0x43, 0x37, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0xb5, 0x7b},
    {0x0b, 0x43, 0x04, 0xf5, 0x7b},
    {0x05, 0x41, 0x04, 0xb5, 0x7b},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0xf5, 0x7b},
    {0x88, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x04, 0xb5, 0x7b},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0xf5, 0x40, 0x0b},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0xb5, 0x7b},
    {0x02, 0x41, 0x04, 0xb5, 0x7b},
    {0x07, 0x41, 0x04, 0xb5, 0x7b},
    {0x0d, 0x41, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x37, 0xb5, 0x6e},
    {0xd9, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x37, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0xb5, 0x9d},
    {0xd5, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x37, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0xf5, 0x7b},
    {0xc3, 0x77, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x37, 0xb5, 0x6e},
    {0x02, 0x42, 0x37, 0xb5, 0x6e},
    {0x07, 0x42, 0x37, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x44, 0x9a, 0xf5, 0x8e},
    {0x05, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x42, 0xda, 0xb5, 0x8e},
    {0x09, 0x44, 0x9a, 0xf5, 0x8e},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x9a, 0xb5, 0x8e},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x93, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xda, 0xb5, 0x8e},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x9a, 0xb5, 0x8e},
    {0x02, 0x45, 0x9a, 0xb5, 0x8e},
    {0x07, 0x45, 0x9a, 0xb5, 0x8e},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xda, 0xb5, 0x8e},
    {0xd1, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x9a, 0xf5, 0x8e},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x93, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0xb5, 0x7b},
    {0x0b, 0x42, 0x04, 0xf5, 0x7b},
    {0x05, 0x44, 0x04, 0xb5, 0x7b},
    {0x1a, 0x43, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0xf5, 0x7b},
    {0x8a, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x04, 0xb5, 0x7b},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0xda, 0xb5, 0x8e},
    {0x86, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x04, 0xb5, 0x7b},
    {0x02, 0x44, 0x04, 0xb5, 0x7b},
    {0x07, 0x44, 0x04, 0xb5, 0x7b},
    {0x0d, 0x42, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0xda, 0xb5, 0x8e},
    {0xc4, 0x04, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x04, 0xf5, 0x7b},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x03, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x43, 0xb5, 0xae},
    {0x09, 0x47, 0x03, 0xf5, 0xae},
    {0xda, 0x0a, 0xf5, 0x40, 0x0b},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x43, 0xf5, 0xae},
    {0xc2, 0x01, 0xf5, 0x40, 0x0b},
    {0x18, 0x44, 0x43, 0xf5, 0xae},
    {0x0e, 0x45, 0x43, 0xb5, 0xae},
    {0x1c, 0x44, 0x43, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0xb5, 0x6b},
    {0x1b, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0xb5, 0x6b},
    {0x67, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x45, 0x43, 0xb5, 0xae},
    {0xc9, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0xb5, 0x6b},
    {0x13, 0x44, 0x43, 0xf5, 0xae},
    {0x08, 0x47, 0x03, 0xf5, 0xae},
    {0x77, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x01, 0xf5, 0x40, 0x0b},
    {0x0a, 0x47, 0x03, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0xb5, 0x6b},
    {0x02, 0x43, 0x0a, 0xb5, 0x6b},
    {0x07, 0x43, 0x0a, 0xb5, 0x6b},
    {0x6d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0xb5, 0x7b},
    {0x0b, 0x43, 0x02, 0xf5, 0x7b},
    {0x05, 0x41, 0x02, 0xb5, 0x7b},
    {0x75, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0xf5, 0x7b},
    {0xc7, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0xb5, 0x7b},
    {0x63, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x45, 0x43, 0xb5, 0xae},
    {0x7f, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0xb5, 0x7b},
    {0x02, 0x41, 0x02, 0xb5, 0x7b},
    {0x07, 0x41, 0x02, 0xb5, 0x7b},
    {0x0d, 0x45, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0xb5, 0x6b},
    {0xd8, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0xb5, 0x6b},
    {0x6b, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x45, 0x43, 0xb5, 0xae},
    {0xd4, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0xb5, 0x6b},
    {0x01, 0x45, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0xf5, 0x7b},
    {0xc3, 0x0a, 0xf5, 0x40, 0x0b},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x0a, 0xb5, 0x6b},
    {0x02, 0x42, 0x0a, 0xb5, 0x6b},
    {0x07, 0x42, 0x0a, 0xb5, 0x6b},
    {0x5d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0xb5, 0x8c},
    {0x0b, 0x41, 0x06, 0xf5, 0x8c},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x0c, 0x43, 0x46, 0xb5, 0x8c},
    {0x09, 0x41, 0x06, 0xf5, 0x8c},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x61, 0x02, 0x03, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0xb5, 0x8c},
    {0x7d, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0xb5, 0x8c},
    {0x02, 0x46, 0x06, 0xb5, 0x8c},
    {0x07, 0x46, 0x06, 0xb5, 0x8c},
    {0x6f, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0xb5, 0x8c},
    {0xd0, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0xf5, 0x8c},
    {0x79, 0x02, 0x03, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0xb5, 0x7b},
    {0x0b, 0x42, 0x02, 0xf5, 0x7b},
    {0x05, 0x44, 0x02, 0xb5, 0x7b},
    {0x1a, 0x44, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0xf5, 0x7b},
    {0xcc, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0xb5, 0x7b},
    {0x65, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0xc1, 0x43, 0xb5, 0x0e},
    {0x19, 0x44, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0xb5, 0x8c},
    {0xc5, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0xb5, 0x7b},
    {0x02, 0x44, 0x02, 0xb5, 0x7b},
    {0x07, 0x44, 0x02, 0xb5, 0x7b},
    {0x0d, 0x43, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0xb5, 0x8c},
    {0xc4, 0x02, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0xf5, 0x7b},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x43, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0xb5, 0x9d},
    {0x0b, 0x45, 0x05, 0xf5, 0x9d},
    {0x05, 0x47, 0x05, 0xb5, 0x9d},
    {0x0c, 0x44, 0x45, 0xb5, 0x9d},
    {0x09, 0x45, 0x05, 0xf5, 0x9d},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0xb5, 0x9d},
    {0x14, 0x42, 0x45, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0xf5, 0x9d},
    {0x0e, 0x44, 0x45, 0xb5, 0x9d},
    {0x1c, 0x42, 0x45, 0xf5, 0x9d},
    {0x04, 0x47, 0x05, 0xb5, 0x9d},
    {0x02, 0x47, 0x05, 0xb5, 0x9d},
    {0x07, 0x47, 0x05, 0xb5, 0x9d},
    {0x17, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x45, 0xb5, 0x9d},
    {0xce, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0xf5, 0x9d},
    {0x08, 0x45, 0x05, 0xf5, 0x9d},
    {0x78, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0xb5, 0x7b},
    {0x0b, 0x43, 0x07, 0xf5, 0x7b},
    {0x05, 0x41, 0x07, 0xb5, 0x7b},
    {0x76, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0xf5, 0x7b},
    {0xc8, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0xb5, 0x7b},
    {0x64, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x45, 0xb5, 0x9d},
    {0x40, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0xb5, 0x7b},
    {0x02, 0x41, 0x07, 0xb5, 0x7b},
    {0x07, 0x41, 0x07, 0xb5, 0x7b},
    {0x0d, 0x44, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x45, 0xb5, 0x9d},
    {0xd6, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0xf5, 0x7b},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0xb5, 0x8c},
    {0x0b, 0x44, 0x06, 0xf5, 0x8c},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x0c, 0x42, 0x46, 0xb5, 0x8c},
    {0x09, 0x44, 0x06, 0xf5, 0x8c},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x62, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0xb5, 0x8c},
    {0x7e, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0xb5, 0x8c},
    {0x02, 0x45, 0x06, 0xb5, 0x8c},
    {0x07, 0x45, 0x06, 0xb5, 0x8c},
    {0x70, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0xb5, 0x8c},
    {0xd2, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0xf5, 0x8c},
    {0x7a, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0xb5, 0x7b},
    {0x0b, 0x42, 0x07, 0xf5, 0x7b},
    {0x05, 0x44, 0x07, 0xb5, 0x7b},
    {0x1a, 0x42, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0xf5, 0x7b},
    {0xca, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0xb5, 0x7b},
    {0x66, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0x46, 0xb5, 0x8c},
    {0xc6, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0xb5, 0x7b},
    {0x02, 0x44, 0x07, 0xb5, 0x7b},
    {0x07, 0x44, 0x07, 0xb5, 0x7b},
    {0x0d, 0x42, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0x46, 0xb5, 0x8c},
    {0xc4, 0x07, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0xf5, 0x7b},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xdc, 0xb5, 0x00, 0x0f},
    {0x0b, 0x52, 0xb5, 0x40, 0xff},
    {0x05, 0xdc, 0xb5, 0x00, 0x0f},
    {0x0c, 0x4d, 0xf5, 0x00, 0xee},
    {0x09, 0x52, 0xb5, 0x40, 0xff},
    {0xda, 0x6d, 0xf5, 0x00, 0x0e},
    {0x06, 0xdc, 0xb5, 0x00, 0x0f},
    {0x14, 0x4a, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0xb5, 0x40, 0x0d},
    {0x18, 0x4a, 0xf5, 0x40, 0xee},
    {0x0e, 0x4d, 0xf5, 0x00, 0xee},
    {0x1c, 0x4a, 0xf5, 0x40, 0xee},
    {0x04, 0xdc, 0xb5, 0x00, 0x0f},
    {0x02, 0xdc, 0xb5, 0x00, 0x0f},
    {0x07, 0xdc, 0xb5, 0x00, 0x0f},
    {0x17, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2d, 0xb5, 0x6e},
    {0x1b, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2d, 0xb5, 0x6e},
    {0x67, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x4d, 0xf5, 0x00, 0xee},
    {0xc9, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x2d, 0xb5, 0x6e},
    {0x13, 0x4a, 0xf5, 0x40, 0xee},
    {0x08, 0x52, 0xb5, 0x40, 0xff},
    {0x77, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x52, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x2d, 0xb5, 0x6e},
    {0x02, 0x43, 0x2d, 0xb5, 0x6e},
    {0x07, 0x43, 0x2d, 0xb5, 0x6e},
    {0x6d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x17, 0xb5, 0x7e},
    {0x0b, 0x43, 0x17, 0xf5, 0x7e},
    {0x05, 0x41, 0x17, 0xb5, 0x7e},
    {0x75, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x17, 0xf5, 0x7e},
    {0xc7, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x17, 0xb5, 0x7e},
    {0x63, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x4d, 0xf5, 0x00, 0xee},
    {0x7f, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x17, 0xb5, 0x7e},
    {0x02, 0x41, 0x17, 0xb5, 0x7e},
    {0x07, 0x41, 0x17, 0xb5, 0x7e},
    {0x0d, 0x4d, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x2d, 0xb5, 0x6e},
    {0xd7, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x2d, 0xb5, 0x6e},
    {0x6b, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x4d, 0xf5, 0x00, 0xee},
    {0xd3, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x2d, 0xb5, 0x6e},
    {0x01, 0x4d, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x17, 0xf5, 0x7e},
    {0xc3, 0x6d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x2d, 0xb5, 0x6e},
    {0x02, 0x42, 0x2d, 0xb5, 0x6e},
    {0x07, 0x42, 0x2d, 0xb5, 0x6e},
    {0x5d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0x14, 0xb5, 0x8f},
    {0x0b, 0x41, 0x14, 0xf5, 0x8f},
    {0x05, 0x46, 0x14, 0xb5, 0x8f},
    {0x0c, 0x43, 0x54, 0xb5, 0x8f},
    {0x09, 0x41, 0x14, 0xf5, 0x8f},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x14, 0xb5, 0x8f},
    {0x61, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0x54, 0xb5, 0x8f},
    {0x7d, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0x14, 0xb5, 0x8f},
    {0x02, 0x46, 0x14, 0xb5, 0x8f},
    {0x07, 0x46, 0x14, 0xb5, 0x8f},
    {0x6f, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0x54, 0xb5, 0x8f},
    {0xcf, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0x14, 0xf5, 0x8f},
    {0x79, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0x14, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x17, 0xb5, 0x7e},
    {0x0b, 0x42, 0x17, 0xf5, 0x7e},
    {0x05, 0x44, 0x17, 0xb5, 0x7e},
    {0x1a, 0x4a, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x17, 0xf5, 0x7e},
    {0xcb, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x17, 0xb5, 0x7e},
    {0x65, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4a, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0x54, 0xb5, 0x8f},
    {0xc5, 0x54, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x17, 0xb5, 0x7e},
    {0x02, 0x44, 0x17, 0xb5, 0x7e},
    {0x07, 0x44, 0x17, 0xb5, 0x7e},
    {0x0d, 0x43, 0x54, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4a, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0x54, 0xb5, 0x8f},
    {0xc4, 0x57, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0x54, 0xb5, 0x8f},
    {0x08, 0x42, 0x17, 0xf5, 0x7e},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0xdc, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x0b, 0xb5, 0xaf},
    {0x0b, 0x46, 0x0c, 0xf5, 0x9f},
    {0x05, 0x49, 0x0b, 0xb5, 0xaf},
    {0x0c, 0x41, 0x4c, 0xb5, 0x9f},
    {0x09, 0x46, 0x0c, 0xf5, 0x9f},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0x0b, 0xb5, 0xaf},
    {0x14, 0x43, 0x4c, 0xf5, 0x9f},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0x4c, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4c, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4c, 0xf5, 0x9f},
    {0x04, 0x49, 0x0b, 0xb5, 0xaf},
    {0x02, 0x49, 0x0b, 0xb5, 0xaf},
    {0x07, 0x49, 0x0b, 0xb5, 0xaf},
    {0x17, 0x43, 0x4c, 0xf5, 0x9f},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0x4c, 0xf5, 0x9f},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0x4c, 0xb5, 0x9f},
    {0xcd, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0x4c, 0xf5, 0x9f},
    {0x08, 0x46, 0x0c, 0xf5, 0x9f},
    {0x78, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0x0c, 0xf5, 0x9f},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0xc8, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0x4c, 0xb5, 0x9f},
    {0x40, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0x4c, 0xb5, 0x9f},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0xd9, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0x4c, 0xb5, 0x9f},
    {0xd5, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0x4c, 0xb5, 0x9f},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0x14, 0xb5, 0x8f},
    {0x0b, 0x44, 0x14, 0xf5, 0x8f},
    {0x05, 0x45, 0x14, 0xb5, 0x8f},
    {0x0c, 0x42, 0x54, 0xb5, 0x8f},
    {0x09, 0x44, 0x14, 0xf5, 0x8f},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x14, 0xb5, 0x8f},
    {0x62, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0xda, 0x43, 0xf5, 0x0f},
    {0x72, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0x54, 0xb5, 0x8f},
    {0x7e, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0x14, 0xb5, 0x8f},
    {0x02, 0x45, 0x14, 0xb5, 0x8f},
    {0x07, 0x45, 0x14, 0xb5, 0x8f},
    {0x70, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0x54, 0xb5, 0x8f},
    {0xd1, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0x14, 0xf5, 0x8f},
    {0x7a, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0xda, 0x43, 0xf5, 0x0f},
    {0x0a, 0x44, 0x14, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0x4c, 0xf5, 0x9f},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0x4c, 0xf5, 0x9f},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0xca, 0x54, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0x4c, 0xf5, 0x9f},
    {0x0f, 0x42, 0x54, 0xb5, 0x8f},
    {0xc6, 0x54, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0x54, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0x4c, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0x4c, 0xf5, 0x9f},
    {0x11, 0x42, 0x54, 0xb5, 0x8f},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0x54, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xf4, 0x4c, 0xf5, 0x40, 0x0f},
    {0x03, 0x4a, 0x03, 0xb5, 0xbf},
    {0x0b, 0x49, 0x03, 0xf5, 0xbf},
    {0x05, 0x4a, 0x03, 0xb5, 0xbf},
    {0x0c, 0x46, 0x4b, 0xb5, 0xaf},
    {0x09, 0x49, 0x03, 0xf5, 0xbf},
    {0xda, 0x75, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0x03, 0xb5, 0xbf},
    {0x14, 0x41, 0x4b, 0xf5, 0xaf},
    {0xc2, 0x61, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x4b, 0xf5, 0xaf},
    {0x0e, 0x46, 0x4b, 0xb5, 0xaf},
    {0x1c, 0x41, 0x4b, 0xf5, 0xaf},
    {0x04, 0x4a, 0x03, 0xb5, 0xbf},
    {0x02, 0x4a, 0x03, 0xb5, 0xbf},
    {0x07, 0x4a, 0x03, 0xb5, 0xbf},
    {0x17, 0x41, 0x4b, 0xf5, 0xaf},
    {0x03, 0x43, 0x35, 0xb5, 0x6e},
    {0x1b, 0x41, 0x4b, 0xf5, 0xaf},
    {0x05, 0x43, 0x35, 0xb5, 0x6e},
    {0x67, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x46, 0x4b, 0xb5, 0xaf},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x35, 0xb5, 0x6e},
    {0x13, 0x41, 0x4b, 0xf5, 0xaf},
    {0x08, 0x49, 0x03, 0xf5, 0xbf},
    {0x77, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x61, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0x03, 0xf5, 0xbf},
    {0x04, 0x43, 0x35, 0xb5, 0x6e},
    {0x02, 0x43, 0x35, 0xb5, 0x6e},
    {0x07, 0x43, 0x35, 0xb5, 0x6e},
    {0x6d, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1b, 0xf5, 0x7e},
    {0x05, 0x41, 0x1b, 0xb5, 0x7e},
    {0x75, 0x03, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x1b, 0xf5, 0x7e},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x1b, 0xb5, 0x7e},
    {0x63, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x4b, 0xf5, 0x0f},
    {0x73, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x46, 0x4b, 0xb5, 0xaf},
    {0x7f, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x1b, 0xb5, 0x7e},
    {0x02, 0x41, 0x1b, 0xb5, 0x7e},
    {0x07, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x46, 0x4b, 0xb5, 0xaf},
    {0x03, 0x42, 0x35, 0xb5, 0x6e},
    {0xd8, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x35, 0xb5, 0x6e},
    {0x6b, 0x03, 0x0b, 0xb5, 0xaf},
    {0x11, 0x46, 0x4b, 0xb5, 0xaf},
    {0xd4, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x35, 0xb5, 0x6e},
    {0x01, 0x46, 0x4b, 0xb5, 0xaf},
    {0x08, 0x43, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x75, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x4b, 0xf5, 0x0f},
    {0x0a, 0x43, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x35, 0xb5, 0x6e},
    {0x02, 0x42, 0x35, 0xb5, 0x6e},
    {0x07, 0x42, 0x35, 0xb5, 0x6e},
    {0x5d, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x71, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0xd0, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0x0b, 0xb5, 0xaf},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x71, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0x4b, 0xf5, 0xaf},
    {0x03, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1b, 0xf5, 0x7e},
    {0x05, 0x44, 0x1b, 0xb5, 0x7e},
    {0x1a, 0x41, 0x4b, 0xf5, 0xaf},
    {0x09, 0x42, 0x1b, 0xf5, 0x7e},
    {0xcc, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x1b, 0xb5, 0x7e},
    {0x65, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0x4b, 0xf5, 0xaf},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x1b, 0xb5, 0x7e},
    {0x02, 0x44, 0x1b, 0xb5, 0x7e},
    {0x07, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0x4b, 0xf5, 0xaf},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0x4b, 0xf5, 0xaf},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x5b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0xdd, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x0c, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0c, 0xf5, 0x9f},
    {0x05, 0x47, 0x0c, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4c, 0xb5, 0x9f},
    {0x09, 0x45, 0x0c, 0xf5, 0x9f},
    {0x9a, 0x87, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0c, 0xb5, 0x9f},
    {0x14, 0x42, 0x4c, 0xf5, 0x9f},
    {0xc2, 0x7d, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0x4c, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4c, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4c, 0xf5, 0x9f},
    {0x04, 0x47, 0x0c, 0xb5, 0x9f},
    {0x02, 0x47, 0x0c, 0xb5, 0x9f},
    {0x07, 0x47, 0x0c, 0xb5, 0x9f},
    {0x17, 0x42, 0x4c, 0xf5, 0x9f},
    {0x03, 0x43, 0x87, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4c, 0xf5, 0x9f},
    {0x05, 0x43, 0x87, 0xb5, 0x6e},
    {0x68, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x44, 0x4c, 0xb5, 0x9f},
    {0xce, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x87, 0xb5, 0x6e},
    {0x13, 0x42, 0x4c, 0xf5, 0x9f},
    {0x08, 0x45, 0x0c, 0xf5, 0x9f},
    {0x78, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x7d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0x0c, 0xf5, 0x9f},
    {0x04, 0x43, 0x87, 0xb5, 0x6e},
    {0x02, 0x43, 0x87, 0xb5, 0x6e},
    {0x07, 0x43, 0x87, 0xb5, 0x6e},
    {0x6e, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x44, 0x4c, 0xb5, 0x9f},
    {0x40, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0x4c, 0xb5, 0x9f},
    {0x03, 0x42, 0x87, 0xb5, 0x6e},
    {0xdb, 0x4c, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x87, 0xb5, 0x6e},
    {0x6c, 0x03, 0x0b, 0xb5, 0xaf},
    {0x11, 0x44, 0x4c, 0xb5, 0x9f},
    {0xd6, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x87, 0xb5, 0x6e},
    {0x01, 0x44, 0x4c, 0xb5, 0x9f},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x87, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x87, 0xb5, 0x6e},
    {0x02, 0x42, 0x87, 0xb5, 0x6e},
    {0x07, 0x42, 0x87, 0xb5, 0x6e},
    {0x5e, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0x0b, 0xb5, 0xaf},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0x0b, 0xb5, 0xaf},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0xd2, 0x4c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0x0b, 0xb5, 0xaf},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0x4c, 0xf5, 0x9f},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0x4c, 0xf5, 0x9f},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0x4c, 0xf5, 0x9f},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0x4c, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0x4c, 0xf5, 0x9f},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xf4, 0x4b, 0xf5, 0x40, 0x0f},
    {0x03, 0x57, 0xb5, 0x00, 0xff},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0x57, 0xb5, 0x00, 0xff},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x63, 0xf5, 0x00, 0x0e},
    {0x06, 0x57, 0xb5, 0x00, 0xff},
    {0x14, 0x46, 0x43, 0xf5, 0xbf},
    {0xc2, 0x6f, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0x43, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x43, 0xf5, 0xbf},
    {0x04, 0x57, 0xb5, 0x00, 0xff},
    {0x02, 0x57, 0xb5, 0x00, 0xff},
    {0x07, 0x57, 0xb5, 0x00, 0xff},
    {0x17, 0x46, 0x43, 0xf5, 0xbf},
    {0x03, 0x43, 0x23, 0xb5, 0x6e},
    {0x1b, 0x46, 0x43, 0xf5, 0xbf},
    {0x05, 0x43, 0x23, 0xb5, 0x6e},
    {0x67, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0xc9, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x23, 0xb5, 0x6e},
    {0x13, 0x46, 0x43, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x03, 0xb5, 0xbf},
    {0xc1, 0x6f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x23, 0xb5, 0x6e},
    {0x02, 0x43, 0x23, 0xb5, 0x6e},
    {0x07, 0x43, 0x23, 0xb5, 0x6e},
    {0x6d, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x27, 0xb5, 0x7f},
    {0x0b, 0x43, 0x27, 0xf5, 0x7f},
    {0x05, 0x41, 0x27, 0xb5, 0x7f},
    {0x75, 0x01, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x27, 0xf5, 0x7f},
    {0xc7, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x27, 0xb5, 0x7f},
    {0x63, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x43, 0xbf},
    {0x73, 0x01, 0x03, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x27, 0xb5, 0x7f},
    {0x02, 0x41, 0x27, 0xb5, 0x7f},
    {0x07, 0x41, 0x27, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x23, 0xb5, 0x6e},
    {0xd7, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x23, 0xb5, 0x6e},
    {0x6b, 0x01, 0x03, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x23, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x27, 0xf5, 0x7f},
    {0xc3, 0x63, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x43, 0xbf},
    {0x0a, 0x43, 0x27, 0xf5, 0x7f},
    {0x04, 0x42, 0x23, 0xb5, 0x6e},
    {0x02, 0x42, 0x23, 0xb5, 0x6e},
    {0x07, 0x42, 0x23, 0xb5, 0x6e},
    {0x5d, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x46, 0x18, 0xb5, 0x8f},
    {0x0b, 0x41, 0x18, 0xf5, 0x8f},
    {0x05, 0x46, 0x18, 0xb5, 0x8f},
    {0x0c, 0x43, 0x58, 0xb5, 0x8f},
    {0x09, 0x41, 0x18, 0xf5, 0x8f},
    {0xda, 0xc2, 0x43, 0xf5, 0x0f},
    {0x06, 0x46, 0x18, 0xb5, 0x8f},
    {0x61, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x7b, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0x03, 0xb5, 0xbf},
    {0x0e, 0x43, 0x58, 0xb5, 0x8f},
    {0x7d, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x46, 0x18, 0xb5, 0x8f},
    {0x02, 0x46, 0x18, 0xb5, 0x8f},
    {0x07, 0x46, 0x18, 0xb5, 0x8f},
    {0x6f, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x03, 0x6f},
    {0x7b, 0x01, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x03, 0x6f},
    {0x69, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x43, 0x58, 0xb5, 0x8f},
    {0xcf, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0x03, 0x6f},
    {0x5f, 0x01, 0x03, 0xb5, 0xbf},
    {0x08, 0x41, 0x18, 0xf5, 0x8f},
    {0x79, 0x01, 0x03, 0xb5, 0xbf},
    {0xc1, 0x7b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x18, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0x03, 0x6f},
    {0x02, 0x43, 0x82, 0x03, 0x6f},
    {0x07, 0x43, 0x82, 0x03, 0x6f},
    {0x16, 0x46, 0x43, 0xf5, 0xbf},
    {0x03, 0x44, 0x27, 0xb5, 0x7f},
    {0x0b, 0x42, 0x27, 0xf5, 0x7f},
    {0x05, 0x44, 0x27, 0xb5, 0x7f},
    {0x1a, 0x46, 0x43, 0xf5, 0xbf},
    {0x09, 0x42, 0x27, 0xf5, 0x7f},
    {0xcb, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x27, 0xb5, 0x7f},
    {0x65, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x43, 0xbf},
    {0x19, 0x46, 0x43, 0xf5, 0xbf},
    {0x0f, 0x43, 0x58, 0xb5, 0x8f},
    {0xc5, 0x58, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x27, 0xb5, 0x7f},
    {0x02, 0x44, 0x27, 0xb5, 0x7f},
    {0x07, 0x44, 0x27, 0xb5, 0x7f},
    {0x0d, 0x43, 0x58, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0x03, 0x6f},
    {0x12, 0x46, 0x43, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x03, 0x6f},
    {0x15, 0x46, 0x43, 0xf5, 0xbf},
    {0x11, 0x43, 0x58, 0xb5, 0x8f},
    {0xc4, 0x67, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0x03, 0x6f},
    {0x01, 0x43, 0x58, 0xb5, 0x8f},
    {0x08, 0x42, 0x27, 0xf5, 0x7f},
    {0xc3, 0xc2, 0x43, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x43, 0xbf},
    {0x0a, 0x42, 0x27, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0x03, 0x6f},
    {0x02, 0x42, 0x82, 0x03, 0x6f},
    {0x07, 0x42, 0x82, 0x03, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x0b, 0xb5, 0xaf},
    {0x0b, 0x46, 0x09, 0xf5, 0x9e},
    {0x05, 0x48, 0x0b, 0xb5, 0xaf},
    {0x0c, 0x41, 0x49, 0xb5, 0x9e},
    {0x09, 0x46, 0x09, 0xf5, 0x9e},
    {0xda, 0x73, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x0b, 0xb5, 0xaf},
    {0x14, 0x43, 0x49, 0xf5, 0x9e},
    {0xc2, 0x69, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x49, 0xf5, 0x9e},
    {0x0e, 0x41, 0x49, 0xb5, 0x9e},
    {0x1c, 0x43, 0x49, 0xf5, 0x9e},
    {0x04, 0x48, 0x0b, 0xb5, 0xaf},
    {0x02, 0x48, 0x0b, 0xb5, 0xaf},
    {0x07, 0x48, 0x0b, 0xb5, 0xaf},
    {0x17, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x33, 0xb5, 0x6e},
    {0x1b, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x33, 0xb5, 0x6e},
    {0x68, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x41, 0x49, 0xb5, 0x9e},
    {0xcd, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x33, 0xb5, 0x6e},
    {0x13, 0x43, 0x49, 0xf5, 0x9e},
    {0x08, 0x46, 0x09, 0xf5, 0x9e},
    {0x78, 0x01, 0x03, 0xb5, 0xbf},
    {0xc1, 0x69, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x33, 0xb5, 0x6e},
    {0x02, 0x43, 0x33, 0xb5, 0x6e},
    {0x07, 0x43, 0x33, 0xb5, 0x6e},
    {0x6e, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x10, 0xb5, 0x7d},
    {0x0b, 0x43, 0x10, 0xf5, 0x7d},
    {0x05, 0x41, 0x10, 0xb5, 0x7d},
    {0x76, 0x01, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x10, 0xf5, 0x7d},
    {0xc8, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x10, 0xb5, 0x7d},
    {0x64, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0x03, 0xb5, 0xbf},
    {0x0f, 0x41, 0x49, 0xb5, 0x9e},
    {0x40, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x10, 0xb5, 0x7d},
    {0x02, 0x41, 0x10, 0xb5, 0x7d},
    {0x07, 0x41, 0x10, 0xb5, 0x7d},
    {0x0d, 0x41, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x33, 0xb5, 0x6e},
    {0xd9, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x33, 0xb5, 0x6e},
    {0x6c, 0x01, 0x03, 0xb5, 0xbf},
    {0x11, 0x41, 0x49, 0xb5, 0x9e},
    {0xd5, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x33, 0xb5, 0x6e},
    {0x01, 0x41, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x10, 0xf5, 0x7d},
    {0xc3, 0x73, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x33, 0xb5, 0x6e},
    {0x02, 0x42, 0x33, 0xb5, 0x6e},
    {0x07, 0x42, 0x33, 0xb5, 0x6e},
    {0x5e, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x45, 0x18, 0xb5, 0x8f},
    {0x0b, 0x44, 0x18, 0xf5, 0x8f},
    {0x05, 0x45, 0x18, 0xb5, 0x8f},
    {0x0c, 0x42, 0x58, 0xb5, 0x8f},
    {0x09, 0x44, 0x18, 0xf5, 0x8f},
    {0xda, 0x4f, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0x18, 0xb5, 0x8f},
    {0x62, 0x01, 0x03, 0xb5, 0xbf},
    {0x82, 0x8f, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x03, 0xb5, 0xbf},
    {0x0e, 0x42, 0x58, 0xb5, 0x8f},
    {0x7e, 0x01, 0x03, 0xb5, 0xbf},
    {0x04, 0x45, 0x18, 0xb5, 0x8f},
    {0x02, 0x45, 0x18, 0xb5, 0x8f},
    {0x07, 0x45, 0x18, 0xb5, 0x8f},
    {0x70, 0x01, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0xb5, 0x6c},
    {0x7c, 0x01, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0xb5, 0x6c},
    {0x6a, 0x01, 0x03, 0xb5, 0xbf},
    {0x10, 0x42, 0x58, 0xb5, 0x8f},
    {0xd1, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0f, 0xb5, 0x6c},
    {0x60, 0x01, 0x03, 0xb5, 0xbf},
    {0x08, 0x44, 0x18, 0xf5, 0x8f},
    {0x7a, 0x01, 0x03, 0xb5, 0xbf},
    {0x81, 0x8f, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x18, 0xf5, 0x8f},
    {0x04, 0x43, 0x0f, 0xb5, 0x6c},
    {0x02, 0x43, 0x0f, 0xb5, 0x6c},
    {0x07, 0x43, 0x0f, 0xb5, 0x6c},
    {0x16, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x10, 0xb5, 0x7d},
    {0x0b, 0x42, 0x10, 0xf5, 0x7d},
    {0x05, 0x44, 0x10, 0xb5, 0x7d},
    {0x1a, 0x43, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x10, 0xf5, 0x7d},
    {0xca, 0x58, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x10, 0xb5, 0x7d},
    {0x66, 0x01, 0x03, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x43, 0xbf},
    {0x19, 0x43, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0x58, 0xb5, 0x8f},
    {0xc6, 0x58, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x10, 0xb5, 0x7d},
    {0x02, 0x44, 0x10, 0xb5, 0x7d},
    {0x07, 0x44, 0x10, 0xb5, 0x7d},
    {0x0d, 0x42, 0x58, 0xb5, 0x8f},
    {0x03, 0x42, 0x0f, 0xb5, 0x6c},
    {0x12, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x0f, 0xb5, 0x6c},
    {0x15, 0x43, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0x58, 0xb5, 0x8f},
    {0xc4, 0x50, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0xb5, 0x6c},
    {0x01, 0x42, 0x58, 0xb5, 0x8f},
    {0x08, 0x42, 0x10, 0xf5, 0x7d},
    {0xc3, 0x4f, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0x43, 0xbf},
    {0x0a, 0x42, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0xb5, 0x6c},
    {0x02, 0x42, 0x0f, 0xb5, 0x6c},
    {0x07, 0x42, 0x0f, 0xb5, 0x6c},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0x54, 0xb5, 0x00, 0xff},
    {0x0b, 0x47, 0x0b, 0xf5, 0xaf},
    {0x05, 0x54, 0xb5, 0x00, 0xff},
    {0x0c, 0x45, 0x4b, 0xb5, 0xaf},
    {0x09, 0x47, 0x0b, 0xf5, 0xaf},
    {0xda, 0x7f, 0xf5, 0x00, 0x0e},
    {0x06, 0x54, 0xb5, 0x00, 0xff},
    {0x14, 0x44, 0x4b, 0xf5, 0xaf},
    {0xc2, 0x5f, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0x4b, 0xf5, 0xaf},
    {0x0e, 0x45, 0x4b, 0xb5, 0xaf},
    {0x1c, 0x44, 0x4b, 0xf5, 0xaf},
    {0x04, 0x54, 0xb5, 0x00, 0xff},
    {0x02, 0x54, 0xb5, 0x00, 0xff},
    {0x07, 0x54, 0xb5, 0x00, 0xff},
    {0x17, 0x44, 0x4b, 0xf5, 0xaf},
    {0x03, 0x43, 0x3f, 0xb5, 0x6e},
    {0x1b, 0x44, 0x4b, 0xf5, 0xaf},
    {0x05, 0x43, 0x3f, 0xb5, 0x6e},
    {0x67, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x45, 0x4b, 0xb5, 0xaf},
    {0xc9, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x3f, 0xb5, 0x6e},
    {0x13, 0x44, 0x4b, 0xf5, 0xaf},
    {0x08, 0x47, 0x0b, 0xf5, 0xaf},
    {0x77, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x5f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0x0b, 0xf5, 0xaf},
    {0x04, 0x43, 0x3f, 0xb5, 0x6e},
    {0x02, 0x43, 0x3f, 0xb5, 0x6e},
    {0x07, 0x43, 0x3f, 0xb5, 0x6e},
    {0x6d, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x89, 0xb5, 0x7f},
    {0x0b, 0x43, 0x89, 0xf5, 0x7f},
    {0x05, 0x41, 0x89, 0xb5, 0x7f},
    {0x75, 0x02, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x89, 0xf5, 0x7f},
    {0xc7, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x89, 0xb5, 0x7f},
    {0x63, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x45, 0x4b, 0xb5, 0xaf},
    {0x7f, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x89, 0xb5, 0x7f},
    {0x02, 0x41, 0x89, 0xb5, 0x7f},
    {0x07, 0x41, 0x89, 0xb5, 0x7f},
    {0x0d, 0x45, 0x4b, 0xb5, 0xaf},
    {0x03, 0x42, 0x3f, 0xb5, 0x6e},
    {0xd8, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3f, 0xb5, 0x6e},
    {0x6b, 0x02, 0x0b, 0xb5, 0xaf},
    {0x11, 0x45, 0x4b, 0xb5, 0xaf},
    {0xd4, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3f, 0xb5, 0x6e},
    {0x01, 0x45, 0x4b, 0xb5, 0xaf},
    {0x08, 0x43, 0x89, 0xf5, 0x7f},
    {0xc3, 0x7f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x89, 0xf5, 0x7f},
    {0x04, 0x42, 0x3f, 0xb5, 0x6e},
    {0x02, 0x42, 0x3f, 0xb5, 0x6e},
    {0x07, 0x42, 0x3f, 0xb5, 0x6e},
    {0x5d, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0e, 0xf5, 0x8e},
    {0x05, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4e, 0xb5, 0x8e},
    {0x09, 0x41, 0x0e, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0e, 0xb5, 0x8e},
    {0x61, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x79, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x43, 0x4e, 0xb5, 0x8e},
    {0x7d, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x46, 0x0e, 0xb5, 0x8e},
    {0x02, 0x46, 0x0e, 0xb5, 0x8e},
    {0x07, 0x46, 0x0e, 0xb5, 0x8e},
    {0x6f, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x43, 0x4e, 0xb5, 0x8e},
    {0xd0, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0x0b, 0xb5, 0xaf},
    {0x08, 0x41, 0x0e, 0xf5, 0x8e},
    {0x79, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x79, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0x4b, 0xf5, 0xaf},
    {0x03, 0x44, 0x89, 0xb5, 0x7f},
    {0x0b, 0x42, 0x89, 0xf5, 0x7f},
    {0x05, 0x44, 0x89, 0xb5, 0x7f},
    {0x1a, 0x44, 0x4b, 0xf5, 0xaf},
    {0x09, 0x42, 0x89, 0xf5, 0x7f},
    {0xcc, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x89, 0xb5, 0x7f},
    {0x65, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x4b, 0xf5, 0x0f},
    {0x19, 0x44, 0x4b, 0xf5, 0xaf},
    {0x0f, 0x43, 0x4e, 0xb5, 0x8e},
    {0xc5, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x89, 0xb5, 0x7f},
    {0x02, 0x44, 0x89, 0xb5, 0x7f},
    {0x07, 0x44, 0x89, 0xb5, 0x7f},
    {0x0d, 0x43, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0x4b, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0x4b, 0xf5, 0xaf},
    {0x11, 0x43, 0x4e, 0xb5, 0x8e},
    {0x84, 0x89, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0x89, 0xf5, 0x7f},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0xc1, 0xc1, 0x4b, 0xf5, 0x0f},
    {0x0a, 0x42, 0x89, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x09, 0xb5, 0x9e},
    {0x0b, 0x45, 0x09, 0xf5, 0x9e},
    {0x05, 0x47, 0x09, 0xb5, 0x9e},
    {0x0c, 0x44, 0x49, 0xb5, 0x9e},
    {0x09, 0x45, 0x09, 0xf5, 0x9e},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x09, 0xb5, 0x9e},
    {0x14, 0x42, 0x49, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x49, 0xf5, 0x9e},
    {0x0e, 0x44, 0x49, 0xb5, 0x9e},
    {0x1c, 0x42, 0x49, 0xf5, 0x9e},
    {0x04, 0x47, 0x09, 0xb5, 0x9e},
    {0x02, 0x47, 0x09, 0xb5, 0x9e},
    {0x07, 0x47, 0x09, 0xb5, 0x9e},
    {0x17, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x44, 0x49, 0xb5, 0x9e},
    {0xce, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x49, 0xf5, 0x9e},
    {0x08, 0x45, 0x09, 0xf5, 0x9e},
    {0x78, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0x0b, 0xb5, 0xaf},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x04, 0x03, 0x43, 0xbf},
    {0x74, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0f, 0x44, 0x49, 0xb5, 0x9e},
    {0x40, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0x0b, 0xb5, 0xaf},
    {0x11, 0x44, 0x49, 0xb5, 0x9e},
    {0xd6, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x43, 0xbf},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0e, 0xf5, 0x8e},
    {0x05, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4e, 0xb5, 0x8e},
    {0x09, 0x44, 0x0e, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0e, 0xb5, 0x8e},
    {0x62, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x02, 0x03, 0x43, 0xbf},
    {0x72, 0x02, 0x0b, 0xb5, 0xaf},
    {0x0e, 0x42, 0x4e, 0xb5, 0x8e},
    {0x7e, 0x02, 0x0b, 0xb5, 0xaf},
    {0x04, 0x45, 0x0e, 0xb5, 0x8e},
    {0x02, 0x45, 0x0e, 0xb5, 0x8e},
    {0x07, 0x45, 0x0e, 0xb5, 0x8e},
    {0x70, 0x02, 0x0b, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0x0b, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0x0b, 0xb5, 0xaf},
    {0x10, 0x42, 0x4e, 0xb5, 0x8e},
    {0xd2, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0x0b, 0xb5, 0xaf},
    {0x08, 0x44, 0x0e, 0xf5, 0x8e},
    {0x7a, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc1, 0x02, 0x03, 0x43, 0xbf},
    {0x0a, 0x44, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0x0b, 0xb5, 0xaf},
    {0xc2, 0x07, 0x03, 0x43, 0xbf},
    {0x19, 0x42, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc6, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x43, 0xbf},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xf4, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x59, 0xb5, 0x00, 0xff},
    {0x0b, 0x51, 0xb5, 0x40, 0xff},
    {0x05, 0x59, 0xb5, 0x00, 0xff},
    {0x0c, 0x4f, 0xf5, 0x00, 0xff},
    {0x09, 0x51, 0xb5, 0x40, 0xff},
    {0xda, 0x4d, 0xb5, 0x00, 0x0c},
    {0x06, 0x59, 0xb5, 0x00, 0xff},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0xb5, 0x00, 0x0c},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4f, 0xf5, 0x00, 0xff},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0x59, 0xb5, 0x00, 0xff},
    {0x02, 0x59, 0xb5, 0x00, 0xff},
    {0x07, 0x59, 0xb5, 0x00, 0xff},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0xb5, 0x6c},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0xb5, 0x6c},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4f, 0xf5, 0x00, 0xff},
    {0xc9, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0d, 0xb5, 0x6c},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x51, 0xb5, 0x40, 0xff},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0xb5, 0x00, 0x0c},
    {0x0a, 0x51, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x0d, 0xb5, 0x6c},
    {0x02, 0x43, 0x0d, 0xb5, 0x6c},
    {0x07, 0x43, 0x0d, 0xb5, 0x6c},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x13, 0xb5, 0x7e},
    {0x0b, 0x43, 0x13, 0xf5, 0x7e},
    {0x05, 0x41, 0x13, 0xb5, 0x7e},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x13, 0xf5, 0x7e},
    {0xc7, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x13, 0xb5, 0x7e},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4f, 0xf5, 0x00, 0xff},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x13, 0xb5, 0x7e},
    {0x02, 0x41, 0x13, 0xb5, 0x7e},
    {0x07, 0x41, 0x13, 0xb5, 0x7e},
    {0x0d, 0x4f, 0xf5, 0x00, 0xff},
    {0x03, 0x42, 0x0d, 0xb5, 0x6c},
    {0x97, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x0d, 0xb5, 0x6c},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4f, 0xf5, 0x00, 0xff},
    {0x93, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x0d, 0xb5, 0x6c},
    {0x01, 0x4f, 0xf5, 0x00, 0xff},
    {0x08, 0x43, 0x13, 0xf5, 0x7e},
    {0xc3, 0x4d, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x0d, 0xb5, 0x6c},
    {0x02, 0x42, 0x0d, 0xb5, 0x6c},
    {0x07, 0x42, 0x0d, 0xb5, 0x6c},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x1c, 0xb5, 0x8f},
    {0x0b, 0x41, 0x1c, 0xf5, 0x8f},
    {0x05, 0x46, 0x1c, 0xb5, 0x8f},
    {0x0c, 0x43, 0x5c, 0xb5, 0x8f},
    {0x09, 0x41, 0x1c, 0xf5, 0x8f},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x1c, 0xb5, 0x8f},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x5c, 0xb5, 0x8f},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x1c, 0xb5, 0x8f},
    {0x02, 0x46, 0x1c, 0xb5, 0x8f},
    {0x07, 0x46, 0x1c, 0xb5, 0x8f},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x5c, 0xb5, 0x8f},
    {0x8f, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x1c, 0xf5, 0x8f},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x1c, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x13, 0xb5, 0x7e},
    {0x0b, 0x42, 0x13, 0xf5, 0x7e},
    {0x05, 0x44, 0x13, 0xb5, 0x7e},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x13, 0xf5, 0x7e},
    {0x8b, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x13, 0xb5, 0x7e},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x5c, 0xb5, 0x8f},
    {0xc5, 0x5c, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x13, 0xb5, 0x7e},
    {0x02, 0x44, 0x13, 0xb5, 0x7e},
    {0x07, 0x44, 0x13, 0xb5, 0x7e},
    {0x0d, 0x43, 0x5c, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x5c, 0xb5, 0x8f},
    {0xc4, 0x53, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x5c, 0xb5, 0x8f},
    {0x08, 0x42, 0x13, 0xf5, 0x7e},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0x9a, 0xf5, 0x9f},
    {0x05, 0x49, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0xda, 0xb5, 0x9f},
    {0x09, 0x46, 0x9a, 0xf5, 0x9f},
    {0x9a, 0x97, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0xda, 0xf5, 0x9f},
    {0xc2, 0x5a, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0xda, 0xf5, 0x9f},
    {0x0e, 0x41, 0xda, 0xb5, 0x9f},
    {0x1c, 0x43, 0xda, 0xf5, 0x9f},
    {0x04, 0x49, 0x05, 0xb5, 0xae},
    {0x02, 0x49, 0x05, 0xb5, 0xae},
    {0x07, 0x49, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0xda, 0xf5, 0x9f},
    {0x03, 0x43, 0x97, 0xb5, 0x6f},
    {0x1b, 0x43, 0xda, 0xf5, 0x9f},
    {0x05, 0x43, 0x97, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xda, 0xb5, 0x9f},
    {0x8d, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x97, 0xb5, 0x6f},
    {0x13, 0x43, 0xda, 0xf5, 0x9f},
    {0x08, 0x46, 0x9a, 0xf5, 0x9f},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0x9a, 0xf5, 0x9f},
    {0x04, 0x43, 0x97, 0xb5, 0x6f},
    {0x02, 0x43, 0x97, 0xb5, 0x6f},
    {0x07, 0x43, 0x97, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0xb5, 0x7c},
    {0x0b, 0x43, 0x08, 0xf5, 0x7c},
    {0x05, 0x41, 0x08, 0xb5, 0x7c},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0xf5, 0x7c},
    {0xc8, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x08, 0xb5, 0x7c},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xda, 0xb5, 0x9f},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0xb5, 0x7c},
    {0x02, 0x41, 0x08, 0xb5, 0x7c},
    {0x07, 0x41, 0x08, 0xb5, 0x7c},
    {0x0d, 0x41, 0xda, 0xb5, 0x9f},
    {0x03, 0x42, 0x97, 0xb5, 0x6f},
    {0x99, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x97, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xda, 0xb5, 0x9f},
    {0x95, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x97, 0xb5, 0x6f},
    {0x01, 0x41, 0xda, 0xb5, 0x9f},
    {0x08, 0x43, 0x08, 0xf5, 0x7c},
    {0x83, 0x97, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x97, 0xb5, 0x6f},
    {0x02, 0x42, 0x97, 0xb5, 0x6f},
    {0x07, 0x42, 0x97, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x1c, 0xb5, 0x8f},
    {0x0b, 0x44, 0x1c, 0xf5, 0x8f},
    {0x05, 0x45, 0x1c, 0xb5, 0x8f},
    {0x0c, 0x42, 0x5c, 0xb5, 0x8f},
    {0x09, 0x44, 0x1c, 0xf5, 0x8f},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x1c, 0xb5, 0x8f},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8b, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x5c, 0xb5, 0x8f},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x1c, 0xb5, 0x8f},
    {0x02, 0x45, 0x1c, 0xb5, 0x8f},
    {0x07, 0x45, 0x1c, 0xb5, 0x8f},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x5c, 0xb5, 0x8f},
    {0x91, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x1c, 0xf5, 0x8f},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x1c, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xda, 0xf5, 0x9f},
    {0x03, 0x44, 0x08, 0xb5, 0x7c},
    {0x0b, 0x42, 0x08, 0xf5, 0x7c},
    {0x05, 0x44, 0x08, 0xb5, 0x7c},
    {0x1a, 0x43, 0xda, 0xf5, 0x9f},
    {0x09, 0x42, 0x08, 0xf5, 0x7c},
    {0xca, 0x5c, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x08, 0xb5, 0x7c},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xda, 0xf5, 0x9f},
    {0x0f, 0x42, 0x5c, 0xb5, 0x8f},
    {0xc6, 0x5c, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x08, 0xb5, 0x7c},
    {0x02, 0x44, 0x08, 0xb5, 0x7c},
    {0x07, 0x44, 0x08, 0xb5, 0x7c},
    {0x0d, 0x42, 0x5c, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xda, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xda, 0xf5, 0x9f},
    {0x11, 0x42, 0x5c, 0xb5, 0x8f},
    {0xc4, 0x48, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x5c, 0xb5, 0x8f},
    {0x08, 0x42, 0x08, 0xf5, 0x7c},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0x9a, 0xb5, 0x00, 0x0f},
    {0x03, 0x4b, 0x03, 0xb5, 0xbf},
    {0x0b, 0x48, 0x03, 0xf5, 0xbf},
    {0x05, 0x4b, 0x03, 0xb5, 0xbf},
    {0x0c, 0x46, 0x45, 0xb5, 0xae},
    {0x09, 0x48, 0x03, 0xf5, 0xbf},
    {0xda, 0x6b, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0x03, 0xb5, 0xbf},
    {0x14, 0x41, 0x45, 0xf5, 0xae},
    {0xc2, 0x65, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x45, 0xf5, 0xae},
    {0x0e, 0x46, 0x45, 0xb5, 0xae},
    {0x1c, 0x41, 0x45, 0xf5, 0xae},
    {0x04, 0x4b, 0x03, 0xb5, 0xbf},
    {0x02, 0x4b, 0x03, 0xb5, 0xbf},
    {0x07, 0x4b, 0x03, 0xb5, 0xbf},
    {0x17, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x2b, 0xb5, 0x6e},
    {0x1b, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x2b, 0xb5, 0x6e},
    {0x67, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x46, 0x45, 0xb5, 0xae},
    {0xc9, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x2b, 0xb5, 0x6e},
    {0x13, 0x41, 0x45, 0xf5, 0xae},
    {0x08, 0x48, 0x03, 0xf5, 0xbf},
    {0x77, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x65, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0x03, 0xf5, 0xbf},
    {0x04, 0x43, 0x2b, 0xb5, 0x6e},
    {0x02, 0x43, 0x2b, 0xb5, 0x6e},
    {0x07, 0x43, 0x2b, 0xb5, 0x6e},
    {0x6d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x37, 0xb5, 0x7f},
    {0x0b, 0x43, 0x37, 0xf5, 0x7f},
    {0x05, 0x41, 0x37, 0xb5, 0x7f},
    {0x75, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x37, 0xf5, 0x7f},
    {0xc7, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x37, 0xb5, 0x7f},
    {0x63, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0xc2, 0x45, 0xb5, 0x0e},
    {0x73, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x46, 0x45, 0xb5, 0xae},
    {0x7f, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x37, 0xb5, 0x7f},
    {0x02, 0x41, 0x37, 0xb5, 0x7f},
    {0x07, 0x41, 0x37, 0xb5, 0x7f},
    {0x0d, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x2b, 0xb5, 0x6e},
    {0x98, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x2b, 0xb5, 0x6e},
    {0x6b, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x46, 0x45, 0xb5, 0xae},
    {0x94, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x2b, 0xb5, 0x6e},
    {0x01, 0x46, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x37, 0xf5, 0x7f},
    {0xc3, 0x6b, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x45, 0xb5, 0x0e},
    {0x0a, 0x43, 0x37, 0xf5, 0x7f},
    {0x04, 0x42, 0x2b, 0xb5, 0x6e},
    {0x02, 0x42, 0x2b, 0xb5, 0x6e},
    {0x07, 0x42, 0x2b, 0xb5, 0x6e},
    {0x5d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0xb5, 0x8c},
    {0x0b, 0x41, 0x04, 0xf5, 0x8c},
    {0x05, 0x46, 0x04, 0xb5, 0x8c},
    {0x0c, 0x43, 0x44, 0xb5, 0x8c},
    {0x09, 0x41, 0x04, 0xf5, 0x8c},
    {0xda, 0x51, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x04, 0xb5, 0x8c},
    {0x61, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x59, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0xb5, 0x8c},
    {0x7d, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0xb5, 0x8c},
    {0x02, 0x46, 0x04, 0xb5, 0x8c},
    {0x07, 0x46, 0x04, 0xb5, 0x8c},
    {0x6f, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0xb5, 0x6c},
    {0x7b, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0xb5, 0x6c},
    {0x69, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0xb5, 0x8c},
    {0x90, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x11, 0xb5, 0x6c},
    {0x5f, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0xf5, 0x8c},
    {0x79, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x59, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x11, 0xb5, 0x6c},
    {0x02, 0x43, 0x11, 0xb5, 0x6c},
    {0x07, 0x43, 0x11, 0xb5, 0x6c},
    {0x16, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x37, 0xb5, 0x7f},
    {0x0b, 0x42, 0x37, 0xf5, 0x7f},
    {0x05, 0x44, 0x37, 0xb5, 0x7f},
    {0x1a, 0x41, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x37, 0xf5, 0x7f},
    {0x8c, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x37, 0xb5, 0x7f},
    {0x65, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0xb5, 0x8c},
    {0xc5, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x37, 0xb5, 0x7f},
    {0x02, 0x44, 0x37, 0xb5, 0x7f},
    {0x07, 0x44, 0x37, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x11, 0xb5, 0x6c},
    {0x12, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0xb5, 0x6c},
    {0x15, 0x41, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0xb5, 0x8c},
    {0xc4, 0x77, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0xb5, 0x6c},
    {0x01, 0x43, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x37, 0xf5, 0x7f},
    {0xc3, 0x51, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x37, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0xb5, 0x6c},
    {0x02, 0x42, 0x11, 0xb5, 0x6c},
    {0x07, 0x42, 0x11, 0xb5, 0x6c},
    {0xde, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x9a, 0xb5, 0x9f},
    {0x0b, 0x45, 0x9a, 0xf5, 0x9f},
    {0x05, 0x47, 0x9a, 0xb5, 0x9f},
    {0x0c, 0x44, 0xda, 0xb5, 0x9f},
    {0x09, 0x45, 0x9a, 0xf5, 0x9f},
    {0x9a, 0x93, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0x9a, 0xb5, 0x9f},
    {0x14, 0x42, 0xda, 0xf5, 0x9f},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xda, 0xf5, 0x9f},
    {0x0e, 0x44, 0xda, 0xb5, 0x9f},
    {0x1c, 0x42, 0xda, 0xf5, 0x9f},
    {0x04, 0x47, 0x9a, 0xb5, 0x9f},
    {0x02, 0x47, 0x9a, 0xb5, 0x9f},
    {0x07, 0x47, 0x9a, 0xb5, 0x9f},
    {0x17, 0x42, 0xda, 0xf5, 0x9f},
    {0x03, 0x43, 0x93, 0xb5, 0x6f},
    {0x1b, 0x42, 0xda, 0xf5, 0x9f},
    {0x05, 0x43, 0x93, 0xb5, 0x6f},
    {0x68, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0xda, 0xb5, 0x9f},
    {0x8e, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x93, 0xb5, 0x6f},
    {0x13, 0x42, 0xda, 0xf5, 0x9f},
    {0x08, 0x45, 0x9a, 0xf5, 0x9f},
    {0x78, 0x03, 0x05, 0xb5, 0xae},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x9a, 0xf5, 0x9f},
    {0x04, 0x43, 0x93, 0xb5, 0x6f},
    {0x02, 0x43, 0x93, 0xb5, 0x6f},
    {0x07, 0x43, 0x93, 0xb5, 0x6f},
    {0x6e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0xda, 0xb5, 0x9f},
    {0x40, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xda, 0xb5, 0x9f},
    {0x03, 0x42, 0x93, 0xb5, 0x6f},
    {0x9b, 0x9a, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x93, 0xb5, 0x6f},
    {0x6c, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0xda, 0xb5, 0x9f},
    {0x96, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x93, 0xb5, 0x6f},
    {0x01, 0x44, 0xda, 0xb5, 0x9f},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x93, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x93, 0xb5, 0x6f},
    {0x02, 0x42, 0x93, 0xb5, 0x6f},
    {0x07, 0x42, 0x93, 0xb5, 0x6f},
    {0x5e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0xb5, 0x8c},
    {0x0b, 0x44, 0x04, 0xf5, 0x8c},
    {0x05, 0x45, 0x04, 0xb5, 0x8c},
    {0x0c, 0x42, 0x44, 0xb5, 0x8c},
    {0x09, 0x44, 0x04, 0xf5, 0x8c},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0xb5, 0x8c},
    {0x62, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0xb5, 0x8c},
    {0x7e, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0xb5, 0x8c},
    {0x02, 0x45, 0x04, 0xb5, 0x8c},
    {0x07, 0x45, 0x04, 0xb5, 0x8c},
    {0x70, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0xb5, 0x8c},
    {0x92, 0x9a, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0xf5, 0x8c},
    {0x7a, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xda, 0xf5, 0x9f},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xda, 0xf5, 0x9f},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xda, 0xf5, 0x9f},
    {0x0f, 0x42, 0x44, 0xb5, 0x8c},
    {0xc6, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xda, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xda, 0xf5, 0x9f},
    {0x11, 0x42, 0x44, 0xb5, 0x8c},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x43, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0xb5, 0x00, 0x0c},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x43, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0x43, 0xf5, 0xbf},
    {0x0e, 0x47, 0x43, 0xb5, 0xbf},
    {0x1c, 0x45, 0x43, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x43, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0xb5, 0x6c},
    {0x1b, 0x45, 0x43, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0xb5, 0x6c},
    {0x67, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x47, 0x43, 0xb5, 0xbf},
    {0xc9, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x01, 0xb5, 0x6c},
    {0x13, 0x45, 0x43, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x03, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0xb5, 0x6c},
    {0x02, 0x43, 0x01, 0xb5, 0x6c},
    {0x07, 0x43, 0x01, 0xb5, 0x6c},
    {0x6d, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0a, 0xf5, 0x7c},
    {0x05, 0x41, 0x0a, 0xb5, 0x7c},
    {0x75, 0x04, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc7, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0a, 0xb5, 0x7c},
    {0x63, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x43, 0xbf},
    {0x73, 0x04, 0x03, 0xb5, 0xbf},
    {0x0f, 0x47, 0x43, 0xb5, 0xbf},
    {0x7f, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0xb5, 0x7c},
    {0x02, 0x41, 0x0a, 0xb5, 0x7c},
    {0x07, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x47, 0x43, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0xb5, 0x6c},
    {0xd7, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0xb5, 0x6c},
    {0x6b, 0x04, 0x03, 0xb5, 0xbf},
    {0x11, 0x47, 0x43, 0xb5, 0xbf},
    {0xd3, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0xb5, 0x6c},
    {0x01, 0x47, 0x43, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x41, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x02, 0x43, 0xbf},
    {0x0a, 0x43, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x01, 0xb5, 0x6c},
    {0x02, 0x42, 0x01, 0xb5, 0x6c},
    {0x07, 0x42, 0x01, 0xb5, 0x6c},
    {0x5d, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0xb5, 0x8c},
    {0x0b, 0x41, 0x02, 0xf5, 0x8c},
    {0x05, 0x46, 0x02, 0xb5, 0x8c},
    {0x0c, 0x43, 0x42, 0xb5, 0x8c},
    {0x09, 0x41, 0x02, 0xf5, 0x8c},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0xb5, 0x8c},
    {0x61, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x52, 0xb5, 0x00, 0x0c},
    {0x71, 0x04, 0x03, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0xb5, 0x8c},
    {0x7d, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0xb5, 0x8c},
    {0x02, 0x46, 0x02, 0xb5, 0x8c},
    {0x07, 0x46, 0x02, 0xb5, 0x8c},
    {0x6f, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0xb5, 0x8c},
    {0xcf, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0x03, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0xf5, 0x8c},
    {0x79, 0x04, 0x03, 0xb5, 0xbf},
    {0xc1, 0x52, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0x43, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0a, 0xf5, 0x7c},
    {0x05, 0x44, 0x0a, 0xb5, 0x7c},
    {0x1a, 0x45, 0x43, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0xf5, 0x7c},
    {0xcb, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0xb5, 0x7c},
    {0x65, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x43, 0xbf},
    {0x19, 0x45, 0x43, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0xb5, 0x8c},
    {0xc5, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0a, 0xb5, 0x7c},
    {0x02, 0x44, 0x0a, 0xb5, 0x7c},
    {0x07, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x43, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0x43, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0x43, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0xb5, 0x8c},
    {0xc4, 0x4a, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x43, 0xbf},
    {0x0a, 0x42, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0x06, 0xf5, 0x9d},
    {0x05, 0x48, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0x46, 0xb5, 0x9d},
    {0x09, 0x46, 0x06, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0x46, 0xf5, 0x9d},
    {0xc2, 0x55, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0x46, 0xf5, 0x9d},
    {0x0e, 0x41, 0x46, 0xb5, 0x9d},
    {0x1c, 0x43, 0x46, 0xf5, 0x9d},
    {0x04, 0x48, 0x05, 0xb5, 0xae},
    {0x02, 0x48, 0x05, 0xb5, 0xae},
    {0x07, 0x48, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x41, 0x46, 0xb5, 0x9d},
    {0xcd, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0xf5, 0x9d},
    {0x08, 0x46, 0x06, 0xf5, 0x9d},
    {0x78, 0x04, 0x03, 0xb5, 0xbf},
    {0xc1, 0x55, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0x03, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0x03, 0xb5, 0xbf},
    {0x0f, 0x41, 0x46, 0xb5, 0x9d},
    {0x40, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x03, 0xb5, 0xbf},
    {0x11, 0x41, 0x46, 0xb5, 0x9d},
    {0xd5, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0xb5, 0x8c},
    {0x0b, 0x44, 0x02, 0xf5, 0x8c},
    {0x05, 0x45, 0x02, 0xb5, 0x8c},
    {0x0c, 0x42, 0x42, 0xb5, 0x8c},
    {0x09, 0x44, 0x02, 0xf5, 0x8c},
    {0xda, 0xc1, 0x43, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0xb5, 0x8c},
    {0x62, 0x04, 0x03, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x03, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0xb5, 0x8c},
    {0x7e, 0x04, 0x03, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0xb5, 0x8c},
    {0x02, 0x45, 0x02, 0xb5, 0x8c},
    {0x07, 0x45, 0x02, 0xb5, 0x8c},
    {0x70, 0x04, 0x03, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x03, 0x6f},
    {0x7c, 0x04, 0x03, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x03, 0x6f},
    {0x6a, 0x04, 0x03, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0xb5, 0x8c},
    {0xd1, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0x03, 0x6f},
    {0x60, 0x04, 0x03, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0xf5, 0x8c},
    {0x7a, 0x04, 0x03, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x81, 0x03, 0x6f},
    {0x02, 0x43, 0x81, 0x03, 0x6f},
    {0x07, 0x43, 0x81, 0x03, 0x6f},
    {0x16, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0x03, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x43, 0xbf},
    {0x19, 0x43, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0xb5, 0x8c},
    {0xc6, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x81, 0x03, 0x6f},
    {0x12, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0x03, 0x6f},
    {0x15, 0x43, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0xb5, 0x8c},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x03, 0x6f},
    {0x01, 0x42, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0xc3, 0xc1, 0x43, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x43, 0xbf},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0x03, 0x6f},
    {0x02, 0x42, 0x81, 0x03, 0x6f},
    {0x07, 0x42, 0x81, 0x03, 0x6f},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0x03, 0xb5, 0xbf},
    {0x0b, 0x47, 0x05, 0xf5, 0xae},
    {0x05, 0x4c, 0x03, 0xb5, 0xbf},
    {0x0c, 0x45, 0x45, 0xb5, 0xae},
    {0x09, 0x47, 0x05, 0xf5, 0xae},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0x03, 0xb5, 0xbf},
    {0x14, 0x44, 0x45, 0xf5, 0xae},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0x45, 0xf5, 0xae},
    {0x0e, 0x45, 0x45, 0xb5, 0xae},
    {0x1c, 0x44, 0x45, 0xf5, 0xae},
    {0x04, 0x4c, 0x03, 0xb5, 0xbf},
    {0x02, 0x4c, 0x03, 0xb5, 0xbf},
    {0x07, 0x4c, 0x03, 0xb5, 0xbf},
    {0x17, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x45, 0x45, 0xb5, 0xae},
    {0xc9, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0x45, 0xf5, 0xae},
    {0x08, 0x47, 0x05, 0xf5, 0xae},
    {0x77, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0x05, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x45, 0x45, 0xb5, 0xae},
    {0x7f, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x45, 0x45, 0xb5, 0xae},
    {0xd4, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0xb5, 0x8c},
    {0x0b, 0x41, 0x07, 0xf5, 0x8c},
    {0x05, 0x46, 0x07, 0xb5, 0x8c},
    {0x0c, 0x43, 0x47, 0xb5, 0x8c},
    {0x09, 0x41, 0x07, 0xf5, 0x8c},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0xb5, 0x8c},
    {0x61, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0xc3, 0x43, 0xf5, 0x0f},
    {0x71, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0xb5, 0x8c},
    {0x7d, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0xb5, 0x8c},
    {0x02, 0x46, 0x07, 0xb5, 0x8c},
    {0x07, 0x46, 0x07, 0xb5, 0x8c},
    {0x6f, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0xb5, 0x8c},
    {0xd0, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0xf5, 0x8c},
    {0x79, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0xc3, 0x43, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0xc1, 0x45, 0xb5, 0x0e},
    {0x19, 0x44, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0xb5, 0x8c},
    {0xc5, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0xb5, 0x8c},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x45, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0xb5, 0x9d},
    {0x0b, 0x45, 0x06, 0xf5, 0x9d},
    {0x05, 0x47, 0x06, 0xb5, 0x9d},
    {0x0c, 0x44, 0x46, 0xb5, 0x9d},
    {0x09, 0x45, 0x06, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0xb5, 0x9d},
    {0x14, 0x42, 0x46, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0xf5, 0x9d},
    {0x0e, 0x44, 0x46, 0xb5, 0x9d},
    {0x1c, 0x42, 0x46, 0xf5, 0x9d},
    {0x04, 0x47, 0x06, 0xb5, 0x9d},
    {0x02, 0x47, 0x06, 0xb5, 0x9d},
    {0x07, 0x47, 0x06, 0xb5, 0x9d},
    {0x17, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0x46, 0xb5, 0x9d},
    {0xce, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0xf5, 0x9d},
    {0x08, 0x45, 0x06, 0xf5, 0x9d},
    {0x78, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x43, 0xbf},
    {0x74, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0x46, 0xb5, 0x9d},
    {0x40, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0x46, 0xb5, 0x9d},
    {0xd6, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x43, 0xbf},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0xb5, 0x8c},
    {0x0b, 0x44, 0x07, 0xf5, 0x8c},
    {0x05, 0x45, 0x07, 0xb5, 0x8c},
    {0x0c, 0x42, 0x47, 0xb5, 0x8c},
    {0x09, 0x44, 0x07, 0xf5, 0x8c},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0xb5, 0x8c},
    {0x62, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x43, 0xbf},
    {0x72, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0xb5, 0x8c},
    {0x7e, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0xb5, 0x8c},
    {0x02, 0x45, 0x07, 0xb5, 0x8c},
    {0x07, 0x45, 0x07, 0xb5, 0x8c},
    {0x70, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0xb5, 0x8c},
    {0xd2, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0xf5, 0x8c},
    {0x7a, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x43, 0xbf},
    {0x0a, 0x44, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x43, 0xbf},
    {0x19, 0x42, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0xb5, 0x8c},
    {0xc6, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0xb5, 0x8c},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x43, 0xbf},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0x4d, 0xf5, 0x40, 0xff},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0x4d, 0xf5, 0x40, 0xff},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4d, 0xf5, 0x40, 0xff},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0x4d, 0xf5, 0x40, 0xff},
    {0x03, 0x43, 0x1d, 0xb5, 0x6e},
    {0x1b, 0x4d, 0xf5, 0x40, 0xff},
    {0x05, 0x43, 0x1d, 0xb5, 0x6e},
    {0x67, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x1d, 0xb5, 0x6e},
    {0x13, 0x4d, 0xf5, 0x40, 0xff},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x0a, 0xb5, 0x00, 0xff},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1d, 0xb5, 0x6e},
    {0x02, 0x43, 0x1d, 0xb5, 0x6e},
    {0x07, 0x43, 0x1d, 0xb5, 0x6e},
    {0x6d, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x2d, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2d, 0xf5, 0x7f},
    {0x05, 0x41, 0x2d, 0xb5, 0x7f},
    {0x75, 0x0a, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x2d, 0xf5, 0x7f},
    {0xc7, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x2d, 0xb5, 0x7f},
    {0x63, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x03, 0x09, 0xf5, 0xff},
    {0x73, 0x0a, 0xb5, 0x00, 0xff},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x2d, 0xb5, 0x7f},
    {0x02, 0x41, 0x2d, 0xb5, 0x7f},
    {0x07, 0x41, 0x2d, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1d, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1d, 0xb5, 0x6e},
    {0x6b, 0x0a, 0xb5, 0x00, 0xff},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1d, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x2d, 0xf5, 0x7f},
    {0xc3, 0x5d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x09, 0xf5, 0xff},
    {0x0a, 0x43, 0x2d, 0xf5, 0x7f},
    {0x04, 0x42, 0x1d, 0xb5, 0x6e},
    {0x02, 0x42, 0x1d, 0xb5, 0x6e},
    {0x07, 0x42, 0x1d, 0xb5, 0x6e},
    {0x5d, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x46, 0x17, 0xb5, 0x8f},
    {0x0b, 0x41, 0x17, 0xf5, 0x8f},
    {0x05, 0x46, 0x17, 0xb5, 0x8f},
    {0x0c, 0x43, 0x57, 0xb5, 0x8f},
    {0x09, 0x41, 0x17, 0xf5, 0x8f},
    {0xda, 0x03, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0x17, 0xb5, 0x8f},
    {0x61, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x0b, 0x46, 0xb5, 0xee},
    {0x71, 0x0a, 0xb5, 0x00, 0xff},
    {0x0e, 0x43, 0x57, 0xb5, 0x8f},
    {0x7d, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x46, 0x17, 0xb5, 0x8f},
    {0x02, 0x46, 0x17, 0xb5, 0x8f},
    {0x07, 0x46, 0x17, 0xb5, 0x8f},
    {0x6f, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x03, 0x06, 0x6e},
    {0x7b, 0x0a, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x03, 0x06, 0x6e},
    {0x69, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0x43, 0x57, 0xb5, 0x8f},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x06, 0x6e},
    {0x5f, 0x0a, 0xb5, 0x00, 0xff},
    {0x08, 0x41, 0x17, 0xf5, 0x8f},
    {0x79, 0x0a, 0xb5, 0x00, 0xff},
    {0xc1, 0x0b, 0x46, 0xb5, 0xee},
    {0x0a, 0x41, 0x17, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x06, 0x6e},
    {0x02, 0x43, 0x03, 0x06, 0x6e},
    {0x07, 0x43, 0x03, 0x06, 0x6e},
    {0x16, 0x4d, 0xf5, 0x40, 0xff},
    {0x03, 0x44, 0x2d, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2d, 0xf5, 0x7f},
    {0x05, 0x44, 0x2d, 0xb5, 0x7f},
    {0x1a, 0x4d, 0xf5, 0x40, 0xff},
    {0x09, 0x42, 0x2d, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x2d, 0xb5, 0x7f},
    {0x65, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x05, 0x09, 0xf5, 0xff},
    {0x19, 0x4d, 0xf5, 0x40, 0xff},
    {0x0f, 0x43, 0x57, 0xb5, 0x8f},
    {0xc5, 0x57, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x2d, 0xb5, 0x7f},
    {0x02, 0x44, 0x2d, 0xb5, 0x7f},
    {0x07, 0x44, 0x2d, 0xb5, 0x7f},
    {0x0d, 0x43, 0x57, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x06, 0x6e},
    {0x12, 0x4d, 0xf5, 0x40, 0xff},
    {0x05, 0x42, 0x03, 0x06, 0x6e},
    {0x15, 0x4d, 0xf5, 0x40, 0xff},
    {0x11, 0x43, 0x57, 0xb5, 0x8f},
    {0xc4, 0x6d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x06, 0x6e},
    {0x01, 0x43, 0x57, 0xb5, 0x8f},
    {0x08, 0x42, 0x2d, 0xf5, 0x7f},
    {0xc3, 0x03, 0x46, 0xb5, 0xee},
    {0xc1, 0x05, 0x09, 0xf5, 0xff},
    {0x0a, 0x42, 0x2d, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x06, 0x6e},
    {0x02, 0x42, 0x03, 0x06, 0x6e},
    {0x07, 0x42, 0x03, 0x06, 0x6e},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x41, 0xf5, 0xee},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x41, 0xf5, 0xee},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x01, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x01, 0x6e},
    {0x68, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x01, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x0a, 0xb5, 0x00, 0xff},
    {0xc1, 0x0c, 0x41, 0xf5, 0xee},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x01, 0x6e},
    {0x02, 0x43, 0x0b, 0x01, 0x6e},
    {0x07, 0x43, 0x0b, 0x01, 0x6e},
    {0x6e, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x03, 0x01, 0x7e},
    {0x0b, 0x43, 0x03, 0x41, 0x7e},
    {0x05, 0x41, 0x03, 0x01, 0x7e},
    {0x76, 0x0a, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x03, 0x41, 0x7e},
    {0xc8, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x01, 0x7e},
    {0x64, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x09, 0x46, 0xb5, 0xee},
    {0x74, 0x0a, 0xb5, 0x00, 0xff},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x03, 0x01, 0x7e},
    {0x02, 0x41, 0x03, 0x01, 0x7e},
    {0x07, 0x41, 0x03, 0x01, 0x7e},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x01, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x01, 0x6e},
    {0x6c, 0x0a, 0xb5, 0x00, 0xff},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x01, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x41, 0x7e},
    {0xc3, 0x0b, 0x41, 0xf5, 0xee},
    {0xc1, 0x09, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x0b, 0x01, 0x6e},
    {0x02, 0x42, 0x0b, 0x01, 0x6e},
    {0x07, 0x42, 0x0b, 0x01, 0x6e},
    {0x5e, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x45, 0x17, 0xb5, 0x8f},
    {0x0b, 0x44, 0x17, 0xf5, 0x8f},
    {0x05, 0x45, 0x17, 0xb5, 0x8f},
    {0x0c, 0x42, 0x57, 0xb5, 0x8f},
    {0x09, 0x44, 0x17, 0xf5, 0x8f},
    {0xda, 0x05, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x17, 0xb5, 0x8f},
    {0x62, 0x0a, 0xb5, 0x00, 0xff},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x0a, 0xb5, 0x00, 0xff},
    {0x0e, 0x42, 0x57, 0xb5, 0x8f},
    {0x7e, 0x0a, 0xb5, 0x00, 0xff},
    {0x04, 0x45, 0x17, 0xb5, 0x8f},
    {0x02, 0x45, 0x17, 0xb5, 0x8f},
    {0x07, 0x45, 0x17, 0xb5, 0x8f},
    {0x70, 0x0a, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x05, 0x06, 0x6e},
    {0x7c, 0x0a, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x05, 0x06, 0x6e},
    {0x6a, 0x0a, 0xb5, 0x00, 0xff},
    {0x10, 0x42, 0x57, 0xb5, 0x8f},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x06, 0x6e},
    {0x60, 0x0a, 0xb5, 0x00, 0xff},
    {0x08, 0x44, 0x17, 0xf5, 0x8f},
    {0x7a, 0x0a, 0xb5, 0x00, 0xff},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0x17, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x06, 0x6e},
    {0x02, 0x43, 0x05, 0x06, 0x6e},
    {0x07, 0x43, 0x05, 0x06, 0x6e},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x01, 0x7e},
    {0x0b, 0x42, 0x03, 0x41, 0x7e},
    {0x05, 0x44, 0x03, 0x01, 0x7e},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x41, 0x7e},
    {0xca, 0x57, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x01, 0x7e},
    {0x66, 0x0a, 0xb5, 0x00, 0xff},
    {0xc2, 0x06, 0x09, 0xf5, 0xff},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x57, 0xb5, 0x8f},
    {0xc6, 0x57, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x01, 0x7e},
    {0x02, 0x44, 0x03, 0x01, 0x7e},
    {0x07, 0x44, 0x03, 0x01, 0x7e},
    {0x0d, 0x42, 0x57, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x06, 0x6e},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x06, 0x6e},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x57, 0xb5, 0x8f},
    {0xc4, 0x03, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x06, 0x6e},
    {0x01, 0x42, 0x57, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x41, 0x7e},
    {0xc3, 0x05, 0x46, 0xb5, 0xee},
    {0xc1, 0x06, 0x09, 0xf5, 0xff},
    {0x0a, 0x42, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x05, 0x06, 0x6e},
    {0x02, 0x42, 0x05, 0x06, 0x6e},
    {0x07, 0x42, 0x05, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x03, 0xb5, 0xee},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x03, 0xb5, 0xee},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x03, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x03, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x03, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x03, 0xb5, 0xee},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x03, 0x6e},
    {0x02, 0x43, 0x0c, 0x03, 0x6e},
    {0x07, 0x43, 0x0c, 0x03, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x03, 0x7e},
    {0x0b, 0x43, 0x0b, 0x43, 0x7e},
    {0x05, 0x41, 0x0b, 0x03, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x43, 0x7e},
    {0xc7, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x03, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x03, 0x7e},
    {0x02, 0x41, 0x0b, 0x03, 0x7e},
    {0x07, 0x41, 0x0b, 0x03, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x03, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x03, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x03, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x43, 0x7e},
    {0xc3, 0x4c, 0x03, 0xb5, 0xee},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x0c, 0x03, 0x6e},
    {0x02, 0x42, 0x0c, 0x03, 0x6e},
    {0x07, 0x42, 0x0c, 0x03, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x03, 0x8e},
    {0x0b, 0x41, 0x03, 0x43, 0x8e},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x0c, 0x43, 0x43, 0x03, 0x8e},
    {0x09, 0x41, 0x03, 0x43, 0x8e},
    {0xda, 0x09, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x03, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x03, 0x8e},
    {0x02, 0x46, 0x03, 0x03, 0x8e},
    {0x07, 0x46, 0x03, 0x03, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x01, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x01, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x03, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x01, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x43, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x09, 0x01, 0x6e},
    {0x02, 0x43, 0x09, 0x01, 0x6e},
    {0x07, 0x43, 0x09, 0x01, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x03, 0x7e},
    {0x0b, 0x42, 0x0b, 0x43, 0x7e},
    {0x05, 0x44, 0x0b, 0x03, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x43, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x03, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x03, 0x8e},
    {0xc5, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x03, 0x7e},
    {0x02, 0x44, 0x0b, 0x03, 0x7e},
    {0x07, 0x44, 0x0b, 0x03, 0x7e},
    {0x0d, 0x43, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x09, 0x01, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x01, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x03, 0x8e},
    {0xc4, 0x4b, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x01, 0x6e},
    {0x01, 0x43, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x0b, 0x43, 0x7e},
    {0xc3, 0x09, 0x41, 0xf5, 0xee},
    {0xc1, 0x0e, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x09, 0x01, 0x6e},
    {0x02, 0x42, 0x09, 0x01, 0x6e},
    {0x07, 0x42, 0x09, 0x01, 0x6e},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x03, 0xb5, 0xee},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x03, 0xb5, 0xee},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x01, 0x7e},
    {0x0b, 0x43, 0x05, 0x41, 0x7e},
    {0x05, 0x41, 0x05, 0x01, 0x7e},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x41, 0x7e},
    {0xc8, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x01, 0x7e},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x09, 0xf5, 0xff},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x01, 0x7e},
    {0x02, 0x41, 0x05, 0x01, 0x7e},
    {0x07, 0x41, 0x05, 0x01, 0x7e},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x41, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x09, 0xf5, 0xff},
    {0x0a, 0x43, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x03, 0x8e},
    {0x0b, 0x44, 0x03, 0x43, 0x8e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x0c, 0x42, 0x43, 0x03, 0x8e},
    {0x09, 0x44, 0x03, 0x43, 0x8e},
    {0xda, 0x06, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x09, 0xf5, 0xff},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x03, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x03, 0x8e},
    {0x02, 0x45, 0x03, 0x03, 0x8e},
    {0x07, 0x45, 0x03, 0x03, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x06, 0x6e},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x06, 0x6e},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x03, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x06, 0x6e},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x43, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x09, 0xf5, 0xff},
    {0x0a, 0x44, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x06, 0x6e},
    {0x02, 0x43, 0x06, 0x06, 0x6e},
    {0x07, 0x43, 0x06, 0x06, 0x6e},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x01, 0x7e},
    {0x0b, 0x42, 0x05, 0x41, 0x7e},
    {0x05, 0x44, 0x05, 0x01, 0x7e},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x41, 0x7e},
    {0xca, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x01, 0x7e},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x09, 0xf5, 0xff},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x03, 0x8e},
    {0xc6, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x01, 0x7e},
    {0x02, 0x44, 0x05, 0x01, 0x7e},
    {0x07, 0x44, 0x05, 0x01, 0x7e},
    {0x0d, 0x42, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x06, 0x6e},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x06, 0x6e},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x03, 0x8e},
    {0xc4, 0x05, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x06, 0x6e},
    {0x01, 0x42, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x05, 0x41, 0x7e},
    {0xc3, 0x06, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x09, 0xf5, 0xff},
    {0x0a, 0x42, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x06, 0x06, 0x6e},
    {0x02, 0x42, 0x06, 0x06, 0x6e},
    {0x07, 0x42, 0x06, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x61, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x03, 0xb5, 0xee},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x21, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x21, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x21, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x03, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x21, 0xb5, 0x6e},
    {0x02, 0x43, 0x21, 0xb5, 0x6e},
    {0x07, 0x43, 0x21, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x35, 0xb5, 0x7f},
    {0x0b, 0x43, 0x35, 0xf5, 0x7f},
    {0x05, 0x41, 0x35, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x35, 0xf5, 0x7f},
    {0xc7, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x35, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x35, 0xb5, 0x7f},
    {0x02, 0x41, 0x35, 0xb5, 0x7f},
    {0x07, 0x41, 0x35, 0xb5, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x21, 0xb5, 0x6e},
    {0x97, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x21, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0x93, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x21, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x35, 0xf5, 0x7f},
    {0xc3, 0x61, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x35, 0xf5, 0x7f},
    {0x04, 0x42, 0x21, 0xb5, 0x6e},
    {0x02, 0x42, 0x21, 0xb5, 0x6e},
    {0x07, 0x42, 0x21, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x1b, 0xb5, 0x8f},
    {0x0b, 0x41, 0x1b, 0xf5, 0x8f},
    {0x05, 0x46, 0x1b, 0xb5, 0x8f},
    {0x0c, 0x43, 0x5b, 0xb5, 0x8f},
    {0x09, 0x41, 0x1b, 0xf5, 0x8f},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x1b, 0xb5, 0x8f},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x03, 0xb5, 0xee},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x5b, 0xb5, 0x8f},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x1b, 0xb5, 0x8f},
    {0x02, 0x46, 0x1b, 0xb5, 0x8f},
    {0x07, 0x46, 0x1b, 0xb5, 0x8f},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x5b, 0xb5, 0x8f},
    {0x8f, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x1b, 0xf5, 0x8f},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x1b, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x35, 0xb5, 0x7f},
    {0x0b, 0x42, 0x35, 0xf5, 0x7f},
    {0x05, 0x44, 0x35, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x35, 0xf5, 0x7f},
    {0x8b, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x35, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x5b, 0xb5, 0x8f},
    {0xc5, 0x5b, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x35, 0xb5, 0x7f},
    {0x02, 0x44, 0x35, 0xb5, 0x7f},
    {0x07, 0x44, 0x35, 0xb5, 0x7f},
    {0x0d, 0x43, 0x5b, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x5b, 0xb5, 0x8f},
    {0xc4, 0x75, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x5b, 0xb5, 0x8f},
    {0x08, 0x42, 0x35, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x35, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x82, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xc2, 0xb5, 0x9e},
    {0x09, 0x46, 0x82, 0xf5, 0x9e},
    {0xda, 0x71, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x68, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc2, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x31, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x31, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0xc2, 0xb5, 0x9e},
    {0x8d, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x31, 0xb5, 0x6e},
    {0x13, 0x43, 0xc2, 0xf5, 0x9e},
    {0x08, 0x46, 0x82, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x68, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x31, 0xb5, 0x6e},
    {0x02, 0x43, 0x31, 0xb5, 0x6e},
    {0x07, 0x43, 0x31, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x03, 0x7e},
    {0x0b, 0x43, 0x09, 0x43, 0x7e},
    {0x05, 0x41, 0x09, 0x03, 0x7e},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x43, 0x7e},
    {0xc8, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x09, 0x03, 0x7e},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x41, 0xf5, 0xee},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0xc2, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x03, 0x7e},
    {0x02, 0x41, 0x09, 0x03, 0x7e},
    {0x07, 0x41, 0x09, 0x03, 0x7e},
    {0x0d, 0x41, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x31, 0xb5, 0x6e},
    {0x99, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x31, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0xc2, 0xb5, 0x9e},
    {0x95, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x31, 0xb5, 0x6e},
    {0x01, 0x41, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x43, 0x7e},
    {0xc3, 0x71, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x31, 0xb5, 0x6e},
    {0x02, 0x42, 0x31, 0xb5, 0x6e},
    {0x07, 0x42, 0x31, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x1b, 0xb5, 0x8f},
    {0x0b, 0x44, 0x1b, 0xf5, 0x8f},
    {0x05, 0x45, 0x1b, 0xb5, 0x8f},
    {0x0c, 0x42, 0x5b, 0xb5, 0x8f},
    {0x09, 0x44, 0x1b, 0xf5, 0x8f},
    {0xda, 0x4e, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0x1b, 0xb5, 0x8f},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8d, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x5b, 0xb5, 0x8f},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x1b, 0xb5, 0x8f},
    {0x02, 0x45, 0x1b, 0xb5, 0x8f},
    {0x07, 0x45, 0x1b, 0xb5, 0x8f},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x03, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x03, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x5b, 0xb5, 0x8f},
    {0x91, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x03, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x1b, 0xf5, 0x8f},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8d, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x1b, 0xf5, 0x8f},
    {0x04, 0x43, 0x0e, 0x03, 0x6e},
    {0x02, 0x43, 0x0e, 0x03, 0x6e},
    {0x07, 0x43, 0x0e, 0x03, 0x6e},
    {0x16, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x03, 0x7e},
    {0x0b, 0x42, 0x09, 0x43, 0x7e},
    {0x05, 0x44, 0x09, 0x03, 0x7e},
    {0x1a, 0x43, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x43, 0x7e},
    {0xca, 0x5b, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x09, 0x03, 0x7e},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0x5b, 0xb5, 0x8f},
    {0xc6, 0x5b, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x09, 0x03, 0x7e},
    {0x02, 0x44, 0x09, 0x03, 0x7e},
    {0x07, 0x44, 0x09, 0x03, 0x7e},
    {0x0d, 0x42, 0x5b, 0xb5, 0x8f},
    {0x03, 0x42, 0x0e, 0x03, 0x6e},
    {0x12, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x03, 0x6e},
    {0x15, 0x43, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0x5b, 0xb5, 0x8f},
    {0xc4, 0x49, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x03, 0x6e},
    {0x01, 0x42, 0x5b, 0xb5, 0x8f},
    {0x08, 0x42, 0x09, 0x43, 0x7e},
    {0xc3, 0x4e, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x0e, 0x03, 0x6e},
    {0x02, 0x42, 0x0e, 0x03, 0x6e},
    {0x07, 0x42, 0x0e, 0x03, 0x6e},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x03, 0xb5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3d, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3d, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x3d, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x03, 0xb5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3d, 0xb5, 0x6e},
    {0x02, 0x43, 0x3d, 0xb5, 0x6e},
    {0x07, 0x43, 0x3d, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x87, 0xb5, 0x7f},
    {0x0b, 0x43, 0x87, 0xf5, 0x7f},
    {0x05, 0x41, 0x87, 0xb5, 0x7f},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x87, 0xf5, 0x7f},
    {0xc7, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x87, 0xb5, 0x7f},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x46, 0xb5, 0xee},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x87, 0xb5, 0x7f},
    {0x02, 0x41, 0x87, 0xb5, 0x7f},
    {0x07, 0x41, 0x87, 0xb5, 0x7f},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3d, 0xb5, 0x6e},
    {0x98, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3d, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0x94, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3d, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x87, 0xf5, 0x7f},
    {0xc3, 0x7d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x87, 0xf5, 0x7f},
    {0x04, 0x42, 0x3d, 0xb5, 0x6e},
    {0x02, 0x42, 0x3d, 0xb5, 0x6e},
    {0x07, 0x42, 0x3d, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x03, 0x8e},
    {0x0b, 0x41, 0x05, 0x43, 0x8e},
    {0x05, 0x46, 0x05, 0x03, 0x8e},
    {0x0c, 0x43, 0x45, 0x03, 0x8e},
    {0x09, 0x41, 0x05, 0x43, 0x8e},
    {0xda, 0x04, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x03, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x78, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x03, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x03, 0x8e},
    {0x02, 0x46, 0x05, 0x03, 0x8e},
    {0x07, 0x46, 0x05, 0x03, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x06, 0x6e},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x06, 0x6e},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x03, 0x8e},
    {0x90, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x06, 0x6e},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x43, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x78, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x06, 0x6e},
    {0x02, 0x43, 0x04, 0x06, 0x6e},
    {0x07, 0x43, 0x04, 0x06, 0x6e},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x87, 0xb5, 0x7f},
    {0x0b, 0x42, 0x87, 0xf5, 0x7f},
    {0x05, 0x44, 0x87, 0xb5, 0x7f},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x87, 0xf5, 0x7f},
    {0x8c, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x87, 0xb5, 0x7f},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x03, 0x8e},
    {0xc5, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x87, 0xb5, 0x7f},
    {0x02, 0x44, 0x87, 0xb5, 0x7f},
    {0x07, 0x44, 0x87, 0xb5, 0x7f},
    {0x0d, 0x43, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x06, 0x6e},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x06, 0x6e},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x03, 0x8e},
    {0x84, 0x87, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x06, 0x6e},
    {0x01, 0x43, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x87, 0xf5, 0x7f},
    {0xc3, 0x04, 0x46, 0xb5, 0xee},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x87, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x06, 0x6e},
    {0x02, 0x42, 0x04, 0x06, 0x6e},
    {0x07, 0x42, 0x04, 0x06, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x82, 0xb5, 0x9e},
    {0x0b, 0x45, 0x82, 0xf5, 0x9e},
    {0x05, 0x47, 0x82, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc2, 0xb5, 0x9e},
    {0x09, 0x45, 0x82, 0xf5, 0x9e},
    {0xda, 0x02, 0x46, 0xb5, 0xee},
    {0x06, 0x47, 0x82, 0xb5, 0x9e},
    {0x14, 0x42, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x46, 0xb5, 0xee},
    {0x18, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc2, 0xf5, 0x9e},
    {0x04, 0x47, 0x82, 0xb5, 0x9e},
    {0x02, 0x47, 0x82, 0xb5, 0x9e},
    {0x07, 0x47, 0x82, 0xb5, 0x9e},
    {0x17, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x06, 0x6e},
    {0x1b, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x06, 0x6e},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xc2, 0xb5, 0x9e},
    {0x8e, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x06, 0x6e},
    {0x13, 0x42, 0xc2, 0xf5, 0x9e},
    {0x08, 0x45, 0x82, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x46, 0xb5, 0xee},
    {0x0a, 0x45, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x06, 0x6e},
    {0x02, 0x43, 0x02, 0x06, 0x6e},
    {0x07, 0x43, 0x02, 0x06, 0x6e},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x01, 0x7e},
    {0x0b, 0x43, 0x06, 0x41, 0x7e},
    {0x05, 0x41, 0x06, 0x01, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x41, 0x7e},
    {0xc8, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x01, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xc2, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x01, 0x7e},
    {0x02, 0x41, 0x06, 0x01, 0x7e},
    {0x07, 0x41, 0x06, 0x01, 0x7e},
    {0x0d, 0x44, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x06, 0x6e},
    {0x9b, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x06, 0x6e},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xc2, 0xb5, 0x9e},
    {0x96, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x06, 0x6e},
    {0x01, 0x44, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x41, 0x7e},
    {0xc3, 0x02, 0x46, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x06, 0x6e},
    {0x02, 0x42, 0x02, 0x06, 0x6e},
    {0x07, 0x42, 0x02, 0x06, 0x6e},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x03, 0x8e},
    {0x0b, 0x44, 0x05, 0x43, 0x8e},
    {0x05, 0x45, 0x05, 0x03, 0x8e},
    {0x0c, 0x42, 0x45, 0x03, 0x8e},
    {0x09, 0x44, 0x05, 0x43, 0x8e},
    {0xda, 0x07, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x03, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x03, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x03, 0x8e},
    {0x02, 0x45, 0x05, 0x03, 0x8e},
    {0x07, 0x45, 0x05, 0x03, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x06, 0x6e},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x06, 0x6e},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x03, 0x8e},
    {0x92, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x06, 0x6e},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x43, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x06, 0x6e},
    {0x02, 0x43, 0x07, 0x06, 0x6e},
    {0x07, 0x43, 0x07, 0x06, 0x6e},
    {0x16, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x01, 0x7e},
    {0x0b, 0x42, 0x06, 0x41, 0x7e},
    {0x05, 0x44, 0x06, 0x01, 0x7e},
    {0x1a, 0x42, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x41, 0x7e},
    {0xca, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x01, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x03, 0x8e},
    {0xc6, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x01, 0x7e},
    {0x02, 0x44, 0x06, 0x01, 0x7e},
    {0x07, 0x44, 0x06, 0x01, 0x7e},
    {0x0d, 0x42, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x06, 0x6e},
    {0x12, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x06, 0x6e},
    {0x15, 0x42, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x03, 0x8e},
    {0xc4, 0x06, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x06, 0x6e},
    {0x01, 0x42, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x06, 0x41, 0x7e},
    {0xc3, 0x07, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x06, 0x6e},
    {0x02, 0x42, 0x07, 0x06, 0x6e},
    {0x07, 0x42, 0x07, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0xb5, 0x40, 0x0d},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x2f, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x2f, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2f, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2f, 0xb5, 0x6e},
    {0x02, 0x43, 0x2f, 0xb5, 0x6e},
    {0x07, 0x43, 0x2f, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x23, 0xb5, 0x7f},
    {0x0b, 0x43, 0x23, 0xf5, 0x7f},
    {0x05, 0x41, 0x23, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x23, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x23, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x23, 0xb5, 0x7f},
    {0x02, 0x41, 0x23, 0xb5, 0x7f},
    {0x07, 0x41, 0x23, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x2f, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2f, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2f, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x23, 0xf5, 0x7f},
    {0xc3, 0x6f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x23, 0xf5, 0x7f},
    {0x04, 0x42, 0x2f, 0xb5, 0x6e},
    {0x02, 0x42, 0x2f, 0xb5, 0x6e},
    {0x07, 0x42, 0x2f, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x23, 0xb5, 0x7f},
    {0x0b, 0x42, 0x23, 0xf5, 0x7f},
    {0x05, 0x44, 0x23, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x23, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x23, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x23, 0xb5, 0x7f},
    {0x02, 0x44, 0x23, 0xb5, 0x7f},
    {0x07, 0x44, 0x23, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x63, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x23, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x23, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x09, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x09, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x7b, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0x09, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x76, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x09, 0xb5, 0xaf},
    {0x02, 0x49, 0x09, 0xb5, 0xaf},
    {0x07, 0x49, 0x09, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x3b, 0xb5, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x3b, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x3b, 0xb5, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x3b, 0xb5, 0x6e},
    {0x02, 0x43, 0x3b, 0xb5, 0x6e},
    {0x07, 0x43, 0x3b, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x3b, 0xb5, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x3b, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x3b, 0xb5, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7b, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3b, 0xb5, 0x6e},
    {0x02, 0x42, 0x3b, 0xb5, 0x6e},
    {0x07, 0x42, 0x3b, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x49, 0xb5, 0xaf},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x69, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x49, 0xf5, 0xaf},
    {0xc2, 0x64, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x49, 0xf5, 0xaf},
    {0x0e, 0x46, 0x49, 0xb5, 0xaf},
    {0x1c, 0x41, 0x49, 0xf5, 0xaf},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x49, 0xf5, 0xaf},
    {0x03, 0x43, 0x29, 0xb5, 0x6e},
    {0x1b, 0x41, 0x49, 0xf5, 0xaf},
    {0x05, 0x43, 0x29, 0xb5, 0x6e},
    {0x67, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x46, 0x49, 0xb5, 0xaf},
    {0xc9, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x29, 0xb5, 0x6e},
    {0x13, 0x41, 0x49, 0xf5, 0xaf},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x64, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x29, 0xb5, 0x6e},
    {0x02, 0x43, 0x29, 0xb5, 0x6e},
    {0x07, 0x43, 0x29, 0xb5, 0x6e},
    {0x6d, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x33, 0xb5, 0x7f},
    {0x0b, 0x43, 0x33, 0xf5, 0x7f},
    {0x05, 0x41, 0x33, 0xb5, 0x7f},
    {0x75, 0x03, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x33, 0xf5, 0x7f},
    {0xc7, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x33, 0xb5, 0x7f},
    {0x63, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x49, 0xf5, 0x0f},
    {0x73, 0x03, 0x09, 0xb5, 0xaf},
    {0x0f, 0x46, 0x49, 0xb5, 0xaf},
    {0x7f, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x33, 0xb5, 0x7f},
    {0x02, 0x41, 0x33, 0xb5, 0x7f},
    {0x07, 0x41, 0x33, 0xb5, 0x7f},
    {0x0d, 0x46, 0x49, 0xb5, 0xaf},
    {0x03, 0x42, 0x29, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x29, 0xb5, 0x6e},
    {0x6b, 0x03, 0x09, 0xb5, 0xaf},
    {0x11, 0x46, 0x49, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x29, 0xb5, 0x6e},
    {0x01, 0x46, 0x49, 0xb5, 0xaf},
    {0x08, 0x43, 0x33, 0xf5, 0x7f},
    {0xc3, 0x69, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x49, 0xf5, 0x0f},
    {0x0a, 0x43, 0x33, 0xf5, 0x7f},
    {0x04, 0x42, 0x29, 0xb5, 0x6e},
    {0x02, 0x42, 0x29, 0xb5, 0x6e},
    {0x07, 0x42, 0x29, 0xb5, 0x6e},
    {0x5d, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x46, 0x10, 0xb5, 0x8e},
    {0x0b, 0x41, 0x10, 0xf5, 0x8e},
    {0x05, 0x46, 0x10, 0xb5, 0x8e},
    {0x0c, 0x43, 0x50, 0xb5, 0x8e},
    {0x09, 0x41, 0x10, 0xf5, 0x8e},
    {0xda, 0x50, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x10, 0xb5, 0x8e},
    {0x61, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x74, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x09, 0xb5, 0xaf},
    {0x0e, 0x43, 0x50, 0xb5, 0x8e},
    {0x7d, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x46, 0x10, 0xb5, 0x8e},
    {0x02, 0x46, 0x10, 0xb5, 0x8e},
    {0x07, 0x46, 0x10, 0xb5, 0x8e},
    {0x6f, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x10, 0x03, 0x6e},
    {0x7b, 0x03, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x10, 0x03, 0x6e},
    {0x69, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x43, 0x50, 0xb5, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x03, 0x6e},
    {0x5f, 0x03, 0x09, 0xb5, 0xaf},
    {0x08, 0x41, 0x10, 0xf5, 0x8e},
    {0x79, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x74, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x03, 0x6e},
    {0x02, 0x43, 0x10, 0x03, 0x6e},
    {0x07, 0x43, 0x10, 0x03, 0x6e},
    {0x16, 0x41, 0x49, 0xf5, 0xaf},
    {0x03, 0x44, 0x33, 0xb5, 0x7f},
    {0x0b, 0x42, 0x33, 0xf5, 0x7f},
    {0x05, 0x44, 0x33, 0xb5, 0x7f},
    {0x1a, 0x41, 0x49, 0xf5, 0xaf},
    {0x09, 0x42, 0x33, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x33, 0xb5, 0x7f},
    {0x65, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0x49, 0xf5, 0xaf},
    {0x0f, 0x43, 0x50, 0xb5, 0x8e},
    {0xc5, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x33, 0xb5, 0x7f},
    {0x02, 0x44, 0x33, 0xb5, 0x7f},
    {0x07, 0x44, 0x33, 0xb5, 0x7f},
    {0x0d, 0x43, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x03, 0x6e},
    {0x12, 0x41, 0x49, 0xf5, 0xaf},
    {0x05, 0x42, 0x10, 0x03, 0x6e},
    {0x15, 0x41, 0x49, 0xf5, 0xaf},
    {0x11, 0x43, 0x50, 0xb5, 0x8e},
    {0xc4, 0x73, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x03, 0x6e},
    {0x01, 0x43, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x33, 0xf5, 0x7f},
    {0xc3, 0x50, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x33, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x03, 0x6e},
    {0x02, 0x42, 0x10, 0x03, 0x6e},
    {0x07, 0x42, 0x10, 0x03, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8f, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x40, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8f, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8f, 0xb5, 0x6f},
    {0x68, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8f, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x40, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8f, 0xb5, 0x6f},
    {0x02, 0x43, 0x8f, 0xb5, 0x6f},
    {0x07, 0x43, 0x8f, 0xb5, 0x6f},
    {0x6e, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0f, 0xf5, 0x7d},
    {0x05, 0x41, 0x0f, 0xb5, 0x7d},
    {0x76, 0x03, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x0f, 0xf5, 0x7d},
    {0xc8, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0xb5, 0x7d},
    {0x64, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x09, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x0f, 0xb5, 0x7d},
    {0x02, 0x41, 0x0f, 0xb5, 0x7d},
    {0x07, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8f, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8f, 0xb5, 0x6f},
    {0x6c, 0x03, 0x09, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8f, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0f, 0xf5, 0x7d},
    {0x83, 0x8f, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x8f, 0xb5, 0x6f},
    {0x02, 0x42, 0x8f, 0xb5, 0x6f},
    {0x07, 0x42, 0x8f, 0xb5, 0x6f},
    {0x5e, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x45, 0x10, 0xb5, 0x8e},
    {0x0b, 0x44, 0x10, 0xf5, 0x8e},
    {0x05, 0x45, 0x10, 0xb5, 0x8e},
    {0x0c, 0x42, 0x50, 0xb5, 0x8e},
    {0x09, 0x44, 0x10, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x10, 0xb5, 0x8e},
    {0x62, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x09, 0xb5, 0xaf},
    {0x0e, 0x42, 0x50, 0xb5, 0x8e},
    {0x7e, 0x03, 0x09, 0xb5, 0xaf},
    {0x04, 0x45, 0x10, 0xb5, 0x8e},
    {0x02, 0x45, 0x10, 0xb5, 0x8e},
    {0x07, 0x45, 0x10, 0xb5, 0x8e},
    {0x70, 0x03, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x09, 0xb5, 0xaf},
    {0x10, 0x42, 0x50, 0xb5, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x09, 0xb5, 0xaf},
    {0x08, 0x44, 0x10, 0xf5, 0x8e},
    {0x7a, 0x03, 0x09, 0xb5, 0xaf},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0f, 0xf5, 0x7d},
    {0x05, 0x44, 0x0f, 0xb5, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0f, 0xf5, 0x7d},
    {0xca, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0xb5, 0x7d},
    {0x66, 0x03, 0x09, 0xb5, 0xaf},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x50, 0xb5, 0x8e},
    {0xc6, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0xb5, 0x7d},
    {0x02, 0x44, 0x0f, 0xb5, 0x7d},
    {0x07, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x42, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x50, 0xb5, 0x8e},
    {0xc4, 0x4f, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x49, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x41, 0xf5, 0xee},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x1f, 0xb5, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x1f, 0xb5, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x1f, 0xb5, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x41, 0xf5, 0xee},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1f, 0xb5, 0x6e},
    {0x02, 0x43, 0x1f, 0xb5, 0x6e},
    {0x07, 0x43, 0x1f, 0xb5, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x3f, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3f, 0xf5, 0x7f},
    {0x05, 0x41, 0x3f, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x3f, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x3f, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x3f, 0xb5, 0x7f},
    {0x02, 0x41, 0x3f, 0xb5, 0x7f},
    {0x07, 0x41, 0x3f, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x1f, 0xb5, 0x6e},
    {0xd7, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x1f, 0xb5, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x1f, 0xb5, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x3f, 0xf5, 0x7f},
    {0xc3, 0x5f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x3f, 0xf5, 0x7f},
    {0x04, 0x42, 0x1f, 0xb5, 0x6e},
    {0x02, 0x42, 0x1f, 0xb5, 0x6e},
    {0x07, 0x42, 0x1f, 0xb5, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x99, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x01, 0x6e},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x01, 0x6e},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x08, 0x01, 0x6e},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x99, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x01, 0x6e},
    {0x02, 0x43, 0x08, 0x01, 0x6e},
    {0x07, 0x43, 0x08, 0x01, 0x6e},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x3f, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3f, 0xf5, 0x7f},
    {0x05, 0x44, 0x3f, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x3f, 0xf5, 0x7f},
    {0xcb, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x3f, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x3f, 0xb5, 0x7f},
    {0x02, 0x44, 0x3f, 0xb5, 0x7f},
    {0x07, 0x44, 0x3f, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x01, 0x6e},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x01, 0x6e},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x7f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x01, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x3f, 0xf5, 0x7f},
    {0xc3, 0x08, 0x41, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x3f, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x01, 0x6e},
    {0x02, 0x42, 0x08, 0x01, 0x6e},
    {0x07, 0x42, 0x08, 0x01, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x09, 0xb5, 0xaf},
    {0x0b, 0x46, 0x0e, 0xf5, 0x9f},
    {0x05, 0x48, 0x09, 0xb5, 0xaf},
    {0x0c, 0x41, 0x4e, 0xb5, 0x9f},
    {0x09, 0x46, 0x0e, 0xf5, 0x9f},
    {0xda, 0x79, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x09, 0xb5, 0xaf},
    {0x14, 0x43, 0x4e, 0xf5, 0x9f},
    {0xc2, 0x6c, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4e, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4e, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4e, 0xf5, 0x9f},
    {0x04, 0x48, 0x09, 0xb5, 0xaf},
    {0x02, 0x48, 0x09, 0xb5, 0xaf},
    {0x07, 0x48, 0x09, 0xb5, 0xaf},
    {0x17, 0x43, 0x4e, 0xf5, 0x9f},
    {0x03, 0x43, 0x39, 0xb5, 0x6e},
    {0x1b, 0x43, 0x4e, 0xf5, 0x9f},
    {0x05, 0x43, 0x39, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x4e, 0xb5, 0x9f},
    {0xcd, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x39, 0xb5, 0x6e},
    {0x13, 0x43, 0x4e, 0xf5, 0x9f},
    {0x08, 0x46, 0x0e, 0xf5, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0e, 0xf5, 0x9f},
    {0x04, 0x43, 0x39, 0xb5, 0x6e},
    {0x02, 0x43, 0x39, 0xb5, 0x6e},
    {0x07, 0x43, 0x39, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x01, 0x7e},
    {0x0b, 0x43, 0x04, 0x41, 0x7e},
    {0x05, 0x41, 0x04, 0x01, 0x7e},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x41, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x01, 0x7e},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x41, 0xf5, 0xee},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x4e, 0xb5, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x01, 0x7e},
    {0x02, 0x41, 0x04, 0x01, 0x7e},
    {0x07, 0x41, 0x04, 0x01, 0x7e},
    {0x0d, 0x41, 0x4e, 0xb5, 0x9f},
    {0x03, 0x42, 0x39, 0xb5, 0x6e},
    {0xd9, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x39, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x4e, 0xb5, 0x9f},
    {0xd5, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x39, 0xb5, 0x6e},
    {0x01, 0x41, 0x4e, 0xb5, 0x9f},
    {0x08, 0x43, 0x04, 0x41, 0x7e},
    {0xc3, 0x79, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x39, 0xb5, 0x6e},
    {0x02, 0x42, 0x39, 0xb5, 0x6e},
    {0x07, 0x42, 0x39, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x95, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x95, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x4e, 0xf5, 0x9f},
    {0x03, 0x44, 0x04, 0x01, 0x7e},
    {0x0b, 0x42, 0x04, 0x41, 0x7e},
    {0x05, 0x44, 0x04, 0x01, 0x7e},
    {0x1a, 0x43, 0x4e, 0xf5, 0x9f},
    {0x09, 0x42, 0x04, 0x41, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x01, 0x7e},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x4e, 0xf5, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x01, 0x7e},
    {0x02, 0x44, 0x04, 0x01, 0x7e},
    {0x07, 0x44, 0x04, 0x01, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x4e, 0xf5, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x4e, 0xf5, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x41, 0x7e},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x4e, 0xf5, 0x40, 0x0f},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x09, 0xf5, 0xaf},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x49, 0xb5, 0xaf},
    {0x09, 0x47, 0x09, 0xf5, 0xaf},
    {0xda, 0x0a, 0x41, 0xf5, 0xee},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x49, 0xf5, 0xaf},
    {0xc2, 0x01, 0x41, 0xf5, 0xee},
    {0x18, 0x44, 0x49, 0xf5, 0xaf},
    {0x0e, 0x45, 0x49, 0xb5, 0xaf},
    {0x1c, 0x44, 0x49, 0xf5, 0xaf},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x49, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x01, 0x6e},
    {0x1b, 0x44, 0x49, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x01, 0x6e},
    {0x67, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x45, 0x49, 0xb5, 0xaf},
    {0xc9, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x01, 0x6e},
    {0x13, 0x44, 0x49, 0xf5, 0xaf},
    {0x08, 0x47, 0x09, 0xf5, 0xaf},
    {0x77, 0x02, 0x09, 0xb5, 0xaf},
    {0xc1, 0x01, 0x41, 0xf5, 0xee},
    {0x0a, 0x47, 0x09, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x01, 0x6e},
    {0x02, 0x43, 0x0a, 0x01, 0x6e},
    {0x07, 0x43, 0x0a, 0x01, 0x6e},
    {0x6d, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x01, 0x7e},
    {0x0b, 0x43, 0x02, 0x41, 0x7e},
    {0x05, 0x41, 0x02, 0x01, 0x7e},
    {0x75, 0x02, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x41, 0x7e},
    {0xc7, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x01, 0x7e},
    {0x63, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x09, 0xb5, 0xaf},
    {0x0f, 0x45, 0x49, 0xb5, 0xaf},
    {0x7f, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x01, 0x7e},
    {0x02, 0x41, 0x02, 0x01, 0x7e},
    {0x07, 0x41, 0x02, 0x01, 0x7e},
    {0x0d, 0x45, 0x49, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x01, 0x6e},
    {0xd8, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0a, 0x01, 0x6e},
    {0x6b, 0x02, 0x09, 0xb5, 0xaf},
    {0x11, 0x45, 0x49, 0xb5, 0xaf},
    {0xd4, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0a, 0x01, 0x6e},
    {0x01, 0x45, 0x49, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x41, 0x7e},
    {0xc3, 0x0a, 0x41, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x0a, 0x01, 0x6e},
    {0x02, 0x42, 0x0a, 0x01, 0x6e},
    {0x07, 0x42, 0x0a, 0x01, 0x6e},
    {0x5d, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x46, 0x06, 0x03, 0x8e},
    {0x0b, 0x41, 0x06, 0x43, 0x8e},
    {0x05, 0x46, 0x06, 0x03, 0x8e},
    {0x0c, 0x43, 0x46, 0x03, 0x8e},
    {0x09, 0x41, 0x06, 0x43, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x03, 0x8e},
    {0x61, 0x02, 0x09, 0xb5, 0xaf},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x09, 0xb5, 0xaf},
    {0x0e, 0x43, 0x46, 0x03, 0x8e},
    {0x7d, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x46, 0x06, 0x03, 0x8e},
    {0x02, 0x46, 0x06, 0x03, 0x8e},
    {0x07, 0x46, 0x06, 0x03, 0x8e},
    {0x6f, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x43, 0x46, 0x03, 0x8e},
    {0xd0, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x09, 0xb5, 0xaf},
    {0x08, 0x41, 0x06, 0x43, 0x8e},
    {0x79, 0x02, 0x09, 0xb5, 0xaf},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x49, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x01, 0x7e},
    {0x0b, 0x42, 0x02, 0x41, 0x7e},
    {0x05, 0x44, 0x02, 0x01, 0x7e},
    {0x1a, 0x44, 0x49, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x41, 0x7e},
    {0xcc, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x02, 0x01, 0x7e},
    {0x65, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x49, 0xf5, 0x0f},
    {0x19, 0x44, 0x49, 0xf5, 0xaf},
    {0x0f, 0x43, 0x46, 0x03, 0x8e},
    {0xc5, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x01, 0x7e},
    {0x02, 0x44, 0x02, 0x01, 0x7e},
    {0x07, 0x44, 0x02, 0x01, 0x7e},
    {0x0d, 0x43, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x49, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x49, 0xf5, 0xaf},
    {0x11, 0x43, 0x46, 0x03, 0x8e},
    {0xc4, 0x02, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x41, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x49, 0xf5, 0x0f},
    {0x0a, 0x42, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x0e, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0e, 0xf5, 0x9f},
    {0x05, 0x47, 0x0e, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4e, 0xb5, 0x9f},
    {0x09, 0x45, 0x0e, 0xf5, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x0e, 0xb5, 0x9f},
    {0x14, 0x42, 0x4e, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x4e, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4e, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4e, 0xf5, 0x9f},
    {0x04, 0x47, 0x0e, 0xb5, 0x9f},
    {0x02, 0x47, 0x0e, 0xb5, 0x9f},
    {0x07, 0x47, 0x0e, 0xb5, 0x9f},
    {0x17, 0x42, 0x4e, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x4e, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x44, 0x4e, 0xb5, 0x9f},
    {0xce, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x4e, 0xf5, 0x9f},
    {0x08, 0x45, 0x0e, 0xf5, 0x9f},
    {0x78, 0x02, 0x09, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x0e, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x01, 0x7e},
    {0x0b, 0x43, 0x07, 0x41, 0x7e},
    {0x05, 0x41, 0x07, 0x01, 0x7e},
    {0x76, 0x02, 0x09, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x41, 0x7e},
    {0xc8, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x01, 0x7e},
    {0x64, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x09, 0xb5, 0xaf},
    {0x0f, 0x44, 0x4e, 0xb5, 0x9f},
    {0x40, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x01, 0x7e},
    {0x02, 0x41, 0x07, 0x01, 0x7e},
    {0x07, 0x41, 0x07, 0x01, 0x7e},
    {0x0d, 0x44, 0x4e, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x4e, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x09, 0xb5, 0xaf},
    {0x11, 0x44, 0x4e, 0xb5, 0x9f},
    {0xd6, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x4e, 0xb5, 0x9f},
    {0x08, 0x43, 0x07, 0x41, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x45, 0x06, 0x03, 0x8e},
    {0x0b, 0x44, 0x06, 0x43, 0x8e},
    {0x05, 0x45, 0x06, 0x03, 0x8e},
    {0x0c, 0x42, 0x46, 0x03, 0x8e},
    {0x09, 0x44, 0x06, 0x43, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x03, 0x8e},
    {0x62, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x09, 0xb5, 0xaf},
    {0x0e, 0x42, 0x46, 0x03, 0x8e},
    {0x7e, 0x02, 0x09, 0xb5, 0xaf},
    {0x04, 0x45, 0x06, 0x03, 0x8e},
    {0x02, 0x45, 0x06, 0x03, 0x8e},
    {0x07, 0x45, 0x06, 0x03, 0x8e},
    {0x70, 0x02, 0x09, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x09, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x09, 0xb5, 0xaf},
    {0x10, 0x42, 0x46, 0x03, 0x8e},
    {0xd2, 0x4e, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x09, 0xb5, 0xaf},
    {0x08, 0x44, 0x06, 0x43, 0x8e},
    {0x7a, 0x02, 0x09, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x4e, 0xf5, 0x9f},
    {0x03, 0x44, 0x07, 0x01, 0x7e},
    {0x0b, 0x42, 0x07, 0x41, 0x7e},
    {0x05, 0x44, 0x07, 0x01, 0x7e},
    {0x1a, 0x42, 0x4e, 0xf5, 0x9f},
    {0x09, 0x42, 0x07, 0x41, 0x7e},
    {0xca, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x01, 0x7e},
    {0x66, 0x02, 0x09, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x4e, 0xf5, 0x9f},
    {0x0f, 0x42, 0x46, 0x03, 0x8e},
    {0xc6, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x01, 0x7e},
    {0x02, 0x44, 0x07, 0x01, 0x7e},
    {0x07, 0x44, 0x07, 0x01, 0x7e},
    {0x0d, 0x42, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x4e, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x4e, 0xf5, 0x9f},
    {0x11, 0x42, 0x46, 0x03, 0x8e},
    {0xc4, 0x07, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x41, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xdd, 0xb5, 0x00, 0x0f},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xdd, 0xb5, 0x00, 0x0f},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x56, 0xb5, 0x40, 0x0d},
    {0x06, 0xdd, 0xb5, 0x00, 0x0f},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0xc2, 0x5e, 0xb5, 0x40, 0x0d},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xdd, 0xb5, 0x00, 0x0f},
    {0x02, 0xdd, 0xb5, 0x00, 0x0f},
    {0x07, 0xdd, 0xb5, 0x00, 0x0f},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x16, 0xb5, 0x6d},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x16, 0xb5, 0x6d},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x16, 0xb5, 0x6d},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x16, 0xb5, 0x6d},
    {0x02, 0x43, 0x16, 0xb5, 0x6d},
    {0x07, 0x43, 0x16, 0xb5, 0x6d},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0d, 0xf5, 0x7d},
    {0x05, 0x41, 0x0d, 0xb5, 0x7d},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0xf5, 0x7d},
    {0xc7, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x0d, 0xb5, 0x7d},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0xb5, 0x7d},
    {0x02, 0x41, 0x0d, 0xb5, 0x7d},
    {0x07, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x16, 0xb5, 0x6d},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x16, 0xb5, 0x6d},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x16, 0xb5, 0x6d},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x56, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x16, 0xb5, 0x6d},
    {0x02, 0x42, 0x16, 0xb5, 0x6d},
    {0x07, 0x42, 0x16, 0xb5, 0x6d},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0x13, 0xb5, 0x8f},
    {0x0b, 0x41, 0x13, 0xf5, 0x8f},
    {0x05, 0x46, 0x13, 0xb5, 0x8f},
    {0x0c, 0x43, 0x53, 0xb5, 0x8f},
    {0x09, 0x41, 0x13, 0xf5, 0x8f},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x13, 0xb5, 0x8f},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0x53, 0xb5, 0x8f},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0x13, 0xb5, 0x8f},
    {0x02, 0x46, 0x13, 0xb5, 0x8f},
    {0x07, 0x46, 0x13, 0xb5, 0x8f},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0x53, 0xb5, 0x8f},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0x13, 0xf5, 0x8f},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0x13, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0d, 0xf5, 0x7d},
    {0x05, 0x44, 0x0d, 0xb5, 0x7d},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x0d, 0xf5, 0x7d},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0d, 0xb5, 0x7d},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0x53, 0xb5, 0x8f},
    {0xc5, 0x53, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x0d, 0xb5, 0x7d},
    {0x02, 0x44, 0x0d, 0xb5, 0x7d},
    {0x07, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0d, 0x43, 0x53, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0x53, 0xb5, 0x8f},
    {0xc4, 0x4d, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0x53, 0xb5, 0x8f},
    {0x08, 0x42, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0xdc, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0xc8, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0x13, 0xb5, 0x8f},
    {0x0b, 0x44, 0x13, 0xf5, 0x8f},
    {0x05, 0x45, 0x13, 0xb5, 0x8f},
    {0x0c, 0x42, 0x53, 0xb5, 0x8f},
    {0x09, 0x44, 0x13, 0xf5, 0x8f},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x13, 0xb5, 0x8f},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0xda, 0x45, 0xf5, 0x0f},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0x53, 0xb5, 0x8f},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0x13, 0xb5, 0x8f},
    {0x02, 0x45, 0x13, 0xb5, 0x8f},
    {0x07, 0x45, 0x13, 0xb5, 0x8f},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0x53, 0xb5, 0x8f},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0x13, 0xf5, 0x8f},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0xda, 0x45, 0xf5, 0x0f},
    {0x0a, 0x44, 0x13, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0xca, 0x53, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x53, 0xb5, 0x8f},
    {0xc6, 0x53, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0x53, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x53, 0xb5, 0x8f},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0x53, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0x05, 0xb5, 0xbf},
    {0x0b, 0x49, 0x05, 0xf5, 0xbf},
    {0x05, 0x4a, 0x05, 0xb5, 0xbf},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0x05, 0xf5, 0xbf},
    {0xda, 0x5a, 0xb5, 0x40, 0x0d},
    {0x06, 0x4a, 0x05, 0xb5, 0xbf},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x62, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0x05, 0xb5, 0xbf},
    {0x02, 0x4a, 0x05, 0xb5, 0xbf},
    {0x07, 0x4a, 0x05, 0xb5, 0xbf},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1a, 0xb5, 0x6d},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1a, 0xb5, 0x6d},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x1a, 0xb5, 0x6d},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0x05, 0xf5, 0xbf},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x62, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0x05, 0xf5, 0xbf},
    {0x04, 0x43, 0x1a, 0xb5, 0x6d},
    {0x02, 0x43, 0x1a, 0xb5, 0x6d},
    {0x07, 0x43, 0x1a, 0xb5, 0x6d},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1a, 0xb5, 0x6d},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1a, 0xb5, 0x6d},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1a, 0xb5, 0x6d},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x5a, 0xb5, 0x40, 0x0d},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x1a, 0xb5, 0x6d},
    {0x02, 0x42, 0x1a, 0xb5, 0x6d},
    {0x07, 0x42, 0x1a, 0xb5, 0x6d},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x08, 0xb5, 0x8d},
    {0x0b, 0x41, 0x08, 0xf5, 0x8d},
    {0x05, 0x46, 0x08, 0xb5, 0x8d},
    {0x0c, 0x43, 0x48, 0xb5, 0x8d},
    {0x09, 0x41, 0x08, 0xf5, 0x8d},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x72, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x48, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x08, 0xb5, 0x8d},
    {0x02, 0x46, 0x08, 0xb5, 0x8d},
    {0x07, 0x46, 0x08, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x48, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x08, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x72, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x48, 0xb5, 0x8d},
    {0xc5, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x48, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0xdd, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8b, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7e, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8b, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8b, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8b, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7e, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8b, 0xb5, 0x6f},
    {0x02, 0x43, 0x8b, 0xb5, 0x6f},
    {0x07, 0x43, 0x8b, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8b, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8b, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8b, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8b, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8b, 0xb5, 0x6f},
    {0x02, 0x42, 0x8b, 0xb5, 0x6f},
    {0x07, 0x42, 0x8b, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x08, 0xb5, 0x8d},
    {0x0b, 0x44, 0x08, 0xf5, 0x8d},
    {0x05, 0x45, 0x08, 0xb5, 0x8d},
    {0x0c, 0x42, 0x48, 0xb5, 0x8d},
    {0x09, 0x44, 0x08, 0xf5, 0x8d},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x48, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x08, 0xb5, 0x8d},
    {0x02, 0x45, 0x08, 0xb5, 0x8d},
    {0x07, 0x45, 0x08, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x48, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x08, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x48, 0xb5, 0x8d},
    {0xc6, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x48, 0xb5, 0x8d},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x65, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0x45, 0xf5, 0xbf},
    {0xc2, 0x70, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0x45, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x45, 0xf5, 0xbf},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x43, 0x25, 0xb5, 0x6e},
    {0x1b, 0x46, 0x45, 0xf5, 0xbf},
    {0x05, 0x43, 0x25, 0xb5, 0x6e},
    {0x67, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x25, 0xb5, 0x6e},
    {0x13, 0x46, 0x45, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x05, 0xb5, 0xbf},
    {0xc1, 0x70, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x25, 0xb5, 0x6e},
    {0x02, 0x43, 0x25, 0xb5, 0x6e},
    {0x07, 0x43, 0x25, 0xb5, 0x6e},
    {0x6d, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x2b, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2b, 0xf5, 0x7f},
    {0x05, 0x41, 0x2b, 0xb5, 0x7f},
    {0x75, 0x01, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x2b, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2b, 0xb5, 0x7f},
    {0x63, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x45, 0xbf},
    {0x73, 0x01, 0x05, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x2b, 0xb5, 0x7f},
    {0x02, 0x41, 0x2b, 0xb5, 0x7f},
    {0x07, 0x41, 0x2b, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x25, 0xb5, 0x6e},
    {0xd7, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x25, 0xb5, 0x6e},
    {0x6b, 0x01, 0x05, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x25, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x2b, 0xf5, 0x7f},
    {0xc3, 0x65, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x45, 0xbf},
    {0x0a, 0x43, 0x2b, 0xf5, 0x7f},
    {0x04, 0x42, 0x25, 0xb5, 0x6e},
    {0x02, 0x42, 0x25, 0xb5, 0x6e},
    {0x07, 0x42, 0x25, 0xb5, 0x6e},
    {0x5d, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0xc2, 0x45, 0xf5, 0x0f},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x7c, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0x05, 0xb5, 0xbf},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x05, 0x6f},
    {0x7b, 0x01, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x05, 0x6f},
    {0x69, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0x05, 0x6f},
    {0x5f, 0x01, 0x05, 0xb5, 0xbf},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0x05, 0xb5, 0xbf},
    {0xc1, 0x7c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0x05, 0x6f},
    {0x02, 0x43, 0x82, 0x05, 0x6f},
    {0x07, 0x43, 0x82, 0x05, 0x6f},
    {0x16, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x44, 0x2b, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2b, 0xf5, 0x7f},
    {0x05, 0x44, 0x2b, 0xb5, 0x7f},
    {0x1a, 0x46, 0x45, 0xf5, 0xbf},
    {0x09, 0x42, 0x2b, 0xf5, 0x7f},
    {0xcb, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x2b, 0xb5, 0x7f},
    {0x65, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x45, 0xbf},
    {0x19, 0x46, 0x45, 0xf5, 0xbf},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2b, 0xb5, 0x7f},
    {0x02, 0x44, 0x2b, 0xb5, 0x7f},
    {0x07, 0x44, 0x2b, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0x05, 0x6f},
    {0x12, 0x46, 0x45, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x05, 0x6f},
    {0x15, 0x46, 0x45, 0xf5, 0xbf},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6b, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0x05, 0x6f},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2b, 0xf5, 0x7f},
    {0xc3, 0xc2, 0x45, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x45, 0xbf},
    {0x0a, 0x42, 0x2b, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0x05, 0x6f},
    {0x02, 0x42, 0x82, 0x05, 0x6f},
    {0x07, 0x42, 0x82, 0x05, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x04, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x44, 0xb5, 0x9d},
    {0x09, 0x46, 0x04, 0xf5, 0x9d},
    {0xda, 0x59, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x44, 0xf5, 0x9d},
    {0xc2, 0x6a, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x44, 0xf5, 0x9d},
    {0x0e, 0x41, 0x44, 0xb5, 0x9d},
    {0x1c, 0x43, 0x44, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x19, 0xb5, 0x6d},
    {0x1b, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x19, 0xb5, 0x6d},
    {0x68, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x41, 0x44, 0xb5, 0x9d},
    {0xcd, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x19, 0xb5, 0x6d},
    {0x13, 0x43, 0x44, 0xf5, 0x9d},
    {0x08, 0x46, 0x04, 0xf5, 0x9d},
    {0x78, 0x01, 0x05, 0xb5, 0xbf},
    {0xc1, 0x6a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x19, 0xb5, 0x6d},
    {0x02, 0x43, 0x19, 0xb5, 0x6d},
    {0x07, 0x43, 0x19, 0xb5, 0x6d},
    {0x6e, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x11, 0xb5, 0x7d},
    {0x0b, 0x43, 0x11, 0xf5, 0x7d},
    {0x05, 0x41, 0x11, 0xb5, 0x7d},
    {0x76, 0x01, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x11, 0xf5, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x11, 0xb5, 0x7d},
    {0x64, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0x05, 0xb5, 0xbf},
    {0x0f, 0x41, 0x44, 0xb5, 0x9d},
    {0x40, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x11, 0xb5, 0x7d},
    {0x02, 0x41, 0x11, 0xb5, 0x7d},
    {0x07, 0x41, 0x11, 0xb5, 0x7d},
    {0x0d, 0x41, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x19, 0xb5, 0x6d},
    {0xd9, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x19, 0xb5, 0x6d},
    {0x6c, 0x01, 0x05, 0xb5, 0xbf},
    {0x11, 0x41, 0x44, 0xb5, 0x9d},
    {0xd5, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x19, 0xb5, 0x6d},
    {0x01, 0x41, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x11, 0xf5, 0x7d},
    {0xc3, 0x59, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x19, 0xb5, 0x6d},
    {0x02, 0x42, 0x19, 0xb5, 0x6d},
    {0x07, 0x42, 0x19, 0xb5, 0x6d},
    {0x5e, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0x05, 0xb5, 0xbf},
    {0x82, 0x91, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x05, 0xb5, 0xbf},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0x05, 0xb5, 0xbf},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x03, 0x6e},
    {0x7c, 0x01, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x03, 0x6e},
    {0x6a, 0x01, 0x05, 0xb5, 0xbf},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0f, 0x03, 0x6e},
    {0x60, 0x01, 0x05, 0xb5, 0xbf},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0x05, 0xb5, 0xbf},
    {0x81, 0x91, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0x03, 0x6e},
    {0x02, 0x43, 0x0f, 0x03, 0x6e},
    {0x07, 0x43, 0x0f, 0x03, 0x6e},
    {0x16, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x11, 0xb5, 0x7d},
    {0x0b, 0x42, 0x11, 0xf5, 0x7d},
    {0x05, 0x44, 0x11, 0xb5, 0x7d},
    {0x1a, 0x43, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x11, 0xf5, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x11, 0xb5, 0x7d},
    {0x66, 0x01, 0x05, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x45, 0xbf},
    {0x19, 0x43, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x11, 0xb5, 0x7d},
    {0x02, 0x44, 0x11, 0xb5, 0x7d},
    {0x07, 0x44, 0x11, 0xb5, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0x03, 0x6e},
    {0x12, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x0f, 0x03, 0x6e},
    {0x15, 0x43, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x51, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0x03, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x11, 0xf5, 0x7d},
    {0xc3, 0x4f, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x45, 0xbf},
    {0x0a, 0x42, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0x03, 0x6e},
    {0x02, 0x42, 0x0f, 0x03, 0x6e},
    {0x07, 0x42, 0x0f, 0x03, 0x6e},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x55, 0xb5, 0x00, 0xff},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x55, 0xb5, 0x00, 0xff},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0x9a, 0x85, 0xb5, 0x00, 0x0e},
    {0x06, 0x55, 0xb5, 0x00, 0xff},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x60, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x55, 0xb5, 0x00, 0xff},
    {0x02, 0x55, 0xb5, 0x00, 0xff},
    {0x07, 0x55, 0xb5, 0x00, 0xff},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x85, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x85, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x85, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x60, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x85, 0xb5, 0x6e},
    {0x02, 0x43, 0x85, 0xb5, 0x6e},
    {0x07, 0x43, 0x85, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x85, 0xb5, 0x6e},
    {0xd8, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x85, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x85, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0x83, 0x85, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x85, 0xb5, 0x6e},
    {0x02, 0x42, 0x85, 0xb5, 0x6e},
    {0x07, 0x42, 0x85, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x7a, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0xb5, 0x9d},
    {0x0b, 0x45, 0x04, 0xf5, 0x9d},
    {0x05, 0x47, 0x04, 0xb5, 0x9d},
    {0x0c, 0x44, 0x44, 0xb5, 0x9d},
    {0x09, 0x45, 0x04, 0xf5, 0x9d},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0xb5, 0x9d},
    {0x14, 0x42, 0x44, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0xf5, 0x9d},
    {0x0e, 0x44, 0x44, 0xb5, 0x9d},
    {0x1c, 0x42, 0x44, 0xf5, 0x9d},
    {0x04, 0x47, 0x04, 0xb5, 0x9d},
    {0x02, 0x47, 0x04, 0xb5, 0x9d},
    {0x07, 0x47, 0x04, 0xb5, 0x9d},
    {0x17, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x44, 0xb5, 0x9d},
    {0xce, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0xf5, 0x9d},
    {0x08, 0x45, 0x04, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0x45, 0xbf},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x44, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x44, 0xb5, 0x9d},
    {0xd6, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x45, 0xbf},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0x45, 0xbf},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0x45, 0xbf},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0x45, 0xbf},
    {0x19, 0x42, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x45, 0xbf},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xf4, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x03, 0xb5, 0xee},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x03, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x03, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x03, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0d, 0x03, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x03, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x03, 0x6e},
    {0x02, 0x43, 0x0d, 0x03, 0x6e},
    {0x07, 0x43, 0x0d, 0x03, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0xb5, 0x7d},
    {0x0b, 0x43, 0x01, 0xf5, 0x7d},
    {0x05, 0x41, 0x01, 0xb5, 0x7d},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0xf5, 0x7d},
    {0xc7, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x01, 0xb5, 0x7d},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0xb5, 0x7d},
    {0x02, 0x41, 0x01, 0xb5, 0x7d},
    {0x07, 0x41, 0x01, 0xb5, 0x7d},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x03, 0x6e},
    {0xd7, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0d, 0x03, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0d, 0x03, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0xf5, 0x7d},
    {0xc3, 0x4d, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x0d, 0x03, 0x6e},
    {0x02, 0x42, 0x0d, 0x03, 0x6e},
    {0x07, 0x42, 0x0d, 0x03, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0a, 0xf5, 0x8d},
    {0x05, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4a, 0xb5, 0x8d},
    {0x09, 0x41, 0x0a, 0xf5, 0x8d},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0xb5, 0x8d},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0xb5, 0x8d},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0xb5, 0x8d},
    {0x02, 0x46, 0x0a, 0xb5, 0x8d},
    {0x07, 0x46, 0x0a, 0xb5, 0x8d},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0xb5, 0x8d},
    {0xcf, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0xf5, 0x8d},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0xb5, 0x7d},
    {0x0b, 0x42, 0x01, 0xf5, 0x7d},
    {0x05, 0x44, 0x01, 0xb5, 0x7d},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0xf5, 0x7d},
    {0xcb, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x01, 0xb5, 0x7d},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc5, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x01, 0xb5, 0x7d},
    {0x02, 0x44, 0x01, 0xb5, 0x7d},
    {0x07, 0x44, 0x01, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x41, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x01, 0xf5, 0x7d},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0xf5, 0x9d},
    {0x05, 0x49, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0xb5, 0x9d},
    {0x09, 0x46, 0x02, 0xf5, 0x9d},
    {0xda, 0x52, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0xf5, 0x9d},
    {0xc2, 0x5a, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0xf5, 0x9d},
    {0x0e, 0x41, 0x42, 0xb5, 0x9d},
    {0x1c, 0x43, 0x42, 0xf5, 0x9d},
    {0x04, 0x49, 0x06, 0xb5, 0xae},
    {0x02, 0x49, 0x06, 0xb5, 0xae},
    {0x07, 0x49, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x12, 0xb5, 0x6d},
    {0x1b, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x12, 0xb5, 0x6d},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0xb5, 0x9d},
    {0xcd, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x12, 0xb5, 0x6d},
    {0x13, 0x43, 0x42, 0xf5, 0x9d},
    {0x08, 0x46, 0x02, 0xf5, 0x9d},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x12, 0xb5, 0x6d},
    {0x02, 0x43, 0x12, 0xb5, 0x6d},
    {0x07, 0x43, 0x12, 0xb5, 0x6d},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x03, 0x7e},
    {0x0b, 0x43, 0x08, 0x43, 0x7e},
    {0x05, 0x41, 0x08, 0x03, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x43, 0x7e},
    {0xc8, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x08, 0x03, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0xb5, 0x9d},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x03, 0x7e},
    {0x02, 0x41, 0x08, 0x03, 0x7e},
    {0x07, 0x41, 0x08, 0x03, 0x7e},
    {0x0d, 0x41, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x12, 0xb5, 0x6d},
    {0xd9, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x12, 0xb5, 0x6d},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0xb5, 0x9d},
    {0xd5, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x12, 0xb5, 0x6d},
    {0x01, 0x41, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x08, 0x43, 0x7e},
    {0xc3, 0x52, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x12, 0xb5, 0x6d},
    {0x02, 0x42, 0x12, 0xb5, 0x6d},
    {0x07, 0x42, 0x12, 0xb5, 0x6d},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0a, 0xf5, 0x8d},
    {0x05, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4a, 0xb5, 0x8d},
    {0x09, 0x44, 0x0a, 0xf5, 0x8d},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0xb5, 0x8d},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0xb5, 0x8d},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0xb5, 0x8d},
    {0x02, 0x45, 0x0a, 0xb5, 0x8d},
    {0x07, 0x45, 0x0a, 0xb5, 0x8d},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0xb5, 0x8d},
    {0xd1, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0xf5, 0x8d},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x08, 0x03, 0x7e},
    {0x0b, 0x42, 0x08, 0x43, 0x7e},
    {0x05, 0x44, 0x08, 0x03, 0x7e},
    {0x1a, 0x43, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x08, 0x43, 0x7e},
    {0xca, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x08, 0x03, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc6, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x08, 0x03, 0x7e},
    {0x02, 0x44, 0x08, 0x03, 0x7e},
    {0x07, 0x44, 0x08, 0x03, 0x7e},
    {0x0d, 0x42, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x48, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x08, 0x43, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x4b, 0x05, 0xb5, 0xbf},
    {0x0b, 0x48, 0x05, 0xf5, 0xbf},
    {0x05, 0x4b, 0x05, 0xb5, 0xbf},
    {0x0c, 0x46, 0x46, 0xb5, 0xae},
    {0x09, 0x48, 0x05, 0xf5, 0xbf},
    {0xda, 0x55, 0xb5, 0x40, 0x0d},
    {0x06, 0x4b, 0x05, 0xb5, 0xbf},
    {0x14, 0x41, 0x46, 0xf5, 0xae},
    {0xc2, 0x66, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x46, 0xf5, 0xae},
    {0x0e, 0x46, 0x46, 0xb5, 0xae},
    {0x1c, 0x41, 0x46, 0xf5, 0xae},
    {0x04, 0x4b, 0x05, 0xb5, 0xbf},
    {0x02, 0x4b, 0x05, 0xb5, 0xbf},
    {0x07, 0x4b, 0x05, 0xb5, 0xbf},
    {0x17, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0xb5, 0x6d},
    {0x1b, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0xb5, 0x6d},
    {0x67, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x46, 0x46, 0xb5, 0xae},
    {0xc9, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0xb5, 0x6d},
    {0x13, 0x41, 0x46, 0xf5, 0xae},
    {0x08, 0x48, 0x05, 0xf5, 0xbf},
    {0x77, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x66, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0x05, 0xf5, 0xbf},
    {0x04, 0x43, 0x15, 0xb5, 0x6d},
    {0x02, 0x43, 0x15, 0xb5, 0x6d},
    {0x07, 0x43, 0x15, 0xb5, 0x6d},
    {0x6d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0xc2, 0x46, 0xb5, 0x0e},
    {0x73, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x46, 0x46, 0xb5, 0xae},
    {0x7f, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0xb5, 0x6d},
    {0xd8, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x15, 0xb5, 0x6d},
    {0x6b, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x46, 0x46, 0xb5, 0xae},
    {0xd4, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x15, 0xb5, 0x6d},
    {0x01, 0x46, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0xb5, 0x40, 0x0d},
    {0xc1, 0xc2, 0x46, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0xb5, 0x6d},
    {0x02, 0x42, 0x15, 0xb5, 0x6d},
    {0x07, 0x42, 0x15, 0xb5, 0x6d},
    {0x5d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x03, 0x8e},
    {0x0b, 0x41, 0x04, 0x43, 0x8e},
    {0x05, 0x46, 0x04, 0x03, 0x8e},
    {0x0c, 0x43, 0x44, 0x03, 0x8e},
    {0x09, 0x41, 0x04, 0x43, 0x8e},
    {0xda, 0x51, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x03, 0x8e},
    {0x61, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x59, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x03, 0x8e},
    {0x7d, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x03, 0x8e},
    {0x02, 0x46, 0x04, 0x03, 0x8e},
    {0x07, 0x46, 0x04, 0x03, 0x8e},
    {0x6f, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x03, 0x6e},
    {0x7b, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x03, 0x6e},
    {0x69, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x03, 0x8e},
    {0xd0, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x11, 0x03, 0x6e},
    {0x5f, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x43, 0x8e},
    {0x79, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x59, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x11, 0x03, 0x6e},
    {0x02, 0x43, 0x11, 0x03, 0x6e},
    {0x07, 0x43, 0x11, 0x03, 0x6e},
    {0x16, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x03, 0x8e},
    {0xc5, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x11, 0x03, 0x6e},
    {0x12, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x03, 0x6e},
    {0x15, 0x41, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x03, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x03, 0x6e},
    {0x01, 0x43, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x03, 0x6e},
    {0x02, 0x42, 0x11, 0x03, 0x6e},
    {0x07, 0x42, 0x11, 0x03, 0x6e},
    {0xde, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x02, 0xb5, 0x9d},
    {0x0b, 0x45, 0x02, 0xf5, 0x9d},
    {0x05, 0x47, 0x02, 0xb5, 0x9d},
    {0x0c, 0x44, 0x42, 0xb5, 0x9d},
    {0x09, 0x45, 0x02, 0xf5, 0x9d},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0xb5, 0x9d},
    {0x14, 0x42, 0x42, 0xf5, 0x9d},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0xf5, 0x9d},
    {0x0e, 0x44, 0x42, 0xb5, 0x9d},
    {0x1c, 0x42, 0x42, 0xf5, 0x9d},
    {0x04, 0x47, 0x02, 0xb5, 0x9d},
    {0x02, 0x47, 0x02, 0xb5, 0x9d},
    {0x07, 0x47, 0x02, 0xb5, 0x9d},
    {0x17, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0xb5, 0x9d},
    {0xce, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0xf5, 0x9d},
    {0x08, 0x45, 0x02, 0xf5, 0x9d},
    {0x78, 0x03, 0x06, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0xb5, 0x9d},
    {0x40, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0xb5, 0x9d},
    {0xd6, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x03, 0x8e},
    {0x0b, 0x44, 0x04, 0x43, 0x8e},
    {0x05, 0x45, 0x04, 0x03, 0x8e},
    {0x0c, 0x42, 0x44, 0x03, 0x8e},
    {0x09, 0x44, 0x04, 0x43, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x03, 0x8e},
    {0x62, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x03, 0x8e},
    {0x7e, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x03, 0x8e},
    {0x02, 0x45, 0x04, 0x03, 0x8e},
    {0x07, 0x45, 0x04, 0x03, 0x8e},
    {0x70, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x03, 0x8e},
    {0xd2, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x43, 0x8e},
    {0x7a, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x44, 0x03, 0x8e},
    {0xc6, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x44, 0x03, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x45, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x03, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x45, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0x45, 0xf5, 0xbf},
    {0x0e, 0x47, 0x45, 0xb5, 0xbf},
    {0x1c, 0x45, 0x45, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x03, 0x6e},
    {0x1b, 0x45, 0x45, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x03, 0x6e},
    {0x67, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x47, 0x45, 0xb5, 0xbf},
    {0xc9, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x03, 0x6e},
    {0x13, 0x45, 0x45, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x05, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x03, 0x6e},
    {0x02, 0x43, 0x01, 0x03, 0x6e},
    {0x07, 0x43, 0x01, 0x03, 0x6e},
    {0x6d, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x03, 0x7e},
    {0x0b, 0x43, 0x0a, 0x43, 0x7e},
    {0x05, 0x41, 0x0a, 0x03, 0x7e},
    {0x75, 0x04, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x43, 0x7e},
    {0xc7, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x03, 0x7e},
    {0x63, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x45, 0xbf},
    {0x73, 0x04, 0x05, 0xb5, 0xbf},
    {0x0f, 0x47, 0x45, 0xb5, 0xbf},
    {0x7f, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x03, 0x7e},
    {0x02, 0x41, 0x0a, 0x03, 0x7e},
    {0x07, 0x41, 0x0a, 0x03, 0x7e},
    {0x0d, 0x47, 0x45, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x03, 0x6e},
    {0xd7, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0x03, 0x6e},
    {0x6b, 0x04, 0x05, 0xb5, 0xbf},
    {0x11, 0x47, 0x45, 0xb5, 0xbf},
    {0xd3, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0x03, 0x6e},
    {0x01, 0x47, 0x45, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x43, 0x7e},
    {0xc3, 0x41, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0x45, 0xbf},
    {0x0a, 0x43, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x01, 0x03, 0x6e},
    {0x02, 0x42, 0x01, 0x03, 0x6e},
    {0x07, 0x42, 0x01, 0x03, 0x6e},
    {0x5d, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x03, 0x8e},
    {0x0b, 0x41, 0x02, 0x43, 0x8e},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x0c, 0x43, 0x42, 0x03, 0x8e},
    {0x09, 0x41, 0x02, 0x43, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x61, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x52, 0x03, 0xb5, 0xee},
    {0x71, 0x04, 0x05, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x03, 0x8e},
    {0x7d, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x03, 0x8e},
    {0x02, 0x46, 0x02, 0x03, 0x8e},
    {0x07, 0x46, 0x02, 0x03, 0x8e},
    {0x6f, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x03, 0x8e},
    {0xcf, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0x05, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x43, 0x8e},
    {0x79, 0x04, 0x05, 0xb5, 0xbf},
    {0xc1, 0x52, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x03, 0x7e},
    {0x0b, 0x42, 0x0a, 0x43, 0x7e},
    {0x05, 0x44, 0x0a, 0x03, 0x7e},
    {0x1a, 0x45, 0x45, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x43, 0x7e},
    {0xcb, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0x03, 0x7e},
    {0x65, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x45, 0xbf},
    {0x19, 0x45, 0x45, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x03, 0x8e},
    {0xc5, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x03, 0x7e},
    {0x02, 0x44, 0x0a, 0x03, 0x7e},
    {0x07, 0x44, 0x0a, 0x03, 0x7e},
    {0x0d, 0x43, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0x45, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0x45, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x03, 0x8e},
    {0xc4, 0x4a, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x0a, 0x43, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x45, 0xbf},
    {0x0a, 0x42, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0xf5, 0x9d},
    {0x05, 0x48, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0xb5, 0x9d},
    {0x09, 0x46, 0x07, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0xf5, 0x9d},
    {0xc2, 0x55, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0xf5, 0x9d},
    {0x0e, 0x41, 0x47, 0xb5, 0x9d},
    {0x1c, 0x43, 0x47, 0xf5, 0x9d},
    {0x04, 0x48, 0x06, 0xb5, 0xae},
    {0x02, 0x48, 0x06, 0xb5, 0xae},
    {0x07, 0x48, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x41, 0x47, 0xb5, 0x9d},
    {0xcd, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0xf5, 0x9d},
    {0x08, 0x46, 0x07, 0xf5, 0x9d},
    {0x78, 0x04, 0x05, 0xb5, 0xbf},
    {0xc1, 0x55, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0x05, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0x05, 0xb5, 0xbf},
    {0x0f, 0x41, 0x47, 0xb5, 0x9d},
    {0x40, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x05, 0xb5, 0xbf},
    {0x11, 0x41, 0x47, 0xb5, 0x9d},
    {0xd5, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x03, 0x8e},
    {0x0b, 0x44, 0x02, 0x43, 0x8e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x0c, 0x42, 0x42, 0x03, 0x8e},
    {0x09, 0x44, 0x02, 0x43, 0x8e},
    {0xda, 0xc1, 0x45, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x62, 0x04, 0x05, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x05, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x03, 0x8e},
    {0x7e, 0x04, 0x05, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x03, 0x8e},
    {0x02, 0x45, 0x02, 0x03, 0x8e},
    {0x07, 0x45, 0x02, 0x03, 0x8e},
    {0x70, 0x04, 0x05, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x05, 0x6f},
    {0x7c, 0x04, 0x05, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x05, 0x6f},
    {0x6a, 0x04, 0x05, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x03, 0x8e},
    {0xd1, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0x05, 0x6f},
    {0x60, 0x04, 0x05, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x43, 0x8e},
    {0x7a, 0x04, 0x05, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x81, 0x05, 0x6f},
    {0x02, 0x43, 0x81, 0x05, 0x6f},
    {0x07, 0x43, 0x81, 0x05, 0x6f},
    {0x16, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0x05, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x45, 0xbf},
    {0x19, 0x43, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0x03, 0x8e},
    {0xc6, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x81, 0x05, 0x6f},
    {0x12, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0x05, 0x6f},
    {0x15, 0x43, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0x03, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x05, 0x6f},
    {0x01, 0x42, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0xc3, 0xc1, 0x45, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x45, 0xbf},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0x05, 0x6f},
    {0x02, 0x42, 0x81, 0x05, 0x6f},
    {0x07, 0x42, 0x81, 0x05, 0x6f},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0x05, 0xb5, 0xbf},
    {0x0b, 0x47, 0x06, 0xf5, 0xae},
    {0x05, 0x4c, 0x05, 0xb5, 0xbf},
    {0x0c, 0x45, 0x46, 0xb5, 0xae},
    {0x09, 0x47, 0x06, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0x05, 0xb5, 0xbf},
    {0x14, 0x44, 0x46, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x46, 0xf5, 0xae},
    {0x0e, 0x45, 0x46, 0xb5, 0xae},
    {0x1c, 0x44, 0x46, 0xf5, 0xae},
    {0x04, 0x4c, 0x05, 0xb5, 0xbf},
    {0x02, 0x4c, 0x05, 0xb5, 0xbf},
    {0x07, 0x4c, 0x05, 0xb5, 0xbf},
    {0x17, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x45, 0x46, 0xb5, 0xae},
    {0xc9, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x46, 0xf5, 0xae},
    {0x08, 0x47, 0x06, 0xf5, 0xae},
    {0x77, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x06, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x45, 0x46, 0xb5, 0xae},
    {0x7f, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x45, 0x46, 0xb5, 0xae},
    {0xd4, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x03, 0x8e},
    {0x0b, 0x41, 0x07, 0x43, 0x8e},
    {0x05, 0x46, 0x07, 0x03, 0x8e},
    {0x0c, 0x43, 0x47, 0x03, 0x8e},
    {0x09, 0x41, 0x07, 0x43, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x03, 0x8e},
    {0x61, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0xc3, 0x45, 0xf5, 0x0f},
    {0x71, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x03, 0x8e},
    {0x7d, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x03, 0x8e},
    {0x02, 0x46, 0x07, 0x03, 0x8e},
    {0x07, 0x46, 0x07, 0x03, 0x8e},
    {0x6f, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x03, 0x8e},
    {0xd0, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x43, 0x8e},
    {0x79, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0xc3, 0x45, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0xc1, 0x46, 0xb5, 0x0e},
    {0x19, 0x44, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x03, 0x8e},
    {0xc5, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x03, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x46, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0xb5, 0x9d},
    {0x0b, 0x45, 0x07, 0xf5, 0x9d},
    {0x05, 0x47, 0x07, 0xb5, 0x9d},
    {0x0c, 0x44, 0x47, 0xb5, 0x9d},
    {0x09, 0x45, 0x07, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0xb5, 0x9d},
    {0x14, 0x42, 0x47, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0xf5, 0x9d},
    {0x0e, 0x44, 0x47, 0xb5, 0x9d},
    {0x1c, 0x42, 0x47, 0xf5, 0x9d},
    {0x04, 0x47, 0x07, 0xb5, 0x9d},
    {0x02, 0x47, 0x07, 0xb5, 0x9d},
    {0x07, 0x47, 0x07, 0xb5, 0x9d},
    {0x17, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0xb5, 0x9d},
    {0xce, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0xf5, 0x9d},
    {0x08, 0x45, 0x07, 0xf5, 0x9d},
    {0x78, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x45, 0xbf},
    {0x74, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0xb5, 0x9d},
    {0x40, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0xb5, 0x9d},
    {0xd6, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x45, 0xbf},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x03, 0x8e},
    {0x0b, 0x44, 0x07, 0x43, 0x8e},
    {0x05, 0x45, 0x07, 0x03, 0x8e},
    {0x0c, 0x42, 0x47, 0x03, 0x8e},
    {0x09, 0x44, 0x07, 0x43, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x03, 0x8e},
    {0x62, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x45, 0xbf},
    {0x72, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x03, 0x8e},
    {0x7e, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x03, 0x8e},
    {0x02, 0x45, 0x07, 0x03, 0x8e},
    {0x07, 0x45, 0x07, 0x03, 0x8e},
    {0x70, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x03, 0x8e},
    {0xd2, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x43, 0x8e},
    {0x7a, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x45, 0xbf},
    {0x0a, 0x44, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x45, 0xbf},
    {0x19, 0x42, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0x03, 0x8e},
    {0xc6, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0x03, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x45, 0xbf},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0e},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf2, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf2, 0x00, 0x40, 0x05},
    {0x9a, 0xb5, 0x00, 0x00, 0x06},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb2, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb5, 0x00, 0x66},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb5, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0xb5, 0x00, 0x66},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf2, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb2, 0x00, 0x00, 0x05},
    {0x0a, 0xf2, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb5, 0x00, 0x66},
    {0x02, 0x43, 0xb5, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x1d, 0xb5, 0x7f},
    {0x0b, 0x43, 0x1d, 0xf5, 0x7f},
    {0x05, 0x41, 0x1d, 0xb5, 0x7f},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x1d, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x1d, 0xb5, 0x7f},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x1d, 0xb5, 0x7f},
    {0x02, 0x41, 0x1d, 0xb5, 0x7f},
    {0x07, 0x41, 0x1d, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb5, 0x00, 0x66},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0xb5, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0xb5, 0x00, 0x66},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x1d, 0xf5, 0x7f},
    {0x83, 0xb5, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x1d, 0xf5, 0x7f},
    {0x04, 0x42, 0xb5, 0x00, 0x66},
    {0x02, 0x42, 0xb5, 0x00, 0x66},
    {0x07, 0x42, 0xb5, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0xf5, 0x00, 0x0a},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0xb5, 0x6a},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0xb5, 0x6a},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0xb5, 0x6a},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0xf5, 0x00, 0x0a},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0xb5, 0x6a},
    {0x02, 0x43, 0x03, 0xb5, 0x6a},
    {0x07, 0x43, 0x03, 0xb5, 0x6a},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x1d, 0xb5, 0x7f},
    {0x0b, 0x42, 0x1d, 0xf5, 0x7f},
    {0x05, 0x44, 0x1d, 0xb5, 0x7f},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x1d, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x1d, 0xb5, 0x7f},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x1d, 0xb5, 0x7f},
    {0x02, 0x44, 0x1d, 0xb5, 0x7f},
    {0x07, 0x44, 0x1d, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0xb5, 0x6a},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0xb5, 0x6a},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x5d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0xb5, 0x6a},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x1d, 0xf5, 0x7f},
    {0xc3, 0x03, 0xf5, 0x00, 0x0a},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x1d, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0xb5, 0x6a},
    {0x02, 0x42, 0x03, 0xb5, 0x6a},
    {0x07, 0x42, 0x03, 0xb5, 0x6a},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x46, 0xf5, 0xff},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x46, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x06, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x06, 0x6f},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x06, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0x46, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x06, 0x6f},
    {0x02, 0x43, 0x0b, 0x06, 0x6f},
    {0x07, 0x43, 0x0b, 0x06, 0x6f},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0x06, 0x7f},
    {0x0b, 0x43, 0x03, 0x46, 0x7f},
    {0x05, 0x41, 0x03, 0x06, 0x7f},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0x46, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x06, 0x7f},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0xf5, 0x00, 0x0a},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0x06, 0x7f},
    {0x02, 0x41, 0x03, 0x06, 0x7f},
    {0x07, 0x41, 0x03, 0x06, 0x7f},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x06, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x06, 0x6f},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x06, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x46, 0x7f},
    {0xc3, 0x0b, 0x46, 0xf5, 0xff},
    {0xc1, 0x09, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x03, 0x46, 0x7f},
    {0x04, 0x42, 0x0b, 0x06, 0x6f},
    {0x02, 0x42, 0x0b, 0x06, 0x6f},
    {0x07, 0x42, 0x0b, 0x06, 0x6f},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0xb5, 0x6a},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x6a},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0xb5, 0x6a},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0xb5, 0x6a},
    {0x02, 0x43, 0x05, 0xb5, 0x6a},
    {0x07, 0x43, 0x05, 0xb5, 0x6a},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x06, 0x7f},
    {0x0b, 0x42, 0x03, 0x46, 0x7f},
    {0x05, 0x44, 0x03, 0x06, 0x7f},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x46, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x06, 0x7f},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x06, 0x7f},
    {0x02, 0x44, 0x03, 0x06, 0x7f},
    {0x07, 0x44, 0x03, 0x06, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0xb5, 0x6a},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0xb5, 0x6a},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x05, 0xb5, 0x6a},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x46, 0x7f},
    {0xc3, 0x05, 0xf5, 0x00, 0x0a},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0x46, 0x7f},
    {0x04, 0x42, 0x05, 0xb5, 0x6a},
    {0x02, 0x42, 0x05, 0xb5, 0x6a},
    {0x07, 0x42, 0x05, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x01, 0xb5, 0xff},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x01, 0xb5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x01, 0x6f},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x01, 0x6f},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x0c, 0x01, 0x6f},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x01, 0xb5, 0xff},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x01, 0x6f},
    {0x02, 0x43, 0x0c, 0x01, 0x6f},
    {0x07, 0x43, 0x0c, 0x01, 0x6f},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x01, 0x7f},
    {0x0b, 0x43, 0x0b, 0x41, 0x7f},
    {0x05, 0x41, 0x0b, 0x01, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x41, 0x7f},
    {0xc7, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x0b, 0x01, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x01, 0x7f},
    {0x02, 0x41, 0x0b, 0x01, 0x7f},
    {0x07, 0x41, 0x0b, 0x01, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x01, 0x6f},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x01, 0x6f},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x01, 0x6f},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x41, 0x7f},
    {0xc3, 0x4c, 0x01, 0xb5, 0xff},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x41, 0x7f},
    {0x04, 0x42, 0x0c, 0x01, 0x6f},
    {0x02, 0x42, 0x0c, 0x01, 0x6f},
    {0x07, 0x42, 0x0c, 0x01, 0x6f},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x01, 0x8f},
    {0x0b, 0x41, 0x03, 0x41, 0x8f},
    {0x05, 0x46, 0x03, 0x01, 0x8f},
    {0x0c, 0x43, 0x43, 0x01, 0x8f},
    {0x09, 0x41, 0x03, 0x41, 0x8f},
    {0xda, 0x09, 0x46, 0xf5, 0xff},
    {0x06, 0x46, 0x03, 0x01, 0x8f},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x01, 0xb5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x01, 0x8f},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x01, 0x8f},
    {0x02, 0x46, 0x03, 0x01, 0x8f},
    {0x07, 0x46, 0x03, 0x01, 0x8f},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x06, 0x6f},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x06, 0x6f},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x01, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x06, 0x6f},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x41, 0x8f},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x03, 0x41, 0x8f},
    {0x04, 0x43, 0x09, 0x06, 0x6f},
    {0x02, 0x43, 0x09, 0x06, 0x6f},
    {0x07, 0x43, 0x09, 0x06, 0x6f},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x01, 0x7f},
    {0x0b, 0x42, 0x0b, 0x41, 0x7f},
    {0x05, 0x44, 0x0b, 0x01, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x41, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x01, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x46, 0xf5, 0xff},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x01, 0x8f},
    {0xc5, 0x43, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x0b, 0x01, 0x7f},
    {0x02, 0x44, 0x0b, 0x01, 0x7f},
    {0x07, 0x44, 0x0b, 0x01, 0x7f},
    {0x0d, 0x43, 0x43, 0x01, 0x8f},
    {0x03, 0x42, 0x09, 0x06, 0x6f},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x06, 0x6f},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x01, 0x8f},
    {0xc4, 0x4b, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x09, 0x06, 0x6f},
    {0x01, 0x43, 0x43, 0x01, 0x8f},
    {0x08, 0x42, 0x0b, 0x41, 0x7f},
    {0xc3, 0x09, 0x46, 0xf5, 0xff},
    {0xc1, 0x0e, 0x46, 0xf5, 0xff},
    {0x0a, 0x42, 0x0b, 0x41, 0x7f},
    {0x04, 0x42, 0x09, 0x06, 0x6f},
    {0x02, 0x42, 0x09, 0x06, 0x6f},
    {0x07, 0x42, 0x09, 0x06, 0x6f},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x01, 0xb5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x01, 0xb5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x06, 0x7f},
    {0x0b, 0x43, 0x05, 0x46, 0x7f},
    {0x05, 0x41, 0x05, 0x06, 0x7f},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x46, 0x7f},
    {0xc8, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x05, 0x06, 0x7f},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x06, 0x7f},
    {0x02, 0x41, 0x05, 0x06, 0x7f},
    {0x07, 0x41, 0x05, 0x06, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x46, 0x7f},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0x46, 0x7f},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x01, 0x8f},
    {0x0b, 0x44, 0x03, 0x41, 0x8f},
    {0x05, 0x45, 0x03, 0x01, 0x8f},
    {0x0c, 0x42, 0x43, 0x01, 0x8f},
    {0x09, 0x44, 0x03, 0x41, 0x8f},
    {0xda, 0x06, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x03, 0x01, 0x8f},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x01, 0x8f},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x01, 0x8f},
    {0x02, 0x45, 0x03, 0x01, 0x8f},
    {0x07, 0x45, 0x03, 0x01, 0x8f},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0xb5, 0x6a},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0xb5, 0x6a},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x01, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0xb5, 0x6a},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x41, 0x8f},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0x41, 0x8f},
    {0x04, 0x43, 0x06, 0xb5, 0x6a},
    {0x02, 0x43, 0x06, 0xb5, 0x6a},
    {0x07, 0x43, 0x06, 0xb5, 0x6a},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x06, 0x7f},
    {0x0b, 0x42, 0x05, 0x46, 0x7f},
    {0x05, 0x44, 0x05, 0x06, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x46, 0x7f},
    {0xca, 0x43, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x05, 0x06, 0x7f},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x01, 0x8f},
    {0xc6, 0x43, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x05, 0x06, 0x7f},
    {0x02, 0x44, 0x05, 0x06, 0x7f},
    {0x07, 0x44, 0x05, 0x06, 0x7f},
    {0x0d, 0x42, 0x43, 0x01, 0x8f},
    {0x03, 0x42, 0x06, 0xb5, 0x6a},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0xb5, 0x6a},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x01, 0x8f},
    {0xc4, 0x05, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0xb5, 0x6a},
    {0x01, 0x42, 0x43, 0x01, 0x8f},
    {0x08, 0x42, 0x05, 0x46, 0x7f},
    {0xc3, 0x06, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0x46, 0x7f},
    {0x04, 0x42, 0x06, 0xb5, 0x6a},
    {0x02, 0x42, 0x06, 0xb5, 0x6a},
    {0x07, 0x42, 0x06, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0x03, 0xf5, 0xff},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x01, 0xb5, 0xff},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0x03, 0x6f},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0x03, 0x6f},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x14, 0x03, 0x6f},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x01, 0xb5, 0xff},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0x03, 0x6f},
    {0x02, 0x43, 0x14, 0x03, 0x6f},
    {0x07, 0x43, 0x14, 0x03, 0x6f},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0x03, 0x7f},
    {0x0b, 0x43, 0x0c, 0x43, 0x7f},
    {0x05, 0x41, 0x0c, 0x03, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0x43, 0x7f},
    {0xc7, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x0c, 0x03, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0x03, 0x7f},
    {0x02, 0x41, 0x0c, 0x03, 0x7f},
    {0x07, 0x41, 0x0c, 0x03, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0x03, 0x6f},
    {0xd7, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x14, 0x03, 0x6f},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x14, 0x03, 0x6f},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0x43, 0x7f},
    {0xc3, 0x54, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0x43, 0x7f},
    {0x04, 0x42, 0x14, 0x03, 0x6f},
    {0x02, 0x42, 0x14, 0x03, 0x6f},
    {0x07, 0x42, 0x14, 0x03, 0x6f},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0x03, 0x8f},
    {0x0b, 0x41, 0x0b, 0x43, 0x8f},
    {0x05, 0x46, 0x0b, 0x03, 0x8f},
    {0x0c, 0x43, 0x4b, 0x03, 0x8f},
    {0x09, 0x41, 0x0b, 0x43, 0x8f},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0x03, 0x8f},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x01, 0xb5, 0xff},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0x03, 0x8f},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0x03, 0x8f},
    {0x02, 0x46, 0x0b, 0x03, 0x8f},
    {0x07, 0x46, 0x0b, 0x03, 0x8f},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0x03, 0x8f},
    {0xcf, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0x43, 0x8f},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x0b, 0x43, 0x8f},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0x03, 0x7f},
    {0x0b, 0x42, 0x0c, 0x43, 0x7f},
    {0x05, 0x44, 0x0c, 0x03, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0x43, 0x7f},
    {0xcb, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0c, 0x03, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0x03, 0x8f},
    {0xc5, 0x4b, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x0c, 0x03, 0x7f},
    {0x02, 0x44, 0x0c, 0x03, 0x7f},
    {0x07, 0x44, 0x0c, 0x03, 0x7f},
    {0x0d, 0x43, 0x4b, 0x03, 0x8f},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0x03, 0x8f},
    {0xc4, 0x4c, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0x03, 0x8f},
    {0x08, 0x42, 0x0c, 0x43, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0x43, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0x43, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0x03, 0x9f},
    {0x09, 0x46, 0x03, 0x43, 0x9f},
    {0xda, 0x58, 0x03, 0xf5, 0xff},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0x43, 0x9f},
    {0xc2, 0x67, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x43, 0x43, 0x9f},
    {0x0e, 0x41, 0x43, 0x03, 0x9f},
    {0x1c, 0x43, 0x43, 0x43, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0x43, 0x9f},
    {0x03, 0x43, 0x18, 0x03, 0x6f},
    {0x1b, 0x43, 0x43, 0x43, 0x9f},
    {0x05, 0x43, 0x18, 0x03, 0x6f},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0x03, 0x9f},
    {0xcd, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x18, 0x03, 0x6f},
    {0x13, 0x43, 0x43, 0x43, 0x9f},
    {0x08, 0x46, 0x03, 0x43, 0x9f},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x03, 0x43, 0x9f},
    {0x04, 0x43, 0x18, 0x03, 0x6f},
    {0x02, 0x43, 0x18, 0x03, 0x6f},
    {0x07, 0x43, 0x18, 0x03, 0x6f},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x01, 0x7f},
    {0x0b, 0x43, 0x09, 0x41, 0x7f},
    {0x05, 0x41, 0x09, 0x01, 0x7f},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x41, 0x7f},
    {0xc8, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x09, 0x01, 0x7f},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x46, 0xf5, 0xff},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0x03, 0x9f},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x01, 0x7f},
    {0x02, 0x41, 0x09, 0x01, 0x7f},
    {0x07, 0x41, 0x09, 0x01, 0x7f},
    {0x0d, 0x41, 0x43, 0x03, 0x9f},
    {0x03, 0x42, 0x18, 0x03, 0x6f},
    {0xd9, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x18, 0x03, 0x6f},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0x03, 0x9f},
    {0xd5, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x18, 0x03, 0x6f},
    {0x01, 0x41, 0x43, 0x03, 0x9f},
    {0x08, 0x43, 0x09, 0x41, 0x7f},
    {0xc3, 0x58, 0x03, 0xf5, 0xff},
    {0xc1, 0x10, 0x46, 0xf5, 0xff},
    {0x0a, 0x43, 0x09, 0x41, 0x7f},
    {0x04, 0x42, 0x18, 0x03, 0x6f},
    {0x02, 0x42, 0x18, 0x03, 0x6f},
    {0x07, 0x42, 0x18, 0x03, 0x6f},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0x03, 0x8f},
    {0x0b, 0x44, 0x0b, 0x43, 0x8f},
    {0x05, 0x45, 0x0b, 0x03, 0x8f},
    {0x0c, 0x42, 0x4b, 0x03, 0x8f},
    {0x09, 0x44, 0x0b, 0x43, 0x8f},
    {0xda, 0x4e, 0x01, 0xb5, 0xff},
    {0x06, 0x45, 0x0b, 0x03, 0x8f},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0x03, 0x8f},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0x03, 0x8f},
    {0x02, 0x45, 0x0b, 0x03, 0x8f},
    {0x07, 0x45, 0x0b, 0x03, 0x8f},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x01, 0x6f},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x01, 0x6f},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0x03, 0x8f},
    {0xd1, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x0e, 0x01, 0x6f},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0x43, 0x8f},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0x43, 0x8f},
    {0x04, 0x43, 0x0e, 0x01, 0x6f},
    {0x02, 0x43, 0x0e, 0x01, 0x6f},
    {0x07, 0x43, 0x0e, 0x01, 0x6f},
    {0x16, 0x43, 0x43, 0x43, 0x9f},
    {0x03, 0x44, 0x09, 0x01, 0x7f},
    {0x0b, 0x42, 0x09, 0x41, 0x7f},
    {0x05, 0x44, 0x09, 0x01, 0x7f},
    {0x1a, 0x43, 0x43, 0x43, 0x9f},
    {0x09, 0x42, 0x09, 0x41, 0x7f},
    {0xca, 0x4b, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x09, 0x01, 0x7f},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0x43, 0x9f},
    {0x0f, 0x42, 0x4b, 0x03, 0x8f},
    {0xc6, 0x4b, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x09, 0x01, 0x7f},
    {0x02, 0x44, 0x09, 0x01, 0x7f},
    {0x07, 0x44, 0x09, 0x01, 0x7f},
    {0x0d, 0x42, 0x4b, 0x03, 0x8f},
    {0x03, 0x42, 0x0e, 0x01, 0x6f},
    {0x12, 0x43, 0x43, 0x43, 0x9f},
    {0x05, 0x42, 0x0e, 0x01, 0x6f},
    {0x15, 0x43, 0x43, 0x43, 0x9f},
    {0x11, 0x42, 0x4b, 0x03, 0x8f},
    {0xc4, 0x49, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x0e, 0x01, 0x6f},
    {0x01, 0x42, 0x4b, 0x03, 0x8f},
    {0x08, 0x42, 0x09, 0x41, 0x7f},
    {0xc3, 0x4e, 0x01, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x41, 0x7f},
    {0x04, 0x42, 0x0e, 0x01, 0x6f},
    {0x02, 0x42, 0x0e, 0x01, 0x6f},
    {0x07, 0x42, 0x0e, 0x01, 0x6f},
    {0xf4, 0x43, 0x03, 0xf5, 0xff},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0x03, 0xf5, 0xff},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x01, 0xb5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0x03, 0x6f},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0x03, 0x6f},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x1c, 0x03, 0x6f},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x01, 0xb5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0x03, 0x6f},
    {0x02, 0x43, 0x1c, 0x03, 0x6f},
    {0x07, 0x43, 0x1c, 0x03, 0x6f},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0xf5, 0x00, 0x0a},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0x03, 0x6f},
    {0xd8, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x1c, 0x03, 0x6f},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x1c, 0x03, 0x6f},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0x03, 0xf5, 0xff},
    {0xc1, 0x08, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0x03, 0x6f},
    {0x02, 0x42, 0x1c, 0x03, 0x6f},
    {0x07, 0x42, 0x1c, 0x03, 0x6f},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x01, 0x8f},
    {0x0b, 0x41, 0x05, 0x41, 0x8f},
    {0x05, 0x46, 0x05, 0x01, 0x8f},
    {0x0c, 0x43, 0x45, 0x01, 0x8f},
    {0x09, 0x41, 0x05, 0x41, 0x8f},
    {0xda, 0x04, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0x05, 0x01, 0x8f},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x01, 0x8f},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x01, 0x8f},
    {0x02, 0x46, 0x05, 0x01, 0x8f},
    {0x07, 0x46, 0x05, 0x01, 0x8f},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0xb5, 0x6a},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0xb5, 0x6a},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x01, 0x8f},
    {0xd0, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0xb5, 0x6a},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x41, 0x8f},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x41, 0x8f},
    {0x04, 0x43, 0x04, 0xb5, 0x6a},
    {0x02, 0x43, 0x04, 0xb5, 0x6a},
    {0x07, 0x43, 0x04, 0xb5, 0x6a},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x01, 0x8f},
    {0xc5, 0x45, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0x01, 0x8f},
    {0x03, 0x42, 0x04, 0xb5, 0x6a},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0xb5, 0x6a},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x01, 0x8f},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0xb5, 0x6a},
    {0x01, 0x43, 0x45, 0x01, 0x8f},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0xf5, 0x00, 0x0a},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0xb5, 0x6a},
    {0x02, 0x42, 0x04, 0xb5, 0x6a},
    {0x07, 0x42, 0x04, 0xb5, 0x6a},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0x03, 0x9f},
    {0x0b, 0x45, 0x03, 0x43, 0x9f},
    {0x05, 0x47, 0x03, 0x03, 0x9f},
    {0x0c, 0x44, 0x43, 0x03, 0x9f},
    {0x09, 0x45, 0x03, 0x43, 0x9f},
    {0xda, 0x02, 0xf5, 0x00, 0x0a},
    {0x06, 0x47, 0x03, 0x03, 0x9f},
    {0x14, 0x42, 0x43, 0x43, 0x9f},
    {0xc2, 0x0a, 0xf5, 0x00, 0x0a},
    {0x18, 0x42, 0x43, 0x43, 0x9f},
    {0x0e, 0x44, 0x43, 0x03, 0x9f},
    {0x1c, 0x42, 0x43, 0x43, 0x9f},
    {0x04, 0x47, 0x03, 0x03, 0x9f},
    {0x02, 0x47, 0x03, 0x03, 0x9f},
    {0x07, 0x47, 0x03, 0x03, 0x9f},
    {0x17, 0x42, 0x43, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0xb5, 0x6a},
    {0x1b, 0x42, 0x43, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0xb5, 0x6a},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0x03, 0x9f},
    {0xce, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0xb5, 0x6a},
    {0x13, 0x42, 0x43, 0x43, 0x9f},
    {0x08, 0x45, 0x03, 0x43, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0xf5, 0x00, 0x0a},
    {0x0a, 0x45, 0x03, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0xb5, 0x6a},
    {0x02, 0x43, 0x02, 0xb5, 0x6a},
    {0x07, 0x43, 0x02, 0xb5, 0x6a},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x06, 0x7f},
    {0x0b, 0x43, 0x06, 0x46, 0x7f},
    {0x05, 0x41, 0x06, 0x06, 0x7f},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x46, 0x7f},
    {0xc8, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x06, 0x06, 0x7f},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0x03, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x06, 0x7f},
    {0x02, 0x41, 0x06, 0x06, 0x7f},
    {0x07, 0x41, 0x06, 0x06, 0x7f},
    {0x0d, 0x44, 0x43, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0xb5, 0x6a},
    {0xdb, 0x43, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0xb5, 0x6a},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0x03, 0x9f},
    {0xd6, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0xb5, 0x6a},
    {0x01, 0x44, 0x43, 0x03, 0x9f},
    {0x08, 0x43, 0x06, 0x46, 0x7f},
    {0xc3, 0x02, 0xf5, 0x00, 0x0a},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x46, 0x7f},
    {0x04, 0x42, 0x02, 0xb5, 0x6a},
    {0x02, 0x42, 0x02, 0xb5, 0x6a},
    {0x07, 0x42, 0x02, 0xb5, 0x6a},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x01, 0x8f},
    {0x0b, 0x44, 0x05, 0x41, 0x8f},
    {0x05, 0x45, 0x05, 0x01, 0x8f},
    {0x0c, 0x42, 0x45, 0x01, 0x8f},
    {0x09, 0x44, 0x05, 0x41, 0x8f},
    {0xda, 0x07, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x05, 0x01, 0x8f},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x01, 0x8f},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x01, 0x8f},
    {0x02, 0x45, 0x05, 0x01, 0x8f},
    {0x07, 0x45, 0x05, 0x01, 0x8f},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0xb5, 0x6a},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0xb5, 0x6a},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x01, 0x8f},
    {0xd2, 0x43, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0xb5, 0x6a},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x41, 0x8f},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x41, 0x8f},
    {0x04, 0x43, 0x07, 0xb5, 0x6a},
    {0x02, 0x43, 0x07, 0xb5, 0x6a},
    {0x07, 0x43, 0x07, 0xb5, 0x6a},
    {0x16, 0x42, 0x43, 0x43, 0x9f},
    {0x03, 0x44, 0x06, 0x06, 0x7f},
    {0x0b, 0x42, 0x06, 0x46, 0x7f},
    {0x05, 0x44, 0x06, 0x06, 0x7f},
    {0x1a, 0x42, 0x43, 0x43, 0x9f},
    {0x09, 0x42, 0x06, 0x46, 0x7f},
    {0xca, 0x45, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x06, 0x06, 0x7f},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0x43, 0x9f},
    {0x0f, 0x42, 0x45, 0x01, 0x8f},
    {0xc6, 0x45, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x06, 0x06, 0x7f},
    {0x02, 0x44, 0x06, 0x06, 0x7f},
    {0x07, 0x44, 0x06, 0x06, 0x7f},
    {0x0d, 0x42, 0x45, 0x01, 0x8f},
    {0x03, 0x42, 0x07, 0xb5, 0x6a},
    {0x12, 0x42, 0x43, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0xb5, 0x6a},
    {0x15, 0x42, 0x43, 0x43, 0x9f},
    {0x11, 0x42, 0x45, 0x01, 0x8f},
    {0xc4, 0x06, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0xb5, 0x6a},
    {0x01, 0x42, 0x45, 0x01, 0x8f},
    {0x08, 0x42, 0x06, 0x46, 0x7f},
    {0xc3, 0x07, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x46, 0x7f},
    {0x04, 0x42, 0x07, 0xb5, 0x6a},
    {0x02, 0x42, 0x07, 0xb5, 0x6a},
    {0x07, 0x42, 0x07, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0x03, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0x03, 0xf5, 0xff},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0x03, 0x6f},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0x03, 0x6f},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x17, 0x03, 0x6f},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0x03, 0xf5, 0xff},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0x03, 0x6f},
    {0x02, 0x43, 0x17, 0x03, 0x6f},
    {0x07, 0x43, 0x17, 0x03, 0x6f},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x21, 0xb5, 0x7f},
    {0x0b, 0x43, 0x21, 0xf5, 0x7f},
    {0x05, 0x41, 0x21, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x21, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x21, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x21, 0xb5, 0x7f},
    {0x02, 0x41, 0x21, 0xb5, 0x7f},
    {0x07, 0x41, 0x21, 0xb5, 0x7f},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0x03, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x17, 0x03, 0x6f},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x17, 0x03, 0x6f},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x21, 0xf5, 0x7f},
    {0xc3, 0x57, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x21, 0xf5, 0x7f},
    {0x04, 0x42, 0x17, 0x03, 0x6f},
    {0x02, 0x42, 0x17, 0x03, 0x6f},
    {0x07, 0x42, 0x17, 0x03, 0x6f},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x21, 0xb5, 0x7f},
    {0x0b, 0x42, 0x21, 0xf5, 0x7f},
    {0x05, 0x44, 0x21, 0xb5, 0x7f},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x21, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x21, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x21, 0xb5, 0x7f},
    {0x02, 0x44, 0x21, 0xb5, 0x7f},
    {0x07, 0x44, 0x21, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x61, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x21, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x21, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x82, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x82, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x5b, 0x03, 0xf5, 0xff},
    {0x06, 0x49, 0x82, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x75, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x82, 0xb5, 0xaf},
    {0x02, 0x49, 0x82, 0xb5, 0xaf},
    {0x07, 0x49, 0x82, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x1b, 0x03, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x1b, 0x03, 0x6f},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x1b, 0x03, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x1b, 0x03, 0x6f},
    {0x02, 0x43, 0x1b, 0x03, 0x6f},
    {0x07, 0x43, 0x1b, 0x03, 0x6f},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x1b, 0x03, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1b, 0x03, 0x6f},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1b, 0x03, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0x03, 0xf5, 0xff},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0x03, 0x6f},
    {0x02, 0x42, 0x1b, 0x03, 0x6f},
    {0x07, 0x42, 0x1b, 0x03, 0x6f},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xc2, 0xb5, 0xaf},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x68, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xc2, 0xf5, 0xaf},
    {0xc2, 0x63, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0xc2, 0xf5, 0xaf},
    {0x0e, 0x46, 0xc2, 0xb5, 0xaf},
    {0x1c, 0x41, 0xc2, 0xf5, 0xaf},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xc2, 0xf5, 0xaf},
    {0x03, 0x43, 0x28, 0xb5, 0x6e},
    {0x1b, 0x41, 0xc2, 0xf5, 0xaf},
    {0x05, 0x43, 0x28, 0xb5, 0x6e},
    {0x67, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x46, 0xc2, 0xb5, 0xaf},
    {0xc9, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x28, 0xb5, 0x6e},
    {0x13, 0x41, 0xc2, 0xf5, 0xaf},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x63, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x28, 0xb5, 0x6e},
    {0x02, 0x43, 0x28, 0xb5, 0x6e},
    {0x07, 0x43, 0x28, 0xb5, 0x6e},
    {0x6d, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x31, 0xb5, 0x7f},
    {0x0b, 0x43, 0x31, 0xf5, 0x7f},
    {0x05, 0x41, 0x31, 0xb5, 0x7f},
    {0x75, 0x03, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x31, 0xf5, 0x7f},
    {0xc7, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x31, 0xb5, 0x7f},
    {0x63, 0x03, 0x82, 0xb5, 0xaf},
    {0x82, 0x82, 0x82, 0xb5, 0x0f},
    {0x73, 0x03, 0x82, 0xb5, 0xaf},
    {0x0f, 0x46, 0xc2, 0xb5, 0xaf},
    {0x7f, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x31, 0xb5, 0x7f},
    {0x02, 0x41, 0x31, 0xb5, 0x7f},
    {0x07, 0x41, 0x31, 0xb5, 0x7f},
    {0x0d, 0x46, 0xc2, 0xb5, 0xaf},
    {0x03, 0x42, 0x28, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x28, 0xb5, 0x6e},
    {0x6b, 0x03, 0x82, 0xb5, 0xaf},
    {0x11, 0x46, 0xc2, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x28, 0xb5, 0x6e},
    {0x01, 0x46, 0xc2, 0xb5, 0xaf},
    {0x08, 0x43, 0x31, 0xf5, 0x7f},
    {0xc3, 0x68, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0x82, 0xb5, 0x0f},
    {0x0a, 0x43, 0x31, 0xf5, 0x7f},
    {0x04, 0x42, 0x28, 0xb5, 0x6e},
    {0x02, 0x42, 0x28, 0xb5, 0x6e},
    {0x07, 0x42, 0x28, 0xb5, 0x6e},
    {0x5d, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x46, 0x09, 0x03, 0x8f},
    {0x0b, 0x41, 0x09, 0x43, 0x8f},
    {0x05, 0x46, 0x09, 0x03, 0x8f},
    {0x0c, 0x43, 0x49, 0x03, 0x8f},
    {0x09, 0x41, 0x09, 0x43, 0x8f},
    {0xda, 0x50, 0x01, 0xb5, 0xff},
    {0x06, 0x46, 0x09, 0x03, 0x8f},
    {0x61, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x73, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0x82, 0xb5, 0xaf},
    {0x0e, 0x43, 0x49, 0x03, 0x8f},
    {0x7d, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x46, 0x09, 0x03, 0x8f},
    {0x02, 0x46, 0x09, 0x03, 0x8f},
    {0x07, 0x46, 0x09, 0x03, 0x8f},
    {0x6f, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x10, 0x01, 0x6f},
    {0x7b, 0x03, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x10, 0x01, 0x6f},
    {0x69, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x43, 0x49, 0x03, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x01, 0x6f},
    {0x5f, 0x03, 0x82, 0xb5, 0xaf},
    {0x08, 0x41, 0x09, 0x43, 0x8f},
    {0x79, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x73, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x09, 0x43, 0x8f},
    {0x04, 0x43, 0x10, 0x01, 0x6f},
    {0x02, 0x43, 0x10, 0x01, 0x6f},
    {0x07, 0x43, 0x10, 0x01, 0x6f},
    {0x16, 0x41, 0xc2, 0xf5, 0xaf},
    {0x03, 0x44, 0x31, 0xb5, 0x7f},
    {0x0b, 0x42, 0x31, 0xf5, 0x7f},
    {0x05, 0x44, 0x31, 0xb5, 0x7f},
    {0x1a, 0x41, 0xc2, 0xf5, 0xaf},
    {0x09, 0x42, 0x31, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x31, 0xb5, 0x7f},
    {0x65, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x46, 0xf5, 0xff},
    {0x19, 0x41, 0xc2, 0xf5, 0xaf},
    {0x0f, 0x43, 0x49, 0x03, 0x8f},
    {0xc5, 0x49, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x31, 0xb5, 0x7f},
    {0x02, 0x44, 0x31, 0xb5, 0x7f},
    {0x07, 0x44, 0x31, 0xb5, 0x7f},
    {0x0d, 0x43, 0x49, 0x03, 0x8f},
    {0x03, 0x42, 0x10, 0x01, 0x6f},
    {0x12, 0x41, 0xc2, 0xf5, 0xaf},
    {0x05, 0x42, 0x10, 0x01, 0x6f},
    {0x15, 0x41, 0xc2, 0xf5, 0xaf},
    {0x11, 0x43, 0x49, 0x03, 0x8f},
    {0xc4, 0x71, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x01, 0x6f},
    {0x01, 0x43, 0x49, 0x03, 0x8f},
    {0x08, 0x42, 0x31, 0xf5, 0x7f},
    {0xc3, 0x50, 0x01, 0xb5, 0xff},
    {0xc1, 0x0f, 0x46, 0xf5, 0xff},
    {0x0a, 0x42, 0x31, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x01, 0x6f},
    {0x02, 0x42, 0x10, 0x01, 0x6f},
    {0x07, 0x42, 0x10, 0x01, 0x6f},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8d, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7f, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8d, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8d, 0xb5, 0x6f},
    {0x68, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8d, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x7f, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8d, 0xb5, 0x6f},
    {0x02, 0x43, 0x8d, 0xb5, 0x6f},
    {0x07, 0x43, 0x8d, 0xb5, 0x6f},
    {0x6e, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x0e, 0x03, 0x7f},
    {0x0b, 0x43, 0x0e, 0x43, 0x7f},
    {0x05, 0x41, 0x0e, 0x03, 0x7f},
    {0x76, 0x03, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x0e, 0x43, 0x7f},
    {0xc8, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x0e, 0x03, 0x7f},
    {0x64, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x82, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x0e, 0x03, 0x7f},
    {0x02, 0x41, 0x0e, 0x03, 0x7f},
    {0x07, 0x41, 0x0e, 0x03, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8d, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8d, 0xb5, 0x6f},
    {0x6c, 0x03, 0x82, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8d, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0e, 0x43, 0x7f},
    {0x83, 0x8d, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0x43, 0x7f},
    {0x04, 0x42, 0x8d, 0xb5, 0x6f},
    {0x02, 0x42, 0x8d, 0xb5, 0x6f},
    {0x07, 0x42, 0x8d, 0xb5, 0x6f},
    {0x5e, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x45, 0x09, 0x03, 0x8f},
    {0x0b, 0x44, 0x09, 0x43, 0x8f},
    {0x05, 0x45, 0x09, 0x03, 0x8f},
    {0x0c, 0x42, 0x49, 0x03, 0x8f},
    {0x09, 0x44, 0x09, 0x43, 0x8f},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0x03, 0x8f},
    {0x62, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x82, 0xb5, 0xaf},
    {0x0e, 0x42, 0x49, 0x03, 0x8f},
    {0x7e, 0x03, 0x82, 0xb5, 0xaf},
    {0x04, 0x45, 0x09, 0x03, 0x8f},
    {0x02, 0x45, 0x09, 0x03, 0x8f},
    {0x07, 0x45, 0x09, 0x03, 0x8f},
    {0x70, 0x03, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x82, 0xb5, 0xaf},
    {0x10, 0x42, 0x49, 0x03, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x82, 0xb5, 0xaf},
    {0x08, 0x44, 0x09, 0x43, 0x8f},
    {0x7a, 0x03, 0x82, 0xb5, 0xaf},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0x43, 0x8f},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0e, 0x03, 0x7f},
    {0x0b, 0x42, 0x0e, 0x43, 0x7f},
    {0x05, 0x44, 0x0e, 0x03, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0e, 0x43, 0x7f},
    {0xca, 0x49, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0e, 0x03, 0x7f},
    {0x66, 0x03, 0x82, 0xb5, 0xaf},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x49, 0x03, 0x8f},
    {0xc6, 0x49, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x0e, 0x03, 0x7f},
    {0x02, 0x44, 0x0e, 0x03, 0x7f},
    {0x07, 0x44, 0x0e, 0x03, 0x7f},
    {0x0d, 0x42, 0x49, 0x03, 0x8f},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x49, 0x03, 0x8f},
    {0xc4, 0x4e, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0x03, 0x8f},
    {0x08, 0x42, 0x0e, 0x43, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0x43, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xb4, 0x82, 0xb5, 0x00, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x53, 0x03, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x46, 0xf5, 0xff},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0x03, 0x6f},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0x03, 0x6f},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x13, 0x03, 0x6f},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x46, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x13, 0x03, 0x6f},
    {0x02, 0x43, 0x13, 0x03, 0x6f},
    {0x07, 0x43, 0x13, 0x03, 0x6f},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x3d, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3d, 0xf5, 0x7f},
    {0x05, 0x41, 0x3d, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x3d, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x3d, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x3d, 0xb5, 0x7f},
    {0x02, 0x41, 0x3d, 0xb5, 0x7f},
    {0x07, 0x41, 0x3d, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0x03, 0x6f},
    {0xd7, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x13, 0x03, 0x6f},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x13, 0x03, 0x6f},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x3d, 0xf5, 0x7f},
    {0xc3, 0x53, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x3d, 0xf5, 0x7f},
    {0x04, 0x42, 0x13, 0x03, 0x6f},
    {0x02, 0x42, 0x13, 0x03, 0x6f},
    {0x07, 0x42, 0x13, 0x03, 0x6f},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x46, 0xf5, 0xff},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x98, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x06, 0x6f},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x06, 0x6f},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x06, 0x6f},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x98, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x06, 0x6f},
    {0x02, 0x43, 0x08, 0x06, 0x6f},
    {0x07, 0x43, 0x08, 0x06, 0x6f},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x3d, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3d, 0xf5, 0x7f},
    {0x05, 0x44, 0x3d, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x3d, 0xf5, 0x7f},
    {0xcb, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x3d, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x3d, 0xb5, 0x7f},
    {0x02, 0x44, 0x3d, 0xb5, 0x7f},
    {0x07, 0x44, 0x3d, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x06, 0x6f},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x06, 0x6f},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x7d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x06, 0x6f},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x3d, 0xf5, 0x7f},
    {0xc3, 0x08, 0x46, 0xf5, 0xff},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x3d, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x06, 0x6f},
    {0x02, 0x42, 0x08, 0x06, 0x6f},
    {0x07, 0x42, 0x08, 0x06, 0x6f},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x82, 0xb5, 0xaf},
    {0x0b, 0x46, 0x05, 0x43, 0x9f},
    {0x05, 0x48, 0x82, 0xb5, 0xaf},
    {0x0c, 0x41, 0x45, 0x03, 0x9f},
    {0x09, 0x46, 0x05, 0x43, 0x9f},
    {0xda, 0x78, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x82, 0xb5, 0xaf},
    {0x14, 0x43, 0x45, 0x43, 0x9f},
    {0xc2, 0x6b, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x45, 0x43, 0x9f},
    {0x0e, 0x41, 0x45, 0x03, 0x9f},
    {0x1c, 0x43, 0x45, 0x43, 0x9f},
    {0x04, 0x48, 0x82, 0xb5, 0xaf},
    {0x02, 0x48, 0x82, 0xb5, 0xaf},
    {0x07, 0x48, 0x82, 0xb5, 0xaf},
    {0x17, 0x43, 0x45, 0x43, 0x9f},
    {0x03, 0x43, 0x38, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0x43, 0x9f},
    {0x05, 0x43, 0x38, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0x03, 0x9f},
    {0xcd, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x38, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0x43, 0x9f},
    {0x08, 0x46, 0x05, 0x43, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x05, 0x43, 0x9f},
    {0x04, 0x43, 0x38, 0xb5, 0x6e},
    {0x02, 0x43, 0x38, 0xb5, 0x6e},
    {0x07, 0x43, 0x38, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x06, 0x7f},
    {0x0b, 0x43, 0x04, 0x46, 0x7f},
    {0x05, 0x41, 0x04, 0x06, 0x7f},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x46, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x06, 0x7f},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x46, 0xf5, 0xff},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0x03, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x06, 0x7f},
    {0x02, 0x41, 0x04, 0x06, 0x7f},
    {0x07, 0x41, 0x04, 0x06, 0x7f},
    {0x0d, 0x41, 0x45, 0x03, 0x9f},
    {0x03, 0x42, 0x38, 0xb5, 0x6e},
    {0xd9, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x38, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0x03, 0x9f},
    {0xd5, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x38, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0x03, 0x9f},
    {0x08, 0x43, 0x04, 0x46, 0x7f},
    {0xc3, 0x78, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x46, 0xf5, 0xff},
    {0x0a, 0x43, 0x04, 0x46, 0x7f},
    {0x04, 0x42, 0x38, 0xb5, 0x6e},
    {0x02, 0x42, 0x38, 0xb5, 0x6e},
    {0x07, 0x42, 0x38, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x94, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x94, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0x43, 0x9f},
    {0x03, 0x44, 0x04, 0x06, 0x7f},
    {0x0b, 0x42, 0x04, 0x46, 0x7f},
    {0x05, 0x44, 0x04, 0x06, 0x7f},
    {0x1a, 0x43, 0x45, 0x43, 0x9f},
    {0x09, 0x42, 0x04, 0x46, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x06, 0x7f},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0x43, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x06, 0x7f},
    {0x02, 0x44, 0x04, 0x06, 0x7f},
    {0x07, 0x44, 0x04, 0x06, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0x43, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0x43, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x46, 0x7f},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x46, 0x7f},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0x03, 0xf5, 0xff},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x82, 0xf5, 0xaf},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0xc2, 0xb5, 0xaf},
    {0x09, 0x47, 0x82, 0xf5, 0xaf},
    {0xda, 0x0a, 0x46, 0xf5, 0xff},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0xc2, 0xf5, 0xaf},
    {0xc2, 0x01, 0x46, 0xf5, 0xff},
    {0x18, 0x44, 0xc2, 0xf5, 0xaf},
    {0x0e, 0x45, 0xc2, 0xb5, 0xaf},
    {0x1c, 0x44, 0xc2, 0xf5, 0xaf},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0xc2, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x06, 0x6f},
    {0x1b, 0x44, 0xc2, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x06, 0x6f},
    {0x67, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x45, 0xc2, 0xb5, 0xaf},
    {0xc9, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x06, 0x6f},
    {0x13, 0x44, 0xc2, 0xf5, 0xaf},
    {0x08, 0x47, 0x82, 0xf5, 0xaf},
    {0x77, 0x02, 0x82, 0xb5, 0xaf},
    {0xc1, 0x01, 0x46, 0xf5, 0xff},
    {0x0a, 0x47, 0x82, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x06, 0x6f},
    {0x02, 0x43, 0x0a, 0x06, 0x6f},
    {0x07, 0x43, 0x0a, 0x06, 0x6f},
    {0x6d, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x06, 0x7f},
    {0x0b, 0x43, 0x02, 0x46, 0x7f},
    {0x05, 0x41, 0x02, 0x06, 0x7f},
    {0x75, 0x02, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x46, 0x7f},
    {0xc7, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x06, 0x7f},
    {0x63, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x82, 0xb5, 0xaf},
    {0x0f, 0x45, 0xc2, 0xb5, 0xaf},
    {0x7f, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x06, 0x7f},
    {0x02, 0x41, 0x02, 0x06, 0x7f},
    {0x07, 0x41, 0x02, 0x06, 0x7f},
    {0x0d, 0x45, 0xc2, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x06, 0x6f},
    {0xd8, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x06, 0x6f},
    {0x6b, 0x02, 0x82, 0xb5, 0xaf},
    {0x11, 0x45, 0xc2, 0xb5, 0xaf},
    {0xd4, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x06, 0x6f},
    {0x01, 0x45, 0xc2, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x46, 0x7f},
    {0xc3, 0x0a, 0x46, 0xf5, 0xff},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x46, 0x7f},
    {0x04, 0x42, 0x0a, 0x06, 0x6f},
    {0x02, 0x42, 0x0a, 0x06, 0x6f},
    {0x07, 0x42, 0x0a, 0x06, 0x6f},
    {0x5d, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x46, 0x06, 0x01, 0x8f},
    {0x0b, 0x41, 0x06, 0x41, 0x8f},
    {0x05, 0x46, 0x06, 0x01, 0x8f},
    {0x0c, 0x43, 0x46, 0x01, 0x8f},
    {0x09, 0x41, 0x06, 0x41, 0x8f},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x01, 0x8f},
    {0x61, 0x02, 0x82, 0xb5, 0xaf},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x82, 0xb5, 0xaf},
    {0x0e, 0x43, 0x46, 0x01, 0x8f},
    {0x7d, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x46, 0x06, 0x01, 0x8f},
    {0x02, 0x46, 0x06, 0x01, 0x8f},
    {0x07, 0x46, 0x06, 0x01, 0x8f},
    {0x6f, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x43, 0x46, 0x01, 0x8f},
    {0xd0, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x82, 0xb5, 0xaf},
    {0x08, 0x41, 0x06, 0x41, 0x8f},
    {0x79, 0x02, 0x82, 0xb5, 0xaf},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x41, 0x8f},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0xc2, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x06, 0x7f},
    {0x0b, 0x42, 0x02, 0x46, 0x7f},
    {0x05, 0x44, 0x02, 0x06, 0x7f},
    {0x1a, 0x44, 0xc2, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x46, 0x7f},
    {0xcc, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x06, 0x7f},
    {0x65, 0x02, 0x82, 0xb5, 0xaf},
    {0x82, 0x81, 0x82, 0xb5, 0x0f},
    {0x19, 0x44, 0xc2, 0xf5, 0xaf},
    {0x0f, 0x43, 0x46, 0x01, 0x8f},
    {0xc5, 0x46, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x06, 0x7f},
    {0x02, 0x44, 0x02, 0x06, 0x7f},
    {0x07, 0x44, 0x02, 0x06, 0x7f},
    {0x0d, 0x43, 0x46, 0x01, 0x8f},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0xc2, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0xc2, 0xf5, 0xaf},
    {0x11, 0x43, 0x46, 0x01, 0x8f},
    {0xc4, 0x02, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x01, 0x8f},
    {0x08, 0x42, 0x02, 0x46, 0x7f},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0x81, 0x81, 0x82, 0xb5, 0x0f},
    {0x0a, 0x42, 0x02, 0x46, 0x7f},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0x03, 0x9f},
    {0x0b, 0x45, 0x05, 0x43, 0x9f},
    {0x05, 0x47, 0x05, 0x03, 0x9f},
    {0x0c, 0x44, 0x45, 0x03, 0x9f},
    {0x09, 0x45, 0x05, 0x43, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0x03, 0x9f},
    {0x14, 0x42, 0x45, 0x43, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0x43, 0x9f},
    {0x0e, 0x44, 0x45, 0x03, 0x9f},
    {0x1c, 0x42, 0x45, 0x43, 0x9f},
    {0x04, 0x47, 0x05, 0x03, 0x9f},
    {0x02, 0x47, 0x05, 0x03, 0x9f},
    {0x07, 0x47, 0x05, 0x03, 0x9f},
    {0x17, 0x42, 0x45, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x44, 0x45, 0x03, 0x9f},
    {0xce, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0x43, 0x9f},
    {0x08, 0x45, 0x05, 0x43, 0x9f},
    {0x78, 0x02, 0x82, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x06, 0x7f},
    {0x0b, 0x43, 0x07, 0x46, 0x7f},
    {0x05, 0x41, 0x07, 0x06, 0x7f},
    {0x76, 0x02, 0x82, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x46, 0x7f},
    {0xc8, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x06, 0x7f},
    {0x64, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x82, 0xb5, 0xaf},
    {0x0f, 0x44, 0x45, 0x03, 0x9f},
    {0x40, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x06, 0x7f},
    {0x02, 0x41, 0x07, 0x06, 0x7f},
    {0x07, 0x41, 0x07, 0x06, 0x7f},
    {0x0d, 0x44, 0x45, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x82, 0xb5, 0xaf},
    {0x11, 0x44, 0x45, 0x03, 0x9f},
    {0xd6, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0x03, 0x9f},
    {0x08, 0x43, 0x07, 0x46, 0x7f},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x46, 0x7f},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x45, 0x06, 0x01, 0x8f},
    {0x0b, 0x44, 0x06, 0x41, 0x8f},
    {0x05, 0x45, 0x06, 0x01, 0x8f},
    {0x0c, 0x42, 0x46, 0x01, 0x8f},
    {0x09, 0x44, 0x06, 0x41, 0x8f},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x01, 0x8f},
    {0x62, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x82, 0xb5, 0xaf},
    {0x0e, 0x42, 0x46, 0x01, 0x8f},
    {0x7e, 0x02, 0x82, 0xb5, 0xaf},
    {0x04, 0x45, 0x06, 0x01, 0x8f},
    {0x02, 0x45, 0x06, 0x01, 0x8f},
    {0x07, 0x45, 0x06, 0x01, 0x8f},
    {0x70, 0x02, 0x82, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x82, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x82, 0xb5, 0xaf},
    {0x10, 0x42, 0x46, 0x01, 0x8f},
    {0xd2, 0x45, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x82, 0xb5, 0xaf},
    {0x08, 0x44, 0x06, 0x41, 0x8f},
    {0x7a, 0x02, 0x82, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x41, 0x8f},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0x43, 0x9f},
    {0x03, 0x44, 0x07, 0x06, 0x7f},
    {0x0b, 0x42, 0x07, 0x46, 0x7f},
    {0x05, 0x44, 0x07, 0x06, 0x7f},
    {0x1a, 0x42, 0x45, 0x43, 0x9f},
    {0x09, 0x42, 0x07, 0x46, 0x7f},
    {0xca, 0x46, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x06, 0x7f},
    {0x66, 0x02, 0x82, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0x43, 0x9f},
    {0x0f, 0x42, 0x46, 0x01, 0x8f},
    {0xc6, 0x46, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x06, 0x7f},
    {0x02, 0x44, 0x07, 0x06, 0x7f},
    {0x07, 0x44, 0x07, 0x06, 0x7f},
    {0x0d, 0x42, 0x46, 0x01, 0x8f},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0x43, 0x9f},
    {0x11, 0x42, 0x46, 0x01, 0x8f},
    {0xc4, 0x07, 0x46, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x01, 0x8f},
    {0x08, 0x42, 0x07, 0x46, 0x7f},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x46, 0x7f},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4b, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0x03, 0xf5, 0xff},
    {0x18, 0x4b, 0xf5, 0x40, 0xee},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4b, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2e, 0xb5, 0x6e},
    {0x1b, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2e, 0xb5, 0x6e},
    {0x67, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2e, 0xb5, 0x6e},
    {0x13, 0x4b, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0x03, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2e, 0xb5, 0x6e},
    {0x02, 0x43, 0x2e, 0xb5, 0x6e},
    {0x07, 0x43, 0x2e, 0xb5, 0x6e},
    {0x6d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x2f, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2f, 0xf5, 0x7f},
    {0x05, 0x41, 0x2f, 0xb5, 0x7f},
    {0x75, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x2f, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2f, 0xb5, 0x7f},
    {0x63, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x2f, 0xb5, 0x7f},
    {0x02, 0x41, 0x2f, 0xb5, 0x7f},
    {0x07, 0x41, 0x2f, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x2e, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2e, 0xb5, 0x6e},
    {0x6b, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x2f, 0xf5, 0x7f},
    {0xc3, 0x6e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x2f, 0xf5, 0x7f},
    {0x04, 0x42, 0x2e, 0xb5, 0x6e},
    {0x02, 0x42, 0x2e, 0xb5, 0x6e},
    {0x07, 0x42, 0x2e, 0xb5, 0x6e},
    {0x5d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x2f, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2f, 0xf5, 0x7f},
    {0x05, 0x44, 0x2f, 0xb5, 0x7f},
    {0x1a, 0x4b, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x2f, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x2f, 0xb5, 0x7f},
    {0x65, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4b, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2f, 0xb5, 0x7f},
    {0x02, 0x44, 0x2f, 0xb5, 0x7f},
    {0x07, 0x44, 0x2f, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4b, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2f, 0xf5, 0x7f},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x2f, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x08, 0xb5, 0x00, 0xee},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x08, 0xb5, 0x00, 0xee},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x76, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x61, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x36, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x36, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x36, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x61, 0x03, 0xf5, 0xff},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x36, 0xb5, 0x6e},
    {0x02, 0x43, 0x36, 0xb5, 0x6e},
    {0x07, 0x43, 0x36, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x3b, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3b, 0xf5, 0x7f},
    {0x05, 0x41, 0x3b, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x3b, 0xf5, 0x7f},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x3b, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x3b, 0xb5, 0x7f},
    {0x02, 0x41, 0x3b, 0xb5, 0x7f},
    {0x07, 0x41, 0x3b, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x36, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x36, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x36, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x3b, 0xf5, 0x7f},
    {0xc3, 0x76, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x3b, 0xf5, 0x7f},
    {0x04, 0x42, 0x36, 0xb5, 0x6e},
    {0x02, 0x42, 0x36, 0xb5, 0x6e},
    {0x07, 0x42, 0x36, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x71, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x71, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x3b, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3b, 0xf5, 0x7f},
    {0x05, 0x44, 0x3b, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x3b, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x3b, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x3b, 0xb5, 0x7f},
    {0x02, 0x44, 0x3b, 0xb5, 0x7f},
    {0x07, 0x44, 0x3b, 0xb5, 0x7f},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x7b, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x3b, 0xf5, 0x7f},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x3b, 0xf5, 0x7f},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x88, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7d, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x88, 0xb5, 0x6e},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x88, 0xb5, 0x6e},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x88, 0xb5, 0x6e},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7d, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x88, 0xb5, 0x6e},
    {0x02, 0x43, 0x88, 0xb5, 0x6e},
    {0x07, 0x43, 0x88, 0xb5, 0x6e},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x88, 0xb5, 0x6e},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x88, 0xb5, 0x6e},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x88, 0xb5, 0x6e},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x88, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x88, 0xb5, 0x6e},
    {0x02, 0x42, 0x88, 0xb5, 0x6e},
    {0x07, 0x42, 0x88, 0xb5, 0x6e},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x64, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x6f, 0x03, 0xf5, 0xff},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x24, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x24, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x24, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6f, 0x03, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x24, 0xb5, 0x6e},
    {0x02, 0x43, 0x24, 0xb5, 0x6e},
    {0x07, 0x43, 0x24, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x29, 0xb5, 0x7f},
    {0x0b, 0x43, 0x29, 0xf5, 0x7f},
    {0x05, 0x41, 0x29, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x29, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x29, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x29, 0xb5, 0x7f},
    {0x02, 0x41, 0x29, 0xb5, 0x7f},
    {0x07, 0x41, 0x29, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x24, 0xb5, 0x6e},
    {0xd7, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x24, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x24, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x29, 0xf5, 0x7f},
    {0xc3, 0x64, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x29, 0xf5, 0x7f},
    {0x04, 0x42, 0x24, 0xb5, 0x6e},
    {0x02, 0x42, 0x24, 0xb5, 0x6e},
    {0x07, 0x42, 0x24, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x7b, 0x03, 0xf5, 0xff},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x7b, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x29, 0xb5, 0x7f},
    {0x0b, 0x42, 0x29, 0xf5, 0x7f},
    {0x05, 0x44, 0x29, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x29, 0xf5, 0x7f},
    {0xcb, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x29, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x29, 0xb5, 0x7f},
    {0x02, 0x44, 0x29, 0xb5, 0x7f},
    {0x07, 0x44, 0x29, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x69, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x29, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x29, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x10, 0xf5, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x50, 0xb5, 0x9f},
    {0x09, 0x46, 0x10, 0xf5, 0x9f},
    {0xda, 0x74, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x50, 0xf5, 0x9f},
    {0xc2, 0x69, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x50, 0xf5, 0x9f},
    {0x0e, 0x41, 0x50, 0xb5, 0x9f},
    {0x1c, 0x43, 0x50, 0xf5, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x50, 0xf5, 0x9f},
    {0x03, 0x43, 0x34, 0xb5, 0x6e},
    {0x1b, 0x43, 0x50, 0xf5, 0x9f},
    {0x05, 0x43, 0x34, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x50, 0xb5, 0x9f},
    {0xcd, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x34, 0xb5, 0x6e},
    {0x13, 0x43, 0x50, 0xf5, 0x9f},
    {0x08, 0x46, 0x10, 0xf5, 0x9f},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x69, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x10, 0xf5, 0x9f},
    {0x04, 0x43, 0x34, 0xb5, 0x6e},
    {0x02, 0x43, 0x34, 0xb5, 0x6e},
    {0x07, 0x43, 0x34, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x10, 0x03, 0x7f},
    {0x0b, 0x43, 0x10, 0x43, 0x7f},
    {0x05, 0x41, 0x10, 0x03, 0x7f},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x10, 0x43, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x10, 0x03, 0x7f},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x50, 0xb5, 0x9f},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x10, 0x03, 0x7f},
    {0x02, 0x41, 0x10, 0x03, 0x7f},
    {0x07, 0x41, 0x10, 0x03, 0x7f},
    {0x0d, 0x41, 0x50, 0xb5, 0x9f},
    {0x03, 0x42, 0x34, 0xb5, 0x6e},
    {0xd9, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x34, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x50, 0xb5, 0x9f},
    {0xd5, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x34, 0xb5, 0x6e},
    {0x01, 0x41, 0x50, 0xb5, 0x9f},
    {0x08, 0x43, 0x10, 0x43, 0x7f},
    {0xc3, 0x74, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0x43, 0x7f},
    {0x04, 0x42, 0x34, 0xb5, 0x6e},
    {0x02, 0x42, 0x34, 0xb5, 0x6e},
    {0x07, 0x42, 0x34, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0x01, 0xb5, 0xff},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x90, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0f, 0x01, 0x6f},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0f, 0x01, 0x6f},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0f, 0x01, 0x6f},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x90, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0x01, 0x6f},
    {0x02, 0x43, 0x0f, 0x01, 0x6f},
    {0x07, 0x43, 0x0f, 0x01, 0x6f},
    {0x16, 0x43, 0x50, 0xf5, 0x9f},
    {0x03, 0x44, 0x10, 0x03, 0x7f},
    {0x0b, 0x42, 0x10, 0x43, 0x7f},
    {0x05, 0x44, 0x10, 0x03, 0x7f},
    {0x1a, 0x43, 0x50, 0xf5, 0x9f},
    {0x09, 0x42, 0x10, 0x43, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x10, 0x03, 0x7f},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x50, 0xf5, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x10, 0x03, 0x7f},
    {0x02, 0x44, 0x10, 0x03, 0x7f},
    {0x07, 0x44, 0x10, 0x03, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0x01, 0x6f},
    {0x12, 0x43, 0x50, 0xf5, 0x9f},
    {0x05, 0x42, 0x0f, 0x01, 0x6f},
    {0x15, 0x43, 0x50, 0xf5, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x50, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x01, 0x6f},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x10, 0x43, 0x7f},
    {0xc3, 0x4f, 0x01, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x10, 0x43, 0x7f},
    {0x04, 0x42, 0x0f, 0x01, 0x6f},
    {0x02, 0x42, 0x0f, 0x01, 0x6f},
    {0x07, 0x42, 0x0f, 0x01, 0x6f},
    {0xf4, 0x50, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x40, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x5f, 0x03, 0xf5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x00, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x00, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x00, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5f, 0x03, 0xf5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x00, 0xb5, 0x6e},
    {0x02, 0x43, 0x00, 0xb5, 0x6e},
    {0x07, 0x43, 0x00, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x00, 0xb5, 0x6e},
    {0xd8, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x00, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x00, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x40, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x00, 0xb5, 0x6e},
    {0x02, 0x42, 0x00, 0xb5, 0x6e},
    {0x07, 0x42, 0x00, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0f, 0xf5, 0x8e},
    {0x05, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4f, 0xb5, 0x8e},
    {0x09, 0x41, 0x0f, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0f, 0xb5, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x79, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x4f, 0xb5, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x0f, 0xb5, 0x8e},
    {0x02, 0x46, 0x0f, 0xb5, 0x8e},
    {0x07, 0x46, 0x0f, 0xb5, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x4f, 0xb5, 0x8e},
    {0xd0, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x0f, 0xf5, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x79, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x4f, 0xb5, 0x8e},
    {0xc5, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x4f, 0xb5, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x10, 0xb5, 0x9f},
    {0x0b, 0x45, 0x10, 0xf5, 0x9f},
    {0x05, 0x47, 0x10, 0xb5, 0x9f},
    {0x0c, 0x44, 0x50, 0xb5, 0x9f},
    {0x09, 0x45, 0x10, 0xf5, 0x9f},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x10, 0xb5, 0x9f},
    {0x14, 0x42, 0x50, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x50, 0xf5, 0x9f},
    {0x0e, 0x44, 0x50, 0xb5, 0x9f},
    {0x1c, 0x42, 0x50, 0xf5, 0x9f},
    {0x04, 0x47, 0x10, 0xb5, 0x9f},
    {0x02, 0x47, 0x10, 0xb5, 0x9f},
    {0x07, 0x47, 0x10, 0xb5, 0x9f},
    {0x17, 0x42, 0x50, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x50, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x50, 0xb5, 0x9f},
    {0xce, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x50, 0xf5, 0x9f},
    {0x08, 0x45, 0x10, 0xf5, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x10, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x50, 0xb5, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x50, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x50, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x50, 0xb5, 0x9f},
    {0xd6, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x50, 0xb5, 0x9f},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0f, 0xf5, 0x8e},
    {0x05, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4f, 0xb5, 0x8e},
    {0x09, 0x44, 0x0f, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0f, 0xb5, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x4f, 0xb5, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x0f, 0xb5, 0x8e},
    {0x02, 0x45, 0x0f, 0xb5, 0x8e},
    {0x07, 0x45, 0x0f, 0xb5, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x4f, 0xb5, 0x8e},
    {0xd2, 0x50, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x0f, 0xf5, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x50, 0xf5, 0x9f},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x50, 0xf5, 0x9f},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x50, 0xf5, 0x9f},
    {0x0f, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc6, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x50, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x50, 0xf5, 0x9f},
    {0x11, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x4d, 0x01, 0xb5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x01, 0xb5, 0xff},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x01, 0x6f},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x01, 0x6f},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x0d, 0x01, 0x6f},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x01, 0xb5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x0d, 0x01, 0x6f},
    {0x02, 0x43, 0x0d, 0x01, 0x6f},
    {0x07, 0x43, 0x0d, 0x01, 0x6f},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x1f, 0xb5, 0x7f},
    {0x0b, 0x43, 0x1f, 0xf5, 0x7f},
    {0x05, 0x41, 0x1f, 0xb5, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x1f, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x1f, 0xb5, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x1f, 0xb5, 0x7f},
    {0x02, 0x41, 0x1f, 0xb5, 0x7f},
    {0x07, 0x41, 0x1f, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x0d, 0x01, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0d, 0x01, 0x6f},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0d, 0x01, 0x6f},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x1f, 0xf5, 0x7f},
    {0xc3, 0x4d, 0x01, 0xb5, 0xff},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x1f, 0xf5, 0x7f},
    {0x04, 0x42, 0x0d, 0x01, 0x6f},
    {0x02, 0x42, 0x0d, 0x01, 0x6f},
    {0x07, 0x42, 0x0d, 0x01, 0x6f},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x1f, 0xb5, 0x7f},
    {0x0b, 0x42, 0x1f, 0xf5, 0x7f},
    {0x05, 0x44, 0x1f, 0xb5, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x1f, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x1f, 0xb5, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x1f, 0xb5, 0x7f},
    {0x02, 0x44, 0x1f, 0xb5, 0x7f},
    {0x07, 0x44, 0x1f, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x5f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x1f, 0xf5, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x1f, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0x9a, 0x99, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x5a, 0x01, 0xb5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x99, 0xb5, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x99, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x99, 0xb5, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x01, 0xb5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x99, 0xb5, 0x6f},
    {0x02, 0x43, 0x99, 0xb5, 0x6f},
    {0x07, 0x43, 0x99, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x01, 0x7f},
    {0x0b, 0x43, 0x08, 0x41, 0x7f},
    {0x05, 0x41, 0x08, 0x01, 0x7f},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x41, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x08, 0x01, 0x7f},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x01, 0x7f},
    {0x02, 0x41, 0x08, 0x01, 0x7f},
    {0x07, 0x41, 0x08, 0x01, 0x7f},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x99, 0xb5, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x99, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x99, 0xb5, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x08, 0x41, 0x7f},
    {0x83, 0x99, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x41, 0x7f},
    {0x04, 0x42, 0x99, 0xb5, 0x6f},
    {0x02, 0x42, 0x99, 0xb5, 0x6f},
    {0x07, 0x42, 0x99, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8c, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8c, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x08, 0x01, 0x7f},
    {0x0b, 0x42, 0x08, 0x41, 0x7f},
    {0x05, 0x44, 0x08, 0x01, 0x7f},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x08, 0x41, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x08, 0x01, 0x7f},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x08, 0x01, 0x7f},
    {0x02, 0x44, 0x08, 0x01, 0x7f},
    {0x07, 0x44, 0x08, 0x01, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x48, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x08, 0x41, 0x7f},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x41, 0x7f},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x6c, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x65, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x2c, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x2c, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x2c, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x65, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x2c, 0xb5, 0x6e},
    {0x02, 0x43, 0x2c, 0xb5, 0x6e},
    {0x07, 0x43, 0x2c, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x39, 0xb5, 0x7f},
    {0x0b, 0x43, 0x39, 0xf5, 0x7f},
    {0x05, 0x41, 0x39, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x39, 0xf5, 0x7f},
    {0xc7, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x39, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x39, 0xb5, 0x7f},
    {0x02, 0x41, 0x39, 0xb5, 0x7f},
    {0x07, 0x41, 0x39, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x2c, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2c, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2c, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x39, 0xf5, 0x7f},
    {0xc3, 0x6c, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x39, 0xf5, 0x7f},
    {0x04, 0x42, 0x2c, 0xb5, 0x6e},
    {0x02, 0x42, 0x2c, 0xb5, 0x6e},
    {0x07, 0x42, 0x2c, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x04, 0x01, 0x8f},
    {0x0b, 0x41, 0x04, 0x41, 0x8f},
    {0x05, 0x46, 0x04, 0x01, 0x8f},
    {0x0c, 0x43, 0x44, 0x01, 0x8f},
    {0x09, 0x41, 0x04, 0x41, 0x8f},
    {0xda, 0x51, 0x01, 0xb5, 0xff},
    {0x06, 0x46, 0x04, 0x01, 0x8f},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x59, 0x01, 0xb5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x44, 0x01, 0x8f},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x04, 0x01, 0x8f},
    {0x02, 0x46, 0x04, 0x01, 0x8f},
    {0x07, 0x46, 0x04, 0x01, 0x8f},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x11, 0x01, 0x6f},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x11, 0x01, 0x6f},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x44, 0x01, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x11, 0x01, 0x6f},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x04, 0x41, 0x8f},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x59, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x04, 0x41, 0x8f},
    {0x04, 0x43, 0x11, 0x01, 0x6f},
    {0x02, 0x43, 0x11, 0x01, 0x6f},
    {0x07, 0x43, 0x11, 0x01, 0x6f},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x39, 0xb5, 0x7f},
    {0x0b, 0x42, 0x39, 0xf5, 0x7f},
    {0x05, 0x44, 0x39, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x39, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x39, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x44, 0x01, 0x8f},
    {0xc5, 0x44, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x39, 0xb5, 0x7f},
    {0x02, 0x44, 0x39, 0xb5, 0x7f},
    {0x07, 0x44, 0x39, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0x01, 0x8f},
    {0x03, 0x42, 0x11, 0x01, 0x6f},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x11, 0x01, 0x6f},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x44, 0x01, 0x8f},
    {0xc4, 0x79, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0x01, 0x6f},
    {0x01, 0x43, 0x44, 0x01, 0x8f},
    {0x08, 0x42, 0x39, 0xf5, 0x7f},
    {0xc3, 0x51, 0x01, 0xb5, 0xff},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x39, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0x01, 0x6f},
    {0x02, 0x42, 0x11, 0x01, 0x6f},
    {0x07, 0x42, 0x11, 0x01, 0x6f},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x95, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x95, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x95, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x95, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x95, 0xb5, 0x6f},
    {0x02, 0x43, 0x95, 0xb5, 0x6f},
    {0x07, 0x43, 0x95, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x95, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x95, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x95, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x95, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x95, 0xb5, 0x6f},
    {0x02, 0x42, 0x95, 0xb5, 0x6f},
    {0x07, 0x42, 0x95, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x04, 0x01, 0x8f},
    {0x0b, 0x44, 0x04, 0x41, 0x8f},
    {0x05, 0x45, 0x04, 0x01, 0x8f},
    {0x0c, 0x42, 0x44, 0x01, 0x8f},
    {0x09, 0x44, 0x04, 0x41, 0x8f},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x01, 0x8f},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x44, 0x01, 0x8f},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x04, 0x01, 0x8f},
    {0x02, 0x45, 0x04, 0x01, 0x8f},
    {0x07, 0x45, 0x04, 0x01, 0x8f},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x44, 0x01, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x04, 0x41, 0x8f},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x41, 0x8f},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x44, 0x01, 0x8f},
    {0xc6, 0x44, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x01, 0x8f},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x44, 0x01, 0x8f},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x01, 0x8f},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x01, 0xb5, 0xff},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x01, 0x01, 0x6f},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x01, 0x01, 0x6f},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0xc9, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x01, 0x01, 0x6f},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x01, 0x6f},
    {0x02, 0x43, 0x01, 0x01, 0x6f},
    {0x07, 0x43, 0x01, 0x01, 0x6f},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0a, 0x01, 0x7f},
    {0x0b, 0x43, 0x0a, 0x41, 0x7f},
    {0x05, 0x41, 0x0a, 0x01, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0a, 0x41, 0x7f},
    {0xc7, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x0a, 0x01, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0a, 0x01, 0x7f},
    {0x02, 0x41, 0x0a, 0x01, 0x7f},
    {0x07, 0x41, 0x0a, 0x01, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x01, 0x01, 0x6f},
    {0xd7, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x01, 0x6f},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x01, 0x6f},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x0a, 0x41, 0x7f},
    {0xc3, 0x41, 0x01, 0xb5, 0xff},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0a, 0x41, 0x7f},
    {0x04, 0x42, 0x01, 0x01, 0x6f},
    {0x02, 0x42, 0x01, 0x01, 0x6f},
    {0x07, 0x42, 0x01, 0x01, 0x6f},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x02, 0x01, 0x8f},
    {0x0b, 0x41, 0x02, 0x41, 0x8f},
    {0x05, 0x46, 0x02, 0x01, 0x8f},
    {0x0c, 0x43, 0x42, 0x01, 0x8f},
    {0x09, 0x41, 0x02, 0x41, 0x8f},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x01, 0x8f},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x52, 0x01, 0xb5, 0xff},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x42, 0x01, 0x8f},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x02, 0x01, 0x8f},
    {0x02, 0x46, 0x02, 0x01, 0x8f},
    {0x07, 0x46, 0x02, 0x01, 0x8f},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x42, 0x01, 0x8f},
    {0xcf, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x02, 0x41, 0x8f},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x52, 0x01, 0xb5, 0xff},
    {0x0a, 0x41, 0x02, 0x41, 0x8f},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0a, 0x01, 0x7f},
    {0x0b, 0x42, 0x0a, 0x41, 0x7f},
    {0x05, 0x44, 0x0a, 0x01, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0a, 0x41, 0x7f},
    {0xcb, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x01, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x42, 0x01, 0x8f},
    {0xc5, 0x42, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x0a, 0x01, 0x7f},
    {0x02, 0x44, 0x0a, 0x01, 0x7f},
    {0x07, 0x44, 0x0a, 0x01, 0x7f},
    {0x0d, 0x43, 0x42, 0x01, 0x8f},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x42, 0x01, 0x8f},
    {0xc4, 0x4a, 0x01, 0xb5, 0xff},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0x01, 0x8f},
    {0x08, 0x42, 0x0a, 0x41, 0x7f},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0a, 0x41, 0x7f},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x06, 0x43, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x46, 0x03, 0x9f},
    {0x09, 0x46, 0x06, 0x43, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x46, 0x43, 0x9f},
    {0xc2, 0x55, 0x01, 0xb5, 0xff},
    {0x18, 0x43, 0x46, 0x43, 0x9f},
    {0x0e, 0x41, 0x46, 0x03, 0x9f},
    {0x1c, 0x43, 0x46, 0x43, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x46, 0x43, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0x43, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x46, 0x03, 0x9f},
    {0xcd, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0x43, 0x9f},
    {0x08, 0x46, 0x06, 0x43, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x55, 0x01, 0xb5, 0xff},
    {0x0a, 0x46, 0x06, 0x43, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x46, 0x03, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0x03, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x46, 0x03, 0x9f},
    {0xd5, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0x03, 0x9f},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x02, 0x01, 0x8f},
    {0x0b, 0x44, 0x02, 0x41, 0x8f},
    {0x05, 0x45, 0x02, 0x01, 0x8f},
    {0x0c, 0x42, 0x42, 0x01, 0x8f},
    {0x09, 0x44, 0x02, 0x41, 0x8f},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x02, 0x01, 0x8f},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x42, 0x01, 0x8f},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x02, 0x01, 0x8f},
    {0x02, 0x45, 0x02, 0x01, 0x8f},
    {0x07, 0x45, 0x02, 0x01, 0x8f},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x42, 0x01, 0x8f},
    {0xd1, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x02, 0x41, 0x8f},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x41, 0x8f},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x46, 0x43, 0x9f},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0x43, 0x9f},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x46, 0x43, 0x9f},
    {0x0f, 0x42, 0x42, 0x01, 0x8f},
    {0xc6, 0x42, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0x01, 0x8f},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x46, 0x43, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x46, 0x43, 0x9f},
    {0x11, 0x42, 0x42, 0x01, 0x8f},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0x42, 0x01, 0x8f},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x46, 0x03, 0xf5, 0xff},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x07, 0x01, 0x8f},
    {0x0b, 0x41, 0x07, 0x41, 0x8f},
    {0x05, 0x46, 0x07, 0x01, 0x8f},
    {0x0c, 0x43, 0x47, 0x01, 0x8f},
    {0x09, 0x41, 0x07, 0x41, 0x8f},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x01, 0x8f},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x47, 0x01, 0x8f},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x07, 0x01, 0x8f},
    {0x02, 0x46, 0x07, 0x01, 0x8f},
    {0x07, 0x46, 0x07, 0x01, 0x8f},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x47, 0x01, 0x8f},
    {0xd0, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x07, 0x41, 0x8f},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x07, 0x41, 0x8f},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x47, 0x01, 0x8f},
    {0xc5, 0x47, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0x01, 0x8f},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x47, 0x01, 0x8f},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x01, 0x8f},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0x03, 0x9f},
    {0x0b, 0x45, 0x06, 0x43, 0x9f},
    {0x05, 0x47, 0x06, 0x03, 0x9f},
    {0x0c, 0x44, 0x46, 0x03, 0x9f},
    {0x09, 0x45, 0x06, 0x43, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0x03, 0x9f},
    {0x14, 0x42, 0x46, 0x43, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0x43, 0x9f},
    {0x0e, 0x44, 0x46, 0x03, 0x9f},
    {0x1c, 0x42, 0x46, 0x43, 0x9f},
    {0x04, 0x47, 0x06, 0x03, 0x9f},
    {0x02, 0x47, 0x06, 0x03, 0x9f},
    {0x07, 0x47, 0x06, 0x03, 0x9f},
    {0x17, 0x42, 0x46, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x46, 0x03, 0x9f},
    {0xce, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0x43, 0x9f},
    {0x08, 0x45, 0x06, 0x43, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x46, 0x03, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x46, 0x03, 0x9f},
    {0xd6, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0x03, 0x9f},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x07, 0x01, 0x8f},
    {0x0b, 0x44, 0x07, 0x41, 0x8f},
    {0x05, 0x45, 0x07, 0x01, 0x8f},
    {0x0c, 0x42, 0x47, 0x01, 0x8f},
    {0x09, 0x44, 0x07, 0x41, 0x8f},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x01, 0x8f},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x47, 0x01, 0x8f},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x07, 0x01, 0x8f},
    {0x02, 0x45, 0x07, 0x01, 0x8f},
    {0x07, 0x45, 0x07, 0x01, 0x8f},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x47, 0x01, 0x8f},
    {0xd2, 0x46, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x07, 0x41, 0x8f},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x07, 0x41, 0x8f},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0x43, 0x9f},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0x43, 0x9f},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0x01, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x46, 0x43, 0x9f},
    {0x0f, 0x42, 0x47, 0x01, 0x8f},
    {0xc6, 0x47, 0x01, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0x01, 0x8f},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0x43, 0x9f},
    {0x11, 0x42, 0x47, 0x01, 0x8f},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x01, 0x8f},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x1e, 0xb5, 0x6e},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x1e, 0xb5, 0x6e},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1e, 0xb5, 0x6e},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1e, 0xb5, 0x6e},
    {0x02, 0x43, 0x1e, 0xb5, 0x6e},
    {0x07, 0x43, 0x1e, 0xb5, 0x6e},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x16, 0xb5, 0x7e},
    {0x0b, 0x43, 0x16, 0xf5, 0x7e},
    {0x05, 0x41, 0x16, 0xb5, 0x7e},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x16, 0xf5, 0x7e},
    {0xc7, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x16, 0xb5, 0x7e},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0x07, 0xf5, 0xee},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x16, 0xb5, 0x7e},
    {0x02, 0x41, 0x16, 0xb5, 0x7e},
    {0x07, 0x41, 0x16, 0xb5, 0x7e},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1e, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1e, 0xb5, 0x6e},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x16, 0xf5, 0x7e},
    {0xc3, 0x5e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x1e, 0xb5, 0x6e},
    {0x02, 0x42, 0x1e, 0xb5, 0x6e},
    {0x07, 0x42, 0x1e, 0xb5, 0x6e},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0d, 0xf5, 0x8e},
    {0x05, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4d, 0xb5, 0x8e},
    {0x09, 0x41, 0x0d, 0xf5, 0x8e},
    {0xda, 0x03, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x0d, 0xb5, 0x8e},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0x45, 0xb5, 0xee},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0x4d, 0xb5, 0x8e},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0x0d, 0xb5, 0x8e},
    {0x02, 0x46, 0x0d, 0xb5, 0x8e},
    {0x07, 0x46, 0x0d, 0xb5, 0x8e},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0x05, 0x6e},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0x05, 0x6e},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0x4d, 0xb5, 0x8e},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x05, 0x6e},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0x0d, 0xf5, 0x8e},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0x45, 0xb5, 0xee},
    {0x0a, 0x41, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x05, 0x6e},
    {0x02, 0x43, 0x03, 0x05, 0x6e},
    {0x07, 0x43, 0x03, 0x05, 0x6e},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x16, 0xb5, 0x7e},
    {0x0b, 0x42, 0x16, 0xf5, 0x7e},
    {0x05, 0x44, 0x16, 0xb5, 0x7e},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x16, 0xf5, 0x7e},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x16, 0xb5, 0x7e},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0x07, 0xf5, 0xee},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc5, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x16, 0xb5, 0x7e},
    {0x02, 0x44, 0x16, 0xb5, 0x7e},
    {0x07, 0x44, 0x16, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x05, 0x6e},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x05, 0x6e},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x56, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x05, 0x6e},
    {0x01, 0x43, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x16, 0xf5, 0x7e},
    {0xc3, 0x03, 0x45, 0xb5, 0xee},
    {0xc1, 0x05, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x05, 0x6e},
    {0x02, 0x42, 0x03, 0x05, 0x6e},
    {0x07, 0x42, 0x03, 0x05, 0x6e},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x44, 0xf5, 0xee},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x44, 0xf5, 0xee},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x04, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x04, 0x6e},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x04, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0x44, 0xf5, 0xee},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x04, 0x6e},
    {0x02, 0x43, 0x0b, 0x04, 0x6e},
    {0x07, 0x43, 0x0b, 0x04, 0x6e},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0x04, 0x7e},
    {0x0b, 0x43, 0x03, 0x44, 0x7e},
    {0x05, 0x41, 0x03, 0x04, 0x7e},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0x44, 0x7e},
    {0xc8, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x04, 0x7e},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0x45, 0xb5, 0xee},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0x04, 0x7e},
    {0x02, 0x41, 0x03, 0x04, 0x7e},
    {0x07, 0x41, 0x03, 0x04, 0x7e},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x04, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x04, 0x6e},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x04, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x44, 0x7e},
    {0xc3, 0x0b, 0x44, 0xf5, 0xee},
    {0xc1, 0x09, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x0b, 0x04, 0x6e},
    {0x02, 0x42, 0x0b, 0x04, 0x6e},
    {0x07, 0x42, 0x0b, 0x04, 0x6e},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0d, 0xf5, 0x8e},
    {0x05, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4d, 0xb5, 0x8e},
    {0x09, 0x44, 0x0d, 0xf5, 0x8e},
    {0xda, 0x05, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x0d, 0xb5, 0x8e},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0x4d, 0xb5, 0x8e},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0x0d, 0xb5, 0x8e},
    {0x02, 0x45, 0x0d, 0xb5, 0x8e},
    {0x07, 0x45, 0x0d, 0xb5, 0x8e},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0x05, 0x6e},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0x05, 0x6e},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0x4d, 0xb5, 0x8e},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x05, 0x6e},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0x0d, 0xf5, 0x8e},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x05, 0x6e},
    {0x02, 0x43, 0x05, 0x05, 0x6e},
    {0x07, 0x43, 0x05, 0x05, 0x6e},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x04, 0x7e},
    {0x0b, 0x42, 0x03, 0x44, 0x7e},
    {0x05, 0x44, 0x03, 0x04, 0x7e},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x44, 0x7e},
    {0xca, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x04, 0x7e},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0x07, 0xf5, 0xee},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc6, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x04, 0x7e},
    {0x02, 0x44, 0x03, 0x04, 0x7e},
    {0x07, 0x44, 0x03, 0x04, 0x7e},
    {0x0d, 0x42, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x05, 0x6e},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x05, 0x6e},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x03, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x05, 0x6e},
    {0x01, 0x42, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x44, 0x7e},
    {0xc3, 0x05, 0x45, 0xb5, 0xee},
    {0xc1, 0x06, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x05, 0x05, 0x6e},
    {0x02, 0x42, 0x05, 0x05, 0x6e},
    {0x07, 0x42, 0x05, 0x05, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x02, 0xb5, 0xee},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x02, 0xb5, 0xee},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x02, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x02, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x02, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x02, 0xb5, 0xee},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x02, 0x6e},
    {0x02, 0x43, 0x0c, 0x02, 0x6e},
    {0x07, 0x43, 0x0c, 0x02, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x02, 0x7e},
    {0x0b, 0x43, 0x0b, 0x42, 0x7e},
    {0x05, 0x41, 0x0b, 0x02, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x42, 0x7e},
    {0xc7, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x02, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x02, 0x7e},
    {0x02, 0x41, 0x0b, 0x02, 0x7e},
    {0x07, 0x41, 0x0b, 0x02, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x02, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x02, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x02, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x42, 0x7e},
    {0xc3, 0x4c, 0x02, 0xb5, 0xee},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x0c, 0x02, 0x6e},
    {0x02, 0x42, 0x0c, 0x02, 0x6e},
    {0x07, 0x42, 0x0c, 0x02, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x02, 0x8e},
    {0x0b, 0x41, 0x03, 0x42, 0x8e},
    {0x05, 0x46, 0x03, 0x02, 0x8e},
    {0x0c, 0x43, 0x43, 0x02, 0x8e},
    {0x09, 0x41, 0x03, 0x42, 0x8e},
    {0xda, 0x09, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x02, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x02, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x02, 0x8e},
    {0x02, 0x46, 0x03, 0x02, 0x8e},
    {0x07, 0x46, 0x03, 0x02, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x04, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x04, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x02, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x04, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x42, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x09, 0x04, 0x6e},
    {0x02, 0x43, 0x09, 0x04, 0x6e},
    {0x07, 0x43, 0x09, 0x04, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x02, 0x7e},
    {0x0b, 0x42, 0x0b, 0x42, 0x7e},
    {0x05, 0x44, 0x0b, 0x02, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x42, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x02, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x02, 0x8e},
    {0xc5, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x02, 0x7e},
    {0x02, 0x44, 0x0b, 0x02, 0x7e},
    {0x07, 0x44, 0x0b, 0x02, 0x7e},
    {0x0d, 0x43, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x09, 0x04, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x04, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x02, 0x8e},
    {0xc4, 0x4b, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x04, 0x6e},
    {0x01, 0x43, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x0b, 0x42, 0x7e},
    {0xc3, 0x09, 0x44, 0xf5, 0xee},
    {0xc1, 0x0e, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x09, 0x04, 0x6e},
    {0x02, 0x42, 0x09, 0x04, 0x6e},
    {0x07, 0x42, 0x09, 0x04, 0x6e},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x02, 0xb5, 0xee},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x02, 0xb5, 0xee},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x04, 0x7e},
    {0x0b, 0x43, 0x05, 0x44, 0x7e},
    {0x05, 0x41, 0x05, 0x04, 0x7e},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x44, 0x7e},
    {0xc8, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x04, 0x7e},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x07, 0xf5, 0xee},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x04, 0x7e},
    {0x02, 0x41, 0x05, 0x04, 0x7e},
    {0x07, 0x41, 0x05, 0x04, 0x7e},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x44, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x02, 0x8e},
    {0x0b, 0x44, 0x03, 0x42, 0x8e},
    {0x05, 0x45, 0x03, 0x02, 0x8e},
    {0x0c, 0x42, 0x43, 0x02, 0x8e},
    {0x09, 0x44, 0x03, 0x42, 0x8e},
    {0xda, 0x06, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x02, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x07, 0xf5, 0xee},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x02, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x02, 0x8e},
    {0x02, 0x45, 0x03, 0x02, 0x8e},
    {0x07, 0x45, 0x03, 0x02, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x05, 0x6e},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x05, 0x6e},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x02, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x05, 0x6e},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x42, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x07, 0xf5, 0xee},
    {0x0a, 0x44, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x05, 0x6e},
    {0x02, 0x43, 0x06, 0x05, 0x6e},
    {0x07, 0x43, 0x06, 0x05, 0x6e},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x04, 0x7e},
    {0x0b, 0x42, 0x05, 0x44, 0x7e},
    {0x05, 0x44, 0x05, 0x04, 0x7e},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x44, 0x7e},
    {0xca, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x04, 0x7e},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x07, 0xf5, 0xee},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x02, 0x8e},
    {0xc6, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x04, 0x7e},
    {0x02, 0x44, 0x05, 0x04, 0x7e},
    {0x07, 0x44, 0x05, 0x04, 0x7e},
    {0x0d, 0x42, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x05, 0x6e},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x05, 0x6e},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x02, 0x8e},
    {0xc4, 0x05, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x05, 0x6e},
    {0x01, 0x42, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x05, 0x44, 0x7e},
    {0xc3, 0x06, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x06, 0x05, 0x6e},
    {0x02, 0x42, 0x06, 0x05, 0x6e},
    {0x07, 0x42, 0x06, 0x05, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x62, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x02, 0xb5, 0xee},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x22, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x22, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x22, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x02, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x22, 0xb5, 0x6e},
    {0x02, 0x43, 0x22, 0xb5, 0x6e},
    {0x07, 0x43, 0x22, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1a, 0xf5, 0x7e},
    {0x05, 0x41, 0x1a, 0xb5, 0x7e},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x1a, 0xf5, 0x7e},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x1a, 0xb5, 0x7e},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x1a, 0xb5, 0x7e},
    {0x02, 0x41, 0x1a, 0xb5, 0x7e},
    {0x07, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x22, 0xb5, 0x6e},
    {0xd7, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x22, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x22, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x1a, 0xf5, 0x7e},
    {0xc3, 0x62, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x22, 0xb5, 0x6e},
    {0x02, 0x42, 0x22, 0xb5, 0x6e},
    {0x07, 0x42, 0x22, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x02, 0xb5, 0xee},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1a, 0xf5, 0x7e},
    {0x05, 0x44, 0x1a, 0xb5, 0x7e},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x1a, 0xf5, 0x7e},
    {0xcb, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x1a, 0xb5, 0x7e},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x1a, 0xb5, 0x7e},
    {0x02, 0x44, 0x1a, 0xb5, 0x7e},
    {0x07, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x5a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x1a, 0xf5, 0x7e},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x08, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x48, 0xb5, 0x9e},
    {0x09, 0x46, 0x08, 0xf5, 0x9e},
    {0xda, 0x72, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x48, 0xf5, 0x9e},
    {0xc2, 0x68, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x48, 0xf5, 0x9e},
    {0x0e, 0x41, 0x48, 0xb5, 0x9e},
    {0x1c, 0x43, 0x48, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x32, 0xb5, 0x6e},
    {0x1b, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x32, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x48, 0xb5, 0x9e},
    {0xcd, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x32, 0xb5, 0x6e},
    {0x13, 0x43, 0x48, 0xf5, 0x9e},
    {0x08, 0x46, 0x08, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x68, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x32, 0xb5, 0x6e},
    {0x02, 0x43, 0x32, 0xb5, 0x6e},
    {0x07, 0x43, 0x32, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x02, 0x7e},
    {0x0b, 0x43, 0x09, 0x42, 0x7e},
    {0x05, 0x41, 0x09, 0x02, 0x7e},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x42, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x09, 0x02, 0x7e},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x44, 0xf5, 0xee},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x48, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x02, 0x7e},
    {0x02, 0x41, 0x09, 0x02, 0x7e},
    {0x07, 0x41, 0x09, 0x02, 0x7e},
    {0x0d, 0x41, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x32, 0xb5, 0x6e},
    {0xd9, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x32, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x48, 0xb5, 0x9e},
    {0xd5, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x32, 0xb5, 0x6e},
    {0x01, 0x41, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x42, 0x7e},
    {0xc3, 0x72, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x32, 0xb5, 0x6e},
    {0x02, 0x42, 0x32, 0xb5, 0x6e},
    {0x07, 0x42, 0x32, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4e, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8e, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x02, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x02, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x02, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8e, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0e, 0x02, 0x6e},
    {0x02, 0x43, 0x0e, 0x02, 0x6e},
    {0x07, 0x43, 0x0e, 0x02, 0x6e},
    {0x16, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x02, 0x7e},
    {0x0b, 0x42, 0x09, 0x42, 0x7e},
    {0x05, 0x44, 0x09, 0x02, 0x7e},
    {0x1a, 0x43, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x42, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x09, 0x02, 0x7e},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x09, 0x02, 0x7e},
    {0x02, 0x44, 0x09, 0x02, 0x7e},
    {0x07, 0x44, 0x09, 0x02, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0e, 0x02, 0x6e},
    {0x12, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x02, 0x6e},
    {0x15, 0x43, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x49, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x02, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x09, 0x42, 0x7e},
    {0xc3, 0x4e, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x0e, 0x02, 0x6e},
    {0x02, 0x42, 0x0e, 0x02, 0x6e},
    {0x07, 0x42, 0x0e, 0x02, 0x6e},
    {0xf4, 0x48, 0xf5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x02, 0xb5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3e, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3e, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x3e, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x02, 0xb5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3e, 0xb5, 0x6e},
    {0x02, 0x43, 0x3e, 0xb5, 0x6e},
    {0x07, 0x43, 0x3e, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x45, 0xb5, 0xee},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3e, 0xb5, 0x6e},
    {0xd8, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3e, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3e, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x7e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x3e, 0xb5, 0x6e},
    {0x02, 0x42, 0x3e, 0xb5, 0x6e},
    {0x07, 0x42, 0x3e, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x02, 0x8e},
    {0x0b, 0x41, 0x05, 0x42, 0x8e},
    {0x05, 0x46, 0x05, 0x02, 0x8e},
    {0x0c, 0x43, 0x45, 0x02, 0x8e},
    {0x09, 0x41, 0x05, 0x42, 0x8e},
    {0xda, 0x04, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x02, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x78, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x02, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x02, 0x8e},
    {0x02, 0x46, 0x05, 0x02, 0x8e},
    {0x07, 0x46, 0x05, 0x02, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x05, 0x6e},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x05, 0x6e},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x02, 0x8e},
    {0xd0, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x05, 0x6e},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x42, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x78, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x05, 0x6e},
    {0x02, 0x43, 0x04, 0x05, 0x6e},
    {0x07, 0x43, 0x04, 0x05, 0x6e},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x02, 0x8e},
    {0xc5, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x05, 0x6e},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x05, 0x6e},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x02, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x05, 0x6e},
    {0x01, 0x43, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x45, 0xb5, 0xee},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x05, 0x6e},
    {0x02, 0x42, 0x04, 0x05, 0x6e},
    {0x07, 0x42, 0x04, 0x05, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x08, 0xb5, 0x9e},
    {0x0b, 0x45, 0x08, 0xf5, 0x9e},
    {0x05, 0x47, 0x08, 0xb5, 0x9e},
    {0x0c, 0x44, 0x48, 0xb5, 0x9e},
    {0x09, 0x45, 0x08, 0xf5, 0x9e},
    {0xda, 0x02, 0x45, 0xb5, 0xee},
    {0x06, 0x47, 0x08, 0xb5, 0x9e},
    {0x14, 0x42, 0x48, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x45, 0xb5, 0xee},
    {0x18, 0x42, 0x48, 0xf5, 0x9e},
    {0x0e, 0x44, 0x48, 0xb5, 0x9e},
    {0x1c, 0x42, 0x48, 0xf5, 0x9e},
    {0x04, 0x47, 0x08, 0xb5, 0x9e},
    {0x02, 0x47, 0x08, 0xb5, 0x9e},
    {0x07, 0x47, 0x08, 0xb5, 0x9e},
    {0x17, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x05, 0x6e},
    {0x1b, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x05, 0x6e},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x48, 0xb5, 0x9e},
    {0xce, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x05, 0x6e},
    {0x13, 0x42, 0x48, 0xf5, 0x9e},
    {0x08, 0x45, 0x08, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x45, 0xb5, 0xee},
    {0x0a, 0x45, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x05, 0x6e},
    {0x02, 0x43, 0x02, 0x05, 0x6e},
    {0x07, 0x43, 0x02, 0x05, 0x6e},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x04, 0x7e},
    {0x0b, 0x43, 0x06, 0x44, 0x7e},
    {0x05, 0x41, 0x06, 0x04, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x44, 0x7e},
    {0xc8, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x04, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x48, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x04, 0x7e},
    {0x02, 0x41, 0x06, 0x04, 0x7e},
    {0x07, 0x41, 0x06, 0x04, 0x7e},
    {0x0d, 0x44, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x05, 0x6e},
    {0xdb, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x05, 0x6e},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x48, 0xb5, 0x9e},
    {0xd6, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x05, 0x6e},
    {0x01, 0x44, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x44, 0x7e},
    {0xc3, 0x02, 0x45, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x05, 0x6e},
    {0x02, 0x42, 0x02, 0x05, 0x6e},
    {0x07, 0x42, 0x02, 0x05, 0x6e},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x02, 0x8e},
    {0x0b, 0x44, 0x05, 0x42, 0x8e},
    {0x05, 0x45, 0x05, 0x02, 0x8e},
    {0x0c, 0x42, 0x45, 0x02, 0x8e},
    {0x09, 0x44, 0x05, 0x42, 0x8e},
    {0xda, 0x07, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x02, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x02, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x02, 0x8e},
    {0x02, 0x45, 0x05, 0x02, 0x8e},
    {0x07, 0x45, 0x05, 0x02, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x05, 0x6e},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x05, 0x6e},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x02, 0x8e},
    {0xd2, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x05, 0x6e},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x42, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x05, 0x6e},
    {0x02, 0x43, 0x07, 0x05, 0x6e},
    {0x07, 0x43, 0x07, 0x05, 0x6e},
    {0x16, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x04, 0x7e},
    {0x0b, 0x42, 0x06, 0x44, 0x7e},
    {0x05, 0x44, 0x06, 0x04, 0x7e},
    {0x1a, 0x42, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x44, 0x7e},
    {0xca, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x04, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x02, 0x8e},
    {0xc6, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x04, 0x7e},
    {0x02, 0x44, 0x06, 0x04, 0x7e},
    {0x07, 0x44, 0x06, 0x04, 0x7e},
    {0x0d, 0x42, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x05, 0x6e},
    {0x12, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x05, 0x6e},
    {0x15, 0x42, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x02, 0x8e},
    {0xc4, 0x06, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x05, 0x6e},
    {0x01, 0x42, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0x06, 0x44, 0x7e},
    {0xc3, 0x07, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x05, 0x6e},
    {0x02, 0x42, 0x07, 0x05, 0x6e},
    {0x07, 0x42, 0x07, 0x05, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x70, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0x03, 0xf5, 0xff},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x30, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x30, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x30, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0x03, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x30, 0xb5, 0x6e},
    {0x02, 0x43, 0x30, 0xb5, 0x6e},
    {0x07, 0x43, 0x30, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x25, 0xb5, 0x7f},
    {0x0b, 0x43, 0x25, 0xf5, 0x7f},
    {0x05, 0x41, 0x25, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x25, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x25, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x25, 0xb5, 0x7f},
    {0x02, 0x41, 0x25, 0xb5, 0x7f},
    {0x07, 0x41, 0x25, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x30, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x30, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x30, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x25, 0xf5, 0x7f},
    {0xc3, 0x70, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x25, 0xf5, 0x7f},
    {0x04, 0x42, 0x30, 0xb5, 0x6e},
    {0x02, 0x42, 0x30, 0xb5, 0x6e},
    {0x07, 0x42, 0x30, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x25, 0xb5, 0x7f},
    {0x0b, 0x42, 0x25, 0xf5, 0x7f},
    {0x05, 0x44, 0x25, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x25, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x25, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x25, 0xb5, 0x7f},
    {0x02, 0x44, 0x25, 0xb5, 0x7f},
    {0x07, 0x44, 0x25, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x65, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x25, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x25, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x7c, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x76, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x04, 0xb5, 0xae},
    {0x02, 0x49, 0x04, 0xb5, 0xae},
    {0x07, 0x49, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x3c, 0xb5, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x3c, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x3c, 0xb5, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x3c, 0xb5, 0x6e},
    {0x02, 0x43, 0x3c, 0xb5, 0x6e},
    {0x07, 0x43, 0x3c, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x3c, 0xb5, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x3c, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x3c, 0xb5, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7c, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3c, 0xb5, 0x6e},
    {0x02, 0x42, 0x3c, 0xb5, 0x6e},
    {0x07, 0x42, 0x3c, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x44, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x6a, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x44, 0xf5, 0xae},
    {0xc2, 0x64, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0x44, 0xf5, 0xae},
    {0x0e, 0x46, 0x44, 0xb5, 0xae},
    {0x1c, 0x41, 0x44, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x2a, 0xb5, 0x6e},
    {0x1b, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x2a, 0xb5, 0x6e},
    {0x67, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x46, 0x44, 0xb5, 0xae},
    {0xc9, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x2a, 0xb5, 0x6e},
    {0x13, 0x41, 0x44, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x64, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x2a, 0xb5, 0x6e},
    {0x02, 0x43, 0x2a, 0xb5, 0x6e},
    {0x07, 0x43, 0x2a, 0xb5, 0x6e},
    {0x6d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x19, 0xb5, 0x7e},
    {0x0b, 0x43, 0x19, 0xf5, 0x7e},
    {0x05, 0x41, 0x19, 0xb5, 0x7e},
    {0x75, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x19, 0xf5, 0x7e},
    {0xc7, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x19, 0xb5, 0x7e},
    {0x63, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0xc2, 0x44, 0xb5, 0x0e},
    {0x73, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x46, 0x44, 0xb5, 0xae},
    {0x7f, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x19, 0xb5, 0x7e},
    {0x02, 0x41, 0x19, 0xb5, 0x7e},
    {0x07, 0x41, 0x19, 0xb5, 0x7e},
    {0x0d, 0x46, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x2a, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2a, 0xb5, 0x6e},
    {0x6b, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x46, 0x44, 0xb5, 0xae},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2a, 0xb5, 0x6e},
    {0x01, 0x46, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x19, 0xf5, 0x7e},
    {0xc3, 0x6a, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x44, 0xb5, 0x0e},
    {0x0a, 0x43, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x2a, 0xb5, 0x6e},
    {0x02, 0x42, 0x2a, 0xb5, 0x6e},
    {0x07, 0x42, 0x2a, 0xb5, 0x6e},
    {0x5d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x11, 0xb5, 0x8e},
    {0x0b, 0x41, 0x11, 0xf5, 0x8e},
    {0x05, 0x46, 0x11, 0xb5, 0x8e},
    {0x0c, 0x43, 0x51, 0xb5, 0x8e},
    {0x09, 0x41, 0x11, 0xf5, 0x8e},
    {0xda, 0x50, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x11, 0xb5, 0x8e},
    {0x61, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x74, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x51, 0xb5, 0x8e},
    {0x7d, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x11, 0xb5, 0x8e},
    {0x02, 0x46, 0x11, 0xb5, 0x8e},
    {0x07, 0x46, 0x11, 0xb5, 0x8e},
    {0x6f, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0x02, 0x6e},
    {0x7b, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0x02, 0x6e},
    {0x69, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x51, 0xb5, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x02, 0x6e},
    {0x5f, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x11, 0xf5, 0x8e},
    {0x79, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x74, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x02, 0x6e},
    {0x02, 0x43, 0x10, 0x02, 0x6e},
    {0x07, 0x43, 0x10, 0x02, 0x6e},
    {0x16, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x19, 0xb5, 0x7e},
    {0x0b, 0x42, 0x19, 0xf5, 0x7e},
    {0x05, 0x44, 0x19, 0xb5, 0x7e},
    {0x1a, 0x41, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x19, 0xf5, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x19, 0xb5, 0x7e},
    {0x65, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x0f, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x51, 0xb5, 0x8e},
    {0xc5, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x19, 0xb5, 0x7e},
    {0x02, 0x44, 0x19, 0xb5, 0x7e},
    {0x07, 0x44, 0x19, 0xb5, 0x7e},
    {0x0d, 0x43, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x02, 0x6e},
    {0x12, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0x02, 0x6e},
    {0x15, 0x41, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x51, 0xb5, 0x8e},
    {0xc4, 0x59, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0x02, 0x6e},
    {0x01, 0x43, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x19, 0xf5, 0x7e},
    {0xc3, 0x50, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0x02, 0x6e},
    {0x02, 0x42, 0x10, 0x02, 0x6e},
    {0x07, 0x42, 0x10, 0x02, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x91, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x40, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x91, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x91, 0xb5, 0x6f},
    {0x68, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x91, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x40, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x91, 0xb5, 0x6f},
    {0x02, 0x43, 0x91, 0xb5, 0x6f},
    {0x07, 0x43, 0x91, 0xb5, 0x6f},
    {0x6e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x0f, 0x03, 0x7f},
    {0x0b, 0x43, 0x0f, 0x43, 0x7f},
    {0x05, 0x41, 0x0f, 0x03, 0x7f},
    {0x76, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x0f, 0x43, 0x7f},
    {0xc8, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0x03, 0x7f},
    {0x64, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x0f, 0x03, 0x7f},
    {0x02, 0x41, 0x0f, 0x03, 0x7f},
    {0x07, 0x41, 0x0f, 0x03, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x91, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x91, 0xb5, 0x6f},
    {0x6c, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x91, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0f, 0x43, 0x7f},
    {0x83, 0x91, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0x43, 0x7f},
    {0x04, 0x42, 0x91, 0xb5, 0x6f},
    {0x02, 0x42, 0x91, 0xb5, 0x6f},
    {0x07, 0x42, 0x91, 0xb5, 0x6f},
    {0x5e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x11, 0xb5, 0x8e},
    {0x0b, 0x44, 0x11, 0xf5, 0x8e},
    {0x05, 0x45, 0x11, 0xb5, 0x8e},
    {0x0c, 0x42, 0x51, 0xb5, 0x8e},
    {0x09, 0x44, 0x11, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x11, 0xb5, 0x8e},
    {0x62, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x51, 0xb5, 0x8e},
    {0x7e, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x11, 0xb5, 0x8e},
    {0x02, 0x45, 0x11, 0xb5, 0x8e},
    {0x07, 0x45, 0x11, 0xb5, 0x8e},
    {0x70, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x51, 0xb5, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x11, 0xf5, 0x8e},
    {0x7a, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0f, 0x03, 0x7f},
    {0x0b, 0x42, 0x0f, 0x43, 0x7f},
    {0x05, 0x44, 0x0f, 0x03, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0f, 0x43, 0x7f},
    {0xca, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0x03, 0x7f},
    {0x66, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x51, 0xb5, 0x8e},
    {0xc6, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0x03, 0x7f},
    {0x02, 0x44, 0x0f, 0x03, 0x7f},
    {0x07, 0x44, 0x0f, 0x03, 0x7f},
    {0x0d, 0x42, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x51, 0xb5, 0x8e},
    {0xc4, 0x4f, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0x43, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0x43, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x60, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x44, 0xf5, 0xee},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x20, 0xb5, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x20, 0xb5, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x20, 0xb5, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x44, 0xf5, 0xee},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x20, 0xb5, 0x6e},
    {0x02, 0x43, 0x20, 0xb5, 0x6e},
    {0x07, 0x43, 0x20, 0xb5, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x85, 0xb5, 0x7f},
    {0x0b, 0x43, 0x85, 0xf5, 0x7f},
    {0x05, 0x41, 0x85, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x85, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x85, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x85, 0xb5, 0x7f},
    {0x02, 0x41, 0x85, 0xb5, 0x7f},
    {0x07, 0x41, 0x85, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x20, 0xb5, 0x6e},
    {0x97, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x20, 0xb5, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0x93, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x20, 0xb5, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x85, 0xf5, 0x7f},
    {0xc3, 0x60, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x85, 0xf5, 0x7f},
    {0x04, 0x42, 0x20, 0xb5, 0x6e},
    {0x02, 0x42, 0x20, 0xb5, 0x6e},
    {0x07, 0x42, 0x20, 0xb5, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x9b, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x04, 0x6e},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x04, 0x6e},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x08, 0x04, 0x6e},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x9b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x04, 0x6e},
    {0x02, 0x43, 0x08, 0x04, 0x6e},
    {0x07, 0x43, 0x08, 0x04, 0x6e},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x85, 0xb5, 0x7f},
    {0x0b, 0x42, 0x85, 0xf5, 0x7f},
    {0x05, 0x44, 0x85, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x85, 0xf5, 0x7f},
    {0x8b, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x85, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x85, 0xb5, 0x7f},
    {0x02, 0x44, 0x85, 0xb5, 0x7f},
    {0x07, 0x44, 0x85, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x04, 0x6e},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x04, 0x6e},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0x84, 0x85, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x08, 0x04, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x85, 0xf5, 0x7f},
    {0xc3, 0x08, 0x44, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x85, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x04, 0x6e},
    {0x02, 0x42, 0x08, 0x04, 0x6e},
    {0x07, 0x42, 0x08, 0x04, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0x81, 0xf5, 0x9e},
    {0x05, 0x48, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xc1, 0xb5, 0x9e},
    {0x09, 0x46, 0x81, 0xf5, 0x9e},
    {0xda, 0x7a, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x6c, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc1, 0xf5, 0x9e},
    {0x04, 0x48, 0x04, 0xb5, 0xae},
    {0x02, 0x48, 0x04, 0xb5, 0xae},
    {0x07, 0x48, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x3a, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x3a, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0xc1, 0xb5, 0x9e},
    {0x8d, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x3a, 0xb5, 0x6e},
    {0x13, 0x43, 0xc1, 0xf5, 0x9e},
    {0x08, 0x46, 0x81, 0xf5, 0x9e},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6c, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x3a, 0xb5, 0x6e},
    {0x02, 0x43, 0x3a, 0xb5, 0x6e},
    {0x07, 0x43, 0x3a, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x04, 0x7e},
    {0x0b, 0x43, 0x04, 0x44, 0x7e},
    {0x05, 0x41, 0x04, 0x04, 0x7e},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x44, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x04, 0x7e},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x44, 0xf5, 0xee},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0xc1, 0xb5, 0x9e},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x04, 0x7e},
    {0x02, 0x41, 0x04, 0x04, 0x7e},
    {0x07, 0x41, 0x04, 0x04, 0x7e},
    {0x0d, 0x41, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x3a, 0xb5, 0x6e},
    {0x99, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3a, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0xc1, 0xb5, 0x9e},
    {0x95, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3a, 0xb5, 0x6e},
    {0x01, 0x41, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x04, 0x44, 0x7e},
    {0xc3, 0x7a, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x3a, 0xb5, 0x6e},
    {0x02, 0x42, 0x3a, 0xb5, 0x6e},
    {0x07, 0x42, 0x3a, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x96, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x96, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x04, 0x04, 0x7e},
    {0x0b, 0x42, 0x04, 0x44, 0x7e},
    {0x05, 0x44, 0x04, 0x04, 0x7e},
    {0x1a, 0x43, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x04, 0x44, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x04, 0x7e},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x04, 0x7e},
    {0x02, 0x44, 0x04, 0x04, 0x7e},
    {0x07, 0x44, 0x04, 0x04, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x44, 0x7e},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xb4, 0x81, 0xb5, 0x00, 0x0e},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x04, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x44, 0xb5, 0xae},
    {0x09, 0x47, 0x04, 0xf5, 0xae},
    {0xda, 0x0a, 0x44, 0xf5, 0xee},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x44, 0xf5, 0xae},
    {0xc2, 0x01, 0x44, 0xf5, 0xee},
    {0x18, 0x44, 0x44, 0xf5, 0xae},
    {0x0e, 0x45, 0x44, 0xb5, 0xae},
    {0x1c, 0x44, 0x44, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x04, 0x6e},
    {0x1b, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x04, 0x6e},
    {0x67, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x45, 0x44, 0xb5, 0xae},
    {0xc9, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x04, 0x6e},
    {0x13, 0x44, 0x44, 0xf5, 0xae},
    {0x08, 0x47, 0x04, 0xf5, 0xae},
    {0x77, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x01, 0x44, 0xf5, 0xee},
    {0x0a, 0x47, 0x04, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x04, 0x6e},
    {0x02, 0x43, 0x0a, 0x04, 0x6e},
    {0x07, 0x43, 0x0a, 0x04, 0x6e},
    {0x6d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x04, 0x7e},
    {0x0b, 0x43, 0x02, 0x44, 0x7e},
    {0x05, 0x41, 0x02, 0x04, 0x7e},
    {0x75, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x44, 0x7e},
    {0xc7, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x04, 0x7e},
    {0x63, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x45, 0x44, 0xb5, 0xae},
    {0x7f, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x04, 0x7e},
    {0x02, 0x41, 0x02, 0x04, 0x7e},
    {0x07, 0x41, 0x02, 0x04, 0x7e},
    {0x0d, 0x45, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x04, 0x6e},
    {0x98, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x0a, 0x04, 0x6e},
    {0x6b, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x45, 0x44, 0xb5, 0xae},
    {0x94, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x0a, 0x04, 0x6e},
    {0x01, 0x45, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x44, 0x7e},
    {0xc3, 0x0a, 0x44, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x0a, 0x04, 0x6e},
    {0x02, 0x42, 0x0a, 0x04, 0x6e},
    {0x07, 0x42, 0x0a, 0x04, 0x6e},
    {0x5d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0x02, 0x8e},
    {0x0b, 0x41, 0x06, 0x42, 0x8e},
    {0x05, 0x46, 0x06, 0x02, 0x8e},
    {0x0c, 0x43, 0x46, 0x02, 0x8e},
    {0x09, 0x41, 0x06, 0x42, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x02, 0x8e},
    {0x61, 0x02, 0x04, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0x02, 0x8e},
    {0x7d, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0x02, 0x8e},
    {0x02, 0x46, 0x06, 0x02, 0x8e},
    {0x07, 0x46, 0x06, 0x02, 0x8e},
    {0x6f, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0x02, 0x8e},
    {0x90, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0x42, 0x8e},
    {0x79, 0x02, 0x04, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x04, 0x7e},
    {0x0b, 0x42, 0x02, 0x44, 0x7e},
    {0x05, 0x44, 0x02, 0x04, 0x7e},
    {0x1a, 0x44, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x44, 0x7e},
    {0x8c, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x02, 0x04, 0x7e},
    {0x65, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0xc1, 0x44, 0xb5, 0x0e},
    {0x19, 0x44, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0x02, 0x8e},
    {0xc5, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x04, 0x7e},
    {0x02, 0x44, 0x02, 0x04, 0x7e},
    {0x07, 0x44, 0x02, 0x04, 0x7e},
    {0x0d, 0x43, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0x02, 0x8e},
    {0xc4, 0x02, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x44, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x44, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x81, 0xb5, 0x9e},
    {0x0b, 0x45, 0x81, 0xf5, 0x9e},
    {0x05, 0x47, 0x81, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc1, 0xb5, 0x9e},
    {0x09, 0x45, 0x81, 0xf5, 0x9e},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x81, 0xb5, 0x9e},
    {0x14, 0x42, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc1, 0xf5, 0x9e},
    {0x04, 0x47, 0x81, 0xb5, 0x9e},
    {0x02, 0x47, 0x81, 0xb5, 0x9e},
    {0x07, 0x47, 0x81, 0xb5, 0x9e},
    {0x17, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xc1, 0xb5, 0x9e},
    {0x8e, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0xc1, 0xf5, 0x9e},
    {0x08, 0x45, 0x81, 0xf5, 0x9e},
    {0x78, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x04, 0x7e},
    {0x0b, 0x43, 0x07, 0x44, 0x7e},
    {0x05, 0x41, 0x07, 0x04, 0x7e},
    {0x76, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x44, 0x7e},
    {0xc8, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x04, 0x7e},
    {0x64, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xc1, 0xb5, 0x9e},
    {0x40, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x04, 0x7e},
    {0x02, 0x41, 0x07, 0x04, 0x7e},
    {0x07, 0x41, 0x07, 0x04, 0x7e},
    {0x0d, 0x44, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0x9b, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xc1, 0xb5, 0x9e},
    {0x96, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x07, 0x44, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0x02, 0x8e},
    {0x0b, 0x44, 0x06, 0x42, 0x8e},
    {0x05, 0x45, 0x06, 0x02, 0x8e},
    {0x0c, 0x42, 0x46, 0x02, 0x8e},
    {0x09, 0x44, 0x06, 0x42, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x02, 0x8e},
    {0x62, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0x02, 0x8e},
    {0x7e, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0x02, 0x8e},
    {0x02, 0x45, 0x06, 0x02, 0x8e},
    {0x07, 0x45, 0x06, 0x02, 0x8e},
    {0x70, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0x02, 0x8e},
    {0x92, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0x42, 0x8e},
    {0x7a, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x07, 0x04, 0x7e},
    {0x0b, 0x42, 0x07, 0x44, 0x7e},
    {0x05, 0x44, 0x07, 0x04, 0x7e},
    {0x1a, 0x42, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x07, 0x44, 0x7e},
    {0xca, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x04, 0x7e},
    {0x66, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0x46, 0x02, 0x8e},
    {0xc6, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x04, 0x7e},
    {0x02, 0x44, 0x07, 0x04, 0x7e},
    {0x07, 0x44, 0x07, 0x04, 0x7e},
    {0x0d, 0x42, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0x46, 0x02, 0x8e},
    {0xc4, 0x07, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x44, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4e, 0xf5, 0x00, 0xee},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x56, 0x03, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4c, 0xf5, 0x40, 0xee},
    {0xc2, 0x5e, 0x03, 0xf5, 0xff},
    {0x18, 0x4c, 0xf5, 0x40, 0xee},
    {0x0e, 0x4e, 0xf5, 0x00, 0xee},
    {0x1c, 0x4c, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x16, 0x03, 0x6f},
    {0x1b, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x16, 0x03, 0x6f},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x4e, 0xf5, 0x00, 0xee},
    {0xc9, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x16, 0x03, 0x6f},
    {0x13, 0x4c, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0x03, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x16, 0x03, 0x6f},
    {0x02, 0x43, 0x16, 0x03, 0x6f},
    {0x07, 0x43, 0x16, 0x03, 0x6f},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0x03, 0x7f},
    {0x0b, 0x43, 0x0d, 0x43, 0x7f},
    {0x05, 0x41, 0x0d, 0x03, 0x7f},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0x43, 0x7f},
    {0xc7, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0d, 0x03, 0x7f},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x4e, 0xf5, 0x00, 0xee},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0x03, 0x7f},
    {0x02, 0x41, 0x0d, 0x03, 0x7f},
    {0x07, 0x41, 0x0d, 0x03, 0x7f},
    {0x0d, 0x4e, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x16, 0x03, 0x6f},
    {0xd7, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x16, 0x03, 0x6f},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x4e, 0xf5, 0x00, 0xee},
    {0xd3, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x16, 0x03, 0x6f},
    {0x01, 0x4e, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x0d, 0x43, 0x7f},
    {0xc3, 0x56, 0x03, 0xf5, 0xff},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0x43, 0x7f},
    {0x04, 0x42, 0x16, 0x03, 0x6f},
    {0x02, 0x42, 0x16, 0x03, 0x6f},
    {0x07, 0x42, 0x16, 0x03, 0x6f},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0x01, 0xb5, 0x8e},
    {0x0b, 0x41, 0x01, 0xf5, 0x8e},
    {0x05, 0x46, 0x01, 0xb5, 0x8e},
    {0x0c, 0x43, 0x41, 0xb5, 0x8e},
    {0x09, 0x41, 0x01, 0xf5, 0x8e},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x01, 0xb5, 0x8e},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0x41, 0xb5, 0x8e},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0x01, 0xb5, 0x8e},
    {0x02, 0x46, 0x01, 0xb5, 0x8e},
    {0x07, 0x46, 0x01, 0xb5, 0x8e},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0x41, 0xb5, 0x8e},
    {0xcf, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0x01, 0xf5, 0x8e},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x0d, 0x03, 0x7f},
    {0x0b, 0x42, 0x0d, 0x43, 0x7f},
    {0x05, 0x44, 0x0d, 0x03, 0x7f},
    {0x1a, 0x4c, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x0d, 0x43, 0x7f},
    {0xcb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0d, 0x03, 0x7f},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0x4c, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0x41, 0xb5, 0x8e},
    {0xc5, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0d, 0x03, 0x7f},
    {0x02, 0x44, 0x0d, 0x03, 0x7f},
    {0x07, 0x44, 0x0d, 0x03, 0x7f},
    {0x0d, 0x43, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0x4c, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0x41, 0xb5, 0x8e},
    {0xc4, 0x4d, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x0d, 0x43, 0x7f},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0x43, 0x7f},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0xdc, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x0a, 0xf5, 0x9e},
    {0x05, 0x49, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x4a, 0xb5, 0x9e},
    {0x09, 0x46, 0x0a, 0xf5, 0x9e},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4a, 0xf5, 0x9e},
    {0x04, 0x49, 0x02, 0xb5, 0xae},
    {0x02, 0x49, 0x02, 0xb5, 0xae},
    {0x07, 0x49, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0x4a, 0xb5, 0x9e},
    {0xcd, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0x4a, 0xf5, 0x9e},
    {0x08, 0x46, 0x0a, 0xf5, 0x9e},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0xc8, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0x4a, 0xb5, 0x9e},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0xd9, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0x4a, 0xb5, 0x9e},
    {0xd5, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0x01, 0xb5, 0x8e},
    {0x0b, 0x44, 0x01, 0xf5, 0x8e},
    {0x05, 0x45, 0x01, 0xb5, 0x8e},
    {0x0c, 0x42, 0x41, 0xb5, 0x8e},
    {0x09, 0x44, 0x01, 0xf5, 0x8e},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x01, 0xb5, 0x8e},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0xda, 0x46, 0xf5, 0x0f},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0x41, 0xb5, 0x8e},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0x01, 0xb5, 0x8e},
    {0x02, 0x45, 0x01, 0xb5, 0x8e},
    {0x07, 0x45, 0x01, 0xb5, 0x8e},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0x41, 0xb5, 0x8e},
    {0xd1, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0x01, 0xf5, 0x8e},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0xda, 0x46, 0xf5, 0x0f},
    {0x0a, 0x44, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0xca, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x41, 0xb5, 0x8e},
    {0xc6, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x41, 0xb5, 0x8e},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xf4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x03, 0x4a, 0x06, 0xb5, 0xbf},
    {0x0b, 0x49, 0x06, 0xf5, 0xbf},
    {0x05, 0x4a, 0x06, 0xb5, 0xbf},
    {0x0c, 0x46, 0x42, 0xb5, 0xae},
    {0x09, 0x49, 0x06, 0xf5, 0xbf},
    {0xda, 0x5a, 0x03, 0xf5, 0xff},
    {0x06, 0x4a, 0x06, 0xb5, 0xbf},
    {0x14, 0x41, 0x42, 0xf5, 0xae},
    {0xc2, 0x62, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0x42, 0xf5, 0xae},
    {0x0e, 0x46, 0x42, 0xb5, 0xae},
    {0x1c, 0x41, 0x42, 0xf5, 0xae},
    {0x04, 0x4a, 0x06, 0xb5, 0xbf},
    {0x02, 0x4a, 0x06, 0xb5, 0xbf},
    {0x07, 0x4a, 0x06, 0xb5, 0xbf},
    {0x17, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x1a, 0x03, 0x6f},
    {0x1b, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x1a, 0x03, 0x6f},
    {0x67, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x46, 0x42, 0xb5, 0xae},
    {0xc9, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x1a, 0x03, 0x6f},
    {0x13, 0x41, 0x42, 0xf5, 0xae},
    {0x08, 0x49, 0x06, 0xf5, 0xbf},
    {0x77, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x62, 0x03, 0xf5, 0xff},
    {0x0a, 0x49, 0x06, 0xf5, 0xbf},
    {0x04, 0x43, 0x1a, 0x03, 0x6f},
    {0x02, 0x43, 0x1a, 0x03, 0x6f},
    {0x07, 0x43, 0x1a, 0x03, 0x6f},
    {0x6d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x12, 0xb5, 0x7e},
    {0x0b, 0x43, 0x12, 0xf5, 0x7e},
    {0x05, 0x41, 0x12, 0xb5, 0x7e},
    {0x75, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x12, 0xf5, 0x7e},
    {0xc7, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x12, 0xb5, 0x7e},
    {0x63, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0xc2, 0x42, 0xb5, 0x0e},
    {0x73, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x46, 0x42, 0xb5, 0xae},
    {0x7f, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x12, 0xb5, 0x7e},
    {0x02, 0x41, 0x12, 0xb5, 0x7e},
    {0x07, 0x41, 0x12, 0xb5, 0x7e},
    {0x0d, 0x46, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x1a, 0x03, 0x6f},
    {0xd8, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1a, 0x03, 0x6f},
    {0x6b, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x46, 0x42, 0xb5, 0xae},
    {0xd4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1a, 0x03, 0x6f},
    {0x01, 0x46, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x12, 0xf5, 0x7e},
    {0xc3, 0x5a, 0x03, 0xf5, 0xff},
    {0xc1, 0xc2, 0x42, 0xb5, 0x0e},
    {0x0a, 0x43, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x1a, 0x03, 0x6f},
    {0x02, 0x42, 0x1a, 0x03, 0x6f},
    {0x07, 0x42, 0x1a, 0x03, 0x6f},
    {0x5d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x08, 0x03, 0x8f},
    {0x0b, 0x41, 0x08, 0x43, 0x8f},
    {0x05, 0x46, 0x08, 0x03, 0x8f},
    {0x0c, 0x43, 0x48, 0x03, 0x8f},
    {0x09, 0x41, 0x08, 0x43, 0x8f},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0x03, 0x8f},
    {0x61, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x72, 0x03, 0xf5, 0xff},
    {0x71, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0x48, 0x03, 0x8f},
    {0x7d, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x08, 0x03, 0x8f},
    {0x02, 0x46, 0x08, 0x03, 0x8f},
    {0x07, 0x46, 0x08, 0x03, 0x8f},
    {0x6f, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0x48, 0x03, 0x8f},
    {0xd0, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x08, 0x43, 0x8f},
    {0x79, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x72, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x08, 0x43, 0x8f},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x12, 0xb5, 0x7e},
    {0x0b, 0x42, 0x12, 0xf5, 0x7e},
    {0x05, 0x44, 0x12, 0xb5, 0x7e},
    {0x1a, 0x41, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x12, 0xf5, 0x7e},
    {0xcc, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x12, 0xb5, 0x7e},
    {0x65, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0x48, 0x03, 0x8f},
    {0xc5, 0x48, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x12, 0xb5, 0x7e},
    {0x02, 0x44, 0x12, 0xb5, 0x7e},
    {0x07, 0x44, 0x12, 0xb5, 0x7e},
    {0x0d, 0x43, 0x48, 0x03, 0x8f},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0x48, 0x03, 0x8f},
    {0xc4, 0x52, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0x03, 0x8f},
    {0x08, 0x42, 0x12, 0xf5, 0x7e},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0xdd, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0a, 0xf5, 0x9e},
    {0x05, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4a, 0xb5, 0x9e},
    {0x09, 0x45, 0x0a, 0xf5, 0x9e},
    {0x9a, 0x8a, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0a, 0xb5, 0x9e},
    {0x14, 0x42, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x7e, 0x03, 0xf5, 0xff},
    {0x18, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4a, 0xf5, 0x9e},
    {0x04, 0x47, 0x0a, 0xb5, 0x9e},
    {0x02, 0x47, 0x0a, 0xb5, 0x9e},
    {0x07, 0x47, 0x0a, 0xb5, 0x9e},
    {0x17, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x8a, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x8a, 0xb5, 0x6e},
    {0x68, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x4a, 0xb5, 0x9e},
    {0xce, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x8a, 0xb5, 0x6e},
    {0x13, 0x42, 0x4a, 0xf5, 0x9e},
    {0x08, 0x45, 0x0a, 0xf5, 0x9e},
    {0x78, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x7e, 0x03, 0xf5, 0xff},
    {0x0a, 0x45, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x8a, 0xb5, 0x6e},
    {0x02, 0x43, 0x8a, 0xb5, 0x6e},
    {0x07, 0x43, 0x8a, 0xb5, 0x6e},
    {0x6e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x4a, 0xb5, 0x9e},
    {0x40, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x8a, 0xb5, 0x6e},
    {0xdb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x8a, 0xb5, 0x6e},
    {0x6c, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x4a, 0xb5, 0x9e},
    {0xd6, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x8a, 0xb5, 0x6e},
    {0x01, 0x44, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8a, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8a, 0xb5, 0x6e},
    {0x02, 0x42, 0x8a, 0xb5, 0x6e},
    {0x07, 0x42, 0x8a, 0xb5, 0x6e},
    {0x5e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x08, 0x03, 0x8f},
    {0x0b, 0x44, 0x08, 0x43, 0x8f},
    {0x05, 0x45, 0x08, 0x03, 0x8f},
    {0x0c, 0x42, 0x48, 0x03, 0x8f},
    {0x09, 0x44, 0x08, 0x43, 0x8f},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0x03, 0x8f},
    {0x62, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0x48, 0x03, 0x8f},
    {0x7e, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x08, 0x03, 0x8f},
    {0x02, 0x45, 0x08, 0x03, 0x8f},
    {0x07, 0x45, 0x08, 0x03, 0x8f},
    {0x70, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0x48, 0x03, 0x8f},
    {0xd2, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x08, 0x43, 0x8f},
    {0x7a, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0x43, 0x8f},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x48, 0x03, 0x8f},
    {0xc6, 0x48, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0x03, 0x8f},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x48, 0x03, 0x8f},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0x03, 0x8f},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xf4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x50, 0xb5, 0x00, 0xee},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0x50, 0xb5, 0x00, 0xee},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x66, 0xf5, 0x00, 0x0e},
    {0x06, 0x50, 0xb5, 0x00, 0xee},
    {0x14, 0x46, 0x46, 0xf5, 0xbf},
    {0xc2, 0x70, 0x03, 0xf5, 0xff},
    {0x18, 0x46, 0x46, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x46, 0xf5, 0xbf},
    {0x04, 0x50, 0xb5, 0x00, 0xee},
    {0x02, 0x50, 0xb5, 0x00, 0xee},
    {0x07, 0x50, 0xb5, 0x00, 0xee},
    {0x17, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x43, 0x26, 0xb5, 0x6e},
    {0x1b, 0x46, 0x46, 0xf5, 0xbf},
    {0x05, 0x43, 0x26, 0xb5, 0x6e},
    {0x67, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x26, 0xb5, 0x6e},
    {0x13, 0x46, 0x46, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x06, 0xb5, 0xbf},
    {0xc1, 0x70, 0x03, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x26, 0xb5, 0x6e},
    {0x02, 0x43, 0x26, 0xb5, 0x6e},
    {0x07, 0x43, 0x26, 0xb5, 0x6e},
    {0x6d, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x15, 0xb5, 0x7e},
    {0x0b, 0x43, 0x15, 0xf5, 0x7e},
    {0x05, 0x41, 0x15, 0xb5, 0x7e},
    {0x75, 0x01, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x15, 0xf5, 0x7e},
    {0x87, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x15, 0xb5, 0x7e},
    {0x63, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x46, 0xbf},
    {0x73, 0x01, 0x06, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x15, 0xb5, 0x7e},
    {0x02, 0x41, 0x15, 0xb5, 0x7e},
    {0x07, 0x41, 0x15, 0xb5, 0x7e},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x26, 0xb5, 0x6e},
    {0xd7, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x26, 0xb5, 0x6e},
    {0x6b, 0x01, 0x06, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x26, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x15, 0xf5, 0x7e},
    {0xc3, 0x66, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x46, 0xbf},
    {0x0a, 0x43, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x26, 0xb5, 0x6e},
    {0x02, 0x42, 0x26, 0xb5, 0x6e},
    {0x07, 0x42, 0x26, 0xb5, 0x6e},
    {0x5d, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x46, 0x83, 0xb5, 0x8e},
    {0x0b, 0x41, 0x83, 0xf5, 0x8e},
    {0x05, 0x46, 0x83, 0xb5, 0x8e},
    {0x0c, 0x43, 0xc3, 0xb5, 0x8e},
    {0x09, 0x41, 0x83, 0xf5, 0x8e},
    {0xda, 0xc2, 0x46, 0xf5, 0x0f},
    {0x06, 0x46, 0x83, 0xb5, 0x8e},
    {0x61, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x7c, 0x03, 0xf5, 0xff},
    {0x71, 0x01, 0x06, 0xb5, 0xbf},
    {0x0e, 0x43, 0xc3, 0xb5, 0x8e},
    {0x7d, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x46, 0x83, 0xb5, 0x8e},
    {0x02, 0x46, 0x83, 0xb5, 0x8e},
    {0x07, 0x46, 0x83, 0xb5, 0x8e},
    {0x6f, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x06, 0x6f},
    {0x7b, 0x01, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x06, 0x6f},
    {0x69, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x43, 0xc3, 0xb5, 0x8e},
    {0xcf, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0x06, 0x6f},
    {0x5f, 0x01, 0x06, 0xb5, 0xbf},
    {0x08, 0x41, 0x83, 0xf5, 0x8e},
    {0x79, 0x01, 0x06, 0xb5, 0xbf},
    {0xc1, 0x7c, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x82, 0x06, 0x6f},
    {0x02, 0x43, 0x82, 0x06, 0x6f},
    {0x07, 0x43, 0x82, 0x06, 0x6f},
    {0x16, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x44, 0x15, 0xb5, 0x7e},
    {0x0b, 0x42, 0x15, 0xf5, 0x7e},
    {0x05, 0x44, 0x15, 0xb5, 0x7e},
    {0x1a, 0x46, 0x46, 0xf5, 0xbf},
    {0x09, 0x42, 0x15, 0xf5, 0x7e},
    {0xcb, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x15, 0xb5, 0x7e},
    {0x65, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x46, 0xbf},
    {0x19, 0x46, 0x46, 0xf5, 0xbf},
    {0x0f, 0x43, 0xc3, 0xb5, 0x8e},
    {0x85, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x15, 0xb5, 0x7e},
    {0x02, 0x44, 0x15, 0xb5, 0x7e},
    {0x07, 0x44, 0x15, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x82, 0x06, 0x6f},
    {0x12, 0x46, 0x46, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x06, 0x6f},
    {0x15, 0x46, 0x46, 0xf5, 0xbf},
    {0x11, 0x43, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x55, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0x06, 0x6f},
    {0x01, 0x43, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x15, 0xf5, 0x7e},
    {0xc3, 0xc2, 0x46, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x46, 0xbf},
    {0x0a, 0x42, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0x06, 0x6f},
    {0x02, 0x42, 0x82, 0x06, 0x6f},
    {0x07, 0x42, 0x82, 0x06, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x04, 0x43, 0x9f},
    {0x05, 0x48, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x44, 0x03, 0x9f},
    {0x09, 0x46, 0x04, 0x43, 0x9f},
    {0xda, 0x59, 0x03, 0xf5, 0xff},
    {0x06, 0x48, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x44, 0x43, 0x9f},
    {0xc2, 0x6a, 0x03, 0xf5, 0xff},
    {0x18, 0x43, 0x44, 0x43, 0x9f},
    {0x0e, 0x41, 0x44, 0x03, 0x9f},
    {0x1c, 0x43, 0x44, 0x43, 0x9f},
    {0x04, 0x48, 0x02, 0xb5, 0xae},
    {0x02, 0x48, 0x02, 0xb5, 0xae},
    {0x07, 0x48, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x44, 0x43, 0x9f},
    {0x03, 0x43, 0x19, 0x03, 0x6f},
    {0x1b, 0x43, 0x44, 0x43, 0x9f},
    {0x05, 0x43, 0x19, 0x03, 0x6f},
    {0x68, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x41, 0x44, 0x03, 0x9f},
    {0xcd, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x19, 0x03, 0x6f},
    {0x13, 0x43, 0x44, 0x43, 0x9f},
    {0x08, 0x46, 0x04, 0x43, 0x9f},
    {0x78, 0x01, 0x06, 0xb5, 0xbf},
    {0xc1, 0x6a, 0x03, 0xf5, 0xff},
    {0x0a, 0x46, 0x04, 0x43, 0x9f},
    {0x04, 0x43, 0x19, 0x03, 0x6f},
    {0x02, 0x43, 0x19, 0x03, 0x6f},
    {0x07, 0x43, 0x19, 0x03, 0x6f},
    {0x6e, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x11, 0x03, 0x7f},
    {0x0b, 0x43, 0x11, 0x43, 0x7f},
    {0x05, 0x41, 0x11, 0x03, 0x7f},
    {0x76, 0x01, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x11, 0x43, 0x7f},
    {0x88, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x11, 0x03, 0x7f},
    {0x64, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0x06, 0xb5, 0xbf},
    {0x0f, 0x41, 0x44, 0x03, 0x9f},
    {0x40, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x11, 0x03, 0x7f},
    {0x02, 0x41, 0x11, 0x03, 0x7f},
    {0x07, 0x41, 0x11, 0x03, 0x7f},
    {0x0d, 0x41, 0x44, 0x03, 0x9f},
    {0x03, 0x42, 0x19, 0x03, 0x6f},
    {0xd9, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x19, 0x03, 0x6f},
    {0x6c, 0x01, 0x06, 0xb5, 0xbf},
    {0x11, 0x41, 0x44, 0x03, 0x9f},
    {0xd5, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x19, 0x03, 0x6f},
    {0x01, 0x41, 0x44, 0x03, 0x9f},
    {0x08, 0x43, 0x11, 0x43, 0x7f},
    {0xc3, 0x59, 0x03, 0xf5, 0xff},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0x43, 0x7f},
    {0x04, 0x42, 0x19, 0x03, 0x6f},
    {0x02, 0x42, 0x19, 0x03, 0x6f},
    {0x07, 0x42, 0x19, 0x03, 0x6f},
    {0x5e, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x45, 0x83, 0xb5, 0x8e},
    {0x0b, 0x44, 0x83, 0xf5, 0x8e},
    {0x05, 0x45, 0x83, 0xb5, 0x8e},
    {0x0c, 0x42, 0xc3, 0xb5, 0x8e},
    {0x09, 0x44, 0x83, 0xf5, 0x8e},
    {0xda, 0x4f, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0x83, 0xb5, 0x8e},
    {0x62, 0x01, 0x06, 0xb5, 0xbf},
    {0x82, 0x92, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x06, 0xb5, 0xbf},
    {0x0e, 0x42, 0xc3, 0xb5, 0x8e},
    {0x7e, 0x01, 0x06, 0xb5, 0xbf},
    {0x04, 0x45, 0x83, 0xb5, 0x8e},
    {0x02, 0x45, 0x83, 0xb5, 0x8e},
    {0x07, 0x45, 0x83, 0xb5, 0x8e},
    {0x70, 0x01, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x02, 0x6e},
    {0x7c, 0x01, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x02, 0x6e},
    {0x6a, 0x01, 0x06, 0xb5, 0xbf},
    {0x10, 0x42, 0xc3, 0xb5, 0x8e},
    {0xd1, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x0f, 0x02, 0x6e},
    {0x60, 0x01, 0x06, 0xb5, 0xbf},
    {0x08, 0x44, 0x83, 0xf5, 0x8e},
    {0x7a, 0x01, 0x06, 0xb5, 0xbf},
    {0x81, 0x92, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x0f, 0x02, 0x6e},
    {0x02, 0x43, 0x0f, 0x02, 0x6e},
    {0x07, 0x43, 0x0f, 0x02, 0x6e},
    {0x16, 0x43, 0x44, 0x43, 0x9f},
    {0x03, 0x44, 0x11, 0x03, 0x7f},
    {0x0b, 0x42, 0x11, 0x43, 0x7f},
    {0x05, 0x44, 0x11, 0x03, 0x7f},
    {0x1a, 0x43, 0x44, 0x43, 0x9f},
    {0x09, 0x42, 0x11, 0x43, 0x7f},
    {0x8a, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x11, 0x03, 0x7f},
    {0x66, 0x01, 0x06, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x46, 0xbf},
    {0x19, 0x43, 0x44, 0x43, 0x9f},
    {0x0f, 0x42, 0xc3, 0xb5, 0x8e},
    {0x86, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x11, 0x03, 0x7f},
    {0x02, 0x44, 0x11, 0x03, 0x7f},
    {0x07, 0x44, 0x11, 0x03, 0x7f},
    {0x0d, 0x42, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x0f, 0x02, 0x6e},
    {0x12, 0x43, 0x44, 0x43, 0x9f},
    {0x05, 0x42, 0x0f, 0x02, 0x6e},
    {0x15, 0x43, 0x44, 0x43, 0x9f},
    {0x11, 0x42, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x51, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x02, 0x6e},
    {0x01, 0x42, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x11, 0x43, 0x7f},
    {0xc3, 0x4f, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x46, 0xbf},
    {0x0a, 0x42, 0x11, 0x43, 0x7f},
    {0x04, 0x42, 0x0f, 0x02, 0x6e},
    {0x02, 0x42, 0x0f, 0x02, 0x6e},
    {0x07, 0x42, 0x0f, 0x02, 0x6e},
    {0xf4, 0x44, 0x03, 0xf5, 0xff},
    {0x03, 0x40, 0xb5, 0x00, 0xee},
    {0x0b, 0x47, 0x02, 0xf5, 0xae},
    {0x05, 0x40, 0xb5, 0x00, 0xee},
    {0x0c, 0x45, 0x42, 0xb5, 0xae},
    {0x09, 0x47, 0x02, 0xf5, 0xae},
    {0x9a, 0x86, 0xb5, 0x00, 0x0e},
    {0x06, 0x40, 0xb5, 0x00, 0xee},
    {0x14, 0x44, 0x42, 0xf5, 0xae},
    {0xc2, 0x60, 0x03, 0xf5, 0xff},
    {0x18, 0x44, 0x42, 0xf5, 0xae},
    {0x0e, 0x45, 0x42, 0xb5, 0xae},
    {0x1c, 0x44, 0x42, 0xf5, 0xae},
    {0x04, 0x40, 0xb5, 0x00, 0xee},
    {0x02, 0x40, 0xb5, 0x00, 0xee},
    {0x07, 0x40, 0xb5, 0x00, 0xee},
    {0x17, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x86, 0xb5, 0x6e},
    {0x1b, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x86, 0xb5, 0x6e},
    {0x67, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x45, 0x42, 0xb5, 0xae},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x86, 0xb5, 0x6e},
    {0x13, 0x44, 0x42, 0xf5, 0xae},
    {0x08, 0x47, 0x02, 0xf5, 0xae},
    {0x77, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x60, 0x03, 0xf5, 0xff},
    {0x0a, 0x47, 0x02, 0xf5, 0xae},
    {0x04, 0x43, 0x86, 0xb5, 0x6e},
    {0x02, 0x43, 0x86, 0xb5, 0x6e},
    {0x07, 0x43, 0x86, 0xb5, 0x6e},
    {0x6d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x84, 0xb5, 0x7e},
    {0x0b, 0x43, 0x84, 0xf5, 0x7e},
    {0x05, 0x41, 0x84, 0xb5, 0x7e},
    {0x75, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x84, 0xf5, 0x7e},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x84, 0xb5, 0x7e},
    {0x63, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x45, 0x42, 0xb5, 0xae},
    {0x7f, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x84, 0xb5, 0x7e},
    {0x02, 0x41, 0x84, 0xb5, 0x7e},
    {0x07, 0x41, 0x84, 0xb5, 0x7e},
    {0x0d, 0x45, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x86, 0xb5, 0x6e},
    {0xd8, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x86, 0xb5, 0x6e},
    {0x6b, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x45, 0x42, 0xb5, 0xae},
    {0xd4, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x86, 0xb5, 0x6e},
    {0x01, 0x45, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x84, 0xf5, 0x7e},
    {0x83, 0x86, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x86, 0xb5, 0x6e},
    {0x02, 0x42, 0x86, 0xb5, 0x6e},
    {0x07, 0x42, 0x86, 0xb5, 0x6e},
    {0x5d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x7a, 0x03, 0xf5, 0xff},
    {0x71, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x7a, 0x03, 0xf5, 0xff},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x84, 0xb5, 0x7e},
    {0x0b, 0x42, 0x84, 0xf5, 0x7e},
    {0x05, 0x44, 0x84, 0xb5, 0x7e},
    {0x1a, 0x44, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x84, 0xf5, 0x7e},
    {0xcc, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x84, 0xb5, 0x7e},
    {0x65, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0xc1, 0x42, 0xb5, 0x0e},
    {0x19, 0x44, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x84, 0xb5, 0x7e},
    {0x02, 0x44, 0x84, 0xb5, 0x7e},
    {0x07, 0x44, 0x84, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0x84, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x84, 0xf5, 0x7e},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0xc1, 0xc1, 0x42, 0xb5, 0x0e},
    {0x0a, 0x42, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0x03, 0x9f},
    {0x0b, 0x45, 0x04, 0x43, 0x9f},
    {0x05, 0x47, 0x04, 0x03, 0x9f},
    {0x0c, 0x44, 0x44, 0x03, 0x9f},
    {0x09, 0x45, 0x04, 0x43, 0x9f},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0x03, 0x9f},
    {0x14, 0x42, 0x44, 0x43, 0x9f},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0x43, 0x9f},
    {0x0e, 0x44, 0x44, 0x03, 0x9f},
    {0x1c, 0x42, 0x44, 0x43, 0x9f},
    {0x04, 0x47, 0x04, 0x03, 0x9f},
    {0x02, 0x47, 0x04, 0x03, 0x9f},
    {0x07, 0x47, 0x04, 0x03, 0x9f},
    {0x17, 0x42, 0x44, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x44, 0x03, 0x9f},
    {0xce, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0x43, 0x9f},
    {0x08, 0x45, 0x04, 0x43, 0x9f},
    {0x78, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x03, 0x46, 0xbf},
    {0x74, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x44, 0x03, 0x9f},
    {0x40, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x44, 0x03, 0x9f},
    {0xd6, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0x03, 0x9f},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x46, 0xbf},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x03, 0x46, 0xbf},
    {0x72, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x03, 0x46, 0xbf},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0x43, 0x9f},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0x43, 0x9f},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x03, 0x46, 0xbf},
    {0x19, 0x42, 0x44, 0x43, 0x9f},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0x43, 0x9f},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x46, 0xbf},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xf4, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x02, 0xb5, 0xee},
    {0x06, 0xc1, 0xb5, 0x00, 0x0e},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x02, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xc1, 0xb5, 0x00, 0x0e},
    {0x02, 0xc1, 0xb5, 0x00, 0x0e},
    {0x07, 0xc1, 0xb5, 0x00, 0x0e},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x02, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x02, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x0d, 0x02, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x02, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x02, 0x6e},
    {0x02, 0x43, 0x0d, 0x02, 0x6e},
    {0x07, 0x43, 0x0d, 0x02, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0x03, 0x7f},
    {0x0b, 0x43, 0x01, 0x43, 0x7f},
    {0x05, 0x41, 0x01, 0x03, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0x43, 0x7f},
    {0xc7, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x01, 0x03, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0x03, 0x7f},
    {0x02, 0x41, 0x01, 0x03, 0x7f},
    {0x07, 0x41, 0x01, 0x03, 0x7f},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x02, 0x6e},
    {0xd7, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0d, 0x02, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0d, 0x02, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0x43, 0x7f},
    {0xc3, 0x4d, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0x43, 0x7f},
    {0x04, 0x42, 0x0d, 0x02, 0x6e},
    {0x02, 0x42, 0x0d, 0x02, 0x6e},
    {0x07, 0x42, 0x0d, 0x02, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0x03, 0x8f},
    {0x0b, 0x41, 0x0a, 0x43, 0x8f},
    {0x05, 0x46, 0x0a, 0x03, 0x8f},
    {0x0c, 0x43, 0x4a, 0x03, 0x8f},
    {0x09, 0x41, 0x0a, 0x43, 0x8f},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0x03, 0x8f},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0x03, 0x8f},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0x03, 0x8f},
    {0x02, 0x46, 0x0a, 0x03, 0x8f},
    {0x07, 0x46, 0x0a, 0x03, 0x8f},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0x03, 0x8f},
    {0xcf, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0x43, 0x8f},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0x43, 0x8f},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0x03, 0x7f},
    {0x0b, 0x42, 0x01, 0x43, 0x7f},
    {0x05, 0x44, 0x01, 0x03, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0x43, 0x7f},
    {0xcb, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x01, 0x03, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0x03, 0x8f},
    {0xc5, 0x4a, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x01, 0x03, 0x7f},
    {0x02, 0x44, 0x01, 0x03, 0x7f},
    {0x07, 0x44, 0x01, 0x03, 0x7f},
    {0x0d, 0x43, 0x4a, 0x03, 0x8f},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0x03, 0x8f},
    {0xc4, 0x41, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0x03, 0x8f},
    {0x08, 0x42, 0x01, 0x43, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0x43, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0x43, 0x9f},
    {0x05, 0x49, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0x03, 0x9f},
    {0x09, 0x46, 0x02, 0x43, 0x9f},
    {0xda, 0x52, 0x03, 0xf5, 0xff},
    {0x06, 0x49, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0x43, 0x9f},
    {0xc2, 0x5a, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0x43, 0x9f},
    {0x0e, 0x41, 0x42, 0x03, 0x9f},
    {0x1c, 0x43, 0x42, 0x43, 0x9f},
    {0x04, 0x49, 0x07, 0xb5, 0xae},
    {0x02, 0x49, 0x07, 0xb5, 0xae},
    {0x07, 0x49, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0x43, 0x9f},
    {0x03, 0x43, 0x12, 0x03, 0x6f},
    {0x1b, 0x43, 0x42, 0x43, 0x9f},
    {0x05, 0x43, 0x12, 0x03, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0x03, 0x9f},
    {0xcd, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x12, 0x03, 0x6f},
    {0x13, 0x43, 0x42, 0x43, 0x9f},
    {0x08, 0x46, 0x02, 0x43, 0x9f},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0x43, 0x9f},
    {0x04, 0x43, 0x12, 0x03, 0x6f},
    {0x02, 0x43, 0x12, 0x03, 0x6f},
    {0x07, 0x43, 0x12, 0x03, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x02, 0x7e},
    {0x0b, 0x43, 0x08, 0x42, 0x7e},
    {0x05, 0x41, 0x08, 0x02, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x42, 0x7e},
    {0xc8, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x41, 0x08, 0x02, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0x03, 0x9f},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x02, 0x7e},
    {0x02, 0x41, 0x08, 0x02, 0x7e},
    {0x07, 0x41, 0x08, 0x02, 0x7e},
    {0x0d, 0x41, 0x42, 0x03, 0x9f},
    {0x03, 0x42, 0x12, 0x03, 0x6f},
    {0xd9, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x12, 0x03, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0x03, 0x9f},
    {0xd5, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x12, 0x03, 0x6f},
    {0x01, 0x41, 0x42, 0x03, 0x9f},
    {0x08, 0x43, 0x08, 0x42, 0x7e},
    {0xc3, 0x52, 0x03, 0xf5, 0xff},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x12, 0x03, 0x6f},
    {0x02, 0x42, 0x12, 0x03, 0x6f},
    {0x07, 0x42, 0x12, 0x03, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0x03, 0x8f},
    {0x0b, 0x44, 0x0a, 0x43, 0x8f},
    {0x05, 0x45, 0x0a, 0x03, 0x8f},
    {0x0c, 0x42, 0x4a, 0x03, 0x8f},
    {0x09, 0x44, 0x0a, 0x43, 0x8f},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0x03, 0x8f},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0x03, 0x8f},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0x03, 0x8f},
    {0x02, 0x45, 0x0a, 0x03, 0x8f},
    {0x07, 0x45, 0x0a, 0x03, 0x8f},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0x03, 0x8f},
    {0xd1, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0x43, 0x8f},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0x43, 0x8f},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0x43, 0x9f},
    {0x03, 0x44, 0x08, 0x02, 0x7e},
    {0x0b, 0x42, 0x08, 0x42, 0x7e},
    {0x05, 0x44, 0x08, 0x02, 0x7e},
    {0x1a, 0x43, 0x42, 0x43, 0x9f},
    {0x09, 0x42, 0x08, 0x42, 0x7e},
    {0xca, 0x4a, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x08, 0x02, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0x43, 0x9f},
    {0x0f, 0x42, 0x4a, 0x03, 0x8f},
    {0xc6, 0x4a, 0x03, 0xf5, 0xff},
    {0x04, 0x44, 0x08, 0x02, 0x7e},
    {0x02, 0x44, 0x08, 0x02, 0x7e},
    {0x07, 0x44, 0x08, 0x02, 0x7e},
    {0x0d, 0x42, 0x4a, 0x03, 0x8f},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0x43, 0x9f},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0x43, 0x9f},
    {0x11, 0x42, 0x4a, 0x03, 0x8f},
    {0xc4, 0x48, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0x03, 0x8f},
    {0x08, 0x42, 0x08, 0x42, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0x03, 0xf5, 0xff},
    {0x03, 0x4b, 0x06, 0xb5, 0xbf},
    {0x0b, 0x48, 0x06, 0xf5, 0xbf},
    {0x05, 0x4b, 0x06, 0xb5, 0xbf},
    {0x0c, 0x46, 0x47, 0xb5, 0xae},
    {0x09, 0x48, 0x06, 0xf5, 0xbf},
    {0xda, 0x55, 0x03, 0xf5, 0xff},
    {0x06, 0x4b, 0x06, 0xb5, 0xbf},
    {0x14, 0x41, 0x47, 0xf5, 0xae},
    {0xc2, 0x66, 0x03, 0xf5, 0xff},
    {0x18, 0x41, 0x47, 0xf5, 0xae},
    {0x0e, 0x46, 0x47, 0xb5, 0xae},
    {0x1c, 0x41, 0x47, 0xf5, 0xae},
    {0x04, 0x4b, 0x06, 0xb5, 0xbf},
    {0x02, 0x4b, 0x06, 0xb5, 0xbf},
    {0x07, 0x4b, 0x06, 0xb5, 0xbf},
    {0x17, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0x03, 0x6f},
    {0x1b, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0x03, 0x6f},
    {0x67, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x46, 0x47, 0xb5, 0xae},
    {0xc9, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0x03, 0x6f},
    {0x13, 0x41, 0x47, 0xf5, 0xae},
    {0x08, 0x48, 0x06, 0xf5, 0xbf},
    {0x77, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x66, 0x03, 0xf5, 0xff},
    {0x0a, 0x48, 0x06, 0xf5, 0xbf},
    {0x04, 0x43, 0x15, 0x03, 0x6f},
    {0x02, 0x43, 0x15, 0x03, 0x6f},
    {0x07, 0x43, 0x15, 0x03, 0x6f},
    {0x6d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0xc2, 0x47, 0xb5, 0x0e},
    {0x73, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x46, 0x47, 0xb5, 0xae},
    {0x7f, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0x03, 0x6f},
    {0xd8, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x15, 0x03, 0x6f},
    {0x6b, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x46, 0x47, 0xb5, 0xae},
    {0xd4, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x15, 0x03, 0x6f},
    {0x01, 0x46, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0x03, 0xf5, 0xff},
    {0xc1, 0xc2, 0x47, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0x03, 0x6f},
    {0x02, 0x42, 0x15, 0x03, 0x6f},
    {0x07, 0x42, 0x15, 0x03, 0x6f},
    {0x5d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x02, 0x8e},
    {0x0b, 0x41, 0x04, 0x42, 0x8e},
    {0x05, 0x46, 0x04, 0x02, 0x8e},
    {0x0c, 0x43, 0x44, 0x02, 0x8e},
    {0x09, 0x41, 0x04, 0x42, 0x8e},
    {0xda, 0x51, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x02, 0x8e},
    {0x61, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x59, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x02, 0x8e},
    {0x7d, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x02, 0x8e},
    {0x02, 0x46, 0x04, 0x02, 0x8e},
    {0x07, 0x46, 0x04, 0x02, 0x8e},
    {0x6f, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x02, 0x6e},
    {0x7b, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x02, 0x6e},
    {0x69, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x02, 0x8e},
    {0xd0, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x11, 0x02, 0x6e},
    {0x5f, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x42, 0x8e},
    {0x79, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x59, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x11, 0x02, 0x6e},
    {0x02, 0x43, 0x11, 0x02, 0x6e},
    {0x07, 0x43, 0x11, 0x02, 0x6e},
    {0x16, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x02, 0x8e},
    {0xc5, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x11, 0x02, 0x6e},
    {0x12, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x02, 0x6e},
    {0x15, 0x41, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x02, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x02, 0x6e},
    {0x01, 0x43, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x02, 0x6e},
    {0x02, 0x42, 0x11, 0x02, 0x6e},
    {0x07, 0x42, 0x11, 0x02, 0x6e},
    {0xde, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x02, 0x03, 0x9f},
    {0x0b, 0x45, 0x02, 0x43, 0x9f},
    {0x05, 0x47, 0x02, 0x03, 0x9f},
    {0x0c, 0x44, 0x42, 0x03, 0x9f},
    {0x09, 0x45, 0x02, 0x43, 0x9f},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0x03, 0x9f},
    {0x14, 0x42, 0x42, 0x43, 0x9f},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0x43, 0x9f},
    {0x0e, 0x44, 0x42, 0x03, 0x9f},
    {0x1c, 0x42, 0x42, 0x43, 0x9f},
    {0x04, 0x47, 0x02, 0x03, 0x9f},
    {0x02, 0x47, 0x02, 0x03, 0x9f},
    {0x07, 0x47, 0x02, 0x03, 0x9f},
    {0x17, 0x42, 0x42, 0x43, 0x9f},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0x43, 0x9f},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0x03, 0x9f},
    {0xce, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0x43, 0x9f},
    {0x08, 0x45, 0x02, 0x43, 0x9f},
    {0x78, 0x03, 0x07, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0x43, 0x9f},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0x03, 0x9f},
    {0x40, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0x03, 0x9f},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0x03, 0x9f},
    {0xd6, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0x03, 0x9f},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x02, 0x8e},
    {0x0b, 0x44, 0x04, 0x42, 0x8e},
    {0x05, 0x45, 0x04, 0x02, 0x8e},
    {0x0c, 0x42, 0x44, 0x02, 0x8e},
    {0x09, 0x44, 0x04, 0x42, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x02, 0x8e},
    {0x62, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x02, 0x8e},
    {0x7e, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x02, 0x8e},
    {0x02, 0x45, 0x04, 0x02, 0x8e},
    {0x07, 0x45, 0x04, 0x02, 0x8e},
    {0x70, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x02, 0x8e},
    {0xd2, 0x42, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x42, 0x8e},
    {0x7a, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0x43, 0x9f},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0x43, 0x9f},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0x43, 0x9f},
    {0x0f, 0x42, 0x44, 0x02, 0x8e},
    {0xc6, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0x43, 0x9f},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0x43, 0x9f},
    {0x11, 0x42, 0x44, 0x02, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x47, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x46, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x02, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x46, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0x46, 0xf5, 0xbf},
    {0x0e, 0x47, 0x46, 0xb5, 0xbf},
    {0x1c, 0x45, 0x46, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x02, 0x6e},
    {0x1b, 0x45, 0x46, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x02, 0x6e},
    {0x67, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x47, 0x46, 0xb5, 0xbf},
    {0xc9, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x02, 0x6e},
    {0x13, 0x45, 0x46, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x06, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x02, 0x6e},
    {0x02, 0x43, 0x01, 0x02, 0x6e},
    {0x07, 0x43, 0x01, 0x02, 0x6e},
    {0x6d, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x02, 0x7e},
    {0x0b, 0x43, 0x0a, 0x42, 0x7e},
    {0x05, 0x41, 0x0a, 0x02, 0x7e},
    {0x75, 0x04, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x42, 0x7e},
    {0xc7, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x02, 0x7e},
    {0x63, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x46, 0xbf},
    {0x73, 0x04, 0x06, 0xb5, 0xbf},
    {0x0f, 0x47, 0x46, 0xb5, 0xbf},
    {0x7f, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x02, 0x7e},
    {0x02, 0x41, 0x0a, 0x02, 0x7e},
    {0x07, 0x41, 0x0a, 0x02, 0x7e},
    {0x0d, 0x47, 0x46, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x02, 0x6e},
    {0xd7, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x02, 0x6e},
    {0x6b, 0x04, 0x06, 0xb5, 0xbf},
    {0x11, 0x47, 0x46, 0xb5, 0xbf},
    {0xd3, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x02, 0x6e},
    {0x01, 0x47, 0x46, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x42, 0x7e},
    {0xc3, 0x41, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0x46, 0xbf},
    {0x0a, 0x43, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x01, 0x02, 0x6e},
    {0x02, 0x42, 0x01, 0x02, 0x6e},
    {0x07, 0x42, 0x01, 0x02, 0x6e},
    {0x5d, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x02, 0x8e},
    {0x0b, 0x41, 0x02, 0x42, 0x8e},
    {0x05, 0x46, 0x02, 0x02, 0x8e},
    {0x0c, 0x43, 0x42, 0x02, 0x8e},
    {0x09, 0x41, 0x02, 0x42, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x02, 0x8e},
    {0x61, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x52, 0x02, 0xb5, 0xee},
    {0x71, 0x04, 0x06, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x02, 0x8e},
    {0x7d, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x02, 0x8e},
    {0x02, 0x46, 0x02, 0x02, 0x8e},
    {0x07, 0x46, 0x02, 0x02, 0x8e},
    {0x6f, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x02, 0x8e},
    {0xcf, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0x06, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x42, 0x8e},
    {0x79, 0x04, 0x06, 0xb5, 0xbf},
    {0xc1, 0x52, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x02, 0x7e},
    {0x0b, 0x42, 0x0a, 0x42, 0x7e},
    {0x05, 0x44, 0x0a, 0x02, 0x7e},
    {0x1a, 0x45, 0x46, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x42, 0x7e},
    {0xcb, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x02, 0x7e},
    {0x65, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x46, 0xbf},
    {0x19, 0x45, 0x46, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x02, 0x8e},
    {0xc5, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x02, 0x7e},
    {0x02, 0x44, 0x0a, 0x02, 0x7e},
    {0x07, 0x44, 0x0a, 0x02, 0x7e},
    {0x0d, 0x43, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0x46, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0x46, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x02, 0x8e},
    {0xc4, 0x4a, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x0a, 0x42, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x46, 0xbf},
    {0x0a, 0x42, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0x43, 0x9f},
    {0x05, 0x48, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0x03, 0x9f},
    {0x09, 0x46, 0x07, 0x43, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0x43, 0x9f},
    {0xc2, 0x55, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0x43, 0x9f},
    {0x0e, 0x41, 0x47, 0x03, 0x9f},
    {0x1c, 0x43, 0x47, 0x43, 0x9f},
    {0x04, 0x48, 0x07, 0xb5, 0xae},
    {0x02, 0x48, 0x07, 0xb5, 0xae},
    {0x07, 0x48, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0x43, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0x43, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x41, 0x47, 0x03, 0x9f},
    {0xcd, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0x43, 0x9f},
    {0x08, 0x46, 0x07, 0x43, 0x9f},
    {0x78, 0x04, 0x06, 0xb5, 0xbf},
    {0xc1, 0x55, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0x43, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0x06, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0x06, 0xb5, 0xbf},
    {0x0f, 0x41, 0x47, 0x03, 0x9f},
    {0x40, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0x03, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x06, 0xb5, 0xbf},
    {0x11, 0x41, 0x47, 0x03, 0x9f},
    {0xd5, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0x03, 0x9f},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x02, 0x8e},
    {0x0b, 0x44, 0x02, 0x42, 0x8e},
    {0x05, 0x45, 0x02, 0x02, 0x8e},
    {0x0c, 0x42, 0x42, 0x02, 0x8e},
    {0x09, 0x44, 0x02, 0x42, 0x8e},
    {0xda, 0xc1, 0x46, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x02, 0x8e},
    {0x62, 0x04, 0x06, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x06, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x02, 0x8e},
    {0x7e, 0x04, 0x06, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x02, 0x8e},
    {0x02, 0x45, 0x02, 0x02, 0x8e},
    {0x07, 0x45, 0x02, 0x02, 0x8e},
    {0x70, 0x04, 0x06, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x06, 0x6f},
    {0x7c, 0x04, 0x06, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x06, 0x6f},
    {0x6a, 0x04, 0x06, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x02, 0x8e},
    {0xd1, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0x06, 0x6f},
    {0x60, 0x04, 0x06, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x42, 0x8e},
    {0x7a, 0x04, 0x06, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x81, 0x06, 0x6f},
    {0x02, 0x43, 0x81, 0x06, 0x6f},
    {0x07, 0x43, 0x81, 0x06, 0x6f},
    {0x16, 0x43, 0x47, 0x43, 0x9f},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0x43, 0x9f},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0x06, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x46, 0xbf},
    {0x19, 0x43, 0x47, 0x43, 0x9f},
    {0x0f, 0x42, 0x42, 0x02, 0x8e},
    {0xc6, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x81, 0x06, 0x6f},
    {0x12, 0x43, 0x47, 0x43, 0x9f},
    {0x05, 0x42, 0x81, 0x06, 0x6f},
    {0x15, 0x43, 0x47, 0x43, 0x9f},
    {0x11, 0x42, 0x42, 0x02, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x06, 0x6f},
    {0x01, 0x42, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0xc3, 0xc1, 0x46, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x46, 0xbf},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0x06, 0x6f},
    {0x02, 0x42, 0x81, 0x06, 0x6f},
    {0x07, 0x42, 0x81, 0x06, 0x6f},
    {0xf4, 0x47, 0x03, 0xf5, 0xff},
    {0x03, 0x4c, 0x06, 0xb5, 0xbf},
    {0x0b, 0x47, 0x07, 0xf5, 0xae},
    {0x05, 0x4c, 0x06, 0xb5, 0xbf},
    {0x0c, 0x45, 0x47, 0xb5, 0xae},
    {0x09, 0x47, 0x07, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0x06, 0xb5, 0xbf},
    {0x14, 0x44, 0x47, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x47, 0xf5, 0xae},
    {0x0e, 0x45, 0x47, 0xb5, 0xae},
    {0x1c, 0x44, 0x47, 0xf5, 0xae},
    {0x04, 0x4c, 0x06, 0xb5, 0xbf},
    {0x02, 0x4c, 0x06, 0xb5, 0xbf},
    {0x07, 0x4c, 0x06, 0xb5, 0xbf},
    {0x17, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x45, 0x47, 0xb5, 0xae},
    {0xc9, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x47, 0xf5, 0xae},
    {0x08, 0x47, 0x07, 0xf5, 0xae},
    {0x77, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x07, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x45, 0x47, 0xb5, 0xae},
    {0x7f, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x45, 0x47, 0xb5, 0xae},
    {0xd4, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x02, 0x8e},
    {0x0b, 0x41, 0x07, 0x42, 0x8e},
    {0x05, 0x46, 0x07, 0x02, 0x8e},
    {0x0c, 0x43, 0x47, 0x02, 0x8e},
    {0x09, 0x41, 0x07, 0x42, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x02, 0x8e},
    {0x61, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc3, 0x46, 0xf5, 0x0f},
    {0x71, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x02, 0x8e},
    {0x7d, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x02, 0x8e},
    {0x02, 0x46, 0x07, 0x02, 0x8e},
    {0x07, 0x46, 0x07, 0x02, 0x8e},
    {0x6f, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x02, 0x8e},
    {0xd0, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x42, 0x8e},
    {0x79, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0xc3, 0x46, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc1, 0x47, 0xb5, 0x0e},
    {0x19, 0x44, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x02, 0x8e},
    {0xc5, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x02, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x47, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0x03, 0x9f},
    {0x0b, 0x45, 0x07, 0x43, 0x9f},
    {0x05, 0x47, 0x07, 0x03, 0x9f},
    {0x0c, 0x44, 0x47, 0x03, 0x9f},
    {0x09, 0x45, 0x07, 0x43, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0x03, 0x9f},
    {0x14, 0x42, 0x47, 0x43, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0x43, 0x9f},
    {0x0e, 0x44, 0x47, 0x03, 0x9f},
    {0x1c, 0x42, 0x47, 0x43, 0x9f},
    {0x04, 0x47, 0x07, 0x03, 0x9f},
    {0x02, 0x47, 0x07, 0x03, 0x9f},
    {0x07, 0x47, 0x07, 0x03, 0x9f},
    {0x17, 0x42, 0x47, 0x43, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0x43, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0x03, 0x9f},
    {0xce, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0x43, 0x9f},
    {0x08, 0x45, 0x07, 0x43, 0x9f},
    {0x78, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0x43, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x46, 0xbf},
    {0x74, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0x03, 0x9f},
    {0x40, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0x03, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0x03, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0x03, 0x9f},
    {0xd6, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0x03, 0x9f},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x46, 0xbf},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x02, 0x8e},
    {0x0b, 0x44, 0x07, 0x42, 0x8e},
    {0x05, 0x45, 0x07, 0x02, 0x8e},
    {0x0c, 0x42, 0x47, 0x02, 0x8e},
    {0x09, 0x44, 0x07, 0x42, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x02, 0x8e},
    {0x62, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x46, 0xbf},
    {0x72, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x02, 0x8e},
    {0x7e, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x02, 0x8e},
    {0x02, 0x45, 0x07, 0x02, 0x8e},
    {0x07, 0x45, 0x07, 0x02, 0x8e},
    {0x70, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x02, 0x8e},
    {0xd2, 0x47, 0x03, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x42, 0x8e},
    {0x7a, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x46, 0xbf},
    {0x0a, 0x44, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0x43, 0x9f},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0x43, 0x9f},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x46, 0xbf},
    {0x19, 0x42, 0x47, 0x43, 0x9f},
    {0x0f, 0x42, 0x47, 0x02, 0x8e},
    {0xc6, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0x43, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0x43, 0x9f},
    {0x11, 0x42, 0x47, 0x02, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x46, 0xbf},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0f},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf2, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf2, 0x40, 0x00, 0x06},
    {0x09, 0xf2, 0x00, 0x40, 0x05},
    {0x9a, 0xb2, 0x00, 0x00, 0x06},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb2, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf2, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb2, 0x00, 0x66},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb2, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf2, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0xb2, 0x00, 0x66},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf2, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb2, 0x00, 0x00, 0x05},
    {0x0a, 0xf2, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb2, 0x00, 0x66},
    {0x02, 0x43, 0xb2, 0x00, 0x66},
    {0x07, 0x43, 0xb2, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf2, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0xf2, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb2, 0x00, 0x66},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0xb2, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf2, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0xb2, 0x00, 0x66},
    {0x01, 0xf2, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0x83, 0xb2, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0xb2, 0x00, 0x66},
    {0x02, 0x42, 0xb2, 0x00, 0x66},
    {0x07, 0x42, 0xb2, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0xf5, 0x00, 0x0a},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0xb5, 0x6a},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0xb5, 0x6a},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0xb5, 0x6a},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0xf5, 0x00, 0x0a},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0xb5, 0x6a},
    {0x02, 0x43, 0x03, 0xb5, 0x6a},
    {0x07, 0x43, 0x03, 0xb5, 0x6a},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0xb5, 0x6a},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0xb5, 0x6a},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x03, 0xb5, 0x6a},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x03, 0xf5, 0x00, 0x0a},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x03, 0xb5, 0x6a},
    {0x02, 0x42, 0x03, 0xb5, 0x6a},
    {0x07, 0x42, 0x03, 0xb5, 0x6a},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0xf5, 0x40, 0x0b},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0xf5, 0x40, 0x0b},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0xb5, 0x6b},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0xb5, 0x6b},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0xb5, 0x6b},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0xf5, 0x40, 0x0b},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0xb5, 0x6b},
    {0x02, 0x43, 0x0b, 0xb5, 0x6b},
    {0x07, 0x43, 0x0b, 0xb5, 0x6b},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0xb5, 0x7b},
    {0x0b, 0x43, 0x03, 0xf5, 0x7b},
    {0x05, 0x41, 0x03, 0xb5, 0x7b},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0xf5, 0x7b},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0xb5, 0x7b},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0xf5, 0x00, 0x0a},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0xb5, 0x7b},
    {0x02, 0x41, 0x03, 0xb5, 0x7b},
    {0x07, 0x41, 0x03, 0xb5, 0x7b},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0xb5, 0x6b},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0xb5, 0x6b},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0xb5, 0x6b},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0xf5, 0x7b},
    {0xc3, 0x0b, 0xf5, 0x40, 0x0b},
    {0xc1, 0x09, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x0b, 0xb5, 0x6b},
    {0x02, 0x42, 0x0b, 0xb5, 0x6b},
    {0x07, 0x42, 0x0b, 0xb5, 0x6b},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0xb5, 0x6a},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x6a},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0xb5, 0x6a},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0xb5, 0x6a},
    {0x02, 0x43, 0x05, 0xb5, 0x6a},
    {0x07, 0x43, 0x05, 0xb5, 0x6a},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0xb5, 0x7b},
    {0x0b, 0x42, 0x03, 0xf5, 0x7b},
    {0x05, 0x44, 0x03, 0xb5, 0x7b},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0xf5, 0x7b},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0xb5, 0x7b},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0xb5, 0x7b},
    {0x02, 0x44, 0x03, 0xb5, 0x7b},
    {0x07, 0x44, 0x03, 0xb5, 0x7b},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0xb5, 0x6a},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0xb5, 0x6a},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x05, 0xb5, 0x6a},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0xf5, 0x7b},
    {0xc3, 0x05, 0xf5, 0x00, 0x0a},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0xf5, 0x7b},
    {0x04, 0x42, 0x05, 0xb5, 0x6a},
    {0x02, 0x42, 0x05, 0xb5, 0x6a},
    {0x07, 0x42, 0x05, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0xb5, 0x00, 0x0c},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0xb5, 0x00, 0x0c},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0xb5, 0x6c},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0xb5, 0x6c},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0c, 0xb5, 0x6c},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0xb5, 0x00, 0x0c},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0xb5, 0x6c},
    {0x02, 0x43, 0x0c, 0xb5, 0x6c},
    {0x07, 0x43, 0x0c, 0xb5, 0x6c},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0b, 0xf5, 0x7c},
    {0x05, 0x41, 0x0b, 0xb5, 0x7c},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc7, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0b, 0xb5, 0x7c},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0xb5, 0x7c},
    {0x02, 0x41, 0x0b, 0xb5, 0x7c},
    {0x07, 0x41, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0xb5, 0x6c},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0xb5, 0x6c},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0xb5, 0x6c},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x4c, 0xb5, 0x00, 0x0c},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x0c, 0xb5, 0x6c},
    {0x02, 0x42, 0x0c, 0xb5, 0x6c},
    {0x07, 0x42, 0x0c, 0xb5, 0x6c},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0xb5, 0x8c},
    {0x0b, 0x41, 0x03, 0xf5, 0x8c},
    {0x05, 0x46, 0x03, 0xb5, 0x8c},
    {0x0c, 0x43, 0x43, 0xb5, 0x8c},
    {0x09, 0x41, 0x03, 0xf5, 0x8c},
    {0xda, 0x09, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x03, 0xb5, 0x8c},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0xb5, 0x8c},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0xb5, 0x8c},
    {0x02, 0x46, 0x03, 0xb5, 0x8c},
    {0x07, 0x46, 0x03, 0xb5, 0x8c},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0xb5, 0x6b},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0xb5, 0x6b},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0xb5, 0x8c},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0xb5, 0x6b},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0xf5, 0x8c},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x09, 0xb5, 0x6b},
    {0x02, 0x43, 0x09, 0xb5, 0x6b},
    {0x07, 0x43, 0x09, 0xb5, 0x6b},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0b, 0xf5, 0x7c},
    {0x05, 0x44, 0x0b, 0xb5, 0x7c},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0xf5, 0x7c},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0xb5, 0x7c},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0xb5, 0x8c},
    {0xc5, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0b, 0xb5, 0x7c},
    {0x02, 0x44, 0x0b, 0xb5, 0x7c},
    {0x07, 0x44, 0x0b, 0xb5, 0x7c},
    {0x0d, 0x43, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x09, 0xb5, 0x6b},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0xb5, 0x6b},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0xb5, 0x8c},
    {0xc4, 0x4b, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x09, 0xb5, 0x6b},
    {0x01, 0x43, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x0b, 0xf5, 0x7c},
    {0xc3, 0x09, 0xf5, 0x40, 0x0b},
    {0xc1, 0x0e, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x0b, 0xf5, 0x7c},
    {0x04, 0x42, 0x09, 0xb5, 0x6b},
    {0x02, 0x42, 0x09, 0xb5, 0x6b},
    {0x07, 0x42, 0x09, 0xb5, 0x6b},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0xb5, 0x00, 0x0c},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0xb5, 0x00, 0x0c},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0xb5, 0x7b},
    {0x0b, 0x43, 0x05, 0xf5, 0x7b},
    {0x05, 0x41, 0x05, 0xb5, 0x7b},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0xf5, 0x7b},
    {0xc8, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x05, 0xb5, 0x7b},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0xb5, 0x7b},
    {0x02, 0x41, 0x05, 0xb5, 0x7b},
    {0x07, 0x41, 0x05, 0xb5, 0x7b},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0xf5, 0x7b},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0xb5, 0x8c},
    {0x0b, 0x44, 0x03, 0xf5, 0x8c},
    {0x05, 0x45, 0x03, 0xb5, 0x8c},
    {0x0c, 0x42, 0x43, 0xb5, 0x8c},
    {0x09, 0x44, 0x03, 0xf5, 0x8c},
    {0xda, 0x06, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x03, 0xb5, 0x8c},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0xb5, 0x8c},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0xb5, 0x8c},
    {0x02, 0x45, 0x03, 0xb5, 0x8c},
    {0x07, 0x45, 0x03, 0xb5, 0x8c},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0xb5, 0x6a},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0xb5, 0x6a},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0xb5, 0x8c},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0xb5, 0x6a},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0xf5, 0x8c},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0xb5, 0x6a},
    {0x02, 0x43, 0x06, 0xb5, 0x6a},
    {0x07, 0x43, 0x06, 0xb5, 0x6a},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0xb5, 0x7b},
    {0x0b, 0x42, 0x05, 0xf5, 0x7b},
    {0x05, 0x44, 0x05, 0xb5, 0x7b},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0xf5, 0x7b},
    {0xca, 0x43, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x05, 0xb5, 0x7b},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0xb5, 0x8c},
    {0xc6, 0x43, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x05, 0xb5, 0x7b},
    {0x02, 0x44, 0x05, 0xb5, 0x7b},
    {0x07, 0x44, 0x05, 0xb5, 0x7b},
    {0x0d, 0x42, 0x43, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0xb5, 0x6a},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0xb5, 0x6a},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0xb5, 0x8c},
    {0xc4, 0x05, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x06, 0xb5, 0x6a},
    {0x01, 0x42, 0x43, 0xb5, 0x8c},
    {0x08, 0x42, 0x05, 0xf5, 0x7b},
    {0xc3, 0x06, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0xf5, 0x7b},
    {0x04, 0x42, 0x06, 0xb5, 0x6a},
    {0x02, 0x42, 0x06, 0xb5, 0x6a},
    {0x07, 0x42, 0x06, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0xb5, 0x40, 0x0d},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0xb5, 0x00, 0x0c},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0xb5, 0x6d},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0xb5, 0x6d},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x14, 0xb5, 0x6d},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0xb5, 0x00, 0x0c},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0xb5, 0x6d},
    {0x02, 0x43, 0x14, 0xb5, 0x6d},
    {0x07, 0x43, 0x14, 0xb5, 0x6d},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0c, 0xf5, 0x7d},
    {0x05, 0x41, 0x0c, 0xb5, 0x7d},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc7, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0c, 0xb5, 0x7d},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0xb5, 0x7d},
    {0x02, 0x41, 0x0c, 0xb5, 0x7d},
    {0x07, 0x41, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0xb5, 0x6d},
    {0xd7, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x14, 0xb5, 0x6d},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x14, 0xb5, 0x6d},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0xf5, 0x7d},
    {0xc3, 0x54, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x14, 0xb5, 0x6d},
    {0x02, 0x42, 0x14, 0xb5, 0x6d},
    {0x07, 0x42, 0x14, 0xb5, 0x6d},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0b, 0xf5, 0x8d},
    {0x05, 0x46, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4b, 0xb5, 0x8d},
    {0x09, 0x41, 0x0b, 0xf5, 0x8d},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0xb5, 0x8d},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0xb5, 0x00, 0x0c},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0xb5, 0x8d},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0xb5, 0x8d},
    {0x02, 0x46, 0x0b, 0xb5, 0x8d},
    {0x07, 0x46, 0x0b, 0xb5, 0x8d},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0xb5, 0x8d},
    {0xcf, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0xf5, 0x8d},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0c, 0xf5, 0x7d},
    {0x05, 0x44, 0x0c, 0xb5, 0x7d},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0xf5, 0x7d},
    {0xcb, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0c, 0xb5, 0x7d},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc5, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0c, 0xb5, 0x7d},
    {0x02, 0x44, 0x0c, 0xb5, 0x7d},
    {0x07, 0x44, 0x0c, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x4c, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x0c, 0xf5, 0x7d},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0xf5, 0x7d},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0xb5, 0x9d},
    {0x09, 0x46, 0x03, 0xf5, 0x9d},
    {0xda, 0x58, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0xf5, 0x9d},
    {0xc2, 0x67, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x43, 0xf5, 0x9d},
    {0x0e, 0x41, 0x43, 0xb5, 0x9d},
    {0x1c, 0x43, 0x43, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x18, 0xb5, 0x6d},
    {0x1b, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x18, 0xb5, 0x6d},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0xb5, 0x9d},
    {0xcd, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x18, 0xb5, 0x6d},
    {0x13, 0x43, 0x43, 0xf5, 0x9d},
    {0x08, 0x46, 0x03, 0xf5, 0x9d},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x18, 0xb5, 0x6d},
    {0x02, 0x43, 0x18, 0xb5, 0x6d},
    {0x07, 0x43, 0x18, 0xb5, 0x6d},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0xb5, 0x7c},
    {0x0b, 0x43, 0x09, 0xf5, 0x7c},
    {0x05, 0x41, 0x09, 0xb5, 0x7c},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0xf5, 0x7c},
    {0xc8, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x09, 0xb5, 0x7c},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0xf5, 0x40, 0x0b},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0xb5, 0x9d},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0xb5, 0x7c},
    {0x02, 0x41, 0x09, 0xb5, 0x7c},
    {0x07, 0x41, 0x09, 0xb5, 0x7c},
    {0x0d, 0x41, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x18, 0xb5, 0x6d},
    {0xd9, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x18, 0xb5, 0x6d},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0xb5, 0x9d},
    {0xd5, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x18, 0xb5, 0x6d},
    {0x01, 0x41, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x09, 0xf5, 0x7c},
    {0xc3, 0x58, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x18, 0xb5, 0x6d},
    {0x02, 0x42, 0x18, 0xb5, 0x6d},
    {0x07, 0x42, 0x18, 0xb5, 0x6d},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0b, 0xf5, 0x8d},
    {0x05, 0x45, 0x0b, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4b, 0xb5, 0x8d},
    {0x09, 0x44, 0x0b, 0xf5, 0x8d},
    {0xda, 0x4e, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0x0b, 0xb5, 0x8d},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0xb5, 0x8d},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0xb5, 0x8d},
    {0x02, 0x45, 0x0b, 0xb5, 0x8d},
    {0x07, 0x45, 0x0b, 0xb5, 0x8d},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0xb5, 0x6c},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0xb5, 0x6c},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0xb5, 0x8d},
    {0xd1, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0e, 0xb5, 0x6c},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0xf5, 0x8d},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0xf5, 0x8d},
    {0x04, 0x43, 0x0e, 0xb5, 0x6c},
    {0x02, 0x43, 0x0e, 0xb5, 0x6c},
    {0x07, 0x43, 0x0e, 0xb5, 0x6c},
    {0x16, 0x43, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x09, 0xb5, 0x7c},
    {0x0b, 0x42, 0x09, 0xf5, 0x7c},
    {0x05, 0x44, 0x09, 0xb5, 0x7c},
    {0x1a, 0x43, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x09, 0xf5, 0x7c},
    {0xca, 0x4b, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x09, 0xb5, 0x7c},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc6, 0x4b, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x09, 0xb5, 0x7c},
    {0x02, 0x44, 0x09, 0xb5, 0x7c},
    {0x07, 0x44, 0x09, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4b, 0xb5, 0x8d},
    {0x03, 0x42, 0x0e, 0xb5, 0x6c},
    {0x12, 0x43, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x0e, 0xb5, 0x6c},
    {0x15, 0x43, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x4b, 0xb5, 0x8d},
    {0xc4, 0x49, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x0e, 0xb5, 0x6c},
    {0x01, 0x42, 0x4b, 0xb5, 0x8d},
    {0x08, 0x42, 0x09, 0xf5, 0x7c},
    {0xc3, 0x4e, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0xf5, 0x7c},
    {0x04, 0x42, 0x0e, 0xb5, 0x6c},
    {0x02, 0x42, 0x0e, 0xb5, 0x6c},
    {0x07, 0x42, 0x0e, 0xb5, 0x6c},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0xb5, 0x40, 0x0d},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0xb5, 0x00, 0x0c},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0xb5, 0x6d},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0xb5, 0x6d},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x1c, 0xb5, 0x6d},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0xb5, 0x00, 0x0c},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0xb5, 0x6d},
    {0x02, 0x43, 0x1c, 0xb5, 0x6d},
    {0x07, 0x43, 0x1c, 0xb5, 0x6d},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0xf5, 0x00, 0x0a},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0xb5, 0x6d},
    {0xd8, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x1c, 0xb5, 0x6d},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x1c, 0xb5, 0x6d},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0xb5, 0x40, 0x0d},
    {0xc1, 0x08, 0xf5, 0x00, 0x0a},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0xb5, 0x6d},
    {0x02, 0x42, 0x1c, 0xb5, 0x6d},
    {0x07, 0x42, 0x1c, 0xb5, 0x6d},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0xb5, 0x8c},
    {0x0b, 0x41, 0x05, 0xf5, 0x8c},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x0c, 0x43, 0x45, 0xb5, 0x8c},
    {0x09, 0x41, 0x05, 0xf5, 0x8c},
    {0xda, 0x04, 0xf5, 0x00, 0x0a},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0xb5, 0x8c},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0xb5, 0x8c},
    {0x02, 0x46, 0x05, 0xb5, 0x8c},
    {0x07, 0x46, 0x05, 0xb5, 0x8c},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0xb5, 0x6a},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0xb5, 0x6a},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0xb5, 0x8c},
    {0xd0, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0xb5, 0x6a},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0xf5, 0x8c},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0xb5, 0x6a},
    {0x02, 0x43, 0x04, 0xb5, 0x6a},
    {0x07, 0x43, 0x04, 0xb5, 0x6a},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0xb5, 0x8c},
    {0xc5, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0xb5, 0x6a},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0xb5, 0x6a},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0xb5, 0x8c},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0xb5, 0x6a},
    {0x01, 0x43, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0xf5, 0x00, 0x0a},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0xb5, 0x6a},
    {0x02, 0x42, 0x04, 0xb5, 0x6a},
    {0x07, 0x42, 0x04, 0xb5, 0x6a},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0xb5, 0x9d},
    {0x0b, 0x45, 0x03, 0xf5, 0x9d},
    {0x05, 0x47, 0x03, 0xb5, 0x9d},
    {0x0c, 0x44, 0x43, 0xb5, 0x9d},
    {0x09, 0x45, 0x03, 0xf5, 0x9d},
    {0xda, 0x02, 0xf5, 0x00, 0x0a},
    {0x06, 0x47, 0x03, 0xb5, 0x9d},
    {0x14, 0x42, 0x43, 0xf5, 0x9d},
    {0xc2, 0x0a, 0xf5, 0x00, 0x0a},
    {0x18, 0x42, 0x43, 0xf5, 0x9d},
    {0x0e, 0x44, 0x43, 0xb5, 0x9d},
    {0x1c, 0x42, 0x43, 0xf5, 0x9d},
    {0x04, 0x47, 0x03, 0xb5, 0x9d},
    {0x02, 0x47, 0x03, 0xb5, 0x9d},
    {0x07, 0x47, 0x03, 0xb5, 0x9d},
    {0x17, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0xb5, 0x6a},
    {0x1b, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0xb5, 0x6a},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0xb5, 0x9d},
    {0xce, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0xb5, 0x6a},
    {0x13, 0x42, 0x43, 0xf5, 0x9d},
    {0x08, 0x45, 0x03, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0xf5, 0x00, 0x0a},
    {0x0a, 0x45, 0x03, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0xb5, 0x6a},
    {0x02, 0x43, 0x02, 0xb5, 0x6a},
    {0x07, 0x43, 0x02, 0xb5, 0x6a},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0xb5, 0x7b},
    {0x0b, 0x43, 0x06, 0xf5, 0x7b},
    {0x05, 0x41, 0x06, 0xb5, 0x7b},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0xf5, 0x7b},
    {0xc8, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x06, 0xb5, 0x7b},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0xb5, 0x7b},
    {0x02, 0x41, 0x06, 0xb5, 0x7b},
    {0x07, 0x41, 0x06, 0xb5, 0x7b},
    {0x0d, 0x44, 0x43, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0xb5, 0x6a},
    {0xdb, 0x43, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x6a},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0xb5, 0x9d},
    {0xd6, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0xb5, 0x6a},
    {0x01, 0x44, 0x43, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0xf5, 0x7b},
    {0xc3, 0x02, 0xf5, 0x00, 0x0a},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0xb5, 0x6a},
    {0x02, 0x42, 0x02, 0xb5, 0x6a},
    {0x07, 0x42, 0x02, 0xb5, 0x6a},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0xb5, 0x8c},
    {0x0b, 0x44, 0x05, 0xf5, 0x8c},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x0c, 0x42, 0x45, 0xb5, 0x8c},
    {0x09, 0x44, 0x05, 0xf5, 0x8c},
    {0xda, 0x07, 0xf5, 0x00, 0x0a},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0xb5, 0x8c},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0xb5, 0x8c},
    {0x02, 0x45, 0x05, 0xb5, 0x8c},
    {0x07, 0x45, 0x05, 0xb5, 0x8c},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0xb5, 0x6a},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0xb5, 0x6a},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0xb5, 0x8c},
    {0xd2, 0x43, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0xb5, 0x6a},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0xf5, 0x8c},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0xb5, 0x6a},
    {0x02, 0x43, 0x07, 0xb5, 0x6a},
    {0x07, 0x43, 0x07, 0xb5, 0x6a},
    {0x16, 0x42, 0x43, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0xb5, 0x7b},
    {0x0b, 0x42, 0x06, 0xf5, 0x7b},
    {0x05, 0x44, 0x06, 0xb5, 0x7b},
    {0x1a, 0x42, 0x43, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0xf5, 0x7b},
    {0xca, 0x45, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x06, 0xb5, 0x7b},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0xf5, 0x9d},
    {0x0f, 0x42, 0x45, 0xb5, 0x8c},
    {0xc6, 0x45, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x06, 0xb5, 0x7b},
    {0x02, 0x44, 0x06, 0xb5, 0x7b},
    {0x07, 0x44, 0x06, 0xb5, 0x7b},
    {0x0d, 0x42, 0x45, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0xb5, 0x6a},
    {0x12, 0x42, 0x43, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0xb5, 0x6a},
    {0x15, 0x42, 0x43, 0xf5, 0x9d},
    {0x11, 0x42, 0x45, 0xb5, 0x8c},
    {0xc4, 0x06, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0xb5, 0x6a},
    {0x01, 0x42, 0x45, 0xb5, 0x8c},
    {0x08, 0x42, 0x06, 0xf5, 0x7b},
    {0xc3, 0x07, 0xf5, 0x00, 0x0a},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0xb5, 0x6a},
    {0x02, 0x42, 0x07, 0xb5, 0x6a},
    {0x07, 0x42, 0x07, 0xb5, 0x6a},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x52, 0xb5, 0x00, 0xee},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0x52, 0xb5, 0x00, 0xee},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0xb5, 0x40, 0x0d},
    {0x06, 0x52, 0xb5, 0x00, 0xee},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0xb5, 0x40, 0x0d},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0x52, 0xb5, 0x00, 0xee},
    {0x02, 0x52, 0xb5, 0x00, 0xee},
    {0x07, 0x52, 0xb5, 0x00, 0xee},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0xb5, 0x6d},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0xb5, 0x6d},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x17, 0xb5, 0x6d},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0xb5, 0x6d},
    {0x02, 0x43, 0x17, 0xb5, 0x6d},
    {0x07, 0x43, 0x17, 0xb5, 0x6d},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x14, 0xb5, 0x7e},
    {0x0b, 0x43, 0x14, 0xf5, 0x7e},
    {0x05, 0x41, 0x14, 0xb5, 0x7e},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x14, 0xf5, 0x7e},
    {0xc7, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x14, 0xb5, 0x7e},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x14, 0xb5, 0x7e},
    {0x02, 0x41, 0x14, 0xb5, 0x7e},
    {0x07, 0x41, 0x14, 0xb5, 0x7e},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0xb5, 0x6d},
    {0xd7, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x17, 0xb5, 0x6d},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0xd3, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x17, 0xb5, 0x6d},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x14, 0xf5, 0x7e},
    {0xc3, 0x57, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x17, 0xb5, 0x6d},
    {0x02, 0x42, 0x17, 0xb5, 0x6d},
    {0x07, 0x42, 0x17, 0xb5, 0x6d},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0c, 0xf5, 0x8e},
    {0x05, 0x46, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4c, 0xb5, 0x8e},
    {0x09, 0x41, 0x0c, 0xf5, 0x8e},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x0c, 0xb5, 0x8e},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4c, 0xb5, 0x8e},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0c, 0xb5, 0x8e},
    {0x02, 0x46, 0x0c, 0xb5, 0x8e},
    {0x07, 0x46, 0x0c, 0xb5, 0x8e},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4c, 0xb5, 0x8e},
    {0xcf, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0c, 0xf5, 0x8e},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x14, 0xb5, 0x7e},
    {0x0b, 0x42, 0x14, 0xf5, 0x7e},
    {0x05, 0x44, 0x14, 0xb5, 0x7e},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x14, 0xf5, 0x7e},
    {0xcb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x14, 0xb5, 0x7e},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc5, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x14, 0xb5, 0x7e},
    {0x02, 0x44, 0x14, 0xb5, 0x7e},
    {0x07, 0x44, 0x14, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x4c, 0xb5, 0x8e},
    {0xc4, 0x54, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x14, 0xf5, 0x7e},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x14, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x0b, 0xf5, 0x9e},
    {0x05, 0x49, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x4b, 0xb5, 0x9e},
    {0x09, 0x46, 0x0b, 0xf5, 0x9e},
    {0xda, 0x5b, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x75, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4b, 0xf5, 0x9e},
    {0x04, 0x49, 0x03, 0xb5, 0xae},
    {0x02, 0x49, 0x03, 0xb5, 0xae},
    {0x07, 0x49, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x1b, 0xb5, 0x6d},
    {0x1b, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x1b, 0xb5, 0x6d},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x4b, 0xb5, 0x9e},
    {0xcd, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1b, 0xb5, 0x6d},
    {0x13, 0x43, 0x4b, 0xf5, 0x9e},
    {0x08, 0x46, 0x0b, 0xf5, 0x9e},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x1b, 0xb5, 0x6d},
    {0x02, 0x43, 0x1b, 0xb5, 0x6d},
    {0x07, 0x43, 0x1b, 0xb5, 0x6d},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x4b, 0xb5, 0x9e},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x1b, 0xb5, 0x6d},
    {0xd9, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1b, 0xb5, 0x6d},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x4b, 0xb5, 0x9e},
    {0xd5, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1b, 0xb5, 0x6d},
    {0x01, 0x41, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0xb5, 0x6d},
    {0x02, 0x42, 0x1b, 0xb5, 0x6d},
    {0x07, 0x42, 0x1b, 0xb5, 0x6d},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0c, 0xf5, 0x8e},
    {0x05, 0x45, 0x0c, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4c, 0xb5, 0x8e},
    {0x09, 0x44, 0x0c, 0xf5, 0x8e},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x0c, 0xb5, 0x8e},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4c, 0xb5, 0x8e},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0c, 0xb5, 0x8e},
    {0x02, 0x45, 0x0c, 0xb5, 0x8e},
    {0x07, 0x45, 0x0c, 0xb5, 0x8e},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4c, 0xb5, 0x8e},
    {0xd1, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0c, 0xf5, 0x8e},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0c, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x4c, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4c, 0xb5, 0x8e},
    {0xc6, 0x4c, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x4c, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x4c, 0xb5, 0x8e},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x4c, 0xb5, 0x8e},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x43, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x67, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x43, 0xf5, 0xae},
    {0xc2, 0x63, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x43, 0xf5, 0xae},
    {0x0e, 0x46, 0x43, 0xb5, 0xae},
    {0x1c, 0x41, 0x43, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x27, 0xb5, 0x6e},
    {0x1b, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x27, 0xb5, 0x6e},
    {0x67, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x46, 0x43, 0xb5, 0xae},
    {0xc9, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x27, 0xb5, 0x6e},
    {0x13, 0x41, 0x43, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x63, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x27, 0xb5, 0x6e},
    {0x02, 0x43, 0x27, 0xb5, 0x6e},
    {0x07, 0x43, 0x27, 0xb5, 0x6e},
    {0x6d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x18, 0xb5, 0x7e},
    {0x0b, 0x43, 0x18, 0xf5, 0x7e},
    {0x05, 0x41, 0x18, 0xb5, 0x7e},
    {0x75, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x18, 0xf5, 0x7e},
    {0xc7, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x18, 0xb5, 0x7e},
    {0x63, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0xc2, 0x43, 0xb5, 0x0e},
    {0x73, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x46, 0x43, 0xb5, 0xae},
    {0x7f, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x18, 0xb5, 0x7e},
    {0x02, 0x41, 0x18, 0xb5, 0x7e},
    {0x07, 0x41, 0x18, 0xb5, 0x7e},
    {0x0d, 0x46, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x27, 0xb5, 0x6e},
    {0xd8, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x27, 0xb5, 0x6e},
    {0x6b, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x46, 0x43, 0xb5, 0xae},
    {0xd4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x27, 0xb5, 0x6e},
    {0x01, 0x46, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x18, 0xf5, 0x7e},
    {0xc3, 0x67, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x43, 0xb5, 0x0e},
    {0x0a, 0x43, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x27, 0xb5, 0x6e},
    {0x02, 0x42, 0x27, 0xb5, 0x6e},
    {0x07, 0x42, 0x27, 0xb5, 0x6e},
    {0x5d, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x09, 0xb5, 0x8d},
    {0x0b, 0x41, 0x09, 0xf5, 0x8d},
    {0x05, 0x46, 0x09, 0xb5, 0x8d},
    {0x0c, 0x43, 0x49, 0xb5, 0x8d},
    {0x09, 0x41, 0x09, 0xf5, 0x8d},
    {0xda, 0x50, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x09, 0xb5, 0x8d},
    {0x61, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x73, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x49, 0xb5, 0x8d},
    {0x7d, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x09, 0xb5, 0x8d},
    {0x02, 0x46, 0x09, 0xb5, 0x8d},
    {0x07, 0x46, 0x09, 0xb5, 0x8d},
    {0x6f, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0xb5, 0x6c},
    {0x7b, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0xb5, 0x6c},
    {0x69, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x49, 0xb5, 0x8d},
    {0xd0, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x10, 0xb5, 0x6c},
    {0x5f, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x09, 0xf5, 0x8d},
    {0x79, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x73, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x10, 0xb5, 0x6c},
    {0x02, 0x43, 0x10, 0xb5, 0x6c},
    {0x07, 0x43, 0x10, 0xb5, 0x6c},
    {0x16, 0x41, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x18, 0xb5, 0x7e},
    {0x0b, 0x42, 0x18, 0xf5, 0x7e},
    {0x05, 0x44, 0x18, 0xb5, 0x7e},
    {0x1a, 0x41, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x18, 0xf5, 0x7e},
    {0xcc, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x18, 0xb5, 0x7e},
    {0x65, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x0f, 0xf5, 0x40, 0x0b},
    {0x19, 0x41, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x49, 0xb5, 0x8d},
    {0xc5, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x18, 0xb5, 0x7e},
    {0x02, 0x44, 0x18, 0xb5, 0x7e},
    {0x07, 0x44, 0x18, 0xb5, 0x7e},
    {0x0d, 0x43, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x10, 0xb5, 0x6c},
    {0x12, 0x41, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0xb5, 0x6c},
    {0x15, 0x41, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x49, 0xb5, 0x8d},
    {0xc4, 0x58, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0xb5, 0x6c},
    {0x01, 0x43, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x18, 0xf5, 0x7e},
    {0xc3, 0x50, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0xf5, 0x40, 0x0b},
    {0x0a, 0x42, 0x18, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0xb5, 0x6c},
    {0x02, 0x42, 0x10, 0xb5, 0x6c},
    {0x07, 0x42, 0x10, 0xb5, 0x6c},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0b, 0xf5, 0x9e},
    {0x05, 0x47, 0x0b, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4b, 0xb5, 0x9e},
    {0x09, 0x45, 0x0b, 0xf5, 0x9e},
    {0x9a, 0x89, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0b, 0xb5, 0x9e},
    {0x14, 0x42, 0x4b, 0xf5, 0x9e},
    {0xc2, 0x7f, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4b, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4b, 0xf5, 0x9e},
    {0x04, 0x47, 0x0b, 0xb5, 0x9e},
    {0x02, 0x47, 0x0b, 0xb5, 0x9e},
    {0x07, 0x47, 0x0b, 0xb5, 0x9e},
    {0x17, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x43, 0x89, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x43, 0x89, 0xb5, 0x6e},
    {0x68, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x4b, 0xb5, 0x9e},
    {0xce, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x89, 0xb5, 0x6e},
    {0x13, 0x42, 0x4b, 0xf5, 0x9e},
    {0x08, 0x45, 0x0b, 0xf5, 0x9e},
    {0x78, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x7f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0x0b, 0xf5, 0x9e},
    {0x04, 0x43, 0x89, 0xb5, 0x6e},
    {0x02, 0x43, 0x89, 0xb5, 0x6e},
    {0x07, 0x43, 0x89, 0xb5, 0x6e},
    {0x6e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0e, 0xf5, 0x7d},
    {0x05, 0x41, 0x0e, 0xb5, 0x7d},
    {0x76, 0x03, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x0e, 0xf5, 0x7d},
    {0xc8, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x0e, 0xb5, 0x7d},
    {0x64, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x4b, 0xb5, 0x9e},
    {0x40, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x0e, 0xb5, 0x7d},
    {0x02, 0x41, 0x0e, 0xb5, 0x7d},
    {0x07, 0x41, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x44, 0x4b, 0xb5, 0x9e},
    {0x03, 0x42, 0x89, 0xb5, 0x6e},
    {0xdb, 0x4b, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x89, 0xb5, 0x6e},
    {0x6c, 0x03, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x4b, 0xb5, 0x9e},
    {0xd6, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x89, 0xb5, 0x6e},
    {0x01, 0x44, 0x4b, 0xb5, 0x9e},
    {0x08, 0x43, 0x0e, 0xf5, 0x7d},
    {0x83, 0x89, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x89, 0xb5, 0x6e},
    {0x02, 0x42, 0x89, 0xb5, 0x6e},
    {0x07, 0x42, 0x89, 0xb5, 0x6e},
    {0x5e, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x09, 0xb5, 0x8d},
    {0x0b, 0x44, 0x09, 0xf5, 0x8d},
    {0x05, 0x45, 0x09, 0xb5, 0x8d},
    {0x0c, 0x42, 0x49, 0xb5, 0x8d},
    {0x09, 0x44, 0x09, 0xf5, 0x8d},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0xb5, 0x8d},
    {0x62, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x49, 0xb5, 0x8d},
    {0x7e, 0x03, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x09, 0xb5, 0x8d},
    {0x02, 0x45, 0x09, 0xb5, 0x8d},
    {0x07, 0x45, 0x09, 0xb5, 0x8d},
    {0x70, 0x03, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x49, 0xb5, 0x8d},
    {0xd2, 0x4b, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x09, 0xf5, 0x8d},
    {0x7a, 0x03, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0x4b, 0xf5, 0x9e},
    {0x03, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0e, 0xf5, 0x7d},
    {0x05, 0x44, 0x0e, 0xb5, 0x7d},
    {0x1a, 0x42, 0x4b, 0xf5, 0x9e},
    {0x09, 0x42, 0x0e, 0xf5, 0x7d},
    {0xca, 0x49, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0e, 0xb5, 0x7d},
    {0x66, 0x03, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0x4b, 0xf5, 0x9e},
    {0x0f, 0x42, 0x49, 0xb5, 0x8d},
    {0xc6, 0x49, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x0e, 0xb5, 0x7d},
    {0x02, 0x44, 0x0e, 0xb5, 0x7d},
    {0x07, 0x44, 0x0e, 0xb5, 0x7d},
    {0x0d, 0x42, 0x49, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0x4b, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0x4b, 0xf5, 0x9e},
    {0x11, 0x42, 0x49, 0xb5, 0x8d},
    {0xc4, 0x4e, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0xb5, 0x8d},
    {0x08, 0x42, 0x0e, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x51, 0xb5, 0x00, 0xee},
    {0x0b, 0x4f, 0xb5, 0x40, 0xee},
    {0x05, 0x51, 0xb5, 0x00, 0xee},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4f, 0xb5, 0x40, 0xee},
    {0xda, 0x53, 0xb5, 0x40, 0x0d},
    {0x06, 0x51, 0xb5, 0x00, 0xee},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0xf5, 0x40, 0x0b},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x51, 0xb5, 0x00, 0xee},
    {0x02, 0x51, 0xb5, 0x00, 0xee},
    {0x07, 0x51, 0xb5, 0x00, 0xee},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0xb5, 0x6d},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0xb5, 0x6d},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x13, 0xb5, 0x6d},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4f, 0xb5, 0x40, 0xee},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0xf5, 0x40, 0x0b},
    {0x0a, 0x4f, 0xb5, 0x40, 0xee},
    {0x04, 0x43, 0x13, 0xb5, 0x6d},
    {0x02, 0x43, 0x13, 0xb5, 0x6d},
    {0x07, 0x43, 0x13, 0xb5, 0x6d},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1c, 0xf5, 0x7e},
    {0x05, 0x41, 0x1c, 0xb5, 0x7e},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x1c, 0xf5, 0x7e},
    {0x87, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x1c, 0xb5, 0x7e},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x1c, 0xb5, 0x7e},
    {0x02, 0x41, 0x1c, 0xb5, 0x7e},
    {0x07, 0x41, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0xb5, 0x6d},
    {0xd7, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x13, 0xb5, 0x6d},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x13, 0xb5, 0x6d},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x53, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x13, 0xb5, 0x6d},
    {0x02, 0x42, 0x13, 0xb5, 0x6d},
    {0x07, 0x42, 0x13, 0xb5, 0x6d},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x41, 0x9a, 0xf5, 0x8e},
    {0x05, 0x46, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x43, 0xda, 0xb5, 0x8e},
    {0x09, 0x41, 0x9a, 0xf5, 0x8e},
    {0xda, 0x08, 0xf5, 0x40, 0x0b},
    {0x06, 0x46, 0x9a, 0xb5, 0x8e},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x97, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xda, 0xb5, 0x8e},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x9a, 0xb5, 0x8e},
    {0x02, 0x46, 0x9a, 0xb5, 0x8e},
    {0x07, 0x46, 0x9a, 0xb5, 0x8e},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0xb5, 0x6b},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0xb5, 0x6b},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xda, 0xb5, 0x8e},
    {0xcf, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0xb5, 0x6b},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x9a, 0xf5, 0x8e},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x97, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x08, 0xb5, 0x6b},
    {0x02, 0x43, 0x08, 0xb5, 0x6b},
    {0x07, 0x43, 0x08, 0xb5, 0x6b},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1c, 0xf5, 0x7e},
    {0x05, 0x44, 0x1c, 0xb5, 0x7e},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x1c, 0xf5, 0x7e},
    {0xcb, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x1c, 0xb5, 0x7e},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xda, 0xb5, 0x8e},
    {0x85, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x1c, 0xb5, 0x7e},
    {0x02, 0x44, 0x1c, 0xb5, 0x7e},
    {0x07, 0x44, 0x1c, 0xb5, 0x7e},
    {0x0d, 0x43, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x08, 0xb5, 0x6b},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0xb5, 0x6b},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xda, 0xb5, 0x8e},
    {0xc4, 0x5c, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x08, 0xb5, 0x6b},
    {0x01, 0x43, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x1c, 0xf5, 0x7e},
    {0xc3, 0x08, 0xf5, 0x40, 0x0b},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x1c, 0xf5, 0x7e},
    {0x04, 0x42, 0x08, 0xb5, 0x6b},
    {0x02, 0x42, 0x08, 0xb5, 0x6b},
    {0x07, 0x42, 0x08, 0xb5, 0x6b},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x03, 0xb5, 0xae},
    {0x0b, 0x46, 0x05, 0xf5, 0x9d},
    {0x05, 0x48, 0x03, 0xb5, 0xae},
    {0x0c, 0x41, 0x45, 0xb5, 0x9d},
    {0x09, 0x46, 0x05, 0xf5, 0x9d},
    {0xda, 0x77, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x03, 0xb5, 0xae},
    {0x14, 0x43, 0x45, 0xf5, 0x9d},
    {0xc2, 0x6b, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x45, 0xf5, 0x9d},
    {0x0e, 0x41, 0x45, 0xb5, 0x9d},
    {0x1c, 0x43, 0x45, 0xf5, 0x9d},
    {0x04, 0x48, 0x03, 0xb5, 0xae},
    {0x02, 0x48, 0x03, 0xb5, 0xae},
    {0x07, 0x48, 0x03, 0xb5, 0xae},
    {0x17, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x37, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x37, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0xb5, 0x9d},
    {0xcd, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x37, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0xf5, 0x9d},
    {0x08, 0x46, 0x05, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x37, 0xb5, 0x6e},
    {0x02, 0x43, 0x37, 0xb5, 0x6e},
    {0x07, 0x43, 0x37, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0xb5, 0x7b},
    {0x0b, 0x43, 0x04, 0xf5, 0x7b},
    {0x05, 0x41, 0x04, 0xb5, 0x7b},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0xf5, 0x7b},
    {0x88, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x04, 0xb5, 0x7b},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0xf5, 0x40, 0x0b},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0xb5, 0x7b},
    {0x02, 0x41, 0x04, 0xb5, 0x7b},
    {0x07, 0x41, 0x04, 0xb5, 0x7b},
    {0x0d, 0x41, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x37, 0xb5, 0x6e},
    {0xd9, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x37, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0xb5, 0x9d},
    {0xd5, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x37, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0xf5, 0x7b},
    {0xc3, 0x77, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0xf5, 0x40, 0x0b},
    {0x0a, 0x43, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x37, 0xb5, 0x6e},
    {0x02, 0x42, 0x37, 0xb5, 0x6e},
    {0x07, 0x42, 0x37, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0b, 0x44, 0x9a, 0xf5, 0x8e},
    {0x05, 0x45, 0x9a, 0xb5, 0x8e},
    {0x0c, 0x42, 0xda, 0xb5, 0x8e},
    {0x09, 0x44, 0x9a, 0xf5, 0x8e},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x9a, 0xb5, 0x8e},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x93, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xda, 0xb5, 0x8e},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x9a, 0xb5, 0x8e},
    {0x02, 0x45, 0x9a, 0xb5, 0x8e},
    {0x07, 0x45, 0x9a, 0xb5, 0x8e},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xda, 0xb5, 0x8e},
    {0xd1, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x9a, 0xf5, 0x8e},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x93, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x9a, 0xf5, 0x8e},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0xb5, 0x7b},
    {0x0b, 0x42, 0x04, 0xf5, 0x7b},
    {0x05, 0x44, 0x04, 0xb5, 0x7b},
    {0x1a, 0x43, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0xf5, 0x7b},
    {0x8a, 0x9a, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x04, 0xb5, 0x7b},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0xda, 0xb5, 0x8e},
    {0x86, 0x9a, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x04, 0xb5, 0x7b},
    {0x02, 0x44, 0x04, 0xb5, 0x7b},
    {0x07, 0x44, 0x04, 0xb5, 0x7b},
    {0x0d, 0x42, 0xda, 0xb5, 0x8e},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0xda, 0xb5, 0x8e},
    {0xc4, 0x04, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xda, 0xb5, 0x8e},
    {0x08, 0x42, 0x04, 0xf5, 0x7b},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0xf5, 0x7b},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x03, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x43, 0xb5, 0xae},
    {0x09, 0x47, 0x03, 0xf5, 0xae},
    {0xda, 0x0a, 0xf5, 0x40, 0x0b},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x43, 0xf5, 0xae},
    {0xc2, 0x01, 0xf5, 0x40, 0x0b},
    {0x18, 0x44, 0x43, 0xf5, 0xae},
    {0x0e, 0x45, 0x43, 0xb5, 0xae},
    {0x1c, 0x44, 0x43, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0xb5, 0x6b},
    {0x1b, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0xb5, 0x6b},
    {0x67, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x45, 0x43, 0xb5, 0xae},
    {0xc9, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0xb5, 0x6b},
    {0x13, 0x44, 0x43, 0xf5, 0xae},
    {0x08, 0x47, 0x03, 0xf5, 0xae},
    {0x77, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x01, 0xf5, 0x40, 0x0b},
    {0x0a, 0x47, 0x03, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0xb5, 0x6b},
    {0x02, 0x43, 0x0a, 0xb5, 0x6b},
    {0x07, 0x43, 0x0a, 0xb5, 0x6b},
    {0x6d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0xb5, 0x7b},
    {0x0b, 0x43, 0x02, 0xf5, 0x7b},
    {0x05, 0x41, 0x02, 0xb5, 0x7b},
    {0x75, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0xf5, 0x7b},
    {0xc7, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0xb5, 0x7b},
    {0x63, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x45, 0x43, 0xb5, 0xae},
    {0x7f, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0xb5, 0x7b},
    {0x02, 0x41, 0x02, 0xb5, 0x7b},
    {0x07, 0x41, 0x02, 0xb5, 0x7b},
    {0x0d, 0x45, 0x43, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0xb5, 0x6b},
    {0xd8, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0xb5, 0x6b},
    {0x6b, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x45, 0x43, 0xb5, 0xae},
    {0xd4, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0xb5, 0x6b},
    {0x01, 0x45, 0x43, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0xf5, 0x7b},
    {0xc3, 0x0a, 0xf5, 0x40, 0x0b},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x0a, 0xb5, 0x6b},
    {0x02, 0x42, 0x0a, 0xb5, 0x6b},
    {0x07, 0x42, 0x0a, 0xb5, 0x6b},
    {0x5d, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0xb5, 0x8c},
    {0x0b, 0x41, 0x06, 0xf5, 0x8c},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x0c, 0x43, 0x46, 0xb5, 0x8c},
    {0x09, 0x41, 0x06, 0xf5, 0x8c},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x61, 0x02, 0x03, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0xb5, 0x8c},
    {0x7d, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0xb5, 0x8c},
    {0x02, 0x46, 0x06, 0xb5, 0x8c},
    {0x07, 0x46, 0x06, 0xb5, 0x8c},
    {0x6f, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0xb5, 0x8c},
    {0xd0, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0xf5, 0x8c},
    {0x79, 0x02, 0x03, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x43, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0xb5, 0x7b},
    {0x0b, 0x42, 0x02, 0xf5, 0x7b},
    {0x05, 0x44, 0x02, 0xb5, 0x7b},
    {0x1a, 0x44, 0x43, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0xf5, 0x7b},
    {0xcc, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0xb5, 0x7b},
    {0x65, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0xc1, 0x43, 0xb5, 0x0e},
    {0x19, 0x44, 0x43, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0xb5, 0x8c},
    {0xc5, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0xb5, 0x7b},
    {0x02, 0x44, 0x02, 0xb5, 0x7b},
    {0x07, 0x44, 0x02, 0xb5, 0x7b},
    {0x0d, 0x43, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x43, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x43, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0xb5, 0x8c},
    {0xc4, 0x02, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0xf5, 0x7b},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x43, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0xf5, 0x7b},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0xb5, 0x9d},
    {0x0b, 0x45, 0x05, 0xf5, 0x9d},
    {0x05, 0x47, 0x05, 0xb5, 0x9d},
    {0x0c, 0x44, 0x45, 0xb5, 0x9d},
    {0x09, 0x45, 0x05, 0xf5, 0x9d},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0xb5, 0x9d},
    {0x14, 0x42, 0x45, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0xf5, 0x9d},
    {0x0e, 0x44, 0x45, 0xb5, 0x9d},
    {0x1c, 0x42, 0x45, 0xf5, 0x9d},
    {0x04, 0x47, 0x05, 0xb5, 0x9d},
    {0x02, 0x47, 0x05, 0xb5, 0x9d},
    {0x07, 0x47, 0x05, 0xb5, 0x9d},
    {0x17, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x44, 0x45, 0xb5, 0x9d},
    {0xce, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0xf5, 0x9d},
    {0x08, 0x45, 0x05, 0xf5, 0x9d},
    {0x78, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0xb5, 0x7b},
    {0x0b, 0x43, 0x07, 0xf5, 0x7b},
    {0x05, 0x41, 0x07, 0xb5, 0x7b},
    {0x76, 0x02, 0x03, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0xf5, 0x7b},
    {0xc8, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0xb5, 0x7b},
    {0x64, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x03, 0xb5, 0xae},
    {0x0f, 0x44, 0x45, 0xb5, 0x9d},
    {0x40, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0xb5, 0x7b},
    {0x02, 0x41, 0x07, 0xb5, 0x7b},
    {0x07, 0x41, 0x07, 0xb5, 0x7b},
    {0x0d, 0x44, 0x45, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x03, 0xb5, 0xae},
    {0x11, 0x44, 0x45, 0xb5, 0x9d},
    {0xd6, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0xf5, 0x7b},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0xb5, 0x8c},
    {0x0b, 0x44, 0x06, 0xf5, 0x8c},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x0c, 0x42, 0x46, 0xb5, 0x8c},
    {0x09, 0x44, 0x06, 0xf5, 0x8c},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x62, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x03, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0xb5, 0x8c},
    {0x7e, 0x02, 0x03, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0xb5, 0x8c},
    {0x02, 0x45, 0x06, 0xb5, 0x8c},
    {0x07, 0x45, 0x06, 0xb5, 0x8c},
    {0x70, 0x02, 0x03, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x03, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x03, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0xb5, 0x8c},
    {0xd2, 0x45, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x03, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0xf5, 0x8c},
    {0x7a, 0x02, 0x03, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0xb5, 0x7b},
    {0x0b, 0x42, 0x07, 0xf5, 0x7b},
    {0x05, 0x44, 0x07, 0xb5, 0x7b},
    {0x1a, 0x42, 0x45, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0xf5, 0x7b},
    {0xca, 0x46, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0xb5, 0x7b},
    {0x66, 0x02, 0x03, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0xf5, 0x9d},
    {0x0f, 0x42, 0x46, 0xb5, 0x8c},
    {0xc6, 0x46, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0xb5, 0x7b},
    {0x02, 0x44, 0x07, 0xb5, 0x7b},
    {0x07, 0x44, 0x07, 0xb5, 0x7b},
    {0x0d, 0x42, 0x46, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0xf5, 0x9d},
    {0x11, 0x42, 0x46, 0xb5, 0x8c},
    {0xc4, 0x07, 0xf5, 0x40, 0x0b},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0xf5, 0x7b},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0xf5, 0x7b},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4d, 0xf5, 0x00, 0xee},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4a, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0xb5, 0x40, 0x0d},
    {0x18, 0x4a, 0xf5, 0x40, 0xee},
    {0x0e, 0x4d, 0xf5, 0x00, 0xee},
    {0x1c, 0x4a, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2d, 0xb5, 0x6e},
    {0x1b, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2d, 0xb5, 0x6e},
    {0x67, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x4d, 0xf5, 0x00, 0xee},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2d, 0xb5, 0x6e},
    {0x13, 0x4a, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2d, 0xb5, 0x6e},
    {0x02, 0x43, 0x2d, 0xb5, 0x6e},
    {0x07, 0x43, 0x2d, 0xb5, 0x6e},
    {0x6d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x17, 0xb5, 0x7e},
    {0x0b, 0x43, 0x17, 0xf5, 0x7e},
    {0x05, 0x41, 0x17, 0xb5, 0x7e},
    {0x75, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x17, 0xf5, 0x7e},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x17, 0xb5, 0x7e},
    {0x63, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x4d, 0xf5, 0x00, 0xee},
    {0x7f, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x17, 0xb5, 0x7e},
    {0x02, 0x41, 0x17, 0xb5, 0x7e},
    {0x07, 0x41, 0x17, 0xb5, 0x7e},
    {0x0d, 0x4d, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x2d, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2d, 0xb5, 0x6e},
    {0x6b, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x4d, 0xf5, 0x00, 0xee},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2d, 0xb5, 0x6e},
    {0x01, 0x4d, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x17, 0xf5, 0x7e},
    {0xc3, 0x6d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x2d, 0xb5, 0x6e},
    {0x02, 0x42, 0x2d, 0xb5, 0x6e},
    {0x07, 0x42, 0x2d, 0xb5, 0x6e},
    {0x5d, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4a, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x17, 0xb5, 0x7e},
    {0x0b, 0x42, 0x17, 0xf5, 0x7e},
    {0x05, 0x44, 0x17, 0xb5, 0x7e},
    {0x1a, 0x4a, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x17, 0xf5, 0x7e},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x17, 0xb5, 0x7e},
    {0x65, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4a, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x17, 0xb5, 0x7e},
    {0x02, 0x44, 0x17, 0xb5, 0x7e},
    {0x07, 0x44, 0x17, 0xb5, 0x7e},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4a, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4a, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x57, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x17, 0xf5, 0x7e},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x17, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x09, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x09, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x09, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x09, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x09, 0xb5, 0x00, 0xee},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x09, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x09, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x09, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x09, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x09, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x09, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x09, 0xb5, 0x00, 0xee},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x09, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x75, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x61, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x35, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x35, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x35, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x61, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x35, 0xb5, 0x6e},
    {0x02, 0x43, 0x35, 0xb5, 0x6e},
    {0x07, 0x43, 0x35, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1b, 0xf5, 0x7e},
    {0x05, 0x41, 0x1b, 0xb5, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x1b, 0xf5, 0x7e},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x1b, 0xb5, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x1b, 0xb5, 0x7e},
    {0x02, 0x41, 0x1b, 0xb5, 0x7e},
    {0x07, 0x41, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x35, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x35, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x35, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x75, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x35, 0xb5, 0x6e},
    {0x02, 0x42, 0x35, 0xb5, 0x6e},
    {0x07, 0x42, 0x35, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x71, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x71, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1b, 0xf5, 0x7e},
    {0x05, 0x44, 0x1b, 0xb5, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x1b, 0xf5, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x1b, 0xb5, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x1b, 0xb5, 0x7e},
    {0x02, 0x44, 0x1b, 0xb5, 0x7e},
    {0x07, 0x44, 0x1b, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x5b, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x1b, 0xf5, 0x7e},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x1b, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x87, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7d, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x87, 0xb5, 0x6e},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x87, 0xb5, 0x6e},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x87, 0xb5, 0x6e},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7d, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x87, 0xb5, 0x6e},
    {0x02, 0x43, 0x87, 0xb5, 0x6e},
    {0x07, 0x43, 0x87, 0xb5, 0x6e},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x87, 0xb5, 0x6e},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x87, 0xb5, 0x6e},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x87, 0xb5, 0x6e},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x87, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x87, 0xb5, 0x6e},
    {0x02, 0x42, 0x87, 0xb5, 0x6e},
    {0x07, 0x42, 0x87, 0xb5, 0x6e},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x63, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x6f, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x23, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x23, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x23, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x23, 0xb5, 0x6e},
    {0x02, 0x43, 0x23, 0xb5, 0x6e},
    {0x07, 0x43, 0x23, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x28, 0xb5, 0x7f},
    {0x0b, 0x43, 0x28, 0xf5, 0x7f},
    {0x05, 0x41, 0x28, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x28, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x28, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x28, 0xb5, 0x7f},
    {0x02, 0x41, 0x28, 0xb5, 0x7f},
    {0x07, 0x41, 0x28, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x23, 0xb5, 0x6e},
    {0xd7, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x23, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x23, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x28, 0xf5, 0x7f},
    {0xc3, 0x63, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x28, 0xf5, 0x7f},
    {0x04, 0x42, 0x23, 0xb5, 0x6e},
    {0x02, 0x42, 0x23, 0xb5, 0x6e},
    {0x07, 0x42, 0x23, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x7b, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x7b, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x28, 0xb5, 0x7f},
    {0x0b, 0x42, 0x28, 0xf5, 0x7f},
    {0x05, 0x44, 0x28, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x28, 0xf5, 0x7f},
    {0xcb, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x28, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x28, 0xb5, 0x7f},
    {0x02, 0x44, 0x28, 0xb5, 0x7f},
    {0x07, 0x44, 0x28, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x68, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x28, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x28, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x09, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x49, 0xb5, 0x9e},
    {0x09, 0x46, 0x09, 0xf5, 0x9e},
    {0xda, 0x73, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x49, 0xf5, 0x9e},
    {0xc2, 0x69, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x49, 0xf5, 0x9e},
    {0x0e, 0x41, 0x49, 0xb5, 0x9e},
    {0x1c, 0x43, 0x49, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x33, 0xb5, 0x6e},
    {0x1b, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x33, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x49, 0xb5, 0x9e},
    {0xcd, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x33, 0xb5, 0x6e},
    {0x13, 0x43, 0x49, 0xf5, 0x9e},
    {0x08, 0x46, 0x09, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x69, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x33, 0xb5, 0x6e},
    {0x02, 0x43, 0x33, 0xb5, 0x6e},
    {0x07, 0x43, 0x33, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x10, 0xb5, 0x7d},
    {0x0b, 0x43, 0x10, 0xf5, 0x7d},
    {0x05, 0x41, 0x10, 0xb5, 0x7d},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x10, 0xf5, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x10, 0xb5, 0x7d},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x49, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x10, 0xb5, 0x7d},
    {0x02, 0x41, 0x10, 0xb5, 0x7d},
    {0x07, 0x41, 0x10, 0xb5, 0x7d},
    {0x0d, 0x41, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x33, 0xb5, 0x6e},
    {0xd9, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x33, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x49, 0xb5, 0x9e},
    {0xd5, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x33, 0xb5, 0x6e},
    {0x01, 0x41, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x10, 0xf5, 0x7d},
    {0xc3, 0x73, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x33, 0xb5, 0x6e},
    {0x02, 0x42, 0x33, 0xb5, 0x6e},
    {0x07, 0x42, 0x33, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0xb5, 0x00, 0x0c},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8f, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0f, 0xb5, 0x6c},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0f, 0xb5, 0x6c},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0f, 0xb5, 0x6c},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8f, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0xb5, 0x6c},
    {0x02, 0x43, 0x0f, 0xb5, 0x6c},
    {0x07, 0x43, 0x0f, 0xb5, 0x6c},
    {0x16, 0x43, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x10, 0xb5, 0x7d},
    {0x0b, 0x42, 0x10, 0xf5, 0x7d},
    {0x05, 0x44, 0x10, 0xb5, 0x7d},
    {0x1a, 0x43, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x10, 0xf5, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x10, 0xb5, 0x7d},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x10, 0xb5, 0x7d},
    {0x02, 0x44, 0x10, 0xb5, 0x7d},
    {0x07, 0x44, 0x10, 0xb5, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0xb5, 0x6c},
    {0x12, 0x43, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x0f, 0xb5, 0x6c},
    {0x15, 0x43, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x50, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0xb5, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x10, 0xf5, 0x7d},
    {0xc3, 0x4f, 0xb5, 0x00, 0x0c},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x10, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0xb5, 0x6c},
    {0x02, 0x42, 0x0f, 0xb5, 0x6c},
    {0x07, 0x42, 0x0f, 0xb5, 0x6c},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x5f, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3f, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3f, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x3f, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5f, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3f, 0xb5, 0x6e},
    {0x02, 0x43, 0x3f, 0xb5, 0x6e},
    {0x07, 0x43, 0x3f, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3f, 0xb5, 0x6e},
    {0xd8, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3f, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3f, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x7f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x3f, 0xb5, 0x6e},
    {0x02, 0x42, 0x3f, 0xb5, 0x6e},
    {0x07, 0x42, 0x3f, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0e, 0xf5, 0x8e},
    {0x05, 0x46, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4e, 0xb5, 0x8e},
    {0x09, 0x41, 0x0e, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0e, 0xb5, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x79, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x4e, 0xb5, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x0e, 0xb5, 0x8e},
    {0x02, 0x46, 0x0e, 0xb5, 0x8e},
    {0x07, 0x46, 0x0e, 0xb5, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x4e, 0xb5, 0x8e},
    {0xd0, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x0e, 0xf5, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x79, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x4e, 0xb5, 0x8e},
    {0xc5, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x4e, 0xb5, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x09, 0xb5, 0x9e},
    {0x0b, 0x45, 0x09, 0xf5, 0x9e},
    {0x05, 0x47, 0x09, 0xb5, 0x9e},
    {0x0c, 0x44, 0x49, 0xb5, 0x9e},
    {0x09, 0x45, 0x09, 0xf5, 0x9e},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x09, 0xb5, 0x9e},
    {0x14, 0x42, 0x49, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x49, 0xf5, 0x9e},
    {0x0e, 0x44, 0x49, 0xb5, 0x9e},
    {0x1c, 0x42, 0x49, 0xf5, 0x9e},
    {0x04, 0x47, 0x09, 0xb5, 0x9e},
    {0x02, 0x47, 0x09, 0xb5, 0x9e},
    {0x07, 0x47, 0x09, 0xb5, 0x9e},
    {0x17, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x49, 0xb5, 0x9e},
    {0xce, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x49, 0xf5, 0x9e},
    {0x08, 0x45, 0x09, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x09, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x49, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x49, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x49, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x49, 0xb5, 0x9e},
    {0xd6, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x49, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0e, 0xf5, 0x8e},
    {0x05, 0x45, 0x0e, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4e, 0xb5, 0x8e},
    {0x09, 0x44, 0x0e, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0e, 0xb5, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x4e, 0xb5, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x0e, 0xb5, 0x8e},
    {0x02, 0x45, 0x0e, 0xb5, 0x8e},
    {0x07, 0x45, 0x0e, 0xb5, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x4e, 0xb5, 0x8e},
    {0xd2, 0x49, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x0e, 0xf5, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x0e, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x49, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x49, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4e, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x49, 0xf5, 0x9e},
    {0x0f, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc6, 0x4e, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4e, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x49, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x49, 0xf5, 0x9e},
    {0x11, 0x42, 0x4e, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4e, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x4d, 0xb5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0xb5, 0x00, 0x0c},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0xb5, 0x6c},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0xb5, 0x6c},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x0d, 0xb5, 0x6c},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0xb5, 0x00, 0x0c},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x0d, 0xb5, 0x6c},
    {0x02, 0x43, 0x0d, 0xb5, 0x6c},
    {0x07, 0x43, 0x0d, 0xb5, 0x6c},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x13, 0xb5, 0x7e},
    {0x0b, 0x43, 0x13, 0xf5, 0x7e},
    {0x05, 0x41, 0x13, 0xb5, 0x7e},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x13, 0xf5, 0x7e},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x13, 0xb5, 0x7e},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x13, 0xb5, 0x7e},
    {0x02, 0x41, 0x13, 0xb5, 0x7e},
    {0x07, 0x41, 0x13, 0xb5, 0x7e},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x0d, 0xb5, 0x6c},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0d, 0xb5, 0x6c},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0d, 0xb5, 0x6c},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x13, 0xf5, 0x7e},
    {0xc3, 0x4d, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x0d, 0xb5, 0x6c},
    {0x02, 0x42, 0x0d, 0xb5, 0x6c},
    {0x07, 0x42, 0x0d, 0xb5, 0x6c},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x13, 0xb5, 0x7e},
    {0x0b, 0x42, 0x13, 0xf5, 0x7e},
    {0x05, 0x44, 0x13, 0xb5, 0x7e},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x13, 0xf5, 0x7e},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x13, 0xb5, 0x7e},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x13, 0xb5, 0x7e},
    {0x02, 0x44, 0x13, 0xb5, 0x7e},
    {0x07, 0x44, 0x13, 0xb5, 0x7e},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x53, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x13, 0xf5, 0x7e},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x13, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0x9a, 0x98, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x5a, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x05, 0xb5, 0xae},
    {0x02, 0x49, 0x05, 0xb5, 0xae},
    {0x07, 0x49, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x98, 0xb5, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x98, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x98, 0xb5, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x98, 0xb5, 0x6f},
    {0x02, 0x43, 0x98, 0xb5, 0x6f},
    {0x07, 0x43, 0x98, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0xb5, 0x7c},
    {0x0b, 0x43, 0x08, 0xf5, 0x7c},
    {0x05, 0x41, 0x08, 0xb5, 0x7c},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x08, 0xb5, 0x7c},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0xb5, 0x7c},
    {0x02, 0x41, 0x08, 0xb5, 0x7c},
    {0x07, 0x41, 0x08, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x98, 0xb5, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x98, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x98, 0xb5, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x08, 0xf5, 0x7c},
    {0x83, 0x98, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x98, 0xb5, 0x6f},
    {0x02, 0x42, 0x98, 0xb5, 0x6f},
    {0x07, 0x42, 0x98, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8b, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x08, 0xb5, 0x7c},
    {0x0b, 0x42, 0x08, 0xf5, 0x7c},
    {0x05, 0x44, 0x08, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x08, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x08, 0xb5, 0x7c},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x08, 0xb5, 0x7c},
    {0x02, 0x44, 0x08, 0xb5, 0x7c},
    {0x07, 0x44, 0x08, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x48, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x08, 0xf5, 0x7c},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x45, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x6b, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x45, 0xf5, 0xae},
    {0xc2, 0x65, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x45, 0xf5, 0xae},
    {0x0e, 0x46, 0x45, 0xb5, 0xae},
    {0x1c, 0x41, 0x45, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x2b, 0xb5, 0x6e},
    {0x1b, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x2b, 0xb5, 0x6e},
    {0x67, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x46, 0x45, 0xb5, 0xae},
    {0xc9, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x2b, 0xb5, 0x6e},
    {0x13, 0x41, 0x45, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x65, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x2b, 0xb5, 0x6e},
    {0x02, 0x43, 0x2b, 0xb5, 0x6e},
    {0x07, 0x43, 0x2b, 0xb5, 0x6e},
    {0x6d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x38, 0xb5, 0x7f},
    {0x0b, 0x43, 0x38, 0xf5, 0x7f},
    {0x05, 0x41, 0x38, 0xb5, 0x7f},
    {0x75, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x38, 0xf5, 0x7f},
    {0xc7, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x38, 0xb5, 0x7f},
    {0x63, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0xc2, 0x45, 0xb5, 0x0e},
    {0x73, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x46, 0x45, 0xb5, 0xae},
    {0x7f, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x38, 0xb5, 0x7f},
    {0x02, 0x41, 0x38, 0xb5, 0x7f},
    {0x07, 0x41, 0x38, 0xb5, 0x7f},
    {0x0d, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x2b, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2b, 0xb5, 0x6e},
    {0x6b, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x46, 0x45, 0xb5, 0xae},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2b, 0xb5, 0x6e},
    {0x01, 0x46, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x38, 0xf5, 0x7f},
    {0xc3, 0x6b, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x45, 0xb5, 0x0e},
    {0x0a, 0x43, 0x38, 0xf5, 0x7f},
    {0x04, 0x42, 0x2b, 0xb5, 0x6e},
    {0x02, 0x42, 0x2b, 0xb5, 0x6e},
    {0x07, 0x42, 0x2b, 0xb5, 0x6e},
    {0x5d, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0xb5, 0x8c},
    {0x0b, 0x41, 0x04, 0xf5, 0x8c},
    {0x05, 0x46, 0x04, 0xb5, 0x8c},
    {0x0c, 0x43, 0x44, 0xb5, 0x8c},
    {0x09, 0x41, 0x04, 0xf5, 0x8c},
    {0xda, 0x51, 0xb5, 0x00, 0x0c},
    {0x06, 0x46, 0x04, 0xb5, 0x8c},
    {0x61, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x59, 0xb5, 0x00, 0x0c},
    {0x71, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0xb5, 0x8c},
    {0x7d, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0xb5, 0x8c},
    {0x02, 0x46, 0x04, 0xb5, 0x8c},
    {0x07, 0x46, 0x04, 0xb5, 0x8c},
    {0x6f, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0xb5, 0x6c},
    {0x7b, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0xb5, 0x6c},
    {0x69, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0xb5, 0x8c},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x11, 0xb5, 0x6c},
    {0x5f, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0xf5, 0x8c},
    {0x79, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x59, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x11, 0xb5, 0x6c},
    {0x02, 0x43, 0x11, 0xb5, 0x6c},
    {0x07, 0x43, 0x11, 0xb5, 0x6c},
    {0x16, 0x41, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x38, 0xb5, 0x7f},
    {0x0b, 0x42, 0x38, 0xf5, 0x7f},
    {0x05, 0x44, 0x38, 0xb5, 0x7f},
    {0x1a, 0x41, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x38, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x38, 0xb5, 0x7f},
    {0x65, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0xb5, 0x8c},
    {0xc5, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x38, 0xb5, 0x7f},
    {0x02, 0x44, 0x38, 0xb5, 0x7f},
    {0x07, 0x44, 0x38, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x11, 0xb5, 0x6c},
    {0x12, 0x41, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0xb5, 0x6c},
    {0x15, 0x41, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0xb5, 0x8c},
    {0xc4, 0x78, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0xb5, 0x6c},
    {0x01, 0x43, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x38, 0xf5, 0x7f},
    {0xc3, 0x51, 0xb5, 0x00, 0x0c},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x38, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0xb5, 0x6c},
    {0x02, 0x42, 0x11, 0xb5, 0x6c},
    {0x07, 0x42, 0x11, 0xb5, 0x6c},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x94, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x94, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x94, 0xb5, 0x6f},
    {0x68, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x94, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x05, 0xb5, 0xae},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x94, 0xb5, 0x6f},
    {0x02, 0x43, 0x94, 0xb5, 0x6f},
    {0x07, 0x43, 0x94, 0xb5, 0x6f},
    {0x6e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x94, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x94, 0xb5, 0x6f},
    {0x6c, 0x03, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x94, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x94, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x94, 0xb5, 0x6f},
    {0x02, 0x42, 0x94, 0xb5, 0x6f},
    {0x07, 0x42, 0x94, 0xb5, 0x6f},
    {0x5e, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0xb5, 0x8c},
    {0x0b, 0x44, 0x04, 0xf5, 0x8c},
    {0x05, 0x45, 0x04, 0xb5, 0x8c},
    {0x0c, 0x42, 0x44, 0xb5, 0x8c},
    {0x09, 0x44, 0x04, 0xf5, 0x8c},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0xb5, 0x8c},
    {0x62, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0xb5, 0x8c},
    {0x7e, 0x03, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0xb5, 0x8c},
    {0x02, 0x45, 0x04, 0xb5, 0x8c},
    {0x07, 0x45, 0x04, 0xb5, 0x8c},
    {0x70, 0x03, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0xb5, 0x8c},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0xf5, 0x8c},
    {0x7a, 0x03, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0xf5, 0x8c},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x44, 0xb5, 0x8c},
    {0xc6, 0x44, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0xb5, 0x8c},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x44, 0xb5, 0x8c},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0xb5, 0x8c},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0xb5, 0x00, 0x0c},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x01, 0xb5, 0x6c},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x01, 0xb5, 0x6c},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0xc9, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x01, 0xb5, 0x6c},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0xb5, 0x6c},
    {0x02, 0x43, 0x01, 0xb5, 0x6c},
    {0x07, 0x43, 0x01, 0xb5, 0x6c},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x43, 0x0a, 0xf5, 0x7c},
    {0x05, 0x41, 0x0a, 0xb5, 0x7c},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc7, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x0a, 0xb5, 0x7c},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0a, 0xb5, 0x7c},
    {0x02, 0x41, 0x0a, 0xb5, 0x7c},
    {0x07, 0x41, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x01, 0xb5, 0x6c},
    {0xd7, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0xb5, 0x6c},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0xb5, 0x6c},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x41, 0xb5, 0x00, 0x0c},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x01, 0xb5, 0x6c},
    {0x02, 0x42, 0x01, 0xb5, 0x6c},
    {0x07, 0x42, 0x01, 0xb5, 0x6c},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x02, 0xb5, 0x8c},
    {0x0b, 0x41, 0x02, 0xf5, 0x8c},
    {0x05, 0x46, 0x02, 0xb5, 0x8c},
    {0x0c, 0x43, 0x42, 0xb5, 0x8c},
    {0x09, 0x41, 0x02, 0xf5, 0x8c},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0xb5, 0x8c},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x52, 0xb5, 0x00, 0x0c},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x42, 0xb5, 0x8c},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x02, 0xb5, 0x8c},
    {0x02, 0x46, 0x02, 0xb5, 0x8c},
    {0x07, 0x46, 0x02, 0xb5, 0x8c},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x42, 0xb5, 0x8c},
    {0xcf, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x02, 0xf5, 0x8c},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x52, 0xb5, 0x00, 0x0c},
    {0x0a, 0x41, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0b, 0x42, 0x0a, 0xf5, 0x7c},
    {0x05, 0x44, 0x0a, 0xb5, 0x7c},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0a, 0xf5, 0x7c},
    {0xcb, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0xb5, 0x7c},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x42, 0xb5, 0x8c},
    {0xc5, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x0a, 0xb5, 0x7c},
    {0x02, 0x44, 0x0a, 0xb5, 0x7c},
    {0x07, 0x44, 0x0a, 0xb5, 0x7c},
    {0x0d, 0x43, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x42, 0xb5, 0x8c},
    {0xc4, 0x4a, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x0a, 0xf5, 0x7c},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0a, 0xf5, 0x7c},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x05, 0xb5, 0xae},
    {0x0b, 0x46, 0x06, 0xf5, 0x9d},
    {0x05, 0x48, 0x05, 0xb5, 0xae},
    {0x0c, 0x41, 0x46, 0xb5, 0x9d},
    {0x09, 0x46, 0x06, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x05, 0xb5, 0xae},
    {0x14, 0x43, 0x46, 0xf5, 0x9d},
    {0xc2, 0x55, 0xb5, 0x00, 0x0c},
    {0x18, 0x43, 0x46, 0xf5, 0x9d},
    {0x0e, 0x41, 0x46, 0xb5, 0x9d},
    {0x1c, 0x43, 0x46, 0xf5, 0x9d},
    {0x04, 0x48, 0x05, 0xb5, 0xae},
    {0x02, 0x48, 0x05, 0xb5, 0xae},
    {0x07, 0x48, 0x05, 0xb5, 0xae},
    {0x17, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x46, 0xb5, 0x9d},
    {0xcd, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0xf5, 0x9d},
    {0x08, 0x46, 0x06, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x55, 0xb5, 0x00, 0x0c},
    {0x0a, 0x46, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x46, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x46, 0xb5, 0x9d},
    {0xd5, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x02, 0xb5, 0x8c},
    {0x0b, 0x44, 0x02, 0xf5, 0x8c},
    {0x05, 0x45, 0x02, 0xb5, 0x8c},
    {0x0c, 0x42, 0x42, 0xb5, 0x8c},
    {0x09, 0x44, 0x02, 0xf5, 0x8c},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x02, 0xb5, 0x8c},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x42, 0xb5, 0x8c},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x02, 0xb5, 0x8c},
    {0x02, 0x45, 0x02, 0xb5, 0x8c},
    {0x07, 0x45, 0x02, 0xb5, 0x8c},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x42, 0xb5, 0x8c},
    {0xd1, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x02, 0xf5, 0x8c},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0xf5, 0x8c},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0xb5, 0x8c},
    {0xc6, 0x42, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0xb5, 0x8c},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0xb5, 0x8c},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0x42, 0xb5, 0x8c},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x05, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x45, 0xb5, 0xae},
    {0x09, 0x47, 0x05, 0xf5, 0xae},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x45, 0xf5, 0xae},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0x45, 0xf5, 0xae},
    {0x0e, 0x45, 0x45, 0xb5, 0xae},
    {0x1c, 0x44, 0x45, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x45, 0x45, 0xb5, 0xae},
    {0xc9, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0x45, 0xf5, 0xae},
    {0x08, 0x47, 0x05, 0xf5, 0xae},
    {0x77, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0x05, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x45, 0x45, 0xb5, 0xae},
    {0x7f, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x45, 0x45, 0xb5, 0xae},
    {0xd4, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0x45, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0xb5, 0x8c},
    {0x0b, 0x41, 0x07, 0xf5, 0x8c},
    {0x05, 0x46, 0x07, 0xb5, 0x8c},
    {0x0c, 0x43, 0x47, 0xb5, 0x8c},
    {0x09, 0x41, 0x07, 0xf5, 0x8c},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0xb5, 0x8c},
    {0x61, 0x02, 0x05, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0xb5, 0x8c},
    {0x7d, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0xb5, 0x8c},
    {0x02, 0x46, 0x07, 0xb5, 0x8c},
    {0x07, 0x46, 0x07, 0xb5, 0x8c},
    {0x6f, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0xb5, 0x8c},
    {0xd0, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0xf5, 0x8c},
    {0x79, 0x02, 0x05, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x45, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0x45, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0xc1, 0x45, 0xb5, 0x0e},
    {0x19, 0x44, 0x45, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0xb5, 0x8c},
    {0xc5, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x45, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x45, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0xb5, 0x8c},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x45, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0xb5, 0x9d},
    {0x0b, 0x45, 0x06, 0xf5, 0x9d},
    {0x05, 0x47, 0x06, 0xb5, 0x9d},
    {0x0c, 0x44, 0x46, 0xb5, 0x9d},
    {0x09, 0x45, 0x06, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0xb5, 0x9d},
    {0x14, 0x42, 0x46, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0xf5, 0x9d},
    {0x0e, 0x44, 0x46, 0xb5, 0x9d},
    {0x1c, 0x42, 0x46, 0xf5, 0x9d},
    {0x04, 0x47, 0x06, 0xb5, 0x9d},
    {0x02, 0x47, 0x06, 0xb5, 0x9d},
    {0x07, 0x47, 0x06, 0xb5, 0x9d},
    {0x17, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x44, 0x46, 0xb5, 0x9d},
    {0xce, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0xf5, 0x9d},
    {0x08, 0x45, 0x06, 0xf5, 0x9d},
    {0x78, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0x05, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x05, 0xb5, 0xae},
    {0x0f, 0x44, 0x46, 0xb5, 0x9d},
    {0x40, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x05, 0xb5, 0xae},
    {0x11, 0x44, 0x46, 0xb5, 0x9d},
    {0xd6, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0xb5, 0x8c},
    {0x0b, 0x44, 0x07, 0xf5, 0x8c},
    {0x05, 0x45, 0x07, 0xb5, 0x8c},
    {0x0c, 0x42, 0x47, 0xb5, 0x8c},
    {0x09, 0x44, 0x07, 0xf5, 0x8c},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0xb5, 0x8c},
    {0x62, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x05, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0xb5, 0x8c},
    {0x7e, 0x02, 0x05, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0xb5, 0x8c},
    {0x02, 0x45, 0x07, 0xb5, 0x8c},
    {0x07, 0x45, 0x07, 0xb5, 0x8c},
    {0x70, 0x02, 0x05, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x05, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x05, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0xb5, 0x8c},
    {0xd2, 0x46, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x05, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0xf5, 0x8c},
    {0x7a, 0x02, 0x05, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x07, 0xf5, 0x8c},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0xb5, 0x00, 0x0c},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0x05, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x46, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0xb5, 0x8c},
    {0xc6, 0x47, 0xb5, 0x00, 0x0c},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0xb5, 0x8c},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0xb5, 0x8c},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0xb5, 0x8c},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x1d, 0xb5, 0x6e},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x1d, 0xb5, 0x6e},
    {0x67, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x1d, 0xb5, 0x6e},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x0b, 0xb5, 0x00, 0xff},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1d, 0xb5, 0x6e},
    {0x02, 0x43, 0x1d, 0xb5, 0x6e},
    {0x07, 0x43, 0x1d, 0xb5, 0x6e},
    {0x6d, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x2e, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2e, 0xf5, 0x7f},
    {0x05, 0x41, 0x2e, 0xb5, 0x7f},
    {0x75, 0x0b, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x2e, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2e, 0xb5, 0x7f},
    {0x63, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x03, 0x08, 0xf5, 0xff},
    {0x73, 0x0b, 0xb5, 0x00, 0xff},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x2e, 0xb5, 0x7f},
    {0x02, 0x41, 0x2e, 0xb5, 0x7f},
    {0x07, 0x41, 0x2e, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1d, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1d, 0xb5, 0x6e},
    {0x6b, 0x0b, 0xb5, 0x00, 0xff},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1d, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x2e, 0xf5, 0x7f},
    {0xc3, 0x5d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x08, 0xf5, 0xff},
    {0x0a, 0x43, 0x2e, 0xf5, 0x7f},
    {0x04, 0x42, 0x1d, 0xb5, 0x6e},
    {0x02, 0x42, 0x1d, 0xb5, 0x6e},
    {0x07, 0x42, 0x1d, 0xb5, 0x6e},
    {0x5d, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x0b, 0x46, 0xb5, 0xee},
    {0x71, 0x0b, 0xb5, 0x00, 0xff},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x03, 0x06, 0x6e},
    {0x7b, 0x0b, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x03, 0x06, 0x6e},
    {0x69, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x06, 0x6e},
    {0x5f, 0x0b, 0xb5, 0x00, 0xff},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x0b, 0xb5, 0x00, 0xff},
    {0xc1, 0x0b, 0x46, 0xb5, 0xee},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x06, 0x6e},
    {0x02, 0x43, 0x03, 0x06, 0x6e},
    {0x07, 0x43, 0x03, 0x06, 0x6e},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x2e, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2e, 0xf5, 0x7f},
    {0x05, 0x44, 0x2e, 0xb5, 0x7f},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x2e, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x2e, 0xb5, 0x7f},
    {0x65, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x05, 0x08, 0xf5, 0xff},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2e, 0xb5, 0x7f},
    {0x02, 0x44, 0x2e, 0xb5, 0x7f},
    {0x07, 0x44, 0x2e, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x06, 0x6e},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x06, 0x6e},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x06, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2e, 0xf5, 0x7f},
    {0xc3, 0x03, 0x46, 0xb5, 0xee},
    {0xc1, 0x05, 0x08, 0xf5, 0xff},
    {0x0a, 0x42, 0x2e, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x06, 0x6e},
    {0x02, 0x42, 0x03, 0x06, 0x6e},
    {0x07, 0x42, 0x03, 0x06, 0x6e},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x41, 0xf5, 0xee},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x41, 0xf5, 0xee},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x01, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x01, 0x6e},
    {0x68, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x01, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x0b, 0xb5, 0x00, 0xff},
    {0xc1, 0x0c, 0x41, 0xf5, 0xee},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x01, 0x6e},
    {0x02, 0x43, 0x0b, 0x01, 0x6e},
    {0x07, 0x43, 0x0b, 0x01, 0x6e},
    {0x6e, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x03, 0x01, 0x7e},
    {0x0b, 0x43, 0x03, 0x41, 0x7e},
    {0x05, 0x41, 0x03, 0x01, 0x7e},
    {0x76, 0x0b, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x03, 0x41, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x01, 0x7e},
    {0x64, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x09, 0x46, 0xb5, 0xee},
    {0x74, 0x0b, 0xb5, 0x00, 0xff},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x03, 0x01, 0x7e},
    {0x02, 0x41, 0x03, 0x01, 0x7e},
    {0x07, 0x41, 0x03, 0x01, 0x7e},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x01, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x01, 0x6e},
    {0x6c, 0x0b, 0xb5, 0x00, 0xff},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x01, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x41, 0x7e},
    {0xc3, 0x0b, 0x41, 0xf5, 0xee},
    {0xc1, 0x09, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x0b, 0x01, 0x6e},
    {0x02, 0x42, 0x0b, 0x01, 0x6e},
    {0x07, 0x42, 0x0b, 0x01, 0x6e},
    {0x5e, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x0b, 0xb5, 0x00, 0xff},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x0b, 0xb5, 0x00, 0xff},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x0b, 0xb5, 0x00, 0xff},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x0b, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x05, 0x06, 0x6e},
    {0x7c, 0x0b, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x05, 0x06, 0x6e},
    {0x6a, 0x0b, 0xb5, 0x00, 0xff},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x06, 0x6e},
    {0x60, 0x0b, 0xb5, 0x00, 0xff},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x0b, 0xb5, 0x00, 0xff},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x06, 0x6e},
    {0x02, 0x43, 0x05, 0x06, 0x6e},
    {0x07, 0x43, 0x05, 0x06, 0x6e},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x01, 0x7e},
    {0x0b, 0x42, 0x03, 0x41, 0x7e},
    {0x05, 0x44, 0x03, 0x01, 0x7e},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x41, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x01, 0x7e},
    {0x66, 0x0b, 0xb5, 0x00, 0xff},
    {0xc2, 0x06, 0x08, 0xf5, 0xff},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x01, 0x7e},
    {0x02, 0x44, 0x03, 0x01, 0x7e},
    {0x07, 0x44, 0x03, 0x01, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x06, 0x6e},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x06, 0x6e},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x06, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x41, 0x7e},
    {0xc3, 0x05, 0x46, 0xb5, 0xee},
    {0xc1, 0x06, 0x08, 0xf5, 0xff},
    {0x0a, 0x42, 0x03, 0x41, 0x7e},
    {0x04, 0x42, 0x05, 0x06, 0x6e},
    {0x02, 0x42, 0x05, 0x06, 0x6e},
    {0x07, 0x42, 0x05, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x03, 0xb5, 0xee},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x03, 0xb5, 0xee},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x03, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x03, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x03, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x03, 0xb5, 0xee},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x03, 0x6e},
    {0x02, 0x43, 0x0c, 0x03, 0x6e},
    {0x07, 0x43, 0x0c, 0x03, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x03, 0x7e},
    {0x0b, 0x43, 0x0b, 0x43, 0x7e},
    {0x05, 0x41, 0x0b, 0x03, 0x7e},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x43, 0x7e},
    {0xc7, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x03, 0x7e},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x03, 0x7e},
    {0x02, 0x41, 0x0b, 0x03, 0x7e},
    {0x07, 0x41, 0x0b, 0x03, 0x7e},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x03, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0c, 0x03, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0c, 0x03, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x43, 0x7e},
    {0xc3, 0x4c, 0x03, 0xb5, 0xee},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x0c, 0x03, 0x6e},
    {0x02, 0x42, 0x0c, 0x03, 0x6e},
    {0x07, 0x42, 0x0c, 0x03, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x03, 0x8e},
    {0x0b, 0x41, 0x03, 0x43, 0x8e},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x0c, 0x43, 0x43, 0x03, 0x8e},
    {0x09, 0x41, 0x03, 0x43, 0x8e},
    {0xda, 0x09, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x03, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x03, 0x8e},
    {0x02, 0x46, 0x03, 0x03, 0x8e},
    {0x07, 0x46, 0x03, 0x03, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x01, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x01, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x03, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x01, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x43, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x09, 0x01, 0x6e},
    {0x02, 0x43, 0x09, 0x01, 0x6e},
    {0x07, 0x43, 0x09, 0x01, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x03, 0x7e},
    {0x0b, 0x42, 0x0b, 0x43, 0x7e},
    {0x05, 0x44, 0x0b, 0x03, 0x7e},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x43, 0x7e},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0b, 0x03, 0x7e},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x03, 0x8e},
    {0xc5, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x03, 0x7e},
    {0x02, 0x44, 0x0b, 0x03, 0x7e},
    {0x07, 0x44, 0x0b, 0x03, 0x7e},
    {0x0d, 0x43, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x09, 0x01, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x01, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x03, 0x8e},
    {0xc4, 0x4b, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x01, 0x6e},
    {0x01, 0x43, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x0b, 0x43, 0x7e},
    {0xc3, 0x09, 0x41, 0xf5, 0xee},
    {0xc1, 0x0e, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x43, 0x7e},
    {0x04, 0x42, 0x09, 0x01, 0x6e},
    {0x02, 0x42, 0x09, 0x01, 0x6e},
    {0x07, 0x42, 0x09, 0x01, 0x6e},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x5c, 0x03, 0xb5, 0xee},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x03, 0xb5, 0xee},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x01, 0x7e},
    {0x0b, 0x43, 0x05, 0x41, 0x7e},
    {0x05, 0x41, 0x05, 0x01, 0x7e},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x41, 0x7e},
    {0xc8, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x01, 0x7e},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x08, 0xf5, 0xff},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x01, 0x7e},
    {0x02, 0x41, 0x05, 0x01, 0x7e},
    {0x07, 0x41, 0x05, 0x01, 0x7e},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x41, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x08, 0xf5, 0xff},
    {0x0a, 0x43, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x03, 0x8e},
    {0x0b, 0x44, 0x03, 0x43, 0x8e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x0c, 0x42, 0x43, 0x03, 0x8e},
    {0x09, 0x44, 0x03, 0x43, 0x8e},
    {0xda, 0x06, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x08, 0xf5, 0xff},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x03, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x03, 0x8e},
    {0x02, 0x45, 0x03, 0x03, 0x8e},
    {0x07, 0x45, 0x03, 0x03, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x06, 0x6e},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x06, 0x6e},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x03, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x06, 0x6e},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x43, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x08, 0xf5, 0xff},
    {0x0a, 0x44, 0x03, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x06, 0x6e},
    {0x02, 0x43, 0x06, 0x06, 0x6e},
    {0x07, 0x43, 0x06, 0x06, 0x6e},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x01, 0x7e},
    {0x0b, 0x42, 0x05, 0x41, 0x7e},
    {0x05, 0x44, 0x05, 0x01, 0x7e},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x41, 0x7e},
    {0xca, 0x43, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x01, 0x7e},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x08, 0xf5, 0xff},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x43, 0x03, 0x8e},
    {0xc6, 0x43, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x01, 0x7e},
    {0x02, 0x44, 0x05, 0x01, 0x7e},
    {0x07, 0x44, 0x05, 0x01, 0x7e},
    {0x0d, 0x42, 0x43, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x06, 0x6e},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x06, 0x6e},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x43, 0x03, 0x8e},
    {0xc4, 0x05, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x06, 0x6e},
    {0x01, 0x42, 0x43, 0x03, 0x8e},
    {0x08, 0x42, 0x05, 0x41, 0x7e},
    {0xc3, 0x06, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x08, 0xf5, 0xff},
    {0x0a, 0x42, 0x05, 0x41, 0x7e},
    {0x04, 0x42, 0x06, 0x06, 0x6e},
    {0x02, 0x42, 0x06, 0x06, 0x6e},
    {0x07, 0x42, 0x06, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x61, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x03, 0xb5, 0xee},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x21, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x21, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x21, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x03, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x21, 0xb5, 0x6e},
    {0x02, 0x43, 0x21, 0xb5, 0x6e},
    {0x07, 0x43, 0x21, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x36, 0xb5, 0x7f},
    {0x0b, 0x43, 0x36, 0xf5, 0x7f},
    {0x05, 0x41, 0x36, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x36, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x36, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x36, 0xb5, 0x7f},
    {0x02, 0x41, 0x36, 0xb5, 0x7f},
    {0x07, 0x41, 0x36, 0xb5, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x21, 0xb5, 0x6e},
    {0x97, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x21, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0x93, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x21, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x36, 0xf5, 0x7f},
    {0xc3, 0x61, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x36, 0xf5, 0x7f},
    {0x04, 0x42, 0x21, 0xb5, 0x6e},
    {0x02, 0x42, 0x21, 0xb5, 0x6e},
    {0x07, 0x42, 0x21, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x03, 0xb5, 0xee},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x36, 0xb5, 0x7f},
    {0x0b, 0x42, 0x36, 0xf5, 0x7f},
    {0x05, 0x44, 0x36, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x36, 0xf5, 0x7f},
    {0x8b, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x36, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x36, 0xb5, 0x7f},
    {0x02, 0x44, 0x36, 0xb5, 0x7f},
    {0x07, 0x44, 0x36, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x76, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x36, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x36, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x82, 0xf5, 0x9e},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xc2, 0xb5, 0x9e},
    {0x09, 0x46, 0x82, 0xf5, 0x9e},
    {0xda, 0x71, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x68, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc2, 0xf5, 0x9e},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x31, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x31, 0xb5, 0x6e},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0xc2, 0xb5, 0x9e},
    {0x8d, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x31, 0xb5, 0x6e},
    {0x13, 0x43, 0xc2, 0xf5, 0x9e},
    {0x08, 0x46, 0x82, 0xf5, 0x9e},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x68, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x31, 0xb5, 0x6e},
    {0x02, 0x43, 0x31, 0xb5, 0x6e},
    {0x07, 0x43, 0x31, 0xb5, 0x6e},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x03, 0x7e},
    {0x0b, 0x43, 0x09, 0x43, 0x7e},
    {0x05, 0x41, 0x09, 0x03, 0x7e},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x43, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x09, 0x03, 0x7e},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x41, 0xf5, 0xee},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0xc2, 0xb5, 0x9e},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x03, 0x7e},
    {0x02, 0x41, 0x09, 0x03, 0x7e},
    {0x07, 0x41, 0x09, 0x03, 0x7e},
    {0x0d, 0x41, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x31, 0xb5, 0x6e},
    {0x99, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x31, 0xb5, 0x6e},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0xc2, 0xb5, 0x9e},
    {0x95, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x31, 0xb5, 0x6e},
    {0x01, 0x41, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x43, 0x7e},
    {0xc3, 0x71, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x31, 0xb5, 0x6e},
    {0x02, 0x42, 0x31, 0xb5, 0x6e},
    {0x07, 0x42, 0x31, 0xb5, 0x6e},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4e, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x8d, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x03, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x03, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x03, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x8d, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0e, 0x03, 0x6e},
    {0x02, 0x43, 0x0e, 0x03, 0x6e},
    {0x07, 0x43, 0x0e, 0x03, 0x6e},
    {0x16, 0x43, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x03, 0x7e},
    {0x0b, 0x42, 0x09, 0x43, 0x7e},
    {0x05, 0x44, 0x09, 0x03, 0x7e},
    {0x1a, 0x43, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x43, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x09, 0x03, 0x7e},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x09, 0x03, 0x7e},
    {0x02, 0x44, 0x09, 0x03, 0x7e},
    {0x07, 0x44, 0x09, 0x03, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0e, 0x03, 0x6e},
    {0x12, 0x43, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x03, 0x6e},
    {0x15, 0x43, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x49, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x03, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x09, 0x43, 0x7e},
    {0xc3, 0x4e, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x43, 0x7e},
    {0x04, 0x42, 0x0e, 0x03, 0x6e},
    {0x02, 0x42, 0x0e, 0x03, 0x6e},
    {0x07, 0x42, 0x0e, 0x03, 0x6e},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x7d, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x03, 0xb5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x3d, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x3d, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x3d, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x03, 0xb5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x3d, 0xb5, 0x6e},
    {0x02, 0x43, 0x3d, 0xb5, 0x6e},
    {0x07, 0x43, 0x3d, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x88, 0xb5, 0x7f},
    {0x0b, 0x43, 0x88, 0xf5, 0x7f},
    {0x05, 0x41, 0x88, 0xb5, 0x7f},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x88, 0xf5, 0x7f},
    {0xc7, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x88, 0xb5, 0x7f},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x46, 0xb5, 0xee},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x88, 0xb5, 0x7f},
    {0x02, 0x41, 0x88, 0xb5, 0x7f},
    {0x07, 0x41, 0x88, 0xb5, 0x7f},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x3d, 0xb5, 0x6e},
    {0x98, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3d, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0x94, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3d, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x88, 0xf5, 0x7f},
    {0xc3, 0x7d, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x46, 0xb5, 0xee},
    {0x0a, 0x43, 0x88, 0xf5, 0x7f},
    {0x04, 0x42, 0x3d, 0xb5, 0x6e},
    {0x02, 0x42, 0x3d, 0xb5, 0x6e},
    {0x07, 0x42, 0x3d, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x03, 0x8e},
    {0x0b, 0x41, 0x05, 0x43, 0x8e},
    {0x05, 0x46, 0x05, 0x03, 0x8e},
    {0x0c, 0x43, 0x45, 0x03, 0x8e},
    {0x09, 0x41, 0x05, 0x43, 0x8e},
    {0xda, 0x04, 0x46, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x03, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x78, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x03, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x03, 0x8e},
    {0x02, 0x46, 0x05, 0x03, 0x8e},
    {0x07, 0x46, 0x05, 0x03, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x06, 0x6e},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x06, 0x6e},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x03, 0x8e},
    {0x90, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x06, 0x6e},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x43, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x78, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x06, 0x6e},
    {0x02, 0x43, 0x04, 0x06, 0x6e},
    {0x07, 0x43, 0x04, 0x06, 0x6e},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x88, 0xb5, 0x7f},
    {0x0b, 0x42, 0x88, 0xf5, 0x7f},
    {0x05, 0x44, 0x88, 0xb5, 0x7f},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x88, 0xf5, 0x7f},
    {0x8c, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x88, 0xb5, 0x7f},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x03, 0x8e},
    {0xc5, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x88, 0xb5, 0x7f},
    {0x02, 0x44, 0x88, 0xb5, 0x7f},
    {0x07, 0x44, 0x88, 0xb5, 0x7f},
    {0x0d, 0x43, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x06, 0x6e},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x06, 0x6e},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x03, 0x8e},
    {0x84, 0x88, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x06, 0x6e},
    {0x01, 0x43, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x88, 0xf5, 0x7f},
    {0xc3, 0x04, 0x46, 0xb5, 0xee},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x88, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x06, 0x6e},
    {0x02, 0x42, 0x04, 0x06, 0x6e},
    {0x07, 0x42, 0x04, 0x06, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x82, 0xb5, 0x9e},
    {0x0b, 0x45, 0x82, 0xf5, 0x9e},
    {0x05, 0x47, 0x82, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc2, 0xb5, 0x9e},
    {0x09, 0x45, 0x82, 0xf5, 0x9e},
    {0xda, 0x02, 0x46, 0xb5, 0xee},
    {0x06, 0x47, 0x82, 0xb5, 0x9e},
    {0x14, 0x42, 0xc2, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x46, 0xb5, 0xee},
    {0x18, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc2, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc2, 0xf5, 0x9e},
    {0x04, 0x47, 0x82, 0xb5, 0x9e},
    {0x02, 0x47, 0x82, 0xb5, 0x9e},
    {0x07, 0x47, 0x82, 0xb5, 0x9e},
    {0x17, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x06, 0x6e},
    {0x1b, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x06, 0x6e},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xc2, 0xb5, 0x9e},
    {0x8e, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x06, 0x6e},
    {0x13, 0x42, 0xc2, 0xf5, 0x9e},
    {0x08, 0x45, 0x82, 0xf5, 0x9e},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x46, 0xb5, 0xee},
    {0x0a, 0x45, 0x82, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x06, 0x6e},
    {0x02, 0x43, 0x02, 0x06, 0x6e},
    {0x07, 0x43, 0x02, 0x06, 0x6e},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x01, 0x7e},
    {0x0b, 0x43, 0x06, 0x41, 0x7e},
    {0x05, 0x41, 0x06, 0x01, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x41, 0x7e},
    {0xc8, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x01, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xc2, 0xb5, 0x9e},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x01, 0x7e},
    {0x02, 0x41, 0x06, 0x01, 0x7e},
    {0x07, 0x41, 0x06, 0x01, 0x7e},
    {0x0d, 0x44, 0xc2, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x06, 0x6e},
    {0x9b, 0x82, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x06, 0x6e},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xc2, 0xb5, 0x9e},
    {0x96, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x06, 0x6e},
    {0x01, 0x44, 0xc2, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x41, 0x7e},
    {0xc3, 0x02, 0x46, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x06, 0x6e},
    {0x02, 0x42, 0x02, 0x06, 0x6e},
    {0x07, 0x42, 0x02, 0x06, 0x6e},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x03, 0x8e},
    {0x0b, 0x44, 0x05, 0x43, 0x8e},
    {0x05, 0x45, 0x05, 0x03, 0x8e},
    {0x0c, 0x42, 0x45, 0x03, 0x8e},
    {0x09, 0x44, 0x05, 0x43, 0x8e},
    {0xda, 0x07, 0x46, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x03, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x03, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x03, 0x8e},
    {0x02, 0x45, 0x05, 0x03, 0x8e},
    {0x07, 0x45, 0x05, 0x03, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x06, 0x6e},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x06, 0x6e},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x03, 0x8e},
    {0x92, 0x82, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x06, 0x6e},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x43, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x06, 0x6e},
    {0x02, 0x43, 0x07, 0x06, 0x6e},
    {0x07, 0x43, 0x07, 0x06, 0x6e},
    {0x16, 0x42, 0xc2, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x01, 0x7e},
    {0x0b, 0x42, 0x06, 0x41, 0x7e},
    {0x05, 0x44, 0x06, 0x01, 0x7e},
    {0x1a, 0x42, 0xc2, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x41, 0x7e},
    {0xca, 0x45, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x01, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0xc2, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x03, 0x8e},
    {0xc6, 0x45, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x01, 0x7e},
    {0x02, 0x44, 0x06, 0x01, 0x7e},
    {0x07, 0x44, 0x06, 0x01, 0x7e},
    {0x0d, 0x42, 0x45, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x06, 0x6e},
    {0x12, 0x42, 0xc2, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x06, 0x6e},
    {0x15, 0x42, 0xc2, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x03, 0x8e},
    {0xc4, 0x06, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x06, 0x6e},
    {0x01, 0x42, 0x45, 0x03, 0x8e},
    {0x08, 0x42, 0x06, 0x41, 0x7e},
    {0xc3, 0x07, 0x46, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x06, 0x6e},
    {0x02, 0x42, 0x07, 0x06, 0x6e},
    {0x07, 0x42, 0x07, 0x06, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0xb5, 0x40, 0x0d},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x2f, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x2f, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2f, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2f, 0xb5, 0x6e},
    {0x02, 0x43, 0x2f, 0xb5, 0x6e},
    {0x07, 0x43, 0x2f, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x24, 0xb5, 0x7f},
    {0x0b, 0x43, 0x24, 0xf5, 0x7f},
    {0x05, 0x41, 0x24, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x24, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x24, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x24, 0xb5, 0x7f},
    {0x02, 0x41, 0x24, 0xb5, 0x7f},
    {0x07, 0x41, 0x24, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x2f, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2f, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2f, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x24, 0xf5, 0x7f},
    {0xc3, 0x6f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x24, 0xf5, 0x7f},
    {0x04, 0x42, 0x2f, 0xb5, 0x6e},
    {0x02, 0x42, 0x2f, 0xb5, 0x6e},
    {0x07, 0x42, 0x2f, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x24, 0xb5, 0x7f},
    {0x0b, 0x42, 0x24, 0xf5, 0x7f},
    {0x05, 0x44, 0x24, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x24, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x24, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x24, 0xb5, 0x7f},
    {0x02, 0x44, 0x24, 0xb5, 0x7f},
    {0x07, 0x44, 0x24, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x64, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x24, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x24, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x7b, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x76, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x3b, 0xb5, 0x6e},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x3b, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x3b, 0xb5, 0x6e},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x3b, 0xb5, 0x6e},
    {0x02, 0x43, 0x3b, 0xb5, 0x6e},
    {0x07, 0x43, 0x3b, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x3b, 0xb5, 0x6e},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x3b, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x3b, 0xb5, 0x6e},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7b, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3b, 0xb5, 0x6e},
    {0x02, 0x42, 0x3b, 0xb5, 0x6e},
    {0x07, 0x42, 0x3b, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x69, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x64, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x29, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x29, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x29, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x64, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x29, 0xb5, 0x6e},
    {0x02, 0x43, 0x29, 0xb5, 0x6e},
    {0x07, 0x43, 0x29, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x34, 0xb5, 0x7f},
    {0x0b, 0x43, 0x34, 0xf5, 0x7f},
    {0x05, 0x41, 0x34, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x34, 0xf5, 0x7f},
    {0xc7, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x34, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x34, 0xb5, 0x7f},
    {0x02, 0x41, 0x34, 0xb5, 0x7f},
    {0x07, 0x41, 0x34, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x29, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x29, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x29, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x34, 0xf5, 0x7f},
    {0xc3, 0x69, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x34, 0xf5, 0x7f},
    {0x04, 0x42, 0x29, 0xb5, 0x6e},
    {0x02, 0x42, 0x29, 0xb5, 0x6e},
    {0x07, 0x42, 0x29, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x10, 0xb5, 0x8e},
    {0x0b, 0x41, 0x10, 0xf5, 0x8e},
    {0x05, 0x46, 0x10, 0xb5, 0x8e},
    {0x0c, 0x43, 0x50, 0xb5, 0x8e},
    {0x09, 0x41, 0x10, 0xf5, 0x8e},
    {0xda, 0x50, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x10, 0xb5, 0x8e},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x74, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x50, 0xb5, 0x8e},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x10, 0xb5, 0x8e},
    {0x02, 0x46, 0x10, 0xb5, 0x8e},
    {0x07, 0x46, 0x10, 0xb5, 0x8e},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x10, 0x03, 0x6e},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x10, 0x03, 0x6e},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x50, 0xb5, 0x8e},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x03, 0x6e},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x10, 0xf5, 0x8e},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x74, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x03, 0x6e},
    {0x02, 0x43, 0x10, 0x03, 0x6e},
    {0x07, 0x43, 0x10, 0x03, 0x6e},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x34, 0xb5, 0x7f},
    {0x0b, 0x42, 0x34, 0xf5, 0x7f},
    {0x05, 0x44, 0x34, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x34, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x34, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0f, 0x41, 0xf5, 0xee},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x50, 0xb5, 0x8e},
    {0xc5, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x34, 0xb5, 0x7f},
    {0x02, 0x44, 0x34, 0xb5, 0x7f},
    {0x07, 0x44, 0x34, 0xb5, 0x7f},
    {0x0d, 0x43, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x03, 0x6e},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x10, 0x03, 0x6e},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x50, 0xb5, 0x8e},
    {0xc4, 0x74, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x03, 0x6e},
    {0x01, 0x43, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x34, 0xf5, 0x7f},
    {0xc3, 0x50, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x41, 0xf5, 0xee},
    {0x0a, 0x42, 0x34, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x03, 0x6e},
    {0x02, 0x42, 0x10, 0x03, 0x6e},
    {0x07, 0x42, 0x10, 0x03, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x90, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x40, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x90, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x90, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x90, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x40, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x90, 0xb5, 0x6f},
    {0x02, 0x43, 0x90, 0xb5, 0x6f},
    {0x07, 0x43, 0x90, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0f, 0xf5, 0x7d},
    {0x05, 0x41, 0x0f, 0xb5, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0f, 0xf5, 0x7d},
    {0xc8, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0xb5, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0f, 0xb5, 0x7d},
    {0x02, 0x41, 0x0f, 0xb5, 0x7d},
    {0x07, 0x41, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x90, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x90, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x90, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0f, 0xf5, 0x7d},
    {0x83, 0x90, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x90, 0xb5, 0x6f},
    {0x02, 0x42, 0x90, 0xb5, 0x6f},
    {0x07, 0x42, 0x90, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x10, 0xb5, 0x8e},
    {0x0b, 0x44, 0x10, 0xf5, 0x8e},
    {0x05, 0x45, 0x10, 0xb5, 0x8e},
    {0x0c, 0x42, 0x50, 0xb5, 0x8e},
    {0x09, 0x44, 0x10, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x10, 0xb5, 0x8e},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x50, 0xb5, 0x8e},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x10, 0xb5, 0x8e},
    {0x02, 0x45, 0x10, 0xb5, 0x8e},
    {0x07, 0x45, 0x10, 0xb5, 0x8e},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x50, 0xb5, 0x8e},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x10, 0xf5, 0x8e},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x10, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0f, 0xf5, 0x7d},
    {0x05, 0x44, 0x0f, 0xb5, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0f, 0xf5, 0x7d},
    {0xca, 0x50, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0xb5, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x50, 0xb5, 0x8e},
    {0xc6, 0x50, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0xb5, 0x7d},
    {0x02, 0x44, 0x0f, 0xb5, 0x7d},
    {0x07, 0x44, 0x0f, 0xb5, 0x7d},
    {0x0d, 0x42, 0x50, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x50, 0xb5, 0x8e},
    {0xc4, 0x4f, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x50, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0xf5, 0x7d},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0xf5, 0x7d},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5f, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x41, 0xf5, 0xee},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x1f, 0xb5, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x1f, 0xb5, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x1f, 0xb5, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x41, 0xf5, 0xee},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1f, 0xb5, 0x6e},
    {0x02, 0x43, 0x1f, 0xb5, 0x6e},
    {0x07, 0x43, 0x1f, 0xb5, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x00, 0xb5, 0x7f},
    {0x0b, 0x43, 0x00, 0xf5, 0x7f},
    {0x05, 0x41, 0x00, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x00, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x00, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x00, 0xb5, 0x7f},
    {0x02, 0x41, 0x00, 0xb5, 0x7f},
    {0x07, 0x41, 0x00, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x1f, 0xb5, 0x6e},
    {0xd7, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x1f, 0xb5, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x1f, 0xb5, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x00, 0xf5, 0x7f},
    {0xc3, 0x5f, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x00, 0xf5, 0x7f},
    {0x04, 0x42, 0x1f, 0xb5, 0x6e},
    {0x02, 0x42, 0x1f, 0xb5, 0x6e},
    {0x07, 0x42, 0x1f, 0xb5, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x41, 0xf5, 0xee},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x99, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x01, 0x6e},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x01, 0x6e},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x08, 0x01, 0x6e},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x99, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x01, 0x6e},
    {0x02, 0x43, 0x08, 0x01, 0x6e},
    {0x07, 0x43, 0x08, 0x01, 0x6e},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x00, 0xb5, 0x7f},
    {0x0b, 0x42, 0x00, 0xf5, 0x7f},
    {0x05, 0x44, 0x00, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x00, 0xf5, 0x7f},
    {0xcb, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x00, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x00, 0xb5, 0x7f},
    {0x02, 0x44, 0x00, 0xb5, 0x7f},
    {0x07, 0x44, 0x00, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x01, 0x6e},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x01, 0x6e},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x40, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x01, 0x6e},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x00, 0xf5, 0x7f},
    {0xc3, 0x08, 0x41, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x00, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x01, 0x6e},
    {0x02, 0x42, 0x08, 0x01, 0x6e},
    {0x07, 0x42, 0x08, 0x01, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x0f, 0xf5, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x4f, 0xb5, 0x9f},
    {0x09, 0x46, 0x0f, 0xf5, 0x9f},
    {0xda, 0x79, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x4f, 0xf5, 0x9f},
    {0xc2, 0x6c, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x4f, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4f, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4f, 0xf5, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x4f, 0xf5, 0x9f},
    {0x03, 0x43, 0x39, 0xb5, 0x6e},
    {0x1b, 0x43, 0x4f, 0xf5, 0x9f},
    {0x05, 0x43, 0x39, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x4f, 0xb5, 0x9f},
    {0xcd, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x39, 0xb5, 0x6e},
    {0x13, 0x43, 0x4f, 0xf5, 0x9f},
    {0x08, 0x46, 0x0f, 0xf5, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x0f, 0xf5, 0x9f},
    {0x04, 0x43, 0x39, 0xb5, 0x6e},
    {0x02, 0x43, 0x39, 0xb5, 0x6e},
    {0x07, 0x43, 0x39, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x01, 0x7e},
    {0x0b, 0x43, 0x04, 0x41, 0x7e},
    {0x05, 0x41, 0x04, 0x01, 0x7e},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x41, 0x7e},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x01, 0x7e},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x41, 0xf5, 0xee},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x4f, 0xb5, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x01, 0x7e},
    {0x02, 0x41, 0x04, 0x01, 0x7e},
    {0x07, 0x41, 0x04, 0x01, 0x7e},
    {0x0d, 0x41, 0x4f, 0xb5, 0x9f},
    {0x03, 0x42, 0x39, 0xb5, 0x6e},
    {0xd9, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x39, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x4f, 0xb5, 0x9f},
    {0xd5, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x39, 0xb5, 0x6e},
    {0x01, 0x41, 0x4f, 0xb5, 0x9f},
    {0x08, 0x43, 0x04, 0x41, 0x7e},
    {0xc3, 0x79, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x41, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x39, 0xb5, 0x6e},
    {0x02, 0x42, 0x39, 0xb5, 0x6e},
    {0x07, 0x42, 0x39, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x95, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x95, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x4f, 0xf5, 0x9f},
    {0x03, 0x44, 0x04, 0x01, 0x7e},
    {0x0b, 0x42, 0x04, 0x41, 0x7e},
    {0x05, 0x44, 0x04, 0x01, 0x7e},
    {0x1a, 0x43, 0x4f, 0xf5, 0x9f},
    {0x09, 0x42, 0x04, 0x41, 0x7e},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x01, 0x7e},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x4f, 0xf5, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x01, 0x7e},
    {0x02, 0x44, 0x04, 0x01, 0x7e},
    {0x07, 0x44, 0x04, 0x01, 0x7e},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x4f, 0xf5, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x4f, 0xf5, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x41, 0x7e},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x41, 0x7e},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x4f, 0xf5, 0x40, 0x0f},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x0a, 0x41, 0xf5, 0xee},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x01, 0x41, 0xf5, 0xee},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0a, 0x01, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0a, 0x01, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x01, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x01, 0x41, 0xf5, 0xee},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x0a, 0x01, 0x6e},
    {0x02, 0x43, 0x0a, 0x01, 0x6e},
    {0x07, 0x43, 0x0a, 0x01, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x02, 0x01, 0x7e},
    {0x0b, 0x43, 0x02, 0x41, 0x7e},
    {0x05, 0x41, 0x02, 0x01, 0x7e},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x02, 0x41, 0x7e},
    {0xc7, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x01, 0x7e},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x02, 0x01, 0x7e},
    {0x02, 0x41, 0x02, 0x01, 0x7e},
    {0x07, 0x41, 0x02, 0x01, 0x7e},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0a, 0x01, 0x6e},
    {0xd8, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0a, 0x01, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0a, 0x01, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x02, 0x41, 0x7e},
    {0xc3, 0x0a, 0x41, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x0a, 0x01, 0x6e},
    {0x02, 0x42, 0x0a, 0x01, 0x6e},
    {0x07, 0x42, 0x0a, 0x01, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x06, 0x03, 0x8e},
    {0x0b, 0x41, 0x06, 0x43, 0x8e},
    {0x05, 0x46, 0x06, 0x03, 0x8e},
    {0x0c, 0x43, 0x46, 0x03, 0x8e},
    {0x09, 0x41, 0x06, 0x43, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x03, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x46, 0x03, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x06, 0x03, 0x8e},
    {0x02, 0x46, 0x06, 0x03, 0x8e},
    {0x07, 0x46, 0x06, 0x03, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x46, 0x03, 0x8e},
    {0xd0, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x06, 0x43, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x02, 0x01, 0x7e},
    {0x0b, 0x42, 0x02, 0x41, 0x7e},
    {0x05, 0x44, 0x02, 0x01, 0x7e},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x02, 0x41, 0x7e},
    {0xcc, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x02, 0x01, 0x7e},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x46, 0x03, 0x8e},
    {0xc5, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x01, 0x7e},
    {0x02, 0x44, 0x02, 0x01, 0x7e},
    {0x07, 0x44, 0x02, 0x01, 0x7e},
    {0x0d, 0x43, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x46, 0x03, 0x8e},
    {0xc4, 0x02, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x41, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x02, 0x41, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x0f, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0f, 0xf5, 0x9f},
    {0x05, 0x47, 0x0f, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4f, 0xb5, 0x9f},
    {0x09, 0x45, 0x0f, 0xf5, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x0f, 0xb5, 0x9f},
    {0x14, 0x42, 0x4f, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x4f, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4f, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4f, 0xf5, 0x9f},
    {0x04, 0x47, 0x0f, 0xb5, 0x9f},
    {0x02, 0x47, 0x0f, 0xb5, 0x9f},
    {0x07, 0x47, 0x0f, 0xb5, 0x9f},
    {0x17, 0x42, 0x4f, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x4f, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x4f, 0xb5, 0x9f},
    {0xce, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x4f, 0xf5, 0x9f},
    {0x08, 0x45, 0x0f, 0xf5, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x0f, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x07, 0x01, 0x7e},
    {0x0b, 0x43, 0x07, 0x41, 0x7e},
    {0x05, 0x41, 0x07, 0x01, 0x7e},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x07, 0x41, 0x7e},
    {0xc8, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x01, 0x7e},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x4f, 0xb5, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x07, 0x01, 0x7e},
    {0x02, 0x41, 0x07, 0x01, 0x7e},
    {0x07, 0x41, 0x07, 0x01, 0x7e},
    {0x0d, 0x44, 0x4f, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x4f, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x4f, 0xb5, 0x9f},
    {0xd6, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x4f, 0xb5, 0x9f},
    {0x08, 0x43, 0x07, 0x41, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x06, 0x03, 0x8e},
    {0x0b, 0x44, 0x06, 0x43, 0x8e},
    {0x05, 0x45, 0x06, 0x03, 0x8e},
    {0x0c, 0x42, 0x46, 0x03, 0x8e},
    {0x09, 0x44, 0x06, 0x43, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x03, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x46, 0x03, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x06, 0x03, 0x8e},
    {0x02, 0x45, 0x06, 0x03, 0x8e},
    {0x07, 0x45, 0x06, 0x03, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x46, 0x03, 0x8e},
    {0xd2, 0x4f, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x06, 0x43, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x4f, 0xf5, 0x9f},
    {0x03, 0x44, 0x07, 0x01, 0x7e},
    {0x0b, 0x42, 0x07, 0x41, 0x7e},
    {0x05, 0x44, 0x07, 0x01, 0x7e},
    {0x1a, 0x42, 0x4f, 0xf5, 0x9f},
    {0x09, 0x42, 0x07, 0x41, 0x7e},
    {0xca, 0x46, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x01, 0x7e},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x4f, 0xf5, 0x9f},
    {0x0f, 0x42, 0x46, 0x03, 0x8e},
    {0xc6, 0x46, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x01, 0x7e},
    {0x02, 0x44, 0x07, 0x01, 0x7e},
    {0x07, 0x44, 0x07, 0x01, 0x7e},
    {0x0d, 0x42, 0x46, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x4f, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x4f, 0xf5, 0x9f},
    {0x11, 0x42, 0x46, 0x03, 0x8e},
    {0xc4, 0x07, 0x41, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x41, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x41, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xde, 0xb5, 0x00, 0x0f},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xde, 0xb5, 0x00, 0x0f},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x56, 0xb5, 0x40, 0x0d},
    {0x06, 0xde, 0xb5, 0x00, 0x0f},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0xc2, 0x5e, 0xb5, 0x40, 0x0d},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xde, 0xb5, 0x00, 0x0f},
    {0x02, 0xde, 0xb5, 0x00, 0x0f},
    {0x07, 0xde, 0xb5, 0x00, 0x0f},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0x16, 0xb5, 0x6d},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0x16, 0xb5, 0x6d},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x16, 0xb5, 0x6d},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0xb5, 0x40, 0x0d},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x16, 0xb5, 0x6d},
    {0x02, 0x43, 0x16, 0xb5, 0x6d},
    {0x07, 0x43, 0x16, 0xb5, 0x6d},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x43, 0x0d, 0xf5, 0x7d},
    {0x05, 0x41, 0x0d, 0xb5, 0x7d},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0xf5, 0x7d},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x0d, 0xb5, 0x7d},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0xb5, 0x7d},
    {0x02, 0x41, 0x0d, 0xb5, 0x7d},
    {0x07, 0x41, 0x0d, 0xb5, 0x7d},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x16, 0xb5, 0x6d},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x16, 0xb5, 0x6d},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x16, 0xb5, 0x6d},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x56, 0xb5, 0x40, 0x0d},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x16, 0xb5, 0x6d},
    {0x02, 0x42, 0x16, 0xb5, 0x6d},
    {0x07, 0x42, 0x16, 0xb5, 0x6d},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0b, 0x42, 0x0d, 0xf5, 0x7d},
    {0x05, 0x44, 0x0d, 0xb5, 0x7d},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x0d, 0xf5, 0x7d},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x0d, 0xb5, 0x7d},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x0d, 0xb5, 0x7d},
    {0x02, 0x44, 0x0d, 0xb5, 0x7d},
    {0x07, 0x44, 0x0d, 0xb5, 0x7d},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x4d, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x0d, 0xf5, 0x7d},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x5a, 0xb5, 0x40, 0x0d},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x62, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1a, 0xb5, 0x6d},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1a, 0xb5, 0x6d},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x1a, 0xb5, 0x6d},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x62, 0xb5, 0x40, 0x0d},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x1a, 0xb5, 0x6d},
    {0x02, 0x43, 0x1a, 0xb5, 0x6d},
    {0x07, 0x43, 0x1a, 0xb5, 0x6d},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1a, 0xb5, 0x6d},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1a, 0xb5, 0x6d},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1a, 0xb5, 0x6d},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x5a, 0xb5, 0x40, 0x0d},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x1a, 0xb5, 0x6d},
    {0x02, 0x42, 0x1a, 0xb5, 0x6d},
    {0x07, 0x42, 0x1a, 0xb5, 0x6d},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x08, 0xb5, 0x8d},
    {0x0b, 0x41, 0x08, 0xf5, 0x8d},
    {0x05, 0x46, 0x08, 0xb5, 0x8d},
    {0x0c, 0x43, 0x48, 0xb5, 0x8d},
    {0x09, 0x41, 0x08, 0xf5, 0x8d},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x72, 0xb5, 0x40, 0x0d},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x48, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x08, 0xb5, 0x8d},
    {0x02, 0x46, 0x08, 0xb5, 0x8d},
    {0x07, 0x46, 0x08, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x48, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x08, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x72, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x48, 0xb5, 0x8d},
    {0xc5, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x48, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8c, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7e, 0xb5, 0x40, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8c, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8c, 0xb5, 0x6f},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8c, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7e, 0xb5, 0x40, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8c, 0xb5, 0x6f},
    {0x02, 0x43, 0x8c, 0xb5, 0x6f},
    {0x07, 0x43, 0x8c, 0xb5, 0x6f},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8c, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8c, 0xb5, 0x6f},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8c, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8c, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8c, 0xb5, 0x6f},
    {0x02, 0x42, 0x8c, 0xb5, 0x6f},
    {0x07, 0x42, 0x8c, 0xb5, 0x6f},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x08, 0xb5, 0x8d},
    {0x0b, 0x44, 0x08, 0xf5, 0x8d},
    {0x05, 0x45, 0x08, 0xb5, 0x8d},
    {0x0c, 0x42, 0x48, 0xb5, 0x8d},
    {0x09, 0x44, 0x08, 0xf5, 0x8d},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x48, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x08, 0xb5, 0x8d},
    {0x02, 0x45, 0x08, 0xb5, 0x8d},
    {0x07, 0x45, 0x08, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x48, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x08, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x48, 0xb5, 0x8d},
    {0xc6, 0x48, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x48, 0xb5, 0x8d},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x65, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x70, 0xb5, 0x40, 0x0d},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x25, 0xb5, 0x6e},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x25, 0xb5, 0x6e},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x25, 0xb5, 0x6e},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x70, 0xb5, 0x40, 0x0d},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x25, 0xb5, 0x6e},
    {0x02, 0x43, 0x25, 0xb5, 0x6e},
    {0x07, 0x43, 0x25, 0xb5, 0x6e},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x2c, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2c, 0xf5, 0x7f},
    {0x05, 0x41, 0x2c, 0xb5, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x2c, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x2c, 0xb5, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x2c, 0xb5, 0x7f},
    {0x02, 0x41, 0x2c, 0xb5, 0x7f},
    {0x07, 0x41, 0x2c, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x25, 0xb5, 0x6e},
    {0xd7, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x25, 0xb5, 0x6e},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x25, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x2c, 0xf5, 0x7f},
    {0xc3, 0x65, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x2c, 0xf5, 0x7f},
    {0x04, 0x42, 0x25, 0xb5, 0x6e},
    {0x02, 0x42, 0x25, 0xb5, 0x6e},
    {0x07, 0x42, 0x25, 0xb5, 0x6e},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x7c, 0xb5, 0x40, 0x0d},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x7c, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x2c, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2c, 0xf5, 0x7f},
    {0x05, 0x44, 0x2c, 0xb5, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x2c, 0xf5, 0x7f},
    {0xcb, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x2c, 0xb5, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x2c, 0xb5, 0x7f},
    {0x02, 0x44, 0x2c, 0xb5, 0x7f},
    {0x07, 0x44, 0x2c, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x6c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x2c, 0xf5, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x2c, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x04, 0xf5, 0x9d},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x44, 0xb5, 0x9d},
    {0x09, 0x46, 0x04, 0xf5, 0x9d},
    {0xda, 0x59, 0xb5, 0x40, 0x0d},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x44, 0xf5, 0x9d},
    {0xc2, 0x6a, 0xb5, 0x40, 0x0d},
    {0x18, 0x43, 0x44, 0xf5, 0x9d},
    {0x0e, 0x41, 0x44, 0xb5, 0x9d},
    {0x1c, 0x43, 0x44, 0xf5, 0x9d},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x19, 0xb5, 0x6d},
    {0x1b, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x19, 0xb5, 0x6d},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x44, 0xb5, 0x9d},
    {0xcd, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x19, 0xb5, 0x6d},
    {0x13, 0x43, 0x44, 0xf5, 0x9d},
    {0x08, 0x46, 0x04, 0xf5, 0x9d},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x46, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x19, 0xb5, 0x6d},
    {0x02, 0x43, 0x19, 0xb5, 0x6d},
    {0x07, 0x43, 0x19, 0xb5, 0x6d},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x11, 0xb5, 0x7d},
    {0x0b, 0x43, 0x11, 0xf5, 0x7d},
    {0x05, 0x41, 0x11, 0xb5, 0x7d},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x11, 0xf5, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x11, 0xb5, 0x7d},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x44, 0xb5, 0x9d},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x11, 0xb5, 0x7d},
    {0x02, 0x41, 0x11, 0xb5, 0x7d},
    {0x07, 0x41, 0x11, 0xb5, 0x7d},
    {0x0d, 0x41, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x19, 0xb5, 0x6d},
    {0xd9, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x19, 0xb5, 0x6d},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x44, 0xb5, 0x9d},
    {0xd5, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x19, 0xb5, 0x6d},
    {0x01, 0x41, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x11, 0xf5, 0x7d},
    {0xc3, 0x59, 0xb5, 0x40, 0x0d},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x19, 0xb5, 0x6d},
    {0x02, 0x42, 0x19, 0xb5, 0x6d},
    {0x07, 0x42, 0x19, 0xb5, 0x6d},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x4f, 0x03, 0xb5, 0xee},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x91, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0f, 0x03, 0x6e},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0f, 0x03, 0x6e},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0f, 0x03, 0x6e},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x91, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x0f, 0x03, 0x6e},
    {0x02, 0x43, 0x0f, 0x03, 0x6e},
    {0x07, 0x43, 0x0f, 0x03, 0x6e},
    {0x16, 0x43, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x11, 0xb5, 0x7d},
    {0x0b, 0x42, 0x11, 0xf5, 0x7d},
    {0x05, 0x44, 0x11, 0xb5, 0x7d},
    {0x1a, 0x43, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x11, 0xf5, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x11, 0xb5, 0x7d},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x11, 0xb5, 0x7d},
    {0x02, 0x44, 0x11, 0xb5, 0x7d},
    {0x07, 0x44, 0x11, 0xb5, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x0f, 0x03, 0x6e},
    {0x12, 0x43, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x0f, 0x03, 0x6e},
    {0x15, 0x43, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x51, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0f, 0x03, 0x6e},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x11, 0xf5, 0x7d},
    {0xc3, 0x4f, 0x03, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x11, 0xf5, 0x7d},
    {0x04, 0x42, 0x0f, 0x03, 0x6e},
    {0x02, 0x42, 0x0f, 0x03, 0x6e},
    {0x07, 0x42, 0x0f, 0x03, 0x6e},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0x9a, 0x85, 0xb5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x60, 0xb5, 0x40, 0x0d},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x85, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x85, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x85, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x60, 0xb5, 0x40, 0x0d},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x85, 0xb5, 0x6e},
    {0x02, 0x43, 0x85, 0xb5, 0x6e},
    {0x07, 0x43, 0x85, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x85, 0xb5, 0x6e},
    {0xd8, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x85, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x85, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0x83, 0x85, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x85, 0xb5, 0x6e},
    {0x02, 0x42, 0x85, 0xb5, 0x6e},
    {0x07, 0x42, 0x85, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x7a, 0xb5, 0x40, 0x0d},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7a, 0xb5, 0x40, 0x0d},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0xb5, 0x9d},
    {0x0b, 0x45, 0x04, 0xf5, 0x9d},
    {0x05, 0x47, 0x04, 0xb5, 0x9d},
    {0x0c, 0x44, 0x44, 0xb5, 0x9d},
    {0x09, 0x45, 0x04, 0xf5, 0x9d},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0xb5, 0x9d},
    {0x14, 0x42, 0x44, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0xf5, 0x9d},
    {0x0e, 0x44, 0x44, 0xb5, 0x9d},
    {0x1c, 0x42, 0x44, 0xf5, 0x9d},
    {0x04, 0x47, 0x04, 0xb5, 0x9d},
    {0x02, 0x47, 0x04, 0xb5, 0x9d},
    {0x07, 0x47, 0x04, 0xb5, 0x9d},
    {0x17, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x44, 0xb5, 0x9d},
    {0xce, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0xf5, 0x9d},
    {0x08, 0x45, 0x04, 0xf5, 0x9d},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x44, 0xb5, 0x9d},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x44, 0xb5, 0x9d},
    {0xd6, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0xb5, 0x9d},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0xf5, 0x9d},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0xf5, 0x9d},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x44, 0xf5, 0x9d},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0xf5, 0x9d},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x03, 0xb5, 0xee},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x03, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x03, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x03, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x0d, 0x03, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x03, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x03, 0x6e},
    {0x02, 0x43, 0x0d, 0x03, 0x6e},
    {0x07, 0x43, 0x0d, 0x03, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0xb5, 0x7d},
    {0x0b, 0x43, 0x01, 0xf5, 0x7d},
    {0x05, 0x41, 0x01, 0xb5, 0x7d},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0xf5, 0x7d},
    {0xc7, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x01, 0xb5, 0x7d},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0xb5, 0x7d},
    {0x02, 0x41, 0x01, 0xb5, 0x7d},
    {0x07, 0x41, 0x01, 0xb5, 0x7d},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x03, 0x6e},
    {0xd7, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0d, 0x03, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0d, 0x03, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0xf5, 0x7d},
    {0xc3, 0x4d, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x0d, 0x03, 0x6e},
    {0x02, 0x42, 0x0d, 0x03, 0x6e},
    {0x07, 0x42, 0x0d, 0x03, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x41, 0x0a, 0xf5, 0x8d},
    {0x05, 0x46, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x43, 0x4a, 0xb5, 0x8d},
    {0x09, 0x41, 0x0a, 0xf5, 0x8d},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0xb5, 0x8d},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0xb5, 0x8d},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0xb5, 0x8d},
    {0x02, 0x46, 0x0a, 0xb5, 0x8d},
    {0x07, 0x46, 0x0a, 0xb5, 0x8d},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0xb5, 0x8d},
    {0xcf, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0xf5, 0x8d},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0xb5, 0x7d},
    {0x0b, 0x42, 0x01, 0xf5, 0x7d},
    {0x05, 0x44, 0x01, 0xb5, 0x7d},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0xf5, 0x7d},
    {0xcb, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x01, 0xb5, 0x7d},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc5, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x01, 0xb5, 0x7d},
    {0x02, 0x44, 0x01, 0xb5, 0x7d},
    {0x07, 0x44, 0x01, 0xb5, 0x7d},
    {0x0d, 0x43, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x41, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x01, 0xf5, 0x7d},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0xf5, 0x7d},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0xf5, 0x9d},
    {0x05, 0x49, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0xb5, 0x9d},
    {0x09, 0x46, 0x02, 0xf5, 0x9d},
    {0xda, 0x52, 0xb5, 0x40, 0x0d},
    {0x06, 0x49, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0xf5, 0x9d},
    {0xc2, 0x5a, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0xf5, 0x9d},
    {0x0e, 0x41, 0x42, 0xb5, 0x9d},
    {0x1c, 0x43, 0x42, 0xf5, 0x9d},
    {0x04, 0x49, 0x06, 0xb5, 0xae},
    {0x02, 0x49, 0x06, 0xb5, 0xae},
    {0x07, 0x49, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x12, 0xb5, 0x6d},
    {0x1b, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x12, 0xb5, 0x6d},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0xb5, 0x9d},
    {0xcd, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x12, 0xb5, 0x6d},
    {0x13, 0x43, 0x42, 0xf5, 0x9d},
    {0x08, 0x46, 0x02, 0xf5, 0x9d},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x12, 0xb5, 0x6d},
    {0x02, 0x43, 0x12, 0xb5, 0x6d},
    {0x07, 0x43, 0x12, 0xb5, 0x6d},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x03, 0x7e},
    {0x0b, 0x43, 0x08, 0x43, 0x7e},
    {0x05, 0x41, 0x08, 0x03, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x43, 0x7e},
    {0xc8, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x41, 0x08, 0x03, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0xb5, 0x9d},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x03, 0x7e},
    {0x02, 0x41, 0x08, 0x03, 0x7e},
    {0x07, 0x41, 0x08, 0x03, 0x7e},
    {0x0d, 0x41, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x12, 0xb5, 0x6d},
    {0xd9, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x12, 0xb5, 0x6d},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0xb5, 0x9d},
    {0xd5, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x12, 0xb5, 0x6d},
    {0x01, 0x41, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x08, 0x43, 0x7e},
    {0xc3, 0x52, 0xb5, 0x40, 0x0d},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x12, 0xb5, 0x6d},
    {0x02, 0x42, 0x12, 0xb5, 0x6d},
    {0x07, 0x42, 0x12, 0xb5, 0x6d},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0b, 0x44, 0x0a, 0xf5, 0x8d},
    {0x05, 0x45, 0x0a, 0xb5, 0x8d},
    {0x0c, 0x42, 0x4a, 0xb5, 0x8d},
    {0x09, 0x44, 0x0a, 0xf5, 0x8d},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0xb5, 0x8d},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0xb5, 0x8d},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0xb5, 0x8d},
    {0x02, 0x45, 0x0a, 0xb5, 0x8d},
    {0x07, 0x45, 0x0a, 0xb5, 0x8d},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0xb5, 0x8d},
    {0xd1, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0xf5, 0x8d},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0xf5, 0x8d},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x08, 0x03, 0x7e},
    {0x0b, 0x42, 0x08, 0x43, 0x7e},
    {0x05, 0x44, 0x08, 0x03, 0x7e},
    {0x1a, 0x43, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x08, 0x43, 0x7e},
    {0xca, 0x4a, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x08, 0x03, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc6, 0x4a, 0xb5, 0x40, 0x0d},
    {0x04, 0x44, 0x08, 0x03, 0x7e},
    {0x02, 0x44, 0x08, 0x03, 0x7e},
    {0x07, 0x44, 0x08, 0x03, 0x7e},
    {0x0d, 0x42, 0x4a, 0xb5, 0x8d},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x4a, 0xb5, 0x8d},
    {0xc4, 0x48, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0xb5, 0x8d},
    {0x08, 0x42, 0x08, 0x43, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x43, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x46, 0xb5, 0xae},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x55, 0xb5, 0x40, 0x0d},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x46, 0xf5, 0xae},
    {0xc2, 0x66, 0xb5, 0x40, 0x0d},
    {0x18, 0x41, 0x46, 0xf5, 0xae},
    {0x0e, 0x46, 0x46, 0xb5, 0xae},
    {0x1c, 0x41, 0x46, 0xf5, 0xae},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0xb5, 0x6d},
    {0x1b, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0xb5, 0x6d},
    {0x67, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x46, 0x46, 0xb5, 0xae},
    {0xc9, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0xb5, 0x6d},
    {0x13, 0x41, 0x46, 0xf5, 0xae},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x66, 0xb5, 0x40, 0x0d},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x15, 0xb5, 0x6d},
    {0x02, 0x43, 0x15, 0xb5, 0x6d},
    {0x07, 0x43, 0x15, 0xb5, 0x6d},
    {0x6d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0xc2, 0x46, 0xb5, 0x0e},
    {0x73, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x46, 0x46, 0xb5, 0xae},
    {0x7f, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0xb5, 0x6d},
    {0xd8, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x15, 0xb5, 0x6d},
    {0x6b, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x46, 0x46, 0xb5, 0xae},
    {0xd4, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x15, 0xb5, 0x6d},
    {0x01, 0x46, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0xb5, 0x40, 0x0d},
    {0xc1, 0xc2, 0x46, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0xb5, 0x6d},
    {0x02, 0x42, 0x15, 0xb5, 0x6d},
    {0x07, 0x42, 0x15, 0xb5, 0x6d},
    {0x5d, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x03, 0x8e},
    {0x0b, 0x41, 0x04, 0x43, 0x8e},
    {0x05, 0x46, 0x04, 0x03, 0x8e},
    {0x0c, 0x43, 0x44, 0x03, 0x8e},
    {0x09, 0x41, 0x04, 0x43, 0x8e},
    {0xda, 0x51, 0x03, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x03, 0x8e},
    {0x61, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x59, 0x03, 0xb5, 0xee},
    {0x71, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x03, 0x8e},
    {0x7d, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x03, 0x8e},
    {0x02, 0x46, 0x04, 0x03, 0x8e},
    {0x07, 0x46, 0x04, 0x03, 0x8e},
    {0x6f, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x03, 0x6e},
    {0x7b, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x03, 0x6e},
    {0x69, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x03, 0x8e},
    {0xd0, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x11, 0x03, 0x6e},
    {0x5f, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x43, 0x8e},
    {0x79, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x59, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x11, 0x03, 0x6e},
    {0x02, 0x43, 0x11, 0x03, 0x6e},
    {0x07, 0x43, 0x11, 0x03, 0x6e},
    {0x16, 0x41, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x03, 0x8e},
    {0xc5, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x11, 0x03, 0x6e},
    {0x12, 0x41, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x03, 0x6e},
    {0x15, 0x41, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x03, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x03, 0x6e},
    {0x01, 0x43, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x03, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x03, 0x6e},
    {0x02, 0x42, 0x11, 0x03, 0x6e},
    {0x07, 0x42, 0x11, 0x03, 0x6e},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x02, 0xb5, 0x9d},
    {0x0b, 0x45, 0x02, 0xf5, 0x9d},
    {0x05, 0x47, 0x02, 0xb5, 0x9d},
    {0x0c, 0x44, 0x42, 0xb5, 0x9d},
    {0x09, 0x45, 0x02, 0xf5, 0x9d},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0xb5, 0x9d},
    {0x14, 0x42, 0x42, 0xf5, 0x9d},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0xf5, 0x9d},
    {0x0e, 0x44, 0x42, 0xb5, 0x9d},
    {0x1c, 0x42, 0x42, 0xf5, 0x9d},
    {0x04, 0x47, 0x02, 0xb5, 0x9d},
    {0x02, 0x47, 0x02, 0xb5, 0x9d},
    {0x07, 0x47, 0x02, 0xb5, 0x9d},
    {0x17, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0xb5, 0x9d},
    {0xce, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0xf5, 0x9d},
    {0x08, 0x45, 0x02, 0xf5, 0x9d},
    {0x78, 0x03, 0x06, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0xf5, 0x9d},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0xb5, 0x9d},
    {0x40, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0xb5, 0x9d},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0xb5, 0x9d},
    {0xd6, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0xb5, 0x9d},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x03, 0x8e},
    {0x0b, 0x44, 0x04, 0x43, 0x8e},
    {0x05, 0x45, 0x04, 0x03, 0x8e},
    {0x0c, 0x42, 0x44, 0x03, 0x8e},
    {0x09, 0x44, 0x04, 0x43, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x03, 0x8e},
    {0x62, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x03, 0x8e},
    {0x7e, 0x03, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x03, 0x8e},
    {0x02, 0x45, 0x04, 0x03, 0x8e},
    {0x07, 0x45, 0x04, 0x03, 0x8e},
    {0x70, 0x03, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x03, 0x8e},
    {0xd2, 0x42, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x43, 0x8e},
    {0x7a, 0x03, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x43, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0xf5, 0x9d},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0xf5, 0x9d},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0xf5, 0x9d},
    {0x0f, 0x42, 0x44, 0x03, 0x8e},
    {0xc6, 0x44, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x03, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0xf5, 0x9d},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0xf5, 0x9d},
    {0x11, 0x42, 0x44, 0x03, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x03, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x03, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x01, 0x03, 0x6e},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x01, 0x03, 0x6e},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0xc9, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x03, 0x6e},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x03, 0x6e},
    {0x02, 0x43, 0x01, 0x03, 0x6e},
    {0x07, 0x43, 0x01, 0x03, 0x6e},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0a, 0x03, 0x7e},
    {0x0b, 0x43, 0x0a, 0x43, 0x7e},
    {0x05, 0x41, 0x0a, 0x03, 0x7e},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0a, 0x43, 0x7e},
    {0xc7, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x03, 0x7e},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0a, 0x03, 0x7e},
    {0x02, 0x41, 0x0a, 0x03, 0x7e},
    {0x07, 0x41, 0x0a, 0x03, 0x7e},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x01, 0x03, 0x6e},
    {0xd7, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x01, 0x03, 0x6e},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x01, 0x03, 0x6e},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x0a, 0x43, 0x7e},
    {0xc3, 0x41, 0x03, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x01, 0x03, 0x6e},
    {0x02, 0x42, 0x01, 0x03, 0x6e},
    {0x07, 0x42, 0x01, 0x03, 0x6e},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x02, 0x03, 0x8e},
    {0x0b, 0x41, 0x02, 0x43, 0x8e},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x0c, 0x43, 0x42, 0x03, 0x8e},
    {0x09, 0x41, 0x02, 0x43, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x52, 0x03, 0xb5, 0xee},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x42, 0x03, 0x8e},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x02, 0x03, 0x8e},
    {0x02, 0x46, 0x02, 0x03, 0x8e},
    {0x07, 0x46, 0x02, 0x03, 0x8e},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x42, 0x03, 0x8e},
    {0xcf, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x02, 0x43, 0x8e},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x52, 0x03, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0a, 0x03, 0x7e},
    {0x0b, 0x42, 0x0a, 0x43, 0x7e},
    {0x05, 0x44, 0x0a, 0x03, 0x7e},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0a, 0x43, 0x7e},
    {0xcb, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x0a, 0x03, 0x7e},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x42, 0x03, 0x8e},
    {0xc5, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x03, 0x7e},
    {0x02, 0x44, 0x0a, 0x03, 0x7e},
    {0x07, 0x44, 0x0a, 0x03, 0x7e},
    {0x0d, 0x43, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x42, 0x03, 0x8e},
    {0xc4, 0x4a, 0x03, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x0a, 0x43, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0a, 0x43, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x06, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0xf5, 0x9d},
    {0x05, 0x48, 0x06, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0xb5, 0x9d},
    {0x09, 0x46, 0x07, 0xf5, 0x9d},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x06, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0xf5, 0x9d},
    {0xc2, 0x55, 0x03, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0xf5, 0x9d},
    {0x0e, 0x41, 0x47, 0xb5, 0x9d},
    {0x1c, 0x43, 0x47, 0xf5, 0x9d},
    {0x04, 0x48, 0x06, 0xb5, 0xae},
    {0x02, 0x48, 0x06, 0xb5, 0xae},
    {0x07, 0x48, 0x06, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x47, 0xb5, 0x9d},
    {0xcd, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0xf5, 0x9d},
    {0x08, 0x46, 0x07, 0xf5, 0x9d},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x55, 0x03, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x47, 0xb5, 0x9d},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x47, 0xb5, 0x9d},
    {0xd5, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x02, 0x03, 0x8e},
    {0x0b, 0x44, 0x02, 0x43, 0x8e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x0c, 0x42, 0x42, 0x03, 0x8e},
    {0x09, 0x44, 0x02, 0x43, 0x8e},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x42, 0x03, 0x8e},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x02, 0x03, 0x8e},
    {0x02, 0x45, 0x02, 0x03, 0x8e},
    {0x07, 0x45, 0x02, 0x03, 0x8e},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x42, 0x03, 0x8e},
    {0xd1, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x02, 0x43, 0x8e},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x43, 0x8e},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x42, 0x03, 0x8e},
    {0xc6, 0x42, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x03, 0x8e},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x42, 0x03, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0x42, 0x03, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x06, 0xf5, 0xae},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x46, 0xb5, 0xae},
    {0x09, 0x47, 0x06, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x46, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x46, 0xf5, 0xae},
    {0x0e, 0x45, 0x46, 0xb5, 0xae},
    {0x1c, 0x44, 0x46, 0xf5, 0xae},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x45, 0x46, 0xb5, 0xae},
    {0xc9, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x46, 0xf5, 0xae},
    {0x08, 0x47, 0x06, 0xf5, 0xae},
    {0x77, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x06, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x45, 0x46, 0xb5, 0xae},
    {0x7f, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x45, 0x46, 0xb5, 0xae},
    {0xd4, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x46, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x03, 0x8e},
    {0x0b, 0x41, 0x07, 0x43, 0x8e},
    {0x05, 0x46, 0x07, 0x03, 0x8e},
    {0x0c, 0x43, 0x47, 0x03, 0x8e},
    {0x09, 0x41, 0x07, 0x43, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x03, 0x8e},
    {0x61, 0x02, 0x06, 0xb5, 0xae},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x03, 0x8e},
    {0x7d, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x03, 0x8e},
    {0x02, 0x46, 0x07, 0x03, 0x8e},
    {0x07, 0x46, 0x07, 0x03, 0x8e},
    {0x6f, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x03, 0x8e},
    {0xd0, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x43, 0x8e},
    {0x79, 0x02, 0x06, 0xb5, 0xae},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x46, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x46, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0xc1, 0x46, 0xb5, 0x0e},
    {0x19, 0x44, 0x46, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x03, 0x8e},
    {0xc5, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x46, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x46, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x03, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x46, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0xb5, 0x9d},
    {0x0b, 0x45, 0x07, 0xf5, 0x9d},
    {0x05, 0x47, 0x07, 0xb5, 0x9d},
    {0x0c, 0x44, 0x47, 0xb5, 0x9d},
    {0x09, 0x45, 0x07, 0xf5, 0x9d},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0xb5, 0x9d},
    {0x14, 0x42, 0x47, 0xf5, 0x9d},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0xf5, 0x9d},
    {0x0e, 0x44, 0x47, 0xb5, 0x9d},
    {0x1c, 0x42, 0x47, 0xf5, 0x9d},
    {0x04, 0x47, 0x07, 0xb5, 0x9d},
    {0x02, 0x47, 0x07, 0xb5, 0x9d},
    {0x07, 0x47, 0x07, 0xb5, 0x9d},
    {0x17, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0xb5, 0x9d},
    {0xce, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0xf5, 0x9d},
    {0x08, 0x45, 0x07, 0xf5, 0x9d},
    {0x78, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0xf5, 0x9d},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x06, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x06, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0xb5, 0x9d},
    {0x40, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0xb5, 0x9d},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0xb5, 0x40, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x06, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0xb5, 0x9d},
    {0xd6, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0xb5, 0x9d},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x03, 0x8e},
    {0x0b, 0x44, 0x07, 0x43, 0x8e},
    {0x05, 0x45, 0x07, 0x03, 0x8e},
    {0x0c, 0x42, 0x47, 0x03, 0x8e},
    {0x09, 0x44, 0x07, 0x43, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x03, 0x8e},
    {0x62, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x06, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x03, 0x8e},
    {0x7e, 0x02, 0x06, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x03, 0x8e},
    {0x02, 0x45, 0x07, 0x03, 0x8e},
    {0x07, 0x45, 0x07, 0x03, 0x8e},
    {0x70, 0x02, 0x06, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x06, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x06, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x03, 0x8e},
    {0xd2, 0x47, 0xb5, 0x40, 0x0d},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x06, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x43, 0x8e},
    {0x7a, 0x02, 0x06, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x07, 0x43, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0xf5, 0x9d},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0xf5, 0x9d},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x03, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x06, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x47, 0xf5, 0x9d},
    {0x0f, 0x42, 0x47, 0x03, 0x8e},
    {0xc6, 0x47, 0x03, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x03, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0xf5, 0x9d},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0xf5, 0x9d},
    {0x11, 0x42, 0x47, 0x03, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x03, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0e},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf2, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf2, 0x00, 0x40, 0x05},
    {0x9a, 0xb5, 0x00, 0x00, 0x06},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0xf5, 0x40, 0x40, 0x07},
    {0x82, 0xb2, 0x00, 0x00, 0x05},
    {0x18, 0xf5, 0x40, 0x40, 0x07},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0xf5, 0x40, 0x40, 0x07},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x43, 0xb5, 0x00, 0x66},
    {0x1b, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x43, 0xb5, 0x00, 0x66},
    {0x67, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0xb5, 0x00, 0x66},
    {0x13, 0xf5, 0x40, 0x40, 0x07},
    {0x08, 0xf2, 0x00, 0x40, 0x05},
    {0x77, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0xb2, 0x00, 0x00, 0x05},
    {0x0a, 0xf2, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0xb5, 0x00, 0x66},
    {0x02, 0x43, 0xb5, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x00, 0x66},
    {0x6d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x1e, 0xb5, 0x7f},
    {0x0b, 0x43, 0x1e, 0xf5, 0x7f},
    {0x05, 0x41, 0x1e, 0xb5, 0x7f},
    {0x75, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x1e, 0xf5, 0x7f},
    {0xc7, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x1e, 0xb5, 0x7f},
    {0x63, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x03, 0xb5, 0x40, 0x09},
    {0x73, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x1e, 0xb5, 0x7f},
    {0x02, 0x41, 0x1e, 0xb5, 0x7f},
    {0x07, 0x41, 0x1e, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0xb5, 0x00, 0x66},
    {0xd7, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0xb5, 0x00, 0x66},
    {0x6b, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0xd3, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0xb5, 0x00, 0x66},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x1e, 0xf5, 0x7f},
    {0x83, 0xb5, 0x00, 0x00, 0x06},
    {0xc1, 0x03, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x1e, 0xf5, 0x7f},
    {0x04, 0x42, 0xb5, 0x00, 0x66},
    {0x02, 0x42, 0xb5, 0x00, 0x66},
    {0x07, 0x42, 0xb5, 0x00, 0x66},
    {0x5d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x46, 0x16, 0xb5, 0x8f},
    {0x0b, 0x41, 0x16, 0xf5, 0x8f},
    {0x05, 0x46, 0x16, 0xb5, 0x8f},
    {0x0c, 0x43, 0x56, 0xb5, 0x8f},
    {0x09, 0x41, 0x16, 0xf5, 0x8f},
    {0xda, 0x03, 0x47, 0xb5, 0xff},
    {0x06, 0x46, 0x16, 0xb5, 0x8f},
    {0x61, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x0b, 0x47, 0xb5, 0xff},
    {0x71, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x43, 0x56, 0xb5, 0x8f},
    {0x7d, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x46, 0x16, 0xb5, 0x8f},
    {0x02, 0x46, 0x16, 0xb5, 0x8f},
    {0x07, 0x46, 0x16, 0xb5, 0x8f},
    {0x6f, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x03, 0x07, 0x6f},
    {0x7b, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x03, 0x07, 0x6f},
    {0x69, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x43, 0x56, 0xb5, 0x8f},
    {0xcf, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x03, 0x07, 0x6f},
    {0x5f, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x41, 0x16, 0xf5, 0x8f},
    {0x79, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0b, 0x47, 0xb5, 0xff},
    {0x0a, 0x41, 0x16, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x07, 0x6f},
    {0x02, 0x43, 0x03, 0x07, 0x6f},
    {0x07, 0x43, 0x03, 0x07, 0x6f},
    {0x16, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x44, 0x1e, 0xb5, 0x7f},
    {0x0b, 0x42, 0x1e, 0xf5, 0x7f},
    {0x05, 0x44, 0x1e, 0xb5, 0x7f},
    {0x1a, 0xf5, 0x40, 0x40, 0x07},
    {0x09, 0x42, 0x1e, 0xf5, 0x7f},
    {0xcb, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x1e, 0xb5, 0x7f},
    {0x65, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x05, 0xb5, 0x40, 0x09},
    {0x19, 0xf5, 0x40, 0x40, 0x07},
    {0x0f, 0x43, 0x56, 0xb5, 0x8f},
    {0xc5, 0x56, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x1e, 0xb5, 0x7f},
    {0x02, 0x44, 0x1e, 0xb5, 0x7f},
    {0x07, 0x44, 0x1e, 0xb5, 0x7f},
    {0x0d, 0x43, 0x56, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x07, 0x6f},
    {0x12, 0xf5, 0x40, 0x40, 0x07},
    {0x05, 0x42, 0x03, 0x07, 0x6f},
    {0x15, 0xf5, 0x40, 0x40, 0x07},
    {0x11, 0x43, 0x56, 0xb5, 0x8f},
    {0xc4, 0x5e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x07, 0x6f},
    {0x01, 0x43, 0x56, 0xb5, 0x8f},
    {0x08, 0x42, 0x1e, 0xf5, 0x7f},
    {0xc3, 0x03, 0x47, 0xb5, 0xff},
    {0xc1, 0x05, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x1e, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x07, 0x6f},
    {0x02, 0x42, 0x03, 0x07, 0x6f},
    {0x07, 0x42, 0x03, 0x07, 0x6f},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x0d, 0xf5, 0x9f},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x4d, 0xb5, 0x9f},
    {0x09, 0x46, 0x0d, 0xf5, 0x9f},
    {0xda, 0x0b, 0x45, 0xf5, 0xff},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x4d, 0xf5, 0x9f},
    {0xc2, 0x0c, 0x45, 0xf5, 0xff},
    {0x18, 0x43, 0x4d, 0xf5, 0x9f},
    {0x0e, 0x41, 0x4d, 0xb5, 0x9f},
    {0x1c, 0x43, 0x4d, 0xf5, 0x9f},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x4d, 0xf5, 0x9f},
    {0x03, 0x43, 0x0b, 0x05, 0x6f},
    {0x1b, 0x43, 0x4d, 0xf5, 0x9f},
    {0x05, 0x43, 0x0b, 0x05, 0x6f},
    {0x68, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x41, 0x4d, 0xb5, 0x9f},
    {0xcd, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0b, 0x05, 0x6f},
    {0x13, 0x43, 0x4d, 0xf5, 0x9f},
    {0x08, 0x46, 0x0d, 0xf5, 0x9f},
    {0x78, 0xb5, 0x00, 0x00, 0x08},
    {0xc1, 0x0c, 0x45, 0xf5, 0xff},
    {0x0a, 0x46, 0x0d, 0xf5, 0x9f},
    {0x04, 0x43, 0x0b, 0x05, 0x6f},
    {0x02, 0x43, 0x0b, 0x05, 0x6f},
    {0x07, 0x43, 0x0b, 0x05, 0x6f},
    {0x6e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x41, 0x03, 0x05, 0x7f},
    {0x0b, 0x43, 0x03, 0x45, 0x7f},
    {0x05, 0x41, 0x03, 0x05, 0x7f},
    {0x76, 0xb5, 0x00, 0x00, 0x08},
    {0x09, 0x43, 0x03, 0x45, 0x7f},
    {0xc8, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x03, 0x05, 0x7f},
    {0x64, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x09, 0x47, 0xb5, 0xff},
    {0x74, 0xb5, 0x00, 0x00, 0x08},
    {0x0f, 0x41, 0x4d, 0xb5, 0x9f},
    {0x40, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x41, 0x03, 0x05, 0x7f},
    {0x02, 0x41, 0x03, 0x05, 0x7f},
    {0x07, 0x41, 0x03, 0x05, 0x7f},
    {0x0d, 0x41, 0x4d, 0xb5, 0x9f},
    {0x03, 0x42, 0x0b, 0x05, 0x6f},
    {0xd9, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0b, 0x05, 0x6f},
    {0x6c, 0xb5, 0x00, 0x00, 0x08},
    {0x11, 0x41, 0x4d, 0xb5, 0x9f},
    {0xd5, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0b, 0x05, 0x6f},
    {0x01, 0x41, 0x4d, 0xb5, 0x9f},
    {0x08, 0x43, 0x03, 0x45, 0x7f},
    {0xc3, 0x0b, 0x45, 0xf5, 0xff},
    {0xc1, 0x09, 0x47, 0xb5, 0xff},
    {0x0a, 0x43, 0x03, 0x45, 0x7f},
    {0x04, 0x42, 0x0b, 0x05, 0x6f},
    {0x02, 0x42, 0x0b, 0x05, 0x6f},
    {0x07, 0x42, 0x0b, 0x05, 0x6f},
    {0x5e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x45, 0x16, 0xb5, 0x8f},
    {0x0b, 0x44, 0x16, 0xf5, 0x8f},
    {0x05, 0x45, 0x16, 0xb5, 0x8f},
    {0x0c, 0x42, 0x56, 0xb5, 0x8f},
    {0x09, 0x44, 0x16, 0xf5, 0x8f},
    {0xda, 0x05, 0x47, 0xb5, 0xff},
    {0x06, 0x45, 0x16, 0xb5, 0x8f},
    {0x62, 0xb5, 0x00, 0x00, 0x08},
    {0x82, 0x9a, 0xb5, 0x00, 0x0b},
    {0x72, 0xb5, 0x00, 0x00, 0x08},
    {0x0e, 0x42, 0x56, 0xb5, 0x8f},
    {0x7e, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x45, 0x16, 0xb5, 0x8f},
    {0x02, 0x45, 0x16, 0xb5, 0x8f},
    {0x07, 0x45, 0x16, 0xb5, 0x8f},
    {0x70, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x43, 0x05, 0x07, 0x6f},
    {0x7c, 0xb5, 0x00, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0x07, 0x6f},
    {0x6a, 0xb5, 0x00, 0x00, 0x08},
    {0x10, 0x42, 0x56, 0xb5, 0x8f},
    {0xd1, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x05, 0x07, 0x6f},
    {0x60, 0xb5, 0x00, 0x00, 0x08},
    {0x08, 0x44, 0x16, 0xf5, 0x8f},
    {0x7a, 0xb5, 0x00, 0x00, 0x08},
    {0x81, 0x9a, 0xb5, 0x00, 0x0b},
    {0x0a, 0x44, 0x16, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x07, 0x6f},
    {0x02, 0x43, 0x05, 0x07, 0x6f},
    {0x07, 0x43, 0x05, 0x07, 0x6f},
    {0x16, 0x43, 0x4d, 0xf5, 0x9f},
    {0x03, 0x44, 0x03, 0x05, 0x7f},
    {0x0b, 0x42, 0x03, 0x45, 0x7f},
    {0x05, 0x44, 0x03, 0x05, 0x7f},
    {0x1a, 0x43, 0x4d, 0xf5, 0x9f},
    {0x09, 0x42, 0x03, 0x45, 0x7f},
    {0xca, 0x56, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x03, 0x05, 0x7f},
    {0x66, 0xb5, 0x00, 0x00, 0x08},
    {0xc2, 0x06, 0xb5, 0x40, 0x09},
    {0x19, 0x43, 0x4d, 0xf5, 0x9f},
    {0x0f, 0x42, 0x56, 0xb5, 0x8f},
    {0xc6, 0x56, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x03, 0x05, 0x7f},
    {0x02, 0x44, 0x03, 0x05, 0x7f},
    {0x07, 0x44, 0x03, 0x05, 0x7f},
    {0x0d, 0x42, 0x56, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x07, 0x6f},
    {0x12, 0x43, 0x4d, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x07, 0x6f},
    {0x15, 0x43, 0x4d, 0xf5, 0x9f},
    {0x11, 0x42, 0x56, 0xb5, 0x8f},
    {0xc4, 0x03, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x05, 0x07, 0x6f},
    {0x01, 0x42, 0x56, 0xb5, 0x8f},
    {0x08, 0x42, 0x03, 0x45, 0x7f},
    {0xc3, 0x05, 0x47, 0xb5, 0xff},
    {0xc1, 0x06, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x03, 0x45, 0x7f},
    {0x04, 0x42, 0x05, 0x07, 0x6f},
    {0x02, 0x42, 0x05, 0x07, 0x6f},
    {0x07, 0x42, 0x05, 0x07, 0x6f},
    {0xf4, 0x4d, 0xf5, 0x40, 0x0f},
    {0x03, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0b, 0x49, 0xb5, 0x40, 0xbb},
    {0x05, 0x4a, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0xb5, 0x40, 0xbb},
    {0xda, 0x4c, 0x04, 0xb5, 0xff},
    {0x06, 0x4a, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x54, 0x04, 0xb5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0xb5, 0x00, 0xbb},
    {0x02, 0x4a, 0xb5, 0x00, 0xbb},
    {0x07, 0x4a, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x0c, 0x04, 0x6f},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x0c, 0x04, 0x6f},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0xc9, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x0c, 0x04, 0x6f},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x54, 0x04, 0xb5, 0xff},
    {0x0a, 0x49, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x0c, 0x04, 0x6f},
    {0x02, 0x43, 0x0c, 0x04, 0x6f},
    {0x07, 0x43, 0x0c, 0x04, 0x6f},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x0b, 0x04, 0x7f},
    {0x0b, 0x43, 0x0b, 0x44, 0x7f},
    {0x05, 0x41, 0x0b, 0x04, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x0b, 0x44, 0x7f},
    {0xc7, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x0b, 0x04, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x0b, 0x04, 0x7f},
    {0x02, 0x41, 0x0b, 0x04, 0x7f},
    {0x07, 0x41, 0x0b, 0x04, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x0c, 0x04, 0x6f},
    {0xd8, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0c, 0x04, 0x6f},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0xd4, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0c, 0x04, 0x6f},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x0b, 0x44, 0x7f},
    {0xc3, 0x4c, 0x04, 0xb5, 0xff},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x0b, 0x44, 0x7f},
    {0x04, 0x42, 0x0c, 0x04, 0x6f},
    {0x02, 0x42, 0x0c, 0x04, 0x6f},
    {0x07, 0x42, 0x0c, 0x04, 0x6f},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x03, 0x04, 0x8f},
    {0x0b, 0x41, 0x03, 0x44, 0x8f},
    {0x05, 0x46, 0x03, 0x04, 0x8f},
    {0x0c, 0x43, 0x43, 0x04, 0x8f},
    {0x09, 0x41, 0x03, 0x44, 0x8f},
    {0xda, 0x09, 0x45, 0xf5, 0xff},
    {0x06, 0x46, 0x03, 0x04, 0x8f},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x58, 0x04, 0xb5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x43, 0x04, 0x8f},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x03, 0x04, 0x8f},
    {0x02, 0x46, 0x03, 0x04, 0x8f},
    {0x07, 0x46, 0x03, 0x04, 0x8f},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x05, 0x6f},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x05, 0x6f},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x43, 0x04, 0x8f},
    {0xd0, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x09, 0x05, 0x6f},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x03, 0x44, 0x8f},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x58, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x03, 0x44, 0x8f},
    {0x04, 0x43, 0x09, 0x05, 0x6f},
    {0x02, 0x43, 0x09, 0x05, 0x6f},
    {0x07, 0x43, 0x09, 0x05, 0x6f},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x0b, 0x04, 0x7f},
    {0x0b, 0x42, 0x0b, 0x44, 0x7f},
    {0x05, 0x44, 0x0b, 0x04, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x0b, 0x44, 0x7f},
    {0xcc, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x0b, 0x04, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x45, 0xf5, 0xff},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x43, 0x04, 0x8f},
    {0xc5, 0x43, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x0b, 0x04, 0x7f},
    {0x02, 0x44, 0x0b, 0x04, 0x7f},
    {0x07, 0x44, 0x0b, 0x04, 0x7f},
    {0x0d, 0x43, 0x43, 0x04, 0x8f},
    {0x03, 0x42, 0x09, 0x05, 0x6f},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x05, 0x6f},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x43, 0x04, 0x8f},
    {0xc4, 0x4b, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x09, 0x05, 0x6f},
    {0x01, 0x43, 0x43, 0x04, 0x8f},
    {0x08, 0x42, 0x0b, 0x44, 0x7f},
    {0xc3, 0x09, 0x45, 0xf5, 0xff},
    {0xc1, 0x0e, 0x45, 0xf5, 0xff},
    {0x0a, 0x42, 0x0b, 0x44, 0x7f},
    {0x04, 0x42, 0x09, 0x05, 0x6f},
    {0x02, 0x42, 0x09, 0x05, 0x6f},
    {0x07, 0x42, 0x09, 0x05, 0x6f},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0x0d, 0xb5, 0x9f},
    {0x0b, 0x45, 0x0d, 0xf5, 0x9f},
    {0x05, 0x47, 0x0d, 0xb5, 0x9f},
    {0x0c, 0x44, 0x4d, 0xb5, 0x9f},
    {0x09, 0x45, 0x0d, 0xf5, 0x9f},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0x0d, 0xb5, 0x9f},
    {0x14, 0x42, 0x4d, 0xf5, 0x9f},
    {0xc2, 0x5c, 0x04, 0xb5, 0xff},
    {0x18, 0x42, 0x4d, 0xf5, 0x9f},
    {0x0e, 0x44, 0x4d, 0xb5, 0x9f},
    {0x1c, 0x42, 0x4d, 0xf5, 0x9f},
    {0x04, 0x47, 0x0d, 0xb5, 0x9f},
    {0x02, 0x47, 0x0d, 0xb5, 0x9f},
    {0x07, 0x47, 0x0d, 0xb5, 0x9f},
    {0x17, 0x42, 0x4d, 0xf5, 0x9f},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0x4d, 0xf5, 0x9f},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x4d, 0xb5, 0x9f},
    {0xce, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0x4d, 0xf5, 0x9f},
    {0x08, 0x45, 0x0d, 0xf5, 0x9f},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5c, 0x04, 0xb5, 0xff},
    {0x0a, 0x45, 0x0d, 0xf5, 0x9f},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x05, 0x7f},
    {0x0b, 0x43, 0x05, 0x45, 0x7f},
    {0x05, 0x41, 0x05, 0x05, 0x7f},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x45, 0x7f},
    {0xc8, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x05, 0x05, 0x7f},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0xb5, 0x40, 0x09},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x4d, 0xb5, 0x9f},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x05, 0x7f},
    {0x02, 0x41, 0x05, 0x05, 0x7f},
    {0x07, 0x41, 0x05, 0x05, 0x7f},
    {0x0d, 0x44, 0x4d, 0xb5, 0x9f},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0xdb, 0x4d, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x4d, 0xb5, 0x9f},
    {0xd6, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0x4d, 0xb5, 0x9f},
    {0x08, 0x43, 0x05, 0x45, 0x7f},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0xb5, 0x40, 0x09},
    {0x0a, 0x43, 0x05, 0x45, 0x7f},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x03, 0x04, 0x8f},
    {0x0b, 0x44, 0x03, 0x44, 0x8f},
    {0x05, 0x45, 0x03, 0x04, 0x8f},
    {0x0c, 0x42, 0x43, 0x04, 0x8f},
    {0x09, 0x44, 0x03, 0x44, 0x8f},
    {0xda, 0x06, 0x47, 0xb5, 0xff},
    {0x06, 0x45, 0x03, 0x04, 0x8f},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0xb5, 0x40, 0x09},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x43, 0x04, 0x8f},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x03, 0x04, 0x8f},
    {0x02, 0x45, 0x03, 0x04, 0x8f},
    {0x07, 0x45, 0x03, 0x04, 0x8f},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x07, 0x6f},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x07, 0x6f},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x43, 0x04, 0x8f},
    {0xd2, 0x4d, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x06, 0x07, 0x6f},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x03, 0x44, 0x8f},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0xb5, 0x40, 0x09},
    {0x0a, 0x44, 0x03, 0x44, 0x8f},
    {0x04, 0x43, 0x06, 0x07, 0x6f},
    {0x02, 0x43, 0x06, 0x07, 0x6f},
    {0x07, 0x43, 0x06, 0x07, 0x6f},
    {0x16, 0x42, 0x4d, 0xf5, 0x9f},
    {0x03, 0x44, 0x05, 0x05, 0x7f},
    {0x0b, 0x42, 0x05, 0x45, 0x7f},
    {0x05, 0x44, 0x05, 0x05, 0x7f},
    {0x1a, 0x42, 0x4d, 0xf5, 0x9f},
    {0x09, 0x42, 0x05, 0x45, 0x7f},
    {0xca, 0x43, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x05, 0x05, 0x7f},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0xb5, 0x40, 0x09},
    {0x19, 0x42, 0x4d, 0xf5, 0x9f},
    {0x0f, 0x42, 0x43, 0x04, 0x8f},
    {0xc6, 0x43, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x05, 0x05, 0x7f},
    {0x02, 0x44, 0x05, 0x05, 0x7f},
    {0x07, 0x44, 0x05, 0x05, 0x7f},
    {0x0d, 0x42, 0x43, 0x04, 0x8f},
    {0x03, 0x42, 0x06, 0x07, 0x6f},
    {0x12, 0x42, 0x4d, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x07, 0x6f},
    {0x15, 0x42, 0x4d, 0xf5, 0x9f},
    {0x11, 0x42, 0x43, 0x04, 0x8f},
    {0xc4, 0x05, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x07, 0x6f},
    {0x01, 0x42, 0x43, 0x04, 0x8f},
    {0x08, 0x42, 0x05, 0x45, 0x7f},
    {0xc3, 0x06, 0x47, 0xb5, 0xff},
    {0xc1, 0x07, 0xb5, 0x40, 0x09},
    {0x0a, 0x42, 0x05, 0x45, 0x7f},
    {0x04, 0x42, 0x06, 0x07, 0x6f},
    {0x02, 0x42, 0x06, 0x07, 0x6f},
    {0x07, 0x42, 0x06, 0x07, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x54, 0x02, 0xf5, 0xff},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0xf5, 0x40, 0xbb},
    {0xc2, 0x57, 0x04, 0xb5, 0xff},
    {0x18, 0x46, 0xf5, 0x40, 0xbb},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0xf5, 0x40, 0xbb},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x14, 0x02, 0x6f},
    {0x1b, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x14, 0x02, 0x6f},
    {0x67, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x14, 0x02, 0x6f},
    {0x13, 0x46, 0xf5, 0x40, 0xbb},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x57, 0x04, 0xb5, 0xff},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x14, 0x02, 0x6f},
    {0x02, 0x43, 0x14, 0x02, 0x6f},
    {0x07, 0x43, 0x14, 0x02, 0x6f},
    {0x6d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x0c, 0x02, 0x7f},
    {0x0b, 0x43, 0x0c, 0x42, 0x7f},
    {0x05, 0x41, 0x0c, 0x02, 0x7f},
    {0x75, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x0c, 0x42, 0x7f},
    {0xc7, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x0c, 0x02, 0x7f},
    {0x63, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x03, 0xf5, 0xbb},
    {0x73, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x0c, 0x02, 0x7f},
    {0x02, 0x41, 0x0c, 0x02, 0x7f},
    {0x07, 0x41, 0x0c, 0x02, 0x7f},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x14, 0x02, 0x6f},
    {0xd7, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x14, 0x02, 0x6f},
    {0x6b, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x14, 0x02, 0x6f},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x0c, 0x42, 0x7f},
    {0xc3, 0x54, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x0c, 0x42, 0x7f},
    {0x04, 0x42, 0x14, 0x02, 0x6f},
    {0x02, 0x42, 0x14, 0x02, 0x6f},
    {0x07, 0x42, 0x14, 0x02, 0x6f},
    {0x5d, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0x0b, 0x02, 0x8f},
    {0x0b, 0x41, 0x0b, 0x42, 0x8f},
    {0x05, 0x46, 0x0b, 0x02, 0x8f},
    {0x0c, 0x43, 0x4b, 0x02, 0x8f},
    {0x09, 0x41, 0x0b, 0x42, 0x8f},
    {0x9a, 0x82, 0xb5, 0x00, 0x0b},
    {0x06, 0x46, 0x0b, 0x02, 0x8f},
    {0x61, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x5b, 0x04, 0xb5, 0xff},
    {0x71, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0x4b, 0x02, 0x8f},
    {0x7d, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0x0b, 0x02, 0x8f},
    {0x02, 0x46, 0x0b, 0x02, 0x8f},
    {0x07, 0x46, 0x0b, 0x02, 0x8f},
    {0x6f, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x82, 0xb5, 0x6b},
    {0x7b, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x82, 0xb5, 0x6b},
    {0x69, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0x4b, 0x02, 0x8f},
    {0xcf, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0xb5, 0x6b},
    {0x5f, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0x0b, 0x42, 0x8f},
    {0x79, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x5b, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x0b, 0x42, 0x8f},
    {0x04, 0x43, 0x82, 0xb5, 0x6b},
    {0x02, 0x43, 0x82, 0xb5, 0x6b},
    {0x07, 0x43, 0x82, 0xb5, 0x6b},
    {0x16, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x0c, 0x02, 0x7f},
    {0x0b, 0x42, 0x0c, 0x42, 0x7f},
    {0x05, 0x44, 0x0c, 0x02, 0x7f},
    {0x1a, 0x46, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x0c, 0x42, 0x7f},
    {0xcb, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0c, 0x02, 0x7f},
    {0x65, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x03, 0xf5, 0xbb},
    {0x19, 0x46, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0x4b, 0x02, 0x8f},
    {0xc5, 0x4b, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x0c, 0x02, 0x7f},
    {0x02, 0x44, 0x0c, 0x02, 0x7f},
    {0x07, 0x44, 0x0c, 0x02, 0x7f},
    {0x0d, 0x43, 0x4b, 0x02, 0x8f},
    {0x03, 0x42, 0x82, 0xb5, 0x6b},
    {0x12, 0x46, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x82, 0xb5, 0x6b},
    {0x15, 0x46, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0x4b, 0x02, 0x8f},
    {0xc4, 0x4c, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x82, 0xb5, 0x6b},
    {0x01, 0x43, 0x4b, 0x02, 0x8f},
    {0x08, 0x42, 0x0c, 0x42, 0x7f},
    {0x83, 0x82, 0xb5, 0x00, 0x0b},
    {0xc1, 0x05, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x0c, 0x42, 0x7f},
    {0x04, 0x42, 0x82, 0xb5, 0x6b},
    {0x02, 0x42, 0x82, 0xb5, 0x6b},
    {0x07, 0x42, 0x82, 0xb5, 0x6b},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x03, 0x42, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x43, 0x02, 0x9f},
    {0x09, 0x46, 0x03, 0x42, 0x9f},
    {0xda, 0x58, 0x02, 0xf5, 0xff},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x43, 0x42, 0x9f},
    {0xc2, 0x67, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x43, 0x42, 0x9f},
    {0x0e, 0x41, 0x43, 0x02, 0x9f},
    {0x1c, 0x43, 0x43, 0x42, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x43, 0x42, 0x9f},
    {0x03, 0x43, 0x18, 0x02, 0x6f},
    {0x1b, 0x43, 0x43, 0x42, 0x9f},
    {0x05, 0x43, 0x18, 0x02, 0x6f},
    {0x68, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x43, 0x02, 0x9f},
    {0xcd, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x18, 0x02, 0x6f},
    {0x13, 0x43, 0x43, 0x42, 0x9f},
    {0x08, 0x46, 0x03, 0x42, 0x9f},
    {0x78, 0x01, 0xb5, 0x00, 0xbb},
    {0xc1, 0x67, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x03, 0x42, 0x9f},
    {0x04, 0x43, 0x18, 0x02, 0x6f},
    {0x02, 0x43, 0x18, 0x02, 0x6f},
    {0x07, 0x43, 0x18, 0x02, 0x6f},
    {0x6e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x09, 0x04, 0x7f},
    {0x0b, 0x43, 0x09, 0x44, 0x7f},
    {0x05, 0x41, 0x09, 0x04, 0x7f},
    {0x76, 0x01, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x09, 0x44, 0x7f},
    {0xc8, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x09, 0x04, 0x7f},
    {0x64, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x10, 0x45, 0xf5, 0xff},
    {0x74, 0x01, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x43, 0x02, 0x9f},
    {0x40, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x09, 0x04, 0x7f},
    {0x02, 0x41, 0x09, 0x04, 0x7f},
    {0x07, 0x41, 0x09, 0x04, 0x7f},
    {0x0d, 0x41, 0x43, 0x02, 0x9f},
    {0x03, 0x42, 0x18, 0x02, 0x6f},
    {0xd9, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x18, 0x02, 0x6f},
    {0x6c, 0x01, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x43, 0x02, 0x9f},
    {0xd5, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x18, 0x02, 0x6f},
    {0x01, 0x41, 0x43, 0x02, 0x9f},
    {0x08, 0x43, 0x09, 0x44, 0x7f},
    {0xc3, 0x58, 0x02, 0xf5, 0xff},
    {0xc1, 0x10, 0x45, 0xf5, 0xff},
    {0x0a, 0x43, 0x09, 0x44, 0x7f},
    {0x04, 0x42, 0x18, 0x02, 0x6f},
    {0x02, 0x42, 0x18, 0x02, 0x6f},
    {0x07, 0x42, 0x18, 0x02, 0x6f},
    {0x5e, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0x0b, 0x02, 0x8f},
    {0x0b, 0x44, 0x0b, 0x42, 0x8f},
    {0x05, 0x45, 0x0b, 0x02, 0x8f},
    {0x0c, 0x42, 0x4b, 0x02, 0x8f},
    {0x09, 0x44, 0x0b, 0x42, 0x8f},
    {0xda, 0x4e, 0x04, 0xb5, 0xff},
    {0x06, 0x45, 0x0b, 0x02, 0x8f},
    {0x62, 0x01, 0xb5, 0x00, 0xbb},
    {0x82, 0x89, 0xb5, 0x00, 0x0d},
    {0x72, 0x01, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0x4b, 0x02, 0x8f},
    {0x7e, 0x01, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0x0b, 0x02, 0x8f},
    {0x02, 0x45, 0x0b, 0x02, 0x8f},
    {0x07, 0x45, 0x0b, 0x02, 0x8f},
    {0x70, 0x01, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x0e, 0x04, 0x6f},
    {0x7c, 0x01, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x0e, 0x04, 0x6f},
    {0x6a, 0x01, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0x4b, 0x02, 0x8f},
    {0xd1, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x0e, 0x04, 0x6f},
    {0x60, 0x01, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0x0b, 0x42, 0x8f},
    {0x7a, 0x01, 0xb5, 0x00, 0xbb},
    {0x81, 0x89, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0b, 0x42, 0x8f},
    {0x04, 0x43, 0x0e, 0x04, 0x6f},
    {0x02, 0x43, 0x0e, 0x04, 0x6f},
    {0x07, 0x43, 0x0e, 0x04, 0x6f},
    {0x16, 0x43, 0x43, 0x42, 0x9f},
    {0x03, 0x44, 0x09, 0x04, 0x7f},
    {0x0b, 0x42, 0x09, 0x44, 0x7f},
    {0x05, 0x44, 0x09, 0x04, 0x7f},
    {0x1a, 0x43, 0x43, 0x42, 0x9f},
    {0x09, 0x42, 0x09, 0x44, 0x7f},
    {0xca, 0x4b, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x09, 0x04, 0x7f},
    {0x66, 0x01, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x03, 0xf5, 0xbb},
    {0x19, 0x43, 0x43, 0x42, 0x9f},
    {0x0f, 0x42, 0x4b, 0x02, 0x8f},
    {0xc6, 0x4b, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x09, 0x04, 0x7f},
    {0x02, 0x44, 0x09, 0x04, 0x7f},
    {0x07, 0x44, 0x09, 0x04, 0x7f},
    {0x0d, 0x42, 0x4b, 0x02, 0x8f},
    {0x03, 0x42, 0x0e, 0x04, 0x6f},
    {0x12, 0x43, 0x43, 0x42, 0x9f},
    {0x05, 0x42, 0x0e, 0x04, 0x6f},
    {0x15, 0x43, 0x43, 0x42, 0x9f},
    {0x11, 0x42, 0x4b, 0x02, 0x8f},
    {0xc4, 0x49, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x0e, 0x04, 0x6f},
    {0x01, 0x42, 0x4b, 0x02, 0x8f},
    {0x08, 0x42, 0x09, 0x44, 0x7f},
    {0xc3, 0x4e, 0x04, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x09, 0x44, 0x7f},
    {0x04, 0x42, 0x0e, 0x04, 0x6f},
    {0x02, 0x42, 0x0e, 0x04, 0x6f},
    {0x07, 0x42, 0x0e, 0x04, 0x6f},
    {0xf4, 0x43, 0x02, 0xf5, 0xff},
    {0x03, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0x4f, 0xb5, 0x00, 0xdd},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x5c, 0x02, 0xf5, 0xff},
    {0x06, 0x4f, 0xb5, 0x00, 0xdd},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x53, 0x04, 0xb5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0x4f, 0xb5, 0x00, 0xdd},
    {0x02, 0x4f, 0xb5, 0x00, 0xdd},
    {0x07, 0x4f, 0xb5, 0x00, 0xdd},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x1c, 0x02, 0x6f},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x1c, 0x02, 0x6f},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x1c, 0x02, 0x6f},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x53, 0x04, 0xb5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x1c, 0x02, 0x6f},
    {0x02, 0x43, 0x1c, 0x02, 0x6f},
    {0x07, 0x43, 0x1c, 0x02, 0x6f},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x43, 0x9a, 0xf5, 0x7d},
    {0x05, 0x41, 0x9a, 0xb5, 0x7d},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc7, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x9a, 0xb5, 0x7d},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x47, 0xb5, 0xff},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x9a, 0xb5, 0x7d},
    {0x02, 0x41, 0x9a, 0xb5, 0x7d},
    {0x07, 0x41, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x1c, 0x02, 0x6f},
    {0xd8, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x1c, 0x02, 0x6f},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x1c, 0x02, 0x6f},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x5c, 0x02, 0xf5, 0xff},
    {0xc1, 0x08, 0x47, 0xb5, 0xff},
    {0x0a, 0x43, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x1c, 0x02, 0x6f},
    {0x02, 0x42, 0x1c, 0x02, 0x6f},
    {0x07, 0x42, 0x1c, 0x02, 0x6f},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x05, 0x04, 0x8f},
    {0x0b, 0x41, 0x05, 0x44, 0x8f},
    {0x05, 0x46, 0x05, 0x04, 0x8f},
    {0x0c, 0x43, 0x45, 0x04, 0x8f},
    {0x09, 0x41, 0x05, 0x44, 0x8f},
    {0xda, 0x04, 0x47, 0xb5, 0xff},
    {0x06, 0x46, 0x05, 0x04, 0x8f},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x77, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x45, 0x04, 0x8f},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x05, 0x04, 0x8f},
    {0x02, 0x46, 0x05, 0x04, 0x8f},
    {0x07, 0x46, 0x05, 0x04, 0x8f},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x07, 0x6f},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x07, 0x6f},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x45, 0x04, 0x8f},
    {0xd0, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x07, 0x6f},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x05, 0x44, 0x8f},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x77, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x44, 0x8f},
    {0x04, 0x43, 0x04, 0x07, 0x6f},
    {0x02, 0x43, 0x04, 0x07, 0x6f},
    {0x07, 0x43, 0x04, 0x07, 0x6f},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0b, 0x42, 0x9a, 0xf5, 0x7d},
    {0x05, 0x44, 0x9a, 0xb5, 0x7d},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x9a, 0xf5, 0x7d},
    {0xcc, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x9a, 0xb5, 0x7d},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x45, 0x04, 0x8f},
    {0xc5, 0x45, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x9a, 0xb5, 0x7d},
    {0x02, 0x44, 0x9a, 0xb5, 0x7d},
    {0x07, 0x44, 0x9a, 0xb5, 0x7d},
    {0x0d, 0x43, 0x45, 0x04, 0x8f},
    {0x03, 0x42, 0x04, 0x07, 0x6f},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x07, 0x6f},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x45, 0x04, 0x8f},
    {0x84, 0x9a, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x04, 0x07, 0x6f},
    {0x01, 0x43, 0x45, 0x04, 0x8f},
    {0x08, 0x42, 0x9a, 0xf5, 0x7d},
    {0xc3, 0x04, 0x47, 0xb5, 0xff},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0x9a, 0xf5, 0x7d},
    {0x04, 0x42, 0x04, 0x07, 0x6f},
    {0x02, 0x42, 0x04, 0x07, 0x6f},
    {0x07, 0x42, 0x04, 0x07, 0x6f},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x03, 0x02, 0x9f},
    {0x0b, 0x45, 0x03, 0x42, 0x9f},
    {0x05, 0x47, 0x03, 0x02, 0x9f},
    {0x0c, 0x44, 0x43, 0x02, 0x9f},
    {0x09, 0x45, 0x03, 0x42, 0x9f},
    {0xda, 0x02, 0x47, 0xb5, 0xff},
    {0x06, 0x47, 0x03, 0x02, 0x9f},
    {0x14, 0x42, 0x43, 0x42, 0x9f},
    {0xc2, 0x0a, 0x47, 0xb5, 0xff},
    {0x18, 0x42, 0x43, 0x42, 0x9f},
    {0x0e, 0x44, 0x43, 0x02, 0x9f},
    {0x1c, 0x42, 0x43, 0x42, 0x9f},
    {0x04, 0x47, 0x03, 0x02, 0x9f},
    {0x02, 0x47, 0x03, 0x02, 0x9f},
    {0x07, 0x47, 0x03, 0x02, 0x9f},
    {0x17, 0x42, 0x43, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x07, 0x6f},
    {0x1b, 0x42, 0x43, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x07, 0x6f},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x43, 0x02, 0x9f},
    {0xce, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x07, 0x6f},
    {0x13, 0x42, 0x43, 0x42, 0x9f},
    {0x08, 0x45, 0x03, 0x42, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x47, 0xb5, 0xff},
    {0x0a, 0x45, 0x03, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x07, 0x6f},
    {0x02, 0x43, 0x02, 0x07, 0x6f},
    {0x07, 0x43, 0x02, 0x07, 0x6f},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x05, 0x7f},
    {0x0b, 0x43, 0x06, 0x45, 0x7f},
    {0x05, 0x41, 0x06, 0x05, 0x7f},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x45, 0x7f},
    {0xc8, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x06, 0x05, 0x7f},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0xf5, 0xbb},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x43, 0x02, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x05, 0x7f},
    {0x02, 0x41, 0x06, 0x05, 0x7f},
    {0x07, 0x41, 0x06, 0x05, 0x7f},
    {0x0d, 0x44, 0x43, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x07, 0x6f},
    {0xdb, 0x43, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x07, 0x6f},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x43, 0x02, 0x9f},
    {0xd6, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x07, 0x6f},
    {0x01, 0x44, 0x43, 0x02, 0x9f},
    {0x08, 0x43, 0x06, 0x45, 0x7f},
    {0xc3, 0x02, 0x47, 0xb5, 0xff},
    {0xc1, 0x04, 0x03, 0xf5, 0xbb},
    {0x0a, 0x43, 0x06, 0x45, 0x7f},
    {0x04, 0x42, 0x02, 0x07, 0x6f},
    {0x02, 0x42, 0x02, 0x07, 0x6f},
    {0x07, 0x42, 0x02, 0x07, 0x6f},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x05, 0x04, 0x8f},
    {0x0b, 0x44, 0x05, 0x44, 0x8f},
    {0x05, 0x45, 0x05, 0x04, 0x8f},
    {0x0c, 0x42, 0x45, 0x04, 0x8f},
    {0x09, 0x44, 0x05, 0x44, 0x8f},
    {0xda, 0x07, 0x47, 0xb5, 0xff},
    {0x06, 0x45, 0x05, 0x04, 0x8f},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0xf5, 0xbb},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x45, 0x04, 0x8f},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x05, 0x04, 0x8f},
    {0x02, 0x45, 0x05, 0x04, 0x8f},
    {0x07, 0x45, 0x05, 0x04, 0x8f},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x07, 0x6f},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x07, 0x6f},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x45, 0x04, 0x8f},
    {0xd2, 0x43, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x07, 0x6f},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x05, 0x44, 0x8f},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0xf5, 0xbb},
    {0x0a, 0x44, 0x05, 0x44, 0x8f},
    {0x04, 0x43, 0x07, 0x07, 0x6f},
    {0x02, 0x43, 0x07, 0x07, 0x6f},
    {0x07, 0x43, 0x07, 0x07, 0x6f},
    {0x16, 0x42, 0x43, 0x42, 0x9f},
    {0x03, 0x44, 0x06, 0x05, 0x7f},
    {0x0b, 0x42, 0x06, 0x45, 0x7f},
    {0x05, 0x44, 0x06, 0x05, 0x7f},
    {0x1a, 0x42, 0x43, 0x42, 0x9f},
    {0x09, 0x42, 0x06, 0x45, 0x7f},
    {0xca, 0x45, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x06, 0x05, 0x7f},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0xf5, 0xbb},
    {0x19, 0x42, 0x43, 0x42, 0x9f},
    {0x0f, 0x42, 0x45, 0x04, 0x8f},
    {0xc6, 0x45, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x06, 0x05, 0x7f},
    {0x02, 0x44, 0x06, 0x05, 0x7f},
    {0x07, 0x44, 0x06, 0x05, 0x7f},
    {0x0d, 0x42, 0x45, 0x04, 0x8f},
    {0x03, 0x42, 0x07, 0x07, 0x6f},
    {0x12, 0x42, 0x43, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x07, 0x6f},
    {0x15, 0x42, 0x43, 0x42, 0x9f},
    {0x11, 0x42, 0x45, 0x04, 0x8f},
    {0xc4, 0x06, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0x07, 0x6f},
    {0x01, 0x42, 0x45, 0x04, 0x8f},
    {0x08, 0x42, 0x06, 0x45, 0x7f},
    {0xc3, 0x07, 0x47, 0xb5, 0xff},
    {0xc1, 0x07, 0x03, 0xf5, 0xbb},
    {0x0a, 0x42, 0x06, 0x45, 0x7f},
    {0x04, 0x42, 0x07, 0x07, 0x6f},
    {0x02, 0x42, 0x07, 0x07, 0x6f},
    {0x07, 0x42, 0x07, 0x07, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4d, 0xb5, 0x40, 0xdd},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4a, 0xf5, 0x00, 0xdd},
    {0x09, 0x4d, 0xb5, 0x40, 0xdd},
    {0xda, 0x57, 0x02, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x49, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6d, 0x02, 0xf5, 0xff},
    {0x18, 0x49, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4a, 0xf5, 0x00, 0xdd},
    {0x1c, 0x49, 0xf5, 0x40, 0xdd},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x17, 0x02, 0x6f},
    {0x1b, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x17, 0x02, 0x6f},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4a, 0xf5, 0x00, 0xdd},
    {0xc9, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x17, 0x02, 0x6f},
    {0x13, 0x49, 0xf5, 0x40, 0xdd},
    {0x08, 0x4d, 0xb5, 0x40, 0xdd},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6d, 0x02, 0xf5, 0xff},
    {0x0a, 0x4d, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x17, 0x02, 0x6f},
    {0x02, 0x43, 0x17, 0x02, 0x6f},
    {0x07, 0x43, 0x17, 0x02, 0x6f},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x22, 0xb5, 0x7f},
    {0x0b, 0x43, 0x22, 0xf5, 0x7f},
    {0x05, 0x41, 0x22, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x22, 0xf5, 0x7f},
    {0xc7, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x22, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4a, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x22, 0xb5, 0x7f},
    {0x02, 0x41, 0x22, 0xb5, 0x7f},
    {0x07, 0x41, 0x22, 0xb5, 0x7f},
    {0x0d, 0x4a, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x17, 0x02, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x17, 0x02, 0x6f},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4a, 0xf5, 0x00, 0xdd},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x17, 0x02, 0x6f},
    {0x01, 0x4a, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x22, 0xf5, 0x7f},
    {0xc3, 0x57, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x22, 0xf5, 0x7f},
    {0x04, 0x42, 0x17, 0x02, 0x6f},
    {0x02, 0x42, 0x17, 0x02, 0x6f},
    {0x07, 0x42, 0x17, 0x02, 0x6f},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x1a, 0xb5, 0x8f},
    {0x0b, 0x41, 0x1a, 0xf5, 0x8f},
    {0x05, 0x46, 0x1a, 0xb5, 0x8f},
    {0x0c, 0x43, 0x5a, 0xb5, 0x8f},
    {0x09, 0x41, 0x1a, 0xf5, 0x8f},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x1a, 0xb5, 0x8f},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x5a, 0xb5, 0x8f},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x1a, 0xb5, 0x8f},
    {0x02, 0x46, 0x1a, 0xb5, 0x8f},
    {0x07, 0x46, 0x1a, 0xb5, 0x8f},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x5a, 0xb5, 0x8f},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x1a, 0xf5, 0x8f},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x1a, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x49, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x22, 0xb5, 0x7f},
    {0x0b, 0x42, 0x22, 0xf5, 0x7f},
    {0x05, 0x44, 0x22, 0xb5, 0x7f},
    {0x1a, 0x49, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x22, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x22, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x49, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x5a, 0xb5, 0x8f},
    {0xc5, 0x5a, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x22, 0xb5, 0x7f},
    {0x02, 0x44, 0x22, 0xb5, 0x7f},
    {0x07, 0x44, 0x22, 0xb5, 0x7f},
    {0x0d, 0x43, 0x5a, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x49, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x49, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x5a, 0xb5, 0x8f},
    {0xc4, 0x62, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x5a, 0xb5, 0x8f},
    {0x08, 0x42, 0x22, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x22, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x08, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x08, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x5b, 0x02, 0xf5, 0xff},
    {0x06, 0x49, 0x08, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x75, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x08, 0xb5, 0xaf},
    {0x02, 0x49, 0x08, 0xb5, 0xaf},
    {0x07, 0x49, 0x08, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x1b, 0x02, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x1b, 0x02, 0x6f},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x1b, 0x02, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x75, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x1b, 0x02, 0x6f},
    {0x02, 0x43, 0x1b, 0x02, 0x6f},
    {0x07, 0x43, 0x1b, 0x02, 0x6f},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x1b, 0x02, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x1b, 0x02, 0x6f},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x1b, 0x02, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x5b, 0x02, 0xf5, 0xff},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x1b, 0x02, 0x6f},
    {0x02, 0x42, 0x1b, 0x02, 0x6f},
    {0x07, 0x42, 0x1b, 0x02, 0x6f},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x1a, 0xb5, 0x8f},
    {0x0b, 0x44, 0x1a, 0xf5, 0x8f},
    {0x05, 0x45, 0x1a, 0xb5, 0x8f},
    {0x0c, 0x42, 0x5a, 0xb5, 0x8f},
    {0x09, 0x44, 0x1a, 0xf5, 0x8f},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x1a, 0xb5, 0x8f},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x87, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x5a, 0xb5, 0x8f},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x1a, 0xb5, 0x8f},
    {0x02, 0x45, 0x1a, 0xb5, 0x8f},
    {0x07, 0x45, 0x1a, 0xb5, 0x8f},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x5a, 0xb5, 0x8f},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x1a, 0xf5, 0x8f},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x87, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x1a, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x5a, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x5a, 0xb5, 0x8f},
    {0xc6, 0x5a, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x5a, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x5a, 0xb5, 0x8f},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x5a, 0xb5, 0x8f},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0b, 0x48, 0xb5, 0x40, 0xbb},
    {0x05, 0x4b, 0xb5, 0x00, 0xbb},
    {0x0c, 0x46, 0x48, 0xb5, 0xaf},
    {0x09, 0x48, 0xb5, 0x40, 0xbb},
    {0xda, 0x68, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0xb5, 0x00, 0xbb},
    {0x14, 0x41, 0x48, 0xf5, 0xaf},
    {0xc2, 0x63, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x48, 0xf5, 0xaf},
    {0x0e, 0x46, 0x48, 0xb5, 0xaf},
    {0x1c, 0x41, 0x48, 0xf5, 0xaf},
    {0x04, 0x4b, 0xb5, 0x00, 0xbb},
    {0x02, 0x4b, 0xb5, 0x00, 0xbb},
    {0x07, 0x4b, 0xb5, 0x00, 0xbb},
    {0x17, 0x41, 0x48, 0xf5, 0xaf},
    {0x03, 0x43, 0x28, 0xb5, 0x6e},
    {0x1b, 0x41, 0x48, 0xf5, 0xaf},
    {0x05, 0x43, 0x28, 0xb5, 0x6e},
    {0x67, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x46, 0x48, 0xb5, 0xaf},
    {0xc9, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x28, 0xb5, 0x6e},
    {0x13, 0x41, 0x48, 0xf5, 0xaf},
    {0x08, 0x48, 0xb5, 0x40, 0xbb},
    {0x77, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x63, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0xb5, 0x40, 0xbb},
    {0x04, 0x43, 0x28, 0xb5, 0x6e},
    {0x02, 0x43, 0x28, 0xb5, 0x6e},
    {0x07, 0x43, 0x28, 0xb5, 0x6e},
    {0x6d, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x32, 0xb5, 0x7f},
    {0x0b, 0x43, 0x32, 0xf5, 0x7f},
    {0x05, 0x41, 0x32, 0xb5, 0x7f},
    {0x75, 0x03, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x32, 0xf5, 0x7f},
    {0xc7, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x32, 0xb5, 0x7f},
    {0x63, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x48, 0xf5, 0x0f},
    {0x73, 0x03, 0x08, 0xb5, 0xaf},
    {0x0f, 0x46, 0x48, 0xb5, 0xaf},
    {0x7f, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x32, 0xb5, 0x7f},
    {0x02, 0x41, 0x32, 0xb5, 0x7f},
    {0x07, 0x41, 0x32, 0xb5, 0x7f},
    {0x0d, 0x46, 0x48, 0xb5, 0xaf},
    {0x03, 0x42, 0x28, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x28, 0xb5, 0x6e},
    {0x6b, 0x03, 0x08, 0xb5, 0xaf},
    {0x11, 0x46, 0x48, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x28, 0xb5, 0x6e},
    {0x01, 0x46, 0x48, 0xb5, 0xaf},
    {0x08, 0x43, 0x32, 0xf5, 0x7f},
    {0xc3, 0x68, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x48, 0xf5, 0x0f},
    {0x0a, 0x43, 0x32, 0xf5, 0x7f},
    {0x04, 0x42, 0x28, 0xb5, 0x6e},
    {0x02, 0x42, 0x28, 0xb5, 0x6e},
    {0x07, 0x42, 0x28, 0xb5, 0x6e},
    {0x5d, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x46, 0x09, 0x02, 0x8f},
    {0x0b, 0x41, 0x09, 0x42, 0x8f},
    {0x05, 0x46, 0x09, 0x02, 0x8f},
    {0x0c, 0x43, 0x49, 0x02, 0x8f},
    {0x09, 0x41, 0x09, 0x42, 0x8f},
    {0xda, 0x50, 0x04, 0xb5, 0xff},
    {0x06, 0x46, 0x09, 0x02, 0x8f},
    {0x61, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x73, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0x08, 0xb5, 0xaf},
    {0x0e, 0x43, 0x49, 0x02, 0x8f},
    {0x7d, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x46, 0x09, 0x02, 0x8f},
    {0x02, 0x46, 0x09, 0x02, 0x8f},
    {0x07, 0x46, 0x09, 0x02, 0x8f},
    {0x6f, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x10, 0x04, 0x6f},
    {0x7b, 0x03, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x10, 0x04, 0x6f},
    {0x69, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x43, 0x49, 0x02, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x10, 0x04, 0x6f},
    {0x5f, 0x03, 0x08, 0xb5, 0xaf},
    {0x08, 0x41, 0x09, 0x42, 0x8f},
    {0x79, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x73, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x09, 0x42, 0x8f},
    {0x04, 0x43, 0x10, 0x04, 0x6f},
    {0x02, 0x43, 0x10, 0x04, 0x6f},
    {0x07, 0x43, 0x10, 0x04, 0x6f},
    {0x16, 0x41, 0x48, 0xf5, 0xaf},
    {0x03, 0x44, 0x32, 0xb5, 0x7f},
    {0x0b, 0x42, 0x32, 0xf5, 0x7f},
    {0x05, 0x44, 0x32, 0xb5, 0x7f},
    {0x1a, 0x41, 0x48, 0xf5, 0xaf},
    {0x09, 0x42, 0x32, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x32, 0xb5, 0x7f},
    {0x65, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x45, 0xf5, 0xff},
    {0x19, 0x41, 0x48, 0xf5, 0xaf},
    {0x0f, 0x43, 0x49, 0x02, 0x8f},
    {0xc5, 0x49, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x32, 0xb5, 0x7f},
    {0x02, 0x44, 0x32, 0xb5, 0x7f},
    {0x07, 0x44, 0x32, 0xb5, 0x7f},
    {0x0d, 0x43, 0x49, 0x02, 0x8f},
    {0x03, 0x42, 0x10, 0x04, 0x6f},
    {0x12, 0x41, 0x48, 0xf5, 0xaf},
    {0x05, 0x42, 0x10, 0x04, 0x6f},
    {0x15, 0x41, 0x48, 0xf5, 0xaf},
    {0x11, 0x43, 0x49, 0x02, 0x8f},
    {0xc4, 0x72, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x10, 0x04, 0x6f},
    {0x01, 0x43, 0x49, 0x02, 0x8f},
    {0x08, 0x42, 0x32, 0xf5, 0x7f},
    {0xc3, 0x50, 0x04, 0xb5, 0xff},
    {0xc1, 0x0f, 0x45, 0xf5, 0xff},
    {0x0a, 0x42, 0x32, 0xf5, 0x7f},
    {0x04, 0x42, 0x10, 0x04, 0x6f},
    {0x02, 0x42, 0x10, 0x04, 0x6f},
    {0x07, 0x42, 0x10, 0x04, 0x6f},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x8e, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7f, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x8e, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x8e, 0xb5, 0x6f},
    {0x68, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x8e, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x7f, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x8e, 0xb5, 0x6f},
    {0x02, 0x43, 0x8e, 0xb5, 0x6f},
    {0x07, 0x43, 0x8e, 0xb5, 0x6f},
    {0x6e, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x0e, 0x02, 0x7f},
    {0x0b, 0x43, 0x0e, 0x42, 0x7f},
    {0x05, 0x41, 0x0e, 0x02, 0x7f},
    {0x76, 0x03, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x0e, 0x42, 0x7f},
    {0xc8, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x0e, 0x02, 0x7f},
    {0x64, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x08, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x0e, 0x02, 0x7f},
    {0x02, 0x41, 0x0e, 0x02, 0x7f},
    {0x07, 0x41, 0x0e, 0x02, 0x7f},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x8e, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x8e, 0xb5, 0x6f},
    {0x6c, 0x03, 0x08, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x8e, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x0e, 0x42, 0x7f},
    {0x83, 0x8e, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0e, 0x42, 0x7f},
    {0x04, 0x42, 0x8e, 0xb5, 0x6f},
    {0x02, 0x42, 0x8e, 0xb5, 0x6f},
    {0x07, 0x42, 0x8e, 0xb5, 0x6f},
    {0x5e, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x45, 0x09, 0x02, 0x8f},
    {0x0b, 0x44, 0x09, 0x42, 0x8f},
    {0x05, 0x45, 0x09, 0x02, 0x8f},
    {0x0c, 0x42, 0x49, 0x02, 0x8f},
    {0x09, 0x44, 0x09, 0x42, 0x8f},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x09, 0x02, 0x8f},
    {0x62, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x08, 0xb5, 0xaf},
    {0x0e, 0x42, 0x49, 0x02, 0x8f},
    {0x7e, 0x03, 0x08, 0xb5, 0xaf},
    {0x04, 0x45, 0x09, 0x02, 0x8f},
    {0x02, 0x45, 0x09, 0x02, 0x8f},
    {0x07, 0x45, 0x09, 0x02, 0x8f},
    {0x70, 0x03, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x08, 0xb5, 0xaf},
    {0x10, 0x42, 0x49, 0x02, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x08, 0xb5, 0xaf},
    {0x08, 0x44, 0x09, 0x42, 0x8f},
    {0x7a, 0x03, 0x08, 0xb5, 0xaf},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x09, 0x42, 0x8f},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x0e, 0x02, 0x7f},
    {0x0b, 0x42, 0x0e, 0x42, 0x7f},
    {0x05, 0x44, 0x0e, 0x02, 0x7f},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x0e, 0x42, 0x7f},
    {0xca, 0x49, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0e, 0x02, 0x7f},
    {0x66, 0x03, 0x08, 0xb5, 0xaf},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x49, 0x02, 0x8f},
    {0xc6, 0x49, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x0e, 0x02, 0x7f},
    {0x02, 0x44, 0x0e, 0x02, 0x7f},
    {0x07, 0x44, 0x0e, 0x02, 0x7f},
    {0x0d, 0x42, 0x49, 0x02, 0x8f},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x49, 0x02, 0x8f},
    {0xc4, 0x4e, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x49, 0x02, 0x8f},
    {0x08, 0x42, 0x0e, 0x42, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0e, 0x42, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x48, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x47, 0xf5, 0x00, 0xbb},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x53, 0x02, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x45, 0xf5, 0x40, 0xbb},
    {0xc2, 0x0d, 0x45, 0xf5, 0xff},
    {0x18, 0x45, 0xf5, 0x40, 0xbb},
    {0x0e, 0x47, 0xf5, 0x00, 0xbb},
    {0x1c, 0x45, 0xf5, 0x40, 0xbb},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x43, 0x13, 0x02, 0x6f},
    {0x1b, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x43, 0x13, 0x02, 0x6f},
    {0x67, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x47, 0xf5, 0x00, 0xbb},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x13, 0x02, 0x6f},
    {0x13, 0x45, 0xf5, 0x40, 0xbb},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x0d, 0x45, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x13, 0x02, 0x6f},
    {0x02, 0x43, 0x13, 0x02, 0x6f},
    {0x07, 0x43, 0x13, 0x02, 0x6f},
    {0x6d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x3e, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3e, 0xf5, 0x7f},
    {0x05, 0x41, 0x3e, 0xb5, 0x7f},
    {0x75, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x3e, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x3e, 0xb5, 0x7f},
    {0x63, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x03, 0x02, 0xf5, 0xbb},
    {0x73, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x47, 0xf5, 0x00, 0xbb},
    {0x7f, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x3e, 0xb5, 0x7f},
    {0x02, 0x41, 0x3e, 0xb5, 0x7f},
    {0x07, 0x41, 0x3e, 0xb5, 0x7f},
    {0x0d, 0x47, 0xf5, 0x00, 0xbb},
    {0x03, 0x42, 0x13, 0x02, 0x6f},
    {0xd7, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x13, 0x02, 0x6f},
    {0x6b, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x47, 0xf5, 0x00, 0xbb},
    {0xd3, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x13, 0x02, 0x6f},
    {0x01, 0x47, 0xf5, 0x00, 0xbb},
    {0x08, 0x43, 0x3e, 0xf5, 0x7f},
    {0xc3, 0x53, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x3e, 0xf5, 0x7f},
    {0x04, 0x42, 0x13, 0x02, 0x6f},
    {0x02, 0x42, 0x13, 0x02, 0x6f},
    {0x07, 0x42, 0x13, 0x02, 0x6f},
    {0x5d, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x08, 0x45, 0xf5, 0xff},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x98, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x08, 0x05, 0x6f},
    {0x7b, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x08, 0x05, 0x6f},
    {0x69, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0xcf, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x05, 0x6f},
    {0x5f, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x98, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x08, 0x05, 0x6f},
    {0x02, 0x43, 0x08, 0x05, 0x6f},
    {0x07, 0x43, 0x08, 0x05, 0x6f},
    {0x16, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x44, 0x3e, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3e, 0xf5, 0x7f},
    {0x05, 0x44, 0x3e, 0xb5, 0x7f},
    {0x1a, 0x45, 0xf5, 0x40, 0xbb},
    {0x09, 0x42, 0x3e, 0xf5, 0x7f},
    {0xcb, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x3e, 0xb5, 0x7f},
    {0x65, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x05, 0x02, 0xf5, 0xbb},
    {0x19, 0x45, 0xf5, 0x40, 0xbb},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x3e, 0xb5, 0x7f},
    {0x02, 0x44, 0x3e, 0xb5, 0x7f},
    {0x07, 0x44, 0x3e, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x08, 0x05, 0x6f},
    {0x12, 0x45, 0xf5, 0x40, 0xbb},
    {0x05, 0x42, 0x08, 0x05, 0x6f},
    {0x15, 0x45, 0xf5, 0x40, 0xbb},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x7e, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x08, 0x05, 0x6f},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x3e, 0xf5, 0x7f},
    {0xc3, 0x08, 0x45, 0xf5, 0xff},
    {0xc1, 0x05, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x3e, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x05, 0x6f},
    {0x02, 0x42, 0x08, 0x05, 0x6f},
    {0x07, 0x42, 0x08, 0x05, 0x6f},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x08, 0xb5, 0xaf},
    {0x0b, 0x46, 0x05, 0x42, 0x9f},
    {0x05, 0x48, 0x08, 0xb5, 0xaf},
    {0x0c, 0x41, 0x45, 0x02, 0x9f},
    {0x09, 0x46, 0x05, 0x42, 0x9f},
    {0xda, 0x78, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x08, 0xb5, 0xaf},
    {0x14, 0x43, 0x45, 0x42, 0x9f},
    {0xc2, 0x6b, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x45, 0x42, 0x9f},
    {0x0e, 0x41, 0x45, 0x02, 0x9f},
    {0x1c, 0x43, 0x45, 0x42, 0x9f},
    {0x04, 0x48, 0x08, 0xb5, 0xaf},
    {0x02, 0x48, 0x08, 0xb5, 0xaf},
    {0x07, 0x48, 0x08, 0xb5, 0xaf},
    {0x17, 0x43, 0x45, 0x42, 0x9f},
    {0x03, 0x43, 0x38, 0xb5, 0x6e},
    {0x1b, 0x43, 0x45, 0x42, 0x9f},
    {0x05, 0x43, 0x38, 0xb5, 0x6e},
    {0x68, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x41, 0x45, 0x02, 0x9f},
    {0xcd, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x38, 0xb5, 0x6e},
    {0x13, 0x43, 0x45, 0x42, 0x9f},
    {0x08, 0x46, 0x05, 0x42, 0x9f},
    {0x78, 0x04, 0xb5, 0x00, 0xbb},
    {0xc1, 0x6b, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x05, 0x42, 0x9f},
    {0x04, 0x43, 0x38, 0xb5, 0x6e},
    {0x02, 0x43, 0x38, 0xb5, 0x6e},
    {0x07, 0x43, 0x38, 0xb5, 0x6e},
    {0x6e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x41, 0x04, 0x05, 0x7f},
    {0x0b, 0x43, 0x04, 0x45, 0x7f},
    {0x05, 0x41, 0x04, 0x05, 0x7f},
    {0x76, 0x04, 0xb5, 0x00, 0xbb},
    {0x09, 0x43, 0x04, 0x45, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x04, 0x05, 0x7f},
    {0x64, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x11, 0x45, 0xf5, 0xff},
    {0x74, 0x04, 0xb5, 0x00, 0xbb},
    {0x0f, 0x41, 0x45, 0x02, 0x9f},
    {0x40, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x41, 0x04, 0x05, 0x7f},
    {0x02, 0x41, 0x04, 0x05, 0x7f},
    {0x07, 0x41, 0x04, 0x05, 0x7f},
    {0x0d, 0x41, 0x45, 0x02, 0x9f},
    {0x03, 0x42, 0x38, 0xb5, 0x6e},
    {0xd9, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x38, 0xb5, 0x6e},
    {0x6c, 0x04, 0xb5, 0x00, 0xbb},
    {0x11, 0x41, 0x45, 0x02, 0x9f},
    {0xd5, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x38, 0xb5, 0x6e},
    {0x01, 0x41, 0x45, 0x02, 0x9f},
    {0x08, 0x43, 0x04, 0x45, 0x7f},
    {0xc3, 0x78, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x45, 0xf5, 0xff},
    {0x0a, 0x43, 0x04, 0x45, 0x7f},
    {0x04, 0x42, 0x38, 0xb5, 0x6e},
    {0x02, 0x42, 0x38, 0xb5, 0x6e},
    {0x07, 0x42, 0x38, 0xb5, 0x6e},
    {0x5e, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0x9a, 0x81, 0xb5, 0x00, 0x0b},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x04, 0xb5, 0x00, 0xbb},
    {0x82, 0x94, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0xb5, 0x00, 0xbb},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x04, 0xb5, 0x00, 0xbb},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x04, 0xb5, 0x00, 0xbb},
    {0x03, 0x43, 0x81, 0xb5, 0x6b},
    {0x7c, 0x04, 0xb5, 0x00, 0xbb},
    {0x05, 0x43, 0x81, 0xb5, 0x6b},
    {0x6a, 0x04, 0xb5, 0x00, 0xbb},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0xd1, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0xb5, 0x6b},
    {0x60, 0x04, 0xb5, 0x00, 0xbb},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x04, 0xb5, 0x00, 0xbb},
    {0x81, 0x94, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x81, 0xb5, 0x6b},
    {0x02, 0x43, 0x81, 0xb5, 0x6b},
    {0x07, 0x43, 0x81, 0xb5, 0x6b},
    {0x16, 0x43, 0x45, 0x42, 0x9f},
    {0x03, 0x44, 0x04, 0x05, 0x7f},
    {0x0b, 0x42, 0x04, 0x45, 0x7f},
    {0x05, 0x44, 0x04, 0x05, 0x7f},
    {0x1a, 0x43, 0x45, 0x42, 0x9f},
    {0x09, 0x42, 0x04, 0x45, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x04, 0x05, 0x7f},
    {0x66, 0x04, 0xb5, 0x00, 0xbb},
    {0xc2, 0x06, 0x02, 0xf5, 0xbb},
    {0x19, 0x43, 0x45, 0x42, 0x9f},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x04, 0x05, 0x7f},
    {0x02, 0x44, 0x04, 0x05, 0x7f},
    {0x07, 0x44, 0x04, 0x05, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x81, 0xb5, 0x6b},
    {0x12, 0x43, 0x45, 0x42, 0x9f},
    {0x05, 0x42, 0x81, 0xb5, 0x6b},
    {0x15, 0x43, 0x45, 0x42, 0x9f},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x04, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x81, 0xb5, 0x6b},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x04, 0x45, 0x7f},
    {0x83, 0x81, 0xb5, 0x00, 0x0b},
    {0xc1, 0x06, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x04, 0x45, 0x7f},
    {0x04, 0x42, 0x81, 0xb5, 0x6b},
    {0x02, 0x42, 0x81, 0xb5, 0x6b},
    {0x07, 0x42, 0x81, 0xb5, 0x6b},
    {0xf4, 0x45, 0x02, 0xf5, 0xff},
    {0x03, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0b, 0x47, 0x08, 0xf5, 0xaf},
    {0x05, 0x4c, 0xb5, 0x00, 0xbb},
    {0x0c, 0x45, 0x48, 0xb5, 0xaf},
    {0x09, 0x47, 0x08, 0xf5, 0xaf},
    {0xda, 0x0a, 0x45, 0xf5, 0xff},
    {0x06, 0x4c, 0xb5, 0x00, 0xbb},
    {0x14, 0x44, 0x48, 0xf5, 0xaf},
    {0xc2, 0x01, 0x45, 0xf5, 0xff},
    {0x18, 0x44, 0x48, 0xf5, 0xaf},
    {0x0e, 0x45, 0x48, 0xb5, 0xaf},
    {0x1c, 0x44, 0x48, 0xf5, 0xaf},
    {0x04, 0x4c, 0xb5, 0x00, 0xbb},
    {0x02, 0x4c, 0xb5, 0x00, 0xbb},
    {0x07, 0x4c, 0xb5, 0x00, 0xbb},
    {0x17, 0x44, 0x48, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x05, 0x6f},
    {0x1b, 0x44, 0x48, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x05, 0x6f},
    {0x67, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x45, 0x48, 0xb5, 0xaf},
    {0xc9, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x05, 0x6f},
    {0x13, 0x44, 0x48, 0xf5, 0xaf},
    {0x08, 0x47, 0x08, 0xf5, 0xaf},
    {0x77, 0x02, 0x08, 0xb5, 0xaf},
    {0xc1, 0x01, 0x45, 0xf5, 0xff},
    {0x0a, 0x47, 0x08, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x05, 0x6f},
    {0x02, 0x43, 0x0a, 0x05, 0x6f},
    {0x07, 0x43, 0x0a, 0x05, 0x6f},
    {0x6d, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x05, 0x7f},
    {0x0b, 0x43, 0x02, 0x45, 0x7f},
    {0x05, 0x41, 0x02, 0x05, 0x7f},
    {0x75, 0x02, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x45, 0x7f},
    {0xc7, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x05, 0x7f},
    {0x63, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x08, 0xb5, 0xaf},
    {0x0f, 0x45, 0x48, 0xb5, 0xaf},
    {0x7f, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x05, 0x7f},
    {0x02, 0x41, 0x02, 0x05, 0x7f},
    {0x07, 0x41, 0x02, 0x05, 0x7f},
    {0x0d, 0x45, 0x48, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x05, 0x6f},
    {0xd8, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x05, 0x6f},
    {0x6b, 0x02, 0x08, 0xb5, 0xaf},
    {0x11, 0x45, 0x48, 0xb5, 0xaf},
    {0xd4, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x05, 0x6f},
    {0x01, 0x45, 0x48, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x45, 0x7f},
    {0xc3, 0x0a, 0x45, 0xf5, 0xff},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x45, 0x7f},
    {0x04, 0x42, 0x0a, 0x05, 0x6f},
    {0x02, 0x42, 0x0a, 0x05, 0x6f},
    {0x07, 0x42, 0x0a, 0x05, 0x6f},
    {0x5d, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x46, 0x06, 0x04, 0x8f},
    {0x0b, 0x41, 0x06, 0x44, 0x8f},
    {0x05, 0x46, 0x06, 0x04, 0x8f},
    {0x0c, 0x43, 0x46, 0x04, 0x8f},
    {0x09, 0x41, 0x06, 0x44, 0x8f},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x04, 0x8f},
    {0x61, 0x02, 0x08, 0xb5, 0xaf},
    {0x82, 0x83, 0xb5, 0x00, 0x0b},
    {0x71, 0x02, 0x08, 0xb5, 0xaf},
    {0x0e, 0x43, 0x46, 0x04, 0x8f},
    {0x7d, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x46, 0x06, 0x04, 0x8f},
    {0x02, 0x46, 0x06, 0x04, 0x8f},
    {0x07, 0x46, 0x06, 0x04, 0x8f},
    {0x6f, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x43, 0x46, 0x04, 0x8f},
    {0xd0, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x08, 0xb5, 0xaf},
    {0x08, 0x41, 0x06, 0x44, 0x8f},
    {0x79, 0x02, 0x08, 0xb5, 0xaf},
    {0x81, 0x83, 0xb5, 0x00, 0x0b},
    {0x0a, 0x41, 0x06, 0x44, 0x8f},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x48, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x05, 0x7f},
    {0x0b, 0x42, 0x02, 0x45, 0x7f},
    {0x05, 0x44, 0x02, 0x05, 0x7f},
    {0x1a, 0x44, 0x48, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x45, 0x7f},
    {0xcc, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x05, 0x7f},
    {0x65, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x48, 0xf5, 0x0f},
    {0x19, 0x44, 0x48, 0xf5, 0xaf},
    {0x0f, 0x43, 0x46, 0x04, 0x8f},
    {0xc5, 0x46, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x05, 0x7f},
    {0x02, 0x44, 0x02, 0x05, 0x7f},
    {0x07, 0x44, 0x02, 0x05, 0x7f},
    {0x0d, 0x43, 0x46, 0x04, 0x8f},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x48, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x48, 0xf5, 0xaf},
    {0x11, 0x43, 0x46, 0x04, 0x8f},
    {0xc4, 0x02, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x04, 0x8f},
    {0x08, 0x42, 0x02, 0x45, 0x7f},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x48, 0xf5, 0x0f},
    {0x0a, 0x42, 0x02, 0x45, 0x7f},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x05, 0x02, 0x9f},
    {0x0b, 0x45, 0x05, 0x42, 0x9f},
    {0x05, 0x47, 0x05, 0x02, 0x9f},
    {0x0c, 0x44, 0x45, 0x02, 0x9f},
    {0x09, 0x45, 0x05, 0x42, 0x9f},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x05, 0x02, 0x9f},
    {0x14, 0x42, 0x45, 0x42, 0x9f},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0x45, 0x42, 0x9f},
    {0x0e, 0x44, 0x45, 0x02, 0x9f},
    {0x1c, 0x42, 0x45, 0x42, 0x9f},
    {0x04, 0x47, 0x05, 0x02, 0x9f},
    {0x02, 0x47, 0x05, 0x02, 0x9f},
    {0x07, 0x47, 0x05, 0x02, 0x9f},
    {0x17, 0x42, 0x45, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0x45, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x44, 0x45, 0x02, 0x9f},
    {0xce, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0x45, 0x42, 0x9f},
    {0x08, 0x45, 0x05, 0x42, 0x9f},
    {0x78, 0x02, 0x08, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x05, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x05, 0x7f},
    {0x0b, 0x43, 0x07, 0x45, 0x7f},
    {0x05, 0x41, 0x07, 0x05, 0x7f},
    {0x76, 0x02, 0x08, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x45, 0x7f},
    {0xc8, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x05, 0x7f},
    {0x64, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0xf5, 0xbb},
    {0x74, 0x02, 0x08, 0xb5, 0xaf},
    {0x0f, 0x44, 0x45, 0x02, 0x9f},
    {0x40, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x05, 0x7f},
    {0x02, 0x41, 0x07, 0x05, 0x7f},
    {0x07, 0x41, 0x07, 0x05, 0x7f},
    {0x0d, 0x44, 0x45, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0xdb, 0x45, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x08, 0xb5, 0xaf},
    {0x11, 0x44, 0x45, 0x02, 0x9f},
    {0xd6, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0x45, 0x02, 0x9f},
    {0x08, 0x43, 0x07, 0x45, 0x7f},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0xf5, 0xbb},
    {0x0a, 0x43, 0x07, 0x45, 0x7f},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x45, 0x06, 0x04, 0x8f},
    {0x0b, 0x44, 0x06, 0x44, 0x8f},
    {0x05, 0x45, 0x06, 0x04, 0x8f},
    {0x0c, 0x42, 0x46, 0x04, 0x8f},
    {0x09, 0x44, 0x06, 0x44, 0x8f},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x04, 0x8f},
    {0x62, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0xf5, 0xbb},
    {0x72, 0x02, 0x08, 0xb5, 0xaf},
    {0x0e, 0x42, 0x46, 0x04, 0x8f},
    {0x7e, 0x02, 0x08, 0xb5, 0xaf},
    {0x04, 0x45, 0x06, 0x04, 0x8f},
    {0x02, 0x45, 0x06, 0x04, 0x8f},
    {0x07, 0x45, 0x06, 0x04, 0x8f},
    {0x70, 0x02, 0x08, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x08, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x08, 0xb5, 0xaf},
    {0x10, 0x42, 0x46, 0x04, 0x8f},
    {0xd2, 0x45, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x08, 0xb5, 0xaf},
    {0x08, 0x44, 0x06, 0x44, 0x8f},
    {0x7a, 0x02, 0x08, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0xf5, 0xbb},
    {0x0a, 0x44, 0x06, 0x44, 0x8f},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0x45, 0x42, 0x9f},
    {0x03, 0x44, 0x07, 0x05, 0x7f},
    {0x0b, 0x42, 0x07, 0x45, 0x7f},
    {0x05, 0x44, 0x07, 0x05, 0x7f},
    {0x1a, 0x42, 0x45, 0x42, 0x9f},
    {0x09, 0x42, 0x07, 0x45, 0x7f},
    {0xca, 0x46, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x05, 0x7f},
    {0x66, 0x02, 0x08, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0xf5, 0xbb},
    {0x19, 0x42, 0x45, 0x42, 0x9f},
    {0x0f, 0x42, 0x46, 0x04, 0x8f},
    {0xc6, 0x46, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x05, 0x7f},
    {0x02, 0x44, 0x07, 0x05, 0x7f},
    {0x07, 0x44, 0x07, 0x05, 0x7f},
    {0x0d, 0x42, 0x46, 0x04, 0x8f},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0x45, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0x45, 0x42, 0x9f},
    {0x11, 0x42, 0x46, 0x04, 0x8f},
    {0xc4, 0x07, 0x45, 0xf5, 0xff},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x04, 0x8f},
    {0x08, 0x42, 0x07, 0x45, 0x7f},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0xf5, 0xbb},
    {0x0a, 0x42, 0x07, 0x45, 0x7f},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x6e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4b, 0xf5, 0x40, 0xee},
    {0xc2, 0x5d, 0x02, 0xf5, 0xff},
    {0x18, 0x4b, 0xf5, 0x40, 0xee},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4b, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x2e, 0xb5, 0x6e},
    {0x1b, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x2e, 0xb5, 0x6e},
    {0x67, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x2e, 0xb5, 0x6e},
    {0x13, 0x4b, 0xf5, 0x40, 0xee},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x5d, 0x02, 0xf5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x2e, 0xb5, 0x6e},
    {0x02, 0x43, 0x2e, 0xb5, 0x6e},
    {0x07, 0x43, 0x2e, 0xb5, 0x6e},
    {0x6d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x30, 0xb5, 0x7f},
    {0x0b, 0x43, 0x30, 0xf5, 0x7f},
    {0x05, 0x41, 0x30, 0xb5, 0x7f},
    {0x75, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x30, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x30, 0xb5, 0x7f},
    {0x63, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x03, 0x06, 0xf5, 0xdd},
    {0x73, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x30, 0xb5, 0x7f},
    {0x02, 0x41, 0x30, 0xb5, 0x7f},
    {0x07, 0x41, 0x30, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x2e, 0xb5, 0x6e},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2e, 0xb5, 0x6e},
    {0x6b, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x30, 0xf5, 0x7f},
    {0xc3, 0x6e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x30, 0xf5, 0x7f},
    {0x04, 0x42, 0x2e, 0xb5, 0x6e},
    {0x02, 0x42, 0x2e, 0xb5, 0x6e},
    {0x07, 0x42, 0x2e, 0xb5, 0x6e},
    {0x5d, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x0b, 0x41, 0xb5, 0xdd},
    {0x71, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x03, 0x01, 0x6d},
    {0x7b, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x03, 0x01, 0x6d},
    {0x69, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x01, 0x6d},
    {0x5f, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0b, 0x41, 0xb5, 0xdd},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x01, 0x6d},
    {0x02, 0x43, 0x03, 0x01, 0x6d},
    {0x07, 0x43, 0x03, 0x01, 0x6d},
    {0x16, 0x4b, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x30, 0xb5, 0x7f},
    {0x0b, 0x42, 0x30, 0xf5, 0x7f},
    {0x05, 0x44, 0x30, 0xb5, 0x7f},
    {0x1a, 0x4b, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x30, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x30, 0xb5, 0x7f},
    {0x65, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x05, 0x06, 0xf5, 0xdd},
    {0x19, 0x4b, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x30, 0xb5, 0x7f},
    {0x02, 0x44, 0x30, 0xb5, 0x7f},
    {0x07, 0x44, 0x30, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x01, 0x6d},
    {0x12, 0x4b, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x01, 0x6d},
    {0x15, 0x4b, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x70, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x01, 0x6d},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x30, 0xf5, 0x7f},
    {0xc3, 0x03, 0x41, 0xb5, 0xdd},
    {0xc1, 0x05, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x30, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x01, 0x6d},
    {0x02, 0x42, 0x03, 0x01, 0x6d},
    {0x07, 0x42, 0x03, 0x01, 0x6d},
    {0xdc, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0xda, 0x0b, 0x43, 0xf5, 0xdd},
    {0x06, 0x49, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x0c, 0x43, 0xf5, 0xdd},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0xb5, 0x00, 0xaa},
    {0x02, 0x49, 0xb5, 0x00, 0xaa},
    {0x07, 0x49, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x0b, 0x03, 0x6d},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x0b, 0x03, 0x6d},
    {0x68, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x0b, 0x03, 0x6d},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0x0c, 0x43, 0xf5, 0xdd},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x0b, 0x03, 0x6d},
    {0x02, 0x43, 0x0b, 0x03, 0x6d},
    {0x07, 0x43, 0x0b, 0x03, 0x6d},
    {0x6e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x41, 0x03, 0x03, 0x7d},
    {0x0b, 0x43, 0x03, 0x43, 0x7d},
    {0x05, 0x41, 0x03, 0x03, 0x7d},
    {0x76, 0x08, 0xb5, 0x00, 0xee},
    {0x09, 0x43, 0x03, 0x43, 0x7d},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x03, 0x03, 0x7d},
    {0x64, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x09, 0x41, 0xb5, 0xdd},
    {0x74, 0x08, 0xb5, 0x00, 0xee},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x41, 0x03, 0x03, 0x7d},
    {0x02, 0x41, 0x03, 0x03, 0x7d},
    {0x07, 0x41, 0x03, 0x03, 0x7d},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x0b, 0x03, 0x6d},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0b, 0x03, 0x6d},
    {0x6c, 0x08, 0xb5, 0x00, 0xee},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0b, 0x03, 0x6d},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x03, 0x43, 0x7d},
    {0xc3, 0x0b, 0x43, 0xf5, 0xdd},
    {0xc1, 0x09, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x0b, 0x03, 0x6d},
    {0x02, 0x42, 0x0b, 0x03, 0x6d},
    {0x07, 0x42, 0x0b, 0x03, 0x6d},
    {0x5e, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0xda, 0x44, 0xf5, 0x0f},
    {0x72, 0x08, 0xb5, 0x00, 0xee},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x08, 0xb5, 0x00, 0xee},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x08, 0xb5, 0x00, 0xee},
    {0x03, 0x43, 0x05, 0x01, 0x6d},
    {0x7c, 0x08, 0xb5, 0x00, 0xee},
    {0x05, 0x43, 0x05, 0x01, 0x6d},
    {0x6a, 0x08, 0xb5, 0x00, 0xee},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x01, 0x6d},
    {0x60, 0x08, 0xb5, 0x00, 0xee},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x08, 0xb5, 0x00, 0xee},
    {0xc1, 0xda, 0x44, 0xf5, 0x0f},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x01, 0x6d},
    {0x02, 0x43, 0x05, 0x01, 0x6d},
    {0x07, 0x43, 0x05, 0x01, 0x6d},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x03, 0x03, 0x7d},
    {0x0b, 0x42, 0x03, 0x43, 0x7d},
    {0x05, 0x44, 0x03, 0x03, 0x7d},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x03, 0x43, 0x7d},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x03, 0x03, 0x7d},
    {0x66, 0x08, 0xb5, 0x00, 0xee},
    {0xc2, 0x06, 0x06, 0xf5, 0xdd},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x03, 0x03, 0x7d},
    {0x02, 0x44, 0x03, 0x03, 0x7d},
    {0x07, 0x44, 0x03, 0x03, 0x7d},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x01, 0x6d},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x01, 0x6d},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x03, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x01, 0x6d},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x03, 0x43, 0x7d},
    {0xc3, 0x05, 0x41, 0xb5, 0xdd},
    {0xc1, 0x06, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x43, 0x7d},
    {0x04, 0x42, 0x05, 0x01, 0x6d},
    {0x02, 0x42, 0x05, 0x01, 0x6d},
    {0x07, 0x42, 0x05, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4a, 0x04, 0xb5, 0xbf},
    {0x0b, 0x49, 0x04, 0xf5, 0xbf},
    {0x05, 0x4a, 0x04, 0xb5, 0xbf},
    {0x0c, 0x46, 0xf5, 0x00, 0xaa},
    {0x09, 0x49, 0x04, 0xf5, 0xbf},
    {0xda, 0x76, 0xf5, 0x00, 0x0e},
    {0x06, 0x4a, 0x04, 0xb5, 0xbf},
    {0x14, 0x41, 0xf5, 0x40, 0xaa},
    {0xc2, 0x61, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0xf5, 0x40, 0xaa},
    {0x0e, 0x46, 0xf5, 0x00, 0xaa},
    {0x1c, 0x41, 0xf5, 0x40, 0xaa},
    {0x04, 0x4a, 0x04, 0xb5, 0xbf},
    {0x02, 0x4a, 0x04, 0xb5, 0xbf},
    {0x07, 0x4a, 0x04, 0xb5, 0xbf},
    {0x17, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x36, 0xb5, 0x6e},
    {0x1b, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x36, 0xb5, 0x6e},
    {0x67, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x46, 0xf5, 0x00, 0xaa},
    {0x89, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x36, 0xb5, 0x6e},
    {0x13, 0x41, 0xf5, 0x40, 0xaa},
    {0x08, 0x49, 0x04, 0xf5, 0xbf},
    {0x77, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x61, 0x02, 0xf5, 0xff},
    {0x0a, 0x49, 0x04, 0xf5, 0xbf},
    {0x04, 0x43, 0x36, 0xb5, 0x6e},
    {0x02, 0x43, 0x36, 0xb5, 0x6e},
    {0x07, 0x43, 0x36, 0xb5, 0x6e},
    {0x6d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x3c, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3c, 0xf5, 0x7f},
    {0x05, 0x41, 0x3c, 0xb5, 0x7f},
    {0x75, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x3c, 0xf5, 0x7f},
    {0x87, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x3c, 0xb5, 0x7f},
    {0x63, 0x03, 0xb5, 0x00, 0xaa},
    {0x82, 0x82, 0xb5, 0x00, 0x0a},
    {0x73, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x46, 0xf5, 0x00, 0xaa},
    {0x7f, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x3c, 0xb5, 0x7f},
    {0x02, 0x41, 0x3c, 0xb5, 0x7f},
    {0x07, 0x41, 0x3c, 0xb5, 0x7f},
    {0x0d, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x36, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x36, 0xb5, 0x6e},
    {0x6b, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x46, 0xf5, 0x00, 0xaa},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x36, 0xb5, 0x6e},
    {0x01, 0x46, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0x3c, 0xf5, 0x7f},
    {0xc3, 0x76, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0xb5, 0x00, 0x0a},
    {0x0a, 0x43, 0x3c, 0xf5, 0x7f},
    {0x04, 0x42, 0x36, 0xb5, 0x6e},
    {0x02, 0x42, 0x36, 0xb5, 0x6e},
    {0x07, 0x42, 0x36, 0xb5, 0x6e},
    {0x5d, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x82, 0xb5, 0x8d},
    {0x0b, 0x41, 0x82, 0xf5, 0x8d},
    {0x05, 0x46, 0x82, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc2, 0xb5, 0x8d},
    {0x09, 0x41, 0x82, 0xf5, 0x8d},
    {0xda, 0x09, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x82, 0xb5, 0x8d},
    {0x61, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x71, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0xc2, 0xb5, 0x8d},
    {0x7d, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x82, 0xb5, 0x8d},
    {0x02, 0x46, 0x82, 0xb5, 0x8d},
    {0x07, 0x46, 0x82, 0xb5, 0x8d},
    {0x6f, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x09, 0x03, 0x6d},
    {0x7b, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x09, 0x03, 0x6d},
    {0x69, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0xc2, 0xb5, 0x8d},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x09, 0x03, 0x6d},
    {0x5f, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x82, 0xf5, 0x8d},
    {0x79, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x71, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x09, 0x03, 0x6d},
    {0x02, 0x43, 0x09, 0x03, 0x6d},
    {0x07, 0x43, 0x09, 0x03, 0x6d},
    {0x16, 0x41, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0x3c, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3c, 0xf5, 0x7f},
    {0x05, 0x44, 0x3c, 0xb5, 0x7f},
    {0x1a, 0x41, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0x3c, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x3c, 0xb5, 0x7f},
    {0x65, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x0e, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0xc2, 0xb5, 0x8d},
    {0x85, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x3c, 0xb5, 0x7f},
    {0x02, 0x44, 0x3c, 0xb5, 0x7f},
    {0x07, 0x44, 0x3c, 0xb5, 0x7f},
    {0x0d, 0x43, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x09, 0x03, 0x6d},
    {0x12, 0x41, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x09, 0x03, 0x6d},
    {0x15, 0x41, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x7c, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x09, 0x03, 0x6d},
    {0x01, 0x43, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x3c, 0xf5, 0x7f},
    {0xc3, 0x09, 0x43, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x3c, 0xf5, 0x7f},
    {0x04, 0x42, 0x09, 0x03, 0x6d},
    {0x02, 0x42, 0x09, 0x03, 0x6d},
    {0x07, 0x42, 0x09, 0x03, 0x6d},
    {0xdd, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x88, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0xc2, 0x7d, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x88, 0xb5, 0x6e},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x88, 0xb5, 0x6e},
    {0x68, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x88, 0xb5, 0x6e},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x7d, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x88, 0xb5, 0x6e},
    {0x02, 0x43, 0x88, 0xb5, 0x6e},
    {0x07, 0x43, 0x88, 0xb5, 0x6e},
    {0x6e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x05, 0x03, 0x7d},
    {0x0b, 0x43, 0x05, 0x43, 0x7d},
    {0x05, 0x41, 0x05, 0x03, 0x7d},
    {0x76, 0x03, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x05, 0x43, 0x7d},
    {0x88, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x05, 0x03, 0x7d},
    {0x64, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x06, 0xf5, 0xdd},
    {0x74, 0x03, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x05, 0x03, 0x7d},
    {0x02, 0x41, 0x05, 0x03, 0x7d},
    {0x07, 0x41, 0x05, 0x03, 0x7d},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x88, 0xb5, 0x6e},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x88, 0xb5, 0x6e},
    {0x6c, 0x03, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x88, 0xb5, 0x6e},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x05, 0x43, 0x7d},
    {0x83, 0x88, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x06, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x88, 0xb5, 0x6e},
    {0x02, 0x42, 0x88, 0xb5, 0x6e},
    {0x07, 0x42, 0x88, 0xb5, 0x6e},
    {0x5e, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x82, 0xb5, 0x8d},
    {0x0b, 0x44, 0x82, 0xf5, 0x8d},
    {0x05, 0x45, 0x82, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc2, 0xb5, 0x8d},
    {0x09, 0x44, 0x82, 0xf5, 0x8d},
    {0xda, 0x06, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x82, 0xb5, 0x8d},
    {0x62, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x06, 0xf5, 0xdd},
    {0x72, 0x03, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0xc2, 0xb5, 0x8d},
    {0x7e, 0x03, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x82, 0xb5, 0x8d},
    {0x02, 0x45, 0x82, 0xb5, 0x8d},
    {0x07, 0x45, 0x82, 0xb5, 0x8d},
    {0x70, 0x03, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x06, 0x01, 0x6d},
    {0x7c, 0x03, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x06, 0x01, 0x6d},
    {0x6a, 0x03, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0xc2, 0xb5, 0x8d},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x01, 0x6d},
    {0x60, 0x03, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x82, 0xf5, 0x8d},
    {0x7a, 0x03, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x06, 0xf5, 0xdd},
    {0x0a, 0x44, 0x82, 0xf5, 0x8d},
    {0x04, 0x43, 0x06, 0x01, 0x6d},
    {0x02, 0x43, 0x06, 0x01, 0x6d},
    {0x07, 0x43, 0x06, 0x01, 0x6d},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x05, 0x03, 0x7d},
    {0x0b, 0x42, 0x05, 0x43, 0x7d},
    {0x05, 0x44, 0x05, 0x03, 0x7d},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x05, 0x43, 0x7d},
    {0x8a, 0x82, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x05, 0x03, 0x7d},
    {0x66, 0x03, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x06, 0xf5, 0xdd},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xc2, 0xb5, 0x8d},
    {0x86, 0x82, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x05, 0x03, 0x7d},
    {0x02, 0x44, 0x05, 0x03, 0x7d},
    {0x07, 0x44, 0x05, 0x03, 0x7d},
    {0x0d, 0x42, 0xc2, 0xb5, 0x8d},
    {0x03, 0x42, 0x06, 0x01, 0x6d},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x01, 0x6d},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xc2, 0xb5, 0x8d},
    {0xc4, 0x05, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x01, 0x6d},
    {0x01, 0x42, 0xc2, 0xb5, 0x8d},
    {0x08, 0x42, 0x05, 0x43, 0x7d},
    {0xc3, 0x06, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x06, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x43, 0x7d},
    {0x04, 0x42, 0x06, 0x01, 0x6d},
    {0x02, 0x42, 0x06, 0x01, 0x6d},
    {0x07, 0x42, 0x06, 0x01, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x64, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x46, 0x44, 0xf5, 0xbf},
    {0xc2, 0x6f, 0x02, 0xf5, 0xff},
    {0x18, 0x46, 0x44, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x44, 0xf5, 0xbf},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x46, 0x44, 0xf5, 0xbf},
    {0x03, 0x43, 0x24, 0xb5, 0x6e},
    {0x1b, 0x46, 0x44, 0xf5, 0xbf},
    {0x05, 0x43, 0x24, 0xb5, 0x6e},
    {0x67, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0xc9, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x24, 0xb5, 0x6e},
    {0x13, 0x46, 0x44, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x04, 0xb5, 0xbf},
    {0xc1, 0x6f, 0x02, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x24, 0xb5, 0x6e},
    {0x02, 0x43, 0x24, 0xb5, 0x6e},
    {0x07, 0x43, 0x24, 0xb5, 0x6e},
    {0x6d, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x2a, 0xb5, 0x7f},
    {0x0b, 0x43, 0x2a, 0xf5, 0x7f},
    {0x05, 0x41, 0x2a, 0xb5, 0x7f},
    {0x75, 0x01, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x2a, 0xf5, 0x7f},
    {0xc7, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x2a, 0xb5, 0x7f},
    {0x63, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x44, 0xbf},
    {0x73, 0x01, 0x04, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x2a, 0xb5, 0x7f},
    {0x02, 0x41, 0x2a, 0xb5, 0x7f},
    {0x07, 0x41, 0x2a, 0xb5, 0x7f},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x24, 0xb5, 0x6e},
    {0xd7, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x24, 0xb5, 0x6e},
    {0x6b, 0x01, 0x04, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x24, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x2a, 0xf5, 0x7f},
    {0xc3, 0x64, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x44, 0xbf},
    {0x0a, 0x43, 0x2a, 0xf5, 0x7f},
    {0x04, 0x42, 0x24, 0xb5, 0x6e},
    {0x02, 0x42, 0x24, 0xb5, 0x6e},
    {0x07, 0x42, 0x24, 0xb5, 0x6e},
    {0x5d, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x46, 0x19, 0xb5, 0x8f},
    {0x0b, 0x41, 0x19, 0xf5, 0x8f},
    {0x05, 0x46, 0x19, 0xb5, 0x8f},
    {0x0c, 0x43, 0x59, 0xb5, 0x8f},
    {0x09, 0x41, 0x19, 0xf5, 0x8f},
    {0xda, 0xc2, 0x44, 0xf5, 0x0f},
    {0x06, 0x46, 0x19, 0xb5, 0x8f},
    {0x61, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x7b, 0x02, 0xf5, 0xff},
    {0x71, 0x01, 0x04, 0xb5, 0xbf},
    {0x0e, 0x43, 0x59, 0xb5, 0x8f},
    {0x7d, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x46, 0x19, 0xb5, 0x8f},
    {0x02, 0x46, 0x19, 0xb5, 0x8f},
    {0x07, 0x46, 0x19, 0xb5, 0x8f},
    {0x6f, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x04, 0x6f},
    {0x7b, 0x01, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x04, 0x6f},
    {0x69, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x43, 0x59, 0xb5, 0x8f},
    {0xcf, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x82, 0x04, 0x6f},
    {0x5f, 0x01, 0x04, 0xb5, 0xbf},
    {0x08, 0x41, 0x19, 0xf5, 0x8f},
    {0x79, 0x01, 0x04, 0xb5, 0xbf},
    {0xc1, 0x7b, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x19, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0x04, 0x6f},
    {0x02, 0x43, 0x82, 0x04, 0x6f},
    {0x07, 0x43, 0x82, 0x04, 0x6f},
    {0x16, 0x46, 0x44, 0xf5, 0xbf},
    {0x03, 0x44, 0x2a, 0xb5, 0x7f},
    {0x0b, 0x42, 0x2a, 0xf5, 0x7f},
    {0x05, 0x44, 0x2a, 0xb5, 0x7f},
    {0x1a, 0x46, 0x44, 0xf5, 0xbf},
    {0x09, 0x42, 0x2a, 0xf5, 0x7f},
    {0xcb, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x2a, 0xb5, 0x7f},
    {0x65, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x44, 0xbf},
    {0x19, 0x46, 0x44, 0xf5, 0xbf},
    {0x0f, 0x43, 0x59, 0xb5, 0x8f},
    {0xc5, 0x59, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x2a, 0xb5, 0x7f},
    {0x02, 0x44, 0x2a, 0xb5, 0x7f},
    {0x07, 0x44, 0x2a, 0xb5, 0x7f},
    {0x0d, 0x43, 0x59, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0x04, 0x6f},
    {0x12, 0x46, 0x44, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x04, 0x6f},
    {0x15, 0x46, 0x44, 0xf5, 0xbf},
    {0x11, 0x43, 0x59, 0xb5, 0x8f},
    {0xc4, 0x6a, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x82, 0x04, 0x6f},
    {0x01, 0x43, 0x59, 0xb5, 0x8f},
    {0x08, 0x42, 0x2a, 0xf5, 0x7f},
    {0xc3, 0xc2, 0x44, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x44, 0xbf},
    {0x0a, 0x42, 0x2a, 0xf5, 0x7f},
    {0x04, 0x42, 0x82, 0x04, 0x6f},
    {0x02, 0x42, 0x82, 0x04, 0x6f},
    {0x07, 0x42, 0x82, 0x04, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0xb5, 0x00, 0xaa},
    {0x0b, 0x46, 0x11, 0xf5, 0x9f},
    {0x05, 0x48, 0xb5, 0x00, 0xaa},
    {0x0c, 0x41, 0x51, 0xb5, 0x9f},
    {0x09, 0x46, 0x11, 0xf5, 0x9f},
    {0xda, 0x74, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0xb5, 0x00, 0xaa},
    {0x14, 0x43, 0x51, 0xf5, 0x9f},
    {0xc2, 0x69, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x51, 0xf5, 0x9f},
    {0x0e, 0x41, 0x51, 0xb5, 0x9f},
    {0x1c, 0x43, 0x51, 0xf5, 0x9f},
    {0x04, 0x48, 0xb5, 0x00, 0xaa},
    {0x02, 0x48, 0xb5, 0x00, 0xaa},
    {0x07, 0x48, 0xb5, 0x00, 0xaa},
    {0x17, 0x43, 0x51, 0xf5, 0x9f},
    {0x03, 0x43, 0x34, 0xb5, 0x6e},
    {0x1b, 0x43, 0x51, 0xf5, 0x9f},
    {0x05, 0x43, 0x34, 0xb5, 0x6e},
    {0x68, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x41, 0x51, 0xb5, 0x9f},
    {0xcd, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x34, 0xb5, 0x6e},
    {0x13, 0x43, 0x51, 0xf5, 0x9f},
    {0x08, 0x46, 0x11, 0xf5, 0x9f},
    {0x78, 0x01, 0x04, 0xb5, 0xbf},
    {0xc1, 0x69, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x11, 0xf5, 0x9f},
    {0x04, 0x43, 0x34, 0xb5, 0x6e},
    {0x02, 0x43, 0x34, 0xb5, 0x6e},
    {0x07, 0x43, 0x34, 0xb5, 0x6e},
    {0x6e, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x10, 0x02, 0x7f},
    {0x0b, 0x43, 0x10, 0x42, 0x7f},
    {0x05, 0x41, 0x10, 0x02, 0x7f},
    {0x76, 0x01, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x10, 0x42, 0x7f},
    {0xc8, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x10, 0x02, 0x7f},
    {0x64, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x10, 0x43, 0xf5, 0xdd},
    {0x74, 0x01, 0x04, 0xb5, 0xbf},
    {0x0f, 0x41, 0x51, 0xb5, 0x9f},
    {0x40, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x10, 0x02, 0x7f},
    {0x02, 0x41, 0x10, 0x02, 0x7f},
    {0x07, 0x41, 0x10, 0x02, 0x7f},
    {0x0d, 0x41, 0x51, 0xb5, 0x9f},
    {0x03, 0x42, 0x34, 0xb5, 0x6e},
    {0xd9, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x34, 0xb5, 0x6e},
    {0x6c, 0x01, 0x04, 0xb5, 0xbf},
    {0x11, 0x41, 0x51, 0xb5, 0x9f},
    {0xd5, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x34, 0xb5, 0x6e},
    {0x01, 0x41, 0x51, 0xb5, 0x9f},
    {0x08, 0x43, 0x10, 0x42, 0x7f},
    {0xc3, 0x74, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x10, 0x42, 0x7f},
    {0x04, 0x42, 0x34, 0xb5, 0x6e},
    {0x02, 0x42, 0x34, 0xb5, 0x6e},
    {0x07, 0x42, 0x34, 0xb5, 0x6e},
    {0x5e, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x45, 0x19, 0xb5, 0x8f},
    {0x0b, 0x44, 0x19, 0xf5, 0x8f},
    {0x05, 0x45, 0x19, 0xb5, 0x8f},
    {0x0c, 0x42, 0x59, 0xb5, 0x8f},
    {0x09, 0x44, 0x19, 0xf5, 0x8f},
    {0xda, 0x4f, 0x04, 0xb5, 0xff},
    {0x06, 0x45, 0x19, 0xb5, 0x8f},
    {0x62, 0x01, 0x04, 0xb5, 0xbf},
    {0x82, 0x90, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x04, 0xb5, 0xbf},
    {0x0e, 0x42, 0x59, 0xb5, 0x8f},
    {0x7e, 0x01, 0x04, 0xb5, 0xbf},
    {0x04, 0x45, 0x19, 0xb5, 0x8f},
    {0x02, 0x45, 0x19, 0xb5, 0x8f},
    {0x07, 0x45, 0x19, 0xb5, 0x8f},
    {0x70, 0x01, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x04, 0x6f},
    {0x7c, 0x01, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x04, 0x6f},
    {0x6a, 0x01, 0x04, 0xb5, 0xbf},
    {0x10, 0x42, 0x59, 0xb5, 0x8f},
    {0xd1, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0f, 0x04, 0x6f},
    {0x60, 0x01, 0x04, 0xb5, 0xbf},
    {0x08, 0x44, 0x19, 0xf5, 0x8f},
    {0x7a, 0x01, 0x04, 0xb5, 0xbf},
    {0x81, 0x90, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x19, 0xf5, 0x8f},
    {0x04, 0x43, 0x0f, 0x04, 0x6f},
    {0x02, 0x43, 0x0f, 0x04, 0x6f},
    {0x07, 0x43, 0x0f, 0x04, 0x6f},
    {0x16, 0x43, 0x51, 0xf5, 0x9f},
    {0x03, 0x44, 0x10, 0x02, 0x7f},
    {0x0b, 0x42, 0x10, 0x42, 0x7f},
    {0x05, 0x44, 0x10, 0x02, 0x7f},
    {0x1a, 0x43, 0x51, 0xf5, 0x9f},
    {0x09, 0x42, 0x10, 0x42, 0x7f},
    {0xca, 0x59, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x10, 0x02, 0x7f},
    {0x66, 0x01, 0x04, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x44, 0xbf},
    {0x19, 0x43, 0x51, 0xf5, 0x9f},
    {0x0f, 0x42, 0x59, 0xb5, 0x8f},
    {0xc6, 0x59, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x10, 0x02, 0x7f},
    {0x02, 0x44, 0x10, 0x02, 0x7f},
    {0x07, 0x44, 0x10, 0x02, 0x7f},
    {0x0d, 0x42, 0x59, 0xb5, 0x8f},
    {0x03, 0x42, 0x0f, 0x04, 0x6f},
    {0x12, 0x43, 0x51, 0xf5, 0x9f},
    {0x05, 0x42, 0x0f, 0x04, 0x6f},
    {0x15, 0x43, 0x51, 0xf5, 0x9f},
    {0x11, 0x42, 0x59, 0xb5, 0x8f},
    {0xc4, 0x50, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x04, 0x6f},
    {0x01, 0x42, 0x59, 0xb5, 0x8f},
    {0x08, 0x42, 0x10, 0x42, 0x7f},
    {0xc3, 0x4f, 0x04, 0xb5, 0xff},
    {0xc1, 0x06, 0x03, 0x44, 0xbf},
    {0x0a, 0x42, 0x10, 0x42, 0x7f},
    {0x04, 0x42, 0x0f, 0x04, 0x6f},
    {0x02, 0x42, 0x0f, 0x04, 0x6f},
    {0x07, 0x42, 0x0f, 0x04, 0x6f},
    {0xf4, 0x51, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0x47, 0xb5, 0x40, 0xaa},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x45, 0xf5, 0x00, 0xaa},
    {0x09, 0x47, 0xb5, 0x40, 0xaa},
    {0xda, 0x40, 0xf5, 0x00, 0x0e},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x44, 0xf5, 0x40, 0xaa},
    {0xc2, 0x5f, 0x02, 0xf5, 0xff},
    {0x18, 0x44, 0xf5, 0x40, 0xaa},
    {0x0e, 0x45, 0xf5, 0x00, 0xaa},
    {0x1c, 0x44, 0xf5, 0x40, 0xaa},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x43, 0x00, 0xb5, 0x6e},
    {0x1b, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x43, 0x00, 0xb5, 0x6e},
    {0x67, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x45, 0xf5, 0x00, 0xaa},
    {0xc9, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x00, 0xb5, 0x6e},
    {0x13, 0x44, 0xf5, 0x40, 0xaa},
    {0x08, 0x47, 0xb5, 0x40, 0xaa},
    {0x77, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x5f, 0x02, 0xf5, 0xff},
    {0x0a, 0x47, 0xb5, 0x40, 0xaa},
    {0x04, 0x43, 0x00, 0xb5, 0x6e},
    {0x02, 0x43, 0x00, 0xb5, 0x6e},
    {0x07, 0x43, 0x00, 0xb5, 0x6e},
    {0x6d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0xb5, 0x00, 0x77},
    {0x0b, 0x43, 0xb5, 0x40, 0x77},
    {0x05, 0x41, 0xb5, 0x00, 0x77},
    {0x75, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0xb5, 0x40, 0x77},
    {0xc7, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0xb5, 0x00, 0x77},
    {0x63, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x08, 0x41, 0xb5, 0xdd},
    {0x73, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x45, 0xf5, 0x00, 0xaa},
    {0x7f, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0xb5, 0x00, 0x77},
    {0x02, 0x41, 0xb5, 0x00, 0x77},
    {0x07, 0x41, 0xb5, 0x00, 0x77},
    {0x0d, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x42, 0x00, 0xb5, 0x6e},
    {0xd8, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x00, 0xb5, 0x6e},
    {0x6b, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x45, 0xf5, 0x00, 0xaa},
    {0xd4, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x00, 0xb5, 0x6e},
    {0x01, 0x45, 0xf5, 0x00, 0xaa},
    {0x08, 0x43, 0xb5, 0x40, 0x77},
    {0xc3, 0x40, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x41, 0xb5, 0xdd},
    {0x0a, 0x43, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x00, 0xb5, 0x6e},
    {0x02, 0x42, 0x00, 0xb5, 0x6e},
    {0x07, 0x42, 0x00, 0xb5, 0x6e},
    {0x5d, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0f, 0xf5, 0x8e},
    {0x05, 0x46, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4f, 0xb5, 0x8e},
    {0x09, 0x41, 0x0f, 0xf5, 0x8e},
    {0xda, 0x04, 0x41, 0xb5, 0xdd},
    {0x06, 0x46, 0x0f, 0xb5, 0x8e},
    {0x61, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x79, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x43, 0x4f, 0xb5, 0x8e},
    {0x7d, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x46, 0x0f, 0xb5, 0x8e},
    {0x02, 0x46, 0x0f, 0xb5, 0x8e},
    {0x07, 0x46, 0x0f, 0xb5, 0x8e},
    {0x6f, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x04, 0x01, 0x6d},
    {0x7b, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x04, 0x01, 0x6d},
    {0x69, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x43, 0x4f, 0xb5, 0x8e},
    {0xd0, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x04, 0x01, 0x6d},
    {0x5f, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x41, 0x0f, 0xf5, 0x8e},
    {0x79, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x79, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x04, 0x01, 0x6d},
    {0x02, 0x43, 0x04, 0x01, 0x6d},
    {0x07, 0x43, 0x04, 0x01, 0x6d},
    {0x16, 0x44, 0xf5, 0x40, 0xaa},
    {0x03, 0x44, 0xb5, 0x00, 0x77},
    {0x0b, 0x42, 0xb5, 0x40, 0x77},
    {0x05, 0x44, 0xb5, 0x00, 0x77},
    {0x1a, 0x44, 0xf5, 0x40, 0xaa},
    {0x09, 0x42, 0xb5, 0x40, 0x77},
    {0xcc, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0xb5, 0x00, 0x77},
    {0x65, 0x02, 0xb5, 0x00, 0xaa},
    {0x82, 0x81, 0xb5, 0x00, 0x0a},
    {0x19, 0x44, 0xf5, 0x40, 0xaa},
    {0x0f, 0x43, 0x4f, 0xb5, 0x8e},
    {0xc5, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0xb5, 0x00, 0x77},
    {0x02, 0x44, 0xb5, 0x00, 0x77},
    {0x07, 0x44, 0xb5, 0x00, 0x77},
    {0x0d, 0x43, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x04, 0x01, 0x6d},
    {0x12, 0x44, 0xf5, 0x40, 0xaa},
    {0x05, 0x42, 0x04, 0x01, 0x6d},
    {0x15, 0x44, 0xf5, 0x40, 0xaa},
    {0x11, 0x43, 0x4f, 0xb5, 0x8e},
    {0x84, 0xb5, 0x00, 0x00, 0x07},
    {0x06, 0x42, 0x04, 0x01, 0x6d},
    {0x01, 0x43, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0xb5, 0x40, 0x77},
    {0xc3, 0x04, 0x41, 0xb5, 0xdd},
    {0x81, 0x81, 0xb5, 0x00, 0x0a},
    {0x0a, 0x42, 0xb5, 0x40, 0x77},
    {0x04, 0x42, 0x04, 0x01, 0x6d},
    {0x02, 0x42, 0x04, 0x01, 0x6d},
    {0x07, 0x42, 0x04, 0x01, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x11, 0xb5, 0x9f},
    {0x0b, 0x45, 0x11, 0xf5, 0x9f},
    {0x05, 0x47, 0x11, 0xb5, 0x9f},
    {0x0c, 0x44, 0x51, 0xb5, 0x9f},
    {0x09, 0x45, 0x11, 0xf5, 0x9f},
    {0xda, 0x02, 0x41, 0xb5, 0xdd},
    {0x06, 0x47, 0x11, 0xb5, 0x9f},
    {0x14, 0x42, 0x51, 0xf5, 0x9f},
    {0xc2, 0x0a, 0x41, 0xb5, 0xdd},
    {0x18, 0x42, 0x51, 0xf5, 0x9f},
    {0x0e, 0x44, 0x51, 0xb5, 0x9f},
    {0x1c, 0x42, 0x51, 0xf5, 0x9f},
    {0x04, 0x47, 0x11, 0xb5, 0x9f},
    {0x02, 0x47, 0x11, 0xb5, 0x9f},
    {0x07, 0x47, 0x11, 0xb5, 0x9f},
    {0x17, 0x42, 0x51, 0xf5, 0x9f},
    {0x03, 0x43, 0x02, 0x01, 0x6d},
    {0x1b, 0x42, 0x51, 0xf5, 0x9f},
    {0x05, 0x43, 0x02, 0x01, 0x6d},
    {0x68, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x44, 0x51, 0xb5, 0x9f},
    {0xce, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x02, 0x01, 0x6d},
    {0x13, 0x42, 0x51, 0xf5, 0x9f},
    {0x08, 0x45, 0x11, 0xf5, 0x9f},
    {0x78, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x0a, 0x41, 0xb5, 0xdd},
    {0x0a, 0x45, 0x11, 0xf5, 0x9f},
    {0x04, 0x43, 0x02, 0x01, 0x6d},
    {0x02, 0x43, 0x02, 0x01, 0x6d},
    {0x07, 0x43, 0x02, 0x01, 0x6d},
    {0x6e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x41, 0x06, 0x03, 0x7d},
    {0x0b, 0x43, 0x06, 0x43, 0x7d},
    {0x05, 0x41, 0x06, 0x03, 0x7d},
    {0x76, 0x02, 0xb5, 0x00, 0xaa},
    {0x09, 0x43, 0x06, 0x43, 0x7d},
    {0xc8, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x06, 0x03, 0x7d},
    {0x64, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x04, 0x03, 0x44, 0xbf},
    {0x74, 0x02, 0xb5, 0x00, 0xaa},
    {0x0f, 0x44, 0x51, 0xb5, 0x9f},
    {0x40, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x41, 0x06, 0x03, 0x7d},
    {0x02, 0x41, 0x06, 0x03, 0x7d},
    {0x07, 0x41, 0x06, 0x03, 0x7d},
    {0x0d, 0x44, 0x51, 0xb5, 0x9f},
    {0x03, 0x42, 0x02, 0x01, 0x6d},
    {0xdb, 0x51, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x02, 0x01, 0x6d},
    {0x6c, 0x02, 0xb5, 0x00, 0xaa},
    {0x11, 0x44, 0x51, 0xb5, 0x9f},
    {0xd6, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x02, 0x01, 0x6d},
    {0x01, 0x44, 0x51, 0xb5, 0x9f},
    {0x08, 0x43, 0x06, 0x43, 0x7d},
    {0xc3, 0x02, 0x41, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x44, 0xbf},
    {0x0a, 0x43, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x01, 0x6d},
    {0x02, 0x42, 0x02, 0x01, 0x6d},
    {0x07, 0x42, 0x02, 0x01, 0x6d},
    {0x5e, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0f, 0xf5, 0x8e},
    {0x05, 0x45, 0x0f, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4f, 0xb5, 0x8e},
    {0x09, 0x44, 0x0f, 0xf5, 0x8e},
    {0xda, 0x07, 0x41, 0xb5, 0xdd},
    {0x06, 0x45, 0x0f, 0xb5, 0x8e},
    {0x62, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x02, 0x03, 0x44, 0xbf},
    {0x72, 0x02, 0xb5, 0x00, 0xaa},
    {0x0e, 0x42, 0x4f, 0xb5, 0x8e},
    {0x7e, 0x02, 0xb5, 0x00, 0xaa},
    {0x04, 0x45, 0x0f, 0xb5, 0x8e},
    {0x02, 0x45, 0x0f, 0xb5, 0x8e},
    {0x07, 0x45, 0x0f, 0xb5, 0x8e},
    {0x70, 0x02, 0xb5, 0x00, 0xaa},
    {0x03, 0x43, 0x07, 0x01, 0x6d},
    {0x7c, 0x02, 0xb5, 0x00, 0xaa},
    {0x05, 0x43, 0x07, 0x01, 0x6d},
    {0x6a, 0x02, 0xb5, 0x00, 0xaa},
    {0x10, 0x42, 0x4f, 0xb5, 0x8e},
    {0xd2, 0x51, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x07, 0x01, 0x6d},
    {0x60, 0x02, 0xb5, 0x00, 0xaa},
    {0x08, 0x44, 0x0f, 0xf5, 0x8e},
    {0x7a, 0x02, 0xb5, 0x00, 0xaa},
    {0xc1, 0x02, 0x03, 0x44, 0xbf},
    {0x0a, 0x44, 0x0f, 0xf5, 0x8e},
    {0x04, 0x43, 0x07, 0x01, 0x6d},
    {0x02, 0x43, 0x07, 0x01, 0x6d},
    {0x07, 0x43, 0x07, 0x01, 0x6d},
    {0x16, 0x42, 0x51, 0xf5, 0x9f},
    {0x03, 0x44, 0x06, 0x03, 0x7d},
    {0x0b, 0x42, 0x06, 0x43, 0x7d},
    {0x05, 0x44, 0x06, 0x03, 0x7d},
    {0x1a, 0x42, 0x51, 0xf5, 0x9f},
    {0x09, 0x42, 0x06, 0x43, 0x7d},
    {0xca, 0x4f, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x06, 0x03, 0x7d},
    {0x66, 0x02, 0xb5, 0x00, 0xaa},
    {0xc2, 0x07, 0x03, 0x44, 0xbf},
    {0x19, 0x42, 0x51, 0xf5, 0x9f},
    {0x0f, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc6, 0x4f, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x06, 0x03, 0x7d},
    {0x02, 0x44, 0x06, 0x03, 0x7d},
    {0x07, 0x44, 0x06, 0x03, 0x7d},
    {0x0d, 0x42, 0x4f, 0xb5, 0x8e},
    {0x03, 0x42, 0x07, 0x01, 0x6d},
    {0x12, 0x42, 0x51, 0xf5, 0x9f},
    {0x05, 0x42, 0x07, 0x01, 0x6d},
    {0x15, 0x42, 0x51, 0xf5, 0x9f},
    {0x11, 0x42, 0x4f, 0xb5, 0x8e},
    {0xc4, 0x06, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x01, 0x6d},
    {0x01, 0x42, 0x4f, 0xb5, 0x8e},
    {0x08, 0x42, 0x06, 0x43, 0x7d},
    {0xc3, 0x07, 0x41, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x44, 0xbf},
    {0x0a, 0x42, 0x06, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x01, 0x6d},
    {0x02, 0x42, 0x07, 0x01, 0x6d},
    {0x07, 0x42, 0x07, 0x01, 0x6d},
    {0xf4, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x4d, 0x04, 0xb5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x04, 0xb5, 0xff},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x04, 0x6f},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x04, 0x6f},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0x89, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x43, 0x0d, 0x04, 0x6f},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x04, 0xb5, 0xff},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x0d, 0x04, 0x6f},
    {0x02, 0x43, 0x0d, 0x04, 0x6f},
    {0x07, 0x43, 0x0d, 0x04, 0x6f},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x20, 0xb5, 0x7f},
    {0x0b, 0x43, 0x20, 0xf5, 0x7f},
    {0x05, 0x41, 0x20, 0xb5, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x20, 0xf5, 0x7f},
    {0x87, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x20, 0xb5, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x20, 0xb5, 0x7f},
    {0x02, 0x41, 0x20, 0xb5, 0x7f},
    {0x07, 0x41, 0x20, 0xb5, 0x7f},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x0d, 0x04, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x0d, 0x04, 0x6f},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0x93, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x0d, 0x04, 0x6f},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x20, 0xf5, 0x7f},
    {0xc3, 0x4d, 0x04, 0xb5, 0xff},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x20, 0xf5, 0x7f},
    {0x04, 0x42, 0x0d, 0x04, 0x6f},
    {0x02, 0x42, 0x0d, 0x04, 0x6f},
    {0x07, 0x42, 0x0d, 0x04, 0x6f},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0xb5, 0x00, 0x88},
    {0x0b, 0x41, 0xb5, 0x40, 0x88},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x0c, 0x43, 0xf5, 0x00, 0x88},
    {0x09, 0x41, 0xb5, 0x40, 0x88},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0xf5, 0x00, 0x88},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0xb5, 0x00, 0x88},
    {0x02, 0x46, 0xb5, 0x00, 0x88},
    {0x07, 0x46, 0xb5, 0x00, 0x88},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0xf5, 0x00, 0x88},
    {0x8f, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0xb5, 0x40, 0x88},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x20, 0xb5, 0x7f},
    {0x0b, 0x42, 0x20, 0xf5, 0x7f},
    {0x05, 0x44, 0x20, 0xb5, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x20, 0xf5, 0x7f},
    {0x8b, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x20, 0xb5, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0xf5, 0x00, 0x88},
    {0x85, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x20, 0xb5, 0x7f},
    {0x02, 0x44, 0x20, 0xb5, 0x7f},
    {0x07, 0x44, 0x20, 0xb5, 0x7f},
    {0x0d, 0x43, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0xf5, 0x00, 0x88},
    {0xc4, 0x60, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x20, 0xf5, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x20, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x81, 0xb5, 0xaf},
    {0x0b, 0x46, 0xb5, 0x40, 0x99},
    {0x05, 0x49, 0x81, 0xb5, 0xaf},
    {0x0c, 0x41, 0xf5, 0x00, 0x99},
    {0x09, 0x46, 0xb5, 0x40, 0x99},
    {0x9a, 0x9b, 0xb5, 0x00, 0x0f},
    {0x06, 0x49, 0x81, 0xb5, 0xaf},
    {0x14, 0x43, 0xf5, 0x40, 0x99},
    {0xc2, 0x5a, 0x04, 0xb5, 0xff},
    {0x18, 0x43, 0xf5, 0x40, 0x99},
    {0x0e, 0x41, 0xf5, 0x00, 0x99},
    {0x1c, 0x43, 0xf5, 0x40, 0x99},
    {0x04, 0x49, 0x81, 0xb5, 0xaf},
    {0x02, 0x49, 0x81, 0xb5, 0xaf},
    {0x07, 0x49, 0x81, 0xb5, 0xaf},
    {0x17, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x9b, 0xb5, 0x6f},
    {0x1b, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x9b, 0xb5, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xf5, 0x00, 0x99},
    {0x8d, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x9b, 0xb5, 0x6f},
    {0x13, 0x43, 0xf5, 0x40, 0x99},
    {0x08, 0x46, 0xb5, 0x40, 0x99},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x04, 0xb5, 0xff},
    {0x0a, 0x46, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x9b, 0xb5, 0x6f},
    {0x02, 0x43, 0x9b, 0xb5, 0x6f},
    {0x07, 0x43, 0x9b, 0xb5, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x04, 0x7f},
    {0x0b, 0x43, 0x08, 0x44, 0x7f},
    {0x05, 0x41, 0x08, 0x04, 0x7f},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x44, 0x7f},
    {0x88, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x41, 0x08, 0x04, 0x7f},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xf5, 0x00, 0x99},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x04, 0x7f},
    {0x02, 0x41, 0x08, 0x04, 0x7f},
    {0x07, 0x41, 0x08, 0x04, 0x7f},
    {0x0d, 0x41, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x9b, 0xb5, 0x6f},
    {0x99, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x9b, 0xb5, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xf5, 0x00, 0x99},
    {0x95, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x9b, 0xb5, 0x6f},
    {0x01, 0x41, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x08, 0x44, 0x7f},
    {0x83, 0x9b, 0xb5, 0x00, 0x0f},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x44, 0x7f},
    {0x04, 0x42, 0x9b, 0xb5, 0x6f},
    {0x02, 0x42, 0x9b, 0xb5, 0x6f},
    {0x07, 0x42, 0x9b, 0xb5, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0xb5, 0x00, 0x88},
    {0x0b, 0x44, 0xb5, 0x40, 0x88},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x0c, 0x42, 0xf5, 0x00, 0x88},
    {0x09, 0x44, 0xb5, 0x40, 0x88},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8c, 0xb5, 0x00, 0x0e},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0xf5, 0x00, 0x88},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0xb5, 0x00, 0x88},
    {0x02, 0x45, 0xb5, 0x00, 0x88},
    {0x07, 0x45, 0xb5, 0x00, 0x88},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0xf5, 0x00, 0x88},
    {0x91, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0xb5, 0x40, 0x88},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8c, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0xb5, 0x40, 0x88},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x08, 0x04, 0x7f},
    {0x0b, 0x42, 0x08, 0x44, 0x7f},
    {0x05, 0x44, 0x08, 0x04, 0x7f},
    {0x1a, 0x43, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x08, 0x44, 0x7f},
    {0x8a, 0xb5, 0x00, 0x00, 0x08},
    {0x06, 0x44, 0x08, 0x04, 0x7f},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0xf5, 0x00, 0x88},
    {0x86, 0xb5, 0x00, 0x00, 0x08},
    {0x04, 0x44, 0x08, 0x04, 0x7f},
    {0x02, 0x44, 0x08, 0x04, 0x7f},
    {0x07, 0x44, 0x08, 0x04, 0x7f},
    {0x0d, 0x42, 0xf5, 0x00, 0x88},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0xf5, 0x00, 0x88},
    {0xc4, 0x48, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0xf5, 0x00, 0x88},
    {0x08, 0x42, 0x08, 0x44, 0x7f},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x44, 0x7f},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x4b, 0x04, 0xb5, 0xbf},
    {0x0b, 0x48, 0x04, 0xf5, 0xbf},
    {0x05, 0x4b, 0x04, 0xb5, 0xbf},
    {0x0c, 0x46, 0xc1, 0xb5, 0xaf},
    {0x09, 0x48, 0x04, 0xf5, 0xbf},
    {0xda, 0x6c, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0x04, 0xb5, 0xbf},
    {0x14, 0x41, 0xc1, 0xf5, 0xaf},
    {0xc2, 0x65, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0xc1, 0xf5, 0xaf},
    {0x0e, 0x46, 0xc1, 0xb5, 0xaf},
    {0x1c, 0x41, 0xc1, 0xf5, 0xaf},
    {0x04, 0x4b, 0x04, 0xb5, 0xbf},
    {0x02, 0x4b, 0x04, 0xb5, 0xbf},
    {0x07, 0x4b, 0x04, 0xb5, 0xbf},
    {0x17, 0x41, 0xc1, 0xf5, 0xaf},
    {0x03, 0x43, 0x2c, 0xb5, 0x6e},
    {0x1b, 0x41, 0xc1, 0xf5, 0xaf},
    {0x05, 0x43, 0x2c, 0xb5, 0x6e},
    {0x67, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x46, 0xc1, 0xb5, 0xaf},
    {0xc9, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x2c, 0xb5, 0x6e},
    {0x13, 0x41, 0xc1, 0xf5, 0xaf},
    {0x08, 0x48, 0x04, 0xf5, 0xbf},
    {0x77, 0x03, 0x81, 0xb5, 0xaf},
    {0xc1, 0x65, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0x04, 0xf5, 0xbf},
    {0x04, 0x43, 0x2c, 0xb5, 0x6e},
    {0x02, 0x43, 0x2c, 0xb5, 0x6e},
    {0x07, 0x43, 0x2c, 0xb5, 0x6e},
    {0x6d, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x3a, 0xb5, 0x7f},
    {0x0b, 0x43, 0x3a, 0xf5, 0x7f},
    {0x05, 0x41, 0x3a, 0xb5, 0x7f},
    {0x75, 0x03, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x3a, 0xf5, 0x7f},
    {0xc7, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x3a, 0xb5, 0x7f},
    {0x63, 0x03, 0x81, 0xb5, 0xaf},
    {0x82, 0x82, 0x81, 0xb5, 0x0f},
    {0x73, 0x03, 0x81, 0xb5, 0xaf},
    {0x0f, 0x46, 0xc1, 0xb5, 0xaf},
    {0x7f, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x3a, 0xb5, 0x7f},
    {0x02, 0x41, 0x3a, 0xb5, 0x7f},
    {0x07, 0x41, 0x3a, 0xb5, 0x7f},
    {0x0d, 0x46, 0xc1, 0xb5, 0xaf},
    {0x03, 0x42, 0x2c, 0xb5, 0x6e},
    {0x98, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x2c, 0xb5, 0x6e},
    {0x6b, 0x03, 0x81, 0xb5, 0xaf},
    {0x11, 0x46, 0xc1, 0xb5, 0xaf},
    {0x94, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x2c, 0xb5, 0x6e},
    {0x01, 0x46, 0xc1, 0xb5, 0xaf},
    {0x08, 0x43, 0x3a, 0xf5, 0x7f},
    {0xc3, 0x6c, 0xf5, 0x00, 0x0e},
    {0x81, 0x82, 0x81, 0xb5, 0x0f},
    {0x0a, 0x43, 0x3a, 0xf5, 0x7f},
    {0x04, 0x42, 0x2c, 0xb5, 0x6e},
    {0x02, 0x42, 0x2c, 0xb5, 0x6e},
    {0x07, 0x42, 0x2c, 0xb5, 0x6e},
    {0x5d, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x46, 0x04, 0x04, 0x8f},
    {0x0b, 0x41, 0x04, 0x44, 0x8f},
    {0x05, 0x46, 0x04, 0x04, 0x8f},
    {0x0c, 0x43, 0x44, 0x04, 0x8f},
    {0x09, 0x41, 0x04, 0x44, 0x8f},
    {0xda, 0x51, 0x04, 0xb5, 0xff},
    {0x06, 0x46, 0x04, 0x04, 0x8f},
    {0x61, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x59, 0x04, 0xb5, 0xff},
    {0x71, 0x03, 0x81, 0xb5, 0xaf},
    {0x0e, 0x43, 0x44, 0x04, 0x8f},
    {0x7d, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x46, 0x04, 0x04, 0x8f},
    {0x02, 0x46, 0x04, 0x04, 0x8f},
    {0x07, 0x46, 0x04, 0x04, 0x8f},
    {0x6f, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x11, 0x04, 0x6f},
    {0x7b, 0x03, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x11, 0x04, 0x6f},
    {0x69, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x43, 0x44, 0x04, 0x8f},
    {0x90, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x11, 0x04, 0x6f},
    {0x5f, 0x03, 0x81, 0xb5, 0xaf},
    {0x08, 0x41, 0x04, 0x44, 0x8f},
    {0x79, 0x03, 0x81, 0xb5, 0xaf},
    {0xc1, 0x59, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x04, 0x44, 0x8f},
    {0x04, 0x43, 0x11, 0x04, 0x6f},
    {0x02, 0x43, 0x11, 0x04, 0x6f},
    {0x07, 0x43, 0x11, 0x04, 0x6f},
    {0x16, 0x41, 0xc1, 0xf5, 0xaf},
    {0x03, 0x44, 0x3a, 0xb5, 0x7f},
    {0x0b, 0x42, 0x3a, 0xf5, 0x7f},
    {0x05, 0x44, 0x3a, 0xb5, 0x7f},
    {0x1a, 0x41, 0xc1, 0xf5, 0xaf},
    {0x09, 0x42, 0x3a, 0xf5, 0x7f},
    {0x8c, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x44, 0x3a, 0xb5, 0x7f},
    {0x65, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x0f, 0x43, 0xf5, 0xdd},
    {0x19, 0x41, 0xc1, 0xf5, 0xaf},
    {0x0f, 0x43, 0x44, 0x04, 0x8f},
    {0xc5, 0x44, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x3a, 0xb5, 0x7f},
    {0x02, 0x44, 0x3a, 0xb5, 0x7f},
    {0x07, 0x44, 0x3a, 0xb5, 0x7f},
    {0x0d, 0x43, 0x44, 0x04, 0x8f},
    {0x03, 0x42, 0x11, 0x04, 0x6f},
    {0x12, 0x41, 0xc1, 0xf5, 0xaf},
    {0x05, 0x42, 0x11, 0x04, 0x6f},
    {0x15, 0x41, 0xc1, 0xf5, 0xaf},
    {0x11, 0x43, 0x44, 0x04, 0x8f},
    {0xc4, 0x7a, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x11, 0x04, 0x6f},
    {0x01, 0x43, 0x44, 0x04, 0x8f},
    {0x08, 0x42, 0x3a, 0xf5, 0x7f},
    {0xc3, 0x51, 0x04, 0xb5, 0xff},
    {0xc1, 0x0f, 0x43, 0xf5, 0xdd},
    {0x0a, 0x42, 0x3a, 0xf5, 0x7f},
    {0x04, 0x42, 0x11, 0x04, 0x6f},
    {0x02, 0x42, 0x11, 0x04, 0x6f},
    {0x07, 0x42, 0x11, 0x04, 0x6f},
    {0xde, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0xb5, 0x00, 0x99},
    {0x0b, 0x45, 0xb5, 0x40, 0x99},
    {0x05, 0x47, 0xb5, 0x00, 0x99},
    {0x0c, 0x44, 0xf5, 0x00, 0x99},
    {0x09, 0x45, 0xb5, 0x40, 0x99},
    {0x9a, 0x96, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0xb5, 0x00, 0x99},
    {0x14, 0x42, 0xf5, 0x40, 0x99},
    {0x82, 0x85, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0xf5, 0x40, 0x99},
    {0x0e, 0x44, 0xf5, 0x00, 0x99},
    {0x1c, 0x42, 0xf5, 0x40, 0x99},
    {0x04, 0x47, 0xb5, 0x00, 0x99},
    {0x02, 0x47, 0xb5, 0x00, 0x99},
    {0x07, 0x47, 0xb5, 0x00, 0x99},
    {0x17, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x43, 0x96, 0xb5, 0x6f},
    {0x1b, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x43, 0x96, 0xb5, 0x6f},
    {0x68, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x44, 0xf5, 0x00, 0x99},
    {0x8e, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x96, 0xb5, 0x6f},
    {0x13, 0x42, 0xf5, 0x40, 0x99},
    {0x08, 0x45, 0xb5, 0x40, 0x99},
    {0x78, 0x03, 0x81, 0xb5, 0xaf},
    {0x81, 0x85, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0xb5, 0x40, 0x99},
    {0x04, 0x43, 0x96, 0xb5, 0x6f},
    {0x02, 0x43, 0x96, 0xb5, 0x6f},
    {0x07, 0x43, 0x96, 0xb5, 0x6f},
    {0x6e, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x81, 0xb5, 0xaf},
    {0x0f, 0x44, 0xf5, 0x00, 0x99},
    {0x40, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0xf5, 0x00, 0x99},
    {0x03, 0x42, 0x96, 0xb5, 0x6f},
    {0x9b, 0xb5, 0x00, 0x00, 0x09},
    {0x05, 0x42, 0x96, 0xb5, 0x6f},
    {0x6c, 0x03, 0x81, 0xb5, 0xaf},
    {0x11, 0x44, 0xf5, 0x00, 0x99},
    {0x96, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x42, 0x96, 0xb5, 0x6f},
    {0x01, 0x44, 0xf5, 0x00, 0x99},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x96, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x96, 0xb5, 0x6f},
    {0x02, 0x42, 0x96, 0xb5, 0x6f},
    {0x07, 0x42, 0x96, 0xb5, 0x6f},
    {0x5e, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x45, 0x04, 0x04, 0x8f},
    {0x0b, 0x44, 0x04, 0x44, 0x8f},
    {0x05, 0x45, 0x04, 0x04, 0x8f},
    {0x0c, 0x42, 0x44, 0x04, 0x8f},
    {0x09, 0x44, 0x04, 0x44, 0x8f},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x04, 0x8f},
    {0x62, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x81, 0xb5, 0xaf},
    {0x0e, 0x42, 0x44, 0x04, 0x8f},
    {0x7e, 0x03, 0x81, 0xb5, 0xaf},
    {0x04, 0x45, 0x04, 0x04, 0x8f},
    {0x02, 0x45, 0x04, 0x04, 0x8f},
    {0x07, 0x45, 0x04, 0x04, 0x8f},
    {0x70, 0x03, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x81, 0xb5, 0xaf},
    {0x10, 0x42, 0x44, 0x04, 0x8f},
    {0x92, 0xb5, 0x00, 0x00, 0x09},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x81, 0xb5, 0xaf},
    {0x08, 0x44, 0x04, 0x44, 0x8f},
    {0x7a, 0x03, 0x81, 0xb5, 0xaf},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x44, 0x8f},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0xf5, 0x40, 0x99},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0xf5, 0x40, 0x99},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x81, 0xb5, 0xaf},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0xf5, 0x40, 0x99},
    {0x0f, 0x42, 0x44, 0x04, 0x8f},
    {0xc6, 0x44, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x04, 0x8f},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0xf5, 0x40, 0x99},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0xf5, 0x40, 0x99},
    {0x11, 0x42, 0x44, 0x04, 0x8f},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x04, 0x8f},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xb4, 0x81, 0xb5, 0x00, 0x0f},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x44, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x04, 0xb5, 0xff},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x44, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x43, 0xf5, 0xdd},
    {0x18, 0x45, 0x44, 0xf5, 0xbf},
    {0x0e, 0x47, 0x44, 0xb5, 0xbf},
    {0x1c, 0x45, 0x44, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x44, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x04, 0x6f},
    {0x1b, 0x45, 0x44, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x04, 0x6f},
    {0x67, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x47, 0x44, 0xb5, 0xbf},
    {0xc9, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x01, 0x04, 0x6f},
    {0x13, 0x45, 0x44, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x04, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x43, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x04, 0x6f},
    {0x02, 0x43, 0x01, 0x04, 0x6f},
    {0x07, 0x43, 0x01, 0x04, 0x6f},
    {0x6d, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x04, 0x7f},
    {0x0b, 0x43, 0x0a, 0x44, 0x7f},
    {0x05, 0x41, 0x0a, 0x04, 0x7f},
    {0x75, 0x04, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x44, 0x7f},
    {0xc7, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x0a, 0x04, 0x7f},
    {0x63, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x44, 0xbf},
    {0x73, 0x04, 0x04, 0xb5, 0xbf},
    {0x0f, 0x47, 0x44, 0xb5, 0xbf},
    {0x7f, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x04, 0x7f},
    {0x02, 0x41, 0x0a, 0x04, 0x7f},
    {0x07, 0x41, 0x0a, 0x04, 0x7f},
    {0x0d, 0x47, 0x44, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x04, 0x6f},
    {0xd7, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x04, 0x6f},
    {0x6b, 0x04, 0x04, 0xb5, 0xbf},
    {0x11, 0x47, 0x44, 0xb5, 0xbf},
    {0xd3, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x04, 0x6f},
    {0x01, 0x47, 0x44, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x44, 0x7f},
    {0xc3, 0x41, 0x04, 0xb5, 0xff},
    {0xc1, 0x03, 0x02, 0x44, 0xbf},
    {0x0a, 0x43, 0x0a, 0x44, 0x7f},
    {0x04, 0x42, 0x01, 0x04, 0x6f},
    {0x02, 0x42, 0x01, 0x04, 0x6f},
    {0x07, 0x42, 0x01, 0x04, 0x6f},
    {0x5d, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x04, 0x8f},
    {0x0b, 0x41, 0x02, 0x44, 0x8f},
    {0x05, 0x46, 0x02, 0x04, 0x8f},
    {0x0c, 0x43, 0x42, 0x04, 0x8f},
    {0x09, 0x41, 0x02, 0x44, 0x8f},
    {0xda, 0x08, 0x43, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x04, 0x8f},
    {0x61, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x52, 0x04, 0xb5, 0xff},
    {0x71, 0x04, 0x04, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x04, 0x8f},
    {0x7d, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x04, 0x8f},
    {0x02, 0x46, 0x02, 0x04, 0x8f},
    {0x07, 0x46, 0x02, 0x04, 0x8f},
    {0x6f, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x03, 0x6d},
    {0x7b, 0x04, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x03, 0x6d},
    {0x69, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x04, 0x8f},
    {0xcf, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x03, 0x6d},
    {0x5f, 0x04, 0x04, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x44, 0x8f},
    {0x79, 0x04, 0x04, 0xb5, 0xbf},
    {0xc1, 0x52, 0x04, 0xb5, 0xff},
    {0x0a, 0x41, 0x02, 0x44, 0x8f},
    {0x04, 0x43, 0x08, 0x03, 0x6d},
    {0x02, 0x43, 0x08, 0x03, 0x6d},
    {0x07, 0x43, 0x08, 0x03, 0x6d},
    {0x16, 0x45, 0x44, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x04, 0x7f},
    {0x0b, 0x42, 0x0a, 0x44, 0x7f},
    {0x05, 0x44, 0x0a, 0x04, 0x7f},
    {0x1a, 0x45, 0x44, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x44, 0x7f},
    {0xcb, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x04, 0x7f},
    {0x65, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x44, 0xbf},
    {0x19, 0x45, 0x44, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x04, 0x8f},
    {0xc5, 0x42, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x0a, 0x04, 0x7f},
    {0x02, 0x44, 0x0a, 0x04, 0x7f},
    {0x07, 0x44, 0x0a, 0x04, 0x7f},
    {0x0d, 0x43, 0x42, 0x04, 0x8f},
    {0x03, 0x42, 0x08, 0x03, 0x6d},
    {0x12, 0x45, 0x44, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x03, 0x6d},
    {0x15, 0x45, 0x44, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x04, 0x8f},
    {0xc4, 0x4a, 0x04, 0xb5, 0xff},
    {0x06, 0x42, 0x08, 0x03, 0x6d},
    {0x01, 0x43, 0x42, 0x04, 0x8f},
    {0x08, 0x42, 0x0a, 0x44, 0x7f},
    {0xc3, 0x08, 0x43, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x44, 0xbf},
    {0x0a, 0x42, 0x0a, 0x44, 0x7f},
    {0x04, 0x42, 0x08, 0x03, 0x6d},
    {0x02, 0x42, 0x08, 0x03, 0x6d},
    {0x07, 0x42, 0x08, 0x03, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x81, 0xb5, 0xaf},
    {0x0b, 0x46, 0x06, 0x42, 0x9f},
    {0x05, 0x48, 0x81, 0xb5, 0xaf},
    {0x0c, 0x41, 0x46, 0x02, 0x9f},
    {0x09, 0x46, 0x06, 0x42, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x81, 0xb5, 0xaf},
    {0x14, 0x43, 0x46, 0x42, 0x9f},
    {0xc2, 0x55, 0x04, 0xb5, 0xff},
    {0x18, 0x43, 0x46, 0x42, 0x9f},
    {0x0e, 0x41, 0x46, 0x02, 0x9f},
    {0x1c, 0x43, 0x46, 0x42, 0x9f},
    {0x04, 0x48, 0x81, 0xb5, 0xaf},
    {0x02, 0x48, 0x81, 0xb5, 0xaf},
    {0x07, 0x48, 0x81, 0xb5, 0xaf},
    {0x17, 0x43, 0x46, 0x42, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x46, 0x42, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x41, 0x46, 0x02, 0x9f},
    {0xcd, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x46, 0x42, 0x9f},
    {0x08, 0x46, 0x06, 0x42, 0x9f},
    {0x78, 0x04, 0x04, 0xb5, 0xbf},
    {0xc1, 0x55, 0x04, 0xb5, 0xff},
    {0x0a, 0x46, 0x06, 0x42, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x03, 0x7d},
    {0x0b, 0x43, 0x04, 0x43, 0x7d},
    {0x05, 0x41, 0x04, 0x03, 0x7d},
    {0x76, 0x04, 0x04, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x43, 0x7d},
    {0xc8, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x04, 0x03, 0x7d},
    {0x64, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x11, 0x43, 0xf5, 0xdd},
    {0x74, 0x04, 0x04, 0xb5, 0xbf},
    {0x0f, 0x41, 0x46, 0x02, 0x9f},
    {0x40, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x03, 0x7d},
    {0x02, 0x41, 0x04, 0x03, 0x7d},
    {0x07, 0x41, 0x04, 0x03, 0x7d},
    {0x0d, 0x41, 0x46, 0x02, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x04, 0xb5, 0xbf},
    {0x11, 0x41, 0x46, 0x02, 0x9f},
    {0xd5, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x46, 0x02, 0x9f},
    {0x08, 0x43, 0x04, 0x43, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x43, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x04, 0x8f},
    {0x0b, 0x44, 0x02, 0x44, 0x8f},
    {0x05, 0x45, 0x02, 0x04, 0x8f},
    {0x0c, 0x42, 0x42, 0x04, 0x8f},
    {0x09, 0x44, 0x02, 0x44, 0x8f},
    {0xda, 0xc1, 0x44, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x04, 0x8f},
    {0x62, 0x04, 0x04, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x04, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x04, 0x8f},
    {0x7e, 0x04, 0x04, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x04, 0x8f},
    {0x02, 0x45, 0x02, 0x04, 0x8f},
    {0x07, 0x45, 0x02, 0x04, 0x8f},
    {0x70, 0x04, 0x04, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x04, 0x6f},
    {0x7c, 0x04, 0x04, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x04, 0x6f},
    {0x6a, 0x04, 0x04, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x04, 0x8f},
    {0xd1, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0x04, 0x6f},
    {0x60, 0x04, 0x04, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x44, 0x8f},
    {0x7a, 0x04, 0x04, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x44, 0x8f},
    {0x04, 0x43, 0x81, 0x04, 0x6f},
    {0x02, 0x43, 0x81, 0x04, 0x6f},
    {0x07, 0x43, 0x81, 0x04, 0x6f},
    {0x16, 0x43, 0x46, 0x42, 0x9f},
    {0x03, 0x44, 0x04, 0x03, 0x7d},
    {0x0b, 0x42, 0x04, 0x43, 0x7d},
    {0x05, 0x44, 0x04, 0x03, 0x7d},
    {0x1a, 0x43, 0x46, 0x42, 0x9f},
    {0x09, 0x42, 0x04, 0x43, 0x7d},
    {0xca, 0x42, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x04, 0x03, 0x7d},
    {0x66, 0x04, 0x04, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x44, 0xbf},
    {0x19, 0x43, 0x46, 0x42, 0x9f},
    {0x0f, 0x42, 0x42, 0x04, 0x8f},
    {0xc6, 0x42, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x04, 0x03, 0x7d},
    {0x02, 0x44, 0x04, 0x03, 0x7d},
    {0x07, 0x44, 0x04, 0x03, 0x7d},
    {0x0d, 0x42, 0x42, 0x04, 0x8f},
    {0x03, 0x42, 0x81, 0x04, 0x6f},
    {0x12, 0x43, 0x46, 0x42, 0x9f},
    {0x05, 0x42, 0x81, 0x04, 0x6f},
    {0x15, 0x43, 0x46, 0x42, 0x9f},
    {0x11, 0x42, 0x42, 0x04, 0x8f},
    {0xc4, 0x04, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x04, 0x6f},
    {0x01, 0x42, 0x42, 0x04, 0x8f},
    {0x08, 0x42, 0x04, 0x43, 0x7d},
    {0xc3, 0xc1, 0x44, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x44, 0xbf},
    {0x0a, 0x42, 0x04, 0x43, 0x7d},
    {0x04, 0x42, 0x81, 0x04, 0x6f},
    {0x02, 0x42, 0x81, 0x04, 0x6f},
    {0x07, 0x42, 0x81, 0x04, 0x6f},
    {0xf4, 0x46, 0x02, 0xf5, 0xff},
    {0x03, 0x4c, 0x04, 0xb5, 0xbf},
    {0x0b, 0x47, 0x81, 0xf5, 0xaf},
    {0x05, 0x4c, 0x04, 0xb5, 0xbf},
    {0x0c, 0x45, 0xc1, 0xb5, 0xaf},
    {0x09, 0x47, 0x81, 0xf5, 0xaf},
    {0xda, 0x0a, 0x43, 0xf5, 0xdd},
    {0x06, 0x4c, 0x04, 0xb5, 0xbf},
    {0x14, 0x44, 0xc1, 0xf5, 0xaf},
    {0xc2, 0x01, 0x43, 0xf5, 0xdd},
    {0x18, 0x44, 0xc1, 0xf5, 0xaf},
    {0x0e, 0x45, 0xc1, 0xb5, 0xaf},
    {0x1c, 0x44, 0xc1, 0xf5, 0xaf},
    {0x04, 0x4c, 0x04, 0xb5, 0xbf},
    {0x02, 0x4c, 0x04, 0xb5, 0xbf},
    {0x07, 0x4c, 0x04, 0xb5, 0xbf},
    {0x17, 0x44, 0xc1, 0xf5, 0xaf},
    {0x03, 0x43, 0x0a, 0x03, 0x6d},
    {0x1b, 0x44, 0xc1, 0xf5, 0xaf},
    {0x05, 0x43, 0x0a, 0x03, 0x6d},
    {0x67, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x45, 0xc1, 0xb5, 0xaf},
    {0xc9, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x43, 0x0a, 0x03, 0x6d},
    {0x13, 0x44, 0xc1, 0xf5, 0xaf},
    {0x08, 0x47, 0x81, 0xf5, 0xaf},
    {0x77, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0x01, 0x43, 0xf5, 0xdd},
    {0x0a, 0x47, 0x81, 0xf5, 0xaf},
    {0x04, 0x43, 0x0a, 0x03, 0x6d},
    {0x02, 0x43, 0x0a, 0x03, 0x6d},
    {0x07, 0x43, 0x0a, 0x03, 0x6d},
    {0x6d, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x02, 0x03, 0x7d},
    {0x0b, 0x43, 0x02, 0x43, 0x7d},
    {0x05, 0x41, 0x02, 0x03, 0x7d},
    {0x75, 0x02, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x02, 0x43, 0x7d},
    {0xc7, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x02, 0x03, 0x7d},
    {0x63, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x81, 0xb5, 0xaf},
    {0x0f, 0x45, 0xc1, 0xb5, 0xaf},
    {0x7f, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x02, 0x03, 0x7d},
    {0x02, 0x41, 0x02, 0x03, 0x7d},
    {0x07, 0x41, 0x02, 0x03, 0x7d},
    {0x0d, 0x45, 0xc1, 0xb5, 0xaf},
    {0x03, 0x42, 0x0a, 0x03, 0x6d},
    {0xd8, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x03, 0x6d},
    {0x6b, 0x02, 0x81, 0xb5, 0xaf},
    {0x11, 0x45, 0xc1, 0xb5, 0xaf},
    {0xd4, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x03, 0x6d},
    {0x01, 0x45, 0xc1, 0xb5, 0xaf},
    {0x08, 0x43, 0x02, 0x43, 0x7d},
    {0xc3, 0x0a, 0x43, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x0a, 0x03, 0x6d},
    {0x02, 0x42, 0x0a, 0x03, 0x6d},
    {0x07, 0x42, 0x0a, 0x03, 0x6d},
    {0x5d, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x46, 0x07, 0x04, 0x8f},
    {0x0b, 0x41, 0x07, 0x44, 0x8f},
    {0x05, 0x46, 0x07, 0x04, 0x8f},
    {0x0c, 0x43, 0x47, 0x04, 0x8f},
    {0x09, 0x41, 0x07, 0x44, 0x8f},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x04, 0x8f},
    {0x61, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0xc3, 0x44, 0xf5, 0x0f},
    {0x71, 0x02, 0x81, 0xb5, 0xaf},
    {0x0e, 0x43, 0x47, 0x04, 0x8f},
    {0x7d, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x46, 0x07, 0x04, 0x8f},
    {0x02, 0x46, 0x07, 0x04, 0x8f},
    {0x07, 0x46, 0x07, 0x04, 0x8f},
    {0x6f, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x43, 0x47, 0x04, 0x8f},
    {0xd0, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x81, 0xb5, 0xaf},
    {0x08, 0x41, 0x07, 0x44, 0x8f},
    {0x79, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0xc3, 0x44, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x44, 0x8f},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0xc1, 0xf5, 0xaf},
    {0x03, 0x44, 0x02, 0x03, 0x7d},
    {0x0b, 0x42, 0x02, 0x43, 0x7d},
    {0x05, 0x44, 0x02, 0x03, 0x7d},
    {0x1a, 0x44, 0xc1, 0xf5, 0xaf},
    {0x09, 0x42, 0x02, 0x43, 0x7d},
    {0xcc, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x03, 0x7d},
    {0x65, 0x02, 0x81, 0xb5, 0xaf},
    {0x82, 0x81, 0x81, 0xb5, 0x0f},
    {0x19, 0x44, 0xc1, 0xf5, 0xaf},
    {0x0f, 0x43, 0x47, 0x04, 0x8f},
    {0xc5, 0x47, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x02, 0x03, 0x7d},
    {0x02, 0x44, 0x02, 0x03, 0x7d},
    {0x07, 0x44, 0x02, 0x03, 0x7d},
    {0x0d, 0x43, 0x47, 0x04, 0x8f},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0xc1, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0xc1, 0xf5, 0xaf},
    {0x11, 0x43, 0x47, 0x04, 0x8f},
    {0xc4, 0x02, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x04, 0x8f},
    {0x08, 0x42, 0x02, 0x43, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0x81, 0x81, 0x81, 0xb5, 0x0f},
    {0x0a, 0x42, 0x02, 0x43, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x06, 0x02, 0x9f},
    {0x0b, 0x45, 0x06, 0x42, 0x9f},
    {0x05, 0x47, 0x06, 0x02, 0x9f},
    {0x0c, 0x44, 0x46, 0x02, 0x9f},
    {0x09, 0x45, 0x06, 0x42, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x06, 0x02, 0x9f},
    {0x14, 0x42, 0x46, 0x42, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x46, 0x42, 0x9f},
    {0x0e, 0x44, 0x46, 0x02, 0x9f},
    {0x1c, 0x42, 0x46, 0x42, 0x9f},
    {0x04, 0x47, 0x06, 0x02, 0x9f},
    {0x02, 0x47, 0x06, 0x02, 0x9f},
    {0x07, 0x47, 0x06, 0x02, 0x9f},
    {0x17, 0x42, 0x46, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x46, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x44, 0x46, 0x02, 0x9f},
    {0xce, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x46, 0x42, 0x9f},
    {0x08, 0x45, 0x06, 0x42, 0x9f},
    {0x78, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x06, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x41, 0x07, 0x03, 0x7d},
    {0x0b, 0x43, 0x07, 0x43, 0x7d},
    {0x05, 0x41, 0x07, 0x03, 0x7d},
    {0x76, 0x02, 0x81, 0xb5, 0xaf},
    {0x09, 0x43, 0x07, 0x43, 0x7d},
    {0xc8, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x41, 0x07, 0x03, 0x7d},
    {0x64, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x04, 0x02, 0x44, 0xbf},
    {0x74, 0x02, 0x81, 0xb5, 0xaf},
    {0x0f, 0x44, 0x46, 0x02, 0x9f},
    {0x40, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x41, 0x07, 0x03, 0x7d},
    {0x02, 0x41, 0x07, 0x03, 0x7d},
    {0x07, 0x41, 0x07, 0x03, 0x7d},
    {0x0d, 0x44, 0x46, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x46, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x81, 0xb5, 0xaf},
    {0x11, 0x44, 0x46, 0x02, 0x9f},
    {0xd6, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x46, 0x02, 0x9f},
    {0x08, 0x43, 0x07, 0x43, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x44, 0xbf},
    {0x0a, 0x43, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x45, 0x07, 0x04, 0x8f},
    {0x0b, 0x44, 0x07, 0x44, 0x8f},
    {0x05, 0x45, 0x07, 0x04, 0x8f},
    {0x0c, 0x42, 0x47, 0x04, 0x8f},
    {0x09, 0x44, 0x07, 0x44, 0x8f},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x04, 0x8f},
    {0x62, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x02, 0x02, 0x44, 0xbf},
    {0x72, 0x02, 0x81, 0xb5, 0xaf},
    {0x0e, 0x42, 0x47, 0x04, 0x8f},
    {0x7e, 0x02, 0x81, 0xb5, 0xaf},
    {0x04, 0x45, 0x07, 0x04, 0x8f},
    {0x02, 0x45, 0x07, 0x04, 0x8f},
    {0x07, 0x45, 0x07, 0x04, 0x8f},
    {0x70, 0x02, 0x81, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x81, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x81, 0xb5, 0xaf},
    {0x10, 0x42, 0x47, 0x04, 0x8f},
    {0xd2, 0x46, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x81, 0xb5, 0xaf},
    {0x08, 0x44, 0x07, 0x44, 0x8f},
    {0x7a, 0x02, 0x81, 0xb5, 0xaf},
    {0xc1, 0x02, 0x02, 0x44, 0xbf},
    {0x0a, 0x44, 0x07, 0x44, 0x8f},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x46, 0x42, 0x9f},
    {0x03, 0x44, 0x07, 0x03, 0x7d},
    {0x0b, 0x42, 0x07, 0x43, 0x7d},
    {0x05, 0x44, 0x07, 0x03, 0x7d},
    {0x1a, 0x42, 0x46, 0x42, 0x9f},
    {0x09, 0x42, 0x07, 0x43, 0x7d},
    {0xca, 0x47, 0x04, 0xb5, 0xff},
    {0x06, 0x44, 0x07, 0x03, 0x7d},
    {0x66, 0x02, 0x81, 0xb5, 0xaf},
    {0xc2, 0x07, 0x02, 0x44, 0xbf},
    {0x19, 0x42, 0x46, 0x42, 0x9f},
    {0x0f, 0x42, 0x47, 0x04, 0x8f},
    {0xc6, 0x47, 0x04, 0xb5, 0xff},
    {0x04, 0x44, 0x07, 0x03, 0x7d},
    {0x02, 0x44, 0x07, 0x03, 0x7d},
    {0x07, 0x44, 0x07, 0x03, 0x7d},
    {0x0d, 0x42, 0x47, 0x04, 0x8f},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x46, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x46, 0x42, 0x9f},
    {0x11, 0x42, 0x47, 0x04, 0x8f},
    {0xc4, 0x07, 0x43, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x04, 0x8f},
    {0x08, 0x42, 0x07, 0x43, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x44, 0xbf},
    {0x0a, 0x42, 0x07, 0x43, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xf2, 0x00, 0x00, 0x04},
    {0x0b, 0xf5, 0x00, 0x40, 0x05},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x0c, 0xf5, 0x40, 0x00, 0x06},
    {0x09, 0xf5, 0x00, 0x40, 0x05},
    {0xda, 0x5e, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x14, 0x4e, 0xf5, 0x40, 0xff},
    {0x82, 0xb5, 0x00, 0x00, 0x05},
    {0x18, 0x4e, 0xf5, 0x40, 0xff},
    {0x0e, 0xf5, 0x40, 0x00, 0x06},
    {0x1c, 0x4e, 0xf5, 0x40, 0xff},
    {0x04, 0xf2, 0x00, 0x00, 0x04},
    {0x02, 0xf2, 0x00, 0x00, 0x04},
    {0x07, 0xf2, 0x00, 0x00, 0x04},
    {0x17, 0x4e, 0xf5, 0x40, 0xff},
    {0x03, 0x43, 0x1e, 0xb5, 0x6e},
    {0x1b, 0x4e, 0xf5, 0x40, 0xff},
    {0x05, 0x43, 0x1e, 0xb5, 0x6e},
    {0x67, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0xf5, 0x40, 0x00, 0x06},
    {0xc9, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x1e, 0xb5, 0x6e},
    {0x13, 0x4e, 0xf5, 0x40, 0xff},
    {0x08, 0xf5, 0x00, 0x40, 0x05},
    {0x77, 0x0c, 0xb5, 0x00, 0xff},
    {0x81, 0xb5, 0x00, 0x00, 0x05},
    {0x0a, 0xf5, 0x00, 0x40, 0x05},
    {0x04, 0x43, 0x1e, 0xb5, 0x6e},
    {0x02, 0x43, 0x1e, 0xb5, 0x6e},
    {0x07, 0x43, 0x1e, 0xb5, 0x6e},
    {0x6d, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x16, 0xb5, 0x7e},
    {0x0b, 0x43, 0x16, 0xf5, 0x7e},
    {0x05, 0x41, 0x16, 0xb5, 0x7e},
    {0x75, 0x0c, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x16, 0xf5, 0x7e},
    {0xc7, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x16, 0xb5, 0x7e},
    {0x63, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x03, 0x07, 0xf5, 0xee},
    {0x73, 0x0c, 0xb5, 0x00, 0xff},
    {0x0f, 0xf5, 0x40, 0x00, 0x06},
    {0x7f, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x16, 0xb5, 0x7e},
    {0x02, 0x41, 0x16, 0xb5, 0x7e},
    {0x07, 0x41, 0x16, 0xb5, 0x7e},
    {0x0d, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x42, 0x1e, 0xb5, 0x6e},
    {0xd7, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x1e, 0xb5, 0x6e},
    {0x6b, 0x0c, 0xb5, 0x00, 0xff},
    {0x11, 0xf5, 0x40, 0x00, 0x06},
    {0xd3, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x1e, 0xb5, 0x6e},
    {0x01, 0xf5, 0x40, 0x00, 0x06},
    {0x08, 0x43, 0x16, 0xf5, 0x7e},
    {0xc3, 0x5e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x1e, 0xb5, 0x6e},
    {0x02, 0x42, 0x1e, 0xb5, 0x6e},
    {0x07, 0x42, 0x1e, 0xb5, 0x6e},
    {0x5d, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x41, 0x0d, 0xf5, 0x8e},
    {0x05, 0x46, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x43, 0x4d, 0xb5, 0x8e},
    {0x09, 0x41, 0x0d, 0xf5, 0x8e},
    {0xda, 0x03, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x0d, 0xb5, 0x8e},
    {0x61, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x0b, 0x45, 0xb5, 0xee},
    {0x71, 0x0c, 0xb5, 0x00, 0xff},
    {0x0e, 0x43, 0x4d, 0xb5, 0x8e},
    {0x7d, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x46, 0x0d, 0xb5, 0x8e},
    {0x02, 0x46, 0x0d, 0xb5, 0x8e},
    {0x07, 0x46, 0x0d, 0xb5, 0x8e},
    {0x6f, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x03, 0x05, 0x6e},
    {0x7b, 0x0c, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x03, 0x05, 0x6e},
    {0x69, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0x43, 0x4d, 0xb5, 0x8e},
    {0xcf, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x03, 0x05, 0x6e},
    {0x5f, 0x0c, 0xb5, 0x00, 0xff},
    {0x08, 0x41, 0x0d, 0xf5, 0x8e},
    {0x79, 0x0c, 0xb5, 0x00, 0xff},
    {0xc1, 0x0b, 0x45, 0xb5, 0xee},
    {0x0a, 0x41, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x05, 0x6e},
    {0x02, 0x43, 0x03, 0x05, 0x6e},
    {0x07, 0x43, 0x03, 0x05, 0x6e},
    {0x16, 0x4e, 0xf5, 0x40, 0xff},
    {0x03, 0x44, 0x16, 0xb5, 0x7e},
    {0x0b, 0x42, 0x16, 0xf5, 0x7e},
    {0x05, 0x44, 0x16, 0xb5, 0x7e},
    {0x1a, 0x4e, 0xf5, 0x40, 0xff},
    {0x09, 0x42, 0x16, 0xf5, 0x7e},
    {0xcb, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x16, 0xb5, 0x7e},
    {0x65, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x05, 0x07, 0xf5, 0xee},
    {0x19, 0x4e, 0xf5, 0x40, 0xff},
    {0x0f, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc5, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x16, 0xb5, 0x7e},
    {0x02, 0x44, 0x16, 0xb5, 0x7e},
    {0x07, 0x44, 0x16, 0xb5, 0x7e},
    {0x0d, 0x43, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x05, 0x6e},
    {0x12, 0x4e, 0xf5, 0x40, 0xff},
    {0x05, 0x42, 0x03, 0x05, 0x6e},
    {0x15, 0x4e, 0xf5, 0x40, 0xff},
    {0x11, 0x43, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x56, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x03, 0x05, 0x6e},
    {0x01, 0x43, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x16, 0xf5, 0x7e},
    {0xc3, 0x03, 0x45, 0xb5, 0xee},
    {0xc1, 0x05, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x16, 0xf5, 0x7e},
    {0x04, 0x42, 0x03, 0x05, 0x6e},
    {0x02, 0x42, 0x03, 0x05, 0x6e},
    {0x07, 0x42, 0x03, 0x05, 0x6e},
    {0xdc, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x0a, 0xb5, 0xaf},
    {0x0b, 0x46, 0x01, 0xf5, 0x9f},
    {0x05, 0x49, 0x0a, 0xb5, 0xaf},
    {0x0c, 0x41, 0x41, 0xb5, 0x9f},
    {0x09, 0x46, 0x01, 0xf5, 0x9f},
    {0xda, 0x0b, 0x44, 0xf5, 0xee},
    {0x06, 0x49, 0x0a, 0xb5, 0xaf},
    {0x14, 0x43, 0x41, 0xf5, 0x9f},
    {0xc2, 0x0c, 0x44, 0xf5, 0xee},
    {0x18, 0x43, 0x41, 0xf5, 0x9f},
    {0x0e, 0x41, 0x41, 0xb5, 0x9f},
    {0x1c, 0x43, 0x41, 0xf5, 0x9f},
    {0x04, 0x49, 0x0a, 0xb5, 0xaf},
    {0x02, 0x49, 0x0a, 0xb5, 0xaf},
    {0x07, 0x49, 0x0a, 0xb5, 0xaf},
    {0x17, 0x43, 0x41, 0xf5, 0x9f},
    {0x03, 0x43, 0x0b, 0x04, 0x6e},
    {0x1b, 0x43, 0x41, 0xf5, 0x9f},
    {0x05, 0x43, 0x0b, 0x04, 0x6e},
    {0x68, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0x41, 0x41, 0xb5, 0x9f},
    {0xcd, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x0b, 0x04, 0x6e},
    {0x13, 0x43, 0x41, 0xf5, 0x9f},
    {0x08, 0x46, 0x01, 0xf5, 0x9f},
    {0x78, 0x0c, 0xb5, 0x00, 0xff},
    {0xc1, 0x0c, 0x44, 0xf5, 0xee},
    {0x0a, 0x46, 0x01, 0xf5, 0x9f},
    {0x04, 0x43, 0x0b, 0x04, 0x6e},
    {0x02, 0x43, 0x0b, 0x04, 0x6e},
    {0x07, 0x43, 0x0b, 0x04, 0x6e},
    {0x6e, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x41, 0x03, 0x04, 0x7e},
    {0x0b, 0x43, 0x03, 0x44, 0x7e},
    {0x05, 0x41, 0x03, 0x04, 0x7e},
    {0x76, 0x0c, 0xb5, 0x00, 0xff},
    {0x09, 0x43, 0x03, 0x44, 0x7e},
    {0xc8, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x04, 0x7e},
    {0x64, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x09, 0x45, 0xb5, 0xee},
    {0x74, 0x0c, 0xb5, 0x00, 0xff},
    {0x0f, 0x41, 0x41, 0xb5, 0x9f},
    {0x40, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x41, 0x03, 0x04, 0x7e},
    {0x02, 0x41, 0x03, 0x04, 0x7e},
    {0x07, 0x41, 0x03, 0x04, 0x7e},
    {0x0d, 0x41, 0x41, 0xb5, 0x9f},
    {0x03, 0x42, 0x0b, 0x04, 0x6e},
    {0xd9, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0b, 0x04, 0x6e},
    {0x6c, 0x0c, 0xb5, 0x00, 0xff},
    {0x11, 0x41, 0x41, 0xb5, 0x9f},
    {0xd5, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0b, 0x04, 0x6e},
    {0x01, 0x41, 0x41, 0xb5, 0x9f},
    {0x08, 0x43, 0x03, 0x44, 0x7e},
    {0xc3, 0x0b, 0x44, 0xf5, 0xee},
    {0xc1, 0x09, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x0b, 0x04, 0x6e},
    {0x02, 0x42, 0x0b, 0x04, 0x6e},
    {0x07, 0x42, 0x0b, 0x04, 0x6e},
    {0x5e, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0b, 0x44, 0x0d, 0xf5, 0x8e},
    {0x05, 0x45, 0x0d, 0xb5, 0x8e},
    {0x0c, 0x42, 0x4d, 0xb5, 0x8e},
    {0x09, 0x44, 0x0d, 0xf5, 0x8e},
    {0xda, 0x05, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x0d, 0xb5, 0x8e},
    {0x62, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0xda, 0x42, 0xf5, 0x0f},
    {0x72, 0x0c, 0xb5, 0x00, 0xff},
    {0x0e, 0x42, 0x4d, 0xb5, 0x8e},
    {0x7e, 0x0c, 0xb5, 0x00, 0xff},
    {0x04, 0x45, 0x0d, 0xb5, 0x8e},
    {0x02, 0x45, 0x0d, 0xb5, 0x8e},
    {0x07, 0x45, 0x0d, 0xb5, 0x8e},
    {0x70, 0x0c, 0xb5, 0x00, 0xff},
    {0x03, 0x43, 0x05, 0x05, 0x6e},
    {0x7c, 0x0c, 0xb5, 0x00, 0xff},
    {0x05, 0x43, 0x05, 0x05, 0x6e},
    {0x6a, 0x0c, 0xb5, 0x00, 0xff},
    {0x10, 0x42, 0x4d, 0xb5, 0x8e},
    {0xd1, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x05, 0x05, 0x6e},
    {0x60, 0x0c, 0xb5, 0x00, 0xff},
    {0x08, 0x44, 0x0d, 0xf5, 0x8e},
    {0x7a, 0x0c, 0xb5, 0x00, 0xff},
    {0xc1, 0xda, 0x42, 0xf5, 0x0f},
    {0x0a, 0x44, 0x0d, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x05, 0x6e},
    {0x02, 0x43, 0x05, 0x05, 0x6e},
    {0x07, 0x43, 0x05, 0x05, 0x6e},
    {0x16, 0x43, 0x41, 0xf5, 0x9f},
    {0x03, 0x44, 0x03, 0x04, 0x7e},
    {0x0b, 0x42, 0x03, 0x44, 0x7e},
    {0x05, 0x44, 0x03, 0x04, 0x7e},
    {0x1a, 0x43, 0x41, 0xf5, 0x9f},
    {0x09, 0x42, 0x03, 0x44, 0x7e},
    {0xca, 0x4d, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x04, 0x7e},
    {0x66, 0x0c, 0xb5, 0x00, 0xff},
    {0xc2, 0x06, 0x07, 0xf5, 0xee},
    {0x19, 0x43, 0x41, 0xf5, 0x9f},
    {0x0f, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc6, 0x4d, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x04, 0x7e},
    {0x02, 0x44, 0x03, 0x04, 0x7e},
    {0x07, 0x44, 0x03, 0x04, 0x7e},
    {0x0d, 0x42, 0x4d, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x05, 0x6e},
    {0x12, 0x43, 0x41, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x05, 0x6e},
    {0x15, 0x43, 0x41, 0xf5, 0x9f},
    {0x11, 0x42, 0x4d, 0xb5, 0x8e},
    {0xc4, 0x03, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x05, 0x05, 0x6e},
    {0x01, 0x42, 0x4d, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x44, 0x7e},
    {0xc3, 0x05, 0x45, 0xb5, 0xee},
    {0xc1, 0x06, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x03, 0x44, 0x7e},
    {0x04, 0x42, 0x05, 0x05, 0x6e},
    {0x02, 0x42, 0x05, 0x05, 0x6e},
    {0x07, 0x42, 0x05, 0x05, 0x6e},
    {0xf4, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x4a, 0x02, 0xb5, 0xbf},
    {0x0b, 0x49, 0x02, 0xf5, 0xbf},
    {0x05, 0x4a, 0x02, 0xb5, 0xbf},
    {0x0c, 0x46, 0x4a, 0xb5, 0xaf},
    {0x09, 0x49, 0x02, 0xf5, 0xbf},
    {0xda, 0x4c, 0x02, 0xb5, 0xee},
    {0x06, 0x4a, 0x02, 0xb5, 0xbf},
    {0x14, 0x41, 0x4a, 0xf5, 0xaf},
    {0xc2, 0x54, 0x02, 0xb5, 0xee},
    {0x18, 0x41, 0x4a, 0xf5, 0xaf},
    {0x0e, 0x46, 0x4a, 0xb5, 0xaf},
    {0x1c, 0x41, 0x4a, 0xf5, 0xaf},
    {0x04, 0x4a, 0x02, 0xb5, 0xbf},
    {0x02, 0x4a, 0x02, 0xb5, 0xbf},
    {0x07, 0x4a, 0x02, 0xb5, 0xbf},
    {0x17, 0x41, 0x4a, 0xf5, 0xaf},
    {0x03, 0x43, 0x0c, 0x02, 0x6e},
    {0x1b, 0x41, 0x4a, 0xf5, 0xaf},
    {0x05, 0x43, 0x0c, 0x02, 0x6e},
    {0x67, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x46, 0x4a, 0xb5, 0xaf},
    {0xc9, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0c, 0x02, 0x6e},
    {0x13, 0x41, 0x4a, 0xf5, 0xaf},
    {0x08, 0x49, 0x02, 0xf5, 0xbf},
    {0x77, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x54, 0x02, 0xb5, 0xee},
    {0x0a, 0x49, 0x02, 0xf5, 0xbf},
    {0x04, 0x43, 0x0c, 0x02, 0x6e},
    {0x02, 0x43, 0x0c, 0x02, 0x6e},
    {0x07, 0x43, 0x0c, 0x02, 0x6e},
    {0x6d, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x0b, 0x02, 0x7e},
    {0x0b, 0x43, 0x0b, 0x42, 0x7e},
    {0x05, 0x41, 0x0b, 0x02, 0x7e},
    {0x75, 0x03, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x0b, 0x42, 0x7e},
    {0xc7, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0b, 0x02, 0x7e},
    {0x63, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0xc2, 0x4a, 0xf5, 0x0f},
    {0x73, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x46, 0x4a, 0xb5, 0xaf},
    {0x7f, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x0b, 0x02, 0x7e},
    {0x02, 0x41, 0x0b, 0x02, 0x7e},
    {0x07, 0x41, 0x0b, 0x02, 0x7e},
    {0x0d, 0x46, 0x4a, 0xb5, 0xaf},
    {0x03, 0x42, 0x0c, 0x02, 0x6e},
    {0xd8, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x0c, 0x02, 0x6e},
    {0x6b, 0x03, 0x0a, 0xb5, 0xaf},
    {0x11, 0x46, 0x4a, 0xb5, 0xaf},
    {0xd4, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x0c, 0x02, 0x6e},
    {0x01, 0x46, 0x4a, 0xb5, 0xaf},
    {0x08, 0x43, 0x0b, 0x42, 0x7e},
    {0xc3, 0x4c, 0x02, 0xb5, 0xee},
    {0xc1, 0xc2, 0x4a, 0xf5, 0x0f},
    {0x0a, 0x43, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x0c, 0x02, 0x6e},
    {0x02, 0x42, 0x0c, 0x02, 0x6e},
    {0x07, 0x42, 0x0c, 0x02, 0x6e},
    {0x5d, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x46, 0x03, 0x02, 0x8e},
    {0x0b, 0x41, 0x03, 0x42, 0x8e},
    {0x05, 0x46, 0x03, 0x02, 0x8e},
    {0x0c, 0x43, 0x43, 0x02, 0x8e},
    {0x09, 0x41, 0x03, 0x42, 0x8e},
    {0xda, 0x09, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0x03, 0x02, 0x8e},
    {0x61, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x58, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x43, 0x43, 0x02, 0x8e},
    {0x7d, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x46, 0x03, 0x02, 0x8e},
    {0x02, 0x46, 0x03, 0x02, 0x8e},
    {0x07, 0x46, 0x03, 0x02, 0x8e},
    {0x6f, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x09, 0x04, 0x6e},
    {0x7b, 0x03, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x09, 0x04, 0x6e},
    {0x69, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x43, 0x43, 0x02, 0x8e},
    {0xd0, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x09, 0x04, 0x6e},
    {0x5f, 0x03, 0x0a, 0xb5, 0xaf},
    {0x08, 0x41, 0x03, 0x42, 0x8e},
    {0x79, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x58, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x09, 0x04, 0x6e},
    {0x02, 0x43, 0x09, 0x04, 0x6e},
    {0x07, 0x43, 0x09, 0x04, 0x6e},
    {0x16, 0x41, 0x4a, 0xf5, 0xaf},
    {0x03, 0x44, 0x0b, 0x02, 0x7e},
    {0x0b, 0x42, 0x0b, 0x42, 0x7e},
    {0x05, 0x44, 0x0b, 0x02, 0x7e},
    {0x1a, 0x41, 0x4a, 0xf5, 0xaf},
    {0x09, 0x42, 0x0b, 0x42, 0x7e},
    {0xcc, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x0b, 0x02, 0x7e},
    {0x65, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x0e, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0x4a, 0xf5, 0xaf},
    {0x0f, 0x43, 0x43, 0x02, 0x8e},
    {0xc5, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0b, 0x02, 0x7e},
    {0x02, 0x44, 0x0b, 0x02, 0x7e},
    {0x07, 0x44, 0x0b, 0x02, 0x7e},
    {0x0d, 0x43, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x09, 0x04, 0x6e},
    {0x12, 0x41, 0x4a, 0xf5, 0xaf},
    {0x05, 0x42, 0x09, 0x04, 0x6e},
    {0x15, 0x41, 0x4a, 0xf5, 0xaf},
    {0x11, 0x43, 0x43, 0x02, 0x8e},
    {0xc4, 0x4b, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x09, 0x04, 0x6e},
    {0x01, 0x43, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x0b, 0x42, 0x7e},
    {0xc3, 0x09, 0x44, 0xf5, 0xee},
    {0xc1, 0x0e, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x0b, 0x42, 0x7e},
    {0x04, 0x42, 0x09, 0x04, 0x6e},
    {0x02, 0x42, 0x09, 0x04, 0x6e},
    {0x07, 0x42, 0x09, 0x04, 0x6e},
    {0xdd, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x01, 0xb5, 0x9f},
    {0x0b, 0x45, 0x01, 0xf5, 0x9f},
    {0x05, 0x47, 0x01, 0xb5, 0x9f},
    {0x0c, 0x44, 0x41, 0xb5, 0x9f},
    {0x09, 0x45, 0x01, 0xf5, 0x9f},
    {0x9a, 0x9a, 0xb5, 0x00, 0x0c},
    {0x06, 0x47, 0x01, 0xb5, 0x9f},
    {0x14, 0x42, 0x41, 0xf5, 0x9f},
    {0xc2, 0x5c, 0x02, 0xb5, 0xee},
    {0x18, 0x42, 0x41, 0xf5, 0x9f},
    {0x0e, 0x44, 0x41, 0xb5, 0x9f},
    {0x1c, 0x42, 0x41, 0xf5, 0x9f},
    {0x04, 0x47, 0x01, 0xb5, 0x9f},
    {0x02, 0x47, 0x01, 0xb5, 0x9f},
    {0x07, 0x47, 0x01, 0xb5, 0x9f},
    {0x17, 0x42, 0x41, 0xf5, 0x9f},
    {0x03, 0x43, 0x9a, 0xb5, 0x6c},
    {0x1b, 0x42, 0x41, 0xf5, 0x9f},
    {0x05, 0x43, 0x9a, 0xb5, 0x6c},
    {0x68, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x44, 0x41, 0xb5, 0x9f},
    {0xce, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x9a, 0xb5, 0x6c},
    {0x13, 0x42, 0x41, 0xf5, 0x9f},
    {0x08, 0x45, 0x01, 0xf5, 0x9f},
    {0x78, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x5c, 0x02, 0xb5, 0xee},
    {0x0a, 0x45, 0x01, 0xf5, 0x9f},
    {0x04, 0x43, 0x9a, 0xb5, 0x6c},
    {0x02, 0x43, 0x9a, 0xb5, 0x6c},
    {0x07, 0x43, 0x9a, 0xb5, 0x6c},
    {0x6e, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x05, 0x04, 0x7e},
    {0x0b, 0x43, 0x05, 0x44, 0x7e},
    {0x05, 0x41, 0x05, 0x04, 0x7e},
    {0x76, 0x03, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x05, 0x44, 0x7e},
    {0xc8, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x05, 0x04, 0x7e},
    {0x64, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x04, 0x07, 0xf5, 0xee},
    {0x74, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x44, 0x41, 0xb5, 0x9f},
    {0x40, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x05, 0x04, 0x7e},
    {0x02, 0x41, 0x05, 0x04, 0x7e},
    {0x07, 0x41, 0x05, 0x04, 0x7e},
    {0x0d, 0x44, 0x41, 0xb5, 0x9f},
    {0x03, 0x42, 0x9a, 0xb5, 0x6c},
    {0xdb, 0x41, 0xf5, 0x40, 0x0f},
    {0x05, 0x42, 0x9a, 0xb5, 0x6c},
    {0x6c, 0x03, 0x0a, 0xb5, 0xaf},
    {0x11, 0x44, 0x41, 0xb5, 0x9f},
    {0xd6, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x9a, 0xb5, 0x6c},
    {0x01, 0x44, 0x41, 0xb5, 0x9f},
    {0x08, 0x43, 0x05, 0x44, 0x7e},
    {0x83, 0x9a, 0xb5, 0x00, 0x0c},
    {0xc1, 0x04, 0x07, 0xf5, 0xee},
    {0x0a, 0x43, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x9a, 0xb5, 0x6c},
    {0x02, 0x42, 0x9a, 0xb5, 0x6c},
    {0x07, 0x42, 0x9a, 0xb5, 0x6c},
    {0x5e, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x45, 0x03, 0x02, 0x8e},
    {0x0b, 0x44, 0x03, 0x42, 0x8e},
    {0x05, 0x45, 0x03, 0x02, 0x8e},
    {0x0c, 0x42, 0x43, 0x02, 0x8e},
    {0x09, 0x44, 0x03, 0x42, 0x8e},
    {0xda, 0x06, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x03, 0x02, 0x8e},
    {0x62, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x02, 0x07, 0xf5, 0xee},
    {0x72, 0x03, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x42, 0x43, 0x02, 0x8e},
    {0x7e, 0x03, 0x0a, 0xb5, 0xaf},
    {0x04, 0x45, 0x03, 0x02, 0x8e},
    {0x02, 0x45, 0x03, 0x02, 0x8e},
    {0x07, 0x45, 0x03, 0x02, 0x8e},
    {0x70, 0x03, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x06, 0x05, 0x6e},
    {0x7c, 0x03, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x06, 0x05, 0x6e},
    {0x6a, 0x03, 0x0a, 0xb5, 0xaf},
    {0x10, 0x42, 0x43, 0x02, 0x8e},
    {0xd2, 0x41, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x06, 0x05, 0x6e},
    {0x60, 0x03, 0x0a, 0xb5, 0xaf},
    {0x08, 0x44, 0x03, 0x42, 0x8e},
    {0x7a, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x02, 0x07, 0xf5, 0xee},
    {0x0a, 0x44, 0x03, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x05, 0x6e},
    {0x02, 0x43, 0x06, 0x05, 0x6e},
    {0x07, 0x43, 0x06, 0x05, 0x6e},
    {0x16, 0x42, 0x41, 0xf5, 0x9f},
    {0x03, 0x44, 0x05, 0x04, 0x7e},
    {0x0b, 0x42, 0x05, 0x44, 0x7e},
    {0x05, 0x44, 0x05, 0x04, 0x7e},
    {0x1a, 0x42, 0x41, 0xf5, 0x9f},
    {0x09, 0x42, 0x05, 0x44, 0x7e},
    {0xca, 0x43, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x05, 0x04, 0x7e},
    {0x66, 0x03, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x07, 0x07, 0xf5, 0xee},
    {0x19, 0x42, 0x41, 0xf5, 0x9f},
    {0x0f, 0x42, 0x43, 0x02, 0x8e},
    {0xc6, 0x43, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x05, 0x04, 0x7e},
    {0x02, 0x44, 0x05, 0x04, 0x7e},
    {0x07, 0x44, 0x05, 0x04, 0x7e},
    {0x0d, 0x42, 0x43, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x05, 0x6e},
    {0x12, 0x42, 0x41, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x05, 0x6e},
    {0x15, 0x42, 0x41, 0xf5, 0x9f},
    {0x11, 0x42, 0x43, 0x02, 0x8e},
    {0xc4, 0x05, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x06, 0x05, 0x6e},
    {0x01, 0x42, 0x43, 0x02, 0x8e},
    {0x08, 0x42, 0x05, 0x44, 0x7e},
    {0xc3, 0x06, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x07, 0xf5, 0xee},
    {0x0a, 0x42, 0x05, 0x44, 0x7e},
    {0x04, 0x42, 0x06, 0x05, 0x6e},
    {0x02, 0x42, 0x06, 0x05, 0x6e},
    {0x07, 0x42, 0x06, 0x05, 0x6e},
    {0xf4, 0x4a, 0xf5, 0x40, 0x0f},
    {0x03, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4a, 0xb5, 0x40, 0xcc},
    {0x05, 0x4d, 0xb5, 0x00, 0xcc},
    {0x0c, 0x49, 0xf5, 0x00, 0xcc},
    {0x09, 0x4a, 0xb5, 0x40, 0xcc},
    {0xda, 0x62, 0xf5, 0x00, 0x0e},
    {0x06, 0x4d, 0xb5, 0x00, 0xcc},
    {0x14, 0x46, 0x42, 0xf5, 0xbf},
    {0xc2, 0x57, 0x02, 0xb5, 0xee},
    {0x18, 0x46, 0x42, 0xf5, 0xbf},
    {0x0e, 0x49, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x42, 0xf5, 0xbf},
    {0x04, 0x4d, 0xb5, 0x00, 0xcc},
    {0x02, 0x4d, 0xb5, 0x00, 0xcc},
    {0x07, 0x4d, 0xb5, 0x00, 0xcc},
    {0x17, 0x46, 0x42, 0xf5, 0xbf},
    {0x03, 0x43, 0x22, 0xb5, 0x6e},
    {0x1b, 0x46, 0x42, 0xf5, 0xbf},
    {0x05, 0x43, 0x22, 0xb5, 0x6e},
    {0x67, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x49, 0xf5, 0x00, 0xcc},
    {0xc9, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x22, 0xb5, 0x6e},
    {0x13, 0x46, 0x42, 0xf5, 0xbf},
    {0x08, 0x4a, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x02, 